// Decompiled with JetBrains decompiler
// Type: Autodesk.AutoCAD.ADMigrator.CustomizationHostServices
// Assembly: ADMigrator, Version=18.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1EA8663B-E949-4FAD-ABC5-280393847F56
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Virus.Win32.Sality.sil-906e49d7772808af1fb67511fd33b01c809079fddb77015425883ca9739cad33.exe

using Autodesk.AutoCAD.Customization;
using Autodesk.AutoCAD.CustomMigrator;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

namespace Autodesk.AutoCAD.ADMigrator
{
  public class CustomizationHostServices : IHostServices
  {
    private string _regProdRootKey;
    private string _enterpriseCUI;
    private string _mainCUI;

    internal string RegProdRootKey
    {
      get => this._regProdRootKey;
      set => this._regProdRootKey = value;
    }

    internal string EnterpriseCuiFile
    {
      get => this._enterpriseCUI;
      set => this._enterpriseCUI = value;
    }

    internal string MainCuiFile
    {
      get => this._mainCUI;
      set => this._mainCUI = value;
    }

    public string GetDieselEvalString(string dieselExpression) => dieselExpression;

    public string RegistryProductRootKey() => this.RegProdRootKey;

    public void DisplayMessage(string message, string title)
    {
      int num = (int) MessageBox.Show(message, title);
    }

    public void WriteMessage(string message) => MainForm.Log2File(message);

    public int QueryMode() => 0;

    public bool IsOEM() => false;

    public string FindFile(string fileName)
    {
      string file = (string) null;
      string str = MainForm.isTarget ? MainForm.CurrentTargetProfilePath : MainForm.CurrentSourceProfilePath;
      try
      {
        file = str == null ? Migrator.FindFirstDefaultSupportFile(MainForm.isACAD, fileName, this.RegProdRootKey) : Migrator.FindFirstProfileSupportFile(MainForm.isACAD, fileName, str);
        if (string.IsNullOrEmpty(file))
        {
          RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(Migrator.StripWOWFromCURegKey(str) + "\\General Configuration");
          string path1 = registryKey.GetValue("IconFilePath") as string;
          registryKey.Close();
          if (string.IsNullOrEmpty(path1) && MainForm._theForm._Migrator.SourceProdInfo != null)
            path1 = Path.Combine(Migrator.GetRoamableRootFolder(MainForm.isTarget ? MainForm._theForm.ProductRegistryRootKey : MainForm._theForm._Migrator.SourceProdInfo.m_regRootKey), "support\\icons");
          if (!string.IsNullOrEmpty(path1))
          {
            string path = Path.Combine(path1, fileName);
            if (File.Exists(path))
              file = path;
          }
        }
      }
      catch (Exception ex)
      {
      }
      return file;
    }

    public CustomizationSection EnterpriseCUIFile() => (CustomizationSection) null;

    public CustomizationSection MainCUIFile() => (CustomizationSection) null;

    public void InsertMenuOnMenuBar(string menuGroupName, string alias)
    {
    }

    public ArrayList GetLoadedMenuGroupNames() => new ArrayList();

    public void GeneratePropertyCollection(ObjectType ot)
    {
    }

    public Bitmap GetCachedImage(string imageId, bool return_null) => (Bitmap) null;
  }
}
