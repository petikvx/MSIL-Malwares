// Decompiled with JetBrains decompiler
// Type: NChanges.SnapshotCommand
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using Mono.Options;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using System.Xml;

namespace NChanges
{
  public class SnapshotCommand
  {
    private readonly OptionSet _optionSet;
    private string _output = "%name%-%version%-snapshot.xml";
    private string _version;
    private string _excludePattern;

    public SnapshotCommand() => this._optionSet = new OptionSet()
    {
      {
        "o|output=",
        "output file",
        (Action<string>) (v => this._output = v)
      },
      {
        "v|version=",
        "assume this version instead of assembly version",
        (Action<string>) (v => this._version = v)
      },
      {
        "x|exclude=",
        "regex pattern to exclude types",
        (Action<string>) (v => this._excludePattern = v)
      }
    };

    public void Run(IEnumerable<string> args)
    {
      foreach (string expandPath in PathHelper.ExpandPaths((IEnumerable<string>) this._optionSet.Parse(args)))
      {
        Assembly assembly1 = Assembly.LoadFrom(Path.GetFullPath(expandPath));
        AssemblyInfo assembly2 = new AssemblyInfo();
        assembly2.ReadAssembly(assembly1, this._excludePattern);
        if (this._version != null)
          assembly2.Version = this._version;
        string str = PathHelper.FormatPath(this._output, assembly2);
        PathHelper.EnsureFolderExists(str);
        using (XmlTextWriter xmlTextWriter = new XmlTextWriter(str, Encoding.UTF8)
        {
          Formatting = Formatting.Indented
        })
          assembly2.WriteXml((XmlWriter) xmlTextWriter);
      }
    }

    public void ShowHelp() => this._optionSet.WriteOptionDescriptions(Console.Error);
  }
}
