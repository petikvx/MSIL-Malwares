// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSOnOffBox
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  [DefaultEvent("CheckedChanged")]
  internal class NSOnOffBox : Control
  {
    private bool _Checked;
    private GraphicsPath GP1;
    private GraphicsPath GP2;
    private GraphicsPath GP3;
    private GraphicsPath GP4;
    private Pen P1;
    private Pen P2;
    private Pen P3;
    private SolidBrush B1;
    private SolidBrush B2;
    private SolidBrush B3;
    private SolidBrush B4;
    private SolidBrush B5;
    private PathGradientBrush PB1;
    private LinearGradientBrush GB1;
    private Rectangle R1;
    private Rectangle R2;
    private Rectangle R3;
    private StringFormat SF1;
    private StringFormat SF2;
    private int Offset;

    public event NSOnOffBox.CheckedChangedEventHandler CheckedChanged;

    public NSOnOffBox()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.P1 = new Pen(Color.FromArgb(55, 55, 55));
      this.P2 = new Pen(Color.FromArgb(24, 24, 24));
      this.P3 = new Pen(Color.FromArgb(65, 65, 65));
      this.B1 = new SolidBrush(Color.FromArgb(24, 24, 24));
      this.B2 = new SolidBrush(Color.FromArgb(85, 85, 85));
      this.B3 = new SolidBrush(Color.FromArgb(65, 65, 65));
      this.B4 = new SolidBrush(Color.FromArgb(51, 181, 229));
      this.B5 = new SolidBrush(Color.FromArgb(40, 40, 40));
      this.SF1 = new StringFormat();
      this.SF1.LineAlignment = StringAlignment.Center;
      this.SF1.Alignment = StringAlignment.Near;
      this.SF2 = new StringFormat();
      this.SF2.LineAlignment = StringAlignment.Center;
      this.SF2.Alignment = StringAlignment.Far;
      this.Size = new Size(56, 24);
      this.MinimumSize = this.Size;
      this.MaximumSize = this.Size;
    }

    public bool Checked
    {
      get => this._Checked;
      set
      {
        this._Checked = value;
        NSOnOffBox.CheckedChangedEventHandler checkedChangedEvent = this.CheckedChangedEvent;
        if (checkedChangedEvent != null)
          checkedChangedEvent((object) this);
        this.Invalidate();
      }
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
      ThemeModule.G.Clear(this.BackColor);
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      this.GP1 = ThemeModule.CreateRound(0, 0, checked (this.Width - 1), checked (this.Height - 1), 7);
      this.GP2 = ThemeModule.CreateRound(1, 1, checked (this.Width - 3), checked (this.Height - 3), 7);
      this.PB1 = new PathGradientBrush(this.GP1);
      this.PB1.CenterColor = Color.FromArgb(50, 50, 50);
      this.PB1.SurroundColors = new Color[1]
      {
        Color.FromArgb(45, 45, 45)
      };
      this.PB1.FocusScales = new PointF(0.3f, 0.3f);
      ThemeModule.G.FillPath((Brush) this.PB1, this.GP1);
      ThemeModule.G.DrawPath(this.P1, this.GP1);
      ThemeModule.G.DrawPath(this.P2, this.GP2);
      this.R1 = new Rectangle(5, 0, checked (this.Width - 10), checked (this.Height + 2));
      this.R2 = new Rectangle(6, 1, checked (this.Width - 10), checked (this.Height + 2));
      this.R3 = new Rectangle(1, 1, checked (unchecked (this.Width / 2) - 1), checked (this.Height - 3));
      if (this._Checked)
      {
        ThemeModule.G.DrawString("On", this.Font, Brushes.Black, (RectangleF) this.R2, this.SF1);
        ThemeModule.G.DrawString("On", this.Font, Brushes.WhiteSmoke, (RectangleF) this.R1, this.SF1);
        checked { this.R3.X += unchecked (this.Width / 2) - 1; }
      }
      else
      {
        ThemeModule.G.DrawString("Off", this.Font, (Brush) this.B1, (RectangleF) this.R2, this.SF2);
        ThemeModule.G.DrawString("Off", this.Font, (Brush) this.B2, (RectangleF) this.R1, this.SF2);
      }
      this.GP3 = ThemeModule.CreateRound(this.R3, 7);
      this.GP4 = ThemeModule.CreateRound(checked (this.R3.X + 1), checked (this.R3.Y + 1), checked (this.R3.Width - 2), checked (this.R3.Height - 2), 7);
      this.GB1 = new LinearGradientBrush(this.ClientRectangle, Color.FromArgb(60, 60, 60), Color.FromArgb(55, 55, 55), 90f);
      ThemeModule.G.FillPath((Brush) this.GB1, this.GP3);
      ThemeModule.G.DrawPath(this.P2, this.GP3);
      ThemeModule.G.DrawPath(this.P3, this.GP4);
      this.Offset = checked (this.R3.X + unchecked (this.R3.Width / 2) - 3);
      int num = 0;
      do
      {
        if (this._Checked)
          ThemeModule.G.FillRectangle((Brush) this.B1, checked (this.Offset + num * 5), 7, 2, checked (this.Height - 14));
        else
          ThemeModule.G.FillRectangle((Brush) this.B3, checked (this.Offset + num * 5), 7, 2, checked (this.Height - 14));
        ThemeModule.G.SmoothingMode = SmoothingMode.None;
        if (this._Checked)
          ThemeModule.G.FillRectangle((Brush) this.B4, checked (this.Offset + num * 5), 7, 2, checked (this.Height - 14));
        else
          ThemeModule.G.FillRectangle((Brush) this.B5, checked (this.Offset + num * 5), 7, 2, checked (this.Height - 14));
        ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
        checked { ++num; }
      }
      while (num <= 1);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      this.Checked = !this.Checked;
      base.OnMouseDown(e);
    }

    public delegate void CheckedChangedEventHandler(object sender);
  }
}
