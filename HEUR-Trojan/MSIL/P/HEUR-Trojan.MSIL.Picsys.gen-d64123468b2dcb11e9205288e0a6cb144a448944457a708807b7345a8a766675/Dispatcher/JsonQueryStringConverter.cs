// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.JsonQueryStringConverter
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.ServiceModel.Description;
using System.Text;
using System.Xml;

namespace System.ServiceModel.Dispatcher
{
  [ComVisible(false)]
  public class JsonQueryStringConverter : QueryStringConverter
  {
    private DataContractSerializerOperationBehavior dataContractSerializerOperationBehavior;
    private OperationDescription operationDescription;

    public JsonQueryStringConverter()
    {
    }

    internal JsonQueryStringConverter(OperationDescription operationDescription)
    {
      this.operationDescription = operationDescription != null ? operationDescription : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (operationDescription));
      this.dataContractSerializerOperationBehavior = this.operationDescription.Behaviors.Find<DataContractSerializerOperationBehavior>();
    }

    public override bool CanConvert(Type type) => new XsdDataContractExporter().CanExport(type);

    public override object ConvertStringToValue(string parameter, Type parameterType)
    {
      if (parameterType == (Type) null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (parameterType));
      switch (Type.GetTypeCode(parameterType))
      {
        case TypeCode.Boolean:
        case TypeCode.SByte:
        case TypeCode.Byte:
        case TypeCode.Int16:
        case TypeCode.UInt16:
        case TypeCode.Int32:
        case TypeCode.UInt32:
        case TypeCode.Int64:
        case TypeCode.UInt64:
        case TypeCode.Single:
        case TypeCode.Double:
        case TypeCode.Decimal:
          return base.ConvertStringToValue(parameter, parameterType);
        case TypeCode.Char:
        case TypeCode.DateTime:
        case TypeCode.String:
          return this.IsFirstCharacterReservedCharacter(parameter, '"') ? this.CreateJsonDeserializedObject(parameter.Trim(), parameterType) : base.ConvertStringToValue(parameter, parameterType);
        default:
          if (parameterType == typeof (Guid))
          {
            if (parameter == null)
              return (object) new Guid();
            return this.IsFirstCharacterReservedCharacter(parameter, '"') ? this.CreateJsonDeserializedObject(parameter.Trim(), parameterType) : base.ConvertStringToValue(parameter, parameterType);
          }
          if (parameterType == typeof (Uri))
          {
            if (parameter == null)
              return (object) null;
            return this.IsFirstCharacterReservedCharacter(parameter, '"') ? this.CreateJsonDeserializedObject(parameter.Trim(), parameterType) : base.ConvertStringToValue(parameter, parameterType);
          }
          if (parameterType == typeof (TimeSpan))
          {
            if (parameter == null)
              return (object) new TimeSpan();
            return this.IsFirstCharacterReservedCharacter(parameter, '"') ? this.CreateJsonDeserializedObject(parameter.Trim(), parameterType) : base.ConvertStringToValue(parameter, parameterType);
          }
          if (parameterType == typeof (byte[]))
          {
            if (parameter == null)
              return (object) null;
            return this.IsFirstCharacterReservedCharacter(parameter, '[') ? this.CreateJsonDeserializedObject(parameter.Trim(), parameterType) : base.ConvertStringToValue(parameter, parameterType);
          }
          if (parameterType == typeof (DateTimeOffset))
          {
            if (parameter == null)
              return (object) new DateTimeOffset();
            return this.IsFirstCharacterReservedCharacter(parameter, '{') ? this.CreateJsonDeserializedObject(parameter.Trim(), parameterType) : base.ConvertStringToValue(parameter, parameterType);
          }
          if (parameterType == typeof (object))
          {
            if (parameter == null)
              return (object) null;
            return this.IsFirstCharacterReservedCharacter(parameter, '{') ? this.CreateJsonDeserializedObject(parameter.Trim(), parameterType) : base.ConvertStringToValue(parameter, parameterType);
          }
          return parameter == null ? (object) null : this.CreateJsonDeserializedObject(parameter.Trim(), parameterType);
      }
    }

    public override string ConvertValueToString(object parameter, Type parameterType)
    {
      if (parameter == null)
        return (string) null;
      MemoryStream memoryStream = new MemoryStream();
      XmlDictionaryWriter jsonWriter = JsonReaderWriterFactory.CreateJsonWriter((Stream) memoryStream, Encoding.UTF8);
      this.GetDataContractJsonSerializer(parameterType).WriteObject(jsonWriter, parameter);
      jsonWriter.Flush();
      memoryStream.Seek(0L, SeekOrigin.Begin);
      return Encoding.UTF8.GetString(memoryStream.GetBuffer(), (int) memoryStream.Position, (int) memoryStream.Length);
    }

    private object CreateJsonDeserializedObject(string parameter, Type parameterType)
    {
      byte[] bytes = Encoding.UTF8.GetBytes(parameter);
      XmlDictionaryReader jsonReader = JsonReaderWriterFactory.CreateJsonReader(bytes, 0, bytes.Length, Encoding.UTF8, XmlDictionaryReaderQuotas.Max, (OnXmlDictionaryReaderClose) null);
      return this.GetDataContractJsonSerializer(parameterType).ReadObject(jsonReader);
    }

    private DataContractJsonSerializer GetDataContractJsonSerializer(
      Type parameterType)
    {
      if (this.operationDescription == null)
        return new DataContractJsonSerializer(parameterType);
      return this.dataContractSerializerOperationBehavior == null ? new DataContractJsonSerializer(parameterType, (IEnumerable<Type>) this.operationDescription.KnownTypes) : new DataContractJsonSerializer(parameterType, (IEnumerable<Type>) this.operationDescription.KnownTypes, this.dataContractSerializerOperationBehavior.maxItemsInObjectGraph, this.dataContractSerializerOperationBehavior.IgnoreExtensionDataObject, this.dataContractSerializerOperationBehavior.DataContractSurrogate, false);
    }

    private bool IsFirstCharacterReservedCharacter(string parameter, char reservedCharacter)
    {
      if (parameter == null)
        return false;
      string str = parameter.Trim();
      return !(str == string.Empty) && (int) str[0] == (int) reservedCharacter;
    }
  }
}
