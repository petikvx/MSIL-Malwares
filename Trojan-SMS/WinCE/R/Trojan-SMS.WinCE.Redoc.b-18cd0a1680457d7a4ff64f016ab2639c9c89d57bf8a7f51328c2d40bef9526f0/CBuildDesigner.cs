// Decompiled with JetBrains decompiler
// Type: Dbasic.CBuildDesigner
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using System;
using System.Collections;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;

namespace Dbasic
{
  public class CBuildDesigner
  {
    private CRunner CRunner;
    private static BinaryReader br;
    private long designPosition = 0;

    public CBuildDesigner(CRunner CRunner) => this.CRunner = CRunner;

    public void OpenCompiled3(Stream fs)
    {
      this.CRunner.htSubs = new Hashtable();
      this.CRunner.lines = new ArrayList();
      this.CRunner.htLabels = new Hashtable();
      this.CRunner.lines.Add((object) null);
      this.CRunner.alGotoWords = new ArrayList();
      this.CRunner.alGotoWords.Add((object) null);
      Cursor.Current = Cursors.WaitCursor;
      try
      {
        CBuildDesigner.br = new BinaryReader(fs, Encoding.UTF8);
        double.Parse(CBuildDesigner.br.ReadString(), (IFormatProvider) CRunner.cul);
        int num1 = CBuildDesigner.br.ReadInt32();
        Place place;
        for (int index = 0; index < num1; ++index)
        {
          string key = CBuildDesigner.br.ReadString();
          place.LineI = CBuildDesigner.br.ReadInt32();
          place.WordI = CBuildDesigner.br.ReadInt32();
          this.CRunner.htLabels.Add((object) key, (object) place);
        }
        int num2 = CBuildDesigner.br.ReadInt32();
        for (int index = 0; index < num2; ++index)
        {
          string key = CBuildDesigner.br.ReadString();
          place.LineI = CBuildDesigner.br.ReadInt32();
          place.WordI = CBuildDesigner.br.ReadInt32();
          this.CRunner.htSubs.Add((object) key, (object) place);
        }
        Word word = new Word();
        int num3 = CBuildDesigner.br.ReadInt32();
        for (int index1 = 0; index1 < num3; ++index1)
        {
          int num4 = CBuildDesigner.br.ReadInt32();
          Line line = new Line();
          line.number = num4;
          line.text = "";
          int capacity = CBuildDesigner.br.ReadInt32();
          line.words = new ArrayList(capacity);
          for (int index2 = 0; index2 < capacity; ++index2)
          {
            word.sugMila = (Word.SugMila) CBuildDesigner.br.ReadByte();
            word.KeyWord = CBuildDesigner.br.ReadInt32();
            word.Level = CBuildDesigner.br.ReadInt32();
            word.Value = word.sugMila == Word.SugMila.Shmura ? "" : CBuildDesigner.br.ReadString();
            line.words.Add((object) word);
          }
          this.CRunner.lines.Add((object) line);
        }
        long num5 = CBuildDesigner.br.ReadInt64();
        this.designPosition = CBuildDesigner.br.BaseStream.Position;
        CBuildDesigner.br.BaseStream.Seek(num5 - 8L, SeekOrigin.Current);
        this.DecompileAlGotoWords();
        this.CRunner.objectsText = CBuildDesigner.br.ReadString();
        int num6 = CBuildDesigner.br.ReadInt32();
        for (int index = 0; index < num6; ++index)
          this.CRunner.alAssembly.Add((object) CBuildDesigner.br.ReadString());
        this.CRunner.StartProgram();
      }
      catch (Exception ex)
      {
        Cursor.Current = Cursors.Default;
        int num = (int) MessageBox.Show("Error loading file: \n\r" + ex.ToString(), "Basic4ppc", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1);
      }
    }

    private void DecompileAlGotoWords()
    {
      int num1 = CBuildDesigner.br.ReadInt32();
      ArrayList alGotoWords = this.CRunner.alGotoWords;
      while (true)
      {
        switch (num1)
        {
          case 1:
            int num2 = CBuildDesigner.br.ReadInt32();
            alGotoWords.Add((object) num2);
            for (int index = 0; index < num2; index += 2)
            {
              alGotoWords.Add((object) CBuildDesigner.br.ReadString());
              Place place = new Place(CBuildDesigner.br.ReadInt32(), CBuildDesigner.br.ReadInt32());
              alGotoWords.Add((object) place);
            }
            break;
          case 3:
            Place place1 = new Place(CBuildDesigner.br.ReadInt32(), CBuildDesigner.br.ReadInt32());
            alGotoWords.Add((object) place1);
            break;
          case 888:
            goto label_4;
        }
        num1 = CBuildDesigner.br.ReadInt32();
      }
label_4:;
    }

    public void BuildDesigner()
    {
      CBuildDesigner.br.BaseStream.Seek(this.designPosition, SeekOrigin.Begin);
      int num = CBuildDesigner.br.ReadInt32();
      while (true)
      {
        switch (num)
        {
          case 1:
            this.CRunner.Cform.ShortAdd("");
            break;
          case 2:
            this.CRunner.CPanel.ShortAdd("");
            break;
          case 3:
            this.CRunner.CMenu.ShortAdd("");
            break;
          case 4:
            this.CRunner.Cbutton.ShortAdd("");
            break;
          case 5:
            this.CRunner.CtextBox.ShortAdd("");
            break;
          case 6:
            this.CRunner.CCombo.ShortAdd("");
            break;
          case 7:
            this.CRunner.CListBox.ShortAdd("");
            break;
          case 8:
            this.CRunner.CRadioBtn.ShortAdd("");
            break;
          case 9:
            this.CRunner.CCheckBox.ShortAdd("");
            break;
          case 10:
            this.CRunner.CImage.ShortAdd("");
            break;
          case 11:
            this.CRunner.CLabel.ShortAdd("");
            break;
          case 12:
            this.CRunner.CTimer.ShortAdd("");
            break;
          case 13:
            this.CRunner.COpenDialog.ShortAdd("");
            break;
          case 14:
            this.CRunner.CSaveDialog.ShortAdd("");
            break;
          case 15:
            this.CRunner.CDateTime.ShortAdd("");
            break;
          case 16:
            this.CRunner.CNumUpDown.ShortAdd("");
            break;
          case 17:
            this.CRunner.CImageList.ShortAdd("");
            break;
          case 18:
            this.CRunner.CArrayList.ShortAdd("");
            break;
          case 19:
            this.CRunner.CImageButton.ShortAdd("");
            break;
          case 20:
            this.CRunner.CTable.ShortAdd("");
            break;
          case 999:
            goto label_24;
          default:
            goto label_21;
        }
        num = CBuildDesigner.br.ReadInt32();
      }
label_21:
      throw new Exception("Error reading file.");
label_24:
      CBuildDesigner.br.Close();
    }

    public static void ArrayListGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
    }

    public static void ButtonGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string Text,
      out Color BackColor,
      out Color ForeColor,
      out bool myEnabled,
      out bool myVisible,
      out float FontSize)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      Text = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      ForeColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
      FontSize = CBuildDesigner.br.ReadSingle();
    }

    public static void CheckBoxGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string Text,
      out Color BackColor,
      out Color ForeColor,
      out bool myEnabled,
      out bool myVisible,
      out bool myChecked,
      out float FontSize)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      Text = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      ForeColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
      myChecked = CBuildDesigner.br.ReadBoolean();
      FontSize = CBuildDesigner.br.ReadSingle();
    }

    public static void ComboGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string Text,
      out Color BackColor,
      out Color ForeColor,
      out bool myEnabled,
      out bool myVisible,
      out string[] items,
      out float FontSize)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      Text = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      ForeColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
      int length = CBuildDesigner.br.ReadInt32();
      items = new string[length];
      for (int index = 0; index < length; ++index)
        items[index] = CBuildDesigner.br.ReadString();
      FontSize = CBuildDesigner.br.ReadSingle();
    }

    public static void DateTimeGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string Text,
      out Color BackColor,
      out Color ForeColor,
      out bool myEnabled,
      out bool myVisible,
      out float FontSize)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      Text = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      ForeColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
      FontSize = CBuildDesigner.br.ReadSingle();
    }

    public static void FormGetProperties(
      string s,
      out string Name,
      out string Text,
      out string PicFile,
      out Color BackColor)
    {
      Name = CBuildDesigner.br.ReadString();
      Text = CBuildDesigner.br.ReadString();
      PicFile = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
    }

    public static void ImageGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string imageMode,
      out string picFile,
      out Color BackColor,
      out bool myEnabled,
      out bool myVisible)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      imageMode = CBuildDesigner.br.ReadString();
      picFile = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
    }

    public static void ImageButtonGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string Text,
      out Color BackColor,
      out Color ForeColor,
      out string ImageMode,
      out string picFile,
      out bool transparent,
      out bool myEnabled,
      out bool myVisible,
      out float FontSize)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      Text = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      ForeColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      ImageMode = CBuildDesigner.br.ReadString();
      picFile = CBuildDesigner.br.ReadString();
      transparent = CBuildDesigner.br.ReadBoolean();
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
      FontSize = CBuildDesigner.br.ReadSingle();
    }

    public static void ImageListGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string[] Images)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      int length = CBuildDesigner.br.ReadInt32();
      Images = new string[length];
      for (int index = 0; index < length; ++index)
        Images[index] = CBuildDesigner.br.ReadString();
    }

    public static void LabelGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string Text,
      out Color BackColor,
      out Color ForeColor,
      out bool myEnabled,
      out bool myVisible,
      out float FontSize)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      Text = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      ForeColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
      FontSize = CBuildDesigner.br.ReadSingle();
    }

    public static void ListBoxGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string Text,
      out Color BackColor,
      out Color ForeColor,
      out bool myEnabled,
      out bool myVisible,
      out string[] items,
      out float FontSize)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      Text = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      ForeColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
      int length = CBuildDesigner.br.ReadInt32();
      items = new string[length];
      for (int index = 0; index < length; ++index)
        items[index] = CBuildDesigner.br.ReadString();
      FontSize = CBuildDesigner.br.ReadSingle();
    }

    public static void MenuGetProperties(
      string s,
      out string parent,
      out string Name,
      out string Text,
      out bool myEnabled,
      out bool myChecked)
    {
      parent = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Text = CBuildDesigner.br.ReadString();
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myChecked = CBuildDesigner.br.ReadBoolean();
    }

    public static void NumUpDownGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Value,
      out int Maximum,
      out Color BackColor,
      out bool myEnabled,
      out bool myVisible)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Value = CBuildDesigner.br.ReadInt32();
      Maximum = CBuildDesigner.br.ReadInt32();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
    }

    public static void OpenDialogGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out string Filter)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Filter = CBuildDesigner.br.ReadString();
    }

    public static void PanelGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out Color BackColor,
      out bool myEnabled,
      out bool myVisible)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
    }

    public static void RadioBtnGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string Text,
      out Color BackColor,
      out Color ForeColor,
      out bool myEnabled,
      out bool myVisible,
      out bool myChecked,
      out float FontSize)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      Text = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      ForeColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
      myChecked = CBuildDesigner.br.ReadBoolean();
      FontSize = CBuildDesigner.br.ReadSingle();
    }

    public static void SaveDialogGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out string Filter)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Filter = CBuildDesigner.br.ReadString();
    }

    public static void TextBoxGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string Text,
      out Color BackColor,
      out Color ForeColor,
      out bool myEnabled,
      out bool myVisible,
      out bool MultiLine,
      out float FontSize)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      Text = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      ForeColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
      MultiLine = CBuildDesigner.br.ReadBoolean();
      FontSize = CBuildDesigner.br.ReadSingle();
    }

    public static void TableGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out int Width,
      out int Height,
      out string Text,
      out Color BackColor,
      out Color ForeColor,
      out bool myEnabled,
      out bool myVisible,
      out float FontSize)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Width = CBuildDesigner.br.ReadInt32();
      Height = CBuildDesigner.br.ReadInt32();
      Text = CBuildDesigner.br.ReadString();
      BackColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      ForeColor = Color.FromArgb(CBuildDesigner.br.ReadInt32());
      myEnabled = CBuildDesigner.br.ReadBoolean();
      myVisible = CBuildDesigner.br.ReadBoolean();
      FontSize = CBuildDesigner.br.ReadSingle();
    }

    public static void TimerGetProperties(
      string s,
      out string FrmName,
      out string Name,
      out int Left,
      out int Top,
      out string Interval)
    {
      FrmName = CBuildDesigner.br.ReadString();
      Name = CBuildDesigner.br.ReadString();
      Left = CBuildDesigner.br.ReadInt32();
      Top = CBuildDesigner.br.ReadInt32();
      Interval = CBuildDesigner.br.ReadString();
    }
  }
}
