// Decompiled with JetBrains decompiler
// Type: DebuggerTypeProxyAttrib.Maps.TagAttributeMapping
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Collections;
using DebuggerTypeProxyAttrib.Mappers;
using DebuggerTypeProxyAttrib.Pages;
using DebuggerTypeProxyAttrib.Resolver;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Windows.Media;
using System.Windows.Media.Media3D;
using Tourield.Authentication;
using Tourield.Structs;

namespace DebuggerTypeProxyAttrib.Maps
{
  internal class TagAttributeMapping
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static bool InstantiateOrder(
      ref Process key,
      ref ListResolverResolver visitor,
      ref GlobalErrorCollection role,
      ref Process reg2,
      ref Process pol3)
    {
      int num1 = 9;
      if (true)
        goto label_8;
label_1:
      bool flag1;
      bool flag2;
      int num2;
      if (flag1)
      {
        flag2 = false;
        goto label_21;
      }
      else
      {
        reg2._Candidate.X = pol3._Candidate.X;
        num2 = 0;
      }
label_7:
      num1 = num2;
label_8:
      GeometryModel3D geometryModel3D;
      Process info;
      bool flag3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            reg2._Candidate.Y = pol3._Candidate.Y;
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 3;
          case 1:
            goto label_13;
          case 3:
            info._Tag = geometryModel3D;
            flag3 = TagAttributeMapping.LogoutOrder(info, role) != null;
            if (TagAttributeMapping.RevertAttribute())
            {
              num1 = 5;
              continue;
            }
            goto label_18;
          case 4:
            role.PrepareOrder();
            reg2.CompareOrder();
            flag2 = true;
            if (true)
            {
              num1 = 12;
              continue;
            }
            goto case 0;
          case 5:
          case 7:
            goto label_18;
          case 6:
            goto label_11;
          case 8:
            role.m_Manager.Children.Add((Model3D) geometryModel3D);
            role.prototypeWrapper.rulesWrapper = geometryModel3D.Bounds.ToString();
            role.PrepareOrder();
            Initializer instance = (Initializer) null;
            if (TagAttributeMapping.RemoveOrder(ref instance, ref reg2, ref role))
            {
              info = new Process(0U);
              goto case 3;
            }
            else
              goto label_5;
          case 9:
            flag1 = !visitor.m_Getter;
            if (TagAttributeMapping.RevertAttribute())
            {
              num1 = 11;
              continue;
            }
            goto label_11;
          case 10:
            goto label_12;
          case 11:
            goto label_1;
          case 12:
            goto label_21;
          default:
            goto label_9;
        }
      }
label_5:
      role.m_Manager.Children.Remove((Model3D) geometryModel3D);
      role.prototypeWrapper.rulesWrapper = "Null";
      role.PrepareOrder();
      flag2 = false;
      goto label_21;
label_9:
      num2 = 3;
      goto label_7;
label_11:
      reg2._Candidate.Z = pol3._Candidate.Z;
      geometryModel3D = role.m_AdapterWrapper;
      num2 = 10;
      goto label_7;
label_12:
      geometryModel3D = ErrorParserStructBuilder.AwakeOrder(new Point3D(reg2.m_Descriptor.X + reg2._Candidate.X, reg2.m_Descriptor.Y + reg2._Candidate.Y, reg2.m_Descriptor.Z + reg2._Candidate.Z), (Brush) Brushes.AntiqueWhite);
      num2 = 8;
      goto label_7;
label_13:
      role.m_Manager.Children.Remove((Model3D) geometryModel3D);
      role.prototypeWrapper.rulesWrapper = "Null";
      role.PrepareOrder();
      flag2 = false;
      goto label_21;
label_18:
      if (!flag3)
      {
        role.m_Manager.Children.Remove((Model3D) geometryModel3D);
        role.prototypeWrapper.rulesWrapper = "Null";
        num2 = 4;
        goto label_7;
      }
      else
      {
        num2 = 1;
        goto label_7;
      }
label_21:
      return flag2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool RemoveOrder(
      ref Initializer instance,
      ref Process cust,
      ref GlobalErrorCollection serv)
    {
      int num1 = 4;
      if (true)
        goto label_4;
label_1:
      bool account = serv.account;
      int num2 = 5;
label_3:
      num1 = num2;
label_4:
      bool flag;
      switch (num1)
      {
        case 0:
        case 3:
          flag = false;
          goto case 6;
        case 1:
        case 5:
          if (account)
          {
            num2 = 2;
            goto label_3;
          }
          else
            break;
        case 2:
          instance = serv.StopOrder(new Point3D(cust.m_Descriptor.X + cust._Candidate.X, cust.m_Descriptor.Y + cust._Candidate.Y, cust.m_Descriptor.Z + cust._Candidate.Z - 0.1));
          if (instance != null)
            break;
          goto case 0;
        case 4:
          goto label_1;
        case 6:
          return flag;
        default:
          num2 = 0;
          goto label_3;
      }
      flag = true;
      num2 = 6;
      goto label_3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static bool RegisterOrder(
      ref Process def,
      ref ListResolverResolver ivk,
      GlobalErrorCollection consumer)
    {
      int num1 = 6;
      if (!TagAttributeMapping.SetMethod())
        goto label_6;
label_1:
      consumer.m_AdapterWrapper = ErrorParserStructBuilder.AwakeOrder(new Point3D(def.m_Descriptor.X + def._Candidate.X, def.m_Descriptor.Y + def._Candidate.Y, def.m_Descriptor.Z + def._Candidate.Z), (Brush) Brushes.Black);
      int num2 = 7;
label_5:
      num1 = num2;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_10;
          case 1:
          case 7:
            goto label_8;
          case 2:
            goto label_4;
          case 4:
            consumer.prototypeWrapper.rulesWrapper = consumer.m_AdapterWrapper.Bounds.ToString();
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto label_4;
          case 5:
            goto label_2;
          case 6:
            goto label_1;
          case 8:
            goto label_14;
          case 9:
            goto label_16;
          case 10:
            goto label_9;
          case 11:
            goto label_17;
          default:
            int num3 = 10;
            num1 = TagAttributeMapping.SetMethod() ? num3 : num3;
            continue;
        }
      }
label_2:
      bool flag = true;
      num2 = 11;
      goto label_5;
label_4:
      Process reg2;
      Process key = consumer._Rule[reg2._Template];
      ListResolverResolver visitor = consumer.token[reg2._Template];
      if (TagAttributeMapping.InstantiateOrder(ref key, ref visitor, ref consumer, ref reg2, ref def))
        goto label_15;
      else
        goto label_9;
label_8:
      consumer.m_Manager.Children.Add((Model3D) consumer.m_AdapterWrapper);
      num2 = 4;
      goto label_5;
label_9:
      consumer.m_Manager.Children.Remove((Model3D) consumer.m_AdapterWrapper);
      consumer.prototypeWrapper.rulesWrapper = "Null";
      consumer.PrepareOrder();
      num2 = 8;
      goto label_5;
label_10:
      consumer.PrepareOrder();
      Initializer instance = (Initializer) null;
      if (!TagAttributeMapping.RemoveOrder(ref instance, ref def, ref consumer))
      {
        consumer.m_Manager.Children.Remove((Model3D) consumer.m_AdapterWrapper);
        consumer.prototypeWrapper.rulesWrapper = "Null";
        consumer.PrepareOrder();
        flag = false;
        goto label_17;
      }
      else
      {
        reg2 = TagAttributeMapping.LogoutOrder(new Process(0U)
        {
          _Tag = consumer.m_AdapterWrapper
        }, consumer);
        if (reg2 != null)
        {
          num2 = 2;
          goto label_5;
        }
        else
          goto label_15;
      }
label_14:
      flag = false;
      goto label_17;
label_15:
      consumer.m_Manager.Children.Remove((Model3D) consumer.m_AdapterWrapper);
      num2 = 9;
      goto label_5;
label_16:
      consumer.prototypeWrapper.rulesWrapper = "Null";
      consumer.PrepareOrder();
      def.CompareOrder();
      num2 = 5;
      goto label_5;
label_17:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static GeometryModel3D LoginOrder(
      Process asset,
      GlobalErrorCollection reg)
    {
      int num1 = 2;
      if (TagAttributeMapping.RevertAttribute())
        goto label_12;
label_1:
      Model3DCollection.Enumerator enumerator = reg.pool.Children.GetEnumerator();
      num1 = 3;
label_12:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            goto label_2;
          case 4:
            goto label_14;
          default:
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto label_14;
        }
      }
label_2:
      GeometryModel3D geometryModel3D;
      try
      {
label_9:
        while (enumerator.MoveNext())
        {
          GeometryModel3D current = (GeometryModel3D) enumerator.Current;
          int num2 = 3;
          Rect3D bounds;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                bounds = asset._Tag.Bounds;
                num2 = 4;
                continue;
              case 1:
              case 4:
                if (!bounds.IntersectsWith(current.Bounds))
                  goto label_9;
                else
                  goto case 2;
              case 2:
                geometryModel3D = current;
                num2 = 5;
                continue;
              case 5:
                goto label_14;
              default:
                num2 = 2;
                continue;
            }
          }
        }
      }
      finally
      {
        enumerator.Dispose();
      }
      geometryModel3D = (GeometryModel3D) null;
label_14:
      return geometryModel3D;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Process LogoutOrder(Process info, GlobalErrorCollection caller)
    {
      int num1 = 2;
      Dictionary<uint, Process>.ValueCollection.Enumerator enumerator;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            enumerator = caller._Rule.Values.GetEnumerator();
            if (TagAttributeMapping.RevertAttribute())
            {
              num1 = 3;
              continue;
            }
            goto label_15;
          case 1:
          case 3:
            goto label_1;
          case 4:
            goto label_15;
          default:
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto case 0;
        }
      }
label_1:
      Process process;
      try
      {
label_8:
        while (enumerator.MoveNext())
        {
          Process current = enumerator.Current;
          int num2 = 4;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                process = current;
                num2 = 5;
                continue;
              case 1:
              case 3:
                if (!flag || !current._Tag.Bounds.IntersectsWith(info._Tag.Bounds))
                  goto label_8;
                else
                  goto case 0;
              case 4:
                flag = (int) current._Template != (int) info._Template;
                num2 = 3;
                continue;
              case 5:
                goto label_15;
              default:
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto label_15;
            }
          }
        }
      }
      finally
      {
        enumerator.Dispose();
      }
      process = (Process) null;
label_15:
      return process;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public TagAttributeMapping()
    {
      RegistryPagePage.ListMethod();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool RevertAttribute() => true;

    internal static bool SetMethod() => false;
  }
}
