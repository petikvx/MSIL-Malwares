// Decompiled with JetBrains decompiler
// Type: etlgen.ETLGenerador
// Assembly: UCOMIEnumConnecti, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5D827560-3619-4F41-B7F7-70598092DF43
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.Crysan.egg-57798b73d1c044cbf668948774c77628154f6bcacd563b69df088f38b2645fd0.exe

using System;
using System.Collections;
using System.IO;
using System.Text;
using System.Xml;

namespace etlgen
{
  internal class ETLGenerador
  {
    private string delim;
    private string sepCampos;
    private string sepFilas;
    private int tamMax;
    private ArrayList candidatas;
    private ArrayList unicas;
    private ArrayList noNulos;
    private ArrayList candidatasGeneradas;
    private ArrayList unicasGeneradas;
    private uint numFilasDescartadas;
    private ArrayList generadores;
    private ETLConfig configuracion;
    private DateTime fechaOrigen = new DateTime(0L);

    public ETLGenerador()
    {
      this.delim = "\"";
      this.sepCampos = ";";
      this.sepFilas = "\r\n";
      this.tamMax = 50;
      this.candidatas = new ArrayList();
      this.unicas = new ArrayList();
      this.noNulos = new ArrayList();
      this.candidatasGeneradas = new ArrayList();
      this.unicasGeneradas = new ArrayList();
      this.numFilasDescartadas = 0U;
      this.configuracion = new ETLConfig();
      this.generadores = new ArrayList();
    }

    public void Configurar(string archivo)
    {
      Console.Write("Cargando la configuración ... ");
      this.configuracion.Cargar(archivo);
      Console.WriteLine("ok");
    }

    public void Cargar(string archivo)
    {
      Console.Write("Cargando las definiciones ... ");
      StreamReader input = new StreamReader(archivo, Encoding.Default);
      XmlTextReader reader = new XmlTextReader((TextReader) input);
      while (reader.Read())
      {
        if (reader.NodeType == XmlNodeType.Element)
        {
          if (reader.Name == "Tabla")
          {
            while (reader.MoveToNextAttribute())
            {
              if (reader.Name == "sp-campos")
              {
                this.sepCampos = reader.Value;
                this.sepCampos = this.sepCampos.Replace("\\t", "\t");
              }
              else if (reader.Name == "sp-filas")
              {
                this.sepFilas = reader.Value;
                this.sepFilas = this.sepFilas.Replace("\\n", "\n");
                this.sepFilas = this.sepFilas.Replace("\\r", "\r");
              }
            }
          }
          else if (reader.Name == "Columnas")
          {
            while (reader.MoveToNextAttribute())
            {
              if (reader.Name == "maxtam")
                this.tamMax = int.Parse(reader.Value);
              else if (reader.Name == "delim")
                this.delim = reader.Value;
            }
            break;
          }
        }
      }
      this.generadores = this.configuracion.LeerGeneradores(reader);
      do
        ;
      while (reader.Read() && reader.Name != "Restricciones");
      while (reader.Read() && reader.Name != "Restricciones")
      {
        if (reader.NodeType == XmlNodeType.Element)
        {
          if (reader.Name == "candidata")
          {
            ArrayList arrayList = new ArrayList();
            while (reader.Read() && reader.Name != "candidata")
            {
              if (reader.Name == "columna" && reader.NodeType == XmlNodeType.Element)
              {
                reader.Read();
                if (reader.NodeType != XmlNodeType.Text)
                  throw new XmlException("se esperaba un nodo de texto (línea " + reader.LineNumber.ToString() + ")");
                bool flag = false;
                foreach (ObjGenerador generadore in this.generadores)
                {
                  if (generadore.Id == reader.Value)
                  {
                    arrayList.Add((object) reader.Value);
                    flag = true;
                    break;
                  }
                }
                if (!flag)
                  throw new XmlException("no existen columnas con ese nombre (línea " + reader.LineNumber.ToString() + ")");
              }
            }
            if (arrayList.Count == 0)
              throw new XmlException("restricción sin columnas");
            this.candidatas.Add((object) arrayList);
            this.candidatasGeneradas.Add((object) new Hashtable());
          }
          else if (reader.Name == "unica")
          {
            ArrayList arrayList = new ArrayList();
            while (reader.Read() && reader.Name != "unica")
            {
              if (reader.Name == "columna" && reader.NodeType == XmlNodeType.Element)
              {
                reader.Read();
                if (reader.NodeType != XmlNodeType.Text)
                  throw new XmlException("se esperaba un nodo de texto (línea " + reader.LineNumber.ToString() + ")");
                bool flag = false;
                foreach (ObjGenerador generadore in this.generadores)
                {
                  if (generadore.Id == reader.Value)
                  {
                    arrayList.Add((object) reader.Value);
                    flag = true;
                    break;
                  }
                }
                if (!flag)
                  throw new XmlException("no existen columnas con ese nombre (línea " + reader.LineNumber.ToString() + ")");
              }
            }
            if (arrayList.Count == 0)
              throw new XmlException("restricción sin columnas");
            this.unicas.Add((object) arrayList);
            this.unicasGeneradas.Add((object) new Hashtable());
          }
          else if (reader.Name == "no-nulo")
          {
            while (reader.Read() && reader.Name != "no-nulo")
            {
              if (reader.Name == "columna" && reader.NodeType == XmlNodeType.Element)
              {
                reader.Read();
                if (reader.NodeType != XmlNodeType.Text)
                  throw new XmlException("se esperaba un nodo de texto (línea " + reader.LineNumber.ToString() + ")");
                bool flag = false;
                foreach (ObjGenerador generadore in this.generadores)
                {
                  if (generadore.Id == reader.Value)
                  {
                    this.noNulos.Add((object) reader.Value);
                    flag = true;
                    break;
                  }
                }
                if (!flag)
                  throw new XmlException("no existen columnas con ese nombre (línea " + reader.LineNumber.ToString() + ")");
              }
            }
          }
          else
            throw new XmlException("entidad <" + reader.Name + "> no reconocida " + reader.LineNumber.ToString() + ")");
        }
      }
      input.Close();
      reader.Close();
      Console.WriteLine("ok");
      Console.WriteLine("#DEBUG#Cargar(string):");
      foreach (ObjGenerador generadore in this.generadores)
        Console.WriteLine("#DEBUG#\t{0}", (object) generadore);
    }

    public TimeSpan Generar(int muestras, StreamWriter writer, bool sumarFilas)
    {
      DateTime now = DateTime.Now;
      Console.Write("Generando combinaciones de columnas ... ");
      Random random = new Random((int) DateTime.Now.Ticks);
      string str = this.configuracion.GetValorNulo().Substring(0, Math.Min(this.tamMax, this.configuracion.GetValorNulo().Length));
      string[] strArray = new string[this.generadores.Count];
      for (int index = 0; index < this.generadores.Count - 1; ++index)
        strArray[index] = ((ObjGenerador) this.generadores[index]).Id;
      if (this.generadores.Count > 0)
        strArray[this.generadores.Count - 1] = ((ObjGenerador) this.generadores[this.generadores.Count - 1]).Id;
      this.ImprimirCabecera(strArray, writer, sumarFilas);
      string[] extension = new string[this.generadores.Count];
      for (uint index1 = 0; (long) index1 < (long) muestras; ++index1)
      {
        for (int index2 = 0; index2 < this.generadores.Count - 1; ++index2)
        {
          int num = random.NextDouble() >= this.configuracion.GetProbabilidadNulo() ? 0 : (!this.RestriccionNoNulo(this.generadores[index2]) ? 1 : 0);
          extension[index2] = num == 0 ? ((ObjGenerador) this.generadores[index2]).Generar(random).ToString() : str;
        }
        if (this.generadores.Count > 0)
        {
          int num = random.NextDouble() >= this.configuracion.GetProbabilidadNulo() ? 0 : (!this.RestriccionNoNulo(this.generadores[this.generadores.Count - 1]) ? 1 : 0);
          extension[this.generadores.Count - 1] = num == 0 ? ((ObjGenerador) this.generadores[this.generadores.Count - 1]).Generar(random).ToString() : str;
        }
        this.RegistrarCombinacion(strArray, extension, writer, sumarFilas);
      }
      Console.WriteLine("ok");
      return DateTime.Now - now;
    }

    private bool RestriccionNoNulo(object generador)
    {
      string id = ((ObjGenerador) generador).Id;
      bool flag1 = false;
      foreach (ArrayList candidata in this.candidatas)
      {
        if (candidata.Contains((object) id))
        {
          flag1 = true;
          break;
        }
      }
      bool flag2 = this.noNulos.Contains((object) id);
      return flag1 | flag2;
    }

    private void RegistrarCombinacion(
      string[] intension,
      string[] extension,
      StreamWriter writer,
      bool sumarFilas)
    {
      bool flag = false;
      for (int index1 = 0; index1 < this.candidatas.Count && !flag; ++index1)
      {
        ArrayList arrayList = new ArrayList();
        for (int index2 = 0; index2 < intension.Length; ++index2)
        {
          if (((ArrayList) this.candidatas[index1]).Contains((object) intension[index2]))
            arrayList.Add((object) extension[index2]);
        }
        string key = "";
        for (int index3 = 0; index3 < arrayList.Count - 1; ++index3)
          key = key + this.delim + arrayList[index3]?.ToString() + this.delim + this.sepCampos;
        if (arrayList.Count > 0)
          key = key + this.delim + arrayList[arrayList.Count - 1]?.ToString() + this.delim;
        Hashtable candidatasGenerada = (Hashtable) this.candidatasGeneradas[index1];
        if (candidatasGenerada[(object) key] == null)
          candidatasGenerada.Add((object) key, (object) true);
        else
          flag = true;
      }
      for (int index4 = 0; index4 < this.unicas.Count && !flag; ++index4)
      {
        ArrayList arrayList = new ArrayList();
        for (int index5 = 0; index5 < intension.Length; ++index5)
        {
          if (((ArrayList) this.unicas[index4]).Contains((object) intension[index5]))
            arrayList.Add((object) extension[index5]);
        }
        if (!arrayList.Contains((object) this.configuracion.GetValorNulo()))
        {
          string key = "";
          for (int index6 = 0; index6 < arrayList.Count - 1; ++index6)
            key = key + this.delim + arrayList[index6]?.ToString() + this.delim + this.sepCampos;
          if (arrayList.Count > 0)
            key = key + this.delim + arrayList[arrayList.Count - 1]?.ToString() + this.delim;
          Hashtable unicasGenerada = (Hashtable) this.unicasGeneradas[index4];
          if (unicasGenerada[(object) key] == null)
            unicasGenerada.Add((object) key, (object) true);
          else
            flag = true;
        }
        else
          break;
      }
      if (!flag)
        this.ImprimirFila(extension, writer);
      else
        ++this.numFilasDescartadas;
    }

    private void ImprimirCabecera(string[] columnas, StreamWriter writer, bool sumarFilas)
    {
      if (!this.configuracion.Cabecera || sumarFilas)
        return;
      writer.Write(this.delim + this.configuracion.MARCA_TEMPORAL + this.delim + this.sepCampos);
      for (int index = 0; index < columnas.Length - 1; ++index)
        writer.Write(this.delim + columnas[index] + this.delim + this.sepCampos);
      if (columnas.Length != 0)
      {
        writer.Write(this.delim + columnas[columnas.Length - 1] + this.delim);
        writer.Write(this.sepFilas);
      }
    }

    private void ImprimirFila(string[] columnas, StreamWriter writer)
    {
      string str = this.delim + ((long) (DateTime.Now - this.fechaOrigen).TotalMilliseconds).ToString() + this.delim + this.sepCampos;
      for (int index = 0; index < columnas.Length - 1; ++index)
      {
        int length = Math.Min(this.tamMax, columnas[index].Length);
        str = str + this.delim + columnas[index].Substring(0, length) + this.delim + this.sepCampos;
      }
      if (columnas.Length != 0)
      {
        int length = Math.Min(this.tamMax, columnas[columnas.Length - 1].Length);
        str = str + this.delim + columnas[columnas.Length - 1].Substring(0, length) + this.delim + this.sepFilas;
      }
      writer.Write(str);
    }

    private string Tiempo(TimeSpan duracion)
    {
      string str = "";
      int minutes = duracion.Minutes;
      if (minutes == 1)
        str = str + minutes.ToString() + " minuto";
      else if (minutes > 1)
        str = str + minutes.ToString() + " minutos";
      int seconds = duracion.Seconds;
      if (seconds == 1)
        str = !(str == "") ? str + " " + seconds.ToString() + " segundo" : str + seconds.ToString() + " segundo";
      else if (seconds > 1)
        str = !(str == "") ? str + " " + seconds.ToString() + " segundos" : str + seconds.ToString() + " segundos";
      return str != "" ? str : "0 segundos";
    }
  }
}
