// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: 0的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9D533F7C-4FE9-47C1-AE3D-12E223DC01C7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7b4b43d22be88ed3b2054ef7090ebb7b44ecc03dffa6c32e578002c9a12cbea8.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -2133079070;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -283105637)) % 6U)
          {
            case 0:
              int num3 = eventHandler1 == comparand ? -1335752844 : (num3 = -1756228546);
              num1 = num3 ^ (int) num2 * -1435630342;
              continue;
            case 1:
              goto label_3;
            case 2:
              goto label_1;
            case 3:
              comparand = eventHandler1;
              num1 = -1318786739;
              continue;
            case 4:
              eventHandler2 = (EventHandler) Square.\u200F⁫⁯⁪⁪⁪⁯‪‌‮‪‎‭⁪‌​‏‌‪‫‭‮​‬‎‎⁫⁫​⁬⁮‎‪‪⁮‬⁭‎⁬⁮‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * -520287129 ^ 1662663464;
              continue;
            case 5:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * 1916059530 ^ -1861900921;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -1108146000;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -920255185)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              comparand = eventHandler1;
              num1 = -846880791;
              continue;
            case 2:
              goto label_3;
            case 3:
              int num3 = eventHandler1 != comparand ? -789471415 : (num3 = -1789843674);
              num1 = num3 ^ (int) num2 * -1615397249;
              continue;
            case 4:
              EventHandler eventHandler2 = (EventHandler) Square.\u206D‮‫‎⁫⁪⁪‬‬‎‮‎‌⁫‪‌⁯‭‫⁭‪‏⁪‍⁮⁮‬‍​‪⁮‌‫‪⁭‭⁬‬‮‭‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * 1181996678 ^ 511876876;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName
    {
      get
      {
        string specialName = Square.\u206A⁬⁯⁮⁬‭‫‫⁮‏‍‮⁮⁫‍‏⁯‫​‏‭‭‎‏⁪‭⁯‮‫⁪⁬‌⁬⁬⁬‍‍‬⁬⁫‮(this.CurrentSquare, \u003CModule\u003E.\u200E‫​⁯⁮‎⁬‎⁬⁪‍⁪‬⁫‬‌‮⁮‍⁪⁮⁮‎⁭‌⁮​⁭‌⁭⁭⁬⁮‎⁯‭⁭‍‏⁫‮<string>(1700305211U), Square.\u200E‎‪⁬‎‬⁫‫‍‌‎‬‬‪⁬⁯⁮‮⁫‭‎‫⁬⁪⁮⁭‬‭‍⁯⁪‮‬‎⁯​‍⁪‫⁮‮((object) this.Piece));
label_1:
        int num1 = -1250831564;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1625042826)) % 3U)
          {
            case 1:
              num1 = (int) num2 * 1137903243 ^ 1236899848;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
label_1:
        int num1 = 845741172;
        char ch;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 156398205)) % 4U)
          {
            case 1:
              ch = Square.\u206B⁯‌‎‭⁪‮‭⁯‬⁪‌‫⁯‫‪‮‎⁯⁬‏‫‍‎‎‫⁯‫‌⁭⁭⁭‫​⁪‫‍⁭⁬‪‮(\u003CModule\u003E.\u202A⁮‪‮‫⁫⁮⁮​‬⁯⁯‪‎⁪‎‪‏⁯⁪‎‏‭‎‏‭‪⁭⁮‬‍‬⁬‬⁭‏⁯⁮‏‌‮<string>(4118258298U), this.File);
              num1 = (int) num2 * 1261394667 ^ -640361896;
              continue;
            case 2:
              currentSquare = Square.\u206C⁮‬⁬‫​⁬⁭⁪⁯‏⁭‏‌​‫⁪‮‪⁬‭‍⁬⁬⁮⁪​‭⁭⁪⁫‎‎​⁯‮‫‮⁪‎‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * 1270657717 ^ -188873813;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
label_1:
      int num1 = -2000850112;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1009646792)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * -1050849260 ^ -1907863209;
              continue;
            }
            goto label_5;
          case 2:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
label_1:
      int num1 = -2020489554;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1170939444)) % 7U)
        {
          case 0:
            this.Name = Square.\u206C⁮‬⁬‫​⁬⁭⁪⁯‏⁭‏‌​‫⁪‮‪⁬‭‍⁬⁬⁮⁪​‭⁭⁪⁫‎‎​⁯‮‫‮⁪‎‮(Square.\u206B⁯‌‎‭⁪‮‭⁯‬⁪‌‫⁯‫‪‮‎⁯⁬‏‫‍‎‎‫⁯‫‌⁭⁭⁭‫​⁪‫‍⁭⁬‪‮(\u003CModule\u003E.\u206D⁮‭⁮‪‎‌​⁯‪⁫⁪⁭⁪‪⁯‬​⁫​⁪⁬⁯⁭‭⁭⁯‎‌‮‎⁫‍⁪⁫⁯‭⁭⁮⁮‮<string>(629282007U), file).ToString(), (this.Rank + 1).ToString());
            num1 = (int) num2 * -1335743890 ^ -1666745579;
            continue;
          case 1:
            num1 = (int) num2 * 1624339766 ^ -1578624459;
            continue;
          case 2:
            num1 = (int) num2 * 49591231 ^ -344106938;
            continue;
          case 3:
            this.File = file;
            this.Rank = rank;
            num1 = (int) num2 * 157037378 ^ -492609372;
            continue;
          case 4:
            this.Board = Board;
            num1 = (int) num2 * 700256640 ^ -1935209355;
            continue;
          case 5:
            goto label_1;
          case 6:
            goto label_3;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public Square()
    {
label_1:
      int num1 = 182327119;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1061416182)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            this.InitializeComponent();
            num1 = (int) num2 * -680368432 ^ -1836370654;
            continue;
          case 2:
            num1 = (int) num2 * 448165951 ^ -1347453925;
            continue;
          case 3:
            this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
            num1 = (int) num2 * 1095806236 ^ -1395212675;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void SwitchPlayer()
    {
      if (this.Board.DisableTurns)
        return;
label_1:
      int num1 = 803878353;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1394112833)) % 7U)
        {
          case 0:
            num1 = 254780563;
            continue;
          case 1:
            goto label_9;
          case 2:
            goto label_1;
          case 3:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = 1093752013;
            continue;
          case 4:
            int num3 = this.Board.WhosPlaying == PieceColor.White ? 1338667890 : (num3 = 410913440);
            num1 = num3 ^ (int) num2 * -286219076;
            continue;
          case 5:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * 826174543 ^ 57491804;
            continue;
          case 6:
            num1 = (int) num2 * 1945815098 ^ 1812565636;
            continue;
          default:
            goto label_10;
        }
      }
label_9:
      return;
label_10:;
    }

    private bool getSide(Square x)
    {
      if (this.Board.DisableTurns)
        goto label_4;
label_1:
      int num1 = 1777771140;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 894779559)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -309926830 ^ 1669007379;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
      goto label_5;
label_7:
      bool side;
      return side;
label_4:
      num3 = 1;
label_5:
      side = num3 != 0;
      num1 = 1637663730;
      goto label_2;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
      bool flag1 = Square.\u206F‍‏‫‭⁬‬‌⁫‎‪⁯⁭‌‍⁯‪‌‬⁪‎‮‪⁬⁮‎‭‭‭‬⁪‌‭‬⁭‎‎‫⁮‮‮(e) == MouseButtons.Left;
label_1:
      int num1 = 2087029179;
      while (true)
      {
        uint num2;
        List<PossibleMoves> move1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool disableTurns;
        bool flag5;
        bool flag6;
        List<PossibleMoves> move2;
        bool flag7;
        bool flag8;
        bool side;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ 1467097513)) % 86U)
        {
          case 0:
            num3 = this.Board.From.Piece != null ? 1 : 0;
            goto label_64;
          case 1:
            num1 = 1251749111;
            continue;
          case 2:
            this.msg = \u003CModule\u003E.\u200E‫​⁯⁮‎⁬‎⁬⁪‍⁪‬⁫‬‌‮⁮‍⁪⁮⁮‎⁭‌⁮​⁭‌⁭⁭⁬⁮‎⁯‭⁭‍‏⁫‮<string>(3991053881U);
            num1 = (int) num2 * -307199848 ^ -877373843;
            continue;
          case 3:
            num1 = (int) num2 * -895250472 ^ -1601321973;
            continue;
          case 4:
            this.Board.From = to;
            num1 = (int) num2 * -274126838 ^ 876544700;
            continue;
          case 5:
            num1 = (int) num2 * -1740877000 ^ 1274630170;
            continue;
          case 6:
            Square.action(this.msg);
            num1 = 2019173616;
            continue;
          case 7:
            num1 = (int) num2 * -2074101818 ^ 1259785110;
            continue;
          case 8:
            num1 = (int) num2 * 1086554489 ^ 252706702;
            continue;
          case 9:
            int num5 = !flag4 ? -195942622 : (num5 = -814312300);
            num1 = num5 ^ (int) num2 * 954917370;
            continue;
          case 10:
            this.msg = \u003CModule\u003E.\u206A⁮⁮‬‌⁬‬⁯‬‭⁮​⁪⁫‫‍​​‫⁫‬‮‌⁯‍​​⁫⁮‍‮‬⁭‌‌‎‎⁮‮‍‮<string>(1590380592U);
            num1 = (int) num2 * 1547233449 ^ 497201226;
            continue;
          case 11:
            num1 = (int) num2 * -233805204 ^ -1249493558;
            continue;
          case 12:
            int num6 = !side ? -1389136655 : (num6 = -1662367742);
            num1 = num6 ^ (int) num2 * -1013200737;
            continue;
          case 13:
            int num7 = to.Piece.Id != this.Board.From.Piece.Id ? 1191096693 : (num7 = 611534556);
            num1 = num7 ^ (int) num2 * -1830085628;
            continue;
          case 14:
            num1 = 65574227;
            continue;
          case 15:
            flag3 = move2.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * -2000387659 ^ -248034790;
            continue;
          case 16:
            num1 = (int) num2 * -167620154 ^ 836104631;
            continue;
          case 17:
            int num8 = !flag2 ? 195476044 : (num8 = 1522370010);
            num1 = num8 ^ (int) num2 * 152980127;
            continue;
          case 18:
            num1 = (int) num2 * 764373002 ^ 631042091;
            continue;
          case 19:
            this.Board.From = to;
            num1 = (int) num2 * -607108172 ^ 1882323185;
            continue;
          case 20:
            flag4 = this.Board.From.Piece.Color == to.Piece.Color;
            num1 = 143171478;
            continue;
          case 21:
            num1 = (int) num2 * -868124346 ^ 538398598;
            continue;
          case 22:
            flag5 = flag7;
            num1 = 340224270;
            continue;
          case 23:
            num1 = (int) num2 * -1345311828 ^ 713121825;
            continue;
          case 24:
            goto label_1;
          case 25:
            num1 = (int) num2 * 1440643104 ^ 265159995;
            continue;
          case 26:
            int num9 = disableTurns ? -1542391774 : (num9 = -1080670082);
            num1 = num9 ^ (int) num2 * 2052394271;
            continue;
          case 27:
            flag6 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * 1846250549 ^ -1905964638;
            continue;
          case 28:
            num1 = (int) num2 * 1777762537 ^ -1539621869;
            continue;
          case 29:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1326093591 ^ -1366337199;
            continue;
          case 30:
            num1 = (int) num2 * 2028736079 ^ 364713401;
            continue;
          case 31:
            num1 = (int) num2 * -1461193536 ^ 334244324;
            continue;
          case 32:
            int num10 = !flag1 ? -1132600727 : (num10 = -1354087275);
            num1 = num10 ^ (int) num2 * -594798603;
            continue;
          case 33:
            goto label_3;
          case 34:
            disableTurns = this.Board.DisableTurns;
            num1 = 903719983;
            continue;
          case 35:
            num1 = (int) num2 * -1119099580 ^ -131706678;
            continue;
          case 36:
            num1 = (int) num2 * 208833351 ^ -706345504;
            continue;
          case 37:
            num1 = (int) num2 * 1928177677 ^ -1082618889;
            continue;
          case 38:
            to.MovePawn(this.Board.From);
            num1 = 2087806565;
            continue;
          case 39:
            side = this.getSide(this.Board.From);
            num1 = 1501624509;
            continue;
          case 40:
            num1 = (int) num2 * -1001724949 ^ 1267901370;
            continue;
          case 41:
            this.msg = Square.\u200C‎‪⁯‏⁪⁫​‬⁯‭‎‏⁭⁪‍⁬‬⁮⁬⁯‫‮‬‌⁭‍‏⁪‫‏‍​‏⁫‫​⁯‌‪‮(\u003CModule\u003E.\u200F⁮‏‪‍⁭‭⁫⁭‍⁮⁭⁭‏‌‍⁯⁭⁯‏‌‎‏‎⁯⁮⁭‎⁭⁭‫​⁪⁭‫⁫⁫‪⁮⁬‮<string>(1816388036U), (object) move2.Count);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1540787118 ^ 326962400;
            continue;
          case 42:
            this.msg = \u003CModule\u003E.\u200F⁮‏‪‍⁭‭⁫⁭‍⁮⁭⁭‏‌‍⁯⁭⁯‏‌‎‏‎⁯⁮⁭‎⁭⁭‫​⁪⁭‫⁫⁫‪⁮⁬‮<string>(3381674316U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1511842452 ^ 352009979;
            continue;
          case 43:
            int num11 = flag5 ? -1240611654 : (num11 = -490453323);
            num1 = num11 ^ (int) num2 * 1912237588;
            continue;
          case 44:
            num1 = (int) num2 * -816952346 ^ -692394857;
            continue;
          case 45:
            to = this;
            num1 = (int) num2 * -255744814 ^ -1546716529;
            continue;
          case 46:
            this.msg = \u003CModule\u003E.\u200E‫​⁯⁮‎⁬‎⁬⁪‍⁪‬⁫‬‌‮⁮‍⁪⁮⁮‎⁭‌⁮​⁭‌⁭⁭⁬⁮‎⁯‭⁭‍‏⁫‮<string>(698195898U);
            num1 = (int) num2 * -537225200 ^ 1602050111;
            continue;
          case 47:
            num1 = (int) num2 * -389297619 ^ 964331519;
            continue;
          case 48:
            to.HighLight();
            num1 = (int) num2 * -216487550 ^ 1395597222;
            continue;
          case 49:
            num1 = (int) num2 * -1231932282 ^ -576656344;
            continue;
          case 50:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1480352060 ^ -1145287832;
            continue;
          case 51:
            num1 = 12257181;
            continue;
          case 52:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 633359725 ^ 215808175;
            continue;
          case 53:
            this.msg = \u003CModule\u003E.\u200E‫​⁯⁮‎⁬‎⁬⁪‍⁪‬⁫‬‌‮⁮‍⁪⁮⁮‎⁭‌⁮​⁭‌⁭⁭⁬⁮‎⁯‭⁭‍‏⁫‮<string>(1156345632U);
            int num12 = this.Board.From.Piece.Kind != Pieces.Pawn ? -790867568 : (num12 = -1114856328);
            num1 = num12 ^ (int) num2 * 592695965;
            continue;
          case 54:
            if (to.Piece != null)
            {
              num1 = 1430195314;
              continue;
            }
            num4 = 0;
            break;
          case 55:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1331595418 ^ 1390255590;
            continue;
          case 56:
            int num13 = flag6 ? -1118612279 : (num13 = -587629680);
            num1 = num13 ^ (int) num2 * -784020120;
            continue;
          case 57:
            num1 = (int) num2 * -1184385398 ^ -746368826;
            continue;
          case 58:
            this.Board.HidePieceMoves(this.Board.From);
            this.Board.From = (Square) null;
            num1 = 1896620305;
            continue;
          case 59:
            num1 = (int) num2 * 1289046376 ^ -879713502;
            continue;
          case 60:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 122616562 ^ 1345018125;
            continue;
          case 61:
            num1 = (int) num2 * -1275863865 ^ 2070667787;
            continue;
          case 62:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -586695484 ^ -1020210657;
            continue;
          case 63:
            num1 = (int) num2 * -2012491767 ^ 1952658116;
            continue;
          case 64:
            to.HighLight();
            num1 = (int) num2 * 1591520230 ^ 916632865;
            continue;
          case 65:
            this.msg = \u003CModule\u003E.\u202A⁮‪‮‫⁫⁮⁮​‬⁯⁯‪‎⁪‎‪‏⁯⁪‎‏‭‎‏‭‪⁭⁮‬‍‬⁬‬⁭‏⁯⁮‏‌‮<string>(2029616767U);
            num1 = (int) num2 * 394132804 ^ 1093608957;
            continue;
          case 66:
            num1 = (int) num2 * 1696574405 ^ -1000025835;
            continue;
          case 67:
            to.HighLight();
            num1 = (int) num2 * -505921052 ^ -146184500;
            continue;
          case 68:
            int num14 = flag8 ? -1698508518 : (num14 = -488471411);
            num1 = num14 ^ (int) num2 * 762699303;
            continue;
          case 69:
            flag8 = to.Piece == null & flag7;
            num1 = (int) num2 * 1830749898 ^ -1357558295;
            continue;
          case 70:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 908080 ^ -606246606;
            continue;
          case 71:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -1139236526 ^ 1203612137;
            continue;
          case 72:
            to.HighLight();
            num1 = (int) num2 * -1306404811 ^ 1528332340;
            continue;
          case 73:
            this.msg = \u003CModule\u003E.\u200E‫​⁯⁮‎⁬‎⁬⁪‍⁪‬⁫‬‌‮⁮‍⁪⁮⁮‎⁭‌⁮​⁭‌⁭⁭⁬⁮‎⁯‭⁭‍‏⁫‮<string>(698195898U);
            num1 = 1251749111;
            continue;
          case 74:
            num1 = (int) num2 * 858264738 ^ 698673812;
            continue;
          case 75:
            move2 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * -566336719 ^ 1933011849;
            continue;
          case 76:
            move1 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * 1640718094 ^ 348433210;
            continue;
          case 77:
            num4 = this.getSide(to) ? 1 : 0;
            break;
          case 78:
            int num15 = flag3 ? -1776241626 : (num15 = -1195358411);
            num1 = num15 ^ (int) num2 * -1817927868;
            continue;
          case 79:
            flag2 = move1.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * 1078716042 ^ 2117402952;
            continue;
          case 80:
            num1 = (int) num2 * -1645353198 ^ 210201678;
            continue;
          case 81:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u202A⁮‪‮‫⁫⁮⁮​‬⁯⁯‪‎⁪‎‪‏⁯⁪‎‏‭‎‏‭‪⁭⁮‬‍‬⁬‬⁭‏⁯⁮‏‌‮<string>(2029616767U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -531330198 ^ 616523522;
            continue;
          case 82:
            if (this.Board.From == null)
            {
              num3 = 0;
              goto label_64;
            }
            else
            {
              num1 = (int) num2 * -432405261 ^ 1976677233;
              continue;
            }
          case 83:
            num1 = (int) num2 * 2035214049 ^ 730747181;
            continue;
          case 84:
            num1 = 1925070331;
            continue;
          case 85:
            num1 = 912775159;
            continue;
          default:
            goto label_94;
        }
        int num16;
        num1 = num16 = num4 != 0 ? 243161697 : (num16 = 976080152);
        continue;
label_64:
        flag7 = num3 != 0;
        num1 = 2138324234;
      }
label_3:
      return;
label_94:;
    }

    private void hideMoves(Square to)
    {
      bool flag = this.Board.From != null;
label_1:
      int num1 = -1226627450;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -732978225)) % 8U)
        {
          case 0:
            num1 = (int) num2 * -1071384319 ^ 367938501;
            continue;
          case 1:
            int num3 = flag ? -1236706364 : (num3 = -23109753);
            num1 = num3 ^ (int) num2 * -947113853;
            continue;
          case 2:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1021010852 ^ 2134135577;
            continue;
          case 3:
            goto label_3;
          case 4:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * -1297643021 ^ 605806390;
            continue;
          case 5:
            num1 = (int) num2 * 681065688 ^ 1285741284;
            continue;
          case 6:
            num1 = (int) num2 * 2039161244 ^ 1263911667;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void CaptPawn(Square from)
    {
label_1:
      int num1 = 1930096779;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1242064458)) % 32U)
        {
          case 0:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 1:
            flag6 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -1615457419 ^ 1535326651;
            continue;
          case 2:
            flag1 = false;
            num1 = (int) num2 * -1343313816 ^ -1751594945;
            continue;
          case 3:
            int num5 = flag7 ? 347982299 : (num5 = 18616558);
            num1 = num5 ^ (int) num2 * -811137;
            continue;
          case 4:
            int num6 = flag6 ? -975239585 : (num6 = -896591001);
            num1 = num6 ^ (int) num2 * 1361808423;
            continue;
          case 5:
            flag2 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -1868514983 ^ -1946961318;
            continue;
          case 6:
            flag4 = from.Piece.Color == PieceColor.White;
            num1 = 224829151;
            continue;
          case 7:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * -278510526 ^ 763664944;
            continue;
          case 8:
            this.handleBlackCastling();
            num1 = (int) num2 * 712669636 ^ 1357701209;
            continue;
          case 9:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 1973741668 ^ 761133480;
            continue;
          case 10:
            flag1 = true;
            num1 = (int) num2 * 2136046280 ^ -806380918;
            continue;
          case 11:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_37;
          case 12:
            flag1 = true;
            num1 = (int) num2 * 1444996488 ^ -554936397;
            continue;
          case 13:
            flag3 = flag2;
            num1 = (int) num2 * 1700519158 ^ -540790802;
            continue;
          case 14:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -60247551 ^ -865357140;
            continue;
          case 15:
            if (flag5)
            {
              num1 = (int) num2 * 2047454725 ^ 2028468093;
              continue;
            }
            goto label_58;
          case 16:
            num1 = 282420600;
            continue;
          case 17:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = 885525292;
            continue;
          case 18:
            int num7;
            num1 = num7 = this.Piece.Color == PieceColor.Black ? 1966783140 : (num7 = 1389076849);
            continue;
          case 19:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 722993665 ^ -1981849262;
              continue;
            }
            num4 = 0;
            goto label_37;
          case 20:
            this.Piece = from.Piece;
            num1 = 770166453;
            continue;
          case 21:
            int num8 = !flag4 ? 1335817222 : (num8 = 1921718839);
            num1 = num8 ^ (int) num2 * 1955434322;
            continue;
          case 22:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = 1915568510;
            continue;
          case 23:
            num1 = (int) num2 * 1406007349 ^ -1401082511;
            continue;
          case 24:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            this.handleWhiteCastling();
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 1910417602 ^ 757041946;
            continue;
          case 25:
            num1 = 1389076849;
            continue;
          case 26:
            int num9 = !flag3 ? -1099436318 : (num9 = -720474393);
            num1 = num9 ^ (int) num2 * 1872604705;
            continue;
          case 27:
            from.Piece = (ChessPiece) null;
            flag5 = flag1;
            num1 = 221532709;
            continue;
          case 28:
            num1 = (int) num2 * -265054876 ^ 1188272295;
            continue;
          case 30:
            goto label_1;
          case 31:
            num1 = (int) num2 * -920579397 ^ -2116490099;
            continue;
          default:
            goto label_40;
        }
        int num10;
        num1 = num10 = num3 != 0 ? 1244133920 : (num10 = 648621146);
        continue;
label_37:
        flag7 = num4 != 0;
        num1 = 725053449;
      }
label_40:
      Promotion promotion = new Promotion(Square.\u206A‫‮‮⁫⁬‪⁮‭⁪‍⁬⁯⁪‫‌‍‬‪‏‌⁮⁪​‭‫‌⁭‎‭‪⁬⁯⁫⁭⁯‪‌⁬‬‮());
      try
      {
        int num11 = (int) Square.\u206B‫‍‏‏⁫‪‏⁫‎‎⁭​‫⁯⁯‎⁭⁪‎‬‍‏‮⁮​​⁬⁯‌‫‮‮‫⁯⁬⁮‭⁭‭‮((Form) promotion);
        this.Kind = promotion.Piece;
label_42:
        int num12 = 1135618857;
        while (true)
        {
          uint num13;
          switch ((num13 = (uint) (num12 ^ 1242064458)) % 4U)
          {
            case 0:
              num12 = (int) num13 * -2074592182 ^ 1393076915;
              continue;
            case 2:
              goto label_42;
            case 3:
              num12 = (int) num13 * 75069961 ^ 1283149049;
              continue;
            default:
              goto label_52;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_47:
          int num14 = 1786658719;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 1242064458)) % 3U)
            {
              case 0:
                goto label_47;
              case 2:
                Square.\u200C‭​‮⁮⁪​⁫⁭⁫​⁮​‬‏​⁮⁬‏‭‎⁯⁮⁯‌​‎​‏‭‮‪‏⁮‪⁬‫‬‪⁭‮((IDisposable) promotion);
                num14 = (int) num15 * 1712102194 ^ 746279073;
                continue;
              default:
                goto label_51;
            }
          }
        }
label_51:;
      }
label_52:
label_53:
      int num16 = 1407057918;
label_54:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ 1242064458)) % 5U)
        {
          case 0:
            goto label_53;
          case 1:
            goto label_58;
          case 2:
            this.SwitchPlayer();
            num16 = (int) num17 * 1330791549 ^ -992685873;
            continue;
          case 3:
            PlaySound.Play();
            num16 = (int) num17 * 1997225553 ^ 319122534;
            continue;
          case 4:
            goto label_55;
          default:
            goto label_49;
        }
      }
label_55:
      return;
label_49:
      return;
label_58:
      this.Board.lights.FindAllMoves();
      num16 = 1934178747;
      goto label_54;
    }

    private void MovePawn(Square from)
    {
label_1:
      int num1 = -1894804160;
      ChessPiece chessPiece;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -2033673963)) % 36U)
        {
          case 0:
            num1 = -564529915;
            continue;
          case 1:
            flag1 = this.Piece.Color == PieceColor.White;
            flag7 = flag1;
            num1 = (int) num2 * -269679288 ^ -442530877;
            continue;
          case 2:
            int num6 = !flag7 ? 2037943076 : (num6 = 1362813393);
            num1 = num6 ^ (int) num2 * 2096112777;
            continue;
          case 3:
            num1 = (int) num2 * -25695194 ^ 1239665599;
            continue;
          case 4:
            flag5 = flag2;
            num1 = (int) num2 * -1765093917 ^ 1238909805;
            continue;
          case 5:
            chessPiece = (ChessPiece) null;
            num1 = (int) num2 * -1949832250 ^ -215662297;
            continue;
          case 6:
            num1 = (int) num2 * 1718472100 ^ 1199715088;
            continue;
          case 7:
            num1 = -1827435988;
            continue;
          case 9:
            num1 = (int) num2 * -798524732 ^ -760726339;
            continue;
          case 10:
            flag2 = true;
            num1 = (int) num2 * -796909564 ^ 764561454;
            continue;
          case 11:
            flag2 = true;
            num1 = (int) num2 * 1750599866 ^ -797511545;
            continue;
          case 12:
            flag2 = false;
            num1 = -421617768;
            continue;
          case 13:
            from.Piece = (ChessPiece) null;
            num1 = -733719048;
            continue;
          case 14:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * 1279971852 ^ -1568576179;
            continue;
          case 15:
            int num7 = !flag4 ? -329813868 : (num7 = -789575833);
            num1 = num7 ^ (int) num2 * -835521277;
            continue;
          case 16:
            this.Piece = from.Piece;
            num1 = (int) num2 * -1706387392 ^ -517792061;
            continue;
          case 17:
            num1 = (int) num2 * 1312245130 ^ -1719254929;
            continue;
          case 18:
            num3 = this.Rank == 4 ? 1 : 0;
            goto label_21;
          case 19:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 519474114 ^ -500550497;
            continue;
          case 20:
            if (flag5)
            {
              num1 = (int) num2 * -1934452968 ^ 1367474872;
              continue;
            }
            goto label_97;
          case 21:
            int num8 = flag6 ? 204798682 : (num8 = 1427618749);
            num1 = num8 ^ (int) num2 * -1444557820;
            continue;
          case 22:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -1018968136 ^ 1676729676;
              continue;
            }
            num4 = 0;
            goto label_37;
          case 23:
            num1 = -1477388402;
            continue;
          case 24:
            if (this.Rank == 3)
            {
              num3 = 1;
              goto label_21;
            }
            else
            {
              num1 = (int) num2 * -2060872007 ^ 104592403;
              continue;
            }
          case 25:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1570052539 ^ 2016720974;
            continue;
          case 26:
            this.Board.lastPassantPawn = (ChessPiece) null;
            flag4 = this.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * 584839216 ^ -129888146;
            continue;
          case 27:
            int num9 = flag3 ? 1615257432 : (num9 = 1611506498);
            num1 = num9 ^ (int) num2 * -459359035;
            continue;
          case 28:
            chessPiece = this.handleBlackCastling();
            num1 = (int) num2 * -2031981284 ^ 1861212460;
            continue;
          case 29:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_37;
          case 30:
            num1 = (int) num2 * -1642234487 ^ -777574387;
            continue;
          case 31:
            goto label_1;
          case 32:
            num1 = -1827435988;
            continue;
          case 33:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num5 = 0;
              break;
            }
            num1 = (int) num2 * 1678290973 ^ 741946251;
            continue;
          case 34:
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * -917242566 ^ -9854517;
            continue;
          case 35:
            num5 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          default:
            goto label_47;
        }
        flag6 = num5 != 0;
        num1 = -483909468;
        continue;
label_21:
        flag3 = num3 != 0;
        num1 = -1499547298;
        continue;
label_37:
        int num10;
        num1 = num10 = num4 == 0 ? -1448571754 : (num10 = -7481285);
      }
label_47:
      Promotion promotion = new Promotion(Square.\u206A‫‮‮⁫⁬‪⁮‭⁪‍⁬⁯⁪‫‌‍‬‪‏‌⁮⁪​‭‫‌⁭‎‭‪⁬⁯⁫⁭⁯‪‌⁬‬‮());
      try
      {
label_49:
        int num11 = -2087620350;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ -2033673963)) % 5U)
          {
            case 0:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * -1423902487 ^ -204046275;
              continue;
            case 2:
              num11 = (int) num12 * 1837967589 ^ 609559867;
              continue;
            case 3:
              goto label_49;
            case 4:
              int num13 = (int) Square.\u206B‫‍‏‏⁫‪‏⁫‎‎⁭​‫⁯⁯‎⁭⁪‎‬‍‏‮⁮​​⁬⁯‌‫‮‮‫⁯⁬⁮‭⁭‭‮((Form) promotion);
              num11 = (int) num12 * -707962910 ^ -50381621;
              continue;
            default:
              goto label_61;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_55:
          int num14 = -1632546026;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -2033673963)) % 4U)
            {
              case 0:
                goto label_55;
              case 1:
                num14 = (int) num15 * 1666990517 ^ -732376934;
                continue;
              case 3:
                Square.\u200C‭​‮⁮⁪​⁫⁭⁫​⁮​‬‏​⁮⁬‏‭‎⁯⁮⁯‌​‎​‏‭‮‪‏⁮‪⁬‫‬‪⁭‮((IDisposable) promotion);
                num14 = (int) num15 * -1895997020 ^ -1035641388;
                continue;
              default:
                goto label_60;
            }
          }
        }
label_60:;
      }
label_61:
label_62:
      int num16 = -815468154;
label_63:
      while (true)
      {
        uint num17;
        int file;
        int rank;
        bool flag8;
        bool flag9;
        Square square1;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        Square square2;
        switch ((num17 = (uint) (num16 ^ -2033673963)) % 48U)
        {
          case 0:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * -1779275687 ^ -1284340467;
            continue;
          case 1:
            this.Board.lights.FindAllMoves();
            num16 = -271447043;
            continue;
          case 2:
            from.Piece = this.Piece;
            this.Piece = (ChessPiece) null;
            num16 = (int) num17 * -312329404 ^ -656306355;
            continue;
          case 3:
            file = chessPiece.Current.File;
            num16 = (int) num17 * 283325227 ^ -1644252088;
            continue;
          case 4:
            num16 = (int) num17 * 447810005 ^ 1169800461;
            continue;
          case 5:
            num16 = (int) num17 * 1981106799 ^ -1723433903;
            continue;
          case 6:
            num16 = (int) num17 * -43898755 ^ 712418795;
            continue;
          case 7:
            num16 = (int) num17 * -907574869 ^ 1026309164;
            continue;
          case 8:
            num16 = (int) num17 * -1679395755 ^ -1354040888;
            continue;
          case 9:
            num16 = -1749454401;
            continue;
          case 10:
            PlaySound.Play();
            num16 = -1133698538;
            continue;
          case 11:
            int num18 = !flag9 ? -1830446465 : (num18 = -1616290993);
            num16 = num18 ^ (int) num17 * 408451169;
            continue;
          case 12:
            int num19 = !flag10 ? -506956728 : (num19 = -1925271017);
            num16 = num19 ^ (int) num17 * -2084005079;
            continue;
          case 13:
            square2 = this.Board[0, rank];
            break;
          case 14:
            num16 = (int) num17 * -719472735 ^ 1690627192;
            continue;
          case 15:
            goto label_62;
          case 16:
            int num20 = flag1 ? 88391027 : (num20 = 265981884);
            num16 = num20 ^ (int) num17 * 1071498207;
            continue;
          case 17:
            num16 = (int) num17 * -305469514 ^ -2013419132;
            continue;
          case 18:
            num16 = (int) num17 * 2037207323 ^ -540225535;
            continue;
          case 19:
            goto label_97;
          case 20:
            if (file == 5)
            {
              square2 = this.Board[7, rank];
              break;
            }
            num16 = (int) num17 * 410785498 ^ 2015100384;
            continue;
          case 21:
            square1.Piece = chessPiece;
            num16 = (int) num17 * -44936368 ^ -1364593025;
            continue;
          case 22:
            this.Board.BlackCanCastleQueenSide = true;
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * 911044117 ^ -2036763410;
            continue;
          case 23:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * -142998866 ^ 653554720;
            continue;
          case 24:
            this.Board.WhiteCanCastleQueenSide = true;
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * 1094389037 ^ 1356956745;
            continue;
          case 25:
            int num21 = !flag8 ? 1313619451 : (num21 = 834650225);
            num16 = num21 ^ (int) num17 * 1498239083;
            continue;
          case 26:
            num16 = (int) num17 * 274643986 ^ -627434720;
            continue;
          case 27:
            num16 = (int) num17 * 550764318 ^ 2105329728;
            continue;
          case 28:
            rank = chessPiece.Current.Rank;
            num16 = (int) num17 * 1018152095 ^ -1254286955;
            continue;
          case 29:
            num16 = -1153904900;
            continue;
          case 30:
            flag11 = this.Board.lights.KingColorOnCheck == this.Piece.Color;
            num16 = (int) num17 * -1308850244 ^ -376264970;
            continue;
          case 31:
            this.Board.lights.FindAllMoves();
            int num22 = !this.Board.lights.IsOnCheck ? -1848456905 : (num22 = -38401005);
            num16 = num22 ^ (int) num17 * 420231672;
            continue;
          case 32:
            this.msg = \u003CModule\u003E.\u200E‫​⁯⁮‎⁬‎⁬⁪‍⁪‬⁫‬‌‮⁮‍⁪⁮⁮‎⁭‌⁮​⁭‌⁭⁭⁬⁮‎⁯‭⁭‍‏⁫‮<string>(3380187569U);
            flag8 = flag1;
            num16 = (int) num17 * 1493665046 ^ 1322517516;
            continue;
          case 33:
            flag13 = flag12;
            num16 = -1737557081;
            continue;
          case 34:
            int num23 = flag13 ? 1134184715 : (num23 = 559180980);
            num16 = num23 ^ (int) num17 * -192400226;
            continue;
          case 35:
            num16 = (int) num17 * -1389003452 ^ -1991674319;
            continue;
          case 36:
            flag10 = chessPiece != null;
            num16 = -1037176215;
            continue;
          case 37:
            num16 = (int) num17 * -2031148498 ^ 932837711;
            continue;
          case 38:
            flag12 = true;
            flag9 = this.Piece.Kind == Pieces.King;
            num16 = (int) num17 * 1424736106 ^ 1754955202;
            continue;
          case 39:
            flag12 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -937678478 ^ 1902308938;
            continue;
          case 40:
            this.SwitchPlayer();
            num16 = (int) num17 * 1997398257 ^ -141390090;
            continue;
          case 41:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            num16 = -888158125;
            continue;
          case 42:
            num16 = (int) num17 * -1136122937 ^ 1652906883;
            continue;
          case 43:
            int num24 = !flag11 ? -1423265706 : (num24 = -1800990610);
            num16 = num24 ^ (int) num17 * 905663847;
            continue;
          case 44:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = -278115425;
            continue;
          case 45:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = -2056887375;
            continue;
          case 46:
            this.msg = \u003CModule\u003E.\u206D⁮‭⁮‪‎‌​⁯‪⁫⁪⁭⁪‪⁯‬​⁫​⁪⁬⁯⁭‭⁭⁯‎‌‮‎⁫‍⁪⁫⁯‭⁭⁮⁮‮<string>(3078072558U);
            num16 = -1153904900;
            continue;
          case 47:
            goto label_64;
          default:
            goto label_57;
        }
        square1 = square2;
        num16 = -1610329392;
      }
label_64:
      return;
label_57:
      return;
label_97:
      this.Board.lights.IsOnCheck = false;
      num16 = -661609286;
      goto label_63;
    }

    private ChessPiece handleBlackCastling()
    {
label_1:
      int num1 = -877300501;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        Square square1;
        bool flag1;
        bool flag2;
        Square square2;
        ChessPiece chessPiece2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1588499996)) % 37U)
        {
          case 0:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * -585675025 ^ -692753849;
            continue;
          case 1:
            int num5;
            num1 = num5 = this.Piece.Current.File != 6 ? -1704763948 : (num5 = -1813148216);
            continue;
          case 2:
            int num6 = !flag2 ? -720014638 : (num6 = -1291689869);
            num1 = num6 ^ (int) num2 * 1030285525;
            continue;
          case 3:
            flag3 = this.Piece.Current.File == 2;
            num1 = (int) num2 * 1026427054 ^ -1943069500;
            continue;
          case 4:
            num1 = (int) num2 * -2089366703 ^ -616923884;
            continue;
          case 5:
            int num7 = !flag3 ? 290806348 : (num7 = 1291878404);
            num1 = num7 ^ (int) num2 * -98715918;
            continue;
          case 6:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * 1478915477 ^ 616848211;
            continue;
          case 7:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = -512734630;
            continue;
          case 8:
            num1 = (int) num2 * -494638611 ^ -1562649673;
            continue;
          case 9:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 486577417 ^ 438254626;
              continue;
            }
            num3 = 1;
            break;
          case 10:
            num1 = -568047724;
            continue;
          case 11:
            int num8 = this.Piece.Kind != Pieces.Rook ? 2080539691 : (num8 = 2058167720);
            num1 = num8 ^ (int) num2 * -1767870730;
            continue;
          case 12:
            if (!this.Board.BlackCanCastleKingSide)
            {
              num1 = (int) num2 * 528231725 ^ 594583282;
              continue;
            }
            num4 = 1;
            goto label_39;
          case 13:
            num1 = (int) num2 * 1125286273 ^ 467674371;
            continue;
          case 14:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1157442663 ^ -1071703519;
            continue;
          case 15:
            this.Board.BlackCanCastleKingSide = false;
            num1 = -1711315166;
            continue;
          case 16:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * -1050333678 ^ -513435905;
            continue;
          case 17:
            square1.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * -1510112278 ^ 237878154;
            continue;
          case 18:
            int num9 = !flag1 ? -1771466942 : (num9 = -756628509);
            num1 = num9 ^ (int) num2 * 1954118729;
            continue;
          case 19:
            square1 = this.Board[3, 7];
            num1 = (int) num2 * -1073871397 ^ -1153044089;
            continue;
          case 20:
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * -115786530 ^ 1831452570;
            continue;
          case 21:
            num1 = -935501138;
            continue;
          case 22:
            num1 = (int) num2 * -1211443908 ^ 108058145;
            continue;
          case 23:
            this.Board.BlackCanCastleKingSide = false;
            num1 = (int) num2 * -1952750776 ^ 1997124405;
            continue;
          case 25:
            num1 = -2015387533;
            continue;
          case 26:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * 407708471 ^ 498530581;
            continue;
          case 27:
            chessPiece1 = chessPiece2;
            num1 = -494887608;
            continue;
          case 28:
            num1 = -2104252026;
            continue;
          case 29:
            num1 = (int) num2 * 1562930889 ^ 1708427722;
            continue;
          case 30:
            num1 = (int) num2 * 150064738 ^ 2139614607;
            continue;
          case 31:
            flag1 = Square.\u200B‍⁫‭​⁮‍‭⁫​‫‌⁮⁭⁪⁮‫‏‮⁬‭⁫⁯⁯​​‭‪⁪⁪⁫‪‍‪⁮⁭‫⁮⁫⁫‮(this.Piece.Home.Name, \u003CModule\u003E.\u206D⁮‭⁮‪‎‌​⁯‪⁫⁪⁭⁪‪⁯‬​⁫​⁪⁬⁯⁭‭⁭⁯‎‌‮‎⁫‍⁪⁫⁯‭⁭⁮⁮‮<string>(786897947U));
            num1 = (int) num2 * -1589152202 ^ -1048325854;
            continue;
          case 32:
            num4 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            goto label_39;
          case 33:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 34:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * 162642969 ^ -977822401;
            continue;
          case 35:
            square2 = this.Board[5, 7];
            square2.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * -1083316088 ^ -1624241730;
            continue;
          case 36:
            goto label_1;
          default:
            goto label_44;
        }
        flag2 = num3 != 0;
        num1 = -443374232;
        continue;
label_39:
        int num10;
        num1 = num10 = num4 == 0 ? -2104252026 : (num10 = -447740637);
      }
label_44:
      return chessPiece1;
    }

    private ChessPiece handleWhiteCastling()
    {
label_1:
      int num1 = 435856902;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        bool flag1;
        Square square1;
        Square square2;
        ChessPiece chessPiece2;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 896400339)) % 42U)
        {
          case 0:
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1835224029 ^ -1105348156;
            continue;
          case 1:
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * -1173309742 ^ -1543129195;
            continue;
          case 2:
            num1 = (int) num2 * -37429142 ^ -332329352;
            continue;
          case 3:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = 1173629157;
            continue;
          case 4:
            num1 = (int) num2 * -724399965 ^ 1137533317;
            continue;
          case 5:
            goto label_1;
          case 6:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_42;
          case 7:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 1313445883 ^ 1708733300;
            continue;
          case 8:
            square2.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * -1430566210 ^ 1063184400;
            continue;
          case 9:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * -1181329124 ^ -1783228420;
            continue;
          case 10:
            int num5 = Square.\u200B‍⁫‭​⁮‍‭⁫​‫‌⁮⁭⁪⁮‫‏‮⁬‭⁫⁯⁯​​‭‪⁪⁪⁫‪‍‪⁮⁭‫⁮⁫⁫‮(this.Piece.Home.Name, \u003CModule\u003E.\u200F⁮‏‪‍⁭‭⁫⁭‍⁮⁭⁭‏‌‍⁯⁭⁯‏‌‎‏‎⁯⁮⁭‎⁭⁭‫​⁪⁭‫⁫⁫‪⁮⁬‮<string>(871021969U)) ? 1777589722 : (num5 = 1961721343);
            num1 = num5 ^ (int) num2 * -1301878414;
            continue;
          case 11:
            chessPiece1 = chessPiece2;
            num1 = 698647996;
            continue;
          case 12:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * 1653596976 ^ 2056068272;
            continue;
          case 13:
            num1 = (int) num2 * -398079200 ^ 261062558;
            continue;
          case 14:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * 2067191766 ^ -812421757;
            continue;
          case 15:
            num1 = (int) num2 * 315607997 ^ 2074945496;
            continue;
          case 16:
            square1.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * -256336305 ^ -1637850092;
            continue;
          case 17:
            square2 = this.Board[5, 0];
            num1 = (int) num2 * 825760394 ^ 1001397551;
            continue;
          case 18:
            num1 = 723427114;
            continue;
          case 19:
            int num6 = !flag3 ? -192374840 : (num6 = -312608155);
            num1 = num6 ^ (int) num2 * -2142328672;
            continue;
          case 20:
            square1 = this.Board[3, 0];
            num1 = (int) num2 * -1101063158 ^ 101442041;
            continue;
          case 21:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * 730872645 ^ 1477324762;
            continue;
          case 22:
            int num7 = flag2 ? 17017883 : (num7 = 1968572467);
            num1 = num7 ^ (int) num2 * -2046094337;
            continue;
          case 23:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 1923866713 ^ -1645473371;
            continue;
          case 24:
            num1 = 2041228295;
            continue;
          case 25:
            num1 = (int) num2 * -1039290958 ^ -535315467;
            continue;
          case 26:
            flag2 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * -47820994 ^ 1281453095;
            continue;
          case 27:
            num1 = (int) num2 * -1488533961 ^ 1349499692;
            continue;
          case 28:
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * 9575519 ^ -1117538320;
            continue;
          case 29:
            num1 = 2048456101;
            continue;
          case 30:
            flag3 = this.Piece.Current.File == 6;
            num1 = 917937214;
            continue;
          case 31:
            int num8 = flag4 ? -1669369731 : (num8 = -1314114785);
            num1 = num8 ^ (int) num2 * 111642228;
            continue;
          case 32:
            num1 = (int) num2 * -1678611142 ^ 2087425019;
            continue;
          case 33:
            int num9 = flag1 ? 844278976 : (num9 = 1241662240);
            num1 = num9 ^ (int) num2 * -303757624;
            continue;
          case 34:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 20374768;
            continue;
          case 35:
            num4 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            break;
          case 36:
            if (this.Board.WhiteCanCastleKingSide)
            {
              num4 = 1;
              break;
            }
            num1 = (int) num2 * -601434518 ^ -89380794;
            continue;
          case 38:
            num1 = (int) num2 * 1500416050 ^ 1467306444;
            continue;
          case 39:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * -686090643 ^ 16912868;
              continue;
            }
            num3 = 1;
            goto label_42;
          case 40:
            num1 = 846249112;
            continue;
          case 41:
            flag4 = this.Piece.Current.File == 2;
            num1 = (int) num2 * 582439326 ^ -1457019258;
            continue;
          default:
            goto label_49;
        }
        flag1 = num4 != 0;
        num1 = 317030044;
        continue;
label_42:
        int num10;
        num1 = num10 = num3 == 0 ? 2041228295 : (num10 = 576426619);
      }
label_49:
      return chessPiece1;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = 1281340857;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1479347432)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -2129384343 ^ -1289316514;
            continue;
          case 1:
            Square.\u206B‌‌‬‏‪​‏‮‭⁪‪⁭‪⁮⁫‭‭​⁬​‌‫⁯‍​⁮‬⁮‭‪⁫‮‏⁯‬⁯⁮‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * -1292357184 ^ 2026385352;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = -1098545794;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -321494220)) % 9U)
        {
          case 0:
            int num4 = !flag ? 1645122184 : (num4 = 2038108034);
            num1 = num4 ^ (int) num2 * -984006420;
            continue;
          case 1:
            if (disposing)
            {
              num1 = (int) num2 * -831000475 ^ 706833592;
              continue;
            }
            num3 = 0;
            break;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1073103110 ^ -1430344868;
            continue;
          case 4:
            base.Dispose(disposing);
            num1 = -53382988;
            continue;
          case 5:
            num1 = (int) num2 * -2020686699 ^ 756570379;
            continue;
          case 6:
            num3 = this.components != null ? 1 : 0;
            break;
          case 7:
            Square.\u200C‭​‮⁮⁪​⁫⁭⁫​⁮​‬‏​⁮⁬‏‭‎⁯⁮⁯‌​‎​‏‭‮‪‏⁮‪⁬‫‬‪⁭‮((IDisposable) this.components);
            num1 = (int) num2 * 1862504114 ^ -982942180;
            continue;
          case 8:
            goto label_3;
          default:
            goto label_14;
        }
        flag = num3 != 0;
        num1 = -707540246;
      }
label_3:
      return;
label_14:;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = -635075517;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -449936660)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -1687996468 ^ -1915197939;
            continue;
          case 1:
            Square.\u200B‮⁬‬⁭‪⁭⁪‬‬‍‬⁭‍‌‬‌​‪‎‍‏⁬‎‪‎‪‮⁮‏‫​‬⁪⁭⁫‪‎‍‬‮((Control) this, false);
            num1 = (int) num2 * 1281149328 ^ -527616748;
            continue;
          case 2:
            Square.\u202C⁮‫‍‍‮‌⁪‮​​​⁯‬‪​‏‌⁬‫‭‫⁭‌​‎⁬⁪⁬⁫‬‪⁯‌⁭‮⁪‪‏‍‮((Control) this);
            num1 = (int) num2 * -2002525239 ^ 926034615;
            continue;
          case 3:
            goto label_3;
          case 4:
            Square.\u202B⁯‫‭‌⁮⁫⁫​‪⁮⁭‫‏⁫‬‌‮‌‬⁬‍‪⁫⁫‌⁮‏‌‌⁪⁪⁮‬‫‭‫‍⁭‫‮((Control) this, new Padding(0));
            num1 = (int) num2 * -1258863815 ^ 925945712;
            continue;
          case 5:
            Square.\u206E​‬⁮⁭‬‍​‫⁬‭‫⁯⁮‭‭‌‏‭‎‭​⁭⁬‏‪‍‌⁯⁬‮⁬‭⁯‮⁫⁮⁮‎‎‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 990775141 ^ -1067148216;
            continue;
          case 6:
            goto label_1;
          case 7:
            Square.\u202E‮​‪⁭‌⁮​‮‮‏‬‮⁪‌‎⁫‭⁬​‍‎‍⁭⁮‪‎‬⁪‍‭⁪‌‎⁪‌⁫‍‬‪‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * 868057320 ^ 637355721;
            continue;
          case 8:
            Square.\u206D⁯⁪‫⁮​‬⁯‍‎⁬‭‭‍‏⁭‏⁬‪‏‎⁪‎‫‫⁪‏‮​‍‮‮‫‏⁪‌‭​‫⁮‮((ContainerControl) this, new SizeF(6f, 13f));
            Square.\u200E​⁫‪⁯‎⁯⁯‌‪‬‏⁭‪⁯‎‫‎⁮⁬‏⁬‫‫‮⁬‪‏‏‎⁯⁮⁬⁭‮⁭‌⁭‮⁪‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * -1578577481 ^ -2063150763;
            continue;
          case 9:
            this.Name = \u003CModule\u003E.\u206D⁮‭⁮‪‎‌​⁯‪⁫⁪⁭⁪‪⁯‬​⁫​⁪⁬⁯⁭‭⁭⁯‎‌‮‎⁫‍⁪⁫⁯‭⁭⁮⁮‮<string>(1361661799U);
            num1 = (int) num2 * 1967681819 ^ 1997667091;
            continue;
          case 10:
            num1 = (int) num2 * 887085538 ^ 676113890;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    static Delegate \u200F⁫⁯⁪⁪⁪⁯‪‌‮‪‎‭⁪‌​‏‌‪‫‭‮​‬‎‎⁫⁫​⁬⁮‎‪‪⁮‬⁭‎⁬⁮‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206D‮‫‎⁫⁪⁪‬‬‎‮‎‌⁫‪‌⁯‭‫⁭‪‏⁪‍⁮⁮‬‍​‪⁮‌‫‪⁭‭⁬‬‮‭‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u200E‎‪⁬‎‬⁫‫‍‌‎‬‬‪⁬⁯⁮‮⁫‭‎‫⁬⁪⁮⁭‬‭‍⁯⁪‮‬‎⁯​‍⁪‫⁮‮([In] object obj0) => obj0.ToString();

    static string \u206A⁬⁯⁮⁬‭‫‫⁮‏‍‮⁮⁫‍‏⁯‫​‏‭‭‎‏⁪‭⁯‮‫⁪⁬‌⁬⁬⁬‍‍‬⁬⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u206B⁯‌‎‭⁪‮‭⁯‬⁪‌‫⁯‫‪‮‎⁯⁬‏‫‍‎‎‫⁯‫‌⁭⁭⁭‫​⁪‫‍⁭⁬‪‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u206C⁮‬⁬‫​⁬⁭⁪⁯‏⁭‏‌​‫⁪‮‪⁬‭‍⁬⁬⁮⁪​‭⁭⁪⁫‎‎​⁯‮‫‮⁪‎‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u206F‍‏‫‭⁬‬‌⁫‎‪⁯⁭‌‍⁯‪‌‬⁪‎‮‪⁬⁮‎‭‭‭‬⁪‌‭‬⁭‎‎‫⁮‮‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u200C‎‪⁯‏⁪⁫​‬⁯‭‎‏⁭⁪‍⁬‬⁮⁬⁯‫‮‬‌⁭‍‏⁪‫‏‍​‏⁫‫​⁯‌‪‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u206A‫‮‮⁫⁬‪⁮‭⁪‍⁬⁯⁪‫‌‍‬‪‏‌⁮⁪​‭‫‌⁭‎‭‪⁬⁯⁫⁭⁯‪‌⁬‬‮() => Cursor.Position;

    static DialogResult \u206B‫‍‏‏⁫‪‏⁫‎‎⁭​‫⁯⁯‎⁭⁪‎‬‍‏‮⁮​​⁬⁯‌‫‮‮‫⁯⁬⁮‭⁭‭‮([In] Form obj0) => obj0.ShowDialog();

    static void \u200C‭​‮⁮⁪​⁫⁭⁫​⁮​‬‏​⁮⁬‏‭‎⁯⁮⁯‌​‎​‏‭‮‪‏⁮‪⁬‫‬‪⁭‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u200B‍⁫‭​⁮‍‭⁫​‫‌⁮⁭⁪⁮‫‏‮⁬‭⁫⁯⁯​​‭‪⁪⁪⁫‪‍‪⁮⁭‫⁮⁫⁫‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u206B‌‌‬‏‪​‏‮‭⁪‪⁭‪⁮⁫‭‭​⁬​‌‫⁯‍​⁮‬⁮‭‪⁫‮‏⁯‬⁯⁮‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u202C⁮‫‍‍‮‌⁪‮​​​⁯‬‪​‏‌⁬‫‭‫⁭‌​‎⁬⁪⁬⁫‬‪⁯‌⁭‮⁪‪‏‍‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u206D⁯⁪‫⁮​‬⁯‍‎⁬‭‭‍‏⁭‏⁬‪‏‎⁪‎‫‫⁪‏‮​‍‮‮‫‏⁪‌‭​‫⁮‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u200E​⁫‪⁯‎⁯⁯‌‪‬‏⁭‪⁯‎‫‎⁮⁬‏⁬‫‫‮⁬‪‏‏‎⁯⁮⁬⁭‮⁭‌⁭‮⁪‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u202E‮​‪⁭‌⁮​‮‮‏‬‮⁪‌‎⁫‭⁬​‍‎‍⁭⁮‪‎‬⁪‍‭⁪‌‎⁪‌⁫‍‬‪‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u202B⁯‫‭‌⁮⁫⁫​‪⁮⁭‫‏⁫‬‌‮‌‬⁬‍‪⁫⁫‌⁮‏‌‌⁪⁪⁮‬‫‭‫‍⁭‫‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u206E​‬⁮⁭‬‍​‫⁬‭‫⁯⁮‭‭‌‏‭‎‭​⁭⁬‏‪‍‌⁯⁬‮⁬‭⁯‮⁫⁮⁮‎‎‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200B‮⁬‬⁭‪⁭⁪‬‬‍‬⁭‍‌‬‌​‪‎‍‏⁬‎‪‎‪‮⁮‏‫​‬⁪⁭⁫‪‎‍‬‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
