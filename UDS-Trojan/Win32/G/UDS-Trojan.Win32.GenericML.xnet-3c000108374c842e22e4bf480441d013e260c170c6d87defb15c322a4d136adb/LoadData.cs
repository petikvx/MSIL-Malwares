// Decompiled with JetBrains decompiler
// Type: MiniGames_Team9.LoadData
// Assembly: DependentHan, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A86A1B94-F21E-4DD9-9B87-E146CFB070D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-3c000108374c842e22e4bf480441d013e260c170c6d87defb15c322a4d136adb.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace MiniGames_Team9
{
  internal class LoadData
  {
    public List<int> scores = new List<int>();
    public List<double> times = new List<double>();

    public void LoadScore(string filename)
    {
      StreamReader streamReader = new StreamReader(filename);
      string str;
      do
      {
        str = streamReader.ReadLine();
        if (str != null)
        {
          string[] strArray = str.Split('-');
          this.scores.Add(Convert.ToInt32(strArray[0]));
          this.times.Add(Convert.ToDouble(strArray[1]));
        }
      }
      while (str != null);
      this.DoSort();
      streamReader.Close();
    }

    private void DoSort()
    {
      for (int index1 = 0; index1 < this.scores.Count - 1; ++index1)
      {
        for (int index2 = index1 + 1; index2 < this.scores.Count; ++index2)
        {
          if (this.scores[index1] > this.scores[index2])
          {
            int score = this.scores[index1];
            this.scores[index1] = this.scores[index2];
            this.scores[index2] = score;
            double time = this.times[index1];
            this.times[index1] = this.times[index2];
            this.times[index2] = time;
          }
        }
      }
    }

    private void SaveScore(string filename)
    {
      StreamWriter streamWriter = new StreamWriter(filename);
      for (int index = 0; index < this.scores.Count; ++index)
        streamWriter.WriteLine(this.scores[index].ToString() + "-" + this.times[index].ToString());
      streamWriter.Close();
    }

    public void UpdateScore(int score, double clock)
    {
      if (score > this.scores[0] || score == this.scores[0] && this.times[0] < clock)
      {
        this.scores[0] = score;
        this.times[0] = clock;
      }
      this.DoSort();
      this.SaveScore("input.txt");
    }
  }
}
