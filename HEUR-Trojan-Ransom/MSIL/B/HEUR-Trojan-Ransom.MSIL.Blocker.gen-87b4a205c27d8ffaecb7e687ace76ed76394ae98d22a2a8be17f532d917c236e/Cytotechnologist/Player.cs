// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: ObjRefSurroga, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1D36518F-5F0C-4DDD-80AA-3BF17FC6E8B1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-87b4a205c27d8ffaecb7e687ace76ed76394ae98d22a2a8be17f532d917c236e.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 1853422682;
      string str1;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 231361527)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -142225094 ^ -198788094;
            continue;
          case 2:
            num1 = (int) num2 * 194802172 ^ -1539290888;
            continue;
          case 3:
            str1 = "537461";
            num1 = (int) num2 * 1290580372 ^ 1618516401;
            continue;
          case 4:
            num1 = (int) num2 * -1745564166 ^ 260516134;
            continue;
          case 5:
            str1 = "32636E464D4A";
            num1 = (int) num2 * 170409947 ^ -1391717869;
            continue;
          case 7:
            str2 = str1;
            num1 = 1204348601;
            continue;
          case 8:
            int num3 = BaseStream == 0 ? -604393094 : (num3 = -810442512);
            num1 = num3 ^ (int) num2 * 393697869;
            continue;
          case 9:
            str1 = (string) null;
            num1 = (int) num2 * 1911904427 ^ 1128026096;
            continue;
          case 10:
            int num4 = !flag ? 191590168 : (num4 = 910678227);
            num1 = num4 ^ (int) num2 * 1605840900;
            continue;
          case 11:
            flag = BaseStream == 1;
            num1 = 863263993;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 1415382687;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 627743138)) % 4U)
        {
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -1672009803 ^ 1728857233;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = 96131769;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = -490855458;
        int index;
        int[] planningCards;
        int num2;
        int num3;
        bool flag;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ -2091672197)) % 13U)
          {
            case 0:
              num1 = -483767585;
              continue;
            case 1:
              flag = num2 > 0;
              num1 = (int) num4 * 1763311520 ^ 565984767;
              continue;
            case 2:
              int num5 = flag ? 899341700 : (num5 = 1778180565);
              num1 = num5 ^ (int) num4 * -1257481760;
              continue;
            case 3:
              num1 = (int) num4 * 636870864 ^ -2003048734;
              continue;
            case 5:
              num3 = 0;
              planningCards = this.PlanningCards;
              num1 = (int) num4 * -531522944 ^ 1768247245;
              continue;
            case 6:
              goto label_1;
            case 7:
              num2 = planningCards[index];
              num1 = -2114259887;
              continue;
            case 8:
              index = 0;
              num1 = (int) num4 * 625228833 ^ -1670233731;
              continue;
            case 9:
              ++num3;
              num1 = (int) num4 * -1603707342 ^ 1603503771;
              continue;
            case 10:
              ++index;
              num1 = (int) num4 * 2030839963 ^ -1203780153;
              continue;
            case 11:
              int num6;
              num1 = num6 = index < planningCards.Length ? -2047969182 : (num6 = -1484512152);
              continue;
            case 12:
              planningCardsCount = num3;
              num1 = (int) num4 * -1951838247 ^ -366198411;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 421628830;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1208722887)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -697115983 ^ 225741428;
            continue;
          case 2:
            num1 = (int) num2 * 569419747 ^ 525345897;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
label_1:
      int num1 = -828609651;
      int index;
      int planningCard;
      bool flag1;
      string str2;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -654363293)) % 14U)
        {
          case 0:
            str2 = str1;
            num1 = (int) num2 * 1066134865 ^ -203927700;
            continue;
          case 1:
            ++index;
            num1 = -972273819;
            continue;
          case 2:
            num1 = -925908896;
            continue;
          case 3:
            planningCard = this.PlanningCards[index];
            flag1 = planningCard == 0;
            num1 = (int) num2 * 175363714 ^ -12169171;
            continue;
          case 4:
            str1 = Player.\u202E‎‎‪⁯​⁯‏‫⁪‍⁬⁪‪​‫⁪‪⁮‮⁬‫⁯‮‭‎⁯‌‍‌‌‏‮‎‎​⁮⁮‏⁪‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -54755059;
            continue;
          case 5:
            num1 = (int) num2 * -1192511378 ^ -1062929692;
            continue;
          case 6:
            num1 = (int) num2 * -1022744989 ^ 1332082364;
            continue;
          case 7:
            int num3 = !flag2 ? 2015354267 : (num3 = 1243650655);
            num1 = num3 ^ (int) num2 * -1369047922;
            continue;
          case 8:
            index = 0;
            num1 = (int) num2 * 745840986 ^ -1888007479;
            continue;
          case 10:
            int num4 = !flag1 ? 16452089 : (num4 = 1697518540);
            num1 = num4 ^ (int) num2 * -2075592146;
            continue;
          case 11:
            num1 = (int) num2 * 1108725295 ^ 936016083;
            continue;
          case 12:
            flag2 = index < this.PlanningCards.Length;
            num1 = -1577439118;
            continue;
          case 13:
            goto label_1;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
      Player player = new Player()
      {
        Name = json["name"].Value,
        PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
        UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
      };
label_1:
      int num1 = -388160024;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -658486503)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1687578939 ^ -1710064291;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -2010153756;
      int[] numArray;
      int aIndex;
      int count;
      int[] planningCards;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2138731285)) % 11U)
        {
          case 0:
            planningCards = numArray;
            num1 = (int) num2 * -327630717 ^ -76936881;
            continue;
          case 1:
            num1 = (int) num2 * -1625576592 ^ 1754219987;
            continue;
          case 3:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -1917824689;
            continue;
          case 4:
            aIndex = 0;
            num1 = (int) num2 * 825281172 ^ -1318909005;
            continue;
          case 5:
            ++aIndex;
            num1 = (int) num2 * 1252358857 ^ -549253609;
            continue;
          case 6:
            count = json.Count;
            num1 = (int) num2 * -1831743510 ^ 507621329;
            continue;
          case 7:
            numArray = new int[count];
            num1 = (int) num2 * 1167888357 ^ 390811249;
            continue;
          case 8:
            goto label_1;
          case 9:
            flag = aIndex < count;
            num1 = -261528451;
            continue;
          case 10:
            int num3 = !flag ? 171730628 : (num3 = 61755854);
            num1 = num3 ^ (int) num2 * 1088716382;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1005525290;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -788144252)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 978909300 ^ 1016547955;
            continue;
          case 2:
            str = Player.\u206C‫​‪‌‎‭​‏⁯⁮⁮‍⁫⁭⁪⁬‍‌​⁮‍​‏‍‌⁯‪‎‌‮⁪‍⁬‫​‮⁯​‎‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 1204783051 ^ -1113692513;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u202E‎‎‪⁯​⁯‏‫⁪‍⁬⁪‪​‫⁪‪⁮‮⁬‫⁯‮‭‎⁯‌‍‌‌‏‮‎‎​⁮⁮‏⁪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206C‫​‪‌‎‭​‏⁯⁮⁮‍⁫⁭⁪⁬‍‌​⁮‍​‏‍‌⁯‪‎‌‮⁪‍⁬‫​‮⁯​‎‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
