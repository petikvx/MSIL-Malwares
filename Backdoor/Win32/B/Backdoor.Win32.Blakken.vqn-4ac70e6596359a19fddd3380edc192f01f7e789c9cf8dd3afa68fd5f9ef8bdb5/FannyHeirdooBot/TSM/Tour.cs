// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.TSM.Tour
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace FannyHeirdooBot.TSM
{
  public class Tour
  {
    public Tour(IEnumerable<Stop> stops) => this.Anchor = stops.First<Stop>();

    public IEnumerable<Tour> GenerateMutations()
    {
      // ISSUE: reference to a compiler-generated field
      int num1 = this.\u003C\u003E1__state;
label_1:
      int num2 = 1465104836;
      Stop stop;
      Stop current;
      Tour cloneWithSwap;
      bool flag;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ 427417655)) % 26U)
        {
          case 0:
            int num4;
            num2 = num4 = num1 == 1 ? 1102778550 : (num4 = 1594621264);
            continue;
          case 1:
            current = stop.Next.Next;
            num2 = 1697275419;
            continue;
          case 2:
          case 22:
            // ISSUE: reference to a compiler-generated field
            this.\u003C\u003E1__state = -1;
            num2 = 911367310;
            continue;
          case 3:
            stop = this.Anchor;
            num2 = (int) num3 * -585137243 ^ -1224625297;
            continue;
          case 4:
            flag = current != this.Anchor;
            num2 = 1403802525;
            continue;
          case 5:
            int num5;
            num2 = num5 = stop.Next != this.Anchor ? 1303763430 : (num5 = 1694796918);
            continue;
          case 6:
            num2 = (int) num3 * -426331030 ^ 854785501;
            continue;
          case 7:
            num2 = 727828143;
            continue;
          case 8:
            num2 = (int) num3 * 1734586178 ^ -1479983849;
            continue;
          case 9:
            num2 = (int) num3 * -1301204515 ^ 314917119;
            continue;
          case 11:
            goto label_18;
          case 12:
            goto label_1;
          case 13:
            int num6 = num1 != 0 ? -1873013496 : (num6 = -560856928);
            num2 = num6 ^ (int) num3 * -1980892535;
            continue;
          case 14:
          case 21:
            // ISSUE: reference to a compiler-generated field
            this.\u003C\u003E1__state = -1;
            current = current.Next;
            num2 = 286263053;
            continue;
          case 15:
            stop = (Stop) null;
            num2 = (int) num3 * -384419233 ^ 254272988;
            continue;
          case 16:
            cloneWithSwap = (Tour) null;
            num2 = (int) num3 * -1387896114 ^ -1748344093;
            continue;
          case 17:
            current = (Stop) null;
            stop = stop.Next;
            num2 = (int) num3 * -1668787739 ^ -1142252475;
            continue;
          case 18:
            cloneWithSwap = this.CloneWithSwap(stop.City, current.City);
            num2 = (int) num3 * -1388328365 ^ -607340968;
            continue;
          case 19:
            goto label_22;
          case 20:
            num2 = (int) num3 * 1930464084 ^ -523859350;
            continue;
          case 23:
            // ISSUE: reference to a compiler-generated field
            this.\u003C\u003E2__current = cloneWithSwap;
            num2 = (int) num3 * 1552119956 ^ 1811225554;
            continue;
          case 24:
            int num7 = !flag ? 1215201793 : (num7 = 1979649012);
            num2 = num7 ^ (int) num3 * -317913752;
            continue;
          case 25:
            num2 = (int) num3 * 693938853 ^ -1933064963;
            continue;
          default:
            goto label_25;
        }
      }
label_18:
      return false;
label_22:
      // ISSUE: reference to a compiler-generated field
      this.\u003C\u003E1__state = 1;
      return true;
label_25:
      return false;
    }

    public Stop Anchor { get; set; }

    public Tour CloneWithSwap(City firstCity, City secondCity)
    {
label_1:
      int num1 = 333367280;
      Stop stop1;
      Stop stop2;
      IList<Stop> stops;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1598948771)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1722134765 ^ -1254104952;
            continue;
          case 2:
            stop1 = (Stop) null;
            stop2 = (Stop) null;
            stops = this.UnconnectedClones();
            stops.Connect(true);
            num1 = (int) num2 * 1052604309 ^ 1635703696;
            continue;
          case 4:
            num1 = (int) num2 * 169377929 ^ 443928138;
            continue;
          case 5:
            num1 = (int) num2 * 863415517 ^ 1766880802;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      IEnumerator<Stop> enumerator = stops.GetEnumerator();
      try
      {
label_12:
        int num3 = Tour.\u206C⁮⁬⁯⁪‎⁬⁯⁪⁭‮⁯⁫‪⁭‍‭‬⁪‌⁯‪⁫⁫‪⁬⁪‬‍⁯‍‪​‮⁮⁯‬​‍⁮‮((IEnumerator) enumerator) ? 1738522418 : (num3 = 216891698);
        Stop current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1598948771)) % 9U)
          {
            case 0:
              num3 = 1738522418;
              continue;
            case 1:
              stop2 = current;
              num3 = (int) num4 * -2087726212 ^ -23328127;
              continue;
            case 2:
              int num5;
              num3 = num5 = current.City == secondCity ? 1060025119 : (num5 = 1390771601);
              continue;
            case 3:
              num3 = 421982718;
              continue;
            case 4:
              goto label_12;
            case 5:
              current = enumerator.Current;
              flag = current.City == firstCity;
              num3 = 144429293;
              continue;
            case 6:
              int num6 = flag ? -85350050 : (num6 = -413376813);
              num3 = num6 ^ (int) num4 * 1202216802;
              continue;
            case 8:
              stop1 = current;
              num3 = (int) num4 * 754732714 ^ -948399387;
              continue;
            default:
              goto label_23;
          }
        }
      }
      finally
      {
        if (enumerator != null)
        {
label_19:
          int num7 = 1174107770;
          while (true)
          {
            uint num8;
            switch ((num8 = (uint) (num7 ^ 1598948771)) % 3U)
            {
              case 0:
                goto label_19;
              case 2:
                Tour.\u200F​⁭‎‌⁫​‌‬‬⁯‏⁯⁪‫⁭‎⁬⁯‭⁬​‍⁯⁬⁬​‍⁭‫⁭‬‬​‭‭‍⁯​‭‮((IDisposable) enumerator);
                num7 = (int) num8 * -309905120 ^ -982928425;
                continue;
              default:
                goto label_22;
            }
          }
        }
label_22:;
      }
label_23:
      Stop next = stop1.Next;
label_24:
      int num9 = 350868250;
      Tour tour1;
      Tour tour2;
      Stop secondTo;
      while (true)
      {
        uint num10;
        switch ((num10 = (uint) (num9 ^ 1598948771)) % 8U)
        {
          case 0:
            tour2 = tour1;
            num9 = (int) num10 * -726385496 ^ 2068228390;
            continue;
          case 1:
            secondTo = stop2.Next;
            next.CanGetTo().TakeWhile<Stop>((Func<Stop, bool>) (stop => stop != secondTo)).Reverse<Stop>().Connect(false);
            num9 = (int) num10 * -1315645941 ^ -255422233;
            continue;
          case 2:
            goto label_24;
          case 3:
            tour1 = new Tour((IEnumerable<Stop>) stops);
            num9 = (int) num10 * 1159897714 ^ 301034853;
            continue;
          case 4:
            next.Next = secondTo;
            stop1.Next = stop2;
            num9 = (int) num10 * -1058308996 ^ -519468480;
            continue;
          case 5:
            num9 = (int) num10 * 889342695 ^ 1719498278;
            continue;
          case 7:
            num9 = (int) num10 * 2061718182 ^ -1175398899;
            continue;
          default:
            goto label_32;
        }
      }
label_32:
      return tour2;
    }

    public static double Distance(Stop first, Stop other)
    {
label_1:
      int num1 = -384078261;
      double num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -209374318)) % 4U)
        {
          case 0:
            num1 = (int) num3 * -576769623 ^ -1592900872;
            continue;
          case 1:
            num2 = Tour.\u202D⁬‭‎‍‏‬‏‫‎‮‌‪​⁪⁮‫‮‌‭‪​​‬‫⁯⁬‎⁫‬​‮‪‬‍⁪‭‫‫⁫‮(Tour.\u206E⁫‏‍⁭‎⁭⁮⁫⁯⁭‪⁮‮⁪‬⁪‌‪‍⁬⁮⁭​​‌‮​‭‫‮‎‏‪‎⁬‫‬⁮⁫‮(first.City.X - other.City.X, 2.0) + Tour.\u206E⁫‏‍⁭‎⁭⁮⁫⁯⁭‪⁮‮⁪‬⁪‌‪‍⁬⁮⁭​​‌‮​‭‫‮‎‏‪‎⁬‫‬⁮⁫‮(first.City.Y - other.City.Y, 2.0));
            num1 = (int) num3 * -617647038 ^ -1108601712;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return num2;
    }

    public IList<Stop> UnconnectedClones()
    {
label_1:
      int num1 = 116738747;
      IList<Stop> list;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2012343396)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            list = (IList<Stop>) this.Cycle().Select<Stop, Stop>((Func<Stop, Stop>) (stop => stop.Clone())).ToList<Stop>();
            num1 = 2034067285;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return list;
    }

    public double Cost()
    {
label_1:
      int num1 = -1283743727;
      double num2;
      double backtrackDistance;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1938933387)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num2 = this.Cycle().Aggregate<Stop, double>(0.0, (Func<double, Stop, double>) ((sum, stop) =>
            {
label_1:
              int num4 = -994141872;
              double num5;
              bool flag;
              while (true)
              {
                uint num6;
                switch ((num6 = (uint) (num4 ^ -1723623687)) % 8U)
                {
                  case 0:
                    num4 = (int) num6 * 1332881502 ^ -2017725564;
                    continue;
                  case 1:
                    flag = stop != this.Anchor;
                    num4 = (int) num6 * -827606021 ^ -631693975;
                    continue;
                  case 3:
                    int num7 = !flag ? 975725655 : (num7 = 538900208);
                    num4 = num7 ^ (int) num6 * -1786739021;
                    continue;
                  case 4:
                    goto label_1;
                  case 5:
                    backtrackDistance += stop.PriorDistance;
                    num4 = (int) num6 * 753417827 ^ -1150837287;
                    continue;
                  case 6:
                    num4 = (int) num6 * -1368108077 ^ 312466281;
                    continue;
                  case 7:
                    num5 = sum + this.CostForGrowth(backtrackDistance, stop);
                    num4 = -1043618953;
                    continue;
                  default:
                    goto label_9;
                }
              }
label_9:
              return num5;
            }));
            num1 = (int) num3 * 1181028247 ^ 2016622009;
            continue;
          case 2:
            backtrackDistance = 0.0;
            num1 = (int) num3 * -481625883 ^ -794053852;
            continue;
          case 3:
            num1 = (int) num3 * -855795046 ^ 829543576;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return num2;
    }

    private double CostForGrowth(double turnNumber, Stop stop)
    {
label_1:
      int num1 = 496009113;
      double num2;
      double num3;
      double num4;
      Stop stop1;
      bool flag1;
      bool flag2;
      double num5;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 1457474795)) % 14U)
        {
          case 0:
            flag1 = stop1 != this.Anchor;
            num1 = (int) num6 * 1886106151 ^ -1065897040;
            continue;
          case 1:
            num5 = num2 - num3 + (double) (6 - stop.Next.City.Gain) * stop.Next.NextDistance;
            num1 = 58883300;
            continue;
          case 2:
            num4 += (double) (int) (stop1.NextDistance + 0.5);
            num3 += (double) (int) ((double) stop1.City.Gain * num4);
            num1 = (int) num6 * -1468831134 ^ 177546099;
            continue;
          case 3:
            flag2 = stop != this.Anchor;
            num1 = (int) num6 * -1137922343 ^ -1184119131;
            continue;
          case 4:
            num4 = 0.0;
            stop1 = stop;
            num1 = (int) num6 * -511493638 ^ 872627285;
            continue;
          case 5:
            int num7 = flag1 ? 1661854514 : (num7 = 1760455517);
            num1 = num7 ^ (int) num6 * -953112875;
            continue;
          case 6:
            num1 = 304937874;
            continue;
          case 7:
            stop1 = stop1.Prior;
            num1 = (int) num6 * -1550704388 ^ 533338103;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num6 * -1293263311 ^ -591827162;
            continue;
          case 11:
            num1 = (int) num6 * -1034709580 ^ 347793102;
            continue;
          case 12:
            num2 = (double) STMFinder.WorldGainPerTurn * turnNumber;
            num3 = 0.0;
            num1 = (int) num6 * -1932311367 ^ 1765601094;
            continue;
          case 13:
            int num8 = !flag2 ? -1380368771 : (num8 = -311437704);
            num1 = num8 ^ (int) num6 * 937536095;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return num5;
    }

    public IEnumerable<Stop> Cycle() => this.Anchor.CanGetTo();

    public override string ToString()
    {
label_1:
      int num1 = -1743183774;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -360711853)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            str2 = Tour.\u206B‬⁮‫‭‭‍⁮⁬​⁯‭‎‭‭‬⁫‫‫‪‪⁪‍‮‌‮⁫⁫‬‪⁪‫‫⁫‍​⁬⁮‫‍‮("Cost: {0}, Path:{1}", (object) this.Cost(), (object) str1);
            num1 = (int) num2 * -1711166888 ^ 1074787459;
            continue;
          case 2:
            // ISSUE: reference to a compiler-generated method
            str1 = Tour.\u200F‍‮⁯⁯‌‮⁮‪⁯‌⁬‏‏‬⁫‍⁪‭⁯⁬⁭‫‫⁫‪‮‌‭⁭⁫‪‪‬‮‍⁯⁫‏‬‮("->", this.Cycle().Select<Stop, string>((Func<Stop, string>) (stop => Tour.\u003C\u003Ec.\u206F‎⁮‏⁯⁬‬‍‫‎⁮⁮‏⁫‫⁪‬‪‮‭‬‍⁯⁯‮​‌⁭‮‮‬‪‍‎⁫⁪⁫⁮⁮⁪‮((object) stop))).ToArray<string>());
            num1 = -1211535230;
            continue;
          case 4:
            num1 = (int) num2 * 1488960824 ^ 517524647;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return str2;
    }

    static bool \u206C⁮⁬⁯⁪‎⁬⁯⁪⁭‮⁯⁫‪⁭‍‭‬⁪‌⁯‪⁫⁫‪⁬⁪‬‍⁯‍‪​‮⁮⁯‬​‍⁮‮([In] IEnumerator obj0) => obj0.MoveNext();

    static void \u200F​⁭‎‌⁫​‌‬‬⁯‏⁯⁪‫⁭‎⁬⁯‭⁬​‍⁯⁬⁬​‍⁭‫⁭‬‬​‭‭‍⁯​‭‮([In] IDisposable obj0) => obj0.Dispose();

    static double \u206E⁫‏‍⁭‎⁭⁮⁫⁯⁭‪⁮‮⁪‬⁪‌‪‍⁬⁮⁭​​‌‮​‭‫‮‎‏‪‎⁬‫‬⁮⁫‮([In] double obj0, [In] double obj1) => Math.Pow(obj0, obj1);

    static double \u202D⁬‭‎‍‏‬‏‫‎‮‌‪​⁪⁮‫‮‌‭‪​​‬‫⁯⁬‎⁫‬​‮‪‬‍⁪‭‫‫⁫‮([In] double obj0) => Math.Sqrt(obj0);

    static string \u200F‍‮⁯⁯‌‮⁮‪⁯‌⁬‏‏‬⁫‍⁪‭⁯⁬⁭‫‫⁫‪‮‌‭⁭⁫‪‪‬‮‍⁯⁫‏‬‮([In] string obj0, [In] string[] obj1) => string.Join(obj0, obj1);

    static string \u206B‬⁮‫‭‭‍⁮⁬​⁯‭‎‭‭‬⁫‫‫‪‪⁪‍‮‌‮⁫⁫‬‪⁪‫‫⁫‍​⁬⁮‫‍‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2)
    {
      return string.Format(obj0, obj1, obj2);
    }
  }
}
