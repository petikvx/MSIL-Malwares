// Decompiled with JetBrains decompiler
// Type: 669735620265.INotificationService
// Assembly: 308586033544, Version=1.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: CD78F8E3-E5F9-41CF-8142-5EDBF93F1FF3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-18bddfc40d40212cb2c9881929e98eb6ea1c5b6c4bd93f9aaeb774311da4a6c9.exe

using \u003656569835584;
using System;
using System.Threading.Tasks;

namespace \u003669735620265
{
  internal interface INotificationService
  {
    void Initialize();

    void Reset();

    bool IsInitialized { get; }

    void Notify(\u003691947407247 notification, object data);

    void Notify(object sender, \u003691947407247 notification, object data);

    Task<object> ExecuteActionAndWaitAsync(\u003691947407247 notification, Action action);

    Task<object> ExecuteActionAndWaitAsync(
      object sender,
      \u003691947407247 notification,
      TimeSpan timeout,
      Action action);

    Task<object> ExecuteTaskAndWaitAsync(\u003691947407247 notification, Func<Task> task);

    Task<object> ExecuteTaskAndWaitAsync(
      object sender,
      \u003691947407247 notification,
      TimeSpan timeout,
      Func<Task> task);

    Task<T> WaitAsync<T>(\u003691947407247 notification);

    Task<T> WaitAsync<T>(object sender, \u003691947407247 notification, TimeSpan timeout);

    object WaitFor(\u003691947407247 notification);

    object WaitFor(object sender, \u003691947407247 notification);

    object WaitFor(object sender, \u003691947407247 notification, TimeSpan timeout);

    object WaitFor(\u003691947407247 notification, TimeSpan timeout);
  }
}
