// Decompiled with JetBrains decompiler
// Type: Microsoft.MediaCenter.TV.Tuners.Tuner
// Assembly: Microsoft.MediaCenter.TV.Tuners.Interop, Version=6.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 4545DFBD-7834-4511-B0E8-46F2D6BF39B8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Virus.Win32.Xpaj.gena-cd1c6eac0092a3981efe696f4cd6bf740246c6dcb9698d78918623e86d74734f.exe

using ATL;
using Microsoft.MediaCenter.TV.Tuning;
using msclr;
using System;
using System.Diagnostics;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace Microsoft.MediaCenter.TV.Tuners
{
  public class Tuner : MTASafeComWrapper
  {
    private string _profile;
    private static int s_nextInstanceLabel = 0;
    private int _instanceLabel;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs2<Guid, Microsoft.MediaCenter.TV.Tuning.ESEvent>> ESEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<string>> ProfileChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<bool>> UsageChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs2<uint, uint>> EncoderSettingsChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<TuneRequest>> TuningChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<int>> ErrorEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs2<ushort, ushort>> StateChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<bool>> ReadyEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<bool>> CertificateEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<bool>> EncryptionEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<EventArgs> WriteFailureEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<int>> ContentSIIDChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs3<RecorderStreamType, RecorderBitRateChangeType, ulong>> BitRateChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<bool>> ChannelAvailableEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<EventArgs> StatusChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs6<EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes, EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes>> RatingChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<ProtType>> ProtectionTypeChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs2<uint, EasPriorityType>> EasReceivedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs2<bool, uint>> MMIReceivedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<CasCardStatusType>> CasCardStatusChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<DrmPairingStatus>> DrmPairingStatusChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<CasEntitlementType>> CasEntitlementChangedEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<EventArgs> WriteFailureClearEvent;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Tuner.Evt<Tuner.TunerNotificationEventArgs1<SignalAndServiceStatusState>> SignalAndServiceStatusChangedEvent;
    private SafeRecorder m_Recorder;
    private uint m_dwId;
    private Guid m_GuidId;
    private string m_DeviceName;
    private string m_RootDeviceName;
    private string m_RootDeviceNameInstanceId;
    private bool? m_bConfigured;
    private string m_FriendlyName;
    private uint m_dwViewOrder;
    private bool m_bPrefView;
    private uint m_dwRecordOrder;
    private bool m_bPrefRecord;
    private string[] m_ConfiguredTSNames;
    private int? m_State;
    private TuneRequest m_CurrentTR;
    private int? m_SIID;
    private int? m_hr;
    private string[] m_ClientIDs;
    private bool? m_Busy;
    private TunerType? m_TunerType;
    private uint m_TVFormats;
    private uint m_NumAuxInputs;
    private Guid[] m_HWSupportedNetworkTypes;
    private ProtType? m_CPType;
    private uint? m_EncoderMin;
    private uint m_EncoderMax;
    private uint m_EncoderDelta;
    private TuneRequest m_ConfiguredDefaultTR;
    private bool? m_bUseSTB;
    private byte[] m_IRControlBlob;
    private RecorderUse? m_Use;
    private bool? m_DoesDiseqC;
    private bool? m_SupportsConditionalAccess;
    private Guid m_GuideTypeGuid;
    private bool? m_SupportsPBDAScanning;
    private bool? m_PassiveClientsExist;
    private bool? m_IsPbda;
    private bool? m_IsMandatoryParentalControl;
    private string m_PbdaId;
    private string m_BcasId;
    private string m_SupportedLanguages;
    private uint m_Strength;
    private TuneRequest m_EASTR;
    private uint m_StartTime;
    private ushort m_Duration;
    private string m_ActivationNature;
    private string m_AlertMessage;
    private CasCardStatusType m_CasStatus;
    private CasCardAssociationType m_CasAssoc;
    private DrmPairingStatus m_DrmStatus;
    private uint m_DialogRequest;
    private byte[] m_CaptureToken;

    private unsafe CComPtr\u003CIRecorderInfo\u003E* TPGetRecInfoPtr(
      [In] CComPtr\u003CIRecorderInfo\u003E* obj0)
    {
      uint num1 = 0;
      CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo1;
      CComPtr\u003CIRecorderInfo\u003E* ptrIrecorderInfo2 = SafeComWrapper.GetNativePtr\u003CIRecorderInfo\u003E(&ptrIrecorderInfo1, (SafeComWrapper) this);
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          \u003CModule\u003E.ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bctor\u007D(obj0, ptrIrecorderInfo2);
          num1 = 1U;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo1);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo1);
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }

    private unsafe CComPtr\u003CIRecorderEx2\u003E* TPGetRecorderPtr(
      [In] CComPtr\u003CIRecorderEx2\u003E* obj0)
    {
      uint num1 = 0;
      SafeRecorder recorder = this.m_Recorder;
      uint num2;
      if (recorder != null && !recorder.IsInvalid)
      {
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        CComPtr\u003CIRecorderEx2\u003E* nativePtrIrecorderEx2 = SafeComWrapper.GetNativePtr\u003CIRecorderEx2\u003E(&ccomPtrIrecorderEx2, (SafeComWrapper) this.m_Recorder);
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            \u003CModule\u003E.ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bctor\u007D(obj0, nativePtrIrecorderEx2);
            num1 = 1U;
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
          }
          \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
          return obj0;
        }
        __fault
        {
          if (((int) num1 & 1) != 0)
          {
            num2 = num1 & 4294967294U;
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
          }
        }
      }
      else
      {
        *(int*) obj0 = 0;
        // ISSUE: fault handler
        try
        {
          num1 = 1U;
          return obj0;
        }
        __fault
        {
          if (((int) num1 & 1) != 0)
          {
            num2 = num1 & 4294967294U;
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
          }
        }
      }
    }

    private unsafe void TPGetIdentityInfo()
    {
      CComBSTR ccomBstr1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr1 = 0;
      // ISSUE: fault handler
      try
      {
        CComBSTR ccomBstr2;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomBstr2 = 0;
        // ISSUE: fault handler
        try
        {
          CComBSTR ccomBstr3;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref ccomBstr3 = 0;
          // ISSUE: fault handler
          try
          {
            CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
            CComPtr\u003CIRecorderInfo\u003E* recInfoPtr = this.TPGetRecInfoPtr(&ptrIrecorderInfo);
            uint num1;
            _GUID guid;
            // ISSUE: fault handler
            try
            {
              int num2 = *(int*) recInfoPtr;
              int num3 = num2;
              ref uint local1 = ref num1;
              ref _GUID local2 = ref guid;
              ref CComBSTR local3 = ref ccomBstr1;
              ref CComBSTR local4 = ref ccomBstr2;
              ref CComBSTR local5 = ref ccomBstr3;
              // ISSUE: cast to a function pointer type
              // ISSUE: function pointer call
              MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint*, _GUID*, ushort**, ushort**, ushort**)>) *(int*) (*(int*) num2 + 56))((ushort**) num3, (ushort**) ref local1, (ushort**) ref local2, (_GUID*) ref local3, (uint*) ref local4, (IntPtr) ref local5));
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
            }
            \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
            @lock lock1 = new @lock(this.m_Lock);
            @lock lock2;
            // ISSUE: fault handler
            try
            {
              lock2 = lock1;
              this.m_dwId = num1;
              this.m_GuidId = *(Guid*) (int) &guid;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.m_DeviceName = ^(int&) ref ccomBstr1 == 0 ? (string) null : new string((char*) ^(int&) ref ccomBstr1);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.m_RootDeviceName = ^(int&) ref ccomBstr2 == 0 ? (string) null : new string((char*) ^(int&) ref ccomBstr2);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.m_RootDeviceNameInstanceId = ^(int&) ref ccomBstr3 == 0 ? (string) null : new string((char*) ^(int&) ref ccomBstr3);
            }
            __fault
            {
              lock2.Dispose();
            }
            lock2.Dispose();
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr3);
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr3);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr2);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr2);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr1);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr1);
    }

    private unsafe void TPGetConfigInfo()
    {
      CComBSTR ccomBstr;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr = 0;
      // ISSUE: fault handler
      try
      {
        CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
        CComPtr\u003CIRecorderInfo\u003E* recInfoPtr = this.TPGetRecInfoPtr(&ptrIrecorderInfo);
        uint num1;
        short num2;
        uint num3;
        short num4;
        short num5;
        // ISSUE: fault handler
        try
        {
          int num6 = *(int*) recInfoPtr;
          int num7 = num6;
          ref CComBSTR local1 = ref ccomBstr;
          ref uint local2 = ref num1;
          ref short local3 = ref num2;
          ref uint local4 = ref num3;
          ref short local5 = ref num4;
          ref short local6 = ref num5;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ushort**, uint*, short*, uint*, short*, short*)>) *(int*) (*(int*) num6 + 32))((short*) num7, (short*) ref local1, (uint*) ref local2, (short*) ref local3, (uint*) ref local4, (ushort**) ref local5, (IntPtr) ref local6));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        // ISSUE: fault handler
        try
        {
          lock2 = lock1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.m_FriendlyName = ^(int&) ref ccomBstr == 0 ? (string) null : new string((char*) ^(int&) ref ccomBstr);
          this.m_dwViewOrder = num1;
          this.m_bPrefView = num2 == (short) -1;
          this.m_dwRecordOrder = num3;
          this.m_bPrefRecord = num4 == (short) -1;
          this.m_bConfigured = (bool?) (num5 == (short) -1);
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
    }

    private void GetIdentity()
    {
      dv0 dv0 = new dv0(this.TPGetIdentityInfo);
      try
      {
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(dv0.BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::GetIdentity");
      }
      catch (Exception ex)
      {
      }
    }

    private void GetConfigInfo()
    {
      dv0 dv0 = new dv0(this.TPGetConfigInfo);
      try
      {
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(dv0.BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::GetConfigInfo");
      }
      catch (Exception ex)
      {
      }
    }

    private unsafe void TPGetConfiguredTuningSpaceNames()
    {
      tagSAFEARRAY* tagSafearrayPtr = (tagSAFEARRAY*) 0;
      CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
      CComPtr\u003CIRecorderInfo\u003E* recInfoPtr = this.TPGetRecInfoPtr(&ptrIrecorderInfo);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recInfoPtr;
        int num2 = num1;
        ref tagSAFEARRAY* local = ref tagSafearrayPtr;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, tagSAFEARRAY**)>) *(int*) (*(int*) num1 + 36))((tagSAFEARRAY**) num2, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      string[] strArray = (string[]) null;
      if ((IntPtr) tagSafearrayPtr != IntPtr.Zero)
        strArray = InteropHelper.SafeArrayToStringArray(&tagSafearrayPtr);
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_ConfiguredTSNames = strArray == null ? new string[0] : strArray;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    private unsafe void TPGetState()
    {
      int num1 = 0;
      CComPtr\u003CITuneRequest\u003E ccomPtrItuneRequest;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomPtrItuneRequest = 0;
      // ISSUE: fault handler
      try
      {
        CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
        CComPtr\u003CIRecorderInfo\u003E* recInfoPtr = this.TPGetRecInfoPtr(&ptrIrecorderInfo);
        int num2;
        int num3;
        int hr;
        // ISSUE: fault handler
        try
        {
          int num4 = *(int*) recInfoPtr;
          int num5 = num4;
          ref CComPtr\u003CITuneRequest\u003E local1 = ref ccomPtrItuneRequest;
          ref int local2 = ref num2;
          ref int local3 = ref num3;
          ref int local4 = ref num1;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          hr = __calli((__FnPtr<int (IntPtr, ITuneRequest**, int*, int*, int*)>) *(int*) (*(int*) num4 + 40))((int*) num5, (int*) ref local1, (int*) ref local2, (ITuneRequest**) ref local3, (IntPtr) ref local4);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
        if (hr < 0 && num1 >= 0)
          MarshalHelper.ComException(hr);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        TuneRequest requestStructIunknown = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalNativeToManagedNoCleanup\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequestMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cstruct\u0020IUnknown\u0020\u002A\u003E((IUnknown*) ^(int&) ref ccomPtrItuneRequest);
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        // ISSUE: fault handler
        try
        {
          lock2 = lock1;
          this.m_hr = (int?) num1;
          this.m_State = (int?) num2;
          this.m_SIID = (int?) num3;
          this.m_CurrentTR = requestStructIunknown;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrItuneRequest);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITuneRequest\u003E*) &ccomPtrItuneRequest);
    }

    private unsafe void TPGetClientIDs()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_ClientIDs = new string[0];
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      tagSAFEARRAY* tagSafearrayPtr = (tagSAFEARRAY*) 0;
      CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
      CComPtr\u003CIRecorderInfo\u003E* recInfoPtr = this.TPGetRecInfoPtr(&ptrIrecorderInfo);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recInfoPtr;
        int num2 = num1;
        ref tagSAFEARRAY* local = ref tagSafearrayPtr;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, tagSAFEARRAY**)>) *(int*) (*(int*) num1 + 48))((tagSAFEARRAY**) num2, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      string[] strArray = (string[]) null;
      if ((IntPtr) tagSafearrayPtr != IntPtr.Zero)
        strArray = InteropHelper.SafeArrayToStringArray(&tagSafearrayPtr);
      @lock lock3 = new @lock(this.m_Lock);
      @lock lock4;
      // ISSUE: fault handler
      try
      {
        lock4 = lock3;
        this.m_ClientIDs = strArray == null ? new string[0] : strArray;
      }
      __fault
      {
        lock4.Dispose();
      }
      lock4.Dispose();
    }

    private unsafe void TPGetBusy()
    {
      CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
      CComPtr\u003CIRecorderInfo\u003E* recInfoPtr = this.TPGetRecInfoPtr(&ptrIrecorderInfo);
      short num1;
      // ISSUE: fault handler
      try
      {
        int num2 = *(int*) recInfoPtr;
        int num3 = num2;
        ref short local = ref num1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, short*)>) *(int*) (*(int*) num2 + 44))((short*) num3, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_Busy = (bool?) (num1 == (short) -1);
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    private unsafe void TPGetCapabilities()
    {
      CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
      CComPtr\u003CIRecorderInfo\u003E* recInfoPtr = this.TPGetRecInfoPtr(&ptrIrecorderInfo);
      global::TunerType tunerType;
      uint num1;
      uint num2;
      // ISSUE: fault handler
      try
      {
        int num3 = *(int*) recInfoPtr;
        int num4 = num3;
        ref global::TunerType local1 = ref tunerType;
        ref uint local2 = ref num1;
        ref uint local3 = ref num2;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, global::TunerType*, uint*, uint*)>) *(int*) (*(int*) num3 + 52))((uint*) num4, (uint*) ref local1, (global::TunerType*) ref local2, (IntPtr) ref local3));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_TunerType = (TunerType?) (TunerType) tunerType;
        this.m_TVFormats = num1;
        this.m_NumAuxInputs = num2;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    private unsafe void TPOpenMedia(TuneRequest tr)
    {
      CComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E obj;
      \u003CModule\u003E.ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bctor\u007D(&obj, \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalManagedToNative\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequestMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cstruct\u0020IUnknown\u0020\u002A\u003E(tr));
      // ISSUE: fault handler
      try
      {
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
        // ISSUE: fault handler
        try
        {
          int num1 = *(int*) recorderPtr;
          int num2 = num1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num3 = ^(int&) ref obj;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ITuneRequest*)>) *(int*) (*(int*) num1 + 16))((ITuneRequest*) num2, (IntPtr) num3));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        // ISSUE: fault handler
        try
        {
          lock2 = lock1;
          ((IDisposable) this.m_CurrentTR)?.Dispose();
          this.m_CurrentTR = (TuneRequest) null;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bdtor\u007D), (void*) &obj);
      }
      \u003CModule\u003E.ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bdtor\u007D(&obj);
    }

    private unsafe void TPCloseMedia()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num = *(int*) recorderPtr;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr)>) *(int*) (*(int*) num + 20))((IntPtr) num));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    }

    [return: MarshalAs(UnmanagedType.U1)]
    private unsafe bool TPValidateTuneRequest(TuneRequest tr)
    {
      CComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E obj;
      \u003CModule\u003E.ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bctor\u007D(&obj, \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalManagedToNative\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequestMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cstruct\u0020IUnknown\u0020\u002A\u003E(tr));
      bool flag;
      // ISSUE: fault handler
      try
      {
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
        short num1;
        // ISSUE: fault handler
        try
        {
          int num2 = *(int*) recorderPtr;
          int num3 = num2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num4 = ^(int&) ref obj;
          ref short local = ref num1;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ITuneRequest*, short*)>) *(int*) (*(int*) num2 + 24))((short*) num3, (ITuneRequest*) num4, (IntPtr) ref local));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
        flag = num1 == (short) -1;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bdtor\u007D), (void*) &obj);
      }
      \u003CModule\u003E.ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bdtor\u007D(&obj);
      return flag;
    }

    private unsafe string TPGetProfile()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      ushort* numPtr;
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        ref ushort* local = ref numPtr;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ushort**)>) *(int*) (*(int*) num1 + 28))((ushort**) num2, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      string profile = (string) null;
      if ((IntPtr) numPtr != IntPtr.Zero)
        profile = new string((char*) numPtr);
      \u003CModule\u003E.CoTaskMemFree((void*) numPtr);
      return profile;
    }

    private unsafe void TPSetContentSIID(int SIID)
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        int num3 = SIID;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, int)>) *(int*) (*(int*) num1 + 36))(num2, (IntPtr) num3));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_SIID = (int?) SIID;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    private unsafe void TPStop()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num = *(int*) recorderPtr;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr)>) *(int*) (*(int*) num + 40))((IntPtr) num));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    }

    private unsafe void TPRecord([MarshalAs(UnmanagedType.U1)] bool bAsync)
    {
      int num1 = -1;
      if (!bAsync)
        num1 = ~num1;
      short num2 = (short) num1;
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num3 = *(int*) recorderPtr;
        int num4 = num3;
        int num5 = (int) num2;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, short)>) *(int*) (*(int*) num3 + 44))((short) num4, (IntPtr) num5));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    }

    private unsafe void TPRecordEx([MarshalAs(UnmanagedType.U1)] bool bOn, uint dwQuality)
    {
      int num1 = -1;
      if (!bOn)
        num1 = ~num1;
      short num2 = (short) num1;
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num3 = *(int*) recorderPtr;
        int num4 = num3;
        int num5 = (int) num2;
        int num6 = (int) dwQuality;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, short, uint)>) *(int*) (*(int*) num3 + 48))((uint) num4, (short) num5, (IntPtr) num6));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    }

    private unsafe void TPPause()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num = *(int*) recorderPtr;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr)>) *(int*) (*(int*) num + 52))((IntPtr) num));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    }

    private unsafe void TPSAP([MarshalAs(UnmanagedType.U1)] bool bOn)
    {
      int num1 = -1;
      if (!bOn)
        num1 = ~num1;
      short num2 = (short) num1;
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num3 = *(int*) recorderPtr;
        int num4 = num3;
        int num5 = (int) num2;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, short)>) *(int*) (*(int*) num3 + 56))((short) num4, (IntPtr) num5));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    }

    [return: MarshalAs(UnmanagedType.U1)]
    private unsafe bool TPChannelAvailable(TuneRequest tr)
    {
      CComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E obj;
      \u003CModule\u003E.ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bctor\u007D(&obj, \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalManagedToNative\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequestMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cstruct\u0020IUnknown\u0020\u002A\u003E(tr));
      bool flag;
      // ISSUE: fault handler
      try
      {
        uint num1 = 0;
        short num2 = 0;
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
        // ISSUE: fault handler
        try
        {
          int num3 = *(int*) recorderPtr;
          int num4 = num3;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num5 = ^(int&) ref obj;
          ref uint local1 = ref num1;
          ref short local2 = ref num2;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ITuneRequest*, uint*, short*)>) *(int*) (*(int*) num3 + 64))((short*) num4, (uint*) num5, (ITuneRequest*) ref local1, (IntPtr) ref local2));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        // ISSUE: fault handler
        try
        {
          lock2 = lock1;
          this.m_Strength = num1;
          flag = num2 == (short) -1;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bdtor\u007D), (void*) &obj);
      }
      \u003CModule\u003E.ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bdtor\u007D(&obj);
      return flag;
    }

    private unsafe void TPSetMaxVideoEncoderQuality(uint dwQuality)
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        int num3 = (int) dwQuality;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint)>) *(int*) (*(int*) num1 + 68))((uint) num2, (IntPtr) num3));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    }

    private unsafe void TPSetRecorderConfigEx(
      TuneRequest tr,
      [MarshalAs(UnmanagedType.U1)] bool useSTB,
      byte[] IRBlob,
      string name,
      uint viewOrder,
      uint recordOrder,
      [MarshalAs(UnmanagedType.U1)] bool prefView,
      [MarshalAs(UnmanagedType.U1)] bool prefRecord,
      [MarshalAs(UnmanagedType.U1)] bool configured,
      string[] configuredTSNames)
    {
      CComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E obj;
      \u003CModule\u003E.ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bctor\u007D(&obj, \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalManagedToNative\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequestMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cstruct\u0020IUnknown\u0020\u002A\u003E(tr));
      // ISSUE: fault handler
      try
      {
        CComBSTR ccomBstr1;
        \u003CModule\u003E.ATL\u002ECComBSTR\u002E\u007Bctor\u007D(&ccomBstr1);
        // ISSUE: fault handler
        try
        {
          if (IRBlob != null)
            InteropHelper.ByteArrayToBSTR(\u003CModule\u003E.ATL\u002ECComBSTR\u002E\u0026(&ccomBstr1), IRBlob);
          CComBSTR ccomBstr2;
          \u003CModule\u003E.ATL\u002ECComBSTR\u002E\u007Bctor\u007D(&ccomBstr2);
          // ISSUE: fault handler
          try
          {
            if (name != (string) null)
            {
              IntPtr bstr = Marshal.StringToBSTR(name);
              \u003CModule\u003E.ATL\u002ECComBSTR\u002EAttach(&ccomBstr2, (ushort*) bstr.ToPointer());
            }
            tagSAFEARRAY* tagSafearrayPtr1 = (tagSAFEARRAY*) 0;
            if (configuredTSNames != null)
              InteropHelper.StringArrayToSafeArray(&tagSafearrayPtr1, configuredTSNames);
            int num1 = -1;
            if (!configured)
              num1 = ~num1;
            short num2 = (short) num1;
            int num3 = -1;
            if (!prefRecord)
              num3 = ~num3;
            short num4 = (short) num3;
            int num5 = -1;
            if (!prefView)
              num5 = ~num5;
            short num6 = (short) num5;
            int num7 = -1;
            if (!useSTB)
              num7 = ~num7;
            short num8 = (short) num7;
            CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
            CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
            // ISSUE: fault handler
            try
            {
              _NoAddRefReleaseOnCComPtr\u003CIRecorderEx2\u003E* ccomPtrIrecorderEx2Ptr1 = \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u002D\u003E((CComPtrBase\u003CIRecorderEx2\u003E*) recorderPtr);
              _NoAddRefReleaseOnCComPtr\u003CIRecorderEx2\u003E* ccomPtrIrecorderEx2Ptr2 = ccomPtrIrecorderEx2Ptr1;
              ITuneRequest* ituneRequestPtr = \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITuneRequest\u003E\u002E\u002EPAUITuneRequest\u0040\u0040((CComPtrBase\u003CITuneRequest\u003E*) &obj);
              int num9 = (int) num8;
              ushort* numPtr1 = \u003CModule\u003E.ATL\u002ECComBSTR\u002E\u002EPAG(&ccomBstr1);
              ushort* numPtr2 = \u003CModule\u003E.ATL\u002ECComBSTR\u002E\u002EPAG(&ccomBstr2);
              int num10 = (int) viewOrder;
              int num11 = (int) recordOrder;
              int num12 = (int) num6;
              int num13 = (int) num4;
              int num14 = (int) num2;
              tagSAFEARRAY* tagSafearrayPtr2 = tagSafearrayPtr1;
              // ISSUE: cast to a function pointer type
              // ISSUE: function pointer call
              MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ITuneRequest*, short, ushort*, ushort*, uint, uint, short, short, short, tagSAFEARRAY*)>) *(int*) (*(int*) ccomPtrIrecorderEx2Ptr1 + 128))((tagSAFEARRAY*) ccomPtrIrecorderEx2Ptr2, (short) ituneRequestPtr, (short) num9, (short) numPtr1, (uint) numPtr2, (uint) num10, (ushort*) num11, (ushort*) num12, (short) num13, (ITuneRequest*) num14, (IntPtr) tagSafearrayPtr2));
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
            }
            \u003CModule\u003E.ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D(&ccomPtrIrecorderEx2);
            MarshalHelper.ComException(\u003CModule\u003E.SafeArrayDestroy(tagSafearrayPtr1));
            @lock lock1 = new @lock(this.m_Lock);
            @lock lock2;
            // ISSUE: fault handler
            try
            {
              lock2 = lock1;
              ((IDisposable) this.m_ConfiguredDefaultTR)?.Dispose();
              this.m_ConfiguredDefaultTR = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E(tr);
              this.m_bUseSTB = (bool?) useSTB;
              this.m_IRControlBlob = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u003E(IRBlob);
              this.m_FriendlyName = name;
              this.m_dwViewOrder = viewOrder;
              this.m_dwRecordOrder = recordOrder;
              this.m_bPrefView = prefView;
              this.m_bPrefRecord = prefRecord;
              this.m_bConfigured = (bool?) configured;
              this.m_ConfiguredTSNames = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u0020\u003E\u005E\u003E(configuredTSNames);
            }
            __fault
            {
              lock2.Dispose();
            }
            lock2.Dispose();
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr2);
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr2);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr1);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr1);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bdtor\u007D), (void*) &obj);
      }
      \u003CModule\u003E.ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bdtor\u007D(&obj);
    }

    private unsafe void TPGetRecorderConfig()
    {
      CComPtr\u003CITuneRequest\u003E ccomPtrItuneRequest;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomPtrItuneRequest = 0;
      // ISSUE: fault handler
      try
      {
        CComBSTR ccomBstr1;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomBstr1 = 0;
        // ISSUE: fault handler
        try
        {
          CComBSTR ccomBstr2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref ccomBstr2 = 0;
          // ISSUE: fault handler
          try
          {
            CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
            CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
            short num1;
            uint num2;
            uint num3;
            short num4;
            short num5;
            short num6;
            // ISSUE: fault handler
            try
            {
              int num7 = *(int*) recorderPtr;
              int num8 = num7;
              ref CComPtr\u003CITuneRequest\u003E local1 = ref ccomPtrItuneRequest;
              ref short local2 = ref num1;
              ref CComBSTR local3 = ref ccomBstr1;
              ref CComBSTR local4 = ref ccomBstr2;
              ref uint local5 = ref num2;
              ref uint local6 = ref num3;
              ref short local7 = ref num4;
              ref short local8 = ref num5;
              ref short local9 = ref num6;
              // ISSUE: cast to a function pointer type
              // ISSUE: function pointer call
              MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ITuneRequest**, short*, ushort**, ushort**, uint*, uint*, short*, short*, short*)>) *(int*) (*(int*) num7 + 76))((short*) num8, (short*) ref local1, (short*) ref local2, (uint*) ref local3, (uint*) ref local4, (ushort**) ref local5, (ushort**) ref local6, (short*) ref local7, (ITuneRequest**) ref local8, (IntPtr) ref local9));
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
            }
            \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            TuneRequest requestStructIunknown = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalNativeToManagedNoCleanup\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequestMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cstruct\u0020IUnknown\u0020\u002A\u003E((IUnknown*) ^(int&) ref ccomPtrItuneRequest);
            byte[] @ref = (byte[]) null;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (^(int&) ref ccomBstr1 != 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              @ref = InteropHelper.BSTRToByteArray((ushort*) ^(int&) ref ccomBstr1);
            }
            string str = (string) null;
            if (\u003CModule\u003E.ATL\u002ECComBSTR\u002E\u0021\u003D(&ccomBstr2, 0))
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              str = new string((char*) ^(int&) ref ccomBstr2);
            }
            @lock lock1 = new @lock(this.m_Lock);
            @lock lock2;
            // ISSUE: fault handler
            try
            {
              lock2 = lock1;
              this.m_ConfiguredDefaultTR = requestStructIunknown;
              this.m_bUseSTB = (bool?) (num1 == (short) -1);
              this.m_IRControlBlob = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u003E(@ref);
              this.m_FriendlyName = str;
              this.m_dwViewOrder = num2;
              this.m_dwRecordOrder = num3;
              this.m_bPrefView = num4 == (short) -1;
              this.m_bPrefRecord = num5 == (short) -1;
              this.m_bConfigured = (bool?) (num6 == (short) -1);
            }
            __fault
            {
              lock2.Dispose();
            }
            lock2.Dispose();
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr2);
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr2);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr1);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr1);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrItuneRequest);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITuneRequest\u003E*) &ccomPtrItuneRequest);
    }

    private unsafe ulong TPGetBitRate(RecorderStreamType rst)
    {
      ulong bitRate = 0;
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        int num3 = (int) rst;
        ref ulong local = ref bitRate;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, global::RecorderStreamType, ulong*)>) *(int*) (*(int*) num1 + 88))((ulong*) num2, (global::RecorderStreamType) num3, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      return bitRate;
    }

    private unsafe RecorderUse TPGetRecorderUse()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      global::RecorderUse recorderUse;
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        ref global::RecorderUse local = ref recorderUse;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, global::RecorderUse*)>) *(int*) (*(int*) num1 + 92))((global::RecorderUse*) num2, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      return (RecorderUse) recorderUse;
    }

    private unsafe int TPGetSignalStrength()
    {
      int signalStrength = 0;
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        ref int local = ref signalStrength;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, int*)>) *(int*) (*(int*) num1 + 96))((int*) num2, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      return signalStrength;
    }

    private unsafe string TPGetMMIMessage(byte dialogNumber)
    {
      CComBSTR ccomBstr;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr = 0;
      string mmiMessage1;
      // ISSUE: fault handler
      try
      {
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
        // ISSUE: fault handler
        try
        {
          int num1 = *(int*) recorderPtr;
          int num2 = num1;
          int num3 = (int) dialogNumber;
          ref CComBSTR local = ref ccomBstr;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, byte, ushort**)>) *(int*) (*(int*) num1 + 100))((ushort**) num2, (byte) num3, (IntPtr) ref local));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ref ccomBstr != 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          mmiMessage1 = new string((char*) ^(int&) ref ccomBstr);
        }
        else
          goto label_8;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
      return mmiMessage1;
label_8:
      string mmiMessage2;
      // ISSUE: fault handler
      try
      {
        mmiMessage2 = (string) null;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
      return mmiMessage2;
    }

    private unsafe void TPNotifyMMIClosed(byte dialogNumber, MMICloseReasonType closeReason)
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        int num3 = (int) dialogNumber;
        int num4 = (int) closeReason;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, byte, global::MMICloseReasonType)>) *(int*) (*(int*) num1 + 104))((global::MMICloseReasonType) num2, (byte) num3, (IntPtr) num4));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    }

    private unsafe void TPGetEASEventInfo(uint eventID, string ISO639Code)
    {
      CComPtr\u003CITuneRequest\u003E ccomPtrItuneRequest;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomPtrItuneRequest = 0;
      // ISSUE: fault handler
      try
      {
        uint num1 = 0;
        ushort num2 = 0;
        CComBSTR ccomBstr1;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomBstr1 = 0;
        // ISSUE: fault handler
        try
        {
          if (ISO639Code != (string) null)
          {
            ushort* pointer = (ushort*) Marshal.StringToBSTR(ISO639Code).ToPointer();
            if (IntPtr.Zero != (IntPtr) pointer)
            {
              \u003CModule\u003E.SysFreeString((ushort*) 0);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(int&) ref ccomBstr1 = (int) pointer;
            }
          }
          CComBSTR ccomBstr2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref ccomBstr2 = 0;
          // ISSUE: fault handler
          try
          {
            CComBSTR ccomBstr3;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ref ccomBstr3 = 0;
            // ISSUE: fault handler
            try
            {
              CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
              CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
              // ISSUE: fault handler
              try
              {
                int num3 = *(int*) recorderPtr;
                int num4 = num3;
                int num5 = (int) eventID;
                ref CComPtr\u003CITuneRequest\u003E local1 = ref ccomPtrItuneRequest;
                ref uint local2 = ref num1;
                ref ushort local3 = ref num2;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num6 = ^(int&) ref ccomBstr1;
                ref CComBSTR local4 = ref ccomBstr2;
                ref CComBSTR local5 = ref ccomBstr3;
                // ISSUE: cast to a function pointer type
                // ISSUE: function pointer call
                MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint, ITuneRequest**, uint*, ushort*, ushort*, ushort**, ushort**)>) *(int*) (*(int*) num3 + 108))((ushort**) num4, (ushort**) num5, (ushort*) ref local1, (ushort*) ref local2, (uint*) ref local3, (ITuneRequest**) num6, (uint) ref local4, (IntPtr) ref local5));
              }
              __fault
              {
                // ISSUE: method pointer
                // ISSUE: cast to a function pointer type
                \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
              }
              \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              TuneRequest requestStructIunknown = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalNativeToManagedNoCleanup\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequestMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cstruct\u0020IUnknown\u0020\u002A\u003E((IUnknown*) ^(int&) ref ccomPtrItuneRequest);
              @lock lock1 = new @lock(this.m_Lock);
              @lock lock2;
              // ISSUE: fault handler
              try
              {
                lock2 = lock1;
                this.m_EASTR = requestStructIunknown;
                this.m_StartTime = num1;
                this.m_Duration = num2;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.m_ActivationNature = ^(int&) ref ccomBstr2 == 0 ? (string) null : new string((char*) ^(int&) ref ccomBstr2);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.m_AlertMessage = ^(int&) ref ccomBstr3 == 0 ? (string) null : new string((char*) ^(int&) ref ccomBstr3);
              }
              __fault
              {
                lock2.Dispose();
              }
              lock2.Dispose();
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr3);
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr3);
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr2);
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr2);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr1);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr1);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrItuneRequest);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITuneRequest\u003E*) &ccomPtrItuneRequest);
    }

    [return: MarshalAs(UnmanagedType.U1)]
    private unsafe bool TPGetCASCardStatus()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      global::CasCardStatusType casCardStatusType;
      global::CasCardAssociationType cardAssociationType;
      short num1;
      // ISSUE: fault handler
      try
      {
        int num2 = *(int*) recorderPtr;
        int num3 = num2;
        ref global::CasCardStatusType local1 = ref casCardStatusType;
        ref global::CasCardAssociationType local2 = ref cardAssociationType;
        ref short local3 = ref num1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, global::CasCardStatusType*, global::CasCardAssociationType*, short*)>) *(int*) (*(int*) num2 + 112))((short*) num3, (global::CasCardAssociationType*) ref local1, (global::CasCardStatusType*) ref local2, (IntPtr) ref local3));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      bool casCardStatus;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_CasStatus = (CasCardStatusType) casCardStatusType;
        this.m_CasAssoc = (CasCardAssociationType) cardAssociationType;
        casCardStatus = num1 == (short) -1;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return casCardStatus;
    }

    private unsafe SmartCardApplication[] TPGetSmartCardApplications()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2_1;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr1 = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2_1);
      uint length;
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr1;
        int num2 = num1;
        ref uint local = ref length;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint*)>) *(int*) (*(int*) num1 + 116))((uint*) num2, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2_1);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2_1);
      SmartCardApplication[] cardApplications = new SmartCardApplication[(int) length];
      uint index = 0;
      if (0U < length)
      {
        do
        {
          CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2_2;
          CComPtr\u003CIRecorderEx2\u003E* recorderPtr2 = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2_2);
          global::SmartCardApplication smartCardApplication1;
          // ISSUE: fault handler
          try
          {
            int num3 = *(int*) recorderPtr2;
            int num4 = num3;
            int num5 = (int) index;
            ref global::SmartCardApplication local = ref smartCardApplication1;
            // ISSUE: cast to a function pointer type
            // ISSUE: function pointer call
            MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint, global::SmartCardApplication*)>) *(int*) (*(int*) num3 + 120))((global::SmartCardApplication*) num4, (uint) num5, (IntPtr) ref local));
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2_2);
          }
          \u003CModule\u003E.ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D(&ccomPtrIrecorderEx2_2);
          SmartCardApplication smartCardApplication2 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalNativeToManaged\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASmartCardApplicationMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASmartCardApplication\u0020\u005E\u002Cstruct\u0020SmartCardApplication\u0020\u002A\u003E(&smartCardApplication1);
          cardApplications.SetValue((object) smartCardApplication2, (int) index);
          ++index;
        }
        while (index < length);
      }
      return cardApplications;
    }

    private unsafe object TPGetDiagnosticProperty(string propertyName)
    {
      CComBSTR ccomBstr;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr = 0;
      object forNativeVariant;
      // ISSUE: fault handler
      try
      {
        ushort* pointer = (ushort*) Marshal.StringToBSTR(propertyName).ToPointer();
        if (IntPtr.Zero != (IntPtr) pointer)
        {
          \u003CModule\u003E.SysFreeString((ushort*) 0);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref ccomBstr = (int) pointer;
        }
        CComVariant ccomVariant;
        \u003CModule\u003E.VariantInit((tagVARIANT*) &ccomVariant);
        // ISSUE: fault handler
        try
        {
          CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
          CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
          // ISSUE: fault handler
          try
          {
            int num1 = *(int*) recorderPtr;
            int num2 = num1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num3 = ^(int&) ref ccomBstr;
            ref CComVariant local = ref ccomVariant;
            // ISSUE: cast to a function pointer type
            // ISSUE: function pointer call
            MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ushort*, tagVARIANT*)>) *(int*) (*(int*) num1 + 124))((tagVARIANT*) num2, (ushort*) num3, (IntPtr) ref local));
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
          }
          \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
          forNativeVariant = Marshal.GetObjectForNativeVariant((IntPtr) (void*) &ccomVariant);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComVariant\u002E\u007Bdtor\u007D), (void*) &ccomVariant);
        }
        \u003CModule\u003E.VariantClear((tagVARIANT*) &ccomVariant);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
      return forNativeVariant;
    }

    private unsafe void TPPerformDRMPairing()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num = *(int*) recorderPtr;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr)>) *(int*) (*(int*) num + 136))((IntPtr) num));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    }

    private unsafe int TPGetDRMPairingStatus()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      global::DrmPairingStatus drmPairingStatus1;
      int num1;
      // ISSUE: fault handler
      try
      {
        int num2 = *(int*) recorderPtr;
        int num3 = num2;
        ref global::DrmPairingStatus local1 = ref drmPairingStatus1;
        ref int local2 = ref num1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, global::DrmPairingStatus*, int*)>) *(int*) (*(int*) num2 + 132))((int*) num3, (global::DrmPairingStatus*) ref local1, (IntPtr) ref local2));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      int drmPairingStatus2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_DrmStatus = (DrmPairingStatus) drmPairingStatus1;
        drmPairingStatus2 = num1;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return drmPairingStatus2;
    }

    private unsafe uint TPCheckEntitlementToken(
      BDA_CONDITIONALACCESS_REQUESTTYPE request,
      byte[] token,
      [MarshalAs(UnmanagedType.U1)] bool expectDialog,
      string language)
    {
      CComBSTR ccomBstr;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr = 0;
      uint num1;
      // ISSUE: fault handler
      try
      {
        if (language != (string) null)
        {
          IntPtr bstr = Marshal.StringToBSTR(language);
          \u003CModule\u003E.ATL\u002ECComBSTR\u002EAttach(&ccomBstr, (ushort*) bstr.ToPointer());
        }
        tagSAFEARRAY* tagSafearrayPtr1 = (tagSAFEARRAY*) 0;
        InteropHelper.ByteArrayToSafeArray(&tagSafearrayPtr1, token);
        int num2 = -1;
        if (!expectDialog)
          num2 = ~num2;
        short num3 = (short) num2;
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
        uint num4;
        uint num5;
        // ISSUE: fault handler
        try
        {
          int num6 = *(int*) recorderPtr;
          int num7 = num6;
          BDA_CONDITIONALACCESS_REQUESTTYPE conditionalaccessRequesttype = request;
          tagSAFEARRAY* tagSafearrayPtr2 = tagSafearrayPtr1;
          int num8 = (int) num3;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num9 = ^(int&) ref ccomBstr;
          ref uint local1 = ref num4;
          ref uint local2 = ref num5;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, BDA_CONDITIONALACCESS_REQUESTTYPE, tagSAFEARRAY*, short, ushort*, uint*, uint*)>) *(int*) (*(int*) num6 + 144))((uint*) num7, (uint*) conditionalaccessRequesttype, (ushort*) tagSafearrayPtr2, (short) num8, (tagSAFEARRAY*) num9, (BDA_CONDITIONALACCESS_REQUESTTYPE) ref local1, (IntPtr) ref local2));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
        MarshalHelper.ComException(\u003CModule\u003E.SafeArrayDestroy(tagSafearrayPtr1));
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        // ISSUE: fault handler
        try
        {
          lock2 = lock1;
          this.m_DialogRequest = num4;
          num1 = num5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
      return num1;
    }

    private unsafe void TPSetCaptureToken(byte[] token)
    {
      tagSAFEARRAY* tagSafearrayPtr1 = (tagSAFEARRAY*) 0;
      InteropHelper.ByteArrayToSafeArray(&tagSafearrayPtr1, token);
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        tagSAFEARRAY* tagSafearrayPtr2 = tagSafearrayPtr1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, tagSAFEARRAY*)>) *(int*) (*(int*) num1 + 148))((tagSAFEARRAY*) num2, (IntPtr) tagSafearrayPtr2));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      MarshalHelper.ComException(\u003CModule\u003E.SafeArrayDestroy(tagSafearrayPtr1));
    }

    private unsafe uint TPOpenBroadcastMmi(uint eventID, [MarshalAs(UnmanagedType.U1)] bool expectDialog, string language)
    {
      CComBSTR ccomBstr;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr = 0;
      uint num1;
      // ISSUE: fault handler
      try
      {
        if (language != (string) null)
        {
          ushort* pointer = (ushort*) Marshal.StringToBSTR(language).ToPointer();
          if (IntPtr.Zero != (IntPtr) pointer)
          {
            \u003CModule\u003E.SysFreeString((ushort*) 0);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ref ccomBstr = (int) pointer;
          }
        }
        uint num2 = 0;
        int num3 = -1;
        if (!expectDialog)
          num3 = ~num3;
        short num4 = (short) num3;
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
        // ISSUE: fault handler
        try
        {
          int num5 = *(int*) recorderPtr;
          int num6 = num5;
          int num7 = (int) eventID;
          int num8 = (int) num4;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num9 = ^(int&) ref ccomBstr;
          ref uint local = ref num2;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint, short, ushort*, uint*)>) *(int*) (*(int*) num5 + 152))((uint*) num6, (ushort*) num7, (short) num8, (uint) num9, (IntPtr) ref local));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
        num1 = num2;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
      return num1;
    }

    private unsafe uint TPCloseMmiDialog(
      uint dialogNumber,
      BDA_CONDITIONALACCESS_MMICLOSEREASON reason,
      [MarshalAs(UnmanagedType.U1)] bool expectDialog,
      string language)
    {
      CComBSTR ccomBstr;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr = 0;
      uint num1;
      // ISSUE: fault handler
      try
      {
        if (language != (string) null)
        {
          IntPtr bstr = Marshal.StringToBSTR(language);
          \u003CModule\u003E.ATL\u002ECComBSTR\u002EAttach(&ccomBstr, (ushort*) bstr.ToPointer());
        }
        int num2 = -1;
        if (!expectDialog)
          num2 = ~num2;
        short num3 = (short) num2;
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
        uint num4;
        uint num5;
        // ISSUE: fault handler
        try
        {
          int num6 = *(int*) recorderPtr;
          int num7 = num6;
          int num8 = (int) dialogNumber;
          BDA_CONDITIONALACCESS_MMICLOSEREASON conditionalaccessMmiclosereason = reason;
          int num9 = (int) num3;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num10 = ^(int&) ref ccomBstr;
          ref uint local1 = ref num4;
          ref uint local2 = ref num5;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint, BDA_CONDITIONALACCESS_MMICLOSEREASON, short, ushort*, uint*, uint*)>) *(int*) (*(int*) num6 + 156))((uint*) num7, (uint*) num8, (ushort*) conditionalaccessMmiclosereason, (short) num9, (BDA_CONDITIONALACCESS_MMICLOSEREASON) num10, (uint) ref local1, (IntPtr) ref local2));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        // ISSUE: fault handler
        try
        {
          lock2 = lock1;
          this.m_DialogRequest = num4;
          num1 = num5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
      return num1;
    }

    private unsafe string TPGPNVSNameByIndex(uint index)
    {
      CComBSTR ccomBstr;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr = 0;
      string str1;
      // ISSUE: fault handler
      try
      {
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
        // ISSUE: fault handler
        try
        {
          int num1 = *(int*) recorderPtr;
          int num2 = num1;
          int num3 = (int) index;
          ref CComBSTR local = ref ccomBstr;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint, ushort**)>) *(int*) (*(int*) num1 + 160))((ushort**) num2, (uint) num3, (IntPtr) ref local));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ref ccomBstr != 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          str1 = new string((char*) ^(int&) ref ccomBstr);
        }
        else
          goto label_8;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
      return str1;
label_8:
      string str2;
      // ISSUE: fault handler
      try
      {
        str2 = (string) null;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
      return str2;
    }

    private unsafe string TPGetGPNVSValue(string name, string language)
    {
      CComBSTR ccomBstr1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr1 = 0;
      CComBSTR ccomBstr2;
      CComBSTR ccomBstr3;
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      string gpnvsValue1;
      // ISSUE: fault handler
      try
      {
        if (name != null)
        {
          ushort* pointer = (ushort*) Marshal.StringToBSTR(name).ToPointer();
          if (IntPtr.Zero != (IntPtr) pointer)
          {
            \u003CModule\u003E.SysFreeString((ushort*) 0);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ref ccomBstr1 = (int) pointer;
          }
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomBstr2 = 0;
        // ISSUE: fault handler
        try
        {
          if (language != null)
          {
            ushort* pointer = (ushort*) Marshal.StringToBSTR(language).ToPointer();
            if (IntPtr.Zero != (IntPtr) pointer)
            {
              \u003CModule\u003E.SysFreeString((ushort*) 0);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(int&) ref ccomBstr2 = (int) pointer;
            }
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref ccomBstr3 = 0;
          // ISSUE: fault handler
          try
          {
            this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
            // ISSUE: fault handler
            try
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num1 = ^(int&) ref ccomPtrIrecorderEx2;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num2 = ^(int&) ref ccomBstr1;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num3 = ^(int&) ref ccomBstr2;
              ref CComBSTR local = ref ccomBstr3;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a function pointer type
              // ISSUE: function pointer call
              MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ushort*, ushort*, ushort**)>) *(int*) (*(int*) ^(int&) ref ccomPtrIrecorderEx2 + 168))((ushort**) num1, (ushort*) num2, (ushort*) num3, (IntPtr) ref local));
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if (^(int&) ref ccomBstr3 != 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                gpnvsValue1 = new string((char*) ^(int&) ref ccomBstr3);
              }
              else
                goto label_20;
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
            }
            \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr3);
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr3);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr2);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr2);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr1);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr1);
      return gpnvsValue1;
label_20:
      string gpnvsValue2;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            // ISSUE: fault handler
            try
            {
              gpnvsValue2 = (string) null;
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
            }
            \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr3);
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr3);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr2);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr2);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr1);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr1);
      return gpnvsValue2;
    }

    private unsafe uint TPSetGPNVSValue(
      string name,
      string language,
      [MarshalAs(UnmanagedType.U1)] bool expectDialog,
      string value)
    {
      CComBSTR ccomBstr1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr1 = 0;
      uint num1;
      // ISSUE: fault handler
      try
      {
        if (name != null)
        {
          IntPtr bstr = Marshal.StringToBSTR(name);
          \u003CModule\u003E.ATL\u002ECComBSTR\u002EAttach(&ccomBstr1, (ushort*) bstr.ToPointer());
        }
        CComBSTR ccomBstr2;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomBstr2 = 0;
        // ISSUE: fault handler
        try
        {
          if (language != null)
          {
            IntPtr bstr = Marshal.StringToBSTR(language);
            \u003CModule\u003E.ATL\u002ECComBSTR\u002EAttach(&ccomBstr2, (ushort*) bstr.ToPointer());
          }
          CComBSTR ccomBstr3;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref ccomBstr3 = 0;
          // ISSUE: fault handler
          try
          {
            if (language != null)
            {
              ushort* pointer = (ushort*) Marshal.StringToBSTR(value).ToPointer();
              if (IntPtr.Zero != (IntPtr) pointer)
              {
                \u003CModule\u003E.SysFreeString((ushort*) 0);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(int&) ref ccomBstr3 = (int) pointer;
              }
            }
            int num2 = -1;
            if (!expectDialog)
              num2 = ~num2;
            short num3 = (short) num2;
            CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
            CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
            uint num4;
            // ISSUE: fault handler
            try
            {
              int num5 = *(int*) recorderPtr;
              int num6 = num5;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num7 = ^(int&) ref ccomBstr1;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num8 = ^(int&) ref ccomBstr3;
              int num9 = (int) num3;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num10 = ^(int&) ref ccomBstr2;
              ref uint local = ref num4;
              // ISSUE: cast to a function pointer type
              // ISSUE: function pointer call
              MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ushort*, ushort*, short, ushort*, uint*)>) *(int*) (*(int*) num5 + 164))((uint*) num6, (ushort*) num7, (short) num8, (ushort*) num9, (ushort*) num10, (IntPtr) ref local));
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
            }
            \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
            num1 = num4;
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr3);
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr3);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr2);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr2);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr1);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr1);
      return num1;
    }

    [return: MarshalAs(UnmanagedType.U1)]
    private unsafe bool TPDoesSupportDiseqC()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      short num1;
      // ISSUE: fault handler
      try
      {
        int num2 = *(int*) recorderPtr;
        int num3 = num2;
        ref short local = ref num1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, short*)>) *(int*) (*(int*) num2 + 172))((short*) num3, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      return num1 == (short) -1;
    }

    private unsafe void TPSetIsdbCasRequest(uint requestID, byte[] command)
    {
      tagSAFEARRAY* tagSafearrayPtr1 = (tagSAFEARRAY*) 0;
      InteropHelper.ByteArrayToSafeArray(&tagSafearrayPtr1, command);
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        int num3 = (int) requestID;
        tagSAFEARRAY* tagSafearrayPtr2 = tagSafearrayPtr1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint, tagSAFEARRAY*)>) *(int*) (*(int*) num1 + 176))((tagSAFEARRAY*) num2, (uint) num3, (IntPtr) tagSafearrayPtr2));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      MarshalHelper.ComException(\u003CModule\u003E.SafeArrayDestroy(tagSafearrayPtr1));
    }

    private unsafe uint TPPurchaseEntitlement([MarshalAs(UnmanagedType.U1)] bool expectDialog, byte[] token, string language)
    {
      CComBSTR ccomBstr;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr = 0;
      uint num1;
      // ISSUE: fault handler
      try
      {
        if (language != (string) null)
        {
          ushort* pointer = (ushort*) Marshal.StringToBSTR(language).ToPointer();
          if (IntPtr.Zero != (IntPtr) pointer)
          {
            \u003CModule\u003E.SysFreeString((ushort*) 0);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ref ccomBstr = (int) pointer;
          }
        }
        tagSAFEARRAY* tagSafearrayPtr1 = (tagSAFEARRAY*) 0;
        tagSAFEARRAY* tagSafearrayPtr2 = (tagSAFEARRAY*) 0;
        InteropHelper.ByteArrayToSafeArray(&tagSafearrayPtr1, token);
        int num2 = -1;
        if (!expectDialog)
          num2 = ~num2;
        short num3 = (short) num2;
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
        uint num4;
        uint num5;
        // ISSUE: fault handler
        try
        {
          int num6 = *(int*) recorderPtr;
          int num7 = num6;
          int num8 = (int) num3;
          tagSAFEARRAY* tagSafearrayPtr3 = tagSafearrayPtr1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num9 = ^(int&) ref ccomBstr;
          ref uint local1 = ref num4;
          ref tagSAFEARRAY* local2 = ref tagSafearrayPtr2;
          ref uint local3 = ref num5;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, short, tagSAFEARRAY*, ushort*, uint*, tagSAFEARRAY**, uint*)>) *(int*) (*(int*) num6 + 180))((uint*) num7, (tagSAFEARRAY**) num8, (uint*) tagSafearrayPtr3, (ushort*) num9, (tagSAFEARRAY*) ref local1, (short) ref local2, (IntPtr) ref local3));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
        MarshalHelper.ComException(\u003CModule\u003E.SafeArrayDestroy(tagSafearrayPtr1));
        byte[] @ref = (byte[]) null;
        if ((IntPtr) tagSafearrayPtr2 != IntPtr.Zero)
          @ref = InteropHelper.SafeArrayToByteArray(&tagSafearrayPtr2);
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        // ISSUE: fault handler
        try
        {
          lock2 = lock1;
          this.m_DialogRequest = num4;
          this.m_CaptureToken = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u003E(@ref);
          num1 = num5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
      return num1;
    }

    private unsafe void TPCancelCaptureToken(byte[] token)
    {
      tagSAFEARRAY* tagSafearrayPtr1 = (tagSAFEARRAY*) 0;
      InteropHelper.ByteArrayToSafeArray(&tagSafearrayPtr1, token);
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        tagSAFEARRAY* tagSafearrayPtr2 = tagSafearrayPtr1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, tagSAFEARRAY*)>) *(int*) (*(int*) num1 + 184))((tagSAFEARRAY*) num2, (IntPtr) tagSafearrayPtr2));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      MarshalHelper.ComException(\u003CModule\u003E.SafeArrayDestroy(tagSafearrayPtr1));
    }

    [return: MarshalAs(UnmanagedType.U1)]
    private unsafe bool TPSupportsConditionalAccess()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      short num1;
      // ISSUE: fault handler
      try
      {
        int num2 = *(int*) recorderPtr;
        int num3 = num2;
        ref short local = ref num1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, short*)>) *(int*) (*(int*) num2 + 188))((short*) num3, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      return num1 == (short) -1;
    }

    private unsafe void TPRenewLicenses(
      string fileName,
      string expiredKid,
      uint callersId,
      [MarshalAs(UnmanagedType.U1)] bool highPriority)
    {
      CComBSTR ccomBstr1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomBstr1 = 0;
      // ISSUE: fault handler
      try
      {
        if (fileName != (string) null)
        {
          IntPtr bstr = Marshal.StringToBSTR(fileName);
          \u003CModule\u003E.ATL\u002ECComBSTR\u002EAttach(&ccomBstr1, (ushort*) bstr.ToPointer());
        }
        CComBSTR ccomBstr2;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomBstr2 = 0;
        // ISSUE: fault handler
        try
        {
          if (expiredKid != (string) null)
          {
            ushort* pointer = (ushort*) Marshal.StringToBSTR(expiredKid).ToPointer();
            if (IntPtr.Zero != (IntPtr) pointer)
            {
              \u003CModule\u003E.SysFreeString((ushort*) 0);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(int&) ref ccomBstr2 = (int) pointer;
            }
          }
          int num1 = highPriority ? 1 : 0;
          CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
          CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
          // ISSUE: fault handler
          try
          {
            int num2 = *(int*) recorderPtr;
            int num3 = num2;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num4 = ^(int&) ref ccomBstr1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num5 = ^(int&) ref ccomBstr2;
            int num6 = (int) callersId;
            int num7 = num1;
            // ISSUE: cast to a function pointer type
            // ISSUE: function pointer call
            MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ushort*, ushort*, uint, int)>) *(int*) (*(int*) num2 + 192))(num3, (uint) num4, (ushort*) num5, (ushort*) num6, (IntPtr) num7));
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
          }
          \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr2);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr2);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr1);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr1);
    }

    [return: MarshalAs(UnmanagedType.U1)]
    private unsafe bool TPSupportsPBDAScanning()
    {
      this.m_GuideTypeGuid = Guid.Empty;
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      _GUID guid;
      short num1;
      // ISSUE: fault handler
      try
      {
        int num2 = *(int*) recorderPtr;
        int num3 = num2;
        ref _GUID local1 = ref guid;
        ref short local2 = ref num1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, _GUID*, short*)>) *(int*) (*(int*) num2 + 200))((short*) num3, (_GUID*) ref local1, (IntPtr) ref local2));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      this.m_GuideTypeGuid = *(Guid*) (int) &guid;
      return num1 == (short) -1;
    }

    [return: MarshalAs(UnmanagedType.U1)]
    private unsafe bool TPPassiveClientsExist()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      short num1;
      // ISSUE: fault handler
      try
      {
        int num2 = *(int*) recorderPtr;
        int num3 = num2;
        ref short local = ref num1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, short*)>) *(int*) (*(int*) num2 + 204))((short*) num3, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      return num1 == (short) -1;
    }

    private unsafe void TPSetTunerUseReason(TunerUseReason useReason)
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        int num3 = (int) useReason;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, global::TunerUseReason)>) *(int*) (*(int*) num1 + 208))((global::TunerUseReason) num2, (IntPtr) num3));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    }

    private unsafe uint TPGetUserActivityInterval()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      uint activityInterval;
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recorderPtr;
        int num2 = num1;
        ref uint local = ref activityInterval;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint*)>) *(int*) (*(int*) num1 + 212))((uint*) num2, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      return activityInterval;
    }

    private unsafe void TPUserActivityDetected()
    {
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* recorderPtr = this.TPGetRecorderPtr(&ccomPtrIrecorderEx2);
      // ISSUE: fault handler
      try
      {
        int num = *(int*) recorderPtr;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr)>) *(int*) (*(int*) num + 216))((IntPtr) num));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    }

    private void TPAdvise(Guid g)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_Recorder?.TPAdvise(g);
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    private void TPDtor(IntPtr hTuner, SafeRecorder rec)
    {
      try
      {
        if (rec != null)
        {
          rec.TPUnadvise(this);
          rec.Dispose();
        }
        this.TPDtor(hTuner);
      }
      catch (COMException ex)
      {
      }
    }

    private void CloneCache(Tuner from)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_dwId = from.m_dwId;
        this.m_GuidId = from.m_GuidId;
        this.m_DeviceName = from.m_DeviceName;
        this.m_RootDeviceName = from.m_RootDeviceName;
        this.m_RootDeviceNameInstanceId = from.m_RootDeviceNameInstanceId;
        this.m_bConfigured = from.m_bConfigured;
        this.m_FriendlyName = from.m_FriendlyName;
        this.m_dwViewOrder = from.m_dwViewOrder;
        this.m_bPrefView = from.m_bPrefView;
        this.m_dwRecordOrder = from.m_dwRecordOrder;
        this.m_bPrefRecord = from.m_bPrefRecord;
        this.m_ConfiguredTSNames = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u0020\u003E\u005E\u003E(from.m_ConfiguredTSNames);
        this.m_State = from.m_State;
        ((IDisposable) this.m_CurrentTR)?.Dispose();
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E(from.m_CurrentTR);
        this.m_SIID = from.m_SIID;
        this.m_hr = from.m_hr;
        this.m_ClientIDs = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u0020\u003E\u005E\u003E(from.m_ClientIDs);
        this.m_Busy = from.m_Busy;
        this.m_TunerType = from.m_TunerType;
        this.m_TVFormats = from.m_TVFormats;
        this.m_NumAuxInputs = from.m_NumAuxInputs;
        this.m_HWSupportedNetworkTypes = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cclass\u0020System\u003A\u003AGuid\u0020\u003E\u005E\u003E(from.m_HWSupportedNetworkTypes);
        this.m_CPType = from.m_CPType;
        this.m_EncoderMin = from.m_EncoderMin;
        this.m_EncoderMax = from.m_EncoderMax;
        this.m_EncoderDelta = from.m_EncoderDelta;
        ((IDisposable) this.m_ConfiguredDefaultTR)?.Dispose();
        this.m_ConfiguredDefaultTR = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E(from.m_ConfiguredDefaultTR);
        this.m_bUseSTB = from.m_bUseSTB;
        this.m_IRControlBlob = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u003E(from.m_IRControlBlob);
        this.m_Use = from.m_Use;
        this.m_DoesDiseqC = from.m_DoesDiseqC;
        this.m_SupportsConditionalAccess = from.m_SupportsConditionalAccess;
        this.m_PassiveClientsExist = from.m_PassiveClientsExist;
        this.m_IsPbda = from.m_IsPbda;
        this.m_IsMandatoryParentalControl = from.m_IsMandatoryParentalControl;
        this.m_PbdaId = from.m_PbdaId;
        this.m_BcasId = from.m_BcasId;
        this.m_SupportedLanguages = from.m_SupportedLanguages;
        this.ESEvent = from.ESEvent;
        this.ProfileChangedEvent = from.ProfileChangedEvent;
        this.UsageChangedEvent = from.UsageChangedEvent;
        this.EncoderSettingsChangedEvent = from.EncoderSettingsChangedEvent;
        this.TuningChangedEvent = from.TuningChangedEvent;
        this.ErrorEvent = from.ErrorEvent;
        this.StateChangedEvent = from.StateChangedEvent;
        this.ReadyEvent = from.ReadyEvent;
        this.CertificateEvent = from.CertificateEvent;
        this.EncryptionEvent = from.EncryptionEvent;
        this.WriteFailureEvent = from.WriteFailureEvent;
        this.ContentSIIDChangedEvent = from.ContentSIIDChangedEvent;
        this.BitRateChangedEvent = from.BitRateChangedEvent;
        this.ChannelAvailableEvent = from.ChannelAvailableEvent;
        this.StatusChangedEvent = from.StatusChangedEvent;
        this.RatingChangedEvent = from.RatingChangedEvent;
        this.ProtectionTypeChangedEvent = from.ProtectionTypeChangedEvent;
        this.EasReceivedEvent = from.EasReceivedEvent;
        this.MMIReceivedEvent = from.MMIReceivedEvent;
        this.CasCardStatusChangedEvent = from.CasCardStatusChangedEvent;
        this.DrmPairingStatusChangedEvent = from.DrmPairingStatusChangedEvent;
        this.CasEntitlementChangedEvent = from.CasEntitlementChangedEvent;
        this.WriteFailureClearEvent = from.WriteFailureClearEvent;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    public unsafe Tuner(IntPtr ptr)
      : base((_GUID*) (int) &this.PrimaryIID, (IUnknown*) ptr.ToPointer())
    {
      // ISSUE: fault handler
      try
      {
        this._instanceLabel = Interlocked.Increment(ref Tuner.s_nextInstanceLabel);
      }
      __fault
      {
        base.Dispose(true);
      }
    }

    public unsafe Tuner(IRecorderInfo* pTuner, Guid g)
    {
      this.m_GuidId = g;
      // ISSUE: explicit constructor call
      base.\u002Ector((_GUID*) &\u003CModule\u003E._GUID_379848e6_2751_42c0_8de6_9457cdc61d60, (IUnknown*) pTuner);
      // ISSUE: fault handler
      try
      {
        this._instanceLabel = Interlocked.Increment(ref Tuner.s_nextInstanceLabel);
      }
      __fault
      {
        base.Dispose(true);
      }
    }

    private Tuner()
    {
      // ISSUE: fault handler
      try
      {
        this._instanceLabel = Interlocked.Increment(ref Tuner.s_nextInstanceLabel);
        this._profile = string.Empty;
      }
      __fault
      {
        base.Dispose(true);
      }
    }

    private void \u0021Tuner()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      IntPtr handle;
      SafeRecorder recorder;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        handle = this.handle;
        this.handle = IntPtr.Zero;
        recorder = this.m_Recorder;
        this.m_Recorder = (SafeRecorder) null;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      this.TPDtor(handle, recorder);
    }

    internal void TPSetRecorder(SafeRecorder pRecorder)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        SafeRecorder recorder = this.m_Recorder;
        if (recorder != null)
        {
          recorder.TPUnadvise(this);
          this.m_Recorder?.Dispose();
          this.m_Recorder = (SafeRecorder) null;
        }
        if (pRecorder != null)
        {
          SafeRecorder safeRecorder = (SafeRecorder) pRecorder.ReferenceClone();
          this.m_Recorder = safeRecorder;
          safeRecorder.TPAdvise(this);
          this.NLClearCachedRecorderState();
        }
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    internal void Disconnect()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_Recorder?.Dispose();
        this.m_Recorder = (SafeRecorder) null;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    internal void NLClearCachedRecorderState()
    {
      ((IDisposable) this.m_CurrentTR)?.Dispose();
      this.m_CurrentTR = (TuneRequest) null;
      ((IDisposable) this.m_ConfiguredDefaultTR)?.Dispose();
      this.m_ConfiguredDefaultTR = (TuneRequest) null;
      this.m_bUseSTB = new bool?();
      this.m_IRControlBlob = (byte[]) null;
      this.m_Use = new RecorderUse?();
      this.m_DoesDiseqC = new bool?();
      this.m_SupportsConditionalAccess = new bool?();
      this.m_SupportsPBDAScanning = new bool?();
      this.m_PassiveClientsExist = new bool?();
      this.m_ConfiguredTSNames = (string[]) null;
      this.m_BcasId = (string) null;
      ((IDisposable) this.m_EASTR)?.Dispose();
      this.m_EASTR = (TuneRequest) null;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    internal SafeRecorder Recorder
    {
      get => \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASafeRecorder\u0020\u005E\u003E(this.m_Recorder);
      set
      {
        if (value == null)
          throw new ArgumentException("can't be nullptr");
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASafeRecorder\u0020\u005E\u003E\u0020\u005E\u003E(new dv1<SafeRecorder>(this.TPSetRecorder).BeginInvoke(value, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::Recorder::set");
      }
    }

    internal void SetCurrentUse(RecorderUse ru)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_Use = (RecorderUse?) ru;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    internal void ClearCurrentUse()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_Use = new RecorderUse?();
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    internal static void Delete(Tuner t) => t?.Dispose();

    public void ClearCache()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_dwId = uint.MaxValue;
        this.m_DeviceName = (string) null;
        this.m_RootDeviceName = (string) null;
        this.m_RootDeviceNameInstanceId = (string) null;
        this.m_State = new int?();
        this.m_SIID = new int?();
        this.m_hr = new int?();
        this.m_ClientIDs = (string[]) null;
        this.m_Busy = new bool?();
        this.NLClearCachedRecorderState();
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    public IntPtr H => this.handle;

    private void \u007ETuner()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      IntPtr handle;
      SafeRecorder recorder;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        handle = this.handle;
        this.handle = IntPtr.Zero;
        recorder = this.m_Recorder;
        this.m_Recorder = (SafeRecorder) null;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      dv2<IntPtr, SafeRecorder> dv2 = new dv2<IntPtr, SafeRecorder>(this.TPDtor);
      dv2.BeginInvoke(handle, recorder, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv2\u003CSystem\u003A\u003AIntPtr\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASafeRecorder\u0020\u005E\u003E\u0020\u005E\u003E), (object) dv2);
    }

    public override SafeComWrapper ReferenceClone()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      Tuner tuner;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        tuner = (Tuner) base.ReferenceClone();
        SafeRecorder recorder = this.m_Recorder;
        if (recorder != null)
          tuner.Recorder = recorder;
        tuner.CloneCache(this);
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return (SafeComWrapper) tuner;
    }

    public override unsafe Guid PrimaryIID => *(Guid*) (int) &\u003CModule\u003E._GUID_379848e6_2751_42c0_8de6_9457cdc61d60;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public RecorderUse CurrentUse
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        RecorderUse currentUse1;
        try
        {
          lock2 = lock1;
          if (this.m_Use.HasValue)
            currentUse1 = this.m_Use.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return currentUse1;
label_5:
        lock2.Dispose();
        RecorderUse recorderUse = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u003E(new d0<RecorderUse>(this.TPGetRecorderUse).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::CurrentUse::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        RecorderUse currentUse2;
        try
        {
          lock4 = lock3;
          this.m_Use = (RecorderUse?) recorderUse;
          currentUse2 = this.m_Use.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return currentUse2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsFree
    {
      [return: MarshalAs(UnmanagedType.U1)] get => !this.IsBusy;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsExclusive
    {
      [return: MarshalAs(UnmanagedType.U1)] get => this.m_Recorder != null && this.CurrentUse == RecorderUse.ru_Exclusive;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsScanning
    {
      [return: MarshalAs(UnmanagedType.U1)] get => this.m_Recorder != null && this.CurrentUse == RecorderUse.ru_Scanning;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsActive
    {
      [return: MarshalAs(UnmanagedType.U1)] get => this.m_Recorder != null && this.CurrentUse == RecorderUse.ru_Active;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsPassive
    {
      [return: MarshalAs(UnmanagedType.U1)] get => this.m_Recorder != null && this.CurrentUse == RecorderUse.ru_Passive;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public uint Id
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        uint id;
        try
        {
          lock2 = lock1;
          uint dwId = this.m_dwId;
          if (dwId != uint.MaxValue)
            id = dwId;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return id;
label_5:
        lock2.Dispose();
        this.GetIdentity();
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        uint dwId1;
        try
        {
          lock4 = lock3;
          dwId1 = this.m_dwId;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return dwId1;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public Guid DeviceId
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        Guid guidId1;
        try
        {
          lock2 = lock1;
          if (this.m_GuidId != Guid.Empty)
            guidId1 = this.m_GuidId;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return guidId1;
label_5:
        lock2.Dispose();
        this.GetIdentity();
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        Guid guidId2;
        try
        {
          lock4 = lock3;
          guidId2 = this.m_GuidId;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return guidId2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string PbdaDeviceLanguage
    {
      get
      {
        try
        {
          string supportedLanguages = this.PbdaSupportedLanguages;
          string str = CultureInfo.CurrentUICulture.ThreeLetterISOLanguageName + "-" + RegionInfo.CurrentRegion.TwoLetterISORegionName;
          return !string.IsNullOrEmpty(supportedLanguages) && !supportedLanguages.Contains(str) ? supportedLanguages.Substring(0, 6) : str;
        }
        catch (TimeoutException ex)
        {
        }
        catch (COMException ex)
        {
        }
        return string.Empty;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string PbdaTunerId
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        string pbdaId;
        try
        {
          lock2 = lock1;
          if (this.m_PbdaId != (string) null)
            pbdaId = this.m_PbdaId;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return pbdaId;
label_5:
        lock2.Dispose();
        string pbdaTunerId = (string) null;
        try
        {
          pbdaTunerId = this.get_GPNVSValue(GpnvsNames.TunerId, this.PbdaDeviceLanguage);
        }
        catch (TimeoutException ex)
        {
        }
        catch (COMException ex)
        {
        }
        if (pbdaTunerId != (string) null)
        {
          @lock lock3 = new @lock(this.m_Lock);
          @lock lock4;
          try
          {
            lock4 = lock3;
            this.m_PbdaId = pbdaTunerId;
          }
          __fault
          {
            lock4.Dispose();
          }
          lock4.Dispose();
        }
        return pbdaTunerId;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string PbdaSupportedLanguages
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        string supportedLanguages1;
        try
        {
          lock2 = lock1;
          if (this.m_SupportedLanguages != (string) null)
            supportedLanguages1 = this.m_SupportedLanguages;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return supportedLanguages1;
label_5:
        lock2.Dispose();
        string supportedLanguages2 = (string) null;
        try
        {
          supportedLanguages2 = this.get_GPNVSValue(GpnvsNames.SupportedLanguages, string.Empty);
        }
        catch (TimeoutException ex)
        {
        }
        catch (COMException ex)
        {
        }
        if (supportedLanguages2 != (string) null)
        {
          @lock lock3 = new @lock(this.m_Lock);
          @lock lock4;
          try
          {
            lock4 = lock3;
            this.m_SupportedLanguages = supportedLanguages2;
          }
          __fault
          {
            lock4.Dispose();
          }
          lock4.Dispose();
        }
        return supportedLanguages2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string DeviceName
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        string deviceName1;
        try
        {
          lock2 = lock1;
          if (this.m_DeviceName != (string) null)
            deviceName1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u003E(this.m_DeviceName);
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return deviceName1;
label_5:
        lock2.Dispose();
        this.GetIdentity();
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        string deviceName2;
        try
        {
          lock4 = lock3;
          deviceName2 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u003E(this.m_DeviceName);
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return deviceName2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string RootDeviceName
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        string rootDeviceName1;
        try
        {
          lock2 = lock1;
          if (this.m_RootDeviceName != (string) null)
            rootDeviceName1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u003E(this.m_RootDeviceName);
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return rootDeviceName1;
label_5:
        lock2.Dispose();
        this.GetIdentity();
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        string rootDeviceName2;
        try
        {
          lock4 = lock3;
          rootDeviceName2 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u003E(this.m_RootDeviceName);
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return rootDeviceName2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string RootDeviceNameInstanceId
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        string deviceNameInstanceId1;
        try
        {
          lock2 = lock1;
          if (this.m_RootDeviceNameInstanceId != (string) null)
            deviceNameInstanceId1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u003E(this.m_RootDeviceNameInstanceId);
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return deviceNameInstanceId1;
label_5:
        lock2.Dispose();
        this.GetIdentity();
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        string deviceNameInstanceId2;
        try
        {
          lock4 = lock3;
          deviceNameInstanceId2 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u003E(this.m_RootDeviceNameInstanceId);
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return deviceNameInstanceId2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsMandatoryParentalControl
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        bool mandatoryParentalControl1;
        try
        {
          lock2 = lock1;
          if (this.m_IsMandatoryParentalControl.HasValue)
            mandatoryParentalControl1 = this.m_IsMandatoryParentalControl.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return mandatoryParentalControl1;
label_5:
        lock2.Dispose();
        string str = (string) null;
        try
        {
          str = this.get_GPNVSValue(GpnvsNames.ConfigureParentalControl, this.PbdaDeviceLanguage);
        }
        catch (TimeoutException ex)
        {
        }
        catch (COMException ex)
        {
        }
        if (!(str != (string) null))
          return false;
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        bool mandatoryParentalControl2;
        try
        {
          lock4 = lock3;
          this.m_IsMandatoryParentalControl = (bool?) (!string.IsNullOrEmpty(str) && str != "0");
          mandatoryParentalControl2 = this.m_IsMandatoryParentalControl.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return mandatoryParentalControl2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsConfigured
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        bool isConfigured1;
        try
        {
          lock2 = lock1;
          if (this.m_bConfigured.HasValue)
            isConfigured1 = this.m_bConfigured.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return isConfigured1;
label_5:
        lock2.Dispose();
        this.GetConfigInfo();
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        bool isConfigured2;
        try
        {
          lock4 = lock3;
          if (!this.m_bConfigured.HasValue)
            this.m_bConfigured = (bool?) false;
          isConfigured2 = this.m_bConfigured.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return isConfigured2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string FriendlyName
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        string friendlyName1;
        try
        {
          lock2 = lock1;
          if (this.m_bConfigured.HasValue)
            friendlyName1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u003E(this.m_FriendlyName);
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return friendlyName1;
label_5:
        lock2.Dispose();
        this.GetConfigInfo();
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        string friendlyName2;
        try
        {
          lock4 = lock3;
          friendlyName2 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u003E(this.m_FriendlyName);
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return friendlyName2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsConnected
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        bool isConnected;
        try
        {
          lock2 = lock1;
          isConnected = this.m_Recorder != null;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return isConnected;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public uint ViewOrder
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        uint dwViewOrder1;
        try
        {
          lock2 = lock1;
          if (this.m_bConfigured.HasValue)
            dwViewOrder1 = this.m_dwViewOrder;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return dwViewOrder1;
label_5:
        lock2.Dispose();
        this.GetConfigInfo();
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        uint dwViewOrder2;
        try
        {
          lock4 = lock3;
          dwViewOrder2 = this.m_dwViewOrder;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return dwViewOrder2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool PrefView
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        bool bPrefView1;
        try
        {
          lock2 = lock1;
          if (this.m_bConfigured.HasValue)
            bPrefView1 = this.m_bPrefView;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return bPrefView1;
label_5:
        lock2.Dispose();
        this.GetConfigInfo();
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        bool bPrefView2;
        try
        {
          lock4 = lock3;
          bPrefView2 = this.m_bPrefView;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return bPrefView2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public uint RecordOrder
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        uint dwRecordOrder1;
        try
        {
          lock2 = lock1;
          if (this.m_bConfigured.HasValue)
            dwRecordOrder1 = this.m_dwRecordOrder;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return dwRecordOrder1;
label_5:
        lock2.Dispose();
        this.GetConfigInfo();
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        uint dwRecordOrder2;
        try
        {
          lock4 = lock3;
          dwRecordOrder2 = this.m_dwRecordOrder;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return dwRecordOrder2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool PrefRecord
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        bool bPrefRecord1;
        try
        {
          lock2 = lock1;
          if (this.m_bConfigured.HasValue)
            bPrefRecord1 = this.m_bPrefRecord;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return bPrefRecord1;
label_5:
        lock2.Dispose();
        this.GetConfigInfo();
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        bool bPrefRecord2;
        try
        {
          lock4 = lock3;
          bPrefRecord2 = this.m_bPrefRecord;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return bPrefRecord2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool Ready
    {
      [return: MarshalAs(UnmanagedType.U1)] get => this.HR >= 0;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string[] ConfiguredTuningSpaces
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        string[] configuredTuningSpaces1;
        try
        {
          lock2 = lock1;
          string[] configuredTsNames = this.m_ConfiguredTSNames;
          if (configuredTsNames != null)
            configuredTuningSpaces1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u0020\u003E\u005E\u003E(configuredTsNames);
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return configuredTuningSpaces1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetConfiguredTuningSpaceNames).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::ConfiguredTuningSpaces::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        string[] configuredTuningSpaces2;
        try
        {
          lock4 = lock3;
          configuredTuningSpaces2 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u0020\u003E\u005E\u003E(this.m_ConfiguredTSNames);
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return configuredTuningSpaces2;
      }
    }

    [return: MarshalAs(UnmanagedType.U1)]
    public bool IsSupportedTuneRequest(TuneRequest tr) => tr != null && this.ConfiguredTuningSpaces.Contains((object) tr.TuningSpace.UniqueName);

    [return: MarshalAs(UnmanagedType.U1)]
    public bool IsSameTuneRequest(TuneRequest tr, [MarshalAs(UnmanagedType.U1)] bool componentCheck)
    {
      BDA_Comp_Flags bdaCompFlags = componentCheck ? (BDA_Comp_Flags) 6 : (BDA_Comp_Flags) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      return tr != null && this.CurrentTuneRequest != null && this.CurrentTuneRequest.CompareEquivalent((object) tr, (BDA_Comp_Flags) ^(int&) ref bdaCompFlags) == 0;
    }

    [return: MarshalAs(UnmanagedType.U1)]
    public bool IsSameTuningSpace(TuneRequest tr) => tr != null && this.CurrentTuneRequest != null && this.CurrentTuneRequest.TuningSpace.UniqueName == tr.TuningSpace.UniqueName;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public int State
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        int state1;
        try
        {
          lock2 = lock1;
          if (this.m_State.HasValue)
            state1 = this.m_State.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return state1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetState).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::State::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        int state2;
        try
        {
          lock4 = lock3;
          state2 = this.m_State.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return state2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public int HR
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        int hr1;
        try
        {
          lock2 = lock1;
          if (this.m_hr.HasValue)
            hr1 = this.m_hr.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return hr1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetState).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::HR::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        int hr2;
        try
        {
          lock4 = lock3;
          hr2 = this.m_hr.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return hr2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public TuneRequest CurrentTuneRequest
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        TuneRequest currentTuneRequest1;
        try
        {
          lock2 = lock1;
          TuneRequest currentTr = this.m_CurrentTR;
          if (currentTr != null)
            currentTuneRequest1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E(currentTr);
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return currentTuneRequest1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetState).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::CurrentTuneRequest::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        TuneRequest currentTuneRequest2;
        try
        {
          lock4 = lock3;
          currentTuneRequest2 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E(this.m_CurrentTR);
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return currentTuneRequest2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public int SIID
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        int siid1;
        try
        {
          lock2 = lock1;
          if (this.m_SIID.HasValue)
            siid1 = this.m_SIID.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return siid1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetState).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SIID::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        int siid2;
        try
        {
          lock4 = lock3;
          siid2 = this.m_SIID.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return siid2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string[] ClientIDs
    {
      get
      {
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetClientIDs).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::ClientIDs::get");
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        string[] clientIds;
        try
        {
          lock2 = lock1;
          clientIds = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u0020\u003E\u005E\u003E(this.m_ClientIDs);
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return clientIds;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsBusy
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        bool isBusy1;
        try
        {
          lock2 = lock1;
          if (this.m_Busy.HasValue)
            isBusy1 = this.m_Busy.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return isBusy1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetBusy).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::IsBusy::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        bool isBusy2;
        try
        {
          lock4 = lock3;
          isBusy2 = this.m_Busy.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return isBusy2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public TunerType TVTunerType
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        TunerType tvTunerType1;
        try
        {
          lock2 = lock1;
          if (this.m_TunerType.HasValue)
            tvTunerType1 = this.m_TunerType.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return tvTunerType1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetCapabilities).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::TVTunerType::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        TunerType tvTunerType2;
        try
        {
          lock4 = lock3;
          tvTunerType2 = this.m_TunerType.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return tvTunerType2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public uint TVFormats
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        uint tvFormats1;
        try
        {
          lock2 = lock1;
          if (this.m_TunerType.HasValue)
            tvFormats1 = this.m_TVFormats;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return tvFormats1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetCapabilities).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::TVFormats::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        uint tvFormats2;
        try
        {
          lock4 = lock3;
          tvFormats2 = this.m_TVFormats;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return tvFormats2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public uint NumAuxInputs
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        uint numAuxInputs1;
        try
        {
          lock2 = lock1;
          if (this.m_TunerType.HasValue)
            numAuxInputs1 = this.m_NumAuxInputs;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return numAuxInputs1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetCapabilities).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::NumAuxInputs::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        uint numAuxInputs2;
        try
        {
          lock4 = lock3;
          numAuxInputs2 = this.m_NumAuxInputs;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return numAuxInputs2;
      }
    }

    public void OpenMedia(TuneRequest tr) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E\u0020\u005E\u003E(new dv1<TuneRequest>(this.TPOpenMedia).BeginInvoke(tr, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::OpenMedia");

    public void CloseMedia() => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPCloseMedia).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::CloseMedia");

    [return: MarshalAs(UnmanagedType.U1)]
    public bool ValidateTuneRequest(TuneRequest tr) => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad1\u003Cbool\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E\u0020\u005E\u002Cbool\u003E(new d1<bool, TuneRequest>(this.TPValidateTuneRequest).BeginInvoke(tr, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::ValidateTuneRequest");

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string Profile
    {
      get
      {
        if (string.IsNullOrEmpty(this._profile))
          this._profile = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u0020\u005E\u002CSystem\u003A\u003AString\u0020\u005E\u003E(new d0<string>(this.TPGetProfile).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::Profile::get");
        return this._profile;
      }
    }

    public void SetContentSIID(int SIID) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Clong\u003E\u0020\u005E\u003E(new dv1<int>(this.TPSetContentSIID).BeginInvoke(SIID, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SetContentSIID");

    public void Stop() => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPStop).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::Stop");

    public void Record([MarshalAs(UnmanagedType.U1)] bool bAsync) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Cbool\u003E\u0020\u005E\u003E(new dv1<bool>(this.TPRecord).BeginInvoke(bAsync, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::Record");

    public void RecordEx([MarshalAs(UnmanagedType.U1)] bool bOn, uint dwQuality) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv2\u003Cbool\u002Cunsigned\u0020int\u003E\u0020\u005E\u003E(new dv2<bool, uint>(this.TPRecordEx).BeginInvoke(bOn, dwQuality, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::RecordEx");

    public void Pause() => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPPause).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::Pause");

    public void SAP([MarshalAs(UnmanagedType.U1)] bool bOn) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Cbool\u003E\u0020\u005E\u003E(new dv1<bool>(this.TPSAP).BeginInvoke(bOn, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SAP");

    [return: MarshalAs(UnmanagedType.U1)]
    public bool ChannelAvailable(TuneRequest tr, out uint strength)
    {
      bool flag = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad1\u003Cbool\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E\u0020\u005E\u002Cbool\u003E(new d1<bool, TuneRequest>(this.TPChannelAvailable).BeginInvoke(tr, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::ChannelAvailable");
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        strength = this.m_Strength;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return flag;
    }

    public void SetMaxVideoEncoderQuality(uint dwQuality) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Cunsigned\u0020int\u003E\u0020\u005E\u003E(new dv1<uint>(this.TPSetMaxVideoEncoderQuality).BeginInvoke(dwQuality, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SetMaxVideoEncoderQuality");

    public void SetRecorderConfig(
      TuneRequest tr,
      [MarshalAs(UnmanagedType.U1)] bool useSTB,
      byte[] IRBlob,
      string name,
      uint viewOrder,
      uint recordOrder,
      [MarshalAs(UnmanagedType.U1)] bool prefView,
      [MarshalAs(UnmanagedType.U1)] bool prefRecord,
      [MarshalAs(UnmanagedType.U1)] bool configured)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      string[] configuredTsNames;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        configuredTsNames = this.m_ConfiguredTSNames;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      this.SetRecorderConfig(tr, useSTB, IRBlob, name, viewOrder, recordOrder, prefView, prefRecord, configured, configuredTsNames);
    }

    public void SetRecorderConfig(
      TuneRequest tr,
      [MarshalAs(UnmanagedType.U1)] bool useSTB,
      byte[] IRBlob,
      string name,
      uint viewOrder,
      uint recordOrder,
      [MarshalAs(UnmanagedType.U1)] bool prefView,
      [MarshalAs(UnmanagedType.U1)] bool prefRecord,
      [MarshalAs(UnmanagedType.U1)] bool configured,
      string[] configuredTSNames)
    {
      InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv10\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cbool\u002Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u002CSystem\u003A\u003AString\u0020\u005E\u002Cunsigned\u0020int\u002Cunsigned\u0020int\u002Cbool\u002Cbool\u002Cbool\u002Ccli\u003A\u003Aarray\u003CSystem\u003A\u003AString\u0020\u005E\u0020\u003E\u005E\u003E\u0020\u005E\u003E(new dv10<TuneRequest, bool, byte[], string, uint, uint, bool, bool, bool, string[]>(this.TPSetRecorderConfigEx).BeginInvoke(tr, useSTB, IRBlob, name, viewOrder, recordOrder, prefView, prefRecord, configured, configuredTSNames, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SetRecorderConfig");
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool UseSTB
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        bool useStb1;
        try
        {
          lock2 = lock1;
          if (this.m_bUseSTB.HasValue)
            useStb1 = this.m_bUseSTB.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return useStb1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetRecorderConfig).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::UseSTB::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        bool useStb2;
        try
        {
          lock4 = lock3;
          useStb2 = this.m_bUseSTB.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return useStb2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public byte[] IRControlBlob
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        byte[] irControlBlob1;
        try
        {
          lock2 = lock1;
          if (this.m_bUseSTB.HasValue)
            irControlBlob1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u003E(this.m_IRControlBlob);
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return irControlBlob1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetRecorderConfig).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::IRControlBlob::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        byte[] irControlBlob2;
        try
        {
          lock4 = lock3;
          irControlBlob2 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u003E(this.m_IRControlBlob);
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return irControlBlob2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public TuneRequest ConfiguredDefaultTuneRequest
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        TuneRequest defaultTuneRequest1;
        try
        {
          lock2 = lock1;
          if (this.m_bUseSTB.HasValue)
            defaultTuneRequest1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E(this.m_ConfiguredDefaultTR);
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return defaultTuneRequest1;
label_5:
        lock2.Dispose();
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPGetRecorderConfig).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::ConfiguredDefaultTuneRequest::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        TuneRequest defaultTuneRequest2;
        try
        {
          lock4 = lock3;
          defaultTuneRequest2 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E(this.m_ConfiguredDefaultTR);
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return defaultTuneRequest2;
      }
    }

    public ulong get_BitRate(RecorderStreamType rst) => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad1\u003Cunsigned\u0020__int64\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderStreamType\u003E\u0020\u005E\u002Cunsigned\u0020__int64\u003E(new d1<ulong, RecorderStreamType>(this.TPGetBitRate).BeginInvoke(rst, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::BitRate::get");

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public int SignalStrength => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003Clong\u003E\u0020\u005E\u002Clong\u003E(new d0<int>(this.TPGetSignalStrength).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SignalStrength::get");

    public string get_MMIMessage(byte dialogNumber) => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad1\u003CSystem\u003A\u003AString\u0020\u005E\u002Cunsigned\u0020char\u003E\u0020\u005E\u002CSystem\u003A\u003AString\u0020\u005E\u003E(new d1<string, byte>(this.TPGetMMIMessage).BeginInvoke(dialogNumber, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::MMIMessage::get");

    public void NotifyMMIClosed(byte dialogNumber, MMICloseReasonType closeReason) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv2\u003Cunsigned\u0020char\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003AMMICloseReasonType\u003E\u0020\u005E\u003E(new dv2<byte, MMICloseReasonType>(this.TPNotifyMMIClosed).BeginInvoke(dialogNumber, closeReason, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::NotifyMMIClosed");

    public void GetEASEventInfo(
      uint eventID,
      string ISO639Code,
      out TuneRequest tr,
      out uint startTime,
      out ushort duration,
      out string activationNature,
      out string alertMessage)
    {
      InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv2\u003Cunsigned\u0020int\u002CSystem\u003A\u003AString\u0020\u005E\u003E\u0020\u005E\u003E(new dv2<uint, string>(this.TPGetEASEventInfo).BeginInvoke(eventID, ISO639Code, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::GetEASEventInfo");
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        tr = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E(this.m_EASTR);
        startTime = this.m_StartTime;
        duration = this.m_Duration;
        activationNature = this.m_ActivationNature;
        alertMessage = this.m_AlertMessage;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    [return: MarshalAs(UnmanagedType.U1)]
    public bool GetCasCardStatus(out CasCardStatusType status, out CasCardAssociationType assoc)
    {
      bool casCardStatus = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003Cbool\u003E\u0020\u005E\u002Cbool\u003E(new d0<bool>(this.TPGetCASCardStatus).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::GetCasCardStatus");
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        status = this.m_CasStatus;
        assoc = this.m_CasAssoc;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return casCardStatus;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public SmartCardApplication[] SmartCardApplications => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003Ccli\u003A\u003Aarray\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASmartCardApplication\u0020\u005E\u0020\u003E\u005E\u003E\u0020\u005E\u002Ccli\u003A\u003Aarray\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASmartCardApplication\u0020\u005E\u0020\u003E\u005E\u003E(new d0<SmartCardApplication[]>(this.TPGetSmartCardApplications).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SmartCardApplications::get");

    public object get_Diagnostic(string propertyName) => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad1\u003CSystem\u003A\u003AObject\u0020\u005E\u002CSystem\u003A\u003AString\u0020\u005E\u003E\u0020\u005E\u002CSystem\u003A\u003AObject\u0020\u005E\u003E(new d1<object, string>(this.TPGetDiagnosticProperty).BeginInvoke(propertyName, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::Diagnostic::get");

    public void PerformDRMPairing() => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPPerformDRMPairing).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::PerformDRMPairing");

    public int GetDRMPairingStatus(out DrmPairingStatus status)
    {
      int drmPairingStatus = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003Clong\u003E\u0020\u005E\u002Clong\u003E(new d0<int>(this.TPGetDRMPairingStatus).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::GetDRMPairingStatus");
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        status = this.m_DrmStatus;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return drmPairingStatus;
    }

    public uint CheckEntitlementToken(
      BDA_CONDITIONALACCESS_REQUESTTYPE request,
      byte[] token,
      [MarshalAs(UnmanagedType.U1)] bool expectDialog,
      string language,
      out uint dialogRequest)
    {
      uint num = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad4\u003Cunsigned\u0020int\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ABDA_CONDITIONALACCESS_REQUESTTYPE\u002Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u002Cbool\u002CSystem\u003A\u003AString\u0020\u005E\u003E\u0020\u005E\u002Cunsigned\u0020int\u003E(new d4<uint, BDA_CONDITIONALACCESS_REQUESTTYPE, byte[], bool, string>(this.TPCheckEntitlementToken).BeginInvoke(request, token, expectDialog, language, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::CheckEntitlementToken");
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        dialogRequest = this.m_DialogRequest;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return num;
    }

    public void SetCaptureToken(byte[] token) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u003E\u0020\u005E\u003E(new dv1<byte[]>(this.TPSetCaptureToken).BeginInvoke(token, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SetCaptureToken");

    public uint OpenBroadcastMmi(uint eventID, [MarshalAs(UnmanagedType.U1)] bool expectDialog, string language) => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad3\u003Cunsigned\u0020int\u002Cunsigned\u0020int\u002Cbool\u002CSystem\u003A\u003AString\u0020\u005E\u003E\u0020\u005E\u002Cunsigned\u0020int\u003E(new d3<uint, uint, bool, string>(this.TPOpenBroadcastMmi).BeginInvoke(eventID, expectDialog, language, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::OpenBroadcastMmi");

    public uint CloseMmiDialog(
      uint dialogNumber,
      BDA_CONDITIONALACCESS_MMICLOSEREASON reason,
      [MarshalAs(UnmanagedType.U1)] bool expectDialog,
      string language,
      out uint dialogRequest)
    {
      uint num = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad4\u003Cunsigned\u0020int\u002Cunsigned\u0020int\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ABDA_CONDITIONALACCESS_MMICLOSEREASON\u002Cbool\u002CSystem\u003A\u003AString\u0020\u005E\u003E\u0020\u005E\u002Cunsigned\u0020int\u003E(new d4<uint, uint, BDA_CONDITIONALACCESS_MMICLOSEREASON, bool, string>(this.TPCloseMmiDialog).BeginInvoke(dialogNumber, reason, expectDialog, language, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::CloseMmiDialog");
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        dialogRequest = this.m_DialogRequest;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return num;
    }

    public string get_GPNVSName(uint eventID) => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad1\u003CSystem\u003A\u003AString\u0020\u005E\u002Cunsigned\u0020int\u003E\u0020\u005E\u002CSystem\u003A\u003AString\u0020\u005E\u003E(new d1<string, uint>(this.TPGPNVSNameByIndex).BeginInvoke(eventID, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::GPNVSName::get");

    public string get_GPNVSValue(string name, string language) => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad2\u003CSystem\u003A\u003AString\u0020\u005E\u002CSystem\u003A\u003AString\u0020const\u0020\u005E\u002CSystem\u003A\u003AString\u0020const\u0020\u005E\u003E\u0020\u005E\u002CSystem\u003A\u003AString\u0020\u005E\u003E(new d2<string, string, string>(this.TPGetGPNVSValue).BeginInvoke(name, language, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::GPNVSValue::get");

    public uint SetGPNVSValue(string name, string language, [MarshalAs(UnmanagedType.U1)] bool expectDialog, string value) => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad4\u003Cunsigned\u0020int\u002CSystem\u003A\u003AString\u0020const\u0020\u005E\u002CSystem\u003A\u003AString\u0020const\u0020\u005E\u002Cbool\u002CSystem\u003A\u003AString\u0020const\u0020\u005E\u003E\u0020\u005E\u002Cunsigned\u0020int\u003E(new d4<uint, string, string, bool, string>(this.TPSetGPNVSValue).BeginInvoke(name, language, expectDialog, value, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SetGPNVSValue");

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool DoesSupportDiseqc
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        bool doesSupportDiseqc1;
        try
        {
          lock2 = lock1;
          if (this.m_DoesDiseqC.HasValue)
            doesSupportDiseqc1 = this.m_DoesDiseqC.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return doesSupportDiseqc1;
label_5:
        lock2.Dispose();
        bool flag = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003Cbool\u003E\u0020\u005E\u002Cbool\u003E(new d0<bool>(this.TPDoesSupportDiseqC).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::DoesSupportDiseqc::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        bool doesSupportDiseqc2;
        try
        {
          lock4 = lock3;
          this.m_DoesDiseqC = (bool?) flag;
          doesSupportDiseqc2 = this.m_DoesDiseqC.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return doesSupportDiseqc2;
      }
    }

    public void SetIsdbCasRequest(uint requestID, byte[] command) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv2\u003Cunsigned\u0020int\u002Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u003E\u0020\u005E\u003E(new dv2<uint, byte[]>(this.TPSetIsdbCasRequest).BeginInvoke(requestID, command, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SetIsdbCasRequest");

    public uint PurchaseEntitlement(
      [MarshalAs(UnmanagedType.U1)] bool expectDialog,
      byte[] token,
      string language,
      out uint dialogRequest,
      out byte[] captureToken)
    {
      uint num = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad3\u003Cunsigned\u0020int\u002Cbool\u002Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u002CSystem\u003A\u003AString\u0020\u005E\u003E\u0020\u005E\u002Cunsigned\u0020int\u003E(new d3<uint, bool, byte[], string>(this.TPPurchaseEntitlement).BeginInvoke(expectDialog, token, language, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::PurchaseEntitlement");
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        dialogRequest = this.m_DialogRequest;
        captureToken = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u003E(this.m_CaptureToken);
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return num;
    }

    public void CancelCaptureToken(byte[] token) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u003E\u0020\u005E\u003E(new dv1<byte[]>(this.TPCancelCaptureToken).BeginInvoke(token, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::CancelCaptureToken");

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool SupportsConditionalAccess
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        bool conditionalAccess1;
        try
        {
          lock2 = lock1;
          if (this.m_SupportsConditionalAccess.HasValue)
            conditionalAccess1 = this.m_SupportsConditionalAccess.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return conditionalAccess1;
label_5:
        lock2.Dispose();
        bool flag = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003Cbool\u003E\u0020\u005E\u002Cbool\u003E(new d0<bool>(this.TPSupportsConditionalAccess).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SupportsConditionalAccess::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        bool conditionalAccess2;
        try
        {
          lock4 = lock3;
          this.m_SupportsConditionalAccess = (bool?) flag;
          conditionalAccess2 = this.m_SupportsConditionalAccess.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return conditionalAccess2;
      }
    }

    public void RenewLicenses(
      string fileName,
      string expiredKid,
      uint callersId,
      [MarshalAs(UnmanagedType.U1)] bool highPriority)
    {
      InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv4\u003CSystem\u003A\u003AString\u0020\u005E\u002CSystem\u003A\u003AString\u0020\u005E\u002Cunsigned\u0020int\u002Cbool\u003E\u0020\u005E\u003E(new dv4<string, string, uint, bool>(this.TPRenewLicenses).BeginInvoke(fileName, expiredKid, callersId, highPriority, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::RenewLicenses");
    }

    [return: MarshalAs(UnmanagedType.U1)]
    public bool SupportsPBDAScanning(out Guid guid)
    {
      if (this.m_SupportsPBDAScanning.HasValue)
      {
        guid = this.m_GuideTypeGuid;
        return this.m_SupportsPBDAScanning.Value;
      }
      bool flag1 = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003Cbool\u003E\u0020\u005E\u002Cbool\u003E(new d0<bool>(this.TPSupportsPBDAScanning).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SupportsPBDAScanning");
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      bool flag2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        guid = this.m_GuideTypeGuid;
        this.m_SupportsPBDAScanning = (bool?) flag1;
        flag2 = this.m_SupportsPBDAScanning.Value;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return flag2;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool PassiveClientsExist
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        bool passiveClientsExist1;
        try
        {
          lock2 = lock1;
          if (this.m_PassiveClientsExist.HasValue)
            passiveClientsExist1 = this.m_PassiveClientsExist.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return passiveClientsExist1;
label_5:
        lock2.Dispose();
        bool flag = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003Cbool\u003E\u0020\u005E\u002Cbool\u003E(new d0<bool>(this.TPPassiveClientsExist).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::PassiveClientsExist::get");
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        bool passiveClientsExist2;
        try
        {
          lock4 = lock3;
          this.m_PassiveClientsExist = (bool?) flag;
          passiveClientsExist2 = this.m_PassiveClientsExist.Value;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return passiveClientsExist2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsPbda
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        bool isPbda1;
        try
        {
          lock2 = lock1;
          if (this.m_IsPbda.HasValue)
            isPbda1 = this.m_IsPbda.Value;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return isPbda1;
label_5:
        lock2.Dispose();
        try
        {
          string pbdaDeviceLanguage = this.PbdaDeviceLanguage;
          string str = this.get_GPNVSValue(GpnvsNames.DeviceId, pbdaDeviceLanguage);
          @lock lock3 = new @lock(this.m_Lock);
          @lock lock4;
          try
          {
            lock4 = lock3;
            if (str != (string) null)
              this.m_IsPbda = (bool?) true;
          }
          __fault
          {
            lock4.Dispose();
          }
          lock4.Dispose();
        }
        catch (COMException ex)
        {
          @lock lock5 = new @lock(this.m_Lock);
          @lock lock6;
          try
          {
            lock6 = lock5;
            this.m_IsPbda = ex.ErrorCode != -2147467262 ? (bool?) false : (bool?) true;
          }
          __fault
          {
            lock6.Dispose();
          }
          lock6.Dispose();
        }
        catch (NotImplementedException ex)
        {
          @lock lock7 = new @lock(this.m_Lock);
          @lock lock8;
          try
          {
            lock8 = lock7;
            this.m_IsPbda = (bool?) false;
          }
          __fault
          {
            lock8.Dispose();
          }
          lock8.Dispose();
        }
        @lock lock9 = new @lock(this.m_Lock);
        @lock lock10;
        bool isPbda2;
        try
        {
          lock10 = lock9;
          isPbda2 = this.m_IsPbda.Value;
        }
        __fault
        {
          lock10.Dispose();
        }
        lock10.Dispose();
        return isPbda2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string BcasId
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        string bcasId1;
        try
        {
          lock2 = lock1;
          if (this.m_BcasId != (string) null)
            bcasId1 = this.m_BcasId;
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return bcasId1;
label_5:
        lock2.Dispose();
        string bcasId2 = "";
        try
        {
          string pbdaDeviceLanguage = this.PbdaDeviceLanguage;
          bcasId2 = this.get_GPNVSValue(GpnvsNames.BcasId, pbdaDeviceLanguage);
        }
        catch (NotImplementedException ex)
        {
        }
        @lock lock3 = new @lock(this.m_Lock);
        @lock lock4;
        try
        {
          lock4 = lock3;
          this.m_BcasId = bcasId2;
        }
        __fault
        {
          lock4.Dispose();
        }
        lock4.Dispose();
        return bcasId2;
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsRecording
    {
      [return: MarshalAs(UnmanagedType.U1)] get => this.SIID != -1;
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsRadio
    {
      [return: MarshalAs(UnmanagedType.U1)] get => this.CurrentTuneRequest != null && typeof (AnalogRadioTuningSpace).IsAssignableFrom(((object) this.CurrentTuneRequest.TuningSpace).GetType());
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool IsTV
    {
      [return: MarshalAs(UnmanagedType.U1)] get => this.CurrentTuneRequest != null && !this.IsRecording && this.IsBusy && !this.IsRadio;
    }

    [return: MarshalAs(UnmanagedType.U1)]
    public bool IsConfiguredTuningSpace(string name)
    {
      string[] configuredTuningSpaces = this.ConfiguredTuningSpaces;
      if (configuredTuningSpaces != null)
      {
        int index = 0;
        if (0 < configuredTuningSpaces.Length)
        {
          do
          {
            string str = configuredTuningSpaces[index];
            if (!(name == str))
              ++index;
            else
              goto label_4;
          }
          while (index < configuredTuningSpaces.Length);
          goto label_5;
label_4:
          return true;
        }
      }
label_5:
      return false;
    }

    public void SetTunerUseReason(TunerUseReason useReason) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATunerUseReason\u003E\u0020\u005E\u003E(new dv1<TunerUseReason>(this.TPSetTunerUseReason).BeginInvoke(useReason, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::SetTunerUseReason");

    public uint GetUserActivityInterval() => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003Cunsigned\u0020int\u003E\u0020\u005E\u002Cunsigned\u0020int\u003E(new d0<uint>(this.TPGetUserActivityInterval).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::GetUserActivityInterval");

    public void UserActivityDetected() => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPUserActivityDetected).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::UserActivityDetected");

    public void Advise(Guid g) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CSystem\u003A\u003AGuid\u003E\u0020\u005E\u003E(new dv1<Guid>(this.TPAdvise).BeginInvoke(g, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::Tuner::Advise");

    internal void OnESEvent(Guid gtype, Microsoft.MediaCenter.TV.Tuning.ESEvent ese)
    {
      if (ese == null)
        return;
      if (typeof (ESValueUpdatedEvent).IsAssignableFrom(((object) ese).GetType()))
      {
        string[] valueNames = ((ESValueUpdatedEvent) ese).GetValueNames();
        int index = 0;
        if (0 < valueNames.Length)
        {
          do
          {
            if (0 == string.Compare(valueNames[index], GpnvsNames.BcasId, StringComparison.Ordinal))
              this.m_BcasId = (string) null;
            ++index;
          }
          while (index < valueNames.Length);
        }
      }
      if (typeof (ESSignalAndServiceStatusEvent).IsAssignableFrom(((object) ese).GetType()))
        this.SignalAndServiceStatusChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<SignalAndServiceStatusState>(((ESSignalAndServiceStatusEvent) ese).State));
      else
        this.ESEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs2<Guid, Microsoft.MediaCenter.TV.Tuning.ESEvent>(gtype, ese));
      ((IDisposable) ese).Dispose();
    }

    internal void OnProfileChanged(string profile)
    {
      this._profile = profile;
      this.ProfileChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<string>(profile));
    }

    internal void OnUsageChanged([MarshalAs(UnmanagedType.U1)] bool busy) => this.UsageChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<bool>(busy));

    internal void OnEncoderSettingsChanged(uint video, uint audio) => this.EncoderSettingsChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs2<uint, uint>(video, audio));

    internal void OnTuningChanged(TuneRequest tr) => this.TuningChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<TuneRequest>(tr));

    internal void OnError(int hr) => this.ErrorEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<int>(hr));

    internal void OnStateChanged(ushort oldState, ushort newState) => this.StateChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs2<ushort, ushort>(oldState, newState));

    internal void OnReady([MarshalAs(UnmanagedType.U1)] bool ready)
    {
      Tuner.TunerNotificationEventArgs1<bool> e = new Tuner.TunerNotificationEventArgs1<bool>(ready);
      this.ClearCache();
      this.ReadyEvent.raise_Event((object) this, e);
    }

    internal void OnCertificate([MarshalAs(UnmanagedType.U1)] bool success) => this.CertificateEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<bool>(success));

    internal void OnEncryption([MarshalAs(UnmanagedType.U1)] bool on) => this.EncryptionEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<bool>(on));

    internal void OnWriteFailure() => this.WriteFailureEvent.raise_Event((object) this, new EventArgs());

    internal void OnContentSIIDChanged(int siid) => this.ContentSIIDChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<int>(siid));

    internal void OnBitRateChanged(
      RecorderStreamType st,
      RecorderBitRateChangeType brt,
      ulong rate)
    {
      this.BitRateChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs3<RecorderStreamType, RecorderBitRateChangeType, ulong>(st, brt, rate));
    }

    internal void OnChannelAvailable([MarshalAs(UnmanagedType.U1)] bool available) => this.ChannelAvailableEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<bool>(available));

    internal void OnStatusChanged(RecorderUse prev, RecorderUse current) => this.StatusChangedEvent.raise_Event((object) this, new EventArgs());

    internal void OnRatingChanged(
      EnTvRat_System PrevRatingSystem,
      EnTvRat_GenericLevel PrevLevel,
      BfEnTvRat_GenericAttributes PrevAttributes,
      EnTvRat_System NewRatingSystem,
      EnTvRat_GenericLevel NewLevel,
      BfEnTvRat_GenericAttributes NewAttributes)
    {
      this.RatingChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs6<EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes, EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes>(PrevRatingSystem, PrevLevel, PrevAttributes, NewRatingSystem, NewLevel, NewAttributes));
    }

    internal void OnProtectionTypeChanged(ProtType protType) => this.ProtectionTypeChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<ProtType>(protType));

    internal void OnEasReceived(uint eventID, EasPriorityType priority) => this.EasReceivedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs2<uint, EasPriorityType>(eventID, priority));

    internal void OnMMIReceived([MarshalAs(UnmanagedType.U1)] bool open, uint dialogNumber) => this.MMIReceivedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs2<bool, uint>(open, dialogNumber));

    internal void OnCasCardStatusChanged(CasCardStatusType cardStatus) => this.CasCardStatusChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<CasCardStatusType>(cardStatus));

    internal void OnDrmPairingStatusChanged(DrmPairingStatus cardStatus) => this.DrmPairingStatusChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<DrmPairingStatus>(cardStatus));

    internal void OnCasEntitlementChanged(CasEntitlementType cardStatus) => this.CasEntitlementChangedEvent.raise_Event((object) this, new Tuner.TunerNotificationEventArgs1<CasEntitlementType>(cardStatus));

    internal void OnWriteFailureClear() => this.WriteFailureClearEvent.raise_Event((object) this, new EventArgs());

    internal unsafe int NativeESEventReceived(_GUID gtype, IESEvent* pESEvent)
    {
      Microsoft.MediaCenter.TV.Tuning.ESEvent eventStructIesEvent = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalNativeToManagedNoCleanup\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003AESEventMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003AESEvent\u0020\u005E\u002Cstruct\u0020IESEvent\u0020\u002A\u003E(pESEvent);
      this.OnESEvent(*(Guid*) (int) &gtype, eventStructIesEvent);
      return 0;
    }

    internal unsafe int NativeProfileChanged(ushort* wzProfile)
    {
      dv1<string> dv1 = new dv1<string>(this.OnProfileChanged);
      string a1 = (string) null;
      if ((IntPtr) wzProfile != IntPtr.Zero)
        a1 = new string((char*) wzProfile);
      dv1.BeginInvoke(a1, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeUsageChanged(short isBusy)
    {
      bool a1 = isBusy == (short) -1;
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_Busy = (bool?) a1;
        this.m_Use = new RecorderUse?();
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      dv1<bool> dv1 = new dv1<bool>(this.OnUsageChanged);
      dv1.BeginInvoke(a1, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Cbool\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeEncoderSettingsChanged(uint dwVideo, uint dwAudio)
    {
      dv2<uint, uint> dv2 = new dv2<uint, uint>(this.OnEncoderSettingsChanged);
      dv2.BeginInvoke(dwVideo, dwAudio, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv2\u003Cunsigned\u0020int\u002Cunsigned\u0020int\u003E\u0020\u005E\u003E), (object) dv2);
      return 0;
    }

    internal unsafe int NativeTuningChanged(ITuneRequest* pTuneRequest)
    {
      TuneRequest structItuneRequest = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalNativeToManagedNoCleanup\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequestMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cstruct\u0020ITuneRequest\u0020\u002A\u003E(pTuneRequest);
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        ((IDisposable) this.m_CurrentTR)?.Dispose();
        this.m_CurrentTR = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E(structItuneRequest);
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      dv1<TuneRequest> dv1 = new dv1<TuneRequest>(this.OnTuningChanged);
      dv1.BeginInvoke(structItuneRequest, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeTunerError(int hr)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_hr = (int?) hr;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      dv1<int> dv1 = new dv1<int>(this.OnError);
      dv1.BeginInvoke(hr, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Clong\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeTunerStateChanged(short oldState, short newState)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_State = (int?) (int) newState;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      dv2<ushort, ushort> dv2 = new dv2<ushort, ushort>(this.OnStateChanged);
      dv2.BeginInvoke((ushort) oldState, (ushort) newState, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv2\u003Cunsigned\u0020short\u002Cunsigned\u0020short\u003E\u0020\u005E\u003E), (object) dv2);
      return 0;
    }

    internal int NativeTunerAvailable(short bAvailable)
    {
      bool a1 = bAvailable == (short) -1;
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_hr = !a1 ? (int?) -2147024841 : (int?) 0;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      dv1<bool> dv1 = new dv1<bool>(this.OnReady);
      dv1.BeginInvoke(a1, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Cbool\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeCertificate(short bSuccess)
    {
      dv1<bool> dv1 = new dv1<bool>(this.OnCertificate);
      int num = bSuccess == (short) -1 ? 1 : 0;
      dv1.BeginInvoke(num != 0, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Cbool\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeEncryption(short bOn)
    {
      dv1<bool> dv1 = new dv1<bool>(this.OnEncryption);
      int num = bOn == (short) -1 ? 1 : 0;
      dv1.BeginInvoke(num != 0, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Cbool\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeWriteFailure()
    {
      dv0 dv0 = new dv0(this.OnWriteFailure);
      dv0.BeginInvoke(new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E), (object) dv0);
      return 0;
    }

    internal int NativeContentSIIDChanged(int SIID)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_SIID = (int?) SIID;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      dv1<int> dv1 = new dv1<int>(this.OnContentSIIDChanged);
      dv1.BeginInvoke(SIID, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Cint\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeBitRateChanged(
      global::RecorderStreamType st,
      global::RecorderBitRateChangeType brt,
      ulong rate)
    {
      dv3<RecorderStreamType, RecorderBitRateChangeType, ulong> dv3 = new dv3<RecorderStreamType, RecorderBitRateChangeType, ulong>(this.OnBitRateChanged);
      dv3.BeginInvoke((RecorderStreamType) st, (RecorderBitRateChangeType) brt, rate, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv3\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderStreamType\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderBitRateChangeType\u002Cunsigned\u0020__int64\u003E\u0020\u005E\u003E), (object) dv3);
      return 0;
    }

    internal int NativeChannelAvailable(short bAvailable)
    {
      int num = bAvailable == (short) -1 ? 1 : 0;
      dv1<bool> dv1 = new dv1<bool>(this.OnChannelAvailable);
      dv1.BeginInvoke(num != 0, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Cbool\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeStatusChanged(global::RecorderUse prevStatus, global::RecorderUse currentStatus)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_Use = (RecorderUse?) (RecorderUse) currentStatus;
        ((IDisposable) this.m_CurrentTR)?.Dispose();
        this.m_CurrentTR = (TuneRequest) null;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      dv2<RecorderUse, RecorderUse> dv2 = new dv2<RecorderUse, RecorderUse>(this.OnStatusChanged);
      dv2.BeginInvoke((RecorderUse) prevStatus, (RecorderUse) currentStatus, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv2\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u003E\u0020\u005E\u003E), (object) dv2);
      return 0;
    }

    internal int NativeRatingChanged(
      global::EnTvRat_System PrevRatingSystem,
      global::EnTvRat_GenericLevel PrevLevel,
      global::BfEnTvRat_GenericAttributes PrevAttributes,
      global::EnTvRat_System NewRatingSystem,
      global::EnTvRat_GenericLevel NewLevel,
      global::BfEnTvRat_GenericAttributes NewAttributes)
    {
      dv6<EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes, EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes> dv6 = new dv6<EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes, EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes>(this.OnRatingChanged);
      dv6.BeginInvoke((EnTvRat_System) PrevRatingSystem, (EnTvRat_GenericLevel) PrevLevel, (BfEnTvRat_GenericAttributes) PrevAttributes, (EnTvRat_System) NewRatingSystem, (EnTvRat_GenericLevel) NewLevel, (BfEnTvRat_GenericAttributes) NewAttributes, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv6\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003AEnTvRat_System\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003AEnTvRat_GenericLevel\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ABfEnTvRat_GenericAttributes\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003AEnTvRat_System\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003AEnTvRat_GenericLevel\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ABfEnTvRat_GenericAttributes\u003E\u0020\u005E\u003E), (object) dv6);
      return 0;
    }

    internal int NativeProtectionType(global::ProtType dwType)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_CPType = (ProtType?) (ProtType) dwType;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      dv1<ProtType> dv1 = new dv1<ProtType>(this.OnProtectionTypeChanged);
      dv1.BeginInvoke((ProtType) dwType, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003AProtType\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeEasReceived(uint dwEventId, global::EasPriorityType Priority)
    {
      dv2<uint, EasPriorityType> dv2 = new dv2<uint, EasPriorityType>(this.OnEasReceived);
      dv2.BeginInvoke(dwEventId, (EasPriorityType) Priority, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv2\u003Cunsigned\u0020int\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003AEasPriorityType\u003E\u0020\u005E\u003E), (object) dv2);
      return 0;
    }

    internal int NativeMMIReceived(short fOpen, uint dwDialogNumber)
    {
      dv2<bool, uint> dv2 = new dv2<bool, uint>(this.OnMMIReceived);
      int num = fOpen == (short) -1 ? 1 : 0;
      dv2.BeginInvoke(num != 0, dwDialogNumber, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv2\u003Cbool\u002Cunsigned\u0020int\u003E\u0020\u005E\u003E), (object) dv2);
      return 0;
    }

    internal int NativeCasCardStatusChanged(global::CasCardStatusType CardStatus)
    {
      dv1<CasCardStatusType> dv1 = new dv1<CasCardStatusType>(this.OnCasCardStatusChanged);
      dv1.BeginInvoke((CasCardStatusType) CardStatus, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ACasCardStatusType\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeDrmPairingStatusChanged(global::DrmPairingStatus DrmPairingState)
    {
      dv1<DrmPairingStatus> dv1 = new dv1<DrmPairingStatus>(this.OnDrmPairingStatusChanged);
      dv1.BeginInvoke((DrmPairingStatus) DrmPairingState, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ADrmPairingStatus\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeEntitlementChanged(global::CasEntitlementType CasEntitlementStatus)
    {
      dv1<CasEntitlementType> dv1 = new dv1<CasEntitlementType>(this.OnCasEntitlementChanged);
      dv1.BeginInvoke((CasEntitlementType) CasEntitlementStatus, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ACasEntitlementType\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal int NativeWriteFailureClear()
    {
      dv0 dv0 = new dv0(this.OnWriteFailureClear);
      dv0.BeginInvoke(new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E), (object) dv0);
      return 0;
    }

    protected override void Dispose([MarshalAs(UnmanagedType.U1)] bool _param1)
    {
      if (_param1)
      {
        try
        {
          this.\u007ETuner();
        }
        finally
        {
          base.Dispose(true);
        }
      }
      else
      {
        try
        {
          this.\u0021Tuner();
        }
        finally
        {
          base.Dispose(false);
        }
      }
    }

    ~Tuner() => this.Dispose(false);

    public class TunerNotificationEventArgs1<A1> : EventArgs
    {
      public A1 a1;

      public TunerNotificationEventArgs1()
      {
      }

      public TunerNotificationEventArgs1(A1 a1i)
      {
        this.a1 = a1i;
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }
    }

    public class TunerNotificationEventArgs2<A1, A2> : EventArgs
    {
      public A1 a1;
      public A2 a2;

      public TunerNotificationEventArgs2()
      {
      }

      public TunerNotificationEventArgs2(A1 a1i, A2 a2i)
      {
        this.a1 = a1i;
        this.a2 = a2i;
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }
    }

    public class TunerNotificationEventArgs3<A1, A2, A3> : EventArgs
    {
      public A1 a1;
      public A2 a2;
      public A3 a3;

      public TunerNotificationEventArgs3()
      {
      }

      public TunerNotificationEventArgs3(A1 a1i, A2 a2i, A3 a3i)
      {
        this.a1 = a1i;
        this.a2 = a2i;
        this.a3 = a3i;
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }
    }

    public class TunerNotificationEventArgs6<A1, A2, A3, A4, A5, A6> : EventArgs
    {
      public A1 a1;
      public A2 a2;
      public A3 a3;
      public A4 a4;
      public A5 a5;
      public A6 a6;

      public TunerNotificationEventArgs6()
      {
      }

      public TunerNotificationEventArgs6(A1 a1i, A2 a2i, A3 a3i, A4 a4i, A5 a5i, A6 a6i)
      {
        this.a1 = a1i;
        this.a2 = a2i;
        this.a3 = a3i;
        this.a4 = a4i;
        this.a5 = a5i;
        this.a6 = a6i;
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }
    }

    public struct Evt<A1> where A1 : EventArgs
    {
      private EventHandler<A1> _event;

      public event EventHandler<A1> Event
      {
        add => this._event += value;
        remove => this._event -= value;
      }

      [SpecialName]
      public void raise_Event(object sender, A1 e)
      {
        EventHandler<A1> eventHandler = this._event;
        if (eventHandler == null)
          return;
        eventHandler(sender, e);
      }
    }
  }
}
