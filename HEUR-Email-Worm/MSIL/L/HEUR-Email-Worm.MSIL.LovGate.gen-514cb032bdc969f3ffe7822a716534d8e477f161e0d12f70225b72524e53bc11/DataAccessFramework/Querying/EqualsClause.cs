// Decompiled with JetBrains decompiler
// Type: DataAccessFramework.Querying.EqualsClause
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using System.Runtime.InteropServices;
using System.Text;

namespace DataAccessFramework.Querying
{
  public class EqualsClause : WherePart
  {
    private WherePart _left;
    private WherePart _right;

    public EqualsClause(WherePart left, WherePart right)
    {
      this._left = left;
      this._right = right;
    }

    internal override void BuildSql(BuildSqlContext sqlContext)
    {
label_1:
      int num1 = -532086065;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -608067547)) % 5U)
        {
          case 0:
            EqualsClause.\u206F⁭⁬⁬​⁫⁯‎‬‌‪‏‏⁮⁪​⁭‫⁯​‬‮⁮‫‬⁫‍⁫‮‮⁪⁮⁪⁫⁬⁪​‮⁮‪‮(sqlContext.Builder, \u003CModule\u003E.\u206B‏⁮‭⁬⁭‪‌​‮⁪‬‎⁪​​⁭‮⁬‪⁭‭‪‬⁬‮⁫⁫‮‎‮‏‫⁬⁪‌⁬‌‏⁫‮<string>(2116479970U));
            num1 = (int) num2 * -1838712070 ^ 615257214;
            continue;
          case 1:
            this._left.BuildSql(sqlContext);
            num1 = (int) num2 * 1150353884 ^ -808499442;
            continue;
          case 2:
            goto label_3;
          case 3:
            this._right.BuildSql(sqlContext);
            num1 = (int) num2 * 1999676843 ^ 2078881515;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public WherePart Left
    {
      get
      {
label_1:
        int num1 = -1118647373;
        WherePart left;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -645312463)) % 4U)
          {
            case 1:
              num1 = (int) num2 * 1957383241 ^ -2060061580;
              continue;
            case 2:
              left = this._left;
              num1 = (int) num2 * -897488973 ^ 1669048538;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return left;
      }
    }

    public WherePart Right
    {
      get
      {
        WherePart right = this._right;
label_1:
        int num1 = 1716134032;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1975714903)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 1625991370 ^ -1862310588;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return right;
      }
    }

    static StringBuilder \u206F⁭⁬⁬​⁫⁯‎‬‌‪‏‏⁮⁪​⁭‫⁯​‬‮⁮‫‬⁫‍⁫‮‮⁪⁮⁪⁫⁬⁪​‮⁮‪‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.Append(obj1);
    }
  }
}
