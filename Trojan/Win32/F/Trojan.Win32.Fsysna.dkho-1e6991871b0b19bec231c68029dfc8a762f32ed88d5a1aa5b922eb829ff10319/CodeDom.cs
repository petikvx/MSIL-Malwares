// Decompiled with JetBrains decompiler
// Type: Project_Unamed.CodeDom
// Assembly: Project Unnamed, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E14D2CAF-643A-42A5-AF85-1F02787E6112
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Fsysna.dkho-1e6991871b0b19bec231c68029dfc8a762f32ed88d5a1aa5b922eb829ff10319.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Project_Unamed
{
  public class CodeDom
  {
    [DebuggerNonUserCode]
    public CodeDom()
    {
    }

    public static void GenerateExecutable(string Output, string Source, string Icon)
    {
label_1:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_2:
        int num3 = 2;
        ICodeCompiler compiler = new VBCodeProvider().CreateCompiler();
label_3:
        num3 = 3;
        CompilerParameters options = new CompilerParameters();
label_4:
        num3 = 4;
        options.GenerateExecutable = true;
label_5:
        num3 = 5;
        options.OutputAssembly = Output;
label_6:
        num3 = 6;
        options.CompilerOptions = "/target:winexe";
label_7:
        num3 = 7;
        options.ReferencedAssemblies.Add("System.dll");
label_8:
        num3 = 8;
        options.ReferencedAssemblies.Add("System.Data.dll");
label_9:
        num3 = 9;
        options.ReferencedAssemblies.Add("System.Windows.Forms.dll");
label_10:
        num3 = 10;
        options.ReferencedAssemblies.Add("System.Drawing.dll");
label_11:
        num3 = 11;
        options.ReferencedAssemblies.Add("System.XML.dll");
label_12:
        num3 = 12;
        Dictionary<string, string> dictionary = new Dictionary<string, string>();
label_13:
        num3 = 13;
        dictionary.Add("CompilerVersion", "v2.0");
label_14:
        num3 = 14;
        string str = Path.GetTempPath() + "\\iCompiler.ico";
label_15:
        num3 = 15;
        if (Operators.CompareString(Icon, "", false) == 0)
          goto label_18;
label_16:
        num3 = 16;
        File.Copy(Icon, str);
label_17:
        num3 = 17;
        CompilerParameters compilerParameters = options;
        compilerParameters.CompilerOptions = compilerParameters.CompilerOptions + " /win32icon:" + str;
label_18:
label_19:
        num3 = 19;
        CompilerResults compilerResults = compiler.CompileAssemblyFromSource(options, Source);
label_20:
        num3 = 20;
        if (compilerResults.Errors.Count <= 0)
          goto label_29;
label_21:
        num3 = 21;
        IEnumerator enumerator = compilerResults.Errors.GetEnumerator();
        goto label_25;
label_23:
        num3 = 22;
        object objectValue;
        int num4 = (int) MessageBox.Show(Conversions.ToString(Operators.ConcatenateObject((object) "Error: ", NewLateBinding.LateGet(objectValue, (System.Type) null, "ErrorText", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))), "", MessageBoxButtons.OK, MessageBoxIcon.Hand);
label_24:
        num3 = 23;
label_25:
        if (enumerator.MoveNext())
        {
          objectValue = RuntimeHelpers.GetObjectValue(enumerator.Current);
          goto label_23;
        }
        else
        {
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
          goto label_30;
        }
label_29:
        num3 = 25;
        if (compilerResults.Errors.Count != 0)
          ;
label_30:
label_31:
        num3 = 27;
        if (Operators.CompareString(Icon, "", false) == 0)
          goto label_33;
label_32:
        num3 = 28;
        File.Delete(str);
label_33:
        goto label_40;
label_35:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_5;
              case 6:
                goto label_6;
              case 7:
                goto label_7;
              case 8:
                goto label_8;
              case 9:
                goto label_9;
              case 10:
                goto label_10;
              case 11:
                goto label_11;
              case 12:
                goto label_12;
              case 13:
                goto label_13;
              case 14:
                goto label_14;
              case 15:
                goto label_15;
              case 16:
                goto label_16;
              case 17:
                goto label_17;
              case 18:
                goto label_18;
              case 19:
                goto label_19;
              case 20:
                goto label_20;
              case 21:
                goto label_21;
              case 22:
                goto label_23;
              case 23:
                goto label_24;
              case 24:
              case 26:
                goto label_30;
              case 25:
                goto label_29;
              case 27:
                goto label_31;
              case 28:
                goto label_32;
              case 29:
                goto label_33;
              case 30:
                goto label_40;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_35;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_40:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }
  }
}
