// Decompiled with JetBrains decompiler
// Type: IRefl.Lists.DicOrderList
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Pools;
using IRefl.Watchers;
using ProjNet.Structs;
using ProjNet.Templates;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace IRefl.Lists
{
  internal class DicOrderList : ServiceObserverWatcher
  {
    private double _RoleRegistry;
    private double _AttrRegistry;
    private double _InitializerRegistry;
    private double m_ReaderRegistry;
    private double ruleRegistry;
    private double _WorkerRegistry;
    private double _CustomerRegistry;
    private double _UtilsRegistry;
    private double _BroadcasterRegistry;
    private double m_ServerRegistry;
    private double m_CodeRegistry;
    private double _ComposerRegistry;
    private double m_GetterRegistry;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DicOrderList(List<Config> asset)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      this.\u002Ector(asset, false);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DicOrderList(List<Config> spec, bool isreg)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      base.\u002Ector(spec, isreg);
      this.Name = "Transverse_Mercator";
      this.MapAdvisor("EPSG");
      this.PrintAdvisor(9807L);
      Config config1 = this.PushMerchant("scale_factor");
      Config config2 = this.PushMerchant("central_meridian");
      Config config3 = this.PushMerchant("latitude_of_origin");
      Config config4 = this.PushMerchant("false_easting");
      Config config5 = this.PushMerchant("false_northing");
      if (config1 == null)
        throw new ArgumentException("Missing projection parameter 'scale_factor'");
      if (config2 == null)
        throw new ArgumentException("Missing projection parameter 'central_meridian'");
      if (config3 == null)
        throw new ArgumentException("Missing projection parameter 'latitude_of_origin'");
      if (config4 == null)
        throw new ArgumentException("Missing projection parameter 'false_easting'");
      if (config5 == null)
        throw new ArgumentException("Missing projection parameter 'false_northing'");
      this._RoleRegistry = config1.CountRegistry();
      this._AttrRegistry = ValueObserverWatcher.PopAdvisor(config2.CountRegistry());
      this._InitializerRegistry = ValueObserverWatcher.PopAdvisor(config3.CountRegistry());
      this.m_GetterRegistry = config4.CountRegistry() * this.refRegistry;
      this._ComposerRegistry = config5.CountRegistry() * this.refRegistry;
      this._BroadcasterRegistry = 1.0 - Math.Pow(this._ConfigurationRegistry / this._InterpreterRegistry, 2.0);
      this._UtilsRegistry = Math.Sqrt(this._BroadcasterRegistry);
      this.m_ReaderRegistry = ServiceObserverWatcher.DeleteAdvisor(this._BroadcasterRegistry);
      this.ruleRegistry = ServiceObserverWatcher.RemoveAdvisor(this._BroadcasterRegistry);
      this._WorkerRegistry = ServiceObserverWatcher.DefineAdvisor(this._BroadcasterRegistry);
      this._CustomerRegistry = ServiceObserverWatcher.RunAdvisor(this._BroadcasterRegistry);
      this.m_CodeRegistry = this._InterpreterRegistry * ServiceObserverWatcher.NewAdvisor(this.m_ReaderRegistry, this.ruleRegistry, this._WorkerRegistry, this._CustomerRegistry, this._InitializerRegistry);
      this.m_ServerRegistry = this._BroadcasterRegistry / (1.0 - this._BroadcasterRegistry);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] ComputeMerchant(double[] setup)
    {
      int num1 = 6;
      double num2;
      double num3;
      double[] merchant;
      while (true)
      {
        int num4 = num1;
        double num5;
        double map;
        double num6;
        double num7;
        double dic;
        double x1;
        double num8;
        double x2;
        double x3;
        double x4;
        while (true)
        {
          switch (num4)
          {
            case 0:
              ServiceObserverWatcher.ConcatAdvisor(num6, out map, out dic);
              x1 = dic * num7;
              goto case 4;
            case 1:
            case 5:
              num6 = ValueObserverWatcher.PopAdvisor(setup[1]);
              num4 = 7;
              continue;
            case 2:
            case 7:
              num7 = ServiceObserverWatcher.MoveAdvisor(num5 - this._AttrRegistry);
              if (DicOrderList.CalculateModel())
              {
                num4 = 0;
                continue;
              }
              goto case 0;
            case 3:
              goto label_8;
            case 4:
              num8 = Math.Pow(x1, 2.0);
              x3 = this.m_ServerRegistry * Math.Pow(dic, 2.0);
              x4 = Math.Tan(num6);
              x2 = Math.Pow(x4, 2.0);
              if (true)
              {
                num4 = 8;
                continue;
              }
              goto label_14;
            case 6:
              goto label_1;
            case 8:
              goto label_2;
            case 9:
              goto label_14;
            default:
              num4 = 4;
              continue;
          }
        }
label_1:
        num5 = ValueObserverWatcher.PopAdvisor(setup[0]);
        num1 = 5;
        continue;
label_2:
        double num9 = this._InterpreterRegistry / Math.Sqrt(1.0 - this._BroadcasterRegistry * Math.Pow(map, 2.0));
        double num10 = this._InterpreterRegistry * ServiceObserverWatcher.NewAdvisor(this.m_ReaderRegistry, this.ruleRegistry, this._WorkerRegistry, this._CustomerRegistry, num6);
        num1 = 3;
        continue;
label_8:
        num2 = this._RoleRegistry * num9 * x1 * (1.0 + num8 / 6.0 * (1.0 - x2 + x3 + num8 / 20.0 * (5.0 - 18.0 * x2 + Math.Pow(x2, 2.0) + 72.0 * x3 - 58.0 * this.m_ServerRegistry))) + this.m_GetterRegistry;
        num3 = this._RoleRegistry * (num10 - this.m_CodeRegistry + num9 * x4 * (num8 * (0.5 + num8 / 24.0 * (5.0 - x2 + 9.0 * x3 + 4.0 * Math.Pow(x3, 2.0) + num8 / 30.0 * (61.0 - 58.0 * x2 + Math.Pow(x2, 2.0) + 600.0 * x3 - 330.0 * this.m_ServerRegistry))))) + this._ComposerRegistry;
        if (setup.Length >= 3)
        {
          merchant = new double[3]
          {
            num2 / this.refRegistry,
            num3 / this.refRegistry,
            setup[2]
          };
          num1 = 9;
        }
        else
          break;
      }
      merchant = new double[2]
      {
        num2 / this.refRegistry,
        num3 / this.refRegistry
      };
label_14:
      return merchant;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] ConcatMerchant(double[] init)
    {
      int num1 = 2;
      double[] numArray;
      if (true)
      {
        double key1;
        double key2;
        double i;
        while (true)
        {
          int num2;
          bool flag;
          long num3;
          double num4;
          double map;
          double dic;
          double x1;
          double x2;
          double num5;
          double d;
          double num6;
          double x3;
          double num7;
          double num8;
          long num9;
          switch (num1)
          {
            case 0:
              goto label_6;
            case 1:
              if (flag)
              {
                numArray = new double[2]
                {
                  ValueObserverWatcher.SetAdvisor(key1),
                  ValueObserverWatcher.SetAdvisor(key2)
                };
                num2 = 10;
                break;
              }
              goto label_1;
            case 2:
              num9 = 6L;
              num2 = 8;
              break;
            case 3:
            case 6:
              d = (this.m_CodeRegistry + i / this._RoleRegistry) / this._InterpreterRegistry;
              num4 = d;
              num3 = 0L;
              goto label_22;
            case 4:
            case 7:
              d = 1.0 - this._BroadcasterRegistry * Math.Pow(map, 2.0);
              double num10 = this._InterpreterRegistry / Math.Sqrt(d);
              double num11 = num10 * (1.0 - this._BroadcasterRegistry) / d;
              double x4 = num6 / (num10 * this._RoleRegistry);
              double num12 = Math.Pow(x4, 2.0);
              key2 = num4 - num10 * x1 * num12 / num11 * (0.5 - num12 / 24.0 * (5.0 + 3.0 * x3 + 10.0 * x2 - 4.0 * num5 - 9.0 * this.m_ServerRegistry - num12 / 30.0 * (61.0 + 90.0 * x3 + 298.0 * x2 + 45.0 * num7 - 252.0 * this.m_ServerRegistry - 3.0 * num5)));
              key1 = ServiceObserverWatcher.MoveAdvisor(this._AttrRegistry + x4 * (1.0 - num12 / 6.0 * (1.0 + 2.0 * x3 + x2 - num12 / 20.0 * (5.0 - 2.0 * x2 + 28.0 * x3 - 3.0 * num5 + 8.0 * this.m_ServerRegistry + 24.0 * num7))) / dic);
              num2 = 11;
              break;
            case 5:
              if (Math.Abs(num8) <= 1E-10)
              {
                if (Math.Abs(num4) >= Math.PI / 2.0)
                {
                  if (init.Length >= 3)
                  {
                    numArray = new double[3]
                    {
                      ValueObserverWatcher.SetAdvisor(Math.PI / 2.0 * ServiceObserverWatcher.ExcludeAdvisor(i)),
                      ValueObserverWatcher.SetAdvisor(this._AttrRegistry),
                      init[2]
                    };
                    num2 = 13;
                    break;
                  }
                  goto label_3;
                }
                else
                {
                  ServiceObserverWatcher.ConcatAdvisor(num4, out map, out dic);
                  x1 = Math.Tan(num4);
                  x2 = this.m_ServerRegistry * Math.Pow(dic, 2.0);
                  num5 = Math.Pow(x2, 2.0);
                  goto case 12;
                }
              }
              else if (num3 < num9)
              {
                ++num3;
                goto label_22;
              }
              else
              {
                num2 = 0;
                break;
              }
            case 8:
              num6 = init[0] * this.refRegistry - this.m_GetterRegistry;
              num1 = 9;
              continue;
            case 9:
              i = init[1] * this.refRegistry - this._ComposerRegistry;
              num2 = 6;
              break;
            case 10:
            case 13:
              goto label_25;
            case 11:
              flag = init.Length < 3;
              if (true)
              {
                num1 = 1;
                continue;
              }
              goto label_6;
            case 12:
              x3 = Math.Pow(x1, 2.0);
              num7 = Math.Pow(x3, 2.0);
              num1 = 4;
              continue;
            default:
              if (true)
              {
                num1 = 12;
                continue;
              }
              goto case 4;
          }
label_10:
          num1 = num2;
          continue;
label_22:
          num8 = (d + this.ruleRegistry * Math.Sin(2.0 * num4) - this._WorkerRegistry * Math.Sin(4.0 * num4) + this._CustomerRegistry * Math.Sin(6.0 * num4)) / this.m_ReaderRegistry - num4;
          num4 += num8;
          num2 = 5;
          goto label_10;
        }
label_1:
        numArray = new double[3]
        {
          ValueObserverWatcher.SetAdvisor(key1),
          ValueObserverWatcher.SetAdvisor(key2),
          init[2]
        };
        goto label_25;
label_3:
        numArray = new double[2]
        {
          ValueObserverWatcher.SetAdvisor(Math.PI / 2.0 * ServiceObserverWatcher.ExcludeAdvisor(i)),
          ValueObserverWatcher.SetAdvisor(this._AttrRegistry)
        };
        goto label_25;
label_6:
        throw new ArgumentException("Latitude failed to converge");
      }
label_25:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override OrderValuePool ManageItem()
    {
      int num1 = 1;
      OrderValuePool interceptorRegistry;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_3;
            case 2:
            case 3:
              goto label_1;
            case 4:
              goto label_4;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_8;
          }
        }
label_1:
        this.m_InterceptorRegistry = (ValueObserverWatcher) new DicOrderList(this.globalRegistry, !this._PropertyRegistry);
label_2:
        interceptorRegistry = (OrderValuePool) this.m_InterceptorRegistry;
        num1 = 5;
        continue;
label_3:
        bool flag = this.m_InterceptorRegistry == null;
        num1 = 4;
        continue;
label_4:
        if (!flag)
          goto label_2;
        else
          goto label_1;
      }
label_8:
      return interceptorRegistry;
    }

    internal static bool CalculateModel() => true;

    internal static bool MoveModel() => false;
  }
}
