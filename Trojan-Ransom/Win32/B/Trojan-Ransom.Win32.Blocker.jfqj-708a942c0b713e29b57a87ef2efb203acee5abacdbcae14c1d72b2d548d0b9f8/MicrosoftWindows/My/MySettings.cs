// Decompiled with JetBrains decompiler
// Type: MicrosoftWindows.My.MySettings
// Assembly: LethalKeyloggerStubFREE, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 12B6E305-10BE-45CE-A4E6-EBEF8841AF5F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Trojan-Ransom.Win32.Blocker.jfqj-708a942c0b713e29b57a87ef2efb203acee5abacdbcae14c1d72b2d548d0b9f8.exe

using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace MicrosoftWindows.My
{
  [CompilerGenerated]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    [NonSerialized]
    internal static \u0001.\u0001 \u0001;
    private static MySettings \u0001;
    private static bool \u0002;
    private static object \u0003;

    static MySettings()
    {
      \u0001.\u0002.\u0002();
      // ISSUE: reference to a compiler-generated field
      // ISSUE: object of a compiler-generated type is created
      MySettings.\u0001 = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
      // ISSUE: reference to a compiler-generated field
      MySettings.\u0003 = RuntimeHelpers.GetObjectValue(new object());
    }

    [DebuggerNonUserCode]
    public MySettings()
    {
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [DebuggerNonUserCode]
    private static void \u0002(object sender, EventArgs e)
    {
      if (!\u0002.\u0003.Application.SaveMySettingsOnExit)
        return;
      \u0003.\u0003.Settings.Save();
    }

    public static MySettings Default
    {
      get
      {
        if (!MySettings.\u0002)
        {
          object Expression = MySettings.\u0003;
          ObjectFlowControl.CheckForSyncLockOnValueType(Expression);
          Monitor.Enter(Expression);
          try
          {
            if (!MySettings.\u0002)
            {
              \u0002.\u0003.Application.Shutdown += (ShutdownEventHandler) ((sender, e) =>
              {
                if (!\u0002.\u0003.Application.SaveMySettingsOnExit)
                  return;
                \u0003.\u0003.Settings.Save();
              });
              MySettings.\u0002 = true;
            }
          }
          finally
          {
            Monitor.Exit(Expression);
          }
        }
        return MySettings.\u0001;
      }
    }

    [DefaultSettingValue("True")]
    [UserScopedSetting]
    [DebuggerNonUserCode]
    public bool runonce
    {
      get => Conversions.ToBoolean(this[MySettings.\u0001(1623)]);
      set => this[MySettings.\u0001(1623)] = (object) value;
    }
  }
}
