// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.IncomingWebResponseContext
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Globalization;
using System.Net;
using System.Runtime.InteropServices;
using System.ServiceModel.Channels;

namespace System.ServiceModel.Web
{
  [ComVisible(false)]
  public class IncomingWebResponseContext
  {
    private OperationContext operationContext;

    internal IncomingWebResponseContext(OperationContext operationContext) => this.operationContext = operationContext;

    public long ContentLength => long.Parse(this.EnsureMessageProperty().Headers[HttpResponseHeader.ContentLength], (IFormatProvider) CultureInfo.InvariantCulture);

    public string ContentType => this.EnsureMessageProperty().Headers[HttpResponseHeader.ContentType];

    public string ETag => this.EnsureMessageProperty().Headers[HttpResponseHeader.ETag];

    public WebHeaderCollection Headers => this.EnsureMessageProperty().Headers;

    public string Location => this.EnsureMessageProperty().Headers[HttpResponseHeader.Location];

    public HttpStatusCode StatusCode => this.EnsureMessageProperty().StatusCode;

    public string StatusDescription => this.EnsureMessageProperty().StatusDescription;

    private HttpResponseMessageProperty MessageProperty
    {
      get
      {
        if (this.operationContext.IncomingMessageProperties == null)
          return (HttpResponseMessageProperty) null;
        return !this.operationContext.IncomingMessageProperties.ContainsKey(HttpResponseMessageProperty.Name) ? (HttpResponseMessageProperty) null : this.operationContext.IncomingMessageProperties[HttpResponseMessageProperty.Name] as HttpResponseMessageProperty;
      }
    }

    private HttpResponseMessageProperty EnsureMessageProperty() => this.MessageProperty != null ? this.MessageProperty : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.HttpContextNoIncomingMessageProperty, (object) typeof (HttpResponseMessageProperty).Name)));
  }
}
