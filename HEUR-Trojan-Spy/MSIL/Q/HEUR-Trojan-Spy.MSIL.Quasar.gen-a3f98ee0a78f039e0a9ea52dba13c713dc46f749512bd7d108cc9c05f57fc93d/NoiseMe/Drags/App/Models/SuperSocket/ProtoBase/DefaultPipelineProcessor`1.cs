// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.SuperSocket.ProtoBase.DefaultPipelineProcessor`1
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;
using System.Collections.Generic;

namespace NoiseMe.Drags.App.Models.SuperSocket.ProtoBase
{
  public class DefaultPipelineProcessor<TPackageInfo> : IPipelineProcessor where TPackageInfo : IPackageInfo
  {
    private IReceiveFilter<TPackageInfo> m_ReceiveFilter;
    private IReceiveFilter<TPackageInfo> m_FirstReceiveFilter;
    private BufferList m_ReceiveCache;
    private int m_MaxPackageLength;

    public DefaultPipelineProcessor(
      IReceiveFilter<TPackageInfo> receiveFilter,
      int maxPackageLength = 0)
    {
      this.m_FirstReceiveFilter = this.m_ReceiveFilter = receiveFilter;
      this.m_ReceiveCache = new BufferList();
      this.m_MaxPackageLength = maxPackageLength;
    }

    private void PushResetData(ArraySegment<byte> raw, int rest) => this.m_ReceiveCache.Add(new ArraySegment<byte>(raw.Array, raw.Offset + raw.Count - rest, rest));

    private IList<IPackageInfo> GetNotNullOne(
      IList<IPackageInfo> left,
      IList<IPackageInfo> right)
    {
      return left != null ? left : right;
    }

    public virtual ProcessResult Process(ArraySegment<byte> segment)
    {
      BufferList data = this.m_ReceiveCache;
      data.Add(segment);
      int rest = 0;
      IReceiveFilter<TPackageInfo> receiveFilter = this.m_ReceiveFilter;
      SingleItemList<IPackageInfo> right = (SingleItemList<IPackageInfo>) null;
      List<IPackageInfo> left = (List<IPackageInfo>) null;
      while (true)
      {
        int count;
        TPackageInfo packageInfo;
        do
        {
          count = data.Last.Count;
          packageInfo = receiveFilter.Filter(data, out rest);
          if (receiveFilter.State == FilterState.Error)
            return ProcessResult.Create(ProcessState.Error);
          if (this.m_MaxPackageLength > 0)
          {
            int total = data.Total;
            if (total > this.m_MaxPackageLength)
              return ProcessResult.Create(ProcessState.Error, string.Format("Max package length: {0}, current processed length: {1}", (object) this.m_MaxPackageLength, (object) total));
          }
          IReceiveFilter<TPackageInfo> nextReceiveFilter = receiveFilter.NextReceiveFilter;
          if ((object) packageInfo != null)
            receiveFilter.Reset();
          if (nextReceiveFilter != null)
          {
            receiveFilter = nextReceiveFilter;
            this.m_ReceiveFilter = receiveFilter;
          }
          if ((object) packageInfo == null)
          {
            if (rest > 0)
            {
              ArraySegment<byte> last = data.Last;
            }
            else
              goto label_14;
          }
          else
            goto label_15;
        }
        while (rest == count);
        this.PushResetData(segment, rest);
        continue;
label_15:
        if (left != null)
          left.Add((IPackageInfo) packageInfo);
        else if (right == null)
        {
          right = new SingleItemList<IPackageInfo>((IPackageInfo) packageInfo);
        }
        else
        {
          if (left == null)
            left = new List<IPackageInfo>();
          left.Add(right[0]);
          left.Add((IPackageInfo) packageInfo);
          right = (SingleItemList<IPackageInfo>) null;
        }
        if ((object) packageInfo is IBufferedPackageInfo && ((object) packageInfo as IBufferedPackageInfo).Data is BufferList)
        {
          this.m_ReceiveCache = data = new BufferList();
          if (rest <= 0)
            goto label_24;
        }
        else
        {
          this.m_ReceiveCache.Clear();
          if (rest <= 0)
            goto label_26;
        }
        this.PushResetData(segment, rest);
      }
label_14:
      return ProcessResult.Create(ProcessState.Cached, this.GetNotNullOne((IList<IPackageInfo>) left, (IList<IPackageInfo>) right));
label_24:
      return ProcessResult.Create(ProcessState.Cached, this.GetNotNullOne((IList<IPackageInfo>) left, (IList<IPackageInfo>) right));
label_26:
      return ProcessResult.Create(ProcessState.Completed, this.GetNotNullOne((IList<IPackageInfo>) left, (IList<IPackageInfo>) right));
    }

    public void Reset()
    {
      this.m_ReceiveCache.Clear();
      this.m_FirstReceiveFilter.Reset();
      if (this.m_ReceiveFilter == this.m_FirstReceiveFilter)
        return;
      this.m_ReceiveFilter = this.m_FirstReceiveFilter;
    }

    public BufferList Cache => this.m_ReceiveCache;
  }
}
