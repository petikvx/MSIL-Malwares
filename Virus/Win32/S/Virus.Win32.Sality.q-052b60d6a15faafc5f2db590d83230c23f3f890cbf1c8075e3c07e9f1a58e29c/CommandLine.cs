// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.RegAsm.CommandLine
// Assembly: RegAsm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 097EDB82-DB75-4D42-81B4-3BEFAFAFEBC0
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Sality.q-052b60d6a15faafc5f2db590d83230c23f3f890cbf1c8075e3c07e9f1a58e29c.exe

using System;

namespace Microsoft.Tools.RegAsm
{
  internal class CommandLine
  {
    private string[] m_aArgList;
    private Option[] m_aOptList;
    private int m_iArgCursor;
    private int m_iOptCursor;
    private Abbrevs m_sValidOptions;

    internal CommandLine(string[] aArgs, string[] aValidOpts)
    {
      this.m_sValidOptions = new Abbrevs(aValidOpts);
      string[] sourceArray1 = new string[aArgs.Length];
      Option[] sourceArray2 = new Option[aArgs.Length];
      int length1 = 0;
      int length2 = 0;
      for (int index = 0; index < aArgs.Length; ++index)
      {
        if (aArgs[index].StartsWith("/", StringComparison.Ordinal) || aArgs[index].StartsWith("-", StringComparison.Ordinal))
        {
          string strValue = (string) null;
          int num = aArgs[index].IndexOfAny(new char[2]
          {
            ':',
            '='
          });
          bool bRequiresValue;
          bool bCanHaveValue;
          string str = this.m_sValidOptions.Lookup(num != -1 ? aArgs[index].Substring(1, num - 1) : aArgs[index].Substring(1), out bRequiresValue, out bCanHaveValue);
          if (!bCanHaveValue && num != -1)
            throw new ApplicationException(Resource.FormatString("Err_NoValueRequired", (object) str));
          if (bRequiresValue && num == -1)
            throw new ApplicationException(Resource.FormatString("Err_ValueRequired", (object) str));
          if (bCanHaveValue && num != -1)
          {
            if (num == aArgs[index].Length - 1)
            {
              if (index + 1 == aArgs.Length)
                throw new ApplicationException(Resource.FormatString("Err_ValueRequired", (object) str));
              strValue = !aArgs[index + 1].StartsWith("/", StringComparison.Ordinal) && !aArgs[index + 1].StartsWith("-", StringComparison.Ordinal) ? aArgs[index + 1] : throw new ApplicationException(Resource.FormatString("Err_ValueRequired", (object) str));
              ++index;
            }
            else
              strValue = aArgs[index].Substring(num + 1);
          }
          sourceArray2[length2++] = new Option(str, strValue);
        }
        else
          sourceArray1[length1++] = aArgs[index];
      }
      this.m_aArgList = new string[length1];
      this.m_aOptList = new Option[length2];
      Array.Copy((Array) sourceArray1, (Array) this.m_aArgList, length1);
      Array.Copy((Array) sourceArray2, (Array) this.m_aOptList, length2);
      this.m_iArgCursor = 0;
      this.m_iOptCursor = 0;
    }

    internal int NumArgs => this.m_aArgList.Length;

    internal int NumOpts => this.m_aOptList.Length;

    internal string GetNextArg() => this.m_iArgCursor >= this.m_aArgList.Length ? (string) null : this.m_aArgList[this.m_iArgCursor++];

    internal Option GetNextOption() => this.m_iOptCursor >= this.m_aOptList.Length ? (Option) null : this.m_aOptList[this.m_iOptCursor++];
  }
}
