// Decompiled with JetBrains decompiler
// Type: GLuaR.Maps.ConfigPredicateMapping
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using c.Adapter;
using c.Connections;
using c.Filter;
using Fireball.Docking;
using GLuaR.Database;
using GLuaR.Exporters;
using GLuaR.Importers;
using GLuaR.Properties;
using GLuaR.Shared;
using GLuaR.Stubs;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace GLuaR.Maps
{
  public class ConfigPredicateMapping : DockableWindow
  {
    private string m_WatcherField;
    private ComparatorPredicateMapping valField;
    private InterceptorThreadFilter _ObjectField;
    private IContainer _ContainerField;
    private ToolStripContainer exporterField;
    private SplitContainer m_MerchantField;
    private ToolStripContainer _ConsumerField;
    private TreeView m_WriterField;
    private SplitContainer m_ValueField;
    private TreeView _DecoratorField;
    private ToolStrip _TokenizerField;
    private ToolStripComboBox _ObserverField;
    private ToolStripButton m_InstanceField;
    private ToolStripButton m_FacadeField;
    private WebBrowser schemaField;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ConfigPredicateMapping(
      ComparatorPredicateMapping setup,
      ImageList cust,
      InterceptorThreadFilter c)
    {
      int num1 = 5;
      if (true)
        goto label_3;
label_1:
      this._DecoratorField.ImageList = cust;
      goto label_8;
label_2:
      int num2;
      num1 = num2;
label_3:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            this.m_WatcherField = "";
            this._ContainerField = (IContainer) null;
            // ISSUE: explicit constructor call
            base.\u002Ector();
            ((Control) this).Text = "Object Browser";
            this.CountRule();
            this._ObjectField = c;
            this.m_WriterField.ImageList = cust;
            if (!ConfigPredicateMapping.CollectRegistry())
            {
              num1 = 2;
              continue;
            }
            goto label_7;
          case 2:
            goto label_1;
          case 3:
          case 4:
            this.WriteRule(this.valField);
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto case 0;
          case 5:
            goto label_7;
          case 6:
            goto label_8;
          case 7:
            goto label_10;
          default:
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 3;
        }
      }
label_10:
      return;
label_7:
      ImporterMapper.InitAccount();
      num2 = 0;
      goto label_2;
label_8:
      this.valField = setup;
      num2 = 3;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void WriteRule(ComparatorPredicateMapping reference)
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            this.m_WriterField.Nodes.Clear();
            num1 = 2;
            continue;
          case 1:
          case 2:
            goto label_2;
          case 4:
            goto label_5;
          default:
            num1 = 4;
            continue;
        }
      }
label_2:
      List<Param>.Enumerator enumerator = reference.reader.GetEnumerator();
label_5:
      try
      {
        while (enumerator.MoveNext())
        {
          Param current = enumerator.Current;
          int num2 = 3;
          TreeNode node;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                this.m_WriterField.Nodes.Add(node);
                num2 = 5;
                continue;
              case 1:
              case 4:
                node.Text = current._Mapping;
                node.Tag = (object) current;
                goto case 0;
              case 3:
                node = new TreeNode();
                node.ImageKey = "library";
                node.SelectedImageKey = "library";
                if (!ConfigPredicateMapping.CollectRegistry())
                {
                  num2 = 4;
                  continue;
                }
                goto case 1;
              case 5:
                goto label_12;
              default:
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto label_12;
            }
          }
label_12:;
        }
      }
      finally
      {
        enumerator.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RegisterRule(object task, TreeViewEventArgs vis)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        c.Specifications.Exception exception1;
        StubRuleEntry stubRuleEntry1;
        List<Tests>.Enumerator enumerator1;
        string str1;
        List<Tests>.Enumerator enumerator2;
        bool flag;
        Param tag1;
        c.Specifications.Exception exception2;
        PolicyExporter visitorField;
        Param policyField;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 9:
              exception1.FindField("<b>");
              exception1.FindField(policyField._Mapping);
              exception1.FindField("</b>");
              if (ConfigPredicateMapping.DefineRegistry())
              {
                num2 = 8;
                continue;
              }
              goto label_66;
            case 1:
              goto label_18;
            case 2:
              goto label_57;
            case 3:
              goto label_63;
            case 4:
              goto label_1;
            case 5:
              goto label_66;
            case 6:
              goto label_21;
            case 7:
              goto label_67;
            case 8:
              goto label_2;
            case 10:
              enumerator2 = stubRuleEntry1._Parameter.GetEnumerator();
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto label_21;
            case 11:
              goto label_81;
            case 12:
              exception1.FindField(str1 + ")\n\n");
              exception1.FindField("<b>");
              exception1.FindField("Summary:");
              exception1.FindField("</b>");
              exception1.FindField("\n" + stubRuleEntry1._Interceptor + "\n\n");
              if (stubRuleEntry1._Parameter.Count > 0)
              {
                exception1.FindField("<b>");
                exception1.FindField("Parameters:");
                exception1.FindField("</b>");
              }
              enumerator1 = stubRuleEntry1._Parameter.GetEnumerator();
              num2 = 19;
              continue;
            case 13:
              goto label_62;
            case 14:
              goto label_19;
            case 15:
              goto label_61;
            case 16:
              if (!flag)
              {
                if (vis.Node.Tag is Param)
                {
                  tag1 = (Param) vis.Node.Tag;
                  this._DecoratorField.Nodes.Clear();
                  foreach (PolicyExporter policyExporter in tag1.m_Resolver)
                  {
                    int num3 = 5;
                    while (true)
                    {
                      int num4 = num3;
                      string str2;
                      TreeNode node;
                      StubRuleEntry stubRuleEntry2;
                      ImporterInvocationAdapter invocationAdapter;
                      while (true)
                      {
                        switch (num4)
                        {
                          case 0:
                            break;
                          case 1:
                          case 11:
                            switch (policyExporter)
                            {
                              case StubRuleEntry _:
                                goto label_44;
                              case Error _:
                                goto label_47;
                            }
                            break;
                          case 2:
                          case 6:
                            if (!(str2 == "SERVER"))
                            {
                              if (str2 == "CLIENT")
                                goto label_33;
                              else
                                goto case 0;
                            }
                            else
                            {
                              node.ImageKey = "server";
                              num4 = 3;
                              continue;
                            }
                          case 3:
label_32:
                            node.SelectedImageKey = "server";
                            goto case 0;
                          case 4:
                            node.Text = stubRuleEntry2.bridge + "(" + stubRuleEntry2.@ref + ")";
                            node.Tag = (object) invocationAdapter;
                            string singleton = stubRuleEntry2._Singleton;
                            if (!(singleton == "SHARED"))
                            {
                              if (!(singleton == "SERVER"))
                              {
                                if (singleton == "CLIENT")
                                {
                                  node.ImageKey = "client";
                                  node.SelectedImageKey = "client";
                                  break;
                                }
                                break;
                              }
                              node.ImageKey = "server";
                              if (ConfigPredicateMapping.DefineRegistry())
                              {
                                num4 = 8;
                                continue;
                              }
                              goto case 0;
                            }
                            else
                            {
                              node.ImageKey = "shared";
                              node.SelectedImageKey = "shared";
                              break;
                            }
                          case 5:
                            node = new TreeNode();
                            invocationAdapter = new ImporterInvocationAdapter();
                            invocationAdapter._PolicyField = tag1;
                            invocationAdapter.m_VisitorField = policyExporter;
                            if (ConfigPredicateMapping.DefineRegistry())
                            {
                              num4 = 11;
                              continue;
                            }
                            goto label_53;
                          case 7:
                            goto label_27;
                          case 8:
                            node.SelectedImageKey = "server";
                            break;
                          case 9:
                            node.SelectedImageKey = "client";
                            goto case 0;
                          case 10:
                            goto label_48;
                          case 12:
                            goto label_53;
                          default:
                            goto label_51;
                        }
                        this._DecoratorField.Nodes.Add(node);
                        if (ConfigPredicateMapping.DefineRegistry())
                          num4 = 12;
                        else
                          goto label_32;
                      }
label_27:
                      Error error;
                      str2 = error._Event;
                      if (!(str2 == "SHARED"))
                      {
                        num3 = 2;
                        continue;
                      }
                      node.ImageKey = "shared";
                      node.SelectedImageKey = "shared";
                      num3 = 0;
                      continue;
label_33:
                      node.ImageKey = "client";
                      num3 = 9;
                      continue;
label_44:
                      stubRuleEntry2 = (StubRuleEntry) policyExporter;
                      num3 = 4;
                      continue;
label_47:
                      num3 = 10;
                      continue;
label_48:
                      error = (Error) policyExporter;
                      node.Text = error.m_Publisher;
                      node.Tag = (object) invocationAdapter;
                      goto label_27;
label_51:
                      num3 = 7;
                    }
label_53:;
                  }
                  exception2 = new c.Specifications.Exception();
                  exception2.VisitField();
                  if (!ConfigPredicateMapping.CollectRegistry())
                  {
                    num2 = 21;
                    continue;
                  }
                  goto label_57;
                }
                else if (vis.Node.Tag is ImporterInvocationAdapter)
                {
                  this._DecoratorField.Nodes.Clear();
                  ImporterInvocationAdapter tag2 = (ImporterInvocationAdapter) vis.Node.Tag;
                  policyField = tag2._PolicyField;
                  visitorField = tag2.m_VisitorField;
                  switch (visitorField)
                  {
                    case StubRuleEntry _:
                      int num5 = 11;
                      num2 = ConfigPredicateMapping.CollectRegistry() ? num5 : num5;
                      continue;
                    case Error _:
                      goto label_64;
                    default:
                      goto label_83;
                  }
                }
                else
                  goto label_80;
              }
              else
                goto label_74;
            case 17:
            case 20:
            case 22:
              goto label_83;
            case 18:
              goto label_17;
            case 19:
              goto label_6;
            case 21:
              goto label_82;
            default:
              goto label_5;
          }
        }
label_1:
        exception1 = new c.Specifications.Exception();
        exception1.VisitField();
        num1 = 1;
        continue;
label_2:
        exception1.FindField(".");
        exception1.FindField("<b>");
        exception1.FindField(stubRuleEntry1.bridge);
        goto label_17;
label_5:
        num1 = 18;
        continue;
label_6:
        try
        {
label_14:
          while (enumerator1.MoveNext())
          {
            Tests current = enumerator1.Current;
            int num6 = 4;
            while (true)
            {
              int num7 = num6;
              while (true)
              {
                switch (num7)
                {
                  case 0:
                  case 4:
                    goto label_9;
                  case 1:
                  case 2:
                    exception1.FindField("</i>");
                    goto case 3;
                  case 3:
                    exception1.FindField(": " + current.descriptor);
                    if (ConfigPredicateMapping.DefineRegistry())
                    {
                      num7 = 5;
                      continue;
                    }
                    goto label_9;
                  case 5:
                    goto label_14;
                  default:
                    goto label_13;
                }
              }
label_9:
              exception1.FindField("<i>");
              exception1.FindField("\n" + current.composer);
              num6 = 2;
              continue;
label_13:
              num6 = 3;
            }
          }
        }
        finally
        {
          enumerator1.Dispose();
        }
        exception1.ResetField();
        num1 = 14;
        continue;
label_17:
        exception1.FindField("</b>");
        exception1.FindField("(");
        str1 = "";
        num1 = 10;
        continue;
label_18:
        exception1.FindField(stubRuleEntry1._Collection + " ");
        num1 = 0;
        continue;
label_19:
        this.schemaField.DocumentStream = (Stream) exception1.RestartField();
        num1 = 20;
        continue;
label_21:
        c.Specifications.Exception exception3;
        Error error1;
        exception3.FindField(error1.m_Publisher);
        exception3.FindField("</b>");
        exception3.FindField("\n\n");
        exception3.FindField("<b>");
        exception3.FindField("Summary:");
        exception3.FindField("</b>");
        exception3.FindField("\n" + error1.m_Pool);
        exception3.ResetField();
        this.schemaField.DocumentStream = (Stream) exception3.RestartField();
        num1 = 22;
        continue;
label_57:
        exception2.FindField("Summary:");
        exception2.FindField("</b>");
        exception2.FindField("\n" + tag1.m_Importer);
        exception2.FindField("\n\n");
        exception2.FindField("Wiki: <a href=\"http://www.garrysmod.com/wiki/?title=" + tag1._Mapping + "\">" + tag1._Mapping + "</a>");
        exception2.ResetField();
        this.schemaField.DocumentStream = (Stream) exception2.RestartField();
        num1 = 3;
        continue;
label_61:
        exception2.FindField(tag1._Mapping);
        exception2.FindField("</b>");
        exception2.FindField("\n\n");
        exception2.FindField("<b>");
        num1 = 2;
        continue;
label_62:
        exception3.FindField("</b>");
        exception3.FindField(".");
        exception3.FindField("<b>");
        num1 = 6;
        continue;
label_64:
        error1 = (Error) visitorField;
        exception3 = new c.Specifications.Exception();
        exception3.VisitField();
        exception3.FindField(error1.m_Adapter + " ");
        exception3.FindField("<b>");
        exception3.FindField(policyField._Mapping);
        num1 = 13;
        continue;
label_66:
        flag = vis.Node == null;
        num1 = 16;
        continue;
label_67:
        try
        {
          while (enumerator2.MoveNext())
          {
            Tests current = enumerator2.Current;
            int num8 = 2;
            if (true)
              goto label_70;
label_69:
            str1 = str1 + current.service + " " + current.composer + ", ";
            goto label_72;
label_70:
            while (true)
            {
              switch (num8)
              {
                case 0:
                case 2:
                  goto label_69;
                case 1:
                case 3:
                  goto label_72;
                default:
                  num8 = 3;
                  continue;
              }
            }
label_72:;
          }
        }
        finally
        {
          enumerator2.Dispose();
        }
        str1 = str1.TrimEnd(',', ' ');
        num1 = 12;
        continue;
label_81:
        stubRuleEntry1 = (StubRuleEntry) visitorField;
        num1 = 4;
        continue;
label_82:
        exception2.FindField("Library ");
        exception2.FindField("<b>");
        num1 = 15;
      }
label_63:
      return;
label_74:
      return;
label_80:
      return;
label_83:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void LogoutRule(object res, TreeViewEventArgs cfg)
    {
      int num1 = 6;
      c.Specifications.Exception exception1;
      while (true)
      {
        int num2 = num1;
        c.Specifications.Exception exception2;
        Param policyField;
        PolicyExporter visitorField;
        bool flag1;
        Error error;
        StubRuleEntry stubRuleEntry;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_10;
            case 1:
              exception2.ResetField();
              if (!ConfigPredicateMapping.CollectRegistry())
              {
                num2 = 4;
                continue;
              }
              goto label_7;
            case 2:
            case 7:
              goto label_11;
            case 3:
            case 5:
              exception1.FindField("</b>");
              exception1.FindField("\n" + stubRuleEntry._Interceptor + "\n\n");
              if (stubRuleEntry._Parameter.Count > 0)
              {
                exception1.FindField("<b>");
                exception1.FindField("Parameters:");
                exception1.FindField("</b>");
              }
              using (List<Tests>.Enumerator enumerator = stubRuleEntry._Parameter.GetEnumerator())
              {
label_38:
                while (enumerator.MoveNext())
                {
                  Tests current = enumerator.Current;
                  int num3 = 0;
                  while (true)
                  {
                    int num4 = num3;
                    while (true)
                    {
                      switch (num4)
                      {
                        case 0:
                          exception1.FindField("<i>");
                          if (ConfigPredicateMapping.DefineRegistry())
                          {
                            num4 = 3;
                            continue;
                          }
                          goto label_33;
                        case 1:
                        case 3:
                          goto label_33;
                        case 2:
                        case 4:
                          goto label_37;
                        case 5:
                          goto label_38;
                        default:
                          goto label_36;
                      }
                    }
label_33:
                    exception1.FindField("\n" + current.composer);
                    exception1.FindField("</i>");
                    goto label_37;
label_36:
                    num3 = 4;
                    continue;
label_37:
                    exception1.FindField(": " + current.descriptor);
                    num3 = 5;
                  }
                }
              }
              exception1.FindField("\n\n");
              exception1.FindField("Wiki: <a href=\"http://www.garrysmod.com/wiki/?title=" + policyField._Mapping + "." + stubRuleEntry.bridge + "\">" + policyField._Mapping + "." + stubRuleEntry.bridge + "</a>");
              exception1.ResetField();
              if (ConfigPredicateMapping.DefineRegistry())
              {
                num2 = 9;
                continue;
              }
              goto case 14;
            case 4:
              goto label_26;
            case 6:
              goto label_2;
            case 8:
              goto label_1;
            case 9:
              goto label_7;
            case 10:
              exception2.FindField(error.m_Adapter + " ");
              exception2.FindField("<b>");
              exception2.FindField(policyField._Mapping);
              exception2.FindField("</b>");
              exception2.FindField(".");
              exception2.FindField("<b>");
              exception2.FindField(error.m_Publisher);
              exception2.FindField("</b>");
              exception2.FindField("\n\n");
              if (true)
              {
                num2 = 8;
                continue;
              }
              goto label_46;
            case 11:
              goto label_25;
            case 12:
              if (!flag1)
              {
                if (visitorField is Error)
                {
                  if (true)
                  {
                    num2 = 2;
                    continue;
                  }
                  goto label_10;
                }
                else
                  goto label_39;
              }
              else
              {
                stubRuleEntry = (StubRuleEntry) visitorField;
                exception1 = new c.Specifications.Exception();
                exception1.VisitField();
                int num5 = 15;
                num2 = ConfigPredicateMapping.CollectRegistry() ? num5 : num5;
                continue;
              }
            case 13:
              goto label_3;
            case 14:
              exception2.FindField("</b>");
              exception2.FindField("\n" + error.m_Pool);
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 12;
            case 15:
              exception1.FindField(stubRuleEntry._Collection + " ");
              exception1.FindField("<b>");
              exception1.FindField(stubRuleEntry.bridge);
              exception1.FindField("</b>");
              exception1.FindField("(");
              string str1 = "";
              foreach (Tests tests in stubRuleEntry._Parameter)
              {
                int num6 = 2;
                while (true)
                {
                  switch (num6)
                  {
                    case 0:
                    case 2:
                      goto label_18;
                    case 1:
                    case 3:
                      goto label_21;
                    default:
                      num6 = 3;
                      continue;
                  }
                }
label_18:
                str1 = str1 + tests.service + " " + tests.composer + ", ";
label_21:;
              }
              string str2 = str1.TrimEnd(',', ' ');
              exception1.FindField(str2 + ")\n\n");
              exception1.FindField("<b>");
              exception1.FindField("Summary:");
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_25;
            case 16:
              goto label_46;
            default:
              if (ConfigPredicateMapping.DefineRegistry())
              {
                num2 = 11;
                continue;
              }
              goto case 15;
          }
        }
label_1:
        exception2.FindField("<b>");
        exception2.FindField("Summary:");
        num1 = 14;
        continue;
label_2:
        bool flag2 = cfg.Node == null;
        num1 = 13;
        continue;
label_3:
        if (!flag2)
        {
          ImporterInvocationAdapter tag = (ImporterInvocationAdapter) cfg.Node.Tag;
          policyField = tag._PolicyField;
          visitorField = tag.m_VisitorField;
          num1 = 0;
          continue;
        }
        break;
label_10:
        flag1 = visitorField is StubRuleEntry;
        num1 = 12;
        continue;
label_11:
        error = (Error) visitorField;
        exception2 = new c.Specifications.Exception();
label_25:
        exception2.VisitField();
        num1 = 10;
        continue;
label_26:
        this.schemaField.DocumentStream = (Stream) exception2.RestartField();
        num1 = 16;
      }
      return;
label_7:
      this.schemaField.DocumentStream = (Stream) exception1.RestartField();
      return;
label_39:
      return;
label_46:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CompareRule(object setup, EventArgs col)
    {
      int num1 = 4;
      if (false)
        return;
      List<Param>.Enumerator enumerator;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 3:
            this.m_WriterField.Nodes.Clear();
            this._DecoratorField.Nodes.Clear();
            enumerator = this.valField.reader.GetEnumerator();
            num2 = 6;
            break;
          case 1:
            if (!flag)
            {
              this._ObserverField.Items.Add((object) this._ObserverField.Text);
              goto case 0;
            }
            else
            {
              num2 = 5;
              break;
            }
          case 2:
            goto label_52;
          case 4:
            flag = string.IsNullOrEmpty(this._ObserverField.Text);
            num2 = 1;
            break;
          case 5:
            goto label_47;
          case 6:
            goto label_10;
          default:
            num1 = 0;
            continue;
        }
        num1 = num2;
      }
label_52:
      return;
label_47:
      return;
label_10:
      try
      {
        while (enumerator.MoveNext())
        {
          Param current = enumerator.Current;
          if (current._Mapping.IndexOf(this._ObserverField.Text, 0, StringComparison.InvariantCultureIgnoreCase) != -1)
            this.m_WriterField.Nodes.Add(new TreeNode()
            {
              ImageKey = "library",
              SelectedImageKey = "library",
              Text = current._Mapping,
              Tag = (object) current
            });
          foreach (PolicyExporter policyExporter in current.m_Resolver)
          {
            int num3 = 6;
            TreeNode node1;
            while (true)
            {
              TreeNode node2;
              int num4;
              StubRuleEntry stubRuleEntry;
              ImporterInvocationAdapter invocationAdapter1;
              string str;
              switch (num3)
              {
                case 0:
                case 11:
                  this.m_WriterField.Nodes.Add(node2);
                  num4 = 14;
                  break;
                case 1:
                  node1.Tag = (object) invocationAdapter1;
                  string singleton = stubRuleEntry._Singleton;
                  if (!(singleton == "SHARED"))
                  {
                    if (!(singleton == "SERVER"))
                    {
                      if (singleton == "CLIENT")
                      {
                        node1.ImageKey = "client";
                        if (true)
                        {
                          num3 = 7;
                          continue;
                        }
                        goto case 13;
                      }
                      else
                        goto label_20;
                    }
                    else
                      goto label_28;
                  }
                  else
                  {
                    node1.ImageKey = "shared";
                    num4 = 5;
                    break;
                  }
                case 2:
                  stubRuleEntry = (StubRuleEntry) policyExporter;
                  if (stubRuleEntry.bridge.IndexOf(this._ObserverField.Text, 0, StringComparison.InvariantCultureIgnoreCase) != -1)
                  {
                    node1 = new TreeNode();
                    node1.Text = stubRuleEntry.bridge + "(" + stubRuleEntry.@ref + ")";
                    int num5 = 1;
                    num3 = ConfigPredicateMapping.CollectRegistry() ? num5 : num5;
                    continue;
                  }
                  goto label_50;
                case 3:
                  goto label_38;
                case 4:
                case 5:
                  goto label_27;
                case 6:
                  if (policyExporter is StubRuleEntry)
                  {
                    invocationAdapter1 = new ImporterInvocationAdapter();
                    invocationAdapter1._PolicyField = current;
                    num4 = 12;
                    break;
                  }
                  if (policyExporter is Error)
                  {
                    num4 = 13;
                    break;
                  }
                  goto label_50;
                case 7:
                  goto label_19;
                case 8:
                case 10:
                  if (!(str == "SHARED"))
                  {
                    if (!(str == "SERVER"))
                    {
                      if (str == "CLIENT")
                      {
                        node2.ImageKey = "client";
                        num4 = 9;
                        break;
                      }
                      num4 = 0;
                      break;
                    }
                    node2.ImageKey = "server";
                    node2.SelectedImageKey = "server";
                    num4 = 11;
                    break;
                  }
                  node2.ImageKey = "shared";
                  node2.SelectedImageKey = "shared";
                  goto case 0;
                case 9:
                  node2.SelectedImageKey = "client";
                  goto case 0;
                case 12:
                  invocationAdapter1.m_VisitorField = policyExporter;
                  num4 = 2;
                  break;
                case 13:
                  ImporterInvocationAdapter invocationAdapter2 = new ImporterInvocationAdapter();
                  invocationAdapter2._PolicyField = current;
                  invocationAdapter2.m_VisitorField = policyExporter;
                  Error error = (Error) policyExporter;
                  if (error.m_Publisher.IndexOf(this._ObserverField.Text, 0, StringComparison.InvariantCultureIgnoreCase) != -1)
                  {
                    node2 = new TreeNode();
                    node2.Text = error.m_Publisher;
                    node2.Tag = (object) invocationAdapter2;
                    str = error._Event;
                    num4 = 10;
                    break;
                  }
                  goto label_49;
                case 14:
                  goto label_49;
                default:
                  num3 = 3;
                  continue;
              }
              num3 = num4;
            }
label_19:
            node1.SelectedImageKey = "client";
label_20:
            this.m_WriterField.Nodes.Add(node1);
            goto label_38;
label_27:
            node1.SelectedImageKey = "shared";
            goto label_20;
label_28:
            node1.ImageKey = "server";
            node1.SelectedImageKey = "server";
            goto label_20;
label_38:
            goto label_50;
label_49:
label_50:;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DefineRule(object param, EventArgs selection)
    {
      int num = 4;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            this._ObserverField.Text = "<Search>";
            if (ConfigPredicateMapping.DefineRegistry())
            {
              num = 3;
              continue;
            }
            goto case 1;
          case 1:
          case 3:
            this._DecoratorField.Nodes.Clear();
            goto case 2;
          case 2:
            this.WriteRule(this.valField);
            num = 5;
            continue;
          case 5:
            goto label_7;
          default:
            num = 2;
            continue;
        }
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InterruptRule(object value, KeyEventArgs result)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_5;
            case 1:
            case 3:
              if (!flag)
                goto label_7;
              else
                goto case 4;
            case 4:
              this.CompareRule((object) null, (EventArgs) null);
              int num3 = 5;
              num2 = ConfigPredicateMapping.CollectRegistry() ? num3 : num3;
              continue;
            case 5:
              goto label_8;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 4;
        continue;
label_5:
        flag = result.KeyCode == Keys.Return;
        num1 = 3;
      }
label_7:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void QueryRule(object param, EventArgs visitor)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
label_6:
        bool flag;
        switch (num2)
        {
          case 0:
          case 1:
            while (!flag)
            {
              this.m_InstanceField.Enabled = true;
              if (ConfigPredicateMapping.DefineRegistry())
              {
                num2 = 5;
                goto label_6;
              }
            }
            goto label_4;
          case 2:
            goto label_10;
          case 3:
            goto label_11;
          case 4:
            flag = this._ObserverField.Text == "<Search>";
            num1 = 0;
            continue;
          case 5:
            goto label_8;
          default:
            num1 = 3;
            continue;
        }
      }
label_4:
      this.m_InstanceField.Enabled = false;
      return;
label_10:
      return;
label_11:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void MapRule(object v, EventArgs ivk) => this._ObjectField.VerifyMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DisableRule(object first, CancelEventArgs counter)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InvokeRule(object spec, WebBrowserNavigatingEventArgs counter)
    {
      int num = 0;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
            flag = counter.Url.ToString() != "about:blank";
            num = 1;
            continue;
          case 1:
            if (flag)
            {
              num = 4;
              continue;
            }
            goto label_9;
          case 2:
          case 4:
            new ClassWrapper(counter.Url.ToString()).Show(this._ObjectField.exporter);
            goto case 3;
          case 3:
          case 5:
            counter.Cancel = true;
            num = 6;
            continue;
          case 6:
            goto label_8;
          default:
            num = 5;
            continue;
        }
      }
label_9:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RateRule(object v, WebBrowserProgressChangedEventArgs pred)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrintRule(object asset, WebBrowserDocumentCompletedEventArgs map)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void Dispose(bool removeinstance)
    {
      int num1 = 2;
      if (true)
        goto label_6;
label_1:
      int num2 = this._ContainerField != null ? 1 : 0;
label_3:
      if (num2 != 0)
      {
        this._ContainerField.Dispose();
        goto label_10;
      }
      else
        goto label_11;
label_5:
      int num3;
      num1 = num3;
label_6:
      switch (num1)
      {
        case 0:
        case 2:
          if (!removeinstance)
          {
            num2 = 0;
            goto label_3;
          }
          else
          {
            num3 = 3;
            goto label_5;
          }
        case 1:
        case 3:
          goto label_1;
        case 4:
          break;
        case 5:
          return;
        default:
          num3 = 4;
          goto label_5;
      }
label_10:
label_11:
      // ISSUE: explicit non-virtual call
      __nonvirtual (((Form) this).Dispose(removeinstance));
      num3 = 5;
      goto label_5;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CountRule()
    {
      int num1 = 0;
      if (ConfigPredicateMapping.DefineRegistry())
        goto label_34;
label_1:
      this._ConsumerField.TabIndex = 0;
      this._ConsumerField.Text = "toolStripContainer2";
      this._ConsumerField.TopToolStripPanel.Controls.Add((Control) this._TokenizerField);
      this.m_WriterField.Dock = DockStyle.Fill;
      this.m_WriterField.HideSelection = false;
      this.m_WriterField.Location = new Point(0, 0);
      this.m_WriterField.Name = "treeView1";
      this.m_WriterField.Size = new Size(262, 280);
      this.m_WriterField.TabIndex = 0;
      num1 = 24;
label_34:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            this.exporterField = new ToolStripContainer();
            num2 = 19;
            break;
          case 1:
            this.m_InstanceField.Size = new Size(23, 22);
            this.m_InstanceField.Text = "Search";
            num1 = 33;
            continue;
          case 2:
            this.exporterField.Location = new Point(0, 0);
            num2 = 3;
            break;
          case 3:
            this.exporterField.Name = "toolStripContainer1";
            this.exporterField.Size = new Size(780, 330);
            this.exporterField.TabIndex = 0;
            num2 = 34;
            break;
          case 4:
          case 18:
            this.m_ValueField.SuspendLayout();
            ((Control) this).SuspendLayout();
            this.exporterField.ContentPanel.Controls.Add((Control) this.m_MerchantField);
            this.exporterField.ContentPanel.Size = new Size(780, 305);
            num1 = 21;
            continue;
          case 5:
            this.m_FacadeField.ImageTransparentColor = Color.Magenta;
            this.m_FacadeField.Name = "toolStripButton2";
            if (ConfigPredicateMapping.DefineRegistry())
            {
              num1 = 22;
              continue;
            }
            goto case 20;
          case 6:
            this.schemaField.ProgressChanged += new WebBrowserProgressChangedEventHandler(this.RateRule);
            this.schemaField.Navigating += new WebBrowserNavigatingEventHandler(this.InvokeRule);
            this.schemaField.NewWindow += new CancelEventHandler(this.DisableRule);
            num2 = 7;
            break;
          case 7:
            this.schemaField.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(this.PrintRule);
            ((ContainerControl) this).AutoScaleDimensions = new SizeF(6f, 13f);
            ((ContainerControl) this).AutoScaleMode = AutoScaleMode.Font;
            ((Form) this).ClientSize = new Size(780, 330);
            ((Control) this).Controls.Add((Control) this.exporterField);
            num1 = 23;
            continue;
          case 8:
            this.m_InstanceField = new ToolStripButton();
            this.m_FacadeField = new ToolStripButton();
            this.m_ValueField = new SplitContainer();
            this._DecoratorField = new TreeView();
            this.schemaField = new WebBrowser();
            this.exporterField.ContentPanel.SuspendLayout();
            this.exporterField.SuspendLayout();
            this.m_MerchantField.Panel1.SuspendLayout();
            this.m_MerchantField.Panel2.SuspendLayout();
            this.m_MerchantField.SuspendLayout();
            this._ConsumerField.ContentPanel.SuspendLayout();
            this._ConsumerField.TopToolStripPanel.SuspendLayout();
            this._ConsumerField.SuspendLayout();
            this._TokenizerField.SuspendLayout();
            num2 = 20;
            break;
          case 9:
            this._TokenizerField.PerformLayout();
            this.m_ValueField.Panel1.ResumeLayout(false);
            this.m_ValueField.Panel2.ResumeLayout(false);
            this.m_ValueField.ResumeLayout(false);
            ((Control) this).ResumeLayout(false);
            num2 = 35;
            break;
          case 10:
            this.schemaField.Size = new Size(514, 164);
            this.schemaField.TabIndex = 0;
            this.schemaField.WebBrowserShortcutsEnabled = false;
            num2 = 6;
            break;
          case 11:
            this._ConsumerField.Name = "toolStripContainer2";
            this._ConsumerField.Size = new Size(262, 305);
            if (true)
            {
              num1 = 31;
              continue;
            }
            goto case 4;
          case 12:
            this.m_ValueField.TabIndex = 0;
            this._DecoratorField.Dock = DockStyle.Fill;
            this._DecoratorField.HideSelection = false;
            this._DecoratorField.Location = new Point(0, 0);
            this._DecoratorField.Name = "treeView2";
            this._DecoratorField.Size = new Size(514, 137);
            this._DecoratorField.TabIndex = 0;
            this._DecoratorField.AfterSelect += new TreeViewEventHandler(this.LogoutRule);
            this.schemaField.AllowWebBrowserDrop = false;
            num2 = 27;
            break;
          case 13:
            this.m_ValueField.Name = "splitContainer2";
            this.m_ValueField.Orientation = Orientation.Horizontal;
            this.m_ValueField.Panel1.Controls.Add((Control) this._DecoratorField);
            if (true)
            {
              num1 = 16;
              continue;
            }
            goto case 27;
          case 14:
            this.m_InstanceField.DisplayStyle = ToolStripItemDisplayStyle.Image;
            this.m_InstanceField.Enabled = false;
            // ISSUE: reference to a compiler-generated method
            this.m_InstanceField.Image = (Image) Resources.AssetField();
            this.m_InstanceField.ImageTransparentColor = Color.Magenta;
            this.m_InstanceField.Name = "toolStripButton1";
            goto case 1;
          case 15:
          case 30:
            this._ObserverField.Text = "<Search>";
            this._ObserverField.KeyDown += new KeyEventHandler(this.InterruptRule);
            this._ObserverField.TextChanged += new EventHandler(this.QueryRule);
            num2 = 14;
            break;
          case 16:
            this.m_ValueField.Panel2.Controls.Add((Control) this.schemaField);
            this.m_ValueField.Size = new Size(514, 305);
            this.m_ValueField.SplitterDistance = 137;
            num2 = 12;
            break;
          case 17:
            this._ObserverField.Margin = new Padding(6, 0, 1, 0);
            this._ObserverField.Name = "toolStripComboBox1";
            this._ObserverField.Size = new Size(200, 25);
            num1 = 30;
            continue;
          case 19:
            this.m_MerchantField = new SplitContainer();
            this._ConsumerField = new ToolStripContainer();
            this.m_WriterField = new TreeView();
            this._TokenizerField = new ToolStrip();
            this._ObserverField = new ToolStripComboBox();
            if (!ConfigPredicateMapping.CollectRegistry())
            {
              num1 = 8;
              continue;
            }
            goto case 0;
          case 20:
            this.m_ValueField.Panel1.SuspendLayout();
            this.m_ValueField.Panel2.SuspendLayout();
            num2 = 18;
            break;
          case 21:
            this.exporterField.Dock = DockStyle.Fill;
            num2 = 2;
            break;
          case 22:
            this.m_FacadeField.Size = new Size(23, 22);
            this.m_FacadeField.Text = "Clear Search";
            this.m_FacadeField.Click += new EventHandler(this.DefineRule);
            if (true)
            {
              num1 = 25;
              continue;
            }
            goto case 9;
          case 23:
            this.HideOnClose = true;
            ((Control) this).Name = "ObjectBrowser";
            ((Form) this).Load += new EventHandler(this.MapRule);
            this.exporterField.ContentPanel.ResumeLayout(false);
            this.exporterField.ResumeLayout(false);
            num2 = 26;
            break;
          case 24:
            this.m_WriterField.AfterSelect += new TreeViewEventHandler(this.RegisterRule);
            this._TokenizerField.Dock = DockStyle.None;
            num2 = 32;
            break;
          case 25:
            this.m_ValueField.Dock = DockStyle.Fill;
            this.m_ValueField.Location = new Point(0, 0);
            if (ConfigPredicateMapping.DefineRegistry())
            {
              num1 = 13;
              continue;
            }
            goto case 12;
          case 26:
            this.exporterField.PerformLayout();
            this.m_MerchantField.Panel1.ResumeLayout(false);
            this.m_MerchantField.Panel2.ResumeLayout(false);
            this.m_MerchantField.ResumeLayout(false);
            this._ConsumerField.ContentPanel.ResumeLayout(false);
            this._ConsumerField.TopToolStripPanel.ResumeLayout(false);
            this._ConsumerField.TopToolStripPanel.PerformLayout();
            this._ConsumerField.ResumeLayout(false);
            this._ConsumerField.PerformLayout();
            this._TokenizerField.ResumeLayout(false);
            num1 = 9;
            continue;
          case 27:
            this.schemaField.Dock = DockStyle.Fill;
            this.schemaField.IsWebBrowserContextMenuEnabled = false;
            this.schemaField.Location = new Point(0, 0);
            if (ConfigPredicateMapping.DefineRegistry())
            {
              num1 = 29;
              continue;
            }
            goto case 10;
          case 28:
            this.m_MerchantField.Panel2.Controls.Add((Control) this.m_ValueField);
            this.m_MerchantField.Size = new Size(780, 305);
            this.m_MerchantField.SplitterDistance = 262;
            this.m_MerchantField.TabIndex = 0;
            this._ConsumerField.ContentPanel.Controls.Add((Control) this.m_WriterField);
            this._ConsumerField.ContentPanel.Size = new Size(262, 280);
            this._ConsumerField.Dock = DockStyle.Fill;
            this._ConsumerField.Location = new Point(0, 0);
            num2 = 11;
            break;
          case 29:
            this.schemaField.MinimumSize = new Size(20, 20);
            this.schemaField.Name = "wb";
            num2 = 10;
            break;
          case 31:
            goto label_1;
          case 32:
            this._TokenizerField.GripStyle = ToolStripGripStyle.Hidden;
            this._TokenizerField.Items.AddRange(new ToolStripItem[3]
            {
              (ToolStripItem) this._ObserverField,
              (ToolStripItem) this.m_InstanceField,
              (ToolStripItem) this.m_FacadeField
            });
            this._TokenizerField.Location = new Point(0, 0);
            this._TokenizerField.Name = "toolStrip1";
            this._TokenizerField.Size = new Size(262, 25);
            this._TokenizerField.Stretch = true;
            this._TokenizerField.TabIndex = 0;
            if (ConfigPredicateMapping.DefineRegistry())
            {
              num1 = 17;
              continue;
            }
            goto case 28;
          case 33:
            this.m_InstanceField.Click += new EventHandler(this.CompareRule);
            this.m_FacadeField.DisplayStyle = ToolStripItemDisplayStyle.Image;
            // ISSUE: reference to a compiler-generated method
            this.m_FacadeField.Image = (Image) Resources.ConnectFactory();
            num2 = 5;
            break;
          case 34:
            this.exporterField.Text = "toolStripContainer1";
            this.m_MerchantField.Dock = DockStyle.Fill;
            this.m_MerchantField.Location = new Point(0, 0);
            this.m_MerchantField.Name = "splitContainer1";
            this.m_MerchantField.Panel1.Controls.Add((Control) this._ConsumerField);
            num2 = 28;
            break;
          case 35:
            goto label_37;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
      }
label_37:;
    }

    internal static bool DefineRegistry() => true;

    internal static bool CollectRegistry() => false;
  }
}
