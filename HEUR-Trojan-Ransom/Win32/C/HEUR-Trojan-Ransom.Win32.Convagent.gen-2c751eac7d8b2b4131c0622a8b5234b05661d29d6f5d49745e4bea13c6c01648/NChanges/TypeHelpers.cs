// Decompiled with JetBrains decompiler
// Type: NChanges.TypeHelpers
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using System;
using System.Text.RegularExpressions;

namespace NChanges
{
  public static class TypeHelpers
  {
    private static readonly Regex GenericTypesRegex = new Regex(",\\s*[^,]+\\s*,\\s*Version=\\d+\\.\\d+\\.\\d+\\.\\d+\\s*,\\s*Culture=[^,]+\\s*,\\s*PublicKeyToken=[^\\]]+", RegexOptions.IgnoreCase);
    private static readonly Regex NullablePrefixRegex = new Regex("^System.Nullable`1\\[\\[([^,\\]]+)");
    private static readonly Regex GenericTypePrefixRegex = new Regex("^([^`]+)`\\d+\\[(.+)\\]$");
    private static readonly Regex GenericTypeParameterRegex = new Regex("\\[([^]]+)\\]");

    public static string CleanUpGenericTypes(string type) => TypeHelpers.GenericTypesRegex.Replace(type, "");

    public static string NormalizeTypeName(string typeName)
    {
      typeName = TypeHelpers.CleanUpGenericTypes(typeName);
      Match match1 = TypeHelpers.NullablePrefixRegex.Match(typeName);
      if (match1.Success)
        return TypeHelpers.NormalizeTypeName(match1.Groups[1].Value) + "?";
      Match match2 = TypeHelpers.GenericTypePrefixRegex.Match(typeName);
      if (match2.Success)
      {
        string str = TypeHelpers.GenericTypeParameterRegex.Replace(match2.Groups[2].Value, (MatchEvaluator) (n => TypeHelpers.NormalizeTypeName(n.Groups[1].Value))).Replace(",", ", ");
        return TypeHelpers.NormalizeTypeName(match2.Groups[1].Value) + "<" + str + ">";
      }
      if (typeName.EndsWith("[]"))
        return TypeHelpers.NormalizeTypeName(typeName.Substring(0, typeName.Length - 2)) + "[]";
      if (typeName.StartsWith("[") && typeName.EndsWith("]"))
        typeName = typeName.Substring(1, typeName.Length - 2);
      switch (typeName)
      {
        case "System.Boolean":
          return "bool";
        case "System.Byte":
          return "byte";
        case "System.Char":
          return "char";
        case "System.Decimal":
          return "decimal";
        case "System.Double":
          return "double";
        case "System.Int16":
          return "short";
        case "System.Int32":
          return "int";
        case "System.Int64":
          return "long";
        case "System.Object":
          return "object";
        case "System.SByte":
          return "sbyte";
        case "System.Single":
          return "float";
        case "System.String":
          return "string";
        case "System.UInt16":
          return "ushort";
        case "System.UInt32":
          return "uint";
        case "System.Void":
          return "void";
        default:
          int num = typeName.LastIndexOf(".", StringComparison.Ordinal);
          return num != -1 ? typeName.Substring(num + 1) : typeName;
      }
    }
  }
}
