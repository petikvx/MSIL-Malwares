// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSCheckBox
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  [DefaultEvent("CheckedChanged")]
  internal class NSCheckBox : Control
  {
    private bool _Checked;
    private GraphicsPath GP1;
    private GraphicsPath GP2;
    private SizeF SZ1;
    private PointF PT1;
    private Pen P11;
    private Pen P22;
    private Pen P3;
    private Pen P4;
    private PathGradientBrush PB1;

    public event NSCheckBox.CheckedChangedEventHandler CheckedChanged;

    public NSCheckBox()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.P11 = new Pen(Color.FromArgb(55, 55, 55));
      this.P22 = new Pen(Color.FromArgb(24, 24, 24));
      this.P3 = new Pen(Color.Black, 2f);
      this.P4 = new Pen(Color.FromArgb(235, 235, 235), 2f);
    }

    public bool Checked
    {
      get => this._Checked;
      set
      {
        this._Checked = value;
        NSCheckBox.CheckedChangedEventHandler checkedChangedEvent = this.CheckedChangedEvent;
        if (checkedChangedEvent != null)
          checkedChangedEvent((object) this);
        this.Invalidate();
      }
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
      ThemeModule.G.Clear(this.BackColor);
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      this.GP1 = ThemeModule.CreateRound(0, 2, checked (this.Height - 5), checked (this.Height - 5), 5);
      this.GP2 = ThemeModule.CreateRound(1, 3, checked (this.Height - 7), checked (this.Height - 7), 5);
      this.PB1 = new PathGradientBrush(this.GP1);
      this.PB1.CenterColor = Color.FromArgb(50, 50, 50);
      this.PB1.SurroundColors = new Color[1]
      {
        Color.FromArgb(45, 45, 45)
      };
      this.PB1.FocusScales = new PointF(0.3f, 0.3f);
      ThemeModule.G.FillPath((Brush) this.PB1, this.GP1);
      ThemeModule.G.DrawPath(this.P11, this.GP1);
      ThemeModule.G.DrawPath(this.P22, this.GP2);
      if (this._Checked)
      {
        ThemeModule.G.DrawLine(this.P3, 5, checked (this.Height - 9), 8, checked (this.Height - 7));
        ThemeModule.G.DrawLine(this.P3, 7, checked (this.Height - 7), checked (this.Height - 8), 7);
        ThemeModule.G.DrawLine(this.P4, 4, checked (this.Height - 10), 7, checked (this.Height - 8));
        ThemeModule.G.DrawLine(this.P4, 6, checked (this.Height - 8), checked (this.Height - 9), 6);
      }
      this.SZ1 = ThemeModule.G.MeasureString(this.Text, this.Font);
      this.PT1 = new PointF((float) checked (this.Height - 3), (float) (this.Height / 2) - this.SZ1.Height / 2f);
      ThemeModule.G.DrawString(this.Text, this.Font, Brushes.Black, this.PT1.X + 1f, this.PT1.Y + 1f);
      ThemeModule.G.DrawString(this.Text, this.Font, Brushes.WhiteSmoke, this.PT1);
    }

    protected override void OnMouseDown(MouseEventArgs e) => this.Checked = !this.Checked;

    public delegate void CheckedChangedEventHandler(object sender);
  }
}
