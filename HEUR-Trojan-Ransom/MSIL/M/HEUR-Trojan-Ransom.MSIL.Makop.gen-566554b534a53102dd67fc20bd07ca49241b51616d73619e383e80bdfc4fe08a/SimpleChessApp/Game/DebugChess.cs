// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: q是, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A217F07-6E26-47B2-8CBC-BCC0D26AE04B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-566554b534a53102dd67fc20bd07ca49241b51616d73619e383e80bdfc4fe08a.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board) => this.b = board;

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = 405255627;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 284345428)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -64770747 ^ 298389495;
            continue;
          case 1:
            int num3 = !flag ? -1149406052 : (num3 = -481605238);
            num1 = num3 ^ (int) num2 * 1462457024;
            continue;
          case 2:
            this.b.ClearBoard();
            num1 = (int) num2 * -275397899 ^ -1296513315;
            continue;
          case 3:
            this.b.WhiteCanCastleKingSide = false;
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -1302260180 ^ 986936628;
            continue;
          case 4:
            this.b.DisableTurns = true;
            num1 = 1944823399;
            continue;
          case 5:
            flag = x == Pieces.King;
            num1 = (int) num2 * 1740967241 ^ 42911501;
            continue;
          case 7:
            num1 = (int) num2 * 1746030539 ^ 14261093;
            continue;
          case 8:
            num1 = (int) num2 * 703111159 ^ 1892226936;
            continue;
          case 9:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * -1087616577 ^ 977401467;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_12;
        }
      }
label_12:
      this.b.lights.FindAllMoves();
    }

    internal void TestPassant()
    {
label_1:
      int num1 = -998207339;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1362168304)) % 14U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 576524447 ^ -824522583;
            continue;
          case 2:
            num1 = (int) num2 * 1352878165 ^ -1583223553;
            continue;
          case 3:
            num1 = (int) num2 * -1242320100 ^ 667834510;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.b.ClearBoard();
            num1 = (int) num2 * -919095975 ^ 2034636572;
            continue;
          case 6:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 1465171562 ^ -1694019541;
            continue;
          case 7:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * 755317149 ^ -193988724;
            continue;
          case 8:
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * -300549148 ^ -597409685;
            continue;
          case 9:
            num1 = (int) num2 * 2121294011 ^ 806559935;
            continue;
          case 10:
            this.b.DisableTurns = true;
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * 1355311750 ^ 1644552159;
            continue;
          case 11:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * -2073362736 ^ -157103966;
            continue;
          case 12:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1198933683 ^ -1907153006;
            continue;
          case 13:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 470324157 ^ -1369075293;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = 320043202;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1438310379)) % 10U)
        {
          case 0:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * 215924581 ^ -1776371487;
            continue;
          case 1:
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * 1893307650 ^ -774183681;
            continue;
          case 2:
            num1 = (int) num2 * 129692605 ^ -1724435268;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * 1825309966 ^ -101852339;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.b.addWhite(4, 6, Pieces.Pawn);
            num1 = (int) num2 * -1040273603 ^ 856159662;
            continue;
          case 7:
            this.b.ClearBoard();
            num1 = (int) num2 * -1978459609 ^ -1120048128;
            continue;
          case 8:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -718020897 ^ -1521720631;
            continue;
          case 9:
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * -312125848 ^ -1800008682;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
      this.b.DisableTurns = true;
label_1:
      int num1 = 1712030585;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 195753402)) % 11U)
        {
          case 0:
            goto label_1;
          case 1:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 993934071 ^ -1792989182;
            continue;
          case 2:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 771455683 ^ 1945586608;
            continue;
          case 3:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 1502317438 ^ 1264480378;
            continue;
          case 4:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -967432643 ^ 1292323965;
            continue;
          case 5:
            goto label_3;
          case 6:
            num1 = (int) num2 * 1133882216 ^ 1731266606;
            continue;
          case 7:
            num1 = (int) num2 * -1055937684 ^ -1337130865;
            continue;
          case 8:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * 1868202070 ^ 826218513;
            continue;
          case 9:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 1959568243 ^ 1506392134;
            continue;
          case 10:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * 328226999 ^ 1305515974;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = -747748461;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1607698042)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 842243552 ^ 2144878783;
            continue;
          case 1:
            this.b.addBlack(0, 4, Pieces.Bishop);
            num1 = (int) num2 * -1342715054 ^ -852680350;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * -2144382340 ^ 1632737086;
            continue;
          case 5:
            this.b.ClearBoard();
            num1 = (int) num2 * -1130312297 ^ 1187303146;
            continue;
          case 6:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -596465880 ^ 749885324;
            continue;
          case 7:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1751401335 ^ -1704709411;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = -290423756;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1033947200)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -2038163005 ^ 710273599;
            continue;
          case 2:
            this.b.ClearBoard();
            num1 = (int) num2 * -1817445764 ^ -27686836;
            continue;
          case 4:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * 1979081559 ^ -641104752;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      this.b.lights.FindAllMoves();
    }

    internal void CheckOnCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -1748322573;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1573223901)) % 14U)
        {
          case 0:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -2082779432 ^ 995783370;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 1120540278 ^ -1911784666;
            continue;
          case 3:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1004634267 ^ -2133832289;
            continue;
          case 4:
            num1 = (int) num2 * 1246970086 ^ 947126881;
            continue;
          case 5:
            this.b.addBlack(4, 2, Pieces.Bishop);
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * 481007295 ^ 230746911;
            continue;
          case 6:
            num1 = (int) num2 * -255063763 ^ 209813284;
            continue;
          case 7:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -123634304 ^ -1635228119;
            continue;
          case 8:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 111228445 ^ -1745218660;
            continue;
          case 9:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * -31239917 ^ -488497794;
            continue;
          case 10:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 1691053551 ^ -672362980;
            continue;
          case 11:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -147593954 ^ -1976099045;
            continue;
          case 12:
            goto label_1;
          case 13:
            num1 = (int) num2 * 1266722454 ^ -1195805705;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }
  }
}
