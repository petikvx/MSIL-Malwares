// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.DemultiplexingDispatchMessageFormatter
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Globalization;
using System.ServiceModel.Channels;
using System.Text;

namespace System.ServiceModel.Dispatcher
{
  internal class DemultiplexingDispatchMessageFormatter : IDispatchMessageFormatter
  {
    private IDispatchMessageFormatter defaultFormatter;
    private Dictionary<WebContentFormat, IDispatchMessageFormatter> formatters;
    private string supportedFormats;

    public DemultiplexingDispatchMessageFormatter(
      IDictionary<WebContentFormat, IDispatchMessageFormatter> formatters,
      IDispatchMessageFormatter defaultFormatter)
    {
      if (formatters == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (formatters));
      this.formatters = new Dictionary<WebContentFormat, IDispatchMessageFormatter>();
      foreach (WebContentFormat key in (IEnumerable<WebContentFormat>) formatters.Keys)
        this.formatters.Add(key, formatters[key]);
      this.defaultFormatter = defaultFormatter;
    }

    public void DeserializeRequest(Message message, object[] parameters)
    {
      if (message == null)
        return;
      WebContentFormat format;
      IDispatchMessageFormatter defaultFormatter;
      if (DemultiplexingDispatchMessageFormatter.TryGetEncodingFormat(message, out format))
      {
        this.formatters.TryGetValue(format, out defaultFormatter);
        if (defaultFormatter == null)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.UnrecognizedHttpMessageFormat, (object) format, (object) this.GetSupportedFormats())));
        }
      }
      else
      {
        defaultFormatter = this.defaultFormatter;
        if (defaultFormatter == null)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.MessageFormatPropertyNotFound3)));
        }
      }
      defaultFormatter.DeserializeRequest(message, parameters);
    }

    public Message SerializeReply(
      MessageVersion messageVersion,
      object[] parameters,
      object result)
    {
      // ISSUE: reference to a compiler-generated method
      throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.SerializingReplyNotSupportedByFormatter, (object) this)));
    }

    internal static string GetSupportedFormats(IEnumerable<WebContentFormat> formats)
    {
      StringBuilder stringBuilder = new StringBuilder();
      int num = 0;
      foreach (WebContentFormat format in formats)
      {
        if (num > 0)
        {
          stringBuilder.Append(CultureInfo.CurrentCulture.TextInfo.ListSeparator);
          stringBuilder.Append(" ");
        }
        stringBuilder.Append("'" + format.ToString() + "'");
        ++num;
      }
      return stringBuilder.ToString();
    }

    internal static bool TryGetEncodingFormat(Message message, out WebContentFormat format)
    {
      object obj;
      message.Properties.TryGetValue("WebBodyFormatMessageProperty", out obj);
      if (!(obj is WebBodyFormatMessageProperty formatMessageProperty))
      {
        format = WebContentFormat.Default;
        return false;
      }
      format = formatMessageProperty.Format;
      return true;
    }

    private string GetSupportedFormats()
    {
      if (this.supportedFormats == null)
        this.supportedFormats = DemultiplexingDispatchMessageFormatter.GetSupportedFormats((IEnumerable<WebContentFormat>) this.formatters.Keys);
      return this.supportedFormats;
    }
  }
}
