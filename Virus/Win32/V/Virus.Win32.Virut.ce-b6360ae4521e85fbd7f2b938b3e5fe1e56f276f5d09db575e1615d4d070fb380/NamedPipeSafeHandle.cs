// Decompiled with JetBrains decompiler
// Type: Microsoft.Windows.PowerShell.GuiExe.Internal.NamedPipeSafeHandle
// Assembly: powershell_ise, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 8E61B2A9-9D1B-4E14-B095-A239B1610C71
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Virut.ce-b6360ae4521e85fbd7f2b938b3e5fe1e56f276f5d09db575e1615d4d070fb380.exe

using Microsoft.Win32.SafeHandles;
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;

namespace Microsoft.Windows.PowerShell.GuiExe.Internal
{
  internal class NamedPipeSafeHandle : SafeHandleZeroOrMinusOneIsInvalid
  {
    private NamedPipeSafeHandle()
      : base(true)
    {
    }

    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]
    protected override bool ReleaseHandle()
    {
      bool flag = NativeMethods.CloseHandle(this.handle);
      if (!flag)
      {
        int lastWin32Error = Marshal.GetLastWin32Error();
        NamedPipeServer.Tracer.TraceError("Server: Could not release handle. Error: {0}", (object) lastWin32Error);
      }
      return flag;
    }
  }
}
