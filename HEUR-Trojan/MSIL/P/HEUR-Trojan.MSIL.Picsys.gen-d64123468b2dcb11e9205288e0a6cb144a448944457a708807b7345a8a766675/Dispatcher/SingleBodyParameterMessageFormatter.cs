// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.SingleBodyParameterMessageFormatter
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.ServiceModel.Web;
using System.Xml;

namespace System.ServiceModel.Dispatcher
{
  internal abstract class SingleBodyParameterMessageFormatter : 
    IDispatchMessageFormatter,
    IClientMessageFormatter
  {
    private string contractName;
    private string contractNs;
    private bool isRequestFormatter;
    private string operationName;
    private string serializerType;

    protected SingleBodyParameterMessageFormatter(
      OperationDescription operation,
      bool isRequestFormatter,
      string serializerType)
    {
      if (operation == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (operation));
      this.contractName = operation.DeclaringContract.Name;
      this.contractNs = operation.DeclaringContract.Namespace;
      this.operationName = operation.Name;
      this.isRequestFormatter = isRequestFormatter;
      this.serializerType = serializerType;
    }

    protected string ContractName => this.contractName;

    protected string ContractNs => this.contractNs;

    protected string OperationName => this.operationName;

    public static IClientMessageFormatter CreateXmlAndJsonClientFormatter(
      OperationDescription operation,
      System.Type type,
      bool isRequestFormatter,
      UnwrappedTypesXmlSerializerManager xmlSerializerManager)
    {
      IClientMessageFormatter clientFormatter1 = SingleBodyParameterMessageFormatter.CreateClientFormatter(operation, type, isRequestFormatter, false, xmlSerializerManager);
      if (!WebHttpBehavior.SupportsJsonFormat(operation))
        return clientFormatter1;
      IClientMessageFormatter clientFormatter2 = SingleBodyParameterMessageFormatter.CreateClientFormatter(operation, type, isRequestFormatter, true, xmlSerializerManager);
      return (IClientMessageFormatter) new DemultiplexingClientMessageFormatter((IDictionary<WebContentFormat, IClientMessageFormatter>) new Dictionary<WebContentFormat, IClientMessageFormatter>()
      {
        {
          WebContentFormat.Xml,
          clientFormatter1
        },
        {
          WebContentFormat.Json,
          clientFormatter2
        }
      }, clientFormatter1);
    }

    public static IDispatchMessageFormatter CreateXmlAndJsonDispatchFormatter(
      OperationDescription operation,
      System.Type type,
      bool isRequestFormatter,
      UnwrappedTypesXmlSerializerManager xmlSerializerManager,
      string callbackParameterName)
    {
      IDispatchMessageFormatter dispatchFormatter1 = SingleBodyParameterMessageFormatter.CreateDispatchFormatter(operation, type, isRequestFormatter, false, xmlSerializerManager, (string) null);
      if (!WebHttpBehavior.SupportsJsonFormat(operation))
        return dispatchFormatter1;
      IDispatchMessageFormatter dispatchFormatter2 = SingleBodyParameterMessageFormatter.CreateDispatchFormatter(operation, type, isRequestFormatter, true, xmlSerializerManager, callbackParameterName);
      return (IDispatchMessageFormatter) new DemultiplexingDispatchMessageFormatter((IDictionary<WebContentFormat, IDispatchMessageFormatter>) new Dictionary<WebContentFormat, IDispatchMessageFormatter>()
      {
        {
          WebContentFormat.Xml,
          dispatchFormatter1
        },
        {
          WebContentFormat.Json,
          dispatchFormatter2
        }
      }, dispatchFormatter1);
    }

    public object DeserializeReply(Message message, object[] parameters)
    {
      if (this.isRequestFormatter)
      {
        // ISSUE: reference to a compiler-generated method
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.FormatterCannotBeUsedForReplyMessages)));
      }
      return this.ReadObject(message);
    }

    public void DeserializeRequest(Message message, object[] parameters)
    {
      if (!this.isRequestFormatter)
      {
        // ISSUE: reference to a compiler-generated method
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.FormatterCannotBeUsedForRequestMessages)));
      }
      parameters[0] = this.ReadObject(message);
    }

    public Message SerializeReply(
      MessageVersion messageVersion,
      object[] parameters,
      object result)
    {
      if (this.isRequestFormatter)
      {
        // ISSUE: reference to a compiler-generated method
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.FormatterCannotBeUsedForReplyMessages)));
      }
      Message message = Message.CreateMessage(messageVersion, (string) null, this.CreateBodyWriter(result));
      if (result == null)
        SingleBodyParameterMessageFormatter.SuppressReplyEntityBody(message);
      this.AttachMessageProperties(message, false);
      return message;
    }

    public Message SerializeRequest(MessageVersion messageVersion, object[] parameters)
    {
      if (!this.isRequestFormatter)
      {
        // ISSUE: reference to a compiler-generated method
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.FormatterCannotBeUsedForRequestMessages)));
      }
      Message message = Message.CreateMessage(messageVersion, (string) null, this.CreateBodyWriter(parameters[0]));
      if (parameters[0] == null)
        SingleBodyParameterMessageFormatter.SuppressRequestEntityBody(message);
      this.AttachMessageProperties(message, true);
      return message;
    }

    internal static IClientMessageFormatter CreateClientFormatter(
      OperationDescription operation,
      System.Type type,
      bool isRequestFormatter,
      bool useJson,
      UnwrappedTypesXmlSerializerManager xmlSerializerManager)
    {
      if (type == (System.Type) null)
        return (IClientMessageFormatter) new SingleBodyParameterMessageFormatter.NullMessageFormatter(false, (string) null);
      return useJson ? (IClientMessageFormatter) SingleBodyParameterMessageFormatter.CreateJsonFormatter(operation, type, isRequestFormatter) : (IClientMessageFormatter) SingleBodyParameterMessageFormatter.CreateXmlFormatter(operation, type, isRequestFormatter, xmlSerializerManager);
    }

    internal static IDispatchMessageFormatter CreateDispatchFormatter(
      OperationDescription operation,
      System.Type type,
      bool isRequestFormatter,
      bool useJson,
      UnwrappedTypesXmlSerializerManager xmlSerializerManager,
      string callbackParameterName)
    {
      if (type == (System.Type) null)
        return (IDispatchMessageFormatter) new SingleBodyParameterMessageFormatter.NullMessageFormatter(useJson, callbackParameterName);
      return useJson ? (IDispatchMessageFormatter) SingleBodyParameterMessageFormatter.CreateJsonFormatter(operation, type, isRequestFormatter) : (IDispatchMessageFormatter) SingleBodyParameterMessageFormatter.CreateXmlFormatter(operation, type, isRequestFormatter, xmlSerializerManager);
    }

    internal static void SuppressReplyEntityBody(Message message)
    {
      WebOperationContext current = WebOperationContext.Current;
      if (current != null)
      {
        OutgoingWebResponseContext outgoingResponse = current.OutgoingResponse;
        if (outgoingResponse == null)
          return;
        outgoingResponse.SuppressEntityBody = true;
      }
      else
      {
        object obj;
        message.Properties.TryGetValue(HttpResponseMessageProperty.Name, out obj);
        if (!(obj is HttpResponseMessageProperty responseMessageProperty))
        {
          responseMessageProperty = new HttpResponseMessageProperty();
          message.Properties[HttpResponseMessageProperty.Name] = (object) responseMessageProperty;
        }
        responseMessageProperty.SuppressEntityBody = true;
      }
    }

    internal static void SuppressRequestEntityBody(Message message)
    {
      WebOperationContext current = WebOperationContext.Current;
      if (current != null)
      {
        OutgoingWebRequestContext outgoingRequest = current.OutgoingRequest;
        if (outgoingRequest == null)
          return;
        outgoingRequest.SuppressEntityBody = true;
      }
      else
      {
        object obj;
        message.Properties.TryGetValue(HttpRequestMessageProperty.Name, out obj);
        if (!(obj is HttpRequestMessageProperty requestMessageProperty))
        {
          requestMessageProperty = new HttpRequestMessageProperty();
          message.Properties[HttpRequestMessageProperty.Name] = (object) requestMessageProperty;
        }
        requestMessageProperty.SuppressEntityBody = true;
      }
    }

    protected virtual void AttachMessageProperties(Message message, bool isRequest)
    {
    }

    protected abstract XmlObjectSerializer[] GetInputSerializers();

    protected abstract XmlObjectSerializer GetOutputSerializer(System.Type type);

    protected virtual void ValidateMessageFormatProperty(Message message)
    {
    }

    protected System.Type GetTypeForSerializer(
      System.Type type,
      System.Type parameterType,
      IList<System.Type> knownTypes)
    {
      if (type == parameterType)
        return type;
      if (knownTypes != null)
      {
        for (int index = 0; index < knownTypes.Count; ++index)
        {
          if (type == knownTypes[index])
            return type;
        }
      }
      return parameterType;
    }

    public static SingleBodyParameterMessageFormatter CreateXmlFormatter(
      OperationDescription operation,
      System.Type type,
      bool isRequestFormatter,
      UnwrappedTypesXmlSerializerManager xmlSerializerManager)
    {
      DataContractSerializerOperationBehavior dcsob = operation.Behaviors.Find<DataContractSerializerOperationBehavior>();
      if (dcsob != null)
        return (SingleBodyParameterMessageFormatter) new SingleBodyParameterDataContractMessageFormatter(operation, type, isRequestFormatter, false, dcsob);
      // ISSUE: reference to a compiler-generated method
      return (SingleBodyParameterMessageFormatter) new SingleBodyParameterXmlSerializerMessageFormatter(operation, type, isRequestFormatter, operation.Behaviors.Find<XmlSerializerOperationBehavior>() ?? throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.OnlyDataContractAndXmlSerializerTypesInUnWrappedMode, (object) operation.Name))), xmlSerializerManager);
    }

    public static SingleBodyParameterMessageFormatter CreateJsonFormatter(
      OperationDescription operation,
      System.Type type,
      bool isRequestFormatter)
    {
      // ISSUE: reference to a compiler-generated method
      return (SingleBodyParameterMessageFormatter) new SingleBodyParameterDataContractMessageFormatter(operation, type, isRequestFormatter, true, operation.Behaviors.Find<DataContractSerializerOperationBehavior>() ?? throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.JsonFormatRequiresDataContract, (object) operation.Name, (object) operation.DeclaringContract.Name, (object) operation.DeclaringContract.Namespace))));
    }

    private BodyWriter CreateBodyWriter(object body)
    {
      XmlObjectSerializer serializer;
      if (body != null)
      {
        serializer = this.GetOutputSerializer(body.GetType());
        if (serializer == null)
        {
          // ISSUE: reference to a compiler-generated method
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.CannotSerializeType, (object) body.GetType(), (object) this.operationName, (object) this.contractName, (object) this.contractNs, (object) this.serializerType)));
        }
      }
      else
        serializer = (XmlObjectSerializer) null;
      return (BodyWriter) new SingleBodyParameterMessageFormatter.SingleParameterBodyWriter(body, serializer);
    }

    protected virtual object ReadObject(Message message)
    {
      if (HttpStreamFormatter.IsEmptyMessage(message))
        return (object) null;
      XmlObjectSerializer[] inputSerializers = this.GetInputSerializers();
      XmlDictionaryReader readerAtBodyContents = message.GetReaderAtBodyContents();
      if (inputSerializers != null)
      {
        for (int index = 0; index < inputSerializers.Length; ++index)
        {
          if (inputSerializers[index].IsStartObject(readerAtBodyContents))
            return inputSerializers[index].ReadObject(readerAtBodyContents, false);
        }
      }
      // ISSUE: reference to a compiler-generated method
      throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new SerializationException(SR2.GetString(SR2.CannotDeserializeBody, (object) readerAtBodyContents.LocalName, (object) readerAtBodyContents.NamespaceURI, (object) this.operationName, (object) this.contractName, (object) this.contractNs, (object) this.serializerType)));
    }

    private class NullMessageFormatter : IDispatchMessageFormatter, IClientMessageFormatter
    {
      private bool useJson;
      private string callbackParameterName;

      public NullMessageFormatter(bool useJson, string callbackParameterName)
      {
        this.useJson = useJson;
        this.callbackParameterName = callbackParameterName;
      }

      public object DeserializeReply(Message message, object[] parameters) => (object) null;

      public void DeserializeRequest(Message message, object[] parameters)
      {
      }

      public Message SerializeReply(
        MessageVersion messageVersion,
        object[] parameters,
        object result)
      {
        Message message = Message.CreateMessage(messageVersion, (string) null);
        SingleBodyParameterMessageFormatter.SuppressReplyEntityBody(message);
        if (this.useJson && WebHttpBehavior.TrySetupJavascriptCallback(this.callbackParameterName) != null)
          message.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.JsonProperty);
        return message;
      }

      public Message SerializeRequest(MessageVersion messageVersion, object[] parameters)
      {
        Message message = Message.CreateMessage(messageVersion, (string) null);
        SingleBodyParameterMessageFormatter.SuppressRequestEntityBody(message);
        return message;
      }
    }

    private class SingleParameterBodyWriter : BodyWriter
    {
      private object body;
      private XmlObjectSerializer serializer;

      public SingleParameterBodyWriter(object body, XmlObjectSerializer serializer)
        : base(false)
      {
        this.body = body == null || serializer != null ? body : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (serializer));
        this.serializer = serializer;
      }

      protected override void OnWriteBodyContents(XmlDictionaryWriter writer)
      {
        if (this.body == null)
          return;
        this.serializer.WriteObject(writer, this.body);
      }
    }
  }
}
