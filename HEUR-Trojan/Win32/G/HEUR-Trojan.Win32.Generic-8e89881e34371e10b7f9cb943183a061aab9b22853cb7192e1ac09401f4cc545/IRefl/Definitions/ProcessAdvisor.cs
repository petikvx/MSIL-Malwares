// Decompiled with JetBrains decompiler
// Type: IRefl.Definitions.ProcessAdvisor
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Services;
using ProjNet.Structs;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace IRefl.Definitions
{
  public class ProcessAdvisor : Form
  {
    private IContainer registryAdvisor;
    private TextBox _AdvisorAdvisor;
    private TextBox m_FacadeAdvisor;
    private Button statusAdvisor;
    private Label m_ItemAdvisor;
    private Label m_MerchantAdvisor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ProcessAdvisor()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_7;
            case 1:
            case 2:
              this.DefineFacade();
              int num3 = 5;
              num2 = ProcessAdvisor.PushModel() ? num3 : num3;
              continue;
            case 4:
              this.registryAdvisor = (IContainer) null;
              // ISSUE: explicit constructor call
              base.\u002Ector();
              goto case 1;
            case 5:
              goto label_6;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 1;
        continue;
label_7:
        PageAdvisorStructBuilder.PrepareCreator();
        num1 = 4;
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RemoveFacade(object last, EventArgs token)
    {
      try
      {
        string text1 = this.m_FacadeAdvisor.Text;
        int num1 = 3;
        if (true)
          goto label_5;
label_2:
        string text2 = this._AdvisorAdvisor.Text;
        CallbackRegistry.DeleteAuthorISBN(text1, int.Parse(text2));
        num1 = 2;
label_5:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              goto label_2;
            case 1:
            case 2:
              int num2 = (int) MessageBox.Show("Deletion successful.");
              this.m_FacadeAdvisor.Text = "";
              goto case 4;
            case 4:
              this._AdvisorAdvisor.Text = "";
              num1 = 5;
              continue;
            case 5:
              goto label_8;
            default:
              num1 = 4;
              continue;
          }
        }
label_8:;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Deletion Failed.");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool hasinstance)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
            case 2:
label_10:
              this.registryAdvisor.Dispose();
              goto label_11;
            case 1:
            case 4:
              num3 = this.registryAdvisor != null ? 1 : 0;
              break;
            case 3:
              if (!hasinstance)
              {
                num3 = 0;
                break;
              }
              goto label_9;
            case 5:
              goto label_4;
            default:
              goto label_7;
          }
          if (num3 != 0)
            goto label_10;
label_11:
          base.Dispose(hasinstance);
          if (ProcessAdvisor.EnableModel())
            num2 = 5;
          else
            goto label_12;
        }
label_7:
        num1 = 0;
        continue;
label_9:
        num1 = 4;
      }
label_4:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DefineFacade()
    {
      int num1 = 14;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_1;
            case 1:
            case 12:
              goto label_2;
            case 2:
              this.m_ItemAdvisor.Location = new Point(25, 40);
              num2 = 6;
              continue;
            case 3:
              goto label_13;
            case 4:
              goto label_12;
            case 5:
              this.m_ItemAdvisor.AutoSize = true;
              num2 = 2;
              continue;
            case 6:
              goto label_5;
            case 7:
              goto label_14;
            case 8:
              goto label_7;
            case 9:
              goto label_3;
            case 10:
            case 11:
              goto label_15;
            case 13:
              goto label_6;
            case 14:
              this._AdvisorAdvisor = new TextBox();
              if (true)
              {
                num2 = 9;
                continue;
              }
              goto label_5;
            case 15:
              goto label_17;
            default:
              goto label_10;
          }
        }
label_1:
        this.Controls.Add((Control) this.statusAdvisor);
        this.Controls.Add((Control) this.m_ItemAdvisor);
        this.Controls.Add((Control) this.m_MerchantAdvisor);
        num1 = 3;
        continue;
label_2:
        this.ResumeLayout(false);
        this.PerformLayout();
        num1 = 15;
        continue;
label_3:
        this.m_FacadeAdvisor = new TextBox();
        num1 = 4;
        continue;
label_5:
        this.m_ItemAdvisor.Name = "label2";
        this.m_ItemAdvisor.Size = new Size(55, 13);
        this.m_ItemAdvisor.TabIndex = 6;
        this.m_ItemAdvisor.Text = "Author ID:";
        this.m_MerchantAdvisor.AutoSize = true;
        num1 = 8;
        continue;
label_6:
        this.Controls.Add((Control) this.m_FacadeAdvisor);
        num1 = 0;
        continue;
label_7:
        this.m_MerchantAdvisor.Location = new Point(45, 9);
        this.m_MerchantAdvisor.Name = "label1";
        this.m_MerchantAdvisor.Size = new Size(35, 13);
        this.m_MerchantAdvisor.TabIndex = 5;
        goto label_14;
label_10:
        num1 = 7;
        continue;
label_12:
        this.statusAdvisor = new Button();
        this.m_ItemAdvisor = new Label();
        this.m_MerchantAdvisor = new Label();
        this.SuspendLayout();
        this._AdvisorAdvisor.Location = new Point(86, 40);
        this._AdvisorAdvisor.Name = "AuthorIDTextBox";
        this._AdvisorAdvisor.Size = new Size(100, 20);
        this._AdvisorAdvisor.TabIndex = 9;
        this.m_FacadeAdvisor.Location = new Point(86, 9);
        this.m_FacadeAdvisor.Name = "ISBNTextBox";
        this.m_FacadeAdvisor.Size = new Size(100, 20);
        this.m_FacadeAdvisor.TabIndex = 8;
        this.statusAdvisor.Location = new Point(86, 66);
        this.statusAdvisor.Name = "DeleteButton";
        this.statusAdvisor.Size = new Size(75, 23);
        this.statusAdvisor.TabIndex = 7;
        this.statusAdvisor.Text = "Delete";
        this.statusAdvisor.UseVisualStyleBackColor = true;
        this.statusAdvisor.Click += new EventHandler(this.RemoveFacade);
        num1 = 5;
        continue;
label_13:
        this.Name = "DeleteAuthorISBN";
        num1 = 10;
        continue;
label_14:
        this.m_MerchantAdvisor.Text = "ISBN:";
        this.AutoScaleDimensions = new SizeF(6f, 13f);
        this.AutoScaleMode = AutoScaleMode.Font;
        this.ClientSize = new Size(219, 99);
        this.Controls.Add((Control) this._AdvisorAdvisor);
        num1 = 13;
        continue;
label_15:
        this.Text = "Delete AuthorISBN";
        num1 = 1;
      }
label_17:;
    }

    internal static bool EnableModel() => true;

    internal static bool PushModel() => false;
  }
}
