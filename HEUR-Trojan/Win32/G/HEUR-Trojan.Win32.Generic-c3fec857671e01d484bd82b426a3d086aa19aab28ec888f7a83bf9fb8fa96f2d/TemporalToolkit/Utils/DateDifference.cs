// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.Utils.DateDifference
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace TemporalToolkit.Utils
{
  public class DateDifference
  {
    private int[] monthDay;
    private DateTime fromDate;
    private DateTime toDate;

    public int Years { get; set; }

    public int Months { get; set; }

    public int Days { get; set; }

    public int TotalMonths => this.Years * 12 + this.Months;

    public DateDifference(DateTime d1, DateTime d2)
    {
      int[] numArray = new int[12];
      // ISSUE: field reference
      DateDifference.\u206C⁪⁮⁪‮⁭⁮⁫‍‏⁭‌⁫‭⁬⁯‮⁯‎‍⁪‮‍‬‭⁫⁬‭⁪‪‌⁮⁮⁮‮‬​‭‌⁭‮((Array) numArray, __fieldref (\u003CPrivateImplementationDetails\u003E.D2562FC95AD9314C85BB8498C779AB53ACEA1F13840F5505500ED76DA160E1A3));
      this.monthDay = numArray;
      // ISSUE: explicit constructor call
      base.\u002Ector();
label_1:
      int num1 = 1061116516;
      int num2;
      bool flag1;
      bool flag2;
      bool flag3;
      bool flag4;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1024082881)) % 42U)
        {
          case 0:
            this.fromDate = d2;
            num1 = (int) num3 * 1918042501 ^ -1762703046;
            continue;
          case 1:
            int num4 = flag2 ? 1102892137 : (num4 = 1440066236);
            num1 = num4 ^ (int) num3 * 407482331;
            continue;
          case 2:
            num2 = 1;
            num1 = (int) num3 * 1548580779 ^ 1498172614;
            continue;
          case 3:
            this.Years = this.toDate.Year - (this.fromDate.Year + num2);
            num1 = 675527531;
            continue;
          case 4:
            num2 = 1;
            num1 = (int) num3 * 5250103 ^ -2091491276;
            continue;
          case 5:
            num1 = (int) num3 * -494605091 ^ -2116134751;
            continue;
          case 6:
            num1 = 1505329551;
            continue;
          case 7:
            num1 = (int) num3 * 361371490 ^ -659219255;
            continue;
          case 8:
            num1 = (int) num3 * 26136499 ^ 1447198078;
            continue;
          case 9:
            num1 = (int) num3 * -2087605666 ^ -1188130324;
            continue;
          case 10:
            num2 = 0;
            num1 = (int) num3 * 1120534610 ^ -1812885337;
            continue;
          case 11:
            int num5 = !flag4 ? -1063863061 : (num5 = -861016981);
            num1 = num5 ^ (int) num3 * 891708577;
            continue;
          case 12:
            goto label_1;
          case 13:
            num1 = 816523229;
            continue;
          case 14:
            num2 = 28;
            num1 = (int) num3 * -523793810 ^ 1206180096;
            continue;
          case 15:
            num1 = (int) num3 * 1539226536 ^ 543780816;
            continue;
          case 16:
            flag4 = DateTime.IsLeapYear(this.fromDate.Year);
            num1 = (int) num3 * 1540310723 ^ -2134365870;
            continue;
          case 17:
            int num6 = flag1 ? 828172627 : (num6 = 1454636489);
            num1 = num6 ^ (int) num3 * 1209199950;
            continue;
          case 18:
            flag2 = num2 != 0;
            num1 = 1664421022;
            continue;
          case 19:
            int num7;
            num1 = num7 = this.fromDate.Month + num2 > this.toDate.Month ? 800560044 : (num7 = 1612088835);
            continue;
          case 20:
            num1 = (int) num3 * 1848900466 ^ -1973662427;
            continue;
          case 21:
            num1 = 774003743;
            continue;
          case 22:
            num2 = 0;
            int num8;
            num1 = num8 = this.fromDate.Day <= this.toDate.Day ? 2097009907 : (num8 = 1625187516);
            continue;
          case 23:
            flag1 = d1 > d2;
            num1 = (int) num3 * 1358637550 ^ 1780738056;
            continue;
          case 24:
            num1 = (int) num3 * 599631721 ^ 1647023275;
            continue;
          case 25:
            num1 = (int) num3 * 1840726788 ^ 839259436;
            continue;
          case 26:
            num2 = this.monthDay[this.fromDate.Month - 1];
            num1 = (int) num3 * -1937167710 ^ 316584471;
            continue;
          case 27:
            num1 = (int) num3 * 1266517093 ^ -1072178296;
            continue;
          case 28:
            num2 = 29;
            num1 = (int) num3 * -1904634625 ^ 693603122;
            continue;
          case 29:
            int num9 = !flag3 ? -1315800542 : (num9 = -151791097);
            num1 = num9 ^ (int) num3 * -1097346539;
            continue;
          case 30:
            flag3 = num2 == -1;
            num1 = 615208520;
            continue;
          case 31:
            this.toDate = d2;
            num1 = (int) num3 * -989288502 ^ -1908181971;
            continue;
          case 32:
            this.Months = this.toDate.Month - (this.fromDate.Month + num2);
            num1 = 2008013191;
            continue;
          case 33:
            this.Days = this.toDate.Day + num2 - this.fromDate.Day;
            num1 = (int) num3 * -879977749 ^ -733562269;
            continue;
          case 34:
            goto label_3;
          case 35:
            this.Months = this.toDate.Month + 12 - (this.fromDate.Month + num2);
            num1 = (int) num3 * -368864352 ^ -1733706187;
            continue;
          case 36:
            this.fromDate = d1;
            num1 = 1801968604;
            continue;
          case 37:
            this.toDate = d1;
            num1 = (int) num3 * -2087701052 ^ 452644323;
            continue;
          case 38:
            this.Days = this.toDate.Day - this.fromDate.Day;
            num1 = (int) num3 * 1115319568 ^ -167778010;
            continue;
          case 39:
            num1 = (int) num3 * 647484776 ^ -1528868077;
            continue;
          case 40:
            num1 = (int) num3 * -417410833 ^ 203149611;
            continue;
          case 41:
            num1 = (int) num3 * 110293141 ^ -1178003916;
            continue;
          default:
            goto label_44;
        }
      }
label_3:
      return;
label_44:;
    }

    public override string ToString()
    {
label_1:
      int num1 = 2004269006;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 798829842)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = DateDifference.\u200F‬​⁫‎‪‪‎⁯⁫‪‏⁭‬⁫⁯‎⁪⁮⁫​‌⁭⁫‍⁪‏⁬‍⁪⁬‫‏‪⁪⁮‭⁫‎‬‮(new string[6]
            {
              this.Years.ToString(),
              \u003CModule\u003E.\u202A‌⁫‏⁫‌‎⁯‍⁬‪⁭‍‮‫‏‎⁯⁬​⁮‬⁪‍‫‬‏‫‬‭‮‍⁯‏⁮‬‍⁫‎⁫‮<string>(3003708463U),
              this.Months.ToString(),
              \u003CModule\u003E.\u202A‌⁫‏⁫‌‎⁯‍⁬‪⁭‍‮‫‏‎⁯⁬​⁮‬⁪‍‫‬‏‫‬‭‮‍⁯‏⁮‬‍⁫‎⁫‮<string>(436397419U),
              this.Days.ToString(),
              \u003CModule\u003E.\u200B‍⁬‎⁫‪‮‮⁬‭‏⁯⁬‏⁮‍‏‏‭‌‪‮‎‏‪‭‬⁫‬⁫⁭⁫⁮‎⁯‪‫‫‮<string>(543667516U)
            });
            num1 = (int) num2 * 1522771094 ^ 708311717;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static void \u206C⁪⁮⁪‮⁭⁮⁫‍‏⁭‌⁫‭⁬⁯‮⁯‎‍⁪‮‍‬‭⁫⁬‭⁪‪‌⁮⁮⁮‮‬​‭‌⁭‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);

    static string \u200F‬​⁫‎‪‪‎⁯⁫‪‏⁭‬⁫⁯‎⁪⁮⁫​‌⁭⁫‍⁪‏⁬‍⁪⁬‫‏‪⁪⁮‭⁫‎‬‮([In] string[] obj0) => string.Concat(obj0);
  }
}
