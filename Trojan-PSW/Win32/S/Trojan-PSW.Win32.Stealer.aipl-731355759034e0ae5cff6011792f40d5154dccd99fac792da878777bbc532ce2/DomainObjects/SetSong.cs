// Decompiled with JetBrains decompiler
// Type: DomainObjects.SetSong
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Text;

namespace DomainObjects
{
  [Table(Name = "dbo.SetSong")]
  public class SetSong : INotifyPropertyChanging, INotifyPropertyChanged, ISetSong, IEntity
  {
    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);
    private Guid _SetSongId;
    private Guid? _SetId;
    private string _SongName;
    private double? _Length;
    private bool _Cover;
    private string _Abbreviation;
    private short? _Order;
    private string _Tease;
    private string _Notes;
    private string _SpecialAppearances;
    private short? _JamStyle;
    private bool _BustOut;
    private bool _Segue;
    private DateTime _CreatedDate;
    private DateTime? _UpdatedDate;
    private DateTime? _DeletedDate;
    private bool _Deleted;
    private EntityRef<Set> _Set;

    public SetSong() => this._Set = new EntityRef<Set>();

    [Column(DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true, Storage = "_SetSongId")]
    public Guid SetSongId
    {
      get => this._SetSongId;
      set
      {
        if (!(this._SetSongId != value))
          return;
        this.SendPropertyChanging();
        this._SetSongId = value;
        this.SendPropertyChanged(nameof (SetSongId));
      }
    }

    [Column(DbType = "UniqueIdentifier", Storage = "_SetId")]
    public Guid? SetId
    {
      get => this._SetId;
      set
      {
        Guid? setId = this._SetId;
        Guid? nullable = value;
        if ((setId.HasValue == nullable.HasValue ? (setId.HasValue ? (setId.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
          return;
        if (this._Set.HasLoadedOrAssignedValue)
          throw new ForeignKeyReferenceAlreadyHasValueException();
        this.SendPropertyChanging();
        this._SetId = value;
        this.SendPropertyChanged(nameof (SetId));
      }
    }

    [Column(DbType = "VarChar(100)", Storage = "_SongName")]
    public string SongName
    {
      get => this._SongName;
      set
      {
        if (!(this._SongName != value))
          return;
        this.SendPropertyChanging();
        this._SongName = value;
        this.SendPropertyChanged(nameof (SongName));
      }
    }

    [Column(DbType = "Float", Storage = "_Length")]
    public double? Length
    {
      get => this._Length;
      set
      {
        double? length = this._Length;
        double? nullable = value;
        if (length.GetValueOrDefault() == nullable.GetValueOrDefault() & length.HasValue == nullable.HasValue)
          return;
        this.SendPropertyChanging();
        this._Length = value;
        this.SendPropertyChanged(nameof (Length));
      }
    }

    [Column(DbType = "Bit NOT NULL", Storage = "_Cover")]
    public bool Cover
    {
      get => this._Cover;
      set
      {
        if (this._Cover == value)
          return;
        this.SendPropertyChanging();
        this._Cover = value;
        this.SendPropertyChanged(nameof (Cover));
      }
    }

    [Column(DbType = "NVarChar(50)", Storage = "_Abbreviation")]
    public string Abbreviation
    {
      get => this._Abbreviation;
      set
      {
        if (!(this._Abbreviation != value))
          return;
        this.SendPropertyChanging();
        this._Abbreviation = value;
        this.SendPropertyChanged(nameof (Abbreviation));
      }
    }

    [Column(DbType = "SmallInt", Name = "[Order]", Storage = "_Order")]
    public short? Order
    {
      get => this._Order;
      set
      {
        short? order = this._Order;
        int? nullable1 = order.HasValue ? new int?((int) order.GetValueOrDefault()) : new int?();
        short? nullable2 = value;
        int? nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        if (nullable1.GetValueOrDefault() == nullable3.GetValueOrDefault() & nullable1.HasValue == nullable3.HasValue)
          return;
        this.SendPropertyChanging();
        this._Order = value;
        this.SendPropertyChanged(nameof (Order));
      }
    }

    [Column(DbType = "VarChar(100)", Storage = "_Tease")]
    public string Tease
    {
      get => this._Tease;
      set
      {
        if (!(this._Tease != value))
          return;
        this.SendPropertyChanging();
        this._Tease = value;
        this.SendPropertyChanged(nameof (Tease));
      }
    }

    [Column(DbType = "NVarChar(MAX)", Storage = "_Notes")]
    public string Notes
    {
      get => this._Notes;
      set
      {
        if (!(this._Notes != value))
          return;
        this.SendPropertyChanging();
        this._Notes = value;
        this.SendPropertyChanged(nameof (Notes));
      }
    }

    [Column(DbType = "VarChar(100)", Storage = "_SpecialAppearances")]
    public string SpecialAppearances
    {
      get => this._SpecialAppearances;
      set
      {
        if (!(this._SpecialAppearances != value))
          return;
        this.SendPropertyChanging();
        this._SpecialAppearances = value;
        this.SendPropertyChanged(nameof (SpecialAppearances));
      }
    }

    [Column(DbType = "SmallInt", Storage = "_JamStyle")]
    public short? JamStyle
    {
      get => this._JamStyle;
      set
      {
        short? jamStyle = this._JamStyle;
        int? nullable1 = jamStyle.HasValue ? new int?((int) jamStyle.GetValueOrDefault()) : new int?();
        short? nullable2 = value;
        int? nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        if (nullable1.GetValueOrDefault() == nullable3.GetValueOrDefault() & nullable1.HasValue == nullable3.HasValue)
          return;
        this.SendPropertyChanging();
        this._JamStyle = value;
        this.SendPropertyChanged(nameof (JamStyle));
      }
    }

    [Column(DbType = "Bit NOT NULL", Storage = "_BustOut")]
    public bool BustOut
    {
      get => this._BustOut;
      set
      {
        if (this._BustOut == value)
          return;
        this.SendPropertyChanging();
        this._BustOut = value;
        this.SendPropertyChanged(nameof (BustOut));
      }
    }

    [Column(DbType = "Bit NOT NULL", Storage = "_Segue")]
    public bool Segue
    {
      get => this._Segue;
      set
      {
        if (this._Segue == value)
          return;
        this.SendPropertyChanging();
        this._Segue = value;
        this.SendPropertyChanged(nameof (Segue));
      }
    }

    [Column(DbType = "DateTime NOT NULL", Storage = "_CreatedDate")]
    public DateTime CreatedDate
    {
      get => this._CreatedDate;
      set
      {
        if (!(this._CreatedDate != value))
          return;
        this.SendPropertyChanging();
        this._CreatedDate = value;
        this.SendPropertyChanged(nameof (CreatedDate));
      }
    }

    [Column(DbType = "DateTime", Storage = "_UpdatedDate")]
    public DateTime? UpdatedDate
    {
      get => this._UpdatedDate;
      set
      {
        DateTime? updatedDate = this._UpdatedDate;
        DateTime? nullable = value;
        if ((updatedDate.HasValue == nullable.HasValue ? (updatedDate.HasValue ? (updatedDate.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
          return;
        this.SendPropertyChanging();
        this._UpdatedDate = value;
        this.SendPropertyChanged(nameof (UpdatedDate));
      }
    }

    [Column(DbType = "DateTime", Storage = "_DeletedDate")]
    public DateTime? DeletedDate
    {
      get => this._DeletedDate;
      set
      {
        DateTime? deletedDate = this._DeletedDate;
        DateTime? nullable = value;
        if ((deletedDate.HasValue == nullable.HasValue ? (deletedDate.HasValue ? (deletedDate.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
          return;
        this.SendPropertyChanging();
        this._DeletedDate = value;
        this.SendPropertyChanged(nameof (DeletedDate));
      }
    }

    [Column(DbType = "Bit NOT NULL", Storage = "_Deleted")]
    public bool Deleted
    {
      get => this._Deleted;
      set
      {
        if (this._Deleted == value)
          return;
        this.SendPropertyChanging();
        this._Deleted = value;
        this.SendPropertyChanged(nameof (Deleted));
      }
    }

    [Association(IsForeignKey = true, Name = "Set_SetSong", OtherKey = "SetId", Storage = "_Set", ThisKey = "SetId")]
    public Set Set
    {
      get => this._Set.Entity;
      set
      {
        Set entity = this._Set.Entity;
        if (entity == value && this._Set.HasLoadedOrAssignedValue)
          return;
        this.SendPropertyChanging();
        if (entity != null)
        {
          this._Set.Entity = (Set) null;
          entity.SetSongs.Remove(this);
        }
        this._Set.Entity = value;
        if (value != null)
        {
          value.SetSongs.Add(this);
          this._SetId = new Guid?(value.SetId);
        }
        else
          this._SetId = new Guid?();
        this.SendPropertyChanged(nameof (Set));
      }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      if (this.PropertyChanging == null)
        return;
      this.PropertyChanging((object) this, SetSong.emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanged(string propertyName)
    {
      if (this.PropertyChanged == null)
        return;
      this.PropertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }

    public string GetSongName(double? length, DateTime? showDate, string city, string state)
    {
      if (!length.HasValue && !showDate.HasValue && city == null && state == null)
        return string.Empty;
      StringBuilder stringBuilder = new StringBuilder();
      string str = showDate.Value.ToString("MM/dd/yyyy");
      if (length.HasValue)
        stringBuilder.Append(length.Value);
      if (showDate.HasValue)
      {
        if (stringBuilder.Length > 0)
          stringBuilder.Append(" - ");
        stringBuilder.Append(str);
      }
      if (!string.IsNullOrEmpty(city))
      {
        if (stringBuilder.Length > 0)
          stringBuilder.Append(" - ");
        stringBuilder.Append(city);
        if (!string.IsNullOrEmpty(state))
          stringBuilder.Append(", " + state);
      }
      return stringBuilder.ToString();
    }
  }
}
