// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: Yx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 400FF0AC-C9F5-4D3D-92AD-97AFF85F6668
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-3ae1c8125ddc0d024ac1f14b9ba78e44f10bfc281ca7e9c68cec7db8af6ee9b3.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -864205497;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -999304040)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              int num3 = eventHandler1 != comparand ? -1512542839 : (num3 = -1231886077);
              num1 = num3 ^ (int) num2 * 1141092329;
              continue;
            case 3:
              comparand = eventHandler1;
              EventHandler eventHandler2 = (EventHandler) Square.\u200D⁮⁬⁯⁬‬‍⁯‮‪‭‬‮‪‏⁭‬‬⁯‌⁭‫‎​‬⁭⁪‬⁬⁬⁫‬‍‬‮‪‍‎​‭‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = -1738167546;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -908368939;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1535107374)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              EventHandler eventHandler2 = (EventHandler) Square.\u202C‎‭‍⁭⁫‫⁮‌‬⁫⁮‍⁪‌⁮‌⁫‮‎‬‫⁯‭⁮‏‪‬‍‮⁪‫‏⁮‪‭⁮⁬⁬‍‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * -1669945520 ^ -161630124;
              continue;
            case 2:
              comparand = eventHandler1;
              num1 = -1749836318;
              continue;
            case 3:
              int num3 = eventHandler1 == comparand ? 381173353 : (num3 = 1475589147);
              num1 = num3 ^ (int) num2 * 1688185357;
              continue;
            case 4:
              goto label_3;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName
    {
      get
      {
label_1:
        int num1 = 1645834725;
        string specialName;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 228464623)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              specialName = Square.\u200C‭‭‮‮⁫‌‪‎‍‭⁫‫‍⁬‌‬‏⁯⁮⁪⁫‍‌⁮‌​‮⁮‬‭‎‌‫‬⁯‏‎‌‌‮(this.CurrentSquare, \u003CModule\u003E.\u206C‎​⁮‮‬⁮‏‭⁯‪⁫‬‎⁫⁯⁯⁮⁮‬‏‏⁫‍‪⁪⁫‏​⁪‍‮‏​⁯‮‪‌‍⁬‮<string>(2353286458U), Square.\u206F‪‌‮‪⁯⁮‍‬‮⁬‎‮⁭‮‍‪‍⁫⁫⁮‭‫​⁮‫‍‭⁯‪​‬⁭‬⁫⁪​⁬‭‮‮((object) this.Piece));
              num1 = (int) num2 * -1224240060 ^ -103880803;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
        string currentSquare = Square.\u206B‌⁫‮‍‎‬⁯⁮‮‭⁮⁫‫⁬⁪⁯‪‏‌‪‫⁬⁮‏‎‭‌⁯⁯​⁫⁪⁮⁬‭⁬‎‬⁯‮(Square.\u200E‫‍‭‎‌‏⁪‌‫‌‍⁯‫⁯‫⁫‭‫‏⁪‫‬⁯‏‌‪‬‌‮‌‬‎⁫⁭⁮​⁭‮‬‮(\u003CModule\u003E.\u206E‭‏‍​‏⁪⁯⁪‭⁮⁭⁪‬⁫‏​⁪⁯⁪⁫​⁬⁯‫‍‭⁭‪​‪⁫‎⁫⁬‮⁮⁮​‌‮<string>(2665825236U), this.File).ToString(), (this.Rank + 1).ToString());
label_1:
        int num1 = -1203053364;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1313092731)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -264600717 ^ 548057026;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
      EventHandler action = Square.Action;
      if (action == null)
        return;
      action((object) msg, (EventArgs) null);
label_3:
      int num1 = -584100674;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1533614733)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1156369343 ^ -442185077;
            continue;
          case 2:
            goto label_6;
          default:
            goto label_7;
        }
      }
label_6:
      return;
label_7:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
label_1:
      int num1 = 1565861494;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1131866004)) % 7U)
        {
          case 0:
            this.File = file;
            num1 = (int) num2 * -194531806 ^ -1756855311;
            continue;
          case 1:
            this.Rank = rank;
            num1 = (int) num2 * 1051719594 ^ 799276452;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            this.Name = Square.\u206B‌⁫‮‍‎‬⁯⁮‮‭⁮⁫‫⁬⁪⁯‪‏‌‪‫⁬⁮‏‎‭‌⁯⁯​⁫⁪⁮⁬‭⁬‎‬⁯‮(Square.\u200E‫‍‭‎‌‏⁪‌‫‌‍⁯‫⁯‫⁫‭‫‏⁪‫‬⁯‏‌‪‬‌‮‌‬‎⁫⁭⁮​⁭‮‬‮(\u003CModule\u003E.\u206E‭‏‍​‏⁪⁯⁪‭⁮⁭⁪‬⁫‏​⁪⁯⁪⁫​⁬⁯‫‍‭⁭‪​‪⁫‎⁫⁬‮⁮⁮​‌‮<string>(2665825236U), file).ToString(), (this.Rank + 1).ToString());
            num1 = (int) num2 * 1153033483 ^ -1131911633;
            continue;
          case 5:
            this.Board = Board;
            num1 = (int) num2 * 1569954969 ^ -448730181;
            continue;
          case 6:
            num1 = (int) num2 * -1473586747 ^ -886159885;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public Square()
    {
      this.InitializeComponent();
      this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
    }

    private void SwitchPlayer()
    {
      bool flag1 = !this.Board.DisableTurns;
label_1:
      int num1 = -550248298;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1421562862)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -498056844 ^ -442718493;
            continue;
          case 1:
            num1 = -2093329064;
            continue;
          case 2:
            int num3 = !flag2 ? -1114491761 : (num3 = -1400508473);
            num1 = num3 ^ (int) num2 * 1881145957;
            continue;
          case 3:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -1129565149;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * 1512085642 ^ 1992267315;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * 1089456975 ^ 117784494;
            continue;
          case 8:
            int num4 = flag1 ? 1904921496 : (num4 = 326198632);
            num1 = num4 ^ (int) num2 * 709793420;
            continue;
          case 9:
            flag2 = this.Board.WhosPlaying == PieceColor.White;
            num1 = (int) num2 * 1865761187 ^ 182936385;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    private bool getSide(Square x)
    {
label_1:
      int num1 = -949280496;
      bool side;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1886860251)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            if (!this.Board.DisableTurns)
            {
              num1 = (int) num2 * -544223200 ^ 100489187;
              continue;
            }
            num3 = 1;
            break;
          case 2:
            num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
            break;
          default:
            goto label_8;
        }
        side = num3 != 0;
        num1 = -988582586;
      }
label_8:
      return side;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = -762823307;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        List<PossibleMoves> move1;
        List<PossibleMoves> move2;
        bool flag4;
        bool flag5;
        bool flag6;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ -1345426353)) % 85U)
        {
          case 0:
            int num5;
            num1 = num5 = !this.Board.DisableTurns ? -529016242 : (num5 = -306758015);
            continue;
          case 1:
            num1 = (int) num2 * -615950602 ^ 532500441;
            continue;
          case 2:
            num1 = (int) num2 * 104353049 ^ -638075527;
            continue;
          case 3:
            num1 = (int) num2 * -1063143505 ^ 164578409;
            continue;
          case 4:
            Square.action(this.msg);
            num1 = -558821955;
            continue;
          case 5:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1599675994 ^ 630205066;
            continue;
          case 6:
            this.msg = \u003CModule\u003E.\u200C⁪⁪‬⁪‫‮‬​‭‮‬‍⁮​‮‏⁪‌​‭⁭‫‍⁮‫‫⁭‌‍⁭⁯‬‫‭‏‫⁮‫⁭‮<string>(1090383358U);
            move2 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * -155592724 ^ 1047617350;
            continue;
          case 7:
            flag4 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * -710117520 ^ -437573864;
            continue;
          case 8:
            num1 = (int) num2 * 1541221186 ^ -1611900878;
            continue;
          case 9:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -354741647 ^ -1211009501;
            continue;
          case 10:
            to.HighLight();
            num1 = (int) num2 * 1754424617 ^ -1306246511;
            continue;
          case 11:
            flag6 = to.Piece.Id == this.Board.From.Piece.Id;
            num1 = (int) num2 * 437320675 ^ 962527055;
            continue;
          case 12:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -367068561 ^ -1329588406;
            continue;
          case 13:
            num1 = (int) num2 * -1532194100 ^ 1180927818;
            continue;
          case 14:
            num1 = -1965745236;
            continue;
          case 15:
            num3 = this.Board.From.Piece != null ? 1 : 0;
            goto label_45;
          case 16:
            num1 = (int) num2 * 292554175 ^ 263142398;
            continue;
          case 17:
            to.MovePawn(this.Board.From);
            num1 = -227167453;
            continue;
          case 18:
            num1 = (int) num2 * 580143752 ^ -99845864;
            continue;
          case 19:
            this.msg = \u003CModule\u003E.\u206E‭‏‍​‏⁪⁯⁪‭⁮⁭⁪‬⁫‏​⁪⁯⁪⁫​⁬⁯‫‍‭⁭‪​‪⁫‎⁫⁬‮⁮⁮​‌‮<string>(3458230497U);
            num1 = (int) num2 * 962136034 ^ -1766654550;
            continue;
          case 20:
            num4 = this.getSide(to) ? 1 : 0;
            break;
          case 21:
            num1 = (int) num2 * -899144342 ^ 607799618;
            continue;
          case 22:
            num1 = -1941091550;
            continue;
          case 23:
            int num6 = !flag4 ? -507793272 : (num6 = -561054095);
            num1 = num6 ^ (int) num2 * -1577763796;
            continue;
          case 24:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u206C‎​⁮‮‬⁮‏‭⁯‪⁫‬‎⁫⁯⁯⁮⁮‬‏‏⁫‍‪⁪⁫‏​⁪‍‮‏​⁯‮‪‌‍⁬‮<string>(3722593508U);
            num1 = (int) num2 * 991667024 ^ -887326444;
            continue;
          case 25:
            num1 = -1405908477;
            continue;
          case 26:
            num1 = (int) num2 * -78805403 ^ 423235466;
            continue;
          case 27:
            this.Board.From = (Square) null;
            num1 = (int) num2 * -1009534250 ^ 2060413727;
            continue;
          case 28:
            num1 = (int) num2 * 2005059910 ^ -999134816;
            continue;
          case 29:
            this.msg = \u003CModule\u003E.\u206E‭‏‍​‏⁪⁯⁪‭⁮⁭⁪‬⁫‏​⁪⁯⁪⁫​⁬⁯‫‍‭⁭‪​‪⁫‎⁫⁬‮⁮⁮​‌‮<string>(475383170U);
            num1 = (int) num2 * -1310055163 ^ 381911764;
            continue;
          case 30:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u206C‎​⁮‮‬⁮‏‭⁯‪⁫‬‎⁫⁯⁯⁮⁮‬‏‏⁫‍‪⁪⁫‏​⁪‍‮‏​⁯‮‪‌‍⁬‮<string>(3722593508U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1345759020 ^ 1108975136;
            continue;
          case 31:
            this.Board.From = to;
            num1 = (int) num2 * 350255607 ^ 1250769458;
            continue;
          case 32:
            num1 = (int) num2 * 1897654584 ^ 1267814362;
            continue;
          case 33:
            this.msg = \u003CModule\u003E.\u202E‭‭‏⁪⁯⁫‌‮⁯‮‫‭‪‌‮‭⁯‍‮‏‫‎‏‌‏‪‪‍⁫‮‭‪‍⁯‍⁪‌‮‮<string>(2727672696U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1798663417 ^ 1158071166;
            continue;
          case 34:
            int num7 = !flag5 ? -782116659 : (num7 = -167675193);
            num1 = num7 ^ (int) num2 * -400756339;
            continue;
          case 35:
            num1 = (int) num2 * -1380827840 ^ 1419703086;
            continue;
          case 36:
            this.msg = \u003CModule\u003E.\u200C⁪⁪‬⁪‫‮‬​‭‮‬‍⁮​‮‏⁪‌​‭⁭‫‍⁮‫‫⁭‌‍⁭⁯‬‫‭‏‫⁮‫⁭‮<string>(3008315090U);
            num1 = (int) num2 * -1815312588 ^ -758409445;
            continue;
          case 37:
            num1 = (int) num2 * 1670627063 ^ 1254903580;
            continue;
          case 38:
            if (this.Board.From != null)
            {
              num1 = (int) num2 * -1228925971 ^ 711842798;
              continue;
            }
            num3 = 0;
            goto label_45;
          case 39:
            num1 = (int) num2 * -392076477 ^ 1657855313;
            continue;
          case 40:
            num1 = -1347559603;
            continue;
          case 41:
            num1 = (int) num2 * -705480001 ^ 1147001489;
            continue;
          case 42:
            num1 = (int) num2 * -755066144 ^ -201806715;
            continue;
          case 43:
            goto label_1;
          case 44:
            flag5 = this.Board.From.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * -541783682 ^ 146894299;
            continue;
          case 45:
            to.HighLight();
            num1 = (int) num2 * -108129381 ^ 948788351;
            continue;
          case 46:
            if (to.Piece == null)
            {
              num4 = 0;
              break;
            }
            num1 = -312624041;
            continue;
          case 47:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = (int) num2 * 461340020 ^ -87922640;
            continue;
          case 48:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -231074315 ^ 1867458949;
            continue;
          case 49:
            num1 = (int) num2 * -1900155390 ^ -314858736;
            continue;
          case 50:
            num1 = (int) num2 * 1122297265 ^ -1128765216;
            continue;
          case 51:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -912304756 ^ 1027563286;
            continue;
          case 52:
            num1 = -1373096103;
            continue;
          case 53:
            num1 = (int) num2 * 1870647103 ^ -242279224;
            continue;
          case 54:
            num1 = (int) num2 * -218970986 ^ 144661673;
            continue;
          case 55:
            this.msg = \u003CModule\u003E.\u206C‎​⁮‮‬⁮‏‭⁯‪⁫‬‎⁫⁯⁯⁮⁮‬‏‏⁫‍‪⁪⁫‏​⁪‍‮‏​⁯‮‪‌‍⁬‮<string>(3091679115U);
            num1 = -1405908477;
            continue;
          case 56:
            int num8 = move1.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? 534747460 : (num8 = 1468172997);
            num1 = num8 ^ (int) num2 * -1022368731;
            continue;
          case 57:
            num1 = (int) num2 * -346120886 ^ -134326326;
            continue;
          case 58:
            to = this;
            num1 = (int) num2 * 546663160 ^ -1009286042;
            continue;
          case 59:
            num1 = (int) num2 * -1323941781 ^ -844667454;
            continue;
          case 60:
            num1 = (int) num2 * 250860736 ^ 1993829586;
            continue;
          case 61:
            num1 = (int) num2 * 531022636 ^ -348986488;
            continue;
          case 62:
            num1 = -1135743142;
            continue;
          case 63:
            flag1 = this.Board.From.Piece.Color == to.Piece.Color;
            num1 = -652439724;
            continue;
          case 64:
            num1 = (int) num2 * -381119935 ^ 367977686;
            continue;
          case 65:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -389020398 ^ 872752501;
            continue;
          case 66:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -430130616 ^ -1765258612;
            continue;
          case 67:
            int num9;
            num1 = num9 = !this.getSide(this.Board.From) ? -1347559603 : (num9 = -650801330);
            continue;
          case 68:
            int num10 = flag3 ? 853915230 : (num10 = 31196986);
            num1 = num10 ^ (int) num2 * -168295691;
            continue;
          case 69:
            num1 = (int) num2 * 1380463008 ^ -1280777886;
            continue;
          case 70:
            num1 = (int) num2 * 129289186 ^ -1495311003;
            continue;
          case 71:
            int num11 = flag6 ? -1597692761 : (num11 = -2010878270);
            num1 = num11 ^ (int) num2 * -795294725;
            continue;
          case 72:
            int num12 = !flag1 ? 1386021636 : (num12 = 1709840320);
            num1 = num12 ^ (int) num2 * 1831891878;
            continue;
          case 73:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1367858456 ^ -1507100514;
            continue;
          case 74:
            flag3 = flag2;
            num1 = -1484902649;
            continue;
          case 75:
            move1 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            this.msg = Square.\u202E‎⁬⁬‪⁬⁫‍⁪⁮⁫​⁭‎‏‬⁫​‏⁯‌⁬‌⁪⁯​​‮‭‌⁪‍‎‪⁪‭⁮‮⁬⁪‮(\u003CModule\u003E.\u202E‭‭‏⁪⁯⁫‌‮⁯‮‫‭‪‌‮‭⁯‍‮‏‫‎‏‌‏‪‪‍⁫‮‭‪‍⁯‍⁪‌‮‮<string>(2612790496U), (object) move1.Count);
            num1 = (int) num2 * -1453522101 ^ 1927031889;
            continue;
          case 76:
            int num13 = !move2.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? -937297400 : (num13 = -2090251383);
            num1 = num13 ^ (int) num2 * 625535567;
            continue;
          case 77:
            num1 = (int) num2 * -1178815583 ^ -12200531;
            continue;
          case 78:
            goto label_3;
          case 79:
            int num14 = Square.\u202C‍‮‪⁬⁭⁯‮‎‌‭‮‎⁯‭⁮⁯‍‍​‫‮⁬‍‍⁫‍⁪⁮⁯‮‏‭‭‍‮⁭‌⁭⁫‮(e) == MouseButtons.Left ? 42604863 : (num14 = 378582567);
            num1 = num14 ^ (int) num2 * -486348277;
            continue;
          case 80:
            num1 = (int) num2 * 854657374 ^ 1499620121;
            continue;
          case 81:
            num1 = (int) num2 * 1066110522 ^ -453744611;
            continue;
          case 82:
            to.HighLight();
            num1 = (int) num2 * 1732486574 ^ 154489663;
            continue;
          case 83:
            to.HighLight();
            num1 = (int) num2 * 501254458 ^ -296757631;
            continue;
          case 84:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -385059330 ^ -1836668329;
            continue;
          default:
            goto label_93;
        }
        int num15;
        num1 = num15 = num4 == 0 ? -638403763 : (num15 = -109660297);
        continue;
label_45:
        flag2 = num3 != 0;
        int num16;
        num1 = num16 = !(to.Piece == null & flag2) ? -1166231778 : (num16 = -1885763152);
      }
label_3:
      return;
label_93:;
    }

    private void hideMoves(Square to)
    {
      bool flag = this.Board.From != null;
label_1:
      int num1 = -1679818225;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1645082856)) % 8U)
        {
          case 0:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * -1684728309 ^ -1789933922;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1486774237 ^ -265414658;
            continue;
          case 3:
            num1 = (int) num2 * 240392180 ^ -1496713179;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -2047823715 ^ -1289129933;
            continue;
          case 6:
            num1 = (int) num2 * -855743140 ^ 1852167659;
            continue;
          case 7:
            int num3 = flag ? 597080686 : (num3 = 95442754);
            num1 = num3 ^ (int) num2 * 1727035357;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void CaptPawn(Square from)
    {
label_1:
      int num1 = -526806176;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -210467231)) % 35U)
        {
          case 0:
            num1 = (int) num2 * -1575832079 ^ 696955968;
            continue;
          case 1:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1722793384 ^ -577691018;
            continue;
          case 2:
            this.handleBlackCastling();
            num1 = (int) num2 * 114310172 ^ -1955545954;
            continue;
          case 3:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = -1777901063;
            continue;
          case 4:
            num3 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 5:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = -748283031;
            continue;
          case 6:
            num1 = -2057431329;
            continue;
          case 7:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 1806035392 ^ -1261322200;
            continue;
          case 8:
            int num5 = flag4 ? -706874158 : (num5 = -1710598254);
            num1 = num5 ^ (int) num2 * 384518373;
            continue;
          case 9:
            flag3 = this.Piece.Color == PieceColor.Black;
            num1 = -612996498;
            continue;
          case 10:
            flag4 = flag2;
            num1 = (int) num2 * 1949466174 ^ -978887046;
            continue;
          case 11:
            num1 = -2060256215;
            continue;
          case 12:
            flag1 = true;
            num1 = (int) num2 * 1310833549 ^ 1617005599;
            continue;
          case 13:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 1219289647 ^ 431742072;
            continue;
          case 14:
            flag6 = from.Piece.Color == PieceColor.White;
            num1 = -1249330574;
            continue;
          case 15:
            flag1 = true;
            num1 = (int) num2 * 1691160010 ^ -1172168499;
            continue;
          case 16:
            this.handleWhiteCastling();
            num1 = (int) num2 * -728235293 ^ 1918030237;
            continue;
          case 17:
            num1 = (int) num2 * 465012198 ^ 425203609;
            continue;
          case 18:
            int num6 = this.Piece.Color != PieceColor.White ? -2086580137 : (num6 = -173140019);
            num1 = num6 ^ (int) num2 * 130587988;
            continue;
          case 19:
            goto label_1;
          case 20:
            num1 = (int) num2 * -2037172673 ^ -588037724;
            continue;
          case 21:
            int num7 = flag6 ? 939626791 : (num7 = 1020601774);
            num1 = num7 ^ (int) num2 * 1157994823;
            continue;
          case 22:
            if (flag1)
            {
              num1 = (int) num2 * 111240244 ^ 2099974209;
              continue;
            }
            goto label_61;
          case 23:
            int num8 = flag3 ? -1419637478 : (num8 = -1393453734);
            num1 = num8 ^ (int) num2 * 1393154141;
            continue;
          case 24:
            int num9 = flag5 ? 188568893 : (num9 = 1340932089);
            num1 = num9 ^ (int) num2 * 832245427;
            continue;
          case 25:
            this.Piece = from.Piece;
            num1 = -384414188;
            continue;
          case 26:
            flag1 = false;
            num1 = (int) num2 * 299985671 ^ 1136046047;
            continue;
          case 27:
            from.Piece = (ChessPiece) null;
            num1 = -1637978634;
            continue;
          case 28:
            flag2 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -862629369 ^ -1287445747;
            continue;
          case 29:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_36;
          case 30:
            num1 = (int) num2 * -1536584594 ^ -591804011;
            continue;
          case 31:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -174907074 ^ -1313663315;
            continue;
          case 32:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * -1123801207 ^ 1390394098;
            continue;
          case 34:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 1810866316 ^ 1509822941;
              continue;
            }
            num4 = 0;
            goto label_36;
          default:
            goto label_43;
        }
        int num10;
        num1 = num10 = num3 != 0 ? -1306485415 : (num10 = -1660065337);
        continue;
label_36:
        flag5 = num4 != 0;
        num1 = -338682291;
      }
label_43:
      Promotion promotion = new Promotion(Square.\u206F⁬⁬‭⁭‍‫⁯​‬‏‍‎​‮‏‪‫⁯‫‮​‭⁫‬‎‎‎⁫⁪⁭‍⁬⁪‏⁭⁭⁬⁯⁮‮());
      try
      {
label_45:
        int num11 = -296879040;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ -210467231)) % 5U)
          {
            case 0:
              num11 = (int) num12 * -391404212 ^ 1335220429;
              continue;
            case 1:
              int num13 = (int) Square.\u200E⁪‏⁯‍⁮⁪‎‫‫⁪⁯⁬⁭‍‏⁮‪‏⁬⁮‎‪⁪⁪‪‎‫‮‎‪​⁯​‪‬‏‏⁯‌‮((Form) promotion);
              num11 = (int) num12 * -1571372491 ^ 1285904893;
              continue;
            case 3:
              goto label_45;
            case 4:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * 315943786 ^ 252240309;
              continue;
            default:
              goto label_57;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_51:
          int num14 = -841024981;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -210467231)) % 4U)
            {
              case 0:
                goto label_51;
              case 1:
                num14 = (int) num15 * 695071401 ^ -536165825;
                continue;
              case 2:
                Square.\u206B​⁪‫⁪⁪⁬‮‫⁮‍‍‎‮⁯‎⁬‭‏‭⁮‌‮‎⁯‌⁫⁮⁬⁭⁫‏‏‎⁪‏‌‭‪⁮‮((IDisposable) promotion);
                num14 = (int) num15 * 721031251 ^ -428534818;
                continue;
              default:
                goto label_56;
            }
          }
        }
label_56:;
      }
label_57:
label_58:
      int num16 = -1876936017;
label_59:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ -210467231)) % 4U)
        {
          case 0:
            goto label_58;
          case 1:
            this.SwitchPlayer();
            num16 = (int) num17 * -745102797 ^ -447126099;
            continue;
          case 2:
            goto label_61;
          case 3:
            goto label_60;
          default:
            goto label_53;
        }
      }
label_60:
      return;
label_53:
      return;
label_61:
      this.Board.lights.FindAllMoves();
      PlaySound.Play();
      num16 = -1730426316;
      goto label_59;
    }

    private void MovePawn(Square from)
    {
      ChessPiece chessPiece = (ChessPiece) null;
label_1:
      int num1 = -878134516;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -1366626753)) % 32U)
        {
          case 0:
            from.Piece = (ChessPiece) null;
            num1 = -805010928;
            continue;
          case 1:
            num1 = -437066527;
            continue;
          case 2:
            num1 = -312869601;
            continue;
          case 4:
            flag3 = true;
            num1 = (int) num2 * -74014531 ^ 1554758729;
            continue;
          case 5:
            this.Board.lastPassantPawn = (ChessPiece) null;
            flag2 = this.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * -449281343 ^ 1863008778;
            continue;
          case 6:
            chessPiece = this.handleBlackCastling();
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -542651276 ^ -756601106;
            continue;
          case 7:
            num1 = (int) num2 * 676581727 ^ 1399936965;
            continue;
          case 8:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * -162004555 ^ 1177034742;
            continue;
          case 9:
            num3 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 10:
            if (this.Rank != 3)
            {
              num1 = (int) num2 * 943692406 ^ -430242052;
              continue;
            }
            num4 = 1;
            goto label_12;
          case 11:
            num1 = (int) num2 * -837812336 ^ -218470353;
            continue;
          case 12:
            goto label_1;
          case 13:
            int num6 = flag4 ? 518775549 : (num6 = 1245187801);
            num1 = num6 ^ (int) num2 * 871777439;
            continue;
          case 14:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num5 = 0;
              goto label_16;
            }
            else
            {
              num1 = (int) num2 * 636848584 ^ 691518899;
              continue;
            }
          case 15:
            num1 = (int) num2 * -1845551788 ^ -1023760758;
            continue;
          case 16:
            int num7 = flag2 ? 843213077 : (num7 = 279911585);
            num1 = num7 ^ (int) num2 * 806188516;
            continue;
          case 17:
            num1 = (int) num2 * 698940188 ^ -441297903;
            continue;
          case 18:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1515176891 ^ 2146947314;
            continue;
          case 19:
            this.Piece = from.Piece;
            num1 = (int) num2 * -240356254 ^ 1441347042;
            continue;
          case 20:
            if (flag5)
            {
              num1 = (int) num2 * -528500117 ^ 111665924;
              continue;
            }
            goto label_70;
          case 21:
            num1 = -571135895;
            continue;
          case 22:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1313310013 ^ 1838831995;
            continue;
          case 23:
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * 813358332 ^ 508430837;
            continue;
          case 24:
            num1 = -1294057324;
            continue;
          case 25:
            flag5 = flag3;
            num1 = (int) num2 * -179507661 ^ -1810041008;
            continue;
          case 26:
            flag1 = this.Piece.Color == PieceColor.White;
            flag4 = flag1;
            num1 = (int) num2 * 2128390019 ^ 1248090876;
            continue;
          case 27:
            num1 = (int) num2 * -889682486 ^ -718328812;
            continue;
          case 28:
            num5 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_16;
          case 29:
            flag3 = true;
            num1 = (int) num2 * -1022316581 ^ 398143272;
            continue;
          case 30:
            flag3 = false;
            num1 = -416696795;
            continue;
          case 31:
            num4 = this.Rank == 4 ? 1 : 0;
            goto label_12;
          default:
            goto label_43;
        }
        int num8;
        num1 = num8 = num3 != 0 ? -408817381 : (num8 = -540032547);
        continue;
label_12:
        int num9;
        num1 = num9 = num4 != 0 ? -1885573769 : (num9 = -1979316706);
        continue;
label_16:
        int num10;
        num1 = num10 = num5 != 0 ? -1289600702 : (num10 = -911229497);
      }
label_43:
      Promotion promotion = new Promotion(Square.\u206F⁬⁬‭⁭‍‫⁯​‬‏‍‎​‮‏‪‫⁯‫‮​‭⁫‬‎‎‎⁫⁪⁭‍⁬⁪‏⁭⁭⁬⁯⁮‮());
      try
      {
        int num11 = (int) Square.\u200E⁪‏⁯‍⁮⁪‎‫‫⁪⁯⁬⁭‍‏⁮‪‏⁬⁮‎‪⁪⁪‪‎‫‮‎‪​⁯​‪‬‏‏⁯‌‮((Form) promotion);
label_45:
        int num12 = -1548154565;
        while (true)
        {
          uint num13;
          switch ((num13 = (uint) (num12 ^ -1366626753)) % 3U)
          {
            case 0:
              goto label_45;
            case 2:
              this.Kind = promotion.Piece;
              num12 = (int) num13 * 1248495192 ^ 14580231;
              continue;
            default:
              goto label_55;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_49:
          int num14 = -1671836631;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -1366626753)) % 4U)
            {
              case 0:
                goto label_49;
              case 1:
                num14 = (int) num15 * 1175630905 ^ -1340815071;
                continue;
              case 2:
                Square.\u206B​⁪‫⁪⁪⁬‮‫⁮‍‍‎‮⁯‎⁬‭‏‭⁮‌‮‎⁯‌⁫⁮⁬⁭⁫‏‏‎⁪‏‌‭‪⁮‮((IDisposable) promotion);
                num14 = (int) num15 * 946263333 ^ -948881916;
                continue;
              default:
                goto label_54;
            }
          }
        }
label_54:;
      }
label_55:
label_56:
      int num16 = -1586138187;
label_57:
      while (true)
      {
        uint num17;
        bool flag6;
        bool flag7;
        int file;
        bool isOnCheck;
        Square square1;
        bool flag8;
        int rank;
        bool flag9;
        bool flag10;
        Square square2;
        switch ((num17 = (uint) (num16 ^ -1366626753)) % 51U)
        {
          case 0:
            int num18 = isOnCheck ? 50151263 : (num18 = 709463320);
            num16 = num18 ^ (int) num17 * 1065003117;
            continue;
          case 1:
            num16 = -159413747;
            continue;
          case 2:
            num16 = (int) num17 * 1923233936 ^ 1115428039;
            continue;
          case 3:
            flag7 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -1546560162 ^ 1812243545;
            continue;
          case 4:
            goto label_70;
          case 5:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * 1315489521 ^ 1921504233;
            continue;
          case 6:
            PlaySound.Play();
            num16 = -1323676902;
            continue;
          case 7:
            num16 = (int) num17 * -1868066126 ^ -150314649;
            continue;
          case 8:
            goto label_56;
          case 9:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = -1052924311;
            continue;
          case 10:
            flag7 = true;
            num16 = (int) num17 * 526394694 ^ -590388810;
            continue;
          case 11:
            num16 = (int) num17 * 1744245828 ^ 972804585;
            continue;
          case 12:
            num16 = -765001131;
            continue;
          case 13:
            flag6 = flag1;
            num16 = (int) num17 * 847631516 ^ -580473365;
            continue;
          case 14:
            if (file != 5)
            {
              num16 = (int) num17 * 1105625035 ^ 692829674;
              continue;
            }
            square2 = this.Board[7, rank];
            break;
          case 15:
            from.Piece = this.Piece;
            num16 = (int) num17 * -1094830074 ^ 159503182;
            continue;
          case 16:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = -34643824;
            continue;
          case 17:
            rank = chessPiece.Current.Rank;
            num16 = (int) num17 * -135185336 ^ 1362692637;
            continue;
          case 18:
            file = chessPiece.Current.File;
            num16 = (int) num17 * -1709329241 ^ -386301119;
            continue;
          case 19:
            this.Board.lights.FindAllMoves();
            num16 = -1499347981;
            continue;
          case 20:
            this.SwitchPlayer();
            num16 = (int) num17 * 1517513654 ^ -2131457284;
            continue;
          case 21:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * -1894922991 ^ 1243303390;
            continue;
          case 22:
            this.Board.WhiteCanCastleQueenSide = true;
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * -1074040901 ^ -908358297;
            continue;
          case 23:
            num16 = (int) num17 * 1789154790 ^ -1258867828;
            continue;
          case 24:
            num16 = -324262752;
            continue;
          case 25:
            int num19 = !flag9 ? -1083430754 : (num19 = -745816273);
            num16 = num19 ^ (int) num17 * 831932539;
            continue;
          case 26:
            square1.Piece = chessPiece;
            num16 = (int) num17 * -1167393849 ^ -223328344;
            continue;
          case 27:
            num16 = (int) num17 * -59631307 ^ 657707444;
            continue;
          case 28:
            this.Board.BlackCanCastleQueenSide = true;
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * 1312398282 ^ 658030024;
            continue;
          case 29:
            flag10 = flag7;
            num16 = -894189922;
            continue;
          case 30:
            num16 = (int) num17 * -1539898505 ^ -1947450956;
            continue;
          case 31:
            num16 = (int) num17 * -185533974 ^ 819684341;
            continue;
          case 32:
            goto label_58;
          case 33:
            int num20 = this.Board.lights.KingColorOnCheck == this.Piece.Color ? -656341769 : (num20 = -1815409944);
            num16 = num20 ^ (int) num17 * -616117781;
            continue;
          case 34:
            this.msg = \u003CModule\u003E.\u206C‎​⁮‮‬⁮‏‭⁯‪⁫‬‎⁫⁯⁯⁮⁮‬‏‏⁫‍‪⁪⁫‏​⁪‍‮‏​⁯‮‪‌‍⁬‮<string>(3937550036U);
            int num21 = !flag1 ? -1773989090 : (num21 = -649980841);
            num16 = num21 ^ (int) num17 * -920003001;
            continue;
          case 35:
            num16 = (int) num17 * 1335470401 ^ 659411335;
            continue;
          case 36:
            num16 = (int) num17 * 1751250711 ^ -1820115760;
            continue;
          case 37:
            this.Piece = (ChessPiece) null;
            num16 = (int) num17 * -568216904 ^ 704271780;
            continue;
          case 38:
            square2 = this.Board[0, rank];
            break;
          case 39:
            int num22 = flag8 ? -440424662 : (num22 = -808005460);
            num16 = num22 ^ (int) num17 * 1679842275;
            continue;
          case 40:
            this.msg = \u003CModule\u003E.\u206C‎​⁮‮‬⁮‏‭⁯‪⁫‬‎⁫⁯⁯⁮⁮‬‏‏⁫‍‪⁪⁫‏​⁪‍‮‏​⁯‮‪‌‍⁬‮<string>(904411526U);
            num16 = (int) num17 * -597228613 ^ -859662562;
            continue;
          case 41:
            int num23 = !flag10 ? -1742610061 : (num23 = -547528551);
            num16 = num23 ^ (int) num17 * 1682806424;
            continue;
          case 42:
            num16 = (int) num17 * -1073790370 ^ -1243259985;
            continue;
          case 43:
            isOnCheck = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -1461965308 ^ 2066647595;
            continue;
          case 44:
            flag8 = chessPiece != null;
            num16 = -541869644;
            continue;
          case 45:
            num16 = (int) num17 * -1987954244 ^ -398743014;
            continue;
          case 46:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            num16 = -1360854582;
            continue;
          case 47:
            int num24 = !flag6 ? 1731200145 : (num24 = 112303534);
            num16 = num24 ^ (int) num17 * -1386100657;
            continue;
          case 48:
            num16 = (int) num17 * -1632373470 ^ -1677214080;
            continue;
          case 49:
            flag9 = this.Piece.Kind == Pieces.King;
            num16 = (int) num17 * 12110930 ^ 1803943498;
            continue;
          case 50:
            num16 = (int) num17 * 1546888861 ^ -745148118;
            continue;
          default:
            goto label_51;
        }
        square1 = square2;
        num16 = -1239013426;
      }
label_58:
      return;
label_51:
      return;
label_70:
      this.Board.lights.IsOnCheck = false;
      this.Board.lights.FindAllMoves();
      num16 = -1136684580;
      goto label_57;
    }

    private ChessPiece handleBlackCastling()
    {
label_1:
      int num1 = -492599699;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        Square square1;
        ChessPiece chessPiece2;
        bool flag1;
        Square square2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1977674914)) % 42U)
        {
          case 0:
            if (this.Board.BlackCanCastleKingSide)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * -113390852 ^ 2118834113;
            continue;
          case 1:
            num1 = -623960223;
            continue;
          case 3:
            num1 = -1371035052;
            continue;
          case 4:
            square2 = this.Board[5, 7];
            num1 = (int) num2 * 604365783 ^ -1437595752;
            continue;
          case 5:
            flag2 = this.Piece.Current.File == 2;
            num1 = (int) num2 * -1706065698 ^ -1799555765;
            continue;
          case 6:
            num1 = (int) num2 * -1374238045 ^ -456852630;
            continue;
          case 7:
            num1 = (int) num2 * -1698555778 ^ -1545002263;
            continue;
          case 8:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * 469969262 ^ 622119776;
            continue;
          case 9:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1871534094 ^ -510293846;
            continue;
          case 10:
            chessPiece1 = chessPiece2;
            num1 = -1536854658;
            continue;
          case 11:
            int num5 = flag1 ? -888930478 : (num5 = -268362620);
            num1 = num5 ^ (int) num2 * -457790800;
            continue;
          case 12:
            num1 = (int) num2 * -2077487489 ^ 1422523298;
            continue;
          case 13:
            square1 = this.Board[3, 7];
            square1.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * -2136414962 ^ 726262613;
            continue;
          case 14:
            square2.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * 1445566610 ^ 881748719;
            continue;
          case 15:
            num1 = -863321809;
            continue;
          case 16:
            this.Board.BlackCanCastleKingSide = false;
            num1 = -739906543;
            continue;
          case 17:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * -1395430691 ^ -2065416770;
            continue;
          case 18:
            num1 = (int) num2 * 393765153 ^ 1746830378;
            continue;
          case 19:
            goto label_1;
          case 20:
            int num6 = !flag3 ? 1389843842 : (num6 = 329681572);
            num1 = num6 ^ (int) num2 * -939687451;
            continue;
          case 21:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * -1319478472 ^ 429704388;
            continue;
          case 22:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_33;
          case 23:
            int num7 = flag4 ? -1873680175 : (num7 = -1337446650);
            num1 = num7 ^ (int) num2 * -517649986;
            continue;
          case 24:
            int num8 = flag5 ? 393094736 : (num8 = 941272421);
            num1 = num8 ^ (int) num2 * -1885485576;
            continue;
          case 25:
            int num9 = flag2 ? -553032694 : (num9 = -1781139006);
            num1 = num9 ^ (int) num2 * 1572890213;
            continue;
          case 26:
            int num10 = this.Piece.Kind == Pieces.Rook ? 1704780483 : (num10 = 1489115559);
            num1 = num10 ^ (int) num2 * 717962796;
            continue;
          case 27:
            num3 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            break;
          case 28:
            if (this.Piece.Kind == Pieces.King)
            {
              num4 = 1;
              goto label_33;
            }
            else
            {
              num1 = (int) num2 * 940259667 ^ 1714637024;
              continue;
            }
          case 29:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 1121982471 ^ 781655245;
            continue;
          case 30:
            flag4 = Square.\u200D‌⁪⁯⁮⁭‬‭‬⁮‮‍‫⁭‬‬‪‭‪‮‌‭⁯‮​⁯‌‍​​​‍⁯⁬​⁭‮‫‪⁮‮(this.Piece.Home.Name, \u003CModule\u003E.\u200C⁪⁪‬⁪‫‮‬​‭‮‬‍⁮​‮‏⁪‌​‭⁭‫‍⁮‫‫⁭‌‍⁭⁯‬‫‭‏‫⁮‫⁭‮<string>(964520882U));
            num1 = (int) num2 * 2001544702 ^ -626437937;
            continue;
          case 31:
            flag1 = this.Piece.Current.File == 6;
            num1 = -689925957;
            continue;
          case 32:
            num1 = (int) num2 * -1117854719 ^ 1421918030;
            continue;
          case 33:
            num1 = (int) num2 * -1043062274 ^ 1223173650;
            continue;
          case 34:
            num1 = -1843986363;
            continue;
          case 35:
            num1 = (int) num2 * 1802789126 ^ -1151559537;
            continue;
          case 36:
            this.Board.BlackCanCastleKingSide = false;
            num1 = (int) num2 * 1483196868 ^ -158246092;
            continue;
          case 37:
            num1 = (int) num2 * -1090122668 ^ 93041784;
            continue;
          case 38:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * 856848487 ^ 1006903431;
            continue;
          case 39:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 28665774 ^ -1362573861;
            continue;
          case 40:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = -1478728550;
            continue;
          case 41:
            num1 = (int) num2 * 480107756 ^ 1021355873;
            continue;
          default:
            goto label_49;
        }
        flag3 = num3 != 0;
        num1 = -1688000448;
        continue;
label_33:
        flag5 = num4 != 0;
        num1 = -1324286974;
      }
label_49:
      return chessPiece1;
    }

    private ChessPiece handleWhiteCastling()
    {
label_1:
      int num1 = 257663364;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        bool flag1;
        Square square1;
        bool flag2;
        Square square2;
        ChessPiece chessPiece2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1992761582)) % 38U)
        {
          case 0:
            this.Board.WhiteCanCastleQueenSide = false;
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 1405946510;
            continue;
          case 1:
            flag1 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * -549499935 ^ 728368657;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 532998621 ^ 1278700087;
            continue;
          case 4:
            num1 = 1858595299;
            continue;
          case 5:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 938624302;
            continue;
          case 6:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * 815006786 ^ 772629290;
            continue;
          case 7:
            flag3 = this.Piece.Current.File == 2;
            num1 = 1481498624;
            continue;
          case 8:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * -377149900 ^ -1330361941;
            continue;
          case 9:
            num1 = (int) num2 * -1478267077 ^ 1257916950;
            continue;
          case 10:
            square2 = this.Board[5, 0];
            num1 = (int) num2 * -973358371 ^ -661818556;
            continue;
          case 11:
            num1 = (int) num2 * -1485217080 ^ 2139906936;
            continue;
          case 12:
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -399846824 ^ -1049974593;
            continue;
          case 13:
            num1 = (int) num2 * 2068836150 ^ 378395104;
            continue;
          case 14:
            int num5 = !flag3 ? -1714375752 : (num5 = -1086638899);
            num1 = num5 ^ (int) num2 * 203013087;
            continue;
          case 16:
            num1 = 1405946510;
            continue;
          case 17:
            num1 = (int) num2 * 398940405 ^ 112172225;
            continue;
          case 18:
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -1484838807 ^ -1999623392;
            continue;
          case 19:
            int num6 = flag2 ? -1614477765 : (num6 = -1601024654);
            num1 = num6 ^ (int) num2 * 1502715357;
            continue;
          case 20:
            if (this.Board.WhiteCanCastleKingSide)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 737109290 ^ 2031396075;
            continue;
          case 21:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_34;
          case 22:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -476989985 ^ 1021868289;
            continue;
          case 23:
            chessPiece1 = chessPiece2;
            num1 = 458817715;
            continue;
          case 24:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 760330540 ^ -1748560286;
            continue;
          case 25:
            square1.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * 1019122124 ^ 1373072963;
            continue;
          case 26:
            int num7 = flag1 ? 425697923 : (num7 = 356683719);
            num1 = num7 ^ (int) num2 * 939156754;
            continue;
          case 27:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * -1841007000 ^ 1399347458;
            continue;
          case 28:
            num1 = (int) num2 * 865071600 ^ -1353813321;
            continue;
          case 29:
            num3 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            break;
          case 30:
            int num8;
            num1 = num8 = this.Piece.Current.File != 6 ? 2079434424 : (num8 = 1484277492);
            continue;
          case 31:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 1230749327 ^ -301068150;
              continue;
            }
            num4 = 1;
            goto label_34;
          case 32:
            square2.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * -497450450 ^ -1847976355;
            continue;
          case 33:
            num1 = 607910399;
            continue;
          case 34:
            flag2 = Square.\u200D‌⁪⁯⁮⁭‬‭‬⁮‮‍‫⁭‬‬‪‭‪‮‌‭⁯‮​⁯‌‍​​​‍⁯⁬​⁭‮‫‪⁮‮(this.Piece.Home.Name, \u003CModule\u003E.\u206C‎​⁮‮‬⁮‏‭⁯‪⁫‬‎⁫⁯⁯⁮⁮‬‏‏⁫‍‪⁪⁫‏​⁪‍‮‏​⁯‮‪‌‍⁬‮<string>(2582198177U));
            num1 = (int) num2 * 247846051 ^ -1262025237;
            continue;
          case 35:
            square1 = this.Board[3, 0];
            num1 = (int) num2 * -374564557 ^ -1966978356;
            continue;
          case 36:
            num1 = (int) num2 * 1693760638 ^ 1364592718;
            continue;
          case 37:
            num1 = (int) num2 * -103627671 ^ -597437325;
            continue;
          default:
            goto label_45;
        }
        int num9;
        num1 = num9 = num3 == 0 ? 607910399 : (num9 = 1151075054);
        continue;
label_34:
        int num10;
        num1 = num10 = num4 != 0 ? 2036057369 : (num10 = 1858595299);
      }
label_45:
      return chessPiece1;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = -639468803;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1280437168)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            Square.\u206A‎⁭⁬‎⁯⁪⁮‍‬‫⁬‫⁪​‎‌​‮‌⁪​⁮⁭‭‪⁬‍‮‍⁭‮‪⁪‫‍‭‮‍‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * -859405232 ^ -60250125;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -1251800523 ^ -1918120341;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    protected override void Dispose(bool disposing)
    {
      if (!disposing)
        goto label_8;
label_1:
      int num1 = -1980049159;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -499996537)) % 7U)
        {
          case 1:
            num1 = (int) num2 * -55594219 ^ 484034998;
            continue;
          case 2:
            num1 = (int) num2 * 255108694 ^ 2034017621;
            continue;
          case 3:
            goto label_7;
          case 4:
            Square.\u206B​⁪‫⁪⁪⁬‮‫⁮‍‍‎‮⁯‎⁬‭‏‭⁮‌‮‎⁯‌⁫⁮⁬⁭⁫‏‏‎⁪‏‌‭‪⁮‮((IDisposable) this.components);
            num1 = (int) num2 * -714182455 ^ -579231694;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * -1379013848 ^ 1711919905;
            continue;
          default:
            goto label_10;
        }
      }
label_7:
      int num3 = this.components != null ? 1 : 0;
      goto label_9;
label_10:
      base.Dispose(disposing);
      return;
label_8:
      num3 = 0;
label_9:
      num1 = num3 == 0 ? -1235798847 : (num1 = -13364110);
      goto label_2;
    }

    private void InitializeComponent()
    {
      Square.\u200C‏‏​⁮‪‍‬‭⁪‌​⁫⁪‏​‎‏⁮‎​‭⁪​⁯⁪⁭‫‌⁭‍⁯⁮⁮⁬⁫‏⁯‌‎‮((Control) this);
label_1:
      int num1 = -454290356;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1091277377)) % 12U)
        {
          case 0:
            Square.\u202D⁮‮​⁬⁪⁬‍​‍‪‮‫‮‫‮‍‎⁯‬‪‬⁪​‪⁭‏‫‬‏​‬‍‪⁪‬‎‪⁫‪‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 1243477337 ^ 1825552993;
            continue;
          case 1:
            goto label_3;
          case 2:
            Square.\u200F‭‍⁮​‏⁪‌‮‏‏‭‫‏⁯‪⁫​⁯‏‏‍⁯‍‎‭‏​‫‌‪‍⁬‫‍‌‬​⁭‪‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * 650302978 ^ -421488730;
            continue;
          case 3:
            num1 = (int) num2 * 144984466 ^ 1196082081;
            continue;
          case 4:
            Square.\u200B‍⁭⁮‎‬‫⁪⁭‍⁯⁮‮⁫‭‭‌⁪⁫‏‎‪⁫⁮‍‬⁮⁫‭⁭⁪⁯⁪‏‮‏⁯‍⁯‬‮((Control) this, new Padding(0));
            num1 = (int) num2 * -48460720 ^ -937248815;
            continue;
          case 5:
            num1 = (int) num2 * -1165267666 ^ 240393545;
            continue;
          case 6:
            this.Name = \u003CModule\u003E.\u206C‎​⁮‮‬⁮‏‭⁯‪⁫‬‎⁫⁯⁯⁮⁮‬‏‏⁫‍‪⁪⁫‏​⁪‍‮‏​⁯‮‪‌‍⁬‮<string>(3629070435U);
            num1 = (int) num2 * 289804024 ^ -1863220709;
            continue;
          case 7:
            num1 = (int) num2 * -526229220 ^ 1672918393;
            continue;
          case 8:
            Square.\u206A‬‎‪⁫‬⁫⁯‏‮⁬‍‮⁪⁪‭‭⁮‌‏⁭⁮⁬‪‭‮‮‮‪‭‏​‭‪⁯‭⁯‭⁬⁪‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * -611630841 ^ -686287464;
            continue;
          case 9:
            goto label_1;
          case 10:
            Square.\u206E‎‍‏‌⁬​⁯‬⁬⁪⁭⁯‮⁯‌​‎⁮‎⁬⁪⁪‏⁪‭⁫⁪‭⁪‭⁭‪⁯​⁯‭⁪‪⁫‮((Control) this, false);
            num1 = (int) num2 * 672562938 ^ 2028426314;
            continue;
          case 11:
            Square.\u202A⁯‎​⁫⁫‫⁬⁪‫‎‏⁮‮‪⁯‏⁯‫​⁬⁭‏‍⁭⁬⁭‏⁬⁭⁫‫‏⁪‮‭⁯⁭⁯‪‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -208584037 ^ 57815273;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    static Delegate \u200D⁮⁬⁯⁬‬‍⁯‮‪‭‬‮‪‏⁭‬‬⁯‌⁭‫‎​‬⁭⁪‬⁬⁬⁫‬‍‬‮‪‍‎​‭‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u202C‎‭‍⁭⁫‫⁮‌‬⁫⁮‍⁪‌⁮‌⁫‮‎‬‫⁯‭⁮‏‪‬‍‮⁪‫‏⁮‪‭⁮⁬⁬‍‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u206F‪‌‮‪⁯⁮‍‬‮⁬‎‮⁭‮‍‪‍⁫⁫⁮‭‫​⁮‫‍‭⁯‪​‬⁭‬⁫⁪​⁬‭‮‮([In] object obj0) => obj0.ToString();

    static string \u200C‭‭‮‮⁫‌‪‎‍‭⁫‫‍⁬‌‬‏⁯⁮⁪⁫‍‌⁮‌​‮⁮‬‭‎‌‫‬⁯‏‎‌‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u200E‫‍‭‎‌‏⁪‌‫‌‍⁯‫⁯‫⁫‭‫‏⁪‫‬⁯‏‌‪‬‌‮‌‬‎⁫⁭⁮​⁭‮‬‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u206B‌⁫‮‍‎‬⁯⁮‮‭⁮⁫‫⁬⁪⁯‪‏‌‪‫⁬⁮‏‎‭‌⁯⁯​⁫⁪⁮⁬‭⁬‎‬⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u202C‍‮‪⁬⁭⁯‮‎‌‭‮‎⁯‭⁮⁯‍‍​‫‮⁬‍‍⁫‍⁪⁮⁯‮‏‭‭‍‮⁭‌⁭⁫‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u202E‎⁬⁬‪⁬⁫‍⁪⁮⁫​⁭‎‏‬⁫​‏⁯‌⁬‌⁪⁯​​‮‭‌⁪‍‎‪⁪‭⁮‮⁬⁪‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u206F⁬⁬‭⁭‍‫⁯​‬‏‍‎​‮‏‪‫⁯‫‮​‭⁫‬‎‎‎⁫⁪⁭‍⁬⁪‏⁭⁭⁬⁯⁮‮() => Cursor.Position;

    static DialogResult \u200E⁪‏⁯‍⁮⁪‎‫‫⁪⁯⁬⁭‍‏⁮‪‏⁬⁮‎‪⁪⁪‪‎‫‮‎‪​⁯​‪‬‏‏⁯‌‮([In] Form obj0) => obj0.ShowDialog();

    static void \u206B​⁪‫⁪⁪⁬‮‫⁮‍‍‎‮⁯‎⁬‭‏‭⁮‌‮‎⁯‌⁫⁮⁬⁭⁫‏‏‎⁪‏‌‭‪⁮‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u200D‌⁪⁯⁮⁭‬‭‬⁮‮‍‫⁭‬‬‪‭‪‮‌‭⁯‮​⁯‌‍​​​‍⁯⁬​⁭‮‫‪⁮‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u206A‎⁭⁬‎⁯⁪⁮‍‬‫⁬‫⁪​‎‌​‮‌⁪​⁮⁭‭‪⁬‍‮‍⁭‮‪⁪‫‍‭‮‍‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u200C‏‏​⁮‪‍‬‭⁪‌​⁫⁪‏​‎‏⁮‎​‭⁪​⁯⁪⁭‫‌⁭‍⁯⁮⁮⁬⁫‏⁯‌‎‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u200F‭‍⁮​‏⁪‌‮‏‏‭‫‏⁯‪⁫​⁯‏‏‍⁯‍‎‭‏​‫‌‪‍⁬‫‍‌‬​⁭‪‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u206A‬‎‪⁫‬⁫⁯‏‮⁬‍‮⁪⁪‭‭⁮‌‏⁭⁮⁬‪‭‮‮‮‪‭‏​‭‪⁯‭⁯‭⁬⁪‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u202A⁯‎​⁫⁫‫⁬⁪‫‎‏⁮‮‪⁯‏⁯‫​⁬⁭‏‍⁭⁬⁭‏⁬⁭⁫‫‏⁪‮‭⁯⁭⁯‪‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u200B‍⁭⁮‎‬‫⁪⁭‍⁯⁮‮⁫‭‭‌⁪⁫‏‎‪⁫⁮‍‬⁮⁫‭⁭⁪⁯⁪‏‮‏⁯‍⁯‬‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202D⁮‮​⁬⁪⁬‍​‍‪‮‫‮‫‮‍‎⁯‬‪‬⁪​‪⁭‏‫‬‏​‬‍‪⁪‬‎‪⁫‪‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206E‎‍‏‌⁬​⁯‬⁬⁪⁭⁯‮⁯‌​‎⁮‎⁬⁪⁪‏⁪‭⁫⁪‭⁪‭⁭‪⁯​⁯‭⁪‪⁫‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
