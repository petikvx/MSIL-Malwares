// Decompiled with JetBrains decompiler
// Type: Ge79.Xa2x
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using An9;
using e7Z3;
using Fm49;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Drawing;
using System.Drawing.Printing;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;
using System.Windows.Forms.Automation;
using x7X;
using z0R5;

namespace Ge79
{
  [DesignerGenerated]
  public class Xa2x : Form
  {
    [AccessedThroughProperty("Ⴈ")]
    private Label Ⴅ;
    private p8DY.Bw60 Ⴗ = new p8DY.Bw60();

    public Xa2x()
    {
      this.Load += new EventHandler(this.Bm0z);
      this.Kn21();
    }

    protected virtual void p8D4([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.Ⴗ.Ⴗ == null)
          return;
        this.Ⴗ.Ⴗ.Dispose();
      }
      finally
      {
        this.Dispose(obj0);
      }
    }

    private void Kn21()
    {
      object obj = (object) new ComponentResourceManager(typeof (Xa2x));
      this.Ⴈ = new Label();
      this.Ⴍ = new Label();
      this.Ⴄ = new DataGridView();
      this.Ⴗ = new Button();
      this.Ⴃ = new Button();
      this.Ⴓ = new PrintDocument();
      this.Ⴀ = new PrintPreviewDialog();
      ((ISupportInitialize) this.Ⴄ).BeginInit();
      this.SuspendLayout();
      this.Ⴈ.AutoSize = true;
      this.Ⴈ.Font = new Font("Microsoft Sans Serif", 14f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴈ.Location = new Point(296, 5);
      this.Ⴈ.Name = "Label2";
      this.Ⴈ.Size = new Size(209, 32);
      this.Ⴈ.TabIndex = 29;
      this.Ⴈ.Text = "Payroll history";
      this.Ⴍ.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.Ⴍ.Location = new Point(11, 410);
      this.Ⴍ.Margin = new Padding(4, 0, 4, 0);
      this.Ⴍ.Name = "lblCount";
      this.Ⴍ.Size = new Size(150, 35);
      this.Ⴍ.TabIndex = 28;
      this.Ⴍ.Text = "X records(s)";
      this.Ⴍ.TextAlign = ContentAlignment.MiddleLeft;
      this.Ⴄ.AllowUserToAddRows = false;
      this.Ⴄ.AllowUserToDeleteRows = false;
      this.Ⴄ.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.Ⴄ.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.Ⴄ.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells;
      this.Ⴄ.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.Ⴄ.Location = new Point(13, 81);
      this.Ⴄ.Margin = new Padding(4, 5, 4, 5);
      this.Ⴄ.Name = "dgv";
      this.Ⴄ.ReadOnly = true;
      this.Ⴄ.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      this.Ⴄ.Size = new Size(774, 307);
      this.Ⴄ.TabIndex = 27;
      this.Ⴗ.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.Ⴗ.AutoSize = true;
      this.Ⴗ.BackColor = Color.MediumSeaGreen;
      this.Ⴗ.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴗ.ForeColor = SystemColors.ControlLightLight;
      this.Ⴗ.Location = new Point(659, 27);
      this.Ⴗ.Name = "btnRefresh";
      this.Ⴗ.Size = new Size(130, 51);
      this.Ⴗ.TabIndex = 0;
      this.Ⴗ.Text = "&Refresh";
      this.Ⴗ.UseVisualStyleBackColor = false;
      this.Ⴃ.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.Ⴃ.AutoSize = true;
      this.Ⴃ.BackColor = SystemColors.Highlight;
      this.Ⴃ.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴃ.ForeColor = SystemColors.ControlLightLight;
      this.Ⴃ.Location = new Point(659, 403);
      this.Ⴃ.Name = "btnPrint";
      this.Ⴃ.Size = new Size(128, 42);
      this.Ⴃ.TabIndex = 1;
      this.Ⴃ.Text = "Print";
      this.Ⴃ.UseVisualStyleBackColor = false;
      this.Ⴓ.OriginAtMargins = true;
      this.Ⴀ.AutoScrollMargin = new Size(0, 0);
      this.Ⴀ.AutoScrollMinSize = new Size(0, 0);
      this.Ⴀ.ClientSize = new Size(400, 300);
      this.Ⴀ.Enabled = true;
      this.Ⴀ.Icon = (Icon) ((ResourceManager) obj).GetObject("dlgPreview.Icon");
      this.Ⴀ.Name = "dlgPreview";
      this.Ⴀ.UseAntiAlias = true;
      this.Ⴀ.Visible = false;
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.LightSteelBlue;
      this.ClientSize = new Size(800, 450);
      this.Controls.Add((Control) this.Ⴃ);
      this.Controls.Add((Control) this.Ⴗ);
      this.Controls.Add((Control) this.Ⴈ);
      this.Controls.Add((Control) this.Ⴍ);
      this.Controls.Add((Control) this.Ⴄ);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = "ႰႠ";
      this.Text = "EmpHistoryPayroll";
      ((ISupportInitialize) this.Ⴄ).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Label Ⴈ
    {
      get => this.Ⴅ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴅ = value;
    }

    internal virtual Label Ⴍ
    {
      get => this.Ⴗ.Ⴅ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴗ.Ⴅ = (IAutomationLiveRegion) value as Label;
    }

    internal virtual DataGridView Ⴄ
    {
      get => this.Ⴗ.Ⴄ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴗ.Ⴄ = value;
    }

    internal virtual Button Ⴗ
    {
      get => this.Ⴗ.Ⴐ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new EventHandler(this.c6B5);
        IButtonControl ⴐ1 = (IButtonControl) this.Ⴗ.Ⴐ;
        if (ⴐ1 is Button)
          ((Control) ⴐ1).Click -= (EventHandler) obj;
        this.Ⴗ.Ⴐ = (ButtonBase) value as Button;
        IButtonControl ⴐ2 = (IButtonControl) this.Ⴗ.Ⴐ;
        if ((Button) ⴐ2 == null)
          return;
        ((Control) ⴐ2).Click += obj as EventHandler;
      }
    }

    internal virtual Button Ⴃ
    {
      get => this.Ⴗ.Ⴓ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.c5M1);
        ButtonBase ⴓ1 = (ButtonBase) this.Ⴗ.Ⴓ;
        if ((Button) ⴓ1 != null)
          (ⴓ1 as Button).Click -= multicastDelegate as EventHandler;
        this.Ⴗ.Ⴓ = value;
        ButtonBase ⴓ2 = (ButtonBase) this.Ⴗ.Ⴓ;
        if (!(ⴓ2 is Button))
          return;
        ⴓ2.Click += multicastDelegate as EventHandler;
      }
    }

    internal virtual PrintDocument Ⴓ
    {
      get => this.Ⴗ.Ⴈ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new PrintPageEventHandler(this.Ks0c);
        object ⴈ1 = (object) this.Ⴗ.Ⴈ;
        if (ⴈ1 is PrintDocument)
          (ⴈ1 as PrintDocument).PrintPage -= (PrintPageEventHandler) obj;
        this.Ⴗ.Ⴈ = (Component) value as PrintDocument;
        object ⴈ2 = (object) this.Ⴗ.Ⴈ;
        if (!(ⴈ2 is PrintDocument))
          return;
        ((PrintDocument) ⴈ2).PrintPage += (PrintPageEventHandler) obj;
      }
    }

    internal virtual PrintPreviewDialog Ⴀ
    {
      get => this.Ⴗ.Ⴃ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴗ.Ⴃ = (Form) value as PrintPreviewDialog;
    }

    private void Aq29()
    {
      Table<Xz10> ⴈ = new Tt1().Ⴈ;
      Expression expression = (Expression) Expression.Parameter(typeof (Xz10), "c");
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: field reference
      Expression<Func<Xz10, bool>> predicate = Expression.Lambda<Func<Xz10, bool>>((Expression) Expression.Equal((Expression) Expression.Call((Expression) null, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Operators.CompareString)), new Expression[3]
      {
        (Expression) Expression.Property(expression, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Xz10.Np20))),
        (Expression) Expression.Field((Expression) null, FieldInfo.GetFieldFromHandle(__fieldref (Ec63.Ⴅ))),
        (Expression) Expression.Constant((object) false, typeof (bool))
      }), (Expression) Expression.Constant((object) 0, typeof (int)), false, (MethodInfo) null), expression as ParameterExpression);
      object source = (object) ⴈ.Where<Xz10>(predicate);
      this.Ⴄ.DataSource = (object) (source as IQueryable<Xz10>);
      this.Ⴍ.Text = ((IQueryable<Xz10>) source).Count<Xz10>().ToString("0 record(s)");
    }

    private void Bm0z([In] object obj0, [In] EventArgs obj1)
    {
      En6.Ⴈ.Ⴓ.Ⴜ.Enabled = true;
      En6.Ⴈ.Ⴓ.ႠႥ.Enabled = true;
      this.Aq29();
      En6.Ⴈ.Ⴅ.Text = "Human Resource Management System - Staff Payroll history";
    }

    private void c6B5([In] object obj0, [In] EventArgs obj1) => this.Aq29();

    private void c5M1([In] object obj0, [In] EventArgs obj1)
    {
      this.Ⴀ.Document = this.Ⴓ;
      try
      {
        int num = (int) this.Ⴀ.ShowDialog((IWin32Window) this);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.Ⴀ.Close();
        ProjectData.ClearProjectError();
      }
    }

    private void Ks0c([In] object obj0, [In] PrintPageEventArgs obj1)
    {
      MarshalByRefObject marshalByRefObject = (MarshalByRefObject) new Font("Calibri", 24f, FontStyle.Bold);
      IDisposable disposable1 = (IDisposable) new Font("Calibri", 12f);
      IDisposable disposable2 = (IDisposable) new Font("Consolas", 10f);
      IEquatable<string> s1 = (IEquatable<string>) "Payroll history Listing";
      object s2 = (object) string.Format("Printed on {0:dd-MMMM-yyyy hh:mm:ss tt}\r\nPrepared for " + Ec63.Ⴅ, (object) DateTime.Now);
      object obj2 = (object) new StringBuilder();
      (obj2 as StringBuilder).AppendLine("No  PayrollID     Attd     Pay      Date          Mandatory Ddt      Extra deduction");
      ((StringBuilder) obj2).AppendLine("--  ---------     ----     -------  ------------  -------------      ----------------");
      int num = 0;
      Table<Xz10> ⴈ = new Tt1().Ⴈ;
      Expression expression = (Expression) Expression.Parameter(typeof (Xz10), "c");
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: field reference
      Expression<Func<Xz10, bool>> predicate = Expression.Lambda<Func<Xz10, bool>>((Expression) Expression.Equal((Expression) Expression.Call((Expression) null, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Operators.CompareString)), new Expression[3]
      {
        (Expression) Expression.Property((Expression) (expression as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Xz10.Np20))),
        (Expression) Expression.Field((Expression) null, FieldInfo.GetFieldFromHandle(__fieldref (Ec63.Ⴅ))),
        (Expression) Expression.Constant((object) false, typeof (bool))
      }), (Expression) Expression.Constant((object) 0, typeof (int)), false, (MethodInfo) null), (ParameterExpression) expression);
      object list = (object) ⴈ.Where<Xz10>(predicate).ToList<Xz10>();
      try
      {
        foreach (object obj3 in list as List<Xz10>)
        {
          checked { ++num; }
          (obj2 as StringBuilder).AppendFormat("{0,3} {1,-8} {2,-8} {3,3} {4,11} {5,10} {6,10} {7,28}", (object) "\r\n", (object) num, (object) (obj3 as Xz10).Ⴐ, (object) ((Xz10) obj3).Ⴅ, (object) ((Xz10) obj3).Ⴅ, (object) ((Xz10) obj3).Ⴓ.Value.ToShortDateString(), (object) (obj3 as Xz10).Ⴗ, (object) (obj3 as Xz10).Ⴐ);
        }
      }
      finally
      {
        List<Xz10>.Enumerator enumerator;
        enumerator.Dispose();
      }
      (obj2 as StringBuilder).AppendLine();
      ((StringBuilder) obj2).AppendLine();
      ((StringBuilder) obj2).AppendFormat("{0,2} record(s)", (object) num);
      object graphics = (object) obj1.Graphics;
      (graphics as Graphics).DrawString(s1 as string, marshalByRefObject as Font, Brushes.Purple, 100f, 0.0f);
      (graphics as Graphics).DrawString((string) s2, (Font) disposable1, Brushes.Black, 100f, 40f);
      ((Graphics) graphics).DrawString(((StringBuilder) obj2).ToString(), (Font) disposable2, Brushes.Black, 0.0f, 120f);
    }
  }
}
