// Decompiled with JetBrains decompiler
// Type: ‬‮⁭⁮⁮⁯‫‭‭‪⁪‎‭⁮‌⁬‫⁯‎‬‮‏⁫‫⁪‭‮‮⁯‮‪⁯⁯​‫⁫‮⁭⁭‌‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;

public class \u202C‮⁭⁮⁮⁯‫‭‭‪⁪‎‭⁮‌⁬‫⁯‎‬‮‏⁫‫⁪‭‮‮⁯‮‪⁯⁯​‫⁫‮⁭⁭‌‮ : 
  \u202E⁫⁪‭⁫‮‪⁫‮‎‫‪​‭‪‍⁮⁬‎‎⁫‎⁬⁭‎⁯‬‪⁫‫‬‎​‬‍⁮‌⁫⁬⁭‮
{
  public const int \u200F‬⁫⁯‌⁭​⁬⁬‏‫‪​⁫‌‫⁬​⁪‎‮‏‌‮‭‪‌‪⁪‎‭‬‭⁫⁪‪⁬‬‏⁯‮ = 24;

  private static byte[] \u200F‬‌‭⁪⁬​‌‪‎‍‌‎⁮​⁪‎⁫⁯​⁪‭⁬‍‮‮⁯‪‎⁬‍​⁭⁪⁫‫⁭‍⁯‍‮(
    byte[] _param0,
    int _param1,
    int _param2)
  {
    byte[] destinationArray = new byte[24];
    if (_param2 != 16)
    {
      if (_param2 != 24)
        throw new ArgumentException("Bad length for DESede key: " + _param2.ToString(), "keyLen");
      Array.Copy((Array) _param0, _param1, (Array) destinationArray, 0, 24);
    }
    else
    {
      Array.Copy((Array) _param0, _param1, (Array) destinationArray, 0, 16);
      Array.Copy((Array) _param0, _param1, (Array) destinationArray, 16, 8);
    }
    return !\u202C‮⁭⁮⁮⁯‫‭‭‪⁪‎‭⁮‌⁬‫⁯‎‬‮‏⁫‫⁪‭‮‮⁯‮‪⁯⁯​‫⁫‮⁭⁭‌‮.\u202C‭​⁬‬⁬⁮⁬‌⁫⁬​⁯‎‪‪‏⁪⁬‫‮‎⁫‫‮⁭‬‮‍⁪‭​⁯⁫‏‬‏‍‪⁮‮(destinationArray) ? destinationArray : throw new ArgumentException("attempt to create weak DESede key");
  }

  public \u202C‮⁭⁮⁮⁯‫‭‭‪⁪‎‭⁮‌⁬‫⁯‎‬‮‏⁫‫⁪‭‮‮⁯‮‪⁯⁯​‫⁫‮⁭⁭‌‮(byte[] _param1)
    : base(\u202C‮⁭⁮⁮⁯‫‭‭‪⁪‎‭⁮‌⁬‫⁯‎‬‮‏⁫‫⁪‭‮‮⁯‮‪⁯⁯​‫⁫‮⁭⁭‌‮.\u200F‬‌‭⁪⁬​‌‪‎‍‌‎⁮​⁪‎⁫⁯​⁪‭⁬‍‮‮⁯‪‎⁬‍​⁭⁪⁫‫⁭‍⁯‍‮(_param1, 0, _param1.Length))
  {
  }

  public \u202C‮⁭⁮⁮⁯‫‭‭‪⁪‎‭⁮‌⁬‫⁯‎‬‮‏⁫‫⁪‭‮‮⁯‮‪⁯⁯​‫⁫‮⁭⁭‌‮(byte[] _param1, int _param2, int _param3)
    : base(\u202C‮⁭⁮⁮⁯‫‭‭‪⁪‎‭⁮‌⁬‫⁯‎‬‮‏⁫‫⁪‭‮‮⁯‮‪⁯⁯​‫⁫‮⁭⁭‌‮.\u200F‬‌‭⁪⁬​‌‪‎‍‌‎⁮​⁪‎⁫⁯​⁪‭⁬‍‮‮⁯‪‎⁬‍​⁭⁪⁫‫⁭‍⁯‍‮(_param1, _param2, _param3))
  {
  }

  public static bool \u202C‭​⁬‬⁬⁮⁬‌⁫⁬​⁯‎‪‪‏⁪⁬‫‮‎⁫‫‮⁭‬‮‍⁪‭​⁯⁫‏‬‏‍‪⁮‮(
    byte[] _param0,
    int _param1,
    int _param2)
  {
    for (int index = _param1; index < _param2; index += 8)
    {
      if (\u202E⁫⁪‭⁫‮‪⁫‮‎‫‪​‭‪‍⁮⁬‎‎⁫‎⁬⁭‎⁯‬‪⁫‫‬‎​‬‍⁮‌⁫⁬⁭‮.\u202C‭​⁬‬⁬⁮⁬‌⁫⁬​⁯‎‪‪‏⁪⁬‫‮‎⁫‫‮⁭‬‮‍⁪‭​⁯⁫‏‬‏‍‪⁮‮(_param0, index))
        return true;
    }
    return false;
  }

  public new static bool \u202C‭​⁬‬⁬⁮⁬‌⁫⁬​⁯‎‪‪‏⁪⁬‫‮‎⁫‫‮⁭‬‮‍⁪‭​⁯⁫‏‬‏‍‪⁮‮(byte[] _param0, int _param1) => \u202C‮⁭⁮⁮⁯‫‭‭‪⁪‎‭⁮‌⁬‫⁯‎‬‮‏⁫‫⁪‭‮‮⁯‮‪⁯⁯​‫⁫‮⁭⁭‌‮.\u202C‭​⁬‬⁬⁮⁬‌⁫⁬​⁯‎‪‪‏⁪⁬‫‮‎⁫‫‮⁭‬‮‍⁪‭​⁯⁫‏‬‏‍‪⁮‮(_param0, _param1, _param0.Length - _param1);

  public new static bool \u202C‭​⁬‬⁬⁮⁬‌⁫⁬​⁯‎‪‪‏⁪⁬‫‮‎⁫‫‮⁭‬‮‍⁪‭​⁯⁫‏‬‏‍‪⁮‮(byte[] _param0) => \u202C‮⁭⁮⁮⁯‫‭‭‪⁪‎‭⁮‌⁬‫⁯‎‬‮‏⁫‫⁪‭‮‮⁯‮‪⁯⁯​‫⁫‮⁭⁭‌‮.\u202C‭​⁬‬⁬⁮⁬‌⁫⁬​⁯‎‪‪‏⁪⁬‫‮‎⁫‫‮⁭‬‮‍⁪‭​⁯⁫‏‬‏‍‪⁮‮(_param0, 0, _param0.Length);

  public static bool \u206B⁫‫‍⁮‪⁫‏​⁯‭‌‌⁮‬‪⁫‬‭‪⁬⁯‎‎⁫‎⁪⁯‪​​‍⁮⁫⁯‍‎‎‪‍‮(byte[] _param0, int _param1) => _param0.Length != 16 ? \u202C‮⁭⁮⁮⁯‫‭‭‪⁪‎‭⁮‌⁬‫⁯‎‬‮‏⁫‫⁪‭‮‮⁯‮‪⁯⁯​‫⁫‮⁭⁭‌‮.\u206D⁫‬⁪​‭⁪‭‮⁫‌​‬‏‍‌‬⁭‍‬‏​‫‎‭‏‫‎‭‏‌​‪⁪‏⁬⁭‍‬‪‮(_param0, _param1) : \u202C‮⁭⁮⁮⁯‫‭‭‪⁪‎‭⁮‌⁬‫⁯‎‬‮‏⁫‫⁪‭‮‮⁯‮‪⁯⁯​‫⁫‮⁭⁭‌‮.\u202D‍‌‬‪‪‭‌​‮‎‍‫​‮‭‏‎⁭⁮⁫⁫‍⁮⁪‮⁪⁭⁪⁭⁫⁯⁮⁫⁪‍⁫‫‬⁭‮(_param0, _param1);

  public static bool \u202D‍‌‬‪‪‭‌​‮‎‍‫​‮‭‏‎⁭⁮⁫⁫‍⁮⁪‮⁪⁭⁪⁭⁫⁯⁮⁫⁪‍⁫‫‬⁭‮(byte[] _param0, int _param1)
  {
    bool flag = false;
    for (int index = _param1; index != _param1 + 8; ++index)
      flag |= (int) _param0[index] != (int) _param0[index + 8];
    return flag;
  }

  public static bool \u206D⁫‬⁪​‭⁪‭‮⁫‌​‬‏‍‌‬⁭‍‬‏​‫‎‭‏‫‎‭‏‌​‪⁪‏⁬⁭‍‬‪‮(byte[] _param0, int _param1)
  {
    bool flag1 = false;
    bool flag2 = false;
    bool flag3 = false;
    for (int index = _param1; index != _param1 + 8; ++index)
    {
      flag1 |= (int) _param0[index] != (int) _param0[index + 8];
      flag2 |= (int) _param0[index] != (int) _param0[index + 16];
      flag3 |= (int) _param0[index + 8] != (int) _param0[index + 16];
    }
    return flag1 & flag2 & flag3;
  }
}
