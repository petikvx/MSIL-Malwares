// Decompiled with JetBrains decompiler
// Type: Microsoft.MediaCenter.TV.Tuners.SafeRecorder
// Assembly: Microsoft.MediaCenter.TV.Tuners.Interop, Version=6.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 4545DFBD-7834-4511-B0E8-46F2D6BF39B8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Virus.Win32.Xpaj.gena-cd1c6eac0092a3981efe696f4cd6bf740246c6dcb9698d78918623e86d74734f.exe

using ATL;
using msclr;
using System;
using System.Runtime.InteropServices;

namespace Microsoft.MediaCenter.TV.Tuners
{
  internal class SafeRecorder : MTASafeComWrapper
  {
    private SafeTunerEventHandler m_EventHandler = (SafeTunerEventHandler) null;

    public unsafe SafeRecorder(IntPtr ptr)
      : base((_GUID*) (int) &this.PrimaryIID, (IUnknown*) ptr.ToPointer())
    {
    }

    public unsafe SafeRecorder(IRecorderEx2* pRecorder)
      : base((_GUID*) &\u003CModule\u003E._GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339, (IUnknown*) pRecorder)
    {
    }

    private SafeRecorder()
    {
    }

    private unsafe CComPtr\u003CIRecorderEx2\u003E* TPGetRecPtr(
      [In] CComPtr\u003CIRecorderEx2\u003E* obj0)
    {
      uint num1 = 0;
      CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
      CComPtr\u003CIRecorderEx2\u003E* nativePtrIrecorderEx2 = SafeComWrapper.GetNativePtr\u003CIRecorderEx2\u003E(&ccomPtrIrecorderEx2, (SafeComWrapper) this);
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          \u003CModule\u003E.ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bctor\u007D(obj0, nativePtrIrecorderEx2);
          num1 = 1U;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }

    public override unsafe Guid PrimaryIID => *(Guid*) (int) &\u003CModule\u003E._GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339;

    private void \u007ESafeRecorder()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      SafeTunerEventHandler eventHandler;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        eventHandler = this.m_EventHandler;
        this.m_EventHandler = (SafeTunerEventHandler) null;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      eventHandler?.Dispose();
    }

    public void TPAdvise(Guid g)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        SafeTunerEventHandler eventHandler = this.m_EventHandler;
        if (eventHandler != null)
        {
          if (!eventHandler.IsInvalid)
            this.m_EventHandler.TPAdvise(g);
        }
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    public unsafe void TPAdvise(Tuner t)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (this.m_EventHandler == null)
        {
          CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2_1;
          this.TPGetRecPtr(&ccomPtrIrecorderEx2_1);
          // ISSUE: fault handler
          try
          {
            TPTunerEventHandler* tunerEventHandlerPtr1 = (TPTunerEventHandler*) \u003CModule\u003E.@new(92U);
            TPTunerEventHandler* tunerEventHandlerPtr2;
            // ISSUE: fault handler
            try
            {
              if ((IntPtr) tunerEventHandlerPtr1 != IntPtr.Zero)
              {
                CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2_2;
                CComPtr\u003CIRecorderEx2\u003E* ccomPtrIrecorderEx2Ptr = &ccomPtrIrecorderEx2_2;
                CComPtr\u003CIRecorderEx2\u003E* pRec = \u003CModule\u003E.ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bctor\u007D(&ccomPtrIrecorderEx2_2, &ccomPtrIrecorderEx2_1);
                tunerEventHandlerPtr2 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002E\u007Bctor\u007D(tunerEventHandlerPtr1, pRec);
              }
              else
                tunerEventHandlerPtr2 = (TPTunerEventHandler*) 0;
            }
            __fault
            {
              \u003CModule\u003E.delete((void*) tunerEventHandlerPtr1);
            }
            TPTunerEventHandler* lp = (IntPtr) tunerEventHandlerPtr2 == IntPtr.Zero ? (TPTunerEventHandler*) 0 : (TPTunerEventHandler*) ((IntPtr) tunerEventHandlerPtr2 + 12);
            CComPtr\u003CITunerEvents2\u003E ptrItunerEvents2;
            \u003CModule\u003E.ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bctor\u007D(&ptrItunerEvents2, (ITunerEvents2*) lp);
            // ISSUE: fault handler
            try
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.m_EventHandler = new SafeTunerEventHandler((ITunerEvents2*) ^(int&) ref ptrItunerEvents2);
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D), (void*) &ptrItunerEvents2);
            }
            \u003CModule\u003E.ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D(&ptrItunerEvents2);
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2_1);
          }
          \u003CModule\u003E.ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D(&ccomPtrIrecorderEx2_1);
        }
        this.m_EventHandler.TPAdvise(t);
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    public void TPUnadvise(Tuner t)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        SafeTunerEventHandler eventHandler = this.m_EventHandler;
        if (eventHandler != null)
        {
          if (!eventHandler.IsInvalid)
            this.m_EventHandler.TPUnadvise(t);
        }
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    public override SafeComWrapper ReferenceClone()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      SafeRecorder safeRecorder;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        safeRecorder = (SafeRecorder) base.ReferenceClone();
        safeRecorder.m_EventHandler = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASafeTunerEventHandler\u0020\u005E\u003E(this.m_EventHandler);
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return (SafeComWrapper) safeRecorder;
    }

    protected override void Dispose([MarshalAs(UnmanagedType.U1)] bool _param1)
    {
      if (_param1)
      {
        try
        {
          this.\u007ESafeRecorder();
        }
        finally
        {
          base.Dispose(true);
        }
      }
      else
        base.Dispose(false);
    }
  }
}
