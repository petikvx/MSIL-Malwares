// Decompiled with JetBrains decompiler
// Type: Microsoft.MediaCenter.TV.Tuners.SafeComWrapper
// Assembly: Microsoft.MediaCenter.TV.Tuners.Interop, Version=6.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 4545DFBD-7834-4511-B0E8-46F2D6BF39B8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Virus.Win32.Xpaj.gena-cd1c6eac0092a3981efe696f4cd6bf740246c6dcb9698d78918623e86d74734f.exe

using ATL;
using msclr;
using System;
using System.Globalization;
using System.Reflection;
using System.Runtime.InteropServices;

namespace Microsoft.MediaCenter.TV.Tuners
{
  public abstract class SafeComWrapper : SafeHandle
  {
    protected object m_Lock = new object();

    private void SetComPtr(IntPtr punkPtr)
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (this.IsClosed)
          throw new InvalidOperationException("Cannot set a com pointer on a closed handle");
        if (IntPtr.Zero != this.handle)
          this.ReleaseHandle();
        this.SetHandle(punkPtr);
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      // ISSUE: fault handler
      try
      {
      }
      __fault
      {
        lock2.Dispose();
      }
    }

    private unsafe IUnknown* GetComPtr()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (!this.IsClosed)
          goto label_4;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return (IUnknown*) 0;
label_4:
      IUnknown* pointer;
      // ISSUE: fault handler
      try
      {
        pointer = (IUnknown*) this.handle.ToPointer();
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return pointer;
    }

    private IntPtr GetHandlePtr()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      IntPtr zero;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (this.IsClosed)
          zero = IntPtr.Zero;
        else
          goto label_5;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return zero;
label_5:
      IntPtr handle;
      // ISSUE: fault handler
      try
      {
        handle = this.handle;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return handle;
    }

    protected SafeComWrapper(Guid riid, IntPtr punkObj)
      : base(IntPtr.Zero, true)
    {
      // ISSUE: fault handler
      try
      {
        this.SetObject(riid, punkObj);
      }
      __fault
      {
        this.Dispose(true);
      }
    }

    protected SafeComWrapper()
      : base(IntPtr.Zero, true)
    {
    }

    public override bool IsInvalid
    {
      [return: MarshalAs(UnmanagedType.U1)] get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        try
        {
          lock2 = lock1;
          if (!this.IsClosed)
          {
            if (IntPtr.Zero == this.handle)
              goto label_5;
          }
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return false;
label_5:
        lock2.Dispose();
        return true;
      }
    }

    public abstract Guid PrimaryIID { get; }

    public virtual SafeComWrapper ReferenceClone()
    {
      if (this.IsInvalid)
        throw new ApplicationException("can't clone empty wrapper. has it been disposed?");
      SafeComWrapper typedInstance = (SafeComWrapper) SafeComWrapper.CreateTypedInstance(this.GetType());
      Guid primaryIid = this.PrimaryIID;
      IntPtr handlePtr = this.GetHandlePtr();
      typedInstance.SetObject(primaryIid, handlePtr);
      return typedInstance;
    }

    internal static unsafe int GetNativePtrFromWrapper(
      SafeComWrapper wrapper,
      _GUID* riid,
      void** ppv)
    {
      IUnknown* comPtr = wrapper.GetComPtr();
      IUnknown* iunknownPtr = comPtr;
      _GUID* guidPtr = riid;
      void** voidPtr = ppv;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      return __calli((__FnPtr<int (IntPtr, _GUID*, void**)>) *(int*) *(int*) comPtr)((void**) iunknownPtr, guidPtr, (IntPtr) voidPtr);
    }

    internal static unsafe int GetNativePtrFromWrapper(object obj, _GUID* riid, void** ppv)
    {
      if (!typeof (SafeComWrapper).IsAssignableFrom(obj.GetType()))
        throw new ArgumentException(nameof (obj));
      return SafeComWrapper.GetNativePtrFromWrapper((SafeComWrapper) obj, riid, ppv);
    }

    internal static unsafe CComPtr\u003CIUnknown\u003E* GetNativePtr(
      [In] CComPtr\u003CIUnknown\u003E* obj0,
      SafeComWrapper w)
    {
      uint num1;
      // ISSUE: fault handler
      try
      {
        num1 = 0U;
        \u003CModule\u003E.ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bctor\u007D(obj0, w.GetComPtr());
        num1 = 1U;
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }

    internal unsafe CComPtr\u003CIUnknown\u003E* GetPtr(
      [In] CComPtr\u003CIUnknown\u003E* obj0)
    {
      uint num1;
      // ISSUE: fault handler
      try
      {
        num1 = 0U;
        \u003CModule\u003E.ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bctor\u007D(obj0, this.GetComPtr());
        num1 = 1U;
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }

    [return: MarshalAs(UnmanagedType.U1)]
    protected override unsafe bool ReleaseHandle()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (IntPtr.Zero != this.handle)
        {
          IUnknown* pointer = (IUnknown*) this.handle.ToPointer();
          if (IntPtr.Zero != (IntPtr) pointer)
          {
            IUnknown* iunknownPtr = pointer;
            // ISSUE: cast to a function pointer type
            // ISSUE: function pointer call
            int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) iunknownPtr + 8))((IntPtr) iunknownPtr);
            this.handle = IntPtr.Zero;
          }
        }
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return true;
    }

    [CLSCompliant(false)]
    protected unsafe void CreateObject(_GUID* clsid, _GUID* riid)
    {
      IUnknown* punkPtr = (IUnknown*) 0;
      MarshalHelper.ComException(\u003CModule\u003E.CoCreateInstance(clsid, (IUnknown*) 0, 3U, riid, (void**) &punkPtr));
      this.SetComPtr((IntPtr) (void*) punkPtr);
    }

    [CLSCompliant(false)]
    protected virtual unsafe void SetObject(Guid riid, IntPtr punkObj)
    {
      CComPtr\u003CIUnknown\u003E ccomPtrIunknown;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomPtrIunknown = 0;
      // ISSUE: fault handler
      try
      {
        if (punkObj != IntPtr.Zero)
        {
          void* pointer = punkObj.ToPointer();
          void* voidPtr = pointer;
          int num = (int) &riid;
          ref CComPtr\u003CIUnknown\u003E local = ref ccomPtrIunknown;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, _GUID*, void**)>) *(int*) *(int*) pointer)((void**) voidPtr, (_GUID*) num, (IntPtr) ref local));
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int punkPtr = ^(int&) ref ccomPtrIunknown;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref ccomPtrIunknown = 0;
          this.SetComPtr((IntPtr) (void*) punkPtr);
        }
        else
          this.SetComPtr(IntPtr.Zero);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIunknown);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIUnknown\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIUnknown\u003E*) &ccomPtrIunknown);
    }

    protected static object CreateTypedInstance(Type baseType)
    {
      object[] args = new object[1]{ (object) IntPtr.Zero };
      return Activator.CreateInstance(baseType, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, (Binder) null, args, (CultureInfo) null);
    }

    protected static unsafe object CreateTypedInstance(Type baseType, IUnknown* punk)
    {
      object[] args = new object[1];
      IntPtr num = (IntPtr) (void*) punk;
      args[0] = (object) num;
      return Activator.CreateInstance(baseType, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, (Binder) null, args, (CultureInfo) null);
    }

    [CLSCompliant(false)]
    protected static unsafe object CreateTypedInstance(
      Type baseType,
      Guid primaryIID,
      IUnknown* punk)
    {
      object[] args = new object[2]
      {
        (object) primaryIID,
        null
      };
      IntPtr num = (IntPtr) (void*) punk;
      args[1] = (object) num;
      return Activator.CreateInstance(baseType, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, (Binder) null, args, (CultureInfo) null);
    }

    public static unsafe CComPtr\u003CITunerEvents2\u003E* GetNativePtr\u003CITunerEvents2\u003E(
      [In] CComPtr\u003CITunerEvents2\u003E* obj0,
      SafeComWrapper w)
    {
      uint num1;
      // ISSUE: fault handler
      try
      {
        num1 = 0U;
        *(int*) obj0 = 0;
        num1 = 1U;
        MarshalHelper.ComException(SafeComWrapper.GetNativePtrFromWrapper(w, (_GUID*) &\u003CModule\u003E._GUID_7eab3a3d_0900_43a5_9189_631ac98ed822, (void**) obj0));
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }

    public static unsafe CComPtr\u003CIRecorderEx2\u003E* GetNativePtr\u003CIRecorderEx2\u003E(
      [In] CComPtr\u003CIRecorderEx2\u003E* obj0,
      SafeComWrapper w)
    {
      uint num1;
      // ISSUE: fault handler
      try
      {
        num1 = 0U;
        *(int*) obj0 = 0;
        num1 = 1U;
        MarshalHelper.ComException(SafeComWrapper.GetNativePtrFromWrapper(w, (_GUID*) &\u003CModule\u003E._GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339, (void**) obj0));
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }

    public static unsafe CComPtr\u003CIRecorderInfo\u003E* GetNativePtr\u003CIRecorderInfo\u003E(
      [In] CComPtr\u003CIRecorderInfo\u003E* obj0,
      SafeComWrapper w)
    {
      uint num1;
      // ISSUE: fault handler
      try
      {
        num1 = 0U;
        *(int*) obj0 = 0;
        num1 = 1U;
        MarshalHelper.ComException(SafeComWrapper.GetNativePtrFromWrapper(w, (_GUID*) &\u003CModule\u003E._GUID_379848e6_2751_42c0_8de6_9457cdc61d60, (void**) obj0));
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }

    public static unsafe CComPtr\u003CIEnumRecorder\u003E* GetNativePtr\u003CIEnumRecorder\u003E(
      [In] CComPtr\u003CIEnumRecorder\u003E* obj0,
      SafeComWrapper w)
    {
      uint num1;
      // ISSUE: fault handler
      try
      {
        num1 = 0U;
        *(int*) obj0 = 0;
        num1 = 1U;
        MarshalHelper.ComException(SafeComWrapper.GetNativePtrFromWrapper(w, (_GUID*) &\u003CModule\u003E._GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa, (void**) obj0));
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }

    public static unsafe CComPtr\u003CINetworkRecorderMgr\u003E* GetNativePtr\u003CINetworkRecorderMgr\u003E(
      [In] CComPtr\u003CINetworkRecorderMgr\u003E* obj0,
      SafeComWrapper w)
    {
      uint num1;
      // ISSUE: fault handler
      try
      {
        num1 = 0U;
        *(int*) obj0 = 0;
        num1 = 1U;
        MarshalHelper.ComException(SafeComWrapper.GetNativePtrFromWrapper(w, (_GUID*) &\u003CModule\u003E._GUID_a43cf053_d95a_4720_aa5d_6277aacff043, (void**) obj0));
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }
  }
}
