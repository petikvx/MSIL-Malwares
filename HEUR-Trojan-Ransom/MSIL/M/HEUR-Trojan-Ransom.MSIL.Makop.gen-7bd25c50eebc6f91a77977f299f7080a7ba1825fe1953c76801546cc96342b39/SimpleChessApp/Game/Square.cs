// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: غج, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 646F7626-F199-493A-B5BB-FA317F4F75E5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7bd25c50eebc6f91a77977f299f7080a7ba1825fe1953c76801546cc96342b39.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 1146632871;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 981440392)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              int num3 = eventHandler1 != comparand ? -387686943 : (num3 = -1413603933);
              num1 = num3 ^ (int) num2 * 1032343039;
              continue;
            case 3:
              comparand = eventHandler1;
              EventHandler eventHandler2 = (EventHandler) Square.\u200F‮⁮⁫‬⁯⁯‭⁭‍⁭‏‌‮‪‪‬⁫‫‮⁮‪‬​⁮‏‬‪‍‭‬‮⁫‌​‮⁮‪⁬⁬‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = 1333515058;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -1797886857;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -505769004)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              int num3 = eventHandler1 != comparand ? 881333164 : (num3 = 837427802);
              num1 = num3 ^ (int) num2 * 977293917;
              continue;
            case 2:
              comparand = eventHandler1;
              num1 = -171217587;
              continue;
            case 3:
              goto label_3;
            case 4:
              EventHandler eventHandler2 = (EventHandler) Square.\u200D‭‏‬​‬⁪‏‪‬‮‌⁭⁮⁯⁫‮⁭‬‏⁪‭‏⁫‬‫‪⁮‫⁮‬‏‬⁭⁫​⁫‪⁮‬‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * 1933290103 ^ 916948828;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName
    {
      get
      {
        string specialName = Square.\u206F‌‭‏‮‌⁪​‪⁯‎⁫⁫‌⁯‮⁯‫‎⁫‪‭⁯‌‍⁮‌‫⁬⁮‍‮⁮‌⁪‌‮‫‍‌‮(this.CurrentSquare, \u003CModule\u003E.\u200F⁪⁭‮⁭‎‌⁯⁬⁪‬⁫‬‍⁬‎⁯⁯‌​⁪‫⁬⁫⁮‌‍⁫⁫​⁯‪⁬‌⁭‭‎​‪‮<string>(3319607560U), Square.\u206F⁪‌‏⁮‎​⁭⁫⁯⁬⁪‭⁫‏⁫‌‌‏⁯‬‬‭⁮⁪‪⁪‫⁫‬⁪⁭⁯‭‎‬‮⁯‌‎‮((object) this.Piece));
label_1:
        int num1 = 2085006164;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1314403755)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 569608867 ^ 1061770899;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
label_1:
        int num1 = 776060578;
        char ch;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1923474697)) % 5U)
          {
            case 0:
              num1 = (int) num2 * -722431449 ^ 877427211;
              continue;
            case 1:
              currentSquare = Square.\u202D⁯‭‎‪⁬⁬‏⁭‫​‎‪‫‫‎‍​⁯⁭​‫⁫‬⁭‌‮‪‍‏‌‍‪⁬⁯‬‫‪‎‫‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * -1902169100 ^ -1029114780;
              continue;
            case 2:
              ch = Square.\u206E​⁭‏⁮‪⁪‮‮⁬⁬​⁪‏⁭‭​‬‬⁮‍⁬‬‎‫⁬‪⁯‍⁯​‏⁭‭‎‪‫‪⁮⁫‮(\u003CModule\u003E.\u202A‭​‏‏‬⁯​⁫‬‏‬⁫‭‎​‍‪‎‮‍⁪⁯⁮‬​⁮‮‮⁪‭‎‭‪⁫‭‏⁭​‬‮<string>(2550538676U), this.File);
              num1 = (int) num2 * -1918472624 ^ -513547184;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_6:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
label_1:
      int num1 = -1735860294;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1364658193)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * -1413427290 ^ -1080171982;
              continue;
            }
            goto label_5;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 738327311 ^ -2063556544;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
      this.Board = Board;
      this.File = file;
      this.Rank = rank;
      this.Name = Square.\u202D⁯‭‎‪⁬⁬‏⁭‫​‎‪‫‫‎‍​⁯⁭​‫⁫‬⁭‌‮‪‍‏‌‍‪⁬⁯‬‫‪‎‫‮(Square.\u206E​⁭‏⁮‪⁪‮‮⁬⁬​⁪‏⁭‭​‬‬⁮‍⁬‬‎‫⁬‪⁯‍⁯​‏⁭‭‎‪‫‪⁮⁫‮(\u003CModule\u003E.\u202A‭​‏‏‬⁯​⁫‬‏‬⁫‭‎​‍‪‎‮‍⁪⁯⁮‬​⁮‮‮⁪‭‎‭‪⁫‭‏⁭​‬‮<string>(2550538676U), file).ToString(), (this.Rank + 1).ToString());
    }

    public Square()
    {
      this.InitializeComponent();
      this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
    }

    private void SwitchPlayer()
    {
      bool flag1 = !this.Board.DisableTurns;
label_1:
      int num1 = -1290703710;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1793721027)) % 9U)
        {
          case 0:
            num1 = (int) num2 * -1125744042 ^ 1127821368;
            continue;
          case 1:
            int num3 = flag2 ? -240942334 : (num3 = -1847359105);
            num1 = num3 ^ (int) num2 * 1942953437;
            continue;
          case 2:
            flag2 = this.Board.WhosPlaying == PieceColor.White;
            num1 = (int) num2 * -1088330799 ^ -281184687;
            continue;
          case 3:
            num1 = -409157477;
            continue;
          case 4:
            int num4 = !flag1 ? -96022518 : (num4 = -1242908862);
            num1 = num4 ^ (int) num2 * -2141188145;
            continue;
          case 5:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * -576257679 ^ -885699593;
            continue;
          case 6:
            goto label_1;
          case 7:
            goto label_3;
          case 8:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -337810703;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private bool getSide(Square x)
    {
label_1:
      int num1 = 1135644356;
      bool side;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 2104589132)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            if (!this.Board.DisableTurns)
            {
              num1 = (int) num2 * -24663678 ^ 1508300168;
              continue;
            }
            num3 = 1;
            break;
          case 2:
            num1 = (int) num2 * 1192433763 ^ -43589652;
            continue;
          case 4:
            num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
            break;
          default:
            goto label_9;
        }
        side = num3 != 0;
        num1 = 1927996088;
      }
label_9:
      return side;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = 1584352701;
      while (true)
      {
        uint num2;
        bool flag1;
        List<PossibleMoves> move1;
        List<PossibleMoves> move2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ 696115295)) % 70U)
        {
          case 0:
            to = this;
            if (this.Board.From != null)
            {
              num1 = (int) num2 * -557905013 ^ -496118878;
              continue;
            }
            num3 = 0;
            goto label_62;
          case 1:
            num1 = (int) num2 * -2112581464 ^ -946928703;
            continue;
          case 2:
            num1 = (int) num2 * -1897881056 ^ -1065823399;
            continue;
          case 3:
            num1 = (int) num2 * -1775158121 ^ 1535175726;
            continue;
          case 4:
            Square.action(this.msg);
            num1 = 1959976480;
            continue;
          case 5:
            num1 = (int) num2 * 759454567 ^ 1729193263;
            continue;
          case 6:
            num1 = (int) num2 * -115019667 ^ 1005312805;
            continue;
          case 7:
            to.HighLight();
            num1 = (int) num2 * 1336527810 ^ 565326461;
            continue;
          case 8:
            this.hideMoves(this.Board.From);
            to.HighLight();
            num1 = (int) num2 * -1448271826 ^ -1379273250;
            continue;
          case 9:
            int num5 = move2.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? -191582144 : (num5 = -1952935196);
            num1 = num5 ^ (int) num2 * 1125453720;
            continue;
          case 10:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200F⁪⁭‮⁭‎‌⁯⁬⁪‬⁫‬‍⁬‎⁯⁯‌​⁪‫⁬⁫⁮‌‍⁫⁫​⁯‪⁬‌⁭‭‎​‪‮<string>(1225484942U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1547638196 ^ 2008567834;
            continue;
          case 11:
            num4 = this.getSide(to) ? 1 : 0;
            break;
          case 12:
            num1 = (int) num2 * -200852620 ^ 126718261;
            continue;
          case 13:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1439882238 ^ -851725779;
            continue;
          case 14:
            num1 = (int) num2 * 1812270917 ^ -1412247406;
            continue;
          case 15:
            this.msg = \u003CModule\u003E.\u206F‪⁭⁭‍⁪⁬⁭⁬‍‬​⁭‌⁪‍​⁯⁫‌‭‏‎‌⁫⁪⁭⁫​⁮​‪⁬‪⁭‎⁪‌⁬‭‮<string>(915737409U);
            num1 = 283979609;
            continue;
          case 16:
            int num6 = Square.\u206D​‫⁯‏‫⁮‬⁪‏‫‭​‌‌⁮⁬‮‫⁯‌‍⁫‌⁬⁪‪⁫‍‫⁮‌⁪‬‎‮​‪‍‏‮(e) == MouseButtons.Left ? -50202897 : (num6 = -1965713631);
            num1 = num6 ^ (int) num2 * -652942302;
            continue;
          case 17:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 43615750 ^ -966259834;
            continue;
          case 18:
            num1 = (int) num2 * 1715604597 ^ 2005533307;
            continue;
          case 19:
            if (to.Piece != null)
            {
              num1 = 872025768;
              continue;
            }
            num4 = 0;
            break;
          case 20:
            int num7;
            num1 = num7 = this.getSide(this.Board.From) ? 1058418784 : (num7 = 1480908464);
            continue;
          case 21:
            num1 = 255855448;
            continue;
          case 22:
            num1 = (int) num2 * -505844607 ^ -888721067;
            continue;
          case 23:
            int num8 = !move1.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? 1937585982 : (num8 = 1184597884);
            num1 = num8 ^ (int) num2 * 316782458;
            continue;
          case 24:
            num1 = 299235109;
            continue;
          case 25:
            int num9 = to.Piece.Id == this.Board.From.Piece.Id ? -755007036 : (num9 = -910727109);
            num1 = num9 ^ (int) num2 * -1321730461;
            continue;
          case 26:
            goto label_3;
          case 27:
            num1 = (int) num2 * 108831613 ^ -705807760;
            continue;
          case 28:
            flag1 = this.Board.From.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * 1673280987 ^ -1717463758;
            continue;
          case 29:
            int num10;
            num1 = num10 = flag2 ? 1530963143 : (num10 = 2040607384);
            continue;
          case 30:
            num1 = (int) num2 * -1764891934 ^ -1278084451;
            continue;
          case 31:
            num1 = 283979609;
            continue;
          case 32:
            num1 = (int) num2 * 798328857 ^ -61322938;
            continue;
          case 33:
            num1 = (int) num2 * 2042082726 ^ -1664215034;
            continue;
          case 34:
            num1 = (int) num2 * -613412621 ^ -185698657;
            continue;
          case 35:
            this.msg = \u003CModule\u003E.\u200F⁪⁭‮⁭‎‌⁯⁬⁪‬⁫‬‍⁬‎⁯⁯‌​⁪‫⁬⁫⁮‌‍⁫⁫​⁯‪⁬‌⁭‭‎​‪‮<string>(2721336607U);
            num1 = (int) num2 * -665018035 ^ -312931910;
            continue;
          case 36:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -1331528651 ^ 61156329;
            continue;
          case 37:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1925726888 ^ 2013743346;
            continue;
          case 38:
            num1 = 1480908464;
            continue;
          case 39:
            num1 = (int) num2 * 1747991432 ^ 745136571;
            continue;
          case 40:
            int num11 = !flag5 ? 1894656153 : (num11 = 691850110);
            num1 = num11 ^ (int) num2 * -1450043689;
            continue;
          case 41:
            num1 = (int) num2 * -966205188 ^ 1332644547;
            continue;
          case 42:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -2040793221 ^ -2093353658;
            continue;
          case 43:
            num1 = (int) num2 * -1060385336 ^ -1484014739;
            continue;
          case 44:
            int num12 = !flag3 ? 1070696749 : (num12 = 512929951);
            num1 = num12 ^ (int) num2 * 1896758834;
            continue;
          case 45:
            to.HighLight();
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u206F‪⁭⁭‍⁪⁬⁭⁬‍‬​⁭‌⁪‍​⁯⁫‌‭‏‎‌⁫⁪⁭⁫​⁮​‪⁬‪⁭‎⁪‌⁬‭‮<string>(1696401062U);
            num1 = (int) num2 * 983937813 ^ -1346927652;
            continue;
          case 46:
            this.Board.From.ClearHighLight();
            to.HighLight();
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200F⁪⁭‮⁭‎‌⁯⁬⁪‬⁫‬‍⁬‎⁯⁯‌​⁪‫⁬⁫⁮‌‍⁫⁫​⁯‪⁬‌⁭‭‎​‪‮<string>(2400821862U);
            num1 = (int) num2 * 1083675870 ^ 552985714;
            continue;
          case 47:
            goto label_1;
          case 48:
            this.msg = \u003CModule\u003E.\u200F‫⁪‏⁪⁭⁬‮⁭⁪‎‌‌⁮‭‮​‭⁮‎‫‍‌‍‫‎⁫⁯⁫‭‭⁭⁬⁮‮‫⁮​⁯⁮‮<string>(607691651U);
            num1 = (int) num2 * 848533453 ^ -1093855536;
            continue;
          case 49:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * 1483039059 ^ -1774573392;
            continue;
          case 50:
            num1 = (int) num2 * 1500051818 ^ -916692683;
            continue;
          case 51:
            this.msg = \u003CModule\u003E.\u202A‭​‏‏‬⁯​⁫‬‏‬⁫‭‎​‍‪‎‮‍⁪⁯⁮‬​⁮‮‮⁪‭‎‭‪⁫‭‏⁭​‬‮<string>(2699789822U);
            num1 = (int) num2 * -1644603607 ^ -236284068;
            continue;
          case 52:
            flag5 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * -1907364175 ^ -1108700981;
            continue;
          case 53:
            int num13 = !flag4 ? -1557908138 : (num13 = -535385489);
            num1 = num13 ^ (int) num2 * 1865262520;
            continue;
          case 54:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 527026987 ^ -59482233;
            continue;
          case 55:
            num1 = (int) num2 * 315671970 ^ -464462451;
            continue;
          case 56:
            num1 = 299036217;
            continue;
          case 57:
            flag3 = this.Board.From.Piece.Color == to.Piece.Color;
            num1 = 940494219;
            continue;
          case 58:
            move1 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * 986732190 ^ -350569710;
            continue;
          case 59:
            this.msg = \u003CModule\u003E.\u200F‫⁪‏⁪⁭⁬‮⁭⁪‎‌‌⁮‭‮​‭⁮‎‫‍‌‍‫‎⁫⁯⁫‭‭⁭⁬⁮‮‫⁮​⁯⁮‮<string>(734599198U);
            num1 = (int) num2 * -1641259610 ^ 213309493;
            continue;
          case 60:
            num1 = (int) num2 * 1989531248 ^ -1062577566;
            continue;
          case 61:
            to.MovePawn(this.Board.From);
            num1 = 1525109324;
            continue;
          case 62:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1501987761 ^ -128929731;
            continue;
          case 63:
            int num14;
            num1 = num14 = !this.Board.DisableTurns ? 383267027 : (num14 = 1162257325);
            continue;
          case 64:
            num1 = (int) num2 * 1289633020 ^ -439801932;
            continue;
          case 65:
            this.Board.HidePieceMoves(this.Board.From);
            this.Board.From = (Square) null;
            num1 = 1558153960;
            continue;
          case 66:
            move2 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            this.msg = Square.\u206E⁮⁫‏‫⁯‭⁫‏‎‏⁫⁪‮⁮⁫‍⁮⁪⁬⁭‍⁭‫‮⁯⁪⁫⁮⁮‮​​‮‭‬⁭‫​⁯‮(\u003CModule\u003E.\u200F‫⁪‏⁪⁭⁬‮⁭⁪‎‌‌⁮‭‮​‭⁮‎‫‍‌‍‫‎⁫⁯⁫‭‭⁭⁬⁮‮‫⁮​⁯⁮‮<string>(2702423350U), (object) move2.Count);
            num1 = (int) num2 * -634689466 ^ 1969444082;
            continue;
          case 67:
            num3 = this.Board.From.Piece != null ? 1 : 0;
            goto label_62;
          case 68:
            num1 = (int) num2 * -69858437 ^ -1137219294;
            continue;
          case 69:
            int num15 = flag1 ? -194734968 : (num15 = -1674088754);
            num1 = num15 ^ (int) num2 * -89851782;
            continue;
          default:
            goto label_78;
        }
        int num16;
        num1 = num16 = num4 == 0 ? 1999110564 : (num16 = 198403525);
        continue;
label_62:
        flag2 = num3 != 0;
        flag4 = to.Piece == null & flag2;
        num1 = 1045317428;
      }
label_3:
      return;
label_78:;
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = -175056341;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2119118719)) % 9U)
        {
          case 0:
            num1 = (int) num2 * 1869292063 ^ -2112496534;
            continue;
          case 1:
            flag = this.Board.From != null;
            num1 = (int) num2 * 1861870050 ^ -107190794;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 1366394411 ^ -500729637;
            continue;
          case 5:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 408846097 ^ -115062791;
            continue;
          case 6:
            int num3 = !flag ? 1603381835 : (num3 = 1455293541);
            num1 = num3 ^ (int) num2 * 310571822;
            continue;
          case 7:
            num1 = (int) num2 * 1532339693 ^ -640443149;
            continue;
          case 8:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * 1727820504 ^ -1735258942;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private void CaptPawn(Square from)
    {
label_1:
      int num1 = 7071979;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 317376733)) % 32U)
        {
          case 0:
            num3 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_15;
          case 1:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 248603625 ^ -1471399707;
            continue;
          case 2:
            if (flag4)
            {
              num1 = (int) num2 * -400838126 ^ -659655652;
              continue;
            }
            goto label_56;
          case 3:
            num1 = (int) num2 * 67757236 ^ 2111752696;
            continue;
          case 4:
            this.Piece = from.Piece;
            num1 = 152438449;
            continue;
          case 5:
            num1 = (int) num2 * -664742716 ^ -171686503;
            continue;
          case 6:
            int num5 = flag6 ? -1857769770 : (num5 = -978523455);
            num1 = num5 ^ (int) num2 * 920517916;
            continue;
          case 7:
            int num6 = !flag5 ? -1459500458 : (num6 = -220606600);
            num1 = num6 ^ (int) num2 * 2052684604;
            continue;
          case 8:
            num1 = (int) num2 * -1115805769 ^ -1331329887;
            continue;
          case 9:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = 712178585;
            continue;
          case 10:
            int num7;
            num1 = num7 = from.Piece.Color == PieceColor.White ? 1933217378 : (num7 = 393555476);
            continue;
          case 11:
            int num8 = flag3 ? 1410205079 : (num8 = 1961532475);
            num1 = num8 ^ (int) num2 * -643128845;
            continue;
          case 12:
            flag1 = false;
            flag2 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 1171628365 ^ 373421772;
            continue;
          case 13:
            flag3 = flag2;
            num1 = (int) num2 * 769292292 ^ -2066354782;
            continue;
          case 14:
            num1 = 1959900042;
            continue;
          case 15:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = 503965207;
            continue;
          case 17:
            num1 = (int) num2 * -1592288512 ^ 736128279;
            continue;
          case 18:
            flag4 = flag1;
            num1 = (int) num2 * -1466982077 ^ 1979162537;
            continue;
          case 19:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * 1412225742 ^ -210694166;
            continue;
          case 20:
            from.Piece = (ChessPiece) null;
            num1 = 1158547535;
            continue;
          case 21:
            flag1 = true;
            num1 = (int) num2 * 1962271064 ^ 474529533;
            continue;
          case 22:
            flag5 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 149130638 ^ -1330110162;
            continue;
          case 23:
            flag6 = this.Piece.Color == PieceColor.Black;
            num1 = 1161140571;
            continue;
          case 24:
            num1 = 822129257;
            continue;
          case 25:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1934418864 ^ -1912066031;
            continue;
          case 26:
            flag1 = true;
            num1 = (int) num2 * -376523608 ^ -1156418941;
            continue;
          case 27:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            this.handleWhiteCastling();
            num1 = (int) num2 * -724083388 ^ -153915678;
            continue;
          case 28:
            this.handleBlackCastling();
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              goto label_15;
            }
            else
            {
              num1 = (int) num2 * -1916288600 ^ -346206691;
              continue;
            }
          case 29:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 30:
            goto label_1;
          case 31:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * 560209493 ^ 293854526;
            continue;
          default:
            goto label_40;
        }
        int num9;
        num1 = num9 = num4 == 0 ? 527682963 : (num9 = 76906759);
        continue;
label_15:
        int num10;
        num1 = num10 = num3 == 0 ? 276687813 : (num10 = 437340584);
      }
label_40:
      Promotion promotion = new Promotion(Square.\u200C‍‎‮‮‭⁪‬‭‏‏‮⁭⁯‬‎‪⁬⁭‭‎‏⁭‍‮‪⁬‏⁮‪‎⁫‮⁮‎‮​‏‏⁪‮());
      try
      {
label_42:
        int num11 = 1895074895;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 317376733)) % 4U)
          {
            case 1:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * -854311968 ^ 1453066313;
              continue;
            case 2:
              int num13 = (int) Square.\u200F⁮⁪‍‎⁭‎⁮‮⁪⁯‌‍⁪⁫⁫‮​‎‏‍​‎‌‍‏‮‭‌‌⁬⁬⁬‪‪⁮‌‌‭⁯‮((Form) promotion);
              num11 = (int) num12 * -483350833 ^ 1112692438;
              continue;
            case 3:
              goto label_42;
            default:
              goto label_52;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_47:
          int num14 = 287801447;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 317376733)) % 3U)
            {
              case 1:
                Square.\u200F⁮⁮‫‏‍‫‮⁯‏‏‌⁬⁮‪⁮‪⁬‭⁬‫‎⁭‫⁯‌⁯⁫⁫​‮⁫⁭‏‎‍‍‪⁯‭‮((IDisposable) promotion);
                num14 = (int) num15 * -401569064 ^ -1079960932;
                continue;
              case 2:
                goto label_47;
              default:
                goto label_51;
            }
          }
        }
label_51:;
      }
label_52:
label_53:
      int num16 = 1881420527;
label_54:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ 317376733)) % 6U)
        {
          case 0:
            PlaySound.Play();
            num16 = (int) num17 * 1385988668 ^ -1636399696;
            continue;
          case 1:
            goto label_55;
          case 2:
            goto label_53;
          case 3:
            this.SwitchPlayer();
            num16 = (int) num17 * 1981469470 ^ -1815821058;
            continue;
          case 4:
            goto label_56;
          case 5:
            num16 = (int) num17 * 812804983 ^ 216940759;
            continue;
          default:
            goto label_49;
        }
      }
label_55:
      return;
label_49:
      return;
label_56:
      this.Board.lights.FindAllMoves();
      num16 = 1536282493;
      goto label_54;
    }

    private void MovePawn(Square from)
    {
label_1:
      int num1 = -1959213208;
      bool flag1;
      ChessPiece chessPiece;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -366627242)) % 31U)
        {
          case 0:
            chessPiece = this.handleBlackCastling();
            num1 = (int) num2 * 79279732 ^ -1878303914;
            continue;
          case 1:
            flag3 = flag2;
            num1 = (int) num2 * 2103142691 ^ -1880591734;
            continue;
          case 2:
            num1 = -1684022017;
            continue;
          case 3:
            chessPiece = (ChessPiece) null;
            num1 = (int) num2 * -1625299485 ^ 866990910;
            continue;
          case 4:
            flag2 = false;
            num1 = -45418341;
            continue;
          case 5:
            int num6 = flag5 ? 684917926 : (num6 = 1168341534);
            num1 = num6 ^ (int) num2 * 365402893;
            continue;
          case 6:
            num1 = (int) num2 * 806796471 ^ -107825941;
            continue;
          case 7:
            num3 = this.Rank == 4 ? 1 : 0;
            goto label_37;
          case 8:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * 1755144045 ^ -2097042143;
            continue;
          case 9:
            if (this.Rank != 3)
            {
              num1 = (int) num2 * -2028927134 ^ 938346699;
              continue;
            }
            num3 = 1;
            goto label_37;
          case 11:
            this.Board.lastPassantPawn = (ChessPiece) null;
            num1 = (int) num2 * -1220417790 ^ 190456861;
            continue;
          case 12:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            chessPiece = this.handleWhiteCastling();
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * 1316841651 ^ 1958316147;
            continue;
          case 13:
            num1 = (int) num2 * -1382971123 ^ -1246517772;
            continue;
          case 14:
            num1 = -620080955;
            continue;
          case 15:
            if (flag3)
            {
              num1 = (int) num2 * -1985630123 ^ 1920474158;
              continue;
            }
            goto label_79;
          case 16:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 17:
            from.Piece = (ChessPiece) null;
            num1 = -1132277293;
            continue;
          case 18:
            num1 = (int) num2 * 1758908305 ^ -1896503613;
            continue;
          case 19:
            flag2 = true;
            num1 = (int) num2 * -911290991 ^ -1333256338;
            continue;
          case 20:
            goto label_1;
          case 21:
            flag2 = true;
            num1 = (int) num2 * -1611448091 ^ -1562223685;
            continue;
          case 22:
            int num7 = flag1 ? -1873016878 : (num7 = -32122148);
            num1 = num7 ^ (int) num2 * 1964223517;
            continue;
          case 23:
            int num8 = this.Piece.Kind != Pieces.Pawn ? 482254599 : (num8 = 2015288280);
            num1 = num8 ^ (int) num2 * 2124851448;
            continue;
          case 24:
            flag1 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -1552408736 ^ 2115473113;
            continue;
          case 25:
            int num9 = flag4 ? 117793565 : (num9 = 1853217230);
            num1 = num9 ^ (int) num2 * 1621947358;
            continue;
          case 26:
            num1 = -1482308221;
            continue;
          case 27:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = -1023124450;
            continue;
          case 28:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 280558078 ^ -1277621136;
              continue;
            }
            num5 = 0;
            goto label_40;
          case 29:
            num5 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_40;
          case 30:
            this.Piece = from.Piece;
            num1 = (int) num2 * 801376933 ^ 1679065900;
            continue;
          default:
            goto label_42;
        }
        int num10;
        num1 = num10 = num4 == 0 ? -1009262007 : (num10 = -195040420);
        continue;
label_37:
        flag4 = num3 != 0;
        num1 = -651756394;
        continue;
label_40:
        flag5 = num5 != 0;
        num1 = -1836842962;
      }
label_42:
      Promotion promotion = new Promotion(Square.\u200C‍‎‮‮‭⁪‬‭‏‏‮⁭⁯‬‎‪⁬⁭‭‎‏⁭‍‮‪⁬‏⁮‪‎⁫‮⁮‎‮​‏‏⁪‮());
      try
      {
        int num11 = (int) Square.\u200F⁮⁪‍‎⁭‎⁮‮⁪⁯‌‍⁪⁫⁫‮​‎‏‍​‎‌‍‏‮‭‌‌⁬⁬⁬‪‪⁮‌‌‭⁯‮((Form) promotion);
        this.Kind = promotion.Piece;
      }
      finally
      {
        if (promotion != null)
        {
label_45:
          int num12 = -1892174827;
          while (true)
          {
            uint num13;
            switch ((num13 = (uint) (num12 ^ -366627242)) % 3U)
            {
              case 0:
                goto label_45;
              case 2:
                Square.\u200F⁮⁮‫‏‍‫‮⁯‏‏‌⁬⁮‪⁮‪⁬‭⁬‫‎⁭‫⁯‌⁯⁫⁫​‮⁫⁭‏‎‍‍‪⁯‭‮((IDisposable) promotion);
                num12 = (int) num13 * 1147819281 ^ -480068303;
                continue;
              default:
                goto label_49;
            }
          }
        }
label_49:;
      }
label_50:
      int num14 = -844909180;
label_51:
      while (true)
      {
        uint num15;
        bool flag6;
        int file;
        int rank;
        bool flag7;
        bool flag8;
        Square square1;
        bool flag9;
        bool flag10;
        Square square2;
        switch ((num15 = (uint) (num14 ^ -366627242)) % 44U)
        {
          case 0:
            num14 = (int) num15 * 1844764949 ^ 2064283694;
            continue;
          case 1:
            flag8 = true;
            num14 = (int) num15 * -759756459 ^ 1484105743;
            continue;
          case 2:
            num14 = (int) num15 * 387575715 ^ 1246828761;
            continue;
          case 3:
            flag7 = chessPiece != null;
            num14 = -1299662482;
            continue;
          case 4:
            this.Board.lights.FindAllMoves();
            num14 = -224188943;
            continue;
          case 5:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num14 = -1758771459;
            continue;
          case 6:
            this.Board.WhiteCanCastleKingSide = true;
            num14 = (int) num15 * 335023686 ^ -1113968116;
            continue;
          case 7:
            num14 = (int) num15 * 451312906 ^ 1621383767;
            continue;
          case 8:
            int num16 = !flag7 ? 603860462 : (num16 = 433407794);
            num14 = num16 ^ (int) num15 * -1906379724;
            continue;
          case 9:
            flag6 = flag8;
            num14 = -1175790437;
            continue;
          case 10:
            num14 = (int) num15 * 1006423232 ^ 514798973;
            continue;
          case 11:
            num14 = (int) num15 * 850666267 ^ -1600791294;
            continue;
          case 12:
            file = chessPiece.Current.File;
            rank = chessPiece.Current.Rank;
            if (file != 5)
            {
              num14 = (int) num15 * 1624208881 ^ -974028802;
              continue;
            }
            square2 = this.Board[7, rank];
            break;
          case 13:
            num14 = (int) num15 * 669072456 ^ 185607334;
            continue;
          case 14:
            goto label_79;
          case 15:
            goto label_50;
          case 16:
            num14 = (int) num15 * 853449950 ^ -2065907012;
            continue;
          case 17:
            PlaySound.Play();
            this.SwitchPlayer();
            num14 = -1652328700;
            continue;
          case 18:
            num14 = (int) num15 * 1456420196 ^ -506768396;
            continue;
          case 19:
            int num17 = flag10 ? -278497945 : (num17 = -24211694);
            num14 = num17 ^ (int) num15 * -1289221428;
            continue;
          case 20:
            square2 = this.Board[0, rank];
            break;
          case 21:
            this.msg = \u003CModule\u003E.\u200E‎‏‫⁬‫⁮⁪‌‫​⁬‬‫‪⁪‌⁫‌​‎⁭‍⁮‎⁫⁫‪‫‫‫‪‌‏‭⁬‮‌‮⁬‮<string>(4072643983U);
            num14 = (int) num15 * -1872637288 ^ 1120369205;
            continue;
          case 22:
            num14 = (int) num15 * -2111335473 ^ 1949056420;
            continue;
          case 23:
            int num18 = this.Board.lights.IsOnCheck ? 1818451386 : (num18 = 2005176113);
            num14 = num18 ^ (int) num15 * -1253389482;
            continue;
          case 24:
            this.Piece = (ChessPiece) null;
            num14 = (int) num15 * -555360018 ^ 1834261428;
            continue;
          case 25:
            this.msg = \u003CModule\u003E.\u202A‭​‏‏‬⁯​⁫‬‏‬⁫‭‎​‍‪‎‮‍⁪⁯⁮‬​⁮‮‮⁪‭‎‭‪⁫‭‏⁭​‬‮<string>(1617891207U);
            int num19 = flag1 ? 1198495540 : (num19 = 56376610);
            num14 = num19 ^ (int) num15 * -2128518019;
            continue;
          case 26:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num14 = -943149813;
            continue;
          case 27:
            square1.Piece = chessPiece;
            int num20 = !flag1 ? -1036665428 : (num20 = -1570134612);
            num14 = num20 ^ (int) num15 * 287257205;
            continue;
          case 28:
            num14 = -984028017;
            continue;
          case 29:
            int num21 = !flag6 ? 1970902983 : (num21 = 649355752);
            num14 = num21 ^ (int) num15 * -1952337231;
            continue;
          case 30:
            int num22 = flag9 ? 1964728936 : (num22 = 496459493);
            num14 = num22 ^ (int) num15 * -394570075;
            continue;
          case 31:
            num14 = (int) num15 * 1517126033 ^ -1530817923;
            continue;
          case 32:
            goto label_52;
          case 33:
            num14 = -234800407;
            continue;
          case 34:
            flag8 = this.Board.lights.IsOnCheck;
            num14 = (int) num15 * 243096960 ^ -255233441;
            continue;
          case 35:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num14 = (int) num15 * -1994724927 ^ -684673141;
            continue;
          case 36:
            flag9 = this.Piece.Kind == Pieces.King;
            num14 = (int) num15 * -450696685 ^ -1035866652;
            continue;
          case 37:
            num14 = -25703301;
            continue;
          case 38:
            num14 = (int) num15 * 1331942184 ^ -1059898052;
            continue;
          case 39:
            from.Piece = this.Piece;
            num14 = (int) num15 * -157361063 ^ 421079613;
            continue;
          case 40:
            num14 = -767167557;
            continue;
          case 41:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            this.Board.WhiteCanCastleQueenSide = true;
            num14 = (int) num15 * 1009586782 ^ -1937618178;
            continue;
          case 42:
            flag10 = this.Board.lights.KingColorOnCheck == this.Piece.Color;
            num14 = (int) num15 * -1082677390 ^ 1258928369;
            continue;
          case 43:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            this.Board.BlackCanCastleQueenSide = true;
            this.Board.BlackCanCastleKingSide = true;
            num14 = (int) num15 * 855551329 ^ 1535700595;
            continue;
          default:
            goto label_47;
        }
        square1 = square2;
        num14 = -795743451;
      }
label_52:
      return;
label_47:
      return;
label_79:
      this.Board.lights.IsOnCheck = false;
      this.Board.lights.FindAllMoves();
      num14 = -1676463587;
      goto label_51;
    }

    private ChessPiece handleBlackCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
label_1:
      int num1 = -307407225;
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        Square square1;
        bool flag1;
        bool flag2;
        bool flag3;
        Square square2;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -18267068)) % 40U)
        {
          case 0:
            square2.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * -2094862710 ^ -1210349289;
            continue;
          case 1:
            int num5 = !flag1 ? 1223027964 : (num5 = 861036135);
            num1 = num5 ^ (int) num2 * -1222670614;
            continue;
          case 2:
            num1 = (int) num2 * -1013660150 ^ 589391236;
            continue;
          case 3:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1994254826 ^ 1112454669;
            continue;
          case 4:
            square1 = this.Board[3, 7];
            square1.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * 1554568421 ^ 801204247;
            continue;
          case 5:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_19;
          case 6:
            num1 = -1962929027;
            continue;
          case 7:
            num1 = (int) num2 * 173199536 ^ -1841366468;
            continue;
          case 8:
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * 2011203518 ^ -1537664956;
            continue;
          case 9:
            num1 = -1084478295;
            continue;
          case 10:
            num1 = (int) num2 * -72245872 ^ 755942705;
            continue;
          case 11:
            num1 = (int) num2 * 106201436 ^ 1626720658;
            continue;
          case 12:
            num1 = (int) num2 * 6890156 ^ 1191305819;
            continue;
          case 13:
            num1 = (int) num2 * -2139264763 ^ -1261306320;
            continue;
          case 14:
            num1 = (int) num2 * -1100680295 ^ 1652937372;
            continue;
          case 15:
            num1 = -356409105;
            continue;
          case 16:
            int num6;
            num1 = num6 = this.Piece.Current.File != 6 ? -1667155958 : (num6 = -1772458138);
            continue;
          case 17:
            num1 = (int) num2 * 1369439491 ^ 1023275087;
            continue;
          case 18:
            this.Board.BlackCanCastleKingSide = false;
            num1 = -434691966;
            continue;
          case 19:
            chessPiece2 = chessPiece1;
            num1 = -1113534985;
            continue;
          case 20:
            int num7 = !flag2 ? -716253917 : (num7 = -939280210);
            num1 = num7 ^ (int) num2 * -1030433804;
            continue;
          case 21:
            square2 = this.Board[5, 7];
            num1 = (int) num2 * -1417468355 ^ 1403255493;
            continue;
          case 22:
            this.Board.BlackCanCastleQueenSide = false;
            this.Board.BlackCanCastleKingSide = false;
            num1 = -292112924;
            continue;
          case 23:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1969260757 ^ -1845464413;
            continue;
          case 24:
            num1 = -711542861;
            continue;
          case 25:
            num4 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            break;
          case 27:
            num1 = (int) num2 * -302791904 ^ 2131930986;
            continue;
          case 28:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * -1251046786 ^ 3997308;
            continue;
          case 29:
            flag1 = Square.\u200E‎‍⁮⁪‮⁫⁭‮‫⁮⁪​​‫⁪‌⁯‏​‮‎‭‮⁭‭‌⁮‏⁯​​⁬⁬‍‌‏⁮⁪⁬‮(this.Piece.Home.Name, \u003CModule\u003E.\u200E‎‏‫⁬‫⁮⁪‌‫​⁬‬‫‪⁪‌⁫‌​‎⁭‍⁮‎⁫⁫‪‫‫‫‪‌‏‭⁬‮‌‮⁬‮<string>(1614741904U));
            num1 = (int) num2 * 498508300 ^ 239078529;
            continue;
          case 30:
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * 512705326 ^ 1536642067;
            continue;
          case 31:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 104356601 ^ 1443912822;
              continue;
            }
            num3 = 1;
            goto label_19;
          case 32:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 746060813 ^ -1236961486;
            continue;
          case 33:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * 228595750 ^ 1800642300;
            continue;
          case 34:
            num1 = (int) num2 * 1060525610 ^ -158079508;
            continue;
          case 35:
            if (this.Board.BlackCanCastleKingSide)
            {
              num4 = 1;
              break;
            }
            num1 = (int) num2 * -2032121966 ^ -992903029;
            continue;
          case 36:
            int num8 = this.Piece.Kind == Pieces.Rook ? 1642226793 : (num8 = 771000581);
            num1 = num8 ^ (int) num2 * -1927250812;
            continue;
          case 37:
            flag3 = this.Piece.Current.File == 2;
            num1 = (int) num2 * 1027927843 ^ 2000187981;
            continue;
          case 38:
            int num9 = flag3 ? -998100322 : (num9 = -2044286060);
            num1 = num9 ^ (int) num2 * -393739016;
            continue;
          case 39:
            goto label_1;
          default:
            goto label_47;
        }
        int num10;
        num1 = num10 = num4 != 0 ? -378618192 : (num10 = -356409105);
        continue;
label_19:
        flag2 = num3 != 0;
        num1 = -1167062480;
      }
label_47:
      return chessPiece2;
    }

    private ChessPiece handleWhiteCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
label_1:
      int num1 = 2096698694;
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1885674036)) % 39U)
        {
          case 0:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 475427386;
            continue;
          case 1:
            num1 = (int) num2 * -697049992 ^ -1988046273;
            continue;
          case 2:
            num1 = (int) num2 * -817215154 ^ -781665611;
            continue;
          case 3:
            num1 = (int) num2 * -1404074087 ^ 37153879;
            continue;
          case 4:
            chessPiece2 = chessPiece1;
            num1 = 108101992;
            continue;
          case 5:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * -1140574901 ^ -356166223;
            continue;
          case 6:
            num1 = (int) num2 * 2006401329 ^ 2091178118;
            continue;
          case 7:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -707714932 ^ 398801074;
            continue;
          case 8:
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * 2111897908 ^ 220902730;
            continue;
          case 9:
            num1 = (int) num2 * -94068018 ^ -1143559686;
            continue;
          case 10:
            flag4 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * 1794216804 ^ 873055316;
            continue;
          case 11:
            flag1 = Square.\u200E‎‍⁮⁪‮⁫⁭‮‫⁮⁪​​‫⁪‌⁯‏​‮‎‭‮⁭‭‌⁮‏⁯​​⁬⁬‍‌‏⁮⁪⁬‮(this.Piece.Home.Name, \u003CModule\u003E.\u202A‭​‏‏‬⁯​⁫‬‏‬⁫‭‎​‍‪‎‮‍⁪⁯⁮‬​⁮‮‮⁪‭‎‭‪⁫‭‏⁭​‬‮<string>(3459930226U));
            num1 = (int) num2 * 874655664 ^ 188167291;
            continue;
          case 12:
            square1 = this.Board[3, 0];
            num1 = (int) num2 * -1974505612 ^ -1231187489;
            continue;
          case 13:
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -641625757 ^ 1993580746;
            continue;
          case 14:
            goto label_1;
          case 15:
            int num5 = !flag3 ? 1863166132 : (num5 = 2131757430);
            num1 = num5 ^ (int) num2 * -304800234;
            continue;
          case 16:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * 890664402 ^ -444031869;
            continue;
          case 17:
            flag2 = this.Piece.Current.File == 2;
            num1 = 324084334;
            continue;
          case 18:
            num1 = (int) num2 * -981362703 ^ -290652869;
            continue;
          case 19:
            flag3 = this.Piece.Current.File == 6;
            num1 = 1844947139;
            continue;
          case 20:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_40;
          case 21:
            num1 = 1538697807;
            continue;
          case 22:
            num1 = (int) num2 * 1651601919 ^ 898145968;
            continue;
          case 23:
            int num6 = flag1 ? -920407647 : (num6 = -805254231);
            num1 = num6 ^ (int) num2 * -1061572141;
            continue;
          case 24:
            square1.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * 1669482756 ^ -648952853;
            continue;
          case 25:
            num1 = (int) num2 * 788204926 ^ -1085435277;
            continue;
          case 26:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * -428052309 ^ -1330278069;
              continue;
            }
            num3 = 1;
            goto label_40;
          case 27:
            if (!this.Board.WhiteCanCastleKingSide)
            {
              num1 = (int) num2 * -746733474 ^ 518825768;
              continue;
            }
            num4 = 1;
            break;
          case 28:
            num1 = 1799775204;
            continue;
          case 29:
            num1 = 123094493;
            continue;
          case 30:
            int num7 = flag2 ? -813804945 : (num7 = -1831996309);
            num1 = num7 ^ (int) num2 * 204438308;
            continue;
          case 31:
            square2 = this.Board[5, 0];
            square2.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * -1814362122 ^ 448549621;
            continue;
          case 32:
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -1146241768 ^ -1633465892;
            continue;
          case 33:
            int num8 = !flag4 ? 1580490293 : (num8 = 1811244779);
            num1 = num8 ^ (int) num2 * 1808452034;
            continue;
          case 34:
            this.Board.WhiteCanCastleQueenSide = false;
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 735100112;
            continue;
          case 35:
            num4 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            break;
          case 36:
            num1 = (int) num2 * -559677923 ^ 1554491147;
            continue;
          case 37:
            num1 = (int) num2 * -2084424791 ^ -1043621716;
            continue;
          default:
            goto label_46;
        }
        int num9;
        num1 = num9 = num4 == 0 ? 1538697807 : (num9 = 634257277);
        continue;
label_40:
        int num10;
        num1 = num10 = num3 != 0 ? 1327242015 : (num10 = 123094493);
      }
label_46:
      return chessPiece2;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = 788275348;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1399757320)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            Square.\u202B⁫‎‍‎⁪‬⁮‏⁫‮‌​‫⁯‪‎‪‭⁮‫⁫‍‬‌⁯​‬‪‭‫⁮‮‪‏‮​‫‎‍‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * 360911445 ^ 980832722;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    protected override void Dispose(bool disposing)
    {
      if (!disposing)
        goto label_5;
label_1:
      int num1 = -155480497;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2104586682)) % 8U)
        {
          case 0:
            base.Dispose(disposing);
            num1 = -1371776187;
            continue;
          case 1:
            goto label_4;
          case 2:
            int num3 = !flag ? 1668176440 : (num3 = 1210743502);
            num1 = num3 ^ (int) num2 * 818514547;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * 303580837 ^ 1014747714;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * 1439518235 ^ 479849443;
            continue;
          case 7:
            Square.\u200F⁮⁮‫‏‍‫‮⁯‏‏‌⁬⁮‪⁮‪⁬‭⁬‫‎⁭‫⁯‌⁯⁫⁫​‮⁫⁭‏‎‍‍‪⁯‭‮((IDisposable) this.components);
            num1 = (int) num2 * -1138326713 ^ -735358253;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:
      return;
label_4:
      int num4 = this.components != null ? 1 : 0;
      goto label_6;
label_5:
      num4 = 0;
label_6:
      flag = num4 != 0;
      num1 = -607268964;
      goto label_2;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = 109439476;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1368368254)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -2087257833 ^ 73257729;
            continue;
          case 1:
            Square.\u200C‭‍‮‭​⁬⁮‌‫⁯⁬‮‮‫‏‪‭⁯⁬‫‮‬⁫⁫⁫‫⁪‪‎⁯‍⁬​⁪‫​⁪⁪‮‮((Control) this, new Padding(0));
            num1 = (int) num2 * -1975143071 ^ -1363809512;
            continue;
          case 2:
            Square.\u202B‪⁭⁭⁬‮‭‎‎‫‮‮‮‍‬‬⁫‍⁯⁮⁫⁪‌‌⁮‪‍⁬⁭⁭‌‏‫‪‭⁫​‬⁫‮‮((Control) this);
            num1 = (int) num2 * -1294110296 ^ -536020186;
            continue;
          case 3:
            this.Name = \u003CModule\u003E.\u200F⁪⁭‮⁭‎‌⁯⁬⁪‬⁫‬‍⁬‎⁯⁯‌​⁪‫⁬⁫⁮‌‍⁫⁫​⁯‪⁬‌⁭‭‎​‪‮<string>(4174429735U);
            Square.\u206C‏⁪⁫‭‪‫‌‌⁯⁮‫⁬⁪‫‌‎‎‬​‭‌⁭⁬‌⁭‪‏‍⁭‬‏‬‎‬‏⁯⁭⁮‏‮((Control) this, new Size(137, 132));
            Square.\u206F​⁯‭⁫‏‫‬⁯​‏‏⁯‭‎⁭⁭​⁯​⁬‎⁫‏‮‬‫‪‎⁭‌‏‪⁮‪‎​⁪‍⁪‮((Control) this, false);
            num1 = (int) num2 * 851142950 ^ 794361128;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * -1716347031 ^ -1372558686;
            continue;
          case 6:
            Square.\u206C‭⁭‍⁯​‬‍⁮⁯‪‪‭‏‌‪⁮⁯⁬‏⁭⁬⁬‪⁬⁪‮‪‏‍‬​‬⁮‍⁯‭⁪‍⁯‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * 441337962 ^ -324207579;
            continue;
          case 7:
            Square.\u202C⁭‬​⁪‌⁫‌‍‫⁯⁬‬‮⁬‍‍‫‫‮⁯⁯⁫‏‎⁯‬‎⁫⁬‍‭⁬⁫⁮‬‫⁫⁮‍‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * 1091094808 ^ 1306632082;
            continue;
          case 8:
            goto label_1;
          case 9:
            Square.\u206E⁯⁭‏‏⁮‭⁯‬‮‮‍‭‬‮‍‫‪‫‪⁮‎‎‫‫‫‬‌‍⁬​⁭‬‬‭‍⁬‌⁮‪‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * 2108649969 ^ -91466608;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    static Delegate \u200F‮⁮⁫‬⁯⁯‭⁭‍⁭‏‌‮‪‪‬⁫‫‮⁮‪‬​⁮‏‬‪‍‭‬‮⁫‌​‮⁮‪⁬⁬‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u200D‭‏‬​‬⁪‏‪‬‮‌⁭⁮⁯⁫‮⁭‬‏⁪‭‏⁫‬‫‪⁮‫⁮‬‏‬⁭⁫​⁫‪⁮‬‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u206F⁪‌‏⁮‎​⁭⁫⁯⁬⁪‭⁫‏⁫‌‌‏⁯‬‬‭⁮⁪‪⁪‫⁫‬⁪⁭⁯‭‎‬‮⁯‌‎‮([In] object obj0) => obj0.ToString();

    static string \u206F‌‭‏‮‌⁪​‪⁯‎⁫⁫‌⁯‮⁯‫‎⁫‪‭⁯‌‍⁮‌‫⁬⁮‍‮⁮‌⁪‌‮‫‍‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u206E​⁭‏⁮‪⁪‮‮⁬⁬​⁪‏⁭‭​‬‬⁮‍⁬‬‎‫⁬‪⁯‍⁯​‏⁭‭‎‪‫‪⁮⁫‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u202D⁯‭‎‪⁬⁬‏⁭‫​‎‪‫‫‎‍​⁯⁭​‫⁫‬⁭‌‮‪‍‏‌‍‪⁬⁯‬‫‪‎‫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u206D​‫⁯‏‫⁮‬⁪‏‫‭​‌‌⁮⁬‮‫⁯‌‍⁫‌⁬⁪‪⁫‍‫⁮‌⁪‬‎‮​‪‍‏‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u206E⁮⁫‏‫⁯‭⁫‏‎‏⁫⁪‮⁮⁫‍⁮⁪⁬⁭‍⁭‫‮⁯⁪⁫⁮⁮‮​​‮‭‬⁭‫​⁯‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u200C‍‎‮‮‭⁪‬‭‏‏‮⁭⁯‬‎‪⁬⁭‭‎‏⁭‍‮‪⁬‏⁮‪‎⁫‮⁮‎‮​‏‏⁪‮() => Cursor.Position;

    static DialogResult \u200F⁮⁪‍‎⁭‎⁮‮⁪⁯‌‍⁪⁫⁫‮​‎‏‍​‎‌‍‏‮‭‌‌⁬⁬⁬‪‪⁮‌‌‭⁯‮([In] Form obj0) => obj0.ShowDialog();

    static void \u200F⁮⁮‫‏‍‫‮⁯‏‏‌⁬⁮‪⁮‪⁬‭⁬‫‎⁭‫⁯‌⁯⁫⁫​‮⁫⁭‏‎‍‍‪⁯‭‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u200E‎‍⁮⁪‮⁫⁭‮‫⁮⁪​​‫⁪‌⁯‏​‮‎‭‮⁭‭‌⁮‏⁯​​⁬⁬‍‌‏⁮⁪⁬‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u202B⁫‎‍‎⁪‬⁮‏⁫‮‌​‫⁯‪‎‪‭⁮‫⁫‍‬‌⁯​‬‪‭‫⁮‮‪‏‮​‫‎‍‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u202B‪⁭⁭⁬‮‭‎‎‫‮‮‮‍‬‬⁫‍⁯⁮⁫⁪‌‌⁮‪‍⁬⁭⁭‌‏‫‪‭⁫​‬⁫‮‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u206C‭⁭‍⁯​‬‍⁮⁯‪‪‭‏‌‪⁮⁯⁬‏⁭⁬⁬‪⁬⁪‮‪‏‍‬​‬⁮‍⁯‭⁪‍⁯‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u202C⁭‬​⁪‌⁫‌‍‫⁯⁬‬‮⁬‍‍‫‫‮⁯⁯⁫‏‎⁯‬‎⁫⁬‍‭⁬⁫⁮‬‫⁫⁮‍‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u206E⁯⁭‏‏⁮‭⁯‬‮‮‍‭‬‮‍‫‪‫‪⁮‎‎‫‫‫‬‌‍⁬​⁭‬‬‭‍⁬‌⁮‪‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u200C‭‍‮‭​⁬⁮‌‫⁯⁬‮‮‫‏‪‭⁯⁬‫‮‬⁫⁫⁫‫⁪‪‎⁯‍⁬​⁪‫​⁪⁪‮‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u206C‏⁪⁫‭‪‫‌‌⁯⁮‫⁬⁪‫‌‎‎‬​‭‌⁭⁬‌⁭‪‏‍⁭‬‏‬‎‬‏⁯⁭⁮‏‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206F​⁯‭⁫‏‫‬⁯​‏‏⁯‭‎⁭⁭​⁯​⁬‎⁫‏‮‬‫‪‎⁭‌‏‪⁮‪‎​⁪‍⁪‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
