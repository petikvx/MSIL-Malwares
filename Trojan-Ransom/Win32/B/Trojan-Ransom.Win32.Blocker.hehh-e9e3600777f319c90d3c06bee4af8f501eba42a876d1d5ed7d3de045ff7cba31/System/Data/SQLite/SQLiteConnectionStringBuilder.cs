// Decompiled with JetBrains decompiler
// Type: System.Data.SQLite.SQLiteConnectionStringBuilder
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using System.Collections;
using System.ComponentModel;
using System.Data.Common;
using System.Globalization;
using System.Reflection;

namespace System.Data.SQLite
{
  [DefaultMember("Item")]
  [DefaultProperty("DataSource")]
  public sealed class SQLiteConnectionStringBuilder : DbConnectionStringBuilder
  {
    private Hashtable _properties;

    public SQLiteConnectionStringBuilder() => this.Initialize((string) null);

    public SQLiteConnectionStringBuilder(string connectionString) => this.Initialize(connectionString);

    private void Initialize(string cnnString)
    {
      this._properties = new Hashtable((IEqualityComparer) StringComparer.OrdinalIgnoreCase);
      try
      {
        this.GetProperties(this._properties);
      }
      catch (NotImplementedException ex)
      {
        this.FallbackGetProperties(this._properties);
      }
      if (string.IsNullOrEmpty(cnnString))
        return;
      this.ConnectionString = cnnString;
    }

    [DefaultValue(3)]
    [Browsable(true)]
    public int Version
    {
      get
      {
        object obj;
        this.TryGetValue("version", out obj);
        return Convert.ToInt32(obj, (IFormatProvider) CultureInfo.CurrentCulture);
      }
      set => this["version"] = value == 3 ? (object) value : throw new NotSupportedException();
    }

    [Browsable(true)]
    [DefaultValue(SynchronizationModes.Normal)]
    [DisplayName("Synchronous")]
    public SynchronizationModes SyncMode
    {
      get
      {
        object obj;
        this.TryGetValue("synchronous", out obj);
        return obj is string ? (SynchronizationModes) TypeDescriptor.GetConverter(typeof (SynchronizationModes)).ConvertFrom(obj) : (SynchronizationModes) obj;
      }
      set => this["synchronous"] = (object) value;
    }

    [Browsable(true)]
    [DefaultValue(false)]
    public bool UseUTF16Encoding
    {
      get
      {
        object source;
        this.TryGetValue("useutf16encoding", out source);
        return SQLiteConvert.ToBoolean(source);
      }
      set => this["useutf16encoding"] = (object) value;
    }

    [DefaultValue(false)]
    [Browsable(true)]
    public bool Pooling
    {
      get
      {
        object source;
        this.TryGetValue("pooling", out source);
        return SQLiteConvert.ToBoolean(source);
      }
      set => this["pooling"] = (object) value;
    }

    [Browsable(true)]
    [DefaultValue(true)]
    public bool BinaryGUID
    {
      get
      {
        object source;
        this.TryGetValue("binaryguid", out source);
        return SQLiteConvert.ToBoolean(source);
      }
      set => this["binaryguid"] = (object) value;
    }

    [DisplayName("Data Source")]
    [DefaultValue("")]
    [Browsable(true)]
    public string DataSource
    {
      get
      {
        object obj;
        this.TryGetValue("data source", out obj);
        return obj.ToString();
      }
      set => this["data source"] = (object) value;
    }

    [Browsable(false)]
    public string Uri
    {
      get
      {
        object obj;
        this.TryGetValue("uri", out obj);
        return obj.ToString();
      }
      set => this["uri"] = (object) value;
    }

    [Browsable(true)]
    [DefaultValue(30)]
    [DisplayName("Default Timeout")]
    public int DefaultTimeout
    {
      get
      {
        object obj;
        this.TryGetValue("default timeout", out obj);
        return Convert.ToInt32(obj, (IFormatProvider) CultureInfo.CurrentCulture);
      }
      set => this["default timeout"] = (object) value;
    }

    [Browsable(true)]
    [DefaultValue(true)]
    public bool Enlist
    {
      get
      {
        object source;
        this.TryGetValue("enlist", out source);
        return SQLiteConvert.ToBoolean(source);
      }
      set => this["enlist"] = (object) value;
    }

    [Browsable(true)]
    [DefaultValue(false)]
    public bool FailIfMissing
    {
      get
      {
        object source;
        this.TryGetValue("failifmissing", out source);
        return SQLiteConvert.ToBoolean(source);
      }
      set => this["failifmissing"] = (object) value;
    }

    [DefaultValue(false)]
    [Browsable(true)]
    [DisplayName("Legacy Format")]
    public bool LegacyFormat
    {
      get
      {
        object source;
        this.TryGetValue("legacy format", out source);
        return SQLiteConvert.ToBoolean(source);
      }
      set => this["legacy format"] = (object) value;
    }

    [Browsable(true)]
    [DisplayName("Read Only")]
    [DefaultValue(false)]
    public bool ReadOnly
    {
      get
      {
        object source;
        this.TryGetValue("read only", out source);
        return SQLiteConvert.ToBoolean(source);
      }
      set => this["read only"] = (object) value;
    }

    [PasswordPropertyText(true)]
    [Browsable(true)]
    [DefaultValue("")]
    public string Password
    {
      get
      {
        object obj;
        this.TryGetValue("password", out obj);
        return obj.ToString();
      }
      set => this["password"] = (object) value;
    }

    [Browsable(true)]
    [DisplayName("Page Size")]
    [DefaultValue(1024)]
    public int PageSize
    {
      get
      {
        object obj;
        this.TryGetValue("page size", out obj);
        return Convert.ToInt32(obj, (IFormatProvider) CultureInfo.CurrentCulture);
      }
      set => this["page size"] = (object) value;
    }

    [DefaultValue(0)]
    [DisplayName("Max Page Count")]
    [Browsable(true)]
    public int MaxPageCount
    {
      get
      {
        object obj;
        this.TryGetValue("max page count", out obj);
        return Convert.ToInt32(obj, (IFormatProvider) CultureInfo.CurrentCulture);
      }
      set => this["max page count"] = (object) value;
    }

    [DefaultValue(2000)]
    [DisplayName("Cache Size")]
    [Browsable(true)]
    public int CacheSize
    {
      get
      {
        object obj;
        this.TryGetValue("cache size", out obj);
        return Convert.ToInt32(obj, (IFormatProvider) CultureInfo.CurrentCulture);
      }
      set => this["cache size"] = (object) value;
    }

    [DefaultValue(SQLiteDateFormats.ISO8601)]
    [Browsable(true)]
    public SQLiteDateFormats DateTimeFormat
    {
      get
      {
        object obj;
        this.TryGetValue("datetimeformat", out obj);
        return obj is string ? (SQLiteDateFormats) TypeDescriptor.GetConverter(typeof (SQLiteDateFormats)).ConvertFrom(obj) : (SQLiteDateFormats) obj;
      }
      set => this["datetimeformat"] = (object) value;
    }

    [DefaultValue(SQLiteJournalModeEnum.Delete)]
    [DisplayName("Journal Mode")]
    [Browsable(true)]
    public SQLiteJournalModeEnum JournalMode
    {
      get
      {
        object obj;
        this.TryGetValue("journal mode", out obj);
        return obj is string ? (SQLiteJournalModeEnum) TypeDescriptor.GetConverter(typeof (SQLiteJournalModeEnum)).ConvertFrom(obj) : (SQLiteJournalModeEnum) obj;
      }
      set => this["journal mode"] = (object) value;
    }

    [DefaultValue(IsolationLevel.Serializable)]
    [DisplayName("Default Isolation Level")]
    [Browsable(true)]
    public IsolationLevel DefaultIsolationLevel
    {
      get
      {
        object obj;
        this.TryGetValue("default isolationlevel", out obj);
        return obj is string ? (IsolationLevel) TypeDescriptor.GetConverter(typeof (IsolationLevel)).ConvertFrom(obj) : (IsolationLevel) obj;
      }
      set => this["default isolationlevel"] = (object) value;
    }

    public override bool TryGetValue(string keyword, out object value)
    {
      bool flag = base.TryGetValue(keyword, out value);
      if (!this._properties.ContainsKey((object) keyword) || !(this._properties[(object) keyword] is PropertyDescriptor property))
        return flag;
      if (flag)
        value = (object) property.PropertyType != (object) typeof (bool) ? TypeDescriptor.GetConverter(property.PropertyType).ConvertFrom(value) : (object) SQLiteConvert.ToBoolean(value);
      else if (property.Attributes[typeof (DefaultValueAttribute)] is DefaultValueAttribute attribute)
      {
        value = attribute.Value;
        flag = true;
      }
      return flag;
    }

    private void FallbackGetProperties(Hashtable propertyList)
    {
      foreach (PropertyDescriptor property in TypeDescriptor.GetProperties((object) this, true))
      {
        if (property.Name != "ConnectionString" && !propertyList.ContainsKey((object) property.DisplayName))
          propertyList.Add((object) property.DisplayName, (object) property);
      }
    }
  }
}
