// Decompiled with JetBrains decompiler
// Type: ProjNet.Serialization.ModelFacadeSerializer
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Producers;
using IRefl.Wrappers;
using ProjNet.Common;
using ProjNet.States;
using ProjNet.Structs;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace ProjNet.Serialization
{
  public class ModelFacadeSerializer : Rule, ProccesorSingletonWrapper, CodeObjectProducer
  {
    private ReaderItemState rules;
    private ReaderItemState _Database;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal ModelFacadeSerializer(
      string init,
      string caller,
      long helperhigh,
      string init2,
      string cust3,
      string item4,
      ReaderItemState counter5,
      ReaderItemState ident6)
    {
      int num = 3;
      if (true)
        goto label_4;
label_1:
      this._Database = ident6;
      num = 5;
label_4:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 4:
            goto label_3;
          case 3:
            PageAdvisorStructBuilder.PrepareCreator();
            if (true)
            {
              num = 4;
              continue;
            }
            goto label_3;
          case 5:
            goto label_6;
          default:
            num = 0;
            continue;
        }
      }
label_3:
      // ISSUE: explicit constructor call
      base.\u002Ector(init, caller, helperhigh, init2, item4, cust3);
      this.rules = counter5;
      goto label_1;
label_6:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ReaderItemState ReflectItem() => this.rules;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void UpdateItem(ReaderItemState task) => this.rules = task;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ReaderItemState DeleteItem() => this._Database;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RemoveItem(ReaderItemState item) => this._Database = item;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Callback DefineItem() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public List<double[]> RunItem(List<double[]> init) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public List<double[]> ManageItem(List<double[]> reference) => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus() => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool InvokeItem(object ident)
    {
      int num1 = 4;
      bool flag1;
      if (true)
      {
        ModelFacadeSerializer facadeSerializer;
        bool flag2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 4:
              flag2 = !(ident is ModelFacadeSerializer);
              if (true)
              {
                num1 = 5;
                continue;
              }
              goto label_10;
            case 1:
              goto label_13;
            case 2:
            case 3:
              if (facadeSerializer.ReflectItem().InvokeItem((object) this.ReflectItem()))
              {
                num1 = 6;
                continue;
              }
              goto label_11;
            case 5:
              if (!flag2)
              {
                facadeSerializer = ident as ModelFacadeSerializer;
                goto case 2;
              }
              else
              {
                flag1 = false;
                if (true)
                {
                  num1 = 1;
                  continue;
                }
                goto case 0;
              }
            case 6:
              goto label_10;
            default:
              int num2 = 2;
              num1 = ModelFacadeSerializer.IncludeList() ? num2 : num2;
              continue;
          }
        }
label_10:
        int num3 = facadeSerializer.DeleteItem().InvokeItem((object) this.DeleteItem()) ? 1 : 0;
        goto label_12;
label_11:
        num3 = 0;
label_12:
        flag1 = num3 != 0;
      }
label_13:
      return flag1;
    }

    internal static bool ResolveList() => true;

    internal static bool IncludeList() => false;
  }
}
