// Decompiled with JetBrains decompiler
// Type: Alero.LazyList`1
// Assembly: AssemblyCopyrightAttrib, Version=2005.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6DE54395-8B54-4A88-80DE-363C4128FB08
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqx-d67265883ffb3f3129132bfe1dad4a828c887266a0a005e814bcda58c525625b.exe

using System;
using System.Collections;
using System.Collections.Generic;

namespace Alero
{
  [Serializable]
  public class LazyList<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable
  {
    [NonSerialized]
    private readonly IEnumerable<T> _enumerable;
    private System.Collections.Generic.List<T> _list;

    public LazyList(IEnumerable<T> enumerable) => this._enumerable = enumerable;

    private IList<T> List => (IList<T>) (this._list ?? (this._list = new System.Collections.Generic.List<T>(this._enumerable)));

    public IEnumerator<T> GetEnumerator() => this.List.GetEnumerator();

    IEnumerator IEnumerable.GetEnumerator() => (IEnumerator) this.GetEnumerator();

    public void Add(T item) => this.List.Add(item);

    public void Clear() => this.List.Clear();

    public bool Contains(T item) => this.List.Contains(item);

    public void CopyTo(T[] array, int arrayIndex) => this.List.CopyTo(array, arrayIndex);

    public bool Remove(T item) => this.List.Remove(item);

    public int Count => this.List.Count;

    public bool IsReadOnly => this.List.IsReadOnly;

    public int IndexOf(T item) => this.List.IndexOf(item);

    public void Insert(int index, T item) => this.List.Insert(index, item);

    public void RemoveAt(int index) => this.List.RemoveAt(index);

    public T this[int index]
    {
      get => this.List[index];
      set => this.List[index] = value;
    }
  }
}
