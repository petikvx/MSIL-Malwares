// Decompiled with JetBrains decompiler
// Type: dotXMLToolsWPF.Controls.DrawingDisplayControl
// Assembly: LeaseMana, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 529A6AA6-AEB5-47F3-B86B-C5E3C5F9FA62
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-7e41c997a103e91b3815e9269a2d8806e5474c05620f8ff0ca591a586eae2f80.exe

using dotXMLToolsWPF.W2d.Opcodes;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace dotXMLToolsWPF.Controls
{
  public class DrawingDisplayControl : Control
  {
    private List<IOpcode> opcodes;
    private int zoom = 1;

    public DrawingDisplayControl()
    {
      this.Name = "DrawingDisplay";
      this.Size = new Size(320, 240);
    }

    protected List<IOpcode> GetData()
    {
      if (this.opcodes == null)
        this.opcodes = (List<IOpcode>) W2dParser.GetParsedData("C:\\Users\\Liquidsnk\\Documents\\Visual Studio 2010\\Projects\\dotXMLToolsWPF\\dotXMLToolsWPF\\Sample\\FF6A06F4-B452-48B0-A328-74702E883FEA.w2d");
      return this.opcodes;
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      List<IOpcode> data = this.GetData();
      new GdiRendering(e.Graphics, e.ClipRectangle)
      {
        zoom = this.zoom
      }.Render((IEnumerable<IOpcode>) data);
    }

    protected override void OnMouseWheel(MouseEventArgs e)
    {
      base.OnMouseWheel(e);
      this.zoom += e.Delta / 300;
      if (this.zoom == 0)
        this.zoom = 1;
      this.Invalidate();
    }
  }
}
