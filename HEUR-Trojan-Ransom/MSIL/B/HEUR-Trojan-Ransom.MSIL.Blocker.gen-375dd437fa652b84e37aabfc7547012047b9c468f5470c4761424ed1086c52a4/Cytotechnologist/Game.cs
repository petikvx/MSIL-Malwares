// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: StreamWriterBufferedDataLo, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A001E45-B149-45C2-9BBE-A5BA299DBD32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-375dd437fa652b84e37aabfc7547012047b9c468f5470c4761424ed1086c52a4.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -553475502;
      int aIndex;
      JSONNode jsonNode;
      int count;
      int index;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -445711073)) % 20U)
        {
          case 0:
            num1 = (int) num2 * 2088681740 ^ 2001710874;
            continue;
          case 1:
            this.Players = new Player[count];
            num1 = (int) num2 * -1666628449 ^ -362798722;
            continue;
          case 2:
            this._dice = new Dice();
            num1 = (int) num2 * -2064878961 ^ -1676665324;
            continue;
          case 3:
            flag = index < count;
            num1 = -529159945;
            continue;
          case 4:
            int num3 = !flag ? -481098571 : (num3 = -1810120874);
            num1 = num3 ^ (int) num2 * -1348255894;
            continue;
          case 5:
            int num4;
            num1 = num4 = aIndex >= count ? -1934946417 : (num4 = -447400504);
            continue;
          case 6:
            goto label_3;
          case 7:
            index = 0;
            num1 = (int) num2 * 1975394024 ^ -138858863;
            continue;
          case 8:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * -347727424 ^ -1556992304;
            continue;
          case 9:
            jsonNode = json["players"];
            count = jsonNode.Count;
            num1 = (int) num2 * -2079676824 ^ -1770940902;
            continue;
          case 10:
            num1 = (int) num2 * -253359912 ^ -132332912;
            continue;
          case 11:
            ++aIndex;
            num1 = (int) num2 * -304473883 ^ -798046535;
            continue;
          case 12:
            goto label_1;
          case 13:
            num1 = (int) num2 * -1453017679 ^ -1558173019;
            continue;
          case 14:
            aIndex = 0;
            num1 = (int) num2 * -2023126213 ^ -168004359;
            continue;
          case 15:
            num1 = (int) num2 * 758570373 ^ 1661509942;
            continue;
          case 16:
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * -467738473 ^ -1912821399;
            continue;
          case 17:
            this._playerStates[index] = new PlayerState();
            ++index;
            num1 = -260894720;
            continue;
          case 18:
            this._buffer = buffer;
            this._random = Game.\u206E⁯‪⁭‪⁯‫‍‌⁪‏⁬‮⁪‭‪​​‫‎‪‪‭⁬⁭‎‮‬‬‪‭‭⁬‏‌⁫‮⁯‮‭‮((int) DateTime.Now.Ticks);
            num1 = (int) num2 * -1522522789 ^ 1254186521;
            continue;
          case 19:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = -1999056392;
            continue;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 85265022;
        int index;
        PlayerState[] playerStates;
        bool finished1;
        bool finished2;
        bool flag;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 624275016)) % 18U)
          {
            case 0:
              index = 0;
              num1 = (int) num2 * 930917587 ^ 1539397;
              continue;
            case 1:
              num1 = (int) num2 * 1970628013 ^ 1350035121;
              continue;
            case 2:
              num1 = (int) num2 * -603085853 ^ -1666236931;
              continue;
            case 3:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * -750660069 ^ -1668726660;
              continue;
            case 4:
              playerStates = this._playerStates;
              num1 = (int) num2 * -1587635497 ^ -497656774;
              continue;
            case 6:
              int num3;
              num1 = num3 = index < playerStates.Length ? 2032134736 : (num3 = 929236889);
              continue;
            case 7:
              finished1 = true;
              num1 = (int) num2 * 1333335347 ^ 684495788;
              continue;
            case 8:
              finished1 = false;
              num1 = (int) num2 * 1935367495 ^ -1937455924;
              continue;
            case 9:
              ++index;
              num1 = 809949548;
              continue;
            case 10:
              num1 = (int) num2 * 758125858 ^ 1250376023;
              continue;
            case 11:
              finished1 = true;
              num1 = (int) num2 * 1983695073 ^ -1394599617;
              continue;
            case 12:
              finished2 = this._finished;
              num1 = (int) num2 * 1459607197 ^ -643797815;
              continue;
            case 13:
              num1 = 1073415618;
              continue;
            case 14:
              goto label_1;
            case 15:
              int num4 = finished2 ? -899031438 : (num4 = -1715078414);
              num1 = num4 ^ (int) num2 * 262528533;
              continue;
            case 16:
              playerState = playerStates[index];
              num1 = 992052231;
              continue;
            case 17:
              int num5 = !flag ? 2044760243 : (num5 = 1867053628);
              num1 = num5 ^ (int) num2 * -1343339876;
              continue;
            default:
              goto label_19;
          }
        }
label_19:
        return finished1;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = -1477124064;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1484593981)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * -733054764 ^ -685314948;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = -1467258465;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1589958568)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1399512393 ^ 1840180616;
            continue;
          case 2:
            this.Losers.Clear();
            num1 = (int) num2 * -623067166 ^ -1978551046;
            continue;
          case 4:
            this.Winners.Clear();
            num1 = (int) num2 * 235566922 ^ -1007037829;
            continue;
          case 5:
            this._finished = false;
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -1073496993 ^ -805831067;
            continue;
          case 6:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            num1 = (int) num2 * -674441757 ^ -808836338;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
label_1:
      int num1 = -1873240745;
      int index;
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      bool flag1;
      bool flag2;
      Player player;
      bool morePlanningSprint;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -870514452)) % 26U)
        {
          case 0:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            int num4 = planningCardsCount == 0 ? -1509516920 : (num4 = -254081909);
            num1 = num4 ^ (int) num3 * 2136021678;
            continue;
          case 1:
            index = 0;
            num1 = (int) num3 * 1736623909 ^ 508757058;
            continue;
          case 2:
            playerState = this._playerStates[index];
            num1 = (int) num3 * 375556938 ^ 528310245;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = -1500770364;
            continue;
          case 5:
            num1 = (int) num3 * -1626494331 ^ 176689391;
            continue;
          case 6:
            ++index;
            num1 = (int) num3 * 708483103 ^ -1001545648;
            continue;
          case 7:
            int num5 = !flag2 ? -282852698 : (num5 = -396935578);
            num1 = num5 ^ (int) num3 * -1267503527;
            continue;
          case 8:
            int num6 = !morePlanningSprint ? -669368926 : (num6 = -1211046979);
            num1 = num6 ^ (int) num3 * 2021559374;
            continue;
          case 9:
            num1 = (int) num3 * 1089153332 ^ 102049808;
            continue;
          case 10:
            playerState.Sprint = 1;
            num1 = (int) num3 * 488913651 ^ -221295629;
            continue;
          case 11:
            playerState.Sprint = 0;
            num1 = (int) num3 * -453160833 ^ 1525382811;
            continue;
          case 12:
            num2 = 0;
            num1 = -1145495972;
            continue;
          case 13:
            player = this.Players[index];
            num1 = -2117114506;
            continue;
          case 14:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -328724864;
            continue;
          case 15:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 309249058 ^ -1391212182;
            continue;
          case 16:
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * 946733195 ^ -1508698314;
            continue;
          case 17:
            int num7 = !flag1 ? -1194579488 : (num7 = -246349006);
            num1 = num7 ^ (int) num3 * 1875517032;
            continue;
          case 18:
            flag1 = num2 > 0;
            num1 = -901386867;
            continue;
          case 19:
            goto label_1;
          case 20:
            flag2 = index < this.Players.Length;
            num1 = -1988479125;
            continue;
          case 21:
            num1 = (int) num3 * 807966161 ^ -1148239216;
            continue;
          case 22:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 2028243238 ^ 733547352;
            continue;
          case 23:
            num1 = -1615989306;
            continue;
          case 24:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * 855759009 ^ -1033570632;
            continue;
          case 25:
            playerState.Sprint = -1;
            num1 = (int) num3 * -1472794004 ^ 1006930443;
            continue;
          default:
            goto label_28;
        }
      }
label_3:
      return;
label_28:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = -502562756;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -452847645)) % 14U)
        {
          case 0:
            goto label_1;
          case 1:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * -1455596298 ^ 681797442;
            continue;
          case 2:
            num1 = (int) num2 * 2064028371 ^ 1509687298;
            continue;
          case 3:
            int num3 = flag ? -1835479956 : (num3 = -490090205);
            num1 = num3 ^ (int) num2 * 1005029345;
            continue;
          case 4:
            this._currentPlayer = 0;
            flag = this._currentTurn > 0;
            num1 = (int) num2 * 1221933668 ^ -1750788510;
            continue;
          case 5:
            int num4 = this._currentPlayer >= this.Players.Length ? 1039662309 : (num4 = 1193476730);
            num1 = num4 ^ (int) num2 * -973927618;
            continue;
          case 6:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 83215761 ^ -1071033931;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = (int) num2 * -1584300490 ^ -137636764;
            continue;
          case 9:
            this.Print((object) Game.\u206D⁮‎⁭‍‪‭‭⁯⁭‍‭‮‮‏‏‎⁭‏‬‪⁮‮​‮‎‍⁯​⁭⁯‎‪‪‍⁮‌‎⁯‍‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -989811979;
            continue;
          case 10:
            num1 = (int) num2 * -441405466 ^ -828859934;
            continue;
          case 11:
            this.PlayerTurn(this._currentPlayer);
            num1 = -955741320;
            continue;
          case 12:
            num1 = (int) num2 * -147523461 ^ 547913545;
            continue;
          case 13:
            this.Print((object) Game.\u200C⁭⁮‮‍⁫⁬‭‪‍⁯⁮‏‏⁯⁮⁭⁪‮⁮‍‭⁪⁫‪⁯⁪‬⁫⁮‫⁯‭‏‪⁯‭​‭⁫‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 839804917 ^ 1698158108;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -1800190056;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        Card card;
        bool flag3;
        int index;
        bool flag4;
        Player player;
        int num3;
        PlayerState playerState1;
        PlayerState playerState2;
        bool flag5;
        bool flag6;
        int num4;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        int num5;
        bool flag11;
        bool onlyOneWinner;
        bool flag12;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1134780791)) % 83U)
        {
          case 0:
            flag9 = !this.Losers.Contains(index);
            num1 = (int) num2 * 1621474124 ^ 1525591983;
            continue;
          case 1:
            this.Losers.Add(num5);
            num1 = (int) num2 * -841999864 ^ -899721825;
            continue;
          case 2:
            num1 = (int) num2 * 285889865 ^ 403491280;
            continue;
          case 3:
            num4 = card.Impact;
            num1 = (int) num2 * 361279908 ^ 69806509;
            continue;
          case 4:
            index = 0;
            num1 = -1929361613;
            continue;
          case 5:
            num1 = (int) num2 * -1056913849 ^ -2060659470;
            continue;
          case 6:
            playerState2.Resources -= Game.\u200B‮‏‬​‫‍‮⁫‫⁯⁪⁭‏‮‮⁬‪⁮‭​‭‎‮‫⁪⁪⁬⁫⁫‫‪‏⁮‎⁫‭‏‪⁬‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -1792911663 ^ -91991388;
            continue;
          case 7:
            int num7 = !flag12 ? -386428987 : (num7 = -1024425654);
            num1 = num7 ^ (int) num2 * -1345240200;
            continue;
          case 8:
            flag4 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -487893490;
            continue;
          case 9:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -399417569 ^ 242976434;
            continue;
          case 10:
            flag3 = true;
            num1 = (int) num2 * 1780339841 ^ 1617314637;
            continue;
          case 11:
            playerState1.State = State.Lose;
            int num8 = !this.Losers.Contains(playerIndex) ? 119300972 : (num8 = 167638414);
            num1 = num8 ^ (int) num2 * -1497837502;
            continue;
          case 12:
            num1 = (int) num2 * -1410775633 ^ -1251242460;
            continue;
          case 13:
            flag10 = playerState1.State != 0;
            num1 = (int) num2 * 612828681 ^ -1276844125;
            continue;
          case 14:
            num1 = (int) num2 * -199450586 ^ -1599009261;
            continue;
          case 15:
            int num9 = flag11 ? 1145349727 : (num9 = 1475784505);
            num1 = num9 ^ (int) num2 * -1211173626;
            continue;
          case 16:
            flag3 = false;
            num1 = -1915737245;
            continue;
          case 17:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -802460841 ^ -2137944372;
            continue;
          case 18:
            num1 = -1778663363;
            continue;
          case 19:
            num1 = (int) num2 * 523088608 ^ 1604622626;
            continue;
          case 20:
            num1 = (int) num2 * -142540318 ^ -1450598300;
            continue;
          case 21:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -563208517 ^ -1770032147;
            continue;
          case 22:
            int num10 = !flag7 ? -1200976083 : (num10 = -1696029394);
            num1 = num10 ^ (int) num2 * -1987401532;
            continue;
          case 23:
            flag12 = num5 < this._playerStates.Length;
            num1 = -286598975;
            continue;
          case 24:
            num1 = (int) num2 * -1929425636 ^ -639100280;
            continue;
          case 25:
            int num11 = !onlyOneWinner ? -1245743435 : (num11 = -1401935313);
            num1 = num11 ^ (int) num2 * 1302072749;
            continue;
          case 26:
            num1 = (int) num2 * -582823511 ^ 1386792709;
            continue;
          case 27:
            num1 = -1989104838;
            continue;
          case 28:
            int num12 = flag5 ? 591726796 : (num12 = 915277356);
            num1 = num12 ^ (int) num2 * 658358363;
            continue;
          case 29:
            int num13;
            num1 = num13 = index >= this._playerStates.Length ? -216300524 : (num13 = -2039914117);
            continue;
          case 30:
            num1 = (int) num2 * -1848793880 ^ 1071290212;
            continue;
          case 31:
            ++playerState1.Sprint;
            num1 = (int) num2 * -594696660 ^ 145510362;
            continue;
          case 32:
            num1 = (int) num2 * 641594202 ^ 670309657;
            continue;
          case 33:
            playerState2 = this._playerStates[index];
            num1 = -523503219;
            continue;
          case 34:
            num1 = -1217661952;
            continue;
          case 35:
            int num14 = !flag6 ? -96164028 : (num14 = -352103561);
            num1 = num14 ^ (int) num2 * 380369874;
            continue;
          case 36:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag8 ? (object) "ALL " : (object) "", flag1 ? (object) "receives" : (object) "pays", (object) Game.\u206C‍‍⁫‪⁫‍⁬⁮‬⁫‫‮⁮⁮⁯⁭‫​⁫‬⁮‌‪‎‪⁭​‪‫⁫⁬⁫​‎‏‭⁭‫⁯‮(num4), flag3 ? (object) "advance" : (object) "stay");
            flag7 = !flag8;
            num1 = -317487598;
            continue;
          case 37:
            num4 = Game.\u200B‮‏‬​‫‍‮⁫‫⁯⁪⁭‏‮‮⁬‪⁮‭​‭‎‮‫⁪⁪⁬⁫⁫‫‪‏⁮‎⁫‭‏‪⁬‮(0, num3);
            num1 = (int) num2 * -707664663 ^ -1630975063;
            continue;
          case 38:
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u200C⁭⁮‮‍⁫⁬‭‪‍⁯⁮‏‏⁯⁮⁭⁪‮⁮‍‭⁪⁫‪⁯⁪‬⁫⁮‫⁯‭‏‪⁯‭​‭⁫‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 1957543026 ^ 728050822;
            continue;
          case 39:
            num1 = (int) num2 * 178010263 ^ 542547902;
            continue;
          case 40:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -905625134 ^ -1911006168;
            continue;
          case 41:
            num1 = -1726572348;
            continue;
          case 42:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200C⁭⁮‮‍⁫⁬‭‪‍⁯⁮‏‏⁯⁮⁭⁪‮⁮‍‭⁪⁫‪⁯⁪‬⁫⁮‫⁯‭‏‪⁯‭​‭⁫‮("\t", playerState3 != null ? Game.\u200F‭⁮‫⁮‌‭‪‪‬‌⁬​⁫​⁬​‪‮​⁪‎​​⁭⁯‭‌‮‭‭⁭⁬⁭‎​⁯⁮⁯⁬‮((object) playerState3) : (string) null));
            num1 = -2136569164;
            continue;
          case 43:
            ++num5;
            num1 = -197042023;
            continue;
          case 44:
            int num15 = !flag9 ? -86035453 : (num15 = -792495180);
            num1 = num15 ^ (int) num2 * -905425396;
            continue;
          case 45:
            num1 = (int) num2 * 1268785653 ^ -1044256008;
            continue;
          case 46:
            ++index;
            num1 = -1929361613;
            continue;
          case 47:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1775334706 ^ 999146530;
            continue;
          case 48:
            num1 = -1605674681;
            continue;
          case 49:
            this._finished = true;
            num5 = 0;
            num1 = (int) num2 * -1315330490 ^ 1549997967;
            continue;
          case 50:
            card = this.DrawCard();
            flag1 = card.Impact < 0;
            num1 = -968107348;
            continue;
          case 51:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 52:
            flag2 = num5 == playerIndex;
            num1 = (int) num2 * -1232982205 ^ 1011719472;
            continue;
          case 53:
            num1 = (int) num2 * 986176792 ^ 565076660;
            continue;
          case 54:
            int num16;
            num1 = num16 = !this.Losers.Contains(num5) ? -782047380 : (num16 = -415611721);
            continue;
          case 55:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 1863170444 ^ 219749884;
            continue;
          case 56:
            num1 = -1420213401;
            continue;
          case 57:
            int num17 = playerState1.Resources < 0 ? -283403928 : (num17 = -84397317);
            num1 = num17 ^ (int) num2 * 69731113;
            continue;
          case 58:
            ++playerState1.Sprint;
            num1 = (int) num2 * -711443000 ^ 1384984749;
            continue;
          case 59:
            int num18 = !flag10 ? 1679882824 : (num18 = 414590462);
            num1 = num18 ^ (int) num2 * -739910631;
            continue;
          case 60:
            num1 = (int) num2 * -1671004508 ^ -528567293;
            continue;
          case 61:
            playerState2.State = State.Lose;
            num1 = -157634155;
            continue;
          case 62:
            int num19;
            num1 = num19 = flag3 ? -1687033635 : (num19 = -1004845811);
            continue;
          case 63:
            int num20 = !flag2 ? -879823802 : (num20 = -458239385);
            num1 = num20 ^ (int) num2 * -1869994321;
            continue;
          case 64:
            flag3 = true;
            num1 = (int) num2 * 543035186 ^ 1189066100;
            continue;
          case 65:
            num1 = -1380031444;
            continue;
          case 66:
            num1 = (int) num2 * 349638688 ^ 1864494151;
            continue;
          case 67:
            num1 = (int) num2 * -1372762624 ^ 1628643481;
            continue;
          case 68:
            goto label_1;
          case 69:
            num3 = card.Impact - player.PlannedForCard(card.Type);
            flag3 = num3 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -479178399 ^ 225864298;
            continue;
          case 70:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -1892916575 ^ -63996506;
            continue;
          case 71:
            num1 = (int) num2 * -1323294059 ^ 1499518944;
            continue;
          case 72:
            flag11 = playerState2.Resources >= 0;
            num1 = (int) num2 * -28366097 ^ 1596600475;
            continue;
          case 73:
            flag5 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = -104841384;
            continue;
          case 74:
            int num21 = !flag1 ? -56126755 : (num21 = -906391503);
            num1 = num21 ^ (int) num2 * 1712339723;
            continue;
          case 75:
            player = this.Players[playerIndex];
            num1 = (int) num2 * -1150361658 ^ -150424840;
            continue;
          case 76:
            num1 = (int) num2 * 1811495294 ^ 285207694;
            continue;
          case 77:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * 770190821 ^ 1687124393;
            continue;
          case 78:
            this.Losers.Add(index);
            num1 = (int) num2 * 245439329 ^ 1272577678;
            continue;
          case 79:
            flag6 = playerState1.Sprint < 0;
            num1 = -1527610416;
            continue;
          case 80:
            goto label_3;
          case 81:
            num1 = (int) num2 * 895600978 ^ 1326648004;
            continue;
          case 82:
            int num22 = flag4 ? -877406408 : (num22 = -976250296);
            num1 = num22 ^ (int) num2 * 1169070905;
            continue;
          default:
            goto label_88;
        }
        flag8 = num6 != 0;
        num1 = -1044369841;
      }
label_3:
      return;
label_88:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -53368545;
      Card card1;
      bool flag;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -579571731)) % 9U)
        {
          case 0:
            this.ShuffleCards();
            num1 = (int) num2 * -178659472 ^ -1764357452;
            continue;
          case 2:
            num1 = (int) num2 * -1909283957 ^ 1425025200;
            continue;
          case 3:
            int num3 = !flag ? 1920236052 : (num3 = 1520777555);
            num1 = num3 ^ (int) num2 * -896571584;
            continue;
          case 4:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 458421411 ^ 2044292220;
            continue;
          case 5:
            goto label_1;
          case 6:
            card1 = this._deck[0];
            num1 = -475692952;
            continue;
          case 7:
            card2 = card1;
            num1 = (int) num2 * -1935449553 ^ -116329080;
            continue;
          case 8:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 811572125 ^ -1030029591;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -2065257715;
      string str1;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -687029252)) % 9U)
        {
          case 0:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200F‭⁮‫⁮‌‭‪‪‬‌⁬​⁫​⁬​‪‮​⁪‎​​⁭⁯‭‌‮‭‭⁭⁬⁭‎​⁯⁮⁯⁬‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206F‎‮‏‫‮‫‭‮⁮​⁭⁯‪‮‌⁪‭⁮⁪‮⁯⁯⁭‏​⁪⁭⁮‏‏‎‎‌‭​‎‍⁮‎‮(strArray);
            num1 = -86360381;
            continue;
          case 1:
            num1 = (int) num2 * -1134889032 ^ -107510501;
            continue;
          case 2:
            str1 = "";
            index = 0;
            num1 = (int) num2 * -2047444671 ^ -891540831;
            continue;
          case 3:
            flag = index < this._playerStates.Length;
            num1 = -191789857;
            continue;
          case 4:
            int num3 = !flag ? 1436160900 : (num3 = 42214847);
            num1 = num3 ^ (int) num2 * 1174919214;
            continue;
          case 5:
            str2 = str1;
            num1 = (int) num2 * 408519107 ^ 1341614752;
            continue;
          case 6:
            goto label_1;
          case 8:
            ++index;
            num1 = (int) num2 * 525718957 ^ 1402307112;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
      string str = this.ToString(false);
label_1:
      int num1 = 964265712;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 440051566)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -727702750 ^ -1621329308;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -348450799;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2076088613)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            Game.\u206E‌⁪‏‬‌⁭‫‍​⁬⁮‍‏‫‍‬⁬⁭​‬⁭⁪‫‍⁫‎⁬⁪‮⁭⁬⁬‭‌‮‬⁯‬‌‮(this._buffer, Game.\u206E⁪‪⁯‭‮⁮‮‪‭⁭⁪‍‮‌​⁪⁬⁮‪‪⁯⁮‭​‬‬⁫‌⁯‫⁬‪‌⁯‏‏‬‫‮‮(Game.\u200F‭⁮‫⁮‌‭‪‪‬‌⁬​⁫​⁬​‪‮​⁪‎​​⁭⁯‭‌‮‭‭⁭⁬⁭‎​⁯⁮⁯⁬‮(text), more));
            num1 = (int) num2 * -2104979623 ^ 1395353621;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Random \u206E⁯‪⁭‪⁯‫‍‌⁪‏⁬‮⁪‭‪​​‫‎‪‪‭⁬⁭‎‮‬‬‪‭‭⁬‏‌⁫‮⁯‮‭‮([In] int obj0) => new Random(obj0);

    static string \u206D⁮‎⁭‍‪‭‭⁯⁭‍‭‮‮‏‏‎⁭‏‬‪⁮‮​‮‎‍⁯​⁭⁯‎‪‪‍⁮‌‎⁯‍‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200C⁭⁮‮‍⁫⁬‭‪‍⁯⁮‏‏⁯⁮⁭⁪‮⁮‍‭⁪⁫‪⁯⁪‬⁫⁮‫⁯‭‏‪⁯‭​‭⁫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200B‮‏‬​‫‍‮⁫‫⁯⁪⁭‏‮‮⁬‪⁮‭​‭‎‮‫⁪⁪⁬⁫⁫‫‪‏⁮‎⁫‭‏‪⁬‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206C‍‍⁫‪⁫‍⁬⁮‬⁫‫‮⁮⁮⁯⁭‫​⁫‬⁮‌‪‎‪⁭​‪‫⁫⁬⁫​‎‏‭⁭‫⁯‮([In] int obj0) => Math.Abs(obj0);

    static string \u200F‭⁮‫⁮‌‭‪‪‬‌⁬​⁫​⁬​‪‮​⁪‎​​⁭⁯‭‌‮‭‭⁭⁬⁭‎​⁯⁮⁯⁬‮([In] object obj0) => obj0.ToString();

    static string \u206F‎‮‏‫‮‫‭‮⁮​⁭⁯‪‮‌⁪‭⁮⁪‮⁯⁯⁭‏​⁪⁭⁮‏‏‎‎‌‭​‎‍⁮‎‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206E⁪‪⁯‭‮⁮‮‪‭⁭⁪‍‮‌​⁪⁬⁮‪‪⁯⁮‭​‬‬⁫‌⁯‫⁬‪‌⁯‏‏‬‫‮‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206E‌⁪‏‬‌⁭‫‍​⁬⁮‍‏‫‍‬⁬⁭​‬⁭⁪‫‍⁫‎⁬⁪‮⁭⁬⁬‭‌‮‬⁯‬‌‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
