// Decompiled with JetBrains decompiler
// Type: IEnumUnkn.Rules.AuthenticationBridgeRule
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Structs;
using RiskGame;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Windows.Controls;

namespace IEnumUnkn.Rules
{
  [Serializable]
  public class AuthenticationBridgeRule : IComparable<AuthenticationBridgeRule>
  {
    public readonly string _Pool;
    public readonly List<string> issuer;
    public Player info;
    public int process;
    public int factory;
    [NonSerialized]
    public Button composer;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public AuthenticationBridgeRule(string info, List<string> result, Button comp)
    {
      ListenerManager.InitStub();
      this.process = 0;
      this.factory = 0;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this._Pool = info ?? throw new ArgumentNullException("name");
      this.issuer = result ?? throw new ArgumentNullException("links");
      this.composer = comp ?? throw new ArgumentNullException("button");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public int CompareTo(AuthenticationBridgeRule var1) => string.Compare(this._Pool, var1._Pool);

    internal static bool InsertObject() => true;

    internal static bool WriteObject() => false;
  }
}
