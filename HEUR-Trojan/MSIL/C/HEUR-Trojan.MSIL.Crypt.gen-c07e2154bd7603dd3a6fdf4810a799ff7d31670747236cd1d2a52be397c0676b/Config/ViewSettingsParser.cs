// Decompiled with JetBrains decompiler
// Type: Cradiator.Config.ViewSettingsParser
// Assembly: FileOptio, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0135208B-21B4-457A-BFCD-FFD93FD8BA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c07e2154bd7603dd3a6fdf4810a799ff7d31670747236cd1d2a52be397c0676b.exe

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;

namespace Cradiator.Config
{
  public class ViewSettingsParser
  {
    private const string ProjectRegex = "project-regex";
    private const string CategoryRegex = "category-regex";
    private const string ServerRegex = "server-regex";
    private const string Url = "url";
    private const string Skin = "skin";
    private const string ViewName = "name";
    private const string ShowOnlyBroken = "showOnlyBroken";
    private const string ShowServerName = "showServerName";
    private const string ShowOutOfDate = "showOutOfDate";
    private const string OutOfDateDifferenceInMinutes = "outOfDateDifferenceInMinutes";
    private readonly XDocument _xdoc;

    public ViewSettingsParser(TextReader xml) => this._xdoc = XDocument.Parse(xml.ReadToEnd());

    public static ICollection<ViewSettings> Read(string xmlFile)
    {
      using (StreamReader xml = new StreamReader(xmlFile))
        return new ViewSettingsParser((TextReader) xml).ParseXml();
    }

    public ICollection<ViewSettings> ParseXml() => (ICollection<ViewSettings>) new ReadOnlyCollection<ViewSettings>((IList<ViewSettings>) this._xdoc.Elements((XName) "configuration").Elements<XElement>((XName) "views").Elements<XElement>((XName) "view").Select<XElement, ViewSettings>((Func<XElement, ViewSettings>) (view => new ViewSettings()
    {
      URL = view.Attribute((XName) "url").Value,
      ProjectNameRegEx = view.Attribute((XName) "project-regex").Value,
      CategoryRegEx = view.Attribute((XName) "category-regex").Value,
      ServerNameRegEx = view.Attribute((XName) "server-regex").Value,
      SkinName = view.Attribute((XName) "skin").Value,
      ViewName = view.Attribute((XName) "name").Value,
      ShowOnlyBroken = bool.Parse(view.Attribute((XName) "showOnlyBroken").Value),
      ShowServerName = bool.Parse(view.Attribute((XName) "showServerName").Value),
      ShowOutOfDate = bool.Parse(view.Attribute((XName) "showOutOfDate").Value),
      OutOfDateDifferenceInMinutes = int.Parse(view.Attribute((XName) "outOfDateDifferenceInMinutes").Value)
    })).ToList<ViewSettings>());

    public static void Modify(string xmlFile, ViewSettings viewSettings)
    {
      string updatedXml;
      using (StreamReader xml = new StreamReader(xmlFile))
        updatedXml = new ViewSettingsParser((TextReader) xml).CreateUpdatedXml((IViewSettings) viewSettings);
      using (StreamWriter streamWriter = new StreamWriter(xmlFile))
        streamWriter.Write(updatedXml);
    }

    public string CreateUpdatedXml(IViewSettings settings)
    {
      XElement xelement = this._xdoc.Elements((XName) "configuration").Elements<XElement>((XName) "views").Elements<XElement>((XName) "view").First<XElement>();
      xelement.Attribute((XName) "url").Value = settings.URL;
      xelement.Attribute((XName) "project-regex").Value = settings.ProjectNameRegEx;
      xelement.Attribute((XName) "category-regex").Value = settings.CategoryRegEx;
      xelement.Attribute((XName) "server-regex").Value = settings.ServerNameRegEx;
      xelement.Attribute((XName) "skin").Value = settings.SkinName;
      xelement.Attribute((XName) "name").Value = settings.ViewName;
      xelement.Attribute((XName) "showOnlyBroken").Value = settings.ShowOnlyBroken.ToString();
      xelement.Attribute((XName) "showServerName").Value = settings.ShowServerName.ToString();
      xelement.Attribute((XName) "showOutOfDate").Value = settings.ShowOutOfDate.ToString();
      xelement.Attribute((XName) "outOfDateDifferenceInMinutes").Value = settings.OutOfDateDifferenceInMinutes.ToString();
      StringBuilder stringBuilder = new StringBuilder();
      StringBuilder output = stringBuilder;
      using (XmlWriter writer = XmlWriter.Create(output, new XmlWriterSettings()
      {
        OmitXmlDeclaration = true,
        NewLineHandling = NewLineHandling.None,
        Indent = true
      }))
        this._xdoc.WriteTo(writer);
      return stringBuilder.ToString();
    }
  }
}
