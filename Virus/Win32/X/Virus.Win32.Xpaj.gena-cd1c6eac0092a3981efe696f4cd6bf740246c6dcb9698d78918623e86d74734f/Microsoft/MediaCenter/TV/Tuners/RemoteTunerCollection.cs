// Decompiled with JetBrains decompiler
// Type: Microsoft.MediaCenter.TV.Tuners.RemoteTunerCollection
// Assembly: Microsoft.MediaCenter.TV.Tuners.Interop, Version=6.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 4545DFBD-7834-4511-B0E8-46F2D6BF39B8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Virus.Win32.Xpaj.gena-cd1c6eac0092a3981efe696f4cd6bf740246c6dcb9698d78918623e86d74734f.exe

using ATL;
using msclr;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Microsoft.MediaCenter.TV.Tuners
{
  public class RemoteTunerCollection : MTASafeComWrapper, ITunerCollection
  {
    private object m_SyncRoot;
    private bool m_bEnumRetrieved;
    private TunerManager m_Manager;

    private unsafe object TPClone()
    {
      CComPtr\u003CIEnumRecorder\u003E ptrIenumRecorder1;
      SafeComWrapper.GetNativePtr\u003CIEnumRecorder\u003E(&ptrIenumRecorder1, (SafeComWrapper) this);
      object obj;
      // ISSUE: fault handler
      try
      {
        CComPtr\u003CIEnumRecorder\u003E ptrIenumRecorder2;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ptrIenumRecorder2 = 0;
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num = ^(int&) ref ptrIenumRecorder1;
          ref CComPtr\u003CIEnumRecorder\u003E local = ref ptrIenumRecorder2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, IEnumRecorder**)>) *(int*) (*(int*) ^(int&) ref ptrIenumRecorder1 + 24))((IEnumRecorder**) num, (IntPtr) ref local));
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          obj = (object) new RemoteTunerCollection((IEnumRecorder*) ^(int&) ref ptrIenumRecorder2, this.m_Manager);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIenumRecorder2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIEnumRecorder\u003E*) &ptrIenumRecorder2);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIenumRecorder1);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIEnumRecorder\u003E*) &ptrIenumRecorder1);
      return obj;
    }

    private unsafe RemoteTunerEnumerator TPBuildEnumerator()
    {
      CComPtr\u003CIUnknown\u003E ccomPtrIunknown;
      CComPtr\u003CIUnknown\u003E* ptr = this.GetPtr(&ccomPtrIunknown);
      CComQIPtr\u003CIEnumRecorder\u002C\u0026_GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa\u003E obj;
      // ISSUE: fault handler
      try
      {
        IUnknown* lp = (IUnknown*) *(int*) ptr;
        \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIEnumRecorder\u002C\u0026_GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa\u003E\u002E\u007Bctor\u007D(&obj, lp);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIunknown);
      }
      RemoteTunerEnumerator remoteTunerEnumerator;
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIUnknown\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIUnknown\u003E*) &ccomPtrIunknown);
        CComPtr\u003CIEnumRecorder\u003E ptrIenumRecorder;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ptrIenumRecorder = 0;
        // ISSUE: fault handler
        try
        {
          if (this.m_bEnumRetrieved)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num1 = ^(int&) ref obj;
            ref CComPtr\u003CIEnumRecorder\u003E local = ref ptrIenumRecorder;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a function pointer type
            // ISSUE: function pointer call
            MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, IEnumRecorder**)>) *(int*) (*(int*) ^(int&) ref obj + 24))((IEnumRecorder**) num1, (IntPtr) ref local));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num2 = ^(int&) ref ptrIenumRecorder;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a function pointer type
            // ISSUE: function pointer call
            MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr)>) *(int*) (*(int*) ^(int&) ref ptrIenumRecorder + 20))((IntPtr) num2));
            this.m_bEnumRetrieved = true;
          }
          else
            \u003CModule\u003E.ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u003D(&ptrIenumRecorder, (CComPtr\u003CIEnumRecorder\u003E*) &obj);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          remoteTunerEnumerator = new RemoteTunerEnumerator((IEnumRecorder*) ^(int&) ref ptrIenumRecorder, this.m_Manager);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIenumRecorder);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIEnumRecorder\u003E*) &ptrIenumRecorder);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIEnumRecorder\u002C\u0026_GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa\u003E\u002E\u007Bdtor\u007D), (void*) &obj);
      }
      \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIEnumRecorder\u002C\u0026_GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa\u003E\u002E\u007Bdtor\u007D(&obj);
      return remoteTunerEnumerator;
    }

    private RemoteTunerEnumerator BuildEnumerator() => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARemoteTunerEnumerator\u0020\u005E\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARemoteTunerEnumerator\u0020\u005E\u003E(new d0<RemoteTunerEnumerator>(this.TPBuildEnumerator).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::RemoteTunerCollection::BuildEnumerator");

    internal unsafe RemoteTunerCollection(IntPtr ptr)
      : base((_GUID*) &\u003CModule\u003E._GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa, (IUnknown*) ptr.ToPointer())
    {
    }

    internal unsafe RemoteTunerCollection(IEnumRecorder* pCollection, TunerManager manager)
    {
      this.m_Manager = manager;
      // ISSUE: explicit constructor call
      base.\u002Ector((_GUID*) &\u003CModule\u003E._GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa, (IUnknown*) pCollection);
    }

    private void \u007ERemoteTunerCollection()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      TunerManager manager;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        manager = this.m_Manager;
        this.m_Manager = (TunerManager) null;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      manager?.Dispose();
    }

    public override unsafe Guid PrimaryIID => *(Guid*) (int) &\u003CModule\u003E._GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa;

    IEnumerator<Tuner> IEnumerable<Tuner>.Generic_GetEnumerator() => (IEnumerator<Tuner>) this.BuildEnumerator();

    IEnumerator IEnumerable.IEnumerable_GetEnumerator() => (IEnumerator) this.BuildEnumerator();

    public virtual void Add(Tuner t) => throw new NotSupportedException();

    public virtual void Clear() => throw new NotSupportedException();

    [return: MarshalAs(UnmanagedType.U1)]
    public virtual bool Contains(Tuner t) => throw new NotSupportedException();

    [return: MarshalAs(UnmanagedType.U1)]
    public virtual bool Remove(Tuner t) => throw new NotSupportedException();

    public virtual void CopyTo(Array a, int i)
    {
      IEnumerator enumerator = this.IEnumerable_GetEnumerator();
      int index = i;
      if (enumerator.MoveNext())
      {
        do
        {
          SafeComWrapper current = (SafeComWrapper) enumerator.Current;
          if (current != null && !current.IsInvalid)
          {
            a.SetValue((object) current, index);
            ++index;
          }
          else
            goto label_4;
        }
        while (enumerator.MoveNext());
        return;
label_4:
        throw new ApplicationException("unexpected failure to clone tuner collection member");
      }
    }

    public virtual void CopyTo(Tuner[] a, int i)
    {
      IEnumerator<Tuner> enumerator = this.Generic_GetEnumerator();
      int index = i;
      if (!enumerator.MoveNext())
        return;
      do
      {
        a[index] = enumerator.Current;
        ++index;
      }
      while (enumerator.MoveNext());
    }

    public virtual int Count => throw new NotSupportedException();

    public virtual bool IsReadOnly
    {
      [return: MarshalAs(UnmanagedType.U1)] get => true;
    }

    public virtual bool IsSynchronized
    {
      [return: MarshalAs(UnmanagedType.U1)] get => false;
    }

    public virtual object SyncRoot => this.m_SyncRoot;

    public virtual object Clone() => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u0020\u005E\u002CSystem\u003A\u003AObject\u0020\u005E\u003E(new d0<object>(this.TPClone).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::RemoteTunerCollection::Clone");

    protected override void Dispose([MarshalAs(UnmanagedType.U1)] bool _param1)
    {
      if (_param1)
      {
        try
        {
          this.\u007ERemoteTunerCollection();
        }
        finally
        {
          base.Dispose(true);
        }
      }
      else
        base.Dispose(false);
    }
  }
}
