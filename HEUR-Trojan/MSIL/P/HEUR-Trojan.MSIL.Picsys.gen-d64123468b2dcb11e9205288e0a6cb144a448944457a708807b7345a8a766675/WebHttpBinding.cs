// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.WebHttpBinding
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.ComponentModel;
using System.Configuration;
using System.Runtime.InteropServices;
using System.ServiceModel.Channels;
using System.ServiceModel.Configuration;
using System.Text;
using System.Xml;

namespace System.ServiceModel
{
  [ComVisible(false)]
  public class WebHttpBinding : Binding, IBindingRuntimePreferences
  {
    private HttpsTransportBindingElement httpsTransportBindingElement;
    private HttpTransportBindingElement httpTransportBindingElement;
    private WebHttpSecurity security = new WebHttpSecurity();
    private WebMessageEncodingBindingElement webMessageEncodingBindingElement;

    public WebHttpBinding() => this.Initialize();

    public WebHttpBinding(string configurationName)
      : this()
    {
      this.ApplyConfiguration(configurationName);
    }

    public WebHttpBinding(WebHttpSecurityMode securityMode)
    {
      this.Initialize();
      this.security.Mode = securityMode;
    }

    [DefaultValue(false)]
    public bool AllowCookies
    {
      get => this.httpTransportBindingElement.AllowCookies;
      set
      {
        this.httpTransportBindingElement.AllowCookies = value;
        this.httpsTransportBindingElement.AllowCookies = value;
      }
    }

    [DefaultValue(false)]
    public bool BypassProxyOnLocal
    {
      get => this.httpTransportBindingElement.BypassProxyOnLocal;
      set
      {
        this.httpTransportBindingElement.BypassProxyOnLocal = value;
        this.httpsTransportBindingElement.BypassProxyOnLocal = value;
      }
    }

    public EnvelopeVersion EnvelopeVersion => EnvelopeVersion.None;

    [DefaultValue(HostNameComparisonMode.StrongWildcard)]
    public HostNameComparisonMode HostNameComparisonMode
    {
      get => this.httpTransportBindingElement.HostNameComparisonMode;
      set
      {
        this.httpTransportBindingElement.HostNameComparisonMode = value;
        this.httpsTransportBindingElement.HostNameComparisonMode = value;
      }
    }

    [DefaultValue(524288)]
    public long MaxBufferPoolSize
    {
      get => this.httpTransportBindingElement.MaxBufferPoolSize;
      set
      {
        this.httpTransportBindingElement.MaxBufferPoolSize = value;
        this.httpsTransportBindingElement.MaxBufferPoolSize = value;
      }
    }

    [DefaultValue(65536)]
    public int MaxBufferSize
    {
      get => this.httpTransportBindingElement.MaxBufferSize;
      set
      {
        this.httpTransportBindingElement.MaxBufferSize = value;
        this.httpsTransportBindingElement.MaxBufferSize = value;
      }
    }

    [DefaultValue(65536)]
    public long MaxReceivedMessageSize
    {
      get => this.httpTransportBindingElement.MaxReceivedMessageSize;
      set
      {
        this.httpTransportBindingElement.MaxReceivedMessageSize = value;
        this.httpsTransportBindingElement.MaxReceivedMessageSize = value;
      }
    }

    [DefaultValue(null)]
    public Uri ProxyAddress
    {
      get => this.httpTransportBindingElement.ProxyAddress;
      set
      {
        this.httpTransportBindingElement.ProxyAddress = value;
        this.httpsTransportBindingElement.ProxyAddress = value;
      }
    }

    public XmlDictionaryReaderQuotas ReaderQuotas
    {
      get => this.webMessageEncodingBindingElement.ReaderQuotas;
      set
      {
        if (value == null)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (value));
        value.CopyTo(this.webMessageEncodingBindingElement.ReaderQuotas);
      }
    }

    public override string Scheme => this.GetTransport().Scheme;

    public WebHttpSecurity Security
    {
      get => this.security;
      set => this.security = value != null ? value : throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (value));
    }

    [DefaultValue(TransferMode.Buffered)]
    public TransferMode TransferMode
    {
      get => this.httpTransportBindingElement.TransferMode;
      set
      {
        this.httpTransportBindingElement.TransferMode = value;
        this.httpsTransportBindingElement.TransferMode = value;
      }
    }

    [DefaultValue(true)]
    public bool UseDefaultWebProxy
    {
      get => this.httpTransportBindingElement.UseDefaultWebProxy;
      set
      {
        this.httpTransportBindingElement.UseDefaultWebProxy = value;
        this.httpsTransportBindingElement.UseDefaultWebProxy = value;
      }
    }

    [TypeConverter(typeof (EncodingConverter))]
    public Encoding WriteEncoding
    {
      get => this.webMessageEncodingBindingElement.WriteEncoding;
      set => this.webMessageEncodingBindingElement.WriteEncoding = value;
    }

    public WebContentTypeMapper ContentTypeMapper
    {
      get => this.webMessageEncodingBindingElement.ContentTypeMapper;
      set => this.webMessageEncodingBindingElement.ContentTypeMapper = value;
    }

    public bool CrossDomainScriptAccessEnabled
    {
      get => this.webMessageEncodingBindingElement.CrossDomainScriptAccessEnabled;
      set => this.webMessageEncodingBindingElement.CrossDomainScriptAccessEnabled = value;
    }

    bool IBindingRuntimePreferences.ReceiveSynchronously => false;

    public override IChannelFactory<TChannel> BuildChannelFactory<TChannel>(
      BindingParameterCollection parameters)
    {
      if ((this.security.Mode == WebHttpSecurityMode.Transport || this.security.Mode == WebHttpSecurityMode.TransportCredentialOnly) && this.security.Transport.ClientCredentialType == HttpClientCredentialType.InheritedFromHost)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR.GetString("HttpClientCredentialTypeInvalid", (object) this.security.Transport.ClientCredentialType)));
      return base.BuildChannelFactory<TChannel>(parameters);
    }

    public override BindingElementCollection CreateBindingElements()
    {
      BindingElementCollection elementCollection = new BindingElementCollection();
      elementCollection.Add((BindingElement) this.webMessageEncodingBindingElement);
      elementCollection.Add((BindingElement) this.GetTransport());
      return elementCollection.Clone();
    }

    private void ApplyConfiguration(string configurationName) => (WebHttpBindingCollectionElement.GetBindingCollectionElement().Bindings[(object) configurationName] ?? throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ConfigurationErrorsException(SR2.GetString(SR2.ConfigInvalidBindingConfigurationName, (object) configurationName, (object) "webHttpBinding")))).ApplyConfiguration((Binding) this);

    private TransportBindingElement GetTransport()
    {
      if (this.security.Mode == WebHttpSecurityMode.Transport)
      {
        this.security.EnableTransportSecurity(this.httpsTransportBindingElement);
        return (TransportBindingElement) this.httpsTransportBindingElement;
      }
      if (this.security.Mode == WebHttpSecurityMode.TransportCredentialOnly)
      {
        this.security.EnableTransportAuthentication(this.httpTransportBindingElement);
        return (TransportBindingElement) this.httpTransportBindingElement;
      }
      this.security.DisableTransportAuthentication(this.httpTransportBindingElement);
      return (TransportBindingElement) this.httpTransportBindingElement;
    }

    private void Initialize()
    {
      this.httpTransportBindingElement = new HttpTransportBindingElement();
      this.httpsTransportBindingElement = new HttpsTransportBindingElement();
      this.httpTransportBindingElement.ManualAddressing = true;
      this.httpsTransportBindingElement.ManualAddressing = true;
      this.webMessageEncodingBindingElement = new WebMessageEncodingBindingElement();
      this.webMessageEncodingBindingElement.MessageVersion = MessageVersion.None;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public bool ShouldSerializeReaderQuotas() => !EncoderDefaults.IsDefaultReaderQuotas(this.ReaderQuotas);

    [EditorBrowsable(EditorBrowsableState.Never)]
    public bool ShouldSerializeWriteEncoding() => this.WriteEncoding != TextEncoderDefaults.Encoding;

    [EditorBrowsable(EditorBrowsableState.Never)]
    public bool ShouldSerializeSecurity() => this.Security.InternalShouldSerialize();

    internal static class WebHttpBindingConfigurationStrings
    {
      internal const string WebHttpBindingCollectionElementName = "webHttpBinding";
    }
  }
}
