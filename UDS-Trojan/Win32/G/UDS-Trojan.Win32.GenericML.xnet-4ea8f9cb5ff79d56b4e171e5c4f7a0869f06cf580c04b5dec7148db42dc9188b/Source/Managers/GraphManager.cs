// Decompiled with JetBrains decompiler
// Type: Path_Finder.Source.Managers.GraphManager
// Assembly: TypeDelega, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FEF18FA9-51E7-447C-8FC7-9441C6E3C0DE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4ea8f9cb5ff79d56b4e171e5c4f7a0869f06cf580c04b5dec7148db42dc9188b.exe

using GraphSharp.Controls;
using Path_Finder.DataTypes;
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Threading;

namespace Path_Finder.Source.Managers
{
  public class GraphManager
  {
    public MainWindow window;

    public GraphManager() => this.window = (MainWindow) null;

    public GraphManager(MainWindow _window) => this.window = _window;

    public GraphCity CreateGraph(
      CitiesLocations citiesLocations,
      CitiesConnections citiesConnections)
    {
      GraphCity graph = new GraphCity();
      Coordinates coordinates1;
      foreach (City key in citiesLocations.locations.Keys)
      {
        citiesLocations.locations.TryGetValue(key, out coordinates1);
        graph.AddVertex(new VertexCity(new City(key), new Coordinates(coordinates1)));
      }
      List<City> cityList = new List<City>();
      foreach (City key in citiesConnections.connections.Keys)
      {
        citiesLocations.locations.TryGetValue(key, out coordinates1);
        citiesConnections.connections.TryGetValue(key, out cityList);
        foreach (City city in cityList)
        {
          Coordinates coordinates2;
          citiesLocations.locations.TryGetValue(city, out coordinates2);
          graph.AddEdge(new EdgeCity(new VertexCity(new City(key), new Coordinates(coordinates1)), new VertexCity(new City(city), new Coordinates(coordinates2))));
        }
      }
      return graph;
    }

    public void GetCurrentGraph(GraphLayoutCity graphLayout, ref CitiesLocations citiesLocations)
    {
      VertexControl vertexControl1 = new VertexControl();
      foreach (VertexCity vertex in graphLayout.Graph.Vertices)
      {
        Coordinates coordinates;
        citiesLocations.locations.TryGetValue(vertex.City, out coordinates);
        VertexControl vertexControl2 = graphLayout.GetVertexControl(vertex);
        int x = (int) GraphCanvas.GetX((DependencyObject) vertexControl2);
        int y = (int) GraphCanvas.GetY((DependencyObject) vertexControl2);
        coordinates.setX(x);
        coordinates.setY(y);
      }
    }

    public void EstablishCoordinates(
      ref GraphLayoutCity graphLayout,
      CitiesLocations citiesLocations)
    {
      VertexControl vertexControl1 = new VertexControl();
      if (citiesLocations == null)
        return;
      foreach (VertexCity vertex in graphLayout.Graph.Vertices)
      {
        Coordinates coordinates;
        citiesLocations.locations.TryGetValue(vertex.City, out coordinates);
        vertex.CityCoordinates.setX(coordinates.getX());
        vertex.CityCoordinates.setY(coordinates.getY());
        VertexControl vertexControl2 = graphLayout.GetVertexControl(vertex);
        GraphCanvas.SetX((DependencyObject) vertexControl2, (double) vertex.CityCoordinates.getX());
        GraphCanvas.SetY((DependencyObject) vertexControl2, (double) vertex.CityCoordinates.getY());
      }
    }

    public void UpdateVertexInfo(ref VertexCity vertex, ref GraphLayoutCity graphLayout)
    {
      if (vertex == null)
        return;
      VertexControl vertexControl = graphLayout.GetVertexControl(vertex);
      if (vertexControl != null)
      {
        double x = GraphCanvas.GetX((DependencyObject) vertexControl);
        double y = GraphCanvas.GetY((DependencyObject) vertexControl);
        if (x > 0.0 && x < 800.0 && y > 0.0 && y < 800.0)
        {
          vertex.CityCoordinates.setX((int) x);
          vertex.CityCoordinates.setY((int) y);
        }
        GraphCanvas.SetX((DependencyObject) vertexControl, (double) vertex.CityCoordinates.getX());
        GraphCanvas.SetY((DependencyObject) vertexControl, (double) vertex.CityCoordinates.getY());
      }
    }

    public void DeleteCity(VertexCity cityToDelete, ref GraphLayoutCity graphLayout) => graphLayout.Graph.RemoveVertex(cityToDelete);

    public void SetStyle(VertexCity vertex, GraphLayoutCity graphLayout, Style style)
    {
      VertexControl vertexControl = graphLayout.GetVertexControl(vertex);
      if (vertexControl == null)
        return;
      ((FrameworkElement) vertexControl).Style = style;
    }

    public void SetStyleToAll(GraphLayoutCity graphLayout, Style style)
    {
      foreach (VertexCity vertex in graphLayout.Graph.Vertices)
      {
        VertexControl vertexControl = graphLayout.GetVertexControl(vertex);
        if (vertexControl != null)
          ((FrameworkElement) vertexControl).Style = style;
      }
    }

    public void MarkCity(City city, Style style, GraphLayoutCity graphLayout) => ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() => this.SetStyle(new VertexCity(city), graphLayout, style)), DispatcherPriority.Normal, (object[]) null);

    public void MarkCities(List<City> cities, Style style, GraphLayoutCity graphLayout)
    {
      foreach (City city in cities)
        this.MarkCity(city, style, graphLayout);
    }

    public void MarkEdge(City startNode, City endNode, GraphLayoutCity graphLayout)
    {
      EdgeCity edge = new EdgeCity(new VertexCity(startNode), new VertexCity(endNode));
      ((DispatcherObject) graphLayout).Dispatcher.Invoke((Delegate) (() => graphLayout.HighlightEdge(edge, (object) null)), DispatcherPriority.Normal, (object[]) null);
    }

    public void MarkEdges(City startNode, List<City> endNodes, GraphLayoutCity graphLayout)
    {
      foreach (City endNode in endNodes)
        this.MarkEdge(startNode, endNode, graphLayout);
    }

    public void UnmarkCity(City city, GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "DefaultCityStyle"];
        this.SetStyle(new VertexCity(city), graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void UnmarkCities(List<City> cities, GraphLayoutCity graphLayout)
    {
      foreach (City city in cities)
        this.UnmarkCity(city, graphLayout);
    }

    public void UnmarkEdge(City startNode, City endNode, GraphLayoutCity graphLayout)
    {
      EdgeCity edge = new EdgeCity(new VertexCity(startNode), new VertexCity(endNode));
      ((DispatcherObject) graphLayout).Dispatcher.Invoke((Delegate) (() => graphLayout.RemoveHighlightFromEdge(edge)), DispatcherPriority.Normal, (object[]) null);
    }

    public void UnmarkEdges(City startNode, List<City> endNodes, GraphLayoutCity graphLayout)
    {
      foreach (City endNode in endNodes)
        this.UnmarkEdge(startNode, endNode, graphLayout);
    }

    public void UnmarkAllCities(GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "DefaultCityStyle"];
        this.SetStyleToAll(graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void UnmarkAllEdges(GraphLayoutCity graphLayout)
    {
      EdgeControl edgeControl = new EdgeControl();
      foreach (EdgeCity highlightedEdge in graphLayout.HighlightedEdges)
      {
        EdgeCity edge = highlightedEdge;
        ((DispatcherObject) graphLayout).Dispatcher.Invoke((Delegate) (() => graphLayout.RemoveHighlightFromEdge(edge)), DispatcherPriority.Normal, (object[]) null);
      }
    }

    public void MarkStartCity(City city, GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "StartCityStyle"];
        this.SetStyle(new VertexCity(city), graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void MarkFinalCity(City city, GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "FinalCityStyle"];
        this.SetStyle(new VertexCity(city), graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void MarkBestCity(City city, GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "BestCityStyle"];
        this.SetStyle(new VertexCity(city), graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void MarkCheckedCity(City city, GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "CheckedCityStyle"];
        this.SetStyle(new VertexCity(city), graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void MarkCityToExplore(City city, GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "ExploredCityStyle"];
        this.SetStyle(new VertexCity(city), graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void MarkRejectedCity(City city, GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "RejectedCityStyle"];
        this.SetStyle(new VertexCity(city), graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void MarkUpdatedCity(City city, GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "UpdatedCityStyle"];
        this.SetStyle(new VertexCity(city), graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void MarkAddedCity(City city, GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "AddedCityStyle"];
        this.SetStyle(new VertexCity(city), graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void MarkPathCity(City city, GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "PathCityStyle"];
        this.SetStyle(new VertexCity(city), graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void MarkFoundCity(City city, GraphLayoutCity graphLayout)
    {
      Style style = (Style) null;
      ((DispatcherObject) this.window).Dispatcher.Invoke((Delegate) (() =>
      {
        style = (Style) ((FrameworkElement) this.window).Resources[(object) "FoundCityStyle"];
        this.SetStyle(new VertexCity(city), graphLayout, style);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void MarkAllFoundCities(List<City> cities, GraphLayoutCity graphLayout)
    {
      foreach (City city in cities)
        this.MarkFoundCity(city, graphLayout);
    }

    public void MarkAllCitiesToExplore(List<City> cities, GraphLayoutCity graphLayout)
    {
      foreach (City city in cities)
        this.MarkCityToExplore(city, graphLayout);
    }

    public void MarkAllCheckedCities(List<City> cities, GraphLayoutCity graphLayout)
    {
      foreach (City city in cities)
        this.MarkCheckedCity(city, graphLayout);
    }

    public void MarkPath(List<City> path, GraphLayoutCity graphLayout)
    {
      for (int index = 0; index < path.Count - 1; ++index)
      {
        this.MarkPathCity(path[index], graphLayout);
        this.MarkPathCity(path[index + 1], graphLayout);
        this.MarkEdge(path[index], path[index + 1], graphLayout);
      }
    }
  }
}
