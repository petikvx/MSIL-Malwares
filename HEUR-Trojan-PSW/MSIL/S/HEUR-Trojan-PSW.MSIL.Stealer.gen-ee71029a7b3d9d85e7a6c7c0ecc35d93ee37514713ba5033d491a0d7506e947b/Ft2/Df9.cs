// Decompiled with JetBrains decompiler
// Type: Ft2.Df9
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using An9;
using c0T;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Drawing;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using x3Y;
using x7X;
using z0R5;

namespace Ft2
{
  [DesignerGenerated]
  public class Df9 : Form
  {
    private IContainer Ⴓ;
    [AccessedThroughProperty("Ⴄ")]
    private DataGridView Ⴐ;
    [AccessedThroughProperty("Ⴍ")]
    private Label Ⴀ;

    public Df9()
    {
      this.Load += new EventHandler(this.Er3);
      this.i0T();
    }

    protected virtual void t7J([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.Ⴓ == null)
          return;
        this.Ⴓ.Dispose();
      }
      finally
      {
        this.Dispose(obj0);
      }
    }

    private void i0T()
    {
      this.Ⴄ = new DataGridView();
      this.Ⴍ = new Label();
      ((ISupportInitialize) this.Ⴄ).BeginInit();
      this.SuspendLayout();
      this.Ⴄ.AllowUserToAddRows = false;
      this.Ⴄ.AllowUserToDeleteRows = false;
      this.Ⴄ.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.Ⴄ.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.Ⴄ.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells;
      this.Ⴄ.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.Ⴄ.Location = new Point(15, 89);
      this.Ⴄ.Margin = new Padding(4, 5, 4, 5);
      this.Ⴄ.Name = "dgv";
      this.Ⴄ.ReadOnly = true;
      this.Ⴄ.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      this.Ⴄ.Size = new Size(871, 442);
      this.Ⴄ.TabIndex = 13;
      this.Ⴍ.AutoSize = true;
      this.Ⴍ.Font = new Font("Calibri", 16.2f, FontStyle.Bold | FontStyle.Underline, GraphicsUnit.Point, (byte) 0);
      this.Ⴍ.Location = new Point(310, 28);
      this.Ⴍ.Name = "Label1";
      this.Ⴍ.Size = new Size(285, 40);
      this.Ⴍ.TabIndex = 14;
      this.Ⴍ.Text = "Update Attendance";
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.Tan;
      this.ClientSize = new Size(900, 562);
      this.Controls.Add((Control) this.Ⴍ);
      this.Controls.Add((Control) this.Ⴄ);
      this.Margin = new Padding(3, 4, 3, 4);
      this.Name = "ႤႤ";
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "UpdateAttendance";
      ((ISupportInitialize) this.Ⴄ).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual DataGridView Ⴄ
    {
      get => this.Ⴐ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new DataGridViewCellEventHandler(this.De9);
        Control ⴐ1 = (Control) this.Ⴐ;
        if ((DataGridView) ⴐ1 != null)
          (ⴐ1 as DataGridView).CellDoubleClick -= (DataGridViewCellEventHandler) multicastDelegate;
        this.Ⴐ = value;
        Control ⴐ2 = (Control) this.Ⴐ;
        if (!(ⴐ2 is DataGridView))
          return;
        ((DataGridView) ⴐ2).CellDoubleClick += multicastDelegate as DataGridViewCellEventHandler;
      }
    }

    internal virtual Label Ⴍ
    {
      get => this.Ⴀ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴀ = value;
    }

    private void d4P()
    {
      Table<Ap0> ⴍ = new Tt1().Ⴍ;
      object obj1 = (object) Expression.Parameter(typeof (Ap0), "a");
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: field reference
      Expression<Func<Ap0, bool>> predicate = Expression.Lambda<Func<Ap0, bool>>((Expression) Expression.And((Expression) Expression.NotEqual((Expression) Expression.Call((Expression) null, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Operators.CompareString)), new Expression[3]
      {
        (Expression) Expression.Convert((Expression) Expression.Call((Expression) Expression.Property((Expression) (obj1 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.Be7))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (string.get_Chars)), (Expression) Expression.Constant((object) 0, typeof (int))), typeof (string), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Conversions.ToString))),
        (Expression) Expression.Constant((object) "m", typeof (string)),
        (Expression) Expression.Constant((object) false, typeof (bool))
      }), (Expression) Expression.Constant((object) 0, typeof (int)), false, (MethodInfo) null), (Expression) Expression.NotEqual((Expression) Expression.Call((Expression) null, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Operators.CompareString)), new Expression[3]
      {
        (Expression) Expression.Property((Expression) (obj1 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.Be7))),
        (Expression) Expression.Field((Expression) null, FieldInfo.GetFieldFromHandle(__fieldref (Ec63.Ⴅ))),
        (Expression) Expression.Constant((object) false, typeof (bool))
      }), (Expression) Expression.Constant((object) 0, typeof (int)), false, (MethodInfo) null)), (ParameterExpression) obj1);
      IQueryable<Ap0> source = ⴍ.Where<Ap0>(predicate);
      object obj2 = (object) Expression.Parameter(typeof (Ap0), "a");
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: type reference
      Expression<Func<Ap0, f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>>> selector = Expression.Lambda<Func<Ap0, f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>>>((Expression) Expression.New((ConstructorInfo) MethodBase.GetMethodFromHandle(__methodref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.\u002Ector), __typeref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (IEnumerable<Expression>) new Expression[7]
      {
        (Expression) Expression.Property((Expression) obj2, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.x8N))),
        (Expression) Expression.Property((Expression) (obj2 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.Be7))),
        (Expression) Expression.Property((Expression) obj2, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.Nk3))),
        (Expression) Expression.Property((Expression) (obj2 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.w2G))),
        (Expression) Expression.Property((Expression) (obj2 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.Ad2))),
        (Expression) Expression.Property((Expression) (obj2 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.a0H))),
        (Expression) Expression.Property((Expression) (obj2 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.n3E)))
      }, (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴗ), __typeref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴈ), __typeref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴃ), __typeref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴓ), __typeref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴅ), __typeref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴀ), __typeref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴐ), __typeref (f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>))), (ParameterExpression) obj2);
      this.Ⴄ.DataSource = (object) source.Select<Ap0, f0A<string, string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>>(selector);
    }

    private void Er3([In] object obj0, [In] EventArgs obj1) => this.d4P();

    private void De9([In] object obj0, [In] DataGridViewCellEventArgs obj1)
    {
      int rowIndex = obj1.RowIndex;
      if (rowIndex <= -1)
        return;
      En6.Ⴈ.Ⴍ.ႳႰ = Conversions.ToString(this.Ⴄ.Rows[rowIndex].Cells[0].Value);
      int num = (int) En6.Ⴈ.Ⴍ.ShowDialog((IWin32Window) this);
      this.d4P();
    }

    internal sealed class q5Q
    {
      internal Label Ⴍ;
      internal Label Ⴓ;
      internal DataGridView Ⴈ;
      internal Button Ⴐ;

      internal q5Q()
      {
      }
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct d9F
    {
      internal PropertyChangingEventHandler Ⴈ;
      internal PropertyChangedEventHandler Ⴐ;
    }
  }
}
