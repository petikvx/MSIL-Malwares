// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.Planet
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using botDebug;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace FannyHeirdooBot
{
  [DebuggerDisplay("Id: {planetID} Owner: {Owner} Ships: {NumShips} Grow: {growthRate}")]
  public class Planet : IPlanet
  {
    public int ShipCountAtStartOfTurn;
    public bool IsLost;
    public bool IsUnderAttack;
    private int planetID;
    private int owner;
    private int _NumShips;
    private int growthRate;
    private double x;
    private double y;
    public bool AttackMovesAllowed;
    public PlanetTurnPredictions TurnPrediction;
    public bool DoesNotChangeOwner;
    public bool WinningArmadaIsMine;
    public int ShipsRequiredToSurviveAttack;
    public int MaxDesertersAllowed;
    public PlanetTurn LastAttackTurn;
    public bool IsAttackedByEnemy;
    public int IdleForThisNumberOfTurns;

    public Planet(int planetID, int owner, int numShips, int growthRate, double x, double y)
    {
      this.planetID = planetID;
      this.growthRate = growthRate;
      this.x = x;
      this.y = y;
      this.Routes = new PlanetaryTravelRoute();
      this.SynchronizeWithGameStatus(owner, numShips);
    }

    public bool IsAttackable
    {
      get
      {
label_1:
        int num1 = -453397979;
        bool isAttackable;
        bool isMine;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -148283460)) % 10U)
          {
            case 0:
              int num3 = isMine ? -1595566501 : (num3 = -1541568642);
              num1 = num3 ^ (int) num2 * 526749322;
              continue;
            case 1:
              isAttackable = false;
              num1 = (int) num2 * -1576467843 ^ 307693360;
              continue;
            case 2:
              num1 = -1379133968;
              continue;
            case 3:
              num1 = (int) num2 * 1070222517 ^ 1157963846;
              continue;
            case 4:
              isAttackable = this.NumShips > -1;
              num1 = (int) num2 * -751056489 ^ -690716694;
              continue;
            case 6:
              num1 = (int) num2 * 1299017491 ^ -593502585;
              continue;
            case 7:
              isMine = this.IsMine;
              num1 = (int) num2 * -1340550833 ^ -1465447001;
              continue;
            case 8:
              goto label_1;
            case 9:
              num1 = (int) num2 * 90756785 ^ -1632657952;
              continue;
            default:
              goto label_11;
          }
        }
label_11:
        return isAttackable;
      }
    }

    public PlanetArmada Armada { get; private set; }

    internal void AddArmada(Fleet armada)
    {
      this.Armada.Add(armada);
label_1:
      int num1 = -1867751725;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -550605877)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 676645848 ^ 241046454;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public PlanetaryTravelRoute Routes { get; private set; }

    public int PlanetID
    {
      get
      {
label_1:
        int num1 = -2054412286;
        int planetId;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1008293716)) % 3U)
          {
            case 1:
              planetId = this.planetID;
              num1 = (int) num2 * 1050664599 ^ 2109954836;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return planetId;
      }
    }

    internal void SynchronizeWithGameStatus(int ownerId, int numShips)
    {
label_1:
      int num1 = 545237953;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1895339321)) % 14U)
        {
          case 0:
            num1 = (int) num2 * -1693257473 ^ 1398054764;
            continue;
          case 1:
            num1 = (int) num2 * -1257101015 ^ -505377157;
            continue;
          case 2:
            this.Armada = new PlanetArmada(this);
            num1 = (int) num2 * 2005532585 ^ -1528727994;
            continue;
          case 3:
            this.IsUnderAttack = false;
            this.IsMine = this.owner == 1;
            num1 = (int) num2 * 1006150665 ^ -2067034534;
            continue;
          case 4:
            this.IsNeutral = this.owner == 0;
            num1 = (int) num2 * 2007462406 ^ 333418520;
            continue;
          case 5:
            num1 = (int) num2 * -1227438433 ^ -459059880;
            continue;
          case 6:
            this.owner = ownerId;
            num1 = (int) num2 * 1660747633 ^ 511969248;
            continue;
          case 7:
            this._NumShips = numShips;
            this.ShipCountAtStartOfTurn = numShips;
            this.ShipsRequiredToSurviveAttack = -1;
            this.MaxDesertersAllowed = -1;
            num1 = (int) num2 * -1646483734 ^ -1745207282;
            continue;
          case 8:
            this.AttackMovesAllowed = true;
            num1 = (int) num2 * -622419078 ^ -1932405727;
            continue;
          case 9:
            this.DoesNotChangeOwner = true;
            num1 = (int) num2 * 449276210 ^ -1301159825;
            continue;
          case 10:
            this.IsEnemy = !this.IsMine && !this.IsNeutral;
            num1 = 1426918755;
            continue;
          case 12:
            num1 = (int) num2 * 121394251 ^ -1172193861;
            continue;
          case 13:
            goto label_1;
          default:
            goto label_15;
        }
      }
label_15:
      this.WinningArmadaIsMine = this.IsMine;
    }

    public int Owner
    {
      get
      {
label_1:
        int num1 = 1614236871;
        int owner;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1710130765)) % 3U)
          {
            case 1:
              owner = this.owner;
              num1 = (int) num2 * -1070045286 ^ -1440763862;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return owner;
      }
    }

    public int NumShips
    {
      get
      {
label_1:
        int num1 = 1762719751;
        int numShips;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 7837114)) % 4U)
          {
            case 1:
              numShips = this._NumShips;
              num1 = (int) num2 * -1755757587 ^ 1806434736;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * -2136830824 ^ 1939372834;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return numShips;
      }
    }

    public void Grow()
    {
label_1:
      int num1 = -1310657133;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -876618461)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1887496514 ^ 745273362;
            continue;
          case 2:
            num1 = (int) num2 * 1831914590 ^ -2039073146;
            continue;
          case 3:
            this.AddShips(this.GrowthRate);
            num1 = (int) num2 * 1002840523 ^ -1678997609;
            continue;
          case 4:
            int num3 = this.Owner <= 0 ? -2016839660 : (num3 = -1513945229);
            num1 = num3 ^ (int) num2 * -1984947148;
            continue;
          case 5:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public int AttackForce
    {
      get
      {
label_1:
        int num1 = -1158466978;
        int attackForce;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1685488410)) % 9U)
          {
            case 1:
              attackForce = this.MaxDesertersAllowed;
              num1 = (int) num2 * -1786813922 ^ -1019803667;
              continue;
            case 2:
              num1 = (int) num2 * 666945017 ^ -1024566711;
              continue;
            case 3:
              goto label_1;
            case 4:
              attackForce = this.NumShips;
              num1 = (int) num2 * 1644163364 ^ 1361985235;
              continue;
            case 5:
              num1 = (int) num2 * -537475324 ^ -1334280741;
              continue;
            case 6:
              flag = this.MaxDesertersAllowed > -1;
              num1 = (int) num2 * -1481183732 ^ -2127934851;
              continue;
            case 7:
              num1 = -106972578;
              continue;
            case 8:
              int num3 = !flag ? 323886190 : (num3 = 827633843);
              num1 = num3 ^ (int) num2 * -1258224385;
              continue;
            default:
              goto label_10;
          }
        }
label_10:
        return attackForce;
      }
    }

    public void RemoveShips(int amount)
    {
      this.MaxDesertersAllowed -= amount;
label_1:
      int num1 = -215012529;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -943493128)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            this.MaxDesertersAllowed = -1;
            num1 = (int) num2 * 806470967 ^ 1757150897;
            continue;
          case 3:
            int num3 = !flag ? -1657817730 : (num3 = -1873792875);
            num1 = num3 ^ (int) num2 * -1807413096;
            continue;
          case 4:
            num1 = (int) num2 * -1217455755 ^ -1341597932;
            continue;
          case 5:
            flag = this.MaxDesertersAllowed < 0;
            num1 = (int) num2 * -1410519480 ^ -571433735;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      this._NumShips -= amount;
    }

    public int GrowthRate
    {
      get
      {
        int growthRate = this.growthRate;
label_1:
        int num1 = -1190666989;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -727088195)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -629412360 ^ -565875005;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return growthRate;
      }
    }

    public double X => this.x;

    public double Y
    {
      get
      {
label_1:
        int num1 = 1138901370;
        double y;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1332367611)) % 4U)
          {
            case 0:
              num1 = (int) num2 * 524426174 ^ -907665932;
              continue;
            case 1:
              y = this.y;
              num1 = (int) num2 * 1729538779 ^ 256649012;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return y;
      }
    }

    public void ChangeOwner(int newOwner, int newShipCount)
    {
label_1:
      int num1 = 1045944107;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 571964628)) % 6U)
        {
          case 0:
            this._NumShips = newShipCount;
            this.IsUnderAttack = false;
            this.IsMine = this.owner == 1;
            num1 = (int) num2 * -126253443 ^ -2032053936;
            continue;
          case 2:
            this.IsNeutral = this.owner == 0;
            num1 = (int) num2 * 1521019822 ^ 136283080;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.IsEnemy = !this.IsMine && !this.IsNeutral;
            num1 = 1934375625;
            continue;
          case 5:
            this.owner = newOwner;
            num1 = (int) num2 * -1019703501 ^ -1049867667;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      this.WinningArmadaIsMine = this.IsMine;
    }

    public void AddShips(int amount) => this._NumShips += amount;

    public bool IsMine { get; private set; }

    public bool IsNeutral { get; set; }

    public bool IsEnemy { get; set; }

    public bool IsOnWishList { get; set; }

    public double Connectiveness { get; set; }

    public double Growthyness { get; set; }

    internal Planet Clone(bool cloneArmada)
    {
label_1:
      int num1 = -126619674;
      Planet planet1;
      Planet planet2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1236842702)) % 16U)
        {
          case 0:
            planet1.IsOnWishList = this.IsOnWishList;
            num1 = (int) num2 * -1112737606 ^ 422620942;
            continue;
          case 1:
            planet2 = planet1;
            num1 = -418081665;
            continue;
          case 2:
            planet1.DoesNotChangeOwner = this.DoesNotChangeOwner;
            num1 = (int) num2 * -1411800851 ^ -568424784;
            continue;
          case 3:
            num1 = (int) num2 * -1372007618 ^ -840226046;
            continue;
          case 4:
            planet1 = new Planet(this.planetID, this.owner, this._NumShips, this.growthRate, this.x, this.y);
            num1 = (int) num2 * 719244537 ^ -610907704;
            continue;
          case 5:
            int num3 = cloneArmada ? -1430065134 : (num3 = -659545952);
            num1 = num3 ^ (int) num2 * -1219627913;
            continue;
          case 6:
            planet1.WinningArmadaIsMine = this.WinningArmadaIsMine;
            planet1.ShipCountAtStartOfTurn = this.ShipCountAtStartOfTurn;
            num1 = (int) num2 * 289284287 ^ -970194822;
            continue;
          case 7:
            goto label_1;
          case 8:
            planet1.MaxDesertersAllowed = this.MaxDesertersAllowed;
            num1 = (int) num2 * 1078146791 ^ 1686895809;
            continue;
          case 9:
            planet1.IsAttackedByEnemy = this.IsAttackedByEnemy;
            num1 = (int) num2 * 1160874931 ^ 1416404377;
            continue;
          case 10:
            planet1.Armada = this.Armada.Clone();
            num1 = (int) num2 * 1702268947 ^ 449008765;
            continue;
          case 11:
            planet1.IsNeutral = this.IsNeutral;
            planet1.IsEnemy = this.IsEnemy;
            num1 = (int) num2 * 398744122 ^ 1605189461;
            continue;
          case 12:
            num1 = (int) num2 * -1627605916 ^ -153661769;
            continue;
          case 13:
            num1 = (int) num2 * 2109763531 ^ 984403154;
            continue;
          case 14:
            planet1.IsLost = this.IsLost;
            planet1.IsUnderAttack = this.IsUnderAttack;
            num1 = (int) num2 * -329103500 ^ -1961314324;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return planet2;
    }

    public IOrderedEnumerable<IGrouping<int, Fleet>> FleetArrivalByTurnsRemaining { get; private set; }

    public void CreateFleetArrivalByTurnsRemaining()
    {
label_1:
      int num1 = 2035144487;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1551180158)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.FleetArrivalByTurnsRemaining = this.Armada.ToLookup<Fleet, int>((Func<Fleet, int>) (item => item.TurnsRemaining)).OrderBy<IGrouping<int, Fleet>, int>((Func<IGrouping<int, Fleet>, int>) (item => item.Key));
            num1 = 514840279;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public Route NearestEnemy { get; private set; }

    public double NearestEnemyDistance { get; private set; }

    public Route NearestNeutral { get; private set; }

    public double NearestNeutralDistance { get; private set; }

    public Route NearestFriendly { get; private set; }

    public double NearestFriendlyDistance { get; private set; }

    public Route FarthestFriendly { get; private set; }

    public void CreateTurnPredictions()
    {
      this.CreateFleetArrivalByTurnsRemaining();
      this.TurnPrediction.CreateTurnPredictionsForPlanet(this);
label_1:
      int num1 = -1579921655;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -818033350)) % 11U)
        {
          case 0:
            this.NearestFriendly = (Route) null;
            num1 = (int) num2 * -1908606402 ^ 1367277145;
            continue;
          case 2:
            this.NearestEnemy = (Route) null;
            num1 = (int) num2 * 662675891 ^ -1952575583;
            continue;
          case 3:
            this.NearestEnemyDistance = 0.0;
            num1 = (int) num2 * 1846901211 ^ 916417750;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.FarthestFriendly = (Route) null;
            num1 = (int) num2 * -1737781256 ^ 2047532784;
            continue;
          case 6:
            this.NearestNeutral = (Route) null;
            num1 = (int) num2 * -1537515165 ^ -156187119;
            continue;
          case 7:
            num1 = (int) num2 * 9525566 ^ 1764437534;
            continue;
          case 8:
            num1 = (int) num2 * 1669770735 ^ -823821151;
            continue;
          case 9:
            this.NearestNeutralDistance = 0.0;
            this.NearestFriendlyDistance = 0.0;
            num1 = (int) num2 * -1672139037 ^ 45798431;
            continue;
          case 10:
            num1 = (int) num2 * 1758001325 ^ -1155510270;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      using (List<Route>.Enumerator enumerator = this.Routes.GetEnumerator())
      {
label_34:
        int num3 = !enumerator.MoveNext() ? -1541399577 : (num3 = -793464708);
        while (true)
        {
          uint num4;
          Route current;
          bool isMine;
          bool flag1;
          bool flag2;
          int num5;
          int num6;
          switch ((num4 = (uint) (num3 ^ -818033350)) % 28U)
          {
            case 0:
              goto label_34;
            case 1:
              isMine = current.Destination.IsMine;
              num3 = -188461840;
              continue;
            case 2:
              num3 = (int) num4 * -347697596 ^ -1897175479;
              continue;
            case 3:
              num5 = this.NearestEnemy == null ? 1 : 0;
              break;
            case 4:
              num3 = (int) num4 * 2107437576 ^ 2045331737;
              continue;
            case 5:
              this.FarthestFriendly = current;
              num3 = -1453198728;
              continue;
            case 6:
              int num7 = !flag1 ? -1978309449 : (num7 = -1079882638);
              num3 = num7 ^ (int) num4 * 842598828;
              continue;
            case 7:
              num3 = (int) num4 * -1639062693 ^ 1625968230;
              continue;
            case 8:
              this.NearestEnemyDistance = current.ActualDistance;
              num3 = (int) num4 * 1550260700 ^ -1750102391;
              continue;
            case 9:
              this.NearestFriendly = current;
              num3 = (int) num4 * 1658029660 ^ 448654788;
              continue;
            case 10:
              num3 = -793464708;
              continue;
            case 11:
              num3 = (int) num4 * 1709504901 ^ 1186122746;
              continue;
            case 12:
              num6 = this.NearestNeutral == null ? 1 : 0;
              goto label_41;
            case 13:
              this.NearestNeutral = current;
              num3 = (int) num4 * -93248722 ^ -1446234033;
              continue;
            case 14:
              current = enumerator.Current;
              if (current.Destination.IsNeutral)
              {
                num3 = -1490898102;
                continue;
              }
              num6 = 0;
              goto label_41;
            case 15:
              num3 = (int) num4 * -1329633507 ^ 404728729;
              continue;
            case 16:
              num3 = (int) num4 * -1611813294 ^ 1341444323;
              continue;
            case 17:
              goto label_49;
            case 18:
              this.NearestFriendlyDistance = current.ActualDistance;
              num3 = (int) num4 * 1484437495 ^ 897377985;
              continue;
            case 19:
              this.NearestEnemy = current;
              num3 = (int) num4 * -1977010242 ^ -2086876424;
              continue;
            case 20:
              int num8 = !flag2 ? 102770883 : (num8 = 2115422690);
              num3 = num8 ^ (int) num4 * 906282102;
              continue;
            case 21:
              this.NearestNeutralDistance = current.ActualDistance;
              num3 = (int) num4 * -1432021783 ^ 1648095008;
              continue;
            case 22:
              int num9 = isMine ? 1299828004 : (num9 = 1472342281);
              num3 = num9 ^ (int) num4 * 1737057172;
              continue;
            case 23:
              num3 = (int) num4 * 1323995456 ^ -179608393;
              continue;
            case 24:
              num3 = (int) num4 * 1327086516 ^ 1414583619;
              continue;
            case 25:
              if (!current.Destination.IsEnemy)
              {
                num5 = 0;
                break;
              }
              num3 = -992704075;
              continue;
            case 26:
              flag1 = this.NearestFriendly == null;
              num3 = (int) num4 * -1895985484 ^ 1928371344;
              continue;
            case 27:
              num3 = -1282229386;
              continue;
            default:
              goto label_16;
          }
          flag2 = num5 != 0;
          num3 = -2142636570;
          continue;
label_41:
          int num10;
          num3 = num10 = num6 == 0 ? -1063879305 : (num10 = -1423798785);
        }
label_49:
        return;
label_16:;
      }
    }

    internal void CreateTurns(int maxTurns)
    {
      this.TurnPrediction = new PlanetTurnPredictions(maxTurns);
label_1:
      int num1 = -940806800;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1271003496)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.TurnPrediction.Capacity = this.TurnPrediction.Count;
            num1 = (int) num2 * -871260431 ^ 925620492;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public bool IsInAttackQueue { get; set; }

    internal PlanetTurn CalcMaxGainUsingThisManyShips(
      Planet source,
      int arrival,
      int numShips)
    {
label_1:
      int num1 = -1234938021;
      Planet destinationPlanet;
      PlanetTurn lastTurn;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2034505246)) % 7U)
        {
          case 0:
            destinationPlanet.CreateTurnPredictions();
            num1 = (int) num2 * -1121739786 ^ -1963853624;
            continue;
          case 1:
            lastTurn = destinationPlanet.TurnPrediction.LastTurn;
            num1 = (int) num2 * -235828306 ^ -79665820;
            continue;
          case 2:
            destinationPlanet.CreateTurns(this.TurnPrediction.Count);
            Fleet fleet = new Fleet(1, numShips, source, destinationPlanet, arrival, arrival);
            num1 = (int) num2 * 1223332782 ^ -1513511005;
            continue;
          case 4:
            destinationPlanet = this.Clone(true);
            num1 = (int) num2 * -962669556 ^ -457553248;
            continue;
          case 5:
            num1 = (int) num2 * 292810676 ^ 689587955;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      return lastTurn;
    }
  }
}
