// Decompiled with JetBrains decompiler
// Type: Pass.My.MySettings
// Assembly: Pass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79B654F2-A9B8-4BE3-9734-859D467B8C8A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00030-msil\Trojan-Ransom.Win32.Blocker.aijm-0eadd5d06d3392dce8e7120f6ce6bb2b15e8ebc277c1f0c29f9bb0b33292fd01.exe.exe

using \u0006;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace Pass.My
{
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [CompilerGenerated]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings \u0001 = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool \u0002;
    private static object \u0003 = RuntimeHelpers.GetObjectValue(new object());

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static void \u0001(object _param0, EventArgs _param1)
    {
      if (!\u0001.\u0001.Application.SaveMySettingsOnExit)
        return;
      \u0002.Settings.Save();
    }

    public static MySettings Default
    {
      get
      {
        if (!MySettings.\u0002)
        {
          object Expression = MySettings.\u0003;
          ObjectFlowControl.CheckForSyncLockOnValueType(Expression);
          Monitor.Enter(Expression);
          try
          {
            if (!MySettings.\u0002)
            {
              \u0001.\u0001.Application.Shutdown += (ShutdownEventHandler) ((_param0, _param1) =>
              {
                if (!\u0001.\u0001.Application.SaveMySettingsOnExit)
                  return;
                \u0002.Settings.Save();
              });
              MySettings.\u0002 = true;
            }
          }
          finally
          {
            Monitor.Exit(Expression);
          }
        }
        return MySettings.\u0001;
      }
    }
  }
}
