// Decompiled with JetBrains decompiler
// Type: A.T
// Assembly: PremiereCrack, Version=2.3.77.2, Culture=neutral, PublicKeyToken=null
// MVID: B728F238-A35B-46BB-92FD-55CC50CC96B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.Win32.Generic-27a1f89ce5a37815010c8411dddec85d5d66e81a957ad722fbd2dc64f99651c8.exe

using Microsoft.VisualBasic.ApplicationServices;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace A
{
  [GeneratedCode("MyTemplate", "11.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Never)]
  internal class T : WindowsFormsApplicationBase
  {
    private static List<WeakReference> T = new List<WeakReference>();

    [DebuggerNonUserCode]
    static T()
    {
    }

    [DebuggerStepThrough]
    public T()
      : base((AuthenticationMode) G.T(28))
    {
      A.T.T((object) this);
      this.IsSingleInstance = G.T(32) != 0;
      this.EnableVisualStyles = G.T(36) != 0;
      this.SaveMySettingsOnExit = G.T(40) != 0;
      this.ShutdownStyle = (ShutdownMode) G.T(44);
    }

    [DebuggerNonUserCode]
    private static void T(object T)
    {
      List<WeakReference> t = A.T.T;
      bool lockTaken = G.T(0) != 0;
      try
      {
        Monitor.Enter((object) t, ref lockTaken);
        if (A.T.T.Count == A.T.T.Capacity)
        {
label_2:
          switch (6)
          {
            case 0:
              goto label_2;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (A.T.T);
              }
              int index1 = G.T(4);
              int num1 = G.T(8);
              int num2 = checked (A.T.T.Count - G.T(12));
              int index2 = num1;
              while (index2 <= num2)
              {
                if (A.T.T[index2].IsAlive)
                {
label_7:
                  switch (6)
                  {
                    case 0:
                      goto label_7;
                    default:
                      if ((index2 == index1 ? 1 : 0) == G.T(16))
                      {
label_9:
                        switch (1)
                        {
                          case 0:
                            goto label_9;
                          default:
                            A.T.T[index1] = A.T.T[index2];
                            break;
                        }
                      }
                      checked { index1 += G.T(20); }
                      break;
                  }
                }
                checked { index2 += G.T(24); }
              }
label_14:
              switch (6)
              {
                case 0:
                  goto label_14;
                default:
                  A.T.T.RemoveRange(index1, checked (A.T.T.Count - index1));
                  A.T.T.Capacity = A.T.T.Count;
                  break;
              }
              break;
          }
        }
        A.T.T.Add(new WeakReference(RuntimeHelpers.GetObjectValue(T)));
      }
      finally
      {
        if (lockTaken)
        {
label_18:
          switch (7)
          {
            case 0:
              goto label_18;
            default:
              Monitor.Exit((object) t);
              break;
          }
        }
      }
    }

    [STAThread]
    [DebuggerHidden]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    internal static void T(string[] T)
    {
      try
      {
        Application.SetCompatibleTextRenderingDefault(WindowsFormsApplicationBase.UseCompatibleTextRendering);
      }
      finally
      {
      }
      I.T.Run(T);
    }

    [DebuggerStepThrough]
    protected override void OnCreateMainForm() => this.MainForm = (Form) I.T.T;
  }
}
