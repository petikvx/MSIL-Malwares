// Decompiled with JetBrains decompiler
// Type: Cradiator.Views.SettingsWindow
// Assembly: FileOptio, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0135208B-21B4-457A-BFCD-FFD93FD8BA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c07e2154bd7603dd3a6fdf4810a799ff7d31670747236cd1d2a52be397c0676b.exe

using Cradiator.Audio;
using Cradiator.Config;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Markup;

namespace Cradiator.Views
{
  public partial class SettingsWindow : Window, ISettingsWindow, IComponentConnector
  {
    private readonly IConfigSettings _configSettings;
    private readonly ICradiatorView _view;
    private readonly ISpeechSynthesizer _speechSynth;
    internal Grid TheGrid;
    internal TextBox urlTextBox;
    internal Slider pollIntervalSlider;
    internal CheckBox showCountdownCheckBox;
    internal CheckBox playSoundsCheckBox;
    internal TextBox brokenBuildSound;
    internal TextBox fixedBuildSound;
    internal CheckBox playSpeechCheckBox;
    internal TextBox brokenBuildText;
    internal TextBox fixedBuildText;
    internal ComboBox comboInstalledVoices;
    internal ListBox skinListBox;
    private bool _contentLoaded;

    public SettingsWindow(
      IConfigSettings configSettings,
      ICradiatorView view,
      ISpeechSynthesizer speechSynth)
    {
      SettingsWindow settingsWindow = this;
      this._configSettings = configSettings;
      this._view = view;
      this._speechSynth = speechSynth;
      this.InitializeComponent();
      this.SetBindings();
      this._view.Closing += (CancelEventHandler) ((sender, e) => settingsWindow.Close());
      this._view.Activated += (EventHandler) ((sender, e) => settingsWindow.Owner = view.Window);
      this.Closing += new CancelEventHandler(this.SettingsWindow_Closing);
    }

    private void SettingsWindow_Closing(object sender, CancelEventArgs e)
    {
      e.Cancel = true;
      this.Hide();
    }

    private void Save_Click(object sender, RoutedEventArgs e)
    {
      this._configSettings.Save();
      this.Hide();
    }

    private void Cancel_Click(object sender, RoutedEventArgs e)
    {
      this._configSettings.Load();
      this.Hide();
    }

    private void SetBindings()
    {
      this.DataContext = (object) this._configSettings;
      this.comboInstalledVoices.ItemsSource = (IEnumerable) this._speechSynth.GetInstalledVoices();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/FileOptio;component/views/settingswindow.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.TheGrid = (Grid) target;
          break;
        case 2:
          this.urlTextBox = (TextBox) target;
          break;
        case 3:
          this.pollIntervalSlider = (Slider) target;
          break;
        case 4:
          this.showCountdownCheckBox = (CheckBox) target;
          break;
        case 5:
          this.playSoundsCheckBox = (CheckBox) target;
          break;
        case 6:
          this.brokenBuildSound = (TextBox) target;
          break;
        case 7:
          this.fixedBuildSound = (TextBox) target;
          break;
        case 8:
          this.playSpeechCheckBox = (CheckBox) target;
          break;
        case 9:
          this.brokenBuildText = (TextBox) target;
          break;
        case 10:
          this.fixedBuildText = (TextBox) target;
          break;
        case 11:
          this.comboInstalledVoices = (ComboBox) target;
          break;
        case 12:
          this.skinListBox = (ListBox) target;
          break;
        case 13:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Save_Click);
          break;
        case 14:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Cancel_Click);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }

    bool? ISettingsWindow.ShowDialog() => this.ShowDialog();
  }
}
