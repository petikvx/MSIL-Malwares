// Decompiled with JetBrains decompiler
// Type: SpatialController.Device
// Assembly: Rea, Version=1.2.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 014AEBFB-7EE8-4B39-A7D6-AE7A18313427
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-fb4fb24a50b7f600c65d2bbc049f44337673fa7b0e6e16b6967c06d0cfb666ad.exe

using OpenZWaveDotNet;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Media;
using System.Threading;
using System.Windows.Media.Media3D;

namespace SpatialController
{
  public class Device
  {
    public const bool USE_ZWAVE = true;
    public const int NUM_MOCK_DEVICES = 1;
    private static string logFilePath = "C:\\Users\\sterling\\Downloads\\open-zwave-read-only\\open-zwave-read-only\\simplelog.txt";
    private static string zWaveConfigPath = "C:\\Users\\sterling\\Downloads\\open-zwave-read-only\\open-zwave-read-only\\config\\";
    private static string zWaveSerialPortName = "\\\\.\\COM3";
    private static ZWOptions m_options = (ZWOptions) null;
    private static ZWManager m_manager = (ZWManager) null;
    private static bool m_nodesReady = false;
    private static uint m_homeId = 0;
    private static BindingList<Node> m_nodeList = new BindingList<Node>();
    public Vector3D position;
    public byte deviceId;
    private const int ACTIVATION_MS = 400;
    private const int DEBOUNCE_MS = 2000;
    private bool inFocus;
    private bool on;
    private DateTime lastActionTime;
    private DateTime focusStartTime;
    private SoundPlayer sound;

    public static void SetUp()
    {
      Device.m_options = new ZWOptions();
      Device.m_options.Create(Device.zWaveConfigPath, "", "");
      Device.m_options.Lock();
      Device.m_manager = new ZWManager();
      Device.m_manager.Create();
      ZWManager manager = Device.m_manager;
      // ISSUE: method pointer
      manager.OnNotification = (ManagedNotificationsHandler) Delegate.Combine((Delegate) manager.OnNotification, (Delegate) new ManagedNotificationsHandler((object) null, __methodptr(NotificationHandler)));
      Device.m_manager.AddDriver(Device.zWaveSerialPortName);
      do
      {
        Device.SleepForThreeSeconds();
      }
      while (!Device.m_nodesReady);
    }

    public static List<byte> getNodes()
    {
      List<byte> nodes = new List<byte>();
      for (int index = 0; index < Device.m_nodeList.Count; ++index)
      {
        string str = Device.m_manager.GetNodeType(Device.m_homeId, Device.m_nodeList[index].ID).ToString();
        if (str == "Binary Power Switch" || str == "Multilevel Power Switch" || str == "Multilevel Switch")
          nodes.Add(Device.m_nodeList[index].ID);
      }
      return nodes;
    }

    public static void turnOnAll() => Device.m_manager.SwitchAllOn(Device.m_homeId);

    public static void turnOn(byte deviceId) => Device.m_manager.SetNodeOn(Device.m_homeId, deviceId);

    public static void turnOffAll() => Device.m_manager.SwitchAllOff(Device.m_homeId);

    public static void turnOff(byte deviceId) => Device.m_manager.SetNodeOff(Device.m_homeId, deviceId);

    private static void Log(string type, string message)
    {
      string text = string.Format("{0}\t{1}\t{2}", (object) DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"), (object) type, (object) message);
      if (Device.logFilePath.Length > 0)
      {
        using (StreamWriter streamWriter = new StreamWriter(Device.logFilePath, true))
          streamWriter.WriteLine(text);
      }
      Console.Write(text);
    }

    private static void Log(string message) => Device.Log("Message", message);

    private static void SleepForThreeSeconds() => Thread.Sleep(3000);

    private static void NotificationHandler(ZWNotification m_notification)
    {
      if (m_notification == null)
        return;
      ZWNotification.Type type = m_notification.GetType();
      switch ((int) type)
      {
        case 0:
          Device.GetNode(m_notification.GetHomeId(), m_notification.GetNodeId())?.AddValue(m_notification.GetValueID());
          break;
        case 1:
          Device.GetNode(m_notification.GetHomeId(), m_notification.GetNodeId())?.RemoveValue(m_notification.GetValueID());
          break;
        case 2:
          Device.GetNode(m_notification.GetHomeId(), m_notification.GetNodeId())?.SetValue(m_notification.GetValueID());
          break;
        case 3:
          break;
        case 4:
          break;
        case 5:
          Device.m_nodeList.Add(new Node()
          {
            ID = m_notification.GetNodeId(),
            HomeID = m_notification.GetHomeId()
          });
          break;
        case 6:
          using (IEnumerator<Node> enumerator = Device.m_nodeList.GetEnumerator())
          {
            while (enumerator.MoveNext())
            {
              Node current = enumerator.Current;
              if ((int) current.ID == (int) m_notification.GetNodeId())
              {
                Device.m_nodeList.Remove(current);
                break;
              }
            }
            break;
          }
        case 7:
          Node node1 = Device.GetNode(m_notification.GetHomeId(), m_notification.GetNodeId());
          if (node1 == null)
            break;
          node1.Label = Device.m_manager.GetNodeType(Device.m_homeId, node1.ID);
          break;
        case 8:
          Node node2 = Device.GetNode(m_notification.GetHomeId(), m_notification.GetNodeId());
          if (node2 == null)
            break;
          node2.Manufacturer = Device.m_manager.GetNodeManufacturerName(Device.m_homeId, node2.ID);
          node2.Product = Device.m_manager.GetNodeProductName(Device.m_homeId, node2.ID);
          node2.Location = Device.m_manager.GetNodeLocation(Device.m_homeId, node2.ID);
          node2.Name = Device.m_manager.GetNodeName(Device.m_homeId, node2.ID);
          break;
        case 9:
          break;
        case 10:
          break;
        case 11:
          break;
        case 12:
          Device.m_homeId = m_notification.GetHomeId();
          break;
        default:
          if (type != 17)
            break;
          Device.m_nodesReady = true;
          break;
      }
    }

    private static Node GetNode(uint homeId, byte nodeId)
    {
      foreach (Node node in (Collection<Node>) Device.m_nodeList)
      {
        if ((int) node.ID == (int) nodeId && (int) node.HomeID == (int) homeId)
          return node;
      }
      return (Node) null;
    }

    private static ZWValueID GetValueID(Node node, string valueLabel)
    {
      foreach (ZWValueID valueId in node.Values)
      {
        if (Device.m_manager.GetValueLabel(valueId) == valueLabel)
          return valueId;
      }
      return (ZWValueID) null;
    }

    public Device(Vector3D position, byte deviceId)
    {
      this.on = false;
      this.inFocus = false;
      this.lastActionTime = DateTime.Now;
      this.focusStartTime = DateTime.Now;
      this.position = position;
      this.deviceId = deviceId;
      try
      {
        this.sound = new SoundPlayer("beep-6.wav");
      }
      catch (Exception ex)
      {
        Console.Write("Exception while playing sound: " + ex?.ToString());
      }
    }

    public void isInFocus()
    {
      if (this.inFocus)
      {
        Console.Write("In focus!");
        if (!(DateTime.Now - this.focusStartTime > new TimeSpan(0, 0, 0, 0, 400)) || !(DateTime.Now - this.lastActionTime > new TimeSpan(0, 0, 0, 0, 2000)))
          return;
        if (this.on)
          Console.Write("Switching light off!");
        else
          Console.Write("Switching light on!");
        if (!this.on)
          Device.m_manager.SetNodeOn(Device.m_homeId, this.deviceId);
        else
          Device.m_manager.SetNodeOff(Device.m_homeId, this.deviceId);
        this.sound.Play();
        this.on = !this.on;
        this.lastActionTime = DateTime.Now;
      }
      else
      {
        Console.Write("Not in focus!");
        this.inFocus = true;
        this.focusStartTime = DateTime.Now;
      }
    }

    public void isNotInFocus()
    {
      if (!this.inFocus)
        return;
      this.inFocus = false;
    }

    public static void dimAllToPercent(int percent)
    {
      for (int index = 0; index < Device.m_nodeList.Count; ++index)
      {
        uint homeId = Device.m_homeId;
        string nodeProductType = Device.m_manager.GetNodeProductType(Device.m_homeId, Device.m_nodeList[index].ID);
        if (nodeProductType == "Multilevel Power Switch" && nodeProductType == "Multilevel Switch")
          Device.m_manager.SetNodeLevel(Device.m_homeId, Device.m_nodeList[index].ID, (byte) percent);
      }
    }
  }
}
