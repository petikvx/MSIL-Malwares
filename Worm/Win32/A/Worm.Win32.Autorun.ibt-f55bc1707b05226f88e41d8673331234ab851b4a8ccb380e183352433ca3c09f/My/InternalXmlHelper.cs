// Decompiled with JetBrains decompiler
// Type: Server.My.InternalXmlHelper
// Assembly: Server, Version=2.0.0.2, Culture=neutral, PublicKeyToken=null
// MVID: 84A0DB64-644B-4D8C-8E08-B82602C6312E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Worm.Win32.Autorun.ibt-f55bc1707b05226f88e41d8673331234ab851b4a8ccb380e183352433ca3c09f.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Xml.Linq;

namespace Server.My
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  [DebuggerNonUserCode]
  [CompilerGenerated]
  internal sealed class InternalXmlHelper
  {
    [EditorBrowsable(EditorBrowsableState.Never)]
    private InternalXmlHelper()
    {
    }

    public static string get_Value(IEnumerable<XElement> source)
    {
      IEnumerator<XElement> enumerator;
      try
      {
        enumerator = source.GetEnumerator();
        bool flag;
        if ((uint) flag - (uint) flag > uint.MaxValue)
          ;
        if (enumerator.MoveNext())
          return enumerator.Current.Value;
      }
      finally
      {
        bool flag = enumerator != null;
        do
        {
          if (false)
            ;
          if (flag)
            enumerator.Dispose();
          else
            break;
        }
        while (((flag ? 1 : 0) & 0) != 0);
      }
      return (string) null;
    }

    public static void set_Value(IEnumerable<XElement> source, string value)
    {
      IEnumerator<XElement> enumerator;
      try
      {
        enumerator = source.GetEnumerator();
        bool flag;
        do
        {
          flag = enumerator.MoveNext();
          if (flag)
            goto label_4;
        }
        while (((flag ? 1 : 0) & 0) == 0 && false);
        return;
label_4:
        enumerator.Current.Value = value;
      }
      finally
      {
        bool flag = enumerator != null;
        do
        {
          if (!flag)
          {
            if (true)
              goto label_12;
          }
          else
            goto label_14;
label_7:
          if (((flag ? 1 : 0) | -1) == 0)
            continue;
label_11:
          if ((uint) flag - (uint) flag >= 0U)
            break;
label_12:
          continue;
label_14:
          enumerator.Dispose();
          if (true)
          {
            if (false)
            {
              if (false)
                goto label_11;
            }
            else
              goto label_7;
          }
          else
            break;
        }
        while ((uint) flag + (uint) flag > uint.MaxValue);
      }
    }

    public static string get_AttributeValue(IEnumerable<XElement> source, XName name)
    {
      IEnumerator<XElement> enumerator;
      string attributeValue;
      try
      {
        enumerator = source.GetEnumerator();
        bool flag = enumerator.MoveNext();
        if (!flag)
        {
          if (false)
            goto label_10;
        }
        else
        {
          XElement current = enumerator.Current;
          if (((flag ? 1 : 0) | 2) == 0)
            ;
          attributeValue = (string) current.Attribute(name);
          if ((uint) flag + (uint) flag >= 0U)
            goto label_10;
        }
      }
      finally
      {
        bool flag = enumerator != null;
        if ((uint) flag - (uint) flag > uint.MaxValue)
          ;
        if (flag)
          enumerator.Dispose();
      }
      attributeValue = (string) null;
label_10:
      return attributeValue;
    }

    public static void set_AttributeValue(IEnumerable<XElement> source, XName name, string value)
    {
      IEnumerator<XElement> enumerator;
      try
      {
        enumerator = source.GetEnumerator();
        bool flag1;
        if ((uint) flag1 - (uint) flag1 >= 0U)
          goto label_7;
label_5:
        XElement current;
        current.SetAttributeValue(name, (object) value);
        return;
label_7:
        while (true)
        {
          bool flag2 = enumerator.MoveNext();
          if ((uint) flag2 + (uint) flag2 >= 0U)
          {
            while (!flag2)
            {
              if (true)
                goto label_6;
            }
            current = enumerator.Current;
            break;
          }
label_6:
          if (((flag2 ? 1 : 0) | -2) != 0)
            return;
        }
        goto label_5;
      }
      finally
      {
        if (enumerator == null)
        {
          if (true)
            ;
        }
        else
          enumerator.Dispose();
      }
    }

    public static string get_AttributeValue(XElement source, XName name) => (string) source.Attribute(name);

    public static void set_AttributeValue(XElement source, XName name, string value) => source.SetAttributeValue(name, (object) value);

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XAttribute CreateAttribute(XName name, object value)
    {
      XAttribute attribute;
      if (value != null)
      {
        attribute = new XAttribute(name, RuntimeHelpers.GetObjectValue(value));
        if (false)
          ;
      }
      else
        attribute = (XAttribute) null;
      return attribute;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XAttribute CreateNamespaceAttribute(XName name, XNamespace ns)
    {
      XAttribute xattribute = new XAttribute(name, (object) ns.NamespaceName);
      if (true)
        goto label_2;
label_1:
      XAttribute namespaceAttribute = xattribute;
      goto label_4;
label_2:
      if (true)
      {
        xattribute.AddAnnotation((object) ns);
        goto label_1;
      }
label_4:
      return namespaceAttribute;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static object RemoveNamespaceAttributes(
      string[] inScopePrefixes,
      XNamespace[] inScopeNs,
      List<XAttribute> attributes,
      object obj)
    {
      bool flag = obj != null;
      object obj1;
      XElement e;
      do
      {
        if (flag)
          goto label_10;
label_1:
        obj1 = obj;
        if ((uint) flag + (uint) flag >= 0U)
          break;
label_3:
        if ((uint) flag - (uint) flag >= 0U)
        {
          if (false)
            goto label_7;
          else
            break;
        }
label_6:
        IEnumerable enumerable;
        flag = enumerable != null;
        if (flag)
        {
          // ISSUE: reference to a compiler-generated method
          obj1 = (object) InternalXmlHelper.RemoveNamespaceAttributes(inScopePrefixes, inScopeNs, attributes, enumerable);
          goto label_3;
        }
        else
        {
          if ((uint) flag + (uint) flag < 0U)
            continue;
          goto label_1;
        }
label_7:
        if (!flag)
        {
          enumerable = obj as IEnumerable;
          if (false)
            goto label_3;
          else
            goto label_6;
        }
        else
          goto label_9;
label_10:
        e = obj as XElement;
        flag = e != null;
        if (true)
          goto label_7;
        else
          goto label_9;
      }
      while ((uint) flag >= 0U && ((flag ? 1 : 0) | 1) == 0);
      goto label_13;
label_9:
      // ISSUE: reference to a compiler-generated method
      obj1 = (object) InternalXmlHelper.RemoveNamespaceAttributes(inScopePrefixes, inScopeNs, attributes, e);
label_13:
      return obj1;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static IEnumerable RemoveNamespaceAttributes(
      string[] inScopePrefixes,
      XNamespace[] inScopeNs,
      List<XAttribute> attributes,
      IEnumerable obj)
    {
      bool flag = obj != null;
label_2:
      IEnumerable enumerable;
      IEnumerable<XElement> source;
      do
      {
        if (!flag)
        {
          if (true)
            goto label_1;
        }
        else
          goto label_14;
label_4:
        if ((uint) flag <= uint.MaxValue)
          break;
label_6:
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: reference to a compiler-generated method
        enumerable = (IEnumerable) obj.Cast<object>().Select<object, object>(new Func<object, object>(new InternalXmlHelper.RemoveNamespaceAttributesClosure(inScopePrefixes, inScopeNs, attributes).ProcessObject));
        if (false)
          continue;
        goto label_4;
label_14:
        source = obj as IEnumerable<XElement>;
        flag = source != null;
        if ((uint) flag <= uint.MaxValue)
        {
          while (!flag)
          {
            if (true)
            {
              if ((uint) flag + (uint) flag > uint.MaxValue)
              {
                if (true)
                {
                  if ((uint) flag - (uint) flag > uint.MaxValue || true)
                  {
                    if (((flag ? 1 : 0) & 0) != 0)
                      goto label_16;
                    else
                      goto label_6;
                  }
                  else
                    goto label_2;
                }
              }
              else
                goto label_6;
            }
            else
              goto label_1;
          }
          goto label_13;
        }
        else
          goto label_15;
      }
      while (false);
      goto label_16;
label_1:
      enumerable = obj;
      goto label_16;
label_13:
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: reference to a compiler-generated method
      enumerable = (IEnumerable) source.Select<XElement, XElement>(new Func<XElement, XElement>(new InternalXmlHelper.RemoveNamespaceAttributesClosure(inScopePrefixes, inScopeNs, attributes).ProcessXElement));
      goto label_16;
label_15:
      if ((uint) flag >= 0U)
        goto label_13;
label_16:
      return enumerable;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public static XElement RemoveNamespaceAttributes(
      string[] inScopePrefixes,
      XNamespace[] inScopeNs,
      List<XAttribute> attributes,
      XElement e)
    {
      bool flag1 = e != null;
label_5:
      if (flag1)
        goto label_91;
      else
        goto label_6;
label_1:
      XElement xelement;
      do
      {
        xelement = e;
      }
      while (false);
      goto label_92;
label_3:
      int num1;
      int num2;
      if ((uint) num2 - (uint) flag1 >= 0U)
      {
        if ((uint) num1 >= 0U)
        {
          if ((num2 | -1) != 0)
            goto label_1;
          else
            goto label_92;
        }
        else
          goto label_10;
      }
      else
        goto label_5;
label_6:
      bool flag2;
      int index1;
      bool flag3;
      if ((uint) index1 - (uint) flag3 <= uint.MaxValue)
      {
        if (((flag2 ? 1 : 0) & 0) != 0 || (num1 | int.MinValue) == 0 || (uint) flag1 < 0U)
          goto label_3;
        else
          goto label_1;
      }
label_8:
      XAttribute xattribute;
      flag3 = xattribute != null;
label_9:
      if (!flag3)
      {
        if (false)
          goto label_40;
        else
          goto label_3;
      }
      else
        goto label_88;
label_12:
      if ((uint) num1 < 0U)
        goto label_71;
      else
        goto label_10;
label_14:
      int num3;
      int num4;
      if ((uint) num3 <= uint.MaxValue)
      {
        if ((num4 | 4) == 0)
          goto label_43;
      }
      else if ((uint) num1 < 0U)
        goto label_57;
      else
        goto label_39;
label_16:
      int index2;
      if ((uint) index2 - (uint) index1 < 0U)
        goto label_82;
      else
        goto label_12;
label_19:
      if (flag1)
        goto label_81;
      else
        goto label_12;
label_21:
      if (flag2)
        goto label_55;
label_22:
      int num5;
      if (((flag3 ? 1 : 0) | int.MinValue) != 0)
      {
        if ((uint) num3 - (uint) index2 >= 0U)
        {
          if ((num3 & 0) == 0)
          {
            if ((uint) num5 - (uint) num4 < 0U)
              goto label_21;
          }
          else
            goto label_19;
        }
        if ((num3 & 0) == 0)
          goto label_14;
        else
          goto label_10;
      }
      else
        goto label_39;
label_24:
      if ((num2 | 2) == 0)
        goto label_83;
      else
        goto label_22;
label_28:
      if ((num5 & 0) == 0)
      {
        if ((uint) index2 - (uint) num4 >= 0U)
          goto label_24;
        else
          goto label_35;
      }
      else
        goto label_1;
label_31:
      flag3 = xattribute != null;
      if (!flag3)
      {
        if ((uint) flag1 + (uint) index1 <= uint.MaxValue)
        {
          if ((uint) num4 <= uint.MaxValue)
            goto label_35;
          else
            goto label_28;
        }
        else
          goto label_39;
      }
      else
      {
        xattribute.Remove();
        attributes.Add(xattribute);
        if ((num3 | 4) != 0)
          goto label_34;
      }
label_32:
      if (!flag1)
      {
        if ((num1 | 4) != 0)
          goto label_31;
      }
      else
      {
        num5 = checked (attributes.Count - 1);
        goto label_52;
      }
label_34:
      if ((num1 | (int) byte.MaxValue) != 0 && (num1 & 0) == 0)
        goto label_28;
label_35:
      if ((uint) num2 - (uint) num1 > uint.MaxValue || (uint) num3 + (uint) num4 <= uint.MaxValue)
      {
        if ((uint) num2 < 0U)
        {
          if (((flag2 ? 1 : 0) | 3) != 0)
            goto label_5;
          else
            goto label_81;
        }
        else
          goto label_24;
      }
      else
        goto label_66;
label_36:
      int num6 = index2;
      num4 = num2;
      int num7 = num4;
      XNamespace xnamespace1;
      string localName1;
      if (num6 > num7)
      {
        if ((uint) num1 < 0U)
        {
          if ((uint) num3 - (uint) num5 >= 0U)
            goto label_32;
          else
            goto label_40;
        }
        else
          goto label_31;
      }
      else
      {
        XAttribute attribute = attributes[index2];
        localName1 = attribute.Name.LocalName;
        if ((uint) num1 + (uint) flag1 >= 0U)
        {
          xnamespace1 = attribute.Annotation<XNamespace>();
          flag2 = (object) xnamespace1 != null;
        }
        else if ((index1 & 0) == 0)
          goto label_47;
        else
          goto label_52;
      }
label_39:
      if (flag2)
        goto label_47;
label_40:
      checked { ++index2; }
      goto label_36;
label_42:
      xattribute = (XAttribute) null;
      if ((num3 & 0) != 0)
        goto label_81;
      else
        goto label_31;
label_43:
      xattribute.Remove();
      if ((index2 & 0) == 0)
        goto label_42;
      else
        goto label_46;
label_45:
      if (!flag3 || (uint) flag3 > uint.MaxValue)
        goto label_42;
      else
        goto label_43;
label_46:
      XNamespace xnamespace2;
      if (flag1)
      {
        flag3 = xnamespace2 == xnamespace1;
        if ((num1 | 1) == 0)
          goto label_69;
        else
          goto label_45;
      }
      else
        goto label_40;
label_47:
      string localName2;
      flag1 = localName2.Equals(localName1);
      if (((flag1 ? 1 : 0) & 0) == 0)
      {
        if ((uint) flag1 - (uint) flag1 <= uint.MaxValue)
          goto label_46;
        else
          goto label_74;
      }
label_52:
      if ((uint) num4 <= uint.MaxValue)
      {
        if ((uint) num4 - (uint) num1 >= 0U)
        {
          num2 = num5;
          index2 = 0;
          goto label_36;
        }
        else
          goto label_47;
      }
      else
        goto label_84;
label_55:
      flag1 = attributes != null;
      goto label_32;
label_57:
      flag2 = xattribute != null;
      if ((uint) flag1 >= 0U)
        goto label_21;
      else
        goto label_55;
label_58:
      int num8 = index1;
      num4 = num3;
      int num9 = num4;
      XNamespace inScopeN;
      string inScopePrefix;
      if (num8 > num9)
      {
        if (((flag2 ? 1 : 0) & 0) != 0)
        {
          if ((uint) num2 - (uint) flag2 >= 0U)
            goto label_63;
        }
        else
          goto label_57;
      }
      else
      {
        inScopePrefix = inScopePrefixes[index1];
        inScopeN = inScopeNs[index1];
        goto label_71;
      }
label_62:
      xattribute = (XAttribute) null;
      goto label_57;
label_63:
      if (!flag1)
      {
        if ((uint) flag1 + (uint) flag2 >= 0U)
          goto label_62;
      }
      else
        goto label_69;
label_65:
      if (((flag1 ? 1 : 0) & 0) == 0)
        goto label_58;
      else
        goto label_57;
label_66:
      if (((flag3 ? 1 : 0) & 0) != 0)
      {
        if (true)
          goto label_63;
        else
          goto label_74;
      }
      else
        goto label_62;
label_69:
      xattribute.Remove();
      if ((index1 | -2) != 0)
      {
        if ((num3 | -1) != 0)
        {
          if ((uint) num2 + (uint) num4 < 0U)
            goto label_14;
          else
            goto label_66;
        }
        else
          goto label_3;
      }
      else
        goto label_16;
label_71:
      flag2 = localName2.Equals(inScopePrefix);
      if (!flag2)
      {
        checked { ++index1; }
        goto label_65;
      }
      else
      {
        flag1 = xnamespace2 == inScopeN;
        goto label_63;
      }
label_74:
      num1 = checked (inScopePrefixes.Length - 1);
      num3 = num1;
      index1 = 0;
      goto label_58;
label_79:
      int num10 = 1;
label_80:
      flag2 = num10 != 0;
      if (flag2)
        goto label_74;
      else
        goto label_57;
label_81:
      if (inScopePrefixes != null)
      {
        if ((uint) num5 <= uint.MaxValue)
        {
          if (inScopeNs != null)
            goto label_79;
        }
        else
          goto label_9;
      }
      else
        goto label_83;
label_82:
      if ((uint) flag3 < 0U)
        goto label_81;
label_83:
      num10 = 0;
      goto label_80;
label_84:
      flag1 = (object) xnamespace2 != null;
      goto label_19;
label_88:
      XAttribute nextAttribute = xattribute.NextAttribute;
      flag1 = xattribute.IsNamespaceDeclaration;
      if (((flag3 ? 1 : 0) & 0) == 0)
      {
        if ((num5 | (int) byte.MaxValue) != 0)
        {
          if ((uint) num3 <= uint.MaxValue)
          {
            if (((flag1 ? 1 : 0) | -1) != 0)
            {
              if (!flag1)
              {
                if (true)
                {
                  if ((uint) flag3 - (uint) index2 < 0U)
                    goto label_24;
                }
                else
                  goto label_14;
              }
              else
              {
                xnamespace2 = xattribute.Annotation<XNamespace>();
                localName2 = xattribute.Name.LocalName;
                if ((uint) flag1 - (uint) flag1 < 0U)
                  goto label_81;
                else
                  goto label_84;
              }
            }
            else
              goto label_45;
          }
          else
            goto label_79;
        }
        else
          goto label_8;
      }
      else
        goto label_31;
label_10:
      xattribute = nextAttribute;
      goto label_8;
label_91:
      xattribute = e.FirstAttribute;
      goto label_8;
label_92:
      return xelement;
    }
  }
}
