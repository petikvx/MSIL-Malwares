// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: هx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 374CAC08-464B-4E84-B463-5CFD524FF26C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-74995e87513e47357c351f37565a1422202dace38dc789308d72417b5797b93e.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -1202476238;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1494658874)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              comparand = eventHandler1;
              num1 = -2114018846;
              continue;
            case 2:
              goto label_3;
            case 3:
              int num3 = eventHandler1 == comparand ? 65293701 : (num3 = 1325228318);
              num1 = num3 ^ (int) num2 * -2118212148;
              continue;
            case 4:
              EventHandler eventHandler2 = (EventHandler) Square.\u202C⁮‮​⁭⁮⁬⁪‬‍‫⁬​⁫‬⁫‌​‭‭⁪⁫‫‬⁫‪‎⁮‪‪⁭‬⁯⁬‏‭⁭⁯​‬‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * 354070600 ^ 716779119;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 948490803;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1837780220)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              EventHandler eventHandler2 = (EventHandler) Square.\u200D‎‪‫⁮‬‏⁪‮⁬‌⁪⁫‭​‎‬‌‌​‫‏⁮⁪‬⁪‮‌⁫⁪‏‍​⁯​⁪‭⁭‪‌‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              int num3 = eventHandler1 != comparand ? 1437409111 : (num3 = 655719225);
              num1 = num3 ^ (int) num2 * 1329320918;
              continue;
            case 3:
              comparand = eventHandler1;
              num1 = 957647210;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public string SpecialName
    {
      get
      {
        string specialName = Square.\u206F‭⁯‫‬‫⁪⁯‬⁯‫⁬‏‬⁫⁭​‎​⁮‬‭⁮⁪‫‪‫⁮⁭‭⁪‌⁪⁪‍‍‭‍‫⁬‮(this.CurrentSquare, \u003CModule\u003E.\u206D⁪‫‏⁬‬‮⁮‏‍‭‭‌​‍‫⁭⁬‮⁫⁯⁮‏‏‫‏‎⁯⁪‮‌⁯‫⁭‫‭‮⁯‎‎‮<string>(3064664306U), Square.\u200E‮⁭‮⁯⁬⁭‏‪⁪​‏‫​⁯‏‏‎⁪‬⁮‮‭‌​⁫‎⁪⁫‍‭⁬‭‏‎⁯‌‫‭‪‮((object) this.Piece));
label_1:
        int num1 = -840759177;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -527399996)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -258793305 ^ -1195118371;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
        string currentSquare = Square.\u206A‭‌‭⁭‎⁮‮‭⁭‍​‪⁯⁫⁯‍‭⁯‎⁮‏⁬⁭⁮‍‌⁭‪‏⁮‪⁫‪‍⁯‭⁪‪‮(Square.\u206A⁭‮‮‍‏⁮‭‮‎⁬‮⁯‬⁪⁮⁪‎⁪⁬‬‫⁭⁬‎⁮‪⁫​⁬⁮⁪‏​‮⁭‎⁪⁪⁫‮(\u003CModule\u003E.\u200B⁫‍‎​‮‏‪‎‪⁮⁫​‎‬‍‫‭‏‮‭‌‍‌‏‍⁪‮‌​​‬‌⁯‬‭‏‍‫⁪‮<string>(2226664338U), this.File).ToString(), (this.Rank + 1).ToString());
label_1:
        int num1 = 1250974975;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 421738397)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 25175490 ^ 1339117786;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
      EventHandler action = Square.Action;
      if (action == null)
        return;
      action((object) msg, (EventArgs) null);
label_3:
      int num1 = -1791415658;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -698354912)) % 3U)
        {
          case 0:
            goto label_6;
          case 1:
            num1 = (int) num2 * 581435787 ^ -602929537;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_6:
      return;
label_7:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
label_1:
      int num1 = 779121194;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 32849809)) % 6U)
        {
          case 0:
            this.Name = Square.\u206A‭‌‭⁭‎⁮‮‭⁭‍​‪⁯⁫⁯‍‭⁯‎⁮‏⁬⁭⁮‍‌⁭‪‏⁮‪⁫‪‍⁯‭⁪‪‮(Square.\u206A⁭‮‮‍‏⁮‭‮‎⁬‮⁯‬⁪⁮⁪‎⁪⁬‬‫⁭⁬‎⁮‪⁫​⁬⁮⁪‏​‮⁭‎⁪⁪⁫‮(\u003CModule\u003E.\u200B‌‭⁯‪⁫⁯‮⁬⁭⁭⁫‏‍⁮⁬⁮‮⁫⁯‎‮‫⁭​⁮‪‫​‌⁬⁫‮​⁮⁪‍‪⁪‭‮<string>(1902983099U), file).ToString(), (this.Rank + 1).ToString());
            num1 = (int) num2 * 853453733 ^ 1401944646;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.File = file;
            num1 = (int) num2 * 902942463 ^ 1754084764;
            continue;
          case 3:
            this.Board = Board;
            num1 = (int) num2 * 917531444 ^ 2088843571;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.Rank = rank;
            num1 = (int) num2 * -1098354497 ^ -1907558968;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public Square()
    {
      this.InitializeComponent();
      this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
    }

    private void SwitchPlayer()
    {
label_1:
      int num1 = -13363930;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -380880622)) % 9U)
        {
          case 0:
            flag = this.Board.WhosPlaying == PieceColor.White;
            num1 = (int) num2 * -1881929693 ^ -1753353726;
            continue;
          case 1:
            int num3 = !this.Board.DisableTurns ? 2106385507 : (num3 = 1688427759);
            num1 = num3 ^ (int) num2 * 143076171;
            continue;
          case 2:
            num1 = (int) num2 * -430940586 ^ -1760692459;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = -793840685;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * -1798065478 ^ -2089346921;
            continue;
          case 7:
            int num4 = flag ? -331712329 : (num4 = -66993525);
            num1 = num4 ^ (int) num2 * -1198304323;
            continue;
          case 8:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -1317614317;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private bool getSide(Square x)
    {
label_1:
      int num1 = 791865894;
      bool side;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 191802987)) % 4U)
        {
          case 0:
            num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
            break;
          case 1:
            if (!this.Board.DisableTurns)
            {
              num1 = (int) num2 * -92768760 ^ -695378065;
              continue;
            }
            num3 = 1;
            break;
          case 3:
            goto label_1;
          default:
            goto label_8;
        }
        side = num3 != 0;
        num1 = 1765495865;
      }
label_8:
      return side;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = -931993969;
      while (true)
      {
        uint num2;
        bool side;
        List<PossibleMoves> move;
        bool flag1;
        bool flag2;
        bool disableTurns;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ -2103408851)) % 79U)
        {
          case 0:
            num1 = -1364222632;
            continue;
          case 1:
            num1 = (int) num2 * -16527446 ^ -608896916;
            continue;
          case 2:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1316966025 ^ -1462234054;
            continue;
          case 3:
            to.HighLight();
            num1 = (int) num2 * -1555447243 ^ -1829471553;
            continue;
          case 4:
            num1 = (int) num2 * 8310314 ^ -1517345164;
            continue;
          case 5:
            num1 = (int) num2 * -1197876027 ^ 1625011963;
            continue;
          case 6:
            num1 = (int) num2 * -192107145 ^ 914873697;
            continue;
          case 7:
            num1 = (int) num2 * 1498527996 ^ -1299406895;
            continue;
          case 8:
            to = this;
            num1 = (int) num2 * 1307133784 ^ 309081594;
            continue;
          case 9:
            int num5 = !move.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? 1410906980 : (num5 = 447069426);
            num1 = num5 ^ (int) num2 * 2088752059;
            continue;
          case 10:
            num1 = (int) num2 * 1504401046 ^ -1242611207;
            continue;
          case 11:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 1373419395 ^ 397872389;
            continue;
          case 12:
            int num6 = !side ? 1459120524 : (num6 = 1752021390);
            num1 = num6 ^ (int) num2 * -6034654;
            continue;
          case 13:
            side = this.getSide(this.Board.From);
            num1 = -1376617696;
            continue;
          case 14:
            int num7 = to.Piece.Color != this.Board.From.Piece.Color ? -1561236097 : (num7 = -911110766);
            num1 = num7 ^ (int) num2 * 1467560719;
            continue;
          case 15:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 2095008452 ^ 1277285400;
            continue;
          case 16:
            this.msg = \u003CModule\u003E.\u200B⁫‍‎​‮‏‪‎‪⁮⁫​‎‬‍‫‭‏‮‭‌‍‌‏‍⁪‮‌​​‬‌⁯‬‭‏‍‫⁪‮<string>(3324247105U);
            num1 = (int) num2 * -371899338 ^ -331643718;
            continue;
          case 17:
            to.HighLight();
            this.Board.From = to;
            num1 = (int) num2 * 1136704946 ^ 1354399435;
            continue;
          case 18:
            this.msg = \u003CModule\u003E.\u206D⁪‫‏⁬‬‮⁮‏‍‭‭‌​‍‫⁭⁬‮⁫⁯⁮‏‏‫‏‎⁯⁪‮‌⁯‫⁭‫‭‮⁯‎‎‮<string>(2439194696U);
            num1 = (int) num2 * -1729869285 ^ -410865240;
            continue;
          case 19:
            num1 = (int) num2 * 648747406 ^ 1022254398;
            continue;
          case 20:
            this.Board.From = to;
            num1 = (int) num2 * -1804709613 ^ 1447907697;
            continue;
          case 21:
            if (this.Board.From == null)
            {
              num3 = 0;
              goto label_51;
            }
            else
            {
              num1 = (int) num2 * 1648145232 ^ -668223970;
              continue;
            }
          case 22:
            move = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * 1431446533 ^ 226778686;
            continue;
          case 23:
            int num8 = !(to.Piece == null & flag2) ? 170599582 : (num8 = 765559543);
            num1 = num8 ^ (int) num2 * 2076790305;
            continue;
          case 24:
            to.MovePawn(this.Board.From);
            num1 = -1623209322;
            continue;
          case 25:
            num1 = (int) num2 * -1495235317 ^ -425831970;
            continue;
          case 26:
            num3 = this.Board.From.Piece != null ? 1 : 0;
            goto label_51;
          case 27:
            num1 = -1706019228;
            continue;
          case 28:
            num1 = (int) num2 * -782558307 ^ -1898357201;
            continue;
          case 29:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -210637566 ^ 1571090393;
            continue;
          case 30:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1968144627 ^ 2131381937;
            continue;
          case 31:
            disableTurns = this.Board.DisableTurns;
            num1 = -57903629;
            continue;
          case 32:
            num1 = (int) num2 * 90185343 ^ -1975906509;
            continue;
          case 33:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1209593802 ^ -1289461877;
            continue;
          case 34:
            this.msg = \u003CModule\u003E.\u202C‬‎‬‍‪⁮‪‏⁬​‍⁫​‬‏⁫‭⁭⁪‬‫‬⁫‭‍‭‪⁮⁮⁪⁮⁭‎‭⁮⁭‬⁫⁯‮<string>(2758789506U);
            num1 = -2120604861;
            continue;
          case 35:
            num4 = this.getSide(to) ? 1 : 0;
            break;
          case 36:
            num1 = -675159230;
            continue;
          case 37:
            num1 = -1286340298;
            continue;
          case 38:
            num1 = (int) num2 * 998793570 ^ 443307657;
            continue;
          case 39:
            if (to.Piece != null)
            {
              num1 = -1287064422;
              continue;
            }
            num4 = 0;
            break;
          case 40:
            int num9 = this.Board.lights.MoveList[this.Board.From.Piece.Id].Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? 1591692602 : (num9 = 1846433403);
            num1 = num9 ^ (int) num2 * -1019145524;
            continue;
          case 41:
            flag1 = to.Piece.Id == this.Board.From.Piece.Id;
            num1 = (int) num2 * 285577805 ^ -283556899;
            continue;
          case 42:
            num1 = (int) num2 * -361825083 ^ -1380589912;
            continue;
          case 43:
            this.msg = \u003CModule\u003E.\u206D⁪‫‏⁬‬‮⁮‏‍‭‭‌​‍‫⁭⁬‮⁫⁯⁮‏‏‫‏‎⁯⁪‮‌⁯‫⁭‫‭‮⁯‎‎‮<string>(3690133916U);
            num1 = (int) num2 * -948630758 ^ 850614577;
            continue;
          case 44:
            num1 = (int) num2 * -1864877586 ^ -593293228;
            continue;
          case 45:
            num1 = (int) num2 * 1106038515 ^ 960346799;
            continue;
          case 46:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -1080813485 ^ 1605073337;
            continue;
          case 47:
            num1 = (int) num2 * 845651845 ^ 698888090;
            continue;
          case 48:
            num1 = (int) num2 * -25736636 ^ 386116800;
            continue;
          case 49:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * 1078497934 ^ 1932581370;
            continue;
          case 50:
            this.msg = \u003CModule\u003E.\u200B‌‭⁯‪⁫⁯‮⁬⁭⁭⁫‏‍⁮⁬⁮‮⁫⁯‎‮‫⁭​⁮‪‫​‌⁬⁫‮​⁮⁪‍‪⁪‭‮<string>(3202090039U);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -722189165 ^ -359541411;
            continue;
          case 51:
            num1 = (int) num2 * 114085091 ^ 1082950491;
            continue;
          case 52:
            to.HighLight();
            num1 = (int) num2 * -131888402 ^ 1679644713;
            continue;
          case 53:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 427285716 ^ -1626135742;
            continue;
          case 54:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200B‌‭⁯‪⁫⁯‮⁬⁭⁭⁫‏‍⁮⁬⁮‮⁫⁯‎‮‫⁭​⁮‪‫​‌⁬⁫‮​⁮⁪‍‪⁪‭‮<string>(782022598U);
            num1 = (int) num2 * 145342643 ^ 818274302;
            continue;
          case 55:
            num1 = (int) num2 * -1241923356 ^ -366851877;
            continue;
          case 56:
            num1 = (int) num2 * 1514786379 ^ 1599955130;
            continue;
          case 57:
            num1 = (int) num2 * -289228318 ^ 419439492;
            continue;
          case 58:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -2039260077 ^ -868971543;
            continue;
          case 59:
            int num10 = disableTurns ? -334040055 : (num10 = -1473531569);
            num1 = num10 ^ (int) num2 * 248876542;
            continue;
          case 60:
            this.msg = Square.\u202D⁮⁫⁫‍⁪​‮​⁯‮‪⁮⁬‫‮‎⁮⁫‌⁯‍‫⁬⁫‏‬⁪‍‍‎​‌⁬‬⁪‮‪‏⁯‮(\u003CModule\u003E.\u200B‌‭⁯‪⁫⁯‮⁬⁭⁭⁫‏‍⁮⁬⁮‮⁫⁯‎‮‫⁭​⁮‪‫​‌⁬⁫‮​⁮⁪‍‪⁪‭‮<string>(4053028114U), (object) move.Count);
            num1 = (int) num2 * 1888552124 ^ -1714271856;
            continue;
          case 61:
            to.HighLight();
            num1 = (int) num2 * 2080089038 ^ -1522242953;
            continue;
          case 62:
            num1 = (int) num2 * -2074467798 ^ -25238092;
            continue;
          case 63:
            num1 = (int) num2 * 150504492 ^ -205720463;
            continue;
          case 64:
            num1 = (int) num2 * 315557459 ^ 1911998906;
            continue;
          case 65:
            num1 = (int) num2 * 840846062 ^ 742294739;
            continue;
          case 66:
            int num11 = !flag1 ? -1244491997 : (num11 = -596568639);
            num1 = num11 ^ (int) num2 * -1440998384;
            continue;
          case 67:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = -1113264742;
            continue;
          case 68:
            this.msg = \u003CModule\u003E.\u202C‬‎‬‍‪⁮‪‏⁬​‍⁫​‬‏⁫‭⁭⁪‬‫‬⁫‭‍‭‪⁮⁮⁪⁮⁭‎‭⁮⁭‬⁫⁯‮<string>(3569906008U);
            num1 = (int) num2 * -1262449238 ^ 1792956391;
            continue;
          case 69:
            num1 = -1425587238;
            continue;
          case 70:
            int num12 = Square.\u200B‌‏‍‮⁮‌⁭‏⁭‌⁮⁮‫⁬⁯⁬‭‬‌​‮‪⁫‍⁭‍‮⁮⁪‫‍‮‍‌‬​‪‪⁭‮(e) != MouseButtons.Left ? 1346136422 : (num12 = 415186119);
            num1 = num12 ^ (int) num2 * -1158135887;
            continue;
          case 71:
            goto label_1;
          case 72:
            int num13;
            num1 = num13 = flag2 ? -480895933 : (num13 = -1323187097);
            continue;
          case 73:
            num1 = (int) num2 * 1348529454 ^ 2073065130;
            continue;
          case 74:
            int num14 = this.Board.From.Piece.Kind == Pieces.Pawn ? 514946182 : (num14 = 1018098984);
            num1 = num14 ^ (int) num2 * 2071953354;
            continue;
          case 76:
            int num15;
            num1 = num15 = this.Board.From.Piece.Color == to.Piece.Color ? -1889716747 : (num15 = -1692895526);
            continue;
          case 77:
            this.Board.From = (Square) null;
            num1 = (int) num2 * -929422273 ^ 1876950730;
            continue;
          case 78:
            this.msg = \u003CModule\u003E.\u202C‬‎‬‍‪⁮‪‏⁬​‍⁫​‬‏⁫‭⁭⁪‬‫‬⁫‭‍‭‪⁮⁮⁪⁮⁭‎‭⁮⁭‬⁫⁯‮<string>(2758789506U);
            num1 = (int) num2 * 977187816 ^ -1404734323;
            continue;
          default:
            goto label_86;
        }
        int num16;
        num1 = num16 = num4 == 0 ? -1590138327 : (num16 = -1883721582);
        continue;
label_51:
        flag2 = num3 != 0;
        num1 = -1229326913;
      }
label_86:
      Square.action(this.msg);
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = 1556031136;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1020402217)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 326748967 ^ -1512929750;
            continue;
          case 1:
            int num3 = this.Board.From == null ? -1426366739 : (num3 = -1836832036);
            num1 = num3 ^ (int) num2 * 817004081;
            continue;
          case 2:
            num1 = (int) num2 * -1985281480 ^ -1638068297;
            continue;
          case 3:
            num1 = (int) num2 * -60148103 ^ -1165390489;
            continue;
          case 4:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1673060341 ^ 779100183;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * -933592577 ^ -1366520125;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void CaptPawn(Square from)
    {
label_1:
      int num1 = -367658703;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -929973654)) % 32U)
        {
          case 0:
            goto label_1;
          case 1:
            int num5 = !flag4 ? -1979811256 : (num5 = -676642430);
            num1 = num5 ^ (int) num2 * 116104466;
            continue;
          case 2:
            num1 = (int) num2 * -844509325 ^ 1178977666;
            continue;
          case 3:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 1483853312 ^ 2057839368;
            continue;
          case 4:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 5:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = -24603004;
            continue;
          case 6:
            this.handleBlackCastling();
            num1 = (int) num2 * -144093923 ^ 325915121;
            continue;
          case 7:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * -858149415 ^ 1500810134;
            continue;
          case 8:
            flag5 = flag1;
            num1 = (int) num2 * 1581236258 ^ 824907502;
            continue;
          case 9:
            num1 = -989343433;
            continue;
          case 10:
            flag1 = true;
            num1 = (int) num2 * -319931451 ^ 1696308085;
            continue;
          case 11:
            flag1 = true;
            num1 = (int) num2 * 1985896762 ^ -1227870595;
            continue;
          case 12:
            num1 = (int) num2 * 123600320 ^ -1121262058;
            continue;
          case 13:
            num1 = -2029357926;
            continue;
          case 14:
            int num6;
            num1 = num6 = from.Piece.Color != PieceColor.White ? -85164680 : (num6 = -605279795);
            continue;
          case 15:
            int num7 = !flag6 ? 266400376 : (num7 = 1794835518);
            num1 = num7 ^ (int) num2 * -1202108263;
            continue;
          case 16:
            int num8;
            num1 = num8 = this.Piece.Color != PieceColor.Black ? -989343433 : (num8 = -805112205);
            continue;
          case 17:
            this.Piece = from.Piece;
            num1 = -943062476;
            continue;
          case 18:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = -1602789605;
            continue;
          case 19:
            num1 = (int) num2 * -131617694 ^ 941804317;
            continue;
          case 20:
            if (flag5)
            {
              num1 = (int) num2 * 834790995 ^ 999769210;
              continue;
            }
            goto label_57;
          case 21:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 1280168999 ^ -1069572818;
              continue;
            }
            num4 = 0;
            goto label_34;
          case 22:
            int num9 = !flag2 ? 1384545607 : (num9 = 1260699680);
            num1 = num9 ^ (int) num2 * 491243728;
            continue;
          case 23:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_34;
          case 24:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 225877855 ^ 793307686;
              continue;
            }
            num3 = 0;
            break;
          case 25:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 1099326950 ^ -1190465510;
            continue;
          case 26:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            this.handleWhiteCastling();
            num1 = (int) num2 * -1194711874 ^ 1293667390;
            continue;
          case 27:
            flag6 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 555530125 ^ 1480379322;
            continue;
          case 29:
            from.Piece = (ChessPiece) null;
            num1 = -1495867006;
            continue;
          case 30:
            flag1 = false;
            flag3 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 1825404744 ^ -458428923;
            continue;
          case 31:
            flag4 = flag3;
            num1 = (int) num2 * -420195666 ^ -1696444263;
            continue;
          default:
            goto label_40;
        }
        flag2 = num3 != 0;
        num1 = -1720800356;
        continue;
label_34:
        int num10;
        num1 = num10 = num4 != 0 ? -1994269439 : (num10 = -1298081981);
      }
label_40:
      Promotion promotion = new Promotion(Square.\u202C‍‭⁭‏‮‬‮‭‏‌‌‌‌‫‬‬‍‌‍​‮⁬‏‪‪‪⁯‬‌‪‌​⁮‪‌‫‏⁭‬‮());
      try
      {
label_42:
        int num11 = -1358181373;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ -929973654)) % 4U)
          {
            case 1:
              int num13 = (int) Square.\u206F‪‏‭‫⁬⁪⁬⁫⁬‍‮⁯⁭‫‎⁭⁮‍⁬‮‫‮‭⁮⁬‍‫‪‮‏⁬⁬​‭⁮​‭‭‎‮((Form) promotion);
              num11 = (int) num12 * -602929967 ^ 1023676553;
              continue;
            case 2:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * -1324218710 ^ 1152490426;
              continue;
            case 3:
              goto label_42;
            default:
              goto label_53;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_47:
          int num14 = -1226354761;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -929973654)) % 4U)
            {
              case 1:
                Square.\u202E⁫⁯⁭‎‬‌‫‌⁬⁮⁫‏‭‍‌⁬⁯⁭‌⁮‬⁭‌⁪‪‌‏‭⁪‌‪⁬‌⁫‏​‍⁫‫‮((IDisposable) promotion);
                num14 = (int) num15 * 1031149226 ^ -145957213;
                continue;
              case 2:
                goto label_47;
              case 3:
                num14 = (int) num15 * -1923832728 ^ -504846006;
                continue;
              default:
                goto label_52;
            }
          }
        }
label_52:;
      }
label_53:
label_54:
      int num16 = -1956216292;
label_55:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ -929973654)) % 5U)
        {
          case 0:
            goto label_54;
          case 1:
            num16 = (int) num17 * -395344957 ^ 772346092;
            continue;
          case 2:
            goto label_56;
          case 3:
            goto label_57;
          case 4:
            this.SwitchPlayer();
            num16 = (int) num17 * 496253308 ^ -2068119425;
            continue;
          default:
            goto label_49;
        }
      }
label_56:
      return;
label_49:
      return;
label_57:
      this.Board.lights.FindAllMoves();
      PlaySound.Play();
      num16 = -423716001;
      goto label_55;
    }

    private void MovePawn(Square from)
    {
      ChessPiece chessPiece = (ChessPiece) null;
      this.Piece = from.Piece;
label_1:
      int num1 = -594114105;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -871812569)) % 34U)
        {
          case 0:
            from.Piece = (ChessPiece) null;
            num1 = -423693697;
            continue;
          case 1:
            num3 = this.Rank == 4 ? 1 : 0;
            goto label_27;
          case 2:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -157391777 ^ 1701830402;
              continue;
            }
            num4 = 0;
            break;
          case 3:
            goto label_1;
          case 4:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * 603462616 ^ -2096809557;
            continue;
          case 5:
            flag4 = flag3;
            num1 = (int) num2 * -1397155972 ^ -1565415442;
            continue;
          case 6:
            num1 = (int) num2 * -643717560 ^ 1624979651;
            continue;
          case 7:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -1047242572 ^ 1273969495;
              continue;
            }
            num5 = 0;
            goto label_37;
          case 8:
            num1 = (int) num2 * -1732485294 ^ 1325812709;
            continue;
          case 9:
            int num6 = !flag8 ? -981699435 : (num6 = -1594215927);
            num1 = num6 ^ (int) num2 * -607981503;
            continue;
          case 10:
            this.Board.lastPassantPawn = (ChessPiece) null;
            flag2 = this.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * -2048538992 ^ 1711755069;
            continue;
          case 11:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 12:
            num1 = (int) num2 * 1531891956 ^ 1612369936;
            continue;
          case 13:
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * -840216505 ^ -310181033;
            continue;
          case 14:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            chessPiece = this.handleBlackCastling();
            num1 = -266008595;
            continue;
          case 15:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -32627259 ^ -292671061;
            continue;
          case 16:
            if (this.Rank == 3)
            {
              num3 = 1;
              goto label_27;
            }
            else
            {
              num1 = (int) num2 * -198957245 ^ 638067450;
              continue;
            }
          case 18:
            num1 = (int) num2 * 1851260423 ^ -1100585638;
            continue;
          case 19:
            if (flag4)
            {
              num1 = (int) num2 * 2080096679 ^ 1807197560;
              continue;
            }
            goto label_83;
          case 20:
            flag1 = this.Piece.Color == PieceColor.White;
            flag6 = flag1;
            num1 = (int) num2 * -1986713344 ^ 1011597903;
            continue;
          case 21:
            num1 = (int) num2 * -1154120557 ^ -1896857887;
            continue;
          case 22:
            int num7 = flag2 ? 504161813 : (num7 = 1980299130);
            num1 = num7 ^ (int) num2 * 1700532769;
            continue;
          case 23:
            flag3 = false;
            num1 = -309416649;
            continue;
          case 24:
            num5 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_37;
          case 25:
            num1 = -1153045232;
            continue;
          case 26:
            int num8 = !flag6 ? -1087114529 : (num8 = -18554652);
            num1 = num8 ^ (int) num2 * -934755659;
            continue;
          case 27:
            int num9 = flag7 ? 1886454099 : (num9 = 116538593);
            num1 = num9 ^ (int) num2 * 1614410754;
            continue;
          case 28:
            num1 = -1986222213;
            continue;
          case 29:
            flag3 = true;
            num1 = (int) num2 * -1440127581 ^ 1420155734;
            continue;
          case 30:
            int num10 = !flag5 ? -1175069159 : (num10 = -1225016894);
            num1 = num10 ^ (int) num2 * -2110457221;
            continue;
          case 31:
            num1 = (int) num2 * 747527910 ^ 605297169;
            continue;
          case 32:
            num1 = -1097319424;
            continue;
          case 33:
            flag3 = true;
            num1 = (int) num2 * -688419157 ^ 1148608665;
            continue;
          default:
            goto label_45;
        }
        flag5 = num4 != 0;
        num1 = -1609891043;
        continue;
label_27:
        flag7 = num3 != 0;
        num1 = -1181940758;
        continue;
label_37:
        flag8 = num5 != 0;
        num1 = -1356251804;
      }
label_45:
      Promotion promotion = new Promotion(Square.\u202C‍‭⁭‏‮‬‮‭‏‌‌‌‌‫‬‬‍‌‍​‮⁬‏‪‪‪⁯‬‌‪‌​⁮‪‌‫‏⁭‬‮());
      try
      {
label_47:
        int num11 = -603441266;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ -871812569)) % 6U)
          {
            case 0:
              num11 = (int) num12 * -1082171469 ^ 2004934936;
              continue;
            case 2:
              goto label_47;
            case 3:
              num11 = (int) num12 * -953037885 ^ -9095594;
              continue;
            case 4:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * 714919455 ^ 506071520;
              continue;
            case 5:
              int num13 = (int) Square.\u206F‪‏‭‫⁬⁪⁬⁫⁬‍‮⁯⁭‫‎⁭⁮‍⁬‮‫‮‭⁮⁬‍‫‪‮‏⁬⁬​‭⁮​‭‭‎‮((Form) promotion);
              num11 = (int) num12 * -830371610 ^ 652791407;
              continue;
            default:
              goto label_59;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_54:
          int num14 = -1478156968;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -871812569)) % 3U)
            {
              case 1:
                Square.\u202E⁫⁯⁭‎‬‌‫‌⁬⁮⁫‏‭‍‌⁬⁯⁭‌⁮‬⁭‌⁪‪‌‏‭⁪‌‪⁬‌⁫‏​‍⁫‫‮((IDisposable) promotion);
                num14 = (int) num15 * -1144534556 ^ -1953109760;
                continue;
              case 2:
                goto label_54;
              default:
                goto label_58;
            }
          }
        }
label_58:;
      }
label_59:
label_60:
      int num16 = -1662402571;
label_61:
      while (true)
      {
        uint num17;
        bool flag9;
        bool isOnCheck;
        Square square1;
        int file;
        int rank;
        bool flag10;
        Square square2;
        switch ((num17 = (uint) (num16 ^ -871812569)) % 47U)
        {
          case 0:
            from.Piece = this.Piece;
            num16 = (int) num17 * 1944693910 ^ -2001703725;
            continue;
          case 1:
            this.Board.lights.FindAllMoves();
            num16 = -1009221456;
            continue;
          case 2:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * -533641439 ^ 119769937;
            continue;
          case 3:
            num16 = -64053372;
            continue;
          case 4:
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * -466735349 ^ 1159356447;
            continue;
          case 5:
            num16 = (int) num17 * 1332924009 ^ -234706976;
            continue;
          case 6:
            num16 = (int) num17 * -2050835048 ^ -1545033078;
            continue;
          case 7:
            goto label_60;
          case 8:
            flag10 = flag1;
            num16 = (int) num17 * -930775930 ^ 1437411689;
            continue;
          case 9:
            int num18 = flag10 ? 1412608352 : (num18 = 1498052821);
            num16 = num18 ^ (int) num17 * 1807641627;
            continue;
          case 10:
            num16 = (int) num17 * 2039351298 ^ -1531832137;
            continue;
          case 11:
            num16 = (int) num17 * 1115103497 ^ -1847523797;
            continue;
          case 12:
            this.msg = \u003CModule\u003E.\u206D⁪‫‏⁬‬‮⁮‏‍‭‭‌​‍‫⁭⁬‮⁫⁯⁮‏‏‫‏‎⁯⁪‮‌⁯‫⁭‫‭‮⁯‎‎‮<string>(222746092U);
            num16 = (int) num17 * -1156018537 ^ -1903823251;
            continue;
          case 13:
            this.Board.WhiteCanCastleQueenSide = true;
            num16 = (int) num17 * 729133470 ^ 1916858383;
            continue;
          case 14:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = -1911642951;
            continue;
          case 15:
            if (file != 5)
            {
              num16 = (int) num17 * -1692768895 ^ 1807248350;
              continue;
            }
            square2 = this.Board[7, rank];
            break;
          case 16:
            num16 = -1376025571;
            continue;
          case 17:
            PlaySound.Play();
            num16 = -1589998821;
            continue;
          case 18:
            this.Piece = (ChessPiece) null;
            num16 = (int) num17 * 329488167 ^ -1871449452;
            continue;
          case 19:
            flag9 = true;
            int num19 = this.Piece.Kind == Pieces.King ? -183678499 : (num19 = -731100923);
            num16 = num19 ^ (int) num17 * 47088195;
            continue;
          case 20:
            num16 = (int) num17 * -1436675186 ^ -1536083312;
            continue;
          case 21:
            num16 = (int) num17 * 1554638208 ^ 1864752675;
            continue;
          case 22:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            num16 = -329838987;
            continue;
          case 23:
            this.Board.lights.FindAllMoves();
            num16 = (int) num17 * -530119883 ^ -1819914724;
            continue;
          case 24:
            square2 = this.Board[0, rank];
            break;
          case 25:
            num16 = (int) num17 * 177806508 ^ 2879577;
            continue;
          case 26:
            num16 = (int) num17 * 570329607 ^ -2142245283;
            continue;
          case 27:
            this.SwitchPlayer();
            num16 = (int) num17 * 593299865 ^ 1115579185;
            continue;
          case 28:
            int num20 = !flag1 ? -337759 : (num20 = -138742043);
            num16 = num20 ^ (int) num17 * 442048996;
            continue;
          case 29:
            int num21 = !isOnCheck ? -444530089 : (num21 = -172931613);
            num16 = num21 ^ (int) num17 * -1377616478;
            continue;
          case 30:
            num16 = (int) num17 * 1795490907 ^ 1437150235;
            continue;
          case 31:
            goto label_83;
          case 32:
            goto label_62;
          case 33:
            flag9 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * 1367725444 ^ 686405969;
            continue;
          case 34:
            int num22;
            num16 = num22 = flag9 ? -960741755 : (num22 = -1319825788);
            continue;
          case 35:
            this.msg = \u003CModule\u003E.\u200B‌‭⁯‪⁫⁯‮⁬⁭⁭⁫‏‍⁮⁬⁮‮⁫⁯‎‮‫⁭​⁮‪‫​‌⁬⁫‮​⁮⁪‍‪⁪‭‮<string>(104108228U);
            num16 = (int) num17 * 2103377967 ^ 674978530;
            continue;
          case 36:
            isOnCheck = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -1926022964 ^ -1537305966;
            continue;
          case 37:
            num16 = (int) num17 * -999834673 ^ -1205446799;
            continue;
          case 38:
            int num23 = this.Board.lights.KingColorOnCheck != this.Piece.Color ? -188596163 : (num23 = -122678830);
            num16 = num23 ^ (int) num17 * -899716300;
            continue;
          case 39:
            num16 = -1833605473;
            continue;
          case 40:
            num16 = (int) num17 * 1797920394 ^ -1615119658;
            continue;
          case 41:
            int num24;
            num16 = num24 = chessPiece != null ? -1351605188 : (num24 = -537459931);
            continue;
          case 42:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * 331990366 ^ 1881906705;
            continue;
          case 43:
            this.Board.BlackCanCastleQueenSide = true;
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * -842746992 ^ 774384647;
            continue;
          case 44:
            square1.Piece = chessPiece;
            num16 = (int) num17 * -759144619 ^ -131734916;
            continue;
          case 45:
            file = chessPiece.Current.File;
            rank = chessPiece.Current.Rank;
            num16 = (int) num17 * -1215805894 ^ 524307977;
            continue;
          case 46:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = -123221649;
            continue;
          default:
            goto label_56;
        }
        square1 = square2;
        num16 = -1157382019;
      }
label_62:
      return;
label_56:
      return;
label_83:
      this.Board.lights.IsOnCheck = false;
      num16 = -2026782864;
      goto label_61;
    }

    private ChessPiece handleBlackCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
      if (this.Board.BlackCanCastleKingSide)
        goto label_35;
label_1:
      int num1 = 2144480343;
label_2:
      bool flag1;
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        bool flag2;
        Square square1;
        Square square2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1177222421)) % 37U)
        {
          case 0:
            goto label_1;
          case 1:
            square2.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * -1947821162 ^ 1216203351;
            continue;
          case 3:
            int num4 = this.Piece.Kind == Pieces.Rook ? -1325136657 : (num4 = -1518845717);
            num1 = num4 ^ (int) num2 * 561865023;
            continue;
          case 4:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * -1470707911 ^ -864859827;
            continue;
          case 5:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * 1305648304 ^ -76812819;
            continue;
          case 6:
            num1 = 323731300;
            continue;
          case 7:
            this.Board.BlackCanCastleKingSide = false;
            num1 = 1455773297;
            continue;
          case 8:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1542291474 ^ -1166836293;
            continue;
          case 9:
            int num5 = Square.\u206C​​‏‪‌‎⁮‫‏⁬⁬‮‍‮⁮‭⁬⁪‬‭‎⁭‎⁬‎‬‍⁫‬‭⁮‪‮​‎⁮‌⁪⁪‮(this.Piece.Home.Name, \u003CModule\u003E.\u200B⁫‍‎​‮‏‪‎‪⁮⁫​‎‬‍‫‭‏‮‭‌‍‌‏‍⁪‮‌​​‬‌⁯‬‭‏‍‫⁪‮<string>(1523335966U)) ? -1945111142 : (num5 = -1524343950);
            num1 = num5 ^ (int) num2 * 170271194;
            continue;
          case 10:
            num1 = 938867124;
            continue;
          case 11:
            num1 = 806604771;
            continue;
          case 12:
            num1 = (int) num2 * 1048046485 ^ -1216793480;
            continue;
          case 13:
            num1 = (int) num2 * 66046165 ^ -978476615;
            continue;
          case 14:
            num1 = (int) num2 * 439376619 ^ 428308978;
            continue;
          case 15:
            num1 = (int) num2 * 412198368 ^ -121017453;
            continue;
          case 16:
            square1 = this.Board[5, 7];
            num1 = (int) num2 * -97880177 ^ -1437046803;
            continue;
          case 17:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 18:
            int num6 = !flag2 ? 1568401038 : (num6 = 1653119496);
            num1 = num6 ^ (int) num2 * 668442195;
            continue;
          case 19:
            num1 = (int) num2 * -431566816 ^ 27512676;
            continue;
          case 20:
            num1 = (int) num2 * -174186867 ^ 1299473676;
            continue;
          case 21:
            goto label_34;
          case 22:
            square1.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * -28647496 ^ 1640902902;
            continue;
          case 23:
            square2 = this.Board[3, 7];
            num1 = (int) num2 * -1285108450 ^ 1559897698;
            continue;
          case 24:
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * -1277214955 ^ 79913957;
            continue;
          case 25:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1210647855 ^ -1986120619;
            continue;
          case 26:
            if (this.Piece.Kind == Pieces.King)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * -220517943 ^ 1409313134;
            continue;
          case 27:
            flag2 = this.Piece.Current.File == 6;
            num1 = 687816491;
            continue;
          case 28:
            this.Board.BlackCanCastleQueenSide = false;
            this.Board.BlackCanCastleKingSide = false;
            num1 = 1390772306;
            continue;
          case 29:
            int num7 = !flag1 ? 2053393238 : (num7 = 451115300);
            num1 = num7 ^ (int) num2 * -1615116981;
            continue;
          case 30:
            chessPiece2 = chessPiece1;
            num1 = 47960079;
            continue;
          case 31:
            num1 = 933738643;
            continue;
          case 32:
            int num8 = this.Piece.Current.File != 2 ? 216693050 : (num8 = 1723541890);
            num1 = num8 ^ (int) num2 * -1798233131;
            continue;
          case 33:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 2017040919 ^ 254025963;
            continue;
          case 34:
            num1 = (int) num2 * 1173166399 ^ 101873785;
            continue;
          case 35:
            num1 = (int) num2 * -1442629318 ^ -1538309418;
            continue;
          case 36:
            num1 = (int) num2 * -2123978249 ^ 276071593;
            continue;
          default:
            goto label_43;
        }
        int num9;
        num1 = num9 = num3 != 0 ? 1673056742 : (num9 = 323731300);
      }
label_34:
      int num10 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
      goto label_36;
label_43:
      return chessPiece2;
label_35:
      num10 = 1;
label_36:
      flag1 = num10 != 0;
      num1 = 1321343091;
      goto label_2;
    }

    private ChessPiece handleWhiteCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
label_1:
      int num1 = 892710224;
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        bool flag1;
        Square square1;
        bool flag2;
        Square square2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1642358041)) % 38U)
        {
          case 0:
            num1 = (int) num2 * 586511311 ^ -1520679846;
            continue;
          case 1:
            square1 = this.Board[3, 0];
            num1 = (int) num2 * -874391839 ^ -844844729;
            continue;
          case 2:
            int num5 = flag1 ? -995450451 : (num5 = -1536646589);
            num1 = num5 ^ (int) num2 * -1660319706;
            continue;
          case 3:
            num1 = (int) num2 * -823751516 ^ 1737861880;
            continue;
          case 4:
            num1 = 345710578;
            continue;
          case 5:
            flag2 = Square.\u206C​​‏‪‌‎⁮‫‏⁬⁬‮‍‮⁮‭⁬⁪‬‭‎⁭‎⁬‎‬‍⁫‬‭⁮‪‮​‎⁮‌⁪⁪‮(this.Piece.Home.Name, \u003CModule\u003E.\u200B‌‭⁯‪⁫⁯‮⁬⁭⁭⁫‏‍⁮⁬⁮‮⁫⁯‎‮‫⁭​⁮‪‫​‌⁬⁫‮​⁮⁪‍‪⁪‭‮<string>(2524175669U));
            num1 = (int) num2 * -1864999857 ^ -2121204056;
            continue;
          case 6:
            num3 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            goto label_19;
          case 7:
            square1.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * -1027131278 ^ -1574860629;
            continue;
          case 8:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 9:
            num1 = (int) num2 * -773691384 ^ 1378278787;
            continue;
          case 10:
            num1 = (int) num2 * -1065668876 ^ 70553258;
            continue;
          case 11:
            square2 = this.Board[5, 0];
            square2.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * -376902164 ^ -2051730441;
            continue;
          case 12:
            num1 = (int) num2 * 1433140936 ^ -125642853;
            continue;
          case 13:
            num1 = 793944590;
            continue;
          case 14:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 881538659;
            continue;
          case 15:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 1563995414 ^ 1140590204;
            continue;
          case 16:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -1254808902 ^ 1361628656;
            continue;
          case 17:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = 1265011128;
            continue;
          case 18:
            int num6 = flag2 ? -1825171803 : (num6 = -283204759);
            num1 = num6 ^ (int) num2 * 164305240;
            continue;
          case 19:
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * 223690298 ^ 1112728984;
            continue;
          case 20:
            num1 = (int) num2 * -552108520 ^ -632676473;
            continue;
          case 21:
            chessPiece2 = chessPiece1;
            num1 = 125753828;
            continue;
          case 22:
            num1 = (int) num2 * 950273850 ^ -2133022181;
            continue;
          case 23:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 1397838384 ^ -57549437;
              continue;
            }
            num4 = 1;
            break;
          case 24:
            num1 = 815905191;
            continue;
          case 25:
            flag1 = this.Piece.Current.File == 2;
            num1 = 902097661;
            continue;
          case 27:
            int num7 = flag3 ? -1926649120 : (num7 = -450502407);
            num1 = num7 ^ (int) num2 * -1903778333;
            continue;
          case 28:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * 373427171 ^ 1403729927;
            continue;
          case 29:
            if (this.Board.WhiteCanCastleKingSide)
            {
              num3 = 1;
              goto label_19;
            }
            else
            {
              num1 = (int) num2 * 1636299616 ^ 1494254361;
              continue;
            }
          case 30:
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * 73181379 ^ -1844143800;
            continue;
          case 31:
            flag3 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * -1691270647 ^ 1246557489;
            continue;
          case 32:
            int num8;
            num1 = num8 = this.Piece.Current.File != 6 ? 329340516 : (num8 = 1905933126);
            continue;
          case 33:
            num1 = (int) num2 * -694239962 ^ -813626715;
            continue;
          case 34:
            goto label_1;
          case 35:
            num1 = (int) num2 * 611585014 ^ -1618585022;
            continue;
          case 36:
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1419897572 ^ 623359021;
            continue;
          case 37:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * 1891463342 ^ 1127231387;
            continue;
          default:
            goto label_45;
        }
        int num9;
        num1 = num9 = num4 != 0 ? 1714944526 : (num9 = 345710578);
        continue;
label_19:
        int num10;
        num1 = num10 = num3 != 0 ? 1663138446 : (num10 = 793944590);
      }
label_45:
      return chessPiece2;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = 675683240;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1107113166)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            Square.\u200C⁫‎‭‬‎⁬‎‪⁪‪‌⁬⁯‪⁮‎⁭‮⁫‮‮⁭‪‪‭⁮⁬‭‪‪​‬⁯‪⁪⁫‫‏‪‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * 1095318660 ^ -1977772763;
            continue;
          case 3:
            num1 = (int) num2 * 1291065244 ^ -1995907109;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = -1677119489;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -156338122)) % 8U)
        {
          case 0:
            num3 = this.components != null ? 1 : 0;
            break;
          case 1:
            if (!disposing)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 1021074541 ^ -157168469;
            continue;
          case 2:
            num1 = (int) num2 * 1974488022 ^ 797570902;
            continue;
          case 3:
            goto label_3;
          case 4:
            base.Dispose(disposing);
            num1 = -1090950939;
            continue;
          case 5:
            Square.\u202E⁫⁯⁭‎‬‌‫‌⁬⁮⁫‏‭‍‌⁬⁯⁭‌⁮‬⁭‌⁪‪‌‏‭⁪‌‪⁬‌⁫‏​‍⁫‫‮((IDisposable) this.components);
            num1 = (int) num2 * -15176264 ^ 1433327564;
            continue;
          case 6:
            int num4 = !flag ? 415177386 : (num4 = 609711115);
            num1 = num4 ^ (int) num2 * -1392674568;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_13;
        }
        flag = num3 != 0;
        num1 = -134321896;
      }
label_3:
      return;
label_13:;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = -1995793911;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -278450156)) % 14U)
        {
          case 0:
            num1 = (int) num2 * -1234697730 ^ 1714857234;
            continue;
          case 1:
            goto label_3;
          case 2:
            Square.\u202A‎‌‌⁮⁭⁫‏​⁮⁯⁮‫⁭‬⁯⁪‌⁯⁮⁫‏⁪‍‏​⁫⁮⁮⁪‍⁪‪‌‪‭⁮‏‫‭‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -1080793225 ^ -1308186081;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 367628785 ^ -61699919;
            continue;
          case 5:
            Square.\u206F‬⁭‏⁫⁬‮⁮‎⁫​​⁫⁮‏‍⁯‫⁬‫​‪⁪⁯‭⁪⁯⁬‭⁬‮‌⁬‭​​⁯⁯‌⁪‮((Control) this, new Padding(0));
            num1 = (int) num2 * 2080801292 ^ 315728997;
            continue;
          case 6:
            Square.\u206F​⁫‎‫‪⁬‪‍‮‪⁮⁫⁮‎⁬‮‬⁮‪⁯⁯‍⁪‪‪‎⁫‫‭‮⁭‭⁬​​⁪‍⁬‪‮((Control) this, false);
            num1 = (int) num2 * 476344472 ^ 1492669036;
            continue;
          case 7:
            Square.\u206A‬​⁫‌‮⁮‪‫‭‫‬‌‍‌‎⁫‏‍⁮‪‬​⁯​⁪⁫⁮‮‍⁭‌⁮‎⁯⁪‎⁬‭‎‮((Control) this);
            num1 = (int) num2 * -1383037633 ^ -1523463875;
            continue;
          case 8:
            num1 = (int) num2 * -520844001 ^ 1190629660;
            continue;
          case 9:
            Square.\u200E⁮​‌⁯​‫‭‫⁪‌⁯‭‮⁪​‫⁬‎⁯‬⁪⁮⁯⁫‪‌‎‫⁬‬⁫⁪‌‎⁪‪‮‍‪‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * 665904535 ^ 986736835;
            continue;
          case 10:
            Square.\u200F⁭‍⁮‭‭⁪⁫‌⁯​⁭‏‏⁭⁫⁮‬‌‏‬‪⁭‪‫‎‍⁮‬‬‍‏⁫⁫‏⁫⁭‫‎‍‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * -1890393069 ^ 1763375490;
            continue;
          case 11:
            num1 = (int) num2 * -1884351590 ^ -32312929;
            continue;
          case 12:
            Square.\u206F‌‪‪⁬⁪‫‌⁯‭‪​‪‭‌‫‮⁮⁯⁬‏‍‫⁪⁮​‮‮‪‭‬⁭⁬‏⁬​⁪‫‪⁬‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * 1192651522 ^ 323179885;
            continue;
          case 13:
            this.Name = \u003CModule\u003E.\u200B‌‭⁯‪⁫⁯‮⁬⁭⁭⁫‏‍⁮⁬⁮‮⁫⁯‎‮‫⁭​⁮‪‫​‌⁬⁫‮​⁮⁪‍‪⁪‭‮<string>(329324875U);
            num1 = (int) num2 * -2041931444 ^ -280712504;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    static Delegate \u202C⁮‮​⁭⁮⁬⁪‬‍‫⁬​⁫‬⁫‌​‭‭⁪⁫‫‬⁫‪‎⁮‪‪⁭‬⁯⁬‏‭⁭⁯​‬‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u200D‎‪‫⁮‬‏⁪‮⁬‌⁪⁫‭​‎‬‌‌​‫‏⁮⁪‬⁪‮‌⁫⁪‏‍​⁯​⁪‭⁭‪‌‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u200E‮⁭‮⁯⁬⁭‏‪⁪​‏‫​⁯‏‏‎⁪‬⁮‮‭‌​⁫‎⁪⁫‍‭⁬‭‏‎⁯‌‫‭‪‮([In] object obj0) => obj0.ToString();

    static string \u206F‭⁯‫‬‫⁪⁯‬⁯‫⁬‏‬⁫⁭​‎​⁮‬‭⁮⁪‫‪‫⁮⁭‭⁪‌⁪⁪‍‍‭‍‫⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u206A⁭‮‮‍‏⁮‭‮‎⁬‮⁯‬⁪⁮⁪‎⁪⁬‬‫⁭⁬‎⁮‪⁫​⁬⁮⁪‏​‮⁭‎⁪⁪⁫‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u206A‭‌‭⁭‎⁮‮‭⁭‍​‪⁯⁫⁯‍‭⁯‎⁮‏⁬⁭⁮‍‌⁭‪‏⁮‪⁫‪‍⁯‭⁪‪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u200B‌‏‍‮⁮‌⁭‏⁭‌⁮⁮‫⁬⁯⁬‭‬‌​‮‪⁫‍⁭‍‮⁮⁪‫‍‮‍‌‬​‪‪⁭‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u202D⁮⁫⁫‍⁪​‮​⁯‮‪⁮⁬‫‮‎⁮⁫‌⁯‍‫⁬⁫‏‬⁪‍‍‎​‌⁬‬⁪‮‪‏⁯‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u202C‍‭⁭‏‮‬‮‭‏‌‌‌‌‫‬‬‍‌‍​‮⁬‏‪‪‪⁯‬‌‪‌​⁮‪‌‫‏⁭‬‮() => Cursor.Position;

    static DialogResult \u206F‪‏‭‫⁬⁪⁬⁫⁬‍‮⁯⁭‫‎⁭⁮‍⁬‮‫‮‭⁮⁬‍‫‪‮‏⁬⁬​‭⁮​‭‭‎‮([In] Form obj0) => obj0.ShowDialog();

    static void \u202E⁫⁯⁭‎‬‌‫‌⁬⁮⁫‏‭‍‌⁬⁯⁭‌⁮‬⁭‌⁪‪‌‏‭⁪‌‪⁬‌⁫‏​‍⁫‫‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u206C​​‏‪‌‎⁮‫‏⁬⁬‮‍‮⁮‭⁬⁪‬‭‎⁭‎⁬‎‬‍⁫‬‭⁮‪‮​‎⁮‌⁪⁪‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u200C⁫‎‭‬‎⁬‎‪⁪‪‌⁬⁯‪⁮‎⁭‮⁫‮‮⁭‪‪‭⁮⁬‭‪‪​‬⁯‪⁪⁫‫‏‪‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u206A‬​⁫‌‮⁮‪‫‭‫‬‌‍‌‎⁫‏‍⁮‪‬​⁯​⁪⁫⁮‮‍⁭‌⁮‎⁯⁪‎⁬‭‎‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u202A‎‌‌⁮⁭⁫‏​⁮⁯⁮‫⁭‬⁯⁪‌⁯⁮⁫‏⁪‍‏​⁫⁮⁮⁪‍⁪‪‌‪‭⁮‏‫‭‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u200E⁮​‌⁯​‫‭‫⁪‌⁯‭‮⁪​‫⁬‎⁯‬⁪⁮⁯⁫‪‌‎‫⁬‬⁫⁪‌‎⁪‪‮‍‪‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u206F‌‪‪⁬⁪‫‌⁯‭‪​‪‭‌‫‮⁮⁯⁬‏‍‫⁪⁮​‮‮‪‭‬⁭⁬‏⁬​⁪‫‪⁬‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206F‬⁭‏⁫⁬‮⁮‎⁫​​⁫⁮‏‍⁯‫⁬‫​‪⁪⁯‭⁪⁯⁬‭⁬‮‌⁬‭​​⁯⁯‌⁪‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u200F⁭‍⁮‭‭⁪⁫‌⁯​⁭‏‏⁭⁫⁮‬‌‏‬‪⁭‪‫‎‍⁮‬‬‍‏⁫⁫‏⁫⁭‫‎‍‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206F​⁫‎‫‪⁬‪‍‮‪⁮⁫⁮‎⁬‮‬⁮‪⁯⁯‍⁪‪‪‎⁫‫‭‮⁭‭⁬​​⁪‍⁬‪‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
