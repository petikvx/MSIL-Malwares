// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: طv, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8DDF840D-AD0E-4D2F-A03C-7E334C2C97A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2abb16d594f4b36fc8b8aab8cab7736350421c619cec8e12e8975e87f7a99faa.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 300468699;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 878428498)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              comparand = eventHandler1;
              num1 = 2041664522;
              continue;
            case 2:
              goto label_3;
            case 3:
              EventHandler eventHandler2 = (EventHandler) Square.\u206A⁭⁪⁫⁮​⁯⁬‍‪‫‫‌‫​‏⁭​‏‬‭‌‎​‎⁪‮⁮‏⁬⁭‏‌⁬⁮⁬⁬‍⁮⁮‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * 1289076613 ^ -349070338;
              continue;
            case 4:
              int num3 = eventHandler1 == comparand ? -1121494218 : (num3 = -1262922057);
              num1 = num3 ^ (int) num2 * 932336479;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 1428110215;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 917485735)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              int num3 = eventHandler1 != comparand ? 1268209195 : (num3 = 1857326525);
              num1 = num3 ^ (int) num2 * 1481955426;
              continue;
            case 2:
              goto label_3;
            case 3:
              comparand = eventHandler1;
              eventHandler2 = (EventHandler) Square.\u206A‬‪‍⁭⁬‌⁫‪‬​⁫‏‮‬‮‭‭‍‮‬⁮⁭⁯⁪⁪​⁯‏‭​‎⁫‎‬‌‭‪⁮⁫‮((Delegate) comparand, (Delegate) value);
              num1 = 1101542073;
              continue;
            case 4:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * 910836329 ^ 229234271;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName
    {
      get
      {
label_1:
        int num1 = -612927878;
        string specialName;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -582785720)) % 4U)
          {
            case 1:
              num1 = (int) num2 * -1778625504 ^ 1118488988;
              continue;
            case 2:
              specialName = Square.\u206A‮‫‮⁭‏⁫‮‏‎⁪⁬​‌‮⁬⁪⁯⁭‏⁯‭‍‎‎⁮‍‮⁪‮​‮‪⁮⁪‍‭⁮‏⁮‮(this.CurrentSquare, \u003CModule\u003E.\u200F‮​⁫‍⁬⁪‪‏‍⁯⁫⁪⁭⁬‮‍‫‭⁫‮‬‭⁮‮‭⁪⁫⁫‭⁮⁬⁭⁪⁪‌‫‭‍⁭‮<string>(2689744062U), Square.\u200C‎‎‬‮‭‍⁮‍⁮⁪⁭⁬‌‪‍‬‍⁯‌⁪‎‏​‫⁭⁭​‪‮‍‬‎‌‪‮‮⁪‬‪‮((object) this.Piece));
              num1 = (int) num2 * 2089619204 ^ 416880873;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return specialName;
      }
    }

    public string CurrentSquare => Square.\u206E​⁮⁬‬⁮‏‏‌⁭‎‍⁯‫‎⁮‪‍‎‬‫⁫‫‌​⁪‮‌‮‮​⁬⁫‍‬⁫⁯​​⁬‮(Square.\u206C‏‫⁪⁮‬⁮‮⁬⁪⁯⁮⁬‌​‬‮⁮⁪‮‭⁯​⁮‪‏⁪⁪‪‏‌‮⁮‪‪‮‬‎‬⁮‮(\u003CModule\u003E.\u200D‭⁫⁪⁫‫‮‭‍⁫‭⁪‍‬‌‎⁬‌‪‏‎‭‫‭‏⁫‬‎‎⁬‎‎⁬‫‌‍‍‭‌‭‮<string>(205659715U), this.File).ToString(), (this.Rank + 1).ToString());

    public static void action(string msg)
    {
label_1:
      int num1 = -209991684;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -135636256)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * 1462511921 ^ 2040499703;
              continue;
            }
            goto label_5;
          case 2:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
label_1:
      int num1 = -2045655588;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2130174271)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Board = Board;
            this.File = file;
            num1 = (int) num2 * -843604538 ^ -727452319;
            continue;
          case 2:
            this.Rank = rank;
            this.Name = Square.\u206E​⁮⁬‬⁮‏‏‌⁭‎‍⁯‫‎⁮‪‍‎‬‫⁫‫‌​⁪‮‌‮‮​⁬⁫‍‬⁫⁯​​⁬‮(Square.\u206C‏‫⁪⁮‬⁮‮⁬⁪⁯⁮⁬‌​‬‮⁮⁪‮‭⁯​⁮‪‏⁪⁪‪‏‌‮⁮‪‪‮‬‎‬⁮‮(\u003CModule\u003E.\u200D‭⁫⁪⁫‫‮‭‍⁫‭⁪‍‬‌‎⁬‌‪‏‎‭‫‭‏⁫‬‎‎⁬‎‎⁬‫‌‍‍‭‌‭‮<string>(205659715U), file).ToString(), (this.Rank + 1).ToString());
            num1 = (int) num2 * 2065619566 ^ -1934771774;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public Square()
    {
label_1:
      int num1 = -1658218790;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1459089409)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
            num1 = (int) num2 * -117049430 ^ -358950943;
            continue;
          case 2:
            this.InitializeComponent();
            num1 = (int) num2 * 996101231 ^ 1154247156;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * -750725864 ^ 606481765;
            continue;
          case 5:
            num1 = (int) num2 * 1519979514 ^ 272738162;
            continue;
          case 6:
            num1 = (int) num2 * -1668723329 ^ -281332691;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    private void SwitchPlayer()
    {
label_1:
      int num1 = 1441686173;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1845574714)) % 8U)
        {
          case 0:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * 807401959 ^ -608042717;
            continue;
          case 1:
            num1 = (int) num2 * 866594909 ^ 388804627;
            continue;
          case 2:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = 37976510;
            continue;
          case 3:
            int num3 = this.Board.WhosPlaying == PieceColor.White ? 170028928 : (num3 = 1915849338);
            num1 = num3 ^ (int) num2 * -419228202;
            continue;
          case 4:
            num1 = 1110829020;
            continue;
          case 5:
            goto label_1;
          case 6:
            goto label_3;
          case 7:
            int num4 = this.Board.DisableTurns ? -960620411 : (num4 = -2103403168);
            num1 = num4 ^ (int) num2 * 2091086335;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private bool getSide(Square x)
    {
label_1:
      int num1 = 1640865824;
      bool side;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1341142228)) % 5U)
        {
          case 0:
            num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
            break;
          case 2:
            num1 = (int) num2 * 524135700 ^ 1144453326;
            continue;
          case 3:
            goto label_1;
          case 4:
            if (this.Board.DisableTurns)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 1192475506 ^ 1699831165;
            continue;
          default:
            goto label_9;
        }
        side = num3 != 0;
        num1 = 502797961;
      }
label_9:
      return side;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
      bool flag1 = Square.\u206B‬‪⁮‎‭‭⁯‎‍‭⁬⁫‪⁫‮‫‮‮⁪‭​‏⁯‎‫⁬⁬⁬‎⁮⁫‎‍‎‪‬‍⁬‪‮(e) == MouseButtons.Left;
label_1:
      int num1 = 384274196;
      while (true)
      {
        uint num2;
        bool disableTurns;
        bool flag2;
        List<PossibleMoves> move1;
        List<PossibleMoves> move2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool side;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ 807734021)) % 80U)
        {
          case 0:
            int num5 = side ? -1616434630 : (num5 = -2131397689);
            num1 = num5 ^ (int) num2 * 1386630473;
            continue;
          case 1:
            int num6 = !flag1 ? 370152221 : (num6 = 2135194113);
            num1 = num6 ^ (int) num2 * -210600862;
            continue;
          case 2:
            num1 = (int) num2 * -790838343 ^ -1354940089;
            continue;
          case 3:
            this.hideMoves(this.Board.From);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 738859986 ^ -1450569758;
            continue;
          case 4:
            int num7 = !flag4 ? 1285257257 : (num7 = 1590516007);
            num1 = num7 ^ (int) num2 * -1826348167;
            continue;
          case 5:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -1751386323 ^ -740890584;
            continue;
          case 6:
            num1 = (int) num2 * 427213464 ^ 231167685;
            continue;
          case 7:
            num3 = this.getSide(to) ? 1 : 0;
            goto label_86;
          case 8:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -900194430 ^ 1868992354;
            continue;
          case 9:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 531305763 ^ 1157901098;
            continue;
          case 10:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200F‮​⁫‍⁬⁪‪‏‍⁯⁫⁪⁭⁬‮‍‫‭⁫‮‬‭⁮‮‭⁪⁫⁫‭⁮⁬⁭⁪⁪‌‫‭‍⁭‮<string>(2510984448U);
            num1 = (int) num2 * 297812787 ^ -1565725787;
            continue;
          case 11:
            move2 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * 1126641929 ^ -800813212;
            continue;
          case 12:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200D‭⁫⁪⁫‫‮‭‍⁫‭⁪‍‬‌‎⁬‌‪‏‎‭‫‭‏⁫‬‎‎⁬‎‎⁬‫‌‍‍‭‌‭‮<string>(1283961832U);
            num1 = (int) num2 * -1310486933 ^ 1469636633;
            continue;
          case 13:
            to.MovePawn(this.Board.From);
            num1 = 2081682739;
            continue;
          case 14:
            if (this.Board.From != null)
            {
              num1 = (int) num2 * -777472109 ^ -1156401145;
              continue;
            }
            num4 = 0;
            break;
          case 15:
            num1 = (int) num2 * 1313005618 ^ -971407551;
            continue;
          case 16:
            goto label_3;
          case 17:
            num1 = (int) num2 * 591784696 ^ -2083378546;
            continue;
          case 18:
            num1 = (int) num2 * -381114852 ^ 2144419533;
            continue;
          case 19:
            this.msg = \u003CModule\u003E.\u200F⁪⁯‫⁭⁯⁫‏‏​‍​‮⁮⁮‏​‬⁬⁬⁯⁫‪⁮⁮⁯⁭⁭‭⁬‪‪‎⁭‭⁪‫⁬⁮‮‮<string>(1464365284U);
            num1 = (int) num2 * 653857070 ^ 426985908;
            continue;
          case 20:
            num1 = (int) num2 * 684495846 ^ 987490303;
            continue;
          case 21:
            this.Board.From = to;
            num1 = (int) num2 * 810557664 ^ 1176907180;
            continue;
          case 22:
            int num8 = flag3 ? -847410207 : (num8 = -37331000);
            num1 = num8 ^ (int) num2 * -900507089;
            continue;
          case 23:
            this.msg = Square.\u200E​‏‬​⁪‏‍‪‫‏⁪‍⁪‌‪‬⁮⁪⁮⁫‏‎​‭⁫‍⁪‏⁬​⁫⁬⁫⁯⁮⁫⁯‌‮‮(\u003CModule\u003E.\u200F⁪⁯‫⁭⁯⁫‏‏​‍​‮⁮⁮‏​‬⁬⁬⁯⁫‪⁮⁮⁯⁭⁭‭⁬‪‪‎⁭‭⁪‫⁬⁮‮‮<string>(3784821425U), (object) move1.Count);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1065735819 ^ 892337209;
            continue;
          case 24:
            num4 = this.Board.From.Piece != null ? 1 : 0;
            break;
          case 25:
            int num9 = !move1.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? -431827792 : (num9 = -1319848121);
            num1 = num9 ^ (int) num2 * 1671132304;
            continue;
          case 26:
            Square.action(this.msg);
            num1 = 596810887;
            continue;
          case 27:
            to.HighLight();
            num1 = (int) num2 * 2120260497 ^ -1887344238;
            continue;
          case 28:
            side = this.getSide(this.Board.From);
            num1 = 187442805;
            continue;
          case 29:
            this.msg = \u003CModule\u003E.\u200E⁫‏⁭‫‪⁪⁬‬‫‪‭‬⁪⁯‮‌‮‪⁯‎⁮‎⁪⁯⁮​⁯‬‌‪‭⁭‫‬‭‪⁭‪‫‮<string>(3601349613U);
            num1 = (int) num2 * 1476622552 ^ 175270196;
            continue;
          case 30:
            if (to.Piece != null)
            {
              num1 = 146589090;
              continue;
            }
            num3 = 0;
            goto label_86;
          case 31:
            flag5 = to.Piece.Id == this.Board.From.Piece.Id;
            num1 = (int) num2 * -14064071 ^ -376436826;
            continue;
          case 32:
            int num10 = disableTurns ? -1992372844 : (num10 = -1389828609);
            num1 = num10 ^ (int) num2 * -793825154;
            continue;
          case 33:
            to.HighLight();
            num1 = (int) num2 * 1845803384 ^ -448308302;
            continue;
          case 34:
            this.msg = \u003CModule\u003E.\u206A⁪⁫‍⁫‫⁪‫‮⁮‌‬⁮‬⁮​‪⁪⁭‬⁮‪⁯‬‬⁬⁯‌⁯⁭⁭⁮⁬‎⁪‬⁫‌‍⁯‮<string>(535782513U);
            num1 = (int) num2 * -195310911 ^ -835707889;
            continue;
          case 35:
            num1 = (int) num2 * -366911816 ^ -1175842320;
            continue;
          case 36:
            num1 = (int) num2 * -694787018 ^ 997907079;
            continue;
          case 37:
            num1 = (int) num2 * 1600283808 ^ -782393386;
            continue;
          case 38:
            num1 = (int) num2 * -160777168 ^ -2137560232;
            continue;
          case 39:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 850952828 ^ -1730351507;
            continue;
          case 40:
            flag7 = flag6;
            num1 = 85800590;
            continue;
          case 41:
            int num11;
            num1 = num11 = this.Board.From.Piece.Color != to.Piece.Color ? 1587563189 : (num11 = 219110446);
            continue;
          case 42:
            int num12 = to.Piece.Color != this.Board.From.Piece.Color ? 1611243496 : (num12 = 1528240161);
            num1 = num12 ^ (int) num2 * -856948196;
            continue;
          case 43:
            num1 = (int) num2 * 263617746 ^ 296625918;
            continue;
          case 44:
            num1 = (int) num2 * 2134015920 ^ 394735900;
            continue;
          case 45:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -1641075996 ^ -500854230;
            continue;
          case 46:
            num1 = (int) num2 * 1162237511 ^ -721532794;
            continue;
          case 47:
            int num13 = flag2 ? -1627834163 : (num13 = -1193652509);
            num1 = num13 ^ (int) num2 * 334408277;
            continue;
          case 48:
            num1 = (int) num2 * -436213204 ^ 256338783;
            continue;
          case 49:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 606196541 ^ 1405068526;
            continue;
          case 50:
            num1 = 2137138944;
            continue;
          case 51:
            num1 = (int) num2 * -95274588 ^ 1046422675;
            continue;
          case 52:
            int num14 = flag5 ? -666653880 : (num14 = -852143792);
            num1 = num14 ^ (int) num2 * 264356171;
            continue;
          case 53:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = 681886177;
            continue;
          case 54:
            to.HighLight();
            num1 = (int) num2 * 1998836828 ^ -329806768;
            continue;
          case 55:
            num1 = (int) num2 * 1854194921 ^ -1384624327;
            continue;
          case 56:
            flag2 = this.Board.From.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * 1718714997 ^ 626441074;
            continue;
          case 57:
            this.msg = \u003CModule\u003E.\u200F⁪⁯‫⁭⁯⁫‏‏​‍​‮⁮⁮‏​‬⁬⁬⁯⁫‪⁮⁮⁯⁭⁭‭⁬‪‪‎⁭‭⁪‫⁬⁮‮‮<string>(4579461U);
            num1 = (int) num2 * 2047607160 ^ -769702726;
            continue;
          case 58:
            num1 = 1847449399;
            continue;
          case 59:
            int num15 = flag7 ? 157100205 : (num15 = 905265897);
            num1 = num15 ^ (int) num2 * 548115126;
            continue;
          case 60:
            num1 = 2137138944;
            continue;
          case 61:
            this.msg = \u003CModule\u003E.\u200D‭⁫⁪⁫‫‮‭‍⁫‭⁪‍‬‌‎⁬‌‪‏‎‭‫‭‏⁫‬‎‎⁬‎‎⁬‫‌‍‍‭‌‭‮<string>(3176256415U);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1030277905 ^ -1184259091;
            continue;
          case 62:
            goto label_1;
          case 63:
            num1 = (int) num2 * -1677382085 ^ 2095232697;
            continue;
          case 64:
            num1 = 1847449399;
            continue;
          case 65:
            to.HighLight();
            num1 = (int) num2 * -603866633 ^ -1526686659;
            continue;
          case 66:
            int num16 = move2.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? 363999588 : (num16 = 48378482);
            num1 = num16 ^ (int) num2 * -1164131866;
            continue;
          case 67:
            num1 = (int) num2 * -1430925759 ^ 2078443398;
            continue;
          case 68:
            this.Board.From = (Square) null;
            num1 = (int) num2 * 45048164 ^ 331721437;
            continue;
          case 69:
            num1 = 386980255;
            continue;
          case 70:
            move1 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * 1223406560 ^ -754275230;
            continue;
          case 71:
            this.msg = \u003CModule\u003E.\u206A⁪⁫‍⁫‫⁪‫‮⁮‌‬⁮‬⁮​‪⁪⁭‬⁮‪⁯‬‬⁬⁯‌⁯⁭⁭⁮⁬‎⁪‬⁫‌‍⁯‮<string>(3185236791U);
            num1 = 2137138944;
            continue;
          case 72:
            num1 = (int) num2 * 1380899688 ^ 2036518713;
            continue;
          case 73:
            num1 = (int) num2 * 2006332600 ^ -1405647624;
            continue;
          case 74:
            to = this;
            num1 = (int) num2 * -1582998833 ^ 1073541037;
            continue;
          case 75:
            disableTurns = this.Board.DisableTurns;
            num1 = 1851599941;
            continue;
          case 76:
            num1 = (int) num2 * 1895080401 ^ 2039381453;
            continue;
          case 77:
            num1 = (int) num2 * -1187668189 ^ 1901939822;
            continue;
          case 78:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 200150605 ^ -1737511072;
            continue;
          case 79:
            num1 = (int) num2 * 1592068863 ^ -357074927;
            continue;
          default:
            goto label_88;
        }
        flag6 = num4 != 0;
        flag4 = to.Piece == null & flag6;
        num1 = 77943745;
        continue;
label_86:
        flag3 = num3 != 0;
        num1 = 439473875;
      }
label_3:
      return;
label_88:;
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = -1359663899;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1080280529)) % 8U)
        {
          case 0:
            goto label_3;
          case 1:
            int num3 = !flag ? -301218369 : (num3 = -233402999);
            num1 = num3 ^ (int) num2 * 124456560;
            continue;
          case 2:
            flag = this.Board.From != null;
            num1 = (int) num2 * 686114080 ^ -126547762;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1729912962 ^ -2112048406;
            continue;
          case 5:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * 1325666908 ^ -1779473788;
            continue;
          case 6:
            num1 = (int) num2 * -1983977760 ^ 813116267;
            continue;
          case 7:
            num1 = (int) num2 * -1190239821 ^ -2013187990;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void CaptPawn(Square from)
    {
label_1:
      int num1 = 1744637024;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1993606051)) % 33U)
        {
          case 0:
            int num5 = flag5 ? -787965999 : (num5 = -977007988);
            num1 = num5 ^ (int) num2 * -2030792940;
            continue;
          case 1:
            flag5 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 654167643 ^ -2123474434;
            continue;
          case 2:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = 759036216;
            continue;
          case 3:
            int num6;
            num1 = num6 = from.Piece.Color == PieceColor.White ? 728477921 : (num6 = 1817023252);
            continue;
          case 4:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * -305856267 ^ -1553958500;
            continue;
          case 6:
            flag2 = true;
            num1 = (int) num2 * -165736278 ^ -1416970567;
            continue;
          case 7:
            int num7 = flag4 ? 1660727025 : (num7 = 574021107);
            num1 = num7 ^ (int) num2 * 1657408881;
            continue;
          case 8:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -863852417 ^ -1241643882;
            continue;
          case 9:
            num1 = (int) num2 * 2122001586 ^ 1075069019;
            continue;
          case 10:
            num1 = (int) num2 * 711053446 ^ -1602934713;
            continue;
          case 11:
            int num8 = flag1 ? -2031622914 : (num8 = -1008953481);
            num1 = num8 ^ (int) num2 * 2136012794;
            continue;
          case 12:
            goto label_1;
          case 13:
            flag2 = false;
            int num9 = this.Piece.Color != PieceColor.White ? -519939226 : (num9 = -1652099882);
            num1 = num9 ^ (int) num2 * -2115138246;
            continue;
          case 14:
            int num10;
            num1 = num10 = this.Piece.Color != PieceColor.Black ? 239284953 : (num10 = 867616573);
            continue;
          case 15:
            num3 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 16:
            num1 = 239284953;
            continue;
          case 17:
            this.handleBlackCastling();
            num1 = (int) num2 * 88172114 ^ -932757876;
            continue;
          case 18:
            num1 = (int) num2 * 1134192522 ^ 1564614517;
            continue;
          case 19:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 1847998568 ^ -119989912;
            continue;
          case 20:
            this.handleWhiteCastling();
            num1 = (int) num2 * 1504341463 ^ 1630704924;
            continue;
          case 21:
            flag3 = flag2;
            num1 = (int) num2 * -888048484 ^ 2144107991;
            continue;
          case 22:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 1169795653 ^ 1719245329;
            continue;
          case 23:
            num1 = (int) num2 * -1456650856 ^ -249041800;
            continue;
          case 24:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              goto label_24;
            }
            else
            {
              num1 = (int) num2 * 1610524520 ^ 1231093364;
              continue;
            }
          case 25:
            num1 = 591103186;
            continue;
          case 26:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1963590471 ^ -1863085079;
            continue;
          case 27:
            if (flag3)
            {
              num1 = (int) num2 * -639304062 ^ -1212508394;
              continue;
            }
            goto label_59;
          case 28:
            from.Piece = (ChessPiece) null;
            num1 = 470317602;
            continue;
          case 29:
            flag2 = true;
            num1 = (int) num2 * -993882351 ^ 56080353;
            continue;
          case 30:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_24;
          case 31:
            this.Piece = from.Piece;
            num1 = 1135931286;
            continue;
          case 32:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = 1730213814;
            continue;
          default:
            goto label_41;
        }
        flag1 = num3 != 0;
        num1 = 1281775777;
        continue;
label_24:
        flag4 = num4 != 0;
        num1 = 791149501;
      }
label_41:
      Promotion promotion = new Promotion(Square.\u200F⁫⁯‏‭‏⁭‎‏⁪‮‌⁭⁪⁫⁪‮⁮‎⁫⁮⁭⁮‍‌‬⁮⁯⁫‏⁭‬‪‭⁬‮‪‫​‫‮());
      try
      {
label_43:
        int num11 = 1798401290;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 1993606051)) % 5U)
          {
            case 1:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * 1467152767 ^ -392934469;
              continue;
            case 2:
              int num13 = (int) Square.\u202A‎⁯‮‮‫‪⁮‍⁯‌‍⁬‪⁯‏⁪‍⁮‌‫⁮‎⁯⁫‮⁫‫‏‫‌‪⁭‬‏⁬‮⁮‬‮((Form) promotion);
              num11 = (int) num12 * 188413371 ^ -69798416;
              continue;
            case 3:
              num11 = (int) num12 * -237723179 ^ -1098894637;
              continue;
            case 4:
              goto label_43;
            default:
              goto label_55;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_49:
          int num14 = 1773814125;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 1993606051)) % 4U)
            {
              case 1:
                num14 = (int) num15 * -278345819 ^ 1595837522;
                continue;
              case 2:
                Square.\u200D‍⁫⁮‮⁯‪⁮‬⁮‌⁭‫​‫⁪⁫‮⁪‮‭⁯‪‎‌‪‏‌‪⁫⁫‏‍​‮‎‏‪‫‍‮((IDisposable) promotion);
                num14 = (int) num15 * -877732282 ^ -510441958;
                continue;
              case 3:
                goto label_49;
              default:
                goto label_54;
            }
          }
        }
label_54:;
      }
label_55:
label_56:
      int num16 = 1733825401;
label_57:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ 1993606051)) % 4U)
        {
          case 0:
            goto label_56;
          case 1:
            PlaySound.Play();
            this.SwitchPlayer();
            num16 = (int) num17 * -258288715 ^ -459529035;
            continue;
          case 2:
            goto label_59;
          case 3:
            goto label_58;
          default:
            goto label_51;
        }
      }
label_58:
      return;
label_51:
      return;
label_59:
      this.Board.lights.FindAllMoves();
      num16 = 240115974;
      goto label_57;
    }

    private void MovePawn(Square from)
    {
label_1:
      int num1 = 1962613843;
      ChessPiece chessPiece;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ 464645233)) % 32U)
        {
          case 0:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 1:
            this.Piece = from.Piece;
            num1 = (int) num2 * 2110694556 ^ -1748755125;
            continue;
          case 2:
            chessPiece = (ChessPiece) null;
            num1 = (int) num2 * 67230210 ^ 46494612;
            continue;
          case 4:
            if (flag3)
            {
              num1 = (int) num2 * 1297835394 ^ -2048570468;
              continue;
            }
            goto label_55;
          case 5:
            num1 = (int) num2 * 25585546 ^ 924195456;
            continue;
          case 6:
            num1 = (int) num2 * 783542399 ^ 1213059655;
            continue;
          case 7:
            num1 = 9728174;
            continue;
          case 8:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * -53175034 ^ -286864978;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num2 * 25685265 ^ -1196210538;
            continue;
          case 11:
            num1 = 1441285280;
            continue;
          case 12:
            this.Board.lastPassantPawn = (ChessPiece) null;
            num1 = (int) num2 * -413386421 ^ -648003387;
            continue;
          case 13:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            chessPiece = this.handleWhiteCastling();
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 983454883 ^ -365851050;
            continue;
          case 14:
            flag3 = false;
            num1 = 2126765222;
            continue;
          case 15:
            num1 = 1699324575;
            continue;
          case 16:
            int num6 = this.Piece.Kind == Pieces.Pawn ? 1964437547 : (num6 = 558441535);
            num1 = num6 ^ (int) num2 * -1700674406;
            continue;
          case 17:
            from.Piece = (ChessPiece) null;
            num1 = 55145781;
            continue;
          case 18:
            int num7 = flag4 ? 182800288 : (num7 = 820279894);
            num1 = num7 ^ (int) num2 * 1587838822;
            continue;
          case 19:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_24;
          case 20:
            int num8 = flag2 ? 737945752 : (num8 = 774920010);
            num1 = num8 ^ (int) num2 * 1614228843;
            continue;
          case 21:
            flag3 = true;
            num1 = (int) num2 * -1971058013 ^ 1569050153;
            continue;
          case 22:
            int num9 = !flag1 ? 615475277 : (num9 = 1084447);
            num1 = num9 ^ (int) num2 * -1064519642;
            continue;
          case 23:
            flag1 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 1236307889 ^ -1731180800;
            continue;
          case 24:
            num1 = 1715003917;
            continue;
          case 25:
            int num10 = !flag5 ? -1073332779 : (num10 = -1247227022);
            num1 = num10 ^ (int) num2 * 640471075;
            continue;
          case 26:
            if (this.Rank != 3)
            {
              num1 = (int) num2 * 585076134 ^ 364467542;
              continue;
            }
            num5 = 1;
            goto label_39;
          case 27:
            num5 = this.Rank == 4 ? 1 : 0;
            goto label_39;
          case 28:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            chessPiece = this.handleBlackCastling();
            num1 = (int) num2 * 2022435932 ^ 93710399;
            continue;
          case 29:
            flag3 = true;
            num1 = (int) num2 * -161213774 ^ -92626096;
            continue;
          case 30:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              goto label_24;
            }
            else
            {
              num1 = (int) num2 * -1722293840 ^ -140115486;
              continue;
            }
          case 31:
            num1 = (int) num2 * -684356004 ^ 878401156;
            continue;
          default:
            goto label_43;
        }
        flag2 = num3 != 0;
        num1 = 410710373;
        continue;
label_24:
        flag4 = num4 != 0;
        num1 = 1703066755;
        continue;
label_39:
        flag5 = num5 != 0;
        num1 = 1651972424;
      }
label_43:
      Promotion promotion = new Promotion(Square.\u200F⁫⁯‏‭‏⁭‎‏⁪‮‌⁭⁪⁫⁪‮⁮‎⁫⁮⁭⁮‍‌‬⁮⁯⁫‏⁭‬‪‭⁬‮‪‫​‫‮());
      try
      {
        int num11 = (int) Square.\u202A‎⁯‮‮‫‪⁮‍⁯‌‍⁬‪⁯‏⁪‍⁮‌‫⁮‎⁯⁫‮⁫‫‏‫‌‪⁭‬‏⁬‮⁮‬‮((Form) promotion);
        this.Kind = promotion.Piece;
      }
      finally
      {
        if (promotion != null)
        {
label_46:
          int num12 = 1432842743;
          while (true)
          {
            uint num13;
            switch ((num13 = (uint) (num12 ^ 464645233)) % 4U)
            {
              case 1:
                num12 = (int) num13 * 1703229167 ^ 195092602;
                continue;
              case 2:
                Square.\u200D‍⁫⁮‮⁯‪⁮‬⁮‌⁭‫​‫⁪⁫‮⁪‮‭⁯‪‎‌‪‏‌‪⁫⁫‏‍​‮‎‏‪‫‍‮((IDisposable) promotion);
                num12 = (int) num13 * -1668001012 ^ 324468780;
                continue;
              case 3:
                goto label_46;
              default:
                goto label_51;
            }
          }
        }
label_51:;
      }
label_52:
      int num14 = 990578667;
label_53:
      while (true)
      {
        uint num15;
        bool isOnCheck;
        Square square1;
        bool flag6;
        int file;
        int rank;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        Square square2;
        switch ((num15 = (uint) (num14 ^ 464645233)) % 51U)
        {
          case 0:
            this.Piece = (ChessPiece) null;
            num14 = (int) num15 * 430912640 ^ -1354410049;
            continue;
          case 1:
            flag8 = this.Piece.Kind == Pieces.King;
            num14 = (int) num15 * -1701035213 ^ -236907688;
            continue;
          case 2:
            num14 = 537933125;
            continue;
          case 3:
            PlaySound.Play();
            num14 = 491270263;
            continue;
          case 4:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num14 = 274625065;
            continue;
          case 5:
            num14 = (int) num15 * -935694607 ^ -1420772637;
            continue;
          case 6:
            num14 = (int) num15 * -351173830 ^ -1509546573;
            continue;
          case 7:
            int num16 = isOnCheck ? 2084930766 : (num16 = 1479322313);
            num14 = num16 ^ (int) num15 * -783264734;
            continue;
          case 8:
            square2 = this.Board[0, rank];
            break;
          case 9:
            num14 = (int) num15 * 1161613564 ^ -563185293;
            continue;
          case 10:
            int num17 = !flag8 ? 1755979769 : (num17 = 1133526094);
            num14 = num17 ^ (int) num15 * 392799924;
            continue;
          case 11:
            num14 = (int) num15 * 643467408 ^ 567843343;
            continue;
          case 12:
            goto label_52;
          case 13:
            flag6 = flag1;
            num14 = (int) num15 * 1208317932 ^ 1206281084;
            continue;
          case 14:
            rank = chessPiece.Current.Rank;
            if (file == 5)
            {
              square2 = this.Board[7, rank];
              break;
            }
            num14 = (int) num15 * 1562759945 ^ 585008083;
            continue;
          case 15:
            flag9 = true;
            num14 = (int) num15 * 972111570 ^ -1406446498;
            continue;
          case 16:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            this.Board.BlackCanCastleQueenSide = true;
            this.Board.BlackCanCastleKingSide = true;
            num14 = 813850012;
            continue;
          case 17:
            num14 = 398836807;
            continue;
          case 18:
            num14 = (int) num15 * 1015734913 ^ 1465822766;
            continue;
          case 19:
            square1.Piece = chessPiece;
            num14 = (int) num15 * -947914393 ^ 944702847;
            continue;
          case 20:
            num14 = (int) num15 * 2066701571 ^ -1642284344;
            continue;
          case 21:
            file = chessPiece.Current.File;
            num14 = (int) num15 * 1735400637 ^ -536985463;
            continue;
          case 22:
            num14 = (int) num15 * 1906259649 ^ 1178164148;
            continue;
          case 23:
            int num18 = !flag7 ? 2087301255 : (num18 = 975932156);
            num14 = num18 ^ (int) num15 * -1711412777;
            continue;
          case 24:
            this.Board.lights.FindAllMoves();
            num14 = 648601967;
            continue;
          case 25:
            flag11 = this.Board.lights.KingColorOnCheck == this.Piece.Color;
            num14 = (int) num15 * -1437191792 ^ 1159310582;
            continue;
          case 26:
            flag9 = this.Board.lights.IsOnCheck;
            num14 = (int) num15 * -327227714 ^ -1239038358;
            continue;
          case 27:
            num14 = (int) num15 * 467491323 ^ 23413795;
            continue;
          case 28:
            num14 = 176885963;
            continue;
          case 29:
            num14 = (int) num15 * 18605217 ^ 749257658;
            continue;
          case 30:
            this.msg = \u003CModule\u003E.\u200F‮​⁫‍⁬⁪‪‏‍⁯⁫⁪⁭⁬‮‍‫‭⁫‮‬‭⁮‮‭⁪⁫⁫‭⁮⁬⁭⁪⁪‌‫‭‍⁭‮<string>(4093776898U);
            num14 = (int) num15 * -893425159 ^ 137614988;
            continue;
          case 31:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            num14 = (int) num15 * 837117007 ^ -1556284544;
            continue;
          case 32:
            num14 = (int) num15 * -1382982932 ^ -38178769;
            continue;
          case 33:
            int num19 = flag6 ? 1967170702 : (num19 = 1061365726);
            num14 = num19 ^ (int) num15 * -276801653;
            continue;
          case 34:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num14 = 1970289917;
            continue;
          case 35:
            num14 = (int) num15 * -719822947 ^ -522678980;
            continue;
          case 36:
            goto label_54;
          case 37:
            num14 = (int) num15 * -411810862 ^ -1391291155;
            continue;
          case 38:
            this.Board.WhiteCanCastleQueenSide = true;
            this.Board.WhiteCanCastleKingSide = true;
            num14 = (int) num15 * -560304562 ^ -610166719;
            continue;
          case 39:
            flag7 = chessPiece != null;
            num14 = 1920904077;
            continue;
          case 40:
            from.Piece = this.Piece;
            num14 = (int) num15 * -507777834 ^ -2069285521;
            continue;
          case 41:
            int num20 = flag10 ? -1173983953 : (num20 = -722552797);
            num14 = num20 ^ (int) num15 * -2123927272;
            continue;
          case 42:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num14 = (int) num15 * 1830614869 ^ 1323085568;
            continue;
          case 43:
            int num21 = flag11 ? 170627160 : (num21 = 2049060963);
            num14 = num21 ^ (int) num15 * 1237867006;
            continue;
          case 44:
            isOnCheck = this.Board.lights.IsOnCheck;
            num14 = (int) num15 * -40407515 ^ 524212293;
            continue;
          case 45:
            this.SwitchPlayer();
            num14 = (int) num15 * 875206864 ^ 469771775;
            continue;
          case 46:
            goto label_55;
          case 47:
            flag10 = flag9;
            num14 = 1243293811;
            continue;
          case 48:
            this.msg = \u003CModule\u003E.\u206A⁪⁫‍⁫‫⁪‫‮⁮‌‬⁮‬⁮​‪⁪⁭‬⁮‪⁯‬‬⁬⁯‌⁯⁭⁭⁮⁬‎⁪‬⁫‌‍⁯‮<string>(2222879154U);
            int num22 = !flag1 ? 465617071 : (num22 = 1081702267);
            num14 = num22 ^ (int) num15 * 2140778556;
            continue;
          case 49:
            num14 = (int) num15 * -857240186 ^ 1814004828;
            continue;
          case 50:
            num14 = (int) num15 * 207286455 ^ 2012473648;
            continue;
          default:
            goto label_48;
        }
        square1 = square2;
        num14 = 417598588;
      }
label_54:
      return;
label_48:
      return;
label_55:
      this.Board.lights.IsOnCheck = false;
      this.Board.lights.FindAllMoves();
      num14 = 242974032;
      goto label_53;
    }

    private ChessPiece handleBlackCastling()
    {
label_1:
      int num1 = 233758033;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        Square square1;
        ChessPiece chessPiece2;
        bool flag3;
        bool flag4;
        Square square2;
        bool flag5;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 105730430)) % 36U)
        {
          case 0:
            goto label_1;
          case 1:
            chessPiece1 = chessPiece2;
            num1 = 2120218879;
            continue;
          case 2:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * -1400368432 ^ -1189561780;
            continue;
          case 3:
            square2 = this.Board[3, 7];
            square2.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * -594956346 ^ 1366919622;
            continue;
          case 4:
            int num5 = this.Piece.Kind != Pieces.Rook ? -1761779498 : (num5 = -724262247);
            num1 = num5 ^ (int) num2 * 957514142;
            continue;
          case 5:
            flag3 = this.Piece.Current.File == 2;
            num1 = (int) num2 * 987644861 ^ -1512963810;
            continue;
          case 6:
            num1 = 510312845;
            continue;
          case 7:
            num1 = (int) num2 * 1630922193 ^ 1616240034;
            continue;
          case 8:
            this.Board.BlackCanCastleQueenSide = false;
            this.Board.BlackCanCastleKingSide = false;
            num1 = 54091220;
            continue;
          case 9:
            this.Board.BlackCanCastleKingSide = false;
            num1 = 1946712812;
            continue;
          case 10:
            if (!this.Board.BlackCanCastleKingSide)
            {
              num1 = (int) num2 * 1588456198 ^ 861366394;
              continue;
            }
            num3 = 1;
            goto label_34;
          case 11:
            num1 = 556206223;
            continue;
          case 12:
            num1 = (int) num2 * 453382843 ^ 652733006;
            continue;
          case 13:
            int num6 = flag3 ? -976698423 : (num6 = -67263518);
            num1 = num6 ^ (int) num2 * -1375257876;
            continue;
          case 14:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1954991996 ^ -871368227;
            continue;
          case 15:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 16:
            num1 = 515030711;
            continue;
          case 17:
            int num7 = flag5 ? 24764278 : (num7 = 608910945);
            num1 = num7 ^ (int) num2 * -1366133078;
            continue;
          case 18:
            num1 = (int) num2 * -1222313310 ^ 199018009;
            continue;
          case 19:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 1677702836 ^ 1105713948;
            continue;
          case 20:
            num3 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            goto label_34;
          case 21:
            if (this.Piece.Kind == Pieces.King)
            {
              num4 = 1;
              break;
            }
            num1 = (int) num2 * 1661492572 ^ 208569745;
            continue;
          case 22:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * -865586837 ^ -1893217420;
            continue;
          case 23:
            flag5 = Square.\u206F‎⁬⁪⁬⁮⁪‭⁮‍​‬‭‭⁯⁯⁯‎‮‪‭‮‬‌‍⁮⁪‫⁬‎‪⁫‏‬⁭‭‪‫‬‍‮(this.Piece.Home.Name, \u003CModule\u003E.\u200E⁫‏⁭‫‪⁪⁬‬‫‪‭‬⁪⁯‮‌‮‪⁯‎⁮‎⁪⁯⁮​⁯‬‌‪‭⁭‫‬‭‪⁭‪‫‮<string>(3543822430U));
            num1 = (int) num2 * -524843824 ^ 1271083911;
            continue;
          case 24:
            int num8 = !flag2 ? -1459396406 : (num8 = -1861936617);
            num1 = num8 ^ (int) num2 * 1738591277;
            continue;
          case 26:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 925780583 ^ -2035887398;
            continue;
          case 27:
            num1 = 927829617;
            continue;
          case 28:
            int num9 = !flag1 ? 415961857 : (num9 = 1644253102);
            num1 = num9 ^ (int) num2 * -1497193878;
            continue;
          case 29:
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * -1756879831 ^ -257704821;
            continue;
          case 30:
            num1 = (int) num2 * 238899032 ^ -637443355;
            continue;
          case 31:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * -2090147447 ^ 2037998911;
            continue;
          case 32:
            flag2 = this.Piece.Current.File == 6;
            num1 = 769273278;
            continue;
          case 33:
            square1 = this.Board[5, 7];
            square1.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * 307216209 ^ -1687490771;
            continue;
          case 34:
            int num10 = !flag4 ? -185075353 : (num10 = -1570114565);
            num1 = num10 ^ (int) num2 * -447883372;
            continue;
          case 35:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * -1450984132 ^ -1883503173;
            continue;
          default:
            goto label_43;
        }
        flag1 = num4 != 0;
        num1 = 1318302630;
        continue;
label_34:
        flag4 = num3 != 0;
        num1 = 178934668;
      }
label_43:
      return chessPiece1;
    }

    private ChessPiece handleWhiteCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
label_1:
      int num1 = -1950984445;
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -763055392)) % 39U)
        {
          case 0:
            flag2 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * -2075901962 ^ 732058093;
            continue;
          case 1:
            flag4 = this.Piece.Current.File == 2;
            num1 = (int) num2 * 2136867475 ^ 1153019015;
            continue;
          case 2:
            num3 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            goto label_29;
          case 3:
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * 567959230 ^ 1142670484;
            continue;
          case 4:
            goto label_1;
          case 5:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 6:
            square1 = this.Board[5, 0];
            square1.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * -740490649 ^ -2005971648;
            continue;
          case 7:
            num1 = (int) num2 * 479212229 ^ -1493177544;
            continue;
          case 8:
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -2098751022 ^ -1408404178;
            continue;
          case 9:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 1724417589 ^ -169854211;
            continue;
          case 10:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * -2032468754 ^ -526160009;
            continue;
          case 11:
            num1 = -684101441;
            continue;
          case 12:
            int num5 = flag1 ? 65045617 : (num5 = 1862145087);
            num1 = num5 ^ (int) num2 * 642592915;
            continue;
          case 13:
            this.Board.WhiteCanCastleQueenSide = false;
            this.Board.WhiteCanCastleKingSide = false;
            num1 = -1444018158;
            continue;
          case 15:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 409712151 ^ 773673285;
            continue;
          case 16:
            num1 = (int) num2 * 1218648197 ^ 741430365;
            continue;
          case 17:
            if (this.Piece.Kind == Pieces.King)
            {
              num4 = 1;
              break;
            }
            num1 = (int) num2 * 1262225236 ^ -1873355969;
            continue;
          case 18:
            int num6 = flag5 ? 1692749499 : (num6 = 33073018);
            num1 = num6 ^ (int) num2 * -1215194055;
            continue;
          case 19:
            int num7 = !flag6 ? 1921804416 : (num7 = 2131475615);
            num1 = num7 ^ (int) num2 * -1464743227;
            continue;
          case 20:
            num1 = (int) num2 * -1876401634 ^ 1322091622;
            continue;
          case 21:
            num1 = -635036523;
            continue;
          case 22:
            int num8 = !flag4 ? 851939995 : (num8 = 952251036);
            num1 = num8 ^ (int) num2 * 556067453;
            continue;
          case 23:
            square2 = this.Board[3, 0];
            square2.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * 281360816 ^ -825544002;
            continue;
          case 24:
            flag1 = Square.\u206F‎⁬⁪⁬⁮⁪‭⁮‍​‬‭‭⁯⁯⁯‎‮‪‭‮‬‌‍⁮⁪‫⁬‎‪⁫‏‬⁭‭‪‫‬‍‮(this.Piece.Home.Name, \u003CModule\u003E.\u200F‮​⁫‍⁬⁪‪‏‍⁯⁫⁪⁭⁬‮‍‫‭⁫‮‬‭⁮‮‭⁪⁫⁫‭⁮⁬⁭⁪⁪‌‫‭‍⁭‮<string>(3742768689U));
            num1 = (int) num2 * 591765570 ^ 723615388;
            continue;
          case 25:
            num1 = (int) num2 * -1471748025 ^ -1150102046;
            continue;
          case 26:
            num1 = -587516188;
            continue;
          case 27:
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * 1738918569 ^ -1840133701;
            continue;
          case 28:
            flag5 = this.Piece.Current.File == 6;
            num1 = -871985987;
            continue;
          case 29:
            num1 = (int) num2 * 810804580 ^ -1937017216;
            continue;
          case 30:
            num1 = (int) num2 * 1724883254 ^ 2118286415;
            continue;
          case 31:
            if (!this.Board.WhiteCanCastleKingSide)
            {
              num1 = (int) num2 * 915183414 ^ -707158016;
              continue;
            }
            num3 = 1;
            goto label_29;
          case 32:
            chessPiece2 = chessPiece1;
            num1 = -213883362;
            continue;
          case 33:
            num1 = (int) num2 * 1454791379 ^ -1882376813;
            continue;
          case 34:
            int num9 = !flag3 ? 950578139 : (num9 = 1370056032);
            num1 = num9 ^ (int) num2 * -1094543156;
            continue;
          case 35:
            num1 = -1014899389;
            continue;
          case 36:
            int num10 = flag2 ? -574275738 : (num10 = -118121031);
            num1 = num10 ^ (int) num2 * -138514760;
            continue;
          case 37:
            num1 = (int) num2 * -1814863220 ^ -1104140316;
            continue;
          case 38:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = -2140058266;
            continue;
          default:
            goto label_46;
        }
        flag3 = num4 != 0;
        num1 = -995354589;
        continue;
label_29:
        flag6 = num3 != 0;
        num1 = -650417167;
      }
label_46:
      return chessPiece2;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = 1964051027;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 307526273)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            Square.\u202B⁬⁯⁮⁬‌⁮⁪⁭⁪⁬​‏⁭‎‎‬⁬⁯‍‬⁯​‌‪‮‍‪⁮‫‭​​‫⁫‏⁮‭⁫⁭‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * -479394702 ^ 57270342;
            continue;
          case 3:
            num1 = (int) num2 * -276099457 ^ -1401117075;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    protected override void Dispose(bool disposing)
    {
      if (!disposing)
        goto label_4;
label_1:
      int num1 = -477803332;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1861491015)) % 6U)
        {
          case 0:
            Square.\u200D‍⁫⁮‮⁯‪⁮‬⁮‌⁭‫​‫⁪⁫‮⁪‮‭⁯‪‎‌‪‏‌‪⁫⁫‏‍​‮‎‏‪‫‍‮((IDisposable) this.components);
            num1 = (int) num2 * 1041430502 ^ -1651819142;
            continue;
          case 1:
            int num3 = flag ? 854877066 : (num3 = 1975879320);
            num1 = num3 ^ (int) num2 * -1351843049;
            continue;
          case 3:
            num1 = (int) num2 * -295628503 ^ 1508792612;
            continue;
          case 4:
            goto label_1;
          case 5:
            goto label_3;
          default:
            goto label_9;
        }
      }
label_3:
      int num4 = this.components != null ? 1 : 0;
      goto label_5;
label_9:
      base.Dispose(disposing);
      return;
label_4:
      num4 = 0;
label_5:
      flag = num4 != 0;
      num1 = -1133475616;
      goto label_2;
    }

    private void InitializeComponent()
    {
      Square.\u206B‎‬‍⁫‪‪‮‪⁯⁮‫‍‌‎‌⁯⁫⁯⁮‮‫‌‮‭⁬‌‮‮‏‌‎‮⁬‍⁫​​⁬‌‮((Control) this);
label_1:
      int num1 = -1598151142;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -635238231)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -124498199 ^ -1691786812;
            continue;
          case 1:
            Square.\u202A​‍‮⁪⁭‎‏‮⁭‮‬​​‮⁯‮⁮​‭‫‮‮‮‍⁬‍​‎‍⁬‪⁯⁫‬‎⁬‏‍⁫‮((Control) this, new Padding(0));
            num1 = (int) num2 * 2116945363 ^ 1099152584;
            continue;
          case 2:
            num1 = (int) num2 * -816132255 ^ 209640686;
            continue;
          case 3:
            goto label_1;
          case 4:
            Square.\u202E‬‪⁭‭⁫⁭⁭‬‌‎‍⁫⁬⁪⁪⁮⁯⁮‍‮⁯⁪⁫⁬‫‪‍‬‍⁪‫‎​‎​‬‍⁪‎‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -1141291388 ^ 859618329;
            continue;
          case 5:
            this.Name = \u003CModule\u003E.\u200D‭⁫⁪⁫‫‮‭‍⁫‭⁪‍‬‌‎⁬‌‪‏‎‭‫‭‏⁫‬‎‎⁬‎‎⁬‫‌‍‍‭‌‭‮<string>(1632059315U);
            Square.\u200C‍⁪‬‬⁯‮‭⁫‎‍⁮⁪⁯⁮​‬⁮‎⁪⁫⁯⁭⁯⁮‬⁪‍‌‎​​⁫⁭‌​‭‮⁫‫‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * -1495364556 ^ -1717590083;
            continue;
          case 6:
            Square.\u206F‌⁮⁫‪‎⁯⁯‏‎⁪⁬⁮⁭‪‮⁪‏‌⁮‬‏⁯​‫‪⁪‭‎‭‫​‎‫⁬⁮‌⁬⁬‍‮((Control) this, false);
            num1 = (int) num2 * -538042248 ^ -1120400093;
            continue;
          case 7:
            Square.\u202B‍⁬⁬‍⁭‪‏⁪⁪‭⁭‌‫⁬⁯⁪‍⁬‭‍‮⁫⁫‏‬⁬‍‪‫​⁮⁬​⁯⁬‭‬‪‫‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * -515849497 ^ 906909306;
            continue;
          case 8:
            goto label_3;
          case 9:
            Square.\u206F‭⁭⁯‏‬⁬‭‭⁮⁫‬‭‭‪⁮⁭‏‪‭⁪‏‏​‍‮​‍⁭⁭‏‍​‭⁭‫⁪⁯⁪⁮‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * 1907019965 ^ -1540992871;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    static Delegate \u206A⁭⁪⁫⁮​⁯⁬‍‪‫‫‌‫​‏⁭​‏‬‭‌‎​‎⁪‮⁮‏⁬⁭‏‌⁬⁮⁬⁬‍⁮⁮‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206A‬‪‍⁭⁬‌⁫‪‬​⁫‏‮‬‮‭‭‍‮‬⁮⁭⁯⁪⁪​⁯‏‭​‎⁫‎‬‌‭‪⁮⁫‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u200C‎‎‬‮‭‍⁮‍⁮⁪⁭⁬‌‪‍‬‍⁯‌⁪‎‏​‫⁭⁭​‪‮‍‬‎‌‪‮‮⁪‬‪‮([In] object obj0) => obj0.ToString();

    static string \u206A‮‫‮⁭‏⁫‮‏‎⁪⁬​‌‮⁬⁪⁯⁭‏⁯‭‍‎‎⁮‍‮⁪‮​‮‪⁮⁪‍‭⁮‏⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u206C‏‫⁪⁮‬⁮‮⁬⁪⁯⁮⁬‌​‬‮⁮⁪‮‭⁯​⁮‪‏⁪⁪‪‏‌‮⁮‪‪‮‬‎‬⁮‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u206E​⁮⁬‬⁮‏‏‌⁭‎‍⁯‫‎⁮‪‍‎‬‫⁫‫‌​⁪‮‌‮‮​⁬⁫‍‬⁫⁯​​⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u206B‬‪⁮‎‭‭⁯‎‍‭⁬⁫‪⁫‮‫‮‮⁪‭​‏⁯‎‫⁬⁬⁬‎⁮⁫‎‍‎‪‬‍⁬‪‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u200E​‏‬​⁪‏‍‪‫‏⁪‍⁪‌‪‬⁮⁪⁮⁫‏‎​‭⁫‍⁪‏⁬​⁫⁬⁫⁯⁮⁫⁯‌‮‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u200F⁫⁯‏‭‏⁭‎‏⁪‮‌⁭⁪⁫⁪‮⁮‎⁫⁮⁭⁮‍‌‬⁮⁯⁫‏⁭‬‪‭⁬‮‪‫​‫‮() => Cursor.Position;

    static DialogResult \u202A‎⁯‮‮‫‪⁮‍⁯‌‍⁬‪⁯‏⁪‍⁮‌‫⁮‎⁯⁫‮⁫‫‏‫‌‪⁭‬‏⁬‮⁮‬‮([In] Form obj0) => obj0.ShowDialog();

    static void \u200D‍⁫⁮‮⁯‪⁮‬⁮‌⁭‫​‫⁪⁫‮⁪‮‭⁯‪‎‌‪‏‌‪⁫⁫‏‍​‮‎‏‪‫‍‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u206F‎⁬⁪⁬⁮⁪‭⁮‍​‬‭‭⁯⁯⁯‎‮‪‭‮‬‌‍⁮⁪‫⁬‎‪⁫‏‬⁭‭‪‫‬‍‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u202B⁬⁯⁮⁬‌⁮⁪⁭⁪⁬​‏⁭‎‎‬⁬⁯‍‬⁯​‌‪‮‍‪⁮‫‭​​‫⁫‏⁮‭⁫⁭‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u206B‎‬‍⁫‪‪‮‪⁯⁮‫‍‌‎‌⁯⁫⁯⁮‮‫‌‮‭⁬‌‮‮‏‌‎‮⁬‍⁫​​⁬‌‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u206F‭⁭⁯‏‬⁬‭‭⁮⁫‬‭‭‪⁮⁭‏‪‭⁪‏‏​‍‮​‍⁭⁭‏‍​‭⁭‫⁪⁯⁪⁮‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u202B‍⁬⁬‍⁭‪‏⁪⁪‭⁭‌‫⁬⁯⁪‍⁬‭‍‮⁫⁫‏‬⁬‍‪‫​⁮⁬​⁯⁬‭‬‪‫‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u202E‬‪⁭‭⁫⁭⁭‬‌‎‍⁫⁬⁪⁪⁮⁯⁮‍‮⁯⁪⁫⁬‫‪‍‬‍⁪‫‎​‎​‬‍⁪‎‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u202A​‍‮⁪⁭‎‏‮⁭‮‬​​‮⁯‮⁮​‭‫‮‮‮‍⁬‍​‎‍⁬‪⁯⁫‬‎⁬‏‍⁫‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u200C‍⁪‬‬⁯‮‭⁫‎‍⁮⁪⁯⁮​‬⁮‎⁪⁫⁯⁭⁯⁮‬⁪‍‌‎​​⁫⁭‌​‭‮⁫‫‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206F‌⁮⁫‪‎⁯⁯‏‎⁪⁬⁮⁭‪‮⁪‏‌⁮‬‏⁯​‫‪⁪‭‎‭‫​‎‫⁬⁮‌⁬⁬‍‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
