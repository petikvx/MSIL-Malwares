// Decompiled with JetBrains decompiler
// Type: AutoKMS.Common
// Assembly: AutoKMS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 273AC3B6-BDC9-4F75-A629-36925A25A147
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\HackTool.Win32.KMSAuto.i-471b0f750e4b41e2e2134c3e45695bf3f3bb236d8bfe427a1d8f5b79c6663339.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Threading;

namespace AutoKMS
{
  internal class Common
  {
    public const string X86 = "x86";
    public const string WOW = "WOW";
    public const string X64 = "x64";
    public const string KEYGEN_FILE_NAME = "Keygen.exe";
    public const string Access_KMS_Client = "8ce7e872-188c-4b98-9d90-f8f90b7aad02";
    public const string Excel_KMS_Client = "cee5d470-6e3b-4fcc-8c2b-d17428568a9f";
    public const string Groove_KMS_Client = "8947d0b8-c33b-43e1-8c56-9b674c052832";
    public const string InfoPath_KMS_Client = "ca6b6639-4ad6-40ae-a575-14dee07f6430";
    public const string OneNote_KMS_Client = "ab586f5c-5256-4632-962f-fefd8b49e6f4";
    public const string Outlook_KMS_Client = "ecb7c192-73ab-4ded-acf4-2399b095d0cc";
    public const string PowerPoint_KMS_Client = "45593b1d-dfb1-4e91-bbfb-2d5d0ce2227a";
    public const string ProjectPro_KMS_Client = "df133ff7-bf14-4f95-afe3-7b48e7e331ef";
    public const string ProjectStd_KMS_Client = "5dc7bf61-5ec9-4996-9ccb-df806a2d0efe";
    public const string ProPlus_KMS_Client = "6f327760-8c5c-417c-9b61-836a98287e0c";
    public const string Publisher_KMS_Client = "b50c4f75-599b-43e8-8dcd-1081a7967241";
    public const string SmallBusBasics_KMS_Client = "ea509e87-07a1-4a45-9edc-eba5a39f36af";
    public const string Standard_KMS_Client = "9da2a678-fb6b-4e67-ab84-60dd6a9c819a";
    public const string VisioPrem_KMS_Client = "92236105-bb67-494f-94c7-7f7a607929bd";
    public const string VisioPro_KMS_Client = "e558389c-83c3-4b29-adfe-5e4d7f46c358";
    public const string VisioStd_KMS_Client = "9ed833ff-4f92-4f36-b370-8683a4f13275";
    public const string Word_KMS_Client = "2d0882e7-a4e7-423b-8ccc-70d91e0158b1";
    public static bool SomethingFailed = false;
    public static bool OfficeInstalled = Common.IsOfficeInstalled();
    public static string OfficeArchitecture = Common.GetOfficeArch();
    public static string OfficeInstallPath = Common.GetOfficeInstallPath();
    public static string OSPPVBS = Common.GetOSPPVBSPath();
    public static string TEMP = Environment.GetEnvironmentVariable("temp");
    public static bool AccessVL = false;
    public static bool ExcelVL = false;
    public static bool GrooveVL = false;
    public static bool InfoPathVL = false;
    public static bool OneNoteVL = false;
    public static bool OutlookVL = false;
    public static bool PowerPointVL = false;
    public static bool ProjectProVL = false;
    public static bool ProjectStdVL = false;
    public static bool ProPlusVL = false;
    public static bool PublisherVL = false;
    public static bool SmallBusBasicsVL = false;
    public static bool StandardVL = false;
    public static bool VisioPremVL = false;
    public static bool VisioProVL = false;
    public static bool VisioStdVL = false;
    public static bool WordVL = false;

    public static Result KMSLicCheck(string OSPPVBS)
    {
      Result result1 = new Result();
      Result result2 = Common.ExecuteCommand("cscript /nologo " + OSPPVBS + " /dstatus", 0, true);
      string output = result2.Output;
      if (result2.HasError)
        return result2;
      if (output.Contains("8ce7e872-188c-4b98-9d90-f8f90b7aad02"))
        Common.AccessVL = true;
      if (output.Contains("cee5d470-6e3b-4fcc-8c2b-d17428568a9f"))
        Common.ExcelVL = true;
      if (output.Contains("8947d0b8-c33b-43e1-8c56-9b674c052832"))
        Common.GrooveVL = true;
      if (output.Contains("ca6b6639-4ad6-40ae-a575-14dee07f6430"))
        Common.InfoPathVL = true;
      if (output.Contains("ab586f5c-5256-4632-962f-fefd8b49e6f4"))
        Common.OneNoteVL = true;
      if (output.Contains("ecb7c192-73ab-4ded-acf4-2399b095d0cc"))
        Common.OutlookVL = true;
      if (output.Contains("45593b1d-dfb1-4e91-bbfb-2d5d0ce2227a"))
        Common.PowerPointVL = true;
      if (output.Contains("df133ff7-bf14-4f95-afe3-7b48e7e331ef"))
        Common.ProjectProVL = true;
      if (output.Contains("5dc7bf61-5ec9-4996-9ccb-df806a2d0efe"))
        Common.ProjectStdVL = true;
      if (output.Contains("6f327760-8c5c-417c-9b61-836a98287e0c"))
        Common.ProPlusVL = true;
      if (output.Contains("b50c4f75-599b-43e8-8dcd-1081a7967241"))
        Common.PublisherVL = true;
      if (output.Contains("ea509e87-07a1-4a45-9edc-eba5a39f36af"))
        Common.SmallBusBasicsVL = true;
      if (output.Contains("9da2a678-fb6b-4e67-ab84-60dd6a9c819a"))
        Common.StandardVL = true;
      if (output.Contains("92236105-bb67-494f-94c7-7f7a607929bd"))
        Common.VisioPremVL = true;
      if (output.Contains("e558389c-83c3-4b29-adfe-5e4d7f46c358"))
        Common.VisioProVL = true;
      if (output.Contains("9ed833ff-4f92-4f36-b370-8683a4f13275"))
        Common.VisioStdVL = true;
      if (output.Contains("2d0882e7-a4e7-423b-8ccc-70d91e0158b1"))
        Common.WordVL = true;
      return result2;
    }

    public static Result ExecuteCommand(string Command, int Timeout, bool SaveOutput)
    {
      Result result = new Result();
      Process process = Process.Start(new ProcessStartInfo("cmd.exe", "/C " + Command)
      {
        CreateNoWindow = true,
        UseShellExecute = false,
        RedirectStandardOutput = true
      });
      StreamReader standardOutput = process.StandardOutput;
      while (!process.HasExited)
        Thread.Sleep(100);
      result.ExitCode = process.ExitCode;
      if (SaveOutput)
      {
        if (result.HasError)
          result.Error = standardOutput.ReadToEnd();
        else
          result.Output = standardOutput.ReadToEnd();
      }
      process.Close();
      return result;
    }

    public static void KillProcess(Process process)
    {
      process.Kill();
      while (!process.HasExited)
        Thread.Sleep(100);
    }

    public static bool IsOfficeInstalled()
    {
      try
      {
        return Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Office\\14.0") != null;
      }
      catch (Exception ex)
      {
        ex.GetType();
        return false;
      }
    }

    public static string GetOfficeArch()
    {
      string officeArch;
      try
      {
        officeArch = !((string) Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment").GetValue("PROCESSOR_ARCHITECTURE")).Equals("x86") ? (Registry.LocalMachine.OpenSubKey("SOFTWARE\\Wow6432Node\\Microsoft\\Office\\14.0\\Common\\InstallRoot") == null ? "x64" : "WOW") : "x86";
      }
      catch (Exception ex)
      {
        ex.GetType();
        officeArch = "";
      }
      return officeArch;
    }

    public static string GetOfficeInstallPath()
    {
      string officeInstallPath;
      try
      {
        switch (Common.OfficeArchitecture)
        {
          case "x86":
            officeInstallPath = (string) Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Office\\14.0\\Common\\InstallRoot").GetValue("Path");
            break;
          case "WOW":
            officeInstallPath = (string) Registry.LocalMachine.OpenSubKey("SOFTWARE\\Wow6432Node\\Microsoft\\Office\\14.0\\Common\\InstallRoot").GetValue("Path");
            break;
          case "x64":
            officeInstallPath = (string) Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Office\\14.0\\Common\\InstallRoot").GetValue("Path");
            break;
          default:
            officeInstallPath = "";
            break;
        }
      }
      catch (Exception ex)
      {
        ex.GetType();
        officeInstallPath = "";
      }
      return officeInstallPath;
    }

    public static string GetOSPPVBSPath()
    {
      try
      {
        return "\"" + Path.Combine(Common.GetOfficeInstallPath(), "ospp.vbs") + "\"";
      }
      catch (Exception ex)
      {
        ex.GetType();
        return "";
      }
    }
  }
}
