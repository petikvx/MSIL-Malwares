// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Importers.DispatcherProcess
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Adapter;
using ProjNet.Templates;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Runtime.CompilerServices;
using System.Threading;
using TYPELIBA.Identifiers;

namespace TYPELIBA.Importers
{
  [Table(Name = "dbo.AuthorISBN")]
  public class DispatcherProcess : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs m_PrototypeProcess;
    private int _AuthorID;
    private string _ISBN;
    private EntityRef<ExporterTokenTemplate> _Author;
    private EntityRef<ComposerConsumerAdapter> _Title;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DispatcherProcess()
    {
      int num1 = 4;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 1:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this._Author = new EntityRef<ExporterTokenTemplate>();
            goto case 2;
          case 2:
          case 3:
            this._Title = new EntityRef<ComposerConsumerAdapter>();
            num2 = 5;
            break;
          case 4:
            ManagerParamsID.NewExpression();
            num1 = 0;
            continue;
          case 5:
            goto label_7;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_7:;
    }

    [Column(DbType = "Int NOT NULL", IsPrimaryKey = true, Storage = "_AuthorID")]
    public int AuthorID
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._AuthorID;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 1;
        if (DispatcherProcess.CallCreator())
          ;
        while (true)
        {
          bool flag;
          int num2;
          bool loadedOrAssignedValue;
          switch (num1)
          {
            case 0:
            case 1:
              flag = this._AuthorID != value;
              num2 = 5;
              break;
            case 2:
            case 4:
              if (!loadedOrAssignedValue)
              {
                this.SendPropertyChanging();
                goto case 3;
              }
              else
                goto label_5;
            case 3:
              this._AuthorID = value;
              this.SendPropertyChanged(nameof (AuthorID));
              if (DispatcherProcess.VisitCreator())
              {
                num1 = 6;
                continue;
              }
              goto case 0;
            case 5:
              if (flag)
              {
                loadedOrAssignedValue = this._Author.HasLoadedOrAssignedValue;
                num2 = 4;
                break;
              }
              goto label_1;
            case 6:
              goto label_12;
            default:
              num1 = 3;
              continue;
          }
          num1 = num2;
        }
label_5:
        throw new ForeignKeyReferenceAlreadyHasValueException();
label_1:
        return;
label_12:;
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(20) NOT NULL", IsPrimaryKey = true, Storage = "_ISBN")]
    public string ISBN
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._ISBN;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 4;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_3;
              case 1:
              case 5:
                if (flag)
                {
                  if (this._Title.HasLoadedOrAssignedValue)
                  {
                    num2 = 0;
                    continue;
                  }
                  goto label_4;
                }
                else
                  goto label_12;
              case 3:
                goto label_1;
              case 4:
                flag = this._ISBN != value;
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto label_3;
              case 6:
                goto label_11;
              default:
                if (!DispatcherProcess.CallCreator())
                {
                  num2 = 3;
                  continue;
                }
                goto case 1;
            }
          }
label_1:
          this.SendPropertyChanged(nameof (ISBN));
          num1 = 6;
          continue;
label_4:
          this.SendPropertyChanging();
          this._ISBN = value;
          goto label_1;
        }
label_3:
        throw new ForeignKeyReferenceAlreadyHasValueException();
label_12:
        return;
label_11:;
      }
    }

    [Association(IsForeignKey = true, Name = "Author_AuthorISBN", OtherKey = "AuthorID", Storage = "_Author", ThisKey = "AuthorID")]
    public ExporterTokenTemplate Author
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Author.Entity;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 6;
        while (true)
        {
          int num2 = num1;
          ExporterTokenTemplate entity;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 6:
                goto label_3;
              case 1:
                this.SendPropertyChanged(nameof (Author));
                num2 = 8;
                continue;
              case 2:
                goto label_1;
              case 3:
              case 7:
                if (flag)
                {
                  this._Author.Entity = (ExporterTokenTemplate) null;
                  entity.AuthorISBNs.Remove(this);
                }
                this._Author.Entity = value;
                if (value != null)
                {
                  value.AuthorISBNs.Add(this);
                  goto case 5;
                }
                else
                  goto label_13;
              case 4:
                flag = entity != null;
                if (true)
                {
                  num2 = 7;
                  continue;
                }
                goto label_16;
              case 5:
                this._AuthorID = value.AuthorID;
                goto case 1;
              case 8:
                goto label_16;
              default:
                int num3 = 5;
                num2 = DispatcherProcess.CallCreator() ? num3 : num3;
                continue;
            }
          }
label_1:
          if (entity != value || !this._Author.HasLoadedOrAssignedValue)
          {
            this.SendPropertyChanging();
            num1 = 4;
            continue;
          }
          break;
label_3:
          entity = this._Author.Entity;
          num1 = 2;
          continue;
label_13:
          this._AuthorID = 0;
          num1 = 1;
        }
        return;
label_16:;
      }
    }

    [Association(IsForeignKey = true, Name = "Title_AuthorISBN", OtherKey = "ISBN", Storage = "_Title", ThisKey = "ISBN")]
    public ComposerConsumerAdapter Title
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Title.Entity;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 7;
        while (true)
        {
          int num2 = num1;
          ComposerConsumerAdapter entity;
          while (true)
          {
            bool flag;
            int num3;
            switch (num2)
            {
              case 0:
                if (entity == value)
                {
                  if (true)
                  {
                    num2 = 2;
                    continue;
                  }
                  goto case 1;
                }
                else
                {
                  num3 = 1;
                  goto label_15;
                }
              case 1:
              case 5:
                value.AuthorISBNs.Add(this);
                this._ISBN = value.ISBN;
                break;
              case 2:
                num3 = !this._Title.HasLoadedOrAssignedValue ? 1 : 0;
                goto label_15;
              case 3:
label_1:
                this._Title.Entity = value;
                flag = value != null;
                goto case 4;
              case 4:
              case 6:
label_10:
                if (!flag)
                {
                  this._ISBN = (string) null;
                  break;
                }
                goto label_11;
              case 7:
                entity = this._Title.Entity;
                if (DispatcherProcess.VisitCreator())
                {
                  num2 = 0;
                  continue;
                }
                goto case 2;
              case 8:
                goto label_18;
              default:
                if (DispatcherProcess.VisitCreator())
                {
                  num2 = 6;
                  continue;
                }
                goto case 0;
            }
            this.SendPropertyChanged(nameof (Title));
            if (!DispatcherProcess.CallCreator())
            {
              num2 = 8;
              continue;
            }
            goto label_10;
label_15:
            if (num3 != 0)
            {
              this.SendPropertyChanging();
              if (entity == null)
                goto label_1;
              else
                goto label_17;
            }
            else
              goto label_20;
          }
label_11:
          num1 = 1;
          continue;
label_17:
          this._Title.Entity = (ComposerConsumerAdapter) null;
          entity.AuthorISBNs.Remove(this);
          num1 = 3;
        }
label_20:
        return;
label_18:;
      }
    }

    public event PropertyChangingEventHandler PropertyChanging
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 4;
        if (DispatcherProcess.VisitCreator())
          goto label_6;
label_1:
        PropertyChangingEventHandler changingEventHandler1;
        PropertyChangingEventHandler comparand = changingEventHandler1;
        int num2 = 3;
label_5:
        num1 = num2;
label_6:
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_2;
            case 1:
            case 5:
              goto label_1;
            case 2:
            case 3:
              goto label_4;
            case 4:
              goto label_8;
            case 6:
              goto label_9;
            default:
              if (true)
              {
                num1 = 0;
                continue;
              }
              goto label_8;
          }
        }
label_2:
        PropertyChangingEventHandler changingEventHandler2;
        changingEventHandler1 = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.m_MerchantProcess, changingEventHandler2, comparand);
        if (changingEventHandler1 == comparand)
        {
          num2 = 6;
          goto label_5;
        }
        else
          goto label_1;
label_4:
        changingEventHandler2 = comparand + value;
        goto label_2;
label_9:
        return;
label_8:
        changingEventHandler1 = this.m_MerchantProcess;
        num2 = 5;
        goto label_5;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 5;
        if (!DispatcherProcess.CallCreator())
          goto label_4;
label_1:
        PropertyChangingEventHandler changingEventHandler1 = this.m_MerchantProcess;
        int num2 = 2;
label_3:
        num1 = num2;
label_4:
        PropertyChangingEventHandler comparand;
        PropertyChangingEventHandler changingEventHandler2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 5:
              goto label_1;
            case 1:
            case 2:
              comparand = changingEventHandler1;
              if (true)
              {
                num1 = 3;
                continue;
              }
              goto label_9;
            case 3:
              changingEventHandler2 = comparand - value;
              goto case 4;
            case 4:
              changingEventHandler1 = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.m_MerchantProcess, changingEventHandler2, comparand);
              if (changingEventHandler1 == comparand)
              {
                if (DispatcherProcess.VisitCreator())
                {
                  num1 = 6;
                  continue;
                }
                goto case 1;
              }
              else
                goto case 1;
            case 6:
              goto label_10;
            default:
              goto label_5;
          }
        }
label_10:
        return;
label_5:
        num2 = 4;
        goto label_3;
label_9:;
      }
    }

    public event PropertyChangedEventHandler PropertyChanged
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 2;
        while (true)
        {
          int num2 = num1;
          PropertyChangedEventHandler changedEventHandler1;
          PropertyChangedEventHandler changedEventHandler2;
          PropertyChangedEventHandler comparand;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_1;
              case 1:
              case 3:
                comparand = changedEventHandler1;
                if (true)
                {
                  num2 = 4;
                  continue;
                }
                goto case 4;
              case 4:
                changedEventHandler2 = comparand + value;
                goto case 5;
              case 5:
                changedEventHandler1 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.m_AttrProcess, changedEventHandler2, comparand);
                if (changedEventHandler1 == comparand)
                {
                  if (true)
                  {
                    num2 = 6;
                    continue;
                  }
                  goto case 1;
                }
                else
                  goto case 1;
              case 6:
                goto label_9;
              default:
                goto label_8;
            }
          }
label_1:
          changedEventHandler1 = this.m_AttrProcess;
          num1 = 3;
          continue;
label_8:
          num1 = 5;
        }
label_9:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num = 5;
        if (true)
          goto label_3;
label_1:
        PropertyChangedEventHandler changedEventHandler1 = this.m_AttrProcess;
        num = 4;
label_3:
        PropertyChangedEventHandler changedEventHandler2;
        PropertyChangedEventHandler comparand;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 5:
              goto label_1;
            case 1:
            case 3:
              if (changedEventHandler1 == comparand)
              {
                num = 6;
                continue;
              }
              goto case 4;
            case 2:
              changedEventHandler1 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.m_AttrProcess, changedEventHandler2, comparand);
              goto case 1;
            case 4:
              comparand = changedEventHandler1;
              changedEventHandler2 = comparand - value;
              if (true)
              {
                num = 2;
                continue;
              }
              goto label_8;
            case 6:
              goto label_9;
            default:
              if (DispatcherProcess.VisitCreator())
              {
                num = 1;
                continue;
              }
              goto case 1;
          }
        }
label_9:
        return;
label_8:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanging()
    {
      int num = 4;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            // ISSUE: reference to a compiler-generated field
            this.m_MerchantProcess((object) this, DispatcherProcess.m_PrototypeProcess);
            if (!DispatcherProcess.CallCreator())
            {
              num = 5;
              continue;
            }
            goto case 4;
          case 1:
          case 3:
            if (!flag)
              goto label_2;
            else
              goto case 0;
          case 4:
            // ISSUE: reference to a compiler-generated field
            flag = this.m_MerchantProcess != null;
            if (true)
            {
              num = 3;
              continue;
            }
            goto label_7;
          case 5:
            goto label_7;
          default:
            num = 0;
            continue;
        }
      }
label_2:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanged(string reference)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              // ISSUE: reference to a compiler-generated field
              this.m_AttrProcess((object) this, new PropertyChangedEventArgs(reference));
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_8;
            case 1:
            case 4:
              if (!flag)
                goto label_2;
              else
                goto case 0;
            case 3:
              goto label_6;
            case 5:
              goto label_8;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 0;
        continue;
label_6:
        // ISSUE: reference to a compiler-generated field
        flag = this.m_AttrProcess != null;
        num1 = 4;
      }
label_2:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static DispatcherProcess()
    {
      ManagerParamsID.NewExpression();
      DispatcherProcess.m_PrototypeProcess = new PropertyChangingEventArgs(string.Empty);
    }

    internal static bool VisitCreator() => true;

    internal static bool CallCreator() => false;
  }
}
