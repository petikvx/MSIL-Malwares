// Decompiled with JetBrains decompiler
// Type: VenomRAT_HVNC.Server.Helper.AeroListView
// Assembly: VenomRAT_HVNC, Version=5.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 364FC72B-4DB8-403E-BB7F-732199A12380
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-666d190a7059c03b3572dd66e51b8232537a8650bbdcbfbe3f8335c830f3aeae.exe

using System;
using System.Collections;
using System.Windows.Forms;

namespace VenomRAT_HVNC.Server.Helper
{
  internal class AeroListView : ListView
  {
    private const uint WM_CHANGEUISTATE = 295;
    private const short UIS_SET = 1;
    private const short UISF_HIDEFOCUS = 1;
    private readonly IntPtr _removeDots = new IntPtr(AeroListView.MakeWin32Long((short) 1, (short) 1));

    public static int MakeWin32Long(short wLow, short wHigh) => (int) wLow << 16 | (int) wHigh;

    private ListViewColumnSorter LvwColumnSorter { get; set; }

    public AeroListView()
    {
      this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.LvwColumnSorter = new ListViewColumnSorter();
      this.ListViewItemSorter = (IComparer) this.LvwColumnSorter;
      this.View = View.Details;
      this.FullRowSelect = true;
    }

    protected override void OnHandleCreated(EventArgs e)
    {
      base.OnHandleCreated(e);
      if (Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version.Major >= 6)
        NativeMethods.SetWindowTheme(this.Handle, "explorer", (string) null);
      if (Environment.OSVersion.Platform != PlatformID.Win32NT || Environment.OSVersion.Version.Major < 5)
        return;
      NativeMethods.SendMessage(this.Handle, 295U, this._removeDots, IntPtr.Zero);
    }

    protected override void OnColumnClick(ColumnClickEventArgs e)
    {
      base.OnColumnClick(e);
      if (e.Column == this.LvwColumnSorter.SortColumn)
      {
        this.LvwColumnSorter.Order = this.LvwColumnSorter.Order == SortOrder.Ascending ? SortOrder.Descending : SortOrder.Ascending;
      }
      else
      {
        this.LvwColumnSorter.SortColumn = e.Column;
        this.LvwColumnSorter.Order = SortOrder.Ascending;
      }
      if (this.VirtualMode)
        return;
      this.Sort();
    }
  }
}
