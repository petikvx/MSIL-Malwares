// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.SimpleSquare
// Assembly: 0的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9D533F7C-4FE9-47C1-AE3D-12E223DC01C7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7b4b43d22be88ed3b2054ef7090ebb7b44ecc03dffa6c32e578002c9a12cbea8.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  public class SimpleSquare : UserControl
  {
    private Color DefaultColor;
    private ChessPiece piece;
    private bool isBlackSquare;
    private IContainer components = (IContainer) null;
    public Panel panel1;

    public event EventHandler<MouseEventArgs> Click
    {
      add
      {
        EventHandler<MouseEventArgs> eventHandler1 = this.Click;
label_1:
        int num1 = -487051444;
        EventHandler<MouseEventArgs> comparand;
        EventHandler<MouseEventArgs> eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1124834361)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              comparand = eventHandler1;
              eventHandler2 = (EventHandler<MouseEventArgs>) SimpleSquare.\u200C‬‎‭⁬⁭‫​‪‫‌‌⁬⁮‏‎‬​⁮‮‍‬‫‬‪‎​⁫‭‪‭⁮‬⁮‭​‪⁭‌‌‮((Delegate) comparand, (Delegate) value);
              num1 = -1743963193;
              continue;
            case 2:
              goto label_1;
            case 3:
              eventHandler1 = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, eventHandler2, comparand);
              num1 = (int) num2 * 672739452 ^ -686569048;
              continue;
            case 4:
              int num3 = eventHandler1 == comparand ? 1851724341 : (num3 = 1858427105);
              num1 = num3 ^ (int) num2 * 2054086051;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
      remove
      {
        EventHandler<MouseEventArgs> eventHandler1 = this.Click;
label_1:
        int num1 = -1947223429;
        EventHandler<MouseEventArgs> comparand;
        EventHandler<MouseEventArgs> eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -225367835)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              comparand = eventHandler1;
              eventHandler2 = (EventHandler<MouseEventArgs>) SimpleSquare.\u206C​‏‮⁪‍⁭‍⁭⁫⁮⁬⁪‭⁯‭⁮⁭‪⁪⁬‍‎⁫⁭⁮‪​‌⁭​‎⁬‍‭‍⁫‎‪⁬‮((Delegate) comparand, (Delegate) value);
              num1 = -347712282;
              continue;
            case 3:
              eventHandler1 = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, eventHandler2, comparand);
              int num3 = eventHandler1 == comparand ? 1062580462 : (num3 = 437970477);
              num1 = num3 ^ (int) num2 * -100572814;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public ChessPiece Piece
    {
      get
      {
label_1:
        int num1 = -1867522440;
        ChessPiece piece;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1561152022)) % 4U)
          {
            case 1:
              num1 = (int) num2 * 1361376231 ^ 1666958873;
              continue;
            case 2:
              piece = this.piece;
              num1 = (int) num2 * -1488029556 ^ -1171981365;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return piece;
      }
      set
      {
label_1:
        int num1 = 787263751;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1861184726)) % 9U)
          {
            case 0:
              goto label_1;
            case 1:
              SimpleSquare.\u206D⁭‮‬⁯‬‬‏‌‍‮⁮⁬⁭‬‮‮‎‏⁮⁮‬‍⁭‪‬‪‎‬‍⁯‫‮⁬‏‬‏‌⁮‭‮((Control) this, (Image) null);
              num1 = (int) num2 * 1261407151 ^ 1438753544;
              continue;
            case 2:
              goto label_3;
            case 3:
              this.piece = (ChessPiece) null;
              num1 = (int) num2 * 1331205600 ^ 679032948;
              continue;
            case 4:
              num1 = (int) num2 * 1057751160 ^ 309400352;
              continue;
            case 5:
              int num3 = !flag ? 1390727431 : (num3 = 787526620);
              num1 = num3 ^ (int) num2 * -261895178;
              continue;
            case 6:
              num1 = (int) num2 * 575443363 ^ 1485825864;
              continue;
            case 7:
              SimpleSquare.\u206D⁭‮‬⁯‬‬‏‌‍‮⁮⁬⁭‬‮‮‎‏⁮⁮‬‍⁭‪‬‪‎‬‍⁯‫‮⁬‏‬‏‌⁮‭‮((Control) this, this.repo.GetPiece(this.piece.Kind, this.piece.Color));
              num1 = 109824168;
              continue;
            case 8:
              this.piece = value;
              flag = this.piece == null;
              num1 = (int) num2 * 1425453337 ^ -1822902265;
              continue;
            default:
              goto label_11;
          }
        }
label_3:
        return;
label_11:;
      }
    }

    public void colorSquare()
    {
label_1:
      int num1 = -897137127;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1736227991)) % 5U)
        {
          case 0:
            num1 = (int) num2 * -780750362 ^ -283673656;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.DefaultColor = this.IsBlackSquare ? Color.CornflowerBlue : Color.WhiteSmoke;
            num1 = -1254968159;
            continue;
          case 3:
            goto label_1;
          case 4:
            SimpleSquare.\u206F‪⁫‪‍‍⁭‎‏⁬‭‮‮‌⁯​‌‏⁬‭‏‌‍‎⁯⁬⁭‭‏‎‌‭‬‮‌‭‬‫‭‏‮((Control) this, this.DefaultColor);
            num1 = (int) num2 * -1230485346 ^ -827800264;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public Pieces Kind
    {
      set
      {
label_1:
        int num1 = 679079397;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 248659757)) % 3U)
          {
            case 1:
              this.Piece.Kind = value;
              num1 = (int) num2 * 422490587 ^ 1753188207;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        this.Piece = this.Piece;
      }
    }

    public bool IsBlackSquare
    {
      get
      {
        bool isBlackSquare = this.isBlackSquare;
label_1:
        int num1 = 719564681;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 582026964)) % 3U)
          {
            case 1:
              num1 = (int) num2 * 335523156 ^ 464368541;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return isBlackSquare;
      }
      set
      {
label_1:
        int num1 = -1062709523;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -33532287)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -1734235926 ^ -332624163;
              continue;
            case 2:
              goto label_3;
            case 3:
              this.isBlackSquare = value;
              num1 = (int) num2 * -509864736 ^ -109829669;
              continue;
            case 4:
              this.colorSquare();
              num1 = (int) num2 * -381976218 ^ -595256002;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public Repository repo
    {
      get
      {
label_1:
        int num1 = -1868282182;
        Repository repo;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1009012078)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              repo = ChessContext.repo;
              num1 = (int) num2 * -1400729776 ^ -1531662034;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return repo;
      }
    }

    public SimpleSquare()
    {
label_1:
      int num1 = 2134092626;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2047382971)) % 8U)
        {
          case 0:
            this.InitializeComponent();
            num1 = (int) num2 * -838959844 ^ 1079576305;
            continue;
          case 1:
            num1 = (int) num2 * 356312526 ^ 379461553;
            continue;
          case 2:
            SimpleSquare.\u200C‪‎‍⁯‏⁫‮⁮‫⁬‮⁭‭‬⁭‭⁪‏⁪⁯‪‫⁮⁯⁯‮‬‭⁬‭‮⁬‫‪⁯⁫‎‭‭‮((Control) this, new MouseEventHandler(this.Square_MouseClick));
            num1 = (int) num2 * 166272996 ^ 305139398;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 766881108 ^ 1342061851;
            continue;
          case 5:
            SimpleSquare.\u202A‫⁮‭⁪‭⁮⁮⁯‬‎⁮‍‏⁪‪‪‍⁮⁫‎⁭⁬⁭⁪‏‏⁫‪‍⁭⁮⁯‬‎‬‭‫‪‌‮((Control) this.panel1, new MouseEventHandler(this.Square_MouseClick));
            num1 = (int) num2 * 761299810 ^ 756146959;
            continue;
          case 6:
            num1 = (int) num2 * 972426159 ^ 954218478;
            continue;
          case 7:
            goto label_3;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
      EventHandler<MouseEventArgs> click = this.Click;
      if (click == null)
        return;
      click((object) this, e);
label_3:
      int num1 = 985787502;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 304414695)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            goto label_6;
          case 2:
            num1 = (int) num2 * -882235156 ^ 1429818806;
            continue;
          default:
            goto label_7;
        }
      }
label_6:
      return;
label_7:;
    }

    public void HighLight() => SimpleSquare.\u206F‪⁫‪‍‍⁭‎‏⁬‭‮‮‌⁯​‌‏⁬‭‏‌‍‎⁯⁬⁭‭‏‎‌‭‬‮‌‭‬‫‭‏‮((Control) this, Color.ForestGreen);

    public void ClearHighLight()
    {
label_1:
      int num1 = 409258732;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1005778328)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            SimpleSquare.\u206F‪⁫‪‍‍⁭‎‏⁬‭‮‮‌⁯​‌‏⁬‭‏‌‍‎⁯⁬⁭‭‏‎‌‭‬‮‌‭‬‫‭‏‮((Control) this, this.DefaultColor);
            num1 = (int) num2 * 192973954 ^ -1491332375;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public bool IsEmpty
    {
      get
      {
label_1:
        int num1 = -14845684;
        bool isEmpty;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1668653773)) % 3U)
          {
            case 1:
              isEmpty = this.Piece == null;
              num1 = (int) num2 * -227230912 ^ -1776078800;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return isEmpty;
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (!disposing)
        goto label_8;
label_1:
      int num1 = -2081510578;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -161272870)) % 7U)
        {
          case 1:
            num1 = (int) num2 * 136144807 ^ -1478805750;
            continue;
          case 2:
            goto label_7;
          case 3:
            int num3 = flag ? -654585087 : (num3 = -1983372320);
            num1 = num3 ^ (int) num2 * -1639233578;
            continue;
          case 4:
            SimpleSquare.\u202D⁮‎‍⁬‎‍‫​‪⁬‭​‬⁬‬⁪⁬‮‍‌‬‮​⁪‏‏⁪⁫⁫​‎‪‎⁪‌‎‬⁯⁯‮((IDisposable) this.components);
            num1 = (int) num2 * 995829855 ^ 157932513;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * -1376673737 ^ -387618856;
            continue;
          default:
            goto label_10;
        }
      }
label_7:
      int num4 = this.components != null ? 1 : 0;
      goto label_9;
label_10:
      base.Dispose(disposing);
      return;
label_8:
      num4 = 0;
label_9:
      flag = num4 != 0;
      num1 = -1188363306;
      goto label_2;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = 910178706;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 465002705)) % 15U)
        {
          case 0:
            SimpleSquare.\u202D⁬‭‍⁯‮‪‫⁭‭‍‎​‮‌‎⁮‬‭‍‪‮⁫⁯‬‫⁮‬‭‮​‍‮‪‏‫‮⁮‮⁯‮((Control) this.panel1, ImageLayout.Center);
            num1 = (int) num2 * 635224388 ^ -1212169624;
            continue;
          case 1:
            SimpleSquare.\u202C⁭‫⁪⁮⁭⁭⁭⁮⁪‫‮⁪‮⁬‬⁪⁭‮​‮⁫‪⁮⁭‭‫​⁬‭‬⁪‏‬‏​‭⁫⁮⁬‮((Control) this, \u003CModule\u003E.\u206A⁮⁮‬‌⁬‬⁯‬‭⁮​⁪⁫‫‍​​‫⁫‬‮‌⁯‍​​⁫⁮‍‮‬⁭‌‌‎‎⁮‮‍‮<string>(526564785U));
            SimpleSquare.\u206C‬‌​‮​‏‪⁮‏‏‎‫‍⁬⁯⁪⁭⁬‏⁬​​⁫​‭‪‭‬​‮‌⁪‏‌‌⁮⁯‬⁪‮((Control) this, new Size(137, 132));
            SimpleSquare.\u206B‍‭‏‮‏‫‍⁪⁮‭‪​​⁪⁭⁯‍⁮⁯⁭⁬⁯‏⁯‏⁫‌‫‫⁪⁫‌‮‬⁭‪⁪‬⁫‮((Control) this, false);
            num1 = (int) num2 * 993600174 ^ -121180855;
            continue;
          case 2:
            SimpleSquare.\u206E‌‫‪‭‭‬‫⁬⁫⁯⁭⁪⁫⁪‪‭‌⁯​‍‏‎‫‎‫⁭‍⁯⁪​‫‏‍⁪‌⁮​​⁮‮((Control) this.panel1, new Size(137, 132));
            num1 = (int) num2 * 1647229991 ^ 1210743037;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_1;
          case 5:
            SimpleSquare.\u202D⁬‭‍⁯‮‪‫⁭‭‍‎​‮‌‎⁮‬‭‍‪‮⁫⁯‬‫⁮‬‭‮​‍‮‪‏‫‮⁮‮⁯‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * 569731920 ^ -282036003;
            continue;
          case 6:
            SimpleSquare.\u202E‫‫‭‍⁮‮‫‎‫‍‏‏‪‌⁬‍⁫‏⁯‮‭‪‌‭​‏⁭⁭‬‭⁯‪‎⁮‬​‌‬‏‮((Control) this.panel1, 0);
            SimpleSquare.\u206C⁫‬⁮⁯⁯⁪⁯‌⁮‏‫⁮⁬​‌‎⁪‎‭‌​‌‭⁯​‮⁮‬‍‫‮‫⁮‬⁮‏⁮⁬⁪‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -1548850700 ^ 953026244;
            continue;
          case 7:
            num1 = (int) num2 * -169867848 ^ 1021966195;
            continue;
          case 8:
            SimpleSquare.\u202E⁭‏‬⁮‪⁭‏⁫⁬‭⁭‍​‏⁬⁫‪‫⁯⁭‌⁫‍⁬‌‏‭‪‍‬⁪‎⁬⁮‎⁭⁭⁭‫‮(SimpleSquare.\u206B‍⁭‫‌⁪⁭⁭‫⁯‭⁪‫‎⁯‮⁪⁯‬⁫‏‫‫​⁬‭‬⁯‏‭⁮‬‍​‏‍‭​‪‍‮((Control) this), (Control) this.panel1);
            SimpleSquare.\u202B‬⁫⁬⁮‭⁫⁭​‌⁫‮‭‭‭⁫‌‮⁬⁬‫⁭‎⁫‭‪​‫‭‫‮‬‬‏‭⁯‍⁭‍⁫‮((Control) this, new Padding(0));
            num1 = (int) num2 * 1084742842 ^ -1321263354;
            continue;
          case 9:
            SimpleSquare.\u202E⁪‌⁯⁪‎‪‫‮‎⁬⁯⁮‌⁬⁬⁭‪⁮​‮⁭⁪‭‫⁪‮‬‌⁪‪‪‎‬⁭‌‪​⁭⁭‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * 1887360835 ^ -618147965;
            continue;
          case 10:
            SimpleSquare.\u200D⁫​⁫⁬⁮⁭⁮⁯‪‬‭‬‬⁬⁭‏​⁭‍‌‌‭⁬⁬⁯‬⁫‎‮‍⁭‬⁭‪⁫⁫‎‬‎‮((Control) this.panel1, DockStyle.Fill);
            SimpleSquare.\u202C‭⁫⁮‏‪‏⁭⁫‭‪⁪‍‭‪‏‌‬‪‍‮‬⁯‎‭‎⁬‫⁮‪⁪‬‮⁯⁬‍​‫‫‫‮((Control) this.panel1, new Point(0, 0));
            num1 = (int) num2 * -1906494691 ^ -2092481940;
            continue;
          case 11:
            SimpleSquare.\u200C‏​‬‫⁫‪‌‫‫⁮‬‏‮⁭⁫‪‮⁫⁮⁫‫⁫⁭⁬⁭‭⁬‮‏⁭‮‌‫⁪‪‬‌⁯‍‮((Control) this.panel1, \u003CModule\u003E.\u206A⁮⁮‬‌⁬‬⁯‬‭⁮​⁪⁫‫‍​​‫⁫‬‮‌⁯‍​​⁫⁮‍‮‬⁭‌‌‎‎⁮‮‍‮<string>(699661777U));
            num1 = (int) num2 * -1179437436 ^ 903541693;
            continue;
          case 12:
            num1 = (int) num2 * 1850494452 ^ -949150459;
            continue;
          case 13:
            this.panel1 = SimpleSquare.\u200B‪‏⁯⁯⁪‫‭⁮⁪‮‏⁫⁪‮⁯⁫⁭‌‌⁪⁫⁫⁯‫‍‎‌⁬⁬‏⁫‪⁭‭⁮‫‎⁯‏‮();
            SimpleSquare.\u202D⁭‮⁮‍‮⁫‭‫‌‪‍‮⁭‭⁮⁬‫‬⁯⁮‪‮⁯‌⁫⁫‭⁫‪⁫‏⁮‬‪⁫⁯‭⁭⁬‮((Control) this);
            num1 = (int) num2 * -125561260 ^ 1875231655;
            continue;
          case 14:
            SimpleSquare.\u206F‪⁫‪‍‍⁭‎‏⁬‭‮‮‌⁯​‌‏⁬‭‏‌‍‎⁯⁬⁭‭‏‎‌‭‬‮‌‭‬‫‭‏‮((Control) this.panel1, Color.Transparent);
            num1 = (int) num2 * -1575624392 ^ 1555444288;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }

    static Delegate \u200C‬‎‭⁬⁭‫​‪‫‌‌⁬⁮‏‎‬​⁮‮‍‬‫‬‪‎​⁫‭‪‭⁮‬⁮‭​‪⁭‌‌‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206C​‏‮⁪‍⁭‍⁭⁫⁮⁬⁪‭⁯‭⁮⁭‪⁪⁬‍‎⁫⁭⁮‪​‌⁭​‎⁬‍‭‍⁫‎‪⁬‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static void \u206D⁭‮‬⁯‬‬‏‌‍‮⁮⁬⁭‬‮‮‎‏⁮⁮‬‍⁭‪‬‪‎‬‍⁯‫‮⁬‏‬‏‌⁮‭‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u206F‪⁫‪‍‍⁭‎‏⁬‭‮‮‌⁯​‌‏⁬‭‏‌‍‎⁯⁬⁭‭‏‎‌‭‬‮‌‭‬‫‭‏‮([In] Control obj0, [In] Color obj1) => obj0.BackColor = obj1;

    static void \u200C‪‎‍⁯‏⁫‮⁮‫⁬‮⁭‭‬⁭‭⁪‏⁪⁯‪‫⁮⁯⁯‮‬‭⁬‭‮⁬‫‪⁯⁫‎‭‭‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u202A‫⁮‭⁪‭⁮⁮⁯‬‎⁮‍‏⁪‪‪‍⁮⁫‎⁭⁬⁭⁪‏‏⁫‪‍⁭⁮⁯‬‎‬‭‫‪‌‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u202D⁮‎‍⁬‎‍‫​‪⁬‭​‬⁬‬⁪⁬‮‍‌‬‮​⁪‏‏⁪⁫⁫​‎‪‎⁪‌‎‬⁯⁯‮([In] IDisposable obj0) => obj0.Dispose();

    static Panel \u200B‪‏⁯⁯⁪‫‭⁮⁪‮‏⁫⁪‮⁯⁫⁭‌‌⁪⁫⁫⁯‫‍‎‌⁬⁬‏⁫‪⁭‭⁮‫‎⁯‏‮() => new Panel();

    static void \u202D⁭‮⁮‍‮⁫‭‫‌‪‍‮⁭‭⁮⁬‫‬⁯⁮‪‮⁯‌⁫⁫‭⁫‪⁫‏⁮‬‪⁫⁯‭⁭⁬‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u202D⁬‭‍⁯‮‪‫⁭‭‍‎​‮‌‎⁮‬‭‍‪‮⁫⁯‬‫⁮‬‭‮​‍‮‪‏‫‮⁮‮⁯‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u200D⁫​⁫⁬⁮⁭⁮⁯‪‬‭‬‬⁬⁭‏​⁭‍‌‌‭⁬⁬⁯‬⁫‎‮‍⁭‬⁭‪⁫⁫‎‬‎‮([In] Control obj0, [In] DockStyle obj1) => obj0.Dock = obj1;

    static void \u202C‭⁫⁮‏‪‏⁭⁫‭‪⁪‍‭‪‏‌‬‪‍‮‬⁯‎‭‎⁬‫⁮‪⁪‬‮⁯⁬‍​‫‫‫‮([In] Control obj0, [In] Point obj1) => obj0.Location = obj1;

    static void \u200C‏​‬‫⁫‪‌‫‫⁮‬‏‮⁭⁫‪‮⁫⁮⁫‫⁫⁭⁬⁭‭⁬‮‏⁭‮‌‫⁪‪‬‌⁯‍‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u206E‌‫‪‭‭‬‫⁬⁫⁯⁭⁪⁫⁪‪‭‌⁯​‍‏‎‫‎‫⁭‍⁯⁪​‫‏‍⁪‌⁮​​⁮‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u202E‫‫‭‍⁮‮‫‎‫‍‏‏‪‌⁬‍⁫‏⁯‮‭‪‌‭​‏⁭⁭‬‭⁯‪‎⁮‬​‌‬‏‮([In] Control obj0, [In] int obj1) => obj0.TabIndex = obj1;

    static void \u206C⁫‬⁮⁯⁯⁪⁯‌⁮‏‫⁮⁬​‌‎⁪‎‭‌​‌‭⁯​‮⁮‬‍‫‮‫⁮‬⁮‏⁮⁬⁪‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u202E⁪‌⁯⁪‎‪‫‮‎⁬⁯⁮‌⁬⁬⁭‪⁮​‮⁭⁪‭‫⁪‮‬‌⁪‪‪‎‬⁭‌‪​⁭⁭‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static Control.ControlCollection \u206B‍⁭‫‌⁪⁭⁭‫⁯‭⁪‫‎⁯‮⁪⁯‬⁫‏‫‫​⁬‭‬⁯‏‭⁮‬‍​‏‍‭​‪‍‮(
      [In] Control obj0)
    {
      return obj0.Controls;
    }

    static void \u202E⁭‏‬⁮‪⁭‏⁫⁬‭⁭‍​‏⁬⁫‪‫⁯⁭‌⁫‍⁬‌‏‭‪‍‬⁪‎⁬⁮‎⁭⁭⁭‫‮(
      [In] Control.ControlCollection obj0,
      [In] Control obj1)
    {
      obj0.Add(obj1);
    }

    static void \u202B‬⁫⁬⁮‭⁫⁭​‌⁫‮‭‭‭⁫‌‮⁬⁬‫⁭‎⁫‭‪​‫‭‫‮‬‬‏‭⁯‍⁭‍⁫‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202C⁭‫⁪⁮⁭⁭⁭⁮⁪‫‮⁪‮⁬‬⁪⁭‮​‮⁫‪⁮⁭‭‫​⁬‭‬⁪‏‬‏​‭⁫⁮⁬‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u206C‬‌​‮​‏‪⁮‏‏‎‫‍⁬⁯⁪⁭⁬‏⁬​​⁫​‭‪‭‬​‮‌⁪‏‌‌⁮⁯‬⁪‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206B‍‭‏‮‏‫‍⁪⁮‭‪​​⁪⁭⁯‍⁮⁯⁭⁬⁯‏⁯‏⁫‌‫‫⁪⁫‌‮‬⁭‪⁪‬⁫‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
