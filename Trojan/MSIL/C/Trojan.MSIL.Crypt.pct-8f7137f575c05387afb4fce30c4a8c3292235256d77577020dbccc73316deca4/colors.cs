// Decompiled with JetBrains decompiler
// Type: HTML_Maker___.colors
// Assembly: HTML Maker ++, Version=1.7.2.4, Culture=neutral, PublicKeyToken=null
// MVID: 8CACE2E4-A269-4B6F-A26B-3AA16814075D
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.pct-8f7137f575c05387afb4fce30c4a8c3292235256d77577020dbccc73316deca4.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace HTML_Maker___
{
  [DesignerGenerated]
  public class colors : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("PictureBox1")]
    private PictureBox _PictureBox1;

    [DebuggerNonUserCode]
    static colors()
    {
    }

    [DebuggerNonUserCode]
    public colors()
    {
      colors.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (colors.__ENCList)
      {
        if (colors.__ENCList.Count == colors.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (colors.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (colors.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                colors.__ENCList[index1] = colors.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          colors.__ENCList.RemoveRange(index1, checked (colors.__ENCList.Count - index1));
          colors.__ENCList.Capacity = colors.__ENCList.Count;
        }
        colors.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (colors));
      this.PictureBox1 = new PictureBox();
      ((ISupportInitialize) this.PictureBox1).BeginInit();
      this.SuspendLayout();
      this.PictureBox1.BackgroundImage = (Image) componentResourceManager.GetObject("PictureBox1.BackgroundImage");
      this.PictureBox1.BackgroundImageLayout = ImageLayout.Stretch;
      this.PictureBox1.Dock = DockStyle.Fill;
      this.PictureBox1.Location = new Point(0, 0);
      this.PictureBox1.Name = "PictureBox1";
      PictureBox pictureBox1 = this.PictureBox1;
      Size size1 = new Size(354, 626);
      Size size2 = size1;
      pictureBox1.Size = size2;
      this.PictureBox1.TabIndex = 0;
      this.PictureBox1.TabStop = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(354, 626);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.PictureBox1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (colors);
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "HTML Colors";
      ((ISupportInitialize) this.PictureBox1).EndInit();
      this.ResumeLayout(false);
    }

    internal virtual PictureBox PictureBox1
    {
      [DebuggerNonUserCode] get => this._PictureBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._PictureBox1 = value;
    }
  }
}
