// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartUsageWithUI.UsageReporterWithUI
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using Microsoft.Win32;
using SmartAssembly.SmartExceptionsCore;
using SmartAssembly.SmartUsageCore;
using System;
using System.Windows.Forms;

namespace SmartAssembly.SmartUsageWithUI
{
  internal class UsageReporterWithUI : UsageReporter1
  {
    private const string SmartAssemblyReportUsageValue = "SmartAssemblyReportUsage";
    private const string FirstRunPlaceholder = "Unknown";
    internal static readonly string ApplicationName;
    internal static readonly string CompanyName;
    private static bool? s_CanSendReportThisSession;

    public static void FeatureUsed(uint featureId)
    {
      UsageReporterWithUI usageReporterWithUi;
      try
      {
        usageReporterWithUi = new UsageReporterWithUI();
        usageReporterWithUi.RecordFeatureUsed(featureId);
      }
      catch (Exception ex)
      {
        UsageReporterWithUI o1 = usageReporterWithUi;
        // ISSUE: variable of a boxed type
        __Boxed<uint> o2 = (ValueType) featureId;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
        throw;
      }
    }

    public static void DynamicFeatureUsed(string featureName)
    {
      UsageReporterWithUI usageReporterWithUi;
      try
      {
        usageReporterWithUi = new UsageReporterWithUI();
        usageReporterWithUi.RecordFeatureUsed(featureName);
      }
      catch (Exception ex)
      {
        UsageReporterWithUI o1 = usageReporterWithUi;
        string o2 = featureName;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
        throw;
      }
    }

    protected override void ReportUsage(UsageReportSender1 sender)
    {
      try
      {
        sender.SendReport();
      }
      catch (Exception ex)
      {
        UsageReportSender1 o2 = sender;
        StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
        throw;
      }
    }

    protected override bool CanReportUsage()
    {
      try
      {
        return UsageReporterWithUI.CheckAgreedToUsageReports();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    private static bool CheckAgreedToUsageReports()
    {
      try
      {
        if (!UsageReporterWithUI.s_CanSendReportThisSession.HasValue)
          UsageReporterWithUI.ChooseWhetherToSendReport();
        return UsageReporterWithUI.s_CanSendReportThisSession.Value;
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    private static void ChooseWhetherToSendReport()
    {
      RegistryKey registryKey;
      string subkey;
      object obj;
      bool flag;
      try
      {
        registryKey = (RegistryKey) null;
        try
        {
          subkey = "Software\\" + UsageReporterWithUI.CompanyName + "\\" + UsageReporterWithUI.ApplicationName;
          registryKey = Registry.CurrentUser.CreateSubKey(subkey);
          obj = registryKey.GetValue("SmartAssemblyReportUsage");
          if (obj == null)
          {
            registryKey.SetValue("SmartAssemblyReportUsage", (object) bool.FalseString);
            flag = UsageReporterWithUI.AskUserForReportUsageConfirm();
            registryKey.SetValue("SmartAssemblyReportUsage", (object) flag.ToString(), RegistryValueKind.String);
            UsageReporterWithUI.s_CanSendReportThisSession = new bool?(flag);
          }
          else
            UsageReporterWithUI.s_CanSendReportThisSession = new bool?(Convert.ToBoolean(obj));
        }
        catch
        {
          UsageReporterWithUI.s_CanSendReportThisSession = new bool?(false);
        }
        finally
        {
          registryKey?.Close();
        }
      }
      catch (Exception ex)
      {
        RegistryKey o1 = registryKey;
        string o2 = subkey;
        object o3 = obj;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o4 = (ValueType) flag;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, o3, (object) o4);
        throw;
      }
    }

    private static bool AskUserForReportUsageConfirm()
    {
      ConfirmFeatureUsageReportingForm usageReportingForm;
      bool flag;
      try
      {
        usageReportingForm = new ConfirmFeatureUsageReportingForm();
        try
        {
          int num = (int) usageReportingForm.ShowDialog();
          flag = usageReportingForm.DialogResult == DialogResult.Yes;
        }
        finally
        {
          usageReportingForm?.Dispose();
        }
        return flag;
      }
      catch (Exception ex)
      {
        ConfirmFeatureUsageReportingForm o1 = usageReportingForm;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o2 = (ValueType) flag;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
        throw;
      }
    }

    static UsageReporterWithUI()
    {
      try
      {
        UsageReporterWithUI.ApplicationName = "server2";
        UsageReporterWithUI.CompanyName = "[Unknown company]";
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }
  }
}
