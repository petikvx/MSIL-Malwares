// Decompiled with JetBrains decompiler
// Type: TexasHoldem.ScoreCalculator
// Assembly: EventComm, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 230F04B0-E761-4388-A1F3-FE85FC156328
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.NanoBot.bezt-158185cef899d67faabf1e968de02b3a8cbd0446c0fdf0e3579cb4533dd3768d.exe

using System;
using System.Collections.Generic;
using System.Linq;

namespace TexasHoldem
{
  public static class ScoreCalculator
  {
    private const int BONUS_REQUIREMENT = 63;
    private const int BONUS_SCORE = 35;
    private const int FOUR_OF_A_KIND_COUNT = 4;
    private const int FULL_HOUSE_SCORE = 25;
    private const int LARGE_STRAIGHT_SCORE = 40;
    private const int MAX_SMALL_STRAIGHT_INDEX = 1;
    private const int SMALL_STRAIGHT_COUNT = 4;
    private const int SMALL_STRAIGHT_SCORE = 30;
    private const int THREE_OF_A_KIND_COUNT = 3;
    private const int YAHTZEE_COUNT = 5;
    private const int YAHTZEE_SCORE = 50;

    public static int CalculateBonus(Dictionary<ScoringCategory, int> scores) => scores[ScoringCategory.Aces] + scores[ScoringCategory.Twos] + scores[ScoringCategory.Threes] + scores[ScoringCategory.Fours] + scores[ScoringCategory.Fives] + scores[ScoringCategory.Sixes] >= 63 ? 35 : 0;

    public static Dictionary<ScoringCategory, int> CalculateDice(
      List<int> dice)
    {
      return new Dictionary<ScoringCategory, int>()
      {
        {
          ScoringCategory.Aces,
          ScoreCalculator.CalculateAces(dice)
        },
        {
          ScoringCategory.Twos,
          ScoreCalculator.CalculateTwos(dice)
        },
        {
          ScoringCategory.Threes,
          ScoreCalculator.CalculateThrees(dice)
        },
        {
          ScoringCategory.Fours,
          ScoreCalculator.CalculateFours(dice)
        },
        {
          ScoringCategory.Fives,
          ScoreCalculator.CalculateFives(dice)
        },
        {
          ScoringCategory.Sixes,
          ScoreCalculator.CalculateSixes(dice)
        },
        {
          ScoringCategory.ThreeOfAKind,
          ScoreCalculator.CalculateThreeOfAKind(dice)
        },
        {
          ScoringCategory.FourOfAKind,
          ScoreCalculator.CalculateFourOfAKind(dice)
        },
        {
          ScoringCategory.FullHouse,
          ScoreCalculator.CalculateFullHouse(dice)
        },
        {
          ScoringCategory.SmallStraight,
          ScoreCalculator.CalculateSmallStraight(dice)
        },
        {
          ScoringCategory.LargeStraight,
          ScoreCalculator.CalculateLargeStraight(dice)
        },
        {
          ScoringCategory.Yahtzee,
          ScoreCalculator.CalculateYahtzee(dice)
        },
        {
          ScoringCategory.Chance,
          ScoreCalculator.CalculateChance(dice)
        }
      };
    }

    private static int CalculateAces(List<int> dice) => ScoreCalculator.CalculateUpperSectionCategory(dice, 1);

    private static int CalculateChance(List<int> dice) => dice.Sum();

    private static int CalculateCountOfAKind(List<int> dice, int count)
    {
      foreach (int die1 in dice)
      {
        int face = die1;
        if (dice.FindAll((Predicate<int>) (die => die == face)).Count >= count)
          return dice.Sum();
      }
      return 0;
    }

    private static int CalculateFives(List<int> dice) => ScoreCalculator.CalculateUpperSectionCategory(dice, 5);

    private static int CalculateFourOfAKind(List<int> dice) => ScoreCalculator.CalculateCountOfAKind(dice, 4);

    private static int CalculateFours(List<int> dice) => ScoreCalculator.CalculateUpperSectionCategory(dice, 4);

    private static int CalculateFullHouse(List<int> dice)
    {
      List<int> all1 = dice.FindAll((Predicate<int>) (die => die == dice[0]));
      List<int> all2 = dice.FindAll((Predicate<int>) (die => die == dice[dice.Count - 1]));
      return all1.Count == 2 && all2.Count == 3 || all1.Count == 3 && all2.Count == 2 ? 25 : 0;
    }

    private static int CalculateLargeStraight(List<int> dice) => dice[1] == dice[0] + 1 && dice[2] == dice[0] + 2 && dice[3] == dice[0] + 3 && dice[4] == dice[0] + 4 ? 40 : 0;

    private static int CalculateSixes(List<int> dice) => ScoreCalculator.CalculateUpperSectionCategory(dice, 6);

    private static int CalculateSmallStraight(List<int> dice)
    {
      List<int> list = dice.Distinct<int>().ToList<int>();
      return list.Count < 4 || list[1] != list[0] + 1 || list[2] != list[0] + 2 || list[3] != list[0] + 3 ? 0 : 30;
    }

    private static int CalculateThreeOfAKind(List<int> dice) => ScoreCalculator.CalculateCountOfAKind(dice, 3);

    private static int CalculateThrees(List<int> dice) => ScoreCalculator.CalculateUpperSectionCategory(dice, 3);

    private static int CalculateTwos(List<int> dice) => ScoreCalculator.CalculateUpperSectionCategory(dice, 2);

    private static int CalculateUpperSectionCategory(List<int> dice, int face) => dice.FindAll((Predicate<int>) (die => die == face)).Count * face;

    private static int CalculateYahtzee(List<int> dice) => ScoreCalculator.CalculateCountOfAKind(dice, 5) > 0 ? 50 : 0;
  }
}
