// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: p的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E9517A17-41D2-4860-BC69-C7D574C89AF9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-9548c6a9da2d6cee9d27565c0055be4429cabfae9287ab3e525aaba66fd67032.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -551070734;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -931424947)) % 5U)
          {
            case 0:
              eventHandler2 = (EventHandler) Square.\u202B​⁫‫⁯⁮‏⁭⁪‫⁮‮⁭‎⁮‫⁬‬⁭‬‫⁮⁬‬‪‮‭⁮⁫‮‍​‏‪‏‭‍‪‮⁯‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * 457448439 ^ -429133178;
              continue;
            case 1:
              goto label_3;
            case 2:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              int num3 = eventHandler1 == comparand ? -977876626 : (num3 = -170624234);
              num1 = num3 ^ (int) num2 * 1047632247;
              continue;
            case 3:
              goto label_1;
            case 4:
              comparand = eventHandler1;
              num1 = -1990523316;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -886079784;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1400123816)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              comparand = eventHandler1;
              eventHandler2 = (EventHandler) Square.\u202D‎⁪⁪⁮‍‍‏‫⁬‎‌‌‫‌‮‪⁪‎‭‬⁯⁮⁭‌‏‫‎⁬⁮‮⁪‫⁪⁫‌⁯‌‎⁮‮((Delegate) comparand, (Delegate) value);
              num1 = -66690052;
              continue;
            case 2:
              int num3 = eventHandler1 == comparand ? -307274939 : (num3 = -1346992000);
              num1 = num3 ^ (int) num2 * 541339348;
              continue;
            case 3:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * -1406682559 ^ -1568632830;
              continue;
            case 4:
              goto label_3;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName
    {
      get
      {
label_1:
        int num1 = -1035262786;
        string specialName;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -694353403)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 1706163287 ^ -2053007588;
              continue;
            case 3:
              specialName = Square.\u202C‪⁪⁬⁫⁬‎‎‏‏‬‪‍⁮‭‎‬‫‫‪⁬⁪‪‮⁬⁯⁭‫‭​‪​‮‏‬‬‫‭‌⁪‮(this.CurrentSquare, \u003CModule\u003E.\u206D‎‫‫‭‮⁬‬‮⁭⁪‬⁫⁯‪⁫‌‌‍‌⁪‮⁬‬‎‎‮⁬‭⁪‍⁪‮⁫‌⁪⁭⁫‎⁫‮<string>(2020078550U), Square.\u206D‬⁪‫‏⁪⁫​‬‮⁬⁬⁬‬⁮⁯⁮‎‪⁪‎‬⁬⁭‏⁯⁯‍‌‌⁫⁬‪‎‬​⁪‮‍‍‮((object) this.Piece));
              num1 = (int) num2 * 1592770396 ^ -27766652;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
label_1:
        int num1 = -1960943177;
        char ch;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1467166990)) % 4U)
          {
            case 0:
              currentSquare = Square.\u206F⁮‎⁪⁯‪‌⁮‎‮‫‌​‪⁫‪‭‪‮​‎‌​⁫⁭⁪‫‪⁬‭‬‭‎‍‫‌‮‪⁪‏‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * -1426514629 ^ -1802819175;
              continue;
            case 1:
              ch = Square.\u206F⁯‏‫‮⁭⁭‮⁯⁭‍‍⁯⁪‮⁮⁯⁭‏⁯‭‭​‎‍‌‪‪‌‎‎‭⁯​‍‍‍‪‭⁭‮(\u003CModule\u003E.\u206D‏⁯‬‫‫‍⁭‬‪⁪‪‌‭‭‪‎⁮‭‌‍‭‏⁪​‎‭‏‪‍⁫⁭‏⁯‏⁯⁫‮⁬‮‮<string>(2079773001U), this.File);
              num1 = (int) num2 * -1981542245 ^ 837399697;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
label_1:
      int num1 = 1522962427;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1327402701)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * -786410610 ^ 710521034;
              continue;
            }
            goto label_5;
          case 2:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
label_1:
      int num1 = -353717439;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1775511216)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 504450548 ^ -1552463943;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.File = file;
            num1 = (int) num2 * -2145121769 ^ 1053033395;
            continue;
          case 4:
            this.Name = Square.\u206F⁮‎⁪⁯‪‌⁮‎‮‫‌​‪⁫‪‭‪‮​‎‌​⁫⁭⁪‫‪⁬‭‬‭‎‍‫‌‮‪⁪‏‮(Square.\u206F⁯‏‫‮⁭⁭‮⁯⁭‍‍⁯⁪‮⁮⁯⁭‏⁯‭‭​‎‍‌‪‪‌‎‎‭⁯​‍‍‍‪‭⁭‮(\u003CModule\u003E.\u206C‍‎‫‬⁯‫⁭‍‪‭⁮​‍‌‏‌⁮⁭⁮⁬​⁭‭⁪⁭‍⁮⁯⁮⁯⁮‏‭⁭‫‮⁬‭‫‮<string>(3004615292U), file).ToString(), (this.Rank + 1).ToString());
            num1 = (int) num2 * 1125613955 ^ -1771468554;
            continue;
          case 5:
            num1 = (int) num2 * 170148818 ^ -1347886875;
            continue;
          case 6:
            this.Rank = rank;
            num1 = (int) num2 * -2076794211 ^ -744220718;
            continue;
          case 7:
            this.Board = Board;
            num1 = (int) num2 * -1854666607 ^ 2037297732;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public Square()
    {
label_1:
      int num1 = -955972;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -699761469)) % 5U)
        {
          case 0:
            this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
            num1 = (int) num2 * -2134328220 ^ -1878343182;
            continue;
          case 1:
            num1 = (int) num2 * 1633976325 ^ 1580110334;
            continue;
          case 2:
            this.InitializeComponent();
            num1 = (int) num2 * 152695688 ^ -1345585104;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void SwitchPlayer()
    {
label_1:
      int num1 = -1409663853;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1707364761)) % 9U)
        {
          case 0:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * -1562895417 ^ 324232860;
            continue;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 487281969 ^ 1653291554;
            continue;
          case 3:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -1849626820;
            continue;
          case 4:
            num1 = -745926923;
            continue;
          case 5:
            int num3 = this.Board.DisableTurns ? 1336708697 : (num3 = 1771814111);
            num1 = num3 ^ (int) num2 * 708430599;
            continue;
          case 6:
            num1 = (int) num2 * -429439947 ^ 1550677883;
            continue;
          case 7:
            goto label_1;
          case 8:
            int num4 = this.Board.WhosPlaying != PieceColor.White ? -1855014883 : (num4 = -1688383308);
            num1 = num4 ^ (int) num2 * -863918096;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private bool getSide(Square x)
    {
label_1:
      int num1 = -1974998832;
      bool side;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1345265985)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
            break;
          case 3:
            if (!this.Board.DisableTurns)
            {
              num1 = (int) num2 * -671161846 ^ -1709672446;
              continue;
            }
            num3 = 1;
            break;
          case 4:
            num1 = (int) num2 * 75515151 ^ 143483101;
            continue;
          default:
            goto label_9;
        }
        side = num3 != 0;
        num1 = -50648074;
      }
label_9:
      return side;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
      if (Square.\u206C⁮⁫‮⁮‫⁬‎⁯⁭‭⁭⁫⁬⁪‌‭⁬⁪‏‍‎⁮⁮‪‌‌‏‭⁫‭‬⁭‍‬⁮‭‪​⁮‮(e) != MouseButtons.Left)
        goto label_89;
label_1:
      int num1 = -1199131448;
label_2:
      while (true)
      {
        uint num2;
        bool side;
        bool flag1;
        bool flag2;
        bool disableTurns;
        bool flag3;
        bool flag4;
        List<PossibleMoves> move1;
        bool flag5;
        bool flag6;
        List<PossibleMoves> move2;
        bool flag7;
        bool flag8;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ -1812241713)) % 86U)
        {
          case 0:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1949373974 ^ -503967377;
            continue;
          case 1:
            num1 = (int) num2 * 1594785629 ^ -839043956;
            continue;
          case 2:
            to.MovePawn(this.Board.From);
            num1 = -238831450;
            continue;
          case 3:
            num1 = (int) num2 * 291986569 ^ -789696316;
            continue;
          case 4:
            int num5 = !flag5 ? -333086888 : (num5 = -1901863073);
            num1 = num5 ^ (int) num2 * 594417393;
            continue;
          case 5:
            to.HighLight();
            num1 = (int) num2 * -843941770 ^ -1645150988;
            continue;
          case 6:
            num1 = (int) num2 * 1262152106 ^ 271980823;
            continue;
          case 7:
            int num6 = flag8 ? 1849051131 : (num6 = 11821132);
            num1 = num6 ^ (int) num2 * 1004035291;
            continue;
          case 8:
            int num7 = !disableTurns ? 457948664 : (num7 = 1970190526);
            num1 = num7 ^ (int) num2 * 1995561799;
            continue;
          case 9:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -174012862 ^ 216114505;
            continue;
          case 10:
            goto label_89;
          case 11:
            disableTurns = this.Board.DisableTurns;
            num1 = -1096333211;
            continue;
          case 12:
            to = this;
            if (this.Board.From == null)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 155395404 ^ -1885353918;
            continue;
          case 13:
            num1 = (int) num2 * -1742749702 ^ -1855276591;
            continue;
          case 14:
            this.msg = \u003CModule\u003E.\u202E​‎⁮‍​⁮⁬⁪​‏⁫​​​⁮​‬‬⁮⁪⁬⁬‎‎‍‫‬⁯⁪‮⁫⁯‫⁯​‎‫⁯‮‮<string>(3991155278U);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -491093501 ^ -504170198;
            continue;
          case 15:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u202E​‎⁮‍​⁮⁬⁪​‏⁫​​​⁮​‬‬⁮⁪⁬⁬‎‎‍‫‬⁯⁪‮⁫⁯‫⁯​‎‫⁯‮‮<string>(232841729U);
            num1 = (int) num2 * 1621544702 ^ -1999466999;
            continue;
          case 16:
            num1 = (int) num2 * 942661691 ^ -509422255;
            continue;
          case 17:
            this.msg = \u003CModule\u003E.\u200B‎⁬‪​⁮‬‪‌⁮⁬‭⁭​⁭⁪‮‭‭‏​​⁭⁯‎‭‫‏⁬‮‌⁮‌‏​⁪‭‪⁫‍‮<string>(197371349U);
            num1 = (int) num2 * -1677779802 ^ 1887773058;
            continue;
          case 18:
            int num8 = flag7 ? -1674583266 : (num8 = -495678695);
            num1 = num8 ^ (int) num2 * 2086421098;
            continue;
          case 19:
            int num9;
            num1 = num9 = flag1 ? -625243924 : (num9 = -903730426);
            continue;
          case 20:
            num1 = (int) num2 * -734014429 ^ 730684642;
            continue;
          case 21:
            num1 = (int) num2 * 872961616 ^ -1896955530;
            continue;
          case 22:
            num1 = (int) num2 * 1103452507 ^ -508821478;
            continue;
          case 23:
            num1 = (int) num2 * 150455754 ^ 801392052;
            continue;
          case 24:
            num1 = (int) num2 * -2071493700 ^ -834902068;
            continue;
          case 25:
            num1 = -1581246849;
            continue;
          case 26:
            goto label_3;
          case 27:
            this.Board.From = to;
            num1 = (int) num2 * 1308487990 ^ 1913970856;
            continue;
          case 28:
            goto label_1;
          case 29:
            this.msg = \u003CModule\u003E.\u206C‍‎‫‬⁯‫⁭‍‪‭⁮​‍‌‏‌⁮⁭⁮⁬​⁭‭⁪⁭‍⁮⁯⁮⁯⁮‏‭⁭‫‮⁬‭‫‮<string>(25019988U);
            num1 = (int) num2 * -1904684144 ^ 403836727;
            continue;
          case 30:
            num1 = (int) num2 * -1476127729 ^ 1188213158;
            continue;
          case 31:
            num1 = (int) num2 * -1806190691 ^ 276403024;
            continue;
          case 32:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1685841943 ^ 191581732;
            continue;
          case 33:
            this.Board.From = (Square) null;
            num1 = (int) num2 * 1766489546 ^ -663547852;
            continue;
          case 34:
            flag3 = this.Board.From.Piece.Color == to.Piece.Color;
            num1 = -809290412;
            continue;
          case 35:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -1191463639 ^ 1305314129;
            continue;
          case 36:
            num1 = (int) num2 * 65648745 ^ -895019636;
            continue;
          case 37:
            num1 = (int) num2 * 722369316 ^ -1670600521;
            continue;
          case 38:
            num1 = (int) num2 * 55583330 ^ 1530778831;
            continue;
          case 39:
            if (to.Piece != null)
            {
              num1 = -1001085536;
              continue;
            }
            num4 = 0;
            goto label_70;
          case 40:
            int num10 = side ? 1070378625 : (num10 = 1489397656);
            num1 = num10 ^ (int) num2 * -51394417;
            continue;
          case 41:
            num1 = (int) num2 * 1061753553 ^ -1137524851;
            continue;
          case 42:
            this.msg = \u003CModule\u003E.\u202E​‎⁮‍​⁮⁬⁪​‏⁫​​​⁮​‬‬⁮⁪⁬⁬‎‎‍‫‬⁯⁪‮⁫⁯‫⁯​‎‫⁯‮‮<string>(3100714042U);
            num1 = -58728529;
            continue;
          case 43:
            side = this.getSide(this.Board.From);
            num1 = -1774464575;
            continue;
          case 44:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -1746021374 ^ -1113149039;
            continue;
          case 45:
            flag8 = move2.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * 774437041 ^ -973212733;
            continue;
          case 46:
            num1 = -1724821975;
            continue;
          case 47:
            this.Board.From.ClearHighLight();
            to.HighLight();
            num1 = (int) num2 * -316663646 ^ 655115731;
            continue;
          case 48:
            num1 = (int) num2 * -1726889198 ^ -261405502;
            continue;
          case 49:
            int num11 = flag2 ? 799530138 : (num11 = 1386555056);
            num1 = num11 ^ (int) num2 * -176525291;
            continue;
          case 50:
            move2 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            this.msg = Square.\u200C‫‪⁫⁭‪‪‎‏⁫‬‌‏‍‪⁪⁬⁫‌‪⁬‍‬‎‌‍‬⁪⁯⁮‭‪‍⁫⁫‌⁮‫‏⁫‮(\u003CModule\u003E.\u202E​‎⁮‍​⁮⁬⁪​‏⁫​​​⁮​‬‬⁮⁪⁬⁬‎‎‍‫‬⁯⁪‮⁫⁯‫⁯​‎‫⁯‮‮<string>(390080613U), (object) move2.Count);
            num1 = (int) num2 * -1347419572 ^ 869990861;
            continue;
          case 51:
            num3 = this.Board.From.Piece != null ? 1 : 0;
            break;
          case 52:
            to.HighLight();
            num1 = (int) num2 * -536915536 ^ 102746370;
            continue;
          case 53:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = (int) num2 * 1048309786 ^ 1592987714;
            continue;
          case 54:
            num1 = (int) num2 * 1370993123 ^ -196955399;
            continue;
          case 55:
            num1 = (int) num2 * -2124287904 ^ 1599277431;
            continue;
          case 56:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200B‎⁬‪​⁮‬‪‌⁮⁬‭⁭​⁭⁪‮‭‭‏​​⁭⁯‎‭‫‏⁬‮‌⁮‌‏​⁪‭‪⁫‍‮<string>(197371349U);
            num1 = (int) num2 * -1922073549 ^ -2090013179;
            continue;
          case 57:
            num1 = (int) num2 * 1396202882 ^ 1371212558;
            continue;
          case 58:
            this.msg = \u003CModule\u003E.\u200B‎⁬‪​⁮‬‪‌⁮⁬‭⁭​⁭⁪‮‭‭‏​​⁭⁯‎‭‫‏⁬‮‌⁮‌‏​⁪‭‪⁫‍‮<string>(4045784297U);
            num1 = (int) num2 * -278481132 ^ -388780141;
            continue;
          case 59:
            flag2 = to.Piece.Id == this.Board.From.Piece.Id;
            num1 = (int) num2 * 1874909139 ^ 624739045;
            continue;
          case 60:
            flag6 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * -1832863142 ^ 1632958152;
            continue;
          case 61:
            num4 = this.getSide(to) ? 1 : 0;
            goto label_70;
          case 62:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 1872923246 ^ 1258579151;
            continue;
          case 63:
            num1 = -329346230;
            continue;
          case 64:
            num1 = (int) num2 * 929295089 ^ 102305219;
            continue;
          case 65:
            flag7 = this.Board.From.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * 828297374 ^ 1532275253;
            continue;
          case 66:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1081316174 ^ 2117706054;
            continue;
          case 67:
            num1 = (int) num2 * -299995272 ^ -111981383;
            continue;
          case 68:
            num1 = (int) num2 * 463590116 ^ -1136729035;
            continue;
          case 69:
            num1 = -58728529;
            continue;
          case 70:
            num1 = -1769907674;
            continue;
          case 71:
            int num12 = !flag3 ? -523722745 : (num12 = -546231936);
            num1 = num12 ^ (int) num2 * 956798545;
            continue;
          case 72:
            num1 = (int) num2 * -1072442791 ^ -1838274950;
            continue;
          case 73:
            this.msg = \u003CModule\u003E.\u206D‏⁯‬‫‫‍⁭‬‪⁪‪‌‭‭‪‎⁮‭‌‍‭‏⁪​‎‭‏‪‍⁫⁭‏⁯‏⁯⁫‮⁬‮‮<string>(1257607819U);
            num1 = (int) num2 * -630846164 ^ 1324248158;
            continue;
          case 74:
            move1 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * -552490011 ^ -1579207630;
            continue;
          case 75:
            flag5 = move1.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * -822177911 ^ 1836680584;
            continue;
          case 76:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1232145129 ^ 145794631;
            continue;
          case 77:
            int num13 = !flag6 ? 1626908795 : (num13 = 772206197);
            num1 = num13 ^ (int) num2 * 724378381;
            continue;
          case 78:
            num1 = (int) num2 * 1638207400 ^ 289325251;
            continue;
          case 79:
            num1 = (int) num2 * 216118391 ^ -683820050;
            continue;
          case 80:
            num1 = (int) num2 * -699636919 ^ 188857584;
            continue;
          case 81:
            int num14 = flag4 ? 1514093976 : (num14 = 566152101);
            num1 = num14 ^ (int) num2 * 1841868052;
            continue;
          case 82:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 206893081 ^ -1298446777;
            continue;
          case 83:
            to.HighLight();
            num1 = (int) num2 * 1781019822 ^ -1368772152;
            continue;
          case 84:
            int num15 = !(to.Piece == null & flag1) ? -4736856 : (num15 = -1447926639);
            num1 = num15 ^ (int) num2 * 809063557;
            continue;
          case 85:
            num1 = -942400777;
            continue;
          default:
            goto label_94;
        }
        flag1 = num3 != 0;
        num1 = -1924454487;
        continue;
label_70:
        flag4 = num4 != 0;
        num1 = -636228444;
      }
label_3:
      return;
label_94:
      return;
label_89:
      Square.action(this.msg);
      num1 = -831484550;
      goto label_2;
    }

    private void hideMoves(Square to)
    {
      if (this.Board.From == null)
        return;
label_1:
      int num1 = -2097866492;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -135631763)) % 6U)
        {
          case 0:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * 1819117724 ^ -2058129648;
            continue;
          case 1:
            num1 = (int) num2 * -1864812707 ^ 1019875066;
            continue;
          case 2:
            goto label_8;
          case 3:
            num1 = (int) num2 * 1722576993 ^ -57920000;
            continue;
          case 4:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1788911388 ^ 1447177467;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_8:
      return;
label_9:;
    }

    private void CaptPawn(Square from)
    {
      bool flag1 = this.Piece.Color == PieceColor.White;
label_1:
      int num1 = 1654160317;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1704282574)) % 33U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = 779924882;
            continue;
          case 2:
            int num5 = !flag4 ? 1250383309 : (num5 = 1478403888);
            num1 = num5 ^ (int) num2 * -1207876005;
            continue;
          case 3:
            flag4 = this.Piece.Color == PieceColor.Black;
            num1 = 1516619610;
            continue;
          case 4:
            num1 = (int) num2 * 1371314186 ^ 1294093911;
            continue;
          case 6:
            flag2 = true;
            num1 = (int) num2 * -1096609933 ^ -1466426430;
            continue;
          case 7:
            flag2 = true;
            num1 = (int) num2 * -1218670180 ^ -1560237236;
            continue;
          case 8:
            num1 = (int) num2 * -822157361 ^ 1837381305;
            continue;
          case 9:
            if (flag5)
            {
              num1 = (int) num2 * 1927314854 ^ -870550984;
              continue;
            }
            goto label_58;
          case 10:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 11:
            int num6 = flag7 ? -151984529 : (num6 = -1538497839);
            num1 = num6 ^ (int) num2 * 704104280;
            continue;
          case 12:
            num1 = 982807377;
            continue;
          case 13:
            num1 = (int) num2 * -176241465 ^ -1872033903;
            continue;
          case 14:
            int num7 = flag3 ? -152179372 : (num7 = -71074752);
            num1 = num7 ^ (int) num2 * 1422365652;
            continue;
          case 15:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 464057237 ^ 1133599937;
            continue;
          case 16:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            this.handleWhiteCastling();
            num1 = (int) num2 * 812489422 ^ 1462126306;
            continue;
          case 17:
            this.Piece = from.Piece;
            num1 = 921557537;
            continue;
          case 18:
            flag5 = flag2;
            num1 = (int) num2 * -1671744807 ^ 1962012779;
            continue;
          case 19:
            num1 = (int) num2 * -1660642288 ^ -909654096;
            continue;
          case 20:
            num1 = (int) num2 * -1128703400 ^ 1581159589;
            continue;
          case 21:
            num1 = 52091696;
            continue;
          case 22:
            this.handleBlackCastling();
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 1911050940 ^ 949145622;
              continue;
            }
            num4 = 0;
            goto label_28;
          case 23:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * 38844369 ^ -1951249225;
            continue;
          case 24:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = 1585538350;
            continue;
          case 25:
            from.Piece = (ChessPiece) null;
            num1 = 1486855578;
            continue;
          case 26:
            int num8 = flag6 ? 488245663 : (num8 = 1583198032);
            num1 = num8 ^ (int) num2 * 392459736;
            continue;
          case 27:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * -1294072175 ^ -1455046571;
            continue;
          case 28:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_28;
          case 29:
            flag2 = false;
            flag3 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 48533527 ^ -2087841312;
            continue;
          case 30:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -1383155466 ^ -1027501528;
            continue;
          case 31:
            int num9;
            num1 = num9 = from.Piece.Color != PieceColor.White ? 806595387 : (num9 = 32494078);
            continue;
          case 32:
            int num10 = flag1 ? 584008060 : (num10 = 1209051010);
            num1 = num10 ^ (int) num2 * 1684531492;
            continue;
          default:
            goto label_41;
        }
        flag6 = num3 != 0;
        num1 = 1712561782;
        continue;
label_28:
        flag7 = num4 != 0;
        num1 = 47938732;
      }
label_41:
      Promotion promotion = new Promotion(Square.\u206D⁬⁭⁮‬‬‮‏‌⁮‭‏⁪‬⁫‏⁭⁬⁪⁬⁯‌⁯⁮‪⁬‍⁫‍⁭‬‭‍‌‮‮⁫‎‭⁬‮());
      try
      {
label_43:
        int num11 = 1955204503;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 1704282574)) % 4U)
          {
            case 0:
              num11 = (int) num12 * -1253681885 ^ -2100279468;
              continue;
            case 1:
              int num13 = (int) Square.\u200D⁭‫‭‬⁪‏​​‎‏⁭‮‌⁪⁮‪⁬‌​‏‭‫⁭⁪⁪‌​⁭​⁮‌⁬‎⁫‫‫⁫⁯‬‮((Form) promotion);
              this.Kind = promotion.Piece;
              num11 = (int) num12 * 265154958 ^ -724820280;
              continue;
            case 3:
              goto label_43;
            default:
              goto label_54;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_48:
          int num14 = 864715155;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 1704282574)) % 4U)
            {
              case 0:
                goto label_48;
              case 1:
                Square.\u200B⁬‎‮​‮‪‌⁬‮‏‌‪‪‭‎‎⁬⁬⁭⁭‭‍‫‭‫‫⁫⁯⁫‎⁭‮⁪⁪‏​‪⁪‏‮((IDisposable) promotion);
                num14 = (int) num15 * 417306313 ^ 756526268;
                continue;
              case 3:
                num14 = (int) num15 * -568260276 ^ 2109939484;
                continue;
              default:
                goto label_53;
            }
          }
        }
label_53:;
      }
label_54:
label_55:
      int num16 = 1606891578;
label_56:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ 1704282574)) % 7U)
        {
          case 0:
            num16 = (int) num17 * 490727641 ^ 927196961;
            continue;
          case 1:
            goto label_58;
          case 2:
            goto label_57;
          case 3:
            this.SwitchPlayer();
            num16 = (int) num17 * -1889469853 ^ 1329640482;
            continue;
          case 4:
            PlaySound.Play();
            num16 = (int) num17 * -1801778181 ^ -178439179;
            continue;
          case 5:
            goto label_55;
          case 6:
            num16 = (int) num17 * -1040780472 ^ -120683061;
            continue;
          default:
            goto label_50;
        }
      }
label_57:
      return;
label_50:
      return;
label_58:
      this.Board.lights.FindAllMoves();
      num16 = 1864055548;
      goto label_56;
    }

    private void MovePawn(Square from)
    {
label_1:
      int num1 = -205098100;
      bool flag1;
      ChessPiece chessPiece;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -1275757462)) % 27U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = -508731095;
            continue;
          case 2:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_12;
          case 3:
            num1 = (int) num2 * -1426564366 ^ 1925806000;
            continue;
          case 4:
            num1 = -979330292;
            continue;
          case 5:
            if (this.Rank != 3)
            {
              num1 = (int) num2 * -965273840 ^ 813880390;
              continue;
            }
            num4 = 1;
            goto label_19;
          case 6:
            num4 = this.Rank == 4 ? 1 : 0;
            goto label_19;
          case 7:
            flag2 = true;
            num1 = (int) num2 * 1549103355 ^ -2044510590;
            continue;
          case 8:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              goto label_12;
            }
            else
            {
              num1 = (int) num2 * -1731207613 ^ -1785348367;
              continue;
            }
          case 9:
            num5 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 10:
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * -204828430 ^ -1966884960;
            continue;
          case 11:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            chessPiece = this.handleBlackCastling();
            num1 = (int) num2 * -839879010 ^ -1506779063;
            continue;
          case 12:
            if (flag2)
            {
              num1 = (int) num2 * -334041114 ^ -2077717736;
              continue;
            }
            goto label_79;
          case 13:
            int num6 = flag3 ? -263810856 : (num6 = -762256892);
            num1 = num6 ^ (int) num2 * -1067606400;
            continue;
          case 14:
            num1 = -42928076;
            continue;
          case 15:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * -984546365 ^ 1717136070;
            continue;
          case 16:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num5 = 0;
              break;
            }
            num1 = (int) num2 * -743851574 ^ -630785737;
            continue;
          case 17:
            from.Piece = (ChessPiece) null;
            num1 = -89350495;
            continue;
          case 18:
            chessPiece = (ChessPiece) null;
            this.Piece = from.Piece;
            this.Board.lastPassantPawn = (ChessPiece) null;
            int num7 = this.Piece.Kind == Pieces.Pawn ? 677993560 : (num7 = 1010032512);
            num1 = num7 ^ (int) num2 * -1646865016;
            continue;
          case 19:
            int num8 = flag1 ? 1772914300 : (num8 = 721009497);
            num1 = num8 ^ (int) num2 * -460766559;
            continue;
          case 20:
            num1 = (int) num2 * 1870114490 ^ -910813899;
            continue;
          case 21:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 229515823 ^ -1477557438;
            continue;
          case 22:
            flag2 = false;
            flag1 = this.Piece.Color == PieceColor.White;
            num1 = -1079874447;
            continue;
          case 23:
            num1 = (int) num2 * 711441993 ^ 311871388;
            continue;
          case 25:
            flag2 = true;
            num1 = (int) num2 * 1561828026 ^ -1266375770;
            continue;
          case 26:
            num1 = -743632976;
            continue;
          default:
            goto label_38;
        }
        flag3 = num5 != 0;
        num1 = -1985528208;
        continue;
label_12:
        int num9;
        num1 = num9 = num3 != 0 ? -931509795 : (num9 = -1907703984);
        continue;
label_19:
        int num10;
        num1 = num10 = num4 == 0 ? -110675100 : (num10 = -1764291620);
      }
label_38:
      Promotion promotion = new Promotion(Square.\u206D⁬⁭⁮‬‬‮‏‌⁮‭‏⁪‬⁫‏⁭⁬⁪⁬⁯‌⁯⁮‪⁬‍⁫‍⁭‬‭‍‌‮‮⁫‎‭⁬‮());
      try
      {
label_40:
        int num11 = -1306959196;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ -1275757462)) % 4U)
          {
            case 0:
              goto label_40;
            case 2:
              int num13 = (int) Square.\u200D⁭‫‭‬⁪‏​​‎‏⁭‮‌⁪⁮‪⁬‌​‏‭‫⁭⁪⁪‌​⁭​⁮‌⁬‎⁫‫‫⁫⁯‬‮((Form) promotion);
              num11 = (int) num12 * -1365418802 ^ -1712265375;
              continue;
            case 3:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * 1414861649 ^ 1408372724;
              continue;
            default:
              goto label_51;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_45:
          int num14 = -548268261;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -1275757462)) % 4U)
            {
              case 0:
                goto label_45;
              case 1:
                Square.\u200B⁬‎‮​‮‪‌⁬‮‏‌‪‪‭‎‎⁬⁬⁭⁭‭‍‫‭‫‫⁫⁯⁫‎⁭‮⁪⁪‏​‪⁪‏‮((IDisposable) promotion);
                num14 = (int) num15 * 1603348499 ^ -1849048874;
                continue;
              case 3:
                num14 = (int) num15 * -1282463345 ^ 1606500109;
                continue;
              default:
                goto label_50;
            }
          }
        }
label_50:;
      }
label_51:
label_52:
      int num16 = -322858796;
label_53:
      bool isOnCheck;
      while (true)
      {
        uint num17;
        Square square1;
        bool flag4;
        bool flag5;
        bool flag6;
        int rank;
        bool flag7;
        int file;
        Square square2;
        switch ((num17 = (uint) (num16 ^ -1275757462)) % 44U)
        {
          case 0:
            num16 = (int) num17 * -1859646324 ^ 1256102393;
            continue;
          case 1:
            int num18 = this.Board.lights.KingColorOnCheck == this.Piece.Color ? -1803918915 : (num18 = -460266926);
            num16 = num18 ^ (int) num17 * 728071118;
            continue;
          case 2:
            square1.Piece = chessPiece;
            num16 = (int) num17 * -672824060 ^ -1561992719;
            continue;
          case 3:
            num16 = (int) num17 * 165010332 ^ -1379453052;
            continue;
          case 4:
            this.Board.lights.FindAllMoves();
            num16 = -1470061170;
            continue;
          case 5:
            flag4 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -1379344541 ^ -1129998987;
            continue;
          case 6:
            from.Piece = this.Piece;
            this.Piece = (ChessPiece) null;
            num16 = (int) num17 * -977422724 ^ 487483321;
            continue;
          case 7:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            this.Board.WhiteCanCastleQueenSide = true;
            num16 = (int) num17 * -1026174604 ^ 1238015332;
            continue;
          case 8:
            flag6 = this.Piece.Kind == Pieces.King;
            num16 = (int) num17 * 595630271 ^ -1377597533;
            continue;
          case 9:
            int num19 = flag7 ? 53117649 : (num19 = 825475378);
            num16 = num19 ^ (int) num17 * -1011023547;
            continue;
          case 10:
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * 532426077 ^ -691491638;
            continue;
          case 11:
            this.Board.BlackCanCastleQueenSide = true;
            num16 = (int) num17 * 1724898010 ^ 1258909788;
            continue;
          case 12:
            num16 = (int) num17 * 1730574076 ^ -1327454626;
            continue;
          case 13:
            PlaySound.Play();
            this.SwitchPlayer();
            num16 = -1028951723;
            continue;
          case 14:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = -1491367777;
            continue;
          case 15:
            num16 = (int) num17 * 1123188727 ^ 250425693;
            continue;
          case 16:
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * 958147017 ^ -1484605623;
            continue;
          case 17:
            num16 = (int) num17 * 1589589040 ^ -156713759;
            continue;
          case 18:
            rank = chessPiece.Current.Rank;
            if (file == 5)
            {
              square2 = this.Board[7, rank];
              break;
            }
            num16 = (int) num17 * 719254998 ^ -1016212645;
            continue;
          case 19:
            flag4 = true;
            num16 = (int) num17 * -562019592 ^ 834880594;
            continue;
          case 20:
            goto label_52;
          case 21:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * 2022486497 ^ -1816965244;
            continue;
          case 22:
            this.msg = \u003CModule\u003E.\u206D‎‫‫‭‮⁬‬‮⁭⁪‬⁫⁯‪⁫‌‌‍‌⁪‮⁬‬‎‎‮⁬‭⁪‍⁪‮⁫‌⁪⁭⁫‎⁫‮<string>(2695094250U);
            num16 = -1754228971;
            continue;
          case 23:
            flag7 = flag4;
            num16 = -862358865;
            continue;
          case 24:
            int num20 = !isOnCheck ? -1830256173 : (num20 = -988100665);
            num16 = num20 ^ (int) num17 * -899497639;
            continue;
          case 25:
            num16 = -1754228971;
            continue;
          case 26:
            goto label_79;
          case 27:
            this.msg = \u003CModule\u003E.\u200B‎⁬‪​⁮‬‪‌⁮⁬‭⁭​⁭⁪‮‭‭‏​​⁭⁯‎‭‫‏⁬‮‌⁮‌‏​⁪‭‪⁫‍‮<string>(1558114789U);
            num16 = (int) num17 * -1001043168 ^ -1049348;
            continue;
          case 28:
            num16 = (int) num17 * -814433532 ^ -648111342;
            continue;
          case 29:
            num16 = (int) num17 * 720727028 ^ -390758810;
            continue;
          case 30:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = -3588247;
            continue;
          case 31:
            num16 = -985255213;
            continue;
          case 32:
            goto label_54;
          case 33:
            square2 = this.Board[0, rank];
            break;
          case 34:
            flag5 = flag1;
            num16 = (int) num17 * 1157809872 ^ 225119642;
            continue;
          case 35:
            int num21;
            num16 = num21 = chessPiece != null ? -1072590850 : (num21 = -1674993950);
            continue;
          case 36:
            file = chessPiece.Current.File;
            num16 = (int) num17 * -1285256181 ^ -346232148;
            continue;
          case 37:
            int num22 = flag6 ? 1493009997 : (num22 = 1039341857);
            num16 = num22 ^ (int) num17 * 1154570168;
            continue;
          case 38:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * -246189970 ^ 923905965;
            continue;
          case 39:
            num16 = (int) num17 * -1999956604 ^ -643773102;
            continue;
          case 40:
            int num23 = flag5 ? 1383252621 : (num23 = 997536027);
            num16 = num23 ^ (int) num17 * 1691878537;
            continue;
          case 41:
            num16 = -1466914124;
            continue;
          case 42:
            int num24 = flag1 ? -1924116817 : (num24 = -280807352);
            num16 = num24 ^ (int) num17 * 1296127020;
            continue;
          case 43:
            num16 = (int) num17 * -1186702499 ^ 1681205988;
            continue;
          default:
            goto label_47;
        }
        square1 = square2;
        num16 = -119397608;
      }
label_54:
      return;
label_47:
      return;
label_79:
      this.Board.lights.IsOnCheck = false;
      this.Board.lights.FindAllMoves();
      isOnCheck = this.Board.lights.IsOnCheck;
      num16 = -629696662;
      goto label_53;
    }

    private ChessPiece handleBlackCastling()
    {
label_1:
      int num1 = -1290232574;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        ChessPiece chessPiece2;
        Square square1;
        bool flag1;
        bool flag2;
        Square square2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -553482159)) % 39U)
        {
          case 0:
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * -366604033 ^ 174481922;
            continue;
          case 1:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * -320206948 ^ 1119033982;
            continue;
          case 2:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1352372569 ^ 2123784052;
            continue;
          case 3:
            num1 = -678063941;
            continue;
          case 4:
            int num5 = flag3 ? 1577943368 : (num5 = 596398998);
            num1 = num5 ^ (int) num2 * -1300173886;
            continue;
          case 5:
            num1 = -484314714;
            continue;
          case 6:
            square1 = this.Board[5, 7];
            num1 = (int) num2 * -400267880 ^ 1698535360;
            continue;
          case 7:
            num1 = (int) num2 * -1081336476 ^ -1685795078;
            continue;
          case 8:
            goto label_1;
          case 9:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * -1233300938 ^ 2023457835;
            continue;
          case 10:
            num1 = (int) num2 * 246734980 ^ -7345350;
            continue;
          case 11:
            num1 = -939895199;
            continue;
          case 13:
            num1 = (int) num2 * 1214316087 ^ 571336525;
            continue;
          case 14:
            int num6;
            num1 = num6 = this.Piece.Current.File == 6 ? -1622176628 : (num6 = -561821297);
            continue;
          case 15:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_35;
          case 16:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * -282107879 ^ 1199457700;
            continue;
          case 17:
            int num7 = !flag1 ? -157039564 : (num7 = -1068849168);
            num1 = num7 ^ (int) num2 * 1843633666;
            continue;
          case 18:
            num1 = (int) num2 * -1014697919 ^ -129908756;
            continue;
          case 19:
            chessPiece1 = chessPiece2;
            num1 = -619549879;
            continue;
          case 20:
            this.Board.BlackCanCastleQueenSide = false;
            this.Board.BlackCanCastleKingSide = false;
            num1 = -678063941;
            continue;
          case 21:
            flag1 = Square.\u206F‫‌‎⁮‏⁯‎⁫​‌⁯⁬​‎⁬‮‮‌‭⁪⁮⁭⁮‬⁫⁫⁪‫​‭⁬‌‎‍⁯‭‍‪⁮‮(this.Piece.Home.Name, \u003CModule\u003E.\u206C‍‎‫‬⁯‫⁭‍‪‭⁮​‍‌‏‌⁮⁭⁮⁬​⁭‭⁪⁭‍⁮⁯⁮⁯⁮‏‭⁭‫‮⁬‭‫‮<string>(1154064872U));
            num1 = (int) num2 * -1771876504 ^ 1755966152;
            continue;
          case 22:
            this.Board.BlackCanCastleKingSide = false;
            num1 = -1724374632;
            continue;
          case 23:
            int num8 = flag2 ? -640048913 : (num8 = -1553962964);
            num1 = num8 ^ (int) num2 * 393497844;
            continue;
          case 24:
            square2 = this.Board[3, 7];
            square2.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * -1771443760 ^ 1126522404;
            continue;
          case 25:
            num1 = (int) num2 * 1237373297 ^ 187251243;
            continue;
          case 26:
            square1.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * 1684081911 ^ -791647706;
            continue;
          case 27:
            num1 = -1023086436;
            continue;
          case 28:
            num1 = (int) num2 * 329479221 ^ -192226481;
            continue;
          case 29:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * 1057887334 ^ 1774451415;
            continue;
          case 30:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * -1996928645 ^ -311116558;
            continue;
          case 31:
            if (!this.Board.BlackCanCastleKingSide)
            {
              num1 = (int) num2 * 649079136 ^ 1087504057;
              continue;
            }
            num4 = 1;
            break;
          case 32:
            flag2 = this.Piece.Current.File == 2;
            num1 = (int) num2 * 402971387 ^ -262491506;
            continue;
          case 33:
            int num9 = this.Piece.Kind != Pieces.Rook ? -1331804138 : (num9 = -1931963505);
            num1 = num9 ^ (int) num2 * 443987135;
            continue;
          case 34:
            num4 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            break;
          case 35:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 75321070 ^ 436163801;
            continue;
          case 36:
            if (this.Piece.Kind == Pieces.King)
            {
              num3 = 1;
              goto label_35;
            }
            else
            {
              num1 = (int) num2 * -1179511716 ^ -1861126147;
              continue;
            }
          case 37:
            num1 = (int) num2 * -1983155864 ^ 1941261732;
            continue;
          case 38:
            num1 = (int) num2 * -1100457511 ^ 1925115769;
            continue;
          default:
            goto label_46;
        }
        flag3 = num4 != 0;
        num1 = -713110455;
        continue;
label_35:
        int num10;
        num1 = num10 = num3 == 0 ? -1023086436 : (num10 = -1662999766);
      }
label_46:
      return chessPiece1;
    }

    private ChessPiece handleWhiteCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
      if (this.Board.WhiteCanCastleKingSide)
        goto label_42;
label_1:
      int num1 = -124252738;
label_2:
      ChessPiece chessPiece2;
      bool flag1;
      while (true)
      {
        uint num2;
        Square square1;
        bool flag2;
        Square square2;
        bool flag3;
        bool flag4;
        int num3;
        switch ((num2 = (uint) (num1 ^ -461827605)) % 38U)
        {
          case 0:
            square2.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * -199478169 ^ 968850052;
            continue;
          case 1:
            int num4 = flag2 ? -1674584008 : (num4 = -589016865);
            num1 = num4 ^ (int) num2 * 1754715705;
            continue;
          case 2:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * -714378178 ^ -547228695;
            continue;
          case 3:
            int num5;
            num1 = num5 = this.Piece.Current.File != 2 ? -1335606206 : (num5 = -131621591);
            continue;
          case 4:
            if (this.Piece.Kind == Pieces.King)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 492976877 ^ -583265823;
            continue;
          case 5:
            goto label_41;
          case 6:
            int num6 = flag1 ? 1387935397 : (num6 = 1072805276);
            num1 = num6 ^ (int) num2 * 1121420692;
            continue;
          case 7:
            int num7 = !flag3 ? -923923825 : (num7 = -2029463464);
            num1 = num7 ^ (int) num2 * 928251633;
            continue;
          case 8:
            num1 = -1286997241;
            continue;
          case 9:
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -725542799 ^ 790452440;
            continue;
          case 10:
            flag3 = Square.\u206F‫‌‎⁮‏⁯‎⁫​‌⁯⁬​‎⁬‮‮‌‭⁪⁮⁭⁮‬⁫⁫⁪‫​‭⁬‌‎‍⁯‭‍‪⁮‮(this.Piece.Home.Name, \u003CModule\u003E.\u206D‏⁯‬‫‫‍⁭‬‪⁪‪‌‭‭‪‎⁮‭‌‍‭‏⁪​‎‭‏‪‍⁫⁭‏⁯‏⁯⁫‮⁬‮‮<string>(1828801191U));
            num1 = (int) num2 * 1780761845 ^ -800035330;
            continue;
          case 11:
            num1 = (int) num2 * 1746999172 ^ 326511960;
            continue;
          case 12:
            num1 = (int) num2 * -591890614 ^ -997872283;
            continue;
          case 13:
            int num8 = !flag4 ? 1739945431 : (num8 = 956134118);
            num1 = num8 ^ (int) num2 * 1967460359;
            continue;
          case 14:
            num1 = (int) num2 * -120122504 ^ -1830600551;
            continue;
          case 15:
            square2 = this.Board[5, 0];
            num1 = (int) num2 * -72448207 ^ -1695290292;
            continue;
          case 16:
            num1 = (int) num2 * -1033416573 ^ -404725170;
            continue;
          case 17:
            square1.Piece = this.Board[0, 0].Piece;
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * 980537223 ^ 1515361498;
            continue;
          case 18:
            num1 = (int) num2 * -1084112615 ^ -160038730;
            continue;
          case 19:
            flag4 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * -1175488872 ^ 895340310;
            continue;
          case 20:
            num1 = (int) num2 * -444821128 ^ -1007583647;
            continue;
          case 21:
            square1 = this.Board[3, 0];
            num1 = (int) num2 * -1760854370 ^ -1077830892;
            continue;
          case 22:
            num1 = (int) num2 * 13281993 ^ -1160580740;
            continue;
          case 23:
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * 613619812 ^ -925911715;
            continue;
          case 24:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 1539692197 ^ -1935748014;
            continue;
          case 25:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = -100738231;
            continue;
          case 26:
            num1 = (int) num2 * 234596676 ^ -1346725133;
            continue;
          case 28:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 29:
            num1 = -1615180608;
            continue;
          case 30:
            num1 = (int) num2 * -2143897580 ^ 1127887718;
            continue;
          case 31:
            chessPiece2 = chessPiece1;
            num1 = -1036307210;
            continue;
          case 32:
            goto label_1;
          case 33:
            int num9;
            num1 = num9 = this.Piece.Current.File == 6 ? -1951339778 : (num9 = -1466890501);
            continue;
          case 34:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = -547233064;
            continue;
          case 35:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * -1282394112 ^ 1625028026;
            continue;
          case 36:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 169000707 ^ -1903089671;
            continue;
          case 37:
            num1 = -74920700;
            continue;
          default:
            goto label_44;
        }
        flag2 = num3 != 0;
        num1 = -824781572;
      }
label_41:
      int num10 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
      goto label_43;
label_44:
      return chessPiece2;
label_42:
      num10 = 1;
label_43:
      flag1 = num10 != 0;
      num1 = -1582786619;
      goto label_2;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = -900603332;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -845573674)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            Square.\u200F⁭‏⁪⁮‮⁭⁪⁭‫⁬‪‎‮‬‬​‪‍‫‌‬‭‍⁪⁪‪‬‮‏⁬‭‬‮‍⁪‮‪‍⁬‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * -715449300 ^ -1018891677;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = -1486955048;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -850991438)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            num3 = this.components != null ? 1 : 0;
            break;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 1724456193 ^ 996908514;
            continue;
          case 4:
            Square.\u200B⁬‎‮​‮‪‌⁬‮‏‌‪‪‭‎‎⁬⁬⁭⁭‭‍‫‭‫‫⁫⁯⁫‎⁭‮⁪⁪‏​‪⁪‏‮((IDisposable) this.components);
            num1 = (int) num2 * -687706091 ^ -2005616246;
            continue;
          case 5:
            base.Dispose(disposing);
            num1 = -1081777781;
            continue;
          case 6:
            if (disposing)
            {
              num1 = (int) num2 * -365710495 ^ 271472571;
              continue;
            }
            num3 = 0;
            break;
          default:
            goto label_12;
        }
        int num4;
        num1 = num4 = num3 != 0 ? -490830158 : (num4 = -1025866726);
      }
label_3:
      return;
label_12:;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = -1801599516;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1281618807)) % 12U)
        {
          case 0:
            num1 = (int) num2 * -1812488095 ^ -974639632;
            continue;
          case 1:
            Square.\u200C‬‍‮⁯‪‫⁬⁬⁮‪⁪⁫⁬‌⁫⁫⁯⁫⁭⁫⁭⁭‫‏⁫‬‮‎⁮‍‪⁬‬⁯⁪‎⁮‭⁫‮((Control) this, false);
            num1 = (int) num2 * -1380743202 ^ 1501641937;
            continue;
          case 2:
            num1 = (int) num2 * -483567066 ^ -1074128630;
            continue;
          case 3:
            num1 = (int) num2 * 1955030502 ^ -2060403901;
            continue;
          case 4:
            goto label_3;
          case 5:
            Square.\u202B⁫⁯⁭‮⁮‍‏‏‍‫‮⁯‪​‍⁪‫‍‪‪‭⁬‮⁪‪⁯⁬​⁮⁫‫​‪‮⁯‪⁭⁪‬‮((Control) this);
            num1 = (int) num2 * -1771019040 ^ 429979478;
            continue;
          case 6:
            this.Name = \u003CModule\u003E.\u206C‍‎‫‬⁯‫⁭‍‪‭⁮​‍‌‏‌⁮⁭⁮⁬​⁭‭⁪⁭‍⁮⁯⁮⁯⁮‏‭⁭‫‮⁬‭‫‮<string>(3225827532U);
            Square.\u202D​⁪‭‎⁯‌‌‎⁪‎⁯‎⁬‌‮⁬‬⁬‫⁫⁭‮⁪‎‭⁯⁪​⁬‬‎‏‭⁬‪‭‮‮⁯‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 1570664781 ^ -127927046;
            continue;
          case 7:
            goto label_1;
          case 8:
            Square.\u202A⁮‬⁬‫‏⁬⁫‎‫‮‫⁫‌‬‏‎‫⁪⁮‌⁬‭⁭⁪⁪‭⁮‫⁭‍‭‍‫⁬‫‮⁬‪‎‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -157375720 ^ 1075506373;
            continue;
          case 9:
            Square.\u200C‫‌‎​‫⁯‮‫​‏⁭‫⁮‮‍⁫⁬⁪‎⁬⁯​‮⁬⁮‫⁫‮‪​⁬⁬‪⁯⁭‬‬‮⁭‮((ContainerControl) this, AutoScaleMode.Font);
            Square.\u206F‎‮‪​⁫​⁬⁫‏⁯‍⁮⁯⁫‍‏‫‍‪‪⁯⁮⁮‮⁫⁪⁬‮‬‍‬‍‭‭⁮⁯‬​‌‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * 1456802460 ^ -2085506637;
            continue;
          case 10:
            num1 = (int) num2 * -1134346318 ^ -219664995;
            continue;
          case 11:
            Square.\u200E‮⁬⁮‫‌⁭‬​‭⁮‫‬⁫‌‬⁪‍‪‎‏‬⁮⁪‭‎⁭‭‬‭‍⁫⁭‍⁬‫⁬‍⁫⁫‮((Control) this, new Padding(0));
            num1 = (int) num2 * 328366351 ^ 375947898;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    static Delegate \u202B​⁫‫⁯⁮‏⁭⁪‫⁮‮⁭‎⁮‫⁬‬⁭‬‫⁮⁬‬‪‮‭⁮⁫‮‍​‏‪‏‭‍‪‮⁯‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u202D‎⁪⁪⁮‍‍‏‫⁬‎‌‌‫‌‮‪⁪‎‭‬⁯⁮⁭‌‏‫‎⁬⁮‮⁪‫⁪⁫‌⁯‌‎⁮‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u206D‬⁪‫‏⁪⁫​‬‮⁬⁬⁬‬⁮⁯⁮‎‪⁪‎‬⁬⁭‏⁯⁯‍‌‌⁫⁬‪‎‬​⁪‮‍‍‮([In] object obj0) => obj0.ToString();

    static string \u202C‪⁪⁬⁫⁬‎‎‏‏‬‪‍⁮‭‎‬‫‫‪⁬⁪‪‮⁬⁯⁭‫‭​‪​‮‏‬‬‫‭‌⁪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u206F⁯‏‫‮⁭⁭‮⁯⁭‍‍⁯⁪‮⁮⁯⁭‏⁯‭‭​‎‍‌‪‪‌‎‎‭⁯​‍‍‍‪‭⁭‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u206F⁮‎⁪⁯‪‌⁮‎‮‫‌​‪⁫‪‭‪‮​‎‌​⁫⁭⁪‫‪⁬‭‬‭‎‍‫‌‮‪⁪‏‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u206C⁮⁫‮⁮‫⁬‎⁯⁭‭⁭⁫⁬⁪‌‭⁬⁪‏‍‎⁮⁮‪‌‌‏‭⁫‭‬⁭‍‬⁮‭‪​⁮‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u200C‫‪⁫⁭‪‪‎‏⁫‬‌‏‍‪⁪⁬⁫‌‪⁬‍‬‎‌‍‬⁪⁯⁮‭‪‍⁫⁫‌⁮‫‏⁫‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u206D⁬⁭⁮‬‬‮‏‌⁮‭‏⁪‬⁫‏⁭⁬⁪⁬⁯‌⁯⁮‪⁬‍⁫‍⁭‬‭‍‌‮‮⁫‎‭⁬‮() => Cursor.Position;

    static DialogResult \u200D⁭‫‭‬⁪‏​​‎‏⁭‮‌⁪⁮‪⁬‌​‏‭‫⁭⁪⁪‌​⁭​⁮‌⁬‎⁫‫‫⁫⁯‬‮([In] Form obj0) => obj0.ShowDialog();

    static void \u200B⁬‎‮​‮‪‌⁬‮‏‌‪‪‭‎‎⁬⁬⁭⁭‭‍‫‭‫‫⁫⁯⁫‎⁭‮⁪⁪‏​‪⁪‏‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u206F‫‌‎⁮‏⁯‎⁫​‌⁯⁬​‎⁬‮‮‌‭⁪⁮⁭⁮‬⁫⁫⁪‫​‭⁬‌‎‍⁯‭‍‪⁮‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u200F⁭‏⁪⁮‮⁭⁪⁭‫⁬‪‎‮‬‬​‪‍‫‌‬‭‍⁪⁪‪‬‮‏⁬‭‬‮‍⁪‮‪‍⁬‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u202B⁫⁯⁭‮⁮‍‏‏‍‫‮⁯‪​‍⁪‫‍‪‪‭⁬‮⁪‪⁯⁬​⁮⁫‫​‪‮⁯‪⁭⁪‬‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u202A⁮‬⁬‫‏⁬⁫‎‫‮‫⁫‌‬‏‎‫⁪⁮‌⁬‭⁭⁪⁪‭⁮‫⁭‍‭‍‫⁬‫‮⁬‪‎‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u200C‫‌‎​‫⁯‮‫​‏⁭‫⁮‮‍⁫⁬⁪‎⁬⁯​‮⁬⁮‫⁫‮‪​⁬⁬‪⁯⁭‬‬‮⁭‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u206F‎‮‪​⁫​⁬⁫‏⁯‍⁮⁯⁫‍‏‫‍‪‪⁯⁮⁮‮⁫⁪⁬‮‬‍‬‍‭‭⁮⁯‬​‌‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u200E‮⁬⁮‫‌⁭‬​‭⁮‫‬⁫‌‬⁪‍‪‎‏‬⁮⁪‭‎⁭‭‬‭‍⁫⁭‍⁬‫⁬‍⁫⁫‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202D​⁪‭‎⁯‌‌‎⁪‎⁯‎⁬‌‮⁬‬⁬‫⁫⁭‮⁪‎‭⁯⁪​⁬‬‎‏‭⁬‪‭‮‮⁯‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200C‬‍‮⁯‪‫⁬⁬⁮‪⁪⁫⁬‌⁫⁫⁯⁫⁭⁫⁭⁭‫‏⁫‬‮‎⁮‍‪⁬‬⁯⁪‎⁮‭⁫‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
