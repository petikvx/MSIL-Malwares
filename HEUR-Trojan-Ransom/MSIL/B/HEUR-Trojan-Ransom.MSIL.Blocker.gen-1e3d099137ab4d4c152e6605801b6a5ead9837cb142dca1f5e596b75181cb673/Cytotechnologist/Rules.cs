// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: CMSCOMSERVERFL, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: BC3392BE-E240-40FB-9209-64A3FA8E63B6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1e3d099137ab4d4c152e6605801b6a5ead9837cb142dca1f5e596b75181cb673.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
      Rules rules = new Rules()
      {
        SprintCount = json["sprints"].AsInt,
        MaxImpact = asInt,
        Cards = Rules.ParseDeck(json["deck"], asInt),
        InitialResources = json["initial-resources"].AsInt,
        NormalPlanningCount = json["normal-planning-count"].AsInt,
        NormalPlanningCost = json["normal-planning-cost"].AsInt,
        OverPlanningCost = json["over-planning-cost"].AsInt,
        SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
        RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
        EconomicsAffectsAll = json["economics-affects-all"].AsBool,
        StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
        OnlyOneWinner = json["only-one-winner"].AsBool
      };
label_1:
      int num1 = 691222499;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 127509651)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -1529947304 ^ 1210292925;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = 2089164000;
      float[] numArray;
      int aIndex;
      bool flag;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 377442757)) % 9U)
        {
          case 0:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = 183341841;
            continue;
          case 1:
            aIndex = 0;
            num1 = (int) num2 * 356200623 ^ -1345103337;
            continue;
          case 2:
            int num3 = !flag ? 501271193 : (num3 = 539708889);
            num1 = num3 ^ (int) num2 * -2126110853;
            continue;
          case 3:
            riskChances = numArray;
            num1 = (int) num2 * -1961259805 ^ -1414304575;
            continue;
          case 4:
            flag = aIndex < numArray.Length;
            num1 = 1434719203;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * 1945797958 ^ -1907822905;
            continue;
          case 7:
            numArray = new float[json.Count];
            num1 = (int) num2 * -1267843157 ^ -966131753;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = -304446636;
      int num2;
      int aIndex1;
      int count;
      List<Card> cardList;
      bool flag1;
      JSONNode jsonNode;
      bool flag2;
      int aIndex2;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1570597762)) % 21U)
        {
          case 0:
            int num4;
            num1 = num4 = aIndex1 < maxImpact * 2 ? -1971407974 : (num4 = -1053715168);
            continue;
          case 1:
            ++aIndex1;
            num1 = (int) num3 * -2116626011 ^ 2118970512;
            continue;
          case 2:
            num1 = (int) num3 * -1640530337 ^ 1507872940;
            continue;
          case 3:
            array = cardList.ToArray();
            num1 = (int) num3 * 19122697 ^ 1132296201;
            continue;
          case 4:
            int num5 = !flag2 ? 1670642938 : (num5 = 1723731557);
            num1 = num5 ^ (int) num3 * 583359833;
            continue;
          case 5:
            flag2 = num2 < jsonNode[aIndex1].AsInt;
            num1 = -304055017;
            continue;
          case 7:
            count = json.Count;
            cardList = new List<Card>();
            num1 = (int) num3 * 1995266661 ^ 2121939827;
            continue;
          case 8:
            num1 = -319242985;
            continue;
          case 9:
            int num6;
            num1 = num6 = aIndex2 >= count ? -655011363 : (num6 = -997349672);
            continue;
          case 10:
            ++num2;
            num1 = (int) num3 * 1587879634 ^ -220715946;
            continue;
          case 11:
            num2 = 0;
            num1 = -890745466;
            continue;
          case 12:
            aIndex2 = 0;
            num1 = (int) num3 * 773259917 ^ -93961862;
            continue;
          case 13:
            num1 = (int) num3 * 464207919 ^ 1958461946;
            continue;
          case 14:
            goto label_1;
          case 15:
            num1 = (int) num3 * 1628667819 ^ -1853875240;
            continue;
          case 16:
            cardList.Add(new Card()
            {
              Impact = flag1 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -745747242;
            continue;
          case 17:
            num1 = (int) num3 * 2106031407 ^ 1686252187;
            continue;
          case 18:
            jsonNode = json[aIndex2];
            aIndex1 = 0;
            num1 = (int) num3 * 393606848 ^ -23877212;
            continue;
          case 19:
            flag1 = aIndex1 < maxImpact;
            num1 = -1790836780;
            continue;
          case 20:
            ++aIndex2;
            num1 = (int) num3 * -138358048 ^ -693369431;
            continue;
          default:
            goto label_22;
        }
      }
label_22:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1776164384;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1568866364)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Rules.\u202E⁫⁭‍‭‌‮⁭‫‬‭⁮⁮‌‌‮‮⁪‮⁯⁬‏‪‍‎‮‮⁯‎‭‭​‎‫⁯​⁯‭‭⁭‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -533029281 ^ -312457204;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 629404500;
      Card[] cards;
      int index;
      Card card1;
      string str1;
      int num2;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 313036810)) % 17U)
        {
          case 0:
            int num4;
            num1 = num4 = index >= cards.Length ? 515613541 : (num4 = 504278264);
            continue;
          case 1:
            num1 = (int) num3 * -599704836 ^ -1724187057;
            continue;
          case 2:
            str1 = "[\n\t";
            num1 = (int) num3 * 1293582846 ^ -918545522;
            continue;
          case 3:
            num2 = 0;
            num1 = (int) num3 * 1567127901 ^ -1420953660;
            continue;
          case 4:
            card1 = cards[index];
            num1 = 981291147;
            continue;
          case 5:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202E⁬​‮⁮⁪⁫‮⁯‮⁯‎⁯‬⁮⁯⁮⁭‪⁪​⁯⁫‍‎‪⁯‍‪​‌‫⁪⁪⁮⁮‫‭‍‭‮((object) card2) : (string) null;
            str1 = Rules.\u200C‮​‭⁭‌‎⁭⁭​‮‍‍‪‬‍⁬‮⁫‌‌‮⁮‫⁬⁪‏⁬⁯‌‮‍⁪‫⁪‎‏⁭⁭⁯‮(str3, str4, " ");
            num1 = 346719850;
            continue;
          case 6:
            str2 = Rules.\u206A⁬‫⁭⁯⁭⁫⁮‌⁪‭‭​‮⁮⁭​‫​‫⁭‎⁫‍‎⁯‌⁪‍⁮‌‮‍⁯‍‌‎‭⁪⁪‮(str1, "\n]");
            num1 = (int) num3 * -1482114003 ^ 1746890018;
            continue;
          case 7:
            num1 = (int) num3 * -991833756 ^ 1141901909;
            continue;
          case 8:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -1304673774 ^ -2014063620;
            continue;
          case 9:
            str1 = Rules.\u206A⁬‫⁭⁯⁭⁫⁮‌⁪‭‭​‮⁮⁭​‫​‫⁭‎⁫‍‎⁯‌⁪‍⁮‌‮‍⁯‍‌‎‭⁪⁪‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * 1248729793 ^ 202424175;
            continue;
          case 10:
            num1 = (int) num3 * 977960928 ^ 791898661;
            continue;
          case 12:
            num1 = (int) num3 * 118939614 ^ -279574197;
            continue;
          case 13:
            num1 = (int) num3 * 437756700 ^ -812990740;
            continue;
          case 14:
            ++index;
            num1 = (int) num3 * 522620109 ^ -1662540141;
            continue;
          case 15:
            goto label_1;
          case 16:
            int num5 = num2 != card1.Type ? 988653807 : (num5 = 1168572599);
            num1 = num5 ^ (int) num3 * 1765302752;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u206A⁬‫⁭⁯⁭⁫⁮‌⁪‭‭​‮⁮⁭​‫​‫⁭‎⁫‍‎⁯‌⁪‍⁮‌‮‍⁯‍‌‎‭⁪⁪‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200D⁫⁬⁯‫​‭⁮‍⁭⁯‪‍‮⁮⁭‎⁯‏⁭‪⁭‭‮⁪⁬​⁫⁪‬‫‮‭‎​⁮‮‍‪⁪‮()));
      int index = 1;
label_1:
      int num1 = -262628418;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1830399437)) % 9U)
        {
          case 0:
            str1 = Rules.\u200C‮​‭⁭‌‎⁭⁭​‮‍‍‪‬‍⁬‮⁫‌‌‮⁮‫⁬⁪‏⁬⁯‌‮‍⁪‫⁪‎‏⁭⁭⁯‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200D⁫⁬⁯‫​‭⁮‍⁭⁯‪‍‮⁮⁭‎⁯‏⁭‪⁭‭‮⁪⁬​⁫⁪‬‫‮‭‎​⁮‮‍‪⁪‮()));
            num1 = -1125616132;
            continue;
          case 1:
            str2 = Rules.\u206A⁬‫⁭⁯⁭⁫⁮‌⁪‭‭​‮⁮⁭​‫​‫⁭‎⁫‍‎⁯‌⁪‍⁮‌‮‍⁯‍‌‎‭⁪⁪‮(str1, " ]");
            num1 = (int) num2 * 425594119 ^ -1803966225;
            continue;
          case 3:
            ++index;
            num1 = (int) num2 * 901959775 ^ 658971833;
            continue;
          case 4:
            int num3 = !flag ? -369760392 : (num3 = -1128486274);
            num1 = num3 ^ (int) num2 * -2095185558;
            continue;
          case 5:
            num1 = (int) num2 * -1838956991 ^ -204378019;
            continue;
          case 6:
            num1 = (int) num2 * 1327393154 ^ 1025689586;
            continue;
          case 7:
            goto label_1;
          case 8:
            flag = index < this.RiskChances.Length;
            num1 = -625098115;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u202E⁫⁭‍‭‌‮⁭‫‬‭⁮⁮‌‌‮‮⁪‮⁯⁬‏‪‍‎‮‮⁯‎‭‭​‎‫⁯​⁯‭‭⁭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206A⁬‫⁭⁯⁭⁫⁮‌⁪‭‭​‮⁮⁭​‫​‫⁭‎⁫‍‎⁯‌⁪‍⁮‌‮‍⁯‍‌‎‭⁪⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202E⁬​‮⁮⁪⁫‮⁯‮⁯‎⁯‬⁮⁯⁮⁭‪⁪​⁯⁫‍‎‪⁯‍‪​‌‫⁪⁪⁮⁮‫‭‍‭‮([In] object obj0) => obj0.ToString();

    static string \u200C‮​‭⁭‌‎⁭⁭​‮‍‍‪‬‍⁬‮⁫‌‌‮⁮‫⁬⁪‏⁬⁯‌‮‍⁪‫⁪‎‏⁭⁭⁯‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200D⁫⁬⁯‫​‭⁮‍⁭⁯‪‍‮⁮⁭‎⁯‏⁭‪⁭‭‮⁪⁬​⁫⁪‬‫‮‭‎​⁮‮‍‪⁪‮() => CultureInfo.InvariantCulture;
  }
}
