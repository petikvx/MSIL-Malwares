// Decompiled with JetBrains decompiler
// Type: RiskGame.Producers.AuthenticationContainerProducer
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Authentication;
using ArrayWithOff.Database;
using ArrayWithOff.Licensing;
using RiskGame.Factories;
using RiskGame.Game;
using RiskGame.Visitors;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;

namespace RiskGame.Producers
{
  [Serializable]
  public class AuthenticationContainerProducer
  {
    private static readonly string m_Watcher;
    public List<Player> _Stub;
    public List<Role> attribute;
    public List<Account> authentication;
    public Role adapter;
    public Role m_System;
    public Player m_Getter;
    public int _Attr;
    public int observer;
    public double parameter;
    public DateTime _Issuer;
    public GameState _Repository;
    public GameMode algo;
    public REGKIND descriptor;
    private int m_Test;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int MoveModel() => this.m_Test;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public AuthenticationContainerProducer()
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              ProxyParser.NewPool();
              if (!AuthenticationContainerProducer.InterruptPool())
              {
                num2 = 4;
                continue;
              }
              goto label_7;
            case 1:
            case 4:
              goto label_1;
            case 2:
            case 3:
              goto label_5;
            case 5:
              goto label_9;
            default:
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_5;
          }
        }
label_1:
        this._Stub = new List<Player>();
label_5:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this.CalcModel();
        num1 = 5;
      }
label_9:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalcModel()
    {
      int num1 = 4;
      if (AuthenticationContainerProducer.ManagePool())
        goto label_24;
label_1:
      Stream serializationStream;
      try
      {
        BinaryFormatter binaryFormatter = new BinaryFormatter();
        int num2 = 3;
label_15:
        int num3;
        while (true)
        {
          List<int> intList;
          bool flag;
          int num4;
          switch (num2)
          {
            case 0:
            case 2:
              for (; num3 < intList.Count + 1; ++num3)
              {
                if (!intList.Contains(num3))
                {
                  num2 = 4;
                  goto label_15;
                }
              }
              num4 = 6;
              goto label_14;
            case 1:
            case 5:
              if (flag)
              {
                AuthenticationContainerProducer containerProducer = (AuthenticationContainerProducer) binaryFormatter.Deserialize(serializationStream);
                intList.Add(containerProducer.MoveModel());
                break;
              }
              num3 = 0;
              goto case 0;
            case 3:
              intList = new List<int>();
              break;
            case 4:
              goto label_8;
            case 6:
              goto label_2;
            default:
              num4 = 0;
              goto label_14;
          }
          flag = serializationStream.Position < serializationStream.Length;
          if (true)
          {
            num2 = 5;
            continue;
          }
          break;
label_14:
          num2 = num4;
        }
label_8:
        this.m_Test = num3;
        return;
label_2:
        return;
      }
      finally
      {
        serializationStream?.Dispose();
      }
label_24:
      while (true)
      {
        int num5;
        bool flag;
        switch (num1)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            if (!flag)
            {
              this.m_Test = 0;
              num5 = 5;
              break;
            }
            goto label_22;
          case 4:
            flag = File.Exists(AuthenticationContainerProducer.m_Watcher);
            num5 = 3;
            break;
          case 5:
            goto label_27;
          default:
            num1 = 0;
            continue;
        }
        num1 = num5;
      }
label_22:
      serializationStream = (Stream) new FileStream(AuthenticationContainerProducer.m_Watcher, FileMode.Open);
      goto label_1;
label_27:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void CompareModel(int sum_init)
    {
      int num1 = 5;
      List<AuthenticationContainerProducer> containerProducerList;
      BinaryFormatter binaryFormatter;
      Stream serializationStream1;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            binaryFormatter = new BinaryFormatter();
            goto case 4;
          case 1:
          case 3:
            if (File.Exists(AuthenticationContainerProducer.m_Watcher))
            {
              num2 = 0;
              break;
            }
            goto label_33;
          case 4:
            containerProducerList = new List<AuthenticationContainerProducer>();
            using (Stream serializationStream2 = (Stream) new FileStream(AuthenticationContainerProducer.m_Watcher, FileMode.Open))
            {
              while (true)
              {
                AuthenticationContainerProducer containerProducer;
                int num3;
                if (serializationStream2.Position < serializationStream2.Length)
                {
                  containerProducer = (AuthenticationContainerProducer) binaryFormatter.Deserialize(serializationStream2);
                  num3 = 4;
                }
                else
                  goto label_13;
label_8:
                bool flag;
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                    case 4:
                      flag = containerProducer.MoveModel() != sum_init;
                      num3 = 2;
                      continue;
                    case 1:
                    case 2:
                      goto label_6;
                    case 3:
                      goto label_10;
                    case 5:
                      goto label_17;
                    default:
                      num3 = 3;
                      continue;
                  }
                }
label_6:
                if (flag)
                  containerProducerList.Add(containerProducer);
                else
                  goto label_11;
label_10:
label_11:
                continue;
label_13:
                num3 = 5;
                goto label_8;
              }
            }
label_17:
            File.Delete(AuthenticationContainerProducer.m_Watcher);
            serializationStream1 = (Stream) new FileStream(AuthenticationContainerProducer.m_Watcher, FileMode.Create);
            num2 = 6;
            break;
          case 5:
            AuthenticationContainerProducer.InitModel();
            num2 = 3;
            break;
          case 6:
            goto label_24;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_33:
      return;
label_24:
      try
      {
        foreach (AuthenticationContainerProducer graph in containerProducerList)
        {
          int num4 = 2;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 2:
                goto label_27;
              case 1:
              case 3:
                goto label_30;
              default:
                num4 = 3;
                continue;
            }
          }
label_27:
          binaryFormatter.Serialize(serializationStream1, (object) graph);
label_30:;
        }
      }
      finally
      {
        serializationStream1?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void GetModel(AuthenticationContainerProducer v)
    {
      int num1 = 4;
      if (true)
        goto label_4;
label_1:
      bool flag1 = File.Exists(AuthenticationContainerProducer.m_Watcher);
      int num2 = 1;
label_3:
      num1 = num2;
label_4:
      FileMode mode;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_1;
          case 1:
            if (flag1)
            {
              mode = FileMode.Open;
              num1 = 5;
              continue;
            }
            goto label_2;
          case 2:
          case 5:
            goto label_7;
          case 3:
            goto label_6;
          case 6:
            goto label_10;
          default:
            num1 = 3;
            continue;
        }
      }
label_2:
      mode = FileMode.OpenOrCreate;
label_6:
label_7:
      FileStream serializationStream = new FileStream(AuthenticationContainerProducer.m_Watcher, mode);
      num2 = 6;
      goto label_3;
label_10:
      try
      {
        BinaryFormatter binaryFormatter = new BinaryFormatter();
        int num3 = 1;
        long position;
        while (true)
        {
          int num4 = num3;
          bool flag2;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 2:
                if (((AuthenticationContainerProducer) binaryFormatter.Deserialize((Stream) serializationStream)).MoveModel() != v.MoveModel())
                  break;
                goto label_18;
              case 1:
                goto label_14;
              case 3:
                if (!flag2)
                  goto label_13;
                else
                  break;
              case 4:
              case 5:
                binaryFormatter.Serialize((Stream) serializationStream, (object) v);
                if (AuthenticationContainerProducer.ManagePool())
                {
                  num4 = 7;
                  continue;
                }
                goto label_24;
              case 6:
                goto label_11;
              case 7:
                goto label_22;
              default:
                int num5 = 6;
                num4 = AuthenticationContainerProducer.InterruptPool() ? num5 : num5;
                continue;
            }
            if (serializationStream.Position < serializationStream.Length)
              goto label_16;
label_13:
            serializationStream.Seek(serializationStream.Length, SeekOrigin.Begin);
            v._Issuer = DateTime.Now;
            if (true)
              num4 = 5;
            else
              break;
          }
label_14:
          flag2 = mode == FileMode.Open;
          num3 = 3;
          continue;
label_16:
          position = serializationStream.Position;
          num3 = 0;
        }
label_11:
        binaryFormatter.Serialize((Stream) serializationStream, (object) v);
        return;
label_18:
        serializationStream.Seek(position, SeekOrigin.Begin);
        v._Issuer = DateTime.Now;
        goto label_11;
label_22:
        return;
label_24:;
      }
      finally
      {
        serializationStream?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static AuthenticationContainerProducer OrderModel(
      int identoffset)
    {
      int num1 = 4;
      if (!AuthenticationContainerProducer.InterruptPool())
        goto label_5;
label_1:
      Stream serializationStream = (Stream) new FileStream(AuthenticationContainerProducer.m_Watcher, FileMode.Open);
      if (!AuthenticationContainerProducer.InterruptPool())
      {
        num1 = 5;
        goto label_5;
      }
label_2:
      bool flag = File.Exists(AuthenticationContainerProducer.m_Watcher);
      int num2 = 1;
label_4:
      num1 = num2;
label_5:
      switch (num1)
      {
        case 0:
        case 4:
          goto label_2;
        case 1:
          if (!flag)
            throw new CreatorItemAuth();
          goto label_1;
        case 2:
        case 3:
          goto label_1;
        case 5:
          try
          {
            BinaryFormatter binaryFormatter = new BinaryFormatter();
            while (serializationStream.Position < serializationStream.Length)
            {
              AuthenticationContainerProducer containerProducer = (AuthenticationContainerProducer) binaryFormatter.Deserialize(serializationStream);
              if (containerProducer.MoveModel() == identoffset)
              {
                foreach (Player player in containerProducer._Stub)
                {
                  int num3 = 2;
                  if (AuthenticationContainerProducer.InterruptPool())
                    ;
                  while (true)
                  {
                    switch (num3)
                    {
                      case 0:
                      case 2:
                        goto label_13;
                      case 1:
                      case 3:
                        goto label_16;
                      default:
                        if (true)
                        {
                          num3 = 3;
                          continue;
                        }
                        goto label_16;
                    }
                  }
label_13:
                  player.ExcludeExpression();
label_16:;
                }
                return containerProducer;
              }
            }
            throw new CreatorItemAuth();
          }
          finally
          {
            serializationStream?.Dispose();
          }
        default:
          num2 = 3;
          goto label_4;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ObservableCollection<InitializerItemAuth> NewModel(
      List<Human> config)
    {
      ObservableCollection<InitializerItemAuth> observableCollection = new ObservableCollection<InitializerItemAuth>();
      if (File.Exists(AuthenticationContainerProducer.m_Watcher))
      {
        using (Stream serializationStream = (Stream) new FileStream(AuthenticationContainerProducer.m_Watcher, FileMode.Open))
        {
          BinaryFormatter binaryFormatter = new BinaryFormatter();
          while (serializationStream.Position < serializationStream.Length)
          {
            AuthenticationContainerProducer containerProducer = (AuthenticationContainerProducer) binaryFormatter.Deserialize(serializationStream);
            bool flag = false;
            foreach (Player player in config)
            {
              if (player.ResetExpression() == containerProducer._Stub[0].ResetExpression())
              {
                flag = true;
                break;
              }
            }
            if (flag)
            {
              InitializerItemAuth initializerItemAuth = new InitializerItemAuth(containerProducer._Issuer.ToString("g"), containerProducer._Stub[0].ResetExpression(), containerProducer.descriptor.ToString(), containerProducer.algo.ToString(), containerProducer.MoveModel().ToString());
              observableCollection.Add(initializerItemAuth);
            }
          }
        }
      }
      return observableCollection;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void InitModel()
    {
      int num1 = 3;
      bool flag;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              flag = File.Exists(AuthenticationContainerProducer.m_Watcher);
              if (AuthenticationContainerProducer.ManagePool())
              {
                num2 = 2;
                continue;
              }
              goto label_2;
            case 1:
            case 2:
              goto label_2;
            case 4:
              goto label_6;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 4;
      }
label_2:
      if (!flag)
        return;
label_6:
      try
      {
        using (Stream serializationStream = (Stream) new FileStream(AuthenticationContainerProducer.m_Watcher, FileMode.Open))
        {
          BinaryFormatter binaryFormatter = new BinaryFormatter();
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_9;
              case 1:
              case 3:
                goto label_17;
              default:
                num3 = 3;
                continue;
            }
          }
label_9:
          AuthenticationContainerProducer containerProducer = (AuthenticationContainerProducer) binaryFormatter.Deserialize(serializationStream);
        }
      }
      catch (SerializationException ex)
      {
        File.Delete(AuthenticationContainerProducer.m_Watcher);
      }
label_17:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static AuthenticationContainerProducer()
    {
      ProxyParser.NewPool();
      AuthenticationContainerProducer.m_Watcher = "GameSaves.bin";
    }

    internal static bool ManagePool() => true;

    internal static bool InterruptPool() => false;
  }
}
