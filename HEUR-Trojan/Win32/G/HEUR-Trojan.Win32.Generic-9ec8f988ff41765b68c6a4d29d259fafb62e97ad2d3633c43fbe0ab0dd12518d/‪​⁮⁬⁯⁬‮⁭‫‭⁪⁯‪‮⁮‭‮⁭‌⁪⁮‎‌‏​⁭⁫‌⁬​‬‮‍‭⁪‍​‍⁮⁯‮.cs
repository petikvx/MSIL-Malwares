// Decompiled with JetBrains decompiler
// Type: ‪​⁮⁬⁯⁬‮⁭‫‭⁪⁯‪‮⁮‭‮⁭‌⁪⁮‎‌‏​⁭⁫‌⁬​‬‮‍‭⁪‍​‍⁮⁯‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;
using System.IO;

public class \u202A​⁮⁬⁯⁬‮⁭‫‭⁪⁯‪‮⁮‭‮⁭‌⁪⁮‎‌‏​⁭⁫‌⁬​‬‮‍‭⁪‍​‍⁮⁯‮ : 
  \u206F‫⁫​‎‏⁯‪⁪‫⁬‮‮‎‪⁭‌​‫‮‫⁬‏‮​‭‎‭‬⁮‬‬‮⁭‬‍‫⁭⁫‮
{
  protected readonly byte[] \u202A‌‮⁬‪‫⁮‌⁭‫‭‮‬⁯‍⁬⁭‭‭⁬⁫⁯‮⁪⁪⁯⁮‍‎‏‍‪‍‪⁯‮⁬‪⁮⁯‮ = new byte[16]
  {
    (byte) 48,
    (byte) 49,
    (byte) 50,
    (byte) 51,
    (byte) 52,
    (byte) 53,
    (byte) 54,
    (byte) 55,
    (byte) 56,
    (byte) 57,
    (byte) 97,
    (byte) 98,
    (byte) 99,
    (byte) 100,
    (byte) 101,
    (byte) 102
  };
  protected readonly byte[] \u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮ = new byte[128];

  protected void \u206D⁪⁮‍⁫‎‍​‍⁮⁯‮⁮‍‫⁯‎‬‮⁮‎‏‪‌‭‎‬​⁯‌‌‪⁪‌‫⁬⁯‬⁪‮()
  {
    \u206D‭‎‏⁪⁫‌⁫⁫‮‮​‮‫⁯‎​⁮‭‍⁬⁫⁭⁬‎⁭‫‮‫⁬⁫‬‮⁪‌⁮⁬⁭⁬‪‮.\u202E‫⁭‬‌⁫‮‏‫‮‪⁬‫‫⁬⁪⁪⁭‬‏⁫⁮‏⁪‫‬‭‮⁬‪‍‫⁭‪‍⁯‫‭‍‫‮(this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮, byte.MaxValue);
    for (int index = 0; index < this.\u202A‌‮⁬‪‫⁮‌⁭‫‭‮‬⁯‍⁬⁭‭‭⁬⁫⁯‮⁪⁪⁯⁮‍‎‏‍‪‍‪⁯‮⁬‪⁮⁯‮.Length; ++index)
      this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[(int) this.\u202A‌‮⁬‪‫⁮‌⁭‫‭‮‬⁯‍⁬⁭‭‭⁬⁫⁯‮⁪⁪⁯⁮‍‎‏‍‪‍‪⁯‮⁬‪⁮⁯‮[index]] = (byte) index;
    this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[65] = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[97];
    this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[66] = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[98];
    this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[67] = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[99];
    this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[68] = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[100];
    this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[69] = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[101];
    this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[70] = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮[102];
  }

  public \u202A​⁮⁬⁯⁬‮⁭‫‭⁪⁯‪‮⁮‭‮⁭‌⁪⁮‎‌‏​⁭⁫‌⁬​‬‮‍‭⁪‍​‍⁮⁯‮() => this.\u206D⁪⁮‍⁫‎‍​‍⁮⁯‮⁮‍‫⁯‎‬‮⁮‎‏‪‌‭‎‬​⁯‌‌‪⁪‌‫⁬⁯‬⁪‮();

  public int \u206C‮⁯‌⁯‌⁭⁫‪‭​‪‫⁫⁪⁯⁭⁫‎⁬‫‫⁮‎‮⁬⁪‮‎‫‭⁪⁭⁫⁪‪⁪⁬‭‫‮(
    byte[] _param1,
    int _param2,
    int _param3,
    byte[] _param4,
    int _param5)
  {
    int num1 = _param2;
    int num2 = _param2 + _param3;
    int num3 = _param5;
    while (num1 < num2)
    {
      uint num4 = (uint) _param1[num1++];
      byte[] numArray1 = _param4;
      int index1 = num3;
      int num5 = index1 + 1;
      int num6 = (int) this.\u202A‌‮⁬‪‫⁮‌⁭‫‭‮‬⁯‍⁬⁭‭‭⁬⁫⁯‮⁪⁪⁯⁮‍‎‏‍‪‍‪⁯‮⁬‪⁮⁯‮[(int) (num4 >> 4)];
      numArray1[index1] = (byte) num6;
      byte[] numArray2 = _param4;
      int index2 = num5;
      num3 = index2 + 1;
      int num7 = (int) this.\u202A‌‮⁬‪‫⁮‌⁭‫‭‮‬⁯‍⁬⁭‭‭⁬⁫⁯‮⁪⁪⁯⁮‍‎‏‍‪‍‪⁯‮⁬‪⁮⁯‮[(int) num4 & 15];
      numArray2[index2] = (byte) num7;
    }
    return num3 - _param5;
  }

  public int \u206C‮⁯‌⁯‌⁭⁫‪‭​‪‫⁫⁪⁯⁭⁫‎⁬‫‫⁮‎‮⁬⁪‮‎‫‭⁪⁭⁫⁪‪⁪⁬‭‫‮(
    byte[] _param1,
    int _param2,
    int _param3,
    Stream _param4)
  {
    if (_param3 < 0)
      return 0;
    byte[] buffer = new byte[72];
    int num;
    for (int val2 = _param3; val2 > 0; val2 -= num)
    {
      num = Math.Min(36, val2);
      int count = this.\u206C‮⁯‌⁯‌⁭⁫‪‭​‪‫⁫⁪⁯⁭⁫‎⁬‫‫⁮‎‮⁬⁪‮‎‫‭⁪⁭⁫⁪‪⁪⁬‭‫‮(_param1, _param2, num, buffer, 0);
      _param4.Write(buffer, 0, count);
      _param2 += num;
    }
    return _param3 * 2;
  }

  private static bool \u202C‏⁯⁭‍‭‌‬⁭⁫⁯⁮‍⁮⁫‫‫‫‫‌‍‮‫‪‏​‌⁮⁫⁬⁯⁭‎⁫⁯‪‮‍⁭‭‮(char _param0) => _param0 == '\n' || _param0 == '\r' || _param0 == '\t' || _param0 == ' ';

  public int \u200D⁮‭‎⁪‏‌⁬‮‎⁬⁭‮‎⁫⁮⁯‌‏⁬‍⁭​‎​‍‏‏‌⁭‫‬⁯⁪‎⁪‮⁫⁬⁬‮(
    byte[] _param1,
    int _param2,
    int _param3,
    Stream _param4)
  {
    int num1 = 0;
    byte[] buffer = new byte[36];
    int count = 0;
    int num2 = _param2 + _param3;
    while (num2 > _param2 && \u202A​⁮⁬⁯⁬‮⁭‫‭⁪⁯‪‮⁮‭‮⁭‌⁪⁮‎‌‏​⁭⁫‌⁬​‬‮‍‭⁪‍​‍⁮⁯‮.\u202C‏⁯⁭‍‭‌‬⁭⁫⁯⁮‍⁮⁫‫‫‫‫‌‍‮‫‪‏​‌⁮⁫⁬⁯⁭‎⁫⁯‪‮‍⁭‭‮((char) _param1[num2 - 1]))
      --num2;
    int index1 = _param2;
    while (index1 < num2)
    {
      while (index1 < num2 && \u202A​⁮⁬⁯⁬‮⁭‫‭⁪⁯‪‮⁮‭‮⁭‌⁪⁮‎‌‏​⁭⁫‌⁬​‬‮‍‭⁪‍​‍⁮⁯‮.\u202C‏⁯⁭‍‭‌‬⁭⁫⁯⁮‍⁮⁫‫‫‫‫‌‍‮‫‪‏​‌⁮⁫⁬⁯⁭‎⁫⁯‪‮‍⁭‭‮((char) _param1[index1]))
        ++index1;
      byte[] numArray1 = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮;
      byte[] numArray2 = _param1;
      int index2 = index1;
      int index3 = index2 + 1;
      int index4 = (int) numArray2[index2];
      byte num3 = numArray1[index4];
      while (index3 < num2 && \u202A​⁮⁬⁯⁬‮⁭‫‭⁪⁯‪‮⁮‭‮⁭‌⁪⁮‎‌‏​⁭⁫‌⁬​‬‮‍‭⁪‍​‍⁮⁯‮.\u202C‏⁯⁭‍‭‌‬⁭⁫⁯⁮‍⁮⁫‫‫‫‫‌‍‮‫‪‏​‌⁮⁫⁬⁯⁭‎⁫⁯‪‮‍⁭‭‮((char) _param1[index3]))
        ++index3;
      byte[] numArray3 = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮;
      byte[] numArray4 = _param1;
      int index5 = index3;
      index1 = index5 + 1;
      int index6 = (int) numArray4[index5];
      byte num4 = numArray3[index6];
      if (((int) num3 | (int) num4) >= 128)
        throw new IOException("invalid characters encountered in Hex data");
      buffer[count++] = (byte) ((uint) num3 << 4 | (uint) num4);
      if (count == buffer.Length)
      {
        _param4.Write(buffer, 0, count);
        count = 0;
      }
      ++num1;
    }
    if (count > 0)
      _param4.Write(buffer, 0, count);
    return num1;
  }

  public int \u206C⁮‎⁮⁯⁫‌‫​‬‫⁬‬‮⁬‏‍‎⁪‪‫​‫‏‪⁮‍⁫⁯⁮⁪​‫‭‏‌⁪⁪⁯‫‮(string _param1, Stream _param2)
  {
    int num1 = 0;
    byte[] buffer = new byte[36];
    int count = 0;
    int length = _param1.Length;
    while (length > 0 && \u202A​⁮⁬⁯⁬‮⁭‫‭⁪⁯‪‮⁮‭‮⁭‌⁪⁮‎‌‏​⁭⁫‌⁬​‬‮‍‭⁪‍​‍⁮⁯‮.\u202C‏⁯⁭‍‭‌‬⁭⁫⁯⁮‍⁮⁫‫‫‫‫‌‍‮‫‪‏​‌⁮⁫⁬⁯⁭‎⁫⁯‪‮‍⁭‭‮(_param1[length - 1]))
      --length;
    int index1 = 0;
    while (index1 < length)
    {
      while (index1 < length && \u202A​⁮⁬⁯⁬‮⁭‫‭⁪⁯‪‮⁮‭‮⁭‌⁪⁮‎‌‏​⁭⁫‌⁬​‬‮‍‭⁪‍​‍⁮⁯‮.\u202C‏⁯⁭‍‭‌‬⁭⁫⁯⁮‍⁮⁫‫‫‫‫‌‍‮‫‪‏​‌⁮⁫⁬⁯⁭‎⁫⁯‪‮‍⁭‭‮(_param1[index1]))
        ++index1;
      byte[] numArray1 = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮;
      string str1 = _param1;
      int index2 = index1;
      int index3 = index2 + 1;
      int index4 = (int) str1[index2];
      byte num2 = numArray1[index4];
      while (index3 < length && \u202A​⁮⁬⁯⁬‮⁭‫‭⁪⁯‪‮⁮‭‮⁭‌⁪⁮‎‌‏​⁭⁫‌⁬​‬‮‍‭⁪‍​‍⁮⁯‮.\u202C‏⁯⁭‍‭‌‬⁭⁫⁯⁮‍⁮⁫‫‫‫‫‌‍‮‫‪‏​‌⁮⁫⁬⁯⁭‎⁫⁯‪‮‍⁭‭‮(_param1[index3]))
        ++index3;
      byte[] numArray2 = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮;
      string str2 = _param1;
      int index5 = index3;
      index1 = index5 + 1;
      int index6 = (int) str2[index5];
      byte num3 = numArray2[index6];
      if (((int) num2 | (int) num3) >= 128)
        throw new IOException("invalid characters encountered in Hex data");
      buffer[count++] = (byte) ((uint) num2 << 4 | (uint) num3);
      if (count == buffer.Length)
      {
        _param2.Write(buffer, 0, count);
        count = 0;
      }
      ++num1;
    }
    if (count > 0)
      _param2.Write(buffer, 0, count);
    return num1;
  }

  internal byte[] \u202B‫​⁭‏⁬⁫⁬⁯⁮‏‬‬‫⁭‫‭⁫‪‎‍‫⁫‪‍⁮⁯‍⁯‬​‭⁪​⁫⁮‎‍‬‏‮(
    string _param1,
    int _param2,
    int _param3)
  {
    if (_param1 == null)
      throw new ArgumentNullException("str");
    if (_param2 < 0 || _param3 < 0 || _param2 > _param1.Length - _param3)
      throw new IndexOutOfRangeException("invalid offset and/or length specified");
    if ((_param3 & 1) != 0)
      throw new ArgumentException("a hexadecimal encoding must have an even number of characters", "len");
    int length = _param3 >> 1;
    byte[] numArray1 = new byte[length];
    int num1 = _param2;
    for (int index1 = 0; index1 < length; ++index1)
    {
      byte[] numArray2 = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮;
      string str1 = _param1;
      int index2 = num1;
      int num2 = index2 + 1;
      int index3 = (int) str1[index2];
      byte num3 = numArray2[index3];
      byte[] numArray3 = this.\u200D‎⁫‪‪‪‮⁬‍⁫⁪‌‪⁮⁭‎‬⁮⁬⁬‮⁯‎‌‪‮⁯‌⁪‪⁮‎‫⁯⁬‫⁮⁪‌‎‮;
      string str2 = _param1;
      int index4 = num2;
      num1 = index4 + 1;
      int index5 = (int) str2[index4];
      byte num4 = numArray3[index5];
      if (((int) num3 | (int) num4) >= 128)
        throw new IOException("invalid characters encountered in Hex data");
      numArray1[index1] = (byte) ((uint) num3 << 4 | (uint) num4);
    }
    return numArray1;
  }
}
