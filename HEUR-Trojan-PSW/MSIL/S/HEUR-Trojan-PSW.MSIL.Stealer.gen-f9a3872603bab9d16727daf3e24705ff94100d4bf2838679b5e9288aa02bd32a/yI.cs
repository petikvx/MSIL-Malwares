// Decompiled with JetBrains decompiler
// Type: ib.yI
// Assembly: ContingentPropert, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 10450B75-DDB2-42D8-896D-5D92C0FA5DAE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9a3872603bab9d16727daf3e24705ff94100d4bf2838679b5e9288aa02bd32a.exe

using System;

namespace ib
{
  public class yI
  {
    private int w9;
    private int GK;
    private int lV;
    private byte[] jH;
    internal static yI ns;

    public yI(int _param1)
    {
      Jnb.vbPcO4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.w9 = _param1;
      this.jH = new byte[_param1];
      int num1 = 0;
      if (false)
        goto label_3;
label_1:
      switch (num1)
      {
        default:
          this.GK = 0;
          this.lV = 0;
          return;
      }
label_3:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public void M5(byte _param1)
    {
      this.jH[this.GK] = _param1;
      this.GK = (this.GK + 1) % this.w9;
      this.lV = Math.Max(this.lV + 1, this.w9);
    }

    public void lJ(byte[] _param1)
    {
      int num1 = 1;
label_1:
      int num2 = num1;
      int index;
      while (true)
      {
        switch (num2)
        {
          case 1:
            index = 0;
            if (yI.@if() == null)
            {
              num2 = 0;
              continue;
            }
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      for (; index < _param1.Length; ++index)
        this.M5(_param1[index]);
    }

    public bool nX(string _param1)
    {
      int num1 = 2;
label_1:
      int num2 = num1;
      bool flag;
      char[] charArray;
      while (true)
      {
        switch (num2)
        {
          case 1:
            byte[] numArray = new byte[charArray.Length];
            for (int index = 0; index < charArray.Length; ++index)
              numArray[index] = (byte) charArray[index];
            flag = this.oI(numArray);
            if (yI.JT())
            {
              num2 = 0;
              continue;
            }
            goto label_1;
          case 2:
            charArray = _param1.ToCharArray();
            num2 = !yI.JT() ? 0 : 1;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return flag;
    }

    public bool oI(byte[] _param1)
    {
      bool flag1;
      if (this.lV < _param1.Length)
        flag1 = false;
      else
        goto label_9;
label_6:
      return flag1;
label_9:
      for (int index = 0; index < _param1.Length; ++index)
      {
        bool flag2 = (int) this.jH[(this.GK + index) % this.w9] != (int) _param1[index];
        int num = 1;
        if (!yI.JT())
          goto label_5;
label_1:
        switch (num)
        {
          case 1:
            if (flag2)
            {
              flag1 = false;
              goto label_6;
            }
            else
              continue;
          case 2:
            continue;
          default:
            goto label_6;
        }
label_5:
        num = 0;
        goto label_1;
      }
      flag1 = true;
      goto label_6;
    }

    internal static bool JT() => yI.ns == null;

    internal static yI @if() => yI.ns;
  }
}
