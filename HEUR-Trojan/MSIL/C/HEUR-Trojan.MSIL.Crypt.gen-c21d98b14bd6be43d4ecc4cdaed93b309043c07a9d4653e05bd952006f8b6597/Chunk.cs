// Decompiled with JetBrains decompiler
// Type: D3DHelper.Chunk
// Assembly: jW4W, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F794319B-26EC-4D2B-9F2A-1AE265F208BE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.Crypt.gen-c21d98b14bd6be43d4ecc4cdaed93b309043c07a9d4653e05bd952006f8b6597.exe

using System;
using System.IO;

namespace D3DHelper
{
  internal struct Chunk
  {
    public ChunkType Type;
    public string ID;
    public uint Version;
    public long StartPosition;
    public long Size;
    private IFFReader m_IFFReader;

    public Chunk(IFFReader IFFReader)
      : this()
    {
      this.m_IFFReader = IFFReader;
      this.Type = ChunkType.Default;
      this.ID = "    ";
      this.StartPosition = -1L;
      this.Size = -1L;
      this.Version = 0U;
    }

    public void Read()
    {
      if (this.Size < 0L)
        throw new Exception("'Size < 0'");
      ChunkHandler handler = this.m_IFFReader.FindHandler(this.ID, this.Type, this.Version);
      if (handler == null)
      {
        Stream baseStream;
        long num = checked ((baseStream = this.m_IFFReader.BaseStream).Position + this.Size);
        baseStream.Position = num;
      }
      else
      {
        byte[] buffer = this.m_IFFReader.ReadBytes(checked ((int) this.Size));
        MemoryStream input = new MemoryStream(buffer, 0, buffer.Length, false, false);
        IFFReader Reader = new IFFReader((Stream) input);
        handler(Reader, new ChunkAttributes(this.ID, checked ((int) this.Size), this.Type, this.Version));
        Reader.Close();
        input.Close();
      }
    }
  }
}
