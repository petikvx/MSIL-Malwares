// Decompiled with JetBrains decompiler
// Type: NChanges.Project
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Xml;

namespace NChanges
{
  public class Project
  {
    public static readonly string SnapshotTaskName = "Snapshot";
    public static readonly string ReportTaskName = "Report";
    public static readonly string ExcelTaskName = "Excel";
    public static readonly string CleanTaskName = "Clean";
    private const string MSBuildNamespace = "http://schemas.microsoft.com/developer/msbuild/2003";
    private const string NChangesToolPathPropertyName = "NChangesTool";
    private const string TypesToExcludePatternPropertyName = "TypesToExclude";
    private const string ExcelOutputPathPropertyName = "ExcelOutput";
    private const string AssembliesToSnapshotItemName = "Assembly";
    private const string VersionMetaDataName = "Version";
    private readonly List<AssemblyToSnapshot> _assembliesToSnapshot = new List<AssemblyToSnapshot>();

    public string NChangesToolPath { get; set; }

    public string TypesToExcludePattern { get; set; }

    public string ExcelOutputPath { get; set; }

    public ICollection<AssemblyToSnapshot> AssembliesToSnapshot => (ICollection<AssemblyToSnapshot>) this._assembliesToSnapshot;

    public void WriteXml(string path)
    {
      using (XmlTextWriter xmlTextWriter = new XmlTextWriter(path, Encoding.UTF8))
      {
        xmlTextWriter.Formatting = Formatting.Indented;
        this.WriteXml((XmlWriter) xmlTextWriter);
      }
    }

    public void WriteXml(XmlWriter xmlWriter)
    {
      xmlWriter.WriteStartElement(nameof (Project), "http://schemas.microsoft.com/developer/msbuild/2003");
      xmlWriter.WriteAttributeString("DefaultTargets", "Excel");
      this.WriteProperties(xmlWriter);
      this.WriteAssembliesToSnapshot(xmlWriter);
      this.WriteTargets(xmlWriter);
      xmlWriter.WriteEndElement();
    }

    private void WriteProperties(XmlWriter xmlWriter)
    {
      xmlWriter.WriteStartElement("PropertyGroup");
      xmlWriter.WriteElementString("NChangesTool", this.NChangesToolPath);
      xmlWriter.WriteElementString("TypesToExclude", this.TypesToExcludePattern);
      xmlWriter.WriteElementString("ExcelOutput", this.ExcelOutputPath);
      xmlWriter.WriteEndElement();
    }

    private void WriteAssembliesToSnapshot(XmlWriter xmlWriter)
    {
      xmlWriter.WriteStartElement("ItemGroup");
      foreach (AssemblyToSnapshot assemblyToSnapshot in (IEnumerable<AssemblyToSnapshot>) this.AssembliesToSnapshot)
      {
        xmlWriter.WriteStartElement("Assembly");
        xmlWriter.WriteAttributeString("Include", assemblyToSnapshot.Path);
        if (!string.IsNullOrEmpty(assemblyToSnapshot.Version))
          xmlWriter.WriteElementString("Version", assemblyToSnapshot.Version);
        xmlWriter.WriteEndElement();
      }
      xmlWriter.WriteEndElement();
    }

    private void WriteTargets(XmlWriter xmlWriter)
    {
      Project.WriteSnapshotTarget(xmlWriter);
      Project.WriteReportTarget(xmlWriter);
      Project.WriteExcelTarget(xmlWriter);
      Project.WriteCleanTarget(xmlWriter);
    }

    private static void WriteSnapshotTarget(XmlWriter xmlWriter)
    {
      xmlWriter.WriteStartElement("Target");
      xmlWriter.WriteAttributeString("Name", Project.SnapshotTaskName);
      xmlWriter.WriteStartElement("Exec");
      xmlWriter.WriteAttributeString("Command", string.Format("$({0}) snapshot \"%({1}.Identity)\" -v=\"%({2})\" -x=\"$({3})\"", (object) "NChangesTool", (object) "Assembly", (object) "Version", (object) "TypesToExclude"));
      xmlWriter.WriteEndElement();
      xmlWriter.WriteEndElement();
    }

    private static void WriteReportTarget(XmlWriter xmlWriter)
    {
      xmlWriter.WriteStartElement("Target");
      xmlWriter.WriteAttributeString("Name", Project.ReportTaskName);
      xmlWriter.WriteStartElement("Exec");
      xmlWriter.WriteAttributeString("Command", string.Format("$({0}) report *-snapshot.xml", (object) "NChangesTool"));
      xmlWriter.WriteEndElement();
      xmlWriter.WriteEndElement();
    }

    private static void WriteExcelTarget(XmlWriter xmlWriter)
    {
      xmlWriter.WriteStartElement("Target");
      xmlWriter.WriteAttributeString("Name", Project.ExcelTaskName);
      xmlWriter.WriteStartElement("Exec");
      xmlWriter.WriteAttributeString("Command", string.Format("$({0}) excel *-report.xml -o=\"$({1})\"", (object) "NChangesTool", (object) "ExcelOutput"));
      xmlWriter.WriteEndElement();
      xmlWriter.WriteEndElement();
    }

    private static void WriteCleanTarget(XmlWriter xmlWriter)
    {
      xmlWriter.WriteStartElement("Target");
      xmlWriter.WriteAttributeString("Name", Project.CleanTaskName);
      xmlWriter.WriteStartElement("Delete");
      xmlWriter.WriteAttributeString("Files", string.Format("%({0}.Filename)-%({1})-snapshot.xml", (object) "Assembly", (object) "Version"));
      xmlWriter.WriteEndElement();
      xmlWriter.WriteStartElement("Delete");
      xmlWriter.WriteAttributeString("Files", string.Format("%({0}.Filename)-%({1})-report.xml", (object) "Assembly", (object) "Version"));
      xmlWriter.WriteEndElement();
      xmlWriter.WriteStartElement("Delete");
      xmlWriter.WriteAttributeString("Files", string.Format("$({0})", (object) "ExcelOutput"));
      xmlWriter.WriteEndElement();
      xmlWriter.WriteEndElement();
    }

    public void ReadXml(string path)
    {
      using (XmlTextReader xmlTextReader = new XmlTextReader(path))
        this.ReadXml((XmlReader) xmlTextReader);
    }

    public void ReadXml(XmlReader xmlReader)
    {
      XmlDocument doc = new XmlDocument();
      doc.Load(xmlReader);
      XmlNamespaceManager namespaceManager = new XmlNamespaceManager(doc.NameTable);
      namespaceManager.AddNamespace("msbuild", "http://schemas.microsoft.com/developer/msbuild/2003");
      this.NChangesToolPath = Project.GetPropertyValue("NChangesTool", doc, namespaceManager);
      this.TypesToExcludePattern = Project.GetPropertyValue("TypesToExclude", doc, namespaceManager);
      this.ExcelOutputPath = Project.GetPropertyValue("ExcelOutput", doc, namespaceManager);
      XmlNodeList source = doc.SelectNodes("/msbuild:Project/msbuild:ItemGroup/msbuild:Assembly", namespaceManager);
      if (source == null)
        return;
      foreach (XmlElement xmlElement in source.Cast<XmlElement>())
      {
        string attribute = xmlElement.GetAttribute("Include");
        string str = (string) null;
        XmlNode xmlNode = xmlElement.SelectSingleNode("msbuild:Version", namespaceManager);
        if (xmlNode != null)
          str = xmlNode.InnerText;
        this.AssembliesToSnapshot.Add(new AssemblyToSnapshot()
        {
          Path = attribute,
          Version = str
        });
      }
    }

    private static string GetPropertyValue(
      string propertyName,
      XmlDocument doc,
      XmlNamespaceManager nsManager)
    {
      return doc.SelectSingleNode("/msbuild:Project/msbuild:PropertyGroup/msbuild:" + propertyName, nsManager)?.InnerText;
    }

    public static void Run(string projectPath, string targetName) => Process.Start(Path.Combine(RuntimeEnvironment.GetRuntimeDirectory(), "MSBuild.exe"), projectPath + " /t:" + targetName);
  }
}
