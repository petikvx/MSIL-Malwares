// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: هx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 374CAC08-464B-4E84-B463-5CFD524FF26C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-74995e87513e47357c351f37565a1422202dace38dc789308d72417b5797b93e.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board)
    {
label_1:
      int num1 = -1232897133;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1494262)) % 4U)
        {
          case 0:
            this.b = board;
            num1 = (int) num2 * -941644325 ^ -658306316;
            continue;
          case 1:
            num1 = (int) num2 * -2122954269 ^ 1015469825;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = 1781324858;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1796769947)) % 11U)
        {
          case 0:
            int num3 = x != Pieces.King ? -1501910046 : (num3 = -957120968);
            num1 = num3 ^ (int) num2 * -1906011731;
            continue;
          case 1:
            num1 = (int) num2 * 1287325496 ^ 263042;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          case 4:
            this.b.WhiteCanCastleKingSide = false;
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -319585254 ^ 830575220;
            continue;
          case 5:
            this.b.DisableTurns = true;
            num1 = 889898041;
            continue;
          case 6:
            this.b.ClearBoard();
            num1 = (int) num2 * -492366445 ^ 920004381;
            continue;
          case 7:
            num1 = (int) num2 * 28682040 ^ 393162405;
            continue;
          case 8:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 588961482 ^ 141330019;
            continue;
          case 9:
            num1 = (int) num2 * -1498770690 ^ 1811094090;
            continue;
          case 10:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * 595266594 ^ 1218324220;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 652456022;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 687557360)) % 12U)
        {
          case 0:
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * -895811969 ^ -1607587589;
            continue;
          case 1:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1603281544 ^ 155570124;
            continue;
          case 2:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 445706677 ^ 1100075199;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * 558997722 ^ 505766426;
            continue;
          case 5:
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * 49150298 ^ 2051849231;
            continue;
          case 6:
            this.b.DisableTurns = true;
            num1 = (int) num2 * -688543560 ^ 2131831380;
            continue;
          case 7:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * -1311237059 ^ -2009893789;
            continue;
          case 8:
            goto label_3;
          case 9:
            num1 = (int) num2 * -408111990 ^ -104961952;
            continue;
          case 10:
            this.b.ClearBoard();
            num1 = (int) num2 * -1605188591 ^ 84293715;
            continue;
          case 11:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * -231240917 ^ -1785856378;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = -1026884182;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -142735268)) % 7U)
        {
          case 0:
            this.b.addBlack(3, 7, Pieces.King);
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * 1351755555 ^ -558089146;
            continue;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * -1280339049 ^ 1994192125;
            continue;
          case 2:
            num1 = (int) num2 * -372431960 ^ 795672782;
            continue;
          case 3:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * -55597288 ^ -1320815147;
            continue;
          case 4:
            this.b.addWhite(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 1411560404 ^ 723818335;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      this.b.lights.FindAllMoves();
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
      this.b.DisableTurns = true;
      this.b.addBlack(0, 7, Pieces.Rook);
      this.b.addBlack(4, 7, Pieces.King);
label_1:
      int num1 = 1288891557;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2086922334)) % 7U)
        {
          case 0:
            goto label_1;
          case 2:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -329481659 ^ 45757747;
            continue;
          case 3:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -1381243924 ^ -2007612383;
            continue;
          case 4:
            num1 = (int) num2 * -1939700943 ^ 1524568209;
            continue;
          case 5:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -1636843806 ^ -1565349448;
            continue;
          case 6:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 1672441529 ^ -1081587140;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      this.b.lights.FindAllMoves();
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 2122447887;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1707210120)) % 9U)
        {
          case 0:
            goto label_3;
          case 1:
            this.b.addBlack(0, 4, Pieces.Bishop);
            num1 = (int) num2 * -605891152 ^ 1072566011;
            continue;
          case 2:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1822297465 ^ 1643806053;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -1315374306 ^ -1960921013;
            continue;
          case 5:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 649938073 ^ 1850000349;
            continue;
          case 6:
            num1 = (int) num2 * -737782541 ^ 1872662377;
            continue;
          case 7:
            this.b.ClearBoard();
            num1 = (int) num2 * -1684662076 ^ 399476090;
            continue;
          case 8:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 180474762 ^ -475139263;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    internal void TestCheck()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -1047516177;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1429884197)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 695772474 ^ -850782524;
            continue;
          case 2:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -861075013 ^ 172924030;
            continue;
          case 3:
            num1 = (int) num2 * -731798345 ^ 417264796;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -876988920 ^ 108063004;
            continue;
          case 6:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * -1458558278 ^ 162092098;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    internal void CheckOnCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 458419742;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 600145874)) % 18U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1848739824 ^ -347938145;
            continue;
          case 2:
            num1 = (int) num2 * -504267348 ^ -1205963572;
            continue;
          case 3:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 169117128 ^ -1661209455;
            continue;
          case 4:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 1496385155 ^ -1499820199;
            continue;
          case 5:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -1852119152 ^ 332260211;
            continue;
          case 6:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * 1209881792 ^ 944493036;
            continue;
          case 7:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -26619209 ^ 2105010755;
            continue;
          case 8:
            num1 = (int) num2 * -277712692 ^ -1750136667;
            continue;
          case 9:
            num1 = (int) num2 * -21847945 ^ 789631628;
            continue;
          case 10:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 726237223 ^ 1806465134;
            continue;
          case 11:
            goto label_3;
          case 12:
            num1 = (int) num2 * 2062157308 ^ 54646856;
            continue;
          case 13:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -432127549 ^ 327321544;
            continue;
          case 14:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 2032926095 ^ 1390192233;
            continue;
          case 15:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 2086222144 ^ 1406913212;
            continue;
          case 16:
            num1 = (int) num2 * 736193304 ^ 1709527113;
            continue;
          case 17:
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * 591170262 ^ -412973918;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }
  }
}
