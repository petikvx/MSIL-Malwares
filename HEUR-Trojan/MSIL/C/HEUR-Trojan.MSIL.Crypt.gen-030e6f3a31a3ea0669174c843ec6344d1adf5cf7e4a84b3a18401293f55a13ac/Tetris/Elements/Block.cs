// Decompiled with JetBrains decompiler
// Type: Tetris.Elements.Block
// Assembly: UTF32Deco, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D1370CB4-F81D-438A-9B46-6323AF95040A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-030e6f3a31a3ea0669174c843ec6344d1adf5cf7e4a84b3a18401293f55a13ac.exe

using Game.Elements;
using System.Collections.Generic;
using System.Drawing;

namespace Tetris.Elements
{
  public class Block : Sprite
  {
    public Block(Image image, Size size)
      : base(image, Point.Empty)
    {
      this.Block_Size = size;
      this.MatrixIndex = 0;
    }

    public int[,] Matrix => this.Matrices[this.MatrixIndex];

    protected List<int[,]> Matrices { get; set; }

    private int MatrixIndex { get; set; }

    public Point Location { get; set; }

    public Size Matrix_Size => new Size(this.Matrix.GetLength(1), this.Matrix.GetLength(0));

    public Size Block_Size { get; private set; }

    public void Rotate(int value)
    {
      int num = this.MatrixIndex + value;
      if (num < 0)
        num = this.Matrices.Count - 1;
      if (num == this.Matrices.Count)
        num = 0;
      this.MatrixIndex = num;
    }

    public void SetDefault() => this.MatrixIndex = 0;

    public override void Draw(DrawHandler drawHandler)
    {
      int index1 = 0;
      while (true)
      {
        int num1 = index1;
        Size size = this.Matrix_Size;
        int height1 = size.Height;
        if (num1 < height1)
        {
          int index2 = 0;
          while (true)
          {
            int num2 = index2;
            size = this.Matrix_Size;
            int width1 = size.Width;
            if (num2 < width1)
            {
              if (this.Matrix[index1, index2] > 0)
              {
                Point position;
                ref Point local = ref position;
                int num3 = index2;
                Point location = this.Location;
                int x1 = location.X;
                int num4 = num3 + x1;
                size = this.Block_Size;
                int width2 = size.Width;
                int x2 = num4 * width2;
                int num5 = index1;
                location = this.Location;
                int y1 = location.Y;
                int num6 = num5 + y1;
                size = this.Block_Size;
                int height2 = size.Height;
                int y2 = num6 * height2;
                local = new Point(x2, y2);
                drawHandler.Draw(this.Image, position);
              }
              ++index2;
            }
            else
              break;
          }
          ++index1;
        }
        else
          break;
      }
    }
  }
}
