// Decompiled with JetBrains decompiler
// Type: c.Filter.RefThreadFilter
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using c.Specifications;
using GLuaR.Importers;
using GLuaR.Shared;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using System.Xml.Serialization;

namespace c.Filter
{
  public class RefThreadFilter
  {
    public List<Page> _Serializer;
    public List<RefThreadFilter> issuer;
    public string m_Database;
    [XmlIgnore]
    public TreeNode m_Class;
    [XmlIgnore]
    public RefThreadFilter indexer;
    [XmlIgnore]
    public ExceptionComparatorSpec m_Context;
    [XmlIgnore]
    public InterceptorThreadFilter _List;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public RefThreadFilter()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_2;
            case 1:
            case 2:
              this.issuer = new List<RefThreadFilter>();
              this._Serializer = new List<Page>();
              if (RefThreadFilter.ExcludeManager())
              {
                num2 = 5;
                continue;
              }
              goto label_2;
            case 4:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              goto case 1;
            case 5:
              goto label_8;
            default:
              if (!RefThreadFilter.ConcatManager())
              {
                num2 = 1;
                continue;
              }
              goto label_7;
          }
        }
label_2:
        ImporterMapper.InitAccount();
        num1 = 4;
      }
label_8:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string SetupField()
    {
      int num1 = 7;
      string str1;
      while (true)
      {
        int num2 = num1;
        string str2;
        while (true)
        {
          RefThreadFilter refThreadFilter;
          int index;
          List<RefThreadFilter> refThreadFilterList;
          switch (num2)
          {
            case 0:
            case 7:
              goto label_7;
            case 1:
label_2:
              if (index < 0)
              {
                num2 = 6;
                continue;
              }
              if (refThreadFilter != this)
              {
                refThreadFilter = refThreadFilterList[index];
                goto case 2;
              }
              else
                goto label_8;
            case 2:
            case 4:
              str2 = str2 + "\\" + refThreadFilter.m_Database;
              --index;
              goto case 1;
            case 3:
              refThreadFilter = refThreadFilter.indexer;
              break;
            case 5:
              refThreadFilter = this;
              refThreadFilterList = new List<RefThreadFilter>();
              break;
            case 6:
              goto label_8;
            case 8:
              goto label_16;
            default:
              num2 = 2;
              continue;
          }
          if (refThreadFilter == null)
          {
            index = refThreadFilterList.Count - 1;
            if (RefThreadFilter.ExcludeManager())
              num2 = 1;
            else
              break;
          }
          else
          {
            refThreadFilterList.Add(refThreadFilter);
            if (true)
              num2 = 3;
            else
              goto label_2;
          }
        }
label_7:
        str2 = this.m_Context._Code;
        num1 = 5;
        continue;
label_8:
        str1 = str2;
        num1 = 8;
      }
label_16:
      return str1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CancelField(InterceptorThreadFilter last, ExceptionComparatorSpec cont)
    {
      int num1 = 4;
      if (!RefThreadFilter.ConcatManager())
        goto label_15;
label_1:
      this.m_Context = cont;
      if (true)
      {
        num1 = 2;
        goto label_15;
      }
label_2:
      List<RefThreadFilter>.Enumerator enumerator1;
      try
      {
label_10:
        while (enumerator1.MoveNext())
        {
          RefThreadFilter current = enumerator1.Current;
          int num2 = 3;
          if (RefThreadFilter.ExcludeManager())
            goto label_8;
label_4:
          TreeNode node = new TreeNode()
          {
            Text = current.m_Database,
            ContextMenuStrip = last.@object,
            ImageKey = "project_folder_closed",
            SelectedImageKey = "project_folder_closed",
            Tag = (object) current
          };
          current.m_Class = node;
          int num3 = 4;
label_7:
          num2 = num3;
label_8:
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                goto label_4;
              case 1:
              case 4:
                this.m_Class.Nodes.Add(node);
                goto case 2;
              case 2:
                current.CancelField(last, cont);
                if (!RefThreadFilter.ConcatManager())
                {
                  num2 = 5;
                  continue;
                }
                goto case 1;
              case 5:
                goto label_10;
              default:
                goto label_9;
            }
          }
label_9:
          num3 = 2;
          goto label_7;
        }
      }
      finally
      {
        enumerator1.Dispose();
      }
      List<Page>.Enumerator enumerator2 = this._Serializer.GetEnumerator();
      num1 = 5;
label_15:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_1;
          case 1:
          case 2:
            goto label_14;
          case 3:
            goto label_2;
          case 5:
            goto label_17;
          default:
            if (RefThreadFilter.ExcludeManager())
            {
              num1 = 3;
              continue;
            }
            goto label_17;
        }
      }
label_14:
      enumerator1 = this.issuer.GetEnumerator();
      goto label_2;
label_17:
      try
      {
label_29:
        while (enumerator2.MoveNext())
        {
          Page current = enumerator2.Current;
          int num4 = 5;
          if (true)
            goto label_21;
label_19:
          bool flag;
          int num5;
          string str;
          if (!flag)
          {
            current.m_Worker = str + current.m_Reg;
            num5 = 6;
          }
          else
            goto label_23;
label_20:
          num4 = num5;
label_21:
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 5:
                goto label_26;
              case 1:
                goto label_19;
              case 2:
              case 3:
                goto label_23;
              case 4:
                goto label_25;
              case 6:
                goto label_27;
              case 7:
                goto label_28;
              case 8:
                goto label_29;
              default:
                if (!RefThreadFilter.ConcatManager())
                {
                  num4 = 2;
                  continue;
                }
                goto label_23;
            }
          }
label_25:
          flag = !File.Exists(str + current.m_Reg);
          num5 = 1;
          goto label_20;
label_26:
          str = this.SetupField() + "\\";
          num5 = 4;
          goto label_20;
label_27:
          current.m_Connection = true;
          current.m_Base = true;
          num5 = 7;
          goto label_20;
label_28:
          current._Stub = this;
          TreeNode node1 = new TreeNode()
          {
            Text = current.m_Reg,
            ContextMenuStrip = last._Watcher,
            ImageKey = "code",
            SelectedImageKey = "code",
            Tag = (object) current
          };
          current.m_Expression = node1;
          this.m_Class.Nodes.Add(node1);
          num5 = 8;
          goto label_20;
label_23:
          current.m_Base = false;
          current.m_Connection = true;
          current._Stub = this;
          TreeNode node2 = new TreeNode()
          {
            Text = current.m_Reg,
            ContextMenuStrip = last._Watcher,
            ImageKey = "file_lost",
            SelectedImageKey = "file_lost",
            Tag = (object) current
          };
          current.m_Expression = node2;
          this.m_Class.Nodes.Add(node2);
        }
      }
      finally
      {
        enumerator2.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CreateField()
    {
      int num1 = 1;
      bool field;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_11;
            case 2:
            case 4:
              goto label_1;
            case 3:
              goto label_12;
            case 5:
              goto label_25;
            default:
              if (!RefThreadFilter.ConcatManager())
              {
                num2 = 4;
                continue;
              }
              goto label_25;
          }
        }
label_1:
        List<Page>.Enumerator enumerator1;
        try
        {
label_8:
          while (enumerator1.MoveNext())
          {
            Page current = enumerator1.Current;
            int num3 = 2;
            bool flag;
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 2:
                  flag = !current.m_Connection;
                  goto case 1;
                case 1:
                case 3:
                  if (flag)
                  {
                    field = false;
                    if (true)
                    {
                      num3 = 4;
                      continue;
                    }
                    goto label_25;
                  }
                  else
                    goto label_8;
                case 4:
                  goto label_25;
                default:
                  if (true)
                  {
                    num3 = 3;
                    continue;
                  }
                  goto case 1;
              }
            }
          }
        }
        finally
        {
          enumerator1.Dispose();
        }
        field = true;
        num1 = 5;
        continue;
label_11:
        List<RefThreadFilter>.Enumerator enumerator2 = this.issuer.GetEnumerator();
        num1 = 3;
        continue;
label_12:
        try
        {
label_19:
          while (enumerator2.MoveNext())
          {
            RefThreadFilter current = enumerator2.Current;
            int num4 = 3;
            while (true)
            {
              switch (num4)
              {
                case 0:
                case 3:
                  if (current.CreateField())
                    goto label_19;
                  else
                    goto case 1;
                case 1:
                case 2:
                  field = false;
                  num4 = 4;
                  continue;
                case 4:
                  goto label_25;
                default:
                  num4 = 2;
                  continue;
              }
            }
          }
        }
        finally
        {
          enumerator2.Dispose();
        }
        enumerator1 = this._Serializer.GetEnumerator();
        goto label_1;
      }
label_25:
      return field;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Save()
    {
      int num1 = 2;
      List<RefThreadFilter>.Enumerator enumerator1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              enumerator1 = this.issuer.GetEnumerator();
              num2 = 3;
              continue;
            case 1:
            case 3:
              goto label_1;
            case 4:
              goto label_14;
            default:
              goto label_12;
          }
        }
label_12:
        num1 = 4;
      }
label_1:
      try
      {
        while (enumerator1.MoveNext())
        {
          RefThreadFilter current = enumerator1.Current;
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_3;
              case 1:
              case 3:
                goto label_6;
              default:
                if (true)
                {
                  num3 = 3;
                  continue;
                }
                goto label_6;
            }
          }
label_3:
          current.Save();
label_6:;
        }
      }
      finally
      {
        enumerator1.Dispose();
      }
      List<Page>.Enumerator enumerator2 = this._Serializer.GetEnumerator();
label_14:
      try
      {
        while (enumerator2.MoveNext())
        {
          Page current = enumerator2.Current;
          int num4 = 2;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 2:
                goto label_16;
              case 1:
              case 3:
                goto label_19;
              default:
                if (true)
                {
                  num4 = 3;
                  continue;
                }
                goto label_19;
            }
          }
label_16:
          current.Save();
label_19:;
        }
      }
      finally
      {
        enumerator2.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CheckField(string asset)
    {
      int num1 = 3;
      List<RefThreadFilter>.Enumerator enumerator1;
      bool flag1;
      List<Page>.Enumerator enumerator2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            try
            {
              while (enumerator2.MoveNext())
              {
                Page current = enumerator2.Current;
                int num2 = 3;
                if (!RefThreadFilter.ConcatManager())
                  goto label_18;
label_16:
                flag1 = true;
                num2 = 4;
label_18:
                while (true)
                {
                  switch (num2)
                  {
                    case 0:
                    case 3:
                      goto label_17;
                    case 1:
                    case 2:
                      goto label_16;
                    case 4:
                      goto label_24;
                    default:
                      if (true)
                      {
                        num2 = 2;
                        continue;
                      }
                      goto label_24;
                  }
                }
label_17:
                if (current.m_Reg == asset)
                  goto label_16;
              }
            }
            finally
            {
              enumerator2.Dispose();
            }
            flag1 = false;
            num1 = 5;
            continue;
          case 1:
          case 4:
            try
            {
              while (enumerator1.MoveNext())
              {
                RefThreadFilter current = enumerator1.Current;
                int num3 = 2;
                if (true)
                  goto label_4;
label_3:
                bool flag2 = current.CheckField(asset);
                goto label_6;
label_4:
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                    case 2:
                      goto label_3;
                    case 1:
                    case 3:
                      goto label_6;
                    case 4:
                      goto label_24;
                    default:
                      num3 = 3;
                      continue;
                  }
                }
label_6:
                if (flag2)
                {
                  flag1 = true;
                  if (RefThreadFilter.ExcludeManager())
                  {
                    num3 = 4;
                    goto label_4;
                  }
                  else
                    goto label_24;
                }
              }
            }
            finally
            {
              enumerator1.Dispose();
            }
            enumerator2 = this._Serializer.GetEnumerator();
            goto case 0;
          case 3:
            enumerator1 = this.issuer.GetEnumerator();
            num1 = 4;
            continue;
          case 5:
            goto label_24;
          default:
            num1 = 0;
            continue;
        }
      }
label_24:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void FlushField(RefThreadFilter task, bool isord)
    {
      this.indexer = isord ? (RefThreadFilter) null : task;
      foreach (RefThreadFilter refThreadFilter in this.issuer)
      {
        int num = 2;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
              goto label_3;
            case 1:
            case 3:
              goto label_6;
            default:
              num = 3;
              continue;
          }
        }
label_3:
        refThreadFilter.FlushField(this, false);
label_6:;
      }
    }

    internal static bool ExcludeManager() => true;

    internal static bool ConcatManager() => false;
  }
}
