// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.StackFrameHelper
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.Shared;
using SmartAssembly.Zip;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System.Xml;
using Ⴈ;

namespace SmartAssembly.SmartExceptionsCore
{
  public class StackFrameHelper
  {
    public const string DataEntryName = "SmartStackFrames";

    public static void CreateException0(Exception exception)
    {
      try
      {
        StackFrameHelper.CreateExceptionN(exception, new object[0]);
      }
      catch (Exception ex)
      {
        Exception o1 = exception;
        StackFrameHelper.CreateException1(ex, (object) o1);
        throw;
      }
    }

    public static void CreateException1(Exception exception, object o1)
    {
      object[] objArray;
      try
      {
        Exception caughtException = exception;
        objArray = new object[1]{ o1 };
        object[] objects = objArray;
        StackFrameHelper.CreateExceptionN(caughtException, objects);
      }
      catch (Exception ex)
      {
        object[] o1_1 = objArray;
        Exception o2 = exception;
        object o3 = o1;
        StackFrameHelper.CreateException3(ex, (object) o1_1, (object) o2, o3);
        throw;
      }
    }

    public static void CreateException2(Exception exception, object o1, object o2)
    {
      object[] objArray;
      try
      {
        Exception caughtException = exception;
        objArray = new object[2]{ o1, o2 };
        object[] objects = objArray;
        StackFrameHelper.CreateExceptionN(caughtException, objects);
      }
      catch (Exception ex)
      {
        object[] o1_1 = objArray;
        Exception o2_1 = exception;
        object o3 = o1;
        object o4 = o2;
        StackFrameHelper.CreateException4(ex, (object) o1_1, (object) o2_1, o3, o4);
        throw;
      }
    }

    public static void CreateException3(Exception exception, object o1, object o2, object o3)
    {
      object[] objArray;
      try
      {
        Exception caughtException = exception;
        objArray = new object[3]{ o1, o2, o3 };
        object[] objects = objArray;
        StackFrameHelper.CreateExceptionN(caughtException, objects);
      }
      catch (Exception ex)
      {
        object[] o1_1 = objArray;
        Exception o2_1 = exception;
        object o3_1 = o1;
        object o4 = o2;
        object o5 = o3;
        StackFrameHelper.CreateException5(ex, (object) o1_1, (object) o2_1, o3_1, o4, o5);
        throw;
      }
    }

    public static void CreateException4(
      Exception exception,
      object o1,
      object o2,
      object o3,
      object o4)
    {
      object[] objArray;
      try
      {
        Exception caughtException = exception;
        objArray = new object[4]{ o1, o2, o3, o4 };
        object[] objects = objArray;
        StackFrameHelper.CreateExceptionN(caughtException, objects);
      }
      catch (Exception ex)
      {
        object[] o1_1 = objArray;
        Exception o2_1 = exception;
        object o3_1 = o1;
        object o4_1 = o2;
        object o5 = o3;
        object o6 = o4;
        StackFrameHelper.CreateException6(ex, (object) o1_1, (object) o2_1, o3_1, o4_1, o5, o6);
        throw;
      }
    }

    public static void CreateException5(
      Exception exception,
      object o1,
      object o2,
      object o3,
      object o4,
      object o5)
    {
      object[] objArray;
      try
      {
        Exception caughtException = exception;
        objArray = new object[5]{ o1, o2, o3, o4, o5 };
        object[] objects = objArray;
        StackFrameHelper.CreateExceptionN(caughtException, objects);
      }
      catch (Exception ex)
      {
        object[] o1_1 = objArray;
        Exception o2_1 = exception;
        object o3_1 = o1;
        object o4_1 = o2;
        object o5_1 = o3;
        object o6 = o4;
        object o7 = o5;
        StackFrameHelper.CreateException7(ex, (object) o1_1, (object) o2_1, o3_1, o4_1, o5_1, o6, o7);
        throw;
      }
    }

    public static void CreateException6(
      Exception exception,
      object o1,
      object o2,
      object o3,
      object o4,
      object o5,
      object o6)
    {
      object[] objArray;
      try
      {
        Exception caughtException = exception;
        objArray = new object[6]{ o1, o2, o3, o4, o5, o6 };
        object[] objects = objArray;
        StackFrameHelper.CreateExceptionN(caughtException, objects);
      }
      catch (Exception ex)
      {
        object[] o1_1 = objArray;
        Exception o2_1 = exception;
        object o3_1 = o1;
        object o4_1 = o2;
        object o5_1 = o3;
        object o6_1 = o4;
        object o7 = o5;
        object o8 = o6;
        StackFrameHelper.CreateException8(ex, (object) o1_1, (object) o2_1, o3_1, o4_1, o5_1, o6_1, o7, o8);
        throw;
      }
    }

    public static void CreateException7(
      Exception exception,
      object o1,
      object o2,
      object o3,
      object o4,
      object o5,
      object o6,
      object o7)
    {
      object[] objArray;
      try
      {
        Exception caughtException = exception;
        objArray = new object[7]
        {
          o1,
          o2,
          o3,
          o4,
          o5,
          o6,
          o7
        };
        object[] objects = objArray;
        StackFrameHelper.CreateExceptionN(caughtException, objects);
      }
      catch (Exception ex)
      {
        object[] o1_1 = objArray;
        Exception o2_1 = exception;
        object o3_1 = o1;
        object o4_1 = o2;
        object o5_1 = o3;
        object o6_1 = o4;
        object o7_1 = o5;
        object o8 = o6;
        object o9 = o7;
        StackFrameHelper.CreateException9(ex, (object) o1_1, (object) o2_1, o3_1, o4_1, o5_1, o6_1, o7_1, o8, o9);
        throw;
      }
    }

    public static void CreateException8(
      Exception exception,
      object o1,
      object o2,
      object o3,
      object o4,
      object o5,
      object o6,
      object o7,
      object o8)
    {
      object[] objArray;
      try
      {
        Exception caughtException = exception;
        objArray = new object[8]
        {
          o1,
          o2,
          o3,
          o4,
          o5,
          o6,
          o7,
          o8
        };
        object[] objects = objArray;
        StackFrameHelper.CreateExceptionN(caughtException, objects);
      }
      catch (Exception ex)
      {
        object[] o1_1 = objArray;
        Exception o2_1 = exception;
        object o3_1 = o1;
        object o4_1 = o2;
        object o5_1 = o3;
        object o6_1 = o4;
        object o7_1 = o5;
        object o8_1 = o6;
        object o9 = o7;
        object o10 = o8;
        StackFrameHelper.CreateException10(ex, (object) o1_1, (object) o2_1, o3_1, o4_1, o5_1, o6_1, o7_1, o8_1, o9, o10);
        throw;
      }
    }

    public static void CreateException9(
      Exception exception,
      object o1,
      object o2,
      object o3,
      object o4,
      object o5,
      object o6,
      object o7,
      object o8,
      object o9)
    {
      object[] objArray;
      try
      {
        Exception caughtException = exception;
        objArray = new object[9]
        {
          o1,
          o2,
          o3,
          o4,
          o5,
          o6,
          o7,
          o8,
          o9
        };
        object[] objects = objArray;
        StackFrameHelper.CreateExceptionN(caughtException, objects);
      }
      catch (Exception ex)
      {
        object[] objects = new object[11]
        {
          (object) objArray,
          (object) exception,
          o1,
          o2,
          o3,
          o4,
          o5,
          o6,
          o7,
          o8,
          o9
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public static void CreateException10(
      Exception exception,
      object o1,
      object o2,
      object o3,
      object o4,
      object o5,
      object o6,
      object o7,
      object o8,
      object o9,
      object o10)
    {
      object[] objArray;
      try
      {
        Exception caughtException = exception;
        objArray = new object[10]
        {
          o1,
          o2,
          o3,
          o4,
          o5,
          o6,
          o7,
          o8,
          o9,
          o10
        };
        object[] objects = objArray;
        StackFrameHelper.CreateExceptionN(caughtException, objects);
      }
      catch (Exception ex)
      {
        object[] objects = new object[12]
        {
          (object) objArray,
          (object) exception,
          o1,
          o2,
          o3,
          o4,
          o5,
          o6,
          o7,
          o8,
          o9,
          o10
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public static void CreateExceptionN(Exception caughtException, object[] objects)
    {
      int Ⴓ;
      int Ⴐ;
      int Ⴄ;
      StackTrace stackTrace;
      int num1;
      char[] chArray1;
      string[] strArray1;
      string[] strArray2;
      int index;
      string str1;
      int num2;
      StackFrame stackFrame;
      int num3;
      SmartStackFrame smartStackFrame;
      LinkedList<object> linkedList;
      try
      {
        Ⴓ = -1;
        Ⴐ = -1;
        Ⴄ = 0;
        stackTrace = new StackTrace(caughtException);
        try
        {
          num1 = 10;
          while (true)
          {
            switch (num1)
            {
              case 0:
                num1 = 3;
                continue;
              case 1:
                goto label_13;
              case 2:
                str1 = strArray2[index];
                num1 = AppPathFinder.Ⴐ(str1, 940, 923) <= 0 ? 5 : 8;
                continue;
              case 3:
                num1 = index < strArray2.Length ? 2 : 1;
                continue;
              case 5:
                ++index;
                num1 = 3;
                continue;
              case 6:
                string str2 = ႳႳ.Ⴀ(caughtException, 512, 610);
                chArray1 = new char[2]{ '\r', '\n' };
                char[] chArray2 = chArray1;
                strArray1 = SendingReportFeedbackEventArgs1.Ⴀ(str2, chArray2, 31, 2);
                num1 = 7;
                continue;
              case 7:
                strArray2 = strArray1;
                index = 0;
                goto case 0;
              case 8:
                ++Ⴄ;
                num1 = 5;
                continue;
              default:
                num1 = ႳႳ.Ⴀ(caughtException, 900, 998) == null ? 1 : 6;
                continue;
            }
          }
        }
        catch
        {
          Ⴄ = -1;
        }
label_13:
        try
        {
          num2 = 3;
          while (true)
          {
            switch (num2)
            {
              case 0:
                stackFrame = DoNotEncodeStringsAttribute.Ⴃ(stackTrace, ႳႤ.Ⴀ(stackTrace, 882, 893) - 1, 266, 337);
                goto case 7;
              case 1:
              case 6:
                Ⴓ = (SmartAssembly.SmartUsageCore.ReportUsageAttribute.Ⴃ((MemberInfo) DESCryptoIndirector.Ⴅ(stackFrame, 295, 306), 949, 930) & 16777215) - 1;
                num2 = 8;
                continue;
              case 2:
                goto label_22;
              case 7:
                num2 = 1;
                continue;
              case 8:
                Ⴐ = Ⴈ.Ⴐ.ႥႳ(stackFrame, 1008, 952);
                num2 = 2;
                continue;
              default:
                num2 = ႳႤ.Ⴀ(stackTrace, 928, 943) <= 0 ? 2 : 0;
                continue;
            }
          }
        }
        catch
        {
        }
label_22:
        try
        {
          num3 = 4;
          while (true)
          {
            switch (num3)
            {
              case 2:
              case 5:
                linkedList = (LinkedList<object>) caughtException.Data[(object) Ⴈ.ႳႷ.Ⴗ(2059790589, 6)];
                num3 = 7;
                continue;
              case 6:
                linkedList = new LinkedList<object>();
                caughtException.Data[(object) Ⴈ.ႳႷ.Ⴗ(2059790584, 3)] = (object) linkedList;
                num3 = 7;
                continue;
              case 7:
                goto label_27;
              default:
                smartStackFrame = new SmartStackFrame(Ⴓ, objects, Ⴐ, Ⴄ);
                num3 = Ⴈ.Ⴜ.Ⴅ(caughtException, 620, 537).Contains((object) Ⴈ.ႳႷ.Ⴗ(2059790589, 6)) ? 5 : 6;
                continue;
            }
          }
label_27:
          linkedList.AddLast((object) smartStackFrame);
        }
        catch
        {
        }
        switch (0)
        {
        }
      }
      catch (Exception ex)
      {
        int num4;
        object[] objects1 = new object[18]
        {
          (object) Ⴓ,
          (object) Ⴐ,
          (object) Ⴄ,
          (object) stackTrace,
          (object) strArray1,
          (object) str1,
          (object) stackFrame,
          (object) smartStackFrame,
          (object) linkedList,
          (object) chArray1,
          (object) strArray2,
          (object) index,
          (object) num1,
          (object) num2,
          (object) num3,
          (object) num4,
          (object) caughtException,
          (object) objects
        };
        StackFrameHelper.CreateExceptionN(ex, objects1);
        throw;
      }
    }

    public StackFrameHelper()
    {
      try
      {
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    static StackFrameHelper()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static string[] Ⴓ([In] string obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 116:
            num2 = 2;
            break;
          default:
            num2 = 7;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
            case 5:
              goto label_8;
            case 1:
              num1 = 4;
              continue;
            case 4:
              goto label_3;
            case 7:
              num1 = 4;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (StackFrameHelper.Ⴓ);
              num1 = 4;
              continue;
          }
        }
label_8:
        return Directory.GetDirectories(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static void Ⴀ(
      [In] Graphics obj0,
      [In] Image obj1,
      [In] Rectangle obj2,
      [In] Rectangle obj3,
      [In] GraphicsUnit obj4,
      [In] int obj5,
      [In] int obj6)
    {
      int num1;
      try
      {
        num1 = 4;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 2:
            case 5:
              goto label_7;
            case 3:
              num1 = 4;
              continue;
            default:
              int num2;
              switch (obj6 ^ obj5)
              {
                case 66:
                  num2 = 2;
                  break;
                default:
                  num2 = 3;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.DrawImage(obj1, obj2, obj3, obj4);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Graphics o3 = obj0;
        Image o4 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<Rectangle> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<Rectangle> o6 = (ValueType) obj3;
        // ISSUE: variable of a boxed type
        __Boxed<GraphicsUnit> o7 = (Enum) obj4;
        // ISSUE: variable of a boxed type
        __Boxed<int> o8 = (ValueType) obj5;
        // ISSUE: variable of a boxed type
        __Boxed<int> o9 = (ValueType) obj6;
        StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9);
        throw;
      }
    }

    internal static void Ⴅ([In] XmlWriter obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
        num1 = 3;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 2:
            case 5:
              goto label_7;
            case 4:
              num1 = 3;
              continue;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 66:
                  num2 = 1;
                  break;
                case 67:
                  goto label_8;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.WriteEndElement();
        return;
label_8:
        obj0.Flush();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        XmlWriter o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static string Ⴐ([In] ref Guid obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 19:
            num2 = 2;
            break;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 2:
            case 4:
              goto label_8;
            case 3:
            case 7:
              goto label_3;
            case 5:
              num1 = 7;
              continue;
            case 6:
              num1 = 7;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (StackFrameHelper.Ⴐ);
              num1 = 7;
              continue;
          }
        }
label_8:
        return obj0.ToString(obj1);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<Guid> o2 = (ValueType) obj0;
        string o3 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴈ
    {
      internal Label Ⴀ;
      internal PictureBox Ⴅ;
      internal ToolTip Ⴈ;
      internal float Ⴃ;
      internal float Ⴐ;
    }
  }
}
