// Decompiled with JetBrains decompiler
// Type: Nskougj41ajjwi4dtqj5drevqotiurz31
// Assembly: insomnia Protected, Version=2.85.3713.0, Culture=neutral, PublicKeyToken=null
// MVID: 6DA4526A-29FB-4810-93B0-67FB8AF0ADD1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan.MSIL.Pakes.gb-2294a7fac87fa42d08c0288fa687473a785c2e1f975761517fa65de9332f4eba.exe

using System;

public class Nskougj41ajjwi4dtqj5drevqotiurz31
{
  private bool _tainted;
  private bool _target;
  public bool IsCleanUntaintTreatmentMethod;

  public static double DateDiff(string datePart, DateTime startDate, DateTime endDate)
  {
    TimeSpan timeSpan1 = endDate - startDate;
    TimeSpan timeSpan2 = endDate - startDate;
    int month1 = startDate.Month;
    int month2 = endDate.Month;
    int year1 = startDate.Year;
    int year2 = endDate.Year;
    double num1 = (double) (month2 - month1);
    double num2 = (double) (year2 - year1);
    double num3 = num1 + num2 * 12.0;
    switch (datePart.ToUpper())
    {
      case "WW":
      case "DW":
        return (double) Nskougj41ajjwi4dtqj5drevqotiurz31.GetWeeks(startDate, endDate);
      case "MM":
        return num3;
      case "YY":
      case "YYYY":
        return num2;
      case "QQ":
      case "QQQQ":
        return Math.Ceiling((double) timeSpan2.Days / 90.0);
      case "MI":
      case "N":
        return timeSpan2.TotalMinutes;
      case "HH":
        return timeSpan2.TotalHours;
      case "SS":
        return timeSpan2.TotalSeconds;
      case "MS":
        return timeSpan2.TotalMilliseconds;
      default:
        return (double) timeSpan2.Days;
    }
  }

  public bool IsClean => !this.IsTainted;

  public static double CalculateBDay(
    DateTime startDate,
    DateTime EndDate,
    int NoOfDayWeek,
    int DayType)
  {
    TimeSpan timeSpan = EndDate - startDate;
    double num = (Nskougj41ajjwi4dtqj5drevqotiurz31.DateDiff("ww", startDate, EndDate) - 1.0) * (double) NoOfDayWeek + (NoOfDayWeek != 5 ? (double) (7 - startDate.DayOfWeek) : (startDate.DayOfWeek != DayOfWeek.Saturday ? (double) (7 - startDate.DayOfWeek - 1) : (double) (7 - startDate.DayOfWeek))) + (NoOfDayWeek != 5 ? (double) (EndDate.DayOfWeek - 1) : (EndDate.DayOfWeek != DayOfWeek.Saturday ? (double) (EndDate.DayOfWeek - 1) : (double) (EndDate.DayOfWeek - 2)));
    return DayType == 0 ? num : (double) timeSpan.Days - num;
  }

  public bool IsTainted => this._tainted;

  public static int GetWeeks(DateTime stdate, DateTime eddate)
  {
    TimeSpan timeSpan = eddate - stdate;
    if (timeSpan.Days < 7)
      return stdate.DayOfWeek > eddate.DayOfWeek ? 1 : 0;
    int num1 = (int) (timeSpan.Days - 7 + stdate.DayOfWeek);
    int num2 = 0;
    int weeks = 1;
    while (num2 < num1)
    {
      num2 += 7;
      ++weeks;
    }
    if (weeks > 1 && eddate.DayOfWeek != DayOfWeek.Sunday)
      --weeks;
    return weeks;
  }

  public static byte[] xor_data(byte[] pre_xor_data)
  {
    byte[] numArray = new byte[pre_xor_data.Length];
    for (int index = 0; index < pre_xor_data.Length; ++index)
      numArray[index] = (byte) ((uint) pre_xor_data[index] ^ 169U);
    return numArray;
  }
}
