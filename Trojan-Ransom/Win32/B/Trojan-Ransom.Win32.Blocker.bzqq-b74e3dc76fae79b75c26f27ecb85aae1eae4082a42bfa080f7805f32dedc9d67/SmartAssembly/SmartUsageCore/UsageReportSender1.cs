// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartUsageCore.UsageReportSender1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.SmartExceptionsCore;
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Xml;

namespace SmartAssembly.SmartUsageCore
{
  public class UsageReportSender1 : ReportSender3
  {
    private UsageCounts1 m_UsageCounts;
    private byte[] m_ReportData;

    public UsageReportSender1(UsageCounts1 usageCounts)
    {
      try
      {
        this.m_UsageCounts = usageCounts;
      }
      catch (Exception ex)
      {
        UsageCounts1 o2 = usageCounts;
        StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
        throw;
      }
    }

    private void GenerateReportData()
    {
      UsageCounts1 usageCounts;
      ulong[] staticFeatureCounts;
      Dictionary<string, ulong> dynamicFeatureCounts;
      MemoryStream w;
      XmlWriter xmlWriter1;
      XmlElementSpanner1 xmlElementSpanner1_1;
      DateTime now;
      Guid guid1;
      WindowsIdentity current;
      SecurityIdentifier user;
      MD5CryptoServiceProvider cryptoServiceProvider;
      Guid guid2;
      string str1;
      XmlElementSpanner1 xmlElementSpanner1_2;
      XmlElementSpanner1 xmlElementSpanner1_3;
      int index;
      XmlElementSpanner1 xmlElementSpanner1_4;
      KeyValuePair<string, ulong> keyValuePair1;
      ulong num;
      try
      {
        usageCounts = this.m_UsageCounts;
        this.m_UsageCounts = (UsageCounts1) null;
        if (this.m_ReportData != null || usageCounts == null || usageCounts.IsEmpty)
          return;
        staticFeatureCounts = usageCounts.StaticFeatureCounts;
        dynamicFeatureCounts = usageCounts.DynamicFeatureCounts;
        w = new MemoryStream();
        xmlWriter1 = (XmlWriter) new XmlTextWriter((Stream) w, (Encoding) new UTF8Encoding(false));
        xmlWriter1.WriteStartDocument();
        xmlElementSpanner1_1 = new XmlElementSpanner1(xmlWriter1, "UsageReport");
        try
        {
          xmlWriter1.WriteAttributeString("AssemblyID", "{FA0844EB-EF82-404C-B76C-C092ABDB9392}".ToUpper());
          XmlWriter xmlWriter2 = xmlWriter1;
          now = DateTime.Now;
          string str2 = now.ToString("s");
          xmlWriter2.WriteAttributeString("DateTime", str2);
          XmlWriter xmlWriter3 = xmlWriter1;
          guid1 = Guid.NewGuid();
          string str3 = guid1.ToString("B");
          xmlWriter3.WriteAttributeString("ReportID", str3);
          current = WindowsIdentity.GetCurrent();
          user = current.User;
          cryptoServiceProvider = new MD5CryptoServiceProvider();
          try
          {
            guid2 = new Guid(cryptoServiceProvider.ComputeHash(Encoding.Unicode.GetBytes(user.ToString())));
            str1 = guid2.ToString();
          }
          finally
          {
            cryptoServiceProvider?.Dispose();
          }
          xmlWriter1.WriteAttributeString("UserID", str1);
          xmlElementSpanner1_2 = new XmlElementSpanner1(xmlWriter1, "AssemblyIDs");
          try
          {
            xmlWriter1.WriteAttributeString("Count", "-1");
          }
          finally
          {
            xmlElementSpanner1_2?.Dispose();
          }
          xmlElementSpanner1_3 = new XmlElementSpanner1(xmlWriter1, "Features");
          try
          {
            for (index = 0; index < staticFeatureCounts.Length; ++index)
            {
              if (staticFeatureCounts[index] > 0UL)
              {
                xmlWriter1.WriteStartElement("Feature");
                xmlWriter1.WriteAttributeString("Id", index.ToString());
                xmlWriter1.WriteAttributeString("Count", staticFeatureCounts[index].ToString());
                xmlWriter1.WriteEndElement();
              }
            }
          }
          finally
          {
            xmlElementSpanner1_3?.Dispose();
          }
          xmlElementSpanner1_4 = new XmlElementSpanner1(xmlWriter1, "DynamicFeatures");
          try
          {
            foreach (KeyValuePair<string, ulong> keyValuePair2 in dynamicFeatureCounts)
            {
              keyValuePair1 = keyValuePair2;
              if (keyValuePair1.Value > 0UL)
              {
                xmlWriter1.WriteStartElement("Feature");
                xmlWriter1.WriteAttributeString("Name", keyValuePair1.Key);
                XmlWriter xmlWriter4 = xmlWriter1;
                num = keyValuePair1.Value;
                string str4 = num.ToString();
                xmlWriter4.WriteAttributeString("Count", str4);
                xmlWriter1.WriteEndElement();
              }
            }
          }
          finally
          {
            xmlElementSpanner1_4?.Dispose();
          }
        }
        finally
        {
          xmlElementSpanner1_1?.Dispose();
        }
        xmlWriter1.WriteEndDocument();
        xmlWriter1.Flush();
        w.Flush();
        this.m_ReportData = w.ToArray();
      }
      catch (Exception ex)
      {
        Dictionary<string, ulong>.Enumerator enumerator;
        object[] objects = new object[21]
        {
          (object) usageCounts,
          (object) staticFeatureCounts,
          (object) dynamicFeatureCounts,
          (object) w,
          (object) xmlWriter1,
          (object) current,
          (object) user,
          (object) str1,
          (object) cryptoServiceProvider,
          (object) index,
          (object) keyValuePair1,
          (object) xmlElementSpanner1_1,
          (object) now,
          (object) guid1,
          (object) guid2,
          (object) xmlElementSpanner1_2,
          (object) xmlElementSpanner1_3,
          (object) xmlElementSpanner1_4,
          (object) enumerator,
          (object) num,
          (object) this
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public void SendReport()
    {
      try
      {
        if (this.m_UsageCounts == null)
          this.m_UsageCounts = UsageCountStore1.GetAllUsageCountsAndReset();
        this.GenerateReportData();
        this.SendReport(this.m_ReportData, ReportSender3.NotificationEmailSettings.NullEmailSettings);
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }
  }
}
