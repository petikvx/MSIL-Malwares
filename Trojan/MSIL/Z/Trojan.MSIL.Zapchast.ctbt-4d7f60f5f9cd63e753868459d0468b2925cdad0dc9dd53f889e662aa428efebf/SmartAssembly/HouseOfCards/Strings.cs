// Decompiled with JetBrains decompiler
// Type: SmartAssembly.HouseOfCards.Strings
// Assembly: Crypter, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B731B599-442F-4A0A-B652-36FDF3199CF1
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.MSIL.Zapchast.ctbt-4d7f60f5f9cd63e753868459d0468b2925cdad0dc9dd53f889e662aa428efebf.exe

using \u0002;
using \u0007;
using SmartAssembly.Delegates;
using System;
using System.Reflection;
using System.Reflection.Emit;

namespace SmartAssembly.HouseOfCards
{
  public static class Strings
  {
    [\u0001]
    public static void CreateGetStringDelegate(Type ownerType)
    {
      Type[] typeArray1;
      DynamicMethod dynamicMethod1;
      ILGenerator ilGenerator1;
      MethodInfo[] methods;
      int index1;
      MethodInfo meth;
      FieldInfo fieldInfo1;
      int index2;
      FieldInfo[] fields;
      try
      {
        fields = ownerType.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
        for (index2 = 0; index2 < fields.Length; ++index2)
        {
          fieldInfo1 = fields[index2];
          try
          {
            if ((object) fieldInfo1.FieldType == (object) typeof (GetString))
            {
              string empty = string.Empty;
              Type returnType = typeof (string);
              typeArray1 = new Type[1]{ typeof (int) };
              Type[] parameterTypes = typeArray1;
              Module module = ownerType.Module;
              dynamicMethod1 = new DynamicMethod(empty, returnType, parameterTypes, module, true);
              ilGenerator1 = dynamicMethod1.GetILGenerator();
              ilGenerator1.Emit(OpCodes.Ldarg_0);
              methods = typeof (\u000F.\u0002).GetMethods(BindingFlags.Static | BindingFlags.Public);
              for (index1 = 0; index1 < methods.Length; ++index1)
              {
                meth = methods[index1];
                if ((object) meth.ReturnType == (object) typeof (string))
                {
                  ilGenerator1.Emit(OpCodes.Ldc_I4, fieldInfo1.MetadataToken & 16777215);
                  ilGenerator1.Emit(OpCodes.Sub);
                  ilGenerator1.Emit(OpCodes.Call, meth);
                  break;
                }
              }
              ilGenerator1.Emit(OpCodes.Ret);
              fieldInfo1.SetValue((object) null, (object) dynamicMethod1.CreateDelegate(typeof (GetString)));
              break;
            }
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
        FieldInfo fieldInfo2 = fieldInfo1;
        DynamicMethod dynamicMethod2 = dynamicMethod1;
        ILGenerator ilGenerator2 = ilGenerator1;
        MethodInfo methodInfo = meth;
        FieldInfo[] fieldInfoArray = fields;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) index2;
        Type[] typeArray2 = typeArray1;
        MethodInfo[] methodInfoArray = methods;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) index1;
        Type type = ownerType;
        \u0003.\u0001(ex, (object) fieldInfo2, (object) dynamicMethod2, (object) ilGenerator2, (object) methodInfo, (object) fieldInfoArray, (object) local1, (object) typeArray2, (object) methodInfoArray, (object) local2, (object) type);
        throw;
      }
    }
  }
}
