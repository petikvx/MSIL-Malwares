// Decompiled with JetBrains decompiler
// Type:  
// Assembly: CustomQueryInterfaceResult, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C313905-EBD1-4523-EACC-B48B0BED3910
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Crypt.gen-1b49da172b79de32c6df4e87385e57c0e3768b0b227b84cc38cd746b05200720.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Threading;

[StandardModule]
internal sealed class \u0003\u2002
{
  private static Thread \u0002;
  private static bool \u0003 = true;
  private static List<\u000E\u2003> \u0005 = new List<\u000E\u2003>();
  private static Queue<\u000E\u2003> \u0008 = new Queue<\u000E\u2003>();
  private static \u000F\u2000 \u0006;
  private static List<\u000F\u2000> \u000E = new List<\u000F\u2000>();
  private static bool \u000F = true;
  private static int \u0002\u2000;
  private static List<\u0003\u2002.\u0002> \u0003\u2000 = new List<\u0003\u2002.\u0002>(9);
  private static \u0003\u2002.\u0002 \u0005\u2000;
  private static List<\u0006\u2001> \u0008\u2000 = new List<\u0006\u2001>();
  private static \u0006\u2001 \u0006\u2000;
  private static int \u000E\u2000;
  private static int \u000F\u2000;
  private static \u0003\u2002.\u0003 \u0002\u2001 = (\u0003\u2002.\u0003) 0;
  private static string \u0003\u2001;
  private static ConsoleColor \u0005\u2001;
  private static ConsoleColor \u0008\u2001;
  private static TimeSpan \u0006\u2001;
  private static bool \u000E\u2001;
  private static bool \u000F\u2001;
  private static int \u0002\u2002;
  private static int \u0003\u2002 = -1;
  private static Random \u0005\u2002 = new Random();
  private static \u0003\u2004 \u0008\u2002;

  public static void \u0002()
  {
    Console.WriteLine(\u0006\u2004.\u0002(670552866));
    \u0003\u2002.\u0005\u2001 = Console.ForegroundColor;
    \u0003\u2002.\u0008\u2001 = Console.BackgroundColor;
    switch (\u0006\u2003.\u0002())
    {
      case \u0006\u2003.\u0002.Windows:
        \u0003\u2002.\u0003\u2001 = \u0006\u2004.\u0002(670552858);
        break;
      case \u0006\u2003.\u0002.Mac:
        \u0003\u2002.\u0003\u2001 = \u0006\u2004.\u0002(670552845);
        break;
      default:
        \u0003\u2002.\u0003\u2001 = \u0006\u2004.\u0002(670552827);
        break;
    }
    \u0003\u2002.\u0008\u2002 = new \u0003\u2004(\u0003\u2002.\u0003\u2001);
    \u0008\u2004.\u0002();
    \u0003\u2002.\u0005();
    if (Console.WindowWidth < 94 || Console.WindowHeight < 42)
    {
      Console.WriteLine();
      Console.ForegroundColor = ConsoleColor.Red;
      Console.WriteLine(\u0006\u2004.\u0002(670552787));
      Console.ForegroundColor = ConsoleColor.White;
      Console.WriteLine(\u0006\u2004.\u0002(670552749));
      Console.WriteLine(string.Format(\u0006\u2004.\u0002(670552648), (object) Console.WindowWidth, Console.WindowWidth >= 94 ? (object) \u0006\u2004.\u0002(670553555) : (object) \u0006\u2004.\u0002(670553579), (object) Console.WindowHeight, Console.WindowHeight >= 42 ? (object) \u0006\u2004.\u0002(670553555) : (object) \u0006\u2004.\u0002(670553579)));
      \u0003\u2002.\u0002\u2000();
    }
    \u0003\u2002.\u0002 = new Thread(new ThreadStart(\u0003\u2002.\u0008\u2000));
    \u0003\u2002.\u0002.Start();
    Console.CursorVisible = false;
    do
    {
      Thread.Sleep(100);
    }
    while (!Console.KeyAvailable);
  }

  private static void \u0003()
  {
  }

  private static void \u0005()
  {
  }

  private static void \u0008()
  {
    \u0003\u2002.\u0003 = true;
    \u0003\u2002.\u000E();
    \u0003\u2002.\u0006();
    Console.BackgroundColor = ConsoleColor.Black;
    Console.ForegroundColor = ConsoleColor.Gray;
    Console.Title = \u0006\u2004.\u0002(670553560);
    \u0003\u2002.\u0002\u2002 = 0;
    \u0003\u2002.\u0003\u2002 = -1;
    \u0003\u2002.\u0002\u2000 = 3;
    \u0003\u2002.\u0002\u2001 = (\u0003\u2002.\u0003) 0;
    \u0003\u2002.\u000F();
    \u0003\u2002.\u0003();
    \u0003\u2002.\u0003\u2001();
    \u0003\u2002.\u0003 = false;
  }

  private static void \u0006()
  {
    \u000E\u2003 obj = new \u000E\u2003(checked ((int) Math.Round(unchecked ((double) Console.WindowWidth / 2.0 - 1.0))), checked ((int) Math.Round(unchecked ((double) Console.WindowHeight / 2.0))), (\u000E\u2003.\u0002) 1, ConsoleColor.White);
    \u0003\u2002.\u0005.Clear();
    \u0003\u2002.\u0005.Add((\u000E\u2003) obj.Clone());
    \u0003\u2002.\u0005.Add((\u000E\u2003) obj.\u0002(ConsoleColor.Gray));
    List<\u000E\u2003> objList = \u0003\u2002.\u0005;
    Action<\u000E\u2003> action;
    if (\u0003\u2002.\u0005.\u0003 != null)
      action = \u0003\u2002.\u0005.\u0003;
    else
      \u0003\u2002.\u0005.\u0003 = action = new Action<\u000E\u2003>(\u0003\u2002.\u0005.\u0002._Lambda\u0024__32\u002D0);
    objList.ForEach(action);
    \u0003\u2002.\u000E.Clear();
    \u0003\u2002.\u0006 = (\u000F\u2000) null;
    \u0003\u2002.\u000F\u2000 = 0;
  }

  private static void \u000E()
  {
    \u0003\u2002.\u0008\u2000.Add(new \u0006\u2001(1, \u0006\u2004.\u0002(670553548), 5, 40, \u000F\u2001.\u0002()));
    \u0003\u2002.\u0008\u2000.Add(new \u0006\u2001(2, \u0006\u2004.\u0002(670553533), 15, 35, \u000F\u2001.\u0003()));
    \u0003\u2002.\u0008\u2000.Add(new \u0006\u2001(3, \u0006\u2004.\u0002(670553514), 20, 30, \u000F\u2001.\u0005()));
    \u0003\u2002.\u0008\u2000.Add(new \u0006\u2001(4, \u0006\u2004.\u0002(670553499), 25, 25, \u000F\u2001.\u0008(), '■'));
    \u0003\u2002.\u0008\u2000.Add(new \u0006\u2001(5, \u0006\u2004.\u0002(670553483), 40, 25, \u000F\u2001.\u0006(), '·'));
    \u0003\u2002.\u0008\u2000.Add(new \u0006\u2001(6, \u0006\u2004.\u0002(670553465), 60, 15, \u000F\u2001.\u0005()));
  }

  private static void \u000F()
  {
    Console.Clear();
    Size size = \u0003\u2002.\u0008\u2002.\u0002(Console.Title, string.Empty, 8f, 0.6);
    Console.SetCursorPosition(checked ((int) Math.Round(unchecked ((double) checked (Console.WindowWidth - 29) / 2.0 - (double) checked (size.Width + 2)))), 1);
    \u0005\u2000.\u0002();
    \u0003\u2002.\u0002(Console.Title, ConsoleColor.DarkCyan, ConsoleColor.Black, true, false, 0, 0, string.Empty, 9, 0.6, true);
    // ISSUE: variable of a compiler-generated type
    \u0003\u2000<int, string, ConsoleColor> obj;
    if (\u0003\u2002.\u0005.\u0005 != null)
      obj = \u0003\u2002.\u0005.\u0005;
    else
      \u0003\u2002.\u0005.\u0005 = obj = new \u0003\u2000<int, string, ConsoleColor>(\u0003\u2002.\u0005.\u0002._Lambda\u0024__34\u002D0);
    \u0003\u2002.\u0002((object) checked (size.Height + 3));
    int num1 = 0;
    int num2 = 1;
    while (true)
    {
      string[] strArray = new string[4]
      {
        \u0006\u2004.\u0002(670553431),
        string.Format(\u0006\u2004.\u0002(670553373), \u0003\u2002.\u000F ? (object) \u0006\u2004.\u0002(670553555) : (object) \u0006\u2004.\u0002(670553319)).PadRight(30),
        string.Format(\u0006\u2004.\u0002(670553327), \u0003\u2002.\u000F\u2001 ? (object) \u0006\u2004.\u0002(670553555) : (object) \u0006\u2004.\u0002(670553319)).PadRight(30),
        \u0006\u2004.\u0002(670553285).PadRight(30)
      };
      if (Operators.CompareString(Conversions.ToString(strArray[0][num1]), \u0006\u2004.\u0002(670553254), false) == 0)
        strArray[0] = strArray[0].Substring(0, num1) + \u0006\u2004.\u0002(670553263) + strArray[0].Substring(checked (num1 + 1));
      int num3 = num1;
      if (num3 == checked (strArray[0].Length - 1))
        num2 = -1;
      else if (num3 == 0)
        num2 = 1;
      checked { num1 += num2; }
      if (Console.KeyAvailable)
      {
        switch (Console.ReadKey(true).Key)
        {
          case ConsoleKey.Enter:
            goto label_16;
          case ConsoleKey.Escape:
            \u0003\u2002.\u0002\u2000();
            break;
          case ConsoleKey.E:
            \u0003\u2002.\u000F\u2001 = !\u0003\u2002.\u000F\u2001;
            break;
          case ConsoleKey.Y:
            \u0003\u2002.\u000F = !\u0003\u2002.\u000F;
            break;
        }
      }
      Thread.Sleep(30);
    }
label_16:
    Console.Clear();
  }

  private static void \u0002\u2000()
  {
    \u0003\u2002.\u0003();
    Console.Clear();
    Console.ForegroundColor = \u0003\u2002.\u0005\u2001;
    Console.BackgroundColor = \u0003\u2002.\u0008\u2001;
    Console.CursorVisible = true;
    Environment.Exit(0);
  }

  private static void \u0002(object _param0)
  {
    Console.ForegroundColor = ConsoleColor.Gray;
    int[][] numArray = new int[5][]
    {
      new int[3]{ 0, 3, 15 },
      new int[3]{ 6, 7, 14 },
      new int[3]{ 16, 14, 3 },
      new int[3]{ 30, 4, 7 },
      new int[3]{ 36, 99, 8 }
    };
    Console.BackgroundColor = ConsoleColor.Black;
  }

  private static void \u0003\u2000()
  {
    object Instance = (object) \u0003\u2002.\u0002(\u0006\u2004.\u0002(670553236), ConsoleColor.White, ConsoleColor.Red, true, true, 0, 0, string.Empty, 8, 0.6, true);
    object obj = Instance;
    \u0003\u2002.\u0002(obj != null ? (Size) obj : new Size(), Conversions.ToInteger(Operators.SubtractObject(Operators.DivideObject(Operators.SubtractObject((object) Console.WindowHeight, NewLateBinding.LateGet(Instance, (Type) null, \u0006\u2004.\u0002(670553220), new object[0], (string[]) null, (Type[]) null, (bool[]) null)), (object) 2), (object) 3)), ConsoleColor.Red);
    string str = \u0006\u2004.\u0002(670553225);
    Console.SetCursorPosition(checked ((int) Math.Round(unchecked ((double) checked (Console.WindowWidth - str.Length) / 2.0))), Conversions.ToInteger(Operators.AddObject(Operators.AddObject(Operators.DivideObject(Operators.SubtractObject((object) Console.WindowHeight, NewLateBinding.LateGet(Instance, (Type) null, \u0006\u2004.\u0002(670553220), new object[0], (string[]) null, (Type[]) null, (bool[]) null)), (object) 2), NewLateBinding.LateGet(Instance, (Type) null, \u0006\u2004.\u0002(670553220), new object[0], (string[]) null, (Type[]) null, (bool[]) null)), (object) 4)));
    Console.WriteLine(str);
    if (Console.ReadKey(true).Key == ConsoleKey.Escape)
      \u0003\u2002.\u0002\u2000();
    Console.Clear();
    \u0003\u2002.\u0003\u2001();
  }

  private static void \u0002(Size _param0, int _param1, ConsoleColor _param2)
  {
    string Left = \u0002\u2002.\u0002(\u0003\u2002.\u0002\u2001, \u0003\u2002.\u0005\u2002);
    if (Operators.CompareString(Left, string.Empty, false) == 0)
      return;
    Console.ForegroundColor = _param2;
    Console.SetCursorPosition(checked ((int) Math.Round(unchecked ((double) checked (Console.WindowWidth - _param0.Width) / 2.0))), checked (_param0.Height + 2 + _param1));
    Console.Write(\u0006\u2004.\u0002(670553192) + \u0006\u2004.\u0002(670553192).PadLeft(_param0.Width));
    Console.SetCursorPosition(checked ((int) Math.Round(unchecked ((double) checked (Console.WindowWidth - _param0.Width) / 2.0))), checked (_param0.Height + 3 + _param1));
    Console.Write(\u0006\u2004.\u0002(670553192) + \u0006\u2004.\u0002(670553192).PadLeft(_param0.Width));
    Console.SetCursorPosition(checked ((int) Math.Round(unchecked ((double) checked (Console.WindowWidth - _param0.Width) / 2.0))), checked (_param0.Height + 4 + _param1));
    Console.Write(\u0006\u2004.\u0002(670553169) + Strings.StrDup(checked (_param0.Width - 1), \u0006\u2004.\u0002(670553254)) + \u0006\u2004.\u0002(670553158));
    Console.ForegroundColor = ConsoleColor.White;
    Console.SetCursorPosition(checked ((int) Math.Round(unchecked ((double) checked (Console.WindowWidth - Left.Length) / 2.0))), checked (_param0.Height + 3 + _param1));
    Console.Write(Left);
  }

  private static void \u0005\u2000()
  {
    string str1 = \u0003\u2002.\u0006\u2000.\u0002();
    string str2 = string.Format(\u0006\u2004.\u0002(670553167), (object) \u0003\u2002.\u0006\u2000.\u0005());
    Thread.Sleep(500);
    \u0003\u2002.\u0002(\u0003\u2002.\u0002(str1, ConsoleColor.White, ConsoleColor.Blue, true, false, 0, 2, string.Empty, 8, 0.6, true), 0, ConsoleColor.Blue);
    Size size = \u0003\u2002.\u0008\u2002.\u0002(str2, string.Empty, 8f, 0.6);
    \u0003\u2002.\u0002(str2, ConsoleColor.White, ConsoleColor.DarkGreen, true, false, 0, checked (Console.WindowHeight - size.Height + 1), string.Empty, 6, 0.7, true);
    \u0003\u2002.\u000E\u2001();
    int num = 1;
    do
    {
      \u0003\u2002.\u0002(checked (4 - num).ToString(), ConsoleColor.Red, ConsoleColor.Black, true, true, 0, 1, string.Empty, 7, 0.6, true);
      Thread.Sleep(1000);
      checked { ++num; }
    }
    while (num <= 3);
    \u0003\u2002.\u0002\u2001 = (\u0003\u2002.\u0003) 0;
    Console.Clear();
    \u0003\u2002.\u0003\u2001();
    \u0003\u2002.\u0002(true);
    \u0003\u2002.\u0002\u2001();
    \u0003\u2002.\u000F\u2001();
  }

  private static Size \u0002(
    string _param0,
    ConsoleColor _param1,
    ConsoleColor _param2,
    bool _param3,
    bool _param4,
    int _param5,
    int _param6,
    string _param7,
    int _param8,
    double _param9,
    bool _param10)
  {
    if (Operators.CompareString(_param7, string.Empty, false) == 0)
      _param7 = \u0003\u2002.\u0003\u2001;
    Size size = \u0003\u2002.\u0008\u2002.\u0002(_param0, _param7, (float) _param8, _param9);
    _param5 = _param3 ? checked (unchecked (checked (Console.WindowWidth - size.Width) / 2) + _param5) : _param5;
    _param6 = _param4 ? checked (unchecked (checked (Console.WindowHeight - size.Height) / 2) + _param6) : _param6;
    \u0003\u2002.\u0003 = true;
    Console.BackgroundColor = _param2;
    try
    {
      object obj1;
      if (!_param10)
      {
        obj1 = (object) \u0006\u2004.\u0002(670560439);
      }
      else
      {
        obj1 = (object) new string[5];
        obj1[0] = (object) \u0006\u2004.\u0002(670560740);
        obj1[1] = (object) \u0006\u2004.\u0002(670560740);
        obj1[2] = (object) \u0006\u2004.\u0002(670560673);
        obj1[3] = (object) \u0006\u2004.\u0002(670560662);
        obj1[4] = (object) \u0006\u2004.\u0002(670560439);
      }
      foreach (object obj2 in (IEnumerable) obj1)
      {
        char ch = Conversions.ToChar(obj2);
        int num1 = _param6;
        int num2 = checked (_param6 + size.Height - 1);
        int top = num1;
        while (top <= num2)
        {
          Console.SetCursorPosition(_param5, top);
          int num3 = checked (_param5 - unchecked (size.Width / 2));
          int num4 = checked (_param5 + unchecked (size.Width / 2));
          int num5 = num3;
          while (num5 <= num4)
          {
            Console.Write(\u0006\u2004.\u0002(670560309));
            checked { ++num5; }
          }
          checked { ++top; }
        }
        \u0003\u2002.\u0008\u2002.\u0002(_param0, _param5, _param6, _param1, _param7, (float) _param8, Conversions.ToString(ch), _param9);
        Thread.Sleep(1);
      }
    }
    finally
    {
      IEnumerator enumerator;
      if (enumerator is IDisposable)
        (enumerator as IDisposable).Dispose();
    }
    Console.ForegroundColor = ConsoleColor.White;
    Console.BackgroundColor = ConsoleColor.Black;
    return size;
  }

  private static void \u0008\u2000()
  {
    int millisecondsTimeout = 10;
    int num1 = 0;
    int maxValue = 3000;
    int num2 = 0;
    int num3 = 0;
    while (true)
    {
      do
      {
        \u0003\u2002.\u000F\u2001();
        \u0003\u2002.\u0008();
        do
        {
          \u0003\u2002.\u0005\u2000();
          \u0003\u2002.\u0006();
          while (true)
          {
            do
            {
              int num4 = checked ((int) Math.Round(unchecked ((double) checked (\u0003\u2002.\u0006\u2000.\u0003() - \u0003\u2002.\u000F\u2001 ? 10 : 0) - (double) \u0003\u2002.\u0005.Count / 4.0)));
              int num5 = num4;
              Thread.Sleep(millisecondsTimeout);
              checked { num3 += millisecondsTimeout; }
              checked { num1 += millisecondsTimeout; }
              checked { num2 += millisecondsTimeout; }
              if (num3 >= num5)
              {
                num3 = 0;
                \u0003\u2002.\u0005\u2001();
              }
              if (num1 >= num4)
              {
                num1 = 0;
                \u0003\u2002.\u0005[0].\u0002((\u000E\u2003.\u0002) 4);
                if (\u0003\u2002.\u0005[0].\u0002() == 0 || \u0003\u2002.\u0005[0].\u0002() == checked (Console.WindowWidth - 1))
                {
                  \u0003\u2002.\u0002\u2001 = (\u0003\u2002.\u0003) 2;
                  goto label_43;
                }
                else if (\u0003\u2002.\u0005[0].\u0003() == 0 || \u0003\u2002.\u0005[0].\u0003() == checked (Console.WindowHeight - 1))
                {
                  \u0003\u2002.\u0002\u2001 = (\u0003\u2002.\u0003) 2;
                  goto label_43;
                }
                else if (\u0003\u2002.\u0006\u2000.\u0002(\u0003\u2002.\u0005[0]))
                {
                  \u0003\u2002.\u0002\u2001 = (\u0003\u2002.\u0003) 3;
                  goto label_43;
                }
                else
                {
                  \u0003\u2002.\u0008.Enqueue((\u000E\u2003) \u0003\u2002.\u0005[checked (\u0003\u2002.\u0005.Count - 1)].Clone());
                  int num6 = checked (\u0003\u2002.\u0005.Count - 1);
                  int index = 1;
                  while (index <= num6)
                  {
                    if (\u0003\u2002.\u0005[0].\u0002(\u0003\u2002.\u0005[index]))
                    {
                      \u0003\u2002.\u0002\u2001 = (\u0003\u2002.\u0003) 1;
                      goto label_43;
                    }
                    else
                    {
                      \u0003\u2002.\u0005[index].\u0002(\u0003\u2002.\u0005[checked (index - 1)].\u0005());
                      \u0003\u2002.\u0005[index].\u0003(\u0003\u2002.\u0005[checked (index - 1)].\u0008());
                      checked { ++index; }
                    }
                  }
                  if (\u0003\u2002.\u0006 != null)
                  {
                    if (\u0003\u2002.\u0006.\u0002().\u0002(\u0003\u2002.\u0005[0]))
                    {
                      \u0003\u2002.\u0002(\u0003\u2002.\u0006.\u0002());
                      \u0003\u2002.\u000E.Add(\u0003\u2002.\u0006.\u0002());
                      \u0003\u2002.\u000E\u2000();
                      \u0003\u2002.\u0006 = (\u000F\u2000) null;
                      \u0003\u2002.\u000F\u2000();
                    }
                    else if (TimeSpan.FromTicks(DateAndTime.Now.Ticks) - \u0003\u2002.\u0006.\u0002() > \u0003\u2002.\u0006\u2001)
                    {
                      \u0003\u2002.\u000E\u2000();
                      if (\u0003\u2002.\u0005.Count <= \u0003\u2002.\u0006.\u0002())
                      {
                        \u0003\u2002.\u0002\u2001 = (\u0003\u2002.\u0003) 4;
                        goto label_43;
                      }
                      else
                      {
                        \u0003\u2002.\u0006 = (\u000F\u2000) null;
                        if (\u0003\u2002.\u0005.Count < 2)
                        {
                          \u0003\u2002.\u0002\u2001 = (\u0003\u2002.\u0003) 4;
                          goto label_43;
                        }
                      }
                    }
                  }
                }
              }
              if (num2 >= maxValue)
              {
                num2 = \u0003\u2002.\u0005\u2002.Next(0, maxValue);
                if (\u0003\u2002.\u0006 == null)
                {
                  int num7;
                  int num8;
                  \u000E\u2003 obj;
                  do
                  {
                    num7 = \u0003\u2002.\u0005\u2002.Next(2, checked (Console.WindowWidth - 2));
                    num8 = \u0003\u2002.\u0005\u2002.Next(2, checked (Console.WindowHeight - 2));
                    obj = new \u000E\u2003(num7, num8, (\u000E\u2003.\u0002) 4, ConsoleColor.White);
                    if (\u0003\u2002.\u0006\u2000.\u0002(obj))
                    {
                      obj = (\u000E\u2003) null;
                    }
                    else
                    {
                      int num9 = checked (\u0003\u2002.\u0005.Count - 1);
                      int index = 0;
                      while (index <= num9)
                      {
                        if (\u0003\u2002.\u0005[index].\u0002(obj))
                        {
                          obj = (\u000E\u2003) null;
                          break;
                        }
                        checked { ++index; }
                      }
                    }
                  }
                  while (obj == null);
                  \u0003\u2002.\u0006 = new \u000F\u2000(num7, num8, \u0003\u2002.\u0005\u2002.Next(1, \u0003\u2002.\u000F\u2001 ? 12 : 6));
                  \u0003\u2002.\u0006\u2001 = TimeSpan.FromSeconds((double) checked (20 - \u0003\u2002.\u0006.\u0002()) + (double) \u0003\u2002.\u0006\u2000.\u0005() / 2.0 + (double) \u0003\u2002.\u0005.Count / 10.0);
                  \u0003\u2002.\u000E\u2001 = true;
                }
              }
            }
            while (!Console.KeyAvailable);
            switch (Console.ReadKey(true).Key)
            {
              case ConsoleKey.Escape:
                goto label_42;
              case ConsoleKey.LeftArrow:
                \u0003\u2002.\u0005[0].\u0003((\u000E\u2003.\u0002) 0);
                continue;
              case ConsoleKey.UpArrow:
                \u0003\u2002.\u0005[0].\u0003((\u000E\u2003.\u0002) 2);
                continue;
              case ConsoleKey.RightArrow:
                \u0003\u2002.\u0005[0].\u0003((\u000E\u2003.\u0002) 1);
                continue;
              case ConsoleKey.DownArrow:
                \u0003\u2002.\u0005[0].\u0003((\u000E\u2003.\u0002) 3);
                continue;
              default:
                continue;
            }
          }
label_42:
          \u0003\u2002.\u0002\u2001 = (\u0003\u2002.\u0003) 5;
label_43:
          if (\u0003\u2002.\u0002\u2001 != (\u0003\u2002.\u0003) 5)
          {
            \u0003\u2002.\u0003(0);
            checked { --\u0003\u2002.\u0002\u2000; }
          }
          else
            goto label_46;
        }
        while (\u0003\u2002.\u0002\u2000 != 0);
        \u0003\u2002.\u000E\u2001();
label_46:;
      }
      while (\u0003\u2002.\u0002\u2001 == (\u0003\u2002.\u0003) 5);
      \u0003\u2002.\u000F\u2001();
      \u0003\u2002.\u0003(2);
      \u0003\u2002.\u0003\u2000();
      \u0003\u2002.\u0006\u2000();
      \u0003\u2002.\u000F\u2001();
    }
  }

  private static void \u0002(int _param0)
  {
    if (Conversion.Int((double) checked (\u0003\u2002.\u0002\u2002 + _param0) / 100.0) > Conversion.Int((double) \u0003\u2002.\u0002\u2002 / 100.0))
    {
      checked { ++\u0003\u2002.\u0002\u2000; }
      \u0003\u2002.\u000E\u2001();
    }
    checked { \u0003\u2002.\u0002\u2002 += _param0; }
  }

  private static void \u0003(int _param0)
  {
    \u0003\u2002.\u0003 = true;
    int num = checked (\u0003\u2002.\u0005.Count - 1);
    int index = 0;
    while (index <= num)
    {
      Thread.Sleep(50);
      if (\u0003\u2002.\u0005[index].\u0002() > 0 && \u0003\u2002.\u0005[index].\u0002() < checked (Console.WindowWidth - 1) && \u0003\u2002.\u0005[index].\u0003() > 0 && \u0003\u2002.\u0005[index].\u0003() < checked (Console.WindowHeight - 1) && !\u0003\u2002.\u0006\u2000.\u0002(\u0003\u2002.\u0005[index]))
        \u0003\u2002.\u0005[index].\u0002(' ', ConsoleColor.Black);
      if (_param0 > 0)
      {
        \u0003\u2002.\u0002(_param0);
        \u0003\u2002.\u0002(true);
      }
      checked { ++index; }
    }
    \u0003\u2002.\u0003 = false;
  }

  private static void \u0006\u2000()
  {
    \u0003\u2002.\u0003 = true;
    int num = checked (\u0003\u2002.\u0003\u2000.Count - 1);
    int index = 0;
    while (index <= num)
    {
      if (\u0003\u2002.\u0002\u2002 > \u0003\u2002.\u0003\u2000[index].\u0002())
      {
        \u0003\u2002.\u0002 obj = new \u0003\u2002.\u0002(\u0003\u2002.\u0002(), \u0003\u2002.\u0002\u2002, \u0003\u2002.\u0006\u2000.\u0002(), \u0003\u2002.\u0006\u2000.\u0005(), \u0003\u2002.\u000F\u2001);
        \u0003\u2002.\u0003\u2000.Insert(index, obj);
        \u0003\u2002.\u0005\u2000 = obj;
        \u0003\u2002.\u0003();
        break;
      }
      checked { ++index; }
    }
    \u0003\u2002.\u0003 = false;
  }

  private static string \u0002()
  {
    List<char> charList = new List<char>();
    Size size1 = \u0003\u2002.\u0008\u2002.\u0002(\u0006\u2004.\u0002(670553148), string.Empty, 8f, 0.6);
    int[] numArray = new int[3];
    int index1 = 0;
    int CharCode1 = 65;
    do
    {
      charList.Add(Strings.Chr(CharCode1));
      checked { ++CharCode1; }
    }
    while (CharCode1 <= 90);
    charList.AddRange((IEnumerable<char>) new char[5]
    {
      '.',
      '/',
      '\\',
      '+',
      '-'
    });
    int num1 = Strings.Asc(Conversions.ToString(0));
    int num2 = Strings.Asc(Conversions.ToString(9));
    int CharCode2 = num1;
    while (CharCode2 <= num2)
    {
      charList.Add(Strings.Chr(CharCode2));
      checked { ++CharCode2; }
    }
    string str = \u0006\u2004.\u0002(670553124);
    Size size2 = \u0003\u2002.\u0008\u2002.\u0002(str, string.Empty, 8f, 0.6);
    \u0003\u2002.\u0002(str, ConsoleColor.White, ConsoleColor.Blue, true, false, 0, 2, string.Empty, 8, 0.6, true);
    int left = checked ((int) Math.Round(unchecked ((double) checked (Console.WindowWidth - size2.Width) / 2.0)));
    int num3 = checked (size2.Height + 3);
    Console.BackgroundColor = ConsoleColor.Blue;
    Console.SetCursorPosition(left, checked (num3 - 1));
    Console.Write(Strings.StrDup(size2.Width, \u0006\u2004.\u0002(670553254)));
    int num4 = num3;
    int num5 = checked (num3 + size1.Height + 1);
    int top = num4;
    while (top <= num5)
    {
      Console.SetCursorPosition(left, top);
      int num6 = checked (size2.Width - 1);
      int num7 = 0;
      while (num7 <= num6)
      {
        Console.Write(\u0006\u2004.\u0002(670560309));
        checked { ++num7; }
      }
      checked { ++top; }
    }
    while (true)
    {
      do
      {
        int num8 = checked (numArray.Length - 1);
        int index2 = 0;
        while (index2 <= num8)
        {
          \u0003\u2002.\u0002(\u0006\u2004.\u0002(670560309) + Conversions.ToString(charList[numArray[index2]]) + \u0006\u2004.\u0002(670560309), index2 == index1 ? ConsoleColor.White : ConsoleColor.Gray, index2 == index1 ? ConsoleColor.DarkBlue : ConsoleColor.Blue, true, false, checked (index2 * size1.Width * 3 - size1.Width * 3 - 1), checked (num3 + 1), string.Empty, 8, 0.5, false);
          checked { ++index2; }
        }
        Console.SetCursorPosition(1, 1);
        while (!Console.KeyAvailable)
          Thread.Sleep(10);
        switch (Console.ReadKey().Key)
        {
          case ConsoleKey.Enter:
            goto label_23;
          case ConsoleKey.LeftArrow:
            checked { --index1; }
            continue;
          case ConsoleKey.UpArrow:
            numArray[index1] = checked (numArray[index1] + 1) % charList.Count;
            continue;
          case ConsoleKey.RightArrow:
            goto label_22;
          case ConsoleKey.DownArrow:
            // ISSUE: variable of a reference type
            int& local;
            // ISSUE: explicit reference operation
            int num9 = checked (^(local = ref numArray[index1]) - 1);
            local = num9;
            if (numArray[index1] == -1)
            {
              numArray[index1] = checked (charList.Count - 1);
              continue;
            }
            continue;
          default:
            continue;
        }
      }
      while (index1 != -1);
      index1 = checked (numArray.Length - 1);
      continue;
label_22:
      index1 = checked (index1 + 1) % numArray.Length;
    }
label_23:
    return Conversions.ToString(charList[numArray[0]]) + Conversions.ToString(charList[numArray[1]]) + Conversions.ToString(charList[numArray[2]]);
  }

  private static void \u000E\u2000()
  {
    Console.SetCursorPosition(\u0003\u2002.\u0006.\u0002().\u0002(), \u0003\u2002.\u0006.\u0002().\u0003());
    Console.Write(\u0006\u2004.\u0002(670560309));
  }

  private static void \u000F\u2000()
  {
    checked { ++\u0003\u2002.\u000F\u2000; }
    checked { ++\u0003\u2002.\u000E\u2000; }
    if (\u0003\u2002.\u000E\u2000 != \u0003\u2002.\u0006\u2000.\u0002())
      return;
    if (\u0003\u2002.\u0006\u2000.\u0005() != \u0003\u2002.\u0008\u2000.Count)
      \u0003\u2002.\u0006\u2000 = \u0003\u2002.\u0008\u2000[\u0003\u2002.\u0006\u2000.\u0005()];
    \u0003\u2002.\u0003(1);
    \u0003\u2002.\u0005\u2000();
    \u0003\u2002.\u0005[0].\u0002(checked ((int) Math.Round(unchecked ((double) Console.WindowWidth / 2.0 - 1.0))));
    \u0003\u2002.\u0005[0].\u0003(checked ((int) Math.Round(unchecked ((double) Console.WindowHeight / 2.0))));
    List<\u000E\u2003> objList = \u0003\u2002.\u0005;
    Action<\u000E\u2003> action;
    if (\u0003\u2002.\u0005.\u0008 != null)
      action = \u0003\u2002.\u0005.\u0008;
    else
      \u0003\u2002.\u0005.\u0008 = action = new Action<\u000E\u2003>(\u0003\u2002.\u0005.\u0002._Lambda\u0024__47\u002D0);
    objList.ForEach(action);
  }

  private static void \u0002\u2001()
  {
    Console.ForegroundColor = ConsoleColor.Magenta;
    int num1 = checked (Console.WindowHeight - 1);
    int top = 0;
    while (top <= num1)
    {
      int num2 = checked (Console.WindowWidth - 1);
      int left = 0;
      while (left <= num2)
      {
        if (\u0003\u2002.\u0006\u2000.\u0002()[checked (top * Console.WindowWidth + left)])
        {
          Console.SetCursorPosition(left, top);
          Console.Write(\u0006\u2004.\u0002(670560662));
        }
        checked { ++left; }
      }
      checked { ++top; }
    }
  }

  private static void \u0003\u2001()
  {
    Console.ForegroundColor = ConsoleColor.White;
    int num1 = checked (Console.WindowWidth - 1);
    int left = 0;
    while (left <= num1)
    {
      Console.SetCursorPosition(left, 0);
      Console.Write(\u0006\u2004.\u0002(670560439));
      Console.CursorTop = checked (Console.WindowHeight - 1);
      Console.Write(\u0006\u2004.\u0002(670560439));
      checked { ++left; }
    }
    int num2 = checked (Console.WindowHeight - 2);
    int top = 1;
    while (top <= num2)
    {
      Console.SetCursorPosition(0, top);
      Console.Write(\u0006\u2004.\u0002(670560439));
      Console.CursorLeft = checked (Console.WindowWidth - 1);
      Console.Write(\u0006\u2004.\u0002(670560439));
      checked { ++top; }
    }
  }

  private static void \u0005\u2001()
  {
    while (\u0003\u2002.\u0008.Count > 0)
      \u0003\u2002.\u0008.Dequeue().\u0002(' ', ConsoleColor.Black);
    if (\u0003\u2002.\u000F)
    {
      List<\u000E\u2003> objList = \u0003\u2002.\u0005;
      Action<\u000E\u2003> action;
      if (\u0003\u2002.\u0005.\u0006 != null)
        action = \u0003\u2002.\u0005.\u0006;
      else
        \u0003\u2002.\u0005.\u0006 = action = new Action<\u000E\u2003>(\u0003\u2002.\u0005.\u0002._Lambda\u0024__50\u002D0);
      objList.ForEach(action);
    }
    else
    {
      \u0003\u2002.\u0005[0].\u0002();
      \u0003\u2002.\u0005[1].\u0002();
    }
    if (\u0003\u2002.\u0006 != null && \u0003\u2002.\u0006.\u0002())
    {
      \u0003\u2002.\u0006.\u0002(false);
      \u0003\u2002.\u0006.\u0002().\u0002(\u0003\u2002.\u0006\u2000.\u0002(), ConsoleColor.Black);
    }
    Console.BackgroundColor = ConsoleColor.Black;
    Console.ForegroundColor = ConsoleColor.White;
    \u0003\u2002.\u0006\u2001();
    \u0003\u2002.\u0008\u2001();
    \u0003\u2002.\u0002(false);
    \u0003\u2002.\u000E\u2001();
  }

  private static void \u0008\u2001()
  {
    if (\u0003\u2002.\u0006 != null)
    {
      Console.SetCursorPosition(3, checked (Console.WindowHeight - 1));
      Console.BackgroundColor = \u0003\u2002.\u0006.\u0002() <= 5 ? ConsoleColor.Gray : ConsoleColor.DarkGray;
      Console.ForegroundColor = \u0003\u2002.\u0006.\u0002().\u0002();
      Console.Write(\u0006\u2004.\u0002(670553106), (object) \u0003\u2002.\u0006.\u0002(), (object) (\u0003\u2002.\u0006\u2001 - (TimeSpan.FromTicks(DateAndTime.Now.Ticks) - \u0003\u2002.\u0006.\u0002())).TotalSeconds);
    }
    else
    {
      if (!\u0003\u2002.\u000E\u2001)
        return;
      \u0003\u2002.\u000E\u2001 = false;
      Console.SetCursorPosition(3, checked (Console.WindowHeight - 1));
      Console.ForegroundColor = ConsoleColor.White;
      Console.Write(\u0006\u2004.\u0002(670553103));
    }
  }

  private static void \u0006\u2001()
  {
    bool flag;
    do
    {
      flag = true;
      int num1 = checked (\u0003\u2002.\u000E.Count - 1);
      int index = 0;
      while (index <= num1)
      {
        Console.SetCursorPosition(\u0003\u2002.\u000E[index].\u0002().\u0002(), \u0003\u2002.\u000E[index].\u0002().\u0003());
        Console.ForegroundColor = ConsoleColor.White;
        Console.Write(\u0006\u2004.\u0002(670560524));
        \u000E\u2003 obj;
        int num2 = checked ((obj = \u0003\u2002.\u000E[index].\u0002()).\u0002() - 1);
        obj.\u0002(num2);
        if (\u0003\u2002.\u000E[index].\u0002().\u0002() <= 3)
        {
          \u0003\u2002.\u000E.RemoveAt(index);
          flag = false;
          break;
        }
        Console.CursorLeft = \u0003\u2002.\u000E[index].\u0002().\u0002();
        Console.ForegroundColor = \u0003\u2002.\u000E[index].\u0002().\u0002();
        Console.Write(\u0006\u2004.\u0002(670554084), (object) \u0003\u2002.\u000E[index].\u0002());
        checked { ++index; }
      }
    }
    while (!flag);
  }

  private static void \u0002(bool _param0)
  {
    if (\u0003\u2002.\u0003\u2002 == \u0003\u2002.\u0002\u2002 && !_param0)
      return;
    Console.ForegroundColor = ConsoleColor.White;
    Console.SetCursorPosition(checked (Console.WindowWidth - 8), 0);
    Console.Write(string.Format(\u0006\u2004.\u0002(670554091), (object) \u0003\u2002.\u0002\u2002));
    \u0003\u2002.\u0003\u2002 = \u0003\u2002.\u0002\u2002;
  }

  private static void \u000E\u2001()
  {
    Console.BackgroundColor = ConsoleColor.Black;
    Console.ForegroundColor = \u0003\u2002.\u000F\u2001 ? ConsoleColor.White : ConsoleColor.Gray;
    Console.SetCursorPosition(checked (Console.WindowWidth - 8 - \u0003\u2002.\u0002\u2000 - 5), checked (Console.WindowHeight - 1));
    Console.Write(string.Format(\u0006\u2004.\u0002(670554079), (object) Strings.StrDup(\u0003\u2002.\u0002\u2000, \u0006\u2004.\u0002(670554039)), (object) \u0003\u2002.\u0006\u2000.\u0005(), (object) checked (\u0003\u2002.\u0006\u2000.\u0002() - \u0003\u2002.\u000E\u2000)));
  }

  private static void \u000F\u2001()
  {
    int num = 2000;
    do
    {
      Thread.Sleep(10);
      checked { num -= 100; }
      while (Console.KeyAvailable)
        Console.ReadKey();
    }
    while (num > 0);
  }

  private sealed class \u0002
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private string \u0002;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private int \u0003;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private string \u0005;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private int \u0008;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private bool \u0006;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private string \u000E;

    public \u0002(string _param1, int _param2, string _param3, int _param4, bool _param5)
    {
      if (_param1.Length < 3)
        _param1 = _param1.PadRight(3);
      if (_param1.Length > 3)
        _param1 = _param1.Substring(0, 3);
      this.\u0002(_param1);
      this.\u0002(_param2);
      this.\u0003(_param3);
      this.\u0003(_param4);
      this.\u0002(_param5);
      this.\u0005(\u0006\u2003.\u0002().ToString());
    }

    public string \u0002() => this.\u0002;

    public void \u0002(string _param1) => this.\u0002 = _param1;

    public int \u0002() => this.\u0003;

    public void \u0002(int _param1) => this.\u0003 = _param1;

    public string \u0003() => this.\u0005;

    public void \u0003(string _param1) => this.\u0005 = _param1;

    public int \u0003() => this.\u0008;

    public void \u0003(int _param1) => this.\u0008 = _param1;

    public bool \u0002() => this.\u0006;

    public void \u0002(bool _param1) => this.\u0006 = _param1;

    public string \u0005() => this.\u000E;

    public void \u0005(string _param1) => this.\u000E = _param1;
  }

  public enum \u0003
  {
  }

  [Serializable]
  internal sealed class \u0005
  {
    public static readonly \u0003\u2002.\u0005 \u0002 = new \u0003\u2002.\u0005();
    public static Action<\u000E\u2003> \u0003;
    public static \u0003\u2000<int, string, ConsoleColor> \u0005;
    public static Action<\u000E\u2003> \u0008;
    public static Action<\u000E\u2003> \u0006;

    [SpecialName]
    internal void _Lambda\u0024__32\u002D0(\u000E\u2003 _param1) => _param1.\u0003((\u000E\u2003.\u0002) 0);

    [SpecialName]
    internal void _Lambda\u0024__34\u002D0(int _param1, string _param2, ConsoleColor _param3)
    {
      Console.SetCursorPosition(checked ((int) Math.Round(unchecked ((double) checked (Console.WindowWidth - _param2.Length) / 2.0))), _param1);
      Console.ForegroundColor = _param3;
      Console.Write(_param2);
    }

    [SpecialName]
    internal void _Lambda\u0024__47\u002D0(\u000E\u2003 _param1)
    {
      _param1.\u0002(\u0003\u2002.\u0005[0].\u0002());
      _param1.\u0003(\u0003\u2002.\u0005[0].\u0003());
      _param1.\u0003((\u000E\u2003.\u0002) 0);
    }

    [SpecialName]
    internal void _Lambda\u0024__50\u002D0(\u000E\u2003 _param1) => _param1.\u0002();
  }
}
