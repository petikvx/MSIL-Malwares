// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Core.FileSystemScanner
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;
using System.IO;

namespace ICSharpCode.SharpZipLib.Core
{
  public class FileSystemScanner
  {
    public ProcessDirectoryHandler ProcessDirectory;
    public ProcessFileHandler ProcessFile;
    public CompletedFileHandler CompletedFile;
    public DirectoryFailureHandler DirectoryFailure;
    public FileFailureHandler FileFailure;
    private IScanFilter \uE002;
    private IScanFilter \uE001;
    private bool \uE000;

    public FileSystemScanner(string filter) => this.\uE002 = (IScanFilter) new PathFilter(filter);

    public FileSystemScanner(string fileFilter, string directoryFilter)
    {
      this.\uE002 = (IScanFilter) new PathFilter(fileFilter);
      this.\uE001 = (IScanFilter) new PathFilter(directoryFilter);
    }

    public FileSystemScanner(IScanFilter fileFilter) => this.\uE002 = fileFilter;

    public FileSystemScanner(IScanFilter fileFilter, IScanFilter directoryFilter)
    {
      this.\uE002 = fileFilter;
      this.\uE001 = directoryFilter;
    }

    private bool \uE003(string _param1, Exception _param2)
    {
      DirectoryFailureHandler directoryFailure = this.DirectoryFailure;
      bool flag = directoryFailure != null;
      if (flag)
      {
        ScanFailureEventArgs e = new ScanFailureEventArgs(_param1, _param2);
        directoryFailure((object) this, e);
        this.\uE000 = e.ContinueRunning;
      }
      return flag;
    }

    private bool \uE000(string _param1, Exception _param2)
    {
      bool flag = this.FileFailure != null;
      if (flag)
      {
        ScanFailureEventArgs e = new ScanFailureEventArgs(_param1, _param2);
        this.FileFailure((object) this, e);
        this.\uE000 = e.ContinueRunning;
      }
      return flag;
    }

    private void \uE002(string _param1)
    {
      ProcessFileHandler processFile = this.ProcessFile;
      if (processFile == null)
        return;
      ScanEventArgs e = new ScanEventArgs(_param1);
      processFile((object) this, e);
      this.\uE000 = e.ContinueRunning;
    }

    private void \uE000(string _param1)
    {
      CompletedFileHandler completedFile = this.CompletedFile;
      if (completedFile == null)
        return;
      ScanEventArgs e = new ScanEventArgs(_param1);
      completedFile((object) this, e);
      this.\uE000 = e.ContinueRunning;
    }

    private void \uE001(string _param1, bool _param2)
    {
      ProcessDirectoryHandler processDirectory = this.ProcessDirectory;
      if (processDirectory == null)
        return;
      DirectoryEventArgs e = new DirectoryEventArgs(_param1, _param2);
      processDirectory((object) this, e);
      this.\uE000 = e.ContinueRunning;
    }

    public void Scan(string directory, bool recurse)
    {
      this.\uE000 = true;
      this.\uE000(directory, recurse);
    }

    private void \uE000(string _param1, bool _param2)
    {
      try
      {
        string[] files = Directory.GetFiles(_param1);
        bool flag = false;
        for (int index = 0; index < files.Length; ++index)
        {
          if (!this.\uE002.IsMatch(files[index]))
            files[index] = (string) null;
          else
            flag = true;
        }
        this.\uE001(_param1, flag);
        if (this.\uE000)
        {
          if (flag)
          {
            foreach (string str in files)
            {
              try
              {
                if (str != null)
                {
                  this.\uE002(str);
                  if (!this.\uE000)
                    break;
                }
              }
              catch (Exception ex)
              {
                if (!this.\uE000(str, ex))
                  throw;
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
        if (!this.\uE003(_param1, ex))
          throw;
      }
      if (!this.\uE000)
        return;
      if (!_param2)
        return;
      try
      {
        foreach (string directory in Directory.GetDirectories(_param1))
        {
          if (this.\uE001 == null || this.\uE001.IsMatch(directory))
          {
            this.\uE000(directory, true);
            if (!this.\uE000)
              break;
          }
        }
      }
      catch (Exception ex)
      {
        if (this.\uE003(_param1, ex))
          return;
        throw;
      }
    }
  }
}
