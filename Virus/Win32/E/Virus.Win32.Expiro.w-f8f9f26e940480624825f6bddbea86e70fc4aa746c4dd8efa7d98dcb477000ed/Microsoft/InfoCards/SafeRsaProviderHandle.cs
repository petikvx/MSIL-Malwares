// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.SafeRsaProviderHandle
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: 1D4D5564-A025-490C-AF1D-DF4FBB709D1F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Virus.Win32.Expiro.w-f8f9f26e940480624825f6bddbea86e70fc4aa746c4dd8efa7d98dcb477000ed.exe

using Microsoft.InfoCards.Diagnostics;
using System;
using System.ComponentModel;
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;

namespace Microsoft.InfoCards
{
  internal class SafeRsaProviderHandle : SafeHandle
  {
    [SuppressUnmanagedCodeSecurity]
    [DllImport("advapi32.dll", EntryPoint = "CryptAcquireContextW", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern bool CryptAcquireContext(
      out SafeRsaProviderHandle hProv,
      [In] string pszContainer,
      [In] string pszProvider,
      [In] uint dwProvType,
      [In] uint dwFlags);

    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    [SuppressUnmanagedCodeSecurity]
    [DllImport("advapi32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern bool CryptReleaseContext([In] IntPtr hProv, [In] uint dwFlags);

    public static SafeRsaProviderHandle Construct()
    {
      SafeRsaProviderHandle hProv;
      if (!SafeRsaProviderHandle.CryptAcquireContext(out hProv, (string) null, (string) null, 24U, 4026531840U))
      {
        Win32Exception e = new Win32Exception(Marshal.GetLastWin32Error());
        InfoCardTrace.CloseInvalidOutSafeHandle((SafeHandle) hProv);
        InfoCardTrace.TraceAndLogException((Exception) e);
        throw InfoCardTrace.ThrowHelperError((Exception) new CommunicationException(e.Message));
      }
      return hProv;
    }

    private SafeRsaProviderHandle()
      : base(IntPtr.Zero, true)
    {
    }

    public override bool IsInvalid => IntPtr.Zero == this.handle;

    protected override bool ReleaseHandle() => SafeRsaProviderHandle.CryptReleaseContext(this.handle, 0U);
  }
}
