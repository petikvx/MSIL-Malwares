// Decompiled with JetBrains decompiler
// Type: Mooreming.DroidCollection
// Assembly: EventListe, Version=1.0.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 17402B6D-E2A2-428E-97AD-7F2170B297A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\Backdoor.Win32.Buterat.frsq-f1c24055722dc6f94c4b223ed4a7bce8ffb5c5bb3030bca735d6ceab513d8d31.exe

using System;
using System.Threading;

namespace Mooreming
{
  internal class DroidCollection : IDroidCollection
  {
    private IDroid[] droidCollection;
    private int lengthOfCollection;

    public DroidCollection(int sizeOfCollection)
    {
      this.droidCollection = new IDroid[sizeOfCollection];
      this.lengthOfCollection = 0;
    }

    public void Add(int loop)
    {
      Random random = new Random();
      for (int index = 0; index < loop; ++index)
      {
        Thread.Sleep(1);
        switch (random.Next(4))
        {
          case 0:
            this.droidCollection[this.lengthOfCollection] = (IDroid) new AstromechDroid();
            break;
          case 1:
            this.droidCollection[this.lengthOfCollection] = (IDroid) new JanitorDroid();
            break;
          case 2:
            this.droidCollection[this.lengthOfCollection] = (IDroid) new UtilityDroid();
            break;
          case 3:
            this.droidCollection[this.lengthOfCollection] = (IDroid) new ProtocolDroid();
            break;
        }
        ++this.lengthOfCollection;
      }
    }

    public bool Add(string Material, string Model, string Color, int NumberOfLanguages)
    {
      if (this.lengthOfCollection >= this.droidCollection.Length - 1)
        return false;
      this.droidCollection[this.lengthOfCollection] = (IDroid) new ProtocolDroid(Material, Model, Color, NumberOfLanguages);
      ++this.lengthOfCollection;
      return true;
    }

    public bool Add(
      string Material,
      string Model,
      string Color,
      bool HasToolBox,
      bool HasComputerConnection,
      bool HasArm)
    {
      if (this.lengthOfCollection >= this.droidCollection.Length - 1)
        return false;
      this.droidCollection[this.lengthOfCollection] = (IDroid) new UtilityDroid(Material, Model, Color, HasToolBox, HasComputerConnection, HasArm);
      ++this.lengthOfCollection;
      return true;
    }

    public bool Add(
      string Material,
      string Model,
      string Color,
      bool HasToolBox,
      bool HasComputerConnection,
      bool HasArm,
      bool HasTrashCompactor,
      bool HasVaccum)
    {
      if (this.lengthOfCollection >= this.droidCollection.Length - 1)
        return false;
      this.droidCollection[this.lengthOfCollection] = (IDroid) new JanitorDroid(Material, Model, Color, HasToolBox, HasComputerConnection, HasArm, HasTrashCompactor, HasVaccum);
      ++this.lengthOfCollection;
      return true;
    }

    public bool Add(
      string Material,
      string Model,
      string Color,
      bool HasToolBox,
      bool HasComputerConnection,
      bool HasArm,
      bool HasFireExtinguisher,
      int NumberOfShips)
    {
      if (this.lengthOfCollection >= this.droidCollection.Length - 1)
        return false;
      this.droidCollection[this.lengthOfCollection] = (IDroid) new AstromechDroid(Material, Model, Color, HasToolBox, HasComputerConnection, HasArm, HasFireExtinguisher, NumberOfShips);
      ++this.lengthOfCollection;
      return true;
    }

    public string GetPrintString()
    {
      string printString = "";
      foreach (IDroid droid in this.droidCollection)
      {
        if (droid != null)
        {
          droid.CalculateTotalCost();
          printString = printString + "******************************" + Environment.NewLine + droid.ToString() + Environment.NewLine + Environment.NewLine + "Total Cost: " + droid.TotalCost.ToString("C") + Environment.NewLine + "******************************" + Environment.NewLine + Environment.NewLine;
        }
      }
      return printString;
    }

    public bool Organize()
    {
      GenericStack<AstromechDroid> genericStack1 = new GenericStack<AstromechDroid>();
      GenericStack<JanitorDroid> genericStack2 = new GenericStack<JanitorDroid>();
      GenericStack<UtilityDroid> genericStack3 = new GenericStack<UtilityDroid>();
      GenericStack<ProtocolDroid> genericStack4 = new GenericStack<ProtocolDroid>();
      GenericQueue<IDroid> genericQueue = new GenericQueue<IDroid>();
      for (int index = 0; index < this.lengthOfCollection; ++index)
      {
        try
        {
          genericStack1.Add((AstromechDroid) this.droidCollection[index]);
        }
        catch
        {
          try
          {
            genericStack2.Add((JanitorDroid) this.droidCollection[index]);
          }
          catch
          {
            try
            {
              genericStack3.Add((UtilityDroid) this.droidCollection[index]);
            }
            catch
            {
              try
              {
                genericStack4.Add((ProtocolDroid) this.droidCollection[index]);
              }
              catch
              {
                return false;
              }
            }
          }
        }
      }
      while (genericStack1.Head != null)
        genericQueue.Add((IDroid) genericStack1.Pop());
      while (genericStack2.Head != null)
        genericQueue.Add((IDroid) genericStack2.Pop());
      while (genericStack3.Head != null)
        genericQueue.Add((IDroid) genericStack3.Pop());
      while (genericStack4.Head != null)
        genericQueue.Add((IDroid) genericStack4.Pop());
      int index1 = 0;
      while (genericQueue.Tail != null)
      {
        this.droidCollection[index1] = genericQueue.Dequeue();
        ++index1;
      }
      return true;
    }

    public bool Sort()
    {
      MergeSort mergeSort = new MergeSort((IComparable[]) this.droidCollection, this.lengthOfCollection);
      return true;
    }
  }
}
