// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: Xe, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E8DDD59-A67B-4ABD-99CD-92D28751A620
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2fdfbfc735f43a4e2dce0c849b41ab83dd17228f6df983f7a95d6e427cdc77b0.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -1578911745;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -673827426)) % 4U)
          {
            case 0:
              EventHandler eventHandler2 = (EventHandler) Square.\u200C​‏‮‭⁯​‍‫‪⁮⁪‭⁪‏‮‫⁭‪‪‎‭‎‍‪‎‪‮‭‬‏‍‮⁭⁮‪⁮⁭⁮‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              int num3 = eventHandler1 != comparand ? -485814749 : (num3 = -1246493435);
              num1 = num3 ^ (int) num2 * -944829631;
              continue;
            case 1:
              comparand = eventHandler1;
              num1 = -433341630;
              continue;
            case 2:
              goto label_1;
            case 3:
              goto label_3;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -388741093;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2048606997)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              EventHandler comparand = eventHandler1;
              EventHandler eventHandler2 = (EventHandler) Square.\u200F‬‬⁫⁭⁪⁪⁭​​⁫‏‪‬⁫⁮‭⁫‭⁫⁭‬‌‫⁫‌‎‫⁮‍⁭⁬‍​‫⁭‏‏‬‎‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              int num3;
              num1 = num3 = eventHandler1 != comparand ? -388741093 : (num3 = -640418864);
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public string SpecialName
    {
      get
      {
label_1:
        int num1 = -839968335;
        string specialName;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1488820144)) % 4U)
          {
            case 1:
              specialName = Square.\u200F‫⁬‫‭‭⁮‮⁫‪‍⁯‌‏⁫‍‫⁪⁯‬⁭​‬⁫‌‍‫‫⁫⁯‍‌⁪‬‍⁮‭‭⁪⁫‮(this.CurrentSquare, \u003CModule\u003E.\u200C⁮‍‮‮⁯‫⁫⁭⁯⁭⁮‏⁫⁮‭⁪​⁫‍⁭‎‭‎‪⁬‌⁮‭⁮⁮⁮⁯⁮⁮⁭⁯⁮⁮⁮‮<string>(2954814558U), Square.\u200E⁯‪‌‪‭⁭‬‎⁭‎‫‪‍‎⁫‌‪⁬‮⁮‎‬⁭‭‬⁫‎⁫‭‍⁬‬‎‭‏‌‮⁯⁮‮((object) this.Piece));
              num1 = (int) num2 * 1838869670 ^ -1229987984;
              continue;
            case 2:
              num1 = (int) num2 * 249279330 ^ -455964900;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
        char ch = Square.\u202C‍⁭‪‬⁬⁬‪⁬⁭‌⁬‎⁯​⁭⁭​⁯⁬‫⁯‪‍‍‮‎‌‭​⁫⁫⁮⁮‏⁫‮⁮⁪⁯‮(\u003CModule\u003E.\u200E‎⁯‪‍‏‫‎‮⁭​‬‫‌‮‭⁬‪⁪⁬⁭‮‏‎​‫‏‏‭‌⁫⁭⁮⁭‫⁯‭‫‭‫‮<string>(2929087379U), this.File);
label_1:
        int num1 = 962329101;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1516750314)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 74219685 ^ -543019047;
              continue;
            case 3:
              currentSquare = Square.\u202D‭‍‍​‭‫‎‮‬⁪⁯‍​​⁪‌⁬⁯‪⁬‬‍⁯‫‌⁬‪‎‌‍‍‭‪⁮⁯⁪‬‏‍‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * -964858338 ^ 2058086358;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
label_1:
      int num1 = 1228153492;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 75346729)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * 1219195335 ^ 1868410796;
              continue;
            }
            goto label_5;
          case 2:
            num1 = (int) num2 * 803726113 ^ -272469952;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
label_1:
      int num1 = 497461624;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 278239835)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Board = Board;
            num1 = (int) num2 * 1180548343 ^ -828431693;
            continue;
          case 2:
            num1 = (int) num2 * -1007344345 ^ 808724758;
            continue;
          case 3:
            num1 = (int) num2 * 1033529808 ^ -556913283;
            continue;
          case 5:
            this.File = file;
            num1 = (int) num2 * 2139421773 ^ -245637372;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      this.Rank = rank;
      this.Name = Square.\u202D‭‍‍​‭‫‎‮‬⁪⁯‍​​⁪‌⁬⁯‪⁬‬‍⁯‫‌⁬‪‎‌‍‍‭‪⁮⁯⁪‬‏‍‮(Square.\u202C‍⁭‪‬⁬⁬‪⁬⁭‌⁬‎⁯​⁭⁭​⁯⁬‫⁯‪‍‍‮‎‌‭​⁫⁫⁮⁮‏⁫‮⁮⁪⁯‮(\u003CModule\u003E.\u200C⁮‍‮‮⁯‫⁫⁭⁯⁭⁮‏⁫⁮‭⁪​⁫‍⁭‎‭‎‪⁬‌⁮‭⁮⁮⁮⁯⁮⁮⁭⁯⁮⁮⁮‮<string>(4060821765U), file).ToString(), (this.Rank + 1).ToString());
    }

    public Square()
    {
      this.InitializeComponent();
      this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
    }

    private void SwitchPlayer()
    {
      bool flag1 = !this.Board.DisableTurns;
label_1:
      int num1 = -1915614352;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2029120577)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = -1577685088;
            continue;
          case 2:
            flag2 = this.Board.WhosPlaying == PieceColor.White;
            num1 = (int) num2 * -898941191 ^ 256192714;
            continue;
          case 3:
            int num3 = flag2 ? -803655802 : (num3 = -18487190);
            num1 = num3 ^ (int) num2 * 1880902498;
            continue;
          case 4:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * -2142368901 ^ 409348677;
            continue;
          case 5:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -921446472;
            continue;
          case 6:
            goto label_3;
          case 7:
            num1 = (int) num2 * 1928306630 ^ 922323514;
            continue;
          case 8:
            int num4 = flag1 ? -1244837914 : (num4 = -202647775);
            num1 = num4 ^ (int) num2 * 709217711;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private bool getSide(Square x)
    {
label_1:
      int num1 = 840857382;
      bool side;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1708443625)) % 5U)
        {
          case 0:
            num1 = (int) num2 * 1808458718 ^ 1557709854;
            continue;
          case 2:
            if (this.Board.DisableTurns)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * -629210919 ^ 496799842;
            continue;
          case 3:
            goto label_1;
          case 4:
            num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
            break;
          default:
            goto label_9;
        }
        side = num3 != 0;
        num1 = 1038932423;
      }
label_9:
      return side;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = 1092694883;
      while (true)
      {
        uint num2;
        bool flag1;
        bool side;
        bool flag2;
        bool flag3;
        bool disableTurns;
        List<PossibleMoves> move1;
        bool flag4;
        List<PossibleMoves> move2;
        bool flag5;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ 773195923)) % 84U)
        {
          case 0:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -1647935295 ^ 1204182358;
            continue;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -445393295 ^ -13388645;
            continue;
          case 3:
            this.Board.HidePieceMoves(this.Board.From);
            this.Board.From = (Square) null;
            num1 = 254571415;
            continue;
          case 4:
            flag2 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * 1979901727 ^ -1574826669;
            continue;
          case 5:
            this.msg = \u003CModule\u003E.\u200C⁮‍‮‮⁯‫⁫⁭⁯⁭⁮‏⁫⁮‭⁪​⁫‍⁭‎‭‎‪⁬‌⁮‭⁮⁮⁮⁯⁮⁮⁭⁯⁮⁮⁮‮<string>(1925778304U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1503108485 ^ -1764808734;
            continue;
          case 6:
            int num5 = !flag5 ? 1942086693 : (num5 = 1800739791);
            num1 = num5 ^ (int) num2 * 148171749;
            continue;
          case 7:
            int num6 = !move1.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? 2068422386 : (num6 = 624107960);
            num1 = num6 ^ (int) num2 * -947599626;
            continue;
          case 8:
            num1 = 709685754;
            continue;
          case 9:
            num1 = (int) num2 * -2068932439 ^ 939284705;
            continue;
          case 10:
            this.msg = Square.\u206A‎‮‫⁯​⁫‌‫‏⁫‌‮⁯‍‬‪‎‮‬‪‪‬‎‭‬⁪‬⁭‭⁭⁫‮‪‎⁯​‌‬⁫‮(\u003CModule\u003E.\u200C⁪⁬‬⁪⁪⁬‭⁭⁫⁭⁪⁭⁪⁭‭‌⁭‎⁭‮⁬⁭‍​⁯‬⁫‌‮‎‫‏‬‭​​​⁮⁮‮<string>(3027916818U), (object) move1.Count);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 428288392 ^ 1993238541;
            continue;
          case 11:
            to.HighLight();
            num1 = (int) num2 * -2096137765 ^ -1776629883;
            continue;
          case 12:
            to.MovePawn(this.Board.From);
            num1 = 1316711584;
            continue;
          case 13:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u206B‮‪⁪‬⁬⁭⁫⁮⁭⁭‍⁪‫‫⁫‍⁬⁬⁫‪⁭⁮‌‭⁬‏‮‬‮‪‍‬⁫​‭⁬⁬⁭⁫‮<string>(1168645830U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -643476431 ^ 69530200;
            continue;
          case 14:
            num1 = 1635442407;
            continue;
          case 15:
            num3 = this.getSide(to) ? 1 : 0;
            break;
          case 16:
            num1 = (int) num2 * 266651267 ^ -180320467;
            continue;
          case 17:
            num1 = (int) num2 * 841308225 ^ 1713920168;
            continue;
          case 18:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -1503192199 ^ 1689820684;
            continue;
          case 19:
            num1 = (int) num2 * 1696736068 ^ -1874266489;
            continue;
          case 20:
            num1 = (int) num2 * 1636728033 ^ -873197153;
            continue;
          case 21:
            int num7 = !flag1 ? -89342831 : (num7 = -1469842292);
            num1 = num7 ^ (int) num2 * 1877591377;
            continue;
          case 22:
            num1 = (int) num2 * -1326853502 ^ -1950139288;
            continue;
          case 23:
            num1 = (int) num2 * 1889117825 ^ -1944271148;
            continue;
          case 24:
            int num8 = side ? -569452046 : (num8 = -777555154);
            num1 = num8 ^ (int) num2 * 1805816276;
            continue;
          case 25:
            num1 = 1161870461;
            continue;
          case 26:
            Square.action(this.msg);
            num1 = 1725764808;
            continue;
          case 27:
            if (to.Piece == null)
            {
              num3 = 0;
              break;
            }
            num1 = 1896755520;
            continue;
          case 28:
            num1 = (int) num2 * -1761729753 ^ -1114991358;
            continue;
          case 29:
            num1 = (int) num2 * -234044829 ^ 918522499;
            continue;
          case 30:
            int num9 = !flag3 ? -140967531 : (num9 = -522317930);
            num1 = num9 ^ (int) num2 * -453507412;
            continue;
          case 31:
            int num10 = !disableTurns ? 150663500 : (num10 = 1341449382);
            num1 = num10 ^ (int) num2 * 2146975767;
            continue;
          case 32:
            num1 = (int) num2 * 890069057 ^ -1866483403;
            continue;
          case 33:
            num1 = (int) num2 * 2055224886 ^ -1551012005;
            continue;
          case 34:
            num1 = (int) num2 * 873072502 ^ 1162782417;
            continue;
          case 35:
            to.HighLight();
            num1 = (int) num2 * -1478154870 ^ -1524252294;
            continue;
          case 36:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200C⁮‍‮‮⁯‫⁫⁭⁯⁭⁮‏⁫⁮‭⁪​⁫‍⁭‎‭‎‪⁬‌⁮‭⁮⁮⁮⁯⁮⁮⁭⁯⁮⁮⁮‮<string>(1925778304U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 125433809 ^ -1055198820;
            continue;
          case 37:
            side = this.getSide(this.Board.From);
            num1 = 891085427;
            continue;
          case 38:
            num1 = (int) num2 * 1182086271 ^ 1647882826;
            continue;
          case 39:
            num1 = (int) num2 * 1633607905 ^ -410197603;
            continue;
          case 40:
            int num11 = move2.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? -48641546 : (num11 = -354241698);
            num1 = num11 ^ (int) num2 * -189973191;
            continue;
          case 41:
            num1 = (int) num2 * -255102718 ^ -1182821801;
            continue;
          case 42:
            num1 = (int) num2 * -1906833524 ^ 1249771092;
            continue;
          case 43:
            this.Board.From = to;
            num1 = (int) num2 * 654181567 ^ -840793121;
            continue;
          case 44:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 637984839 ^ 1643756370;
            continue;
          case 45:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -74357587 ^ -737518095;
            continue;
          case 46:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 812453599 ^ 2082075009;
            continue;
          case 47:
            to = this;
            if (this.Board.From != null)
            {
              num1 = (int) num2 * -824845624 ^ -180818224;
              continue;
            }
            num4 = 0;
            goto label_65;
          case 48:
            int num12 = !flag2 ? -1520117806 : (num12 = -2018466026);
            num1 = num12 ^ (int) num2 * 1567270328;
            continue;
          case 49:
            num1 = (int) num2 * 915593999 ^ 1893454872;
            continue;
          case 50:
            num1 = (int) num2 * 858781657 ^ 1305480006;
            continue;
          case 51:
            this.msg = \u003CModule\u003E.\u202E‏‬‌⁯‪‬​⁭‌‎‬‮‮‍⁬‭​‍‭⁫‫‭⁫‮‪‮‏⁫‭⁬‎⁬​‏​‪‍‏‬‮<string>(3176126214U);
            num1 = (int) num2 * -55688233 ^ 1586803718;
            continue;
          case 52:
            move1 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * -1812944495 ^ -1844528411;
            continue;
          case 53:
            num1 = 709685754;
            continue;
          case 54:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -739902410 ^ -1207307792;
            continue;
          case 55:
            num1 = (int) num2 * 348190808 ^ 689280942;
            continue;
          case 56:
            flag5 = this.Board.From.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * -303694572 ^ 1237523269;
            continue;
          case 57:
            disableTurns = this.Board.DisableTurns;
            num1 = 1952158748;
            continue;
          case 58:
            flag1 = flag6;
            num1 = 826590178;
            continue;
          case 59:
            num1 = 74715822;
            continue;
          case 60:
            flag3 = Square.\u202A‮⁪⁪​‬⁪⁯​‌‬⁬‌⁭‌‭⁮‍⁮⁬⁭‌‎‌‍⁪⁫⁪‭‍⁮‫‎‎‏‮‪‬⁭⁮‮(e) == MouseButtons.Left;
            num1 = (int) num2 * 90942197 ^ -1098736563;
            continue;
          case 61:
            move2 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * 1250061276 ^ -1825072361;
            continue;
          case 62:
            this.msg = \u003CModule\u003E.\u206B‮‪⁪‬⁬⁭⁫⁮⁭⁭‍⁪‫‫⁫‍⁬⁬⁫‪⁭⁮‌‭⁬‏‮‬‮‪‍‬⁫​‭⁬⁬⁭⁫‮<string>(1270368491U);
            num1 = (int) num2 * 85713558 ^ -1627755294;
            continue;
          case 63:
            num1 = (int) num2 * 205772355 ^ -695268014;
            continue;
          case 64:
            flag7 = to.Piece.Id == this.Board.From.Piece.Id;
            num1 = (int) num2 * -586132601 ^ 162157026;
            continue;
          case 65:
            int num13 = !flag7 ? -447052032 : (num13 = -571052793);
            num1 = num13 ^ (int) num2 * 1942065650;
            continue;
          case 66:
            to.HighLight();
            num1 = (int) num2 * -495138177 ^ -1462720746;
            continue;
          case 67:
            to.HighLight();
            num1 = (int) num2 * 2146652680 ^ -1360432497;
            continue;
          case 68:
            goto label_1;
          case 69:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 690952041 ^ -1256093975;
            continue;
          case 70:
            num1 = (int) num2 * 1089637065 ^ -1047788408;
            continue;
          case 71:
            num4 = this.Board.From.Piece != null ? 1 : 0;
            goto label_65;
          case 72:
            num1 = (int) num2 * 1341929591 ^ 1258383197;
            continue;
          case 73:
            int num14;
            num1 = num14 = this.Board.From.Piece.Color == to.Piece.Color ? 1984052981 : (num14 = 1600960252);
            continue;
          case 74:
            this.msg = \u003CModule\u003E.\u200C⁪⁬‬⁪⁪⁬‭⁭⁫⁭⁪⁭⁪⁭‭‌⁭‎⁭‮⁬⁭‍​⁯‬⁫‌‮‎‫‏‬‭​​​⁮⁮‮<string>(1649362347U);
            num1 = 709685754;
            continue;
          case 75:
            int num15 = flag4 ? 1623186932 : (num15 = 2145571421);
            num1 = num15 ^ (int) num2 * -1200433076;
            continue;
          case 76:
            this.msg = \u003CModule\u003E.\u200C⁮‍‮‮⁯‫⁫⁭⁯⁭⁮‏⁫⁮‭⁪​⁫‍⁭‎‭‎‪⁬‌⁮‭⁮⁮⁮⁯⁮⁮⁭⁯⁮⁮⁮‮<string>(2440296431U);
            num1 = (int) num2 * 1217757520 ^ 1660132027;
            continue;
          case 77:
            num1 = (int) num2 * 146036135 ^ -332384880;
            continue;
          case 78:
            num1 = (int) num2 * -581623040 ^ 1901780391;
            continue;
          case 79:
            num1 = (int) num2 * 1323891380 ^ -2096976686;
            continue;
          case 80:
            num1 = (int) num2 * 1437579370 ^ 1266998431;
            continue;
          case 81:
            num1 = (int) num2 * 2013759158 ^ 718362116;
            continue;
          case 82:
            num1 = (int) num2 * -774783738 ^ -1893894317;
            continue;
          case 83:
            this.msg = \u003CModule\u003E.\u200C⁮‍‮‮⁯‫⁫⁭⁯⁭⁮‏⁫⁮‭⁪​⁫‍⁭‎‭‎‪⁬‌⁮‭⁮⁮⁮⁯⁮⁮⁭⁯⁮⁮⁮‮<string>(1383749057U);
            num1 = (int) num2 * -1739834158 ^ -1549588493;
            continue;
          default:
            goto label_92;
        }
        int num16;
        num1 = num16 = num3 != 0 ? 1318101711 : (num16 = 463857353);
        continue;
label_65:
        flag6 = num4 != 0;
        flag4 = to.Piece == null & flag6;
        num1 = 41050872;
      }
label_3:
      return;
label_92:;
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = 1590899547;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 960743675)) % 7U)
        {
          case 0:
            goto label_3;
          case 1:
            flag = this.Board.From != null;
            num1 = (int) num2 * -314659433 ^ 2140768714;
            continue;
          case 2:
            int num3 = !flag ? -1536361623 : (num3 = -247987491);
            num1 = num3 ^ (int) num2 * -378312137;
            continue;
          case 3:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -243314634 ^ 1893077317;
            continue;
          case 4:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * -1008739756 ^ 971356070;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * 1380158811 ^ -461070662;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    private void CaptPawn(Square from)
    {
label_1:
      int num1 = 536769071;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1248667970)) % 30U)
        {
          case 0:
            from.Piece = (ChessPiece) null;
            num1 = 1946824835;
            continue;
          case 1:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            this.handleBlackCastling();
            num1 = (int) num2 * 1903418688 ^ -1462144568;
            continue;
          case 2:
            flag5 = from.Piece.Color == PieceColor.White;
            num1 = 1257251133;
            continue;
          case 3:
            num3 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 4:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -160512914 ^ -1884413915;
              continue;
            }
            num3 = 0;
            break;
          case 5:
            int num5;
            num1 = num5 = this.Piece.Color != PieceColor.Black ? 147046850 : (num5 = 1034348419);
            continue;
          case 6:
            num1 = 919834717;
            continue;
          case 7:
            int num6 = !flag5 ? 660141579 : (num6 = 62190712);
            num1 = num6 ^ (int) num2 * 1041248573;
            continue;
          case 9:
            flag1 = true;
            num1 = (int) num2 * 2047571643 ^ -1280824843;
            continue;
          case 10:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = 738316202;
            continue;
          case 11:
            num1 = (int) num2 * 1191053206 ^ -2043281824;
            continue;
          case 12:
            this.Piece = from.Piece;
            flag1 = false;
            num1 = 1666046765;
            continue;
          case 13:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * 1566799936 ^ -1953079539;
            continue;
          case 14:
            num1 = 147046850;
            continue;
          case 15:
            num1 = (int) num2 * 612976081 ^ -1922879909;
            continue;
          case 16:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 578180439 ^ 698546594;
            continue;
          case 17:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 1420867598 ^ -1108621477;
            continue;
          case 18:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_20;
          case 19:
            this.handleWhiteCastling();
            num1 = (int) num2 * -863757027 ^ 137242137;
            continue;
          case 20:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = 802075756;
            continue;
          case 21:
            flag4 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -1021571911 ^ 1670412482;
            continue;
          case 22:
            flag1 = true;
            num1 = (int) num2 * -132858640 ^ 2109184722;
            continue;
          case 23:
            flag2 = flag1;
            num1 = (int) num2 * -1114162806 ^ 1451640458;
            continue;
          case 24:
            if (flag2)
            {
              num1 = (int) num2 * -1329410717 ^ 1873434033;
              continue;
            }
            goto label_56;
          case 25:
            int num7 = flag4 ? -1046847094 : (num7 = -642860658);
            num1 = num7 ^ (int) num2 * -902494523;
            continue;
          case 26:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              goto label_20;
            }
            else
            {
              num1 = (int) num2 * -173283950 ^ 834168742;
              continue;
            }
          case 27:
            int num8 = this.Piece.Color != PieceColor.White ? -1056924311 : (num8 = -547753969);
            num1 = num8 ^ (int) num2 * 990517003;
            continue;
          case 28:
            int num9 = flag3 ? 1841483763 : (num9 = 1861168870);
            num1 = num9 ^ (int) num2 * -865480371;
            continue;
          case 29:
            goto label_1;
          default:
            goto label_38;
        }
        flag3 = num3 != 0;
        num1 = 1436076048;
        continue;
label_20:
        int num10;
        num1 = num10 = num4 != 0 ? 1822460756 : (num10 = 541034098);
      }
label_38:
      Promotion promotion = new Promotion(Square.\u200E‮‬​⁯‫​‮​⁮‍‌‪​‭‏‭‮⁪‏⁬‮⁬⁬‎‭​⁯‎⁬‎⁮⁪‎‬⁫‌‮⁬‍‮());
      try
      {
label_40:
        int num11 = 618623986;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 1248667970)) % 5U)
          {
            case 0:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * -1826319069 ^ 1896078349;
              continue;
            case 2:
              goto label_40;
            case 3:
              num11 = (int) num12 * -1815795319 ^ -1233258157;
              continue;
            case 4:
              int num13 = (int) Square.\u200D‌‍‍⁭⁯⁯‫‭‬‬‌⁮‭⁪‍‏​‮⁯‍‭⁮​⁯⁪‮‌‏‬‬⁯⁭‭‫‏‫‌‮‏‮((Form) promotion);
              num11 = (int) num12 * 1636536249 ^ -432387407;
              continue;
            default:
              goto label_51;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_46:
          int num14 = 1377589820;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 1248667970)) % 4U)
            {
              case 0:
                goto label_46;
              case 2:
                Square.\u200E‫‮⁯‭⁫‭⁮‪‬​‪‬⁫⁮‍‍​​‬⁭​‌‪‫‪‎⁯‮⁭‬‏‭⁯⁯‪‫‭‮⁮‮((IDisposable) promotion);
                num14 = (int) num15 * -1146730635 ^ -742687521;
                continue;
              case 3:
                num14 = (int) num15 * 898850609 ^ -119326500;
                continue;
              default:
                goto label_50;
            }
          }
        }
label_50:;
      }
label_51:
label_52:
      int num16 = 368959668;
label_53:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ 1248667970)) % 5U)
        {
          case 1:
            goto label_56;
          case 2:
            goto label_52;
          case 3:
            PlaySound.Play();
            num16 = (int) num17 * -38466307 ^ 2111228399;
            continue;
          case 4:
            num16 = (int) num17 * 1361984844 ^ -925805170;
            continue;
          default:
            goto label_57;
        }
      }
label_57:
      this.SwitchPlayer();
      return;
label_56:
      this.Board.lights.FindAllMoves();
      num16 = 1129526196;
      goto label_53;
    }

    private void MovePawn(Square from)
    {
label_1:
      int num1 = -1930569574;
      ChessPiece chessPiece;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -1551705172)) % 30U)
        {
          case 0:
            num1 = (int) num2 * -1101364514 ^ -2145118057;
            continue;
          case 1:
            int num6 = !flag4 ? -1238522070 : (num6 = -546527872);
            num1 = num6 ^ (int) num2 * -876480562;
            continue;
          case 2:
            int num7 = flag2 ? -490501760 : (num7 = -1046070859);
            num1 = num7 ^ (int) num2 * 589297337;
            continue;
          case 3:
            goto label_1;
          case 4:
            chessPiece = this.handleBlackCastling();
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              goto label_25;
            }
            else
            {
              num1 = (int) num2 * -2128291848 ^ -865486785;
              continue;
            }
          case 5:
            num1 = -789868850;
            continue;
          case 6:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = -1295283166;
            continue;
          case 7:
            num3 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_25;
          case 8:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * 1517640127 ^ -1848142619;
            continue;
          case 9:
            if (flag6)
            {
              num1 = (int) num2 * 584378009 ^ -217758578;
              continue;
            }
            goto label_94;
          case 10:
            if (this.Rank != 3)
            {
              num1 = (int) num2 * -2009619379 ^ 1714802785;
              continue;
            }
            num4 = 1;
            goto label_21;
          case 11:
            this.Board.lastPassantPawn = (ChessPiece) null;
            flag7 = this.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * 1958027080 ^ 1897887192;
            continue;
          case 12:
            flag5 = false;
            flag1 = this.Piece.Color == PieceColor.White;
            int num8;
            num1 = num8 = !flag1 ? -1004417300 : (num8 = -2129316365);
            continue;
          case 13:
            flag5 = true;
            num1 = (int) num2 * -19995622 ^ -1413898587;
            continue;
          case 14:
            chessPiece = this.handleWhiteCastling();
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 1464004003 ^ -307810817;
              continue;
            }
            num5 = 0;
            break;
          case 15:
            flag6 = flag5;
            num1 = (int) num2 * -718490757 ^ 920325642;
            continue;
          case 16:
            int num9 = flag7 ? -231392678 : (num9 = -447864224);
            num1 = num9 ^ (int) num2 * 1327111158;
            continue;
          case 17:
            num1 = (int) num2 * 1448082057 ^ 1383026052;
            continue;
          case 18:
            num1 = -789868850;
            continue;
          case 19:
            num1 = -183293528;
            continue;
          case 20:
            chessPiece = (ChessPiece) null;
            num1 = (int) num2 * -836034653 ^ 84217762;
            continue;
          case 21:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -785336645 ^ 1886178741;
            continue;
          case 22:
            flag5 = true;
            num1 = (int) num2 * 1467258399 ^ 999769658;
            continue;
          case 23:
            num1 = (int) num2 * -412313663 ^ 2081894862;
            continue;
          case 24:
            int num10 = flag3 ? 1961196771 : (num10 = 610993523);
            num1 = num10 ^ (int) num2 * -1661191572;
            continue;
          case 25:
            num4 = this.Rank == 4 ? 1 : 0;
            goto label_21;
          case 26:
            this.Piece = from.Piece;
            num1 = (int) num2 * 966625743 ^ -262242192;
            continue;
          case 27:
            num5 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 28:
            from.Piece = (ChessPiece) null;
            num1 = -208202661;
            continue;
          default:
            goto label_41;
        }
        flag3 = num5 != 0;
        num1 = -1059786616;
        continue;
label_21:
        flag2 = num4 != 0;
        num1 = -1727123006;
        continue;
label_25:
        flag4 = num3 != 0;
        num1 = -1021568627;
      }
label_41:
      Promotion promotion = new Promotion(Square.\u200E‮‬​⁯‫​‮​⁮‍‌‪​‭‏‭‮⁪‏⁬‮⁬⁬‎‭​⁯‎⁬‎⁮⁪‎‬⁫‌‮⁬‍‮());
      try
      {
label_43:
        int num11 = -266682481;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ -1551705172)) % 3U)
          {
            case 0:
              goto label_43;
            case 1:
              int num13 = (int) Square.\u200D‌‍‍⁭⁯⁯‫‭‬‬‌⁮‭⁪‍‏​‮⁯‍‭⁮​⁯⁪‮‌‏‬‬⁯⁭‭‫‏‫‌‮‏‮((Form) promotion);
              num11 = (int) num12 * 1492287357 ^ -1378658875;
              continue;
            default:
              goto label_46;
          }
        }
label_46:
        this.Kind = promotion.Piece;
      }
      finally
      {
        if (promotion != null)
        {
label_48:
          int num14 = -226542447;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -1551705172)) % 4U)
            {
              case 1:
                Square.\u200E‫‮⁯‭⁫‭⁮‪‬​‪‬⁫⁮‍‍​​‬⁭​‌‪‫‪‎⁯‮⁭‬‏‭⁯⁯‪‫‭‮⁮‮((IDisposable) promotion);
                num14 = (int) num15 * 1881762915 ^ 1904280132;
                continue;
              case 2:
                goto label_48;
              case 3:
                num14 = (int) num15 * 571057750 ^ -1107330718;
                continue;
              default:
                goto label_53;
            }
          }
        }
label_53:;
      }
label_54:
      int num16 = -1010427873;
label_55:
      while (true)
      {
        uint num17;
        int file;
        int rank;
        Square square1;
        bool isOnCheck;
        bool flag8;
        bool flag9;
        bool flag10;
        Square square2;
        switch ((num17 = (uint) (num16 ^ -1551705172)) % 44U)
        {
          case 0:
            this.Board.lights.FindAllMoves();
            num16 = (int) num17 * 1833885092 ^ 1146794146;
            continue;
          case 1:
            rank = chessPiece.Current.Rank;
            if (file != 5)
            {
              num16 = (int) num17 * -817067926 ^ -39033864;
              continue;
            }
            square2 = this.Board[7, rank];
            break;
          case 2:
            isOnCheck = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -1830286004 ^ -1635582436;
            continue;
          case 3:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            this.Board.WhiteCanCastleQueenSide = true;
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * -1525328919 ^ -580557180;
            continue;
          case 4:
            num16 = (int) num17 * 1571101298 ^ -1331441621;
            continue;
          case 5:
            flag8 = chessPiece != null;
            num16 = -1788547280;
            continue;
          case 6:
            num16 = (int) num17 * 26798229 ^ -2100159141;
            continue;
          case 7:
            goto label_56;
          case 8:
            this.msg = \u003CModule\u003E.\u200C⁪⁬‬⁪⁪⁬‭⁭⁫⁭⁪⁭⁪⁭‭‌⁭‎⁭‮⁬⁭‍​⁯‬⁫‌‮‎‫‏‬‭​​​⁮⁮‮<string>(1247151060U);
            num16 = (int) num17 * 1996307221 ^ 812880656;
            continue;
          case 9:
            num16 = (int) num17 * -779853468 ^ 433279626;
            continue;
          case 10:
            int num18 = !flag10 ? -1883211047 : (num18 = -845179147);
            num16 = num18 ^ (int) num17 * -829131884;
            continue;
          case 11:
            from.Piece = this.Piece;
            num16 = (int) num17 * -936941669 ^ -1471387909;
            continue;
          case 12:
            int num19 = flag8 ? 2115678246 : (num19 = 1063494551);
            num16 = num19 ^ (int) num17 * -949458073;
            continue;
          case 13:
            num16 = (int) num17 * -30684217 ^ 2067445093;
            continue;
          case 14:
            flag9 = true;
            flag10 = this.Piece.Kind == Pieces.King;
            num16 = (int) num17 * 42431088 ^ -1164031098;
            continue;
          case 15:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * -572957873 ^ 1838151641;
            continue;
          case 16:
            num16 = (int) num17 * -423439896 ^ 1210353826;
            continue;
          case 17:
            int num20;
            num16 = num20 = !flag9 ? -117858999 : (num20 = -1344945441);
            continue;
          case 18:
            num16 = -112170068;
            continue;
          case 19:
            goto label_94;
          case 20:
            int num21 = this.Board.lights.KingColorOnCheck != this.Piece.Color ? -1220576098 : (num21 = -274681299);
            num16 = num21 ^ (int) num17 * -943910970;
            continue;
          case 21:
            num16 = -889164094;
            continue;
          case 22:
            num16 = -1720883909;
            continue;
          case 23:
            num16 = (int) num17 * 1293398969 ^ 1691450236;
            continue;
          case 24:
            num16 = (int) num17 * 2036948137 ^ 1597433741;
            continue;
          case 25:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = -443828476;
            continue;
          case 26:
            file = chessPiece.Current.File;
            num16 = (int) num17 * 2141122156 ^ -1792747623;
            continue;
          case 27:
            PlaySound.Play();
            num16 = -685248535;
            continue;
          case 28:
            square1.Piece = chessPiece;
            int num22 = !flag1 ? 1918457501 : (num22 = 2041414673);
            num16 = num22 ^ (int) num17 * 728629911;
            continue;
          case 29:
            goto label_54;
          case 30:
            this.Piece = (ChessPiece) null;
            this.msg = \u003CModule\u003E.\u200C⁪⁬‬⁪⁪⁬‭⁭⁫⁭⁪⁭⁪⁭‭‌⁭‎⁭‮⁬⁭‍​⁯‬⁫‌‮‎‫‏‬‭​​​⁮⁮‮<string>(4150947158U);
            int num23 = flag1 ? 162249611 : (num23 = 638396627);
            num16 = num23 ^ (int) num17 * 1904179704;
            continue;
          case 31:
            this.Board.lights.FindAllMoves();
            num16 = -360885857;
            continue;
          case 32:
            num16 = (int) num17 * 161506965 ^ -107102472;
            continue;
          case 33:
            flag9 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -999798926 ^ -2080176740;
            continue;
          case 34:
            num16 = (int) num17 * 1496845859 ^ 1614698405;
            continue;
          case 35:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = -1903384063;
            continue;
          case 36:
            num16 = (int) num17 * -752503382 ^ 1734759789;
            continue;
          case 37:
            num16 = (int) num17 * 2049401923 ^ -581254920;
            continue;
          case 38:
            square2 = this.Board[0, rank];
            break;
          case 39:
            num16 = (int) num17 * -1347320339 ^ -1389810381;
            continue;
          case 40:
            int num24 = !isOnCheck ? 786101131 : (num24 = 1741474020);
            num16 = num24 ^ (int) num17 * -1023899214;
            continue;
          case 41:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            this.Board.BlackCanCastleQueenSide = true;
            this.Board.BlackCanCastleKingSide = true;
            num16 = -41667851;
            continue;
          case 42:
            this.SwitchPlayer();
            num16 = (int) num17 * 1485199919 ^ -958830900;
            continue;
          case 43:
            num16 = (int) num17 * 1935421633 ^ -1253123840;
            continue;
          default:
            goto label_50;
        }
        square1 = square2;
        num16 = -223487712;
      }
label_56:
      return;
label_50:
      return;
label_94:
      this.Board.lights.IsOnCheck = false;
      num16 = -445718284;
      goto label_55;
    }

    private ChessPiece handleBlackCastling()
    {
label_1:
      int num1 = 1370983015;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        bool flag1;
        Square square1;
        ChessPiece chessPiece2;
        bool flag2;
        bool flag3;
        Square square2;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1041058934)) % 40U)
        {
          case 0:
            num1 = (int) num2 * 708889575 ^ -983011332;
            continue;
          case 1:
            num1 = 898197358;
            continue;
          case 2:
            num1 = 344736232;
            continue;
          case 3:
            num1 = (int) num2 * -1033866870 ^ -1295415680;
            continue;
          case 4:
            num1 = (int) num2 * 584718514 ^ -190926385;
            continue;
          case 5:
            int num5 = !Square.\u200E⁪‬⁬⁫⁬⁫‫‏⁭⁫⁪⁭‪‏⁭⁮⁯⁬‭‌‎⁭⁭⁪⁬‭⁬‪‍⁮⁯⁭⁮⁮⁮‪‎⁮‍‮(this.Piece.Home.Name, \u003CModule\u003E.\u200C⁮‍‮‮⁯‫⁫⁭⁯⁭⁮‏⁫⁮‭⁪​⁫‍⁭‎‭‎‪⁬‌⁮‭⁮⁮⁮⁯⁮⁮⁭⁯⁮⁮⁮‮<string>(1328726817U)) ? -484363914 : (num5 = -1757719887);
            num1 = num5 ^ (int) num2 * -754709582;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * 1886802383 ^ -949490116;
            continue;
          case 8:
            num1 = (int) num2 * -848810820 ^ 2081769444;
            continue;
          case 9:
            flag3 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * -1643675839 ^ -1445519792;
            continue;
          case 10:
            num1 = 440816084;
            continue;
          case 11:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_17;
          case 12:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * 473834461 ^ -401310650;
            continue;
          case 13:
            int num6 = flag2 ? -1025486281 : (num6 = -1499468678);
            num1 = num6 ^ (int) num2 * -1340880202;
            continue;
          case 14:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 856413679 ^ -1964855176;
            continue;
          case 15:
            square2.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * 1572447164 ^ -77866987;
            continue;
          case 17:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * 439064786 ^ -1051518175;
            continue;
          case 18:
            this.Board.BlackCanCastleKingSide = false;
            num1 = 1786119791;
            continue;
          case 19:
            num4 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            break;
          case 20:
            flag4 = this.Piece.Current.File == 6;
            num1 = 1241078231;
            continue;
          case 21:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * 1239241558 ^ 1237101890;
            continue;
          case 22:
            chessPiece1 = chessPiece2;
            num1 = 222032301;
            continue;
          case 23:
            num1 = (int) num2 * 1128121334 ^ 755270501;
            continue;
          case 24:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 802185094 ^ 1084083317;
              continue;
            }
            num3 = 1;
            goto label_17;
          case 25:
            int num7 = !flag4 ? 1926292791 : (num7 = 999012824);
            num1 = num7 ^ (int) num2 * -1981994867;
            continue;
          case 26:
            num1 = (int) num2 * 183476582 ^ 935676179;
            continue;
          case 27:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1017866674 ^ 1642599102;
            continue;
          case 28:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = 2011268136;
            continue;
          case 29:
            if (this.Board.BlackCanCastleKingSide)
            {
              num4 = 1;
              break;
            }
            num1 = (int) num2 * 233993902 ^ -630653429;
            continue;
          case 30:
            int num8 = !flag1 ? -747675748 : (num8 = -485697552);
            num1 = num8 ^ (int) num2 * -475002783;
            continue;
          case 31:
            flag1 = this.Piece.Current.File == 2;
            num1 = 1599515648;
            continue;
          case 32:
            num1 = (int) num2 * -694420954 ^ -1432387853;
            continue;
          case 33:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * -487767905 ^ 568075141;
            continue;
          case 34:
            square1 = this.Board[3, 7];
            num1 = (int) num2 * 26112754 ^ -238604297;
            continue;
          case 35:
            square2 = this.Board[5, 7];
            num1 = (int) num2 * 940300771 ^ 2071932504;
            continue;
          case 36:
            num1 = (int) num2 * 2019984906 ^ 254359186;
            continue;
          case 37:
            square1.Piece = this.Board[0, 7].Piece;
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 695471405 ^ -941044085;
            continue;
          case 38:
            this.Board.BlackCanCastleKingSide = false;
            num1 = (int) num2 * 1762191811 ^ -1884510002;
            continue;
          case 39:
            int num9 = flag3 ? -1784674579 : (num9 = -971843118);
            num1 = num9 ^ (int) num2 * -1683498523;
            continue;
          default:
            goto label_47;
        }
        int num10;
        num1 = num10 = num4 != 0 ? 1109167574 : (num10 = 344736232);
        continue;
label_17:
        flag2 = num3 != 0;
        num1 = 1501222211;
      }
label_47:
      return chessPiece1;
    }

    private ChessPiece handleWhiteCastling()
    {
label_1:
      int num1 = 1159032937;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        Square square1;
        ChessPiece chessPiece2;
        Square square2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 288359094)) % 39U)
        {
          case 0:
            this.Board[7, 0].Piece = (ChessPiece) null;
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * -1523318581 ^ -1165958096;
            continue;
          case 1:
            num3 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            break;
          case 2:
            int num5;
            num1 = num5 = this.Piece.Current.File != 2 ? 1424285439 : (num5 = 1229159863);
            continue;
          case 3:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = 1928841168;
            continue;
          case 4:
            num1 = (int) num2 * -923080999 ^ -844616384;
            continue;
          case 5:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 580723717;
            continue;
          case 6:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_43;
          case 7:
            chessPiece1 = chessPiece2;
            num1 = 1587694922;
            continue;
          case 8:
            flag1 = Square.\u200E⁪‬⁬⁫⁬⁫‫‏⁭⁫⁪⁭‪‏⁭⁮⁯⁬‭‌‎⁭⁭⁪⁬‭⁬‪‍⁮⁯⁭⁮⁮⁮‪‎⁮‍‮(this.Piece.Home.Name, \u003CModule\u003E.\u202E‏‬‌⁯‪‬​⁭‌‎‬‮‮‍⁬‭​‍‭⁫‫‭⁫‮‪‮‏⁫‭⁬‎⁬​‏​‪‍‏‬‮<string>(3848556747U));
            num1 = (int) num2 * 1805669727 ^ 1996910625;
            continue;
          case 9:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * -916616289 ^ -107130873;
            continue;
          case 10:
            square2 = this.Board[3, 0];
            num1 = (int) num2 * -1758508764 ^ 1241927921;
            continue;
          case 11:
            flag2 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * -355424015 ^ -1970306975;
            continue;
          case 12:
            num1 = 1168766908;
            continue;
          case 13:
            num1 = (int) num2 * -612036488 ^ 799985459;
            continue;
          case 14:
            chessPiece2 = (ChessPiece) null;
            if (!this.Board.WhiteCanCastleKingSide)
            {
              num1 = (int) num2 * -486607733 ^ 1104888596;
              continue;
            }
            num3 = 1;
            break;
          case 15:
            num1 = 2099371502;
            continue;
          case 17:
            num1 = (int) num2 * 145840948 ^ -1634214157;
            continue;
          case 18:
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -1231059315 ^ 968913553;
            continue;
          case 19:
            int num6 = flag4 ? 631947485 : (num6 = 350787077);
            num1 = num6 ^ (int) num2 * -1218492120;
            continue;
          case 20:
            num1 = (int) num2 * 1873746590 ^ -913583821;
            continue;
          case 21:
            int num7 = !flag1 ? -1410924063 : (num7 = -1422306348);
            num1 = num7 ^ (int) num2 * 1077558307;
            continue;
          case 22:
            num1 = (int) num2 * -1201276921 ^ -1898279611;
            continue;
          case 23:
            square1.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * 912170285 ^ -183906129;
            continue;
          case 24:
            num1 = (int) num2 * -1511594138 ^ 819263091;
            continue;
          case 25:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 1873638894 ^ 334942821;
              continue;
            }
            num4 = 1;
            goto label_43;
          case 26:
            square1 = this.Board[5, 0];
            num1 = (int) num2 * -1668834176 ^ 6252304;
            continue;
          case 27:
            num1 = (int) num2 * -578409774 ^ 1340977743;
            continue;
          case 28:
            flag4 = this.Piece.Current.File == 6;
            num1 = 1414289938;
            continue;
          case 29:
            goto label_1;
          case 30:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * -88130 ^ 1988196080;
            continue;
          case 31:
            num1 = 847951458;
            continue;
          case 32:
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * 1101158810 ^ 673368783;
            continue;
          case 33:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 1423618145 ^ -915321969;
            continue;
          case 34:
            int num8 = flag2 ? 698370557 : (num8 = 402351227);
            num1 = num8 ^ (int) num2 * 783571146;
            continue;
          case 35:
            square2.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * 244845640 ^ -1782821785;
            continue;
          case 36:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * -1431988106 ^ -4736179;
            continue;
          case 37:
            num1 = (int) num2 * -1360846034 ^ -1464881081;
            continue;
          case 38:
            int num9 = !flag3 ? 1717018825 : (num9 = 947720784);
            num1 = num9 ^ (int) num2 * -735335211;
            continue;
          default:
            goto label_46;
        }
        flag3 = num3 != 0;
        num1 = 1339127753;
        continue;
label_43:
        int num10;
        num1 = num10 = num4 == 0 ? 2099371502 : (num10 = 1758716397);
      }
label_46:
      return chessPiece1;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = 1968180212;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 873856779)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1209499399 ^ 494374314;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            Square.\u202B⁭‎⁯⁬​‎​‪​‎⁮‏⁯‮‏⁫‍‎‪‭‫‌‎‮⁪‎‮‬⁯‎‮⁭‮‫‫⁫⁫⁫⁮‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * 628544221 ^ -1194515928;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = 1416319608;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 564727322)) % 8U)
        {
          case 1:
            int num4 = flag ? 406718276 : (num4 = 2125316983);
            num1 = num4 ^ (int) num2 * 1928662941;
            continue;
          case 2:
            if (disposing)
            {
              num1 = (int) num2 * 1747529158 ^ -1482174008;
              continue;
            }
            num3 = 0;
            break;
          case 3:
            num1 = (int) num2 * 853663624 ^ 1611249719;
            continue;
          case 4:
            num1 = (int) num2 * -642706112 ^ 691535914;
            continue;
          case 5:
            Square.\u200E‫‮⁯‭⁫‭⁮‪‬​‪‬⁫⁮‍‍​​‬⁭​‌‪‫‪‎⁯‮⁭‬‏‭⁯⁯‪‫‭‮⁮‮((IDisposable) this.components);
            num1 = (int) num2 * -465656521 ^ -1750243219;
            continue;
          case 6:
            num3 = this.components != null ? 1 : 0;
            break;
          case 7:
            goto label_1;
          default:
            goto label_12;
        }
        flag = num3 != 0;
        num1 = 169871323;
      }
label_12:
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = -760755904;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1779831104)) % 12U)
        {
          case 0:
            num1 = (int) num2 * 698268939 ^ 959404107;
            continue;
          case 1:
            num1 = (int) num2 * 181877890 ^ -1177322134;
            continue;
          case 2:
            this.Name = \u003CModule\u003E.\u200E‎⁯‪‍‏‫‎‮⁭​‬‫‌‮‭⁬‪⁪⁬⁭‮‏‎​‫‏‏‭‌⁫⁭⁮⁭‫⁯‭‫‭‫‮<string>(3862089603U);
            num1 = (int) num2 * -1535875646 ^ 86591422;
            continue;
          case 3:
            Square.\u200D‫‫‫‌⁪‎⁫​⁫⁬‎‭⁪‌‭‏⁪‍​‎⁪‬​‪‏‭⁪‭⁮‌⁬⁭‎‍‪⁯‎⁪⁯‮((Control) this, new Padding(0));
            num1 = (int) num2 * 1774031927 ^ -132880141;
            continue;
          case 4:
            Square.\u202C⁮‮‏‏‍⁯​‭‬⁯‎⁮‪‬‎‮​‏‌⁮‌‪⁭‬⁯‮⁮⁭‏‌‏‭‪⁯‪⁮‮‭‪‮((Control) this);
            num1 = (int) num2 * 2133926893 ^ 1617260988;
            continue;
          case 5:
            num1 = (int) num2 * -2066340933 ^ -1882588180;
            continue;
          case 6:
            Square.\u206A⁫‪‭‭⁮⁫⁫‫⁬‌‭​⁫‌⁬⁯‎‌‮⁫⁯‬‍⁮‪‍‬⁪‬​‎‬⁮‫‭‍‌‌‏‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 1350922758 ^ -161942373;
            continue;
          case 7:
            Square.\u200D​‏‎⁬‌‫‫⁪‫‍‍‌⁪⁭⁮‍​‫‌‎‭⁯‌⁫‭‭⁫⁪⁫‭⁫⁬⁫⁯‌⁫⁪‮((Control) this, false);
            num1 = (int) num2 * -506549730 ^ -1146270232;
            continue;
          case 8:
            Square.\u202A⁫‍⁯‬‭⁫‎⁮‬⁮‮⁮​⁪⁪‎‬‮‬‍‫⁯‌‬‬‏‬⁬‭‎​⁯⁭‬⁭‫⁮‬‏‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -318394298 ^ 189385349;
            continue;
          case 9:
            goto label_1;
          case 10:
            goto label_3;
          case 11:
            Square.\u206A‌⁬‫⁮‮⁫⁯‏⁯‫⁭‎‮​⁭‎‌‭⁮​‫⁮⁯⁮‫⁭‏‍‍⁫​⁫⁬‎‌‮⁭⁪⁭‮((ContainerControl) this, new SizeF(6f, 13f));
            Square.\u202E‮‌‏‭‪‫⁪‏⁫‭‭‌‮‏​‬‍‎‮‍‎⁮‮⁭‍⁬‭⁫⁭‍⁭‪⁮‬‪‮‭⁭‮‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * -1656724779 ^ -1614899070;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    static Delegate \u200C​‏‮‭⁯​‍‫‪⁮⁪‭⁪‏‮‫⁭‪‪‎‭‎‍‪‎‪‮‭‬‏‍‮⁭⁮‪⁮⁭⁮‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u200F‬‬⁫⁭⁪⁪⁭​​⁫‏‪‬⁫⁮‭⁫‭⁫⁭‬‌‫⁫‌‎‫⁮‍⁭⁬‍​‫⁭‏‏‬‎‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u200E⁯‪‌‪‭⁭‬‎⁭‎‫‪‍‎⁫‌‪⁬‮⁮‎‬⁭‭‬⁫‎⁫‭‍⁬‬‎‭‏‌‮⁯⁮‮([In] object obj0) => obj0.ToString();

    static string \u200F‫⁬‫‭‭⁮‮⁫‪‍⁯‌‏⁫‍‫⁪⁯‬⁭​‬⁫‌‍‫‫⁫⁯‍‌⁪‬‍⁮‭‭⁪⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u202C‍⁭‪‬⁬⁬‪⁬⁭‌⁬‎⁯​⁭⁭​⁯⁬‫⁯‪‍‍‮‎‌‭​⁫⁫⁮⁮‏⁫‮⁮⁪⁯‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u202D‭‍‍​‭‫‎‮‬⁪⁯‍​​⁪‌⁬⁯‪⁬‬‍⁯‫‌⁬‪‎‌‍‍‭‪⁮⁯⁪‬‏‍‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u202A‮⁪⁪​‬⁪⁯​‌‬⁬‌⁭‌‭⁮‍⁮⁬⁭‌‎‌‍⁪⁫⁪‭‍⁮‫‎‎‏‮‪‬⁭⁮‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u206A‎‮‫⁯​⁫‌‫‏⁫‌‮⁯‍‬‪‎‮‬‪‪‬‎‭‬⁪‬⁭‭⁭⁫‮‪‎⁯​‌‬⁫‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u200E‮‬​⁯‫​‮​⁮‍‌‪​‭‏‭‮⁪‏⁬‮⁬⁬‎‭​⁯‎⁬‎⁮⁪‎‬⁫‌‮⁬‍‮() => Cursor.Position;

    static DialogResult \u200D‌‍‍⁭⁯⁯‫‭‬‬‌⁮‭⁪‍‏​‮⁯‍‭⁮​⁯⁪‮‌‏‬‬⁯⁭‭‫‏‫‌‮‏‮([In] Form obj0) => obj0.ShowDialog();

    static void \u200E‫‮⁯‭⁫‭⁮‪‬​‪‬⁫⁮‍‍​​‬⁭​‌‪‫‪‎⁯‮⁭‬‏‭⁯⁯‪‫‭‮⁮‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u200E⁪‬⁬⁫⁬⁫‫‏⁭⁫⁪⁭‪‏⁭⁮⁯⁬‭‌‎⁭⁭⁪⁬‭⁬‪‍⁮⁯⁭⁮⁮⁮‪‎⁮‍‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u202B⁭‎⁯⁬​‎​‪​‎⁮‏⁯‮‏⁫‍‎‪‭‫‌‎‮⁪‎‮‬⁯‎‮⁭‮‫‫⁫⁫⁫⁮‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u202C⁮‮‏‏‍⁯​‭‬⁯‎⁮‪‬‎‮​‏‌⁮‌‪⁭‬⁯‮⁮⁭‏‌‏‭‪⁯‪⁮‮‭‪‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u206A‌⁬‫⁮‮⁫⁯‏⁯‫⁭‎‮​⁭‎‌‭⁮​‫⁮⁯⁮‫⁭‏‍‍⁫​⁫⁬‎‌‮⁭⁪⁭‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u202E‮‌‏‭‪‫⁪‏⁫‭‭‌‮‏​‬‍‎‮‍‎⁮‮⁭‍⁬‭⁫⁭‍⁭‪⁮‬‪‮‭⁭‮‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u202A⁫‍⁯‬‭⁫‎⁮‬⁮‮⁮​⁪⁪‎‬‮‬‍‫⁯‌‬‬‏‬⁬‭‎​⁯⁭‬⁭‫⁮‬‏‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u200D‫‫‫‌⁪‎⁫​⁫⁬‎‭⁪‌‭‏⁪‍​‎⁪‬​‪‏‭⁪‭⁮‌⁬⁭‎‍‪⁯‎⁪⁯‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u206A⁫‪‭‭⁮⁫⁫‫⁬‌‭​⁫‌⁬⁯‎‌‮⁫⁯‬‍⁮‪‍‬⁪‬​‎‬⁮‫‭‍‌‌‏‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200D​‏‎⁬‌‫‫⁪‫‍‍‌⁪⁭⁮‍​‫‌‎‭⁯‌⁫‭‭⁫⁪⁫‭⁫⁬⁫⁯‌⁫⁪‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
