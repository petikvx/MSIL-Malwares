// Decompiled with JetBrains decompiler
// Type: MaterialSurface.TextButton
// Assembly: Func, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EFD38B4B-EBC7-4ADC-A92E-3AF74F6197CA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0b4d55da62340d71ea45226007214ecfa33b00b09e9cbd48736eaaf51cfd8125.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MaterialSurface
{
  public class TextButton : MaterialButton
  {
    [Category("Appearance Material")]
    [Description("Effect type on click.")]
    public ET EffectType
    {
      get => this.effectType;
      set
      {
        this.effectType = value;
        this.defaultAniOpacity = 140;
        this.aniDec = 5;
        if (this.effectType == ET.Light)
          this.primaryColor = Color.White;
        else if (this.effectType == ET.Dark)
        {
          this.primaryColor = Color.DimGray;
          this.defaultAniOpacity = 180;
          this.aniDec = 6;
        }
        this.aniOpacity = this.defaultAniOpacity;
      }
    }

    [Category("Appearance Material")]
    [Description("Heading icon (before text).")]
    public Image Icon
    {
      get => this.icon;
      set
      {
        this.icon = value;
        if (this.icon != null)
        {
          this.iconArea = new Rectangle(this.Width / 15, this.Height / 6, this.Height / 2 + this.Height / 5, this.Height / 2 + this.Height / 5);
          this.drawArea.X = this.iconArea.X + this.iconArea.Height + 4;
          this.drawArea.Width = this.Width - (this.iconArea.X + this.iconArea.Height + 4);
        }
        else
        {
          this.drawArea.X = 0;
          this.drawArea.Width = this.Width;
        }
        this.Invalidate();
      }
    }

    public TextButton()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.DoubleBuffered = true;
      this.Size = new Size(160, 40);
      this.ForeColor = Color.BlueViolet;
      this.Font = new Font("Segoe UI", 11f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.MouseState = MouseState.OUT;
      this.drawArea = new Rectangle(1, 1, this.Width - 2, this.Height - 2);
      this.maxSize = (float) (this.Width + 2);
      this.incSize = this.maxSize / 12f;
      this.animationDirector.Tick += new EventHandler(((MaterialButton) this).OnAnimate);
    }

    protected override void OnAnimate(object sender, EventArgs e)
    {
      if ((double) this.animationSize < (double) this.maxSize * 2.2)
      {
        this.aniOpacity -= this.aniDec;
        this.aniOpacity = this.aniOpacity < 0 ? 0 : this.aniOpacity;
        this.animationSize += this.incSize;
        this.Invalidate();
      }
      else
      {
        this.aniOpacity = this.defaultAniOpacity;
        this.animationSize = 0.0f;
        this.Invalidate();
        this.animationDirector.Stop();
        base.OnClick(this._eventArgs);
        base.OnMouseClick(this._mouseClickArgs);
      }
    }

    protected override void OnPaint(PaintEventArgs pevent)
    {
      base.OnPaint(pevent);
      Graphics graphics = pevent.Graphics;
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      GraphicsPath path = new GraphicsPath();
      Region region = new Region();
      if (this.Parent is MaterialCard)
        graphics.Clear(((MaterialCard) this.Parent).CardColor);
      else
        graphics.Clear(this.Parent.BackColor);
      if (this.Enabled)
      {
        path = GraphicHelper.GetRoundedRectangle(1f, 1f, (float) (this.Width - 2), (float) (this.Height - 2), this.radius);
        region = new Region(path);
        graphics.SetClip(region, CombineMode.Replace);
        graphics.SmoothingMode = SmoothingMode.HighSpeed;
        graphics.FillEllipse((Brush) new SolidBrush(Color.FromArgb(this.aniOpacity, this.primaryColor)), (float) this.mouseX - this.animationSize / 2f, (float) this.mouseY - this.animationSize / 2f, this.animationSize, this.animationSize);
        graphics.SmoothingMode = SmoothingMode.AntiAlias;
        if (this.MouseState == MouseState.HOVER || this.Focused && this.Enabled)
          graphics.FillPath((Brush) new SolidBrush(Color.FromArgb(Convert.ToInt32(Math.Round((double) this.defaultAniOpacity * 0.3, 0)), this.primaryColor)), path);
      }
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      if (this.icon != null)
        graphics.DrawImage(this.icon, this.iconArea);
      if (this.Enabled)
        graphics.DrawString(this.Text, this.Font, (Brush) new SolidBrush(this.ForeColor), (RectangleF) this.drawArea, this.textAlignment);
      else
        graphics.DrawString(this.Text, this.Font, (Brush) new SolidBrush(Color.FromArgb(125, Color.Gray)), (RectangleF) this.drawArea, this.textAlignment);
      path.Dispose();
      region.Dispose();
    }

    protected override void OnClick(EventArgs e)
    {
      if (this.isPerformClick)
      {
        this.isPerformClick = false;
        base.OnClick(e);
      }
      else
      {
        this._eventArgs = e;
        if (e == EventArgs.Empty)
        {
          this.aniOpacity = this.defaultAniOpacity - 20;
          this.mouseX = this.Width / 2;
          this.mouseY = this.Height / 2;
          this.animationSize = this.incSize * 2f;
          this.animationDirector.Start();
        }
      }
      this.Focus();
    }

    protected override void OnMouseClick(MouseEventArgs e)
    {
      this.aniOpacity = this.defaultAniOpacity - 20;
      this.mouseX = e.X;
      this.mouseY = e.Y;
      this.animationSize = this.incSize * 2f;
      this.animationDirector.Start();
      this._mouseClickArgs = e;
      this.Focus();
    }

    protected override void OnSizeChanged(EventArgs e)
    {
      base.OnSizeChanged(e);
      if (this.Width > this.Height)
        this.maxSize = (float) (this.Width + 2);
      else
        this.maxSize = (float) (this.Height + 2);
      this.incSize = this.maxSize / 12f;
      this.drawArea = new Rectangle(1, 1, this.Width - 2, this.Height - 2);
      if (this.icon != null)
      {
        this.iconArea = new Rectangle(this.Width / 15, this.Height / 6, this.Height / 2 + this.Height / 5, this.Height / 2 + this.Height / 5);
        this.drawArea.X += this.iconArea.X + this.iconArea.Height + 4;
        this.drawArea.Width -= this.iconArea.X + this.iconArea.Height + 4;
      }
      this.Invalidate();
    }

    protected override void OnForeColorChanged(EventArgs e)
    {
      base.OnForeColorChanged(e);
      if (this.EffectType != ET.Custom)
        return;
      this.primaryColor = this.ForeColor;
    }
  }
}
