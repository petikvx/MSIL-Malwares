// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: 生ث, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E8221468-4DC3-4423-BEC3-5B04CD1AB276
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2570b1f0780a754b70c2ec5525da16952c9634a2da6b21c92693380529daffe2.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
    if ((ImageUtil.\u200D‌⁫‪‮‏‍​⁪‭⁯⁪‬‭‎​‪​‫⁪‫⁮‬‏‌⁮‪‏‪‎‫⁮‮⁪‏‪⁮‎⁭⁮‮(originalImage) & PixelFormat.Indexed) != PixelFormat.Indexed)
      goto label_4;
label_1:
    int num1 = -750890079;
label_2:
    Bitmap bitmap;
    bool flag;
    int num2;
    byte[] numArray;
    int num3;
    PixelFormat pixelFormat;
    Rectangle rectangle;
    BitmapData bitmapData;
    IntPtr num4;
    int length;
    Image image;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ -319362893)) % 24U)
      {
        case 0:
          image = originalImage;
          num1 = (int) num5 * 155547919 ^ 1425231433;
          continue;
        case 1:
          num3 = 0;
          num1 = (int) num5 * -1625946605 ^ 1913255174;
          continue;
        case 2:
          num1 = -1646498028;
          continue;
        case 3:
          num1 = (int) num5 * -1979240023 ^ -1679523575;
          continue;
        case 4:
          num1 = (int) num5 * -137654341 ^ -138007146;
          continue;
        case 5:
          ImageUtil.\u200E‏​‬‏‎⁬⁬​⁪‌⁮‭‪⁮‍‫‭‭⁫‪‫‭⁪‬‪⁭⁬‍‌⁭‪‌⁬⁮⁬‭⁪‌‎‮(num4, numArray, 0, length);
          num1 = (int) num5 * 515258982 ^ 1885212576;
          continue;
        case 6:
          ImageUtil.\u200C⁫‫⁭⁪‮‬‪⁭⁯⁪‬⁯‬‎⁮‪‬⁭‏‭‭‭‬‍‏⁬​⁫‭‭⁬‮⁪‪⁬‫⁫‫⁯‮(numArray, 0, num4, length);
          num1 = (int) num5 * -163068547 ^ -774941896;
          continue;
        case 7:
          flag = numArray[num3 + 4 - 1] == (byte) 0;
          num1 = (int) num5 * -1953504720 ^ -1784667777;
          continue;
        case 8:
          bitmapData = ImageUtil.\u200B‮​​‍⁮⁬‪‬⁭‭⁬⁪‮‪‫‪‭‏‎‫⁮⁭‭‎‮‏⁬‮‭‪‫‮⁭⁯⁮⁬‍⁭⁫‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num4 = ImageUtil.\u202A⁮⁮‫⁬‍⁮‪‬‌‭⁪‮‪⁯‪⁮‫‌⁭‎‫‎⁮‪‌‍⁫⁭‪⁮⁬‌‪‮‭⁫⁪‌‪‮(bitmapData);
          length = ImageUtil.\u206E⁮‪⁯‭‬‮‏⁬⁭​‌​‏⁪‏‪​⁮⁮⁬​⁫‮⁫‬‮⁬‮‫⁭⁮‪⁪‬⁫⁮​‬‮‮((Image) bitmap) * ImageUtil.\u200B‮⁭​‫⁯‌​⁭‌‭⁯⁭⁫‭⁫⁪‏‭‎⁫⁮‪⁯‭‭‎‎⁬⁯‫‎‪⁪⁮⁫‮⁮‎‪‮((Image) bitmap) * 4;
          num1 = (int) num5 * -1105549429 ^ -981898651;
          continue;
        case 9:
          ++num2;
          numArray[num3 + num2] = (byte) ((double) numArray[num3 + num2] * opacity);
          num1 = (int) num5 * -1862408132 ^ -887921532;
          continue;
        case 11:
          num2 = 0;
          num1 = -800190784;
          continue;
        case 12:
          int num6 = flag ? 558942319 : (num6 = 1041499752);
          num1 = num6 ^ (int) num5 * -161541458;
          continue;
        case 13:
          num1 = (int) num5 * 186591552 ^ -533220174;
          continue;
        case 14:
          int num7;
          num1 = num7 = num3 >= numArray.Length ? -679334979 : (num7 = -2120563191);
          continue;
        case 15:
          goto label_1;
        case 16:
          goto label_4;
        case 17:
          num3 += 4;
          num1 = -1139107883;
          continue;
        case 18:
          num1 = (int) num5 * 175170179 ^ -1294523067;
          continue;
        case 19:
          num2 = num2 + 1 + 1;
          num1 = (int) num5 * 178185479 ^ 535379735;
          continue;
        case 20:
          image = (Image) bitmap;
          num1 = (int) num5 * 470083299 ^ 1336949453;
          continue;
        case 21:
          ImageUtil.\u202C‪‎‮⁯‪⁯⁭⁫⁫​‍‎‍‍⁪​‎⁯‌‭‬‌‏‪⁭⁯‭‫‬‍‎‬⁪‭‍⁬‪⁯‮(bitmap, bitmapData);
          num1 = (int) num5 * -14434471 ^ -1433774966;
          continue;
        case 22:
          numArray = new byte[length];
          num1 = (int) num5 * -232100887 ^ -2059213128;
          continue;
        case 23:
          pixelFormat = PixelFormat.Format32bppArgb;
          rectangle = new Rectangle(0, 0, ImageUtil.\u206E⁮‪⁯‭‬‮‏⁬⁭​‌​‏⁪‏‪​⁮⁮⁬​⁫‮⁫‬‮⁬‮‫⁭⁮‪⁪‬⁫⁮​‬‮‮((Image) bitmap), ImageUtil.\u200B‮⁭​‫⁯‌​⁭‌‭⁯⁭⁫‭⁫⁪‏‭‎⁫⁮‪⁯‭‭‎‎⁬⁯‫‎‪⁪⁮⁫‮⁮‎‪‮((Image) bitmap));
          num1 = (int) num5 * 787694138 ^ -2121188059;
          continue;
        default:
          goto label_25;
      }
    }
label_25:
    return image;
label_4:
    bitmap = (Bitmap) ImageUtil.\u202B​‍‎‎⁯‬⁮​⁬‏⁬‪‫‌⁪⁭‎‏‍⁭⁫⁪‌⁮⁬⁬‮⁪‬⁬‫⁫⁯‎‌⁫⁯⁫⁭‮(originalImage);
    num1 = -491113900;
    goto label_2;
  }

  static PixelFormat \u200D‌⁫‪‮‏‍​⁪‭⁯⁪‬‭‎​‪​‫⁪‫⁮‬‏‌⁮‪‏‪‎‫⁮‮⁪‏‪⁮‎⁭⁮‮([In] Image obj0) => obj0.PixelFormat;

  static object \u202B​‍‎‎⁯‬⁮​⁬‏⁬‪‫‌⁪⁭‎‏‍⁭⁫⁪‌⁮⁬⁬‮⁪‬⁬‫⁫⁯‎‌⁫⁯⁫⁭‮([In] Image obj0) => obj0.Clone();

  static int \u206E⁮‪⁯‭‬‮‏⁬⁭​‌​‏⁪‏‪​⁮⁮⁬​⁫‮⁫‬‮⁬‮‫⁭⁮‪⁪‬⁫⁮​‬‮‮([In] Image obj0) => obj0.Width;

  static int \u200B‮⁭​‫⁯‌​⁭‌‭⁯⁭⁫‭⁫⁪‏‭‎⁫⁮‪⁯‭‭‎‎⁬⁯‫‎‪⁪⁮⁫‮⁮‎‪‮([In] Image obj0) => obj0.Height;

  static BitmapData \u200B‮​​‍⁮⁬‪‬⁭‭⁬⁪‮‪‫‪‭‏‎‫⁮⁭‭‎‮‏⁬‮‭‪‫‮⁭⁯⁮⁬‍⁭⁫‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u202A⁮⁮‫⁬‍⁮‪‬‌‭⁪‮‪⁯‪⁮‫‌⁭‎‫‎⁮‪‌‍⁫⁭‪⁮⁬‌‪‮‭⁫⁪‌‪‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u200E‏​‬‏‎⁬⁬​⁪‌⁮‭‪⁮‍‫‭‭⁫‪‫‭⁪‬‪⁭⁬‍‌⁭‪‌⁬⁮⁬‭⁪‌‎‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u200C⁫‫⁭⁪‮‬‪⁭⁯⁪‬⁯‬‎⁮‪‬⁭‏‭‭‭‬‍‏⁬​⁫‭‭⁬‮⁪‪⁬‫⁫‫⁯‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u202C‪‎‮⁯‪⁯⁭⁫⁫​‍‎‍‍⁪​‎⁯‌‭‬‌‏‪⁭⁯‭‫‬‍‎‬⁪‭‍⁬‪⁯‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
