// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Antimalware Service Executable, Version=4.18.2110.6, Culture=neutral, PublicKeyToken=null
// MVID: BAA675AC-450F-4411-0EC7-1781EC73690A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\UDS-DangerousObject.Multi.Generic-1b75e4ffe67a5c5a8939c62c1028556f3995341d39f5aed9129637646f7b6e5f.exe

using System;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

internal static class \u000E\u2001
{
  private static int \u000F;
  private static \u000E\u2001.\u0002 \u0003\u2000;
  private static \u000E\u2001.\u0003 \u0003;
  private static ConcurrentDictionary<int, string> \u0002;
  private static short \u0008;
  private static byte[] \u000E;
  private static byte[] \u0005;
  private static int \u0002\u2000;
  private static int \u0006;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u000E\u2001()
  {
    int num1 = -1783817741;
    int num2 = -483760768 - num1;
    \u000E\u2001.\u0002 = new ConcurrentDictionary<int, string>();
    int skipFrames = 2;
    StackTrace stackTrace = new StackTrace(skipFrames, false);
    int index1 = skipFrames - 2;
    StackFrame frame = stackTrace.GetFrame(index1);
    int index2 = index1;
    if (frame == null)
    {
      stackTrace = new StackTrace();
      index2 = 1;
      frame = stackTrace.GetFrame(index2);
    }
    int num3 = -~-~-~~-~(num1 ^ -1098759173 ^ num2) ^ -~~-~-~-~-~(-797964392 - num1 - num2);
    MethodBase method = frame?.GetMethod();
    if (frame != null)
      num3 ^= ~-~-~--~~-~(num1 + 169581180 + num2);
    Type declaringType = method?.DeclaringType;
    int num4;
    if (declaringType == typeof (RuntimeMethodHandle))
    {
      \u000E\u2001.\u0003\u2000 |= (\u000E\u2001.\u0002) 4;
      num4 = num3 ^ (-657436327 ^ num1 ^ num2) + index1;
    }
    else if (declaringType == (Type) null)
    {
      if (\u000E\u2001.\u0002(stackTrace, index2))
      {
        \u000E\u2001.\u0003\u2000 = (\u000E\u2001.\u0002) 16 | \u000E\u2001.\u0003\u2000;
        num4 = num3 ^ ~-~--~-~~-~(483736730 + num1 + num2) - index1;
      }
      else
      {
        \u000E\u2001.\u0003\u2000 = (\u000E\u2001.\u0002) 1 | \u000E\u2001.\u0003\u2000;
        num4 = num3 ^ -~~-~-~-~(1211055805 - num1 ^ num2);
      }
    }
    else
    {
      \u000E\u2001.\u0003\u2000 = (\u000E\u2001.\u0002) 16 | \u000E\u2001.\u0003\u2000;
      num4 = num3 ^ -~~--~-~~(num1 - 1211116617 - num2) - index1;
    }
    \u000E\u2001.\u0002\u2000 = num4 + \u000E\u2001.\u0002\u2000;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static string \u0002(int _param0)
  {
    string str;
    return \u000E\u2001.\u0002.TryGetValue(_param0, out str) ? str : \u000E\u2001.\u0002(_param0, true);
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static string \u0002(int _param0, bool _param1)
  {
    int num1 = 508876977;
    int num2 = -1637607872 - num1;
    string str1 = (string) null;
    byte[] numArray1;
    int num3;
    int num4;
    int num5;
    int num6;
    int num7;
    byte[] numArray2;
    byte[] numArray3;
    do
    {
      lock (\u000E\u2001.\u0002)
      {
        int num8;
        if (\u000E\u2001.\u0003 == null)
        {
          Assembly executingAssembly = Assembly.GetExecutingAssembly();
          Assembly.GetCallingAssembly();
          \u000E\u2001.\u0006 |= 1639218242 + num1 + num2;
          Assembly assembly = executingAssembly;
          StringBuilder stringBuilder = new StringBuilder();
          int num9 = (-1103002325 ^ num1) - num2;
          stringBuilder.Append((char) num9).Append((char) (num9 >> 16));
          int num10 = -1100876234 - num1 ^ num2;
          stringBuilder.Append((char) num10).Append((char) (num10 >> 16));
          int num11 = num1 - 2118220572 - num2;
          stringBuilder.Append((char) num11).Append((char) (num11 >> 16));
          int num12 = -1102529750 - num1 + num2;
          stringBuilder.Append((char) (num12 >> 16)).Append((char) num12);
          int num13 = num1 - 2119220005 ^ num2;
          stringBuilder.Append((char) num13).Append((char) (num13 >> 16));
          int num14 = -1102398678 - num1 + num2;
          stringBuilder.Append((char) num14).Append((char) (num14 >> 16));
          string name = stringBuilder.ToString();
          Stream manifestResourceStream = assembly.GetManifestResourceStream(name);
          int skipFrames = 2;
          StackTrace stackTrace = new StackTrace(skipFrames, false);
          \u000E\u2001.\u0006 ^= -1638138760 ^ num1 ^ num2 | skipFrames;
          int index1 = skipFrames - 2;
          StackFrame frame = stackTrace.GetFrame(index1);
          int index2 = index1;
          if (frame == null)
          {
            stackTrace = new StackTrace();
            index2 = 1;
            frame = stackTrace.GetFrame(index2);
          }
          MethodBase method = frame?.GetMethod();
          \u000E\u2001.\u0006 ^= index1 + (1639605598 + num1 - num2);
          Type declaringType = method?.DeclaringType;
          if (frame == null)
            \u000E\u2001.\u0006 ^= (num1 ^ 1637925781) + num2;
          bool flag = declaringType == typeof (RuntimeMethodHandle);
          \u000E\u2001.\u0006 ^= 1639605630 + num1 - num2;
          if (!flag)
          {
            flag = declaringType == (Type) null;
            if (flag)
            {
              if (\u000E\u2001.\u0002(stackTrace, index2))
                flag = false;
              else
                \u000E\u2001.\u0006 ^= (num1 ^ 1637925813) + num2;
            }
          }
          if (flag == (stackTrace != null))
            \u000E\u2001.\u0006 = 32 ^ \u000E\u2001.\u0006;
          \u000E\u2001.\u0006 ^= -1637614182 - num1 ^ num2 | index1 + 1;
          \u000E\u2001.\u0003 = new \u000E\u2001.\u0003(manifestResourceStream);
          short num15 = (short) ((int) \u000E\u2001.\u0003.\u0002() ^ (int) (short) ~-~--~-~~-~(num1 + 1639614329 - num2));
          if (num15 == (short) 0)
            \u000E\u2001.\u0008 = (short) ((int) \u000E\u2001.\u0003.\u0002() ^ (int) (short) -~-~~-~--~~(-1639597593 - num1 + num2));
          else
            \u000E\u2001.\u0005 = \u000E\u2001.\u0003.\u0002((int) num15);
          \u000E\u2001.\u000E = \u000E\u2001.\u0002(\u000E\u2001.\u0002(executingAssembly));
          int num16 = \u000E\u2001.\u0002\u2000;
          \u000E\u2001.\u0002\u2000 = 0;
          long num17 = \u0002\u2002.\u0002();
          int num18 = num16 ^ (int) (uint) num17 ^ num1 - 2010172081 - num2;
          int num19 = num18;
          int num20 = 0;
          int num21 = num19;
          int num22 = num21;
          \u0003\u2000<int> enumerator = ((\u000E<int>) new \u0008.\u0002(-1639605470 - num1 ^ num2)
          {
            \u0006 = num22
          }).GetEnumerator();
          try
          {
            while (enumerator.\u000F\u2000​\u2007\u0002())
            {
              int num23 = enumerator.\u000F\u2000​\u2007\u0002();
              num21 ^= num20 + num23;
              num20 += num21 >> 3;
            }
          }
          finally
          {
            enumerator?.\u0002\u2000\u2000​\u2007\u0002();
          }
          int num24 = num21 + ((-1806111834 ^ num1) + num2) ^ num1 + 329788758 ^ num2;
          int num25 = num18 ^ -~~-~-~-~(189461630 ^ num1 ^ num2);
          num8 = (-1639600177 - num1 + num2) * num24 % (1667347147 + num1 - num2) + num25;
          \u000E\u2001.\u000F = num8;
          \u000E\u2001.\u0006 = \u000E\u2001.\u0006 & num1 + 1908040784 - num2 ^ -1639598682 - num1 + num2;
          if ((\u000E\u2001.\u0003\u2000 & (\u000E\u2001.\u0002) ~--~~--~~-~((num1 ^ -1638144564) - num2)) == (\u000E\u2001.\u0002) 0)
            \u000E\u2001.\u0006 = -1639561508 - num1 + num2;
        }
        else
          num8 = \u000E\u2001.\u000F;
        if (\u000E\u2001.\u0006 == (-1638190600 ^ num1) - num2)
        {
          str1 = new string(new char[3]
          {
            (char) (-1637607800 - num1 ^ num2),
            '0',
            (char) (1639605558 + num1 - num2)
          });
          return str1;
        }
        int num26 = _param0 ^ -656021132 - num1 + num2 ^ num8 ^ -1436372218 ^ num1 ^ num2;
        \u000E\u2001.\u0003.\u0002().Position = (long) num26;
        if (\u000E\u2001.\u0005 != null)
        {
          numArray1 = \u000E\u2001.\u0005;
        }
        else
        {
          short num27 = \u000E\u2001.\u0008 != (short) -1 ? \u000E\u2001.\u0008 : (short) ((int) \u000E\u2001.\u0003.\u0002() ^ -1637593348 - num1 - num2 ^ num26);
          if (num27 == (short) 0)
          {
            numArray1 = (byte[]) null;
          }
          else
          {
            numArray1 = \u000E\u2001.\u0003.\u0002((int) num27);
            for (int index = 0; index != numArray1.Length; index = 1 + index)
              numArray1[index] ^= (byte) (\u000E\u2001.\u000F >> ((3 & index) << 3));
          }
        }
        num3 = \u000E\u2001.\u0003.\u0002() ^ num26 ^ -~-~~-~-~-~((num1 ^ -1914581628) + num2) ^ num8;
        if (num3 == (-1639605470 - num1 ^ num2))
        {
          byte[] numArray4 = \u000E\u2001.\u0003.\u0002(4);
          _param0 = num1 + 1307972120 - num2 ^ num8;
          _param0 = ((int) numArray4[2] | (int) numArray4[3] << 16 | (int) numArray4[0] << 8 | (int) numArray4[1] << 24) ^ -_param0;
        }
        else
        {
          num4 = \u000E\u2001.\u0006;
          num5 = -1637997656 - num1 + num2;
          num6 = num4 - 12;
          num7 = num3;
          num3 &= num1 + 1908040925 - num2;
          numArray2 = \u000E\u2001.\u0003.\u0002(num3);
          numArray3 = \u000E\u2001.\u000E;
          goto label_44;
        }
      }
    }
    while (!\u000E\u2001.\u0002.TryGetValue(_param0, out str1));
    return str1;
label_44:
    bool flag1 = (num7 & (-563866048 - num1 ^ num2)) != 0;
    bool flag2 = (num7 & num1 - 2120488512 + num2) != 0;
    bool flag3 = (num7 & (num1 ^ 509338942 ^ num2)) != 0;
    byte[] numArray5 = numArray1;
    byte[] numArray6 = numArray2;
    byte[] numArray7 = numArray5;
    byte num28 = numArray7[1];
    int length1 = numArray6.Length;
    byte num29 = (byte) (length1 + 11 ^ (int) num28 + 7);
    uint num30 = (uint) (((int) numArray7[0] | (int) numArray7[2] << 8) + ((int) num29 << 3));
    int index3 = 0;
    ushort num31 = 0;
    for (; index3 < length1; index3 = 1 + index3)
    {
      if ((index3 & 1) == 0)
      {
        num30 = (uint) ((int) num30 * (1639819483 + num1 - num2) + (-1637074459 - num1 + num2));
        num31 = (ushort) (num30 >> 16);
      }
      byte num32 = (byte) num31;
      num31 >>= 8;
      byte num33 = numArray6[index3];
      numArray6[index3] = (byte) ((uint) ((int) num33 ^ (int) num28 ^ 3 + (int) num29) ^ (uint) num32);
      num29 = num33;
    }
    byte[] numArray8 = numArray6;
    if (numArray3 != null != (num5 != num4))
    {
      for (int index4 = 0; index4 < num3; ++index4)
      {
        byte num34 = numArray3[7 & index4];
        byte num35 = (byte) ((int) num34 << 3 | (int) num34 >> 5);
        numArray8[index4] = (byte) ((uint) numArray8[index4] ^ (uint) num35);
      }
    }
    int length2;
    byte[] bytes;
    if (!flag2)
    {
      length2 = num3;
      bytes = numArray8;
    }
    else
    {
      length2 = (int) numArray8[2] | (int) numArray8[0] << 16 | (int) numArray8[3] << 8 | (int) numArray8[1] << 24;
      bytes = new byte[length2];
      \u000E\u2001.\u0002(numArray8, 4, bytes);
    }
    string str2;
    if (flag1 && num6 == num5 - 12)
    {
      char[] chArray = new char[length2];
      for (int index5 = 0; index5 < length2; ++index5)
        chArray[index5] = (char) bytes[index5];
      str2 = new string(chArray);
    }
    else
      str2 = Encoding.Unicode.GetString(bytes, 0, bytes.Length);
    int num36 = num6 + ((-1638144703 ^ num1 ^ num2) + (3 & num6) << 5);
    if (num36 != num5 - 12 + (1639605597 + num1 - num2 + (num5 - 12 & 3) << 5))
    {
      int num37 = num3 + _param0 ^ (1638650968 ^ num1) + num2 ^ num36 & -1637606579 - num1 - num2;
      ref int local = ref num37;
      StringBuilder stringBuilder = new StringBuilder();
      int num38 = (num1 ^ 1638144632) + num2;
      stringBuilder.Append((char) (byte) num38);
      string format = stringBuilder.ToString();
      str2 = local.ToString(format);
    }
    if (!flag3 & _param1)
    {
      str2 = string.Intern(str2);
      \u000E\u2001.\u0002[_param0] = str2;
      if (\u000E\u2001.\u0002.Count == -1637607784 - num1 - num2)
      {
        bool lockTaken = false;
        ConcurrentDictionary<int, string> concurrentDictionary = \u000E\u2001.\u0002;
        try
        {
          Monitor.Enter((object) concurrentDictionary, ref lockTaken);
          \u000E\u2001.\u0003.\u0002();
          \u000E\u2001.\u0003 = (\u000E\u2001.\u0003) null;
          \u000E\u2001.\u0005 = (byte[]) null;
          \u000E\u2001.\u000E = (byte[]) null;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit((object) concurrentDictionary);
        }
      }
    }
    return str2;
  }

  private static AssemblyName \u0002(Assembly _param0)
  {
    try
    {
      return _param0.GetName();
    }
    catch
    {
      return new AssemblyName(_param0.FullName);
    }
  }

  private static byte[] \u0002(AssemblyName _param0)
  {
    byte[] numArray = _param0.GetPublicKeyToken();
    if (numArray != null && numArray.Length == 0)
      numArray = (byte[]) null;
    return numArray;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static bool \u0002(StackTrace _param0, int _param1)
  {
    Assembly assembly1 = _param0.GetFrame(++_param1)?.GetMethod()?.DeclaringType?.Assembly;
    if (assembly1 != (Assembly) null)
    {
      byte[] numArray = \u000E\u2001.\u0002(\u000E\u2001.\u0002(assembly1));
      if (numArray != null && numArray.Length == 8 && numArray[0] == (byte) 183 && numArray[7] == (byte) 137)
        return true;
    }
    Assembly assembly2;
    do
    {
      StackFrame frame = _param0.GetFrame(++_param1);
      if (frame != null)
        assembly2 = frame.GetMethod()?.DeclaringType?.Assembly;
      else
        goto label_6;
    }
    while (!(assembly2 != (Assembly) null) || !(assembly2 == typeof (\u000E\u2001).Assembly));
    return true;
label_6:
    return false;
  }

  private static void \u0002(byte[] _param0, int _param1, byte[] _param2)
  {
    int num1 = 0;
    int num2 = 0;
    int num3 = 128;
    int length = _param2.Length;
label_10:
    while (num1 < length)
    {
      if ((num3 <<= 1) == 256)
      {
        num3 = 1;
        num2 = (int) _param0[_param1++];
      }
      if ((num2 & num3) != 0)
      {
        int num4 = ((int) _param0[_param1] >> 2) + 3;
        int num5 = ((int) _param0[_param1] << 8 | (int) _param0[_param1 + 1]) & 1023;
        _param1 += 2;
        int num6 = num1 - num5;
        if (num6 < 0)
          break;
        while (true)
        {
          if (--num4 >= 0 && num1 < length)
            _param2[num1++] = _param2[num6++];
          else
            goto label_10;
        }
      }
      else
        _param2[num1++] = _param0[_param1++];
    }
  }

  private enum \u0002
  {
  }

  private sealed class \u0003
  {
    private Stream \u0002;
    private byte[] \u0003;

    public \u0003(Stream _param1)
    {
      this.\u0002 = _param1;
      this.\u0003 = new byte[4];
    }

    public Stream \u0002() => this.\u0002;

    public short \u0002()
    {
      this.\u0002(2);
      return (short) ((int) this.\u0003[0] | (int) this.\u0003[1] << 8);
    }

    public int \u0002()
    {
      this.\u0002(4);
      return (int) this.\u0003[0] | (int) this.\u0003[1] << 8 | (int) this.\u0003[2] << 16 | (int) this.\u0003[3] << 24;
    }

    private static void \u0002() => throw new EndOfStreamException();

    private void \u0002(int _param1)
    {
      int offset = 0;
      if (_param1 == 1)
      {
        int num = this.\u0002.ReadByte();
        if (num == -1)
          \u000E\u2001.\u0003.\u0002();
        this.\u0003[0] = (byte) num;
      }
      else
      {
        do
        {
          int num = this.\u0002.Read(this.\u0003, offset, _param1 - offset);
          if (num == 0)
            \u000E\u2001.\u0003.\u0002();
          offset += num;
        }
        while (offset < _param1);
      }
    }

    public void \u0002()
    {
      Stream stream = this.\u0002;
      this.\u0002 = (Stream) null;
      stream?.Close();
      this.\u0003 = (byte[]) null;
    }

    public byte[] \u0002(int _param1)
    {
      byte[] numArray = _param1 >= 0 ? new byte[_param1] : throw new ArgumentOutOfRangeException();
      int length = 0;
      do
      {
        int num = this.\u0002.Read(numArray, length, _param1);
        if (num != 0)
        {
          length += num;
          _param1 -= num;
        }
        else
          break;
      }
      while (_param1 > 0);
      if (length != numArray.Length)
      {
        byte[] dst = new byte[length];
        Buffer.BlockCopy((Array) numArray, 0, (Array) dst, 0, length);
        numArray = dst;
      }
      return numArray;
    }
  }
}
