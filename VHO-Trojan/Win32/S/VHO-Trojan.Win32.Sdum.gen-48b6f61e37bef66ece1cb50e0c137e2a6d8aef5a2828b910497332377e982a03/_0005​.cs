// Decompiled with JetBrains decompiler
// Type: ​
// Assembly: Sdevmxl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F0B5D56E-2738-4851-005E-7CC3B980D8C1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-48b6f61e37bef66ece1cb50e0c137e2a6d8aef5a2828b910497332377e982a03.exe

using System;
using System.Runtime.CompilerServices;

internal sealed class \u0005​
{
  private static readonly int[] \u0002;
  public static readonly \u0005​ \u0003;
  public static readonly \u0005​ \u0005;
  private static readonly byte[] \u0008;
  private int[] \u0006;
  private int \u000E;
  private int \u000F;
  private int \u0002\u2000;

  static \u0005​()
  {
    int[] numArray1 = new int[0];
    if (true)
      goto label_4;
label_1:
    byte[] numArray2 = new byte[256];
    // ISSUE: field reference
    RuntimeFieldHandle fldHandle = __fieldref (\u000F\u2009.\u0002);
    if (true)
      goto label_5;
label_2:
    if (true)
      goto label_6;
label_3:
    \u0005​.\u0003 = new \u0005​(0, \u0005​.\u0002, false);
    \u0005​.\u0003.\u000F = 0;
    \u0005​.\u0005 = \u0005​.\u0002(1UL);
    return;
label_6:
    \u0005​.\u0008 = numArray2;
    goto label_3;
label_5:
    RuntimeHelpers.InitializeArray((Array) numArray2, fldHandle);
    goto label_2;
label_4:
    \u0005​.\u0002 = numArray1;
    goto label_1;
  }

  public \u0005​(int _param1, int[] _param2, bool _param3)
  {
    if (true)
      goto label_2;
label_1:
    // ISSUE: explicit constructor call
    base.\u002Ector();
    if (_param3)
    {
      int sourceIndex;
      if (true)
        sourceIndex = 0;
      while (sourceIndex < _param2.Length && _param2[sourceIndex] == 0)
      {
        int num = sourceIndex + 1;
        if (true)
          sourceIndex = num;
      }
      if (sourceIndex == _param2.Length)
      {
        this.\u000E = 0;
        this.\u0006 = \u0005​.\u0002;
        return;
      }
      this.\u000E = _param1;
      if (sourceIndex == 0)
      {
        this.\u0006 = _param2;
        return;
      }
      this.\u0006 = new int[_param2.Length - sourceIndex];
      Array.Copy((Array) _param2, sourceIndex, (Array) this.\u0006, 0, this.\u0006.Length);
      return;
    }
    this.\u000E = _param1;
    this.\u0006 = _param2;
    return;
label_2:
    this.\u000F = -1;
    goto label_1;
  }

  public \u0005​(int _param1, byte[] _param2)
  {
    if (true)
      ;
    int num = _param1;
    if (true)
      ;
    byte[] numArray = _param2;
    if (true)
      ;
    int length = _param2.Length;
    // ISSUE: explicit constructor call
    this.\u002Ector(num, numArray, 0, length);
  }

  public \u0005​(int _param1, byte[] _param2, int _param3, int _param4)
  {
    if (true)
      goto label_2;
label_1:
    // ISSUE: explicit constructor call
    base.\u002Ector();
    if (_param1 == 0)
    {
      if (true)
        goto label_6;
label_4:
      int[] numArray = \u0005​.\u0002;
      if (false)
        return;
      this.\u0006 = numArray;
      return;
label_6:
      this.\u000E = 0;
      goto label_4;
    }
    else
    {
      this.\u0006 = \u0005​.\u0002(_param2, _param3, _param4);
      this.\u000E = this.\u0006.Length < 1 ? 0 : _param1;
      return;
    }
label_2:
    this.\u000F = -1;
    goto label_1;
  }

  public int[] \u0002()
  {
    if (true)
      ;
    return this.\u0006;
  }

  private static int \u0002(int _param0)
  {
    int num = _param0;
    if (true)
      ;
    return (num + 8 - 1) / 8;
  }

  private static int[] \u0002(byte[] _param0, int _param1, int _param2)
  {
    int num1 = _param1 + _param2;
    if (true)
      goto label_2;
label_1:
    int num2 = _param1;
    int index1;
    if (true)
      index1 = num2;
    int num3;
    while (index1 < num3 && _param0[index1] == (byte) 0)
    {
      int num4 = index1 + 1;
      if (true)
        index1 = num4;
    }
    if (index1 >= num3)
      return \u0005​.\u0002;
    int length = (num3 - index1 + 3) / 4;
    int num5 = (num3 - index1) % 4;
    if (num5 == 0)
      num5 = 4;
    if (length < 1)
      return \u0005​.\u0002;
    int[] numArray = new int[length];
    int num6 = 0;
    int index2 = 0;
    for (int index3 = index1; index3 < num3; ++index3)
    {
      num6 = num6 << 8 | (int) _param0[index3] & (int) byte.MaxValue;
      --num5;
      if (num5 <= 0)
      {
        numArray[index2] = num6;
        ++index2;
        num5 = 4;
        num6 = 0;
      }
    }
    if (index2 < numArray.Length)
      numArray[index2] = num6;
    return numArray;
label_2:
    num3 = num1;
    goto label_1;
  }

  private static int \u0002(int _param0, int _param1, int[] _param2)
  {
    while (_param1 < _param2.Length)
    {
      if (_param2[_param1] == 0)
      {
        int num = _param1 + 1;
        if (true)
          _param1 = num;
      }
      else
      {
        int num1 = 32 * (_param2.Length - _param1 - 1);
        int num2 = _param2[_param1];
        if (true)
          goto label_7;
label_6:
        int num3;
        int num4 = \u0005​.\u0003(num3);
        return num1 + num4;
label_7:
        num3 = num2;
        goto label_6;
      }
    }
    return 0;
  }

  public int \u0002()
  {
    if (true)
      ;
    if (this.\u000F == -1)
    {
      if (true)
        ;
      if (true)
        ;
      this.\u000F = this.\u000E == 0 ? 0 : \u0005​.\u0002(this.\u000E, 0, this.\u0006);
    }
    return this.\u000F;
  }

  private static int \u0003(int _param0)
  {
    int num1 = _param0;
    if (true)
      goto label_3;
label_1:
    uint index1;
    int num2 = (int) (index1 >> 24);
    if (true)
      goto label_4;
label_2:
    uint index2;
    if (index2 != 0U)
      return 24 + (int) \u0005​.\u0008[(int) index2];
    int num3 = (int) (index1 >> 16);
    if (true)
      goto label_8;
label_7:
    if (index2 != 0U)
      return 16 + (int) \u0005​.\u0008[(int) index2];
    uint index3 = index1 >> 8;
    return index3 != 0U ? 8 + (int) \u0005​.\u0008[(int) index3] : (int) \u0005​.\u0008[(int) index1];
label_8:
    index2 = (uint) num3;
    goto label_7;
label_4:
    index2 = (uint) num2;
    goto label_2;
label_3:
    index1 = (uint) num1;
    goto label_1;
  }

  public int \u0002(object _param1)
  {
    if (true)
      ;
    object obj = _param1;
    if (true)
      ;
    return this.\u0002((\u0005​) obj);
  }

  private static int \u0002(int _param0, int[] _param1, int _param2, int[] _param3)
  {
    while (_param0 != _param1.Length && _param1[_param0] == 0)
    {
      int num = _param0 + 1;
      if (true)
        _param0 = num;
    }
    while (_param2 != _param3.Length && _param3[_param2] == 0)
    {
      int num = _param2 + 1;
      if (true)
        _param2 = num;
    }
    return \u0005​.\u0003(_param0, _param1, _param2, _param3);
  }

  private static int \u0003(int _param0, int[] _param1, int _param2, int[] _param3)
  {
    int num1 = _param1.Length - _param3.Length - (_param0 - _param2);
    if (true)
      goto label_2;
label_1:
    int num2;
    if (num2 != 0)
      return num2 >= 0 ? 1 : -1;
    while (_param0 < _param1.Length)
    {
      int[] numArray = _param1;
      int index = _param0;
      int num3 = index + 1;
      if (true)
        goto label_9;
label_7:
      int num4 = numArray[index];
      if (true)
        goto label_10;
label_8:
      uint num5 = (uint) _param3[_param2++];
      uint num6;
      if ((int) num6 != (int) num5)
        return num6 >= num5 ? 1 : -1;
      continue;
label_10:
      num6 = (uint) num4;
      goto label_8;
label_9:
      _param0 = num3;
      goto label_7;
    }
    return 0;
label_2:
    num2 = num1;
    goto label_1;
  }

  public int \u0002(\u0005​ _param1)
  {
    if (true)
      ;
    int num1 = this.\u000E;
    \u0005​ obj = _param1;
    if (true)
      ;
    int num2 = obj.\u000E;
    if (num1 < num2)
      return -1;
    if (true)
      ;
    if (this.\u000E > _param1.\u000E)
      return 1;
    return this.\u000E != 0 ? this.\u000E * \u0005​.\u0003(0, this.\u0006, 0, _param1.\u0006) : 0;
  }

  public override bool Equals(object _param1)
  {
    if (_param1 == this)
      return true;
    \u0005​ obj1 = _param1 as \u0005​;
    if (true)
      goto label_4;
label_3:
    \u0005​ obj2;
    return obj2 != null && this.\u000E == obj2.\u000E && this.\u0002(obj2);
label_4:
    obj2 = obj1;
    goto label_3;
  }

  public override int GetHashCode()
  {
    int length = this.\u0006.Length;
    if (true)
      goto label_2;
label_1:
    int hashCode;
    if (this.\u0006.Length != 0)
    {
      int num1 = hashCode ^ this.\u0006[0];
      if (true)
        goto label_5;
label_4:
      if (this.\u0006.Length > 1)
      {
        int num2 = hashCode ^ this.\u0006[this.\u0006.Length - 1];
        if (true)
        {
          hashCode = num2;
          goto label_8;
        }
        else
          goto label_8;
      }
      else
        goto label_8;
label_5:
      hashCode = num1;
      goto label_4;
    }
label_8:
    return hashCode;
label_2:
    hashCode = length;
    goto label_1;
  }

  private bool \u0002(\u0005​ _param1)
  {
    int[] numArray = _param1.\u0006;
    if (this.\u0006.Length != _param1.\u0006.Length)
      return false;
    int index;
    if (true)
      index = 0;
    while (index < this.\u0006.Length)
    {
      if (this.\u0006[index] != _param1.\u0006[index])
        return false;
      int num = index + 1;
      if (true)
        index = num;
    }
    return true;
  }

  public \u0005​ \u0002(\u0005​ _param1, \u0005​ _param2)
  {
    if (_param2.Equals((object) \u0005​.\u0005))
      return \u0005​.\u0003;
    if (_param1.\u000E == 0)
      return \u0005​.\u0005;
    if (this.\u000E == 0)
      return \u0005​.\u0003;
    if (true)
      goto label_8;
label_7:
    \u0005​ obj1;
    if (!_param1.Equals((object) \u0005​.\u0005))
    {
      \u0005​ obj2 = \u0005​.\u0002(obj1, _param1.\u0006[0], _param2);
      if (true)
        obj1 = obj2;
    }
    return obj1;
label_8:
    obj1 = this;
    goto label_7;
  }

  private static \u0005​ \u0002(\u0005​ _param0, int _param1, \u0005​ _param2)
  {
    int length1 = _param2.\u0006.Length;
    if (true)
      goto label_5;
label_1:
    int length2;
    int num1 = 32 * length2;
    if (true)
      goto label_6;
label_2:
    int num2;
    int num3 = _param2.\u0002() + 2 <= num2 ? 1 : 0;
    if (true)
      goto label_7;
label_3:
    int num4 = _param2.\u0003();
    if (true)
      goto label_8;
label_4:
    _param0 = _param0.\u0002(num2).\u0002(_param2);
    int[] numArray1 = new int[length2 + 1];
    int[] src = _param0.\u0006;
    if (src.Length < length2)
    {
      int[] dst = new int[length2];
      Buffer.BlockCopy((Array) src, 0, (Array) dst, length2 - src.Length, src.Length * 4);
      src = dst;
    }
    int[] numArray2 = \u0005​.\u0002(src);
    bool flag;
    uint num5;
    \u0005​.\u0002(numArray1, numArray2, _param2.\u0006, num5, flag);
    int[] numArray3 = \u0005​.\u0002(_param1);
    int num6 = (numArray3[0] >> 8) - 1;
    int num7 = 1;
    while (true)
    {
      int[] numArray4 = numArray3;
      int index1 = num7++;
      int num8;
      if ((num8 = numArray4[index1]) != -1)
      {
        int num9 = num6 + 1;
        for (int index2 = 0; index2 < num9; ++index2)
          \u0005​.\u0002(numArray1, numArray2, _param2.\u0006, num5, flag);
        \u0005​.\u0002(numArray1, numArray2, src, _param2.\u0006, num5, flag);
        num6 = num8 >> 8;
      }
      else
        break;
    }
    for (int index = 0; index < num6; ++index)
      \u0005​.\u0002(numArray1, numArray2, _param2.\u0006, num5, flag);
    \u0005​.\u0002(numArray2, _param2.\u0006, num5);
    return new \u0005​(1, numArray2, true);
label_8:
    num5 = (uint) num4;
    goto label_4;
label_7:
    flag = num3 != 0;
    goto label_3;
label_6:
    num2 = num1;
    goto label_2;
label_5:
    length2 = length1;
    goto label_1;
  }

  private static int \u0005(int _param0)
  {
    int num1 = _param0 + ((_param0 + 1 & 4) << 1);
    if (true)
      goto label_4;
label_1:
    int num2;
    int num3 = num2 * (2 - _param0 * num2);
    if (true)
      goto label_5;
label_2:
    int num4 = num2 * (2 - _param0 * num2);
    if (true)
      goto label_6;
label_3:
    return num2 * (2 - _param0 * num2);
label_6:
    num2 = num4;
    goto label_3;
label_5:
    num2 = num3;
    goto label_2;
label_4:
    num2 = num1;
    goto label_1;
  }

  private int \u0003()
  {
    if (this.\u0002\u2000 != 0)
      return this.\u0002\u2000;
    int num1 = -this.\u0006[this.\u0006.Length - 1];
    if (true)
      goto label_6;
label_3:
    int num2;
    int num3 = \u0005​.\u0005(num2);
    if (true)
      goto label_7;
label_4:
    if (true)
      goto label_8;
label_5:
    int num4;
    return num4;
label_8:
    this.\u0002\u2000 = num3;
    goto label_5;
label_7:
    num4 = num3;
    goto label_4;
label_6:
    num2 = num1;
    goto label_3;
  }

  private static void \u0002(int[] _param0, int[] _param1, uint _param2)
  {
    int length = _param1.Length;
    if (true)
      goto label_3;
label_1:
    int num1;
    int num2 = num1 - 1;
    int num3;
    if (true)
      num3 = num2;
    for (; num3 >= 0; --num3)
    {
      int num4 = _param0[num1 - 1];
      if (true)
        goto label_7;
label_6:
      uint num5;
      ulong num6 = (ulong) (num5 * _param2);
      ulong num7 = num6 * (ulong) (uint) _param1[num1 - 1] + (ulong) num5 >> 32;
      for (int index = num1 - 2; index >= 0; --index)
      {
        ulong num8 = num7 + (num6 * (ulong) (uint) _param1[index] + (ulong) (uint) _param0[index]);
        _param0[index + 1] = (int) num8;
        num7 = num8 >> 32;
      }
      _param0[0] = (int) num7;
      continue;
label_7:
      num5 = (uint) num4;
      goto label_6;
    }
    if (\u0005​.\u0002(0, _param0, 0, _param1) < 0)
      return;
    \u0005​.\u0002(0, _param0, 0, _param1);
    return;
label_3:
    num1 = length;
    goto label_1;
  }

  private static void \u0002(
    int[] _param0,
    int[] _param1,
    int[] _param2,
    int[] _param3,
    uint _param4,
    bool _param5)
  {
    int length1 = _param3.Length;
    if (true)
      goto label_2;
label_1:
    int length2;
    if (length2 == 1)
    {
      _param1[0] = (int) \u0005​.\u0002((uint) _param1[0], (uint) _param2[0], (uint) _param3[0], _param4);
      return;
    }
    int num1 = _param2[length2 - 1];
    if (true)
      goto label_12;
label_5:
    long num2 = (long) (uint) _param1[length2 - 1];
    if (true)
      goto label_13;
label_6:
    ulong num3;
    uint num4;
    long num5 = (long) num3 * (long) num4;
    if (true)
      goto label_14;
label_7:
    ulong num6;
    long num7 = (long) ((uint) num6 * _param4);
    if (true)
      goto label_15;
label_8:
    ulong num8;
    long num9 = (long) num8 * (long) (uint) _param3[length2 - 1];
    if (true)
      goto label_16;
label_9:
    ulong num10;
    long num11 = (long) num6 + (long) (uint) num10;
    if (true)
      goto label_17;
label_10:
    long num12 = (long) (num6 >> 32) + (long) (num10 >> 32);
    if (true)
      goto label_18;
label_11:
    int num13 = length2 - 2;
    int index1;
    if (true)
      index1 = num13;
    for (; index1 >= 0; --index1)
    {
      ulong num14 = num3 * (ulong) (uint) _param2[index1];
      ulong num15 = num8 * (ulong) (uint) _param3[index1];
      ulong num16 = num6 + ((num14 & (ulong) uint.MaxValue) + (ulong) (uint) num15);
      _param0[index1 + 2] = (int) num16;
      num6 = (num16 >> 32) + (num14 >> 32) + (num15 >> 32);
    }
    _param0[1] = (int) num6;
    int num17 = (int) (num6 >> 32);
    for (int index2 = length2 - 2; index2 >= 0; --index2)
    {
      uint num18 = (uint) _param0[length2];
      ulong num19 = (ulong) (uint) _param1[index2];
      ulong num20 = num19 * (ulong) num4;
      ulong num21 = (num20 & (ulong) uint.MaxValue) + (ulong) num18;
      ulong num22 = (ulong) ((uint) num21 * _param4);
      ulong num23 = num22 * (ulong) (uint) _param3[length2 - 1];
      ulong num24 = (num21 + (ulong) (uint) num23 >> 32) + (num20 >> 32) + (num23 >> 32);
      for (int index3 = length2 - 2; index3 >= 0; --index3)
      {
        ulong num25 = num19 * (ulong) (uint) _param2[index3];
        ulong num26 = num22 * (ulong) (uint) _param3[index3];
        ulong num27 = num24 + ((num25 & (ulong) uint.MaxValue) + (ulong) (uint) num26 + (ulong) (uint) _param0[index3 + 1]);
        _param0[index3 + 2] = (int) num27;
        num24 = (num27 >> 32) + (num25 >> 32) + (num26 >> 32);
      }
      ulong num28 = num24 + (ulong) (uint) num17;
      _param0[1] = (int) num28;
      num17 = (int) (num28 >> 32);
    }
    _param0[0] = num17;
    if (!_param5 && \u0005​.\u0002(0, _param0, 0, _param3) >= 0)
      \u0005​.\u0002(0, _param0, 0, _param3);
    Array.Copy((Array) _param0, 1, (Array) _param1, 0, length2);
    return;
label_18:
    num6 = (ulong) num12;
    goto label_11;
label_17:
    num6 = (ulong) num11;
    goto label_10;
label_16:
    num10 = (ulong) num9;
    goto label_9;
label_15:
    num8 = (ulong) num7;
    goto label_8;
label_14:
    num6 = (ulong) num5;
    goto label_7;
label_13:
    num3 = (ulong) num2;
    goto label_6;
label_12:
    num4 = (uint) num1;
    goto label_5;
label_2:
    length2 = length1;
    goto label_1;
  }

  private static void \u0002(
    int[] _param0,
    int[] _param1,
    int[] _param2,
    uint _param3,
    bool _param4)
  {
    int length1 = _param2.Length;
    if (true)
      goto label_2;
label_1:
    int length2;
    if (length2 == 1)
    {
      int num1 = _param1[0];
      if (true)
        goto label_5;
label_4:
      uint num2;
      _param1[0] = (int) \u0005​.\u0002(num2, num2, (uint) _param2[0], _param3);
      return;
label_5:
      num2 = (uint) num1;
      goto label_4;
    }
    else
    {
      long num3 = (long) (uint) _param1[length2 - 1];
      if (true)
        goto label_13;
label_7:
      ulong num4;
      long num5 = (long) num4 * (long) num4;
      if (true)
        goto label_14;
label_8:
      ulong num6;
      long num7 = (long) ((uint) num6 * _param3);
      if (true)
        goto label_15;
label_9:
      ulong num8;
      long num9 = (long) num8 * (long) (uint) _param2[length2 - 1];
      if (true)
        goto label_16;
label_10:
      ulong num10;
      long num11 = (long) num6 + (long) (uint) num10;
      if (true)
        goto label_17;
label_11:
      long num12 = (long) (num6 >> 32) + (long) (num10 >> 32);
      if (true)
        goto label_18;
label_12:
      int num13 = length2 - 2;
      int index1;
      if (true)
        index1 = num13;
      for (; index1 >= 0; --index1)
      {
        long num14 = (long) num4 * (long) (uint) _param1[index1];
        if (true)
          goto label_22;
label_21:
        ulong num15 = num8 * (ulong) (uint) _param2[index1];
        ulong num16;
        ulong num17 = num6 + ((num15 & (ulong) uint.MaxValue) + (ulong) ((uint) num16 << 1));
        _param0[index1 + 2] = (int) num17;
        num6 = (num17 >> 32) + (num16 >> 31) + (num15 >> 32);
        continue;
label_22:
        num16 = (ulong) num14;
        goto label_21;
      }
      _param0[1] = (int) num6;
      int num18 = (int) (num6 >> 32);
      for (int index2 = length2 - 2; index2 >= 0; --index2)
      {
        uint num19 = (uint) _param0[length2];
        ulong num20 = (ulong) (num19 * _param3);
        ulong num21 = num20 * (ulong) (uint) _param2[length2 - 1] + (ulong) num19 >> 32;
        for (int index3 = length2 - 2; index3 > index2; --index3)
        {
          ulong num22 = num21 + (num20 * (ulong) (uint) _param2[index3] + (ulong) (uint) _param0[index3 + 1]);
          _param0[index3 + 2] = (int) num22;
          num21 = num22 >> 32;
        }
        ulong num23 = (ulong) (uint) _param1[index2];
        ulong num24 = num23 * num23;
        ulong num25 = num20 * (ulong) (uint) _param2[index2];
        ulong num26 = num21 + ((num24 & (ulong) uint.MaxValue) + (ulong) (uint) num25 + (ulong) (uint) _param0[index2 + 1]);
        _param0[index2 + 2] = (int) num26;
        ulong num27 = (num26 >> 32) + (num24 >> 32) + (num25 >> 32);
        for (int index4 = index2 - 1; index4 >= 0; --index4)
        {
          ulong num28 = num23 * (ulong) (uint) _param1[index4];
          ulong num29 = num20 * (ulong) (uint) _param2[index4];
          ulong num30 = num27 + ((num29 & (ulong) uint.MaxValue) + (ulong) ((uint) num28 << 1) + (ulong) (uint) _param0[index4 + 1]);
          _param0[index4 + 2] = (int) num30;
          num27 = (num30 >> 32) + (num28 >> 31) + (num29 >> 32);
        }
        ulong num31 = num27 + (ulong) (uint) num18;
        _param0[1] = (int) num31;
        num18 = (int) (num31 >> 32);
      }
      _param0[0] = num18;
      if (!_param4 && \u0005​.\u0002(0, _param0, 0, _param2) >= 0)
        \u0005​.\u0002(0, _param0, 0, _param2);
      Array.Copy((Array) _param0, 1, (Array) _param1, 0, length2);
      return;
label_18:
      num6 = (ulong) num12;
      goto label_12;
label_17:
      num6 = (ulong) num11;
      goto label_11;
label_16:
      num10 = (ulong) num9;
      goto label_10;
label_15:
      num8 = (ulong) num7;
      goto label_9;
label_14:
      num6 = (ulong) num5;
      goto label_8;
label_13:
      num4 = (ulong) num3;
      goto label_7;
    }
label_2:
    length2 = length1;
    goto label_1;
  }

  private static uint \u0002(uint _param0, uint _param1, uint _param2, uint _param3)
  {
    long num1 = (long) _param0 * (long) _param1;
    if (true)
      goto label_4;
label_1:
    ulong num2;
    int num3 = (int) (uint) num2 * (int) _param3;
    if (true)
      goto label_5;
label_2:
    long num4 = (long) _param2;
    if (true)
      goto label_6;
label_3:
    ulong num5;
    uint num6;
    ulong num7 = num5 * (ulong) num6;
    ulong num8 = (num2 + (ulong) (uint) num7 >> 32) + (num7 >> 32);
    if (num8 > num5)
      num8 -= num5;
    return (uint) num8;
label_6:
    num5 = (ulong) num4;
    goto label_3;
label_5:
    num6 = (uint) num3;
    goto label_2;
label_4:
    num2 = (ulong) num1;
    goto label_1;
  }

  private static int[] \u0002(int _param0)
  {
    int num1 = \u0005​.\u0003(_param0);
    if (true)
      goto label_4;
label_1:
    int num2;
    int[] numArray1 = new int[num2 + 2];
    if (true)
      goto label_5;
label_2:
    if (true)
      goto label_6;
label_3:
    int num3 = 33 - num2;
    _param0 <<= num3;
    int num4 = 0;
    int[] numArray2;
    int num5;
    for (; num3 < 32; ++num3)
    {
      if (_param0 < 0)
      {
        numArray2[num5++] = 1 | num4 << 8;
        num4 = 0;
      }
      else
        ++num4;
      _param0 <<= 1;
    }
    int[] numArray3 = numArray2;
    int index1 = num5;
    int index2 = index1 + 1;
    int num6 = 1 | num4 << 8;
    numArray3[index1] = num6;
    numArray2[index2] = -1;
    return numArray2;
label_6:
    num5 = 0;
    goto label_3;
label_5:
    numArray2 = numArray1;
    goto label_2;
label_4:
    num2 = num1;
    goto label_1;
  }

  private static int[] \u0002(int[] _param0, int _param1)
  {
    int num1 = (int) ((uint) _param1 >> 5);
    if (true)
      goto label_4;
label_1:
    int num2 = _param1 & 31;
    if (true)
      goto label_5;
label_2:
    int length = _param0.Length;
    if (true)
      goto label_6;
label_3:
    int num3;
    int num4;
    int num5;
    int[] numArray;
    if (num3 == 0)
    {
      numArray = new int[num5 + num4];
      _param0.CopyTo((Array) numArray, 0);
    }
    else
    {
      int index1 = 0;
      int num6 = 32 - num3;
      int num7 = (int) ((uint) _param0[0] >> num6);
      if (num7 != 0)
      {
        numArray = new int[num5 + num4 + 1];
        numArray[index1++] = num7;
      }
      else
        numArray = new int[num5 + num4];
      int num8 = _param0[0];
      for (int index2 = 0; index2 < num5 - 1; ++index2)
      {
        int num9 = _param0[index2 + 1];
        numArray[index1++] = num8 << num3 | (int) ((uint) num9 >> num6);
        num8 = num9;
      }
      numArray[index1] = _param0[num5 - 1] << num3;
    }
    return numArray;
label_6:
    num5 = length;
    goto label_3;
label_5:
    num3 = num2;
    goto label_2;
label_4:
    num4 = num1;
    goto label_1;
  }

  private \u0005​ \u0002(int _param1)
  {
    if (this.\u000E == 0 || this.\u0006.Length == 0)
      return \u0005​.\u0003;
    if (_param1 == 0)
      return this;
    \u0005​ obj1 = new \u0005​(this.\u000E, \u0005​.\u0002(this.\u0006, _param1), true);
    if (true)
      goto label_6;
label_5:
    \u0005​ obj2;
    if (this.\u000F != -1)
    {
      \u0005​ obj3 = obj2;
      int num = this.\u000F + _param1;
      if (true)
        obj3.\u000F = num;
    }
    return obj2;
label_6:
    obj2 = obj1;
    goto label_5;
  }

  private static void \u0002(int _param0, int[] _param1, int _param2)
  {
    int num1 = (int) ((uint) _param2 >> 5) + _param0;
    if (true)
      goto label_5;
label_1:
    int num2 = _param2 & 31;
    if (true)
      goto label_6;
label_2:
    int num3 = _param1.Length - 1;
    if (true)
      goto label_7;
label_3:
    int index1;
    int index2;
    if (index1 != _param0)
    {
      int num4 = index1 - _param0;
      for (int index3 = index2; index3 >= index1; --index3)
        _param1[index3] = _param1[index3 - num4];
      for (int index4 = index1 - 1; index4 >= _param0; --index4)
        _param1[index4] = 0;
    }
    int num5;
    if (num5 == 0)
      return;
    int num6 = 32 - num5;
    int num7 = _param1[index2];
    for (int index5 = index2; index5 > index1; --index5)
    {
      int num8 = _param1[index5 - 1];
      _param1[index5] = (int) ((uint) num7 >> num5) | num8 << num6;
      num7 = num8;
    }
    _param1[index1] = (int) ((uint) _param1[index1] >> num5);
    return;
label_7:
    index2 = num3;
    goto label_3;
label_6:
    num5 = num2;
    goto label_2;
label_5:
    index1 = num1;
    goto label_1;
  }

  private static void \u0002(int _param0, int[] _param1)
  {
    int length = _param1.Length;
    if (true)
      goto label_2;
label_1:
    int index;
    int num1 = _param1[index - 1];
    int num2;
    if (true)
      num2 = num1;
    while (--index > _param0)
    {
      int num3 = _param1[index - 1];
      if (true)
        goto label_6;
label_5:
      int num4;
      _param1[index] = (int) ((uint) num2 >> 1) | num4 << 31;
      num2 = num4;
      continue;
label_6:
      num4 = num3;
      goto label_5;
    }
    _param1[_param0] = (int) ((uint) _param1[_param0] >> 1);
    return;
label_2:
    index = length;
    goto label_1;
  }

  public int \u0005()
  {
    if (true)
      ;
    return this.\u000E;
  }

  private static int[] \u0002(int _param0, int[] _param1, int _param2, int[] _param3)
  {
    int length1 = _param1.Length;
    if (true)
      goto label_3;
label_1:
    int length2 = _param3.Length;
    if (true)
      goto label_4;
label_2:
    int num1;
    if (true)
      num1 = 0;
    int index;
    int num2;
    do
    {
      long num3 = ((long) _param1[--index] & (long) uint.MaxValue) - ((long) _param3[--num2] & (long) uint.MaxValue) + (long) num1;
      _param1[index] = (int) num3;
      num1 = (int) (num3 >> 63);
    }
    while (num2 > _param2);
    if (num1 != 0)
    {
      while (--_param1[--index] == -1)
        ;
    }
    return _param1;
label_4:
    num2 = length2;
    goto label_2;
label_3:
    index = length1;
    goto label_1;
  }

  public byte[] \u0002()
  {
    if (this.\u000E == 0)
      return new byte[0];
    byte[] numArray1 = new byte[\u0005​.\u0002(this.\u0002())];
    if (true)
      goto label_4;
label_3:
    byte[] numArray2;
    this.\u0002(numArray2, 0);
    return numArray2;
label_4:
    numArray2 = numArray1;
    goto label_3;
  }

  public int \u0008()
  {
    if (true)
      ;
    return this.\u0002((byte[]) null, 0);
  }

  public int \u0002(byte[] _param1, int _param2)
  {
    if (this.\u000E == 0)
      return 0;
    int num1 = \u0005​.\u0002(this.\u0002());
    if (true)
      goto label_4;
label_3:
    int num2;
    if (_param1 == null)
      return num2;
    int length = this.\u0006.Length;
    if (true)
      goto label_9;
label_7:
    int num3 = _param2 + num2;
    if (true)
      goto label_10;
label_8:
    int num4;
    if (num4 > _param1.Length)
      throw new IndexOutOfRangeException();
    int num5;
    while (num5 > 1)
    {
      uint num6 = (uint) this.\u0006[--num5];
      int num7;
      _param1[num7 = num4 - 1] = (byte) num6;
      int num8;
      _param1[num8 = num7 - 1] = (byte) (num6 >> 8);
      int num9;
      _param1[num9 = num8 - 1] = (byte) (num6 >> 16);
      _param1[num4 = num9 - 1] = (byte) (num6 >> 24);
    }
    uint num10;
    for (num10 = (uint) this.\u0006[0]; num10 > (uint) byte.MaxValue; num10 >>= 8)
      _param1[--num4] = (byte) num10;
    int num11;
    _param1[num11 = num4 - 1] = (byte) num10;
    return num2;
label_10:
    num4 = num3;
    goto label_8;
label_9:
    num5 = length;
    goto label_7;
label_4:
    num2 = num1;
    goto label_3;
  }

  private static \u0005​ \u0002(ulong _param0)
  {
    int num1 = (int) (_param0 >> 32);
    if (true)
      goto label_3;
label_1:
    int num2 = (int) _param0;
    if (true)
      goto label_4;
label_2:
    int num3;
    int num4;
    if (num3 != 0)
      return new \u0005​(1, new int[2]{ num3, num4 }, false);
    if (num4 == 0)
      return \u0005​.\u0003;
    return new \u0005​(1, new int[1]{ num4 }, false);
label_4:
    num4 = num2;
    goto label_2;
label_3:
    num3 = num1;
    goto label_1;
  }

  public static \u0005​ \u0003(ulong _param0)
  {
    long num = (long) _param0;
    if (true)
      ;
    return \u0005​.\u0002((ulong) num);
  }

  private static int[] \u0002(int[] _param0, int[] _param1)
  {
    int index1;
    if (true)
      index1 = 0;
    while (index1 < _param0.Length && _param0[index1] == 0)
    {
      int num = index1 + 1;
      if (true)
        index1 = num;
    }
    int sourceIndex;
    if (true)
      sourceIndex = 0;
    while (sourceIndex < _param1.Length && _param1[sourceIndex] == 0)
    {
      int num = sourceIndex + 1;
      if (true)
        sourceIndex = num;
    }
    int num1 = \u0005​.\u0003(index1, _param0, sourceIndex, _param1);
    if (true)
      goto label_12;
label_11:
    int num2;
    if (num2 > 0)
    {
      int num3 = \u0005​.\u0002(1, sourceIndex, _param1);
      if (true)
        goto label_15;
label_14:
      int num4 = \u0005​.\u0002(1, index1, _param0);
      int num5;
      int num6 = num4 - num5;
      int index2 = 0;
      int num7 = num5;
      int[] destinationArray;
      if (num6 > 0)
      {
        destinationArray = \u0005​.\u0002(_param1, num6);
        num7 += num6;
      }
      else
      {
        int length = _param1.Length - sourceIndex;
        destinationArray = new int[length];
        Array.Copy((Array) _param1, sourceIndex, (Array) destinationArray, 0, length);
      }
label_18:
      if (num7 < num4 || \u0005​.\u0003(index1, _param0, index2, destinationArray) >= 0)
      {
        \u0005​.\u0002(index1, _param0, index2, destinationArray);
        while (_param0[index1] == 0)
        {
          if (++index1 == _param0.Length)
            return _param0;
        }
        num4 = 32 * (_param0.Length - index1 - 1) + \u0005​.\u0003(_param0[index1]);
        if (num4 <= num5)
        {
          if (num4 < num5)
            return _param0;
          num2 = \u0005​.\u0003(index1, _param0, sourceIndex, _param1);
          if (num2 <= 0)
            goto label_34;
        }
      }
      int num8 = num7 - num4;
      if (num8 == 1 && (uint) destinationArray[index2] >> 1 > (uint) _param0[index1])
        ++num8;
      if (num8 < 2)
      {
        \u0005​.\u0002(index2, destinationArray);
        --num7;
      }
      else
      {
        \u0005​.\u0002(index2, destinationArray, num8);
        num7 -= num8;
      }
      while (destinationArray[index2] == 0)
        ++index2;
      goto label_18;
label_15:
      num5 = num3;
      goto label_14;
    }
label_34:
    if (num2 == 0)
      Array.Clear((Array) _param0, index1, _param0.Length - index1);
    return _param0;
label_12:
    num2 = num1;
    goto label_11;
  }

  private \u0005​ \u0002(\u0005​ _param1)
  {
    if (this.\u000E == 0)
      return \u0005​.\u0003;
    if (\u0005​.\u0003(0, this.\u0006, 0, _param1.\u0006) < 0)
      return this;
    int[] numArray1 = (int[]) this.\u0006.Clone();
    if (true)
      goto label_7;
label_5:
    int[] numArray2;
    int[] numArray3 = \u0005​.\u0002(numArray2, _param1.\u0006);
    if (true)
      goto label_8;
label_6:
    return new \u0005​(this.\u000E, numArray2, true);
label_8:
    numArray2 = numArray3;
    goto label_6;
label_7:
    numArray2 = numArray1;
    goto label_5;
  }

  private static int[] \u0002(int[] _param0)
  {
    int[] numArray1 = new int[_param0.Length];
    if (true)
      goto label_3;
label_1:
    int[] src = _param0;
    int[] numArray2;
    int[] dst = numArray2;
    int count = _param0.Length * 4;
    if (true)
      goto label_4;
label_2:
    return numArray2;
label_4:
    Buffer.BlockCopy((Array) src, 0, (Array) dst, 0, count);
    goto label_2;
label_3:
    numArray2 = numArray1;
    goto label_1;
  }
}
