// Decompiled with JetBrains decompiler
// Type: ?1?.?2?.?11?
// Assembly: D3Scene, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 88910C3E-C035-4DE2-9B94-1541802FDD71
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Worm.Win32.Bybz.kg-951d6f2160a09558efbf37ce5e095f3dcbb92ffd3b90a3a7417ea27acc08a5f4.exe

using \u003F1\u003F.\u003F2\u003F;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace \u003F1\u003F.\u003F2\u003F
{
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
  [CompilerGenerated]
  internal sealed class \u003F11\u003F : ApplicationSettingsBase
  {
    private static \u003F11\u003F defaultInstance = (\u003F11\u003F) SettingsBase.Synchronized((SettingsBase) new \u003F11\u003F());
    private static bool addedHandler;
    private static object addedHandlerLockObject = RuntimeHelpers.GetObjectValue(new object());

    [DebuggerNonUserCode]
    public \u003F11\u003F()
    {
    }

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static void \u003F20\u003F(object _param0, EventArgs _param1)
    {
      if (!\u003F5\u003F.\u003F31\u003F.SaveMySettingsOnExit)
        return;
      \u003F12\u003F.\u003F39\u003F.Save();
    }

    public static \u003F11\u003F \u003F38\u003F
    {
      get
      {
        if (!\u003F11\u003F.addedHandler)
        {
          object handlerLockObject = \u003F11\u003F.addedHandlerLockObject;
          ObjectFlowControl.CheckForSyncLockOnValueType(handlerLockObject);
          Monitor.Enter(handlerLockObject);
          try
          {
            if (!\u003F11\u003F.addedHandler)
            {
              \u003F5\u003F.\u003F31\u003F.Shutdown += (ShutdownEventHandler) ((_param0, _param1) =>
              {
                if (!\u003F5\u003F.\u003F31\u003F.SaveMySettingsOnExit)
                  return;
                \u003F12\u003F.\u003F39\u003F.Save();
              });
              \u003F11\u003F.addedHandler = true;
            }
          }
          finally
          {
            Monitor.Exit(handlerLockObject);
          }
        }
        \u003F11\u003F defaultInstance = \u003F11\u003F.defaultInstance;
        return defaultInstance;
      }
    }
  }
}
