// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Payment-Order-(Copy).Pdfi, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F70914EF-5364-4930-8ADC-EFA87D5FFE39
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.Win32.Generic-18a2ad320bfe0f724ced2712bb2ad0cd99d11a4e67ef509cea062cfda7166e33.exe

using \u0006;
using \u0015;
using System;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace \u0015
{
  internal class \u001A
  {
    private static bool \u0018([In] Assembly obj0, [In] Assembly obj1)
    {
      byte[] publicKey1 = obj0.GetName().GetPublicKey();
      byte[] publicKey2 = obj1.GetName().GetPublicKey();
      if (publicKey2 == null != (publicKey1 == null))
        return false;
      if (publicKey2 != null)
      {
        for (int index = 0; index < publicKey2.Length; ++index)
        {
          if ((int) publicKey2[index] != (int) publicKey1[index])
            return false;
        }
      }
      return true;
    }

    public static byte[] \u0019([In] byte[] obj0)
    {
      Assembly callingAssembly = Assembly.GetCallingAssembly();
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
      if ((object) callingAssembly != (object) executingAssembly && !\u001A.\u0018(executingAssembly, callingAssembly))
        return (byte[]) null;
      \u001A.\u009A obj1 = new \u001A.\u009A(obj0);
      byte[] numArray1 = new byte[0];
      int num1 = obj1.\u0099();
      if (num1 == 67324752)
      {
        short num2 = (short) obj1.\u0098();
        int num3 = obj1.\u0098();
        int num4 = obj1.\u0098();
        if (num1 != 67324752 || num2 != (short) 20 || num3 != 0 || num4 != 8)
          throw new FormatException("Wrong Header Signature");
        obj1.\u0099();
        obj1.\u0099();
        obj1.\u0099();
        int length = obj1.\u0099();
        int count1 = obj1.\u0098();
        int count2 = obj1.\u0098();
        if (count1 > 0)
        {
          byte[] buffer = new byte[count1];
          obj1.Read(buffer, 0, count1);
        }
        if (count2 > 0)
        {
          byte[] buffer = new byte[count2];
          obj1.Read(buffer, 0, count2);
        }
        byte[] buffer1 = new byte[obj1.Length - obj1.Position];
        obj1.Read(buffer1, 0, buffer1.Length);
        \u001A.\u001E obj2 = new \u001A.\u001E(buffer1);
        numArray1 = new byte[length];
        obj2.\u001D(numArray1, 0, numArray1.Length);
      }
      else
      {
        int num5 = num1 >> 24;
        if (num1 - (num5 << 24) != 8223355)
          throw new FormatException("Unknown Header");
        if (num5 == 1)
        {
          int length1 = obj1.\u0099();
          numArray1 = new byte[length1];
          int num6;
          for (int index = 0; index < length1; index += num6)
          {
            int length2 = obj1.\u0099();
            num6 = obj1.\u0099();
            byte[] buffer = new byte[length2];
            obj1.Read(buffer, 0, buffer.Length);
            new \u001A.\u001E(buffer).\u001D(numArray1, index, num6);
          }
        }
        if (num5 == 2)
        {
          byte[] numArray2 = new byte[8]
          {
            (byte) 63,
            (byte) 114,
            (byte) 109,
            (byte) 214,
            (byte) 60,
            (byte) 64,
            (byte) 91,
            (byte) 105
          };
          byte[] numArray3 = new byte[8]
          {
            (byte) 219,
            (byte) 36,
            (byte) 224,
            (byte) 142,
            (byte) 70,
            (byte) 51,
            (byte) 216,
            (byte) 185
          };
          using (\u0017 obj3 = new \u0017())
          {
            using (ICryptoTransform cryptoTransform = obj3.\u0016(numArray2, numArray3, true))
              numArray1 = \u001A.\u0019(cryptoTransform.TransformFinalBlock(obj0, 4, obj0.Length - 4));
          }
        }
        if (num5 == 3)
        {
          byte[] numArray4 = new byte[16]
          {
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1
          };
          byte[] numArray5 = new byte[16]
          {
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2
          };
          using (\u0014 obj4 = new \u0014())
          {
            using (ICryptoTransform cryptoTransform = obj4.\u0011(numArray4, numArray5, true))
              numArray1 = \u001A.\u0019(cryptoTransform.TransformFinalBlock(obj0, 4, obj0.Length - 4));
          }
        }
      }
      obj1.Close();
      return numArray1;
    }

    internal sealed class \u001E
    {
      private static readonly int[] \u0001 = new int[29]
      {
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        17,
        19,
        23,
        27,
        31,
        35,
        43,
        51,
        59,
        67,
        83,
        99,
        115,
        131,
        163,
        195,
        227,
        258
      };
      private static readonly int[] \u0002 = new int[29]
      {
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        5,
        0
      };
      private static readonly int[] \u0003 = new int[30]
      {
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        13,
        17,
        25,
        33,
        49,
        65,
        97,
        129,
        193,
        257,
        385,
        513,
        769,
        1025,
        1537,
        2049,
        3073,
        4097,
        6145,
        8193,
        12289,
        16385,
        24577
      };
      private static readonly int[] \u0004 = new int[30]
      {
        0,
        0,
        0,
        0,
        1,
        1,
        2,
        2,
        3,
        3,
        4,
        4,
        5,
        5,
        6,
        6,
        7,
        7,
        8,
        8,
        9,
        9,
        10,
        10,
        11,
        11,
        12,
        12,
        13,
        13
      };
      private int \u0005;
      private int \u0006;
      private int \u0007;
      private int \u0008;
      private int \u000E;
      private bool \u000F;
      private \u001A.\u0087 \u0010;
      private \u001A.\u008F \u0011;
      private \u001A.\u0095 \u0012;
      private \u001A.\u0092 \u0013;
      private \u001A.\u0092 \u0014;

      public \u001E([In] byte[] obj0)
      {
        this.\u0010 = new \u001A.\u0087();
        this.\u0011 = new \u001A.\u008F();
        this.\u0005 = 2;
        this.\u0010.\u0086(obj0, 0, obj0.Length);
      }

      private bool \u001B()
      {
        int num1 = this.\u0011.\u008C();
        if (true)
          goto label_25;
label_23:
        int num2;
        while (num2 >= 258)
        {
          switch (this.\u0005)
          {
            case 7:
              int num3;
              while (((num3 = this.\u0013.\u0091(this.\u0010)) & -256) == 0)
              {
                this.\u0011.\u0088(num3);
                if (--num2 < 258)
                  return true;
              }
              if (num3 < 257)
              {
                if (num3 < 0)
                  return false;
                this.\u0014 = (\u001A.\u0092) null;
                this.\u0013 = (\u001A.\u0092) null;
                this.\u0005 = 2;
                return true;
              }
              this.\u0007 = \u001A.\u001E.\u0001[num3 - 257];
              this.\u0006 = \u001A.\u001E.\u0002[num3 - 257];
              goto case 8;
            case 8:
              if (this.\u0006 > 0)
              {
                this.\u0005 = 8;
                int num4 = this.\u0010.\u001F(this.\u0006);
                if (num4 < 0)
                  return false;
                this.\u0010.\u007F(this.\u0006);
                this.\u0007 += num4;
              }
              this.\u0005 = 9;
              goto case 9;
            case 9:
              int index = this.\u0014.\u0091(this.\u0010);
              if (index < 0)
                return false;
              this.\u0008 = \u001A.\u001E.\u0003[index];
              this.\u0006 = \u001A.\u001E.\u0004[index];
              goto case 10;
            case 10:
              if (this.\u0006 > 0)
              {
                this.\u0005 = 10;
                int num5 = this.\u0010.\u001F(this.\u0006);
                if (num5 < 0)
                  return false;
                this.\u0010.\u007F(this.\u0006);
                this.\u0008 += num5;
              }
              this.\u0011.\u008A(this.\u0007, this.\u0008);
              num2 -= this.\u0007;
              this.\u0005 = 7;
              continue;
            default:
              continue;
          }
        }
        return true;
label_25:
        num2 = num1;
        goto label_23;
      }

      private bool \u001C()
      {
        switch (this.\u0005)
        {
          case 2:
            if (this.\u000F)
            {
              this.\u0005 = 12;
              return false;
            }
            int num = this.\u0010.\u001F(3);
            if (num < 0)
              return false;
            this.\u0010.\u007F(3);
            if ((num & 1) != 0)
              this.\u000F = true;
            switch (num >> 1)
            {
              case 0:
                this.\u0010.\u0082();
                this.\u0005 = 3;
                break;
              case 1:
                this.\u0013 = \u001A.\u0092.\u0002;
                this.\u0014 = \u001A.\u0092.\u0003;
                this.\u0005 = 7;
                break;
              case 2:
                this.\u0012 = new \u001A.\u0095();
                this.\u0005 = 6;
                break;
            }
            return true;
          case 3:
            if ((this.\u000E = this.\u0010.\u001F(16)) < 0)
              return false;
            this.\u0010.\u007F(16);
            this.\u0005 = 4;
            goto case 4;
          case 4:
            if (this.\u0010.\u001F(16) < 0)
              return false;
            this.\u0010.\u007F(16);
            this.\u0005 = 5;
            goto case 5;
          case 5:
            this.\u000E -= this.\u0011.\u008B(this.\u0010, this.\u000E);
            if (this.\u000E != 0)
              return !this.\u0010.\u0083();
            this.\u0005 = 2;
            return true;
          case 6:
            if (!this.\u0012.\u001C(this.\u0010))
              return false;
            this.\u0013 = this.\u0012.\u0093();
            this.\u0014 = this.\u0012.\u0094();
            this.\u0005 = 7;
            goto case 7;
          case 7:
          case 8:
          case 9:
          case 10:
            return this.\u001B();
          case 12:
            return false;
          default:
            return false;
        }
      }

      public int \u001D([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = 0;
        do
        {
          if (this.\u0005 != 11)
            goto label_5;
label_2:
          continue;
label_5:
          int num2 = this.\u0011.\u008E(obj0, obj1, obj2);
          obj1 += num2;
          num1 += num2;
          obj2 -= num2;
          if (obj2 != 0)
            goto label_2;
          else
            goto label_1;
        }
        while (this.\u001C() || this.\u0011.\u008D() > 0 && this.\u0005 != 11);
        goto label_3;
label_1:
        return num1;
label_3:
        return num1;
      }
    }

    internal sealed class \u0087
    {
      private byte[] \u0001;
      private int \u0002 = 0;
      private int \u0003 = 0;
      private uint \u0004 = 0;
      private int \u0005 = 0;

      public int \u001F([In] int obj0)
      {
        if (this.\u0005 < obj0)
          goto label_4;
label_3:
        return (int) ((long) this.\u0004 & (long) ((1 << obj0) - 1));
label_4:
        if (this.\u0002 == this.\u0003)
          return -1;
        this.\u0004 |= (uint) (((int) this.\u0001[this.\u0002++] & (int) byte.MaxValue | ((int) this.\u0001[this.\u0002++] & (int) byte.MaxValue) << 8) << this.\u0005);
        this.\u0005 += 16;
        goto label_3;
      }

      public void \u007F([In] int obj0)
      {
        this.\u0004 >>= obj0;
        this.\u0005 -= obj0;
      }

      [SpecialName]
      public int \u0080() => this.\u0005;

      [SpecialName]
      public int \u0081() => this.\u0003 - this.\u0002 + (this.\u0005 >> 3);

      public void \u0082()
      {
        this.\u0004 >>= this.\u0005 & 7;
        this.\u0005 &= -8;
      }

      [SpecialName]
      public bool \u0083() => this.\u0002 == this.\u0003;

      public int \u0084([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = 0;
        while (this.\u0005 > 0 && obj2 > 0)
        {
          obj0[obj1++] = (byte) this.\u0004;
          this.\u0004 >>= 8;
          this.\u0005 -= 8;
          --obj2;
          ++num1;
        }
        if (obj2 == 0)
          return num1;
        int num2 = this.\u0003 - this.\u0002;
        if (obj2 > num2)
          obj2 = num2;
        Array.Copy((Array) this.\u0001, this.\u0002, (Array) obj0, obj1, obj2);
        this.\u0002 += obj2;
        if ((this.\u0002 - this.\u0003 & 1) != 0)
        {
          this.\u0004 = (uint) this.\u0001[this.\u0002++] & (uint) byte.MaxValue;
          this.\u0005 = 8;
        }
        return num1 + obj2;
      }

      public void \u0086([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        if (this.\u0002 < this.\u0003)
          throw new InvalidOperationException();
        int num = obj1 + obj2;
        if (0 > obj1 || obj1 > num || num > obj0.Length)
          throw new ArgumentOutOfRangeException();
        if ((obj2 & 1) != 0)
        {
          this.\u0004 |= (uint) (((int) obj0[obj1++] & (int) byte.MaxValue) << this.\u0005);
          this.\u0005 += 8;
        }
        this.\u0001 = obj0;
        this.\u0002 = obj1;
        this.\u0003 = num;
      }
    }

    internal sealed class \u008F
    {
      private byte[] \u0001 = new byte[32768];
      private int \u0002 = 0;
      private int \u0003 = 0;

      public void \u0088([In] int obj0)
      {
        \u001A.\u008F obj = this;
        int num1;
        int num2 = num1 = obj.\u0003;
        obj.\u0003 = num1 + 1;
        if (num2 == 32768)
          throw new InvalidOperationException();
        this.\u0001[this.\u0002++] = (byte) obj0;
        this.\u0002 &= (int) short.MaxValue;
      }

      private void \u0089([In] int obj0, [In] int obj1, [In] int obj2)
      {
        while (obj1-- > 0)
        {
          byte[] numArray = this.\u0001;
          \u001A.\u008F obj = this;
          int num1;
          int num2 = num1 = obj.\u0002;
          obj.\u0002 = num1 + 1;
          int index = num2;
          int num3 = (int) this.\u0001[obj0++];
          numArray[index] = (byte) num3;
          this.\u0002 &= (int) short.MaxValue;
          obj0 &= (int) short.MaxValue;
        }
      }

      public void \u008A([In] int obj0, [In] int obj1)
      {
        if ((this.\u0003 += obj0) > 32768)
          throw new InvalidOperationException();
        int sourceIndex = this.\u0002 - obj1 & (int) short.MaxValue;
        int num = 32768 - obj0;
        if (sourceIndex <= num && this.\u0002 < num)
        {
          if (obj0 <= obj1)
          {
            Array.Copy((Array) this.\u0001, sourceIndex, (Array) this.\u0001, this.\u0002, obj0);
            this.\u0002 += obj0;
          }
          else
          {
            while (obj0-- > 0)
              this.\u0001[this.\u0002++] = this.\u0001[sourceIndex++];
          }
        }
        else
          this.\u0089(sourceIndex, obj0, obj1);
      }

      public int \u008B([In] \u001A.\u0087 obj0, [In] int obj1)
      {
        obj1 = Math.Min(Math.Min(obj1, 32768 - this.\u0003), obj0.\u0081());
        int num1 = 32768 - this.\u0002;
        int num2;
        if (obj1 > num1)
        {
          num2 = obj0.\u0084(this.\u0001, this.\u0002, num1);
          if (num2 == num1)
            num2 += obj0.\u0084(this.\u0001, 0, obj1 - num1);
        }
        else
          num2 = obj0.\u0084(this.\u0001, this.\u0002, obj1);
        this.\u0002 = this.\u0002 + num2 & (int) short.MaxValue;
        this.\u0003 += num2;
        return num2;
      }

      public int \u008C() => 32768 - this.\u0003;

      public int \u008D() => this.\u0003;

      public int \u008E([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = this.\u0002;
        if (obj2 > this.\u0003)
          obj2 = this.\u0003;
        else
          num1 = this.\u0002 - this.\u0003 + obj2 & (int) short.MaxValue;
        int num2 = obj2;
        int length = obj2 - num1;
        if (length > 0)
        {
          Array.Copy((Array) this.\u0001, 32768 - length, (Array) obj0, obj1, length);
          obj1 += length;
          obj2 = num1;
        }
        Array.Copy((Array) this.\u0001, num1 - obj2, (Array) obj0, obj1, obj2);
        this.\u0003 -= num2;
        if (this.\u0003 < 0)
          throw new InvalidOperationException();
        return num2;
      }
    }

    internal sealed class \u0092
    {
      private short[] \u0001;
      public static readonly \u001A.\u0092 \u0002;
      public static readonly \u001A.\u0092 \u0003;

      static \u0092()
      {
        byte[] numArray1 = new byte[288];
        int num1 = 0;
        while (num1 < 144)
          numArray1[num1++] = (byte) 8;
        while (num1 < 256)
          numArray1[num1++] = (byte) 9;
        while (num1 < 280)
          numArray1[num1++] = (byte) 7;
        while (num1 < 288)
          numArray1[num1++] = (byte) 8;
        \u001A.\u0092.\u0002 = new \u001A.\u0092(numArray1);
        byte[] numArray2 = new byte[32];
        int num2 = 0;
        while (num2 < 32)
          numArray2[num2++] = (byte) 5;
        \u001A.\u0092.\u0003 = new \u001A.\u0092(numArray2);
      }

      public \u0092([In] byte[] obj0) => this.\u0090(obj0);

      private void \u0090([In] byte[] obj0)
      {
        int[] numArray1 = new int[16];
        int[] numArray2 = new int[16];
        if (true)
          goto label_26;
label_4:
        int index1;
        for (; index1 < obj0.Length; ++index1)
        {
          int index2 = (int) obj0[index1];
          if (index2 > 0)
            ++numArray1[index2];
        }
        int num1 = 0;
        int length = 512;
        for (int index3 = 1; index3 <= 15; ++index3)
        {
          numArray2[index3] = num1;
          num1 += numArray1[index3] << 16 - index3;
          if (index3 >= 10)
          {
            int num2 = numArray2[index3] & 130944;
            int num3 = num1 & 130944;
            length += num3 - num2 >> 16 - index3;
          }
        }
        this.\u0001 = new short[length];
        int num4 = 512;
        for (int index4 = 15; index4 >= 10; --index4)
        {
          int num5 = num1 & 130944;
          num1 -= numArray1[index4] << 16 - index4;
          for (int index5 = num1 & 130944; index5 < num5; index5 += 128)
          {
            this.\u0001[(int) \u001A.\u0097.\u0096(index5)] = (short) (-num4 << 4 | index4);
            num4 += 1 << index4 - 9;
          }
        }
        for (int index6 = 0; index6 < obj0.Length; ++index6)
        {
          int index7 = (int) obj0[index6];
          if (index7 != 0)
          {
            int num6 = numArray2[index7];
            int index8 = (int) \u001A.\u0097.\u0096(num6);
            if (index7 <= 9)
            {
              do
              {
                this.\u0001[index8] = (short) (index6 << 4 | index7);
                index8 += 1 << index7;
              }
              while (index8 < 512);
            }
            else
            {
              int num7 = (int) this.\u0001[index8 & 511];
              int num8 = 1 << (num7 & 15);
              int num9 = -(num7 >> 4);
              do
              {
                this.\u0001[num9 | index8 >> 9] = (short) (index6 << 4 | index7);
                index8 += 1 << index7;
              }
              while (index8 < num8);
            }
            numArray2[index7] = num6 + (1 << 16 - index7);
          }
        }
        return;
label_26:
        index1 = 0;
        goto label_4;
      }

      public int \u0091([In] \u001A.\u0087 obj0)
      {
        int index;
        if ((index = obj0.\u001F(9)) < 0)
        {
          int num1 = obj0.\u0080();
          int num2 = (int) this.\u0001[obj0.\u001F(num1)];
          if (num2 < 0 || (num2 & 15) > num1)
            return -1;
          obj0.\u007F(num2 & 15);
          return num2 >> 4;
        }
        int num3;
        if ((num3 = (int) this.\u0001[index]) >= 0)
        {
          obj0.\u007F(num3 & 15);
          return num3 >> 4;
        }
        int num4 = -(num3 >> 4);
        int num5 = num3 & 15;
        int num6;
        if ((num6 = obj0.\u001F(num5)) >= 0)
        {
          int num7 = (int) this.\u0001[num4 | num6 >> 9];
          obj0.\u007F(num7 & 15);
          return num7 >> 4;
        }
        int num8 = obj0.\u0080();
        int num9 = obj0.\u001F(num8);
        int num10 = (int) this.\u0001[num4 | num9 >> 9];
        if ((num10 & 15) > num8)
          return -1;
        obj0.\u007F(num10 & 15);
        return num10 >> 4;
      }
    }

    internal sealed class \u0095
    {
      private static readonly int[] \u0001 = new int[3]
      {
        3,
        3,
        11
      };
      private static readonly int[] \u0002 = new int[3]
      {
        2,
        3,
        7
      };
      private byte[] \u0003;
      private byte[] \u0004;
      private \u001A.\u0092 \u0005;
      private int \u0006;
      private int \u0007;
      private int \u0008;
      private int \u000E;
      private int \u000F;
      private int \u0010;
      private byte \u0011;
      private int \u0012;
      private static readonly int[] \u0013;

      public bool \u001C([In] \u001A.\u0087 obj0)
      {
        while (true)
        {
          switch (this.\u0006)
          {
            case 0:
              this.\u0007 = obj0.\u001F(5);
              if (this.\u0007 >= 0)
              {
                this.\u0007 += 257;
                obj0.\u007F(5);
                this.\u0006 = 1;
                goto case 1;
              }
              else
                goto label_2;
            case 1:
              this.\u0008 = obj0.\u001F(5);
              if (this.\u0008 >= 0)
              {
                ++this.\u0008;
                obj0.\u007F(5);
                this.\u000F = this.\u0007 + this.\u0008;
                this.\u0004 = new byte[this.\u000F];
                this.\u0006 = 2;
                goto case 2;
              }
              else
                goto label_5;
            case 2:
              this.\u000E = obj0.\u001F(4);
              if (this.\u000E >= 0)
              {
                this.\u000E += 4;
                obj0.\u007F(4);
                this.\u0003 = new byte[19];
                this.\u0012 = 0;
                this.\u0006 = 3;
                goto case 3;
              }
              else
                goto label_8;
            case 3:
              for (; this.\u0012 < this.\u000E; ++this.\u0012)
              {
                int num = obj0.\u001F(3);
                if (num < 0)
                  return false;
                obj0.\u007F(3);
                this.\u0003[\u001A.\u0095.\u0013[this.\u0012]] = (byte) num;
              }
              this.\u0005 = new \u001A.\u0092(this.\u0003);
              this.\u0003 = (byte[]) null;
              this.\u0012 = 0;
              this.\u0006 = 4;
              goto case 4;
            case 4:
              int num1;
              while (((num1 = this.\u0005.\u0091(obj0)) & -16) == 0)
              {
                this.\u0004[this.\u0012++] = this.\u0011 = (byte) num1;
                if (this.\u0012 == this.\u000F)
                  return true;
              }
              if (num1 >= 0)
              {
                if (num1 >= 17)
                  this.\u0011 = (byte) 0;
                this.\u0010 = num1 - 16;
                this.\u0006 = 5;
                goto case 5;
              }
              else
                goto label_19;
            case 5:
              int num2 = \u001A.\u0095.\u0002[this.\u0010];
              int num3 = obj0.\u001F(num2);
              if (num3 >= 0)
              {
                obj0.\u007F(num2);
                int num4 = num3 + \u001A.\u0095.\u0001[this.\u0010];
                while (num4-- > 0)
                  this.\u0004[this.\u0012++] = this.\u0011;
                if (this.\u0012 != this.\u000F)
                {
                  this.\u0006 = 4;
                  continue;
                }
                goto label_29;
              }
              else
                goto label_24;
            default:
              continue;
          }
        }
label_2:
        return false;
label_5:
        return false;
label_8:
        return false;
label_19:
        return false;
label_24:
        return false;
label_29:
        return true;
      }

      public \u001A.\u0092 \u0093()
      {
        byte[] destinationArray = new byte[this.\u0007];
        Array.Copy((Array) this.\u0004, 0, (Array) destinationArray, 0, this.\u0007);
        return new \u001A.\u0092(destinationArray);
      }

      public \u001A.\u0092 \u0094()
      {
        byte[] numArray = new byte[this.\u0008];
        byte[] destinationArray;
        if (true)
          destinationArray = numArray;
        Array.Copy((Array) this.\u0004, this.\u0007, (Array) destinationArray, 0, this.\u0008);
        return new \u001A.\u0092(destinationArray);
      }

      static \u0095()
      {
        int[] numArray = new int[19];
        // ISSUE: field reference
        RuntimeFieldHandle fldHandle = __fieldref (\u009B.\u0010);
        if (true)
          goto label_2;
label_1:
        \u001A.\u0095.\u0013 = numArray;
        return;
label_2:
        RuntimeHelpers.InitializeArray((Array) numArray, fldHandle);
        goto label_1;
      }
    }

    internal sealed class \u0097
    {
      private static readonly int[] \u0001 = new int[19]
      {
        16,
        17,
        18,
        0,
        8,
        7,
        9,
        6,
        10,
        5,
        11,
        4,
        12,
        3,
        13,
        2,
        14,
        1,
        15
      };
      private static readonly byte[] \u0002 = new byte[16]
      {
        (byte) 0,
        (byte) 8,
        (byte) 4,
        (byte) 12,
        (byte) 2,
        (byte) 10,
        (byte) 6,
        (byte) 14,
        (byte) 1,
        (byte) 9,
        (byte) 5,
        (byte) 13,
        (byte) 3,
        (byte) 11,
        (byte) 7,
        (byte) 15
      };
      private static readonly short[] \u0003 = new short[286];
      private static readonly byte[] \u0004 = new byte[286];
      private static readonly short[] \u0005;
      private static readonly byte[] \u0006;

      public static short \u0096([In] int obj0) => (short) ((int) \u001A.\u0097.\u0002[obj0 & 15] << 12 | (int) \u001A.\u0097.\u0002[obj0 >> 4 & 15] << 8 | (int) \u001A.\u0097.\u0002[obj0 >> 8 & 15] << 4 | (int) \u001A.\u0097.\u0002[obj0 >> 12]);

      static \u0097()
      {
        if (true)
          goto label_13;
label_2:
        int index1;
        for (; index1 < 144; \u001A.\u0097.\u0004[index1++] = (byte) 8)
          \u001A.\u0097.\u0003[index1] = \u001A.\u0097.\u0096(48 + index1 << 8);
        for (; index1 < 256; \u001A.\u0097.\u0004[index1++] = (byte) 9)
          \u001A.\u0097.\u0003[index1] = \u001A.\u0097.\u0096(256 + index1 << 7);
        for (; index1 < 280; \u001A.\u0097.\u0004[index1++] = (byte) 7)
          \u001A.\u0097.\u0003[index1] = \u001A.\u0097.\u0096(index1 - 256 << 9);
        for (; index1 < 286; \u001A.\u0097.\u0004[index1++] = (byte) 8)
          \u001A.\u0097.\u0003[index1] = \u001A.\u0097.\u0096(index1 - 88 << 8);
        \u001A.\u0097.\u0005 = new short[30];
        \u001A.\u0097.\u0006 = new byte[30];
        for (int index2 = 0; index2 < 30; ++index2)
        {
          \u001A.\u0097.\u0005[index2] = \u001A.\u0097.\u0096(index2 << 11);
          \u001A.\u0097.\u0006[index2] = (byte) 5;
        }
        return;
label_13:
        index1 = 0;
        goto label_2;
      }
    }

    internal sealed class \u009A : MemoryStream
    {
      public int \u0098() => this.ReadByte() | this.ReadByte() << 8;

      public int \u0099() => this.\u0098() | this.\u0098() << 16;

      public \u009A([In] byte[] obj0)
        : base(obj0, false)
      {
      }
    }
  }
}
