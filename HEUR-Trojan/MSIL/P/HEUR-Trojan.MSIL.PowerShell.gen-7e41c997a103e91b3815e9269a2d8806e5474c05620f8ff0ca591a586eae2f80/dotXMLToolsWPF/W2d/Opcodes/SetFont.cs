// Decompiled with JetBrains decompiler
// Type: dotXMLToolsWPF.W2d.Opcodes.SetFont
// Assembly: LeaseMana, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 529A6AA6-AEB5-47F3-B86B-C5E3C5F9FA62
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-7e41c997a103e91b3815e9269a2d8806e5474c05620f8ff0ca591a586eae2f80.exe

using System.IO;

namespace dotXMLToolsWPF.W2d.Opcodes
{
  public struct SetFont : IOpcode
  {
    public static readonly byte Id = 6;
    public readonly string Font;
    public readonly byte Charset;
    public readonly byte Pitch;
    public readonly byte Family;
    public readonly byte Style;
    public readonly uint Height;
    public readonly ushort Rotation;
    public readonly ushort WidthScale;
    public readonly ushort Spacing;
    public readonly ushort Oblique;
    public readonly uint Flags;

    public SetFont(
      string font,
      byte charset,
      byte pitch,
      byte family,
      byte style,
      uint height,
      ushort rotation,
      ushort widthScale,
      ushort spacing,
      ushort oblique,
      uint flags)
      : this()
    {
      this.Font = font;
      this.Charset = charset;
      this.Pitch = pitch;
      this.Family = family;
      this.Style = style;
      this.Height = height;
      this.Rotation = rotation;
      this.WidthScale = widthScale;
      this.Spacing = spacing;
      this.Oblique = oblique;
      this.Flags = flags;
    }

    public CoordinatesType CoordinatesType => CoordinatesType.Undefined;

    public class Factory : OpcodeFactory, ISingleByteOpcodeFactory
    {
      public int OpcodeId => (int) SetFont.Id;

      public override IOpcode ReadOpcode(Stream stream)
      {
        OpcodeFactory.ReadUnsignedShort(stream);
        string font = OpcodeFactory.ReadString(stream);
        byte charset = OpcodeFactory.ReadUnsignedByte(stream);
        byte pitch = OpcodeFactory.ReadUnsignedByte(stream);
        byte family = OpcodeFactory.ReadUnsignedByte(stream);
        byte style = OpcodeFactory.ReadUnsignedByte(stream);
        uint height = OpcodeFactory.ReadUnsignedLong(stream);
        ushort rotation = OpcodeFactory.ReadUnsignedShort(stream);
        ushort widthScale = OpcodeFactory.ReadUnsignedShort(stream);
        ushort spacing = OpcodeFactory.ReadUnsignedShort(stream);
        ushort oblique = OpcodeFactory.ReadUnsignedShort(stream);
        uint flags = OpcodeFactory.ReadUnsignedLong(stream);
        byte[] buffer = new byte[4];
        stream.Read(buffer, 0, buffer.Length);
        return (IOpcode) new SetFont(font, charset, pitch, family, style, height, rotation, widthScale, spacing, oblique, flags);
      }
    }
  }
}
