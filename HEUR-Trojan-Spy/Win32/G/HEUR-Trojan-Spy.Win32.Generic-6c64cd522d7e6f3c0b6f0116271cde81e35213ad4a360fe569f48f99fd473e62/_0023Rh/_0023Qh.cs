// Decompiled with JetBrains decompiler
// Type: #Rh.#Qh
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using \u0023de;
using \u0023Ff;
using \u0023Rh;
using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace \u0023Rh
{
  internal class \u0023Qh : Form
  {
    private \u0023rg \u0023rg;
    internal \u0023hf \u0023hf;
    internal Thread \u00236g;
    internal CheckBox \u00237g;
    internal Label \u00238g;
    internal Button \u00239g;
    internal Button \u0023Se;
    internal Label \u0023ah;
    internal Panel \u0023bh;
    internal Panel \u0023ch;
    internal Button \u0023dh;
    internal \u0023dg \u0023eh;
    internal \u0023Uf \u0023fh;
    internal \u0023Uf \u0023gh;
    internal \u0023Uf \u0023hh;
    internal \u0023Uf \u0023ih;
    internal Button \u0023jh;
    internal Button \u0023kh;
    internal \u00232f \u0023lh;
    internal \u00232f \u0023mh;
    internal Button \u0023nh;
    private IContainer \u0023oh;
    internal Panel \u0023ph;
    internal Label \u0023qh;
    internal \u00232f \u0023rh;
    internal Button \u0023sh;
    internal TextBox \u0023th;
    internal Label \u0023uh;
    internal CheckBox \u0023vh;
    internal \u0023Ef \u0023rf;
    internal \u00238f \u00238f;
    internal Button \u0023wh;
    internal Button \u0023xh;
    private bool \u0023yh;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0023Qh([In] \u0023rg obj0, [In] \u0023hf obj1)
    {
      int num1 = 2;
      if (true)
        goto label_7;
label_1:
      this.\u00239g.Focus();
label_2:
      this.\u0023th.Text = \u0023\u0023.\u0023nj("Email");
      int num2 = 6;
label_6:
      num1 = num2;
label_7:
      int num3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_4;
          case 1:
          case 7:
            int height = this.Height;
            this.\u0023hf = obj1;
            this.\u0023rg = obj0;
            this.\u0023rf.Text = obj1.\u0023bf.Message;
            num3 = height + (this.\u0023rf.Height - this.FontHeight);
            if (!obj1.\u0023ef)
            {
              this.\u00237g.Visible = false;
              num3 -= this.\u00237g.Height;
              num1 = 8;
              continue;
            }
            goto case 8;
          case 3:
            goto label_1;
          case 4:
            goto label_9;
          case 5:
            goto label_5;
          case 6:
            goto label_3;
          case 8:
            if (num3 > this.Height)
              this.Height = num3;
            if (obj1.\u0023cf)
            {
              if (true)
              {
                num1 = 5;
                continue;
              }
              goto label_19;
            }
            else
              goto label_10;
          case 9:
            goto label_20;
          default:
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto label_9;
        }
      }
label_3:
      \u0023\u0023.\u0023Zj(obj0, new \u0023of(this.\u0023Eh));
      num2 = 9;
      goto label_6;
label_4:
      // ISSUE: explicit constructor call
      this.\u002Ector();
      num2 = 7;
      goto label_6;
label_5:
      \u0023\u0023.\u00232j(obj0, new EventHandler(this.\u0023Fh));
      goto label_9;
label_20:
      return;
label_9:
      this.\u0023nh.Visible = true;
      this.\u00238f.Visible = false;
label_10:
      if (!obj1.\u0023df)
      {
        this.\u0023Se.Enabled = false;
        if (this.\u00239g.CanFocus)
        {
          num2 = 3;
          goto label_6;
        }
        else
          goto label_2;
      }
      else
        goto label_2;
label_19:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0023Qh()
    {
      int num1 = 3;
      IEnumerator enumerator1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this.\u0023kh.Size = this.\u0023jh.Size;
              this.\u0023kh.BringToFront();
              goto case 4;
            case 1:
            case 6:
              \u0023\u0023.\u0023il(this);
              this.Size = new Size(419, 264);
              this.MinimizeBox = false;
              num2 = 2;
              continue;
            case 2:
              goto label_7;
            case 3:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              num2 = 6;
              continue;
            case 4:
              this.\u0023ch.Location = Point.Empty;
              int num3 = 7;
              num2 = \u0023Qh.lyKkl95liOTf0U4D8Q2() ? num3 : num3;
              continue;
            case 5:
            case 7:
              goto label_6;
            case 8:
              goto label_10;
            default:
              num2 = 4;
              continue;
          }
        }
label_6:
        this.\u0023ch.Dock = DockStyle.Fill;
        this.Text = \u0023\u0023.\u0023Ci(this.Text, this);
        this.\u0023ph.Location = Point.Empty;
        this.\u0023ph.Dock = DockStyle.Fill;
        enumerator1 = this.Controls.GetEnumerator();
        num1 = 8;
        continue;
label_7:
        this.MaximizeBox = false;
        this.\u0023bh.Location = Point.Empty;
        this.\u0023bh.Dock = DockStyle.Fill;
        this.\u0023kh.Location = this.\u0023jh.Location;
        num1 = 0;
      }
label_10:
      try
      {
        while (enumerator1.MoveNext())
        {
          Control current1 = (Control) enumerator1.Current;
          current1.Text = \u0023\u0023.\u0023Ci(current1.Text, this);
          IEnumerator enumerator2 = current1.Controls.GetEnumerator();
          try
          {
label_17:
            while (enumerator2.MoveNext())
            {
              Control current2 = (Control) enumerator2.Current;
              int num4 = 2;
              while (true)
              {
                switch (num4)
                {
                  case 0:
                  case 2:
                    goto label_14;
                  case 1:
                  case 3:
                    goto label_17;
                  default:
                    if (true)
                    {
                      num4 = 3;
                      continue;
                    }
                    goto label_17;
                }
              }
label_14:
              current2.Text = \u0023\u0023.\u0023Ci(current2.Text, this);
            }
          }
          finally
          {
            if (enumerator2 is IDisposable disposable)
              disposable.Dispose();
          }
        }
      }
      finally
      {
        if (enumerator1 is IDisposable disposable)
          disposable.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    void Form.\u0023Sf([In] bool obj0)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              if (!obj0)
                goto case 2;
              else
                goto label_7;
            case 1:
            case 4:
              if (this.\u0023oh != null)
              {
                this.\u0023oh.Dispose();
                goto case 2;
              }
              else
                goto case 2;
            case 2:
              // ISSUE: explicit non-virtual call
              __nonvirtual (((Form) this).Dispose(obj0));
              int num3 = 5;
              num2 = \u0023Qh.lyKkl95liOTf0U4D8Q2() ? num3 : num3;
              continue;
            case 5:
              goto label_9;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 2;
        continue;
label_7:
        num1 = 4;
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023zh([In] object obj0, [In] EventArgs obj1)
    {
      this.\u0023bh.Visible = false;
      this.\u0023ph.Visible = true;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Ah([In] object obj0, [In] EventArgs obj1) => this.Close();

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Bh([In] object obj0, [In] EventArgs obj1)
    {
      try
      {
        if (this.\u00236g != null)
          this.\u00236g.Abort();
      }
      catch
      {
      }
      this.Close();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Ch([In] object obj0, [In] EventArgs obj1) => this.Close();

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Dh([In] object obj0, [In] EventArgs obj1) => this.\u0023hf.\u0023ff = this.\u00237g.Checked;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023Eh([In] object obj0, [In] \u0023tf obj1)
    {
      try
      {
        this.Invoke((Delegate) new \u0023of(this.\u0023Hh), obj0, (object) obj1);
      }
      catch (InvalidOperationException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023Fh([In] object obj0, [In] EventArgs obj1)
    {
      try
      {
        this.Invoke((Delegate) new EventHandler(this.\u0023Je), obj0, (object) obj1);
      }
      catch (InvalidOperationException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    void Form.\u0023Gh([In] CancelEventArgs obj0)
    {
      int num1 = 1;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 1:
            if (this.\u00236g != null)
            {
              num2 = 3;
              goto label_7;
            }
            else
              break;
          case 2:
          case 4:
            this.\u00236g.Abort();
            break;
          case 3:
            if (!this.\u00236g.IsAlive)
              break;
            goto case 2;
          case 5:
            goto label_6;
          default:
            num2 = 4;
            goto label_7;
        }
        // ISSUE: explicit non-virtual call
        __nonvirtual (((Form) this).OnClosing(obj0));
        num2 = 5;
label_7:
        num1 = num2;
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023Hh([In] object obj0, [In] \u0023tf obj1)
    {
      int num1 = 11;
      if (\u0023Qh.UBrNJO5ELEKdSYOCZNH())
        goto label_18;
label_1:
      string rf = obj1.\u0023rf;
      num1 = 10;
label_18:
      Button button1;
      \u0023Uf uf;
      while (true)
      {
        int num2;
        Button button2;
        switch (num1)
        {
          case 0:
          case 6:
label_20:
            uf = this.\u0023hh;
            rf = obj1.\u0023rf;
            num2 = 1;
            goto label_17;
          case 1:
            \u0023\u0023.\u0023Lj(rf, uf);
            button1.Visible = true;
            button1.Focus();
            num1 = 8;
            continue;
          case 2:
          case 7:
            button2 = this.\u0023kh;
            break;
          case 3:
            if (Thread.CurrentThread.ApartmentState == ApartmentState.STA)
            {
              button2 = this.\u0023xh;
              break;
            }
            num2 = 7;
            goto label_17;
          case 4:
            goto label_13;
          case 5:
            goto label_1;
          case 8:
            goto label_5;
          case 9:
            \u0023\u0023.\u0023Lj(this.\u0023ih);
            this.\u0023jh.Enabled = true;
            this.\u0023jh.Focus();
            this.\u0023dh.Enabled = false;
            if (true)
            {
              num1 = 12;
              continue;
            }
            goto case 11;
          case 10:
            goto label_22;
          case 11:
            if (this.\u0023yh)
            {
              if (\u0023Qh.UBrNJO5ELEKdSYOCZNH())
              {
                num1 = 3;
                continue;
              }
              goto case 3;
            }
            else
              goto case 2;
          case 12:
            goto label_26;
          default:
            num2 = 0;
            goto label_17;
        }
        button1 = button2;
        switch (obj1.\u0023pf)
        {
          case \u0023yf.\u0023uf:
            if (obj1.\u0023qf)
            {
              uf = this.\u0023fh;
              num2 = 5;
              break;
            }
            goto label_23;
          case \u0023yf.\u0023vf:
            if (obj1.\u0023qf)
            {
              uf = this.\u0023gh;
              rf = obj1.\u0023rf;
              \u0023\u0023.\u0023Lj(rf, uf);
              button1.Visible = true;
              num2 = 4;
              break;
            }
            goto label_14;
          case \u0023yf.\u0023wf:
            if (obj1.\u0023qf)
            {
              this.\u0023eh.Visible = false;
              goto label_20;
            }
            else
              goto label_27;
          case \u0023yf.\u0023xf:
            this.\u0023eh.Visible = false;
            \u0023\u0023.\u0023Lj(this.\u0023hh);
            num2 = 9;
            break;
          default:
            goto label_29;
        }
label_17:
        num1 = num2;
      }
label_29:
      return;
label_13:
      button1.Focus();
      return;
label_14:
      \u0023\u0023.\u0023Lj(this.\u0023fh);
      \u0023\u0023.\u0023Li(this.\u0023gh);
      return;
label_5:
      return;
label_26:
      return;
label_22:
      \u0023\u0023.\u0023Lj(rf, uf);
      button1.Visible = true;
      button1.Focus();
      return;
label_23:
      \u0023\u0023.\u0023Li(this.\u0023fh);
      return;
label_27:
      \u0023\u0023.\u0023Lj(this.\u0023gh);
      \u0023\u0023.\u0023Li(this.\u0023hh);
      this.\u0023eh.Visible = true;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023Je([In] object obj0, [In] EventArgs obj1) => this.Close();

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Ih([In] object obj0, [In] EventArgs obj1)
    {
      int num1 = 0;
      if (!\u0023Qh.lyKkl95liOTf0U4D8Q2())
        goto label_6;
label_1:
      \u0023\u0023.\u0023Mk(this.\u0023hh);
      if (this.\u0023hf == null)
        return;
      \u0023\u0023.\u0023li(this, new ThreadStart(this.\u0023Jh));
      num1 = 6;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
            this.\u0023yh = true;
            num1 = 5;
            continue;
          case 1:
          case 5:
            this.\u0023kh.Visible = false;
            \u0023\u0023.\u0023Mk(this.\u0023fh);
            num1 = 4;
            continue;
          case 2:
          case 3:
            goto label_1;
          case 4:
            goto label_5;
          case 6:
            goto label_9;
          default:
            int num2 = 2;
            num1 = \u0023Qh.lyKkl95liOTf0U4D8Q2() ? num2 : num2;
            continue;
        }
      }
label_5:
      \u0023\u0023.\u0023Mk(this.\u0023gh);
      goto label_1;
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Jh() => \u0023\u0023.\u0023Ck(this.\u0023hf);

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Kh([In] object obj0, [In] EventArgs obj1)
    {
      if (this.\u0023hf == null)
        return;
      \u0023\u0023.\u0023li(this, new ThreadStart(this.\u0023hf.\u0023gf));
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Lh([In] object obj0, [In] EventArgs obj1)
    {
      int num1 = 5;
      while (true)
      {
        string text;
        \u0023hf hf;
        string str1;
        string str2;
        switch (num1)
        {
          case 0:
          case 5:
            if (!this.\u0023vh.Checked)
            {
              if (\u0023Qh.UBrNJO5ELEKdSYOCZNH())
              {
                num1 = 4;
                continue;
              }
              goto case 2;
            }
            else
              break;
          case 1:
          case 3:
            \u0023\u0023.\u0023di(text, hf, str1);
            str2 = "Email";
            num1 = 6;
            continue;
          case 2:
            str1 = "Email";
            text = this.\u0023th.Text;
            goto case 1;
          case 4:
            if (this.\u0023hf != null)
            {
              hf = this.\u0023hf;
              if (true)
              {
                num1 = 2;
                continue;
              }
              goto label_12;
            }
            else
              break;
          case 6:
            \u0023\u0023.\u0023Hi(this.\u0023th.Text, str2);
            break;
          case 7:
            goto label_4;
          default:
            if (!\u0023Qh.lyKkl95liOTf0U4D8Q2())
            {
              num1 = 1;
              continue;
            }
            goto case 4;
        }
        \u0023\u0023.\u0023fi(this);
        int num2 = 7;
        num1 = \u0023Qh.lyKkl95liOTf0U4D8Q2() ? num2 : num2;
      }
label_4:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Mh([In] object obj0, [In] EventArgs obj1) => this.\u0023sh.Enabled = this.\u0023th.Text.Length > 0 || this.\u0023vh.Checked;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Nh([In] object obj0, [In] EventArgs obj1)
    {
      this.\u0023th.Enabled = !this.\u0023vh.Checked;
      this.\u0023sh.Enabled = this.\u0023th.Text.Length > 0 || this.\u0023vh.Checked;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Oh([In] object obj0, [In] EventArgs obj1)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        SaveFileDialog saveFileDialog;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_6;
            case 1:
            case 5:
              saveFileDialog.DefaultExt = "saencryptedreport";
              saveFileDialog.Filter = "SmartAssembly Exception Report|*.saencryptedreport|All files|*.*";
              saveFileDialog.Title = "Save an Exception Report";
              if (\u0023Qh.UBrNJO5ELEKdSYOCZNH())
              {
                num2 = 6;
                continue;
              }
              goto label_8;
            case 2:
              goto label_2;
            case 3:
              if (!\u0023\u0023.\u0023ri(this.\u0023hf, saveFileDialog.FileName))
              {
                int num3 = (int) MessageBox.Show("Failed to save the report.", "vf", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                num2 = 7;
                continue;
              }
              goto label_12;
            case 6:
              if (saveFileDialog.ShowDialog((IWin32Window) this) == DialogResult.Cancel)
                goto label_9;
              else
                goto case 3;
            case 7:
              goto label_13;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 3;
        continue;
label_6:
        saveFileDialog = new SaveFileDialog();
        num1 = 5;
        continue;
label_12:
        int num4 = (int) MessageBox.Show(string.Format("Please send the Exception Report to {0} Support Team.", (object) "fbff"), "vf", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        this.Close();
        num1 = 2;
      }
label_9:
      return;
label_2:
      return;
label_13:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Ph([In] object obj0, [In] EventArgs obj1) => this.\u0023Oh(obj0, obj1);

    internal static bool UBrNJO5ELEKdSYOCZNH() => true;

    internal static bool lyKkl95liOTf0U4D8Q2() => false;
  }
}
