// Decompiled with JetBrains decompiler
// Type: WatsonDialog.Instance
// Assembly: SQLWTSN, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91
// MVID: B7E612C0-B21E-4017-B4A7-EBA59D4A8946
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Sality.s-1b4b3cfe8e30ba88e06785f2da286fa3cef5ee32740497f600b5bc50478fe6c6.exe

using Microsoft.SqlServer.Management.UI.Grid;
using System;
using System.Globalization;

namespace WatsonDialog
{
  internal class Instance
  {
    internal string instanceID = "";
    internal string instanceName = "";
    internal string instanceType = "";
    internal GridCheckBoxState usageChecked = (GridCheckBoxState) 1;
    internal GridCheckBoxState errorChecked = (GridCheckBoxState) 1;
    internal string errorDir = "";
    internal bool isWow;
    internal bool canWrite = true;

    internal string DisplayName
    {
      get
      {
        if (this.IsAgnostic)
          return this.instanceType;
        return string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0} ({1})", new object[2]
        {
          (object) this.instanceType,
          (object) this.instanceName
        });
      }
    }

    internal string UserGroupSuffix => this.instanceName == Constants.DEFAULT_INSTANCE_DISPLAY_NAME ? string.Format((IFormatProvider) CultureInfo.InvariantCulture, "${0}", new object[1]
    {
      (object) "MSSQLSERVER"
    }) : string.Format((IFormatProvider) CultureInfo.InvariantCulture, "${0}", new object[1]
    {
      (object) this.instanceName
    });

    internal bool IsAgnostic => this.instanceID == "<AGNOSTIC>" || this.instanceID == "<WOW_AGNOSTIC>";

    internal Instance()
    {
    }

    private string GetRegKeyString()
    {
      if (this.IsAgnostic && this.isWow)
        return "SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SQL Server\\90";
      if (this.IsAgnostic)
        return "SOFTWARE\\Microsoft\\Microsoft SQL Server\\90";
      return this.isWow ? "SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SQL Server\\" + this.instanceID + "\\CPE" : "SOFTWARE\\Microsoft\\Microsoft SQL Server\\" + this.instanceID + "\\CPE";
    }

    private bool SaveUsageData()
    {
      object obj = (object) (((object) (GridCheckBoxState) 0).Equals((object) this.usageChecked) ? 1 : 0);
      string keyNameStr = !this.IsAgnostic ? "CustomerFeedback" : "CustomerFeedback";
      return RegistryInteractor.SetRegKeyValue(Constants.BASE_REGKEY, this.GetRegKeyString(), keyNameStr, obj, Constants.USAGE_CHECKBOX_COLUMN_HEADER, this.DisplayName);
    }

    private bool SaveErrorData()
    {
      object obj = (object) (((object) (GridCheckBoxState) 0).Equals((object) this.errorChecked) ? 1 : 0);
      string keyNameStr = !this.IsAgnostic ? "EnableErrorReporting" : "EnableErrorReporting";
      return RegistryInteractor.SetRegKeyValue(Constants.BASE_REGKEY, this.GetRegKeyString(), keyNameStr, obj, Constants.ERROR_CHECKBOX_COLUMN_HEADER, this.DisplayName);
    }

    private bool SaveErrorReportsData()
    {
      object obj = this.errorDir == null ? (object) "" : (object) this.errorDir;
      string keyNameStr = !this.IsAgnostic ? "ErrorDumpDir" : "ErrorReportingDir";
      return RegistryInteractor.SetRegKeyValue(Constants.BASE_REGKEY, this.GetRegKeyString(), keyNameStr, obj, Constants.ERROR_REPORTS_COLUMN_HEADER, this.DisplayName);
    }

    internal bool SaveData()
    {
      if (!this.canWrite)
        return true;
      return this.SaveUsageData() && this.SaveErrorData() && this.SaveErrorReportsData();
    }
  }
}
