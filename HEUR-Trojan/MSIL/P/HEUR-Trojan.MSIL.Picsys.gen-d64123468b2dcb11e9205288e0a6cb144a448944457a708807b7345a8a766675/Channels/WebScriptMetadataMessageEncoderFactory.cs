// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Channels.WebScriptMetadataMessageEncoderFactory
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.IO;
using System.ServiceModel.Diagnostics;
using System.Text;
using System.Xml;

namespace System.ServiceModel.Channels
{
  internal class WebScriptMetadataMessageEncoderFactory : MessageEncoderFactory
  {
    private const string applicationJavaScriptMediaType = "application/x-javascript";
    private WebScriptMetadataMessageEncoderFactory.WebScriptMetadataMessageEncoder messageEncoder;

    public WebScriptMetadataMessageEncoderFactory(XmlDictionaryReaderQuotas quotas) => this.messageEncoder = new WebScriptMetadataMessageEncoderFactory.WebScriptMetadataMessageEncoder(quotas);

    public override MessageEncoder Encoder => (MessageEncoder) this.messageEncoder;

    public override MessageVersion MessageVersion => this.messageEncoder.MessageVersion;

    private class WebScriptMetadataMessageEncoder : MessageEncoder
    {
      private static UTF8Encoding UTF8EncodingWithoutByteOrderMark = new UTF8Encoding(false);
      private string contentType;
      private MessageEncoder innerReadMessageEncoder;
      private string mediaType;
      private XmlDictionaryReaderQuotas readerQuotas;

      public WebScriptMetadataMessageEncoder(XmlDictionaryReaderQuotas quotas)
      {
        this.readerQuotas = new XmlDictionaryReaderQuotas();
        quotas.CopyTo(this.readerQuotas);
        this.mediaType = this.contentType = "application/x-javascript";
        this.innerReadMessageEncoder = new TextMessageEncodingBindingElement(MessageVersion.None, Encoding.UTF8).CreateMessageEncoderFactory().Encoder;
      }

      public override string ContentType => this.contentType;

      public override string MediaType => this.mediaType;

      public override MessageVersion MessageVersion => MessageVersion.None;

      public override bool IsContentTypeSupported(string contentType) => this.innerReadMessageEncoder.IsContentTypeSupported(contentType);

      public override Message ReadMessage(
        ArraySegment<byte> buffer,
        BufferManager bufferManager,
        string contentType)
      {
        return this.innerReadMessageEncoder.ReadMessage(buffer, bufferManager, contentType);
      }

      public override Message ReadMessage(
        Stream stream,
        int maxSizeOfHeaders,
        string contentType)
      {
        return this.innerReadMessageEncoder.ReadMessage(stream, maxSizeOfHeaders, contentType);
      }

      public override ArraySegment<byte> WriteMessage(
        Message message,
        int maxMessageSize,
        BufferManager bufferManager,
        int messageOffset)
      {
        if (message == null)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (message)));
        if (bufferManager == null)
          throw TraceUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (bufferManager)), message);
        if (maxMessageSize < 0)
        {
          // ISSUE: reference to a compiler-generated method
          throw TraceUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (maxMessageSize), (object) maxMessageSize, SR2.GetString(SR2.ValueMustBeNonNegative)), message);
        }
        if (messageOffset < 0 || messageOffset > maxMessageSize)
        {
          // ISSUE: reference to a compiler-generated method
          throw TraceUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (messageOffset), (object) messageOffset, SR2.GetString(SR2.JsonValueMustBeInRange, (object) 0, (object) maxMessageSize)), message);
        }
        this.ThrowIfMismatchedMessageVersion(message);
        message.Properties.Encoder = (MessageEncoder) this;
        ArraySegment<byte> arraySegment = new WebScriptMetadataMessageEncoderFactory.WebScriptMetadataMessageEncoder.WebScriptMetadataBufferedMessageWriter(this).WriteMessage(message, bufferManager, messageOffset, maxMessageSize);
        if (MessageLogger.LogMessagesAtTransportLevel)
          MessageLogger.LogMessage(ref message, MessageLoggingSource.TransportSend);
        if (System.ServiceModel.Diagnostics.Application.TD.MessageWrittenByEncoderIsEnabled())
          System.ServiceModel.Diagnostics.Application.TD.MessageWrittenByEncoder(EventTraceActivityHelper.TryExtractActivity(message), arraySegment.Count, (object) this);
        return arraySegment;
      }

      public override void WriteMessage(Message message, Stream stream)
      {
        if (message == null)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (message)));
        if (stream == null)
          throw TraceUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (stream)), message);
        this.ThrowIfMismatchedMessageVersion(message);
        message.Properties.Encoder = (MessageEncoder) this;
        XmlDictionaryWriter writer = this.CreateWriter(stream);
        writer.WriteStartDocument();
        message.WriteMessage(writer);
        writer.WriteEndDocument();
        writer.Flush();
        writer.Close();
        if (!MessageLogger.LogMessagesAtTransportLevel)
          return;
        MessageLogger.LogMessage(ref message, MessageLoggingSource.TransportSend);
      }

      private XmlDictionaryWriter CreateWriter(Stream stream) => XmlDictionaryWriter.CreateDictionaryWriter(XmlWriter.Create(stream, new XmlWriterSettings()
      {
        OmitXmlDeclaration = true,
        Encoding = (Encoding) WebScriptMetadataMessageEncoderFactory.WebScriptMetadataMessageEncoder.UTF8EncodingWithoutByteOrderMark
      }));

      private class WebScriptMetadataBufferedMessageWriter : BufferedMessageWriter
      {
        private WebScriptMetadataMessageEncoderFactory.WebScriptMetadataMessageEncoder messageEncoder;

        public WebScriptMetadataBufferedMessageWriter(
          WebScriptMetadataMessageEncoderFactory.WebScriptMetadataMessageEncoder messageEncoder)
        {
          this.messageEncoder = messageEncoder;
        }

        protected override void OnWriteEndMessage(XmlDictionaryWriter writer)
        {
        }

        protected override void OnWriteStartMessage(XmlDictionaryWriter writer)
        {
        }

        protected override void ReturnXmlWriter(XmlDictionaryWriter writer) => writer.Close();

        protected override XmlDictionaryWriter TakeXmlWriter(Stream stream) => this.messageEncoder.CreateWriter(stream);
      }
    }
  }
}
