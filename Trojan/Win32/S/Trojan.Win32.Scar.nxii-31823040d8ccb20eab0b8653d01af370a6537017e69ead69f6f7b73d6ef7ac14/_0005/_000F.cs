// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BitGenerator, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=70e4c26ef2031892
// MVID: D3922F89-E00A-4D10-8BC9-9309D5539F14
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.nxii-31823040d8ccb20eab0b8653d01af370a6537017e69ead69f6f7b73d6ef7ac14.exe

using \u0005;
using \u0010;
using \u0011;
using \u0015;
using Newtonsoft.Json.Converters;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Xml;

namespace \u0005
{
  internal sealed class \u000F : \u000F, IXmlNode, \u000E
  {
    private readonly XmlDocument \u0001;
    [NonSerialized]
    internal static GetString \u0006;

    public \u000F([In] XmlDocument obj0)
      : base((XmlNode) obj0)
    {
      this.\u0001 = obj0;
    }

    public IXmlNode \u0001([In] string obj0) => (IXmlNode) new \u000F((XmlNode) \u0094\u0005.\u007E\u0090\u000E((object) this.\u0001, obj0));

    public IXmlNode \u0002([In] string obj0) => (IXmlNode) new \u000F((XmlNode) \u0095\u0005.\u007E\u0091\u000E((object) this.\u0001, obj0));

    public IXmlNode \u0003([In] string obj0) => (IXmlNode) new \u000F((XmlNode) \u0096\u0005.\u007E\u0092\u000E((object) this.\u0001, obj0));

    public IXmlNode \u0004([In] string obj0) => (IXmlNode) new \u000F((XmlNode) \u0097\u0005.\u007E\u0093\u000E((object) this.\u0001, obj0));

    public IXmlNode \u0005([In] string obj0) => (IXmlNode) new \u000F((XmlNode) \u0098\u0005.\u007E\u0094\u000E((object) this.\u0001, obj0));

    public IXmlNode \u0001([In] string obj0, [In] string obj1, [In] string obj2) => (IXmlNode) new \u0017(\u0099\u0005.\u007E\u0095\u000E((object) this.\u0001, obj0, obj1, obj2));

    public IXmlNode \u0001([In] string obj0, [In] string obj1, [In] string obj2, [In] string obj3) => (IXmlNode) new \u0002.\u0005(\u009A\u0005.\u007E\u0096\u000E((object) this.\u0001, obj0, obj1, obj2, (string) null));

    public IXmlNode \u0001([In] string obj0, [In] string obj1) => (IXmlNode) new \u000F((XmlNode) \u009B\u0005.\u007E\u0097\u000E((object) this.\u0001, obj0, obj1));

    public \u0002.\u0006 \u0001([In] string obj0) => (\u0002.\u0006) new \u0006.\u0006(\u009C\u0005.\u007E\u0098\u000E((object) this.\u0001, obj0));

    public \u0002.\u0006 \u0001([In] string obj0, [In] string obj1) => (\u0002.\u0006) new \u0006.\u0006(\u009D\u0005.\u007E\u0099\u000E((object) this.\u0001, obj0, obj1));

    public IXmlNode \u0002([In] string obj0, [In] string obj1)
    {
      \u000F obj = new \u000F((XmlNode) \u009E\u0005.\u007E\u009A\u000E((object) this.\u0001, obj0));
      obj.\u0001(obj1);
      return (IXmlNode) obj;
    }

    public IXmlNode \u0002([In] string obj0, [In] string obj1, [In] string obj2)
    {
      \u000F obj = new \u000F((XmlNode) \u009F\u0005.\u007E\u009B\u000E((object) this.\u0001, obj0, obj1));
      obj.\u0001(obj2);
      return (IXmlNode) obj;
    }

    [SpecialName]
    public \u0002.\u0006 \u0001() => \u0001\u0006.\u007E\u009C\u000E((object) this.\u0001) == null ? (\u0002.\u0006) null : (\u0002.\u0006) new \u0006.\u0006(\u0001\u0006.\u007E\u009C\u000E((object) this.\u0001));

    static \u000F()
    {
      do
      {
        Strings.CreateGetStringDelegate(typeof (\u000F));
        bool flag = false;
        Assembly assembly = \u0013.\u008B\u0002();
        if (\u0014.\u0006.\u0001(\u0001.\u007E\u0002((object) assembly), true, out flag))
          goto label_7;
label_5:
        throw new SecurityException(\u000F.\u0006(2862));
label_7:
        int num = flag ? 1 : 0;
        if (true)
        {
          if (num != 0)
            num = global::\u0014.\u007E\u008C\u0002((object) \u0001.\u007E\u0003((object) assembly), \u000F.\u0006(2837)) ? 1 : 0;
          else
            goto label_5;
        }
        if (num == 0)
          goto label_5;
      }
      while (false);
    }
  }
}
