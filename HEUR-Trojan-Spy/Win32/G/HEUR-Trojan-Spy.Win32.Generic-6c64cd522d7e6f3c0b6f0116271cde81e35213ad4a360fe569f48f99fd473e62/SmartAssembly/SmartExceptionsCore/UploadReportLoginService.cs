// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.UploadReportLoginService
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using \u0023de;
using System;
using System.Net;
using System.Runtime.CompilerServices;
using System.Web.Services;
using System.Web.Services.Protocols;

namespace SmartAssembly.SmartExceptionsCore
{
  [WebServiceBinding(Name = "LoginServiceSoap", Namespace = "http://www.smartassembly.com/webservices/UploadReportLogin/")]
  internal class UploadReportLoginService : SoapHttpClientProtocol
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public UploadReportLoginService()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_2;
            case 2:
            case 3:
              goto label_6;
            case 4:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_2;
            case 5:
              goto label_7;
            default:
              goto label_5;
          }
        }
label_2:
        string sg = \u0023wg.\u0023sg;
        this.Url = \u0023wg.\u0023sg + "UploadReportLogin.asmx";
        goto label_6;
label_5:
        num1 = 3;
        continue;
label_6:
        this.Timeout = 30000;
        num1 = 5;
      }
label_7:;
    }

    [SoapDocumentMethod("http://www.smartassembly.com/webservices/UploadReportLogin/GetServerURL")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string GetServerURL(string licenseID) => (string) this.Invoke(nameof (GetServerURL), new object[1]
    {
      (object) licenseID
    })[0];

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override WebRequest GetWebRequest(Uri uri)
    {
      int num1 = 3;
      if (!UploadReportLoginService.G3r2lm5RCbkvDs5nQtL())
        goto label_4;
label_1:
      WebRequest webRequest = base.GetWebRequest(uri);
      int num2 = 0;
label_3:
      num1 = num2;
label_4:
      HttpWebRequest httpWebRequest;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            httpWebRequest = webRequest as HttpWebRequest;
            goto case 2;
          case 2:
          case 4:
            if (httpWebRequest != null)
            {
              httpWebRequest.ServicePoint.Expect100Continue = false;
              if (true)
              {
                num1 = 5;
                continue;
              }
              goto label_8;
            }
            else
              goto label_8;
          case 3:
            goto label_1;
          case 5:
            goto label_8;
          default:
            goto label_5;
        }
      }
label_5:
      num2 = 4;
      goto label_3;
label_8:
      return webRequest;
    }

    internal static bool cmCcEY52wDrh0urRyGs() => true;

    internal static bool G3r2lm5RCbkvDs5nQtL() => false;
  }
}
