// Decompiled with JetBrains decompiler
// Type: mmxAH.Deck`1
// Assembly: PermissionTokenFact, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 0E8B010F-DA1B-42FA-9C31-C1DCAF557A03
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqm-2f77bf5e4f961cc5be052ad8dc7fd08c90151230df1a0324df453d4e1d3a2056.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;

namespace mmxAH
{
  public class Deck<CardType> where CardType : Card
  {
    private List<CardType> TopZone;
    private List<CardType> cards;
    private List<CardType> BottomZone;
    private List<CardType> discard;
    private bool isShuffleDraw;
    private bool isDiscardToTheBottom;

    public Deck(bool pShuffleDraw = false, bool pDiscardToTheBottomZone = false)
    {
      this.cards = new List<CardType>();
      this.TopZone = new List<CardType>();
      this.BottomZone = new List<CardType>();
      this.discard = new List<CardType>();
      this.isShuffleDraw = pShuffleDraw;
      this.isDiscardToTheBottom = pDiscardToTheBottomZone;
    }

    public void Add(CardType c) => this.cards.Add(c);

    public void AddToTopZone(CardType c) => this.TopZone.Insert(0, c);

    public void AddToTop(CardType c) => this.cards.Insert(0, c);

    public void PutToTheBottomZone(CardType c) => this.BottomZone.Add(c);

    public void PutToTheBottom(CardType c) => this.cards.Add(c);

    public void Discard(CardType c)
    {
      if (this.isDiscardToTheBottom)
        this.BottomZone.Add(c);
      else
        this.discard.Add(c);
    }

    public void Destroy()
    {
      this.cards.Clear();
      this.TopZone.Clear();
      this.BottomZone.Clear();
      this.discard.Clear();
    }

    public virtual CardType Draw()
    {
      if (this.isShuffleDraw)
        this.Shuffle();
      CardType cardType;
      if (this.TopZone.Count != 0)
      {
        cardType = this.TopZone[0];
        this.TopZone.RemoveAt(0);
      }
      else if (this.cards.Count != 0)
      {
        cardType = this.cards[0];
        this.cards.RemoveAt(0);
      }
      else if (this.BottomZone.Count != 0)
      {
        cardType = this.BottomZone[0];
        this.BottomZone.RemoveAt(0);
      }
      else
        cardType = default (CardType);
      return cardType;
    }

    public CardType LookAtAndDiscard()
    {
      CardType cardType = this.Draw();
      this.discard.Add(cardType);
      return cardType;
    }

    public CardType DrawFromBottom()
    {
      CardType card;
      if (this.BottomZone.Count != 0)
      {
        card = this.BottomZone[this.BottomZone.Count - 1];
        this.BottomZone.RemoveAt(this.BottomZone.Count - 1);
      }
      else
      {
        card = this.cards[this.cards.Count - 1];
        this.cards.RemoveAt(this.cards.Count - 1);
      }
      return card;
    }

    public void Shuffle()
    {
      Random random = new Random(Environment.TickCount);
      for (short index1 = 0; (int) index1 < this.cards.Count; ++index1)
      {
        int index2 = (int) index1 + (int) Math.Round(random.NextDouble() * (double) (this.cards.Count - 1 - (int) index1));
        CardType card = this.cards[(int) index1];
        this.cards[(int) index1] = this.cards[index2];
        this.cards[index2] = card;
        Thread.Sleep(5);
      }
    }

    public void ReshuffleDiscard()
    {
      foreach (CardType cardType in this.discard)
        this.cards.Add(cardType);
      this.discard.Clear();
      this.Shuffle();
    }

    public string PrintAll(bool isNewLine = false)
    {
      string str1 = "==Cards(" + (this.cards.Count + this.TopZone.Count + this.BottomZone.Count).ToString() + ")==" + Environment.NewLine;
      foreach (CardType cardType in this.TopZone)
      {
        str1 += cardType.ToString();
        if (isNewLine)
          str1 += Environment.NewLine;
      }
      foreach (CardType card in this.cards)
      {
        str1 += card.ToString();
        if (isNewLine)
          str1 += Environment.NewLine;
      }
      foreach (CardType cardType in this.BottomZone)
      {
        str1 += cardType.ToString();
        if (isNewLine)
          str1 += Environment.NewLine;
      }
      if (this.discard.Count == 0)
        return str1;
      string str2 = str1 + Environment.NewLine + " ==Discard(" + this.discard.Count.ToString() + ")==" + Environment.NewLine;
      foreach (CardType cardType in this.discard)
      {
        str2 += cardType.ToString();
        if (isNewLine)
          str2 += Environment.NewLine;
      }
      return str2;
    }

    public void ToBin(BinaryWriter wr)
    {
      this.Reset();
      wr.Write(this.cards.Count);
      foreach (CardType card in this.cards)
        card.ToBin(wr);
    }

    public void Reset()
    {
      foreach (CardType cardType in this.TopZone)
        this.cards.Add(cardType);
      foreach (CardType cardType in this.BottomZone)
        this.cards.Add(cardType);
      foreach (CardType cardType in this.discard)
        this.cards.Add(cardType);
      this.Shuffle();
    }

    public void ToSave(BinaryWriter wr)
    {
      wr.Write(this.TopZone.Count);
      foreach (CardType cardType in this.TopZone)
        wr.Write(cardType.GetID());
      wr.Write(this.BottomZone.Count);
      foreach (CardType cardType in this.BottomZone)
        wr.Write(cardType.GetID());
      wr.Write(this.discard.Count);
      foreach (CardType cardType in this.discard)
        wr.Write(cardType.GetID());
      wr.Write(this.cards.Count);
      foreach (CardType card in this.cards)
        wr.Write(card.GetID());
    }

    public void FromSave(BinaryReader rd)
    {
      int num1 = rd.ReadInt32();
      List<CardType> cardTypeList1 = new List<CardType>();
      for (int index = 0; index < num1; ++index)
        cardTypeList1.Add(this.GetCardById(rd.ReadInt16()));
      this.TopZone = cardTypeList1;
      int num2 = rd.ReadInt32();
      List<CardType> cardTypeList2 = new List<CardType>();
      for (int index = 0; index < num2; ++index)
        cardTypeList2.Add(this.GetCardById(rd.ReadInt16()));
      this.BottomZone = cardTypeList2;
      int num3 = rd.ReadInt32();
      List<CardType> cardTypeList3 = new List<CardType>();
      for (int index = 0; index < num3; ++index)
        cardTypeList3.Add(this.GetCardById(rd.ReadInt16()));
      this.discard = cardTypeList3;
      int num4 = rd.ReadInt32();
      List<CardType> cardTypeList4 = new List<CardType>();
      for (int index = 0; index < num4; ++index)
        cardTypeList4.Add(this.GetCardById(rd.ReadInt16()));
      this.cards = cardTypeList4;
    }

    public CardType GetCardById(short id)
    {
      if (this.TopZone.Count != 0)
      {
        int index = 0;
        if (index < this.TopZone.Count)
        {
          CardType cardById = this.TopZone[index];
          if ((int) cardById.GetID() == (int) id)
            this.TopZone.RemoveAt(index);
          return cardById;
        }
      }
      else if (this.cards.Count != 0)
      {
        for (int index = 0; index < this.cards.Count; ++index)
        {
          CardType card = this.cards[index];
          if ((int) card.GetID() == (int) id)
          {
            this.cards.RemoveAt(index);
            return card;
          }
        }
      }
      else if (this.BottomZone.Count != 0)
      {
        int index = 0;
        if (index < this.BottomZone.Count)
        {
          CardType cardById = this.BottomZone[index];
          if ((int) cardById.GetID() == (int) id)
            this.BottomZone.RemoveAt(index);
          return cardById;
        }
      }
      else if (this.discard.Count != 0)
      {
        int index = 0;
        if (index < this.discard.Count)
        {
          CardType cardById = this.discard[index];
          if ((int) cardById.GetID() == (int) id)
            this.discard.RemoveAt(index);
          return cardById;
        }
      }
      return default (CardType);
    }

    public short GetCountOfCards() => (short) (this.TopZone.Count + this.cards.Count + this.BottomZone.Count);
  }
}
