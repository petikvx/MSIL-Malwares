// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEWeekDay
// Assembly: AssertFilt, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D82097A6-A4CE-4A4A-9933-E78378BA7CC6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.SpyGate.amea-62dfbde9c630c2de686534eccbc9ef292733b1781d867bdf9a0be9db3072eac3.exe

using System;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEWeekDay : TemporalExpression
  {
    public DayOfWeek Start { get; set; }

    public DayOfWeek? End { get; set; }

    public TEWeekDay(DateTime date)
    {
      this.Start = date.DayOfWeek;
      this.End = new DayOfWeek?();
    }

    public TEWeekDay(DayOfWeek day)
    {
label_1:
      int num1 = 949432160;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 263177095)) % 4U)
        {
          case 0:
            this.Start = day;
            num1 = (int) num2 * 227738683 ^ 1334683566;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 457548838 ^ -190547595;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.End = new DayOfWeek?();
    }

    public TEWeekDay(DayOfWeek start, DayOfWeek end)
    {
label_1:
      int num1 = -699381044;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -971187339)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1646141481 ^ -1999929730;
            continue;
          case 2:
            this.Start = start;
            this.End = new DayOfWeek?(end);
            num1 = (int) num2 * -886616051 ^ 832084871;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public override bool Includes(DateTime aDate)
    {
label_1:
      int num1 = -463840429;
      bool flag1;
      while (true)
      {
        uint num2;
        DayOfWeek? end;
        bool hasValue;
        bool flag2;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1769086708)) % 16U)
        {
          case 0:
            goto label_1;
          case 1:
            end = this.End;
            num1 = (int) num2 * -589013526 ^ 1823402933;
            continue;
          case 2:
            int num5 = !hasValue ? 1377751594 : (num5 = 52755534);
            num1 = num5 ^ (int) num2 * -2100505074;
            continue;
          case 3:
            int num6 = end.Value >= this.Start ? 8256023 : (num6 = 1396680870);
            num1 = num6 ^ (int) num2 * -401320191;
            continue;
          case 4:
            num3 = aDate.DayOfWeek >= this.Start ? 1 : 0;
            goto label_21;
          case 5:
            num1 = (int) num2 * 421808696 ^ -543468253;
            continue;
          case 7:
            flag1 = flag2;
            num1 = -88519718;
            continue;
          case 8:
            int dayOfWeek1 = (int) aDate.DayOfWeek;
            end = this.End;
            int num7 = (int) end.Value;
            if (dayOfWeek1 <= num7)
            {
              num1 = (int) num2 * 1601652552 ^ -1044402664;
              continue;
            }
            num3 = 0;
            goto label_21;
          case 9:
            int dayOfWeek2 = (int) aDate.DayOfWeek;
            end = this.End;
            int num8 = (int) end.Value;
            if (dayOfWeek2 > num8)
            {
              num1 = -1643850672;
              continue;
            }
            num4 = 1;
            break;
          case 10:
            flag2 = this.Start == aDate.DayOfWeek;
            num1 = -857513925;
            continue;
          case 11:
            num1 = (int) num2 * 2012308522 ^ -1715553649;
            continue;
          case 12:
            num4 = aDate.DayOfWeek >= this.Start ? 1 : 0;
            break;
          case 13:
            num1 = -1924602679;
            continue;
          case 14:
            num1 = (int) num2 * -2058584624 ^ 1852101821;
            continue;
          case 15:
            end = this.End;
            hasValue = end.HasValue;
            num1 = (int) num2 * -1609839736 ^ -313513578;
            continue;
          default:
            goto label_23;
        }
        flag2 = num4 != 0;
        num1 = -1210700351;
        continue;
label_21:
        flag2 = num3 != 0;
        num1 = -573251385;
      }
label_23:
      return flag1;
    }
  }
}
