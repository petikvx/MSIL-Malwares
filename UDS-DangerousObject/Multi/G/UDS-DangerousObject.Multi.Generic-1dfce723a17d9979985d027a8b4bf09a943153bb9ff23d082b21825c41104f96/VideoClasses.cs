// Decompiled with JetBrains decompiler
// Type: eg2012.VideoClasses
// Assembly: SinkStack, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A02AD0B4-EB98-42A4-95E2-E2AB11E6E27B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\UDS-DangerousObject.Multi.Generic-1dfce723a17d9979985d027a8b4bf09a943153bb9ff23d082b21825c41104f96.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace eg2012
{
  [StandardModule]
  internal sealed class VideoClasses
  {
    internal class VideoSequence
    {
      private bool Render;
      private double _Width;
      private double _Height;
      internal static string DirRes = "E:\\Eetrigraafika\\bug\\_res\\";
      private DirectoryInfo dInfo;

      internal string DirHome { get; set; }

      internal string Dir43 { get; set; }

      internal string Dir169 { get; set; }

      internal string DirExmpl { get; set; }

      internal string DirHD { get; set; }

      internal List<VideoClasses.IndexedFile> Files { get; set; }

      internal bool Only169 { get; set; }

      internal static string FnBack { get; set; }

      internal VideoSequence(string src, bool example, bool via, bool hd)
      {
        this.DirExmpl = string.Empty;
        this.DirHD = string.Empty;
        if (!src.EndsWith("\\"))
          src += "\\";
        this.DirHome = src;
        this.dInfo = new DirectoryInfo(this.DirHome);
        this.Dir43 = src + "43\\";
        this.Dir169 = src + "169\\";
        this.Cleanup();
        if (via)
        {
          Directory.CreateDirectory(this.Dir43);
          Directory.CreateDirectory(this.Dir169);
        }
        this.Render = via;
        if (example)
        {
          this.DirExmpl = string.Format("{0}temp\\{1:yyMMddHHmmss}\\", (object) VideoClasses.VideoSequence.DirRes, (object) DateAndTime.Now);
          Directory.CreateDirectory(this.DirExmpl);
        }
        if (hd)
        {
          this.DirHD = src + "hd\\";
          Directory.CreateDirectory(this.DirHD);
        }
        List<string> stringList1 = new List<string>();
        List<string> stringList2 = new List<string>()
        {
          ".png",
          ".tga",
          ".tif",
          ".tiff"
        };
        FileInfo[] files = this.dInfo.GetFiles();
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          if (stringList2.Contains(fileInfo.Extension.ToLower()))
            stringList1.Add(fileInfo.Name);
          checked { ++index; }
        }
        stringList1.Sort();
        // ISSUE: reference to a compiler-generated field
        this._Files = new List<VideoClasses.IndexedFile>();
        try
        {
          foreach (string fn in stringList1)
          {
            int i;
            // ISSUE: reference to a compiler-generated field
            this._Files.Add(new VideoClasses.IndexedFile(i, fn));
            checked { ++i; }
          }
        }
        finally
        {
          List<string>.Enumerator enumerator;
          enumerator.Dispose();
        }
        this.GetSize();
      }

      private void GetSize()
      {
        // ISSUE: reference to a compiler-generated field
        if (this._Files.Count == 0)
          return;
        object obj = RuntimeHelpers.GetObjectValue(new object());
        obj = (object) null;
      }

      internal double Width => this._Width;

      internal double Height => this._Height;

      internal string Name => this.dInfo.Name;

      internal int Duration => checked (this._Files.Count + 2);

      internal void Proccess(string id)
      {
        VideoClasses.FrameProcessor frameProcessor = VideoClasses.FrameProcessor.Create(this, id);
        try
        {
          // ISSUE: reference to a compiler-generated field
          Parallel.ForEach<VideoClasses.IndexedFile>((IEnumerable<VideoClasses.IndexedFile>) this._Files, new Action<VideoClasses.IndexedFile>(frameProcessor.proccess));
          List<Task> taskList = new List<Task>();
          Action<object> action = new Action<object>(this.MakeVia);
          if (this.Render)
          {
            if (this.Only169)
            {
              string fn = channelClasses.ActiveChannel.dirResBug + this.dInfo.Name + ".via";
              taskList.Add(Task.Factory.StartNew(action, (object) new VideoClasses.ViaOptions(fn, this.Dir169)));
              if (Directory.Exists(this.Dir43))
                Directory.Delete(this.Dir43, true);
              string path = channelClasses.ActiveChannel.dirResBug + this.dInfo.Name + "_w.via";
              if (File.Exists(path))
                File.Delete(path);
            }
            else
            {
              string fn1 = channelClasses.ActiveChannel.dirResBug + this.dInfo.Name + ".via";
              taskList.Add(Task.Factory.StartNew(action, (object) new VideoClasses.ViaOptions(fn1, this.Dir43)));
              string fn2 = channelClasses.ActiveChannel.dirResBug + this.dInfo.Name + "_w.via";
              taskList.Add(Task.Factory.StartNew(action, (object) new VideoClasses.ViaOptions(fn2, this.Dir169)));
            }
          }
          if (this.DirExmpl.Length > 0)
            taskList.Add(Task.Factory.StartNew(new Action(this.MakeVideo)));
          Task.WaitAll(taskList.ToArray());
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      internal void Proccess(int Mode)
      {
        int num;
        string id;
        switch (Mode)
        {
          case 1:
            num = 162;
            id = "1024_left_cut_0,0,720,162";
            break;
          case 2:
            num = 200;
            id = "1024_right_cut_0,0,720,200";
            break;
          case 110:
            num = 120;
            id = "mask_right_cut_0,0,720,120";
            break;
          case 111:
            num = 120;
            id = "1024_right_cut_0,0,720,120";
            break;
          default:
            id = "hd_resize";
            break;
        }
        VideoClasses.FrameProcessor frameProcessor = VideoClasses.FrameProcessor.Create(this, id);
        try
        {
          // ISSUE: reference to a compiler-generated field
          Parallel.ForEach<VideoClasses.IndexedFile>((IEnumerable<VideoClasses.IndexedFile>) this._Files, new Action<VideoClasses.IndexedFile>(frameProcessor.proccess));
          List<Task> taskList = new List<Task>();
          Action<object> action = new Action<object>(this.MakeVia);
          if (this.Render)
          {
            taskList.Add(Task.Factory.StartNew(action, (object) new VideoClasses.ViaOptions(this.dInfo.Parent.FullName + "\\" + this.dInfo.Name + ".via", this.Dir43)
            {
              ThumbFiles = true,
              Height = num,
              ClearBegEnd = false
            }));
            taskList.Add(Task.Factory.StartNew(action, (object) new VideoClasses.ViaOptions(this.dInfo.Parent.FullName + "\\" + this.dInfo.Name + "_w.via", this.Dir169)
            {
              Height = num,
              ThumbFiles = true,
              ClearBegEnd = false
            }));
          }
          if (this.DirExmpl.Length > 0)
            taskList.Add(Task.Factory.StartNew(new Action(this.MakeVideo)));
          if (this.DirHD.Length > 0)
            taskList.Add(Task.Factory.StartNew(new Action(this.MakeHdVideo)));
          Task.WaitAll(taskList.ToArray());
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      private void MakeVideo()
      {
        try
        {
          // ISSUE: reference to a compiler-generated field
          int count = this._Files.Count;
          // ISSUE: reference to a compiler-generated field
          int num1 = checked (this._Files.Count + 8);
          int num2 = count;
          while (num2 <= num1)
          {
            // ISSUE: reference to a compiler-generated field
            string destFileName = string.Format("{0}frame{1:0000}.png", (object) this._DirExmpl, (object) num2);
            try
            {
              File.Copy(VideoClasses.VideoSequence.FnBack, destFileName, false);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            checked { ++num2; }
          }
          new VideoClasses.VideoFile(this.DirExmpl, new DirectoryInfo(this.DirHome).Name, string.Empty).encode();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
        try
        {
          if (Directory.Exists(this.DirExmpl))
            Directory.Delete(this.DirExmpl, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      private void MakeHdVideo()
      {
        try
        {
          new VideoClasses.VideoFile(this.DirHD, new DirectoryInfo(this.DirHome).Name, "png").encode();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
        try
        {
          if (Directory.Exists(this.DirHD))
            Directory.Delete(this.DirHD, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      private void MakeVia(object viaobj)
      {
        VideoClasses.ViaOptions viaOptions = (VideoClasses.ViaOptions) viaobj;
        object objectValue = RuntimeHelpers.GetObjectValue(new object());
        RuntimeHelpers.GetObjectValue(new object());
        try
        {
          object obj = objectValue;
          if (!viaOptions.ClearBegEnd)
            ;
          try
          {
            // ISSUE: reference to a compiler-generated field
            foreach (VideoClasses.IndexedFile file in this._Files)
              ;
          }
          finally
          {
            List<VideoClasses.IndexedFile>.Enumerator enumerator;
            enumerator.Dispose();
          }
          if (!viaOptions.ClearBegEnd)
            ;
          try
          {
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          obj = (object) null;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
        try
        {
          if (Directory.Exists(viaOptions.source))
            Directory.Delete(viaOptions.source, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      internal void Cleanup()
      {
        try
        {
          if (Directory.Exists(this.Dir43))
            Directory.Delete(this.Dir43, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          if (Directory.Exists(this.Dir169))
            Directory.Delete(this.Dir169, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          if (Directory.Exists(this.DirExmpl))
            Directory.Delete(this.DirExmpl, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          if (!Directory.Exists(this.DirHD))
            return;
          Directory.Delete(this.DirHD, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    internal class SKsequence
    {
      private static List<string> exts = new List<string>()
      {
        ".png",
        ".tga"
      };
      private DirectoryInfo _dir;

      internal SKsequence(string dir) => this._dir = new DirectoryInfo(dir);

      internal void Process()
      {
        List<Task> taskList = new List<Task>();
        Action<object> action = new Action<object>(this.MakeVia);
        if (new DirectoryInfo(this._dir.FullName + "\\1").Exists)
        {
          DirectoryInfo[] directories = this._dir.GetDirectories();
          int index = 0;
          while (index < directories.Length)
          {
            DirectoryInfo d = directories[index];
            List<string> stringList = new List<string>();
            this.GetDirFiles(d, stringList);
            stringList.Add(this._dir.Parent.FullName + "\\11-1415-" + this._dir.Name.ToLower() + "-" + d.Name + ".via");
            taskList.Add(Task.Factory.StartNew(action, (object) stringList));
            checked { ++index; }
          }
        }
        else
        {
          List<string> stringList1 = new List<string>();
          List<string> stringList2 = new List<string>();
          this.GetDirFiles(this._dir, stringList1);
          DirectoryInfo d = new DirectoryInfo(this._dir.FullName + "\\loop");
          if (!d.Exists)
          {
            FileInfo fileInfo = new FileInfo(stringList1.Last<string>());
            int num = 0;
            do
            {
              stringList2.Add(stringList1.Last<string>());
              checked { ++num; }
            }
            while (num <= 149);
          }
          else
            this.GetDirFiles(d, stringList2);
          stringList1.Add(this._dir.Parent.FullName + "\\2-1415-" + this._dir.Name.ToLower() + ".via");
          stringList2.Add(this._dir.Parent.FullName + "\\2-1415-" + this._dir.Name.ToLower() + "-loop.via");
          taskList.Add(Task.Factory.StartNew(action, (object) stringList1));
          taskList.Add(Task.Factory.StartNew(action, (object) stringList2));
        }
        Task.WaitAll(taskList.ToArray());
      }

      private void GetDirFiles(DirectoryInfo d, List<string> l)
      {
        FileInfo[] files = d.GetFiles();
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          if (VideoClasses.SKsequence.exts.Contains(fileInfo.Extension.ToLower()))
            l.Add(fileInfo.FullName);
          checked { ++index; }
        }
        l.Sort();
      }

      private void MakeVia(object f)
      {
        List<string> stringList = (List<string>) f;
        object objectValue = RuntimeHelpers.GetObjectValue(new object());
        RuntimeHelpers.GetObjectValue(new object());
        try
        {
          object obj = objectValue;
          try
          {
            foreach (string str in stringList)
              ;
          }
          finally
          {
            List<string>.Enumerator enumerator;
            enumerator.Dispose();
          }
          obj = (object) null;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      private void MergeBackground(List<string> l)
      {
        try
        {
          foreach (string str in l)
          {
            FileInfo fileInfo = new FileInfo(str);
            Bitmap bitmap1 = new Bitmap(str);
            Bitmap bitmap2 = new Bitmap("E:\\_home_\\Saated\\eetrigraafika\\Kanal 2\\sk1415\\gears-back.png");
            Graphics graphics = Graphics.FromImage((Image) bitmap2);
            graphics.DrawImageUnscaled((Image) bitmap1, 0, 0);
            bitmap2.Save("E:\\_home_\\Saated\\eetrigraafika\\Kanal 2\\sk1415\\gears\\" + fileInfo.Name);
            graphics.Dispose();
            bitmap1.Dispose();
            bitmap2.Dispose();
          }
        }
        finally
        {
          List<string>.Enumerator enumerator;
          enumerator.Dispose();
        }
      }
    }

    internal class LabelSequence
    {
      private static List<string> exts = new List<string>()
      {
        ".png",
        ".tga"
      };
      private string dirVia;
      private int W;

      internal string Dir { get; set; }

      internal string Dir43 { get; set; }

      internal string Dir169 { get; set; }

      internal List<VideoClasses.IndexedFile> Files { get; set; }

      internal LabelSequence(string src)
      {
        DirectoryInfo directoryInfo = new DirectoryInfo(src);
        if (!src.EndsWith("\\"))
          src += "\\";
        this.dirVia = src + "label\\";
        // ISSUE: reference to a compiler-generated field
        this._Dir = src;
        // ISSUE: reference to a compiler-generated field
        this._Dir43 = this.dirVia + "43\\";
        // ISSUE: reference to a compiler-generated field
        this._Dir169 = this.dirVia + "169\\";
        // ISSUE: variable of a reference type
        string& local;
        // ISSUE: explicit reference operation
        string str = ^(local = ref this.dirVia) + directoryInfo.Name;
        local = str;
        // ISSUE: reference to a compiler-generated field
        if (!Directory.Exists(this._Dir43))
        {
          // ISSUE: reference to a compiler-generated field
          Directory.CreateDirectory(this._Dir43);
        }
        // ISSUE: reference to a compiler-generated field
        if (!Directory.Exists(this._Dir169))
        {
          // ISSUE: reference to a compiler-generated field
          Directory.CreateDirectory(this._Dir169);
        }
        this.W = this.MaxAlpha(((IEnumerable<FileInfo>) directoryInfo.GetFiles()).Last<FileInfo>());
        List<string> stringList = new List<string>();
        FileInfo[] files = directoryInfo.GetFiles();
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          if (VideoClasses.LabelSequence.exts.Contains(fileInfo.Extension.ToLower()))
            stringList.Add(fileInfo.Name);
          checked { ++index; }
        }
        stringList.Sort();
        // ISSUE: reference to a compiler-generated field
        this._Files = new List<VideoClasses.IndexedFile>();
        try
        {
          foreach (string fn in stringList)
          {
            int i;
            // ISSUE: reference to a compiler-generated field
            this._Files.Add(new VideoClasses.IndexedFile(i, fn));
            checked { ++i; }
          }
        }
        finally
        {
          List<string>.Enumerator enumerator;
          enumerator.Dispose();
        }
      }

      internal void Proccess()
      {
        VideoClasses.FrameProcessor frameProcessor = (VideoClasses.FrameProcessor) new VideoClasses.LabelProcessor1415(this, this.W);
        try
        {
          // ISSUE: reference to a compiler-generated field
          Parallel.ForEach<VideoClasses.IndexedFile>((IEnumerable<VideoClasses.IndexedFile>) this._Files, new Action<VideoClasses.IndexedFile>(frameProcessor.proccess));
          List<Task> taskList = new List<Task>();
          Action<object> action = new Action<object>(this.MakeVia);
          string fn1 = this.dirVia + ".via";
          taskList.Add(Task.Factory.StartNew(action, (object) new VideoClasses.ViaOptions(fn1, this.Dir43)));
          string fn2 = this.dirVia + "_w.via";
          taskList.Add(Task.Factory.StartNew(action, (object) new VideoClasses.ViaOptions(fn2, this.Dir169)));
          Task.WaitAll(taskList.ToArray());
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      private void MakeVia(object viaobj)
      {
        VideoClasses.ViaOptions viaOptions = (VideoClasses.ViaOptions) viaobj;
        object objectValue = RuntimeHelpers.GetObjectValue(new object());
        RuntimeHelpers.GetObjectValue(new object());
        try
        {
          object obj = objectValue;
          int num = 0;
          do
          {
            checked { ++num; }
          }
          while (num <= 2499);
          try
          {
            // ISSUE: reference to a compiler-generated field
            foreach (VideoClasses.IndexedFile file in this._Files)
              ;
          }
          finally
          {
            List<VideoClasses.IndexedFile>.Enumerator enumerator;
            enumerator.Dispose();
          }
          try
          {
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          obj = (object) null;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
        try
        {
          FileInfo fileInfo = new FileInfo(viaOptions.name);
          fileInfo.CopyTo("E:\\Eetrigraafika\\Kanal2\\info1415\\" + fileInfo.Name, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      private int MaxAlpha(FileInfo fi)
      {
        Bitmap bitmap = new Bitmap(fi.FullName);
        int y = checked ((int) Math.Round(unchecked ((double) bitmap.Height / 2.0)));
        int x = checked (bitmap.Width - 1);
        while (x >= 1)
        {
          if (bitmap.GetPixel(x, y).A > (byte) 0)
            return Math.Min(bitmap.Width, checked (x + 4));
          checked { x += -1; }
        }
        return 0;
      }
    }

    internal abstract class FrameProcessor
    {
      protected static Size sizePal = new Size(720, 576);
      protected static Size size43 = new Size(768, 576);
      protected static Size size169 = new Size(1024, 576);
      protected static Size sizeHD = new Size(1920, 1080);

      internal FrameProcessor(string init)
      {
      }

      internal static VideoClasses.FrameProcessor Create(
        VideoClasses.VideoSequence video,
        string id)
      {
        string[] strArray = id.Split('_');
        string Left = strArray[0];
        VideoClasses.FrameProcessor frameProcessor;
        if (Operators.CompareString(Left, "hd", false) != 0)
        {
          if (Operators.CompareString(Left, "720", false) != 0)
          {
            if (Operators.CompareString(Left, "1024", false) != 0)
            {
              if (Operators.CompareString(Left, "mask", false) != 0)
              {
                frameProcessor = Operators.CompareString(Left, "draw", false) == 0 ? (VideoClasses.FrameProcessor) new VideoClasses.FrameProcessor_Draw(strArray) : (!id.StartsWith("w") ? (VideoClasses.FrameProcessor) new VideoClasses.FrameProcessor_240_43(id) : (VideoClasses.FrameProcessor) new VideoClasses.FrameProcessor_240_169(id));
              }
              else
              {
                string maskfn = new DirectoryInfo(video.DirHome).Parent.FullName + "\\maskdiff.png";
                frameProcessor = (VideoClasses.FrameProcessor) new VideoClasses.FrameProcessor_mask_169_cut(strArray[1], strArray[3], maskfn);
              }
            }
            else
              frameProcessor = ((IEnumerable<string>) strArray).Count<string>() >= 3 ? (Operators.CompareString(strArray[2], "cut", false) == 0 ? (VideoClasses.FrameProcessor) new VideoClasses.FrameProcessor_1024_169_cut(strArray[1], strArray[3]) : (VideoClasses.FrameProcessor) new VideoClasses.FrameProcessor_1024_169(strArray[1])) : (VideoClasses.FrameProcessor) new VideoClasses.FrameProcessor_1024_169(strArray[1]);
          }
          else
            frameProcessor = Operators.CompareString(strArray[1], "43", false) == 0 ? (VideoClasses.FrameProcessor) new VideoClasses.FrameProcessor_720_43(strArray[2]) : (VideoClasses.FrameProcessor) new VideoClasses.FrameProcessor_720_169(strArray[2]);
        }
        else
          frameProcessor = (VideoClasses.FrameProcessor) new VideoClasses.FrameProcessor_HD(strArray[1]);
        frameProcessor.Parent = video;
        return frameProcessor;
      }

      protected VideoClasses.VideoSequence Parent { get; set; }

      internal abstract void proccess(VideoClasses.IndexedFile ifn);

      internal void Example(Bitmap b, int index)
      {
        if (this.Parent.DirExmpl.Length == 0)
          return;
        string filename = string.Format("{0}frame{1:0000}.png", (object) this.Parent.DirExmpl, (object) index);
        Bitmap bitmap = new Bitmap(VideoClasses.VideoSequence.FnBack);
        Graphics graphics = Graphics.FromImage((Image) bitmap);
        graphics.DrawImageUnscaled((Image) b, 0, 0);
        bitmap.Save(filename);
        graphics.Dispose();
        bitmap.Dispose();
      }

      protected Bitmap Resize(Bitmap b, Size s)
      {
        Bitmap bitmap = new Bitmap((Image) b, s);
        b.Dispose();
        return bitmap;
      }

      protected Bitmap GetBitmap(VideoClasses.IndexedFile ifn)
      {
        FileInfo fileInfo = new FileInfo(this.Parent.DirHome + ifn.Name);
        try
        {
          return new Bitmap(fileInfo.FullName);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        if (Operators.CompareString(fileInfo.Extension.ToLower(), ".png", false) != 0)
        {
          try
          {
            object obj = RuntimeHelpers.GetObjectValue(new object());
            ifn.Name = fileInfo.Name.Replace(fileInfo.Extension, ".png");
            obj = (object) null;
            fileInfo.Delete();
            return new Bitmap(this.Parent.DirHome + ifn.Name);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        return new Bitmap(1, 1);
      }
    }

    internal abstract class FrameProcessor_sideswitch : VideoClasses.FrameProcessor
    {
      protected Rectangle rectCut;

      internal FrameProcessor_sideswitch(string init)
        : base(init)
      {
        if (Operators.CompareString(init, "right", false) == 0)
          this.rectCut = new Rectangle(256, 0, 768, 576);
        else if (init.StartsWith("c"))
          this.rectCut = new Rectangle(128, 0, 768, 576);
        else if (char.IsDigit(init.First<char>()))
        {
          double result;
          if (double.TryParse(init, out result))
          {
            if (result > 0.999)
              result /= 100.0;
          }
          else
            result = 0.0;
          this.rectCut = new Rectangle(checked ((int) Math.Round(unchecked (256.0 * result))), 0, 768, 576);
        }
        else
          this.rectCut = new Rectangle(0, 0, 768, 576);
      }
    }

    internal class FrameProcessor_720_43 : VideoClasses.FrameProcessor_sideswitch
    {
      internal FrameProcessor_720_43(string init)
        : base(init)
      {
      }

      internal override void proccess(VideoClasses.IndexedFile ifn)
      {
        Bitmap bitmap1 = this.GetBitmap(ifn);
        File.Copy(this.Parent.DirHome + ifn.Name, this.Parent.Dir43 + ifn.Name);
        bitmap1.SetResolution(96f, 96f);
        Bitmap bitmap2 = this.Resize(bitmap1, VideoClasses.FrameProcessor.size43);
        Bitmap b1 = new Bitmap(VideoClasses.FrameProcessor.size169.Width, VideoClasses.FrameProcessor.size169.Height);
        b1.SetResolution(96f, 96f);
        Graphics graphics = Graphics.FromImage((Image) b1);
        graphics.DrawImageUnscaled((Image) bitmap2, this.rectCut.Location);
        graphics.Dispose();
        bitmap2.Dispose();
        Bitmap b2 = this.Resize(b1, VideoClasses.FrameProcessor.sizePal);
        this.Example(b2, ifn.Index);
        b2.Save(this.Parent.Dir169 + ifn.Name);
        b2.Dispose();
      }
    }

    internal class FrameProcessor_720_169 : VideoClasses.FrameProcessor_sideswitch
    {
      internal FrameProcessor_720_169(string init)
        : base(init)
      {
      }

      internal override void proccess(VideoClasses.IndexedFile ifn)
      {
        Bitmap bitmap1 = this.GetBitmap(ifn);
        File.Copy(this.Parent.DirHome + ifn.Name, this.Parent.Dir169 + ifn.Name);
        bitmap1.SetResolution(96f, 96f);
        this.Example(bitmap1, ifn.Index);
        Bitmap bitmap2 = this.Resize(bitmap1, VideoClasses.FrameProcessor.size169);
        Bitmap bitmap3 = this.Resize(bitmap2.Clone(this.rectCut, PixelFormat.Format32bppArgb), VideoClasses.FrameProcessor.sizePal);
        bitmap3.Save(this.Parent.Dir43 + ifn.Name);
        bitmap3.Dispose();
        bitmap2.Dispose();
      }
    }

    internal class FrameProcessor_HD : VideoClasses.FrameProcessor_sideswitch
    {
      internal FrameProcessor_HD(string init)
        : base(init)
      {
      }

      internal override void proccess(VideoClasses.IndexedFile ifn)
      {
        Bitmap bitmap = this.GetBitmap(ifn);
        bitmap.SetResolution(96f, 96f);
        if (bitmap.Width != VideoClasses.FrameProcessor.sizeHD.Width || bitmap.Height != VideoClasses.FrameProcessor.sizeHD.Height)
          bitmap = this.Resize(bitmap, VideoClasses.FrameProcessor.sizeHD);
        TargaFile.SaveAsTarga(this.Parent.DirHD + ifn.Name.ToLower().Replace(".png", ".tga"), bitmap);
        bitmap.Dispose();
      }
    }

    internal class FrameProcessor_1024_169 : VideoClasses.FrameProcessor_sideswitch
    {
      internal FrameProcessor_1024_169(string init)
        : base(init)
      {
      }

      internal override void proccess(VideoClasses.IndexedFile ifn)
      {
        Bitmap b1 = this.GetBitmap(ifn);
        b1.SetResolution(96f, 96f);
        if (b1.Width > 1024 || b1.Height != 576)
          b1 = this.Resize(b1, VideoClasses.FrameProcessor.size169);
        Bitmap bitmap = this.Resize(b1.Clone(this.rectCut, PixelFormat.Format32bppArgb), VideoClasses.FrameProcessor.sizePal);
        bitmap.Save(this.Parent.Dir43 + ifn.Name);
        bitmap.Dispose();
        Bitmap b2 = this.Resize(b1, VideoClasses.FrameProcessor.sizePal);
        this.Example(b2, ifn.Index);
        b2.Save(this.Parent.Dir169 + ifn.Name);
        b2.Dispose();
      }
    }

    internal class FrameProcessor_1024_169_cut : VideoClasses.FrameProcessor_sideswitch
    {
      private Rectangle finalCut;

      internal FrameProcessor_1024_169_cut(string side, string cut)
        : base(side)
      {
        try
        {
          string[] strArray = cut.Split(',');
          this.finalCut = new Rectangle(Conversions.ToInteger(strArray[0]), Conversions.ToInteger(strArray[1]), Conversions.ToInteger(strArray[2]), Conversions.ToInteger(strArray[3]));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          this.finalCut = new Rectangle(0, 0, 720, 576);
          ProjectData.ClearProjectError();
        }
      }

      internal override void proccess(VideoClasses.IndexedFile ifn)
      {
        Bitmap b1 = this.GetBitmap(ifn);
        b1.SetResolution(96f, 96f);
        if (b1.Width > 1024 || b1.Height != 576)
          b1 = this.Resize(b1, VideoClasses.FrameProcessor.size169);
        Bitmap bitmap1 = this.Resize(b1.Clone(this.rectCut, PixelFormat.Format32bppArgb), VideoClasses.FrameProcessor.sizePal);
        Bitmap bitmap2 = bitmap1.Clone(this.finalCut, PixelFormat.Format32bppArgb);
        bitmap2.Save(this.Parent.Dir43 + ifn.Name);
        bitmap1.Dispose();
        bitmap2.Dispose();
        Bitmap b2 = this.Resize(b1, VideoClasses.FrameProcessor.sizePal);
        this.Example(b2, ifn.Index);
        Bitmap bitmap3 = b2.Clone(this.finalCut, PixelFormat.Format32bppArgb);
        bitmap3.Save(this.Parent.Dir169 + ifn.Name);
        b2.Dispose();
        bitmap3.Dispose();
      }
    }

    internal class FrameProcessor_mask_169_cut : VideoClasses.FrameProcessor_sideswitch
    {
      private Rectangle finalCut;
      private string mFn;

      internal FrameProcessor_mask_169_cut(string side, string cut, string maskfn)
        : base(side)
      {
        try
        {
          string[] strArray = cut.Split(',');
          this.finalCut = new Rectangle(Conversions.ToInteger(strArray[0]), Conversions.ToInteger(strArray[1]), Conversions.ToInteger(strArray[2]), Conversions.ToInteger(strArray[3]));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          this.finalCut = new Rectangle(0, 0, 720, 576);
          ProjectData.ClearProjectError();
        }
        this.mFn = maskfn;
      }

      internal override void proccess(VideoClasses.IndexedFile ifn)
      {
        Bitmap bitmap1 = this.GetBitmap(ifn);
        bitmap1.SetResolution(96f, 96f);
        if (bitmap1.Width > 1024 || bitmap1.Height != 576)
          bitmap1 = this.Resize(bitmap1, VideoClasses.FrameProcessor.size169);
        this.MakeMask(bitmap1);
        Bitmap bitmap2 = this.Resize(bitmap1.Clone(this.rectCut, PixelFormat.Format32bppArgb), VideoClasses.FrameProcessor.sizePal);
        Bitmap bitmap3 = bitmap2.Clone(this.finalCut, PixelFormat.Format32bppArgb);
        bitmap3.Save(this.Parent.Dir43 + ifn.Name);
        bitmap2.Dispose();
        bitmap3.Dispose();
        Bitmap b = this.Resize(bitmap1, VideoClasses.FrameProcessor.sizePal);
        this.Example(b, ifn.Index);
        Bitmap bitmap4 = b.Clone(this.finalCut, PixelFormat.Format32bppArgb);
        bitmap4.Save(this.Parent.Dir169 + ifn.Name);
        b.Dispose();
        bitmap4.Dispose();
      }

      private void MakeMask(Bitmap bframe)
      {
        Bitmap b = new Bitmap(this.mFn);
        b.SetResolution(96f, 96f);
        if (b.Width > 1024 || b.Height != 576)
          b = this.Resize(b, VideoClasses.FrameProcessor.size169);
        int num1 = checked (bframe.Width - 1);
        int x = 0;
        while (x <= num1)
        {
          int y1 = this.finalCut.Y;
          int num2 = checked (this.finalCut.Y + this.finalCut.Height - 1);
          int y2 = y1;
          while (y2 <= num2)
          {
            byte alpha = Math.Min(b.GetPixel(x, y2).R, bframe.GetPixel(x, y2).A);
            bframe.SetPixel(x, y2, Color.FromArgb((int) alpha, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue));
            checked { ++y2; }
          }
          checked { ++x; }
        }
        b.Dispose();
      }
    }

    internal class FrameProcessor_240_43 : VideoClasses.FrameProcessor
    {
      private int x43;
      private int x169;
      private int y;

      internal FrameProcessor_240_43(string init)
        : base(init)
      {
        if (init.StartsWith("xy"))
        {
          string[] source = init.Split('_');
          if (((IEnumerable<string>) source).Count<string>() != 3)
            return;
          double num = double.Parse(source[1]);
          this.x43 = checked ((int) Math.Round(unchecked (num * 16.0 / 15.0)));
          this.x169 = checked ((int) Math.Round(unchecked (num * 64.0 / 45.0)));
          this.y = int.Parse(source[2]);
        }
        else
        {
          this.x43 = 64;
          this.x169 = 85;
          this.y = 32;
        }
      }

      internal override void proccess(VideoClasses.IndexedFile ifn)
      {
        Bitmap bitmap1 = this.GetBitmap(ifn);
        bitmap1.SetResolution(96f, 96f);
        Bitmap b1 = new Bitmap(VideoClasses.FrameProcessor.size43.Width, VideoClasses.FrameProcessor.size43.Height);
        b1.SetResolution(96f, 96f);
        int x1 = this.x43 > 0 ? this.x43 : checked (b1.Width - bitmap1.Width + this.x43);
        Graphics graphics1 = Graphics.FromImage((Image) b1);
        graphics1.DrawImageUnscaled((Image) bitmap1, x1, this.y);
        graphics1.Dispose();
        Bitmap bitmap2 = this.Resize(b1, VideoClasses.FrameProcessor.sizePal);
        bitmap2.Save(this.Parent.Dir43 + ifn.Name);
        bitmap2.Dispose();
        Bitmap b2 = new Bitmap(VideoClasses.FrameProcessor.size169.Width, VideoClasses.FrameProcessor.size169.Height);
        b2.SetResolution(96f, 96f);
        int x2 = this.x169 > 0 ? this.x169 : checked (b2.Width - bitmap1.Width + this.x169);
        Graphics graphics2 = Graphics.FromImage((Image) b2);
        graphics2.DrawImageUnscaled((Image) bitmap1, x2, this.y);
        graphics2.Dispose();
        Bitmap b3 = this.Resize(b2, VideoClasses.FrameProcessor.sizePal);
        this.Example(b3, ifn.Index);
        b3.Save(this.Parent.Dir169 + ifn.Name);
        b3.Dispose();
        bitmap1.Dispose();
      }
    }

    internal class FrameProcessor_240_169 : VideoClasses.FrameProcessor
    {
      private int x43;
      private int x169;
      private int y;

      internal FrameProcessor_240_169(string init)
        : base(init)
      {
        string[] source = init.Split('_');
        if (((IEnumerable<string>) source).Count<string>() == 3)
        {
          this.x43 = checked ((int) Math.Round(double.Parse(source[1])));
          this.x169 = this.x43;
          this.y = int.Parse(source[2]);
        }
        else
        {
          this.x43 = 64;
          this.x169 = 64;
          this.y = 32;
        }
      }

      internal override void proccess(VideoClasses.IndexedFile ifn)
      {
        Bitmap bitmap1 = this.GetBitmap(ifn);
        bitmap1.SetResolution(96f, 96f);
        Bitmap b = new Bitmap(VideoClasses.FrameProcessor.sizePal.Width, VideoClasses.FrameProcessor.sizePal.Height);
        b.SetResolution(96f, 96f);
        int x1 = this.x169 > 0 ? this.x169 : checked (b.Width - bitmap1.Width + this.x169);
        Graphics graphics1 = Graphics.FromImage((Image) b);
        graphics1.DrawImageUnscaled((Image) bitmap1, x1, this.y);
        graphics1.Dispose();
        this.Example(b, ifn.Index);
        b.Save(this.Parent.Dir169 + ifn.Name);
        b.Dispose();
        Size s = new Size(checked ((int) Math.Round(unchecked ((double) bitmap1.Width / 0.75))), bitmap1.Height);
        Bitmap bitmap2 = this.Resize(bitmap1, s);
        Bitmap bitmap3 = new Bitmap(VideoClasses.FrameProcessor.sizePal.Width, VideoClasses.FrameProcessor.sizePal.Height);
        bitmap3.SetResolution(96f, 96f);
        int x2 = this.x43 > 0 ? this.x43 : checked (bitmap3.Width - bitmap2.Width + this.x43);
        Graphics graphics2 = Graphics.FromImage((Image) bitmap3);
        graphics2.DrawImageUnscaled((Image) bitmap2, x2, this.y);
        graphics2.Dispose();
        bitmap3.Save(this.Parent.Dir43 + ifn.Name);
        bitmap3.Dispose();
        bitmap2.Dispose();
      }
    }

    internal class FrameProcessor_Draw : VideoClasses.FrameProcessor
    {
      private int x43;
      private int x169;
      private int y;
      private Size sizeLogo;
      private bool rightSide;

      internal FrameProcessor_Draw(string[] xywh)
        : base(xywh[0])
      {
        double a = double.Parse(xywh[1]);
        this.x43 = checked ((int) Math.Round(a));
        this.x169 = checked ((int) Math.Round(a));
        this.y = int.Parse(xywh[2]);
        try
        {
          this.sizeLogo = new Size(int.Parse(xywh[3]), int.Parse(xywh[4]));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          this.sizeLogo = new Size(240, 160);
          ProjectData.ClearProjectError();
        }
        try
        {
          this.rightSide = xywh[5].StartsWith("r");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      internal override void proccess(VideoClasses.IndexedFile ifn)
      {
        Bitmap b1 = this.GetBitmap(ifn);
        b1.SetResolution(96f, 96f);
        if (!(b1.Size == this.sizeLogo))
          b1 = this.Resize(b1, this.sizeLogo);
        Bitmap b2 = new Bitmap(VideoClasses.FrameProcessor.size43.Width, VideoClasses.FrameProcessor.size43.Height);
        b2.SetResolution(96f, 96f);
        int x1 = this.rightSide ? checked (b2.Width - b1.Width - this.x43) : this.x43;
        Graphics graphics1 = Graphics.FromImage((Image) b2);
        graphics1.DrawImageUnscaled((Image) b1, x1, this.y);
        graphics1.Dispose();
        Bitmap bitmap = this.Resize(b2, VideoClasses.FrameProcessor.sizePal);
        bitmap.Save(this.Parent.Dir43 + ifn.Name);
        bitmap.Dispose();
        Bitmap b3 = new Bitmap(VideoClasses.FrameProcessor.size169.Width, VideoClasses.FrameProcessor.size169.Height);
        b3.SetResolution(96f, 96f);
        int x2 = this.rightSide ? checked (b3.Width - b1.Width - this.x169) : this.x169;
        Graphics graphics2 = Graphics.FromImage((Image) b3);
        graphics2.DrawImageUnscaled((Image) b1, x2, this.y);
        graphics2.Dispose();
        Bitmap b4 = this.Resize(b3, VideoClasses.FrameProcessor.sizePal);
        this.Example(b4, ifn.Index);
        b4.Save(this.Parent.Dir169 + ifn.Name);
        b4.Dispose();
        b1.Dispose();
      }
    }

    internal class LabelProcessor1415 : VideoClasses.FrameProcessor
    {
      private VideoClasses.LabelSequence label;
      private Rectangle rectCut;
      private Size s43;
      private Size s169;
      private double cf;

      internal LabelProcessor1415(VideoClasses.LabelSequence l, int w)
        : base(string.Empty)
      {
        int height = 30;
        this.label = l;
        this.rectCut = new Rectangle(0, 4, w, 32);
        this.s43 = new Size(checked ((int) Math.Round(unchecked ((double) w * (double) height / 32.0))), height);
        this.s169 = new Size(checked ((int) Math.Round(unchecked ((double) w * ((double) height / 32.0) * 0.7))), height);
        this.cf = 2.0 / 3.0;
      }

      internal override void proccess(VideoClasses.IndexedFile ifn)
      {
        Bitmap b = new Bitmap(this.label.Dir + ifn.Name);
        b.SetResolution(96f, 96f);
        this.ColorCorrection(b);
        Bitmap original = b.Clone(this.rectCut, PixelFormat.Format32bppArgb);
        original.SetResolution(96f, 96f);
        Bitmap bitmap1 = new Bitmap((Image) original, this.s43);
        bitmap1.Save(this.label.Dir43 + ifn.Name);
        bitmap1.Dispose();
        Bitmap bitmap2 = new Bitmap((Image) original, this.s169);
        bitmap2.Save(this.label.Dir169 + ifn.Name);
        bitmap2.Dispose();
        original.Dispose();
        b.Dispose();
      }

      private void ColorCorrection(Bitmap b)
      {
        int x = 0;
        do
        {
          int num = checked (b.Height - 1);
          int y = 0;
          while (y <= num)
          {
            Color color1 = b.GetPixel(x, y);
            Color color2 = Color.FromArgb((int) color1.A, checked ((int) Math.Round(unchecked (this.cf * (double) color1.R))), checked ((int) Math.Round(unchecked (this.cf * (double) color1.G))), checked ((int) Math.Round(unchecked (this.cf * (double) color1.B))));
            b.SetPixel(x, y, color2);
            color1 = new Color();
            checked { ++y; }
          }
          checked { ++x; }
        }
        while (x <= 11);
      }
    }

    internal class VideoFile
    {
      internal static string DirFmpeg = "E:\\_home_\\bin\\ffmpeg\\";
      private string _name;
      private string _dir;
      private string _CodecID;
      private string Out;
      private string Err;

      internal VideoFile(string dir, string name, string codecID)
      {
        this._name = string.Empty;
        this.Out = string.Empty;
        this.Err = string.Empty;
        this._CodecID = codecID;
        this._name = name;
        this._dir = dir;
        if (this._dir.EndsWith("\\"))
          return;
        // ISSUE: variable of a reference type
        string& local;
        // ISSUE: explicit reference operation
        string str = ^(local = ref this._dir) + "\\";
        local = str;
      }

      internal void encode()
      {
        if (!Directory.Exists(this._dir))
          return;
        string str1;
        string str2;
        if (this._name.Contains("\\"))
        {
          str1 = this._name;
          str2 = this._name.Substring(checked (this._name.LastIndexOf("\\") + 1));
        }
        else
        {
          str1 = channelClasses.ActiveChannel.dirResBug + this._name;
          str2 = this._name;
        }
        string str3 = VideoClasses.VideoSequence.DirRes + "logs\\" + str2;
        string codecId = this._CodecID;
        string path;
        string str4;
        string str5;
        if (Operators.CompareString(codecId, "png", false) != 0)
        {
          if (Operators.CompareString(codecId, "proRes", false) != 0)
          {
            if (Operators.CompareString(codecId, "proResF", false) != 0)
            {
              if (Operators.CompareString(codecId, "DNxHD", false) == 0)
              {
                path = str1 + ".mov";
                str4 = str3 + "_mov";
                str5 = string.Format("-f image2 {0} -aspect 16: 9 -r 25 -codec:v dnxhd -b:v 120M -y \"{1}\"", (object) this.GetPattern(), (object) path);
              }
              else
              {
                path = VideoClasses.VideoSequence.DirRes + "example\\" + this._name + ".mp4";
                str4 = str3 + "_mp4";
                str5 = string.Format("-f image2 {0} -codec:v libx264 -s 720x576 -aspect 16:9 -b:v 850000 -r 25 -y \"{1}\"", (object) this.GetPattern(), (object) path);
              }
            }
            else
            {
              path = str1 + ".mov";
              str4 = str3 + "_mov";
              str5 = string.Format("-f image2 {0} -aspect 16:9 -r 25 -s 1920x1080 -field_order tt -vcodec prores_ks -profile:v 4 -pix_fmt yuva444p10 -top 1 -flags +ildct+ilme -y \"{1}\"", (object) this.GetPattern(), (object) path);
            }
          }
          else
          {
            path = str1 + ".mov";
            str4 = str3 + "_mov";
            str5 = string.Format("-f image2 {0} -aspect 16:9 -r 25 -s 1920x1080 -field_order tt -vcodec prores_ks -profile:v 4 -pix_fmt yuva444p10 -y \"{1}\"", (object) this.GetPattern(), (object) path);
          }
        }
        else
        {
          path = str1 + ".mov";
          str4 = str3 + "_mov";
          str5 = string.Format("-f image2 {0} -aspect 16:9 -r 25 -s 1920x1080 -codec:v png -y \"{1}\"", (object) this.GetPattern(), (object) path);
        }
        if (File.Exists(path))
          File.Delete(path);
        Process process = new Process();
        ProcessStartInfo startInfo = process.StartInfo;
        startInfo.UseShellExecute = false;
        startInfo.RedirectStandardOutput = true;
        startInfo.RedirectStandardError = true;
        startInfo.FileName = VideoClasses.VideoFile.DirFmpeg + "bin\\ffmpeg.exe";
        startInfo.Arguments = str5;
        process.OutputDataReceived += new DataReceivedEventHandler(this.OutHandler);
        process.ErrorDataReceived += new DataReceivedEventHandler(this.ErrHandler);
        process.Start();
        process.BeginOutputReadLine();
        process.BeginErrorReadLine();
        process.WaitForExit();
        process.Dispose();
        if (!string.IsNullOrEmpty(this.Err))
        {
          TextWriter textWriter = (TextWriter) Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(str4 + ".txt", true);
          textWriter.Write(this.Err);
          textWriter.Close();
        }
      }

      private void OutHandler(object sendingProcess, DataReceivedEventArgs outLine)
      {
        if (string.IsNullOrEmpty(outLine.Data))
          return;
        // ISSUE: variable of a reference type
        string& local;
        // ISSUE: explicit reference operation
        string str = ^(local = ref this.Out) + outLine.Data + Environment.NewLine;
        local = str;
      }

      private void ErrHandler(object sendingProcess, DataReceivedEventArgs outLine)
      {
        if (string.IsNullOrEmpty(outLine.Data))
          return;
        // ISSUE: variable of a reference type
        string& local;
        // ISSUE: explicit reference operation
        string str = ^(local = ref this.Err) + outLine.Data + Environment.NewLine;
        local = str;
      }

      private string GetPattern()
      {
        FileInfo fileInfo = ((IEnumerable<FileInfo>) new DirectoryInfo(this._dir).GetFiles()).First<FileInfo>();
        string extension = fileInfo.Extension;
        string str1 = fileInfo.Name.Replace(extension, "");
        int num1 = 0;
        char[] charArray = str1.ToCharArray();
        int index = 0;
        int num2;
        while (index < charArray.Length)
        {
          char c = charArray[index];
          checked { ++num1; }
          if (!char.IsDigit(c))
            num2 = num1;
          checked { ++index; }
        }
        string str2 = this._dir + (num2 > 0 ? str1.Substring(0, num2) : string.Empty);
        string InputStr = str1.Substring(num2);
        return string.Format("-start_number {0} -i \"{1}{2}\"", (object) checked ((int) Math.Round(Conversion.Val(InputStr))), (object) (str2 + string.Format("%0{0}d", (object) InputStr.Length)), (object) extension);
      }
    }

    internal class IndexedFile
    {
      private int _index;

      internal IndexedFile(int i, string fn)
      {
        this._index = i;
        // ISSUE: reference to a compiler-generated field
        this._Name = fn;
      }

      internal string Name { get; set; }

      internal int Index => this._index;
    }

    internal class ViaOptions
    {
      private string _name;
      private string _source;

      internal ViaOptions(string fn, string dir)
      {
        this.Height = 576;
        this.Width = 720;
        this._name = fn;
        this._source = dir;
        // ISSUE: reference to a compiler-generated field
        this._ClearBegEnd = true;
      }

      internal ViaOptions(string fn, string dir, Size s)
      {
        this.Height = 576;
        this.Width = 720;
        this._name = fn;
        this._source = dir;
        // ISSUE: reference to a compiler-generated field
        this._ClearBegEnd = true;
        // ISSUE: reference to a compiler-generated field
        this._Height = s.Height;
        // ISSUE: reference to a compiler-generated field
        this._Width = s.Width;
      }

      internal string name => this._name;

      internal string source => this._source;

      internal bool ThumbFiles { get; set; }

      internal bool ClearBegEnd { get; set; }

      internal int Height { get; set; }

      internal int Width { get; set; }
    }
  }
}
