// Decompiled with JetBrains decompiler
// Type: 840130082634.145675680789
// Assembly: 942981470147, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 92EB186D-EC33-4501-B5FF-A65C9233BC32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Exploit.MSIL.Shellcode.gen-f8bb0d6e016074f6759f74d8950983793a87aec3cd6d56569fa8809d5c55396a.exe

using \u003350654412503;
using \u003491295387409;
using \u003703682515837;
using \u003785947670411;
using \u003840130082634;
using \u003867543137528;
using \u003875737918392;
using \u003879061372040;
using \u003966871253857;
using Microsoft.PythonTools;
using Microsoft.PythonTools.Infrastructure;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

namespace \u003840130082634
{
  [DefaultExecutorUri("executor://PythonPyTestExecutor/v1")]
  [FileExtension(".py")]
  public class \u003145675680789 : \u003014501432884
  {
    private IMessageLogger \u003121465665503;
    private static readonly string \u003607513405197 = PythonToolsInstallPath.GetFile("PythonFiles\\testing_tools\\run_adapter.py", (Assembly) null);

    public \u003145675680789()
      : base(\u003196266377257.Pytest)
    {
    }

    public virtual void \u003030512155093(
      IEnumerable<string> _param1,
      \u003064588995134 _param2,
      IMessageLogger _param3,
      ITestCaseDiscoverySink _param4)
    {
      if (_param1 == null)
        throw new ArgumentNullException("sources");
      if (_param4 == null)
        throw new ArgumentNullException("discoverySink");
      this.\u003121465665503 = _param3 ?? throw new ArgumentNullException("logger");
      string str1 = _param2.\u003469965681879 ? Strings.WorkspaceText : Strings.ProjectText;
      this.\u003653273154126(StringExtensions.FormatUI(Strings.PythonTestDiscovererStartedMessage, new object[4]
      {
        (object) "pytest",
        (object) _param2.\u003123732749265,
        (object) str1,
        (object) _param2.\u003330083167913
      }));
      Dictionary<string, string> dictionary = this.\u003816465414695(_param1, _param2);
      string tempFileName = Path.GetTempFileName();
      string[] strArray = this.\u003833151337787(_param1, _param2, tempFileName);
      this.\u003653273154126("cd " + _param2.\u003106365127459);
      this.\u003653273154126("set " + _param2.\u003433255215837 + "=" + dictionary[_param2.\u003433255215837]);
      this.\u003653273154126(_param2.\u003383078423503 + " " + string.Join(" ", strArray));
      try
      {
        string str2 = \u003636458639326.\u003276332148891(_param2.\u003383078423503, dictionary, (IEnumerable<string>) strArray, _param2.\u003106365127459, _param2.\u003433255215837, _param2.\u003330083167913);
        if (!string.IsNullOrEmpty(str2))
          this.\u003999863969408(str2);
      }
      catch (TimeoutException ex)
      {
        this.\u003999863969408(Strings.PythonTestDiscovererTimeoutErrorMessage);
        return;
      }
      if (!File.Exists(tempFileName))
      {
        this.\u003999863969408(StringExtensions.FormatUI(Strings.PythonDiscoveryResultsNotFound, (object) tempFileName));
      }
      else
      {
        string str3 = File.ReadAllText(tempFileName);
        if (string.IsNullOrEmpty(str3))
          return;
        try
        {
          foreach (TestCase testCase in this.\u003856662456794((IList<\u003391457153169>) JsonConvert.DeserializeObject<List<\u003391457153169>>(str3), _param2.\u003634011796970))
          {
            if (_param2.\u003552596574495.TryGetValue(testCase.CodeFilePath, out string _))
              _param4.SendTestCase(testCase);
          }
        }
        catch (InvalidOperationException ex)
        {
          this.\u003999863969408(StringExtensions.FormatInvariant("Failed to parse: {0}", (object) ex.Message));
          this.\u003999863969408(str3);
        }
        catch (JsonException ex)
        {
          this.\u003999863969408(StringExtensions.FormatInvariant("Failed to parse: {0}", (object) ((Exception) ex).Message));
          this.\u003999863969408(str3);
        }
      }
    }

    internal IEnumerable<TestCase> \u003856662456794(
      IList<\u003391457153169> _param1_1,
      string _param2)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003145675680789.\u003896073876427 obj = (\u003145675680789.\u003896073876427) new \u003017821964017.\u003454972936626();
      // ISSUE: reference to a compiler-generated field
      ((\u003017821964017.\u003454972936626) obj).\u003755058721833 = this;
      // ISSUE: reference to a compiler-generated field
      obj.\u003656790690183 = _param2;
      if (_param1_1 == null)
        throw new ArgumentNullException("results");
      // ISSUE: reference to a compiler-generated method
      return _param1_1.Where<\u003391457153169>((Func<\u003391457153169, bool>) (_param1_2 => _param1_2.\u003302599260388 != null)).SelectMany<\u003391457153169, TestCase>(new Func<\u003391457153169, IEnumerable<TestCase>>(obj.\u003060974176009)).Where<TestCase>((Func<TestCase, bool>) (_param1_3 => _param1_3 != null));
    }

    private TestCase \u003542469470642(\u003747053286813 _param1, string _param2)
    {
      try
      {
        return _param1.\u003287243072360(_param2);
      }
      catch (Exception ex)
      {
        this.\u003999863969408(ex.Message);
      }
      return (TestCase) null;
    }

    public string[] \u003833151337787(
      IEnumerable<string> _param1,
      \u003064588995134 _param2,
      string _param3)
    {
      return new List<string>()
      {
        \u003145675680789.\u003607513405197,
        "discover",
        "pytest",
        "--output-file",
        _param3,
        "--",
        "--cache-clear",
        string.Format("--rootdir={0}", (object) _param2.\u003634011796970)
      }.ToArray();
    }

    private Dictionary<string, string> \u003816465414695(
      IEnumerable<string> _param1,
      \u003064588995134 _param2)
    {
      string key = _param2.\u003433255215837;
      string str = this.\u003100028925362(_param1, _param2);
      Dictionary<string, string> dictionary = new Dictionary<string, string>();
      if (!string.IsNullOrWhiteSpace(key))
        dictionary[key] = str;
      foreach (KeyValuePair<string, string> keyValuePair in _param2.\u003615420650558)
        dictionary[keyValuePair.Key] = keyValuePair.Value;
      dictionary["PYTHONUNBUFFERED"] = "1";
      return dictionary;
    }

    private string \u003100028925362(IEnumerable<string> _param1, \u003064588995134 _param2)
    {
      List<string> source = _param2.\u003579671787876;
      source.Insert(0, _param2.\u003106365127459);
      return string.Join(";", source.Where<string>(new Func<string, bool>(Directory.Exists)).Distinct<string>((IEqualityComparer<string>) StringComparer.OrdinalIgnoreCase));
    }

    [Conditional("DEBUG")]
    private void \u003904522411713(string _param1) => this.\u003121465665503?.SendMessage((TestMessageLevel) 0, _param1 ?? string.Empty);

    private void \u003653273154126(string _param1) => this.\u003121465665503?.SendMessage((TestMessageLevel) 0, _param1 ?? string.Empty);

    private void \u003999863969408(string _param1) => this.\u003121465665503?.SendMessage((TestMessageLevel) 2, _param1 ?? string.Empty);

    private void \u003570343194446(string _param1) => this.\u003121465665503?.SendMessage((TestMessageLevel) 1, _param1 ?? string.Empty);
  }
}
