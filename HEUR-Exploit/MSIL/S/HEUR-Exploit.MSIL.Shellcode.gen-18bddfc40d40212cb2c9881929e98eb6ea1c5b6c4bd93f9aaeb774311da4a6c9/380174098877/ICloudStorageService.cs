// Decompiled with JetBrains decompiler
// Type: 380174098877.ICloudStorageService
// Assembly: 308586033544, Version=1.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: CD78F8E3-E5F9-41CF-8142-5EDBF93F1FF3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-18bddfc40d40212cb2c9881929e98eb6ea1c5b6c4bd93f9aaeb774311da4a6c9.exe

using \u003006867011039;
using \u003026774837591;
using \u003101216582995;
using \u003268045269596;
using \u003376511464175;
using \u003407561358666;
using \u003416649408708;
using \u003497465206431;
using \u003573328562494;
using \u003849351590804;
using Microsoft.VisualStudio.Shell.Interop;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Threading.Tasks;

namespace \u003380174098877
{
  [Guid("FC64810A-11EF-4D77-A537-CB837AD77F3B")]
  internal interface ICloudStorageService
  {
    IStorageConnection AddNewCloudStorageConnection();

    bool EditCloudStorageConnection(IStorageConnection connection);

    IStorageConnection GetDevStorageConnection();

    IStorageConnection GetCloudStorageConnection(
      string connectionString,
      \u003204682121416 keyAccessMethod);

    ICredentialStorageConnection2[] GetCurrentCredentialConnections();

    Task RefreshCredentialConnections();

    void DisplayStorageError(Exception error);

    void TraceStorageError(Exception error);

    void OpenCloudRootEntityDocument(
      IVsUIHierarchy hier,
      uint itemId,
      string moniker,
      IRootEntity rootEntity,
      \u003667444275650 context,
      string initialQuery,
      IStorageConnection conn);

    void OpenCloudRootEntityDocument(
      Guid editorGuid,
      IRootEntity rootEntity,
      \u003667444275650 context,
      string initialQuery);

    bool IsCloudRootEntityDocumentOpen(string moniker);

    Task<IEnumerable<IRootEntityNode>> SelectRootEntityNodesAsync(
      IStorageConnection storageConnection,
      \u003529332993387 type,
      string storageEntityName);

    \u003223657576739 CreateStorageAccount2(string subscriptionId = null);

    Task<\u003223657576739> CreateStorageAccountAsync(string subscriptionId = null);

    Task DeleteStorageAccountAsync(IStorageConnection connection);

    Task<IEnumerable<IRootEntityNode>> SelectRootEntityNodesByIdAsync(
      string storageConnectionId,
      \u003529332993387 type,
      string storageEntityName);

    bool OpenEditStorageConnectionDialog(
      string originalString,
      out string newString,
      out string accountName,
      out string accountKey,
      out bool isManualGenerated,
      out string accountEndpoint,
      \u003760957971723 editorType = \u003760957971723.ServiceModelUI);

    Task<ICredentialStorageConnection2> GetCloudStorageConnectionAsync(
      string accountName);

    string ExtractStorageEndpoint(IStorageAccount2 storageAccount);

    Task<Tuple<string, string>> GetRMStorageAccountCredentials(string storageAccountName);
  }
}
