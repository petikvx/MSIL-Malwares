// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: Yo, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 35C4B4A9-DF91-4C66-8221-B310119D49D7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-9fa98d845147978f040107c6d725a2b12ba15c204c54ed6d726c0780b40c68c3.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b)
    {
label_1:
      int num1 = -520300452;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1508355451)) % 4U)
        {
          case 0:
            this.board = b;
            num1 = (int) num2 * 2053365854 ^ 471038202;
            continue;
          case 1:
            num1 = (int) num2 * 255442528 ^ 1931360025;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public void FindAllMoves()
    {
      this.Clear();
label_1:
      int num1 = 1561419472;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1815419883)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1289363233 ^ -711143820;
            continue;
          case 3:
            num1 = (int) num2 * -976558869 ^ 615354831;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.WhitePieces.Values.GetEnumerator())
      {
label_11:
        int num3 = enumerator.MoveNext() ? 1209955632 : (num3 = 1492344063);
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1815419883)) % 5U)
          {
            case 0:
              num3 = (int) num4 * -2133402489 ^ -677370111;
              continue;
            case 2:
              num3 = 1209955632;
              continue;
            case 3:
              this.FindMoveFrom(enumerator.Current.Current);
              num3 = 168697981;
              continue;
            case 4:
              goto label_11;
            default:
              goto label_13;
          }
        }
      }
label_13:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.BlackPieces.Values.GetEnumerator())
      {
label_21:
        int num5 = !enumerator.MoveNext() ? 419149496 : (num5 = 1203258958);
        ChessPiece current;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 1815419883)) % 6U)
          {
            case 0:
              num5 = (int) num6 * -1035594774 ^ -1274167966;
              continue;
            case 1:
              current = enumerator.Current;
              num5 = 196014629;
              continue;
            case 2:
              num5 = 1203258958;
              continue;
            case 3:
              goto label_21;
            case 4:
              this.FindMoveFrom(current.Current);
              num5 = (int) num6 * 1307108887 ^ 1782490507;
              continue;
            default:
              goto label_24;
          }
        }
      }
label_24:
      if (!this.board.ShowAllMoves)
        return;
label_25:
      int num7 = 1028911819;
      while (true)
      {
        uint num8;
        switch ((num8 = (uint) (num7 ^ 1815419883)) % 3U)
        {
          case 0:
            goto label_22;
          case 1:
            this.HighLightMoveStyle();
            num7 = (int) num8 * -2031037448 ^ -942195193;
            continue;
          case 2:
            goto label_25;
          default:
            goto label_17;
        }
      }
label_22:
      return;
label_17:;
    }

    public void FindMoveFrom(Square x)
    {
      Pieces kind = x.Piece.Kind;
label_1:
      int num1 = -1245501291;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2124141293)) % 17U)
        {
          case 0:
label_16:
            this.handlePawn(x);
            num1 = -1945316598;
            continue;
          case 1:
            switch (kind)
            {
              case Pieces.Pawn:
                goto label_16;
              case Pieces.Knight:
                goto label_18;
              case Pieces.Bishop:
                goto label_19;
              case Pieces.Rook:
                goto label_17;
              case Pieces.King:
                goto label_11;
              case Pieces.Queen:
                goto label_13;
              default:
                num1 = (int) num2 * 1084340838 ^ -1930064790;
                continue;
            }
          case 2:
label_11:
            this.handleKing(x);
            num1 = -953406239;
            continue;
          case 3:
            num1 = (int) num2 * -2138069040 ^ 2141303194;
            continue;
          case 4:
            goto label_1;
          case 5:
            goto label_3;
          case 6:
label_18:
            this.handleKnight(x);
            num1 = -1270574806;
            continue;
          case 7:
            num1 = (int) num2 * 1485709128 ^ 1804665858;
            continue;
          case 8:
            num1 = (int) num2 * 257378312 ^ -1760377414;
            continue;
          case 9:
            num1 = (int) num2 * -137036567 ^ -1669870609;
            continue;
          case 10:
            num1 = (int) num2 * -121326215 ^ -531301078;
            continue;
          case 11:
            num1 = (int) num2 * 1149286077 ^ -645420896;
            continue;
          case 12:
            num1 = (int) num2 * -307136156 ^ 1085434565;
            continue;
          case 13:
label_17:
            this.handleRook(x);
            num1 = -804100861;
            continue;
          case 14:
label_19:
            this.handleBishop(x);
            num1 = -1926456781;
            continue;
          case 15:
            num1 = (int) num2 * 1923798582 ^ -2081296146;
            continue;
          case 16:
label_13:
            this.handleQueen(x);
            num1 = -983637549;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
      int num1 = 0;
      int num2 = 0;
      if (x.Piece.Color == PieceColor.White)
        goto label_84;
label_1:
      int num3 = -964770116;
label_2:
      int num4;
      int num5;
      bool flag1;
      while (true)
      {
        uint num6;
        Square square;
        int num7;
        int b;
        int num8;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        bool flag14;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        switch ((num6 = (uint) (num3 ^ -1170532229)) % 65U)
        {
          case 0:
            goto label_1;
          case 1:
            num3 = (int) num6 * 291635233 ^ 386127213;
            continue;
          case 2:
            int num16 = flag10 ? 2147190361 : (num16 = 1319933774);
            num3 = num16 ^ (int) num6 * -1678536992;
            continue;
          case 3:
            num3 = (int) num6 * -993173791 ^ -1930184740;
            continue;
          case 4:
            num3 = (int) num6 * 1906587257 ^ 1067342146;
            continue;
          case 5:
            int num17 = flag8 ? 1811172272 : (num17 = 819041922);
            num3 = num17 ^ (int) num6 * 318816577;
            continue;
          case 6:
            int num18 = flag12 ? 473068358 : (num18 = 227618722);
            num3 = num18 ^ (int) num6 * -88582516;
            continue;
          case 7:
            int num19 = flag6 ? 689892733 : (num19 = 881578905);
            num3 = num19 ^ (int) num6 * -1336263388;
            continue;
          case 8:
            num2 = x.Rank + num4;
            if (num1 >= 0)
            {
              num3 = (int) num6 * 1965423443 ^ 361547880;
              continue;
            }
            goto label_65;
          case 9:
            int num20 = flag13 ? -551438500 : (num20 = -680761061);
            num3 = num20 ^ (int) num6 * 720220178;
            continue;
          case 10:
            if (this.board[num8, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num3 = (int) num6 * 1772822739 ^ -1106778793;
              continue;
            }
            num10 = 0;
            goto label_54;
          case 11:
            num3 = (int) num6 * 1041322703 ^ 2120224142;
            continue;
          case 12:
            if (num2 >= 0)
            {
              num3 = (int) num6 * -802285422 ^ -1926669622;
              continue;
            }
            break;
          case 13:
            num12 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_70;
          case 14:
            if (!flag7)
            {
              num3 = (int) num6 * 1611911652 ^ 108480289;
              continue;
            }
            num14 = 5;
            goto label_89;
          case 15:
            num11 = num2 < 8 ? 1 : 0;
            goto label_44;
          case 16:
            int num21 = square.IsEmpty ? 2108335708 : (num21 = 296549023);
            num3 = num21 ^ (int) num6 * -1113210724;
            continue;
          case 17:
            num15 = this.board[num7, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_78;
          case 18:
            int num22 = flag2 ? 1000958780 : (num22 = 950674358);
            num3 = num22 ^ (int) num6 * -707964068;
            continue;
          case 19:
            goto label_83;
          case 20:
            this.addMove(num1, num2, x);
            num3 = (int) num6 * -995386364 ^ 1350789433;
            continue;
          case 21:
            if (this.board[num7, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num3 = (int) num6 * 554662844 ^ 1143997542;
              continue;
            }
            num15 = 0;
            goto label_78;
          case 22:
            int num23 = !flag3 ? -1099271366 : (num23 = -228772668);
            num3 = num23 ^ (int) num6 * -1204644371;
            continue;
          case 23:
            if (num2 >= 0)
            {
              num3 = (int) num6 * 864768665 ^ -53371871;
              continue;
            }
            goto label_65;
          case 24:
            this.addMove(num1, num2, x);
            num3 = (int) num6 * 1369374482 ^ 64608293;
            continue;
          case 25:
            num9 = num2 < 8 ? 1 : 0;
            goto label_66;
          case 26:
            num10 = this.board[num8, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_54;
          case 27:
            goto label_3;
          case 28:
            goto label_94;
          case 29:
            int num24 = square.IsEmpty ? -2039871021 : (num24 = -205790562);
            num3 = num24 ^ (int) num6 * -1248547402;
            continue;
          case 30:
            num8 = x.File - 1;
            num7 = x.File + 1;
            flag2 = num8 >= 0;
            num3 = (int) num6 * 1361519997 ^ 1252191448;
            continue;
          case 31:
            num3 = (int) num6 * 1979610601 ^ -1728454120;
            continue;
          case 32:
            int num25 = !flag9 ? -357750432 : (num25 = -1414708473);
            num3 = num25 ^ (int) num6 * -1428675003;
            continue;
          case 33:
            num3 = -2092530430;
            continue;
          case 34:
            square = this.board[num1, num2];
            num3 = (int) num6 * -1808930983 ^ 474242113;
            continue;
          case 35:
            int num26 = flag4 ? 494696283 : (num26 = 564193533);
            num3 = num26 ^ (int) num6 * 851227157;
            continue;
          case 36:
            square = this.board[num1, num2];
            num3 = (int) num6 * -1308256979 ^ -581690861;
            continue;
          case 37:
            square = this.board[num1, num2];
            num3 = (int) num6 * -1309352733 ^ 997081202;
            continue;
          case 38:
            flag3 = this.board.lastPassantPawn == this.board[num7, x.Rank].Piece;
            num3 = (int) num6 * 1008328972 ^ -1977548800;
            continue;
          case 39:
            goto label_35;
          case 40:
            num1 = x.File + 1;
            num2 = x.Rank + num4;
            if (num1 < 8)
            {
              num3 = -806185826;
              continue;
            }
            break;
          case 41:
            flag5 = flag7 | flag14;
            num3 = (int) num6 * 427418731 ^ 38777917;
            continue;
          case 42:
            num3 = -1306101540;
            continue;
          case 43:
            this.addCapture(num7, b, x, this.board[num7, x.Rank].Piece);
            num3 = (int) num6 * -1702305170 ^ -1987626952;
            continue;
          case 44:
            int num27 = flag11 ? 1627625877 : (num27 = 1401730043);
            num3 = num27 ^ (int) num6 * -398565768;
            continue;
          case 45:
            flag13 = this.board[num7, x.Rank].Piece != null;
            num3 = (int) num6 * -229969929 ^ -1817791460;
            continue;
          case 46:
            num3 = -1139112377;
            continue;
          case 47:
            flag4 = this.board.lastPassantPawn == this.board[num8, x.Rank].Piece;
            num3 = (int) num6 * -534893044 ^ 1082928880;
            continue;
          case 48:
            num2 = x.Rank + 2 * num4;
            num3 = (int) num6 * -2079561581 ^ -890054413;
            continue;
          case 49:
            num14 = 2;
            goto label_89;
          case 50:
            this.addMove(num1, num2, x);
            num3 = (int) num6 * 447242133 ^ 1276223628;
            continue;
          case 51:
            flag10 = this.board[num8, x.Rank].Piece != null;
            num3 = (int) num6 * 411905787 ^ 1201099079;
            continue;
          case 52:
            flag8 = !square.IsEmpty;
            num3 = (int) num6 * 536938864 ^ 652597012;
            continue;
          case 53:
            flag6 = num7 < 8;
            num3 = -1853374363;
            continue;
          case 54:
            num3 = (int) num6 * -1096141852 ^ 1942191336;
            continue;
          case 55:
            if (x.Rank == 4)
            {
              num3 = -33923646;
              continue;
            }
            num12 = 0;
            goto label_70;
          case 56:
            num13 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_81;
          case 57:
            this.addMove(num1, num2, x);
            num3 = (int) num6 * 1640950931 ^ 250088836;
            continue;
          case 58:
            this.addCapture(num8, b, x, this.board[num8, x.Rank].Piece);
            num3 = (int) num6 * -1544334868 ^ -1924356039;
            continue;
          case 59:
            int num28 = !flag1 ? 879180334 : (num28 = 1540588086);
            num3 = num28 ^ (int) num6 * -658537903;
            continue;
          case 60:
            int num29;
            num3 = num29 = x.Rank == num5 ? -1980300524 : (num29 = -505841964);
            continue;
          case 61:
            num3 = -186784917;
            continue;
          case 62:
            num1 = x.File - 1;
            num3 = -232451920;
            continue;
          case 63:
            num3 = (int) num6 * -1000871684 ^ -1827983077;
            continue;
          case 64:
            int num30 = !flag5 ? -684652404 : (num30 = -299602221);
            num3 = num30 ^ (int) num6 * -1419121520;
            continue;
          default:
            goto label_98;
        }
        num11 = 0;
label_44:
        int num31;
        num3 = num31 = num11 != 0 ? -1076330397 : (num31 = -1139112377);
        continue;
label_54:
        flag12 = num10 != 0;
        num3 = -1517017062;
        continue;
label_65:
        num9 = 0;
label_66:
        flag11 = num9 != 0;
        num3 = -2007038155;
        continue;
label_70:
        flag7 = num12 != 0;
        if (x.Rank == 3)
        {
          num3 = -377791366;
          continue;
        }
        num13 = 0;
        goto label_81;
label_78:
        flag9 = num15 != 0;
        num3 = -990835146;
        continue;
label_81:
        flag14 = num13 != 0;
        num3 = -1720099371;
        continue;
label_89:
        b = num14;
        num3 = -34851990;
      }
label_3:
      return;
label_98:
      return;
label_35:
      int num32 = -1;
      goto label_37;
label_83:
      int num33 = 6;
      goto label_85;
label_94:
      int num34 = num2 < 8 ? 1 : 0;
      goto label_96;
label_37:
      num4 = num32;
      num1 = x.File;
      num2 = x.Rank + num4;
      if (num2 >= 0)
      {
        num3 = -548593246;
        goto label_2;
      }
      else
      {
        num34 = 0;
        goto label_96;
      }
label_84:
      num33 = 1;
label_85:
      num5 = num33;
      if (x.Piece.Color == PieceColor.White)
      {
        num32 = 1;
        goto label_37;
      }
      else
      {
        num3 = -1894787058;
        goto label_2;
      }
label_96:
      flag1 = num34 != 0;
      num3 = -1113117417;
      goto label_2;
    }

    private void handleQueen(Square x)
    {
label_1:
      int num1 = 1639778249;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 144943020)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            this.handleRook(x);
            num1 = (int) num2 * -1023575380 ^ 403465259;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.handleBishop(x);
            num1 = (int) num2 * 818701634 ^ -1523791994;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void handleKing(Square x)
    {
label_1:
      int num1 = -1293988275;
      bool flag;
      bool canCastleKingSide1;
      bool canCastleKingSide2;
      bool canCastleQueenSide;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -666174770)) % 25U)
        {
          case 0:
            int num3 = canCastleQueenSide ? 315706681 : (num3 = 1519299641);
            num1 = num3 ^ (int) num2 * 890432618;
            continue;
          case 1:
            int num4 = !flag ? 1542748123 : (num4 = 1373429999);
            num1 = num4 ^ (int) num2 * -667119264;
            continue;
          case 2:
            canCastleQueenSide = this.board.BlackCanCastleQueenSide;
            num1 = -271809872;
            continue;
          case 3:
            this.handleBigCastling(x);
            num1 = (int) num2 * 1015117125 ^ 482876871;
            continue;
          case 4:
            num1 = (int) num2 * 266176964 ^ -746425747;
            continue;
          case 5:
            int num5 = canCastleKingSide2 ? -1462117984 : (num5 = -389423188);
            num1 = num5 ^ (int) num2 * 1059626907;
            continue;
          case 6:
            this.addMove(x.File - 1, x.Rank + 1, x);
            this.addMove(x.File - 1, x.Rank - 1, x);
            this.addMove(x.File + 1, x.Rank, x);
            this.addMove(x.File - 1, x.Rank, x);
            num1 = (int) num2 * -442793245 ^ -1048162881;
            continue;
          case 7:
            num1 = (int) num2 * -869210084 ^ 1417246920;
            continue;
          case 8:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -346289619 ^ 1368260341;
            continue;
          case 9:
            num1 = (int) num2 * 11364545 ^ -1236304343;
            continue;
          case 10:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -2126172751 ^ 483892995;
            continue;
          case 11:
            int num6;
            num1 = num6 = this.board.WhiteCanCastleQueenSide ? -1572265517 : (num6 = -956083690);
            continue;
          case 12:
            flag = x.Piece.Color == PieceColor.Black;
            num1 = -259118427;
            continue;
          case 13:
            int num7 = !canCastleKingSide1 ? 1244241269 : (num7 = 1856405278);
            num1 = num7 ^ (int) num2 * -331065384;
            continue;
          case 14:
            this.handleBigCastling(x);
            num1 = (int) num2 * -1175960674 ^ -2103285350;
            continue;
          case 15:
            num1 = -1088768773;
            continue;
          case 16:
            this.addMove(x.File, x.Rank + 1, x);
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * 728396042 ^ -1896757319;
            continue;
          case 17:
            canCastleKingSide1 = this.board.BlackCanCastleKingSide;
            num1 = (int) num2 * -1405671258 ^ -1159435637;
            continue;
          case 18:
            canCastleKingSide2 = this.board.WhiteCanCastleKingSide;
            num1 = (int) num2 * 1564706614 ^ -1010606860;
            continue;
          case 19:
            num1 = (int) num2 * 1034167060 ^ 964528473;
            continue;
          case 20:
            int num8 = x.Piece.Color == PieceColor.White ? 223643065 : (num8 = 1909562904);
            num1 = num8 ^ (int) num2 * -1008481094;
            continue;
          case 21:
            this.addMove(x.File + 1, x.Rank + 1, x);
            this.addMove(x.File + 1, x.Rank - 1, x);
            num1 = (int) num2 * 2072329803 ^ -1087763782;
            continue;
          case 22:
            goto label_1;
          case 23:
            num1 = -431509306;
            continue;
          case 24:
            goto label_3;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    private void handleBigCastling(Square x)
    {
label_1:
      int num1 = -269003707;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        Square square3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1190851462)) % 8U)
        {
          case 0:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 1853573683 ^ 1302436222;
              continue;
            }
            break;
          case 1:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * 1981229062 ^ -1613832046;
            continue;
          case 2:
            if (square3.IsEmpty)
            {
              num1 = (int) num2 * 1482472979 ^ -86228372;
              continue;
            }
            break;
          case 3:
            goto label_1;
          case 4:
            num3 = square2.IsEmpty ? 1 : 0;
            goto label_10;
          case 5:
            square2 = this.board[x.File - 3, x.Rank];
            num1 = (int) num2 * -852955916 ^ -865405692;
            continue;
          case 6:
            goto label_3;
          case 7:
            square3 = this.board[x.File - 1, x.Rank];
            square1 = this.board[x.File - 2, x.Rank];
            num1 = (int) num2 * -1757801795 ^ -1741187124;
            continue;
          default:
            goto label_14;
        }
        num3 = 0;
label_10:
        int num4;
        num1 = num4 = num3 != 0 ? -1999119869 : (num4 = -1197732284);
      }
label_3:
      return;
label_14:;
    }

    private void handleSmallCastling(Square x)
    {
      Square square1 = this.board[x.File + 1, x.Rank];
label_1:
      int num1 = -1173900454;
      while (true)
      {
        uint num2;
        Square square2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1107430613)) % 7U)
        {
          case 0:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * 515279204 ^ 1807357923;
            continue;
          case 1:
            square2 = this.board[x.File + 2, x.Rank];
            num1 = (int) num2 * -1934002746 ^ 999975761;
            continue;
          case 2:
            goto label_1;
          case 3:
            int num4 = flag ? -1981161253 : (num4 = -1471173661);
            num1 = num4 ^ (int) num2 * 175147298;
            continue;
          case 4:
            if (!square1.IsEmpty)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -1440224745 ^ -1047079481;
            continue;
          case 5:
            goto label_3;
          case 6:
            num3 = square2.IsEmpty ? 1 : 0;
            break;
          default:
            goto label_12;
        }
        flag = num3 != 0;
        num1 = -1541315509;
      }
label_3:
      return;
label_12:;
    }

    private void handleRook(Square x)
    {
label_1:
      int num1 = 1016483307;
      int a1;
      int num2;
      int num3;
      bool flag1;
      bool flag2;
      int num4;
      int a2;
      bool flag3;
      bool flag4;
      int num5;
      int b1;
      int b2;
      bool flag5;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 1204985384)) % 40U)
        {
          case 0:
            flag5 = num5 < 8;
            num1 = 450161690;
            continue;
          case 1:
            int num7 = this.addMove(a1, x.Rank, x) ? -1535422072 : (num7 = -86281151);
            num1 = num7 ^ (int) num6 * 1486670796;
            continue;
          case 2:
            int num8 = !this.addMove(x.File, b1, x) ? 2100538365 : (num8 = 1263020000);
            num1 = num8 ^ (int) num6 * 96587794;
            continue;
          case 3:
            flag2 = this.addMove(x.File, b2, x);
            num1 = (int) num6 * -209957191 ^ -1605062708;
            continue;
          case 4:
            flag1 = num3 < 8;
            num1 = 1915887500;
            continue;
          case 5:
            num5 = 1;
            num1 = 1384948170;
            continue;
          case 6:
            int num9 = flag4 ? 29828815 : (num9 = 1291655536);
            num1 = num9 ^ (int) num6 * -320663287;
            continue;
          case 7:
            num1 = (int) num6 * -935546433 ^ -20748239;
            continue;
          case 8:
            num1 = (int) num6 * 1202132628 ^ 989830620;
            continue;
          case 9:
            num1 = (int) num6 * -6809672 ^ 2129345637;
            continue;
          case 10:
            goto label_1;
          case 11:
            num4 = 1;
            num1 = 752459705;
            continue;
          case 12:
            num1 = 532540274;
            continue;
          case 13:
            flag4 = num4 < 8;
            num1 = 163372030;
            continue;
          case 14:
            goto label_3;
          case 15:
            int num10 = flag2 ? -57449803 : (num10 = -1296938403);
            num1 = num10 ^ (int) num6 * -1220482043;
            continue;
          case 16:
            int num11;
            num1 = num11 = num2 >= 8 ? 378159389 : (num11 = 1305304446);
            continue;
          case 17:
            ++num2;
            num1 = (int) num6 * -447070898 ^ 1468915998;
            continue;
          case 18:
            int num12 = flag5 ? 616180692 : (num12 = 1877790687);
            num1 = num12 ^ (int) num6 * -1063883872;
            continue;
          case 19:
            b2 = x.Rank + num2;
            num1 = (int) num6 * -1514570651 ^ -844471500;
            continue;
          case 20:
            int num13 = flag1 ? -712634439 : (num13 = -1763569361);
            num1 = num13 ^ (int) num6 * -2071877677;
            continue;
          case 21:
            ++num4;
            num1 = 885922653;
            continue;
          case 22:
            num1 = 151740011;
            continue;
          case 23:
            flag3 = this.addMove(a2, x.Rank, x);
            num1 = (int) num6 * -1153127157 ^ -1303332592;
            continue;
          case 24:
            a1 = x.File - num4;
            num1 = (int) num6 * 309325641 ^ 975488353;
            continue;
          case 25:
            num1 = 632342320;
            continue;
          case 26:
            b1 = x.Rank - num5;
            num1 = (int) num6 * 558624534 ^ -1428815386;
            continue;
          case 27:
            num2 = 1;
            num1 = (int) num6 * 980880875 ^ 1096796806;
            continue;
          case 28:
            num1 = (int) num6 * -519119910 ^ -1203449561;
            continue;
          case 29:
            int num14 = !flag3 ? 1599079242 : (num14 = 143254830);
            num1 = num14 ^ (int) num6 * 239426085;
            continue;
          case 30:
            num1 = (int) num6 * -1822480055 ^ -1275988725;
            continue;
          case 31:
            num1 = (int) num6 * 1621961693 ^ 2044706840;
            continue;
          case 32:
            ++num3;
            num1 = (int) num6 * 1209359385 ^ 137488964;
            continue;
          case 33:
            ++num5;
            num1 = 109517760;
            continue;
          case 34:
            num1 = (int) num6 * -1892847659 ^ 459226826;
            continue;
          case 35:
            num1 = 1958036400;
            continue;
          case 36:
            num1 = (int) num6 * 135072731 ^ 80586578;
            continue;
          case 37:
            a2 = x.File + num3;
            num1 = 869604487;
            continue;
          case 38:
            num1 = 415543329;
            continue;
          case 39:
            num3 = 1;
            num1 = 2058860024;
            continue;
          default:
            goto label_42;
        }
      }
label_3:
      return;
label_42:;
    }

    private void handleBishop(Square x)
    {
label_1:
      int num1 = 882333804;
      bool flag1;
      int num2;
      int num3;
      bool flag2;
      int a1;
      bool flag3;
      int num4;
      int num5;
      bool flag4;
      bool flag5;
      bool flag6;
      int a2;
      int a3;
      int b1;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 1790285957)) % 36U)
        {
          case 0:
            int num7 = flag3 ? 768595959 : (num7 = 521902324);
            num1 = num7 ^ (int) num6 * 543277973;
            continue;
          case 1:
            num5 = 1;
            num1 = (int) num6 * -1790054082 ^ 470134527;
            continue;
          case 2:
            num1 = 876514498;
            continue;
          case 3:
            ++num3;
            num1 = (int) num6 * 720123624 ^ 537802850;
            continue;
          case 4:
            int num8 = !flag5 ? 257930335 : (num8 = 893128960);
            num1 = num8 ^ (int) num6 * -944666446;
            continue;
          case 5:
            ++num5;
            num1 = 991870865;
            continue;
          case 6:
            int num9;
            num1 = num9 = !this.addMove(x.File - num3, x.Rank - num3, x) ? 1193432063 : (num9 = 129940442);
            continue;
          case 7:
            num1 = (int) num6 * -1739460808 ^ -221847048;
            continue;
          case 8:
            num4 = 1;
            num1 = 1316381327;
            continue;
          case 9:
            goto label_3;
          case 10:
            goto label_1;
          case 11:
            flag3 = num3 < 8;
            num1 = 66897969;
            continue;
          case 12:
            num1 = 236342345;
            continue;
          case 13:
            num1 = (int) num6 * -876729606 ^ -1341541238;
            continue;
          case 14:
            num3 = 1;
            num1 = 2076926522;
            continue;
          case 15:
            flag1 = this.addMove(a3, b1, x);
            num1 = (int) num6 * -1687976267 ^ 987867347;
            continue;
          case 16:
            ++num4;
            num1 = (int) num6 * -385131555 ^ -1600038253;
            continue;
          case 17:
            int num10 = !flag4 ? -595917930 : (num10 = -90149419);
            num1 = num10 ^ (int) num6 * 1519705871;
            continue;
          case 18:
            ++num2;
            num1 = 462139447;
            continue;
          case 19:
            int b2 = x.Rank + num2;
            flag5 = this.addMove(a1, b2, x);
            num1 = (int) num6 * -1618536455 ^ -318436730;
            continue;
          case 20:
            num1 = (int) num6 * -694546454 ^ -1976183497;
            continue;
          case 21:
            num2 = 1;
            num1 = 1383514117;
            continue;
          case 22:
            num1 = 87774745;
            continue;
          case 23:
            int num11 = !flag2 ? -1089074299 : (num11 = -391233099);
            num1 = num11 ^ (int) num6 * -309516321;
            continue;
          case 24:
            a3 = x.File + num4;
            b1 = x.Rank - num4;
            num1 = (int) num6 * -1759839039 ^ -1991745178;
            continue;
          case 25:
            num1 = 1087794927;
            continue;
          case 26:
            flag6 = num4 < 8;
            num1 = 2132162690;
            continue;
          case 27:
            int num12 = !flag6 ? 2112482177 : (num12 = 2117846745);
            num1 = num12 ^ (int) num6 * 912559446;
            continue;
          case 28:
            num1 = (int) num6 * -1764862392 ^ 743569205;
            continue;
          case 29:
            int b3 = x.Rank + num5;
            int num13 = this.addMove(a2, b3, x) ? -535826538 : (num13 = -840367473);
            num1 = num13 ^ (int) num6 * -925028753;
            continue;
          case 30:
            flag2 = num2 < 8;
            num1 = 1564992662;
            continue;
          case 31:
            a2 = x.File + num5;
            num1 = 407920048;
            continue;
          case 32:
            flag4 = num5 < 8;
            num1 = 1581478760;
            continue;
          case 33:
            int num14 = flag1 ? 738890386 : (num14 = 963818389);
            num1 = num14 ^ (int) num6 * -1209953084;
            continue;
          case 34:
            a1 = x.File - num2;
            num1 = (int) num6 * 2008969922 ^ -1974674958;
            continue;
          case 35:
            num1 = (int) num6 * -643357629 ^ -749046286;
            continue;
          default:
            goto label_38;
        }
      }
label_3:
      return;
label_38:;
    }

    private void handleKnight(Square x)
    {
label_1:
      int num1 = -767200307;
      while (true)
      {
        uint num2;
        int[] numArray1;
        int index;
        int File;
        int[] numArray2;
        int Rank;
        ChessPiece piece;
        Square sq;
        bool isEmpty;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1313456922)) % 23U)
        {
          case 0:
            num1 = (int) num2 * -718255076 ^ -394053584;
            continue;
          case 1:
            if (File >= 0)
            {
              num1 = (int) num2 * 892470328 ^ 286795080;
              continue;
            }
            break;
          case 2:
            int num4 = !flag ? -1163810022 : (num4 = -200098477);
            num1 = num4 ^ (int) num2 * -892515480;
            continue;
          case 3:
            num1 = -1233060016;
            continue;
          case 4:
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206A‬‪‍‪​‎‮‫⁯‌‪⁯⁫‏⁯‬‌⁮‍‭‭‏‭⁪‭‏‎‍⁬‎⁬‎‪⁪‪‭‬⁮⁫‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray2 = numArray3;
            index = 0;
            num1 = (int) num2 * -598451867 ^ 1041010510;
            continue;
          case 5:
            num1 = (int) num2 * 1411646269 ^ -485273900;
            continue;
          case 6:
            if (Rank >= 0)
            {
              num1 = (int) num2 * -1885657359 ^ 1420828699;
              continue;
            }
            break;
          case 7:
            if (File <= 7)
            {
              num1 = (int) num2 * -1714535951 ^ 2048336924;
              continue;
            }
            break;
          case 8:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -567799137 ^ -1750822208;
            continue;
          case 9:
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206A‬‪‍‪​‎‮‫⁯‌‪⁯⁫‏⁯‬‌⁮‍‭‭‏‭⁪‭‏‎‍⁬‎⁬‎‪⁪‪‭‬⁮⁫‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray1 = numArray4;
            num1 = (int) num2 * -604229096 ^ -1124139663;
            continue;
          case 10:
            int num5;
            num1 = num5 = sq.Piece.Color != x.Piece.Color ? -1466338462 : (num5 = -1115616951);
            continue;
          case 11:
            piece = x.Piece;
            num1 = (int) num2 * 1994187223 ^ 1889546786;
            continue;
          case 12:
            sq = this.board[File, Rank];
            isEmpty = sq.IsEmpty;
            num1 = -1855646700;
            continue;
          case 13:
            flag = index < 8;
            num1 = -1848204032;
            continue;
          case 14:
            goto label_3;
          case 15:
            num1 = (int) num2 * 1388892020 ^ -1681761837;
            continue;
          case 16:
            ++index;
            num1 = -649422961;
            continue;
          case 17:
            goto label_1;
          case 18:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * -992000497 ^ 2142769607;
            continue;
          case 19:
            File = x.File + numArray1[index];
            Rank = x.Rank + numArray2[index];
            num1 = -788328271;
            continue;
          case 20:
            int num6 = isEmpty ? 26263225 : (num6 = 784753733);
            num1 = num6 ^ (int) num2 * -1393946597;
            continue;
          case 21:
            num3 = Rank > 7 ? 1 : 0;
            goto label_25;
          case 22:
            num1 = (int) num2 * -333720865 ^ 1832307850;
            continue;
          default:
            goto label_30;
        }
        num3 = 1;
label_25:
        int num7;
        num1 = num7 = num3 == 0 ? -170436209 : (num7 = -1837470322);
      }
label_3:
      return;
label_30:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
      ChessPiece piece = x.Piece;
label_1:
      int num1 = -922305185;
      Square sq;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -874046449)) % 5U)
        {
          case 0:
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * 586164296 ^ 1778737253;
            continue;
          case 1:
            num1 = (int) num2 * -2079205957 ^ 65891354;
            continue;
          case 2:
            goto label_1;
          case 3:
            sq = this.board[a, b];
            num1 = (int) num2 * -654400965 ^ 664040068;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private bool addMove(int a, int b, Square x)
    {
label_1:
      int num1 = 764561488;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        Square sq;
        UserAction kind;
        ChessPiece piece;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 635856433)) % 27U)
        {
          case 0:
            flag4 = sq.Piece.Color != x.Piece.Color;
            num1 = 1905643492;
            continue;
          case 1:
            num1 = 1470175831;
            continue;
          case 2:
            flag1 = true;
            num1 = 275847831;
            continue;
          case 3:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = 2026305414;
            continue;
          case 4:
            if (x.Piece.Kind == Pieces.King)
            {
              num3 = 0;
              goto label_10;
            }
            else
            {
              num1 = (int) num2 * -1627316075 ^ -515791008;
              continue;
            }
          case 5:
            int num5 = flag4 ? -807836717 : (num5 = -270331537);
            num1 = num5 ^ (int) num2 * 1514511440;
            continue;
          case 6:
            num1 = (int) num2 * -918948964 ^ -646733014;
            continue;
          case 7:
            flag1 = true;
            num1 = (int) num2 * 1399178123 ^ -1279715884;
            continue;
          case 8:
            int num6 = !sq.IsEmpty ? 1972294523 : (num6 = 81934475);
            num1 = num6 ^ (int) num2 * 352673550;
            continue;
          case 9:
            flag1 = true;
            num1 = (int) num2 * 1814643301 ^ -1216763240;
            continue;
          case 10:
            flag1 = false;
            num1 = 275847831;
            continue;
          case 11:
            piece = x.Piece;
            sq = this.board[a, b];
            num1 = 1283995817;
            continue;
          case 12:
            num1 = (int) num2 * 896177386 ^ -799674592;
            continue;
          case 13:
            num1 = (int) num2 * 1976296082 ^ 1678381891;
            continue;
          case 14:
            if (b >= 0)
            {
              num1 = (int) num2 * 1188234854 ^ -1993607094;
              continue;
            }
            break;
          case 15:
            num4 = b > 7 ? 1 : 0;
            goto label_7;
          case 16:
            flag3 = sq.Piece.Kind == Pieces.King;
            num1 = (int) num2 * 4361720 ^ -393379208;
            continue;
          case 18:
            int num7 = !flag3 ? -1043199771 : (num7 = -2137385191);
            num1 = num7 ^ (int) num2 * 2081779218;
            continue;
          case 19:
            goto label_1;
          case 20:
            int num8 = flag2 ? 1735097139 : (num8 = 1424380033);
            num1 = num8 ^ (int) num2 * 1061787706;
            continue;
          case 21:
            if (a >= 0)
            {
              num1 = (int) num2 * 1863831980 ^ -2117117123;
              continue;
            }
            break;
          case 22:
            kind = UserAction.Capture;
            num1 = (int) num2 * -1033287591 ^ -506696671;
            continue;
          case 23:
            this.KingColorOnCheck = sq.Piece.Color;
            this.IsOnCheck = true;
            num1 = (int) num2 * -640655683 ^ -1059871517;
            continue;
          case 24:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 1872527036 ^ 2045475641;
            continue;
          case 25:
            num3 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            goto label_10;
          case 26:
            if (a <= 7)
            {
              num1 = (int) num2 * -1103953676 ^ 572179093;
              continue;
            }
            break;
          default:
            goto label_36;
        }
        num4 = 1;
label_7:
        int num9;
        num1 = num9 = num4 == 0 ? 2097175571 : (num9 = 1253350424);
        continue;
label_10:
        flag2 = num3 != 0;
        num1 = 1977468592;
      }
label_36:
      return flag1;
    }

    static void \u206A‬‪‍‪​‎‮‫⁯‌‪⁯⁫‏⁯‬‌⁮‍‭‭‏‭⁪‭‏‎‍⁬‎⁬‎‪⁪‪‭‬⁮⁫‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
