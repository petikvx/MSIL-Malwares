// Decompiled with JetBrains decompiler
// Type: MaterialSurface.MaterialTextfield
// Assembly: WeakRefere, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 041EFFF7-CD1D-4ADB-B4E6-C9A894F6978D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0cd0302163829d65a707a69dd2c9690cc8ebc1cd04fc9be3e0d165982f97ef11.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace MaterialSurface
{
  [DefaultEvent("TextChanged")]
  public class MaterialTextfield : Control, IMaterialControl
  {
    private int LINE_SPACE = 8;
    private ContextMenuStrip contextMenuStrip1 = new ContextMenuStrip();
    private ToolStripMenuItem copyToolStripMenuItem = new ToolStripMenuItem();
    private ToolStripMenuItem pasteToolStripMenuItem = new ToolStripMenuItem();
    private ToolStripMenuItem cutToolStripMenuItem = new ToolStripMenuItem();
    private ToolStripSeparator toolStripSeparator1 = new ToolStripSeparator();
    private ToolStripMenuItem toolStripMenuItem1 = new ToolStripMenuItem();
    private ToolStripMenuItem toolStripMenuItem2 = new ToolStripMenuItem();
    private ToolStripSeparator toolStripSeparator2 = new ToolStripSeparator();
    private readonly Timer animationDirector = new Timer()
    {
      Interval = 1
    };
    private TextBox mainTextbox = new TextBox();
    private TextBox lbHint = new TextBox();
    private TextBox lbFloating = new TextBox();
    private readonly StringFormat textAglignment = new StringFormat()
    {
      Alignment = StringAlignment.Near,
      LineAlignment = StringAlignment.Near
    };
    private readonly StringFormat countingTextAglignment = new StringFormat()
    {
      Alignment = StringAlignment.Far,
      LineAlignment = StringAlignment.Near
    };
    private bool passChar = false;
    private bool multiline = false;
    private bool autoCol = true;
    private bool hideCaret = false;
    private bool countText = false;
    private Color primaryColor = Color.BlueViolet;
    private int firstDot;
    private int middleDot;
    private int lastDot;
    private int incSize;
    private Font floatingLabelFont;
    private int topPadding;
    private int hintLocation;
    private int incLocation;
    private int fixOnMultilin = 10;
    private readonly int leftPadding = 12;
    private float incFontSize = 0.315f;
    private string helperText = "";
    private string errorText = "";
    private bool handleError = false;
    public bool hasError = false;
    private MaterialTextfield.TextfieldStyle style = MaterialTextfield.TextfieldStyle.None;
    private BoxType textFieldType = BoxType.Normal;

    [DllImport("user32.dll")]
    private static extern bool HideCaret(IntPtr hWnd);

    public new event KeyEventHandler KeyDown;

    public new event KeyEventHandler KeyUp;

    public new event KeyPressEventHandler KeyPress;

    public new event EventHandler GotFocus;

    public new event EventHandler LostFocus;

    public new event EventHandler Click;

    public new event EventHandler MouseHover;

    public new event EventHandler MouseEnter;

    public new event EventHandler MouseLeave;

    public new event MouseEventHandler MouseDown;

    public new event MouseEventHandler MouseUp;

    public new event MouseEventHandler MouseMove;

    [Category("Additonal Material")]
    [Description("Show counting-text label. The limit is MaxLength.")]
    public bool CountText
    {
      get => this.countText;
      set
      {
        if (!this.handleError)
          this.handleError = true;
        this.countText = value;
        this.Invalidate(true);
      }
    }

    [Category("Additonal Material")]
    [Description("")]
    public string HelperText
    {
      get => this.helperText;
      set
      {
        this.helperText = value;
        if (!string.IsNullOrEmpty(this.helperText) && !this.handleError)
          this.handleError = true;
        this.Invalidate(true);
      }
    }

    [Category("Additonal Material")]
    [Description("Textfield can inform Error, show counting-text, show heleper-text or not.")]
    public bool HandleError
    {
      get => this.handleError;
      set
      {
        if (!string.IsNullOrEmpty(this.helperText) || this.countText && !value)
          return;
        this.handleError = value;
        this.OnSizeChanged(EventArgs.Empty);
      }
    }

    [Category("Appearance Material")]
    [Description("Only display when Style property is HasFloatingLabel.")]
    public string FloatingLabelText
    {
      get => this.lbFloating.Text;
      set
      {
        this.lbFloating.Text = value;
        this.lbFloating.Width = (int) this.CreateGraphics().MeasureString(this.lbFloating.Text, this.lbFloating.Font).Width;
      }
    }

    [Category("Appearance Material")]
    [Description("Hint-text is displayed when textfield is empty.")]
    public string HintText
    {
      get => this.lbHint.Text;
      set
      {
        this.lbHint.Text = value;
        this.lbHint.Width = (int) this.CreateGraphics().MeasureString(this.lbHint.Text, this.lbHint.Font).Width;
        if (this.lbHint.Width <= this.mainTextbox.Width)
          return;
        this.lbHint.Width = this.mainTextbox.Width;
      }
    }

    [Category("Appearance Material")]
    [Description("TextField type.")]
    public BoxType FieldType
    {
      get => this.textFieldType;
      set
      {
        this.textFieldType = value;
        if (this.textFieldType == BoxType.Filled)
        {
          this.autoCol = false;
          this.BackColor = Color.WhiteSmoke;
          this.mainTextbox.BackColor = Color.WhiteSmoke;
          this.lbHint.BackColor = Color.WhiteSmoke;
          this.lbFloating.BackColor = Color.WhiteSmoke;
        }
        else
        {
          this.autoCol = true;
          this.mainTextbox.BackColor = this.BackColor;
          this.lbHint.BackColor = this.BackColor;
          this.lbFloating.BackColor = this.BackColor;
        }
        this.Invalidate(true);
      }
    }

    [Category("Appearance Material")]
    [Description("TextField style.")]
    public MaterialTextfield.TextfieldStyle Style
    {
      get => this.style;
      set
      {
        this.style = value;
        Point location;
        if (this.style == MaterialTextfield.TextfieldStyle.HasFloatingLabel)
        {
          this.lbFloating.BackColor = this.BackColor;
          this.Controls.Add((Control) this.lbFloating);
          this.lbHint.Font = this.Font;
          this.lbHint.ForeColor = Color.Silver;
          if (this.multiline)
          {
            this.lbHint.Location = new Point(this.fixOnMultilin + this.leftPadding, this.mainTextbox.Location.Y);
            this.lbFloating.Location = new Point(this.fixOnMultilin + this.leftPadding, 0);
          }
          else
          {
            TextBox lbHint = this.lbHint;
            int x = 1 + this.leftPadding;
            location = this.mainTextbox.Location;
            int y = location.Y;
            Point point = new Point(x, y);
            lbHint.Location = point;
          }
          if (this.Text.Length > 0)
            this.lbHint.SendToBack();
          this.lbHint.Width = (int) this.CreateGraphics().MeasureString(this.lbHint.Text, this.lbHint.Font).Width;
          if (this.lbHint.Width > this.mainTextbox.Width)
            this.lbHint.Width = this.mainTextbox.Width;
        }
        if (this.style == MaterialTextfield.TextfieldStyle.None)
        {
          if (this.Contains((Control) this.lbFloating))
            this.Controls.Remove((Control) this.lbFloating);
          this.lbHint.Font = this.Font;
          this.lbHint.ForeColor = Color.Silver;
          if (!this.multiline)
          {
            TextBox lbHint = this.lbHint;
            int x = 1 + this.leftPadding;
            location = this.mainTextbox.Location;
            int y = location.Y;
            Point point = new Point(x, y);
            lbHint.Location = point;
          }
          if (this.Text.Length > 0)
            this.lbHint.SendToBack();
        }
        if (this.style != MaterialTextfield.TextfieldStyle.HintAsFloatingLabel)
          return;
        if (this.Contains((Control) this.lbFloating))
          this.Controls.Remove((Control) this.lbFloating);
        if (this.Text.Length > 0)
        {
          this.hintLocation = 0;
          this.lbHint.ForeColor = Color.Gray;
          this.lbHint.Font = this.floatingLabelFont;
          this.lbHint.Location = new Point(this.fixOnMultilin + this.leftPadding, 0);
          this.lbHint.Width = (int) this.CreateGraphics().MeasureString(this.lbHint.Text, this.lbHint.Font).Width;
          if (this.lbHint.Width > this.mainTextbox.Width)
            this.lbHint.Width = this.mainTextbox.Width;
        }
        else
        {
          this.hintLocation = this.topPadding;
          TextBox lbHint = this.lbHint;
          int x = this.fixOnMultilin + this.leftPadding;
          location = this.mainTextbox.Location;
          int y = location.Y;
          Point point = new Point(x, y);
          lbHint.Location = point;
          this.lbHint.BringToFront();
        }
      }
    }

    [Category("Appearance Material")]
    [Description("Textfield color when getting focus.")]
    public Color PrimaryColor
    {
      get => this.primaryColor;
      set
      {
        this.primaryColor = value;
        this.Invalidate(true);
        if (this.style == MaterialTextfield.TextfieldStyle.HintAsFloatingLabel && this.lbHint.ForeColor != Color.Silver && !this.DesignMode)
        {
          this.lbHint.ForeColor = this.primaryColor;
        }
        else
        {
          if (this.style != MaterialTextfield.TextfieldStyle.HasFloatingLabel || !(this.lbFloating.ForeColor != Color.Gray) || this.DesignMode)
            return;
          this.lbFloating.ForeColor = this.primaryColor;
        }
      }
    }

    [Category("Appearance Material")]
    [Description("Textfield backcolor scale with parent back color.")]
    public bool AutoScaleColor
    {
      get => this.autoCol;
      set
      {
        this.autoCol = value;
        this.Invalidate(true);
      }
    }

    [Category("Appearance Material")]
    [Description("Hide or show the text caret.")]
    public bool ShowCaret
    {
      get => !this.hideCaret;
      set
      {
        this.hideCaret = !value;
        this.Focus();
      }
    }

    [Category("Behavior")]
    public int MaxLength
    {
      get => this.mainTextbox.MaxLength;
      set
      {
        this.mainTextbox.MaxLength = value;
        this.Invalidate(true);
      }
    }

    [Category("Behavior")]
    public char PasswordChar
    {
      get => this.mainTextbox.PasswordChar;
      set => this.mainTextbox.PasswordChar = value;
    }

    [Category("Behavior")]
    public bool ReadOnly
    {
      get => this.mainTextbox.ReadOnly;
      set => this.mainTextbox.ReadOnly = value;
    }

    [Category("Behavior")]
    public bool HideSelection
    {
      get => this.mainTextbox.HideSelection;
      set => this.mainTextbox.HideSelection = value;
    }

    public bool ShortcutsEnable
    {
      get => this.mainTextbox.ShortcutsEnabled;
      set => this.mainTextbox.ShortcutsEnabled = value;
    }

    [Category("Behavior")]
    public bool Multiline
    {
      get => this.multiline;
      set
      {
        this.multiline = value;
        this.mainTextbox.Multiline = value;
        if (this.multiline)
        {
          this.fixOnMultilin = this.topPadding / 4 + 1;
          this.lbHint.Location = new Point(this.fixOnMultilin + this.leftPadding, this.mainTextbox.Location.Y);
          this.lbFloating.Location = new Point(this.fixOnMultilin + this.leftPadding, 0);
        }
        else
        {
          this.fixOnMultilin = 0;
          this.lbHint.Location = new Point(this.fixOnMultilin + this.leftPadding, this.mainTextbox.Location.Y);
          this.lbFloating.Location = new Point(1 + this.leftPadding, 0);
          this.Height = this.mainTextbox.Height + this.LINE_SPACE + this.topPadding;
          this.mainTextbox.Location = new Point(this.leftPadding, this.topPadding);
        }
        this.Invalidate(true);
      }
    }

    [Category("Behavior")]
    public bool UseSystemPasswordChar
    {
      get => this.passChar;
      set
      {
        this.passChar = value;
        this.mainTextbox.UseSystemPasswordChar = value;
        this.Invalidate(true);
      }
    }

    public MouseState MouseState { get; set; }

    public MaterialTextfield()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.DoubleBuffered = true;
      this.Font = new Font("Segoe UI", 11f, FontStyle.Regular);
      this.BackColor = Color.White;
      this.incSize = this.Width / 32;
      this.incFontSize = (float) ((double) this.Font.Size * 0.25 / 8.0);
      this.firstDot = this.Width / 2;
      this.middleDot = this.firstDot;
      this.lastDot = this.firstDot;
      this.floatingLabelFont = new Font(this.Font.FontFamily, this.Font.Size * 0.75f, this.Font.Style);
      this.topPadding = (int) this.floatingLabelFont.Size * 2;
      this.Size = new Size(200, (int) this.Font.Size * 2 + this.LINE_SPACE + this.topPadding);
      this.OnCreate();
      this.animationDirector.Tick += new EventHandler(this.OnAnimate);
      this.MouseState = MouseState.OUT;
      this.Invalidate(true);
    }

    private void OnAnimate(object sender, EventArgs e)
    {
      if (this.IsDisposed)
      {
        this.animationDirector.Stop();
      }
      else
      {
        if (this.mainTextbox.Focused)
        {
          if (this.firstDot > this.leftPadding + this.fixOnMultilin + this.incSize || this.firstDot > 0 && this.textFieldType == BoxType.Filled)
          {
            if (this.style == MaterialTextfield.TextfieldStyle.HintAsFloatingLabel)
            {
              if (this.hintLocation >= 2)
                this.hintLocation -= this.incLocation;
              if ((double) this.lbHint.Font.Size - (double) this.incSize > (double) this.floatingLabelFont.Size)
                this.lbHint.Font = new Font(this.Font.FontFamily, this.lbHint.Font.Size - this.incFontSize, this.Font.Style);
              else
                this.lbHint.Font = this.floatingLabelFont;
              this.lbHint.Width = (int) this.CreateGraphics().MeasureString(this.lbHint.Text, this.lbHint.Font).Width;
              if (this.lbHint.Width > this.mainTextbox.Width)
                this.lbHint.Width = this.mainTextbox.Width;
            }
            this.firstDot -= this.incSize;
            this.lastDot += this.incSize;
          }
          else
          {
            this.firstDot = this.textFieldType == BoxType.Normal ? this.leftPadding + this.fixOnMultilin - 2 : (this.textFieldType == BoxType.Filled ? 0 : this.fixOnMultilin - 2);
            this.lastDot = this.textFieldType == BoxType.Normal ? this.Width - this.fixOnMultilin * 2 - this.leftPadding : (this.textFieldType == BoxType.Filled ? this.Width : this.Width - this.fixOnMultilin * 2 + 5);
            this.animationDirector.Stop();
          }
        }
        else if (this.firstDot < this.middleDot)
        {
          if (this.style == MaterialTextfield.TextfieldStyle.HintAsFloatingLabel && this.Text.Length == 0)
          {
            if (this.hintLocation < this.topPadding)
              this.hintLocation += this.incLocation;
            if ((double) this.lbHint.Font.Size + (double) this.incFontSize < (double) this.Font.Size)
              this.lbHint.Font = new Font(this.Font.FontFamily, this.lbHint.Font.Size + this.incFontSize, this.Font.Style);
            else
              this.lbHint.Font = this.Font;
            this.lbHint.Width = (int) this.CreateGraphics().MeasureString(this.lbHint.Text, this.lbHint.Font).Width;
            if (this.lbHint.Width > this.mainTextbox.Width)
              this.lbHint.Width = this.mainTextbox.Width;
          }
          this.firstDot += this.incSize;
          this.lastDot -= this.incSize;
        }
        else
        {
          this.firstDot = this.middleDot;
          this.lastDot = this.middleDot;
          this.animationDirector.Stop();
        }
        this.Invalidate(true);
      }
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      Graphics graphics1 = e.Graphics;
      graphics1.SmoothingMode = SmoothingMode.HighQuality;
      Pen pen = new Pen((Brush) new SolidBrush(Color.FromArgb(180, Color.Gray)), 1.5f);
      GraphicsPath path = new GraphicsPath();
      float[] numArray = new float[2]{ 4f, 2f };
      pen.DashPattern = numArray;
      if (this.Parent is MaterialCard && this.autoCol)
        this.BackColor = ((MaterialCard) this.Parent).CardColor;
      else if (this.autoCol && this.BackColor != this.Parent.BackColor)
        this.BackColor = this.Parent.BackColor;
      if (!this.Focused)
      {
        Point location;
        if (!this.Enabled)
        {
          switch (this.textFieldType)
          {
            case BoxType.Normal:
              graphics1.DrawLine(pen, this.fixOnMultilin - 2 + this.leftPadding, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding, this.Width - this.fixOnMultilin * 2 - this.leftPadding, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding);
              break;
            case BoxType.Outlined:
              path = GraphicHelper.GetRoundedRectangle(2f, (float) (this.topPadding / 2), (float) (this.Width - 4), (float) (this.Height - this.topPadding / 2 - (this.handleError ? this.topPadding : 0) - 2), 4);
              graphics1.DrawPath(pen, path);
              break;
            case BoxType.Filled:
              path = GraphicHelper.GetRoundedRectangle(0.0f, 0.0f, (float) this.Width, (float) (this.Height - 2), 4);
              graphics1.FillPath((Brush) new SolidBrush(Color.WhiteSmoke), path);
              graphics1.DrawLine(pen, 0, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding, this.Width, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding);
              if (this.handleError)
              {
                Color color = !(this.Parent is MaterialCard) ? this.Parent.BackColor : ((MaterialCard) this.Parent).CardColor;
                graphics1.FillRectangle((Brush) new SolidBrush(color), -1, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding + 1, this.Width + 1, this.Height);
                break;
              }
              break;
          }
        }
        else
        {
          switch (this.textFieldType)
          {
            case BoxType.Normal:
              if (!this.mainTextbox.Focused || this.animationDirector.Enabled)
              {
                graphics1.DrawLine(new Pen((Brush) new SolidBrush(this.hasError ? Color.Red : (this.MouseState == MouseState.OUT ? Color.Gray : this.primaryColor)), this.MouseState == MouseState.OUT ? 1.3f : 1.6f), this.fixOnMultilin - 2 + this.leftPadding, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding, this.Width - this.fixOnMultilin * 2 - this.leftPadding, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding);
                break;
              }
              break;
            case BoxType.Outlined:
              path = GraphicHelper.GetRoundedRectangle(2f, (float) (this.topPadding / 2), (float) (this.Width - 4), (float) (this.Height - this.topPadding / 2 - (this.handleError ? this.topPadding : 0) - 2), 4);
              if (this.mainTextbox.Focused)
              {
                graphics1.DrawPath(new Pen(this.hasError ? Color.Red : this.primaryColor, 2.2f), path);
                break;
              }
              graphics1.DrawPath(new Pen(this.hasError ? Color.Red : Color.DimGray, this.MouseState == MouseState.OUT ? 1.3f : 1.6f), path);
              break;
            case BoxType.Filled:
              path = GraphicHelper.GetRoundedRectangle(0.0f, 0.0f, (float) this.Width, (float) (this.Height - 2), 4);
              graphics1.FillPath((Brush) new SolidBrush(Color.FromArgb(this.Focused ? (int) byte.MaxValue : 200, Color.WhiteSmoke)), path);
              if (!this.mainTextbox.Focused || this.animationDirector.Enabled)
                graphics1.DrawLine(new Pen((Brush) new SolidBrush(this.hasError ? Color.Red : Color.Gray), this.MouseState == MouseState.OUT ? 1.3f : 1.6f), 0, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding, this.Width, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding);
              if (this.handleError)
              {
                Color color = !(this.Parent is MaterialCard) ? this.Parent.BackColor : ((MaterialCard) this.Parent).CardColor;
                graphics1.FillRectangle((Brush) new SolidBrush(color), -1, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding + 1, this.Width + 1, this.Height);
                break;
              }
              break;
          }
          if (this.hasError)
          {
            Graphics graphics2 = graphics1;
            string errorText = this.errorText;
            Font floatingLabelFont = this.floatingLabelFont;
            SolidBrush solidBrush = new SolidBrush(Color.Red);
            location = this.mainTextbox.Location;
            RectangleF layoutRectangle = (RectangleF) new Rectangle(location.X, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding + 1, this.Width, this.Height);
            StringFormat textAglignment = this.textAglignment;
            graphics2.DrawString(errorText, floatingLabelFont, (Brush) solidBrush, layoutRectangle, textAglignment);
          }
        }
        if ((!this.hasError || !this.Enabled) && !string.IsNullOrEmpty(this.helperText))
        {
          Graphics graphics3 = graphics1;
          string helperText = this.helperText;
          Font floatingLabelFont = this.floatingLabelFont;
          SolidBrush solidBrush = new SolidBrush(Color.Gray);
          location = this.mainTextbox.Location;
          RectangleF layoutRectangle = (RectangleF) new Rectangle(location.X, this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding + 1, this.Width, this.Height);
          StringFormat textAglignment = this.textAglignment;
          graphics3.DrawString(helperText, floatingLabelFont, (Brush) solidBrush, layoutRectangle, textAglignment);
        }
        if (this.countText)
        {
          Graphics graphics4 = graphics1;
          int num1 = this.mainTextbox.Text.Length;
          string str1 = num1.ToString();
          num1 = this.mainTextbox.MaxLength;
          string str2 = num1.ToString();
          string s = string.Format("{0}/{1}", (object) str1, (object) str2);
          Font floatingLabelFont = this.floatingLabelFont;
          SolidBrush solidBrush = new SolidBrush(!this.hasError || !this.Enabled ? Color.Gray : Color.Red);
          location = this.mainTextbox.Location;
          int x = location.X - this.fixOnMultilin - 1;
          int y = this.mainTextbox.Height + this.LINE_SPACE - 2 + this.topPadding + 1;
          int width1 = this.Width;
          location = this.mainTextbox.Location;
          int num2 = location.X + this.fixOnMultilin + this.leftPadding;
          int width2 = width1 - num2;
          int height = this.Height;
          RectangleF layoutRectangle = (RectangleF) new Rectangle(x, y, width2, height);
          StringFormat countingTextAglignment = this.countingTextAglignment;
          graphics4.DrawString(s, floatingLabelFont, (Brush) solidBrush, layoutRectangle, countingTextAglignment);
        }
      }
      if (this.textFieldType != BoxType.Outlined)
      {
        graphics1.DrawLine(new Pen((Brush) new SolidBrush(this.hasError ? Color.Red : this.primaryColor), 2.6f), this.firstDot, this.mainTextbox.Height + this.LINE_SPACE - 3 + this.topPadding, this.middleDot, this.mainTextbox.Height + this.LINE_SPACE - 3 + this.topPadding);
        graphics1.DrawLine(new Pen((Brush) new SolidBrush(this.hasError ? Color.Red : this.primaryColor), 2.6f), this.middleDot, this.mainTextbox.Height + this.LINE_SPACE - 3 + this.topPadding, this.lastDot, this.mainTextbox.Height + this.LINE_SPACE - 3 + this.topPadding);
      }
      if (this.style == MaterialTextfield.TextfieldStyle.HintAsFloatingLabel)
        this.lbHint.Location = new Point(this.fixOnMultilin + this.leftPadding, this.hintLocation);
      path.Dispose();
      pen.Dispose();
    }

    public void RaiseError(string errorMessage, bool setFocus = true)
    {
      if (!this.handleError)
        throw new Exception("HandleError not set to true.");
      this.errorText = errorMessage;
      if (!this.hasError)
      {
        this.hasError = true;
        if (this.style == MaterialTextfield.TextfieldStyle.HintAsFloatingLabel)
          this.lbHint.Text = string.Format("{0}*", (object) this.lbHint.Text);
        else if (this.style == MaterialTextfield.TextfieldStyle.HasFloatingLabel)
          this.lbFloating.Text = string.Format("{0}*", (object) this.lbFloating.Text);
      }
      this.Invalidate(true);
      if (((this.Focused ? 0 : (!this.mainTextbox.Focused ? 1 : 0)) & (setFocus ? 1 : 0)) != 0)
      {
        this.Focus();
      }
      else
      {
        if (setFocus)
          return;
        this.lbFloating.ForeColor = this.hasError ? Color.Red : this.primaryColor;
        if (this.style == MaterialTextfield.TextfieldStyle.HintAsFloatingLabel)
          this.lbHint.ForeColor = this.hasError ? Color.Red : this.primaryColor;
      }
    }

    public void RemoveError()
    {
      if (!this.hasError)
        return;
      this.hasError = false;
      if (this.style == MaterialTextfield.TextfieldStyle.HintAsFloatingLabel)
      {
        this.lbHint.Text = this.lbHint.Text.Replace("*", "");
        this.lbHint.ForeColor = this.mainTextbox.Focused ? (this.mainTextbox.Text.Length > 0 ? this.primaryColor : Color.Gray) : (this.mainTextbox.Text.Length > 0 ? Color.Gray : Color.Silver);
      }
      else if (this.style == MaterialTextfield.TextfieldStyle.HasFloatingLabel)
      {
        this.lbFloating.Text = this.lbFloating.Text.Replace("*", "");
        this.lbFloating.ForeColor = this.mainTextbox.Focused ? this.primaryColor : Color.Gray;
      }
      this.Invalidate(true);
    }

    private void OnCreate()
    {
      this.mainTextbox.ForeColor = this.ForeColor;
      this.mainTextbox.Location = new Point(this.leftPadding, this.topPadding);
      this.mainTextbox.Width = this.Width - this.leftPadding * 2;
      this.mainTextbox.BorderStyle = BorderStyle.None;
      this.mainTextbox.Text = this.Text;
      this.mainTextbox.SizeChanged += new EventHandler(this.mainTextbox_SizeChanged);
      this.mainTextbox.GotFocus += new EventHandler(this.mainTextbox_GotFocus);
      this.mainTextbox.LostFocus += new EventHandler(this.mainTextbox_LostFocus);
      this.mainTextbox.KeyDown += new KeyEventHandler(this.mainTextbox_KeyDown);
      this.mainTextbox.KeyPress += new KeyPressEventHandler(this.mainTextbox_KeyPress);
      this.mainTextbox.KeyUp += new KeyEventHandler(this.mainTextbox_KeyUp);
      this.mainTextbox.TextChanged += new EventHandler(this.mainTextbox_TextChanged);
      this.mainTextbox.Click += new EventHandler(this.mainTextbox_Click);
      this.mainTextbox.MouseDown += new MouseEventHandler(this.mainTextbox_MouseDown);
      this.mainTextbox.MouseUp += new MouseEventHandler(this.mainTextbox_MouseUp);
      this.mainTextbox.MouseMove += new MouseEventHandler(this.mainTextbox_MouseMove);
      this.mainTextbox.MouseEnter += new EventHandler(this.mainTextbox_MouseEnter);
      this.mainTextbox.MouseHover += new EventHandler(this.mainTextbox_MouseHover);
      this.mainTextbox.MouseLeave += new EventHandler(this.mainTextbox_MouseLeave);
      this.mainTextbox.ContextMenuStrip = this.contextMenuStrip1;
      this.lbHint.Text = "Hint Text";
      this.lbHint.Width = (int) this.CreateGraphics().MeasureString(this.lbHint.Text, this.lbHint.Font).Width;
      this.lbHint.Multiline = false;
      this.lbHint.ShortcutsEnabled = false;
      this.lbHint.TabStop = false;
      this.lbHint.BackColor = this.BackColor;
      this.lbHint.BorderStyle = BorderStyle.None;
      this.lbHint.Click += new EventHandler(this.lbHint_Click);
      this.lbHint.MouseMove += new MouseEventHandler(this.lbHint_MouseMove);
      this.lbHint.MouseDown += new MouseEventHandler(this.lbHint_MouseDown);
      this.lbHint.MouseEnter += new EventHandler(this.LbHint_MouseEnter);
      this.lbHint.MouseLeave += new EventHandler(this.LbHint_MouseLeave);
      this.lbHint.ReadOnly = true;
      this.lbHint.ForeColor = Color.Silver;
      this.lbHint.GotFocus += new EventHandler(this.lbHint_GotFocus);
      this.lbHint.Location = new Point(1 + this.leftPadding, this.mainTextbox.Location.Y);
      this.lbFloating.Text = "FloatingLabel";
      this.lbFloating.ShortcutsEnabled = false;
      this.lbFloating.TabStop = false;
      this.lbFloating.BackColor = this.BackColor;
      this.lbFloating.BorderStyle = BorderStyle.None;
      this.lbFloating.Font = this.floatingLabelFont;
      this.lbFloating.ReadOnly = true;
      this.lbFloating.GotFocus += new EventHandler(this.lbFloating_GotFocus);
      this.lbFloating.Click += new EventHandler(this.LbFloating_Click);
      this.lbFloating.MouseMove += new MouseEventHandler(this.lbFloating_MouseMove);
      this.lbFloating.ForeColor = Color.Gray;
      this.lbFloating.Location = new Point(1 + this.leftPadding, 0);
      this.lbFloating.Width = (int) this.CreateGraphics().MeasureString(this.lbFloating.Text, this.lbFloating.Font).Width;
      this.Controls.Add((Control) this.lbHint);
      this.Controls.Add((Control) this.mainTextbox);
      this.contextMenuStrip1.BackColor = Color.White;
      this.contextMenuStrip1.AutoSize = false;
      this.contextMenuStrip1.Font = new Font("Segoe UI Semibold", 8.5f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.contextMenuStrip1.Items.AddRange(new ToolStripItem[7]
      {
        (ToolStripItem) this.toolStripMenuItem2,
        (ToolStripItem) this.toolStripSeparator2,
        (ToolStripItem) this.copyToolStripMenuItem,
        (ToolStripItem) this.pasteToolStripMenuItem,
        (ToolStripItem) this.cutToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator1,
        (ToolStripItem) this.toolStripMenuItem1
      });
      this.contextMenuStrip1.Name = "contextMenuStrip1";
      this.contextMenuStrip1.ShowImageMargin = false;
      this.contextMenuStrip1.Size = new Size(110, 130);
      this.copyToolStripMenuItem.Name = "copyToolStripMenuItem";
      this.copyToolStripMenuItem.Size = new Size(123, 22);
      this.copyToolStripMenuItem.Text = "   Copy";
      this.copyToolStripMenuItem.Click += new EventHandler(this.copyToolStripMenuItem_Click);
      this.pasteToolStripMenuItem.Name = "pasteToolStripMenuItem";
      this.pasteToolStripMenuItem.Size = new Size(182, 22);
      this.pasteToolStripMenuItem.Text = "   Paste";
      this.pasteToolStripMenuItem.Click += new EventHandler(this.copyToolStripMenuItem_Click);
      this.cutToolStripMenuItem.Name = "cutToolStripMenuItem";
      this.cutToolStripMenuItem.Size = new Size(182, 22);
      this.cutToolStripMenuItem.Text = "   Cut";
      this.cutToolStripMenuItem.Click += new EventHandler(this.copyToolStripMenuItem_Click);
      this.toolStripSeparator1.Name = "toolStripSeparator1";
      this.toolStripSeparator1.Size = new Size(179, 6);
      this.toolStripMenuItem1.Name = "toolStripMenuItem1";
      this.toolStripMenuItem1.Size = new Size(107, 22);
      this.toolStripMenuItem1.Text = "   Delete";
      this.toolStripMenuItem1.Click += new EventHandler(this.copyToolStripMenuItem_Click);
      this.toolStripSeparator2.Name = "toolStripSeparator2";
      this.toolStripSeparator2.Size = new Size(120, 6);
      this.toolStripMenuItem2.Name = "toolStripMenuItem2";
      this.toolStripMenuItem2.Size = new Size((int) sbyte.MaxValue, 22);
      this.toolStripMenuItem2.Text = "   Select All";
      this.toolStripMenuItem2.Click += new EventHandler(this.copyToolStripMenuItem_Click);
    }

    private void LbHint_MouseLeave(object sender, EventArgs e)
    {
      this.MouseState = MouseState.OUT;
      this.Invalidate(true);
    }

    private void LbHint_MouseEnter(object sender, EventArgs e)
    {
      this.MouseState = MouseState.HOVER;
      this.Invalidate(true);
    }

    protected override void OnEnabledChanged(EventArgs e)
    {
      this.lbHint.Enabled = this.lbFloating.Enabled = this.Enabled;
      base.OnEnabledChanged(e);
    }

    protected override void OnFontChanged(EventArgs e)
    {
      base.OnFontChanged(e);
      this.floatingLabelFont = new Font(this.Font.FontFamily, this.Font.Size * 0.75f, this.Font.Style);
      this.incFontSize = (float) ((double) this.Font.Size * 0.25 / 8.0);
      this.lbFloating.Font = this.floatingLabelFont;
      this.lbHint.Font = this.mainTextbox.Text.Length == 0 ? this.Font : this.floatingLabelFont;
      this.fixOnMultilin = (int) this.floatingLabelFont.Size / 2 + 1;
      this.topPadding = (int) this.floatingLabelFont.Size * 2;
      this.incLocation = this.topPadding / 6;
      this.LINE_SPACE = this.topPadding / 2;
      if (this.Text.Length == 0)
        this.hintLocation = this.topPadding;
      if (this.multiline)
      {
        this.lbHint.Location = new Point(this.fixOnMultilin + this.leftPadding, this.mainTextbox.Location.Y);
        this.lbFloating.Location = new Point(this.fixOnMultilin + this.leftPadding, 0);
      }
      else
      {
        this.lbHint.Location = new Point(1 + this.leftPadding, this.mainTextbox.Location.Y);
        this.lbFloating.Location = new Point(1 + this.leftPadding, 0);
        this.Height = this.mainTextbox.Height + this.LINE_SPACE + this.topPadding;
        this.mainTextbox.Width = this.Width - this.leftPadding * 2;
        this.mainTextbox.Location = new Point(this.leftPadding, this.topPadding);
      }
      this.lbFloating.Width = (int) this.CreateGraphics().MeasureString(this.lbFloating.Text, this.lbFloating.Font).Width;
      this.lbHint.Width = (int) this.CreateGraphics().MeasureString(this.lbHint.Text, this.lbHint.Font).Width;
      if (this.lbHint.Width > this.mainTextbox.Width)
        this.lbHint.Width = this.mainTextbox.Width;
      this.Invalidate(true);
    }

    protected override void OnGotFocus(EventArgs e)
    {
      base.OnGotFocus(e);
      if (this.mainTextbox.Focused)
        return;
      this.mainTextbox.Focus();
    }

    protected override void OnTextChanged(EventArgs e)
    {
      base.OnTextChanged(e);
      if (this.style == MaterialTextfield.TextfieldStyle.HintAsFloatingLabel && !this.Focused)
      {
        if (this.Text.Length > 0)
        {
          if (!this.mainTextbox.Focused)
            this.lbHint.ForeColor = Color.Gray;
          this.lbHint.Font = this.floatingLabelFont;
          this.hintLocation = 0;
          this.lbHint.Location = new Point(this.fixOnMultilin + this.leftPadding, 0);
        }
        else if (!this.mainTextbox.Focused)
        {
          this.lbHint.ForeColor = Color.Silver;
          this.lbHint.Location = new Point(this.fixOnMultilin + this.leftPadding, this.mainTextbox.Location.Y);
          if (this.Text.Length == 0)
            this.hintLocation = this.topPadding;
          this.lbHint.Font = this.Font;
          this.lbHint.BringToFront();
        }
      }
      this.mainTextbox.Text = this.Text;
      if (this.Text.Length > 0 && this.style != MaterialTextfield.TextfieldStyle.HintAsFloatingLabel)
      {
        this.lbHint.SendToBack();
      }
      else
      {
        this.lbHint.Width = (int) this.CreateGraphics().MeasureString(this.lbHint.Text, this.lbHint.Font).Width;
        if (this.lbHint.Width > this.mainTextbox.Width)
          this.lbHint.Width = this.mainTextbox.Width;
        this.lbHint.BringToFront();
      }
      this.Invalidate(true);
    }

    protected override void OnBackColorChanged(EventArgs e)
    {
      base.OnBackColorChanged(e);
      if (this.textFieldType == BoxType.Filled)
        return;
      this.mainTextbox.BackColor = this.BackColor;
      this.lbHint.BackColor = this.BackColor;
      this.lbFloating.BackColor = this.BackColor;
    }

    protected override void OnForeColorChanged(EventArgs e)
    {
      base.OnForeColorChanged(e);
      this.mainTextbox.ForeColor = this.ForeColor;
    }

    protected override void OnSizeChanged(EventArgs e)
    {
      this.incSize = this.Width / 32;
      this.firstDot = this.Width / 2;
      this.middleDot = this.firstDot;
      this.lastDot = this.firstDot;
      base.OnSizeChanged(e);
      if (!this.multiline)
        this.Height = this.mainTextbox.Height + this.LINE_SPACE + this.topPadding + (this.handleError ? this.topPadding : 0);
      else
        this.mainTextbox.Height = this.Height - this.LINE_SPACE - this.topPadding - (this.handleError ? this.topPadding : 0);
      this.mainTextbox.Width = this.Width - this.leftPadding * 2;
      if (this.lbHint.Width <= this.mainTextbox.Width)
        return;
      this.lbHint.Width = this.mainTextbox.Width;
    }

    private void mainTextbox_GotFocus(object sender, EventArgs e)
    {
      this.lbFloating.ForeColor = this.hasError ? Color.Red : this.primaryColor;
      if (this.style == MaterialTextfield.TextfieldStyle.HintAsFloatingLabel)
        this.lbHint.ForeColor = this.hasError ? Color.Red : this.primaryColor;
      this.firstDot -= this.incSize * 4;
      this.lastDot += this.incSize * 4;
      this.animationDirector.Start();
      if (this.hideCaret)
        MaterialTextfield.HideCaret(this.mainTextbox.Handle);
      EventHandler gotFocus = this.GotFocus;
      if (gotFocus == null)
        return;
      gotFocus(sender, e);
    }

    private void mainTextbox_SizeChanged(object sender, EventArgs e)
    {
    }

    private void mainTextbox_Click(object sender, EventArgs e)
    {
      EventHandler click = this.Click;
      if (click == null)
        return;
      click(sender, e);
    }

    private void mainTextbox_TextChanged(object sender, EventArgs e) => this.Text = this.mainTextbox.Text;

    private void mainTextbox_KeyDown(object sender, KeyEventArgs e)
    {
      KeyEventHandler keyDown = this.KeyDown;
      if (keyDown == null)
        return;
      keyDown(sender, e);
    }

    private void mainTextbox_KeyPress(object sender, KeyPressEventArgs e)
    {
      KeyPressEventHandler keyPress = this.KeyPress;
      if (keyPress == null)
        return;
      keyPress(sender, e);
    }

    private void mainTextbox_KeyUp(object sender, KeyEventArgs e)
    {
      KeyEventHandler keyUp = this.KeyUp;
      if (keyUp == null)
        return;
      keyUp(sender, e);
    }

    private void mainTextbox_KeyPress(object sender, KeyEventArgs e)
    {
      KeyEventHandler keyUp = this.KeyUp;
      if (keyUp == null)
        return;
      keyUp(sender, e);
    }

    private void mainTextbox_LostFocus(object sender, EventArgs e)
    {
      if (!this.lbHint.Focused)
        this.animationDirector.Start();
      this.lbHint.ForeColor = !this.hasError || this.mainTextbox.Text.Length == 0 ? (this.mainTextbox.Text.Length == 0 ? Color.Silver : Color.Gray) : Color.Red;
      this.lbFloating.ForeColor = this.hasError ? Color.Red : Color.Gray;
      EventHandler lostFocus = this.LostFocus;
      if (lostFocus == null)
        return;
      lostFocus(sender, e);
    }

    private void mainTextbox_MouseDown(object sender, MouseEventArgs e)
    {
      MouseEventHandler mouseDown = this.MouseDown;
      if (mouseDown == null)
        return;
      mouseDown(sender, e);
    }

    private void mainTextbox_MouseUp(object sender, MouseEventArgs e)
    {
      MouseEventHandler mouseUp = this.MouseUp;
      if (mouseUp == null)
        return;
      mouseUp(sender, e);
    }

    private void mainTextbox_MouseMove(object sender, MouseEventArgs e)
    {
      MouseEventHandler mouseMove = this.MouseMove;
      if (mouseMove == null)
        return;
      mouseMove(sender, e);
    }

    private void mainTextbox_MouseLeave(object sender, EventArgs e)
    {
      this.MouseState = MouseState.OUT;
      this.Invalidate(true);
      EventHandler mouseLeave = this.MouseLeave;
      if (mouseLeave == null)
        return;
      mouseLeave(sender, e);
    }

    private void mainTextbox_MouseHover(object sender, EventArgs e)
    {
      EventHandler mouseHover = this.MouseHover;
      if (mouseHover == null)
        return;
      mouseHover(sender, e);
    }

    private void mainTextbox_MouseEnter(object sender, EventArgs e)
    {
      this.MouseState = MouseState.HOVER;
      this.Invalidate(true);
      EventHandler mouseEnter = this.MouseEnter;
      if (mouseEnter == null)
        return;
      mouseEnter(sender, e);
    }

    private void copyToolStripMenuItem_Click(object sender, EventArgs e)
    {
      string name = ((ToolStripItem) sender).Name;
      if (!(name == "copyToolStripMenuItem"))
      {
        if (!(name == "pasteToolStripMenuItem"))
        {
          if (!(name == "cutToolStripMenuItem"))
          {
            if (!(name == "toolStripMenuItem2"))
            {
              if (!(name == "toolStripMenuItem1"))
                return;
              int selectionStart = this.mainTextbox.SelectionStart;
              this.mainTextbox.Text = this.mainTextbox.Text.Remove(this.mainTextbox.SelectionStart, this.mainTextbox.SelectionLength);
              this.mainTextbox.SelectionStart = selectionStart;
            }
            else
            {
              this.mainTextbox.Focus();
              this.mainTextbox.SelectAll();
            }
          }
          else
            this.mainTextbox.Cut();
        }
        else
        {
          this.mainTextbox.AppendText(Clipboard.GetText());
          this.mainTextbox.SelectionStart += Clipboard.GetText().Length;
        }
      }
      else
        this.mainTextbox.Copy();
    }

    private void lbHint_MouseDown(object sender, MouseEventArgs e)
    {
      if (e.Button != MouseButtons.Right)
        return;
      this.contextMenuStrip1.Show((Control) this.mainTextbox, new Point(e.X, e.Y));
      this.mainTextbox.Focus();
    }

    private void lbFloating_MouseMove(object sender, MouseEventArgs e)
    {
      if (!this.lbFloating.Focused || this.mainTextbox.Focused)
        return;
      this.mainTextbox.Focus();
    }

    private void LbFloating_Click(object sender, EventArgs e)
    {
      if (this.mainTextbox.Focused)
        return;
      this.mainTextbox.Focus();
    }

    private void lbFloating_GotFocus(object sender, EventArgs e) => MaterialTextfield.HideCaret(this.lbFloating.Handle);

    private void lbHint_MouseMove(object sender, MouseEventArgs e)
    {
      if (!this.lbHint.Focused || this.mainTextbox.Focused)
        return;
      this.mainTextbox.Focus();
    }

    private void lbHint_GotFocus(object sender, EventArgs e) => MaterialTextfield.HideCaret(this.lbHint.Handle);

    private void lbHint_Click(object sender, EventArgs e)
    {
      if (this.mainTextbox.Focused)
        return;
      this.mainTextbox.Focus();
    }

    public void Undo() => this.mainTextbox.Undo();

    public void Clear() => this.mainTextbox.Clear();

    public void ClearUndo() => this.mainTextbox.ClearUndo();

    public void AppendText(string str) => this.mainTextbox.AppendText(str);

    public void Cut() => this.mainTextbox.Cut();

    public void Copy() => this.mainTextbox.Copy();

    public void DeselectAll() => this.mainTextbox.DeselectAll();

    public void ScrollToCaret() => this.mainTextbox.ScrollToCaret();

    public void Select(int start, int length) => this.mainTextbox.Select(start, length);

    public void SelectAll() => this.mainTextbox.SelectAll();

    public new void ResetText() => this.mainTextbox.ResetText();

    public enum TextfieldStyle
    {
      None,
      HasFloatingLabel,
      HintAsFloatingLabel,
    }
  }
}
