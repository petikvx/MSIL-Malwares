// Decompiled with JetBrains decompiler
// Type: 7VW5mMV.SXSzpM0
// Assembly: rIHK739, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: DCC06416-0005-44FB-A994-2D27682899C4
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-5d65c8f014ae86140156310feb48e80c8d76bb6b8eb7eaf6f0a843d5bb38d6b4.exe

using B4kfmqX;
using FGSORDf;
using Newtonsoft.Json;
using System;
using System.Reflection;

namespace \u0037VW5mMV
{
  public class SXSzpM0<T> : \u0030XUeiAT where T : class
  {
    public SXSzpM0(string discriminatorField) => this.CQUQury = discriminatorField != null ? discriminatorField : throw new ArgumentNullException(nameof (discriminatorField));

    public virtual bool f993YsV(Type _param1) => typeof (T).GetTypeInfo().IsAssignableFrom(_param1.GetTypeInfo());

    public virtual bool ZJuW4wn => false;

    public virtual object PemRQ0m(
      JsonReader eimmFZI,
      Type GCpMAKQ,
      object ZTg23hd,
      JsonSerializer dDz6V5N)
    {
      throw new NotSupportedException();
    }

    public virtual void \u0037GruU5t(JsonWriter Jq1kOWf, object M87mJbX, JsonSerializer tgfPBM0)
    {
      if (Jq1kOWf == null)
        throw new ArgumentNullException("writer");
      if (M87mJbX == null)
        throw new ArgumentNullException("value");
      if (tgfPBM0 == null)
        throw new ArgumentNullException("serializer");
      string str = M87mJbX.GetType().Name;
      string id1 = ((JsonContainerAttribute) M87mJbX.GetType().GetTypeInfo().BaseType.GetTypeInfo().GetCustomAttribute<JsonObjectAttribute>())?.Id;
      string id2 = ((JsonContainerAttribute) M87mJbX.GetType().GetTypeInfo().GetCustomAttribute<JsonObjectAttribute>())?.Id;
      if (!string.IsNullOrEmpty(id2) && id2 != id1)
        str = id2;
      Jq1kOWf.WriteStartObject();
      Jq1kOWf.WritePropertyName(this.CQUQury);
      Jq1kOWf.WriteValue(str);
      M2AxVoZ.niiWSlV(Jq1kOWf, M87mJbX, tgfPBM0);
      Jq1kOWf.WriteEndObject();
    }
  }
}
