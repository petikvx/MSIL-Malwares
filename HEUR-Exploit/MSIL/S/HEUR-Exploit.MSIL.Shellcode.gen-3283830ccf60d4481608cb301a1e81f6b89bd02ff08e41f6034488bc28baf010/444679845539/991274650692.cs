// Decompiled with JetBrains decompiler
// Type: 444679845539.991274650692
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003048520867406;
using \u003053028810657;
using \u003066013932002;
using \u003208825527781;
using \u003226094756440;
using \u003277493558513;
using \u003309780703023;
using \u003323646223256;
using \u003384276752884;
using \u003444679845539;
using \u003446220322523;
using \u003510390216063;
using \u003587178387855;
using \u003587801749628;
using \u003603600525092;
using \u003619244622274;
using \u003628951805400;
using \u003683818316159;
using \u003718312010712;
using \u003830680403346;
using \u003867191888856;
using \u003948482278845;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Xml;
using System.Xml.Linq;

namespace \u003444679845539
{
  public class \u003991274650692 : \u003068562095717
  {
    internal static readonly List<IXmlNode> \u003176806170022 = new List<IXmlNode>();
    private const string \u003369852801759 = "#text";
    private const string \u003680986850709 = "#comment";
    private const string \u003703519819058 = "#cdata-section";
    private const string \u003548974883301 = "#whitespace";
    private const string \u003548204350146 = "#significant-whitespace";
    private const string \u003787112726424 = "?xml";
    private const string \u003641739006878 = "http://james.newtonking.com/projects/json";

    public string \u003275681149001 { get; set; }

    public bool \u003233754680085 { get; set; }

    public bool \u003918185969199 { get; set; }

    public virtual void \u003440018691920(
      \u003632627526011 _param1,
      object _param2,
      \u003131478599170 _param3)
    {
      IXmlNode xmlNode = this.\u003242425552941(_param2);
      XmlNamespaceManager namespaceManager = new XmlNamespaceManager((XmlNameTable) new NameTable());
      this.\u003218293225418(xmlNode, namespaceManager);
      if (!this.\u003918185969199)
        _param1.\u003038455958685();
      this.\u003628118943857(_param1, xmlNode, namespaceManager, !this.\u003918185969199);
      if (this.\u003918185969199)
        return;
      _param1.\u003908313152034();
    }

    private IXmlNode \u003242425552941(object _param1)
    {
      switch (_param1)
      {
        case XObject xobject:
          return \u003358092935157.\u003796318309279(xobject);
        case XmlNode xmlNode:
          return \u003982070129938.\u003874402840998(xmlNode);
        default:
          throw new ArgumentException("Value must be an XML object.", "value");
      }
    }

    private void \u003218293225418(IXmlNode _param1, XmlNamespaceManager _param2)
    {
      List<IXmlNode> xmlNodeList = (List<IXmlNode>) null;
      IXmlNode xmlNode1 = _param1;
      while ((xmlNode1 = xmlNode1.ParentNode) != null)
      {
        if (xmlNode1.NodeType == XmlNodeType.Element)
        {
          if (xmlNodeList == null)
            xmlNodeList = new List<IXmlNode>();
          xmlNodeList.Add(xmlNode1);
        }
      }
      if (xmlNodeList == null)
        return;
      xmlNodeList.Reverse();
      foreach (IXmlNode xmlNode2 in xmlNodeList)
      {
        _param2.PushScope();
        foreach (IXmlNode attribute in xmlNode2.Attributes)
        {
          if (attribute.NamespaceUri == "http://www.w3.org/2000/xmlns/" && attribute.LocalName != "xmlns")
            _param2.AddNamespace(attribute.LocalName, attribute.Value);
        }
      }
    }

    private string \u003097199816471(IXmlNode _param1, XmlNamespaceManager _param2)
    {
      string str = _param1.NamespaceUri == null || _param1.LocalName == "xmlns" && _param1.NamespaceUri == "http://www.w3.org/2000/xmlns/" ? (string) null : _param2.LookupPrefix(_param1.NamespaceUri);
      return !string.IsNullOrEmpty(str) ? str + ":" + XmlConvert.DecodeName(_param1.LocalName) : XmlConvert.DecodeName(_param1.LocalName);
    }

    private string \u003357572708793(IXmlNode _param1, XmlNamespaceManager _param2)
    {
      switch (_param1.NodeType)
      {
        case XmlNodeType.Element:
          return _param1.NamespaceUri == "http://james.newtonking.com/projects/json" ? "$" + _param1.LocalName : this.\u003097199816471(_param1, _param2);
        case XmlNodeType.Attribute:
          return _param1.NamespaceUri == "http://james.newtonking.com/projects/json" ? "$" + _param1.LocalName : "@" + this.\u003097199816471(_param1, _param2);
        case XmlNodeType.Text:
          return "#text";
        case XmlNodeType.CDATA:
          return "#cdata-section";
        case XmlNodeType.ProcessingInstruction:
          return "?" + this.\u003097199816471(_param1, _param2);
        case XmlNodeType.Comment:
          return "#comment";
        case XmlNodeType.DocumentType:
          return "!" + this.\u003097199816471(_param1, _param2);
        case XmlNodeType.Whitespace:
          return "#whitespace";
        case XmlNodeType.SignificantWhitespace:
          return "#significant-whitespace";
        case XmlNodeType.XmlDeclaration:
          return "?xml";
        default:
          throw new \u003479281034910("Unexpected XmlNodeType when getting node name: " + (object) _param1.NodeType);
      }
    }

    private bool \u003496586029452(IXmlNode _param1)
    {
      foreach (IXmlNode attribute in _param1.Attributes)
      {
        if (attribute.LocalName == "Array" && attribute.NamespaceUri == "http://james.newtonking.com/projects/json")
          return XmlConvert.ToBoolean(attribute.Value);
      }
      return false;
    }

    private void \u003099133414283(
      \u003632627526011 _param1,
      IXmlNode _param2,
      XmlNamespaceManager _param3,
      bool _param4)
    {
      switch (_param2.ChildNodes.Count)
      {
        case 0:
          break;
        case 1:
          string str = this.\u003357572708793(_param2.ChildNodes[0], _param3);
          this.\u003743287232714(_param1, _param3, _param4, _param2.ChildNodes, str);
          break;
        default:
          Dictionary<string, object> dictionary = (Dictionary<string, object>) null;
          string key1 = (string) null;
          for (int index1 = 0; index1 < _param2.ChildNodes.Count; ++index1)
          {
            IXmlNode childNode = _param2.ChildNodes[index1];
            string key2 = this.\u003357572708793(childNode, _param3);
            if (dictionary == null)
            {
              if (key1 == null)
                key1 = key2;
              else if (!(key2 == key1))
              {
                dictionary = new Dictionary<string, object>();
                if (index1 > 1)
                {
                  List<IXmlNode> xmlNodeList = new List<IXmlNode>(index1);
                  for (int index2 = 0; index2 < index1; ++index2)
                    xmlNodeList.Add(_param2.ChildNodes[index2]);
                  dictionary.Add(key1, (object) xmlNodeList);
                }
                else
                  dictionary.Add(key1, (object) _param2.ChildNodes[0]);
                dictionary.Add(key2, (object) childNode);
              }
            }
            else
            {
              object obj;
              if (!dictionary.TryGetValue(key2, out obj))
              {
                dictionary.Add(key2, (object) childNode);
              }
              else
              {
                if (!(obj is List<IXmlNode> xmlNodeList))
                {
                  xmlNodeList = new List<IXmlNode>()
                  {
                    (IXmlNode) obj
                  };
                  dictionary[key2] = (object) xmlNodeList;
                }
                xmlNodeList.Add(childNode);
              }
            }
          }
          if (dictionary == null)
          {
            this.\u003743287232714(_param1, _param3, _param4, _param2.ChildNodes, key1);
            break;
          }
          using (Dictionary<string, object>.Enumerator enumerator = dictionary.GetEnumerator())
          {
            while (enumerator.MoveNext())
            {
              KeyValuePair<string, object> current = enumerator.Current;
              if (current.Value is List<IXmlNode> xmlNodeList)
                this.\u003743287232714(_param1, _param3, _param4, xmlNodeList, current.Key);
              else
                this.\u003217135558425(_param1, _param3, _param4, (IXmlNode) current.Value, current.Key);
            }
            break;
          }
      }
    }

    private void \u003743287232714(
      \u003632627526011 _param1,
      XmlNamespaceManager _param2,
      bool _param3,
      List<IXmlNode> _param4,
      string _param5)
    {
      if (_param4.Count == 1 && !this.\u003496586029452(_param4[0]))
      {
        this.\u003628118943857(_param1, _param4[0], _param2, _param3);
      }
      else
      {
        if (_param3)
          _param1.\u003210934969267(_param5);
        _param1.\u003163938760233();
        for (int index = 0; index < _param4.Count; ++index)
          this.\u003628118943857(_param1, _param4[index], _param2, false);
        _param1.\u003081028007003();
      }
    }

    private void \u003217135558425(
      \u003632627526011 _param1,
      XmlNamespaceManager _param2,
      bool _param3,
      IXmlNode _param4,
      string _param5)
    {
      if (!this.\u003496586029452(_param4))
      {
        this.\u003628118943857(_param1, _param4, _param2, _param3);
      }
      else
      {
        if (_param3)
          _param1.\u003210934969267(_param5);
        _param1.\u003163938760233();
        this.\u003628118943857(_param1, _param4, _param2, false);
        _param1.\u003081028007003();
      }
    }

    private void \u003628118943857(
      \u003632627526011 _param1,
      IXmlNode _param2,
      XmlNamespaceManager _param3,
      bool _param4)
    {
      switch (_param2.NodeType)
      {
        case XmlNodeType.Element:
          if (this.\u003496586029452(_param2) && \u003991274650692.\u003119524131652(_param2) && _param2.ChildNodes.Count > 0)
          {
            this.\u003099133414283(_param1, _param2, _param3, false);
            break;
          }
          _param3.PushScope();
          foreach (IXmlNode attribute in _param2.Attributes)
          {
            if (attribute.NamespaceUri == "http://www.w3.org/2000/xmlns/")
            {
              string prefix = attribute.LocalName != "xmlns" ? XmlConvert.DecodeName(attribute.LocalName) : string.Empty;
              string uri = attribute.Value;
              _param3.AddNamespace(prefix, uri);
            }
          }
          if (_param4)
            _param1.\u003210934969267(this.\u003357572708793(_param2, _param3));
          if (!this.\u003945648529268(_param2.Attributes) && _param2.ChildNodes.Count == 1 && _param2.ChildNodes[0].NodeType == XmlNodeType.Text)
            _param1.\u003897033093575(_param2.ChildNodes[0].Value);
          else if (_param2.ChildNodes.Count == 0 && _param2.Attributes.Count == 0)
          {
            if (((IXmlElement) _param2).IsEmpty)
              _param1.\u003876065641053();
            else
              _param1.\u003897033093575(string.Empty);
          }
          else
          {
            _param1.\u003038455958685();
            for (int index = 0; index < _param2.Attributes.Count; ++index)
              this.\u003628118943857(_param1, _param2.Attributes[index], _param3, true);
            this.\u003099133414283(_param1, _param2, _param3, true);
            _param1.\u003908313152034();
          }
          _param3.PopScope();
          break;
        case XmlNodeType.Attribute:
        case XmlNodeType.Text:
        case XmlNodeType.CDATA:
        case XmlNodeType.ProcessingInstruction:
        case XmlNodeType.Whitespace:
        case XmlNodeType.SignificantWhitespace:
          if (_param2.NamespaceUri == "http://www.w3.org/2000/xmlns/" && _param2.Value == "http://james.newtonking.com/projects/json" || _param2.NamespaceUri == "http://james.newtonking.com/projects/json" && _param2.LocalName == "Array")
            break;
          if (_param4)
            _param1.\u003210934969267(this.\u003357572708793(_param2, _param3));
          _param1.\u003897033093575(_param2.Value);
          break;
        case XmlNodeType.Comment:
          if (!_param4)
            break;
          _param1.\u003709534971487(_param2.Value);
          break;
        case XmlNodeType.Document:
        case XmlNodeType.DocumentFragment:
          this.\u003099133414283(_param1, _param2, _param3, _param4);
          break;
        case XmlNodeType.DocumentType:
          IXmlDocumentType xmlDocumentType = (IXmlDocumentType) _param2;
          _param1.\u003210934969267(this.\u003357572708793(_param2, _param3));
          _param1.\u003038455958685();
          if (!string.IsNullOrEmpty(xmlDocumentType.Name))
          {
            _param1.\u003210934969267("@name");
            _param1.\u003897033093575(xmlDocumentType.Name);
          }
          if (!string.IsNullOrEmpty(xmlDocumentType.Public))
          {
            _param1.\u003210934969267("@public");
            _param1.\u003897033093575(xmlDocumentType.Public);
          }
          if (!string.IsNullOrEmpty(xmlDocumentType.System))
          {
            _param1.\u003210934969267("@system");
            _param1.\u003897033093575(xmlDocumentType.System);
          }
          if (!string.IsNullOrEmpty(xmlDocumentType.InternalSubset))
          {
            _param1.\u003210934969267("@internalSubset");
            _param1.\u003897033093575(xmlDocumentType.InternalSubset);
          }
          _param1.\u003908313152034();
          break;
        case XmlNodeType.XmlDeclaration:
          IXmlDeclaration xmlDeclaration = (IXmlDeclaration) _param2;
          _param1.\u003210934969267(this.\u003357572708793(_param2, _param3));
          _param1.\u003038455958685();
          if (!string.IsNullOrEmpty(xmlDeclaration.Version))
          {
            _param1.\u003210934969267("@version");
            _param1.\u003897033093575(xmlDeclaration.Version);
          }
          if (!string.IsNullOrEmpty(xmlDeclaration.Encoding))
          {
            _param1.\u003210934969267("@encoding");
            _param1.\u003897033093575(xmlDeclaration.Encoding);
          }
          if (!string.IsNullOrEmpty(xmlDeclaration.Standalone))
          {
            _param1.\u003210934969267("@standalone");
            _param1.\u003897033093575(xmlDeclaration.Standalone);
          }
          _param1.\u003908313152034();
          break;
        default:
          throw new \u003479281034910("Unexpected XmlNodeType when serializing nodes: " + (object) _param2.NodeType);
      }
    }

    private static bool \u003119524131652(IXmlNode _param0)
    {
      foreach (IXmlNode childNode in _param0.ChildNodes)
      {
        if (childNode.LocalName != _param0.LocalName)
          return false;
      }
      return true;
    }

    public virtual object \u003469398426265(
      \u003250925846196 _param1,
      Type _param2,
      object _param3,
      \u003131478599170 _param4)
    {
      switch (_param1.\u003271751439454)
      {
        case \u003293768301571.StartObject:
          XmlNamespaceManager namespaceManager = new XmlNamespaceManager((XmlNameTable) new NameTable());
          IXmlDocument xmlDocument = (IXmlDocument) null;
          IXmlNode xmlNode = (IXmlNode) null;
          if (typeof (XObject).IsAssignableFrom(_param2))
          {
            if (_param2 != typeof (XDocument) && _param2 != typeof (XElement))
              throw \u003479281034910.\u003188723322269(_param1, "991274650692 only supports deserializing XDocument or XElement.");
            xmlDocument = (IXmlDocument) new \u003078735391906(new XDocument());
            xmlNode = (IXmlNode) xmlDocument;
          }
          if (typeof (XmlNode).IsAssignableFrom(_param2))
          {
            if (_param2 != typeof (XmlDocument))
              throw \u003479281034910.\u003188723322269(_param1, "991274650692 only supports deserializing XmlDocuments");
            xmlDocument = (IXmlDocument) new \u003098221980460(new XmlDocument()
            {
              XmlResolver = (XmlResolver) null
            });
            xmlNode = (IXmlNode) xmlDocument;
          }
          if (xmlDocument == null || xmlNode == null)
            throw \u003479281034910.\u003188723322269(_param1, "Unexpected type when converting XML: " + (object) _param2);
          if (!string.IsNullOrEmpty(this.\u003275681149001))
          {
            this.\u003564100954663(_param1, xmlDocument, xmlNode, this.\u003275681149001, namespaceManager);
          }
          else
          {
            _param1.\u003776737810718();
            this.\u003933932691614(_param1, xmlDocument, namespaceManager, xmlNode);
          }
          if (!(_param2 == typeof (XElement)))
            return xmlDocument.WrappedNode;
          XElement wrappedNode = (XElement) xmlDocument.DocumentElement.WrappedNode;
          wrappedNode.Remove();
          return (object) wrappedNode;
        case \u003293768301571.Null:
          return (object) null;
        default:
          throw \u003479281034910.\u003188723322269(_param1, "991274650692 can only convert JSON that begins with an object.");
      }
    }

    private void \u003798865074016(
      \u003250925846196 _param1,
      IXmlDocument _param2,
      XmlNamespaceManager _param3,
      string _param4,
      IXmlNode _param5)
    {
      if (!(_param4 == "#text"))
      {
        if (!(_param4 == "#cdata-section"))
        {
          if (!(_param4 == "#whitespace"))
          {
            if (_param4 == "#significant-whitespace")
              _param5.AppendChild(_param2.CreateSignificantWhitespace(this.\u003240684846462(_param1)));
            else if (!string.IsNullOrEmpty(_param4) && _param4[0] == '?')
              this.\u003243140170797(_param1, _param2, _param5, _param4);
            else if (string.Equals(_param4, "!DOCTYPE", StringComparison.OrdinalIgnoreCase))
              this.\u003699166863527(_param1, _param2, _param5);
            else if (_param1.\u003271751439454 == \u003293768301571.StartArray)
              this.\u003539782223874(_param1, _param2, _param4, _param5, _param3);
            else
              this.\u003564100954663(_param1, _param2, _param5, _param4, _param3);
          }
          else
            _param5.AppendChild(_param2.CreateWhitespace(this.\u003240684846462(_param1)));
        }
        else
          _param5.AppendChild(_param2.CreateCDataSection(this.\u003240684846462(_param1)));
      }
      else
        _param5.AppendChild(_param2.CreateTextNode(this.\u003240684846462(_param1)));
    }

    private void \u003564100954663(
      \u003250925846196 _param1,
      IXmlDocument _param2,
      IXmlNode _param3,
      string _param4,
      XmlNamespaceManager _param5)
    {
      if (string.IsNullOrEmpty(_param4))
        throw \u003479281034910.\u003188723322269(_param1, "991274650692 cannot convert JSON with an empty property name to XML.");
      Dictionary<string, string> dictionary = this.\u003284289312289(_param1, _param5);
      string str1 = \u003770915038270.\u003303083996950(_param4);
      if (_param4.\u003942788494192('@'))
      {
        string str2 = _param4.Substring(1);
        string str3 = \u003770915038270.\u003303083996950(str2);
        \u003991274650692.\u003935230833379(_param1, _param2, _param3, _param4, str2, _param5, str3);
      }
      else
      {
        if (_param4.\u003942788494192('$'))
        {
          if (!(_param4 == "$values"))
          {
            if (_param4 == "$id" || _param4 == "$ref" || _param4 == "$type" || _param4 == "$value")
            {
              string str4 = _param4.Substring(1);
              string str5 = _param5.LookupPrefix("http://james.newtonking.com/projects/json");
              \u003991274650692.\u003935230833379(_param1, _param2, _param3, _param4, str4, _param5, str5);
              return;
            }
          }
          else
          {
            _param4 = _param4.Substring(1);
            string str6 = _param5.LookupPrefix("http://james.newtonking.com/projects/json");
            this.\u003041920179571(_param1, _param2, _param3, _param4, _param5, str6, dictionary);
            return;
          }
        }
        this.\u003041920179571(_param1, _param2, _param3, _param4, _param5, str1, dictionary);
      }
    }

    private void \u003041920179571(
      \u003250925846196 _param1,
      IXmlDocument _param2,
      IXmlNode _param3,
      string _param4,
      XmlNamespaceManager _param5,
      string _param6,
      Dictionary<string, string> _param7)
    {
      IXmlElement newChild = this.\u003072766432228(_param4, _param2, _param6, _param5);
      _param3.AppendChild((IXmlNode) newChild);
      if (_param7 != null)
      {
        foreach (KeyValuePair<string, string> keyValuePair in _param7)
        {
          string str = XmlConvert.EncodeName(keyValuePair.Key);
          string prefix = \u003770915038270.\u003303083996950(keyValuePair.Key);
          IXmlNode attribute = !string.IsNullOrEmpty(prefix) ? _param2.CreateAttribute(str, _param5.LookupNamespace(prefix) ?? string.Empty, keyValuePair.Value) : _param2.CreateAttribute(str, keyValuePair.Value);
          newChild.SetAttributeNode(attribute);
        }
      }
      switch (_param1.\u003271751439454)
      {
        case \u003293768301571.Integer:
        case \u003293768301571.Float:
        case \u003293768301571.String:
        case \u003293768301571.Boolean:
        case \u003293768301571.Date:
          string text = this.\u003240684846462(_param1);
          if (text == null)
            break;
          newChild.AppendChild(_param2.CreateTextNode(text));
          break;
        case \u003293768301571.Null:
          break;
        case \u003293768301571.EndObject:
          _param5.RemoveNamespace(string.Empty, _param5.DefaultNamespace);
          break;
        default:
          _param5.PushScope();
          this.\u003933932691614(_param1, _param2, _param5, (IXmlNode) newChild);
          _param5.PopScope();
          _param5.RemoveNamespace(string.Empty, _param5.DefaultNamespace);
          break;
      }
    }

    private static void \u003935230833379(
      \u003250925846196 _param0,
      IXmlDocument _param1,
      IXmlNode _param2,
      string _param3,
      string _param4,
      XmlNamespaceManager _param5,
      string _param6)
    {
      if (_param2.NodeType == XmlNodeType.Document)
        throw \u003479281034910.\u003188723322269(_param0, "JSON root object has property '{0}' that will be converted to an attribute. A root object cannot have any attribute properties. Consider specifying a DeserializeRootElementName.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param3));
      string str1 = XmlConvert.EncodeName(_param4);
      string str2 = _param0.\u003255783382022.ToString();
      IXmlNode attribute = !string.IsNullOrEmpty(_param6) ? _param1.CreateAttribute(str1, _param5.LookupNamespace(_param6), str2) : _param1.CreateAttribute(str1, str2);
      ((IXmlElement) _param2).SetAttributeNode(attribute);
    }

    private string \u003240684846462(\u003250925846196 _param1)
    {
      switch (_param1.\u003271751439454)
      {
        case \u003293768301571.Integer:
          return _param1.\u003255783382022 is BigInteger ? ((BigInteger) _param1.\u003255783382022).ToString((IFormatProvider) CultureInfo.InvariantCulture) : XmlConvert.ToString(Convert.ToInt64(_param1.\u003255783382022, (IFormatProvider) CultureInfo.InvariantCulture));
        case \u003293768301571.Float:
          if (_param1.\u003255783382022 is Decimal)
            return XmlConvert.ToString((Decimal) _param1.\u003255783382022);
          return _param1.\u003255783382022 is float ? XmlConvert.ToString((float) _param1.\u003255783382022) : XmlConvert.ToString(Convert.ToDouble(_param1.\u003255783382022, (IFormatProvider) CultureInfo.InvariantCulture));
        case \u003293768301571.String:
          return _param1.\u003255783382022?.ToString();
        case \u003293768301571.Boolean:
          return XmlConvert.ToString(Convert.ToBoolean(_param1.\u003255783382022, (IFormatProvider) CultureInfo.InvariantCulture));
        case \u003293768301571.Null:
          return (string) null;
        case \u003293768301571.Date:
          if (_param1.\u003255783382022 is DateTimeOffset)
            return XmlConvert.ToString((DateTimeOffset) _param1.\u003255783382022);
          DateTime dateTime = Convert.ToDateTime(_param1.\u003255783382022, (IFormatProvider) CultureInfo.InvariantCulture);
          return XmlConvert.ToString(dateTime, \u003519131386819.\u003933044583518(dateTime.Kind));
        default:
          throw \u003479281034910.\u003188723322269(_param1, "Cannot get an XML string value from token type '{0}'.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.\u003271751439454));
      }
    }

    private void \u003539782223874(
      \u003250925846196 _param1,
      IXmlDocument _param2,
      string _param3,
      IXmlNode _param4,
      XmlNamespaceManager _param5)
    {
      string str = \u003770915038270.\u003303083996950(_param3);
      IXmlElement newChild = this.\u003072766432228(_param3, _param2, str, _param5);
      _param4.AppendChild((IXmlNode) newChild);
      int num = 0;
      while (_param1.\u003776737810718() && _param1.\u003271751439454 != \u003293768301571.EndArray)
      {
        this.\u003798865074016(_param1, _param2, _param5, _param3, (IXmlNode) newChild);
        ++num;
      }
      if (this.\u003233754680085)
        this.\u003317908962041(newChild, _param2);
      if (num != 1 || !this.\u003233754680085)
        return;
      foreach (IXmlNode childNode in newChild.ChildNodes)
      {
        if (childNode is IXmlElement xmlElement && xmlElement.LocalName == _param3)
        {
          this.\u003317908962041(xmlElement, _param2);
          break;
        }
      }
    }

    private void \u003317908962041(IXmlElement _param1, IXmlDocument _param2)
    {
      _param1.SetAttributeNode(_param2.CreateAttribute("json:Array", "http://james.newtonking.com/projects/json", "true"));
      if (!(_param1 is \u003874853409449) || _param1.GetPrefixOfNamespace("http://james.newtonking.com/projects/json") != null)
        return;
      _param1.SetAttributeNode(_param2.CreateAttribute("xmlns:json", "http://www.w3.org/2000/xmlns/", "http://james.newtonking.com/projects/json"));
    }

    private Dictionary<string, string> \u003284289312289(
      \u003250925846196 _param1,
      XmlNamespaceManager _param2)
    {
      switch (_param1.\u003271751439454)
      {
        case \u003293768301571.StartConstructor:
        case \u003293768301571.Integer:
        case \u003293768301571.Float:
        case \u003293768301571.String:
        case \u003293768301571.Boolean:
        case \u003293768301571.Null:
        case \u003293768301571.Date:
          return (Dictionary<string, string>) null;
        default:
          Dictionary<string, string> dictionary = (Dictionary<string, string>) null;
          bool flag = false;
          while (!flag && _param1.\u003776737810718())
          {
            switch (_param1.\u003271751439454)
            {
              case \u003293768301571.PropertyName:
                string str1 = _param1.\u003255783382022.ToString();
                if (!string.IsNullOrEmpty(str1))
                {
                  switch (str1[0])
                  {
                    case '$':
                      if (str1 == "$values" || str1 == "$id" || str1 == "$ref" || str1 == "$type" || str1 == "$value")
                      {
                        string prefix = _param2.LookupPrefix("http://james.newtonking.com/projects/json");
                        if (prefix == null)
                        {
                          if (dictionary == null)
                            dictionary = new Dictionary<string, string>();
                          int? nullable = new int?();
                          while (_param2.LookupNamespace("json" + (object) nullable) != null)
                            nullable = new int?(nullable.GetValueOrDefault() + 1);
                          prefix = "json" + (object) nullable;
                          dictionary.Add("xmlns:" + prefix, "http://james.newtonking.com/projects/json");
                          _param2.AddNamespace(prefix, "http://james.newtonking.com/projects/json");
                        }
                        if (str1 == "$values")
                        {
                          flag = true;
                          continue;
                        }
                        string str2 = str1.Substring(1);
                        _param1.\u003776737810718();
                        if (!\u003297509839149.\u003656515882768(_param1.\u003271751439454))
                          throw \u003479281034910.\u003188723322269(_param1, "Unexpected JsonToken: " + (object) _param1.\u003271751439454);
                        if (dictionary == null)
                          dictionary = new Dictionary<string, string>();
                        string str3 = _param1.\u003255783382022?.ToString();
                        dictionary.Add(prefix + ":" + str2, str3);
                        continue;
                      }
                      flag = true;
                      continue;
                    case '@':
                      if (dictionary == null)
                        dictionary = new Dictionary<string, string>();
                      string key = str1.Substring(1);
                      _param1.\u003776737810718();
                      string uri = this.\u003240684846462(_param1);
                      dictionary.Add(key, uri);
                      string prefix1;
                      if (this.\u003013513677967(key, out prefix1))
                      {
                        _param2.AddNamespace(prefix1, uri);
                        continue;
                      }
                      continue;
                    default:
                      flag = true;
                      continue;
                  }
                }
                else
                {
                  flag = true;
                  continue;
                }
              case \u003293768301571.Comment:
              case \u003293768301571.EndObject:
                flag = true;
                continue;
              default:
                throw \u003479281034910.\u003188723322269(_param1, "Unexpected JsonToken: " + (object) _param1.\u003271751439454);
            }
          }
          return dictionary;
      }
    }

    private void \u003243140170797(
      \u003250925846196 _param1,
      IXmlDocument _param2,
      IXmlNode _param3,
      string _param4)
    {
      if (_param4 == "?xml")
      {
        string version = (string) null;
        string encoding = (string) null;
        string standalone = (string) null;
        while (_param1.\u003776737810718() && _param1.\u003271751439454 != \u003293768301571.EndObject)
        {
          string str = _param1.\u003255783382022.ToString();
          if (!(str == "@version"))
          {
            if (!(str == "@encoding"))
            {
              if (!(str == "@standalone"))
                throw \u003479281034910.\u003188723322269(_param1, "Unexpected property name encountered while deserializing XmlDeclaration: " + _param1.\u003255783382022);
              _param1.\u003776737810718();
              standalone = this.\u003240684846462(_param1);
            }
            else
            {
              _param1.\u003776737810718();
              encoding = this.\u003240684846462(_param1);
            }
          }
          else
          {
            _param1.\u003776737810718();
            version = this.\u003240684846462(_param1);
          }
        }
        IXmlNode xmlDeclaration = _param2.CreateXmlDeclaration(version, encoding, standalone);
        _param3.AppendChild(xmlDeclaration);
      }
      else
      {
        IXmlNode processingInstruction = _param2.CreateProcessingInstruction(_param4.Substring(1), this.\u003240684846462(_param1));
        _param3.AppendChild(processingInstruction);
      }
    }

    private void \u003699166863527(
      \u003250925846196 _param1,
      IXmlDocument _param2,
      IXmlNode _param3)
    {
      string name = (string) null;
      string publicId = (string) null;
      string systemId = (string) null;
      string internalSubset = (string) null;
      while (_param1.\u003776737810718() && _param1.\u003271751439454 != \u003293768301571.EndObject)
      {
        string str = _param1.\u003255783382022.ToString();
        if (!(str == "@name"))
        {
          if (!(str == "@public"))
          {
            if (!(str == "@system"))
            {
              if (!(str == "@internalSubset"))
                throw \u003479281034910.\u003188723322269(_param1, "Unexpected property name encountered while deserializing XmlDeclaration: " + _param1.\u003255783382022);
              _param1.\u003776737810718();
              internalSubset = this.\u003240684846462(_param1);
            }
            else
            {
              _param1.\u003776737810718();
              systemId = this.\u003240684846462(_param1);
            }
          }
          else
          {
            _param1.\u003776737810718();
            publicId = this.\u003240684846462(_param1);
          }
        }
        else
        {
          _param1.\u003776737810718();
          name = this.\u003240684846462(_param1);
        }
      }
      IXmlNode xmlDocumentType = _param2.CreateXmlDocumentType(name, publicId, systemId, internalSubset);
      _param3.AppendChild(xmlDocumentType);
    }

    private IXmlElement \u003072766432228(
      string _param1,
      IXmlDocument _param2,
      string _param3,
      XmlNamespaceManager _param4)
    {
      string str = XmlConvert.EncodeName(_param1);
      string namespaceUri = string.IsNullOrEmpty(_param3) ? _param4.DefaultNamespace : _param4.LookupNamespace(_param3);
      return string.IsNullOrEmpty(namespaceUri) ? _param2.CreateElement(str) : _param2.CreateElement(str, namespaceUri);
    }

    private void \u003933932691614(
      \u003250925846196 _param1,
      IXmlDocument _param2,
      XmlNamespaceManager _param3,
      IXmlNode _param4)
    {
      do
      {
        switch (_param1.\u003271751439454)
        {
          case \u003293768301571.StartConstructor:
            string str1 = _param1.\u003255783382022.ToString();
            while (_param1.\u003776737810718() && _param1.\u003271751439454 != \u003293768301571.EndConstructor)
              this.\u003798865074016(_param1, _param2, _param3, str1, _param4);
            break;
          case \u003293768301571.PropertyName:
            if (_param4.NodeType == XmlNodeType.Document && _param2.DocumentElement != null)
              throw \u003479281034910.\u003188723322269(_param1, "JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName.");
            string str2 = _param1.\u003255783382022.ToString();
            _param1.\u003776737810718();
            if (_param1.\u003271751439454 == \u003293768301571.StartArray)
            {
              int num = 0;
              while (_param1.\u003776737810718() && _param1.\u003271751439454 != \u003293768301571.EndArray)
              {
                this.\u003798865074016(_param1, _param2, _param3, str2, _param4);
                ++num;
              }
              if (num == 1 && this.\u003233754680085)
              {
                using (List<IXmlNode>.Enumerator enumerator = _param4.ChildNodes.GetEnumerator())
                {
                  while (enumerator.MoveNext())
                  {
                    if (enumerator.Current is IXmlElement current && current.LocalName == str2)
                    {
                      this.\u003317908962041(current, _param2);
                      break;
                    }
                  }
                  break;
                }
              }
              else
                break;
            }
            else
            {
              this.\u003798865074016(_param1, _param2, _param3, str2, _param4);
              break;
            }
          case \u003293768301571.Comment:
            _param4.AppendChild(_param2.CreateComment((string) _param1.\u003255783382022));
            break;
          case \u003293768301571.EndObject:
            return;
          case \u003293768301571.EndArray:
            return;
          default:
            throw \u003479281034910.\u003188723322269(_param1, "Unexpected JsonToken when deserializing node: " + (object) _param1.\u003271751439454);
        }
      }
      while (_param1.\u003776737810718());
    }

    private bool \u003013513677967(string _param1, out string _param2)
    {
      if (_param1.StartsWith("xmlns", StringComparison.Ordinal))
      {
        if (_param1.Length == 5)
        {
          _param2 = string.Empty;
          return true;
        }
        if (_param1[5] == ':')
        {
          _param2 = _param1.Substring(6, _param1.Length - 6);
          return true;
        }
      }
      _param2 = (string) null;
      return false;
    }

    private bool \u003945648529268(List<IXmlNode> _param1)
    {
      foreach (IXmlNode xmlNode in _param1)
      {
        if (!(xmlNode.NamespaceUri == "http://james.newtonking.com/projects/json") && (!(xmlNode.NamespaceUri == "http://www.w3.org/2000/xmlns/") || !(xmlNode.Value == "http://james.newtonking.com/projects/json")))
          return true;
      }
      return false;
    }

    public virtual bool \u003520242034358(Type _param1)
    {
      if (_param1.\u003214041528923("System.Xml.Linq.XObject", false))
        return this.\u003489395750876(_param1);
      return _param1.\u003214041528923("System.Xml.XmlNode", false) && this.\u003002713248228(_param1);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool \u003489395750876(Type _param1) => typeof (XObject).IsAssignableFrom(_param1);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool \u003002713248228(Type _param1) => typeof (XmlNode).IsAssignableFrom(_param1);
  }
}
