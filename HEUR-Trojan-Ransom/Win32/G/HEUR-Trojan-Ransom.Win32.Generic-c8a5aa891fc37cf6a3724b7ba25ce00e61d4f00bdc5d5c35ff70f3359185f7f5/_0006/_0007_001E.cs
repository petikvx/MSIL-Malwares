// Decompiled with JetBrains decompiler
// Type: .
// Assembly: coproccessor, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: 489BB54C-AC64-4776-B7C7-9CD76A5742AF
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-c8a5aa891fc37cf6a3724b7ba25ce00e61d4f00bdc5d5c35ff70f3359185f7f5.exe

using \u0006;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0006
{
  internal class \u0007\u001E
  {
    public static string \u0005\u001E([In] string obj0, [In] string obj1)
    {
      string str;
      try
      {
        str = Encoding.UTF8.GetString(\u0007\u001E.\u0006\u001E(Convert.FromBase64String(obj0), Encoding.UTF8.GetBytes(obj1)));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static byte[] \u0006\u001E([In] byte[] obj0, [In] byte[] obj1)
    {
      int num1 = (int) obj0[checked (obj0.Length - 1)];
      byte[] numArray1 = new byte[checked (obj0.Length - 2 + 1)];
      short index1 = 0;
      byte[] numArray2;
      try
      {
        int num2 = checked (obj0.Length - 2);
        int index2 = 0;
        while (index2 <= num2)
        {
          if ((int) index1 >= obj1.Length)
            index1 = (short) 0;
          if (index2 < checked (obj0.Length - 1))
          {
            numArray1[index2] = Convert.ToByte(checked ((int) obj0[index2] - unchecked (numArray1.Length % obj1.Length) - (int) obj1[(int) index1] + num1));
            checked { ++index1; }
          }
          checked { ++index2; }
        }
        numArray2 = numArray1;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        numArray2 = numArray1;
        ProjectData.ClearProjectError();
      }
      return numArray2;
    }
  }
}
