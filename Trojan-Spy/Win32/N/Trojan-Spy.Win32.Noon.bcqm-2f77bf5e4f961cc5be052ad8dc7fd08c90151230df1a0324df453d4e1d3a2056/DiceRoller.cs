// Decompiled with JetBrains decompiler
// Type: mmxAH.DiceRoller
// Assembly: PermissionTokenFact, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 0E8B010F-DA1B-42FA-9C31-C1DCAF557A03
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqm-2f77bf5e4f961cc5be052ad8dc7fd08c90151230df1a0324df453d4e1d3a2056.exe

using System;
using System.Threading;

namespace mmxAH
{
  public class DiceRoller
  {
    private const byte dice = 6;
    private GameEngine en;

    public DiceRoller(GameEngine eng) => this.en = eng;

    public byte RollDiceWithTreshhold(byte num, byte tresh)
    {
      string Text = "" + num.ToString() + "d" + (byte) 6.ToString();
      if (num == (byte) 0)
      {
        this.en.io.PrintToLog(Text);
        return 0;
      }
      string str = Text + " = ( ";
      byte num1 = 0;
      for (int index = 0; index < (int) num; ++index)
      {
        if (index != 0)
          str += ",";
        byte num2 = this.Roll();
        str += num2.ToString();
        if ((int) num2 >= (int) tresh)
        {
          str += "*";
          ++num1;
        }
      }
      this.en.io.PrintToLog(str + ")");
      return num1;
    }

    private byte Roll()
    {
      Thread.Sleep(5);
      return (byte) (new Random(Environment.TickCount).NextDouble() * 6.0 + 1.0);
    }

    public byte RollOneDice()
    {
      byte num = this.Roll();
      this.en.io.PrintToLog("1d" + (byte) 6.ToString() + " = " + num.ToString() + " . ");
      return num;
    }
  }
}
