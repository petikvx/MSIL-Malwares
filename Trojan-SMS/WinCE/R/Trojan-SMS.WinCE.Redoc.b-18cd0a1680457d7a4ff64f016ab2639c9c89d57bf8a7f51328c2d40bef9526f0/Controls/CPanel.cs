// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CPanel
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using Dbasic.Other;
using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class CPanel : CControls
  {
    public CPanel(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedPanel control = (CEnhancedPanel) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      return this.CRunner.htSharedProperties.Contains((object) str) ? this.CRunner.SharedProperties((Control) control, str, ref place, assign, ref locals) : new MethodReturn(place);
    }

    public MethodReturn addPanel(Place place, ref Locals locals)
    {
      ++place.WordI;
      Word word = this.CRunner.nextWord(false, ref place);
      string lower1;
      RunReturn runReturn;
      if ((word.KeyWord & CConstants.Immediate) == CConstants.Immediate && this.CRunner.htControls.Contains((object) word.Value.ToLower(CRunner.cul)))
      {
        lower1 = this.CRunner.nextWord(true, ref place).Value.ToLower(CRunner.cul);
      }
      else
      {
        runReturn = this.CRunner.RunCode(place, true, true, ref locals);
        place = runReturn.place;
        lower1 = runReturn.vString.ToLower(CRunner.cul);
      }
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn.place;
      string lower2 = runReturn.vString.ToLower(CRunner.cul);
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble1 = (int) runReturn.vDouble;
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble2 = (int) runReturn.vDouble;
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble3 = (int) runReturn.vDouble;
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble4 = (int) runReturn.vDouble;
      ++place.WordI;
      CEnhancedPanel cenhancedPanel = new CEnhancedPanel();
      this.CRunner.htControls.Add((object) lower2, (object) new WrapControl((object) cenhancedPanel, (CControls) this));
      cenhancedPanel.name = lower2;
      cenhancedPanel.Left = vDouble1;
      cenhancedPanel.Top = vDouble2;
      cenhancedPanel.Height = vDouble4;
      cenhancedPanel.Width = vDouble3;
      cenhancedPanel.BackColor = Color.White;
      cenhancedPanel.Visible = true;
      ((Control) ((WrapControl) this.CRunner.htControls[(object) lower1]).control).Controls.Add((Control) cenhancedPanel);
      this.AddEvents(cenhancedPanel);
      return new MethodReturn(place);
    }

    private void MouseDown(object sender, MouseEventArgs e)
    {
      CEnhancedPanel cenhancedPanel = (CEnhancedPanel) sender;
      Place htSub = (Place) this.CRunner.htSubs[(object) (cenhancedPanel.name + "_mousedown")];
      this.CRunner.StartSub(htSub, new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedPanel.name
        },
        {
          (object) ((Word) ((Line) this.CRunner.lines[htSub.LineI]).words[2]).Value,
          (object) e.X.ToString((IFormatProvider) CRunner.cul)
        },
        {
          (object) ((Word) ((Line) this.CRunner.lines[htSub.LineI]).words[3]).Value,
          (object) e.Y.ToString((IFormatProvider) CRunner.cul)
        }
      });
    }

    private void MouseMove(object sender, MouseEventArgs e)
    {
      CEnhancedPanel cenhancedPanel = (CEnhancedPanel) sender;
      Place htSub = (Place) this.CRunner.htSubs[(object) (cenhancedPanel.name + "_mousemove")];
      this.CRunner.StartSub(htSub, new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedPanel.name
        },
        {
          (object) ((Word) ((Line) this.CRunner.lines[htSub.LineI]).words[2]).Value,
          (object) e.X.ToString((IFormatProvider) CRunner.cul)
        },
        {
          (object) ((Word) ((Line) this.CRunner.lines[htSub.LineI]).words[3]).Value,
          (object) e.Y.ToString((IFormatProvider) CRunner.cul)
        }
      });
    }

    private void MouseUp(object sender, MouseEventArgs e)
    {
      CEnhancedPanel cenhancedPanel = (CEnhancedPanel) sender;
      Place htSub = (Place) this.CRunner.htSubs[(object) (cenhancedPanel.name + "_mouseup")];
      this.CRunner.StartSub(htSub, new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedPanel.name
        },
        {
          (object) ((Word) ((Line) this.CRunner.lines[htSub.LineI]).words[2]).Value,
          (object) e.X.ToString((IFormatProvider) CRunner.cul)
        },
        {
          (object) ((Word) ((Line) this.CRunner.lines[htSub.LineI]).words[3]).Value,
          (object) e.Y.ToString((IFormatProvider) CRunner.cul)
        }
      });
    }

    private void AddEvents(CEnhancedPanel pnl)
    {
      if (this.CRunner.htSubs.Contains((object) (pnl.name + "_mousedown")))
        pnl.MouseDown += new MouseEventHandler(this.MouseDown);
      if (this.CRunner.htSubs.Contains((object) (pnl.name + "_mousemove")))
        pnl.MouseMove += new MouseEventHandler(this.MouseMove);
      if (!this.CRunner.htSubs.Contains((object) (pnl.name + "_mouseup")))
        return;
      pnl.MouseUp += new MouseEventHandler(this.MouseUp);
    }

    public override void AddRunTimeEvent(object sender, string eventName)
    {
      CEnhancedPanel cenhancedPanel = (CEnhancedPanel) sender;
      switch (eventName)
      {
        case "mousedown":
          cenhancedPanel.MouseDown += new MouseEventHandler(this.MouseDown);
          break;
        case "mousemove":
          cenhancedPanel.MouseMove += new MouseEventHandler(this.MouseMove);
          break;
        case "mouseup":
          cenhancedPanel.MouseUp += new MouseEventHandler(this.MouseUp);
          break;
      }
    }

    public void ShortAdd(string s)
    {
      CEnhancedPanel cenhancedPanel = new CEnhancedPanel();
      string FrmName;
      string Name;
      int Left;
      int Top;
      int Width;
      int Height;
      Color BackColor;
      bool myEnabled;
      bool myVisible;
      CBuildDesigner.PanelGetProperties(s, out FrmName, out Name, out Left, out Top, out Width, out Height, out BackColor, out myEnabled, out myVisible);
      cenhancedPanel.name = Name.ToLower(CRunner.cul);
      cenhancedPanel.Left = Left;
      cenhancedPanel.Top = Top;
      cenhancedPanel.Width = Width;
      cenhancedPanel.Height = Height;
      cenhancedPanel.BackColor = BackColor;
      cenhancedPanel.Enabled = myEnabled;
      cenhancedPanel.Visible = myVisible;
      this.CRunner.htControls.Add((object) cenhancedPanel.name, (object) new WrapControl((object) cenhancedPanel, (CControls) this));
      ((Control) ((WrapControl) this.CRunner.htControls[(object) FrmName]).control).Controls.Add((Control) cenhancedPanel);
      this.AddEvents(cenhancedPanel);
    }
  }
}
