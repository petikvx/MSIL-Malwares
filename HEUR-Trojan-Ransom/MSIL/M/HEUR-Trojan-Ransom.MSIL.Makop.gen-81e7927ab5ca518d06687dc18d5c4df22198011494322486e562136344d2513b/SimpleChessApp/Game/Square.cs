// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: 司6, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E96108F1-63B0-49D9-ABCC-EB6314F0AFE2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-81e7927ab5ca518d06687dc18d5c4df22198011494322486e562136344d2513b.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 636730881;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 958950474)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              int num3 = eventHandler1 == comparand ? 939948803 : (num3 = 1117426125);
              num1 = num3 ^ (int) num2 * 1480636486;
              continue;
            case 3:
              comparand = eventHandler1;
              eventHandler2 = (EventHandler) Square.\u206C‌‍‍‪‬⁮‫‮‏‫‪⁭⁬‬‎⁭⁪‭‫⁫‏⁫‌‎‎⁫⁫⁫‌‍⁮⁬‌‮⁭⁫⁯‬⁭‮((Delegate) comparand, (Delegate) value);
              num1 = 1715414952;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 2025654727;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 169909717)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * -1934355217 ^ 1053915876;
              continue;
            case 2:
              comparand = eventHandler1;
              eventHandler2 = (EventHandler) Square.\u202A‌‫‎‌‬‮‌⁪⁮‎‬⁯‪‫‪⁫‪‫⁪‌⁫‮‎⁭‍‍⁭​⁬​​⁪⁪‮‬‏‭‫⁬‮((Delegate) comparand, (Delegate) value);
              num1 = 1772680334;
              continue;
            case 3:
              goto label_3;
            case 4:
              int num3 = eventHandler1 != comparand ? 1405115695 : (num3 = 965993346);
              num1 = num3 ^ (int) num2 * 741432410;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName
    {
      get
      {
label_1:
        int num1 = -11239977;
        string specialName;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1028111996)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -635636092 ^ -858175498;
              continue;
            case 3:
              specialName = Square.\u206A​‌‌⁭‮‍⁭‭‪‪‌‮⁬⁯⁫‎‌‫​⁮‫⁯‍​⁮​‎‍⁮‏⁭⁫‫⁪‭​‍⁭‭‮(this.CurrentSquare, \u003CModule\u003E.\u206E‭⁮​⁯⁫‫‮⁯‏‏‎‫⁬⁭‪‮‮⁬‭‌‬‏​‍‌‏‭⁪⁮‌⁫⁭⁭​‍‌‍‭‎‮<string>(3563146290U), Square.\u202B​‌⁪‭‍‫‭‫⁬⁯‌⁫‎⁮⁬‭‏‍⁮⁬‭‌​‪⁪‌​⁭‬⁪⁫⁮⁫⁪⁮⁫​⁪‬‮((object) this.Piece));
              num1 = (int) num2 * -643966110 ^ -95220649;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
        char ch = Square.\u200E‎‏‮‫‎‮⁮‪⁮‍‏⁭‌⁯⁫‬⁯‍⁬​‬‍⁯‍‭‬‬‫‭⁯‏‮‭⁬‪​⁯‫‌‮(\u003CModule\u003E.\u200C‏‮‬‮⁭‎⁯‎‫‏⁬⁯⁬⁬‏‌‏⁪‬⁫‎‫⁮‮‎‎‏‮‎‭⁬‫⁯⁬⁭⁮‎‪‎‮<string>(2847406211U), this.File);
label_1:
        int num1 = -1465978146;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -382621153)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              currentSquare = Square.\u202B‎⁮‎⁮‬⁮‎‬‍⁮‮⁬‭⁯⁫⁮‎​‍⁮‪‬⁫⁮⁯‮⁮‫⁯‌‫⁯‫‬⁭‭‮‭⁭‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * -1240266941 ^ 1789811560;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
      EventHandler action = Square.Action;
      if (action == null)
        return;
      action((object) msg, (EventArgs) null);
label_3:
      int num1 = -211223157;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -822421712)) % 3U)
        {
          case 0:
            goto label_6;
          case 1:
            num1 = (int) num2 * -1397822587 ^ 1395166888;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_6:
      return;
label_7:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
      this.Board = Board;
      this.File = file;
      this.Rank = rank;
      this.Name = Square.\u202B‎⁮‎⁮‬⁮‎‬‍⁮‮⁬‭⁯⁫⁮‎​‍⁮‪‬⁫⁮⁯‮⁮‫⁯‌‫⁯‫‬⁭‭‮‭⁭‮(Square.\u200E‎‏‮‫‎‮⁮‪⁮‍‏⁭‌⁯⁫‬⁯‍⁬​‬‍⁯‍‭‬‬‫‭⁯‏‮‭⁬‪​⁯‫‌‮(\u003CModule\u003E.\u200C‏‮‬‮⁭‎⁯‎‫‏⁬⁯⁬⁬‏‌‏⁪‬⁫‎‫⁮‮‎‎‏‮‎‭⁬‫⁯⁬⁭⁮‎‪‎‮<string>(2847406211U), file).ToString(), (this.Rank + 1).ToString());
    }

    public Square()
    {
      this.InitializeComponent();
      this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
    }

    private void SwitchPlayer()
    {
label_1:
      int num1 = -93692540;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -629840951)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -724134210 ^ 940488315;
            continue;
          case 1:
            num1 = -1761972325;
            continue;
          case 2:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -1595306247;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_1;
          case 5:
            flag1 = this.Board.WhosPlaying == PieceColor.White;
            num1 = (int) num2 * 1530921020 ^ 1982632054;
            continue;
          case 6:
            int num3 = flag1 ? -1079339421 : (num3 = -1058499042);
            num1 = num3 ^ (int) num2 * 1340220676;
            continue;
          case 7:
            num1 = (int) num2 * -1640032418 ^ 1832435542;
            continue;
          case 8:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * 906351641 ^ -369128512;
            continue;
          case 9:
            flag2 = !this.Board.DisableTurns;
            num1 = (int) num2 * 1040993041 ^ 1792242977;
            continue;
          case 10:
            int num4 = !flag2 ? -149393529 : (num4 = -222401991);
            num1 = num4 ^ (int) num2 * -1229238740;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    private bool getSide(Square x)
    {
      if (this.Board.DisableTurns)
        goto label_4;
label_1:
      int num1 = -128701915;
label_2:
      uint num2;
      bool side;
      int num3;
      switch ((num2 = (uint) (num1 ^ -1366054510)) % 3U)
      {
        case 0:
          goto label_1;
        case 2:
          num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
          goto label_5;
        default:
          return side;
      }
label_4:
      num3 = 1;
label_5:
      side = num3 != 0;
      num1 = -1199233131;
      goto label_2;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = -2003698720;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool disableTurns;
        List<PossibleMoves> move1;
        bool flag6;
        bool flag7;
        List<PossibleMoves> move2;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ -10639454)) % 86U)
        {
          case 0:
            disableTurns = this.Board.DisableTurns;
            num1 = -319105505;
            continue;
          case 1:
            num1 = -470736323;
            continue;
          case 2:
            this.msg = \u003CModule\u003E.\u202E‏‭⁫‪‎‬⁮⁬⁫‫⁭‬‮‎⁯‭⁪‮⁬⁭‎‫⁫⁫‬‍⁬​‌⁮‭‫⁯⁪​​⁯​⁫‮<string>(3222364521U);
            num1 = -429281365;
            continue;
          case 3:
            num1 = (int) num2 * 961793031 ^ -1321279735;
            continue;
          case 4:
            flag4 = Square.\u202B‎⁫⁮‌⁮​‌‭⁫‬‬‭‎‭⁪⁪⁪​​‫‬⁮‬⁫⁫‌⁭‮⁫‫‭⁫‬⁮⁯‌​⁫‮‮(e) == MouseButtons.Left;
            num1 = (int) num2 * -821698651 ^ -739363663;
            continue;
          case 5:
            int num5 = !flag3 ? 332502160 : (num5 = 1733949292);
            num1 = num5 ^ (int) num2 * -1847746528;
            continue;
          case 6:
            this.msg = \u003CModule\u003E.\u206E‭⁮​⁯⁫‫‮⁯‏‏‎‫⁬⁭‪‮‮⁬‭‌‬‏​‍‌‏‭⁪⁮‌⁫⁭⁭​‍‌‍‭‎‮<string>(2396766796U);
            num1 = (int) num2 * -1159674837 ^ 1779204070;
            continue;
          case 7:
            this.hideMoves(this.Board.From);
            to.HighLight();
            num1 = (int) num2 * -88318063 ^ -787854586;
            continue;
          case 8:
            goto label_3;
          case 9:
            num1 = (int) num2 * 1187543867 ^ -1620412468;
            continue;
          case 10:
            num1 = (int) num2 * -937585701 ^ -888292288;
            continue;
          case 11:
            num1 = (int) num2 * -583297544 ^ -1178294856;
            continue;
          case 12:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -493580763 ^ 100559757;
            continue;
          case 13:
            Square.action(this.msg);
            num1 = -736679646;
            continue;
          case 14:
            this.msg = \u003CModule\u003E.\u200C‍⁭⁭​⁮⁪⁪‮‍‮​⁫⁪⁯⁯‌⁫‎‮‮‍⁬‫‎⁭⁪⁮⁬‌⁮‎​⁪‎‬⁭‍‮‪‮<string>(3929097037U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1437197738 ^ 972354845;
            continue;
          case 15:
            to.HighLight();
            num1 = (int) num2 * -2071616390 ^ -758389796;
            continue;
          case 16:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1276237513 ^ 1216420106;
            continue;
          case 17:
            to.HighLight();
            num1 = (int) num2 * 1867353914 ^ -1281612020;
            continue;
          case 18:
            to.MovePawn(this.Board.From);
            num1 = -890737490;
            continue;
          case 19:
            num1 = (int) num2 * -89431705 ^ 217963998;
            continue;
          case 20:
            if (to.Piece == null)
            {
              num3 = 0;
              break;
            }
            num1 = -1268525570;
            continue;
          case 21:
            flag6 = move1.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * 1871003279 ^ -463670128;
            continue;
          case 22:
            num1 = (int) num2 * -1899272285 ^ -181756417;
            continue;
          case 23:
            num1 = (int) num2 * -723424052 ^ 911196628;
            continue;
          case 24:
            int num6 = to.Piece.Id == this.Board.From.Piece.Id ? 1280458886 : (num6 = 1015754822);
            num1 = num6 ^ (int) num2 * -986958577;
            continue;
          case 25:
            move1 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            this.msg = Square.\u206C⁪‏‮‬‍‬‪‫‫⁯‏⁭‫‬⁯​⁫⁮⁯‫⁮⁮‬‎​‏‎⁫⁮‭‏‫⁭‍⁪⁪‮‌⁪‮(\u003CModule\u003E.\u206E‭⁮​⁯⁫‫‮⁯‏‏‎‫⁬⁭‪‮‮⁬‭‌‬‏​‍‌‏‭⁪⁮‌⁫⁭⁭​‍‌‍‭‎‮<string>(2000462020U), (object) move1.Count);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -197618313 ^ -824517078;
            continue;
          case 26:
            num1 = (int) num2 * -769390222 ^ -261713674;
            continue;
          case 27:
            int num7 = flag1 ? -157014474 : (num7 = -184811061);
            num1 = num7 ^ (int) num2 * 500837243;
            continue;
          case 28:
            num3 = this.getSide(to) ? 1 : 0;
            break;
          case 29:
            num1 = (int) num2 * 2147068681 ^ -378694212;
            continue;
          case 30:
            num1 = (int) num2 * 347886098 ^ 1659239243;
            continue;
          case 31:
            num1 = (int) num2 * -426746433 ^ -2101551480;
            continue;
          case 32:
            flag1 = move2.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * -685980151 ^ -825329759;
            continue;
          case 33:
            this.msg = \u003CModule\u003E.\u202E‏‭⁫‪‎‬⁮⁬⁫‫⁭‬‮‎⁯‭⁪‮⁬⁭‎‫⁫⁫‬‍⁬​‌⁮‭‫⁯⁪​​⁯​⁫‮<string>(3222364521U);
            num1 = (int) num2 * -1394924893 ^ 621810503;
            continue;
          case 34:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1005542287 ^ -523034295;
            continue;
          case 35:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 1670377160 ^ 1049172287;
            continue;
          case 36:
            this.Board.From = (Square) null;
            num1 = (int) num2 * 1560307455 ^ 633182814;
            continue;
          case 37:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1879923268 ^ 2106726353;
            continue;
          case 38:
            int num8 = to.Piece.Color != this.Board.From.Piece.Color ? -382911914 : (num8 = -86632657);
            num1 = num8 ^ (int) num2 * -120093735;
            continue;
          case 39:
            int num9;
            num1 = num9 = this.getSide(this.Board.From) ? -1820410856 : (num9 = -284036528);
            continue;
          case 40:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * 1189814794 ^ -1807468782;
            continue;
          case 41:
            num1 = -284036528;
            continue;
          case 42:
            num1 = (int) num2 * 468430406 ^ 1997987269;
            continue;
          case 43:
            int num10 = !flag2 ? 643155573 : (num10 = 2128078627);
            num1 = num10 ^ (int) num2 * 430213867;
            continue;
          case 44:
            to.HighLight();
            num1 = (int) num2 * 2123135555 ^ 1251482198;
            continue;
          case 45:
            int num11 = flag4 ? -651866427 : (num11 = -243767115);
            num1 = num11 ^ (int) num2 * 962597832;
            continue;
          case 46:
            num1 = (int) num2 * 1934326131 ^ -2033207731;
            continue;
          case 47:
            this.msg = \u003CModule\u003E.\u200C‏‮‬‮⁭‎⁯‎‫‏⁬⁯⁬⁬‏‌‏⁪‬⁫‎‫⁮‮‎‎‏‮‎‭⁬‫⁯⁬⁭⁮‎‪‎‮<string>(785872407U);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -365451901 ^ 1690257186;
            continue;
          case 48:
            num1 = (int) num2 * 1120148120 ^ -1400311600;
            continue;
          case 49:
            int num12 = disableTurns ? 2077523958 : (num12 = 1531853928);
            num1 = num12 ^ (int) num2 * -257372865;
            continue;
          case 50:
            num1 = (int) num2 * -2061737973 ^ 1998239782;
            continue;
          case 51:
            this.Board.From = to;
            num1 = (int) num2 * 1893030856 ^ -1018208446;
            continue;
          case 52:
            num1 = (int) num2 * 582572046 ^ 86084025;
            continue;
          case 53:
            num1 = (int) num2 * 1477808566 ^ 1482783233;
            continue;
          case 54:
            num1 = (int) num2 * -1577939103 ^ -681302212;
            continue;
          case 55:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = (int) num2 * 1221557072 ^ 1179840390;
            continue;
          case 56:
            flag2 = flag5;
            num1 = -2049195529;
            continue;
          case 57:
            num1 = (int) num2 * -1351766714 ^ -1518402577;
            continue;
          case 58:
            int num13 = flag7 ? 175436497 : (num13 = 1128144792);
            num1 = num13 ^ (int) num2 * -1265692432;
            continue;
          case 59:
            num1 = (int) num2 * -245919439 ^ 279059525;
            continue;
          case 60:
            move2 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * 1512118817 ^ 1723325678;
            continue;
          case 61:
            to = this;
            if (this.Board.From != null)
            {
              num1 = (int) num2 * -1837009637 ^ 1720277070;
              continue;
            }
            num4 = 0;
            goto label_89;
          case 62:
            this.msg = \u003CModule\u003E.\u200C‍⁭⁭​⁮⁪⁪‮‍‮​⁫⁪⁯⁯‌⁫‎‮‮‍⁬‫‎⁭⁪⁮⁬‌⁮‎​⁪‎‬⁭‍‮‪‮<string>(111362485U);
            num1 = (int) num2 * -1711891254 ^ 1127273212;
            continue;
          case 63:
            num4 = this.Board.From.Piece != null ? 1 : 0;
            goto label_89;
          case 64:
            this.Board.From = to;
            num1 = (int) num2 * -1367140773 ^ -509948764;
            continue;
          case 65:
            num1 = (int) num2 * -999102251 ^ 1699532386;
            continue;
          case 66:
            num1 = (int) num2 * 113058688 ^ -329502035;
            continue;
          case 67:
            num1 = -1566036823;
            continue;
          case 68:
            int num14;
            num1 = num14 = this.Board.From.Piece.Color == to.Piece.Color ? -822398103 : (num14 = -1630122633);
            continue;
          case 69:
            num1 = -429281365;
            continue;
          case 70:
            num1 = (int) num2 * -1770525453 ^ -447450706;
            continue;
          case 71:
            goto label_1;
          case 72:
            this.msg = \u003CModule\u003E.\u200C‍⁭⁭​⁮⁪⁪‮‍‮​⁫⁪⁯⁯‌⁫‎‮‮‍⁬‫‎⁭⁪⁮⁬‌⁮‎​⁪‎‬⁭‍‮‪‮<string>(111362485U);
            num1 = (int) num2 * -727681958 ^ -190324511;
            continue;
          case 73:
            num1 = -284036528;
            continue;
          case 74:
            num1 = (int) num2 * -602331776 ^ -1059812693;
            continue;
          case 75:
            num1 = (int) num2 * 913650010 ^ 2142626387;
            continue;
          case 76:
            num1 = -1291258052;
            continue;
          case 77:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -630012321 ^ -1883769471;
            continue;
          case 78:
            num1 = (int) num2 * 1872138347 ^ 1606543228;
            continue;
          case 79:
            num1 = (int) num2 * 1029318522 ^ -1374937711;
            continue;
          case 80:
            this.Board.From = to;
            num1 = (int) num2 * 1211462732 ^ -553378822;
            continue;
          case 81:
            num1 = (int) num2 * 199049577 ^ -1971003594;
            continue;
          case 82:
            num1 = (int) num2 * -389530796 ^ 841793379;
            continue;
          case 83:
            int num15 = flag6 ? -135430120 : (num15 = -1472085680);
            num1 = num15 ^ (int) num2 * -1121804739;
            continue;
          case 84:
            num1 = (int) num2 * 1839962400 ^ 1675216433;
            continue;
          case 85:
            this.msg = \u003CModule\u003E.\u202A⁮⁪⁮⁬⁮⁯‫⁫‭‍⁬‏‭‌‏​‪‭‮⁮⁮‌⁮‮‬‫⁮‍‬‍⁬‍⁫‍⁫​‍‏⁮‮<string>(3710729693U);
            flag3 = this.Board.From.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * -1551221661 ^ 1730252358;
            continue;
          default:
            goto label_94;
        }
        int num16;
        num1 = num16 = num3 != 0 ? -352785129 : (num16 = -279127680);
        continue;
label_89:
        flag5 = num4 != 0;
        flag7 = to.Piece == null & flag5;
        num1 = -192353982;
      }
label_3:
      return;
label_94:;
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = 2021876031;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2110987792)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1061261021 ^ -1590919600;
            continue;
          case 2:
            num1 = (int) num2 * -1388283201 ^ -676520421;
            continue;
          case 3:
            goto label_3;
          case 4:
            int num3 = flag ? -777792226 : (num3 = -1297966465);
            num1 = num3 ^ (int) num2 * 2092956693;
            continue;
          case 5:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1599173832 ^ -1775872946;
            continue;
          case 6:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * -154420426 ^ 482527933;
            continue;
          case 7:
            flag = this.Board.From != null;
            num1 = (int) num2 * -423453192 ^ 511157788;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void CaptPawn(Square from)
    {
      bool flag1 = this.Piece.Color == PieceColor.White;
label_1:
      int num1 = 1196648011;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 488670647)) % 34U)
        {
          case 0:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 430566285 ^ 1880760316;
              continue;
            }
            num3 = 0;
            goto label_34;
          case 1:
            flag3 = true;
            num1 = (int) num2 * 1492456264 ^ -833412766;
            continue;
          case 2:
            int num5 = !flag6 ? -231267771 : (num5 = -237698315);
            num1 = num5 ^ (int) num2 * -537009653;
            continue;
          case 3:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -599841232 ^ -923330447;
              continue;
            }
            num4 = 0;
            break;
          case 4:
            int num6 = flag1 ? -1256649012 : (num6 = -1091598581);
            num1 = num6 ^ (int) num2 * 1419503630;
            continue;
          case 5:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_34;
          case 6:
            int num7 = flag7 ? 1707039192 : (num7 = 22595706);
            num1 = num7 ^ (int) num2 * 379346312;
            continue;
          case 7:
            num1 = (int) num2 * 680791430 ^ -1701333033;
            continue;
          case 9:
            num1 = 2076499047;
            continue;
          case 10:
            num1 = (int) num2 * -410685349 ^ -49703852;
            continue;
          case 11:
            this.Piece = from.Piece;
            flag3 = false;
            num1 = 762615368;
            continue;
          case 12:
            goto label_1;
          case 13:
            flag2 = from.Piece.Color == PieceColor.White;
            num1 = 344007866;
            continue;
          case 14:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 15:
            flag5 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 120046469 ^ 765998759;
            continue;
          case 16:
            num1 = (int) num2 * 1161639964 ^ 905013729;
            continue;
          case 17:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = 1763648938;
            continue;
          case 18:
            num1 = (int) num2 * 1567907159 ^ -1816257106;
            continue;
          case 19:
            flag3 = true;
            num1 = (int) num2 * 109237368 ^ -1970026910;
            continue;
          case 20:
            this.handleBlackCastling();
            num1 = (int) num2 * -2109961861 ^ 1204990246;
            continue;
          case 21:
            int num8 = flag2 ? -2104369600 : (num8 = -1349074346);
            num1 = num8 ^ (int) num2 * -1774411532;
            continue;
          case 22:
            int num9 = flag4 ? -723526632 : (num9 = -417843071);
            num1 = num9 ^ (int) num2 * 367401967;
            continue;
          case 23:
            flag6 = flag5;
            num1 = (int) num2 * -666428352 ^ -1411306799;
            continue;
          case 24:
            this.handleWhiteCastling();
            num1 = (int) num2 * 1566309336 ^ -1475620707;
            continue;
          case 25:
            num1 = 913112299;
            continue;
          case 26:
            from.Piece = (ChessPiece) null;
            if (flag3)
            {
              num1 = 1370369853;
              continue;
            }
            goto label_61;
          case 27:
            num1 = (int) num2 * -1817003365 ^ 615460245;
            continue;
          case 28:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = 180349236;
            continue;
          case 29:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * -534887525 ^ -314930442;
            continue;
          case 30:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1236931274 ^ 2051117935;
            continue;
          case 31:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -2063256214 ^ -143386635;
            continue;
          case 32:
            flag4 = this.Piece.Color == PieceColor.Black;
            num1 = 1665377665;
            continue;
          case 33:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * -1337794890 ^ -2126827496;
            continue;
          default:
            goto label_42;
        }
        int num10;
        num1 = num10 = num4 == 0 ? 254953034 : (num10 = 811477674);
        continue;
label_34:
        flag7 = num3 != 0;
        num1 = 1325914597;
      }
label_42:
      Promotion promotion = new Promotion(Square.\u206B‭⁯⁪⁮‫‍⁬⁬⁫‮​‬‌⁫‬‍‌‍⁪‬‭‭⁭‮​‎‍‫‪​​⁬‭‫‫​​⁬‭‮());
      try
      {
        int num11 = (int) Square.\u200D⁬‫​⁬‮⁬‪⁫⁭⁮‫⁪‎‬‪‮⁭⁬‫​‪⁫‫‏‏​‌⁭⁫‫‬‫‍⁬‮‏‌⁭‮((Form) promotion);
label_44:
        int num12 = 1259991840;
        while (true)
        {
          uint num13;
          switch ((num13 = (uint) (num12 ^ 488670647)) % 4U)
          {
            case 0:
              goto label_44;
            case 1:
              num12 = (int) num13 * 1108976741 ^ -756024912;
              continue;
            case 3:
              this.Kind = promotion.Piece;
              num12 = (int) num13 * 1646479303 ^ -326176925;
              continue;
            default:
              goto label_55;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_49:
          int num14 = 482956856;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 488670647)) % 4U)
            {
              case 0:
                goto label_49;
              case 2:
                num14 = (int) num15 * -321073820 ^ -1924468402;
                continue;
              case 3:
                Square.\u202E⁮‍‬‪‭‬⁪⁭‏‫​‬‮⁫‍‎⁪‭‮‎⁪⁯‫⁯‏‍⁪‬‭⁬‎‬⁭‏⁪‌‬‎‬‮((IDisposable) promotion);
                num14 = (int) num15 * 1793917207 ^ 627195772;
                continue;
              default:
                goto label_54;
            }
          }
        }
label_54:;
      }
label_55:
label_56:
      int num16 = 280869089;
label_57:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ 488670647)) % 6U)
        {
          case 0:
            num16 = (int) num17 * -1731523268 ^ -1230789334;
            continue;
          case 1:
            this.SwitchPlayer();
            num16 = (int) num17 * 1219561038 ^ -474587240;
            continue;
          case 2:
            goto label_61;
          case 3:
            goto label_58;
          case 4:
            PlaySound.Play();
            num16 = (int) num17 * -611089586 ^ 1920405377;
            continue;
          case 5:
            goto label_56;
          default:
            goto label_51;
        }
      }
label_58:
      return;
label_51:
      return;
label_61:
      this.Board.lights.FindAllMoves();
      num16 = 1061073207;
      goto label_57;
    }

    private void MovePawn(Square from)
    {
      ChessPiece chessPiece = (ChessPiece) null;
label_1:
      int num1 = 1602280622;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ 1556065740)) % 31U)
        {
          case 0:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * -1244936382 ^ 1744281744;
            continue;
          case 1:
            int num6 = this.Piece.Kind == Pieces.Pawn ? 1472264630 : (num6 = 1071813964);
            num1 = num6 ^ (int) num2 * 325833811;
            continue;
          case 2:
            num3 = this.Rank == 4 ? 1 : 0;
            goto label_34;
          case 3:
            int num7 = flag4 ? 123832790 : (num7 = 1776978055);
            num1 = num7 ^ (int) num2 * -1035829421;
            continue;
          case 4:
            num1 = 588524160;
            continue;
          case 5:
            flag5 = false;
            num1 = 991048224;
            continue;
          case 6:
            flag5 = true;
            num1 = (int) num2 * 1973372680 ^ -50542279;
            continue;
          case 7:
            if (this.Rank != 3)
            {
              num1 = (int) num2 * -856047696 ^ 1954335588;
              continue;
            }
            num3 = 1;
            goto label_34;
          case 8:
            int num8 = !flag1 ? -1347069125 : (num8 = -867065485);
            num1 = num8 ^ (int) num2 * 1140874409;
            continue;
          case 9:
            num1 = 2030621593;
            continue;
          case 10:
            if (flag5)
            {
              num1 = (int) num2 * 736319872 ^ 1353597008;
              continue;
            }
            goto label_87;
          case 11:
            int num9 = !flag2 ? -54775933 : (num9 = -333658616);
            num1 = num9 ^ (int) num2 * -1197814319;
            continue;
          case 12:
            num1 = (int) num2 * 483973462 ^ 1747151909;
            continue;
          case 13:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              goto label_19;
            }
            else
            {
              num1 = (int) num2 * 946641429 ^ 1810402195;
              continue;
            }
          case 14:
            flag5 = true;
            num1 = (int) num2 * -1173731624 ^ -1746059171;
            continue;
          case 15:
            num5 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 16:
            goto label_1;
          case 17:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -122221194 ^ -654675046;
            continue;
          case 18:
            num1 = (int) num2 * 163113717 ^ -1966894001;
            continue;
          case 19:
            num1 = 588524160;
            continue;
          case 20:
            num1 = (int) num2 * -703049428 ^ -902598535;
            continue;
          case 21:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num5 = 0;
              break;
            }
            num1 = (int) num2 * 2055141437 ^ 412703496;
            continue;
          case 22:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            chessPiece = this.handleBlackCastling();
            num1 = 679645010;
            continue;
          case 24:
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * 820391082 ^ 1709775095;
            continue;
          case 25:
            this.Board.lastPassantPawn = (ChessPiece) null;
            num1 = (int) num2 * 1509603022 ^ 687361921;
            continue;
          case 26:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_19;
          case 27:
            from.Piece = (ChessPiece) null;
            num1 = 1613217803;
            continue;
          case 28:
            int num10 = !flag3 ? 774242245 : (num10 = 1882938715);
            num1 = num10 ^ (int) num2 * 397253204;
            continue;
          case 29:
            this.Piece = from.Piece;
            num1 = (int) num2 * -259749738 ^ -345519461;
            continue;
          case 30:
            flag1 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 1663621482 ^ 1947415079;
            continue;
          default:
            goto label_42;
        }
        flag2 = num5 != 0;
        num1 = 1816301698;
        continue;
label_19:
        flag3 = num4 != 0;
        num1 = 2055934777;
        continue;
label_34:
        flag4 = num3 != 0;
        num1 = 1931119095;
      }
label_42:
      Promotion promotion = new Promotion(Square.\u206B‭⁯⁪⁮‫‍⁬⁬⁫‮​‬‌⁫‬‍‌‍⁪‬‭‭⁭‮​‎‍‫‪​​⁬‭‫‫​​⁬‭‮());
      try
      {
label_44:
        int num11 = 462990551;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 1556065740)) % 4U)
          {
            case 0:
              goto label_44;
            case 2:
              num11 = (int) num12 * -266445069 ^ 921115823;
              continue;
            case 3:
              int num13 = (int) Square.\u200D⁬‫​⁬‮⁬‪⁫⁭⁮‫⁪‎‬‪‮⁭⁬‫​‪⁫‫‏‏​‌⁭⁫‫‬‫‍⁬‮‏‌⁭‮((Form) promotion);
              this.Kind = promotion.Piece;
              num11 = (int) num12 * 180467763 ^ 744937915;
              continue;
            default:
              goto label_55;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_49:
          int num14 = 90598693;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 1556065740)) % 4U)
            {
              case 1:
                Square.\u202E⁮‍‬‪‭‬⁪⁭‏‫​‬‮⁫‍‎⁪‭‮‎⁪⁯‫⁯‏‍⁪‬‭⁬‎‬⁭‏⁪‌‬‎‬‮((IDisposable) promotion);
                num14 = (int) num15 * 742853075 ^ 495774473;
                continue;
              case 2:
                num14 = (int) num15 * -681404812 ^ -321994748;
                continue;
              case 3:
                goto label_49;
              default:
                goto label_54;
            }
          }
        }
label_54:;
      }
label_55:
label_56:
      int num16 = 1655995598;
label_57:
      while (true)
      {
        uint num17;
        bool flag6;
        bool flag7;
        Square square1;
        int file;
        int rank;
        bool isOnCheck;
        bool flag8;
        bool flag9;
        bool flag10;
        Square square2;
        switch ((num17 = (uint) (num16 ^ 1556065740)) % 51U)
        {
          case 0:
            num16 = (int) num17 * -1805190802 ^ 1317320462;
            continue;
          case 1:
            this.Board.WhiteCanCastleQueenSide = true;
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * 1721855495 ^ -525017244;
            continue;
          case 2:
            goto label_56;
          case 3:
            flag10 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * 1395993172 ^ 1524207188;
            continue;
          case 4:
            isOnCheck = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -1683143113 ^ 2011801196;
            continue;
          case 5:
            num16 = (int) num17 * 1698701825 ^ -1133441053;
            continue;
          case 6:
            num16 = (int) num17 * 1168494382 ^ 1872294520;
            continue;
          case 7:
            num16 = 1372681216;
            continue;
          case 8:
            flag9 = flag1;
            num16 = (int) num17 * 1539411640 ^ 2125923905;
            continue;
          case 9:
            this.SwitchPlayer();
            num16 = (int) num17 * -3528625 ^ -788688284;
            continue;
          case 10:
            this.Board.lights.FindAllMoves();
            num16 = (int) num17 * 772511795 ^ 1078867390;
            continue;
          case 11:
            this.Piece = (ChessPiece) null;
            num16 = (int) num17 * 2119075832 ^ -1558812240;
            continue;
          case 12:
            num16 = (int) num17 * 348346593 ^ -460244533;
            continue;
          case 13:
            int num18 = !isOnCheck ? -968715461 : (num18 = -836429548);
            num16 = num18 ^ (int) num17 * -1312252295;
            continue;
          case 14:
            num16 = (int) num17 * 529426162 ^ -1719780865;
            continue;
          case 15:
            square1.Piece = chessPiece;
            num16 = (int) num17 * -51132406 ^ 769743500;
            continue;
          case 16:
            num16 = (int) num17 * 562286529 ^ 1606488951;
            continue;
          case 17:
            flag6 = this.Board.lights.KingColorOnCheck == this.Piece.Color;
            num16 = (int) num17 * 261052401 ^ 2109296360;
            continue;
          case 18:
            square2 = this.Board[0, rank];
            break;
          case 19:
            num16 = (int) num17 * 1211334741 ^ -18911795;
            continue;
          case 20:
            int num19;
            num16 = num19 = chessPiece == null ? 2023708485 : (num19 = 32570530);
            continue;
          case 21:
            int num20;
            num16 = num20 = !flag10 ? 383458471 : (num20 = 1053762510);
            continue;
          case 22:
            num16 = (int) num17 * 1993458433 ^ -1168462589;
            continue;
          case 23:
            num16 = 962829195;
            continue;
          case 24:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            this.Board.BlackCanCastleQueenSide = true;
            num16 = (int) num17 * 2132849242 ^ 1431134994;
            continue;
          case 25:
            int num21 = flag9 ? -400090156 : (num21 = -181846686);
            num16 = num21 ^ (int) num17 * 1151564621;
            continue;
          case 26:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * 299948020 ^ 1326236666;
            continue;
          case 27:
            num16 = (int) num17 * -45335273 ^ 1703841437;
            continue;
          case 28:
            num16 = (int) num17 * 1025967994 ^ 1424765061;
            continue;
          case 29:
            goto label_87;
          case 30:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = 714238345;
            continue;
          case 31:
            file = chessPiece.Current.File;
            num16 = (int) num17 * 1227017793 ^ -820196381;
            continue;
          case 32:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * -480827068 ^ -462453907;
            continue;
          case 33:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = 1134374780;
            continue;
          case 34:
            this.msg = \u003CModule\u003E.\u202A⁮⁪⁮⁬⁮⁯‫⁫‭‍⁬‏‭‌‏​‪‭‮⁮⁮‌⁮‮‬‫⁮‍‬‍⁬‍⁫‍⁫​‍‏⁮‮<string>(1382029418U);
            num16 = (int) num17 * 945123452 ^ -771247112;
            continue;
          case 35:
            goto label_58;
          case 36:
            flag8 = flag1;
            num16 = (int) num17 * -1746854642 ^ -1054041921;
            continue;
          case 37:
            rank = chessPiece.Current.Rank;
            if (file == 5)
            {
              square2 = this.Board[7, rank];
              break;
            }
            num16 = (int) num17 * -980529310 ^ 772499378;
            continue;
          case 38:
            PlaySound.Play();
            num16 = 382284430;
            continue;
          case 39:
            this.msg = \u003CModule\u003E.\u202E‏‭⁫‪‎‬⁮⁬⁫‫⁭‬‮‎⁯‭⁪‮⁬⁭‎‫⁫⁫‬‍⁬​‌⁮‭‫⁯⁪​​⁯​⁫‮<string>(3192386942U);
            num16 = (int) num17 * -803473198 ^ 882466295;
            continue;
          case 40:
            num16 = (int) num17 * -642039373 ^ -1177489332;
            continue;
          case 41:
            int num22 = flag7 ? -599933138 : (num22 = -1068999718);
            num16 = num22 ^ (int) num17 * 2004421462;
            continue;
          case 42:
            num16 = (int) num17 * 92446891 ^ -527234417;
            continue;
          case 43:
            num16 = 1682642940;
            continue;
          case 44:
            int num23 = flag8 ? 2064199397 : (num23 = 1265268336);
            num16 = num23 ^ (int) num17 * 1554143936;
            continue;
          case 45:
            int num24 = flag6 ? 1962524449 : (num24 = 1083331625);
            num16 = num24 ^ (int) num17 * -1266593099;
            continue;
          case 46:
            flag10 = true;
            flag7 = this.Piece.Kind == Pieces.King;
            num16 = (int) num17 * 1740861931 ^ 343347627;
            continue;
          case 47:
            this.Board.lights.FindAllMoves();
            num16 = 1288547234;
            continue;
          case 48:
            from.Piece = this.Piece;
            num16 = (int) num17 * -579414308 ^ -827176229;
            continue;
          case 49:
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * -548644284 ^ 1727493254;
            continue;
          case 50:
            num16 = 562909082;
            continue;
          default:
            goto label_51;
        }
        square1 = square2;
        num16 = 1945099812;
      }
label_58:
      return;
label_51:
      return;
label_87:
      this.Board.lights.IsOnCheck = false;
      num16 = 114922682;
      goto label_57;
    }

    private ChessPiece handleBlackCastling()
    {
label_1:
      int num1 = -788089170;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        Square square1;
        ChessPiece chessPiece2;
        Square square2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -388073970)) % 42U)
        {
          case 0:
            square2.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * 723200272 ^ -1559255945;
            continue;
          case 1:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * 2129920280 ^ -1537790836;
            continue;
          case 2:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * -1031666020 ^ -357967363;
            continue;
          case 3:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * 244156316 ^ 605879322;
            continue;
          case 4:
            num1 = (int) num2 * -2034125876 ^ 1807677067;
            continue;
          case 5:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 6:
            chessPiece1 = chessPiece2;
            num1 = -1270635266;
            continue;
          case 7:
            num1 = -1840953506;
            continue;
          case 8:
            square1.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * -1754443026 ^ 915047099;
            continue;
          case 9:
            num1 = (int) num2 * -1149815138 ^ 457107481;
            continue;
          case 10:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * -740137666 ^ -2061197842;
            continue;
          case 11:
            this.Board.BlackCanCastleQueenSide = false;
            this.Board.BlackCanCastleKingSide = false;
            num1 = -1986452883;
            continue;
          case 12:
            int num5;
            num1 = num5 = this.Piece.Current.File != 2 ? -1475486884 : (num5 = -1293235309);
            continue;
          case 13:
            square2 = this.Board[5, 7];
            num1 = (int) num2 * -761168770 ^ 1129611922;
            continue;
          case 14:
            flag1 = this.Piece.Current.File == 6;
            num1 = -1550347097;
            continue;
          case 15:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 2026237408 ^ 1410570008;
            continue;
          case 16:
            num1 = (int) num2 * -390074876 ^ 504348560;
            continue;
          case 17:
            num1 = -2055558804;
            continue;
          case 18:
            num1 = (int) num2 * 310414433 ^ -78413228;
            continue;
          case 19:
            int num6 = !flag2 ? -1311455499 : (num6 = -895799069);
            num1 = num6 ^ (int) num2 * -980509596;
            continue;
          case 20:
            num4 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            goto label_38;
          case 21:
            this.Board.BlackCanCastleKingSide = false;
            num1 = -1649249455;
            continue;
          case 22:
            num1 = (int) num2 * -1674439446 ^ 683428899;
            continue;
          case 23:
            square1 = this.Board[3, 7];
            num1 = (int) num2 * 1863875695 ^ -1655911165;
            continue;
          case 24:
            int num7 = flag4 ? 2048043948 : (num7 = 748081932);
            num1 = num7 ^ (int) num2 * -173858224;
            continue;
          case 26:
            num1 = (int) num2 * -885356536 ^ -322831469;
            continue;
          case 27:
            int num8 = flag1 ? -1597422094 : (num8 = -1440399490);
            num1 = num8 ^ (int) num2 * 1971417453;
            continue;
          case 28:
            num1 = (int) num2 * 514651755 ^ 348802447;
            continue;
          case 29:
            num1 = (int) num2 * 1028097370 ^ -1230911969;
            continue;
          case 30:
            num1 = (int) num2 * -1479149369 ^ 1758704663;
            continue;
          case 31:
            num1 = -835315003;
            continue;
          case 32:
            flag2 = Square.\u200D⁪‬‏⁭⁮‭⁮‮‬‌⁭‫‏⁬‭‬‬⁪⁪‏‍⁬‌‬‍‎⁪‏‪‬⁪⁮‎‎⁮‮‎⁭‏‮(this.Piece.Home.Name, \u003CModule\u003E.\u202E‏‭⁫‪‎‬⁮⁬⁫‫⁭‬‮‎⁯‭⁪‮⁬⁭‎‫⁫⁫‬‍⁬​‌⁮‭‫⁯⁪​​⁯​⁫‮<string>(1845922413U));
            num1 = (int) num2 * -121290048 ^ -1748364519;
            continue;
          case 33:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * -131508744 ^ 1708058676;
            continue;
          case 34:
            if (!this.Board.BlackCanCastleKingSide)
            {
              num1 = (int) num2 * 1723906374 ^ -910934250;
              continue;
            }
            num4 = 1;
            goto label_38;
          case 35:
            int num9 = !flag3 ? -1173614639 : (num9 = -752720296);
            num1 = num9 ^ (int) num2 * -425742756;
            continue;
          case 36:
            int num10 = this.Piece.Kind != Pieces.Rook ? 646342188 : (num10 = 239488808);
            num1 = num10 ^ (int) num2 * -487233192;
            continue;
          case 37:
            goto label_1;
          case 38:
            num1 = (int) num2 * 790045656 ^ -412451348;
            continue;
          case 39:
            if (this.Piece.Kind == Pieces.King)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 104847957 ^ 1652960970;
            continue;
          case 40:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * 1817526520 ^ -191044260;
            continue;
          case 41:
            num1 = (int) num2 * 1146254828 ^ -2002549917;
            continue;
          default:
            goto label_49;
        }
        flag3 = num3 != 0;
        num1 = -1451239539;
        continue;
label_38:
        flag4 = num4 != 0;
        num1 = -756459744;
      }
label_49:
      return chessPiece1;
    }

    private ChessPiece handleWhiteCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
label_1:
      int num1 = 1099663260;
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        Square square1;
        bool flag3;
        Square square2;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 69887233)) % 39U)
        {
          case 0:
            num1 = 848182056;
            continue;
          case 1:
            num1 = (int) num2 * -1816455173 ^ -1102278165;
            continue;
          case 2:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * -1831050321 ^ -1651716795;
            continue;
          case 3:
            num1 = (int) num2 * -1222005130 ^ 161448091;
            continue;
          case 4:
            num1 = (int) num2 * -1187436017 ^ -1333622659;
            continue;
          case 5:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 988724272;
            continue;
          case 6:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * 1195573836 ^ -1747399665;
            continue;
          case 7:
            square1 = this.Board[5, 0];
            num1 = (int) num2 * -1326398175 ^ -46874208;
            continue;
          case 8:
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -607840355 ^ 1042147131;
            continue;
          case 9:
            num1 = (int) num2 * -2000782750 ^ -2130145061;
            continue;
          case 10:
            this.Board.WhiteCanCastleQueenSide = false;
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 589970172;
            continue;
          case 11:
            square1.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * 910609374 ^ 1297074279;
            continue;
          case 12:
            int num5 = flag2 ? -1184170291 : (num5 = -1690397844);
            num1 = num5 ^ (int) num2 * 710506271;
            continue;
          case 13:
            if (!this.Board.WhiteCanCastleKingSide)
            {
              num1 = (int) num2 * 896058493 ^ -674668667;
              continue;
            }
            num3 = 1;
            break;
          case 14:
            num1 = (int) num2 * -574702107 ^ 567694049;
            continue;
          case 15:
            num1 = (int) num2 * 1900351204 ^ -892512612;
            continue;
          case 16:
            square2 = this.Board[3, 0];
            num1 = (int) num2 * 512943654 ^ -1117430032;
            continue;
          case 17:
            int num6 = !flag4 ? -124059956 : (num6 = -1755810334);
            num1 = num6 ^ (int) num2 * -1524408049;
            continue;
          case 18:
            int num7 = !flag3 ? 1172449821 : (num7 = 1191344510);
            num1 = num7 ^ (int) num2 * -865243595;
            continue;
          case 19:
            int num8;
            num1 = num8 = this.Piece.Current.File != 6 ? 547644752 : (num8 = 497211936);
            continue;
          case 20:
            chessPiece2 = chessPiece1;
            num1 = 955336431;
            continue;
          case 22:
            int num9 = !flag1 ? 863503617 : (num9 = 1985770388);
            num1 = num9 ^ (int) num2 * -433615606;
            continue;
          case 23:
            num1 = (int) num2 * 592240174 ^ -1014834396;
            continue;
          case 24:
            flag1 = Square.\u200D⁪‬‏⁭⁮‭⁮‮‬‌⁭‫‏⁬‭‬‬⁪⁪‏‍⁬‌‬‍‎⁪‏‪‬⁪⁮‎‎⁮‮‎⁭‏‮(this.Piece.Home.Name, \u003CModule\u003E.\u202E‏‭⁫‪‎‬⁮⁬⁫‫⁭‬‮‎⁯‭⁪‮⁬⁭‎‫⁫⁫‬‍⁬​‌⁮‭‫⁯⁪​​⁯​⁫‮<string>(1003493051U));
            num1 = (int) num2 * -2076579221 ^ -1752876894;
            continue;
          case 25:
            num1 = (int) num2 * -1501021544 ^ -36694712;
            continue;
          case 26:
            num1 = 1892561161;
            continue;
          case 27:
            num1 = 175714643;
            continue;
          case 28:
            goto label_1;
          case 29:
            num1 = 423746286;
            continue;
          case 30:
            flag3 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * -1160884549 ^ -1726778414;
            continue;
          case 31:
            num3 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            break;
          case 32:
            num1 = (int) num2 * -525388851 ^ -159210886;
            continue;
          case 33:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_45;
          case 34:
            square2.Piece = this.Board[0, 0].Piece;
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -284299767 ^ 1335146513;
            continue;
          case 35:
            flag4 = this.Piece.Current.File == 2;
            num1 = (int) num2 * -680264138 ^ 2034141989;
            continue;
          case 36:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 1988216954 ^ -31466435;
              continue;
            }
            num4 = 1;
            goto label_45;
          case 37:
            num1 = (int) num2 * 1189782174 ^ 1984367424;
            continue;
          case 38:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 2028746180 ^ -847172128;
            continue;
          default:
            goto label_46;
        }
        flag2 = num3 != 0;
        num1 = 854062399;
        continue;
label_45:
        int num10;
        num1 = num10 = num4 == 0 ? 848182056 : (num10 = 1267712386);
      }
label_46:
      return chessPiece2;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove() => Square.\u206A‫⁭‌‌​⁮⁮‮⁫⁭‪‍‮‎‍​‍‭⁯‭⁪⁫‭​‫‎⁪‌‏⁫‌​‮‫⁭‍⁬‍⁭‮((Control) this.panel1, (Image) null);

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = -1288840778;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -740701775)) % 7U)
        {
          case 0:
            num1 = (int) num2 * -2033892202 ^ 1822551608;
            continue;
          case 1:
            base.Dispose(disposing);
            num1 = -2039969374;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          case 4:
            if (!disposing)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -1584543780 ^ -1006640910;
            continue;
          case 5:
            Square.\u202E⁮‍‬‪‭‬⁪⁭‏‫​‬‮⁫‍‎⁪‭‮‎⁪⁯‫⁯‏‍⁪‬‭⁬‎‬⁭‏⁪‌‬‎‬‮((IDisposable) this.components);
            num1 = (int) num2 * 1175270248 ^ -1577209756;
            continue;
          case 6:
            num3 = this.components != null ? 1 : 0;
            break;
          default:
            goto label_12;
        }
        int num4;
        num1 = num4 = num3 == 0 ? -1424805412 : (num4 = -420924670);
      }
label_3:
      return;
label_12:;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = 1822441364;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1951639399)) % 11U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1642734272 ^ 297833339;
            continue;
          case 2:
            this.Name = \u003CModule\u003E.\u200C‏‮‬‮⁭‎⁯‎‫‏⁬⁯⁬⁬‏‌‏⁪‬⁫‎‫⁮‮‎‎‏‮‎‭⁬‫⁯⁬⁭⁮‎‪‎‮<string>(2974069139U);
            Square.\u206A‮‍‬‍‎‪‍‫⁯⁭⁪‪‍⁬‪‬⁫‫⁮‫⁮⁪⁭⁯⁭‮‭‎‫‮‮‍‭‪‌​‏‪‎‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * -1719157449 ^ -1347848256;
            continue;
          case 3:
            Square.\u206B‌⁯⁯​⁯‭⁮‏‌⁮⁮⁫​‬‌⁭‏⁯‏⁭‫‭⁪⁬⁯⁪‌‏‏⁬‏‎‪​⁭‭‮‭‮((Control) this);
            num1 = (int) num2 * 410152164 ^ -1520747337;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * 1480346964 ^ -1653849514;
            continue;
          case 6:
            Square.\u200F⁬‍​⁬⁪⁭⁮‮‍‫‬‏‪‌‎⁫‪‎‌⁬‎‏‎‪‫‮⁪‬‬‫⁭​‫⁬‫⁬⁫‭‮‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -953893338 ^ -411337289;
            continue;
          case 7:
            Square.\u200B‫‮‎‎‪‏‬‮‎‭⁬⁫‍⁭⁮‫⁯‎‍⁫‌‫‫‭‏⁮‏⁫⁪‌⁪‌⁬‍‎‌⁮‏‬‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * 381628035 ^ 1512041794;
            continue;
          case 8:
            Square.\u206E⁫⁫‏‮‬‮⁪⁫‮‮⁯​‮⁭⁯⁫⁮‪⁭‍‬‫⁭⁭‬⁫‫⁬⁯‎⁫‮‬⁯⁫⁬‍‍‌‮((Control) this, ImageLayout.Center);
            Square.\u206A‍⁬‌‌‌‪‫⁮⁮‎‍​⁯‍⁪‫‮‬​‭⁭⁪‌‌‍‬‍⁬⁯⁭‍⁮⁭⁬‫⁮‌‏⁬‮((Control) this, new Padding(0));
            num1 = (int) num2 * -1542337796 ^ -1016790470;
            continue;
          case 9:
            num1 = (int) num2 * 325196102 ^ -845333760;
            continue;
          case 10:
            Square.\u200C⁫‬​⁬‭‭⁯‬⁯⁯‎‬⁭‏⁭⁯⁮⁭‪⁫⁬⁯‬‪‪​⁪⁪‬‭‮⁮⁫⁯‫‫⁫‫‫‮((Control) this, false);
            num1 = (int) num2 * 514823249 ^ 691089045;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    static Delegate \u206C‌‍‍‪‬⁮‫‮‏‫‪⁭⁬‬‎⁭⁪‭‫⁫‏⁫‌‎‎⁫⁫⁫‌‍⁮⁬‌‮⁭⁫⁯‬⁭‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u202A‌‫‎‌‬‮‌⁪⁮‎‬⁯‪‫‪⁫‪‫⁪‌⁫‮‎⁭‍‍⁭​⁬​​⁪⁪‮‬‏‭‫⁬‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u202B​‌⁪‭‍‫‭‫⁬⁯‌⁫‎⁮⁬‭‏‍⁮⁬‭‌​‪⁪‌​⁭‬⁪⁫⁮⁫⁪⁮⁫​⁪‬‮([In] object obj0) => obj0.ToString();

    static string \u206A​‌‌⁭‮‍⁭‭‪‪‌‮⁬⁯⁫‎‌‫​⁮‫⁯‍​⁮​‎‍⁮‏⁭⁫‫⁪‭​‍⁭‭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u200E‎‏‮‫‎‮⁮‪⁮‍‏⁭‌⁯⁫‬⁯‍⁬​‬‍⁯‍‭‬‬‫‭⁯‏‮‭⁬‪​⁯‫‌‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u202B‎⁮‎⁮‬⁮‎‬‍⁮‮⁬‭⁯⁫⁮‎​‍⁮‪‬⁫⁮⁯‮⁮‫⁯‌‫⁯‫‬⁭‭‮‭⁭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u202B‎⁫⁮‌⁮​‌‭⁫‬‬‭‎‭⁪⁪⁪​​‫‬⁮‬⁫⁫‌⁭‮⁫‫‭⁫‬⁮⁯‌​⁫‮‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u206C⁪‏‮‬‍‬‪‫‫⁯‏⁭‫‬⁯​⁫⁮⁯‫⁮⁮‬‎​‏‎⁫⁮‭‏‫⁭‍⁪⁪‮‌⁪‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u206B‭⁯⁪⁮‫‍⁬⁬⁫‮​‬‌⁫‬‍‌‍⁪‬‭‭⁭‮​‎‍‫‪​​⁬‭‫‫​​⁬‭‮() => Cursor.Position;

    static DialogResult \u200D⁬‫​⁬‮⁬‪⁫⁭⁮‫⁪‎‬‪‮⁭⁬‫​‪⁫‫‏‏​‌⁭⁫‫‬‫‍⁬‮‏‌⁭‮([In] Form obj0) => obj0.ShowDialog();

    static void \u202E⁮‍‬‪‭‬⁪⁭‏‫​‬‮⁫‍‎⁪‭‮‎⁪⁯‫⁯‏‍⁪‬‭⁬‎‬⁭‏⁪‌‬‎‬‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u200D⁪‬‏⁭⁮‭⁮‮‬‌⁭‫‏⁬‭‬‬⁪⁪‏‍⁬‌‬‍‎⁪‏‪‬⁪⁮‎‎⁮‮‎⁭‏‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u206A‫⁭‌‌​⁮⁮‮⁫⁭‪‍‮‎‍​‍‭⁯‭⁪⁫‭​‫‎⁪‌‏⁫‌​‮‫⁭‍⁬‍⁭‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u206B‌⁯⁯​⁯‭⁮‏‌⁮⁮⁫​‬‌⁭‏⁯‏⁭‫‭⁪⁬⁯⁪‌‏‏⁬‏‎‪​⁭‭‮‭‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u200F⁬‍​⁬⁪⁭⁮‮‍‫‬‏‪‌‎⁫‪‎‌⁬‎‏‎‪‫‮⁪‬‬‫⁭​‫⁬‫⁬⁫‭‮‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u200B‫‮‎‎‪‏‬‮‎‭⁬⁫‍⁭⁮‫⁯‎‍⁫‌‫‫‭‏⁮‏⁫⁪‌⁪‌⁬‍‎‌⁮‏‬‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u206E⁫⁫‏‮‬‮⁪⁫‮‮⁯​‮⁭⁯⁫⁮‪⁭‍‬‫⁭⁭‬⁫‫⁬⁯‎⁫‮‬⁯⁫⁬‍‍‌‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206A‍⁬‌‌‌‪‫⁮⁮‎‍​⁯‍⁪‫‮‬​‭⁭⁪‌‌‍‬‍⁬⁯⁭‍⁮⁭⁬‫⁮‌‏⁬‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u206A‮‍‬‍‎‪‍‫⁯⁭⁪‪‍⁬‪‬⁫‫⁮‫⁮⁪⁭⁯⁭‮‭‎‫‮‮‍‭‪‌​‏‪‎‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200C⁫‬​⁬‭‭⁯‬⁯⁯‎‬⁭‏⁭⁯⁮⁭‪⁫⁬⁯‬‪‪​⁪⁪‬‭‮⁮⁫⁯‫‫⁫‫‫‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
