// Decompiled with JetBrains decompiler
// Type: NChanges.MemberInfoCollectionExtensions
// Assembly: FUNCD, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 38B3918C-7BBD-4048-BF6D-F5A856A1A18A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Convagent.gen-2f81e8b71640e7b5770deccc56c23d75240c34a5914dcb138ec2972e624a0f03.exe

using System;
using System.Collections.Generic;
using System.Linq;

namespace NChanges
{
  public static class MemberInfoCollectionExtensions
  {
    public static MemberInfo Get(this ICollection<MemberInfo> source, string name) => source.Single<MemberInfo>((Func<MemberInfo, bool>) (m => m.Name == name));

    public static MemberInfo Get(
      this ICollection<MemberInfo> source,
      MemberInfo memberInfo)
    {
      return source.IsOverloaded(memberInfo.Name) ? source.Single<MemberInfo>((Func<MemberInfo, bool>) (m => m.Name == memberInfo.Name && MemberInfoCollectionExtensions.MatchParameter(m, memberInfo))) : source.Get(memberInfo.Name);
    }

    public static MemberInfo TryGet(
      this ICollection<MemberInfo> source,
      MemberInfo memberInfo)
    {
      return source.IsOverloaded(memberInfo.Name) ? source.SingleOrDefault<MemberInfo>((Func<MemberInfo, bool>) (m => m.Name == memberInfo.Name && MemberInfoCollectionExtensions.MatchParameter(m, memberInfo))) : source.Get(memberInfo.Name);
    }

    private static bool MatchParameter(MemberInfo current, MemberInfo previous)
    {
      if (current.Parameters.Count<ParameterInfo>() != previous.Parameters.Count<ParameterInfo>())
        return false;
      for (int index = 0; index < current.Parameters.Count<ParameterInfo>(); ++index)
      {
        if (current.Parameters[index].Type != previous.Parameters[index].Type)
          return false;
      }
      return true;
    }

    public static bool Contains(this ICollection<MemberInfo> source, string name) => source.Any<MemberInfo>((Func<MemberInfo, bool>) (m => m.Name == name));

    public static bool IsOverloaded(this ICollection<MemberInfo> source, string name) => source.Count<MemberInfo>((Func<MemberInfo, bool>) (m => m.Name == name)) > 1;
  }
}
