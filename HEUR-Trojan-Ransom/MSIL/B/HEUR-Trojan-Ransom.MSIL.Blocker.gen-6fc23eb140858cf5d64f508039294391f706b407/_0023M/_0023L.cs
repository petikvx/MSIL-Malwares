// Decompiled with JetBrains decompiler
// Type: #M.#L
// Assembly: XtremeLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FF5C2739-BB51-401B-85EA-0335ADE5C685
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-6fc23eb140858cf5d64f508039294391f706b407.exe

using \u0023M;
using \u0023V;
using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0023M
{
  internal sealed class \u0023L
  {
    private static readonly string \u0023F = "0";
    private static readonly string \u0023G = "68";
    private static readonly byte[] \u0023H = (byte[]) null;
    private static readonly Hashtable \u0023j = (Hashtable) null;
    private static readonly bool \u0023I = false;
    private static readonly int \u0023J = 0;

    [\u0023N]
    [\u0023O]
    public static string \u0023K([In] int obj0)
    {
      obj0 -= \u0023L.\u0023J;
      if (\u0023L.\u0023I)
      {
        string str = (string) \u0023L.\u0023j[(object) obj0];
        if (str != null)
          return str;
      }
      int num1 = obj0;
      byte[] h1 = \u0023L.\u0023H;
      int index1 = num1;
      int index2 = index1 + 1;
      int num2 = (int) h1[index1];
      int count;
      if ((num2 & 128) == 0)
      {
        count = num2;
        if (count == 0)
          return string.Empty;
      }
      else if ((num2 & 64) == 0)
      {
        count = ((num2 & 63) << 8) + (int) \u0023L.\u0023H[index2++];
      }
      else
      {
        int num3 = (num2 & 31) << 24;
        byte[] h2 = \u0023L.\u0023H;
        int index3 = index2;
        int num4 = index3 + 1;
        int num5 = (int) h2[index3] << 16;
        int num6 = num3 + num5;
        byte[] h3 = \u0023L.\u0023H;
        int index4 = num4;
        int num7 = index4 + 1;
        int num8 = (int) h3[index4] << 8;
        int num9 = num6 + num8;
        byte[] h4 = \u0023L.\u0023H;
        int index5 = num7;
        index2 = index5 + 1;
        int num10 = (int) h4[index5];
        count = num9 + num10;
      }
      try
      {
        byte[] bytes = Convert.FromBase64String(Encoding.UTF8.GetString(\u0023L.\u0023H, index2, count));
        string str = string.Intern(Encoding.UTF8.GetString(bytes, 0, bytes.Length));
        if (\u0023L.\u0023I)
        {
          try
          {
            \u0023L.\u0023j.Add((object) obj0, (object) str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static \u0023L()
    {
      if (\u0023L.\u0023F == "1")
      {
        \u0023L.\u0023I = true;
        \u0023L.\u0023j = new Hashtable();
      }
      \u0023L.\u0023J = Convert.ToInt32(\u0023L.\u0023G);
      using (Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("{84e31225-23da-4bfd-afd9-009e15582647}"))
      {
        int int32 = Convert.ToInt32(manifestResourceStream.Length);
        byte[] buffer = new byte[int32];
        manifestResourceStream.Read(buffer, 0, int32);
        \u0023L.\u0023H = \u00232.\u00231(buffer);
        manifestResourceStream.Close();
      }
    }
  }
}
