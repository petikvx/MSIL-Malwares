// Decompiled with JetBrains decompiler
// Type: Core.Helpers.Checks
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using Core.Extensions;
using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace Core.Helpers
{
  public class Checks
  {
    internal Checks()
    {
    }

    public class Argument
    {
      internal Argument()
      {
      }

      [DebuggerStepThrough]
      public static void IsNotEmpty(Guid argument, string argumentName)
      {
        if (argument == Guid.Empty)
          throw new ArgumentException("\"{0}\" cannot be empty guid.".FormatWith((object) argumentName), argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotEmpty(string argument, string argumentName)
      {
        if (string.IsNullOrEmpty((argument ?? string.Empty).Trim()))
          throw new ArgumentException("\"{0}\" cannot be blank.".FormatWith((object) argumentName), argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotOutOfLength(string argument, int length, string argumentName)
      {
        if (argument.Trim().Length > length)
          throw new ArgumentException("\"{0}\" cannot be more than {1} character.".FormatWith((object) argumentName, (object) length), argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotNull(object argument, string argumentName)
      {
        if (argument == null)
          throw new ArgumentNullException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotNegative(int argument, string argumentName)
      {
        if (argument < 0)
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotNegativeOrZero(int argument, string argumentName)
      {
        if (argument <= 0)
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotNegative(long argument, string argumentName)
      {
        if (argument < 0L)
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotNegativeOrZero(long argument, string argumentName)
      {
        if (argument <= 0L)
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotNegative(float argument, string argumentName)
      {
        if ((double) argument < 0.0)
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotNegativeOrZero(float argument, string argumentName)
      {
        if ((double) argument <= 0.0)
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotNegative(Decimal argument, string argumentName)
      {
        if (argument < 0M)
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotNegativeOrZero(Decimal argument, string argumentName)
      {
        if (argument <= 0M)
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotInvalidDate(DateTime argument, string argumentName)
      {
        if (!argument.IsValid())
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotInPast(DateTime argument, string argumentName)
      {
        if (argument < SystemTime.Now())
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotInFuture(DateTime argument, string argumentName)
      {
        if (argument > SystemTime.Now())
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotNegative(TimeSpan argument, string argumentName)
      {
        if (argument < TimeSpan.Zero)
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotNegativeOrZero(TimeSpan argument, string argumentName)
      {
        if (argument <= TimeSpan.Zero)
          throw new ArgumentOutOfRangeException(argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotEmpty<T>(ICollection<T> argument, string argumentName)
      {
        Checks.Argument.IsNotNull((object) argument, argumentName);
        if (argument.Count == 0)
          throw new ArgumentException("Collection cannot be empty.", argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotOutOfRange(int argument, int min, int max, string argumentName)
      {
        if (argument < min || argument > max)
          throw new ArgumentOutOfRangeException(argumentName, "{0} must be between \"{1}\"-\"{2}\".".FormatWith((object) argumentName, (object) min, (object) max));
      }

      [DebuggerStepThrough]
      public static void IsNotInvalidEmail(string argument, string argumentName)
      {
        Checks.Argument.IsNotEmpty(argument, argumentName);
        if (!argument.IsEmail())
          throw new ArgumentException("\"{0}\" is not a valid email address.".FormatWith((object) argumentName), argumentName);
      }

      [DebuggerStepThrough]
      public static void IsNotInvalidWebUrl(string argument, string argumentName)
      {
        Checks.Argument.IsNotEmpty(argument, argumentName);
        if (!argument.IsWebUrl())
          throw new ArgumentException("\"{0}\" is not a valid web url.".FormatWith((object) argumentName), argumentName);
      }
    }
  }
}
