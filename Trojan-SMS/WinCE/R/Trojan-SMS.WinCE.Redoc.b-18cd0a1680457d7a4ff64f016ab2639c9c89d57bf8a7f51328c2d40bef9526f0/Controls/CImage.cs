// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CImage
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using Dbasic.Other;
using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class CImage : CControls
  {
    public CImage(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedImage control = (CEnhancedImage) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      switch (str)
      {
        case "loadpicture":
          RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          control.picFile = runReturn1.vString;
          this.LoadPicture(control);
          ++place.WordI;
          return new MethodReturn(place);
        case "image":
          if (assign)
          {
            RunReturn runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
            place = runReturn2.place;
            control.picFile = runReturn2.vString;
            if (runReturn2.vString.Length == 0)
              control.Image = (Image) null;
            else
              this.LoadPicture(control);
            return new MethodReturn(place);
          }
          this.CRunner.returnObject = (object) control.ReturnImage;
          return new MethodReturn(place, "~" + control.name + ".", 0.0);
        case "mode":
          if (!assign)
            return new MethodReturn(place, control.imageMode, 0.0);
          RunReturn runReturn3 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn3.place;
          control.imageMode = runReturn3.vString;
          this.LoadPicture(control);
          return new MethodReturn(place);
        default:
          return this.CRunner.htSharedProperties.Contains((object) str) ? this.CRunner.SharedProperties((Control) control, str, ref place, assign, ref locals) : new MethodReturn(place);
      }
    }

    public MethodReturn addImage(Place place, ref Locals locals)
    {
      ++place.WordI;
      Word word = this.CRunner.nextWord(false, ref place);
      string lower1;
      RunReturn runReturn;
      if ((word.KeyWord & CConstants.Immediate) == CConstants.Immediate && this.CRunner.htControls.Contains((object) word.Value.ToLower(CRunner.cul)))
      {
        lower1 = this.CRunner.nextWord(true, ref place).Value.ToLower(CRunner.cul);
      }
      else
      {
        runReturn = this.CRunner.RunCode(place, true, true, ref locals);
        place = runReturn.place;
        lower1 = runReturn.vString.ToLower(CRunner.cul);
      }
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn.place;
      string lower2 = runReturn.vString.ToLower(CRunner.cul);
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble1 = (int) runReturn.vDouble;
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble2 = (int) runReturn.vDouble;
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble3 = (int) runReturn.vDouble;
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble4 = (int) runReturn.vDouble;
      Color beige = Color.Beige;
      ++place.WordI;
      CEnhancedImage cenhancedImage = new CEnhancedImage();
      this.CRunner.htControls.Add((object) lower2, (object) new WrapControl((object) cenhancedImage, (CControls) this));
      cenhancedImage.name = lower2;
      cenhancedImage.Left = vDouble1;
      cenhancedImage.Top = vDouble2;
      cenhancedImage.Height = vDouble4;
      cenhancedImage.Width = vDouble3;
      cenhancedImage.BackColor = beige;
      cenhancedImage.Visible = true;
      ((Control) ((WrapControl) this.CRunner.htControls[(object) lower1]).control).Controls.Add((Control) cenhancedImage);
      this.AddEvents(cenhancedImage);
      return new MethodReturn(place);
    }

    private void AddEvents(CEnhancedImage img)
    {
      if (!this.CRunner.htSubs.Contains((object) (img.name + "_click")))
        return;
      img.Click += new EventHandler(this.Click);
    }

    public override void AddRunTimeEvent(object sender, string eventName)
    {
      CEnhancedImage cenhancedImage = (CEnhancedImage) sender;
      switch (eventName)
      {
        case "click":
          cenhancedImage.Click += new EventHandler(this.Click);
          break;
      }
    }

    private void Click(object sender, EventArgs e)
    {
      CEnhancedImage cenhancedImage = (CEnhancedImage) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedImage.name + "_click")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedImage.name
        }
      });
    }

    public void ShortAdd(string s)
    {
      CEnhancedImage cenhancedImage = new CEnhancedImage();
      string FrmName;
      string Name;
      int Left;
      int Top;
      int Width;
      int Height;
      string imageMode;
      string picFile;
      Color BackColor;
      bool myEnabled;
      bool myVisible;
      CBuildDesigner.ImageGetProperties(s, out FrmName, out Name, out Left, out Top, out Width, out Height, out imageMode, out picFile, out BackColor, out myEnabled, out myVisible);
      cenhancedImage.name = Name.ToLower(CRunner.cul);
      cenhancedImage.Left = Left;
      cenhancedImage.Top = Top;
      cenhancedImage.Width = Width;
      cenhancedImage.Height = Height;
      cenhancedImage.imageMode = imageMode;
      cenhancedImage.BackColor = BackColor;
      cenhancedImage.Enabled = myEnabled;
      cenhancedImage.Visible = myVisible;
      cenhancedImage.picFile = picFile;
      if (picFile.Length > 0)
        this.LoadPicture(cenhancedImage);
      this.CRunner.htControls.Add((object) cenhancedImage.name, (object) new WrapControl((object) cenhancedImage, (CControls) this));
      ((Control) ((WrapControl) this.CRunner.htControls[(object) FrmName]).control).Controls.Add((Control) cenhancedImage);
      this.AddEvents(cenhancedImage);
    }

    private void LoadPicture(CEnhancedImage img)
    {
      switch (img.imageMode.ToLower(CRunner.cul))
      {
        case "cstretchimage":
          img.SizeMode = PictureBoxSizeMode.StretchImage;
          break;
        case "ccenterimage":
          img.SizeMode = PictureBoxSizeMode.CenterImage;
          break;
        default:
          img.SizeMode = PictureBoxSizeMode.Normal;
          break;
      }
      if (img.picFile.Length <= 0)
        return;
      img.Image = (Image) this.CRunner.BitmapFromString(img.picFile);
    }
  }
}
