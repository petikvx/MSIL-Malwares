// Decompiled with JetBrains decompiler
// Type: ProjNet.Candidates.WrapperMerchantCandidate
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Pools;
using IRefl.Watchers;
using ProjNet.Structs;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace ProjNet.Candidates
{
  internal class WrapperMerchantCandidate : ValueObserverWatcher
  {
    protected OrderValuePool method;
    private List<SpecificationMerchantCandidate> _Task;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public WrapperMerchantCandidate()
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      this.\u002Ector(new List<SpecificationMerchantCandidate>());
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public WrapperMerchantCandidate(List<SpecificationMerchantCandidate> def)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this._Task = def;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public List<SpecificationMerchantCandidate> InsertAdvisor() => this._Task;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void WriteAdvisor(List<SpecificationMerchantCandidate> var1)
    {
      this._Task = var1;
      this.method = (OrderValuePool) null;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] PublishMerchant(double[] key)
    {
      int num1 = 2;
      List<SpecificationMerchantCandidate>.Enumerator enumerator;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              enumerator = this._Task.GetEnumerator();
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_2;
            case 1:
            case 3:
              goto label_2;
            case 4:
              goto label_14;
            default:
              goto label_12;
          }
        }
label_12:
        num1 = 4;
      }
label_2:
      try
      {
label_7:
        while (enumerator.MoveNext())
        {
          SpecificationMerchantCandidate current = enumerator.Current;
          int num3 = 2;
          if (true)
            goto label_5;
label_4:
          key = current.GetMerchant().PublishMerchant(key);
          continue;
label_5:
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_4;
              case 1:
              case 3:
                goto label_7;
              default:
                if (!WrapperMerchantCandidate.ResolveWrapper())
                {
                  num3 = 3;
                  continue;
                }
                goto label_7;
            }
          }
        }
      }
      finally
      {
        enumerator.Dispose();
      }
      double[] numArray = key;
label_14:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override List<double[]> FlushMerchant(List<double[]> item)
    {
      List<double[]> res = new List<double[]>(item.Count);
      res.AddRange((IEnumerable<double[]>) item);
      foreach (SpecificationMerchantCandidate merchantCandidate in this._Task)
        res = merchantCandidate.GetMerchant().FlushMerchant(res);
      return res;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override OrderValuePool ManageItem()
    {
      int num1 = 1;
      if (true)
        goto label_8;
label_1:
      this.method.CalcMerchant();
label_2:
      OrderValuePool method = this.method;
      int num2 = 6;
label_7:
      num1 = num2;
label_8:
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            flag = this.method == null;
            if (!WrapperMerchantCandidate.ResolveWrapper())
            {
              num1 = 5;
              continue;
            }
            goto label_4;
          case 2:
          case 3:
            goto label_6;
          case 4:
            goto label_1;
          case 5:
            goto label_4;
          case 6:
            goto label_11;
          default:
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto label_11;
        }
      }
label_4:
      if (flag)
      {
        num2 = 3;
        goto label_7;
      }
      else
        goto label_2;
label_6:
      this.method = (OrderValuePool) this.InvokeAdvisor();
      goto label_1;
label_11:
      return method;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void CalcMerchant()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_5;
            case 1:
            case 2:
              goto label_1;
            case 4:
              goto label_6;
            default:
              num2 = 4;
              continue;
          }
        }
label_5:
        this._Task.Reverse();
        num1 = 2;
      }
label_1:
      List<SpecificationMerchantCandidate>.Enumerator enumerator = this._Task.GetEnumerator();
label_6:
      try
      {
        while (enumerator.MoveNext())
        {
          SpecificationMerchantCandidate current = enumerator.Current;
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_8;
              case 1:
              case 3:
                goto label_11;
              default:
                num3 = 3;
                continue;
            }
          }
label_8:
          current.GetMerchant().CalcMerchant();
label_11:;
        }
      }
      finally
      {
        enumerator.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public WrapperMerchantCandidate InvokeAdvisor()
    {
      int num1 = 4;
      WrapperMerchantCandidate merchantCandidate;
      while (true)
      {
        List<SpecificationMerchantCandidate>.Enumerator enumerator;
        int num2;
        List<SpecificationMerchantCandidate> def;
        switch (num1)
        {
          case 0:
          case 4:
            def = new List<SpecificationMerchantCandidate>(this._Task.Count);
            num2 = 2;
            break;
          case 1:
          case 2:
            enumerator = this._Task.GetEnumerator();
            goto case 3;
          case 3:
            try
            {
              while (enumerator.MoveNext())
              {
                SpecificationMerchantCandidate current = enumerator.Current;
                int num3 = 2;
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                    case 2:
                      goto label_8;
                    case 1:
                    case 3:
                      goto label_11;
                    default:
                      num3 = 3;
                      continue;
                  }
                }
label_8:
                def.Add(current);
label_11:;
              }
            }
            finally
            {
              enumerator.Dispose();
            }
            merchantCandidate = new WrapperMerchantCandidate(def);
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_15;
          case 5:
            goto label_15;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_15:
      return merchantCandidate;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus() => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem() => throw new NotImplementedException();

    internal static bool CountWrapper() => true;

    internal static bool ResolveWrapper() => false;
  }
}
