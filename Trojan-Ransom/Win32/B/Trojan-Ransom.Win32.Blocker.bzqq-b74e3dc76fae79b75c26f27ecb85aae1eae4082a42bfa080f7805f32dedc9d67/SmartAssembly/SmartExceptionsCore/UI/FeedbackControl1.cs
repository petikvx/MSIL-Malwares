// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.UI.FeedbackControl1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace SmartAssembly.SmartExceptionsCore.UI
{
  [DesignerCategory("Code")]
  public class FeedbackControl1 : Control
  {
    private readonly Label m_Label = new Label();
    private Image m_Image;
    private bool m_ShowText;
    private readonly Timer m_Timer = new Timer();
    private bool m_ShowImage = true;
    private string m_ErrorMessage = string.Empty;
    private float m_Dx = 1f;
    private float m_Dy = 1f;

    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override string Text
    {
      get => base.Text;
      set
      {
        base.Text = value;
        this.Refresh();
      }
    }

    public void Init()
    {
      this.m_Timer.Enabled = false;
      this.m_Image = (Image) null;
      this.m_ShowText = false;
      this.m_ErrorMessage = string.Empty;
      this.Refresh();
      this.Height = 16;
    }

    public void Start()
    {
      this.m_Timer.Enabled = true;
      this.m_Image = (Image) Resources.GetBitmap("current");
      this.m_ShowText = true;
      this.Refresh();
    }

    public void Stop() => this.Stop(string.Empty);

    public void Stop(string errorMessage)
    {
      this.m_ErrorMessage = errorMessage;
      this.m_Timer.Enabled = false;
      this.m_Image = (Image) Resources.GetBitmap(errorMessage.Length > 0 ? "error" : "ok");
      this.m_ShowImage = true;
      this.m_ShowText = true;
      if (errorMessage.Length > 0)
        this.Height = 100;
      this.Refresh();
    }

    protected override void OnResize(EventArgs e)
    {
      this.m_Label.SetBounds(Convert.ToInt32(22f * this.m_Dx), Convert.ToInt32(this.m_Dy), this.Width - Convert.ToInt32(22f * this.m_Dx), this.Height - Convert.ToInt32(this.m_Dy));
      base.OnResize(e);
    }

    protected override void ScaleCore(float dx, float dy)
    {
      this.m_Dx = dx;
      this.m_Dy = dy;
      base.ScaleCore(dx, dy);
      this.OnResize(EventArgs.Empty);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      if (this.DesignMode)
      {
        this.m_Image = (Image) Resources.GetBitmap("current");
        this.m_ShowText = true;
      }
      if (this.m_Image != null && this.m_ShowImage)
        e.Graphics.DrawImage(this.m_Image, new Rectangle(0, 0, Convert.ToInt32(16f * this.m_Dx), Convert.ToInt32(16f * this.m_Dy)), new Rectangle(0, 0, 16, 16), GraphicsUnit.Pixel);
      if (this.m_ShowText)
        this.m_Label.Text = this.m_ErrorMessage.Length > 0 ? base.Text + " (" + this.m_ErrorMessage + ")" : base.Text;
      else
        this.m_Label.Text = string.Empty;
    }

    public FeedbackControl1()
    {
      this.m_Timer.Interval = 250;
      this.m_Timer.Tick += new EventHandler(this.OnTimerTick);
      this.m_Label.FlatStyle = FlatStyle.System;
      this.Controls.Add((Control) this.m_Label);
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.DoubleBuffer, true);
      this.TabStop = false;
    }

    public FeedbackControl1(string text)
      : this()
    {
      base.Text = " " + text;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing)
      {
        if (this.m_Image != null)
          this.m_Image.Dispose();
        this.m_Timer.Dispose();
      }
      base.Dispose(disposing);
    }

    private void OnTimerTick(object sender, EventArgs e)
    {
      this.m_ShowImage = !this.m_ShowImage;
      this.Refresh();
    }
  }
}
