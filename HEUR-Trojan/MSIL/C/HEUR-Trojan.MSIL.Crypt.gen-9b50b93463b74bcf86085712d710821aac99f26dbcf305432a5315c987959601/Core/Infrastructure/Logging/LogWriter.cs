// Decompiled with JetBrains decompiler
// Type: Core.Infrastructure.Logging.LogWriter
// Assembly: UnmanagedFunctionPointerAttrib, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 44335795-CD3E-49C2-4F11-D0E96376ED3B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-9b50b93463b74bcf86085712d710821aac99f26dbcf305432a5315c987959601.exe

using log4net;
using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Text;

namespace Core.Infrastructure.Logging
{
  [DebuggerStepThrough]
  public class LogWriter : TextWriter, \u0006\u2005
  {
    private static readonly ILog \u0002 = LogManager.GetLogger(typeof (LogWriter));
    private static UnicodeEncoding \u0003;

    public LogWriter()
      : this((IFormatProvider) CultureInfo.CurrentCulture)
    {
    }

    public LogWriter(IFormatProvider formatProvider)
      : base(formatProvider)
    {
    }

    protected override void Dispose(bool disposing) => base.Dispose(disposing);

    public override void Write(char value) => LogWriter.\u0002.Debug((object) value.ToString());

    public override void Write(string value)
    {
      if (value == null)
        return;
      LogWriter.\u0002.Debug((object) value);
    }

    public void WriteInfo(string value)
    {
      if (value == null)
        return;
      LogWriter.\u0002.Info((object) value);
    }

    public void WriteFatal(string value)
    {
      if (value == null)
        return;
      LogWriter.\u0002.Fatal((object) value);
    }

    public override void Write(char[] buffer, int index, int count)
    {
      if (buffer == null || index < 0 || count < 0 || buffer.Length - index < count)
        base.Write(buffer, index, count);
      LogWriter.\u0002.Debug((object) new string(buffer, index, count));
    }

    public override Encoding Encoding
    {
      get
      {
        if (LogWriter.\u0003 == null)
          LogWriter.\u0003 = new UnicodeEncoding(false, false);
        return (Encoding) LogWriter.\u0003;
      }
    }

    public TextWriter Get() => (TextWriter) this;
  }
}
