// Decompiled with JetBrains decompiler
// Type: IRefl.Pools.ContainerValuePool
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Watchers;
using ProjNet.Structs;
using ProjNet.Templates;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace IRefl.Pools
{
  internal class ContainerValuePool : ValueObserverWatcher
  {
    protected bool parameter;
    private double proc;
    private double processRegistry;
    private double _RegistryRegistry;
    private double advisorRegistry;
    private double _FacadeRegistry;
    private double statusRegistry;
    protected List<Config> m_ItemRegistry;
    protected ValueObserverWatcher _MerchantRegistry;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ContainerValuePool(List<Config> spec, bool rejectattr)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      this.\u002Ector(spec);
      this.parameter = rejectattr;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal ContainerValuePool(List<Config> var1)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      this.parameter = false;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.m_ItemRegistry = var1;
      this.processRegistry = this.m_ItemRegistry.Find((Predicate<Config>) (item =>
      {
        this.m_ItemRegistry = this.m_ItemRegistry;
        return item.Name.Equals("semi_major", StringComparison.OrdinalIgnoreCase);
      })).CountRegistry();
      this._RegistryRegistry = this.m_ItemRegistry.Find((Predicate<Config>) (config =>
      {
        this.m_ItemRegistry = this.m_ItemRegistry;
        return config.Name.Equals("semi_minor", StringComparison.OrdinalIgnoreCase);
      })).CountRegistry();
      this.proc = 1.0 - this._RegistryRegistry * this._RegistryRegistry / (this.processRegistry * this.processRegistry);
      this.statusRegistry = (Math.Pow(this.processRegistry, 2.0) - Math.Pow(this._RegistryRegistry, 2.0)) / Math.Pow(this._RegistryRegistry, 2.0);
      this._FacadeRegistry = this._RegistryRegistry / this.processRegistry;
      this.advisorRegistry = this.processRegistry / this._RegistryRegistry;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override OrderValuePool ManageItem()
    {
      int num1 = 3;
      if (true)
        goto label_6;
label_1:
      OrderValuePool merchantRegistry = (OrderValuePool) this._MerchantRegistry;
      int num2 = 5;
label_5:
      num1 = num2;
label_6:
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            flag = this._MerchantRegistry == null;
            num1 = 4;
            continue;
          case 1:
          case 4:
            goto label_3;
          case 2:
            goto label_1;
          case 5:
            goto label_8;
          default:
            goto label_7;
        }
      }
label_3:
      if (flag)
      {
        this._MerchantRegistry = (ValueObserverWatcher) new ContainerValuePool(this.m_ItemRegistry, !this.parameter);
        goto label_1;
      }
      else
        goto label_1;
label_7:
      num2 = 2;
      goto label_5;
label_8:
      return merchantRegistry;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private double[] FlushAdvisor(double[] info)
    {
      int num1 = 2;
      double[] numArray;
      while (true)
      {
        int num2 = num1;
        double num3;
        double num4;
        double num5;
        double num6;
        double num7;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_5;
            case 1:
              num4 = ValueObserverWatcher.PopAdvisor(info[1]);
              if (info.Length >= 3)
              {
                int num8 = 0;
                num2 = ContainerValuePool.LogoutWrapper() ? num8 : num8;
                continue;
              }
              goto label_6;
            case 2:
              num3 = ValueObserverWatcher.PopAdvisor(info[0]);
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 1;
            case 3:
            case 6:
              goto label_11;
            case 4:
            case 5:
              numArray = new double[3]{ num5, num6, num7 };
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto label_5;
            case 7:
              goto label_12;
            default:
              goto label_10;
          }
        }
label_5:
        double num9 = info[2].Equals(double.NaN) ? 0.0 : info[2];
        goto label_7;
label_6:
        num9 = 0.0;
label_7:
        double num10 = num9;
        double num11 = this.processRegistry / Math.Sqrt(1.0 - this.proc * Math.Pow(Math.Sin(num4), 2.0));
        goto label_11;
label_10:
        num1 = 6;
        continue;
label_11:
        num5 = (num11 + num10) * Math.Cos(num4) * Math.Cos(num3);
        num6 = (num11 + num10) * Math.Cos(num4) * Math.Sin(num3);
        num7 = ((1.0 - this.proc) * num11 + num10) * Math.Sin(num4);
        num1 = 5;
      }
label_12:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private double[] CalcAdvisor(double[] instance)
    {
      int num1 = 12;
      double key1;
      double[] numArray;
      while (true)
      {
        bool flag1;
        double num2;
        double num3;
        double num4;
        double num5;
        int num6;
        double num7;
        double num8;
        double num9;
        bool flag2;
        bool flag3;
        double num10;
        bool flag4;
        double key2;
        double num11;
        double x;
        bool flag5;
        double num12;
        switch (num1)
        {
          case 0:
          case 8:
            flag3 = !flag2;
            num6 = 5;
            goto label_18;
          case 1:
          case 10:
            if (instance.Length >= 3)
            {
              if (!instance[2].Equals(double.NaN))
              {
                if (ContainerValuePool.RunWrapper())
                {
                  num1 = 6;
                  continue;
                }
                goto case 5;
              }
              else
              {
                num12 = 0.0;
                goto label_33;
              }
            }
            else
            {
              num12 = 0.0;
              goto label_33;
            }
          case 2:
            if (flag1)
            {
              num5 = num2 / num3 - num4;
              if (true)
              {
                num1 = 0;
                continue;
              }
              goto case 14;
            }
            else if (num3 <= -0.38268343236508978)
            {
              num5 = num2 / -num3 - num4;
              goto case 0;
            }
            else
            {
              num5 = num10 / num9 + num4 * (this.proc - 1.0);
              num6 = 8;
              goto label_18;
            }
          case 3:
            double num13 = num2 - this.processRegistry * this.proc * num7 * num7 * num7;
            double num14 = Math.Sqrt(num8 * num8 + num13 * num13);
            num9 = num8 / num14;
            num3 = num13 / num14;
            num4 = this.processRegistry / Math.Sqrt(1.0 - this.proc * num9 * num9);
            flag1 = num3 >= 0.38268343236508978;
            num1 = 2;
            continue;
          case 4:
          case 7:
label_21:
            num7 = num2 / num11;
            double num15 = Math.Pow(x, 3.0);
            num8 = num10 + this._RegistryRegistry * this.statusRegistry * num15;
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto case 1;
          case 5:
            if (flag3)
              key2 = Math.Atan(num9 / num3);
            numArray = new double[3]
            {
              ValueObserverWatcher.SetAdvisor(key1),
              ValueObserverWatcher.SetAdvisor(key2),
              num5
            };
            num1 = 15;
            continue;
          case 6:
label_29:
            num12 = instance[2];
            goto label_33;
          case 9:
            if (flag4)
              key2 = Math.PI / 2.0;
            else if (num10 < 0.0)
              key2 = -1.0 * Math.PI / 2.0;
            else
              goto label_14;
            goto case 11;
          case 11:
            break;
          case 12:
            flag2 = false;
            num6 = 10;
            goto label_18;
          case 13:
label_37:
            if (flag5)
            {
              key1 = -1.0 * Math.PI / 2.0;
              goto case 11;
            }
            else
            {
              flag2 = true;
              key1 = 0.0;
              flag4 = num10 > 0.0;
              num6 = 9;
              goto label_18;
            }
          case 14:
            key1 = Math.PI / 2.0;
            num6 = 11;
            goto label_18;
          case 15:
            goto label_41;
          default:
            num6 = 4;
            goto label_18;
        }
label_17:
        double d = instance[0] * instance[0] + instance[1] * instance[1];
        num2 = Math.Sqrt(d);
        double num16 = num10 * 1.0026;
        num11 = Math.Sqrt(num16 * num16 + d);
        x = num16 / num11;
        goto label_21;
label_18:
        num1 = num6;
        continue;
label_33:
        num10 = num12;
        key1 = 0.0;
        key2 = 0.0;
        num5 = 0.0;
        if (instance[0] != 0.0)
        {
          key1 = Math.Atan2(instance[1], instance[0]);
          goto label_17;
        }
        else if (instance[1] <= 0.0)
        {
          flag5 = instance[1] < 0.0;
          if (true)
            num1 = 13;
          else
            goto label_29;
        }
        else if (true)
          num1 = 14;
        else
          goto label_37;
      }
label_14:
      numArray = new double[3]
      {
        ValueObserverWatcher.SetAdvisor(key1),
        ValueObserverWatcher.SetAdvisor(Math.PI / 2.0),
        -this._RegistryRegistry
      };
label_41:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] PublishMerchant(double[] setup)
    {
      int num = 4;
      bool flag;
      double[] numArray;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            if (!flag)
            {
              numArray = this.CalcAdvisor(setup);
              if (ContainerValuePool.RunWrapper())
              {
                num = 5;
                continue;
              }
              goto label_8;
            }
            else
              goto label_3;
          case 2:
          case 3:
          case 5:
            goto label_8;
          case 4:
            flag = !this.parameter;
            if (true)
            {
              num = 0;
              continue;
            }
            goto case 0;
          default:
            if (true)
            {
              num = 3;
              continue;
            }
            goto label_8;
        }
      }
label_3:
      numArray = this.FlushAdvisor(setup);
label_8:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override List<double[]> FlushMerchant(List<double[]> first)
    {
      List<double[]> numArrayList = new List<double[]>(first.Count);
      for (int index = 0; index < first.Count; ++index)
      {
        double[] numArray = first[index];
        numArrayList.Add(this.PublishMerchant(numArray));
      }
      return numArrayList;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void CalcMerchant() => this.parameter = !this.parameter;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus() => throw new NotImplementedException("The method or operation is not implemented.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem() => throw new NotImplementedException("The method or operation is not implemented.");

    internal static bool RunWrapper() => true;

    internal static bool LogoutWrapper() => false;
  }
}
