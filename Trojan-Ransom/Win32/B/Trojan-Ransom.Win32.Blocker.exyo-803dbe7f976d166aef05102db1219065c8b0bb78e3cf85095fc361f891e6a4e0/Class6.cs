// Decompiled with JetBrains decompiler
// Type: insomnia.Class6
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 848092D5-5192-4B4F-B8F0-07AD40D025FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.exyo-803dbe7f976d166aef05102db1219065c8b0bb78e3cf85095fc361f891e6a4e0.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Text;

namespace insomnia
{
  public class Class6
  {
    private byte[] Field7;
    private ushort Field6;
    private ulong Field5;
    private Class6.Struct6[] Field4;
    private byte[] Field3;
    private Class6.Struct7[] Field2;
    private string[] Field1;

    public Class6(string baseName)
    {
      this.Field3 = new byte[10]
      {
        (byte) 0,
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 6,
        (byte) 8,
        (byte) 8,
        (byte) 0,
        (byte) 0
      };
      if (!File.Exists(baseName))
        return;
      FileSystem.FileOpen(1, baseName, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
      string s = Strings.Space(checked ((int) FileSystem.LOF(1)));
      FileSystem.FileGet(1, ref s);
      FileSystem.FileClose(1);
      this.Field7 = Encoding.Default.GetBytes(s);
      if (Encoding.Default.GetString(this.Field7, 0, 15).CompareTo("SQLite format 3") != 0)
        throw new Exception("Not a valid SQLite 3 Database File");
      if (this.Field7[52] != (byte) 0)
        throw new Exception("Auto-vacuum capable database is not supported");
      if (Decimal.Compare(new Decimal(this.Method8(44, 4)), 4M) >= 0)
        throw new Exception("No supported Schema layer file-format");
      this.Field6 = checked ((ushort) this.Method8(16, 2));
      this.Field5 = this.Method8(56, 4);
      if (Decimal.Compare(new Decimal(this.Field5), 0M) == 0)
        this.Field5 = 1UL;
      this.Method7(100UL);
    }

    private int Method11(int A_1)
    {
      if (A_1 > this.Field7.Length)
        return 0;
      int num1 = A_1;
      int num2 = checked (A_1 + 8);
      int index = num1;
      while (index <= num2)
      {
        if (index > checked (this.Field7.Length - 1))
          return 0;
        if (((int) this.Field7[index] & 128) != 128)
          return index;
        checked { ++index; }
      }
      return checked (A_1 + 8);
    }

    private long Method10(int A_1, int A_2)
    {
      checked { ++A_2; }
      byte[] numArray = new byte[8];
      int num1 = checked (A_2 - A_1);
      bool flag = false;
      if (num1 == 0 | num1 > 9)
        return 0;
      switch (num1)
      {
        case 1:
          numArray[0] = checked ((byte) ((int) this.Field7[A_1] & (int) sbyte.MaxValue));
          return BitConverter.ToInt64(numArray, 0);
        case 9:
          flag = true;
          break;
      }
      int num2 = 1;
      int num3 = 7;
      int index1 = 0;
      if (flag)
      {
        numArray[0] = this.Field7[checked (A_2 - 1)];
        checked { --A_2; }
        index1 = 1;
      }
      int num4 = checked (A_2 - 1);
      int num5 = A_1;
      int index2 = num4;
      while (index2 >= num5)
      {
        if (checked (index2 - 1) >= A_1)
        {
          numArray[index1] = checked ((byte) ((int) unchecked ((byte) ((uint) this.Field7[index2] >> (checked (num2 - 1) & 7))) & (int) byte.MaxValue >> num2 | (int) unchecked ((byte) ((uint) this.Field7[checked (index2 - 1)] << (num3 & 7)))));
          checked { ++num2; }
          checked { ++index1; }
          checked { --num3; }
        }
        else if (!flag)
          numArray[index1] = checked ((byte) ((int) unchecked ((byte) ((uint) this.Field7[index2] >> (checked (num2 - 1) & 7))) & (int) byte.MaxValue >> num2));
        checked { index2 += -1; }
      }
      return BitConverter.ToInt64(numArray, 0);
    }

    private bool Method9(long A_1) => (A_1 & 1L) == 1L;

    private ulong Method8(int A_1, int A_2)
    {
      if (A_2 > 8 | A_2 == 0)
        return 0;
      ulong num1 = 0;
      int num2 = checked (A_2 - 1);
      int num3 = 0;
      while (num3 <= num2)
      {
        num1 = num1 << 8 | (ulong) this.Field7[checked (A_1 + num3)];
        checked { ++num3; }
      }
      return num1;
    }

    private void Method7(ulong A_1)
    {
      if (this.Field7[checked ((int) A_1)] == (byte) 13)
      {
        ushort uint16 = Convert.ToUInt16(Decimal.Subtract(new Decimal(this.Method8(Convert.ToInt32(Decimal.Add(new Decimal(A_1), 3M)), 2)), 1M));
        int num1 = 0;
        if (this.Field4 != null)
        {
          num1 = this.Field4.Length;
          this.Field4 = (Class6.Struct6[]) Utils.CopyArray((Array) this.Field4, (Array) new Class6.Struct6[checked (this.Field4.Length + (int) uint16 + 1)]);
        }
        else
          this.Field4 = new Class6.Struct6[checked ((int) uint16 + 1)];
        int num2 = (int) uint16;
        int num3 = 0;
        while (num3 <= num2)
        {
          ulong A_1_1 = this.Method8(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(A_1), 8M), new Decimal(checked (num3 * 2)))), 2);
          if (Decimal.Compare(new Decimal(A_1), 100M) != 0)
            checked { A_1_1 += A_1; }
          int A_2_1 = this.Method11(checked ((int) A_1_1));
          this.Method10(checked ((int) A_1_1), A_2_1);
          int A_2_2 = this.Method11(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(A_1_1), Decimal.Subtract(new Decimal(A_2_1), new Decimal(A_1_1))), 1M)));
          this.Field4[checked (num1 + num3)].Field6 = this.Method10(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(A_1_1), Decimal.Subtract(new Decimal(A_2_1), new Decimal(A_1_1))), 1M)), A_2_2);
          ulong uint64 = Convert.ToUInt64(Decimal.Add(Decimal.Add(new Decimal(A_1_1), Decimal.Subtract(new Decimal(A_2_2), new Decimal(A_1_1))), 1M));
          int A_2_3 = this.Method11(checked ((int) uint64));
          int A_2_4 = A_2_3;
          long num4 = this.Method10(checked ((int) uint64), A_2_3);
          long[] numArray = new long[5];
          int index = 0;
          do
          {
            int A_1_2 = checked (A_2_4 + 1);
            A_2_4 = this.Method11(A_1_2);
            numArray[index] = this.Method10(A_1_2, A_2_4);
            numArray[index] = numArray[index] <= 9L ? (long) this.Field3[checked ((int) numArray[index])] : (!this.Method9(numArray[index]) ? checked ((long) Math.Round(unchecked ((double) checked (numArray[index] - 12L) / 2.0))) : checked ((long) Math.Round(unchecked ((double) checked (numArray[index] - 13L) / 2.0))));
            checked { ++index; }
          }
          while (index <= 4);
          if (Decimal.Compare(new Decimal(this.Field5), 1M) == 0)
            this.Field4[checked (num1 + num3)].Field5 = Encoding.Default.GetString(this.Field7, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num4))), checked ((int) numArray[0]));
          else if (Decimal.Compare(new Decimal(this.Field5), 2M) == 0)
            this.Field4[checked (num1 + num3)].Field5 = Encoding.Unicode.GetString(this.Field7, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num4))), checked ((int) numArray[0]));
          else if (Decimal.Compare(new Decimal(this.Field5), 3M) == 0)
            this.Field4[checked (num1 + num3)].Field5 = Encoding.BigEndianUnicode.GetString(this.Field7, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num4))), checked ((int) numArray[0]));
          if (Decimal.Compare(new Decimal(this.Field5), 1M) == 0)
            this.Field4[checked (num1 + num3)].Field4 = Encoding.Default.GetString(this.Field7, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
          else if (Decimal.Compare(new Decimal(this.Field5), 2M) == 0)
            this.Field4[checked (num1 + num3)].Field4 = Encoding.Unicode.GetString(this.Field7, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
          else if (Decimal.Compare(new Decimal(this.Field5), 3M) == 0)
            this.Field4[checked (num1 + num3)].Field4 = Encoding.BigEndianUnicode.GetString(this.Field7, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
          this.Field4[checked (num1 + num3)].Field2 = checked ((long) this.Method8(Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2]))), (int) numArray[3]));
          if (Decimal.Compare(new Decimal(this.Field5), 1M) == 0)
            this.Field4[checked (num1 + num3)].Field1 = Encoding.Default.GetString(this.Field7, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
          else if (Decimal.Compare(new Decimal(this.Field5), 2M) == 0)
            this.Field4[checked (num1 + num3)].Field1 = Encoding.Unicode.GetString(this.Field7, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
          else if (Decimal.Compare(new Decimal(this.Field5), 3M) == 0)
            this.Field4[checked (num1 + num3)].Field1 = Encoding.BigEndianUnicode.GetString(this.Field7, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
          checked { ++num3; }
        }
      }
      else
      {
        if (this.Field7[checked ((int) A_1)] != (byte) 5)
          return;
        int uint16 = (int) Convert.ToUInt16(Decimal.Subtract(new Decimal(this.Method8(Convert.ToInt32(Decimal.Add(new Decimal(A_1), 3M)), 2)), 1M));
        int num = 0;
        while (num <= uint16)
        {
          ushort A_1_3 = checked ((ushort) this.Method8(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(A_1), 12M), new Decimal(num * 2))), 2));
          if (Decimal.Compare(new Decimal(A_1), 100M) == 0)
            this.Method7(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.Method8((int) A_1_3, 4)), 1M), new Decimal((int) this.Field6))));
          else
            this.Method7(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.Method8(checked ((int) (A_1 + (ulong) A_1_3)), 4)), 1M), new Decimal((int) this.Field6))));
          checked { ++num; }
        }
        this.Method7(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.Method8(Convert.ToInt32(Decimal.Add(new Decimal(A_1), 8M)), 4)), 1M), new Decimal((int) this.Field6))));
      }
    }

    private bool Method6(ulong A_1)
    {
      if (this.Field7[checked ((int) A_1)] == (byte) 13)
      {
        ushort uint16 = Convert.ToUInt16(Decimal.Subtract(new Decimal(this.Method8(Convert.ToInt32(Decimal.Add(new Decimal(A_1), 3M)), 2)), 1M));
        int num1 = 0;
        if (this.Field2 != null)
        {
          num1 = this.Field2.Length;
          this.Field2 = (Class6.Struct7[]) Utils.CopyArray((Array) this.Field2, (Array) new Class6.Struct7[checked (this.Field2.Length + (int) uint16 + 1)]);
        }
        else
          this.Field2 = new Class6.Struct7[checked ((int) uint16 + 1)];
        int num2 = (int) uint16;
        int num3 = 0;
        while (num3 <= num2)
        {
          ulong A_1_1 = this.Method8(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(A_1), 8M), new Decimal(checked (num3 * 2)))), 2);
          if (Decimal.Compare(new Decimal(A_1), 100M) != 0)
            checked { A_1_1 += A_1; }
          int A_2_1 = this.Method11(checked ((int) A_1_1));
          this.Method10(checked ((int) A_1_1), A_2_1);
          int A_2_2 = this.Method11(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(A_1_1), Decimal.Subtract(new Decimal(A_2_1), new Decimal(A_1_1))), 1M)));
          this.Field2[checked (num1 + num3)].Field2 = this.Method10(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(A_1_1), Decimal.Subtract(new Decimal(A_2_1), new Decimal(A_1_1))), 1M)), A_2_2);
          ulong uint64 = Convert.ToUInt64(Decimal.Add(Decimal.Add(new Decimal(A_1_1), Decimal.Subtract(new Decimal(A_2_2), new Decimal(A_1_1))), 1M));
          int A_2_3 = this.Method11(checked ((int) uint64));
          int A_2_4 = A_2_3;
          long num4 = this.Method10(checked ((int) uint64), A_2_3);
          long num5 = Convert.ToInt64(Decimal.Add(Decimal.Subtract(new Decimal(uint64), new Decimal(A_2_3)), 1M));
          int index1 = 0;
          Class6.Struct5[] arySrc;
          while (num5 < num4)
          {
            arySrc = (Class6.Struct5[]) Utils.CopyArray((Array) arySrc, (Array) new Class6.Struct5[checked (index1 + 1)]);
            int A_1_2 = checked (A_2_4 + 1);
            A_2_4 = this.Method11(A_1_2);
            arySrc[index1].Field1 = this.Method10(A_1_2, A_2_4);
            arySrc[index1].Field2 = arySrc[index1].Field1 <= 9L ? (long) this.Field3[checked ((int) arySrc[index1].Field1)] : (!this.Method9(arySrc[index1].Field1) ? checked ((long) Math.Round(unchecked ((double) checked (arySrc[index1].Field1 - 12L) / 2.0))) : checked ((long) Math.Round(unchecked ((double) checked (arySrc[index1].Field1 - 13L) / 2.0))));
            num5 = checked (num5 + (long) (A_2_4 - A_1_2) + 1L);
            checked { ++index1; }
          }
          this.Field2[checked (num1 + num3)].Field1 = new string[checked (arySrc.Length - 1 + 1)];
          int num6 = 0;
          int num7 = checked (arySrc.Length - 1);
          int index2 = 0;
          while (index2 <= num7)
          {
            if (arySrc[index2].Field1 > 9L)
            {
              if (!this.Method9(arySrc[index2].Field1))
              {
                if (Decimal.Compare(new Decimal(this.Field5), 1M) == 0)
                  this.Field2[checked (num1 + num3)].Field1[index2] = Encoding.Default.GetString(this.Field7, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].Field2));
                else if (Decimal.Compare(new Decimal(this.Field5), 2M) == 0)
                  this.Field2[checked (num1 + num3)].Field1[index2] = Encoding.Unicode.GetString(this.Field7, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].Field2));
                else if (Decimal.Compare(new Decimal(this.Field5), 3M) == 0)
                  this.Field2[checked (num1 + num3)].Field1[index2] = Encoding.BigEndianUnicode.GetString(this.Field7, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].Field2));
              }
              else
                this.Field2[checked (num1 + num3)].Field1[index2] = Encoding.Default.GetString(this.Field7, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].Field2));
            }
            else
              this.Field2[checked (num1 + num3)].Field1[index2] = Conversions.ToString(this.Method8(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].Field2)));
            num6 = checked ((int) ((long) num6 + arySrc[index2].Field2));
            checked { ++index2; }
          }
          checked { ++num3; }
        }
      }
      else if (this.Field7[checked ((int) A_1)] == (byte) 5)
      {
        int uint16 = (int) Convert.ToUInt16(Decimal.Subtract(new Decimal(this.Method8(Convert.ToInt32(Decimal.Add(new Decimal(A_1), 3M)), 2)), 1M));
        int num8 = 0;
        while (num8 <= uint16)
        {
          ushort num9 = checked ((ushort) this.Method8(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(A_1), 12M), new Decimal(num8 * 2))), 2));
          this.Method6(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.Method8(checked ((int) (A_1 + (ulong) num9)), 4)), 1M), new Decimal((int) this.Field6))));
          checked { ++num8; }
        }
        this.Method6(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.Method8(Convert.ToInt32(Decimal.Add(new Decimal(A_1), 8M)), 4)), 1M), new Decimal((int) this.Field6))));
      }
      return true;
    }

    public bool Method5(string A_1)
    {
      int index1 = -1;
      int length1 = this.Field4.Length;
      int index2 = 0;
      while (index2 <= length1)
      {
        if (this.Field4[index2].Field4.ToLower().CompareTo(A_1.ToLower()) == 0)
        {
          index1 = index2;
          break;
        }
        checked { ++index2; }
      }
      if (index1 == -1)
        return false;
      string[] strArray = this.Field4[index1].Field1.Substring(checked (this.Field4[index1].Field1.IndexOf("(") + 1)).Split(',');
      int num = checked (strArray.Length - 1);
      int index3 = 0;
      while (index3 <= num)
      {
        strArray[index3] = Strings.LTrim(strArray[index3]);
        int length2 = strArray[index3].IndexOf(" ");
        if (length2 > 0)
          strArray[index3] = strArray[index3].Substring(0, length2);
        if (strArray[index3].IndexOf("UNIQUE") != 0)
        {
          this.Field1 = (string[]) Utils.CopyArray((Array) this.Field1, (Array) new string[checked (index3 + 1)]);
          this.Field1[index3] = strArray[index3];
          checked { ++index3; }
        }
        else
          break;
      }
      return this.Method6(checked ((ulong) ((this.Field4[index1].Field2 - 1L) * (long) this.Field6)));
    }

    public int Method4() => this.Field2.Length;

    public string Method3(int A_1, int A_2)
    {
      if (A_1 >= this.Field2.Length)
        return (string) null;
      return A_2 >= this.Field2[A_1].Field1.Length ? (string) null : this.Field2[A_1].Field1[A_2];
    }

    public string Method2(int A_1, string A_2)
    {
      int A_2_1 = -1;
      int length = this.Field1.Length;
      int index = 0;
      while (index <= length)
      {
        if (this.Field1[index].ToLower().CompareTo(A_2.ToLower()) == 0)
        {
          A_2_1 = index;
          break;
        }
        checked { ++index; }
      }
      return A_2_1 == -1 ? (string) null : this.Method3(A_1, A_2_1);
    }

    public string[] Method1()
    {
      int index1 = 0;
      int num = checked (this.Field4.Length - 1);
      int index2 = 0;
      string[] arySrc;
      while (index2 <= num)
      {
        if (Operators.CompareString(this.Field4[index2].Field5, "table", false) == 0)
        {
          arySrc = (string[]) Utils.CopyArray((Array) arySrc, (Array) new string[checked (index1 + 1)]);
          arySrc[index1] = this.Field4[index2].Field4;
          checked { ++index1; }
        }
        checked { ++index2; }
      }
      return arySrc;
    }

    private struct Struct5
    {
      public long Field2;
      public long Field1;
    }

    private struct Struct6
    {
      public long Field6;
      public string Field5;
      public string Field4;
      public string Field3;
      public long Field2;
      public string Field1;
    }

    private struct Struct7
    {
      public long Field2;
      public string[] Field1;
    }
  }
}
