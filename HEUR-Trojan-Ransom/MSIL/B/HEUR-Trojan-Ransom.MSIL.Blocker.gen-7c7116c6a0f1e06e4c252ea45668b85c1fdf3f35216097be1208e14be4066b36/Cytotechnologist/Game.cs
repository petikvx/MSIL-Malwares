// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: StaticIndexRangePartitionForArr, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: AF5A1990-133C-4640-B616-63D01D46DEA5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-7c7116c6a0f1e06e4c252ea45668b85c1fdf3f35216097be1208e14be4066b36.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -685554834;
      JSONNode jsonNode;
      int count;
      int index;
      bool flag;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -319933321)) % 15U)
        {
          case 0:
            this._random = Game.\u206D‍⁮‏​‏​‌⁯⁬⁮⁮‭⁮‍‫‬‪‪‭⁫‬⁫⁬‪⁫⁪‬‮‮⁪⁪‏‭⁫‪‎‏‏⁮‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * -1094415265 ^ 877784664;
            continue;
          case 1:
            ++index;
            num1 = (int) num2 * -1458133758 ^ -716493801;
            continue;
          case 2:
            this._playerStates[index] = new PlayerState();
            num1 = -410205990;
            continue;
          case 3:
            this._buffer = buffer;
            num1 = (int) num2 * -255950966 ^ 107214672;
            continue;
          case 4:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * -1011502090 ^ -1052508250;
            continue;
          case 5:
            jsonNode = json["players"];
            count = jsonNode.Count;
            this.Players = new Player[count];
            num1 = (int) num2 * 2075791455 ^ 673366001;
            continue;
          case 6:
            aIndex = 0;
            num1 = (int) num2 * 1917821023 ^ 1962700161;
            continue;
          case 7:
            int num3;
            num1 = num3 = aIndex < count ? -1017810046 : (num3 = -1460494418);
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * -2061150350 ^ 1996408307;
            continue;
          case 10:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            ++aIndex;
            num1 = -1909721076;
            continue;
          case 11:
            this._dice = new Dice();
            num1 = (int) num2 * 582574518 ^ -502657484;
            continue;
          case 12:
            int num4 = !flag ? -1901928823 : (num4 = -771044123);
            num1 = num4 ^ (int) num2 * 2001564570;
            continue;
          case 13:
            goto label_3;
          case 14:
            flag = index < count;
            num1 = -1665847727;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = -1543276935;
        bool finished;
        int index;
        PlayerState[] playerStates;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -156627286)) % 13U)
          {
            case 0:
              goto label_1;
            case 1:
              playerStates = this._playerStates;
              num1 = -863918475;
              continue;
            case 2:
              int num3;
              num1 = num3 = index < playerStates.Length ? -604368583 : (num3 = -397257962);
              continue;
            case 3:
              num1 = (int) num2 * 174994228 ^ 694348257;
              continue;
            case 5:
              finished = true;
              num1 = (int) num2 * -1190342327 ^ 1260375301;
              continue;
            case 6:
              num1 = (int) num2 * 1779541634 ^ 327575783;
              continue;
            case 7:
              ++index;
              num1 = -56540243;
              continue;
            case 8:
              int num4 = this._finished ? -1553466290 : (num4 = -516744179);
              num1 = num4 ^ (int) num2 * -1546581837;
              continue;
            case 9:
              int num5;
              num1 = num5 = playerStates[index].State != State.Playing ? -223097476 : (num5 = -1955136181);
              continue;
            case 10:
              finished = true;
              num1 = (int) num2 * -274005793 ^ -1134442175;
              continue;
            case 11:
              index = 0;
              num1 = (int) num2 * 1132035910 ^ 1136430679;
              continue;
            case 12:
              finished = false;
              num1 = (int) num2 * -1241348862 ^ 2092904899;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return finished;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = -2135295871;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -878028751)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * -353508286 ^ -1572589595;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
      this.ShuffleCards();
      this.Winners.Clear();
label_1:
      int num1 = -1466580188;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1492446390)) % 5U)
        {
          case 0:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -565335106 ^ -700724733;
            continue;
          case 1:
            this.Losers.Clear();
            num1 = (int) num2 * 2092578335 ^ -255258365;
            continue;
          case 2:
            num1 = (int) num2 * 468101028 ^ 1569885704;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      this._currentTurn = 0;
      this._finished = false;
      this._currentChanceIndex = -1;
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
label_1:
      int num1 = -1262145951;
      bool flag1;
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      int index;
      Player player;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -224031703)) % 30U)
        {
          case 0:
            num1 = (int) num3 * -761516792 ^ -617601742;
            continue;
          case 1:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * 1982631466 ^ -2088213907;
            continue;
          case 2:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1429483400 ^ -1393175074;
            continue;
          case 3:
            num1 = (int) num3 * -1545784723 ^ 1001350395;
            continue;
          case 4:
            playerState.Sprint = 0;
            num1 = (int) num3 * -2123732574 ^ 1629522582;
            continue;
          case 5:
            goto label_3;
          case 6:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * 961318983 ^ 1761040153;
            continue;
          case 7:
            ++index;
            num1 = (int) num3 * -972188890 ^ -555388205;
            continue;
          case 8:
            int num4 = player.UseOneMorePlanningSprint ? 242849397 : (num4 = 146075079);
            num1 = num4 ^ (int) num3 * 1216895459;
            continue;
          case 9:
            num1 = (int) num3 * 1419940853 ^ 422823805;
            continue;
          case 10:
            index = 0;
            num1 = (int) num3 * -693349610 ^ 1280841261;
            continue;
          case 11:
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * -1131328380 ^ 783114822;
            continue;
          case 12:
            goto label_1;
          case 13:
            num2 = 0;
            num1 = -1619822978;
            continue;
          case 14:
            num1 = -386647032;
            continue;
          case 15:
            num1 = -1568473886;
            continue;
          case 16:
            int num5;
            num1 = num5 = index < this.Players.Length ? -1697378904 : (num5 = -292350120);
            continue;
          case 17:
            playerState.State = State.Playing;
            num1 = (int) num3 * 1736284001 ^ 581812398;
            continue;
          case 18:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * 499626281 ^ -2103504698;
            continue;
          case 19:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1034003829 ^ 2038306891;
            continue;
          case 20:
            int num6 = flag1 ? -676115608 : (num6 = -649210684);
            num1 = num6 ^ (int) num3 * 1304314062;
            continue;
          case 21:
            int num7 = !flag2 ? -1599147778 : (num7 = -405326959);
            num1 = num7 ^ (int) num3 * 1790299847;
            continue;
          case 22:
            playerState.Sprint = -1;
            num1 = (int) num3 * -677280163 ^ 168681967;
            continue;
          case 23:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -28715339 ^ 346799339;
            continue;
          case 24:
            flag1 = num2 > 0;
            num1 = -1263736351;
            continue;
          case 25:
            num1 = -1246496091;
            continue;
          case 26:
            num1 = (int) num3 * -793299571 ^ -317704274;
            continue;
          case 27:
            playerState.Sprint = 1;
            num1 = (int) num3 * 70126482 ^ -1350743319;
            continue;
          case 28:
            num1 = (int) num3 * -1312049807 ^ 368013021;
            continue;
          case 29:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -151393045;
            continue;
          default:
            goto label_32;
        }
      }
label_3:
      return;
label_32:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = 1713134755;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 809416516)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -412773024 ^ 400337990;
            continue;
          case 1:
            int num3 = this._currentPlayer >= this.Players.Length ? 1318599447 : (num3 = 31940204);
            num1 = num3 ^ (int) num2 * -1948907322;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.Print((object) Game.\u202A⁯‪‫‮⁮⁪⁪​‎⁫‌‮‮⁬⁬‎⁯‬​‪‫‍​‏‍⁬​⁭⁫‮‌​‭‬‌​‮‎‏‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 263667065;
            continue;
          case 4:
            this.PlayerTurn(this._currentPlayer);
            num1 = 2074532670;
            continue;
          case 5:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1091780149 ^ 1304281278;
            continue;
          case 6:
            goto label_1;
          case 7:
            this._currentPlayer = 0;
            flag = this._currentTurn > 0;
            num1 = (int) num2 * 1752561387 ^ 1848581289;
            continue;
          case 8:
            int num4 = !flag ? 1250239915 : (num4 = 53541987);
            num1 = num4 ^ (int) num2 * 473180362;
            continue;
          case 9:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u200E⁬⁭‏⁮‪‏‬‭‍‭​⁮⁭‫‫‎‎‭⁬‬⁫⁭‫⁯‍⁮‭‫‪‌‪‎⁯‎‬⁫‪​⁫‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1846867192 ^ -406038400;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -1220680919;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        Card card;
        PlayerState playerState1;
        PlayerState playerState2;
        bool flag4;
        bool flag5;
        bool flag6;
        bool onlyOneWinner;
        bool flag7;
        bool flag8;
        int num3;
        Player player;
        bool flag9;
        bool flag10;
        bool flag11;
        int index;
        bool flag12;
        int num4;
        bool flag13;
        bool flag14;
        int num5;
        switch ((num2 = (uint) (num1 ^ -261891814)) % 88U)
        {
          case 0:
            num1 = -1077043823;
            continue;
          case 1:
            int num6 = flag11 ? 1261799710 : (num6 = 336919043);
            num1 = num6 ^ (int) num2 * -1586297278;
            continue;
          case 2:
            int num7 = flag8 ? -1456774611 : (num7 = -528846513);
            num1 = num7 ^ (int) num2 * -1647511239;
            continue;
          case 3:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag2 ? (object) "ALL " : (object) "", flag10 ? (object) "receives" : (object) "pays", (object) Game.\u200E‫‍‏⁭​⁫‍⁬‭⁫⁯⁬‎​⁫⁫⁪⁭⁭⁬⁫‪‮‬​‎⁫​‭⁪⁯‎‎⁫⁫⁮‮‫⁯‮(num4), flag3 ? (object) "advance" : (object) "stay");
            num1 = -1504951678;
            continue;
          case 4:
            num1 = (int) num2 * -929526779 ^ -1958906649;
            continue;
          case 5:
            flag11 = !flag10;
            num1 = (int) num2 * 40609236 ^ 1544099959;
            continue;
          case 6:
            playerState1.State = State.Lose;
            flag1 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -1904137506 ^ -1449768853;
            continue;
          case 7:
            num1 = (int) num2 * -1004595225 ^ -482850714;
            continue;
          case 8:
            goto label_1;
          case 9:
            num5 = card.Type == 4 ? 1 : 0;
            break;
          case 10:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u206B⁮‌⁪‮‏⁫‍‬⁬⁪​‪⁮‎‪‏⁮⁫​⁬‪⁮​‭‌⁪‏‪⁮‏⁬‪‏‫‮⁪⁫‭⁪‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 822139343 ^ -494409763;
            continue;
          case 11:
            num1 = (int) num2 * 306824570 ^ -1683804602;
            continue;
          case 12:
            int num8 = flag5 ? 2071269939 : (num8 = 539846320);
            num1 = num8 ^ (int) num2 * 2012637742;
            continue;
          case 13:
            num1 = -846120218;
            continue;
          case 14:
            int num9 = !flag14 ? 270386111 : (num9 = 682110463);
            num1 = num9 ^ (int) num2 * 417293992;
            continue;
          case 15:
            int num10 = flag6 ? 784207973 : (num10 = 1234549964);
            num1 = num10 ^ (int) num2 * 606167104;
            continue;
          case 16:
            num1 = -1933020367;
            continue;
          case 17:
            num1 = -522359001;
            continue;
          case 18:
            num1 = (int) num2 * -653983921 ^ 1854890876;
            continue;
          case 19:
            int num11 = this.Losers.Contains(index) ? -97362951 : (num11 = -1043297565);
            num1 = num11 ^ (int) num2 * -1146864527;
            continue;
          case 20:
            num1 = -1346308431;
            continue;
          case 21:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200E⁬⁭‏⁮‪‏‬‭‍‭​⁮⁭‫‫‎‎‭⁬‬⁫⁭‫⁯‍⁮‭‫‪‌‪‎⁯‎‬⁫‪​⁫‮("\t", playerState3 != null ? Game.\u206B‮⁯​‭‏‎​‍‫‏⁮⁬⁯‫‬‌‮⁯‮⁯⁯⁯‭‫‪‮⁭‎‏⁭‪‮‬‮‌‪‏⁪‮‮((object) playerState3) : (string) null));
            num1 = -614717615;
            continue;
          case 22:
            num1 = -245378394;
            continue;
          case 23:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num5 = 0;
              break;
            }
            num1 = (int) num2 * 1822502811 ^ 716452886;
            continue;
          case 24:
            int num12 = flag9 ? 319717620 : (num12 = 739310268);
            num1 = num12 ^ (int) num2 * 116559393;
            continue;
          case 25:
            flag3 = false;
            num1 = -765296739;
            continue;
          case 26:
            num1 = -1109636760;
            continue;
          case 27:
            ++num3;
            num1 = -1218206828;
            continue;
          case 28:
            card = this.DrawCard();
            flag10 = card.Impact < 0;
            num1 = (int) num2 * 221954898 ^ -632822683;
            continue;
          case 29:
            index = 0;
            num1 = (int) num2 * 1743607919 ^ 2130136750;
            continue;
          case 30:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -891413574 ^ -68715222;
            continue;
          case 31:
            num1 = (int) num2 * -1544729056 ^ 104097692;
            continue;
          case 32:
            num4 = card.Impact;
            num1 = (int) num2 * -1445971617 ^ -1070568055;
            continue;
          case 33:
            flag4 = playerState2.Resources >= 0;
            num1 = (int) num2 * 151597002 ^ 1605305136;
            continue;
          case 34:
            playerState1.Resources -= num4;
            num1 = (int) num2 * -546169976 ^ 1979357940;
            continue;
          case 35:
            goto label_3;
          case 36:
            int num13 = onlyOneWinner ? 76124991 : (num13 = 745015703);
            num1 = num13 ^ (int) num2 * -1904440743;
            continue;
          case 37:
            num1 = (int) num2 * -1671986093 ^ -853530866;
            continue;
          case 38:
            int num14;
            num1 = num14 = num3 >= this._playerStates.Length ? -1185301706 : (num14 = -2096511610);
            continue;
          case 39:
            num1 = (int) num2 * 639354138 ^ -1358983582;
            continue;
          case 40:
            int num15 = flag2 ? -474768884 : (num15 = -1763143337);
            num1 = num15 ^ (int) num2 * 1797592375;
            continue;
          case 41:
            num1 = (int) num2 * -1979247561 ^ -2102827298;
            continue;
          case 42:
            flag7 = playerState1.Sprint < 0;
            num1 = -2097168596;
            continue;
          case 43:
            flag6 = num3 == playerIndex;
            num1 = (int) num2 * 541434886 ^ -155637217;
            continue;
          case 44:
            flag3 = true;
            num1 = (int) num2 * -1440698947 ^ 504663214;
            continue;
          case 45:
            num1 = (int) num2 * 233209991 ^ -1692790709;
            continue;
          case 46:
            int num16 = !flag7 ? 2138579612 : (num16 = 2027354518);
            num1 = num16 ^ (int) num2 * 1874402349;
            continue;
          case 47:
            int num17 = card.Impact - player.PlannedForCard(card.Type);
            flag3 = num17 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u206B⁮‌⁪‮‏⁫‍‬⁬⁪​‪⁮‎‪‏⁮⁫​⁬‪⁮​‭‌⁪‏‪⁮‏⁬‪‏‫‮⁪⁫‭⁪‮(0, num17);
            num1 = (int) num2 * 1142528174 ^ -1591021189;
            continue;
          case 48:
            flag8 = flag3;
            num1 = -1407768352;
            continue;
          case 49:
            num1 = (int) num2 * 1241822930 ^ -514308695;
            continue;
          case 50:
            num1 = (int) num2 * -1877126423 ^ -1277134341;
            continue;
          case 51:
            player = this.Players[playerIndex];
            num1 = (int) num2 * 17060643 ^ -85881583;
            continue;
          case 52:
            num1 = -652729542;
            continue;
          case 53:
            flag3 = true;
            num1 = (int) num2 * 247063258 ^ -1256431120;
            continue;
          case 54:
            flag13 = !this.Losers.Contains(num3);
            num1 = -1857813927;
            continue;
          case 55:
            int num18;
            num1 = num18 = playerState1.Sprint > this.Rules.SprintCount ? -494947947 : (num18 = -522359001);
            continue;
          case 56:
            flag14 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -1932335660;
            continue;
          case 57:
            playerState2.State = State.Lose;
            num1 = -584374127;
            continue;
          case 58:
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u200E⁬⁭‏⁮‪‏‬‭‍‭​⁮⁭‫‫‎‎‭⁬‬⁫⁭‫⁯‍⁮‭‫‪‌‪‎⁯‎‬⁫‪​⁫‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 191184827 ^ 1783511177;
            continue;
          case 59:
            num1 = -955684402;
            continue;
          case 60:
            num1 = (int) num2 * 1246475635 ^ -9538374;
            continue;
          case 61:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1219786185 ^ 674869598;
            continue;
          case 62:
            num1 = (int) num2 * -369395522 ^ -849586207;
            continue;
          case 63:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -1509792794 ^ 1406719297;
            continue;
          case 64:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 2115701478 ^ 854316219;
            continue;
          case 65:
            num1 = (int) num2 * 290354376 ^ 1629607410;
            continue;
          case 66:
            num3 = 0;
            num1 = (int) num2 * 221549299 ^ -712787093;
            continue;
          case 67:
            flag5 = playerState1.State != 0;
            num1 = (int) num2 * 166182778 ^ -1731998160;
            continue;
          case 68:
            num1 = (int) num2 * 521417338 ^ 657776762;
            continue;
          case 69:
            int num19 = !flag1 ? 1001069458 : (num19 = 942394084);
            num1 = num19 ^ (int) num2 * -1418670027;
            continue;
          case 70:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1818762234 ^ -1404978464;
            continue;
          case 71:
            num1 = (int) num2 * -578162674 ^ -1009340554;
            continue;
          case 72:
            int num20 = flag4 ? -631856208 : (num20 = -1741180685);
            num1 = num20 ^ (int) num2 * 51614880;
            continue;
          case 73:
            this._finished = true;
            num1 = (int) num2 * 868398885 ^ -1812013947;
            continue;
          case 74:
            num1 = (int) num2 * -2005329040 ^ -1978463407;
            continue;
          case 75:
            int num21 = flag13 ? -1643100736 : (num21 = -768697337);
            num1 = num21 ^ (int) num2 * 2001448087;
            continue;
          case 76:
            int num22 = flag12 ? 1647088972 : (num22 = 1352769130);
            num1 = num22 ^ (int) num2 * -1382791077;
            continue;
          case 77:
            flag12 = index < this._playerStates.Length;
            num1 = -1053883258;
            continue;
          case 78:
            flag9 = playerState1.Resources < 0;
            num1 = (int) num2 * 1575227965 ^ 408327388;
            continue;
          case 79:
            this.Losers.Add(num3);
            num1 = (int) num2 * 329990228 ^ -2012323637;
            continue;
          case 80:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 219082688 ^ 1884465489;
            continue;
          case 81:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -643479903 ^ 2028737506;
            continue;
          case 82:
            this.Losers.Add(index);
            num1 = (int) num2 * 1795880173 ^ 1643560124;
            continue;
          case 83:
            ++index;
            num1 = -808796281;
            continue;
          case 84:
            num1 = (int) num2 * 1290670712 ^ 1342841942;
            continue;
          case 85:
            num1 = (int) num2 * 52875653 ^ -516015373;
            continue;
          case 86:
            num1 = -417136265;
            continue;
          case 87:
            num1 = (int) num2 * 72742676 ^ -164894083;
            continue;
          default:
            goto label_93;
        }
        flag2 = num5 != 0;
        num1 = -802150473;
      }
label_3:
      return;
label_93:;
    }

    private Card DrawCard()
    {
      bool flag = this._deck.Count <= 0;
label_1:
      int num1 = -2049792054;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2118947438)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            this._deck.RemoveAt(0);
            card2 = card1;
            num1 = (int) num2 * -1943692968 ^ 1963307671;
            continue;
          case 2:
            int num3 = !flag ? 1515026508 : (num3 = 193770840);
            num1 = num3 ^ (int) num2 * 1664407105;
            continue;
          case 3:
            this.ShuffleCards();
            num1 = (int) num2 * 2145686399 ^ -1927456154;
            continue;
          case 4:
            card1 = this._deck[0];
            num1 = -49008585;
            continue;
          case 5:
            num1 = (int) num2 * 74744864 ^ 1611076436;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -927151131;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -389266980)) % 8U)
        {
          case 0:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206B‮⁯​‭‏‎​‍‫‏⁮⁬⁯‫‬‌‮⁯‮⁯⁯⁯‭‫‪‮⁭‎‏⁭‪‮‬‮‌‪‏⁪‮‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200E‌‮⁫‪​⁬​‮⁮⁭⁭​‭‎‫‪‫‭‎‭⁮‍‪‌⁫‍‮‫​‪‍‎⁬‬‪⁭⁬‪⁯‮(strArray);
            num1 = -631029480;
            continue;
          case 1:
            str1 = "";
            num1 = (int) num2 * 2007204568 ^ -109925415;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * 1241082934 ^ -282423618;
            continue;
          case 3:
            int num3;
            num1 = num3 = index >= this._playerStates.Length ? -1236973770 : (num3 = -1331627076);
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * -1837716825 ^ -69607845;
            continue;
          case 5:
            index = 0;
            num1 = (int) num2 * 937638687 ^ -1497611516;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1322483909;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1981955008)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 1543489542 ^ 1521058184;
            continue;
          case 2:
            num1 = (int) num2 * -1495480945 ^ 147396933;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = 274260430;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1225120455)) % 3U)
        {
          case 1:
            str = Game.\u200E‌‭‌‌⁫‬‫‬⁬⁮‪‍⁯‍‍⁬‮⁮⁬‪​‬‍‫⁭‏⁫⁮⁭⁬⁮⁬​⁮⁭‪⁫‏⁬‮(Game.\u206B‮⁯​‭‏‎​‍‫‏⁮⁬⁯‫‬‌‮⁯‮⁯⁯⁯‭‫‪‮⁭‎‏⁭‪‮‬‮‌‪‏⁪‮‮(text), more);
            num1 = (int) num2 * -1380750568 ^ -1908456131;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      Game.\u202A‭‭⁯​​⁪‮‮‭‭⁯‎⁫⁪‪⁯‬‍‌‭⁬​⁭‫‫‏‮‬‭‭‪⁪‫‌⁫‪⁭⁭⁬‮(this._buffer, str);
    }

    static Random \u206D‍⁮‏​‏​‌⁯⁬⁮⁮‭⁮‍‫‬‪‪‭⁫‬⁫⁬‪⁫⁪‬‮‮⁪⁪‏‭⁫‪‎‏‏⁮‮([In] int obj0) => new Random(obj0);

    static string \u202A⁯‪‫‮⁮⁪⁪​‎⁫‌‮‮⁬⁬‎⁯‬​‪‫‍​‏‍⁬​⁭⁫‮‌​‭‬‌​‮‎‏‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200E⁬⁭‏⁮‪‏‬‭‍‭​⁮⁭‫‫‎‎‭⁬‬⁫⁭‫⁯‍⁮‭‫‪‌‪‎⁯‎‬⁫‪​⁫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206B⁮‌⁪‮‏⁫‍‬⁬⁪​‪⁮‎‪‏⁮⁫​⁬‪⁮​‭‌⁪‏‪⁮‏⁬‪‏‫‮⁪⁫‭⁪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200E‫‍‏⁭​⁫‍⁬‭⁫⁯⁬‎​⁫⁫⁪⁭⁭⁬⁫‪‮‬​‎⁫​‭⁪⁯‎‎⁫⁫⁮‮‫⁯‮([In] int obj0) => Math.Abs(obj0);

    static string \u206B‮⁯​‭‏‎​‍‫‏⁮⁬⁯‫‬‌‮⁯‮⁯⁯⁯‭‫‪‮⁭‎‏⁭‪‮‬‮‌‪‏⁪‮‮([In] object obj0) => obj0.ToString();

    static string \u200E‌‮⁫‪​⁬​‮⁮⁭⁭​‭‎‫‪‫‭‎‭⁮‍‪‌⁫‍‮‫​‪‍‎⁬‬‪⁭⁬‪⁯‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200E‌‭‌‌⁫‬‫‬⁬⁮‪‍⁯‍‍⁬‮⁮⁬‪​‬‍‫⁭‏⁫⁮⁭⁬⁮⁬​⁮⁭‪⁫‏⁬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202A‭‭⁯​​⁪‮‮‭‭⁯‎⁫⁪‪⁯‬‍‌‭⁬​⁭‫‫‏‮‬‭‭‪⁪‫‌⁫‪⁭⁭⁬‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
