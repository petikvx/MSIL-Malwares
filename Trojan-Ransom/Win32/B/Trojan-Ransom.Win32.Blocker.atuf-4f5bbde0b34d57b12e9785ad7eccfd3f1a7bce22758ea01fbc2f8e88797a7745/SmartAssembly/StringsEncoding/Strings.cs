// Decompiled with JetBrains decompiler
// Type: SmartAssembly.StringsEncoding.Strings
// Assembly: lolo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B447A0C5-68B9-43E8-8248-58465C7CD332
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.atuf-4f5bbde0b34d57b12e9785ad7eccfd3f1a7bce22758ea01fbc2f8e88797a7745.exe

using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace SmartAssembly.StringsEncoding
{
  public class Strings
  {
    private static readonly string MustUseCache;
    private static readonly string OffsetValue;
    private static readonly byte[] bytes;
    private static readonly Hashtable hashtable;
    private static readonly bool cacheStrings;
    private static readonly int offset;

    public static string Get([In] int obj0)
    {
      int index1;
      int num1;
      int count;
      string str1;
      int num2;
      do
      {
        int num3 = obj0;
        int num4;
        while (true)
        {
          int offset = Strings.offset;
          obj0 = num3 - offset;
          do
          {
            if (Strings.cacheStrings)
            {
              str1 = (string) Strings.hashtable[(object) obj0];
              switch (str1)
              {
                case null:
                  goto label_5;
                default:
                  continue;
              }
            }
            else
              goto label_5;
          }
          while (false);
          goto label_27;
label_5:
          int num5 = obj0;
          byte[] bytes = Strings.bytes;
          int index2 = num5;
          index1 = index2 + 1;
          num1 = (int) bytes[index2];
          num4 = num1 & 128;
          if (false)
            num3 = num4;
          else
            break;
        }
        if (num4 == 0)
        {
          num2 = num1;
          if (true)
          {
            count = num2;
            if (count != 0)
              goto label_21;
          }
          else
            goto label_28;
        }
        else
          goto label_11;
      }
      while (false);
      return string.Empty;
label_11:
      int num6;
      if ((num1 & 64) == 0)
      {
        int num7 = num1 & 63;
        if (true)
          num7 <<= 8;
        int num8 = (int) Strings.bytes[index1++];
        count = num7 + num8;
        goto label_21;
      }
      else
        num6 = num1;
label_16:
      int num9 = (num6 & 31) << 24;
      byte[] bytes1 = Strings.bytes;
      int index3 = index1;
      int num10 = index3 + 1;
      int num11 = (int) bytes1[index3];
      int num12;
      if (true)
        num12 = 16;
      else
        goto label_19;
label_18:
      int num13 = num11 << num12;
      int num14 = num9 + num13;
      num11 = (int) Strings.bytes[num10++];
      num9 = num14;
label_19:
      num12 = 8;
      if (num12 != 0)
      {
        int num15 = num11 << num12;
        int num16 = num9 + num15;
        byte[] bytes2 = Strings.bytes;
        int index4 = num10;
        index1 = index4 + 1;
        int num17 = (int) bytes2[index4];
        count = num16 + num17;
        goto label_21;
      }
      else
        goto label_18;
label_28:
      num6 = num2;
      goto label_16;
label_21:
      try
      {
        byte[] bytes3 = Convert.FromBase64String(Encoding.UTF8.GetString(Strings.bytes, index1, count));
        string str2 = string.Intern(Encoding.UTF8.GetString(bytes3, 0, bytes3.Length));
        if (Strings.cacheStrings)
        {
          try
          {
            Strings.hashtable.Add((object) obj0, (object) str2);
          }
          catch
          {
          }
        }
        return str2;
      }
      catch
      {
        return (string) null;
      }
label_27:
      return str1;
    }

    static Strings()
    {
      while (true)
      {
        Strings.MustUseCache = "1";
        if (true)
        {
          Strings.OffsetValue = "130";
          if (true)
          {
            Strings.bytes = (byte[]) null;
            Strings.hashtable = (Hashtable) null;
            int num1 = 0;
            int num2;
            while (true)
            {
              Strings.cacheStrings = num1 != 0;
              num2 = 0;
              if (num2 != 0)
                num1 = num2;
              else
                break;
            }
            Strings.offset = num2;
            if (Strings.MustUseCache == "1")
            {
              if (true)
              {
                Strings.cacheStrings = true;
                if (true)
                {
                  Strings.hashtable = new Hashtable();
                  break;
                }
                goto label_14;
              }
              else
                goto label_14;
            }
            else
              break;
          }
          else
            goto label_15;
        }
      }
      Strings.offset = Convert.ToInt32(Strings.OffsetValue);
label_14:
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
label_15:
      Stream manifestResourceStream = executingAssembly.GetManifestResourceStream("{9bc3e4e3-d19a-4b8b-8bd7-1830b9d5dba1}");
      if (true)
        goto label_16;
label_9:
      Stream stream;
      try
      {
        int int32 = Convert.ToInt32(stream.Length);
        Strings.bytes = new byte[int32];
        stream.Read(Strings.bytes, 0, int32);
        stream.Close();
        return;
      }
      finally
      {
        stream?.Dispose();
      }
label_16:
      stream = manifestResourceStream;
      goto label_9;
    }
  }
}
