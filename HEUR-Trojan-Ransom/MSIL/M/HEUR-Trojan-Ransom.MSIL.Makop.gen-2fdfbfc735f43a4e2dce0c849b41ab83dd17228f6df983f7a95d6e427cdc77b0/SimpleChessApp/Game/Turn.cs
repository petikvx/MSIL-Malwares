// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Turn
// Assembly: Xe, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E8DDD59-A67B-4ABD-99CD-92D28751A620
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2fdfbfc735f43a4e2dce0c849b41ab83dd17228f6df983f7a95d6e427cdc77b0.exe

using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class Turn
  {
    public int Id;
    public Notation White;
    public Notation Black;

    public override string ToString()
    {
label_1:
      int num1 = 986306625;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 623478976)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -871640833 ^ -890724762;
            continue;
          case 1:
            str = Turn.\u202E‫‎‌‏‎‮⁫⁮‍⁯​⁬‎⁫‎‪​⁪⁬‍⁬‍‫⁮‬‌⁫‬‫⁬‮⁯‍⁫‮​⁮‪‏‮(\u003CModule\u003E.\u200C⁪⁬‬⁪⁪⁬‭⁭⁫⁭⁪⁭⁪⁭‭‌⁭‎⁭‮⁬⁭‍​⁯‬⁫‌‮‎‫‏‬‭​​​⁮⁮‮<string>(953776748U), (object) this.Id, (object) this.White, (object) this.Black);
            num1 = (int) num2 * -1892630538 ^ 1041724834;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public Turn()
    {
label_1:
      int num1 = 846175822;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1123974872)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -2030668909 ^ 1406520482;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static string \u202E‫‎‌‏‎‮⁫⁮‍⁯​⁬‎⁫‎‪​⁪⁬‍⁬‍‫⁮‬‌⁫‬‫⁬‮⁯‍⁫‮​⁮‪‏‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
