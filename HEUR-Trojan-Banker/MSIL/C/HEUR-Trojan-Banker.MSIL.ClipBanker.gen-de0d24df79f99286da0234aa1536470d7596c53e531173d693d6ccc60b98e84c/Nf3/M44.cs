// Decompiled with JetBrains decompiler
// Type: Nf3.M44
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using \u0036b3;
using \u00373J;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using X5s;

namespace Nf3
{
  internal sealed class M44 : Stream
  {
    private int e8c;
    private bool \u0032I2;
    private \u0038H2 \u003322;
    private uint AT5;
    private Stream \u003148;
    private p59 qbN;
    private int p4v;
    private M44.\u00354v OR3 = M44.\u00354v.\u0023b | M44.\u00354v.\u0023c;

    public M44([In] Stream obj0, [In] bool obj1)
      : this(obj0, ky4.L75, obj1)
    {
    }

    public M44([In] Stream obj0, [In] int obj1, [In] bool obj2)
    {
      if (obj1 < ky4.ifp || obj1 > ky4.L75)
        throw new ArgumentException(string.Format("blockSize={0} is out of range; must be between {1} and {2}", (object) obj1, (object) ky4.ifp, (object) ky4.L75), "blockSize");
      this.\u003148 = obj0;
      this.qbN = this.\u003148.CanWrite ? new p59(this.\u003148) : throw new ArgumentException("The stream is not writable.", "output");
      this.p4v = obj1;
      this.\u003322 = new \u0038H2(this.qbN, obj1);
      this.\u0032I2 = obj2;
      this.AT5 = 0U;
      this.\u0035gO();
    }

    void Stream.gd6()
    {
      if (this.\u003148 == null)
        return;
      Stream stream = this.\u003148;
      this.JpA();
      if (this.\u0032I2)
        return;
      stream.Close();
    }

    void Stream.r9r()
    {
      if (this.\u003148 == null)
        return;
      this.qbN.\u00333G();
      this.\u003148.Flush();
    }

    private void \u0035gO()
    {
      byte[] buffer = new byte[4]
      {
        (byte) 66,
        (byte) 90,
        (byte) 104,
        (byte) (48 + this.p4v)
      };
      this.\u003148.Write(buffer, 0, buffer.Length);
    }

    private void \u0039qv()
    {
      this.qbN.\u003411((byte) 23);
      this.qbN.\u003411((byte) 114);
      this.qbN.\u003411((byte) 69);
      this.qbN.\u003411((byte) 56);
      this.qbN.\u003411((byte) 80);
      this.qbN.\u003411((byte) 144);
      this.qbN.V67(this.AT5);
      this.qbN.\u0038o4();
    }

    private void JpA()
    {
      try
      {
        this.qbN.\u003543();
        this.\u003322.GFk();
        this.AT5 = this.AT5 << 1 | this.AT5 >> 31;
        this.AT5 ^= this.\u003322.ceY();
        this.\u0039qv();
      }
      finally
      {
        this.\u003148 = (Stream) null;
        this.\u003322 = (\u0038H2) null;
        this.qbN = (p59) null;
      }
    }

    void Stream.\u00319Y([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
      if (obj1 < 0)
        throw new IndexOutOfRangeException(string.Format("offset ({0}) must be > 0", (object) obj1));
      if (obj2 < 0)
        throw new IndexOutOfRangeException(string.Format("count ({0}) must be > 0", (object) obj2));
      if (obj1 + obj2 > obj0.Length)
        throw new IndexOutOfRangeException(string.Format("offset({0}) count({1}) bLength({2})", (object) obj1, (object) obj2, (object) obj0.Length));
      if (this.\u003148 == null)
        throw new IOException("the stream is not open");
      if (obj2 == 0)
        return;
      int num1 = 0;
      int num2 = obj2;
      do
      {
        int num3 = this.\u003322.fkB(obj0, obj1, num2);
        if (num3 != num2)
        {
          this.qbN.\u003543();
          this.\u003322.GFk();
          this.AT5 = this.AT5 << 1 | this.AT5 >> 31;
          this.AT5 ^= this.\u003322.ceY();
          obj1 += num3;
        }
        num2 -= num3;
        num1 += num3;
      }
      while (num2 > 0);
      this.e8c += num1;
    }

    [SpecialName]
    bool Stream.\u0039O2() => false;

    [SpecialName]
    bool Stream.\u0038Xm() => false;

    [SpecialName]
    bool Stream.d1w() => this.\u003148 != null ? this.\u003148.CanWrite : throw new ObjectDisposedException("BZip2Stream");

    [SpecialName]
    long Stream.OW1() => throw new NotImplementedException();

    [SpecialName]
    long Stream.EUL() => (long) this.e8c;

    [SpecialName]
    void Stream.R3b([In] long obj0) => throw new NotImplementedException();

    long Stream.v7r([In] long obj0, [In] SeekOrigin obj1) => throw new NotImplementedException();

    void Stream.\u0032W5([In] long obj0) => throw new NotImplementedException();

    int Stream.\u0036qp([In] byte[] obj0, [In] int obj1, [In] int obj2) => throw new NotImplementedException();

    [Flags]
    private enum \u00354v : uint
    {
      \u0023a = 0,
      \u0023b = 1,
      \u0023c = 2,
      \u0023d = 4294967295, // 0xFFFFFFFF
    }
  }
}
