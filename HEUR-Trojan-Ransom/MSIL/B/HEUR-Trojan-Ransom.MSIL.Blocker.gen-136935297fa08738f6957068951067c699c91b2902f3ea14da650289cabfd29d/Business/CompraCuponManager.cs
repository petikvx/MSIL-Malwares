// Decompiled with JetBrains decompiler
// Type: Coache.Business.CompraCuponManager
// Assembly: IsCopyConstruc, Version=5.6.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 1DA50973-FF9A-4563-8B8F-74E2573677DF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-136935297fa08738f6957068951067c699c91b2902f3ea14da650289cabfd29d.exe

using Coache.Common;
using Data;
using System;
using System.ComponentModel;
using System.Configuration;
using System.Data;

namespace Coache.Business
{
  public class CompraCuponManager
  {
    public const string ESTADO_CONSUMIDO = "Consumido";
    public const string ESTADO_DEVUELTO = "Devuelto";
    public const string ESTADO_COMPRADO = "Comprado";

    public BindingList<CompraCupon> GetAll(
      Cliente cliente,
      DateTime fechaDesde,
      DateTime fechaHasta)
    {
      DateTime dateTime1 = new DateTime(fechaDesde.Year, fechaDesde.Month, fechaDesde.Day, 0, 0, 0);
      DateTime dateTime2 = new DateTime(fechaHasta.Year, fechaHasta.Month, fechaHasta.Day, 23, 59, 59);
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetComprasCliente", SqlDataAccessArgs.CreateWith("@ID_Cliente", (object) cliente.UserID).And("@FechaDesde", (object) dateTime1).And("@FechaHasta", (object) dateTime2).Arguments);
      BindingList<CompraCupon> all = new BindingList<CompraCupon>();
      if (dataTable != null && dataTable.Rows != null)
      {
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
          all.Add(new CompraCupon()
          {
            ID = int.Parse(row["ID"].ToString()),
            Precio = double.Parse(row["Precio"].ToString()),
            Fecha = Convert.ToDateTime(row["Fecha"]),
            FechaVencimiento = Convert.ToDateTime(row["FechaVencimiento"]),
            Descripcion = row["Descripcion"].ToString(),
            Codigo = row["Codigo"].ToString(),
            Estado = this.GetEstado(row["ID_Devolucion"], row["ID_Canje"])
          });
      }
      return all;
    }

    public BindingList<CompraCupon> GetParaFacturar(
      Proveedor proveedor,
      DateTime fechaDesde,
      DateTime fechaHasta)
    {
      DateTime dateTime1 = new DateTime(fechaDesde.Year, fechaDesde.Month, fechaDesde.Day, 0, 0, 0);
      DateTime dateTime2 = new DateTime(fechaHasta.Year, fechaHasta.Month, fechaHasta.Day, 23, 59, 59);
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetComprasParaFacturar", SqlDataAccessArgs.CreateWith("@ID_Proveedor", (object) proveedor.UserID).And("@FechaDesde", (object) dateTime1).And("@FechaHasta", (object) dateTime2).Arguments);
      BindingList<CompraCupon> paraFacturar = new BindingList<CompraCupon>();
      if (dataTable != null && dataTable.Rows != null)
      {
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
          paraFacturar.Add(new CompraCupon()
          {
            ID = int.Parse(row["ID_Canje"].ToString()),
            Precio = double.Parse(row["Precio"].ToString()),
            Fecha = Convert.ToDateTime(row["Fecha"]),
            Descripcion = row["Descripcion"].ToString(),
            Codigo = row["Codigo"].ToString(),
            Cliente = row["Cliente"].ToString()
          });
      }
      return paraFacturar;
    }

    public BindingList<CompraCupon> GetAll(Proveedor proveedor)
    {
      DateTime dateTime;
      ref DateTime local = ref dateTime;
      DateTime now = DateTime.Now;
      int year = now.Year;
      now = DateTime.Now;
      int month = now.Month;
      now = DateTime.Now;
      int day = now.Day;
      local = new DateTime(year, month, day, 23, 59, 59);
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetComprasProveedor", SqlDataAccessArgs.CreateWith("@ID_Proveedor", (object) proveedor.UserID).And("@FechaVencimiento", (object) dateTime).Arguments);
      BindingList<CompraCupon> all = new BindingList<CompraCupon>();
      if (dataTable != null && dataTable.Rows != null)
      {
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
          all.Add(new CompraCupon()
          {
            ID = int.Parse(row["ID"].ToString()),
            Precio = double.Parse(row["Precio"].ToString()),
            Fecha = Convert.ToDateTime(row["Fecha"]),
            Descripcion = row["Descripcion"].ToString(),
            Codigo = row["Codigo"].ToString(),
            Cliente = row["Cliente"].ToString()
          });
      }
      return all;
    }

    private string GetEstado(object idDevolucion, object idCanje)
    {
      switch (idDevolucion)
      {
        case null:
        case DBNull _:
          switch (idCanje)
          {
            case null:
            case DBNull _:
              return "Comprado";
            default:
              return "Consumido";
          }
        default:
          return "Devuelto";
      }
    }

    public void DevolverCompra(Cliente cliente, CompraCupon compraCupon, string motivo)
    {
      object obj = SqlDataAccess.ExecuteScalarQuery<object>(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.InsertDevolucionCompra", SqlDataAccessArgs.CreateWith("@ID_Cliente", (object) cliente.UserID).And("@ID_CompraCupon", (object) compraCupon.ID).And("@Fecha", (object) DateTime.Now).And("@Motivo", (object) motivo).Arguments);
      int result = 0;
      if (obj == null || !int.TryParse(obj.ToString(), out result) || result == 0)
        throw new Exception("No se puede devolver una compra ya consumida");
    }

    public void ConsumirCompra(CompraCupon compraCupon) => SqlDataAccess.ExecuteNonQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.InsertCanjeCupon", SqlDataAccessArgs.CreateWith("@ID_CompraCupon", (object) compraCupon.ID).And("@Fecha", (object) DateTime.Now).Arguments);
  }
}
