// Decompiled with JetBrains decompiler
// Type: Catfood.Shapefile.ShapeMultiPoint
// Assembly: 太城hضd氏bTنH, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FB883643-FAF4-44BB-B4FC-F1B0FC1059A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Backdoor.Win32.Androm.uluz-2b99f5aaaa6cfc4766e8c7eaafe2cabccccd31ced962d84f0bc1cf97bc9a1e23.exe

using System;
using System.Collections.Specialized;
using System.Data;

namespace Catfood.Shapefile
{
  public class ShapeMultiPoint : Shape
  {
    private RectangleD _boundingBox;
    private PointD[] _points;

    protected internal ShapeMultiPoint(
      int recordNumber,
      StringDictionary metadata,
      IDataRecord dataRecord,
      byte[] shapeData)
      : base(ShapeType.MultiPoint, recordNumber, metadata, dataRecord)
    {
      if (shapeData == null)
        throw new ArgumentNullException(nameof (shapeData));
      this._boundingBox = shapeData.Length >= 48 ? this.ParseBoundingBox(shapeData, 12, ProvidedOrder.Little) : throw new InvalidOperationException("Invalid shape data");
      int int32 = EndianBitConverter.ToInt32(shapeData, 44, ProvidedOrder.Little);
      if (shapeData.Length != 48 + 16 * int32)
        throw new InvalidOperationException("Invalid shape data");
      this._points = new PointD[int32];
      for (int index = 0; index < int32; ++index)
        this._points[index] = new PointD(EndianBitConverter.ToDouble(shapeData, 48 + 16 * index, ProvidedOrder.Little), EndianBitConverter.ToDouble(shapeData, 56 + 16 * index, ProvidedOrder.Little));
    }

    public RectangleD BoundingBox => this._boundingBox;

    public PointD[] Points => this._points;
  }
}
