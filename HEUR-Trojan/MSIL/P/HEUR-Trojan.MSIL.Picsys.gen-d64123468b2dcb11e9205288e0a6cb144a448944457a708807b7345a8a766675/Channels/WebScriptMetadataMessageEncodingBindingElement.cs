// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Channels.WebScriptMetadataMessageEncodingBindingElement
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Xml;

namespace System.ServiceModel.Channels
{
  internal sealed class WebScriptMetadataMessageEncodingBindingElement : 
    MessageEncodingBindingElement
  {
    private XmlDictionaryReaderQuotas readerQuotas;

    public WebScriptMetadataMessageEncodingBindingElement()
    {
      this.readerQuotas = new XmlDictionaryReaderQuotas();
      EncoderDefaults.ReaderQuotas.CopyTo(this.readerQuotas);
    }

    private WebScriptMetadataMessageEncodingBindingElement(
      WebScriptMetadataMessageEncodingBindingElement elementToBeCloned)
      : base((MessageEncodingBindingElement) elementToBeCloned)
    {
      this.readerQuotas = new XmlDictionaryReaderQuotas();
      elementToBeCloned.readerQuotas.CopyTo(this.readerQuotas);
    }

    public override MessageVersion MessageVersion
    {
      get => MessageVersion.None;
      set
      {
        if (value == null)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (value));
        if (value != MessageVersion.None)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgument(nameof (value), SR2.GetString(SR2.JsonOnlySupportsMessageVersionNone));
      }
    }

    public XmlDictionaryReaderQuotas ReaderQuotas => this.readerQuotas;

    public override IChannelFactory<TChannel> BuildChannelFactory<TChannel>(
      BindingContext context)
    {
      return this.InternalBuildChannelFactory<TChannel>(context);
    }

    public override IChannelListener<TChannel> BuildChannelListener<TChannel>(
      BindingContext context)
    {
      return this.InternalBuildChannelListener<TChannel>(context);
    }

    public override bool CanBuildChannelFactory<TChannel>(BindingContext context) => this.InternalCanBuildChannelFactory<TChannel>(context);

    public override bool CanBuildChannelListener<TChannel>(BindingContext context) => this.InternalCanBuildChannelListener<TChannel>(context);

    public override BindingElement Clone() => (BindingElement) new WebScriptMetadataMessageEncodingBindingElement(this);

    public override MessageEncoderFactory CreateMessageEncoderFactory() => (MessageEncoderFactory) new WebScriptMetadataMessageEncoderFactory(this.ReaderQuotas);

    public override T GetProperty<T>(BindingContext context)
    {
      if (context == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (context));
      return typeof (T) == typeof (XmlDictionaryReaderQuotas) ? (T) this.readerQuotas : base.GetProperty<T>(context);
    }
  }
}
