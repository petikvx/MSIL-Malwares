// Decompiled with JetBrains decompiler
// Type: ?10?
// Assembly: wLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89823795-D5B3-4CC9-949D-6649607AF138
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bndr-d893b556a8d0493f8839c80049bd91fd0bdbcb93646edcc7b2f28d89325ced11.exe

using System;
using System.IO;

public sealed class \u003F10\u003F : \u003F7\u003F, \u003F8\u003F
{
  private \u003F4\u003F \u003F0\u003F = new \u003F4\u003F();
  private \u003F14\u003F \u003F0\u003F = new \u003F14\u003F();
  private \u003F12\u003F[] \u003F0\u003F = new \u003F12\u003F[new IntPtr(192)];
  private \u003F12\u003F[] \u003F5\u003F = new \u003F12\u003F[new IntPtr(12)];
  private \u003F12\u003F[] \u003F9\u003F = new \u003F12\u003F[new IntPtr(12)];
  private \u003F12\u003F[] \u003F11\u003F = new \u003F12\u003F[new IntPtr(12)];
  private \u003F12\u003F[] \u003F12\u003F = new \u003F12\u003F[new IntPtr(12)];
  private \u003F12\u003F[] \u003F13\u003F = new \u003F12\u003F[new IntPtr(192)];
  private \u003F13\u003F[] \u003F0\u003F = new \u003F13\u003F[new IntPtr(4)];
  private \u003F12\u003F[] \u003F14\u003F = new \u003F12\u003F[new IntPtr(114)];
  private \u003F13\u003F \u003F0\u003F = new \u003F13\u003F(4);
  private \u003F10\u003F.\u003F0\u003F \u003F0\u003F = new \u003F10\u003F.\u003F0\u003F();
  private \u003F10\u003F.\u003F0\u003F \u003F5\u003F = new \u003F10\u003F.\u003F0\u003F();
  private \u003F10\u003F.\u003F5\u003F \u003F0\u003F = new \u003F10\u003F.\u003F5\u003F();
  private uint \u003F0\u003F;
  private uint \u003F5\u003F;
  private uint \u003F9\u003F;

  public \u003F10\u003F()
  {
    this.\u003F0\u003F = uint.MaxValue;
    for (int index = 0; index < 4; ++index)
      this.\u003F0\u003F[index] = new \u003F13\u003F(6);
  }

  private void \u003F0\u003F(uint _param1)
  {
    if ((int) this.\u003F0\u003F == (int) _param1)
      return;
    this.\u003F0\u003F = _param1;
    int num1 = 0;
    uint num2;
    while (true)
    {
      switch (num1)
      {
        case 0:
          this.\u003F5\u003F = Math.Max(this.\u003F0\u003F, 1U);
          num1 = 1;
          continue;
        case 1:
          num2 = Math.Max(this.\u003F5\u003F, 4096U);
          num1 = 2;
          continue;
        default:
          goto label_4;
      }
    }
label_4:
    this.\u003F0\u003F.\u003F1\u003F(num2);
  }

  private void \u003F0\u003F(int _param1, int _param2)
  {
    if (_param1 > 8)
      throw new \u003F18\u003F();
    if (_param2 > 8)
      throw new \u003F18\u003F();
    this.\u003F0\u003F.\u003F0\u003F(_param1, _param2);
  }

  private void \u003F0\u003F(int _param1)
  {
    if (_param1 > 4)
      throw new \u003F18\u003F();
    uint num1 = (uint) (1 << _param1);
    int num2 = 0;
    while (true)
    {
      switch (num2)
      {
        case 0:
          this.\u003F0\u003F.\u003F0\u003F(num1);
          num2 = 1;
          continue;
        case 1:
          this.\u003F5\u003F.\u003F0\u003F(num1);
          num2 = 2;
          continue;
        case 2:
          this.\u003F9\u003F = num1 - 1U;
          num2 = 3;
          continue;
        default:
          goto label_7;
      }
    }
label_7:;
  }

  private void \u003F0\u003F(Stream _param1, Stream _param2)
  {
    this.\u003F0\u003F.\u003F0\u003F(_param1);
    int num1 = 0;
    uint index1;
    uint num2;
    uint index2;
    while (true)
    {
      switch (num1)
      {
        case 0:
          this.\u003F0\u003F.\u003F1\u003F(_param2);
          num1 = 1;
          continue;
        case 1:
          index1 = 0U;
          num1 = 2;
          continue;
        case 2:
          if (index1 < 12U)
          {
            num2 = 0U;
            num1 = 3;
            continue;
          }
          this.\u003F0\u003F.\u003F0\u003F();
          num1 = 11;
          continue;
        case 3:
          if (num2 <= this.\u003F9\u003F)
          {
            index2 = (index1 << 4) + num2;
            num1 = 4;
            continue;
          }
          this.\u003F5\u003F[(IntPtr) index1].\u003F0\u003F();
          num1 = 7;
          continue;
        case 4:
          this.\u003F0\u003F[(IntPtr) index2].\u003F0\u003F();
          num1 = 5;
          continue;
        case 5:
          this.\u003F13\u003F[(IntPtr) index2].\u003F0\u003F();
          num1 = 6;
          continue;
        case 6:
          ++num2;
          goto case 3;
        case 7:
          this.\u003F9\u003F[(IntPtr) index1].\u003F0\u003F();
          num1 = 8;
          continue;
        case 8:
          this.\u003F11\u003F[(IntPtr) index1].\u003F0\u003F();
          num1 = 9;
          continue;
        case 9:
          this.\u003F12\u003F[(IntPtr) index1].\u003F0\u003F();
          num1 = 10;
          continue;
        case 10:
          ++index1;
          goto case 2;
        case 11:
          index1 = 0U;
          num1 = 12;
          continue;
        case 12:
          if (index1 < 4U)
          {
            this.\u003F0\u003F[(IntPtr) index1].\u003F0\u003F();
            num1 = 13;
            continue;
          }
          index1 = 0U;
          num1 = 14;
          continue;
        case 13:
          ++index1;
          goto case 12;
        case 14:
          if (index1 < 114U)
          {
            this.\u003F14\u003F[(IntPtr) index1].\u003F0\u003F();
            num1 = 15;
            continue;
          }
          this.\u003F0\u003F.\u003F0\u003F();
          num1 = 16;
          continue;
        case 15:
          ++index1;
          goto case 14;
        case 16:
          this.\u003F5\u003F.\u003F0\u003F();
          num1 = 17;
          continue;
        case 17:
          this.\u003F0\u003F.\u003F0\u003F();
          num1 = 18;
          continue;
        default:
          goto label_28;
      }
    }
label_28:;
  }

  public void \u0002\u2002\u2009\u2001\u0002(
    Stream _param1,
    Stream _param2,
    long _param3,
    long _param4,
    \u003F16\u003F _param5)
  {
    this.\u003F0\u003F(_param1, _param2);
    int num1 = 0;
    while (true)
    {
      \u003F5\u003F.\u003F0\u003F obj;
      uint num2;
      uint num3;
      uint num4;
      uint num5;
      ulong num6;
      ulong num7;
      byte num8;
      uint num9;
      byte num10;
      byte num11;
      uint num12;
      uint num13;
      uint num14;
      int num15;
      switch (num1)
      {
        case 0:
          obj = new \u003F5\u003F.\u003F0\u003F();
          num1 = 1;
          continue;
        case 1:
          obj.\u003F0\u003F();
          num1 = 2;
          continue;
        case 2:
          num2 = 0U;
          num1 = 3;
          continue;
        case 3:
          num3 = 0U;
          num1 = 4;
          continue;
        case 4:
          num4 = 0U;
          num1 = 5;
          continue;
        case 5:
          num5 = 0U;
          num1 = 6;
          continue;
        case 6:
          num6 = 0UL;
          num1 = 7;
          continue;
        case 7:
          num7 = (ulong) _param4;
          num1 = 8;
          continue;
        case 8:
          if (num6 < num7)
          {
            if (this.\u003F0\u003F[(IntPtr) (obj.\u003F0\u003F << 4)].\u003F0\u003F(this.\u003F0\u003F) == 0U)
            {
              obj.\u003F5\u003F();
              num1 = 9;
              continue;
            }
            goto label_55;
          }
          else
            goto case 12;
        case 9:
          num8 = this.\u003F0\u003F.\u003F0\u003F(this.\u003F0\u003F, 0U, (byte) 0);
          num1 = 10;
          continue;
        case 10:
          this.\u003F0\u003F.\u003F1\u003F(num8);
          num1 = 11;
          continue;
        case 11:
          ++num6;
          num1 = 12;
          continue;
        case 12:
        case 18:
        case 21:
          if (num6 < num7)
          {
            num9 = (uint) num6 & this.\u003F9\u003F;
            num1 = 13;
            continue;
          }
          goto label_51;
        case 13:
          if (this.\u003F0\u003F[(IntPtr) ((obj.\u003F0\u003F << 4) + num9)].\u003F0\u003F(this.\u003F0\u003F) != 0U)
          {
            if (this.\u003F5\u003F[(IntPtr) obj.\u003F0\u003F].\u003F0\u003F(this.\u003F0\u003F) != 1U)
            {
              num5 = num4;
              num1 = 28;
              continue;
            }
            if (this.\u003F9\u003F[(IntPtr) obj.\u003F0\u003F].\u003F0\u003F(this.\u003F0\u003F) != 0U)
            {
              if (this.\u003F11\u003F[(IntPtr) obj.\u003F0\u003F].\u003F0\u003F(this.\u003F0\u003F) != 0U)
              {
                if (this.\u003F12\u003F[(IntPtr) obj.\u003F0\u003F].\u003F0\u003F(this.\u003F0\u003F) != 0U)
                {
                  num12 = num5;
                  num1 = 24;
                  continue;
                }
                num12 = num4;
                num1 = 23;
                continue;
              }
              num12 = num3;
              num1 = 22;
              continue;
            }
            if (this.\u003F13\u003F[(IntPtr) ((obj.\u003F0\u003F << 4) + num9)].\u003F0\u003F(this.\u003F0\u003F) == 0U)
            {
              obj.\u003F12\u003F();
              num1 = 19;
              continue;
            }
            break;
          }
          num10 = this.\u003F0\u003F.\u003F1\u003F(0U);
          num1 = 14;
          continue;
        case 14:
          if (obj.\u003F0\u003F())
          {
            num11 = this.\u003F0\u003F.\u003F0\u003F(this.\u003F0\u003F, (uint) num6, num10);
            goto case 15;
          }
          else
          {
            num11 = this.\u003F0\u003F.\u003F0\u003F(this.\u003F0\u003F, (uint) num6, num10, this.\u003F0\u003F.\u003F1\u003F(num2));
            num1 = 15;
            continue;
          }
        case 15:
          this.\u003F0\u003F.\u003F1\u003F(num11);
          num1 = 16;
          continue;
        case 16:
          obj.\u003F5\u003F();
          num1 = 17;
          continue;
        case 17:
          ++num6;
          num1 = 18;
          continue;
        case 19:
          this.\u003F0\u003F.\u003F1\u003F(this.\u003F0\u003F.\u003F1\u003F(num2));
          num1 = 20;
          continue;
        case 20:
          ++num6;
          num1 = 21;
          continue;
        case 22:
          num3 = num2;
          num1 = 25;
          continue;
        case 23:
          num4 = num3;
          goto case 22;
        case 24:
          num5 = num4;
          goto case 23;
        case 25:
          num2 = num12;
          break;
        case 26:
          obj.\u003F11\u003F();
          num1 = 27;
          continue;
        case 27:
        case 36:
        case 38:
          if ((ulong) num2 >= num6 || num2 >= this.\u003F5\u003F)
          {
            if (num2 == uint.MaxValue)
              goto label_51;
            else
              goto label_65;
          }
          else
          {
            this.\u003F0\u003F.\u003F1\u003F(num2, num13);
            num1 = 39;
            continue;
          }
        case 28:
          num4 = num3;
          num1 = 29;
          continue;
        case 29:
          num3 = num2;
          num1 = 30;
          continue;
        case 30:
          num13 = 2U + this.\u003F0\u003F.\u003F0\u003F(this.\u003F0\u003F, num9);
          num1 = 31;
          continue;
        case 31:
          obj.\u003F9\u003F();
          num1 = 32;
          continue;
        case 32:
          num14 = this.\u003F0\u003F[(IntPtr) \u003F5\u003F.\u003F0\u003F(num13)].\u003F0\u003F(this.\u003F0\u003F);
          num1 = 33;
          continue;
        case 33:
          if (num14 < 4U)
          {
            num2 = num14;
            goto case 27;
          }
          else
          {
            num15 = (int) (num14 >> 1) - 1;
            num1 = 34;
            continue;
          }
        case 34:
          num2 = (uint) ((2 | (int) num14 & 1) << num15);
          num1 = 35;
          continue;
        case 35:
          if (num14 >= 14U)
          {
            num2 += this.\u003F0\u003F.\u003F0\u003F(num15 - 4) << 4;
            num1 = 37;
            continue;
          }
          num2 += \u003F13\u003F.\u003F0\u003F(this.\u003F14\u003F, (uint) ((int) num2 - (int) num14 - 1), this.\u003F0\u003F, num15);
          num1 = 36;
          continue;
        case 37:
          num2 += this.\u003F0\u003F.\u003F5\u003F(this.\u003F0\u003F);
          num1 = 38;
          continue;
        case 39:
          num6 += (ulong) num13;
          goto case 12;
        case 40:
          this.\u003F0\u003F.\u003F1\u003F();
          num1 = 41;
          continue;
        case 41:
          this.\u003F0\u003F.\u003F0\u003F();
          num1 = 42;
          continue;
        default:
          goto label_66;
      }
      num13 = this.\u003F5\u003F.\u003F0\u003F(this.\u003F0\u003F, num9) + 2U;
      num1 = 26;
      continue;
label_51:
      this.\u003F0\u003F.\u003F2\u003F();
      num1 = 40;
    }
label_66:
    return;
label_55:
    throw new \u003F17\u003F();
label_65:
    throw new \u003F17\u003F();
  }

  public void \u0003\u2000\u2009\u2001\u0002(byte[] _param1)
  {
    if (_param1.Length >= 5)
    {
      int num1 = (int) _param1[0] % 9;
      int num2 = 0;
      int num3;
      int num4;
      int num5;
      uint num6;
      int num7;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num3 = (int) _param1[0] / 9;
            num2 = 1;
            continue;
          case 1:
            num4 = num3 % 5;
            num2 = 2;
            continue;
          case 2:
            num5 = num3 / 5;
            num2 = 3;
            continue;
          case 3:
            if (num5 <= 4)
            {
              num6 = 0U;
              num2 = 4;
              continue;
            }
            goto label_15;
          case 4:
            num7 = 0;
            num2 = 5;
            continue;
          case 5:
            if (num7 < 4)
            {
              num6 += (uint) _param1[1 + num7] << num7 * 8;
              num2 = 6;
              continue;
            }
            this.\u003F0\u003F(num6);
            num2 = 7;
            continue;
          case 6:
            ++num7;
            goto case 5;
          case 7:
            this.\u003F0\u003F(num4, num1);
            num2 = 8;
            continue;
          case 8:
            this.\u003F0\u003F(num5);
            num2 = 9;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return;
label_15:
      throw new \u003F18\u003F();
    }
    throw new \u003F18\u003F();
  }

  private sealed class \u003F0\u003F
  {
    private \u003F12\u003F \u003F0\u003F = new \u003F12\u003F();
    private \u003F12\u003F \u003F5\u003F = new \u003F12\u003F();
    private \u003F13\u003F[] \u003F0\u003F = new \u003F13\u003F[new IntPtr(16)];
    private \u003F13\u003F[] \u003F5\u003F = new \u003F13\u003F[new IntPtr(16)];
    private \u003F13\u003F \u003F0\u003F = new \u003F13\u003F(8);
    private uint \u003F0\u003F;

    public void \u003F0\u003F(uint _param1)
    {
      uint index = this.\u003F0\u003F;
      int num = 0;
      while (true)
      {
        switch (num)
        {
          case 0:
            if (index < _param1)
            {
              this.\u003F0\u003F[(IntPtr) index] = new \u003F13\u003F(3);
              num = 1;
              continue;
            }
            this.\u003F0\u003F = _param1;
            num = 3;
            continue;
          case 1:
            this.\u003F5\u003F[(IntPtr) index] = new \u003F13\u003F(3);
            num = 2;
            continue;
          case 2:
            ++index;
            goto case 0;
          default:
            goto label_7;
        }
      }
label_7:;
    }

    public void \u003F0\u003F()
    {
      this.\u003F0\u003F.\u003F0\u003F();
      int num = 0;
      uint index;
      while (true)
      {
        switch (num)
        {
          case 0:
            index = 0U;
            num = 1;
            continue;
          case 1:
            if (index < this.\u003F0\u003F)
            {
              this.\u003F0\u003F[(IntPtr) index].\u003F0\u003F();
              num = 2;
              continue;
            }
            this.\u003F5\u003F.\u003F0\u003F();
            num = 4;
            continue;
          case 2:
            this.\u003F5\u003F[(IntPtr) index].\u003F0\u003F();
            num = 3;
            continue;
          case 3:
            ++index;
            goto case 1;
          case 4:
            this.\u003F0\u003F.\u003F0\u003F();
            num = 5;
            continue;
          default:
            goto label_9;
        }
      }
label_9:;
    }

    public uint \u003F0\u003F(\u003F14\u003F _param1, uint _param2)
    {
      if (this.\u003F0\u003F.\u003F0\u003F(_param1) == 0U)
        return this.\u003F0\u003F[(IntPtr) _param2].\u003F0\u003F(_param1);
      uint num1 = 8;
      int num2 = 0;
      while (true)
      {
        switch (num2)
        {
          case 0:
            if (this.\u003F5\u003F.\u003F0\u003F(_param1) != 0U)
            {
              num1 += 8U;
              num2 = 2;
              continue;
            }
            num1 += this.\u003F5\u003F[(IntPtr) _param2].\u003F0\u003F(_param1);
            num2 = 1;
            continue;
          case 1:
            goto label_8;
          default:
            goto label_7;
        }
      }
label_7:
      num1 += this.\u003F0\u003F.\u003F0\u003F(_param1);
label_8:
      return num1;
    }
  }

  private sealed class \u003F5\u003F
  {
    private \u003F10\u003F.\u003F5\u003F.\u003F0\u003F[] \u003F0\u003F;
    private int \u003F0\u003F;
    private int \u003F5\u003F;
    private uint \u003F0\u003F;

    public void \u003F0\u003F(int _param1, int _param2)
    {
      if (this.\u003F0\u003F != null && this.\u003F0\u003F == _param2 && this.\u003F5\u003F == _param1)
        return;
      this.\u003F5\u003F = _param1;
      int num = 0;
      uint length;
      uint index;
      while (true)
      {
        switch (num)
        {
          case 0:
            this.\u003F0\u003F = (uint) ((1 << _param1) - 1);
            num = 1;
            continue;
          case 1:
            this.\u003F0\u003F = _param2;
            num = 2;
            continue;
          case 2:
            length = (uint) (1 << this.\u003F0\u003F + this.\u003F5\u003F);
            num = 3;
            continue;
          case 3:
            this.\u003F0\u003F = new \u003F10\u003F.\u003F5\u003F.\u003F0\u003F[(IntPtr) length];
            num = 4;
            continue;
          case 4:
            index = 0U;
            num = 5;
            continue;
          case 5:
            if (index < length)
            {
              this.\u003F0\u003F[(IntPtr) index].\u003F0\u003F();
              num = 6;
              continue;
            }
            goto label_11;
          default:
            ++index;
            goto case 5;
        }
      }
label_11:;
    }

    public void \u003F0\u003F()
    {
      uint num1 = (uint) (1 << this.\u003F0\u003F + this.\u003F5\u003F);
      int num2 = 0;
      uint index;
      while (true)
      {
        switch (num2)
        {
          case 0:
            index = 0U;
            num2 = 1;
            continue;
          case 1:
            if (index < num1)
            {
              this.\u003F0\u003F[(IntPtr) index].\u003F5\u003F();
              num2 = 2;
              continue;
            }
            goto label_6;
          default:
            ++index;
            goto case 1;
        }
      }
label_6:;
    }

    private uint \u003F0\u003F(uint _param1, byte _param2) => (uint) ((((int) _param1 & (int) this.\u003F0\u003F) << this.\u003F0\u003F) + ((int) _param2 >> 8 - this.\u003F0\u003F));

    public byte \u003F0\u003F(\u003F14\u003F _param1, uint _param2, byte _param3) => this.\u003F0\u003F[(IntPtr) this.\u003F0\u003F(_param2, _param3)].\u003F0\u003F(_param1);

    public byte \u003F0\u003F(\u003F14\u003F _param1, uint _param2, byte _param3, byte _param4) => this.\u003F0\u003F[(IntPtr) this.\u003F0\u003F(_param2, _param3)].\u003F0\u003F(_param1, _param4);

    private struct \u003F0\u003F
    {
      private \u003F12\u003F[] \u003F0\u003F;

      public void \u003F0\u003F() => this.\u003F0\u003F = new \u003F12\u003F[768];

      public void \u003F5\u003F()
      {
        for (int index = 0; index < 768; ++index)
          this.\u003F0\u003F[index].\u003F0\u003F();
      }

      public byte \u003F0\u003F(\u003F14\u003F _param1)
      {
        uint index = 1;
        do
        {
          index = index << 1 | this.\u003F0\u003F[(IntPtr) index].\u003F0\u003F(_param1);
        }
        while (index < 256U);
        return (byte) index;
      }

      public byte \u003F0\u003F(\u003F14\u003F _param1, byte _param2)
      {
        uint index = 1;
        do
        {
          uint num1 = (uint) ((int) _param2 >> 7 & 1);
          int num2 = 0;
          uint num3;
          while (true)
          {
            switch (num2)
            {
              case 0:
                _param2 <<= 1;
                num2 = 1;
                continue;
              case 1:
                num3 = this.\u003F0\u003F[(IntPtr) ((uint) (1 + (int) num1 << 8) + index)].\u003F0\u003F(_param1);
                num2 = 2;
                continue;
              case 2:
                index = index << 1 | num3;
                num2 = 3;
                continue;
              default:
                goto label_6;
            }
          }
label_6:
          if ((int) num1 != (int) num3)
          {
            while (index < 256U)
              index = index << 1 | this.\u003F0\u003F[(IntPtr) index].\u003F0\u003F(_param1);
            break;
          }
        }
        while (index < 256U);
        return (byte) index;
      }
    }
  }
}
