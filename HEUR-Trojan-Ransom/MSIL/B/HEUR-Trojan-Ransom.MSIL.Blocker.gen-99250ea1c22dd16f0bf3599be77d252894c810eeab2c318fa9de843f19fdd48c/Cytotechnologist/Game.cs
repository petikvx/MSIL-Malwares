// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: IClientChannelSinkSta, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: C2D4B9C8-45F5-4E7C-86BD-063D9CE5A365
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-99250ea1c22dd16f0bf3599be77d252894c810eeab2c318fa9de843f19fdd48c.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u202A⁬⁬‮‍‏⁯⁭⁮‫‬‬⁮⁬⁬‫‬⁭⁪‍⁫‫‏⁮‬‌⁪⁫⁬⁯‎‏​‫‍‬‬⁬‪‍‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
        if (!this._finished)
          goto label_4;
label_1:
        int num1 = 776483878;
label_2:
        int index;
        PlayerState[] playerStates;
        bool finished;
        PlayerState playerState;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1831392558)) % 13U)
          {
            case 1:
              ++index;
              num1 = 53209992;
              continue;
            case 2:
              goto label_4;
            case 3:
              finished = false;
              num1 = (int) num2 * 1141894061 ^ 1281251129;
              continue;
            case 4:
              index = 0;
              num1 = (int) num2 * -674092624 ^ 1756669435;
              continue;
            case 5:
              finished = true;
              num1 = (int) num2 * -1671785533 ^ 1641215411;
              continue;
            case 6:
              int num3 = flag ? -1326951115 : (num3 = -2078696969);
              num1 = num3 ^ (int) num2 * 1333478194;
              continue;
            case 7:
              goto label_1;
            case 8:
              num1 = (int) num2 * 395998802 ^ 965620562;
              continue;
            case 9:
              finished = true;
              num1 = (int) num2 * -1222252987 ^ 738005260;
              continue;
            case 10:
              playerState = playerStates[index];
              num1 = 1851939346;
              continue;
            case 11:
              int num4;
              num1 = num4 = index >= playerStates.Length ? 869208755 : (num4 = 278979412);
              continue;
            case 12:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * 121564996 ^ -827303293;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return finished;
label_4:
        playerStates = this._playerStates;
        num1 = 986994619;
        goto label_2;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = 1940675270;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 122518594)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * 1398109194 ^ 504716395;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = -1142969417;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1296735779)) % 7U)
        {
          case 0:
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * -287337717 ^ 1929938294;
            continue;
          case 1:
            num1 = (int) num2 * 237791814 ^ -2066239669;
            continue;
          case 2:
            this.Winners.Clear();
            num1 = (int) num2 * 1385213764 ^ -1693123023;
            continue;
          case 3:
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -335744560 ^ -257545532;
            continue;
          case 4:
            this.Losers.Clear();
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -1652204333 ^ 287701869;
            continue;
          case 5:
            goto label_3;
          case 6:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 169260166;
      bool flag1;
      bool flag2;
      PlayerState playerState;
      bool morePlanningSprint;
      int planningCardsCount;
      int num2;
      int index;
      bool flag3;
      Player player;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1450828966)) % 27U)
        {
          case 0:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * 2048920973 ^ -1172529760;
            continue;
          case 1:
            flag3 = index < this.Players.Length;
            num1 = 1117352144;
            continue;
          case 2:
            int num4 = morePlanningSprint ? -526345493 : (num4 = -1098758624);
            num1 = num4 ^ (int) num3 * -899558914;
            continue;
          case 3:
            int num5 = flag3 ? -1333719193 : (num5 = -1671543569);
            num1 = num5 ^ (int) num3 * -285648399;
            continue;
          case 4:
            num1 = (int) num3 * -211538933 ^ -2127129440;
            continue;
          case 5:
            ++index;
            num1 = (int) num3 * -802184546 ^ -1334385932;
            continue;
          case 6:
            num1 = 3450736;
            continue;
          case 7:
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * -426817491 ^ -1749470863;
            continue;
          case 8:
            playerState.Sprint = -1;
            num1 = (int) num3 * -780055865 ^ -1735697121;
            continue;
          case 9:
            goto label_1;
          case 10:
            flag1 = num2 > 0;
            num1 = 1111201450;
            continue;
          case 11:
            num1 = (int) num3 * 1999067849 ^ -1403882015;
            continue;
          case 12:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 1838064543;
            continue;
          case 13:
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -483981329 ^ 1578852049;
            continue;
          case 14:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -1050665815 ^ 1748266927;
            continue;
          case 15:
            index = 0;
            num1 = (int) num3 * -1287287297 ^ 717322022;
            continue;
          case 16:
            num2 = 0;
            num1 = 1323035291;
            continue;
          case 17:
            playerState.Sprint = 0;
            num1 = (int) num3 * 994021388 ^ -721759263;
            continue;
          case 18:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -2037352848 ^ -2066921387;
            continue;
          case 19:
            num1 = (int) num3 * -1195432986 ^ 1762540442;
            continue;
          case 20:
            playerState.Sprint = 1;
            num1 = (int) num3 * -688480229 ^ 611812717;
            continue;
          case 21:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1457573903 ^ -514066626;
            continue;
          case 22:
            int num6 = flag2 ? 1887443314 : (num6 = 716454410);
            num1 = num6 ^ (int) num3 * -303767886;
            continue;
          case 23:
            int num7 = !flag1 ? -948759464 : (num7 = -169647171);
            num1 = num7 ^ (int) num3 * -710798420;
            continue;
          case 24:
            num1 = 834462992;
            continue;
          case 25:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = 2079773668;
            continue;
          case 26:
            goto label_3;
          default:
            goto label_29;
        }
      }
label_3:
      return;
label_29:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = 930170667;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1253606747)) % 15U)
        {
          case 0:
            goto label_3;
          case 1:
            int num3 = !flag2 ? -667589948 : (num3 = -1956908603);
            num1 = num3 ^ (int) num2 * 573818490;
            continue;
          case 2:
            flag1 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * -1839871844 ^ -592340170;
            continue;
          case 3:
            int num4 = flag1 ? -1213629094 : (num4 = -1374273648);
            num1 = num4 ^ (int) num2 * 1505865303;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.Print((object) Game.\u202A⁯​‏‏⁭⁪‏‎⁪‭⁪​‍⁮‏‭⁪‍⁫‎⁬⁪‮‎​‭‪‎⁪‏⁬‮‫‬‏⁯⁬‮‭‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 875937649;
            continue;
          case 6:
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * 1462009738 ^ 983285561;
            continue;
          case 7:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * -972247032 ^ 1937528517;
            continue;
          case 8:
            num1 = (int) num2 * -1551688975 ^ 468752575;
            continue;
          case 9:
            this.PlayerTurn(this._currentPlayer);
            num1 = 288407747;
            continue;
          case 10:
            num1 = (int) num2 * -1478703051 ^ -95511242;
            continue;
          case 11:
            this.Print((object) Game.\u206E⁪⁪‪‌‏‮⁮‪‭‌‏‌‍‍​⁯‎‎‎⁯⁯⁪⁯‎‌⁬​‏‬‫‪‭‏‬‌‌⁪⁬‭‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1773018758 ^ 493819734;
            continue;
          case 12:
            this._currentPlayer = 0;
            num1 = (int) num2 * 1800690117 ^ 1561680814;
            continue;
          case 13:
            num1 = (int) num2 * 855323289 ^ 1631292596;
            continue;
          case 14:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1398461887 ^ -1962001682;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = 921226751;
      while (true)
      {
        uint num2;
        int num3;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        PlayerState playerState1;
        int num4;
        bool flag5;
        bool flag6;
        int index;
        PlayerState playerState2;
        Card card;
        int num5;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        bool flag14;
        bool flag15;
        int num6;
        switch ((num2 = (uint) (num1 ^ 1449039911)) % 89U)
        {
          case 0:
            num1 = (int) num2 * 163869399 ^ -1097124633;
            continue;
          case 1:
            num1 = 825649404;
            continue;
          case 2:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 900625251 ^ 229189177;
            continue;
          case 3:
            flag15 = flag2;
            num1 = 344482443;
            continue;
          case 4:
            int num7 = flag6 ? -895351935 : (num7 = -1713350836);
            num1 = num7 ^ (int) num2 * 431854209;
            continue;
          case 5:
            int num8 = !flag5 ? 1336040630 : (num8 = 50046039);
            num1 = num8 ^ (int) num2 * 544436694;
            continue;
          case 6:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206E⁪⁪‪‌‏‮⁮‪‭‌‏‌‍‍​⁯‎‎‎⁯⁯⁪⁯‎‌⁬​‏‬‫‪‭‏‬‌‌⁪⁬‭‮("\t", playerState3 != null ? Game.\u206A‫⁯​⁬‫‫‍‬​⁬⁬‫‮‫‪⁮​‍​⁭‫⁪‪⁭‪​‪⁯⁯⁭‏‬‏⁯‍‌​‎‍‮((object) playerState3) : (string) null));
            num1 = 1128022349;
            continue;
          case 7:
            this._finished = true;
            num1 = (int) num2 * 781981608 ^ 809713449;
            continue;
          case 8:
            num1 = (int) num2 * 1324319257 ^ 1644348228;
            continue;
          case 9:
            num1 = (int) num2 * -67562240 ^ 1286431821;
            continue;
          case 10:
            num1 = (int) num2 * 2075100009 ^ -755369526;
            continue;
          case 11:
            num1 = (int) num2 * 1432931366 ^ 1631116165;
            continue;
          case 12:
            int num9;
            num1 = num9 = index < this._playerStates.Length ? 218022114 : (num9 = 1165643610);
            continue;
          case 13:
            ++index;
            num1 = 664516924;
            continue;
          case 14:
            flag2 = false;
            num1 = 604691304;
            continue;
          case 15:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag12 ? (object) "ALL " : (object) "", flag13 ? (object) "receives" : (object) "pays", (object) Game.\u206B⁬‭⁪‎⁬‮⁮⁭‌⁪‭‫​⁭‫‭⁭‍⁬⁬⁮‏⁮‫‫‭‫‬‬‌⁮⁯​⁬⁪‫⁮‍⁯‮(num4), flag2 ? (object) "advance" : (object) "stay");
            num1 = 1129211211;
            continue;
          case 16:
            flag3 = playerState2.Resources >= 0;
            num1 = (int) num2 * -343548583 ^ 1562564333;
            continue;
          case 17:
            num1 = (int) num2 * -1757311158 ^ 1822932300;
            continue;
          case 18:
            num1 = 1472669771;
            continue;
          case 19:
            playerState1.State = State.Won;
            num1 = (int) num2 * 1748688914 ^ -1893240767;
            continue;
          case 20:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 21:
            num1 = (int) num2 * 1680150797 ^ 1973357183;
            continue;
          case 22:
            flag11 = playerState1.Sprint < 0;
            num1 = 976776266;
            continue;
          case 23:
            num4 = Game.\u206C⁮‍⁯‫⁪​⁭⁬⁮‪‬‎‭⁬⁪‮⁯‮⁪‬⁭‎‍‎⁮‭⁬‮⁭⁮‌‫‫​⁯‫‭​⁫‮(0, num5);
            num1 = (int) num2 * -1456228804 ^ 1485875161;
            continue;
          case 24:
            num4 = card.Impact;
            num1 = (int) num2 * -690273620 ^ -2094876679;
            continue;
          case 25:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 303576239 ^ -1343873363;
            continue;
          case 26:
            flag2 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -590931010 ^ 372157001;
            continue;
          case 27:
            num1 = (int) num2 * -144520294 ^ 1947325120;
            continue;
          case 28:
            int num10 = !flag1 ? 1816967230 : (num10 = 236058362);
            num1 = num10 ^ (int) num2 * -1177290951;
            continue;
          case 29:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1582384634 ^ 595704340;
            continue;
          case 30:
            flag13 = card.Impact < 0;
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * 740327635 ^ 538894660;
            continue;
          case 31:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -1221560161 ^ -1407145335;
            continue;
          case 32:
            flag1 = num3 == playerIndex;
            num1 = (int) num2 * 302840672 ^ -1240937483;
            continue;
          case 33:
            flag2 = true;
            num1 = 268335817;
            continue;
          case 34:
            int num11 = !flag10 ? -491381006 : (num11 = -1761548005);
            num1 = num11 ^ (int) num2 * -1462399342;
            continue;
          case 35:
            flag7 = !this.Losers.Contains(index);
            num1 = (int) num2 * -780052650 ^ -55671744;
            continue;
          case 36:
            num1 = (int) num2 * -726592728 ^ 2140319494;
            continue;
          case 37:
            num1 = (int) num2 * -785334308 ^ 1964116591;
            continue;
          case 38:
            int num12 = !flag9 ? -847579535 : (num12 = -1396732611);
            num1 = num12 ^ (int) num2 * -1608874069;
            continue;
          case 39:
            num1 = (int) num2 * 302276396 ^ -2041135763;
            continue;
          case 40:
            this.Losers.Add(index);
            num1 = (int) num2 * 1583341923 ^ 568284089;
            continue;
          case 41:
            int num13 = playerState1.Resources >= 0 ? -1165071276 : (num13 = -838640419);
            num1 = num13 ^ (int) num2 * 755226945;
            continue;
          case 42:
            flag6 = num3 < this._playerStates.Length;
            num1 = 488362905;
            continue;
          case 43:
            num1 = (int) num2 * 110833699 ^ 1720750799;
            continue;
          case 44:
            playerState2.State = State.Lose;
            num1 = 931695637;
            continue;
          case 45:
            playerState1.State = State.Lose;
            flag8 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * 1698534237 ^ 1572355169;
            continue;
          case 46:
            ++num3;
            num1 = 975036945;
            continue;
          case 47:
            num1 = (int) num2 * -694571554 ^ 640145507;
            continue;
          case 48:
            num1 = (int) num2 * 1721229862 ^ -128322267;
            continue;
          case 49:
            goto label_3;
          case 50:
            num1 = (int) num2 * 426629776 ^ -2082580499;
            continue;
          case 51:
            num1 = (int) num2 * -838738881 ^ -1664357663;
            continue;
          case 52:
            num1 = 1025078204;
            continue;
          case 53:
            int num14 = flag11 ? -632516951 : (num14 = -1416705156);
            num1 = num14 ^ (int) num2 * 1151270664;
            continue;
          case 54:
            int num15 = !flag8 ? 1915355535 : (num15 = 1005527546);
            num1 = num15 ^ (int) num2 * -310743423;
            continue;
          case 55:
            num1 = 1491664410;
            continue;
          case 56:
            num1 = (int) num2 * 1428865703 ^ 1169158903;
            continue;
          case 57:
            int num16 = !flag12 ? -1067216287 : (num16 = -927406245);
            num1 = num16 ^ (int) num2 * -598355544;
            continue;
          case 58:
            flag5 = playerState1.State != 0;
            num1 = (int) num2 * -765270180 ^ 1804575357;
            continue;
          case 59:
            num1 = 208829339;
            continue;
          case 60:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 1675866966 ^ -1357340269;
            continue;
          case 61:
            int num17 = flag7 ? -1012802282 : (num17 = -1789876730);
            num1 = num17 ^ (int) num2 * -1342182378;
            continue;
          case 62:
            num1 = 1366092129;
            continue;
          case 63:
            this.Print((object) Game.\u206E⁪⁪‪‌‏‮⁮‪‭‌‏‌‍‍​⁯‎‎‎⁯⁯⁪⁯‎‌⁬​‏‬‫‪‭‏‬‌‌⁪⁬‭‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 1130541217 ^ -262561739;
            continue;
          case 64:
            flag9 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 30953357;
            continue;
          case 65:
            flag10 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 1689804429;
            continue;
          case 66:
            num1 = (int) num2 * 1754498845 ^ 2008238209;
            continue;
          case 67:
            playerState2.Resources -= Game.\u206C⁮‍⁯‫⁪​⁭⁬⁮‪‬‎‭⁬⁪‮⁯‮⁪‬⁭‎‍‎⁮‭⁬‮⁭⁮‌‫‫​⁯‫‭​⁫‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 422450669 ^ 2038425943;
            continue;
          case 68:
            num1 = (int) num2 * 1965503808 ^ -1946402432;
            continue;
          case 69:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            flag2 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -871506006 ^ -1033261393;
            continue;
          case 70:
            num3 = 0;
            num1 = (int) num2 * 1549714016 ^ 498399962;
            continue;
          case 71:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1791775089 ^ 879864535;
            continue;
          case 72:
            int num18 = flag3 ? -1850282397 : (num18 = -24485744);
            num1 = num18 ^ (int) num2 * 1320314495;
            continue;
          case 73:
            index = 0;
            num1 = (int) num2 * 611454864 ^ 924249039;
            continue;
          case 74:
            int num19 = flag4 ? -1576861245 : (num19 = -1133211897);
            num1 = num19 ^ (int) num2 * 948456832;
            continue;
          case 75:
            this.Winners.Add(playerIndex);
            int num20 = !this.Rules.OnlyOneWinner ? 1922048068 : (num20 = 829943089);
            num1 = num20 ^ (int) num2 * 1376447295;
            continue;
          case 76:
            num1 = 133662214;
            continue;
          case 77:
            goto label_1;
          case 78:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 161368262 ^ -2079041842;
            continue;
          case 79:
            num1 = 1676364134;
            continue;
          case 80:
            num1 = (int) num2 * -1835354044 ^ -95019588;
            continue;
          case 81:
            playerState2 = this._playerStates[index];
            num1 = 1877131515;
            continue;
          case 82:
            card = this.DrawCard();
            num1 = (int) num2 * 1182300737 ^ 583787916;
            continue;
          case 83:
            num1 = (int) num2 * 1030121453 ^ 1347518114;
            continue;
          case 84:
            int num21 = flag15 ? 1675574904 : (num21 = 977624582);
            num1 = num21 ^ (int) num2 * -1455911005;
            continue;
          case 85:
            this.Losers.Add(num3);
            num1 = (int) num2 * 143900013 ^ 1145713067;
            continue;
          case 86:
            int num22 = flag14 ? -164404564 : (num22 = -1467353167);
            num1 = num22 ^ (int) num2 * 129726834;
            continue;
          case 87:
            flag4 = !this.Losers.Contains(num3);
            num1 = 775946517;
            continue;
          case 88:
            num1 = (int) num2 * 1062326522 ^ -301972475;
            continue;
          default:
            goto label_94;
        }
        flag12 = num6 != 0;
        flag14 = !flag13;
        num1 = 1144677796;
      }
label_3:
      return;
label_94:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 2071982954;
      Card card1;
      Card card2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 24291183)) % 8U)
        {
          case 0:
            this.ShuffleCards();
            num1 = (int) num2 * 946285414 ^ 1361104878;
            continue;
          case 1:
            card1 = this._deck[0];
            this._deck.RemoveAt(0);
            num1 = 16908883;
            continue;
          case 2:
            int num3 = flag ? -2069077805 : (num3 = -2144546550);
            num1 = num3 ^ (int) num2 * -129335126;
            continue;
          case 3:
            goto label_1;
          case 4:
            card2 = card1;
            num1 = (int) num2 * 1887139044 ^ 332846032;
            continue;
          case 5:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 1070711152 ^ 116567229;
            continue;
          case 7:
            num1 = (int) num2 * -1798582351 ^ 701021286;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = -618592711;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1183637945)) % 9U)
        {
          case 0:
            str2 = str1;
            num1 = (int) num2 * -483311855 ^ 313171887;
            continue;
          case 1:
            num1 = (int) num2 * -433511268 ^ 23025534;
            continue;
          case 3:
            index = 0;
            num1 = (int) num2 * -394802027 ^ -544242039;
            continue;
          case 4:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206A‫⁯​⁬‫‫‍‬​⁬⁬‫‮‫‪⁮​‍​⁭‫⁪‪⁭‪​‪⁯⁯⁭‏‬‏⁯‍‌​‎‍‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200E⁭⁪⁮‎‮‪‫​‍⁯‮⁮⁭‏⁬‏‍‬‍⁭⁬⁭⁫‎‭‎‌‪‮⁬‪⁭‬‬‍‎​⁪⁯‮(strArray);
            ++index;
            num1 = -1065824290;
            continue;
          case 5:
            int num3 = !flag ? -1823300331 : (num3 = -1440739194);
            num1 = num3 ^ (int) num2 * -127879192;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * 1239398022 ^ 989373257;
            continue;
          case 8:
            flag = index < this._playerStates.Length;
            num1 = -1278072988;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1958073695;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1669538799)) % 3U)
        {
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 189656990 ^ -1034774604;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u202C⁬⁫‎​‫⁭⁯‎‏​⁫‎‍‪‍⁫‍⁯‬⁫‫⁪⁯⁮⁫⁮‭‮⁬‮‮⁮‏⁭⁮‪⁬‪⁯‮(this._buffer, Game.\u206D‪‫‬‎⁪⁬‏⁪⁫‎⁫⁫‭‎⁭‬‬‌‌⁯‫‫​​⁬⁪‭​‍⁮‍⁭⁯‮​‬‍‫‬‮(Game.\u206A‫⁯​⁬‫‫‍‬​⁬⁬‫‮‫‪⁮​‍​⁭‫⁪‪⁭‪​‪⁯⁯⁭‏‬‏⁯‍‌​‎‍‮(text), more));

    static Random \u202A⁬⁬‮‍‏⁯⁭⁮‫‬‬⁮⁬⁬‫‬⁭⁪‍⁫‫‏⁮‬‌⁪⁫⁬⁯‎‏​‫‍‬‬⁬‪‍‮([In] int obj0) => new Random(obj0);

    static string \u202A⁯​‏‏⁭⁪‏‎⁪‭⁪​‍⁮‏‭⁪‍⁫‎⁬⁪‮‎​‭‪‎⁪‏⁬‮‫‬‏⁯⁬‮‭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206E⁪⁪‪‌‏‮⁮‪‭‌‏‌‍‍​⁯‎‎‎⁯⁯⁪⁯‎‌⁬​‏‬‫‪‭‏‬‌‌⁪⁬‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206C⁮‍⁯‫⁪​⁭⁬⁮‪‬‎‭⁬⁪‮⁯‮⁪‬⁭‎‍‎⁮‭⁬‮⁭⁮‌‫‫​⁯‫‭​⁫‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206B⁬‭⁪‎⁬‮⁮⁭‌⁪‭‫​⁭‫‭⁭‍⁬⁬⁮‏⁮‫‫‭‫‬‬‌⁮⁯​⁬⁪‫⁮‍⁯‮([In] int obj0) => Math.Abs(obj0);

    static string \u206A‫⁯​⁬‫‫‍‬​⁬⁬‫‮‫‪⁮​‍​⁭‫⁪‪⁭‪​‪⁯⁯⁭‏‬‏⁯‍‌​‎‍‮([In] object obj0) => obj0.ToString();

    static string \u200E⁭⁪⁮‎‮‪‫​‍⁯‮⁮⁭‏⁬‏‍‬‍⁭⁬⁭⁫‎‭‎‌‪‮⁬‪⁭‬‬‍‎​⁪⁯‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206D‪‫‬‎⁪⁬‏⁪⁫‎⁫⁫‭‎⁭‬‬‌‌⁯‫‫​​⁬⁪‭​‍⁮‍⁭⁯‮​‬‍‫‬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202C⁬⁫‎​‫⁭⁯‎‏​⁫‎‍‪‍⁫‍⁯‬⁫‫⁪⁯⁮⁫⁮‭‮⁬‮‮⁮‏⁭⁮‪⁬‪⁯‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
