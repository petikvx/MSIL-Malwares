// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.UI.WaitSendingReportControl
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.Attributes;
using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Ⴈ;

namespace SmartAssembly.SmartExceptionsCore.UI
{
  [DesignerCategory("Code")]
  public class WaitSendingReportControl : Control
  {
    private Ⴈ.Ⴀ.Ⴓ Ⴗ;

    protected override void OnVisibleChanged(EventArgs e)
    {
      int num;
      try
      {
        num = 5;
        while (true)
        {
          switch (num)
          {
            case 0:
              goto label_5;
            case 1:
              goto label_4;
            case 3:
              num = this.DesignMode ? 0 : 1;
              continue;
            case 4:
              goto label_7;
            default:
              base.OnVisibleChanged(e);
              goto case 3;
          }
        }
label_5:
        return;
label_7:
        return;
label_4:
        this.Ⴅ(PoweredByAttribute1.Ⴈ((Control) this, 114, 123));
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        EventArgs o3 = e;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
        throw;
      }
    }

    private void Ⴅ(bool Ⴍ)
    {
      int num1;
      int num2;
      try
      {
        num1 = 4;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_5;
            case 1:
              num1 = 0;
              continue;
            case 2:
            case 3:
              num2 = 0;
              this.Ⴗ.Ⴗ = num2;
              goto case 1;
            default:
              ႷႼ.Ⴈ(this.Ⴗ.Ⴅ, Ⴍ, 78, 22);
              goto case 2;
          }
        }
label_5:
        this.Refresh();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o4 = (ValueType) Ⴍ;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) this, (object) o4);
        throw;
      }
    }

    protected override void OnResize(EventArgs e)
    {
      int num;
      try
      {
        num = 3;
        while (true)
        {
          switch (num)
          {
            case 0:
              goto label_4;
            case 2:
              goto label_6;
            case 4:
              goto label_3;
            default:
              this.Size = new Size(SmartAssembly.License.License.Ⴈ(250f * this.Ⴗ.Ⴓ, 141, 153), SmartAssembly.License.License.Ⴈ(42f * this.Ⴗ.Ⴈ, 618, 638));
              num = 4;
              continue;
          }
        }
label_4:
        return;
label_6:
        return;
label_3:
        base.OnResize(e);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        EventArgs o3 = e;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
        throw;
      }
    }

    protected override void ScaleCore(float dx, float dy)
    {
      int num1;
      float num2;
      float num3;
      try
      {
        num1 = 4;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 2:
              goto label_3;
            case 3:
              goto label_4;
            default:
              num2 = dx;
              this.Ⴗ.Ⴓ = num2;
              num3 = dy;
              this.Ⴗ.Ⴈ = num3;
              num1 = 1;
              continue;
          }
        }
label_4:
        return;
label_3:
        base.ScaleCore(dx, dy);
        this.OnResize(EventArgs.Empty);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<float> o1 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<float> o2 = (ValueType) num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<float> o5 = (ValueType) dx;
        // ISSUE: variable of a boxed type
        __Boxed<float> o6 = (ValueType) dy;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6);
        throw;
      }
    }

    protected override void Dispose(bool disposing)
    {
      int num;
      try
      {
        num = 3;
        while (true)
        {
          switch (num)
          {
            case 0:
              goto label_5;
            case 1:
            case 2:
            case 7:
              num = this.Ⴗ.Ⴃ == null ? 0 : 6;
              continue;
            case 4:
              goto label_6;
            case 5:
            case 6:
              goto label_4;
            default:
              num = !disposing ? 4 : 2;
              continue;
          }
        }
label_4:
        FatalExceptionEventArgs.Ⴈ((Image) this.Ⴗ.Ⴃ, 403, 464);
label_5:
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.Ⴍ((Component) this.Ⴗ.Ⴅ, 87, 89);
label_6:
        base.Dispose(disposing);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o3 = (ValueType) disposing;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
        throw;
      }
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      int num;
      try
      {
        num = 9;
        while (true)
        {
          switch (num)
          {
            case 0:
              goto label_7;
            case 1:
            case 2:
            case 3:
              HeaderControl.Ⴅ(FeedbackControl.Ⴜ(e, 441, 480), new Rectangle(SmartAssembly.License.License.Ⴈ(46f * this.Ⴗ.Ⴓ, 540, 520), 0, SmartAssembly.License.License.Ⴈ(165f * this.Ⴗ.Ⴓ, 202, 222), SmartAssembly.License.License.Ⴈ(34f * this.Ⴗ.Ⴈ, 649, 669)), 273, 382);
              num = 0;
              continue;
            case 4:
              num = this.Ⴗ.Ⴗ <= 0 ? 7 : 3;
              continue;
            case 5:
              StackFrameHelper.Ⴀ(FeedbackControl.Ⴜ(e, 176, 233), (Image) this.Ⴗ.Ⴀ, new Rectangle(0, 0, SmartAssembly.License.License.Ⴈ(250f * this.Ⴗ.Ⴓ, 413, 393), SmartAssembly.License.License.Ⴈ(42f * this.Ⴗ.Ⴈ, 986, 974)), new Rectangle(0, 0, 250, 42), GraphicsUnit.Pixel, 816, 882);
              goto case 6;
            case 6:
            case 8:
              num = this.Ⴗ.Ⴃ == null ? 7 : 4;
              continue;
            case 7:
              goto label_8;
            default:
              base.OnPaint(e);
              num = this.Ⴗ.Ⴀ == null ? 8 : 5;
              continue;
          }
        }
label_8:
        return;
label_7:
        FeedbackControl.Ⴜ(e, 603, 514).DrawImage((Image) this.Ⴗ.Ⴃ, new Rectangle(Convert.ToInt32((float) (this.Ⴗ.Ⴗ - 6) * this.Ⴗ.Ⴓ), Convert.ToInt32(16f * this.Ⴗ.Ⴈ), Convert.ToInt32(40f * this.Ⴗ.Ⴓ), Convert.ToInt32(12f * this.Ⴗ.Ⴈ)), 0, 0, 40, 12, GraphicsUnit.Pixel);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        PaintEventArgs o3 = e;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
        throw;
      }
    }

    private void Ⴗ(object Ⴅ, EventArgs Ⴃ)
    {
      int num1;
      int num2;
      int num3;
      try
      {
        num1 = 3;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 4:
              num1 = this.Ⴗ.Ⴗ <= 198 ? 6 : 5;
              continue;
            case 5:
              num3 = 0;
              this.Ⴗ.Ⴗ = num3;
              num1 = 6;
              continue;
            case 6:
              goto label_5;
            default:
              WaitSendingReportControl sendingReportControl = this;
              num2 = sendingReportControl.Ⴗ.Ⴗ + 11;
              sendingReportControl.Ⴗ.Ⴗ = num2;
              num1 = 0;
              continue;
          }
        }
label_5:
        FatalExceptionEventArgs.Ⴅ((Control) this, 346, 309);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) num1;
        object o5 = Ⴅ;
        EventArgs o6 = Ⴃ;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) this, o5, (object) o6);
        throw;
      }
    }

    public WaitSendingReportControl()
    {
      int num1 = 99;
      this.Ⴗ.Ⴗ = num1;
      Bitmap bitmap1 = Ⴈ.Ⴐ.Ⴄ(ႷႭ.ႥႭ(490613002, 6));
      this.Ⴗ.Ⴃ = bitmap1;
      Bitmap bitmap2 = Ⴈ.Ⴐ.Ⴄ(Ⴈ.ႳႷ.Ⴗ(2059790754, 4));
      this.Ⴗ.Ⴀ = bitmap2;
      Timer timer = new Timer();
      this.Ⴗ.Ⴅ = timer;
      float num2 = 1f;
      this.Ⴗ.Ⴓ = num2;
      float num3 = 1f;
      this.Ⴗ.Ⴈ = num3;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      try
      {
        Ⴈ.Ⴜ.Ⴀ(this.Ⴗ.Ⴅ, 85, 66, 32);
        DoNotObfuscateTypeAttribute.Ⴓ(this.Ⴗ.Ⴅ, new EventHandler(this.Ⴗ), 132, 196);
        ႷႠ.Ⴓ((Control) this, new Size(250, 42), 3, 52);
        this.TabStop = false;
        this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.DoubleBuffer, true);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Bitmap o2 = bitmap1;
        Bitmap o3 = bitmap2;
        Timer o4 = timer;
        // ISSUE: variable of a boxed type
        __Boxed<float> o5 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<float> o6 = (ValueType) num3;
        StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this);
        throw;
      }
    }

    static WaitSendingReportControl()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static void Ⴈ([In] Control obj0, [In] int obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
        num1 = 2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 3:
              num1 = 2;
              continue;
            case 5:
              goto label_7;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 123:
                  num2 = 5;
                  break;
                default:
                  num2 = 3;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.TabIndex = obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Control o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    internal static void Ⴄ([In] Control obj0, [In] AnchorStyles obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
        num1 = 0;
        while (true)
        {
          switch (num1)
          {
            case 1:
              num1 = 0;
              continue;
            case 4:
            case 5:
              goto label_7;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 27:
                  num2 = 4;
                  break;
                default:
                  num2 = 1;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.Anchor = obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Control o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<AnchorStyles> o4 = (Enum) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    internal static AssemblyName Ⴍ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 37:
            num2 = 0;
            break;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 6:
              goto label_8;
            case 1:
              num1 = 7;
              continue;
            case 3:
            case 7:
              goto label_3;
            case 5:
              num1 = 7;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (WaitSendingReportControl.Ⴍ);
              num1 = 7;
              continue;
          }
        }
label_8:
        return obj0.GetName();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Assembly o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static Delegate Ⴐ([In] Delegate obj0, [In] Delegate obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch ((obj3 ^ obj2) - 0)
        {
          case 0:
            num2 = 7;
            break;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 7:
              goto label_8;
            case 2:
              goto label_3;
            case 3:
            case 5:
              num1 = 2;
              continue;
            case 4:
            case 6:
              num1 = 2;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (WaitSendingReportControl.Ⴐ);
              num1 = 2;
              continue;
          }
        }
label_8:
        return Delegate.Combine(obj0, obj1);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Delegate o2 = obj0;
        Delegate o3 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static System.Type Ⴜ([In] Exception obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 106:
            num2 = 4;
            break;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 5:
              num1 = 2;
              continue;
            case 2:
              goto label_3;
            case 3:
            case 7:
              num1 = 2;
              continue;
            case 4:
            case 6:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (WaitSendingReportControl.Ⴜ);
              num1 = 2;
              continue;
          }
        }
label_8:
        return obj0.GetType();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Exception o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static void ႥႷ([In] Form obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
        num1 = 3;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_8;
            case 1:
            case 5:
              goto label_7;
            case 2:
              num1 = 3;
              continue;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 53:
                  num2 = 5;
                  break;
                default:
                  num2 = 2;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.Close();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Form o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static Version ႥႥ([In] OperatingSystem obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 6:
            num2 = 0;
            break;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 5:
              goto label_8;
            case 1:
            case 7:
              num1 = 2;
              continue;
            case 2:
            case 6:
              goto label_3;
            case 3:
              num1 = 2;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (WaitSendingReportControl.ႥႥ);
              num1 = 2;
              continue;
          }
        }
label_8:
        return obj0.Version;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        OperatingSystem o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static void ႥႤ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_0:
      try
      {
        switch ((obj5 ^ obj4) - 80)
        {
          case 0:
            obj0.Write(obj1, obj2, obj3);
            break;
          default:
            goto label_0;
        }
      }
      catch (Exception ex)
      {
        Stream o1 = obj0;
        byte[] o2 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj4;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj5;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct ႥႨ
    {
      internal SendingReportFeedbackEventHandler1 Ⴗ;
    }
  }
}
