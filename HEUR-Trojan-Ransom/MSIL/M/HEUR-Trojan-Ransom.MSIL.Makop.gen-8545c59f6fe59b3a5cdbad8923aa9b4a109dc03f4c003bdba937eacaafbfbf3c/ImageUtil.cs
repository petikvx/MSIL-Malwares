// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: NU, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5FD10F56-6E8A-4A54-94FE-02843CD215B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-8545c59f6fe59b3a5cdbad8923aa9b4a109dc03f4c003bdba937eacaafbfbf3c.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
    if ((ImageUtil.\u200C‍‮⁯‪⁭⁬‭‪⁫‮‭‪‪‫⁬⁪‫‭‍‫⁫‪⁮‮⁫‍‎‪⁪⁯‮‎⁪⁮⁮⁭‌⁬⁪‮(originalImage) & PixelFormat.Indexed) != PixelFormat.Indexed)
      goto label_8;
label_1:
    int num1 = -265580445;
label_2:
    int num2;
    byte[] numArray;
    IntPtr num3;
    int length;
    int num4;
    Bitmap bitmap;
    Image image;
    PixelFormat pixelFormat;
    BitmapData bitmapData;
    bool flag;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ -280140667)) % 29U)
      {
        case 0:
          num1 = (int) num5 * -1670593592 ^ 1674179676;
          continue;
        case 1:
          ImageUtil.\u202C⁫‭‎‌‮‪‌‏⁬⁭‍‏⁭‬⁪‎‫⁯‏⁫‌⁬⁫‮⁪‍‪‍‭​​‪‌‭‭⁯‬‮‮‮(num3, numArray, 0, length);
          num1 = (int) num5 * 2085111922 ^ -7256804;
          continue;
        case 3:
          num3 = ImageUtil.\u200F‮​⁭⁫‮⁫‪‬⁯‮‫⁯‏‍⁪⁪‌‎⁫‎‪‬⁫‫‬⁫⁭⁮⁯⁪‮‍‬‬⁬‍‎⁮‫‮(bitmapData);
          num1 = (int) num5 * 1357377048 ^ 1235289342;
          continue;
        case 4:
          num2 += 4;
          num1 = -1356383513;
          continue;
        case 5:
          num1 = (int) num5 * -1886314121 ^ -1192268909;
          continue;
        case 6:
          Rectangle rectangle = new Rectangle(0, 0, ImageUtil.\u202A‫‫‎‪⁪‎‏‮‌‏‏​⁯‭‪‬⁯‏⁫⁭⁮⁪‮‌‫‬​⁯⁫‮​⁪⁮⁪⁮⁫⁬⁮‬‮((Image) bitmap), ImageUtil.\u206F‫‪‮⁫⁮⁪⁪‬⁬‫⁯⁯‮⁪⁯​⁯⁯‬⁭‏‏⁯⁬⁭‪‮‌‮‪⁫⁮‌‍‎⁯‮⁪‏‮((Image) bitmap));
          bitmapData = ImageUtil.\u202B‌​‭‏⁮⁬‌‏⁪‭⁭‬‬⁮⁯‌‫‌‎⁮⁭⁭‌‏⁯‮⁪‍‭‎⁯​‌‪‪‍⁮‍‫‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num1 = (int) num5 * 268839810 ^ 530652968;
          continue;
        case 7:
          num1 = -1325740077;
          continue;
        case 8:
          pixelFormat = PixelFormat.Format32bppArgb;
          num1 = (int) num5 * -339372396 ^ 1923650317;
          continue;
        case 9:
          ImageUtil.\u206C‮‫⁪⁫⁬‪⁯⁬‎‌‭‬‪⁮⁫‌⁫‎⁪‭‪‫⁮‫‎‮⁫‫‬‫‫⁬‪‍‬‬⁮⁬‎‮(bitmap, bitmapData);
          num1 = (int) num5 * -1770414792 ^ -841406182;
          continue;
        case 10:
          num1 = (int) num5 * 186567267 ^ 496571084;
          continue;
        case 11:
          image = (Image) bitmap;
          num1 = (int) num5 * -247665206 ^ 805711377;
          continue;
        case 12:
          num1 = (int) num5 * -2106300323 ^ 1429460530;
          continue;
        case 13:
          num1 = (int) num5 * -1160643067 ^ 1170288703;
          continue;
        case 14:
          num4 = 0;
          num1 = -684820649;
          continue;
        case 15:
          goto label_1;
        case 16:
          int num6 = flag ? -2096665676 : (num6 = -170334352);
          num1 = num6 ^ (int) num5 * 890977150;
          continue;
        case 17:
          numArray = new byte[length];
          num1 = (int) num5 * -597036189 ^ 132917753;
          continue;
        case 18:
          num1 = (int) num5 * -406367507 ^ -1689103127;
          continue;
        case 19:
          goto label_8;
        case 20:
          flag = num2 < numArray.Length;
          num1 = -768483872;
          continue;
        case 21:
          numArray[num2 + num4] = (byte) ((double) numArray[num2 + num4] * opacity);
          num1 = (int) num5 * -1360745120 ^ -1112791076;
          continue;
        case 22:
          int num7 = numArray[num2 + 4 - 1] == (byte) 0 ? -1459722823 : (num7 = -780034248);
          num1 = num7 ^ (int) num5 * 1542291112;
          continue;
        case 23:
          num2 = 0;
          num1 = (int) num5 * 2070093147 ^ -332130108;
          continue;
        case 24:
          ++num4;
          num1 = (int) num5 * 862384931 ^ -2003819333;
          continue;
        case 25:
          ImageUtil.\u206F‌‎⁮‬⁮‏‭‮‬‮⁮⁬‌‫⁭‏‍⁮‏⁬⁫‭⁭​⁪‬‬⁭⁬⁯‪⁫‏​‎‏‬‪‫‮(numArray, 0, num3, length);
          num1 = (int) num5 * -953392564 ^ -214059088;
          continue;
        case 26:
          image = originalImage;
          num1 = (int) num5 * -1696651545 ^ 1161074634;
          continue;
        case 27:
          num4 = num4 + 1 + 1;
          num1 = (int) num5 * -187705806 ^ -724146440;
          continue;
        case 28:
          length = ImageUtil.\u202A‫‫‎‪⁪‎‏‮‌‏‏​⁯‭‪‬⁯‏⁫⁭⁮⁪‮‌‫‬​⁯⁫‮​⁪⁮⁪⁮⁫⁬⁮‬‮((Image) bitmap) * ImageUtil.\u206F‫‪‮⁫⁮⁪⁪‬⁬‫⁯⁯‮⁪⁯​⁯⁯‬⁭‏‏⁯⁬⁭‪‮‌‮‪⁫⁮‌‍‎⁯‮⁪‏‮((Image) bitmap) * 4;
          num1 = (int) num5 * 536933279 ^ 1956753550;
          continue;
        default:
          goto label_30;
      }
    }
label_30:
    return image;
label_8:
    bitmap = (Bitmap) ImageUtil.\u206A‏‌​‎‌‍⁬⁭‭⁪‎‬⁪‎⁫‍⁮‬⁬​⁪​⁪‮⁮‬⁬‫⁬​‭⁪⁫​‫‎⁫​‎‮(originalImage);
    num1 = -1146401796;
    goto label_2;
  }

  static PixelFormat \u200C‍‮⁯‪⁭⁬‭‪⁫‮‭‪‪‫⁬⁪‫‭‍‫⁫‪⁮‮⁫‍‎‪⁪⁯‮‎⁪⁮⁮⁭‌⁬⁪‮([In] Image obj0) => obj0.PixelFormat;

  static object \u206A‏‌​‎‌‍⁬⁭‭⁪‎‬⁪‎⁫‍⁮‬⁬​⁪​⁪‮⁮‬⁬‫⁬​‭⁪⁫​‫‎⁫​‎‮([In] Image obj0) => obj0.Clone();

  static int \u202A‫‫‎‪⁪‎‏‮‌‏‏​⁯‭‪‬⁯‏⁫⁭⁮⁪‮‌‫‬​⁯⁫‮​⁪⁮⁪⁮⁫⁬⁮‬‮([In] Image obj0) => obj0.Width;

  static int \u206F‫‪‮⁫⁮⁪⁪‬⁬‫⁯⁯‮⁪⁯​⁯⁯‬⁭‏‏⁯⁬⁭‪‮‌‮‪⁫⁮‌‍‎⁯‮⁪‏‮([In] Image obj0) => obj0.Height;

  static BitmapData \u202B‌​‭‏⁮⁬‌‏⁪‭⁭‬‬⁮⁯‌‫‌‎⁮⁭⁭‌‏⁯‮⁪‍‭‎⁯​‌‪‪‍⁮‍‫‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u200F‮​⁭⁫‮⁫‪‬⁯‮‫⁯‏‍⁪⁪‌‎⁫‎‪‬⁫‫‬⁫⁭⁮⁯⁪‮‍‬‬⁬‍‎⁮‫‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u202C⁫‭‎‌‮‪‌‏⁬⁭‍‏⁭‬⁪‎‫⁯‏⁫‌⁬⁫‮⁪‍‪‍‭​​‪‌‭‭⁯‬‮‮‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206F‌‎⁮‬⁮‏‭‮‬‮⁮⁬‌‫⁭‏‍⁮‏⁬⁫‭⁭​⁪‬‬⁭⁬⁯‪⁫‏​‎‏‬‪‫‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206C‮‫⁪⁫⁬‪⁯⁬‎‌‭‬‪⁮⁫‌⁫‎⁪‭‪‫⁮‫‎‮⁫‫‬‫‫⁬‪‍‬‬⁮⁬‎‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
