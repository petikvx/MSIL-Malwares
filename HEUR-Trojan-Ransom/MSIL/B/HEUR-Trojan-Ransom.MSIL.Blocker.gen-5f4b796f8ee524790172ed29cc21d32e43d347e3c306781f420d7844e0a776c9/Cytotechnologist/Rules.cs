// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: LoadHi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 984E9D2E-DA60-4984-B27B-15EC3C1BAA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-5f4b796f8ee524790172ed29cc21d32e43d347e3c306781f420d7844e0a776c9.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
      return new Rules()
      {
        SprintCount = json["sprints"].AsInt,
        MaxImpact = asInt,
        Cards = Rules.ParseDeck(json["deck"], asInt),
        InitialResources = json["initial-resources"].AsInt,
        NormalPlanningCount = json["normal-planning-count"].AsInt,
        NormalPlanningCost = json["normal-planning-cost"].AsInt,
        OverPlanningCost = json["over-planning-cost"].AsInt,
        SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
        RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
        EconomicsAffectsAll = json["economics-affects-all"].AsBool,
        StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
        OnlyOneWinner = json["only-one-winner"].AsBool
      };
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 1918944346;
      int aIndex;
      bool flag;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 62170913)) % 9U)
        {
          case 1:
            aIndex = 0;
            num1 = (int) num2 * -1803535646 ^ 1039693242;
            continue;
          case 2:
            flag = aIndex < numArray.Length;
            num1 = 808196566;
            continue;
          case 3:
            num1 = (int) num2 * 397973340 ^ 1201194820;
            continue;
          case 4:
            riskChances = numArray;
            num1 = (int) num2 * 1940915496 ^ -1283229357;
            continue;
          case 5:
            num1 = (int) num2 * -418113685 ^ -1718127970;
            continue;
          case 6:
            goto label_1;
          case 7:
            int num3 = flag ? -1384567892 : (num3 = -1375885737);
            num1 = num3 ^ (int) num2 * 846035378;
            continue;
          case 8:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = 1388598513;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 1148398854;
      int num2;
      JSONNode jsonNode;
      int aIndex1;
      int aIndex2;
      List<Card> cardList;
      Card[] array;
      bool flag1;
      int count;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 557386787)) % 21U)
        {
          case 0:
            bool flag2 = aIndex1 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = 485586896;
            continue;
          case 1:
            ++aIndex1;
            num1 = (int) num3 * 971391928 ^ -871242634;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = 192948290;
            continue;
          case 4:
            num1 = (int) num3 * -406199110 ^ -1456377816;
            continue;
          case 5:
            count = json.Count;
            cardList = new List<Card>();
            aIndex2 = 0;
            num1 = (int) num3 * 835655556 ^ -1113862743;
            continue;
          case 6:
            ++num2;
            num1 = (int) num3 * 1710074469 ^ 1943996847;
            continue;
          case 7:
            num1 = (int) num3 * -1683780590 ^ 733670205;
            continue;
          case 8:
            int num4;
            num1 = num4 = aIndex1 < maxImpact * 2 ? 262114860 : (num4 = 2067185487);
            continue;
          case 9:
            num2 = 0;
            num1 = (int) num3 * 1528130594 ^ 1029246035;
            continue;
          case 10:
            array = cardList.ToArray();
            num1 = (int) num3 * -1907294874 ^ 896922381;
            continue;
          case 11:
            aIndex1 = 0;
            num1 = (int) num3 * -1571450672 ^ -909563968;
            continue;
          case 12:
            num1 = (int) num3 * -2095508471 ^ -926097765;
            continue;
          case 14:
            int num5 = flag1 ? -1267503428 : (num5 = -1301699841);
            num1 = num5 ^ (int) num3 * -624093172;
            continue;
          case 15:
            num1 = (int) num3 * 197069502 ^ -1837437652;
            continue;
          case 16:
            int num6;
            num1 = num6 = num2 < jsonNode[aIndex1].AsInt ? 254886508 : (num6 = 480807973);
            continue;
          case 17:
            jsonNode = json[aIndex2];
            num1 = 2123867786;
            continue;
          case 18:
            flag1 = aIndex2 < count;
            num1 = 200610139;
            continue;
          case 19:
            num1 = 459320731;
            continue;
          case 20:
            ++aIndex2;
            num1 = (int) num3 * 1294256463 ^ -1671654335;
            continue;
          default:
            goto label_22;
        }
      }
label_22:
      return array;
    }

    public override string ToString() => Rules.\u206D⁭‫⁫‬⁪⁬⁭‬​‮​​⁬‬​‬‬​‫‎‎‍‬‍‌⁯⁪⁪‌‏​‪‪⁯⁪⁯‬‌‮‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
    {
      (object) this.SprintCount,
      (object) this.MaxImpact,
      (object) this.CardsToString(),
      (object) this.InitialResources,
      (object) this.NormalPlanningCount,
      (object) this.NormalPlanningCost,
      (object) this.OverPlanningCost,
      (object) this.SprintsWonWithoutPlanning,
      (object) this.RiskChancesToString(),
      (object) this.EconomicsAffectsAll,
      (object) this.StayOnSprintMinDiff,
      (object) this.OnlyOneWinner
    });

    private string CardsToString()
    {
label_1:
      int num1 = 499628637;
      Card[] cards;
      int num2;
      Card card1;
      bool flag;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1370130114)) % 18U)
        {
          case 0:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200E⁫‮⁬​‫​‮‭⁬‎‍⁫⁮⁪‌‫⁫‫‭⁯‪‌‏‮⁪‏‮⁬⁫‌‌⁯‫⁪‍⁫‍‍⁯‮((object) card2) : (string) null;
            str1 = Rules.\u202B⁫‬‫‏⁫‏​⁭‍⁫‎⁮‍‌‎⁬‫⁫‮​⁮⁫⁭‎⁮‭⁪⁪‭⁭‌‌​‬⁭⁬‬⁬‬‮(str3, str4, " ");
            num1 = 287651442;
            continue;
          case 1:
            int num4;
            num1 = num4 = index < cards.Length ? 1855619803 : (num4 = 75717656);
            continue;
          case 2:
            num2 = 0;
            num1 = (int) num3 * 588653633 ^ -1967100314;
            continue;
          case 3:
            flag = num2 != card1.Type;
            num1 = (int) num3 * -239222683 ^ 2111634194;
            continue;
          case 4:
            str2 = Rules.\u200E‎‭⁫⁬‍‮‏‬⁫‮⁬‍⁪⁮‬‮​⁮⁯‌‪⁬‌⁯‍‫⁫‪⁬‌‪⁯⁭‏‬⁬‪​‭‮(str1, "\n]");
            num1 = (int) num3 * 1038636161 ^ -1263784855;
            continue;
          case 5:
            str1 = "[\n\t";
            num1 = (int) num3 * 1779762077 ^ -1732254339;
            continue;
          case 6:
            num1 = (int) num3 * 844858293 ^ 1990088136;
            continue;
          case 8:
            num2 = card1.Type;
            num1 = (int) num3 * -1652678459 ^ -424553810;
            continue;
          case 9:
            num1 = (int) num3 * -2074173448 ^ -1269799855;
            continue;
          case 10:
            ++index;
            num1 = (int) num3 * 724348396 ^ -1210513927;
            continue;
          case 11:
            index = 0;
            num1 = (int) num3 * 1257753762 ^ 1160966179;
            continue;
          case 12:
            goto label_1;
          case 13:
            num1 = (int) num3 * -1575837846 ^ -1920890157;
            continue;
          case 14:
            cards = this.Cards;
            num1 = (int) num3 * 369990827 ^ -1067272661;
            continue;
          case 15:
            int num5 = flag ? 1009120068 : (num5 = 777149790);
            num1 = num5 ^ (int) num3 * -1625157978;
            continue;
          case 16:
            str1 = Rules.\u200E‎‭⁫⁬‍‮‏‬⁫‮⁬‍⁪⁮‬‮​⁮⁯‌‪⁬‌⁯‍‫⁫‪⁬‌‪⁯⁭‏‬⁬‪​‭‮(str1, "\n\t");
            num1 = (int) num3 * 2060579590 ^ 172954878;
            continue;
          case 17:
            card1 = cards[index];
            num1 = 1788466487;
            continue;
          default:
            goto label_19;
        }
      }
label_19:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -1876102331;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -835152768)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            str1 = Rules.\u202B⁫‬‫‏⁫‏​⁭‍⁫‎⁮‍‌‎⁬‫⁫‮​⁮⁫⁭‎⁮‭⁪⁪‭⁭‌‌​‬⁭⁬‬⁬‬‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206F‬⁭‬‏‍‏⁯⁬‭⁪​‏‬⁮‪⁪⁮‪⁫‬‭‏‎‌‮⁫‎‭⁬‌⁯⁫‫⁯‎‬‮​‫‮()));
            num1 = -331234956;
            continue;
          case 2:
            num1 = (int) num2 * -506259123 ^ -871189749;
            continue;
          case 4:
            int num3;
            num1 = num3 = index < this.RiskChances.Length ? -573540218 : (num3 = -1011815914);
            continue;
          case 5:
            num1 = (int) num2 * -743475889 ^ 114330680;
            continue;
          case 6:
            str1 = Rules.\u200E‎‭⁫⁬‍‮‏‬⁫‮⁬‍⁪⁮‬‮​⁮⁯‌‪⁬‌⁯‍‫⁫‪⁬‌‪⁯⁭‏‬⁬‪​‭‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206F‬⁭‬‏‍‏⁯⁬‭⁪​‏‬⁮‪⁪⁮‪⁫‬‭‏‎‌‮⁫‎‭⁬‌⁯⁫‫⁯‎‬‮​‫‮()));
            index = 1;
            num1 = (int) num2 * -1973102237 ^ -1945067334;
            continue;
          case 7:
            ++index;
            num1 = (int) num2 * -2012619802 ^ -330044293;
            continue;
          case 8:
            str2 = Rules.\u200E‎‭⁫⁬‍‮‏‬⁫‮⁬‍⁪⁮‬‮​⁮⁯‌‪⁬‌⁯‍‫⁫‪⁬‌‪⁯⁭‏‬⁬‪​‭‮(str1, " ]");
            num1 = (int) num2 * 1037100105 ^ -1375556767;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u206D⁭‫⁫‬⁪⁬⁭‬​‮​​⁬‬​‬‬​‫‎‎‍‬‍‌⁯⁪⁪‌‏​‪‪⁯⁪⁯‬‌‮‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200E‎‭⁫⁬‍‮‏‬⁫‮⁬‍⁪⁮‬‮​⁮⁯‌‪⁬‌⁯‍‫⁫‪⁬‌‪⁯⁭‏‬⁬‪​‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200E⁫‮⁬​‫​‮‭⁬‎‍⁫⁮⁪‌‫⁫‫‭⁯‪‌‏‮⁪‏‮⁬⁫‌‌⁯‫⁪‍⁫‍‍⁯‮([In] object obj0) => obj0.ToString();

    static string \u202B⁫‬‫‏⁫‏​⁭‍⁫‎⁮‍‌‎⁬‫⁫‮​⁮⁫⁭‎⁮‭⁪⁪‭⁭‌‌​‬⁭⁬‬⁬‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206F‬⁭‬‏‍‏⁯⁬‭⁪​‏‬⁮‪⁪⁮‪⁫‬‭‏‎‌‮⁫‎‭⁬‌⁯⁫‫⁯‎‬‮​‫‮() => CultureInfo.InvariantCulture;
  }
}
