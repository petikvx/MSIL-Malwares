// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: Gز, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19F72CF4-8E17-4C69-9694-AAB2F68A841C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-315cc7a49fb61eb58200e4b8294fb4a7c58ef16bdf813f48fa8d114a9804258a.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b) => this.board = b;

    public void FindAllMoves()
    {
label_1:
      int num1 = -1974324598;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -561682486)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Clear();
            num1 = (int) num2 * 92103433 ^ -1715863623;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.WhitePieces.Values.GetEnumerator())
      {
label_8:
        int num3 = enumerator.MoveNext() ? -808930195 : (num3 = -1547204956);
        ChessPiece current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -561682486)) % 6U)
          {
            case 0:
              this.FindMoveFrom(current.Current);
              num3 = (int) num4 * -2033088444 ^ 1686473217;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = -1327609200;
              continue;
            case 2:
              goto label_8;
            case 3:
              num3 = (int) num4 * -1930451567 ^ 229742901;
              continue;
            case 5:
              num3 = -808930195;
              continue;
            default:
              goto label_13;
          }
        }
      }
label_13:
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator1 = this.board.BlackPieces.Values.GetEnumerator();
      try
      {
label_19:
        int num5 = !enumerator1.MoveNext() ? -778225111 : (num5 = -1073364497);
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -561682486)) % 5U)
          {
            case 0:
              num5 = -1073364497;
              continue;
            case 1:
              this.FindMoveFrom(enumerator1.Current.Current);
              num5 = -1176632177;
              continue;
            case 2:
              num5 = (int) num6 * 1429990514 ^ -2118365695;
              continue;
            case 3:
              goto label_19;
            default:
              goto label_27;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_22:
        int num7 = -1290514981;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ -561682486)) % 3U)
          {
            case 1:
              num7 = (int) num8 * -1347764604 ^ 910575545;
              continue;
            case 2:
              goto label_22;
            default:
              goto label_26;
          }
        }
label_26:;
      }
label_27:
      if (!this.board.ShowAllMoves)
        return;
label_28:
      int num9 = -1045288643;
      while (true)
      {
        uint num10;
        switch ((num10 = (uint) (num9 ^ -561682486)) % 4U)
        {
          case 0:
            goto label_28;
          case 1:
            goto label_24;
          case 2:
            num9 = (int) num10 * -200542912 ^ 717680879;
            continue;
          case 3:
            this.HighLightMoveStyle();
            num9 = (int) num10 * -2146682130 ^ 966975938;
            continue;
          default:
            goto label_20;
        }
      }
label_24:
      return;
label_20:;
    }

    public void FindMoveFrom(Square x)
    {
label_1:
      int num1 = 1625164816;
      Pieces kind;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 575164329)) % 20U)
        {
          case 0:
            num1 = (int) num2 * 1342082162 ^ -697525988;
            continue;
          case 1:
            num1 = (int) num2 * 335112533 ^ 213859229;
            continue;
          case 2:
            num1 = (int) num2 * -1982461988 ^ 1372691461;
            continue;
          case 3:
label_11:
            this.handleQueen(x);
            num1 = 774923575;
            continue;
          case 4:
            num1 = (int) num2 * -2061462962 ^ 11320492;
            continue;
          case 5:
label_17:
            this.handleKnight(x);
            num1 = 560502787;
            continue;
          case 6:
            num1 = (int) num2 * 1366683754 ^ 992476560;
            continue;
          case 7:
label_12:
            this.handleBishop(x);
            num1 = 874235711;
            continue;
          case 8:
            num1 = (int) num2 * 827614995 ^ -1065440756;
            continue;
          case 9:
            goto label_3;
          case 10:
            num1 = (int) num2 * 650066210 ^ -1067614569;
            continue;
          case 11:
label_10:
            this.handleRook(x);
            num1 = 416104148;
            continue;
          case 12:
label_8:
            this.handlePawn(x);
            num1 = 1181831657;
            continue;
          case 13:
            kind = x.Piece.Kind;
            num1 = (int) num2 * 254379430 ^ -737094899;
            continue;
          case 14:
            switch (kind)
            {
              case Pieces.Pawn:
                goto label_8;
              case Pieces.Knight:
                goto label_17;
              case Pieces.Bishop:
                goto label_12;
              case Pieces.Rook:
                goto label_10;
              case Pieces.King:
                goto label_19;
              case Pieces.Queen:
                goto label_11;
              default:
                num1 = (int) num2 * -1137825531 ^ 1844056315;
                continue;
            }
          case 15:
            goto label_1;
          case 16:
            num1 = (int) num2 * -1270082048 ^ -78332204;
            continue;
          case 17:
label_19:
            this.handleKing(x);
            num1 = 842718950;
            continue;
          case 18:
            num1 = (int) num2 * 1071800312 ^ 1043102820;
            continue;
          case 19:
            num1 = (int) num2 * -1382563166 ^ 2071399763;
            continue;
          default:
            goto label_23;
        }
      }
label_3:
      return;
label_23:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
label_1:
      int num1 = -612862485;
      while (true)
      {
        uint num2;
        bool flag1;
        int num3;
        int num4;
        Square square;
        bool flag2;
        int num5;
        bool flag3;
        bool flag4;
        int num6;
        bool flag5;
        bool flag6;
        bool flag7;
        int num7;
        int b;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        int num8;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num2 = (uint) (num1 ^ -252891447)) % 69U)
        {
          case 0:
            this.addMove(num6, num4, x);
            num1 = (int) num2 * 2122777261 ^ -358638724;
            continue;
          case 1:
            flag9 = this.board.lastPassantPawn == this.board[num7, x.Rank].Piece;
            num1 = (int) num2 * -626451561 ^ 1035920731;
            continue;
          case 2:
            if (!flag5)
            {
              num1 = (int) num2 * 2026109198 ^ 658690762;
              continue;
            }
            num9 = 5;
            goto label_48;
          case 3:
            this.addCapture(num7, b, x, this.board[num7, x.Rank].Piece);
            num1 = (int) num2 * -429889986 ^ 1603746063;
            continue;
          case 4:
            int num19 = this.board[num7, x.Rank].Piece != null ? 593394704 : (num19 = 869726334);
            num1 = num19 ^ (int) num2 * 749047799;
            continue;
          case 5:
            num1 = -1820100402;
            continue;
          case 6:
            this.addMove(num6, num4, x);
            num1 = (int) num2 * -651919633 ^ 1594424695;
            continue;
          case 7:
            flag10 = num7 >= 0;
            num1 = (int) num2 * -930219250 ^ -2082678313;
            continue;
          case 8:
            if (x.Piece.Color != PieceColor.White)
            {
              num1 = (int) num2 * 1063713399 ^ 1821747239;
              continue;
            }
            num10 = 1;
            goto label_96;
          case 9:
            if (num4 < 0)
            {
              num11 = 0;
              break;
            }
            num1 = (int) num2 * 485606067 ^ -922229797;
            continue;
          case 10:
            int num20;
            num1 = num20 = num5 >= 8 ? -2146995005 : (num20 = -1288540740);
            continue;
          case 11:
            num1 = (int) num2 * 1595994698 ^ 1237999085;
            continue;
          case 12:
            num5 = x.File + 1;
            num1 = (int) num2 * -41764548 ^ 1839214124;
            continue;
          case 13:
            int num21 = flag7 ? -1156691261 : (num21 = -1907623216);
            num1 = num21 ^ (int) num2 * -44246250;
            continue;
          case 14:
            square = this.board[num6, num4];
            num1 = (int) num2 * -508391520 ^ -1927377730;
            continue;
          case 15:
            num12 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_67;
          case 16:
            goto label_3;
          case 17:
            square = this.board[num6, num4];
            flag1 = !square.IsEmpty;
            num1 = (int) num2 * 2097885219 ^ 2007711075;
            continue;
          case 18:
            int num22 = flag2 ? -1338426968 : (num22 = -325785367);
            num1 = num22 ^ (int) num2 * 256406237;
            continue;
          case 19:
            num1 = (int) num2 * -1311121860 ^ 602484218;
            continue;
          case 20:
            goto label_1;
          case 21:
            int num23 = !flag8 ? -270384220 : (num23 = -1244384357);
            num1 = num23 ^ (int) num2 * -1162860108;
            continue;
          case 22:
            int num24 = !flag3 ? 1651319140 : (num24 = 1383183152);
            num1 = num24 ^ (int) num2 * -829467154;
            continue;
          case 23:
            num6 = x.File + 1;
            num4 = x.Rank + num3;
            num1 = -1021487384;
            continue;
          case 24:
            int num25 = !flag4 ? -123734300 : (num25 = -302276575);
            num1 = num25 ^ (int) num2 * -1114167130;
            continue;
          case 25:
            if (num4 >= 0)
            {
              num1 = (int) num2 * -1414746097 ^ -1502384065;
              continue;
            }
            goto label_43;
          case 26:
            num6 = 0;
            num1 = (int) num2 * 877025670 ^ 1184754565;
            continue;
          case 27:
            num4 = x.Rank + num3;
            if (num6 >= 0)
            {
              num1 = (int) num2 * 1268984720 ^ -1165835361;
              continue;
            }
            goto label_32;
          case 28:
            num4 = x.Rank + 2 * num3;
            this.addMove(num6, num4, x);
            num1 = (int) num2 * -408425123 ^ -1359682883;
            continue;
          case 29:
            num10 = 6;
            goto label_96;
          case 30:
            int num26 = !flag13 ? 1792673931 : (num26 = 309052785);
            num1 = num26 ^ (int) num2 * 1952227224;
            continue;
          case 31:
            if (this.board[num5, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 1213700636 ^ -1819273068;
              continue;
            }
            num15 = 0;
            goto label_93;
          case 32:
            square = this.board[num6, num4];
            int num27 = square.IsEmpty ? -564491403 : (num27 = -764339520);
            num1 = num27 ^ (int) num2 * 1883426812;
            continue;
          case 33:
            num6 = x.File - 1;
            num1 = -1044586509;
            continue;
          case 34:
            num13 = num4 < 8 ? 1 : 0;
            goto label_44;
          case 35:
            num1 = (int) num2 * 256784531 ^ -291953392;
            continue;
          case 36:
            if (num4 >= 0)
            {
              num1 = (int) num2 * -1372426966 ^ -1176138253;
              continue;
            }
            goto label_32;
          case 37:
            num1 = -1758305460;
            continue;
          case 38:
            int num28 = flag10 ? -1436008114 : (num28 = -794982145);
            num1 = num28 ^ (int) num2 * 2080345319;
            continue;
          case 39:
            if (x.Rank == 4)
            {
              num1 = -1405338218;
              continue;
            }
            num16 = 0;
            goto label_76;
          case 40:
            num17 = this.board[num7, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_73;
          case 41:
            flag12 = x.Rank == num8;
            num1 = -1721771827;
            continue;
          case 42:
            this.addCapture(num5, b, x, this.board[num5, x.Rank].Piece);
            num1 = (int) num2 * -2072233129 ^ -1470346545;
            continue;
          case 43:
            num1 = -1758353204;
            continue;
          case 44:
            num18 = -1;
            goto label_24;
          case 45:
            num4 = 0;
            num1 = (int) num2 * 1899352025 ^ 595652581;
            continue;
          case 46:
            num1 = -1851206586;
            continue;
          case 47:
            int num29 = flag1 ? -1516438915 : (num29 = -1116611405);
            num1 = num29 ^ (int) num2 * 1850163363;
            continue;
          case 48:
            num1 = (int) num2 * -380218697 ^ 1614848876;
            continue;
          case 49:
            flag11 = this.board.lastPassantPawn == this.board[num5, x.Rank].Piece;
            num1 = (int) num2 * 1527129865 ^ -57954435;
            continue;
          case 50:
            int num30 = flag12 ? -1905301908 : (num30 = -647803299);
            num1 = num30 ^ (int) num2 * 1806547355;
            continue;
          case 51:
            this.addMove(num6, num4, x);
            num1 = (int) num2 * 1414083700 ^ -1829612196;
            continue;
          case 52:
            num7 = x.File - 1;
            num1 = (int) num2 * 1787866418 ^ -1067596032;
            continue;
          case 53:
            flag7 = flag5 | flag6;
            num1 = (int) num2 * -687243095 ^ 976089342;
            continue;
          case 54:
            if (x.Piece.Color != PieceColor.White)
            {
              num1 = (int) num2 * -2054520823 ^ 2100070157;
              continue;
            }
            num18 = 1;
            goto label_24;
          case 55:
            num16 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_76;
          case 56:
            int num31 = !flag9 ? -188392917 : (num31 = -1160929995);
            num1 = num31 ^ (int) num2 * 1254444405;
            continue;
          case 57:
            num1 = (int) num2 * -2050473973 ^ -1905707699;
            continue;
          case 58:
            num11 = num4 < 8 ? 1 : 0;
            break;
          case 59:
            num15 = this.board[num5, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_93;
          case 60:
            int num32 = !flag11 ? 577468707 : (num32 = 175171640);
            num1 = num32 ^ (int) num2 * 1449271544;
            continue;
          case 61:
            num1 = (int) num2 * 297957789 ^ -1702336417;
            continue;
          case 62:
            flag2 = !square.IsEmpty;
            num1 = (int) num2 * 449089539 ^ -324886235;
            continue;
          case 63:
            int num33 = this.board[num5, x.Rank].Piece != null ? 426995767 : (num33 = 1611816579);
            num1 = num33 ^ (int) num2 * -107316928;
            continue;
          case 64:
            num14 = num4 < 8 ? 1 : 0;
            goto label_33;
          case 65:
            num9 = 2;
            goto label_48;
          case 66:
            if (num6 < 8)
            {
              num1 = (int) num2 * -1882374726 ^ 206241519;
              continue;
            }
            goto label_43;
          case 67:
            if (this.board[num7, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -1088427632 ^ 136373441;
              continue;
            }
            num17 = 0;
            goto label_73;
          case 68:
            num4 = x.Rank + num3;
            num1 = (int) num2 * -480532935 ^ 1459115783;
            continue;
          default:
            goto label_103;
        }
        flag3 = num11 != 0;
        num1 = -1697049083;
        continue;
label_24:
        num3 = num18;
        num6 = x.File;
        num1 = -134333105;
        continue;
label_32:
        num14 = 0;
label_33:
        flag8 = num14 != 0;
        num1 = -67859925;
        continue;
label_43:
        num13 = 0;
label_44:
        flag4 = num13 != 0;
        num1 = -734666366;
        continue;
label_48:
        b = num9;
        num1 = -2028889245;
        continue;
label_67:
        flag6 = num12 != 0;
        num1 = -920560754;
        continue;
label_73:
        int num34;
        num1 = num34 = num17 != 0 ? -1605654605 : (num34 = -178235745);
        continue;
label_76:
        flag5 = num16 != 0;
        if (x.Rank != 3)
        {
          num12 = 0;
          goto label_67;
        }
        else
        {
          num1 = -223193130;
          continue;
        }
label_93:
        flag13 = num15 != 0;
        num1 = -1373882534;
        continue;
label_96:
        num8 = num10;
        num1 = -717662931;
      }
label_3:
      return;
label_103:;
    }

    private void handleQueen(Square x)
    {
label_1:
      int num1 = 1090938259;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1691974179)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            this.handleBishop(x);
            num1 = (int) num2 * -2053165747 ^ -1118819287;
            continue;
          case 2:
            this.handleRook(x);
            num1 = (int) num2 * 1298121886 ^ -783238838;
            continue;
          case 3:
            num1 = (int) num2 * 270995296 ^ -287966494;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void handleKing(Square x)
    {
      this.addMove(x.File + 1, x.Rank + 1, x);
      this.addMove(x.File + 1, x.Rank - 1, x);
label_1:
      int num1 = 1841153799;
      bool canCastleQueenSide1;
      bool canCastleQueenSide2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 445734324)) % 23U)
        {
          case 0:
            int num3 = x.Piece.Color == PieceColor.White ? -1116986992 : (num3 = -172385660);
            num1 = num3 ^ (int) num2 * -805514349;
            continue;
          case 1:
            num1 = (int) num2 * -108635627 ^ -1249208312;
            continue;
          case 2:
            this.handleBigCastling(x);
            num1 = (int) num2 * 634924678 ^ 624312794;
            continue;
          case 3:
            canCastleQueenSide1 = this.board.WhiteCanCastleQueenSide;
            num1 = 323693837;
            continue;
          case 4:
            this.addMove(x.File - 1, x.Rank, x);
            this.addMove(x.File, x.Rank + 1, x);
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * -2132515910 ^ 1870598659;
            continue;
          case 5:
            num1 = (int) num2 * 1975860478 ^ -2105330487;
            continue;
          case 6:
            canCastleQueenSide2 = this.board.BlackCanCastleQueenSide;
            num1 = 940190545;
            continue;
          case 7:
            int num4 = this.board.WhiteCanCastleKingSide ? 789135476 : (num4 = 706841253);
            num1 = num4 ^ (int) num2 * -1998878321;
            continue;
          case 8:
            num1 = (int) num2 * 712425181 ^ 1073560041;
            continue;
          case 9:
            int num5 = !this.board.BlackCanCastleKingSide ? -2124274526 : (num5 = -788535093);
            num1 = num5 ^ (int) num2 * -1747183531;
            continue;
          case 10:
            num1 = 1964576313;
            continue;
          case 11:
            goto label_3;
          case 12:
            int num6 = canCastleQueenSide1 ? -1163353230 : (num6 = -987802498);
            num1 = num6 ^ (int) num2 * -1877197297;
            continue;
          case 13:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -805424095 ^ 282543275;
            continue;
          case 14:
            num1 = 884831247;
            continue;
          case 15:
            this.handleBigCastling(x);
            num1 = (int) num2 * 1874912390 ^ 2007558355;
            continue;
          case 16:
            int num7;
            num1 = num7 = x.Piece.Color == PieceColor.Black ? 1858699693 : (num7 = 1964576313);
            continue;
          case 17:
            num1 = (int) num2 * 1869266003 ^ -1131890566;
            continue;
          case 18:
            this.addMove(x.File - 1, x.Rank + 1, x);
            this.addMove(x.File - 1, x.Rank - 1, x);
            this.addMove(x.File + 1, x.Rank, x);
            num1 = (int) num2 * -1792368391 ^ 2018139188;
            continue;
          case 19:
            num1 = (int) num2 * 1167337539 ^ -1891968625;
            continue;
          case 20:
            this.handleSmallCastling(x);
            num1 = (int) num2 * 1071490075 ^ -423302863;
            continue;
          case 21:
            int num8 = canCastleQueenSide2 ? 398030029 : (num8 = 1506105221);
            num1 = num8 ^ (int) num2 * -1716890516;
            continue;
          case 22:
            goto label_1;
          default:
            goto label_25;
        }
      }
label_3:
      return;
label_25:;
    }

    private void handleBigCastling(Square x)
    {
label_1:
      int num1 = -1592547039;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        Square square3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1683371168)) % 8U)
        {
          case 0:
            num3 = square3.IsEmpty ? 1 : 0;
            goto label_13;
          case 1:
            square1 = this.board[x.File - 1, x.Rank];
            num1 = (int) num2 * 397679992 ^ 1241562677;
            continue;
          case 2:
            goto label_1;
          case 3:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * 902013857 ^ -1927168341;
              continue;
            }
            break;
          case 4:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 1521487543 ^ -1788806633;
              continue;
            }
            break;
          case 5:
            square2 = this.board[x.File - 2, x.Rank];
            square3 = this.board[x.File - 3, x.Rank];
            num1 = (int) num2 * 176228244 ^ 1789545632;
            continue;
          case 6:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * -672606606 ^ -175391797;
            continue;
          case 7:
            goto label_3;
          default:
            goto label_14;
        }
        num3 = 0;
label_13:
        int num4;
        num1 = num4 = num3 == 0 ? -647809609 : (num4 = -1700540338);
      }
label_3:
      return;
label_14:;
    }

    private void handleSmallCastling(Square x)
    {
      Square square1 = this.board[x.File + 1, x.Rank];
label_1:
      int num1 = 947182693;
      while (true)
      {
        uint num2;
        Square square2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 215526678)) % 6U)
        {
          case 0:
            int num4 = !flag ? 930367524 : (num4 = 953932993);
            num1 = num4 ^ (int) num2 * -351645431;
            continue;
          case 1:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * -853697281 ^ -1948321011;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            num3 = square2.IsEmpty ? 1 : 0;
            break;
          case 5:
            square2 = this.board[x.File + 2, x.Rank];
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * -719634533 ^ -946354177;
              continue;
            }
            num3 = 0;
            break;
          default:
            goto label_11;
        }
        flag = num3 != 0;
        num1 = 2035611150;
      }
label_3:
      return;
label_11:;
    }

    private void handleRook(Square x)
    {
      int num1 = 1;
label_1:
      int num2 = -166897289;
      int num3;
      bool flag1;
      int b1;
      int num4;
      bool flag2;
      bool flag3;
      int num5;
      bool flag4;
      bool flag5;
      int b2;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num2 ^ -693690541)) % 35U)
        {
          case 0:
            int num7 = !flag3 ? -792874769 : (num7 = -556635508);
            num2 = num7 ^ (int) num6 * -629693276;
            continue;
          case 1:
            int num8 = !this.addMove(x.File + num5, x.Rank, x) ? 125872865 : (num8 = 2068989247);
            num2 = num8 ^ (int) num6 * 168309161;
            continue;
          case 2:
            int num9 = flag1 ? 1801745731 : (num9 = 803061638);
            num2 = num9 ^ (int) num6 * 870036748;
            continue;
          case 3:
            goto label_3;
          case 4:
            num2 = -1910697374;
            continue;
          case 5:
            b2 = x.Rank - num4;
            num2 = (int) num6 * -1394720736 ^ -1277779901;
            continue;
          case 6:
            int num10 = !flag4 ? 81553112 : (num10 = 1026339266);
            num2 = num10 ^ (int) num6 * 194810567;
            continue;
          case 7:
            goto label_1;
          case 8:
            num5 = 1;
            num2 = -1165386446;
            continue;
          case 9:
            int num11 = flag5 ? 1110532628 : (num11 = 142648468);
            num2 = num11 ^ (int) num6 * 1797630621;
            continue;
          case 10:
            flag3 = this.addMove(x.File, b2, x);
            num2 = (int) num6 * 306548194 ^ -422236524;
            continue;
          case 11:
            ++num1;
            num2 = (int) num6 * 1444117830 ^ 1590923740;
            continue;
          case 12:
            num2 = (int) num6 * 1924819744 ^ -2106443894;
            continue;
          case 13:
            num2 = (int) num6 * -807175690 ^ -1626483976;
            continue;
          case 14:
            num2 = (int) num6 * -2083668949 ^ 354096916;
            continue;
          case 15:
            num4 = 1;
            num2 = -980258442;
            continue;
          case 16:
            int num12;
            num2 = num12 = num3 < 8 ? -1154322512 : (num12 = -242620054);
            continue;
          case 17:
            int num13 = flag2 ? -1774044093 : (num13 = -815692252);
            num2 = num13 ^ (int) num6 * -1608778829;
            continue;
          case 18:
            num2 = (int) num6 * 298364374 ^ 83391850;
            continue;
          case 19:
            flag2 = num4 < 8;
            num2 = -426869799;
            continue;
          case 20:
            ++num3;
            num2 = -733898674;
            continue;
          case 21:
            num2 = -1408453708;
            continue;
          case 22:
            flag5 = num1 < 8;
            num2 = -469249234;
            continue;
          case 23:
            num2 = (int) num6 * 1013124803 ^ 1378215578;
            continue;
          case 24:
            ++num4;
            num2 = -1939424477;
            continue;
          case 25:
            num3 = 1;
            num2 = -1686717339;
            continue;
          case 26:
            int num14;
            num2 = num14 = num5 < 8 ? -268559202 : (num14 = -1466072701);
            continue;
          case 27:
            num2 = (int) num6 * -1022392288 ^ -212540227;
            continue;
          case 28:
            num2 = -1493695433;
            continue;
          case 29:
            ++num5;
            num2 = -1165386446;
            continue;
          case 30:
            num2 = -1544223898;
            continue;
          case 31:
            num2 = (int) num6 * 2021275586 ^ -1684102487;
            continue;
          case 32:
            flag4 = this.addMove(x.File - num3, x.Rank, x);
            num2 = -950065695;
            continue;
          case 33:
            flag1 = this.addMove(x.File, b1, x);
            num2 = (int) num6 * 1866138409 ^ 462803814;
            continue;
          case 34:
            b1 = x.Rank + num1;
            num2 = (int) num6 * 952265754 ^ -309636731;
            continue;
          default:
            goto label_37;
        }
      }
label_3:
      return;
label_37:;
    }

    private void handleBishop(Square x)
    {
      int num1 = 1;
label_1:
      int num2 = -1400544886;
      int num3;
      int a1;
      int b1;
      int a2;
      bool flag1;
      int num4;
      int a3;
      bool flag2;
      int a4;
      int b2;
      int b3;
      int num5;
      bool flag3;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num2 ^ -873085989)) % 37U)
        {
          case 0:
            int num7 = this.addMove(a4, b2, x) ? 688091543 : (num7 = 1372139782);
            num2 = num7 ^ (int) num6 * -834549651;
            continue;
          case 1:
            num4 = 1;
            num2 = -85230407;
            continue;
          case 2:
            num2 = (int) num6 * 1773542930 ^ -1110431640;
            continue;
          case 3:
            num2 = (int) num6 * -1967212088 ^ 1725576206;
            continue;
          case 4:
            a4 = x.File - num5;
            num2 = -231444304;
            continue;
          case 5:
            num2 = (int) num6 * -1800618567 ^ 2025277503;
            continue;
          case 6:
            num2 = (int) num6 * 432943160 ^ -1367224117;
            continue;
          case 7:
            a3 = x.File + num4;
            num2 = (int) num6 * 1996307599 ^ 1210575326;
            continue;
          case 8:
            int num8 = !this.addMove(a1, b1, x) ? -83808843 : (num8 = -2094736);
            num2 = num8 ^ (int) num6 * 1144234390;
            continue;
          case 9:
            goto label_3;
          case 10:
            num2 = -234936113;
            continue;
          case 11:
            num2 = -908647833;
            continue;
          case 12:
            num2 = -272970624;
            continue;
          case 13:
            num2 = (int) num6 * 274131491 ^ 1123891465;
            continue;
          case 14:
            int num9 = flag2 ? 2042024614 : (num9 = 831300864);
            num2 = num9 ^ (int) num6 * 1109852541;
            continue;
          case 15:
            ++num4;
            num2 = (int) num6 * -143912489 ^ -129156404;
            continue;
          case 16:
            num2 = -1464463486;
            continue;
          case 17:
            ++num1;
            num2 = -1307553354;
            continue;
          case 18:
            flag1 = num3 < 8;
            num2 = -1471111991;
            continue;
          case 19:
            flag3 = num1 < 8;
            num2 = -2113370566;
            continue;
          case 20:
            int b4 = x.Rank - num4;
            flag2 = this.addMove(a3, b4, x);
            num2 = (int) num6 * 902632739 ^ -921697159;
            continue;
          case 21:
            num3 = 1;
            num2 = -1379236;
            continue;
          case 22:
            ++num3;
            num2 = (int) num6 * -1257938665 ^ -604425931;
            continue;
          case 23:
            num2 = -1505559736;
            continue;
          case 24:
            a2 = x.File - num3;
            num2 = (int) num6 * -974013266 ^ -2099364805;
            continue;
          case 25:
            int num10 = !flag1 ? 631132718 : (num10 = 219153956);
            num2 = num10 ^ (int) num6 * 834360800;
            continue;
          case 26:
            int num11;
            num2 = num11 = num4 >= 8 ? -934258740 : (num11 = -739287934);
            continue;
          case 27:
            b2 = x.Rank + num5;
            num2 = (int) num6 * -1992208374 ^ 990323303;
            continue;
          case 28:
            int num12 = flag3 ? -515198284 : (num12 = -959234760);
            num2 = num12 ^ (int) num6 * 712978318;
            continue;
          case 29:
            num2 = (int) num6 * 1698590283 ^ -1438923404;
            continue;
          case 30:
            b3 = x.Rank - num3;
            num2 = (int) num6 * 459849170 ^ -1318015352;
            continue;
          case 31:
            a1 = x.File + num1;
            b1 = x.Rank + num1;
            num2 = -676726271;
            continue;
          case 32:
            int num13;
            num2 = num13 = num5 >= 8 ? -1292636517 : (num13 = -1789823630);
            continue;
          case 33:
            num5 = 1;
            num2 = -2144923166;
            continue;
          case 34:
            ++num5;
            num2 = (int) num6 * 184725377 ^ 1236000315;
            continue;
          case 35:
            int num14 = this.addMove(a2, b3, x) ? 563884237 : (num14 = 165944792);
            num2 = num14 ^ (int) num6 * 1989936127;
            continue;
          case 36:
            goto label_1;
          default:
            goto label_39;
        }
      }
label_3:
      return;
label_39:;
    }

    private void handleKnight(Square x)
    {
      ChessPiece piece = x.Piece;
label_1:
      int num1 = -1270717729;
      while (true)
      {
        uint num2;
        Square sq;
        int Rank;
        bool flag1;
        bool isEmpty;
        int File;
        bool flag2;
        int[] numArray1;
        int[] numArray2;
        int index;
        int num3;
        switch ((num2 = (uint) (num1 ^ -45395772)) % 22U)
        {
          case 0:
            num1 = (int) num2 * 2145996944 ^ -1794657861;
            continue;
          case 1:
            num1 = -1187323237;
            continue;
          case 2:
            sq = this.board[File, Rank];
            isEmpty = sq.IsEmpty;
            num1 = -2145664579;
            continue;
          case 3:
            if (Rank >= 0)
            {
              num1 = (int) num2 * -1227196803 ^ -1541745463;
              continue;
            }
            break;
          case 4:
            num1 = -209172343;
            continue;
          case 5:
            File = x.File + numArray1[index];
            Rank = x.Rank + numArray2[index];
            num1 = (int) num2 * 791336346 ^ -1183715921;
            continue;
          case 6:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 1895814293 ^ -702499574;
            continue;
          case 7:
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206D‬⁪​‭⁪⁫⁮‫‍⁯‫‮⁯‫⁮‍‬⁮‎‫‍⁫‮⁫⁯‬⁬‫‬‍‌⁮‪‫​​⁮⁮‍‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray1 = numArray3;
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206D‬⁪​‭⁪⁫⁮‫‍⁯‫‮⁯‫⁮‍‬⁮‎‫‍⁫‮⁫⁯‬⁬‫‬‍‌⁮‪‫​​⁮⁮‍‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray2 = numArray4;
            index = 0;
            num1 = (int) num2 * -1556957 ^ 1841272442;
            continue;
          case 8:
            int num4 = flag2 ? 1256700534 : (num4 = 269475474);
            num1 = num4 ^ (int) num2 * 451502108;
            continue;
          case 9:
            int num5 = !isEmpty ? -283828361 : (num5 = -1267097632);
            num1 = num5 ^ (int) num2 * 1293796272;
            continue;
          case 10:
            num1 = (int) num2 * -267997459 ^ -1894086845;
            continue;
          case 11:
            int num6 = flag1 ? -991044892 : (num6 = -1649408894);
            num1 = num6 ^ (int) num2 * -751432894;
            continue;
          case 12:
            num1 = (int) num2 * -238743723 ^ -644158527;
            continue;
          case 13:
            if (File >= 0)
            {
              num1 = (int) num2 * 1222241910 ^ -922847773;
              continue;
            }
            break;
          case 14:
            goto label_1;
          case 15:
            int num7;
            num1 = num7 = sq.Piece.Color != x.Piece.Color ? -321191680 : (num7 = -1748313613);
            continue;
          case 16:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * -626365427 ^ 1659950400;
            continue;
          case 17:
            ++index;
            num1 = -295438901;
            continue;
          case 18:
            goto label_3;
          case 19:
            flag2 = index < 8;
            num1 = -782304640;
            continue;
          case 20:
            if (File <= 7)
            {
              num1 = (int) num2 * 1116215826 ^ -1306424557;
              continue;
            }
            break;
          case 21:
            num3 = Rank > 7 ? 1 : 0;
            goto label_7;
          default:
            goto label_29;
        }
        num3 = 1;
label_7:
        flag1 = num3 != 0;
        num1 = -71489883;
      }
label_3:
      return;
label_29:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
label_1:
      int num1 = -640545388;
      ChessPiece piece;
      Square sq;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1376317947)) % 5U)
        {
          case 0:
            sq = this.board[a, b];
            num1 = (int) num2 * 354379342 ^ -628540165;
            continue;
          case 1:
            piece = x.Piece;
            num1 = (int) num2 * 1631359583 ^ 1258426576;
            continue;
          case 2:
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * 331668897 ^ -1022918362;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
    }

    private bool addMove(int a, int b, Square x)
    {
      if (a < 0)
        goto label_24;
label_1:
      int num1 = -1502509444;
label_2:
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        UserAction kind;
        Square sq;
        bool flag3;
        ChessPiece piece;
        bool isEmpty;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1911270605)) % 30U)
        {
          case 1:
            if (x.Piece.Kind == Pieces.King)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 470283792 ^ 1286262383;
            continue;
          case 2:
            num3 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            break;
          case 3:
            int num4 = isEmpty ? 1593127397 : (num4 = 1216336662);
            num1 = num4 ^ (int) num2 * 1125038215;
            continue;
          case 4:
            int num5 = !flag2 ? -149676182 : (num5 = -662391628);
            num1 = num5 ^ (int) num2 * -1748033835;
            continue;
          case 5:
            num1 = (int) num2 * 481907524 ^ -841576479;
            continue;
          case 6:
            this.KingColorOnCheck = sq.Piece.Color;
            num1 = (int) num2 * 1265757954 ^ -656343411;
            continue;
          case 7:
            num1 = (int) num2 * 1900177146 ^ 217391385;
            continue;
          case 8:
            num1 = (int) num2 * -1512350553 ^ 888081953;
            continue;
          case 9:
            flag1 = true;
            num1 = (int) num2 * -2080072681 ^ -27933195;
            continue;
          case 10:
            num1 = (int) num2 * -665442888 ^ -1926374528;
            continue;
          case 11:
            num1 = (int) num2 * -1335709677 ^ 1143740029;
            continue;
          case 12:
            this.IsOnCheck = true;
            num1 = (int) num2 * -493064667 ^ -398562183;
            continue;
          case 13:
            if (a <= 7)
            {
              num1 = (int) num2 * -2003429595 ^ 279458869;
              continue;
            }
            goto label_24;
          case 14:
            goto label_23;
          case 15:
            num1 = (int) num2 * 1553082270 ^ -1285052205;
            continue;
          case 16:
            num1 = (int) num2 * 1910609346 ^ 1238050689;
            continue;
          case 17:
            piece = x.Piece;
            sq = this.board[a, b];
            isEmpty = sq.IsEmpty;
            num1 = -1502814932;
            continue;
          case 18:
            flag3 = sq.Piece.Color != x.Piece.Color;
            num1 = -566790264;
            continue;
          case 19:
            flag1 = true;
            num1 = -703009793;
            continue;
          case 20:
            goto label_1;
          case 21:
            flag1 = false;
            num1 = -449266770;
            continue;
          case 22:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            flag1 = true;
            num1 = -1209956511;
            continue;
          case 23:
            int num6 = !flag3 ? -2045211094 : (num6 = -536923806);
            num1 = num6 ^ (int) num2 * -1233436218;
            continue;
          case 24:
            int num7 = sq.Piece.Kind == Pieces.King ? -1323627558 : (num7 = -1238050553);
            num1 = num7 ^ (int) num2 * -2117774647;
            continue;
          case 25:
            kind = UserAction.Capture;
            num1 = (int) num2 * -889891406 ^ 1352480685;
            continue;
          case 26:
            num1 = (int) num2 * -82454569 ^ 1381432811;
            continue;
          case 27:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 1150515992 ^ 1795091892;
            continue;
          case 28:
            num1 = -1553600593;
            continue;
          case 29:
            if (b >= 0)
            {
              num1 = (int) num2 * 249847941 ^ -239057518;
              continue;
            }
            goto label_24;
          default:
            goto label_38;
        }
        int num8;
        num1 = num8 = num3 != 0 ? -818981111 : (num8 = -1144166543);
      }
label_23:
      int num9 = b > 7 ? 1 : 0;
      goto label_25;
label_38:
      return flag1;
label_24:
      num9 = 1;
label_25:
      flag2 = num9 != 0;
      num1 = -1249687687;
      goto label_2;
    }

    static void \u206D‬⁪​‭⁪⁫⁮‫‍⁯‫‮⁯‫⁮‍‬⁮‎‫‍⁫‮⁫⁯‬⁬‫‬‍‌⁮‪‫​​⁮⁮‍‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
