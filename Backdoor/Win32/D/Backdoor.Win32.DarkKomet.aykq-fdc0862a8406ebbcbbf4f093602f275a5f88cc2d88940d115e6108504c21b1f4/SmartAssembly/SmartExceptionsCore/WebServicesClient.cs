// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.WebServicesClient
// Assembly: 5, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D96FE905-3567-4568-B7BF-8C667D038E34
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.DarkKomet.aykq-fdc0862a8406ebbcbbf4f093602f275a5f88cc2d88940d115e6108504c21b1f4.exe

using SmartAssembly.Delegates;
using System;
using System.Net;

namespace SmartAssembly.SmartExceptionsCore
{
  internal sealed class WebServicesClient
  {
    internal static readonly string UploadReportServer;
    private string licenseID;
    private string m_ServerURL;
    private IWebProxy proxy;
    [NonSerialized]
    internal static GetString \u0018;

    public void SetProxy(IWebProxy proxy) => this.proxy = proxy;

    public void LoginToServer(StringCallback whenDone)
    {
      if (this.m_ServerURL == null)
      {
        try
        {
          UploadReportLoginService reportLoginService = new UploadReportLoginService();
          if (this.proxy != null)
            reportLoginService.Proxy = this.proxy;
          this.m_ServerURL = reportLoginService.GetServerURL(this.licenseID);
          if (this.m_ServerURL.Length == 0)
            throw new ApplicationException(WebServicesClient.\u0018(1290));
          if (this.m_ServerURL == WebServicesClient.\u0018(1331))
            this.m_ServerURL = WebServicesClient.UploadReportServer;
        }
        catch (Exception ex)
        {
          whenDone(WebServicesClient.\u0018(1340) + ex.Message);
          return;
        }
      }
      whenDone(this.m_ServerURL.StartsWith(WebServicesClient.\u0018(1193)) ? this.m_ServerURL : WebServicesClient.\u0018(1135));
    }

    public void Upload(
      byte[] data,
      string email,
      string appFriendlyName,
      string buildFriendlyNumber,
      StringCallback whenDone)
    {
      try
      {
        ReportingService reportingService1 = new ReportingService(this.m_ServerURL);
        ReportingService reportingService2;
        if (true)
          reportingService2 = reportingService1;
        if (this.proxy != null)
          reportingService2.Proxy = this.proxy;
        whenDone(reportingService2.UploadReport2(this.licenseID, data, email, appFriendlyName, buildFriendlyNumber));
      }
      catch (Exception ex)
      {
        do
        {
          whenDone(WebServicesClient.\u0018(1357) + ex.Message);
        }
        while (false);
      }
    }

    public WebServicesClient(string licenseID) => this.licenseID = licenseID;

    static WebServicesClient()
    {
      SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (WebServicesClient));
      WebServicesClient.UploadReportServer = WebServicesClient.\u0018(1374);
    }
  }
}
