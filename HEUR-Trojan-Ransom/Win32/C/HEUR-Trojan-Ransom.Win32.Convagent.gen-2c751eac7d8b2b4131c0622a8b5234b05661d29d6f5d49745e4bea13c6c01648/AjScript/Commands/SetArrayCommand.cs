// Decompiled with JetBrains decompiler
// Type: AjScript.Commands.SetArrayCommand
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using AjScript.Expressions;
using AjScript.Language;
using System.Collections.Generic;

namespace AjScript.Commands
{
  public class SetArrayCommand : ICommand
  {
    private IExpression leftValue;
    private ICollection<IExpression> arguments;
    private IExpression expression;

    public SetArrayCommand(
      IExpression leftValue,
      ICollection<IExpression> arguments,
      IExpression expression)
    {
      this.leftValue = leftValue;
      this.arguments = arguments;
      this.expression = expression;
    }

    public IExpression LeftValue => this.leftValue;

    public IExpression Expression => this.expression;

    public ICollection<IExpression> Arguments => this.arguments;

    public void Execute(IContext context)
    {
      object obj1 = this.expression.Evaluate(context);
      List<object> objectList = new List<object>();
      foreach (IExpression expression in (IEnumerable<IExpression>) this.arguments)
        objectList.Add(expression.Evaluate(context));
      object[] array = objectList.ToArray();
      object obj2;
      if (ObjectUtilities.IsNumber(array[0]))
      {
        obj2 = ExpressionUtilities.ResolveToList(this.leftValue, context);
      }
      else
      {
        if (array.Length == 1)
        {
          ((IObject) ExpressionUtilities.ResolveToObject(this.leftValue, context)).SetValue(array[0].ToString(), obj1);
          return;
        }
        obj2 = (object) ExpressionUtilities.ResolveToDictionary(this.leftValue, context);
      }
      ObjectUtilities.SetIndexedValue(obj2, array, obj1);
    }
  }
}
