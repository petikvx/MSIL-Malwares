// Decompiled with JetBrains decompiler
// Type: System.Data.SQLite.SQLiteTransaction
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using System.Data.Common;
using System.Threading;

namespace System.Data.SQLite
{
  public sealed class SQLiteTransaction : DbTransaction
  {
    internal SQLiteConnection _cnn;
    internal long _version;
    private IsolationLevel _level;

    internal SQLiteTransaction(SQLiteConnection connection, bool deferredLock)
    {
      this._cnn = connection;
      this._version = this._cnn._version;
      this._level = deferredLock ? IsolationLevel.ReadCommitted : IsolationLevel.Serializable;
      if (this._cnn._transactionLevel++ != 0)
        return;
      try
      {
        using (SQLiteCommand command = this._cnn.CreateCommand())
        {
          if (!deferredLock)
            command.CommandText = "BEGIN IMMEDIATE";
          else
            command.CommandText = "BEGIN";
          command.ExecuteNonQuery();
        }
      }
      catch (SQLiteException ex)
      {
        --this._cnn._transactionLevel;
        this._cnn = (SQLiteConnection) null;
        throw;
      }
    }

    public override void Commit()
    {
      this.IsValid(true);
      if (this._cnn._transactionLevel - 1 == 0)
      {
        using (SQLiteCommand command = this._cnn.CreateCommand())
        {
          command.CommandText = "COMMIT";
          command.ExecuteNonQuery();
        }
      }
      --this._cnn._transactionLevel;
      this._cnn = (SQLiteConnection) null;
    }

    public SQLiteConnection Connection => this._cnn;

    protected override DbConnection DbConnection => (DbConnection) this.Connection;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.IsValid(false))
        this.IssueRollback();
      base.Dispose(disposing);
    }

    public override IsolationLevel IsolationLevel => this._level;

    public override void Rollback()
    {
      this.IsValid(true);
      this.IssueRollback();
    }

    internal void IssueRollback()
    {
      SQLiteConnection sqLiteConnection = Interlocked.Exchange<SQLiteConnection>(ref this._cnn, (SQLiteConnection) null);
      if (sqLiteConnection == null)
        return;
      using (SQLiteCommand command = sqLiteConnection.CreateCommand())
      {
        command.CommandText = "ROLLBACK";
        command.ExecuteNonQuery();
      }
      sqLiteConnection._transactionLevel = 0;
    }

    internal bool IsValid(bool throwError)
    {
      if (this._cnn == null)
      {
        if (throwError)
          throw new ArgumentNullException("No connection associated with this transaction");
        return false;
      }
      if (this._cnn._version != this._version)
      {
        if (throwError)
          throw new SQLiteException(21, "The connection was closed and re-opened, changes were already rolled back");
        return false;
      }
      if (this._cnn.State != ConnectionState.Open)
      {
        if (throwError)
          throw new SQLiteException(21, "Connection was closed");
        return false;
      }
      if (this._cnn._transactionLevel != 0 && !this._cnn._sql.AutoCommit)
        return true;
      this._cnn._transactionLevel = 0;
      if (throwError)
        throw new SQLiteException(21, "No transaction is active on this connection");
      return false;
    }
  }
}
