// Decompiled with JetBrains decompiler
// Type: coffee_machine_control.Functions.coffeeMachine
// Assembly: EnumBuil, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FBEB9EA3-01CE-4899-B996-D20A537C4F89
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\UDS-Trojan-PSW.MSIL.Agensla-b4a6d8c57af93785b6edeaf492420c868a4054140045c600f7fb9e36698fb366.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Net.Sockets;
using System.Text;

namespace coffee_machine_control.Functions
{
  public class coffeeMachine
  {
    private coffeeMachine.DevStates state;
    private int ID;
    private string IP;
    private string MAC;
    private string SSID;
    private string password;
    private int readDelay = 5000;
    private bool primeOn = false;
    private bool rfidOn = false;
    private Socket connection;
    private double weight = 0.0;
    private double totalDose = 0.0;
    private double fwVer = 0.0;
    private int totalMemSize = 0;
    private int usedMemSize = 0;
    private string animalEID = "";
    private string animalVID = "";
    private byte LED_GREEN_BLINK = 1;
    private byte LED_GREEN_STOP = 2;
    private byte LED_ALL_STOP = 5;
    private byte LED_BLEED_START = 6;
    private byte LED_BLEED_DONE = 7;
    private byte LED_BLUE_BLINK = 8;
    private byte LED_BLUE_STOP = 9;
    private byte LED_PURPLE_BLINK = 10;
    private byte LED_PURPLE_STOP = 11;
    private byte LED_YELLOW_BLINK = 12;
    private byte LED_YELLOW_STOP = 13;
    private byte LED_WHITE_BLINK = 14;
    private byte LED_WHITE_STOP = 15;
    private byte LED_INDIGO_BLINK = 16;
    private byte LED_INDIGO_STOP = 17;
    private byte LED_GREEN_ON = 18;
    private byte LED_GREEN_OFF = 19;
    private byte LED_RED_ON = 20;
    private byte LED_RED_OFF = 21;
    private byte LED_BLUE_ON = 22;
    private byte LED_BLUE_OFF = 23;
    private byte LED_PURPLE_ON = 24;
    private byte LED_PURPLE_OFF = 25;
    private byte LED_YELLOW_ON = 26;
    private byte LED_YELLOW_OFF = 27;
    private byte LED_INDIGO_ON = 28;
    private byte LED_INDIGO_OFF = 29;
    private byte LED_WHITE_ON = 30;
    private byte LED_WHITE_OFF = 31;
    private byte LED_RED_BLINK = 3;
    private byte LED_RED_STOP = 4;

    public coffeeMachine(Socket Connection, string IP, int ID)
    {
      this.connection = Connection;
      this.IP = IP;
      this.ID = ID;
      this.MAC = "";
      this.state = coffeeMachine.DevStates.STATE_SET_ID;
      this.SetupDevice();
    }

    public int getID() => this.ID;

    public string getIP() => this.IP;

    public string getMAC() => this.MAC;

    public string getSSID() => this.SSID;

    public string getPassword() => this.password;

    public int getReadDelay() => this.readDelay;

    public bool isPrimeOn() => this.primeOn;

    public bool isRFIDOn() => this.rfidOn;

    public string getFwVerString() => this.fwVer.ToString();

    public void readMsg()
    {
      while (true)
      {
        byte[] buffer = new byte[(int) byte.MaxValue];
        this.connection.Receive(buffer);
        Debug.WriteLine("--------New Msg-------------");
        Debug.WriteLine(BitConverter.ToString(buffer));
        this.processPacket(buffer, buffer.Length);
      }
    }

    public void setDateTime()
    {
      MemoryStream memoryStream = new MemoryStream();
      memoryStream.Write(BitConverter.GetBytes(DateTime.Now.Hour), 0, 1);
      memoryStream.Write(BitConverter.GetBytes(DateTime.Now.Minute), 0, 1);
      memoryStream.Write(BitConverter.GetBytes(DateTime.Now.Second), 0, 1);
      memoryStream.Write(BitConverter.GetBytes(DateTime.Now.Day), 0, 1);
      memoryStream.Write(BitConverter.GetBytes(DateTime.Now.Month), 0, 1);
      memoryStream.Write(BitConverter.GetBytes(DateTime.Now.Year % 100), 0, 1);
      this.connection.Send(new TcpPacket(this.IP, (byte) 2, (byte) 8, memoryStream.ToArray().Length, memoryStream.ToArray(), 100).getBuffer());
    }

    public void Prime()
    {
      if (this.rfidOn)
      {
        Debug.WriteLine("Prime Not Available During RFID Scanning");
      }
      else
      {
        this.primeOn = !this.primeOn;
        if (this.primeOn)
          this.setDeviceLight((int) this.LED_PURPLE_BLINK);
        else
          this.setDeviceLight((int) this.LED_PURPLE_STOP);
        this.connection.Send(new TcpPacket(this.IP, (byte) 4, (byte) 14, 0, (byte[]) null, 100).getBuffer());
      }
    }

    public void TurnRfidOn()
    {
      if (!this.primeOn)
      {
        this.rfidOn = true;
        this.connection.Send(new TcpPacket(this.IP, (byte) 3, (byte) 9, 0, (byte[]) null, 100).getBuffer());
      }
      else
        Debug.WriteLine("Info", "RFID Scanning Not Available During Prime");
    }

    public void TurnRfidOff()
    {
      this.rfidOn = false;
      this.connection.Send(new TcpPacket(this.IP, (byte) 3, (byte) 10, 0, (byte[]) null, 100).getBuffer());
    }

    public void setDeviceLight(int color)
    {
      MemoryStream memoryStream = new MemoryStream();
      memoryStream.Write(BitConverter.GetBytes(color), 0, 1);
      this.connection.Send(new TcpPacket(this.IP, (byte) 2, (byte) 15, memoryStream.ToArray().Length, memoryStream.ToArray(), this.readDelay).getBuffer());
    }

    private void SetupDevice()
    {
      Debug.WriteLine("Local(" + this.IP + "): " + Convert.ToString((object) this.state));
      switch (this.state)
      {
        case coffeeMachine.DevStates.STATE_SET_ID:
          try
          {
            MemoryStream memoryStream = new MemoryStream();
            memoryStream.Write(BitConverter.GetBytes(this.ID), 0, 1);
            this.connection.Send(new TcpPacket(this.IP, (byte) 2, (byte) 11, memoryStream.ToArray().Length, memoryStream.ToArray(), this.readDelay).getBuffer());
            break;
          }
          catch (Exception ex)
          {
            Debug.WriteLine("ID conf failed" + ex.GetBaseException()?.ToString());
            this.state = coffeeMachine.DevStates.STATE_DONE;
            break;
          }
        case coffeeMachine.DevStates.STATE_SET_TIME:
          try
          {
            MemoryStream memoryStream1 = new MemoryStream();
            memoryStream1.Write(BitConverter.GetBytes(DateTime.Now.Hour), 0, 1);
            MemoryStream memoryStream2 = memoryStream1;
            DateTime now = DateTime.Now;
            byte[] bytes1 = BitConverter.GetBytes(now.Minute);
            memoryStream2.Write(bytes1, 0, 1);
            MemoryStream memoryStream3 = memoryStream1;
            now = DateTime.Now;
            byte[] bytes2 = BitConverter.GetBytes(now.Second);
            memoryStream3.Write(bytes2, 0, 1);
            MemoryStream memoryStream4 = memoryStream1;
            now = DateTime.Now;
            byte[] bytes3 = BitConverter.GetBytes(now.Day);
            memoryStream4.Write(bytes3, 0, 1);
            MemoryStream memoryStream5 = memoryStream1;
            now = DateTime.Now;
            byte[] bytes4 = BitConverter.GetBytes(now.Month);
            memoryStream5.Write(bytes4, 0, 1);
            memoryStream1.Write(BitConverter.GetBytes(DateTime.Now.Year % 100), 0, 1);
            this.connection.Send(new TcpPacket(this.IP, (byte) 2, (byte) 8, memoryStream1.ToArray().Length, memoryStream1.ToArray(), this.readDelay).getBuffer());
            break;
          }
          catch (Exception ex)
          {
            Debug.WriteLine("Time conf failed: " + ex.GetBaseException()?.ToString());
            break;
          }
        case coffeeMachine.DevStates.STATE_GET_SYS_INFO:
          try
          {
            int num1 = 1;
            int num2 = 16;
            MemoryStream memoryStream = new MemoryStream();
            memoryStream.Write(BitConverter.GetBytes(num1), 0, 1);
            memoryStream.Write(BitConverter.GetBytes(num2), 0, 1);
            this.connection.Send(new TcpPacket(this.IP, (byte) 2, (byte) 9, memoryStream.ToArray().Length, memoryStream.ToArray(), this.readDelay).getBuffer());
            byte[] buffer = new byte[(int) byte.MaxValue];
            this.connection.Receive(buffer);
            Debug.WriteLine("--------New Msg-------------");
            Debug.WriteLine(BitConverter.ToString(buffer));
            this.processPacket(buffer, buffer.Length);
            break;
          }
          catch (Exception ex)
          {
            Debug.WriteLine("Sys conf failed: " + ex.GetBaseException()?.ToString());
            break;
          }
        case coffeeMachine.DevStates.STATE_GET_MEM_INFO:
          try
          {
            this.connection.Send(new TcpPacket(this.IP, (byte) 2, (byte) 10, 0, (byte[]) null, this.readDelay).getBuffer());
            byte[] buffer = new byte[(int) byte.MaxValue];
            this.connection.Receive(buffer);
            Debug.WriteLine("--------New Msg-------------");
            Debug.WriteLine(BitConverter.ToString(buffer));
            this.processPacket(buffer, buffer.Length);
            break;
          }
          catch (Exception ex)
          {
            Debug.WriteLine("Sys conf failed: " + ex.GetBaseException()?.ToString());
            break;
          }
        case coffeeMachine.DevStates.STATE_GET_ADAP_SETT:
          try
          {
            this.connection.Send(new TcpPacket(this.IP, (byte) 4, (byte) 13, 0, (byte[]) null, this.readDelay).getBuffer());
            byte[] buffer = new byte[(int) byte.MaxValue];
            this.connection.Receive(buffer);
            Debug.WriteLine("--------New Msg-------------");
            Debug.WriteLine(BitConverter.ToString(buffer));
            this.processPacket(buffer, buffer.Length);
            break;
          }
          catch (Exception ex)
          {
            Debug.WriteLine("Adap get failed: " + ex.GetBaseException()?.ToString());
            break;
          }
        case coffeeMachine.DevStates.STATE_DONE:
          Debug.WriteLine("Setup Device Finished");
          this.readMsg();
          break;
      }
      if (this.state < coffeeMachine.DevStates.STATE_DONE)
      {
        ++this.state;
        this.SetupDevice();
      }
      else
        this.state = coffeeMachine.DevStates.STATE_SET_ID;
    }

    private int convertByteArrayToInt(byte[] b, int offset) => (int) b[3 + offset] & (int) byte.MaxValue | ((int) b[2 + offset] & (int) byte.MaxValue) << 8 | ((int) b[1 + offset] & (int) byte.MaxValue) << 16 | ((int) b[offset] & (int) byte.MaxValue) << 24;

    private string convertBytesToHex(byte[] input)
    {
      try
      {
        StringBuilder stringBuilder = new StringBuilder();
        foreach (byte num in input)
          stringBuilder.AppendFormat("{0:x2}", (object) num);
        return stringBuilder.ToString();
      }
      catch (Exception ex)
      {
        return "Error converting: " + ex.GetBaseException()?.ToString();
      }
    }

    private void processPacket(byte[] buffer, int len)
    {
      TcpPacket tcpPacket = new TcpPacket(buffer, len);
      switch (tcpPacket.getId())
      {
        case 258:
          Debug.WriteLine("GET SSID 0102", this.convertBytesToHex(tcpPacket.getData()));
          break;
        case 260:
          Debug.WriteLine("GET password 0104", this.convertBytesToHex(tcpPacket.getData()));
          this.password = this.convertBytesToHex(tcpPacket.getData());
          break;
        case 521:
          byte[] data1 = tcpPacket.getData();
          Debug.WriteLine("SYS INFO 0209 (" + this.convertBytesToHex(data1).Length.ToString() + ")", this.convertBytesToHex(data1));
          this.fwVer = (double) ((int) data1[1] | (int) data1[0] << 8);
          if (this.convertBytesToHex(data1).Length > 12)
          {
            string hex = this.convertBytesToHex(data1);
            string[] strArray = new string[16];
            strArray[0] = ((int) hex[0] + (int) hex[1]).ToString();
            strArray[1] = ":";
            char ch = hex[2];
            strArray[2] = ch.ToString();
            ch = hex[3];
            strArray[3] = ch.ToString();
            strArray[4] = ":";
            ch = hex[4];
            strArray[5] = ch.ToString();
            ch = hex[5];
            strArray[6] = ch.ToString();
            strArray[7] = ":";
            ch = hex[6];
            strArray[8] = ch.ToString();
            ch = hex[7];
            strArray[9] = ch.ToString();
            strArray[10] = ":";
            ch = hex[8];
            strArray[11] = ch.ToString();
            ch = hex[9];
            strArray[12] = ch.ToString();
            strArray[13] = ":";
            ch = hex[10];
            strArray[14] = ch.ToString();
            ch = hex[11];
            strArray[15] = ch.ToString();
            this.MAC = string.Concat(strArray);
            break;
          }
          break;
        case 522:
          byte[] data2 = tcpPacket.getData();
          Debug.WriteLine("MEM INFO 020A", this.convertBytesToHex(data2));
          this.totalMemSize = this.convertByteArrayToInt(data2, 0);
          this.usedMemSize = this.convertByteArrayToInt(data2, 4);
          break;
        case 1036:
          Debug.WriteLine("RECEIVE TREATMENT 040C", this.convertBytesToHex(tcpPacket.getData()));
          break;
        case 1037:
          Debug.WriteLine("ADAPTER SETT 040D", this.convertBytesToHex(tcpPacket.getData()));
          this.setDeviceLight((int) this.LED_YELLOW_ON);
          break;
        case 1040:
          Debug.WriteLine("MEDIC CONFIG REQ 0410", this.convertBytesToHex(tcpPacket.getData()));
          break;
      }
    }

    private enum DevStates
    {
      STATE_SET_ID,
      STATE_SET_TIME,
      STATE_GET_SYS_INFO,
      STATE_GET_MEM_INFO,
      STATE_GET_ADAP_SETT,
      STATE_SET_FARM_INFO,
      STATE_DONE,
    }
  }
}
