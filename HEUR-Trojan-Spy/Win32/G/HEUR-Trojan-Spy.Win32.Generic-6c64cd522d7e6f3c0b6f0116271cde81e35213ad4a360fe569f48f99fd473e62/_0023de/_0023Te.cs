// Decompiled with JetBrains decompiler
// Type: #de.#Te
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using \u0023de;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Xml;

namespace \u0023de
{
  internal class \u0023Te : \u0023ge
  {
    private readonly Exception \u0023ve;
    private readonly Guid \u0023we;
    internal readonly char[] \u0023xe;
    internal readonly Dictionary<string, object> \u0023ye;
    private readonly Dictionary<string, \u0023Te.\u0023Xe> \u0023ze;
    internal XmlWriter \u0023Ae;
    private readonly List<\u00238e> \u0023Be;
    private readonly List<string> \u0023Ce;
    private readonly Dictionary<string, int> \u0023De;
    internal readonly List<\u0023Te.\u00230e> \u0023Ee;
    internal readonly Dictionary<string, int> \u0023Fe;
    private MemoryStream \u0023Ge;
    private byte[] \u0023He;
    internal \u0023af \u0023Ie;
    internal EventHandler \u0023Je;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0023Te([In] Guid obj0, [In] Exception obj1, [In] IWebProxy obj2)
    {
      int num1 = 4;
      if (\u0023Te.x0uOWUKE4YZOMEAZ2x8())
        goto label_4;
label_1:
      this.\u0023Ce = new List<string>();
      this.\u0023De = new Dictionary<string, int>();
      if (\u0023Te.x0uOWUKE4YZOMEAZ2x8())
      {
        num1 = 3;
        goto label_4;
      }
label_2:
      this.\u0023Ee = new List<\u0023Te.\u00230e>();
      this.\u0023Fe = new Dictionary<string, int>();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.\u0023we = obj0;
      this.\u0023ve = obj1;
      goto label_6;
label_3:
      int num2;
      num1 = num2;
label_4:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_1;
          case 1:
          case 7:
            goto label_7;
          case 2:
          case 5:
            goto label_9;
          case 3:
            goto label_2;
          case 4:
            goto label_8;
          case 6:
            goto label_6;
          case 8:
            goto label_10;
          default:
            num1 = 6;
            continue;
        }
      }
label_10:
      return;
label_8:
      this.\u0023xe = new char[0];
      num2 = 7;
      goto label_3;
label_9:
      switch ("ASCII".ToUpper())
      {
        case "ASCII":
          this.\u0023xe = new char[62]
          {
            'a',
            'b',
            'c',
            'd',
            'e',
            'f',
            'g',
            'h',
            'i',
            'j',
            'k',
            'l',
            'm',
            'n',
            'o',
            'p',
            'q',
            'r',
            's',
            't',
            'u',
            'v',
            'w',
            'x',
            'y',
            'z',
            'A',
            'B',
            'C',
            'D',
            'E',
            'F',
            'G',
            'H',
            'I',
            'J',
            'K',
            'L',
            'M',
            'N',
            'O',
            'P',
            'Q',
            'R',
            'S',
            'T',
            'U',
            'V',
            'W',
            'X',
            'Y',
            'Z',
            '0',
            '1',
            '2',
            '3',
            '4',
            '5',
            '6',
            '7',
            '8',
            '9'
          };
          return;
        case "UNICODE":
          this.\u0023xe = new char[58]
          {
            '\u0001',
            '\u0002',
            '\u0003',
            '\u0004',
            '\u0005',
            '\u0006',
            '\a',
            '\b',
            '\u000E',
            '\u000F',
            '\u0010',
            '\u0011',
            '\u0012',
            '\u0013',
            '\u0014',
            '\u0015',
            '\u0016',
            '\u0017',
            '\u0018',
            '\u0019',
            '\u001A',
            '\u001B',
            '\u001C',
            '\u001D',
            '\u001E',
            '\u001F',
            '\u007F',
            '\u0080',
            '\u0081',
            '\u0082',
            '\u0083',
            '\u0084',
            '\u0086',
            '\u0087',
            '\u0088',
            '\u0089',
            '\u008A',
            '\u008B',
            '\u008C',
            '\u008D',
            '\u008E',
            '\u008F',
            '\u0090',
            '\u0091',
            '\u0092',
            '\u0093',
            '\u0094',
            '\u0095',
            '\u0096',
            '\u0097',
            '\u0098',
            '\u0099',
            '\u009A',
            '\u009B',
            '\u009C',
            '\u009D',
            '\u009E',
            '\u009F'
          };
          num2 = 8;
          goto label_3;
        case null:
          return;
        default:
          return;
      }
label_6:
      this.\u0023ee = obj2;
      if (true)
      {
        num1 = 2;
        goto label_4;
      }
label_7:
      this.\u0023ye = new Dictionary<string, object>();
      this.\u0023ze = new Dictionary<string, \u0023Te.\u0023Xe>();
      this.\u0023Be = new List<\u00238e>();
      num2 = 0;
      goto label_3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023Ke([In] \u00238e obj0, [In] FieldInfo obj1)
    {
      int num1 = 9;
      Type type;
      string str1;
      object obj2;
      string str2;
      string str3;
      string str4;
      \u00231g obj3;
      while (true)
      {
        int num2;
        StringBuilder stringBuilder1;
        int num3;
        string str5;
        string str6;
        switch (num1)
        {
          case 0:
            if (!(obj2 is IntPtr))
            {
              num1 = 3;
              continue;
            }
            goto case 11;
          case 1:
          case 8:
            str5 = obj1.Name;
            goto label_21;
          case 2:
            if (obj2 is char ch)
            {
              num3 = (int) ch;
              int num4 = 7;
              num1 = \u0023Te.HGlJMEKloR9xlNueP6n() ? num4 : num4;
              continue;
            }
            goto case 10;
          case 3:
label_7:
            if (obj2 is UIntPtr)
            {
              num2 = 11;
              break;
            }
            if (type.IsValueType)
            {
              num2 = 6;
              break;
            }
            goto label_64;
          case 4:
            if (obj2 is string)
              str1 = "System.String";
            if (str1 == null)
            {
              if (!type.IsPrimitive)
              {
                num2 = 0;
                break;
              }
              goto case 11;
            }
            else
              goto label_64;
          case 5:
            stringBuilder1.Append((char) obj2);
            stringBuilder1.Append("' ");
            goto label_6;
          case 6:
            if ((object) type.Module != (object) this.GetType().Module)
            {
              str1 = type.FullName;
              goto label_64;
            }
            else
              goto label_64;
          case 7:
            stringBuilder1 = new StringBuilder();
            if (num3 >= 32)
            {
              stringBuilder1.Append('\'');
              if (\u0023Te.x0uOWUKE4YZOMEAZ2x8())
              {
                num1 = 5;
                continue;
              }
              goto case 6;
            }
            else
              goto label_6;
          case 9:
            if ((object) obj1 != null)
            {
              if (!\u0023Te.HGlJMEKloR9xlNueP6n())
              {
                num1 = 8;
                continue;
              }
              goto case 1;
            }
            else
            {
              str5 = (string) null;
              goto label_21;
            }
          case 10:
          case 13:
            if (obj2 is bool)
              str2 = obj2.ToString().ToLower();
            if (str2 == null)
            {
              string str7 = \u0023\u0023.\u0023hl(obj2);
              if (str7.Length > 0)
              {
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.Append(obj2.ToString());
                stringBuilder2.Append(" (0x");
                stringBuilder2.Append(str7);
                stringBuilder2.Append(')');
                str2 = stringBuilder2.ToString();
                goto label_64;
              }
              else
              {
                str2 = obj2.ToString();
                goto label_64;
              }
            }
            else
              goto label_64;
          case 11:
            str1 = type.FullName;
            goto case 2;
          case 12:
            str6 = "Field";
            goto label_25;
          case 14:
            goto label_65;
          default:
            num2 = 2;
            break;
        }
label_2:
        num1 = num2;
        continue;
label_6:
        stringBuilder1.Append("(0x");
        stringBuilder1.Append(num3.ToString("x"));
        stringBuilder1.Append(')');
        str2 = stringBuilder1.ToString();
        if (true)
        {
          num1 = 13;
          continue;
        }
        goto label_7;
label_21:
        str3 = str5;
        if ((object) obj1 != null)
        {
          num2 = 12;
          goto label_2;
        }
        else
          str6 = "Object";
label_25:
        str4 = str6;
        obj2 = obj0.\u00236e;
        if (obj2 != null)
        {
          type = obj0.\u00236e.GetType();
          str1 = (string) null;
          str2 = (string) null;
          num2 = 4;
          goto label_2;
        }
        else
          break;
label_64:
        obj3 = new \u00231g(this.\u0023Ae, str4);
        num2 = 14;
        goto label_2;
      }
      using (new \u00231g(this.\u0023Ae, str4))
      {
        int num5;
        if ((object) obj1 != null)
        {
          if (obj1.IsStatic)
          {
            if (true)
            {
              num5 = 0;
              goto label_42;
            }
          }
          else
            goto label_44;
        }
        else
          goto label_34;
label_30:
        this.\u0023Ae.WriteAttributeString("Pointer", "1");
label_31:
        Type fieldType;
        if (fieldType.IsArray)
          this.\u0023Ae.WriteAttributeString("Rank", fieldType.GetArrayRank().ToString());
label_34:
        if (str3 != null)
        {
          this.\u0023Me(str3);
          num5 = 7;
          goto label_42;
        }
        else
          goto label_46;
label_41:
        int num6;
        num5 = num6;
label_42:
        while (true)
        {
          switch (num5)
          {
            case 0:
              goto label_36;
            case 1:
            case 4:
              goto label_44;
            case 2:
label_40:
              this.\u0023Oe(fieldType.GetElementType());
              if (!fieldType.IsByRef)
                break;
              goto case 3;
            case 3:
            case 5:
              this.\u0023Ae.WriteAttributeString("ByRef", "1");
              break;
            case 6:
              goto label_30;
            case 7:
              goto label_46;
            default:
              goto label_43;
          }
          if (fieldType.IsPointer)
          {
            if (!\u0023Te.HGlJMEKloR9xlNueP6n())
              num5 = 6;
            else
              goto label_40;
          }
          else
            goto label_31;
        }
label_36:
        this.\u0023Ae.WriteAttributeString("Static", "1");
        num6 = 4;
        goto label_41;
label_43:
        num6 = 5;
        goto label_41;
label_44:
        fieldType = obj1.FieldType;
        if ((object) fieldType == null || !fieldType.HasElementType)
        {
          this.\u0023Oe(fieldType);
          goto label_34;
        }
        else
        {
          num6 = 2;
          goto label_41;
        }
label_46:
        this.\u0023Ae.WriteAttributeString("Null", "1");
        return;
      }
label_65:
      try
      {
        int num7;
        if ((object) obj1 != null && obj1.IsStatic)
        {
          num7 = 5;
          goto label_83;
        }
        else
          goto label_74;
label_73:
        this.\u0023Ae.WriteAttributeString("Static", "1");
label_74:
        int num8;
        if (str1 == null)
        {
          if ((object) obj1 != null)
          {
            if (!\u0023Te.HGlJMEKloR9xlNueP6n())
            {
              num8 = 1;
              goto label_84;
            }
            else
              goto label_73;
          }
        }
        else
        {
          num7 = 2;
          goto label_83;
        }
label_77:
        this.\u0023Le(obj0);
        if (str3 == null)
          return;
        num8 = 7;
        goto label_84;
label_83:
        num8 = num7;
label_84:
        while (true)
        {
          switch (num8)
          {
            case 0:
            case 5:
              goto label_73;
            case 1:
            case 4:
              goto label_76;
            case 2:
              this.\u0023Oe(type);
              if (str3 != null)
              {
                this.\u0023Me(str3);
                if (true)
                {
                  num8 = 3;
                  continue;
                }
                goto label_88;
              }
              else
                goto label_79;
            case 3:
              goto label_79;
            case 6:
              goto label_67;
            case 7:
              goto label_88;
            default:
              num8 = 6;
              continue;
          }
        }
label_67:
        str2 = "{" + obj2 + "}";
label_68:
        if (str2 == null)
          str2 = "\"" + obj2 + "\"";
        this.\u0023Ae.WriteAttributeString("Value", \u0023\u0023.\u00234k(str2));
        return;
label_76:
        this.\u0023Oe(obj1.FieldType);
        goto label_77;
label_79:
        if (type.IsEnum)
          str2 = obj2.ToString();
        if (!(obj2 is Guid))
          goto label_68;
        else
          goto label_67;
label_88:
        this.\u0023Me(str3);
      }
      finally
      {
        ((IDisposable) obj3)?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Le([In] \u00238e obj0)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        int num3;
        object objB;
        int index;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_4;
            case 1:
              num3 = -1;
              index = 0;
              int num4 = 2;
              num2 = \u0023Te.HGlJMEKloR9xlNueP6n() ? num4 : num4;
              continue;
            case 2:
            case 3:
            case 5:
              do
              {
                for (; index < this.\u0023Be.Count; ++index)
                {
                  if (object.ReferenceEquals(this.\u0023Be[index].\u00236e, objB))
                  {
                    num3 = index;
                    goto label_1;
                  }
                }
              }
              while (false);
              num2 = 6;
              continue;
            case 4:
            case 6:
              goto label_1;
            case 7:
              goto label_14;
            default:
              goto label_12;
          }
        }
label_1:
        if (num3 == -1)
        {
          num3 = this.\u0023Be.Count;
          this.\u0023Be.Add(obj0);
        }
        this.\u0023Ae.WriteAttributeString("ID", num3.ToString());
        num1 = 7;
        continue;
label_4:
        objB = obj0.\u00236e;
        num1 = 1;
        continue;
label_12:
        num1 = 5;
      }
label_14:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023Me([In] string obj0)
    {
      int num1 = 3;
      int num2;
      while (true)
      {
        int num3 = num1;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 1:
              goto label_4;
            case 2:
            case 4:
              goto label_2;
            case 3:
              goto label_1;
            case 5:
              goto label_5;
            default:
              num3 = 4;
              continue;
          }
        }
label_1:
        num2 = \u0023\u0023.\u0023lj(obj0, this);
        num1 = 0;
        continue;
label_4:
        if (num2 == -1)
        {
          this.\u0023Ae.WriteAttributeString("Name", obj0);
          num1 = 5;
        }
        else
          break;
      }
label_2:
      this.\u0023Ae.WriteAttributeString("NameID", num2.ToString());
      return;
label_5:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static \u0023Te.\u00234e \u0023Ne([In] Type obj0)
    {
      int num1 = 2;
      \u0023Te.\u00234e obj;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              Assembly assembly = obj0.Assembly;
              obj.\u00230e = new \u0023Te.\u00230e(assembly.ManifestModule.ModuleVersionId.ToString("B"), assembly.FullName);
              num2 = 6;
              continue;
            case 1:
            case 5:
              goto label_1;
            case 2:
              goto label_8;
            case 4:
              obj.\u00231e = ((obj0.MetadataToken & 16777215) - 1).ToString();
              goto case 0;
            case 6:
              goto label_9;
            default:
              goto label_6;
          }
        }
label_1:
        if ((object) obj0 != null && (object) obj0.Assembly.GetType("SmartAssembly.Attributes.PoweredByAttribute") != null)
        {
          num1 = 4;
          continue;
        }
        break;
label_6:
        num1 = 0;
        continue;
label_8:
        obj = \u0023Te.\u00234e.\u00233e();
        num1 = 5;
      }
label_9:
      return obj;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023Oe([In] Type obj0)
    {
      if ((object) obj0 == null)
        return;
      try
      {
        \u0023Te.\u00234e obj = \u0023Te.\u0023Ne(obj0);
        int num1 = 0;
        string fullName;
        int count;
        while (true)
        {
          int num2 = num1;
          StringBuilder stringBuilder;
          string str1;
          while (true)
          {
            string name;
            switch (num2)
            {
              case 0:
                goto label_10;
              case 1:
              case 3:
                this.\u0023Ae.WriteAttributeString("TypeDefID", obj.\u00231e);
                num2 = 9;
                continue;
              case 2:
                if (!this.\u0023De.ContainsKey(fullName))
                {
                  stringBuilder = new StringBuilder();
                  name = obj0.Assembly.GetName().Name;
                  if (name.Length <= 0 || !(name != "mscorlib"))
                    break;
                  goto case 4;
                }
                else
                  goto label_3;
              case 4:
              case 6:
                stringBuilder.Append('[');
                stringBuilder.Append(name);
                stringBuilder.Append(']');
                break;
              case 5:
                goto label_18;
              case 7:
                goto label_20;
              case 8:
                goto label_9;
              case 9:
                goto label_15;
              case 10:
                goto label_26;
              default:
                num2 = 6;
                continue;
            }
            str1 = obj0.Namespace;
            num2 = 7;
          }
label_9:
          count = this.\u0023Ce.Count;
          this.\u0023Ce.Add(stringBuilder.ToString());
          this.\u0023De.Add(fullName, count);
          num1 = 10;
          continue;
label_10:
          if (!obj.\u00232e())
          {
            num1 = 3;
            continue;
          }
          fullName = obj0.FullName;
          num1 = 2;
          continue;
label_18:
          string str2;
          stringBuilder.Append(str2);
label_19:
          stringBuilder.Append(obj0.Name);
          num1 = 8;
          continue;
label_20:
          if (str1.Length > 0)
          {
            stringBuilder.Append(str1);
            stringBuilder.Append('.');
          }
          if (obj0.HasElementType)
            obj0 = obj0.GetElementType();
          int num3 = fullName.LastIndexOf("+");
          if (num3 > 0)
          {
            str2 = fullName.Substring(str1.Length + 1, num3 - str1.Length).Replace("+", "/");
            num1 = 5;
          }
          else
            goto label_19;
        }
label_3:
        count = this.\u0023De[fullName];
        goto label_26;
label_15:
        int num4 = \u0023\u0023.\u00235k(this, obj);
        if (num4 <= 0)
          return;
        this.\u0023Ae.WriteAttributeString("Assembly", num4.ToString());
        return;
label_26:
        this.\u0023Ae.WriteAttributeString("TypeName", count.ToString());
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal byte[] \u0023Pe()
    {
      int num1 = 6;
      if (true)
        goto label_155;
label_1:
      return this.\u0023He;
label_155:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            using (new \u00231g(this.\u0023Ae, "UnhandledExceptionReport"))
            {
              this.\u0023Ae.WriteAttributeString("AssemblyID", "{528C9DDA-94F5-4688-B6FB-056FFA07C362}".ToUpper());
              this.\u0023Ae.WriteAttributeString("DateTime", DateTime.Now.ToString("s"));
              this.\u0023Ae.WriteAttributeString("Path", \u0023\u0023.\u0023rj());
              if (this.\u0023we != Guid.Empty)
                this.\u0023Ae.WriteAttributeString("UserID", this.\u0023we.ToString("B"));
              this.\u0023Ae.WriteAttributeString("ReportID", Guid.NewGuid().ToString("B"));
              if (this.\u0023Ee.Count > 0)
                this.\u0023Ee.Clear();
              this.\u0023Ee.Add(new \u0023Te.\u00230e("{528C9DDA-94F5-4688-B6FB-056FFA07C362}", string.Empty));
              if (this.\u0023Fe.Count > 0)
                this.\u0023Fe.Clear();
              this.\u0023Fe.Add("{528C9DDA-94F5-4688-B6FB-056FFA07C362}", 0);
              using (new \u00231g(this.\u0023Ae, "Assemblies"))
              {
                Assembly assembly1 = \u0023\u0023.\u0023Gj();
                foreach (Assembly assembly2 in \u0023\u0023.\u0023Cj(this))
                {
                  if ((object) assembly2 != null)
                  {
                    using (new \u00231g(this.\u0023Ae, "Assembly"))
                    {
                      try
                      {
                        this.\u0023Ae.WriteAttributeString("Name", assembly2.FullName);
                        this.\u0023Ae.WriteAttributeString("CodeBase", assembly2.CodeBase);
                        if ((object) assembly2 == (object) assembly1)
                          this.\u0023Ae.WriteAttributeString("This", "1");
                      }
                      catch
                      {
                      }
                    }
                  }
                }
              }
              using (new \u00231g(this.\u0023Ae, "CustomProperties"))
              {
                if (this.\u0023ye != null)
                {
                  if (this.\u0023ye.Count > 0)
                  {
                    using (Dictionary<string, object>.KeyCollection.Enumerator enumerator = this.\u0023ye.Keys.GetEnumerator())
                    {
label_41:
                      while (enumerator.MoveNext())
                      {
                        string current = enumerator.Current;
                        using (new \u00231g(this.\u0023Ae, "CustomProperty"))
                        {
                          this.\u0023Ae.WriteAttributeString("Name", current);
                          int num3 = 3;
                          if (\u0023Te.x0uOWUKE4YZOMEAZ2x8())
                            goto label_33;
label_32:
                          string str = (string) this.\u0023ye[current];
                          goto label_35;
label_33:
                          while (true)
                          {
                            switch (num3)
                            {
                              case 0:
                              case 3:
                                goto label_32;
                              case 1:
                              case 2:
                                goto label_35;
                              case 4:
                                goto label_41;
                              default:
                                num3 = 2;
                                continue;
                            }
                          }
label_35:
                          if (str == null)
                          {
                            this.\u0023Ae.WriteAttributeString("Null", "1");
                            num3 = 4;
                            goto label_33;
                          }
                          else
                            this.\u0023Ae.WriteAttributeString("Value", "\"" + str + "\"");
                        }
                      }
                    }
                  }
                }
              }
              if (this.\u0023ze != null && this.\u0023ze.Count > 0)
              {
                using (new \u00231g(this.\u0023Ae, "AttachedFiles"))
                {
                  using (Dictionary<string, \u0023Te.\u0023Xe>.KeyCollection.Enumerator enumerator = this.\u0023ze.Keys.GetEnumerator())
                  {
label_62:
                    while (enumerator.MoveNext())
                    {
                      string current = enumerator.Current;
                      using (new \u00231g(this.\u0023Ae, "AttachedFile"))
                      {
                        this.\u0023Ae.WriteAttributeString("Key", current);
                        int num4 = 4;
                        \u0023Te.\u0023Xe xe;
                        while (true)
                        {
                          int num5 = num4;
                          while (true)
                          {
                            switch (num5)
                            {
                              case 0:
                              case 4:
                                xe = this.\u0023ze[current];
                                this.\u0023Ae.WriteAttributeString("FileName", xe.\u0023Ue);
                                num5 = 2;
                                continue;
                              case 1:
                              case 2:
                                goto label_54;
                              case 3:
                                goto label_53;
                              case 5:
                                goto label_62;
                              default:
                                goto label_57;
                            }
                          }
label_53:
                          this.\u0023Ae.WriteAttributeString("Error", xe.\u0023We);
                          num4 = 5;
                          continue;
label_54:
                          this.\u0023Ae.WriteAttributeString("Length", xe.\u0023od.ToString());
                          if (xe.\u0023We.Length <= 0)
                            break;
                          goto label_53;
label_57:
                          num4 = 3;
                        }
                        this.\u0023Ae.WriteAttributeString("Data", xe.\u0023Ve);
                      }
                    }
                  }
                }
              }
              using (new \u00231g(this.\u0023Ae, "SystemInformation"))
              {
                try
                {
                  this.\u0023Ae.WriteElementString("NETVersion", Environment.Version.ToString());
                  this.\u0023Ae.WriteElementString("OSVersion", Environment.OSVersion.Version.ToString());
                  this.\u0023Ae.WriteElementString("OSPlatformID", Environment.OSVersion.Platform.ToString());
                  this.\u0023Ae.WriteElementString("ServicePack", \u0023\u0023.\u0023bk());
                  this.\u0023Ae.WriteElementString("ServerR2", \u0023\u0023.\u0023Ri() ? "1" : "0");
                  this.\u0023Ae.WriteElementString("X64", \u0023\u0023.\u0023Wk() ? "1" : "0");
                  this.\u0023Ae.WriteElementString("Workstation", \u0023\u0023.\u0023Mi() ? "1" : "0");
                }
                catch
                {
                }
              }
              List<Exception> exceptionList = new List<Exception>();
              for (Exception exception = this.\u0023ve; exception != null; exception = exception.InnerException)
                exceptionList.Add(exception);
              exceptionList.Reverse();
              using (new \u00231g(this.\u0023Ae, "StackTrace"))
              {
                foreach (Exception exception in exceptionList)
                {
                  try
                  {
                    \u0023\u0023.\u0023Sk(exception, this);
                    if (exception.Data.Contains((object) "SmartStackFrames"))
                    {
                      ICollection collection = (ICollection) exception.Data[(object) "SmartStackFrames"];
                      int count = collection.Count;
                      int num6 = 0;
                      foreach (object obj1 in (IEnumerable) collection)
                      {
                        try
                        {
                          Type type = obj1.GetType();
                          ++num6;
                          if (num6 > 100 && num6 == count - 100)
                          {
                            using (new \u00231g(this.\u0023Ae, "RemovedFrames"))
                              this.\u0023Ae.WriteAttributeString("TotalFramesCount", count.ToString());
                          }
                          else
                          {
                            if (num6 > 100)
                            {
                              if (num6 <= count - 100)
                                continue;
                            }
                            int num7 = (int) type.GetField("MethodID").GetValue(obj1);
                            int num8 = (int) type.GetField("ILOffset").GetValue(obj1);
                            int num9 = (int) type.GetField("ExceptionStackDepth").GetValue(obj1);
                            object[] objArray = (object[]) type.GetField("Objects").GetValue(obj1);
                            \u0023Te.\u00234e obj2 = \u0023Te.\u0023Ne(type);
                            if (!obj2.\u00232e())
                            {
                              using (new \u00231g(this.\u0023Ae, "StackFrame"))
                              {
                                this.\u0023Ae.WriteAttributeString("MethodID", num7.ToString());
                                this.\u0023Ae.WriteAttributeString("ExceptionStackDepth", num9.ToString());
                                int num10 = \u0023\u0023.\u00235k(this, obj2);
                                if (num10 > 0)
                                  this.\u0023Ae.WriteAttributeString("Assembly", num10.ToString());
                                if (num8 != -1)
                                  this.\u0023Ae.WriteAttributeString("ILOffset", num8.ToString());
                                foreach (object obj3 in objArray)
                                {
                                  try
                                  {
                                    this.\u0023Ke(new \u00238e(obj3, true), (FieldInfo) null);
                                  }
                                  catch
                                  {
                                  }
                                }
                              }
                            }
                          }
                        }
                        catch
                        {
                        }
                      }
                    }
                  }
                  catch
                  {
                  }
                }
              }
              this.\u0023Qe();
              using (new \u00231g(this.\u0023Ae, "TypeNames"))
              {
                this.\u0023Ae.WriteAttributeString("Count", this.\u0023Ce.Count.ToString());
                for (int index = 0; index < this.\u0023Ce.Count; ++index)
                {
                  string str;
                  try
                  {
                    str = this.\u0023Ce[index].ToString();
                  }
                  catch (Exception ex)
                  {
                    str = '"'.ToString() + ex.Message + (object) '"';
                  }
                  this.\u0023Ae.WriteElementString("TypeName", str);
                }
              }
              using (new \u00231g(this.\u0023Ae, "AssemblyIDs"))
              {
                this.\u0023Ae.WriteAttributeString("Count", this.\u0023Ee.Count.ToString());
label_142:
                for (int index = 0; index < this.\u0023Ee.Count; ++index)
                {
                  using (new \u00231g(this.\u0023Ae, "AssemblyID"))
                  {
                    \u0023Te.\u00230e obj = this.\u0023Ee[index];
                    int num11 = 2;
                    while (true)
                    {
                      int num12 = num11;
                      while (true)
                      {
                        switch (num12)
                        {
                          case 0:
                          case 2:
                            this.\u0023Ae.WriteAttributeString("ID", obj.\u0023Ye);
                            goto case 1;
                          case 1:
                          case 3:
                            if (obj.\u0023Ze.Length > 0)
                            {
                              if (\u0023Te.x0uOWUKE4YZOMEAZ2x8())
                              {
                                num12 = 4;
                                continue;
                              }
                              goto label_137;
                            }
                            else
                              goto label_142;
                          case 4:
                            goto label_137;
                          default:
                            goto label_134;
                        }
                      }
label_134:
                      num11 = 3;
                    }
label_137:
                    this.\u0023Ae.WriteAttributeString("FullName", obj.\u0023Ze);
                  }
                }
              }
            }
            this.\u0023Ae.WriteEndDocument();
            num1 = 4;
            continue;
          case 1:
            goto label_1;
          case 2:
          case 5:
            this.\u0023Ae = (XmlWriter) new XmlTextWriter((Stream) this.\u0023Ge, (Encoding) new UTF8Encoding(false));
            this.\u0023Ae.WriteStartDocument();
            goto case 0;
          case 4:
            this.\u0023Ae.Flush();
            this.\u0023Ge.Flush();
            this.\u0023He = this.\u0023Ge.ToArray();
            num2 = 7;
            break;
          case 6:
            if (this.\u0023He == null)
            {
              this.\u0023Ge = new MemoryStream();
              if (\u0023Te.x0uOWUKE4YZOMEAZ2x8())
              {
                num1 = 5;
                continue;
              }
              goto case 0;
            }
            else
            {
              num2 = 1;
              break;
            }
          case 7:
            goto label_157;
          default:
            if (!\u0023Te.HGlJMEKloR9xlNueP6n())
            {
              num1 = 0;
              continue;
            }
            goto label_157;
        }
        num1 = num2;
      }
label_157:
      return this.\u0023He;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023Qe()
    {
      using (new \u00231g(this.\u0023Ae, "Objects"))
      {
        for (int index1 = 0; index1 < this.\u0023Be.Count; ++index1)
        {
          \u00238e obj1 = this.\u0023Be[index1];
          object obj2 = obj1.\u00236e;
          Type enumType = obj1.\u00235e;
          using (new \u00231g(this.\u0023Ae, "ObjectDef"))
          {
            this.\u0023Ae.WriteAttributeString("ID", index1.ToString());
            string str1 = (string) null;
            bool flag = true;
            char[] chArray = new char[1]{ ',' };
            foreach (string str2 in "".Split(chArray))
            {
              if (str2 != "" && enumType.FullName.StartsWith(str2))
              {
                flag = false;
                break;
              }
            }
            foreach (Attribute customAttribute in enumType.GetCustomAttributes(true))
            {
              string name = customAttribute.GetType().Name;
              if (!(name != "DoNotCaptureFieldsAttribute") || !(name != "DoNotCaptureAttribute"))
              {
                flag = false;
                break;
              }
            }
            if (flag)
            {
              try
              {
                str1 = obj2.ToString();
                int num1 = 0;
                while (true)
                {
                  int num2 = num1;
                  while (true)
                  {
                    switch (num2)
                    {
                      case 0:
                        if (str1 == enumType.FullName)
                        {
                          if (\u0023Te.x0uOWUKE4YZOMEAZ2x8())
                          {
                            num2 = 3;
                            continue;
                          }
                          goto label_17;
                        }
                        else if (!enumType.IsEnum)
                        {
                          if (obj2 is Guid)
                          {
                            str1 = "{" + str1 + "}";
                            if (true)
                            {
                              num2 = 5;
                              continue;
                            }
                            goto label_27;
                          }
                          else
                            goto label_25;
                        }
                        else
                          goto label_22;
                      case 1:
                      case 3:
                        goto label_17;
                      case 2:
                      case 4:
                      case 5:
                        goto label_27;
                      default:
                        goto label_20;
                    }
                  }
label_20:
                  num1 = 4;
                }
label_17:
                str1 = (string) null;
                goto label_27;
label_22:
                str1 = System.Enum.Format(enumType, obj2, "d");
                goto label_27;
label_25:
                str1 = "\"" + str1 + "\"";
              }
              catch
              {
              }
label_27:
              if (str1 != null)
                this.\u0023Ae.WriteAttributeString("Value", \u0023\u0023.\u00234k(str1));
            }
            if (enumType.HasElementType)
            {
              this.\u0023Oe(enumType.GetElementType());
              if (enumType.IsByRef)
                this.\u0023Ae.WriteAttributeString("ByRef", "1");
              if (enumType.IsPointer)
                this.\u0023Ae.WriteAttributeString("Pointer", "1");
              if (enumType.IsArray)
              {
                Array array = (Array) obj2;
                this.\u0023Ae.WriteAttributeString("Rank", array.Rank.ToString());
                StringBuilder stringBuilder = new StringBuilder();
                for (int dimension = 0; dimension < array.Rank; ++dimension)
                {
                  if (dimension > 0)
                    stringBuilder.Append(',');
                  stringBuilder.Append(array.GetLength(dimension));
                }
                this.\u0023Ae.WriteAttributeString("Length", stringBuilder.ToString());
                if (array.Rank == 1)
                {
                  int length = array.Length;
                  for (int index2 = 0; index2 < length; ++index2)
                  {
                    if (index2 == 10)
                    {
                      if (length > 16)
                        index2 = length - 5;
                    }
                    try
                    {
                      this.\u0023Ke(new \u00238e(array.GetValue(index2), false), (FieldInfo) null);
                    }
                    catch
                    {
                    }
                  }
                }
              }
            }
            else
            {
              this.\u0023Oe(enumType);
              if (obj1.\u00237e)
              {
                if (flag)
                {
                  try
                  {
                    if (obj2 is IEnumerable)
                    {
                      using (new \u00231g(this.\u0023Ae, "IEnumerable"))
                      {
                        int num3 = 0;
                        IEnumerator enumerator = ((IEnumerable) obj2).GetEnumerator();
                        try
                        {
label_63:
                          while (enumerator.MoveNext())
                          {
                            object current = enumerator.Current;
                            int num4 = 2;
                            while (true)
                            {
                              int num5 = num4;
                              while (true)
                              {
                                switch (num5)
                                {
                                  case 0:
                                  case 2:
                                    if (num3 > 20)
                                    {
                                      this.\u0023Ae.WriteElementString("More", string.Empty);
                                      if (!\u0023Te.HGlJMEKloR9xlNueP6n())
                                      {
                                        num5 = 3;
                                        continue;
                                      }
                                      goto label_71;
                                    }
                                    else
                                    {
                                      this.\u0023Ke(new \u00238e(current, false), (FieldInfo) null);
                                      goto case 4;
                                    }
                                  case 1:
                                  case 3:
                                    goto label_71;
                                  case 4:
                                    ++num3;
                                    int num6 = 5;
                                    num5 = \u0023Te.HGlJMEKloR9xlNueP6n() ? num6 : num6;
                                    continue;
                                  case 5:
                                    goto label_63;
                                  default:
                                    goto label_61;
                                }
                              }
label_61:
                              num4 = 4;
                            }
                          }
                        }
                        finally
                        {
                          if (enumerator is IDisposable disposable)
                            disposable.Dispose();
                        }
                      }
                    }
                  }
                  catch
                  {
                  }
label_71:
                  this.\u0023Re(obj1);
                }
              }
            }
          }
        }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023Re([In] \u00238e obj0)
    {
      int num1 = 1;
      if (true)
        goto label_23;
label_1:
      obj0 = new \u00238e(obj0.\u00236e, obj0.\u00235e.BaseType, obj0.\u00237e);
      if (\u0023Te.x0uOWUKE4YZOMEAZ2x8())
      {
        num1 = 4;
        goto label_23;
      }
label_2:
      FieldInfo fieldInfo;
      try
      {
        int num2;
        if (fieldInfo.IsLiteral)
          num2 = 4;
        else
          goto label_15;
label_8:
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_10;
            case 1:
            case 4:
            case 5:
            case 6:
              goto label_19;
            case 3:
              goto label_13;
            default:
              num2 = 0;
              continue;
          }
        }
label_10:
        bool flag = false;
        num2 = 3;
        goto label_8;
label_13:
        if (!flag)
        {
          if (!\u0023Te.HGlJMEKloR9xlNueP6n())
          {
            num2 = 6;
            goto label_8;
          }
          else
            goto label_19;
        }
        else
        {
          this.\u0023Ke(new \u00238e(fieldInfo.GetValue(obj0.\u00236e), false), fieldInfo);
          goto label_19;
        }
label_15:
        if (!fieldInfo.IsStatic || !fieldInfo.IsInitOnly)
        {
          flag = true;
          foreach (Attribute customAttribute in fieldInfo.GetCustomAttributes(true))
          {
            if (customAttribute.GetType().Name == "DoNotCaptureAttribute")
              goto label_10;
          }
          goto label_13;
        }
        else
        {
          num2 = 5;
          goto label_8;
        }
      }
      catch
      {
      }
label_19:
      int index;
      ++index;
label_20:
      FieldInfo[] fieldInfoArray;
      if (index < fieldInfoArray.Length)
      {
        fieldInfo = fieldInfoArray[index];
        if (false)
          return;
        num1 = 6;
      }
      else
        goto label_1;
label_23:
      FieldInfo[] fields;
      while (true)
      {
        int num3;
        switch (num1)
        {
          case 0:
          case 1:
            fields = obj0.\u00235e.GetFields(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
            num3 = 5;
            break;
          case 2:
          case 6:
            goto label_2;
          case 3:
            goto label_1;
          case 4:
            if ((object) obj0.\u00235e != null)
            {
              using (new \u00231g(this.\u0023Ae, "Field"))
              {
                this.\u0023Me("__base");
                this.\u0023Ae.WriteAttributeString("ID", this.\u0023Be.Count.ToString());
              }
              this.\u0023Be.Add(obj0);
              num3 = 7;
              break;
            }
            goto label_21;
          case 5:
            goto label_34;
          case 7:
            goto label_27;
          default:
            num3 = 3;
            break;
        }
        num1 = num3;
      }
label_27:
      return;
label_21:
      return;
label_34:
      fieldInfoArray = fields;
      index = 0;
      goto label_20;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal bool \u0023Se()
    {
      try
      {
        \u0023\u0023.\u0023bi((\u0023ge) this, \u0023yf.\u0023uf);
        byte[] numArray;
        try
        {
          numArray = this.\u0023Pe();
        }
        catch (Exception ex)
        {
          int num1 = -1;
          try
          {
            StackTrace stackTrace = new StackTrace(ex);
            int num2 = 2;
            StackFrame frame;
            while (true)
            {
              int num3 = num2;
              while (true)
              {
                switch (num3)
                {
                  case 0:
                  case 2:
                    goto label_5;
                  case 1:
                  case 3:
                    goto label_4;
                  case 4:
                    goto label_9;
                  default:
                    num3 = 3;
                    continue;
                }
              }
label_4:
              frame = stackTrace.GetFrame(stackTrace.FrameCount - 1);
              num2 = 4;
              continue;
label_5:
              if (stackTrace.FrameCount <= 0)
                goto label_11;
              else
                goto label_4;
            }
label_9:
            num1 = frame.GetILOffset();
          }
          catch
          {
          }
label_11:
          \u0023\u0023.\u0023bi((\u0023ge) this, \u0023yf.\u0023uf, string.Format("ERR 2006: {0} @ 0x{1:x4}", (object) ex.Message, (object) num1));
          return false;
        }
        \u0023ge.\u0023ue ue = new \u0023ge.\u0023ue("", "ffv", "v0.0.0.0 from 28/02/2018 06:56:19 a.m.");
        return \u0023\u0023.\u0023tl(numArray, (\u0023ge) this, ue);
      }
      catch (ThreadAbortException ex)
      {
        return false;
      }
      catch (Exception ex)
      {
        \u0023\u0023.\u0023zj(new \u00239e(ex), this);
        return false;
      }
    }

    internal static bool x0uOWUKE4YZOMEAZ2x8() => true;

    internal static bool HGlJMEKloR9xlNueP6n() => false;

    private struct \u0023Xe
    {
      public readonly string \u0023Ue;
      public readonly string \u0023Ve;
      public readonly string \u0023We;
      public readonly int \u0023od;
    }

    internal struct \u00230e
    {
      public readonly string \u0023Ye;
      public readonly string \u0023Ze;

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u00230e([In] string obj0, [In] string obj1)
      {
        this.\u0023Ye = obj0;
        this.\u0023Ze = obj1;
      }

      internal static bool Jhky8LKzK0RacwG5yfw() => true;

      internal static bool K8asoe5L2GYTk9KZtgi() => false;
    }

    internal struct \u00234e
    {
      public string \u00231e;
      public \u0023Te.\u00230e \u00230e;

      [SpecialName]
      [MethodImpl(MethodImplOptions.NoInlining)]
      public bool \u00232e() => this.\u00231e.Length == 0;

      [SpecialName]
      [MethodImpl(MethodImplOptions.NoInlining)]
      public static \u0023Te.\u00234e \u00233e() => new \u0023Te.\u00234e(string.Empty, string.Empty, string.Empty);

      [MethodImpl(MethodImplOptions.NoInlining)]
      private \u00234e([In] string obj0, [In] string obj1, [In] string obj2)
      {
        this.\u00231e = obj0;
        this.\u00230e = new \u0023Te.\u00230e(obj1, obj2);
      }

      internal static bool mWRGjf5KcEl9UkJTLYG() => true;

      internal static bool lfKgM955oJssqgvYxxs() => false;
    }
  }
}
