// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.Gecko.Апн
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;

namespace NoiseMe.Drags.App.Data.Gecko
{
  public static class Апн
  {
    public static нкрпар Create(byte[] dataToParse)
    {
      нкрпар нкрпар = new нкрпар();
      for (int index = 0; index < dataToParse.Length; ++index)
      {
        ггорол ггорол = (ггорол) dataToParse[index];
        int num = 0;
        switch (ггорол)
        {
          case ггорол.Integer:
            нкрпар.Objects.Add(new нкрпар()
            {
              ObjectType = ггорол.Integer,
              ObjectLength = (int) dataToParse[index + 1]
            });
            byte[] destinationArray1 = new byte[(int) dataToParse[index + 1]];
            int length1 = index + 2 + (int) dataToParse[index + 1] > dataToParse.Length ? dataToParse.Length - (index + 2) : (int) dataToParse[index + 1];
            Array.Copy((Array) dataToParse, index + 2, (Array) destinationArray1, 0, length1);
            нкрпар.Objects[нкрпар.Objects.Count - 1].ObjectData = destinationArray1;
            index = index + 1 + нкрпар.Objects[нкрпар.Objects.Count - 1].ObjectLength;
            break;
          case ггорол.OctetString:
            нкрпар.Objects.Add(new нкрпар()
            {
              ObjectType = ггорол.OctetString,
              ObjectLength = (int) dataToParse[index + 1]
            });
            byte[] destinationArray2 = new byte[(int) dataToParse[index + 1]];
            int length2 = index + 2 + (int) dataToParse[index + 1] > dataToParse.Length ? dataToParse.Length - (index + 2) : (int) dataToParse[index + 1];
            Array.Copy((Array) dataToParse, index + 2, (Array) destinationArray2, 0, length2);
            нкрпар.Objects[нкрпар.Objects.Count - 1].ObjectData = destinationArray2;
            index = index + 1 + нкрпар.Objects[нкрпар.Objects.Count - 1].ObjectLength;
            break;
          case ггорол.ObjectIdentifier:
            нкрпар.Objects.Add(new нкрпар()
            {
              ObjectType = ггорол.ObjectIdentifier,
              ObjectLength = (int) dataToParse[index + 1]
            });
            byte[] destinationArray3 = new byte[(int) dataToParse[index + 1]];
            int length3 = index + 2 + (int) dataToParse[index + 1] > dataToParse.Length ? dataToParse.Length - (index + 2) : (int) dataToParse[index + 1];
            Array.Copy((Array) dataToParse, index + 2, (Array) destinationArray3, 0, length3);
            нкрпар.Objects[нкрпар.Objects.Count - 1].ObjectData = destinationArray3;
            index = index + 1 + нкрпар.Objects[нкрпар.Objects.Count - 1].ObjectLength;
            break;
          case ггорол.Sequence:
            byte[] numArray;
            if (нкрпар.ObjectLength == 0)
            {
              нкрпар.ObjectType = ггорол.Sequence;
              нкрпар.ObjectLength = dataToParse.Length - (index + 2);
              numArray = new byte[нкрпар.ObjectLength];
            }
            else
            {
              нкрпар.Objects.Add(new нкрпар()
              {
                ObjectType = ггорол.Sequence,
                ObjectLength = (int) dataToParse[index + 1]
              });
              numArray = new byte[(int) dataToParse[index + 1]];
            }
            num = numArray.Length > dataToParse.Length - (index + 2) ? dataToParse.Length - (index + 2) : numArray.Length;
            Array.Copy((Array) dataToParse, index + 2, (Array) numArray, 0, numArray.Length);
            нкрпар.Objects.Add(Апн.Create(numArray));
            index = index + 1 + (int) dataToParse[index + 1];
            break;
        }
      }
      return нкрпар;
    }
  }
}
