// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BitGenerator, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=70e4c26ef2031892
// MVID: D3922F89-E00A-4D10-8BC9-9309D5539F14
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.nxii-31823040d8ccb20eab0b8653d01af370a6537017e69ead69f6f7b73d6ef7ac14.exe

using \u0005;
using \u0014;
using \u0016;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0005
{
  internal class \u0008 : \u0007
  {
    private static readonly Dictionary<Type, \u0012.\u0005> \u0001;

    [CompilerGenerated]
    [SpecialName]
    internal \u000F.\u0003 \u0001() => this.\u0001;

    [CompilerGenerated]
    [SpecialName]
    internal void \u0001([In] \u000F.\u0003 obj0) => this.\u0001 = obj0;

    public \u0008([In] Type obj0)
      : base(obj0)
    {
      base.\u0001 = \u0003.\u0005.\u0004;
      this.\u0001(\u0006.\u0001(obj0));
      this.\u0004 = true;
      \u0012.\u0005 obj;
      if (!\u0008.\u0001.TryGetValue(base.\u0001, out obj))
        return;
      base.\u0001 = obj;
    }

    static \u0008()
    {
      Dictionary<Type, \u0012.\u0005> dictionary = new Dictionary<Type, \u0012.\u0005>();
      // ISSUE: type reference
      dictionary[\u0004\u0002.\u0084\u0004(__typeref (byte[]))] = \u0012.\u0005.\u0003;
      // ISSUE: type reference
      Type key = \u0004\u0002.\u0084\u0004(__typeref (byte));
      if (true)
        goto label_2;
label_1:
      // ISSUE: type reference
      dictionary[\u0004\u0002.\u0084\u0004(__typeref (short))] = \u0012.\u0005.\u0002;
      // ISSUE: type reference
      dictionary[\u0004\u0002.\u0084\u0004(__typeref (int))] = \u0012.\u0005.\u0002;
      // ISSUE: type reference
      dictionary[\u0004\u0002.\u0084\u0004(__typeref (Decimal))] = \u0012.\u0005.\u0005;
      // ISSUE: type reference
      dictionary[\u0004\u0002.\u0084\u0004(__typeref (bool))] = \u0012.\u0005.\u000E;
      // ISSUE: type reference
      dictionary[\u0004\u0002.\u0084\u0004(__typeref (string))] = \u0012.\u0005.\u0004;
      // ISSUE: type reference
      dictionary[\u0004\u0002.\u0084\u0004(__typeref (DateTime))] = \u0012.\u0005.\u0006;
      // ISSUE: type reference
      dictionary[\u0004\u0002.\u0084\u0004(__typeref (DateTimeOffset))] = \u0012.\u0005.\u0007;
      // ISSUE: type reference
      dictionary[\u0004\u0002.\u0084\u0004(__typeref (float))] = \u0012.\u0005.\u0008;
      // ISSUE: type reference
      dictionary[\u0004\u0002.\u0084\u0004(__typeref (double))] = \u0012.\u0005.\u0008;
      \u0008.\u0001 = dictionary;
      return;
label_2:
      dictionary[key] = \u0012.\u0005.\u0002;
      goto label_1;
    }
  }
}
