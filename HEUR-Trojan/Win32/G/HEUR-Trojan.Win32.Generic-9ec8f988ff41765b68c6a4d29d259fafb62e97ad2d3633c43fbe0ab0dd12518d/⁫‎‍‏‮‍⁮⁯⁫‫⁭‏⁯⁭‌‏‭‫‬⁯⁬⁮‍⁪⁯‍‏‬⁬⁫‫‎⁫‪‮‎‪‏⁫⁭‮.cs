// Decompiled with JetBrains decompiler
// Type: ⁫‎‍‏‮‍⁮⁯⁫‫⁭‏⁯⁭‌‏‭‫‬⁯⁬⁮‍⁪⁯‍‏‬⁬⁫‫‎⁫‪‮‎‪‏⁫⁭‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

internal sealed class \u206B‎‍‏‮‍⁮⁯⁫‫⁭‏⁯⁭‌‏‭‫‬⁯⁬⁮‍⁪⁯‍‏‬⁬⁫‫‎⁫‪‮‎‪‏⁫⁭‮
{
  private const int \u200C​‏‬‍⁮​‭‏​⁮‍‌‮‌‍‬⁭‬‬​‫​‍⁭‎‭⁭‍⁮⁬⁯‏‬⁮⁬‬⁮⁮⁫‮ = 65521;
  private const int \u202B‪⁫⁬‭‎‌⁬⁭‏‭​‮‌‎‎‫⁯‪⁫‎⁫‫⁪⁬⁭‪​‭⁫‎‬‎⁯‍⁭⁯‭‭⁪‮ = 5552;

  internal long \u206A⁭⁯‎⁭‏‎‬‏⁫‮⁯⁮‏⁯‎‌‌‪⁯⁫‍‬‌‏‭‮⁫‎‮⁭‌‌⁬‍⁮⁭⁯⁫⁭‮(
    long _param1,
    byte[] _param2,
    int _param3,
    int _param4)
  {
    if (_param2 == null)
      return 1;
    long num1 = _param1 & (long) ushort.MaxValue;
    long num2 = _param1 >> 16 & (long) ushort.MaxValue;
    while (_param4 > 0)
    {
      int num3 = _param4 < 5552 ? _param4 : 5552;
      _param4 -= num3;
      for (; num3 >= 16; num3 -= 16)
      {
        long num4 = num1 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num5 = num2 + num4;
        long num6 = num4 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num7 = num5 + num6;
        long num8 = num6 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num9 = num7 + num8;
        long num10 = num8 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num11 = num9 + num10;
        long num12 = num10 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num13 = num11 + num12;
        long num14 = num12 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num15 = num13 + num14;
        long num16 = num14 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num17 = num15 + num16;
        long num18 = num16 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num19 = num17 + num18;
        long num20 = num18 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num21 = num19 + num20;
        long num22 = num20 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num23 = num21 + num22;
        long num24 = num22 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num25 = num23 + num24;
        long num26 = num24 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num27 = num25 + num26;
        long num28 = num26 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num29 = num27 + num28;
        long num30 = num28 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num31 = num29 + num30;
        long num32 = num30 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        long num33 = num31 + num32;
        num1 = num32 + (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
        num2 = num33 + num1;
      }
      if (num3 != 0)
      {
        do
        {
          num1 += (long) ((int) _param2[_param3++] & (int) byte.MaxValue);
          num2 += num1;
        }
        while (--num3 != 0);
      }
      num1 %= 65521L;
      num2 %= 65521L;
    }
    return num2 << 16 | num1;
  }
}
