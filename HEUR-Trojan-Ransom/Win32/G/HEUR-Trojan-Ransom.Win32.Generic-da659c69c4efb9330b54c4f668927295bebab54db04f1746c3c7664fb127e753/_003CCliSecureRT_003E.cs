// Decompiled with JetBrains decompiler
// Type: <CliSecureRT>
// Assembly: Compiled, Version=0.0.0.0, Culture=neutral
// MVID: BFDAA99F-1C6B-4B22-B790-8AF89B0BC2E0
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-da659c69c4efb9330b54c4f668927295bebab54db04f1746c3c7664fb127e753.exe

using System;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Threading;

internal class \u003CCliSecureRT\u003E
{
  private static bool inited;
  private static Assembly runtimeAssembly;

  [DllImport("kernel32.dll", CharSet = CharSet.Ansi)]
  [MethodImpl(MethodImplOptions.ForwardRef)]
  private static extern IntPtr LoadLibraryA([In] string obj0);

  [DllImport("kernel32.dll", CharSet = CharSet.Ansi)]
  [MethodImpl(MethodImplOptions.ForwardRef)]
  private static extern IntPtr GetProcAddress([In] IntPtr obj0, [In] string obj1);

  [DllImport("CliSecureRT.dll", CharSet = CharSet.Ansi)]
  [MethodImpl(MethodImplOptions.ForwardRef)]
  private static extern int _Initialize([In] IntPtr obj0);

  [DllImport("CliSecureRT64.dll", CharSet = CharSet.Ansi)]
  [MethodImpl(MethodImplOptions.ForwardRef)]
  private static extern int _Initialize64([In] IntPtr obj0);

  [DllImport("CliSecureRT.dll", CharSet = CharSet.Ansi)]
  [MethodImpl(MethodImplOptions.ForwardRef)]
  private static extern void _AtExit();

  [DllImport("CliSecureRT64.dll", EntryPoint = "_AtExit", CharSet = CharSet.Ansi)]
  [MethodImpl(MethodImplOptions.ForwardRef)]
  private static extern void _AtExit64();

  internal static IntPtr Load()
  {
    Type type;
    // ISSUE: type reference
    矩.pAAAAA\u003D\u003D((object) (type = 瞬.YAAAAA\u003D\u003D(__typeref (\u003CCliSecureRT\u003E))));
    try
    {
      Assembly assembly = 瞓.RgAAAA\u003D\u003D();
      string str1;
      string str2;
      if (矇.OwAAAA\u003D\u003D() == 4)
      {
        str1 = "c6691c1b-9433-4126-a34c-4c065aac84b6";
        str2 = "CliSecureRT";
      }
      else
      {
        str1 = "d6f78562-5ae4-450f-93f3-1fe954677811";
        str2 = "CliSecureRT64";
      }
      BinaryReader binaryReader = new BinaryReader((Stream) new GZipStream(矤.SQAAAA\u003D\u003D\u0025((object) assembly, str1), CompressionMode.Decompress));
      byte[] numArray = 矦.qgAAAA\u003D\u003D\u0025((object) binaryReader, 瞯.qwAAAA\u003D\u003D\u0025((object) binaryReader));
      string str3 = 矛.GgAAAA\u003D\u003D("{0}{1}\\", (object) 睾.VgAAAA\u003D\u003D(), (object) str1);
      DirectoryInfo directoryInfo = 矪.jwAAAA\u003D\u003D(str3);
      string path = 睺.AwAAAA\u003D\u003D(str3, str2, ".dll");
      if (!瞡.KwAAAA\u003D\u003D(path))
      {
        FileStream fileStream = File.OpenWrite(path);
        瞜.NQAAAA\u003D\u003D\u0025((object) fileStream, numArray, 0, numArray.Length);
        瞄.NgAAAA\u003D\u003D\u0025((object) fileStream);
        FileSystemAccessRule systemAccessRule = new FileSystemAccessRule((IdentityReference) new SecurityIdentifier("S-1-1-0"), FileSystemRights.ReadAndExecute, AccessControlType.Allow);
        FileSecurity fileSecurity = 矫.MAAAAA\u003D\u003D(path);
        矬.tgAAAA\u003D\u003D\u0025((object) fileSecurity, systemAccessRule);
        短.MQAAAA\u003D\u003D(path, fileSecurity);
      }
      return \u003CCliSecureRT\u003E.LoadLibraryA(path);
    }
    finally
    {
      Monitor.Exit((object) type);
    }
  }

  internal static int InitializeThroughDelegate([In] IntPtr obj0)
  {
    IntPtr procAddress = \u003CCliSecureRT\u003E.GetProcAddress(\u003CCliSecureRT\u003E.Load(), "_Initialize");
    // ISSUE: type reference
    return ((InitializeDelegate) 瞭.YgAAAA\u003D\u003D(procAddress, 瞬.YAAAAA\u003D\u003D(__typeref (InitializeDelegate))))(obj0);
  }

  internal static int InitializeThroughDelegate64([In] IntPtr obj0)
  {
    IntPtr procAddress = \u003CCliSecureRT\u003E.GetProcAddress(\u003CCliSecureRT\u003E.Load(), "_Initialize64");
    // ISSUE: type reference
    return ((InitializeDelegate) 瞭.YgAAAA\u003D\u003D(procAddress, 瞬.YAAAAA\u003D\u003D(__typeref (InitializeDelegate))))(obj0);
  }

  internal static void DomainUnload([In] object obj0, [In] EventArgs obj1)
  {
    if (矇.OwAAAA\u003D\u003D() == 4)
      \u003CCliSecureRT\u003E._AtExit();
    else
      \u003CCliSecureRT\u003E._AtExit64();
  }

  internal static void Initialize()
  {
    if (\u003CCliSecureRT\u003E.inited)
      return;
    StackTrace stackTrace = new StackTrace();
    if (stackTrace.FrameCount <= 1)
      return;
    RuntimeMethodHandle methodHandle = stackTrace.GetFrame(0).GetMethod().MethodHandle;
    if ((矇.OwAAAA\u003D\u003D() != 4 ? \u003CCliSecureRT\u003E.InitializeThroughDelegate64(methodHandle.Value) : \u003CCliSecureRT\u003E.InitializeThroughDelegate(methodHandle.Value)) == 1)
      AppDomain.CurrentDomain.DomainUnload += new EventHandler(\u003CCliSecureRT\u003E.DomainUnload);
    \u003CCliSecureRT\u003E.inited = true;
  }

  internal static void PostInitialize()
  {
  }
}
