// Decompiled with JetBrains decompiler
// Type: Image_Extract_v1._3.MP3Info
// Assembly: Image Extract v1.3, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 809EAF0B-1D0F-479C-8C72-C488EAD8971A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.ajas-c89aefbf9dfaae2ed24b7acf962d62a14816ca42c5bb3e2a0d3f9390eceaa633.exe

using Microsoft.VisualBasic.CompilerServices;
using System.IO;
using System.Text;

namespace Image_Extract_v1._3
{
  public class MP3Info
  {
    private string mFileName;

    public ID3V1 GetID3v1Tag(string FileName = "")
    {
      ID3V1 id3v1Tag = new ID3V1();
      if (Operators.CompareString(FileName, "", false) == 0)
        FileName = this.mFileName;
      FileStream input = new FileStream(FileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
      BinaryReader binaryReader = new BinaryReader((Stream) input);
      input.Seek((long) sbyte.MinValue, SeekOrigin.End);
      if (Operators.CompareString(this.ByteToString(binaryReader.ReadBytes(3)).ToUpper(), "TAG", false) == 0)
      {
        id3v1Tag.TagAvailable = true;
        ID3V1 id3V1 = id3v1Tag;
        id3V1.Title = this.ByteToString(binaryReader.ReadBytes(30)).Replace("\0", "");
        id3V1.Artist = this.ByteToString(binaryReader.ReadBytes(30)).Replace("\0", "");
        id3V1.Album = this.ByteToString(binaryReader.ReadBytes(30)).Replace("\0", "");
        id3V1.Year = this.ByteToString(binaryReader.ReadBytes(4)).Replace("\0", "");
        byte[] Expression = binaryReader.ReadBytes(30);
        if (Expression[28] == (byte) 0 & Expression[29] != (byte) 0)
        {
          id3V1.TagVersion = ID3V1.ID3Version.ID3V11;
          id3V1.Comment = this.ByteToString(Expression, Length: 28).Replace("\0", "");
          id3V1.Track = Expression[29];
        }
        else
        {
          id3V1.TagVersion = ID3V1.ID3Version.ID3V10;
          id3V1.Comment = this.ByteToString(Expression).Replace("\0", "");
          id3V1.Track = (byte) 0;
        }
        id3V1.Genre = binaryReader.ReadByte();
      }
      binaryReader.Close();
      input.Close();
      return id3v1Tag;
    }

    public void SetID3v1Tag(ID3V1 Tag, string FileName = "")
    {
      if (Operators.CompareString(FileName, "", false) == 0)
        FileName = this.mFileName;
      FileStream fileStream = new FileStream(FileName, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite);
      BinaryReader binaryReader = new BinaryReader((Stream) fileStream);
      fileStream.Seek((long) sbyte.MinValue, SeekOrigin.End);
      if (Operators.CompareString(this.ByteToString(binaryReader.ReadBytes(3)).ToUpper(), "TAG", false) == 0)
        fileStream.Seek(-3L, SeekOrigin.Current);
      else
        fileStream.Seek(0L, SeekOrigin.End);
      BinaryWriter binaryWriter = new BinaryWriter((Stream) fileStream);
      binaryWriter.Write("TAG".ToCharArray());
      binaryWriter.Write(Tag.Title.PadRight(30, char.MinValue).ToCharArray());
      binaryWriter.Write(Tag.Artist.PadRight(30, char.MinValue).ToCharArray());
      binaryWriter.Write(Tag.Album.PadRight(30, char.MinValue).ToCharArray());
      binaryWriter.Write(Tag.Year.PadRight(4, char.MinValue).ToCharArray());
      switch (Tag.TagVersion)
      {
        case ID3V1.ID3Version.ID3V10:
          binaryWriter.Write(Tag.Comment.PadRight(30, char.MinValue).ToCharArray());
          break;
        case ID3V1.ID3Version.ID3V11:
          binaryWriter.Write(Tag.Comment.PadRight(28, char.MinValue).ToCharArray());
          binaryWriter.Write(char.MinValue);
          binaryWriter.Write(Tag.Track);
          break;
      }
      binaryWriter.Write(Tag.Genre);
      binaryWriter.Flush();
      binaryWriter.Close();
      binaryReader.Close();
    }

    private string ByteToString(byte[] Expression, int Index = 0, int Length = 0)
    {
      if (Length == 0)
        Length = Expression.Length;
      return Encoding.Default.GetString(Expression, Index, Length);
    }
  }
}
