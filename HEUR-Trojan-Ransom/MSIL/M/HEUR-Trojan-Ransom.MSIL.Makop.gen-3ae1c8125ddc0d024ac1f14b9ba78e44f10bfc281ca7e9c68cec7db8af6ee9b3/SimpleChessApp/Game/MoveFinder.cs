// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: Yx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 400FF0AC-C9F5-4D3D-92AD-97AFF85F6668
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-3ae1c8125ddc0d024ac1f14b9ba78e44f10bfc281ca7e9c68cec7db8af6ee9b3.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b) => this.board = b;

    public void FindAllMoves()
    {
label_1:
      int num1 = 1084497355;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1089578320)) % 3U)
        {
          case 1:
            this.Clear();
            num1 = (int) num2 * 350855473 ^ 1140915930;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator1 = this.board.WhitePieces.Values.GetEnumerator();
      try
      {
label_8:
        int num3 = !enumerator1.MoveNext() ? 979034809 : (num3 = 1123940437);
        ChessPiece current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1089578320)) % 6U)
          {
            case 0:
              num3 = (int) num4 * -44171862 ^ -1908599072;
              continue;
            case 1:
              current = enumerator1.Current;
              num3 = 1767987561;
              continue;
            case 2:
              num3 = 1123940437;
              continue;
            case 4:
              goto label_8;
            case 5:
              this.FindMoveFrom(current.Current);
              num3 = (int) num4 * 1865454073 ^ -1994697973;
              continue;
            default:
              goto label_17;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_13:
        int num5 = 1074732763;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 1089578320)) % 3U)
          {
            case 1:
              num5 = (int) num6 * -1076659459 ^ -1639556744;
              continue;
            case 2:
              goto label_13;
            default:
              goto label_16;
          }
        }
label_16:;
      }
label_17:
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator2 = this.board.BlackPieces.Values.GetEnumerator();
      try
      {
label_24:
        int num7 = enumerator2.MoveNext() ? 1798648555 : (num7 = 919024200);
        ChessPiece current;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ 1089578320)) % 6U)
          {
            case 0:
              goto label_24;
            case 1:
              current = enumerator2.Current;
              num7 = 457692228;
              continue;
            case 3:
              num7 = (int) num8 * -1558151705 ^ -1222040519;
              continue;
            case 4:
              this.FindMoveFrom(current.Current);
              num7 = (int) num8 * -758027566 ^ 871875471;
              continue;
            case 5:
              num7 = 1798648555;
              continue;
            default:
              goto label_31;
          }
        }
      }
      finally
      {
        enumerator2.Dispose();
label_26:
        int num9 = 85293300;
        while (true)
        {
          uint num10;
          switch ((num10 = (uint) (num9 ^ 1089578320)) % 3U)
          {
            case 1:
              num9 = (int) num10 * -1997899410 ^ -71939791;
              continue;
            case 2:
              goto label_26;
            default:
              goto label_30;
          }
        }
label_30:;
      }
label_31:
      bool showAllMoves = this.board.ShowAllMoves;
label_32:
      int num11 = 475581297;
      while (true)
      {
        uint num12;
        switch ((num12 = (uint) (num11 ^ 1089578320)) % 4U)
        {
          case 0:
            goto label_34;
          case 1:
            int num13 = !showAllMoves ? 538906264 : (num13 = 2077155086);
            num11 = num13 ^ (int) num12 * 232922448;
            continue;
          case 2:
            this.HighLightMoveStyle();
            num11 = (int) num12 * -1477746347 ^ 1821448814;
            continue;
          case 3:
            goto label_32;
          default:
            goto label_28;
        }
      }
label_34:
      return;
label_28:;
    }

    public void FindMoveFrom(Square x)
    {
label_1:
      int num1 = -560483984;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1219158908)) % 17U)
        {
          case 0:
            goto label_1;
          case 1:
label_13:
            this.handleBishop(x);
            num1 = -1249352308;
            continue;
          case 2:
            switch (x.Piece.Kind)
            {
              case Pieces.Pawn:
                goto label_4;
              case Pieces.Knight:
                goto label_14;
              case Pieces.Bishop:
                goto label_13;
              case Pieces.Rook:
                goto label_11;
              case Pieces.King:
                goto label_8;
              case Pieces.Queen:
                goto label_10;
              default:
                num1 = (int) num2 * 782795852 ^ 1117080294;
                continue;
            }
          case 3:
label_4:
            this.handlePawn(x);
            num1 = -942030785;
            continue;
          case 4:
            num1 = (int) num2 * 1758950813 ^ -1204888524;
            continue;
          case 5:
label_11:
            this.handleRook(x);
            num1 = -348608768;
            continue;
          case 6:
label_10:
            this.handleQueen(x);
            num1 = -1249352308;
            continue;
          case 7:
            num1 = (int) num2 * 1392579933 ^ 817149358;
            continue;
          case 8:
            num1 = (int) num2 * 469855720 ^ -797773860;
            continue;
          case 9:
label_8:
            this.handleKing(x);
            num1 = -793792523;
            continue;
          case 10:
            num1 = (int) num2 * 2053027522 ^ 357497391;
            continue;
          case 11:
label_14:
            this.handleKnight(x);
            num1 = -1349609082;
            continue;
          case 12:
            goto label_3;
          case 13:
            num1 = (int) num2 * -1006248861 ^ -1168542243;
            continue;
          case 14:
            num1 = (int) num2 * -1897859728 ^ -291413028;
            continue;
          case 15:
            num1 = (int) num2 * 1793286629 ^ 1491051488;
            continue;
          case 16:
            num1 = (int) num2 * -1504346802 ^ 1149497366;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
label_1:
      int num1 = -539054192;
      while (true)
      {
        uint num2;
        int num3;
        bool flag1;
        int num4;
        bool flag2;
        bool flag3;
        int num5;
        int num6;
        int num7;
        bool flag4;
        bool flag5;
        Square square;
        bool flag6;
        bool isEmpty;
        bool flag7;
        int num8;
        bool flag8;
        bool flag9;
        int b;
        bool flag10;
        bool flag11;
        bool flag12;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num2 = (uint) (num1 ^ -171870629)) % 66U)
        {
          case 0:
            num9 = num6 < 8 ? 1 : 0;
            goto label_93;
          case 1:
            num7 = 0;
            num6 = 0;
            if (x.Piece.Color != PieceColor.White)
            {
              num1 = (int) num2 * 1169641679 ^ -531266282;
              continue;
            }
            num10 = 1;
            goto label_41;
          case 2:
            square = this.board[num7, num6];
            flag12 = !square.IsEmpty;
            num1 = (int) num2 * -2120701357 ^ -643636570;
            continue;
          case 3:
            num11 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_96;
          case 4:
            goto label_1;
          case 5:
            flag9 = this.board.lastPassantPawn == this.board[num4, x.Rank].Piece;
            num1 = (int) num2 * -268556208 ^ -2042737017;
            continue;
          case 6:
            this.addMove(num7, num6, x);
            num1 = (int) num2 * 1947716796 ^ -1175165577;
            continue;
          case 7:
            this.addCapture(num3, b, x, this.board[num3, x.Rank].Piece);
            num1 = (int) num2 * 284485313 ^ 357730810;
            continue;
          case 8:
            this.addMove(num7, num6, x);
            num1 = (int) num2 * 300463573 ^ 62175929;
            continue;
          case 9:
            num13 = this.board[num3, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_16;
          case 10:
            num10 = 6;
            goto label_41;
          case 11:
            int num19 = !flag11 ? 611643432 : (num19 = 1128042420);
            num1 = num19 ^ (int) num2 * -1083804291;
            continue;
          case 12:
            int num20 = !flag5 ? 975065600 : (num20 = 2038125571);
            num1 = num20 ^ (int) num2 * -1214280685;
            continue;
          case 13:
            num14 = num6 < 8 ? 1 : 0;
            goto label_82;
          case 14:
            num1 = (int) num2 * 110935677 ^ -113164538;
            continue;
          case 15:
            num6 = x.Rank + 2 * num5;
            this.addMove(num7, num6, x);
            num1 = (int) num2 * 1485429141 ^ -665449949;
            continue;
          case 16:
            num3 = x.File - 1;
            num4 = x.File + 1;
            flag4 = num3 >= 0;
            num1 = (int) num2 * -1196762377 ^ 936688486;
            continue;
          case 17:
            if (num6 >= 0)
            {
              num1 = (int) num2 * -1649280627 ^ 1981172923;
              continue;
            }
            goto label_62;
          case 18:
            square = this.board[num7, num6];
            num1 = (int) num2 * -1007364511 ^ -1069432316;
            continue;
          case 19:
            int num21 = !flag6 ? 1135154777 : (num21 = 1612745159);
            num1 = num21 ^ (int) num2 * -1300393455;
            continue;
          case 20:
            this.addMove(num7, num6, x);
            num1 = (int) num2 * -1696948099 ^ 1215394243;
            continue;
          case 21:
            num16 = -1;
            goto label_74;
          case 22:
            num1 = (int) num2 * -1429849742 ^ 240161842;
            continue;
          case 23:
            if (flag10)
            {
              num17 = 5;
              goto label_52;
            }
            else
            {
              num1 = (int) num2 * -577414103 ^ -1186946020;
              continue;
            }
          case 24:
            if (x.Piece.Color != PieceColor.White)
            {
              num1 = (int) num2 * 1334991574 ^ 153312706;
              continue;
            }
            num16 = 1;
            goto label_74;
          case 25:
            num7 = x.File;
            num6 = x.Rank + num5;
            if (num6 >= 0)
            {
              num1 = (int) num2 * -43620852 ^ -1877689487;
              continue;
            }
            num9 = 0;
            goto label_93;
          case 26:
            num1 = (int) num2 * -532893643 ^ -1848153735;
            continue;
          case 27:
            int num22 = !flag12 ? -229292002 : (num22 = -1933097666);
            num1 = num22 ^ (int) num2 * 1547738615;
            continue;
          case 28:
            num1 = -82939650;
            continue;
          case 29:
            int num23 = !isEmpty ? -1606470112 : (num23 = -1368290076);
            num1 = num23 ^ (int) num2 * 875620301;
            continue;
          case 30:
            if (this.board[num3, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num13 = 0;
              goto label_16;
            }
            else
            {
              num1 = (int) num2 * -134385608 ^ -440263848;
              continue;
            }
          case 31:
            isEmpty = square.IsEmpty;
            num1 = (int) num2 * -57474335 ^ 1917010481;
            continue;
          case 32:
            num1 = -1219010722;
            continue;
          case 33:
            int num24 = this.board[num3, x.Rank].Piece != null ? 212149025 : (num24 = 869331628);
            num1 = num24 ^ (int) num2 * -871715680;
            continue;
          case 34:
            int num25 = !flag2 ? -1849278214 : (num25 = -1489566458);
            num1 = num25 ^ (int) num2 * -151239728;
            continue;
          case 35:
            int num26 = this.board.lastPassantPawn == this.board[num3, x.Rank].Piece ? 8911467 : (num26 = 892174479);
            num1 = num26 ^ (int) num2 * -1568235929;
            continue;
          case 36:
            int num27;
            num1 = num27 = x.Rank == num8 ? -79723137 : (num27 = -725422617);
            continue;
          case 37:
            if (x.Rank == 4)
            {
              num1 = -534007662;
              continue;
            }
            num11 = 0;
            goto label_96;
          case 38:
            num17 = 2;
            goto label_52;
          case 39:
            flag6 = num4 < 8;
            num1 = -542564184;
            continue;
          case 40:
            num6 = x.Rank + num5;
            num1 = (int) num2 * 1298503824 ^ 1490520955;
            continue;
          case 41:
            num1 = (int) num2 * -1077148967 ^ 1701012837;
            continue;
          case 42:
            num18 = this.board[num4, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            break;
          case 43:
            num1 = (int) num2 * -1606423939 ^ 1738722836;
            continue;
          case 44:
            goto label_3;
          case 45:
            int num28 = flag4 ? 1227210030 : (num28 = 37594582);
            num1 = num28 ^ (int) num2 * -771157686;
            continue;
          case 46:
            flag8 = !square.IsEmpty;
            num1 = (int) num2 * -754050456 ^ 85998518;
            continue;
          case 47:
            int num29 = this.board[num4, x.Rank].Piece != null ? 257441687 : (num29 = 1656231971);
            num1 = num29 ^ (int) num2 * 550481895;
            continue;
          case 48:
            num6 = x.Rank + num5;
            if (num7 < 8)
            {
              num1 = (int) num2 * -718531415 ^ 1480965320;
              continue;
            }
            goto label_62;
          case 49:
            this.addCapture(num4, b, x, this.board[num4, x.Rank].Piece);
            num1 = (int) num2 * 800109475 ^ 1022542228;
            continue;
          case 50:
            num1 = -179374529;
            continue;
          case 51:
            if (this.board[num4, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num18 = 0;
              break;
            }
            num1 = (int) num2 * 282508397 ^ 1907191288;
            continue;
          case 52:
            num1 = (int) num2 * 1540026688 ^ -588183200;
            continue;
          case 53:
            if (num6 >= 0)
            {
              num1 = (int) num2 * 501397335 ^ -1818577699;
              continue;
            }
            goto label_81;
          case 54:
            int num30 = !flag3 ? 819115848 : (num30 = 1431347226);
            num1 = num30 ^ (int) num2 * 1962786730;
            continue;
          case 55:
            int num31 = !flag8 ? -1472716340 : (num31 = -1221390634);
            num1 = num31 ^ (int) num2 * 1495630211;
            continue;
          case 56:
            if (num7 >= 0)
            {
              num1 = (int) num2 * 1335384358 ^ 1149272004;
              continue;
            }
            goto label_81;
          case 57:
            num1 = -1873023407;
            continue;
          case 58:
            int num32 = flag9 ? -129633942 : (num32 = -1147716174);
            num1 = num32 ^ (int) num2 * 871445958;
            continue;
          case 59:
            num7 = x.File + 1;
            num1 = -1886202553;
            continue;
          case 60:
            int num33 = !flag7 ? -235065308 : (num33 = -1519728430);
            num1 = num33 ^ (int) num2 * 1393168507;
            continue;
          case 61:
            int num34 = !flag1 ? -1173413682 : (num34 = -1339608182);
            num1 = num34 ^ (int) num2 * 1175227073;
            continue;
          case 62:
            num12 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_34;
          case 63:
            square = this.board[num7, num6];
            num1 = (int) num2 * 1034165916 ^ -1861965843;
            continue;
          case 64:
            num7 = x.File - 1;
            num1 = -515705087;
            continue;
          case 65:
            num15 = num6 < 8 ? 1 : 0;
            goto label_63;
          default:
            goto label_100;
        }
        flag2 = num18 != 0;
        num1 = -471747693;
        continue;
label_16:
        flag3 = num13 != 0;
        num1 = -1111425439;
        continue;
label_34:
        bool flag13 = num12 != 0;
        num1 = -1910391582;
        continue;
label_41:
        num8 = num10;
        num1 = -1988909223;
        continue;
label_52:
        b = num17;
        flag11 = flag10 | flag13;
        num1 = -1129276426;
        continue;
label_62:
        num15 = 0;
label_63:
        flag1 = num15 != 0;
        num1 = -1949024662;
        continue;
label_74:
        num5 = num16;
        num1 = -517933814;
        continue;
label_81:
        num14 = 0;
label_82:
        flag7 = num14 != 0;
        num1 = -525880779;
        continue;
label_93:
        flag5 = num9 != 0;
        num1 = -2141709647;
        continue;
label_96:
        flag10 = num11 != 0;
        if (x.Rank != 3)
        {
          num12 = 0;
          goto label_34;
        }
        else
          num1 = -840933345;
      }
label_3:
      return;
label_100:;
    }

    private void handleQueen(Square x)
    {
      this.handleRook(x);
      this.handleBishop(x);
    }

    private void handleKing(Square x)
    {
label_1:
      int num1 = -1433891883;
      bool canCastleQueenSide;
      bool canCastleKingSide1;
      bool flag;
      bool canCastleKingSide2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -757225115)) % 29U)
        {
          case 0:
            flag = x.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -1629905825 ^ -243190536;
            continue;
          case 1:
            this.addMove(x.File - 1, x.Rank - 1, x);
            this.addMove(x.File + 1, x.Rank, x);
            this.addMove(x.File - 1, x.Rank, x);
            this.addMove(x.File, x.Rank + 1, x);
            num1 = (int) num2 * 1550948763 ^ 1331593451;
            continue;
          case 2:
            num1 = -367938919;
            continue;
          case 3:
            canCastleQueenSide = this.board.BlackCanCastleQueenSide;
            num1 = -284136146;
            continue;
          case 4:
            num1 = (int) num2 * -791215475 ^ 904795426;
            continue;
          case 5:
            int num3 = canCastleKingSide1 ? -1649532569 : (num3 = -919987954);
            num1 = num3 ^ (int) num2 * -1187956353;
            continue;
          case 6:
            int num4 = canCastleKingSide2 ? -83354730 : (num4 = -2130106141);
            num1 = num4 ^ (int) num2 * -37276083;
            continue;
          case 7:
            this.addMove(x.File + 1, x.Rank + 1, x);
            num1 = (int) num2 * 1932631336 ^ 406582391;
            continue;
          case 8:
            num1 = (int) num2 * -898087215 ^ -1580136936;
            continue;
          case 9:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -1849556761 ^ -1074443785;
            continue;
          case 10:
            num1 = (int) num2 * -1476099955 ^ -606783447;
            continue;
          case 11:
            int num5 = flag ? -8640296 : (num5 = -1720884678);
            num1 = num5 ^ (int) num2 * -833994362;
            continue;
          case 12:
            int num6;
            num1 = num6 = !this.board.WhiteCanCastleQueenSide ? -1054015043 : (num6 = -1132951370);
            continue;
          case 13:
            this.addMove(x.File + 1, x.Rank - 1, x);
            num1 = (int) num2 * -930509116 ^ -1110978837;
            continue;
          case 14:
            num1 = -82767394;
            continue;
          case 15:
            goto label_3;
          case 16:
            num1 = (int) num2 * 2042619876 ^ 1694250921;
            continue;
          case 17:
            int num7 = canCastleQueenSide ? -1825708391 : (num7 = -1233525424);
            num1 = num7 ^ (int) num2 * 478887414;
            continue;
          case 18:
            this.addMove(x.File - 1, x.Rank + 1, x);
            num1 = (int) num2 * 427407368 ^ -1641529632;
            continue;
          case 19:
            canCastleKingSide2 = this.board.WhiteCanCastleKingSide;
            num1 = (int) num2 * 1152525948 ^ -1697409522;
            continue;
          case 20:
            this.handleBigCastling(x);
            num1 = (int) num2 * 1101257616 ^ 269399862;
            continue;
          case 21:
            canCastleKingSide1 = this.board.BlackCanCastleKingSide;
            num1 = (int) num2 * -2085605625 ^ -2084898520;
            continue;
          case 22:
            num1 = (int) num2 * -175205278 ^ -803134117;
            continue;
          case 23:
            goto label_1;
          case 24:
            this.handleSmallCastling(x);
            num1 = (int) num2 * 17932963 ^ -141350057;
            continue;
          case 25:
            int num8;
            num1 = num8 = x.Piece.Color != PieceColor.Black ? -367938919 : (num8 = -1710476549);
            continue;
          case 26:
            this.handleBigCastling(x);
            num1 = (int) num2 * 153038225 ^ -575700661;
            continue;
          case 27:
            num1 = (int) num2 * -1816936204 ^ 719650208;
            continue;
          case 28:
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * -16119353 ^ -861400529;
            continue;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    private void handleBigCastling(Square x)
    {
      Square square1 = this.board[x.File - 1, x.Rank];
      Square square2 = this.board[x.File - 2, x.Rank];
      Square square3 = this.board[x.File - 3, x.Rank];
label_1:
      int num1 = 1035882502;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1733158126)) % 6U)
        {
          case 0:
            num3 = square3.IsEmpty ? 1 : 0;
            goto label_6;
          case 1:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * -704071427 ^ 1393407282;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          case 4:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 1928707124 ^ -59541841;
              continue;
            }
            break;
          case 5:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * 1581624583 ^ 1113632605;
              continue;
            }
            break;
          default:
            goto label_12;
        }
        num3 = 0;
label_6:
        int num4;
        num1 = num4 = num3 == 0 ? 237365699 : (num4 = 61220075);
      }
label_3:
      return;
label_12:;
    }

    private void handleSmallCastling(Square x)
    {
label_1:
      int num1 = -247754063;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1935475486)) % 6U)
        {
          case 0:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * -2141319807 ^ 498765614;
            continue;
          case 1:
            num3 = square1.IsEmpty ? 1 : 0;
            break;
          case 2:
            goto label_3;
          case 3:
            square2 = this.board[x.File + 1, x.Rank];
            square1 = this.board[x.File + 2, x.Rank];
            num1 = (int) num2 * -879764319 ^ -116995064;
            continue;
          case 4:
            goto label_1;
          case 5:
            if (!square2.IsEmpty)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 516565690 ^ 1919451129;
            continue;
          default:
            goto label_11;
        }
        int num4;
        num1 = num4 = num3 == 0 ? -1997093514 : (num4 = -1818993990);
      }
label_3:
      return;
label_11:;
    }

    private void handleRook(Square x)
    {
      int num1 = 1;
label_22:
      int num2 = num1 >= 8 ? 563838424 : (num2 = 1048218685);
      bool flag1;
      int num3;
      int num4;
      bool flag2;
      int num5;
      bool flag3;
      bool flag4;
      bool flag5;
      bool flag6;
      int b1;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num2 ^ 1607990127)) % 33U)
        {
          case 0:
            flag4 = num4 < 8;
            num2 = 2014158236;
            continue;
          case 1:
            goto label_22;
          case 2:
            num2 = (int) num6 * -1952528061 ^ -587086659;
            continue;
          case 3:
            ++num5;
            num2 = (int) num6 * -2110287420 ^ -371552172;
            continue;
          case 4:
            b1 = x.Rank - num4;
            num2 = (int) num6 * 1040437631 ^ 14826844;
            continue;
          case 5:
            int num7 = !flag6 ? -319038838 : (num7 = -1508274499);
            num2 = num7 ^ (int) num6 * -2039119767;
            continue;
          case 6:
            int b2 = x.Rank + num1;
            flag1 = this.addMove(x.File, b2, x);
            num2 = 1155447900;
            continue;
          case 7:
            num2 = (int) num6 * -880107958 ^ -1342200824;
            continue;
          case 8:
            int num8 = !flag5 ? -206503740 : (num8 = -1298467214);
            num2 = num8 ^ (int) num6 * 71527334;
            continue;
          case 9:
            num2 = 1048218685;
            continue;
          case 10:
            int num9 = flag2 ? -1882058926 : (num9 = -1069618732);
            num2 = num9 ^ (int) num6 * -1601322813;
            continue;
          case 11:
            int num10 = !flag4 ? -1282136917 : (num10 = -1025527957);
            num2 = num10 ^ (int) num6 * 113655209;
            continue;
          case 12:
            num2 = (int) num6 * -313749083 ^ 89107325;
            continue;
          case 13:
            num2 = (int) num6 * 1755657825 ^ -1040434917;
            continue;
          case 14:
            num5 = 1;
            num2 = 580603320;
            continue;
          case 15:
            goto label_3;
          case 16:
            num2 = 1939461306;
            continue;
          case 17:
            flag6 = this.addMove(x.File, b1, x);
            num2 = (int) num6 * -1205488347 ^ 1032099225;
            continue;
          case 18:
            num4 = 1;
            num2 = 1883518778;
            continue;
          case 19:
            ++num3;
            num2 = 792778189;
            continue;
          case 20:
            ++num4;
            num2 = 1883518778;
            continue;
          case 21:
            num2 = 1053964323;
            continue;
          case 22:
            flag5 = this.addMove(x.File - num3, x.Rank, x);
            num2 = (int) num6 * 401715673 ^ -1500753566;
            continue;
          case 23:
            int num11;
            num2 = num11 = num5 < 8 ? 2118086190 : (num11 = 414222818);
            continue;
          case 24:
            num2 = 1243780737;
            continue;
          case 25:
            ++num1;
            num2 = (int) num6 * -1143491127 ^ -624270410;
            continue;
          case 26:
            flag3 = this.addMove(x.File + num5, x.Rank, x);
            num2 = 1029597250;
            continue;
          case 27:
            num3 = 1;
            num2 = 792778189;
            continue;
          case 28:
            num2 = (int) num6 * 2099685089 ^ -889118427;
            continue;
          case 29:
            int num12 = !flag1 ? -515428068 : (num12 = -988359399);
            num2 = num12 ^ (int) num6 * 1700153449;
            continue;
          case 30:
            flag2 = num3 < 8;
            num2 = 519646725;
            continue;
          case 31:
            int num13 = flag3 ? -755147182 : (num13 = -457666635);
            num2 = num13 ^ (int) num6 * -759120472;
            continue;
          case 32:
            num2 = 1088096897;
            continue;
          default:
            goto label_35;
        }
      }
label_3:
      return;
label_35:;
    }

    private void handleBishop(Square x)
    {
      int num1 = 1;
label_20:
      bool flag1 = num1 < 8;
      int num2 = -1952240787;
      int num3;
      int num4;
      int a1;
      int b1;
      int num5;
      int a2;
      int b2;
      int a3;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num2 ^ -167212238)) % 36U)
        {
          case 0:
            int num7 = flag3 ? 668848899 : (num7 = 1220680445);
            num2 = num7 ^ (int) num6 * 1673808719;
            continue;
          case 1:
            int num8;
            num2 = num8 = num4 < 8 ? -349378001 : (num8 = -1704349015);
            continue;
          case 2:
            num2 = (int) num6 * 526261270 ^ -620644447;
            continue;
          case 3:
            num2 = -907499139;
            continue;
          case 4:
            a1 = x.File + num1;
            num2 = (int) num6 * -1120432509 ^ 46715216;
            continue;
          case 5:
            int num9;
            num2 = num9 = this.addMove(x.File - num4, x.Rank + num4, x) ? -1746100743 : (num9 = -928632669);
            continue;
          case 6:
            int num10 = !flag2 ? 1648787607 : (num10 = 222293909);
            num2 = num10 ^ (int) num6 * 653271943;
            continue;
          case 7:
            num3 = 1;
            num2 = -1153863320;
            continue;
          case 8:
            a2 = x.File + num5;
            num2 = (int) num6 * -739224377 ^ -1407928108;
            continue;
          case 9:
            num2 = -1039856738;
            continue;
          case 10:
            b2 = x.Rank - num5;
            num2 = (int) num6 * 895402934 ^ -862340325;
            continue;
          case 11:
            int num11 = this.addMove(a1, b1, x) ? -1768307170 : (num11 = -1536259356);
            num2 = num11 ^ (int) num6 * -1774438572;
            continue;
          case 12:
            goto label_20;
          case 13:
            num2 = -2112989222;
            continue;
          case 14:
            flag3 = num5 < 8;
            num2 = -2029295910;
            continue;
          case 15:
            num2 = (int) num6 * 1338332937 ^ -2137956764;
            continue;
          case 16:
            a3 = x.File - num3;
            num2 = (int) num6 * 178761580 ^ 821576736;
            continue;
          case 17:
            int num12;
            num2 = num12 = num3 < 8 ? -1736767530 : (num12 = -1973523648);
            continue;
          case 18:
            int b3 = x.Rank - num3;
            flag2 = this.addMove(a3, b3, x);
            num2 = (int) num6 * -160811945 ^ 1143321554;
            continue;
          case 19:
            ++num3;
            num2 = (int) num6 * 1965018093 ^ -838972344;
            continue;
          case 20:
            num2 = -109456334;
            continue;
          case 21:
            num2 = (int) num6 * 909880229 ^ -717134199;
            continue;
          case 22:
            b1 = x.Rank + num1;
            num2 = (int) num6 * -813999394 ^ 136202429;
            continue;
          case 23:
            int num13 = flag1 ? 1576418966 : (num13 = 1951109855);
            num2 = num13 ^ (int) num6 * 10250196;
            continue;
          case 24:
            num2 = -2020660782;
            continue;
          case 25:
            int num14 = this.addMove(a2, b2, x) ? -1289200125 : (num14 = -334814332);
            num2 = num14 ^ (int) num6 * 1247966603;
            continue;
          case 26:
            num4 = 1;
            num2 = -1706985639;
            continue;
          case 27:
            goto label_3;
          case 28:
            ++num4;
            num2 = (int) num6 * -1538397322 ^ 1871882327;
            continue;
          case 29:
            num5 = 1;
            num2 = -1840496108;
            continue;
          case 30:
            ++num1;
            num2 = -577874346;
            continue;
          case 31:
            num2 = (int) num6 * 766794942 ^ -816026621;
            continue;
          case 32:
            num2 = (int) num6 * -2017474204 ^ 644625715;
            continue;
          case 33:
            ++num5;
            num2 = -1840496108;
            continue;
          case 34:
            num2 = (int) num6 * 628116533 ^ -1229936439;
            continue;
          case 35:
            num2 = -2072168134;
            continue;
          default:
            goto label_38;
        }
      }
label_3:
      return;
label_38:;
    }

    private void handleKnight(Square x)
    {
label_1:
      int num1 = 554389948;
      while (true)
      {
        uint num2;
        Square sq;
        bool flag1;
        int[] numArray1;
        int[] numArray2;
        int index;
        int Rank;
        bool flag2;
        ChessPiece piece;
        bool flag3;
        int File;
        bool isEmpty;
        int num3;
        switch ((num2 = (uint) (num1 ^ 598578847)) % 28U)
        {
          case 0:
            int num4 = flag1 ? -1994017471 : (num4 = -1779998926);
            num1 = num4 ^ (int) num2 * 663573228;
            continue;
          case 1:
            int num5 = flag3 ? 674154012 : (num5 = 1221768630);
            num1 = num5 ^ (int) num2 * -796504848;
            continue;
          case 2:
            ++index;
            num1 = 91145264;
            continue;
          case 3:
            piece = x.Piece;
            num1 = (int) num2 * 501058928 ^ -708129071;
            continue;
          case 4:
            num3 = Rank > 7 ? 1 : 0;
            goto label_14;
          case 5:
            num1 = 1806813415;
            continue;
          case 6:
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u202B⁮​⁪‬⁮‍‪⁮⁯‌⁯‬‮⁫‪⁬‬‏‫‏⁭​⁮⁫‍‫⁯‮⁮‭‫‮‎⁫‎⁯‎‪⁬‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray2 = numArray3;
            num1 = (int) num2 * -1447277256 ^ -695500777;
            continue;
          case 7:
            flag2 = index < 8;
            num1 = 530306548;
            continue;
          case 8:
            File = x.File + numArray1[index];
            num1 = (int) num2 * 1678585335 ^ 1019803776;
            continue;
          case 9:
            num1 = (int) num2 * 1135082690 ^ 1204906352;
            continue;
          case 10:
            if (Rank >= 0)
            {
              num1 = (int) num2 * -1499153802 ^ -1020227371;
              continue;
            }
            break;
          case 11:
            int num6 = !flag2 ? 1349691277 : (num6 = 1360217856);
            num1 = num6 ^ (int) num2 * -343795802;
            continue;
          case 12:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -513305067 ^ -1494977930;
            continue;
          case 13:
            int num7 = !isEmpty ? -594043999 : (num7 = -1092003134);
            num1 = num7 ^ (int) num2 * -2051871455;
            continue;
          case 14:
            if (File >= 0)
            {
              num1 = (int) num2 * -1106817877 ^ -517026957;
              continue;
            }
            break;
          case 15:
            Rank = x.Rank + numArray2[index];
            num1 = (int) num2 * -1116487209 ^ 931654264;
            continue;
          case 16:
            num1 = (int) num2 * 1560459559 ^ -733178636;
            continue;
          case 17:
            num1 = 1576222325;
            continue;
          case 18:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * -1266857488 ^ 151949506;
            continue;
          case 19:
            flag1 = sq.Piece.Color != x.Piece.Color;
            num1 = 102830275;
            continue;
          case 20:
            goto label_3;
          case 21:
            sq = this.board[File, Rank];
            isEmpty = sq.IsEmpty;
            num1 = 134914642;
            continue;
          case 22:
            if (File <= 7)
            {
              num1 = (int) num2 * -1029277769 ^ -807212823;
              continue;
            }
            break;
          case 23:
            goto label_1;
          case 24:
            index = 0;
            num1 = (int) num2 * 782639528 ^ -1884683325;
            continue;
          case 25:
            num1 = (int) num2 * -1469313402 ^ 1704706656;
            continue;
          case 26:
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u202B⁮​⁪‬⁮‍‪⁮⁯‌⁯‬‮⁫‪⁬‬‏‫‏⁭​⁮⁫‍‫⁯‮⁮‭‫‮‎⁫‎⁯‎‪⁬‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray1 = numArray4;
            num1 = (int) num2 * -1789170765 ^ -1613111369;
            continue;
          case 27:
            num1 = (int) num2 * -1643629191 ^ 944156846;
            continue;
          default:
            goto label_35;
        }
        num3 = 1;
label_14:
        flag3 = num3 != 0;
        num1 = 590493030;
      }
label_3:
      return;
label_35:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
label_1:
      int num1 = 792069075;
      ChessPiece piece;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 967366371)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            piece = x.Piece;
            num1 = (int) num2 * 237632750 ^ 714860494;
            continue;
          case 2:
            Square sq = this.board[a, b];
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * 1313064815 ^ -1817295205;
            continue;
          case 3:
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * -274980555 ^ 1016748854;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private bool addMove(int a, int b, Square x)
    {
      if (a < 0)
        goto label_15;
label_1:
      int num1 = -1769295671;
label_2:
      bool flag1;
      while (true)
      {
        uint num2;
        ChessPiece piece;
        Square sq;
        bool flag2;
        UserAction kind;
        bool isEmpty;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1305375839)) % 27U)
        {
          case 0:
            goto label_14;
          case 1:
            flag1 = false;
            num1 = -391264921;
            continue;
          case 2:
            if (a <= 7)
            {
              num1 = (int) num2 * -491846839 ^ -579291967;
              continue;
            }
            goto label_15;
          case 3:
            num1 = (int) num2 * -689189590 ^ -968829114;
            continue;
          case 4:
            int num4 = isEmpty ? -1472102033 : (num4 = -453897956);
            num1 = num4 ^ (int) num2 * 1523347076;
            continue;
          case 5:
            flag1 = true;
            num1 = -391264921;
            continue;
          case 6:
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * 1176510051 ^ -1850478091;
            continue;
          case 7:
            num1 = (int) num2 * -1703622943 ^ 1401496316;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * -1776592207 ^ -1285735871;
            continue;
          case 10:
            num3 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            break;
          case 11:
            int num5 = sq.Piece.Kind != Pieces.King ? 579343477 : (num5 = 1355533200);
            num1 = num5 ^ (int) num2 * 158187687;
            continue;
          case 12:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -1229362620 ^ 3468176;
            continue;
          case 13:
            this.KingColorOnCheck = sq.Piece.Color;
            num1 = (int) num2 * -2094635859 ^ 453209911;
            continue;
          case 14:
            flag2 = sq.Piece.Color != x.Piece.Color;
            num1 = -733658805;
            continue;
          case 15:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = -1094085658;
            continue;
          case 16:
            flag1 = true;
            num1 = (int) num2 * 1835018807 ^ 188107868;
            continue;
          case 17:
            if (b >= 0)
            {
              num1 = (int) num2 * 1726537739 ^ 592859608;
              continue;
            }
            goto label_15;
          case 19:
            this.IsOnCheck = true;
            num1 = (int) num2 * 1671593453 ^ -627145175;
            continue;
          case 20:
            kind = UserAction.Capture;
            num1 = (int) num2 * -174294387 ^ 431215002;
            continue;
          case 21:
            int num6 = !flag2 ? -1680600655 : (num6 = -1157309820);
            num1 = num6 ^ (int) num2 * 2016528683;
            continue;
          case 22:
            num1 = -1238053321;
            continue;
          case 23:
            num1 = (int) num2 * -1466939185 ^ 1808855501;
            continue;
          case 24:
            if (x.Piece.Kind == Pieces.King)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 544980888 ^ -1252502751;
            continue;
          case 25:
            flag1 = true;
            num1 = (int) num2 * -84883527 ^ -1172997848;
            continue;
          case 26:
            piece = x.Piece;
            sq = this.board[a, b];
            num1 = -1903001725;
            continue;
          default:
            goto label_35;
        }
        int num7;
        num1 = num7 = num3 == 0 ? -1698916490 : (num7 = -916560382);
      }
label_14:
      int num8 = b > 7 ? 1 : 0;
      goto label_16;
label_35:
      return flag1;
label_15:
      num8 = 1;
label_16:
      num1 = num8 != 0 ? -8696644 : (num1 = -546624882);
      goto label_2;
    }

    static void \u202B⁮​⁪‬⁮‍‪⁮⁯‌⁯‬‮⁫‪⁬‬‏‫‏⁭​⁮⁫‍‫⁯‮⁮‭‫‮‎⁫‎⁯‎‪⁬‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
