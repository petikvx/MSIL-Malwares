// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: q是, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A217F07-6E26-47B2-8CBC-BCC0D26AE04B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-566554b534a53102dd67fc20bd07ca49241b51616d73619e383e80bdfc4fe08a.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 206973067;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1541805610)) % 5U)
          {
            case 0:
              EventHandler eventHandler2 = (EventHandler) Square.\u200F​‏⁬⁯‎⁯⁬‮‮⁯⁭‎​‍‪⁯‬​‍⁫⁫‬‎‪⁯⁭‫‫‬⁭⁯‌‭‍⁭‪‏‪⁯‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * 1469338157 ^ 235750872;
              continue;
            case 1:
              comparand = eventHandler1;
              num1 = 338500823;
              continue;
            case 2:
              goto label_1;
            case 3:
              goto label_3;
            case 4:
              int num3 = eventHandler1 == comparand ? -761075904 : (num3 = -319321798);
              num1 = num3 ^ (int) num2 * 148832051;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 1284818137;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 443002504)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              comparand = eventHandler1;
              num1 = 325073512;
              continue;
            case 2:
              int num3 = eventHandler1 != comparand ? -431483851 : (num3 = -706790094);
              num1 = num3 ^ (int) num2 * -1591872164;
              continue;
            case 3:
              EventHandler eventHandler2 = (EventHandler) Square.\u206A⁮‌⁯⁪‏‌‪⁬⁪‬⁭⁭‏⁮​⁬‭⁬‫​⁮‌⁯​‌⁪⁪‫‎‬⁪⁪‮‮⁫⁫‎‮⁭‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * -1986014910 ^ -609279243;
              continue;
            case 4:
              goto label_3;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName
    {
      get
      {
label_1:
        int num1 = -2115326460;
        string specialName;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -422342162)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              specialName = Square.\u206A‬‎​‮⁬‫⁪⁯‬⁫‪‭‭⁯‌‪‏⁯‏‮⁯‪⁮‮⁫⁭⁬⁯⁭⁮⁫⁬‪⁭‎⁬​‬⁮‮(this.CurrentSquare, \u003CModule\u003E.\u206B⁫⁭⁬⁮⁬⁬⁬‫‎⁯‭⁮‭‏‎‍​‪‏⁪⁬‭‬‌‍⁪‬‫⁮‬‍‎‌⁭⁬‌⁬‫⁮‮<string>(3876360040U), Square.\u206E‪​‮⁭⁬⁯⁫‬‏⁪⁫⁪‫‭‭‎‬⁪​⁫‎⁭‫‎‍‌‫⁫⁭‮‬‏⁮‬⁯‍‫‏‏‮((object) this.Piece));
              num1 = (int) num2 * -1427414146 ^ -1208582636;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
label_1:
        int num1 = -384630656;
        char ch;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -507197094)) % 5U)
          {
            case 0:
              goto label_1;
            case 2:
              ch = Square.\u202D‏‮​⁮⁫‬⁭‍‌⁮‫⁬‌‌⁬⁯⁮‎‌‍⁫‏⁬⁭‪‏‭‏​​‎⁫⁬⁯⁬‍‮‫⁮‮(\u003CModule\u003E.\u206A‮‮⁪⁪‏​‍⁬‬‍‭‭‎⁪‪‎‬⁯‪‎⁭​⁯‮⁫⁪⁪⁪⁬⁮‌‬⁮‮‭⁯⁭‭⁯‮<string>(2756128696U), this.File);
              num1 = (int) num2 * 1243648717 ^ -1229962874;
              continue;
            case 3:
              num1 = (int) num2 * 1651372301 ^ 663135599;
              continue;
            case 4:
              currentSquare = Square.\u206B⁬‎‏‬⁬‫⁬‪‫⁭⁮⁯‬⁬⁭‫‪⁫‍‫⁬‭⁪‪‮‫⁪‫‌⁭⁯‪⁯⁮⁫‮⁮⁪⁯‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * 475992492 ^ 131421667;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
label_1:
      int num1 = -400887906;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1818419753)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * 2007354222 ^ 1600780099;
              continue;
            }
            goto label_5;
          case 2:
            num1 = (int) num2 * -1919179800 ^ 1856065752;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
label_1:
      int num1 = 375656587;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1441549892)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Rank = rank;
            num1 = (int) num2 * 2094198399 ^ 2019759533;
            continue;
          case 2:
            this.File = file;
            num1 = (int) num2 * 1386240588 ^ 790775127;
            continue;
          case 3:
            num1 = (int) num2 * 212229668 ^ -1937780215;
            continue;
          case 5:
            this.Board = Board;
            num1 = (int) num2 * -184958797 ^ 1343040491;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      this.Name = Square.\u206B⁬‎‏‬⁬‫⁬‪‫⁭⁮⁯‬⁬⁭‫‪⁫‍‫⁬‭⁪‪‮‫⁪‫‌⁭⁯‪⁯⁮⁫‮⁮⁪⁯‮(Square.\u202D‏‮​⁮⁫‬⁭‍‌⁮‫⁬‌‌⁬⁯⁮‎‌‍⁫‏⁬⁭‪‏‭‏​​‎⁫⁬⁯⁬‍‮‫⁮‮(\u003CModule\u003E.\u202B‫‭⁮⁬‏⁭⁭‬‮‍⁮⁮‍‪‭‭‎​‮‬‍‫⁮‮⁬‌‬⁯⁬⁮‌‮⁮⁬‍‌⁯‮‮‮<string>(4073000005U), file).ToString(), (this.Rank + 1).ToString());
    }

    public Square()
    {
label_1:
      int num1 = -1159872276;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1481400995)) % 5U)
        {
          case 0:
            this.InitializeComponent();
            num1 = (int) num2 * -1901313736 ^ 1271010333;
            continue;
          case 1:
            this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
            num1 = (int) num2 * -907508782 ^ 2121003035;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * 1793842110 ^ 550704122;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void SwitchPlayer()
    {
label_1:
      int num1 = -1690880759;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1766891441)) % 9U)
        {
          case 0:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -1551057376;
            continue;
          case 1:
            num1 = -1518038495;
            continue;
          case 2:
            flag = !this.Board.DisableTurns;
            num1 = (int) num2 * -232902138 ^ -1425980829;
            continue;
          case 3:
            int num3 = this.Board.WhosPlaying != PieceColor.White ? 1035547957 : (num3 = 159531246);
            num1 = num3 ^ (int) num2 * 1732864053;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * 184972680 ^ 255166464;
            continue;
          case 6:
            num1 = (int) num2 * 806036081 ^ 1451330788;
            continue;
          case 7:
            int num4 = !flag ? 112219489 : (num4 = 1316381109);
            num1 = num4 ^ (int) num2 * -1643958936;
            continue;
          case 8:
            goto label_3;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private bool getSide(Square x)
    {
label_1:
      int num1 = 1161823365;
      bool side;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1965503162)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
            break;
          case 3:
            if (this.Board.DisableTurns)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * -1355711571 ^ -1246871464;
            continue;
          case 4:
            num1 = (int) num2 * 2135928495 ^ 1307517356;
            continue;
          default:
            goto label_9;
        }
        side = num3 != 0;
        num1 = 744966211;
      }
label_9:
      return side;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = 2058499044;
      while (true)
      {
        uint num2;
        bool side;
        bool flag1;
        List<PossibleMoves> move1;
        bool flag2;
        bool flag3;
        bool flag4;
        List<PossibleMoves> move2;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ 2078774257)) % 81U)
        {
          case 0:
            to.HighLight();
            num1 = (int) num2 * -1705470526 ^ 1824094825;
            continue;
          case 1:
            num3 = this.getSide(to) ? 1 : 0;
            goto label_77;
          case 2:
            num1 = 1697352483;
            continue;
          case 3:
            flag8 = flag7;
            num1 = 212458812;
            continue;
          case 4:
            side = this.getSide(this.Board.From);
            num1 = 1681342029;
            continue;
          case 5:
            num1 = (int) num2 * -2031466007 ^ 1319252425;
            continue;
          case 6:
            this.msg = \u003CModule\u003E.\u202E⁯⁪⁯⁮‏⁬‮⁭‏⁫⁯‌⁯​‎⁫‮‫‭⁭⁭⁭​⁮‫⁭⁪‮⁯‍⁫‍⁯​‎‍⁮‍‍‮<string>(2855299258U);
            num1 = (int) num2 * 1632255425 ^ -1567660191;
            continue;
          case 7:
            num1 = (int) num2 * 1729932651 ^ 728847952;
            continue;
          case 8:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1706184205 ^ -1248403875;
            continue;
          case 9:
            num1 = (int) num2 * -1645042821 ^ 856766937;
            continue;
          case 10:
            num1 = (int) num2 * 863940189 ^ 2131606664;
            continue;
          case 11:
            if (to.Piece != null)
            {
              num1 = 569639585;
              continue;
            }
            num3 = 0;
            goto label_77;
          case 12:
            flag6 = this.Board.From.Piece.Color == to.Piece.Color;
            num1 = 1707422251;
            continue;
          case 13:
            this.msg = \u003CModule\u003E.\u206E‌⁪⁫‏‭⁪⁫⁭‭‫⁬⁯‮‫‏‮‌⁫‫‍⁫‏‪‌⁯⁭⁬⁮‏‍‍⁮‪​‏⁫‬‍‮<string>(1816947646U);
            move2 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            num1 = (int) num2 * -788113940 ^ 109002136;
            continue;
          case 14:
            int num5 = flag6 ? -1638065125 : (num5 = -1745230994);
            num1 = num5 ^ (int) num2 * -33659564;
            continue;
          case 15:
            num1 = (int) num2 * -1005220483 ^ 1086924284;
            continue;
          case 16:
            int num6 = !flag1 ? -197333467 : (num6 = -998811333);
            num1 = num6 ^ (int) num2 * 1407845732;
            continue;
          case 17:
            this.msg = \u003CModule\u003E.\u206E‌⁪⁫‏‭⁪⁫⁭‭‫⁬⁯‮‫‏‮‌⁫‫‍⁫‏‪‌⁯⁭⁬⁮‏‍‍⁮‪​‏⁫‬‍‮<string>(336723994U);
            num1 = (int) num2 * -1200498110 ^ -1570208502;
            continue;
          case 18:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 370423129 ^ -498505176;
            continue;
          case 19:
            num1 = 707418571;
            continue;
          case 20:
            num1 = (int) num2 * -1330193380 ^ 715421528;
            continue;
          case 21:
            int num7 = !move1.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? 293339383 : (num7 = 394934006);
            num1 = num7 ^ (int) num2 * 713923084;
            continue;
          case 22:
            if (this.Board.From != null)
            {
              num1 = (int) num2 * -153610689 ^ -902290087;
              continue;
            }
            num4 = 0;
            break;
          case 23:
            num1 = (int) num2 * 1240123015 ^ 146628291;
            continue;
          case 24:
            int num8;
            num1 = num8 = this.Board.DisableTurns ? 2049521915 : (num8 = 1447614602);
            continue;
          case 25:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1775573522 ^ -2085142675;
            continue;
          case 26:
            int num9 = flag4 ? -1146869549 : (num9 = -1871544927);
            num1 = num9 ^ (int) num2 * -1919311437;
            continue;
          case 27:
            num1 = (int) num2 * 785999635 ^ 217388615;
            continue;
          case 28:
            flag3 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * -1893202395 ^ 365732045;
            continue;
          case 29:
            int num10 = flag5 ? -738626950 : (num10 = -27370624);
            num1 = num10 ^ (int) num2 * -1161504478;
            continue;
          case 30:
            move1 = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            this.msg = Square.\u200D‎‮‍‎⁯‭⁯⁯‬‮⁬⁭⁫‎⁬‫‎⁫‫⁬‌‮‏⁬⁯‭‎⁯⁬⁭⁪⁯‫‏‮‌⁪⁬⁫‮(\u003CModule\u003E.\u206E‌⁪⁫‏‭⁪⁫⁭‭‫⁬⁯‮‫‏‮‌⁫‫‍⁫‏‪‌⁯⁭⁬⁮‏‍‍⁮‪​‏⁫‬‍‮<string>(3812930871U), (object) move1.Count);
            num1 = (int) num2 * -1507683065 ^ 64971692;
            continue;
          case 32:
            num1 = (int) num2 * 992840697 ^ -353402717;
            continue;
          case 33:
            flag4 = Square.\u206D⁮⁬⁬‍​⁫‌‭‪‬‫‮‪⁬‬‌‭‪‫⁯​⁪‫⁬​⁬‫‫⁮‮‌‎⁮⁬‍‬⁫‍⁮‮(e) == MouseButtons.Left;
            num1 = (int) num2 * -1312793455 ^ 585836025;
            continue;
          case 34:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u206E‌⁪⁫‏‭⁪⁫⁭‭‫⁬⁯‮‫‏‮‌⁫‫‍⁫‏‪‌⁯⁭⁬⁮‏‍‍⁮‪​‏⁫‬‍‮<string>(2624114539U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -965627844 ^ 1163561025;
            continue;
          case 35:
            to.HighLight();
            num1 = (int) num2 * -226080202 ^ 683593506;
            continue;
          case 36:
            num1 = 1861286900;
            continue;
          case 37:
            num1 = 1592188984;
            continue;
          case 38:
            this.msg = \u003CModule\u003E.\u202B‫‭⁮⁬‏⁭⁭‬‮‍⁮⁮‍‪‭‭‎​‮‬‍‫⁮‮⁬‌‬⁯⁬⁮‌‮⁮⁬‍‌⁯‮‮‮<string>(3789215789U);
            num1 = 19311896;
            continue;
          case 39:
            int num11 = !flag8 ? -676112794 : (num11 = -1284378640);
            num1 = num11 ^ (int) num2 * -4474548;
            continue;
          case 40:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 1249387727 ^ -1135253245;
            continue;
          case 41:
            num1 = (int) num2 * -1313182821 ^ -1566864309;
            continue;
          case 42:
            flag1 = this.Board.From.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * -463151635 ^ -1263077122;
            continue;
          case 43:
            num1 = (int) num2 * 807586595 ^ 1048145190;
            continue;
          case 44:
            to.HighLight();
            num1 = (int) num2 * 1900244862 ^ 2049138065;
            continue;
          case 45:
            num1 = (int) num2 * 1595444287 ^ 1957479072;
            continue;
          case 46:
            num1 = 1892980758;
            continue;
          case 47:
            int num12 = to.Piece.Id == this.Board.From.Piece.Id ? -679277872 : (num12 = -1676209085);
            num1 = num12 ^ (int) num2 * -1548006806;
            continue;
          case 48:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = (int) num2 * -1433773083 ^ -272942088;
            continue;
          case 49:
            this.Board.From = (Square) null;
            num1 = (int) num2 * -1213189782 ^ 1204248884;
            continue;
          case 50:
            this.Board.From = to;
            num1 = (int) num2 * 1920470533 ^ 1814519255;
            continue;
          case 51:
            num1 = (int) num2 * 824497035 ^ -620840833;
            continue;
          case 52:
            num1 = (int) num2 * -428570572 ^ -769864101;
            continue;
          case 53:
            num1 = (int) num2 * 1609509462 ^ -1395765468;
            continue;
          case 54:
            num1 = (int) num2 * -433621800 ^ -1681638574;
            continue;
          case 55:
            num1 = (int) num2 * 608237963 ^ -561104932;
            continue;
          case 56:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u206E‌⁪⁫‏‭⁪⁫⁭‭‫⁬⁯‮‫‏‮‌⁫‫‍⁫‏‪‌⁯⁭⁬⁮‏‍‍⁮‪​‏⁫‬‍‮<string>(706779907U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 379563119 ^ -2104321799;
            continue;
          case 57:
            int num13 = flag2 ? 543596585 : (num13 = 1365282096);
            num1 = num13 ^ (int) num2 * -1103443536;
            continue;
          case 58:
            to = this;
            num1 = (int) num2 * 917201541 ^ -934031867;
            continue;
          case 59:
            flag2 = to.Piece == null & flag7;
            num1 = (int) num2 * -1611968089 ^ -1407227853;
            continue;
          case 60:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1303042027 ^ 1729529561;
            continue;
          case 61:
            this.msg = \u003CModule\u003E.\u206E‌⁪⁫‏‭⁪⁫⁭‭‫⁬⁯‮‫‏‮‌⁫‫‍⁫‏‪‌⁯⁭⁬⁮‏‍‍⁮‪​‏⁫‬‍‮<string>(706779907U);
            num1 = (int) num2 * 378181739 ^ -947707414;
            continue;
          case 62:
            to.HighLight();
            num1 = (int) num2 * 1048848351 ^ -2145998581;
            continue;
          case 63:
            num1 = 257789464;
            continue;
          case 64:
            int num14 = !flag3 ? 896824216 : (num14 = 1984872171);
            num1 = num14 ^ (int) num2 * -511746502;
            continue;
          case 65:
            flag5 = move2.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * 1581002517 ^ 118723905;
            continue;
          case 66:
            num1 = (int) num2 * 78009666 ^ 2078855974;
            continue;
          case 67:
            num1 = (int) num2 * -508055031 ^ 1451114269;
            continue;
          case 68:
            to.MovePawn(this.Board.From);
            num1 = 2012157468;
            continue;
          case 69:
            num1 = (int) num2 * -600163799 ^ 130092137;
            continue;
          case 70:
            num1 = (int) num2 * 167208306 ^ -1576153589;
            continue;
          case 71:
            goto label_1;
          case 72:
            int num15 = !side ? 1506115347 : (num15 = 592027163);
            num1 = num15 ^ (int) num2 * 455638452;
            continue;
          case 73:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1531427976 ^ -46813742;
            continue;
          case 74:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -78543289 ^ -1640267979;
            continue;
          case 75:
            num1 = (int) num2 * -764803750 ^ 827899378;
            continue;
          case 76:
            num4 = this.Board.From.Piece != null ? 1 : 0;
            break;
          case 77:
            this.msg = \u003CModule\u003E.\u206A‮‮⁪⁪‏​‍⁬‬‍‭‭‎⁪‪‎‬⁯‪‎⁭​⁯‮⁫⁪⁪⁪⁬⁮‌‬⁮‮‭⁯⁭‭⁯‮<string>(1575902039U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 649622563 ^ 1478508342;
            continue;
          case 78:
            num1 = (int) num2 * -1022643947 ^ 1887324802;
            continue;
          case 79:
            num1 = (int) num2 * 310802513 ^ -1651087732;
            continue;
          case 80:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -263376957 ^ -8811964;
            continue;
          default:
            goto label_88;
        }
        flag7 = num4 != 0;
        num1 = 44465995;
        continue;
label_77:
        int num16;
        num1 = num16 = num3 != 0 ? 1492892647 : (num16 = 339764660);
      }
label_88:
      Square.action(this.msg);
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = -288844503;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1441356344)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 741700415 ^ -1322306849;
            continue;
          case 1:
            int num3 = this.Board.From != null ? -1959045522 : (num3 = -726741024);
            num1 = num3 ^ (int) num2 * 744910811;
            continue;
          case 2:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 690566772 ^ -766400080;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * 116438958 ^ -69274484;
            continue;
          case 6:
            num1 = (int) num2 * 2011905558 ^ -300776065;
            continue;
          case 7:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * -1983807508 ^ 340194602;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void CaptPawn(Square from)
    {
label_1:
      int num1 = -658383504;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1914236807)) % 31U)
        {
          case 0:
            num1 = (int) num2 * 1725140100 ^ -89127286;
            continue;
          case 1:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * -1470647779 ^ -1995316225;
            continue;
          case 2:
            int num5 = !flag3 ? -1257433816 : (num5 = -2039212924);
            num1 = num5 ^ (int) num2 * 1245386426;
            continue;
          case 3:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * -178600459 ^ 1088001491;
            continue;
          case 4:
            from.Piece = (ChessPiece) null;
            flag2 = flag1;
            num1 = -1951362855;
            continue;
          case 5:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = -10550826;
            continue;
          case 6:
            flag1 = true;
            num1 = (int) num2 * -2042840723 ^ -1905899711;
            continue;
          case 7:
            int num6;
            num1 = num6 = this.Piece.Color == PieceColor.Black ? -1762548111 : (num6 = -430983791);
            continue;
          case 8:
            flag1 = true;
            num1 = (int) num2 * -2028176112 ^ 586109962;
            continue;
          case 9:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              goto label_23;
            }
            else
            {
              num1 = (int) num2 * 792239226 ^ 1074569446;
              continue;
            }
          case 10:
            flag1 = false;
            flag6 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -854647962 ^ -308036285;
            continue;
          case 11:
            num1 = -1971734999;
            continue;
          case 12:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 13:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 1734009528 ^ 72544163;
            continue;
          case 14:
            num3 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_23;
          case 15:
            this.handleWhiteCastling();
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * -815033037 ^ 793374303;
            continue;
          case 16:
            flag4 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -1410690097 ^ 1325746353;
            continue;
          case 17:
            num1 = (int) num2 * 268984384 ^ 1885134325;
            continue;
          case 18:
            num1 = (int) num2 * -11960285 ^ 1814068235;
            continue;
          case 19:
            num1 = -430983791;
            continue;
          case 20:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = -1671728923;
            continue;
          case 22:
            this.Piece = from.Piece;
            num1 = -939968643;
            continue;
          case 23:
            int num7;
            num1 = num7 = from.Piece.Color != PieceColor.White ? -1065735475 : (num7 = -734410521);
            continue;
          case 24:
            goto label_1;
          case 25:
            int num8 = !flag4 ? -72255354 : (num8 = -1070498691);
            num1 = num8 ^ (int) num2 * 920050191;
            continue;
          case 26:
            int num9 = !flag6 ? -1552989185 : (num9 = -627173577);
            num1 = num9 ^ (int) num2 * 1679107451;
            continue;
          case 27:
            int num10 = flag5 ? -148095780 : (num10 = -468673192);
            num1 = num10 ^ (int) num2 * 808527318;
            continue;
          case 28:
            if (flag2)
            {
              num1 = (int) num2 * -1019360320 ^ 1330301692;
              continue;
            }
            goto label_57;
          case 29:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -2108190074 ^ -310122701;
            continue;
          case 30:
            this.handleBlackCastling();
            num1 = (int) num2 * 690259940 ^ 1869246099;
            continue;
          default:
            goto label_39;
        }
        flag3 = num4 != 0;
        num1 = -576965116;
        continue;
label_23:
        flag5 = num3 != 0;
        num1 = -432225405;
      }
label_39:
      Promotion promotion = new Promotion(Square.\u202C‬‫‫‍⁯⁪‍⁪⁭‪‭‪‎⁫⁯⁫‫‬‎⁮‫⁫‏⁮‬⁭‌‬‏‭‭⁮‪‍‎‮⁮⁭‌‮());
      try
      {
        int num11 = (int) Square.\u200F‍‭⁪‌⁯⁮‫‫‌‏‬‍⁬⁬‪‏​⁪⁬‫⁫⁬‭‮⁯⁮⁫⁪‎‎‮⁫‪⁭‪‏‪‫‍‮((Form) promotion);
label_41:
        int num12 = -1718710033;
        while (true)
        {
          uint num13;
          switch ((num13 = (uint) (num12 ^ -1914236807)) % 5U)
          {
            case 1:
              num12 = (int) num13 * 1774950029 ^ -76330203;
              continue;
            case 2:
              goto label_41;
            case 3:
              this.Kind = promotion.Piece;
              num12 = (int) num13 * -1027328774 ^ -1486533419;
              continue;
            case 4:
              num12 = (int) num13 * -278405323 ^ -1481800020;
              continue;
            default:
              goto label_53;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_47:
          int num14 = -1136964656;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -1914236807)) % 4U)
            {
              case 1:
                Square.\u200C⁯⁬‏⁬⁭‮​‌‏‫‬‮‎‏⁪⁮⁯⁬​⁫⁬⁮⁯‎⁮‫​‫⁪⁯⁬⁮‍⁯⁭‬‪⁫‍‮((IDisposable) promotion);
                num14 = (int) num15 * 1953425039 ^ 121681717;
                continue;
              case 2:
                goto label_47;
              case 3:
                num14 = (int) num15 * 1773134 ^ 159416415;
                continue;
              default:
                goto label_52;
            }
          }
        }
label_52:;
      }
label_53:
label_54:
      int num16 = -804884740;
label_55:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ -1914236807)) % 4U)
        {
          case 0:
            goto label_56;
          case 1:
            goto label_57;
          case 2:
            goto label_54;
          case 3:
            this.SwitchPlayer();
            num16 = (int) num17 * 258570118 ^ -1839390137;
            continue;
          default:
            goto label_49;
        }
      }
label_56:
      return;
label_49:
      return;
label_57:
      this.Board.lights.FindAllMoves();
      PlaySound.Play();
      num16 = -858950182;
      goto label_55;
    }

    private void MovePawn(Square from)
    {
label_1:
      int num1 = -1720734113;
      ChessPiece chessPiece;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -888396167)) % 28U)
        {
          case 0:
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * -382226248 ^ 1129833874;
            continue;
          case 1:
            if (this.Rank != 3)
            {
              num1 = (int) num2 * -926924667 ^ 1593158622;
              continue;
            }
            num3 = 1;
            goto label_21;
          case 2:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 1829482874 ^ 42805305;
            continue;
          case 3:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 407446023 ^ 275957376;
              continue;
            }
            num4 = 0;
            break;
          case 4:
            flag2 = true;
            num1 = (int) num2 * -14729210 ^ -225437533;
            continue;
          case 5:
            chessPiece = this.handleBlackCastling();
            num1 = (int) num2 * 371304190 ^ -615692248;
            continue;
          case 6:
            num1 = (int) num2 * 2100985722 ^ -1786469110;
            continue;
          case 8:
            if (flag3)
            {
              num1 = (int) num2 * 1054745974 ^ 1457980699;
              continue;
            }
            goto label_95;
          case 9:
            num1 = -2109366803;
            continue;
          case 10:
            this.Board.lastPassantPawn = (ChessPiece) null;
            int num6 = this.Piece.Kind != Pieces.Pawn ? 1029392016 : (num6 = 584887670);
            num1 = num6 ^ (int) num2 * 1828728163;
            continue;
          case 11:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 854031770 ^ -733357106;
              continue;
            }
            num5 = 0;
            goto label_34;
          case 12:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 13:
            num5 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_34;
          case 14:
            num1 = -2109366803;
            continue;
          case 15:
            goto label_1;
          case 16:
            from.Piece = (ChessPiece) null;
            flag3 = flag2;
            num1 = -572769383;
            continue;
          case 17:
            num1 = (int) num2 * 760923964 ^ -926151653;
            continue;
          case 18:
            flag2 = true;
            num1 = (int) num2 * -1026640206 ^ -50997108;
            continue;
          case 19:
            int num7 = flag1 ? 1832895227 : (num7 = 1832007619);
            num1 = num7 ^ (int) num2 * -1070057627;
            continue;
          case 20:
            num1 = -396565750;
            continue;
          case 21:
            num1 = -1202147322;
            continue;
          case 22:
            chessPiece = (ChessPiece) null;
            this.Piece = from.Piece;
            num1 = (int) num2 * 453522639 ^ -1325370147;
            continue;
          case 23:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 1823090878 ^ -1748060106;
            continue;
          case 24:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * 1436730687 ^ -141225831;
            continue;
          case 25:
            num1 = (int) num2 * 866117800 ^ 687675836;
            continue;
          case 26:
            num3 = this.Rank == 4 ? 1 : 0;
            goto label_21;
          case 27:
            flag2 = false;
            flag1 = this.Piece.Color == PieceColor.White;
            num1 = -945610046;
            continue;
          default:
            goto label_39;
        }
        int num8;
        num1 = num8 = num4 == 0 ? -934327952 : (num8 = -1813720745);
        continue;
label_21:
        int num9;
        num1 = num9 = num3 != 0 ? -1775965551 : (num9 = -232921727);
        continue;
label_34:
        int num10;
        num1 = num10 = num5 != 0 ? -1643957643 : (num10 = -700358421);
      }
label_39:
      Promotion promotion = new Promotion(Square.\u202C‬‫‫‍⁯⁪‍⁪⁭‪‭‪‎⁫⁯⁫‫‬‎⁮‫⁫‏⁮‬⁭‌‬‏‭‭⁮‪‍‎‮⁮⁭‌‮());
      try
      {
        int num11 = (int) Square.\u200F‍‭⁪‌⁯⁮‫‫‌‏‬‍⁬⁬‪‏​⁪⁬‫⁫⁬‭‮⁯⁮⁫⁪‎‎‮⁫‪⁭‪‏‪‫‍‮((Form) promotion);
label_41:
        int num12 = -1769282312;
        while (true)
        {
          uint num13;
          switch ((num13 = (uint) (num12 ^ -888396167)) % 3U)
          {
            case 0:
              goto label_41;
            case 1:
              this.Kind = promotion.Piece;
              num12 = (int) num13 * -1724193258 ^ -1346572188;
              continue;
            default:
              goto label_50;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_45:
          int num14 = -2036462020;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -888396167)) % 3U)
            {
              case 0:
                goto label_45;
              case 2:
                Square.\u200C⁯⁬‏⁬⁭‮​‌‏‫‬‮‎‏⁪⁮⁯⁬​⁫⁬⁮⁯‎⁮‫​‫⁪⁯⁬⁮‍⁯⁭‬‪⁫‍‮((IDisposable) promotion);
                num14 = (int) num15 * 1985953292 ^ 451918574;
                continue;
              default:
                goto label_49;
            }
          }
        }
label_49:;
      }
label_50:
label_51:
      int num16 = -1816361089;
label_52:
      while (true)
      {
        uint num17;
        bool flag4;
        int rank;
        Square square1;
        bool flag5;
        bool isOnCheck;
        int file;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        Square square2;
        switch ((num17 = (uint) (num16 ^ -888396167)) % 52U)
        {
          case 0:
            num16 = (int) num17 * 1339275867 ^ 71926654;
            continue;
          case 1:
            square1.Piece = chessPiece;
            flag4 = flag1;
            num16 = (int) num17 * 630487669 ^ 175400232;
            continue;
          case 2:
            num16 = (int) num17 * -1125442061 ^ 1317874927;
            continue;
          case 3:
            if (file == 5)
            {
              square2 = this.Board[7, rank];
              break;
            }
            num16 = (int) num17 * 1609697093 ^ 87952137;
            continue;
          case 4:
            num16 = -1258377650;
            continue;
          case 5:
            num16 = (int) num17 * 1595898771 ^ 706988037;
            continue;
          case 6:
            num16 = (int) num17 * -1368864084 ^ -481318233;
            continue;
          case 7:
            num16 = (int) num17 * 1633582693 ^ -166933831;
            continue;
          case 8:
            num16 = (int) num17 * 1706737436 ^ 1927192216;
            continue;
          case 9:
            flag5 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * 1133207800 ^ 81516666;
            continue;
          case 10:
            num16 = (int) num17 * 1932860827 ^ 1022441923;
            continue;
          case 11:
            int num18;
            num16 = num18 = chessPiece == null ? -1884591313 : (num18 = -427911783);
            continue;
          case 12:
            num16 = (int) num17 * 2133678432 ^ 386379556;
            continue;
          case 13:
            int num19 = isOnCheck ? -174087610 : (num19 = -1663410253);
            num16 = num19 ^ (int) num17 * -430412807;
            continue;
          case 14:
            flag5 = true;
            num16 = (int) num17 * 1760356666 ^ -1440308010;
            continue;
          case 15:
            this.Piece = (ChessPiece) null;
            num16 = (int) num17 * 1506248959 ^ -973859584;
            continue;
          case 16:
            this.SwitchPlayer();
            num16 = (int) num17 * 986780130 ^ 1046624100;
            continue;
          case 17:
            num16 = (int) num17 * 932345211 ^ 291505407;
            continue;
          case 18:
            this.msg = \u003CModule\u003E.\u206E‌⁪⁫‏‭⁪⁫⁭‭‫⁬⁯‮‫‏‮‌⁫‫‍⁫‏‪‌⁯⁭⁬⁮‏‍‍⁮‪​‏⁫‬‍‮<string>(403779061U);
            num16 = (int) num17 * -1618516126 ^ 1645094072;
            continue;
          case 19:
            num16 = (int) num17 * -22554409 ^ -1395900494;
            continue;
          case 20:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * -1897477385 ^ 1339239113;
            continue;
          case 21:
            num16 = -1370378994;
            continue;
          case 22:
            this.Board.lights.FindAllMoves();
            num16 = -1699688301;
            continue;
          case 23:
            flag9 = this.Piece.Kind == Pieces.King;
            num16 = (int) num17 * -1884153878 ^ -141213748;
            continue;
          case 24:
            num16 = (int) num17 * 2060500724 ^ 2056249771;
            continue;
          case 25:
            int num20 = flag6 ? 1109658752 : (num20 = 1507159564);
            num16 = num20 ^ (int) num17 * 1160845759;
            continue;
          case 26:
            num16 = -479578935;
            continue;
          case 27:
            goto label_53;
          case 28:
            flag6 = this.Board.lights.KingColorOnCheck == this.Piece.Color;
            num16 = (int) num17 * -1405662123 ^ -1978677720;
            continue;
          case 29:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * 524739506 ^ -168787038;
            continue;
          case 30:
            goto label_95;
          case 31:
            int num21 = !flag9 ? -551377197 : (num21 = -503413923);
            num16 = num21 ^ (int) num17 * -801212589;
            continue;
          case 32:
            int num22 = flag7 ? -1966436107 : (num22 = -1169979727);
            num16 = num22 ^ (int) num17 * 675905055;
            continue;
          case 33:
            this.Board.WhiteCanCastleQueenSide = true;
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * 259286964 ^ 1120740967;
            continue;
          case 34:
            int num23 = flag8 ? -905750250 : (num23 = -975773287);
            num16 = num23 ^ (int) num17 * 1767735387;
            continue;
          case 35:
            flag8 = flag5;
            num16 = -1685624981;
            continue;
          case 36:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = -1802915850;
            continue;
          case 37:
            goto label_51;
          case 38:
            num16 = (int) num17 * 730672919 ^ -2108566580;
            continue;
          case 39:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            this.Board.BlackCanCastleQueenSide = true;
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * -11211610 ^ -920401968;
            continue;
          case 40:
            int num24 = !flag4 ? 955530801 : (num24 = 791138264);
            num16 = num24 ^ (int) num17 * -420760160;
            continue;
          case 41:
            from.Piece = this.Piece;
            num16 = (int) num17 * -44358831 ^ -1363739401;
            continue;
          case 42:
            num16 = -1154726885;
            continue;
          case 43:
            square2 = this.Board[0, rank];
            break;
          case 44:
            isOnCheck = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -1131074084 ^ -1796771988;
            continue;
          case 45:
            file = chessPiece.Current.File;
            rank = chessPiece.Current.Rank;
            num16 = (int) num17 * -1766554530 ^ 2075475824;
            continue;
          case 46:
            this.msg = \u003CModule\u003E.\u202E⁯⁪⁯⁮‏⁬‮⁭‏⁫⁯‌⁯​‎⁫‮‫‭⁭⁭⁭​⁮‫⁭⁪‮⁯‍⁫‍⁯​‎‍⁮‍‍‮<string>(256414555U);
            num16 = (int) num17 * -695687914 ^ 1314189720;
            continue;
          case 47:
            PlaySound.Play();
            num16 = -428173795;
            continue;
          case 48:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = -2127089674;
            continue;
          case 49:
            flag7 = flag1;
            num16 = (int) num17 * -940078553 ^ -765048690;
            continue;
          case 50:
            num16 = (int) num17 * 1724499370 ^ -694062471;
            continue;
          case 51:
            num16 = (int) num17 * 1076210512 ^ 409023729;
            continue;
          default:
            goto label_47;
        }
        square1 = square2;
        num16 = -1672057164;
      }
label_53:
      return;
label_47:
      return;
label_95:
      this.Board.lights.IsOnCheck = false;
      this.Board.lights.FindAllMoves();
      num16 = -906211085;
      goto label_52;
    }

    private ChessPiece handleBlackCastling()
    {
label_1:
      int num1 = 893167816;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        Square square1;
        ChessPiece chessPiece2;
        Square square2;
        bool flag1;
        bool flag2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 89673683)) % 40U)
        {
          case 0:
            flag1 = this.Piece.Current.File == 2;
            num1 = 1265005387;
            continue;
          case 1:
            int num5 = flag3 ? -1697109730 : (num5 = -1732002894);
            num1 = num5 ^ (int) num2 * -617917043;
            continue;
          case 2:
            square1.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * -1975578314 ^ 1646291945;
            continue;
          case 3:
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * -874789295 ^ 1206539618;
            continue;
          case 4:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * -88497411 ^ 1290780553;
            continue;
          case 5:
            num1 = (int) num2 * -1110765809 ^ -380667621;
            continue;
          case 6:
            num1 = 693683076;
            continue;
          case 7:
            flag2 = this.Piece.Current.File == 6;
            num1 = 857660871;
            continue;
          case 8:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * 475397974 ^ -1039481392;
            continue;
          case 9:
            int num6 = !Square.\u200B⁯‌​⁪​⁪‬‫‎‎⁫‪​‌‍⁬⁬⁬‎‭‫⁬‮⁪‍‏‫‍⁯‏‎⁫‭⁬⁫‬‪⁪‭‮(this.Piece.Home.Name, \u003CModule\u003E.\u206B⁫⁭⁬⁮⁬⁬⁬‫‎⁯‭⁮‭‏‎‍​‪‏⁪⁬‭‬‌‍⁪‬‫⁮‬‍‎‌⁭⁬‌⁬‫⁮‮<string>(2205403055U)) ? 74265950 : (num6 = 265138639);
            num1 = num6 ^ (int) num2 * 1664963144;
            continue;
          case 10:
            num1 = (int) num2 * -1311256245 ^ -1747973016;
            continue;
          case 11:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * 806927765 ^ 1407369995;
            continue;
          case 12:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 13:
            chessPiece1 = chessPiece2;
            num1 = 890178566;
            continue;
          case 14:
            num1 = (int) num2 * -1366034031 ^ 307244068;
            continue;
          case 15:
            square2 = this.Board[3, 7];
            num1 = (int) num2 * 1943872215 ^ 795603848;
            continue;
          case 16:
            int num7 = this.Piece.Kind == Pieces.Rook ? 201327589 : (num7 = 2101937171);
            num1 = num7 ^ (int) num2 * -502536184;
            continue;
          case 17:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * -516423219 ^ -426685015;
            continue;
          case 18:
            square2.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * -1500492512 ^ 802479754;
            continue;
          case 19:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * -1245075123 ^ 463015232;
            continue;
          case 20:
            int num8 = flag2 ? 251408558 : (num8 = 1970349490);
            num1 = num8 ^ (int) num2 * 1736346623;
            continue;
          case 21:
            this.Board.BlackCanCastleKingSide = false;
            num1 = 487280525;
            continue;
          case 22:
            num1 = (int) num2 * -2002080963 ^ -907165214;
            continue;
          case 23:
            if (!this.Board.BlackCanCastleKingSide)
            {
              num1 = (int) num2 * -416402362 ^ -1030058529;
              continue;
            }
            num4 = 1;
            goto label_43;
          case 24:
            num1 = (int) num2 * -1480807667 ^ -724989877;
            continue;
          case 25:
            square1 = this.Board[5, 7];
            num1 = (int) num2 * -2007910231 ^ 1744232712;
            continue;
          case 26:
            num1 = (int) num2 * 1946125694 ^ -1973861825;
            continue;
          case 27:
            num1 = 995275871;
            continue;
          case 28:
            num1 = 637917390;
            continue;
          case 29:
            this.Board.BlackCanCastleQueenSide = false;
            this.Board.BlackCanCastleKingSide = false;
            num1 = 1378377864;
            continue;
          case 30:
            num4 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            goto label_43;
          case 31:
            num1 = (int) num2 * -1859994679 ^ -1890067001;
            continue;
          case 32:
            int num9 = flag1 ? 1960521314 : (num9 = 230683908);
            num1 = num9 ^ (int) num2 * 933760078;
            continue;
          case 33:
            num1 = (int) num2 * -687861011 ^ 189464625;
            continue;
          case 34:
            goto label_1;
          case 36:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * 290459556 ^ 1959815085;
            continue;
          case 37:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * -205698498 ^ 153773009;
              continue;
            }
            num3 = 1;
            break;
          case 38:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * -528844090 ^ 217456341;
            continue;
          case 39:
            num1 = (int) num2 * 1881682209 ^ 1407550079;
            continue;
          default:
            goto label_47;
        }
        flag3 = num3 != 0;
        num1 = 1305564210;
        continue;
label_43:
        int num10;
        num1 = num10 = num4 == 0 ? 637917390 : (num10 = 665501542);
      }
label_47:
      return chessPiece1;
    }

    private ChessPiece handleWhiteCastling()
    {
label_1:
      int num1 = 313801824;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        bool flag1;
        Square square1;
        Square square2;
        ChessPiece chessPiece2;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 949039029)) % 35U)
        {
          case 1:
            int num5 = !flag3 ? 371026064 : (num5 = 1873455989);
            num1 = num5 ^ (int) num2 * 1286798386;
            continue;
          case 2:
            int num6 = !flag4 ? 2021059680 : (num6 = 1012389305);
            num1 = num6 ^ (int) num2 * 1076805923;
            continue;
          case 3:
            goto label_1;
          case 4:
            num3 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            goto label_30;
          case 5:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = 432093515;
            continue;
          case 6:
            chessPiece2 = (ChessPiece) null;
            if (!this.Board.WhiteCanCastleKingSide)
            {
              num1 = (int) num2 * 1848231772 ^ -1781046017;
              continue;
            }
            num3 = 1;
            goto label_30;
          case 7:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 325017205 ^ 1120807330;
            continue;
          case 8:
            flag1 = this.Piece.Current.File == 6;
            num1 = 2140745906;
            continue;
          case 9:
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -1863863286 ^ -1365320069;
            continue;
          case 10:
            num1 = (int) num2 * 1696093446 ^ -169106228;
            continue;
          case 11:
            chessPiece1 = chessPiece2;
            num1 = 1025795238;
            continue;
          case 12:
            int num7 = flag2 ? 1077139870 : (num7 = 335668218);
            num1 = num7 ^ (int) num2 * -1979543814;
            continue;
          case 13:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * -867093152 ^ 1148674574;
              continue;
            }
            num4 = 1;
            break;
          case 14:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * 1648141067 ^ 1806306079;
            continue;
          case 15:
            num1 = (int) num2 * 1375264547 ^ 1474339635;
            continue;
          case 16:
            flag4 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * 289265706 ^ 632576879;
            continue;
          case 17:
            square1 = this.Board[5, 0];
            square1.Piece = this.Board[7, 0].Piece;
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * 2087185088 ^ 271083928;
            continue;
          case 18:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 331948884;
            continue;
          case 19:
            int num8 = !Square.\u200B⁯‌​⁪​⁪‬‫‎‎⁫‪​‌‍⁬⁬⁬‎‭‫⁬‮⁪‍‏‫‍⁯‏‎⁫‭⁬⁫‬‪⁪‭‮(this.Piece.Home.Name, \u003CModule\u003E.\u206B⁫⁭⁬⁮⁬⁬⁬‫‎⁯‭⁮‭‏‎‍​‪‏⁪⁬‭‬‌‍⁪‬‫⁮‬‍‎‌⁭⁬‌⁬‫⁮‮<string>(2311297869U)) ? 641362039 : (num8 = 819221317);
            num1 = num8 ^ (int) num2 * -551871927;
            continue;
          case 20:
            num1 = 551883474;
            continue;
          case 21:
            square2.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * -1112082587 ^ 27382959;
            continue;
          case 22:
            int num9 = !flag1 ? 594464033 : (num9 = 2139137972);
            num1 = num9 ^ (int) num2 * 253757735;
            continue;
          case 23:
            num1 = 1696568524;
            continue;
          case 24:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * 1177639230 ^ -1598862073;
            continue;
          case 25:
            flag3 = this.Piece.Current.File == 2;
            num1 = 2075963240;
            continue;
          case 26:
            square2 = this.Board[3, 0];
            num1 = (int) num2 * 1800630910 ^ 1676990983;
            continue;
          case 27:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 28:
            num1 = (int) num2 * 1729783448 ^ 1074337627;
            continue;
          case 29:
            num1 = 1865992292;
            continue;
          case 30:
            num1 = (int) num2 * 1348112355 ^ 1928698702;
            continue;
          case 31:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * 854699224 ^ 931935426;
            continue;
          case 32:
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * -1174041520 ^ 348173408;
            continue;
          case 33:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -623870505 ^ 1434705627;
            continue;
          case 34:
            num1 = (int) num2 * 1039746372 ^ -1342747522;
            continue;
          default:
            goto label_42;
        }
        flag2 = num4 != 0;
        num1 = 1258367121;
        continue;
label_30:
        int num10;
        num1 = num10 = num3 == 0 ? 1865992292 : (num10 = 1846474380);
      }
label_42:
      return chessPiece1;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = 1977036669;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1338315270)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            Square.\u202E‮⁭‭‮‍⁯​‭‪‮​⁭‏‫‮‍‏⁫⁮⁭​‬‪‫⁬⁮‬⁬‮‬‌‌‮‫‪‌⁭‬⁯‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * -311590875 ^ -705876465;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = 1852357716;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1659240896)) % 9U)
        {
          case 0:
            num1 = (int) num2 * -809953514 ^ 1664326975;
            continue;
          case 1:
            num1 = (int) num2 * 1833561928 ^ -1698128510;
            continue;
          case 2:
            if (!disposing)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 1825258967 ^ 1994645667;
            continue;
          case 3:
            num1 = (int) num2 * -1285684598 ^ -1811881955;
            continue;
          case 4:
            Square.\u200C⁯⁬‏⁬⁭‮​‌‏‫‬‮‎‏⁪⁮⁯⁬​⁫⁬⁮⁯‎⁮‫​‫⁪⁯⁬⁮‍⁯⁭‬‪⁫‍‮((IDisposable) this.components);
            num1 = (int) num2 * -744793569 ^ 1856615237;
            continue;
          case 5:
            num3 = this.components != null ? 1 : 0;
            break;
          case 6:
            base.Dispose(disposing);
            num1 = 655702908;
            continue;
          case 7:
            goto label_1;
          case 8:
            goto label_3;
          default:
            goto label_14;
        }
        int num4;
        num1 = num4 = num3 != 0 ? 2004087849 : (num4 = 1677880850);
      }
label_3:
      return;
label_14:;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = 1832021969;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 589830663)) % 11U)
        {
          case 0:
            Square.\u200D⁭‫‎‏‮‌‍‏⁮‬⁮⁫⁫‌‏‮‪‬⁯‮‏‮‌‎⁫⁬⁭‪⁯‭⁪⁮‮‪‍‬⁮⁫‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * -1195171035 ^ 1481398465;
            continue;
          case 1:
            Square.\u200F‪‫⁭‭‍⁬‮‏⁫⁭⁭⁯‫⁫​‫⁫⁫⁯‭‎‏⁮⁮⁭‌⁬⁮‍‬​‍⁯⁭​‎‬‬‬‮((Control) this);
            num1 = (int) num2 * -59291436 ^ -1289761198;
            continue;
          case 2:
            num1 = (int) num2 * -949551673 ^ -1156127509;
            continue;
          case 3:
            this.Name = \u003CModule\u003E.\u206A‮‮⁪⁪‏​‍⁬‬‍‭‭‎⁪‪‎‬⁯‪‎⁭​⁯‮⁫⁪⁪⁪⁬⁮‌‬⁮‮‭⁯⁭‭⁯‮<string>(85548264U);
            Square.\u200C‌‎‫‮⁭⁮‍‎‏⁪‏‎‭‍‮‌‫‪‪⁮⁪‍‪‍​⁫‬⁯‏‭‬⁪⁬​‮​​⁫‫‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 622972945 ^ 2137610411;
            continue;
          case 4:
            num1 = (int) num2 * 1273758592 ^ 1366317523;
            continue;
          case 5:
            Square.\u202E‪‬‫⁫⁪⁪‏‌​⁮‌⁬‪‮⁬‍⁭‫⁫‭‍‏⁭‎⁫‎‭⁭‫‏‭‏‪‍‮⁬‎‏‭‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -871386319 ^ -700885505;
            continue;
          case 6:
            goto label_3;
          case 7:
            Square.\u202D⁭‏⁬‍‮‭⁮‏‫⁮⁮‎​​‭​‏‮⁬⁬‮‪⁪⁫‍‪‏‏‎⁮⁮⁫⁪⁮⁭⁮⁬‌‫‮((Control) this, new Padding(0));
            num1 = (int) num2 * -1127378088 ^ 1970839938;
            continue;
          case 8:
            Square.\u200D‮‎‏‮‭‌‏‪‍⁬⁬‫‫‬⁮⁮‮⁮‌⁫‫⁮‌‎‬⁬‌‌‎‬‮⁭⁫⁭‍⁬‍‮‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -1170460277 ^ 603213508;
            continue;
          case 9:
            Square.\u200F‬⁫‌⁬‮‬⁭‌‎⁭‪⁯‮​‏⁭⁬⁪‌‫‏⁭⁫⁮‍‏‎⁫‪‬⁮‌‭⁯​⁭‭‭‮((Control) this, false);
            num1 = (int) num2 * -630332301 ^ 124628991;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    static Delegate \u200F​‏⁬⁯‎⁯⁬‮‮⁯⁭‎​‍‪⁯‬​‍⁫⁫‬‎‪⁯⁭‫‫‬⁭⁯‌‭‍⁭‪‏‪⁯‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206A⁮‌⁯⁪‏‌‪⁬⁪‬⁭⁭‏⁮​⁬‭⁬‫​⁮‌⁯​‌⁪⁪‫‎‬⁪⁪‮‮⁫⁫‎‮⁭‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u206E‪​‮⁭⁬⁯⁫‬‏⁪⁫⁪‫‭‭‎‬⁪​⁫‎⁭‫‎‍‌‫⁫⁭‮‬‏⁮‬⁯‍‫‏‏‮([In] object obj0) => obj0.ToString();

    static string \u206A‬‎​‮⁬‫⁪⁯‬⁫‪‭‭⁯‌‪‏⁯‏‮⁯‪⁮‮⁫⁭⁬⁯⁭⁮⁫⁬‪⁭‎⁬​‬⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u202D‏‮​⁮⁫‬⁭‍‌⁮‫⁬‌‌⁬⁯⁮‎‌‍⁫‏⁬⁭‪‏‭‏​​‎⁫⁬⁯⁬‍‮‫⁮‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u206B⁬‎‏‬⁬‫⁬‪‫⁭⁮⁯‬⁬⁭‫‪⁫‍‫⁬‭⁪‪‮‫⁪‫‌⁭⁯‪⁯⁮⁫‮⁮⁪⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u206D⁮⁬⁬‍​⁫‌‭‪‬‫‮‪⁬‬‌‭‪‫⁯​⁪‫⁬​⁬‫‫⁮‮‌‎⁮⁬‍‬⁫‍⁮‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u200D‎‮‍‎⁯‭⁯⁯‬‮⁬⁭⁫‎⁬‫‎⁫‫⁬‌‮‏⁬⁯‭‎⁯⁬⁭⁪⁯‫‏‮‌⁪⁬⁫‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u202C‬‫‫‍⁯⁪‍⁪⁭‪‭‪‎⁫⁯⁫‫‬‎⁮‫⁫‏⁮‬⁭‌‬‏‭‭⁮‪‍‎‮⁮⁭‌‮() => Cursor.Position;

    static DialogResult \u200F‍‭⁪‌⁯⁮‫‫‌‏‬‍⁬⁬‪‏​⁪⁬‫⁫⁬‭‮⁯⁮⁫⁪‎‎‮⁫‪⁭‪‏‪‫‍‮([In] Form obj0) => obj0.ShowDialog();

    static void \u200C⁯⁬‏⁬⁭‮​‌‏‫‬‮‎‏⁪⁮⁯⁬​⁫⁬⁮⁯‎⁮‫​‫⁪⁯⁬⁮‍⁯⁭‬‪⁫‍‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u200B⁯‌​⁪​⁪‬‫‎‎⁫‪​‌‍⁬⁬⁬‎‭‫⁬‮⁪‍‏‫‍⁯‏‎⁫‭⁬⁫‬‪⁪‭‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u202E‮⁭‭‮‍⁯​‭‪‮​⁭‏‫‮‍‏⁫⁮⁭​‬‪‫⁬⁮‬⁬‮‬‌‌‮‫‪‌⁭‬⁯‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u200F‪‫⁭‭‍⁬‮‏⁫⁭⁭⁯‫⁫​‫⁫⁫⁯‭‎‏⁮⁮⁭‌⁬⁮‍‬​‍⁯⁭​‎‬‬‬‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u200D‮‎‏‮‭‌‏‪‍⁬⁬‫‫‬⁮⁮‮⁮‌⁫‫⁮‌‎‬⁬‌‌‎‬‮⁭⁫⁭‍⁬‍‮‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u200D⁭‫‎‏‮‌‍‏⁮‬⁮⁫⁫‌‏‮‪‬⁯‮‏‮‌‎⁫⁬⁭‪⁯‭⁪⁮‮‪‍‬⁮⁫‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u202E‪‬‫⁫⁪⁪‏‌​⁮‌⁬‪‮⁬‍⁭‫⁫‭‍‏⁭‎⁫‎‭⁭‫‏‭‏‪‍‮⁬‎‏‭‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u202D⁭‏⁬‍‮‭⁮‏‫⁮⁮‎​​‭​‏‮⁬⁬‮‪⁪⁫‍‪‏‏‎⁮⁮⁫⁪⁮⁭⁮⁬‌‫‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u200C‌‎‫‮⁭⁮‍‎‏⁪‏‎‭‍‮‌‫‪‪⁮⁪‍‪‍​⁫‬⁯‏‭‬⁪⁬​‮​​⁫‫‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200F‬⁫‌⁬‮‬⁭‌‎⁭‪⁯‮​‏⁭⁬⁪‌‫‏⁭⁫⁮‍‏‎⁫‪‬⁮‌‭⁯​⁭‭‭‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
