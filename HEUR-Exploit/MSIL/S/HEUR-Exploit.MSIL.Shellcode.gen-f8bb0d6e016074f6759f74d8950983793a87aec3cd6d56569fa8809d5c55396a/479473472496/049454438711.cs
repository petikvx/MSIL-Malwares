// Decompiled with JetBrains decompiler
// Type: 479473472496.049454438711
// Assembly: 942981470147, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 92EB186D-EC33-4501-B5FF-A65C9233BC32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Exploit.MSIL.Shellcode.gen-f8bb0d6e016074f6759f74d8950983793a87aec3cd6d56569fa8809d5c55396a.exe

using \u003479473472496;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using System;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.XPath;

namespace \u003479473472496
{
  public class \u003049454438711
  {
    internal static string \u003272300324837(XPathNavigator _param0)
    {
      string attribute1 = _param0.GetAttribute("file", "");
      string attribute2 = _param0.GetAttribute("name", "");
      string attribute3 = _param0.GetAttribute("classname", "");
      string attribute4 = _param0.GetAttribute("line", "");
      return \u003049454438711.\u003672732064366(attribute1, attribute3, attribute2, attribute4) ? \u003049454438711.\u003351768165458(attribute1, attribute3, attribute2) : (string) null;
    }

    internal static string \u003351768165458(string _param0, string _param1, string _param2)
    {
      string str1 = string.Empty;
      string str2 = Path.ChangeExtension(_param0, (string) null).Replace("\\", ".");
      if (str2.Length < _param1.Length)
        str1 = _param1.Substring(str2.Length + 1);
      if (string.IsNullOrEmpty(str1))
        return ".\\" + _param0 + "::" + _param2;
      return ".\\" + _param0 + "::" + str1 + "::" + _param2;
    }

    internal static bool \u003672732064366(
      string _param0,
      string _param1,
      string _param2,
      string _param3)
    {
      return !string.IsNullOrEmpty(_param0) && !string.IsNullOrEmpty(_param1) && !string.IsNullOrEmpty(_param2) && int.TryParse(_param3, out int _);
    }

    internal static void \u003712214871668(TestResult _param0, XPathNavigator _param1)
    {
      if (_param1.Name != "testcase")
        throw new ArgumentException("navNode.Name {0} not equal to testcase", _param1.Name);
      _param0.Outcome = (TestOutcome) 1;
      try
      {
        double num = double.Parse(_param1.GetAttribute("time", ""), (IFormatProvider) CultureInfo.InvariantCulture);
        _param0.Duration = TimeSpan.FromSeconds(num);
      }
      catch (FormatException ex)
      {
      }
      if (!_param1.HasChildren)
        return;
      _param1.MoveToFirstChild();
      do
      {
        switch (_param1.Name)
        {
          case "skipped":
            _param0.Outcome = (TestOutcome) 3;
            _param0.ErrorMessage = _param1.GetAttribute("message", "");
            break;
          case "failure":
            _param0.Outcome = (TestOutcome) 2;
            _param0.ErrorMessage = _param1.GetAttribute("message", "");
            _param0.ErrorStackTrace = _param1.Value;
            _param0.Messages.Add(new TestResultMessage(TestResultMessage.StandardErrorCategory, _param1.Value + "\n"));
            break;
          case "error":
            _param0.Outcome = (TestOutcome) 2;
            _param0.ErrorMessage = _param1.GetAttribute("message", "");
            _param0.Messages.Add(new TestResultMessage(TestResultMessage.StandardErrorCategory, _param1.Value + "\n"));
            break;
          case "system-out":
            _param0.Messages.Add(new TestResultMessage(TestResultMessage.StandardOutCategory, _param1.Value + "\n"));
            break;
          case "system-err":
            _param0.Messages.Add(new TestResultMessage(TestResultMessage.StandardErrorCategory, _param1.Value + "\n"));
            break;
        }
      }
      while (_param1.MoveToNext());
    }

    internal static XPathDocument \u003923081814115(string _param0)
    {
      XmlReaderSettings settings = new XmlReaderSettings()
      {
        XmlResolver = (XmlResolver) null
      };
      return new XPathDocument(XmlReader.Create((TextReader) new StreamReader(_param0, (Encoding) new UTF8Encoding(false)), settings));
    }
  }
}
