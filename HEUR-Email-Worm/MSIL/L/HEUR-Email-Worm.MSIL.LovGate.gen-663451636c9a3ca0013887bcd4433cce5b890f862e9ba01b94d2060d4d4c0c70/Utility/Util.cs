// Decompiled with JetBrains decompiler
// Type: CiscoAnyconnectControl.Utility.Util
// Assembly: EventRegistrationTokenTa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 99BE195C-C4C5-4E88-A9C4-8AB7EF40C780
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-663451636c9a3ca0013887bcd4433cce5b890f862e9ba01b94d2060d4d4c0c70.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

namespace CiscoAnyconnectControl.Utility
{
  public static class Util
  {
    public static string AssemblyDirectory => Path.GetDirectoryName(Util.FullAssemblyPath);

    public static string FullAssemblyPath
    {
      get
      {
        string codeBase = Assembly.GetEntryAssembly().CodeBase;
        return codeBase.StartsWith("file:///") ? codeBase.Substring("file:///".Length).Replace('/', '\\') : Assembly.GetExecutingAssembly().Location;
      }
    }

    public static string AssemblyName => Path.GetFileName(Util.FullAssemblyPath);

    public static bool CheckForCiscoProcesses(bool close = false)
    {
      List<Process> list = ((IEnumerable<Process>) Process.GetProcesses()).Where<Process>(new Func<Process, bool>(IsCiscoProcFunc)).ToList<Process>();
      if (close)
      {
        foreach (Process process in list)
        {
          try
          {
            process.CloseMainWindow();
            process.WaitForExit(50);
            process.Kill();
          }
          catch (Exception ex)
          {
            Util.TraceException("Error closing cisco process:", ex);
            return false;
          }
        }
        list.Clear();
      }
      return list.Count == 0;

      static bool IsCiscoProcFunc(Process p)
      {
        string processName = p.ProcessName;
        return processName == "vpncli" || processName == "vpnui";
      }
    }

    public static void TraceException(string line1, Exception ex) => Trace.TraceError(string.Format("{0}: {1}\nMessage: {2}\nStack Trace:\n{3}", (object) line1, (object) ex.GetType(), (object) ex.Message, (object) ex.StackTrace));
  }
}
