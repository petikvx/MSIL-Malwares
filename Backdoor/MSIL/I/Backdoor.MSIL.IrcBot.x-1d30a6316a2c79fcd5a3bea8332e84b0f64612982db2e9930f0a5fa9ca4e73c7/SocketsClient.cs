// Decompiled with JetBrains decompiler
// Type: WindowsApplication1.SocketsClient
// Assembly: serick, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1CDCD9D0-B372-43E2-A01B-44CD246DDAE3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Backdoor.MSIL.IrcBot.x-1d30a6316a2c79fcd5a3bea8332e84b0f64612982db2e9930f0a5fa9ca4e73c7.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace WindowsApplication1
{
  public class SocketsClient
  {
    private static string response = string.Empty;
    private static int port = 44;
    private static IPHostEntry ipHostInfo = Dns.GetHostEntry("localhost");
    private static IPAddress ipAddress = SocketsClient.ipHostInfo.AddressList[0];
    private static Socket client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

    [DebuggerNonUserCode]
    public SocketsClient()
    {
    }

    public event SocketsClient.onConnectEventHandler onConnect;

    public event SocketsClient.onErrorEventHandler onError;

    public event SocketsClient.onDataArrivalEventHandler onDataArrival;

    public event SocketsClient.onDisconnectEventHandler onDisconnect;

    public event SocketsClient.onSendCompleteEventHandler onSendComplete;

    public void Connect(string RemoteHostName, int RemotePort)
    {
      try
      {
        SocketsClient.client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
        SocketsClient.port = RemotePort;
        SocketsClient.ipHostInfo = Dns.GetHostEntry(RemoteHostName);
        SocketsClient.ipAddress = SocketsClient.ipHostInfo.AddressList[0];
        IPEndPoint remoteEP = new IPEndPoint(SocketsClient.ipAddress, SocketsClient.port);
        SocketsClient.client.BeginConnect((EndPoint) remoteEP, new AsyncCallback(this.sockConnected), (object) SocketsClient.client);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        SocketsClient.onErrorEventHandler onErrorEvent = this.onErrorEvent;
        if (onErrorEvent != null)
          onErrorEvent(Information.Err().Description);
        ProjectData.ClearProjectError();
      }
    }

    public void SendData(byte[] Data)
    {
      try
      {
        byte[] buffer = Data;
        SocketsClient.client.BeginSend(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(this.sockSendEnd), (object) SocketsClient.client);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        SocketsClient.onErrorEventHandler onErrorEvent = this.onErrorEvent;
        if (onErrorEvent != null)
          onErrorEvent(Information.Err().Description);
        ProjectData.ClearProjectError();
      }
    }

    public void Disconnect()
    {
      try
      {
        SocketsClient.client.Shutdown(SocketShutdown.Both);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      SocketsClient.client.Close();
    }

    public byte[] StringToBytes(string Data) => Encoding.ASCII.GetBytes(Data);

    public string BytestoString(byte[] Data) => Encoding.ASCII.GetString(Data);

    private void sockConnected(IAsyncResult ar)
    {
      try
      {
        if (!SocketsClient.client.Connected)
        {
          SocketsClient.onErrorEventHandler onErrorEvent = this.onErrorEvent;
          if (onErrorEvent == null)
            return;
          onErrorEvent("Connection refused.");
        }
        else
        {
          StateObject state = new StateObject();
          state.workSocket = SocketsClient.client;
          SocketsClient.client.BeginReceive(state.buffer, 0, state.BufferSize, SocketFlags.None, new AsyncCallback(this.sockDataArrival), (object) state);
          SocketsClient.onConnectEventHandler onConnectEvent = this.onConnectEvent;
          if (onConnectEvent == null)
            return;
          onConnectEvent();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        SocketsClient.onErrorEventHandler onErrorEvent = this.onErrorEvent;
        if (onErrorEvent != null)
          onErrorEvent(Information.Err().Description);
        ProjectData.ClearProjectError();
      }
    }

    private void sockDataArrival(IAsyncResult ar)
    {
      StateObject asyncState = (StateObject) ar.AsyncState;
      Socket workSocket = asyncState.workSocket;
      int TotalBytes;
      try
      {
        TotalBytes = workSocket.EndReceive(ar);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        return;
      }
      try
      {
        byte[] buffer = asyncState.buffer;
        if (TotalBytes == 0)
        {
          workSocket.Shutdown(SocketShutdown.Both);
          workSocket.Close();
          SocketsClient.onDisconnectEventHandler onDisconnectEvent = this.onDisconnectEvent;
          if (onDisconnectEvent == null)
            return;
          onDisconnectEvent();
        }
        else
        {
          asyncState.buffer = new byte[32768];
          workSocket.BeginReceive(asyncState.buffer, 0, asyncState.BufferSize, SocketFlags.None, new AsyncCallback(this.sockDataArrival), (object) asyncState);
          SocketsClient.onDataArrivalEventHandler dataArrivalEvent = this.onDataArrivalEvent;
          if (dataArrivalEvent == null)
            return;
          dataArrivalEvent(buffer, TotalBytes);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        SocketsClient.onErrorEventHandler onErrorEvent = this.onErrorEvent;
        if (onErrorEvent != null)
          onErrorEvent(Information.Err().Description);
        ProjectData.ClearProjectError();
      }
    }

    private void sockSendEnd(IAsyncResult ar)
    {
      try
      {
        int DataSize = ((Socket) ar.AsyncState).EndSend(ar);
        SocketsClient.onSendCompleteEventHandler sendCompleteEvent = this.onSendCompleteEvent;
        if (sendCompleteEvent == null)
          return;
        sendCompleteEvent(DataSize);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        SocketsClient.onErrorEventHandler onErrorEvent = this.onErrorEvent;
        if (onErrorEvent != null)
          onErrorEvent(Information.Err().Description);
        ProjectData.ClearProjectError();
      }
    }

    public bool Connected()
    {
      bool connected;
      try
      {
        connected = SocketsClient.client.Connected;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        SocketsClient.onErrorEventHandler onErrorEvent = this.onErrorEvent;
        if (onErrorEvent != null)
          onErrorEvent(Information.Err().Description);
        ProjectData.ClearProjectError();
      }
      return connected;
    }

    public delegate void onConnectEventHandler();

    public delegate void onErrorEventHandler(string Description);

    public delegate void onDataArrivalEventHandler(byte[] Data, int TotalBytes);

    public delegate void onDisconnectEventHandler();

    public delegate void onSendCompleteEventHandler(int DataSize);
  }
}
