// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: 司6, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E96108F1-63B0-49D9-ABCC-EB6314F0AFE2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-81e7927ab5ca518d06687dc18d5c4df22198011494322486e562136344d2513b.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b) => this.board = b;

    public void FindAllMoves()
    {
      this.Clear();
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator1 = this.board.WhitePieces.Values.GetEnumerator();
      try
      {
label_5:
        int num1 = !enumerator1.MoveNext() ? 801719799 : (num1 = 1896880876);
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1037198326)) % 5U)
          {
            case 0:
              num1 = 1896880876;
              continue;
            case 1:
              num1 = (int) num2 * -116607504 ^ 772414209;
              continue;
            case 2:
              this.FindMoveFrom(enumerator1.Current.Current);
              num1 = 107571768;
              continue;
            case 3:
              goto label_5;
            default:
              goto label_12;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_8:
        int num3 = 76114277;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1037198326)) % 3U)
          {
            case 0:
              goto label_8;
            case 2:
              num3 = (int) num4 * -1251548257 ^ 1959801548;
              continue;
            default:
              goto label_11;
          }
        }
label_11:;
      }
label_12:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator2 = this.board.BlackPieces.Values.GetEnumerator())
      {
label_18:
        int num5 = enumerator2.MoveNext() ? 1714352769 : (num5 = 686600460);
        ChessPiece current;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 1037198326)) % 6U)
          {
            case 1:
              current = enumerator2.Current;
              num5 = 2017452498;
              continue;
            case 2:
              num5 = (int) num6 * -1992050432 ^ 337962505;
              continue;
            case 3:
              goto label_18;
            case 4:
              this.FindMoveFrom(current.Current);
              num5 = (int) num6 * -1459736519 ^ -1347550692;
              continue;
            case 5:
              num5 = 1714352769;
              continue;
            default:
              goto label_22;
          }
        }
      }
label_22:
      bool showAllMoves = this.board.ShowAllMoves;
label_23:
      int num7 = 1284181003;
      while (true)
      {
        uint num8;
        switch ((num8 = (uint) (num7 ^ 1037198326)) % 4U)
        {
          case 0:
            goto label_25;
          case 1:
            int num9 = !showAllMoves ? 918160227 : (num9 = 1648614836);
            num7 = num9 ^ (int) num8 * 1801625597;
            continue;
          case 2:
            goto label_23;
          case 3:
            this.HighLightMoveStyle();
            num7 = (int) num8 * -214595881 ^ -1589300841;
            continue;
          default:
            goto label_20;
        }
      }
label_25:
      return;
label_20:;
    }

    public void FindMoveFrom(Square x)
    {
label_1:
      int num1 = 1469486520;
      Pieces kind;
      Pieces pieces;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1125038104)) % 18U)
        {
          case 0:
label_20:
            this.handlePawn(x);
            num1 = 543649738;
            continue;
          case 1:
label_10:
            this.handleQueen(x);
            num1 = 1859381384;
            continue;
          case 2:
            kind = x.Piece.Kind;
            num1 = (int) num2 * -593488006 ^ -1024227335;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -759599936 ^ 1013859274;
            continue;
          case 5:
            num1 = (int) num2 * 775746958 ^ 741356742;
            continue;
          case 6:
label_8:
            this.handleRook(x);
            num1 = 1467344217;
            continue;
          case 7:
label_16:
            this.handleKnight(x);
            num1 = 2136072743;
            continue;
          case 8:
            num1 = (int) num2 * -92224044 ^ 2038172602;
            continue;
          case 9:
            num1 = (int) num2 * -861768085 ^ 667824259;
            continue;
          case 10:
            num1 = (int) num2 * -288938245 ^ 923802192;
            continue;
          case 11:
label_6:
            this.handleBishop(x);
            num1 = 1002802614;
            continue;
          case 12:
label_5:
            this.handleKing(x);
            num1 = 1703652251;
            continue;
          case 13:
            num1 = (int) num2 * 569555952 ^ -112162758;
            continue;
          case 14:
            goto label_3;
          case 15:
            num1 = (int) num2 * -1452737916 ^ 428118598;
            continue;
          case 16:
            switch (pieces)
            {
              case Pieces.Pawn:
                goto label_20;
              case Pieces.Knight:
                goto label_16;
              case Pieces.Bishop:
                goto label_6;
              case Pieces.Rook:
                goto label_8;
              case Pieces.King:
                goto label_5;
              case Pieces.Queen:
                goto label_10;
              default:
                num1 = (int) num2 * 1744850668 ^ -579440469;
                continue;
            }
          case 17:
            pieces = kind;
            num1 = (int) num2 * -896842913 ^ 1507803897;
            continue;
          default:
            goto label_21;
        }
      }
label_3:
      return;
label_21:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
      int num1 = 0;
      int num2 = 0;
label_1:
      int num3 = 283724737;
      while (true)
      {
        uint num4;
        int num5;
        int b;
        Square square;
        bool isEmpty;
        bool flag1;
        bool flag2;
        bool flag3;
        int num6;
        bool flag4;
        bool flag5;
        bool flag6;
        int num7;
        bool flag7;
        bool flag8;
        int num8;
        bool flag9;
        bool flag10;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num4 = (uint) (num3 ^ 1300571255)) % 68U)
        {
          case 0:
            int num19 = !isEmpty ? -1921384638 : (num19 = -1236396357);
            num3 = num19 ^ (int) num4 * -1810452995;
            continue;
          case 1:
            num2 = x.Rank + 2 * num7;
            num3 = (int) num4 * -1850565834 ^ 211868032;
            continue;
          case 2:
            num3 = (int) num4 * -175765190 ^ 105067112;
            continue;
          case 3:
            int num20 = !flag3 ? 2138073303 : (num20 = 1227535627);
            num3 = num20 ^ (int) num4 * 685002102;
            continue;
          case 4:
            num2 = x.Rank + num7;
            num3 = (int) num4 * -1491984666 ^ 2081476865;
            continue;
          case 5:
            num3 = 1245161109;
            continue;
          case 6:
            int num21 = flag6 ? 501034058 : (num21 = 1531950113);
            num3 = num21 ^ (int) num4 * 1255541234;
            continue;
          case 7:
            num9 = num2 < 8 ? 1 : 0;
            goto label_90;
          case 8:
            num1 = x.File;
            num2 = x.Rank + num7;
            num3 = (int) num4 * -723821586 ^ -741166900;
            continue;
          case 9:
            if (this.board[num8, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num10 = 0;
              goto label_55;
            }
            else
            {
              num3 = (int) num4 * 681115364 ^ -1629396935;
              continue;
            }
          case 10:
            num10 = this.board[num8, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_55;
          case 11:
            if (num2 < 0)
            {
              num11 = 0;
              goto label_15;
            }
            else
            {
              num3 = (int) num4 * -513237855 ^ -1131584814;
              continue;
            }
          case 12:
            if (num2 >= 0)
            {
              num3 = (int) num4 * 2114639927 ^ 453152788;
              continue;
            }
            goto label_89;
          case 13:
            this.addMove(num1, num2, x);
            num3 = (int) num4 * 1793018011 ^ 1003631233;
            continue;
          case 14:
            if (x.Rank != 4)
            {
              num12 = 0;
              goto label_25;
            }
            else
            {
              num3 = 292800671;
              continue;
            }
          case 15:
            this.addCapture(num5, b, x, this.board[num5, x.Rank].Piece);
            num3 = (int) num4 * 1882933731 ^ 1442314377;
            continue;
          case 16:
            flag6 = this.board[num8, x.Rank].Piece != null;
            num3 = (int) num4 * 40372097 ^ 2093055493;
            continue;
          case 17:
            int num22 = !flag9 ? 1864338280 : (num22 = 375108338);
            num3 = num22 ^ (int) num4 * -1793096363;
            continue;
          case 18:
            if (x.Piece.Color == PieceColor.White)
            {
              num15 = 1;
              goto label_19;
            }
            else
            {
              num3 = (int) num4 * -1579463158 ^ -1584786841;
              continue;
            }
          case 19:
            int num23 = flag10 ? 609591704 : (num23 = 1078066261);
            num3 = num23 ^ (int) num4 * -84685435;
            continue;
          case 20:
            num15 = 6;
            goto label_19;
          case 21:
            square = this.board[num1, num2];
            num3 = (int) num4 * -332422207 ^ -574836748;
            continue;
          case 22:
            num1 = x.File + 1;
            num3 = 1667968615;
            continue;
          case 23:
            num8 = x.File - 1;
            num3 = (int) num4 * 335532095 ^ -1323181958;
            continue;
          case 24:
            num12 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_25;
          case 25:
            if (this.board[num5, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num17 = 0;
              goto label_63;
            }
            else
            {
              num3 = (int) num4 * -65008726 ^ -717981546;
              continue;
            }
          case 26:
            int num24 = flag1 ? 1549849264 : (num24 = 694590134);
            num3 = num24 ^ (int) num4 * -1436611794;
            continue;
          case 27:
            isEmpty = square.IsEmpty;
            num3 = (int) num4 * -389617949 ^ -1669692210;
            continue;
          case 28:
            flag3 = this.board.lastPassantPawn == this.board[num8, x.Rank].Piece;
            num3 = (int) num4 * 976207692 ^ 324539956;
            continue;
          case 29:
            goto label_3;
          case 30:
            int num25 = !flag5 ? -1200078088 : (num25 = -114632644);
            num3 = num25 ^ (int) num4 * -1261297011;
            continue;
          case 31:
            num3 = (int) num4 * 145361912 ^ 1044971335;
            continue;
          case 32:
            num3 = 1038039122;
            continue;
          case 33:
            this.addMove(num1, num2, x);
            num3 = (int) num4 * 1665898553 ^ 1590264315;
            continue;
          case 34:
            num11 = num2 < 8 ? 1 : 0;
            goto label_15;
          case 35:
            flag10 = x.Rank == num6;
            num3 = 1511277496;
            continue;
          case 36:
            num16 = -1;
            goto label_94;
          case 37:
            num3 = (int) num4 * -1002382204 ^ 396802218;
            continue;
          case 38:
            num2 = x.Rank + num7;
            if (num1 >= 0)
            {
              num3 = (int) num4 * -1610192209 ^ -998868067;
              continue;
            }
            goto label_89;
          case 39:
            int num26 = flag7 ? -1575982031 : (num26 = -331963628);
            num3 = num26 ^ (int) num4 * 1158752036;
            continue;
          case 40:
            num5 = x.File + 1;
            flag9 = num8 >= 0;
            num3 = (int) num4 * 2104992015 ^ 121942342;
            continue;
          case 41:
            this.addMove(num1, num2, x);
            num3 = (int) num4 * -23063001 ^ -145469576;
            continue;
          case 42:
            flag4 = !square.IsEmpty;
            num3 = (int) num4 * 280722345 ^ -296874454;
            continue;
          case 43:
            flag5 = this.board[num5, x.Rank].Piece != null;
            num3 = (int) num4 * -1834225384 ^ -300992699;
            continue;
          case 44:
            int num27 = square.IsEmpty ? -986065989 : (num27 = -719380718);
            num3 = num27 ^ (int) num4 * 342196223;
            continue;
          case 45:
            num14 = 2;
            goto label_48;
          case 46:
            this.addCapture(num8, b, x, this.board[num8, x.Rank].Piece);
            num3 = (int) num4 * 989016288 ^ 759255262;
            continue;
          case 47:
            goto label_1;
          case 48:
            square = this.board[num1, num2];
            num3 = (int) num4 * 1281869774 ^ 1091778504;
            continue;
          case 49:
            num1 = x.File - 1;
            num3 = 1708406509;
            continue;
          case 50:
            flag8 = num5 < 8;
            num3 = 1576483057;
            continue;
          case 51:
            num3 = (int) num4 * 1440412355 ^ 218531335;
            continue;
          case 52:
            this.addMove(num1, num2, x);
            num3 = (int) num4 * 551267445 ^ -1053903058;
            continue;
          case 53:
            num3 = 1870495848;
            continue;
          case 54:
            int num28 = flag8 ? 1546011902 : (num28 = 1811250836);
            num3 = num28 ^ (int) num4 * 461922933;
            continue;
          case 55:
            square = this.board[num1, num2];
            num3 = (int) num4 * 1909185637 ^ -47909520;
            continue;
          case 56:
            num13 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            break;
          case 57:
            num3 = (int) num4 * -948219148 ^ -954588223;
            continue;
          case 58:
            num18 = num2 < 8 ? 1 : 0;
            goto label_98;
          case 59:
            int num29 = flag4 ? -1890981027 : (num29 = -1509872471);
            num3 = num29 ^ (int) num4 * -454402271;
            continue;
          case 60:
            flag1 = this.board.lastPassantPawn == this.board[num5, x.Rank].Piece;
            num3 = (int) num4 * 502960104 ^ -478710891;
            continue;
          case 61:
            num3 = 1972083045;
            continue;
          case 62:
            if (num1 < 8)
            {
              num3 = (int) num4 * -532346663 ^ 113828867;
              continue;
            }
            goto label_97;
          case 63:
            num17 = this.board[num5, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_63;
          case 64:
            num3 = (int) num4 * 324146203 ^ 1729346674;
            continue;
          case 65:
            num3 = (int) num4 * -2070349596 ^ 2019159724;
            continue;
          case 66:
            if (num2 >= 0)
            {
              num3 = (int) num4 * -1857745704 ^ -421558603;
              continue;
            }
            goto label_97;
          case 67:
            int num30 = !flag2 ? 1320688878 : (num30 = 847285379);
            num3 = num30 ^ (int) num4 * -1594430219;
            continue;
          default:
            goto label_102;
        }
label_8:
        bool flag11 = num13 != 0;
        bool flag12;
        if (!flag12)
        {
          num3 = 126764374;
          continue;
        }
        num14 = 5;
        goto label_48;
label_15:
        flag2 = num11 != 0;
        num3 = 1568163800;
        continue;
label_19:
        num6 = num15;
        if (x.Piece.Color != PieceColor.White)
        {
          num3 = 396317623;
          continue;
        }
        num16 = 1;
        goto label_94;
label_25:
        flag12 = num12 != 0;
        if (x.Rank != 3)
        {
          num13 = 0;
          goto label_8;
        }
        else
        {
          num3 = 147085395;
          continue;
        }
label_48:
        b = num14;
        flag7 = flag12 | flag11;
        num3 = 112850192;
        continue;
label_55:
        int num31;
        num3 = num31 = num10 != 0 ? 866466259 : (num31 = 2044586965);
        continue;
label_63:
        int num32;
        num3 = num32 = num17 != 0 ? 582853919 : (num32 = 397880234);
        continue;
label_89:
        num9 = 0;
label_90:
        int num33;
        num3 = num33 = num9 == 0 ? 1972083045 : (num33 = 1579518438);
        continue;
label_94:
        num7 = num16;
        num3 = 1357808707;
        continue;
label_97:
        num18 = 0;
label_98:
        int num34;
        num3 = num34 = num18 != 0 ? 1540102902 : (num34 = 1038039122);
      }
label_3:
      return;
label_102:;
    }

    private void handleQueen(Square x)
    {
      this.handleRook(x);
label_1:
      int num1 = 364860150;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 220066880)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1544853785 ^ -1762685903;
            continue;
          case 2:
            this.handleBishop(x);
            num1 = (int) num2 * 1470227463 ^ 473543243;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void handleKing(Square x)
    {
      this.addMove(x.File + 1, x.Rank + 1, x);
label_1:
      int num1 = -1197165845;
      bool canCastleQueenSide;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1333551218)) % 23U)
        {
          case 0:
            canCastleQueenSide = this.board.BlackCanCastleQueenSide;
            num1 = -875933622;
            continue;
          case 1:
            int num3;
            num1 = num3 = !this.board.WhiteCanCastleQueenSide ? -95982257 : (num3 = -858661461);
            continue;
          case 2:
            num1 = -916709020;
            continue;
          case 3:
            this.addMove(x.File + 1, x.Rank, x);
            num1 = (int) num2 * -1946674808 ^ 1193044857;
            continue;
          case 4:
            this.handleSmallCastling(x);
            num1 = (int) num2 * 798025756 ^ -1577523846;
            continue;
          case 5:
            goto label_1;
          case 6:
            goto label_3;
          case 7:
            int num4 = x.Piece.Color != PieceColor.White ? -445125417 : (num4 = -270497287);
            num1 = num4 ^ (int) num2 * -662447608;
            continue;
          case 8:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -853844072 ^ -289292114;
            continue;
          case 9:
            int num5 = !this.board.BlackCanCastleKingSide ? 818175569 : (num5 = 1043473010);
            num1 = num5 ^ (int) num2 * 1197498151;
            continue;
          case 10:
            num1 = (int) num2 * 1642755473 ^ -602799082;
            continue;
          case 11:
            int num6 = !canCastleQueenSide ? -81027699 : (num6 = -1213754268);
            num1 = num6 ^ (int) num2 * 140356481;
            continue;
          case 12:
            num1 = -1849252521;
            continue;
          case 13:
            int num7 = !this.board.WhiteCanCastleKingSide ? -1956539840 : (num7 = -355203596);
            num1 = num7 ^ (int) num2 * -804688738;
            continue;
          case 14:
            this.addMove(x.File - 1, x.Rank + 1, x);
            this.addMove(x.File - 1, x.Rank - 1, x);
            num1 = (int) num2 * 248154275 ^ -641786355;
            continue;
          case 15:
            num1 = (int) num2 * 1770088113 ^ 1206789529;
            continue;
          case 16:
            this.handleBigCastling(x);
            num1 = (int) num2 * 238818720 ^ 1288983841;
            continue;
          case 17:
            int num8;
            num1 = num8 = x.Piece.Color == PieceColor.Black ? -864260648 : (num8 = -916709020);
            continue;
          case 18:
            num1 = (int) num2 * 1791785421 ^ -409584756;
            continue;
          case 19:
            this.addMove(x.File - 1, x.Rank, x);
            this.addMove(x.File, x.Rank + 1, x);
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * 300780831 ^ 813621215;
            continue;
          case 20:
            this.handleBigCastling(x);
            num1 = (int) num2 * -1860022769 ^ -324777116;
            continue;
          case 21:
            this.addMove(x.File + 1, x.Rank - 1, x);
            num1 = (int) num2 * 2110916279 ^ -916677333;
            continue;
          case 22:
            num1 = (int) num2 * 1307294224 ^ 1137323193;
            continue;
          default:
            goto label_25;
        }
      }
label_3:
      return;
label_25:;
    }

    private void handleBigCastling(Square x)
    {
      Square square1 = this.board[x.File - 1, x.Rank];
      Square square2 = this.board[x.File - 2, x.Rank];
      Square square3 = this.board[x.File - 3, x.Rank];
label_1:
      int num1 = 1731924468;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 791795823)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 1557391244 ^ 764252455;
              continue;
            }
            break;
          case 2:
            int num4 = !flag ? 1573803748 : (num4 = 552400399);
            num1 = num4 ^ (int) num2 * 1009332573;
            continue;
          case 3:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * 1139465168 ^ 1892958463;
              continue;
            }
            break;
          case 4:
            num3 = square3.IsEmpty ? 1 : 0;
            goto label_8;
          case 5:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * -627642768 ^ 1559270400;
            continue;
          case 6:
            goto label_3;
          default:
            goto label_13;
        }
        num3 = 0;
label_8:
        flag = num3 != 0;
        num1 = 1226171675;
      }
label_3:
      return;
label_13:;
    }

    private void handleSmallCastling(Square x)
    {
      Square square1 = this.board[x.File + 1, x.Rank];
      Square square2 = this.board[x.File + 2, x.Rank];
      if (!square1.IsEmpty)
        goto label_7;
label_1:
      int num1 = -718916905;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -770133517)) % 5U)
        {
          case 0:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * 166781849 ^ 326910571;
            continue;
          case 1:
            goto label_6;
          case 2:
            goto label_1;
          case 3:
            int num3 = !flag ? -838146990 : (num3 = -1526411574);
            num1 = num3 ^ (int) num2 * -1403779515;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:
      return;
label_6:
      int num4 = square2.IsEmpty ? 1 : 0;
      goto label_8;
label_7:
      num4 = 0;
label_8:
      flag = num4 != 0;
      num1 = -1670663690;
      goto label_2;
    }

    private void handleRook(Square x)
    {
      int num1 = 1;
label_1:
      int num2 = -270504680;
      int num3;
      int num4;
      int num5;
      bool flag1;
      int a1;
      bool flag2;
      bool flag3;
      int a2;
      int b1;
      bool flag4;
      bool flag5;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num2 ^ -1230892931)) % 37U)
        {
          case 0:
            b1 = x.Rank - num3;
            num2 = -399425990;
            continue;
          case 1:
            num2 = -1220526120;
            continue;
          case 2:
            int b2 = x.Rank + num1;
            int num7;
            num2 = num7 = this.addMove(x.File, b2, x) ? -834894580 : (num7 = -1997415627);
            continue;
          case 3:
            ++num1;
            num2 = (int) num6 * -1634537139 ^ -378895461;
            continue;
          case 4:
            goto label_3;
          case 5:
            num2 = (int) num6 * -1381727718 ^ -2089200040;
            continue;
          case 6:
            int num8 = flag1 ? 349480947 : (num8 = 584469362);
            num2 = num8 ^ (int) num6 * 767298526;
            continue;
          case 7:
            num2 = (int) num6 * -89643015 ^ 1679521420;
            continue;
          case 8:
            int num9;
            num2 = num9 = num5 < 8 ? -552970212 : (num9 = -1755335951);
            continue;
          case 9:
            int num10;
            num2 = num10 = num4 < 8 ? -2008611820 : (num10 = -1581865544);
            continue;
          case 10:
            num3 = 1;
            num2 = -2010371120;
            continue;
          case 11:
            a2 = x.File + num4;
            num2 = (int) num6 * -2123801259 ^ -454857353;
            continue;
          case 12:
            num4 = 1;
            num2 = -950807824;
            continue;
          case 13:
            flag3 = this.addMove(x.File, b1, x);
            num2 = (int) num6 * -128939221 ^ -618623022;
            continue;
          case 14:
            flag5 = num3 < 8;
            num2 = -360746304;
            continue;
          case 15:
            ++num4;
            num2 = (int) num6 * 1839161146 ^ -1267172852;
            continue;
          case 16:
            num2 = -932056161;
            continue;
          case 17:
            flag2 = this.addMove(a1, x.Rank, x);
            num2 = (int) num6 * -689311174 ^ 1897781643;
            continue;
          case 18:
            flag1 = this.addMove(a2, x.Rank, x);
            num2 = (int) num6 * 1768297018 ^ -1472237372;
            continue;
          case 19:
            num2 = (int) num6 * 1703415145 ^ -369381957;
            continue;
          case 20:
            int num11 = flag3 ? 970178692 : (num11 = 200953391);
            num2 = num11 ^ (int) num6 * 120594746;
            continue;
          case 21:
            goto label_1;
          case 22:
            num2 = -1683639957;
            continue;
          case 23:
            flag4 = num1 < 8;
            num2 = -1516748751;
            continue;
          case 24:
            ++num3;
            num2 = -85192503;
            continue;
          case 25:
            num2 = -451404693;
            continue;
          case 26:
            num2 = (int) num6 * 451360940 ^ 393255101;
            continue;
          case 27:
            num5 = 1;
            num2 = -545270825;
            continue;
          case 28:
            num2 = (int) num6 * 591805681 ^ -1262995146;
            continue;
          case 29:
            int num12 = !flag5 ? -1377598878 : (num12 = -1699162279);
            num2 = num12 ^ (int) num6 * -2021024644;
            continue;
          case 30:
            int num13 = flag4 ? 1493186156 : (num13 = 1927743694);
            num2 = num13 ^ (int) num6 * -89854238;
            continue;
          case 31:
            num2 = (int) num6 * 204561972 ^ 192961314;
            continue;
          case 32:
            ++num5;
            num2 = (int) num6 * 1047465289 ^ -1110293645;
            continue;
          case 33:
            a1 = x.File - num5;
            num2 = (int) num6 * 910870730 ^ 471505378;
            continue;
          case 34:
            num2 = (int) num6 * -576696462 ^ 2080003845;
            continue;
          case 35:
            num2 = -363978801;
            continue;
          case 36:
            int num14 = flag2 ? -612844638 : (num14 = -32318699);
            num2 = num14 ^ (int) num6 * 393362970;
            continue;
          default:
            goto label_39;
        }
      }
label_3:
      return;
label_39:;
    }

    private void handleBishop(Square x)
    {
label_1:
      int num1 = 186974720;
      int num2;
      int a1;
      int b1;
      int num3;
      int a2;
      int b2;
      bool flag1;
      int num4;
      bool flag2;
      int a3;
      int b3;
      int num5;
      int a4;
      bool flag3;
      bool flag4;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 1808038429)) % 38U)
        {
          case 0:
            num4 = 1;
            num1 = 1268473254;
            continue;
          case 1:
            ++num2;
            num1 = (int) num6 * -700150424 ^ 764228926;
            continue;
          case 2:
            ++num4;
            num1 = (int) num6 * 659890134 ^ -1504061626;
            continue;
          case 3:
            int num7;
            num1 = num7 = num5 < 8 ? 1029766597 : (num7 = 406813941);
            continue;
          case 4:
            num1 = (int) num6 * 2121410987 ^ 831374558;
            continue;
          case 5:
            ++num3;
            num1 = 1053052330;
            continue;
          case 6:
            num1 = (int) num6 * 617211142 ^ -775950226;
            continue;
          case 7:
            num1 = 1118936653;
            continue;
          case 8:
            int b4 = x.Rank + num4;
            flag3 = this.addMove(a4, b4, x);
            num1 = (int) num6 * 1287552529 ^ -1091377328;
            continue;
          case 9:
            a1 = x.File - num2;
            b1 = x.Rank - num2;
            num1 = 1530922133;
            continue;
          case 10:
            num1 = 241354762;
            continue;
          case 11:
            num1 = (int) num6 * -1371370687 ^ -2145174718;
            continue;
          case 12:
            num1 = (int) num6 * 2020390731 ^ 1079775735;
            continue;
          case 13:
            flag1 = this.addMove(a2, b2, x);
            num1 = (int) num6 * 1739181876 ^ -1710685867;
            continue;
          case 14:
            num1 = 254929115;
            continue;
          case 15:
            int num8;
            num1 = num8 = num2 < 8 ? 350725542 : (num8 = 1773641989);
            continue;
          case 16:
            int num9 = flag1 ? 447644779 : (num9 = 1692244628);
            num1 = num9 ^ (int) num6 * 638164955;
            continue;
          case 17:
            b2 = x.Rank + num3;
            num1 = (int) num6 * 1793980900 ^ 2034987474;
            continue;
          case 18:
            goto label_1;
          case 19:
            int num10;
            num1 = num10 = num3 < 8 ? 1487693417 : (num10 = 893178832);
            continue;
          case 20:
            int num11 = flag4 ? -464464100 : (num11 = -483904255);
            num1 = num11 ^ (int) num6 * 982755504;
            continue;
          case 21:
            flag2 = num4 < 8;
            num1 = 1376555478;
            continue;
          case 22:
            num1 = 1016889193;
            continue;
          case 23:
            a4 = x.File - num4;
            num1 = 834838517;
            continue;
          case 24:
            flag4 = this.addMove(a1, b1, x);
            num1 = (int) num6 * -482731976 ^ 1880009227;
            continue;
          case 25:
            num1 = (int) num6 * 733021598 ^ -797041573;
            continue;
          case 26:
            goto label_3;
          case 27:
            a2 = x.File + num3;
            num1 = (int) num6 * 1793723707 ^ 1010265211;
            continue;
          case 28:
            num2 = 1;
            num1 = 1088668819;
            continue;
          case 29:
            int num12 = flag3 ? 1484769324 : (num12 = 1772336860);
            num1 = num12 ^ (int) num6 * 1597640874;
            continue;
          case 30:
            num1 = (int) num6 * -1291544339 ^ -1259728672;
            continue;
          case 31:
            int num13 = flag2 ? -1287426430 : (num13 = -834066985);
            num1 = num13 ^ (int) num6 * 1931017250;
            continue;
          case 32:
            a3 = x.File + num5;
            b3 = x.Rank - num5;
            num1 = (int) num6 * -744078615 ^ 759304992;
            continue;
          case 33:
            num5 = 1;
            num1 = 2137939687;
            continue;
          case 34:
            num1 = 1104030868;
            continue;
          case 35:
            int num14 = !this.addMove(a3, b3, x) ? 1509839187 : (num14 = 948527905);
            num1 = num14 ^ (int) num6 * 1190911850;
            continue;
          case 36:
            ++num5;
            num1 = (int) num6 * 910125419 ^ -1066139280;
            continue;
          case 37:
            num3 = 1;
            num1 = (int) num6 * -2071699656 ^ -2128788238;
            continue;
          default:
            goto label_40;
        }
      }
label_3:
      return;
label_40:;
    }

    private void handleKnight(Square x)
    {
      ChessPiece piece = x.Piece;
      int[] numArray1 = new int[8];
      // ISSUE: field reference
      MoveFinder.\u206D⁮​‎​‌⁫⁭‫⁬‎‮‪⁭‍​‭⁯‍‪⁫⁫‮⁭⁪⁫⁫⁫⁬⁪‮‪⁪‏‍‎⁬⁮‫‪‮((Array) numArray1, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
      int[] numArray2 = numArray1;
label_1:
      int num1 = 1176000205;
      while (true)
      {
        uint num2;
        int index;
        int[] numArray3;
        int Rank;
        int File;
        Square sq;
        bool flag1;
        bool flag2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 438849496)) % 20U)
        {
          case 0:
            goto label_1;
          case 1:
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206D⁮​‎​‌⁫⁭‫⁬‎‮‪⁭‍​‭⁯‍‪⁫⁫‮⁭⁪⁫⁫⁫⁬⁪‮‪⁪‏‍‎⁬⁮‫‪‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray3 = numArray4;
            num1 = (int) num2 * 197764977 ^ -394557505;
            continue;
          case 2:
            sq = this.board[File, Rank];
            int num4;
            num1 = num4 = !sq.IsEmpty ? 1072876240 : (num4 = 1269391501);
            continue;
          case 3:
            goto label_3;
          case 4:
            if (Rank >= 0)
            {
              num1 = (int) num2 * 2085917546 ^ 1489257594;
              continue;
            }
            break;
          case 5:
            File = x.File + numArray2[index];
            num1 = 53485958;
            continue;
          case 6:
            index = 0;
            num1 = (int) num2 * 1116965861 ^ -1670204095;
            continue;
          case 7:
            int num5 = !flag1 ? 2095736974 : (num5 = 911777835);
            num1 = num5 ^ (int) num2 * 436059639;
            continue;
          case 8:
            ++index;
            num1 = 1178894379;
            continue;
          case 9:
            num1 = (int) num2 * 1288566552 ^ -1480530349;
            continue;
          case 10:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * -1385944534 ^ -1750256201;
            continue;
          case 11:
            num1 = (int) num2 * -265287338 ^ 27081894;
            continue;
          case 12:
            int num6 = flag2 ? -1512594875 : (num6 = -2050175009);
            num1 = num6 ^ (int) num2 * 1624250803;
            continue;
          case 13:
            num3 = Rank > 7 ? 1 : 0;
            goto label_16;
          case 14:
            if (File <= 7)
            {
              num1 = (int) num2 * -537699848 ^ 265630053;
              continue;
            }
            break;
          case 15:
            flag2 = index < 8;
            num1 = 402486976;
            continue;
          case 16:
            flag1 = sq.Piece.Color != x.Piece.Color;
            num1 = 523258907;
            continue;
          case 17:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -579053832 ^ -640805035;
            continue;
          case 18:
            Rank = x.Rank + numArray3[index];
            if (File >= 0)
            {
              num1 = (int) num2 * -725023750 ^ 479790212;
              continue;
            }
            break;
          case 19:
            num1 = 551652396;
            continue;
          default:
            goto label_27;
        }
        num3 = 1;
label_16:
        int num7;
        num1 = num7 = num3 == 0 ? 930046418 : (num7 = 1714157847);
      }
label_3:
      return;
label_27:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
label_1:
      int num1 = -1711880005;
      ChessPiece piece;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1367120334)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            piece = x.Piece;
            num1 = (int) num2 * -1624491138 ^ 1018479587;
            continue;
          case 2:
            goto label_3;
          case 3:
            Square sq = this.board[a, b];
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * 1745345624 ^ -1549676660;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private bool addMove(int a, int b, Square x)
    {
label_1:
      int num1 = 392520540;
      bool flag1;
      while (true)
      {
        uint num2;
        ChessPiece piece;
        Square sq;
        UserAction kind;
        bool flag2;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1713926439)) % 27U)
        {
          case 0:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 1867625932 ^ -1432023145;
            continue;
          case 1:
            if (a >= 0)
            {
              num1 = (int) num2 * -871108488 ^ -2047810652;
              continue;
            }
            goto label_27;
          case 2:
            int num5 = sq.Piece.Kind != Pieces.King ? -1849452454 : (num5 = -1294028206);
            num1 = num5 ^ (int) num2 * -1063613625;
            continue;
          case 3:
            int num6 = flag2 ? -602570192 : (num6 = -964226146);
            num1 = num6 ^ (int) num2 * -634230212;
            continue;
          case 4:
            num1 = (int) num2 * -1293375589 ^ -1116268381;
            continue;
          case 5:
            kind = UserAction.Capture;
            num1 = (int) num2 * -1017080520 ^ 1389336112;
            continue;
          case 6:
            sq = this.board[a, b];
            num1 = (int) num2 * 853040009 ^ 495291272;
            continue;
          case 7:
            flag1 = true;
            num1 = 1936338590;
            continue;
          case 8:
            piece = x.Piece;
            num1 = 1139106474;
            continue;
          case 9:
            flag1 = true;
            num1 = (int) num2 * 484439659 ^ -1752884168;
            continue;
          case 10:
            if (b >= 0)
            {
              num1 = (int) num2 * -89858025 ^ 899298864;
              continue;
            }
            goto label_27;
          case 11:
            num3 = b > 7 ? 1 : 0;
            goto label_28;
          case 12:
            num1 = (int) num2 * 734565443 ^ 734716076;
            continue;
          case 14:
            flag1 = true;
            num1 = (int) num2 * -885906682 ^ 98317370;
            continue;
          case 15:
            flag2 = sq.Piece.Color != x.Piece.Color;
            num1 = 1083614473;
            continue;
          case 16:
            flag1 = false;
            num1 = 1936338590;
            continue;
          case 17:
            if (x.Piece.Kind == Pieces.King)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * -979320685 ^ -202156542;
            continue;
          case 18:
            goto label_1;
          case 19:
            int num7 = sq.IsEmpty ? -212803368 : (num7 = -1698930483);
            num1 = num7 ^ (int) num2 * -326949050;
            continue;
          case 20:
            num1 = (int) num2 * -656361462 ^ 1006394300;
            continue;
          case 21:
            if (a <= 7)
            {
              num1 = (int) num2 * 141665973 ^ 1834382341;
              continue;
            }
            goto label_27;
          case 22:
            this.KingColorOnCheck = sq.Piece.Color;
            this.IsOnCheck = true;
            num1 = (int) num2 * 12276895 ^ 563590765;
            continue;
          case 23:
            num4 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            break;
          case 24:
            num1 = 927590019;
            continue;
          case 25:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = 1332368469;
            continue;
          case 26:
            num1 = (int) num2 * -459083783 ^ 172919903;
            continue;
          default:
            goto label_36;
        }
        int num8;
        num1 = num8 = num4 != 0 ? 58672935 : (num8 = 524354517);
        continue;
label_27:
        num3 = 1;
label_28:
        int num9;
        num1 = num9 = num3 != 0 ? 2117380065 : (num9 = 2084450825);
      }
label_36:
      return flag1;
    }

    static void \u206D⁮​‎​‌⁫⁭‫⁬‎‮‪⁭‍​‭⁯‍‪⁫⁫‮⁭⁪⁫⁫⁫⁬⁪‮‪⁪‏‍‎⁬⁮‫‪‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
