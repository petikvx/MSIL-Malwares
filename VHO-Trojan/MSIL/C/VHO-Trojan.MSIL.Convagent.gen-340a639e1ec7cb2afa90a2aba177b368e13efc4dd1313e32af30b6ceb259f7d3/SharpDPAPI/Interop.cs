// Decompiled with JetBrains decompiler
// Type: SharpDPAPI.Interop
// Assembly: SharpChrome, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D938FA4A-3611-4CA7-B3BE-AF9F6D845B7B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\VHO-Trojan.MSIL.Convagent.gen-340a639e1ec7cb2afa90a2aba177b368e13efc4dd1313e32af30b6ceb259f7d3.exe

using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Text;

namespace SharpDPAPI
{
  public class Interop
  {
    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern uint LsaOpenPolicy(
      ref Interop.LSA_UNICODE_STRING SystemName,
      ref Interop.LSA_OBJECT_ATTRIBUTES ObjectAttributes,
      uint DesiredAccess,
      out IntPtr PolicyHandle);

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern uint LsaRetrievePrivateData(
      IntPtr PolicyHandle,
      ref Interop.LSA_UNICODE_STRING KeyName,
      out IntPtr PrivateData);

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern uint LsaNtStatusToWinError(uint status);

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern uint LsaClose(IntPtr ObjectHandle);

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern uint LsaFreeMemory(IntPtr buffer);

    [DllImport("advapi32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool OpenProcessToken(
      IntPtr ProcessHandle,
      uint DesiredAccess,
      out IntPtr TokenHandle);

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern bool DuplicateToken(
      IntPtr ExistingTokenHandle,
      int SECURITY_IMPERSONATION_LEVEL,
      ref IntPtr DuplicateTokenHandle);

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern bool ImpersonateLoggedOnUser(IntPtr hToken);

    [DllImport("kernel32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool CloseHandle(IntPtr hObject);

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern bool RevertToSelf();

    [DllImport("Advapi32")]
    public static extern bool IsTextUnicode(
      byte[] buf,
      int len,
      ref Interop.IsTextUnicodeFlags opt);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto)]
    public static extern int RegOpenKeyEx(
      uint hKey,
      string subKey,
      int ulOptions,
      int samDesired,
      ref IntPtr hkResult);

    [DllImport("advapi32.dll")]
    public static extern int RegQueryInfoKey(
      IntPtr hkey,
      StringBuilder lpClass,
      ref int lpcbClass,
      int lpReserved,
      ref IntPtr lpcSubKeys,
      ref IntPtr lpcbMaxSubKeyLen,
      ref IntPtr lpcbMaxClassLen,
      ref IntPtr lpcValues,
      ref IntPtr lpcbMaxValueNameLen,
      ref IntPtr lpcbMaxValueLen,
      ref IntPtr lpcbSecurityDescriptor,
      IntPtr lpftLastWriteTime);

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern int RegQueryValueEx(
      IntPtr hKey,
      string lpValueName,
      int lpReserved,
      IntPtr type,
      IntPtr lpData,
      ref int lpcbData);

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern int RegCloseKey(IntPtr hKey);

    [DllImport("shlwapi.dll", CharSet = CharSet.Unicode)]
    [return: MarshalAs(UnmanagedType.Bool)]
    internal static extern bool PathIsUNC([MarshalAs(UnmanagedType.LPWStr), In] string pszPath);

    [DllImport("Netapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern int DsGetDcName(
      [MarshalAs(UnmanagedType.LPTStr)] string ComputerName,
      [MarshalAs(UnmanagedType.LPTStr)] string DomainName,
      [In] int DomainGuid,
      [MarshalAs(UnmanagedType.LPTStr)] string SiteName,
      [MarshalAs(UnmanagedType.U4)] Interop.DSGETDCNAME_FLAGS flags,
      out IntPtr pDOMAIN_CONTROLLER_INFO);

    [DllImport("Netapi32.dll", SetLastError = true)]
    public static extern int NetApiBufferFree(IntPtr Buffer);

    public static string GetDCName()
    {
      IntPtr pDOMAIN_CONTROLLER_INFO = IntPtr.Zero;
      int dcName = Interop.DsGetDcName("", "", 0, "", Interop.DSGETDCNAME_FLAGS.DS_DIRECTORY_SERVICE_REQUIRED | Interop.DSGETDCNAME_FLAGS.DS_IP_REQUIRED | Interop.DSGETDCNAME_FLAGS.DS_RETURN_DNS_NAME, out pDOMAIN_CONTROLLER_INFO);
      if (dcName == 0)
      {
        string domainControllerName = ((Interop.DOMAIN_CONTROLLER_INFO) Marshal.PtrToStructure(pDOMAIN_CONTROLLER_INFO, typeof (Interop.DOMAIN_CONTROLLER_INFO))).DomainControllerName;
        Interop.NetApiBufferFree(pDOMAIN_CONTROLLER_INFO);
        char[] chArray = new char[1]{ '\\' };
        return domainControllerName.Trim(chArray);
      }
      string message = new Win32Exception(dcName).Message;
      Console.WriteLine("\r\n  [X] Error {0} retrieving domain controller : {1}", (object) dcName, (object) message);
      Interop.NetApiBufferFree(pDOMAIN_CONTROLLER_INFO);
      return "";
    }

    public enum CryptAlgClass : uint
    {
      ALG_CLASS_ANY = 0,
      ALG_CLASS_SIGNATURE = 8192, // 0x00002000
      ALG_CLASS_MSG_ENCRYPT = 16384, // 0x00004000
      ALG_CLASS_DATA_ENCRYPT = 24576, // 0x00006000
      ALG_CLASS_HASH = 32768, // 0x00008000
      ALG_CLASS_KEY_EXCHANGE = 40960, // 0x0000A000
      ALG_CLASS_ALL = 57344, // 0x0000E000
    }

    public enum CryptAlgType : uint
    {
      ALG_TYPE_ANY = 0,
      ALG_TYPE_DSS = 512, // 0x00000200
      ALG_TYPE_RSA = 1024, // 0x00000400
      ALG_TYPE_BLOCK = 1536, // 0x00000600
      ALG_TYPE_STREAM = 2048, // 0x00000800
      ALG_TYPE_DH = 2560, // 0x00000A00
      ALG_TYPE_SECURECHANNEL = 3072, // 0x00000C00
    }

    public enum CryptAlgSID : uint
    {
      ALG_SID_ANY = 0,
      ALG_SID_DSS_ANY = 0,
      ALG_SID_RSA_ANY = 0,
      ALG_SID_DES = 1,
      ALG_SID_DH_SANDF = 1,
      ALG_SID_DSS_PKCS = 1,
      ALG_SID_ECMQV = 1,
      ALG_SID_MD2 = 1,
      ALG_SID_RC4 = 1,
      ALG_SID_RSA_PKCS = 1,
      ALG_SID_SSL3_MASTER = 1,
      ALG_SID_DH_EPHEM = 2,
      ALG_SID_DSS_DMS = 2,
      ALG_SID_MD4 = 2,
      ALG_SID_RC2 = 2,
      ALG_SID_RSA_MSATWORK = 2,
      ALG_SID_SCHANNEL_MASTER_HASH = 2,
      ALG_SID_SEAL = 2,
      ALG_SID_3DES = 3,
      ALG_SID_AGREED_KEY_ANY = 3,
      ALG_SID_ECDSA = 3,
      ALG_SID_MD5 = 3,
      ALG_SID_RSA_ENTRUST = 3,
      ALG_SID_SCHANNEL_MAC_KEY = 3,
      ALG_SID_DESX = 4,
      ALG_SID_KEA = 4,
      ALG_SID_PCT1_MASTER = 4,
      ALG_SID_RSA_PGP = 4,
      ALG_SID_SHA = 4,
      ALG_SID_SHA1 = 4,
      ALG_SID_ECDH = 5,
      ALG_SID_IDEA = 5,
      ALG_SID_MAC = 5,
      ALG_SID_SSL2_MASTER = 5,
      ALG_SID_CAST = 6,
      ALG_SID_RIPEMD = 6,
      ALG_SID_TLS1_MASTER = 6,
      ALG_SID_RIPEMD160 = 7,
      ALG_SID_SAFERSK64 = 7,
      ALG_SID_SCHANNEL_ENC_KEY = 7,
      ALG_SID_SAFERSK128 = 8,
      ALG_SID_SSL3SHAMD5 = 8,
      ALG_SID_3DES_112 = 9,
      ALG_SID_HMAC = 9,
      ALG_SID_SKIPJACK = 10, // 0x0000000A
      ALG_SID_TLS1PRF = 10, // 0x0000000A
      ALG_SID_HASH_REPLACE_OWF = 11, // 0x0000000B
      ALG_SID_TEK = 11, // 0x0000000B
      ALG_SID_CYLINK_MEK = 12, // 0x0000000C
      ALG_SID_SHA_256 = 12, // 0x0000000C
      ALG_SID_RC5 = 13, // 0x0000000D
      ALG_SID_SHA_384 = 13, // 0x0000000D
      ALG_SID_AES_128 = 14, // 0x0000000E
      ALG_SID_SHA_512 = 14, // 0x0000000E
      ALG_SID_AES_192 = 15, // 0x0000000F
      ALG_SID_AES_256 = 16, // 0x00000010
      ALG_SID_AES = 17, // 0x00000011
    }

    public enum CryptAlg : uint
    {
      CALG_NO_SIGN = 8192, // 0x00002000
      CALG_DSS_SIGN = 8704, // 0x00002200
      CALG_ECDSA = 8707, // 0x00002203
      CALG_RSA_SIGN = 9216, // 0x00002400
      CALG_SSL3_MASTER = 19457, // 0x00004C01
      CALG_SCHANNEL_MASTER_HASH = 19458, // 0x00004C02
      CALG_SCHANNEL_MAC_KEY = 19459, // 0x00004C03
      CALG_PCT1_MASTER = 19460, // 0x00004C04
      CALG_SSL2_MASTER = 19461, // 0x00004C05
      CALG_TLS1_MASTER = 19462, // 0x00004C06
      CALG_SCHANNEL_ENC_KEY = 19463, // 0x00004C07
      CALG_DES = 26113, // 0x00006601
      CALG_RC2 = 26114, // 0x00006602
      CALG_3DES = 26115, // 0x00006603
      CALG_DESX = 26116, // 0x00006604
      CALG_3DES_112 = 26121, // 0x00006609
      CALG_SKIPJACK = 26122, // 0x0000660A
      CALG_TEK = 26123, // 0x0000660B
      CALG_CYLINK_MEK = 26124, // 0x0000660C
      CALG_RC5 = 26125, // 0x0000660D
      CALG_AES_128 = 26126, // 0x0000660E
      CALG_AES_192 = 26127, // 0x0000660F
      CALG_AES_256 = 26128, // 0x00006610
      CALG_AES = 26129, // 0x00006611
      CALG_RC4 = 26625, // 0x00006801
      CALG_SEAL = 26626, // 0x00006802
      CALG_MD2 = 32769, // 0x00008001
      CALG_MD4 = 32770, // 0x00008002
      CALG_MD5 = 32771, // 0x00008003
      CALG_SHA = 32772, // 0x00008004
      CALG_SHA1 = 32772, // 0x00008004
      CALG_MAC = 32773, // 0x00008005
      CALG_SSL3_SHAMD5 = 32776, // 0x00008008
      CALG_HMAC = 32777, // 0x00008009
      CALG_TLS1PRF = 32778, // 0x0000800A
      CALG_HASH_REPLACE_OWF = 32779, // 0x0000800B
      CALG_SHA_256 = 32780, // 0x0000800C
      CALG_SHA_384 = 32781, // 0x0000800D
      CALG_SHA_512 = 32782, // 0x0000800E
      CALG_ECMQV = 40961, // 0x0000A001
      CALG_HUGHES_MD5 = 40963, // 0x0000A003
      CALG_RSA_KEYX = 41984, // 0x0000A400
      CALG_DH_SF = 43521, // 0x0000AA01
      CALG_DH_EPHEM = 43522, // 0x0000AA02
      CALG_AGREEDKEY_ANY = 43523, // 0x0000AA03
      CALG_KEA_KEYX = 43524, // 0x0000AA04
      CALG_ECDH = 43525, // 0x0000AA05
    }

    public struct LSA_UNICODE_STRING : IDisposable
    {
      public ushort Length;
      public ushort MaximumLength;
      public IntPtr buffer;

      public LSA_UNICODE_STRING(string s)
      {
        this.Length = (ushort) (s.Length * 2);
        this.MaximumLength = (ushort) ((uint) this.Length + 2U);
        this.buffer = Marshal.StringToHGlobalUni(s);
      }

      public void Dispose()
      {
        Marshal.FreeHGlobal(this.buffer);
        this.buffer = IntPtr.Zero;
      }

      public override string ToString() => Marshal.PtrToStringUni(this.buffer);
    }

    public enum POLICY_INFORMATION_CLASS
    {
      PolicyAuditLogInformation = 1,
      PolicyAuditEventsInformation = 2,
      PolicyPrimaryDomainInformation = 3,
      PolicyPdAccountInformation = 4,
      PolicyAccountDomainInformation = 5,
      PolicyLsaServerRoleInformation = 6,
      PolicyReplicaSourceInformation = 7,
      PolicyDefaultQuotaInformation = 8,
      PolicyModificationInformation = 9,
      PolicyAuditFullSetInformation = 10, // 0x0000000A
      PolicyAuditFullQueryInformation = 11, // 0x0000000B
      PolicyDnsDomainInformation = 12, // 0x0000000C
    }

    public enum LSA_AccessPolicy : long
    {
      POLICY_VIEW_LOCAL_INFORMATION = 1,
      POLICY_VIEW_AUDIT_INFORMATION = 2,
      POLICY_GET_PRIVATE_INFORMATION = 4,
      POLICY_TRUST_ADMIN = 8,
      POLICY_CREATE_ACCOUNT = 16, // 0x0000000000000010
      POLICY_CREATE_SECRET = 32, // 0x0000000000000020
      POLICY_CREATE_PRIVILEGE = 64, // 0x0000000000000040
      POLICY_SET_DEFAULT_QUOTA_LIMITS = 128, // 0x0000000000000080
      POLICY_SET_AUDIT_REQUIREMENTS = 256, // 0x0000000000000100
      POLICY_AUDIT_LOG_ADMIN = 512, // 0x0000000000000200
      POLICY_SERVER_ADMIN = 1024, // 0x0000000000000400
      POLICY_LOOKUP_NAMES = 2048, // 0x0000000000000800
      POLICY_NOTIFICATION = 4096, // 0x0000000000001000
    }

    public struct LSA_OBJECT_ATTRIBUTES
    {
      public uint Length;
      public IntPtr RootDirectory;
      public Interop.LSA_UNICODE_STRING ObjectName;
      public uint Attributes;
      public IntPtr SecurityDescriptor;
      public IntPtr SecurityQualityOfService;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct DOMAIN_CONTROLLER_INFO
    {
      [MarshalAs(UnmanagedType.LPTStr)]
      public string DomainControllerName;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string DomainControllerAddress;
      public uint DomainControllerAddressType;
      public Guid DomainGuid;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string DomainName;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string DnsForestName;
      public uint Flags;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string DcSiteName;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string ClientSiteName;
    }

    [Flags]
    public enum DSGETDCNAME_FLAGS : uint
    {
      DS_FORCE_REDISCOVERY = 1,
      DS_DIRECTORY_SERVICE_REQUIRED = 16, // 0x00000010
      DS_DIRECTORY_SERVICE_PREFERRED = 32, // 0x00000020
      DS_GC_SERVER_REQUIRED = 64, // 0x00000040
      DS_PDC_REQUIRED = 128, // 0x00000080
      DS_BACKGROUND_ONLY = 256, // 0x00000100
      DS_IP_REQUIRED = 512, // 0x00000200
      DS_KDC_REQUIRED = 1024, // 0x00000400
      DS_TIMESERV_REQUIRED = 2048, // 0x00000800
      DS_WRITABLE_REQUIRED = 4096, // 0x00001000
      DS_GOOD_TIMESERV_PREFERRED = 8192, // 0x00002000
      DS_AVOID_SELF = 16384, // 0x00004000
      DS_ONLY_LDAP_NEEDED = 32768, // 0x00008000
      DS_IS_FLAT_NAME = 65536, // 0x00010000
      DS_IS_DNS_NAME = 131072, // 0x00020000
      DS_RETURN_DNS_NAME = 1073741824, // 0x40000000
      DS_RETURN_FLAT_NAME = 2147483648, // 0x80000000
    }

    [Flags]
    public enum IsTextUnicodeFlags
    {
      IS_TEXT_UNICODE_ASCII16 = 1,
      IS_TEXT_UNICODE_REVERSE_ASCII16 = 16, // 0x00000010
      IS_TEXT_UNICODE_STATISTICS = 2,
      IS_TEXT_UNICODE_REVERSE_STATISTICS = 32, // 0x00000020
      IS_TEXT_UNICODE_CONTROLS = 4,
      IS_TEXT_UNICODE_REVERSE_CONTROLS = 64, // 0x00000040
      IS_TEXT_UNICODE_SIGNATURE = 8,
      IS_TEXT_UNICODE_REVERSE_SIGNATURE = 128, // 0x00000080
      IS_TEXT_UNICODE_ILLEGAL_CHARS = 256, // 0x00000100
      IS_TEXT_UNICODE_ODD_LENGTH = 512, // 0x00000200
      IS_TEXT_UNICODE_DBCS_LEADBYTE = 1024, // 0x00000400
      IS_TEXT_UNICODE_NULL_BYTES = 4096, // 0x00001000
      IS_TEXT_UNICODE_UNICODE_MASK = IS_TEXT_UNICODE_SIGNATURE | IS_TEXT_UNICODE_CONTROLS | IS_TEXT_UNICODE_STATISTICS | IS_TEXT_UNICODE_ASCII16, // 0x0000000F
      IS_TEXT_UNICODE_REVERSE_MASK = IS_TEXT_UNICODE_REVERSE_SIGNATURE | IS_TEXT_UNICODE_REVERSE_CONTROLS | IS_TEXT_UNICODE_REVERSE_STATISTICS | IS_TEXT_UNICODE_REVERSE_ASCII16, // 0x000000F0
      IS_TEXT_UNICODE_NOT_UNICODE_MASK = 3840, // 0x00000F00
      IS_TEXT_UNICODE_NOT_ASCII_MASK = 61440, // 0x0000F000
    }
  }
}
