// Decompiled with JetBrains decompiler
// Type: ProtoBuf.Serializers.SubItemSerializer
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using ProtoBuf.Meta;
using System;

namespace ProtoBuf.Serializers
{
  internal sealed class SubItemSerializer : IProtoTypeSerializer, IProtoSerializer
  {
    private readonly int key;
    private readonly Type type;
    private readonly ISerializerProxy proxy;
    private readonly bool recursionCheck;

    bool IProtoTypeSerializer.HasCallbacks(TypeModel.CallbackType callbackType) => ((IProtoTypeSerializer) this.proxy.Serializer).HasCallbacks(callbackType);

    bool IProtoTypeSerializer.CanCreateInstance() => ((IProtoTypeSerializer) this.proxy.Serializer).CanCreateInstance();

    void IProtoTypeSerializer.Callback(
      object value,
      TypeModel.CallbackType callbackType,
      SerializationContext context)
    {
      ((IProtoTypeSerializer) this.proxy.Serializer).Callback(value, callbackType, context);
    }

    object IProtoTypeSerializer.CreateInstance(ProtoReader source) => ((IProtoTypeSerializer) this.proxy.Serializer).CreateInstance(source);

    public SubItemSerializer(Type type, int key, ISerializerProxy proxy, bool recursionCheck)
    {
      if ((object) type == null)
        throw new ArgumentNullException(nameof (type));
      if (proxy == null)
        throw new ArgumentNullException(nameof (proxy));
      this.type = type;
      this.proxy = proxy;
      this.key = key;
      this.recursionCheck = recursionCheck;
    }

    Type IProtoSerializer.ExpectedType => this.type;

    bool IProtoSerializer.RequiresOldValue => true;

    bool IProtoSerializer.ReturnsValue => true;

    void IProtoSerializer.Write(object value, ProtoWriter dest)
    {
      if (this.recursionCheck)
        ProtoWriter.WriteObject(value, this.key, dest);
      else
        ProtoWriter.WriteRecursionSafeObject(value, this.key, dest);
    }

    object IProtoSerializer.Read(object value, ProtoReader source) => ProtoReader.ReadObject(value, this.key, source);
  }
}
