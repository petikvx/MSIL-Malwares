// Decompiled with JetBrains decompiler
// Type: Org.BouncyCastle.Crypto.Digests.GeneralDigest
// Assembly: Poullight, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A9555FC6-4E86-4D22-9A29-AD3955B2BC52
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Trojan-PSW.MSIL.Poul.gen-67cfa95ccaa06c437e04f38c3ef890986c1885c61636b84bf51d16b0d7bf957c.exe

using System;

namespace Org.BouncyCastle.Crypto.Digests
{
  public abstract class GeneralDigest : IDigest
  {
    private const int BYTE_LENGTH = 64;
    private readonly byte[] xBuf;
    private long byteCount;
    private int xBufOff;

    internal GeneralDigest() => this.xBuf = new byte[4];

    public void Update(byte input)
    {
      this.xBuf[this.xBufOff++] = input;
      if (this.xBufOff == this.xBuf.Length)
      {
        this.ProcessWord(this.xBuf, 0);
        this.xBufOff = 0;
      }
      ++this.byteCount;
    }

    public void BlockUpdate(byte[] input, int inOff, int length)
    {
      length = Math.Max(0, length);
      int num = 0;
      if (this.xBufOff != 0)
      {
        while (num < length)
        {
          this.xBuf[this.xBufOff++] = input[inOff + num++];
          if (this.xBufOff == 4)
          {
            this.ProcessWord(this.xBuf, 0);
            this.xBufOff = 0;
            break;
          }
        }
      }
      for (int index = (length - num & -4) + num; num < index; num += 4)
        this.ProcessWord(input, inOff + num);
      while (num < length)
        this.xBuf[this.xBufOff++] = input[inOff + num++];
      this.byteCount += (long) length;
    }

    public virtual void Reset()
    {
      this.byteCount = 0L;
      this.xBufOff = 0;
      Array.Clear((Array) this.xBuf, 0, this.xBuf.Length);
    }

    public int GetByteLength() => 64;

    public abstract string AlgorithmName { get; }

    public abstract int GetDigestSize();

    public abstract int DoFinal(byte[] output, int outOff);

    public void Finish()
    {
      long bitLength = this.byteCount << 3;
      this.Update((byte) 128);
      while (this.xBufOff != 0)
        this.Update((byte) 0);
      this.ProcessLength(bitLength);
      this.ProcessBlock();
    }

    internal abstract void ProcessWord(byte[] input, int inOff);

    internal abstract void ProcessLength(long bitLength);

    internal abstract void ProcessBlock();
  }
}
