// Decompiled with JetBrains decompiler
// Type: RemotingConfigHand.XmlIgnoreMemberAttrib
// Assembly: DictionaryValueCollect, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 264A7E74-FCA9-4101-A215-90F8B6150D1A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan.MSIL.Crypt.hzzu-0a11971438302748e2f40e97f73af5e24c71212b30c9d6a5aff7ff102e662c94.exe

using System;
using System.IO;
using System.Runtime.InteropServices;

namespace RemotingConfigHand
{
  internal class XmlIgnoreMemberAttrib
  {
    public static string GetBasePath()
    {
label_1:
      int num1 = 1822311964;
      int index;
      string[] strArray;
      string str;
      string basePath;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1499404028)) % 9U)
        {
          case 0:
            basePath = str;
            num1 = (int) num2 * 1393560417 ^ -1430037208;
            continue;
          case 1:
            str = XmlIgnoreMemberAttrib.\u200C‬​​⁭⁮‫‏​‮‫⁫⁭‎‎⁯⁮⁭​⁪⁪‪‎‎⁯‍⁫‬‮‍‭‭‭​‬⁮‮‮‏⁮‮(str, strArray[index], "\\");
            num1 = 495185686;
            continue;
          case 2:
            int num3;
            num1 = num3 = index < strArray.Length - 2 ? 1025733590 : (num3 = 1745959852);
            continue;
          case 3:
            ++index;
            num1 = (int) num2 * 569938631 ^ -1063995302;
            continue;
          case 4:
            strArray = XmlIgnoreMemberAttrib.\u206E​⁮‮⁬‪‪‌‌‮‌⁭⁫⁬‍⁫⁭‌‎‎‏‏⁯‮‪‫‫‏⁫‮​‬⁭‏‏‪‫‭‫⁮‮(XmlIgnoreMemberAttrib.\u206A‪‎⁯⁯‌‫⁮‎‮​​‏⁪‎‭‮‏‬⁮⁬‭‭⁯⁪⁮‍‭‫‮⁫‍⁮‎‎​‭‫⁮⁪‮(), new char[1]
            {
              '\\'
            });
            num1 = (int) num2 * -354207154 ^ -1174208343;
            continue;
          case 5:
            str = string.Empty;
            num1 = (int) num2 * -1260380995 ^ -336252952;
            continue;
          case 6:
            index = 0;
            num1 = (int) num2 * -2064898901 ^ 325905211;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      return basePath;
    }

    public static double RandDoubleInRange(double lower, double upper)
    {
label_1:
      int num1 = -869989845;
      Random random;
      double num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1356545930)) % 4U)
        {
          case 1:
            random = XmlIgnoreMemberAttrib.\u206E⁬‫‍‍⁯​‌‪⁫‮‮​‎‮⁬‪⁯⁭‬⁭‪‏‍⁮‎​‍‪⁯‌‫‮⁮⁪‏‮⁭⁯‫‮();
            num1 = (int) num3 * 1341483196 ^ -1340917735;
            continue;
          case 2:
            goto label_1;
          case 3:
            num2 = XmlIgnoreMemberAttrib.\u200E⁬‏⁫⁪⁯‏‪⁯⁬‎‌‏‬‬‫⁭‮‌⁭⁮​‎⁯⁭‭‌⁯‬⁮‌‮‍⁪⁮‫‎⁪‬‫‮(random) * (upper - lower) + lower;
            num1 = (int) num3 * -382278397 ^ 1381040423;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return num2;
    }

    public static double Max(double[] values)
    {
label_1:
      int num1 = -1670086469;
      int index;
      double num2;
      bool flag1;
      bool flag2;
      double num3;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num1 ^ -1898115082)) % 11U)
        {
          case 0:
            flag2 = index < values.Length;
            num1 = -1081157942;
            continue;
          case 1:
            ++index;
            num1 = -862878044;
            continue;
          case 2:
            num1 = (int) num4 * 228815977 ^ 190493116;
            continue;
          case 3:
            goto label_1;
          case 4:
            num2 = values[index];
            num1 = (int) num4 * 398236794 ^ -181137588;
            continue;
          case 5:
            num2 = values[0];
            index = 1;
            num1 = (int) num4 * 1623071664 ^ 1027876180;
            continue;
          case 6:
            num3 = num2;
            num1 = (int) num4 * -1855447984 ^ 1210229310;
            continue;
          case 8:
            int num5 = flag1 ? 395631077 : (num5 = 1060420455);
            num1 = num5 ^ (int) num4 * 792977443;
            continue;
          case 9:
            int num6 = !flag2 ? 1964936561 : (num6 = 1845894886);
            num1 = num6 ^ (int) num4 * -1509457001;
            continue;
          case 10:
            flag1 = values[index] > num2;
            num1 = -1653541889;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return num3;
    }

    static string \u206A‪‎⁯⁯‌‫⁮‎‮​​‏⁪‎‭‮‏‬⁮⁬‭‭⁯⁪⁮‍‭‫‮⁫‍⁮‎‎​‭‫⁮⁪‮() => Directory.GetCurrentDirectory();

    static string[] \u206E​⁮‮⁬‪‪‌‌‮‌⁭⁫⁬‍⁫⁭‌‎‎‏‏⁯‮‪‫‫‏⁫‮​‬⁭‏‏‪‫‭‫⁮‮([In] string obj0, [In] char[] obj1) => obj0.Split(obj1);

    static string \u200C‬​​⁭⁮‫‏​‮‫⁫⁭‎‎⁯⁮⁭​⁪⁪‪‎‎⁯‍⁫‬‮‍‭‭‭​‬⁮‮‮‏⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static Random \u206E⁬‫‍‍⁯​‌‪⁫‮‮​‎‮⁬‪⁯⁭‬⁭‪‏‍⁮‎​‍‪⁯‌‫‮⁮⁪‏‮⁭⁯‫‮() => new Random();

    static double \u200E⁬‏⁫⁪⁯‏‪⁯⁬‎‌‏‬‬‫⁭‮‌⁭⁮​‎⁯⁭‭‌⁯‬⁮‌‮‍⁪⁮‫‎⁪‬‫‮([In] Random obj0) => obj0.NextDouble();
  }
}
