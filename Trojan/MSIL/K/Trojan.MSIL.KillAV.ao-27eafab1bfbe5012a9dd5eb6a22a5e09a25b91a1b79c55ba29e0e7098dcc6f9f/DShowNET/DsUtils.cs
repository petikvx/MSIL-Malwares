// Decompiled with JetBrains decompiler
// Type: DShowNET.DsUtils
// Assembly: p, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 91D63E37-42E0-404C-97F4-07116ACD2D57
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.MSIL.KillAV.ao-27eafab1bfbe5012a9dd5eb6a22a5e09a25b91a1b79c55ba29e0e7098dcc6f9f.exe

using System;
using System.IO;
using System.Runtime.InteropServices;

namespace DShowNET
{
  [ComVisible(false)]
  public class DsUtils
  {
    public static bool IsCorrectDirectXVersion() => File.Exists(Path.Combine(Environment.SystemDirectory, "dpnhpast.dll"));

    public static bool ShowCapPinDialog(ICaptureGraphBuilder2 bld, IBaseFilter flt, IntPtr hwnd)
    {
      object ppint = (object) null;
      ISpecifyPropertyPages specifyPropertyPages1 = (ISpecifyPropertyPages) null;
      DsCAUUID pPages = new DsCAUUID();
      try
      {
        Guid capture = PinCategory.Capture;
        Guid pType = MediaType.Interleaved;
        Guid guid = typeof (IAMStreamConfig).GUID;
        if (bld.FindInterface(ref capture, ref pType, flt, ref guid, out ppint) != 0)
        {
          pType = MediaType.Video;
          if (bld.FindInterface(ref capture, ref pType, flt, ref guid, out ppint) != 0)
            return false;
        }
        if (!(ppint is ISpecifyPropertyPages specifyPropertyPages2))
          return false;
        int num = specifyPropertyPages2.GetPages(out pPages);
        num = DsUtils.OleCreatePropertyFrame(hwnd, 30, 30, (string) null, 1, ref ppint, pPages.cElems, pPages.pElems, 0, 0, IntPtr.Zero);
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
      finally
      {
        if (pPages.pElems != IntPtr.Zero)
          Marshal.FreeCoTaskMem(pPages.pElems);
        specifyPropertyPages1 = (ISpecifyPropertyPages) null;
        if (ppint != null)
          Marshal.ReleaseComObject(ppint);
      }
    }

    public static bool ShowTunerPinDialog(ICaptureGraphBuilder2 bld, IBaseFilter flt, IntPtr hwnd)
    {
      object ppint = (object) null;
      ISpecifyPropertyPages specifyPropertyPages1 = (ISpecifyPropertyPages) null;
      DsCAUUID pPages = new DsCAUUID();
      try
      {
        Guid capture = PinCategory.Capture;
        Guid pType = MediaType.Interleaved;
        Guid guid = typeof (IAMTVTuner).GUID;
        if (bld.FindInterface(ref capture, ref pType, flt, ref guid, out ppint) != 0)
        {
          pType = MediaType.Video;
          if (bld.FindInterface(ref capture, ref pType, flt, ref guid, out ppint) != 0)
            return false;
        }
        if (!(ppint is ISpecifyPropertyPages specifyPropertyPages2))
          return false;
        int num = specifyPropertyPages2.GetPages(out pPages);
        num = DsUtils.OleCreatePropertyFrame(hwnd, 30, 30, (string) null, 1, ref ppint, pPages.cElems, pPages.pElems, 0, 0, IntPtr.Zero);
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
      finally
      {
        if (pPages.pElems != IntPtr.Zero)
          Marshal.FreeCoTaskMem(pPages.pElems);
        specifyPropertyPages1 = (ISpecifyPropertyPages) null;
        if (ppint != null)
          Marshal.ReleaseComObject(ppint);
      }
    }

    public int GetPin(IBaseFilter filter, PinDirection dirrequired, int num, out IPin ppPin)
    {
      ppPin = (IPin) null;
      IEnumPins ppEnum;
      int pin1 = filter.EnumPins(out ppEnum);
      if (pin1 < 0 || ppEnum == null)
        return pin1;
      IPin[] ppPins = new IPin[1];
      int pin2;
      do
      {
        pin2 = ppEnum.Next(1, ppPins, out int _);
        if (pin2 == 0 && ppPins[0] != null)
        {
          PinDirection pPinDir = (PinDirection) 3;
          pin2 = ppPins[0].QueryDirection(out pPinDir);
          if (pin2 == 0 && pPinDir == dirrequired)
          {
            if (num == 0)
            {
              ppPin = ppPins[0];
              ppPins[0] = (IPin) null;
              break;
            }
            --num;
          }
          Marshal.ReleaseComObject((object) ppPins[0]);
          ppPins[0] = (IPin) null;
        }
        else
          break;
      }
      while (pin2 == 0);
      Marshal.ReleaseComObject((object) ppEnum);
      return pin2;
    }

    public static void FreeAMMediaType(AMMediaType mediaType)
    {
      if (mediaType.formatSize != 0)
        Marshal.FreeCoTaskMem(mediaType.formatPtr);
      if (mediaType.unkPtr != IntPtr.Zero)
        Marshal.Release(mediaType.unkPtr);
      mediaType.formatSize = 0;
      mediaType.formatPtr = IntPtr.Zero;
      mediaType.unkPtr = IntPtr.Zero;
    }

    [DllImport("olepro32.dll", CharSet = CharSet.Unicode)]
    private static extern int OleCreatePropertyFrame(
      IntPtr hwndOwner,
      int x,
      int y,
      string lpszCaption,
      int cObjects,
      [MarshalAs(UnmanagedType.Interface), In] ref object ppUnk,
      int cPages,
      IntPtr pPageClsID,
      int lcid,
      int dwReserved,
      IntPtr pvReserved);
  }
}
