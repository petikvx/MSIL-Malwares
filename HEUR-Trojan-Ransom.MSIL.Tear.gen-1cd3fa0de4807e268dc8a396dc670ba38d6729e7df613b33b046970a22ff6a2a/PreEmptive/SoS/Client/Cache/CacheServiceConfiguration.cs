// Decompiled with JetBrains decompiler
// Type: PreEmptive.SoS.Client.Cache.CacheServiceConfiguration
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using PreEmptive.SoS.Client.Messages;
using System;
using System.Collections.Generic;

namespace PreEmptive.SoS.Client.Cache
{
  public class CacheServiceConfiguration
  {
    private Dictionary<string, object> a = new Dictionary<string, object>();

    public string InstanceId
    {
      get
      {
        int num1 = -13612;
        int num2 = num1;
        num1 = -13612;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 28103;
        int num2 = num1;
        num1 = 28103;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public CacheServiceConfiguration()
    {
    }

    public CacheServiceConfiguration(string instanceId)
      : this()
    {
      this.InstanceId = instanceId;
    }

    public void SetProperty(string propertyName, object propertyValue)
    {
      int A_1 = 19;
      int num1 = 0;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            num2 = -4190;
            int num3 = num2;
            num2 = -4190;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                break;
              default:
                num2 = 0;
                if (num2 == 0)
                  ;
                switch (0)
                {
                  case 0:
                    goto label_5;
                  default:
                    continue;
                }
            }
            break;
          case 1:
            if (propertyName.Trim().Length == 0)
            {
              num2 = 2;
              num1 = num2;
              continue;
            }
            break;
          case 2:
            goto label_11;
          case 3:
            goto label_15;
          case 4:
            num2 = 1;
            if (num2 == 0)
              ;
            num2 = 1;
            num1 = num2;
            continue;
          case 5:
            if (propertyValue == null)
            {
              num2 = 3;
              num1 = num2;
              continue;
            }
            goto label_16;
          default:
label_5:
            if (propertyName != null)
            {
              num2 = 4;
              num1 = num2;
              continue;
            }
            goto label_11;
        }
        num2 = 5;
        num1 = num2;
      }
label_11:
      throw new ArgumentException(Utils.a("蛆믈곊료ꋎ듐뷒ꇔ\uF7D6뫘뫚돜뇞軠韢엤藦賨쯪菬髮鷰\u9FF2헴飶诸\uDBFA飼鋾焀眂簄", A_1), Utils.a("럆믈\uA4CA뷌\uAACEꏐ\uA7D2곔駖룘뛚룜", A_1));
label_15:
      throw new ArgumentException(Utils.a("蛆믈곊료ꋎ듐뷒ꇔ\uF7D6뫘뫚돜뇞軠韢엤藦賨쯪菬髮鷰\u9FF2", A_1), Utils.a("럆믈\uA4CA뷌\uAACEꏐ\uA7D2곔臖룘럚\uA8DC뫞", A_1));
label_16:
      this.a.Add(propertyName, propertyValue);
    }

    public object GetProperty(string name)
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      if (this.a.ContainsKey(name))
      {
        num1 = -29354;
        int num2 = num1;
        num1 = -29354;
        int num3 = num1;
        switch (num2 == num3 ? 1 : 0)
        {
          case 0:
          case 2:
            break;
          default:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.a[name];
        }
      }
      return (object) null;
    }

    public object GetProperty(string name, object defaultValue)
    {
      int A_1 = 6;
      int num1 = 2;
      while (true)
      {
        int num2 = -427;
        int num3 = num2;
        num2 = -427;
        int num4 = num2;
        switch (num3 == num4 ? 1 : 0)
        {
          case 0:
          case 2:
            goto label_12;
          default:
            num2 = 0;
            if (num2 == 0)
              ;
            switch (num1)
            {
              case 0:
                if (this.a.ContainsKey(name))
                {
                  num2 = 1;
                  num1 = num2;
                  continue;
                }
                goto label_13;
              case 1:
                goto label_8;
              case 2:
                num2 = 1;
                if (num2 == 0)
                  ;
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
              case 3:
                goto label_12;
            }
            if (name == null)
            {
              num2 = 3;
              num1 = num2;
              continue;
            }
            num2 = 0;
            num1 = num2;
            continue;
        }
      }
label_8:
      return this.a[name];
label_12:
      throw new ArgumentException(Utils.a("﮹캻\uD9BD떿꿁ꇃ\uA8C5볇\uEAC9꿋꿍뻏병믓ꋕ\uF8D7룙맛ﻝ軟韡裣諥", A_1), Utils.a("풹\uDDBB펽ꖿ", A_1));
label_13:
      return defaultValue;
    }

    public IFlowController FlowController
    {
      get
      {
        int num1 = 4787;
        int num2 = num1;
        num1 = 4787;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 27328;
        int num2 = num1;
        num1 = 27328;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.c = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public bool HashSensitiveData
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 19599;
        int num2 = num1;
        num1 = 19599;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.d;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -16329;
        int num2 = num1;
        num1 = -16329;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.d = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public bool OmitPersonalInformation
    {
      get
      {
        int num1 = -6909;
        int num2 = num1;
        num1 = -6909;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.e;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 8579;
        int num2 = num1;
        num1 = 8579;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.e = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public bool UseSSL
    {
      get
      {
        int num1 = 16870;
        int num2 = num1;
        num1 = 16870;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.f;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -20147;
        int num2 = num1;
        num1 = -20147;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.f = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public ApplicationInformation Application
    {
      get
      {
        int num1 = 32321;
        int num2 = num1;
        num1 = 32321;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.g;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 30780;
        int num2 = num1;
        num1 = 30780;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.g = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public BinaryInformation Binary
    {
      get
      {
        int num1 = 23479;
        int num2 = num1;
        num1 = 23479;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.h;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 26759;
        int num2 = num1;
        num1 = 26759;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.h = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public BusinessInformation Business
    {
      get
      {
        int num1 = -8296;
        int num2 = num1;
        num1 = -8296;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.i;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -7460;
        int num2 = num1;
        num1 = -7460;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.i = value;
            break;
          default:
            goto case 1;
        }
      }
    }
  }
}
