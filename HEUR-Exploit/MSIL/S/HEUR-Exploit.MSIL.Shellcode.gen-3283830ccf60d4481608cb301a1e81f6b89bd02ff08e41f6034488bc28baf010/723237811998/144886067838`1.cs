// Decompiled with JetBrains decompiler
// Type: 723237811998.144886067838
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003208825527781;
using \u003429091212418;
using \u003462605226301;
using \u003545704640419;
using \u003723237811998;
using \u003830680403346;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;

namespace \u003723237811998
{
  internal class \u003144886067838<T> : 
    ICollection<T>,
    IEnumerable<T>,
    IEnumerable,
    IWrappedCollection,
    IList,
    ICollection
  {
    private readonly IList \u003635511571810;
    private readonly ICollection<T> \u003011349290422;
    private object \u003527372784603;

    public \u003144886067838(IList list)
    {
      \u003821784578685.\u003260732825936((object) list, nameof (list));
      if (list is ICollection<T> objs)
        this._genericCollection = objs;
      else
        this._list = list;
    }

    public \u003144886067838(ICollection<T> list)
    {
      \u003821784578685.\u003260732825936((object) list, nameof (list));
      this._genericCollection = list;
    }

    public virtual void \u003799243871996(T _param1)
    {
      if (this._genericCollection != null)
        this._genericCollection.Add(_param1);
      else
        this._list.Add((object) _param1);
    }

    public virtual void \u003447262858699()
    {
      if (this._genericCollection != null)
        this._genericCollection.Clear();
      else
        this._list.Clear();
    }

    public virtual bool \u003713974918239(T _param1) => this._genericCollection != null ? this._genericCollection.Contains(_param1) : this._list.Contains((object) _param1);

    public virtual void \u003446167627047(T[] _param1, int _param2)
    {
      if (this._genericCollection != null)
        this._genericCollection.CopyTo(_param1, _param2);
      else
        this._list.CopyTo((Array) _param1, _param2);
    }

    public virtual int \u003904203301174 => this._genericCollection != null ? this._genericCollection.Count : this._list.Count;

    public virtual bool \u003928692176766 => this._genericCollection != null ? this._genericCollection.IsReadOnly : this._list.IsReadOnly;

    public virtual bool \u003429925593662(T _param1)
    {
      if (this._genericCollection != null)
        return this._genericCollection.Remove(_param1);
      int num = this._list.Contains((object) _param1) ? 1 : 0;
      if (num == 0)
        return num != 0;
      this._list.Remove((object) _param1);
      return num != 0;
    }

    public virtual IEnumerator<T> \u003478062694225() => ((IEnumerable<T>) this._genericCollection ?? this._list.Cast<T>()).GetEnumerator();

    IEnumerator IEnumerable.\u003264385138193() => ((IEnumerable) this._genericCollection ?? (IEnumerable) this._list).GetEnumerator();

    int IList.\u003604513730548(object _param1)
    {
      \u003144886067838<T>.VerifyValueType(_param1);
      this.Add((T) _param1);
      return this.\u003904203301174 - 1;
    }

    bool IList.\u003854022911065(object _param1) => \u003144886067838<T>.IsCompatibleObject(_param1) && this.Contains((T) _param1);

    int IList.\u003301894101445(object _param1)
    {
      if (this._genericCollection != null)
        throw new InvalidOperationException("Wrapped ICollection<T> does not support IndexOf.");
      return \u003144886067838<T>.IsCompatibleObject(_param1) ? this._list.IndexOf((object) (T) _param1) : -1;
    }

    void IList.\u003286714035702(int _param1)
    {
      if (this._genericCollection != null)
        throw new InvalidOperationException("Wrapped ICollection<T> does not support RemoveAt.");
      this._list.RemoveAt(_param1);
    }

    void IList.\u003219680819421(int _param1, object _param2)
    {
      if (this._genericCollection != null)
        throw new InvalidOperationException("Wrapped ICollection<T> does not support Insert.");
      \u003144886067838<T>.VerifyValueType(_param2);
      this._list.Insert(_param1, (object) (T) _param2);
    }

    bool IList.\u003762086159542 => this._genericCollection != null ? this._genericCollection.IsReadOnly : this._list.IsFixedSize;

    void IList.\u003211989086351(object _param1)
    {
      if (!\u003144886067838<T>.IsCompatibleObject(_param1))
        return;
      this.Remove((T) _param1);
    }

    [IndexerName("693828322231")]
    object IList.this[int index]
    {
      get
      {
        if (this._genericCollection != null)
          throw new InvalidOperationException("Wrapped ICollection<T> does not support indexer.");
        return this._list[index];
      }
      set
      {
        if (this._genericCollection != null)
          throw new InvalidOperationException("Wrapped ICollection<T> does not support indexer.");
        \u003144886067838<T>.VerifyValueType(value);
        this._list[index] = (object) (T) value;
      }
    }

    void ICollection.\u003571905854868(Array _param1, int _param2) => this.CopyTo((T[]) _param1, _param2);

    bool ICollection.\u003998203252173 => false;

    object ICollection.\u003005774970969
    {
      get
      {
        if (this._syncRoot == null)
          Interlocked.CompareExchange(ref this._syncRoot, new object(), (object) null);
        return this._syncRoot;
      }
    }

    private static void \u003551416229391(object _param0)
    {
      if (!\u003144886067838<T>.IsCompatibleObject(_param0))
        throw new ArgumentException("The value '{0}' is not of type '{1}' and cannot be used in this generic collection.".\u003937370926224((IFormatProvider) CultureInfo.InvariantCulture, _param0, (object) typeof (T)), "value");
    }

    private static bool \u003763870249439(object _param0) => _param0 is T || _param0 == null && (!typeof (T).\u003465247563459() || \u003560732527318.\u003876583190049(typeof (T)));

    public object \u003281201256435 => (object) this._genericCollection ?? (object) this._list;
  }
}
