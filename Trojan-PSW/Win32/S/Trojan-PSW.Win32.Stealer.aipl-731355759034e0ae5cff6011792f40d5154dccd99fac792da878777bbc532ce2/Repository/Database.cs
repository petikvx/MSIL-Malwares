// Decompiled with JetBrains decompiler
// Type: Repository.Database
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using Core.Configuration;
using DomainObjects;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;
using System.Linq;

namespace Repository
{
  [Database(Name = "Shows")]
  public class Database : DataContext, IDatabase
  {
    private static MappingSource mappingSource = (MappingSource) new AttributeMappingSource();

    public Database(IConnectionString connectionString)
      : this(connectionString.Value)
    {
    }

    public IQueryable<IShow> ShowDataSource => Queryable.Cast<IShow>(this.GetQueryable<Show>());

    public IQueryable<ISet> SetDataSource => Queryable.Cast<ISet>(this.GetQueryable<Set>());

    public IQueryable<ISetSong> SetSongDataSource => Queryable.Cast<ISetSong>(this.GetQueryable<SetSong>());

    public virtual IQueryable<TEntity> GetQueryable<TEntity>() where TEntity : class => (IQueryable<TEntity>) this.GetTable<TEntity>();

    [DebuggerStepThrough]
    public virtual ITable GetEditable<TEntity>() where TEntity : class => (ITable) this.GetTable<TEntity>();

    [DebuggerStepThrough]
    public virtual IList<TEntity> InsertChangeSet<TEntity>() where TEntity : class => (IList<TEntity>) this.GetChangeSet().Inserts.Where<object>((Func<object, bool>) (x => x.GetType() == typeof (TEntity))).Cast<TEntity>().ToList<TEntity>();

    [DebuggerStepThrough]
    public virtual IList<TEntity> UpdateChangeSet<TEntity>() where TEntity : class => (IList<TEntity>) this.GetChangeSet().Updates.Where<object>((Func<object, bool>) (x => x.GetType() == typeof (TEntity))).Cast<TEntity>().ToList<TEntity>();

    [DebuggerStepThrough]
    public virtual IList<TEntity> DeleteChangeSet<TEntity>() where TEntity : class => (IList<TEntity>) this.GetChangeSet().Deletes.Where<object>((Func<object, bool>) (x => x.GetType() == typeof (TEntity))).Cast<TEntity>().ToList<TEntity>();

    [DebuggerStepThrough]
    public void Insert<TEntity>(TEntity instance) where TEntity : class => this.GetEditable<TEntity>().InsertOnSubmit((object) instance);

    [DebuggerStepThrough]
    public void InsertAll<TEntity>(IEnumerable<TEntity> instances) where TEntity : class => this.GetEditable<TEntity>().InsertAllOnSubmit((IEnumerable) instances);

    [DebuggerStepThrough]
    public void Delete<TEntity>(TEntity instance) where TEntity : class => this.GetEditable<TEntity>().DeleteOnSubmit((object) instance);

    [DebuggerStepThrough]
    public void DeleteAll<TEntity>(IEnumerable<TEntity> instances) where TEntity : class => this.GetEditable<TEntity>().DeleteAllOnSubmit((IEnumerable) instances);

    protected new void Dispose(bool disposing)
    {
      if (this.Connection != null && this.Connection.State != ConnectionState.Closed)
      {
        this.Connection.Close();
        this.Connection.Dispose();
      }
      this.Dispose();
    }

    public Database(string connection)
      : base(connection, Database.mappingSource)
    {
    }

    public Database(IDbConnection connection)
      : base(connection, Database.mappingSource)
    {
    }

    public Database(string connection, MappingSource mappingSource)
      : base(connection, mappingSource)
    {
    }

    public Database(IDbConnection connection, MappingSource mappingSource)
      : base(connection, mappingSource)
    {
    }

    public Table<Set> Sets => this.GetTable<Set>();

    public Table<Show> Shows => this.GetTable<Show>();

    public Table<SetSong> SetSongs => this.GetTable<SetSong>();

    void IDatabase.SubmitChanges() => this.SubmitChanges();
  }
}
