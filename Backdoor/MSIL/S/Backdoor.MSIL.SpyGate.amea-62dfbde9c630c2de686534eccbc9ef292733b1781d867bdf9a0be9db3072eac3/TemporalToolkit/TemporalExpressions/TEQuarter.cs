// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEQuarter
// Assembly: AssertFilt, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D82097A6-A4CE-4A4A-9933-E78378BA7CC6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.SpyGate.amea-62dfbde9c630c2de686534eccbc9ef292733b1781d867bdf9a0be9db3072eac3.exe

using System;
using TemporalToolkit.Extensions;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEQuarter : TemporalExpression
  {
    public Quarter Start { get; set; }

    public Quarter? End { get; set; }

    public Month StartOfYear { get; set; }

    public TEQuarter(Quarter quarter)
    {
      this.Start = quarter;
      this.End = new Quarter?();
      this.StartOfYear = Month.January;
    }

    public TEQuarter(Quarter start, Quarter end)
    {
label_1:
      int num1 = 1292234990;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 188281657)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1190486726 ^ -35053371;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.Start = start;
            num1 = (int) num2 * 1967544486 ^ 1398497542;
            continue;
          case 4:
            this.End = new Quarter?(end);
            num1 = (int) num2 * 1542713999 ^ 309573475;
            continue;
          case 5:
            this.StartOfYear = Month.January;
            num1 = (int) num2 * -369966690 ^ 1703955247;
            continue;
          case 6:
            num1 = (int) num2 * -989690604 ^ -1156547489;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public TEQuarter(Quarter quarter, Month startOfYear)
    {
label_1:
      int num1 = 817411376;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1442475761)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1107538661 ^ 356264755;
            continue;
          case 2:
            this.Start = quarter;
            this.End = new Quarter?();
            this.StartOfYear = startOfYear;
            num1 = (int) num2 * 1254379691 ^ 1545856330;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * -2043771727 ^ -859337163;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public TEQuarter(Quarter start, Quarter end, Month startOfYear)
    {
label_1:
      int num1 = 1125248655;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1564205644)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Start = start;
            this.End = new Quarter?(end);
            this.StartOfYear = startOfYear;
            num1 = (int) num2 * -64535868 ^ 732540495;
            continue;
          case 2:
            num1 = (int) num2 * -1867688265 ^ -1994086950;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * 415368566 ^ -1824970662;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public override bool Includes(DateTime aDate)
    {
label_1:
      int num1 = 1788357624;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        Quarter? end;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ 632509465)) % 20U)
        {
          case 0:
            goto label_1;
          case 2:
            if (!end.HasValue)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -253222910 ^ 1204954919;
            continue;
          case 3:
            end = this.End;
            num1 = (int) num2 * -1038645507 ^ 1239528107;
            continue;
          case 4:
            int num6 = (int) aDate.Quarter(this.StartOfYear);
            end = this.End;
            int num7 = (int) end.Value;
            if (num6 > num7)
            {
              num1 = 1599719635;
              continue;
            }
            num4 = 1;
            goto label_19;
          case 5:
            num5 = aDate.Quarter(this.StartOfYear) >= this.Start ? 1 : 0;
            goto label_26;
          case 6:
            num1 = (int) num2 * 911388159 ^ -174959972;
            continue;
          case 7:
            goto label_20;
          case 8:
            num1 = (int) num2 * 1788744422 ^ 117345608;
            continue;
          case 9:
            if (this.Start == Quarter.Unset)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 1828360884 ^ 1789848033;
            continue;
          case 10:
            int num8 = (int) aDate.Quarter(this.StartOfYear);
            end = this.End;
            int num9 = (int) end.Value;
            if (num8 > num9)
            {
              num5 = 0;
              goto label_26;
            }
            else
            {
              num1 = (int) num2 * -1820211225 ^ 2002355314;
              continue;
            }
          case 11:
            flag1 = flag2;
            num1 = 1695433577;
            continue;
          case 12:
            flag2 = this.Start == aDate.Quarter(this.StartOfYear);
            num1 = 261962862;
            continue;
          case 13:
            int num10 = end.Value >= this.Start ? 303756937 : (num10 = 462115543);
            num1 = num10 ^ (int) num2 * -950751946;
            continue;
          case 14:
            num4 = aDate.Quarter(this.StartOfYear) >= this.Start ? 1 : 0;
            goto label_19;
          case 15:
            int num11 = !end.HasValue ? 1239107852 : (num11 = 1756030463);
            num1 = num11 ^ (int) num2 * 627022787;
            continue;
          case 16:
            end = this.End;
            num1 = (int) num2 * -1434943863 ^ 1260277727;
            continue;
          case 17:
            end = this.End;
            num1 = 667217742;
            continue;
          case 18:
            end = this.End;
            num3 = end.Value == Quarter.Unset ? 1 : 0;
            break;
          case 19:
            num1 = 261962862;
            continue;
          default:
            goto label_32;
        }
        int num12;
        num1 = num12 = num3 != 0 ? 1113464446 : (num12 = 1675871656);
        continue;
label_19:
        flag2 = num4 != 0;
        num1 = 666133802;
        continue;
label_26:
        flag2 = num5 != 0;
        num1 = 48971859;
      }
label_20:
      throw TEQuarter.\u200C‪‪‭⁫⁬​⁭‮⁪‫‎⁭‮⁭​⁬‍⁫⁪⁫‏‬‭⁪⁯‍‪⁫⁫‭‮‮​⁯⁭​​‍‬‮();
label_32:
      return flag1;
    }

    static ArgumentException \u200C‪‪‭⁫⁬​⁭‮⁪‫‎⁭‮⁭​⁬‍⁫⁪⁫‏‬‭⁪⁯‍‪⁫⁫‭‮‮​⁯⁭​​‍‬‮() => new ArgumentException();
  }
}
