// Decompiled with JetBrains decompiler
// Type: WinFormsSyntaxHighlighter.PatternDefinition
// Assembly: WinFormsSyntaxHighlighter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7F5F1073-81B4-4786-AC13-05D2F8A8156A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-c3b3ae0b7ab9c19511bfd4527e8687232b1ba654396a0cff650edcb74c1371b9.exe

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace WinFormsSyntaxHighlighter
{
  public class PatternDefinition
  {
    private readonly Regex _regex;
    private ExpressionType _expressionType = ExpressionType.Identifier;
    private readonly bool _isCaseSensitive = true;

    public PatternDefinition(Regex regularExpression) => this._regex = regularExpression != null ? regularExpression : throw new ArgumentNullException(nameof (regularExpression));

    public PatternDefinition(string regexPattern) => this._regex = !string.IsNullOrEmpty(regexPattern) ? new Regex(regexPattern, RegexOptions.Compiled) : throw new ArgumentException("regex pattern must not be null or empty", nameof (regexPattern));

    public PatternDefinition(params string[] tokens)
      : this(true, (IEnumerable<string>) tokens)
    {
    }

    public PatternDefinition(IEnumerable<string> tokens)
      : this(true, tokens)
    {
    }

    internal PatternDefinition(bool caseSensitive, IEnumerable<string> tokens)
    {
      if (tokens == null)
        throw new ArgumentNullException(nameof (tokens));
      this._isCaseSensitive = caseSensitive;
      List<string> values = new List<string>();
      foreach (string token in tokens)
      {
        string str = Regex.Escape(token.Trim());
        if (str.Length > 0)
        {
          if (char.IsLetterOrDigit(str[0]))
            values.Add(string.Format("\\b{0}\\b", (object) str));
          else
            values.Add(str);
        }
      }
      string pattern = string.Join("|", (IEnumerable<string>) values);
      RegexOptions options = RegexOptions.Compiled;
      if (!caseSensitive)
        options |= RegexOptions.IgnoreCase;
      this._regex = new Regex(pattern, options);
    }

    internal ExpressionType ExpressionType
    {
      get => this._expressionType;
      set => this._expressionType = value;
    }

    internal bool IsCaseSensitive => this._isCaseSensitive;

    internal Regex Regex => this._regex;
  }
}
