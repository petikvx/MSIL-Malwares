// Decompiled with JetBrains decompiler
// Type: Org.BouncyCastle.Utilities.Zlib.Deflate
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

namespace Org.BouncyCastle.Utilities.Zlib
{
  internal sealed class Deflate
  {
    private const int MAX_MEM_LEVEL = 9;
    private const int Z_DEFAULT_COMPRESSION = -1;
    private const int MAX_WBITS = 15;
    private const int DEF_MEM_LEVEL = 8;
    private const int STORED = 0;
    private const int FAST = 1;
    private const int SLOW = 2;
    private static readonly Deflate.Config[] config_table;
    private static readonly string[] z_errmsg;
    private const int NeedMore = 0;
    private const int BlockDone = 1;
    private const int FinishStarted = 2;
    private const int FinishDone = 3;
    private const int PRESET_DICT = 32;
    private const int Z_FILTERED = 1;
    private const int Z_HUFFMAN_ONLY = 2;
    private const int Z_DEFAULT_STRATEGY = 0;
    private const int Z_NO_FLUSH = 0;
    private const int Z_PARTIAL_FLUSH = 1;
    private const int Z_SYNC_FLUSH = 2;
    private const int Z_FULL_FLUSH = 3;
    private const int Z_FINISH = 4;
    private const int Z_OK = 0;
    private const int Z_STREAM_END = 1;
    private const int Z_NEED_DICT = 2;
    private const int Z_ERRNO = -1;
    private const int Z_STREAM_ERROR = -2;
    private const int Z_DATA_ERROR = -3;
    private const int Z_MEM_ERROR = -4;
    private const int Z_BUF_ERROR = -5;
    private const int Z_VERSION_ERROR = -6;
    private const int INIT_STATE = 42;
    private const int BUSY_STATE = 113;
    private const int FINISH_STATE = 666;
    private const int Z_DEFLATED = 8;
    private const int STORED_BLOCK = 0;
    private const int STATIC_TREES = 1;
    private const int DYN_TREES = 2;
    private const int Z_BINARY = 0;
    private const int Z_ASCII = 1;
    private const int Z_UNKNOWN = 2;
    private const int Buf_size = 16;
    private const int REP_3_6 = 16;
    private const int REPZ_3_10 = 17;
    private const int REPZ_11_138 = 18;
    private const int MIN_MATCH = 3;
    private const int MAX_MATCH = 258;
    private const int MIN_LOOKAHEAD = 262;
    private const int MAX_BITS = 15;
    private const int D_CODES = 30;
    private const int BL_CODES = 19;
    private const int LENGTH_CODES = 29;
    private const int LITERALS = 256;
    private const int L_CODES = 286;
    private const int HEAP_SIZE = 573;
    private const int END_BLOCK = 256;
    internal ZStream strm;
    internal int status;
    internal byte[] pending_buf;
    internal int pending_out;
    internal int pending;
    internal int noheader;
    internal byte data_type;
    internal byte method;
    internal int last_flush;
    internal int w_size;
    internal int w_bits;
    internal int w_mask;
    internal byte[] window;
    internal int window_size;
    internal short[] prev;
    internal short[] head;
    internal int ins_h;
    internal int hash_size;
    internal int hash_bits;
    internal int hash_mask;
    internal int hash_shift;
    internal int block_start;
    internal int match_length;
    internal int prev_match;
    internal int match_available;
    internal int strstart;
    internal int match_start;
    internal int lookahead;
    internal int prev_length;
    internal int max_chain_length;
    internal int max_lazy_match;
    internal int level;
    internal int strategy;
    internal int good_match;
    internal int nice_match;
    internal short[] dyn_ltree;
    internal short[] dyn_dtree;
    internal short[] bl_tree;
    internal Tree l_desc;
    internal Tree d_desc;
    internal Tree bl_desc;
    internal short[] bl_count;
    internal int[] heap;
    internal int heap_len;
    internal int heap_max;
    internal byte[] depth;
    internal int l_buf;
    internal int lit_bufsize;
    internal int last_lit;
    internal int d_buf;
    internal int opt_len;
    internal int static_len;
    internal int matches;
    internal int last_eob_len;
    internal uint bi_buf;
    internal int bi_valid;
    static Deflate();
    internal Deflate();
    internal void lm_init();
    internal void tr_init();
    internal void init_block();
    internal void pqdownheap(short[] tree, int k);
    internal static bool smaller(short[] tree, int n, int m, byte[] depth);
    internal void scan_tree(short[] tree, int max_code);
    internal int build_bl_tree();
    internal void send_all_trees(int lcodes, int dcodes, int blcodes);
    internal void send_tree(short[] tree, int max_code);
    internal void put_byte(byte[] p, int start, int len);
    internal void put_byte(byte c);
    internal void put_short(int w);
    internal void putShortMSB(int b);
    internal void send_code(int c, short[] tree);
    internal void send_bits(int val, int length);
    internal void _tr_align();
    internal bool _tr_tally(int dist, int lc);
    internal void compress_block(short[] ltree, short[] dtree);
    internal void set_data_type();
    internal void bi_flush();
    internal void bi_windup();
    internal void copy_block(int buf, int len, bool header);
    internal void flush_block_only(bool eof);
    internal int deflate_stored(int flush);
    internal void _tr_stored_block(int buf, int stored_len, bool eof);
    internal void _tr_flush_block(int buf, int stored_len, bool eof);
    internal void fill_window();
    internal int deflate_fast(int flush);
    internal int deflate_slow(int flush);
    internal int longest_match(int cur_match);
    internal int deflateInit(ZStream strm, int level, int bits);
    internal int deflateInit(ZStream strm, int level);
    internal int deflateInit2(
      ZStream strm,
      int level,
      int method,
      int windowBits,
      int memLevel,
      int strategy);
    internal int deflateReset(ZStream strm);
    internal int deflateEnd();
    internal int deflateParams(ZStream strm, int _level, int _strategy);
    internal int deflateSetDictionary(ZStream strm, byte[] dictionary, int dictLength);
    internal int deflate(ZStream strm, int flush);

    internal class Config
    {
    }
  }
}
