// Decompiled with JetBrains decompiler
// Type: PrintText.TextPrint
// Assembly: system64, Version=1.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3A793DDC-251A-4171-9485-CC449337E9FB
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.Albertina.a-2659e9cf20332bbe600ae977d69ecbc8d7bb0296e3865c38923fd4399b1e6a63.exe

using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Printing;
using System.Runtime.CompilerServices;

namespace PrintText
{
  public class TextPrint : PrintDocument
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private Font fntPrintFont;
    private string strText;
    [SpecialName]
    private int \u0024STATIC\u0024OnPrintPage\u0024201112809D\u0024intCurrentChar;

    [DebuggerNonUserCode]
    static TextPrint()
    {
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (TextPrint.__ENCList)
      {
        if (TextPrint.__ENCList.Count == TextPrint.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (TextPrint.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (TextPrint.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                TextPrint.__ENCList[index1] = TextPrint.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          TextPrint.__ENCList.RemoveRange(index1, checked (TextPrint.__ENCList.Count - index1));
          TextPrint.__ENCList.Capacity = TextPrint.__ENCList.Count;
        }
        TextPrint.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    public TextPrint(string Text)
    {
      TextPrint.__ENCAddToList((object) this);
      this.strText = Text;
    }

    public string Text
    {
      get => this.strText;
      set => this.strText = value;
    }

    protected override void OnBeginPrint(PrintEventArgs ev)
    {
      base.OnBeginPrint(ev);
      if (this.fntPrintFont != null)
        return;
      this.fntPrintFont = new Font("Times New Roman", 12f);
    }

    public Font Font
    {
      get => this.fntPrintFont;
      set => this.fntPrintFont = value;
    }

    protected override void OnPrintPage(PrintPageEventArgs e)
    {
      base.OnPrintPage(e);
      PageSettings defaultPageSettings = this.DefaultPageSettings;
      int height = checked (defaultPageSettings.PaperSize.Height - defaultPageSettings.Margins.Top - defaultPageSettings.Margins.Bottom);
      int width = checked (defaultPageSettings.PaperSize.Width - defaultPageSettings.Margins.Left - defaultPageSettings.Margins.Right);
      int left = defaultPageSettings.Margins.Left;
      int top = defaultPageSettings.Margins.Top;
      if (this.DefaultPageSettings.Landscape)
      {
        int num = height;
        height = width;
        width = num;
      }
      RectangleF layoutRectangle = new RectangleF((float) left, (float) top, (float) width, (float) height);
      StringFormat stringFormat = new StringFormat(StringFormatFlags.LineLimit);
      int charactersFitted;
      e.Graphics.MeasureString(Strings.Mid(this.strText, this.UpgradeZeros(this.\u0024STATIC\u0024OnPrintPage\u0024201112809D\u0024intCurrentChar)), this.Font, new SizeF((float) width, (float) height), stringFormat, out charactersFitted, out int _);
      e.Graphics.DrawString(Strings.Mid(this.strText, this.UpgradeZeros(this.\u0024STATIC\u0024OnPrintPage\u0024201112809D\u0024intCurrentChar)), this.Font, Brushes.Black, layoutRectangle, stringFormat);
      checked { this.\u0024STATIC\u0024OnPrintPage\u0024201112809D\u0024intCurrentChar += charactersFitted; }
      if (this.\u0024STATIC\u0024OnPrintPage\u0024201112809D\u0024intCurrentChar < this.strText.Length)
      {
        e.HasMorePages = true;
      }
      else
      {
        e.HasMorePages = false;
        this.\u0024STATIC\u0024OnPrintPage\u0024201112809D\u0024intCurrentChar = 0;
      }
    }

    public int UpgradeZeros(int Input) => Input == 0 ? 1 : Input;
  }
}
