// Decompiled with JetBrains decompiler
// Type: RiskGame.Properties.Resources
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Database;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.Resources;
using System.Runtime.CompilerServices;

namespace RiskGame.Properties
{
  [CompilerGenerated]
  [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
  [DebuggerNonUserCode]
  public class Resources
  {
    private static ResourceManager broadcaster;
    private static CultureInfo _Field;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Resources()
    {
      ProxyParser.NewPool();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static ResourceManager CalculateExpression
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        int num = 4;
        ResourceManager broadcaster;
        while (true)
        {
          ResourceManager resourceManager;
          bool flag;
          switch (num)
          {
            case 0:
            case 4:
              flag = RiskGame.Properties.Resources.broadcaster == null;
              num = 3;
              continue;
            case 1:
            case 3:
label_7:
              if (flag)
              {
                resourceManager = new ResourceManager("RiskGame.Properties.Resources", typeof (RiskGame.Properties.Resources).Assembly);
                num = 5;
                continue;
              }
              break;
            case 2:
              break;
            case 5:
              RiskGame.Properties.Resources.broadcaster = resourceManager;
              goto case 2;
            case 6:
              goto label_9;
            default:
              if (RiskGame.Properties.Resources.ChangeContainer())
              {
                num = 2;
                continue;
              }
              goto case 0;
          }
          broadcaster = RiskGame.Properties.Resources.broadcaster;
          if (RiskGame.Properties.Resources.ChangeContainer())
            num = 6;
          else
            goto label_7;
        }
label_9:
        return broadcaster;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static CultureInfo RegisterExpression
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => RiskGame.Properties.Resources._Field;
      [MethodImpl(MethodImplOptions.NoInlining)] set => RiskGame.Properties.Resources._Field = value;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Bitmap LogoutExpression() => (Bitmap) RiskGame.Properties.Resources.CalculateExpression.GetObject("Int32TypeI", RiskGame.Properties.Resources._Field);

    internal static bool ChangeContainer() => true;

    internal static bool InsertContainer() => false;
  }
}
