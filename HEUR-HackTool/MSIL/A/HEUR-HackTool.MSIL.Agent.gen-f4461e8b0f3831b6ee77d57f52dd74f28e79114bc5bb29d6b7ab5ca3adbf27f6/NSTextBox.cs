// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSTextBox
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  [DefaultEvent("TextChanged")]
  internal class NSTextBox : Control
  {
    private HorizontalAlignment _TextAlign;
    private int _MaxLength;
    private bool _ReadOnly;
    private bool _UseSystemPasswordChar;
    private bool _Multiline;
    private TextBox Base;
    private GraphicsPath GP1;
    private GraphicsPath GP2;
    private Pen P1;
    private Pen P2;
    private PathGradientBrush PB1;

    public HorizontalAlignment TextAlign
    {
      get => this._TextAlign;
      set
      {
        this._TextAlign = value;
        if (this.Base == null)
          return;
        this.Base.TextAlign = value;
      }
    }

    public int MaxLength
    {
      get => this._MaxLength;
      set
      {
        this._MaxLength = value;
        if (this.Base == null)
          return;
        this.Base.MaxLength = value;
      }
    }

    public bool ReadOnly
    {
      get => this._ReadOnly;
      set
      {
        this._ReadOnly = value;
        if (this.Base == null)
          return;
        this.Base.ReadOnly = value;
      }
    }

    public bool UseSystemPasswordChar
    {
      get => this._UseSystemPasswordChar;
      set
      {
        this._UseSystemPasswordChar = value;
        if (this.Base == null)
          return;
        this.Base.UseSystemPasswordChar = value;
      }
    }

    public bool Multiline
    {
      get => this._Multiline;
      set
      {
        this._Multiline = value;
        if (this.Base == null)
          return;
        this.Base.Multiline = value;
        if (value)
          this.Base.Height = checked (this.Height - 11);
        else
          this.Height = checked (this.Base.Height + 11);
      }
    }

    public override string Text
    {
      get => base.Text;
      set
      {
        base.Text = value;
        if (this.Base == null)
          return;
        this.Base.Text = value;
      }
    }

    public override Font Font
    {
      get => base.Font;
      set
      {
        base.Font = value;
        if (this.Base == null)
          return;
        this.Base.Font = value;
        this.Base.Location = new Point(5, 5);
        this.Base.Width = checked (this.Width - 8);
        if (this._Multiline)
          return;
        this.Height = checked (this.Base.Height + 11);
      }
    }

    protected override void OnHandleCreated(EventArgs e)
    {
      if (!this.Controls.Contains((Control) this.Base))
        this.Controls.Add((Control) this.Base);
      base.OnHandleCreated(e);
    }

    public NSTextBox()
    {
      this._TextAlign = HorizontalAlignment.Left;
      this._MaxLength = (int) short.MaxValue;
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, true);
      this.Cursor = Cursors.IBeam;
      this.Base = new TextBox();
      this.Base.Font = this.Font;
      this.Base.Text = this.Text;
      this.Base.MaxLength = this._MaxLength;
      this.Base.Multiline = this._Multiline;
      this.Base.ReadOnly = this._ReadOnly;
      this.Base.UseSystemPasswordChar = this._UseSystemPasswordChar;
      this.Base.ForeColor = Color.FromArgb(235, 235, 235);
      this.Base.BackColor = Color.FromArgb(50, 50, 50);
      this.Base.BorderStyle = BorderStyle.None;
      this.Base.Location = new Point(5, 5);
      this.Base.Width = checked (this.Width - 14);
      if (this._Multiline)
        this.Base.Height = checked (this.Height - 11);
      else
        this.Height = checked (this.Base.Height + 11);
      this.Base.TextChanged += new EventHandler(this.OnBaseTextChanged);
      this.Base.KeyDown += new KeyEventHandler(this.OnBaseKeyDown);
      this.P1 = new Pen(Color.FromArgb(24, 24, 24));
      this.P2 = new Pen(Color.FromArgb(55, 55, 55));
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.Clear(this.BackColor);
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      this.GP1 = ThemeModule.CreateRound(0, 0, checked (this.Width - 1), checked (this.Height - 1), 7);
      this.GP2 = ThemeModule.CreateRound(1, 1, checked (this.Width - 3), checked (this.Height - 3), 7);
      this.PB1 = new PathGradientBrush(this.GP1);
      this.PB1.CenterColor = Color.FromArgb(50, 50, 50);
      this.PB1.SurroundColors = new Color[1]
      {
        Color.FromArgb(45, 45, 45)
      };
      this.PB1.FocusScales = new PointF(0.9f, 0.5f);
      ThemeModule.G.FillPath((Brush) this.PB1, this.GP1);
      ThemeModule.G.DrawPath(this.P2, this.GP1);
      ThemeModule.G.DrawPath(this.P1, this.GP2);
    }

    private void OnBaseTextChanged(object s, EventArgs e) => this.Text = this.Base.Text;

    private void OnBaseKeyDown(object s, KeyEventArgs e)
    {
      if (!e.Control || e.KeyCode != Keys.A)
        return;
      this.Base.SelectAll();
      e.SuppressKeyPress = true;
    }

    protected override void OnResize(EventArgs e)
    {
      this.Base.Location = new Point(5, 5);
      this.Base.Width = checked (this.Width - 10);
      this.Base.Height = checked (this.Height - 11);
      base.OnResize(e);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      this.Base.Focus();
      base.OnMouseDown(e);
    }

    protected override void OnEnter(EventArgs e)
    {
      this.Base.Focus();
      this.Invalidate();
      base.OnEnter(e);
    }

    protected override void OnLeave(EventArgs e)
    {
      this.Invalidate();
      base.OnLeave(e);
    }
  }
}
