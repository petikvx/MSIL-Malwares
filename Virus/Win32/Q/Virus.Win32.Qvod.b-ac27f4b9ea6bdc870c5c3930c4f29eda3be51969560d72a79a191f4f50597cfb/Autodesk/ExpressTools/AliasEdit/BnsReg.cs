// Decompiled with JetBrains decompiler
// Type: Autodesk.ExpressTools.AliasEdit.Autodesk.ExpressTools.AliasEdit.BnsReg
// Assembly: alias, Version=18.2.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 30B32B4B-BB59-4BDE-A34F-3A89FA31757D
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Virus.Win32.Qvod.b-ac27f4b9ea6bdc870c5c3930c4f29eda3be51969560d72a79a191f4f50597cfb.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Autodesk.ExpressTools.AliasEdit.Autodesk.ExpressTools.AliasEdit
{
  [StandardModule]
  internal sealed class BnsReg
  {
    private const int STANDARD_RIGHTS_ALL = 2031616;
    private const short KEY_QUERY_VALUE = 1;
    private const short KEY_SET_VALUE = 2;
    private const short KEY_CREATE_SUB_KEY = 4;
    private const short KEY_ENUMERATE_SUB_KEYS = 8;
    private const short KEY_NOTIFY = 16;
    private const short KEY_CREATE_LINK = 32;
    private const int SYNCHRONIZE = 1048576;
    private const int READ_CONTROL = 131072;
    private const int STANDARD_RIGHTS_READ = 131072;
    private const short REG_BINARY = 3;
    private const short REG_DWORD_BIG_ENDIAN = 5;
    private const short REG_DWORD_LITTLE_ENDIAN = 4;
    private const short REG_EXPAND_SZ = 2;
    private const short REG_LINK = 6;
    private const short REG_MULTI_SZ = 7;
    private const short REG_NONE = 0;
    private const short REG_RESOURCE_LIST = 8;
    public const short REG_SZ = 1;
    public const short REG_DWORD = 4;
    private const short REG_OPTION_NON_VOLATILE = 0;
    private const short REG_OPTION_VOLATILE = 1;
    private const short ERROR_SUCCESS = 0;
    private const short ERROR_ACCESS_DENIED = 5;
    private const short ERROR_NO_MORE_ITEMS = 259;
    private const int HKEY_CLASSES_ROOT = -2147483648;
    private const int HKEY_LOCAL_MACHINE = -2147483646;
    private const int HKEY_CURRENT_USER = -2147483647;
    private const int HKEY_CURRENT_CONFIG = -2147483643;
    private const bool KEY_ALL_ACCESS = true;
    private const bool KEY_READ = true;
    private static ResourceManager resManager = frmAlias.DefInstance.resManager;

    [DllImport("advapi32.dll", EntryPoint = "RegOpenKeyExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegOpenKeyEx(
      int hkey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpSubKey,
      int ulOptions,
      int samDesired,
      ref int phkResult);

    [DllImport("advapi32", EntryPoint = "RegQueryValueExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegQueryValueEx(
      int hkey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpValueName,
      int lpReserved,
      ref int lpType,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string szData,
      ref int lpcbData);

    [DllImport("advapi32", EntryPoint = "RegQueryValueExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegQueryValueExNum(
      int hkey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpValueName,
      int lpReserved,
      ref int lpType,
      ref int szData,
      ref int lpcbData);

    [DllImport("advapi32", EntryPoint = "RegSetValueExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegSetValueEx(
      int hkey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpValueName,
      int Reserved,
      int dwType,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string szData,
      int cbData);

    [DllImport("advapi32", EntryPoint = "RegSetValueExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegSetValueExNum(
      int hkey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpValueName,
      int Reserved,
      int dwType,
      ref byte lpData,
      int cbData);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegCloseKey(int hkey);

    [DllImport("advapi32", EntryPoint = "RegCreateKeyExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int RegCreateKeyEx(
      int hkey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpSubKey,
      int Reserved,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClass,
      int dwOptions,
      int samDesired,
      ref BnsReg.SECURITY_ATTRIBUTES lpSecurityAttributes,
      ref int phkResult,
      ref int lpdwDisposition);

    [DllImport("shell32.dll", EntryPoint = "FindExecutableA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int FindExecutable(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFile,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDirectory,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpResult);

    public static bool ExtAssociate(string ext, string appexe, ref string idstr)
    {
      bool flag1;
      if (!(Operators.CompareString(ext, "", false) == 0 | Operators.CompareString(appexe, "", false) == 0 | Operators.CompareString(idstr, "", false) == 0))
      {
        if (Operators.CompareString(Strings.Left(ext, 1), ".", false) != 0)
          ext = "." + ext;
        appexe = BnsStr.FindFile(appexe, ".");
        if (Operators.CompareString(appexe, "", false) != 0)
        {
          string key1 = "HKEY_CLASSES_ROOT\\" + ext;
          string str1 = "";
          ref string local1 = ref str1;
          object obj1 = (object) idstr;
          ref object local2 = ref obj1;
          int num1 = 1;
          ref int local3 = ref num1;
          int num2 = BnsReg.acet_RegistryWrite(key1, ref local1, ref local2, ref local3) ? 1 : 0;
          idstr = Conversions.ToString(obj1);
          bool flag2 = num2 != 0;
          if (flag2)
          {
            string key2 = "HKEY_CLASSES_ROOT\\" + idstr + "\\shell\\open\\command";
            string str2 = "";
            ref string local4 = ref str2;
            object obj2 = (object) (BnsStr.StrDoubleQuote(appexe) + " " + BnsStr.StrDoubleQuote("%1"));
            ref object local5 = ref obj2;
            int num3 = 1;
            ref int local6 = ref num3;
            flag2 = BnsReg.acet_RegistryWrite(key2, ref local4, ref local5, ref local6);
          }
          flag1 = flag2;
        }
      }
      return flag1;
    }

    public static bool WriteToRecentFileList(ref string appname, string fna)
    {
      string[] fna1 = new string[1];
      ref string local1 = ref fna;
      bool flag1 = false;
      ref bool local2 = ref flag1;
      fna = BnsStr.UNCtoLocalName(ref local1, ref local2);
      int num1 = BnsReg.ReadRecentFileList(ref appname, ref fna1);
      string[] strArray1 = (string[]) Utils.CopyArray((Array) fna1, (Array) new string[checked (num1 + 1)]);
      if (num1 >= 0)
      {
        ref string local3 = ref fna;
        ref string[] local4 = ref strArray1;
        bool flag2 = true;
        ref bool local5 = ref flag2;
        int num2 = BnsStr.strMemberPosition(ref local3, ref local4, ref local5);
        if (num2 >= 0)
        {
          int num3 = num2;
          int num4 = checked (num1 - 1);
          int index = num3;
          while (index <= num4)
          {
            strArray1[index] = strArray1[checked (index + 1)];
            checked { ++index; }
          }
          checked { --num1; }
        }
        if (num1 < 3)
          checked { ++num1; }
        int index1 = num1;
        while (index1 >= 1)
        {
          strArray1[index1] = strArray1[checked (index1 - 1)];
          checked { index1 += -1; }
        }
      }
      else
        num1 = 0;
      strArray1[0] = fna;
      string str1 = "HKEY_CURRENT_USER\\SOFTWARE\\Autodesk\\" + appname + "\\Recent File List";
      int num5 = num1;
      int num6 = 0;
      bool recentFileList;
      while (num6 <= num5)
      {
        string str2 = "File" + Conversions.ToString(checked (num6 + 1));
        string key = str1;
        ref string local6 = ref str2;
        string[] strArray2 = strArray1;
        int index2 = num6;
        int index3 = index2;
        object obj = (object) strArray2[index3];
        ref object local7 = ref obj;
        int num7 = 1;
        ref int local8 = ref num7;
        int num8 = BnsReg.acet_RegistryWrite(key, ref local6, ref local7, ref local8) ? 1 : 0;
        strArray1[index2] = Conversions.ToString(obj);
        recentFileList = num8 != 0;
        checked { ++num6; }
      }
      return recentFileList;
    }

    public static int ReadRecentFileList(ref string appname, ref string[] fna)
    {
      fna = new string[1];
      int index = -1;
      string str1 = "HKEY_CURRENT_USER\\SOFTWARE\\Autodesk\\" + appname + "\\Recent File List";
      string str2 = "File";
      int num = 1;
      string Left;
      do
      {
        string keypath = str1;
        string str3 = str2 + Conversions.ToString(num);
        ref string local1 = ref str3;
        object obj = (object) "";
        ref object local2 = ref obj;
        Left = Conversions.ToString(BnsReg.acet_RegistryRead(keypath, ref local1, ref local2));
        if (Operators.CompareString(Left, "", false) != 0)
        {
          checked { ++index; }
          fna = (string[]) Utils.CopyArray((Array) fna, (Array) new string[checked (index + 1)]);
          fna[index] = Left;
        }
        checked { ++num; }
      }
      while (Operators.CompareString(Left, "", false) != 0);
      return index;
    }

    public static bool WriteFormLocationToReg(ref string appname, ref Form frm)
    {
      int windowState = (int) frm.WindowState;
      if (windowState != 0)
        frm.WindowState = FormWindowState.Normal;
      string str1 = Conversions.ToString(frm.Left) + " " + Conversions.ToString(frm.Top) + " " + Conversions.ToString(frm.Width) + " " + Conversions.ToString(frm.Height);
      if ((FormWindowState) windowState != frm.WindowState)
        frm.WindowState = (FormWindowState) windowState;
      string str2 = "HKEY_CURRENT_USER\\SOFTWARE\\Autodesk\\" + appname + "\\Application Window";
      string key1 = str2;
      string str3 = "Position";
      ref string local1 = ref str3;
      object obj1 = (object) str1;
      ref object local2 = ref obj1;
      int num1 = 1;
      ref int local3 = ref num1;
      BnsReg.acet_RegistryWrite(key1, ref local1, ref local2, ref local3);
      Conversions.ToString(obj1);
      string key2 = str2;
      string str4 = "Show";
      ref string local4 = ref str4;
      object obj2 = (object) Conversions.ToString(windowState);
      ref object local5 = ref obj2;
      int num2 = 1;
      ref int local6 = ref num2;
      return BnsReg.acet_RegistryWrite(key2, ref local4, ref local5, ref local6);
    }

    public static bool SetFormLocationFromReg(ref string appname, ref Form frm)
    {
      string[] strresult = new string[1];
      string str1 = "HKEY_CURRENT_USER\\SOFTWARE\\Autodesk\\" + appname + "\\Application Window";
      string keypath1 = str1;
      string str2 = "Position";
      ref string local1 = ref str2;
      object obj1 = (object) "";
      ref object local2 = ref obj1;
      string strmain = Conversions.ToString(BnsReg.acet_RegistryRead(keypath1, ref local1, ref local2));
      string keypath2 = str1;
      string str3 = "Show";
      ref string local3 = ref str3;
      object obj2 = (object) "";
      ref object local4 = ref obj2;
      string str4 = Conversions.ToString(BnsReg.acet_RegistryRead(keypath2, ref local3, ref local4));
      bool flag;
      if (Operators.CompareString(strmain, "", false) != 0 & Operators.CompareString(str4, "", false) != 0)
      {
        string delim = " ";
        if (BnsReg.StrDelim(ref delim, ref strmain, ref strresult) >= 3)
        {
          int x = !Versioned.IsNumeric((object) strresult[0]) ? frm.Left : Conversions.ToInteger(strresult[0]);
          int y = !Versioned.IsNumeric((object) strresult[1]) ? frm.Top : Conversions.ToInteger(strresult[1]);
          int width = !Versioned.IsNumeric((object) strresult[2]) ? frm.Width : Conversions.ToInteger(strresult[2]);
          int height = !Versioned.IsNumeric((object) strresult[3]) ? frm.Height : Conversions.ToInteger(strresult[3]);
          int num = !Versioned.IsNumeric((object) str4) ? 0 : Conversions.ToInteger(str4);
          if (frm.WindowState != FormWindowState.Normal)
            frm.WindowState = FormWindowState.Normal;
          frm.SetBounds(x, y, width, height);
          frm.WindowState = (FormWindowState) num;
          flag = true;
        }
      }
      return flag;
    }

    public static string GetAssociatedApp(ref string fna)
    {
      string lpDirectory = Strings.Space((int) byte.MaxValue);
      string str = Strings.Space((int) byte.MaxValue);
      string associatedApp;
      if (BnsReg.FindExecutable(ref fna, ref lpDirectory, ref str) <= 32)
      {
        associatedApp = "";
      }
      else
      {
        str = BnsReg.StripNullString(ref str);
        associatedApp = str;
      }
      return associatedApp;
    }

    private static string StripNullString(ref string str_Renamed)
    {
      int Start = 1;
      string str = "";
      while (Start <= Strings.Len(str_Renamed))
      {
        string Left = Strings.Mid(str_Renamed, Start, 1);
        if (Operators.CompareString(Left, "\0", false) != 0)
          str += Left;
        else
          Start = checked (Strings.Len(str_Renamed) + 1);
        checked { ++Start; }
      }
      return str;
    }

    public static bool acet_setvar_str(ref string name, ref string val_Renamed, ref int flag = 0)
    {
      string str1 = Strings.UCase(name);
      string str2 = val_Renamed;
      int flag1 = flag;
      bool flag2 = false;
      string str3 = "STR__" + str2;
      if (flag1 <= 0)
        flag1 = 2;
      while (flag1 > 0)
      {
        string str4 = BnsReg.acet_setvar_key(ref flag1);
        string key = str4;
        ref string local1 = ref str1;
        object obj = (object) str3;
        ref object local2 = ref obj;
        int num1 = 1;
        ref int local3 = ref num1;
        int num2 = BnsReg.acet_RegistryWrite(key, ref local1, ref local2, ref local3) ? 1 : 0;
        str3 = Conversions.ToString(obj);
        if (num2 == 0)
        {
          flag2 = false;
          flag1 = 0;
          int num3 = (int) Interaction.MsgBox((object) (BnsReg.resManager.GetString("REG_CALLACET") + str4));
        }
        else
          flag2 = true;
      }
      return flag2;
    }

    public static bool acet_setvar_int(ref string name, ref int val_Renamed, ref int flag = 0)
    {
      string str1 = Strings.UCase(name);
      string str2 = "INT__" + Conversions.ToString(val_Renamed);
      int flag1 = flag;
      bool flag2 = false;
      if (flag1 <= 0)
        flag1 = 2;
      while (flag1 > 0)
      {
        string Left = BnsReg.acet_setvar_key(ref flag1);
        if (Operators.CompareString(Left, "", false) != 0)
        {
          string key = Left;
          ref string local1 = ref str1;
          object obj = (object) str2;
          ref object local2 = ref obj;
          int num1 = 1;
          ref int local3 = ref num1;
          int num2 = BnsReg.acet_RegistryWrite(key, ref local1, ref local2, ref local3) ? 1 : 0;
          str2 = Conversions.ToString(obj);
          if (num2 == 0)
          {
            int num3 = (int) Interaction.MsgBox((object) (BnsReg.resManager.GetString("REG_ERRWRITE") + Left));
            flag1 = 0;
            flag2 = false;
          }
          else
            flag2 = true;
        }
        else
        {
          int num = (int) Interaction.MsgBox((object) (BnsReg.resManager.GetString("REG_INVALIDFLAG") + name + " " + str2));
          flag1 = 0;
          flag2 = false;
        }
      }
      return flag2;
    }

    public static bool acet_setvar_real(ref string name, ref double val_Renamed, ref int flag = 0)
    {
      string str1 = Strings.UCase(name);
      string str2 = "REAL_" + Conversions.ToString(val_Renamed);
      int flag1 = flag;
      bool flag2 = false;
      if (flag1 <= 0)
        flag1 = 2;
      while (flag1 > 0)
      {
        string Left = BnsReg.acet_setvar_key(ref flag1);
        if (Operators.CompareString(Left, "", false) != 0)
        {
          string key = Left;
          ref string local1 = ref str1;
          object obj = (object) str2;
          ref object local2 = ref obj;
          int num1 = 1;
          ref int local3 = ref num1;
          int num2 = BnsReg.acet_RegistryWrite(key, ref local1, ref local2, ref local3) ? 1 : 0;
          str2 = Conversions.ToString(obj);
          if (num2 == 0)
          {
            int num3 = (int) Interaction.MsgBox((object) (BnsReg.resManager.GetString("REG_ERRWRITE") + Left));
            flag1 = 0;
            flag2 = false;
          }
          else
            flag2 = true;
        }
        else
        {
          int num = (int) Interaction.MsgBox((object) (BnsReg.resManager.GetString("REG_INVALIDFLAG") + name + " " + str2));
          flag1 = 0;
          flag2 = false;
        }
      }
      return flag2;
    }

    public static object acet_getvar(ref string name, ref int flag = 0, ref object def = 0)
    {
      object Left1 = (object) null;
      string str = Strings.UCase(name);
      int flag1 = flag;
      if (flag1 <= 0)
        flag1 = 6;
      while (flag1 > 0)
      {
        string Left2 = BnsReg.acet_setvar_key(ref flag1);
        if (Operators.CompareString(Left2, "", false) != 0)
        {
          string keypath = Left2;
          ref string local1 = ref str;
          object obj = (object) "";
          ref object local2 = ref obj;
          object objectValue = RuntimeHelpers.GetObjectValue(BnsReg.acet_RegistryRead(keypath, ref local1, ref local2));
          Left1 = Strings.Len(RuntimeHelpers.GetObjectValue(objectValue)) >= 5 ? (Operators.CompareString(Strings.UCase(Strings.Left(Conversions.ToString(objectValue), 5)), "STR__", false) != 0 ? (Operators.CompareString(Strings.UCase(Strings.Left(Conversions.ToString(objectValue), 5)), "INT__", false) != 0 ? (Operators.CompareString(Strings.UCase(Strings.Left(Conversions.ToString(objectValue), 5)), "REAL_", false) != 0 ? (object) "" : (object) Conversions.ToDouble(Strings.Mid(Conversions.ToString(objectValue), 6))) : (object) Conversions.ToInteger(Strings.Mid(Conversions.ToString(objectValue), 6))) : (object) Strings.Mid(Conversions.ToString(objectValue), 6)) : (object) "";
          if (Operators.ConditionalCompareObjectNotEqual(Left1, (object) "", false))
            flag1 = 0;
        }
        else
        {
          flag1 = 0;
          Left1 = (object) "";
        }
      }
      if (Operators.ConditionalCompareObjectEqual(Left1, (object) "", false))
        Left1 = RuntimeHelpers.GetObjectValue(def);
      return RuntimeHelpers.GetObjectValue(Left1);
    }

    public static string acet_setvar_key(ref int flag)
    {
      string str = "HKEY_CURRENT_USER\\" + BnsReg.AcadProductKey();
      if ((2 & flag) != 0)
      {
        str = str + "\\Profiles\\" + BnsReg.GetCurrentAcadProfile();
        checked { flag -= 2; }
      }
      else if ((4 & flag) != 0)
      {
        str += "\\FixedProfile";
        checked { flag -= 4; }
      }
      else
        flag = -1;
      return flag < 0 ? "" : str + "\\General";
    }

    public static string AcadTempdir(ref string profilename = "")
    {
      if (Operators.CompareString(profilename, "", false) == 0)
        profilename = BnsReg.GetCurrentAcadProfile();
      string keypath = "HKEY_CURRENT_USER\\" + BnsReg.AcadProductKey() + "\\Profiles\\General Configuration";
      string str1 = "TempDirectory";
      ref string local1 = ref str1;
      object obj = (object) BnsStr.WinTempDir();
      ref object local2 = ref obj;
      string str2 = Conversions.ToString(BnsReg.acet_RegistryRead(keypath, ref local1, ref local2));
      if (Strings.Len(str2) > 0 && Operators.CompareString(Strings.Right(str2, 1), "\\", false) != 0)
        str2 += "\\";
      return str2;
    }

    public static object acet_RegistryRead(string keypath, ref string name, ref object def)
    {
label_0:
      int num1;
      object obj1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
label_1:
        int num3 = 2;
        int hkey;
        keypath = BnsReg.hkeyPathFormat(ref keypath, ref hkey);
label_2:
        num3 = 3;
        if (hkey == 0)
          goto label_19;
label_3:
        num3 = 6;
        string szData1 = Strings.Space(4096);
label_4:
        num3 = 7;
        int lpcbData = Strings.Len(szData1);
label_5:
        num3 = 8;
        int phkResult;
        int num4 = BnsReg.RegOpenKeyEx(hkey, ref keypath, 0, 1, ref phkResult);
label_6:
        num3 = 9;
        if (num4 != 0)
          goto label_19;
label_7:
        num3 = 12;
        int lpType;
        num4 = BnsReg.RegQueryValueEx(phkResult, ref name, 0, ref lpType, ref szData1, ref lpcbData);
label_8:
        num3 = 13;
        if (num4 != 0)
          goto label_19;
label_9:
        num3 = 16;
        if (lpType != 4)
          goto label_13;
label_10:
        num3 = 17;
        int szData2;
        lpcbData = Strings.Len(szData2);
label_11:
        num3 = 18;
        num4 = BnsReg.RegQueryValueExNum(phkResult, ref name, 0, ref lpType, ref szData2, ref lpcbData);
label_12:
        num3 = 19;
        if (num4 != 0)
          goto label_19;
label_13:
        num3 = 23;
        num4 = BnsReg.RegCloseKey(phkResult);
label_14:
        num3 = 24;
        if (num4 != 0)
          goto label_19;
label_15:
        num3 = 27;
        if (lpType != 4)
          goto label_17;
label_16:
        num3 = 28;
        obj1 = (object) szData2;
        goto label_29;
label_17:
        num3 = 30;
label_18:
        num3 = 31;
        obj1 = (object) Strings.Left(szData1, checked (lpcbData - 1));
        goto label_29;
label_19:
        num3 = 34;
        if (phkResult == 0)
          goto label_22;
label_20:
        ProjectData.ClearProjectError();
        num1 = 1;
label_21:
        num3 = 36;
        BnsReg.RegCloseKey(phkResult);
label_22:
        num3 = 38;
        obj1 = RuntimeHelpers.GetObjectValue(def);
        goto label_29;
label_24:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
              case 4:
              case 10:
              case 14:
              case 20:
              case 25:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 5:
              case 6:
                goto label_3;
              case 7:
                goto label_4;
              case 8:
                goto label_5;
              case 9:
                goto label_6;
              case 11:
              case 12:
                goto label_7;
              case 13:
                goto label_8;
              case 15:
              case 16:
                goto label_9;
              case 17:
                goto label_10;
              case 18:
                goto label_11;
              case 19:
                goto label_12;
              case 21:
              case 22:
              case 23:
                goto label_13;
              case 24:
                goto label_14;
              case 26:
              case 27:
                goto label_15;
              case 28:
                goto label_16;
              case 29:
              case 32:
              case 33:
              case 39:
                goto label_29;
              case 30:
                goto label_17;
              case 31:
                goto label_18;
              case 34:
                goto label_19;
              case 35:
                goto label_20;
              case 36:
                goto label_21;
              case 37:
              case 38:
                goto label_22;
            }
            break;
          case 2:
            goto label_19;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_24;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_29:
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    public static bool acet_RegistryWrite(
      string key,
      ref string name,
      ref object val_Renamed,
      ref int typ = 1)
    {
label_0:
      int num1;
      bool flag;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
label_1:
        int num3 = 2;
        string key1 = key;
label_2:
        num3 = 3;
        int hkey1;
        key1 = BnsReg.hkeyPathFormat(ref key1, ref hkey1);
label_3:
        num3 = 4;
        if (hkey1 == 0)
          goto label_18;
label_4:
        num3 = 7;
        int hkey2 = hkey1;
        ref string local1 = ref key1;
        string str1 = "";
        ref string local2 = ref str1;
        BnsReg.SECURITY_ATTRIBUTES securityAttributes;
        ref BnsReg.SECURITY_ATTRIBUTES local3 = ref securityAttributes;
        int hkey3;
        ref int local4 = ref hkey3;
        int num4;
        ref int local5 = ref num4;
        int num5 = BnsReg.RegCreateKeyEx(hkey2, ref local1, 0, ref local2, 0, -1, ref local3, ref local4, ref local5);
label_5:
        num3 = 8;
        if (num5 != 0)
          goto label_18;
label_6:
        num3 = 11;
        if (typ != 1)
          goto label_9;
label_7:
        num3 = 12;
        Conversions.ToString(val_Renamed);
label_8:
        num3 = 13;
        int hkey4 = hkey3;
        ref string local6 = ref name;
        string str2 = Conversions.ToString(val_Renamed);
        ref string local7 = ref str2;
        int cbData = checked (Strings.Len(RuntimeHelpers.GetObjectValue(val_Renamed)) + 1);
        num5 = BnsReg.RegSetValueEx(hkey4, ref local6, 0, 1, ref local7, cbData);
        goto label_15;
label_9:
        num3 = 15;
        if (!(typ == 4 & Versioned.IsNumeric(RuntimeHelpers.GetObjectValue(val_Renamed))))
          goto label_15;
label_10:
        num3 = 16;
        int integer = Conversions.ToInteger(val_Renamed);
label_11:
        num3 = 17;
        byte[] numArray1 = new byte[checked (Strings.Len(integer) + 1)];
label_12:
        num3 = 20;
        object object_Renamed = (object) integer;
        int addressForObject = BnsStr.agGetAddressForObject(ref object_Renamed);
        integer = Conversions.ToInteger(object_Renamed);
        int num6 = addressForObject;
label_13:
        num3 = 21;
        object obj1 = (object) num6;
        ref object local8 = ref obj1;
        byte[] numArray2 = numArray1;
        int index1 = 0;
        int index2 = index1;
        object obj2 = (object) numArray2[index2];
        ref object local9 = ref obj2;
        int nCount = Strings.Len(integer);
        BnsStr.agCopyData(ref local8, ref local9, nCount);
        numArray1[index1] = Conversions.ToByte(obj2);
        num6 = Conversions.ToInteger(obj1);
label_14:
        num3 = 22;
        num5 = BnsReg.RegSetValueExNum(hkey3, ref name, 0, typ, ref numArray1[0], Strings.Len(integer));
label_15:
        num3 = 24;
        if (num5 != 0)
          goto label_18;
label_16:
        num3 = 27;
        num5 = BnsReg.RegCloseKey(hkey3);
label_17:
        num3 = 28;
        flag = num5 == 0;
        goto label_28;
label_18:
        num3 = 30;
        if (hkey3 == 0)
          goto label_21;
label_19:
        ProjectData.ClearProjectError();
        num1 = 1;
label_20:
        num3 = 32;
        BnsReg.RegCloseKey(hkey3);
label_21:
        num3 = 34;
        flag = false;
        goto label_28;
label_23:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num7 = num2 + 1;
            num2 = 0;
            switch (num7)
            {
              case 1:
              case 5:
              case 9:
              case 25:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 6:
              case 7:
                goto label_4;
              case 8:
                goto label_5;
              case 10:
              case 11:
                goto label_6;
              case 12:
                goto label_7;
              case 13:
                goto label_8;
              case 14:
              case 23:
              case 24:
                goto label_15;
              case 15:
                goto label_9;
              case 16:
                goto label_10;
              case 17:
                goto label_11;
              case 18:
              case 20:
                goto label_12;
              case 21:
                goto label_13;
              case 22:
                goto label_14;
              case 26:
              case 27:
                goto label_16;
              case 28:
                goto label_17;
              case 29:
              case 35:
                goto label_28;
              case 30:
                goto label_18;
              case 31:
                goto label_19;
              case 32:
                goto label_20;
              case 33:
              case 34:
                goto label_21;
            }
            break;
          case 2:
            goto label_18;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_23;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_28:
      int num8 = flag ? 1 : 0;
      if (num2 == 0)
        return num8 != 0;
      ProjectData.ClearProjectError();
      return num8 != 0;
    }

    private static string hkeyPathFormat(ref string key, ref int hkey)
    {
      string str1 = "";
      string str2 = key;
      string str3 = "/";
      ref string local1 = ref str3;
      string str4 = "\\";
      ref string local2 = ref str4;
      ref string local3 = ref str2;
      string strmain = BnsReg.StrReplace(ref local1, ref local2, ref local3);
      while (Operators.CompareString(Strings.Left(strmain, 1), "\\", false) == 0)
        strmain = Strings.Mid(strmain, 2);
      string[] strresult = new string[1];
      string delim = "\\";
      if (BnsReg.StrDelim(ref delim, ref strmain, ref strresult) < 0)
      {
        int num1 = (int) Interaction.MsgBox((object) (BnsReg.resManager.GetString("REG_HKEYERR") + strmain));
      }
      else
      {
        string str5 = Strings.UCase(strresult[0]);
        string Left = str5;
        if (Operators.CompareString(Left, "HKEY_CLASSES_ROOT", false) == 0)
          hkey = int.MinValue;
        else if (Operators.CompareString(Left, "HKEY_LOCAL_MACHINE", false) == 0)
          hkey = -2147483646;
        else if (Operators.CompareString(Left, "HKEY_CURRENT_USER", false) == 0)
          hkey = -2147483647;
        else if (Operators.CompareString(Left, "HKEY_CURRENT_CONFIG", false) == 0)
          hkey = -2147483643;
        else if (Operators.CompareString(Left, "", false) == 0)
        {
          int num2 = (int) Interaction.MsgBox((object) (BnsReg.resManager.GetString("REG_ERRMAIN") + str5));
          hkey = 0;
          str1 = "";
          goto label_21;
        }
        strmain = "";
        int num3 = Information.UBound((Array) strresult);
        int index = 1;
        while (index <= num3)
        {
          strmain = strmain + "\\" + strresult[index];
          checked { ++index; }
        }
        while (Strings.Len(strmain) >= 1 & Operators.CompareString(Strings.Left(strmain, 1), "\\", false) == 0)
          strmain = Strings.Mid(strmain, 2);
        str1 = strmain;
      }
label_21:
      return str1;
    }

    public static string acadcurver()
    {
      string str1 = "CurVer";
      ref string local1 = ref str1;
      object obj1 = (object) "";
      ref object local2 = ref obj1;
      string str2 = Conversions.ToString(BnsReg.acet_RegistryRead("HKEY_CURRENT_USER\\SOFTWARE\\Autodesk\\AutoCAD\\", ref local1, ref local2));
      if (Strings.Len(str2) > 0)
      {
        string Expression = Strings.Mid(str2, 2);
        if (Versioned.IsNumeric((object) Expression) && Conversions.ToDouble(Expression) < 15.0)
        {
          string str3 = "HKEY_CURRENT_USER\\SOFTWARE\\Autodesk\\AutoCAD\\R16.0\\";
          string str4 = "CurVer";
          string keypath = str3;
          ref string local3 = ref str4;
          object obj2 = (object) "";
          ref object local4 = ref obj2;
          if (Operators.ConditionalCompareObjectNotEqual(BnsReg.acet_RegistryRead(keypath, ref local3, ref local4), (object) "", false))
            str2 = "R16.0";
        }
      }
      return str2;
    }

    public static string acadcurvercookie()
    {
      string str = "CurVer";
      string Expression = BnsReg.acadcurver();
      if (Strings.Len(Expression) > 0)
      {
        string keypath = "HKEY_CURRENT_USER\\SOFTWARE\\Autodesk\\AutoCAD\\" + Expression;
        ref string local1 = ref str;
        object obj = (object) "";
        ref object local2 = ref obj;
        Expression = Conversions.ToString(BnsReg.acet_RegistryRead(keypath, ref local1, ref local2));
      }
      return Expression;
    }

    public static string GetAcadExpressDirectory()
    {
      string expressDirectory = BnsReg.GetAcadLocation();
      if (Operators.CompareString(expressDirectory, "", false) != 0)
        expressDirectory = BnsStr.FindFile(Strings.Left(expressDirectory, checked (Strings.Len(expressDirectory) - 8)) + "Express\\");
      return expressDirectory;
    }

    public static string GetAcadLocation()
    {
      string str1 = "SOFTWARE\\Autodesk\\AutoCAD\\";
      string Left1 = BnsReg.acadcurver();
      string Left2 = BnsReg.acadcurvercookie();
      string str2 = "AcadLocation";
      string Left3;
      if (Operators.CompareString(Left1, "", false) != 0 & Operators.CompareString(Left2, "", false) != 0)
      {
        string keypath = "HKEY_CURRENT_USER\\" + str1 + Left1 + "\\" + Left2;
        ref string local1 = ref str2;
        object obj = (object) "";
        ref object local2 = ref obj;
        Left3 = Conversions.ToString(BnsReg.acet_RegistryRead(keypath, ref local1, ref local2));
        if (Operators.CompareString(Left3, "", false) != 0)
          Left3 += "\\acad.exe";
      }
      else
        Left3 = "";
      return Left3;
    }

    public static string GetCurrentAcadProfile()
    {
      string str1 = "SOFTWARE\\Autodesk\\AutoCAD\\";
      string Left1 = BnsReg.acadcurver();
      string Left2 = BnsReg.acadcurvercookie();
      string str2 = "";
      string currentAcadProfile;
      if (Operators.CompareString(Left1, "", false) != 0 & Operators.CompareString(Left2, "", false) != 0)
      {
        string keypath = "HKEY_CURRENT_USER\\" + str1 + Left1 + "\\" + Left2 + "\\Profiles";
        ref string local1 = ref str2;
        object obj = (object) "";
        ref object local2 = ref obj;
        currentAcadProfile = Conversions.ToString(BnsReg.acet_RegistryRead(keypath, ref local1, ref local2));
      }
      else
        currentAcadProfile = "";
      return currentAcadProfile;
    }

    public static string AcadProductKey() => "Software\\Autodesk\\AutoCAD\\" + BnsReg.acadcurver() + "\\" + BnsReg.acadcurvercookie();

    public static string GetAcadPathFromProfile(ref string profile)
    {
      string str1 = "SOFTWARE\\Autodesk\\AutoCAD\\";
      string Left1 = BnsReg.acadcurver();
      string Left2 = BnsReg.acadcurvercookie();
      string str2 = "ACAD";
      string acadPathFromProfile;
      if (Operators.CompareString(Left1, "", false) != 0 & Operators.CompareString(Left2, "", false) != 0)
      {
        string keypath = "HKEY_CURRENT_USER\\" + str1 + Left1 + "\\" + Left2 + "\\Profiles\\" + profile + "\\General";
        ref string local1 = ref str2;
        object obj = (object) "";
        ref object local2 = ref obj;
        acadPathFromProfile = Conversions.ToString(BnsReg.acet_RegistryRead(keypath, ref local1, ref local2));
      }
      else
        acadPathFromProfile = "";
      return acadPathFromProfile;
    }

    public static string AcadDefWindowPos()
    {
      string str = "Position";
      string keypath = "HKEY_CURRENT_USER\\Software\\Autodesk\\AutoCAD\\" + (BnsReg.acadcurver() + "") + "\\" + (BnsReg.acadcurvercookie() + "") + "\\FixedProfile\\Application Window\\";
      ref string local1 = ref str;
      object obj = (object) "";
      ref object local2 = ref obj;
      return Conversions.ToString(BnsReg.acet_RegistryRead(keypath, ref local1, ref local2)) + "";
    }

    public static string StrReplace(ref string oldstr, ref string newstr, ref string mainstr)
    {
      string str1;
      if (Operators.CompareString(oldstr, "", false) == 0)
        str1 = mainstr;
      else if (Strings.InStr(1, mainstr, oldstr) == 0)
      {
        str1 = mainstr;
      }
      else
      {
        Strings.Len(newstr);
        int Length = Strings.Len(oldstr);
        int num = Strings.Len(mainstr);
        string str2 = "";
        int Start = 1;
        while (Start <= checked (Strings.Len(mainstr) - Length + 1))
        {
          if (Operators.CompareString(Strings.Mid(mainstr, Start, Length), oldstr, false) == 0)
          {
            str2 += newstr;
            checked { Start += Length; }
          }
          else
          {
            str2 += Strings.Mid(mainstr, Start, 1);
            checked { ++Start; }
          }
        }
        str1 = str2 + Strings.Mid(mainstr, Start, checked (num - Start + 1));
      }
      return str1;
    }

    public static int StrDelim(ref string delim, ref string strmain, ref string[] strresult)
    {
      strresult = new string[checked (Strings.Len(strmain) + 1 + 1)];
      int num1 = Strings.Len(delim);
      int num2 = Strings.Len(strmain);
      int Start = 1;
      int index1 = 0;
      for (int index2 = Strings.InStr(Start, strmain, delim); index2 > 0; index2 = Strings.InStr(Start, strmain, delim))
      {
        strresult[index1] = Strings.Mid(strmain, Start, checked (index2 - Start));
        Start = checked (index2 + num1);
        checked { ++index1; }
      }
      strresult[index1] = Strings.Mid(strmain, Start, checked (num2 - Start + 1));
      strresult = (string[]) Utils.CopyArray((Array) strresult, (Array) new string[checked (index1 + 1)]);
      return index1;
    }

    private struct SECURITY_ATTRIBUTES
    {
      public int nLength;
      public int lpSecurityDescriptor;
      public bool bInheritHandle;
    }

    private struct FILETIME
    {
      public int dwLowDateTime;
      public int dwHighDateTime;
    }
  }
}
