// Decompiled with JetBrains decompiler
// Type: Coache.Business.LoginService
// Assembly: IsCopyConstruc, Version=5.6.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 1DA50973-FF9A-4563-8B8F-74E2573677DF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-136935297fa08738f6957068951067c699c91b2902f3ea14da650289cabfd29d.exe

using Coache.Common;
using Data;
using System;
using System.Configuration;
using System.Data;
using System.Security.Cryptography;
using System.Text;

namespace Coache.Business
{
  public class LoginService
  {
    public User Login(string userName, string password)
    {
      this.ValidateLockedUser(userName);
      string hash = this.ComputeHash(password, (HashAlgorithm) new SHA256CryptoServiceProvider());
      DataRow dataRow = SqlDataAccess.ExecuteDataRowQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.Login", SqlDataAccessArgs.CreateWith("@Nombre", (object) userName).And("@Password", (object) hash).Arguments);
      User user = dataRow != null ? new User()
      {
        UserID = int.Parse(dataRow["ID"].ToString()),
        RoleID = int.Parse(dataRow["ID_Rol"].ToString()),
        UserName = dataRow["Nombre"].ToString()
      } : throw new Exception("Usuario o contraseña inválidos");
      this.SetUserFunctionalities(user);
      return user;
    }

    public bool UpdateUserPassword(User user, string oldPassword, string newPassword)
    {
      string hash1 = this.ComputeHash(oldPassword, (HashAlgorithm) new SHA256CryptoServiceProvider());
      string hash2 = this.ComputeHash(newPassword, (HashAlgorithm) new SHA256CryptoServiceProvider());
      return SqlDataAccess.ExecuteScalarQuery<object>(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.UpdateUserPassword", SqlDataAccessArgs.CreateWith("@ID_Usuario", (object) user.UserID).And("@OldPassword", (object) hash1).And("@NewPassword", (object) hash2).Arguments) != null;
    }

    public string ComputeHash(string input, HashAlgorithm algorithm)
    {
      byte[] bytes = Encoding.UTF8.GetBytes(input);
      return BitConverter.ToString(algorithm.ComputeHash(bytes));
    }

    private void ValidateLockedUser(string userName)
    {
      object obj = SqlDataAccess.ExecuteScalarQuery<object>(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetUserLoginAttempts", SqlDataAccessArgs.CreateWith("@Nombre", (object) userName).Arguments);
      if (obj == null)
        throw new Exception("Usuario o contraseña inválidos");
      if (int.Parse(obj.ToString()) == 3)
        throw new Exception("Usuario Bloqueado, contacte al administrador del sistema");
    }

    private void SetUserFunctionalities(User user)
    {
      foreach (Functionalities roleFunctionality in new FunctionalitiesManager().GetRoleFunctionalities(user.RoleID))
        user.Permissions.Add(roleFunctionality);
    }
  }
}
