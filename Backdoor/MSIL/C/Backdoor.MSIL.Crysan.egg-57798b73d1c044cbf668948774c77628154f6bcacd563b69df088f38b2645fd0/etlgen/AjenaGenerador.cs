// Decompiled with JetBrains decompiler
// Type: etlgen.AjenaGenerador
// Assembly: UCOMIEnumConnecti, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5D827560-3619-4F41-B7F7-70598092DF43
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.Crysan.egg-57798b73d1c044cbf668948774c77628154f6bcacd563b69df088f38b2645fd0.exe

using System;
using System.Collections;
using System.IO;
using System.Text;
using System.Xml;

namespace etlgen
{
  public class AjenaGenerador : ObjGenerador
  {
    private static readonly string TABLA_EXT = ".csv";
    private static readonly string TABLA_PATH = "data/";
    private string tabla;
    private char delimColum;
    private char spColum;
    private char spFilas;
    private ArrayList especColumnas;
    private bool especNumeros;
    private Hashtable filas;

    public AjenaGenerador()
    {
      this.entidad = this.id = "ajena";
      this.tabla = "";
      this.delimColum = '"';
      this.spColum = ';';
      this.spFilas = '\n';
      this.filas = new Hashtable();
      this.especColumnas = new ArrayList();
      this.especNumeros = true;
    }

    public override object Generar(Random random) => this.filas[(object) random.Next(this.filas.Count)];

    public override ObjGenerador Clonar()
    {
      AjenaGenerador ajenaGenerador = new AjenaGenerador();
      ajenaGenerador.entidad = this.entidad;
      ajenaGenerador.id = ajenaGenerador.id;
      this.tabla = ajenaGenerador.tabla;
      this.delimColum = ajenaGenerador.delimColum;
      this.spColum = ajenaGenerador.spColum;
      this.spFilas = ajenaGenerador.spFilas;
      this.filas = (Hashtable) ajenaGenerador.filas.Clone();
      this.especColumnas = (ArrayList) ajenaGenerador.especColumnas.Clone();
      this.especNumeros = ajenaGenerador.especNumeros;
      return (ObjGenerador) ajenaGenerador;
    }

    public override void Cargar(XmlTextReader reader, ETLConfig configuracion)
    {
      if (reader.NodeType != XmlNodeType.Element || reader.Name != this.entidad)
        this.ErrorEntidad(this.entidad);
      string id = (string) null;
      string str1 = (string) null;
      string str2 = (string) null;
      string str3 = (string) null;
      string str4 = (string) null;
      ArrayList arrayList1 = new ArrayList();
      ArrayList arrayList2 = new ArrayList();
      while (reader.MoveToNextAttribute())
      {
        switch (reader.Name)
        {
          case "delim-colum":
            str2 = reader.Value;
            break;
          case "id":
            id = reader.Value;
            break;
          case "nom-colum":
            arrayList2.Add((object) reader.Value);
            break;
          case "num-colum":
            if (int.Parse(reader.Value) <= 0)
              this.ErrorValor(this.entidad, id, "num-colum", reader.Value);
            arrayList1.Add((object) int.Parse(reader.Value).ToString());
            break;
          case "sp-colum":
            str3 = reader.Value;
            break;
          case "sp-filas":
            str4 = reader.Value;
            break;
          case "tabla":
            str1 = reader.Value;
            break;
          default:
            this.ErrorAtributo(this.entidad, reader.Name, reader.Value, reader.LineNumber);
            break;
        }
      }
      if (arrayList1.Count == 0 && arrayList2.Count == 0)
        this.ErrorValor(this.entidad, id, "nombre-columnas", "");
      else if (arrayList1.Count != 0 && arrayList2.Count != 0)
        this.ErrorValor(this.entidad, id, "nombre-columnas", "");
      else if (arrayList1.Count != 0)
      {
        this.especColumnas = arrayList1;
        this.especNumeros = true;
      }
      else
      {
        this.especColumnas = arrayList2;
        this.especNumeros = false;
      }
      this.Descomponer();
      if (id != null)
        this.id = id;
      if (str2 != null)
      {
        string valor = str2;
        if (valor.Length > 1)
          this.ErrorValor(this.entidad, id, "delim-colum", valor);
        else
          this.delimColum = valor[0];
      }
      if (str3 != null)
      {
        string valor = str3.Replace("\\t", "\t");
        if (valor.Length > 1)
          this.ErrorValor(this.entidad, id, "sp-colum", valor);
        else
          this.spColum = valor[0];
      }
      if (str4 != null)
      {
        string valor = str4.Replace("\\n", "\n").Replace("\\r", "\r");
        if (valor.Length > 1)
          this.ErrorValor(this.entidad, id, "sp-filas", valor);
        else
          this.spFilas = valor[0];
      }
      if (str1 != null)
      {
        this.CargarFilas(AjenaGenerador.TABLA_PATH + str1 + AjenaGenerador.TABLA_EXT);
        this.tabla = str1;
      }
      else
        this.ErrorValor(this.entidad, id, "tabla", "");
    }

    private void CargarFilas(string archivo)
    {
      StreamReader streamReader = new StreamReader(archivo, Encoding.Default);
      if (!this.especNumeros)
      {
        bool flag1 = false;
        bool flag2 = false;
        StringBuilder stringBuilder = new StringBuilder(1024);
        int num1 = 0;
        int num2;
        while ((num2 = streamReader.Read()) != -1 && num2 != (int) this.spFilas)
        {
          char ch = (char) num2;
          if ((int) ch == (int) this.delimColum)
          {
            if (!flag2)
            {
              flag2 = true;
              ++num1;
            }
            else
            {
              flag2 = false;
              if (this.especColumnas.Contains((object) stringBuilder.ToString()))
              {
                this.especColumnas[this.especColumnas.IndexOf((object) stringBuilder.ToString())] = (object) num1.ToString();
                flag1 = true;
              }
              stringBuilder.Remove(0, stringBuilder.Length);
            }
          }
          else if ((int) ch == (int) this.spColum)
          {
            if (flag2)
              throw new ArgumentException(archivo + ": columna sin completar");
          }
          else
            stringBuilder.Append(ch);
        }
        if (!flag1)
          throw new ArgumentException(archivo + ": especificación del nombre de la columna no válida");
      }
      bool flag = false;
      StringBuilder stringBuilder1 = new StringBuilder(1024);
      int num3 = 0;
      ArrayList arrayList = new ArrayList();
      for (int index = 0; index < this.especColumnas.Count; ++index)
        arrayList.Add((object) 0);
      int num4;
      while ((num4 = streamReader.Read()) != -1)
      {
        char ch = (char) num4;
        if ((int) ch == (int) this.delimColum)
        {
          if (!flag)
          {
            flag = true;
            ++num3;
          }
          else
          {
            flag = false;
            if (this.especColumnas.Contains((object) num3.ToString()))
            {
              int index = this.especColumnas.IndexOf((object) num3.ToString());
              arrayList[index] = (object) stringBuilder1.ToString();
            }
            stringBuilder1.Remove(0, stringBuilder1.Length);
          }
        }
        else if ((int) ch == (int) this.spColum)
        {
          if (flag)
            throw new ArgumentException(archivo + ": columna sin completar");
        }
        else if ((int) ch == (int) this.spFilas)
        {
          if (flag)
            throw new ArgumentException(archivo + ": fila con columna sin completar");
          num3 = 0;
          string str = "" + arrayList[0]?.ToString();
          for (int index = 1; index < arrayList.Count; ++index)
            str = str + this.delimColum.ToString() + this.spColum.ToString() + this.delimColum.ToString() + arrayList[index]?.ToString();
          this.filas.Add((object) this.filas.Count, (object) str);
        }
        else
          stringBuilder1.Append(ch);
      }
      streamReader.Close();
    }

    public override string ToString() => "<" + this.entidad + " id=\"" + this.id + "\" tabla=\"" + this.tabla + "\" delimColum=\"" + this.delimColum.ToString() + "\" spColum=\"" + this.spColum.ToString() + "\" spFilas=\"" + this.spFilas.ToString() + "\" />";

    private void Descomponer()
    {
      StringReader stringReader = new StringReader(this.especColumnas[0].ToString());
      this.especColumnas.Clear();
      StringBuilder stringBuilder = new StringBuilder(1024);
      int num;
      while ((num = stringReader.Read()) != -1 && num != (int) this.spFilas)
      {
        char ch = (char) num;
        if ((int) ch == (int) this.spColum)
        {
          this.especColumnas.Add((object) stringBuilder.ToString());
          stringBuilder.Remove(0, stringBuilder.Length);
        }
        else
          stringBuilder.Append(ch);
      }
      this.especColumnas.Add((object) stringBuilder.ToString());
      stringBuilder.Remove(0, stringBuilder.Length);
    }
  }
}
