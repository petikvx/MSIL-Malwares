// Decompiled with JetBrains decompiler
// Type: _7Wonders.GameMaster
// Assembly: No, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A0F00D95-9767-4554-B865-5A1BEBFA378F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\Trojan.MSIL.Taskun.am-5fabf5c9fcceb520d7023eaf53122959f42bdb4b1c82bc916baa4bbb94f787ae.exe

using System;

namespace _7Wonders
{
  public class GameMaster
  {
    public Player[] Players;
    private Card[] theLeaderDeck;
    public Card[][] AgeDecks;
    public Card[] discardPile;
    private string[] wonders;
    public int nPlayers;
    public int version;
    public bool restart;

    public GameMaster(int[] startVal)
    {
      this.nPlayers = startVal[0];
      this.version = startVal[1];
      this.Players = new Player[this.nPlayers];
      this.restart = false;
      this.initializeWonders();
      for (int pos = 0; pos < this.nPlayers; ++pos)
        this.Players[pos] = new Player(this.wonders[pos], pos, this.version);
      for (int index = 0; index < this.nPlayers; ++index)
      {
        if (this.Players[index].wonder == "Rome")
        {
          this.Players[(index + this.nPlayers - 1) % this.nPlayers].leaderDiscount = 1;
          this.Players[(index + 1) % this.nPlayers].leaderDiscount = 1;
        }
      }
      if (this.version >= 1)
      {
        this.theLeaderDeck = new LeaderDeck(this.version).theDeck;
        for (int index1 = 0; index1 < 4; ++index1)
        {
          for (int index2 = 0; index2 < this.nPlayers; ++index2)
            this.Players[index2].dealCard(this.theLeaderDeck[index1 * this.nPlayers + index2], index1);
        }
      }
      this.AgeDecks = new Card[3][];
      this.AgeDecks[0] = new AgeDeck(this.nPlayers, this.version, 1).theDeck;
      this.AgeDecks[1] = new AgeDeck(this.nPlayers, this.version, 2).theDeck;
      this.AgeDecks[2] = new AgeDeck(this.nPlayers, this.version, 3).theDeck;
      int num = 7;
      if (this.version >= 2)
        num = 8;
      for (int index3 = 0; index3 < num; ++index3)
      {
        for (int index4 = 0; index4 < this.nPlayers; ++index4)
          this.Players[index4].dealCard(this.AgeDecks[0][index3 * this.nPlayers + index4], index3);
      }
      this.discardPile = new Card[8 * this.nPlayers];
    }

    private void initializeWonders()
    {
      int num = 0;
      if (this.version == 1)
        num = 1;
      if (this.version == 2)
        num = 3;
      this.wonders = new string[7 + num];
      this.wonders[0] = "Babylon";
      this.wonders[1] = "Alexandria";
      this.wonders[2] = "Giza";
      this.wonders[3] = "Olympus";
      this.wonders[4] = "Halikarnassos";
      this.wonders[5] = "Ephesos";
      this.wonders[6] = "Rhodos";
      if (this.version >= 1)
        this.wonders[7] = "Rome";
      if (this.version >= 2)
      {
        this.wonders[8] = "Petra";
        this.wonders[9] = "Byzantium";
      }
      this.ShuffleString(this.wonders);
    }

    private void ShuffleString(string[] aDeck)
    {
      Random random = new Random();
      int length = aDeck.Length;
      for (int index1 = 0; index1 < length; ++index1)
      {
        int index2 = random.Next(0, length);
        int index3 = random.Next(0, length);
        string str = aDeck[index2];
        aDeck[index2] = aDeck[index3];
        aDeck[index3] = str;
      }
    }

    public void dealRome(int player)
    {
      int length = this.Players[player].leaderHand.Length;
      Card[] cardArray = new Card[length + 4];
      for (int index = 0; index < length; ++index)
        cardArray[index] = this.Players[player].leaderHand[index];
      for (int index = 0; index < 4; ++index)
        cardArray[length + index] = this.theLeaderDeck[this.nPlayers * 4 + index];
      this.Players[player].leaderHand = cardArray;
    }
  }
}
