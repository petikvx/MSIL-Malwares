// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: ConcurrentS, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: BBECA65A-DDC9-4285-A0F3-1DAD9BE0ED87
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-29a2cecf014cf5640915defd5f1ca82e75089ad0ec89107be8f9144673d99be6.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 953144491;
      int index;
      int aIndex;
      JSONNode jsonNode;
      int count;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1931562628)) % 18U)
        {
          case 0:
            ++aIndex;
            num1 = (int) num2 * 318346652 ^ -379267226;
            continue;
          case 1:
            num1 = (int) num2 * 1125440167 ^ 2041703088;
            continue;
          case 2:
            goto label_3;
          case 3:
            this._playerStates[index] = new PlayerState();
            num1 = 154527482;
            continue;
          case 4:
            int num3 = flag1 ? -1280755517 : (num3 = -1017428701);
            num1 = num3 ^ (int) num2 * 1849773188;
            continue;
          case 5:
            aIndex = 0;
            num1 = (int) num2 * 1653304774 ^ 2099193175;
            continue;
          case 6:
            this._dice = new Dice();
            num1 = (int) num2 * 943719674 ^ 67338681;
            continue;
          case 7:
            this._buffer = buffer;
            this._random = Game.\u206A‬⁮‍⁭‎⁬‍‌⁪​‌⁯‮‏⁪‬‌‎‮⁭⁯⁪‭⁫⁫⁫‎‬‬⁮‍⁮⁮⁮‭‪‪⁬⁯‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * 1691924642 ^ -2145870344;
            continue;
          case 8:
            index = 0;
            num1 = (int) num2 * 2130647821 ^ 363614410;
            continue;
          case 9:
            jsonNode = json["players"];
            count = jsonNode.Count;
            this.Players = new Player[count];
            num1 = (int) num2 * -1570618880 ^ 1731330119;
            continue;
          case 10:
            flag1 = aIndex < count;
            num1 = 1191985640;
            continue;
          case 11:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * 497039401 ^ -1051081641;
            continue;
          case 12:
            flag2 = index < count;
            num1 = 193146069;
            continue;
          case 13:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = 6535006;
            continue;
          case 14:
            goto label_1;
          case 15:
            num1 = (int) num2 * -943883310 ^ -1585184148;
            continue;
          case 16:
            ++index;
            num1 = (int) num2 * -2051595812 ^ 930366926;
            continue;
          case 17:
            int num4 = flag2 ? -1737802788 : (num4 = -1708270375);
            num1 = num4 ^ (int) num2 * 1598389033;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = -2076733104;
        bool finished2;
        int index;
        bool flag;
        PlayerState playerState;
        PlayerState[] playerStates;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1867132327)) % 13U)
          {
            case 0:
              int num3;
              num1 = num3 = index >= playerStates.Length ? -678894411 : (num3 = -343710639);
              continue;
            case 1:
              finished2 = true;
              num1 = (int) num2 * -684086212 ^ -87250044;
              continue;
            case 2:
              num1 = (int) num2 * 1491194038 ^ 1212802488;
              continue;
            case 3:
              int num4 = flag ? 1067665981 : (num4 = 2057947771);
              num1 = num4 ^ (int) num2 * -977815928;
              continue;
            case 4:
              goto label_1;
            case 5:
              finished2 = false;
              num1 = (int) num2 * 1699138468 ^ 1608424651;
              continue;
            case 7:
              playerState = playerStates[index];
              num1 = -335222979;
              continue;
            case 8:
              int num5 = !finished1 ? 321173108 : (num5 = 1096393760);
              num1 = num5 ^ (int) num2 * -443530462;
              continue;
            case 9:
              ++index;
              num1 = -193245913;
              continue;
            case 10:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * -1280876041 ^ -310554775;
              continue;
            case 11:
              finished2 = true;
              num1 = (int) num2 * 1112569904 ^ -1917111612;
              continue;
            case 12:
              playerStates = this._playerStates;
              index = 0;
              num1 = -193245913;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return finished2;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = -847445658;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2084527046)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * -2143357225 ^ -2140434907;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = -1813710977;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -135668978)) % 9U)
        {
          case 0:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -462350833 ^ -291623732;
            continue;
          case 1:
            this.Losers.Clear();
            num1 = (int) num2 * 985971856 ^ 951075915;
            continue;
          case 2:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -244553013 ^ 444867697;
            continue;
          case 3:
            num1 = (int) num2 * -1618530668 ^ 1147848459;
            continue;
          case 4:
            num1 = (int) num2 * 1782234594 ^ 1750888361;
            continue;
          case 5:
            this.Winners.Clear();
            num1 = (int) num2 * 363269360 ^ 1739511266;
            continue;
          case 6:
            goto label_3;
          case 7:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * 1944078487 ^ 1398219819;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 31781566;
      int index;
      Player player;
      PlayerState playerState;
      bool flag1;
      int planningCardsCount;
      bool flag2;
      int num2;
      bool morePlanningSprint;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1112508971)) % 26U)
        {
          case 0:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = 582578386;
            continue;
          case 1:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -1153042626 ^ -1966718364;
            continue;
          case 2:
            int num4 = !flag3 ? -2081108491 : (num4 = -885131578);
            num1 = num4 ^ (int) num3 * -306387548;
            continue;
          case 3:
            num1 = (int) num3 * 1908538912 ^ -1770957671;
            continue;
          case 4:
            num2 = 0;
            num1 = 836660409;
            continue;
          case 5:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -33258089 ^ 1711147424;
            continue;
          case 6:
            int num5 = !morePlanningSprint ? -918881822 : (num5 = -571614947);
            num1 = num5 ^ (int) num3 * -1619496365;
            continue;
          case 7:
            goto label_1;
          case 8:
            goto label_3;
          case 9:
            num1 = 2099988977;
            continue;
          case 10:
            num1 = 1392535544;
            continue;
          case 11:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            ++index;
            num1 = 810636444;
            continue;
          case 12:
            num1 = (int) num3 * -1743613138 ^ -1027995245;
            continue;
          case 13:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -1249208353 ^ 669005238;
            continue;
          case 14:
            playerState.State = State.Playing;
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -891857179 ^ -754828791;
            continue;
          case 15:
            index = 0;
            num1 = (int) num3 * -2072362511 ^ -1185083943;
            continue;
          case 16:
            playerState.Sprint = -1;
            num1 = (int) num3 * -342094085 ^ -1177322042;
            continue;
          case 17:
            int num6 = flag2 ? 1927280788 : (num6 = 336130997);
            num1 = num6 ^ (int) num3 * 24608828;
            continue;
          case 18:
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * -312236498 ^ 1178569318;
            continue;
          case 19:
            flag1 = index < this.Players.Length;
            num1 = 1050846323;
            continue;
          case 20:
            num1 = (int) num3 * -1077070932 ^ -743402976;
            continue;
          case 21:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1408661833 ^ -1782198782;
            continue;
          case 22:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * -1918459815 ^ 114233580;
            continue;
          case 23:
            flag3 = num2 > 0;
            num1 = 1347646455;
            continue;
          case 24:
            int num7 = flag1 ? -599196502 : (num7 = -108616037);
            num1 = num7 ^ (int) num3 * -1981819447;
            continue;
          case 25:
            playerState.Sprint = 1;
            num1 = (int) num3 * 1213045926 ^ -950678501;
            continue;
          default:
            goto label_28;
        }
      }
label_3:
      return;
label_28:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
      bool flag1 = this._currentPlayer >= this.Players.Length;
label_1:
      int num1 = 332507324;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 206729533)) % 14U)
        {
          case 0:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1051240111 ^ -700468249;
            continue;
          case 1:
            goto label_3;
          case 2:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 416024903 ^ -976030958;
            continue;
          case 3:
            this._currentPlayer = 0;
            num1 = (int) num2 * -2051869352 ^ 876950314;
            continue;
          case 4:
            int num3 = flag2 ? 347090665 : (num3 = 2119218899);
            num1 = num3 ^ (int) num2 * -45424671;
            continue;
          case 5:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1834218006;
            continue;
          case 6:
            this.Print((object) Game.\u202E⁭⁫⁯⁫‬‏‍‬‬‬⁪⁮​‌‭‭‎‮‭‬‏⁬‬⁯⁫‍​⁪‪⁫‭⁬​⁮⁬⁭‮‮‭‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 969401099;
            continue;
          case 7:
            num1 = (int) num2 * 149862267 ^ -1892287520;
            continue;
          case 8:
            goto label_1;
          case 9:
            int num4 = !flag1 ? 1859073005 : (num4 = 797058682);
            num1 = num4 ^ (int) num2 * 553503909;
            continue;
          case 10:
            num1 = (int) num2 * -993208253 ^ -610565848;
            continue;
          case 11:
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * -1243534990 ^ 1738991829;
            continue;
          case 12:
            num1 = (int) num2 * -2038607881 ^ -978868146;
            continue;
          case 13:
            this.Print((object) Game.\u206A‎‪⁫‫⁮⁫⁯⁬​​⁪‎‫⁪⁭⁪‭⁫‫‫‍⁯⁬⁫⁬⁬‫⁯‬⁫⁭⁫⁬‬⁭‏⁫‌‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1842088743 ^ -15920389;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -754743363;
      while (true)
      {
        uint num2;
        Card card;
        int num3;
        bool flag1;
        bool flag2;
        PlayerState playerState1;
        int index;
        bool flag3;
        int num4;
        int num5;
        PlayerState playerState2;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        Player player;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        int num6;
        switch ((num2 = (uint) (num1 ^ -379185257)) % 88U)
        {
          case 0:
            card = this.DrawCard();
            num1 = (int) num2 * -459760515 ^ -869837756;
            continue;
          case 1:
            flag1 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -732924091 ^ 634377411;
            continue;
          case 2:
            num1 = -250823189;
            continue;
          case 3:
            goto label_3;
          case 4:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * -642296962 ^ -412968648;
            continue;
          case 5:
            index = 0;
            num1 = (int) num2 * 1257043545 ^ 1871622303;
            continue;
          case 6:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1404206176 ^ -1281857329;
            continue;
          case 7:
            num1 = (int) num2 * 1019318492 ^ -235469816;
            continue;
          case 8:
            num1 = (int) num2 * 694725104 ^ 1207826009;
            continue;
          case 9:
            num1 = (int) num2 * 2052027026 ^ 1312125537;
            continue;
          case 10:
            flag1 = false;
            num1 = -1866938007;
            continue;
          case 11:
            int num7 = !flag13 ? 1207941879 : (num7 = 1191695752);
            num1 = num7 ^ (int) num2 * -216485722;
            continue;
          case 12:
            num1 = -559865793;
            continue;
          case 13:
            flag10 = index < this._playerStates.Length;
            num1 = -1185209410;
            continue;
          case 14:
            num1 = (int) num2 * 508849829 ^ -1135804245;
            continue;
          case 15:
            num1 = (int) num2 * 211649928 ^ -203239789;
            continue;
          case 16:
            playerState1.State = State.Lose;
            num1 = (int) num2 * 1843419870 ^ 1767272140;
            continue;
          case 17:
            this.Losers.Add(index);
            num1 = (int) num2 * 1673290090 ^ 533520699;
            continue;
          case 18:
            int num8;
            num1 = num8 = num4 >= this._playerStates.Length ? -1047237697 : (num8 = -805985538);
            continue;
          case 19:
            num1 = (int) num2 * -7754353 ^ 1150019168;
            continue;
          case 20:
            flag1 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 2131410588 ^ -1599731586;
            continue;
          case 21:
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u206A‎‪⁫‫⁮⁫⁯⁬​​⁪‎‫⁪⁭⁪‭⁫‫‫‍⁯⁬⁫⁬⁬‫⁯‬⁫⁭⁫⁬‬⁭‏⁫‌‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 539054687 ^ -1152904940;
            continue;
          case 22:
            num1 = (int) num2 * 925201035 ^ 867803118;
            continue;
          case 23:
            flag1 = true;
            num1 = (int) num2 * -1486727978 ^ 927892073;
            continue;
          case 24:
            flag2 = flag1;
            num1 = -1881094734;
            continue;
          case 25:
            num1 = -7993661;
            continue;
          case 26:
            int num9 = this.Rules.OnlyOneWinner ? -1293993317 : (num9 = -820393844);
            num1 = num9 ^ (int) num2 * -1539493541;
            continue;
          case 27:
            flag5 = card.Impact < 0;
            num1 = (int) num2 * 1847836107 ^ -398218420;
            continue;
          case 28:
            ++index;
            num1 = -168738966;
            continue;
          case 29:
            int num10 = !flag2 ? 1318553169 : (num10 = 1216160823);
            num1 = num10 ^ (int) num2 * -381230713;
            continue;
          case 30:
            flag7 = !flag4;
            num1 = (int) num2 * -743006510 ^ 997438240;
            continue;
          case 31:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206A‎‪⁫‫⁮⁫⁯⁬​​⁪‎‫⁪⁭⁪‭⁫‫‫‍⁯⁬⁫⁬⁬‫⁯‬⁫⁭⁫⁬‬⁭‏⁫‌‮("\t", playerState3 != null ? Game.\u202D‍‫‌‎‮‮‏‪‫‍‬‎‬⁪​⁪‬‏⁯⁯‍⁮‬⁫‏‎⁫⁮‫⁪‭⁬‫⁮​⁫‪‮‮‮((object) playerState3) : (string) null));
            num1 = -747593391;
            continue;
          case 32:
            flag3 = !this.Losers.Contains(index);
            num1 = (int) num2 * 1571073760 ^ -1543553141;
            continue;
          case 33:
            num3 = Game.\u200C‪‭​‌⁮⁯⁪​⁪‏‌​‍⁮‫‬‎‍‎⁯‍⁮‌⁮‫‏⁭‫‎‫‭⁫‪‌⁪⁮⁪⁪⁫‮(0, num5);
            num1 = (int) num2 * 1755505310 ^ 38749173;
            continue;
          case 34:
            player = this.Players[playerIndex];
            num1 = (int) num2 * 1810266437 ^ 1877947184;
            continue;
          case 35:
            int num11 = flag7 ? -1509254027 : (num11 = -803532187);
            num1 = num11 ^ (int) num2 * -1319992965;
            continue;
          case 36:
            num1 = -1030293617;
            continue;
          case 37:
            num1 = -1501968552;
            continue;
          case 38:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -1199250705 ^ 1725401890;
            continue;
          case 39:
            int num12;
            num1 = num12 = playerState1.Sprint >= 0 ? -1242286843 : (num12 = -1185769575);
            continue;
          case 40:
            num1 = (int) num2 * -626975804 ^ -286199606;
            continue;
          case 41:
            goto label_1;
          case 42:
            int num13;
            num1 = num13 = this._dice.Roll(this._chances[this._currentChanceIndex]) ? -1175941574 : (num13 = -11811722);
            continue;
          case 43:
            playerState1.Resources -= num3;
            flag9 = playerState1.Resources < 0;
            num1 = (int) num2 * 1427901044 ^ 122346900;
            continue;
          case 44:
            num3 = card.Impact;
            num1 = (int) num2 * -1235351554 ^ -714308823;
            continue;
          case 45:
            this.Losers.Add(num4);
            num1 = (int) num2 * 351678692 ^ 309975599;
            continue;
          case 46:
            num1 = (int) num2 * 626302488 ^ 145319228;
            continue;
          case 47:
            int num14 = flag9 ? 50734051 : (num14 = 1597492545);
            num1 = num14 ^ (int) num2 * -1416102748;
            continue;
          case 48:
            this._finished = true;
            num1 = (int) num2 * -1752592135 ^ -2058061623;
            continue;
          case 49:
            num1 = -294286470;
            continue;
          case 50:
            playerState1.State = State.Won;
            num1 = (int) num2 * 1447782146 ^ 757206288;
            continue;
          case 51:
            num1 = -1173897878;
            continue;
          case 52:
            num1 = -1183716605;
            continue;
          case 53:
            int num15 = num4 == playerIndex ? 1668975089 : (num15 = 1366989134);
            num1 = num15 ^ (int) num2 * -541035315;
            continue;
          case 54:
            num1 = (int) num2 * -1877983562 ^ -810620452;
            continue;
          case 55:
            num1 = (int) num2 * -1027646544 ^ 2014616943;
            continue;
          case 56:
            ++num4;
            num1 = -890587691;
            continue;
          case 57:
            int num16 = flag10 ? 2024269827 : (num16 = 770532736);
            num1 = num16 ^ (int) num2 * -1808559160;
            continue;
          case 58:
            num1 = (int) num2 * 321493793 ^ 1517664501;
            continue;
          case 59:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1336493574 ^ 1408360444;
            continue;
          case 60:
            num1 = (int) num2 * -1812482577 ^ 2112668778;
            continue;
          case 61:
            int num17 = !flag11 ? -1112627427 : (num17 = -1695659416);
            num1 = num17 ^ (int) num2 * -2063653199;
            continue;
          case 62:
            num1 = (int) num2 * 1641638428 ^ 1546044814;
            continue;
          case 63:
            int num18 = !flag8 ? 2072810943 : (num18 = 790151648);
            num1 = num18 ^ (int) num2 * 799575727;
            continue;
          case 64:
            flag12 = playerState1.State != 0;
            num1 = (int) num2 * -356787550 ^ 1761443635;
            continue;
          case 65:
            num1 = (int) num2 * 990679000 ^ -996488772;
            continue;
          case 66:
            num1 = (int) num2 * -956399568 ^ 1237350513;
            continue;
          case 67:
            flag13 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -1676599773 ^ -806667203;
            continue;
          case 68:
            int num19 = flag12 ? 2027461709 : (num19 = 1695971192);
            num1 = num19 ^ (int) num2 * -379055702;
            continue;
          case 69:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 734637 ^ -209427732;
            continue;
          case 70:
            num1 = (int) num2 * 917093996 ^ -457489589;
            continue;
          case 71:
            int num20 = !flag6 ? 486028043 : (num20 = 179535207);
            num1 = num20 ^ (int) num2 * 1154813824;
            continue;
          case 72:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 186724167 ^ -180191042;
            continue;
          case 73:
            num1 = (int) num2 * 1344726210 ^ 334102922;
            continue;
          case 74:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * -2142099062 ^ 2021700265;
            continue;
          case 75:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 2079611074 ^ 303847971;
            continue;
          case 76:
            int num21 = flag3 ? 1309765806 : (num21 = 1234036782);
            num1 = num21 ^ (int) num2 * 825946958;
            continue;
          case 77:
            num1 = -1268390289;
            continue;
          case 78:
            num1 = (int) num2 * 618497103 ^ -65513797;
            continue;
          case 79:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag4 ? (object) "ALL " : (object) "", flag5 ? (object) "receives" : (object) "pays", (object) Game.\u206C‍⁯‎⁪‭‍‭‭‪‪⁪⁫‫​​‍⁭‏‌⁭‌‏‪⁮‬⁬⁫‬⁯‍‍⁮​⁯‎‮‪⁬‭‮(num3), flag1 ? (object) "advance" : (object) "stay");
            num1 = -1978508911;
            continue;
          case 80:
            int num22;
            num1 = num22 = !this.Losers.Contains(num4) ? -689597158 : (num22 = -1553895493);
            continue;
          case 81:
            playerState2.State = State.Lose;
            num1 = -990016761;
            continue;
          case 82:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 83:
            num1 = (int) num2 * -1345397261 ^ 469908198;
            continue;
          case 84:
            num1 = -2017484848;
            continue;
          case 85:
            flag11 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = -851523518;
            continue;
          case 86:
            num4 = 0;
            num1 = (int) num2 * 655431526 ^ 1540953512;
            continue;
          case 87:
            playerState2.Resources -= Game.\u200C‪‭​‌⁮⁯⁪​⁪‏‌​‍⁮‫‬‎‍‎⁯‍⁮‌⁮‫‏⁭‫‎‫‭⁫‪‌⁪⁮⁪⁪⁫‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            flag8 = playerState2.Resources >= 0;
            num1 = (int) num2 * -261023672 ^ -864630544;
            continue;
          default:
            goto label_93;
        }
        flag4 = num6 != 0;
        flag6 = !flag5;
        num1 = -1795359512;
      }
label_3:
      return;
label_93:;
    }

    private Card DrawCard()
    {
      bool flag = this._deck.Count <= 0;
label_1:
      int num1 = -1399320009;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -480912763)) % 8U)
        {
          case 1:
            num1 = (int) num2 * 1768189426 ^ -716605452;
            continue;
          case 2:
            int num3 = !flag ? -644930601 : (num3 = -1882889819);
            num1 = num3 ^ (int) num2 * -160332417;
            continue;
          case 3:
            card2 = card1;
            num1 = (int) num2 * 585123776 ^ -455355867;
            continue;
          case 4:
            card1 = this._deck[0];
            num1 = -1586871176;
            continue;
          case 5:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 1549415301 ^ 1581884797;
            continue;
          case 6:
            this.ShuffleCards();
            num1 = (int) num2 * 2106926344 ^ 1660573929;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 254443221;
      string str1;
      string str2;
      int index;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 872934947)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202D‍‫‌‎‮‮‏‪‫‍‬‎‬⁪​⁪‬‏⁯⁯‍⁮‬⁫‏‎⁫⁮‫⁪‭⁬‫⁮​⁫‪‮‮‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202E⁪⁬⁮‬​​⁫⁪⁯‬​‏‬‫‭‏⁪‫‌⁫​‭⁯⁮‫⁫‮‪‪‫⁬⁬⁮‬⁫‍​⁪‌‮(strArray);
            num1 = 2012046768;
            continue;
          case 2:
            int num3 = !flag ? -1770769747 : (num3 = -1440551304);
            num1 = num3 ^ (int) num2 * -1040415023;
            continue;
          case 3:
            ++index;
            num1 = (int) num2 * -1030006523 ^ -2036699957;
            continue;
          case 4:
            str2 = str1;
            num1 = (int) num2 * 1808466769 ^ -2076101974;
            continue;
          case 6:
            str1 = "";
            index = 0;
            num1 = (int) num2 * 845622730 ^ 1407719432;
            continue;
          case 7:
            flag = index < this._playerStates.Length;
            num1 = 1096331257;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -1763938122;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -375267641)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            str = Game.\u200F‍‏⁫‭⁫⁮​‪⁯‍‫‌⁬‎⁫‍‬‍‪​​⁫‬‍‫⁭‏‌‮‭⁪⁮‫⁬‍‪‍‭⁮‮(Game.\u202D‍‫‌‎‮‮‏‪‫‍‬‎‬⁪​⁪‬‏⁯⁯‍⁮‬⁫‏‎⁫⁮‫⁪‭⁬‫⁮​⁫‪‮‮‮(text), more);
            num1 = (int) num2 * -900896865 ^ -1160485462;
            continue;
          case 2:
            Game.\u202B⁭‎⁬‪⁫‏‌‮‫⁫⁪‫⁪⁮‏‮‌‌‏‎⁮⁯‍‏⁭‍​‭⁪‎‫​‬‪⁫‮‎‭‬‮(this._buffer, str);
            num1 = (int) num2 * -1576853687 ^ 1250465449;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u206A‬⁮‍⁭‎⁬‍‌⁪​‌⁯‮‏⁪‬‌‎‮⁭⁯⁪‭⁫⁫⁫‎‬‬⁮‍⁮⁮⁮‭‪‪⁬⁯‮([In] int obj0) => new Random(obj0);

    static string \u202E⁭⁫⁯⁫‬‏‍‬‬‬⁪⁮​‌‭‭‎‮‭‬‏⁬‬⁯⁫‍​⁪‪⁫‭⁬​⁮⁬⁭‮‮‭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206A‎‪⁫‫⁮⁫⁯⁬​​⁪‎‫⁪⁭⁪‭⁫‫‫‍⁯⁬⁫⁬⁬‫⁯‬⁫⁭⁫⁬‬⁭‏⁫‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200C‪‭​‌⁮⁯⁪​⁪‏‌​‍⁮‫‬‎‍‎⁯‍⁮‌⁮‫‏⁭‫‎‫‭⁫‪‌⁪⁮⁪⁪⁫‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206C‍⁯‎⁪‭‍‭‭‪‪⁪⁫‫​​‍⁭‏‌⁭‌‏‪⁮‬⁬⁫‬⁯‍‍⁮​⁯‎‮‪⁬‭‮([In] int obj0) => Math.Abs(obj0);

    static string \u202D‍‫‌‎‮‮‏‪‫‍‬‎‬⁪​⁪‬‏⁯⁯‍⁮‬⁫‏‎⁫⁮‫⁪‭⁬‫⁮​⁫‪‮‮‮([In] object obj0) => obj0.ToString();

    static string \u202E⁪⁬⁮‬​​⁫⁪⁯‬​‏‬‫‭‏⁪‫‌⁫​‭⁯⁮‫⁫‮‪‪‫⁬⁬⁮‬⁫‍​⁪‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200F‍‏⁫‭⁫⁮​‪⁯‍‫‌⁬‎⁫‍‬‍‪​​⁫‬‍‫⁭‏‌‮‭⁪⁮‫⁬‍‪‍‭⁮‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202B⁭‎⁬‪⁫‏‌‮‫⁫⁪‫⁪⁮‏‮‌‌‏‎⁮⁯‍‏⁭‍​‭⁪‎‫​‬‪⁫‮‎‭‬‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
