// Decompiled with JetBrains decompiler
// Type: Core.StringExtension
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using Core.Helpers;
using System;
using System.Diagnostics;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;

namespace Core
{
  public static class StringExtension
  {
    private static readonly Regex WebUrlExpression = new Regex("(http|https)://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)?", RegexOptions.Compiled | RegexOptions.Singleline);
    private static readonly Regex EmailExpression = new Regex("^([0-9a-zA-Z]+[-._+&])*[0-9a-zA-Z]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6}$", RegexOptions.Compiled | RegexOptions.Singleline);
    private static readonly Regex StripHTMLExpression = new Regex("<\\S[^><]*>", RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.CultureInvariant);
    private static readonly char[] IllegalUrlCharacters = new char[37]
    {
      ';',
      '/',
      '\\',
      '?',
      ':',
      '@',
      '&',
      '=',
      '+',
      '$',
      ',',
      '<',
      '>',
      '#',
      '%',
      '.',
      '!',
      '*',
      '\'',
      '"',
      '(',
      ')',
      '[',
      ']',
      '{',
      '}',
      '|',
      '^',
      '`',
      '~',
      '–',
      '‘',
      '’',
      '“',
      '”',
      '»',
      '«'
    };

    [DebuggerStepThrough]
    public static bool IsWebUrl(this string target) => !string.IsNullOrEmpty(target) && StringExtension.WebUrlExpression.IsMatch(target);

    [DebuggerStepThrough]
    public static bool IsEmail(this string target) => !string.IsNullOrEmpty(target) && StringExtension.EmailExpression.IsMatch(target);

    public static string NullSafe(this string target)
    {
      try
      {
        return (target ?? string.Empty).Trim();
      }
      catch
      {
        throw;
      }
    }

    [DebuggerStepThrough]
    public static string FormatWith(this string target, params object[] args)
    {
      Checks.Argument.IsNotEmpty(target, nameof (target));
      return string.Format((IFormatProvider) Core.Helpers.Constants.CurrentCulture, target, args);
    }

    [DebuggerStepThrough]
    public static string Hash(this string target)
    {
      Checks.Argument.IsNotEmpty(target, nameof (target));
      using (MD5 md5 = MD5.Create())
      {
        byte[] bytes = Encoding.Unicode.GetBytes(target);
        return Convert.ToBase64String(md5.ComputeHash(bytes));
      }
    }

    [DebuggerStepThrough]
    public static string WrapAt(this string target, int index)
    {
      if (string.IsNullOrEmpty(target))
        return string.Empty;
      Checks.Argument.IsNotNegativeOrZero(index, nameof (index));
      return target.Length > index ? target.Substring(0, index - 3) + new string('.', 3) : target;
    }

    [DebuggerStepThrough]
    public static string StripHtml(this string target) => StringExtension.StripHTMLExpression.Replace(target, string.Empty);

    public static Guid ToGuid(this string target)
    {
      Guid guid = Guid.Empty;
      if (!string.IsNullOrEmpty(target) && target.Trim().Length == 22)
      {
        string s = target.Trim().Replace("-", "+").Replace("_", "/") + "==";
        try
        {
          guid = new Guid(Convert.FromBase64String(s));
        }
        catch (FormatException ex)
        {
        }
      }
      else
      {
        try
        {
          guid = new Guid(target);
        }
        catch
        {
        }
      }
      return guid;
    }

    [DebuggerStepThrough]
    public static T ToEnum<T>(this string target, T defaultValue) where T : IComparable, IFormattable
    {
      T obj = defaultValue;
      if (!string.IsNullOrEmpty(target))
      {
        try
        {
          obj = (T) Enum.Parse(typeof (T), target.Trim(), true);
        }
        catch (ArgumentException ex)
        {
        }
      }
      return obj;
    }

    [DebuggerStepThrough]
    public static string ToLegalUrl(this string target)
    {
      if (string.IsNullOrEmpty(target))
        return target;
      target = target.Trim();
      if (target.IndexOfAny(StringExtension.IllegalUrlCharacters) > -1)
      {
        foreach (char illegalUrlCharacter in StringExtension.IllegalUrlCharacters)
          target = target.Replace(illegalUrlCharacter.ToString((IFormatProvider) Core.Helpers.Constants.CurrentCulture), string.Empty);
      }
      target = target.Replace(" ", "-");
      while (target.Contains("--"))
        target = target.Replace("--", "-");
      return target;
    }

    [DebuggerStepThrough]
    public static string UrlEncode(this string target) => HttpUtility.UrlEncode(target);

    [DebuggerStepThrough]
    public static string UrlDecode(this string target) => HttpUtility.UrlDecode(target);

    [DebuggerStepThrough]
    public static string AttributeEncode(this string target) => HttpUtility.HtmlAttributeEncode(target);

    [DebuggerStepThrough]
    public static string HtmlEncode(this string target) => HttpUtility.HtmlEncode(target);

    [DebuggerStepThrough]
    public static string HtmlDecode(this string target) => HttpUtility.HtmlDecode(target);
  }
}
