// Decompiled with JetBrains decompiler
// Type: RiskGame.Visitors.Decorator
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Authentication;
using ArrayWithOff.Collections;
using ArrayWithOff.Database;
using RiskGame.Maps;
using RiskGame.Shared;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Markup;
using System.Windows.Media;

namespace RiskGame.Visitors
{
  public class Decorator : Window, IComponentConnector
  {
    private List<Player> _Setter;
    private ObservableCollection<InitializerItemAuth> singleton;
    private bool _Ref;
    private bool _Code;
    internal StackPanel panel_MainUI;
    internal DataGrid ScoreList;
    internal Label lblPlayerScore;
    internal DataGrid PlayerScoreList;
    internal Label lblError;
    internal TextBlock txtError;
    internal DockPanel panel_Settings;
    internal Label lblMediaDetails;
    internal MediaElement mediaplayer;
    internal Slider slider_Volume;
    internal CheckBox chkMusicEnabled;
    internal CheckBox chkFullscreen;
    internal CheckBox chkHints;
    private bool val;

    public bool Music_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Ref;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 6;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            bool flag1;
            bool flag2;
            switch (num2)
            {
              case 0:
                break;
              case 1:
              case 5:
                if (flag1)
                {
                  if (this._Setter.Count != 0)
                  {
                    try
                    {
                      ((Human) this._Setter[0]).m_Publisher = value;
                      int num3 = 2;
                      if (Decorator.RunContainer())
                        ;
                      while (true)
                      {
                        switch (num3)
                        {
                          case 0:
                          case 2:
                            goto label_5;
                          case 1:
                          case 3:
                            goto label_10;
                          default:
                            num3 = 3;
                            continue;
                        }
                      }
label_5:
                      Human.QuerySerializer(this._Setter[0] as Human);
                    }
                    catch
                    {
                      this.ViewExpression("An error has occurred. Your music preferences have not been saved.");
                    }
label_10:;
                  }
                  if (value)
                  {
                    if (true)
                    {
                      num2 = 4;
                      continue;
                    }
                    goto case 2;
                  }
                  else
                  {
                    flag2 = !value;
                    goto case 3;
                  }
                }
                else
                  break;
              case 2:
              case 4:
                this.mediaplayer.Play();
                goto case 0;
              case 3:
                if (flag2)
                {
                  this.mediaplayer.Pause();
                  num2 = 0;
                  continue;
                }
                goto case 0;
              case 6:
                flag1 = this._Setter != null;
                num2 = 5;
                continue;
              case 7:
                goto label_8;
              default:
                goto label_17;
            }
            this._Ref = value;
            if (!Decorator.RunContainer())
              num2 = 7;
            else
              goto label_22;
          }
label_17:
          num1 = 3;
        }
label_8:
        return;
label_22:;
      }
    }

    public bool Hints_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Code;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 5;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            bool flag1;
            bool flag2;
            switch (num2)
            {
              case 0:
                if (flag2)
                {
                  try
                  {
                    ((Human) this._Setter[0]).policy = value;
                    int num3 = 2;
                    while (true)
                    {
                      switch (num3)
                      {
                        case 0:
                        case 2:
                          goto label_6;
                        case 1:
                        case 3:
                          goto label_11;
                        default:
                          num3 = 3;
                          continue;
                      }
                    }
label_6:
                    Human.QuerySerializer(this._Setter[0] as Human);
                  }
                  catch
                  {
                    this.ViewExpression("An error has occurred. Your music preferences have not been saved.");
                  }
label_11:;
                }
                break;
              case 1:
              case 3:
                if (!flag1)
                  break;
                goto label_3;
              case 2:
              case 4:
label_14:
                flag2 = this._Setter.Count != 0;
                goto case 0;
              case 5:
                flag1 = this._Setter != null;
                if (!Decorator.RunContainer())
                {
                  num2 = 3;
                  continue;
                }
                goto case 1;
              case 6:
                goto label_9;
              default:
                goto label_17;
            }
            this._Code = value;
            if (Decorator.PushContainer())
              num2 = 6;
            else
              goto label_14;
          }
label_3:
          num1 = 4;
          continue;
label_17:
          num1 = 0;
        }
label_9:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Decorator(InitializerItemAuth instance, List<Player> vis)
    {
      ProxyParser.NewPool();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      ObservableCollection<InitializerItemAuth> observableCollection = new ObservableCollection<InitializerItemAuth>();
      observableCollection.Add(instance);
      this.singleton = observableCollection;
      this._Setter = vis;
      this.LoginExpression(false, ((Human) this._Setter[0]).m_Publisher, ((Human) this._Setter[0]).policy);
      foreach (Player player in this._Setter)
      {
        player.Army_strength = 0;
        player.m_Producer = 0;
        player.Territoriesowned = 0;
        player._Instance = 0;
        player.Color = (SolidColorBrush) null;
      }
      this.PlayerScoreList.ItemsSource = (IEnumerable) this.singleton;
      this.lblPlayerScore.Visibility = Visibility.Visible;
      this.PlayerScoreList.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Decorator(List<Player> res, bool istoken)
    {
      ProxyParser.NewPool();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.LoginExpression(istoken, ((Human) res[0]).m_Publisher, ((Human) res[0]).policy);
      this._Setter = res;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Decorator(bool counttask, bool overridecol, bool comparestate)
    {
      int num1 = 2;
      if (Decorator.RunContainer())
        ;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            ProxyParser.NewPool();
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto case 1;
          case 1:
          case 3:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 4;
          case 4:
            this.LoginExpression(counttask, overridecol, comparestate);
            num2 = 5;
            break;
          case 5:
            goto label_1;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_1:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void LoginExpression(bool defreguired, bool iscol, bool forceutil)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              this.InitializeComponent();
              num2 = 5;
              continue;
            case 1:
              goto label_3;
            case 3:
              goto label_8;
            case 4:
            case 6:
              if (flag)
              {
                ((ParamsPropertyCollection) Application.Current).GetSerializer((Window) this);
                ((ParamsPropertyCollection) Application.Current).CalcSerializer((Window) this);
                num2 = 7;
                continue;
              }
              goto label_18;
            case 5:
              this.DataContext = (object) this;
              this.StateChanged += new EventHandler(((ParamsPropertyCollection) Application.Current).CloneSerializer);
              int num3 = 1;
              num2 = Decorator.RunContainer() ? num3 : num3;
              continue;
            case 7:
              goto label_23;
            default:
              goto label_7;
          }
        }
label_3:
        this.Music_enabled = defreguired;
        this.Hints_enabled = iscol;
        if (this._Ref)
        {
          this.mediaplayer.Play();
          goto label_8;
        }
        else
          goto label_9;
label_7:
        num1 = 3;
        continue;
label_8:
label_9:
        try
        {
          ObservableCollection<InitializerItemAuth> observableCollection = InitializerItemAuth.UpdateModel();
          int num4 = 4;
          while (true)
          {
            int num5 = num4;
            while (true)
            {
              switch (num5)
              {
                case 0:
                case 4:
                  goto label_15;
                case 1:
                case 3:
                  if (observableCollection.Count != 0)
                    goto label_20;
                  else
                    goto case 2;
                case 2:
                  this.ViewExpression("There aren't any completed games saved on file.");
                  if (true)
                  {
                    num5 = 5;
                    continue;
                  }
                  goto label_17;
                case 5:
                  goto label_17;
                default:
                  num5 = 2;
                  continue;
              }
            }
label_15:
            this.ScoreList.ItemsSource = (IEnumerable) observableCollection;
            num4 = 3;
          }
label_17:;
        }
        catch (Exception ex)
        {
          this.ViewExpression("An error occurred while attempting to retrieve the leaderboard.");
        }
label_20:
        flag = forceutil;
        num1 = 6;
      }
label_18:
      return;
label_23:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ViewExpression(string var1)
    {
      this.lblError.Visibility = Visibility.Visible;
      this.txtError.Text = var1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CustomizeExpression(object var1, RoutedEventArgs second)
    {
      int num1 = 6;
      if (Decorator.PushContainer())
        goto label_8;
label_1:
      int num2 = this._Setter.Count == 0 ? 1 : 0;
label_3:
      int num3;
      ConsumerHelperMap consumerHelperMap;
      if (num2 != 0)
      {
        num3 = 4;
      }
      else
      {
        consumerHelperMap = new ConsumerHelperMap(this._Setter, ((ParamsPropertyCollection) Application.Current).NewSerializer((Window) this));
        goto label_13;
      }
label_7:
      num1 = num3;
label_8:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_13;
          case 1:
          case 2:
            goto label_1;
          case 4:
            goto label_5;
          case 5:
            consumerHelperMap.Show();
            num1 = 7;
            continue;
          case 6:
            goto label_11;
          case 7:
            goto label_14;
          default:
            num1 = 0;
            continue;
        }
      }
label_5:
      Window window = (Window) new Bridge(this.Music_enabled, this.Hints_enabled, ((ParamsPropertyCollection) Application.Current).NewSerializer((Window) this));
      Application.Current.MainWindow = window;
      this.Close();
      window.Show();
      return;
label_11:
      if (this._Setter == null)
      {
        num2 = 1;
        goto label_3;
      }
      else
      {
        num3 = 2;
        goto label_7;
      }
label_13:
      Application.Current.MainWindow = (Window) consumerHelperMap;
      this.Close();
      if (true)
      {
        num1 = 5;
        goto label_8;
      }
label_14:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Quit(object sender, RoutedEventArgs e) => this.Close();

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        bool val;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              val = this.val;
              num2 = 2;
              continue;
            case 1:
            case 3:
              Application.LoadComponent((object) this, new Uri("/ArrayWithOff;component/highscores.xaml", UriKind.Relative));
              if (!Decorator.RunContainer())
              {
                num2 = 6;
                continue;
              }
              goto case 0;
            case 2:
              if (!val)
              {
                this.val = true;
                goto case 1;
              }
              else
                goto label_8;
            case 4:
              goto label_10;
            case 6:
              goto label_9;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 1;
        continue;
label_8:
        num1 = 4;
      }
label_10:
      return;
label_9:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int value, object col)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        int num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_7;
            case 1:
            case 2:
              goto label_1;
            case 4:
              goto label_11;
            case 5:
              switch (num3)
              {
                case 1:
                  goto label_9;
                case 2:
                  goto label_2;
                case 3:
                  goto label_10;
                case 4:
                  this.PlayerScoreList = (DataGrid) col;
                  if (true)
                  {
                    num2 = 6;
                    continue;
                  }
                  goto label_7;
                case 5:
                  goto label_12;
                case 6:
                  goto label_13;
                case 7:
                  goto label_14;
                case 8:
                  goto label_15;
                case 9:
                  goto label_16;
                case 10:
                  goto label_17;
                case 11:
                  goto label_18;
                case 12:
                  goto label_19;
                case 13:
                  goto label_20;
                case 14:
                  goto label_21;
                case 15:
                  goto label_22;
                default:
                  this.val = true;
                  num2 = 9;
                  continue;
              }
            case 6:
              goto label_24;
            case 7:
              goto label_25;
            case 8:
              goto label_26;
            case 9:
              goto label_27;
            default:
              goto label_5;
          }
        }
label_1:
        int num4;
        num3 = num4;
        num1 = 5;
        continue;
label_5:
        num1 = 7;
        continue;
label_7:
        num4 = value;
        num1 = 2;
        continue;
label_9:
        this.panel_MainUI = (StackPanel) col;
        num1 = 4;
        continue;
label_10:
        this.lblPlayerScore = (Label) col;
        num1 = 8;
      }
label_2:
      this.ScoreList = (DataGrid) col;
      return;
label_11:
      return;
label_24:
      return;
label_25:
      return;
label_26:
      return;
label_27:
      return;
label_12:
      ((ButtonBase) col).Click += new RoutedEventHandler(this.CustomizeExpression);
      return;
label_13:
      ((ButtonBase) col).Click += new RoutedEventHandler(this.Quit);
      return;
label_14:
      this.lblError = (Label) col;
      return;
label_15:
      this.txtError = (TextBlock) col;
      return;
label_16:
      this.panel_Settings = (DockPanel) col;
      return;
label_17:
      this.lblMediaDetails = (Label) col;
      return;
label_18:
      this.mediaplayer = (MediaElement) col;
      return;
label_19:
      this.slider_Volume = (Slider) col;
      return;
label_20:
      this.chkMusicEnabled = (CheckBox) col;
      return;
label_21:
      this.chkFullscreen = (CheckBox) col;
      return;
label_22:
      this.chkHints = (CheckBox) col;
    }

    internal static bool PushContainer() => true;

    internal static bool RunContainer() => false;
  }
}
