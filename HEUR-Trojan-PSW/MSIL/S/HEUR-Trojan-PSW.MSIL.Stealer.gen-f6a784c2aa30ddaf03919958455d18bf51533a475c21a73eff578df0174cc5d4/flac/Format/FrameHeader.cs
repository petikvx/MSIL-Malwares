// Decompiled with JetBrains decompiler
// Type: flac.Format.FrameHeader
// Assembly: STAThreadAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EE3DE1A-E148-4FBA-A193-65BEA1824C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f6a784c2aa30ddaf03919958455d18bf51533a475c21a73eff578df0174cc5d4.exe

using flac.Io;
using System;

namespace flac.Format
{
  public class FrameHeader
  {
    private const ushort SYNC_CODE = 16382;
    private const int SYNC_CODE_BITS_COUNT = 14;
    private const int BLOCK_SIZE_BITS_COUNT = 4;
    private const int SAMPLE_RATE_BITS_COUNT = 4;
    private const int CHANNELS_BITS_COUNT = 4;
    private const int BPS_BITS_COUNT = 3;
    public const int BLOCKING_STRATEGY_FIXED = 0;
    public const int BLOCKING_STRATEGY_VARIABLE = 1;
    private sbyte blockingStrategy_;
    private sbyte blockSizeInInterChannelSamples_;
    private sbyte sampleRate_;
    private sbyte channelAssignment_;
    private sbyte bitsPerSample_;
    private ushort blockSizeHint_;
    private ushort sampleRateHint_;
    private byte crc_;
    private long decodedFrameOrSampleNumber_;
    private MetadataBlockStreamInfo streamInfo_;
    private int sampleIdSize_;

    public sbyte BlockingStrategy
    {
      get => this.blockingStrategy_;
      set => this.blockingStrategy_ = value;
    }

    public int SampleIdSize => this.sampleIdSize_;

    public long StartingSampleNumber
    {
      get => this.blockingStrategy_ == (sbyte) 0 ? this.decodedFrameOrSampleNumber_ * (long) this.streamInfo_.MinBlockSize : this.decodedFrameOrSampleNumber_;
      set => this.decodedFrameOrSampleNumber_ = value;
    }

    public int BitsPerSample
    {
      get
      {
        int bitsPerSample;
        switch (this.bitsPerSample_)
        {
          case 0:
            bitsPerSample = this.streamInfo_.BitsPerSample;
            break;
          case 1:
            bitsPerSample = 8;
            break;
          case 2:
            bitsPerSample = 12;
            break;
          case 3:
          case 7:
            throw new FlacFormatReservedException();
          case 4:
            bitsPerSample = 16;
            break;
          case 5:
            bitsPerSample = 20;
            break;
          case 6:
            bitsPerSample = 24;
            break;
          default:
            throw new FlacDebugException();
        }
        return bitsPerSample;
      }
    }

    public int BlockSize
    {
      get
      {
        int interChannelSamples = (int) this.blockSizeInInterChannelSamples_;
        int blockSize;
        switch (interChannelSamples)
        {
          case 0:
            throw new FlacFormatReservedException();
          case 1:
            blockSize = 192;
            break;
          default:
            if (interChannelSamples >= 2 && interChannelSamples <= 5)
            {
              blockSize = 576 * (1 << interChannelSamples - 2);
              break;
            }
            if (interChannelSamples == 6 || interChannelSamples == 7)
            {
              blockSize = (int) this.blockSizeHint_ + 1;
              break;
            }
            if (interChannelSamples < 8 || interChannelSamples > 15)
              throw new FlacDebugException();
            blockSize = 256 * (1 << interChannelSamples - 8);
            break;
        }
        return blockSize;
      }
      set
      {
        int num = value;
        Debug.Assert(num != 0);
        this.blockSizeInInterChannelSamples_ = (sbyte) 0;
        if (num == 192)
        {
          this.blockSizeInInterChannelSamples_ = (sbyte) 1;
        }
        else
        {
          for (int index = 0; index < 4; ++index)
          {
            if (num == 576 * (1 << index))
            {
              this.blockSizeInInterChannelSamples_ = (sbyte) (index + 2);
              break;
            }
          }
          if (this.blockSizeInInterChannelSamples_ == (sbyte) 0)
          {
            for (int index = 0; index < 8; ++index)
            {
              if (num == 256 * (1 << index))
              {
                this.blockSizeInInterChannelSamples_ = (sbyte) (index + 8);
                break;
              }
            }
            if (this.blockSizeInInterChannelSamples_ == (sbyte) 0)
            {
              this.blockSizeInInterChannelSamples_ = num <= (int) byte.MaxValue ? (sbyte) 6 : (sbyte) 7;
              this.blockSizeHint_ = (ushort) (num - 1);
            }
          }
        }
      }
    }

    public int ChannelAssignment => (int) this.channelAssignment_;

    public int Channels
    {
      get
      {
        int channelAssignment = (int) this.channelAssignment_;
        if (channelAssignment >= 0 && channelAssignment <= 7)
          return channelAssignment + 1;
        if (channelAssignment >= 8 && channelAssignment <= 10)
          return 2;
        throw new FlacFormatReservedException();
      }
    }

    public void Read(FlacStream stream)
    {
      stream.Reader.Crc.Start();
      this.streamInfo_ = stream.StreamInfo;
      Validation.IsValid(stream.Reader.ReadBitsAsShort(14) == (short) 16382);
      Validation.IsReserved(stream.Reader.ReadBit() == (sbyte) 0);
      this.blockingStrategy_ = stream.Reader.ReadBit();
      this.blockSizeInInterChannelSamples_ = stream.Reader.ReadBitsAsSByte(4);
      this.sampleRate_ = stream.Reader.ReadBitsAsSByte(4);
      this.channelAssignment_ = stream.Reader.ReadBitsAsSByte(4);
      this.bitsPerSample_ = stream.Reader.ReadBitsAsSByte(3);
      Validation.IsReserved(stream.Reader.ReadBit() == (sbyte) 0);
      long debugBytesRead = stream.Reader.Debug_BytesRead;
      this.DecodeSampleNumber(stream);
      this.sampleIdSize_ = (int) (stream.Reader.Debug_BytesRead - debugBytesRead);
      if (this.blockSizeInInterChannelSamples_ == (sbyte) 6)
        this.blockSizeHint_ = (ushort) stream.Reader.ReadByte();
      else if (this.blockSizeInInterChannelSamples_ == (sbyte) 7)
        this.blockSizeHint_ = stream.Reader.ReadUShort();
      if (this.sampleRate_ == (sbyte) 12)
        this.sampleRateHint_ = (ushort) stream.Reader.ReadByte();
      else if (this.sampleRate_ == (sbyte) 13 || this.sampleRate_ == (sbyte) 14)
        this.sampleRateHint_ = stream.Reader.ReadUShort();
      byte crC8 = stream.Reader.Crc.GetCRC8();
      this.crc_ = stream.Reader.ReadByte();
      Validation.IsValid((int) this.crc_ == (int) crC8);
    }

    public void Write(FlacStream stream)
    {
      stream.Writer.Crc.Start();
      stream.Writer.WriteBits(16382, 14);
      stream.Writer.WriteBit((sbyte) 0);
      stream.Writer.WriteBit(this.blockingStrategy_);
      stream.Writer.WriteBits((int) this.blockSizeInInterChannelSamples_, 4);
      stream.Writer.WriteBits((int) this.sampleRate_, 4);
      stream.Writer.WriteBits((int) this.channelAssignment_, 4);
      stream.Writer.WriteBits((int) this.bitsPerSample_, 3);
      stream.Writer.WriteBit((sbyte) 0);
      byte[] numArray;
      switch (this.blockingStrategy_)
      {
        case 0:
          numArray = UTF8Encoder.GetUtf8UInt((int) this.decodedFrameOrSampleNumber_);
          break;
        case 1:
          numArray = UTF8Encoder.GetUtf8ULong(this.decodedFrameOrSampleNumber_);
          break;
        default:
          throw new FlacDebugException();
      }
      foreach (byte b in numArray)
        stream.Writer.WriteByte(b);
      if (this.blockSizeInInterChannelSamples_ == (sbyte) 6)
        stream.Writer.WriteByte((byte) this.blockSizeHint_);
      else if (this.blockSizeInInterChannelSamples_ == (sbyte) 7)
        stream.Writer.WriteUShort(this.blockSizeHint_);
      if (this.sampleRate_ == (sbyte) 12)
        stream.Writer.WriteByte((byte) this.sampleRateHint_);
      else if (this.sampleRate_ == (sbyte) 13 || this.sampleRate_ == (sbyte) 14)
        stream.Writer.WriteUShort(this.sampleRateHint_);
      this.crc_ = stream.Writer.Crc.GetCRC8();
      stream.Writer.WriteByte(this.crc_);
    }

    private void DecodeSampleNumber(FlacStream stream)
    {
      switch (this.blockingStrategy_)
      {
        case 0:
          Validation.IsValid(this.streamInfo_.MinBlockSize == this.streamInfo_.MaxBlockSize);
          uint decodedValue1;
          UTF8Decoder.ReadUtf8UInt(stream.Reader, out decodedValue1);
          Validation.IsValid(decodedValue1 != uint.MaxValue);
          this.decodedFrameOrSampleNumber_ = (long) decodedValue1;
          break;
        case 1:
          ulong decodedValue2;
          UTF8Decoder.ReadUtf8ULong(stream.Reader, out decodedValue2);
          Validation.IsValid(decodedValue2 != ulong.MaxValue);
          this.decodedFrameOrSampleNumber_ = Convert.ToInt64(decodedValue2);
          break;
        default:
          throw new FlacDebugException();
      }
    }
  }
}
