// Decompiled with JetBrains decompiler
// Type: ProjNet.Common.CallbackAdvisor
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Services;
using ProjNet.Structs;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ProjNet.Common
{
  public class CallbackAdvisor : Form
  {
    private IContainer m_InstanceAdvisor;
    private TextBox _CandidateAdvisor;
    private TextBox _MapperAdvisor;
    private Button m_ConsumerAdvisor;
    private Label _WriterAdvisor;
    private Label m_StateAdvisor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public CallbackAdvisor()
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              PageAdvisorStructBuilder.PrepareCreator();
              if (CallbackAdvisor.QueryModel())
              {
                num2 = 3;
                continue;
              }
              goto label_2;
            case 1:
            case 3:
              goto label_2;
            case 4:
              goto label_6;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_6;
          }
        }
label_2:
        this.m_InstanceAdvisor = (IContainer) null;
        // ISSUE: explicit constructor call
        base.\u002Ector();
label_6:
        this.FindStatus();
        num1 = 5;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PushStatus(object last, EventArgs map)
    {
      try
      {
        string text1 = this._MapperAdvisor.Text;
        int num1 = 3;
        if (true)
          goto label_3;
label_2:
        this._MapperAdvisor.Text = "";
        goto label_6;
label_3:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              string text2 = this._CandidateAdvisor.Text;
              CallbackRegistry.CallAdvisor(text1, int.Parse(text2));
              int num2 = (int) MessageBox.Show("Update successful.");
              if (CallbackAdvisor.QueryModel())
              {
                num1 = 4;
                continue;
              }
              goto label_6;
            case 1:
            case 4:
              goto label_2;
            case 2:
              goto label_6;
            case 5:
              goto label_9;
            default:
              if (true)
              {
                num1 = 2;
                continue;
              }
              goto case 0;
          }
        }
label_9:
        return;
label_6:
        this._CandidateAdvisor.Text = "";
        num1 = 5;
        goto label_3;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Update failed.");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool paramclose)
    {
      int num1 = 3;
      if (CallbackAdvisor.QueryModel())
        goto label_9;
label_1:
label_2:
      base.Dispose(paramclose);
      num1 = 5;
label_9:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            if (paramclose)
            {
              if (CallbackAdvisor.QueryModel())
              {
                num1 = 4;
                continue;
              }
              goto label_5;
            }
            else
              goto label_6;
          case 1:
          case 4:
            goto label_5;
          case 2:
            goto label_1;
          case 5:
            goto label_11;
          default:
            num1 = 2;
            continue;
        }
      }
label_5:
      int num2 = this.m_InstanceAdvisor != null ? 1 : 0;
      goto label_7;
label_6:
      num2 = 0;
label_7:
      if (num2 != 0)
      {
        this.m_InstanceAdvisor.Dispose();
        goto label_1;
      }
      else
        goto label_2;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FindStatus()
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this.m_StateAdvisor.AutoSize = true;
              this.m_StateAdvisor.Location = new Point(60, 28);
              this.m_StateAdvisor.Name = "label1";
              this.m_StateAdvisor.Size = new Size(35, 13);
              this.m_StateAdvisor.TabIndex = 5;
              this.m_StateAdvisor.Text = "ISBN:";
              this.AutoScaleDimensions = new SizeF(6f, 13f);
              this.AutoScaleMode = AutoScaleMode.Font;
              this.ClientSize = new Size(241, 119);
              num2 = 13;
              continue;
            case 1:
              this._CandidateAdvisor.Location = new Point(101, 59);
              this._CandidateAdvisor.Name = "AuthorIDTextBox";
              this._CandidateAdvisor.Size = new Size(100, 20);
              this._CandidateAdvisor.TabIndex = 9;
              this._MapperAdvisor.Location = new Point(101, 28);
              this._MapperAdvisor.Name = "ISBNTextBox";
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_17;
            case 2:
              goto label_2;
            case 3:
            case 8:
              this.m_ConsumerAdvisor.Click += new EventHandler(this.PushStatus);
              this._WriterAdvisor.AutoSize = true;
              this._WriterAdvisor.Location = new Point(40, 59);
              this._WriterAdvisor.Name = "label2";
              this._WriterAdvisor.Size = new Size(55, 13);
              this._WriterAdvisor.TabIndex = 6;
              this._WriterAdvisor.Text = "Author ID:";
              if (CallbackAdvisor.QueryModel())
              {
                num2 = 0;
                continue;
              }
              goto case 5;
            case 4:
              goto label_1;
            case 5:
              this._MapperAdvisor.Size = new Size(100, 20);
              this._MapperAdvisor.TabIndex = 8;
              this.m_ConsumerAdvisor.Location = new Point(101, 85);
              this.m_ConsumerAdvisor.Name = "UpdateButton";
              if (!CallbackAdvisor.FlushModel())
              {
                num2 = 10;
                continue;
              }
              goto label_7;
            case 6:
              this._CandidateAdvisor = new TextBox();
              num2 = 11;
              continue;
            case 7:
            case 12:
              goto label_7;
            case 9:
              goto label_12;
            case 10:
              goto label_8;
            case 11:
              goto label_14;
            case 13:
              goto label_13;
            case 14:
              goto label_4;
            case 15:
              goto label_18;
            default:
              if (CallbackAdvisor.QueryModel())
              {
                num2 = 9;
                continue;
              }
              goto label_12;
          }
        }
label_1:
        this.Controls.Add((Control) this._MapperAdvisor);
        this.Controls.Add((Control) this.m_ConsumerAdvisor);
        this.Controls.Add((Control) this._WriterAdvisor);
        this.Controls.Add((Control) this.m_StateAdvisor);
        this.Name = "UpdateAuthorISBN";
        this.Text = "Update AuthorISBN";
        num1 = 7;
        continue;
label_2:
        this.SuspendLayout();
        num1 = 1;
        continue;
label_4:
        this._WriterAdvisor = new Label();
        this.m_StateAdvisor = new Label();
        num1 = 2;
        continue;
label_7:
        this.ResumeLayout(false);
        this.PerformLayout();
        num1 = 15;
        continue;
label_8:
        this.m_ConsumerAdvisor.Size = new Size(75, 23);
        this.m_ConsumerAdvisor.TabIndex = 7;
        this.m_ConsumerAdvisor.Text = "Update";
label_12:
        this.m_ConsumerAdvisor.UseVisualStyleBackColor = true;
        num1 = 3;
        continue;
label_13:
        this.Controls.Add((Control) this._CandidateAdvisor);
        num1 = 4;
        continue;
label_14:
        this._MapperAdvisor = new TextBox();
        this.m_ConsumerAdvisor = new Button();
        num1 = 14;
      }
label_18:
      return;
label_17:;
    }

    internal static bool QueryModel() => true;

    internal static bool FlushModel() => false;
  }
}
