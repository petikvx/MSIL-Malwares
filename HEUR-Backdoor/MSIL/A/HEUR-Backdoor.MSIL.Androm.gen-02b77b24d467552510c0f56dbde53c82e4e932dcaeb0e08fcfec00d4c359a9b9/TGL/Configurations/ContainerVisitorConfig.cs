// Decompiled with JetBrains decompiler
// Type: TGL.Configurations.ContainerVisitorConfig
// Assembly: InvalidOleVariantTypeExcept, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9E82E8E9-C8CD-41F7-BA61-2A9379AE4148
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-02b77b24d467552510c0f56dbde53c82e4e932dcaeb0e08fcfec00d4c359a9b9.exe

using InvalidOleVariantTypeExcept.Filters;
using InvalidOleVariantTypeExcept.Messages;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using TGL.Bridges;
using TGL.Licensing;

namespace TGL.Configurations
{
  public class ContainerVisitorConfig : BaseBridge
  {
    private string error;
    private bool @event;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ContainerVisitorConfig(bool isinstance)
    {
      int num1 = 1;
      if (true)
        goto label_3;
label_1:
      this.error = Environment.CurrentDirectory + RoleValueFilter.RestartVisitor(2024);
      if (true)
      {
        num1 = 2;
        goto label_3;
      }
label_2:
      // ISSUE: explicit constructor call
      base.\u002Ector();
      goto label_7;
label_3:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            UtilsContextLicense.ListWorker();
            if (!ContainerVisitorConfig.DefineInfo())
            {
              num1 = 4;
              continue;
            }
            goto label_7;
          case 2:
            goto label_2;
          case 3:
          case 5:
            goto label_7;
          case 4:
            goto label_1;
          case 6:
            goto label_5;
          default:
            int num2 = 5;
            num1 = ContainerVisitorConfig.DefineInfo() ? num2 : num2;
            continue;
        }
      }
label_5:
      return;
label_7:
      this.@event = isinstance;
      num1 = 6;
      goto label_3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PoolFieldMessage InvokeRecord()
    {
      int num1 = 4;
      if (ContainerVisitorConfig.AwakeInfo())
        goto label_6;
label_1:
      bool flag1;
      StreamReader streamReader;
      if (flag1)
      {
        num1 = 3;
        goto label_6;
      }
      else
      {
        streamReader = File.OpenText(this.error);
        if (true)
        {
          num1 = 6;
          goto label_6;
        }
      }
label_4:
      flag1 = !File.Exists(this.error);
      int num2 = 5;
      num1 = ContainerVisitorConfig.DefineInfo() ? num2 : num2;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_23;
          case 1:
          case 5:
            goto label_1;
          case 2:
          case 3:
            goto label_5;
          case 4:
            goto label_4;
          case 6:
            goto label_8;
          default:
            int num3 = 0;
            num1 = ContainerVisitorConfig.DefineInfo() ? num3 : num3;
            continue;
        }
      }
label_5:
      PoolFieldMessage poolFieldMessage1 = (PoolFieldMessage) null;
      goto label_23;
label_8:
      try
      {
        string str = "";
        int num4 = 2;
        if (true)
          goto label_14;
label_9:
        PoolFieldMessage poolFieldMessage2;
        string[] strArray;
        int result;
        poolFieldMessage2.Points = int.TryParse(strArray[2], out result) ? result : 0;
        poolFieldMessage2.CancelRecord(int.TryParse(strArray[3], out result) ? result : 0);
        poolFieldMessage1 = poolFieldMessage2;
        num4 = 8;
label_14:
        bool flag2;
        while (true)
        {
          switch (num4)
          {
            case 0:
            case 1:
              if (flag2)
              {
                num4 = 6;
                continue;
              }
              goto label_19;
            case 2:
              flag2 = (str = streamReader.ReadLine()) != null;
              num4 = 0;
              continue;
            case 3:
              goto label_9;
            case 4:
            case 7:
              poolFieldMessage2.ExcludeRecord(strArray[1]);
              if (true)
              {
                num4 = 3;
                continue;
              }
              goto case 5;
            case 5:
              poolFieldMessage2 = new PoolFieldMessage(strArray[0]);
              num4 = 7;
              continue;
            case 6:
              strArray = str.Split(' ');
              goto case 5;
            case 8:
              goto label_23;
            default:
              num4 = 5;
              continue;
          }
        }
label_19:
        poolFieldMessage1 = (PoolFieldMessage) null;
      }
      finally
      {
        streamReader?.Dispose();
      }
label_23:
      return poolFieldMessage1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ManageRecord(PoolFieldMessage var1)
    {
      using (StreamWriter text = File.CreateText(this.error))
        text.WriteLine(var1.StartRecord() + RoleValueFilter.RestartVisitor(2050) + var1.VerifyRecord() + RoleValueFilter.RestartVisitor(2050) + var1.Points.ToString() + RoleValueFilter.RestartVisitor(2050) + var1.CloneRecord().ToString());
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void ConcatResolver(PoolFieldMessage res)
    {
      int num1 = 7;
      StreamWriter text;
      string v;
      StreamWriter streamWriter;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              if (!flag1)
              {
                streamWriter = File.AppendText(this.error);
                int num3 = 11;
                num2 = ContainerVisitorConfig.DefineInfo() ? num3 : num3;
                continue;
              }
              if (true)
              {
                num2 = 8;
                continue;
              }
              goto case 1;
            case 1:
              flag2 = this.@event;
              if (ContainerVisitorConfig.AwakeInfo())
              {
                num2 = 9;
                continue;
              }
              goto label_13;
            case 2:
              goto label_5;
            case 3:
            case 10:
              v = this.SetupRecord(v);
              int num4 = 6;
              num2 = ContainerVisitorConfig.DefineInfo() ? num4 : num4;
              continue;
            case 4:
            case 6:
              goto label_16;
            case 5:
              goto label_1;
            case 7:
              goto label_20;
            case 8:
              text = File.CreateText(this.error);
              int num5 = 2;
              num2 = ContainerVisitorConfig.DefineInfo() ? num5 : num5;
              continue;
            case 9:
              goto label_13;
            case 11:
              goto label_21;
            default:
              goto label_19;
          }
        }
label_1:
label_2:
        flag1 = !File.Exists(this.error);
        num1 = 0;
        continue;
label_13:
        if (flag2)
        {
          num1 = 10;
          continue;
        }
        goto label_2;
label_16:
        v = v.Replace(RoleValueFilter.RestartVisitor(2056), RoleValueFilter.RestartVisitor(2062)).Replace(RoleValueFilter.RestartVisitor(2070), RoleValueFilter.RestartVisitor(2076));
        goto label_1;
label_19:
        num1 = 5;
        continue;
label_20:
        v = res.VerifyRecord();
        num1 = 1;
      }
label_5:
      try
      {
        text.WriteLine(res.StartRecord() + RoleValueFilter.RestartVisitor(2050) + v + RoleValueFilter.RestartVisitor(2050) + res.Points.ToString() + RoleValueFilter.RestartVisitor(2050) + res.CloneRecord().ToString());
        return;
      }
      finally
      {
        text?.Dispose();
      }
label_21:
      try
      {
        streamWriter.WriteLine(res.StartRecord() + RoleValueFilter.RestartVisitor(2050) + v + RoleValueFilter.RestartVisitor(2050) + res.Points.ToString() + RoleValueFilter.RestartVisitor(2050) + res.CloneRecord().ToString());
      }
      finally
      {
        streamWriter?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void CompareResolver(PoolFieldMessage spec)
    {
      int num1 = 3;
      if (ContainerVisitorConfig.DefineInfo())
        ;
      StreamWriter streamWriter;
      string[] strArray1;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 3:
            flag = File.Exists(this.error);
            num2 = 4;
            break;
          case 1:
          case 4:
            if (flag)
            {
              int num3 = 2;
              num1 = ContainerVisitorConfig.DefineInfo() ? num3 : num3;
              continue;
            }
            goto label_22;
          case 2:
            strArray1 = File.ReadAllLines(this.error);
            goto case 5;
          case 5:
            streamWriter = File.AppendText(this.error);
            num2 = 6;
            break;
          case 6:
            goto label_9;
          default:
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_9;
        }
        num1 = num2;
      }
label_22:
      return;
label_9:
      try
      {
        int index1 = 0;
        int num4 = 5;
        string[] strArray2;
        bool flag1;
        bool flag2;
        while (true)
        {
          switch (num4)
          {
            case 0:
              if (flag2)
              {
                num4 = 8;
                continue;
              }
              goto case 3;
            case 1:
            case 7:
              flag2 = strArray2[0].Equals(spec.StartRecord());
              num4 = 0;
              continue;
            case 2:
              ++index1;
              num4 = 9;
              continue;
            case 3:
            case 4:
              streamWriter.WriteLine(strArray1[index1]);
              num4 = 2;
              continue;
            case 5:
            case 9:
              flag1 = index1 < strArray1.Length;
              num4 = 6;
              continue;
            case 6:
              if (!flag1)
              {
                num4 = 10;
                continue;
              }
              strArray2 = strArray1[index1].Split(' ');
              num4 = 7;
              continue;
            case 8:
              string[] strArray3 = strArray1;
              int index2 = index1;
              string[] strArray4 = new string[7]
              {
                strArray2[0],
                RoleValueFilter.RestartVisitor(2050),
                strArray2[1],
                RoleValueFilter.RestartVisitor(2050),
                null,
                null,
                null
              };
              int num5 = spec.Points;
              strArray4[4] = num5.ToString();
              strArray4[5] = RoleValueFilter.RestartVisitor(2050);
              num5 = spec.CloneRecord();
              strArray4[6] = num5.ToString();
              string str = string.Concat(strArray4);
              strArray3[index2] = str;
              goto case 3;
            case 10:
              goto label_26;
            default:
              num4 = 3;
              continue;
          }
        }
      }
      finally
      {
        streamWriter?.Dispose();
      }
label_26:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override PoolFieldMessage ReadResolver(PoolFieldMessage setup)
    {
      int num1 = 4;
      if (true)
        goto label_13;
label_1:
      bool flag1;
      if (flag1)
      {
        if (true)
        {
          num1 = 5;
          goto label_13;
        }
      }
      else
        goto label_8;
label_3:
      bool flag2 = !File.Exists(this.error);
      num1 = 3;
      goto label_13;
label_8:
      StreamReader streamReader = File.OpenText(this.error);
      int num2 = 11;
label_12:
      num1 = num2;
label_13:
      string v;
      PoolFieldMessage poolFieldMessage1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            poolFieldMessage1 = (PoolFieldMessage) null;
            num1 = 10;
            continue;
          case 1:
          case 8:
            goto label_7;
          case 2:
          case 7:
            goto label_10;
          case 3:
            if (!flag2)
            {
              v = setup.VerifyRecord();
              num1 = 6;
              continue;
            }
            goto label_5;
          case 4:
            goto label_3;
          case 5:
            goto label_15;
          case 6:
            goto label_11;
          case 9:
            goto label_1;
          case 10:
            goto label_37;
          case 11:
            goto label_16;
          default:
            goto label_14;
        }
      }
label_5:
      num2 = 0;
      goto label_12;
label_7:
      goto label_8;
label_10:
      v = v.Replace(RoleValueFilter.RestartVisitor(2056), RoleValueFilter.RestartVisitor(2062)).Replace(RoleValueFilter.RestartVisitor(2070), RoleValueFilter.RestartVisitor(2076));
      num2 = 1;
      goto label_12;
label_11:
      flag1 = this.@event;
      goto label_1;
label_14:
      num2 = 9;
      goto label_12;
label_15:
      v = this.SetupRecord(v);
      num2 = 2;
      goto label_12;
label_16:
      try
      {
        string str = "";
        int num3 = 9;
        if (ContainerVisitorConfig.AwakeInfo())
          goto label_22;
label_17:
        PoolFieldMessage poolFieldMessage2 = new PoolFieldMessage(setup.StartRecord());
        if (true)
        {
          num3 = 7;
          goto label_22;
        }
label_18:
        bool flag3;
        int num4;
        string[] strArray;
        if (!flag3)
        {
          num4 = 10;
        }
        else
        {
          strArray = str.Split(' ');
          if (true)
          {
            num3 = 8;
            goto label_22;
          }
          else
            goto label_33;
        }
label_21:
        num3 = num4;
label_22:
        while (true)
        {
          int num5;
          switch (num3)
          {
            case 0:
            case 9:
              goto label_31;
            case 1:
              goto label_18;
            case 2:
              goto label_37;
            case 3:
            case 4:
              goto label_17;
            case 5:
              num5 = str.Contains(v) ? 1 : 0;
              break;
            case 6:
              goto label_20;
            case 7:
              goto label_30;
            case 8:
              if (strArray[0].Equals(setup.StartRecord()))
              {
                num3 = 5;
                continue;
              }
              num5 = 0;
              break;
            case 10:
              goto label_33;
            default:
              if (true)
              {
                num3 = 3;
                continue;
              }
              goto case 8;
          }
          if (num5 != 0)
          {
            if (true)
              num3 = 6;
            else
              goto label_30;
          }
          else
            goto label_31;
        }
label_20:
        int result = 0;
        goto label_17;
label_30:
        poolFieldMessage2.Points = int.TryParse(strArray[2], out result) ? result : 0;
        poolFieldMessage2.CancelRecord(int.TryParse(strArray[3], out result) ? result : 0);
        poolFieldMessage1 = poolFieldMessage2;
        num4 = 2;
        goto label_21;
label_31:
        flag3 = (str = streamReader.ReadLine()) != null;
        num4 = 1;
        goto label_21;
label_33:
        poolFieldMessage1 = (PoolFieldMessage) null;
      }
      finally
      {
        streamReader?.Dispose();
      }
label_37:
      return poolFieldMessage1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool CountResolver(string task)
    {
      int num1 = 5;
label_3:
      StreamReader streamReader;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 4:
            while (!flag)
            {
              streamReader = File.OpenText(this.error);
              if (true)
              {
                num1 = 6;
                goto label_3;
              }
            }
            num2 = 0;
            break;
          case 3:
            goto label_24;
          case 5:
            flag = !File.Exists(this.error);
            num2 = 4;
            break;
          case 6:
            goto label_9;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_1:
      bool flag1 = false;
      goto label_24;
label_9:
      try
      {
        string str = "";
        int num3 = 6;
        string[] strArray;
        bool flag2;
        bool flag3;
        while (true)
        {
          switch (num3)
          {
            case 0:
              flag2 = strArray[0].Equals(task);
              num3 = 4;
              continue;
            case 1:
            case 3:
              flag1 = true;
              num3 = 7;
              continue;
            case 2:
            case 4:
              if (!flag2)
                goto case 6;
              else
                goto case 1;
            case 5:
              if (flag3)
              {
                strArray = str.Split(' ');
                num3 = 0;
                continue;
              }
              num3 = 8;
              continue;
            case 6:
              flag3 = (str = streamReader.ReadLine()) != null;
              num3 = 5;
              continue;
            case 7:
              goto label_24;
            case 8:
              goto label_20;
            default:
              num3 = 1;
              continue;
          }
        }
label_20:
        flag1 = false;
      }
      finally
      {
        streamReader?.Dispose();
      }
label_24:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void InitResolver()
    {
    }

    internal static bool AwakeInfo() => true;

    internal static bool DefineInfo() => false;
  }
}
