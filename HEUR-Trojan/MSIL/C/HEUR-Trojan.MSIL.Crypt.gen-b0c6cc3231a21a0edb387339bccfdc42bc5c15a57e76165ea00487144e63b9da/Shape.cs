// Decompiled with JetBrains decompiler
// Type: cours.Shape
// Assembly: StringResultHand, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 972439AE-5227-4007-A7B1-AD8C12183697
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.Crypt.gen-b0c6cc3231a21a0edb387339bccfdc42bc5c15a57e76165ea00487144e63b9da.exe

using System;
using System.Drawing;
using System.Text;

namespace cours
{
  public abstract class Shape
  {
    public Coord[] Coords;
    public bool diagonal = false;
    public Pen pen = new Pen(Brushes.Black, 4f);

    public double Perimeter
    {
      get
      {
        double perimeter = 0.0;
        for (int index = 0; index < this.Coords.Length; ++index)
          perimeter += this.Coords[index].DistanceTo(this.Coords[(index + 1) % this.Coords.Length]);
        return perimeter;
      }
    }

    public double Area
    {
      get
      {
        double num = 0.0;
        for (int index = 0; index < this.Coords.Length; ++index)
          num += this.Coords[index].X * this.Coords[(index + 1) % this.Coords.Length].Y - this.Coords[index].Y * this.Coords[(index + 1) % this.Coords.Length].X;
        return Math.Abs(num / 2.0);
      }
    }

    public override string ToString()
    {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.Append("Points: ");
      foreach (Coord coord in this.Coords)
      {
        stringBuilder1.Append(coord.ToString());
        stringBuilder1.Append(' ');
      }
      stringBuilder1.Append('\n');
      stringBuilder1.Append("Perimeter: ");
      StringBuilder stringBuilder2 = stringBuilder1;
      double num = this.Perimeter;
      string str1 = num.ToString();
      stringBuilder2.AppendLine(str1);
      stringBuilder1.Append("Area: ");
      StringBuilder stringBuilder3 = stringBuilder1;
      num = this.Area;
      string str2 = num.ToString();
      stringBuilder3.AppendLine(str2);
      return stringBuilder1.ToString();
    }
  }
}
