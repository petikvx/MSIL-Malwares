// Decompiled with JetBrains decompiler
// Type: .
// Assembly: WindowsBC, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9909ee17073e3364
// MVID: 658BFC85-36E1-493D-98E6-AE9127D73D60
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan-Downloader.MSIL.BitCoinMiner.c-64f742a0b28b2c3d2a62ef6607fcfd5fa55b793a1aff3a6c11e014e3b119149e.exe

using \u0017\u0002;
using System.Runtime.InteropServices;

namespace \u0017\u0002
{
  internal sealed class \u0018
  {
    private static readonly int[] \u0001 = new int[19]
    {
      16,
      17,
      18,
      0,
      8,
      7,
      9,
      6,
      10,
      5,
      11,
      4,
      12,
      3,
      13,
      2,
      14,
      1,
      15
    };
    private static readonly byte[] \u0002 = new byte[16]
    {
      (byte) 0,
      (byte) 8,
      (byte) 4,
      (byte) 12,
      (byte) 2,
      (byte) 10,
      (byte) 6,
      (byte) 14,
      (byte) 1,
      (byte) 9,
      (byte) 5,
      (byte) 13,
      (byte) 3,
      (byte) 11,
      (byte) 7,
      (byte) 15
    };
    private static short[] \u0003 = new short[286];
    private static byte[] \u0004 = new byte[286];
    private static short[] \u0005;
    private static byte[] \u0006;

    static \u0018()
    {
      int index1;
      for (index1 = 0; index1 < 144; \u0018.\u0004[index1++] = (byte) 8)
        \u0018.\u0003[index1] = \u0018.\u0084\u0003(48 + index1 << 8);
      for (; index1 < 256; \u0018.\u0004[index1++] = (byte) 9)
        \u0018.\u0003[index1] = \u0018.\u0084\u0003(256 + index1 << 7);
      for (; index1 < 280; \u0018.\u0004[index1++] = (byte) 7)
        \u0018.\u0003[index1] = \u0018.\u0084\u0003(index1 - 256 << 9);
      for (; index1 < 286; \u0018.\u0004[index1++] = (byte) 8)
        \u0018.\u0003[index1] = \u0018.\u0084\u0003(index1 - 88 << 8);
      \u0018.\u0005 = new short[30];
      \u0018.\u0006 = new byte[30];
      for (int index2 = 0; index2 < 30; ++index2)
      {
        \u0018.\u0005[index2] = \u0018.\u0084\u0003(index2 << 11);
        \u0018.\u0006[index2] = (byte) 5;
      }
    }

    public static short \u0084\u0003([In] int obj0) => (short) ((int) \u0018.\u0002[obj0 & 15] << 12 | (int) \u0018.\u0002[obj0 >> 4 & 15] << 8 | (int) \u0018.\u0002[obj0 >> 8 & 15] << 4 | (int) \u0018.\u0002[obj0 >> 12]);
  }
}
