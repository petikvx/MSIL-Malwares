// Decompiled with JetBrains decompiler
// Type: ib.bbH
// Assembly: ContingentPropert, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 10450B75-DDB2-42D8-896D-5D92C0FA5DAE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9a3872603bab9d16727daf3e24705ff94100d4bf2838679b5e9288aa02bd32a.exe

using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace ib
{
  internal class bbH : Fbp
  {
    internal static bbH BG8;

    public void Vvo(WH _param1)
    {
      bool flag1 = false;
      foreach (lZ lZ in (IEnumerable<lZ>) _param1.gfa())
      {
        bool flag2 = false;
        if (lZ.NS5() && !flag1)
          goto label_75;
        else
          goto label_159;
label_2:
        int num1;
        int num2 = num1;
label_3:
        gN gN;
        bool flag3;
        bool flag4;
        while (true)
        {
          IEnumerator<uy> enumerator1;
          switch (num2)
          {
            case 1:
              if (lZ.NS5())
              {
                num2 = 5;
                continue;
              }
              goto label_161;
            case 2:
              goto label_72;
            case 3:
              goto label_75;
            case 4:
              using (IEnumerator<uy> enumerator2 = gN.Fv8().GetEnumerator())
              {
                while (enumerator2.MoveNext())
                {
                  uy current = enumerator2.Current;
                  if (gN.pSz().ContainsKey(current.vSF()))
                  {
                    Xbm.vQp(current.aSZ(), "Name clash with local variable: '" + current.vSF() + "'");
                    int num3 = 0;
                    if (!bbH.JGs())
                      goto label_152;
label_147:
                    switch (num3)
                    {
                      default:
                        continue;
                    }
label_152:
                    int num4;
                    num3 = num4;
                    goto label_147;
                  }
                }
                break;
              }
            case 5:
              goto label_45;
            case 6:
              goto label_74;
            case 7:
              goto label_47;
            case 8:
              enumerator1 = gN.Fv8().GetEnumerator();
              num2 = 9;
              continue;
            case 9:
              try
              {
                while (enumerator1.MoveNext())
                {
                  uy current = enumerator1.Current;
                  if (!(current.vSF() == "value"))
                  {
                    if (!gN.Jv9().ContainsKey(current.vSF()))
                      goto label_18;
                    else
                      goto label_15;
label_14:
                    int num5;
                    switch (num5)
                    {
                      case 1:
                        goto label_23;
                      default:
                        goto label_23;
                    }
label_15:
                    bbH.aGY(current.aSZ(), (object) ("Duplicate field name not allowed: '" + current.vSF() + "'"));
                    int num6;
                    num5 = bbH.JGs() ? 1 : num6;
                    goto label_14;
label_18:
                    gN.Jv9().Add(current.vSF(), current);
                    num5 = 0;
                    if (bbH.NGT() == null)
                    {
                      num5 = 0;
                      goto label_14;
                    }
                    else
                      goto label_14;
                  }
                  else
                    Xbm.vQp(current.aSZ(), "'value' is a reserved name for use in expressions in consumable types.");
label_23:;
                }
                goto case 4;
              }
              finally
              {
                enumerator1?.Dispose();
              }
            case 10:
              goto label_10;
            case 11:
              if (flag3)
              {
                num2 = 6;
                continue;
              }
              goto label_8;
          }
          if (gN.gvw() != null)
          {
            flag4 = bbH.NGn((object) gN.gvw(), (object) "GZip") && bbH.NGn((object) gN.gvw(), (object) "Deflate");
            num2 = 2;
          }
          else
            goto label_157;
        }
label_8:
        continue;
label_45:
        int num7 = flag1 ? 1 : 0;
        goto label_162;
label_47:
        lk lk;
        lk.rvm(bbH.pGb((object) lk.Pvb()));
        HashSet<long> longSet1 = new HashSet<long>();
        HashSet<Vb0> vb0Set = new HashSet<Vb0>();
        using (IEnumerator<cw> enumerator3 = lk.Ih1().GetEnumerator())
        {
          while (enumerator3.MoveNext())
          {
            cw current1 = enumerator3.Current;
            bool flag5 = current1.ddW() is IbA;
            bool flag6 = flag5 && !flag2;
            int num8 = 0;
            if (bbH.JGs())
              goto label_136;
label_79:
            Vb0 vb0_1;
            bool flag7;
            while (true)
            {
              int num9;
              HashSet<long>.Enumerator enumerator4;
              cb3 cb3;
              bool flag8;
              bool flag9;
              long num10;
              bool flag10;
              int num11;
              switch (num8)
              {
                case 1:
                  if (!flag6)
                  {
                    if (flag5)
                    {
                      num9 = 4;
                      break;
                    }
                    num11 = 0;
                    goto label_138;
                  }
                  else
                  {
                    flag2 = true;
                    goto default;
                  }
                case 3:
                  goto label_122;
                case 4:
                  num11 = flag2 ? 1 : 0;
                  goto label_138;
                case 5:
                  cb3 = current1.ddW() as cb3;
                  num8 = 11;
                  continue;
                case 6:
                  try
                  {
                    while (enumerator4.MoveNext())
                    {
                      int current2 = (int) enumerator4.Current;
                      if (cb3.UiF() == (long) current2)
                      {
                        Xbm.vQp(current1.aSZ(), (string) bbH.qGf((object) "Value already defined: '", (object) current2.ToString(), (object) "'"));
                        int num12 = 0;
                        if (!bbH.JGs())
                          goto label_87;
label_84:
                        switch (num12)
                        {
                          default:
                            continue;
                        }
label_87:
                        int num13;
                        num12 = num13;
                        goto label_84;
                      }
                    }
                  }
                  finally
                  {
                    enumerator4.Dispose();
                  }
                  foreach (Vb0 vb0_2 in vb0Set)
                    bbH.nQX(cb3.UiF(), vb0_2, current1);
                  longSet1.Add(cb3.UiF());
                  goto label_118;
                case 7:
                  if (flag9)
                  {
                    bbH.aGY(vb0_1.aSZ(), (object) "End-value must be larger than start-value in the range");
                    if (bbH.JGs())
                    {
                      num8 = 10;
                      continue;
                    }
                    break;
                  }
                  goto case 10;
                case 8:
                  if (flag8)
                    goto label_120;
label_95:
                  if (vb0_1.wi5() == (RT) 1)
                    goto label_132;
label_116:
                  if (num10 == 0L)
                    goto label_139;
label_115:
                  flag7 = num10 == 1L;
                  num8 = bbH.NGT() == null ? 3 : 3;
                  continue;
label_139:
                  bbH.aGY(vb0_1.aSZ(), (object) ("Range is empty because of the inclusions brackets: '" + vb0_1?.ToString() + "'"));
                  goto label_115;
label_132:
                  --num10;
                  goto label_116;
label_120:
                  --num10;
                  goto label_95;
                case 9:
                  if (flag10)
                    goto label_117;
label_91:
                  if (current1.ddW() is cb3)
                  {
                    num8 = bbH.NGT() != null ? 4 : 5;
                    continue;
                  }
                  goto label_118;
label_117:
                  hc hc = new hc();
                  hc.HdI((string) bbH.jG9((object) current1));
                  lk.hhA().Add((string) bbH.jG9((object) current1), hc);
                  goto label_91;
                case 10:
                  num10 = vb0_1.Ain() - vb0_1.dik() + 1L;
                  flag8 = vb0_1.Fiu() == (RT) 1;
                  if (bbH.NGT() == null)
                  {
                    num8 = 8;
                    continue;
                  }
                  break;
                case 11:
                  enumerator4 = longSet1.GetEnumerator();
                  num8 = 6;
                  continue;
                default:
                  flag10 = current1.KdE() != null && !lk.hhA().ContainsKey(current1.KdE());
                  num9 = 9;
                  break;
              }
label_78:
              num8 = num9;
              continue;
label_118:
              if (current1.ddW() is Vb0)
              {
                vb0_1 = current1.ddW() as Vb0;
                flag9 = bbH.lGv((object) vb0_1) <= vb0_1.dik();
                if (bbH.NGT() == null)
                {
                  num8 = 7;
                  continue;
                }
                goto label_78;
              }
              else
                goto label_126;
label_138:
              if (num11 != 0)
              {
                bbH.aGY(current1.aSZ(), (object) "Only one 'else' event allowed");
                num8 = 2;
              }
              else if (bbH.JGs())
                num8 = 0;
              else
                goto label_78;
            }
label_122:
            if (flag7)
              goto label_140;
label_94:
            foreach (int num14 in longSet1)
              bbH.nQX((long) num14, vb0_1, current1);
            foreach (Vb0 vb0_3 in vb0Set)
              bbH.tQI(vb0_1, vb0_3, current1);
            vb0Set.Add(vb0_1);
            goto label_126;
label_140:
            Xbm.oQ2(vb0_1.aSZ(), "Range is of length 1, why not use a single value instead?: '" + vb0_1?.ToString() + "'");
            goto label_94;
label_126:
            continue;
label_136:
            num8 = 1;
            goto label_79;
          }
          goto label_46;
        }
label_72:
        if (flag4)
        {
          Xbm.vQp(gN.AvB(), (string) bbH.qGf((object) "Unknown compression method: '", (object) gN.gvw(), (object) "'. Expected 'GZip' or 'Deflate'."));
          goto label_157;
        }
        else
          goto label_157;
label_74:
        rr rr = lZ as rr;
        rr.rvm(bbH.UQ9(rr.Pvb()));
        HashSet<long> longSet2;
        HashSet<string> stringSet;
        using (IEnumerator<DR> enumerator = rr.IhE().GetEnumerator())
        {
          while (enumerator.MoveNext())
          {
            DR current = enumerator.Current;
            bool flag11 = longSet2.Contains(current.RdV());
            int num15 = 0;
            if (bbH.NGT() == null)
              goto label_53;
label_52:
            int num16;
            num15 = num16;
label_53:
            long num17;
            while (true)
            {
              switch (num15)
              {
                case 1:
                  stringSet.Add((string) bbH.kGZ((object) current));
                  break;
                case 2:
                  goto label_55;
                case 3:
                  Xbm.vQp(current.aSZ(), "Bit may only be listed once: '" + current.RdV().ToString() + "'");
                  goto label_58;
                default:
                  if (!flag11)
                  {
                    longSet2.Add(current.RdV());
                    goto label_58;
                  }
                  else
                    goto case 3;
              }
label_57:
              num17 = (long) (bbH.UQ9(rr.Pvb()) * 8 - 1);
              if (bbH.nGC((object) current) > num17)
              {
                if (bbH.NGT() == null)
                {
                  num15 = 2;
                  continue;
                }
                goto label_52;
              }
              else
                goto label_64;
label_58:
              if (current.Gdl() == null || !stringSet.Contains(current.Gdl()))
              {
                if (current.Gdl() != null)
                {
                  if (bbH.JGs())
                    num15 = 1;
                  else
                    goto label_52;
                }
                else
                  goto label_57;
              }
              else
              {
                Xbm.vQp(current.aSZ(), (string) bbH.qGf((object) "Two identical bitnames found: '", (object) current.Gdl(), (object) "'"));
                goto label_57;
              }
            }
label_55:
            Xbm.vQp(current.aSZ(), "Bit-index exceeds the boundary of the primitive type: '" + current.RdV().ToString() + "' > " + num17.ToString());
label_64:;
          }
          goto label_8;
        }
label_157:
        goto label_158;
label_161:
        num7 = 0;
label_162:
        if (num7 != 0)
        {
          Xbm.vQp(lZ.aSZ(), "Only one 'format' specifier is allowed per schema");
          goto label_49;
        }
        else
          goto label_49;
label_10:
        if (lZ is gN)
        {
          gN = lZ as gN;
          num2 = bbH.NGT() != null ? 4 : 8;
          goto label_3;
        }
        else
          goto label_158;
label_46:
        longSet2 = new HashSet<long>();
        stringSet = new HashSet<string>();
        flag3 = lZ is rr;
        num2 = 11;
        goto label_3;
label_49:
        if (_param1.Cfv().ContainsKey(lZ.vSF()))
          bbH.aGY(lZ.aSZ(), bbH.qGf((object) "Duplicate datablock name not allowed: '", (object) lZ.vSF(), (object) "'"));
        else
          _param1.Cfv().Add(lZ.vSF(), lZ);
        using (IEnumerator<Qd> enumerator = lZ.CvY().GetEnumerator())
        {
          while (enumerator.MoveNext())
          {
            Qd current = enumerator.Current;
            if ((string) bbH.pGe((object) current) == "value")
            {
              int num18 = 0;
              if (bbH.NGT() == null)
                goto label_36;
label_32:
              switch (num18)
              {
                case 1:
                  goto label_38;
                default:
                  Xbm.vQp(current.aSZ(), "'value' is a reserved name for use in expressions in consumable types.");
                  continue;
              }
label_36:
              num18 = 0;
              goto label_32;
            }
            else
              goto label_39;
label_38:
            lZ.pSz().Add(current.vSF(), current);
            continue;
label_39:
            if (lZ.pSz().ContainsKey((string) bbH.pGe((object) current)))
              Xbm.vQp(current.aSZ(), (string) bbH.qGf((object) "Duplicate local variable name not allowed: '", (object) current.vSF(), (object) "'"));
            else
              goto label_38;
          }
          goto label_10;
        }
label_75:
        flag1 = true;
        _param1.Sfi(lZ);
        goto label_49;
label_158:
        if (lZ is lk)
        {
          lk = lZ as lk;
          if (bbH.JGs())
          {
            num2 = 7;
            goto label_3;
          }
          else
            goto label_2;
        }
        else
          goto label_46;
label_159:
        if (bbH.NGT() == null)
        {
          num2 = 1;
          goto label_3;
        }
        else
          goto label_2;
      }
      if (_param1.Kfw() != null)
        return;
      Xbm.OQS("No 'format' block specified. Schema needs an entry point.");
    }

    private static void nQX(long _param0, Vb0 _param1, cw _param2)
    {
      if (_param0 < _param1.dik() || _param0 > _param1.Ain())
        return;
      if (_param0 <= _param1.dik() || _param0 >= bbH.lGv((object) _param1))
        goto label_7;
      else
        goto label_12;
label_1:
      int num1;
      int num2;
      switch (num2)
      {
        case 1:
          num1 = _param0 == _param1.Ain() ? 1 : 0;
          goto label_16;
        case 2:
          if (_param0 == bbH.VGQ((object) _param1))
          {
            num1 = 1;
            goto label_16;
          }
          else
            goto label_10;
        case 3:
          return;
      }
label_7:
      if (_param1.Fiu() == (RT) 0)
      {
        int num3;
        num2 = bbH.NGT() == null ? 2 : num3;
        goto label_1;
      }
label_10:
      if (bbH.zG3((object) _param1) == (RT) 0)
      {
        num2 = bbH.NGT() != null ? 1 : 1;
        goto label_1;
      }
      else
      {
        num1 = 0;
        goto label_16;
      }
label_12:
      Xbm.vQp(_param2.aSZ(), "Value intersecting range is not allowed: '" + _param1?.ToString() + "'");
      num2 = !bbH.JGs() ? 0 : 0;
      goto label_1;
label_16:
      if (num1 == 0)
        return;
      Hi hi = _param2.aSZ();
      Vb0 vb0 = _param1;
      string str = "Value intersecting range is not allowed. Check the inclusion brackets: '" + (vb0 == null ? (string) null : vb0.ToString()) + "'";
      bbH.aGY(hi, (object) str);
      num2 = 3;
      goto label_1;
    }

    private static void tQI(Vb0 _param0, Vb0 _param1, cw _param2)
    {
      int num1 = 3;
label_1:
      int num2 = num1;
      while (true)
      {
        int num3;
        switch (num2)
        {
          case 0:
            goto label_14;
          case 1:
label_10:
            if (_param1.Ain() != _param0.dik() || _param1.wi5() != (RT) 1 && _param0.Fiu() != (RT) 1)
            {
              Hi hi = _param2.aSZ();
              string[] strArray = new string[5]
              {
                "Intersecting ranges not allowed: '",
                null,
                null,
                null,
                null
              };
              Vb0 vb0 = _param0;
              strArray[1] = vb0 == null ? (string) null : vb0.ToString();
              strArray[2] = "' and '";
              strArray[3] = _param1?.ToString();
              strArray[4] = "'";
              string str = string.Concat(strArray);
              Xbm.vQp(hi, str);
              if (bbH.JGs())
              {
                num2 = 4;
                continue;
              }
              goto label_1;
            }
            else
              goto label_3;
          case 2:
            num3 = bbH.VGQ((object) _param1) > _param0.Ain() ? 1 : 0;
            break;
          case 3:
            if (_param0.dik() <= bbH.lGv((object) _param1))
            {
              num2 = 2;
              continue;
            }
            num3 = 1;
            break;
          case 4:
            goto label_8;
          default:
            goto label_11;
        }
        if (num3 != 0 || _param0.Ain() == bbH.VGQ((object) _param1) && (bbH.zG3((object) _param0) == (RT) 1 || _param1.Fiu() == (RT) 1))
          goto label_7;
        else
          goto label_10;
      }
label_14:
      return;
label_11:
      return;
label_3:
      return;
label_7:
      return;
label_8:;
    }

    public static int UQ9(Y1 _param0)
    {
      int num1;
      int num2;
      switch (bbH.QGE((object) _param0))
      {
        case JK.CallExpression:
          Xbm.XQD("Function type...");
          num1 = 1;
          goto label_4;
        case JK.Bool:
          num1 = 1;
          goto label_4;
        case JK.Ubyte:
          num1 = 1;
          goto label_4;
        case JK.Sbyte:
          num1 = 1;
          goto label_4;
        case JK.Ushort:
label_6:
          num1 = 2;
          goto label_4;
        case JK.Short:
label_12:
          num1 = 2;
          num2 = 5;
          break;
        case JK.Uint:
label_7:
          num1 = 4;
          int num3;
          num2 = bbH.NGT() == null ? 3 : num3;
          break;
        case JK.Int:
          num1 = 4;
          goto label_4;
        case JK.Ulong:
          num1 = 4;
          goto label_4;
        case JK.Long:
          num1 = 4;
          goto label_4;
        default:
          num1 = 1;
          goto label_4;
      }
      switch (num2)
      {
        case 1:
          goto label_6;
        case 2:
        case 3:
        case 5:
          break;
        case 4:
          goto label_12;
        default:
          goto label_7;
      }
label_4:
      return num1;
    }

    public bbH()
    {
      Jnb.vbPcO4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static object qGf([In] object obj0, [In] object obj1, [In] object obj2) => (object) ((string) obj0 + (string) obj1 + (string) obj2);

    internal static void aGY(Hi _param0, [In] object obj1) => Xbm.vQp(_param0, (string) obj1);

    internal static object pGe([In] object obj0) => (object) ((Qd) obj0).vSF();

    internal static bool NGn([In] object obj0, [In] object obj1) => (string) obj0 != (string) obj1;

    internal static int pGb([In] object obj0) => bbH.UQ9((Y1) obj0);

    internal static object jG9([In] object obj0) => (object) ((cw) obj0).KdE();

    internal static long lGv([In] object obj0) => ((Vb0) obj0).Ain();

    internal static object kGZ([In] object obj0) => (object) ((DR) obj0).Gdl();

    internal static long nGC([In] object obj0) => ((DR) obj0).RdV();

    internal static bool JGs() => bbH.BG8 == null;

    internal static bbH NGT() => bbH.BG8;

    internal static long VGQ([In] object obj0) => ((Vb0) obj0).dik();

    internal static RT zG3([In] object obj0) => ((Vb0) obj0).wi5();

    internal static JK QGE([In] object obj0) => ((Y1) obj0).nhO();
  }
}
