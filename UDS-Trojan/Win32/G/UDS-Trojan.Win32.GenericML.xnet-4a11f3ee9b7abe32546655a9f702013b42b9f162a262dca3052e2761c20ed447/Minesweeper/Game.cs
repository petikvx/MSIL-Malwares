// Decompiled with JetBrains decompiler
// Type: Minesweeper.Game
// Assembly: IUnionSemanticCodeGr, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 54936E77-57E9-4A01-8A40-CDD9C21A9B24
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4a11f3ee9b7abe32546655a9f702013b42b9f162a262dca3052e2761c20ed447.exe

using System;
using System.Drawing;
using System.Windows.Forms;

namespace Minesweeper
{
  public class Game : Panel
  {
    private const int DistanceToTop = 5;
    private const int DistanseToBottom = 5;
    private const int DistanseToLeft = 5;
    private const int DistanseToRight = 5;
    private const int DistanceBetweenComponents = 5;
    private const int HeightForManager = 40;
    private Game.GameState gameState;
    private Game.MineField minefield;
    private Game.Manager manager;
    private Timer timer;
    private int CurrrentNumberOpenTiles;
    private static readonly Image Closed_Tile;
    private static readonly Image One_Tile;
    private static readonly Image Two_Tile;
    private static readonly Image Three_Tile;
    private static readonly Image Four_Tile;
    private static readonly Image Five_Tile;
    private static readonly Image Six_Tile;
    private static readonly Image Seven_Tile;
    private static readonly Image Eight_Tile;
    private static readonly Image Mine_Tile;
    private static readonly Image Mine_Red_Tile;
    private static readonly Image Mine_Mistake_Tile;
    private static readonly Image Empty_Tile;
    private static readonly Image Flag_Tile;
    private static readonly Image Smile_Normal;
    private static readonly Image Smile_Sad;
    private static readonly Image Smile_Cool;

    public int Timing { get; private set; }

    public int NumberMines { get; private set; }

    public int NumberTilesInRow { get; private set; }

    public int NumberTilesInColumn { get; private set; }

    private event EventHandler StartGame;

    public event EventHandler GameOver;

    public event EventHandler GameWin;

    public Game(int NumberTilesInRow, int NumberTilesInColumn, int NumberMines)
    {
      this.NumberTilesInRow = NumberTilesInRow;
      this.NumberTilesInColumn = NumberTilesInColumn;
      this.NumberMines = NumberMines;
      this.minefield = new Game.MineField(NumberTilesInRow, NumberTilesInColumn, NumberMines);
      this.manager = new Game.Manager();
      this.timer = new Timer();
      this.Initialize();
    }

    public Game(DifficultyGame difficulty)
    {
      switch (difficulty)
      {
        case DifficultyGame.Basic:
          this.NumberTilesInRow = 10;
          this.NumberTilesInColumn = 10;
          this.NumberMines = 12;
          break;
        case DifficultyGame.Intermediate:
          this.NumberTilesInRow = 16;
          this.NumberTilesInColumn = 16;
          this.NumberMines = 40;
          break;
        case DifficultyGame.Advanced:
          this.NumberTilesInRow = 30;
          this.NumberTilesInColumn = 16;
          this.NumberMines = 99;
          break;
      }
      this.minefield = new Game.MineField(this.NumberTilesInRow, this.NumberTilesInColumn, this.NumberMines);
      this.manager = new Game.Manager();
      this.timer = new Timer();
      this.Initialize();
    }

    private void Initialize()
    {
      this.minefield.BorderStyle = BorderStyle.Fixed3D;
      this.minefield.Width += 4;
      this.minefield.Height += 4;
      this.minefield.Location = new Point(5, 50);
      this.Controls.Add((Control) this.minefield);
      this.manager.BorderStyle = BorderStyle.Fixed3D;
      this.manager.Width = this.minefield.Width;
      this.manager.Height = 40;
      this.manager.Location = new Point(5, 5);
      this.manager.BackColor = Color.Silver;
      this.manager.InitializeComponent();
      this.manager.label_for_flags.NumberFlags = this.minefield.NumberMines;
      this.manager.PictureBoxSmile.MouseClick += new MouseEventHandler(this.Smile_Click);
      this.Controls.Add((Control) this.manager);
      this.timer.Enabled = false;
      this.timer.Interval = 1000;
      this.timer.Tick += new EventHandler(this.timer_Tick);
      this.Width = 10 + this.minefield.Width;
      this.Height = 5 + this.manager.Height + 5 + this.minefield.Height + 5;
      this.BackColor = Color.DarkGray;
      this.gameState = Game.GameState.NotStarted;
      this.StartGame += new EventHandler(this.Game_Start_Game);
      this.GameOver += new EventHandler(this.Game_Over);
      this.GameWin += new EventHandler(this.Game_Win);
      for (int index = 0; index < this.minefield.NumberTilesInRow; ++index)
      {
        int num = 0;
        while (num < this.minefield.NumberTilesInColumn)
          ++num;
      }
    }

    public void ResetField()
    {
      this.gameState = Game.GameState.NotStarted;
      this.manager.label_for_timing.Timing = 0;
      this.Timing = 0;
      this.manager.label_for_flags.NumberFlags = this.minefield.NumberMines;
      this.timer.Stop();
      this.CurrrentNumberOpenTiles = 0;
      this.minefield.ReSetField();
    }

    private void OpenTile(Game.Tile tile)
    {
      if (tile.ExternalState == Game.KindsOfExternalTile.Open)
        return;
      if (tile.ExternalState == Game.KindsOfExternalTile.Flagged)
        ++this.manager.label_for_flags.NumberFlags;
      tile.ExternalState = Game.KindsOfExternalTile.Open;
      ++this.CurrrentNumberOpenTiles;
      if (tile.InternalState != Game.KindsOfInternalTile.Zero)
        return;
      for (int index1 = tile.Index.X - 1; index1 <= tile.Index.X + 1; ++index1)
      {
        if (index1 >= 0 && index1 < this.minefield.NumberTilesInRow)
        {
          for (int index2 = tile.Index.Y - 1; index2 <= tile.Index.Y + 1; ++index2)
          {
            if (index2 >= 0 && index2 < this.minefield.NumberTilesInColumn)
              this.OpenTile(this.minefield.Tiles[index1, index2]);
          }
        }
      }
    }

    public void StopGame() => this.timer.Stop();

    private void Tile_Click(object sender, MouseEventArgs e)
    {
      if (this.gameState == Game.GameState.Finished)
        return;
      if (this.gameState == Game.GameState.NotStarted)
      {
        this.StartGame((object) this, EventArgs.Empty);
        this.gameState = Game.GameState.Started;
      }
      if (e.Button == MouseButtons.Left && this.CurrrentNumberOpenTiles == this.NumberTilesInRow * this.NumberTilesInColumn - this.NumberMines)
        this.GameWin((object) this, EventArgs.Empty);
      if (e.Button != MouseButtons.Right)
        ;
    }

    private void timer_Tick(object sender, EventArgs e)
    {
      ++this.manager.label_for_timing.Timing;
      ++this.Timing;
    }

    private void Game_Start_Game(object sender, EventArgs e)
    {
      this.minefield.SetUpMines();
      this.minefield.SetUpNumbers();
      this.timer.Enabled = true;
      this.timer.Start();
    }

    private void Game_Over(object sender, EventArgs e)
    {
      this.minefield.OpenTilesAfterLose();
      this.timer.Stop();
      this.manager.PictureBoxSmile.State = Game.SmileState.Sad;
      this.gameState = Game.GameState.Finished;
    }

    public void Game_Win(object sender, EventArgs e)
    {
      this.manager.PictureBoxSmile.Image = Game.Smile_Cool;
      this.timer.Stop();
      this.minefield.FlagTilesAfterWin();
      this.manager.label_for_flags.NumberFlags = 0;
    }

    private void Smile_Click(object sender, MouseEventArgs e)
    {
      ((Game.PictureSmile) sender).State = Game.SmileState.Normal;
      if (e.Button != MouseButtons.Left)
        return;
      this.gameState = Game.GameState.NotStarted;
      this.manager.label_for_timing.Timing = 0;
      this.Timing = 0;
      this.manager.label_for_flags.NumberFlags = this.minefield.NumberMines;
      this.timer.Stop();
      this.CurrrentNumberOpenTiles = 0;
      this.minefield.ReSetField();
    }

    private struct Index
    {
      public int X { get; set; }

      public int Y { get; set; }

      public Index(int x, int y)
      {
        this.X = x;
        this.Y = y;
      }
    }

    private enum KindsOfInternalTile
    {
      Zero,
      One,
      Two,
      Three,
      Four,
      Five,
      Six,
      Seven,
      Eight,
      Mine,
    }

    private enum KindsOfExternalTile
    {
      Closed,
      Open,
      Flagged,
    }

    private enum GameState
    {
      NotStarted,
      Started,
      Finished,
    }

    private enum SmileState
    {
      Normal,
      Sad,
      Cool,
    }

    private class PictureSmile : PictureBox
    {
      private Game.SmileState state;

      public Game.SmileState State
      {
        get => this.state;
        set
        {
          this.state = value;
          switch (value)
          {
            case Game.SmileState.Normal:
              this.Image = Game.Smile_Normal;
              break;
            case Game.SmileState.Sad:
              this.Image = Game.Smile_Sad;
              break;
            case Game.SmileState.Cool:
              this.Image = Game.Smile_Cool;
              break;
          }
        }
      }
    }

    private class Tile : PictureBox
    {
      private Game.KindsOfInternalTile Internal_State;
      private Game.KindsOfExternalTile External_State;

      public Game.Index Index { get; set; }

      public Game.KindsOfExternalTile ExternalState
      {
        get => this.External_State;
        set
        {
          switch (value)
          {
            case Game.KindsOfExternalTile.Closed:
              this.Image = Game.Closed_Tile;
              break;
            case Game.KindsOfExternalTile.Open:
              switch (this.Internal_State)
              {
                case Game.KindsOfInternalTile.Zero:
                  this.Image = Game.Empty_Tile;
                  break;
                case Game.KindsOfInternalTile.One:
                  this.Image = Game.One_Tile;
                  break;
                case Game.KindsOfInternalTile.Two:
                  this.Image = Game.Two_Tile;
                  break;
                case Game.KindsOfInternalTile.Three:
                  this.Image = Game.Three_Tile;
                  break;
                case Game.KindsOfInternalTile.Four:
                  this.Image = Game.Four_Tile;
                  break;
                case Game.KindsOfInternalTile.Five:
                  this.Image = Game.Five_Tile;
                  break;
                case Game.KindsOfInternalTile.Six:
                  this.Image = Game.Six_Tile;
                  break;
                case Game.KindsOfInternalTile.Seven:
                  this.Image = Game.Seven_Tile;
                  break;
                case Game.KindsOfInternalTile.Eight:
                  this.Image = Game.Eight_Tile;
                  break;
                case Game.KindsOfInternalTile.Mine:
                  this.Image = Game.Mine_Tile;
                  break;
              }
              break;
            case Game.KindsOfExternalTile.Flagged:
              this.Image = Game.Flag_Tile;
              break;
          }
          this.External_State = value;
        }
      }

      public Game.KindsOfInternalTile InternalState
      {
        get => this.Internal_State;
        set => this.Internal_State = value;
      }

      public Tile()
      {
        this.InternalState = Game.KindsOfInternalTile.Zero;
        this.ExternalState = Game.KindsOfExternalTile.Closed;
        this.SizeMode = PictureBoxSizeMode.StretchImage;
      }
    }

    private class MineField : Panel
    {
      public Game.Tile[,] Tiles;
      public Game.Index[] IndexesOfMines;
      public int NumberMines;
      public int NumberTilesInRow;
      public int NumberTilesInColumn;

      public MineField(int NumberTilesInRow, int NumberTilesInColumn, int NumberMines)
      {
        this.NumberTilesInRow = NumberTilesInRow;
        this.NumberTilesInColumn = NumberTilesInColumn;
        this.NumberMines = NumberMines;
        this.IndexesOfMines = new Game.Index[NumberMines];
        this.Tiles = new Game.Tile[NumberTilesInRow, NumberTilesInColumn];
        this.SetField();
      }

      public void SetField()
      {
        for (int index1 = 0; index1 < this.NumberTilesInRow; ++index1)
        {
          for (int index2 = 0; index2 < this.NumberTilesInColumn; ++index2)
            ;
        }
      }

      private void CloseTiles()
      {
        for (int index1 = 0; index1 < this.NumberTilesInRow; ++index1)
        {
          for (int index2 = 0; index2 < this.NumberTilesInColumn; ++index2)
          {
            this.Tiles[index1, index2].ExternalState = Game.KindsOfExternalTile.Closed;
            this.Tiles[index1, index2].InternalState = Game.KindsOfInternalTile.Zero;
          }
        }
      }

      public void ReSetField() => this.CloseTiles();

      public void SetUpMines()
      {
        Random random = new Random();
        int numberMines = this.NumberMines;
        Game.Index index = new Game.Index();
        do
        {
          index.X = random.Next(0, this.NumberTilesInRow);
          index.Y = random.Next(0, this.NumberTilesInColumn);
          if (this.Tiles[index.X, index.Y].InternalState != Game.KindsOfInternalTile.Mine)
          {
            this.Tiles[index.X, index.Y].InternalState = Game.KindsOfInternalTile.Mine;
            this.IndexesOfMines[numberMines - 1] = index;
            --numberMines;
          }
        }
        while (numberMines != 0);
      }

      public void SetUpNumbers()
      {
        for (int index1 = 0; index1 < this.NumberMines; ++index1)
        {
          for (int index2 = this.IndexesOfMines[index1].X - 1; index2 <= this.IndexesOfMines[index1].X + 1; ++index2)
          {
            if (index2 >= 0 && index2 < this.NumberTilesInRow)
            {
              for (int index3 = this.IndexesOfMines[index1].Y - 1; index3 <= this.IndexesOfMines[index1].Y + 1; ++index3)
              {
                if (index3 >= 0 && index3 < this.NumberTilesInColumn && this.Tiles[index2, index3].InternalState != Game.KindsOfInternalTile.Mine)
                  ++this.Tiles[index2, index3].InternalState;
              }
            }
          }
        }
      }

      public void FlagTilesAfterWin()
      {
        for (int index1 = 0; index1 < this.NumberTilesInRow; ++index1)
        {
          for (int index2 = 0; index2 < this.NumberTilesInColumn; ++index2)
          {
            if (this.Tiles[index1, index2].ExternalState == Game.KindsOfExternalTile.Closed)
              this.Tiles[index1, index2].ExternalState = Game.KindsOfExternalTile.Flagged;
          }
        }
      }

      public void OpenTilesAfterLose()
      {
        for (int index1 = 0; index1 < this.NumberTilesInRow; ++index1)
        {
          for (int index2 = 0; index2 < this.NumberTilesInColumn; ++index2)
          {
            switch (this.Tiles[index1, index2].ExternalState)
            {
              case Game.KindsOfExternalTile.Closed:
                if (this.Tiles[index1, index2].InternalState == Game.KindsOfInternalTile.Mine)
                {
                  this.Tiles[index1, index2].ExternalState = Game.KindsOfExternalTile.Open;
                  break;
                }
                break;
              case Game.KindsOfExternalTile.Flagged:
                if (this.Tiles[index1, index2].InternalState != Game.KindsOfInternalTile.Mine)
                {
                  this.Tiles[index1, index2].Image = Game.Mine_Mistake_Tile;
                  break;
                }
                break;
            }
          }
        }
      }

      public void OpenTilesWithMines()
      {
        for (int index = 0; index < this.NumberMines; ++index)
          this.Tiles[this.IndexesOfMines[index].X, this.IndexesOfMines[index].Y].ExternalState = Game.KindsOfExternalTile.Open;
      }
    }

    private class LabelForTiming : Label
    {
      private int Time = 0;

      public int Timing
      {
        get => this.Time;
        set
        {
          if (value < 0)
            return;
          if (value <= 9)
          {
            this.Time = value;
            this.Text = "00" + this.Time.ToString();
          }
          else if (value <= 99)
          {
            this.Time = value;
            this.Text = "0" + this.Time.ToString();
          }
          else
          {
            if (value > 999)
              return;
            this.Time = value;
            this.Text = this.Time.ToString();
          }
        }
      }
    }

    private class LabelForFlags : Label
    {
      private int numberFlags;

      public int NumberFlags
      {
        get => this.numberFlags;
        set
        {
          if (value < 0)
            return;
          if (value <= 9)
          {
            this.numberFlags = value;
            this.Text = "00" + this.numberFlags.ToString();
          }
          else if (value <= 99)
          {
            this.numberFlags = value;
            this.Text = "0" + this.numberFlags.ToString();
          }
          else
          {
            this.numberFlags = value;
            this.Text = this.numberFlags.ToString();
          }
        }
      }
    }

    private class Manager : Panel
    {
      private const int DistanceToTop = 6;
      private const int DistanceToLeft = 9;
      private const int DictanceToRight = 11;
      private Size SizeForSmile = new Size(26, 26);
      public Game.LabelForFlags label_for_flags;
      public Game.LabelForTiming label_for_timing;
      public Game.PictureSmile PictureBoxSmile;

      public void InitializeComponent()
      {
        this.label_for_flags = new Game.LabelForFlags();
        this.label_for_timing = new Game.LabelForTiming();
        this.PictureBoxSmile = new Game.PictureSmile();
        this.PictureBoxSmile.SizeMode = PictureBoxSizeMode.StretchImage;
        this.PictureBoxSmile.Size = this.SizeForSmile;
        this.PictureBoxSmile.State = Game.SmileState.Normal;
        this.PictureBoxSmile.Location = new Point(this.Width / 2 - this.PictureBoxSmile.Width / 2, 6);
        this.Controls.Add((Control) this.PictureBoxSmile);
        this.label_for_flags.Width = 50;
        this.label_for_flags.Location = new Point(9, 6);
        this.label_for_flags.Font = new Font("MS Reference Sans Serif", 15.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
        this.label_for_flags.BackColor = Color.DimGray;
        this.label_for_flags.ForeColor = Color.Maroon;
        this.label_for_flags.AutoSize = true;
        this.label_for_flags.Text = "000";
        this.Controls.Add((Control) this.label_for_flags);
        this.label_for_timing.Width = 50;
        this.label_for_timing.Font = new Font("MS Reference Sans Serif", 15.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
        this.label_for_timing.BackColor = Color.DimGray;
        this.label_for_timing.ForeColor = Color.Maroon;
        this.label_for_timing.AutoSize = true;
        this.label_for_timing.Location = new Point(this.Width - 11 - this.label_for_timing.Width, 6);
        this.label_for_timing.Text = "000";
        this.Controls.Add((Control) this.label_for_timing);
      }
    }
  }
}
