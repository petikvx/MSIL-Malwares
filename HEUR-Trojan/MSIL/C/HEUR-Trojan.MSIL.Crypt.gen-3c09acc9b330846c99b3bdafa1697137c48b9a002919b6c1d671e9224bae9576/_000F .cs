// Decompiled with JetBrains decompiler
// Type:  
// Assembly: SafeHeapHandleCa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 86070057-00F7-426E-5B63-54B8EF531843
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-3c09acc9b330846c99b3bdafa1697137c48b9a002919b6c1d671e9224bae9576.exe

using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;

public class \u000F\u2000 : \u000E\u2000
{
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private List<int[,]> \u0002;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private int \u0003;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private Point \u0005;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private Size \u0008;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u000F\u2000(Image _param1, Size _param2)
  {
    int num1 = 2;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            // ISSUE: explicit constructor call
            base.\u002Ector(_param1, Point.Empty);
            if (!\u000F\u2000.\u0003())
            {
              num2 = 4;
              continue;
            }
            goto label_7;
          case 1:
          case 4:
            goto label_2;
          case 3:
            goto label_1;
          case 5:
            goto label_9;
          default:
            goto label_5;
        }
      }
label_1:
      // ISSUE: reference to a compiler-generated method
      this.CancelVisitor(0);
      num1 = 5;
      continue;
label_2:
      // ISSUE: reference to a compiler-generated method
      this.RunVisitor(_param2);
      goto label_1;
label_5:
      num1 = 3;
    }
label_9:
    return;
label_7:;
  }

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public int[,] CheckVisitor() => this.CloneVisitor()[this.SearchVisitor()];

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  protected List<int[,]> CloneVisitor() => this.\u0002;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  protected void RemoveVisitor(List<int[,]> _param1) => this.\u0002 = _param1;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public Point ViewVisitor() => this.\u0005;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public void TestVisitor(Point _param1) => this.\u0005 = _param1;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public Size AwakeVisitor() => new Size(this.CheckVisitor().GetLength(1), this.CheckVisitor().GetLength(0));

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public Size InitVisitor() => this.\u0008;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public void \u0002(int _param1)
  {
    int num1 = 1;
    while (true)
    {
      int num2;
      bool flag;
      int num3;
      switch (num1)
      {
        case 0:
        case 1:
          // ISSUE: reference to a compiler-generated method
          num2 = this.SearchVisitor() + _param1;
          if (!\u000F\u2000.\u0003())
          {
            num1 = 7;
            continue;
          }
          goto case 6;
        case 2:
          flag = num2 == this.CloneVisitor().Count;
          goto case 4;
        case 3:
          num2 = 0;
          goto label_10;
        case 4:
        case 5:
          if (flag)
          {
            if (\u000F\u2000.\u0002())
            {
              num1 = 3;
              continue;
            }
            goto label_13;
          }
          else
            goto label_10;
        case 6:
          num2 = this.CloneVisitor().Count - 1;
          if (\u000F\u2000.\u0002())
          {
            num1 = 2;
            continue;
          }
          goto case 3;
        case 7:
          if (num2 < 0)
          {
            num3 = 6;
            break;
          }
          goto case 2;
        case 8:
          goto label_15;
        default:
          num1 = 5;
          continue;
      }
label_2:
      num1 = num3;
      continue;
label_10:
      // ISSUE: reference to a compiler-generated method
      this.CancelVisitor(num2);
      num3 = 8;
      goto label_2;
    }
label_15:
    return;
label_13:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public void \u0002() => this.CancelVisitor(0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public override void \u000E\u2000\u200A\u2001\u0002(\u000E\u2002 _param1)
  {
    int num1 = 2;
    if (\u000F\u2000.\u0003())
      ;
    while (true)
    {
      int index1;
      bool flag;
      int index2;
      Size size;
      int num2;
      int num3;
      Point point;
      switch (num1)
      {
        case 0:
        case 2:
          index2 = 0;
          num2 = 9;
          break;
        case 1:
        case 9:
          int num4 = index2;
          size = this.AwakeVisitor();
          int height1 = size.Height;
          if (num4 < height1)
          {
            index1 = 0;
            int num5 = 4;
            num1 = \u000F\u2000.\u0003() ? num5 : num5;
            continue;
          }
          num1 = 10;
          continue;
        case 3:
          if (num3 > 0)
          {
            ref Point local = ref point;
            int num6 = index1 + this.ViewVisitor().X;
            size = this.InitVisitor();
            int width = size.Width;
            int x = num6 * width;
            int num7 = index2 + this.ViewVisitor().Y;
            size = this.InitVisitor();
            int height2 = size.Height;
            int y = num7 * height2;
            local = new Point(x, y);
            num1 = 8;
            continue;
          }
          goto case 7;
        case 4:
        case 5:
          int num8 = index1;
          size = this.AwakeVisitor();
          int width1 = size.Width;
          flag = num8 < width1;
          num2 = 6;
          break;
        case 6:
          if (!flag)
          {
            ++index2;
            goto case 1;
          }
          else
          {
            num3 = this.CheckVisitor()[index2, index1];
            num1 = 3;
            continue;
          }
        case 7:
          ++index1;
          num2 = 5;
          break;
        case 8:
          _param1.\u0002(this.PublishCustomer(), point);
          goto case 7;
        case 10:
          goto label_9;
        default:
          num1 = 7;
          continue;
      }
      num1 = num2;
    }
label_9:;
  }

  internal new static bool \u0002() => true;

  internal new static bool \u0003() => false;
}
