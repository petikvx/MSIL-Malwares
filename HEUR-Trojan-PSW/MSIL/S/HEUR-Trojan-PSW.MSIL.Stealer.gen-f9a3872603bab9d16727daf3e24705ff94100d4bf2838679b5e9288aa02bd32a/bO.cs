// Decompiled with JetBrains decompiler
// Type: ib.bO
// Assembly: ContingentPropert, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 10450B75-DDB2-42D8-896D-5D92C0FA5DAE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9a3872603bab9d16727daf3e24705ff94100d4bf2838679b5e9288aa02bd32a.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace ib
{
  public class bO
  {
    private string sm;
    public readonly bO.tbx yc;
    private static bO pZ;

    public bO(lC _param1, a6 _param2, string _param3)
    {
      Jnb.vbPcO4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.yc = this.GO(_param1, _param2, _param3);
      this.sm = _param3;
    }

    public bool vo() => this.yc == (bO.tbx) 2;

    public bool fl(out byte[] _param1)
    {
      _param1 = (byte[]) null;
      if (this.vo())
        goto label_5;
      else
        goto label_3;
label_2:
      bool flag;
      return flag;
label_3:
      flag = false;
      int num = 0;
      if (!bO.xC())
        goto label_4;
label_1:
      switch (num)
      {
        default:
          goto label_2;
      }
label_4:
      num = 0;
      goto label_1;
label_5:
      BinaryReader binaryReader = new BinaryReader((Stream) bO.b3((object) this.sm, FileMode.Open, FileAccess.Read));
      try
      {
        _param1 = (byte[]) bO.CE((object) binaryReader, (int) binaryReader.BaseStream.Length);
        flag = true;
        goto label_2;
      }
      finally
      {
        if (binaryReader != null)
          bO.y7((object) binaryReader);
      }
    }

    public bool mb(out string _param1)
    {
      _param1 = (string) null;
      Encoding encoding = this.PC();
      int num1 = 1;
      if (bO.VQ() == null)
        goto label_2;
label_1:
      int num2;
      num1 = num2;
label_2:
      StreamReader streamReader1;
      while (true)
      {
        switch (num1)
        {
          case 1:
            if (encoding != null)
            {
              if (this.yc != (bO.tbx) 5)
              {
                streamReader1 = new StreamReader(this.sm, encoding);
                if (bO.VQ() == null)
                {
                  num1 = 0;
                  continue;
                }
                goto label_1;
              }
              else
                goto label_30;
            }
            else
              goto label_3;
          case 2:
            goto label_28;
          default:
            goto label_17;
        }
      }
label_3:
      bool flag1;
      if (this.yc != (bO.tbx) 2)
      {
        using (StreamReader streamReader2 = new StreamReader(this.sm, true))
        {
          _param1 = (string) bO.y6((object) streamReader2);
          flag1 = true;
          goto label_28;
        }
      }
      else
      {
        flag1 = false;
        goto label_28;
      }
label_17:
      try
      {
        _param1 = (string) bO.y6((object) streamReader1);
        flag1 = true;
      }
      finally
      {
        streamReader1?.Dispose();
      }
label_28:
      return flag1;
label_30:
      using (BinaryReader binaryReader = new BinaryReader((Stream) File.Open(this.sm, FileMode.Open, FileAccess.Read)))
      {
        byte[] numArray = binaryReader.ReadBytes((int) binaryReader.BaseStream.Length);
        StringBuilder stringBuilder = new StringBuilder();
        int index = 0;
        while (true)
        {
          bool flag2 = index < numArray.Length;
          int num3 = 0;
          if (bO.VQ() == null)
            goto label_11;
label_7:
          while (true)
          {
            switch (num3)
            {
              case 1:
                goto label_28;
              default:
                if (!flag2)
                {
                  _param1 = stringBuilder.ToString();
                  flag1 = true;
                  int num4;
                  num3 = bO.xC() ? 1 : num4;
                  continue;
                }
                goto label_12;
            }
          }
label_12:
          char ch = (char) ((uint) numArray[index] << 8 | (uint) numArray[index + 1]);
          stringBuilder.Append(ch);
          index += 2;
          continue;
label_11:
          num3 = 0;
          goto label_7;
        }
      }
    }

    private Encoding PC()
    {
      Encoding encoding;
      switch (this.yc)
      {
        case (bO.tbx) 1:
          encoding = (Encoding) new ASCIIEncoding();
          break;
        case (bO.tbx) 2:
        case (bO.tbx) 9:
          encoding = (Encoding) null;
          break;
        case (bO.tbx) 3:
label_7:
          encoding = (Encoding) new UTF8Encoding();
          break;
        case (bO.tbx) 4:
        case (bO.tbx) 5:
        case (bO.tbx) 6:
          encoding = (Encoding) new UnicodeEncoding();
          break;
        case (bO.tbx) 7:
        case (bO.tbx) 8:
          encoding = (Encoding) new UTF32Encoding();
          int num1 = 1;
          if (bO.VQ() != null)
            goto label_4;
label_1:
          switch (num1)
          {
            case 2:
              goto label_7;
            default:
              goto label_8;
          }
label_4:
          int num2;
          num1 = num2;
          goto label_1;
        default:
          Debug.Assert(false);
          encoding = (Encoding) null;
          break;
      }
label_8:
      return encoding;
    }

    private static bO.tbx te(string _param0)
    {
      using (BinaryReader binaryReader = new BinaryReader((Stream) File.Open(_param0, FileMode.Open, FileAccess.Read)))
      {
        byte[] numArray = binaryReader.ReadBytes(4);
        if (numArray.Length == 0)
          return (bO.tbx) 0;
label_10:
        if (numArray.Length != 1 && numArray.Length != 3)
          goto label_12;
        else
          goto label_4;
label_2:
        bool flag1;
        bool flag2;
        bool flag3;
        int num1;
        while (true)
        {
          switch (num1)
          {
            case 1:
              if (flag2)
              {
                int num2;
                num1 = bO.xC() ? 0 : num2;
                continue;
              }
              flag1 = numArray[0] == (byte) 0 && numArray[1] > (byte) 0;
              num1 = 7;
              continue;
            case 2:
              goto label_12;
            case 3:
              goto label_14;
            case 4:
              goto label_9;
            case 5:
              goto label_10;
            case 6:
              if (!flag3)
              {
                flag2 = numArray[0] == (byte) 0 && numArray[1] == (byte) 0;
                num1 = bO.xC() ? 1 : 0;
                continue;
              }
              goto label_5;
            case 7:
              goto label_3;
            case 8:
              goto label_21;
            default:
              goto label_17;
          }
        }
label_3:
        if (flag1)
          return (bO.tbx) 5;
        goto label_21;
label_5:
        return (bO.tbx) 5;
label_9:
        return (bO.tbx) 3;
label_14:
        return (bO.tbx) 3;
label_17:
        return (bO.tbx) 8;
label_21:
        if (numArray[0] != (byte) 0 && numArray[1] == (byte) 0)
          return (bO.tbx) 6;
        goto label_9;
label_4:
        num1 = bO.VQ() != null ? 2 : 3;
        goto label_2;
label_12:
        if (numArray.Length == 2 && numArray[0] > (byte) 0)
          return (bO.tbx) 6;
        flag3 = numArray.Length == 2 && numArray[0] == (byte) 0;
        num1 = 6;
        goto label_2;
      }
    }

    private bO.tbx GO(lC _param1, a6 _param2, string _param3)
    {
      lC lC = _param1;
      int num1 = 0;
      if (!bO.xC())
        goto label_7;
label_1:
      bO.tbx tbx;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 2:
            goto label_6;
          case 3:
label_4:
            tbx = (bO.tbx) 3;
            int num2;
            num1 = bO.xC() ? 1 : num2;
            continue;
          default:
            switch (lC)
            {
              case (lC) 0:
                goto label_2;
              case (lC) 1:
                goto label_4;
              case (lC) 2:
                goto label_5;
              case (lC) 3:
                tbx = (bO.tbx) 1;
                num1 = 2;
                continue;
              default:
                goto label_3;
            }
        }
      }
label_2:
      tbx = _param2 != (a6) 2 ? (_param2 != (a6) 1 ? (bO.tbx) 4 : (bO.tbx) 9) : bO.te(_param3);
      goto label_6;
label_3:
      tbx = (bO.tbx) 0;
      goto label_6;
label_5:
      tbx = (bO.tbx) 2;
label_6:
      return tbx;
label_7:
      num1 = 0;
      goto label_1;
    }

    internal static bool xC() => bO.pZ == null;

    internal static bO VQ() => bO.pZ;

    internal static object b3([In] object obj0, [In] FileMode obj1, [In] FileAccess obj2) => (object) File.Open((string) obj0, obj1, obj2);

    internal static object CE([In] object obj0, [In] int obj1) => (object) ((BinaryReader) obj0).ReadBytes(obj1);

    internal static void y7([In] object obj0) => ((IDisposable) obj0).Dispose();

    internal static object y6([In] object obj0) => (object) ((TextReader) obj0).ReadToEnd();

    public enum tbx
    {
    }
  }
}
