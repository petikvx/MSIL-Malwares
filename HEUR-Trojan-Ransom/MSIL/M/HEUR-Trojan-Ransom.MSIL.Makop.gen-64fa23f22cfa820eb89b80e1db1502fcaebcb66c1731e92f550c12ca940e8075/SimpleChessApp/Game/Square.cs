// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: جY, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4509E19C-3738-48CD-AFB9-B77E11D0C93B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-64fa23f22cfa820eb89b80e1db1502fcaebcb66c1731e92f550c12ca940e8075.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 770446208;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 573062735)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              int num3 = eventHandler1 == comparand ? -237749386 : (num3 = -1974530752);
              num1 = num3 ^ (int) num2 * 781182656;
              continue;
            case 2:
              goto label_3;
            case 3:
              comparand = eventHandler1;
              num1 = 2052011327;
              continue;
            case 4:
              eventHandler2 = (EventHandler) Square.\u200F‬⁪⁫‎‮⁭⁭‎‭⁭‏⁮‏‌​‏⁫‮‍‌‎⁯‭​​‍‍​⁭⁯‬⁬‮‍​‏‏​⁬‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * -728138794 ^ -963246770;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 1854345901;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 396617223)) % 5U)
          {
            case 0:
              EventHandler eventHandler2 = (EventHandler) Square.\u200B‮‍‏⁮‪‍‏‬‎⁭‍⁫‪‪⁯⁪‍⁯‏‭​⁬‫‫⁬‫​‌​⁫‏⁬‎‬‌⁪‬‭⁬‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * 745800908 ^ 1135443175;
              continue;
            case 1:
              comparand = eventHandler1;
              num1 = 1282314865;
              continue;
            case 2:
              int num3 = eventHandler1 == comparand ? 745522623 : (num3 = 549260461);
              num1 = num3 ^ (int) num2 * -2043844928;
              continue;
            case 3:
              goto label_3;
            case 4:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName
    {
      get
      {
label_1:
        int num1 = 1231376151;
        string specialName;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 542903605)) % 3U)
          {
            case 1:
              specialName = Square.\u206B‭⁬‪‌‏⁭‏⁫‭⁫⁯⁬⁬⁮⁫‭⁫‌‍​⁪‌⁫⁪⁮⁭‭‪‫⁯‍⁫‍‌⁬⁫‌⁬‭‮(this.CurrentSquare, \u003CModule\u003E.\u202A⁭‭‮⁫‌⁮‭⁪⁮‭‍⁬‮‪⁯‎‏‍⁪⁬⁭⁬⁮‪‬‍‏⁪⁯‏‫‭‍⁫‎⁫‭⁯⁬‮<string>(771233580U), Square.\u206A⁮​‬​‌‫‫‪⁭‌⁭‭‮‎‍‭⁮​‌⁭‪‮‫‮​‮⁪⁬⁬‮⁫‫‪⁯‪‪⁯‏‬‮((object) this.Piece));
              num1 = (int) num2 * -114951576 ^ 249022554;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
        char ch = Square.\u206C⁬‫‫‬⁫‭‎⁮‭‍‍⁭⁭⁭‮​​‪⁪‪⁮‌⁭​‬​⁪⁭‎⁬‮‬⁭⁫⁯⁯‭⁪⁬‮(\u003CModule\u003E.\u202A⁭‭‮⁫‌⁮‭⁪⁮‭‍⁬‮‪⁯‎‏‍⁪⁬⁭⁬⁮‪‬‍‏⁪⁯‏‫‭‍⁫‎⁫‭⁯⁬‮<string>(1718088065U), this.File);
label_1:
        int num1 = -271220845;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1327345508)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 1082107667 ^ 572375691;
              continue;
            case 3:
              currentSquare = Square.\u200D‮‎​⁭⁭⁬‎‬‬‏‫⁭‪​‍⁭‭‫‭⁯⁮‫⁬‬⁬‮‬‮‮⁪‭‎‫⁪‎⁮⁪​⁪‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * -1633696683 ^ -1786773303;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
label_1:
      int num1 = 211474158;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 131956633)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 782690945 ^ 867679960;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * 219767003 ^ 1286250072;
              continue;
            }
            goto label_5;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
      this.Board = Board;
      this.File = file;
      this.Rank = rank;
      this.Name = Square.\u200D‮‎​⁭⁭⁬‎‬‬‏‫⁭‪​‍⁭‭‫‭⁯⁮‫⁬‬⁬‮‬‮‮⁪‭‎‫⁪‎⁮⁪​⁪‮(Square.\u206C⁬‫‫‬⁫‭‎⁮‭‍‍⁭⁭⁭‮​​‪⁪‪⁮‌⁭​‬​⁪⁭‎⁬‮‬⁭⁫⁯⁯‭⁪⁬‮(\u003CModule\u003E.\u202A⁫⁫⁪‎⁫‭⁬‍⁭‫​‍‎‍⁯​​‎‍‎‬⁫​‏‫‮⁬⁪‎‪⁭‬⁪‫⁮‪⁭‪‫‮<string>(2484575961U), file).ToString(), (this.Rank + 1).ToString());
    }

    public Square()
    {
      this.InitializeComponent();
      this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
    }

    private void SwitchPlayer()
    {
      bool flag = !this.Board.DisableTurns;
label_1:
      int num1 = -1909846948;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -613022394)) % 9U)
        {
          case 0:
            num1 = -275243789;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1552940197 ^ -970262343;
            continue;
          case 4:
            num1 = (int) num2 * 1905015911 ^ -1397273900;
            continue;
          case 5:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * 1159959 ^ -1206175746;
            continue;
          case 6:
            int num3 = this.Board.WhosPlaying != PieceColor.White ? -1082738945 : (num3 = -1726963482);
            num1 = num3 ^ (int) num2 * -97388924;
            continue;
          case 7:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -1116340963;
            continue;
          case 8:
            int num4 = flag ? 728850687 : (num4 = 2060708395);
            num1 = num4 ^ (int) num2 * 1425697820;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private bool getSide(Square x)
    {
label_1:
      int num1 = -298433694;
      bool side;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1858091081)) % 4U)
        {
          case 0:
            num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
            break;
          case 1:
            if (!this.Board.DisableTurns)
            {
              num1 = (int) num2 * 180586936 ^ 653411395;
              continue;
            }
            num3 = 1;
            break;
          case 2:
            goto label_1;
          default:
            goto label_8;
        }
        side = num3 != 0;
        num1 = -1009468060;
      }
label_8:
      return side;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
      bool flag1 = Square.\u206E⁯‫‌‬‬⁫‪‪‍⁭⁭⁯⁮‫⁫‎⁮⁫‍​‮⁮⁭⁭⁯‍‭⁫​‬‭⁯‌⁪‌‬⁭‬⁪‮(e) == MouseButtons.Left;
label_1:
      int num1 = 1804025052;
      while (true)
      {
        uint num2;
        bool disableTurns;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        List<PossibleMoves> move;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ 1591467867)) % 81U)
        {
          case 0:
            num1 = (int) num2 * 536410591 ^ 313627012;
            continue;
          case 1:
            int num5 = flag6 ? -1992507763 : (num5 = -359213442);
            num1 = num5 ^ (int) num2 * 1563937067;
            continue;
          case 2:
            if (to.Piece == null)
            {
              num3 = 0;
              break;
            }
            num1 = 504542627;
            continue;
          case 3:
            this.msg = \u003CModule\u003E.\u202B​⁯‎⁭‍⁮‎‫⁮⁫⁯⁭‪⁬‮‎⁬⁬‪⁯‬⁮‌⁭‏‪‭⁪‪⁮⁭‍‍‮‫⁬‎⁯‫‮<string>(536190895U);
            num1 = (int) num2 * -248702371 ^ 1687041261;
            continue;
          case 4:
            to.HighLight();
            num1 = (int) num2 * 836614274 ^ 1620540237;
            continue;
          case 5:
            this.Board.From = to;
            num1 = (int) num2 * 764541943 ^ 242758921;
            continue;
          case 6:
            num1 = 461148762;
            continue;
          case 7:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -247872572 ^ 1529729800;
            continue;
          case 8:
            flag8 = to.Piece == null & flag3;
            num1 = (int) num2 * 1251377444 ^ -1160939407;
            continue;
          case 9:
            flag7 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * 1783125484 ^ -1969188466;
            continue;
          case 10:
            num1 = (int) num2 * 1743944358 ^ -1256483740;
            continue;
          case 11:
            to.HighLight();
            this.msg = \u003CModule\u003E.\u206E‮‪​‍‪‏⁮⁭⁯‪⁮​⁪‎‌‍‭‪‫‏‪‌⁬⁫⁮⁪⁪​⁯‭‫‫​‪‬‎‮⁪‏‮<string>(1498233583U);
            num1 = (int) num2 * -2014619375 ^ 727080349;
            continue;
          case 12:
            num1 = (int) num2 * 1991315063 ^ -1225984196;
            continue;
          case 13:
            num1 = (int) num2 * 1595272629 ^ -1129163681;
            continue;
          case 14:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 2118988800 ^ -655778482;
            continue;
          case 15:
            num1 = 152149922;
            continue;
          case 16:
            flag4 = this.Board.From.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * -646028066 ^ 1430929601;
            continue;
          case 17:
            this.msg = \u003CModule\u003E.\u202A⁫⁫⁪‎⁫‭⁬‍⁭‫​‍‎‍⁯​​‎‍‎‬⁫​‏‫‮⁬⁪‎‪⁭‬⁪‫⁮‪⁭‪‫‮<string>(1282932257U);
            num1 = (int) num2 * 65779294 ^ -1243473979;
            continue;
          case 18:
            num1 = (int) num2 * -1442008486 ^ -1519495738;
            continue;
          case 19:
            num1 = (int) num2 * 1802825868 ^ 1018897908;
            continue;
          case 20:
            num1 = (int) num2 * -2052654056 ^ 501188443;
            continue;
          case 21:
            this.msg = \u003CModule\u003E.\u202C‫​‏⁭‫‪‍⁭‏⁫​⁪⁪⁭‪⁫⁬‌⁯⁪‏‍‭​⁯⁫⁫⁭‮⁬‎‌⁬‬‬⁭⁯⁭⁫‮<string>(2113074240U);
            num1 = (int) num2 * -1117165117 ^ -905858116;
            continue;
          case 22:
            num1 = 509519948;
            continue;
          case 23:
            num1 = (int) num2 * -691290435 ^ -440480882;
            continue;
          case 24:
            int num6;
            num1 = num6 = !flag3 ? 1180663261 : (num6 = 1918896619);
            continue;
          case 25:
            int num7 = flag8 ? 1122054360 : (num7 = 53686196);
            num1 = num7 ^ (int) num2 * -602719590;
            continue;
          case 26:
            num1 = (int) num2 * -1026783609 ^ 159395993;
            continue;
          case 27:
            flag5 = this.Board.From.Piece.Color == to.Piece.Color;
            num1 = 844286157;
            continue;
          case 28:
            num3 = this.getSide(to) ? 1 : 0;
            break;
          case 29:
            num1 = (int) num2 * 1841608060 ^ -837570426;
            continue;
          case 30:
            int num8 = this.Board.lights.MoveList[this.Board.From.Piece.Id].Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? 559293145 : (num8 = 795014440);
            num1 = num8 ^ (int) num2 * 1222478949;
            continue;
          case 31:
            num1 = (int) num2 * -1404372347 ^ -798500721;
            continue;
          case 32:
            num1 = (int) num2 * -834508864 ^ -1199742140;
            continue;
          case 33:
            num1 = (int) num2 * -62561661 ^ 408900644;
            continue;
          case 34:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1398246035 ^ 925522860;
            continue;
          case 35:
            int num9 = flag2 ? -1004695982 : (num9 = -788217534);
            num1 = num9 ^ (int) num2 * 1129225235;
            continue;
          case 36:
            num1 = (int) num2 * 1504785695 ^ 235763764;
            continue;
          case 37:
            num1 = (int) num2 * -1839368607 ^ -557516345;
            continue;
          case 38:
            int num10 = !flag9 ? -934188132 : (num10 = -1039101740);
            num1 = num10 ^ (int) num2 * 425892549;
            continue;
          case 39:
            num1 = (int) num2 * 1659399948 ^ 778705867;
            continue;
          case 40:
            num1 = 611008587;
            continue;
          case 41:
            num1 = (int) num2 * 623647207 ^ -2098329813;
            continue;
          case 42:
            num1 = (int) num2 * -1725548785 ^ -1924767309;
            continue;
          case 43:
            int num11 = disableTurns ? -628373465 : (num11 = -621698684);
            num1 = num11 ^ (int) num2 * -2030593152;
            continue;
          case 44:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = (int) num2 * -1807660896 ^ 2123518277;
            continue;
          case 45:
            this.Board.From = to;
            num1 = (int) num2 * -448772375 ^ 1084845280;
            continue;
          case 46:
            disableTurns = this.Board.DisableTurns;
            num1 = 1492231643;
            continue;
          case 47:
            flag9 = to.Piece.Id == this.Board.From.Piece.Id;
            num1 = (int) num2 * -540912435 ^ 352600912;
            continue;
          case 48:
            int num12 = !flag1 ? 2007586014 : (num12 = 1639127170);
            num1 = num12 ^ (int) num2 * 1050342011;
            continue;
          case 49:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -165688112 ^ -1018615934;
            continue;
          case 50:
            int num13;
            num1 = num13 = this.getSide(this.Board.From) ? 110336472 : (num13 = 1708396830);
            continue;
          case 51:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u202A⁫⁫⁪‎⁫‭⁬‍⁭‫​‍‎‍⁯​​‎‍‎‬⁫​‏‫‮⁬⁪‎‪⁭‬⁪‫⁮‪⁭‪‫‮<string>(2502403032U);
            num1 = (int) num2 * -980796471 ^ 179545133;
            continue;
          case 52:
            num1 = 1708396830;
            continue;
          case 53:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 541488275 ^ 214317092;
            continue;
          case 54:
            num1 = (int) num2 * -1838367271 ^ 1292928980;
            continue;
          case 55:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1442784228 ^ 1170714124;
            continue;
          case 56:
            this.msg = \u003CModule\u003E.\u202A⁫⁫⁪‎⁫‭⁬‍⁭‫​‍‎‍⁯​​‎‍‎‬⁫​‏‫‮⁬⁪‎‪⁭‬⁪‫⁮‪⁭‪‫‮<string>(2502403032U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -129640799 ^ -408266217;
            continue;
          case 57:
            int num14 = flag4 ? 1893694669 : (num14 = 986270614);
            num1 = num14 ^ (int) num2 * -2034253349;
            continue;
          case 58:
            int num15 = flag5 ? 681024972 : (num15 = 1617139434);
            num1 = num15 ^ (int) num2 * -1841403271;
            continue;
          case 59:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1117665392 ^ 1764843969;
            continue;
          case 60:
            this.Board.From = (Square) null;
            num1 = (int) num2 * -694322625 ^ 358437615;
            continue;
          case 61:
            to = this;
            if (this.Board.From == null)
            {
              num4 = 0;
              goto label_17;
            }
            else
            {
              num1 = (int) num2 * 1276955321 ^ 610034795;
              continue;
            }
          case 62:
            move = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            this.msg = Square.\u202E‪‭⁫‭‮‪‬⁬‬‭⁯‍⁮‎⁬‮‭⁫⁫‌⁯‌‭‬⁫‍⁮‌⁯‏⁫⁫​‏⁭⁮⁬‪‭‮(\u003CModule\u003E.\u202A⁭‭‮⁫‌⁮‭⁪⁮‭‍⁬‮‪⁯‎‏‍⁪⁬⁭⁬⁮‪‬‍‏⁪⁯‏‫‭‍⁫‎⁫‭⁯⁬‮<string>(1166969958U), (object) move.Count);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 950639568 ^ 611229016;
            continue;
          case 63:
            num1 = 1950726915;
            continue;
          case 64:
            to.MovePawn(this.Board.From);
            num1 = 1179020951;
            continue;
          case 65:
            num1 = (int) num2 * 1777953367 ^ 285760531;
            continue;
          case 66:
            goto label_3;
          case 67:
            flag6 = move.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * 382307373 ^ -1724129875;
            continue;
          case 68:
            this.hideMoves(this.Board.From);
            to.HighLight();
            num1 = (int) num2 * -1770330926 ^ -77980598;
            continue;
          case 69:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1248027761 ^ -839780341;
            continue;
          case 70:
            num1 = (int) num2 * -253404667 ^ 1908534472;
            continue;
          case 71:
            int num16 = !flag7 ? -653954817 : (num16 = -1223673549);
            num1 = num16 ^ (int) num2 * 12209631;
            continue;
          case 72:
            num4 = this.Board.From.Piece != null ? 1 : 0;
            goto label_17;
          case 73:
            this.msg = \u003CModule\u003E.\u206E‮‪​‍‪‏⁮⁭⁯‪⁮​⁪‎‌‍‭‪‫‏‪‌⁬⁫⁮⁪⁪​⁯‭‫‫​‪‬‎‮⁪‏‮<string>(2850734659U);
            num1 = (int) num2 * 1516829204 ^ 1794494747;
            continue;
          case 74:
            to.HighLight();
            num1 = (int) num2 * 71340311 ^ 2066589381;
            continue;
          case 75:
            this.msg = \u003CModule\u003E.\u202A⁭‭‮⁫‌⁮‭⁪⁮‭‍⁬‮‪⁯‎‏‍⁪⁬⁭⁬⁮‪‬‍‏⁪⁯‏‫‭‍⁫‎⁫‭⁯⁬‮<string>(4208772057U);
            num1 = 509519948;
            continue;
          case 76:
            num1 = (int) num2 * -1086126705 ^ -1591581165;
            continue;
          case 77:
            num1 = (int) num2 * 1357064276 ^ -1351334073;
            continue;
          case 78:
            goto label_1;
          case 79:
            Square.action(this.msg);
            num1 = 231182461;
            continue;
          case 80:
            num1 = (int) num2 * 981746726 ^ -622234580;
            continue;
          default:
            goto label_89;
        }
        flag2 = num3 != 0;
        num1 = 186315846;
        continue;
label_17:
        flag3 = num4 != 0;
        num1 = 1367134935;
      }
label_3:
      return;
label_89:;
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = -53896470;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1151083617)) % 6U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Board.From.ClearHighLight();
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * -308603258 ^ 1269733751;
            continue;
          case 2:
            goto label_1;
          case 3:
            int num3 = this.Board.From == null ? -906957559 : (num3 = -873952394);
            num1 = num3 ^ (int) num2 * 1433844272;
            continue;
          case 4:
            num1 = (int) num2 * -1855227181 ^ 942613527;
            continue;
          case 5:
            num1 = (int) num2 * 2025196317 ^ 616944281;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    private void CaptPawn(Square from)
    {
label_1:
      int num1 = 393221556;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1538451383)) % 28U)
        {
          case 0:
            this.handleWhiteCastling();
            num1 = (int) num2 * -847680170 ^ 373773510;
            continue;
          case 1:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = 645560439;
            continue;
          case 3:
            num1 = (int) num2 * 1633456258 ^ 320880907;
            continue;
          case 4:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_25;
          case 5:
            flag2 = true;
            num1 = (int) num2 * -778860461 ^ -339769295;
            continue;
          case 6:
            int num5;
            num1 = num5 = this.Piece.Color == PieceColor.Black ? 39013553 : (num5 = 1006949751);
            continue;
          case 7:
            int num6 = this.Piece.Color != PieceColor.White ? -825328307 : (num6 = -1728337710);
            num1 = num6 ^ (int) num2 * -1354961599;
            continue;
          case 8:
            num1 = (int) num2 * -142523329 ^ 1495101879;
            continue;
          case 9:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * -1422279196 ^ -989625720;
            continue;
          case 10:
            num1 = (int) num2 * -1713953203 ^ 1971176149;
            continue;
          case 11:
            goto label_1;
          case 12:
            from.Piece = (ChessPiece) null;
            flag3 = flag2;
            num1 = 1236700132;
            continue;
          case 13:
            flag2 = true;
            num1 = (int) num2 * 2143440010 ^ -1849267735;
            continue;
          case 14:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * -515996387 ^ -909982259;
            continue;
          case 15:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = 991617803;
            continue;
          case 16:
            int num7;
            num1 = num7 = from.Piece.Color == PieceColor.White ? 19495265 : (num7 = 253742432);
            continue;
          case 17:
            int num8 = flag1 ? -105830337 : (num8 = -72351933);
            num1 = num8 ^ (int) num2 * -984500123;
            continue;
          case 18:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            this.handleBlackCastling();
            num1 = (int) num2 * 1382528941 ^ -1927593512;
            continue;
          case 19:
            num1 = (int) num2 * -680244963 ^ -763196278;
            continue;
          case 20:
            this.Piece = from.Piece;
            flag2 = false;
            int num9;
            num1 = num9 = this.Piece.Color == PieceColor.White ? 1015564960 : (num9 = 193947677);
            continue;
          case 21:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 602976449 ^ 642573890;
              continue;
            }
            num3 = 0;
            goto label_25;
          case 22:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1193754806 ^ -1282074057;
            continue;
          case 23:
            if (flag3)
            {
              num1 = (int) num2 * 1790959598 ^ -1021052546;
              continue;
            }
            goto label_53;
          case 24:
            num1 = 193947677;
            continue;
          case 25:
            num1 = 1006949751;
            continue;
          case 26:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 1027432499 ^ 1981431439;
            continue;
          case 27:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          default:
            goto label_36;
        }
        flag1 = num4 != 0;
        num1 = 501191014;
        continue;
label_25:
        int num10;
        num1 = num10 = num3 != 0 ? 1334832386 : (num10 = 1643767931);
      }
label_36:
      Promotion promotion = new Promotion(Square.\u206C‏‬‫‪‌⁫⁮‪⁯‮​⁪⁫⁯‎⁯‏‫‏⁯‭⁫‏‍⁬⁬‮‫‍⁫⁬⁪‪⁭⁯‌⁮‮‬‮());
      try
      {
label_38:
        int num11 = 1248307629;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 1538451383)) % 4U)
          {
            case 1:
              num11 = (int) num12 * -724735070 ^ -55668955;
              continue;
            case 2:
              int num13 = (int) Square.\u202E‏‬⁯⁮​‪⁪‮‫‪‍‫⁭‎‮‪‍⁫‫‭‍⁯‏⁯‫‌‫⁬‏⁪⁯‪⁬‮‫‎⁮⁪⁮‮((Form) promotion);
              this.Kind = promotion.Piece;
              num11 = (int) num12 * 1769100454 ^ -310030130;
              continue;
            case 3:
              goto label_38;
            default:
              goto label_49;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_43:
          int num14 = 72605230;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 1538451383)) % 4U)
            {
              case 0:
                num14 = (int) num15 * -397138196 ^ -294988988;
                continue;
              case 1:
                Square.\u202D⁫⁯⁫⁪⁫‭‍‭⁮‏​‏‭‌‌‎⁮‪‎‮‍⁮‫⁫‭‫⁪‎‏‬⁫​‍⁪‭‪⁬‏‎‮((IDisposable) promotion);
                num14 = (int) num15 * -190977185 ^ 1662101148;
                continue;
              case 2:
                goto label_43;
              default:
                goto label_48;
            }
          }
        }
label_48:;
      }
label_49:
label_50:
      int num16 = 1062588897;
label_51:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ 1538451383)) % 5U)
        {
          case 0:
            PlaySound.Play();
            this.SwitchPlayer();
            num16 = (int) num17 * -1486444340 ^ -1430885090;
            continue;
          case 1:
            goto label_53;
          case 2:
            goto label_50;
          case 3:
            num16 = (int) num17 * -389424532 ^ 303348050;
            continue;
          case 4:
            goto label_52;
          default:
            goto label_45;
        }
      }
label_52:
      return;
label_45:
      return;
label_53:
      this.Board.lights.FindAllMoves();
      num16 = 1021215593;
      goto label_51;
    }

    private void MovePawn(Square from)
    {
label_1:
      int num1 = 589769837;
      ChessPiece chessPiece;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ 965688485)) % 30U)
        {
          case 0:
            num1 = 683786382;
            continue;
          case 1:
            int num6 = !flag6 ? -1655960505 : (num6 = -135947992);
            num1 = num6 ^ (int) num2 * -398673839;
            continue;
          case 2:
            num1 = (int) num2 * -1110624782 ^ 1293197753;
            continue;
          case 3:
            this.Piece = from.Piece;
            num1 = (int) num2 * 2074558119 ^ 465682479;
            continue;
          case 4:
            num3 = this.Rank == 4 ? 1 : 0;
            break;
          case 5:
            num1 = 1575102239;
            continue;
          case 6:
            from.Piece = (ChessPiece) null;
            num1 = 1524685528;
            continue;
          case 7:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1797340010 ^ -358691067;
            continue;
          case 8:
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * 1314915841 ^ 1701672608;
            continue;
          case 9:
            int num7 = flag2 ? -798947756 : (num7 = -548186724);
            num1 = num7 ^ (int) num2 * -2026463489;
            continue;
          case 10:
            goto label_1;
          case 11:
            if (this.Rank == 3)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * -1513559502 ^ -1177417231;
            continue;
          case 12:
            flag3 = false;
            flag1 = this.Piece.Color == PieceColor.White;
            int num8;
            num1 = num8 = !flag1 ? 651231499 : (num8 = 264419616);
            continue;
          case 13:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_39;
          case 14:
            chessPiece = this.handleBlackCastling();
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 1982852221 ^ 414744866;
              continue;
            }
            num4 = 0;
            goto label_39;
          case 15:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -24474959 ^ 443308380;
            continue;
          case 16:
            num5 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_30;
          case 17:
            this.Board.lastPassantPawn = (ChessPiece) null;
            flag5 = this.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * 97749555 ^ -899182060;
            continue;
          case 18:
            int num9 = !flag5 ? -996979705 : (num9 = -1348869870);
            num1 = num9 ^ (int) num2 * -1785773555;
            continue;
          case 19:
            if (flag4)
            {
              num1 = (int) num2 * -1262345466 ^ -1984921146;
              continue;
            }
            goto label_104;
          case 20:
            chessPiece = (ChessPiece) null;
            num1 = (int) num2 * -1114543187 ^ 925024916;
            continue;
          case 21:
            num1 = 1187452525;
            continue;
          case 22:
            flag3 = true;
            num1 = (int) num2 * -1590800513 ^ 708713018;
            continue;
          case 23:
            num1 = (int) num2 * -279261928 ^ -759682612;
            continue;
          case 24:
            flag3 = true;
            num1 = (int) num2 * -870484783 ^ 1055625204;
            continue;
          case 25:
            flag4 = flag3;
            num1 = (int) num2 * 165765238 ^ -1464397350;
            continue;
          case 26:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * 210960365 ^ 1064867221;
            continue;
          case 27:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -1493536235 ^ 14493670;
              continue;
            }
            num5 = 0;
            goto label_30;
          case 28:
            num1 = 722964397;
            continue;
          default:
            goto label_41;
        }
        flag2 = num3 != 0;
        num1 = 1341302692;
        continue;
label_30:
        int num10;
        num1 = num10 = num5 != 0 ? 1838779535 : (num10 = 1710314942);
        continue;
label_39:
        flag6 = num4 != 0;
        num1 = 1231621920;
      }
label_41:
      Promotion promotion = new Promotion(Square.\u206C‏‬‫‪‌⁫⁮‪⁯‮​⁪⁫⁯‎⁯‏‫‏⁯‭⁫‏‍⁬⁬‮‫‍⁫⁬⁪‪⁭⁯‌⁮‮‬‮());
      try
      {
label_43:
        int num11 = 285990681;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 965688485)) % 5U)
          {
            case 1:
              num11 = (int) num12 * 2057036516 ^ -1958151709;
              continue;
            case 2:
              int num13 = (int) Square.\u202E‏‬⁯⁮​‪⁪‮‫‪‍‫⁭‎‮‪‍⁫‫‭‍⁯‏⁯‫‌‫⁬‏⁪⁯‪⁬‮‫‎⁮⁪⁮‮((Form) promotion);
              this.Kind = promotion.Piece;
              num11 = (int) num12 * -978291366 ^ 335188857;
              continue;
            case 3:
              num11 = (int) num12 * -991116393 ^ -1654046931;
              continue;
            case 4:
              goto label_43;
            default:
              goto label_55;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_49:
          int num14 = 1589428880;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 965688485)) % 4U)
            {
              case 0:
                goto label_49;
              case 1:
                Square.\u202D⁫⁯⁫⁪⁫‭‍‭⁮‏​‏‭‌‌‎⁮‪‎‮‍⁮‫⁫‭‫⁪‎‏‬⁫​‍⁪‭‪⁬‏‎‮((IDisposable) promotion);
                num14 = (int) num15 * -1685540476 ^ 989617778;
                continue;
              case 3:
                num14 = (int) num15 * 1558449023 ^ -164083998;
                continue;
              default:
                goto label_54;
            }
          }
        }
label_54:;
      }
label_55:
label_56:
      int num16 = 1171168120;
label_57:
      bool isOnCheck;
      while (true)
      {
        uint num17;
        Square square1;
        bool flag7;
        int rank;
        bool flag8;
        int file;
        bool flag9;
        bool flag10;
        Square square2;
        switch ((num17 = (uint) (num16 ^ 965688485)) % 50U)
        {
          case 0:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = 99789300;
            continue;
          case 1:
            num16 = (int) num17 * 397997445 ^ 110568437;
            continue;
          case 2:
            from.Piece = this.Piece;
            num16 = (int) num17 * 113929751 ^ 142660502;
            continue;
          case 3:
            this.Board.WhiteCanCastleQueenSide = true;
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * 69592175 ^ -1200779306;
            continue;
          case 4:
            this.Board.lights.FindAllMoves();
            num16 = 52100433;
            continue;
          case 5:
            int num18 = flag9 ? 556371259 : (num18 = 896028829);
            num16 = num18 ^ (int) num17 * 192067617;
            continue;
          case 6:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * 153352672 ^ -1326367480;
            continue;
          case 7:
            num16 = 158515040;
            continue;
          case 8:
            num16 = (int) num17 * -1561089317 ^ 750472805;
            continue;
          case 9:
            num16 = 1952140929;
            continue;
          case 10:
            flag9 = this.Piece.Kind == Pieces.King;
            num16 = (int) num17 * -2048432654 ^ 2010239224;
            continue;
          case 11:
            num16 = 1812220877;
            continue;
          case 12:
            int num19;
            num16 = num19 = chessPiece != null ? 1015306407 : (num19 = 1545787435);
            continue;
          case 13:
            this.SwitchPlayer();
            num16 = (int) num17 * 309611827 ^ 882550542;
            continue;
          case 14:
            int num20 = flag1 ? 1969633569 : (num20 = 1006979164);
            num16 = num20 ^ (int) num17 * -1894285007;
            continue;
          case 15:
            int num21 = isOnCheck ? -796576924 : (num21 = -1769718479);
            num16 = num21 ^ (int) num17 * 348248336;
            continue;
          case 16:
            num16 = (int) num17 * 101086306 ^ 1344116001;
            continue;
          case 17:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * -597961938 ^ -1753125550;
            continue;
          case 18:
            num16 = (int) num17 * -1985534595 ^ -1471328930;
            continue;
          case 19:
            flag8 = true;
            num16 = (int) num17 * -866832178 ^ 1360004993;
            continue;
          case 20:
            num16 = (int) num17 * 658478860 ^ -355794011;
            continue;
          case 21:
            num16 = (int) num17 * 1898606544 ^ 1795184514;
            continue;
          case 22:
            num16 = (int) num17 * 280603088 ^ 316708780;
            continue;
          case 23:
            flag7 = this.Board.lights.KingColorOnCheck == this.Piece.Color;
            num16 = (int) num17 * -877686316 ^ -1808949857;
            continue;
          case 24:
            this.msg = \u003CModule\u003E.\u202A⁭‭‮⁫‌⁮‭⁪⁮‭‍⁬‮‪⁯‎‏‍⁪⁬⁭⁬⁮‪‬‍‏⁪⁯‏‫‭‍⁫‎⁫‭⁯⁬‮<string>(2090354840U);
            num16 = (int) num17 * -620398308 ^ -441776840;
            continue;
          case 25:
            num16 = (int) num17 * -509841347 ^ 1099154308;
            continue;
          case 26:
            file = chessPiece.Current.File;
            num16 = (int) num17 * -230790296 ^ -803650785;
            continue;
          case 27:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = 1672476477;
            continue;
          case 28:
            num16 = (int) num17 * -589442239 ^ -1310778779;
            continue;
          case 29:
            flag10 = flag1;
            num16 = (int) num17 * -1347186460 ^ 2134797491;
            continue;
          case 30:
            int num22 = !flag10 ? -787930180 : (num22 = -1082619504);
            num16 = num22 ^ (int) num17 * 1043310206;
            continue;
          case 31:
            num16 = 1416242463;
            continue;
          case 32:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            this.Board.BlackCanCastleQueenSide = true;
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * 562731927 ^ -1455252131;
            continue;
          case 33:
            if (file == 5)
            {
              square2 = this.Board[7, rank];
              break;
            }
            num16 = (int) num17 * -703255284 ^ 1776816440;
            continue;
          case 34:
            PlaySound.Play();
            num16 = 1378941940;
            continue;
          case 35:
            num16 = (int) num17 * 1274126598 ^ -298276659;
            continue;
          case 36:
            num16 = (int) num17 * 1532246435 ^ 2123914301;
            continue;
          case 37:
            square2 = this.Board[0, rank];
            break;
          case 38:
            rank = chessPiece.Current.Rank;
            num16 = (int) num17 * 1275655342 ^ -1222725760;
            continue;
          case 39:
            goto label_56;
          case 40:
            int num23 = !flag7 ? 464768256 : (num23 = 1386119187);
            num16 = num23 ^ (int) num17 * 1180885115;
            continue;
          case 41:
            num16 = (int) num17 * 270309602 ^ -32197529;
            continue;
          case 42:
            this.msg = \u003CModule\u003E.\u202B​⁯‎⁭‍⁮‎‫⁮⁫⁯⁭‪⁬‮‎⁬⁬‪⁯‬⁮‌⁭‏‪‭⁪‪⁮⁭‍‍‮‫⁬‎⁯‫‮<string>(1770068014U);
            num16 = (int) num17 * -1673665125 ^ -1726559499;
            continue;
          case 43:
            this.Piece = (ChessPiece) null;
            num16 = (int) num17 * -210074632 ^ -1895392255;
            continue;
          case 44:
            num16 = (int) num17 * -1608028369 ^ -1513430423;
            continue;
          case 45:
            int num24;
            num16 = num24 = flag8 ? 1651647539 : (num24 = 1482302058);
            continue;
          case 46:
            goto label_58;
          case 47:
            goto label_104;
          case 48:
            num16 = (int) num17 * -862156807 ^ 416985398;
            continue;
          case 49:
            flag8 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -1913961599 ^ 1209972758;
            continue;
          default:
            goto label_51;
        }
        square1 = square2;
        square1.Piece = chessPiece;
        num16 = 2113907258;
      }
label_58:
      return;
label_51:
      return;
label_104:
      this.Board.lights.IsOnCheck = false;
      this.Board.lights.FindAllMoves();
      isOnCheck = this.Board.lights.IsOnCheck;
      num16 = 1237561006;
      goto label_57;
    }

    private ChessPiece handleBlackCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
      if (this.Board.BlackCanCastleKingSide)
        goto label_31;
label_1:
      int num1 = 1493885735;
label_2:
      ChessPiece chessPiece2;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        Square square1;
        bool flag5;
        Square square2;
        bool flag6;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1099098992)) % 39U)
        {
          case 0:
            square1.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * 1541058720 ^ -1799899865;
            continue;
          case 1:
            int num4 = flag6 ? -1355144892 : (num4 = -940398124);
            num1 = num4 ^ (int) num2 * 654266625;
            continue;
          case 2:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * 423858909 ^ 1407758144;
            continue;
          case 3:
            this.Board.BlackCanCastleKingSide = false;
            num1 = (int) num2 * -1182182484 ^ 410119558;
            continue;
          case 4:
            flag2 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * -1237017523 ^ 1135814324;
            continue;
          case 5:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * 352482004 ^ -515781726;
            continue;
          case 6:
            goto label_30;
          case 7:
            num1 = (int) num2 * -88573964 ^ 579719170;
            continue;
          case 8:
            flag3 = this.Piece.Current.File == 6;
            num1 = 675667009;
            continue;
          case 9:
            num1 = (int) num2 * -852022681 ^ -504454132;
            continue;
          case 10:
            num1 = (int) num2 * -537360722 ^ -468265842;
            continue;
          case 11:
            int num5 = !flag2 ? 1480429356 : (num5 = 1228447573);
            num1 = num5 ^ (int) num2 * -1965057360;
            continue;
          case 12:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 13:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 294141878 ^ -59971189;
            continue;
          case 14:
            chessPiece2 = chessPiece1;
            num1 = 2416589;
            continue;
          case 15:
            square1 = this.Board[3, 7];
            num1 = (int) num2 * 8995201 ^ -451451841;
            continue;
          case 16:
            int num6 = flag5 ? 2116483593 : (num6 = 643410432);
            num1 = num6 ^ (int) num2 * 637839033;
            continue;
          case 17:
            square2 = this.Board[5, 7];
            num1 = (int) num2 * -942802589 ^ 1898928839;
            continue;
          case 18:
            num1 = (int) num2 * 1592261955 ^ 202335980;
            continue;
          case 20:
            int num7 = !flag1 ? 1472617700 : (num7 = 1459877761);
            num1 = num7 ^ (int) num2 * 1501758266;
            continue;
          case 21:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = 1598196783;
            continue;
          case 22:
            num1 = 244234594;
            continue;
          case 23:
            this.Board.BlackCanCastleKingSide = false;
            num1 = 108955367;
            continue;
          case 24:
            int num8 = flag3 ? 493124613 : (num8 = 464300415);
            num1 = num8 ^ (int) num2 * 1214636573;
            continue;
          case 25:
            if (this.Piece.Kind == Pieces.King)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 205304114 ^ -1860215529;
            continue;
          case 26:
            num1 = (int) num2 * 61727097 ^ -959499824;
            continue;
          case 27:
            flag6 = this.Piece.Current.File == 2;
            num1 = 982141222;
            continue;
          case 28:
            num1 = 920400068;
            continue;
          case 29:
            int num9 = flag4 ? -1628128162 : (num9 = -2041995695);
            num1 = num9 ^ (int) num2 * 934982915;
            continue;
          case 30:
            num1 = 1308534324;
            continue;
          case 31:
            num1 = (int) num2 * 1849564677 ^ -383210062;
            continue;
          case 32:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * -1385511682 ^ 654348465;
            continue;
          case 33:
            num1 = (int) num2 * 455906197 ^ 293813209;
            continue;
          case 34:
            goto label_1;
          case 35:
            square2.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * -897302073 ^ -1986233959;
            continue;
          case 36:
            flag5 = Square.\u206E​‎⁭‬‫​‏​‎‬‭‭⁪‏⁭‌‭‭‌‍‮‍‍⁬‌⁪‭​‭‫⁬‎⁯‫‍‍‍‪‬‮(this.Piece.Home.Name, \u003CModule\u003E.\u202C‫​‏⁭‫‪‍⁭‏⁫​⁪⁪⁭‪⁫⁬‌⁯⁪‏‍‭​⁯⁫⁫⁭‮⁬‎‌⁬‬‬⁭⁯⁭⁫‮<string>(828127406U));
            num1 = (int) num2 * 911427881 ^ 638612055;
            continue;
          case 37:
            num1 = (int) num2 * 761422348 ^ 1268020378;
            continue;
          case 38:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * 1840314749 ^ -1904002349;
            continue;
          default:
            goto label_45;
        }
        flag4 = num3 != 0;
        num1 = 706369015;
      }
label_30:
      int num10 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
      goto label_32;
label_45:
      return chessPiece2;
label_31:
      num10 = 1;
label_32:
      flag1 = num10 != 0;
      num1 = 1214734840;
      goto label_2;
    }

    private ChessPiece handleWhiteCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
      if (this.Board.WhiteCanCastleKingSide)
        goto label_35;
label_1:
      int num1 = -1453475433;
label_2:
      bool flag1;
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        bool flag2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -2115310894)) % 32U)
        {
          case 0:
            num1 = (int) num2 * 1198087898 ^ 886522950;
            continue;
          case 1:
            int num4;
            num1 = num4 = this.Piece.Current.File != 6 ? -866587216 : (num4 = -61342976);
            continue;
          case 2:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = -2076955617;
            continue;
          case 3:
            num1 = -507701306;
            continue;
          case 4:
            num1 = (int) num2 * 1438764794 ^ -236202151;
            continue;
          case 5:
            goto label_34;
          case 6:
            this.Board[7, 0].Piece = (ChessPiece) null;
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * -1878039223 ^ -1672485656;
            continue;
          case 7:
            int num5 = flag2 ? 1084024655 : (num5 = 696124569);
            num1 = num5 ^ (int) num2 * -334461993;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * 39544066 ^ -2076262344;
            continue;
          case 10:
            num1 = -980629343;
            continue;
          case 11:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 12:
            num1 = (int) num2 * 946311193 ^ -120381028;
            continue;
          case 13:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * 1061620488 ^ -1594484870;
            continue;
          case 14:
            int num6 = this.Piece.Kind != Pieces.Rook ? -2118665010 : (num6 = -2066568585);
            num1 = num6 ^ (int) num2 * 942405002;
            continue;
          case 15:
            int num7 = flag1 ? 1144568762 : (num7 = 1080614740);
            num1 = num7 ^ (int) num2 * -1271999173;
            continue;
          case 16:
            int num8;
            num1 = num8 = this.Piece.Current.File == 2 ? -1423412632 : (num8 = -1128990541);
            continue;
          case 18:
            square1 = this.Board[5, 0];
            num1 = (int) num2 * -1713522435 ^ -434423251;
            continue;
          case 19:
            chessPiece2 = chessPiece1;
            num1 = -1479838069;
            continue;
          case 20:
            num1 = -358567528;
            continue;
          case 21:
            square1.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * 2093809734 ^ 1580674218;
            continue;
          case 22:
            num1 = (int) num2 * -454190371 ^ 1417896279;
            continue;
          case 23:
            square2 = this.Board[3, 0];
            square2.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * 51813440 ^ -177443836;
            continue;
          case 24:
            int num9 = Square.\u206E​‎⁭‬‫​‏​‎‬‭‭⁪‏⁭‌‭‭‌‍‮‍‍⁬‌⁪‭​‭‫⁬‎⁯‫‍‍‍‪‬‮(this.Piece.Home.Name, \u003CModule\u003E.\u202B​⁯‎⁭‍⁮‎‫⁮⁫⁯⁭‪⁬‮‎⁬⁬‪⁯‬⁮‌⁭‏‪‭⁪‪⁮⁭‍‍‮‫⁬‎⁯‫‮<string>(1401307033U)) ? -300035996 : (num9 = -812882619);
            num1 = num9 ^ (int) num2 * 339878079;
            continue;
          case 25:
            num1 = (int) num2 * -2111692097 ^ 822894596;
            continue;
          case 26:
            num1 = (int) num2 * -761441478 ^ -20393951;
            continue;
          case 27:
            this.Board[0, 0].Piece = (ChessPiece) null;
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * -1442242451 ^ 1309064940;
            continue;
          case 28:
            num1 = (int) num2 * -783236389 ^ -1891624056;
            continue;
          case 29:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 1705674294 ^ 2128536583;
              continue;
            }
            num3 = 1;
            break;
          case 30:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -1230746692 ^ 1254187422;
            continue;
          case 31:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = -962257359;
            continue;
          default:
            goto label_38;
        }
        flag2 = num3 != 0;
        num1 = -1033594827;
      }
label_34:
      int num10 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
      goto label_36;
label_38:
      return chessPiece2;
label_35:
      num10 = 1;
label_36:
      flag1 = num10 != 0;
      num1 = -478421411;
      goto label_2;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = -383036794;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1183783751)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -645080236 ^ 11840700;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            Square.\u206A⁭‭⁪‭​⁯⁮‮⁯⁫‏‌⁬⁭‪⁫‮⁯‮‎⁮‌⁬⁯⁫⁯‫‭⁪‬⁬​‏⁪⁫‏⁪‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * -1585553852 ^ -1054888831;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = 306945597;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 947134678)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1071518500 ^ -977610730;
            continue;
          case 2:
            num3 = this.components != null ? 1 : 0;
            break;
          case 3:
            if (!disposing)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 1314189838 ^ -355542314;
            continue;
          case 4:
            base.Dispose(disposing);
            num1 = 74136809;
            continue;
          case 5:
            Square.\u202D⁫⁯⁫⁪⁫‭‍‭⁮‏​‏‭‌‌‎⁮‪‎‮‍⁮‫⁫‭‫⁪‎‏‬⁫​‍⁪‭‪⁬‏‎‮((IDisposable) this.components);
            num1 = (int) num2 * -35623416 ^ 273388551;
            continue;
          case 6:
            goto label_3;
          case 7:
            num1 = (int) num2 * 2020720088 ^ -1617390800;
            continue;
          default:
            goto label_13;
        }
        int num4;
        num1 = num4 = num3 != 0 ? 939905915 : (num4 = 1962936594);
      }
label_3:
      return;
label_13:;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = 1997119863;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1636422512)) % 10U)
        {
          case 0:
            Square.\u206B‮‭⁭‪⁭‏⁮‪⁮​‮​⁫​⁪‮‌‌‫⁯‌‬⁭​‎‍⁪‭‌‍‭‏⁭‌‬​⁯⁮‫‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -136546057 ^ 1380229655;
            continue;
          case 1:
            Square.\u200C⁭⁫⁮⁮‍‏‮⁮‏​⁮‌‍‏‏‬⁫⁭‍‭‫‬‌⁫⁬⁯⁬‭​⁬⁫‏⁬⁭‭⁫‫‎‮‮((Control) this);
            Square.\u206F‏⁪‮‏⁪‫‭⁮​⁪⁬⁪‬‎‮‫‏‏⁯‪⁮​‏⁯‍‭‬‪⁯⁫‎⁭⁫‏⁮‎‭⁫‎‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -890985369 ^ 2046774210;
            continue;
          case 2:
            Square.\u206A‪​⁯⁬⁪‍‭​‍‎⁪⁬⁬⁮⁯‫⁫‏​⁬‎⁮‫‎⁬‫⁮‮⁫‍⁬⁫‫‫‪⁯⁮‪‮‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 1979924531 ^ 681028967;
            continue;
          case 3:
            this.Name = \u003CModule\u003E.\u202C‫​‏⁭‫‪‍⁭‏⁫​⁪⁪⁭‪⁫⁬‌⁯⁪‏‍‭​⁯⁫⁫⁭‮⁬‎‌⁬‬‬⁭⁯⁭⁫‮<string>(1728362778U);
            num1 = (int) num2 * -1536419587 ^ 1063653719;
            continue;
          case 4:
            Square.\u206C‪​‪‌‫⁪⁭⁭‫⁮⁪⁮‬‪​‮‏⁪⁯‍⁬‏‭‪⁫⁬⁫⁬⁮‪⁮⁫‮‏⁫‬‏⁪‮‮((Control) this, new Padding(0));
            num1 = (int) num2 * 683135032 ^ 1334563405;
            continue;
          case 6:
            goto label_1;
          case 7:
            Square.\u200C‮⁫‬⁭‫‍⁫‏‬‫⁬‎​‏⁪‌⁮‪‬‎⁬⁪​⁪‌‪‎‍⁯⁭‏⁫⁪⁮⁪⁯‪‭‫‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * 813346319 ^ 1469516095;
            continue;
          case 8:
            num1 = (int) num2 * 1483298205 ^ 2097442928;
            continue;
          case 9:
            num1 = (int) num2 * -1812985299 ^ -841358657;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      Square.\u206B‎‬​⁭‫⁭⁬​‫‪‪‭⁫‏‭‎​‪⁫⁯⁪‏‭‍⁮⁫⁫⁬‭⁮⁪⁭​‮⁭⁯‍⁯‮((Control) this, false);
    }

    static Delegate \u200F‬⁪⁫‎‮⁭⁭‎‭⁭‏⁮‏‌​‏⁫‮‍‌‎⁯‭​​‍‍​⁭⁯‬⁬‮‍​‏‏​⁬‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u200B‮‍‏⁮‪‍‏‬‎⁭‍⁫‪‪⁯⁪‍⁯‏‭​⁬‫‫⁬‫​‌​⁫‏⁬‎‬‌⁪‬‭⁬‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u206A⁮​‬​‌‫‫‪⁭‌⁭‭‮‎‍‭⁮​‌⁭‪‮‫‮​‮⁪⁬⁬‮⁫‫‪⁯‪‪⁯‏‬‮([In] object obj0) => obj0.ToString();

    static string \u206B‭⁬‪‌‏⁭‏⁫‭⁫⁯⁬⁬⁮⁫‭⁫‌‍​⁪‌⁫⁪⁮⁭‭‪‫⁯‍⁫‍‌⁬⁫‌⁬‭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u206C⁬‫‫‬⁫‭‎⁮‭‍‍⁭⁭⁭‮​​‪⁪‪⁮‌⁭​‬​⁪⁭‎⁬‮‬⁭⁫⁯⁯‭⁪⁬‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u200D‮‎​⁭⁭⁬‎‬‬‏‫⁭‪​‍⁭‭‫‭⁯⁮‫⁬‬⁬‮‬‮‮⁪‭‎‫⁪‎⁮⁪​⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u206E⁯‫‌‬‬⁫‪‪‍⁭⁭⁯⁮‫⁫‎⁮⁫‍​‮⁮⁭⁭⁯‍‭⁫​‬‭⁯‌⁪‌‬⁭‬⁪‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u202E‪‭⁫‭‮‪‬⁬‬‭⁯‍⁮‎⁬‮‭⁫⁫‌⁯‌‭‬⁫‍⁮‌⁯‏⁫⁫​‏⁭⁮⁬‪‭‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u206C‏‬‫‪‌⁫⁮‪⁯‮​⁪⁫⁯‎⁯‏‫‏⁯‭⁫‏‍⁬⁬‮‫‍⁫⁬⁪‪⁭⁯‌⁮‮‬‮() => Cursor.Position;

    static DialogResult \u202E‏‬⁯⁮​‪⁪‮‫‪‍‫⁭‎‮‪‍⁫‫‭‍⁯‏⁯‫‌‫⁬‏⁪⁯‪⁬‮‫‎⁮⁪⁮‮([In] Form obj0) => obj0.ShowDialog();

    static void \u202D⁫⁯⁫⁪⁫‭‍‭⁮‏​‏‭‌‌‎⁮‪‎‮‍⁮‫⁫‭‫⁪‎‏‬⁫​‍⁪‭‪⁬‏‎‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u206E​‎⁭‬‫​‏​‎‬‭‭⁪‏⁭‌‭‭‌‍‮‍‍⁬‌⁪‭​‭‫⁬‎⁯‫‍‍‍‪‬‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u206A⁭‭⁪‭​⁯⁮‮⁯⁫‏‌⁬⁭‪⁫‮⁯‮‎⁮‌⁬⁯⁫⁯‫‭⁪‬⁬​‏⁪⁫‏⁪‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u200C⁭⁫⁮⁮‍‏‮⁮‏​⁮‌‍‏‏‬⁫⁭‍‭‫‬‌⁫⁬⁯⁬‭​⁬⁫‏⁬⁭‭⁫‫‎‮‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u206F‏⁪‮‏⁪‫‭⁮​⁪⁬⁪‬‎‮‫‏‏⁯‪⁮​‏⁯‍‭‬‪⁯⁫‎⁭⁫‏⁮‎‭⁫‎‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u200C‮⁫‬⁭‫‍⁫‏‬‫⁬‎​‏⁪‌⁮‪‬‎⁬⁪​⁪‌‪‎‍⁯⁭‏⁫⁪⁮⁪⁯‪‭‫‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u206B‮‭⁭‪⁭‏⁮‪⁮​‮​⁫​⁪‮‌‌‫⁯‌‬⁭​‎‍⁪‭‌‍‭‏⁭‌‬​⁯⁮‫‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206C‪​‪‌‫⁪⁭⁭‫⁮⁪⁮‬‪​‮‏⁪⁯‍⁬‏‭‪⁫⁬⁫⁬⁮‪⁮⁫‮‏⁫‬‏⁪‮‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u206A‪​⁯⁬⁪‍‭​‍‎⁪⁬⁬⁮⁯‫⁫‏​⁬‎⁮‫‎⁬‫⁮‮⁫‍⁬⁫‫‫‪⁯⁮‪‮‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206B‎‬​⁭‫⁭⁬​‫‪‪‭⁫‏‭‎​‪⁫⁯⁪‏‭‍⁮⁫⁫⁬‭⁮⁪⁭​‮⁭⁯‍⁯‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
