// Decompiled with JetBrains decompiler
// Type: Cradiator.Config.ConfigFileWatcher
// Assembly: EvidenceTypeDescript, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B50F5F07-D63E-4094-B80D-E78774C87D41
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c59c8e3be7ec42553ff6af2588e3bcd0569e9467dbb9307218fb8724e02739f2.exe

using log4net;
using System;
using System.IO;
using System.Threading;

namespace Cradiator.Config
{
  public class ConfigFileWatcher : IConfigFileWatcher
  {
    private static readonly ILog _log = LogManager.GetLogger(typeof (ConfigFileWatcher).Name);
    private const long DelayInMilliseconds = 100;
    private readonly string _configFile;
    private readonly IConfigSettings _configSettings;
    private FileSystemWatcher _fileSystemWatcher;
    private Timer _timer;

    public FileSystemWatcher FileSystemWatcher => this._fileSystemWatcher;

    public ConfigFileWatcher(IConfigSettings configSettings, string configFile)
    {
      this._configSettings = configSettings;
      this._configFile = configFile;
    }

    public void Start()
    {
      this._fileSystemWatcher = this.CreateFileSystemWatcher();
      this._fileSystemWatcher.EnableRaisingEvents = true;
    }

    private FileSystemWatcher CreateFileSystemWatcher()
    {
      this._timer = new Timer(new TimerCallback(this.OnDelayedForBatching_ConfigFileChanged), (object) null, -1, -1);
      FileSystemWatcher fileSystemWatcher = new FileSystemWatcher()
      {
        NotifyFilter = NotifyFilters.LastWrite,
        Path = Path.GetDirectoryName(this._configFile),
        Filter = Path.GetFileName(this._configFile)
      };
      fileSystemWatcher.Changed += new FileSystemEventHandler(this.OnConfigFileChanged);
      return fileSystemWatcher;
    }

    private void OnConfigFileChanged(object sender, FileSystemEventArgs e) => this._timer.Change(100L, -1L);

    private void OnDelayedForBatching_ConfigFileChanged(object state)
    {
      try
      {
        this._configSettings.Load();
        this._configSettings.NotifyObservers();
        this._configSettings.Log();
      }
      catch (Exception ex)
      {
        ConfigFileWatcher._log.Error((object) ex);
      }
    }
  }
}
