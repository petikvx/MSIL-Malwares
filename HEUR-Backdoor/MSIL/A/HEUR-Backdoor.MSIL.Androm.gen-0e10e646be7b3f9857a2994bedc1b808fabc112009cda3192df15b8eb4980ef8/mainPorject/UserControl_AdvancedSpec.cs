// Decompiled with JetBrains decompiler
// Type: mainPorject.UserControl_AdvancedSpec
// Assembly: MuiResourceTypeIdIntEn, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2C7C9528-88C0-45FF-AB6A-2AC0C29EABCB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0e10e646be7b3f9857a2994bedc1b808fabc112009cda3192df15b8eb4980ef8.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace mainPorject
{
  public class UserControl_AdvancedSpec : UserControl
  {
    private UserControl_BasicSpec basic_DONOTUSE;
    private IContainer components = (IContainer) null;
    private Panel panelAdvancedSpec;
    private TableLayoutPanel tableLayoutPanel1;
    private Label label13;
    private TextBox textBoxFc;
    private Label label1;
    private Label label9;
    private Label label2;
    private TextBox textBoxFs;
    private Label label6;
    private TextBox textBoxEs;
    private Label label17;
    private Label label16;
    private TextBox textBoxA;
    private Label label3;
    private Label label4;
    private Label label5;
    private TextBox textBoxA2;
    private ErrorProvider errorProviderFc;
    private ErrorProvider errorProviderFs;
    private ErrorProvider errorProviderEs;
    private ErrorProvider errorProviderA;
    private ErrorProvider errorProviderA2;
    private RadioButton spiral;
    private RadioButton Ring;

    public UserControl_BasicSpec Basic
    {
      get => this.basic_DONOTUSE;
      set
      {
        this.basic_DONOTUSE = value;
        this.initializeHandling();
        this.initializeValues();
      }
    }

    public UserControl_AdvancedSpec() => this.InitializeComponent();

    public UserControl_AdvancedSpec(ref UserControl_BasicSpec basic)
    {
      this.InitializeComponent();
      this.Basic = basic;
      this.initializeHandling();
    }

    public event UserControl_AdvancedSpec.NumberChangedHandler FcChanged;

    protected virtual void OnFcChanged(Control sender, double number)
    {
      if (this.FcChanged == null)
        return;
      this.FcChanged(sender, number);
    }

    public event UserControl_AdvancedSpec.NumberChangedHandler FsChanged;

    protected virtual void OnFsChanged(Control sender, double number)
    {
      if (this.FsChanged == null)
        return;
      this.FsChanged(sender, number);
    }

    public event UserControl_AdvancedSpec.NumberChangedHandler EsChanged;

    protected virtual void OnEsChanged(Control sender, double number)
    {
      if (this.EsChanged == null)
        return;
      this.EsChanged(sender, number);
    }

    public event UserControl_AdvancedSpec.NumberChangedHandler AChanged;

    protected virtual void OnAChanged(Control sender, double number)
    {
      if (this.AChanged == null)
        return;
      this.AChanged(sender, number);
    }

    public event UserControl_AdvancedSpec.NumberChangedHandler A2Changed;

    protected virtual void OnA2Changed(Control sender, double number)
    {
      if (this.A2Changed == null)
        return;
      this.A2Changed(sender, number);
    }

    private void HandleNumberedEntry(object sender, KeyPressEventArgs e)
    {
      TextBox textBox = sender as TextBox;
      if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != '.')
        e.Handled = true;
      if (e.KeyChar == '.' && textBox.Text.IndexOf('.') > -1)
      {
        e.Handled = true;
      }
      else
      {
        if (e.KeyChar != '0')
          return;
        double result1;
        double result2;
        if (double.TryParse(textBox.SelectedText, out result1) && double.TryParse(textBox.Text, out result2))
        {
          if (result2 == result1)
            e.Handled = true;
        }
        else if (string.IsNullOrWhiteSpace(textBox.Text))
          e.Handled = true;
      }
    }

    private void HandleEnterEntry_KeyDown(object sender, KeyEventArgs e)
    {
      TextBox textBox = sender as TextBox;
      if (e.KeyCode != Keys.Return)
        return;
      this.SelectNextControl(sender as Control, true, true, true, true);
      e.Handled = true;
      e.SuppressKeyPress = true;
    }

    private void textBoxFocus_Enter(object sender, EventArgs e) => (sender as TextBox).SelectAll();

    private void initializeHandling()
    {
      this.AChanged = new UserControl_AdvancedSpec.NumberChangedHandler(this.textBoxA_NumberChanged);
      this.A2Changed = new UserControl_AdvancedSpec.NumberChangedHandler(this.textBoxA2_NumberChanged);
      this.EsChanged = new UserControl_AdvancedSpec.NumberChangedHandler(this.textBoxEs_NumberChanged);
      this.FcChanged = new UserControl_AdvancedSpec.NumberChangedHandler(this.textBoxFc_NumberChanged);
      this.FsChanged = new UserControl_AdvancedSpec.NumberChangedHandler(this.textBoxFs_NumberChanged);
      this.Basic.DoubleCheckedChanged += new EventHandler(this.isDouble);
    }

    private void initializeValues()
    {
      this.textBoxA.Text = "50";
      this.textBoxA2.Text = "50";
      this.textBoxEs.Text = "210000";
      this.textBoxFc.Text = "40";
      this.textBoxFs.Text = "400";
    }

    public double Fc { get; private set; }

    public double Fs { get; private set; }

    public double Es { get; private set; }

    public double A { get; private set; }

    public double A2 { get; private set; }

    public byte Chose
    {
      get
      {
        if (this.Ring.Checked)
          return 0;
        if (this.spiral.Checked)
          return 1;
        throw new Exception();
      }
    }

    public bool IsErrorFree() => this.errorProviderA.GetError((Control) this.textBoxA) == "" && this.errorProviderA2.GetError((Control) this.textBoxA2) == "" && this.errorProviderEs.GetError((Control) this.textBoxEs) == "" && this.errorProviderFc.GetError((Control) this.textBoxFc) == "" && this.errorProviderFs.GetError((Control) this.textBoxFs) == "";

    public void setErrorA(string error) => this.setError(this.errorProviderA, (Control) this.textBoxA, error);

    public void setErrorA2(string error) => this.setError(this.errorProviderA2, (Control) this.textBoxA2, error);

    public void setErrorEs(string error) => this.setError(this.errorProviderEs, (Control) this.textBoxEs, error);

    public void setErrorFc(string error) => this.setError(this.errorProviderFc, (Control) this.textBoxFc, error);

    public void setErrorFs(string error) => this.setError(this.errorProviderFs, (Control) this.textBoxFs, error);

    private void setError(ErrorProvider ep, Control control, string error)
    {
      if (error == null)
        ep.Clear();
      else
        ep.SetError(control, error);
    }

    public void setFcText(double fc) => this.textBoxFc.Text = fc.ToString();

    public void setFsText(double fs) => this.textBoxFs.Text = fs.ToString();

    public void setEsText(double es) => this.textBoxEs.Text = es.ToString();

    public void setAText(double a) => this.textBoxA.Text = a.ToString();

    public void setA2Text(double a) => this.textBoxA2.Text = a.ToString();

    private void textBoxFc_TextChanged(object sender, EventArgs e)
    {
      TextBox sender1 = sender as TextBox;
      double result;
      if (double.TryParse(sender1.Text, out result))
      {
        this.OnFcChanged((Control) sender1, result);
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(sender1.Text))
          return;
        this.errorProviderFc.SetError((Control) sender1, "this field can not be empty");
      }
    }

    private void textBoxFc_NumberChanged(Control control, double num)
    {
      this.Fc = num;
      if (!this.checkForZero(control, this.errorProviderFc, this.Fc))
        return;
      this.errorProviderFc.Clear();
    }

    private void textBoxFs_TextChanged(object sender, EventArgs e)
    {
      TextBox sender1 = sender as TextBox;
      double result;
      if (double.TryParse(sender1.Text, out result))
      {
        this.OnFsChanged((Control) sender1, result);
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(sender1.Text))
          return;
        this.errorProviderFs.SetError((Control) sender1, "this field can not be empty");
      }
    }

    private void textBoxFs_NumberChanged(Control control, double num)
    {
      this.Fs = num;
      if (!this.checkForZero(control, this.errorProviderFs, this.Fs))
        return;
      this.errorProviderFs.Clear();
    }

    private void textBoxEs_TextChanged(object sender, EventArgs e)
    {
      TextBox sender1 = sender as TextBox;
      double result;
      if (double.TryParse(sender1.Text, out result))
      {
        this.OnEsChanged((Control) sender1, result);
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(sender1.Text))
          return;
        this.errorProviderEs.SetError((Control) sender1, "this field can not be empty");
      }
    }

    private void textBoxEs_NumberChanged(Control control, double num)
    {
      this.Es = num;
      if (!this.checkForZero(control, this.errorProviderEs, this.Es))
        return;
      this.errorProviderEs.Clear();
    }

    private void textBoxA_TextChanged(object sender, EventArgs e)
    {
      TextBox sender1 = sender as TextBox;
      double result;
      if (double.TryParse(sender1.Text, out result))
      {
        this.OnAChanged((Control) sender1, result);
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(sender1.Text))
          return;
        this.errorProviderA.SetError((Control) sender1, "this field can not be empty");
      }
    }

    private void textBoxA_NumberChanged(Control control, double num)
    {
      this.A = num / 10.0;
      if (this.checkForZero(control, this.errorProviderA, this.A))
        this.errorProviderA.Clear();
      if (!this.checkA())
        return;
      this.errorProviderA.Clear();
    }

    private void textBoxA2_TextChanged(object sender, EventArgs e)
    {
      TextBox sender1 = sender as TextBox;
      double result;
      if (double.TryParse(sender1.Text, out result))
      {
        this.OnA2Changed((Control) sender1, result);
      }
      else
      {
        if (!string.IsNullOrWhiteSpace(sender1.Text))
          return;
        this.errorProviderA2.SetError((Control) sender1, "this field can not be empty");
      }
    }

    private void textBoxA2_NumberChanged(Control control, double num)
    {
      this.A2 = num / 10.0;
      if (this.checkForZero(control, this.errorProviderA2, this.A2))
        this.errorProviderA2.Clear();
      if (!this.checkA2())
        return;
      this.errorProviderA2.Clear();
    }

    private void isDouble(object sender, EventArgs e)
    {
      if (!(sender is CheckBox))
        return;
      if ((sender as CheckBox).Checked)
      {
        this.textBoxA2.Enabled = true;
        this.checkA2();
      }
      else
      {
        this.textBoxA2.Enabled = false;
        this.errorProviderA2.Clear();
      }
    }

    private bool checkA()
    {
      if (this.A >= this.Basic.Height / 2.0 - this.Basic.Diameter)
      {
        this.errorProviderA.SetError((Control) this.textBoxA, "A must be less than " + (this.Basic.Height / 2.0 - this.Basic.Diameter).ToString());
        return false;
      }
      if (this.A > this.Basic.Diameter)
        return true;
      this.errorProviderA.SetError((Control) this.textBoxA, "A must be more than " + this.Basic.Diameter.ToString());
      return false;
    }

    private bool checkA2()
    {
      if (this.A2 >= this.Basic.Height / 2.0 - this.Basic.Diameter2)
      {
        this.errorProviderA2.SetError((Control) this.textBoxA2, "A2 must be less than " + (this.Basic.Height / 2.0 - this.Basic.Diameter2).ToString());
        return false;
      }
      if (this.A2 > this.Basic.Diameter2)
        return true;
      this.errorProviderA2.SetError((Control) this.textBoxA2, "A must be more than " + this.Basic.Diameter2.ToString());
      return false;
    }

    private bool checkForZero(Control control, ErrorProvider ep, double num)
    {
      if (num != 0.0)
        return true;
      ep.SetError(control, "this field can not be zero");
      return false;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.panelAdvancedSpec = new Panel();
      this.tableLayoutPanel1 = new TableLayoutPanel();
      this.label9 = new Label();
      this.label13 = new Label();
      this.textBoxFc = new TextBox();
      this.label1 = new Label();
      this.label2 = new Label();
      this.textBoxFs = new TextBox();
      this.label6 = new Label();
      this.textBoxEs = new TextBox();
      this.label17 = new Label();
      this.label16 = new Label();
      this.textBoxA = new TextBox();
      this.label3 = new Label();
      this.label4 = new Label();
      this.label5 = new Label();
      this.textBoxA2 = new TextBox();
      this.errorProviderFc = new ErrorProvider(this.components);
      this.errorProviderFs = new ErrorProvider(this.components);
      this.errorProviderEs = new ErrorProvider(this.components);
      this.errorProviderA = new ErrorProvider(this.components);
      this.errorProviderA2 = new ErrorProvider(this.components);
      this.Ring = new RadioButton();
      this.spiral = new RadioButton();
      this.panelAdvancedSpec.SuspendLayout();
      this.tableLayoutPanel1.SuspendLayout();
      ((ISupportInitialize) this.errorProviderFc).BeginInit();
      ((ISupportInitialize) this.errorProviderFs).BeginInit();
      ((ISupportInitialize) this.errorProviderEs).BeginInit();
      ((ISupportInitialize) this.errorProviderA).BeginInit();
      ((ISupportInitialize) this.errorProviderA2).BeginInit();
      this.SuspendLayout();
      this.panelAdvancedSpec.Controls.Add((Control) this.tableLayoutPanel1);
      this.panelAdvancedSpec.Dock = DockStyle.Top;
      this.panelAdvancedSpec.Location = new Point(0, 0);
      this.panelAdvancedSpec.Name = "panelAdvancedSpec";
      this.panelAdvancedSpec.Size = new Size(252, 147);
      this.panelAdvancedSpec.TabIndex = 0;
      this.tableLayoutPanel1.ColumnCount = 3;
      this.tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 45f));
      this.tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 30f));
      this.tableLayoutPanel1.Controls.Add((Control) this.label9, 0, 3);
      this.tableLayoutPanel1.Controls.Add((Control) this.label13, 2, 0);
      this.tableLayoutPanel1.Controls.Add((Control) this.textBoxFc, 1, 0);
      this.tableLayoutPanel1.Controls.Add((Control) this.label1, 0, 0);
      this.tableLayoutPanel1.Controls.Add((Control) this.label2, 0, 1);
      this.tableLayoutPanel1.Controls.Add((Control) this.textBoxFs, 1, 1);
      this.tableLayoutPanel1.Controls.Add((Control) this.label6, 0, 2);
      this.tableLayoutPanel1.Controls.Add((Control) this.textBoxEs, 1, 2);
      this.tableLayoutPanel1.Controls.Add((Control) this.label17, 2, 1);
      this.tableLayoutPanel1.Controls.Add((Control) this.label16, 2, 3);
      this.tableLayoutPanel1.Controls.Add((Control) this.textBoxA, 1, 3);
      this.tableLayoutPanel1.Controls.Add((Control) this.label3, 2, 2);
      this.tableLayoutPanel1.Controls.Add((Control) this.label4, 0, 4);
      this.tableLayoutPanel1.Controls.Add((Control) this.label5, 2, 4);
      this.tableLayoutPanel1.Controls.Add((Control) this.textBoxA2, 1, 4);
      this.tableLayoutPanel1.Dock = DockStyle.Fill;
      this.tableLayoutPanel1.Location = new Point(0, 0);
      this.tableLayoutPanel1.Name = "tableLayoutPanel1";
      this.tableLayoutPanel1.RowCount = 5;
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tableLayoutPanel1.Size = new Size(252, 147);
      this.tableLayoutPanel1.TabIndex = 0;
      this.label9.AutoSize = true;
      this.label9.Dock = DockStyle.Fill;
      this.label9.Location = new Point(3, 87);
      this.label9.Name = "label9";
      this.label9.Size = new Size(57, 29);
      this.label9.TabIndex = 40;
      this.label9.Text = "a : distance";
      this.label9.TextAlign = ContentAlignment.MiddleCenter;
      this.label13.AutoSize = true;
      this.label13.Dock = DockStyle.Fill;
      this.label13.Location = new Point(179, 0);
      this.label13.Name = "label13";
      this.label13.Size = new Size(70, 29);
      this.label13.TabIndex = 32;
      this.label13.Text = "(MPa)";
      this.label13.TextAlign = ContentAlignment.MiddleCenter;
      this.textBoxFc.Dock = DockStyle.Fill;
      this.textBoxFc.Location = new Point(66, 3);
      this.textBoxFc.Name = "textBoxFc";
      this.textBoxFc.Size = new Size(107, 20);
      this.textBoxFc.TabIndex = 0;
      this.textBoxFc.Text = "40.";
      this.textBoxFc.Click += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxFc.TextChanged += new EventHandler(this.textBoxFc_TextChanged);
      this.textBoxFc.Enter += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxFc.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxFc.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.label1.AutoSize = true;
      this.label1.Dock = DockStyle.Fill;
      this.label1.Location = new Point(3, 0);
      this.label1.Name = "label1";
      this.label1.Size = new Size(57, 29);
      this.label1.TabIndex = 31;
      this.label1.Text = "f'c";
      this.label1.TextAlign = ContentAlignment.MiddleCenter;
      this.label2.AutoSize = true;
      this.label2.Dock = DockStyle.Fill;
      this.label2.Location = new Point(3, 29);
      this.label2.Name = "label2";
      this.label2.Size = new Size(57, 29);
      this.label2.TabIndex = 38;
      this.label2.Text = "fs";
      this.label2.TextAlign = ContentAlignment.MiddleCenter;
      this.textBoxFs.Dock = DockStyle.Fill;
      this.textBoxFs.Location = new Point(66, 32);
      this.textBoxFs.Name = "textBoxFs";
      this.textBoxFs.Size = new Size(107, 20);
      this.textBoxFs.TabIndex = 1;
      this.textBoxFs.Text = "400.";
      this.textBoxFs.Click += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxFs.TextChanged += new EventHandler(this.textBoxFs_TextChanged);
      this.textBoxFs.Enter += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxFs.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxFs.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.label6.AutoSize = true;
      this.label6.Dock = DockStyle.Fill;
      this.label6.Location = new Point(3, 58);
      this.label6.Name = "label6";
      this.label6.Size = new Size(57, 29);
      this.label6.TabIndex = 39;
      this.label6.Text = "Es";
      this.label6.TextAlign = ContentAlignment.MiddleCenter;
      this.textBoxEs.Dock = DockStyle.Fill;
      this.textBoxEs.Location = new Point(66, 61);
      this.textBoxEs.Name = "textBoxEs";
      this.textBoxEs.Size = new Size(107, 20);
      this.textBoxEs.TabIndex = 2;
      this.textBoxEs.Text = "210000.";
      this.textBoxEs.Click += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxEs.TextChanged += new EventHandler(this.textBoxEs_TextChanged);
      this.textBoxEs.Enter += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxEs.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxEs.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.label17.AutoSize = true;
      this.label17.Dock = DockStyle.Fill;
      this.label17.Location = new Point(179, 29);
      this.label17.Name = "label17";
      this.label17.Size = new Size(70, 29);
      this.label17.TabIndex = 42;
      this.label17.Text = "(MPa)";
      this.label17.TextAlign = ContentAlignment.MiddleCenter;
      this.label16.AutoSize = true;
      this.label16.Dock = DockStyle.Fill;
      this.label16.Location = new Point(179, 87);
      this.label16.Name = "label16";
      this.label16.Size = new Size(70, 29);
      this.label16.TabIndex = 41;
      this.label16.Text = "(mm)";
      this.label16.TextAlign = ContentAlignment.MiddleCenter;
      this.textBoxA.Dock = DockStyle.Fill;
      this.textBoxA.Location = new Point(66, 90);
      this.textBoxA.Name = "textBoxA";
      this.textBoxA.Size = new Size(107, 20);
      this.textBoxA.TabIndex = 3;
      this.textBoxA.Text = "5.";
      this.textBoxA.Click += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxA.TextChanged += new EventHandler(this.textBoxA_TextChanged);
      this.textBoxA.Enter += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxA.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxA.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.label3.AutoSize = true;
      this.label3.Dock = DockStyle.Fill;
      this.label3.Location = new Point(179, 58);
      this.label3.Name = "label3";
      this.label3.Size = new Size(70, 29);
      this.label3.TabIndex = 43;
      this.label3.Text = "(kN/m.m)";
      this.label3.TextAlign = ContentAlignment.MiddleCenter;
      this.label4.AutoSize = true;
      this.label4.Dock = DockStyle.Fill;
      this.label4.Location = new Point(3, 116);
      this.label4.Name = "label4";
      this.label4.Size = new Size(57, 31);
      this.label4.TabIndex = 44;
      this.label4.Text = "a2";
      this.label4.TextAlign = ContentAlignment.MiddleCenter;
      this.label5.AutoSize = true;
      this.label5.Dock = DockStyle.Fill;
      this.label5.Location = new Point(179, 116);
      this.label5.Name = "label5";
      this.label5.Size = new Size(70, 31);
      this.label5.TabIndex = 45;
      this.label5.Text = "(mm)";
      this.label5.TextAlign = ContentAlignment.MiddleCenter;
      this.textBoxA2.Dock = DockStyle.Fill;
      this.textBoxA2.Location = new Point(66, 119);
      this.textBoxA2.Name = "textBoxA2";
      this.textBoxA2.Size = new Size(107, 20);
      this.textBoxA2.TabIndex = 4;
      this.textBoxA2.Text = "0.0.";
      this.textBoxA2.Click += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxA2.TextChanged += new EventHandler(this.textBoxA2_TextChanged);
      this.textBoxA2.Enter += new EventHandler(this.textBoxFocus_Enter);
      this.textBoxA2.KeyDown += new KeyEventHandler(this.HandleEnterEntry_KeyDown);
      this.textBoxA2.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.errorProviderFc.ContainerControl = (ContainerControl) this;
      this.errorProviderFs.ContainerControl = (ContainerControl) this;
      this.errorProviderEs.ContainerControl = (ContainerControl) this;
      this.errorProviderA.ContainerControl = (ContainerControl) this;
      this.errorProviderA2.ContainerControl = (ContainerControl) this;
      this.Ring.AutoSize = true;
      this.Ring.Checked = true;
      this.Ring.Location = new Point(3, 153);
      this.Ring.Name = "Ring";
      this.Ring.Size = new Size(146, 17);
      this.Ring.TabIndex = 1;
      this.Ring.TabStop = true;
      this.Ring.Text = "Ring shape renforcement";
      this.Ring.UseVisualStyleBackColor = true;
      this.spiral.AutoSize = true;
      this.spiral.Location = new Point(3, 174);
      this.spiral.Name = "spiral";
      this.spiral.Size = new Size(151, 17);
      this.spiral.TabIndex = 1;
      this.spiral.Text = "Spiral shape renforcement";
      this.spiral.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.Controls.Add((Control) this.spiral);
      this.Controls.Add((Control) this.Ring);
      this.Controls.Add((Control) this.panelAdvancedSpec);
      this.Name = nameof (UserControl_AdvancedSpec);
      this.Size = new Size(252, 194);
      this.panelAdvancedSpec.ResumeLayout(false);
      this.tableLayoutPanel1.ResumeLayout(false);
      this.tableLayoutPanel1.PerformLayout();
      ((ISupportInitialize) this.errorProviderFc).EndInit();
      ((ISupportInitialize) this.errorProviderFs).EndInit();
      ((ISupportInitialize) this.errorProviderEs).EndInit();
      ((ISupportInitialize) this.errorProviderA).EndInit();
      ((ISupportInitialize) this.errorProviderA2).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    public delegate void NumberChangedHandler(Control sender, double number);
  }
}
