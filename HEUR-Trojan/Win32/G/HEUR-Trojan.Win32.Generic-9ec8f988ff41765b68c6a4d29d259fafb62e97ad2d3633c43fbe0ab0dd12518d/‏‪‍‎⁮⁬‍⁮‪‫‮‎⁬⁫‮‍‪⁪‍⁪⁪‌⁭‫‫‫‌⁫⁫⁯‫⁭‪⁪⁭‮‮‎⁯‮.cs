// Decompiled with JetBrains decompiler
// Type: ‏‪‍‎⁮⁬‍⁮‪‫‮‎⁬⁫‮‍‪⁪‍⁪⁪‌⁭‫‫‫‌⁫⁫⁯‫⁭‪⁪⁭‮‮‎⁯‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;

public class \u200F‪‍‎⁮⁬‍⁮‪‫‮‎⁬⁫‮‍‪⁪‍⁪⁪‌⁭‫‫‫‌⁫⁫⁯‫⁭‪⁪⁭‮‮‎⁯‮
{
  private readonly StringBuilder \u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮;
  private readonly TextReader \u202E⁮⁫⁮⁬⁯‍‮‎‭‮⁭⁮⁯‏⁭‪‪‎‍⁬⁬⁮‬‎⁯‌‎​‮⁬⁬⁪‮⁮‫⁫⁪⁪⁫‮;
  private int \u200F‍⁭‫​⁭⁪⁬‮‬‌‬‬‎⁪⁮⁪⁪​⁪⁪⁯‍‍⁪‌‌⁬‮‪‮‪⁭‫‮⁪‫‬⁮⁯‮ = 1;
  private int \u202D​‍​‬‏‏‪⁯‪‌⁭​⁯⁪⁬⁬⁪‍‪​​‬⁬‮⁯‍‭⁫‎⁮‬‬‮‌⁯⁯‮‪‬‮;
  private int \u200F⁫‎‫⁯⁪‎‪​‬‭‍‮​‏‌‎‌‏‌‏⁫‏‬‏‪‭‌⁯⁫‬‍‏​‌‫‬‏‮⁪‮;
  private bool \u206A‎‬⁪‏​‬‎‬‌⁪⁫⁭​⁫⁫​⁫‭⁭⁬‌‪‏‫‪‫​⁭⁫‎⁪‭⁮⁭‍⁬⁭‮⁮‮;
  private bool \u206E⁯‭⁭‌‏​‌⁪‪‍‌⁪‎⁪⁯⁭‌‬⁬⁮‬⁬⁪⁮‭⁮​‭‌​‏‪⁭⁯‪​⁫⁬‫‮;

  public \u200F‪‍‎⁮⁬‍⁮‪‫‮‎⁬⁫‮‍‪⁪‍⁪⁪‌⁭‫‫‫‌⁫⁫⁯‫⁭‪⁪⁭‮‮‎⁯‮(TextReader _param1)
  {
    this.\u202E⁮⁫⁮⁬⁯‍‮‎‭‮⁭⁮⁯‏⁭‪‪‎‍⁬⁬⁮‬‎⁯‌‎​‮⁬⁬⁪‮⁮‫⁫⁪⁪⁫‮ = _param1 ?? throw new ArgumentNullException("reader");
    this.\u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮ = new StringBuilder();
  }

  public object \u202E‮‍‎‎‍‍⁪‎‭⁭‭‫‏‮​‬‏‌‭⁭⁮⁪⁫‏⁪⁬‏‮‮‭‎⁮‎‭⁯‍⁪⁯‮‮()
  {
    object obj = this.\u200D‬‎‌‮‬‫‬‬⁭‭‮‌‮⁬‏‎⁫‏‏‬‍⁭​‬⁮⁪⁯‌‬‎‎⁭⁪⁭‫‭⁪⁭⁫‮();
    this.\u202A‪‏⁮‭​‬​⁮⁬​⁪‪‌‌‌‭‬⁬‬‮‍‫‪⁯‍⁭⁭‪⁯⁬‮⁪‌⁮‬‮‮‮⁮‮();
    if (this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮() < 0)
      return obj;
    throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("extra characters in JSON input");
  }

  private object \u200D‬‎‌‮‬‫‬‬⁭‭‮‌‮⁬‏‎⁫‏‏‬‍⁭​‬⁮⁪⁯‌‬‎‎⁭⁪⁭‫‭⁪⁭⁫‮()
  {
    this.\u202A‪‏⁮‭​‬​⁮⁬​⁪‪‌‌‌‭‬⁬‬‮‍‫‪⁯‍⁭⁭‪⁯⁬‮⁪‌⁮‬‮‮‮⁮‮();
    int num1 = this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮();
    if (num1 < 0)
      throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("Incomplete JSON input");
    switch (num1)
    {
      case 34:
        return (object) this.\u202D⁬‪‭‏⁬⁫‮‍‪‮⁯‬‍‏‬⁪‭​⁭‬⁪‬​⁫‪⁯⁪‍⁯‏‮​‍⁪‍⁮⁯⁫⁪‮();
      case 91:
        this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮();
        List<object> objectList = new List<object>();
        this.\u202A‪‏⁮‭​‬​⁮⁬​⁪‪‌‌‌‭‬⁬‬‮‍‫‪⁯‍⁭⁭‪⁯⁬‮⁪‌⁮‬‮‮‮⁮‮();
        if (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮() == 93)
        {
          this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮();
          return (object) objectList;
        }
        while (true)
        {
          object obj = this.\u200D‬‎‌‮‬‫‬‬⁭‭‮‌‮⁬‏‎⁫‏‏‬‍⁭​‬⁮⁪⁯‌‬‎‎⁭⁪⁭‫‭⁪⁭⁫‮();
          objectList.Add(obj);
          this.\u202A‪‏⁮‭​‬​⁮⁬​⁪‪‌‌‌‭‬⁬‬‮‍‫‪⁯‍⁭⁭‪⁯⁬‮⁪‌⁮‬‮‮‮⁮‮();
          if (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮() == 44)
            this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮();
          else
            break;
        }
        if (this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮() != 93)
          throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("JSON array must end with ']'");
        return (object) objectList.ToArray();
      case 102:
        this.\u206E‏⁯⁫‫‏‏⁪⁭‫⁭‎⁭⁮‎⁭​‬‏‭‍‌‍‍‮‭⁯‪⁯⁭‬‮⁪‎​​‮‏⁬‏‮("false");
        return (object) false;
      case 110:
        this.\u206E‏⁯⁫‫‏‏⁪⁭‫⁭‎⁭⁮‎⁭​‬‏‭‍‌‍‍‮‭⁯‪⁯⁭‬‮⁪‎​​‮‏⁬‏‮("null");
        return (object) null;
      case 116:
        this.\u206E‏⁯⁫‫‏‏⁪⁭‫⁭‎⁭⁮‎⁭​‬‏‭‍‌‍‍‮‭⁯‪⁯⁭‬‮⁪‎​​‮‏⁬‏‮("true");
        return (object) true;
      case 123:
        this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮();
        Dictionary<string, object> dictionary = new Dictionary<string, object>();
        this.\u202A‪‏⁮‭​‬​⁮⁬​⁪‪‌‌‌‭‬⁬‬‮‍‫‪⁯‍⁭⁭‪⁯⁬‮⁪‌⁮‬‮‮‮⁮‮();
        if (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮() == 125)
        {
          this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮();
          return (object) dictionary;
        }
label_12:
        this.\u202A‪‏⁮‭​‬​⁮⁬​⁪‪‌‌‌‭‬⁬‬‮‍‫‪⁯‍⁭⁭‪⁯⁬‮⁪‌⁮‬‮‮‮⁮‮();
        if (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮() == 125)
        {
          this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮();
        }
        else
        {
          string key = this.\u202D⁬‪‭‏⁬⁫‮‍‪‮⁯‬‍‏‬⁪‭​⁭‬⁪‬​⁫‪⁯⁪‍⁯‏‮​‍⁪‍⁮⁯⁫⁪‮();
          this.\u202A‪‏⁮‭​‬​⁮⁬​⁪‪‌‌‌‭‬⁬‬‮‍‫‪⁯‍⁭⁭‪⁯⁬‮⁪‌⁮‬‮‮‮⁮‮();
          this.\u206E‏⁯⁫‫‏‏⁪⁭‫⁭‎⁭⁮‎⁭​‬‏‭‍‌‍‍‮‭⁯‪⁯⁭‬‮⁪‎​​‮‏⁬‏‮(':');
          this.\u202A‪‏⁮‭​‬​⁮⁬​⁪‪‌‌‌‭‬⁬‬‮‍‫‪⁯‍⁭⁭‪⁯⁬‮⁪‌⁮‬‮‮‮⁮‮();
          dictionary[key] = this.\u200D‬‎‌‮‬‫‬‬⁭‭‮‌‮⁬‏‎⁫‏‏‬‍⁭​‬⁮⁪⁯‌‬‎‎⁭⁪⁭‫‭⁪⁭⁫‮();
          this.\u202A‪‏⁮‭​‬​⁮⁬​⁪‪‌‌‌‭‬⁬‬‮‍‫‪⁯‍⁭⁭‪⁯⁬‮⁪‌⁮‬‮‮‮⁮‮();
          switch (this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮())
          {
            case 125:
              break;
            default:
              goto label_12;
          }
        }
        int num2 = 0;
        KeyValuePair<string, object>[] keyValuePairArray = new KeyValuePair<string, object>[dictionary.Count];
        foreach (KeyValuePair<string, object> keyValuePair in dictionary)
          keyValuePairArray[num2++] = keyValuePair;
        return (object) keyValuePairArray;
      default:
        if (48 <= num1 && num1 <= 57 || num1 == 45)
          return this.\u206F⁯‬‎​‪‏‮⁭⁪⁫‌‬‌⁪‌‪‍‮‍‮⁮⁪‏‏⁭‏‏⁭⁭​⁪⁭⁪‬⁬‏‮‫‭‮();
        throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮(string.Format("Unexpected character '{0}'", (object) (char) num1));
    }
  }

  private int \u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮()
  {
    if (!this.\u206A‎‬⁪‏​‬‎‬‌⁪⁫⁭​⁫⁫​⁫‭⁭⁬‌‪‏‫‪‫​⁭⁫‎⁪‭⁮⁭‍⁬⁭‮⁮‮)
    {
      this.\u200F⁫‎‫⁯⁪‎‪​‬‭‍‮​‏‌‎‌‏‌‏⁫‏‬‏‪‭‌⁯⁫‬‍‏​‌‫‬‏‮⁪‮ = this.\u202E⁮⁫⁮⁬⁯‍‮‎‭‮⁭⁮⁯‏⁭‪‪‎‍⁬⁬⁮‬‎⁯‌‎​‮⁬⁬⁪‮⁮‫⁫⁪⁪⁫‮.Read();
      this.\u206A‎‬⁪‏​‬‎‬‌⁪⁫⁭​⁫⁫​⁫‭⁭⁬‌‪‏‫‪‫​⁭⁫‎⁪‭⁮⁭‍⁬⁭‮⁮‮ = true;
    }
    return this.\u200F⁫‎‫⁯⁪‎‪​‬‭‍‮​‏‌‎‌‏‌‏⁫‏‬‏‪‭‌⁯⁫‬‍‏​‌‫‬‏‮⁪‮;
  }

  private int \u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮()
  {
    int num = this.\u206A‎‬⁪‏​‬‎‬‌⁪⁫⁭​⁫⁫​⁫‭⁭⁬‌‪‏‫‪‫​⁭⁫‎⁪‭⁮⁭‍⁬⁭‮⁮‮ ? this.\u200F⁫‎‫⁯⁪‎‪​‬‭‍‮​‏‌‎‌‏‌‏⁫‏‬‏‪‭‌⁯⁫‬‍‏​‌‫‬‏‮⁪‮ : this.\u202E⁮⁫⁮⁬⁯‍‮‎‭‮⁭⁮⁯‏⁭‪‪‎‍⁬⁬⁮‬‎⁯‌‎​‮⁬⁬⁪‮⁮‫⁫⁪⁪⁫‮.Read();
    this.\u206A‎‬⁪‏​‬‎‬‌⁪⁫⁭​⁫⁫​⁫‭⁭⁬‌‪‏‫‪‫​⁭⁫‎⁪‭⁮⁭‍⁬⁭‮⁮‮ = false;
    if (this.\u206E⁯‭⁭‌‏​‌⁪‪‍‌⁪‎⁪⁯⁭‌‬⁬⁮‬⁬⁪⁮‭⁮​‭‌​‏‪⁭⁯‪​⁫⁬‫‮)
    {
      ++this.\u200F‍⁭‫​⁭⁪⁬‮‬‌‬‬‎⁪⁮⁪⁪​⁪⁪⁯‍‍⁪‌‌⁬‮‪‮‪⁭‫‮⁪‫‬⁮⁯‮;
      this.\u202D​‍​‬‏‏‪⁯‪‌⁭​⁯⁪⁬⁬⁪‍‪​​‬⁬‮⁯‍‭⁫‎⁮‬‬‮‌⁯⁯‮‪‬‮ = 0;
      this.\u206E⁯‭⁭‌‏​‌⁪‪‍‌⁪‎⁪⁯⁭‌‬⁬⁮‬⁬⁪⁮‭⁮​‭‌​‏‪⁭⁯‪​⁫⁬‫‮ = false;
    }
    if (num == 10)
      this.\u206E⁯‭⁭‌‏​‌⁪‪‍‌⁪‎⁪⁯⁭‌‬⁬⁮‬⁬⁪⁮‭⁮​‭‌​‏‪⁭⁯‪​⁫⁬‫‮ = true;
    ++this.\u202D​‍​‬‏‏‪⁯‪‌⁭​⁯⁪⁬⁬⁪‍‪​​‬⁬‮⁯‍‭⁫‎⁮‬‬‮‌⁯⁯‮‪‬‮;
    return num;
  }

  private void \u202A‪‏⁮‭​‬​⁮⁬​⁪‪‌‌‌‭‬⁬‬‮‍‫‪⁯‍⁭⁭‪⁯⁬‮⁪‌⁮‬‮‮‮⁮‮()
  {
    while (true)
    {
      switch (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮())
      {
        case 9:
        case 10:
        case 13:
        case 32:
          this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮();
          continue;
        default:
          goto label_2;
      }
    }
label_2:;
  }

  private object \u206F⁯‬‎​‪‏‮⁭⁪⁫‌‬‌⁪‌‪‍‮‍‮⁮⁪‏‏⁭‏‏⁭⁭​⁪⁭⁪‬⁬‏‮‫‭‮()
  {
    StringBuilder stringBuilder = new StringBuilder();
    if (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮() == 45)
      stringBuilder.Append((char) this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮());
    int num1 = 0;
    bool flag1 = this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮() == 48;
    while (true)
    {
      int num2 = this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮();
      if (num2 >= 48 && 57 >= num2)
      {
        stringBuilder.Append((char) this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮());
        if (!flag1 || num1 != 1)
          ++num1;
        else
          break;
      }
      else
        goto label_7;
    }
    throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("leading zeros are not allowed");
label_7:
    if (num1 == 0)
      throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("Invalid JSON numeric literal; no digit found");
    bool flag2 = false;
    int num3 = 0;
    if (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮() == 46)
    {
      flag2 = true;
      stringBuilder.Append((char) this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮());
      if (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮() < 0)
        throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("Invalid JSON numeric literal; extra dot");
      while (true)
      {
        int num4 = this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮();
        if (num4 >= 48 && 57 >= num4)
        {
          stringBuilder.Append((char) this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮());
          ++num3;
        }
        else
          break;
      }
      if (num3 == 0)
        throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("Invalid JSON numeric literal; extra dot");
    }
    switch (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮())
    {
      case 69:
      case 101:
        stringBuilder.Append((char) this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮());
        if (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮() < 0)
          throw new ArgumentException("Invalid JSON numeric literal; incomplete exponent");
        switch (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮())
        {
          case 43:
            stringBuilder.Append((char) this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮());
            break;
          case 45:
            stringBuilder.Append((char) this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮());
            break;
        }
        if (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮() < 0)
          throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("Invalid JSON numeric literal; incomplete exponent");
        while (true)
        {
          int num5 = this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮();
          if (num5 >= 48 && 57 >= num5)
            stringBuilder.Append((char) this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮());
          else
            break;
        }
      default:
        if (!flag2)
        {
          int result1;
          if (int.TryParse(stringBuilder.ToString(), NumberStyles.Float, (IFormatProvider) CultureInfo.InvariantCulture, out result1))
            return (object) result1;
          long result2;
          if (long.TryParse(stringBuilder.ToString(), NumberStyles.Float, (IFormatProvider) CultureInfo.InvariantCulture, out result2))
            return (object) result2;
          ulong result3;
          if (ulong.TryParse(stringBuilder.ToString(), NumberStyles.Float, (IFormatProvider) CultureInfo.InvariantCulture, out result3))
            return (object) result3;
        }
        Decimal result;
        if (Decimal.TryParse(stringBuilder.ToString(), NumberStyles.Float, (IFormatProvider) CultureInfo.InvariantCulture, out result) && result != 0M)
          return (object) result;
        break;
    }
    return (object) double.Parse(stringBuilder.ToString(), NumberStyles.Float, (IFormatProvider) CultureInfo.InvariantCulture);
  }

  private string \u202D⁬‪‭‏⁬⁫‮‍‪‮⁯‬‍‏‬⁪‭​⁭‬⁪‬​⁫‪⁯⁪‍⁯‏‮​‍⁪‍⁮⁯⁫⁪‮()
  {
    if (this.\u200E‏‍‍​‌‬‮⁪‎‫‏⁮⁯⁫‬‪‎⁫​⁭‌⁪⁬​‫‮⁫‬‏‮​‮⁪⁪‪⁬‪⁬‍‮() != 34)
      throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("Invalid JSON string literal format");
    this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮();
    this.\u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮.Length = 0;
    while (true)
    {
      int num1 = this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮();
      if (num1 >= 0)
      {
        if (num1 != 34)
        {
          if (num1 != 92)
          {
            this.\u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮.Append((char) num1);
          }
          else
          {
            int num2 = this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮();
            if (num2 >= 0)
            {
              switch (num2)
              {
                case 34:
                case 47:
                case 92:
                  this.\u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮.Append((char) num2);
                  continue;
                case 98:
                  this.\u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮.Append('\b');
                  continue;
                case 102:
                  this.\u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮.Append('\f');
                  continue;
                case 110:
                  this.\u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮.Append('\n');
                  continue;
                case 114:
                  this.\u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮.Append('\r');
                  continue;
                case 116:
                  this.\u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮.Append('\t');
                  continue;
                case 117:
                  ushort num3 = 0;
                  for (int index = 0; index < 4; ++index)
                  {
                    num3 <<= 4;
                    int num4;
                    if ((num4 = this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮()) < 0)
                      throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("Incomplete unicode character escape literal");
                    if (48 <= num4 && num4 <= 57)
                      num3 += (ushort) (num4 - 48);
                    if (65 <= num4 && num4 <= 70)
                      num3 += (ushort) (num4 - 65 + 10);
                    if (97 <= num4 && num4 <= 102)
                      num3 += (ushort) (num4 - 97 + 10);
                  }
                  this.\u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮.Append((char) num3);
                  continue;
                default:
                  goto label_29;
              }
            }
            else
              goto label_9;
          }
        }
        else
          break;
      }
      else
        goto label_30;
    }
    return this.\u202E‬⁫‮‬⁪⁪‪‫⁬‫‫‌⁮⁮⁮​⁬‬‮‮‍‪‌‍‌⁪‪‍‭⁫⁯⁭‎‍‎⁬⁫⁯⁭‮.ToString();
label_9:
    throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("Invalid JSON string literal; incomplete escape sequence");
label_29:
    throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("Invalid JSON string literal; unexpected escape character");
label_30:
    throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮("JSON string is not closed");
  }

  private void \u206E‏⁯⁫‫‏‏⁪⁭‫⁭‎⁭⁮‎⁭​‬‏‭‍‌‍‍‮‭⁯‪⁯⁭‬‮⁪‎​​‮‏⁬‏‮(char _param1)
  {
    int num;
    if ((num = this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮()) != (int) _param1)
      throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮(string.Format("Expected '{0}', got '{1}'", (object) _param1, (object) (char) num));
  }

  private void \u206E‏⁯⁫‫‏‏⁪⁭‫⁭‎⁭⁮‎⁭​‬‏‭‍‌‍‍‮‭⁯‪⁯⁭‬‮⁪‎​​‮‏⁬‏‮(string _param1)
  {
    for (int index = 0; index < _param1.Length; ++index)
    {
      if (this.\u206A‎‏⁮⁫⁮‎⁭⁮‌‭‏⁬‭‏⁭⁪‫⁮⁯‬⁯‎‍‍‮⁮‎⁭‪‪‏⁬⁫‮‫‪⁬⁫⁪‮() != (int) _param1[index])
        throw this.\u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮(string.Format("Expected '{0}', differed at {1}", (object) _param1, (object) index));
    }
  }

  private Exception \u206B‬‎​​‫​‭⁪‭‫⁫⁫‮‫⁮‎​‭‌⁬⁮‏‬⁯⁫⁯‍‭⁪⁬‌​⁬‪‪⁯‭⁭‪‮(string _param1) => (Exception) new ArgumentException(string.Format("{0}. At line {1}, column {2}", (object) _param1, (object) this.\u200F‍⁭‫​⁭⁪⁬‮‬‌‬‬‎⁪⁮⁪⁪​⁪⁪⁯‍‍⁪‌‌⁬‮‪‮‪⁭‫‮⁪‫‬⁮⁯‮, (object) this.\u202D​‍​‬‏‏‪⁯‪‌⁭​⁯⁪⁬⁬⁪‍‪​​‬⁬‮⁯‍‭⁫‎⁮‬‬‮‌⁯⁯‮‪‬‮));
}
