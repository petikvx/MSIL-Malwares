// Decompiled with JetBrains decompiler
// Type: Mario_KS.FormName
// Assembly: OnSerializingAttribute, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F72B5184-77D9-4DBB-B29C-2F3B04C48CCD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-8c2eb36fc68b33fc269eaa5f42a303b63ee25bccdd99c0c424285aee9317d94c.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Mario_KS
{
  [DesignerGenerated]
  public class FormName : Form
  {
    private IContainer components;
    private bool SRight;
    private bool SLeft;
    private int ShooterSpeed;
    private int ShotSpeed;
    private int InvaderSpeed;
    private int InvaderDrop;
    private const int NumOfInvaders = 15;
    private bool[] IRight;
    private PictureBox[] Invaders;
    private int x;
    private int ShotDown;

    public FormName()
    {
      this.KeyDown += new KeyEventHandler(this.FormName_KeyDown);
      this.KeyUp += new KeyEventHandler(this.FormName_KeyUp);
      this.Load += new EventHandler(this.FormName_Load);
      this.IRight = new bool[16];
      this.Invaders = new PictureBox[16];
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.TimerMain = new Timer(this.components);
      this.Shot = new PictureBox();
      this.Shooter = new PictureBox();
      this.GroupBox1 = new GroupBox();
      this.Button2 = new Button();
      this.Button1 = new Button();
      ((ISupportInitialize) this.Shot).BeginInit();
      ((ISupportInitialize) this.Shooter).BeginInit();
      this.GroupBox1.SuspendLayout();
      this.SuspendLayout();
      this.TimerMain.Enabled = true;
      this.TimerMain.Interval = 1;
      this.Shot.BackColor = Color.Transparent;
      this.Shot.Location = new Point(433, 285);
      this.Shot.Name = "Shot";
      this.Shot.Size = new Size(19, 64);
      this.Shot.TabIndex = 1;
      this.Shot.TabStop = false;
      this.Shooter.BackColor = Color.Transparent;
      this.Shooter.Location = new Point(409, 355);
      this.Shooter.Name = "Shooter";
      this.Shooter.Size = new Size(76, 60);
      this.Shooter.TabIndex = 0;
      this.Shooter.TabStop = false;
      this.GroupBox1.BackColor = Color.Transparent;
      this.GroupBox1.BackgroundImageLayout = ImageLayout.Zoom;
      this.GroupBox1.Controls.Add((Control) this.Button2);
      this.GroupBox1.Controls.Add((Control) this.Button1);
      this.GroupBox1.ForeColor = Color.Transparent;
      this.GroupBox1.Location = new Point(151, 0);
      this.GroupBox1.Name = "GroupBox1";
      this.GroupBox1.Size = new Size(376, 423);
      this.GroupBox1.TabIndex = 2;
      this.GroupBox1.TabStop = false;
      this.Button2.BackgroundImageLayout = ImageLayout.Stretch;
      this.Button2.ForeColor = Color.Black;
      this.Button2.Location = new Point(195, 368);
      this.Button2.Name = "Button2";
      this.Button2.Size = new Size(130, 43);
      this.Button2.TabIndex = 1;
      this.Button2.Text = "QUIT";
      this.Button2.UseVisualStyleBackColor = true;
      this.Button1.BackgroundImageLayout = ImageLayout.Stretch;
      this.Button1.ForeColor = Color.Black;
      this.Button1.Location = new Point(51, 368);
      this.Button1.Name = "Button1";
      this.Button1.Size = new Size(138, 43);
      this.Button1.TabIndex = 0;
      this.Button1.Text = "PLAY";
      this.Button1.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(8f, 16f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = SystemColors.ButtonHighlight;
      this.ClientSize = new Size(612, 423);
      this.Controls.Add((Control) this.GroupBox1);
      this.Controls.Add((Control) this.Shot);
      this.Controls.Add((Control) this.Shooter);
      this.FormBorderStyle = FormBorderStyle.FixedDialog;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (FormName);
      this.Text = "Morty Invaders";
      ((ISupportInitialize) this.Shot).EndInit();
      ((ISupportInitialize) this.Shooter).EndInit();
      this.GroupBox1.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    [field: AccessedThroughProperty("Shooter")]
    internal virtual PictureBox Shooter { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Timer TimerMain
    {
      get => this._TimerMain;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.TimerMain_Tick);
        Timer timerMain1 = this._TimerMain;
        if (timerMain1 != null)
          timerMain1.Tick -= eventHandler;
        this._TimerMain = value;
        Timer timerMain2 = this._TimerMain;
        if (timerMain2 == null)
          return;
        timerMain2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("Shot")]
    internal virtual PictureBox Shot { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("GroupBox1")]
    internal virtual GroupBox GroupBox1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button Button1
    {
      get => this._Button1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        Button button1_1 = this._Button1;
        if (button1_1 != null)
          button1_1.Click -= eventHandler;
        this._Button1 = value;
        Button button1_2 = this._Button1;
        if (button1_2 == null)
          return;
        button1_2.Click += eventHandler;
      }
    }

    internal virtual Button Button2
    {
      get => this._Button2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button2_Click);
        Button button2_1 = this._Button2;
        if (button2_1 != null)
          button2_1.Click -= eventHandler;
        this._Button2 = value;
        Button button2_2 = this._Button2;
        if (button2_2 == null)
          return;
        button2_2.Click += eventHandler;
      }
    }

    private void TimerMain_Tick(object sender, EventArgs e)
    {
      this.MoveShooter();
      this.FireShot();
      this.MoveInvader();
      this.CheckGameOver();
      this.CheckHit();
    }

    private void FormName_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyValue == 39)
      {
        this.SRight = true;
        this.SLeft = false;
      }
      if (e.KeyValue == 37)
      {
        this.SLeft = true;
        this.SRight = false;
      }
      if (e.KeyValue == 32 & !this.Shot.Visible)
      {
        this.Shot.Top = this.Shooter.Top;
        this.Shot.Left = checked ((int) Math.Round(unchecked ((double) this.Shooter.Left + (double) this.Shooter.Width / 2.0 - (double) this.Shot.Width / 2.0)));
        this.Shot.Visible = true;
      }
      if (e.KeyCode != Keys.Escape)
        return;
      this.TimerMain.Stop();
      this.GroupBox1.Show();
    }

    private void MoveShooter()
    {
      if (this.SRight & checked (this.Shooter.Left + this.Shooter.Width) < this.ClientRectangle.Width)
      {
        PictureBox shooter;
        int num = checked ((shooter = this.Shooter).Left + this.ShooterSpeed);
        shooter.Left = num;
      }
      if (!(this.SLeft & this.Shooter.Left > this.ClientRectangle.Left))
        return;
      PictureBox shooter1;
      int num1 = checked ((shooter1 = this.Shooter).Left - this.ShooterSpeed);
      shooter1.Left = num1;
    }

    private void FormName_KeyUp(object sender, KeyEventArgs e)
    {
      if (e.KeyValue == 39)
        this.SRight = false;
      if (e.KeyValue != 37)
        return;
      this.SLeft = false;
    }

    private void FormName_Load(object sender, EventArgs e)
    {
      this.LoadSettings();
      this.LoadInvaders();
      this.TimerMain.Stop();
    }

    private void LoadSettings()
    {
      this.ShotSpeed = 10;
      this.ShooterSpeed = 3;
      this.Shot.Visible = false;
      this.x = 1;
      do
      {
        this.IRight[this.x] = true;
        this.InvaderSpeed = 5;
        this.InvaderDrop = 50;
        checked { ++this.x; }
      }
      while (this.x <= 15);
    }

    private void FireShot()
    {
      if (this.Shot.Visible)
      {
        PictureBox shot;
        int num = checked ((shot = this.Shot).Top - this.ShotSpeed);
        shot.Top = num;
      }
      if (checked (this.Shot.Top + this.Shot.Height) >= this.ClientRectangle.Top)
        return;
      this.Shot.Visible = false;
    }

    private void MoveInvader()
    {
      this.x = 1;
      do
      {
        if (this.IRight[this.x])
        {
          PictureBox invader;
          int num = checked ((invader = this.Invaders[this.x]).Left + this.InvaderSpeed);
          invader.Left = num;
        }
        else
        {
          PictureBox invader;
          int num = checked ((invader = this.Invaders[this.x]).Left - this.InvaderSpeed);
          invader.Left = num;
        }
        if (checked (this.Invaders[this.x].Left + this.Invaders[this.x].Width) > this.ClientRectangle.Width & this.IRight[this.x])
        {
          this.IRight[this.x] = false;
          PictureBox invader;
          int num = checked ((invader = this.Invaders[this.x]).Top + this.InvaderDrop);
          invader.Top = num;
        }
        if (this.Invaders[this.x].Left < this.ClientRectangle.Left & !this.IRight[this.x])
        {
          this.IRight[this.x] = true;
          PictureBox invader;
          int num = checked ((invader = this.Invaders[this.x]).Top + this.InvaderDrop);
          invader.Top = num;
        }
        checked { ++this.x; }
      }
      while (this.x <= 15);
    }

    private void CheckGameOver()
    {
      this.x = 1;
      do
      {
        if (checked (this.Invaders[this.x].Top + this.Invaders[this.x].Height) >= this.Shooter.Top & this.Invaders[this.x].Visible)
        {
          this.TimerMain.Enabled = false;
          int num = (int) Interaction.MsgBox((object) "Game Over! You Lose!");
        }
        checked { ++this.x; }
      }
      while (this.x <= 15);
      if (this.ShotDown != 15)
        return;
      this.TimerMain.Enabled = false;
      int num1 = (int) Interaction.MsgBox((object) "You Saved The Planet!");
    }

    private void CheckHit()
    {
      this.x = 1;
      do
      {
        if (checked (this.Shot.Top + this.Shot.Height) >= this.Invaders[this.x].Top & this.Shot.Top <= checked (this.Invaders[this.x].Top + this.Invaders[this.x].Height) & checked (this.Shot.Left + this.Shot.Width) >= this.Invaders[this.x].Left & this.Shot.Left <= checked (this.Invaders[this.x].Left + this.Invaders[this.x].Width) & this.Shot.Visible & this.Invaders[this.x].Visible)
        {
          this.Invaders[this.x].Visible = false;
          this.Shot.Visible = false;
          // ISSUE: variable of a reference type
          int& local;
          // ISSUE: explicit reference operation
          int num = checked (^(local = ref this.ShotDown) + 1);
          local = num;
        }
        checked { ++this.x; }
      }
      while (this.x <= 15);
    }

    private void LoadInvaders()
    {
      this.x = 1;
      do
      {
        this.Controls.Add((Control) this.Invaders[this.x]);
        checked { ++this.x; }
      }
      while (this.x <= 15);
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      this.GroupBox1.Visible = false;
      this.Focus();
      this.TimerMain.Start();
    }

    private void Button2_Click(object sender, EventArgs e) => this.Close();
  }
}
