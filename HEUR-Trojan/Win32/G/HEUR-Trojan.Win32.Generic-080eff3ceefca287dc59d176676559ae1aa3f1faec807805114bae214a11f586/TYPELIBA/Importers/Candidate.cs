// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Importers.Candidate
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Adapter;
using ProjNet.Consumers;
using ProjNet.Objects;
using ProjNet.Pools;
using ProjNet.Roles;
using ProjNet.Rules;
using ProjNet.Shared;
using ProjNet.Structs;
using ProjNet.Visitors;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using TYPELIBA.Collections;
using TYPELIBA.Identifiers;
using TYPELIBA.Listeners;
using TYPELIBA.Lists;
using TYPELIBA.Pages;
using TYPELIBA.Wrappers;

namespace TYPELIBA.Importers
{
  public class Candidate : Collection
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Listener PublishState(string spec) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Listener ExcludeState(string item) => CreatorEventRole.ViewObject(item) as Listener;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Dic DestroyState(string param, Listener visitor, Listener control) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Printer ChangeState(
      string last,
      Listener caller,
      string field,
      List<AdapterErrorPool> ivk2)
    {
      throw new NotImplementedException();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DispatcherEventRole ResolveState(
      string ident,
      Request cont,
      ProccesorAccountCollection temp,
      List<AdapterErrorPool> token2)
    {
      throw new NotImplementedException();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Stub CallState(string spec, double caller, double tag, ExceptionRule map2)
    {
      int num = 2;
      bool flag;
      double template;
      Stub stub;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            template = 0.0;
            num = 1;
            continue;
          case 1:
            flag = caller != tag;
            num = 4;
            continue;
          case 3:
          case 5:
            stub = (Stub) new PoolPolicyList(caller, tag, template, false, map2, spec, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
            if (Candidate.StopDispatcher())
            {
              num = 6;
              continue;
            }
            goto label_8;
          case 4:
            if (flag)
            {
              template = caller / (caller - tag);
              goto case 3;
            }
            else
              goto case 3;
          case 6:
            goto label_8;
          default:
            if (Candidate.StopDispatcher())
            {
              num = 5;
              continue;
            }
            goto case 0;
        }
      }
label_8:
      return stub;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Stub RegisterState(
      string spec,
      double cont,
      double third,
      ExceptionRule connection2)
    {
      int num = 2;
      bool flag;
      Stub stub;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            flag = string.IsNullOrEmpty(spec);
            num = 4;
            continue;
          case 1:
          case 4:
            if (!flag)
            {
              stub = (Stub) new PoolPolicyList(cont, -1.0, third, true, connection2, spec, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
              num = 5;
              continue;
            }
            goto label_5;
          case 3:
            goto label_5;
          case 5:
            goto label_7;
          default:
            num = 3;
            continue;
        }
      }
label_5:
      throw new ArgumentException("Invalid name");
label_7:
      return stub;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Utils PatchState(
      string value,
      RulesAccountCollection cfg,
      Factory dic,
      ExceptionRule pred2,
      AdapterErrorPool item3,
      AdapterErrorPool info4)
    {
      int num1 = 1;
      Utils utils;
      while (true)
      {
        bool flag1;
        int num2;
        bool flag2;
        List<AdapterErrorPool> x3;
        switch (num1)
        {
          case 0:
          case 1:
            flag2 = string.IsNullOrEmpty(value);
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto case 6;
          case 2:
          case 3:
            goto label_1;
          case 4:
            utils = (Utils) new Merchant((RegistryPolicyList) null, cfg, pred2, dic, x3, value, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
            num2 = 7;
            break;
          case 5:
            if (!flag2)
            {
              if (cfg != null)
              {
                if (dic != null)
                {
                  flag1 = pred2 == null;
                  goto case 6;
                }
                else
                  goto label_5;
              }
              else
                goto label_3;
            }
            else
            {
              num1 = 3;
              continue;
            }
          case 6:
            if (!flag1)
            {
              x3 = new List<AdapterErrorPool>(2);
              x3.Add(item3);
              x3.Add(info4);
              num2 = 4;
              break;
            }
            goto label_12;
          case 7:
            goto label_18;
          default:
            int num3 = 6;
            num1 = Candidate.TestDispatcher() ? num3 : num3;
            continue;
        }
        num1 = num2;
      }
label_1:
      throw new ArgumentException("Invalid name");
label_3:
      throw new ArgumentException("Geographic coordinate system was null");
label_5:
      throw new ArgumentException("Projection was null");
label_12:
      throw new ArgumentException("Linear unit was null");
label_18:
      return utils;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Factory InstantiateState(string i, string token, List<Interceptor> rule)
    {
      if (string.IsNullOrEmpty(i))
        throw new ArgumentException("Invalid name");
      if (rule == null || rule.Count == 0)
        throw new ArgumentException("Invalid projection parameters");
      return (Factory) new Tokenizer(token, rule, i, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public RegistryPolicyList OrderState(
      string setup,
      AuthorTaskCommentPriority ord,
      Stub state,
      AccountTokenStructBuilder def2)
    {
      int num1 = 2;
      RegistryPolicyList registryPolicyList;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              flag1 = string.IsNullOrEmpty(setup);
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_2;
            case 1:
              if (!flag1)
              {
                flag2 = state == null;
                num2 = 5;
                continue;
              }
              goto label_5;
            case 3:
            case 4:
              goto label_2;
            case 5:
              if (!flag2)
              {
                registryPolicyList = (RegistryPolicyList) new TYPELIBA.Messages.Attribute(state, def2, ord, setup, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
                num2 = 6;
                continue;
              }
              goto label_2;
            case 6:
              goto label_12;
            default:
              goto label_10;
          }
        }
label_10:
        num1 = 4;
      }
label_2:
      throw new ArgumentException("Ellipsoid was null");
label_5:
      throw new ArgumentException("Invalid name");
label_12:
      return registryPolicyList;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PrototypeEventRole DisableState(
      string reference,
      FieldConsumerAdapter visitor,
      double role)
    {
      int num1 = 3;
      if (true)
        goto label_4;
label_1:
      bool flag = string.IsNullOrEmpty(reference);
      int num2 = 4;
label_3:
      num1 = num2;
label_4:
      PrototypeEventRole prototypeEventRole;
      switch (num1)
      {
        case 0:
        case 2:
          throw new ArgumentException("Invalid name");
        case 1:
        case 4:
          if (!flag)
          {
            prototypeEventRole = (PrototypeEventRole) new PageProcessVisitor(role, visitor, reference, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
            num2 = 5;
            goto label_3;
          }
          else
            goto case 0;
        case 3:
          goto label_1;
        case 5:
          return prototypeEventRole;
        default:
          num2 = 0;
          goto label_3;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public RulesAccountCollection SearchState(
      string last,
      FieldConsumerAdapter reg,
      RegistryPolicyList tag,
      PrototypeEventRole cfg2,
      AdapterErrorPool setup3,
      AdapterErrorPool task4)
    {
      int num1 = 5;
      RulesAccountCollection accountCollection;
      while (true)
      {
        int num2 = num1;
        bool flag;
        List<AdapterErrorPool> config2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              flag = string.IsNullOrEmpty(last);
              if (Candidate.StopDispatcher())
              {
                num2 = 2;
                continue;
              }
              goto case 3;
            case 1:
            case 2:
              if (flag)
              {
                if (true)
                {
                  num2 = 4;
                  continue;
                }
                goto label_5;
              }
              else
              {
                config2 = new List<AdapterErrorPool>(2);
                config2.Add(setup3);
                config2.Add(task4);
                goto case 3;
              }
            case 3:
              accountCollection = (RulesAccountCollection) new ListErrorPool(reg, tag, cfg2, config2, last, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
              if (!Candidate.TestDispatcher())
              {
                num2 = 6;
                continue;
              }
              goto case 1;
            case 4:
              goto label_5;
            case 6:
              goto label_11;
            default:
              goto label_9;
          }
        }
label_9:
        num1 = 3;
      }
label_5:
      throw new ArgumentException("Invalid name");
label_11:
      return accountCollection;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Request ValidateState(string last, AuthorTaskCommentPriority map) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ConnectionAccountPage AssetState(
      string reference,
      AuthorTaskCommentPriority b)
    {
      throw new NotImplementedException();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Setter ViewState(
      string asset,
      ConnectionAccountPage attr,
      ExceptionRule res,
      AdapterErrorPool map2)
    {
      throw new NotImplementedException();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Advisor FillObject(
      string task,
      RegistryPolicyList cfg,
      ExceptionRule role,
      PrototypeEventRole key2)
    {
      int num1 = 3;
      Advisor advisor;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              flag = string.IsNullOrEmpty(task);
              num2 = 4;
              continue;
            case 1:
            case 4:
              if (flag)
              {
                num2 = 2;
                continue;
              }
              goto label_3;
            case 2:
              goto label_2;
            case 5:
              goto label_7;
            case 6:
              goto label_10;
            default:
              goto label_6;
          }
        }
label_3:
        List<AdapterErrorPool> cfg2 = new List<AdapterErrorPool>(3);
        cfg2.Add(new AdapterErrorPool("X", LinkTransactionType.Other));
        goto label_7;
label_6:
        num1 = 5;
        continue;
label_7:
        cfg2.Add(new AdapterErrorPool("Y", LinkTransactionType.Other));
        cfg2.Add(new AdapterErrorPool("Z", LinkTransactionType.Other));
        advisor = (Advisor) new AnnotationPropertyImporter(cfg, role, key2, cfg2, task, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
        num1 = 6;
      }
label_2:
      throw new ArgumentException("Invalid name");
label_10:
      return advisor;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Candidate()
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool StopDispatcher() => true;

    internal static bool TestDispatcher() => false;
  }
}
