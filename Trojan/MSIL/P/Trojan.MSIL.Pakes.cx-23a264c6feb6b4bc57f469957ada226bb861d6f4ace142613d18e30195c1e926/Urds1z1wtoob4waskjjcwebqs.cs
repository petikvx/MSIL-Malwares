// Decompiled with JetBrains decompiler
// Type: Urds1z1wtoob4waskjjcwebqs
// Assembly: net, Version=15.4.3508.1109, Culture=neutral, PublicKeyToken=null
// MVID: A137FCB5-FE00-42D4-8178-C1BBFD9418C8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.MSIL.Pakes.cx-23a264c6feb6b4bc57f469957ada226bb861d6f4ace142613d18e30195c1e926.exe

using System;
using System.Text;

public static class Urds1z1wtoob4waskjjcwebqs
{
  public static int qfjnrquufpjndpglj3e1lew0cvhsptjaw = 129;

  public static byte[] Kdsdgtxvv1fwlfukxzrga1x3h(byte[] pnxiuqphqi0k510d0jlovrhiz3mowiq0h)
  {
    for (int index = 0; index < pnxiuqphqi0k510d0jlovrhiz3mowiq0h.Length; ++index)
    {
      char ch = (char) ((uint) Convert.ToChar(pnxiuqphqi0k510d0jlovrhiz3mowiq0h[index]) ^ (uint) Urds1z1wtoob4waskjjcwebqs.qfjnrquufpjndpglj3e1lew0cvhsptjaw);
      pnxiuqphqi0k510d0jlovrhiz3mowiq0h[index] = Convert.ToByte(ch);
    }
    return pnxiuqphqi0k510d0jlovrhiz3mowiq0h;
  }

  public static string D0m30kgqe110xol4nvtqtinn3(string V25pnrapj1tc5xmms)
  {
    int length = V25pnrapj1tc5xmms.Length;
    string str1 = V25pnrapj1tc5xmms.Substring(0, (V25pnrapj1tc5xmms.Length + 1) / 2);
    string str2 = V25pnrapj1tc5xmms.Substring((V25pnrapj1tc5xmms.Length + 1) / 2, V25pnrapj1tc5xmms.Length - (V25pnrapj1tc5xmms.Length + 1) / 2);
    int num = 0;
    StringBuilder stringBuilder = new StringBuilder(str1);
    for (int index = 0; index < str2.Length; ++index)
    {
      stringBuilder.Insert(num + 1, str2[index]);
      num += 2;
    }
    return stringBuilder.ToString();
  }

  public static void RC4(ref byte[] bytes, byte[] key)
  {
    byte[] numArray1 = new byte[256];
    byte[] numArray2 = new byte[256];
    for (int index = 0; index < 256; ++index)
    {
      numArray1[index] = (byte) index;
      numArray2[index] = key[index % key.GetLength(0)];
    }
    int index1 = 0;
    for (int index2 = 0; index2 < 256; ++index2)
    {
      index1 = (index1 + (int) numArray1[index2] + (int) numArray2[index2]) % 256;
      byte num = numArray1[index2];
      numArray1[index2] = numArray1[index1];
      numArray1[index1] = num;
    }
    int index3;
    int index4 = index3 = 0;
    for (int index5 = 0; index5 < bytes.GetLength(0); ++index5)
    {
      index4 = (index4 + 1) % 256;
      index3 = (index3 + (int) numArray1[index4]) % 256;
      byte num = numArray1[index4];
      numArray1[index4] = numArray1[index3];
      numArray1[index3] = num;
      int index6 = ((int) numArray1[index4] + (int) numArray1[index3]) % 256;
      bytes[index5] ^= numArray1[index6];
    }
  }
}
