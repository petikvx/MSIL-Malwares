// Decompiled with JetBrains decompiler
// Type: M8p.26L
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using s65;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace M8p
{
  internal sealed class \u00326L : Stream
  {
    public DateTime? fsR;
    private int B3L;
    internal ys6 \u00375m;
    private bool j49;
    private bool mBU;
    private string \u0036kS;
    private string \u00331F;
    private int O6j;
    internal static readonly DateTime \u0036B9 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
    internal static readonly Encoding \u003246 = Encoding.GetEncoding("iso-8859-1");

    [SpecialName]
    public string WDf() => this.\u00331F;

    [SpecialName]
    public void \u0037Ov([In] string obj0)
    {
      if (this.j49)
        throw new ObjectDisposedException("GZipStream");
      this.\u00331F = obj0;
    }

    [SpecialName]
    public string \u00384T() => this.\u0036kS;

    [SpecialName]
    public void \u0035EB([In] string obj0)
    {
      if (this.j49)
        throw new ObjectDisposedException("GZipStream");
      this.\u0036kS = obj0;
      if (this.\u0036kS == null)
        return;
      if (this.\u0036kS.IndexOf("/") != -1)
        this.\u0036kS = this.\u0036kS.Replace("/", "\\");
      if (this.\u0036kS.EndsWith("\\"))
        throw new Exception("Illegal filename");
      if (this.\u0036kS.IndexOf("\\") == -1)
        return;
      this.\u0036kS = Path.GetFileName(this.\u0036kS);
    }

    void Stream.a95([In] bool obj0)
    {
      try
      {
        if (this.j49)
          return;
        if (obj0 && this.\u00375m != null)
        {
          this.\u00375m.Dispose();
          this.O6j = this.\u00375m.\u0032y3();
        }
        this.j49 = true;
      }
      finally
      {
        // ISSUE: explicit non-virtual call
        __nonvirtual (((Stream) this).Dispose(obj0));
      }
    }

    [SpecialName]
    bool Stream.\u003222()
    {
      if (this.j49)
        throw new ObjectDisposedException("GZipStream");
      return this.\u00375m.\u0038i4.CanRead;
    }

    [SpecialName]
    bool Stream.h81() => false;

    [SpecialName]
    bool Stream.YQv()
    {
      if (this.j49)
        throw new ObjectDisposedException("GZipStream");
      return this.\u00375m.\u0038i4.CanWrite;
    }

    void Stream.d8x()
    {
      if (this.j49)
        throw new ObjectDisposedException("GZipStream");
      ((Stream) this.\u00375m).Flush();
    }

    [SpecialName]
    long Stream.\u00364U() => throw new NotImplementedException();

    [SpecialName]
    long Stream.dqD()
    {
      if (this.\u00375m.F4D == ys6.\u0031j9.\u0023a)
        return this.\u00375m.wq3.\u00314Z + (long) this.B3L;
      return this.\u00375m.F4D == ys6.\u0031j9.\u0023b ? this.\u00375m.wq3.m21 + (long) this.\u00375m.\u0036Dp : 0L;
    }

    [SpecialName]
    void Stream.\u00376m([In] long obj0) => throw new NotImplementedException();

    int Stream.\u0035ik([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
      if (this.j49)
        throw new ObjectDisposedException("GZipStream");
      int num = ((Stream) this.\u00375m).Read(obj0, obj1, obj2);
      if (this.mBU)
        return num;
      this.mBU = true;
      this.\u0035EB(this.\u00375m.f1G);
      this.\u0037Ov(this.\u00375m.o75);
      return num;
    }

    long Stream.w99([In] long obj0, [In] SeekOrigin obj1) => throw new NotImplementedException();

    void Stream.kHe([In] long obj0) => throw new NotImplementedException();

    void Stream.\u003653([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
      if (this.j49)
        throw new ObjectDisposedException("GZipStream");
      if (this.\u00375m.F4D == ys6.\u0031j9.\u0023c)
      {
        if (!this.\u00375m.xw1())
          throw new InvalidOperationException();
        this.B3L = this.\u0032iF();
      }
      ((Stream) this.\u00375m).Write(obj0, obj1, obj2);
    }

    private int \u0032iF()
    {
      byte[] sourceArray1 = this.WDf() == null ? (byte[]) null : \u00326L.\u003246.GetBytes(this.WDf());
      byte[] sourceArray2 = this.\u00384T() == null ? (byte[]) null : \u00326L.\u003246.GetBytes(this.\u00384T());
      int num1 = this.WDf() == null ? 0 : sourceArray1.Length + 1;
      int num2 = this.\u00384T() == null ? 0 : sourceArray2.Length + 1;
      byte[] numArray1 = new byte[10 + num1 + num2];
      int num3 = 0;
      byte[] numArray2 = numArray1;
      int index1 = num3;
      int num4 = index1 + 1;
      numArray2[index1] = (byte) 31;
      byte[] numArray3 = numArray1;
      int index2 = num4;
      int num5 = index2 + 1;
      numArray3[index2] = (byte) 139;
      byte[] numArray4 = numArray1;
      int index3 = num5;
      int num6 = index3 + 1;
      numArray4[index3] = (byte) 8;
      byte num7 = 0;
      if (this.WDf() != null)
        num7 ^= (byte) 16;
      if (this.\u00384T() != null)
        num7 ^= (byte) 8;
      byte[] numArray5 = numArray1;
      int index4 = num6;
      int destinationIndex1 = index4 + 1;
      int num8 = (int) num7;
      numArray5[index4] = (byte) num8;
      if (!this.fsR.HasValue)
        this.fsR = new DateTime?(DateTime.Now);
      Array.Copy((Array) BitConverter.GetBytes((int) (this.fsR.Value - \u00326L.\u0036B9).TotalSeconds), 0, (Array) numArray1, destinationIndex1, 4);
      int num9 = destinationIndex1 + 4;
      byte[] numArray6 = numArray1;
      int index5 = num9;
      int num10 = index5 + 1;
      numArray6[index5] = (byte) 0;
      byte[] numArray7 = numArray1;
      int index6 = num10;
      int destinationIndex2 = index6 + 1;
      numArray7[index6] = byte.MaxValue;
      if (num2 != 0)
      {
        Array.Copy((Array) sourceArray2, 0, (Array) numArray1, destinationIndex2, num2 - 1);
        int num11 = destinationIndex2 + (num2 - 1);
        byte[] numArray8 = numArray1;
        int index7 = num11;
        destinationIndex2 = index7 + 1;
        numArray8[index7] = (byte) 0;
      }
      if (num1 != 0)
      {
        Array.Copy((Array) sourceArray1, 0, (Array) numArray1, destinationIndex2, num1 - 1);
        int num12 = destinationIndex2 + (num1 - 1);
        byte[] numArray9 = numArray1;
        int index8 = num12;
        int num13 = index8 + 1;
        numArray9[index8] = (byte) 0;
      }
      this.\u00375m.\u0038i4.Write(numArray1, 0, numArray1.Length);
      return numArray1.Length;
    }
  }
}
