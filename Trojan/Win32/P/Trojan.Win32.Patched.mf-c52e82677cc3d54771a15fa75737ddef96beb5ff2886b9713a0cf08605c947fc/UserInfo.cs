// Decompiled with JetBrains decompiler
// Type: activation.UserInfo
// Assembly: Activation, Version=1.0.0.10170, Culture=neutral, PublicKeyToken=null
// MVID: 2DB4F8B3-8DF5-4A65-8363-C3E1D25DD750
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Patched.mf-c52e82677cc3d54771a15fa75737ddef96beb5ff2886b9713a0cf08605c947fc.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace activation
{
  internal class UserInfo
  {
    private UserInfo()
    {
    }

    [DllImport("Wtsapi32.dll")]
    private static extern bool WTSQueryUserToken(uint SessionId, ref IntPtr phToken);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool ProcessIdToSessionId(uint dwProcessId, ref uint pSessionId);

    [DllImport("Advapi32.dll", SetLastError = true)]
    private static extern bool ImpersonateLoggedOnUser(IntPtr hToken);

    [DllImport("Advapi32.dll", SetLastError = true)]
    private static extern bool RevertToSelf();

    [DllImport("Kernel32.dll", SetLastError = true)]
    private static extern bool CloseHandle(IntPtr hObject);

    public static bool CreateProcessAsActiveUserImpersonated(
      ref string strAutoConfigProxy,
      ref string strLANProxyServer)
    {
      bool userImpersonated = false;
      IntPtr zero1 = IntPtr.Zero;
      uint maxValue = uint.MaxValue;
      if (UserInfo.ProcessIdToSessionId((uint) Process.GetCurrentProcess().Id, ref maxValue) && UserInfo.WTSQueryUserToken(maxValue, ref zero1))
      {
        bool flag = false;
        if (zero1 != IntPtr.Zero)
          flag = UserInfo.ImpersonateLoggedOnUser(zero1);
        if (flag)
          UserInfo.GetIEConfigProxyServer(ref strAutoConfigProxy, ref strLANProxyServer);
        if (flag)
          UserInfo.RevertToSelf();
        if (zero1 != IntPtr.Zero)
        {
          UserInfo.CloseHandle(zero1);
          IntPtr zero2 = IntPtr.Zero;
        }
      }
      return userImpersonated;
    }

    public static void GetIEConfigProxyServer(
      ref string strAutoConfigProxy,
      ref string strLANProxyServer)
    {
      Win32Api.WINHTTP_CURRENT_USER_IE_PROXY_CONFIG pstProxyConfig = new Win32Api.WINHTTP_CURRENT_USER_IE_PROXY_CONFIG();
      pstProxyConfig.fAutoDetect = false;
      pstProxyConfig.lpszAutoConfigUrl = IntPtr.Zero;
      pstProxyConfig.lpszProxy = IntPtr.Zero;
      pstProxyConfig.lpszProxyBypass = IntPtr.Zero;
      bool configForCurrentUser = Win32Api.WinHttpGetIEProxyConfigForCurrentUser(ref pstProxyConfig);
      strAutoConfigProxy = Marshal.PtrToStringUni(pstProxyConfig.lpszAutoConfigUrl);
      strLANProxyServer = Marshal.PtrToStringUni(pstProxyConfig.lpszProxy);
      if (!configForCurrentUser)
        return;
      if (!string.IsNullOrEmpty(strAutoConfigProxy))
        Win32Api.GlobalFree(pstProxyConfig.lpszAutoConfigUrl);
      if (!string.IsNullOrEmpty(Marshal.PtrToStringUni(pstProxyConfig.lpszProxy)))
        Win32Api.GlobalFree(pstProxyConfig.lpszProxy);
      if (!string.IsNullOrEmpty(Marshal.PtrToStringUni(pstProxyConfig.lpszProxyBypass)))
        Win32Api.GlobalFree(pstProxyConfig.lpszProxyBypass);
    }
  }
}
