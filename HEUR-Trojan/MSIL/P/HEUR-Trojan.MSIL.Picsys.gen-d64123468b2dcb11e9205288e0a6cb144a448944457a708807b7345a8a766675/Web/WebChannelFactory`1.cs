// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.WebChannelFactory`1
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Runtime.InteropServices;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;

namespace System.ServiceModel.Web
{
  [ComVisible(false)]
  public class WebChannelFactory<TChannel> : ChannelFactory<TChannel> where TChannel : class
  {
    public WebChannelFactory()
    {
    }

    public WebChannelFactory(Binding binding)
      : base(binding)
    {
    }

    public WebChannelFactory(ServiceEndpoint endpoint)
      : base(endpoint)
    {
    }

    public WebChannelFactory(string endpointConfigurationName)
      : base(endpointConfigurationName)
    {
    }

    public WebChannelFactory(System.Type channelType)
      : base(channelType)
    {
    }

    public WebChannelFactory(Uri remoteAddress)
      : this(WebChannelFactory<TChannel>.GetDefaultBinding(remoteAddress), remoteAddress)
    {
    }

    public WebChannelFactory(Binding binding, Uri remoteAddress)
      : base(binding, remoteAddress != (Uri) null ? new EndpointAddress(remoteAddress, new AddressHeader[0]) : (EndpointAddress) null)
    {
    }

    public WebChannelFactory(string endpointConfigurationName, Uri remoteAddress)
      : base(endpointConfigurationName, remoteAddress != (Uri) null ? new EndpointAddress(remoteAddress, new AddressHeader[0]) : (EndpointAddress) null)
    {
    }

    protected override void OnOpening()
    {
      if (this.Endpoint == null)
        return;
      if (this.Endpoint.Binding == null && this.Endpoint.Address != (EndpointAddress) null)
        this.Endpoint.Binding = WebChannelFactory<TChannel>.GetDefaultBinding(this.Endpoint.Address.Uri);
      WebServiceHost.SetRawContentTypeMapperIfNecessary(this.Endpoint, false);
      if (this.Endpoint.Behaviors.Find<WebHttpBehavior>() == null)
        this.Endpoint.Behaviors.Add((IEndpointBehavior) new WebHttpBehavior());
      base.OnOpening();
    }

    private static Binding GetDefaultBinding(Uri remoteAddress)
    {
      if (remoteAddress == (Uri) null || remoteAddress.Scheme != Uri.UriSchemeHttp && remoteAddress.Scheme != Uri.UriSchemeHttps)
        return (Binding) null;
      if (remoteAddress.Scheme == Uri.UriSchemeHttp)
        return (Binding) new WebHttpBinding();
      return (Binding) new WebHttpBinding()
      {
        Security = {
          Mode = WebHttpSecurityMode.Transport,
          Transport = {
            ClientCredentialType = HttpClientCredentialType.None
          }
        }
      };
    }
  }
}
