// Decompiled with JetBrains decompiler
// Type: TGL.Bridges.BaseBridge
// Assembly: InvalidOleVariantTypeExcept, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9E82E8E9-C8CD-41F7-BA61-2A9379AE4148
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-02b77b24d467552510c0f56dbde53c82e4e932dcaeb0e08fcfec00d4c359a9b9.exe

using InvalidOleVariantTypeExcept.Filters;
using InvalidOleVariantTypeExcept.Messages;
using System;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using TGL.Licensing;

namespace TGL.Bridges
{
  public abstract class BaseBridge
  {
    public abstract void ConcatResolver(PoolFieldMessage info);

    public abstract void CompareResolver(PoolFieldMessage asset);

    public abstract PoolFieldMessage ReadResolver(PoolFieldMessage init);

    public abstract bool CountResolver(string param);

    public abstract void InitResolver();

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected string SetupRecord(string v)
    {
      using (SHA1 shA1 = SHA1.Create())
      {
        try
        {
          byte[] bytes = Encoding.UTF8.GetBytes(v);
          int num = 2;
          while (true)
          {
            switch (num)
            {
              case 0:
              case 2:
                goto label_3;
              case 1:
              case 3:
                goto label_6;
              default:
                num = 3;
                continue;
            }
          }
label_3:
          byte[] hash = shA1.ComputeHash(bytes);
label_6:
          return Encoding.UTF8.GetString(hash);
        }
        catch (Exception ex)
        {
          throw new Exception(RoleValueFilter.RestartVisitor(2084));
        }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected BaseBridge()
    {
      UtilsContextLicense.ListWorker();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool QueryInfo() => true;

    internal static bool ConnectInfo() => false;
  }
}
