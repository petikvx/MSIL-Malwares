// Decompiled with JetBrains decompiler
// Type: BlockGameApp.Models.Player
// Assembly: FormatterAssemblySt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 877C36BA-E94F-4F44-80EE-D68074F87B8D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqs-8ed13e4fb92eef7aee7b0a64e9a77c702327206d71ea5cb0806d987f1b14ea9c.exe

using System.Drawing;

namespace BlockGameApp.Models
{
  public class Player : Sprite, IMovable
  {
    public Player(int x, int y, int width, int height, Rectangle bounds, int velocity)
      : this(x, y, width, height, bounds, velocity, Color.Empty, Color.Empty)
    {
    }

    public Player(
      int x,
      int y,
      int width,
      int height,
      Rectangle bounds,
      int velocity,
      Color fill,
      Color outline,
      int outlineWidth = 2)
      : base(x, y, width, height, fill, outline, (float) outlineWidth)
    {
      this.Bounds = bounds;
      this.Velocity = velocity;
    }

    public virtual void Move(float delta)
    {
      if (this.Direction == GameTools.Direction.None)
        return;
      int num1 = this.X;
      int num2 = this.Y;
      switch (this.Direction)
      {
        case GameTools.Direction.Up:
          num2 = (int) ((double) num2 - (double) this.Velocity * (double) delta);
          break;
        case GameTools.Direction.Right:
          num1 = (int) ((double) num1 + (double) this.Velocity * (double) delta);
          break;
        case GameTools.Direction.Down:
          num2 = (int) ((double) num2 + (double) this.Velocity * (double) delta);
          break;
        case GameTools.Direction.Left:
          num1 = (int) ((double) num1 - (double) this.Velocity * (double) delta);
          break;
      }
      if (num1 < this.Bounds.X || num1 > this.Bounds.Width - this.Width)
        num1 = this.X;
      if (num2 < this.Bounds.Y || num2 > this.Bounds.Height - this.Height)
        num2 = this.Y;
      this.X = num1;
      this.Y = num2;
    }

    public GameTools.Direction Direction { get; set; } = GameTools.Direction.None;

    public Rectangle Bounds { get; set; }

    public int Velocity { get; set; }
  }
}
