// Decompiled with JetBrains decompiler
// Type: RandomFieldGenerator.Game
// Assembly: SharedL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5FA811EA-CF0C-440A-AEDF-38D5498B358C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-a4a929e03d9ad6d0894ca069d45c8f534a26e4b7b5116514d71bfc1522c4dce2.exe

using System;
using System.Collections.Generic;

namespace RandomFieldGenerator
{
  public class Game
  {
    private int numberOfRows;
    private int numberOfColumns;
    public List<int> fields;
    public Random random = new Random();
    public StartForm form;

    public Game(int numberOfRows, int numberOfColumns, StartForm form)
    {
      this.numberOfRows = numberOfRows;
      this.numberOfColumns = numberOfColumns;
      this.FillFieldsList(this.numberOfRows, this.numberOfColumns);
      this.form = form;
    }

    public string DisplayField()
    {
      string str = "END";
      if (this.fields.Count > 0)
      {
        int nextField = this.GetNextField();
        int num1 = (int) Math.Floor((double) nextField / (double) this.numberOfColumns);
        int num2 = nextField % this.numberOfColumns;
        str = ((char) (num1 + 65)).ToString() + (num2 + 1).ToString();
      }
      return str;
    }

    public void FillFieldsList(int x, int y)
    {
      int num = x * y;
      this.fields = new List<int>();
      for (int index = 0; index < num; ++index)
        this.fields.Add(index);
    }

    public int GetNextField()
    {
      int index = this.random.Next(0, this.fields.Count);
      int field = this.fields[index];
      this.fields.RemoveAt(index);
      return field;
    }

    public int GetNextField(string field)
    {
      int nextField = ((int) field[0] - 65) * this.numberOfColumns + Convert.ToInt32(field[1].ToString()) - 1;
      this.fields.Remove(nextField);
      return nextField;
    }
  }
}
