// Decompiled with JetBrains decompiler
// Type: Dark_RAT.Register
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Dark_RAT.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Dark_RAT
{
  [DesignerGenerated]
  public class Register : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    [AccessedThroughProperty("TextBox1")]
    private TextBox _TextBox1;
    [AccessedThroughProperty("TextBox2")]
    private TextBox _TextBox2;
    [AccessedThroughProperty("Label2")]
    private Label _Label2;
    [AccessedThroughProperty("TextBox3")]
    private TextBox _TextBox3;
    [AccessedThroughProperty("Label3")]
    private Label _Label3;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("PictureBox1")]
    private PictureBox _PictureBox1;
    private iniAPI ini;
    private Point Point;
    private int X;
    private int Y;

    [DebuggerNonUserCode]
    static Register()
    {
    }

    public Register()
    {
      this.MouseMove += new MouseEventHandler(this.Me_MouseMove);
      this.FormClosing += new FormClosingEventHandler(this.Register_FormClosing);
      this.Load += new EventHandler(this.Register_Load);
      this.MouseDown += new MouseEventHandler(this.Me_MouseDown);
      Register.__ENCAddToList((object) this);
      this.ini = new iniAPI();
      this.Point = new Point();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Register.__ENCList)
      {
        if (Register.__ENCList.Count == Register.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Register.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Register.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Register.__ENCList[index1] = Register.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Register.__ENCList.RemoveRange(index1, checked (Register.__ENCList.Count - index1));
          Register.__ENCList.Capacity = Register.__ENCList.Count;
        }
        Register.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Register));
      this.Label1 = new Label();
      this.TextBox1 = new TextBox();
      this.TextBox2 = new TextBox();
      this.Label2 = new Label();
      this.TextBox3 = new TextBox();
      this.Label3 = new Label();
      this.Button1 = new Button();
      this.PictureBox1 = new PictureBox();
      ((ISupportInitialize) this.PictureBox1).BeginInit();
      this.SuspendLayout();
      this.Label1.AutoSize = true;
      this.Label1.BackColor = Color.Transparent;
      this.Label1.ForeColor = Color.White;
      Label label1_1 = this.Label1;
      Point point1 = new Point(14, 48);
      Point point2 = point1;
      label1_1.Location = point2;
      this.Label1.Name = "Label1";
      Label label1_2 = this.Label1;
      Size size1 = new Size(58, 13);
      Size size2 = size1;
      label1_2.Size = size2;
      this.Label1.TabIndex = 0;
      this.Label1.Text = "Username:";
      TextBox textBox1_1 = this.TextBox1;
      point1 = new Point(17, 64);
      Point point3 = point1;
      textBox1_1.Location = point3;
      this.TextBox1.Name = "TextBox1";
      TextBox textBox1_2 = this.TextBox1;
      size1 = new Size(229, 20);
      Size size3 = size1;
      textBox1_2.Size = size3;
      this.TextBox1.TabIndex = 1;
      TextBox textBox2_1 = this.TextBox2;
      point1 = new Point(17, 103);
      Point point4 = point1;
      textBox2_1.Location = point4;
      this.TextBox2.Name = "TextBox2";
      TextBox textBox2_2 = this.TextBox2;
      size1 = new Size(229, 20);
      Size size4 = size1;
      textBox2_2.Size = size4;
      this.TextBox2.TabIndex = 3;
      this.TextBox2.UseSystemPasswordChar = true;
      this.Label2.AutoSize = true;
      this.Label2.BackColor = Color.Transparent;
      this.Label2.ForeColor = Color.White;
      Label label2_1 = this.Label2;
      point1 = new Point(14, 87);
      Point point5 = point1;
      label2_1.Location = point5;
      this.Label2.Name = "Label2";
      Label label2_2 = this.Label2;
      size1 = new Size(56, 13);
      Size size5 = size1;
      label2_2.Size = size5;
      this.Label2.TabIndex = 2;
      this.Label2.Text = "Password:";
      TextBox textBox3_1 = this.TextBox3;
      point1 = new Point(17, 144);
      Point point6 = point1;
      textBox3_1.Location = point6;
      this.TextBox3.Name = "TextBox3";
      this.TextBox3.ReadOnly = true;
      TextBox textBox3_2 = this.TextBox3;
      size1 = new Size(229, 20);
      Size size6 = size1;
      textBox3_2.Size = size6;
      this.TextBox3.TabIndex = 5;
      this.Label3.AutoSize = true;
      this.Label3.BackColor = Color.Transparent;
      this.Label3.ForeColor = Color.White;
      Label label3_1 = this.Label3;
      point1 = new Point(14, 128);
      Point point7 = point1;
      label3_1.Location = point7;
      this.Label3.Name = "Label3";
      Label label3_2 = this.Label3;
      size1 = new Size(36, 13);
      Size size7 = size1;
      label3_2.Size = size7;
      this.Label3.TabIndex = 4;
      this.Label3.Text = "Serial:";
      Button button1_1 = this.Button1;
      point1 = new Point(17, 170);
      Point point8 = point1;
      button1_1.Location = point8;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(229, 23);
      Size size8 = size1;
      button1_2.Size = size8;
      this.Button1.TabIndex = 6;
      this.Button1.Text = "Register/Extend";
      this.Button1.UseVisualStyleBackColor = true;
      this.PictureBox1.BackColor = Color.Transparent;
      this.PictureBox1.Image = (Image) componentResourceManager.GetObject("PictureBox1.Image");
      PictureBox pictureBox1_1 = this.PictureBox1;
      point1 = new Point(246, 4);
      Point point9 = point1;
      pictureBox1_1.Location = point9;
      this.PictureBox1.Name = "PictureBox1";
      PictureBox pictureBox1_2 = this.PictureBox1;
      size1 = new Size(22, 22);
      Size size9 = size1;
      pictureBox1_2.Size = size9;
      this.PictureBox1.TabIndex = 9;
      this.PictureBox1.TabStop = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.Black;
      this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
      size1 = new Size(266, 209);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.PictureBox1);
      this.Controls.Add((Control) this.Button1);
      this.Controls.Add((Control) this.TextBox3);
      this.Controls.Add((Control) this.Label3);
      this.Controls.Add((Control) this.TextBox2);
      this.Controls.Add((Control) this.Label2);
      this.Controls.Add((Control) this.TextBox1);
      this.Controls.Add((Control) this.Label1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (Register);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = nameof (Register);
      ((ISupportInitialize) this.PictureBox1).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Label Label1
    {
      [DebuggerNonUserCode] get => this._Label1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Label1 = value;
    }

    internal virtual TextBox TextBox1
    {
      [DebuggerNonUserCode] get => this._TextBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._TextBox1 = value;
    }

    internal virtual TextBox TextBox2
    {
      [DebuggerNonUserCode] get => this._TextBox2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._TextBox2 = value;
    }

    internal virtual Label Label2
    {
      [DebuggerNonUserCode] get => this._Label2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Label2 = value;
    }

    internal virtual TextBox TextBox3
    {
      [DebuggerNonUserCode] get => this._TextBox3;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._TextBox3 = value;
    }

    internal virtual Label Label3
    {
      [DebuggerNonUserCode] get => this._Label3;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Label3 = value;
    }

    internal virtual Button Button1
    {
      [DebuggerNonUserCode] get => this._Button1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual PictureBox PictureBox1
    {
      [DebuggerNonUserCode] get => this._PictureBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.PictureBox1_Click);
        if (this._PictureBox1 != null)
          this._PictureBox1.Click -= eventHandler;
        this._PictureBox1 = value;
        if (this._PictureBox1 == null)
          return;
        this._PictureBox1.Click += eventHandler;
      }
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      this.Button1.Enabled = false;
      antis.AllAntis();
      Host_file_check.CheckHost("DarkRAT", "46.4.23.136");
      int num = (int) Interaction.MsgBox((object) Conversions.ToString(LoginSystem.GetSource(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("http://darkrat.info/register.php?username=" + this.TextBox1.Text + "&password=" + Encryption.HashData(this.TextBox2.Text) + "&hwid="), LoginSystem.HWID()), (object) "&serial="), (object) this.TextBox3.Text)))));
      this.Button1.Enabled = true;
    }

    private void Register_FormClosing(object sender, FormClosingEventArgs e) => MyProject.Forms.LoginForm.Show();

    private void Register_Load(object sender, EventArgs e)
    {
      this.TextBox1.Text = Conversions.ToString(this.ini.GetUsername());
      this.TextBox2.Text = Conversions.ToString(this.ini.GetPassword());
    }

    private void PictureBox1_Click(object sender, EventArgs e) => this.Close();

    private void Me_MouseDown(object sender, MouseEventArgs e)
    {
      this.X = checked (Control.MousePosition.X - this.Location.X);
      this.Y = checked (Control.MousePosition.Y - this.Location.Y);
    }

    private void Me_MouseMove(object sender, MouseEventArgs e)
    {
      if (e.Button != MouseButtons.Left)
        return;
      this.Point = Control.MousePosition;
      checked { this.Point.X -= this.X; }
      checked { this.Point.Y -= this.Y; }
      this.Location = this.Point;
    }
  }
}
