// Decompiled with JetBrains decompiler
// Type: Dio.DioButton
// Assembly: جdk6氏صڤSnb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC493AC2-8E19-4B7E-8F8B-A7CB6CD6346F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Fareit.gen-125c88c0a34185a8a6c38ba5e7d461ccc5b9d8a1acc87871a618c3e15c32be42.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace Dio
{
  public class DioButton : Button
  {
    private readonly Color _downOverlay = Color.FromArgb(70, 0, 0, 0);
    private readonly Color _hoverOverlay = Color.FromArgb(45, 35, 35, 35);
    private Color _overlapColor = Color.FromArgb(0, 0, 0, 0);

    public DioButton()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.CacheText | ControlStyles.DoubleBuffer | ControlStyles.OptimizedDoubleBuffer, true);
      this.ShadowSize = 4;
      this.ShadowColor = DioDefaults.DioDefaultshadowColor;
      this.BackColor = DioDefaults.DefaultBackColor;
      this.ForeColor = DioDefaults.DefaultForeColor;
      this.Font = DioDefaults.DefaultFont;
      this.HandleCreated += (EventHandler) ((sender, args) => this.DoubleBuffered = true);
    }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public int ShadowSize { get; set; }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public Color ShadowColor { get; set; }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public Color BorderColor { get; set; }

    protected override void OnPaint(PaintEventArgs pevent)
    {
      Graphics graphics = pevent.Graphics;
      graphics.Clear(this.Parent.BackColor);
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
      using (SolidBrush solidBrush1 = new SolidBrush(this.BackColor))
      {
        using (SolidBrush solidBrush2 = new SolidBrush(this.ForeColor))
        {
          using (SolidBrush solidBrush3 = new SolidBrush(this._overlapColor))
          {
            using (Pen pen = new Pen(this.BorderColor))
            {
              Rectangle rect = new Rectangle(-1, -1, this.Width + 2, this.Height + 2 - this.ShadowSize);
              graphics.SetClip(new Rectangle(0, 0, this.Width, this.Height - this.ShadowSize + 1));
              graphics.FillRectangle((Brush) solidBrush1, rect);
              graphics.DrawRectangle(pen, 0, 0, this.Width - 1, this.Height - this.ShadowSize);
              graphics.FillRectangle((Brush) solidBrush3, rect);
              SizeF sizeF = graphics.MeasureString(this.Text, this.Font);
              PointF point = new PointF(0.0f, 0.0f);
              if (this.TextAlign == ContentAlignment.MiddleCenter)
                point = new PointF((float) (((double) this.Width - (double) sizeF.Width) / 2.0), (float) (((double) this.Height - (double) sizeF.Height - (double) this.ShadowSize) / 2.0));
              else if (this.TextAlign == ContentAlignment.MiddleLeft)
              {
                point = new PointF(3f, (float) (((double) this.Height - (double) sizeF.Height - (double) this.ShadowSize) / 2.0));
              }
              else
              {
                if (this.TextAlign != ContentAlignment.MiddleRight)
                  throw new NotImplementedException();
                point = new PointF((float) (this.Width - 4) - sizeF.Width, (float) (((double) this.Height - (double) sizeF.Height - (double) this.ShadowSize) / 2.0));
              }
              graphics.DrawString(this.Text, this.Font, (Brush) solidBrush2, point);
            }
          }
        }
      }
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      this._overlapColor = this._hoverOverlay;
      this.Invalidate();
      base.OnMouseEnter(e);
    }

    protected override void OnMouseUp(MouseEventArgs e)
    {
      this._overlapColor = this._hoverOverlay;
      this.Invalidate();
      base.OnMouseUp(e);
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      this._overlapColor = Color.FromArgb(0, 0, 0, 0);
      this.Invalidate();
      base.OnMouseLeave(e);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      this._overlapColor = this._downOverlay;
      this.Invalidate();
      base.OnMouseDown(e);
    }

    protected override void OnGotFocus(EventArgs e)
    {
      this._overlapColor = this._hoverOverlay;
      this.Invalidate();
      base.OnGotFocus(e);
    }

    protected override void OnLostFocus(EventArgs e)
    {
      this._overlapColor = Color.FromArgb(0, 0, 0, 0);
      this.Invalidate();
      base.OnLostFocus(e);
    }

    protected override void OnKeyDown(KeyEventArgs kevent)
    {
      if (kevent.KeyCode == Keys.Space)
        this._overlapColor = this._downOverlay;
      this.Invalidate();
      base.OnKeyDown(kevent);
    }

    protected override void OnKeyUp(KeyEventArgs kevent)
    {
      if (kevent.KeyCode == Keys.Space)
        this._overlapColor = this._hoverOverlay;
      base.OnKeyUp(kevent);
    }
  }
}
