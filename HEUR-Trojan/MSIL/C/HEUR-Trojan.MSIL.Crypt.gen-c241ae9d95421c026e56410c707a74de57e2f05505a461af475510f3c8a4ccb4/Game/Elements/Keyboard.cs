// Decompiled with JetBrains decompiler
// Type: Game.Elements.Keyboard
// Assembly: IPropertyVa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C23A2FEC-DAFF-46A7-87BE-130D61523A70
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c241ae9d95421c026e56410c707a74de57e2f05505a461af475510f3c8a4ccb4.exe

using System.Windows.Forms;

namespace Game.Elements
{
  public class Keyboard
  {
    public bool Left { get; private set; }

    public bool Right { get; private set; }

    public bool Up { get; private set; }

    public bool Down { get; private set; }

    public bool Space { get; private set; }

    public void SetKey(Keys key)
    {
label_1:
      int num1 = -155396610;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1671958367)) % 16U)
        {
          case 0:
            flag2 = key == Keys.Up;
            num1 = -1469184966;
            continue;
          case 1:
            this.Space = true;
            num1 = (int) num2 * 785391161 ^ -1567435115;
            continue;
          case 2:
            goto label_1;
          case 3:
            flag1 = key == Keys.Space;
            num1 = -703514587;
            continue;
          case 4:
            int num3 = !flag1 ? -703540041 : (num3 = -1556508776);
            num1 = num3 ^ (int) num2 * -2111133070;
            continue;
          case 5:
            int num4;
            num1 = num4 = key == Keys.Right ? -830149797 : (num4 = -1159865871);
            continue;
          case 6:
            int num5;
            num1 = num5 = key == Keys.Down ? -1594603427 : (num5 = -708411246);
            continue;
          case 7:
            this.Left = true;
            num1 = (int) num2 * -1148567869 ^ 264064989;
            continue;
          case 8:
            this.Up = true;
            num1 = (int) num2 * 186585230 ^ -878040393;
            continue;
          case 9:
            num1 = (int) num2 * 524131187 ^ -324991985;
            continue;
          case 10:
            this.Right = true;
            num1 = (int) num2 * 2099799670 ^ 22632653;
            continue;
          case 11:
            int num6 = !flag2 ? 2023666777 : (num6 = 1370210023);
            num1 = num6 ^ (int) num2 * -2065570854;
            continue;
          case 12:
            this.Down = true;
            num1 = (int) num2 * -349592777 ^ -275270986;
            continue;
          case 13:
            num1 = (int) num2 * 1782845343 ^ 964391164;
            continue;
          case 14:
            goto label_3;
          case 15:
            int num7 = key == Keys.Left ? -1392561999 : (num7 = -1206387501);
            num1 = num7 ^ (int) num2 * 1081442201;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    public void Clear()
    {
      this.Left = false;
label_1:
      int num1 = 341382117;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1115347980)) % 7U)
        {
          case 0:
            this.Down = false;
            num1 = (int) num2 * 1216999630 ^ 1854197135;
            continue;
          case 1:
            num1 = (int) num2 * 256401991 ^ -1807727598;
            continue;
          case 2:
            goto label_1;
          case 4:
            this.Up = false;
            num1 = (int) num2 * -1342313317 ^ -69576706;
            continue;
          case 5:
            num1 = (int) num2 * 2113179895 ^ 86359342;
            continue;
          case 6:
            this.Right = false;
            num1 = (int) num2 * -543039826 ^ 1988113598;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      this.Space = false;
    }
  }
}
