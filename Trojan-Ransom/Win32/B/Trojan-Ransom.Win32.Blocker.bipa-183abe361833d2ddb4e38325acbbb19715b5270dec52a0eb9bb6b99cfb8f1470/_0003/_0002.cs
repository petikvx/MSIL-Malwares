// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Server.packed, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 712FD340-1A8D-4ADA-8620-0D072E5BB482
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bipa-183abe361833d2ddb4e38325acbbb19715b5270dec52a0eb9bb6b99cfb8f1470.exe

using \u0003;
using \u0004;
using System;
using System.Runtime.InteropServices;

namespace \u0003
{
  internal struct \u0002
  {
    private \u0003\u2002.\u0001 \u0001;

    public \u0002([In] int obj0)
    {
      this.\u0001.\u0001 = obj0;
      this.\u0001.\u0001 = new Ⴈ.Ⴐ[1 << obj0];
    }

    public void \u0001()
    {
      int num1 = 4;
      while (true)
      {
        if (num1 != 0)
          goto label_12;
label_3:
        int num2;
        uint index;
        if (num1 != 0)
        {
          if (true)
            goto label_14;
label_5:
          int num3 = 0;
          if (num3 != 0)
          {
            num1 = num3;
            continue;
          }
          num2 = num3;
          if (false)
            goto label_6;
          else
            goto label_13;
label_14:
          index = (uint) num1;
          goto label_5;
        }
        else
          goto label_10;
label_6:
        num2 = 0;
        goto label_13;
label_10:
        num2 = num1;
        goto label_13;
label_12:
        num2 = num1;
label_13:
        switch (num2)
        {
          case 0:
          case 1:
            long num4 = (long) index;
            int num5 = 1;
            if (num5 != 0)
              num5 <<= this.\u0001.\u0001;
            long num6 = (long) num5;
            num1 = num4 < num6 ? 5 : 6;
            goto label_10;
          case 2:
          case 5:
            this.\u0001.\u0001[(IntPtr) index].\u0001();
            goto case 3;
          case 3:
            ++index;
            goto label_6;
          case 6:
            goto label_11;
          default:
            num1 = 1;
            goto label_3;
        }
      }
label_11:;
    }

    public unsafe uint \u0001([In] \u0003.\u0003 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(8);
label_17:
      *(int*) voidPtr = 1;
      *(int*) ((IntPtr) voidPtr + 4) = this.\u0001.\u0001;
      int num1 = 1;
      if (false)
        goto label_3;
label_1:
      int num2;
      while (true)
      {
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_17;
            case 1:
            case 5:
              num2 = *(int*) ((IntPtr) voidPtr + 4);
              goto label_8;
            case 2:
              *(int*) voidPtr = ((int) *(uint*) voidPtr << 1) + (int) this.\u0001.\u0001[(IntPtr) *(uint*) voidPtr].\u0001(obj0);
              goto label_5;
            case 3:
            case 6:
              goto label_13;
            case 7:
              *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) - 1;
              num1 = 1;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.\u0001);
              goto label_3;
          }
        }
        goto label_13;
label_5:
        num1 = 7;
        continue;
label_13:
        if (false)
          goto label_5;
        else
          break;
      }
      int num3 = (int) *(uint*) voidPtr;
      int num4;
      while (true)
      {
        int num5 = 1 << this.\u0001.\u0001;
        num4 = num3 - num5;
        if (false)
          num3 = num4;
        else
          break;
      }
      return (uint) num4;
label_3:
      num1 = 0;
      if (false)
        goto label_11;
      else
        goto label_1;
label_8:
      int num6;
      if (num2 <= 0)
        num6 = 3;
      else
        goto label_11;
label_10:
      num1 = num6;
      goto label_1;
label_11:
      num2 = 2;
      if (num2 != 0)
      {
        num6 = num2;
        goto label_10;
      }
      else
        goto label_8;
    }

    public unsafe uint \u0002([In] \u0003.\u0003 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(16);
label_9:
      *(int*) voidPtr = 1;
      *(int*) ((IntPtr) voidPtr + 4) = 0;
label_10:
      *(int*) ((IntPtr) voidPtr + 8) = 0;
      int num = 5;
      while (true)
      {
        switch (num)
        {
          case 1:
            goto label_7;
          case 2:
            *(int*) ((IntPtr) voidPtr + 4) = (int) *(uint*) ((IntPtr) voidPtr + 4) | (int) *(uint*) ((IntPtr) voidPtr + 12) << *(int*) ((IntPtr) voidPtr + 8);
            num = 9;
            continue;
          case 3:
            goto label_10;
          case 4:
            goto label_9;
          case 5:
            num = *(int*) ((IntPtr) voidPtr + 8) < this.\u0001.\u0001 ? 7 : 1;
            continue;
          case 6:
            *(int*) voidPtr = (int) *(uint*) voidPtr + (int) *(uint*) ((IntPtr) voidPtr + 12);
            goto case 2;
          case 7:
            *(int*) ((IntPtr) voidPtr + 12) = (int) this.\u0001.\u0001[(IntPtr) *(uint*) voidPtr].\u0001(obj0);
            num = 8;
            continue;
          case 8:
            *(int*) voidPtr = (int) *(uint*) voidPtr << 1;
            goto case 6;
          case 9:
            *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + 1;
            num = 5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.\u0002);
            num = 4;
            continue;
        }
      }
label_7:
      return *(uint*) ((IntPtr) voidPtr + 4);
    }

    public static unsafe uint \u0001([In] Ⴈ.Ⴐ[] obj0, [In] uint obj1, [In] \u0003.\u0003 obj2, [In] int obj3)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(16);
label_9:
      *(int*) voidPtr = 1;
      *(int*) ((IntPtr) voidPtr + 4) = 0;
      *(int*) ((IntPtr) voidPtr + 8) = 0;
label_2:
      if (true)
        goto label_10;
label_8:
      int num;
      while (true)
      {
        do
        {
          switch (num)
          {
            case 0:
              goto label_7;
            case 1:
              goto label_11;
            case 2:
            case 4:
              goto label_2;
            case 3:
              goto label_5;
            case 6:
            case 8:
              *(int*) voidPtr = (int) *(uint*) voidPtr + (int) *(uint*) ((IntPtr) voidPtr + 12);
              *(int*) ((IntPtr) voidPtr + 4) = (int) *(uint*) ((IntPtr) voidPtr + 4) | (int) *(uint*) ((IntPtr) voidPtr + 12) << *(int*) ((IntPtr) voidPtr + 8);
              continue;
            case 7:
              goto label_9;
            case 9:
              goto label_6;
            default:
              goto label_1;
          }
        }
        while (false);
        goto label_4;
label_1:
        // ISSUE: method reference
        RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0002.\u0001);
        num = 7;
        continue;
label_4:
        num = 3;
        continue;
label_5:
        *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + 1;
        num = 9;
        continue;
label_6:
        num = *(int*) ((IntPtr) voidPtr + 8) < obj3 ? 1 : 0;
        continue;
label_11:
        *(int*) ((IntPtr) voidPtr + 12) = (int) obj0[(IntPtr) (obj1 + *(uint*) voidPtr)].\u0001(obj2);
        *(int*) voidPtr = (int) *(uint*) voidPtr << 1;
        num = 8;
      }
label_7:
      return *(uint*) ((IntPtr) voidPtr + 4);
label_10:
      num = 9;
      goto label_8;
    }

    static \u0002() => \u0001.\u0001();
  }
}
