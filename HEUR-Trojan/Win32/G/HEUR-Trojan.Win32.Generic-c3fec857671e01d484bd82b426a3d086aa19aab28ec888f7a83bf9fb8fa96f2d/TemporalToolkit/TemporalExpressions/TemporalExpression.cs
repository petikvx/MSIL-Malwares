// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TemporalExpression
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace TemporalToolkit.TemporalExpressions
{
  public abstract class TemporalExpression
  {
    public abstract bool Includes(DateTime aDate);

    public TemporalExpression Or(TemporalExpression expr)
    {
      // ISSUE: type reference
      bool flag = TemporalExpression.\u202B‍‍‌‍⁯⁭‪​‌‬⁯‪⁫‫⁬⁯⁭‌⁫‪⁮‭⁪‫‫​‭‫‬‍⁯‫‮‫‪‫​⁭‭‮(TemporalExpression.\u206F‬⁯⁬‏⁮‫⁭‫​⁫‏‏‍⁮‌⁫‫⁯​‌⁪‮‫‍⁮⁯‬⁯‍‏‌⁪‪⁯‫⁮⁬⁫‬‮((object) this), TemporalExpression.\u202A⁮⁬⁪⁭⁯⁯‌⁭‫‪⁭‪⁮‭‪⁫⁭‌‎⁯‮‫‮‮‏‭‏‭‬⁪‎​⁮​‏⁭‏⁫⁫‮(__typeref (TEUnion)));
label_1:
      int num1 = 560862926;
      TEUnion teUnion;
      TemporalExpression temporalExpression;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 563136744)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 679134958 ^ -2004568341;
            continue;
          case 2:
            teUnion.Add(expr);
            temporalExpression = (TemporalExpression) teUnion;
            num1 = (int) num2 * -1763556860 ^ 1185014867;
            continue;
          case 4:
            int num3 = flag ? -1436182459 : (num3 = -1772128246);
            num1 = num3 ^ (int) num2 * -1490685409;
            continue;
          case 5:
            temporalExpression = this;
            num1 = (int) num2 * 500352869 ^ 1503671946;
            continue;
          case 6:
            teUnion = new TEUnion();
            teUnion.Add(this);
            num1 = 2068978006;
            continue;
          case 7:
            num1 = (int) num2 * -1658813685 ^ 1492040084;
            continue;
          case 8:
            num1 = (int) num2 * -212652832 ^ 1628668824;
            continue;
          case 9:
            ((TEList) this).Add(expr);
            num1 = (int) num2 * -34960012 ^ 1287425815;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return temporalExpression;
    }

    public TemporalExpression And(TemporalExpression expr)
    {
      // ISSUE: type reference
      bool flag = TemporalExpression.\u202B‍‍‌‍⁯⁭‪​‌‬⁯‪⁫‫⁬⁯⁭‌⁫‪⁮‭⁪‫‫​‭‫‬‍⁯‫‮‫‪‫​⁭‭‮(TemporalExpression.\u206F‬⁯⁬‏⁮‫⁭‫​⁫‏‏‍⁮‌⁫‫⁯​‌⁪‮‫‍⁮⁯‬⁯‍‏‌⁪‪⁯‫⁮⁬⁫‬‮((object) this), TemporalExpression.\u202A⁮⁬⁪⁭⁯⁯‌⁭‫‪⁭‪⁮‭‪⁫⁭‌‎⁯‮‫‮‮‏‭‏‭‬⁪‎​⁮​‏⁭‏⁫⁫‮(__typeref (TEIntersect)));
label_1:
      int num1 = -142570398;
      TEIntersect teIntersect;
      TemporalExpression temporalExpression;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1014279576)) % 14U)
        {
          case 0:
            ((TEList) this).Add(expr);
            num1 = (int) num2 * 1793073807 ^ -635477761;
            continue;
          case 1:
            num1 = (int) num2 * 945141846 ^ 864815214;
            continue;
          case 2:
            num1 = -562519198;
            continue;
          case 3:
            num1 = (int) num2 * -118146178 ^ 239113154;
            continue;
          case 4:
            goto label_1;
          case 5:
            teIntersect.Add(expr);
            num1 = (int) num2 * 755760369 ^ -665857992;
            continue;
          case 6:
            int num3 = flag ? 1947705311 : (num3 = 666944208);
            num1 = num3 ^ (int) num2 * 1619830694;
            continue;
          case 8:
            temporalExpression = (TemporalExpression) teIntersect;
            num1 = (int) num2 * -106276630 ^ -1274960559;
            continue;
          case 9:
            num1 = (int) num2 * -853335900 ^ -42222251;
            continue;
          case 10:
            num1 = (int) num2 * 438745112 ^ -1695053743;
            continue;
          case 11:
            temporalExpression = this;
            num1 = (int) num2 * -1997459063 ^ -1574581977;
            continue;
          case 12:
            teIntersect = new TEIntersect();
            num1 = (int) num2 * -1272355755 ^ 154980319;
            continue;
          case 13:
            teIntersect.Add(this);
            num1 = (int) num2 * 1322365459 ^ -2099950870;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return temporalExpression;
    }

    public TemporalExpression Minus(TemporalExpression expr)
    {
label_1:
      int num1 = -1114496151;
      TemporalExpression temporalExpression;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1669256928)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            temporalExpression = (TemporalExpression) new TEDifference(this, expr);
            num1 = (int) num2 * -1441684875 ^ -2020625878;
            continue;
          case 3:
            num1 = (int) num2 * 495581782 ^ -1617964784;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return temporalExpression;
    }

    public static TemporalExpression operator &(
      TemporalExpression exprA,
      TemporalExpression exprB)
    {
label_1:
      int num1 = 1176971578;
      TemporalExpression temporalExpression;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 649252145)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            temporalExpression = exprA.And(exprB);
            num1 = (int) num2 * 1474303426 ^ -465589475;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return temporalExpression;
    }

    public static TemporalExpression operator -(
      TemporalExpression exprA,
      TemporalExpression exprB)
    {
label_1:
      int num1 = -14745546;
      TemporalExpression temporalExpression;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -7830334)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            temporalExpression = exprA.Minus(exprB);
            num1 = (int) num2 * -783440750 ^ 1692476613;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return temporalExpression;
    }

    public static TemporalExpression operator |(
      TemporalExpression exprA,
      TemporalExpression exprB)
    {
      TemporalExpression temporalExpression = exprA.Or(exprB);
label_1:
      int num1 = -13035914;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -882446627)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1641352616 ^ 999387381;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return temporalExpression;
    }

    public List<DateTime> Occurrences(
      DateTime start,
      int maxOccurrences,
      IntervalPrecision precision)
    {
label_1:
      int num1 = -595252202;
      List<DateTime> dateTimeList;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1636366703)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1264133948 ^ 1372734020;
            continue;
          case 2:
            goto label_1;
          case 3:
            dateTimeList = this.Occurrences(start, new DateTime?(), maxOccurrences, precision);
            num1 = (int) num2 * 1811940468 ^ -1105616775;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return dateTimeList;
    }

    public List<DateTime> Occurrences(
      DateTime rangeStart,
      DateTime rangeEnd,
      IntervalPrecision precision)
    {
label_1:
      int num1 = -373767518;
      List<DateTime> dateTimeList;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1728481140)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1856776993 ^ 362153220;
            continue;
          case 2:
            dateTimeList = this.Occurrences(rangeStart, new DateTime?(rangeEnd), 0, precision);
            num1 = (int) num2 * 1453613290 ^ 1852159909;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return dateTimeList;
    }

    public List<DateTime> Occurrences(
      DateTime rangeStart,
      DateTime? rangeEnd,
      int maxOccurrences,
      IntervalPrecision precision)
    {
      if (rangeEnd.HasValue)
        goto label_30;
label_1:
      int num1 = 550584936;
label_2:
      List<DateTime> dateTimeList1;
      bool flag1;
      while (true)
      {
        uint num2;
        DateTime aDate;
        TimeSpan timeSpan;
        List<DateTime> dateTimeList2;
        IntervalPrecision intervalPrecision;
        DateTime dateTime;
        DateTime? nullable;
        bool flag2;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 364678280)) % 36U)
        {
          case 0:
            goto label_1;
          case 1:
            intervalPrecision = precision;
            num1 = (int) num2 * 1723246784 ^ 662900695;
            continue;
          case 2:
            num3 = dateTimeList2.Count == maxOccurrences ? 1 : 0;
            break;
          case 3:
            num1 = (int) num2 * -964092310 ^ -869833793;
            continue;
          case 4:
            if (nullable.HasValue)
            {
              num4 = dateTime <= nullable.GetValueOrDefault() ? 1 : 0;
              goto label_19;
            }
            else
            {
              num1 = (int) num2 * 357878953 ^ 1710816544;
              continue;
            }
          case 5:
            aDate = new DateTime(rangeStart.Ticks);
            int num5;
            num1 = num5 = !rangeEnd.HasValue ? 1683002615 : (num5 = 1389909658);
            continue;
          case 6:
            num1 = 1425074791;
            continue;
          case 7:
label_32:
            timeSpan = new TimeSpan(1, 0, 0, 0);
            num1 = 1834233189;
            continue;
          case 8:
            num1 = (int) num2 * 223925735 ^ 1753404428;
            continue;
          case 9:
            goto label_15;
          case 10:
            goto label_26;
          case 11:
          case 14:
            dateTime = aDate;
            nullable = rangeEnd;
            num1 = 1125675680;
            continue;
          case 12:
            dateTimeList1 = dateTimeList2;
            num1 = 410336384;
            continue;
          case 13:
label_41:
            timeSpan = new TimeSpan(0, 1, 0);
            num1 = 1375729625;
            continue;
          case 15:
            num1 = (int) num2 * -448079750 ^ 155310607;
            continue;
          case 16:
            if (maxOccurrences <= 0)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -2004651717 ^ 453406830;
            continue;
          case 17:
            aDate = aDate.Add(timeSpan);
            num1 = 1831631736;
            continue;
          case 18:
            int num6 = !flag2 ? 1311827290 : (num6 = 1947839364);
            num1 = num6 ^ (int) num2 * 677574193;
            continue;
          case 19:
            switch (intervalPrecision)
            {
              case IntervalPrecision.Seconds:
                goto label_39;
              case IntervalPrecision.Minutes:
                goto label_41;
              case IntervalPrecision.Hours:
                goto label_5;
              case IntervalPrecision.Days:
                goto label_32;
              case IntervalPrecision.Weeks:
                goto label_33;
              default:
                num1 = (int) num2 * 708821424 ^ 1983958013;
                continue;
            }
          case 20:
label_33:
            timeSpan = new TimeSpan(7, 0, 0, 0);
            num1 = 752421663;
            continue;
          case 21:
            num1 = (int) num2 * -982414354 ^ -1639743561;
            continue;
          case 22:
            num1 = (int) num2 * -1539756978 ^ 865719332;
            continue;
          case 23:
            num1 = (int) num2 * 278930466 ^ 1350480103;
            continue;
          case 24:
            num4 = 0;
            goto label_19;
          case 25:
            int num7 = !flag1 ? 1297186581 : (num7 = 65545975);
            num1 = num7 ^ (int) num2 * -1205116414;
            continue;
          case 26:
label_39:
            timeSpan = new TimeSpan(0, 0, 1);
            num1 = 1077010425;
            continue;
          case 27:
label_5:
            timeSpan = new TimeSpan(1, 0, 0);
            num1 = 1134569087;
            continue;
          case 28:
            goto label_29;
          case 29:
            num1 = (int) num2 * -1158755733 ^ -1732966183;
            continue;
          case 30:
            int num8;
            num1 = num8 = this.Includes(aDate) ? 1550438974 : (num8 = 266301321);
            continue;
          case 31:
            dateTimeList2 = new List<DateTime>();
            num1 = 618148305;
            continue;
          case 33:
            num1 = (int) num2 * 383120691 ^ -1850684210;
            continue;
          case 34:
            dateTimeList2.Add(aDate);
            num1 = (int) num2 * -1025181217 ^ 1933055813;
            continue;
          case 35:
            rangeEnd = new DateTime?(DateTime.MaxValue);
            num1 = (int) num2 * 1564192120 ^ -374990830;
            continue;
          default:
            goto label_45;
        }
        int num9;
        num1 = num9 = num3 != 0 ? 1328022674 : (num9 = 408785478);
        continue;
label_19:
        flag2 = num4 != 0;
        num1 = 2002032058;
      }
label_15:
      throw TemporalExpression.\u200C‪‭⁮‭‫‫​‪‭⁮⁫​⁭⁫⁭⁬⁪⁮‪⁬‫​‫⁫⁬‬‬​⁮‮⁫‌‪‏⁮‬‪‪‮‮(\u003CModule\u003E.\u202A‌⁫‏⁫‌‎⁯‍⁬‪⁭‍‮‫‏‎⁯⁬​⁮‬⁪‍‫‬‏‫‬‭‮‍⁯‏⁮‬‍⁫‎⁫‮<string>(868311482U));
label_26:
      throw TemporalExpression.\u200F‪⁪‪‎‮​‍‍‬‏‏‭‬⁬‮‎‌⁯​⁪⁪‫‍​⁯⁪⁭⁯‪‌⁯‍‍‪‏⁯⁬⁯‎‮();
label_29:
      int num10 = maxOccurrences < 1 ? 1 : 0;
      goto label_31;
label_45:
      return dateTimeList1;
label_30:
      num10 = 0;
label_31:
      flag1 = num10 != 0;
      num1 = 1065880645;
      goto label_2;
    }

    static Type \u206F‬⁯⁬‏⁮‫⁭‫​⁫‏‏‍⁮‌⁫‫⁯​‌⁪‮‫‍⁮⁯‬⁯‍‏‌⁪‪⁯‫⁮⁬⁫‬‮([In] object obj0) => obj0.GetType();

    static Type \u202A⁮⁬⁪⁭⁯⁯‌⁭‫‪⁭‪⁮‭‪⁫⁭‌‎⁯‮‫‮‮‏‭‏‭‬⁪‎​⁮​‏⁭‏⁫⁫‮([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

    static bool \u202B‍‍‌‍⁯⁭‪​‌‬⁯‪⁫‫⁬⁯⁭‌⁫‪⁮‭⁪‫‫​‭‫‬‍⁯‫‮‫‪‫​⁭‭‮([In] Type obj0, [In] Type obj1) => obj0 == obj1;

    static ArgumentException \u200C‪‭⁮‭‫‫​‪‭⁮⁫​⁭⁫⁭⁬⁪⁮‪⁬‫​‫⁫⁬‬‬​⁮‮⁫‌‪‏⁮‬‪‪‮‮(
      [In] string obj0)
    {
      return new ArgumentException(obj0);
    }

    static NotImplementedException \u200F‪⁪‪‎‮​‍‍‬‏‏‭‬⁬‮‎‌⁯​⁪⁪‫‍​⁯⁪⁭⁯‪‌⁯‍‍‪‏⁯⁬⁯‎‮() => new NotImplementedException();
  }
}
