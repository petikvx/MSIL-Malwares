// Decompiled with JetBrains decompiler
// Type:  
// Assembly: CategoryMembershipDataEntryFiel, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 56B8B728-7F83-4F18-73AD-C5D42FD11077
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-6b09030c84e4caeda33f8ae6e8ab3c4433517022722185cba1090690e2abadbd.exe

using StructureMap;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;

public sealed class \u000E\u2003 : \u0006\u2003
{
  [DebuggerStepThrough]
  public TType \u0006\u2003​\u2008\u0002<TType>() => (TType) this.\u0006\u2003​\u2008\u0002(typeof (TType));

  [DebuggerStepThrough]
  public object \u0006\u2003​\u2008\u0002(Type _param1)
  {
    try
    {
      return ObjectFactory.GetInstance(_param1);
    }
    catch (Exception ex)
    {
      return (object) null;
    }
  }

  [DebuggerStepThrough]
  public void \u0006\u2003​\u2008\u0002(object _param1)
  {
    try
    {
      ObjectFactory.BuildUp(_param1);
    }
    catch (Exception ex)
    {
      throw;
    }
  }

  [DebuggerStepThrough]
  public IEnumerable<object> \u0006\u2003​\u2008\u0002(Type _param1) => (IEnumerable<object>) new \u000E\u2003.\u0002(-2)
  {
    \u0006 = _param1
  };

  [DebuggerStepThrough]
  public IEnumerable<TType> \u0006\u2003​\u2008\u0005<TType>() => (IEnumerable<TType>) new \u000E\u2003.\u0003<TType>(-2)
  {
    \u0008 = this
  };

  [DebuggerStepThrough]
  public void \u0006\u2003​\u2008\u0003(object _param1)
  {
  }

  [DebuggerStepThrough]
  public TType \u0006\u2003​\u2008\u0003<TType>(string _param1) => (TType) this.\u0006\u2003​\u2008\u0002(typeof (TType), _param1);

  [DebuggerStepThrough]
  public object \u0006\u2003​\u2008\u0002(Type _param1, string _param2) => ObjectFactory.GetNamedInstance(_param1, _param2);

  private sealed class \u0002 : 
    IEnumerable<object>,
    IEnumerable,
    IEnumerator<object>,
    IDisposable,
    IEnumerator
  {
    private int \u0002;
    private object \u0003;
    private int \u0005;
    private Type \u0008;
    public Type \u0006;
    private IEnumerator \u000E;

    [DebuggerHidden]
    public \u0002(int _param1)
    {
      this.\u0002 = _param1;
      this.\u0005 = Thread.CurrentThread.ManagedThreadId;
    }

    [DebuggerHidden]
    void IDisposable.\u0002​\u2008\u0002()
    {
      switch (this.\u0002)
      {
        case -3:
        case 1:
          try
          {
          }
          finally
          {
            this.\u0003();
          }
          break;
      }
    }

    [DebuggerStepThrough]
    bool IEnumerator.MoveNext()
    {
      // ISSUE: fault handler
      try
      {
        switch (this.\u0002)
        {
          case 0:
            this.\u0002 = -1;
            this.\u000E = ObjectFactory.GetAllInstances(this.\u0008).GetEnumerator();
            this.\u0002 = -3;
            break;
          case 1:
            this.\u0002 = -3;
            break;
          default:
            return false;
        }
        if (this.\u000E.MoveNext())
        {
          this.\u0003 = this.\u000E.Current;
          this.\u0002 = 1;
          return true;
        }
        this.\u0003();
        this.\u000E = (IEnumerator) null;
        return false;
      }
      __fault
      {
        this.\u0002​\u2008\u0002();
      }
    }

    private void \u0003()
    {
      this.\u0002 = -1;
      if (!(this.\u000E is IDisposable disposable))
        return;
      disposable.Dispose();
    }

    [DebuggerHidden]
    object IEnumerator<object>.\u0002​\u2008\u0002() => this.\u0003;

    [DebuggerHidden]
    void IEnumerator.\u0002​\u2008\u0005() => throw new NotSupportedException();

    [DebuggerHidden]
    object IEnumerator.\u0002​\u2008\u0003() => this.\u0003;

    [DebuggerHidden]
    IEnumerator<object> IEnumerable<object>.\u0002​\u2008\u0002()
    {
      \u000E\u2003.\u0002 obj;
      if (this.\u0002 == -2 && this.\u0005 == Thread.CurrentThread.ManagedThreadId)
      {
        this.\u0002 = 0;
        obj = this;
      }
      else
        obj = new \u000E\u2003.\u0002(0);
      obj.\u0008 = this.\u0006;
      return (IEnumerator<object>) obj;
    }

    [DebuggerHidden]
    IEnumerator IEnumerable.\u0002​\u2008\u0002() => (IEnumerator) this.\u0002​\u2008\u0002();
  }

  private sealed class \u0003<\u0002> : 
    IEnumerable<\u0002>,
    IEnumerable,
    IEnumerator<\u0002>,
    IDisposable,
    IEnumerator
  {
    private int \u0002;
    private \u0002 \u0003;
    private int \u0005;
    public \u000E\u2003 \u0008;
    private IEnumerator<object> \u0006;

    [DebuggerHidden]
    public \u0003(int _param1)
    {
      this.\u0002 = _param1;
      this.\u0005 = Thread.CurrentThread.ManagedThreadId;
    }

    [DebuggerHidden]
    void IDisposable.\u0003​\u2008\u0002()
    {
      switch (this.\u0002)
      {
        case -3:
        case 1:
          try
          {
          }
          finally
          {
            this.\u0003();
          }
          break;
      }
    }

    [DebuggerStepThrough]
    bool IEnumerator.MoveNext()
    {
      // ISSUE: fault handler
      try
      {
        int num = this.\u0002;
        \u000E\u2003 obj = this.\u0008;
        switch (num)
        {
          case 0:
            this.\u0002 = -1;
            this.\u0006 = obj.\u0006\u2003​\u2008\u0002(typeof (\u0002)).GetEnumerator();
            this.\u0002 = -3;
            break;
          case 1:
            this.\u0002 = -3;
            break;
          default:
            return false;
        }
        if (this.\u0006.MoveNext())
        {
          this.\u0003 = (\u0002) this.\u0006.Current;
          this.\u0002 = 1;
          return true;
        }
        this.\u0003();
        this.\u0006 = (IEnumerator<object>) null;
        return false;
      }
      __fault
      {
        this.\u0003​\u2008\u0002();
      }
    }

    private void \u0003()
    {
      this.\u0002 = -1;
      if (this.\u0006 == null)
        return;
      this.\u0006.Dispose();
    }

    [DebuggerHidden]
    \u0002 IEnumerator<\u0002>.\u0003​\u2008\u0008() => this.\u0003;

    [DebuggerHidden]
    void IEnumerator.\u0003​\u2008\u0005() => throw new NotSupportedException();

    [DebuggerHidden]
    object IEnumerator.\u0003​\u2008\u0006() => (object) this.\u0003;

    [DebuggerHidden]
    IEnumerator<\u0002> IEnumerable<\u0002>.\u0003​\u2008\u000E()
    {
      \u000E\u2003.\u0003<\u0002> obj;
      if (this.\u0002 == -2 && this.\u0005 == Thread.CurrentThread.ManagedThreadId)
      {
        this.\u0002 = 0;
        obj = this;
      }
      else
      {
        obj = new \u000E\u2003.\u0003<\u0002>(0);
        obj.\u0008 = this.\u0008;
      }
      return (IEnumerator<\u0002>) obj;
    }

    [DebuggerHidden]
    IEnumerator IEnumerable.\u0003​\u2008\u000F() => (IEnumerator) this.\u0003​\u2008\u000E();
  }
}
