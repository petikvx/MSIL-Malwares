// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CDateTime
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class CDateTime : CControls
  {
    public CDateTime(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedDateTime control = (CEnhancedDateTime) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      switch (str)
      {
        case "format":
          if (!assign)
            return new MethodReturn(place, control.dateFormat, 0.0);
          RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          control.dateFormat = runReturn1.vString;
          control.Refresh();
          return new MethodReturn(place);
        case "value":
          if (!assign)
            return new MethodReturn(place, control.Value.Ticks.ToString(), 0.0);
          RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn2.place;
          control.Value = new DateTime((long) runReturn2.vDouble);
          return new MethodReturn(place);
        case "firstday":
          if (!assign)
            return new MethodReturn(place, (control.m_dayPicker.firstDay + 1).ToString(), 0.0);
          RunReturn runReturn3 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn3.place;
          control.m_dayPicker.firstDay = (int) runReturn3.vDouble - 1;
          return new MethodReturn(place);
        case "daysstring":
          if (!assign)
            return new MethodReturn(place, control.m_dayPicker.dow, 0.0);
          RunReturn runReturn4 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn4.place;
          control.m_dayPicker.dow = runReturn4.vString;
          return new MethodReturn(place);
        case "todaystring":
          if (!assign)
            return new MethodReturn(place, control.m_dayPicker.todayString, 0.0);
          RunReturn runReturn5 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn5.place;
          control.m_dayPicker.todayString = runReturn5.vString;
          return new MethodReturn(place);
        default:
          return str != "text" && this.CRunner.htSharedProperties.Contains((object) str) ? this.CRunner.SharedProperties((Control) control, str, ref place, assign, ref locals) : new MethodReturn(place);
      }
    }

    private void AddEvents(CEnhancedDateTime cln)
    {
      if (this.CRunner.htSubs.Contains((object) (cln.name + "_dropdown")))
        cln.DropDown += new EventHandler(this.DropDown);
      if (this.CRunner.htSubs.Contains((object) (cln.name + "_close")))
        cln.CloseUp += new EventHandler(this._Close);
      if (!this.CRunner.htSubs.Contains((object) (cln.name + "_valuechanged")))
        return;
      cln.ValueChanged += new EventHandler(this.ValueChanged);
    }

    public override void AddRunTimeEvent(object sender, string name)
    {
      CEnhancedDateTime cenhancedDateTime = (CEnhancedDateTime) sender;
      switch (name)
      {
        case "dropdown":
          cenhancedDateTime.DropDown += new EventHandler(this.DropDown);
          break;
        case "close":
          cenhancedDateTime.CloseUp += new EventHandler(this._Close);
          break;
        case "lostfocus":
          cenhancedDateTime.ValueChanged += new EventHandler(this.ValueChanged);
          break;
      }
    }

    private void DropDown(object sender, EventArgs e)
    {
      CEnhancedDateTime cenhancedDateTime = (CEnhancedDateTime) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedDateTime.name + "_dropdown")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedDateTime.name
        }
      });
    }

    private void _Close(object sender, EventArgs e)
    {
      CEnhancedDateTime cenhancedDateTime = (CEnhancedDateTime) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedDateTime.name + "_close")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedDateTime.name
        }
      });
    }

    private void ValueChanged(object sender, EventArgs e)
    {
      CEnhancedDateTime cenhancedDateTime = (CEnhancedDateTime) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedDateTime.name + "_valuechanged")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedDateTime.name
        }
      });
    }

    public void ShortAdd(string s)
    {
      CEnhancedDateTime cenhancedDateTime = new CEnhancedDateTime();
      string FrmName;
      string Name;
      int Left;
      int Top;
      int Width;
      int Height;
      string Text;
      Color BackColor;
      Color ForeColor;
      bool myEnabled;
      bool myVisible;
      float FontSize;
      CBuildDesigner.DateTimeGetProperties(s, out FrmName, out Name, out Left, out Top, out Width, out Height, out Text, out BackColor, out ForeColor, out myEnabled, out myVisible, out FontSize);
      cenhancedDateTime.name = Name.ToLower(CRunner.cul);
      cenhancedDateTime.Left = Left;
      cenhancedDateTime.Top = Top;
      cenhancedDateTime.Width = Width;
      cenhancedDateTime.Height = Height;
      cenhancedDateTime.BackColor = BackColor;
      cenhancedDateTime.ForeColor = ForeColor;
      cenhancedDateTime.Value = DateTime.Now;
      cenhancedDateTime.dateFormat = Text;
      cenhancedDateTime.Enabled = myEnabled;
      cenhancedDateTime.Visible = myVisible;
      cenhancedDateTime.Font = new Font(cenhancedDateTime.Font.Name, FontSize, cenhancedDateTime.Font.Style);
      this.CRunner.htControls.Add((object) cenhancedDateTime.name, (object) new WrapControl((object) cenhancedDateTime, (CControls) this));
      ((Control) ((WrapControl) this.CRunner.htControls[(object) FrmName]).control).Controls.Add((Control) cenhancedDateTime);
      this.AddEvents(cenhancedDateTime);
    }
  }
}
