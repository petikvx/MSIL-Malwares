// Decompiled with JetBrains decompiler
// Type: ProjNet.Templates.FieldTemplate
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Structs;
using System;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace ProjNet.Templates
{
  public class FieldTemplate : IEquatable<FieldTemplate>
  {
    public double m_Expression;
    public double val;
    public double m_Producer;
    public double attribute;
    public double @base;
    public double _Manager;
    public double setter;
    public string request;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public FieldTemplate()
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      this.\u002Ector(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, string.Empty);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public FieldTemplate(
      double var1,
      double pred,
      double tag,
      double vis2,
      double map3,
      double pol4,
      double init5)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      this.\u002Ector(var1, pred, tag, vis2, map3, pol4, init5, string.Empty);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public FieldTemplate(
      double value,
      double token,
      double res,
      double token2,
      double var13,
      double init4,
      double first5,
      string ident6)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              PageAdvisorStructBuilder.PrepareCreator();
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 1;
            case 1:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              num2 = 5;
              continue;
            case 2:
            case 5:
              goto label_4;
            case 3:
              this._Manager = init4;
              this.setter = first5;
              this.request = ident6;
              num2 = 7;
              continue;
            case 4:
              goto label_1;
            case 7:
              goto label_10;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto case 3;
          }
        }
label_1:
        this.val = token;
        this.m_Producer = res;
        this.attribute = token2;
        this.@base = var13;
        num1 = 3;
        continue;
label_4:
        this.m_Expression = value;
        goto label_1;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal double[] InstantiateRegistry()
    {
      double num = 1.0 + this.setter * 1E-06;
      return new double[7]
      {
        num,
        this.attribute * 4.84813681109536E-06 * num,
        this.@base * 4.84813681109536E-06 * num,
        this._Manager * 4.84813681109536E-06 * num,
        this.m_Expression,
        this.val,
        this.m_Producer
      };
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string RateRegistry() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "TOWGS84[{0}, {1}, {2}, {3}, {4}, {5}, {6}]", (object) this.m_Expression, (object) this.val, (object) this.m_Producer, (object) this.attribute, (object) this.@base, (object) this._Manager, (object) this.setter);

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string SortRegistry() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_WGS84ConversionInfo Dx=\"{0}\" Dy=\"{1}\" Dz=\"{2}\" Ex=\"{3}\" Ey=\"{4}\" Ez=\"{5}\" Ppm=\"{6}\" />", (object) this.m_Expression, (object) this.val, (object) this.m_Producer, (object) this.attribute, (object) this.@base, (object) this._Manager, (object) this.setter);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string ToString() => this.RateRegistry();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool RevertRegistry()
    {
      int num1 = 3;
      if (true)
        goto label_5;
label_1:
      int num2;
      if (this.m_Expression == 0.0)
        num2 = 5;
      else
        goto label_12;
label_4:
      num1 = num2;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_1;
          case 1:
          case 2:
            if (this.m_Producer != 0.0 || this.attribute != 0.0)
              goto label_12;
            else
              goto case 4;
          case 4:
            if (this.@base == 0.0 && this._Manager == 0.0)
            {
              if (true)
              {
                num1 = 6;
                continue;
              }
              goto label_9;
            }
            else
              goto label_12;
          case 5:
            goto label_9;
          case 6:
            goto label_11;
          default:
            int num3 = 4;
            num1 = FieldTemplate.ManageWrapper() ? num3 : num3;
            continue;
        }
      }
label_9:
      if (this.val == 0.0)
      {
        num2 = 1;
        goto label_4;
      }
      else
        goto label_12;
label_11:
      int num4 = this.setter == 0.0 ? 1 : 0;
      goto label_13;
label_12:
      num4 = 0;
label_13:
      return num4 != 0;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool Equals(object init) => this.Equals(init as FieldTemplate);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override int GetHashCode() => this.m_Expression.GetHashCode() ^ this.val.GetHashCode() ^ this.m_Producer.GetHashCode() ^ this.attribute.GetHashCode() ^ this.@base.GetHashCode() ^ this._Manager.GetHashCode() ^ this.setter.GetHashCode();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool Equals(FieldTemplate var1)
    {
      int num1 = 0;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              flag2 = var1 == null;
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_16;
            case 1:
              goto label_7;
            case 2:
            case 6:
              goto label_16;
            case 3:
            case 4:
              if (var1.attribute == this.attribute && var1.@base == this.@base && var1._Manager == this._Manager)
              {
                num2 = 7;
                continue;
              }
              goto label_14;
            case 5:
              goto label_9;
            case 7:
              goto label_13;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 5;
        continue;
label_7:
        if (!flag2)
        {
          if (var1.m_Expression != this.m_Expression || var1.val != this.val)
            goto label_14;
        }
        else
        {
          flag1 = false;
          num1 = 6;
          continue;
        }
label_9:
        if (var1.m_Producer == this.m_Producer)
          num1 = 3;
        else
          goto label_14;
      }
label_13:
      int num3 = var1.setter == this.setter ? 1 : 0;
      goto label_15;
label_14:
      num3 = 0;
label_15:
      flag1 = num3 != 0;
label_16:
      return flag1;
    }

    internal static bool PostWrapper() => true;

    internal static bool ManageWrapper() => false;
  }
}
