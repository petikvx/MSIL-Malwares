// Decompiled with JetBrains decompiler
// Type: YAB3Y5.kvsA360
// Assembly: lsass, Version=3.6.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3502A8EC-2162-44B8-AC38-178A4CFA2FF6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00020-msil\Trojan-Ransom.Win32.Foreign.nbpi-75632fb409b023ebac1886a858652fa8e8b29be753abebf0ee9bc896fdb5d961.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace YAB3Y5
{
  public class kvsA360
  {
    private const int SQL_OK = 0;
    private const int SQL_ROW = 100;
    private const int SQL_DONE = 101;
    private IntPtr \u0032nmDQ183;

    public kvsA360() => this.\u0032nmDQ183 = IntPtr.Zero;

    public kvsA360(string baseName) => this.ytH20258(baseName);

    [DllImport("kernel32", EntryPoint = "HeapAlloc")]
    private static extern IntPtr CgKcf239(IntPtr heap, uint flags, uint bytes);

    [DllImport("kernel32", EntryPoint = "GetProcessHeap")]
    private static extern IntPtr dnSxr240();

    [DllImport("kernel32", EntryPoint = "lstrlen")]
    private static extern int VuDXY241(IntPtr str);

    [DllImport("sqlite3", EntryPoint = "sqlite3_open")]
    private static extern int LrsPs242(IntPtr fileName, out IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_close")]
    private static extern int pReEe243(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_exec")]
    private static extern int \u0037vBL2244(
      IntPtr database,
      IntPtr query,
      IntPtr callback,
      IntPtr arguments,
      out IntPtr errorr);

    [DllImport("sqlite3", EntryPoint = "sqlite3_errmsg")]
    private static extern IntPtr xcsDC245(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_prepare_v2")]
    private static extern int mtg5d246(
      IntPtr database,
      IntPtr query,
      int length,
      out IntPtr statement,
      out IntPtr tail);

    [DllImport("sqlite3", EntryPoint = "sqlite3_step")]
    private static extern int kAcWJ247(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_count")]
    private static extern int \u0031AHlI248(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_name")]
    private static extern IntPtr S2D7E249(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_type")]
    private static extern int L26X7250(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_int")]
    private static extern int IL7uT251(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_double")]
    private static extern double I2ZlB252(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_text")]
    private static extern IntPtr hbmB7253(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_blob")]
    private static extern IntPtr PEhVd254(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_bytes")]
    private static extern IntPtr xNf2a255(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_table_name")]
    private static extern IntPtr uykZR256(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_finalize")]
    private static extern int jnjXv257(IntPtr handle);

    public void ytH20258(string baseName)
    {
      if (kvsA360.LrsPs242(this.mXeUe265(baseName), out this.\u0032nmDQ183) != 0)
      {
        this.\u0032nmDQ183 = IntPtr.Zero;
        throw new Exception("Error with opening database " + baseName + "!");
      }
    }

    public void YAmJr259()
    {
      if (!(this.\u0032nmDQ183 != IntPtr.Zero))
        return;
      kvsA360.pReEe243(this.\u0032nmDQ183);
    }

    public ArrayList GG2ZO260()
    {
      DataTable dataTable = this.Vw5kp262("SELECT name FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'UNION ALL SELECT name FROM sqlite_temp_master WHERE type IN ('table','view') ORDER BY 1");
      ArrayList arrayList = new ArrayList();
      try
      {
        foreach (DataRow row in dataTable.Rows)
          arrayList.Add((object) row.ItemArray[0].ToString());
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return arrayList;
    }

    public void \u0036KaKA261(string query)
    {
      IntPtr errorr;
      kvsA360.\u0037vBL2244(this.\u0032nmDQ183, this.mXeUe265(query), IntPtr.Zero, IntPtr.Zero, out errorr);
      if (errorr != IntPtr.Zero)
        throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.XqvAt266(kvsA360.xcsDC245(errorr)));
    }

    public DataTable Vw5kp262(string query)
    {
      IntPtr statement;
      kvsA360.mtg5d246(this.\u0032nmDQ183, this.mXeUe265(query), this.zcynz268(this.mXeUe265(query)), out statement, out IntPtr _);
      DataTable table = new DataTable();
      int num = this.\u0039I0ti263(statement, ref table);
      while (num == 100)
        num = this.TSo6z264(statement, ref table);
      kvsA360.jnjXv257(statement);
      return table;
    }

    private int \u0039I0ti263(IntPtr statement, ref DataTable table)
    {
      table = new DataTable("resultTable");
      if (kvsA360.kAcWJ247(statement) == 100)
      {
        int num1 = kvsA360.\u0031AHlI248(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          string columnName = this.XqvAt266(kvsA360.S2D7E249(statement, columnNumber));
          int num3 = kvsA360.L26X7250(statement, columnNumber);
          if (num3 == Conversion.Fix(1))
          {
            table.Columns.Add(columnName, Type.GetType("System.Int32"));
            objArray[columnNumber] = (object) kvsA360.IL7uT251(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(2))
          {
            table.Columns.Add(columnName, Type.GetType("System.Single"));
            objArray[columnNumber] = (object) kvsA360.I2ZlB252(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(3))
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) this.XqvAt266(kvsA360.hbmB7253(statement, columnNumber));
          }
          else if (num3 == Conversion.Fix(4))
          {
            table.Columns.Add(columnName, Type.GetType("System.Array"));
            int siz = (int) kvsA360.xNf2a255(statement, columnNumber);
            objArray[columnNumber] = (object) this.OwkaK267(kvsA360.PEhVd254(statement, columnNumber), siz);
          }
          else
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) "";
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
      }
      return kvsA360.kAcWJ247(statement);
    }

    private int TSo6z264(IntPtr statement, ref DataTable table)
    {
      int num1;
      try
      {
        int num2 = kvsA360.\u0031AHlI248(statement);
        object[] objArray = new object[checked (num2 - 1 + 1)];
        int num3 = checked (num2 - 1);
        int columnNumber = 0;
        while (columnNumber <= num3)
        {
          int num4 = kvsA360.L26X7250(statement, columnNumber);
          if (num4 == Conversion.Fix(1))
            objArray[columnNumber] = (object) kvsA360.IL7uT251(statement, columnNumber);
          else if (num4 == Conversion.Fix(2))
            objArray[columnNumber] = (object) kvsA360.I2ZlB252(statement, columnNumber);
          else if (num4 == Conversion.Fix(3))
            objArray[columnNumber] = (object) this.XqvAt266(kvsA360.hbmB7253(statement, columnNumber));
          else if (num4 == Conversion.Fix(4))
          {
            int siz = (int) kvsA360.xNf2a255(statement, columnNumber);
            objArray[columnNumber] = (object) this.OwkaK267(kvsA360.PEhVd254(statement, columnNumber), siz);
          }
          else
            objArray[columnNumber] = (object) "";
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
        num1 = kvsA360.kAcWJ247(statement);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return num1;
    }

    private IntPtr mXeUe265(string str)
    {
      if (str == null)
        return IntPtr.Zero;
      byte[] bytes1 = Encoding.UTF8.GetBytes(str);
      int bytes2 = checked (bytes1.Length + 1);
      IntPtr num = kvsA360.CgKcf239(kvsA360.dnSxr240(), 0U, checked ((uint) bytes2));
      Marshal.Copy(bytes1, 0, num, bytes1.Length);
      Marshal.WriteByte(num, bytes1.Length, (byte) 0);
      return num;
    }

    private string XqvAt266(IntPtr ptr)
    {
      if (ptr == IntPtr.Zero)
        return (string) null;
      Encoding utF8 = Encoding.UTF8;
      int num = this.zcynz268(ptr);
      byte[] numArray = new byte[checked (num - 1 + 1)];
      Marshal.Copy(ptr, numArray, 0, num);
      return utF8.GetString(numArray, 0, num);
    }

    private Array OwkaK267(IntPtr ptr, int siz)
    {
      if (ptr == IntPtr.Zero)
        return (Array) null;
      Encoding utF8 = Encoding.UTF8;
      this.zcynz268(ptr);
      byte[] destination = new byte[checked (siz - 1 + 1)];
      Marshal.Copy(ptr, destination, 0, siz);
      return (Array) destination;
    }

    private int zcynz268(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : kvsA360.VuDXY241(ptr);

    public enum gATry61
    {
      INT = 1,
      FLOAT = 2,
      TEXT = 3,
      BLOB = 4,
      NULL = 5,
    }
  }
}
