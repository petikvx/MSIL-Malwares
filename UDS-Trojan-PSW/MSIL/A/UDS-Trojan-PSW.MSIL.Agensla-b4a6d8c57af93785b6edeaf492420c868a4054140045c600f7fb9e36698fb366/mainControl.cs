// Decompiled with JetBrains decompiler
// Type: coffee_machine_control.mainControl
// Assembly: EnumBuil, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FBEB9EA3-01CE-4899-B996-D20A537C4F89
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\UDS-Trojan-PSW.MSIL.Agensla-b4a6d8c57af93785b6edeaf492420c868a4054140045c600f7fb9e36698fb366.exe

using coffee_machine_control.Functions;
using coffee_machine_control.tools;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Net;
using System.Net.Sockets;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace coffee_machine_control
{
  public class mainControl : Form
  {
    private List<Socket> Connections = (List<Socket>) null;
    private List<coffeeMachine> devices = (List<coffeeMachine>) null;
    private List<string> IPs = (List<string>) null;
    private int counter;
    private int range = (int) byte.MaxValue;
    private bool isPanelAvailable = false;
    private string IPRange = "";
    private int marginRight = 20;
    private mainControlPanel mcp;
    private IContainer components = (IContainer) null;
    private startBtn startBtn1;

    public mainControl(string IPRange)
    {
      this.InitializeComponent();
      this.initView();
      this.Connections = new List<Socket>();
      this.IPs = new List<string>();
      this.devices = new List<coffeeMachine>();
      this.counter = -999;
      this.IPRange = IPRange;
    }

    private void initView()
    {
      this.BackColor = Color.LimeGreen;
      this.TransparencyKey = Color.LimeGreen;
      this.TopMost = true;
      Rectangle workingArea = Screen.AllScreens[0].WorkingArea;
      int x = workingArea.Right - this.Width - this.marginRight;
      workingArea = Screen.AllScreens[0].WorkingArea;
      int y = workingArea.Bottom - this.Height;
      this.Location = new Point(x, y);
    }

    private void connectBtn_Click(object sender, EventArgs e) => this.connect(this.IPRange);

    public void connect(string ip)
    {
      if (!this.isPanelAvailable)
      {
        this.isPanelAvailable = !this.isPanelAvailable;
        this.mcp = new mainControlPanel(this.marginRight, this.startBtn1.Height);
        this.mcp.Show();
        this.BringToFront();
        this.updateLabelDetails("Initiating...");
        this.counter = 30;
        Task.Factory.StartNew<Task>((Func<Task>) (() => this.createConnection(ip, 1)));
      }
      else
      {
        this.isPanelAvailable = !this.isPanelAvailable;
        this.mcp.Close();
      }
    }

    private void countdown()
    {
      if (!this.isPanelAvailable || this.counter <= 0)
        return;
      --this.counter;
      this.countdown();
    }

    private void updateLabelDetails(string text)
    {
    }

    private Task createConnection(string front, int end)
    {
      if (this.isPanelAvailable)
      {
        string str = front + "." + end.ToString();
        if (!this.IPs.Contains(str))
        {
          Dns.GetHostEntry(Dns.GetHostName());
          IPAddress address = IPAddress.Parse(str);
          IPEndPoint remoteEP = new IPEndPoint(address, 13000);
          Socket Connection = new Socket(address.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
          try
          {
            this.updateLabelDetails("Connecting...");
            Connection.BeginConnect((EndPoint) remoteEP, (AsyncCallback) null, (object) null).AsyncWaitHandle.WaitOne(50, true);
            if (Connection.Connected)
            {
              this.updateLabelDetails("Connected succeeded: " + str);
              this.Connections.Add(Connection);
              this.IPs.Add(str);
              this.devices.Add(new coffeeMachine(Connection, str, this.devices.Count + 1));
            }
            else
              Debug.WriteLine("Connected failed exception...");
          }
          catch (Exception ex)
          {
            this.updateLabelDetails("Error accepted: " + ex.GetBaseException()?.ToString());
          }
          if (this.counter > 0)
          {
            if (end >= this.range && this.counter > 0)
              Task.Factory.StartNew<Task>((Func<Task>) (() => this.createConnection(front, 1)));
            else
              Task.Factory.StartNew<Task>((Func<Task>) (() => this.createConnection(front, end + 1)));
          }
        }
      }
      return (Task) null;
    }

    private void mainControl_FormClosed(object sender, FormClosedEventArgs e) => this.isPanelAvailable = false;

    private void startBtn_MouseEnter(object sender, EventArgs e)
    {
    }

    private void startBtn_MouseLeave(object sender, EventArgs e)
    {
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.startBtn1 = new startBtn();
      ((ISupportInitialize) this.startBtn1).BeginInit();
      this.SuspendLayout();
      this.startBtn1.BackColor = SystemColors.ControlDark;
      this.startBtn1.BackgroundImageLayout = ImageLayout.Stretch;
      this.startBtn1.ForeColor = Color.Transparent;
      this.startBtn1.Location = new Point(39, 0);
      this.startBtn1.Name = "startBtn1";
      this.startBtn1.Size = new Size(98, 98);
      this.startBtn1.SizeMode = PictureBoxSizeMode.StretchImage;
      this.startBtn1.TabIndex = 0;
      this.startBtn1.TabStop = false;
      this.startBtn1.Click += new EventHandler(this.connectBtn_Click);
      this.startBtn1.MouseEnter += new EventHandler(this.startBtn_MouseEnter);
      this.startBtn1.MouseLeave += new EventHandler(this.startBtn_MouseLeave);
      this.AutoScaleDimensions = new SizeF(8f, 16f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(176, 101);
      this.Controls.Add((Control) this.startBtn1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (mainControl);
      this.StartPosition = FormStartPosition.Manual;
      this.Text = nameof (mainControl);
      ((ISupportInitialize) this.startBtn1).EndInit();
      this.ResumeLayout(false);
    }
  }
}
