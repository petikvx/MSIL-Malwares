// Decompiled with JetBrains decompiler
// Type: ModuleNameSpace.MainModuleUI
// Assembly: copierimp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B91267B9-A6E6-4499-A0E0-76087ADE7AE9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\Trojan-Ransom.Win32.Crypren.ahum-97449465d855c318fec48b7f368ff17937be19a01e47666533d37a84c30c629d.exe

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Management.Automation;
using System.Management.Automation.Host;
using System.Reflection;
using System.Security;

namespace ModuleNameSpace
{
  internal class MainModuleUI : PSHostUserInterface
  {
    private MainModuleRawUI rawUI;
    public ConsoleColor ErrorForegroundColor = ConsoleColor.Red;
    public ConsoleColor ErrorBackgroundColor;
    public ConsoleColor WarningForegroundColor = ConsoleColor.Yellow;
    public ConsoleColor WarningBackgroundColor;
    public ConsoleColor DebugForegroundColor = ConsoleColor.Yellow;
    public ConsoleColor DebugBackgroundColor;
    public ConsoleColor VerboseForegroundColor = ConsoleColor.Yellow;
    public ConsoleColor VerboseBackgroundColor;
    public ConsoleColor ProgressForegroundColor = ConsoleColor.Yellow;
    public ConsoleColor ProgressBackgroundColor = ConsoleColor.DarkCyan;

    public MainModuleUI()
    {
      this.rawUI = new MainModuleRawUI();
      this.rawUI.ForegroundColor = Console.ForegroundColor;
      this.rawUI.BackgroundColor = Console.BackgroundColor;
    }

    public override Dictionary<string, PSObject> Prompt(
      string caption,
      string message,
      Collection<FieldDescription> descriptions)
    {
      if (!string.IsNullOrEmpty(caption))
        this.WriteLine(caption);
      if (!string.IsNullOrEmpty(message))
        this.WriteLine(message);
      Dictionary<string, PSObject> dictionary = new Dictionary<string, PSObject>();
      foreach (FieldDescription description in descriptions)
      {
        Type conversionType = !string.IsNullOrEmpty(description.ParameterAssemblyFullName) ? Type.GetType(description.ParameterAssemblyFullName) : typeof (string);
        if (conversionType.IsArray)
        {
          Type elementType = conversionType.GetElementType();
          Type type = Type.GetType("System.Collections.Generic.List" + '`'.ToString() + "1").MakeGenericType(elementType);
          object target = type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.CreateInstance, (Binder) null, Type.EmptyTypes, (ParameterModifier[]) null).Invoke((object[]) null);
          int num = 0;
          while (true)
          {
            try
            {
              if (!string.IsNullOrEmpty(description.Name))
                this.Write(string.Format("{0}[{1}]: ", (object) description.Name, (object) num));
              string str = this.ReadLine();
              if (!string.IsNullOrEmpty(str))
              {
                object obj = Convert.ChangeType((object) str, elementType);
                type.InvokeMember("Add", BindingFlags.Instance | BindingFlags.Public | BindingFlags.InvokeMethod, (Binder) null, target, new object[1]
                {
                  obj
                });
              }
              else
                break;
            }
            catch (Exception ex)
            {
              throw ex;
            }
            ++num;
          }
          Array array = (Array) type.InvokeMember("ToArray", BindingFlags.Instance | BindingFlags.Public | BindingFlags.InvokeMethod, (Binder) null, target, (object[]) null);
          dictionary.Add(description.Name, new PSObject((object) array));
        }
        else
        {
          object obj = (object) null;
          try
          {
            if (conversionType != typeof (SecureString))
            {
              if (conversionType != typeof (PSCredential))
              {
                if (!string.IsNullOrEmpty(description.Name))
                  this.Write(description.Name);
                if (!string.IsNullOrEmpty(description.HelpMessage))
                  this.Write(" (Type !? for help.)");
                if (!string.IsNullOrEmpty(description.Name) || !string.IsNullOrEmpty(description.HelpMessage))
                  this.Write(": ");
                string str;
                do
                {
                  str = this.ReadLine();
                  if (str == "!?")
                  {
                    this.WriteLine(description.HelpMessage);
                  }
                  else
                  {
                    if (string.IsNullOrEmpty(str))
                      obj = (object) description.DefaultValue;
                    if (obj == null)
                    {
                      try
                      {
                        obj = Convert.ChangeType((object) str, conversionType);
                      }
                      catch
                      {
                        this.Write("Wrong format, please repeat input: ");
                        str = "!?";
                      }
                    }
                  }
                }
                while (str == "!?");
              }
              else
                obj = (object) this.PromptForCredential("", "", "", "");
            }
            else
            {
              if (!string.IsNullOrEmpty(description.Name))
                this.Write(string.Format("{0}: ", (object) description.Name));
              obj = (object) this.ReadLineAsSecureString();
            }
            dictionary.Add(description.Name, new PSObject(obj));
          }
          catch (Exception ex)
          {
            throw ex;
          }
        }
      }
      return dictionary;
    }

    public override int PromptForChoice(
      string caption,
      string message,
      Collection<ChoiceDescription> choices,
      int defaultChoice)
    {
      if (!string.IsNullOrEmpty(caption))
        this.WriteLine(caption);
      this.WriteLine(message);
label_3:
      string key;
      do
      {
        int num = 0;
        SortedList<string, int> sortedList = new SortedList<string, int>();
        string str1 = "";
        foreach (ChoiceDescription choice in choices)
        {
          string str2 = choice.Label.Substring(0, 1);
          string str3 = choice.Label;
          int length = choice.Label.IndexOf('&');
          if (length > -1)
          {
            str2 = choice.Label.Substring(length + 1, 1).ToUpper();
            str3 = length <= 0 ? choice.Label.Substring(1) : choice.Label.Substring(0, length) + choice.Label.Substring(length + 1);
          }
          sortedList.Add(str2.ToLower(), num);
          if (num > 0)
            this.Write("  ");
          if (num == defaultChoice)
          {
            this.Write(this.VerboseForegroundColor, this.rawUI.BackgroundColor, string.Format("[{0}] {1}", (object) str2, (object) str3));
            str1 = str2;
          }
          else
            this.Write(this.rawUI.ForegroundColor, this.rawUI.BackgroundColor, string.Format("[{0}] {1}", (object) str2, (object) str3));
          ++num;
        }
        this.Write(this.rawUI.ForegroundColor, this.rawUI.BackgroundColor, string.Format("  [?] Help (default is \"{0}\"): ", (object) str1));
        key = "";
        try
        {
          key = Console.ReadLine().ToLower();
          if (sortedList.ContainsKey(key))
            return sortedList[key];
          if (string.IsNullOrEmpty(key))
            return defaultChoice;
        }
        catch
        {
        }
      }
      while (!(key == "?"));
      using (IEnumerator<ChoiceDescription> enumerator = choices.GetEnumerator())
      {
        while (enumerator.MoveNext())
        {
          ChoiceDescription current = enumerator.Current;
          string str = current.Label.Substring(0, 1);
          int num = current.Label.IndexOf('&');
          if (num > -1)
            str = current.Label.Substring(num + 1, 1).ToUpper();
          if (!string.IsNullOrEmpty(current.HelpMessage))
            this.WriteLine(this.rawUI.ForegroundColor, this.rawUI.BackgroundColor, string.Format("{0} - {1}", (object) str, (object) current.HelpMessage));
          else
            this.WriteLine(this.rawUI.ForegroundColor, this.rawUI.BackgroundColor, string.Format("{0} -", (object) str));
        }
        goto label_3;
      }
    }

    public override PSCredential PromptForCredential(
      string caption,
      string message,
      string userName,
      string targetName,
      PSCredentialTypes allowedCredentialTypes,
      PSCredentialUIOptions options)
    {
      if (!string.IsNullOrEmpty(caption))
        this.WriteLine(caption);
      this.WriteLine(message);
      string userName1;
      if (string.IsNullOrEmpty(userName) || (options & PSCredentialUIOptions.ReadOnlyUserName) == PSCredentialUIOptions.None)
      {
        this.Write("User name: ");
        userName1 = this.ReadLine();
      }
      else
      {
        this.Write("User name: ");
        if (!string.IsNullOrEmpty(targetName))
          this.Write(targetName + "\\");
        this.WriteLine(userName);
        userName1 = userName;
      }
      this.Write("Password: ");
      SecureString password = this.ReadLineAsSecureString();
      if (string.IsNullOrEmpty(userName1))
        userName1 = "<NOUSER>";
      if (!string.IsNullOrEmpty(targetName) && userName1.IndexOf('\\') < 0)
        userName1 = targetName + "\\" + userName1;
      return new PSCredential(userName1, password);
    }

    public override PSCredential PromptForCredential(
      string caption,
      string message,
      string userName,
      string targetName)
    {
      if (!string.IsNullOrEmpty(caption))
        this.WriteLine(caption);
      this.WriteLine(message);
      string userName1;
      if (string.IsNullOrEmpty(userName))
      {
        this.Write("User name: ");
        userName1 = this.ReadLine();
      }
      else
      {
        this.Write("User name: ");
        if (!string.IsNullOrEmpty(targetName))
          this.Write(targetName + "\\");
        this.WriteLine(userName);
        userName1 = userName;
      }
      this.Write("Password: ");
      SecureString password = this.ReadLineAsSecureString();
      if (string.IsNullOrEmpty(userName1))
        userName1 = "<NOUSER>";
      if (!string.IsNullOrEmpty(targetName) && userName1.IndexOf('\\') < 0)
        userName1 = targetName + "\\" + userName1;
      return new PSCredential(userName1, password);
    }

    public override PSHostRawUserInterface RawUI => (PSHostRawUserInterface) this.rawUI;

    public override string ReadLine() => Console.ReadLine();

    private SecureString getPassword()
    {
      SecureString password = new SecureString();
      while (true)
      {
        ConsoleKeyInfo consoleKeyInfo;
        do
        {
          consoleKeyInfo = Console.ReadKey(true);
          if (consoleKeyInfo.Key == ConsoleKey.Enter)
          {
            Console.WriteLine();
            return password;
          }
          if (consoleKeyInfo.Key == ConsoleKey.Backspace)
          {
            if (password.Length > 0)
            {
              password.RemoveAt(password.Length - 1);
              Console.Write("\b \b");
            }
          }
        }
        while (consoleKeyInfo.KeyChar == char.MinValue);
        password.AppendChar(consoleKeyInfo.KeyChar);
        Console.Write("*");
      }
    }

    public override SecureString ReadLineAsSecureString()
    {
      SecureString secureString = new SecureString();
      return this.getPassword();
    }

    public override void Write(
      ConsoleColor foregroundColor,
      ConsoleColor backgroundColor,
      string value)
    {
      ConsoleColor foregroundColor1 = Console.ForegroundColor;
      ConsoleColor backgroundColor1 = Console.BackgroundColor;
      Console.ForegroundColor = foregroundColor;
      Console.BackgroundColor = backgroundColor;
      Console.Write(value);
      Console.ForegroundColor = foregroundColor1;
      Console.BackgroundColor = backgroundColor1;
    }

    public override void Write(string value) => Console.Write(value);

    public override void WriteDebugLine(string message) => this.WriteLineInternal(this.DebugForegroundColor, this.DebugBackgroundColor, string.Format("DEBUG: {0}", (object) message));

    public override void WriteErrorLine(string value)
    {
      if (Console_Info.IsErrorRedirected())
        Console.Error.WriteLine(string.Format("ERROR: {0}", (object) value));
      else
        this.WriteLineInternal(this.ErrorForegroundColor, this.ErrorBackgroundColor, string.Format("ERROR: {0}", (object) value));
    }

    public override void WriteLine() => Console.WriteLine();

    public override void WriteLine(
      ConsoleColor foregroundColor,
      ConsoleColor backgroundColor,
      string value)
    {
      ConsoleColor foregroundColor1 = Console.ForegroundColor;
      ConsoleColor backgroundColor1 = Console.BackgroundColor;
      Console.ForegroundColor = foregroundColor;
      Console.BackgroundColor = backgroundColor;
      Console.WriteLine(value);
      Console.ForegroundColor = foregroundColor1;
      Console.BackgroundColor = backgroundColor1;
    }

    private void WriteLineInternal(
      ConsoleColor foregroundColor,
      ConsoleColor backgroundColor,
      string value)
    {
      ConsoleColor foregroundColor1 = Console.ForegroundColor;
      ConsoleColor backgroundColor1 = Console.BackgroundColor;
      Console.ForegroundColor = foregroundColor;
      Console.BackgroundColor = backgroundColor;
      Console.WriteLine(value);
      Console.ForegroundColor = foregroundColor1;
      Console.BackgroundColor = backgroundColor1;
    }

    public override void WriteLine(string value) => Console.WriteLine(value);

    public override void WriteProgress(long sourceId, ProgressRecord record)
    {
    }

    public override void WriteVerboseLine(string message) => this.WriteLine(this.VerboseForegroundColor, this.VerboseBackgroundColor, string.Format("VERBOSE: {0}", (object) message));

    public override void WriteWarningLine(string message) => this.WriteLineInternal(this.WarningForegroundColor, this.WarningBackgroundColor, string.Format("WARNING: {0}", (object) message));
  }
}
