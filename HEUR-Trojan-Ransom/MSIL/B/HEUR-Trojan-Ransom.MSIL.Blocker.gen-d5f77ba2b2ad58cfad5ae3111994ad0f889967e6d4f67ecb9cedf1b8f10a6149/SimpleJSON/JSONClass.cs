// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: Encod, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DCFB260-FACB-496A-9BC9-FA9701DCBF71
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d5f77ba2b2ad58cfad5ae3111994ad0f889967e6d4f67ecb9cedf1b8f10a6149.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
        if (!this.m_Dict.ContainsKey(aKey))
          goto label_4;
label_1:
        int num1 = 1842855507;
label_2:
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2004863989)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 1784130833 ^ 1110789838;
              continue;
            case 2:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * 1821415605 ^ 459335073;
              continue;
            case 4:
              goto label_4;
            default:
              goto label_6;
          }
        }
label_6:
        return jsonNode;
label_4:
        jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
        num1 = 597798356;
        goto label_2;
      }
      set
      {
label_1:
        int num1 = 422919345;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1762702934)) % 8U)
          {
            case 0:
              this.m_Dict.Add(aKey, value);
              num1 = 944271587;
              continue;
            case 1:
              num1 = (int) num2 * -570636196 ^ 652996598;
              continue;
            case 2:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * -448315585 ^ -912608359;
              continue;
            case 3:
              goto label_1;
            case 4:
              goto label_3;
            case 5:
              num1 = (int) num2 * -651426729 ^ -1622851191;
              continue;
            case 6:
              int num3 = flag ? 17802700 : (num3 = 1948097974);
              num1 = num3 ^ (int) num2 * 889566312;
              continue;
            case 7:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -63199762 ^ -1990402174;
              continue;
            default:
              goto label_10;
          }
        }
label_3:
        return;
label_10:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 924306500;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ 351013972)) % 9U)
          {
            case 0:
              num1 = (int) num2 * 667647411 ^ 598485595;
              continue;
            case 2:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * -1666482760 ^ -1846850084;
                continue;
              }
              num3 = 1;
              break;
            case 3:
              goto label_1;
            case 4:
              num1 = (int) num2 * -526607992 ^ 1288669391;
              continue;
            case 5:
              int num4 = flag ? 1324247530 : (num4 = 976075223);
              num1 = num4 ^ (int) num2 * -927020524;
              continue;
            case 6:
              jsonNode = (JSONNode) null;
              num1 = 1696815389;
              continue;
            case 7:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * -443852533 ^ -1420460570;
              continue;
            case 8:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            default:
              goto label_13;
          }
          flag = num3 != 0;
          num1 = 1033539435;
        }
label_13:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -1739450795;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ -1738741962)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -251742745 ^ -987208671;
              continue;
            case 2:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 3:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * 1333267940 ^ 1332281542;
                continue;
              }
              num3 = 1;
              break;
            case 4:
              goto label_3;
            case 5:
              int num4 = !flag ? -1950502387 : (num4 = -130047716);
              num1 = num4 ^ (int) num2 * -940167005;
              continue;
            default:
              goto label_11;
          }
          flag = num3 != 0;
          num1 = -1478269811;
        }
label_3:
        return;
label_11:;
      }
    }

    public override int Count
    {
      get
      {
label_1:
        int num1 = -1178801974;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1083698890)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              count = this.m_Dict.Count;
              num1 = (int) num2 * -869015369 ^ 300133115;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 619297494;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1111517445)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            flag1 = this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * 1964969466 ^ 173515438;
            continue;
          case 2:
            num1 = 527761329;
            continue;
          case 3:
            flag2 = !JSONClass.\u206F‬⁬⁬⁭‌‬⁯‍⁯⁫‪‮​⁭⁬‬‎‏‭‌⁪⁪‫‏​⁯‎‌​​⁪‏⁯⁪⁬⁫‌⁪⁪‮(aKey);
            num1 = (int) num2 * 1789209059 ^ 473525686;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * -146397944 ^ -1023758801;
            continue;
          case 6:
            int num3 = flag2 ? -2060993656 : (num3 = -1297688437);
            num1 = num3 ^ (int) num2 * 881779464;
            continue;
          case 7:
            this.m_Dict.Add(aKey, aItem);
            num1 = 246973159;
            continue;
          case 8:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * 119925533 ^ -37706988;
            continue;
          case 9:
            int num4 = flag1 ? -891831210 : (num4 = -663350963);
            num1 = num4 ^ (int) num2 * 1049863539;
            continue;
          case 10:
            this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
            num1 = 633548758;
            continue;
          case 11:
            num1 = (int) num2 * -573726393 ^ 1033807924;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    public override JSONNode Remove(string aKey)
    {
label_1:
      int num1 = 72879952;
      bool flag;
      JSONNode jsonNode1;
      JSONNode jsonNode2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1904493905)) % 8U)
        {
          case 0:
            int num3 = !flag ? -1565505014 : (num3 = -250375492);
            num1 = num3 ^ (int) num2 * -757322900;
            continue;
          case 1:
            flag = !this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * -1760808688 ^ -1943444799;
            continue;
          case 2:
            num1 = (int) num2 * -1968536968 ^ 201875358;
            continue;
          case 3:
            jsonNode1 = this.m_Dict[aKey];
            num1 = 906592943;
            continue;
          case 4:
            goto label_1;
          case 5:
            jsonNode2 = (JSONNode) null;
            num1 = (int) num2 * -2138493927 ^ -1001037749;
            continue;
          case 6:
            this.m_Dict.Remove(aKey);
            jsonNode2 = jsonNode1;
            num1 = (int) num2 * -1105547464 ^ 1720740323;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return jsonNode2;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = 451045284;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 2034350345)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 101316522 ^ 1397781533;
            continue;
          case 1:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 2:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * 1333323870 ^ -780599795;
            continue;
          case 3:
            jsonNode = (JSONNode) null;
            num1 = 406855671;
            continue;
          case 5:
            if (aIndex < 0)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 43683738 ^ -412781070;
            continue;
          case 6:
            num1 = (int) num2 * 2139530707 ^ 289512823;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_12;
        }
        int num4;
        num1 = num4 = num3 != 0 ? 1958007563 : (num4 = 781767434);
      }
label_12:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      try
      {
        return (JSONNode) null;
      }
      catch
      {
        return (JSONNode) null;
      }
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        try
        {
          int num1 = this.\u003C\u003E1__state;
label_1:
          int num2 = -171053621;
          Dictionary<string, JSONNode>.Enumerator enumerator;
          KeyValuePair<string, JSONNode> N;
          while (true)
          {
            uint num3;
            switch ((num3 = (uint) (num2 ^ -1673347869)) % 22U)
            {
              case 0:
                goto label_11;
              case 1:
                int num4;
                num2 = num4 = num1 == 1 ? -1493493799 : (num4 = -1086717053);
                continue;
              case 2:
              case 12:
                this.\u003C\u003E1__state = -1;
                num2 = -1409635856;
                continue;
              case 3:
                int num5;
                num2 = num5 = !enumerator.MoveNext() ? -2097184568 : (num5 = -1345558700);
                continue;
              case 4:
                num2 = (int) num3 * -984244482 ^ 1607188134;
                continue;
              case 5:
                goto label_1;
              case 6:
              case 18:
                this.\u003C\u003E1__state = -3;
                num2 = -1109791297;
                continue;
              case 7:
                goto label_17;
              case 8:
                num2 = (int) num3 * -1480571092 ^ 1013639236;
                continue;
              case 9:
                this.\u003C\u003E2__current = N.Value;
                num2 = (int) num3 * -297248259 ^ -295402923;
                continue;
              case 10:
                num2 = (int) num3 * 593712800 ^ 1462626963;
                continue;
              case 11:
                num2 = (int) num3 * 2067169573 ^ -1051920596;
                continue;
              case 14:
                N = new KeyValuePair<string, JSONNode>();
                num2 = (int) num3 * -375251940 ^ 1374782340;
                continue;
              case 15:
                this.\u003C\u003E1__state = -3;
                num2 = (int) num3 * 193838784 ^ 798747135;
                continue;
              case 16:
                int num6 = num1 == 0 ? -804165737 : (num6 = -1396915182);
                num2 = num6 ^ (int) num3 * -140342820;
                continue;
              case 17:
                this.\u003C\u003Em__Finally1();
                num2 = (int) num3 * -296311009 ^ -1967753704;
                continue;
              case 19:
                N = enumerator.Current;
                num2 = -122211160;
                continue;
              case 20:
                enumerator = this.m_Dict.GetEnumerator();
                num2 = (int) num3 * 661239471 ^ -189144126;
                continue;
              case 21:
                num2 = (int) num3 * -100003565 ^ 288451733;
                continue;
              default:
                goto label_21;
            }
          }
label_11:
          return false;
label_17:
          this.\u003C\u003E1__state = 1;
          return true;
label_21:
          enumerator = new Dictionary<string, JSONNode>.Enumerator();
          return false;
        }
        __fault
        {
          this.System\u002EIDisposable\u002EDispose();
        }
      }
    }

    public IEnumerator GetEnumerator()
    {
      bool enumerator1;
      // ISSUE: fault handler
      try
      {
        // ISSUE: reference to a compiler-generated field
        int num1 = this.\u003C\u003E1__state;
label_1:
        int num2 = 1411666721;
        Dictionary<string, JSONNode>.Enumerator enumerator;
        KeyValuePair<string, JSONNode> N;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ 1270687326)) % 24U)
          {
            case 0:
              num2 = (int) num3 * 1193310277 ^ 331013822;
              continue;
            case 1:
            case 7:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = 1056751573;
              continue;
            case 2:
              enumerator = this.m_Dict.GetEnumerator();
              num2 = (int) num3 * 844959594 ^ -1967869723;
              continue;
            case 3:
              N = new KeyValuePair<string, JSONNode>();
              num2 = (int) num3 * 99778838 ^ -1139486767;
              continue;
            case 4:
              goto label_17;
            case 5:
              num2 = (int) num3 * -1145676188 ^ 1949288110;
              continue;
            case 6:
              enumerator = new Dictionary<string, JSONNode>.Enumerator();
              num2 = (int) num3 * 1692563404 ^ 700951645;
              continue;
            case 8:
              enumerator1 = false;
              num2 = 1869174484;
              continue;
            case 9:
              num2 = (int) num3 * -164934287 ^ 654962978;
              continue;
            case 10:
              N = enumerator.Current;
              num2 = 1790075864;
              continue;
            case 11:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = 1;
              num2 = (int) num3 * -13061812 ^ -1491870746;
              continue;
            case 13:
            case 22:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -1;
              num2 = 1070110828;
              continue;
            case 14:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E2__current = (object) N;
              num2 = (int) num3 * -299600913 ^ 197789791;
              continue;
            case 15:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = (int) num3 * 599523295 ^ -118876706;
              continue;
            case 16:
              goto label_1;
            case 17:
              // ISSUE: reference to a compiler-generated method
              this.\u003C\u003Em__Finally1();
              num2 = (int) num3 * -959489948 ^ -330699612;
              continue;
            case 19:
              enumerator1 = false;
              num2 = (int) num3 * 1420076528 ^ -1851591990;
              continue;
            case 20:
              int num4;
              num2 = num4 = num1 == 1 ? 529973001 : (num4 = 743679286);
              continue;
            case 21:
              int num5;
              num2 = num5 = !enumerator.MoveNext() ? 304777999 : (num5 = 1050926396);
              continue;
            case 23:
              int num6 = num1 == 0 ? 1323289214 : (num6 = 1297890797);
              num2 = num6 ^ (int) num3 * 36841394;
              continue;
            default:
              goto label_23;
          }
        }
label_17:
        enumerator1 = true;
      }
      __fault
      {
        // ISSUE: reference to a compiler-generated method
        this.System\u002EIDisposable\u002EDispose();
      }
label_23:
      return enumerator1;
    }

    public override string ToString()
    {
label_1:
      int num1 = 540982449;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1754791110)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = "{";
            num1 = (int) num2 * 1541030294 ^ -2084049505;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_10:
        int num3 = !enumerator.MoveNext() ? 1578599912 : (num3 = 1256112834);
        KeyValuePair<string, JSONNode> current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1754791110)) % 9U)
          {
            case 0:
              str = JSONClass.\u200D⁯⁬‪​‍‍‍​⁭⁮‬‎‎‌⁪​‏‮⁯​‫⁯‪⁪⁬‪‌⁭​‍‬⁭⁬⁫‭⁮⁯​‭‮(str, ", ");
              num3 = (int) num4 * -1370884604 ^ -1625820256;
              continue;
            case 1:
              num3 = (int) num4 * -1107412350 ^ -1739019519;
              continue;
            case 2:
              goto label_10;
            case 3:
              flag = JSONClass.\u206F‫⁯‬⁫‮⁪‮‌⁫⁫‪⁮⁫‌‍‍⁯​⁮⁯‪⁬‎‬‭⁯‏‍‏⁪‎‍⁪⁫​‬⁯⁭‫‮(str) > 2;
              num3 = (int) num4 * 1565658320 ^ -927254630;
              continue;
            case 5:
              current = enumerator.Current;
              num3 = 843872808;
              continue;
            case 6:
              int num5 = !flag ? -1623135620 : (num5 = -1767435361);
              num3 = num5 ^ (int) num4 * -107182806;
              continue;
            case 7:
              str = JSONClass.\u202B‍‭⁮⁬‮⁮‏⁭⁫‬‍‫⁫⁫⁭⁮‪⁬‪‏‭⁪‌⁭‮‪‫⁭‌‌⁮⁪⁪‫⁮‬‮⁪⁭‮(new string[5]
              {
                str,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u206F‪⁫⁮⁫‏⁪⁮⁪‎‪⁮⁫‎⁪‭‏‌⁬‪‌⁮⁭‪‮​‬‫‮⁮‏‍‫⁫⁯‏‪‪⁫‭‮((object) current.Value)
              });
              num3 = 319386646;
              continue;
            case 8:
              num3 = 1256112834;
              continue;
            default:
              goto label_16;
          }
        }
      }
label_16:
      return JSONClass.\u200D⁯⁬‪​‍‍‍​⁭⁮‬‎‎‌⁪​‏‮⁯​‫⁯‪⁪⁬‪‌⁭​‍‬⁭⁬⁫‭⁮⁯​‭‮(str, "}");
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = 2134204073;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1510062316)) % 3U)
        {
          case 1:
            str = "{ ";
            num1 = (int) num2 * -1010170047 ^ 1892574717;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator();
      try
      {
label_12:
        int num3 = !enumerator.MoveNext() ? 1179865261 : (num3 = 1082242124);
        KeyValuePair<string, JSONNode> current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1510062316)) % 11U)
          {
            case 1:
              str = JSONClass.\u200E⁭‎‏‭⁭‌‎‫‪‎⁬‫‎‭‫‭⁬⁪‪‌⁫‌‮‪⁭‪⁫‎‌‭⁯‮‬‮⁬‍‭‬‏‮(str, "\n", aPrefix, "   ");
              num3 = 811891305;
              continue;
            case 2:
              num3 = 1082242124;
              continue;
            case 3:
              int num5 = flag ? 1987603693 : (num5 = 1913184114);
              num3 = num5 ^ (int) num4 * 264785563;
              continue;
            case 4:
              current = enumerator.Current;
              num3 = 1041345374;
              continue;
            case 5:
              goto label_12;
            case 6:
              flag = JSONClass.\u206F‫⁯‬⁫‮⁪‮‌⁫⁫‪⁮⁫‌‍‍⁯​⁮⁯‪⁬‎‬‭⁯‏‍‏⁪‎‍⁪⁫​‬⁯⁭‫‮(str) > 3;
              num3 = (int) num4 * -1388656027 ^ -641855516;
              continue;
            case 7:
              str = JSONClass.\u200D⁯⁬‪​‍‍‍​⁭⁮‬‎‎‌⁪​‏‮⁯​‫⁯‪⁪⁬‪‌⁭​‍‬⁭⁬⁫‭⁮⁯​‭‮(str, ", ");
              num3 = (int) num4 * 224336973 ^ 1157156075;
              continue;
            case 8:
              num3 = (int) num4 * -759594864 ^ -97944183;
              continue;
            case 9:
              str = JSONClass.\u202B‍‭⁮⁬‮⁮‏⁭⁫‬‍‫⁫⁫⁭⁮‪⁬‪‏‭⁪‌⁭‮‪‫⁭‌‌⁮⁪⁪‫⁮‬‮⁪⁭‮(new string[5]
              {
                str,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u200D⁯⁬‪​‍‍‍​⁭⁮‬‎‎‌⁪​‏‮⁯​‫⁯‪⁪⁬‪‌⁭​‍‬⁭⁬⁫‭⁮⁯​‭‮(aPrefix, "   "))
              });
              num3 = (int) num4 * 1209653981 ^ -800581883;
              continue;
            case 10:
              num3 = (int) num4 * -1049973067 ^ 2055004023;
              continue;
            default:
              goto label_22;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_18:
        int num6 = 2096017277;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ 1510062316)) % 3U)
          {
            case 0:
              goto label_18;
            case 1:
              num6 = (int) num7 * -766975404 ^ 1709262325;
              continue;
            default:
              goto label_21;
          }
        }
label_21:;
      }
label_22:
      return JSONClass.\u200E⁭‎‏‭⁭‌‎‫‪‎⁬‫‎‭‫‭⁬⁪‪‌⁫‌‮‪⁭‪⁫‎‌‭⁯‮‬‮⁬‍‭‬‏‮(str, "\n", aPrefix, "}");
    }

    public override void Serialize(BinaryWriter aWriter)
    {
      JSONClass.\u206C‫‪⁫⁯⁯‏‌‏‬⁭‫‪⁮‭‪⁬‌‫⁭​⁮‪‬⁭⁮‍‮⁬⁭‎⁬‪‌⁭‮⁭⁬⁬‪‮(aWriter, (byte) 2);
label_1:
      int num1 = 1241305441;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1468761180)) % 3U)
        {
          case 1:
            JSONClass.\u206B‮‮⁭‬‫‪⁮‏‬‌⁯⁪‍⁯⁫‬‬‮⁮‏⁬​‭⁭‏‫⁫‮‭‬⁪‏⁪⁫‬‌‌‮⁪‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * 243229660 ^ -1193188444;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator())
      {
label_12:
        int num3 = !enumerator.MoveNext() ? 2138653123 : (num3 = 659656040);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1468761180)) % 8U)
          {
            case 0:
              JSONClass.\u202A⁪‍⁭⁬​‏‬⁫⁭⁫⁭‌‬‬‎‫‪⁮‎‭‏⁫‮‎‫⁯‪‏⁮⁪‎⁬​​‫‌⁮⁯‍‮(aWriter, current);
              num3 = (int) num4 * -777136610 ^ 1221271842;
              continue;
            case 1:
              num3 = (int) num4 * 843908854 ^ 290491647;
              continue;
            case 2:
              num3 = (int) num4 * 724280868 ^ -649982756;
              continue;
            case 3:
              num3 = 659656040;
              continue;
            case 4:
              current = enumerator.Current;
              num3 = 1790711198;
              continue;
            case 5:
              goto label_12;
            case 6:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * -807082772 ^ 687863301;
              continue;
            case 7:
              goto label_15;
            default:
              goto label_8;
          }
        }
label_15:
        return;
label_8:;
      }
    }

    static bool \u206F‬⁬⁬⁭‌‬⁯‍⁯⁫‪‮​⁭⁬‬‎‏‭‌⁪⁪‫‏​⁯‎‌​​⁪‏⁯⁪⁬⁫‌⁪⁪‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u206F‫⁯‬⁫‮⁪‮‌⁫⁫‪⁮⁫‌‍‍⁯​⁮⁯‪⁬‎‬‭⁯‏‍‏⁪‎‍⁪⁫​‬⁯⁭‫‮([In] string obj0) => obj0.Length;

    static string \u200D⁯⁬‪​‍‍‍​⁭⁮‬‎‎‌⁪​‏‮⁯​‫⁯‪⁪⁬‪‌⁭​‍‬⁭⁬⁫‭⁮⁯​‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206F‪⁫⁮⁫‏⁪⁮⁪‎‪⁮⁫‎⁪‭‏‌⁬‪‌⁮⁭‪‮​‬‫‮⁮‏‍‫⁫⁯‏‪‪⁫‭‮([In] object obj0) => obj0.ToString();

    static string \u202B‍‭⁮⁬‮⁮‏⁭⁫‬‍‫⁫⁫⁭⁮‪⁬‪‏‭⁪‌⁭‮‪‫⁭‌‌⁮⁪⁪‫⁮‬‮⁪⁭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200E⁭‎‏‭⁭‌‎‫‪‎⁬‫‎‭‫‭⁬⁪‪‌⁫‌‮‪⁭‪⁫‎‌‭⁯‮‬‮⁬‍‭‬‏‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u206C‫‪⁫⁯⁯‏‌‏‬⁭‫‪⁮‭‪⁬‌‫⁭​⁮‪‬⁭⁮‍‮⁬⁭‎⁬‪‌⁭‮⁭⁬⁬‪‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u206B‮‮⁭‬‫‪⁮‏‬‌⁯⁪‍⁯⁫‬‬‮⁮‏⁬​‭⁭‏‫⁫‮‭‬⁪‏⁪⁫‬‌‌‮⁪‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u202A⁪‍⁭⁬​‏‬⁫⁭⁫⁭‌‬‬‎‫‪⁮‎‭‏⁫‮‎‫⁯‪‏⁮⁪‎⁬​​‫‌⁮⁯‍‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
