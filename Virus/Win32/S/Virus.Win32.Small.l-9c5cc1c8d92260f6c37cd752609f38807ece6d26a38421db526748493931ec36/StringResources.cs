// Decompiled with JetBrains decompiler
// Type: Microsoft.VisualStudio.Tools.Applications.ExternalProcess.StringResources
// Assembly: vsta_ep32, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 3CC5CA36-7053-4599-B4DB-B51C75F56884
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Small.l-9c5cc1c8d92260f6c37cd752609f38807ece6d26a38421db526748493931ec36.exe

using System;
using System.Globalization;
using System.Resources;
using System.Threading;

namespace Microsoft.VisualStudio.Tools.Applications.ExternalProcess
{
  internal sealed class StringResources
  {
    internal const string ErrorCaption = "ErrorCaption";
    internal const string ErrorString = "ErrorString";
    private static StringResources loader;
    private ResourceManager resources;
    private static object s_InternalSyncObject;

    private static object InternalSyncObject
    {
      get
      {
        if (StringResources.s_InternalSyncObject == null)
        {
          object obj = new object();
          Interlocked.CompareExchange(ref StringResources.s_InternalSyncObject, obj, (object) null);
        }
        return StringResources.s_InternalSyncObject;
      }
    }

    internal StringResources() => this.resources = new ResourceManager("strings", this.GetType().Assembly);

    private static StringResources GetLoader()
    {
      if (StringResources.loader == null)
      {
        lock (StringResources.InternalSyncObject)
        {
          if (StringResources.loader == null)
            StringResources.loader = new StringResources();
        }
      }
      return StringResources.loader;
    }

    private static CultureInfo Culture => (CultureInfo) null;

    public static ResourceManager Resources => StringResources.GetLoader().resources;

    public static string GetString(string name, params object[] args)
    {
      StringResources loader = StringResources.GetLoader();
      if (loader == null)
        return (string) null;
      string format = loader.resources.GetString(name, StringResources.Culture);
      if (args == null || args.Length <= 0)
        return format;
      for (int index = 0; index < args.Length; ++index)
      {
        if (args[index] is string str && str.Length > 1024)
          args[index] = (object) (str.Substring(0, 1021) + "...");
      }
      return string.Format((IFormatProvider) CultureInfo.CurrentCulture, format, args);
    }

    public static string GetString(string name) => StringResources.GetLoader()?.resources.GetString(name, StringResources.Culture);

    public static object GetObject(string name) => StringResources.GetLoader()?.resources.GetObject(name, StringResources.Culture);
  }
}
