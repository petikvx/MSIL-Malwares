// Decompiled with JetBrains decompiler
// Type: IRefl.Managers.Visitor
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Adapter;
using IRefl.Composer;
using IRefl.Definitions;
using IRefl.Pools;
using IRefl.Producers;
using IRefl.Wrappers;
using ProjNet.Bridges;
using ProjNet.Common;
using ProjNet.Maps;
using ProjNet.Services;
using ProjNet.States;
using ProjNet.Structs;
using ProjNet.Templates;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;

namespace IRefl.Managers
{
  public class Visitor : IdentifierRegistryBridge, Instance, Attr, Reg, CodeObjectProducer
  {
    private ReaderItemState m_Comparator;
    private TagStatusService _Identifier;
    private GlobalPrototypeAdapter annotation;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Visitor(
      Initializer asset,
      ReaderItemState cust,
      TagStatusService rule,
      GlobalPrototypeAdapter value2,
      List<Strategy> reference3,
      string reg4,
      string config5,
      long indexOf_def6,
      string attr7,
      string vis8,
      string visitor9)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      base.\u002Ector(asset, reference3, reg4, config5, indexOf_def6, attr7, visitor9, vis8);
      this.m_Comparator = cust;
      this._Identifier = rule;
      this.annotation = value2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Visitor ResetRegistry(int task, bool createvis)
    {
      int num1 = 5;
      Visitor visitor;
      while (true)
      {
        int num2 = num1;
        Params @params;
        List<Config> cust;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_4;
            case 1:
            case 4:
              cust.Add(new Config("latitude_of_origin", 0.0));
              cust.Add(new Config("central_meridian", (double) (task * 6 - 183)));
              cust.Add(new Config("scale_factor", 0.9996));
              cust.Add(new Config("false_easting", 500000.0));
              cust.Add(new Config("false_northing", createvis ? 0.0 : 10000000.0));
              @params = new Params("Transverse_Mercator", cust, "UTM" + task.ToString((IFormatProvider) CultureInfo.InvariantCulture) + (createvis ? "N" : "S"), "EPSG", (long) (32600 + task + (createvis ? 0 : 100)), string.Empty, string.Empty, string.Empty);
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_9;
            case 2:
              goto label_1;
            case 3:
            case 6:
              goto label_3;
            case 5:
              cust = new List<Config>();
              if (Visitor.CallWrapper())
              {
                num2 = 4;
                continue;
              }
              goto label_3;
            case 7:
              goto label_9;
            default:
              if (Visitor.CallWrapper())
              {
                num2 = 6;
                continue;
              }
              goto case 1;
          }
        }
label_1:
        List<Strategy> reference3;
        reference3.Add(new Strategy("North", ElementNameStyle.North));
        visitor = new Visitor((Initializer) Token.WGS84, (ReaderItemState) InitializerItemState.WGS84, AdvisorStatusMap.ViewRegistry(), (GlobalPrototypeAdapter) @params, reference3, "WGS 84 / UTM zone " + task.ToString((IFormatProvider) CultureInfo.InvariantCulture) + (createvis ? "N" : "S"), "EPSG", (long) (32600 + task + (createvis ? 0 : 100)), string.Empty, "Large and medium scale topographic mapping and engineering survey.", string.Empty);
        num1 = 7;
        continue;
label_3:
        reference3.Add(new Strategy("East", ElementNameStyle.East));
        num1 = 2;
        continue;
label_4:
        reference3 = new List<Strategy>();
        goto label_3;
      }
label_9:
      return visitor;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ReaderItemState AssetMerchant() => this.m_Comparator;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InvokeMerchant(ReaderItemState config) => this.m_Comparator = config;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public TagStatusService CalculateItem() => this._Identifier;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ExcludeItem(TagStatusService ident) => this._Identifier = ident;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override Candidate WriteItem(int ID_task) => (Candidate) this._Identifier;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public GlobalPrototypeAdapter InsertMerchant() => this.annotation;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void WriteMerchant(GlobalPrototypeAdapter first) => this.annotation = first;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus()
    {
      int num1 = 3;
      if (true)
        goto label_20;
label_1:
      StringBuilder stringBuilder;
      stringBuilder.AppendFormat("PROJCS[\"{0}\", {1}, {2}", (object) this.Name, (object) this.AssetMerchant().RevertStatus(), (object) this.InsertMerchant().RevertStatus());
      int insertIAt = 0;
      int num2 = 5;
label_19:
      num1 = num2;
label_20:
      string str;
      while (true)
      {
        bool flag;
        int asset_length;
        int num3;
        switch (num1)
        {
          case 0:
          case 3:
            goto label_22;
          case 1:
            if (this.ForgotProcess()[0].DisableProcess() == ElementNameStyle.East && !(this.ForgotProcess()[1].Name != "Y"))
            {
              num3 = this.ForgotProcess()[1].DisableProcess() != ElementNameStyle.North ? 1 : 0;
              goto label_15;
            }
            else
              goto label_14;
          case 2:
          case 6:
            stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.CountItem(), (object) this.SelectItem());
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto case 8;
          case 4:
            if (this.ForgotProcess().Count != 2 || this.ForgotProcess()[0].Name != "X")
              goto label_14;
            else
              goto label_11;
          case 5:
            goto label_3;
          case 7:
label_5:
            if (flag)
            {
              stringBuilder.AppendFormat(", {0}", (object) this.ChangeItem(asset_length).OrderProcess());
              ++asset_length;
              goto label_18;
            }
            else
              break;
          case 8:
label_9:
            stringBuilder.Append("]");
            str = stringBuilder.ToString();
            num1 = 10;
            continue;
          case 9:
            goto label_1;
          case 10:
            goto label_23;
          default:
            goto label_21;
        }
label_6:
        if (!string.IsNullOrEmpty(this.CountItem()) && this.SelectItem() > 0L)
        {
          num1 = 2;
          continue;
        }
        goto label_9;
label_14:
        num3 = 1;
label_15:
        if (num3 != 0)
          asset_length = 0;
        else
          goto label_6;
label_18:
        flag = asset_length < this.ForgotProcess().Count;
        goto label_5;
      }
label_3:
      for (; insertIAt < this.InsertMerchant().CreateItem(); ++insertIAt)
        stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, ", {0}", new object[1]
        {
          (object) this.InsertMerchant().PushMerchant(insertIAt).RestartRegistry()
        });
      stringBuilder.AppendFormat(", {0}", (object) this.CalculateItem().RevertStatus());
      num2 = 4;
      goto label_19;
label_11:
      num2 = 1;
      goto label_19;
label_21:
      num2 = 7;
      goto label_19;
label_22:
      stringBuilder = new StringBuilder();
      num2 = 9;
      goto label_19;
label_23:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem()
    {
      int num1 = 2;
      string str;
      while (true)
      {
        int num2 = num1;
        List<Strategy>.Enumerator enumerator;
        StringBuilder stringBuilder;
        while (true)
        {
          switch (num2)
          {
            case 0:
              try
              {
label_6:
                while (enumerator.MoveNext())
                {
                  Strategy current = enumerator.Current;
                  int num3 = 2;
                  while (true)
                  {
                    switch (num3)
                    {
                      case 0:
                      case 2:
                        goto label_3;
                      case 1:
                      case 3:
                        goto label_6;
                      default:
                        num3 = 3;
                        continue;
                    }
                  }
label_3:
                  stringBuilder.Append(current.EnableProcess());
                }
              }
              finally
              {
                enumerator.Dispose();
              }
              stringBuilder.AppendFormat("{0}{1}{2}</CS_ProjectedCoordinateSystem></CS_CoordinateSystem>", (object) this.AssetMerchant().AssetItem(), (object) this.CalculateItem().AssetItem(), (object) this.InsertMerchant().AssetItem());
              goto case 3;
            case 1:
            case 4:
              stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_CoordinateSystem Dimension=\"{0}\"><CS_ProjectedCoordinateSystem>{1}", new object[2]
              {
                (object) this.InsertItem(),
                (object) this.ListRegistry()
              });
              enumerator = this.ForgotProcess().GetEnumerator();
              if (!Visitor.OrderWrapper())
              {
                num2 = 0;
                continue;
              }
              goto label_15;
            case 2:
              goto label_12;
            case 3:
            case 5:
              str = stringBuilder.ToString();
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 1;
            case 6:
              goto label_15;
            default:
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_12;
          }
        }
label_12:
        stringBuilder = new StringBuilder();
        num1 = 4;
      }
label_15:
      return str;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool InvokeItem(object instance)
    {
      int num1 = 7;
      if (!Visitor.OrderWrapper())
        goto label_16;
label_1:
      bool flag1 = false;
      goto label_23;
label_16:
      Visitor visitor;
      while (true)
      {
        int num2;
        int num3;
        bool flag2;
        switch (num1)
        {
          case 0:
            if (visitor.AssetMerchant().InvokeItem((object) this.AssetMerchant()) && visitor.ValidateItem().InvokeItem((object) this.ValidateItem()) && visitor.CalculateItem().InvokeItem((object) this.CalculateItem()))
            {
              num3 = 9;
              break;
            }
            goto label_21;
          case 1:
          case 4:
            if (!flag2)
            {
              visitor = instance as Visitor;
              if (visitor.InsertItem() == this.InsertItem())
              {
                num2 = 0;
                if (true)
                {
                  num1 = 5;
                  continue;
                }
                goto label_23;
              }
              else
              {
                num1 = 8;
                continue;
              }
            }
            else
              goto label_10;
          case 2:
          case 8:
            goto label_1;
          case 3:
            goto label_6;
          case 5:
            for (; num2 < visitor.InsertItem(); ++num2)
            {
              if (visitor.ChangeItem(num2).DisableProcess() == this.ChangeItem(num2).DisableProcess())
              {
                if (!visitor.WriteItem(num2).InvokeItem((object) this.WriteItem(num2)))
                {
                  flag1 = false;
                  num3 = 6;
                  goto label_15;
                }
              }
              else
                goto label_6;
            }
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto label_6;
          case 6:
            goto label_23;
          case 7:
            flag2 = !(instance is Visitor);
            num3 = 4;
            break;
          case 9:
            goto label_20;
          default:
            num1 = 3;
            continue;
        }
label_15:
        num1 = num3;
      }
label_6:
      flag1 = false;
      goto label_23;
label_10:
      flag1 = false;
      goto label_23;
label_20:
      int num4 = visitor.InsertMerchant().InvokeItem((object) this.InsertMerchant()) ? 1 : 0;
      goto label_22;
label_21:
      num4 = 0;
label_22:
      flag1 = num4 != 0;
label_23:
      return flag1;
    }

    internal static bool CallWrapper() => true;

    internal static bool OrderWrapper() => false;
  }
}
