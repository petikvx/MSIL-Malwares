// Decompiled with JetBrains decompiler
// Type: HeavyDuck.DeCaire_Report_Display
// Assembly: RemotingFieldCachedD, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EDD4CF72-357A-47DC-BB8E-50FC31FC092E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-1095c007bb641be5c286e491a4f4ced026984a7767f930ee09c4d2995b5a76f2.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace HeavyDuck
{
  public class DeCaire_Report_Display : Form
  {
    private IContainer components = (IContainer) null;
    private TextBox textBox1;
    private Button button1;
    private Button button2;

    public DeCaire_Report_Display(List<DeCaire_Airport_Report> reportList)
    {
      this.InitializeComponent();
      this.displayReport(this.collateReport(reportList));
    }

    private Dictionary<string, Dictionary<string, object>> collateReport(
      List<DeCaire_Airport_Report> reportList)
    {
      Dictionary<string, Dictionary<string, object>> dictionary1 = new Dictionary<string, Dictionary<string, object>>();
      foreach (DeCaire_Airport_Report report in reportList)
      {
        if (!dictionary1.ContainsKey(report.AirportCode))
        {
          Dictionary<string, object> dictionary2 = new Dictionary<string, object>();
          dictionary1[report.AirportCode] = dictionary2;
          dictionary2.Add("airportName", (object) report.AirportName);
          dictionary2.Add("airportCity", (object) report.AirportCity);
          dictionary2.Add("airportState", (object) report.AirportState);
          dictionary2.Add("airportCountry", (object) report.AirportCountry);
          dictionary2.Add("highestFlightDate", (object) report.Date);
          dictionary2.Add("highestFlightCount", (object) (report.NumArrivals + report.NumDepartures));
          dictionary2.Add("highestPassengerDate", (object) report.Date);
          dictionary2.Add("highestPassengerCount", (object) report.NumPassengers);
          List<int> intList = new List<int>()
          {
            report.NumPassengers
          };
          dictionary2.Add("passengerNumList", (object) intList);
        }
        else
        {
          int num1 = (int) dictionary1[report.AirportCode]["highestFlightCount"];
          if (report.NumArrivals + report.NumDepartures > num1)
          {
            dictionary1[report.AirportCode]["highestFlightDate"] = (object) report.Date;
            dictionary1[report.AirportCode]["highestFlightCount"] = (object) (report.NumArrivals + report.NumDepartures);
          }
          int num2 = (int) dictionary1[report.AirportCode]["highestPassengerCount"];
          if (report.NumPassengers > num2)
          {
            dictionary1[report.AirportCode]["highestPassengerDate"] = (object) report.Date;
            dictionary1[report.AirportCode]["highestPassengerCount"] = (object) report.NumPassengers;
          }
          List<int> intList = (List<int>) dictionary1[report.AirportCode]["passengerNumList"];
          intList.Add(report.NumPassengers);
          dictionary1[report.AirportCode]["passengerNumList"] = (object) intList;
        }
      }
      foreach (DeCaire_Airport_Report report in reportList)
      {
        List<int> source = (List<int>) dictionary1[report.AirportCode]["passengerNumList"];
        dictionary1[report.AirportCode]["averagePassengers"] = (object) source.Average();
      }
      return dictionary1;
    }

    private void displayReport(
      Dictionary<string, Dictionary<string, object>> airCodeDict)
    {
      List<string> list = airCodeDict.Keys.ToList<string>();
      list.Sort();
      string key = (string) null;
      string str1 = (string) null;
      string str2 = (string) null;
      string str3 = (string) null;
      string str4 = (string) null;
      DeCaire_Airport_API deCaireAirportApi = new DeCaire_Airport_API();
      string str5 = "Airport Report\r\n\r\n**********\r\n";
      foreach (string airportCode in list)
      {
        try
        {
          Call call = deCaireAirportApi.GetCall(airportCode);
          if (!string.IsNullOrEmpty(call.code) && !string.IsNullOrEmpty(call.location) && !string.IsNullOrEmpty(call.name))
          {
            key = call.code;
            string location = call.location;
            str1 = call.name;
            string[] strArray = Regex.Split(location, ", ");
            str2 = strArray[0];
            str3 = strArray[strArray.Length - 1];
            str4 = strArray.Length != 3 ? "" : strArray[1];
          }
        }
        catch
        {
          key = airportCode;
          str1 = (string) airCodeDict[key]["airportName"];
          str2 = (string) airCodeDict[key]["airportCity"];
          str3 = (string) airCodeDict[key]["airportCountry"];
          str4 = (string) airCodeDict[key]["airportState"];
        }
        finally
        {
          string str6 = str5 + "Airport: " + key + "\r\n" + str1 + "\r\n" + str2 + ", ";
          if (str4 != null)
            str6 = str6 + str4 + ", ";
          string[] strArray1 = new string[7]
          {
            str6,
            str3,
            "\r\n\r\nMaximum number of flights in one day: ",
            null,
            null,
            null,
            null
          };
          int num = (int) airCodeDict[key]["highestFlightCount"];
          strArray1[3] = num.ToString();
          strArray1[4] = "\r\nDate of maximum flights: ";
          strArray1[5] = ((DateTime) airCodeDict[key]["highestFlightDate"]).ToString("MMMM dd, yyyy");
          strArray1[6] = "\r\n\r\n";
          string[] strArray2 = new string[6]
          {
            string.Concat(strArray1),
            "Maximum number of passengers in one day: ",
            null,
            null,
            null,
            null
          };
          num = (int) airCodeDict[key]["highestPassengerCount"];
          strArray2[2] = num.ToString();
          strArray2[3] = "\r\nDate of maximum passengers: ";
          strArray2[4] = ((DateTime) airCodeDict[key]["highestPassengerDate"]).ToString("MMMM dd, yyyy");
          strArray2[5] = "\r\n\r\n";
          str5 = string.Concat(strArray2) + "Average number of passengers each day: " + ((double) airCodeDict[key]["averagePassengers"]).ToString("F0");
          if (list.IndexOf(airportCode) != list.Count - 1)
            str5 += "\r\n\r\n";
        }
        this.textBox1.Text = str5;
        this.textBox1.Select(0, 0);
      }
    }

    private void button2_Click(object sender, EventArgs e) => this.Close();

    private void DeCaire_Report_Display_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (MessageBox.Show("Are you sure you want to close the report?", "Confirm exit", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.No)
        return;
      e.Cancel = true;
    }

    private void button1_Click(object sender, EventArgs e) => Clipboard.SetText(this.textBox1.Text);

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (DeCaire_Report_Display));
      this.textBox1 = new TextBox();
      this.button1 = new Button();
      this.button2 = new Button();
      this.SuspendLayout();
      this.textBox1.Location = new Point(40, 40);
      this.textBox1.Multiline = true;
      this.textBox1.Name = "textBox1";
      this.textBox1.ScrollBars = ScrollBars.Vertical;
      this.textBox1.Size = new Size(457, 245);
      this.textBox1.TabIndex = 0;
      this.button1.Location = new Point(40, 322);
      this.button1.Name = "button1";
      this.button1.Size = new Size(99, 23);
      this.button1.TabIndex = 1;
      this.button1.Text = "Copy to Clipboard";
      this.button1.UseVisualStyleBackColor = true;
      this.button1.Click += new EventHandler(this.button1_Click);
      this.button2.Location = new Point(145, 322);
      this.button2.Name = "button2";
      this.button2.Size = new Size(75, 23);
      this.button2.TabIndex = 2;
      this.button2.Text = "Exit";
      this.button2.UseVisualStyleBackColor = true;
      this.button2.Click += new EventHandler(this.button2_Click);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(541, 357);
      this.Controls.Add((Control) this.button2);
      this.Controls.Add((Control) this.button1);
      this.Controls.Add((Control) this.textBox1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (DeCaire_Report_Display);
      this.Text = "Display Report";
      this.FormClosing += new FormClosingEventHandler(this.DeCaire_Report_Display_FormClosing);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
