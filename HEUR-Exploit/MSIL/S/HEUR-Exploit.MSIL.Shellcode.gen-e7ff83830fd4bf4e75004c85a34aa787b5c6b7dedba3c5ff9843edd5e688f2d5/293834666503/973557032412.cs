// Decompiled with JetBrains decompiler
// Type: 293834666503.973557032412
// Assembly: 069511259246, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 6D0FD131-484D-4146-B8A3-FCA5C0E4E111
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-e7ff83830fd4bf4e75004c85a34aa787b5c6b7dedba3c5ff9843edd5e688f2d5.exe

using \u003293834666503;
using System;
using System.IO;

namespace \u003293834666503
{
  public sealed class \u003973557032412
  {
    private StreamWriter \u003791360142083;
    private \u003973557032412.\u003663330134359 \u003988455065775;
    private readonly object \u003225573440451 = new object();

    internal \u003973557032412(
      StreamWriter streamWriter = null,
      \u003973557032412.\u003663330134359 callback = null)
    {
      this.\u003791360142083 = streamWriter;
      this.\u003988455065775 = callback;
    }

    public void \u003235848446868(string _param1)
    {
      lock (this.\u003225573440451)
      {
        if (this.\u003791360142083 != null)
          this.\u003791360142083.WriteLine(_param1);
        \u003973557032412.\u003663330134359 obj = this.\u003988455065775;
        if (obj == null)
          return;
        obj(_param1);
      }
    }

    public void \u003055378542904()
    {
      lock (this.\u003225573440451)
      {
        if (this.\u003791360142083 == null)
          return;
        this.\u003791360142083.Flush();
      }
    }

    public void \u003077800193341()
    {
      lock (this.\u003225573440451)
      {
        if (this.\u003791360142083 != null)
          this.\u003791360142083.Close();
        this.\u003791360142083 = (StreamWriter) null;
      }
    }

    internal static StreamWriter \u003286458845972(string _param0, bool _param1)
    {
      if (string.IsNullOrEmpty(_param0))
        return (StreamWriter) null;
      string tempPath = Path.GetTempPath();
      StreamWriter streamWriter = (StreamWriter) null;
      string path = Path.IsPathRooted(_param0) || !string.IsNullOrEmpty(tempPath) && Directory.Exists(tempPath) ? Path.Combine(tempPath, _param0) : throw new ArgumentException("logFileName");
      try
      {
        streamWriter = new StreamWriter((Stream) File.Open(path, FileMode.Create, FileAccess.Write, FileShare.Read));
      }
      catch (IOException ex)
      {
        if (_param1)
          throw;
      }
      return streamWriter;
    }

    public static \u003973557032412 \u003475820830939(
      string _param0,
      \u003973557032412.\u003663330134359 _param1)
    {
      return new \u003973557032412(\u003973557032412.\u003286458845972(_param0, true), _param1);
    }

    public delegate void \u003663330134359(string outputString);
  }
}
