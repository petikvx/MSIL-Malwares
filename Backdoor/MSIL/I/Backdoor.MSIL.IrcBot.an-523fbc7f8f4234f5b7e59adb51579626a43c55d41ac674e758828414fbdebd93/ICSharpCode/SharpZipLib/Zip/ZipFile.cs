// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.ZipFile
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using ICSharpCode.SharpZipLib.Checksums;
using ICSharpCode.SharpZipLib.Core;
using ICSharpCode.SharpZipLib.Encryption;
using ICSharpCode.SharpZipLib.Zip.Compression;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using System;
using System.Collections;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;

namespace ICSharpCode.SharpZipLib.Zip
{
  public class ZipFile : IEnumerable, IDisposable
  {
    private const int \uE015 = 4096;
    public ZipFile.KeysRequiredEventHandler KeysRequired;
    private bool \uE014;
    private string \uE013;
    private string \uE012;
    private Stream \uE011;
    private bool \uE010;
    private long \uE00F;
    private ZipEntry[] \uE00E;
    private byte[] \uE00D;
    private bool \uE00C;
    private UseZip64 \uE00B = UseZip64.Dynamic;
    private ArrayList \uE00A;
    private long \uE009;
    private Hashtable \uE008;
    private IArchiveStorage \uE007;
    private IDynamicDataSource \uE006;
    private bool \uE005;
    private int \uE004 = 4096;
    private byte[] \uE003;
    private ZipFile.ZipString \uE002;
    private bool \uE001;
    private IEntryFactory \uE000 = (IEntryFactory) new ZipEntryFactory();

    private void \uE000(string _param1)
    {
      if (this.KeysRequired == null)
        return;
      KeysRequiredEventArgs e = new KeysRequiredEventArgs(_param1, this.\uE00D);
      this.KeysRequired((object) this, e);
      this.\uE00D = e.Key;
    }

    private byte[] \uE000
    {
      get => this.\uE00D;
      set => this.\uE00D = value;
    }

    public string Password
    {
      set
      {
        switch (value)
        {
          case null:
            this.\uE00D = (byte[]) null;
            break;
          default:
            if (value.Length != 0)
            {
              this.\uE00D = PkzipClassic.GenerateKeys(ZipConstants.ConvertToArray(value));
              break;
            }
            goto case null;
        }
      }
    }

    private bool \uE000 => this.\uE00D != null;

    public ZipFile(string name)
    {
      switch (name)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uF1C2\uF1CD\uF1C1\uF1C9", 61868));
        default:
          this.\uE013 = name;
          this.\uE011 = (Stream) File.OpenRead(name);
          this.\uE010 = true;
          try
          {
            this.\uE000();
            break;
          }
          catch
          {
            this.\uE000(true);
            throw;
          }
      }
    }

    public ZipFile(FileStream file)
    {
      if (file == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uEE11\uEE1E\uEE1B\uEE12", 61047));
      this.\uE011 = file.CanSeek ? (Stream) file : throw new ArgumentException(\uE01B.\uE000("\uF2AE\uF289\uF28F\uF298\uF29C\uF290\uF2DD\uF294\uF28E\uF2DD\uF293\uF292\uF289\uF2DD\uF28E\uF298\uF298\uF296\uF29C\uF29F\uF291\uF298", 62205), \uE01B.\uE000("\uEE11\uEE1E\uEE1B\uEE12", 61047));
      this.\uE013 = file.Name;
      this.\uE010 = true;
      try
      {
        this.\uE000();
      }
      catch
      {
        this.\uE000(true);
        throw;
      }
    }

    public ZipFile(Stream stream)
    {
      if (stream == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uE71E\uE719\uE71F\uE708\uE70C\uE700", 59245));
      this.\uE011 = stream.CanSeek ? stream : throw new ArgumentException(\uE01B.\uE000("\uF2AE\uF289\uF28F\uF298\uF29C\uF290\uF2DD\uF294\uF28E\uF2DD\uF293\uF292\uF289\uF2DD\uF28E\uF298\uF298\uF296\uF29C\uF29F\uF291\uF298", 62205), \uE01B.\uE000("\uE71E\uE719\uE71F\uE708\uE70C\uE700", 59245));
      this.\uE010 = true;
      if (this.\uE011.Length > 0L)
      {
        try
        {
          this.\uE000();
        }
        catch
        {
          this.\uE000(true);
          throw;
        }
      }
      else
      {
        this.\uE00E = new ZipEntry[0];
        this.\uE00C = true;
      }
    }

    internal ZipFile()
    {
      this.\uE00E = new ZipEntry[0];
      this.\uE00C = true;
    }

    ~ZipFile() => this.Dispose(false);

    public void Close()
    {
      this.\uE000(true);
      GC.SuppressFinalize((object) this);
    }

    public static ZipFile Create(string fileName)
    {
      switch (fileName)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uE010\uE01F\uE01A\uE013\uE038\uE017\uE01B\uE013", 57462));
        default:
          FileStream fileStream = File.Create(fileName);
          return new ZipFile()
          {
            \uE013 = fileName,
            \uE011 = (Stream) fileStream,
            \uE010 = true
          };
      }
    }

    public static ZipFile Create(Stream outStream)
    {
      if (outStream == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uF4F6\uF4EC\uF4ED\uF4CA\uF4ED\uF4EB\uF4FC\uF4F8\uF4F4", 62617));
      if (!outStream.CanWrite)
        throw new ArgumentException(\uE01B.\uE000("\uF609\uF62E\uF628\uF63F\uF63B\uF637\uF67A\uF633\uF629\uF67A\uF634\uF635\uF62E\uF67A\uF62D\uF628\uF633\uF62E\uF63F\uF63B\uF638\uF636\uF63F", 63066), \uE01B.\uE000("\uF4F6\uF4EC\uF4ED\uF4CA\uF4ED\uF4EB\uF4FC\uF4F8\uF4F4", 62617));
      return outStream.CanSeek ? new ZipFile()
      {
        \uE011 = outStream
      } : throw new ArgumentException(\uE01B.\uE000("\uF2AE\uF289\uF28F\uF298\uF29C\uF290\uF2DD\uF294\uF28E\uF2DD\uF293\uF292\uF289\uF2DD\uF28E\uF298\uF298\uF296\uF29C\uF29F\uF291\uF298", 62205), \uE01B.\uE000("\uF4F6\uF4EC\uF4ED\uF4CA\uF4ED\uF4EB\uF4FC\uF4F8\uF4F4", 62617));
    }

    public bool IsStreamOwner
    {
      get => this.\uE010;
      set => this.\uE010 = value;
    }

    public bool IsEmbeddedArchive => this.\uE00F > 0L;

    public bool IsNewArchive => this.\uE00C;

    public string ZipFileComment => this.\uE012;

    public string Name => this.\uE013;

    [Obsolete("Use the Count property instead")]
    public int Size => this.\uE00E.Length;

    public long Count => (long) this.\uE00E.Length;

    [IndexerName("EntryByIndex")]
    public ZipEntry this[int index] => (ZipEntry) this.\uE00E[index].Clone();

    public IEnumerator GetEnumerator()
    {
      if (this.\uE014)
        throw new ObjectDisposedException(\uE01B.\uE000("\uEB95\uEBA6\uEBBF\uEB89\uEBA6\uEBA3\uEBAA", 60367));
      return (IEnumerator) new ZipFile.ZipEntryEnumerator(this.\uE00E);
    }

    public int FindEntry(string name, bool ignoreCase)
    {
      if (this.\uE014)
        throw new ObjectDisposedException(\uE01B.\uE000("\uEB95\uEBA6\uEBBF\uEB89\uEBA6\uEBA3\uEBAA", 60367));
      for (int entry = 0; entry < this.\uE00E.Length; ++entry)
      {
        if (string.Compare(name, this.\uE00E[entry].Name, ignoreCase, CultureInfo.InvariantCulture) == 0)
          return entry;
      }
      return -1;
    }

    public ZipEntry GetEntry(string name)
    {
      if (this.\uE014)
        throw new ObjectDisposedException(\uE01B.\uE000("\uEB95\uEBA6\uEBBF\uEB89\uEBA6\uEBA3\uEBAA", 60367));
      int entry = this.FindEntry(name, true);
      return entry < 0 ? (ZipEntry) null : (ZipEntry) this.\uE00E[entry].Clone();
    }

    public Stream GetInputStream(ZipEntry entry)
    {
      if (entry == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uEEB7\uEEBC\uEEA6\uEEA0\uEEAB", 61138));
      if (this.\uE014)
        throw new ObjectDisposedException(\uE01B.\uE000("\uEB95\uEBA6\uEBBF\uEB89\uEBA6\uEBA3\uEBAA", 60367));
      long entryIndex = entry.ZipFileIndex;
      if (entryIndex < 0L || entryIndex >= (long) this.\uE00E.Length || this.\uE00E[entryIndex].Name != entry.Name)
      {
        entryIndex = (long) this.FindEntry(entry.Name, true);
        if (entryIndex < 0L)
          throw new ZipException(\uE01B.\uE000("\uE677\uE65C\uE646\uE640\uE64B\uE612\uE651\uE653\uE65C\uE65C\uE65D\uE646\uE612\uE650\uE657\uE612\uE654\uE65D\uE647\uE65C\uE656", 58930));
      }
      return this.GetInputStream(entryIndex);
    }

    public Stream GetInputStream(long entryIndex)
    {
      if (this.\uE014)
        throw new ObjectDisposedException(\uE01B.\uE000("\uEB95\uEBA6\uEBBF\uEB89\uEBA6\uEBA3\uEBAA", 60367));
      long start = this.\uE000(this.\uE00E[(IntPtr) entryIndex]);
      CompressionMethod compressionMethod = this.\uE00E[(IntPtr) entryIndex].CompressionMethod;
      Stream baseInputStream = (Stream) new ZipFile.PartialInputStream(this, start, this.\uE00E[(IntPtr) entryIndex].CompressedSize);
      if (this.\uE00E[entryIndex].IsCrypted)
      {
        baseInputStream = this.\uE001(baseInputStream, this.\uE00E[entryIndex]);
        if (baseInputStream == null)
          throw new ZipException(\uE01B.\uE000("\uE345\uE37E\uE371\uE372\uE37C\uE375\uE330\uE364\uE37F\uE330\uE374\uE375\uE373\uE362\uE369\uE360\uE364\uE330\uE364\uE378\uE379\uE363\uE330\uE375\uE37E\uE364\uE362\uE369", 58128));
      }
      switch (compressionMethod)
      {
        case CompressionMethod.Stored:
          return baseInputStream;
        case CompressionMethod.Deflated:
          baseInputStream = (Stream) new InflaterInputStream(baseInputStream, new Inflater(true));
          goto case CompressionMethod.Stored;
        default:
          throw new ZipException(\uE01B.\uE000("\uE0FF\uE0C4\uE0D9\uE0DF\uE0DA\uE0DA\uE0C5\uE0D8\uE0DE\uE0CF\uE0CE\uE08A\uE0C9\uE0C5\uE0C7\uE0DA\uE0D8\uE0CF\uE0D9\uE0D9\uE0C3\uE0C5\uE0C4\uE08A\uE0C7\uE0CF\uE0DE\uE0C2\uE0C5\uE0CE\uE08A", 57514) + (object) compressionMethod);
      }
    }

    public bool TestArchive(bool testData) => this.TestArchive(testData, TestStrategy.FindFirstError, (ZipTestResultHandler) null);

    public bool TestArchive(
      bool testData,
      TestStrategy strategy,
      ZipTestResultHandler resultHandler)
    {
      if (this.\uE014)
        throw new ObjectDisposedException(\uE01B.\uE000("\uEB95\uEBA6\uEBBF\uEB89\uEBA6\uEBA3\uEBAA", 60367));
      TestStatus status = new TestStatus(this);
      if (resultHandler != null)
        resultHandler(status, (string) null);
      ZipFile.HeaderTest headerTest = testData ? ZipFile.HeaderTest.Extract | ZipFile.HeaderTest.Header : ZipFile.HeaderTest.Header;
      bool flag = true;
      try
      {
        for (int index = 0; flag && (long) index < this.Count; ++index)
        {
          if (resultHandler != null)
          {
            status.\uE000(this[index]);
            status.\uE000(TestOperation.EntryHeader);
            resultHandler(status, (string) null);
          }
          try
          {
            this.\uE000(this[index], headerTest);
          }
          catch (ZipException ex)
          {
            status.\uE000();
            if (resultHandler != null)
              resultHandler(status, string.Format(\uE01B.\uE000("\uE70B\uE736\uE72D\uE72B\uE73E\uE73A\uE727\uE721\uE720\uE76E\uE72A\uE73B\uE73C\uE727\uE720\uE729\uE76E\uE73A\uE72B\uE73D\uE73A\uE76E\uE763\uE76E\uE769\uE735\uE77E\uE733\uE769", 59214), (object) ex.Message));
            if (strategy == TestStrategy.FindFirstError)
              flag = false;
          }
          if (flag && testData && this[index].IsFile)
          {
            if (resultHandler != null)
            {
              status.\uE000(TestOperation.EntryData);
              resultHandler(status, (string) null);
            }
            Crc32 crc32 = new Crc32();
            using (Stream inputStream = this.GetInputStream(this[index]))
            {
              byte[] buffer = new byte[4096];
              long num = 0;
              int count;
              while ((count = inputStream.Read(buffer, 0, buffer.Length)) > 0)
              {
                crc32.Update(buffer, 0, count);
                if (resultHandler != null)
                {
                  num += (long) count;
                  status.\uE000(num);
                  resultHandler(status, (string) null);
                }
              }
            }
            if (this[index].Crc != crc32.Value)
            {
              status.\uE000();
              if (resultHandler != null)
                resultHandler(status, \uE01B.\uE000("\uEAE8\uEAF9\uEAE8\uEA8B\uEAC6\uEAC2\uEAD8\uEAC6\uEACA\uEADF\uEAC8\uEAC3", 60075));
              if (strategy == TestStrategy.FindFirstError)
                flag = false;
            }
            if ((this[index].Flags & 8) != 0)
            {
              \uE00B obj = new \uE00B(this.\uE011);
              DescriptorData descriptorData = new DescriptorData();
              obj.\uE000(this[index].LocalHeaderRequiresZip64, descriptorData);
              if (this[index].Crc != descriptorData.Crc)
                status.\uE000();
              if (this[index].CompressedSize != descriptorData.CompressedSize)
                status.\uE000();
              if (this[index].Size != descriptorData.Size)
                status.\uE000();
            }
          }
          if (resultHandler != null)
          {
            status.\uE000(TestOperation.EntryComplete);
            resultHandler(status, (string) null);
          }
        }
        if (resultHandler != null)
        {
          status.\uE000(TestOperation.MiscellaneousTests);
          resultHandler(status, (string) null);
        }
      }
      catch (Exception ex)
      {
        status.\uE000();
        if (resultHandler != null)
          resultHandler(status, string.Format(\uE01B.\uE000("\uE70B\uE736\uE72D\uE72B\uE73E\uE73A\uE727\uE721\uE720\uE76E\uE72A\uE73B\uE73C\uE727\uE720\uE729\uE76E\uE73A\uE72B\uE73D\uE73A\uE76E\uE763\uE76E\uE769\uE735\uE77E\uE733\uE769", 59214), (object) ex.Message));
      }
      if (resultHandler != null)
      {
        status.\uE000(TestOperation.Complete);
        status.\uE000((ZipEntry) null);
        resultHandler(status, (string) null);
      }
      return status.ErrorCount == 0;
    }

    private long \uE000(ZipEntry _param1, ZipFile.HeaderTest _param2)
    {
      lock (this.\uE011)
      {
        bool flag1 = (_param2 & ZipFile.HeaderTest.Header) != (ZipFile.HeaderTest) 0;
        bool flag2 = (_param2 & ZipFile.HeaderTest.Extract) != (ZipFile.HeaderTest) 0;
        this.\uE011.Seek(this.\uE00F + _param1.Offset, SeekOrigin.Begin);
        if (this.\uE002() != 67324752U)
          throw new ZipException(string.Format(\uE01B.\uE000("\uF068\uF04D\uF050\uF051\uF058\uF01F\uF053\uF050\uF05C\uF05E\uF053\uF01F\uF057\uF05A\uF05E\uF05B\uF05A\uF04D\uF01F\uF04C\uF056\uF058\uF051\uF05E\uF04B\uF04A\uF04D\uF05A\uF01F\uF07F\uF044\uF00F\uF005\uF067\uF042", 61503), (object) (this.\uE00F + _param1.Offset)));
        short num1 = (short) this.\uE003();
        short flags = (short) this.\uE003();
        short num2 = (short) this.\uE003();
        short num3 = (short) this.\uE003();
        short num4 = (short) this.\uE003();
        uint num5 = this.\uE002();
        long num6 = (long) this.\uE002();
        long num7 = (long) this.\uE002();
        int length1 = (int) this.\uE003();
        int length2 = (int) this.\uE003();
        byte[] numArray1 = new byte[length1];
        StreamUtils.ReadFully(this.\uE011, numArray1);
        byte[] numArray2 = new byte[length2];
        StreamUtils.ReadFully(this.\uE011, numArray2);
        ZipExtraData zipExtraData = new ZipExtraData(numArray2);
        if (zipExtraData.Find(1))
        {
          if (num1 < (short) 45)
            throw new ZipException(string.Format(\uE01B.\uE000("\uE184\uE1B9\uE1B5\uE1B3\uE1A0\uE1E1\uE1A5\uE1A0\uE1B5\uE1A0\uE1E1\uE1A2\uE1AE\uE1AF\uE1B5\uE1A0\uE1A8\uE1AF\uE1B2\uE1E1\uE19B\uE1A8\uE1B1\uE1F7\uE1F5\uE1E1\uE1A8\uE1AF\uE1A7\uE1AE\uE1B3\uE1AC\uE1A0\uE1B5\uE1A8\uE1AE\uE1AF\uE1E1\uE1A3\uE1B4\uE1B5\uE1E1\uE1B7\uE1A4\uE1B3\uE1B2\uE1A8\uE1AE\uE1AF\uE1E1\uE1BA\uE1F1\uE1BC\uE1EF\uE1BA\uE1F0\uE1BC\uE1E1\uE1A8\uE1B2\uE1E1\uE1AF\uE1AE\uE1B5\uE1E1\uE1A9\uE1A8\uE1A6\uE1A9\uE1E1\uE1A4\uE1AF\uE1AE\uE1B4\uE1A6\uE1A9", 57793), (object) ((int) num1 / 10), (object) ((int) num1 % 10)));
          num7 = (uint) num7 == uint.MaxValue || (uint) num6 == uint.MaxValue ? zipExtraData.ReadLong() : throw new ZipException(\uE01B.\uE000("\uE926\uE90D\uE917\uE911\uE91A\uE943\uE910\uE90A\uE919\uE906\uE910\uE943\uE90D\uE90C\uE917\uE943\uE900\uE90C\uE911\uE911\uE906\uE900\uE917\uE943\uE905\uE90C\uE911\uE943\uE939\uE90A\uE913\uE955\uE957", 59747));
          num6 = zipExtraData.ReadLong();
          if (((int) flags & 8) != 0)
          {
            if (num7 != -1L && num7 != _param1.Size)
              throw new ZipException(\uE01B.\uE000("\uE0B7\uE08D\uE09E\uE081\uE0C4\uE08D\uE08A\uE092\uE085\uE088\uE08D\uE080\uE0C4\uE082\uE08B\uE096\uE0C4\uE080\uE081\uE097\uE087\uE096\uE08D\uE094\uE090\uE08B\uE096", 57572));
            if (num6 != -1L && num6 != _param1.CompressedSize)
              throw new ZipException(\uE01B.\uE000("\uE787\uE7AB\uE7A9\uE7B4\uE7B6\uE7A1\uE7B7\uE7B7\uE7A1\uE7A0\uE7E4\uE7B7\uE7AD\uE7BE\uE7A1\uE7E4\uE7AD\uE7AA\uE7B2\uE7A5\uE7A8\uE7AD\uE7A0\uE7E4\uE7A2\uE7AB\uE7B6\uE7E4\uE7A0\uE7A1\uE7B7\uE7A7\uE7B6\uE7AD\uE7B4\uE7B0\uE7AB\uE7B6", 59332));
          }
        }
        else if (num1 >= (short) 45 && ((uint) num7 == uint.MaxValue || (uint) num6 == uint.MaxValue))
          throw new ZipException(\uE01B.\uE000("\uE1B3\uE184\uE190\uE194\uE188\uE193\uE184\uE185\uE1C1\uE1BB\uE188\uE191\uE1D7\uE1D5\uE1C1\uE184\uE199\uE195\uE184\uE18F\uE185\uE184\uE185\uE1C1\uE188\uE18F\uE187\uE18E\uE193\uE18C\uE180\uE195\uE188\uE18E\uE18F\uE1C1\uE18C\uE188\uE192\uE192\uE188\uE18F\uE186", 57825));
        if (flag2 && _param1.IsFile)
        {
          if (!_param1.IsCompressionMethodSupported())
            throw new ZipException(\uE01B.\uE000("\uF8AF\uF883\uF881\uF89C\uF89E\uF889\uF89F\uF89F\uF885\uF883\uF882\uF8CC\uF881\uF889\uF898\uF884\uF883\uF888\uF8CC\uF882\uF883\uF898\uF8CC\uF89F\uF899\uF89C\uF89C\uF883\uF89E\uF898\uF889\uF888", 63724));
          if (num1 > (short) 45 || num1 > (short) 20 && num1 < (short) 45)
            throw new ZipException(string.Format(\uE01B.\uE000("\uF07B\uF048\uF05F\uF05E\uF044\uF042\uF043\uF00D\uF05F\uF048\uF05C\uF058\uF044\uF05F\uF048\uF049\uF00D\uF059\uF042\uF00D\uF048\uF055\uF059\uF05F\uF04C\uF04E\uF059\uF00D\uF059\uF045\uF044\uF05E\uF00D\uF048\uF043\uF059\uF05F\uF054\uF00D\uF043\uF042\uF059\uF00D\uF05E\uF058\uF05D\uF05D\uF042\uF05F\uF059\uF048\uF049\uF00D\uF005\uF056\uF01D\uF050\uF004", 61485), (object) num1));
          if (((int) flags & 12384) != 0)
            throw new ZipException(\uE01B.\uE000("\uF0F8\uF0C4\uF0C9\uF08C\uF0C0\uF0C5\uF0CE\uF0DE\uF0CD\uF0DE\uF0D5\uF08C\uF0C8\uF0C3\uF0C9\uF0DF\uF08C\uF0C2\uF0C3\uF0D8\uF08C\uF0DF\uF0D9\uF0DC\uF0DC\uF0C3\uF0DE\uF0D8\uF08C\uF0D8\uF0C4\uF0C9\uF08C\uF0D6\uF0C5\uF0DC\uF08C\uF0DA\uF0C9\uF0DE\uF0DF\uF0C5\uF0C3\uF0C2\uF08C\uF0DE\uF0C9\uF0DD\uF0D9\uF0C5\uF0DE\uF0C9\uF0C8\uF08C\uF0D8\uF0C3\uF08C\uF0C9\uF0D4\uF0D8\uF0DE\uF0CD\uF0CF\uF0D8\uF08C\uF0D8\uF0C4\uF0C5\uF0DF\uF08C\uF0C9\uF0C2\uF0D8\uF0DE\uF0D5", 61612));
        }
        if (flag1)
        {
          if (num1 <= (short) 63 && num1 != (short) 10 && num1 != (short) 11 && num1 != (short) 20 && num1 != (short) 21 && num1 != (short) 25 && num1 != (short) 27 && num1 != (short) 45 && num1 != (short) 46 && num1 != (short) 50 && num1 != (short) 51 && num1 != (short) 52 && num1 != (short) 61 && num1 != (short) 62 && num1 != (short) 63)
            throw new ZipException(string.Format(\uE01B.\uE000("\uF0B7\uF084\uF093\uF092\uF088\uF08E\uF08F\uF0C1\uF093\uF084\uF090\uF094\uF088\uF093\uF084\uF085\uF0C1\uF095\uF08E\uF0C1\uF084\uF099\uF095\uF093\uF080\uF082\uF095\uF0C1\uF095\uF089\uF088\uF092\uF0C1\uF084\uF08F\uF095\uF093\uF098\uF0C1\uF088\uF092\uF0C1\uF088\uF08F\uF097\uF080\uF08D\uF088\uF085\uF0C1\uF0C9\uF09A\uF0D1\uF09C\uF0C8", 61665), (object) num1));
          if (((int) flags & 49168) != 0)
            throw new ZipException(\uE01B.\uE000("\uEFB1\uEF86\uEF90\uEF86\uEF91\uEF95\uEF86\uEF87\uEFC3\uEF81\uEF8A\uEF97\uEFC3\uEF85\uEF8F\uEF82\uEF84\uEF90\uEFC3\uEF80\uEF82\uEF8D\uEF8D\uEF8C\uEF97\uEFC3\uEF81\uEF86\uEFC3\uEF90\uEF86\uEF97\uEFCD", 61411));
          if (((int) flags & 1) != 0 && num1 < (short) 20)
            throw new ZipException(string.Format(\uE01B.\uE000("\uEFA2\uEF91\uEF86\uEF87\uEF9D\uEF9B\uEF9A\uEFD4\uEF86\uEF91\uEF85\uEF81\uEF9D\uEF86\uEF91\uEF90\uEFD4\uEF80\uEF9B\uEFD4\uEF91\uEF8C\uEF80\uEF86\uEF95\uEF97\uEF80\uEFD4\uEF80\uEF9C\uEF9D\uEF87\uEFD4\uEF91\uEF9A\uEF80\uEF86\uEF8D\uEFD4\uEF9D\uEF87\uEFD4\uEF80\uEF9B\uEF9B\uEFD4\uEF98\uEF9B\uEF83\uEFD4\uEF92\uEF9B\uEF86\uEFD4\uEF91\uEF9A\uEF97\uEF86\uEF8D\uEF84\uEF80\uEF9D\uEF9B\uEF9A\uEFD4\uEFDC\uEF8F\uEFC4\uEF89\uEFDD", 61428), (object) num1));
          if (((int) flags & 64) != 0)
          {
            if (((int) flags & 1) == 0)
              throw new ZipException(\uE01B.\uE000("\uE727\uE700\uE706\uE71B\uE71A\uE713\uE754\uE711\uE71A\uE717\uE706\uE70D\uE704\uE700\uE71D\uE71B\uE71A\uE754\uE712\uE718\uE715\uE713\uE754\uE707\uE711\uE700\uE754\uE716\uE701\uE700\uE754\uE711\uE71A\uE717\uE706\uE70D\uE704\uE700\uE71D\uE71B\uE71A\uE754\uE712\uE718\uE715\uE713\uE754\uE71D\uE707\uE754\uE71A\uE71B\uE700\uE754\uE707\uE711\uE700", 59252));
            if (num1 < (short) 50)
              throw new ZipException(string.Format(\uE01B.\uE000("\uEFA2\uEF91\uEF86\uEF87\uEF9D\uEF9B\uEF9A\uEFD4\uEF86\uEF91\uEF85\uEF81\uEF9D\uEF86\uEF91\uEF90\uEFD4\uEF80\uEF9B\uEFD4\uEF91\uEF8C\uEF80\uEF86\uEF95\uEF97\uEF80\uEFD4\uEF80\uEF9C\uEF9D\uEF87\uEFD4\uEF91\uEF9A\uEF80\uEF86\uEF8D\uEFD4\uEF9D\uEF87\uEFD4\uEF80\uEF9B\uEF9B\uEFD4\uEF98\uEF9B\uEF83\uEFD4\uEF92\uEF9B\uEF86\uEFD4\uEF91\uEF9A\uEF97\uEF86\uEF8D\uEF84\uEF80\uEF9D\uEF9B\uEF9A\uEFD4\uEFDC\uEF8F\uEFC4\uEF89\uEFDD", 61428), (object) num1));
          }
          if (((int) flags & 32) != 0 && num1 < (short) 27)
            throw new ZipException(string.Format(\uE01B.\uE000("\uE2FA\uE2CB\uE2DE\uE2C9\uE2C2\uE2CF\uE2CE\uE28A\uE2CE\uE2CB\uE2DE\uE2CB\uE28A\uE2D8\uE2CF\uE2DB\uE2DF\uE2C3\uE2D8\uE2CF\uE2D9\uE28A\uE2C2\uE2C3\uE2CD\uE2C2\uE2CF\uE2D8\uE28A\uE2DC\uE2CF\uE2D8\uE2D9\uE2C3\uE2C5\uE2C4\uE28A\uE2DE\uE2C2\uE2CB\uE2C4\uE28A\uE282\uE2D1\uE29A\uE2D7\uE283", 58026), (object) num1));
          if ((int) flags != _param1.Flags)
            throw new ZipException(\uE01B.\uE000("\uF1A7\uF181\uF18A\uF190\uF196\uF185\uF188\uF1C4\uF18C\uF181\uF185\uF180\uF181\uF196\uF1CB\uF188\uF18B\uF187\uF185\uF188\uF1C4\uF18C\uF181\uF185\uF180\uF181\uF196\uF1C4\uF182\uF188\uF185\uF183\uF197\uF1C4\uF189\uF18D\uF197\uF189\uF185\uF190\uF187\uF18C", 61924));
          if (_param1.CompressionMethod != (CompressionMethod) num2)
            throw new ZipException(\uE01B.\uE000("\uE00C\uE02A\uE021\uE03B\uE03D\uE02E\uE023\uE06F\uE027\uE02A\uE02E\uE02B\uE02A\uE03D\uE060\uE023\uE020\uE02C\uE02E\uE023\uE06F\uE027\uE02A\uE02E\uE02B\uE02A\uE03D\uE06F\uE02C\uE020\uE022\uE03F\uE03D\uE02A\uE03C\uE03C\uE026\uE020\uE021\uE06F\uE022\uE02A\uE03B\uE027\uE020\uE02B\uE06F\uE022\uE026\uE03C\uE022\uE02E\uE03B\uE02C\uE027", 57423));
          if (_param1.Version != (int) num1)
            throw new ZipException(\uE01B.\uE000("\uE933\uE90E\uE902\uE904\uE917\uE915\uE902\uE956\uE900\uE913\uE904\uE905\uE91F\uE919\uE918\uE956\uE91B\uE91F\uE905\uE91B\uE917\uE902\uE915\uE91E", 59766));
          if (((int) flags & 64) != 0 && num1 < (short) 62)
            throw new ZipException(\uE01B.\uE000("\uEDFD\uEDDA\uEDDC\uEDC1\uEDC0\uEDC9\uED8E\uEDCB\uEDC0\uEDCD\uEDDC\uEDD7\uEDDE\uEDDA\uEDC7\uEDC1\uEDC0\uED8E\uEDC8\uEDC2\uEDCF\uEDC9\uED8E\uEDDD\uEDCB\uEDDA\uED8E\uEDCC\uEDDB\uEDDA\uED8E\uEDD8\uEDCB\uEDDC\uEDDD\uEDC7\uEDC1\uEDC0\uED8E\uEDC0\uEDC1\uEDDA\uED8E\uEDC6\uEDC7\uEDC9\uEDC6\uED8E\uEDCB\uEDC0\uEDC1\uEDDB\uEDC9\uEDC6", 60846));
          if (((int) flags & 8192) != 0 && (num3 != (short) 0 || num4 != (short) 0))
            throw new ZipException(\uE01B.\uE000("\uE3F4\uE3D9\uE3DD\uE3D8\uE3D9\uE3CE\uE39C\uE3D1\uE3DD\uE3CF\uE3D7\uE3D9\uE3D8\uE39C\uE3CF\uE3D9\uE3C8\uE39C\uE3DE\uE3C9\uE3C8\uE39C\uE3D8\uE3DD\uE3C8\uE3D9\uE393\uE3C8\uE3D5\uE3D1\uE3D9\uE39C\uE3CA\uE3DD\uE3D0\uE3C9\uE3D9\uE3CF\uE39C\uE3D2\uE3D3\uE3D2\uE391\uE3C6\uE3D9\uE3CE\uE3D3", 58300));
          if (((int) flags & 8) == 0 && (int) num5 != (int) (uint) _param1.Crc)
            throw new ZipException(\uE01B.\uE000("\uEB29\uEB0F\uEB04\uEB1E\uEB18\uEB0B\uEB06\uEB4A\uEB02\uEB0F\uEB0B\uEB0E\uEB0F\uEB18\uEB45\uEB06\uEB05\uEB09\uEB0B\uEB06\uEB4A\uEB02\uEB0F\uEB0B\uEB0E\uEB0F\uEB18\uEB4A\uEB09\uEB18\uEB09\uEB4A\uEB07\uEB03\uEB19\uEB07\uEB0B\uEB1E\uEB09\uEB02", 60266));
          if (num7 == 0L && num6 == 0L && num5 != 0U)
            throw new ZipException(\uE01B.\uE000("\uEE97\uEEB0\uEEA8\uEEBF\uEEB2\uEEB7\uEEBA\uEEFE\uEE9D\uEE8C\uEE9D\uEEFE\uEEB8\uEEB1\uEEAC\uEEFE\uEEBB\uEEB3\uEEAE\uEEAA\uEEA7\uEEFE\uEEBB\uEEB0\uEEAA\uEEAC\uEEA7", 61150));
          if (_param1.Name.Length > length1)
            throw new ZipException(\uE01B.\uE000("\uEA76\uEA59\uEA5C\uEA55\uEA10\uEA5E\uEA51\uEA5D\uEA55\uEA10\uEA5C\uEA55\uEA5E\uEA57\uEA44\uEA58\uEA10\uEA5D\uEA59\uEA43\uEA5D\uEA51\uEA44\uEA53\uEA58", 59952));
          string stringExt = ZipConstants.ConvertToStringExt((int) flags, numArray1);
          if (stringExt != _param1.Name)
            throw new ZipException(\uE01B.\uE000("\uE767\uE741\uE74A\uE750\uE756\uE745\uE748\uE704\uE74C\uE741\uE745\uE740\uE741\uE756\uE704\uE745\uE74A\uE740\uE704\uE748\uE74B\uE747\uE745\uE748\uE704\uE74C\uE741\uE745\uE740\uE741\uE756\uE704\uE742\uE74D\uE748\uE741\uE704\uE74A\uE745\uE749\uE741\uE704\uE749\uE74D\uE757\uE749\uE745\uE750\uE747\uE74C", 59172));
          if (_param1.IsDirectory)
          {
            if (num7 > 0L)
              throw new ZipException(\uE01B.\uE000("\uF209\uF224\uF23F\uF228\uF22E\uF239\uF222\uF23F\uF234\uF26D\uF22E\uF22C\uF223\uF223\uF222\uF239\uF26D\uF225\uF22C\uF23B\uF228\uF26D\uF23E\uF224\uF237\uF228", 62029));
            if (_param1.IsCrypted)
            {
              if (num6 > 14L)
                throw new ZipException(\uE01B.\uE000("\uF22B\uF206\uF21D\uF20A\uF20C\uF21B\uF200\uF21D\uF216\uF24F\uF20C\uF200\uF202\uF21F\uF21D\uF20A\uF21C\uF21C\uF20A\uF20B\uF24F\uF21C\uF206\uF215\uF20A\uF24F\uF206\uF201\uF219\uF20E\uF203\uF206\uF20B", 62063));
            }
            else if (num6 > 2L)
              throw new ZipException(\uE01B.\uE000("\uF22B\uF206\uF21D\uF20A\uF20C\uF21B\uF200\uF21D\uF216\uF24F\uF20C\uF200\uF202\uF21F\uF21D\uF20A\uF21C\uF21C\uF20A\uF20B\uF24F\uF21C\uF206\uF215\uF20A\uF24F\uF206\uF201\uF219\uF20E\uF203\uF206\uF20B", 62063));
          }
          if (!ZipNameTransform.IsValidName(stringExt, true))
            throw new ZipException(\uE01B.\uE000("\uE19E\uE1B1\uE1BD\uE1B5\uE1F0\uE1B9\uE1A3\uE1F0\uE1B9\uE1BE\uE1A6\uE1B1\uE1BC\uE1B9\uE1B4", 57808));
        }
        if (((int) flags & 8) == 0 || num7 > 0L || num6 > 0L)
        {
          if (num7 != _param1.Size)
            throw new ZipException(string.Format(\uE01B.\uE000("\uED0C\uED36\uED25\uED3A\uED7F\uED32\uED36\uED2C\uED32\uED3E\uED2B\uED3C\uED37\uED7F\uED3D\uED3A\uED2B\uED28\uED3A\uED3A\uED31\uED7F\uED3C\uED3A\uED31\uED2B\uED2D\uED3E\uED33\uED7F\uED37\uED3A\uED3E\uED3B\uED3A\uED2D\uED77\uED24\uED6F\uED22\uED76\uED7F\uED3E\uED31\uED3B\uED7F\uED33\uED30\uED3C\uED3E\uED33\uED7F\uED37\uED3A\uED3E\uED3B\uED3A\uED2D\uED77\uED24\uED6E\uED22\uED76", 60767), (object) _param1.Size, (object) num7));
          if (num6 != _param1.CompressedSize)
            throw new ZipException(string.Format(\uE01B.\uE000("\uE69A\uE6B6\uE6B4\uE6A9\uE6AB\uE6BC\uE6AA\uE6AA\uE6BC\uE6BD\uE6F9\uE6AA\uE6B0\uE6A3\uE6BC\uE6F9\uE6B4\uE6B0\uE6AA\uE6B4\uE6B8\uE6AD\uE6BA\uE6B1\uE6F9\uE6BB\uE6BC\uE6AD\uE6AE\uE6BC\uE6BC\uE6B7\uE6F9\uE6BA\uE6BC\uE6B7\uE6AD\uE6AB\uE6B8\uE6B5\uE6F9\uE6B1\uE6BC\uE6B8\uE6BD\uE6BC\uE6AB\uE6F1\uE6A2\uE6E9\uE6A4\uE6F0\uE6F9\uE6B8\uE6B7\uE6BD\uE6F9\uE6B5\uE6B6\uE6BA\uE6B8\uE6B5\uE6F9\uE6B1\uE6BC\uE6B8\uE6BD\uE6BC\uE6AB\uE6F1\uE6A2\uE6E8\uE6A4\uE6F0", 59097), (object) _param1.CompressedSize, (object) num6));
        }
        int num8 = length1 + length2;
        return this.\uE00F + _param1.Offset + 30L + (long) num8;
      }
    }

    public INameTransform NameTransform
    {
      get => this.\uE000.NameTransform;
      set => this.\uE000.NameTransform = value;
    }

    public IEntryFactory EntryFactory
    {
      get => this.\uE000;
      set
      {
        if (value == null)
          this.\uE000 = (IEntryFactory) new ZipEntryFactory();
        else
          this.\uE000 = value;
      }
    }

    public int BufferSize
    {
      get => this.\uE004;
      set
      {
        if (value < 1024)
          throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002), \uE01B.\uE000("\uEDBA\uEDB8\uEDB7\uEDB7\uEDB6\uEDAD\uEDF9\uEDBB\uEDBC\uEDF9\uEDBB\uEDBC\uEDB5\uEDB6\uEDAE\uEDF9\uEDE8\uEDE9\uEDEB\uEDED", 60889));
        if (this.\uE004 == value)
          return;
        this.\uE004 = value;
        this.\uE003 = (byte[]) null;
      }
    }

    public bool IsUpdating => this.\uE00A != null;

    public UseZip64 UseZip64
    {
      get => this.\uE00B;
      set => this.\uE00B = value;
    }

    public void BeginUpdate(IArchiveStorage archiveStorage, IDynamicDataSource dataSource)
    {
      if (archiveStorage == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uF5E7\uF5F4\uF5E5\uF5EE\uF5EF\uF5F0\uF5E3\uF5D5\uF5F2\uF5E9\uF5F4\uF5E7\uF5E1\uF5E3", 62854));
      if (dataSource == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uF7D0\uF7D5\uF7C0\uF7D5\uF7E7\uF7DB\uF7C1\uF7C6\uF7D7\uF7D1", 63412));
      if (this.\uE014)
        throw new ObjectDisposedException(\uE01B.\uE000("\uEB95\uEBA6\uEBBF\uEB89\uEBA6\uEBA3\uEBAA", 60367));
      if (this.IsEmbeddedArchive)
        throw new ZipException(\uE01B.\uE000("\uE01B\uE039\uE036\uE036\uE037\uE02C\uE078\uE02D\uE028\uE03C\uE039\uE02C\uE03D\uE078\uE03D\uE035\uE03A\uE03D\uE03C\uE03C\uE03D\uE03C\uE077\uE00B\uE01E\uE000\uE078\uE039\uE02A\uE03B\uE030\uE031\uE02E\uE03D\uE02B", 57432));
      this.\uE007 = archiveStorage;
      this.\uE006 = dataSource;
      this.\uE008 = new Hashtable();
      this.\uE00A = new ArrayList(this.\uE00E.Length);
      foreach (ZipEntry entry in this.\uE00E)
      {
        int num = this.\uE00A.Add((object) new ZipFile.ZipUpdate(entry));
        this.\uE008.Add((object) entry.Name, (object) num);
      }
      this.\uE009 = (long) this.\uE00A.Count;
      this.\uE005 = false;
      this.\uE001 = false;
      this.\uE002 = (ZipFile.ZipString) null;
    }

    public void BeginUpdate(IArchiveStorage archiveStorage) => this.BeginUpdate(archiveStorage, (IDynamicDataSource) new DynamicDiskDataSource());

    public void BeginUpdate()
    {
      if (this.Name == null)
        this.BeginUpdate((IArchiveStorage) new MemoryArchiveStorage(), (IDynamicDataSource) new DynamicDiskDataSource());
      else
        this.BeginUpdate((IArchiveStorage) new DiskArchiveStorage(this), (IDynamicDataSource) new DynamicDiskDataSource());
    }

    public void CommitUpdate()
    {
      if (this.\uE014)
        throw new ObjectDisposedException(\uE01B.\uE000("\uEB95\uEBA6\uEBBF\uEB89\uEBA6\uEBA3\uEBAA", 60367));
      this.\uE004();
      try
      {
        this.\uE008.Clear();
        this.\uE008 = (Hashtable) null;
        if (this.\uE005)
          this.\uE005();
        else if (this.\uE001)
        {
          this.\uE006();
        }
        else
        {
          if (this.\uE00E.Length != 0)
            return;
          byte[] numArray = this.\uE002 != null ? this.\uE002.RawComment : ZipConstants.ConvertToArray(this.\uE012);
          using (\uE00B obj = new \uE00B(this.\uE011))
            obj.\uE000(0L, 0L, 0L, numArray);
        }
      }
      finally
      {
        this.\uE00C();
      }
    }

    public void AbortUpdate() => this.\uE00C();

    public void SetComment(string comment)
    {
      if (this.\uE014)
        throw new ObjectDisposedException(\uE01B.\uE000("\uEB95\uEBA6\uEBBF\uEB89\uEBA6\uEBA3\uEBAA", 60367));
      this.\uE004();
      this.\uE002 = new ZipFile.ZipString(comment);
      if (this.\uE002.RawLength > (int) ushort.MaxValue)
      {
        this.\uE002 = (ZipFile.ZipString) null;
        throw new ZipException(\uE01B.\uE000("\uE018\uE034\uE036\uE036\uE03E\uE035\uE02F\uE07B\uE037\uE03E\uE035\uE03C\uE02F\uE033\uE07B\uE03E\uE023\uE038\uE03E\uE03E\uE03F\uE028\uE07B\uE036\uE03A\uE023\uE032\uE036\uE02E\uE036\uE07B\uE076\uE07B\uE06D\uE06E\uE06E\uE068\uE06E", 57435));
      }
      this.\uE001 = true;
    }

    private void \uE012(ZipFile.ZipUpdate _param1)
    {
      this.\uE005 = true;
      int index = this.\uE000(_param1.Entry.Name);
      if (index >= 0)
      {
        if (this.\uE00A[index] == null)
          ++this.\uE009;
        this.\uE00A[index] = (object) _param1;
      }
      else
      {
        int num = this.\uE00A.Add((object) _param1);
        ++this.\uE009;
        this.\uE008.Add((object) _param1.Entry.Name, (object) num);
      }
    }

    public void Add(string fileName, CompressionMethod compressionMethod, bool useUnicodeText)
    {
      switch (fileName)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uE010\uE01F\uE01A\uE013\uE038\uE017\uE01B\uE013", 57462));
        default:
          if (this.\uE014)
            throw new ObjectDisposedException(\uE01B.\uE000("\uEB95\uEBA6\uEBBF\uEB89\uEBA6\uEBA3\uEBAA", 60367));
          if (!ZipEntry.IsCompressionMethodSupported(compressionMethod))
            throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA52\uEA5E\uEA5C\uEA41\uEA43\uEA54\uEA42\uEA42\uEA58\uEA5E\uEA5F\uEA7C\uEA54\uEA45\uEA59\uEA5E\uEA55", 59953));
          this.\uE004();
          this.\uE005 = true;
          ZipEntry entry = this.EntryFactory.MakeFileEntry(fileName);
          entry.IsUnicodeText = useUnicodeText;
          entry.CompressionMethod = compressionMethod;
          this.\uE012(new ZipFile.ZipUpdate(fileName, entry));
          break;
      }
    }

    public void Add(string fileName, CompressionMethod compressionMethod)
    {
      switch (fileName)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uE010\uE01F\uE01A\uE013\uE038\uE017\uE01B\uE013", 57462));
        default:
          if (!ZipEntry.IsCompressionMethodSupported(compressionMethod))
            throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA52\uEA5E\uEA5C\uEA41\uEA43\uEA54\uEA42\uEA42\uEA58\uEA5E\uEA5F\uEA7C\uEA54\uEA45\uEA59\uEA5E\uEA55", 59953));
          this.\uE004();
          this.\uE005 = true;
          ZipEntry entry = this.EntryFactory.MakeFileEntry(fileName);
          entry.CompressionMethod = compressionMethod;
          this.\uE012(new ZipFile.ZipUpdate(fileName, entry));
          break;
      }
    }

    public void Add(string fileName)
    {
      switch (fileName)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uE010\uE01F\uE01A\uE013\uE038\uE017\uE01B\uE013", 57462));
        default:
          this.\uE004();
          this.\uE012(new ZipFile.ZipUpdate(fileName, this.EntryFactory.MakeFileEntry(fileName)));
          break;
      }
    }

    public void Add(string fileName, string entryName)
    {
      switch (fileName)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uE010\uE01F\uE01A\uE013\uE038\uE017\uE01B\uE013", 57462));
        default:
          switch (entryName)
          {
            case null:
              throw new ArgumentNullException(\uE01B.\uE000("\uE4B6\uE4BD\uE4A7\uE4A1\uE4AA\uE49D\uE4B2\uE4BE\uE4B6", 58579));
            default:
              this.\uE004();
              this.\uE012(new ZipFile.ZipUpdate(fileName, this.EntryFactory.MakeFileEntry(entryName)));
              return;
          }
      }
    }

    public void Add(IStaticDataSource dataSource, string entryName)
    {
      if (dataSource == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uF7D0\uF7D5\uF7C0\uF7D5\uF7E7\uF7DB\uF7C1\uF7C6\uF7D7\uF7D1", 63412));
      switch (entryName)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uE4B6\uE4BD\uE4A7\uE4A1\uE4AA\uE49D\uE4B2\uE4BE\uE4B6", 58579));
        default:
          this.\uE004();
          this.\uE012(new ZipFile.ZipUpdate(dataSource, this.EntryFactory.MakeFileEntry(entryName, false)));
          break;
      }
    }

    public void Add(
      IStaticDataSource dataSource,
      string entryName,
      CompressionMethod compressionMethod)
    {
      if (dataSource == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uF7D0\uF7D5\uF7C0\uF7D5\uF7E7\uF7DB\uF7C1\uF7C6\uF7D7\uF7D1", 63412));
      switch (entryName)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uE4B6\uE4BD\uE4A7\uE4A1\uE4AA\uE49D\uE4B2\uE4BE\uE4B6", 58579));
        default:
          this.\uE004();
          ZipEntry entry = this.EntryFactory.MakeFileEntry(entryName, false);
          entry.CompressionMethod = compressionMethod;
          this.\uE012(new ZipFile.ZipUpdate(dataSource, entry));
          break;
      }
    }

    public void Add(
      IStaticDataSource dataSource,
      string entryName,
      CompressionMethod compressionMethod,
      bool useUnicodeText)
    {
      if (dataSource == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uF7D0\uF7D5\uF7C0\uF7D5\uF7E7\uF7DB\uF7C1\uF7C6\uF7D7\uF7D1", 63412));
      switch (entryName)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uE4B6\uE4BD\uE4A7\uE4A1\uE4AA\uE49D\uE4B2\uE4BE\uE4B6", 58579));
        default:
          this.\uE004();
          ZipEntry entry = this.EntryFactory.MakeFileEntry(entryName, false);
          entry.IsUnicodeText = useUnicodeText;
          entry.CompressionMethod = compressionMethod;
          this.\uE012(new ZipFile.ZipUpdate(dataSource, entry));
          break;
      }
    }

    public void Add(ZipEntry entry)
    {
      if (entry == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uEEB7\uEEBC\uEEA6\uEEA0\uEEAB", 61138));
      this.\uE004();
      if (entry.Size != 0L || entry.CompressedSize != 0L)
        throw new ZipException(\uE01B.\uE000("\uF5A4\uF58F\uF595\uF593\uF598\uF5C1\uF582\uF580\uF58F\uF58F\uF58E\uF595\uF5C1\uF589\uF580\uF597\uF584\uF5C1\uF580\uF58F\uF598\uF5C1\uF585\uF580\uF595\uF580", 62945));
      this.\uE012(new ZipFile.ZipUpdate(ZipFile.UpdateCommand.Add, entry));
    }

    public void AddDirectory(string directoryName)
    {
      switch (directoryName)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uE400\uE40D\uE416\uE401\uE407\uE410\uE40B\uE416\uE41D\uE42A\uE405\uE409\uE401", 58468));
        default:
          this.\uE004();
          this.\uE012(new ZipFile.ZipUpdate(ZipFile.UpdateCommand.Add, this.EntryFactory.MakeDirectoryEntry(directoryName)));
          break;
      }
    }

    public bool Delete(string fileName)
    {
      switch (fileName)
      {
        case null:
          throw new ArgumentNullException(\uE01B.\uE000("\uE010\uE01F\uE01A\uE013\uE038\uE017\uE01B\uE013", 57462));
        default:
          this.\uE004();
          int index = this.\uE000(fileName);
          if (index < 0 || this.\uE00A[index] == null)
            throw new ZipException(\uE01B.\uE000("\uEBD5\uEBF7\uEBF8\uEBF8\uEBF9\uEBE2\uEBB6\uEBF0\uEBFF\uEBF8\uEBF2\uEBB6\uEBF3\uEBF8\uEBE2\uEBE4\uEBEF\uEBB6\uEBE2\uEBF9\uEBB6\uEBF2\uEBF3\uEBFA\uEBF3\uEBE2\uEBF3", 60310));
          bool flag = true;
          this.\uE005 = true;
          this.\uE00A[index] = (object) null;
          --this.\uE009;
          return flag;
      }
    }

    public void Delete(ZipEntry entry)
    {
      if (entry == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uEEB7\uEEBC\uEEA6\uEEA0\uEEAB", 61138));
      this.\uE004();
      int index = this.\uE00A(entry);
      if (index < 0)
        throw new ZipException(\uE01B.\uE000("\uEBD5\uEBF7\uEBF8\uEBF8\uEBF9\uEBE2\uEBB6\uEBF0\uEBFF\uEBF8\uEBF2\uEBB6\uEBF3\uEBF8\uEBE2\uEBE4\uEBEF\uEBB6\uEBE2\uEBF9\uEBB6\uEBF2\uEBF3\uEBFA\uEBF3\uEBE2\uEBF3", 60310));
      this.\uE005 = true;
      this.\uE00A[index] = (object) null;
      --this.\uE009;
    }

    private void \uE011(int _param1)
    {
      this.\uE011.WriteByte((byte) (_param1 & (int) byte.MaxValue));
      this.\uE011.WriteByte((byte) (_param1 >> 8 & (int) byte.MaxValue));
    }

    private void \uE010(ushort _param1)
    {
      this.\uE011.WriteByte((byte) ((int) _param1 & (int) byte.MaxValue));
      this.\uE011.WriteByte((byte) ((uint) _param1 >> 8));
    }

    private void \uE00F(int _param1)
    {
      this.\uE011(_param1 & (int) ushort.MaxValue);
      this.\uE011(_param1 >> 16);
    }

    private void \uE00E(uint _param1)
    {
      this.\uE010((ushort) (_param1 & (uint) ushort.MaxValue));
      this.\uE010((ushort) (_param1 >> 16));
    }

    private void \uE000(long _param1)
    {
      this.\uE00F((int) (_param1 & (long) uint.MaxValue));
      this.\uE00F((int) (_param1 >> 32));
    }

    private void \uE000(ulong _param1)
    {
      this.\uE00E((uint) (_param1 & (ulong) uint.MaxValue));
      this.\uE00E((uint) (_param1 >> 32));
    }

    private void \uE000(ZipFile.ZipUpdate _param1)
    {
      ZipEntry outEntry = _param1.OutEntry;
      outEntry.Offset = this.\uE011.Position;
      if (_param1.Command != ZipFile.UpdateCommand.Copy)
      {
        if (outEntry.CompressionMethod == CompressionMethod.Deflated)
        {
          if (outEntry.Size == 0L)
          {
            outEntry.CompressedSize = outEntry.Size;
            outEntry.Crc = 0L;
            outEntry.CompressionMethod = CompressionMethod.Stored;
          }
        }
        else if (outEntry.CompressionMethod == CompressionMethod.Stored)
          outEntry.Flags &= -9;
        if (this.\uE000)
        {
          outEntry.IsCrypted = true;
          if (outEntry.Crc < 0L)
            outEntry.Flags |= 8;
        }
        else
          outEntry.IsCrypted = false;
        switch (this.\uE00B)
        {
          case UseZip64.On:
            outEntry.ForceZip64();
            break;
          case UseZip64.Dynamic:
            if (outEntry.Size < 0L)
            {
              outEntry.ForceZip64();
              break;
            }
            break;
        }
      }
      this.\uE00F(67324752);
      this.\uE011(outEntry.Version);
      this.\uE011(outEntry.Flags);
      this.\uE011((int) (byte) outEntry.CompressionMethod);
      this.\uE00F((int) outEntry.DosTime);
      if (!outEntry.HasCrc)
      {
        _param1.CrcPatchOffset = this.\uE011.Position;
        this.\uE00F(0);
      }
      else
        this.\uE00F((int) outEntry.Crc);
      if (outEntry.LocalHeaderRequiresZip64)
      {
        this.\uE00F(-1);
        this.\uE00F(-1);
      }
      else
      {
        if (outEntry.CompressedSize < 0L || outEntry.Size < 0L)
          _param1.SizePatchOffset = this.\uE011.Position;
        this.\uE00F((int) outEntry.CompressedSize);
        this.\uE00F((int) outEntry.Size);
      }
      byte[] array = ZipConstants.ConvertToArray(outEntry.Flags, outEntry.Name);
      if (array.Length > (int) ushort.MaxValue)
        throw new ZipException(\uE01B.\uE000("\uF179\uF152\uF148\uF14E\uF145\uF11C\uF152\uF15D\uF151\uF159\uF11C\uF148\uF153\uF153\uF11C\uF150\uF153\uF152\uF15B\uF112", 61756));
      ZipExtraData zipExtraData = new ZipExtraData(outEntry.ExtraData);
      if (outEntry.LocalHeaderRequiresZip64)
      {
        zipExtraData.StartNewEntry();
        zipExtraData.AddLeLong(outEntry.Size);
        zipExtraData.AddLeLong(outEntry.CompressedSize);
        zipExtraData.AddNewEntry(1);
      }
      else
        zipExtraData.Delete(1);
      outEntry.ExtraData = zipExtraData.GetEntryData();
      this.\uE011(array.Length);
      this.\uE011(outEntry.ExtraData.Length);
      if (array.Length > 0)
        this.\uE011.Write(array, 0, array.Length);
      if (outEntry.LocalHeaderRequiresZip64)
      {
        if (!zipExtraData.Find(1))
          throw new ZipException(\uE01B.\uE000("\uEA39\uEA1E\uEA04\uEA15\uEA02\uEA1E\uEA11\uEA1C\uEA50\uEA15\uEA02\uEA02\uEA1F\uEA02\uEA50\uEA13\uEA11\uEA1E\uEA1E\uEA1F\uEA04\uEA50\uEA16\uEA19\uEA1E\uEA14\uEA50\uEA15\uEA08\uEA04\uEA02\uEA11\uEA50\uEA14\uEA11\uEA04\uEA11", 60016));
        _param1.SizePatchOffset = this.\uE011.Position + (long) zipExtraData.CurrentReadIndex;
      }
      if (outEntry.ExtraData.Length <= 0)
        return;
      this.\uE011.Write(outEntry.ExtraData, 0, outEntry.ExtraData.Length);
    }

    private int \uE00D(ZipEntry _param1)
    {
      if (_param1.CompressedSize < 0L)
        throw new ZipException(\uE01B.\uE000("\uF567\uF552\uF552\uF543\uF54B\uF556\uF552\uF506\uF552\uF549\uF506\uF551\uF554\uF54F\uF552\uF543\uF506\uF545\uF543\uF548\uF552\uF554\uF547\uF54A\uF506\uF542\uF54F\uF554\uF543\uF545\uF552\uF549\uF554\uF55F\uF506\uF543\uF548\uF552\uF554\uF55F\uF506\uF551\uF54F\uF552\uF54E\uF506\uF553\uF548\uF54D\uF548\uF549\uF551\uF548\uF506\uF545\uF555\uF54F\uF55C\uF543", 62758));
      if (_param1.Size < 0L)
        throw new ZipException(\uE01B.\uE000("\uE45E\uE46B\uE46B\uE47A\uE472\uE46F\uE46B\uE43F\uE46B\uE470\uE43F\uE468\uE46D\uE476\uE46B\uE47A\uE43F\uE47C\uE47A\uE471\uE46B\uE46D\uE47E\uE473\uE43F\uE47B\uE476\uE46D\uE47A\uE47C\uE46B\uE470\uE46D\uE466\uE43F\uE47A\uE471\uE46B\uE46D\uE466\uE43F\uE468\uE476\uE46B\uE477\uE43F\uE46A\uE471\uE474\uE471\uE470\uE468\uE471\uE43F\uE46C\uE476\uE465\uE47A", 58399));
      if (_param1.Crc < 0L)
        throw new ZipException(\uE01B.\uE000("\uF688\uF6BD\uF6BD\uF6AC\uF6A4\uF6B9\uF6BD\uF6E9\uF6BD\uF6A6\uF6E9\uF6BE\uF6BB\uF6A0\uF6BD\uF6AC\uF6E9\uF6AA\uF6AC\uF6A7\uF6BD\uF6BB\uF6A8\uF6A5\uF6E9\uF6AD\uF6A0\uF6BB\uF6AC\uF6AA\uF6BD\uF6A6\uF6BB\uF6B0\uF6E9\uF6AC\uF6A7\uF6BD\uF6BB\uF6B0\uF6E9\uF6BE\uF6A0\uF6BD\uF6A1\uF6E9\uF6BC\uF6A7\uF6A2\uF6A7\uF6A6\uF6BE\uF6A7\uF6E9\uF6AA\uF6BB\uF6AA", 63177));
      this.\uE00F(33639248);
      this.\uE011(45);
      this.\uE011(_param1.Version);
      this.\uE011(_param1.Flags);
      this.\uE011((int) (byte) _param1.CompressionMethod);
      this.\uE00F((int) _param1.DosTime);
      this.\uE00F((int) _param1.Crc);
      if (_param1.IsZip64Forced() || _param1.CompressedSize >= (long) uint.MaxValue)
        this.\uE00F(-1);
      else
        this.\uE00F((int) (_param1.CompressedSize & (long) uint.MaxValue));
      if (_param1.IsZip64Forced() || _param1.Size >= (long) uint.MaxValue)
        this.\uE00F(-1);
      else
        this.\uE00F((int) _param1.Size);
      byte[] array = ZipConstants.ConvertToArray(_param1.Flags, _param1.Name);
      if (array.Length > (int) ushort.MaxValue)
        throw new ZipException(\uE01B.\uE000("\uE25E\uE275\uE26F\uE269\uE262\uE23B\uE275\uE27A\uE276\uE27E\uE23B\uE272\uE268\uE23B\uE26F\uE274\uE274\uE23B\uE277\uE274\uE275\uE27C\uE235", 57883));
      this.\uE011(array.Length);
      ZipExtraData zipExtraData = new ZipExtraData(_param1.ExtraData);
      if (_param1.CentralHeaderRequiresZip64)
      {
        zipExtraData.StartNewEntry();
        if (_param1.Size >= (long) uint.MaxValue || this.\uE00B == UseZip64.On)
          zipExtraData.AddLeLong(_param1.Size);
        if (_param1.CompressedSize >= (long) uint.MaxValue || this.\uE00B == UseZip64.On)
          zipExtraData.AddLeLong(_param1.CompressedSize);
        if (_param1.Offset >= (long) uint.MaxValue)
          zipExtraData.AddLeLong(_param1.Offset);
        zipExtraData.AddNewEntry(1);
      }
      else
        zipExtraData.Delete(1);
      byte[] entryData = zipExtraData.GetEntryData();
      this.\uE011(entryData.Length);
      this.\uE011(_param1.Comment != null ? _param1.Comment.Length : 0);
      this.\uE011(0);
      this.\uE011(0);
      if (_param1.ExternalFileAttributes != -1)
        this.\uE00F(_param1.ExternalFileAttributes);
      else if (_param1.IsDirectory)
        this.\uE00E(16U);
      else
        this.\uE00E(0U);
      if (_param1.Offset >= (long) uint.MaxValue)
        this.\uE00E(uint.MaxValue);
      else
        this.\uE00E((uint) (int) _param1.Offset);
      if (array.Length > 0)
        this.\uE011.Write(array, 0, array.Length);
      if (entryData.Length > 0)
        this.\uE011.Write(entryData, 0, entryData.Length);
      byte[] buffer = _param1.Comment != null ? Encoding.ASCII.GetBytes(_param1.Comment) : new byte[0];
      if (buffer.Length > 0)
        this.\uE011.Write(buffer, 0, buffer.Length);
      return 46 + array.Length + entryData.Length + buffer.Length;
    }

    private void \uE00C()
    {
      if (this.\uE007 != null)
      {
        this.\uE007.Dispose();
        this.\uE007 = (IArchiveStorage) null;
      }
      this.\uE006 = (IDynamicDataSource) null;
      this.\uE00A = (ArrayList) null;
      this.\uE008 = (Hashtable) null;
    }

    private string \uE00B(string _param1) => this.NameTransform == null ? _param1 : this.NameTransform.TransformFile(_param1);

    private string \uE000(string _param1) => this.NameTransform == null ? _param1 : this.NameTransform.TransformDirectory(_param1);

    private byte[] \uE000()
    {
      if (this.\uE003 == null)
        this.\uE003 = new byte[this.\uE004];
      return this.\uE003;
    }

    private void \uE000(ZipFile.ZipUpdate _param1, Stream _param2, Stream _param3)
    {
      int val2 = this.\uE000(_param1);
      if (val2 <= 0)
        return;
      byte[] buffer = this.\uE000();
      int count1;
      for (; val2 > 0; val2 -= count1)
      {
        int count2 = Math.Min(buffer.Length, val2);
        count1 = _param3.Read(buffer, 0, count2);
        if (count1 <= 0)
          throw new ZipException(\uE01B.\uE000("\uF0DC\uF0E7\uF0F1\uF0F9\uF0EC\uF0EA\uF0FD\uF0EC\uF0ED\uF0A9\uF0EC\uF0E7\uF0ED\uF0A9\uF0E6\uF0EF\uF0A9\uF0FA\uF0FD\uF0FB\uF0EC\uF0E8\uF0E4", 61577));
        _param2.Write(buffer, 0, count1);
      }
    }

    private void \uE000(
      ZipFile.ZipUpdate _param1,
      Stream _param2,
      Stream _param3,
      long _param4,
      bool _param5)
    {
      if (_param2 == _param3)
        throw new InvalidOperationException(\uE01B.\uE000("\uE9C4\uE9E5\uE9F3\uE9F4\uE9E9\uE9EE\uE9E1\uE9F4\uE9E9\uE9EF\uE9EE\uE9A0\uE9E1\uE9EE\uE9E4\uE9A0\uE9F3\uE9EF\uE9F5\uE9F2\uE9E3\uE9E5\uE9A0\uE9E1\uE9F2\uE9E5\uE9A0\uE9F4\uE9E8\uE9E5\uE9A0\uE9F3\uE9E1\uE9ED\uE9E5", 59776));
      Crc32 crc32 = new Crc32();
      byte[] buffer = this.\uE000();
      long num1 = _param4;
      long num2 = 0;
      int count1;
      do
      {
        int count2 = buffer.Length;
        if (_param4 < (long) count2)
          count2 = (int) _param4;
        count1 = _param3.Read(buffer, 0, count2);
        if (count1 > 0)
        {
          if (_param5)
            crc32.Update(buffer, 0, count1);
          _param2.Write(buffer, 0, count1);
          _param4 -= (long) count1;
          num2 += (long) count1;
        }
      }
      while (count1 > 0 && _param4 > 0L);
      if (num2 != num1)
        throw new ZipException(string.Format(\uE01B.\uE000("\uED63\uED44\uED4C\uED49\uED40\uED41\uED05\uED51\uED4A\uED05\uED46\uED4A\uED55\uED5C\uED05\uED47\uED5C\uED51\uED40\uED56\uED05\uED40\uED5D\uED55\uED40\uED46\uED51\uED40\uED41\uED05\uED5E\uED15\uED58\uED05\uED57\uED40\uED44\uED41\uED05\uED5E\uED14\uED58", 60709), (object) num1, (object) num2));
      if (!_param5)
        return;
      _param1.OutEntry.Crc = crc32.Value;
    }

    private int \uE000(ZipFile.ZipUpdate _param1)
    {
      int num = 0;
      if ((_param1.Entry.Flags & 8) != 0)
      {
        num = 12;
        if (_param1.Entry.LocalHeaderRequiresZip64)
          num = 20;
      }
      return num;
    }

    private void \uE000(ZipFile.ZipUpdate _param1, Stream _param2, ref long _param3, long _param4)
    {
      int num = this.\uE000(_param1);
      while (num > 0)
      {
        int count1 = num;
        byte[] buffer = this.\uE000();
        _param2.Position = _param4;
        int count2 = _param2.Read(buffer, 0, count1);
        if (count2 <= 0)
          throw new ZipException(\uE01B.\uE000("\uF0DC\uF0E7\uF0F1\uF0F9\uF0EC\uF0EA\uF0FD\uF0EC\uF0ED\uF0A9\uF0EC\uF0E7\uF0ED\uF0A9\uF0E6\uF0EF\uF0A9\uF0FA\uF0FD\uF0FB\uF0EC\uF0E8\uF0E4", 61577));
        _param2.Position = _param3;
        _param2.Write(buffer, 0, count2);
        num -= count2;
        _param3 += (long) count2;
        _param4 += (long) count2;
      }
    }

    private void \uE000(
      ZipFile.ZipUpdate _param1,
      Stream _param2,
      bool _param3,
      ref long _param4,
      ref long _param5)
    {
      long compressedSize = _param1.Entry.CompressedSize;
      Crc32 crc32 = new Crc32();
      byte[] buffer = this.\uE000();
      long num1 = compressedSize;
      long num2 = 0;
      int count1;
      do
      {
        int count2 = buffer.Length;
        if (compressedSize < (long) count2)
          count2 = (int) compressedSize;
        _param2.Position = _param5;
        count1 = _param2.Read(buffer, 0, count2);
        if (count1 > 0)
        {
          if (_param3)
            crc32.Update(buffer, 0, count1);
          _param2.Position = _param4;
          _param2.Write(buffer, 0, count1);
          _param4 += (long) count1;
          _param5 += (long) count1;
          compressedSize -= (long) count1;
          num2 += (long) count1;
        }
      }
      while (count1 > 0 && compressedSize > 0L);
      if (num2 != num1)
        throw new ZipException(string.Format(\uE01B.\uE000("\uED63\uED44\uED4C\uED49\uED40\uED41\uED05\uED51\uED4A\uED05\uED46\uED4A\uED55\uED5C\uED05\uED47\uED5C\uED51\uED40\uED56\uED05\uED40\uED5D\uED55\uED40\uED46\uED51\uED40\uED41\uED05\uED5E\uED15\uED58\uED05\uED57\uED40\uED44\uED41\uED05\uED5E\uED14\uED58", 60709), (object) num1, (object) num2));
      if (!_param3)
        return;
      _param1.OutEntry.Crc = crc32.Value;
    }

    private int \uE00A(ZipEntry _param1)
    {
      int num = -1;
      string key = this.\uE00B(_param1.Name);
      if (this.\uE008.ContainsKey((object) key))
        num = (int) this.\uE008[(object) key];
      return num;
    }

    private int \uE000(string _param1)
    {
      int num = -1;
      string key = this.\uE00B(_param1);
      if (this.\uE008.ContainsKey((object) key))
        num = (int) this.\uE008[(object) key];
      return num;
    }

    private Stream \uE000(ZipEntry _param1)
    {
      Stream stream = this.\uE011;
      if (_param1.IsCrypted)
        stream = this.\uE000(stream, _param1);
      switch (_param1.CompressionMethod)
      {
        case CompressionMethod.Stored:
          return (Stream) new ZipFile.UncompressedStream(stream);
        case CompressionMethod.Deflated:
          return (Stream) new DeflaterOutputStream(stream, new Deflater(9, true))
          {
            IsStreamOwner = false
          };
        default:
          throw new ZipException(\uE01B.\uE000("\uF3FA\uF3C1\uF3C4\uF3C1\uF3C0\uF3D8\uF3C1\uF38F\uF3CC\uF3C0\uF3C2\uF3DF\uF3DD\uF3CA\uF3DC\uF3DC\uF3C6\uF3C0\uF3C1\uF38F\uF3C2\uF3CA\uF3DB\uF3C7\uF3C0\uF3CB\uF38F", 62383) + (object) _param1.CompressionMethod);
      }
    }

    private void \uE009(ZipFile _param1, ZipFile.ZipUpdate _param2)
    {
      Stream stream1 = (Stream) null;
      if (_param2.Entry.IsFile)
        stream1 = _param2.GetSource() ?? this.\uE006.GetSource(_param2.Entry, _param2.Filename);
      if (stream1 != null)
      {
        using (stream1)
        {
          long length = stream1.Length;
          if (_param2.OutEntry.Size < 0L)
            _param2.OutEntry.Size = length;
          else if (_param2.OutEntry.Size != length)
            throw new ZipException(\uE01B.\uE000("\uF2AC\uF287\uF29D\uF29B\uF290\uF2C9\uF29A\uF280\uF293\uF28C\uF2C6\uF29A\uF29D\uF29B\uF28C\uF288\uF284\uF2C9\uF29A\uF280\uF293\uF28C\uF2C9\uF284\uF280\uF29A\uF284\uF288\uF29D\uF28A\uF281", 62185));
          _param1.\uE000(_param2);
          long position1 = _param1.\uE011.Position;
          using (Stream stream2 = _param1.\uE000(_param2.OutEntry))
            this.\uE000(_param2, stream2, stream1, length, true);
          long position2 = _param1.\uE011.Position;
          _param2.OutEntry.CompressedSize = position2 - position1;
          if ((_param2.OutEntry.Flags & 8) != 8)
            return;
          new \uE00B(_param1.\uE011).\uE000(_param2.OutEntry);
        }
      }
      else
      {
        _param1.\uE000(_param2);
        _param2.OutEntry.CompressedSize = 0L;
      }
    }

    private void \uE008(ZipFile _param1, ZipFile.ZipUpdate _param2)
    {
      _param1.\uE000(_param2);
      long position1 = _param1.\uE011.Position;
      if (_param2.Entry.IsFile && _param2.Filename != null)
      {
        using (Stream stream = _param1.\uE000(_param2.OutEntry))
        {
          using (Stream inputStream = this.GetInputStream(_param2.Entry))
            this.\uE000(_param2, stream, inputStream, inputStream.Length, true);
        }
      }
      long position2 = _param1.\uE011.Position;
      _param2.Entry.CompressedSize = position2 - position1;
    }

    private void \uE000(ZipFile _param1, ZipFile.ZipUpdate _param2, ref long _param3)
    {
      bool flag = false;
      if (_param2.Entry.Offset == _param3)
        goto label_2;
label_1:
      if (!flag)
      {
        this.\uE011.Position = _param3;
        _param1.\uE000(_param2);
        _param3 = this.\uE011.Position;
      }
      long offset = _param2.Entry.Offset + 26L;
      this.\uE011.Seek(offset, SeekOrigin.Begin);
      long num = this.\uE011.Position + (long) this.\uE003() + (long) this.\uE003();
      if (flag)
      {
        _param3 += num - offset + 26L + _param2.Entry.CompressedSize + (long) this.\uE000(_param2);
        return;
      }
      if (_param2.Entry.CompressedSize > 0L)
        this.\uE000(_param2, this.\uE011, false, ref _param3, ref num);
      this.\uE000(_param2, this.\uE011, ref _param3, num);
      return;
label_2:
      flag = true;
      goto label_1;
    }

    private void \uE000(ZipFile _param1, ZipFile.ZipUpdate _param2)
    {
      _param1.\uE000(_param2);
      if (_param2.Entry.CompressedSize > 0L)
      {
        this.\uE011.Seek(_param2.Entry.Offset + 26L, SeekOrigin.Begin);
        this.\uE011.Seek((long) ((uint) this.\uE003() + (uint) this.\uE003()), SeekOrigin.Current);
        this.\uE000(_param2, _param1.\uE011, this.\uE011, _param2.Entry.CompressedSize, false);
      }
      this.\uE000(_param2, _param1.\uE011, this.\uE011);
    }

    private void \uE000(Stream _param1)
    {
      if (_param1 == null)
        throw new ZipException(\uE01B.\uE000("\uEEC4\uEEE3\uEEEB\uEEEE\uEEE7\uEEE6\uEEA2\uEEF6\uEEED\uEEA2\uEEF0\uEEE7\uEEED\uEEF2\uEEE7\uEEEC\uEEA2\uEEE3\uEEF0\uEEE1\uEEEA\uEEEB\uEEF4\uEEE7\uEEA2\uEEAF\uEEA2\uEEEC\uEEED\uEEA2\uEEF1\uEEED\uEEF7\uEEF0\uEEE1\uEEE7", 61058));
      this.\uE00C = false;
      this.\uE011 = _param1;
      this.\uE000();
    }

    private void \uE007()
    {
      if (this.Name == null)
        throw new InvalidOperationException(\uE01B.\uE000("\uF5F5\uF5DA\uF5D6\uF5DE\uF59B\uF5D2\uF5C8\uF59B\uF5D5\uF5D4\uF5CF\uF59B\uF5D0\uF5D5\uF5D4\uF5CC\uF5D5\uF59B\uF5D8\uF5DA\uF5D5\uF5D5\uF5D4\uF5CF\uF59B\uF5E9\uF5DE\uF5D4\uF5CB\uF5DE\uF5D5", 62907));
      this.\uE000((Stream) File.OpenRead(this.Name));
    }

    private void \uE006()
    {
      long length = this.\uE011.Length;
      \uE00B obj;
      if (this.\uE007.UpdateMode == FileUpdateMode.Safe)
      {
        obj = new \uE00B(this.\uE007.MakeTemporaryCopy(this.\uE011));
        obj.\uE000 = true;
        this.\uE011.Close();
        this.\uE011 = (Stream) null;
      }
      else if (this.\uE007.UpdateMode == FileUpdateMode.Direct)
      {
        this.\uE011 = this.\uE007.OpenForDirectUpdate(this.\uE011);
        obj = new \uE00B(this.\uE011);
      }
      else
      {
        this.\uE011.Close();
        this.\uE011 = (Stream) null;
        obj = new \uE00B(this.Name);
      }
      using (obj)
      {
        if (obj.\uE000(101010256, length, 22, (int) ushort.MaxValue) < 0L)
          throw new ZipException(\uE01B.\uE000("\uEE22\uEE00\uEE0F\uEE0F\uEE0E\uEE15\uEE41\uEE07\uEE08\uEE0F\uEE05\uEE41\uEE02\uEE04\uEE0F\uEE15\uEE13\uEE00\uEE0D\uEE41\uEE05\uEE08\uEE13\uEE04\uEE02\uEE15\uEE0E\uEE13\uEE18", 61025));
        obj.Position += 16L;
        byte[] rawComment = this.\uE002.RawComment;
        obj.\uE004(rawComment.Length);
        obj.Write(rawComment, 0, rawComment.Length);
        obj.SetLength(obj.Position);
      }
      if (this.\uE007.UpdateMode == FileUpdateMode.Safe)
        this.\uE000(this.\uE007.ConvertTemporaryToFinal());
      else
        this.\uE000();
    }

    private void \uE005()
    {
      long num1 = 0;
      long num2 = 0;
      bool flag1 = true;
      bool flag2 = false;
      long num3 = 0;
      ZipFile zipFile;
      if (this.IsNewArchive)
      {
        zipFile = this;
        zipFile.\uE011.Position = 0L;
        flag2 = true;
      }
      else
        goto label_52;
label_2:
      try
      {
        foreach (ZipFile.ZipUpdate zipUpdate in this.\uE00A)
        {
          if (zipUpdate != null)
          {
            switch (zipUpdate.Command)
            {
              case ZipFile.UpdateCommand.Copy:
                if (flag2)
                {
                  this.\uE000(zipFile, zipUpdate, ref num3);
                  continue;
                }
                this.\uE000(zipFile, zipUpdate);
                continue;
              case ZipFile.UpdateCommand.Modify:
                this.\uE008(zipFile, zipUpdate);
                continue;
              case ZipFile.UpdateCommand.Add:
                if (!this.IsNewArchive && flag2)
                  zipFile.\uE011.Position = num3;
                this.\uE009(zipFile, zipUpdate);
                if (flag2)
                {
                  num3 = zipFile.\uE011.Position;
                  continue;
                }
                continue;
              default:
                continue;
            }
          }
        }
        if (!this.IsNewArchive && flag2)
          zipFile.\uE011.Position = num3;
        long position = zipFile.\uE011.Position;
        foreach (ZipFile.ZipUpdate zipUpdate in this.\uE00A)
        {
          if (zipUpdate != null)
            num1 += (long) zipFile.\uE00D(zipUpdate.OutEntry);
        }
        byte[] numArray = this.\uE002 != null ? this.\uE002.RawComment : ZipConstants.ConvertToArray(this.\uE012);
        using (\uE00B obj = new \uE00B(zipFile.\uE011))
          obj.\uE000(this.\uE009, num1, position, numArray);
        num2 = zipFile.\uE011.Position;
        foreach (ZipFile.ZipUpdate zipUpdate in this.\uE00A)
        {
          if (zipUpdate != null)
          {
            if (zipUpdate.CrcPatchOffset > 0L && zipUpdate.OutEntry.CompressedSize > 0L)
            {
              zipFile.\uE011.Position = zipUpdate.CrcPatchOffset;
              zipFile.\uE00F((int) zipUpdate.OutEntry.Crc);
            }
            if (zipUpdate.SizePatchOffset > 0L)
            {
              zipFile.\uE011.Position = zipUpdate.SizePatchOffset;
              if (zipUpdate.OutEntry.LocalHeaderRequiresZip64)
              {
                zipFile.\uE000(zipUpdate.OutEntry.Size);
                zipFile.\uE000(zipUpdate.OutEntry.CompressedSize);
              }
              else
              {
                zipFile.\uE00F((int) zipUpdate.OutEntry.CompressedSize);
                zipFile.\uE00F((int) zipUpdate.OutEntry.Size);
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
        flag1 = false;
      }
      finally
      {
        if (flag2)
        {
          if (flag1)
          {
            zipFile.\uE011.Flush();
            zipFile.\uE011.SetLength(num2);
          }
        }
        else
          zipFile.Close();
      }
      if (flag1)
      {
        if (flag2)
        {
          this.\uE00C = false;
          zipFile.\uE011.Flush();
          this.\uE000();
          return;
        }
        this.\uE011.Close();
        this.\uE000(this.\uE007.ConvertTemporaryToFinal());
        return;
      }
      zipFile.Close();
      if (flag2 || zipFile.Name == null)
        return;
      File.Delete(zipFile.Name);
      return;
label_52:
      if (this.\uE007.UpdateMode == FileUpdateMode.Direct)
      {
        zipFile = this;
        zipFile.\uE011.Position = 0L;
        flag2 = true;
        this.\uE00A.Sort((IComparer) new ZipFile.UpdateComparer());
        goto label_2;
      }
      else
      {
        zipFile = ZipFile.Create(this.\uE007.GetTemporaryOutput());
        zipFile.UseZip64 = this.UseZip64;
        if (this.\uE00D != null)
        {
          zipFile.\uE00D = (byte[]) this.\uE00D.Clone();
          goto label_2;
        }
        else
          goto label_2;
      }
    }

    private void \uE004()
    {
      if (this.\uE00A == null)
        throw new InvalidOperationException(\uE01B.\uE000("\uF5AE\uF589\uF58B\uF585\uF582\uF5B9\uF59C\uF588\uF58D\uF598\uF589\uF5CC\uF584\uF58D\uF59F\uF5CC\uF582\uF583\uF598\uF5CC\uF58E\uF589\uF589\uF582\uF5CC\uF58F\uF58D\uF580\uF580\uF589\uF588", 62956));
    }

    void IDisposable.Dispose() => this.Close();

    private void \uE000(bool _param1)
    {
      if (this.\uE014)
        return;
      this.\uE014 = true;
      this.\uE00E = new ZipEntry[0];
      if (this.IsStreamOwner && this.\uE011 != null)
      {
        lock (this.\uE011)
          this.\uE011.Close();
      }
      this.\uE00C();
    }

    protected virtual void Dispose(bool disposing) => this.\uE000(disposing);

    private ushort \uE003()
    {
      int num1 = this.\uE011.ReadByte();
      if (num1 < 0)
        throw new EndOfStreamException(\uE01B.\uE000("\uF4A7\uF48C\uF486\uF4C2\uF48D\uF484\uF4C2\uF491\uF496\uF490\uF487\uF483\uF48F", 62690));
      int num2 = this.\uE011.ReadByte();
      if (num2 < 0)
        throw new EndOfStreamException(\uE01B.\uE000("\uF4A7\uF48C\uF486\uF4C2\uF48D\uF484\uF4C2\uF491\uF496\uF490\uF487\uF483\uF48F", 62690));
      return (ushort) ((uint) (ushort) num1 | (uint) (ushort) (num2 << 8));
    }

    private uint \uE002() => (uint) this.\uE003() | (uint) this.\uE003() << 16;

    private ulong \uE000() => (ulong) this.\uE002() | (ulong) this.\uE002() << 32;

    private long \uE000(int _param1, long _param2, int _param3, int _param4)
    {
      using (\uE00B obj = new \uE00B(this.\uE011))
        return obj.\uE000(_param1, _param2, _param3, _param4);
    }

    private void \uE000()
    {
      long num1 = this.\uE011.CanSeek ? this.\uE000(101010256, this.\uE011.Length, 22, (int) ushort.MaxValue) : throw new ZipException(\uE01B.\uE000("\uF491\uF4A2\uF4BB\uF48D\uF4A2\uF4A7\uF4AE\uF4EB\uF4B8\uF4BF\uF4B9\uF4AE\uF4AA\uF4A6\uF4EB\uF4A6\uF4BE\uF4B8\uF4BF\uF4EB\uF4A9\uF4AE\uF4EB\uF4B8\uF4AE\uF4AE\uF4A0\uF4AA\uF4A9\uF4A7\uF4AE", 62667));
      if (num1 < 0L)
        throw new ZipException(\uE01B.\uE000("\uEE22\uEE00\uEE0F\uEE0F\uEE0E\uEE15\uEE41\uEE07\uEE08\uEE0F\uEE05\uEE41\uEE02\uEE04\uEE0F\uEE15\uEE13\uEE00\uEE0D\uEE41\uEE05\uEE08\uEE13\uEE04\uEE02\uEE15\uEE0E\uEE13\uEE18", 61025));
      ushort num2 = this.\uE003();
      ushort num3 = this.\uE003();
      ulong length1 = (ulong) this.\uE003();
      ulong num4 = (ulong) this.\uE003();
      ulong num5 = (ulong) this.\uE002();
      long num6 = (long) this.\uE002();
      uint length2 = (uint) this.\uE003();
      if (length2 > 0U)
      {
        byte[] numArray = new byte[(IntPtr) length2];
        StreamUtils.ReadFully(this.\uE011, numArray);
        this.\uE012 = ZipConstants.ConvertToString(numArray);
      }
      else
        this.\uE012 = string.Empty;
      bool flag = false;
      if (num2 == ushort.MaxValue || num3 == ushort.MaxValue || length1 == (ulong) ushort.MaxValue || num4 == (ulong) ushort.MaxValue || num5 == (ulong) uint.MaxValue || num6 == (long) uint.MaxValue)
      {
        flag = true;
        if (this.\uE000(117853008, num1, 0, 4096) < 0L)
          throw new ZipException(\uE01B.\uE000("\uE64D\uE66F\uE660\uE660\uE661\uE67A\uE62E\uE668\uE667\uE660\uE66A\uE62E\uE654\uE667\uE67E\uE638\uE63A\uE62E\uE662\uE661\uE66D\uE66F\uE67A\uE661\uE67C", 58894));
        int num7 = (int) this.\uE002();
        ulong num8 = this.\uE000();
        int num9 = (int) this.\uE002();
        this.\uE011.Position = (long) num8;
        if (this.\uE002() != 101075792U)
          throw new ZipException(string.Format(\uE01B.\uE000("\uF3D2\uF3F5\uF3ED\uF3FA\uF3F7\uF3F2\uF3FF\uF3BB\uF3C1\uF3F2\uF3EB\uF3AD\uF3AF\uF3BB\uF3D8\uF3FE\uF3F5\uF3EF\uF3E9\uF3FA\uF3F7\uF3BB\uF3FF\uF3F2\uF3E9\uF3FE\uF3F8\uF3EF\uF3F4\uF3E9\uF3E2\uF3BB\uF3E8\uF3F2\uF3FC\uF3F5\uF3FA\uF3EF\uF3EE\uF3E9\uF3FE\uF3BB\uF3FA\uF3EF\uF3BB\uF3E0\uF3AB\uF3A1\uF3C3\uF3E6", 62363), (object) num8));
        long num10 = (long) this.\uE000();
        int num11 = (int) this.\uE003();
        int num12 = (int) this.\uE003();
        int num13 = (int) this.\uE002();
        int num14 = (int) this.\uE002();
        length1 = this.\uE000();
        this.\uE000();
        num5 = this.\uE000();
        num6 = (long) this.\uE000();
      }
      this.\uE00E = new ZipEntry[length1];
      if (!flag && num6 < num1 - (4L + (long) num5))
      {
        this.\uE00F = num1 - (4L + (long) num5 + num6);
        if (this.\uE00F <= 0L)
          throw new ZipException(\uE01B.\uE000("\uF05D\uF07A\uF062\uF075\uF078\uF07D\uF070\uF034\uF071\uF079\uF076\uF071\uF070\uF070\uF071\uF070\uF034\uF06E\uF07D\uF064\uF034\uF075\uF066\uF077\uF07C\uF07D\uF062\uF071", 61460));
      }
      this.\uE011.Seek(this.\uE00F + num6, SeekOrigin.Begin);
      for (ulong index = 0; index < length1; ++index)
      {
        if (this.\uE002() != 33639248U)
          throw new ZipException(\uE01B.\uE000("\uE724\uE701\uE71C\uE71D\uE714\uE753\uE730\uE716\uE71D\uE707\uE701\uE712\uE71F\uE753\uE737\uE71A\uE701\uE716\uE710\uE707\uE71C\uE701\uE70A\uE753\uE700\uE71A\uE714\uE71D\uE712\uE707\uE706\uE701\uE716", 59251));
        int num15 = (int) this.\uE003();
        int num16 = (int) this.\uE003();
        int flags = (int) this.\uE003();
        int num17 = (int) this.\uE003();
        uint num18 = this.\uE002();
        uint num19 = this.\uE002();
        long num20 = (long) this.\uE002();
        long num21 = (long) this.\uE002();
        int num22 = (int) this.\uE003();
        int length3 = (int) this.\uE003();
        int num23 = (int) this.\uE003();
        int num24 = (int) this.\uE003();
        int num25 = (int) this.\uE003();
        uint num26 = this.\uE002();
        long num27 = (long) this.\uE002();
        byte[] numArray = new byte[Math.Max(num22, num23)];
        StreamUtils.ReadFully(this.\uE011, numArray, 0, num22);
        ZipEntry zipEntry = new ZipEntry(ZipConstants.ConvertToStringExt(flags, numArray, num22), num16, num15, (CompressionMethod) num17);
        zipEntry.Crc = (long) num19 & (long) uint.MaxValue;
        zipEntry.Size = num21 & (long) uint.MaxValue;
        zipEntry.CompressedSize = num20 & (long) uint.MaxValue;
        zipEntry.Flags = flags;
        zipEntry.DosTime = (long) num18;
        zipEntry.ZipFileIndex = (long) index;
        zipEntry.Offset = num27;
        zipEntry.ExternalFileAttributes = (int) num26;
        zipEntry.\uE000 = (flags & 8) != 0 ? (byte) (num18 >> 8 & (uint) byte.MaxValue) : (byte) (num19 >> 24);
        if (length3 > 0)
        {
          byte[] buffer = new byte[length3];
          StreamUtils.ReadFully(this.\uE011, buffer);
          zipEntry.ExtraData = buffer;
        }
        zipEntry.\uE000(false);
        if (num23 > 0)
        {
          StreamUtils.ReadFully(this.\uE011, numArray, 0, num23);
          zipEntry.Comment = ZipConstants.ConvertToStringExt(flags, numArray, num23);
        }
        this.\uE00E[index] = zipEntry;
      }
    }

    private long \uE000(ZipEntry _param1) => this.\uE000(_param1, ZipFile.HeaderTest.Extract);

    private Stream \uE001(Stream _param1, ZipEntry _param2)
    {
      if (_param2.Version >= 50 && (_param2.Flags & 64) != 0)
        throw new ZipException(\uE01B.\uE000("\uEDC5\uEDE4\uEDE2\uEDF3\uEDF8\uEDF1\uEDF5\uEDE8\uEDEE\uEDEF\uEDA1\uEDEC\uEDE4\uEDF5\uEDE9\uEDEE\uEDE5\uEDA1\uEDEF\uEDEE\uEDF5\uEDA1\uEDF2\uEDF4\uEDF1\uEDF1\uEDEE\uEDF3\uEDF5\uEDE4\uEDE5", 60801));
      PkzipClassicManaged pkzipClassicManaged = new PkzipClassicManaged();
      this.\uE000(_param2.Name);
      if (!this.\uE000)
        throw new ZipException(\uE01B.\uE000("\uE5BA\uE59B\uE5D4\uE584\uE595\uE587\uE587\uE583\uE59B\uE586\uE590\uE5D4\uE595\uE582\uE595\uE59D\uE598\uE595\uE596\uE598\uE591\uE5D4\uE592\uE59B\uE586\uE5D4\uE591\uE59A\uE597\uE586\uE58D\uE584\uE580\uE591\uE590\uE5D4\uE587\uE580\uE586\uE591\uE595\uE599", 58868));
      CryptoStream cryptoStream = new CryptoStream(_param1, pkzipClassicManaged.CreateDecryptor(this.\uE00D, (byte[]) null), CryptoStreamMode.Read);
      ZipFile.\uE000(cryptoStream, _param2);
      return (Stream) cryptoStream;
    }

    private Stream \uE000(Stream _param1, ZipEntry _param2)
    {
      CryptoStream cryptoStream = (CryptoStream) null;
      if (_param2.Version < 50 || (_param2.Flags & 64) == 0)
      {
        PkzipClassicManaged pkzipClassicManaged = new PkzipClassicManaged();
        this.\uE000(_param2.Name);
        if (!this.\uE000)
          throw new ZipException(\uE01B.\uE000("\uE5BA\uE59B\uE5D4\uE584\uE595\uE587\uE587\uE583\uE59B\uE586\uE590\uE5D4\uE595\uE582\uE595\uE59D\uE598\uE595\uE596\uE598\uE591\uE5D4\uE592\uE59B\uE586\uE5D4\uE591\uE59A\uE597\uE586\uE58D\uE584\uE580\uE591\uE590\uE5D4\uE587\uE580\uE586\uE591\uE595\uE599", 58868));
        cryptoStream = new CryptoStream((Stream) new ZipFile.UncompressedStream(_param1), pkzipClassicManaged.CreateEncryptor(this.\uE00D, (byte[]) null), CryptoStreamMode.Write);
        if (_param2.Crc < 0L || (_param2.Flags & 8) != 0)
          ZipFile.\uE000((Stream) cryptoStream, _param2.DosTime << 16);
        else
          ZipFile.\uE000((Stream) cryptoStream, _param2.Crc);
      }
      return (Stream) cryptoStream;
    }

    private static void \uE000(CryptoStream _param0, ZipEntry _param1)
    {
      byte[] buffer = new byte[12];
      StreamUtils.ReadFully((Stream) _param0, buffer);
      if ((int) buffer[11] != (int) _param1.\uE000)
        throw new ZipException(\uE01B.\uE000("\uF25B\uF27C\uF264\uF273\uF27E\uF27B\uF276\uF232\uF262\uF273\uF261\uF261\uF265\uF27D\uF260\uF276", 61970));
    }

    private static void \uE000(Stream _param0, long _param1)
    {
      byte[] buffer = new byte[12];
      new Random().NextBytes(buffer);
      buffer[11] = (byte) (_param1 >> 24);
      _param0.Write(buffer, 0, buffer.Length);
    }

    public delegate void KeysRequiredEventHandler(object sender, KeysRequiredEventArgs e);

    [System.Flags]
    private enum HeaderTest
    {
      Extract = 1,
      Header = 2,
    }

    private enum UpdateCommand
    {
      Copy,
      Modify,
      Add,
    }

    private class UpdateComparer : IComparer
    {
      public int Compare(object x, object y)
      {
        ZipFile.ZipUpdate zipUpdate1 = x as ZipFile.ZipUpdate;
        ZipFile.ZipUpdate zipUpdate2 = y as ZipFile.ZipUpdate;
        int num1;
        if (zipUpdate1 == null)
          num1 = zipUpdate2 != null ? -1 : 0;
        else if (zipUpdate2 == null)
        {
          num1 = 1;
        }
        else
        {
          num1 = (zipUpdate1.Command == ZipFile.UpdateCommand.Copy || zipUpdate1.Command == ZipFile.UpdateCommand.Modify ? 0 : 1) - (zipUpdate2.Command == ZipFile.UpdateCommand.Copy || zipUpdate2.Command == ZipFile.UpdateCommand.Modify ? 0 : 1);
          if (num1 == 0)
          {
            long num2 = zipUpdate1.Entry.Offset - zipUpdate2.Entry.Offset;
            num1 = num2 >= 0L ? (num2 != 0L ? 1 : 0) : -1;
          }
        }
        return num1;
      }
    }

    private class ZipUpdate
    {
      private ZipEntry \uE006;
      private ZipEntry \uE005;
      private ZipFile.UpdateCommand \uE004;
      private IStaticDataSource \uE003;
      private string \uE002;
      private long \uE001 = -1;
      private long \uE000 = -1;

      public ZipUpdate(string fileName, ZipEntry entry)
      {
        this.\uE004 = ZipFile.UpdateCommand.Add;
        this.\uE006 = entry;
        this.\uE002 = fileName;
      }

      [Obsolete]
      public ZipUpdate(string fileName, string entryName, CompressionMethod compressionMethod)
      {
        this.\uE004 = ZipFile.UpdateCommand.Add;
        this.\uE006 = new ZipEntry(entryName);
        this.\uE006.CompressionMethod = compressionMethod;
        this.\uE002 = fileName;
      }

      [Obsolete]
      public ZipUpdate(string fileName, string entryName)
        : this(fileName, entryName, CompressionMethod.Deflated)
      {
      }

      [Obsolete]
      public ZipUpdate(
        IStaticDataSource dataSource,
        string entryName,
        CompressionMethod compressionMethod)
      {
        this.\uE004 = ZipFile.UpdateCommand.Add;
        this.\uE006 = new ZipEntry(entryName);
        this.\uE006.CompressionMethod = compressionMethod;
        this.\uE003 = dataSource;
      }

      public ZipUpdate(IStaticDataSource dataSource, ZipEntry entry)
      {
        this.\uE004 = ZipFile.UpdateCommand.Add;
        this.\uE006 = entry;
        this.\uE003 = dataSource;
      }

      public ZipUpdate(ZipEntry original, ZipEntry updated) => throw new ZipException(\uE01B.\uE000("\uE21E\uE23C\uE237\uE23A\uE235\uE22A\uE273\uE23D\uE23C\uE227\uE273\uE230\uE226\uE221\uE221\uE236\uE23D\uE227\uE23F\uE22A\uE273\uE220\uE226\uE223\uE223\uE23C\uE221\uE227\uE236\uE237", 57939));

      public ZipUpdate(ZipFile.UpdateCommand command, ZipEntry entry)
      {
        this.\uE004 = command;
        this.\uE006 = (ZipEntry) entry.Clone();
      }

      public ZipUpdate(ZipEntry entry)
        : this(ZipFile.UpdateCommand.Copy, entry)
      {
      }

      public ZipEntry Entry => this.\uE006;

      public ZipEntry OutEntry
      {
        get
        {
          if (this.\uE005 == null)
            this.\uE005 = (ZipEntry) this.\uE006.Clone();
          return this.\uE005;
        }
      }

      public ZipFile.UpdateCommand Command => this.\uE004;

      public string Filename => this.\uE002;

      public long SizePatchOffset
      {
        get => this.\uE001;
        set => this.\uE001 = value;
      }

      public long CrcPatchOffset
      {
        get => this.\uE000;
        set => this.\uE000 = value;
      }

      public Stream GetSource()
      {
        Stream source = (Stream) null;
        if (this.\uE003 != null)
          source = this.\uE003.GetSource();
        return source;
      }
    }

    private class ZipString
    {
      private string \uE002;
      private byte[] \uE001;
      private bool \uE000;

      public ZipString(string comment)
      {
        this.\uE002 = comment;
        this.\uE000 = true;
      }

      public ZipString(byte[] rawString) => this.\uE001 = rawString;

      public bool IsSourceString => this.\uE000;

      public int RawLength
      {
        get
        {
          this.\uE000();
          return this.\uE001.Length;
        }
      }

      public byte[] RawComment
      {
        get
        {
          this.\uE000();
          return (byte[]) this.\uE001.Clone();
        }
      }

      public void Reset()
      {
        if (this.\uE000)
          this.\uE001 = (byte[]) null;
        else
          this.\uE002 = (string) null;
      }

      private void \uE001()
      {
        if (this.\uE002 != null)
          return;
        this.\uE002 = ZipConstants.ConvertToString(this.\uE001);
      }

      private void \uE000()
      {
        if (this.\uE001 != null)
          return;
        this.\uE001 = ZipConstants.ConvertToArray(this.\uE002);
      }

      public static implicit operator string(ZipFile.ZipString zipString)
      {
        zipString.\uE001();
        return zipString.\uE002;
      }
    }

    private class ZipEntryEnumerator : IEnumerator
    {
      private ZipEntry[] \uE001;
      private int \uE000 = -1;

      public ZipEntryEnumerator(ZipEntry[] entries) => this.\uE001 = entries;

      public object Current => (object) this.\uE001[this.\uE000];

      public void Reset() => this.\uE000 = -1;

      public bool MoveNext()
      {
        ZipFile.ZipEntryEnumerator zipEntryEnumerator = this;
        int num1 = zipEntryEnumerator.\uE000;
        int num2;
        int num3 = num2 = num1 + 1;
        zipEntryEnumerator.\uE000 = num2;
        return num3 < this.\uE001.Length;
      }
    }

    private class UncompressedStream : Stream
    {
      private Stream \uE000;

      public UncompressedStream(Stream baseStream) => this.\uE000 = baseStream;

      public override void Close()
      {
      }

      public override bool CanRead => false;

      public override void Flush() => this.\uE000.Flush();

      public override bool CanWrite => this.\uE000.CanWrite;

      public override bool CanSeek => false;

      public override long Length => 0;

      public override long Position
      {
        get => this.\uE000.Position;
        set
        {
        }
      }

      public override int Read(byte[] buffer, int offset, int count) => 0;

      public override long Seek(long offset, SeekOrigin origin) => 0;

      public override void SetLength(long value)
      {
      }

      public override void Write(byte[] buffer, int offset, int count) => this.\uE000.Write(buffer, offset, count);
    }

    private class PartialInputStream : Stream
    {
      private ZipFile \uE005;
      private Stream \uE004;
      private long \uE003;
      private long \uE002;
      private long \uE001;
      private long \uE000;

      public PartialInputStream(ZipFile zipFile, long start, long length)
      {
        this.\uE003 = start;
        this.\uE002 = length;
        this.\uE005 = zipFile;
        this.\uE004 = this.\uE005.\uE011;
        this.\uE001 = start;
        this.\uE000 = start + length;
      }

      public override int ReadByte()
      {
        if (this.\uE001 >= this.\uE000)
          return -1;
        lock (this.\uE004)
        {
          Stream stream = this.\uE004;
          ZipFile.PartialInputStream partialInputStream = this;
          long num1;
          long num2 = num1 = partialInputStream.\uE001;
          partialInputStream.\uE001 = num1 + 1L;
          long offset = num2;
          stream.Seek(offset, SeekOrigin.Begin);
          return this.\uE004.ReadByte();
        }
      }

      public override void Close()
      {
      }

      public override int Read(byte[] buffer, int offset, int count)
      {
        lock (this.\uE004)
        {
          if ((long) count > this.\uE000 - this.\uE001)
          {
            count = (int) (this.\uE000 - this.\uE001);
            if (count == 0)
              return 0;
          }
          this.\uE004.Seek(this.\uE001, SeekOrigin.Begin);
          int num = this.\uE004.Read(buffer, offset, count);
          if (num > 0)
            this.\uE001 += (long) num;
          return num;
        }
      }

      public override void Write(byte[] buffer, int offset, int count) => throw new NotSupportedException();

      public override void SetLength(long value) => throw new NotSupportedException();

      public override long Seek(long offset, SeekOrigin origin)
      {
        long num = this.\uE001;
        switch (origin)
        {
          case SeekOrigin.Begin:
            num = this.\uE003 + offset;
            break;
          case SeekOrigin.Current:
            num = this.\uE001 + offset;
            break;
          case SeekOrigin.End:
            num = this.\uE000 + offset;
            break;
        }
        if (num < this.\uE003)
          throw new ArgumentException(\uE01B.\uE000("\uF46B\uF440\uF442\uF444\uF451\uF44C\uF453\uF440\uF405\uF455\uF44A\uF456\uF44C\uF451\uF44C\uF44A\uF44B\uF405\uF44C\uF456\uF405\uF44C\uF44B\uF453\uF444\uF449\uF44C\uF441", 62501));
        this.\uE001 = num < this.\uE000 ? num : throw new IOException(\uE01B.\uE000("\uF268\uF24A\uF245\uF245\uF244\uF25F\uF20B\uF258\uF24E\uF24E\uF240\uF20B\uF25B\uF24A\uF258\uF25F\uF20B\uF24E\uF245\uF24F", 61995));
        return this.\uE001;
      }

      public override void Flush()
      {
      }

      public override long Position
      {
        get => this.\uE001 - this.\uE003;
        set
        {
          long num = this.\uE003 + value;
          if (num < this.\uE003)
            throw new ArgumentException(\uE01B.\uE000("\uF46B\uF440\uF442\uF444\uF451\uF44C\uF453\uF440\uF405\uF455\uF44A\uF456\uF44C\uF451\uF44C\uF44A\uF44B\uF405\uF44C\uF456\uF405\uF44C\uF44B\uF453\uF444\uF449\uF44C\uF441", 62501));
          this.\uE001 = num < this.\uE000 ? num : throw new InvalidOperationException(\uE01B.\uE000("\uF268\uF24A\uF245\uF245\uF244\uF25F\uF20B\uF258\uF24E\uF24E\uF240\uF20B\uF25B\uF24A\uF258\uF25F\uF20B\uF24E\uF245\uF24F", 61995));
        }
      }

      public override long Length => this.\uE002;

      public override bool CanWrite => false;

      public override bool CanSeek => true;

      public override bool CanRead => true;

      public override bool CanTimeout => this.\uE004.CanTimeout;
    }
  }
}
