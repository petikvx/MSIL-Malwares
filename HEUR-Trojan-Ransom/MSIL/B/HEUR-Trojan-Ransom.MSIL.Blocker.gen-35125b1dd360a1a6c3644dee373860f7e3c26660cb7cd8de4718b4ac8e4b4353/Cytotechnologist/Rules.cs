// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: DataCollect, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 42D7E59F-0880-4460-A28E-6C718E130DF7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-35125b1dd360a1a6c3644dee373860f7e3c26660cb7cd8de4718b4ac8e4b4353.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 861651007;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1367452574)) % 5U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 743180194 ^ 466639452;
            continue;
          case 3:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -795636477 ^ 803044946;
            continue;
          case 4:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * -629298474 ^ 373389434;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -688207979;
      int aIndex;
      float[] numArray;
      bool flag;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -477005454)) % 10U)
        {
          case 0:
            aIndex = 0;
            num1 = (int) num2 * 299148460 ^ -1230309662;
            continue;
          case 1:
            numArray = new float[json.Count];
            num1 = (int) num2 * -1410466840 ^ -2142203724;
            continue;
          case 2:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -407607126;
            continue;
          case 4:
            ++aIndex;
            num1 = (int) num2 * -1627434540 ^ -1478195030;
            continue;
          case 5:
            riskChances = numArray;
            num1 = (int) num2 * 643764807 ^ 993464492;
            continue;
          case 6:
            num1 = (int) num2 * -996322163 ^ 1658428434;
            continue;
          case 7:
            goto label_1;
          case 8:
            flag = aIndex < numArray.Length;
            num1 = -1482394219;
            continue;
          case 9:
            int num3 = !flag ? 992090719 : (num3 = 560254600);
            num1 = num3 ^ (int) num2 * -1017325780;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
      List<Card> cardList = new List<Card>();
label_1:
      int num1 = -417881573;
      int num2;
      bool flag1;
      int aIndex1;
      int aIndex2;
      JSONNode jsonNode;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -182922497)) % 20U)
        {
          case 0:
            aIndex1 = 0;
            num1 = (int) num3 * -1223962170 ^ -1107124444;
            continue;
          case 1:
            ++aIndex1;
            num1 = (int) num3 * 1511678914 ^ 207637791;
            continue;
          case 2:
            flag1 = aIndex1 < maxImpact * 2;
            num1 = -1980161492;
            continue;
          case 3:
            ++aIndex2;
            num1 = (int) num3 * 1919633586 ^ -2044660784;
            continue;
          case 4:
            goto label_1;
          case 5:
            int num4;
            num1 = num4 = aIndex2 >= count ? -1992223908 : (num4 = -1670299668);
            continue;
          case 6:
            num2 = 0;
            num1 = -2119974694;
            continue;
          case 7:
            num1 = (int) num3 * -501436060 ^ 1005585233;
            continue;
          case 8:
            aIndex2 = 0;
            num1 = (int) num3 * -1787801244 ^ -2065599182;
            continue;
          case 10:
            num1 = (int) num3 * 30861090 ^ -776175928;
            continue;
          case 11:
            jsonNode = json[aIndex2];
            num1 = -297538953;
            continue;
          case 12:
            num1 = (int) num3 * 1103928228 ^ -1605564495;
            continue;
          case 13:
            num1 = (int) num3 * -545721598 ^ -1213762499;
            continue;
          case 14:
            ++num2;
            num1 = (int) num3 * 1374560842 ^ 1842148187;
            continue;
          case 15:
            int num5 = flag1 ? 1539706793 : (num5 = 1631446809);
            num1 = num5 ^ (int) num3 * -455795592;
            continue;
          case 16:
            int num6;
            num1 = num6 = num2 >= jsonNode[aIndex1].AsInt ? -1632342882 : (num6 = -1321156727);
            continue;
          case 17:
            num1 = (int) num3 * 502890878 ^ 957813616;
            continue;
          case 18:
            bool flag2 = aIndex1 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -756732869;
            continue;
          case 19:
            array = cardList.ToArray();
            num1 = (int) num3 * -1760249039 ^ 884875677;
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 645379832;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1578569665)) % 4U)
        {
          case 1:
            str = Rules.\u202D‏‭‭‪‭‍⁯‮​‎‮⁫⁮⁬‍⁪‭‬⁪⁯‬⁯⁫‌‍‫‏⁫⁫‮⁮‪‬‫‬‪‍‌⁬‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 804100038 ^ 452104077;
            continue;
          case 2:
            num1 = (int) num2 * -1942741486 ^ 1435209805;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
      int num1 = 0;
label_1:
      int num2 = 561820675;
      int index;
      Card[] cards;
      bool flag;
      Card card1;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ 172146141)) % 17U)
        {
          case 0:
            num2 = (int) num3 * 636931639 ^ 1046013869;
            continue;
          case 2:
            int num4 = flag ? 1775362656 : (num4 = 415477679);
            num2 = num4 ^ (int) num3 * 987146898;
            continue;
          case 3:
            card1 = cards[index];
            num2 = 395843917;
            continue;
          case 4:
            str2 = Rules.\u200B⁯‫‮‎‏⁪⁭‫‌‎‌‍‪⁭‭‫‬⁪​‫‌⁯⁯⁭‫‏⁬‬⁮‮⁭‍‍​‬‪‬⁮⁮‮(str1, "\n]");
            num2 = (int) num3 * 234807180 ^ 2044994686;
            continue;
          case 5:
            num2 = (int) num3 * 863743446 ^ -325797242;
            continue;
          case 6:
            num1 = card1.Type;
            num2 = (int) num3 * -428945718 ^ 868474157;
            continue;
          case 7:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206F⁫‪⁯‮‬‪‬⁭⁫⁯⁬⁫⁬​⁮‏⁮⁫‬‎⁪⁫‏‭⁫⁯‮‏‭⁯‬⁭⁬⁬‪‫‫​‬‮((object) card2) : (string) null;
            str1 = Rules.\u202B⁮⁬⁮‍‪⁪‭‬‫‭‪⁬⁮‭⁬​‏⁪‭‌‎‎⁭⁮‫​‎⁬‌‪⁪‎⁫‌‏‬‪‬⁫‮(str3, str4, " ");
            num2 = 732924626;
            continue;
          case 8:
            num2 = (int) num3 * -378888858 ^ 1563235655;
            continue;
          case 9:
            str1 = Rules.\u200B⁯‫‮‎‏⁪⁭‫‌‎‌‍‪⁭‭‫‬⁪​‫‌⁯⁯⁭‫‏⁬‬⁮‮⁭‍‍​‬‪‬⁮⁮‮(str1, "\n\t");
            num2 = (int) num3 * 2128391634 ^ 271145022;
            continue;
          case 10:
            ++index;
            num2 = (int) num3 * -1675026719 ^ 882452393;
            continue;
          case 11:
            num2 = (int) num3 * 1032607369 ^ -830698715;
            continue;
          case 12:
            num2 = (int) num3 * 1969960129 ^ 95933529;
            continue;
          case 13:
            cards = this.Cards;
            index = 0;
            num2 = (int) num3 * 7898363 ^ 2134376126;
            continue;
          case 14:
            goto label_1;
          case 15:
            int num5;
            num2 = num5 = index >= cards.Length ? 249150956 : (num5 = 2096864113);
            continue;
          case 16:
            flag = num1 != card1.Type;
            num2 = (int) num3 * 599476116 ^ 129453015;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -1656078352;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1825154966)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1299623240 ^ -989321148;
            continue;
          case 2:
            num1 = (int) num2 * -1642378634 ^ -1667087560;
            continue;
          case 3:
            str1 = Rules.\u202B⁮⁬⁮‍‪⁪‭‬‫‭‪⁬⁮‭⁬​‏⁪‭‌‎‎⁭⁮‫​‎⁬‌‪⁪‎⁫‌‏‬‪‬⁫‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206A⁪⁫‎⁮‭⁭‪⁮⁪​‮⁭‮⁯​‪⁬‌‍‫‎‭‭‫‭⁮⁫​⁪⁪‫‎‬‪⁬‬‎‬‭‮()));
            num1 = -2058115158;
            continue;
          case 4:
            int num3;
            num1 = num3 = index < this.RiskChances.Length ? -1914381516 : (num3 = -655311475);
            continue;
          case 6:
            ++index;
            num1 = (int) num2 * 570087594 ^ -2117641644;
            continue;
          case 7:
            str2 = Rules.\u200B⁯‫‮‎‏⁪⁭‫‌‎‌‍‪⁭‭‫‬⁪​‫‌⁯⁯⁭‫‏⁬‬⁮‮⁭‍‍​‬‪‬⁮⁮‮(str1, " ]");
            num1 = (int) num2 * -603911941 ^ 109465564;
            continue;
          case 8:
            str1 = Rules.\u200B⁯‫‮‎‏⁪⁭‫‌‎‌‍‪⁭‭‫‬⁪​‫‌⁯⁯⁭‫‏⁬‬⁮‮⁭‍‍​‬‪‬⁮⁮‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206A⁪⁫‎⁮‭⁭‪⁮⁪​‮⁭‮⁯​‪⁬‌‍‫‎‭‭‫‭⁮⁫​⁪⁪‫‎‬‪⁬‬‎‬‭‮()));
            index = 1;
            num1 = (int) num2 * 128102320 ^ 469894952;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u202D‏‭‭‪‭‍⁯‮​‎‮⁫⁮⁬‍⁪‭‬⁪⁯‬⁯⁫‌‍‫‏⁫⁫‮⁮‪‬‫‬‪‍‌⁬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200B⁯‫‮‎‏⁪⁭‫‌‎‌‍‪⁭‭‫‬⁪​‫‌⁯⁯⁭‫‏⁬‬⁮‮⁭‍‍​‬‪‬⁮⁮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206F⁫‪⁯‮‬‪‬⁭⁫⁯⁬⁫⁬​⁮‏⁮⁫‬‎⁪⁫‏‭⁫⁯‮‏‭⁯‬⁭⁬⁬‪‫‫​‬‮([In] object obj0) => obj0.ToString();

    static string \u202B⁮⁬⁮‍‪⁪‭‬‫‭‪⁬⁮‭⁬​‏⁪‭‌‎‎⁭⁮‫​‎⁬‌‪⁪‎⁫‌‏‬‪‬⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206A⁪⁫‎⁮‭⁭‪⁮⁪​‮⁭‮⁯​‪⁬‌‍‫‎‭‭‫‭⁮⁫​⁪⁪‫‎‬‪⁬‬‎‬‭‮() => CultureInfo.InvariantCulture;
  }
}
