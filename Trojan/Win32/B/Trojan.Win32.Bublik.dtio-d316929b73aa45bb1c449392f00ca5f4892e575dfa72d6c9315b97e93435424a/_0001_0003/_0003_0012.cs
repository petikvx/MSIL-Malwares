// Decompiled with JetBrains decompiler
// Type: .
// Assembly: !, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5C00FD14-0593-45B6-9F03-9C994C33EAA2
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Bublik.dtio-d316929b73aa45bb1c449392f00ca5f4892e575dfa72d6c9315b97e93435424a.exe

using System;
using System.IO;

namespace \u0001\u0003
{
  public class \u0003\u0012
  {
    public byte[] \u0003\u0018;
    private Stream \u0004\u0001;
    private uint \u0003\u001D;
    private bool \u0003\u001F;
    private uint \u0003\u001C;
    public uint \u0003\u0019;
    public uint \u0003\u0017;
    public uint \u0003\u001E;
    private uint \u0003\u001B;
    private uint \u0003\u001A;
    public uint \u0004;

    public void \u0003\u0014()
    {
      // ISSUE: unable to decompile the method.
    }

    public virtual void \u0003\u0015()
    {
      if (this.\u0003\u001F)
        return;
      while (true)
      {
        do
        {
          int count = -(int) this.\u0003\u0019 + (int) this.\u0003\u0017 - (int) this.\u0004;
          if (count == 0)
            return;
          int num = this.\u0004\u0001.Read(this.\u0003\u0018, (int) this.\u0003\u0019 + (int) this.\u0004, count);
          if (num == 0)
          {
            this.\u0003\u001D = this.\u0004;
            if (this.\u0003\u0019 + this.\u0003\u001D > this.\u0003\u001C)
              this.\u0003\u001D = this.\u0003\u001C - this.\u0003\u0019;
            this.\u0003\u001F = true;
            return;
          }
          this.\u0004 += (uint) num;
        }
        while (this.\u0004 < this.\u0003\u001E + this.\u0003\u001A);
        this.\u0003\u001D = this.\u0004 - this.\u0003\u001A;
      }
    }

    private void \u0003\u0013() => this.\u0003\u0018 = (byte[]) null;

    public void \u0002\u0010(uint keepSizeBefore, uint keepSizeAfter, uint keepSizeReserv)
    {
      this.\u0003\u001B = keepSizeBefore;
      this.\u0003\u001A = keepSizeAfter;
      uint num = keepSizeBefore + keepSizeAfter + keepSizeReserv;
      if (this.\u0003\u0018 == null || (int) this.\u0003\u0017 != (int) num)
      {
        this.\u0003\u0013();
        this.\u0003\u0017 = num;
        this.\u0003\u0018 = new byte[(IntPtr) this.\u0003\u0017];
      }
      this.\u0003\u001C = this.\u0003\u0017 - keepSizeAfter;
    }

    public void \u0002\u0019(Stream stream) => this.\u0004\u0001 = stream;

    public void \u0002\u0017() => this.\u0004\u0001 = (Stream) null;

    public void \u0001\u001B()
    {
      this.\u0003\u0019 = 0U;
      this.\u0003\u001E = 0U;
      this.\u0004 = 0U;
      this.\u0003\u001F = false;
      this.\u0003\u0015();
    }

    public void \u0002\u0015()
    {
      ++this.\u0003\u001E;
      if (this.\u0003\u001E <= this.\u0003\u001D)
        return;
      if (this.\u0003\u0019 + this.\u0003\u001E > this.\u0003\u001C)
        this.\u0003\u0014();
      this.\u0003\u0015();
    }

    public byte \u0002\u0011(int index) => this.\u0003\u0018[(long) (this.\u0003\u0019 + this.\u0003\u001E) + (long) index];

    public uint \u0002\u0013(int index, uint distance, uint limit)
    {
      if (this.\u0003\u001F && (long) this.\u0003\u001E + (long) index + (long) limit > (long) this.\u0004)
        limit = this.\u0004 - (uint) ((ulong) this.\u0003\u001E + (ulong) index);
      ++distance;
      uint num1 = (uint) ((int) this.\u0003\u0019 + (int) this.\u0003\u001E + index);
      uint num2 = 0;
      while (num2 < limit && (int) this.\u0003\u0018[(IntPtr) (num1 + num2)] == (int) this.\u0003\u0018[(IntPtr) (num1 + num2 - distance)])
        ++num2;
      return num2;
    }

    public uint \u0002\u0014() => this.\u0004 - this.\u0003\u001E;

    public void \u0003\u0016(int subValue)
    {
      this.\u0003\u0019 += (uint) subValue;
      this.\u0003\u001D -= (uint) subValue;
      this.\u0003\u001E -= (uint) subValue;
      this.\u0004 -= (uint) subValue;
    }
  }
}
