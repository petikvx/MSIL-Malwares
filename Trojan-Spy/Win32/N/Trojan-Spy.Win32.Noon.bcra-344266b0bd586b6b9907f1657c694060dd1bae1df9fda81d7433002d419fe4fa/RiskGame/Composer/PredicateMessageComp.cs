// Decompiled with JetBrains decompiler
// Type: RiskGame.Composer.PredicateMessageComp
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Database;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Imaging;

namespace RiskGame.Composer
{
  public abstract class PredicateMessageComp
  {
    public BackgroundWorker m_Thread;
    private static readonly Uri[] tests;
    public int m_Collection;
    private Image m_Context;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PredicateMessageComp(Image instance)
    {
      int num1 = 0;
      if (true)
        goto label_5;
label_1:
      this.m_Thread = new BackgroundWorker()
      {
        WorkerReportsProgress = true,
        WorkerSupportsCancellation = true
      };
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int num2 = 4;
label_4:
      num1 = num2;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
            ProxyParser.NewPool();
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto label_8;
          case 1:
            goto label_1;
          case 2:
          case 4:
            goto label_3;
          case 3:
          case 5:
            goto label_2;
          case 6:
            goto label_10;
          default:
            goto label_6;
        }
      }
label_2:
      this.m_Thread.ProgressChanged += new ProgressChangedEventHandler(this.ConcatModel);
      this.m_Collection = -1;
      num2 = 6;
      goto label_4;
label_3:
      this.m_Context = instance;
      this.m_Thread.DoWork += new DoWorkEventHandler(this.PopModel);
      goto label_2;
label_10:
      return;
label_6:
      num2 = 5;
      goto label_4;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PrepareModel() => this.m_Thread.RunWorkerAsync();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PopModel(object setup, DoWorkEventArgs connection)
    {
      int num1 = 0;
      while (true)
      {
        int num2;
        int int32;
        int num3;
        bool flag;
        switch (num1)
        {
          case 0:
            num2 = 0;
            num1 = 6;
            continue;
          case 1:
          case 3:
            ++num2;
            goto case 6;
          case 2:
            (setup as BackgroundWorker).ReportProgress(int32);
            Thread.Sleep(250);
            goto case 1;
          case 4:
          case 5:
            if (!flag)
            {
              num3 = 7;
              break;
            }
            if (!this.m_Thread.CancellationPending)
            {
              int32 = Convert.ToInt32((double) num2 / 6.0 * 100.0);
              this.m_Collection = RiskGame.Shared.Object.TestSerializer().Next(0, 5);
              num3 = 2;
              break;
            }
            goto label_12;
          case 6:
            flag = num2 < 6;
            num3 = 5;
            break;
          case 7:
            goto label_10;
          default:
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto case 4;
        }
        num1 = num3;
      }
label_10:
      return;
label_12:
      connection.Cancel = true;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConcatModel(object asset, ProgressChangedEventArgs cfg) => this.m_Context.Source = (ImageSource) new BitmapImage(PredicateMessageComp.tests[this.m_Collection]);

    [MethodImpl(MethodImplOptions.NoInlining)]
    static PredicateMessageComp()
    {
      ProxyParser.NewPool();
      PredicateMessageComp.tests = new Uri[6]
      {
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice1.png"),
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice2.png"),
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice3.png"),
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice4.png"),
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice5.png"),
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice6.png")
      };
    }

    internal static bool RegisterContainer() => true;

    internal static bool InvokeContainer() => false;
  }
}
