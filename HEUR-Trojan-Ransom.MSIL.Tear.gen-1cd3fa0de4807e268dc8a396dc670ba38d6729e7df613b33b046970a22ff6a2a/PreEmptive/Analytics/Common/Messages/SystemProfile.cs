// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Messages.SystemProfile
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.SystemProfileInfo;
using PreEmptive.Analytics.Common.Tags;
using PreEmptive.Analytics.Common.Tags.SystemProfileTags;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace PreEmptive.Analytics.Common.Messages
{
  public class SystemProfile : Message
  {
    public override string TagName
    {
      get
      {
        int A_1 = 18;
        int num1 = 3225;
        int num2 = num1;
        num1 = 3225;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (true)
              ;
            if (false)
              ;
            return Utils.a("뗅뇇막룋ꯍ뷏\uFFD1ꓓꓕ럗볙뗛닝藟", A_1);
          default:
            goto case 1;
        }
      }
    }

    public override string TagDescription
    {
      get
      {
        int A_1 = 2;
        int num1 = -23641;
        int num2 = num1;
        num1 = -23641;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (true)
              ;
            if (false)
              ;
            return Utils.a("억솷즹좻\uDBBD궿\uE2C1듃듅\uA7C7곉ꗋꋍ뗏", A_1);
          default:
            goto case 1;
        }
      }
    }

    public SystemProfile(
      SystemInfo info,
      bool omitpii,
      Guid session,
      [Optional] ExtendedKeys keys,
      [Optional] BinaryInfoTag binary)
    {
      int A_1 = 0;
      // ISSUE: explicit constructor call
      base.\u002Ector(session, keys, binary);
      List<Tag> source = new List<Tag>();
      foreach (CpuInfo cpu in (IEnumerable<CpuInfo>) info.Cpus)
        source.Add((Tag) new CpuInfoTag(cpu));
      foreach (DiskInfo disk in (IEnumerable<DiskInfo>) info.Disks)
        source.Add((Tag) new DiskInfoTag(disk));
      foreach (NetworkInfo network in (IEnumerable<NetworkInfo>) info.Networks)
        source.Add((Tag) new NetworkInfoTag(network, omitpii));
      foreach (PageFileInfo pageFile in (IEnumerable<PageFileInfo>) info.PageFiles)
        source.Add((Tag) new PageFileInfoTag(pageFile));
      source.Add((Tag) new MemoryInfoTag(info.Memory));
      if (info.Domain.HasValue)
        goto label_17;
label_8:
      source.Add((Tag) new TimeInfoTag(info.TimeZone));
      source.Add((Tag) new ScreenInfoTag(info.Screen));
      source.Add((Tag) new VideoInfoTag(info.Video));
      source.Add((Tag) new SoundInfoTag(info.Sound));
      source.Add((Tag) new ModemInfoTag(info.Modem));
      source.Add((Tag) new TerminalServicesInfoTag(info.TerminalServices));
      foreach (Tag tag in source.Where<Tag>((Func<Tag, bool>) (A_0 =>
      {
        int num1 = -21529;
        int num2 = num1;
        num1 = -21529;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return A_0.Attributes.Count > 0;
          default:
            goto case 1;
        }
      })))
        this.InnerTags.Add(tag);
      this.AddOptionalAttribute(Utils.a("쒳\uD9B5쾷\uDFB9캻鎽뎿뛁ꗃ닅귇", A_1), info.PowerState);
      this.AddOptionalAttribute(Utils.a("\uD9B3\uD9B5\uDCB7\uDFB9킻", A_1), info.Model);
      this.AddOptionalAttribute(Utils.a("\uD9B3ힵ횷쾹\uDABB\uDFBDꎿ뛁뇃듅귇룉", A_1), info.Manufacturer);
      return;
label_17:
      source.Add((Tag) new DomainInfoTag(info.Domain.Value, omitpii));
      goto label_8;
    }
  }
}
