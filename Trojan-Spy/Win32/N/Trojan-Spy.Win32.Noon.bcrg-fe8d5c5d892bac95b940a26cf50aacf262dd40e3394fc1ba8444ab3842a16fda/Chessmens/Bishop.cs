// Decompiled with JetBrains decompiler
// Type: ChessBoard.Chessmens.Bishop
// Assembly: IArraySortHel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B08900B5-C53F-4995-B311-D7E8DC4113C6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcrg-fe8d5c5d892bac95b940a26cf50aacf262dd40e3394fc1ba8444ab3842a16fda.exe

using System.Collections.Generic;

namespace ChessBoard.Chessmens
{
  public class Bishop : BaseChessman
  {
    public override ChessmenType Type => ChessmenType.Bishop;

    public Bishop()
    {
label_1:
      int num1 = 662700974;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 289269060)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -2095269984 ^ -720219087;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public Bishop(Colorz color)
      : base(color)
    {
    }

    public override bool Equals(object obj)
    {
      if (obj is Bishop)
        goto label_5;
label_1:
      int num1 = -1273237394;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -690763951)) % 6U)
        {
          case 0:
            goto label_5;
          case 1:
            num1 = (int) num2 * 179319788 ^ 592924923;
            continue;
          case 2:
            num1 = (int) num2 * 1022692434 ^ 305432843;
            continue;
          case 3:
            goto label_1;
          case 5:
            flag = false;
            num1 = (int) num2 * -1066334714 ^ 32731237;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return flag;
label_5:
      flag = base.Equals(obj);
      num1 = -593024248;
      goto label_2;
    }

    public override int GetHashCode()
    {
label_1:
      int num1 = -2023703800;
      int hashCode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1606366381)) % 3U)
        {
          case 1:
            hashCode = base.GetHashCode();
            num1 = (int) num2 * 834167341 ^ -1388187075;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return hashCode;
    }

    public override List<Cell> GetAcceptableCells(
      BoardCell[,] boardCells,
      Cell currentCell,
      bool needToCheckShah = true)
    {
      Direction[] directionArray = new Direction[4];
      Direction direction1 = new Direction();
      direction1.Row = -1;
      direction1.Column = -1;
      directionArray[0] = direction1;
      Direction direction2 = new Direction();
      direction2.Row = -1;
      direction2.Column = 1;
      directionArray[1] = direction2;
      Direction direction3 = new Direction();
      direction3.Row = 1;
      direction3.Column = -1;
      directionArray[2] = direction3;
      Direction direction4 = new Direction();
      direction4.Row = 1;
      direction4.Column = 1;
      directionArray[3] = direction4;
      Direction[] possibleDirections = directionArray;
      List<Cell> cellsForDirections = this.GetAcceptableCellsForDirections(boardCells, possibleDirections, currentCell);
label_1:
      int num1 = -1603040095;
      bool flag;
      List<Cell> acceptableCells;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1298726464)) % 8U)
        {
          case 0:
            acceptableCells = cellsForDirections;
            num1 = -1482234491;
            continue;
          case 1:
            flag = needToCheckShah;
            num1 = (int) num2 * 1139324132 ^ -1102158517;
            continue;
          case 2:
            num1 = (int) num2 * 1381648404 ^ 1750255232;
            continue;
          case 3:
            this.AdjustAcceptableCellsInCaseShah(boardCells, cellsForDirections, currentCell);
            num1 = (int) num2 * -10005121 ^ 662695679;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * 1943022773 ^ -2027684177;
            continue;
          case 7:
            int num3 = flag ? -673075078 : (num3 = -1900340047);
            num1 = num3 ^ (int) num2 * -528911369;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return acceptableCells;
    }
  }
}
