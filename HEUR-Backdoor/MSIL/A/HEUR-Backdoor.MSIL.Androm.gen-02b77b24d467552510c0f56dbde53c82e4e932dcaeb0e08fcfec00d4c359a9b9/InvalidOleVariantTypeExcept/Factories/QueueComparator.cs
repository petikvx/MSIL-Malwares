// Decompiled with JetBrains decompiler
// Type: InvalidOleVariantTypeExcept.Factories.QueueComparator
// Assembly: InvalidOleVariantTypeExcept, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9E82E8E9-C8CD-41F7-BA61-2A9379AE4148
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-02b77b24d467552510c0f56dbde53c82e4e932dcaeb0e08fcfec00d4c359a9b9.exe

using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using TGL.Licensing;

namespace InvalidOleVariantTypeExcept.Factories
{
  internal class QueueComparator
  {
    internal static Module _ContainerComparator;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static void DisableWorker(int typemdt)
    {
      int num1 = 7;
      while (true)
      {
        FieldInfo fieldInfo;
        Type type;
        MethodInfo method;
        int num2;
        FieldInfo[] fields;
        int index;
        switch (num1)
        {
          case 0:
            fieldInfo.SetValue((object) null, (object) (MulticastDelegate) Delegate.CreateDelegate(type, method));
            num2 = 4;
            break;
          case 1:
          case 3:
          case 5:
            if (index >= fields.Length)
            {
              if (true)
              {
                num1 = 10;
                continue;
              }
              goto case 4;
            }
            else
            {
              fieldInfo = fields[index];
              num2 = 6;
              break;
            }
          case 2:
          case 9:
            index = 0;
            num2 = 1;
            break;
          case 4:
            ++index;
            num1 = 5;
            continue;
          case 6:
            method = (MethodInfo) QueueComparator._ContainerComparator.ResolveMethod(fieldInfo.MetadataToken + 100663296);
            goto case 0;
          case 7:
            type = QueueComparator._ContainerComparator.ResolveType(33554432 + typemdt);
            num2 = 8;
            break;
          case 8:
            fields = type.GetFields();
            if (true)
            {
              num1 = 9;
              continue;
            }
            goto case 6;
          case 10:
            goto label_12;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
      }
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public QueueComparator()
    {
      UtilsContextLicense.ListWorker();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static QueueComparator()
    {
      UtilsContextLicense.ListWorker();
      QueueComparator._ContainerComparator = typeof (QueueComparator).Assembly.ManifestModule;
    }

    internal static bool RestartWorker() => true;

    internal static bool CloneWorker() => false;

    internal delegate void RefContextLicense(object o);
  }
}
