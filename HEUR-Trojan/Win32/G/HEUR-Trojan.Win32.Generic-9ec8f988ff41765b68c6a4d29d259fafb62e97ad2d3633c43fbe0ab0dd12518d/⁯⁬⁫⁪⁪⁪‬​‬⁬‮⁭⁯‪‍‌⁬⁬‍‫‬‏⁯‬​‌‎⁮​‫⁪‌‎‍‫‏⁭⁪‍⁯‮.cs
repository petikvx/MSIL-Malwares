// Decompiled with JetBrains decompiler
// Type: ⁯⁬⁫⁪⁪⁪‬​‬⁬‮⁭⁯‪‍‌⁬⁬‍‫‬‏⁯‬​‌‎⁮​‫⁪‌‎‍‫‏⁭⁪‍⁯‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using Org.BouncyCastle.Asn1;
using System;
using System.Collections;
using System.IO;

public class \u206F⁬⁫⁪⁪⁪‬​‬⁬‮⁭⁯‪‍‌⁬⁬‍‫‬‏⁯‬​‌‎⁮​‫⁪‌‎‍‫‏⁭⁪‍⁯‮
{
  internal static readonly IList \u200C‌‍‎⁪⁯‮‌⁭‮‏⁮⁮‌‭‌‬⁬‪⁪⁫‪⁫⁫⁯‫⁮‏‬​‏‪⁬⁮‏⁬⁮⁫‬‍‮;
  private readonly IList \u200B⁫‏⁬⁯⁫‌‫⁪‬‍‍⁮‭‬‏⁪⁫‍⁫‌⁫‫​‍⁪‌⁬‍⁫⁪⁪⁯⁪‫‏‍‎‫‮;

  static \u206F⁬⁫⁪⁪⁪‬​‬⁬‮⁭⁯‪‍‌⁬⁬‍‫‬‏⁯‬​‌‎⁮​‫⁪‌‎‍‫‏⁭⁪‍⁯‮()
  {
    IList list = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮();
    list.Add((object) "PkiPath");
    list.Add((object) "PEM");
    list.Add((object) "PKCS7");
    \u206F⁬⁫⁪⁪⁪‬​‬⁬‮⁭⁯‪‍‌⁬⁬‍‫‬‏⁯‬​‌‎⁮​‫⁪‌‎‍‫‏⁭⁪‍⁯‮.\u200C‌‍‎⁪⁯‮‌⁭‮‏⁮⁮‌‭‌‬⁬‪⁪⁫‪⁫⁫⁯‫⁮‏‬​‏‪⁬⁮‏⁬⁮⁫‬‍‮ = \u206F‌​‬⁬‫‮‬‎‬⁪⁬‍⁫‫‏‪‬‭‮‬‭‎⁬‪⁪‭‭‭⁭​‮‮‌‬⁮‮‎⁭‭‮.\u202A​‍⁭‫‮‭⁬⁪​‭‭⁯⁯​‭⁫‬‏‍⁯‎‎‌‍‏‫⁫⁮⁫‎‍⁪‮⁯‭⁪⁫‏‍‮(list);
  }

  private static IList \u200F​⁭‫‏⁭⁮‏‌⁪‌‭⁬‫⁯‌‬⁪‎⁪‮⁪‎‍‫⁬‫‭‭‌‫‍⁮⁭‏⁫‎‬‌⁮‮(IList _param0)
  {
    if (_param0.Count < 2)
      return _param0;
    \u202C​‭‬‌‏‎‬‎⁭‬⁯‪‮​​‏‎‍‌⁬⁭‎‍⁬⁫‎⁮⁮‮⁫⁬‭‍⁫⁭⁮‬⁮⁭‮ obj1 = ((\u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮) _param0[0]).\u200B‌‭⁮‭⁮‮⁬‭‏⁮⁯​⁪‍⁮​⁭‏‮‎‭⁭⁭⁭⁭⁮‍‍‍⁭⁪​‌​⁮⁪⁭⁫‏‮;
    bool flag1 = true;
    for (int index = 1; index != _param0.Count; ++index)
    {
      \u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮ obj2 = (\u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮) _param0[index];
      if (obj1.\u202C⁮⁪⁫‪‫‮⁬⁮‏⁫‎‭‌⁬⁬​‏⁬‮‍‮‪⁬‪‌‫‌⁭‪⁪‪‫‫⁫‬‏⁯‭‮(obj2.\u200E‌‪⁫‎⁮‭⁯⁬⁭‪⁬‎‪⁯⁪⁭‫‪‎‍⁯‏‏⁭‍‌​‬⁯‏‌⁯​​‌‎⁯⁮⁫‮, true))
      {
        obj1 = ((\u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮) _param0[index]).\u200B‌‭⁮‭⁮‮⁬‭‏⁮⁯​⁪‍⁮​⁭‏‮‎‭⁭⁭⁭⁭⁮‍‍‍⁭⁪​‌​⁮⁪⁭⁫‏‮;
      }
      else
      {
        flag1 = false;
        break;
      }
    }
    if (flag1)
      return _param0;
    IList list1 = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮(_param0.Count);
    IList list2 = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮((ICollection) _param0);
    for (int index = 0; index < _param0.Count; ++index)
    {
      \u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮ obj3 = (\u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮) _param0[index];
      bool flag2 = false;
      \u202C​‭‬‌‏‎‬‎⁭‬⁯‪‮​​‏‎‍‌⁬⁭‎‍⁬⁫‎⁮⁮‮⁫⁬‭‍⁫⁭⁮‬⁮⁭‮ obj4 = obj3.\u200E‌‪⁫‎⁮‭⁯⁬⁭‪⁬‎‪⁯⁪⁭‫‪‎‍⁯‏‏⁭‍‌​‬⁯‏‌⁯​​‌‎⁯⁮⁫‮;
      foreach (\u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮ obj5 in (IEnumerable) _param0)
      {
        if (obj5.\u200B‌‭⁮‭⁮‮⁬‭‏⁮⁯​⁪‍⁮​⁭‏‮‎‭⁭⁭⁭⁭⁮‍‍‍⁭⁪​‌​⁮⁪⁭⁫‏‮.\u202C⁮⁪⁫‪‫‮⁬⁮‏⁫‎‭‌⁬⁬​‏⁬‮‍‮‪⁬‪‌‫‌⁭‪⁪‪‫‫⁫‬‏⁯‭‮(obj4, true))
        {
          flag2 = true;
          break;
        }
      }
      if (!flag2)
      {
        list1.Add((object) obj3);
        _param0.RemoveAt(index);
      }
    }
    if (list1.Count > 1)
      return list2;
    for (int index1 = 0; index1 != list1.Count; ++index1)
    {
      \u202C​‭‬‌‏‎‬‎⁭‬⁯‪‮​​‏‎‍‌⁬⁭‎‍⁬⁫‎⁮⁮‮⁫⁬‭‍⁫⁭⁮‬⁮⁭‮ obj6 = ((\u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮) list1[index1]).\u200B‌‭⁮‭⁮‮⁬‭‏⁮⁯​⁪‍⁮​⁭‏‮‎‭⁭⁭⁭⁭⁮‍‍‍⁭⁪​‌​⁮⁪⁭⁫‏‮;
      for (int index2 = 0; index2 < _param0.Count; ++index2)
      {
        \u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮ obj7 = (\u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮) _param0[index2];
        if (obj6.\u202C⁮⁪⁫‪‫‮⁬⁮‏⁫‎‭‌⁬⁬​‏⁬‮‍‮‪⁬‪‌‫‌⁭‪⁪‪‫‫⁫‬‏⁯‭‮(obj7.\u200E‌‪⁫‎⁮‭⁯⁬⁭‪⁬‎‪⁯⁪⁭‫‪‎‍⁯‏‏⁭‍‌​‬⁯‏‌⁯​​‌‎⁯⁮⁫‮, true))
        {
          list1.Add((object) obj7);
          _param0.RemoveAt(index2);
          break;
        }
      }
    }
    return _param0.Count > 0 ? list2 : list1;
  }

  public \u206F⁬⁫⁪⁪⁪‬​‬⁬‮⁭⁯‪‍‌⁬⁬‍‫‬‏⁯‬​‌‎⁮​‫⁪‌‎‍‫‏⁭⁪‍⁯‮(ICollection _param1) => this.\u200B⁫‏⁬⁯⁫‌‫⁪‬‍‍⁮‭‬‏⁪⁫‍⁫‌⁫‫​‍⁪‌⁬‍⁫⁪⁪⁯⁪‫‏‍‎‫‮ = \u206F⁬⁫⁪⁪⁪‬​‬⁬‮⁭⁯‪‍‌⁬⁬‍‫‬‏⁯‬​‌‎⁮​‫⁪‌‎‍‫‏⁭⁪‍⁯‮.\u200F​⁭‫‏⁭⁮‏‌⁪‌‭⁬‫⁯‌‬⁪‎⁪‮⁪‎‍‫⁬‫‭‭‌‫‍⁮⁭‏⁫‎‬‌⁮‮(\u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮(_param1));

  public \u206F⁬⁫⁪⁪⁪‬​‬⁬‮⁭⁯‪‍‌⁬⁬‍‫‬‏⁯‬​‌‎⁮​‫⁪‌‎‍‫‏⁭⁪‍⁯‮(Stream _param1)
    : this(_param1, "PkiPath")
  {
  }

  public \u206F⁬⁫⁪⁪⁪‬​‬⁬‮⁭⁯‪‍‌⁬⁬‍‫‬‏⁯‬​‌‎⁮​‫⁪‌‎‍‫‏⁭⁪‍⁯‮(Stream _param1, string _param2)
  {
    string str = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200B⁪⁭‍‬⁯‪​⁪‭‎‎‪‏‍‌‭‏⁮‬‍‭‫⁪‍⁯⁯​‬‎⁬⁭⁬‫‌⁬​‍‎⁯‮(_param2);
    IList list;
    try
    {
      if (str.Equals(\u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200B⁪⁭‍‬⁯‪​⁪‭‎‎‪‏‍‌‭‏⁮‬‍‭‫⁪‍⁯⁯​‬‎⁬⁭⁬‫‌⁬​‍‎⁯‮("PkiPath")))
      {
        \u206C‭‍⁮‪‮⁭‫⁮‮‬‎​‌‮‎‍⁬​⁪‫⁫‪‭‌‌‪⁭⁭⁪‍‮⁯⁭‍‎⁪‬⁬‍‮ obj = new \u202B⁪‬‏‎‌⁮‮​⁮⁫‪⁮⁯‎⁭‎‏⁪‪‏‫‍‍‎​‌‏‌‎⁮​‭‪‌⁮‌⁮‫‪‮(_param1).\u200B​‏⁮⁭‬‪‏‌‏‮⁫⁬‎‌⁫‮⁬‪⁬‎‬⁬​‪‏⁫​‭‌⁪‏‭‎⁯⁯⁮‌‌‬‮();
        if (!(obj is \u206A‬⁪⁯​⁯‍⁭⁯‮‎‮⁫​‎‬‌‌‏⁪‍⁫‏​⁫​‪​⁯⁫⁮⁯‮​⁬‎‫‌‌⁯‮))
          throw new \u206F⁯⁪​⁮⁪​‬⁬​⁫‎‫‮⁯‏‎‎‍‭​‍⁪‫‏⁮⁭‎‏‏‌​‮‌⁫‮‫‭​‌‮("input stream does not contain a ASN1 SEQUENCE while reading PkiPath encoded data to load CertPath");
        list = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮();
        foreach (Asn1Encodable asn1Encodable in (\u206A‬⁪⁯​⁯‍⁭⁯‮‎‮⁫​‎‬‌‌‏⁪‍⁫‏​⁫​‪​⁯⁫⁮⁯‮​⁬‎‫‌‌⁯‮) obj)
        {
          Stream stream = (Stream) new MemoryStream(asn1Encodable.GetEncoded("DER"), false);
          list.Insert(0, (object) new \u200E⁭⁮‮‬‮⁭⁭‮⁭⁯‬‌‌​‭⁮‍‭‏‫‌​‮‎‌‍‎⁬⁮⁯‮‪‎‪‬⁬⁯⁯⁬‮().\u206E‮⁬⁪‏‪⁭⁯⁫‍⁭‌‌‌‭‬‭⁯⁭‏‌⁮⁮⁯‭⁪‏‌⁬‫⁬⁭‌⁫⁫‮⁪‫‍‍‮(stream));
        }
      }
      else
      {
        if (!str.Equals("PKCS7") && !str.Equals("PEM"))
          throw new \u206F⁯⁪​⁮⁪​‬⁬​⁫‎‫‮⁯‏‎‎‍‭​‍⁪‫‏⁮⁭‎‏‏‌​‮‌⁫‮‫‭​‌‮("unsupported encoding: " + _param2);
        list = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮(new \u200E⁭⁮‮‬‮⁭⁭‮⁭⁯‬‌‌​‭⁮‍‭‏‫‌​‮‎‌‍‎⁬⁮⁯‮‪‎‪‬⁬⁯⁯⁬‮().\u202C⁭​‏‮​‎​​‎⁬⁭⁮‪⁮⁭‍‬‮⁮⁭‭⁫‏⁭‍‪‍‏​‭⁬⁪⁪‮‮‮⁬⁫‬‮(_param1));
      }
    }
    catch (IOException ex)
    {
      throw new \u206F⁯⁪​⁮⁪​‬⁬​⁫‎‫‮⁯‏‎‎‍‭​‍⁪‫‏⁮⁭‎‏‏‌​‮‌⁫‮‫‭​‌‮("IOException throw while decoding CertPath:\n" + ex.ToString());
    }
    this.\u200B⁫‏⁬⁯⁫‌‫⁪‬‍‍⁮‭‬‏⁪⁫‍⁫‌⁫‫​‍⁪‌⁬‍⁫⁪⁪⁯⁪‫‏‍‎‫‮ = \u206F⁬⁫⁪⁪⁪‬​‬⁬‮⁭⁯‪‍‌⁬⁬‍‫‬‏⁯‬​‌‎⁮​‫⁪‌‎‍‫‏⁭⁪‍⁯‮.\u200F​⁭‫‏⁭⁮‏‌⁪‌‭⁬‫⁯‌‬⁪‎⁪‮⁪‎‍‫⁬‫‭‭‌‫‍⁮⁭‏⁫‎‬‌⁮‮(list);
  }

  public virtual IEnumerable \u202A‪‫⁪⁭‏‍‭‮⁮‪⁪‮‭⁬⁪‎⁭‮⁮⁪⁭⁬​‬‫⁭‪⁭‍‪‏⁪⁯⁬‬‫‪⁭‭‮ => (IEnumerable) new \u202C⁬‍‮‪⁭‮⁮‪‪⁬⁬⁭‬⁫​⁭‍⁪‬​‌‏‬‍‏⁮⁪​⁭‍‬⁭⁯‏⁭‫‌‬‌‮((IEnumerable) \u206F⁬⁫⁪⁪⁪‬​‬⁬‮⁭⁯‪‍‌⁬⁬‍‫‬‏⁯‬​‌‎⁮​‫⁪‌‎‍‫‏⁭⁪‍⁯‮.\u200C‌‍‎⁪⁯‮‌⁭‮‏⁮⁮‌‭‌‬⁬‪⁪⁫‪⁫⁫⁯‫⁮‏‬​‏‪⁬⁮‏⁬⁮⁫‬‍‮);

  bool object.\u200F​⁮‫⁭‌‬‭‬‎‭‍‍‌‭⁮‫‪‫‬⁬‮‬‬‏‮‫⁬‏​⁮⁮‍​⁬⁮⁬‍‪‌‮(object _param1)
  {
    if (this == _param1)
      return true;
    if (!(_param1 is \u206F⁬⁫⁪⁪⁪‬​‬⁬‮⁭⁯‪‍‌⁬⁬‍‫‬‏⁯‬​‌‎⁮​‫⁪‌‎‍‫‏⁭⁪‍⁯‮ obj))
      return false;
    IList list1 = this.\u202B‪‏⁫‮⁬⁪⁪‪⁬‍‪‏⁭‬‏‍‪‎‍‫‪⁭‌‎‍⁯‫‌‬‫‌‍⁯‮‪⁯⁬⁫⁪‮;
    IList list2 = obj.\u202B‪‏⁫‮⁬⁪⁪‪⁬‍‪‏⁭‬‏‍‪‎‍‫‪⁭‌‎‍⁯‫‌‬‫‌‍⁯‮‪⁯⁬⁫⁪‮;
    if (list1.Count != list2.Count)
      return false;
    IEnumerator enumerator1 = list1.GetEnumerator();
    IEnumerator enumerator2 = list2.GetEnumerator();
    while (enumerator1.MoveNext())
    {
      enumerator2.MoveNext();
      if (!object.Equals(enumerator1.Current, enumerator2.Current))
        return false;
    }
    return true;
  }

  int object.\u202A⁯⁬​⁫⁯‮‭‎⁭⁯‫⁭​​‌‍‪‍⁮‏⁭⁯⁯‮⁭​⁯⁪‫‪‏⁮‪‫‪⁮‌‌‭‮() => this.\u202B‪‏⁫‮⁬⁪⁪‪⁬‍‪‏⁭‬‏‍‪‎‍‫‪⁭‌‎‍⁯‫‌‬‫‌‍⁯‮‪⁯⁬⁫⁪‮.GetHashCode();

  public virtual byte[] \u206F​‪‪‌‮‬‫⁮​⁭‎‪​‬⁯‫‎⁭‪‌​‮‮‌​‌‮‏‭‎‫‌‮⁭‍‭‫‬‫‮()
  {
    foreach (object obj in this.\u202A‪‫⁪⁭‏‍‭‮⁮‪⁪‮‭⁬⁪‎⁭‮⁮⁪⁭⁬​‬‫⁭‪⁭‍‪‏⁪⁯⁬‬‫‪⁭‭‮)
    {
      if (obj is string)
        return this.\u206F​‪‪‌‮‬‫⁮​⁭‎‪​‬⁯‫‎⁭‪‌​‮‮‌​‌‮‏‭‎‫‌‮⁭‍‭‫‬‫‮((string) obj);
    }
    return (byte[]) null;
  }

  public virtual byte[] \u206F​‪‪‌‮‬‫⁮​⁭‎‪​‬⁯‫‎⁭‪‌​‮‮‌​‌‮‏‭‎‫‌‮⁭‍‭‫‬‫‮(string _param1)
  {
    if (\u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200D‌‍‬‭‭​‮‍⁮⁪‮⁮‫‬⁭‪⁭‏‌⁬‏‬⁮‍‎‬⁭‏⁭‭⁭​‬⁬‭⁬‍⁪⁪‮(_param1, "PkiPath"))
    {
      \u200C​‮⁯⁪​‮‍‫‮‏‮⁫​⁮‏⁭‭‪‏⁯‎‮‭⁭⁬‍⁬‌‮‪⁯⁯⁬⁪‭‫‎‎‮ obj = new \u200C​‮⁯⁪​‮‍‫‮‏‮⁫​⁮‏⁭‭‪‏⁯‎‮‭⁭⁬‍⁬‌‮‪⁯⁯⁬⁪‭‫‎‎‮();
      for (int index = this.\u200B⁫‏⁬⁯⁫‌‫⁪‬‍‍⁮‭‬‏⁪⁫‍⁫‌⁫‫​‍⁪‌⁬‍⁫⁪⁪⁯⁪‫‏‍‎‫‮.Count - 1; index >= 0; --index)
        obj.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮((Asn1Encodable) this.\u206D‬‮‪⁭⁫‪‮⁬⁭⁯‫‏‬‭‪⁪⁫‏⁬‍‎‭⁯⁫‌‬‫​‫⁮⁯‬‮⁭⁬​⁯‏‮‮((\u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮) this.\u200B⁫‏⁬⁯⁫‌‫⁪‬‍‍⁮‭‬‏⁪⁫‍⁫‌⁫‫​‍⁪‌⁬‍⁫⁪⁪⁯⁪‫‏‍‎‫‮[index]));
      return this.\u206A​‪‬​‎⁭⁪‬‏⁬‎‪⁫‭‍⁮‭⁯⁯⁬⁪⁫‪⁯⁭‬⁮‎‬‭‍‭⁮‍‍⁫‮‮‪‮((Asn1Encodable) new \u202A⁪⁭⁭⁭⁮‏‍‫⁯‬⁯‏⁫‍⁫⁬⁭‮⁪⁯‍‬‎​⁯‎‭‫​⁫​‌⁯‫⁫‭‪‫⁫‮(obj));
    }
    if (\u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200D‌‍‬‭‭​‮‍⁮⁪‮⁮‫‬⁭‪⁭‏‌⁬‏‬⁮‍‎‬⁭‏⁭‭⁭​‬⁬‭⁬‍⁪⁪‮(_param1, "PKCS7"))
    {
      \u200D⁬⁪⁪⁮​‏‪⁫⁫‬‎⁯​⁭‮‌‎‌⁪‪‎‬‍‌‌⁯‎‭‬⁬‭⁯‭‭‎‪‪​⁫‮ obj1 = new \u200D⁬⁪⁪⁮​‏‪⁫⁫‬‎⁯​⁭‮‌‎‌⁪‪‎‬‍‌‌⁯‎‭‬⁬‭⁯‭‭‎‪‪​⁫‮(\u202E‍‮⁫‎​‪⁮‮⁫‫​⁭‬‫‎⁮⁭‏⁭‮⁮⁮‭‫⁪‫⁫‏‎⁭‭‎⁮‪⁮⁪⁯‬‌‮.\u202B‪‍‮‪‌‌‍‫‬⁫‍‌‍‭‬⁪​⁯‫⁮⁪⁯⁫‬⁯‮⁭​‮‬⁭⁯‬⁮‍⁭⁬‫⁯‮, (Asn1Encodable) null);
      \u200C​‮⁯⁪​‮‍‫‮‏‮⁫​⁮‏⁭‭‪‏⁯‎‮‭⁭⁬‍⁬‌‮‪⁯⁯⁬⁪‭‫‎‎‮ obj2 = new \u200C​‮⁯⁪​‮‍‫‮‏‮⁫​⁮‏⁭‭‪‏⁯‎‮‭⁭⁬‍⁬‌‮‪⁯⁯⁬⁪‭‫‎‎‮();
      for (int index = 0; index != this.\u200B⁫‏⁬⁯⁫‌‫⁪‬‍‍⁮‭‬‏⁪⁫‍⁫‌⁫‫​‍⁪‌⁬‍⁫⁪⁪⁯⁪‫‏‍‎‫‮.Count; ++index)
        obj2.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮((Asn1Encodable) this.\u206D‬‮‪⁭⁫‪‮⁬⁭⁯‫‏‬‭‪⁪⁫‏⁬‍‎‭⁯⁫‌‬‫​‫⁮⁯‬‮⁭⁬​⁯‏‮‮((\u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮) this.\u200B⁫‏⁬⁯⁫‌‫⁪‬‍‍⁮‭‬‏⁪⁫‍⁫‌⁫‫​‍⁪‌⁬‍⁫⁪⁪⁯⁪‫‏‍‎‫‮[index]));
      \u200F‪‮⁯‫‌​‫‬⁬⁬‌⁯⁭‍‫⁮⁭⁪‍‮‬‬⁫⁮⁫‬‌‌⁫⁭⁭‎⁯⁭‭‎‮⁯‏‮ obj3 = new \u200F‪‮⁯‫‌​‫‬⁬⁬‌⁯⁭‍‫⁮⁭⁪‍‮‬‬⁫⁮⁫‬‌‌⁫⁭⁭‎⁯⁭‭‎‮⁯‏‮(new \u202E‭⁮‌⁭⁪‍⁪‬‎⁪⁮‎‮‪‏⁪‌‪⁯‮‮⁪‎⁬⁯⁪‍⁪⁭‬‪⁫⁪​⁬⁫⁬‭‪‮(1), (\u200E⁮‮⁫⁭⁮‍‭⁮⁫‌⁮‍‫⁯⁮⁫⁯‪‏‎‌⁪⁬‎⁮⁯⁫⁪‭⁭⁪‍⁬⁭‎​​⁮⁭‮) new \u206F‮⁫⁮⁯⁮‎‫⁪⁬‭‎‮‌⁯⁪⁬⁭⁪‫⁭‬‏‪⁫‫‫⁭‏⁮‌⁬‮⁪‭‭⁬⁭‭⁯‮(), obj1, (\u200E⁮‮⁫⁭⁮‍‭⁮⁫‌⁮‍‫⁯⁮⁫⁯‪‏‎‌⁪⁬‎⁮⁯⁫⁪‭⁭⁪‍⁬⁭‎​​⁮⁭‮) new \u206F‮⁫⁮⁯⁮‎‫⁪⁬‭‎‮‌⁯⁪⁬⁭⁪‫⁭‬‏‪⁫‫‫⁭‏⁮‌⁬‮⁪‭‭⁬⁭‭⁯‮(obj2), (\u200E⁮‮⁫⁭⁮‍‭⁮⁫‌⁮‍‫⁯⁮⁫⁯‪‏‎‌⁪⁬‎⁮⁯⁫⁪‭⁭⁪‍⁬⁭‎​​⁮⁭‮) null, (\u200E⁮‮⁫⁭⁮‍‭⁮⁫‌⁮‍‫⁯⁮⁫⁯‪‏‎‌⁪⁬‎⁮⁯⁫⁪‭⁭⁪‍⁬⁭‎​​⁮⁭‮) new \u206F‮⁫⁮⁯⁮‎‫⁪⁬‭‎‮‌⁯⁪⁬⁭⁪‫⁭‬‏‪⁫‫‫⁭‏⁮‌⁬‮⁪‭‭⁬⁭‭⁯‮());
      return this.\u206A​‪‬​‎⁭⁪‬‏⁬‎‪⁫‭‍⁮‭⁯⁯⁬⁪⁫‪⁯⁭‬⁮‎‬‭‍‭⁮‍‍⁫‮‮‪‮((Asn1Encodable) new \u200D⁬⁪⁪⁮​‏‪⁫⁫‬‎⁯​⁭‮‌‎‌⁪‪‎‬‍‌‌⁯‎‭‬⁬‭⁯‭‭‎‪‪​⁫‮(\u202E‍‮⁫‎​‪⁮‮⁫‫​⁭‬‫‎⁮⁭‏⁭‮⁮⁮‭‫⁪‫⁫‏‎⁭‭‎⁮‪⁮⁪⁯‬‌‮.\u202C​‏⁫‪‫‬⁮‫⁯‪⁯⁯‭⁫‎‬⁫‭⁪‫⁯​‫⁯‎​‌‪‍​​⁫⁬‎⁭⁪⁯​⁭‮, (Asn1Encodable) obj3));
    }
    if (!\u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200D‌‍‬‭‭​‮‍⁮⁪‮⁮‫‬⁭‪⁭‏‌⁬‏‬⁮‍‎‬⁭‏⁭‭⁭​‬⁬‭⁬‍⁪⁪‮(_param1, "PEM"))
      throw new \u206B⁭​⁬‬‮‎‍⁪‍‫⁪⁭⁮​⁭⁭‪​‏⁮⁪⁮‮‎⁬⁮‎‌‬‎‮⁪⁮‌⁪⁪⁫⁯‏‮("unsupported encoding: " + _param1);
    MemoryStream memoryStream = new MemoryStream();
    \u206D‬‪⁮‍‌‮‍⁭⁪‫⁬‍⁪​‌⁮⁬⁮⁬‮⁭​‪⁪‎​⁯‌‍⁫‌‮‎​⁬⁭⁯⁬⁭‮ obj4 = new \u206D‬‪⁮‍‌‮‍⁭⁪‫⁬‍⁪​‌⁮⁬⁮⁬‮⁭​‪⁪‎​⁯‌‍⁫‌‮‎​⁬⁭⁯⁬⁭‮((TextWriter) new StreamWriter((Stream) memoryStream));
    try
    {
      for (int index = 0; index != this.\u200B⁫‏⁬⁯⁫‌‫⁪‬‍‍⁮‭‬‏⁪⁫‍⁫‌⁫‫​‍⁪‌⁬‍⁫⁪⁪⁯⁪‫‏‍‎‫‮.Count; ++index)
        obj4.\u206C‫⁪⁯‮​⁭‍⁫⁮‎⁬‪​‭‮‌‎‫⁭‬‮⁮‌⁬‭‫⁪​⁫‫⁯⁪‏‎‫‭‌‌⁪‮(this.\u200B⁫‏⁬⁯⁫‌‫⁪‬‍‍⁮‭‬‏⁪⁫‍⁫‌⁫‫​‍⁪‌⁬‍⁫⁪⁪⁯⁪‫‏‍‎‫‮[index]);
      \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u202A‎​‬‌‎‬⁫​‭⁮​‍⁫‬‎‍‪‪⁮​⁪⁮‫⁯​​‎​‫‍⁬⁭‏‌​‎‏‏‮‮(obj4.\u200C⁯‭‭‍⁭‮⁬​‪⁫‮‭⁯‎‮‬⁫⁬‫⁫⁯‎⁯‫‏⁪⁮​⁭‮⁪⁫⁯⁯​‭⁫‮‏‮);
    }
    catch (Exception ex)
    {
      throw new \u206B⁭​⁬‬‮‎‍⁪‍‫⁪⁭⁮​⁭⁭‪​‏⁮⁪⁮‮‎⁬⁮‎‌‬‎‮⁪⁮‌⁪⁪⁫⁯‏‮("can't encode certificate for PEM encoded path");
    }
    return memoryStream.ToArray();
  }

  public virtual IList \u202B‪‏⁫‮⁬⁪⁪‪⁬‍‪‏⁭‬‏‍‪‎‍‫‪⁭‌‎‍⁯‫‌‬‫‌‍⁯‮‪⁯⁬⁫⁪‮ => \u206F‌​‬⁬‫‮‬‎‬⁪⁬‍⁫‫‏‪‬‭‮‬‭‎⁬‪⁪‭‭‭⁭​‮‮‌‬⁮‮‎⁭‭‮.\u202A​‍⁭‫‮‭⁬⁪​‭‭⁯⁯​‭⁫‬‏‍⁯‎‎‌‍‏‫⁫⁮⁫‎‍⁪‮⁯‭⁪⁫‏‍‮(this.\u200B⁫‏⁬⁯⁫‌‫⁪‬‍‍⁮‭‬‏⁪⁫‍⁫‌⁫‫​‍⁪‌⁬‍⁫⁪⁪⁯⁪‫‏‍‎‫‮);

  private \u206C‭‍⁮‪‮⁭‫⁮‮‬‎​‌‮‎‍⁬​⁪‫⁫‪‭‌‌‪⁭⁭⁪‍‮⁯⁭‍‎⁪‬⁬‍‮ \u206D‬‮‪⁭⁫‪‮⁬⁭⁯‫‏‬‭‪⁪⁫‏⁬‍‎‭⁯⁫‌‬‫​‫⁮⁯‬‮⁭⁬​⁯‏‮‮(
    \u206D⁫‍⁯‏‍‌‫‫‮⁯‭‫‌⁪‬​⁫‪⁯‮⁪‎‮‬‮⁭‬⁪‪⁫‏‮⁭‭‭‎‬⁭‌‮ _param1)
  {
    try
    {
      return \u206C‭‍⁮‪‮⁭‫⁮‮‬‎​‌‮‎‍⁬​⁪‫⁫‪‭‌‌‪⁭⁭⁪‍‮⁯⁭‍‎⁪‬⁬‍‮.\u202E‍‌‎‍‫‪‎‌⁯‫⁫‏‮‏⁪⁯‫​‌‌⁫‬‍‍‮⁪⁫‮‬‪⁯​‮⁭‫⁫⁪‎‪‮(_param1.\u206F​‪‪‌‮‬‫⁮​⁭‎‪​‬⁯‫‎⁭‪‌​‮‮‌​‌‮‏‭‎‫‌‮⁭‍‭‫‬‫‮());
    }
    catch (Exception ex)
    {
      throw new \u206B⁭​⁬‬‮‎‍⁪‍‫⁪⁭⁮​⁭⁭‪​‏⁮⁪⁮‮‎⁬⁮‎‌‬‎‮⁪⁮‌⁪⁪⁫⁯‏‮("Exception while encoding certificate", ex);
    }
  }

  private byte[] \u206A​‪‬​‎⁭⁪‬‏⁬‎‪⁫‭‍⁮‭⁯⁯⁬⁪⁫‪⁯⁭‬⁮‎‬‭‍‭⁮‍‍⁫‮‮‪‮(Asn1Encodable _param1)
  {
    try
    {
      return _param1.GetEncoded("DER");
    }
    catch (IOException ex)
    {
      throw new \u206B⁭​⁬‬‮‎‍⁪‍‫⁪⁭⁮​⁭⁭‪​‏⁮⁪⁮‮‎⁬⁮‎‌‬‎‮⁪⁮‌⁪⁪⁫⁯‏‮("Exception thrown", (Exception) ex);
    }
  }
}
