// Decompiled with JetBrains decompiler
// Type: TumblrAPI.Authentication
// Assembly: EventListe, Version=1.0.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 17402B6D-E2A2-428E-97AD-7F2170B297A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\Backdoor.Win32.Buterat.frsq-f1c24055722dc6f94c4b223ed4a7bce8ffb5c5bb3030bca735d6ceab513d8d31.exe

using System.Collections.Generic;
using System.IO;
using System.Xml;

namespace TumblrAPI
{
  public class Authentication
  {
    internal static string Email { get; private set; }

    internal static string Password { get; private set; }

    public static AuthenticationStatus Status { get; set; }

    public static AuthenticationStatus Authenticate(
      string email,
      string password)
    {
      Authentication.Email = email;
      Authentication.Password = password;
      TumblrResult tumblrResult = new HttpHelper("", (IDictionary<string, string>) new Dictionary<string, string>()
      {
        {
          nameof (email),
          Authentication.Email
        },
        {
          nameof (password),
          Authentication.Password
        },
        {
          "action",
          "authenticate"
        }
      }).Post();
      Authentication.ParseRequest(tumblrResult.Message);
      int num;
      if (tumblrResult.PostStatus != PostStatus.Created)
        num = (int) (Authentication.Status = AuthenticationStatus.Invalid);
      else
        Authentication.Status = (AuthenticationStatus) (num = 200);
      Authentication.Status = (AuthenticationStatus) num;
      return Authentication.Status;
    }

    private static UserInformation ParseRequest(string xmlResponse)
    {
      UserInformation request = new UserInformation();
      using (XmlReader xmlReader = XmlReader.Create((TextReader) new StringReader(xmlResponse)))
      {
        new XmlWriterSettings().Indent = true;
        while (xmlReader.Read())
        {
          if (xmlReader.NodeType == XmlNodeType.Element && xmlReader.HasAttributes)
          {
            for (int i = 0; i < xmlReader.AttributeCount; ++i)
            {
              xmlReader.MoveToAttribute(i);
              switch (xmlReader.Name.ToLowerInvariant())
              {
                case "avatar-url":
                  request.TumblrLog.AvatarUrl = xmlReader.Value;
                  break;
                case "backup-post-limit":
                  request.TumblrLog.BackUpPostLimit = Authentication.ParseInt(xmlReader.Value);
                  break;
                case "can-ask-question":
                  request.CanAskQuestion = Authentication.ParseBool(xmlReader.Value);
                  break;
                case "can-upload-aiff":
                  request.CanUploadAiff = Authentication.ParseBool(xmlReader.Value);
                  break;
                case "can-upload-audio":
                  request.CanUploadAudio = Authentication.ParseBool(xmlReader.Value);
                  break;
                case "can-upload-video":
                  request.CanUploadVideo = Authentication.ParseBool(xmlReader.Value);
                  break;
                case "default-post-format":
                  request.DefaultPostFormat = xmlReader.Value;
                  break;
                case "draft-count":
                  request.TumblrLog.DraftCount = Authentication.ParseInt(xmlReader.Value);
                  break;
                case "followers":
                  request.TumblrLog.Followers = Authentication.ParseInt(xmlReader.Value);
                  break;
                case "is-admin":
                  request.TumblrLog.IsAdmin = Authentication.ParseBool(xmlReader.Value);
                  break;
                case "is-primary":
                  request.TumblrLog.IsPrimary = Authentication.ParseBool(xmlReader.Value);
                  break;
                case "liked-post-count":
                  request.LikedPostCount = Authentication.ParseInt(xmlReader.Value);
                  break;
                case "max-video-bytes-uploaded":
                  request.MaxVideoBytesUploaded = Authentication.ParseLong(xmlReader.Value);
                  break;
                case "messages-count":
                  request.TumblrLog.MessageCount = Authentication.ParseInt(xmlReader.Value);
                  break;
                case "name":
                  request.TumblrLog.Name = xmlReader.Value;
                  break;
                case "posts":
                  request.TumblrLog.Posts = Authentication.ParseInt(xmlReader.Value);
                  break;
                case "queue-count":
                  request.TumblrLog.QueueCount = Authentication.ParseInt(xmlReader.Value);
                  break;
                case "title":
                  request.TumblrLog.Title = xmlReader.Value;
                  break;
                case "twitter-enabled":
                  request.TumblrLog.IsTwitterEnabled = Authentication.ParseBool(xmlReader.Value);
                  break;
                case "type":
                  request.TumblrLog.Type = xmlReader.Value;
                  break;
                case "url":
                  request.TumblrLog.Url = xmlReader.Value;
                  break;
              }
            }
          }
        }
      }
      return request;
    }

    private static bool ParseBool(string str) => str.ToLowerInvariant() == "yes" || Authentication.ParseInt(str) == 1;

    private static int ParseInt(string str)
    {
      int result;
      int.TryParse(str, out result);
      return result;
    }

    private static long ParseLong(string str)
    {
      long result;
      long.TryParse(str, out result);
      return result;
    }
  }
}
