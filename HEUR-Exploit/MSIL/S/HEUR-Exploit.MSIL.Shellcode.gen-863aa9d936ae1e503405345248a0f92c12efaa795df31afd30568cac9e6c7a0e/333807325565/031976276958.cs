// Decompiled with JetBrains decompiler
// Type: 333807325565.031976276958
// Assembly: 052709057542, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 359C9CB9-9F6B-407E-806A-B212EE061A4B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-863aa9d936ae1e503405345248a0f92c12efaa795df31afd30568cac9e6c7a0e.exe

using \u003028101151759;
using \u003028340401458;
using \u003034974365743;
using \u003124756857040;
using \u003333807325565;
using \u003345716802872;
using \u003409568832663;
using \u003451555553690;
using \u003488566072194;
using \u003642194741347;
using \u003906611120407;
using \u003938058275036;
using EnvDTE;
using Microsoft.AspNet.Scaffolding;
using Microsoft.AspNet.Scaffolding.Core.Metadata;
using Microsoft.AspNet.Scaffolding.NuGet;
using Microsoft.AspNet.Scaffolding.Telemetry;
using Microsoft.WebTools.Shared;
using Microsoft.WebTools.Shared.VS.Helpers;
using System;
using System.Collections.Generic;
using System.Data.Entity.Design.PluralizationServices;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Xml;
using VSLangProj;

namespace \u003333807325565
{
  internal class \u003031976276958 : IEntityFrameworkService
  {
    private const string \u003196601655654 = "WebFormsVS";
    private readonly Dictionary<CultureInfo, PluralizationService> \u003416998670993 = new Dictionary<CultureInfo, PluralizationService>();
    private readonly IServiceProvider \u003036179323474;

    public \u003031976276958(IServiceProvider serviceProvider) => this.\u003036179323474 = serviceProvider != null ? serviceProvider : throw new ArgumentNullException(nameof (serviceProvider));

    private IDbContextEditorService \u003344012764152 => IServiceProviderExtensions.GetService<IDbContextEditorService>(this.\u003036179323474);

    public ModelMetadata \u003973898485526(
      CodeGenerationContext _param1,
      string _param2,
      string _param3)
    {
      if (_param3 == null)
        throw new ArgumentNullException("entityTypeFullName");
      if (string.IsNullOrEmpty(_param2))
        throw new ArgumentException(\u003887654838092.\u003187643616885, "dbContextTypeFullName");
      CodeGenerationContextExtensions.AddTelemetryData(_param1, "MSInternal_EntityFrameworkInfo", "WasUsed", (object) true);
      Project activeProject = _param1.ActiveProject;
      ProjectLanguage codeLanguage = ProjectExtensions.GetCodeLanguage(activeProject);
      \u003031976276958.\u003786230991188(activeProject);
      this.\u003139413925510(activeProject, _param3, true);
      Type type1 = this.\u003322490515061(activeProject, _param3, true);
      CodeType dbContextCodeType = this.\u003139413925510(activeProject, _param2, false);
      Type type2 = this.\u003322490515061(activeProject, _param2, dbContextCodeType != null);
      this.\u003649182156620(activeProject);
      string connectionStringName = (string) null;
      if (dbContextCodeType == null)
      {
        connectionStringName = this.\u003344012764152.AddConnectionString(_param1, _param2);
        dbContextCodeType = this.\u003344012764152.CreateNewDbContext(_param1, _param2, connectionStringName);
      }
      \u003186197762616 obj1 = \u003186197762616.\u003818164256493(this.\u003036179323474, activeProject);
      using (\u003835640446724 obj2 = this.\u003637759934478(obj1, activeProject))
      {
        IDynamicModelFactory instanceAndUnwrap = (IDynamicModelFactory) obj2.\u003808069412587.CreateInstanceAndUnwrap(obj1.\u003808663517377.FullName, "Microsoft.AspNet.Scaffolding.EntityFramework.Infrastructure.DynamicModelFactory");
        instanceAndUnwrap.ConnectionStringName = connectionStringName;
        instanceAndUnwrap.ContextTypeQualifiedName = type2 == (Type) null ? (string) null : type2.AssemblyQualifiedName;
        instanceAndUnwrap.ProjectLanguageGuid = codeLanguage.ProjectLanguageGuid;
        instanceAndUnwrap.Resources = \u003585370015183.\u003823007540929;
        IDynamicModel dynamicModel = instanceAndUnwrap.CreateDynamicModel();
        Dictionary<string, string> dictionary = new Dictionary<string, string>((IEqualityComparer<string>) StringComparer.Ordinal);
        ModelMetadata metadata;
        if (!dynamicModel.IsReadOnly && !dynamicModel.ContainsEntitySet(type1.AssemblyQualifiedName))
        {
          dynamicModel.AddEntitySet(type1.AssemblyQualifiedName);
          metadata = dynamicModel.GetMetadata(type1.AssemblyQualifiedName);
          dictionary.Add(metadata.EntitySetName, type1.FullName);
        }
        else
          metadata = dynamicModel.GetMetadata(type1.AssemblyQualifiedName);
        foreach (RelatedModelMetadata relatedEntity in metadata.RelatedEntities)
        {
          Type type3 = this.\u003322490515061(activeProject, relatedEntity.TypeName, true);
          if (!dynamicModel.IsReadOnly && !dynamicModel.ContainsEntitySet(type3.AssemblyQualifiedName))
          {
            dynamicModel.AddEntitySet(type3.AssemblyQualifiedName);
            dictionary.Add(relatedEntity.EntitySetName, type3.FullName);
          }
        }
        if (dynamicModel.IsDirty)
          metadata = dynamicModel.GetMetadata(type1.AssemblyQualifiedName);
        foreach (KeyValuePair<string, string> keyValuePair in dictionary)
        {
          CodeType entityCodeType = this.\u003139413925510(activeProject, keyValuePair.Value, true);
          this.\u003344012764152.AddEntitySetProperty(_param1, dbContextCodeType, entityCodeType, keyValuePair.Key);
        }
        this.\u003768660325233(_param1, metadata);
        this.\u003460626041333(_param1, activeProject);
        return metadata;
      }
    }

    private void \u003649182156620(Project _param1)
    {
      string path = \u003932824046626.\u003083508790498(_param1);
      if (string.IsNullOrEmpty(path) || !File.Exists(path))
        return;
      XmlDocument safeDocument = XmlExtensions.CreateSafeDocument();
      XmlExtensions.SafeLoad(safeDocument, path);
      XmlNodeList xmlNodeList = safeDocument.SelectNodes("//*/@configSource");
      if (xmlNodeList != null && xmlNodeList.Count > 0)
        throw new ExceptionWithHyperLinkMessage(\u003887654838092.\u003547481108634, \u003887654838092.\u003753064125731, \u003887654838092.\u003436955244755);
    }

    private static void \u003786230991188(Project _param0)
    {
      Reference reference = \u003932824046626.\u003666105789424(_param0);
      if (reference == null || reference.MajorVersion < 5)
        throw new InvalidOperationException(\u003887654838092.\u003431310802493);
    }

    private void \u003768660325233(CodeGenerationContext _param1_1, ModelMetadata _param2)
    {
      \u003996109102579 obj = \u003996109102579.None;
      foreach (PropertyMetadata propertyMetadata in ((IEnumerable<PropertyMetadata>) _param2.Properties).Where<PropertyMetadata>((Func<PropertyMetadata, bool>) (_param1_2 => _param1_2.IsAssociation)))
      {
        switch (propertyMetadata.AssociationDirection - 1)
        {
          case 0:
            obj |= \u003996109102579.OneToOne;
            break;
          case 1:
            obj |= \u003996109102579.OneToMany;
            break;
          case 2:
            obj |= \u003996109102579.ManyToOne;
            break;
          case 3:
            obj |= \u003996109102579.ManyToMany;
            break;
        }
        if (propertyMetadata.IsIndependentAssociation)
          obj |= \u003996109102579.Independent;
      }
      CodeGenerationContextExtensions.SetFlag(_param1_1, "MSInternal_EntityFrameworkInfo", "AssociationsUsedInScaffolding", (uint) obj);
    }

    private void \u003460626041333(CodeGenerationContext _param1_1, Project _param2)
    {
      try
      {
        if (!IServiceProviderExtensions.GetService<ICodeTypeService>(this.\u003036179323474).GetAllCodeTypes(_param2).Where<CodeType>((Func<CodeType, bool>) (_param1_2 => _param1_2.\u003349544458165())).Any<CodeType>(new Func<CodeType, bool>(\u003031976276958.\u003795307679019)))
          return;
        CodeGenerationContextExtensions.SetFlag(_param1_1, "MSInternal_EntityFrameworkInfo", "ProgrammingModelsInProject", 2U);
      }
      catch
      {
      }
    }

    private static bool \u003795307679019(CodeType _param0)
    {
      for (ProjectItem projectItem = _param0.ProjectItem; projectItem != null && !(projectItem.Kind != "{6BB5F8EE-4483-11D3-8BCF-00C04F8EC28C}"); projectItem = projectItem.Collection.Parent as ProjectItem)
      {
        for (short index = 0; (int) index < (int) projectItem.FileCount; ++index)
        {
          if (projectItem[index].EndsWith(".edmx", StringComparison.OrdinalIgnoreCase))
            return false;
        }
      }
      return true;
    }

    private Type \u003322490515061(Project _param1, string _param2, bool _param3)
    {
      Type type = IServiceProviderExtensions.GetService<IReflectedTypesService>(this.\u003036179323474).GetType(_param1, _param2);
      return !(type == (Type) null & _param3) ? type : throw new InvalidOperationException(string.Format((IFormatProvider) CultureInfo.CurrentCulture, \u003887654838092.\u003183851431401, (object) _param2));
    }

    private CodeType \u003139413925510(Project _param1, string _param2, bool _param3)
    {
      CodeType codeType = IServiceProviderExtensions.GetService<ICodeTypeService>(this.\u003036179323474).GetCodeType(_param1, _param2);
      if (codeType != null)
        return codeType;
      if (_param3)
        throw new InvalidOperationException(string.Format((IFormatProvider) CultureInfo.CurrentCulture, \u003887654838092.\u003641466822200, (object) _param2));
      return (CodeType) null;
    }

    private \u003835640446724 \u003637759934478(
      \u003186197762616 _param1,
      Project _param2)
    {
      string configurationFile = \u003932824046626.\u003083508790498(_param2);
      List<string> list = ProjectExtensions.GetAssemblyReferences(_param2, true).ToList<string>();
      list.Add(ProjectExtensions.GetAssemblyPath(_param2));
      HashSet<string> assemblyFiles = new HashSet<string>((IEqualityComparer<string>) StringComparer.OrdinalIgnoreCase);
      foreach (string str in list)
        assemblyFiles.Add(str);
      assemblyFiles.Add(typeof (CodeGenerator).Assembly.Location);
      assemblyFiles.Add(typeof (\u003031976276958).Assembly.Location);
      assemblyFiles.Add(_param1.\u003249349967453);
      return new \u003835640446724(configurationFile, (IEnumerable<string>) assemblyFiles);
    }

    public string \u003442219727260(string _param1, CultureInfo _param2) => this.\u003491318686642(_param2).Pluralize(_param1);

    public string \u003660033282551(string _param1, CultureInfo _param2) => this.\u003491318686642(_param2).Singularize(_param1);

    private PluralizationService \u003491318686642(CultureInfo _param1)
    {
      if (!this.\u003416998670993.ContainsKey(_param1))
      {
        PluralizationService service;
        try
        {
          service = PluralizationService.CreateService(_param1);
        }
        catch (NotImplementedException ex)
        {
          service = PluralizationService.CreateService(CultureInfo.GetCultureInfo(1033));
        }
        this.\u003416998670993.Add(_param1, service);
      }
      return this.\u003416998670993[_param1];
    }

    public IEnumerable<NuGetPackage> \u003386239874363 => (IEnumerable<NuGetPackage>) new NuGetPackage[1]
    {
      new NuGetPackage("EntityFramework", "6.1.3", (NuGetRepository) new NuGetRegistryRepository("WebFormsVS" + IServiceProviderExtensions.GetService<IVisualStudioInformation>(this.\u003036179323474).Version.Major.ToString(), true))
    };
  }
}
