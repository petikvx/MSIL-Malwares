// Decompiled with JetBrains decompiler
// Type: gTUUGLwtPyyhIQnY.VvQyEvkpXcUsb
// Assembly: deinvater, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89B491E0-9EDA-4D26-ADB9-208707ED33ED
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-561b48f813af5f638c5f305d21a716998cce9e0ce1ea3374fd118cec5f725885.exe

using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;

namespace gTUUGLwtPyyhIQnY
{
  public class VvQyEvkpXcUsb
  {
    private const int xFPQrzxivZyI = 32;
    private const int WBUxdxwljaa = 64;
    private const int LYGsTuYCyeCLTfY = 16;
    private const int RYcoTwahBT = 32;
    private readonly byte[] oQzFdoaGnvlyVn;
    private readonly byte[] jwZlNJkYIlDC;
    private static readonly byte[] fXaSWrKoCnR = new byte[32]
    {
      (byte) 191,
      (byte) 235,
      (byte) 30,
      (byte) 86,
      (byte) 251,
      (byte) 205,
      (byte) 151,
      (byte) 59,
      (byte) 178,
      (byte) 25,
      (byte) 2,
      (byte) 36,
      (byte) 48,
      (byte) 165,
      (byte) 120,
      (byte) 67,
      (byte) 0,
      (byte) 61,
      (byte) 86,
      (byte) 68,
      (byte) 210,
      (byte) 30,
      (byte) 98,
      (byte) 185,
      (byte) 212,
      (byte) 241,
      (byte) 128,
      (byte) 231,
      (byte) 230,
      (byte) 195,
      (byte) 57,
      (byte) 65
    };

    public VvQyEvkpXcUsb(string twWxGzaLBMSU)
    {
      if (string.IsNullOrEmpty(twWxGzaLBMSU))
        throw new ArgumentException("masterKey can not be null or empty.");
      using (Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(twWxGzaLBMSU, VvQyEvkpXcUsb.fXaSWrKoCnR, 50000))
      {
        this.oQzFdoaGnvlyVn = rfc2898DeriveBytes.GetBytes(32);
        this.jwZlNJkYIlDC = rfc2898DeriveBytes.GetBytes(64);
      }
    }

    public string xwBOdANqGbXFu(string bDlYYHDWzdiXL) => Convert.ToBase64String(this.fdXyEpUHTTJfYg(Encoding.UTF8.GetBytes(bDlYYHDWzdiXL)));

    public byte[] fdXyEpUHTTJfYg(byte[] PMgBtimnHUYN)
    {
      if (PMgBtimnHUYN == null)
        throw new ArgumentNullException("input can not be null.");
      using (MemoryStream memoryStream = new MemoryStream())
      {
        memoryStream.Position = 32L;
        using (AesCryptoServiceProvider cryptoServiceProvider = new AesCryptoServiceProvider())
        {
          cryptoServiceProvider.KeySize = 256;
          cryptoServiceProvider.BlockSize = 128;
          cryptoServiceProvider.Mode = CipherMode.CBC;
          cryptoServiceProvider.Padding = PaddingMode.PKCS7;
          cryptoServiceProvider.Key = this.oQzFdoaGnvlyVn;
          cryptoServiceProvider.GenerateIV();
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, cryptoServiceProvider.CreateEncryptor(), CryptoStreamMode.Write))
          {
            memoryStream.Write(cryptoServiceProvider.IV, 0, cryptoServiceProvider.IV.Length);
            cryptoStream.Write(PMgBtimnHUYN, 0, PMgBtimnHUYN.Length);
            cryptoStream.FlushFinalBlock();
            using (HMACSHA256 hmacshA256 = new HMACSHA256(this.jwZlNJkYIlDC))
            {
              byte[] hash = hmacshA256.ComputeHash(memoryStream.ToArray(), 32, memoryStream.ToArray().Length - 32);
              memoryStream.Position = 0L;
              memoryStream.Write(hash, 0, hash.Length);
            }
          }
        }
        return memoryStream.ToArray();
      }
    }

    public string JCOxFAoqqrrzpguzS(string bQXquqfQHJmuLS) => Encoding.UTF8.GetString(this.mnXJtATwpefVlVK(Convert.FromBase64String(bQXquqfQHJmuLS)));

    public byte[] mnXJtATwpefVlVK(byte[] qJXpetDjfQSZCE)
    {
      if (qJXpetDjfQSZCE == null)
        throw new ArgumentNullException("input can not be null.");
      using (MemoryStream memoryStream = new MemoryStream(qJXpetDjfQSZCE))
      {
        using (AesCryptoServiceProvider cryptoServiceProvider = new AesCryptoServiceProvider())
        {
          cryptoServiceProvider.KeySize = 256;
          cryptoServiceProvider.BlockSize = 128;
          cryptoServiceProvider.Mode = CipherMode.CBC;
          cryptoServiceProvider.Padding = PaddingMode.PKCS7;
          cryptoServiceProvider.Key = this.oQzFdoaGnvlyVn;
          using (HMACSHA256 hmacshA256 = new HMACSHA256(this.jwZlNJkYIlDC))
          {
            byte[] hash = hmacshA256.ComputeHash(memoryStream.ToArray(), 32, memoryStream.ToArray().Length - 32);
            byte[] numArray = new byte[32];
            memoryStream.Read(numArray, 0, numArray.Length);
            if (!this.UOqEUUICZH(hash, numArray))
              throw new CryptographicException("Invalid message authentication code (MAC).");
          }
          byte[] buffer = new byte[16];
          memoryStream.Read(buffer, 0, 16);
          cryptoServiceProvider.IV = buffer;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, cryptoServiceProvider.CreateDecryptor(), CryptoStreamMode.Read))
          {
            byte[] numArray = new byte[memoryStream.Length - 16L + 1L];
            byte[] dst = new byte[cryptoStream.Read(numArray, 0, numArray.Length)];
            Buffer.BlockCopy((Array) numArray, 0, (Array) dst, 0, dst.Length);
            return dst;
          }
        }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private bool UOqEUUICZH(byte[] OjvISMvFoviNO, byte[] BwFZiOkTpXT)
    {
      bool flag = true;
      for (int index = 0; index < OjvISMvFoviNO.Length; ++index)
      {
        if ((int) OjvISMvFoviNO[index] != (int) BwFZiOkTpXT[index])
          flag = false;
      }
      return flag;
    }
  }
}
