// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ReportingService
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using System;
using System.Net;
using System.Runtime.CompilerServices;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace SmartAssembly.SmartExceptionsCore
{
  [WebServiceBinding(Name = "ReportingServiceSoap", Namespace = "http://www.smartassembly.com/webservices/Reporting/")]
  internal class ReportingService : SoapHttpClientProtocol
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ReportingService(string serverUrl)
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            this.Timeout = 180000;
            int num2 = 5;
            num1 = ReportingService.XuCYxp5FVuG8lGCwwuK() ? num2 : num2;
            continue;
          case 1:
          case 4:
            this.Url = serverUrl + "Reporting.asmx";
            goto case 0;
          case 3:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            num1 = 4;
            continue;
          case 5:
            goto label_2;
          default:
            if (ReportingService.gFBnlP5AUE8eSIWPlwe())
            {
              num1 = 0;
              continue;
            }
            goto label_7;
        }
      }
label_2:
      return;
label_7:;
    }

    [SoapDocumentMethod("http://www.smartassembly.com/webservices/Reporting/UploadReport2")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string UploadReport2(
      string licenseID,
      [XmlElement(DataType = "base64Binary")] byte[] data,
      string email,
      string appFriendlyName,
      string buildFriendlyNumber)
    {
      return (string) this.Invoke(nameof (UploadReport2), new object[5]
      {
        (object) licenseID,
        (object) data,
        (object) email,
        (object) appFriendlyName,
        (object) buildFriendlyNumber
      })[0];
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override WebRequest GetWebRequest(Uri uri)
    {
      int num1 = 3;
      WebRequest webRequest;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            webRequest = base.GetWebRequest(uri);
            num2 = 4;
            break;
          case 1:
          case 4:
            if (!(webRequest is HttpWebRequest httpWebRequest))
              goto label_7;
            else
              goto case 2;
          case 2:
            httpWebRequest.ServicePoint.Expect100Continue = false;
            num2 = 5;
            break;
          case 5:
            goto label_7;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_7:
      return webRequest;
    }

    internal static bool gFBnlP5AUE8eSIWPlwe() => true;

    internal static bool XuCYxp5FVuG8lGCwwuK() => false;
  }
}
