// Decompiled with JetBrains decompiler
// Type: .
// Assembly: file, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71f2cf7c2509b8fe
// MVID: 1F473243-1123-401F-8099-7648B7C34C41
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan-Dropper.Win32.Injector.deqx-3dcf304237ebec8756d9362ccf0259126c1c62ff5c0b09096876be2cdc64ae5a.exe

using \u0008;
using System;
using System.Collections.Generic;

namespace \u0005
{
  internal class \u0002
  {
    private readonly ulong[] \u0001;
    private readonly Dictionary<string, ulong> \u0001;

    public \u0002(ulong[] staticFeatureCounts, Dictionary<string, ulong> dynamicFeatureCounts)
    {
      try
      {
        this.\u0001 = staticFeatureCounts;
        this.\u0001 = dynamicFeatureCounts;
      }
      catch (Exception ex)
      {
        ulong[] o2 = staticFeatureCounts;
        Dictionary<string, ulong> o3 = (object) dynamicFeatureCounts;
        \u0004.\u0002(ex, (object) this, (object) o2, (object) o3);
        throw;
      }
    }

    public Dictionary<string, ulong> DynamicFeatureCounts
    {
      get
      {
        try
        {
          return this.\u0001;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }
    }

    public ulong[] StaticFeatureCounts
    {
      get
      {
        try
        {
          return this.\u0001;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }
    }

    public bool IsEmpty
    {
      get
      {
        try
        {
          do
          {
            int num1 = this.\u0001.Length;
            int num2;
            while (true)
            {
              num2 = num1;
              if (false)
                num1 = num2;
              else
                break;
            }
            if (num2 != 0)
              goto label_6;
          }
          while (false);
          int num = this.\u0001.Count;
          if (true)
            return num == 0;
          goto label_7;
label_6:
          num = 0;
label_7:
          return num != 0;
        }
        catch (Exception ex)
        {
          \u0004.\u0002(ex, (object) this);
          throw;
        }
      }
    }
  }
}
