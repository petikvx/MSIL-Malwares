// Decompiled with JetBrains decompiler
// Type: Tetris.Elements.Board
// Assembly: FileIOPermissionAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DA5B1BA8-E899-4EEF-B0E6-703ED1FF7D5C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c563c22a6ef57303146195f39aba8eff9dff5e46ddc85e05fb6dab4d14543bfa.exe

using Game.Elements;
using System.Drawing;

namespace Tetris.Elements
{
  public class Board : Sprite
  {
    private Image[] _blocks;

    public Board(Resources resources)
      : base((Image) null, Point.Empty)
    {
      this.Block_Size = new Size(40, 40);
      this.Grid_Size = new Size(10, 15);
      Size gridSize = this.Grid_Size;
      int width = gridSize.Width;
      gridSize = this.Grid_Size;
      int height = gridSize.Height;
      this.Matrix = new int[width, height];
      this._blocks = new Image[7]
      {
        resources.Block_Blue,
        resources.Block_Cyan,
        resources.Block_Green,
        resources.Block_Orange,
        resources.Block_Red,
        resources.Block_Violet,
        resources.Block_Yellow
      };
    }

    public Size Block_Size { get; private set; }

    public Size Grid_Size { get; private set; }

    private int[,] Matrix { get; set; }

    public int Lines { get; set; }

    public bool HasBlock(Point location) => location.Y >= this.Grid_Size.Height || location.X >= this.Grid_Size.Width || this.Matrix[location.X, location.Y] > 0;

    public void Add_Block(Block block)
    {
      if (block == null)
        return;
      int index1 = 0;
      while (true)
      {
        int num1 = index1;
        Size matrixSize = block.Matrix_Size;
        int height = matrixSize.Height;
        if (num1 < height)
        {
          int index2 = 0;
          while (true)
          {
            int num2 = index2;
            matrixSize = block.Matrix_Size;
            int width = matrixSize.Width;
            if (num2 < width)
            {
              int num3 = block.Matrix[index1, index2];
              if (num3 > 0)
              {
                Point point;
                ref Point local = ref point;
                int num4 = index2;
                Point location = block.Location;
                int x1 = location.X;
                int x2 = num4 + x1;
                int num5 = index1;
                location = block.Location;
                int y1 = location.Y;
                int y2 = num5 + y1;
                local = new Point(x2, y2);
                this.Matrix[point.X, point.Y] = num3;
              }
              ++index2;
            }
            else
              break;
          }
          ++index1;
        }
        else
          break;
      }
    }

    public void Rotate(Block block, int value)
    {
      if (block == null)
        return;
      Point location = block.Location;
      Size matrixSize1 = block.Matrix_Size;
      block.Rotate(value);
      if (!this.BlockCollition(block, Point.Empty))
        return;
      Size matrixSize2 = block.Matrix_Size;
      block.Location = new Point(block.Location.X - (matrixSize2.Width - matrixSize1.Width), block.Location.Y);
      if (this.BlockCollition(block, Point.Empty))
      {
        block.Rotate(value * -1);
        block.Location = location;
      }
    }

    public bool BlockCollition(Block block, Point locationAdjust)
    {
      if (block == null)
        return true;
      int index1 = 0;
      while (true)
      {
        int num1 = index1;
        Size matrixSize = block.Matrix_Size;
        int height = matrixSize.Height;
        if (num1 < height)
        {
          int index2 = 0;
          while (true)
          {
            int num2 = index2;
            matrixSize = block.Matrix_Size;
            int width = matrixSize.Width;
            if (num2 < width)
            {
              if (block.Matrix[index1, index2] > 0)
              {
                Point location1;
                ref Point local = ref location1;
                Point location2 = block.Location;
                int x = location2.X + index2 + locationAdjust.X;
                location2 = block.Location;
                int y = location2.Y + index1 + locationAdjust.Y;
                local = new Point(x, y);
                if (this.HasBlock(location1))
                  goto label_6;
              }
              ++index2;
            }
            else
              break;
          }
          ++index1;
        }
        else
          goto label_11;
      }
label_6:
      return true;
label_11:
      return false;
    }

    public void CheckLines()
    {
      int index1 = 0;
      while (true)
      {
        int num1 = index1;
        Size gridSize = this.Grid_Size;
        int height = gridSize.Height;
        if (num1 < height)
        {
          int num2 = 0;
          int index2 = 0;
          while (true)
          {
            int num3 = index2;
            gridSize = this.Grid_Size;
            int width = gridSize.Width;
            if (num3 < width)
            {
              int num4 = this.Matrix[index2, index1];
              num2 += num4 > 0 ? 1 : 0;
              ++index2;
            }
            else
              break;
          }
          int num5 = num2;
          gridSize = this.Grid_Size;
          int width1 = gridSize.Width;
          if (num5 == width1)
          {
            ++this.Lines;
            for (int index3 = index1; index3 >= 0; --index3)
            {
              int index4 = 0;
              while (true)
              {
                int num6 = index4;
                gridSize = this.Grid_Size;
                int width2 = gridSize.Width;
                if (num6 < width2)
                {
                  this.Matrix[index4, index3] = index3 <= 0 ? 0 : this.Matrix[index4, index3 - 1];
                  ++index4;
                }
                else
                  break;
              }
            }
          }
          ++index1;
        }
        else
          break;
      }
    }

    public override void Draw(DrawHandler drawHandler)
    {
      int index1 = 0;
      while (true)
      {
        int num1 = index1;
        Size size = this.Grid_Size;
        int width1 = size.Width;
        if (num1 < width1)
        {
          int index2 = 0;
          while (true)
          {
            int num2 = index2;
            size = this.Grid_Size;
            int height1 = size.Height;
            if (num2 < height1)
            {
              int num3 = this.Matrix[index1, index2];
              if (num3 > 0)
              {
                Point position;
                ref Point local = ref position;
                int num4 = index1;
                size = this.Block_Size;
                int width2 = size.Width;
                int x = num4 * width2;
                int num5 = index2;
                size = this.Block_Size;
                int height2 = size.Height;
                int y = num5 * height2;
                local = new Point(x, y);
                Image block = this._blocks[num3 - 1];
                drawHandler.Draw(block, position);
              }
              ++index2;
            }
            else
              break;
          }
          ++index1;
        }
        else
          break;
      }
    }
  }
}
