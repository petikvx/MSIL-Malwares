// Decompiled with JetBrains decompiler
// Type: Cycle_Jump_Game.Game15Logic
// Assembly: cDisplayClas, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89FB05B9-6915-4070-92A1-63732D16ABE9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-0b32f79b8abe4a232193f819dccfa47a922353e961d37d1becd35171c2b04a89.exe

using System;
using System.Drawing;

namespace Cycle_Jump_Game
{
  internal class Game15Logic
  {
    private int[,] arr15;
    private int boxsize;
    private int counter;
    private int arrsize;
    private int zero;
    private bool isWin;

    public int[,] Arr15 => this.arr15;

    public int this[int x, int y] => this.arr15[x, y];

    private Point Zero { set; get; }

    public Game15Logic()
    {
      this.counter = 1;
      this.isWin = true;
      this.zero = 0;
      this.boxsize = 4;
      this.arrsize = this.boxsize * this.boxsize;
      this.arr15 = new int[this.boxsize, this.boxsize];
      for (int index1 = 0; index1 < this.boxsize; ++index1)
      {
        for (int index2 = 0; index2 < this.boxsize; ++index2)
        {
          this.arr15[index1, index2] = this.counter;
          ++this.counter;
        }
      }
      this.arr15[3, 3] = this.zero;
      this.Zero = new Point(3, 3);
    }

    public Point MoveLeft(int x, int y)
    {
      if (y - 1 >= 0)
      {
        this.arr15[x, y] = this.arr15[x, y - 1];
        this.arr15[x, y - 1] = this.zero;
        --y;
      }
      return new Point(x, y);
    }

    public Point MoveRight(int x, int y)
    {
      if (y + 1 < 4)
      {
        this.arr15[x, y] = this.arr15[x, y + 1];
        this.arr15[x, y + 1] = this.zero;
        ++y;
      }
      return new Point(x, y);
    }

    public Point MoveUp(int x, int y)
    {
      if (x - 1 >= 0)
      {
        this.arr15[x, y] = this.arr15[x - 1, y];
        this.arr15[x - 1, y] = this.zero;
        --x;
      }
      return new Point(x, y);
    }

    public Point MoveDown(int x, int y)
    {
      if (x + 1 < 4)
      {
        this.arr15[x, y] = this.arr15[x + 1, y];
        this.arr15[x + 1, y] = this.zero;
        ++x;
      }
      return new Point(x, y);
    }

    public void Rand(int howmanytimes)
    {
      Random random = new Random();
      this.isWin = false;
      int x = this.Zero.X;
      int y = this.Zero.Y;
      for (; howmanytimes != 0; --howmanytimes)
      {
        random.Next(1, 4);
        if (y - 1 >= 0 && random.Next(4) == 1)
        {
          this.arr15[x, y] = this.arr15[x, y - 1];
          this.arr15[x, y - 1] = this.zero;
          --y;
        }
        if (y + 1 < 4 && random.Next(4) == 2)
        {
          this.arr15[x, y] = this.arr15[x, y + 1];
          this.arr15[x, y + 1] = this.zero;
          ++y;
        }
        if (x - 1 >= 0 && random.Next(4) == 3)
        {
          this.arr15[x, y] = this.arr15[x - 1, y];
          this.arr15[x - 1, y] = this.zero;
          --x;
        }
        if (x + 1 < 4 && random.Next(4) == 4)
        {
          this.arr15[x, y] = this.arr15[x + 1, y];
          this.arr15[x + 1, y] = this.zero;
          ++x;
        }
      }
    }

    public bool WinCheck()
    {
      int num = 1;
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4 && num == this.arr15[index1, index2]; ++index2)
          ++num;
      }
      return num == 16;
    }
  }
}
