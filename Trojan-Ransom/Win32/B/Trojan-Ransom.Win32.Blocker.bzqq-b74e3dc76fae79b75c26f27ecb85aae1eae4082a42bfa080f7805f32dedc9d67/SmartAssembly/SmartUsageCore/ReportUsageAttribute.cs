// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartUsageCore.ReportUsageAttribute
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.SmartExceptionsCore;
using System;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace SmartAssembly.SmartUsageCore
{
  [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method)]
  public class ReportUsageAttribute : Attribute
  {
    public ReportUsageAttribute()
    {
      try
      {
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    public ReportUsageAttribute(string featureName)
    {
      try
      {
      }
      catch (Exception ex)
      {
        string o2 = featureName;
        StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
        throw;
      }
    }

    static ReportUsageAttribute()
    {
      try
      {
        DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static int Ⴃ([In] MemberInfo obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 23:
            num2 = 2;
            break;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 6:
              num1 = 1;
              continue;
            case 1:
              goto label_3;
            case 2:
            case 5:
              goto label_8;
            case 7:
              num1 = 1;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ReportUsageAttribute.Ⴃ);
              num1 = 1;
              continue;
          }
        }
label_8:
        return obj0.MetadataToken;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        MemberInfo o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static string Ⴐ([In] Exception obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 115:
            num2 = 4;
            break;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_3;
            case 1:
            case 3:
            case 5:
              num1 = 0;
              continue;
            case 4:
            case 7:
              goto label_8;
            case 6:
              num1 = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ReportUsageAttribute.Ⴐ);
              num1 = 0;
              continue;
          }
        }
label_8:
        return obj0.ToString();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Exception o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static byte[] Ⴍ([In] HashAlgorithm obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 87:
            num2 = 4;
            break;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
            case 5:
              goto label_3;
            case 1:
              num1 = 2;
              continue;
            case 3:
              num1 = 2;
              continue;
            case 4:
            case 7:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ReportUsageAttribute.Ⴍ);
              num1 = 2;
              continue;
          }
        }
label_8:
        return obj0.ComputeHash(obj1);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        HashAlgorithm o2 = obj0;
        byte[] o3 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static Assembly[] Ⴅ([In] AppDomain obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 89:
            num2 = 1;
            break;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              num1 = 4;
              continue;
            case 1:
            case 3:
            case 6:
              goto label_8;
            case 4:
              goto label_3;
            case 5:
              num1 = 4;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ReportUsageAttribute.Ⴅ);
              num1 = 4;
              continue;
          }
        }
label_8:
        return obj0.GetAssemblies();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        AppDomain o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static AppDomain Ⴗ([In] int obj0, [In] int obj1)
    {
label_0:
      try
      {
        switch ((obj1 ^ obj0) - 116)
        {
          case 0:
            return AppDomain.CurrentDomain;
          default:
            goto label_0;
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) obj1;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
        throw;
      }
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴈ
    {
      internal IWebProxy Ⴍ;
      internal EventHandler Ⴃ;
      internal SendingReportFeedbackEventHandler Ⴅ;
    }
  }
}
