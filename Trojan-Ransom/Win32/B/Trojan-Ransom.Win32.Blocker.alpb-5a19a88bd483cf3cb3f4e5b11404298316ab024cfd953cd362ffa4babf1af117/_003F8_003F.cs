// Decompiled with JetBrains decompiler
// Type: ?1?.?8?
// Assembly: 1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 569994DA-E70A-49A4-8B1F-3DD27F439F3F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.alpb-5a19a88bd483cf3cb3f4e5b11404298316ab024cfd953cd362ffa4babf1af117.exe

using \u003F1\u003F;
using System;
using System.Reflection;
using System.Reflection.Emit;

namespace \u003F1\u003F
{
  internal class \u003F8\u003F
  {
    private static readonly int \u003F1\u003F;
    private static readonly ModuleHandle \u003F5\u003F;

    static \u003F8\u003F()
    {
      if ((object) typeof (MulticastDelegate) == null)
        return;
label_1:
      switch (5)
      {
        case 0:
          goto label_1;
        default:
          if (false)
            goto label_5;
label_3:
          \u003F8\u003F.\u003F5\u003F = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
          break;
label_5:
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F8\u003F.\u002Ecctor);
          goto label_3;
      }
    }

    public static void \u003F4\u003F(int _param0, int _param1, int _param2)
    {
      Type typeFromHandle;
      ConstructorInfo con;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(\u003F8\u003F.\u003F5\u003F.ResolveTypeHandle(_param0));
        object methodFromHandle;
        if (_param2 == 16777215)
        {
label_1:
          switch (4)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F8\u003F.\u003F4\u003F);
              }
              methodFromHandle = (object) MethodBase.GetMethodFromHandle(\u003F8\u003F.\u003F5\u003F.ResolveMethodHandle(_param1));
              break;
          }
        }
        else
          methodFromHandle = (object) MethodBase.GetMethodFromHandle(\u003F8\u003F.\u003F5\u003F.ResolveMethodHandle(_param1), \u003F8\u003F.\u003F5\u003F.ResolveTypeHandle(_param2));
        con = (ConstructorInfo) methodFromHandle;
      }
      catch (Exception ex)
      {
        throw;
      }
      foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        try
        {
          ParameterInfo[] parameters = con.GetParameters();
          int length = parameters.Length;
          Type[] parameterTypes = new Type[length];
          for (int index = 0; index < length; ++index)
            parameterTypes[index] = parameters[index].ParameterType;
          DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, con.DeclaringType, parameterTypes, typeFromHandle, true);
          ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
          if (length > 0)
            ilGenerator.Emit(OpCodes.Ldarg_0);
          if (length > 1)
            ilGenerator.Emit(OpCodes.Ldarg_1);
          if (length > 2)
          {
label_18:
            switch (4)
            {
              case 0:
                goto label_18;
              default:
                ilGenerator.Emit(OpCodes.Ldarg_2);
                break;
            }
          }
          if (length > 3)
            ilGenerator.Emit(OpCodes.Ldarg_3);
          if (length > 4)
          {
            for (int index = 4; index < length; ++index)
              ilGenerator.Emit(OpCodes.Ldarg_S, index);
label_26:
            switch (7)
            {
              case 0:
                goto label_26;
            }
          }
          ilGenerator.Emit(OpCodes.Newobj, con);
          ilGenerator.Emit(OpCodes.Ret);
          Delegate @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
          field.SetValue((object) null, (object) @delegate);
        }
        catch (Exception ex)
        {
        }
      }
    }
  }
}
