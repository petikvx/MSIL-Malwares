// Decompiled with JetBrains decompiler
// Type: CiscoAnyconnectControl.UI.App
// Assembly: ManifestRun, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F910C343-B25B-42E2-BE50-B00E2DD875A1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-d46778151a7c8f1cb090cf952dadb97acfa1c17e4a6276d44f33547b4bec37e1.exe

using CiscoAnyconnectControl.Model;
using CiscoAnyconnectControl.UI.Utility;
using CiscoAnyconnectControl.UI.View;
using CiscoAnyconnectControl.Utility;
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Threading;
using System.Windows;
using System.Windows.Threading;

namespace CiscoAnyconnectControl.UI
{
  public class App : Application
  {
    private Mutex _mutex;
    private EventWaitHandle _evtShowWindow;
    private readonly CancellationTokenSource _ctsExiting = new CancellationTokenSource();
    private bool _contentLoaded;

    private string EventWaitHandleShowWindowName => "jannesp.ciscoanyconnectcontrol.evt_showwindow";

    protected override void OnStartup(StartupEventArgs e)
    {
      bool flag1 = false;
      bool flag2 = this.CheckIfFirstInstance();
      bool flag3 = OSUtil.Instance.IsElevatedProcess();
      bool flag4 = false;
      try
      {
        ServiceUtil.Uninstall("CiscoAnyconnectControlServer");
      }
      catch (Exception ex)
      {
      }
      foreach (string str1 in e.Args)
      {
        Trace.TraceInformation("Parsing arg: {0} ...", (object) str1);
        string str2 = str1;
        if (!(str2 == "-tray"))
        {
          if (str2 == "-unsafeRunAsUser")
            flag4 = true;
          else
            Trace.TraceInformation("Arg: \"{0}\" is not implemented and got ignored.", (object) str1);
        }
        else
        {
          if (flag2)
            OSUtil.Instance.ShowTrayIcon();
          flag1 = true;
        }
      }
      if (!flag2)
      {
        try
        {
          this._evtShowWindow = EventWaitHandle.OpenExisting(this.EventWaitHandleShowWindowName);
          this._evtShowWindow.Set();
          this._evtShowWindow.Dispose();
          this._evtShowWindow = (EventWaitHandle) null;
          Trace.TraceInformation("Showed existing instance and exiting ...");
        }
        catch (Exception ex)
        {
          Util.TraceException("Error showing existing instance", ex);
          int num = (int) MessageBox.Show("Another instance is already running but there was an error showing that.");
        }
        Application.Current.Shutdown(-2);
      }
      else
      {
        try
        {
          bool createdNew;
          this._evtShowWindow = new EventWaitHandle(false, EventResetMode.ManualReset, this.EventWaitHandleShowWindowName, out createdNew);
          if (!createdNew)
          {
            this._evtShowWindow.Set();
            Application.Current.Shutdown(0);
            return;
          }
        }
        catch (Exception ex)
        {
          Util.TraceException("Error creating mutex for showwindow", ex);
        }
        if (!flag3)
        {
          if (flag4)
          {
            Trace.TraceWarning("Starting without elevated permissions.");
          }
          else
          {
            int num = (int) MessageBox.Show("This program 'needs' to be run as administrator.\nContact me if you really need to run it without.");
            Application.Current.Shutdown(-4);
            return;
          }
        }
        if (flag3 && OSUtil.Instance.IsCiscoAutostartEnabled())
        {
          if (MessageBox.Show("Cisco UI Autostart found. This doesn't work together with this program.\nDo you want to disable it? This program will exit if you don't.", "CiscoAnyconnectControl", MessageBoxButton.YesNo) == MessageBoxResult.Yes)
          {
            OSUtil.Instance.DisableCiscoAutostart();
          }
          else
          {
            Trace.TraceInformation("User denied disabling of cisco autostart. Exiting ...");
            Application.Current.Shutdown(-3);
            return;
          }
        }
        if (!flag1)
        {
          this.CreateAndOrShowMainWindow();
          OSUtil.Instance.ShowTrayIcon();
        }
        Application.Current.ShutdownMode = ShutdownMode.OnExplicitShutdown;
        Application.Current.DispatcherUnhandledException += new DispatcherUnhandledExceptionEventHandler(this.Current_DispatcherUnhandledException);
        OSUtil.Instance.TrayIconDoubleClick += new EventHandler(this.App_TrayIconDoubleClick);
        OSUtil.Instance.TrayExitClick += new EventHandler(this.App_TrayExitClick);
        base.OnStartup(e);
      }
    }

    private void App_TrayExitClick(object sender, EventArgs e) => Application.Current.Shutdown(0);

    private void CreateAndOrShowMainWindow()
    {
      if (Application.Current.MainWindow == null)
      {
        MainWindow mainWindow = new MainWindow();
        mainWindow.Show();
        mainWindow.Closed += new EventHandler(this.Window_Closed);
        Application.Current.MainWindow = (Window) mainWindow;
      }
      else
      {
        if (Application.Current.MainWindow.WindowState == WindowState.Minimized)
          Application.Current.MainWindow.WindowState = WindowState.Normal;
        Application.Current.MainWindow.Activate();
      }
    }

    private void App_TrayIconDoubleClick(object sender, EventArgs e) => this.CreateAndOrShowMainWindow();

    private bool CheckIfFirstInstance()
    {
      this._mutex = new Mutex(false, "e35d4009-816a-454f-80cc-190e27f95384");
      try
      {
        if (!this._mutex.WaitOne(0, false))
          return false;
      }
      catch (Exception ex)
      {
        Util.TraceException("Exception creating mutex.", ex);
      }
      return true;
    }

    private void Current_DispatcherUnhandledException(
      object sender,
      DispatcherUnhandledExceptionEventArgs e)
    {
      try
      {
        OSUtil.Instance.HideTrayIcon();
      }
      catch (Exception ex)
      {
        Util.TraceException("Unhandled exception in unhandled exception handler.", ex);
      }
      finally
      {
        this._mutex?.Dispose();
        this._mutex = (Mutex) null;
      }
    }

    private void Window_Closed(object sender, EventArgs e)
    {
    }

    protected override void OnExit(ExitEventArgs e)
    {
      OSUtil.Instance.HideTrayIcon();
      this._ctsExiting.Cancel();
      this._evtShowWindow?.Set();
      this._mutex?.Dispose();
      this._mutex = (Mutex) null;
      this._evtShowWindow?.Dispose();
      this._evtShowWindow = (EventWaitHandle) null;
      this._ctsExiting?.Dispose();
      VpnStatusModel.Instance.Dispose();
      base.OnExit(e);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/ManifestRun;component/app.xaml", UriKind.Relative));
    }

    [STAThread]
    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public static void Main()
    {
      App app = new App();
      app.InitializeComponent();
      app.Run();
    }

    private enum ErrorCode
    {
      NotElevated = -4, // 0xFFFFFFFC
      CiscoAutostartDetected = -3, // 0xFFFFFFFD
      NotFirstInstance = -2, // 0xFFFFFFFE
      FailedIpc = -1, // 0xFFFFFFFF
    }
  }
}
