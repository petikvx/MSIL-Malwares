// Decompiled with JetBrains decompiler
// Type: C5vXuJJXlKLsz.ihsplD1QXK7uN
// Assembly: Udby4Jt48oXkJ, Version=3.17.2.31, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 37899E89-D673-4F5B-A193-2E4DF6A54096
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-bf535869266eca7a958714acade2ede1bff0e73f0aaa2702f389ededee6a8d6a.exe

using \u0036xr5a7sxzxNSK;
using JfsUqX2laJ6sV;
using MHiOg6fwx46w5;
using Microsoft.Win32.SafeHandles;
using System;
using System.Globalization;
using System.IdentityModel.Tokens;
using System.Security;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Permissions;
using System.Text;
using znVoO82LrsYAA;

namespace C5vXuJJXlKLsz
{
  internal class ihsplD1QXK7uN
  {
    public static string MSuw3KhqLAYoY(string _param0)
    {
      if (string.IsNullOrEmpty(_param0))
        return (string) null;
      using (SHA256Cng shA256Cng = new SHA256Cng())
      {
        UTF8Encoding utF8Encoding = new UTF8Encoding();
        return Convert.ToBase64String(shA256Cng.ComputeHash(utF8Encoding.GetBytes(_param0)));
      }
    }

    public byte[] H7dsunZUcGdT2(string uXuIoABL415BM, X509Certificate2 slsxVNtUFVQb4)
    {
      if (slsxVNtUFVQb4.PublicKey.Key.KeySize < UULecykyYNqFp.UyhO0NSC4AMXx)
        throw new ArgumentOutOfRangeException("certificate", string.Format((IFormatProvider) CultureInfo.InvariantCulture, "The certificate used must have a key size of at least {0} bits", new object[1]
        {
          (object) UULecykyYNqFp.UyhO0NSC4AMXx
        }));
      byte[] bytes = Encoding.UTF8.GetBytes(uXuIoABL415BM);
      RSA asymmetricAlgorithm = new X509AsymmetricSecurityKey(slsxVNtUFVQb4).GetAsymmetricAlgorithm("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256", true) as RSA;
      RSACryptoServiceProvider cryptoServiceProvider = (RSACryptoServiceProvider) null;
      try
      {
        if (asymmetricAlgorithm is RSACryptoServiceProvider m3rs3SQKYM9kD)
        {
          cryptoServiceProvider = ihsplD1QXK7uN.\u0036ovuREnIPLoUE(m3rs3SQKYM9kD);
          using (SHA256Cng halg = new SHA256Cng())
            return cryptoServiceProvider.SignData(bytes, (object) halg);
        }
        else
        {
          using (Kunffe8iUZ5db kunffe8iUz5db = new Kunffe8iUZ5db(ihsplD1QXK7uN.tPGMlEWb1TYTP(slsxVNtUFVQb4)))
          {
            kunffe8iUz5db.b0d21TBxV5kVk = CngAlgorithm.Sha256;
            return kunffe8iUz5db.dOSpa6tJ197gU(bytes);
          }
        }
      }
      finally
      {
        if (cryptoServiceProvider != null && asymmetricAlgorithm != cryptoServiceProvider)
          cryptoServiceProvider.Dispose();
      }
    }

    private static RSACryptoServiceProvider \u0036ovuREnIPLoUE(
      RSACryptoServiceProvider m3rs3SQKYM9kD)
    {
      if (m3rs3SQKYM9kD.CspKeyContainerInfo.ProviderType != 1 && m3rs3SQKYM9kD.CspKeyContainerInfo.ProviderType != 12 || m3rs3SQKYM9kD.CspKeyContainerInfo.HardwareDevice)
        return m3rs3SQKYM9kD;
      CspParameters parameters = new CspParameters()
      {
        ProviderType = 24,
        KeyContainerName = m3rs3SQKYM9kD.CspKeyContainerInfo.KeyContainerName,
        KeyNumber = (int) m3rs3SQKYM9kD.CspKeyContainerInfo.KeyNumber
      };
      if (m3rs3SQKYM9kD.CspKeyContainerInfo.MachineKeyStore)
        parameters.Flags = CspProviderFlags.UseMachineKeyStore;
      parameters.Flags |= CspProviderFlags.UseExistingKey;
      return new RSACryptoServiceProvider(parameters);
    }

    [SecurityCritical]
    public static CngKey tPGMlEWb1TYTP(X509Certificate2 MRYb0sbCOFgJz)
    {
      using (fkQr9MD3HnJLb laGhW5K0EyyKG = ihsplD1QXK7uN.Q87Fwkv4JoN71((X509Certificate) MRYb0sbCOFgJz))
      {
        using (SafeNCryptKeyHandle keyHandle = sIpSo5IUmPrf9.DPztQkxumg1D3(laGhW5K0EyyKG))
        {
          new PermissionSet(PermissionState.Unrestricted).Assert();
          return CngKey.Open(keyHandle, CngKeyHandleOpenOptions.None);
        }
      }
    }

    [SecurityCritical]
    public static fkQr9MD3HnJLb Q87Fwkv4JoN71(X509Certificate Wmf5IQ5wp8KeN)
    {
      fkQr9MD3HnJLb fkQr9Md3HnJlb = sIpSo5IUmPrf9.qVxM2Vct3k4WQ(Wmf5IQ5wp8KeN.Handle);
      GC.KeepAlive((object) Wmf5IQ5wp8KeN);
      return fkQr9Md3HnJlb;
    }
  }
}
