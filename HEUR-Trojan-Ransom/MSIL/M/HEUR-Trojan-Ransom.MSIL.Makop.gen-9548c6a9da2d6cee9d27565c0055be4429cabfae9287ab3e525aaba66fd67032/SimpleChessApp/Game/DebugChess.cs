// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: p的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E9517A17-41D2-4860-BC69-C7D574C89AF9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-9548c6a9da2d6cee9d27565c0055be4429cabfae9287ab3e525aaba66fd67032.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board)
    {
label_1:
      int num1 = -1148697679;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1575424957)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1469801066 ^ 1864531012;
            continue;
          case 3:
            num1 = (int) num2 * 1116749270 ^ -329163060;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.b = board;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = 44780217;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1996870882)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -1008097777 ^ -1365331408;
            continue;
          case 1:
            this.b.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * 780427410 ^ -952835113;
            continue;
          case 3:
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -319410218 ^ -1742819993;
            continue;
          case 4:
            num1 = (int) num2 * 236435841 ^ -1864511632;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * -1683691890 ^ 649668856;
            continue;
          case 7:
            num1 = (int) num2 * -1601485069 ^ -330707551;
            continue;
          case 8:
            this.b.DisableTurns = true;
            num1 = 466210695;
            continue;
          case 9:
            int num3 = flag ? -1299418832 : (num3 = -35011554);
            num1 = num3 ^ (int) num2 * -360647169;
            continue;
          case 10:
            this.b.ClearBoard();
            flag = x == Pieces.King;
            num1 = (int) num2 * 25736503 ^ 361040181;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      this.b.lights.FindAllMoves();
    }

    internal void TestPassant()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -866289662;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -438947731)) % 12U)
        {
          case 0:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 1692204756 ^ 812472801;
            continue;
          case 1:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * -2054854336 ^ 20685169;
            continue;
          case 2:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * 1190944087 ^ 1934359532;
            continue;
          case 3:
            this.b.DisableTurns = true;
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * 1562176527 ^ -1795335479;
            continue;
          case 4:
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * -1585364693 ^ -4537712;
            continue;
          case 5:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -918623101 ^ -572340918;
            continue;
          case 6:
            goto label_3;
          case 7:
            num1 = (int) num2 * 1658383585 ^ -2124114013;
            continue;
          case 8:
            num1 = (int) num2 * -1062580623 ^ 2120743107;
            continue;
          case 9:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 1154420854 ^ -170924120;
            continue;
          case 10:
            goto label_1;
          case 11:
            num1 = (int) num2 * 647340288 ^ 1301784383;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = 1685727257;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1799287564)) % 11U)
        {
          case 0:
            this.b.addWhite(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 1165686686 ^ 1990287752;
            continue;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * 1612745982 ^ 344306187;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 776308312 ^ 1115471097;
            continue;
          case 4:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * 83924035 ^ -1370349501;
            continue;
          case 5:
            num1 = (int) num2 * -1233102001 ^ -232542954;
            continue;
          case 6:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1589955318 ^ -1880536619;
            continue;
          case 7:
            num1 = (int) num2 * 997627542 ^ -1302023088;
            continue;
          case 8:
            goto label_1;
          case 9:
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * -581466405 ^ -1577133677;
            continue;
          case 10:
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * 279404933 ^ -1153746014;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 1081557582;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 981574745)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1520102299 ^ 1753261552;
            continue;
          case 2:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 642684033 ^ 477362747;
            continue;
          case 3:
            this.b.DisableTurns = true;
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 1542594790 ^ 1276452368;
            continue;
          case 4:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 134553298 ^ 162499932;
            continue;
          case 5:
            num1 = (int) num2 * 56325671 ^ 2023800552;
            continue;
          case 6:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 26974405 ^ -483767516;
            continue;
          case 7:
            goto label_3;
          case 8:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * 1802821049 ^ 1920319032;
            continue;
          case 9:
            num1 = (int) num2 * 390888350 ^ 169829837;
            continue;
          case 10:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * 442301150 ^ -1136486352;
            continue;
          case 11:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -1825363725 ^ 577685274;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 1978569502;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 621524732)) % 9U)
        {
          case 0:
            goto label_3;
          case 1:
            this.b.addBlack(0, 4, Pieces.Bishop);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1928999364 ^ 1419732026;
            continue;
          case 2:
            num1 = (int) num2 * 789424232 ^ -1623906020;
            continue;
          case 3:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -177132409 ^ 471347461;
            continue;
          case 4:
            num1 = (int) num2 * 392778949 ^ -961489991;
            continue;
          case 5:
            this.b.ClearBoard();
            num1 = (int) num2 * -332505046 ^ 747044558;
            continue;
          case 6:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * -498317654 ^ 1231174154;
            continue;
          case 7:
            num1 = (int) num2 * 74588661 ^ -203647201;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    internal void TestCheck()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -1508995973;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -712558230)) % 7U)
        {
          case 0:
            num1 = (int) num2 * -737725605 ^ 1452462989;
            continue;
          case 1:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * -411800409 ^ -533485239;
            continue;
          case 2:
            num1 = (int) num2 * -1834047921 ^ -891034313;
            continue;
          case 3:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 1186069129 ^ -1609584782;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 421919799 ^ -1668172603;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = -788838122;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -391333761)) % 15U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 138784814 ^ 129517486;
            continue;
          case 2:
            num1 = (int) num2 * 530142301 ^ -2042453209;
            continue;
          case 3:
            this.b.addWhite(4, 0, Pieces.King);
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -1231533011 ^ 756298355;
            continue;
          case 4:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -1678393689 ^ -124358866;
            continue;
          case 5:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * 439724373 ^ 1258270633;
            continue;
          case 6:
            num1 = (int) num2 * -512321172 ^ -1699705850;
            continue;
          case 7:
            this.b.DisableTurns = true;
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * -1951290626 ^ -428069262;
            continue;
          case 8:
            num1 = (int) num2 * -2015743739 ^ 1257553170;
            continue;
          case 9:
            this.b.ClearBoard();
            num1 = (int) num2 * 386532970 ^ -390415208;
            continue;
          case 10:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 897920820 ^ -1752753081;
            continue;
          case 11:
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * -1408527117 ^ 1521599455;
            continue;
          case 12:
            goto label_3;
          case 13:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * 1161452459 ^ 1391852509;
            continue;
          case 14:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -1058153699 ^ -1661646157;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }
  }
}
