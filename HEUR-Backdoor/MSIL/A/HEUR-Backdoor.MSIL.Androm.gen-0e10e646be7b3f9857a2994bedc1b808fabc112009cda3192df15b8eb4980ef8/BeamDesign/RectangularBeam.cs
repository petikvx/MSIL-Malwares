// Decompiled with JetBrains decompiler
// Type: BeamDesign.RectangularBeam
// Assembly: MuiResourceTypeIdIntEn, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2C7C9528-88C0-45FF-AB6A-2AC0C29EABCB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0e10e646be7b3f9857a2994bedc1b808fabc112009cda3192df15b8eb4980ef8.exe

using System;

namespace BeamDesign
{
  public abstract class RectangularBeam
  {
    private double mu;
    private double b;
    private double d;
    private double fy;
    private double fc;
    private double As;
    private double h;
    private double a;

    protected double Mu
    {
      private set => this.mu = value * Math.Pow(10.0, 6.0);
      get => this.mu;
    }

    public double D
    {
      protected set => this.d = value > 0.0 ? Math.Round(value, 5) : 0.0;
      get => this.d;
    }

    protected double B
    {
      private set => this.b = value;
      get => this.b;
    }

    protected double Fy
    {
      private set => this.fy = value;
      get => this.fy;
    }

    protected double Fc
    {
      private set => this.fc = value;
      get => this.fc;
    }

    public double AreaS
    {
      protected set => this.As = Math.Round(value, 5);
      get => this.As;
    }

    public double H
    {
      protected set => this.h = Math.Round(value, 5);
      get => this.h;
    }

    public double A
    {
      protected set => this.a = Math.Round(value, 5);
      get => this.a;
    }

    public RectangularBeam()
    {
    }

    public RectangularBeam(double Mu, double B, double H, double A, double Fy, double Fc)
    {
      this.Mu = Mu;
      this.B = B;
      this.D = H - A;
      this.Fy = Fy;
      this.Fc = Fc;
    }

    public RectangularBeam(double Mu, double B, double Fy, double Fc)
      : this(Mu, B, 0.0, 0.0, Fy, Fc)
    {
    }

    protected abstract double AlphaCalc();

    protected double Beta1Calc() => this.Fc <= 30.0 ? 0.85 : 0.85 - 0.007 * (this.Fc - 30.0);

    protected double GammazeroCalc() => 1.0 - 0.5 * this.AlphaCalc();
  }
}
