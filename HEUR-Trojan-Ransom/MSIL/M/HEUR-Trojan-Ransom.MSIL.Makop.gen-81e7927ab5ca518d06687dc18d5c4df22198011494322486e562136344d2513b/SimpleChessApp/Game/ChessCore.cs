// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: 司6, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E96108F1-63B0-49D9-ABCC-EB6314F0AFE2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-81e7927ab5ca518d06687dc18d5c4df22198011494322486e562136344d2513b.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
label_1:
      int num1 = 1963238446;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 87443564)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            this.ChessBoard = b;
            num1 = (int) num2 * -1137680592 ^ -1207111453;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.resetFlags();
    }

    public ChessCore()
    {
label_1:
      int num1 = -1010988695;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1209873176)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -1938802924 ^ 824101142;
            continue;
          case 2:
            num1 = (int) num2 * 1066466543 ^ -1529823182;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public void RestartGame()
    {
label_1:
      int num1 = 408418443;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 464624269)) % 3U)
        {
          case 1:
            this.resetFlags();
            num1 = (int) num2 * 122632953 ^ 937083912;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      this.ChessBoard.Restart();
    }

    private void resetFlags(bool turn = false)
    {
label_1:
      int num1 = -1638423587;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -147795484)) % 5U)
        {
          case 0:
            this.TurnId = 1;
            num1 = (int) num2 * -2096700801 ^ -286393180;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.WhosPlaying = PieceColor.White;
            num1 = (int) num2 * 1803216663 ^ -1679414604;
            continue;
          case 4:
            this.DisableTurn = turn;
            num1 = (int) num2 * 675509996 ^ 1906913967;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      this.lastCheckPiece = (Square) null;
      this.Turns.Clear();
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 474898727;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 754236766)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 503271430 ^ -1041741032;
            continue;
          case 1:
            new DebugChess(this.ChessBoard).TestPassant();
            num1 = (int) num2 * 1972971499 ^ 1391911713;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      this.resetFlags(true);
    }

    internal void TestSinglePiece(Pieces x)
    {
      new DebugChess(this.ChessBoard).TestSinglePiece(x);
label_1:
      int num1 = 82605406;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1923748051)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * -2095099111 ^ -556293311;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 33294383 ^ -1432827168;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCastling()
    {
label_1:
      int num1 = 1966663904;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 181797453)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).TestCastling();
            this.resetFlags(true);
            num1 = (int) num2 * -2062174462 ^ -858187295;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = -1238745239;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1151361169)) % 5U)
        {
          case 0:
            num1 = (int) num2 * 910347231 ^ -1054520002;
            continue;
          case 1:
            new DebugChess(this.ChessBoard).TestCheck();
            num1 = (int) num2 * -529148650 ^ -2099512495;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 1265288792 ^ -1935789149;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestDiscoverCheck()
    {
      new DebugChess(this.ChessBoard).TestDiscoverCheck();
label_1:
      int num1 = -1024502986;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1132959472)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -1450227152 ^ -681098996;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      this.resetFlags(true);
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = 381028435;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1307617230)) % 6U)
        {
          case 0:
            goto label_3;
          case 1:
            new DebugChess(this.ChessBoard).TestPromotion();
            num1 = (int) num2 * -760086194 ^ -1303665013;
            continue;
          case 2:
            num1 = (int) num2 * -814409271 ^ 1396097188;
            continue;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * 1027287583 ^ -1865488129;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -1239478353 ^ 839715326;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void CheckOnCastling()
    {
      new DebugChess(this.ChessBoard).CheckOnCastling();
label_1:
      int num1 = 762275247;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1291264538)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 453237329 ^ 560495794;
            continue;
          case 2:
            num1 = (int) num2 * -1469740942 ^ 17461491;
            continue;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * -1837107304 ^ 770549619;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }
  }
}
