// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.DemultiplexingClientMessageFormatter
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.ServiceModel.Channels;

namespace System.ServiceModel.Dispatcher
{
  internal class DemultiplexingClientMessageFormatter : IClientMessageFormatter
  {
    private IClientMessageFormatter defaultFormatter;
    private Dictionary<WebContentFormat, IClientMessageFormatter> formatters;
    private string supportedFormats;

    public DemultiplexingClientMessageFormatter(
      IDictionary<WebContentFormat, IClientMessageFormatter> formatters,
      IClientMessageFormatter defaultFormatter)
    {
      if (formatters == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (formatters));
      this.formatters = new Dictionary<WebContentFormat, IClientMessageFormatter>();
      foreach (WebContentFormat key in (IEnumerable<WebContentFormat>) formatters.Keys)
        this.formatters.Add(key, formatters[key]);
      this.defaultFormatter = defaultFormatter;
    }

    public object DeserializeReply(Message message, object[] parameters)
    {
      if (message == null)
        return (object) null;
      WebContentFormat format;
      IClientMessageFormatter defaultFormatter;
      if (DemultiplexingDispatchMessageFormatter.TryGetEncodingFormat(message, out format))
      {
        this.formatters.TryGetValue(format, out defaultFormatter);
        if (defaultFormatter == null)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.UnrecognizedHttpMessageFormat, (object) format, (object) this.GetSupportedFormats())));
        }
      }
      else
      {
        defaultFormatter = this.defaultFormatter;
        if (defaultFormatter == null)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.MessageFormatPropertyNotFound3)));
        }
      }
      return defaultFormatter.DeserializeReply(message, parameters);
    }

    public Message SerializeRequest(MessageVersion messageVersion, object[] parameters) => throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.SerializingRequestNotSupportedByFormatter, (object) this)));

    private string GetSupportedFormats()
    {
      if (this.supportedFormats == null)
        this.supportedFormats = DemultiplexingDispatchMessageFormatter.GetSupportedFormats((IEnumerable<WebContentFormat>) this.formatters.Keys);
      return this.supportedFormats;
    }
  }
}
