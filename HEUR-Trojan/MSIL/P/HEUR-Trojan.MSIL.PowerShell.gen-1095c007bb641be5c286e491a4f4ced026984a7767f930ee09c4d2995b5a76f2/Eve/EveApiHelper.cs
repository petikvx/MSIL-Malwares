// Decompiled with JetBrains decompiler
// Type: HeavyDuck.Eve.EveApiHelper
// Assembly: RemotingFieldCachedD, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EDD4CF72-357A-47DC-BB8E-50FC31FC092E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-1095c007bb641be5c286e491a4f4ced026984a7767f930ee09c4d2995b5a76f2.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.XPath;

namespace HeavyDuck.Eve
{
  public static class EveApiHelper
  {
    private const string API_CHAR_ASSETLIST = "/char/AssetList.xml.aspx";
    private const string API_CORP_ASSETLIST = "/corp/AssetList.xml.aspx";
    private static readonly Regex m_regexAspx = new Regex("\\.aspx$");
    private static readonly UTF8Encoding m_encoding = new UTF8Encoding(false);
    public static readonly Uri DefaultApiRoot = new Uri("http://api.eve-online.com/");
    private static Uri m_apiRoot = EveApiHelper.DefaultApiRoot;

    public static Uri ApiRoot
    {
      get => EveApiHelper.m_apiRoot;
      set => EveApiHelper.m_apiRoot = value;
    }

    public static CacheResult GetCharacters(int userID, string apiKey) => EveApiHelper.QueryApi("/account/Characters.xml.aspx", (IDictionary<string, string>) EveApiHelper.GetAccountParameters(userID, apiKey));

    public static CacheResult GetCharacterSheet(
      int userID,
      string apiKey,
      int characterID)
    {
      return EveApiHelper.QueryApi("/char/CharacterSheet.xml.aspx", (IDictionary<string, string>) EveApiHelper.GetCharacterParameters(userID, apiKey, characterID));
    }

    public static CacheResult GetCharacterAssetList(
      int userID,
      string apiKey,
      int characterID)
    {
      return EveApiHelper.QueryApi("/char/AssetList.xml.aspx", (IDictionary<string, string>) EveApiHelper.GetCharacterParameters(userID, apiKey, characterID));
    }

    public static CacheResult CheckCharacterAssetList(
      int userID,
      string apiKey,
      int characterID)
    {
      return EveApiHelper.CheckApi("/char/AssetList.xml.aspx", (IDictionary<string, string>) EveApiHelper.GetCharacterParameters(userID, apiKey, characterID));
    }

    public static CacheResult GetCorporationAssetList(
      int userID,
      string apiKey,
      int characterID,
      int corporationID)
    {
      return EveApiHelper.QueryApi("/corp/AssetList.xml.aspx", (IDictionary<string, string>) EveApiHelper.GetCorporationParameters(userID, apiKey, characterID, corporationID));
    }

    public static CacheResult CheckCorporationAssetList(
      int userID,
      string apiKey,
      int characterID,
      int corporationID)
    {
      return EveApiHelper.CheckApi("/corp/AssetList.xml.aspx", (IDictionary<string, string>) EveApiHelper.GetCorporationParameters(userID, apiKey, characterID, corporationID));
    }

    private static Dictionary<string, string> GetAccountParameters(
      int userID,
      string apiKey)
    {
      return new Dictionary<string, string>()
      {
        [nameof (userID)] = userID.ToString(),
        [nameof (apiKey)] = apiKey,
        ["version"] = "2"
      };
    }

    private static Dictionary<string, string> GetCharacterParameters(
      int userID,
      string apiKey,
      int characterID)
    {
      return new Dictionary<string, string>()
      {
        [nameof (userID)] = userID.ToString(),
        [nameof (apiKey)] = apiKey,
        [nameof (characterID)] = characterID.ToString(),
        ["version"] = "2"
      };
    }

    private static Dictionary<string, string> GetCorporationParameters(
      int userID,
      string apiKey,
      int characterID,
      int corporationID)
    {
      return new Dictionary<string, string>()
      {
        [nameof (userID)] = userID.ToString(),
        [nameof (apiKey)] = apiKey,
        [nameof (characterID)] = characterID.ToString(),
        [nameof (corporationID)] = corporationID.ToString(),
        ["version"] = "2"
      };
    }

    public static CacheResult CheckApi(
      string apiPath,
      IDictionary<string, string> parameters)
    {
      return Resources.IsFileCached(EveApiHelper.GetCachePath(apiPath, parameters), (ICacheStrategy) new EveApiHelper.EveApiCacheStrategy());
    }

    public static CacheResult QueryApi(
      string apiPath,
      IDictionary<string, string> parameters)
    {
      string cachePath = EveApiHelper.GetCachePath(apiPath, parameters);
      ICacheStrategy cacheStrategy = (ICacheStrategy) new EveApiHelper.EveApiCacheStrategy();
      return Resources.CacheFilePost(new Uri(EveApiHelper.m_apiRoot, apiPath).ToString(), cachePath, cacheStrategy, (IEnumerable<KeyValuePair<string, string>>) parameters, (PostDownloadAction) (tempPath =>
      {
        using (FileStream fileStream = File.Open(tempPath, FileMode.Open, FileAccess.Read))
        {
          XPathNavigator navigator = new XPathDocument((Stream) fileStream).CreateNavigator();
          XPathNavigator xpathNavigator = navigator.SelectSingleNode("/eveapi/error");
          if (xpathNavigator != null)
            throw new EveApiException(xpathNavigator.SelectSingleNode("@code").ValueAsInt, xpathNavigator.Value);
          if (navigator.SelectSingleNode("/eveapi") == null)
            throw new EveApiException(0, "No valid eveapi XML found in response.");
        }
      }));
    }

    private static DateTime ReadCachedUntil(string filePath)
    {
      using (FileStream fileStream = File.Open(filePath, FileMode.Open, FileAccess.Read))
        return TimeZone.CurrentTimeZone.ToLocalTime(DateTime.Parse(new XPathDocument((Stream) fileStream).CreateNavigator().SelectSingleNode("/eveapi/cachedUntil").Value, (IFormatProvider) CultureInfo.InvariantCulture));
    }

    private static string GetCachePath(string apiPath, IDictionary<string, string> parameters)
    {
      if (string.IsNullOrEmpty(apiPath))
        throw new ArgumentNullException(nameof (apiPath));
      string input = apiPath.StartsWith("/") ? apiPath.Substring(1) : apiPath;
      string str = EveApiHelper.m_regexAspx.Replace(input, "").Replace('/', '.');
      string parameterHash = Resources.ComputeParameterHash((IEnumerable<KeyValuePair<string, string>>) parameters);
      string path = Path.Combine(Resources.CacheRoot, str.Insert(str.LastIndexOf('.'), "." + parameterHash));
      string directoryName = Path.GetDirectoryName(path);
      if (!Directory.Exists(directoryName))
        Directory.CreateDirectory(directoryName);
      return path;
    }

    private class EveApiCacheStrategy : ICacheStrategy
    {
      public DateTime GetCachedUntil(string path) => EveApiHelper.ReadCachedUntil(path);
    }
  }
}
