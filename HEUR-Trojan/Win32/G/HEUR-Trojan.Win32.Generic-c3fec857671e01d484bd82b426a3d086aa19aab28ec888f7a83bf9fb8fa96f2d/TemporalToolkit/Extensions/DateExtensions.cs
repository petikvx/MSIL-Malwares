// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.Extensions.DateExtensions
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

using System;
using System.Runtime.InteropServices;

namespace TemporalToolkit.Extensions
{
  public static class DateExtensions
  {
    public static int OccurrenceOfDayInMonth(this DateTime aDate)
    {
label_1:
      int num1 = -1690758141;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -707176054)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num2 = (aDate.Day - 1) / 7 + 1;
            num1 = (int) num3 * -153054157 ^ 618986959;
            continue;
          case 2:
            num1 = (int) num3 * -2106461223 ^ -1472257225;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return num2;
    }

    public static DateTime StartOfWeek(this DateTime aDate)
    {
label_1:
      int num1 = 798790415;
      int num2;
      DateTime dateTime1;
      DateTime dateTime2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 2071751697)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            dateTime1 = aDate.AddDays((double) num2);
            num1 = (int) num3 * -1665588677 ^ -1566111060;
            continue;
          case 3:
            num2 = (int) aDate.DayOfWeek * -1;
            num1 = (int) num3 * 1798664955 ^ -1971944246;
            continue;
          case 4:
            dateTime2 = new DateTime(dateTime1.Year, dateTime1.Month, dateTime1.Day);
            num1 = (int) num3 * -2048221063 ^ 55550914;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return dateTime2;
    }

    public static DateTime EndOfWeek(this DateTime aDate)
    {
label_1:
      int num1 = 320272338;
      int num2;
      DateTime dateTime1;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 716436700)) % 4U)
        {
          case 1:
            DateTime dateTime2 = aDate.AddDays((double) num2);
            dateTime1 = new DateTime(dateTime2.Year, dateTime2.Month, dateTime2.Day);
            num1 = (int) num3 * 2106569935 ^ 244057295;
            continue;
          case 2:
            num2 = (int) (6 - aDate.DayOfWeek);
            num1 = (int) num3 * -1032863303 ^ -776794481;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return dateTime1;
    }

    public static TemporalToolkit.Quarter Quarter(this DateTime aDate)
    {
      TemporalToolkit.Quarter quarter = aDate.Quarter(Month.January);
label_1:
      int num1 = 1370020069;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 648821536)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -420573427 ^ -2066489252;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return quarter;
    }

    public static TemporalToolkit.Quarter Quarter(this DateTime aDate, Month startOfYear)
    {
      int num1 = (int) (startOfYear - 1) * -1 + aDate.Month;
label_1:
      int num2 = -1491305834;
      TemporalToolkit.Quarter quarter;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ -1314774127)) % 6U)
        {
          case 0:
            num1 = 12 - DateExtensions.\u200F‎‍⁭⁬⁯⁫⁯‮​‬⁭⁪‍‍⁭‫​‏​⁫‬‫⁫⁯‪​‌‮​‎‎⁫‪⁫‭‬‎‫‭‮(num1);
            num2 = (int) num3 * -1432985533 ^ 676349477;
            continue;
          case 1:
            num2 = (int) num3 * -2132044445 ^ -1299669459;
            continue;
          case 2:
            goto label_1;
          case 4:
            quarter = (TemporalToolkit.Quarter) DateExtensions.\u200C‫‬‭‍⁮‍‍‌⁫‏⁫⁬‍⁮‎‍​‏‬‍⁪‭⁮⁫⁫⁮‎‍‎⁮‫‫‏‌‭‪​‬‌‮((double) ((Decimal) num1 / 3M));
            num2 = -1400981494;
            continue;
          case 5:
            int num4 = num1 <= 0 ? 161017157 : (num4 = 962875429);
            num2 = num4 ^ (int) num3 * -1791622290;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return quarter;
    }

    static int \u200F‎‍⁭⁬⁯⁫⁯‮​‬⁭⁪‍‍⁭‫​‏​⁫‬‫⁫⁯‪​‌‮​‎‎⁫‪⁫‭‬‎‫‭‮([In] int obj0) => Math.Abs(obj0);

    static double \u200C‫‬‭‍⁮‍‍‌⁫‏⁫⁬‍⁮‎‍​‏‬‍⁪‭⁮⁫⁫⁮‎‍‎⁮‫‫‏‌‭‪​‬‌‮([In] double obj0) => Math.Ceiling(obj0);
  }
}
