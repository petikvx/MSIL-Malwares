// Decompiled with JetBrains decompiler
// Type: Ohrxmi.IDispatchQueueExtensions
// Assembly: Mhaedjy, Version=4.6.5.0, Culture=neutral, PublicKeyToken=null
// MVID: D5147E88-4426-4F99-BBCA-DD92DA902390
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Bingoml.gen-a1fb53720f755909dee2f5fe9c8015ed9b5e52817dd9a91d6ed7762eaa9faa2d.exe

using System;
using System.Threading.Tasks;

namespace Ohrxmi
{
  public static class IDispatchQueueExtensions
  {
    public static T DispatchSync<T>(this IDispatchQueue queue, Func<T> func)
    {
      T result = default (T);
      queue.DispatchSync((Action) (() => result = func()));
      return result;
    }

    public static Task<T> DispatchAsync<T>(this IDispatchQueue queue, Func<T> func)
    {
      TaskCompletionSource<T> tcs = new TaskCompletionSource<T>();
      queue.DispatchAsync((Action) (() =>
      {
        try
        {
          tcs.SetResult(func());
        }
        catch (Exception ex)
        {
          tcs.TrySetException(ex);
        }
      }));
      return tcs.Task;
    }

    public static IDispatchQueueExtensions.DispatchQueueAwaiter GetAwaiter(
      this IDispatchQueue queue)
    {
      return new IDispatchQueueExtensions.DispatchQueueAwaiter(queue);
    }

    public struct DispatchQueueAwaiter
    {
      private readonly IDispatchQueue m_queue;

      public DispatchQueueAwaiter(IDispatchQueue queue)
      {
        this.m_queue = queue;
        this.IsCompleted = false;
      }

      public bool IsCompleted { get; }

      public void OnCompleted(Action continuation) => this.m_queue.DispatchAsync(continuation);

      public void GetResult()
      {
      }
    }
  }
}
