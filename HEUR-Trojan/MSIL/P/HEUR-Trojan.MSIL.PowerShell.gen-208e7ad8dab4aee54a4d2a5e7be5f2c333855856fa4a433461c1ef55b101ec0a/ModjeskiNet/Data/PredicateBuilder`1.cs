// Decompiled with JetBrains decompiler
// Type: ModjeskiNet.Data.PredicateBuilder`1
// Assembly: SHA384Mana, Version=2.1.4.10, Culture=neutral, PublicKeyToken=null
// MVID: B6D2A9B2-9B43-4C18-A521-64033E474772
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.PowerShell.gen-208e7ad8dab4aee54a4d2a5e7be5f2c333855856fa4a433461c1ef55b101ec0a.exe

using Microsoft.CSharp.RuntimeBinder;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ModjeskiNet.Data
{
  public class PredicateBuilder<TArg>
  {
    private static readonly char[] Operators;
    private static readonly Dictionary<string, ExpressionType> OperatorMap;
    private ParameterExpression m_root = PredicateBuilder<TArg>.\u206B⁫​⁫⁮‪‪‌‫‎‌‫⁭⁫‫‏⁭‬⁪​‫⁮‭‎‪‎‫⁪‏‪‏‏⁪⁯‬‫⁫⁫⁭‍‮(PredicateBuilder<TArg>.\u206F⁬‬‌⁬‬‬⁫‌⁪⁭​⁫⁯⁯⁮⁭⁯‏‍‪‫​⁭⁭‏‪‍⁯‬⁪‮‪‍‬‫⁫⁭‎⁭‮(__typeref (TArg)));

    public Func<TArg, bool> Build(string expression)
    {
label_1:
      int num1 = 92449773;
      Func<TArg, bool> func;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1625715684)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 886064537 ^ -243517414;
            continue;
          case 1:
            int index = 0;
            func = Expression.Lambda<Func<TArg, bool>>(this.Parse(expression, ref index), this.m_root).Compile();
            num1 = (int) num2 * -1455811857 ^ -338904749;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return func;
    }

    private Expression Parse(string expression, ref int index)
    {
      Stack<ExpressionType> operators = new Stack<ExpressionType>();
      Expression current = (Expression) null;
label_1:
      int num1 = 165518087;
      bool flag1;
      bool flag2;
      bool flag3;
      Expression expression1;
      bool flag4;
      bool flag5;
      bool flag6;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1375425401)) % 36U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = 823601136;
            continue;
          case 2:
            num1 = (int) num2 * 622803000 ^ 891217398;
            continue;
          case 3:
            int num3 = flag5 ? 1073397146 : (num3 = 1637267245);
            num1 = num3 ^ (int) num2 * 1094558164;
            continue;
          case 4:
            int num4;
            num1 = num4 = PredicateBuilder<TArg>.\u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮(expression, index) == '#' ? 643215438 : (num4 = 1735690191);
            continue;
          case 5:
            num1 = (int) num2 * -1818142258 ^ -1432062926;
            continue;
          case 6:
            int num5;
            num1 = num5 = !char.IsNumber(PredicateBuilder<TArg>.\u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮(expression, index)) ? 1695161700 : (num5 = 1644308431);
            continue;
          case 7:
            current = this.Combine(current, operators, this.ParseDate(expression, ref index));
            num1 = (int) num2 * -1902772840 ^ -1730649000;
            continue;
          case 8:
            current = this.Combine(current, operators, this.ParseString(expression, ref index));
            num1 = (int) num2 * 539623087 ^ 18068616;
            continue;
          case 9:
            ++index;
            num1 = 1955040870;
            continue;
          case 10:
            current = this.Combine(current, operators, this.ParseNumber(expression, ref index));
            num1 = (int) num2 * -3699975 ^ 1281125059;
            continue;
          case 11:
            int num6;
            num1 = num6 = index < PredicateBuilder<TArg>.\u206B‪‏‎‌⁮‬⁪‫‬‍​‏⁫⁮‮‫‎⁭⁪‬‌‎‍‮⁬⁪‎⁬‍​‍‍‍‏‬‮‫‍‎‮(expression) ? 1246502303 : (num6 = 1691718469);
            continue;
          case 12:
            int num7 = !flag4 ? 351335233 : (num7 = 1691421039);
            num1 = num7 ^ (int) num2 * 1915297542;
            continue;
          case 13:
            flag2 = PredicateBuilder<TArg>.\u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮(expression, index) == '[';
            num1 = 239193338;
            continue;
          case 14:
            num1 = 1919613775;
            continue;
          case 16:
            int num8 = !flag3 ? -221311299 : (num8 = -973181243);
            num1 = num8 ^ (int) num2 * -1839950991;
            continue;
          case 17:
            num1 = (int) num2 * -606978174 ^ -1797669830;
            continue;
          case 18:
            num1 = (int) num2 * -1551687257 ^ -1314432958;
            continue;
          case 19:
            num1 = (int) num2 * 1967481336 ^ -613350776;
            continue;
          case 20:
            num1 = (int) num2 * 491000347 ^ -1984990172;
            continue;
          case 21:
            current = this.Combine(current, operators, this.ParseName(expression, ref index));
            num1 = (int) num2 * -466661673 ^ 155757439;
            continue;
          case 22:
            flag3 = PredicateBuilder<TArg>.\u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮(expression, index) == '\'';
            num1 = 2003020685;
            continue;
          case 23:
            flag6 = PredicateBuilder<TArg>.\u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮(expression, index) == ')';
            num1 = 1023668915;
            continue;
          case 24:
            expression1 = current;
            num1 = 301025042;
            continue;
          case 25:
            num1 = (int) num2 * 1061949919 ^ 484305531;
            continue;
          case 26:
            int num9 = flag6 ? 1444148618 : (num9 = 1676387950);
            num1 = num9 ^ (int) num2 * 1658697109;
            continue;
          case 27:
            num1 = (int) num2 * -215468112 ^ -1567610400;
            continue;
          case 28:
            flag5 = ((IEnumerable<char>) PredicateBuilder<TArg>.Operators).Contains<char>(PredicateBuilder<TArg>.\u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮(expression, index));
            num1 = 1761909706;
            continue;
          case 29:
            ExpressionType expressionType = this.ParseOperator(expression, ref index);
            operators.Push(expressionType);
            num1 = (int) num2 * -2037060355 ^ 485706559;
            continue;
          case 30:
            flag4 = char.IsWhiteSpace(PredicateBuilder<TArg>.\u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮(expression, index));
            num1 = (int) num2 * 1165217194 ^ 1835370201;
            continue;
          case 31:
            int num10 = !flag2 ? 184276890 : (num10 = 671300833);
            num1 = num10 ^ (int) num2 * 617976447;
            continue;
          case 32:
            flag1 = PredicateBuilder<TArg>.\u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮(expression, index) == '(';
            num1 = 1535191875;
            continue;
          case 33:
            num1 = (int) num2 * 86856467 ^ 1032598362;
            continue;
          case 34:
            int num11 = !flag1 ? -1461184030 : (num11 = -965985482);
            num1 = num11 ^ (int) num2 * -1113610366;
            continue;
          case 35:
            current = this.Combine(current, operators, this.ParseGroup(expression, ref index));
            num1 = (int) num2 * -451024970 ^ 1293594066;
            continue;
          default:
            goto label_37;
        }
      }
label_37:
      return expression1;
    }

    private Expression ParseGroup(string expression, ref int index)
    {
label_1:
      int num1 = 288995584;
      Expression group;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1054525298)) % 5U)
        {
          case 0:
            group = this.Parse(expression, ref index);
            num1 = (int) num2 * 1759291451 ^ 343391651;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -761742658 ^ -1267873951;
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * -1109526375 ^ 488153669;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return group;
    }

    private Expression Combine(
      Expression current,
      Stack<ExpressionType> operators,
      Expression expression)
    {
label_1:
      int num1 = 1803162435;
      Expression expression1;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1401063485)) % 7U)
        {
          case 0:
            goto label_1;
          case 2:
            goto label_33;
          case 3:
            if (current == null)
            {
              num1 = (int) num2 * 1909616747 ^ -1735195812;
              continue;
            }
            num3 = 0;
            break;
          case 4:
            num1 = 110185220;
            continue;
          case 5:
            expression1 = expression;
            num1 = (int) num2 * 922024094 ^ 620200304;
            continue;
          case 6:
            num3 = !operators.Any<ExpressionType>() ? 1 : 0;
            break;
          default:
            goto label_10;
        }
        int num4;
        num1 = num4 = num3 == 0 ? 1896371937 : (num4 = 16633674);
      }
label_10:
      using (Stack<ExpressionType>.Enumerator enumerator = operators.GetEnumerator())
      {
label_21:
        int num5 = enumerator.MoveNext() ? 1525884996 : (num5 = 1604573539);
        while (true)
        {
          uint num6;
          ExpressionType current1;
          Expression expression2;
          bool flag;
          Expression expression3;
          int num7;
          switch ((num6 = (uint) (num5 ^ 1401063485)) % 16U)
          {
            case 0:
              num5 = 1998736496;
              continue;
            case 1:
              int num8 = !flag ? -851395585 : (num8 = -952081533);
              num5 = num8 ^ (int) num6 * 904736573;
              continue;
            case 2:
              num5 = (int) num6 * 1061177687 ^ -1515905965;
              continue;
            case 3:
              current = (Expression) PredicateBuilder<TArg>.\u206B⁭‌⁫‌⁮⁪‏‪⁬‌‫⁮‭⁮​​‍‪‬⁪⁫​⁪‍‬⁬⁫⁫‌​‮‫‭‏⁮⁪⁮‭‮(current1, expression2, expression3);
              num5 = (int) num6 * -1033153545 ^ -1249876246;
              continue;
            case 4:
              expression2 = (Expression) PredicateBuilder<TArg>.\u206A‎⁮⁯‫⁫‌⁯‍‫‏‪⁭‏‍⁯‪‌‭‎‌⁪⁯‍‮​⁬‫‬⁮‭⁮⁫‍‫⁮⁯‌‪‮‮(expression2, PredicateBuilder<TArg>.\u200B‍⁬⁪‪⁯⁫‪‬⁯⁫‮⁫‍‎‍​‍⁭‎‮⁮​⁮‎‏⁪⁯‪‫‪⁯⁪⁫⁭‭⁭‫⁬‌‮(expression));
              num5 = (int) num6 * -1688567405 ^ 341635339;
              continue;
            case 5:
              int num9 = PredicateBuilder<TArg>.\u202E‬⁫‌⁬‮‪⁬‭⁪‪‏‮‬​⁪‪‫‌⁪⁬‫⁪‌⁮⁪⁬⁮‪‏‎⁪‌‌‫‪‬⁫‮‮(PredicateBuilder<TArg>.\u200B‍⁬⁪‪⁯⁫‪‬⁯⁫‮⁫‍‎‍​‍⁭‎‮⁮​⁮‎‏⁪⁯‪‫‪⁯⁪⁫⁭‭⁭‫⁬‌‮(expression2), PredicateBuilder<TArg>.\u200B‍⁬⁪‪⁯⁫‪‬⁯⁫‮⁫‍‎‍​‍⁭‎‮⁮​⁮‎‏⁪⁯‪‫‪⁯⁪⁫⁭‭⁭‫⁬‌‮(expression)) ? -902521222 : (num9 = -866429500);
              num5 = num9 ^ (int) num6 * 1820516615;
              continue;
            case 6:
              num7 = current1 != ExpressionType.AndAlso ? 1 : 0;
              break;
            case 7:
              if (current1 != ExpressionType.OrElse)
              {
                num5 = (int) num6 * -791229463 ^ -765372316;
                continue;
              }
              num7 = 0;
              break;
            case 8:
              num5 = 1525884996;
              continue;
            case 9:
              current1 = enumerator.Current;
              num5 = 1858744742;
              continue;
            case 10:
              flag = expression2 != null;
              num5 = 1489658604;
              continue;
            case 11:
              expression2 = current;
              num5 = (int) num6 * 1996200869 ^ -662470282;
              continue;
            case 12:
              expression3 = expression;
              num5 = (int) num6 * -125235187 ^ -711799450;
              continue;
            case 13:
              goto label_21;
            case 15:
              current = (Expression) PredicateBuilder<TArg>.\u200E⁪‎‎⁫⁮‪‫⁮‌‍⁬‫‭‬‬⁫‍‍⁪‭⁯‎‮‫‫⁪‍‎‪‍‎‎⁫⁯⁯⁯‫⁯‍‮(current1, expression3, (Type) null);
              num5 = 1283799517;
              continue;
            default:
              goto label_32;
          }
          int num10;
          num5 = num10 = num7 == 0 ? 1351374119 : (num10 = 1472913016);
        }
      }
label_32:
      expression1 = current;
label_33:
      return expression1;
    }

    internal Expression ParseNumber(string expression, ref int i)
    {
label_1:
      int num1 = -2071337766;
      int num2;
      Expression number;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -484463313)) % 5U)
        {
          case 1:
            num2 = int.Parse(this.ReadTo(expression, new Func<char, bool>(char.IsNumber), ref i));
            num1 = (int) num3 * -539480550 ^ -1191229159;
            continue;
          case 2:
            goto label_1;
          case 3:
            number = (Expression) PredicateBuilder<TArg>.\u206F‬⁪​‫‎‪‬⁭⁬‭​‮​‭‌‭‎‮‎⁬‬‫‮​​‍​⁪⁫‎⁪⁪⁭⁫‍⁬‮​⁮‮((object) num2);
            num1 = (int) num3 * 2129842374 ^ -197051402;
            continue;
          case 4:
            num1 = (int) num3 * -894587104 ^ -1218361145;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return number;
    }

    internal Expression ParseDate(string expression, ref int i)
    {
label_1:
      int num1 = 1794106598;
      string s;
      Expression date;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 760138155)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            date = (Expression) PredicateBuilder<TArg>.\u206F‬⁪​‫‎‪‬⁭⁬‭​‮​‭‌‭‎‮‎⁬‬‫‮​​‍​⁪⁫‎⁪⁪⁭⁫‍⁬‮​⁮‮((object) DateTime.Parse(s));
            num1 = (int) num2 * 1261644378 ^ -2084824730;
            continue;
          case 2:
            s = this.Unwrap(this.ReadTo(expression, '#', ref i), '#');
            num1 = (int) num2 * 438632673 ^ 588030775;
            continue;
          case 4:
            ++i;
            num1 = (int) num2 * -1885035079 ^ -745642573;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return date;
    }

    internal Expression ParseString(string expression, ref int i)
    {
label_1:
      int num1 = -1064614263;
      string str;
      Expression expression1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -834811185)) % 5U)
        {
          case 0:
            expression1 = (Expression) PredicateBuilder<TArg>.\u206F‬⁪​‫‎‪‬⁭⁬‭​‮​‭‌‭‎‮‎⁬‬‫‮​​‍​⁪⁫‎⁪⁪⁭⁫‍⁬‮​⁮‮((object) str);
            num1 = (int) num2 * 464037454 ^ -1148841138;
            continue;
          case 1:
            ++i;
            num1 = (int) num2 * 1382420674 ^ 132614915;
            continue;
          case 2:
            str = this.Unwrap(this.ReadTo(expression, '\'', ref i), '\'');
            num1 = (int) num2 * 800693921 ^ 877101576;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      return expression1;
    }

    internal string ReadTo(string expression, char test, ref int i)
    {
label_1:
      int num1 = 1218869794;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1892091489)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            char test1 = test;
            str = this.ReadTo(expression, (Func<char, bool>) (c => (int) c != (int) test1), ref i);
            num1 = (int) num2 * 353028689 ^ 15959838;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    internal string ReadTo(string expression, Func<char, bool> test, ref int i)
    {
label_1:
      int num1 = -1212050887;
      string str;
      while (true)
      {
        uint num2;
        int num3;
        bool flag;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1604740523)) % 9U)
        {
          case 0:
            num4 = test(PredicateBuilder<TArg>.\u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮(expression, i)) ? 1 : 0;
            break;
          case 1:
            num1 = -723009890;
            continue;
          case 2:
            ++i;
            num1 = (int) num2 * 1566371296 ^ -828033186;
            continue;
          case 3:
            num3 = i;
            num1 = (int) num2 * -1609725315 ^ -1887222974;
            continue;
          case 4:
            int num5 = flag ? -300003549 : (num5 = -1321311025);
            num1 = num5 ^ (int) num2 * 145525437;
            continue;
          case 5:
            goto label_1;
          case 7:
            str = PredicateBuilder<TArg>.\u202B‎‎⁬‎‪‎⁭‎‪‎‌⁬‏‭‭‪⁫⁫⁬⁭‭⁫‎​​⁮‎‍‬‮⁮​⁭⁮‏‫⁭⁮‫‮(PredicateBuilder<TArg>.\u206C⁬‬‭⁬⁬‫⁫⁮⁮‫⁬‌‌‌⁫‎‌​⁪⁫‮⁯‏‮‭‎‪‫‪​‬⁮⁫​⁬⁮‫‮‪‮(expression), num3, i - num3);
            num1 = (int) num2 * 793891078 ^ -1448304518;
            continue;
          case 8:
            if (i < PredicateBuilder<TArg>.\u206B‪‏‎‌⁮‬⁪‫‬‍​‏⁫⁮‮‫‎⁭⁪‬‌‎‍‮⁬⁪‎⁬‍​‍‍‍‏‬‮‫‍‎‮(expression))
            {
              num1 = -258156534;
              continue;
            }
            num4 = 0;
            break;
          default:
            goto label_13;
        }
        flag = num4 != 0;
        num1 = -1143892429;
      }
label_13:
      return str;
    }

    internal string Unwrap(string wrapped, params char[] wraps)
    {
      bool flag1 = ((IEnumerable<char>) wraps).Contains<char>(PredicateBuilder<TArg>.\u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮(wrapped, 0));
label_1:
      int num1 = 1756171491;
      bool flag2;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1086056757)) % 9U)
        {
          case 0:
            int num3 = flag2 ? -1149869093 : (num3 = -1717652254);
            num1 = num3 ^ (int) num2 * -790955890;
            continue;
          case 1:
            int num4 = !flag1 ? 718848051 : (num4 = 1842855973);
            num1 = num4 ^ (int) num2 * 1627066511;
            continue;
          case 2:
            wrapped = PredicateBuilder<TArg>.\u202B⁭‎⁪​⁬‭⁮‍⁪‭‭⁫‫⁬‍‬​​⁯‭‪‪‪​​⁫‍⁭‎⁬‍‭⁭‬⁫⁯‍‪⁮‮(wrapped, 0, 1);
            num1 = (int) num2 * 905224629 ^ -523079845;
            continue;
          case 3:
            wrapped = PredicateBuilder<TArg>.\u202B⁭‎⁪​⁬‭⁮‍⁪‭‭⁫‫⁬‍‬​​⁯‭‪‪‪​​⁫‍⁭‎⁬‍‭⁭‬⁫⁯‍‪⁮‮(wrapped, PredicateBuilder<TArg>.\u206B‪‏‎‌⁮‬⁪‫‬‍​‏⁫⁮‮‫‎⁭⁪‬‌‎‍‮⁬⁪‎⁬‍​‍‍‍‏‬‮‫‍‎‮(wrapped) - 1, 1);
            num1 = (int) num2 * -1000243133 ^ 1831085016;
            continue;
          case 4:
            goto label_1;
          case 5:
            str = wrapped;
            num1 = 783153681;
            continue;
          case 7:
            num1 = (int) num2 * -1549867579 ^ 1477286228;
            continue;
          case 8:
            flag2 = ((IEnumerable<char>) wraps).Contains<char>(PredicateBuilder<TArg>.\u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮(wrapped, PredicateBuilder<TArg>.\u206B‪‏‎‌⁮‬⁪‫‬‍​‏⁫⁮‮‫‎⁭⁪‬‌‎‍‮⁬⁪‎⁬‍​‍‍‍‏‬‮‫‍‎‮(wrapped) - 1));
            num1 = 1514848035;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str;
    }

    internal Expression ParseName(string expression, ref int i)
    {
label_1:
      int num1 = 155154593;
      Expression getter;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1742593507)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 569534997 ^ -650358890;
            continue;
          case 2:
            getter = this.CreateGetter(this.Unwrap(this.ReadTo(expression, ']', ref i), '[', ']'));
            num1 = (int) num2 * -1551656992 ^ 325753874;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return getter;
    }

    internal Expression CreateGetter(string name)
    {
label_1:
      int num1 = -1018711625;
      Expression getter;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1004884876)) % 8U)
        {
          case 1:
            getter = this.CreateDynamicGetter(name);
            num1 = (int) num2 * -337727310 ^ 523653435;
            continue;
          case 2:
            int num3 = flag ? -2098356833 : (num3 = -911159856);
            num1 = num3 ^ (int) num2 * -2145022247;
            continue;
          case 3:
            // ISSUE: type reference
            // ISSUE: type reference
            flag = PredicateBuilder<TArg>.\u206A⁭‍‮‬‌‍⁪‍‮‌⁬‍​‎‏⁬⁭⁯‌‎⁫‏​⁬​‏‪‎⁮‫⁬‬⁫⁭‌‭⁮‏⁫‮(PredicateBuilder<TArg>.\u206F⁬‬‌⁬‬‬⁫‌⁪⁭​⁫⁯⁯⁮⁭⁯‏‍‪‫​⁭⁭‏‪‍⁯‬⁪‮‪‍‬‫⁫⁭‎⁭‮(__typeref (TArg)), PredicateBuilder<TArg>.\u206F⁬‬‌⁬‬‬⁫‌⁪⁭​⁫⁯⁯⁮⁭⁯‏‍‪‫​⁭⁭‏‪‍⁯‬⁪‮‪‍‬‫⁫⁭‎⁭‮(__typeref (object)));
            num1 = (int) num2 * 1655673145 ^ -1826316067;
            continue;
          case 4:
            num1 = (int) num2 * 559135718 ^ 1003531588;
            continue;
          case 5:
            num1 = (int) num2 * -978807707 ^ 229936221;
            continue;
          case 6:
            getter = (Expression) PredicateBuilder<TArg>.\u206B‪‬‍‬⁬⁮‎⁬‮⁯‍‬‍‮⁪⁫⁯⁪⁮‬⁪⁪⁪‎⁭‮⁯‭‏‪⁯​‪⁪⁯‮⁭‭⁭‮((Expression) this.m_root, PredicateBuilder<TArg>.\u200C‬‌‮‌⁭⁬‎⁯⁪⁭‎​‌‭‏⁭‪⁪‭‌⁬⁪⁭‫‮‭⁭⁪‭⁪⁬‏⁭​‫‏⁪⁭⁭‮(PredicateBuilder<TArg>.\u200B‍⁬⁪‪⁯⁫‪‬⁯⁫‮⁫‍‎‍​‍⁭‎‮⁮​⁮‎‏⁪⁯‪‫‪⁯⁪⁫⁭‭⁭‫⁬‌‮((Expression) this.m_root), name));
            num1 = -2033371120;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return getter;
    }

    internal Expression CreateDynamicGetter(string name)
    {
      // ISSUE: type reference
      Type type = PredicateBuilder<TArg>.\u206F⁬‬‌⁬‬‬⁫‌⁪⁭​⁫⁯⁯⁮⁭⁯‏‍‪‫​⁭⁭‏‪‍⁯‬⁪‮‪‍‬‫⁫⁭‎⁭‮(__typeref (object));
label_1:
      int num1 = -857063861;
      CallSiteBinder callSiteBinder;
      Expression dynamicGetter;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2055245272)) % 5U)
        {
          case 1:
            dynamicGetter = (Expression) PredicateBuilder<TArg>.\u202A‭‬‎‎‍⁮‌​⁮‎⁭⁬⁫⁭‭‬⁮‮‍⁯‮⁬⁪‬‫‫‬​‎⁫‏⁭⁫‮⁯‬‍‏‌‮(callSiteBinder, type, (Expression[]) new ParameterExpression[1]
            {
              this.m_root
            });
            num1 = (int) num2 * -580666483 ^ 2083914733;
            continue;
          case 2:
            callSiteBinder = PredicateBuilder<TArg>.\u200B‍‬‬‎‭⁯⁪⁬⁪‎‪‭‍⁮‪⁯‪‍‌⁯⁫‫​‪‏‭‭⁮⁮‫‮⁬‬‌‭‌⁪‬⁫‮(CSharpBinderFlags.None, name, PredicateBuilder<TArg>.\u200B‍⁬⁪‪⁯⁫‪‬⁯⁫‮⁫‍‎‍​‍⁭‎‮⁮​⁮‎‏⁪⁯‪‫‪⁯⁪⁫⁭‭⁭‫⁬‌‮((Expression) this.m_root), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
            {
              PredicateBuilder<TArg>.\u200C‍‬‭​⁮‪‍‮⁪⁭⁪‮⁭⁯‮‏‌⁯⁪​‪‍‫‪‫⁫‍‪⁯⁪⁭‎‍‎‪⁫​‌‏‮(CSharpArgumentInfoFlags.None, (string) null)
            });
            num1 = (int) num2 * -978874716 ^ 1413390860;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 94549288 ^ -84197982;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return dynamicGetter;
    }

    internal ExpressionType ParseOperator(string expression, ref int i)
    {
label_1:
      int num1 = 100935727;
      string key;
      ExpressionType expressionType;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1547200600)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 566585826 ^ -1077770580;
            continue;
          case 2:
            --i;
            expressionType = PredicateBuilder<TArg>.OperatorMap[key];
            num1 = (int) num2 * 1142622253 ^ -909534532;
            continue;
          case 3:
            key = this.ReadTo(expression, new Func<char, bool>(((Enumerable) PredicateBuilder<TArg>.Operators).Contains<char>), ref i);
            num1 = (int) num2 * -804708059 ^ -628117428;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return expressionType;
    }

    public PredicateBuilder()
    {
label_1:
      int num1 = -1405508608;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -641705047)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -486098547 ^ -945361179;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static PredicateBuilder()
    {
      char[] chArray = new char[6];
      // ISSUE: field reference
      PredicateBuilder<TArg>.\u202B⁪⁯‬⁯‪‬‍⁯‪‍‬‮⁪‫‭⁮⁬‍‫⁮‪‮‫‭⁮‭‭⁮⁫⁪⁬⁫⁪​⁫‎‏‍‭‮((Array) chArray, __fieldref (\u003CPrivateImplementationDetails\u003E.FB71BBEB01D3F366A0E5D9045F11EB2BBAEFAB579D59372AD8786935E3C3C25D));
      PredicateBuilder<TArg>.Operators = chArray;
label_1:
      int num1 = 1093333584;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1891374367)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            PredicateBuilder<TArg>.OperatorMap = new Dictionary<string, ExpressionType>()
            {
              {
                "!",
                ExpressionType.Not
              },
              {
                "!=",
                ExpressionType.NotEqual
              },
              {
                "==",
                ExpressionType.Equal
              },
              {
                ">",
                ExpressionType.GreaterThan
              },
              {
                ">=",
                ExpressionType.GreaterThanOrEqual
              },
              {
                "<",
                ExpressionType.LessThanOrEqual
              },
              {
                "<=",
                ExpressionType.LessThanOrEqual
              },
              {
                "&&",
                ExpressionType.AndAlso
              },
              {
                "||",
                ExpressionType.OrElse
              }
            };
            num1 = (int) num2 * 332803042 ^ 323376645;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static char \u206E⁮⁫‪‬‮‌‎⁫‍‫⁬‏⁬‍⁪⁯‎​‪‫⁯‪‮⁪⁫‮⁮‭​‮‍‫‍⁫‪⁪⁯⁫‮‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static int \u206B‪‏‎‌⁮‬⁪‫‬‍​‏⁫⁮‮‫‎⁭⁪‬‌‎‍‮⁬⁪‎⁬‍​‍‍‍‏‬‮‫‍‎‮([In] string obj0) => obj0.Length;

    static Type \u200B‍⁬⁪‪⁯⁫‪‬⁯⁫‮⁫‍‎‍​‍⁭‎‮⁮​⁮‎‏⁪⁯‪‫‪⁯⁪⁫⁭‭⁭‫⁬‌‮([In] Expression obj0) => obj0.Type;

    static bool \u202E‬⁫‌⁬‮‪⁬‭⁪‪‏‮‬​⁪‪‫‌⁪⁬‫⁪‌⁮⁪⁬⁮‪‏‎⁪‌‌‫‪‬⁫‮‮([In] Type obj0, [In] Type obj1) => obj0 != obj1;

    static UnaryExpression \u206A‎⁮⁯‫⁫‌⁯‍‫‏‪⁭‏‍⁯‪‌‭‎‌⁪⁯‍‮​⁬‫‬⁮‭⁮⁫‍‫⁮⁯‌‪‮‮(
      [In] Expression obj0,
      [In] Type obj1)
    {
      return Expression.Convert(obj0, obj1);
    }

    static BinaryExpression \u206B⁭‌⁫‌⁮⁪‏‪⁬‌‫⁮‭⁮​​‍‪‬⁪⁫​⁪‍‬⁬⁫⁫‌​‮‫‭‏⁮⁪⁮‭‮(
      [In] ExpressionType obj0,
      [In] Expression obj1,
      [In] Expression obj2)
    {
      return Expression.MakeBinary(obj0, obj1, obj2);
    }

    static UnaryExpression \u200E⁪‎‎⁫⁮‪‫⁮‌‍⁬‫‭‬‬⁫‍‍⁪‭⁯‎‮‫‫⁪‍‎‪‍‎‎⁫⁯⁯⁯‫⁯‍‮(
      [In] ExpressionType obj0,
      [In] Expression obj1,
      [In] Type obj2)
    {
      return Expression.MakeUnary(obj0, obj1, obj2);
    }

    static ConstantExpression \u206F‬⁪​‫‎‪‬⁭⁬‭​‮​‭‌‭‎‮‎⁬‬‫‮​​‍​⁪⁫‎⁪⁪⁭⁫‍⁬‮​⁮‮(
      [In] object obj0)
    {
      return Expression.Constant(obj0);
    }

    static char[] \u206C⁬‬‭⁬⁬‫⁫⁮⁮‫⁬‌‌‌⁫‎‌​⁪⁫‮⁯‏‮‭‎‪‫‪​‬⁮⁫​⁬⁮‫‮‪‮([In] string obj0) => obj0.ToCharArray();

    static string \u202B‎‎⁬‎‪‎⁭‎‪‎‌⁬‏‭‭‪⁫⁫⁬⁭‭⁫‎​​⁮‎‍‬‮⁮​⁭⁮‏‫⁭⁮‫‮([In] char[] obj0, [In] int obj1, [In] int obj2) => new string(obj0, obj1, obj2);

    static string \u202B⁭‎⁪​⁬‭⁮‍⁪‭‭⁫‫⁬‍‬​​⁯‭‪‪‪​​⁫‍⁭‎⁬‍‭⁭‬⁫⁯‍‪⁮‮([In] string obj0, [In] int obj1, [In] int obj2) => obj0.Remove(obj1, obj2);

    static Type \u206F⁬‬‌⁬‬‬⁫‌⁪⁭​⁫⁯⁯⁮⁭⁯‏‍‪‫​⁭⁭‏‪‍⁯‬⁪‮‪‍‬‫⁫⁭‎⁭‮([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

    static bool \u206A⁭‍‮‬‌‍⁪‍‮‌⁬‍​‎‏⁬⁭⁯‌‎⁫‏​⁬​‏‪‎⁮‫⁬‬⁫⁭‌‭⁮‏⁫‮([In] Type obj0, [In] Type obj1) => obj0 == obj1;

    static PropertyInfo \u200C‬‌‮‌⁭⁬‎⁯⁪⁭‎​‌‭‏⁭‪⁪‭‌⁬⁪⁭‫‮‭⁭⁪‭⁪⁬‏⁭​‫‏⁪⁭⁭‮(
      [In] Type obj0,
      [In] string obj1)
    {
      return obj0.GetProperty(obj1);
    }

    static MemberExpression \u206B‪‬‍‬⁬⁮‎⁬‮⁯‍‬‍‮⁪⁫⁯⁪⁮‬⁪⁪⁪‎⁭‮⁯‭‏‪⁯​‪⁪⁯‮⁭‭⁭‮(
      [In] Expression obj0,
      [In] PropertyInfo obj1)
    {
      return Expression.Property(obj0, obj1);
    }

    static CSharpArgumentInfo \u200C‍‬‭​⁮‪‍‮⁪⁭⁪‮⁭⁯‮‏‌⁯⁪​‪‍‫‪‫⁫‍‪⁯⁪⁭‎‍‎‪⁫​‌‏‮(
      [In] CSharpArgumentInfoFlags obj0,
      [In] string obj1)
    {
      return CSharpArgumentInfo.Create(obj0, obj1);
    }

    static CallSiteBinder \u200B‍‬‬‎‭⁯⁪⁬⁪‎‪‭‍⁮‪⁯‪‍‌⁯⁫‫​‪‏‭‭⁮⁮‫‮⁬‬‌‭‌⁪‬⁫‮(
      [In] CSharpBinderFlags obj0,
      [In] string obj1,
      [In] Type obj2,
      [In] IEnumerable<CSharpArgumentInfo> obj3)
    {
      return Microsoft.CSharp.RuntimeBinder.Binder.GetMember(obj0, obj1, obj2, obj3);
    }

    static DynamicExpression \u202A‭‬‎‎‍⁮‌​⁮‎⁭⁬⁫⁭‭‬⁮‮‍⁯‮⁬⁪‬‫‫‬​‎⁫‏⁭⁫‮⁯‬‍‏‌‮(
      [In] CallSiteBinder obj0,
      [In] Type obj1,
      [In] Expression[] obj2)
    {
      return Expression.Dynamic(obj0, obj1, obj2);
    }

    static ParameterExpression \u206B⁫​⁫⁮‪‪‌‫‎‌‫⁭⁫‫‏⁭‬⁪​‫⁮‭‎‪‎‫⁪‏‪‏‏⁪⁯‬‫⁫⁫⁭‍‮(
      [In] Type obj0)
    {
      return Expression.Parameter(obj0);
    }

    static void \u202B⁪⁯‬⁯‪‬‍⁯‪‍‬‮⁪‫‭⁮⁬‍‫⁮‪‮‫‭⁮‭‭⁮⁫⁪⁬⁫⁪​⁫‎‏‍‭‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
