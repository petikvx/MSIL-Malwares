// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Extensions.Extensions
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Models.Browsers;
using FtpClient.Models.Info;
using System;
using System.Collections.Generic;
using System.Linq;

namespace FtpClient.Data.Extensions
{
  public static class Extensions
  {
    public static IEnumerable<T> DistinctBy<T, TKey>(
      this IEnumerable<T> items,
      Func<T, TKey> property)
    {
      return items.GroupBy<T, TKey>(property).Select<IGrouping<TKey, T>, T>((Func<IGrouping<TKey, T>, T>) (x => x.First<T>()));
    }

    public static T ChangeType<T>(this object @this) => (T) Convert.ChangeType(@this, typeof (T));

    public static string StripQuotes(this string value) => value.Replace("\"", string.Empty);

    public static bool ContainsDomains(this InfoClass1 log, string domains)
    {
      if (string.IsNullOrWhiteSpace(domains))
        return true;
      string[] strArray = domains.Split(new string[1]{ "|" }, StringSplitOptions.RemoveEmptyEntries);
      if (strArray != null && strArray.Length == 0)
        return true;
      InfoClass8 object9 = log.Object9;
      IEnumerable<InfoClass4> infoClass4s;
      if (object9 == null)
      {
        infoClass4s = (IEnumerable<InfoClass4>) null;
      }
      else
      {
        List<InfoClass12> object6 = object9.Object6;
        if (object6 == null)
        {
          infoClass4s = (IEnumerable<InfoClass4>) null;
        }
        else
        {
          IEnumerable<InfoClass12> source = object6.Where<InfoClass12>((Func<InfoClass12, bool>) (x => x.Object3 != null));
          infoClass4s = source != null ? source.SelectMany<InfoClass12, InfoClass4>((Func<InfoClass12, IEnumerable<InfoClass4>>) (x => (IEnumerable<InfoClass4>) x.Object3)) : (IEnumerable<InfoClass4>) null;
        }
      }
      IEnumerable<InfoClass4> source1 = infoClass4s;
      if (source1 == null || source1.Count<InfoClass4>() == 0)
        return false;
      foreach (InfoClass4 infoClass4 in source1)
      {
        foreach (string str in strArray)
        {
          if (infoClass4.Object1.Contains(str))
            return true;
        }
      }
      return false;
    }

    public static void ReplaceEmptyValues(this InfoClass1 log)
    {
      log.Object1 = string.IsNullOrWhiteSpace(log.Object1) ? "UNKNOWN" : log.Object1;
      log.Object7 = string.IsNullOrWhiteSpace(log.Object7) ? "UNKNOWN" : log.Object7;
      log.Object5 = string.IsNullOrWhiteSpace(log.Object5) ? "UNKNOWN" : log.Object5;
      log.Object12 = string.IsNullOrWhiteSpace(log.Object12) ? "UNKNOWN" : log.Object12;
      log.Object3 = string.IsNullOrWhiteSpace(log.Object3) ? "UNKNOWN" : log.Object3;
      log.Object13 = string.IsNullOrWhiteSpace(log.Object13) ? "UNKNOWN" : log.Object13;
      log.Object17 = string.IsNullOrWhiteSpace(log.Object17) ? "UNKNOWN" : log.Object17;
      log.Object11 = string.IsNullOrWhiteSpace(log.Object11) ? "UNKNOWN" : log.Object11;
      log.Object10 = string.IsNullOrWhiteSpace(log.Object10) ? "UNKNOWN" : log.Object10;
      log.Object6 = string.IsNullOrWhiteSpace(log.Object6) ? "UNKNOWN" : log.Object6;
      log.Object9 = log.Object9.IsNull<InfoClass8>();
    }
  }
}
