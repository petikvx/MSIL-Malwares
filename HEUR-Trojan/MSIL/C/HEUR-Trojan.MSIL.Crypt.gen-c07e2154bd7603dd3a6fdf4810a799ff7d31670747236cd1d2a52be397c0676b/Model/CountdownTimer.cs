// Decompiled with JetBrains decompiler
// Type: Cradiator.Model.CountdownTimer
// Assembly: FileOptio, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0135208B-21B4-457A-BFCD-FFD93FD8BA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c07e2154bd7603dd3a6fdf4810a799ff7d31670747236cd1d2a52be397c0676b.exe

using Cradiator.Config;
using Cradiator.Views;
using System;
using System.Windows.Threading;

namespace Cradiator.Model
{
  public class CountdownTimer : ICountdownTimer
  {
    private static readonly TimeSpan OneSecond = new TimeSpan(0, 0, 1);
    private bool _isSwitchedOn;
    private DateTime _nextRefresh;
    private readonly ICradiatorView _view;
    private readonly DispatcherTimer _countdownTimer;
    private IDateTimeNow _date = (IDateTimeNow) new DateTimeNow();

    public TimeSpan PollFrequency { private get; set; }

    public IDateTimeNow Date
    {
      set
      {
        this._date = value;
        this.Reset();
      }
    }

    public bool IsSwitchedOn => this._isSwitchedOn;

    public CountdownTimer(IConfigSettings configSettings, ICradiatorView view)
    {
      this._view = view;
      this._isSwitchedOn = configSettings.ShowCountdown;
      this.PollFrequency = configSettings.PollFrequencyTimeSpan;
      this._countdownTimer = new DispatcherTimer()
      {
        Interval = CountdownTimer.OneSecond
      };
      this._countdownTimer.Tick += (EventHandler) ((sender, e) => this.Execute());
      this.Reset();
    }

    public void Start()
    {
      if (!this.IsSwitchedOn)
        return;
      this._countdownTimer.Start();
    }

    public void Stop()
    {
      if (!this.IsSwitchedOn)
        return;
      this._countdownTimer.Stop();
    }

    public DateTime Reset() => this._nextRefresh = this._date.Now + this.PollFrequency;

    public DateTime CalculateNext() => this._nextRefresh = this._nextRefresh < this._date.Now ? this.Reset() : this._nextRefresh;

    public void Execute() => this._view.UpdateCountdownTimer(this.CalculateTimeToGo());

    public TimeSpan CalculateTimeToGo() => this.CalculateNext() - this._date.Now;

    public void SwitchOff() => this._isSwitchedOn = false;

    public void SwitchOn() => this._isSwitchedOn = true;
  }
}
