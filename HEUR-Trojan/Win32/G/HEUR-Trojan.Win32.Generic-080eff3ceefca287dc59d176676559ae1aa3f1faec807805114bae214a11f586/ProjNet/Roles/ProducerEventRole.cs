// Decompiled with JetBrains decompiler
// Type: ProjNet.Roles.ProducerEventRole
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Adapter;
using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using TYPELIBA.Collections;
using TYPELIBA.Identifiers;
using TYPELIBA.Lists;

namespace ProjNet.Roles
{
  public class ProducerEventRole : Field, FieldConsumerAdapter, ProccesorAccountCollection, Worker
  {
    private double visitor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ProducerEventRole(double task)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      this.\u002Ector(task, string.Empty, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal ProducerEventRole(
      double info,
      string pred,
      string consumer,
      long value2start,
      string asset3,
      string pol4,
      string key5)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              ManagerParamsID.NewExpression();
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_3;
            case 1:
              goto label_3;
            case 2:
            case 4:
              goto label_1;
            case 5:
              goto label_8;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
        this.visitor = info;
        num1 = 5;
        continue;
label_3:
        // ISSUE: explicit constructor call
        base.\u002Ector(pred, consumer, value2start, asset3, pol4, key5);
        goto label_1;
      }
label_8:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ProducerEventRole VerifyObject() => new ProducerEventRole(Math.PI / 180.0, "degree", "EPSG", 9102L, "deg", string.Empty, "=pi/180 radians");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ProducerEventRole NewObject() => new ProducerEventRole(1.0, "radian", "EPSG", 9101L, "rad", string.Empty, "SI standard unit.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ProducerEventRole PushObject() => new ProducerEventRole(Math.PI / 200.0, "grad", "EPSG", 9105L, "gr", string.Empty, "=pi/200 radians.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ProducerEventRole ResetObject() => new ProducerEventRole(Math.PI / 200.0, "gon", "EPSG", 9106L, "g", string.Empty, "=pi/200 radians.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double PrepareError() => this.visitor;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void StopError(double v) => this.visitor = v;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError()
    {
      int num1 = 3;
      string str;
      while (true)
      {
        int num2 = num1;
        StringBuilder stringBuilder;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_8;
            case 1:
            case 2:
              goto label_4;
            case 4:
              stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "UNIT[\"{0}\", {1}", new object[2]
              {
                (object) this.Name,
                (object) this.PrepareError()
              });
              if (!string.IsNullOrEmpty(this.LoginState()) && this.RestartState() > 0L)
              {
                stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.LoginState(), (object) this.RestartState());
                int num3 = 1;
                num2 = ProducerEventRole.SearchDispatcher() ? num3 : num3;
                continue;
              }
              goto label_4;
            case 5:
              goto label_1;
            case 6:
              goto label_9;
            default:
              if (!ProducerEventRole.SearchDispatcher())
              {
                num2 = 5;
                continue;
              }
              goto label_8;
          }
        }
label_1:
        str = stringBuilder.ToString();
        num1 = 6;
        continue;
label_4:
        stringBuilder.Append("]");
        goto label_1;
label_8:
        stringBuilder = new StringBuilder();
        num1 = 4;
      }
label_9:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_AngularUnit RadiansPerUnit=\"{0}\">{1}</CS_AngularUnit>", new object[2]
    {
      (object) this.PrepareError(),
      (object) this.AddProcess()
    });

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool CompareState(object param)
    {
      int num1 = 2;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_6;
            case 1:
            case 4:
              if (!flag2)
              {
                flag1 = (param as ProducerEventRole).PrepareError() == this.PrepareError();
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto label_9;
              }
              else
                goto label_7;
            case 3:
              goto label_7;
            case 5:
              goto label_9;
            default:
              if (!ProducerEventRole.SearchDispatcher())
              {
                num2 = 3;
                continue;
              }
              goto label_6;
          }
        }
label_6:
        flag2 = !(param is ProducerEventRole);
        num1 = 4;
      }
label_7:
      flag1 = false;
label_9:
      return flag1;
    }

    internal static bool CloneDispatcher() => true;

    internal static bool SearchDispatcher() => false;
  }
}
