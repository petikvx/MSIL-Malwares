// Decompiled with JetBrains decompiler
// Type: Microsoft.VisualStudio.Tools.Applications.ExternalProcess.Application
// Assembly: vsta_ep32, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 3CC5CA36-7053-4599-B4DB-B51C75F56884
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Small.l-9c5cc1c8d92260f6c37cd752609f38807ece6d26a38421db526748493931ec36.exe

using Microsoft.VisualStudio.Tools.Applications.Contract;
using System;
using System.Collections;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Channels;
using System.Runtime.Serialization.Formatters;
using System.Threading;
using System.Windows.Forms;

namespace Microsoft.VisualStudio.Tools.Applications.ExternalProcess
{
  public sealed class Application
  {
    private string processUriName;
    private Uri processUri;
    private string procReadyEvent;
    private string addInPath;
    private string hostCommand;
    private string hostCommandArguments;
    private string hostDebugUri;
    private AddInProcessInternal addInProcessInternal;

    [STAThread]
    public static void Main(string[] args) => new Application().Run(args);

    private Application()
    {
      this.processUriName = "";
      this.procReadyEvent = "";
      this.addInPath = "";
      this.hostCommand = "";
      this.hostCommandArguments = "";
      this.hostDebugUri = "";
    }

    private void Run(string[] args)
    {
      try
      {
        this.ProcessArguments(args);
        this.InitializeRemotingChannel();
        switch (this.Scenario)
        {
          case Application.ExecutionType.ExternalExecution:
            EventWaitHandle eventWaitHandle1 = new EventWaitHandle(false, EventResetMode.ManualReset, this.procReadyEvent);
            this.addInProcessInternal = this.CreateAddInProcessInternal();
            RemotingServices.Marshal((MarshalByRefObject) this.addInProcessInternal, this.processUri.PathAndQuery.Substring(1));
            eventWaitHandle1.Set();
            break;
          case Application.ExecutionType.AltF11:
            this.addInProcessInternal = this.CreateAddInProcessInternal();
            ((IExternalDebugListenerContract) Activator.GetObject(typeof (IExternalDebugListenerContract), this.hostDebugUri)).OnDebugStarting(this.addInPath, (IRemoteAddInProcessInternalContract) this.addInProcessInternal, Process.GetCurrentProcess().Id);
            break;
          case Application.ExecutionType.NDD:
            string hostReadyEventName = this.CreateHostReadyEventName();
            this.hostDebugUri = this.CreateHostUri();
            string fullHostParameters = this.GetFullHostParameters(hostReadyEventName, this.hostDebugUri);
            EventWaitHandle eventWaitHandle2 = new EventWaitHandle(false, EventResetMode.ManualReset, hostReadyEventName);
            Process.Start(this.hostCommand, fullHostParameters);
            eventWaitHandle2.WaitOne();
            IExternalDebugListenerContract listenerContract = (IExternalDebugListenerContract) Activator.GetObject(typeof (IExternalDebugListenerContract), this.hostDebugUri);
            this.addInProcessInternal = this.CreateAddInProcessInternal();
            listenerContract.OnDebugStarting(this.addInPath, (IRemoteAddInProcessInternalContract) this.addInProcessInternal, Process.GetCurrentProcess().Id);
            break;
          default:
            throw new Exception();
        }
        System.Windows.Forms.Application.Run();
      }
      catch
      {
        if (this.Scenario == Application.ExecutionType.ExternalExecution)
          return;
        Application.PrintError();
      }
    }

    private void InitializeRemotingChannel()
    {
      if (this.processUri == (Uri) null)
        this.processUri = new Uri(this.CreateHostUri());
      string host = this.processUri.Host;
      BinaryServerFormatterSinkProvider formatterSinkProvider1 = new BinaryServerFormatterSinkProvider();
      formatterSinkProvider1.TypeFilterLevel = TypeFilterLevel.Full;
      IDictionary dictionary = (IDictionary) new Hashtable();
      dictionary[(object) "name"] = (object) host;
      dictionary[(object) "portName"] = (object) host;
      BinaryClientFormatterSinkProvider formatterSinkProvider2 = new BinaryClientFormatterSinkProvider();
      ChannelServices.RegisterChannel((IChannel) new Microsoft.VisualStudio.Tools.Applications.ComChannel.ComChannel(dictionary, (IClientChannelSinkProvider) formatterSinkProvider2, (IServerChannelSinkProvider) formatterSinkProvider1), false);
    }

    private string CreateHostReadyEventName() => "vstaHostReadyEvent" + Guid.NewGuid().ToString();

    private string CreateHostUri() => "com://vstadebug" + Guid.NewGuid().ToString() + "/" + Guid.NewGuid().ToString();

    private string GetFullHostParameters(string hostReadyEventName, string hostUri) => this.hostCommandArguments + " /vstaHostDebugReady:" + hostReadyEventName + " /vstaHostDebugUri:" + hostUri;

    private AddInProcessInternal CreateAddInProcessInternal() => Activator.CreateInstance(typeof (AddInProcessInternal), BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance, (Binder) null, new object[1]
    {
      (object) Thread.CurrentThread
    }, CultureInfo.InvariantCulture) as AddInProcessInternal;

    private void ProcessArguments(string[] args)
    {
      if (args.Length == 0)
        throw new ArgumentException();
      foreach (string str in args)
      {
        if (!(this.hostCommandArguments != ""))
          this.ProcessArgument(str);
        else
          break;
      }
      this.VerifyArgumentSet();
    }

    private void ProcessArgument(string arg)
    {
      string argumentName = this.GetArgumentName(arg);
      if (this.EqualArg(argumentName, Application.Arguments.ProcessUri))
      {
        string argumentValue = this.GetArgumentValue(arg);
        this.processUriName = !(argumentValue == "") && !(this.processUri != (Uri) null) ? argumentValue : throw new ArgumentException();
        this.processUri = new Uri(this.processUriName);
      }
      else if (this.EqualArg(argumentName, Application.Arguments.ProcReadyEvent))
      {
        string argumentValue = this.GetArgumentValue(arg);
        this.procReadyEvent = !(argumentValue == "") && !(this.procReadyEvent != "") ? argumentValue : throw new ArgumentException();
      }
      else if (this.EqualArg(argumentName, Application.Arguments.AddInPath))
      {
        string argumentValue = this.GetArgumentValue(arg);
        this.addInPath = !(argumentValue == "") && !(this.addInPath != "") ? argumentValue : throw new ArgumentException();
      }
      else if (this.EqualArg(argumentName, Application.Arguments.HostCommand))
      {
        string argumentValue = this.GetArgumentValue(arg);
        this.hostCommand = !(argumentValue == "") && !(this.hostCommand != "") ? argumentValue : throw new ArgumentException();
      }
      else if (this.EqualArg(argumentName, Application.Arguments.HostDebugUri))
      {
        string argumentValue = this.GetArgumentValue(arg);
        this.hostDebugUri = !(argumentValue == "") && !(this.hostDebugUri != "") ? argumentValue : throw new ArgumentException();
      }
      else
      {
        if (!this.EqualArg(argumentName, Application.Arguments.HostCommandArguments))
          throw new Exception();
        this.hostCommandArguments = !(this.hostCommandArguments != "") ? this.GetHostCommandArgumentsWithQuotes() : throw new ArgumentException();
      }
    }

    private void VerifyArgumentSet()
    {
      switch (this.Scenario)
      {
        case Application.ExecutionType.ExternalExecution:
          try
          {
            this.VerifyArgumentNotEmpty(this.processUriName);
            this.VerifyArgumentNotEmpty(this.procReadyEvent);
            this.VerifyArgumentEmpty(this.addInPath);
            this.VerifyArgumentEmpty(this.hostCommand);
            this.VerifyArgumentEmpty(this.hostCommandArguments);
            this.VerifyArgumentEmpty(this.hostDebugUri);
            break;
          }
          catch
          {
            throw;
          }
        case Application.ExecutionType.AltF11:
          try
          {
            this.VerifyArgumentEmpty(this.processUriName);
            this.VerifyArgumentEmpty(this.procReadyEvent);
            this.VerifyArgumentEmpty(this.hostCommand);
            this.VerifyArgumentEmpty(this.hostCommandArguments);
            this.VerifyArgumentNotEmpty(this.hostDebugUri);
            break;
          }
          catch
          {
            throw;
          }
        case Application.ExecutionType.NDD:
          try
          {
            this.VerifyArgumentEmpty(this.processUriName);
            this.VerifyArgumentEmpty(this.procReadyEvent);
            this.VerifyArgumentNotEmpty(this.hostCommand);
            this.VerifyArgumentEmpty(this.hostDebugUri);
            break;
          }
          catch
          {
            throw;
          }
        default:
          throw new Exception();
      }
    }

    private void VerifyArgumentEmpty(string arg)
    {
      if (arg != null && arg != "")
        throw new Exception();
    }

    private void VerifyArgumentNotEmpty(string arg)
    {
      switch (arg)
      {
        case "":
        case null:
          throw new Exception();
      }
    }

    private static void PrintError()
    {
      string caption = StringResources.GetString("ErrorCaption");
      int num = (int) MessageBox.Show(StringResources.GetString("ErrorString"), caption);
    }

    private string GetArgumentName(string arg)
    {
      int length = arg.IndexOf(":");
      return arg.Substring(0, length);
    }

    private string GetArgumentValue(string arg)
    {
      int num = arg.IndexOf(":");
      return arg.Substring(num + 1);
    }

    private bool EqualArg(string str1, string str2) => string.Compare(str1, str2, StringComparison.OrdinalIgnoreCase) == 0;

    private string GetHostCommandArgumentsWithQuotes()
    {
      string commandLine = Environment.CommandLine;
      int startIndex = commandLine.IndexOf(Application.Arguments.HostCommandArguments);
      int num = startIndex != -1 ? commandLine.IndexOf(":", startIndex) : throw new Exception();
      return num != -1 ? commandLine.Substring(num + 1) : throw new Exception();
    }

    private Application.ExecutionType Scenario
    {
      get
      {
        if (this.processUriName != null && this.processUriName.Length > 0)
          return Application.ExecutionType.ExternalExecution;
        return this.hostCommand != null && this.hostCommand.Length > 0 ? Application.ExecutionType.NDD : Application.ExecutionType.AltF11;
      }
    }

    private enum ExecutionType
    {
      ExternalExecution,
      AltF11,
      NDD,
    }

    private static class Arguments
    {
      public static string ProcessUri = "/processUri";
      public static string ProcReadyEvent = "/procReadyEvent";
      public static string AddInPath = "/addInPath";
      public static string HostCommand = "/hostCommand";
      public static string HostCommandArguments = "/hostCommandArguments";
      public static string HostDebugUri = "/hostDebugUri";
    }
  }
}
