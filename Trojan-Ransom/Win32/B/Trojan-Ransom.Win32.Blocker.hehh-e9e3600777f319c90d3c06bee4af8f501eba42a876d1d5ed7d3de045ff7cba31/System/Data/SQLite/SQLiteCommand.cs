// Decompiled with JetBrains decompiler
// Type: System.Data.SQLite.SQLiteCommand
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;

namespace System.Data.SQLite
{
  [ToolboxItem(true)]
  [Designer("SQLite.Designer.SQLiteCommandDesigner, SQLite.Designer, Version=1.0.37.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139")]
  public sealed class SQLiteCommand : DbCommand, ICloneable
  {
    private string _commandText;
    private SQLiteConnection _cnn;
    private long _version;
    private WeakReference _activeReader;
    internal int _commandTimeout;
    private bool _designTimeVisible;
    private UpdateRowSource _updateRowSource;
    private SQLiteParameterCollection _parameterCollection;
    internal List<SQLiteStatement> _statementList;
    internal string _remainingText;
    private SQLiteTransaction _transaction;

    public SQLiteCommand()
      : this((string) null, (SQLiteConnection) null)
    {
    }

    public SQLiteCommand(string commandText)
      : this(commandText, (SQLiteConnection) null, (SQLiteTransaction) null)
    {
    }

    public SQLiteCommand(string commandText, SQLiteConnection connection)
      : this(commandText, connection, (SQLiteTransaction) null)
    {
    }

    public SQLiteCommand(SQLiteConnection connection)
      : this((string) null, connection, (SQLiteTransaction) null)
    {
    }

    private SQLiteCommand(SQLiteCommand source)
      : this(source.CommandText, source.Connection, source.Transaction)
    {
      this.CommandTimeout = source.CommandTimeout;
      this.DesignTimeVisible = source.DesignTimeVisible;
      this.UpdatedRowSource = source.UpdatedRowSource;
      foreach (SQLiteParameter parameter in (DbParameterCollection) source._parameterCollection)
        this.Parameters.Add(parameter.Clone());
    }

    public SQLiteCommand(
      string commandText,
      SQLiteConnection connection,
      SQLiteTransaction transaction)
    {
      this._commandTimeout = 30;
      this._parameterCollection = new SQLiteParameterCollection(this);
      this._designTimeVisible = true;
      this._updateRowSource = UpdateRowSource.None;
      if (commandText != null)
        this.CommandText = commandText;
      if (connection != null)
      {
        this.DbConnection = (DbConnection) connection;
        this._commandTimeout = connection.DefaultTimeout;
      }
      if (transaction == null)
        return;
      this.Transaction = transaction;
    }

    protected override void Dispose(bool disposing)
    {
      base.Dispose(disposing);
      if (!disposing)
        return;
      SQLiteDataReader sqLiteDataReader = (SQLiteDataReader) null;
      if (this._activeReader != null)
      {
        try
        {
          sqLiteDataReader = this._activeReader.Target as SQLiteDataReader;
        }
        catch (InvalidOperationException ex)
        {
        }
      }
      if (sqLiteDataReader != null)
      {
        sqLiteDataReader._disposeCommand = true;
        this._activeReader = (WeakReference) null;
      }
      else
      {
        this.Connection = (SQLiteConnection) null;
        this._parameterCollection.Clear();
        this._commandText = (string) null;
      }
    }

    internal void ClearCommands()
    {
      if (this._activeReader != null)
      {
        SQLiteDataReader sqLiteDataReader = (SQLiteDataReader) null;
        try
        {
          sqLiteDataReader = this._activeReader.Target as SQLiteDataReader;
        }
        catch (InvalidOperationException ex)
        {
        }
        sqLiteDataReader?.Close();
        this._activeReader = (WeakReference) null;
      }
      if (this._statementList == null)
        return;
      int count = this._statementList.Count;
      for (int index = 0; index < count; ++index)
        this._statementList[index].Dispose();
      this._statementList = (List<SQLiteStatement>) null;
      this._parameterCollection.Unbind();
    }

    internal SQLiteStatement BuildNextCommand()
    {
      SQLiteStatement activeStatement = (SQLiteStatement) null;
      try
      {
        if (this._statementList == null)
          this._remainingText = this._commandText;
        activeStatement = this._cnn._sql.Prepare(this._cnn, this._remainingText, this._statementList == null ? (SQLiteStatement) null : this._statementList[this._statementList.Count - 1], (uint) (this._commandTimeout * 1000), out this._remainingText);
        if (activeStatement != null)
        {
          activeStatement._command = this;
          if (this._statementList == null)
            this._statementList = new List<SQLiteStatement>();
          this._statementList.Add(activeStatement);
          this._parameterCollection.MapParameters(activeStatement);
          activeStatement.BindParameters();
        }
        return activeStatement;
      }
      catch (Exception ex)
      {
        if (activeStatement != null)
        {
          if (this._statementList.Contains(activeStatement))
            this._statementList.Remove(activeStatement);
          activeStatement.Dispose();
        }
        this._remainingText = (string) null;
        throw;
      }
    }

    internal SQLiteStatement GetStatement(int index)
    {
      if (this._statementList == null)
        return this.BuildNextCommand();
      if (index == this._statementList.Count)
        return !string.IsNullOrEmpty(this._remainingText) ? this.BuildNextCommand() : (SQLiteStatement) null;
      SQLiteStatement statement = this._statementList[index];
      statement.BindParameters();
      return statement;
    }

    public override void Cancel()
    {
      if (this._activeReader == null || !(this._activeReader.Target is SQLiteDataReader target))
        return;
      target.Cancel();
    }

    [RefreshProperties(RefreshProperties.All)]
    [DefaultValue("")]
    [Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    public override string CommandText
    {
      get => this._commandText;
      set
      {
        if (this._commandText == value)
          return;
        if (this._activeReader != null && this._activeReader.IsAlive)
          throw new InvalidOperationException("Cannot set CommandText while a DataReader is active");
        this.ClearCommands();
        this._commandText = value;
        SQLiteConnection cnn = this._cnn;
      }
    }

    [DefaultValue(30)]
    public override int CommandTimeout
    {
      get => this._commandTimeout;
      set => this._commandTimeout = value;
    }

    [RefreshProperties(RefreshProperties.All)]
    [DefaultValue(CommandType.Text)]
    public override CommandType CommandType
    {
      get => CommandType.Text;
      set
      {
        if (value != CommandType.Text)
          throw new NotSupportedException();
      }
    }

    protected override DbParameter CreateDbParameter() => (DbParameter) this.CreateParameter();

    public SQLiteParameter CreateParameter() => new SQLiteParameter();

    [Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [DefaultValue(null)]
    public SQLiteConnection Connection
    {
      get => this._cnn;
      set
      {
        if (this._activeReader != null && this._activeReader.IsAlive)
          throw new InvalidOperationException("Cannot set Connection while a DataReader is active");
        if (this._cnn != null)
          this.ClearCommands();
        this._cnn = value;
        if (this._cnn == null)
          return;
        this._version = this._cnn._version;
      }
    }

    protected override DbConnection DbConnection
    {
      get => (DbConnection) this.Connection;
      set => this.Connection = (SQLiteConnection) value;
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public SQLiteParameterCollection Parameters => this._parameterCollection;

    protected override DbParameterCollection DbParameterCollection => (DbParameterCollection) this.Parameters;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    public SQLiteTransaction Transaction
    {
      get => this._transaction;
      set
      {
        if (this._cnn != null)
        {
          if (this._activeReader != null && this._activeReader.IsAlive)
            throw new InvalidOperationException("Cannot set Transaction while a DataReader is active");
          if (value != null && value._cnn != this._cnn)
            throw new ArgumentException("Transaction is not associated with the command's connection");
          this._transaction = value;
        }
        else
        {
          if (value != null)
            this.Connection = value.Connection;
          this._transaction = value;
        }
      }
    }

    protected override DbTransaction DbTransaction
    {
      get => (DbTransaction) this.Transaction;
      set => this.Transaction = (SQLiteTransaction) value;
    }

    private void InitializeForReader()
    {
      if (this._activeReader != null && this._activeReader.IsAlive)
        throw new InvalidOperationException("DataReader already active on this command");
      if (this._cnn == null)
        throw new InvalidOperationException("No connection associated with this command");
      if (this._cnn.State != ConnectionState.Open)
        throw new InvalidOperationException("Database is not open");
      if (this._cnn._version != this._version)
      {
        this._version = this._cnn._version;
        this.ClearCommands();
      }
      this._parameterCollection.MapParameters((SQLiteStatement) null);
    }

    protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior) => (DbDataReader) this.ExecuteReader(behavior);

    public SQLiteDataReader ExecuteReader(CommandBehavior behavior)
    {
      this.InitializeForReader();
      SQLiteDataReader target = new SQLiteDataReader(this, behavior);
      this._activeReader = new WeakReference((object) target, false);
      return target;
    }

    public SQLiteDataReader ExecuteReader() => this.ExecuteReader(CommandBehavior.Default);

    internal void ClearDataReader() => this._activeReader = (WeakReference) null;

    public override int ExecuteNonQuery()
    {
      using (SQLiteDataReader sqLiteDataReader = this.ExecuteReader(CommandBehavior.SingleResult | CommandBehavior.SingleRow))
      {
        do
          ;
        while (sqLiteDataReader.NextResult());
        return sqLiteDataReader.RecordsAffected;
      }
    }

    public override object ExecuteScalar()
    {
      using (SQLiteDataReader sqLiteDataReader = this.ExecuteReader(CommandBehavior.SingleResult | CommandBehavior.SingleRow))
      {
        if (sqLiteDataReader.Read())
          return sqLiteDataReader[0];
      }
      return (object) null;
    }

    public override void Prepare()
    {
    }

    [DefaultValue(UpdateRowSource.None)]
    public override UpdateRowSource UpdatedRowSource
    {
      get => this._updateRowSource;
      set => this._updateRowSource = value;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DesignOnly(true)]
    [DefaultValue(true)]
    [Browsable(false)]
    public override bool DesignTimeVisible
    {
      get => this._designTimeVisible;
      set
      {
        this._designTimeVisible = value;
        TypeDescriptor.Refresh((object) this);
      }
    }

    public object Clone() => (object) new SQLiteCommand(this);
  }
}
