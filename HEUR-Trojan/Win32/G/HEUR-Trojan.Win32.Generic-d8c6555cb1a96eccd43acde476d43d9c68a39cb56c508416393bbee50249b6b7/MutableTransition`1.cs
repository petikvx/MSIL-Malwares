// Decompiled with JetBrains decompiler
// Type: Automata.MutableTransition`1
// Assembly: KeyValuePairTypeIn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5BC10340-E19B-4E23-8390-67C019FFF1B3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.Win32.Generic-d8c6555cb1a96eccd43acde476d43d9c68a39cb56c508416393bbee50249b6b7.exe

using System;
using System.Collections.Generic;

namespace Automata
{
  public class MutableTransition<T> : IAmTransition<T>
  {
    private readonly Func<T, bool> _p;
    private readonly List<Action> _actions = new List<Action>();

    public MutableTransition(Func<T, bool> predicate, params Action[] actions)
    {
label_1:
      int num1 = -104899449;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -115641286)) % 6U)
        {
          case 0:
            num1 = (int) num2 * -1746314340 ^ 899080605;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1695495364 ^ 2030141280;
            continue;
          case 4:
            num1 = (int) num2 * -1347340971 ^ -1148762559;
            continue;
          case 5:
            this._p = predicate;
            this._actions.AddRange((IEnumerable<Action>) actions);
            num1 = (int) num2 * -1520701716 ^ -1860233726;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public MutableTransition(Func<T, bool> predicate) => this._p = predicate;

    public IAmState<T> Source { get; set; }

    public void AddAction(Action a) => throw MutableTransition<T>.\u202E⁫‭‮⁪‪​⁯‮‌‍‎‍⁯‫‏‏‬⁬‬‏‎‮‏​⁮‌‬⁭⁯‭‏⁬‏‎‮‮​‫‎‮();

    public void Execute()
    {
    }

    public IAmState<T> Target { get; set; }

    public bool Evaluate(T t) => true;

    static NotImplementedException \u202E⁫‭‮⁪‪​⁯‮‌‍‎‍⁯‫‏‏‬⁬‬‏‎‮‏​⁮‌‬⁭⁯‭‏⁬‏‎‮‮​‫‎‮() => new NotImplementedException();
  }
}
