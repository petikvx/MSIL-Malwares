// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: LoadHi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 984E9D2E-DA60-4984-B27B-15EC3C1BAA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-5f4b796f8ee524790172ed29cc21d32e43d347e3c306781f420d7844e0a776c9.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
label_1:
      int num1 = 35177432;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 868783385)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 208864061 ^ 888883475;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1788049284 ^ -412301395;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.m_Node = aNode;
      this.m_Key = (string) null;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
      this.m_Node = aNode;
      this.m_Key = aKey;
    }

    private void Set(JSONNode aVal)
    {
      bool flag = this.m_Key == null;
label_1:
      int num1 = -287381796;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -678756257)) % 11U)
        {
          case 0:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * -1970055949 ^ 975906377;
            continue;
          case 1:
            int num3 = flag ? 505878906 : (num3 = 1390192987);
            num1 = num3 ^ (int) num2 * 1443732591;
            continue;
          case 2:
            num1 = (int) num2 * 2773959 ^ 150471275;
            continue;
          case 3:
            num1 = (int) num2 * 1011549934 ^ -26128170;
            continue;
          case 5:
            num1 = (int) num2 * -1472971837 ^ 955725791;
            continue;
          case 6:
            num1 = (int) num2 * -480414242 ^ 142914728;
            continue;
          case 7:
            num1 = (int) num2 * 1638285989 ^ 1951989785;
            continue;
          case 8:
            num1 = -893658013;
            continue;
          case 9:
            goto label_1;
          case 10:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = (int) num2 * -1151005012 ^ -1962410149;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      this.m_Node = (JSONNode) null;
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 2120317453;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2054755160)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
              num1 = (int) num2 * -852499468 ^ -1724592750;
              continue;
            case 2:
              num1 = (int) num2 * -1191659497 ^ -1198308091;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return jsonNode;
      }
      set
      {
        JSONArray aVal = new JSONArray();
label_1:
        int num1 = -327898873;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -734844881)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              aVal.Add(value);
              num1 = (int) num2 * -1286576591 ^ 1024171466;
              continue;
            case 2:
              goto label_1;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1976029634 ^ -1104404531;
              continue;
            case 4:
              num1 = (int) num2 * 1057735865 ^ 1347414167;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 416403964;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 100251995)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = (int) num2 * -204498205 ^ 1217088351;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
        JSONClass aVal = new JSONClass();
        aVal.Add(aKey, value);
label_1:
        int num1 = 457477501;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 552578950)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              num1 = (int) num2 * 149538237 ^ -913570731;
              continue;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1727497093 ^ -1658122519;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override void Add(JSONNode aItem)
    {
label_1:
      int num1 = -1889485011;
      JSONArray aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1277634325)) % 6U)
        {
          case 0:
            num1 = (int) num2 * -2043701690 ^ 725395686;
            continue;
          case 1:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * 458046743 ^ -258218218;
            continue;
          case 2:
            aVal = new JSONArray();
            aVal.Add(aItem);
            num1 = (int) num2 * -1570808324 ^ 917551256;
            continue;
          case 3:
            num1 = (int) num2 * 915335183 ^ -985247405;
            continue;
          case 4:
            goto label_1;
          case 5:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public override void Add(string aKey, JSONNode aItem)
    {
      JSONClass aVal = new JSONClass();
label_1:
      int num1 = 2000957683;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 877752480)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            aVal.Add(aKey, aItem);
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * 1261564864 ^ 1095169917;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
      if (b != null)
        goto label_3;
label_1:
      int num1 = -1763601981;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1505119956)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -678556946 ^ -429460777;
            continue;
          case 2:
            flag = true;
            num1 = (int) num2 * -1215147111 ^ -129919135;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      return flag;
label_3:
      flag = (object) a == b;
      num1 = -999007237;
      goto label_2;
    }

    public static bool operator !=(JSONLazyCreator a, object b)
    {
label_1:
      int num1 = -266234473;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1581439134)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -430060336 ^ -435285276;
            continue;
          case 1:
            flag = !(a == b);
            num1 = (int) num2 * 443336218 ^ 1148906832;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return flag;
    }

    public override bool Equals(object obj)
    {
      if (obj != null)
        goto label_4;
label_1:
      int num1 = -1971413939;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2121756229)) % 5U)
        {
          case 1:
            flag = true;
            num1 = (int) num2 * -1095650630 ^ -586159489;
            continue;
          case 2:
            num1 = (int) num2 * -782934875 ^ 856925982;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_4;
          default:
            goto label_6;
        }
      }
label_6:
      return flag;
label_4:
      flag = (object) this == obj;
      num1 = -191713438;
      goto label_2;
    }

    public override int GetHashCode()
    {
label_1:
      int num1 = 622523132;
      int hashCode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 395086346)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 815442964 ^ 1218413314;
            continue;
          case 2:
            hashCode = base.GetHashCode();
            num1 = (int) num2 * -205810842 ^ 365495151;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return hashCode;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1354737839;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1047022416)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1892945657 ^ -1996949421;
            continue;
          case 3:
            str = "";
            num1 = (int) num2 * -1620320837 ^ 74434235;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = 121277741;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1389427020)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = "";
            num1 = (int) num2 * 1020698815 ^ -1102070455;
            continue;
          case 2:
            num1 = (int) num2 * 1657200627 ^ 647866025;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override int AsInt
    {
      get
      {
        this.Set((JSONNode) new JSONData(0));
        return 0;
      }
      set
      {
label_1:
        int num1 = -301638933;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -560469194)) % 3U)
          {
            case 1:
              aVal = new JSONData(value);
              num1 = (int) num2 * 402717279 ^ -2007849482;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        this.Set((JSONNode) aVal);
      }
    }

    public override float AsFloat
    {
      get
      {
        JSONData aVal = new JSONData(0.0f);
label_1:
        int num1 = 1196513739;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 691525320)) % 6U)
          {
            case 0:
              num1 = (int) num2 * -716772740 ^ 15528845;
              continue;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1152203459 ^ -399333250;
              continue;
            case 2:
              asFloat = 0.0f;
              num1 = (int) num2 * 838958171 ^ 2128801406;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * 180639661 ^ 1578042507;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asFloat;
      }
      set
      {
        JSONData aVal = new JSONData(value);
label_1:
        int num1 = -1141335804;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1750555066)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 493878352 ^ -333024827;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1873833514 ^ 193919799;
              continue;
            case 3:
              goto label_3;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override double AsDouble
    {
      get
      {
        this.Set((JSONNode) new JSONData(0.0));
label_1:
        int num1 = -408101096;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1554318746)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 708206192 ^ 1463455945;
              continue;
            case 2:
              asDouble = 0.0;
              num1 = (int) num2 * 2092797991 ^ 881872693;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asDouble;
      }
      set
      {
label_1:
        int num1 = 770250224;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 626726019)) % 4U)
          {
            case 0:
              num1 = (int) num2 * 1329769499 ^ -1980844902;
              continue;
            case 1:
              goto label_3;
            case 2:
              goto label_1;
            case 3:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * 1643941928 ^ 653702571;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override bool AsBool
    {
      get
      {
        JSONData aVal = new JSONData(false);
label_1:
        int num1 = 1737758916;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 591018979)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -305565315 ^ 938794247;
              continue;
            case 2:
              num1 = (int) num2 * 1153355320 ^ -325761597;
              continue;
            case 3:
              asBool = false;
              num1 = (int) num2 * -394792532 ^ -1262380230;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asBool;
      }
      set
      {
        JSONData aVal = new JSONData(value);
label_1:
        int num1 = 2120929267;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1004357481)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1729890626 ^ -1293618287;
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override JSONArray AsArray
    {
      get
      {
        JSONArray aVal = new JSONArray();
        this.Set((JSONNode) aVal);
        return aVal;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
        JSONClass aVal = new JSONClass();
label_1:
        int num1 = 766390989;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 343013628)) % 5U)
          {
            case 0:
              num1 = (int) num2 * 1640421757 ^ 1647445179;
              continue;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1611430782 ^ -1697641659;
              continue;
            case 3:
              asObject = aVal;
              num1 = (int) num2 * -48385487 ^ 1747451982;
              continue;
            case 4:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_6:
        return asObject;
      }
    }
  }
}
