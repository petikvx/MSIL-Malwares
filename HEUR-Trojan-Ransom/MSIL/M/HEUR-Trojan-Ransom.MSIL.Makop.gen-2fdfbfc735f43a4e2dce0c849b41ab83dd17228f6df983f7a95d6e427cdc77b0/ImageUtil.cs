// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: Xe, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E8DDD59-A67B-4ABD-99CD-92D28751A620
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2fdfbfc735f43a4e2dce0c849b41ab83dd17228f6df983f7a95d6e427cdc77b0.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
    if ((ImageUtil.\u206F⁭‏​‌⁯‏​‏‬‭‭⁭⁮⁭‬‬‪‏‌‪‪⁬⁫⁯‎‏⁪‬⁫⁫‮‎‏‎⁪⁫‪‭‌‮(originalImage) & PixelFormat.Indexed) != PixelFormat.Indexed)
      goto label_14;
label_1:
    int num1 = -1762296181;
label_2:
    int num2;
    BitmapData bitmapData;
    IntPtr num3;
    Bitmap bitmap;
    int length;
    Rectangle rectangle;
    PixelFormat pixelFormat;
    byte[] numArray;
    int num4;
    bool flag;
    Image image;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ -1138096249)) % 26U)
      {
        case 0:
          num1 = (int) num5 * -647192725 ^ 546180801;
          continue;
        case 1:
          ImageUtil.\u202D‌‫‮‮‏⁯⁫‪⁭‬⁬‬⁯⁯‏⁮⁭⁮⁮‮‫‫⁮‌​⁭⁬⁮‭‬‎‫‭‭‬⁪‌⁭⁪‮(numArray, 0, num3, length);
          num1 = (int) num5 * 912690893 ^ -1604506794;
          continue;
        case 2:
          bitmapData = ImageUtil.\u200B⁮⁮‍‎⁯‎‫‍⁯​⁫‫‬​⁬⁪‫‎‎‎‍‮⁮‍‮‫‮‭‪‫⁫‫⁬⁯‬‎​‌‌‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num1 = (int) num5 * -1755888125 ^ 1525159873;
          continue;
        case 3:
          image = (Image) bitmap;
          num1 = (int) num5 * 1814392766 ^ -1514283639;
          continue;
        case 4:
          int num6 = flag ? -639889861 : (num6 = -395306066);
          num1 = num6 ^ (int) num5 * -804080759;
          continue;
        case 5:
          goto label_14;
        case 6:
          num1 = (int) num5 * -1843041425 ^ -1685682310;
          continue;
        case 7:
          pixelFormat = PixelFormat.Format32bppArgb;
          num1 = (int) num5 * -1632024456 ^ 1298093871;
          continue;
        case 8:
          numArray = new byte[length];
          ImageUtil.\u200E‫​⁪⁮⁭‪‪⁬‪‭​⁪‍‭⁪⁫‎‌⁯‭⁯‏‌​⁬‪⁫⁮‍‭⁮⁯‫⁪‍‫‫‫‬‮(num3, numArray, 0, length);
          num1 = (int) num5 * 213633388 ^ -148129539;
          continue;
        case 9:
          num4 += 4;
          num1 = -1600457907;
          continue;
        case 10:
          ++num2;
          num1 = (int) num5 * 1725988939 ^ 1816568980;
          continue;
        case 11:
          ++num2;
          numArray[num4 + num2] = (byte) ((double) numArray[num4 + num2] * opacity);
          num1 = (int) num5 * 1891799804 ^ 219751162;
          continue;
        case 12:
          rectangle = new Rectangle(0, 0, ImageUtil.\u202C⁪‮‎‪⁯‏‬⁫‬⁪‌⁯‎‭⁬⁭‮‫‬⁫⁪⁪​⁬⁮‪⁪‍‬⁮‎⁪⁪‭⁮‭‍⁯⁪‮((Image) bitmap), ImageUtil.\u206F⁫‮‭⁫⁫‪‪‪‪‎‮⁯⁯‌⁯‪‌‮⁭⁭⁬‌⁫⁫‌‭⁫‬⁫⁪‬‮‌‎‌‪⁫⁬‬‮((Image) bitmap));
          num1 = (int) num5 * 153777481 ^ -57428159;
          continue;
        case 13:
          num2 = 0;
          num1 = -838696569;
          continue;
        case 14:
          num1 = (int) num5 * -796454282 ^ -728525274;
          continue;
        case 15:
          int num7 = numArray[num4 + 4 - 1] != (byte) 0 ? 501930376 : (num7 = 229054638);
          num1 = num7 ^ (int) num5 * 55679888;
          continue;
        case 16:
          flag = num4 < numArray.Length;
          num1 = -430635023;
          continue;
        case 17:
          ++num2;
          num1 = (int) num5 * -1885154807 ^ 1010103289;
          continue;
        case 18:
          image = originalImage;
          num1 = (int) num5 * -957730715 ^ 1450748121;
          continue;
        case 19:
          goto label_1;
        case 20:
          num1 = -2133268660;
          continue;
        case 21:
          ImageUtil.\u206E⁯‬⁭⁭⁯⁪⁮⁮‌⁭‌⁭⁫‫‎⁭​​​⁬‍⁬⁮‮‬⁮‍‬⁯‭⁯‍⁫⁫​‍⁭‪‍‮(bitmap, bitmapData);
          num1 = (int) num5 * -600503614 ^ -422922190;
          continue;
        case 23:
          num1 = (int) num5 * -339132354 ^ 1413448536;
          continue;
        case 24:
          num3 = ImageUtil.\u206C‏‪‍‌​⁫⁮​​‏‍⁬‎⁮‬⁪‬⁯⁯⁫‫​‭⁭‪‎‬⁬⁮⁮‮‏⁫‪⁯‬⁭⁫‮(bitmapData);
          length = ImageUtil.\u202C⁪‮‎‪⁯‏‬⁫‬⁪‌⁯‎‭⁬⁭‮‫‬⁫⁪⁪​⁬⁮‪⁪‍‬⁮‎⁪⁪‭⁮‭‍⁯⁪‮((Image) bitmap) * ImageUtil.\u206F⁫‮‭⁫⁫‪‪‪‪‎‮⁯⁯‌⁯‪‌‮⁭⁭⁬‌⁫⁫‌‭⁫‬⁫⁪‬‮‌‎‌‪⁫⁬‬‮((Image) bitmap) * 4;
          num1 = (int) num5 * 608062959 ^ 638088179;
          continue;
        case 25:
          num4 = 0;
          num1 = (int) num5 * -2103314992 ^ 533730749;
          continue;
        default:
          goto label_27;
      }
    }
label_27:
    return image;
label_14:
    bitmap = (Bitmap) ImageUtil.\u206C‪‭⁬⁯⁭⁯⁯⁭‮‭‎‬⁪‭‭‍‍‍‭‌⁬⁫‌⁫‫‭‫⁯‏⁮‫‍⁯⁪⁮⁫‏⁫‮(originalImage);
    num1 = -406329878;
    goto label_2;
  }

  static PixelFormat \u206F⁭‏​‌⁯‏​‏‬‭‭⁭⁮⁭‬‬‪‏‌‪‪⁬⁫⁯‎‏⁪‬⁫⁫‮‎‏‎⁪⁫‪‭‌‮([In] Image obj0) => obj0.PixelFormat;

  static object \u206C‪‭⁬⁯⁭⁯⁯⁭‮‭‎‬⁪‭‭‍‍‍‭‌⁬⁫‌⁫‫‭‫⁯‏⁮‫‍⁯⁪⁮⁫‏⁫‮([In] Image obj0) => obj0.Clone();

  static int \u202C⁪‮‎‪⁯‏‬⁫‬⁪‌⁯‎‭⁬⁭‮‫‬⁫⁪⁪​⁬⁮‪⁪‍‬⁮‎⁪⁪‭⁮‭‍⁯⁪‮([In] Image obj0) => obj0.Width;

  static int \u206F⁫‮‭⁫⁫‪‪‪‪‎‮⁯⁯‌⁯‪‌‮⁭⁭⁬‌⁫⁫‌‭⁫‬⁫⁪‬‮‌‎‌‪⁫⁬‬‮([In] Image obj0) => obj0.Height;

  static BitmapData \u200B⁮⁮‍‎⁯‎‫‍⁯​⁫‫‬​⁬⁪‫‎‎‎‍‮⁮‍‮‫‮‭‪‫⁫‫⁬⁯‬‎​‌‌‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u206C‏‪‍‌​⁫⁮​​‏‍⁬‎⁮‬⁪‬⁯⁯⁫‫​‭⁭‪‎‬⁬⁮⁮‮‏⁫‪⁯‬⁭⁫‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u200E‫​⁪⁮⁭‪‪⁬‪‭​⁪‍‭⁪⁫‎‌⁯‭⁯‏‌​⁬‪⁫⁮‍‭⁮⁯‫⁪‍‫‫‫‬‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u202D‌‫‮‮‏⁯⁫‪⁭‬⁬‬⁯⁯‏⁮⁭⁮⁮‮‫‫⁮‌​⁭⁬⁮‭‬‎‫‭‭‬⁪‌⁭⁪‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206E⁯‬⁭⁭⁯⁪⁮⁮‌⁭‌⁭⁫‫‎⁭​​​⁬‍⁬⁮‮‬⁮‍‬⁯‭⁯‍⁫⁫​‍⁭‪‍‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
