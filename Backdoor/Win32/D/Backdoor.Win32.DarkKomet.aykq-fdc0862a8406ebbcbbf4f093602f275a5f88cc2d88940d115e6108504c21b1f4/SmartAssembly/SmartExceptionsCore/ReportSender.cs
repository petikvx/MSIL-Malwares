// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ReportSender
// Assembly: 5, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D96FE905-3567-4568-B7BF-8C667D038E34
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.DarkKomet.aykq-fdc0862a8406ebbcbbf4f093602f275a5f88cc2d88940d115e6108504c21b1f4.exe

using SmartAssembly.Delegates;
using SmartAssembly.Zip;
using System;
using System.Net;
using System.Text;
using System.Threading;

namespace SmartAssembly.SmartExceptionsCore
{
  public class ReportSender
  {
    protected const string AssemblyID = "{100fd8cd-4fe2-410e-8c33-ae1af08ef31d}";
    private const string LicenseID = "{be78a0c5-c47c-4127-a428-52bdc580a02f}";
    private const string CryptoPublicKey = "{bf13b64c-b3d2-4165-b3f5-7f852d4744cf}";
    private IWebProxy m_Proxy;
    private SendingReportFeedbackEventHandler SendingReportFeedback;
    [NonSerialized]
    internal static GetString \u008D;

    public void SetProxy(IWebProxy proxy) => this.m_Proxy = proxy;

    internal bool SendReport(
      byte[] reportData,
      ReportSender.NotificationEmailSettings notificationEmailSettings)
    {
      byte[] data;
      bool flag;
      try
      {
        data = SimpleZip.Zip(reportData);
      }
      catch (Exception ex)
      {
        this.InvokeSendingReportFeedback(SendingReportStep.PreparingReport, SimpleZip.ExceptionMessage);
        flag = false;
        goto label_9;
      }
      if (true)
        goto label_11;
label_6:
      WebServicesClient services = new WebServicesClient(ReportSender.\u008D(1054));
      if (this.m_Proxy != null)
      {
        services.SetProxy(this.m_Proxy);
        goto label_8;
      }
      else
        goto label_8;
label_11:
      byte[] numArray = Encryption.Encrypt(data, ReportSender.\u008D(728));
      byte[] encryptedData;
      if (true)
        encryptedData = numArray;
      if (encryptedData != null)
      {
        this.InvokeSendingReportFeedback(SendingReportStep.ConnectingToServer);
        goto label_6;
      }
      else
      {
        this.InvokeSendingReportFeedback(SendingReportStep.PreparingReport, Encryption.ExceptionMessage);
        int num = 0;
        return num != 0 ? num != 0 : num != 0;
      }
label_8:
      ReportSender.AfterLoginClosure afterLoginClosure = new ReportSender.AfterLoginClosure(this, encryptedData, services, notificationEmailSettings);
      services.LoginToServer(new StringCallback(afterLoginClosure.AfterLogin));
      return afterLoginClosure.Succeeded;
label_9:
      if (true)
        return flag;
      goto label_8;
    }

    public event SendingReportFeedbackEventHandler SendingReportFeedback
    {
      add
      {
        SendingReportFeedbackEventHandler feedbackEventHandler1;
        if (true)
        {
          if (true)
            feedbackEventHandler1 = this.SendingReportFeedback;
        }
        else
          goto label_5;
label_2:
        SendingReportFeedbackEventHandler comparand;
        if (true)
        {
          SendingReportFeedbackEventHandler feedbackEventHandler2 = feedbackEventHandler1;
          if (true)
          {
            comparand = feedbackEventHandler2;
            goto label_9;
          }
          else
            goto label_9;
        }
label_4:
        if (feedbackEventHandler1 != comparand)
          goto label_2;
label_5:
        if (true)
          return;
label_9:
        feedbackEventHandler1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler>(ref this.SendingReportFeedback, comparand + value, comparand);
        goto label_4;
      }
      remove
      {
        SendingReportFeedbackEventHandler feedbackEventHandler1;
        if (true)
        {
          if (true)
            feedbackEventHandler1 = this.SendingReportFeedback;
        }
        else
          goto label_5;
label_2:
        SendingReportFeedbackEventHandler comparand;
        if (true)
        {
          SendingReportFeedbackEventHandler feedbackEventHandler2 = feedbackEventHandler1;
          if (true)
          {
            comparand = feedbackEventHandler2;
            goto label_9;
          }
          else
            goto label_9;
        }
label_4:
        if (feedbackEventHandler1 != comparand)
          goto label_2;
label_5:
        if (true)
          return;
label_9:
        feedbackEventHandler1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler>(ref this.SendingReportFeedback, comparand - value, comparand);
        goto label_4;
      }
    }

    protected void InvokeSendingReportFeedback(
      SendingReportStep step,
      string errorMessage,
      string reportId)
    {
      SendingReportFeedbackEventHandler sendingReportFeedback = this.SendingReportFeedback;
      SendingReportFeedbackEventHandler feedbackEventHandler;
      if (true)
        feedbackEventHandler = sendingReportFeedback;
      if (feedbackEventHandler == null)
        return;
      feedbackEventHandler((object) this, new SendingReportFeedbackEventArgs(step, errorMessage, reportId));
    }

    protected void InvokeSendingReportFeedback(SendingReportStep step, string errorMessage) => this.InvokeSendingReportFeedback(step, errorMessage, string.Empty);

    protected void InvokeSendingReportFeedback(SendingReportStep step) => this.InvokeSendingReportFeedback(step, string.Empty);

    static ReportSender() => SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (ReportSender));

    private sealed class AfterLoginClosure
    {
      private readonly ReportSender m_ReportSender;
      private readonly byte[] m_EncryptedData;
      private readonly WebServicesClient m_Services;
      private readonly ReportSender.NotificationEmailSettings m_NotificationEmailSettings;
      public bool Succeeded = true;
      [NonSerialized]
      internal static GetString \u001A;

      public AfterLoginClosure(
        ReportSender reportSender,
        byte[] encryptedData,
        WebServicesClient services,
        ReportSender.NotificationEmailSettings notificationEmailSettings)
      {
        this.m_ReportSender = reportSender;
        this.m_NotificationEmailSettings = notificationEmailSettings;
        this.m_Services = services;
        this.m_EncryptedData = encryptedData;
      }

      public void AfterLogin(string loginResult)
      {
        if (!(loginResult == ReportSender.AfterLoginClosure.\u001A(1109)))
        {
          string errorMessage = loginResult;
          if (this.m_ReportSender.SendingReportFeedback != null)
            this.m_ReportSender.SendingReportFeedback((object) this, new SendingReportFeedbackEventArgs(SendingReportStep.ConnectingToServer, errorMessage));
          this.Succeeded = false;
        }
        else
        {
          this.m_ReportSender.InvokeSendingReportFeedback(SendingReportStep.Transfering);
          byte[] bytes = Encoding.UTF8.GetBytes(ReportSender.AfterLoginClosure.\u001A(1114));
          byte[] numArray = new byte[bytes.Length + this.m_EncryptedData.Length];
          Array.Copy((Array) bytes, (Array) numArray, bytes.Length);
          Array.Copy((Array) this.m_EncryptedData, 0, (Array) numArray, bytes.Length, this.m_EncryptedData.Length);
          ReportSender.AfterUploadClosure afterUploadClosure = new ReportSender.AfterUploadClosure(this.m_ReportSender);
          this.m_Services.Upload(numArray, this.m_NotificationEmailSettings.EmailAddress, this.m_NotificationEmailSettings.AppFriendlyName, this.m_NotificationEmailSettings.BuildFriendlyNumber, new StringCallback(afterUploadClosure.AfterUpload));
          this.Succeeded = afterUploadClosure.Succeeded;
        }
      }

      static AfterLoginClosure() => SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (ReportSender.AfterLoginClosure));
    }

    private sealed class AfterUploadClosure
    {
      private readonly ReportSender m_ReportSender;
      public bool Succeeded;
      [NonSerialized]
      internal static GetString \u008D;

      public AfterUploadClosure(ReportSender reportSender) => this.m_ReportSender = reportSender;

      public void AfterUpload(string transferingResult)
      {
label_0:
        if (transferingResult.StartsWith(ReportSender.AfterUploadClosure.\u008D(1170)))
        {
          if (true)
          {
            this.m_ReportSender.InvokeSendingReportFeedback(SendingReportStep.Transfering, transferingResult);
            this.Succeeded = false;
            return;
          }
        }
        else
          goto label_6;
label_3:
        if (true)
        {
          if (true)
            return;
        }
        else
          goto label_0;
label_6:
        this.m_ReportSender.InvokeSendingReportFeedback(SendingReportStep.Finished, string.Empty, transferingResult);
        this.Succeeded = true;
        goto label_3;
      }

      static AfterUploadClosure() => SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (ReportSender.AfterUploadClosure));
    }

    internal sealed class NotificationEmailSettings
    {
      public static ReportSender.NotificationEmailSettings NullEmailSettings = new ReportSender.NotificationEmailSettings((string) null, (string) null, (string) null);
      private readonly string m_EmailAddress;
      private readonly string m_AppFriendlyName;
      private readonly string m_BuildFriendlyNumber;

      public NotificationEmailSettings(
        string emailAddress,
        string appFriendlyName,
        string buildFriendlyNumber)
      {
        this.m_EmailAddress = emailAddress;
        this.m_BuildFriendlyNumber = buildFriendlyNumber;
        this.m_AppFriendlyName = appFriendlyName;
      }

      public string BuildFriendlyNumber => this.m_BuildFriendlyNumber;

      public string AppFriendlyName => this.m_AppFriendlyName;

      public string EmailAddress => this.m_EmailAddress;
    }
  }
}
