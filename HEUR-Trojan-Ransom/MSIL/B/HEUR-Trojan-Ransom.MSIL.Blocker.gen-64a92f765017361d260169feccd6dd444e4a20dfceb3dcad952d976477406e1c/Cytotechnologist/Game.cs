// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: EncoderExceptionFallbackBuff, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1A176EC6-F8F7-4000-B7C0-CE79157CC27B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-64a92f765017361d260169feccd6dd444e4a20dfceb3dcad952d976477406e1c.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u202E‎⁬‮⁪⁮⁭‮⁫‪‫​‌‭‫⁮‌‪⁫⁮​‪‭⁮⁮⁮‏⁮⁯⁭‎‫⁬‎‌‬‏‮⁮⁮‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = 1835275018;
        int index;
        PlayerState[] playerStates;
        bool flag;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 656399142)) % 14U)
          {
            case 0:
              finished2 = true;
              num1 = (int) num2 * -1527750211 ^ 98563140;
              continue;
            case 1:
              finished2 = true;
              num1 = (int) num2 * 214861154 ^ -1404794628;
              continue;
            case 2:
              int num3 = finished1 ? 300442371 : (num3 = 139487076);
              num1 = num3 ^ (int) num2 * 1414869212;
              continue;
            case 3:
              int num4;
              num1 = num4 = index >= playerStates.Length ? 656467170 : (num4 = 1524101313);
              continue;
            case 4:
              ++index;
              num1 = 1448599557;
              continue;
            case 5:
              finished2 = false;
              num1 = (int) num2 * -1981894180 ^ -1483012740;
              continue;
            case 6:
              num1 = (int) num2 * 276434368 ^ 322093040;
              continue;
            case 7:
              num1 = (int) num2 * 686800726 ^ -941095393;
              continue;
            case 8:
              playerStates = this._playerStates;
              num1 = 251319827;
              continue;
            case 9:
              index = 0;
              num1 = (int) num2 * -1001210734 ^ -1138290885;
              continue;
            case 10:
              goto label_1;
            case 11:
              flag = playerStates[index].State == State.Playing;
              num1 = 936079363;
              continue;
            case 13:
              int num5 = !flag ? 281236606 : (num5 = 1210975839);
              num1 = num5 ^ (int) num2 * -1113773732;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = -242179579;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -950621247)) % 11U)
        {
          case 0:
            this._finished = false;
            num1 = (int) num2 * -667525557 ^ -1687081165;
            continue;
          case 1:
            num1 = (int) num2 * -1115144271 ^ -459431559;
            continue;
          case 2:
            this.Winners.Clear();
            num1 = (int) num2 * 109015961 ^ 1381474191;
            continue;
          case 3:
            num1 = (int) num2 * -2080297924 ^ -1825248339;
            continue;
          case 4:
            this._currentTurn = 0;
            num1 = (int) num2 * 2078861789 ^ -29184245;
            continue;
          case 5:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 1984850163 ^ 656099819;
            continue;
          case 6:
            this.Losers.Clear();
            num1 = (int) num2 * 1632544547 ^ 995821954;
            continue;
          case 8:
            goto label_1;
          case 9:
            this.ShuffleCards();
            num1 = (int) num2 * -1506966613 ^ 1234818551;
            continue;
          case 10:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 2008711723 ^ -233384299;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = 1670867038;
      Player player;
      PlayerState playerState;
      int num2;
      int planningCardsCount;
      bool flag;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 847053567)) % 24U)
        {
          case 0:
            num1 = (int) num3 * -1205970585 ^ -217090508;
            continue;
          case 1:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 1202944320 ^ -1302278479;
            continue;
          case 2:
            int num4 = flag ? -946443281 : (num4 = -782923872);
            num1 = num4 ^ (int) num3 * 2055062681;
            continue;
          case 3:
            ++index;
            num1 = (int) num3 * 147989019 ^ -1570606458;
            continue;
          case 4:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            int num5;
            num1 = num5 = !player.UseOneMorePlanningSprint ? 1283989740 : (num5 = 1291024375);
            continue;
          case 5:
            num1 = 630258936;
            continue;
          case 6:
            goto label_3;
          case 7:
            num1 = (int) num3 * -1453620367 ^ -810764128;
            continue;
          case 8:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 322861068;
            continue;
          case 9:
            num1 = (int) num3 * 1167198561 ^ 902717222;
            continue;
          case 10:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 2138677580 ^ 757391027;
            continue;
          case 11:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 193589660 ^ 696108108;
            continue;
          case 12:
            goto label_1;
          case 13:
            num2 = 0;
            num1 = 377608587;
            continue;
          case 14:
            playerState.State = State.Playing;
            num1 = (int) num3 * 1368272455 ^ -1096505985;
            continue;
          case 15:
            num1 = (int) num3 * 2059203727 ^ 1264888258;
            continue;
          case 16:
            int num6;
            num1 = num6 = index >= this.Players.Length ? 2133306065 : (num6 = 452830306);
            continue;
          case 17:
            num2 = 0;
            num1 = (int) num3 * 1742240339 ^ 215287778;
            continue;
          case 18:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -1325527844 ^ -1342578586;
            continue;
          case 19:
            flag = num2 > 0;
            num1 = 1859542853;
            continue;
          case 20:
            num1 = 510837311;
            continue;
          case 21:
            playerState.Sprint = 1;
            num1 = (int) num3 * 1555695592 ^ 89597880;
            continue;
          case 22:
            int num7 = planningCardsCount == 0 ? 1357155538 : (num7 = 875279283);
            num1 = num7 ^ (int) num3 * 1556887864;
            continue;
          case 23:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * -2041883637 ^ 809093259;
            continue;
          default:
            goto label_26;
        }
      }
label_3:
      return;
label_26:;
    }

    public void TurnState()
    {
label_1:
      int num1 = -853914224;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -466659151)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            ++this._currentPlayer;
            int num3 = this._currentPlayer >= this.Players.Length ? 400766111 : (num3 = 1461595225);
            num1 = num3 ^ (int) num2 * -1472007502;
            continue;
          case 3:
            num1 = (int) num2 * 1495125414 ^ 344806700;
            continue;
          case 4:
            this._currentPlayer = 0;
            num1 = (int) num2 * -1063592773 ^ 1363402001;
            continue;
          case 5:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1713749544 ^ 671660190;
            continue;
          case 6:
            num1 = (int) num2 * -1979203228 ^ -1014193886;
            continue;
          case 7:
            num1 = (int) num2 * -1046917842 ^ -1123015471;
            continue;
          case 8:
            flag = this._currentTurn > 0;
            num1 = (int) num2 * -1555983070 ^ -2072037409;
            continue;
          case 9:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u202E⁪⁬‭‎⁭⁮⁫‎‮‭‍⁬‌‪⁮‪⁭​‍‎‌‎⁯⁪‫⁬⁯⁫⁭‌⁪⁮‏⁪⁮⁮‬⁬‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -1477098744 ^ -1478781825;
            continue;
          case 10:
            int num4 = !flag ? -387071138 : (num4 = -1912658060);
            num1 = num4 ^ (int) num2 * -1181830652;
            continue;
          case 11:
            this.Print((object) Game.\u200F‮‮‍‮⁯‭⁫⁮‭​⁭‮​⁫​⁪⁫​​‏‪‮‌⁯⁮‬⁯‍⁪⁪‌⁫‌⁬⁬‍‎⁫⁯‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -1849956372;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      this.PlayerTurn(this._currentPlayer);
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = 1293805491;
      while (true)
      {
        uint num2;
        int index;
        int num3;
        bool flag1;
        bool flag2;
        PlayerState playerState1;
        bool flag3;
        PlayerState playerState2;
        int num4;
        Card card;
        bool flag4;
        int num5;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        int num6;
        switch ((num2 = (uint) (num1 ^ 798523680)) % 81U)
        {
          case 0:
            ++playerState1.Sprint;
            num1 = (int) num2 * 877100320 ^ -834158759;
            continue;
          case 1:
            num1 = (int) num2 * 1285366793 ^ -579311901;
            continue;
          case 2:
            num1 = 1212326620;
            continue;
          case 3:
            num1 = 1173752396;
            continue;
          case 4:
            flag9 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 581314657;
            continue;
          case 5:
            num1 = (int) num2 * -1929306231 ^ 869102703;
            continue;
          case 6:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 775696972 ^ -1802064476;
            continue;
          case 7:
            card = this.DrawCard();
            num1 = 1244152887;
            continue;
          case 8:
            num1 = (int) num2 * 126018103 ^ -914942923;
            continue;
          case 9:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 1277258616 ^ 1093138844;
            continue;
          case 10:
            flag13 = !this.Losers.Contains(num5);
            num1 = 1749460135;
            continue;
          case 11:
            int num7 = flag8 ? -361912463 : (num7 = -1480324527);
            num1 = num7 ^ (int) num2 * 707033078;
            continue;
          case 12:
            int num8 = !flag6 ? 2066422269 : (num8 = 1688252500);
            num1 = num8 ^ (int) num2 * 1403081580;
            continue;
          case 13:
            flag12 = num5 < this._playerStates.Length;
            num1 = 598095850;
            continue;
          case 14:
            num1 = (int) num2 * -1799603309 ^ -2131015994;
            continue;
          case 15:
            num1 = (int) num2 * 934467927 ^ -1582109508;
            continue;
          case 16:
            num1 = 1280578941;
            continue;
          case 17:
            int num9 = flag11 ? -933151580 : (num9 = -298664488);
            num1 = num9 ^ (int) num2 * -225585900;
            continue;
          case 18:
            int num10 = this.Losers.Contains(playerIndex) ? 365061238 : (num10 = 77848451);
            num1 = num10 ^ (int) num2 * -1074087095;
            continue;
          case 19:
            ++num5;
            num1 = 1901819105;
            continue;
          case 20:
            flag1 = false;
            num1 = 1135608614;
            continue;
          case 21:
            int num11 = !flag5 ? 1885903711 : (num11 = 1651634311);
            num1 = num11 ^ (int) num2 * -729000772;
            continue;
          case 22:
            num1 = (int) num2 * 394609551 ^ -736923723;
            continue;
          case 23:
            index = 0;
            num1 = (int) num2 * 1998051184 ^ 400878064;
            continue;
          case 24:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202E⁪⁬‭‎⁭⁮⁫‎‮‭‍⁬‌‪⁮‪⁭​‍‎‌‎⁯⁪‫⁬⁯⁫⁭‌⁪⁮‏⁪⁮⁮‬⁬‮("\t", playerState3 != null ? Game.\u206E⁫​⁮⁭‭‎‫⁬⁬‫‬⁮​⁮‬⁫​‮‍⁮‏⁯‏‭‏‎‭‍⁬‮⁪⁯⁫‭​⁪‌‮‏‮((object) playerState3) : (string) null));
            num1 = 1398995915;
            continue;
          case 25:
            flag5 = playerState1.Resources < 0;
            num1 = (int) num2 * -1077858933 ^ 465600677;
            continue;
          case 26:
            goto label_1;
          case 27:
            num1 = (int) num2 * -1755021408 ^ 1766931341;
            continue;
          case 28:
            playerState1.State = State.Lose;
            num1 = (int) num2 * 1311304758 ^ -1746945756;
            continue;
          case 29:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag6 ? (object) "ALL " : (object) "", flag4 ? (object) "receives" : (object) "pays", (object) Game.\u202E⁯‮‌⁫⁯‮⁮⁮‎‍⁮‫‎⁯‍‍‪⁬‮⁮‬⁮⁯​⁯‪‍‮​‏⁪⁭‌⁪​‍‏‪‪‮(num4), flag1 ? (object) "advance" : (object) "stay");
            num1 = 718961;
            continue;
          case 30:
            this.Losers.Add(index);
            num1 = (int) num2 * 455485208 ^ 1363765119;
            continue;
          case 31:
            int num12 = flag7 ? -1615720721 : (num12 = -1561363765);
            num1 = num12 ^ (int) num2 * 230061019;
            continue;
          case 32:
            goto label_3;
          case 33:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -1781564039 ^ -912837611;
            continue;
          case 34:
            flag1 = true;
            num4 = card.Impact;
            num1 = 776403611;
            continue;
          case 35:
            num1 = (int) num2 * -50492386 ^ -520452155;
            continue;
          case 36:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 592142491 ^ -1808598631;
            continue;
          case 37:
            int num13 = playerState1.State == 0 ? 1725398089 : (num13 = 714133463);
            num1 = num13 ^ (int) num2 * -416260957;
            continue;
          case 38:
            flag1 = true;
            num1 = (int) num2 * 1443536458 ^ 196755736;
            continue;
          case 39:
            this._finished = true;
            num5 = 0;
            num1 = (int) num2 * -533766547 ^ -544549976;
            continue;
          case 40:
            num1 = (int) num2 * 1690591980 ^ -767367860;
            continue;
          case 41:
            int num14 = this.Rules.OnlyOneWinner ? 1892457429 : (num14 = 943346074);
            num1 = num14 ^ (int) num2 * -1867670707;
            continue;
          case 42:
            flag10 = flag1;
            num1 = 1027923187;
            continue;
          case 43:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -1990956074 ^ 985179670;
            continue;
          case 44:
            int num15 = !flag12 ? -491128639 : (num15 = -1999337103);
            num1 = num15 ^ (int) num2 * 1418987243;
            continue;
          case 45:
            int num16 = flag13 ? -1980763571 : (num16 = -1896572646);
            num1 = num16 ^ (int) num2 * -1289459389;
            continue;
          case 46:
            num1 = (int) num2 * -1297277478 ^ -1175361386;
            continue;
          case 47:
            flag4 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 1199347459 ^ 296730537;
              continue;
            }
            num6 = 0;
            break;
          case 48:
            flag2 = playerState1.Sprint < 0;
            num1 = 468507610;
            continue;
          case 49:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * 915983934 ^ 1646322631;
            continue;
          case 50:
            playerState1.State = State.Won;
            num1 = (int) num2 * 148829909 ^ 1902177091;
            continue;
          case 51:
            flag1 = num3 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -564511309 ^ 1951506458;
            continue;
          case 52:
            flag11 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 1828257619;
            continue;
          case 53:
            num1 = 57486332;
            continue;
          case 54:
            ++index;
            num1 = 346590128;
            continue;
          case 55:
            num1 = 40742626;
            continue;
          case 56:
            num1 = (int) num2 * -1102606132 ^ -996372742;
            continue;
          case 57:
            num1 = (int) num2 * 972140418 ^ 522645130;
            continue;
          case 58:
            playerState2.State = State.Lose;
            num1 = 930391543;
            continue;
          case 59:
            num1 = (int) num2 * -2004773550 ^ -1995879985;
            continue;
          case 60:
            num1 = (int) num2 * 392424709 ^ 212768347;
            continue;
          case 61:
            num1 = 1137540812;
            continue;
          case 62:
            int num17 = flag10 ? -1133752096 : (num17 = -1599922547);
            num1 = num17 ^ (int) num2 * 1687999196;
            continue;
          case 63:
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u202E⁪⁬‭‎⁭⁮⁫‎‮‭‍⁬‌‪⁮‪⁭​‍‎‌‎⁯⁪‫⁬⁯⁫⁭‌⁪⁮‏⁪⁮⁮‬⁬‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 1921556381 ^ 986452054;
            continue;
          case 64:
            flag3 = !this.Losers.Contains(index);
            num1 = (int) num2 * -643426325 ^ 1972033263;
            continue;
          case 65:
            num1 = 817970730;
            continue;
          case 66:
            int num18;
            num1 = num18 = index < this._playerStates.Length ? 1807036795 : (num18 = 99931544);
            continue;
          case 67:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -846631737 ^ -693334207;
            continue;
          case 68:
            num1 = (int) num2 * -942396172 ^ -1076382852;
            continue;
          case 69:
            int num19 = !flag3 ? -292172174 : (num19 = -597557273);
            num1 = num19 ^ (int) num2 * -300642821;
            continue;
          case 70:
            num4 = Game.\u206D⁯⁪‬​‮‍‭‫‫⁭‎‌⁭‬‬⁯⁫‍⁫⁯⁪⁫⁯‪‭⁬⁫⁪​⁬​‪‭‏‪⁫⁬⁪‪‮(0, num3);
            num1 = (int) num2 * -883716772 ^ -135974753;
            continue;
          case 71:
            flag8 = num5 == playerIndex;
            num1 = (int) num2 * 618533207 ^ -839556290;
            continue;
          case 72:
            int num20 = !flag9 ? -1863439817 : (num20 = -143196025);
            num1 = num20 ^ (int) num2 * -499501091;
            continue;
          case 73:
            num1 = 934568885;
            continue;
          case 74:
            num1 = (int) num2 * -1660816190 ^ -1918071910;
            continue;
          case 75:
            num3 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 1407006371 ^ 306976798;
            continue;
          case 76:
            this.Losers.Add(num5);
            num1 = (int) num2 * 604875502 ^ 1518889055;
            continue;
          case 77:
            flag7 = !flag4;
            num1 = (int) num2 * 895735795 ^ 798561302;
            continue;
          case 78:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 79:
            int num21 = flag2 ? 1404401592 : (num21 = 1503339572);
            num1 = num21 ^ (int) num2 * -2041088088;
            continue;
          case 80:
            playerState2.Resources -= Game.\u206D⁯⁪‬​‮‍‭‫‫⁭‎‌⁭‬‬⁯⁫‍⁫⁯⁪⁫⁯‪‭⁬⁫⁪​⁬​‪‭‏‪⁫⁬⁪‪‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            int num22 = playerState2.Resources < 0 ? -1011019591 : (num22 = -487779708);
            num1 = num22 ^ (int) num2 * 1666450842;
            continue;
          default:
            goto label_86;
        }
        flag6 = num6 != 0;
        num1 = 470689806;
      }
label_3:
      return;
label_86:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -904784228;
      Card card1;
      Card card2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -967258579)) % 8U)
        {
          case 0:
            card1 = this._deck[0];
            this._deck.RemoveAt(0);
            num1 = -118229766;
            continue;
          case 1:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 1845347152 ^ -1783618591;
            continue;
          case 2:
            this.ShuffleCards();
            num1 = (int) num2 * 981755763 ^ -1448942669;
            continue;
          case 3:
            goto label_1;
          case 4:
            int num3 = flag ? 1478340639 : (num3 = 1963646917);
            num1 = num3 ^ (int) num2 * 226284368;
            continue;
          case 5:
            num1 = (int) num2 * 532016154 ^ 1594673;
            continue;
          case 7:
            card2 = card1;
            num1 = (int) num2 * -1410394762 ^ -1022317910;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = -1645947147;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -576682348)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 1102650617 ^ 1184347979;
            continue;
          case 1:
            index = 0;
            num1 = (int) num2 * -1202989361 ^ -748676701;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * -968409807 ^ -1619012667;
            continue;
          case 4:
            int num3 = flag ? -715345450 : (num3 = -178352742);
            num1 = num3 ^ (int) num2 * 2115011083;
            continue;
          case 5:
            goto label_1;
          case 6:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206E⁫​⁮⁭‭‎‫⁬⁬‫‬⁮​⁮‬⁫​‮‍⁮‏⁯‏‭‏‎‭‍⁬‮⁪⁯⁫‭​⁪‌‮‏‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202E⁪‫‍​⁭​‌⁭‫‬‏‍‫⁭‏‪‮⁫⁭‮‏⁬‎‪⁬⁬⁮‮⁯⁫‌‎‏⁫‭‮‬⁭⁭‮(strArray);
            ++index;
            num1 = -1069965357;
            continue;
          case 7:
            flag = index < this._playerStates.Length;
            num1 = -1800109384;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1861535081;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -105254546)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 829849345 ^ 1205264997;
            continue;
          case 2:
            num1 = (int) num2 * 1666543246 ^ -1272976771;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = 689742112;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 320474450)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            Game.\u202E‫‬‬‏⁪‍‪⁭‌‭‌⁫‬‮‌⁯‍⁪‌‎⁬⁭⁬‍‫‏‌‪⁪‏⁯‎‭‏‪⁮‪‏⁯‮(this._buffer, Game.\u206C‪‫‏‌​⁮‫‫‪‌‌‮‭‌‍⁯⁫⁫‪‌‫⁭‪‭⁫⁯⁮‌‏‭⁬‎⁮​⁬‭‭⁮⁪‮(Game.\u206E⁫​⁮⁭‭‎‫⁬⁬‫‬⁮​⁮‬⁫​‮‍⁮‏⁯‏‭‏‎‭‍⁬‮⁪⁯⁫‭​⁪‌‮‏‮(text), more));
            num1 = (int) num2 * 2111840352 ^ 235235727;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Random \u202E‎⁬‮⁪⁮⁭‮⁫‪‫​‌‭‫⁮‌‪⁫⁮​‪‭⁮⁮⁮‏⁮⁯⁭‎‫⁬‎‌‬‏‮⁮⁮‮([In] int obj0) => new Random(obj0);

    static string \u200F‮‮‍‮⁯‭⁫⁮‭​⁭‮​⁫​⁪⁫​​‏‪‮‌⁯⁮‬⁯‍⁪⁪‌⁫‌⁬⁬‍‎⁫⁯‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202E⁪⁬‭‎⁭⁮⁫‎‮‭‍⁬‌‪⁮‪⁭​‍‎‌‎⁯⁪‫⁬⁯⁫⁭‌⁪⁮‏⁪⁮⁮‬⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206D⁯⁪‬​‮‍‭‫‫⁭‎‌⁭‬‬⁯⁫‍⁫⁯⁪⁫⁯‪‭⁬⁫⁪​⁬​‪‭‏‪⁫⁬⁪‪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202E⁯‮‌⁫⁯‮⁮⁮‎‍⁮‫‎⁯‍‍‪⁬‮⁮‬⁮⁯​⁯‪‍‮​‏⁪⁭‌⁪​‍‏‪‪‮([In] int obj0) => Math.Abs(obj0);

    static string \u206E⁫​⁮⁭‭‎‫⁬⁬‫‬⁮​⁮‬⁫​‮‍⁮‏⁯‏‭‏‎‭‍⁬‮⁪⁯⁫‭​⁪‌‮‏‮([In] object obj0) => obj0.ToString();

    static string \u202E⁪‫‍​⁭​‌⁭‫‬‏‍‫⁭‏‪‮⁫⁭‮‏⁬‎‪⁬⁬⁮‮⁯⁫‌‎‏⁫‭‮‬⁭⁭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206C‪‫‏‌​⁮‫‫‪‌‌‮‭‌‍⁯⁫⁫‪‌‫⁭‪‭⁫⁯⁮‌‏‭⁬‎⁮​⁬‭‭⁮⁪‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202E‫‬‬‏⁪‍‪⁭‌‭‌⁫‬‮‌⁯‍⁪‌‎⁬⁭⁬‍‫‏‌‪⁪‏⁯‎‭‏‪⁮‪‏⁯‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
