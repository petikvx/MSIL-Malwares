// Decompiled with JetBrains decompiler
// Type: JSS.AppLog
// Assembly: JSS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CA27710C-27FC-4B6B-9AFB-DB45D81E1E20
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Backdoor.MSIL.Kamuza.gen-dd86898c784342fc11c42bea4c815cb536455ee709e7522fb64622d9171c465d.exe

using System;
using System.IO;
using System.Text;

namespace JSS
{
  internal class AppLog
  {
    public static string LogFile;

    public static string CreateLog(string theFileSpec)
    {
      try
      {
        AppLog.LogFile = (string) null;
        StreamWriter streamWriter = File.AppendText(theFileSpec);
        streamWriter.Write("\uFEFF\n");
        streamWriter.Close();
        AppLog.LogFile = new FileInfo(theFileSpec).FullName;
      }
      catch
      {
      }
      return AppLog.LogFile;
    }

    public static void Info(string theMessage) => AppLog.Text(DateTime.Now.ToString("yy.MM.dd HH:mm:ss  ") + string.Format("[INFO] {0}", (object) theMessage));

    public static void Error(string theStep, string theMessage) => AppLog.Text(DateTime.Now.ToString("yy.MM.dd HH:mm:ss  ") + string.Format("[ERROR] {0}: {1}", (object) theStep, (object) theMessage));

    public static void Text(string theText)
    {
      if (AppLog.LogFile == null)
        return;
      try
      {
        TextWriter textWriter = TextWriter.Synchronized((TextWriter) new StreamWriter(AppLog.LogFile, true, (Encoding) new UTF8Encoding()));
        textWriter.WriteLine(theText);
        textWriter.Close();
      }
      catch
      {
      }
    }

    public static void Delete()
    {
      try
      {
        if (!File.Exists(AppLog.LogFile))
          return;
        File.Delete(AppLog.LogFile);
      }
      catch
      {
      }
    }
  }
}
