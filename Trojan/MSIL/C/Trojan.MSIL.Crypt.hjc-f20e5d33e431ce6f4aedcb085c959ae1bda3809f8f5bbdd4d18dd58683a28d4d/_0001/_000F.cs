// Decompiled with JetBrains decompiler
// Type: .
// Assembly: syncui, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cab8849a7bf7875b
// MVID: B8136FDA-4EB0-4CA7-9502-281BC34A634B
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.hjc-f20e5d33e431ce6f4aedcb085c959ae1bda3809f8f5bbdd4d18dd58683a28d4d.exe

using \u0001;
using \u0005;
using \u0008;
using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace \u0001
{
  internal class \u000F : Form
  {
    internal \u0002 \u0001;
    internal Thread \u0001;
    internal CheckBox \u0001 = new CheckBox();
    internal Label \u0001 = new Label();
    internal Button \u0001 = new Button();
    internal Button \u0002 = new Button();
    internal Label \u0002 = new Label();
    internal \u0008.\u0004 \u0001 = new \u0008.\u0004();
    internal Panel \u0001 = new Panel();
    internal Panel \u0002 = new Panel();
    internal Button \u0003 = new Button();
    internal \u000E.\u0005 \u0001 = new \u000E.\u0005();
    internal \u0003.\u0003 \u0001 = new \u0003.\u0003(\u000F.\u001C(5824));
    internal \u0003.\u0003 \u0002 = new \u0003.\u0003(\u000F.\u001C(5861));
    internal \u0003.\u0003 \u0003 = new \u0003.\u0003(\u000F.\u001C(5890));
    internal \u0003.\u0003 \u0004 = new \u0003.\u0003(\u000F.\u001C(5919));
    internal Button \u0004 = new Button();
    internal Button \u0005 = new Button();
    internal Button \u0006 = new Button();
    internal \u0005.\u0004 \u0001 = new \u0005.\u0004(string.Format(\u000F.\u001C(5972), (object) \u000F.\u001C(2482)));
    internal \u0005.\u0004 \u0002 = new \u0005.\u0004(string.Format(\u000F.\u001C(6061), (object) \u000F.\u001C(2482), (object) \u000F.\u001C(2181)));
    internal \u0005.\u0005 \u0001 = new \u0005.\u0005();
    internal Button \u0007 = new Button();
    internal bool \u0001;
    [NonSerialized]
    internal static \u0007.\u0003 \u001C;

    private void \u0001([In] object obj0, [In] \u0001.\u0007 obj1)
    {
      try
      {
        do
        {
          // ISSUE: method pointer
          object obj = \u0002\u0004.\u001D\u0006((object) this, (Delegate) new \u000E.\u0004((object) this, __methodptr(\u0001)), new object[2]
          {
            obj0,
            (object) obj1
          });
        }
        while (false);
      }
      catch (InvalidOperationException ex)
      {
      }
    }

    private void \u0001([In] object obj0, [In] EventArgs obj1)
    {
      try
      {
        do
        {
          // ISSUE: method pointer
          object obj = \u0002\u0004.\u001D\u0006((object) this, (Delegate) new EventHandler((object) this, __methodptr(\u0001)), new object[2]
          {
            obj0,
            (object) obj1
          });
        }
        while (false);
      }
      catch (InvalidOperationException ex)
      {
      }
    }

    void Form.\u0001([In] CancelEventArgs obj0)
    {
      do
      {
        if (this.\u0001 == null)
          goto label_4;
label_1:
        if (true)
        {
          if (\u0017\u0002.\u007E\u001A\u0004((object) this.\u0001))
          {
            \u0014 obj = \u0014.\u007E\u0083;
            Thread thread = this.\u0001;
            if (true)
              obj((object) thread);
          }
        }
        else
          goto label_7;
label_4:
        if (true)
          \u0003\u0004.\u001E\u0006((object) this, obj0);
        else
          goto label_1;
label_7:;
      }
      while (false);
    }

    public \u000F([In] \u0004.\u0004 obj0, [In] \u0002 obj1)
    {
      \u0012.\u0001(this);
      int height = this.Height;
      this.\u0001 = obj1;
      this.\u0001.Text = obj1.\u0001.Message;
      int num = height + (this.\u0001.Height - this.FontHeight);
      if (!obj1.\u0003)
      {
        this.\u0001.Visible = false;
        num -= this.\u0001.Height;
      }
      if (num > this.Height)
        this.Height = num;
      if (obj1.\u0001)
      {
        \u0012.\u0001(obj0, new EventHandler(this.\u0001));
        this.\u0007.Visible = true;
        if (this.\u0007.Left < this.\u0001.Right)
          this.\u0001.Visible = false;
      }
      if (!obj1.\u0002)
      {
        this.\u0002.Enabled = false;
        if (this.\u0001.CanFocus)
          this.\u0001.Focus();
      }
      \u0012.\u0001(obj0, new \u000E.\u0004(this.\u0001));
    }

    static \u000F() => \u0002.\u0001(typeof (\u000F));
  }
}
