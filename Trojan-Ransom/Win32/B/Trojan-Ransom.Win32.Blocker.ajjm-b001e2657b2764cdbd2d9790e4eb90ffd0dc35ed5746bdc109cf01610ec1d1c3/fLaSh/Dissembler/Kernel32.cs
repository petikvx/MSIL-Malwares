// Decompiled with JetBrains decompiler
// Type: fLaSh.Dissembler.Kernel32
// Assembly: Pass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B2D05123-D1EE-4E11-B4EC-79932D637F25
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.ajjm-b001e2657b2764cdbd2d9790e4eb90ffd0dc35ed5746bdc109cf01610ec1d1c3.exe

using In2aXkPRwyNprNdGJT;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace fLaSh.Dissembler
{
  public abstract class Kernel32
  {
    public const uint LOAD_LIBRARY_AS_DATAFILE = 2;
    public const uint DONT_RESOLVE_DLL_REFERENCES = 1;
    public const uint LOAD_WITH_ALTERED_SEARCH_PATH = 8;
    public const uint LOAD_IGNORE_CODE_AUTHZ_LEVEL = 16;
    public const ushort LANG_NEUTRAL = 0;
    public const ushort SUBLANG_NEUTRAL = 0;

    [DllImport("kernel32.dll")]
    public static extern IntPtr LoadLibraryEx(string lpFileName, IntPtr hFile, uint dwFlags);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool FreeLibrary(IntPtr hModule);

    [DllImport("kernel32.dll", EntryPoint = "EnumResourceTypesW", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern bool EnumResourceTypes(
      IntPtr hModule,
      Kernel32.EnumResourceTypesDelegate lpEnumFunc,
      IntPtr lParam);

    [DllImport("kernel32.dll", EntryPoint = "EnumResourceNamesW", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern bool EnumResourceNames(
      IntPtr hModule,
      IntPtr lpszType,
      Kernel32.EnumResourceNamesDelegate lpEnumFunc,
      IntPtr lParam);

    [DllImport("kernel32.dll", EntryPoint = "EnumResourceLanguagesW", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern bool EnumResourceLanguages(
      IntPtr hModule,
      IntPtr lpszType,
      IntPtr lpszName,
      Kernel32.EnumResourceLanguagesDelegate lpEnumFunc,
      IntPtr lParam);

    [DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern IntPtr FindResource(
      IntPtr hModule,
      IntPtr lpszName,
      IntPtr lpszType);

    [DllImport("kernel32.dll", EntryPoint = "FindResourceExW", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern IntPtr FindResourceEx(
      IntPtr hModule,
      IntPtr lpszType,
      IntPtr lpszName,
      long wLanguage);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr LockResource(IntPtr hResData);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr LoadResource(IntPtr hModule, IntPtr hResData);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern int SizeofResource(IntPtr hInstance, IntPtr hResInfo);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool CloseHandle(IntPtr hHandle);

    [DllImport("kernel32.dll", EntryPoint = "BeginUpdateResourceW", CharSet = CharSet.Unicode, CallingConvention = CallingConvention.StdCall, SetLastError = true)]
    public static extern IntPtr BeginUpdateResource(
      string pFileName,
      bool bDeleteExistingResources);

    [DllImport("kernel32.dll", EntryPoint = "UpdateResourceW", CharSet = CharSet.Unicode, CallingConvention = CallingConvention.StdCall, SetLastError = true)]
    public static extern bool UpdateResource(
      IntPtr hUpdate,
      IntPtr lpType,
      IntPtr lpName,
      ushort wLanguage,
      byte[] lpData,
      uint cbData);

    [DllImport("kernel32.dll", EntryPoint = "EndUpdateResourceW", CharSet = CharSet.Unicode, CallingConvention = CallingConvention.StdCall, SetLastError = true)]
    public static extern bool EndUpdateResource(IntPtr hUpdate, bool fDiscard);

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected Kernel32()
    {
      rbdjPoeaA1BgLlupgC.XYjXOJ9ztPdU4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct RESOURCE_HEADER
    {
      public ushort wLength;
      public ushort wValueLength;
      public ushort wType;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct VAR_HEADER
    {
      public ushort wLanguageIDMS;
      public ushort wCodePageIBM;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 2)]
    public struct VS_FIXEDFILEINFO
    {
      public uint dwSignature;
      public uint dwStrucVersion;
      public uint dwFileVersionMS;
      public uint dwFileVersionLS;
      public uint dwProductVersionMS;
      public uint dwProductVersionLS;
      public uint dwFileFlagsMask;
      public uint dwFileFlags;
      public uint dwFileOS;
      public uint dwFileType;
      public uint dwFileSubtype;
      public uint dwFileDateMS;
      public uint dwFileDateLS;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 2)]
    public struct GRPICONDIR
    {
      public ushort wReserved;
      public ushort wType;
      public ushort wImageCount;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 2)]
    public struct GRPICONDIRENTRY
    {
      public byte bWidth;
      public byte bHeight;
      public byte bColors;
      public byte bReserved;
      public ushort wPlanes;
      public ushort wBitsPerPixel;
      public uint dwImageSize;
      public ushort nID;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 2)]
    public struct FILEGRPICONDIRENTRY
    {
      public byte bWidth;
      public byte bHeight;
      public byte bColors;
      public byte bReserved;
      public ushort wPlanes;
      public ushort wBitsPerPixel;
      public uint dwImageSize;
      public uint dwFileOffset;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 2)]
    public struct FILEGRPICONDIR
    {
      public ushort wReserved;
      public ushort wType;
      public ushort wCount;
    }

    public enum ResourceTypes
    {
      RT_CURSOR = 1,
      RT_BITMAP = 2,
      RT_ICON = 3,
      RT_MENU = 4,
      RT_DIALOG = 5,
      RT_STRING = 6,
      RT_FONTDIR = 7,
      RT_FONT = 8,
      RT_ACCELERATOR = 9,
      RT_RCDATA = 10, // 0x0000000A
      RT_MESSAGETABLE = 11, // 0x0000000B
      RT_GROUP_CURSOR = 12, // 0x0000000C
      RT_GROUP_ICON = 14, // 0x0000000E
      RT_VERSION = 16, // 0x00000010
      RT_DLGINCLUDE = 17, // 0x00000011
      RT_PLUGPLAY = 19, // 0x00000013
      RT_VXD = 20, // 0x00000014
      RT_ANICURSOR = 21, // 0x00000015
      RT_ANIICON = 22, // 0x00000016
      RT_HTML = 23, // 0x00000017
    }

    public delegate bool EnumResourceTypesDelegate(IntPtr hModule, IntPtr lpszType, IntPtr lParam);

    public delegate bool EnumResourceNamesDelegate(
      IntPtr hModule,
      IntPtr lpszType,
      IntPtr lpszName,
      IntPtr lParam);

    public delegate bool EnumResourceLanguagesDelegate(
      IntPtr hModule,
      IntPtr lpszType,
      IntPtr lpszName,
      ushort wIDLanguage,
      IntPtr lParam);
  }
}
