// Decompiled with JetBrains decompiler
// Type: dotXMLToolsWPF.Controls.GdiRendering
// Assembly: LeaseMana, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 529A6AA6-AEB5-47F3-B86B-C5E3C5F9FA62
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-7e41c997a103e91b3815e9269a2d8806e5474c05620f8ff0ca591a586eae2f80.exe

using dotXMLToolsWPF.Renderer;
using dotXMLToolsWPF.W2d.Opcodes;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;

namespace dotXMLToolsWPF.Controls
{
  public class GdiRendering
  {
    private Graphics _graphics;
    private Graphics _canvas;
    private Rectangle _rectangle;
    private readonly bool currentFillMode = false;
    private bool currentIsVisible = true;
    private bool absoluteCoordinates = false;
    private dotXMLToolsWPF.Point currentPoint = dotXMLToolsWPF.Point.Zero;
    private int currentLineWeight = 0;
    private Color currentColor = Color.Black;
    private List<Color> indexedColors = ((IEnumerable<Color>) DefaultColorMap.Default).ToList<Color>();
    private int polyCount = 0;

    public GdiRendering(Graphics graphics, Rectangle rectangle)
    {
      this._graphics = graphics;
      this._rectangle = rectangle;
    }

    public void Render(IEnumerable<IOpcode> opcodes)
    {
      using (Bitmap bitmap = new Bitmap(this._rectangle.Width, this._rectangle.Height))
      {
        using (this._canvas = Graphics.FromImage((Image) bitmap))
        {
          foreach (IOpcode opcode in opcodes)
            this.Render(opcode);
          this._graphics.DrawImage((Image) bitmap, 0, 0);
        }
      }
    }

    private void Render(IOpcode opcode)
    {
      switch (opcode)
      {
        case SetVisibillityOn _:
          this.currentIsVisible = true;
          break;
        case SetCurrentPoint setCurrentPoint:
          this.currentPoint = new dotXMLToolsWPF.Point((long) setCurrentPoint.X, (long) setCurrentPoint.Y);
          break;
        case SetLineWeight _:
          break;
        case DrawPolylineShort drawPolylineShort:
          ++this.polyCount;
          this.absoluteCoordinates = false;
          this.DrawPolyline(drawPolylineShort.Points);
          break;
        case DrawPolylineLong drawPolylineLong:
          this.absoluteCoordinates = false;
          this.DrawPolyline(drawPolylineLong.Points);
          break;
        case DrawPolymarkerShort drawPolymarkerShort:
          this.absoluteCoordinates = false;
          this.DrawPolymarker(drawPolymarkerShort.Points);
          break;
        case DrawPolymarkerLong drawPolymarkerLong:
          this.absoluteCoordinates = false;
          this.DrawPolymarker(drawPolymarkerLong.Points);
          break;
        case DrawLineShort drawLineShort2:
          this.absoluteCoordinates = false;
          DrawLineShort drawLineShort1 = drawLineShort2;
          this.DrawLine(drawLineShort1.StartingPoint, drawLineShort1.EndPoint);
          break;
        case DrawLineLong drawLineLong2:
          this.absoluteCoordinates = false;
          DrawLineLong drawLineLong1 = drawLineLong2;
          this.DrawLine(drawLineLong1.StartingPoint, drawLineLong1.EndPoint);
          break;
        case SetVisibillityOff _:
          this.currentIsVisible = false;
          break;
        case dotXMLToolsWPF.W2d.Opcodes.SetColorIndex setColorIndex:
          this.SetColorIndex(setColorIndex.Index);
          break;
        case dotXMLToolsWPF.W2d.Opcodes.SetColorRgba setColorRgba:
          this.SetColorRgba(Color.FromArgb((int) setColorRgba.A, (int) setColorRgba.R, (int) setColorRgba.G, (int) setColorRgba.B));
          break;
        case dotXMLToolsWPF.W2d.Opcodes.DrawTextBasic drawTextBasic:
          this.DrawTextBasic(drawTextBasic.Position, drawTextBasic.Text);
          break;
        default:
          UnrecognizedOpcode unrecognizedOpcode = (UnrecognizedOpcode) opcode;
          if (unrecognizedOpcode.OpcodeId == "" || unrecognizedOpcode.OpcodeId == "URL")
            break;
          Console.WriteLine("unrecognized opcode:" + unrecognizedOpcode.OpcodeId);
          break;
      }
    }

    private void DrawTextBasic(dotXMLToolsWPF.Point point, string text) => this.GetTranslatedPoint(point);

    private void DrawPolymarker(dotXMLToolsWPF.Point[] points)
    {
      foreach (dotXMLToolsWPF.Point point in points)
        this.GetTranslatedPoint(point);
    }

    public void DrawLine(dotXMLToolsWPF.Point point1, dotXMLToolsWPF.Point point2)
    {
      point1 = this.GetTranslatedPoint(point1);
      point2 = this.GetTranslatedPoint(point2);
    }

    public void DrawPolyline(dotXMLToolsWPF.Point[] points) => this._canvas.DrawLines(Pens.Black, ((IEnumerable<dotXMLToolsWPF.Point>) points).Select<dotXMLToolsWPF.Point, dotXMLToolsWPF.Point>((Func<dotXMLToolsWPF.Point, dotXMLToolsWPF.Point>) (p => this.GetTranslatedPoint(p))).Select<dotXMLToolsWPF.Point, PointF>((Func<dotXMLToolsWPF.Point, PointF>) (p => new PointF((float) p.X / 200f * (float) this.zoom, (float) p.Y / 200f * (float) this.zoom))).ToArray<PointF>());

    private void SetColorIndex(byte colorIndex)
    {
      if (this.indexedColors.Count <= (int) colorIndex)
        return;
      this.currentColor = this.indexedColors[(int) colorIndex];
    }

    private void SetColorRgba(Color color) => this.currentColor = color;

    private dotXMLToolsWPF.Point GetTranslatedPoint(dotXMLToolsWPF.Point point)
    {
      if (!this.absoluteCoordinates)
        point = new dotXMLToolsWPF.Point(point.X + this.currentPoint.X, point.Y + this.currentPoint.Y);
      this.currentPoint = point;
      return new dotXMLToolsWPF.Point(point.X, point.Y);
    }

    private void AppendTextToOutput(string text)
    {
      if (this.currentIsVisible)
        ;
    }

    public int zoom { get; set; }
  }
}
