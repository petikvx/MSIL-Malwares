// Decompiled with JetBrains decompiler
// Type: WindowsApplication2.PolyMorphic
// Assembly: WindowsApplication2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E5CBF90A-C1F4-44CD-8150-CF9600A9E47D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-35305656acf7cf842a1f8837bd52c97aea17a680321f4ce030429929cf0c5764.exe

using System;
using System.Text;

namespace WindowsApplication2
{
  public class PolyMorphic
  {
    private string sKey;

    public string Key
    {
      get => this.sKey;
      set => this.sKey = value;
    }

    public PolyMorphic(string Key)
    {
      this.sKey = "";
      this.Key = Key;
    }

    public PolyMorphic()
    {
      this.sKey = "";
      this.Key = "";
    }

    public string PolyCrypt(string Data) => Encoding.Default.GetString(this.PolyCrypt(Encoding.Default.GetBytes(Data)));

    public string PolyDeCrypt(string Data) => Encoding.Default.GetString(this.PolyDeCrypt(Encoding.Default.GetBytes(Data)));

    public byte[] PolyCrypt(byte[] Data)
    {
      byte[] Data1 = new byte[checked (Data.Length + 1)];
      Data1[0] = Convert.ToByte(new Random().Next(1, (int) byte.MaxValue));
      int num = checked (Data.Length - 1);
      int index = 0;
      while (index <= num)
      {
        Data1[checked (index + 1)] = this.ModuloByte(Data1[index], (short) Data[index]);
        checked { ++index; }
      }
      return this.XorCrypt(Data1, Encoding.Default.GetBytes(this.Key));
    }

    public byte[] PolyDeCrypt(byte[] Data)
    {
      Data = this.XorCrypt(Data, Encoding.Default.GetBytes(this.Key));
      byte[] numArray = new byte[checked (Data.Length - 2 + 1)];
      int index = checked (Data.Length - 1);
      while (index >= 1)
      {
        numArray[checked (index - 1)] = this.ModuloByte(Data[index], (short) -Data[checked (index - 1)]);
        checked { index += -1; }
      }
      return numArray;
    }

    private byte ModuloByte(byte MyByte, short Addition)
    {
      while (Addition < (short) 0)
        checked { Addition += (short) 256; }
      return Convert.ToByte((int) checked ((short) unchecked ((int) MyByte + (int) Addition)) % 256);
    }

    private byte[] XorCrypt(byte[] Data, byte[] Key)
    {
      if (Key.Length != 0)
      {
        int num = checked (Data.Length - 1);
        int index = 0;
        while (index <= num)
        {
          Data[index] = (byte) ((int) Data[index] ^ (int) this.ModuloByte(Key[index % Key.Length], (short) Key[(int) Key[index % Key.Length] % Key.Length]) ^ (int) Key[checked (index + unchecked (index % 7)) % Key.Length % Key.Length]);
          checked { ++index; }
        }
      }
      return Data;
    }

    public string XorCrypt(string Data, string Key) => Encoding.Default.GetString(this.XorCrypt(Encoding.Default.GetBytes(Data), Encoding.Default.GetBytes(Key)));

    public byte[] PolyCrypt(byte[] tuankit5, string p2) => throw new NotImplementedException();
  }
}
