// Decompiled with JetBrains decompiler
// Type: SMALLR.Consumers.CallbackStatusConsumer
// Assembly: SMALLR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6D2A6844-DF52-4C3E-A39E-6BCAB729CFBF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-cb64837983ad6cdbc07df3dc8272a72b4d1b41314b797cc4f9bb67cd37f7b0f5.exe

using SMALLR.Expressions;
using SMALLR.Messages;
using System.Drawing;
using System.Runtime.CompilerServices;
using Tetris.Managers;
using Tetris.Producers;

namespace SMALLR.Consumers
{
  public class CallbackStatusConsumer : ContainerValueProducer
  {
    private Image[] decorator;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public CallbackStatusConsumer(FieldPropertyExpression asset)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              // ISSUE: reference to a compiler-generated method
              this.FillAttr(new Size(40, 40));
              num2 = 5;
              continue;
            case 1:
              goto label_6;
            case 2:
            case 5:
              goto label_2;
            case 3:
            case 4:
              goto label_1;
            case 6:
              goto label_8;
            case 7:
              goto label_9;
            default:
              goto label_5;
          }
        }
label_1:
        // ISSUE: reference to a compiler-generated method
        this.ViewServer(new int[this.RevertAttr().Width, this.RevertAttr().Height]);
        num1 = 1;
        continue;
label_2:
        // ISSUE: reference to a compiler-generated method
        this.MapServer(new Size(10, 15));
        goto label_1;
label_5:
        num1 = 4;
        continue;
label_6:
        this.decorator = new Image[7]
        {
          asset.ConnectServer(),
          asset.SortServer(),
          asset.CollectServer(),
          asset.QueryServer(),
          asset.RestartServer(),
          asset.OrderServer(),
          asset.LogoutServer()
        };
        num1 = 7;
        continue;
label_8:
        // ISSUE: explicit constructor call
        base.\u002Ector((Image) null, Point.Empty);
        num1 = 0;
      }
label_9:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Size CancelAttr() => this._Listener;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Size RevertAttr() => this.m_Candidate;

    public int Lines { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool PrintAttr(Point asset)
    {
      int num1 = 5;
label_1:
      int num2 = -1319876895;
      bool flag;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num2 ^ -413731842)) % 10U)
        {
          case 0:
label_10:
            flag = true;
            num2 = -1603884990;
            continue;
          case 1:
            num1 = 5;
            num2 = (int) num3 * 95234139 ^ -2074083236;
            continue;
          case 2:
            num1 = 3;
            num2 = (int) num3 * -1400449830 ^ -1547951157;
            continue;
          case 3:
            num2 = (int) num3 * 1705895832 ^ -2039618625;
            continue;
          case 4:
            goto label_19;
          case 5:
            num2 = (int) num3 * -1542436724 ^ 1377421811;
            continue;
          case 6:
            goto label_1;
          case 7:
label_3:
            num4 = num1;
            break;
          case 8:
            num2 = (int) num3 * -1457533337 ^ 1082409120;
            continue;
          default:
label_12:
            // ISSUE: reference to a compiler-generated method
            flag = this.AwakeServer()[asset.X, asset.Y] > 0;
            if (CallbackStatusConsumer.SortPrototype())
            {
              num4 = 6;
              break;
            }
            goto label_13;
        }
label_4:
        switch (num4)
        {
          case 0:
          case 5:
            goto label_17;
          case 1:
          case 4:
            break;
          case 2:
            goto label_10;
          case 3:
          case 6:
            goto label_19;
          default:
            num2 = -10454606;
            continue;
        }
label_13:
        int x = asset.X;
        Size size = this.RevertAttr();
        int width = size.Width;
        int num5 = x >= width ? 1 : 0;
label_15:
        if (num5 != 0)
        {
          if (CallbackStatusConsumer.SortPrototype())
          {
            num4 = 2;
            goto label_4;
          }
        }
        else
          goto label_12;
label_17:
        int y = asset.Y;
        size = this.RevertAttr();
        int height = size.Height;
        if (y >= height)
        {
          num5 = 1;
          goto label_15;
        }
        else
        {
          num1 = 4;
          goto label_3;
        }
      }
label_19:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ResolveAttr(PagePolicyMessage info)
    {
      int num1 = 10;
      if (true)
        goto label_15;
label_1:
      bool flag = info == null;
      int num2 = 7;
label_14:
      num1 = num2;
label_15:
      int index1;
      int index2;
      int num3;
      Size size;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_9;
          case 1:
          case 8:
            ++index2;
            goto case 3;
          case 2:
            goto label_12;
          case 3:
          case 4:
            int num4 = index2;
            size = info.SetupAttr();
            int height = size.Height;
            if (num4 < height)
            {
              index1 = 0;
              goto case 5;
            }
            else
            {
              num1 = 11;
              continue;
            }
          case 5:
            int num5 = index1;
            size = info.SetupAttr();
            int width = size.Width;
            if (num5 < width)
            {
              num3 = info.NewAttr()[index2, index1];
              if (!CallbackStatusConsumer.ResetPrototype())
              {
                num1 = 2;
                continue;
              }
              goto case 1;
            }
            else
            {
              if (CallbackStatusConsumer.SortPrototype())
              {
                num1 = 1;
                continue;
              }
              goto label_19;
            }
          case 6:
            goto label_2;
          case 7:
            goto label_10;
          case 9:
            goto label_20;
          case 10:
            goto label_1;
          case 11:
            goto label_3;
          default:
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto case 5;
        }
      }
label_2:
      ++index1;
      num2 = 5;
      goto label_14;
label_9:
      Point point1;
      // ISSUE: reference to a compiler-generated method
      this.AwakeServer()[point1.X, point1.Y] = num3;
      num2 = 6;
      goto label_14;
label_10:
      if (flag)
      {
        num2 = 9;
        goto label_14;
      }
      else
      {
        index2 = 0;
        num2 = 4;
        goto label_14;
      }
label_12:
      if (num3 > 0)
      {
        ref Point local = ref point1;
        int num6 = index1;
        Point point2 = info.CountAttr();
        int x1 = point2.X;
        int x2 = num6 + x1;
        int num7 = index2;
        point2 = info.CountAttr();
        int y1 = point2.Y;
        int y2 = num7 + y1;
        local = new Point(x2, y2);
        goto label_9;
      }
      else
        goto label_2;
label_20:
      return;
label_3:
      return;
label_19:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InsertAttr(PagePolicyMessage init, int resultcounter)
    {
      int num1 = 7;
label_1:
      int num2 = 1241423215;
      while (true)
      {
        uint num3;
        Size size1;
        Size size2;
        bool flag1;
        Point init1;
        bool flag2;
        bool flag3;
        int num4;
        switch ((num3 = (uint) (num2 ^ 1927027931)) % 20U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = 8;
            goto case 3;
          case 2:
            num1 = 5;
            goto case 3;
          case 3:
          case 12:
          case 18:
label_11:
            num4 = num1;
            break;
          case 4:
            goto label_27;
          case 5:
            int num5 = !flag2 ? -1302779388 : (num5 = -500590961);
            num2 = num5 ^ (int) num3 * 970780510;
            continue;
          case 6:
            init.InterruptAttr(resultcounter * -1);
            num2 = (int) num3 * -458527290 ^ 461421138;
            continue;
          case 7:
label_29:
            flag2 = this.CompareAttr(init, Point.Empty);
            num2 = 1450974502;
            continue;
          case 8:
            num2 = (int) num3 * -1265714672 ^ 1808531554;
            continue;
          case 9:
            init.FindAttr(init1);
            num1 = 10;
            goto case 3;
          case 10:
label_20:
            if (!flag3)
            {
              init1 = init.CountAttr();
              size2 = init.SetupAttr();
              init.InterruptAttr(resultcounter);
              flag1 = this.CompareAttr(init, Point.Empty);
              num1 = 4;
              goto case 3;
            }
            else
            {
              num2 = 429076914;
              continue;
            }
          case 11:
label_25:
            num2 = 502851002;
            continue;
          case 13:
            flag3 = init == null;
            num1 = 1;
            num2 = (int) num3 * 1984520997 ^ 1913616557;
            continue;
          case 14:
label_30:
            num2 = 441415985;
            continue;
          case 15:
label_23:
            num2 = 2128872867;
            continue;
          case 16:
label_4:
            init.FindAttr(new Point(init.CountAttr().X - (size1.Width - size2.Width), init.CountAttr().Y));
            int num6 = 0;
            num4 = CallbackStatusConsumer.ResetPrototype() ? num6 : num6;
            break;
          case 17:
            num2 = 1307622955;
            continue;
          case 19:
            num1 = 9;
            num2 = (int) num3 * 1569362548 ^ 157897793;
            continue;
          default:
            goto label_14;
        }
        switch (num4)
        {
          case 0:
            goto label_29;
          case 1:
            goto label_20;
          case 2:
            goto label_8;
          case 3:
          case 4:
            if (flag1)
            {
              num1 = 6;
              goto label_11;
            }
            else
              goto label_22;
          case 5:
            goto label_30;
          case 6:
            size1 = init.SetupAttr();
            goto label_4;
          case 7:
            goto label_25;
          case 8:
            goto label_5;
          case 9:
            goto label_4;
          case 10:
            goto label_23;
          default:
            num2 = 593688116;
            continue;
        }
      }
label_27:
      return;
label_14:
      return;
label_22:
      return;
label_8:
      return;
label_5:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CompareAttr(PagePolicyMessage setup, Point cust)
    {
      int num1 = 9;
label_1:
      int num2 = -1237725833;
      bool flag1;
      while (true)
      {
        uint num3;
        int index1;
        bool flag2;
        bool flag3;
        bool flag4;
        int num4;
        switch ((num3 = (uint) (num2 ^ -851049894)) % 14U)
        {
          case 0:
            flag1 = false;
            num2 = (int) num3 * -94837856 ^ 1927931777;
            continue;
          case 1:
label_3:
            num2 = -439018940;
            continue;
          case 2:
            flag1 = true;
            num4 = 12;
            break;
          case 3:
            num2 = -260773392;
            continue;
          case 4:
label_4:
            ++index1;
            num1 = 11;
            goto case 11;
          case 5:
            goto label_31;
          case 6:
            num1 = 7;
            goto case 11;
          case 8:
label_6:
            if (!flag2)
            {
              num2 = -1134601852;
              continue;
            }
            index1 = 0;
            num1 = 2;
            goto case 11;
          case 9:
label_8:
            int num5;
            num2 = num5 = !flag3 ? -388656445 : (num5 = -1346756168);
            continue;
          case 10:
            goto label_1;
          case 11:
label_19:
            num4 = num1;
            break;
          case 12:
            flag4 = setup == null;
            num2 = (int) num3 * -328737021 ^ 1712242883;
            continue;
          case 13:
            num1 = 13;
            goto case 11;
          default:
            int num6 = 0;
            num4 = CallbackStatusConsumer.ResetPrototype() ? num6 : num6;
            break;
        }
        int index2;
        while (true)
        {
          switch (num4)
          {
            case 0:
              if (!flag4)
              {
                index2 = 0;
                break;
              }
              goto label_25;
            case 1:
              goto label_6;
            case 2:
            case 11:
              if (index1 >= setup.SetupAttr().Width)
              {
                ++index2;
                break;
              }
              goto label_26;
            case 3:
              goto label_18;
            case 4:
            case 6:
              goto label_27;
            case 5:
              goto label_28;
            case 7:
              goto label_17;
            case 8:
            case 12:
            case 13:
              goto label_31;
            case 9:
              goto label_3;
            case 10:
              goto label_8;
            default:
              goto label_21;
          }
          flag2 = index2 < setup.SetupAttr().Height;
          if (true)
            num4 = 1;
          else
            break;
        }
label_17:
        flag3 = this.PrintAttr(new Point(setup.CountAttr().X + index1 + cust.X, setup.CountAttr().Y + index2 + cust.Y));
        num1 = 10;
        goto label_19;
label_18:
        bool flag5;
        if (!flag5)
          goto label_4;
        else
          goto label_17;
label_21:
        num2 = -771244762;
        continue;
label_25:
        num1 = 5;
        goto label_19;
label_26:
        int num7 = setup.NewAttr()[index2, index1];
        num1 = 6;
        goto label_19;
label_27:
        flag5 = num7 > 0;
        num1 = 3;
        goto label_19;
      }
label_28:
      flag1 = true;
label_31:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PatchAttr()
    {
      int num1 = 6;
      if (!CallbackStatusConsumer.ResetPrototype())
        goto label_13;
label_1:
      int num2;
      int num3;
      num2 += num3 > 0 ? 1 : 0;
      int num4 = 8;
label_12:
      num1 = num4;
label_13:
      bool flag1;
      int index1;
      int index2;
      Size size;
      bool flag2;
      int index3;
      while (true)
      {
        int num5;
        switch (num1)
        {
          case 0:
            goto label_27;
          case 1:
          case 4:
          case 13:
            goto label_33;
          case 2:
            goto label_4;
          case 3:
            ++index3;
            num1 = 4;
            continue;
          case 5:
            goto label_22;
          case 6:
label_17:
            num5 = -307857148;
            break;
          case 7:
            goto label_7;
          case 8:
            goto label_6;
          case 9:
            goto label_11;
          case 10:
          case 14:
            if (flag1)
            {
              if (index1 > 0)
              {
                num1 = 9;
                continue;
              }
              goto label_8;
            }
            else
              goto label_3;
          case 11:
            goto label_26;
          case 12:
            goto label_9;
          case 15:
            goto label_1;
          case 16:
            if (flag2)
            {
              // ISSUE: reference to a compiler-generated method
              num3 = this.AwakeServer()[index2, index3];
              num1 = 15;
              continue;
            }
            int num6 = num2;
            size = this.RevertAttr();
            int width = size.Width;
            if (num6 != width)
              goto case 3;
            else
              goto label_31;
          case 17:
            goto label_20;
          default:
label_14:
            num5 = -1778189404;
            break;
        }
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num5 ^ -1274338931)) % 6U)
          {
            case 0:
              goto label_17;
            case 1:
              index3 = 0;
              num5 = (int) num7 * -1613596115 ^ -115075208;
              continue;
            case 2:
              goto label_14;
            case 3:
              goto label_12;
            case 5:
              num4 = 12;
              num5 = (int) num7 * -1161461127 ^ 75261497;
              continue;
            default:
              goto label_19;
          }
        }
label_19:
        num1 = 13;
      }
label_3:
      --index1;
      num4 = 0;
      goto label_12;
label_4:
      bool flag3;
      if (!flag3)
      {
        num4 = 17;
        goto label_12;
      }
      else
      {
        num2 = 0;
        index2 = 0;
        num4 = 7;
        goto label_12;
      }
label_6:
      ++index2;
label_7:
      int num8 = index2;
      size = this.RevertAttr();
      int width1 = size.Width;
      flag2 = num8 < width1;
      num4 = 16;
      goto label_12;
label_8:
      int index4;
      // ISSUE: reference to a compiler-generated method
      this.AwakeServer()[index4, index1] = 0;
label_9:
      ++index4;
      num4 = 11;
      goto label_12;
label_11:
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      this.AwakeServer()[index4, index1] = this.AwakeServer()[index4, index1 - 1];
      goto label_9;
label_20:
      return;
label_22:
      ++this.Lines;
      index1 = index3;
      goto label_27;
label_26:
      int num9 = index4;
      size = this.RevertAttr();
      int width2 = size.Width;
      flag1 = num9 < width2;
      num4 = 14;
      goto label_12;
label_27:
      if (index1 >= 0)
      {
        index4 = 0;
        goto label_26;
      }
      else
      {
        num4 = 3;
        goto label_12;
      }
label_31:
      num4 = 5;
      goto label_12;
label_33:
      int num10 = index3;
      size = this.RevertAttr();
      int height = size.Height;
      flag3 = num10 < height;
      num4 = 2;
      goto label_12;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void Draw(Mock i)
    {
      int num1 = 7;
label_3:
      while (true)
      {
        int num2 = num1;
        int index1;
        int index2;
        bool flag1;
        Point result;
        Size size;
        while (true)
        {
          int num3;
          Image reference;
          bool flag2;
          bool flag3;
          switch (num2)
          {
            case 0:
            case 1:
              int num4 = index1;
              size = this.RevertAttr();
              int width = size.Width;
              flag1 = num4 < width;
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_24;
            case 2:
              goto label_12;
            case 3:
            case 10:
              if (!flag2)
                goto label_20;
              else
                goto label_15;
            case 4:
            case 9:
label_7:
              reference = this.decorator[num3 - 1];
              goto case 8;
            case 5:
              if (flag3)
                break;
              goto label_18;
            case 6:
label_21:
              int num5 = index2;
              size = this.RevertAttr();
              int height = size.Height;
              flag3 = num5 < height;
              int num6 = 5;
              num2 = CallbackStatusConsumer.ResetPrototype() ? num6 : num6;
              continue;
            case 7:
              goto label_11;
            case 8:
              i.GetServer(reference, result);
              goto label_20;
            case 11:
              goto label_22;
            default:
              int num7 = 602061076;
              while (true)
              {
                uint num8;
                switch ((num8 = (uint) (num7 ^ 515429263)) % 8U)
                {
                  case 0:
                    num1 = 7;
                    num7 = (int) num8 * -591345157 ^ 644579608;
                    continue;
                  case 1:
                    goto label_21;
                  case 3:
                    num1 = 8;
                    num7 = (int) num8 * 1241714103 ^ -169130020;
                    continue;
                  case 4:
                    num7 = 759575290;
                    continue;
                  case 5:
                    goto label_7;
                  case 6:
                    num7 = (int) num8 * 1144008148 ^ -183796440;
                    continue;
                  case 7:
                    goto label_3;
                  default:
                    goto label_10;
                }
              }
          }
label_10:
          // ISSUE: reference to a compiler-generated method
          num3 = this.AwakeServer()[index1, index2];
          flag2 = num3 > 0;
          num2 = 10;
          continue;
label_20:
          ++index2;
          goto label_21;
        }
label_11:
        index1 = 0;
        num1 = 1;
        continue;
label_12:
        if (!flag1)
        {
          num1 = 11;
          continue;
        }
        index2 = 0;
        num1 = 6;
        continue;
label_15:
        ref Point local = ref result;
        int num9 = index1;
        size = this.CancelAttr();
        int width1 = size.Width;
        int x = num9 * width1;
        int num10 = index2;
        size = this.CancelAttr();
        int height1 = size.Height;
        int y = num10 * height1;
        local = new Point(x, y);
        num1 = 9;
        continue;
label_18:
        ++index1;
        num1 = 0;
      }
label_22:
      return;
label_24:;
    }

    internal static bool SortPrototype() => true;

    internal static bool ResetPrototype() => false;
  }
}
