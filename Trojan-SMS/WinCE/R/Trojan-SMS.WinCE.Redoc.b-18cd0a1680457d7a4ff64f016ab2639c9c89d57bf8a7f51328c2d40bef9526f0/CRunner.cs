// Decompiled with JetBrains decompiler
// Type: Dbasic.CRunner
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.Controls;
using Dbasic.EnhancedControls;
using Dbasic.KeyWords;
using Dbasic.KeyWords.AddObjects;
using Dbasic.KeyWords.CFiles;
using Dbasic.KeyWords.CMath;
using Dbasic.KeyWords.CString;
using Dbasic.KeyWords.Time;
using Dbasic.Other;
using Microsoft.WindowsCE.Forms;
using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Dbasic
{
  public class CRunner
  {
    private const bool MATH = false;
    private const bool STRING = true;
    public ArrayList lines;
    public Hashtable htLoops = new Hashtable();
    public Locals globals;
    public Hashtable htControls;
    public Hashtable htSubs;
    public Hashtable htLabels;
    private NUMtype[] Num = new NUMtype[60];
    private int[] Opr = new int[60];
    private int numI;
    private int oprI;
    private int pMAX;
    public Cbutton Cbutton;
    public CtextBox CtextBox;
    public Cform Cform;
    public CCombo CCombo;
    public CListBox CListBox;
    public CPanel CPanel;
    public CRadioBtn CRadioBtn;
    public CCheckBox CCheckBox;
    public CImage CImage;
    public CLabel CLabel;
    public CTimer CTimer;
    public CMenu CMenu;
    public COpenDialog COpenDialog;
    public CSaveDialog CSaveDialog;
    public CDateTime CDateTime;
    public CNumUpDown CNumUpDown;
    public CImageList CImageList;
    public CArrayList CArrayList;
    public CImageButton CImageButton;
    public CTable CTable;
    public CObject CObject;
    public bool blnReturnFlag = false;
    public bool blnExitFlag = false;
    public bool blnQuitFlag = false;
    public bool blnGotoFlag = false;
    public Place gotoPlace = new Place();
    public Place ReturnPlace;
    public readonly string VERSION = "6.30";
    public string[] nullVars = new string[0];
    public Hashtable htSharedProperties = new Hashtable();
    public CEnhancedForm mainForm;
    public static string b4pDir = "";
    public Hashtable htStreams;
    public string designText;
    public static CultureInfo cul;
    public ASCIIEncoding ae = new ASCIIEncoding();
    public static string dateFormat;
    public static string timeFormat;
    private Color transColor = Color.Violet;
    public SolidBrush foreBrush = new SolidBrush(Color.Violet);
    public InputPanel inputPanel;
    public CaseInsensitiveComparer caseNotCompare;
    public Comparer caseCompare;
    public CCompareNumbers numbersCompare;
    public CkeyWords[] keyWords = new CkeyWords[135];
    public Hashtable htClassInfo;
    public ArrayList alAssembly = new ArrayList();
    public static int screenX = 238;
    public static int screenY = 268;
    private ArrayList alFmla;
    public ArrayList alGotoWords;
    public string objectsText;
    public object returnObject = (object) null;
    public CBuildDesigner CBuildDesigner;
    public CEnhancedForm shownForm = (CEnhancedForm) null;
    public Thread tdRunning;
    public Exception lastException;

    static CRunner() => CRunner.cul = new CultureInfo("en-US", false);

    public CRunner() => this.newCRunner();

    private void newCRunner()
    {
      this.inputPanel = new InputPanel();
      this.CBuildDesigner = new CBuildDesigner(this);
      this.Cbutton = new Cbutton(this);
      this.CtextBox = new CtextBox(this);
      this.Cform = new Cform(this);
      this.CCombo = new CCombo(this);
      this.CListBox = new CListBox(this);
      this.CPanel = new CPanel(this);
      this.CRadioBtn = new CRadioBtn(this);
      this.CCheckBox = new CCheckBox(this);
      this.CLabel = new CLabel(this);
      this.CImage = new CImage(this);
      this.CTimer = new CTimer(this);
      this.CMenu = new CMenu(this);
      this.COpenDialog = new COpenDialog(this);
      this.CSaveDialog = new CSaveDialog(this);
      this.CDateTime = new CDateTime(this);
      this.CNumUpDown = new CNumUpDown(this);
      this.CImageList = new CImageList(this);
      this.CArrayList = new CArrayList(this);
      this.CImageButton = new CImageButton(this);
      this.CTable = new CTable(this);
      this.CObject = new CObject(this);
      this.keyWords[1] = (CkeyWords) new CkwIf(this);
      this.keyWords[2] = (CkeyWords) new CkwSelect(this);
      this.keyWords[3] = (CkeyWords) new CkwWhile(this);
      this.keyWords[4] = (CkeyWords) new CkwUntil(this);
      this.keyWords[5] = (CkeyWords) new CkwFor(this);
      this.keyWords[6] = (CkeyWords) new CkwDo(this);
      this.keyWords[7] = (CkeyWords) new CkwDim(this);
      this.keyWords[8] = (CkeyWords) null;
      this.keyWords[9] = (CkeyWords) new CkwExit(this);
      this.keyWords[10] = (CkeyWords) new CkwSin(this);
      this.keyWords[11] = (CkeyWords) new CkwCos(this);
      this.keyWords[12] = (CkeyWords) new CkwTan(this);
      this.keyWords[13] = (CkeyWords) new CkwAddButton(this);
      this.keyWords[14] = (CkeyWords) new CkwAddTextBox(this);
      this.keyWords[15] = (CkeyWords) new CkwAddForm(this);
      this.keyWords[16] = (CkeyWords) new CkwAddCombo(this);
      this.keyWords[17] = (CkeyWords) new CkwAddListBox(this);
      this.keyWords[18] = (CkeyWords) new CkwAddPanel(this);
      this.keyWords[19] = (CkeyWords) new CkwAddRadioBtn(this);
      this.keyWords[20] = (CkeyWords) new CkwAddCheckBox(this);
      this.keyWords[21] = (CkeyWords) new CkwAddImage(this);
      this.keyWords[22] = (CkeyWords) new CkwAddLabel(this);
      this.keyWords[23] = (CkeyWords) new CkwAddTimer(this);
      this.keyWords[24] = (CkeyWords) new CkwRound(this);
      this.keyWords[25] = (CkeyWords) new CkwReturn(this);
      this.keyWords[26] = (CkeyWords) new CkwGoto(this);
      this.keyWords[27] = (CkeyWords) new CkwDoEvents(this);
      this.keyWords[28] = (CkeyWords) new CkwStrLength(this);
      this.keyWords[29] = (CkeyWords) new CkwStrReplace(this);
      this.keyWords[30] = (CkeyWords) new CkwStrIndexOf(this);
      this.keyWords[31] = (CkeyWords) new CkwStrInsert(this);
      this.keyWords[32] = (CkeyWords) new CkwStrRemove(this);
      this.keyWords[33] = (CkeyWords) new CkwStrAt(this);
      this.keyWords[34] = (CkeyWords) new CkwStrToLower(this);
      this.keyWords[35] = (CkeyWords) new CkwStrToUpper(this);
      this.keyWords[36] = (CkeyWords) new CkwSubString(this);
      this.keyWords[37] = (CkeyWords) new CkwFileOpen(this);
      this.keyWords[38] = (CkeyWords) new CkwFileRead(this);
      this.keyWords[39] = (CkeyWords) new CkwFileReadToEnd(this);
      this.keyWords[40] = (CkeyWords) new CkwFileWrite(this);
      this.keyWords[41] = (CkeyWords) new CkwFileClose(this);
      this.keyWords[42] = (CkeyWords) new CkwFileExist(this);
      this.keyWords[43] = (CkeyWords) new CkwFilePut(this);
      this.keyWords[44] = (CkeyWords) new CkwFileGet(this);
      this.keyWords[45] = (CkeyWords) new CkwFileDel(this);
      this.keyWords[46] = (CkeyWords) new CkwFileCopy(this);
      this.keyWords[47] = (CkeyWords) new CkwFileName(this);
      this.keyWords[48] = (CkeyWords) new CkwFileDirName(this);
      this.keyWords[49] = (CkeyWords) new CkwFileSize(this);
      this.keyWords[50] = (CkeyWords) new CkwAppClose(this);
      this.keyWords[51] = (CkeyWords) new CkwASin(this);
      this.keyWords[52] = (CkeyWords) new CkwACos(this);
      this.keyWords[53] = (CkeyWords) new CkwATan(this);
      this.keyWords[54] = (CkeyWords) new CkwLog(this);
      this.keyWords[55] = (CkeyWords) new CkwLN(this);
      this.keyWords[56] = (CkeyWords) new CkwInt(this);
      this.keyWords[57] = (CkeyWords) new CkwMax(this);
      this.keyWords[58] = (CkeyWords) new CkwMin(this);
      this.keyWords[59] = (CkeyWords) new CkwAbs(this);
      this.keyWords[60] = (CkeyWords) new CkwRnd(this);
      this.keyWords[61] = (CkeyWords) new CkwTimeS(this);
      this.keyWords[62] = (CkeyWords) new CkwTimeM(this);
      this.keyWords[63] = (CkeyWords) new CkwTimeH(this);
      this.keyWords[64] = (CkeyWords) new CkwDate(this);
      this.keyWords[65] = (CkeyWords) new CkwDateNow(this);
      this.keyWords[66] = (CkeyWords) new CkwDateFormat(this);
      this.keyWords[67] = (CkeyWords) new CkwDateParse(this);
      this.keyWords[68] = (CkeyWords) new CkwDateAdd(this);
      this.keyWords[69] = (CkeyWords) new CkwDateYear(this);
      this.keyWords[70] = (CkeyWords) new CkwDateMonth(this);
      this.keyWords[71] = (CkeyWords) new CkwDateDay(this);
      this.keyWords[72] = (CkeyWords) new CkwDateDayOfYear(this);
      this.keyWords[73] = (CkeyWords) new CkwDateDayOfWeek(this);
      this.keyWords[74] = (CkeyWords) new CkwTimeHour(this);
      this.keyWords[75] = (CkeyWords) new CkwTimeMinute(this);
      this.keyWords[76] = (CkeyWords) new CkwTimeSecond(this);
      this.keyWords[77] = (CkeyWords) new CkwDateD(this);
      this.keyWords[78] = (CkeyWords) new CkwDateM(this);
      this.keyWords[79] = (CkeyWords) new CkwDateY(this);
      this.keyWords[80] = (CkeyWords) new CkwTime(this);
      this.keyWords[81] = (CkeyWords) new CkwTimeFormat(this);
      this.keyWords[82] = (CkeyWords) new CkwTimeParse(this);
      this.keyWords[83] = (CkeyWords) new CkwTimeAdd(this);
      this.keyWords[84] = (CkeyWords) new CkwSound(this);
      this.keyWords[85] = (CkeyWords) new CkwWaitCursor(this);
      this.keyWords[86] = (CkeyWords) new CkwChr(this);
      this.keyWords[87] = (CkeyWords) new CkwAsc(this);
      this.keyWords[88] = (CkeyWords) new CkwFormat(this);
      this.keyWords[89] = (CkeyWords) new CkwControl(this);
      this.keyWords[90] = (CkeyWords) new CkwAddEvent(this);
      this.keyWords[91] = (CkeyWords) new CkwSender(this);
      this.keyWords[92] = (CkeyWords) new CkwIsNumber(this);
      this.keyWords[93] = (CkeyWords) new CkwIsDigit(this);
      this.keyWords[94] = (CkeyWords) new CkwIsLetter(this);
      this.keyWords[95] = (CkeyWords) new CkwIsPunctuation(this);
      this.keyWords[96] = (CkeyWords) new CkwNot(this);
      this.keyWords[97] = (CkeyWords) new CkwShell(this);
      this.keyWords[98] = (CkeyWords) new CkwSetTransparentColor(this);
      this.keyWords[99] = (CkeyWords) new CkwSIP(this);
      this.keyWords[100] = (CkeyWords) new CkwErrorLabel(this);
      this.keyWords[101] = (CkeyWords) new CkwSqrt(this);
      this.keyWords[102] = (CkeyWords) new CkwFileGetByte(this);
      this.keyWords[103] = (CkeyWords) new CkwFilePutByte(this);
      this.keyWords[104] = (CkeyWords) new CkwFileSearch(this);
      this.keyWords[105] = (CkeyWords) new CkwDirSearch(this);
      this.keyWords[106] = (CkeyWords) new CkwAppPath(this);
      this.keyWords[107] = (CkeyWords) new CkwStrCompare(this);
      this.keyWords[108] = (CkeyWords) new CkwMsgbox(this);
      this.keyWords[109] = (CkeyWords) new CkwAddArrayList(this);
      this.keyWords[110] = (CkeyWords) new CkwAddImageList(this);
      this.keyWords[111] = (CkeyWords) new CkwDirExist(this);
      this.keyWords[112] = (CkeyWords) new CkwDirCreate(this);
      this.keyWords[113] = (CkeyWords) new CkwDirDel(this);
      this.keyWords[114] = (CkeyWords) new CkwCPPC(this);
      this.keyWords[115] = (CkeyWords) new CkwAddObject(this);
      this.keyWords[116] = (CkeyWords) new CkwRGB(this);
      this.keyWords[117] = (CkeyWords) new CkwArrayLen(this);
      this.keyWords[118] = (CkeyWords) new CkwB4PObject(this);
      this.keyWords[119] = (CkeyWords) new CkwArrayCopy(this);
      this.keyWords[120] = (CkeyWords) new CkwIsNull(this);
      this.keyWords[121] = (CkeyWords) new CkwLet(this);
      this.keyWords[122] = (CkeyWords) new CkwSleep(this);
      this.keyWords[123] = (CkeyWords) new CkwStrSplit(this);
      this.keyWords[124] = (CkeyWords) new CkwAddTable(this);
      this.keyWords[125] = (CkeyWords) new CkwControlType(this);
      this.keyWords[126] = (CkeyWords) new CkwGetControls(this);
      this.keyWords[(int) sbyte.MaxValue] = (CkeyWords) new CkwCallSub(this);
      this.keyWords[128] = (CkeyWords) new CkwAddImageButton(this);
      this.keyWords[129] = (CkeyWords) new CkwAddNumUpDown(this);
      this.keyWords[130] = (CkeyWords) new CkwGetRGB(this);
      this.htLoops.Add((object) "sub", (object) "end sub");
      this.htLoops.Add((object) "for", (object) "next");
      this.htLoops.Add((object) "if", (object) "end if");
      this.htLoops.Add((object) "do while", (object) "loop");
      this.htLoops.Add((object) "do until", (object) "loop");
      this.htLoops.Add((object) "do", (object) "loop");
      this.htLoops.Add((object) "select", (object) "end select");
      this.htSharedProperties.Add((object) "text", (object) null);
      this.htSharedProperties.Add((object) "left", (object) null);
      this.htSharedProperties.Add((object) "top", (object) null);
      this.htSharedProperties.Add((object) "width", (object) null);
      this.htSharedProperties.Add((object) "height", (object) null);
      this.htSharedProperties.Add((object) "visible", (object) null);
      this.htSharedProperties.Add((object) "enabled", (object) null);
      this.htSharedProperties.Add((object) "focus", (object) null);
      this.htSharedProperties.Add((object) "bringtofront", (object) null);
      this.htSharedProperties.Add((object) "color", (object) null);
      this.htSharedProperties.Add((object) "fontcolor", (object) null);
      this.htSharedProperties.Add((object) "fontsize", (object) null);
      this.htSharedProperties.Add((object) "refresh", (object) null);
      this.htSharedProperties.Add((object) "dispose", (object) null);
      this.htSharedProperties.Add((object) "name", (object) null);
    }

    public RunReturn RunCode(
      Place place,
      bool returnType,
      bool stopAtEndOfLine,
      ref Locals locals)
    {
      Line line = (Line) this.lines[place.LineI];
      Word word;
      if (place.WordI > -1 && place.WordI < line.words.Count - 1 && ((word = (Word) line.words[place.WordI + 1]).KeyWord & CConstants.Immediate) == CConstants.Immediate && (word.sugMila == Word.SugMila.Mishtane || word.sugMila == Word.SugMila.Mahrozet || word.sugMila == Word.SugMila.Mispar))
      {
        ++place.WordI;
        string str = word.sugMila != Word.SugMila.Mishtane ? word.Value : ((word.KeyWord & CConstants.Global) != CConstants.Global ? (string) locals.Reg[(object) word.Value] : (string) this.globals.Reg[(object) word.Value]);
        if (!returnType)
        {
          if (str == "" || str == null)
            str = "0";
          return new RunReturn(place, str, double.Parse(str, (IFormatProvider) CRunner.cul), word);
        }
        if (str == null)
          str = "";
        return new RunReturn(place, str, 0.0, word);
      }
      return returnType ? this.RunCode(place, returnType, stopAtEndOfLine, new StringBuilder(), -1, ref locals) : this.RunCode(place, returnType, stopAtEndOfLine, new StringBuilder(), -1, ref locals);
    }

    public RunReturn RunCode(
      Place place,
      bool returnType,
      bool stopAtEndOfLine,
      StringBuilder s,
      int firstWordPlaceFromSTRING,
      ref Locals locals)
    {
      try
      {
        Line line1 = new Line();
        string s1 = (string) null;
        double vDouble1 = 0.0;
        int num1 = 0;
        int num2 = place.WordI + 1;
        Word word1 = new Word();
        bool flag1 = false;
        double[] sNum = (double[]) null;
        bool flag2 = false;
        int num3 = 2;
        if (!returnType && firstWordPlaceFromSTRING > 0)
          num2 = firstWordPlaceFromSTRING;
        Line line2;
        for (place.LineI = place.LineI; place.LineI < this.lines.Count; ++place.LineI)
        {
          Line line3 = (Line) this.lines[place.LineI];
          while (place.WordI < line3.words.Count - 1)
          {
            ++place.WordI;
            word1 = (Word) line3.words[place.WordI];
            if (!flag1)
            {
              flag1 = true;
              if (word1.Level > 0 && (word1.KeyWord == 0 || word1.KeyWord > 6))
              {
                sNum = new double[(int) this.alFmla[word1.Level - 1] + 1];
                sNum[1] = 0.0;
                returnType = false;
                flag2 = true;
              }
            }
            switch (word1.sugMila)
            {
              case Word.SugMila.Shmura:
                MethodReturn methodReturn1 = this.keyWords[word1.KeyWord].Run(place, ref locals);
                if (this.blnExitFlag || this.blnReturnFlag)
                  return new RunReturn(place, "", 0.0, new Word());
                place = methodReturn1.place;
                s1 = methodReturn1.vString;
                s.Append(s1);
                line3 = (Line) this.lines[place.LineI];
                if (flag2)
                {
                  sNum[num3++] = double.Parse(s1, (IFormatProvider) CRunner.cul);
                  continue;
                }
                continue;
              case Word.SugMila.Peula:
                if (word1.Value == "&")
                {
                  if (!returnType)
                  {
                    Word word2 = this.GetWord(place.LineI, num2) with
                    {
                      Level = -3
                    };
                    line2 = (Line) this.lines[place.LineI];
                    line2.words[num2] = (object) word2;
                    --place.WordI;
                    goto label_68;
                  }
                  else
                  {
                    num2 = place.WordI + 1;
                    continue;
                  }
                }
                else
                {
                  if (word1.Value == "(" && !returnType)
                    ++num1;
                  else if (word1.Value == ")")
                    --num1;
                  if (num1 < 0)
                  {
                    --place.WordI;
                    goto label_68;
                  }
                  else
                  {
                    if (!returnType)
                    {
                      s1 = word1.Value;
                      if (word1.Value == "-" && (s.Length == 0 || s[s.Length - 1] == '('))
                      {
                        s1 = "0-";
                        if (flag2)
                          sNum[num3++] = 0.0;
                      }
                      else if (flag2 && word1.Value == "(" && s.Length > 0 && s[s.Length - 1] == '-')
                        sNum[num3++] = 1.0;
                      s.Append(s1);
                      continue;
                    }
                    if (word1.Value == "(")
                    {
                      s1 = (string) null;
                      --place.WordI;
                      word1.Value = (string) null;
                    }
                    else if (s1 == null || s1 == "")
                      s1 = "0";
                    else
                      s.Remove(s.Length - s1.Length, s1.Length);
                    RunReturn runReturn = this.RunCode(place, false, true, new StringBuilder(s1 + word1.Value), num2, ref locals);
                    s1 = runReturn.vDouble.ToString((IFormatProvider) CRunner.cul);
                    place = runReturn.place;
                    line3 = (Line) this.lines[place.LineI];
                    s.Append(s1);
                    continue;
                  }
                }
              case Word.SugMila.SubCall:
                if (this.blnReturnFlag)
                  return new RunReturn(place, "", 0.0, new Word());
                Hashtable localsReg = new Hashtable();
                Place htSub = (Place) this.htSubs[(object) word1.Value];
                line2 = (Line) this.lines[htSub.LineI];
                Word word3 = (Word) line2.words[1];
                int num4 = 1;
                if (word3.KeyWord < 0)
                {
                  for (int index = 0; index < -word3.KeyWord; ++index)
                  {
                    ++place.WordI;
                    RunReturn runReturn = this.RunCode(place, true, true, ref locals);
                    place = runReturn.place;
                    line2 = (Line) this.lines[htSub.LineI];
                    Word word4 = (Word) line2.words[++num4];
                    if (word4.KeyWord == CConstants.GlobalParameter)
                    {
                      this.globals.Arrays.Remove((object) word4.Value);
                      this.globals.Arrays.Add((object) word4.Value, this.returnObject);
                    }
                    else
                      localsReg.Add((object) word4.Value, (object) runReturn.vString);
                  }
                  ++place.WordI;
                }
                if (place.WordI >= line3.words.Count)
                  throw new Exception("Missing parameters.");
                s1 = this.StartSub(htSub, localsReg);
                s.Append(s1);
                if (flag2)
                {
                  sNum[num3++] = double.Parse(s1, (IFormatProvider) CRunner.cul);
                  continue;
                }
                continue;
              case Word.SugMila.Mahrozet:
                s1 = word1.Value;
                s.Append(s1);
                if (flag2)
                {
                  sNum[num3++] = double.Parse(s1, (IFormatProvider) CRunner.cul);
                  continue;
                }
                continue;
              case Word.SugMila.Mishtane:
                if ((word1.KeyWord & CConstants.Assign) == CConstants.Assign)
                {
                  --place.WordI;
                  MethodReturn methodReturn2 = this.keyWords[121].Run(place, ref locals);
                  place = methodReturn2.place;
                  s1 = methodReturn2.vString;
                  s.Append(s1);
                  line3 = (Line) this.lines[place.LineI];
                }
                else
                {
                  s1 = (word1.KeyWord & CConstants.Global) != CConstants.Global ? (string) locals.Reg[(object) word1.Value] : ((word1.KeyWord & CConstants.Array) != CConstants.Array ? (string) this.globals.Reg[(object) word1.Value] : this.GetArray(ref place, ref locals, word1.Value));
                  if ((s1 == "" || s1 == null) && !returnType)
                    s1 = "0";
                  s.Append(s1);
                }
                if (flag2)
                {
                  sNum[num3++] = double.Parse(s1, (IFormatProvider) CRunner.cul);
                  continue;
                }
                continue;
              case Word.SugMila.Pakad:
                CControls cControl = ((WrapControl) this.htControls[(object) word1.Value]).cControl;
                bool assign = (word1.KeyWord & CConstants.Assign) == CConstants.Assign;
                MethodReturn methodReturn3 = cControl.Run(word1.Value, place, assign, ref locals);
                place = methodReturn3.place;
                s1 = methodReturn3.vString;
                s.Append(s1);
                line3 = (Line) this.lines[place.LineI];
                if (flag2)
                {
                  sNum[num3++] = double.Parse(s1, (IFormatProvider) CRunner.cul);
                  continue;
                }
                continue;
              case Word.SugMila.Klali:
                --place.WordI;
                goto label_68;
              case Word.SugMila.Mispar:
                if (flag2)
                  sNum[num3++] = double.Parse(word1.Value, (IFormatProvider) CRunner.cul);
                s1 = word1.Value;
                s.Append(s1);
                continue;
              default:
                continue;
            }
          }
          if (!stopAtEndOfLine)
            place.WordI = -1;
          else
            break;
        }
label_68:
        if (!returnType)
        {
          string str = s.ToString();
          Word word5 = this.GetWord(place.LineI, num2);
          if (word5.Level == -2)
          {
            vDouble1 = double.Parse(str, (IFormatProvider) CRunner.cul);
          }
          else
          {
            if (flag2)
            {
              double vDouble2 = this.calcSolvedFormula(word5.Level, sNum);
              return new RunReturn(place, vDouble2.ToString((IFormatProvider) CRunner.cul), vDouble2, word1);
            }
            if (this.cvrtStringToFormula(str))
            {
              if (word5.Level == 0 && str.ToLower(CRunner.cul).IndexOf("e") == -1)
              {
                word5.Level = this.alFmla.Count + 1;
                line2 = (Line) this.lines[place.LineI];
                line2.words[num2] = (object) word5;
                vDouble1 = this.calcFormula(true);
              }
              else
                vDouble1 = this.calcFormula(false);
            }
            else
            {
              word5.Level = -2;
              line2 = (Line) this.lines[place.LineI];
              line2.words[num2] = (object) word5;
              vDouble1 = double.Parse(str, (IFormatProvider) CRunner.cul);
            }
          }
        }
        return new RunReturn(place, s.ToString(), vDouble1, word1);
      }
      catch (CException ex)
      {
        throw ex;
      }
      catch (Exception ex)
      {
        this.lastException = ex;
        if (ex is TargetInvocationException && ex.InnerException != null)
          this.ThrowError(ex.InnerException.Message, place.LineI);
        this.ThrowError(ex.Message, place.LineI);
        return new RunReturn();
      }
    }

    public string StartSub(Place subsPlace, Hashtable localsReg)
    {
      try
      {
        subsPlace = new Place(subsPlace.LineI + 1, -1);
        this.blnReturnFlag = false;
        Locals locals = new Locals();
        locals.Reg = localsReg;
        while (true)
        {
          try
          {
            RunReturn runReturn = this.RunCode(subsPlace, true, false, ref locals);
            string str = "";
            if (this.blnReturnFlag)
            {
              if (!this.blnQuitFlag)
              {
                this.blnReturnFlag = false;
                if (this.blnGotoFlag)
                {
                  this.blnGotoFlag = false;
                  subsPlace = this.gotoPlace;
                  continue;
                }
                str = this.RunCode(this.ReturnPlace, true, true, ref locals).vString;
              }
            }
            else if (runReturn.word.Value != "end sub")
              this.ThrowError("Syntax Error", runReturn.place.LineI);
            return str;
          }
          catch
          {
            if (locals.Reg.Contains((object) "~error") && !this.blnReturnFlag)
              subsPlace = (Place) locals.Reg[(object) "~error"];
            else
              throw;
          }
        }
      }
      catch (Exception ex)
      {
        string subName = "?????";
        try
        {
          Place place = new Place(subsPlace.LineI - 1, 1);
          foreach (DictionaryEntry htSub in this.htSubs)
          {
            if (((Place) htSub.Value).Equals((object) place))
            {
              subName = (string) htSub.Key;
              break;
            }
          }
        }
        catch
        {
        }
        this.ShowError(ex, subName);
        return "";
      }
    }

    public void StartProgram()
    {
      if (this.CObject.htShemotAzamim != null)
        this.CObject.htShemotAzamim.Clear();
      if (this.htClassInfo != null)
        this.htClassInfo.Clear();
      this.htControls = new Hashtable();
      this.alFmla = new ArrayList();
      if (this.htStreams != null && this.htStreams.Count > 0)
      {
        foreach (DictionaryEntry htStream in this.htStreams)
          ((IStream) htStream.Value).Close();
      }
      this.htStreams = new Hashtable(0);
      this.blnExitFlag = false;
      this.blnGotoFlag = false;
      this.blnReturnFlag = false;
      this.blnQuitFlag = false;
      this.returnObject = (object) null;
      CRunner.dateFormat = "MM/dd/yyyy";
      CRunner.timeFormat = "HH:mm";
      this.transColor = Color.Violet;
      try
      {
        if (this.alAssembly.Count > 0)
          this.LoadAssemblies();
        this.CBuildDesigner.BuildDesigner();
        this.BuildObjects();
        Cursor.Current = Cursors.Default;
        if (this.htSubs.Contains((object) "globals"))
          this.RunCode((Place) this.htSubs[(object) "globals"], true, false, ref this.globals);
      }
      catch (Exception ex)
      {
        Cursor.Current = Cursors.Default;
        int num = (int) MessageBox.Show("Error loading program.\r\n" + ex.Message, "Basic4ppc", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1);
        return;
      }
      try
      {
        this.tdRunning = Thread.CurrentThread;
        this.StartSub((Place) this.htSubs[(object) "app_start"], new Hashtable());
      }
      catch
      {
        Cursor.Current = Cursors.Default;
      }
    }

    private void BuildObjects()
    {
      int startIndex = 0;
      for (int index = this.objectsText.IndexOf("\r\n"); index > -1; index = this.objectsText.IndexOf("\r\n", startIndex))
      {
        this.CObject.ShortAdd(this.objectsText.Substring(startIndex, index - startIndex));
        startIndex = index + 2;
      }
    }

    public void ThrowError(string message, int line) => throw new CException("Line number: " + (object) ((Line) this.lines[line]).displayLine + "\r\n\r\n" + ((Line) this.lines[line]).text.Replace("\t", "") + "\r\nError description: \r\n" + message);

    public void ShowError(Exception ex, string subName)
    {
      Cursor.Current = Cursors.Default;
      if (this.blnQuitFlag)
        return;
      ArrayList arrayList = new ArrayList();
      foreach (DictionaryEntry htControl in this.htControls)
      {
        WrapControl wrapControl = (WrapControl) htControl.Value;
        if (wrapControl.cControl is CTimer && ((System.Windows.Forms.Timer) wrapControl.control).Enabled)
        {
          ((System.Windows.Forms.Timer) wrapControl.control).Enabled = false;
          arrayList.Add(wrapControl.control);
        }
      }
      if (MessageBox.Show("An error occurred on sub " + subName + ".\r\n\r\n" + ex.Message + "\r\nContinue?", "Basic4ppc", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1) == DialogResult.No)
      {
        this.blnQuitFlag = true;
        this.blnReturnFlag = true;
        if (this.mainForm == null)
          return;
        this.mainForm.Close();
      }
      else
      {
        foreach (System.Windows.Forms.Timer timer in arrayList)
          timer.Enabled = true;
      }
    }

    public void CloseProgram()
    {
      if (this.CObject.htShemotAzamim != null)
        this.CObject.htShemotAzamim.Clear();
      this.blnQuitFlag = true;
      this.blnReturnFlag = true;
      foreach (DictionaryEntry htStream in this.htStreams)
        ((IStream) htStream.Value).Close();
      this.htStreams.Clear();
      foreach (DictionaryEntry htControl in this.htControls)
      {
        WrapControl wrapControl = (WrapControl) htControl.Value;
        if (wrapControl.control is CEnhancedTable && wrapControl.control != null)
          ((Component) wrapControl.control).Dispose();
        if (wrapControl.cControl is Cform && wrapControl.control != this.mainForm)
          ((Form) wrapControl.control).Close();
        else if (wrapControl.cControl is CTimer)
          ((System.Windows.Forms.Timer) wrapControl.control).Enabled = false;
        else if (wrapControl.cControl is CObject)
        {
          try
          {
            object obj = ((SWrapObject) wrapControl.control).Object;
            if (obj != null)
            {
              if (obj is IDisposable)
                ((IDisposable) obj).Dispose();
            }
          }
          catch
          {
          }
        }
      }
      this.returnObject = (object) null;
      this.htControls.Clear();
      this.mainForm = (CEnhancedForm) null;
      this.shownForm = (CEnhancedForm) null;
      GC.Collect();
      Cursor.Current = Cursors.Default;
    }

    private string GetArray(ref Place place, ref Locals locals, string varName)
    {
      ++place.WordI;
      if (this.nextWord(false, ref place).Value == ")")
      {
        ++place.WordI;
        this.returnObject = this.globals.Arrays[(object) varName];
        return "";
      }
      RunReturn runReturn1 = this.RunCode(place, false, true, ref locals);
      place = runReturn1.place;
      int vDouble1 = (int) runReturn1.vDouble;
      if (this.nextWord(true, ref place).Value == ",")
      {
        RunReturn runReturn2 = this.RunCode(place, false, true, ref locals);
        place = runReturn2.place;
        int vDouble2 = (int) runReturn2.vDouble;
        if (this.nextWord(true, ref place).Value == ",")
        {
          RunReturn runReturn3 = this.RunCode(place, false, true, ref locals);
          place = runReturn3.place;
          int vDouble3 = (int) runReturn3.vDouble;
          ++place.WordI;
          object obj = ((Array) this.globals.Arrays[(object) varName]).GetValue(new int[3]
          {
            vDouble1,
            vDouble2,
            vDouble3
          });
          return obj == null ? "" : (string) Convert.ChangeType(obj, typeof (string), (IFormatProvider) CRunner.cul);
        }
        object obj1 = ((Array) this.globals.Arrays[(object) varName]).GetValue(new int[2]
        {
          vDouble1,
          vDouble2
        });
        return obj1 == null ? "" : (string) Convert.ChangeType(obj1, typeof (string), (IFormatProvider) CRunner.cul);
      }
      object obj2 = ((Array) this.globals.Arrays[(object) varName]).GetValue(vDouble1);
      return obj2 == null ? "" : (string) Convert.ChangeType(obj2, typeof (string), (IFormatProvider) CRunner.cul);
    }

    public bool Condition(ref Place place, ref Locals locals)
    {
      bool flag1;
      bool flag2;
      do
      {
        Word word = this.GetWord(place.LineI, place.WordI + 1);
        if (word.KeyWord == CConstants.ConditionOpener)
        {
          ++place.WordI;
          flag1 = this.Condition(ref place, ref locals);
          place.WordI = -word.Level;
        }
        else
        {
          Place lFirstPlace = new Place(place.LineI, place.WordI + 1);
          RunReturn runReturn = this.RunCode(place, true, true, ref locals);
          place = runReturn.place;
          string vString1 = runReturn.vString;
          if (this.CheckNextWord(place) && (word = this.nextWord(true, ref place)).KeyWord == CConstants.Condition)
          {
            string opr = word.Value;
            Place rFirstPlace = new Place(place.LineI, place.WordI + 1);
            runReturn = this.RunCode(place, true, true, ref locals);
            place = runReturn.place;
            string vString2 = runReturn.vString;
            flag1 = this.Compare(vString1, opr, vString2, lFirstPlace, rFirstPlace);
          }
          else
          {
            if (place.WordI < ((Line) this.lines[place.LineI]).words.Count - 1)
              --place.WordI;
            flag1 = bool.Parse(runReturn.vString);
          }
        }
        if (this.CheckNextWord(place))
        {
          word = this.nextWord(true, ref place);
          if (word.Value == ")" || word.Value == "then")
            return flag1;
          flag2 = word.Value == "and";
          if (!flag1 && flag2)
            return false;
        }
        else
          goto label_14;
      }
      while (!flag1 || flag2);
      return true;
label_14:
      return flag1;
    }

    private bool Compare(
      string lSide,
      string opr,
      string rSide,
      Place lFirstPlace,
      Place rFirstPlace)
    {
      switch (opr)
      {
        case ">":
          if (lSide == "")
            lSide = "0";
          if (rSide == "")
            rSide = "0";
          return double.Parse(lSide, (IFormatProvider) CRunner.cul) > double.Parse(rSide, (IFormatProvider) CRunner.cul);
        case "<":
          if (lSide == "")
            lSide = "0";
          if (rSide == "")
            rSide = "0";
          return double.Parse(lSide, (IFormatProvider) CRunner.cul) < double.Parse(rSide, (IFormatProvider) CRunner.cul);
        case "=":
          if (lSide == "0" || rSide == "0")
          {
            Word word;
            if (lSide == "")
            {
              word = this.GetWord(lFirstPlace.LineI, lFirstPlace.WordI);
              if (word.sugMila == Word.SugMila.Mishtane)
                goto label_16;
            }
            if (rSide == "")
            {
              word = this.GetWord(rFirstPlace.LineI, rFirstPlace.WordI);
              if (word.sugMila != Word.SugMila.Mishtane)
                goto label_17;
            }
            else
              goto label_17;
label_16:
            return true;
          }
label_17:
          return lSide == rSide;
        case "<>":
          if (lSide == "0" || rSide == "0")
          {
            Word word;
            if (lSide == "")
            {
              word = this.GetWord(lFirstPlace.LineI, lFirstPlace.WordI);
              if (word.sugMila == Word.SugMila.Mishtane)
                goto label_23;
            }
            if (rSide == "")
            {
              word = this.GetWord(rFirstPlace.LineI, rFirstPlace.WordI);
              if (word.sugMila != Word.SugMila.Mishtane)
                goto label_24;
            }
            else
              goto label_24;
label_23:
            return false;
          }
label_24:
          return lSide != rSide;
        case "<=":
        case "=<":
          if (lSide == "")
            lSide = "0";
          if (rSide == "")
            rSide = "0";
          return double.Parse(lSide, (IFormatProvider) CRunner.cul) <= double.Parse(rSide, (IFormatProvider) CRunner.cul);
        case ">=":
        case "=>":
          if (lSide == "")
            lSide = "0";
          if (rSide == "")
            rSide = "0";
          return double.Parse(lSide, (IFormatProvider) CRunner.cul) >= double.Parse(rSide, (IFormatProvider) CRunner.cul);
        default:
          this.ThrowError("Not a comparison character.", lFirstPlace.LineI);
          return false;
      }
    }

    public Word nextWord(bool procceed, ref Place place)
    {
      Line line = (Line) this.lines[place.LineI];
      Word word;
      if (procceed)
      {
        ++place.WordI;
        word = (Word) line.words[place.WordI];
      }
      else
        word = (Word) line.words[place.WordI + 1];
      return word;
    }

    public Word nextWordLine(bool procceed, ref Place place, bool jumpLines)
    {
      Line line = (Line) this.lines[place.LineI];
      Place place1 = place;
      if (jumpLines && place.WordI >= 0 || place1.WordI >= line.words.Count - 1)
      {
        ++place1.LineI;
        line = (Line) this.lines[place1.LineI];
        place1.WordI = -1;
      }
      ++place1.WordI;
      if (procceed)
        place = place1;
      return (Word) line.words[place1.WordI];
    }

    public Word GetWord(int lineI, int wordI) => (Word) ((Line) this.lines[lineI]).words[wordI];

    public bool CheckNextWord(Place place) => place.WordI < ((Line) this.lines[place.LineI]).words.Count - 1;

    public Word GotoWord(ref Place place, Word[] words, bool jumpLines)
    {
      try
      {
        while (jumpLines || this.CheckNextWord(place))
        {
          Word word1 = this.nextWordLine(true, ref place, jumpLines);
          foreach (Word word2 in words)
          {
            if (word2.Equals((object) word1))
              return word2;
          }
        }
        return new Word();
      }
      catch
      {
        this.ThrowError("Missing \"" + words[words.Length - 1].Value + "\"", place.LineI);
        return new Word();
      }
    }

    public Color GetColor(ref Place place, ref Locals locals)
    {
      RunReturn runReturn1 = this.RunCode(place, false, true, ref locals);
      place = runReturn1.place;
      int vDouble1 = (int) runReturn1.vDouble;
      if (this.CheckNextWord(place))
      {
        Word word1 = this.nextWord(false, ref place);
        if (word1.Value == ",")
        {
          ++place.WordI;
          Word word2 = this.nextWord(false, ref place);
          if (word2.Value == "b" || word2.Value == "bf" || word2.Value == "f")
          {
            --place.WordI;
            return Color.FromArgb(vDouble1);
          }
          RunReturn runReturn2 = this.RunCode(place, false, true, ref locals);
          place = runReturn2.place;
          int vDouble2 = (int) runReturn2.vDouble;
          word1 = this.nextWord(true, ref place);
          if (word1.Value != ",")
            this.ThrowError("Missing \",\"", place.LineI);
          RunReturn runReturn3 = this.RunCode(place, false, true, ref locals);
          place = runReturn3.place;
          int vDouble3 = (int) runReturn3.vDouble;
          return Color.FromArgb(vDouble1, vDouble2, vDouble3);
        }
      }
      return Color.FromArgb(vDouble1);
    }

    public Bitmap BitmapFromString(string s)
    {
      if (s.Length > 0 && s[0] == '~')
      {
        int num = s.IndexOf(".");
        if (num == -1)
          return (Bitmap) this.returnObject;
        string key = s.Substring(1, num - 1);
        if (this.htControls.Contains((object) key))
        {
          object control = ((WrapControl) this.htControls[(object) key]).control;
          if (!(control is ArrayList))
            return new Bitmap(((IImage) control).ReturnImage);
          int index = int.Parse(s.Substring(num + 1, s.Length - num - 1), (IFormatProvider) CRunner.cul);
          return (Bitmap) ((ArrayList) control)[index];
        }
      }
      string str = Path.Combine(CRunner.b4pDir, s);
      return File.Exists(str) ? new Bitmap(str) : throw new Exception("Missing file: \n" + str);
    }

    public MethodReturn SharedProperties(
      Control cmb,
      string property,
      ref Place place,
      bool assign,
      ref Locals locals)
    {
      switch (property)
      {
        case "text":
          if (!assign)
            return new MethodReturn(place, cmb.Text, 0.0);
          RunReturn runReturn1 = this.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          cmb.Text = runReturn1.vString;
          return new MethodReturn(place);
        case "focus":
          cmb.Focus();
          return new MethodReturn(place);
        case "refresh":
          cmb.Refresh();
          return new MethodReturn(place);
        case "bringtofront":
          cmb.BringToFront();
          return new MethodReturn(place);
        case "width":
          if (!assign)
            return new MethodReturn(place, cmb.Width.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn2 = this.RunCode(place, false, true, ref locals);
          place = runReturn2.place;
          cmb.Width = (int) runReturn2.vDouble;
          return new MethodReturn(place);
        case "height":
          if (!assign)
            return new MethodReturn(place, cmb.Height.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn3 = this.RunCode(place, false, true, ref locals);
          place = runReturn3.place;
          cmb.Height = (int) runReturn3.vDouble;
          return new MethodReturn(place);
        case "dispose":
          cmb.Dispose();
          this.htControls.Remove((object) ((IEnhancedControl) cmb).propName);
          return new MethodReturn(place);
        case "name":
          return new MethodReturn(place, ((IEnhancedControl) cmb).propName.ToString((IFormatProvider) CRunner.cul), 0.0);
        case "left":
          if (!assign)
            return new MethodReturn(place, cmb.Left.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn4 = this.RunCode(place, false, true, ref locals);
          place = runReturn4.place;
          cmb.Left = (int) runReturn4.vDouble;
          return new MethodReturn(place);
        case "top":
          if (!assign)
            return new MethodReturn(place, cmb.Top.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn5 = this.RunCode(place, false, true, ref locals);
          place = runReturn5.place;
          cmb.Top = (int) runReturn5.vDouble;
          return new MethodReturn(place);
        case "visible":
          if (!assign)
            return new MethodReturn(place, cmb.Visible.ToString((IFormatProvider) CRunner.cul).ToLower(CRunner.cul), 0.0);
          RunReturn runReturn6 = this.RunCode(place, true, true, ref locals);
          place = runReturn6.place;
          if (runReturn6.vString == "false" || runReturn6.vString == "0")
          {
            cmb.Visible = false;
            return new MethodReturn(place);
          }
          if (runReturn6.vString == "true" || runReturn6.vString == "1")
          {
            cmb.Visible = true;
            return new MethodReturn(place);
          }
          this.ThrowError("Syntax error", place.LineI);
          break;
        case "enabled":
          if (!assign)
            return new MethodReturn(place, cmb.Enabled.ToString((IFormatProvider) CRunner.cul).ToLower(CRunner.cul), 0.0);
          RunReturn runReturn7 = this.RunCode(place, true, true, ref locals);
          place = runReturn7.place;
          if (runReturn7.vString == "false" || runReturn7.vString == "0")
          {
            cmb.Enabled = false;
            return new MethodReturn(place);
          }
          if (runReturn7.vString == "true" || runReturn7.vString == "1")
          {
            cmb.Enabled = true;
            return new MethodReturn(place);
          }
          this.ThrowError("Syntax error", place.LineI);
          break;
        case "color":
          if (!assign)
            return new MethodReturn(place, cmb.BackColor.ToArgb().ToString((IFormatProvider) CRunner.cul), 0.0);
          cmb.BackColor = this.GetColor(ref place, ref locals);
          return new MethodReturn(place);
        case "fontcolor":
          if (!assign)
            return new MethodReturn(place, cmb.ForeColor.ToArgb().ToString((IFormatProvider) CRunner.cul), 0.0);
          cmb.ForeColor = this.GetColor(ref place, ref locals);
          return new MethodReturn(place);
        case "fontsize":
          if (!assign)
            return new MethodReturn(place, cmb.Font.Size.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn8 = this.RunCode(place, false, true, ref locals);
          place = runReturn8.place;
          cmb.Font = new Font(cmb.Font.Name, (float) runReturn8.vDouble, cmb.Font.Style);
          return new MethodReturn(place);
      }
      return new MethodReturn(place);
    }

    public Color TransColor
    {
      set
      {
        this.transColor = value;
        this.foreBrush.Color = value;
      }
      get => this.transColor;
    }

    private bool cvrtStringToFormula(string fmla)
    {
      fmla = fmla.ToLower(CRunner.cul);
      fmla = "0+" + fmla;
      fmla = fmla.Replace("-(", "-1*(");
      fmla = fmla.Replace("e+", "F");
      fmla = fmla.Replace("e-", "f");
      fmla = fmla.Replace("mod", "m");
      int[] numArray = new int[fmla.Length];
      int startIndex = fmla.IndexOf("(");
      if (startIndex > -1)
      {
        int num = 4;
        fmla = fmla.Remove(startIndex, 1);
        numArray[startIndex] = num;
        for (int index = startIndex; index <= fmla.Length - 1; ++index)
        {
          if (fmla[index] == '(')
          {
            num += 4;
            fmla = fmla.Remove(index, 1);
            --index;
          }
          else if (fmla[index] == ')')
          {
            num -= 4;
            fmla = fmla.Remove(index, 1);
            --index;
          }
          numArray[index] = num;
        }
      }
      string[] strArray = fmla.Split("+-*/fFm^".ToCharArray());
      if (strArray.GetLength(0) == 2)
        return false;
      for (int index = 1; index < strArray.GetLength(0) + 1; ++index)
        this.Num[index].owned = 0;
      int index1 = -1;
      this.oprI = 0;
      this.numI = 0;
      int index2;
      for (index2 = 0; index2 < strArray.GetLength(0) - 1; ++index2)
      {
        string s = strArray[index2];
        if (s.Length == 0)
        {
          strArray[index2 + 1] = fmla[index1 + 1].ToString() + strArray[index2 + 1];
        }
        else
        {
          ++this.numI;
          index1 += s.Length + 1;
          this.Num[this.numI].val = double.Parse(s, (IFormatProvider) CRunner.cul);
          this.Opr[this.numI] = this.CvrtOprToInt(fmla[index1]);
          this.Num[this.numI].pri = numArray[index1 - 1] + this.calcPRI(this.Opr[this.numI]);
          if (this.Num[this.numI].pri > this.pMAX)
            this.pMAX = this.Num[this.numI].pri;
        }
      }
      this.oprI = this.numI;
      ++this.numI;
      this.Num[this.numI].val = double.Parse(strArray[index2], (IFormatProvider) CRunner.cul);
      this.Num[this.numI].pri = numArray[index1 - 1];
      return true;
    }

    private double calcSolvedFormula(int pos, double[] sNum)
    {
      int num = (int) this.alFmla[pos];
      for (int index = pos + 1; index < pos + num; index += 3)
        this.calcSolvedBinOpr((int) this.alFmla[index], (int) this.alFmla[index + 1], (int) this.alFmla[index + 2], sNum);
      return sNum[1];
    }

    private void calcSolvedBinOpr(int a, int opr, int b, double[] sNum)
    {
      switch (opr)
      {
        case 1:
          sNum[a] += sNum[b];
          break;
        case 2:
          sNum[a] -= sNum[b];
          break;
        case 3:
          sNum[a] *= sNum[b];
          break;
        case 4:
          sNum[a] /= sNum[b];
          break;
        case 5:
          sNum[a] = Math.Pow(sNum[a], sNum[b]);
          break;
        case 15:
          sNum[a] *= Math.Pow(10.0, sNum[b]);
          break;
        case 16:
          sNum[a] *= Math.Pow(10.0, -sNum[b]);
          break;
        case 17:
          sNum[a] %= sNum[b];
          break;
      }
    }

    private double calcFormula(bool storeSolved)
    {
      double num = 0.0;
      if (storeSolved)
      {
        this.alFmla.Add((object) null);
        this.alFmla.Add((object) null);
      }
      int index = this.alFmla.Count - 2;
      for (int pMax = this.pMAX; pMax >= 0; --pMax)
      {
        for (int a = 1; a <= this.numI - 1; ++a)
        {
          if (this.Num[a].pri == pMax)
          {
            this.calcBinOpr(a, this.Opr[a], a + 1, storeSolved);
            this.Num[a + 1].owned = a;
            num = this.Num[1].val;
          }
        }
      }
      if (storeSolved)
      {
        this.alFmla[index] = (object) this.numI;
        this.alFmla[index + 1] = (object) (this.alFmla.Count - 1 - index);
      }
      this.pMAX = 0;
      return num;
    }

    private void calcBinOpr(int a, int opr, int b, bool storeSolved)
    {
      while (this.Num[a].owned != 0)
        a = this.Num[a].owned;
      while (this.Num[b].owned != 0)
        b = this.Num[b].owned;
      if (storeSolved)
      {
        this.alFmla.Add((object) a);
        this.alFmla.Add((object) opr);
        this.alFmla.Add((object) b);
      }
      switch (opr)
      {
        case 1:
          this.Num[a].val += this.Num[b].val;
          break;
        case 2:
          this.Num[a].val -= this.Num[b].val;
          break;
        case 3:
          this.Num[a].val *= this.Num[b].val;
          break;
        case 4:
          this.Num[a].val /= this.Num[b].val;
          break;
        case 5:
          this.Num[a].val = Math.Pow(this.Num[a].val, this.Num[b].val);
          break;
        case 15:
          this.Num[a].val *= Math.Pow(10.0, this.Num[b].val);
          break;
        case 16:
          this.Num[a].val *= Math.Pow(10.0, -this.Num[b].val);
          break;
        case 17:
          this.Num[a].val %= this.Num[b].val;
          break;
      }
    }

    private int CvrtOprToInt(char oprS)
    {
      switch (oprS)
      {
        case '*':
          return 3;
        case '+':
          return 1;
        case '-':
          return 2;
        case '/':
          return 4;
        case 'F':
          return 15;
        case '^':
          return 5;
        case 'f':
          return 16;
        case 'm':
          return 17;
        default:
          return -1;
      }
    }

    private int calcPRI(int I)
    {
      switch (I)
      {
        case 1:
        case 2:
          return 0;
        case 3:
        case 4:
        case 17:
          return 1;
        case 5:
          return 2;
        case 15:
        case 16:
          return 3;
        default:
          return -1;
      }
    }

    private void LoadAssemblies()
    {
      try
      {
        if (this.htClassInfo == null)
          this.htClassInfo = new Hashtable();
        else
          this.htClassInfo.Clear();
        foreach (string path2 in this.alAssembly)
        {
          foreach (System.Type type in Assembly.LoadFrom(Path.Combine(CRunner.b4pDir, path2)).GetTypes())
          {
            if (!type.Name.StartsWith("_"))
            {
              CClassInfo cclassInfo = new CClassInfo();
              int num1 = 1;
              foreach (ConstructorInfo constructor in type.GetConstructors(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public))
              {
                string key = "new" + num1.ToString((IFormatProvider) CRunner.cul);
                SConstructInfo sconstructInfo = new SConstructInfo(constructor);
                foreach (ParameterInfo parameter in constructor.GetParameters())
                  sconstructInfo.alParameters.Add((object) parameter.ParameterType);
                cclassInfo.htConstructors.Add((object) key, (object) sconstructInfo);
                ++num1;
              }
              foreach (MethodInfo method in type.GetMethods(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public))
              {
                if (!method.Name.StartsWith("get") && !method.Name.StartsWith("set") && !method.Name.StartsWith("add") && !method.Name.StartsWith("remove") && !(method.Name == "Dispose"))
                {
                  SMethodInfo smethodInfo = new SMethodInfo(method.ReturnType, method);
                  foreach (ParameterInfo parameter in method.GetParameters())
                    smethodInfo.alParameters.Add((object) parameter.ParameterType);
                  string lower = method.Name.ToLower(CRunner.cul);
                  if (cclassInfo.htMethods.Contains((object) lower))
                  {
                    int num2 = 2;
                    while (num2 < 100 && cclassInfo.htMethods.Contains((object) (lower + num2.ToString((IFormatProvider) CRunner.cul))))
                      ++num2;
                    lower += num2.ToString((IFormatProvider) CRunner.cul);
                  }
                  cclassInfo.htMethods.Add((object) lower, (object) smethodInfo);
                }
              }
              foreach (PropertyInfo property in type.GetProperties(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public))
              {
                if (cclassInfo.htProperties.Contains((object) property.Name.ToLower(CRunner.cul)))
                  cclassInfo.htProperties.Remove((object) property.Name.ToLower(CRunner.cul));
                cclassInfo.htProperties.Add((object) property.Name.ToLower(CRunner.cul), (object) property);
              }
              foreach (EventInfo eventInfo in type.GetEvents(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public))
                cclassInfo.htEvents.Add((object) eventInfo.Name.ToLower(CRunner.cul), (object) eventInfo);
              foreach (FieldInfo field in type.GetFields(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public))
                cclassInfo.htFields.Add((object) field.Name.ToLower(CRunner.cul), (object) field);
              this.htClassInfo.Add((object) type.Name.ToLower(CRunner.cul), (object) cclassInfo);
            }
          }
        }
      }
      catch (Exception ex)
      {
        throw ex;
      }
    }
  }
}
