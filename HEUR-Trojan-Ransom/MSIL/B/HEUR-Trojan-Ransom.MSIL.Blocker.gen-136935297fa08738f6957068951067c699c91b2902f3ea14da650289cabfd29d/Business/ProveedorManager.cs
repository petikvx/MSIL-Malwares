// Decompiled with JetBrains decompiler
// Type: Coache.Business.ProveedorManager
// Assembly: IsCopyConstruc, Version=5.6.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 1DA50973-FF9A-4563-8B8F-74E2573677DF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-136935297fa08738f6957068951067c699c91b2902f3ea14da650289cabfd29d.exe

using Coache.Common;
using Data;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;

namespace Coache.Business
{
  public class ProveedorManager
  {
    private UsersManager _usersManager = new UsersManager();

    public BindingList<Proveedor> GetAll()
    {
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetProveedores");
      BindingList<Proveedor> all = new BindingList<Proveedor>();
      if (dataTable != null && dataTable.Rows != null)
      {
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
        {
          BindingList<Proveedor> bindingList = all;
          Proveedor proveedor = new Proveedor();
          proveedor.UserID = int.Parse(row["ID"].ToString());
          proveedor.UserName = row["UserName"].ToString();
          proveedor.RoleID = int.Parse(row["ID_Rol"].ToString());
          proveedor.RazonSocial = row["RazonSocial"].ToString();
          proveedor.CUIT = row["CUIT"].ToString();
          proveedor.NombreContacto = row["Contacto"].ToString();
          proveedor.Rubro = new Rubro()
          {
            ID = int.Parse(row["ID_Rubro"].ToString())
          };
          proveedor.DetalleEntidad = new DetalleEntidad()
          {
            Email = row["Email"].ToString(),
            Direccion = row["Direccion"].ToString(),
            Telefono = long.Parse(row["Telefono"].ToString()),
            CP = row["CP"].ToString(),
            Ciudad = new City()
            {
              ID = int.Parse(row["ID_Ciudad"].ToString())
            }
          };
          bindingList.Add(proveedor);
        }
      }
      return all;
    }

    public void GuardarProveedor(Proveedor proveedor, string password)
    {
      UsersManager usersManager = new UsersManager();
      DetalleEntidadManager detalleEntidadManager = new DetalleEntidadManager();
      if (proveedor.UserID == 0)
      {
        SqlTransaction transaction = SqlDataAccess.OpenTransaction(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString());
        try
        {
          SessionData.Set("Transaction", (object) transaction);
          proveedor.UserID = usersManager.CreateProfileAccount((User) proveedor, Proveedor.Profile, password);
          detalleEntidadManager.AddDetalleEntidad((User) proveedor);
          SqlDataAccess.ExecuteNonQuery("GRUPO_N.InsertProveedor", SqlDataAccessArgs.CreateWith("@RazonSocial", (object) proveedor.RazonSocial).And("@ID", (object) proveedor.UserID).And("@ID_Rubro", (object) proveedor.Rubro.ID).And("@CUIT", (object) proveedor.CUIT).And("@Contacto", (object) proveedor.NombreContacto).Arguments, transaction);
          SessionData.Remove("Transaction");
          SqlDataAccess.Commit(transaction);
        }
        catch
        {
          SqlDataAccess.Rollback(transaction);
          proveedor.UserID = 0;
          throw;
        }
      }
      else
      {
        detalleEntidadManager.UpdateDetalleEntidad((User) proveedor);
        SqlDataAccess.ExecuteNonQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.UpdateProveedor", SqlDataAccessArgs.CreateWith("@RazonSocial", (object) proveedor.RazonSocial).And("@ID", (object) proveedor.UserID).And("@ID_Rubro", (object) proveedor.Rubro.ID).And("@CUIT", (object) proveedor.CUIT).And("@Contacto", (object) proveedor.NombreContacto).Arguments);
      }
    }

    public void Delete(Proveedor proveedor) => this._usersManager.DeleteAccount((User) proveedor);
  }
}
