// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.FreeIndexList
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: 1D4D5564-A025-490C-AF1D-DF4FBB709D1F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Virus.Win32.Expiro.w-f8f9f26e940480624825f6bddbea86e70fc4aa746c4dd8efa7d98dcb477000ed.exe

using Microsoft.InfoCards.Diagnostics;
using System;
using System.Collections.Generic;

namespace Microsoft.InfoCards
{
  internal class FreeIndexList
  {
    private Dictionary<int, int> m_list;

    public FreeIndexList(int size) => this.m_list = size > 0 ? new Dictionary<int, int>(size) : throw InfoCardTrace.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (size), (object) size, SR.GetString("StoreFreeListSizeOutOfRange")));

    public bool Contains(int value) => value > 0 ? this.m_list.ContainsKey(value) : throw InfoCardTrace.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (value), (object) value, SR.GetString("StoreFreeListValueOutOfRange")));

    public void Put(int value)
    {
      if (value <= 0)
        throw InfoCardTrace.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (value), (object) value, SR.GetString("StoreFreeListValueOutOfRange")));
      this.m_list.Add(value, value);
    }

    public int GetNext()
    {
      int key = -1;
      if (this.m_list.Count > 0)
      {
        using (IEnumerator<int> enumerator = (IEnumerator<int>) this.m_list.Keys.GetEnumerator())
        {
          enumerator.MoveNext();
          key = enumerator.Current;
        }
        this.m_list.Remove(key);
      }
      return key;
    }
  }
}
