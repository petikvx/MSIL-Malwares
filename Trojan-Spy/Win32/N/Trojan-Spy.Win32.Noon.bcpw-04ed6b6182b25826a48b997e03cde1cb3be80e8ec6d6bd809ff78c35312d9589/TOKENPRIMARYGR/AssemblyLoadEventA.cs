// Decompiled with JetBrains decompiler
// Type: TOKENPRIMARYGR.AssemblyLoadEventA
// Assembly: RSACspObj, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4F5485A2-22DD-4A3A-83EE-265873F291A8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcpw-04ed6b6182b25826a48b997e03cde1cb3be80e8ec6d6bd809ff78c35312d9589.exe

using System;
using System.IO;
using System.Runtime.InteropServices;

namespace TOKENPRIMARYGR
{
  internal class AssemblyLoadEventA
  {
    public static string GetBasePath()
    {
      string[] strArray = AssemblyLoadEventA.\u206A‪⁪‍⁪⁭‬⁬​‍‎‪​‏‍​‌‬‌⁪‪‫‍‪⁭⁯‌‌‪⁯‭‏⁫‎‌⁯⁮‭‫‭‮(AssemblyLoadEventA.\u206E⁮‮⁪⁯⁪‫‪‭⁯⁯‌‌⁪‭‪⁬‌‪‍⁭⁯‏⁬‫⁭‬⁪‏‌‎⁬‪‭‭‌‮‫⁬‌‮(), new char[1]
      {
        '\\'
      });
label_1:
      int num1 = 59126003;
      int index;
      string str;
      string basePath;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1428818542)) % 10U)
        {
          case 0:
            int num3;
            num1 = num3 = index >= strArray.Length - 2 ? 1070101139 : (num3 = 255640208);
            continue;
          case 1:
            num1 = (int) num2 * 337455796 ^ -1440962332;
            continue;
          case 2:
            num1 = (int) num2 * 855702586 ^ -622647003;
            continue;
          case 3:
            str = string.Empty;
            num1 = (int) num2 * -1923759555 ^ 309025003;
            continue;
          case 4:
            index = 0;
            num1 = (int) num2 * -798480275 ^ -1634565249;
            continue;
          case 5:
            basePath = str;
            num1 = (int) num2 * -1573176811 ^ 539317637;
            continue;
          case 6:
            str = AssemblyLoadEventA.\u202A⁮‍‭‎​⁫‭⁮‪‏‏‎⁯‌‎‪‭‮‬‌‍‮​⁪‬⁮‭‎‏‎​‏‮‫⁫‎⁮‎⁫‮(str, strArray[index], "\\");
            num1 = 1435239555;
            continue;
          case 7:
            ++index;
            num1 = (int) num2 * -373931292 ^ -426779820;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_11:
      return basePath;
    }

    public static double RandDoubleInRange(double lower, double upper)
    {
label_1:
      int num1 = -1396522628;
      double num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1353731775)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num2 = AssemblyLoadEventA.\u200E‬‬‌‏⁮‫‪⁫​‪⁫‬‬‫⁯‏‬⁫​⁭​‏⁯‍‮⁮‏‭‍‍‫⁯⁫⁪‮‮‫‏⁭‮(AssemblyLoadEventA.\u202C‪⁬⁫‪⁯⁭‎⁫‬⁭⁯⁫​‭⁯‌‍‭⁬‮‭⁭‮⁫‏⁭⁯‭⁮‎‎‭⁬⁪‮‎‫⁮‌‮()) * (upper - lower) + lower;
            num1 = (int) num3 * -1299230712 ^ -1164895313;
            continue;
          case 2:
            num1 = (int) num3 * 1113571045 ^ -1003821924;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return num2;
    }

    public static double Max(double[] values)
    {
label_1:
      int num1 = -252998442;
      bool flag1;
      int index;
      double num2;
      bool flag2;
      double num3;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num1 ^ -803396403)) % 11U)
        {
          case 0:
            flag2 = index < values.Length;
            num1 = -1752619399;
            continue;
          case 1:
            num2 = values[0];
            num1 = (int) num4 * 61909148 ^ 844687431;
            continue;
          case 3:
            int num5 = !flag2 ? -57050609 : (num5 = -784915370);
            num1 = num5 ^ (int) num4 * 1749686671;
            continue;
          case 4:
            index = 1;
            num1 = (int) num4 * -14064245 ^ 403304372;
            continue;
          case 5:
            goto label_1;
          case 6:
            ++index;
            num1 = -402627490;
            continue;
          case 7:
            num2 = values[index];
            num1 = (int) num4 * -653812095 ^ 813492092;
            continue;
          case 8:
            int num6 = !flag1 ? 1594669086 : (num6 = 290235567);
            num1 = num6 ^ (int) num4 * -1965424616;
            continue;
          case 9:
            flag1 = values[index] > num2;
            num1 = -808392420;
            continue;
          case 10:
            num3 = num2;
            num1 = (int) num4 * 686393821 ^ 1117752218;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return num3;
    }

    public AssemblyLoadEventA()
    {
label_1:
      int num1 = 332564773;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 731103761)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 2019448764 ^ 2128898244;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static string \u206E⁮‮⁪⁯⁪‫‪‭⁯⁯‌‌⁪‭‪⁬‌‪‍⁭⁯‏⁬‫⁭‬⁪‏‌‎⁬‪‭‭‌‮‫⁬‌‮() => Directory.GetCurrentDirectory();

    static string[] \u206A‪⁪‍⁪⁭‬⁬​‍‎‪​‏‍​‌‬‌⁪‪‫‍‪⁭⁯‌‌‪⁯‭‏⁫‎‌⁯⁮‭‫‭‮([In] string obj0, [In] char[] obj1) => obj0.Split(obj1);

    static string \u202A⁮‍‭‎​⁫‭⁮‪‏‏‎⁯‌‎‪‭‮‬‌‍‮​⁪‬⁮‭‎‏‎​‏‮‫⁫‎⁮‎⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static Random \u202C‪⁬⁫‪⁯⁭‎⁫‬⁭⁯⁫​‭⁯‌‍‭⁬‮‭⁭‮⁫‏⁭⁯‭⁮‎‎‭⁬⁪‮‎‫⁮‌‮() => new Random();

    static double \u200E‬‬‌‏⁮‫‪⁫​‪⁫‬‬‫⁯‏‬⁫​⁭​‏⁯‍‮⁮‏‭‍‍‫⁯⁫⁪‮‮‫‏⁭‮([In] Random obj0) => obj0.NextDouble();
  }
}
