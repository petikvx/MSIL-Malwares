// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.UserTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Runtime.InteropServices;

namespace PreEmptive.Analytics.Common.Tags
{
  public class UserTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 2;
        int num1 = -555;
        int num2 = num1;
        num1 = -555;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (true)
              ;
            if (false)
              ;
            return Utils.a("쎵쮷\uDFB9캻", A_1);
          default:
            goto case 1;
        }
      }
    }

    public UserInfo UserInfo
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 12466;
        int num2 = num1;
        num1 = 12466;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 26439;
        int num2 = num1;
        num1 = 26439;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.a = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public UserTag(UserInfo userInfo, bool omitPII, [Optional] string fallbackName)
    {
      int A_1 = 14;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      if (omitPII)
      {
        userInfo.IsAdmin = new bool?();
        userInfo.HashedName = fallbackName;
      }
      if (string.IsNullOrEmpty(userInfo.HashedName))
        goto label_5;
label_1:
      this.UserInfo = userInfo;
      this.AddAttribute(Utils.a("곁ꗃꯅ귇", A_1), userInfo.HashedName);
      if (!userInfo.IsAdmin.HasValue)
        return;
      this.AddAttribute(Utils.a("ꏁꃃꯅꇇ\uA4C9", A_1), userInfo.IsAdmin.ToString().ToLowerInvariant());
      return;
label_5:
      userInfo.HashedName = !omitPII ? userInfo.InstanceID ?? Guid.NewGuid().ToString() : Guid.NewGuid().ToString();
      goto label_1;
    }
  }
}
