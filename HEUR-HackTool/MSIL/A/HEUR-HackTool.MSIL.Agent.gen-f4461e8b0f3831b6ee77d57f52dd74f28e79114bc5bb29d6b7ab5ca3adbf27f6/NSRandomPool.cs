// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSRandomPool
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Text;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  [DefaultEvent("ValueChanged")]
  internal class NSRandomPool : Control
  {
    private StringBuilder _Value;
    private string _FullValue;
    private Random RNG;
    private int ItemSize;
    private int DrawSize;
    private Rectangle WA;
    private int RowSize;
    private int ColumnSize;
    private byte[] Table;
    private int Index1;
    private int Index2;
    private bool InvertColors;
    private GraphicsPath GP1;
    private GraphicsPath GP2;
    private Pen P1;
    private Pen P2;
    private SolidBrush B1;
    private SolidBrush B2;
    private PathGradientBrush PB1;

    public event NSRandomPool.ValueChangedEventHandler ValueChanged;

    public string Value => this._Value.ToString();

    public string FullValue => BitConverter.ToString(this.Table).Replace("-", "");

    public NSRandomPool()
    {
      this._Value = new StringBuilder();
      this.RNG = new Random();
      this.ItemSize = 9;
      this.DrawSize = 8;
      this.Index1 = -1;
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.P1 = new Pen(Color.FromArgb(55, 55, 55));
      this.P2 = new Pen(Color.FromArgb(24, 24, 24));
      this.B1 = new SolidBrush(Color.FromArgb(30, 30, 30));
    }

    protected override void OnHandleCreated(EventArgs e)
    {
      this.UpdateTable();
      base.OnHandleCreated(e);
    }

    private void UpdateTable()
    {
      this.WA = new Rectangle(5, 5, checked (this.Width - 10), checked (this.Height - 10));
      this.RowSize = this.WA.Width / this.ItemSize;
      this.ColumnSize = this.WA.Height / this.ItemSize;
      this.WA.Width = checked (this.RowSize * this.ItemSize);
      this.WA.Height = checked (this.ColumnSize * this.ItemSize);
      this.WA.X = checked (unchecked (this.Width / 2) - unchecked (this.WA.Width / 2));
      this.WA.Y = checked (unchecked (this.Height / 2) - unchecked (this.WA.Height / 2));
      this.Table = new byte[checked (this.RowSize * this.ColumnSize - 1 + 1)];
      int num = checked (this.Table.Length - 1);
      int index = 0;
      while (index <= num)
      {
        this.Table[index] = checked ((byte) this.RNG.Next(100));
        checked { ++index; }
      }
      this.Invalidate();
    }

    protected override void OnSizeChanged(EventArgs e) => this.UpdateTable();

    protected override void OnMouseMove(MouseEventArgs e) => this.HandleDraw(e);

    protected override void OnMouseDown(MouseEventArgs e)
    {
      this.HandleDraw(e);
      base.OnMouseDown(e);
    }

    private void HandleDraw(MouseEventArgs e)
    {
      if (e.Button != MouseButtons.Left && e.Button != MouseButtons.Right || !this.WA.Contains(e.Location))
        return;
      this.InvertColors = e.Button == MouseButtons.Right;
      this.Index1 = this.GetIndex(e.X, e.Y);
      if (this.Index1 == this.Index2)
        return;
      bool flag1 = this.Index1 % this.RowSize != 0;
      bool flag2 = this.Index1 % this.RowSize != checked (this.RowSize - 1);
      this.Randomize(checked (this.Index1 - this.RowSize));
      if (flag1)
        this.Randomize(checked (this.Index1 - 1));
      this.Randomize(this.Index1);
      if (flag2)
        this.Randomize(checked (this.Index1 + 1));
      this.Randomize(checked (this.Index1 + this.RowSize));
      this._Value.Append(this.Table[this.Index1].ToString("X"));
      if (this._Value.Length > 32)
        this._Value.Remove(0, 2);
      NSRandomPool.ValueChangedEventHandler valueChangedEvent = this.ValueChangedEvent;
      if (valueChangedEvent != null)
        valueChangedEvent((object) this);
      this.Index2 = this.Index1;
      this.Invalidate();
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.Clear(this.BackColor);
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      this.GP1 = ThemeModule.CreateRound(0, 0, checked (this.Width - 1), checked (this.Height - 1), 7);
      this.GP2 = ThemeModule.CreateRound(1, 1, checked (this.Width - 3), checked (this.Height - 3), 7);
      this.PB1 = new PathGradientBrush(this.GP1);
      this.PB1.CenterColor = Color.FromArgb(50, 50, 50);
      this.PB1.SurroundColors = new Color[1]
      {
        Color.FromArgb(45, 45, 45)
      };
      this.PB1.FocusScales = new PointF(0.9f, 0.5f);
      ThemeModule.G.FillPath((Brush) this.PB1, this.GP1);
      ThemeModule.G.DrawPath(this.P1, this.GP1);
      ThemeModule.G.DrawPath(this.P2, this.GP2);
      ThemeModule.G.SmoothingMode = SmoothingMode.None;
      int num1 = checked (this.Table.Length - 1);
      int index = 0;
      while (index <= num1)
      {
        int num2 = Math.Max((int) this.Table[index], 75);
        int x = checked (unchecked (index % this.RowSize) * this.ItemSize + this.WA.X);
        int y = checked (unchecked (index / this.RowSize) * this.ItemSize + this.WA.Y);
        this.B2 = new SolidBrush(Color.FromArgb(num2, num2, num2));
        ThemeModule.G.FillRectangle((Brush) this.B1, checked (x + 1), checked (y + 1), this.DrawSize, this.DrawSize);
        ThemeModule.G.FillRectangle((Brush) this.B2, x, y, this.DrawSize, this.DrawSize);
        this.B2.Dispose();
        checked { ++index; }
      }
    }

    private int GetIndex(int x, int y) => checked (unchecked (checked (y - this.WA.Y) / this.ItemSize) * this.RowSize + unchecked (checked (x - this.WA.X) / this.ItemSize));

    private void Randomize(int index)
    {
      if (index <= -1 || index >= this.Table.Length)
        return;
      if (this.InvertColors)
        this.Table[index] = checked ((byte) this.RNG.Next(100));
      else
        this.Table[index] = checked ((byte) this.RNG.Next(100, 256));
    }

    public delegate void ValueChangedEventHandler(object sender);
  }
}
