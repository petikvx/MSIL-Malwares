// Decompiled with JetBrains decompiler
// Type: TumblrAPI.HttpHelper
// Assembly: EventListe, Version=1.0.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 17402B6D-E2A2-428E-97AD-7F2170B297A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\Backdoor.Win32.Buterat.frsq-f1c24055722dc6f94c4b223ed4a7bce8ffb5c5bb3030bca735d6ceab513d8d31.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;
using System.Web;

namespace TumblrAPI
{
  internal class HttpHelper
  {
    private readonly IDictionary<string, string> myPostItems = (IDictionary<string, string>) new Dictionary<string, string>();
    private string myUrl;

    public HttpHelper(string url, IDictionary<string, string> values)
    {
      this.myUrl = url;
      this.myPostItems = values;
    }

    public string Url
    {
      get => this.myUrl;
      set => this.myUrl = value;
    }

    public TumblrResult Post() => this.PostData(this.myUrl);

    private string EncodePostItems()
    {
      StringBuilder stringBuilder = new StringBuilder();
      foreach (KeyValuePair<string, string> postItem in (IEnumerable<KeyValuePair<string, string>>) this.myPostItems)
      {
        if (postItem.Key != "data")
          stringBuilder.AppendFormat("{0}={1}&", (object) postItem.Key, (object) HttpUtility.UrlEncode(postItem.Value));
      }
      return stringBuilder.ToString().TrimEnd('&');
    }

    private TumblrResult PostData(string url)
    {
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(new Uri(url));
      httpWebRequest.Method = "POST";
      if (this.myPostItems.ContainsKey("data"))
      {
        byte[] numArray;
        using (FileStream fileStream = new FileStream(this.myPostItems["data"], FileMode.Open, FileAccess.Read))
        {
          numArray = new byte[fileStream.Length];
          fileStream.Read(numArray, 0, numArray.Length);
          fileStream.Close();
        }
        this.myPostItems.Remove("data");
        Dictionary<string, object> postParameters = new Dictionary<string, object>();
        foreach (KeyValuePair<string, string> postItem in (IEnumerable<KeyValuePair<string, string>>) this.myPostItems)
          postParameters.Add(postItem.Key, (object) postItem.Value);
        postParameters.Add("data", (object) new FormUpload.FileParameter(numArray));
        httpWebRequest = FormUpload.MultipartFormDataPost(this.myUrl, "TumblrAPI.NET", postParameters);
      }
      else
      {
        byte[] bytes = new UTF8Encoding().GetBytes(this.EncodePostItems());
        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
        httpWebRequest.ContentLength = (long) bytes.Length;
        using (Stream requestStream = httpWebRequest.GetRequestStream())
          requestStream.Write(bytes, 0, bytes.Length);
      }
      try
      {
        HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse();
        string end = new StreamReader(response.GetResponseStream(), true).ReadToEnd();
        response.Close();
        return new TumblrResult()
        {
          Message = end,
          PostStatus = PostStatus.Created
        };
      }
      catch (WebException ex)
      {
        string end = new StreamReader(ex.Response.GetResponseStream(), true).ReadToEnd();
        ex.Response.Close();
        PostStatus postStatus;
        switch (((HttpWebResponse) ex.Response).StatusCode)
        {
          case HttpStatusCode.OK:
          case HttpStatusCode.Created:
            postStatus = PostStatus.Created;
            break;
          case HttpStatusCode.Unauthorized:
          case HttpStatusCode.Forbidden:
            postStatus = PostStatus.Forbidden;
            break;
          default:
            postStatus = PostStatus.BadRequest;
            break;
        }
        return new TumblrResult()
        {
          Message = end,
          PostStatus = postStatus
        };
      }
      catch (Exception ex)
      {
        return new TumblrResult()
        {
          Message = ex.ToString(),
          PostStatus = PostStatus.Unknown
        };
      }
    }

    public enum PostType
    {
      Get,
      Post,
    }
  }
}
