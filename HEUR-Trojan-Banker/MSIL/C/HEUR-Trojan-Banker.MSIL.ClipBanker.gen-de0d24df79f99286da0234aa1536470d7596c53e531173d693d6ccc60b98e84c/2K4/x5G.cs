// Decompiled with JetBrains decompiler
// Type: 2K4.x5G
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using \u0032K4;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Text;

namespace \u0032K4
{
  internal static class x5G
  {
    public static string LE3([In] this object obj0)
    {
      StringBuilder stringBuilder = new StringBuilder();
      x5G.\u0036F3(stringBuilder, obj0);
      return stringBuilder.ToString();
    }

    private static void \u0036F3([In] StringBuilder obj0, [In] object obj1)
    {
      if (obj1 == null)
      {
        obj0.Append("null");
      }
      else
      {
        Type type = obj1.GetType();
        if (type == typeof (string) || type == typeof (char))
        {
          obj0.Append('"');
          string str = obj1.ToString();
          for (int index1 = 0; index1 < str.Length; ++index1)
          {
            if (str[index1] < ' ' || str[index1] == '"' || str[index1] == '\\')
            {
              obj0.Append('\\');
              int index2 = "\"\\\n\r\t\b\f".IndexOf(str[index1]);
              if (index2 >= 0)
                obj0.Append("\"\\nrtbf"[index2]);
              else
                obj0.AppendFormat("u{0:X4}", (object) (uint) str[index1]);
            }
            else
              obj0.Append(str[index1]);
          }
          obj0.Append('"');
        }
        else if (type == typeof (byte) || type == typeof (sbyte))
          obj0.Append(obj1.ToString());
        else if (type == typeof (short) || type == typeof (ushort))
          obj0.Append(obj1.ToString());
        else if (type == typeof (int) || type == typeof (uint))
          obj0.Append(obj1.ToString());
        else if (type == typeof (long) || type == typeof (ulong))
          obj0.Append(obj1.ToString());
        else if (type == typeof (float))
          obj0.Append(((float) obj1).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        else if (type == typeof (double))
          obj0.Append(((double) obj1).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        else if (type == typeof (Decimal))
          obj0.Append(((Decimal) obj1).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        else if (type == typeof (bool))
          obj0.Append((bool) obj1 ? "true" : "false");
        else if (type.IsEnum)
        {
          obj0.Append('"');
          obj0.Append(obj1.ToString());
          obj0.Append('"');
        }
        else if (obj1 is IList)
        {
          obj0.Append('[');
          bool flag = true;
          IList list = obj1 as IList;
          for (int index = 0; index < list.Count; ++index)
          {
            if (flag)
              flag = false;
            else
              obj0.Append(',');
            x5G.\u0036F3(obj0, list[index]);
          }
          obj0.Append(']');
        }
        else if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof (Dictionary<,>))
        {
          if (type.GetGenericArguments()[0] != typeof (string))
          {
            obj0.Append("{}");
          }
          else
          {
            obj0.Append('{');
            IDictionary dictionary = obj1 as IDictionary;
            bool flag = true;
            foreach (object key in (IEnumerable) dictionary.Keys)
            {
              if (flag)
                flag = false;
              else
                obj0.Append(',');
              obj0.Append('"');
              obj0.Append((string) key);
              obj0.Append("\":");
              x5G.\u0036F3(obj0, dictionary[key]);
            }
            obj0.Append('}');
          }
        }
        else
        {
          obj0.Append('{');
          bool flag = true;
          FieldInfo[] fields = type.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy);
          for (int index = 0; index < fields.Length; ++index)
          {
            if (!fields[index].IsDefined(typeof (IgnoreDataMemberAttribute), true))
            {
              object obj = fields[index].GetValue(obj1);
              if (obj != null)
              {
                if (flag)
                  flag = false;
                else
                  obj0.Append(',');
                obj0.Append('"');
                obj0.Append(x5G.mXO((MemberInfo) fields[index]));
                obj0.Append("\":");
                x5G.\u0036F3(obj0, obj);
              }
            }
          }
          PropertyInfo[] properties = type.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy);
          for (int index = 0; index < properties.Length; ++index)
          {
            if (properties[index].CanRead && !properties[index].IsDefined(typeof (IgnoreDataMemberAttribute), true))
            {
              object obj = properties[index].GetValue(obj1, (object[]) null);
              if (obj != null)
              {
                if (flag)
                  flag = false;
                else
                  obj0.Append(',');
                obj0.Append('"');
                obj0.Append(x5G.mXO((MemberInfo) properties[index]));
                obj0.Append("\":");
                x5G.\u0036F3(obj0, obj);
              }
            }
          }
          obj0.Append('}');
        }
      }
    }

    private static string mXO([In] MemberInfo obj0)
    {
      if (obj0.IsDefined(typeof (DataMemberAttribute), true))
      {
        DataMemberAttribute customAttribute = (DataMemberAttribute) Attribute.GetCustomAttribute(obj0, typeof (DataMemberAttribute), true);
        if (!string.IsNullOrEmpty(customAttribute.Name))
          return customAttribute.Name;
      }
      return obj0.Name;
    }
  }
}
