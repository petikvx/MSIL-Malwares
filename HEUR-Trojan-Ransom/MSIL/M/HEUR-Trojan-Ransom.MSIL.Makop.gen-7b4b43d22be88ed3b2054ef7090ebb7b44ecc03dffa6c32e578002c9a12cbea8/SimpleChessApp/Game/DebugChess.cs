// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: 0的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9D533F7C-4FE9-47C1-AE3D-12E223DC01C7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7b4b43d22be88ed3b2054ef7090ebb7b44ecc03dffa6c32e578002c9a12cbea8.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board) => this.b = board;

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = -280169329;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1560678552)) % 11U)
        {
          case 0:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * -1353798545 ^ 60803920;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.b.DisableTurns = true;
            num1 = -930445724;
            continue;
          case 3:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1261492878 ^ -1932324413;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.b.ClearBoard();
            int num3 = x == Pieces.King ? -144231370 : (num3 = -27486685);
            num1 = num3 ^ (int) num2 * 1532035985;
            continue;
          case 6:
            num1 = (int) num2 * 935725594 ^ -839184798;
            continue;
          case 7:
            num1 = (int) num2 * 1031195020 ^ -785454195;
            continue;
          case 8:
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -1428330263 ^ 1383232229;
            continue;
          case 9:
            this.b.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * 2140157648 ^ 108754114;
            continue;
          case 10:
            num1 = (int) num2 * 985851287 ^ -846277281;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 2125622058;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 442654943)) % 14U)
        {
          case 0:
            num1 = (int) num2 * 546140196 ^ -585771670;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.b.addBlack(6, 6, Pieces.Pawn);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 639013297 ^ 1516692620;
            continue;
          case 3:
            num1 = (int) num2 * 710429900 ^ -753008693;
            continue;
          case 4:
            this.b.DisableTurns = true;
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * 1031583633 ^ -1264820959;
            continue;
          case 5:
            num1 = (int) num2 * -402633038 ^ 1918781883;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.b.ClearBoard();
            num1 = (int) num2 * -1788172772 ^ 1723151732;
            continue;
          case 8:
            num1 = (int) num2 * 966585334 ^ -1588928372;
            continue;
          case 9:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * 1628448137 ^ 1513466447;
            continue;
          case 10:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 1854302237 ^ 683301629;
            continue;
          case 11:
            num1 = (int) num2 * 1366437289 ^ -86938463;
            continue;
          case 12:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * 51072926 ^ -1379199267;
            continue;
          case 13:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 1586049737 ^ 1443970332;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    internal void TestPromotion()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 1280864344;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 493061523)) % 8U)
        {
          case 0:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1458007574 ^ 795936140;
            continue;
          case 1:
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * -200972517 ^ -847373018;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * 101998759 ^ 1975672723;
            continue;
          case 4:
            this.b.addWhite(4, 6, Pieces.Pawn);
            num1 = (int) num2 * -1751972470 ^ -1485359878;
            continue;
          case 5:
            num1 = (int) num2 * 1814587934 ^ -1344579311;
            continue;
          case 6:
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * 704030180 ^ -1356296133;
            continue;
          case 7:
            goto label_3;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestCastling()
    {
label_1:
      int num1 = 2146151102;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1981147116)) % 10U)
        {
          case 0:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1188538064 ^ -1924113045;
            continue;
          case 1:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 1914389622 ^ -1062689072;
            continue;
          case 2:
            this.b.ClearBoard();
            num1 = (int) num2 * -1869356728 ^ -188800657;
            continue;
          case 3:
            this.b.DisableTurns = true;
            num1 = (int) num2 * -1082840866 ^ 207331697;
            continue;
          case 4:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -1488711364 ^ 1121743127;
            continue;
          case 5:
            this.b.addBlack(7, 7, Pieces.Rook);
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * 1489691443 ^ -1859970960;
            continue;
          case 7:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 1382617275 ^ -326647809;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * 291531909 ^ -445716727;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      this.b.lights.FindAllMoves();
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 98352021;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1316006481)) % 8U)
        {
          case 0:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 502700548 ^ -457073221;
            continue;
          case 1:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1322880382 ^ -940768810;
            continue;
          case 2:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * -626232316 ^ 1253062054;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.b.ClearBoard();
            num1 = (int) num2 * 2083806178 ^ -1926708719;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.b.addBlack(0, 4, Pieces.Bishop);
            num1 = (int) num2 * -557576289 ^ -2044895798;
            continue;
          case 7:
            num1 = (int) num2 * -1611280863 ^ -1008929296;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestCheck()
    {
      this.b.ClearBoard();
      this.b.addBlack(4, 7, Pieces.King);
      this.b.addWhite(3, 0, Pieces.Bishop);
label_1:
      int num1 = -1363219224;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1852676512)) % 5U)
        {
          case 0:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -970381823 ^ 1500822827;
            continue;
          case 1:
            num1 = (int) num2 * -1340947540 ^ 1541236026;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 1579816603 ^ -1211985217;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = -1367547921;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1938296826)) % 14U)
        {
          case 0:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 765731715 ^ -1004289733;
            continue;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * 2013837542 ^ -868384416;
            continue;
          case 2:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * -352506713 ^ 537722728;
            continue;
          case 3:
            this.b.addWhite(0, 0, Pieces.Rook);
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -928836099 ^ 231367730;
            continue;
          case 4:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 1238394187 ^ -906879589;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 91781156 ^ 232828140;
            continue;
          case 7:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -1218586991 ^ -877396;
            continue;
          case 8:
            num1 = (int) num2 * 935939692 ^ -1428824138;
            continue;
          case 9:
            num1 = (int) num2 * 2039475290 ^ 968731605;
            continue;
          case 10:
            goto label_3;
          case 11:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 1236734325 ^ -105465837;
            continue;
          case 12:
            num1 = (int) num2 * 1923182288 ^ 1502191686;
            continue;
          case 13:
            this.b.addWhite(7, 0, Pieces.Rook);
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * 958980836 ^ 1166067922;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }
  }
}
