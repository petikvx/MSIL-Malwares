// Decompiled with JetBrains decompiler
// Type: SmartAssembly.HouseOfCards.Strings
// Assembly: u1rug, Version=0.0.0.0, Culture=neutral, PublicKeyToken=dbb94034cbd6bbd6
// MVID: C8A082E9-30A2-423A-BCDF-59565BB76FBE
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.NetWire.gen-baba76d578be903c9d78e3d6417636ba6a8069cafe9ccccdfce2bc19b43fc299.exe

using \u0002;
using \u00238b;
using SmartAssembly.Delegates;
using System;
using System.Reflection;
using System.Reflection.Emit;

namespace SmartAssembly.HouseOfCards
{
  public static class Strings
  {
    [\u0001]
    public static void CreateGetStringDelegate(Type ownerType)
    {
      FieldInfo[] fields = ownerType.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
      if (true)
        goto label_13;
label_1:
      FieldInfo[] fieldInfoArray;
      for (int index = 0; index < fieldInfoArray.Length; ++index)
      {
        FieldInfo fieldInfo = fieldInfoArray[index];
        try
        {
          if ((object) fieldInfo.FieldType == (object) typeof (GetString))
          {
            DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, typeof (string), new Type[1]
            {
              typeof (int)
            }, ownerType.Module, true);
            ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
            ilGenerator.Emit(OpCodes.Ldarg_0);
            foreach (MethodInfo method in typeof (\u00237b).GetMethods(BindingFlags.Static | BindingFlags.Public))
            {
              if ((object) method.ReturnType == (object) typeof (string))
              {
                ilGenerator.Emit(OpCodes.Ldc_I4, fieldInfo.MetadataToken & 16777215);
                ilGenerator.Emit(OpCodes.Sub);
                ilGenerator.Emit(OpCodes.Call, method);
                break;
              }
            }
            ilGenerator.Emit(OpCodes.Ret);
            fieldInfo.SetValue((object) null, (object) dynamicMethod.CreateDelegate(typeof (GetString)));
            break;
          }
        }
        catch
        {
        }
      }
      return;
label_13:
      fieldInfoArray = fields;
      goto label_1;
    }
  }
}
