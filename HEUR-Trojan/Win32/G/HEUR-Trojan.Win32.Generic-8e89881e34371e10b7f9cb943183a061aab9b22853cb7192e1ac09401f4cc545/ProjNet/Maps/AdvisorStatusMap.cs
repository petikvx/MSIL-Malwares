// Decompiled with JetBrains decompiler
// Type: ProjNet.Maps.AdvisorStatusMap
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Producers;
using ProjNet.Common;
using ProjNet.Services;
using ProjNet.Structs;
using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;

namespace ProjNet.Maps
{
  public class AdvisorStatusMap : Rule, TagStatusService, Candidate, CodeObjectProducer
  {
    private double writer;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public AdvisorStatusMap(
      double key,
      string cust,
      string field,
      long ivk2_size,
      string cont3,
      string value4,
      string last5)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              // ISSUE: explicit constructor call
              base.\u002Ector(cust, field, ivk2_size, cont3, value4, last5);
              goto case 2;
            case 2:
            case 3:
              this.writer = key;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_2;
            case 4:
              goto label_2;
            case 5:
              goto label_8;
            default:
              num2 = 3;
              continue;
          }
        }
label_2:
        PageAdvisorStructBuilder.PrepareCreator();
        num1 = 0;
      }
label_8:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static TagStatusService ViewRegistry() => (TagStatusService) new AdvisorStatusMap(1.0, "metre", "EPSG", 9001L, "m", string.Empty, "Also known as International metre. SI standard unit.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static TagStatusService PopRegistry() => (TagStatusService) new AdvisorStatusMap(0.3048, "foot", "EPSG", 9002L, "ft", string.Empty, string.Empty);

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static TagStatusService PrepareRegistry() => (TagStatusService) new AdvisorStatusMap(0.304800609601219, "US survey foot", "EPSG", 9003L, "American foot", "ftUS", "Used in USA.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static TagStatusService FillRegistry() => (TagStatusService) new AdvisorStatusMap(1852.0, "nautical mile", "EPSG", 9030L, "NM", string.Empty, string.Empty);

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static TagStatusService ValidateRegistry() => (TagStatusService) new AdvisorStatusMap(0.3047972654, "Clarke's foot", "EPSG", 9005L, "Clarke's foot", string.Empty, "Assumes Clarke's 1865 ratio of 1 British foot = 0.3047972654 French legal metres applies to the international metre. Used in older Australian, southern African & British West Indian mapping.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double StopItem() => this.writer;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ForgotItem(double asset) => this.writer = asset;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus()
    {
      int num1 = 1;
      string str;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
              goto label_4;
            case 2:
            case 5:
              goto label_5;
            case 4:
              goto label_2;
            case 6:
              goto label_9;
            default:
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_9;
          }
        }
label_1:
        StringBuilder stringBuilder;
        stringBuilder.Append("]");
        str = stringBuilder.ToString();
        num1 = 6;
        continue;
label_2:
        stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "UNIT[\"{0}\", {1}", new object[2]
        {
          (object) this.Name,
          (object) this.StopItem()
        });
        if (!string.IsNullOrEmpty(this.CountItem()) && this.SelectItem() > 0L)
        {
          num1 = 5;
          continue;
        }
        goto label_1;
label_4:
        stringBuilder = new StringBuilder();
        num1 = 4;
        continue;
label_5:
        stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.CountItem(), (object) this.SelectItem());
        goto label_1;
      }
label_9:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_LinearUnit MetersPerUnit=\"{0}\">{1}</CS_LinearUnit>", new object[2]
    {
      (object) this.StopItem(),
      (object) this.ListRegistry()
    });

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool InvokeItem(object reference)
    {
      int num = 1;
      bool flag1;
      bool flag2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            flag2 = !(reference is AdvisorStatusMap);
            num = 4;
            continue;
          case 2:
          case 3:
            goto label_1;
          case 4:
            if (!flag2)
            {
              flag1 = (reference as AdvisorStatusMap).StopItem() == this.StopItem();
              num = 5;
              continue;
            }
            goto label_1;
          case 5:
            goto label_7;
          default:
            num = 3;
            continue;
        }
      }
label_1:
      flag1 = false;
label_7:
      return flag1;
    }

    internal static bool ChangeWrapper() => true;

    internal static bool CancelWrapper() => false;
  }
}
