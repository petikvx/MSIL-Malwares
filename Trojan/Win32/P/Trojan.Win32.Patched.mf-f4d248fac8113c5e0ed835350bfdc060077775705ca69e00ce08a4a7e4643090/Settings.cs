// Decompiled with JetBrains decompiler
// Type: LTSvcMon.Settings
// Assembly: LTSvcMon, Version=40.101.4107.19874, Culture=neutral, PublicKeyToken=null
// MVID: 816B70F7-DB44-4BCA-BD08-988C39A8AB45
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Patched.mf-f4d248fac8113c5e0ed835350bfdc060077775705ca69e00ce08a4a7e4643090.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;

namespace LTSvcMon
{
  [StandardModule]
  internal sealed class Settings
  {
    public const string WelcomeMessage = "Thank you for using LabTech.";
    public static Hashtable GlobalSettings;
    public const int csScheduleItems = 11;

    public static bool LoadSettings()
    {
      Settings.GlobalSettings = new Hashtable();
      Settings.GlobalSettings = Hashtable.Synchronized(Settings.GlobalSettings);
      try
      {
        if (IntPtr.Size == 8)
        {
          RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey(modLabReg.LabTechSvcBaseRegKey);
          bool flag;
          if (registryKey1 == null)
          {
            flag = true;
          }
          else
          {
            if (Operators.CompareString(Conversions.ToString(registryKey1.GetValue("ServerPassword", (object) "-9998")), "-9998", false) == 0)
              flag = true;
            registryKey1.Close();
          }
          RegistryKey registryKey2 = (RegistryKey) null;
          if (flag)
          {
            RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey(modLabReg.LabTechSvcBaseRegKey.Replace("SOFTWARE\\", "SOFTWARE\\Wow6432Node\\"));
            if (registryKey3 != null)
            {
              modLabReg.LabTechSvcBaseRegKey = modLabReg.LabTechSvcBaseRegKey.Replace("SOFTWARE\\", "SOFTWARE\\Wow6432Node\\");
              modLabReg.LabTechBaseRegKey = modLabReg.LabTechBaseRegKey.Replace("SOFTWARE\\", "SOFTWARE\\Wow6432Node\\");
              registryKey3.Close();
            }
            registryKey2 = (RegistryKey) null;
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      RegistryKey subKey = Registry.LocalMachine.CreateSubKey(modLabReg.LabTechSvcBaseRegKey);
      string str1 = Conversions.ToString(subKey.GetValue("ServerPassword", (object) ""));
      string str2 = Conversions.ToString(subKey.GetValue("Password", (object) ""));
      string str3 = Conversions.ToString(subKey.GetValue("Server Address", (object) ""));
      if (str3.ToLower().StartsWith("http://"))
        str3 = str3.Substring(7);
      if (Operators.CompareString(str1, "", false) != 0)
      {
        cSecurity cSecurity1 = new cSecurity("Thank you for using LabTech.");
        try
        {
          Settings.GlobalSettings.Add((object) Settings.GSettings.SvrPass, (object) cSecurity1.PSDecrypt(str1));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Settings.GlobalSettings.Add((object) Settings.GSettings.SvrPass, (object) str1);
          ProjectData.ClearProjectError();
        }
        cSecurity cSecurity2 = new cSecurity(Settings.GlobalSettings[(object) Settings.GSettings.SvrPass].ToString());
        if (Operators.CompareString(str2, "", false) != 0)
          Settings.GlobalSettings.Add((object) Settings.GSettings.Pass, (object) cSecurity2.PSDecrypt(str2));
        else
          Settings.GlobalSettings.Add((object) Settings.GSettings.Pass, (object) str2);
        Settings.GlobalSettings.Add((object) Settings.GSettings.ID, (object) Conversions.ToInteger(subKey.GetValue("ID", (object) 0)));
        Settings.GlobalSettings.Add((object) Settings.GSettings.ClientID, (object) Conversions.ToInteger(subKey.GetValue("ClientID", (object) 0)));
        Settings.GlobalSettings.Add((object) Settings.GSettings.LocID, (object) Conversions.ToInteger(subKey.GetValue("LocationID", (object) 1)));
        Settings.GlobalSettings.Add((object) Settings.GSettings.Server, (object) str3);
        subKey.Close();
        return true;
      }
      subKey.Close();
      return false;
    }

    internal static bool ExtractFile(string FileName, string Location = "%WINDIR%\\TEMP\\")
    {
      Stream manifestResourceStream = Assembly.GetEntryAssembly().GetManifestResourceStream(Assembly.GetEntryAssembly().GetName().Name.ToString() + Conversions.ToString(Interaction.IIf(FileName.StartsWith("."), (object) "", (object) ".")) + FileName.Replace("\\", ".").Replace("/", "."));
      bool file;
      if (manifestResourceStream != null)
      {
        FileStream fileStream = new FileStream(Environment.ExpandEnvironmentVariables(Location + FileName.TrimStart('.')), FileMode.Create, FileAccess.Write, FileShare.None);
        byte[] numArray = new byte[(int) manifestResourceStream.Length + 1];
        manifestResourceStream.Read(numArray, 0, (int) manifestResourceStream.Length);
        fileStream.Write(numArray, 0, (int) manifestResourceStream.Length);
        fileStream.Close();
        manifestResourceStream.Close();
        file = true;
      }
      else
        file = false;
      return file;
    }

    public enum GSettings
    {
      ID = 1,
      ClientID = 2,
      LocID = 3,
      Server = 4,
      Pass = 5,
      SvrPass = 6,
      FastTalk = 7,
      StartupDefs = 8,
      Schedule = 9,
      LastScans = 10, // 0x0000000A
      ProcessFilter = 11, // 0x0000000B
      EventFilter = 12, // 0x0000000C
      VirusScanners = 13, // 0x0000000D
      Monitor = 14, // 0x0000000E
      NumberOfMonitors = 15, // 0x0000000F
      Compatiblity = 16, // 0x00000010
      Router = 17, // 0x00000011
      UserConsoles = 18, // 0x00000012
      UserPrinters = 19, // 0x00000013
      UserNetDrives = 20, // 0x00000014
      LockDown = 21, // 0x00000015
      NoUpdate = 22, // 0x00000016
      NoVNC = 23, // 0x00000017
      NoDebug = 24, // 0x00000018
      NoBranding = 25, // 0x00000019
      DomainCont = 26, // 0x0000001A
      MasterPC = 27, // 0x0000001B
      TempLoc = 28, // 0x0000001C
      ISAdmin = 29, // 0x0000001D
    }

    internal class MyPolicy : ICertificatePolicy
    {
      public bool CheckValidationResult(
        ServicePoint srvPoint,
        X509Certificate cert,
        WebRequest request,
        int Problem)
      {
        return true;
      }
    }
  }
}
