// Decompiled with JetBrains decompiler
// Type:  
// Assembly: 太q, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: A563A0A3-4CCB-4B67-F791-DB123DB47B3F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\UDS-DangerousObject.Multi.Generic-3f1bb5d6ba0c98f35a9274f5f682185d52102d207b1525060d6696142b2d1634.exe

using System.Collections.Generic;
using System.Drawing;

internal sealed class \u000E\u2000 : \u0005\u2000
{
  public void \u0002(Bitmap _param1, Color _param2, Color _param3, int _param4, int _param5)
  {
    this.\u0002.Color = _param3;
    this.\u0003(_param1, _param2, _param3, _param4, _param5);
  }

  private void \u0003(Bitmap _param1, Color _param2, Color _param3, int _param4, int _param5)
  {
    Queue<Point> pointQueue = new Queue<Point>();
    if (_param1.GetPixel(_param4, _param5) != _param2)
      return;
    pointQueue.Enqueue(new Point(_param4, _param5));
    do
    {
      Point point = pointQueue.Dequeue();
      _param1.SetPixel(point.X, point.Y, _param3);
      int num1;
      for (num1 = 1; point.X - num1 > 0 && _param1.GetPixel(point.X - num1, point.Y) == _param2; ++num1)
        _param1.SetPixel(point.X - num1, point.Y, _param3);
      int num2;
      for (num2 = 1; point.X + num2 < _param1.Width && _param1.GetPixel(point.X + num2, point.Y) == _param2; ++num2)
        _param1.SetPixel(point.X + num2, point.Y, _param3);
      for (int x = point.X - num1 + 1; x < point.X + num2 - 1; ++x)
      {
        if (point.Y > 1 && _param1.GetPixel(x, point.Y - 1) == _param2)
          pointQueue.Enqueue(new Point(x, point.Y - 1));
        if (point.Y < _param1.Height - 1 && _param1.GetPixel(x, point.Y + 1) == _param2)
          pointQueue.Enqueue(new Point(x, point.Y + 1));
      }
    }
    while (pointQueue.Count > 0);
  }
}
