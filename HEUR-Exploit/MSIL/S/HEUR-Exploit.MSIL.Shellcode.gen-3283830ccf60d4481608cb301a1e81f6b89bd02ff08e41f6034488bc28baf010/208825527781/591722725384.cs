// Decompiled with JetBrains decompiler
// Type: 208825527781.591722725384
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003208825527781;
using \u003293721351544;
using \u003462605226301;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;

namespace \u003208825527781
{
  internal static class \u003591722725384
  {
    public const string \u003897600278876 = "\r\n";
    public const string \u003340601888669 = "";
    public const char \u003266227336992 = '\r';
    public const char \u003102738075707 = '\n';
    public const char \u003750359572790 = '\t';

    public static string \u003212424921759(
      this string _param0,
      IFormatProvider _param1,
      object _param2)
    {
      return _param0.\u003127541557423(_param1, _param2);
    }

    public static string \u003937370926224(
      this string _param0,
      IFormatProvider _param1,
      object _param2,
      object _param3)
    {
      return _param0.\u003127541557423(_param1, _param2, _param3);
    }

    public static string \u003263699582926(
      this string _param0,
      IFormatProvider _param1,
      object _param2,
      object _param3,
      object _param4)
    {
      return _param0.\u003127541557423(_param1, _param2, _param3, _param4);
    }

    public static string \u003516130311666(
      this string _param0,
      IFormatProvider _param1,
      object _param2,
      object _param3,
      object _param4,
      object _param5)
    {
      return _param0.\u003127541557423(_param1, _param2, _param3, _param4, _param5);
    }

    private static string \u003127541557423(
      this string _param0,
      IFormatProvider _param1,
      params object[] _param2)
    {
      \u003821784578685.\u003260732825936((object) _param0, "format");
      return string.Format(_param1, _param0, _param2);
    }

    public static bool \u003086374279460(string _param0)
    {
      switch (_param0)
      {
        case "":
          return false;
        case null:
          throw new ArgumentNullException("s");
        default:
          for (int index = 0; index < _param0.Length; ++index)
          {
            if (!char.IsWhiteSpace(_param0[index]))
              return false;
          }
          return true;
      }
    }

    public static StringWriter \u003991602511256(int _param0) => new StringWriter(new StringBuilder(_param0), (IFormatProvider) CultureInfo.InvariantCulture);

    public static void \u003144286251895(char _param0, char[] _param1)
    {
      _param1[0] = '\\';
      _param1[1] = 'u';
      _param1[2] = \u003243965671827.\u003544029306420((int) _param0 >> 12 & 15);
      _param1[3] = \u003243965671827.\u003544029306420((int) _param0 >> 8 & 15);
      _param1[4] = \u003243965671827.\u003544029306420((int) _param0 >> 4 & 15);
      _param1[5] = \u003243965671827.\u003544029306420((int) _param0 & 15);
    }

    public static TSource \u003966959237485<TSource>(
      this IEnumerable<TSource> _param0,
      Func<TSource, string> _param1,
      string _param2)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003591722725384.\u003860735295445<TSource> obj = new \u003591722725384.\u003860735295445<TSource>();
      // ISSUE: reference to a compiler-generated field
      obj.valueSelector = _param1;
      // ISSUE: reference to a compiler-generated field
      obj.testValue = _param2;
      if (_param0 == null)
        throw new ArgumentNullException("source");
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      IEnumerable<TSource> source = obj.valueSelector != null ? _param0.Where<TSource>(new Func<TSource, bool>(obj.\u003CForgivingCaseSensitiveFind\u003Eb__0)) : throw new ArgumentNullException("valueSelector");
      // ISSUE: reference to a compiler-generated method
      return source.Count<TSource>() <= 1 ? source.SingleOrDefault<TSource>() : _param0.Where<TSource>(new Func<TSource, bool>(obj.\u003CForgivingCaseSensitiveFind\u003Eb__1)).SingleOrDefault<TSource>();
    }

    public static string \u003882463081985(string _param0)
    {
      if (string.IsNullOrEmpty(_param0) || !char.IsUpper(_param0[0]))
        return _param0;
      char[] charArray = _param0.ToCharArray();
      for (int index = 0; index < charArray.Length && (index != 1 || char.IsUpper(charArray[index])); ++index)
      {
        bool flag = index + 1 < charArray.Length;
        if (!(index > 0 & flag) || char.IsUpper(charArray[index + 1]))
        {
          char lower = char.ToLower(charArray[index], CultureInfo.InvariantCulture);
          charArray[index] = lower;
        }
        else
          break;
      }
      return new string(charArray);
    }

    public static string \u003299777692885(string _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static bool \u003427892022623(char _param0) => char.IsHighSurrogate(_param0);

    public static bool \u003404443969936(char _param0) => char.IsLowSurrogate(_param0);

    public static bool \u003942788494192(this string _param0, char _param1) => _param0.Length > 0 && (int) _param0[0] == (int) _param1;

    public static bool \u003942847903286(this string _param0, char _param1) => _param0.Length > 0 && (int) _param0[_param0.Length - 1] == (int) _param1;

    public static string \u003340121954393(this string _param0, int _param1, int _param2)
    {
      if (_param0 == null)
        throw new ArgumentNullException();
      if (_param1 < 0)
        throw new ArgumentOutOfRangeException("start");
      if (_param2 < 0)
        throw new ArgumentOutOfRangeException("length");
      int index = _param1 + _param2 - 1;
      if (index >= _param0.Length)
        throw new ArgumentOutOfRangeException("length");
      while (_param1 < index && char.IsWhiteSpace(_param0[_param1]))
        ++_param1;
      while (index >= _param1 && char.IsWhiteSpace(_param0[index]))
        --index;
      return _param0.Substring(_param1, index - _param1 + 1);
    }

    internal enum \u003758627073808
    {
      Start,
      Lower,
      Upper,
      NewWord,
    }
  }
}
