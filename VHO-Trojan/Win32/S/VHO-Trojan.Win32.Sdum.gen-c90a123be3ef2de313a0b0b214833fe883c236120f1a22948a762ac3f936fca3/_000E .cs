// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Egoebwgfjtvapr, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1CC6CB3C-932E-4FDA-6A81-0D2F63757017
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-c90a123be3ef2de313a0b0b214833fe883c236120f1a22948a762ac3f936fca3.exe

using System;
using System.IO;

internal sealed class \u000E\u2002 : Stream
{
  private bool \u0002;
  private Stream \u0003;
  private \u000F\u2003[] \u0005;
  private \u0006\u2003 \u0008;
  private \u0005\u2003 \u0006;
  private \u0002\u2003 \u000E;
  private bool \u000F;
  private byte[] \u0002\u2000;
  private int \u0003\u2000;
  private int \u0005\u2000;

  public \u000E\u2002(Stream _param1, \u0006\u2003 _param2 = null, \u0005\u2003 _param3 = null, bool _param4 = false)
  {
    Stream stream = _param1;
    if (true)
      goto label_5;
label_1:
    int num = _param4 ? 1 : 0;
    if (true)
      goto label_6;
label_2:
    \u0005\u2003 obj = _param3;
    if (true)
      goto label_7;
label_3:
    this.\u0008 = _param2;
    if (this.\u0008 == null)
      this.\u0008 = \u0006\u2003.\u0002();
    if (this.\u0008.\u0003() == 0)
      throw new ArgumentException(\u0008\u2008\u2000.\u0002(-1485703281));
    if (this.\u0008.\u0005() == 0)
      throw new ArgumentException(\u0008\u2008\u2000.\u0002(-1485703281));
    if (!this.\u0003.CanRead)
      throw new ArgumentException(\u0008\u2008\u2000.\u0002(-1485703311));
    if (this.\u0003.CanSeek)
      return;
    throw new ArgumentException(\u0008\u2008\u2000.\u0002(-1485703311));
label_7:
    this.\u0006 = obj;
    goto label_3;
label_6:
    this.\u0002 = num != 0;
    goto label_2;
label_5:
    this.\u0003 = stream;
    goto label_1;
  }

  private void \u0002()
  {
    if (this.\u000F)
      return;
    \u000F\u2003[] objArray = new \u000F\u2003[this.\u0008.\u0003()];
    if (true)
      goto label_4;
label_2:
    int index;
    if (true)
      index = 0;
    while (index < this.\u0008.\u0003())
    {
      this.\u0005[index] = new \u000F\u2003();
      int num = index + 1;
      if (true)
        index = num;
    }
    if (this.\u0006 != null)
      this.\u000E = this.\u0006.\u0002(this.\u0008);
    this.\u000F = true;
    return;
label_4:
    this.\u0005 = objArray;
    goto label_2;
  }

  protected override void Dispose(bool _param1)
  {
    try
    {
      if (!_param1 || this.\u0002)
        return;
      this.\u0003.Close();
    }
    finally
    {
      int num = _param1 ? 1 : 0;
      if (true)
        goto label_5;
label_4:
label_5:
      base.Dispose(num != 0);
      goto label_4;
    }
  }

  public override bool CanRead => true;

  public override bool CanSeek => true;

  public override bool CanWrite => false;

  public override long Length
  {
    get
    {
      if (true)
        ;
      return this.\u0003.Length;
    }
  }

  public override void SetLength(long _param1) => throw new NotSupportedException();

  public override void Write(byte[] _param1, int _param2, int _param3) => throw new NotSupportedException();

  public override void Flush()
  {
  }

  public override long Position
  {
    get
    {
      if (true)
        ;
      long position = this.\u0003.Position;
      if (true)
        ;
      int num1 = this.\u0003\u2000;
      if (true)
        ;
      int num2 = this.\u0005\u2000;
      long num3 = (long) (num1 - num2);
      return position + num3;
    }
    set
    {
      if (true)
        ;
      long offset = value;
      if (true)
        ;
      this.Seek(offset, SeekOrigin.Begin);
      if (false)
        ;
    }
  }

  private int \u0002(byte[] _param1, int _param2, int _param3)
  {
    int num1 = this.\u0005\u2000 - this.\u0003\u2000;
    if (true)
      goto label_2;
label_1:
    int num2;
    if (num2 <= 0)
      return 0;
    if (num2 > _param3)
    {
      int num3 = _param3;
      if (true)
        num2 = num3;
    }
    byte[] src = this.\u0002\u2000;
    int srcOffset = this.\u0003\u2000;
    byte[] dst = _param1;
    int dstOffset = _param2;
    int count = num2;
    if (true)
      goto label_9;
label_8:
    this.\u0003\u2000 += num2;
    return num2;
label_9:
    Buffer.BlockCopy((Array) src, srcOffset, (Array) dst, dstOffset, count);
    goto label_8;
label_2:
    num2 = num1;
    goto label_1;
  }

  private void \u0002(int _param1)
  {
    int position = (int) this.\u0003.Position;
    if (true)
      goto label_2;
label_1:
    int num1;
    if ((long) num1 >= this.\u0003.Length)
      return;
    int num2 = num1 + _param1;
    if (true)
      goto label_6;
label_4:
    \u000F\u2003[] objArray1 = this.\u0005;
    if (true)
      goto label_7;
label_5:
    int index1;
    if (true)
      index1 = 0;
    int num3;
    \u000F\u2003[] objArray2;
    for (; index1 < objArray2.Length; ++index1)
    {
      \u000F\u2003 obj1 = objArray2[index1];
      if (true)
        goto label_12;
label_10:
      \u000F\u2003 obj2;
      if (obj2.\u0003 <= num1 && obj2.\u0005 >= num3)
      {
        byte[] numArray = obj2.\u0002;
        if (true)
          goto label_15;
label_14:
        this.\u0005\u2000 = obj2.\u0005 - obj2.\u0003;
        this.\u0003\u2000 = num1 - obj2.\u0003;
        this.\u0003.Position = (long) obj2.\u0005;
        obj2.\u0008 = DateTime.UtcNow;
        return;
label_15:
        this.\u0002\u2000 = numArray;
        goto label_14;
      }
      else
        continue;
label_12:
      obj2 = obj1;
      goto label_10;
    }
    int index2 = 0;
    DateTime dateTime = this.\u0005[0].\u0008;
    for (int index3 = 1; index3 < this.\u0005.Length; ++index3)
    {
      if (this.\u0005[index3].\u0008 < dateTime)
        index2 = index3;
    }
    \u000F\u2003 obj = this.\u0005[index2];
    if (obj.\u0002 == null)
      obj.\u0002 = new byte[this.\u0008.\u0002()];
    int num4 = num1;
    int num5 = this.\u0002(num1);
    if (num5 < 0)
      num5 = 0;
    int num6 = num5 + this.\u0008.\u0002();
    if (this.\u000E == null || !this.\u000E.\u0002(num5, ref obj))
    {
      obj.\u0003 = num5;
      obj.\u0008 = DateTime.UtcNow;
      this.\u0002\u2000 = obj.\u0002;
      this.\u0003.Position = (long) num5;
      this.\u0005\u2000 = this.\u0003.Read(this.\u0002\u2000, 0, num6 - num5);
      this.\u0003\u2000 = num4 - num5;
      obj.\u0005 = num5 + this.\u0005\u2000;
      if (this.\u000E == null)
        return;
      this.\u000E.\u0002(obj);
      return;
    }
    this.\u0002\u2000 = obj.\u0002;
    this.\u0005\u2000 = obj.\u0005 - num5;
    this.\u0003.Position = (long) obj.\u0005;
    this.\u0003\u2000 = num4 - num5;
    return;
label_7:
    objArray2 = objArray1;
    goto label_5;
label_6:
    num3 = num2;
    goto label_4;
label_2:
    num1 = position;
    goto label_1;
  }

  private int \u0002(int _param1)
  {
    int num1 = _param1;
    if (true)
      ;
    int num2 = _param1;
    if (true)
      ;
    if (true)
      ;
    int num3 = this.\u0008.\u0002();
    int num4 = num2 % num3;
    return num1 - num4;
  }

  public override int Read(byte[] _param1, int _param2, int _param3)
  {
    if (_param1 == null)
      throw new ArgumentNullException(\u0008\u2008\u2000.\u0002(-1485703540));
    if (_param2 < 0)
      throw new ArgumentOutOfRangeException(\u0008\u2008\u2000.\u0002(-1485703527));
    if (_param3 < 0)
      throw new ArgumentOutOfRangeException(\u0008\u2008\u2000.\u0002(-1485703530));
    if (_param1.Length - _param2 < _param3)
      throw new ArgumentException();
    int num1 = _param2;
    if (true)
      goto label_11;
label_9:
    int num2 = this.\u0002(_param1, _param2, _param3);
    if (true)
      goto label_12;
label_10:
    int num3;
    if (num3 == _param3)
      return num3;
    int num4 = num3;
    if (true)
      goto label_16;
label_15:
    if (num3 > 0)
    {
      int num5 = _param3 - num3;
      if (true)
        goto label_19;
label_18:
      _param2 += num3;
      goto label_20;
label_19:
      _param3 = num5;
      goto label_18;
    }
label_20:
    this.\u0003\u2000 = this.\u0005\u2000 = 0;
    this.\u0002();
    int num6;
    int num7;
    if (_param3 >= this.\u0008.\u0002())
    {
      if (this.\u000E == null)
        return this.\u0003.Read(_param1, _param2, _param3) + num7;
      int num8 = (int) this.\u0003.Position - num7;
      int num9;
      if (this.\u000E.\u0002(num8, _param1, num6, _param3 + num7, out num9))
      {
        this.\u0003.Seek((long) (num9 - num7), SeekOrigin.Current);
        return num9;
      }
      num9 = this.\u0003.Read(_param1, _param2, _param3);
      if (num9 != 0)
        this.\u000E.\u0002(num8, _param1, num6, num9 + num7, num9 < _param3);
      return num9 + num7;
    }
    this.\u0002(_param3);
    return this.\u0002(_param1, _param2, _param3) + num7;
label_16:
    num7 = num4;
    goto label_15;
label_12:
    num3 = num2;
    goto label_10;
label_11:
    num6 = num1;
    goto label_9;
  }

  public override long Seek(long _param1, SeekOrigin _param2)
  {
    if (this.\u0005\u2000 - this.\u0003\u2000 > 0 && _param2 == SeekOrigin.Current)
    {
      long num = _param1 - (long) (this.\u0005\u2000 - this.\u0003\u2000);
      if (true)
        _param1 = num;
    }
    long position = this.Position;
    if (true)
      goto label_6;
label_4:
    long num1 = this.\u0003.Seek(_param1, _param2);
    if (true)
      goto label_7;
label_5:
    long num2;
    long num3;
    this.\u0003\u2000 = (int) (num2 - (num3 - (long) this.\u0003\u2000));
    if (0 <= this.\u0003\u2000 && this.\u0003\u2000 < this.\u0005\u2000)
      this.\u0003.Seek((long) (this.\u0005\u2000 - this.\u0003\u2000), SeekOrigin.Current);
    else
      this.\u0003\u2000 = this.\u0005\u2000 = 0;
    return num2;
label_7:
    num2 = num1;
    goto label_5;
label_6:
    num3 = position;
    goto label_4;
  }
}
