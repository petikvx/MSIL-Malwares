// Decompiled with JetBrains decompiler
// Type: DomainObjects.Show
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace DomainObjects
{
  [Table(Name = "dbo.Show")]
  public class Show : INotifyPropertyChanging, INotifyPropertyChanged, IShow, IEntity
  {
    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);
    private Guid _ShowId;
    private string _VenueName;
    private string _City;
    private string _State;
    private string _Country;
    private DateTime? _ShowDate;
    private Decimal? _TicketPrice;
    private string _Notes;
    private DateTime _CreatedDate;
    private DateTime? _UpdatedDate;
    private DateTime? _DeletedDate;
    private bool _Deleted;
    private int? _Order;
    private string _VenueNotes;
    private string _PhishNetUrl;
    private int? _PhishNetShowId;
    private EntitySet<Set> _Sets;

    public Show() => this._Sets = new EntitySet<Set>(new Action<Set>(this.attach_Sets), new Action<Set>(this.detach_Sets));

    [Column(DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true, Storage = "_ShowId")]
    public Guid ShowId
    {
      get => this._ShowId;
      set
      {
        if (!(this._ShowId != value))
          return;
        this.SendPropertyChanging();
        this._ShowId = value;
        this.SendPropertyChanged(nameof (ShowId));
      }
    }

    [Column(DbType = "VarChar(100)", Storage = "_VenueName")]
    public string VenueName
    {
      get => this._VenueName;
      set
      {
        if (!(this._VenueName != value))
          return;
        this.SendPropertyChanging();
        this._VenueName = value;
        this.SendPropertyChanged(nameof (VenueName));
      }
    }

    [Column(DbType = "VarChar(50)", Storage = "_City")]
    public string City
    {
      get => this._City;
      set
      {
        if (!(this._City != value))
          return;
        this.SendPropertyChanging();
        this._City = value;
        this.SendPropertyChanged(nameof (City));
      }
    }

    [Column(DbType = "Char(2)", Storage = "_State")]
    public string State
    {
      get => this._State;
      set
      {
        if (!(this._State != value))
          return;
        this.SendPropertyChanging();
        this._State = value;
        this.SendPropertyChanged(nameof (State));
      }
    }

    [Column(DbType = "NVarChar(50)", Storage = "_Country")]
    public string Country
    {
      get => this._Country;
      set
      {
        if (!(this._Country != value))
          return;
        this.SendPropertyChanging();
        this._Country = value;
        this.SendPropertyChanged(nameof (Country));
      }
    }

    [Column(DbType = "Date", Storage = "_ShowDate")]
    public DateTime? ShowDate
    {
      get => this._ShowDate;
      set
      {
        DateTime? showDate = this._ShowDate;
        DateTime? nullable = value;
        if ((showDate.HasValue == nullable.HasValue ? (showDate.HasValue ? (showDate.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
          return;
        this.SendPropertyChanging();
        this._ShowDate = value;
        this.SendPropertyChanged(nameof (ShowDate));
      }
    }

    [Column(DbType = "Money", Storage = "_TicketPrice")]
    public Decimal? TicketPrice
    {
      get => this._TicketPrice;
      set
      {
        Decimal? ticketPrice = this._TicketPrice;
        Decimal? nullable = value;
        if (ticketPrice.GetValueOrDefault() == nullable.GetValueOrDefault() & ticketPrice.HasValue == nullable.HasValue)
          return;
        this.SendPropertyChanging();
        this._TicketPrice = value;
        this.SendPropertyChanged(nameof (TicketPrice));
      }
    }

    [Column(DbType = "NVarChar(MAX)", Storage = "_Notes")]
    public string Notes
    {
      get => this._Notes;
      set
      {
        if (!(this._Notes != value))
          return;
        this.SendPropertyChanging();
        this._Notes = value;
        this.SendPropertyChanged(nameof (Notes));
      }
    }

    [Column(DbType = "DateTime NOT NULL", Storage = "_CreatedDate")]
    public DateTime CreatedDate
    {
      get => this._CreatedDate;
      set
      {
        if (!(this._CreatedDate != value))
          return;
        this.SendPropertyChanging();
        this._CreatedDate = value;
        this.SendPropertyChanged(nameof (CreatedDate));
      }
    }

    [Column(DbType = "DateTime", Storage = "_UpdatedDate")]
    public DateTime? UpdatedDate
    {
      get => this._UpdatedDate;
      set
      {
        DateTime? updatedDate = this._UpdatedDate;
        DateTime? nullable = value;
        if ((updatedDate.HasValue == nullable.HasValue ? (updatedDate.HasValue ? (updatedDate.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
          return;
        this.SendPropertyChanging();
        this._UpdatedDate = value;
        this.SendPropertyChanged(nameof (UpdatedDate));
      }
    }

    [Column(DbType = "DateTime", Storage = "_DeletedDate")]
    public DateTime? DeletedDate
    {
      get => this._DeletedDate;
      set
      {
        DateTime? deletedDate = this._DeletedDate;
        DateTime? nullable = value;
        if ((deletedDate.HasValue == nullable.HasValue ? (deletedDate.HasValue ? (deletedDate.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
          return;
        this.SendPropertyChanging();
        this._DeletedDate = value;
        this.SendPropertyChanged(nameof (DeletedDate));
      }
    }

    [Column(DbType = "Bit NOT NULL", Storage = "_Deleted")]
    public bool Deleted
    {
      get => this._Deleted;
      set
      {
        if (this._Deleted == value)
          return;
        this.SendPropertyChanging();
        this._Deleted = value;
        this.SendPropertyChanged(nameof (Deleted));
      }
    }

    [Column(DbType = "Int", Name = "[Order]", Storage = "_Order")]
    public int? Order
    {
      get => this._Order;
      set
      {
        int? order = this._Order;
        int? nullable = value;
        if (order.GetValueOrDefault() == nullable.GetValueOrDefault() & order.HasValue == nullable.HasValue)
          return;
        this.SendPropertyChanging();
        this._Order = value;
        this.SendPropertyChanged(nameof (Order));
      }
    }

    [Column(DbType = "VarChar(MAX)", Storage = "_VenueNotes")]
    public string VenueNotes
    {
      get => this._VenueNotes;
      set
      {
        if (!(this._VenueNotes != value))
          return;
        this.SendPropertyChanging();
        this._VenueNotes = value;
        this.SendPropertyChanged(nameof (VenueNotes));
      }
    }

    [Column(DbType = "VarChar(200)", Storage = "_PhishNetUrl")]
    public string PhishNetUrl
    {
      get => this._PhishNetUrl;
      set
      {
        if (!(this._PhishNetUrl != value))
          return;
        this.SendPropertyChanging();
        this._PhishNetUrl = value;
        this.SendPropertyChanged(nameof (PhishNetUrl));
      }
    }

    [Column(DbType = "Int", Storage = "_PhishNetShowId")]
    public int? PhishNetShowId
    {
      get => this._PhishNetShowId;
      set
      {
        int? phishNetShowId = this._PhishNetShowId;
        int? nullable = value;
        if (phishNetShowId.GetValueOrDefault() == nullable.GetValueOrDefault() & phishNetShowId.HasValue == nullable.HasValue)
          return;
        this.SendPropertyChanging();
        this._PhishNetShowId = value;
        this.SendPropertyChanged(nameof (PhishNetShowId));
      }
    }

    [Association(Name = "Show_Set", OtherKey = "ShowId", Storage = "_Sets", ThisKey = "ShowId")]
    public EntitySet<Set> Sets
    {
      get => this._Sets;
      set => this._Sets.Assign((IEnumerable<Set>) value);
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      if (this.PropertyChanging == null)
        return;
      this.PropertyChanging((object) this, Show.emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanged(string propertyName)
    {
      if (this.PropertyChanged == null)
        return;
      this.PropertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }

    private void attach_Sets(Set entity)
    {
      this.SendPropertyChanging();
      entity.Show = this;
    }

    private void detach_Sets(Set entity)
    {
      this.SendPropertyChanging();
      entity.Show = (Show) null;
    }

    public string GetShowName() => string.Format("{0} - {1} - {2}, {3}", (object) this.ShowDate.Value.ToString("MM/dd/yyyy"), (object) this.VenueName, (object) this.City, (object) this.State);
  }
}
