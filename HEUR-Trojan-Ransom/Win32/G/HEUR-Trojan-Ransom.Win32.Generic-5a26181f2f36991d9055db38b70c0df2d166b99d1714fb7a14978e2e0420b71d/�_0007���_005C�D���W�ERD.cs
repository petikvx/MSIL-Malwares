// Decompiled with JetBrains decompiler
// Type: ����\�D���W�ERD
// Assembly: mtrl, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79CC5886-3FF3-4BA2-A3E6-9E50089A921D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-5a26181f2f36991d9055db38b70c0df2d166b99d1714fb7a14978e2e0420b71d.exe

using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

internal static class \uFFFD\u0007\uFFFD\uFFFD\uFFFD\u005C\uFFFDD\uFFFD\uFFFD\uFFFDW\uFFFDERD
{
  static object \u0038\uFFFD\u001F\u0017\uFFFD\uFFFDZ9\u0023\uFFFDF9\uFFFDt\u0029\uFFFD(
    uint a,
    uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    int num2 = ~(-1 - (2 - ~6)) - 4;
    Stream 밬뻫曆轠閼೮;
    uint num3;
    object obj;
    while (true)
    {
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      uint num8;
      int num9;
      do
      {
        int num10;
        do
        {
          int num11;
          do
          {
            switch (num2)
            {
              case 1:
                num4 -= (uint) (~((int) num5 ^ (int) num6) + 1117166821);
                num2 = -~(12 - ~(2 - 2));
                continue;
              case 2:
                if (num7 < 16U)
                {
                  num5 |= (uint) ((int) ((num4 & 65280U) >> 8) & (int) ((num4 & 16711680U) >> 16) ^ ~(int) num4 & (int) byte.MaxValue);
                  num6 ^= (uint) ((int) num4 * (int) num8 + 1) % 16U;
                  num2 = ~-21 - 2;
                  continue;
                }
                goto label_16;
              case 3:
                num7 = (num4 & (uint) byte.MaxValue) % 64U;
                num2 = -3 - ~30 - 7;
                continue;
              case 4:
                num4 ^= num5 % num6 | 1117166821U;
                num2 = ~~~-15;
                continue;
              case 5:
                num4 = 2131828301U ^ num1;
                num5 = 230544171U;
                num2 = 30 + 2 - (4 + 4) - 4;
                continue;
              case 6:
                num5 ^= (uint) (((int) num4 & 16711935) << 8 ^ ((int) ((num4 & 16776960U) >> 8) | ~(int) num4 & (int) ushort.MaxValue));
                num6 += num4 * num8 % 32U;
                num4 |= (uint) ((int) num5 + ~(int) num6 & 1117166821);
                goto label_25;
              case 7:
                goto label_12;
              case 8:
                goto label_14;
              case 9:
              case 14:
                goto label_25;
              case 10:
                goto label_18;
              case 11:
                goto label_20;
              case 12:
                if (num7 >= 32U)
                  break;
                goto label_22;
              case 13:
                goto label_23;
              case 15:
                goto label_26;
              case 16:
                goto label_27;
              case 17:
                goto label_29;
              case 18:
                goto label_30;
              case 19:
                goto label_31;
              case 20:
                goto label_32;
              case 21:
                if (num7 < 0U)
                  goto label_16;
                else
                  goto label_34;
              default:
                Monitor.Enter((object) (밬뻫曆轠閼೮ = \u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮));
                goto label_35;
            }
label_10:
            num11 = (int) num7;
            num2 = ~-27 - (9 + 7) - 2;
            continue;
label_16:
            if (num7 < 16U)
              goto label_10;
            else
              goto label_17;
          }
          while ((uint) num11 < 32U);
          num2 = -(4 - ~-21);
          continue;
label_12:
          if (num7 < 64U)
          {
            num5 ^= (uint) (((int) ((num4 & 16711680U) >> 16) | ~((int) num4 & (int) byte.MaxValue)) * (~(int) num4 & 16711680));
            num2 = -~(10 - ~(5 - 2));
            continue;
          }
          goto label_25;
label_14:
          num10 = (int) num7;
          num2 = --(-(5 + 8) - -27);
          continue;
label_27:
          if (num7 >= 48U)
            goto label_14;
          else
            goto label_28;
        }
        while ((uint) num10 < 48U);
        num2 = 3 + (8 + 5 - (7 + 7)) - ~6 - 2;
        continue;
label_17:
        num2 = 2 - -10;
        continue;
label_18:
        num9 = (int) num8;
        num2 = -(~3 + ~6);
      }
      while ((uint) num9 <= 64U);
      num2 = ----13;
      continue;
label_20:
      num4 = (uint) (((int) num4 & 16777215) << 8) | (num4 & 4278190080U) >> 24;
      num2 = ~-(-16 - (-4 - (8 + 8)));
      continue;
label_22:
      num2 = ~-(14 + (-8 + (9 - 8)));
      continue;
label_23:
      num3 = num4 ^ b;
      if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num3, out obj))
      {
        num2 = 4 - --4;
        continue;
      }
      goto label_61;
label_25:
      ++num8;
      num2 = ----10;
      continue;
label_26:
      num6 += (num4 ^ num8 - 1U) % num7;
      num2 = ~-7 - 5;
      continue;
label_28:
      num5 += (uint) (((int) num4 & (int) byte.MaxValue | (int) ((num4 & 16711680U) >> 16)) + (~(int) num4 & (int) byte.MaxValue));
      num2 = --27 - 8;
      continue;
label_29:
      num2 = ~(~1 - (7 + 2));
      continue;
label_30:
      num4 += (uint) (((int) num5 | (int) num6) ^ 1117166821);
      num2 = ~(-16 - ~5);
      continue;
label_31:
      num6 -= (uint) ~((int) num4 + (int) num7) % 48U;
      num2 = ~(2 - 7) - 0;
      continue;
label_32:
      num6 = 664821653U;
      num8 = 1U;
      num2 = ~(1 - (9 + 8 - ~5)) - 4;
      continue;
label_34:
      num2 = -~8 - 7;
    }
label_35:
    byte num12;
    byte[] bytes;
    try
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
      binaryReader.BaseStream.Seek((long) num3, SeekOrigin.Begin);
      int num13 = ~(~4 - ~3);
      while (true)
      {
        switch (num13)
        {
          case 1:
            goto label_39;
          default:
            num12 = binaryReader.ReadByte();
            bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
            num13 = -(18 - -(8 - 9) - (9 + 9));
            continue;
        }
      }
    }
    finally
    {
      Monitor.Exit((object) 밬뻫曆轠閼೮);
    }
label_39:
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876225 ^ currentMethod.MetadataToken);
    int num14 = ~(4 - 5 + -2 - 10 - -3);
    while (true)
    {
      ushort num15;
      ushort num16;
      uint num17;
      ushort num18;
      int index;
      ushort num19;
      switch (num14)
      {
        case 1:
        case 4:
label_42:
          \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num3] = obj;
          num14 = -(-8 - (-6 - ~(7 + 5)));
          continue;
        case 2:
label_43:
          if (num12 == (byte) 50)
          {
            num14 = ~(~12 + 2);
            continue;
          }
          if (num12 == (byte) 27)
          {
            obj = (object) Encoding.UTF8.GetString(bytes);
            num14 = ~~(9 - -~7);
            continue;
          }
          goto case 1;
        case 3:
          num18 = (ushort) ((num17 * (uint) num18 + (uint) num15) % 65536U);
          num14 = 9 - (-4 - (7 - 8));
          continue;
        case 5:
          index = 0;
          break;
        case 6:
          num16 = (ushort) ((num17 * (uint) num16 + (uint) num19) % 65536U);
          num14 = -~(~(3 - 5) - -1);
          continue;
        case 7:
          num15 = (ushort) (num17 & (uint) ushort.MaxValue);
          num14 = ~--1 + 2;
          continue;
        case 8:
          num18 = num19;
          num14 = ~(~2 - 3);
          continue;
        case 9:
          num17 = (uint) (((int) num3 + (int) num12) * 1494844765);
          num14 = ~(-9 - 3);
          continue;
        case 10:
          obj = (object) BitConverter.ToInt64(bytes, 0);
          num14 = -(~~2 - 13) - 7;
          continue;
        case 11:
          num19 = (ushort) (num17 >> 16);
          num14 = --12 - (6 - 9) - 8;
          continue;
        case 12:
          ++index;
          break;
        case 13:
          num14 = 4 - 6 + (7 - 4);
          continue;
        case 14:
label_60:
          bytes[index] ^= (byte) ((num17 * (uint) num16 + (uint) num18) % 256U ^ (uint) numArray[index % 8]);
          num14 = 6 - (~4 - (8 - (8 + 8 - (9 - 6))));
          continue;
        case 15:
          goto label_61;
        case 16:
          obj = (object) BitConverter.ToDouble(bytes, 0);
          goto case 1;
        default:
          num16 = num15;
          num14 = 9 + 4 - (19 - 5) + 9;
          continue;
      }
      if (index >= bytes.Length)
      {
        if (num12 == (byte) 152)
          num14 = -~13 + 2;
        else if (num12 == (byte) 117)
        {
          obj = (object) BitConverter.ToSingle(bytes, 0);
          goto label_42;
        }
        else if (num12 == (byte) 11)
        {
          obj = (object) BitConverter.ToInt32(bytes, 0);
          num14 = ~(-18 - -~4) - 9;
        }
        else
          goto label_43;
      }
      else
        goto label_60;
    }
label_61:
    return obj;
  }

  static object \uFFFD\u0016\uFFFD\uFFFD\u0027I\u0027\uFFFD\uFFFD\u0019d\u000BW\u0012\u0012c(
    uint a,
    uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    int num2 = 9 - ~~-4;
    uint num3;
    object obj;
    while (true)
    {
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      uint num8;
      int num9;
      do
      {
        int num10;
        do
        {
          switch (num2)
          {
            case 1:
              num10 = (int) num4;
              num2 = ~(-11 - ~7);
              continue;
            case 2:
              goto label_5;
            case 3:
              goto label_7;
            case 4:
              goto label_9;
            case 5:
              goto label_12;
            case 6:
              goto label_13;
            case 7:
              goto label_15;
            case 8:
              goto label_17;
            case 9:
              goto label_18;
            case 10:
              goto label_22;
            case 11:
              goto label_23;
            case 12:
              goto label_25;
            case 13:
              goto label_26;
            case 14:
              goto label_28;
            case 15:
              goto label_29;
            case 16:
              goto label_31;
            default:
              num2 = -(-10 - (3 - 2) + (7 - 5));
              continue;
          }
        }
        while ((uint) num10 < 0U);
        num2 = -(3 + 6 - --24);
        continue;
label_5:
        if (num4 >= 16U)
        {
          num2 = --12 - 5;
          continue;
        }
        goto label_10;
label_7:
        int num11 = (int) num4;
        num2 = ~~13 - 4;
        if ((uint) num11 >= 48U)
        {
          num2 = 7 + ~~4;
          continue;
        }
        continue;
label_9:
        num5 += num6 * num7 % 32U;
        num6 |= (uint) ((int) num8 + ~(int) num5 & 1637235696);
        goto label_18;
label_10:
        num9 = (int) num4;
        num2 = --~-4;
        continue;
label_13:
        if (num4 >= 48U)
          goto label_7;
        else
          goto label_14;
label_15:
        if (num4 >= 32U)
          goto label_10;
        else
          goto label_16;
label_29:
        if (num4 >= 16U)
          goto label_5;
        else
          goto label_30;
      }
      while ((uint) num9 < 32U);
      num2 = 19 - ~~7 + 3 - 9;
      continue;
label_12:
      num2 = -(2 - 4 - (-(6 - 5) - -8));
      continue;
label_14:
      num8 += (uint) (((int) num6 & (int) byte.MaxValue | (int) ((num6 & 16711680U) >> 16)) + (~(int) num6 & (int) byte.MaxValue));
      num2 = 6 - (~8 - (19 - (7 + 7 - ~7)));
      continue;
label_16:
      num2 = -~(12 - -(2 - 7));
      continue;
label_17:
      num8 ^= (uint) (((int) num6 & 16711935) << 8 ^ ((int) ((num6 & 16776960U) >> 8) | ~(int) num6 & (int) ushort.MaxValue));
      num2 = --11 - 7;
      continue;
label_18:
      ++num7;
label_19:
      if (num7 > 64U)
      {
        num3 = num6 ^ b;
        if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num3, out obj))
        {
          num2 = 5 - 2 - 6 - -1 + (6 - 3) + 9;
          continue;
        }
        goto label_50;
      }
      else
      {
        num6 = (uint) (((int) num6 & 16777215) << 8) | (num6 & 4278190080U) >> 24;
        num4 = (num6 & (uint) byte.MaxValue) % 64U;
        num2 = --~-2;
        continue;
      }
label_23:
      if (num4 < 64U)
      {
        num8 ^= (uint) (((int) ((num6 & 16711680U) >> 16) | ~((int) num6 & (int) byte.MaxValue)) * (~(int) num6 & 16711680));
        num5 += (num6 ^ num7 - 1U) % num4;
        num6 -= (uint) (~((int) num8 ^ (int) num5) + 1637235696);
        num2 = ~(-9 - 5 - ~3);
        continue;
      }
      goto label_18;
label_25:
      num5 -= (uint) ~((int) num6 + (int) num4) % 48U;
      num2 = --21 + -7;
      continue;
label_26:
      num6 = 410452540U ^ num1;
      num8 = 1242897238U;
      num5 = 1751089861U;
      num7 = 1U;
      goto label_19;
label_28:
      num6 ^= num8 % num5 | 1637235696U;
      num2 = ~(6 - 2 - --10);
      continue;
label_30:
      num8 |= (uint) ((int) ((num6 & 65280U) >> 8) & (int) ((num6 & 16711680U) >> 16) ^ ~(int) num6 & (int) byte.MaxValue);
      num2 = --~-17;
      continue;
label_31:
      num5 ^= (uint) ((int) num6 * (int) num7 + 1) % 16U;
      num6 += (uint) (((int) num8 | (int) num5) ^ 1637235696);
      num2 = 7 - (-3 - -10);
    }
label_22:
    byte num12;
    byte[] bytes;
    lock (\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮)
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
      switch (~~-0)
      {
        default:
          binaryReader.BaseStream.Seek((long) num3, SeekOrigin.Begin);
          num12 = binaryReader.ReadByte();
          bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
          break;
      }
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876224 ^ currentMethod.MetadataToken);
    int num13 = --12 - 3;
    while (true)
    {
      uint num14;
      ushort num15;
      ushort num16;
      ushort num17;
      int num18;
      do
      {
        switch (num13)
        {
          case 1:
            ushort num19 = num17;
            for (int index = 0; index < bytes.Length; ++index)
            {
              bytes[index] ^= (byte) ((num14 * (uint) num16 + (uint) num19) % 256U ^ (uint) numArray[index % 8]);
              num16 = (ushort) ((num14 * (uint) num16 + (uint) num17) % 65536U);
              num19 = (ushort) ((num14 * (uint) num19 + (uint) num15) % 65536U);
            }
            num13 = -~13 - 4;
            continue;
          case 2:
            obj = (object) BitConverter.ToSingle(bytes, 0);
            goto label_47;
          case 3:
            num18 = (int) num12;
            num13 = --6 - 2;
            continue;
          case 4:
            goto label_47;
          case 5:
            if (num12 != (byte) 50)
              goto case 3;
            else
              goto label_49;
          case 6:
            goto label_50;
          case 7:
            goto label_51;
          case 8:
            goto label_52;
          case 9:
            goto label_53;
          case 10:
            switch (num12)
            {
              case 117:
                goto label_56;
              case 152:
                goto label_55;
              default:
                int num20 = (int) num12;
                num13 = ~1 + 7;
                if (num20 == 11)
                {
                  num13 = ~(1 - ~~9 - (8 - 7));
                  continue;
                }
                continue;
            }
          default:
            num15 = (ushort) (num14 & (uint) ushort.MaxValue);
            num16 = num15;
            num13 = -~(-~8 - 9);
            continue;
        }
      }
      while (num18 != 27);
      num13 = ~-4 - -4;
      continue;
label_47:
      \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num3] = obj;
      num13 = ~~(-5 - -(8 + 3));
      continue;
label_49:
      obj = (object) BitConverter.ToInt64(bytes, 0);
      num13 = --(5 - (~2 + (6 - 2)));
      continue;
label_51:
      obj = (object) Encoding.UTF8.GetString(bytes);
      num13 = -2 - -8 - 2;
      continue;
label_52:
      obj = (object) BitConverter.ToInt32(bytes, 0);
      num13 = -(7 - --5 + ~5);
      continue;
label_53:
      num14 = (uint) (((int) num3 + (int) num12) * 1494844765);
      num17 = (ushort) (num14 >> 16);
      num13 = 5 - (-(5 - 7) - -5 - 2);
      continue;
label_55:
      obj = (object) BitConverter.ToDouble(bytes, 0);
      goto label_47;
label_56:
      num13 = 6 - ~-5;
    }
label_50:
    return obj;
  }
}
