// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Protected, Version=6.2.8400.0, Culture=neutral, PublicKeyToken=null
// MVID: 52CBE997-50C3-42B2-A704-C908D57869A5
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-2a8dca5794c095ea67845468a3fd0a8e91a24bf3f0bb5e0ec6c16a6579cc4e90.exe

using System;
using System.Collections;
using System.IO;
using System.Reflection;

internal sealed class \uE017 : IDisposable
{
  private static \uE017.\uE000 \uE000;
  private \uE01C \uE001;
  private Hashtable \uE002;

  static \uE017()
  {
    \uE023.\uE000();
    \uE017.\uE000 = new \uE017.\uE000(\uE017.\uE000);
  }

  public \uE017()
  {
    this.\uE001 = \uE017.\uE000();
    if ((this.\uE001 == null ? 1 : 0) == 0)
      GC.SuppressFinalize((object) this.\uE001);
    this.\uE002 = new Hashtable();
  }

  public static string \uE000()
  {
    char[] charArray = "ÔíÝË".ToCharArray();
    int length = charArray.Length;
    while (--length >= 0)
      charArray[length] = (char) ((uint) charArray[length] ^ 158U);
    return new string(charArray);
  }

  public static Stream \uE000 => (Stream) null;

  ~\uE017() => this.\uE000(false);

  private void \uE000(bool _param1)
  {
    try
    {
      if ((!_param1 ? 1 : 0) != 0)
        return;
      if ((this.\uE001 == null ? 1 : 0) == 0)
        this.\uE001.Dispose();
      IEnumerator enumerator = this.\uE002.Values.GetEnumerator();
      try
      {
        while ((!enumerator.MoveNext() ? 0 : 1) != 0)
          ((\uE01C) enumerator.Current).Dispose();
      }
      finally
      {
        if ((!(enumerator is IDisposable disposable) ? 1 : 0) == 0)
          disposable.Dispose();
      }
    }
    finally
    {
      this.\uE002 = (Hashtable) null;
    }
  }

  public void Dispose()
  {
    this.\uE000(true);
    GC.SuppressFinalize((object) this);
  }

  public \uE018 \uE000(int _param1)
  {
    int num1 = _param1 & 16777215;
label_2:
    int num2 = \uE026.\uE000(38);
    int key;
    \uE01C obj;
    while (true)
    {
      switch ((num2 ^ 44) + 47)
      {
        case 0:
          obj = (\uE01C) this.\uE002[(object) key];
          num2 = -1;
          continue;
        case 1:
          key = _param1 >> 24;
          num2 = \uE026.\uE000(28);
          continue;
        case 2:
          if (obj != null)
          {
            num2 = -7;
            continue;
          }
          goto label_10;
        case 3:
          if (key > 0)
          {
            num2 = -3;
            continue;
          }
          goto label_22;
        case 4:
          goto label_9;
        default:
          goto label_2;
      }
    }
label_9:
    int num3 = 1;
    goto label_11;
label_10:
    num3 = 0;
label_11:
    if (num3 == 0)
    {
      Stream stream = \uE01D.\uE004(this.\uE001.\uE013(key));
      if ((stream == null ? 0 : 1) == 0)
        throw new InvalidOperationException("Could not load method.");
      GC.SuppressFinalize((object) stream);
label_16:
      int num4 = \uE000.\uE000(52);
      while (true)
      {
        switch ((num4 ^ 41) + 40)
        {
          case 0:
            GC.SuppressFinalize((object) obj);
            num4 = \uE026.\uE000(37);
            continue;
          case 1:
            stream = (Stream) \uE031.\uE000(stream);
            num4 = -13;
            continue;
          case 2:
            obj = new \uE01C(stream);
            num4 = -15;
            continue;
          case 3:
            goto label_20;
          default:
            goto label_16;
        }
      }
label_20:
      this.\uE002[(object) key] = (object) obj;
    }
    return obj.\uE000(num1);
label_22:
    return this.\uE001.\uE000(num1);
  }

  private static \uE01C \uE000()
  {
    Assembly executingAssembly = Assembly.GetExecutingAssembly();
label_2:
    int num1 = \uE000.\uE000(48);
    string name;
    Stream stream;
    while (true)
    {
      switch ((num1 ^ 49) + 55)
      {
        case 0:
          if (string.IsNullOrEmpty(name))
          {
            num1 = -3;
            continue;
          }
          goto label_8;
        case 1:
          stream = \uE017.\uE000;
          num1 = \uE000.\uE000(50);
          continue;
        case 2:
          name = \uE017.\uE000();
          num1 = -8;
          continue;
        case 3:
          goto label_7;
        default:
          goto label_2;
      }
    }
label_7:
    int num2 = 1;
    goto label_9;
label_8:
    num2 = 0;
label_9:
    if (num2 == 0)
      stream = executingAssembly.GetManifestResourceStream(name);
    if ((stream == null ? 1 : 0) == 0)
      stream = (Stream) \uE031.\uE000(stream);
    if ((stream == null ? 0 : 1) == 0)
      return (\uE01C) null;
    GC.SuppressFinalize((object) stream);
    return new \uE01C(stream);
  }

  private delegate string \uE000();
}
