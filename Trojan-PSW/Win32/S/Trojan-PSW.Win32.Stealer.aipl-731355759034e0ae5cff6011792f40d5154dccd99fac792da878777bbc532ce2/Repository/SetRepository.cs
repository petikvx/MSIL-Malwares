// Decompiled with JetBrains decompiler
// Type: Repository.SetRepository
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using Core.Exceptions;
using Core.Helpers;
using Core.Infrastructure.Logging;
using DomainObjects;
using System;
using System.Linq;
using System.Linq.Expressions;

namespace Repository
{
  public class SetRepository : BaseRepository<ISet, Set>, ISetRepository
  {
    private LogWriter writer = new LogWriter();

    public SetRepository(IDatabase database)
      : base(database)
    {
    }

    public SetRepository(IDatabaseFactory factory)
      : base(factory)
    {
    }

    private IQueryable<ISet> GetAll() => this.Database.SetDataSource.Where<ISet>((Expression<Func<ISet, bool>>) (x => x.Deleted == false));

    public IQueryable<ISet> FindAll() => (IQueryable<ISet>) this.GetAll().OrderBy<ISet, Guid>((Expression<Func<ISet, Guid>>) (s => s.SetId));

    public ISet FindBySetId(Guid setId) => this.GetAll().SingleOrDefault<ISet>((Expression<Func<ISet, bool>>) (set => set.SetId == setId));

    public IQueryable<ISet> FindByShowId(Guid showId) => (IQueryable<ISet>) this.GetAll().Where<ISet>((Expression<Func<ISet, bool>>) (set => set.ShowId == (Guid?) showId)).OrderBy<ISet, short?>((Expression<Func<ISet, short?>>) (x => x.SetNumber));

    public override void Add(ISet entity)
    {
      Checks.Argument.IsNotNull((object) entity, nameof (entity));
      entity.CreatedDate = DateTime.Now;
      if (this.GetAll().Any<ISet>((Expression<Func<ISet, bool>>) (set => set.SetId == entity.SetId)))
      {
        this.writer.WriteLine("A Set with an id={0}".FormatWith((object) entity.SetId));
        throw new AlreadyExistsException("A Set with an id={0}".FormatWith((object) entity.SetId));
      }
      base.Add(entity);
    }

    public override void Remove(ISet entity)
    {
      Checks.Argument.IsNotNull((object) entity, nameof (entity));
      base.Remove(entity);
    }
  }
}
