// Decompiled with JetBrains decompiler
// Type: MaterialSurface.Snackbar
// Assembly: PropagationFl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45597167-9313-4C0B-891A-DAD42EC632D8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-00a292af39cd99fb0f81e6e8f13150c25149dda2c988f8a15f983523dc2bf554.exe

using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MaterialSurface
{
  public class Snackbar : Control, IMaterialControl
  {
    private const int LEFT_PADDING = 12;
    private Size DEFAULT_BUTTON_SIZE = new Size(75, 35);
    private readonly Timer animationDirector = new Timer()
    {
      Interval = 1
    };
    private readonly StringFormat textAlignment = new StringFormat()
    {
      Alignment = StringAlignment.Near,
      LineAlignment = StringAlignment.Center
    };
    public static Font MessageFont = new Font("Segoe UI", 11f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
    private Rectangle messageArea;
    private float timeAlive;
    private int targetHeight;
    private int incSize;
    private Form mainParent;
    public bool isShowing = false;
    private static Snackbar _this;
    private static Color primaryColor = Color.BlueViolet;
    private static bool darkTheme = false;
    private string strMessage = "This is a message.";
    private TextButton mainButton;

    public MouseState MouseState { get; set; }

    public event EventHandler OnButtonClick;

    public static Color PrimaryColor
    {
      get => Snackbar.primaryColor;
      set => Snackbar.primaryColor = value;
    }

    public static bool DarkTheme
    {
      get => Snackbar.darkTheme;
      set => Snackbar.darkTheme = value;
    }

    public Snackbar()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.DoubleBuffered = true;
      this.Size = new Size(400, 0);
      this.BackColor = Snackbar.darkTheme ? Color.WhiteSmoke : ColorConstant.DarkThemeBackgroundColor;
      this.animationDirector.Tick += new EventHandler(this.OnAnimate);
    }

    private void OnAnimate(object sender, EventArgs e)
    {
      if (this.isShowing)
      {
        if (this.Height < this.targetHeight)
        {
          this.Height += this.incSize;
          this.Location = new Point(this.Location.X, this.Location.Y - this.incSize);
        }
        else
        {
          this.animationDirector.Stop();
          this.Height = this.targetHeight;
          this.Location = new Point(this.Location.X, this.mainParent.ClientSize.Height - this.Height);
          if (this.mainButton != null)
          {
            this.mainButton.Location = new Point(this.Width - 12 - this.mainButton.Width, this.Height / 2 - this.mainButton.Height / 2 + 1);
            this.Controls.Add((Control) this.mainButton);
          }
        }
      }
      else if (this.Location.Y < this.mainParent.ClientSize.Height)
      {
        Point location = this.Location;
        int x = location.X;
        location = this.Location;
        int y = location.Y + this.incSize;
        this.Location = new Point(x, y);
      }
      else
      {
        this.animationDirector.Stop();
        this.mainParent.Controls.Remove((Control) this);
      }
      this.Invalidate();
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      Graphics graphics = e.Graphics;
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      if (this.Parent is MaterialCard)
        graphics.Clear(((MaterialCard) this.Parent).CardColor);
      else
        graphics.Clear(this.mainParent.BackColor);
      GraphicsPath roundedRectangle = GraphicHelper.GetRoundedRectangle(0.0f, 0.0f, (float) this.Width, (float) this.Height, 5);
      graphics.FillPath((Brush) new SolidBrush(this.BackColor), roundedRectangle);
      graphics.DrawString(this.strMessage, Snackbar.MessageFont, Snackbar.darkTheme ? Brushes.DimGray : Brushes.WhiteSmoke, (RectangleF) this.messageArea, this.textAlignment);
    }

    public void Make(Form parent, string message, string buttonText = "OK", float timeShow = 4f, int offSet = 0)
    {
      if ((double) timeShow < 1.0)
        timeShow = 1f;
      SizeF messageSize = this.CreateGraphics().MeasureString(message, Snackbar.MessageFont);
      SizeF sizeF1 = new SizeF(12f, 0.0f);
      if (!string.IsNullOrEmpty(buttonText))
      {
        SizeF sizeF2 = this.CreateGraphics().MeasureString(buttonText, Snackbar.MessageFont);
        this.mainButton = new TextButton();
        this.mainButton.Text = buttonText;
        this.mainButton.PrimaryColor = Snackbar.primaryColor;
        this.mainButton.Width = (int) sizeF2.Width + 24;
        this.mainButton.Height = (int) sizeF2.Height + 12;
        this.mainButton.Click += new EventHandler(this.OnClick);
      }
      this.mainParent = parent;
      this.targetHeight = (int) messageSize.Height + 12 + 12;
      this.Width = (int) messageSize.Width + 48 + (this.mainButton == null ? 0 : this.mainButton.Width);
      if (this.Width < this.mainParent.Width / 4)
        this.Width = this.mainParent.Width / 4;
      if (this.Width > this.mainParent.Width)
      {
        this.Width = this.mainParent.Width - 48;
        int num = this.Width - (this.mainButton == null ? 0 : this.mainButton.Width);
        this.targetHeight += (int) messageSize.Width / num * (int) messageSize.Height;
      }
      this.incSize = this.targetHeight / 14;
      this.mainParent.Resize += (EventHandler) ((s, e) => this.ReCalculate(this.mainParent, messageSize));
      this.strMessage = message;
      this.timeAlive = timeShow * 1000f;
      this.isShowing = true;
      this.Height = 0;
      this.Location = new Point(this.mainParent.ClientSize.Width / 2 - this.Width / 2 + offSet, this.mainParent.ClientSize.Height);
      this.messageArea = new Rectangle(12, 0, this.Width - 24 - (this.mainButton == null ? 0 : this.mainButton.Width), this.targetHeight);
      this.mainParent.Controls.Add((Control) this);
      this.BringToFront();
      this.animationDirector.Start();
    }

    private void ReCalculate(Form mainParent, SizeF messageSize)
    {
      this.targetHeight = (int) messageSize.Height + 12 + 12;
      if (this.Width > mainParent.Width)
      {
        this.Width = mainParent.Width - 48;
        int num = this.Width - (this.mainButton == null ? 0 : this.mainButton.Width);
        this.Height = this.targetHeight + (int) messageSize.Width / num * (int) messageSize.Height;
      }
      else if (this.Width < mainParent.Width + 48 && this.Height > (int) messageSize.Height + 12 + 12)
      {
        this.Width = (int) messageSize.Width + 48 + (this.mainButton == null ? 0 : this.mainButton.Width);
        if (this.Width < mainParent.Width / 4)
          this.Width = mainParent.Width / 4;
        if (this.Width > mainParent.Width)
        {
          this.Width = mainParent.Width - 48;
          int num = this.Width - (this.mainButton == null ? 0 : this.mainButton.Width);
          this.Height = this.targetHeight + (int) messageSize.Width / num * (int) messageSize.Height;
        }
        else
          this.Height = this.targetHeight;
      }
      if (this.mainButton != null)
        this.mainButton.Location = new Point(this.Width - 12 - this.mainButton.Width, this.Height / 2 - this.mainButton.Height / 2);
      this.Location = new Point(mainParent.ClientSize.Width / 2 - this.Width / 2, mainParent.ClientSize.Height - this.Height);
      this.messageArea = new Rectangle(12, 0, this.Width - 24 - (this.mainButton == null ? 0 : this.mainButton.Width), this.Height);
    }

    public static Snackbar MakeSnackbar(
      Form mainParent,
      string message,
      string buttonText = "",
      float timeShow = 4f,
      int offSet = 0)
    {
      Snackbar._this = new Snackbar();
      Snackbar._this.Make(mainParent, message, buttonText, timeShow, offSet);
      return Snackbar._this;
    }

    public void Close()
    {
      this.isShowing = false;
      this.animationDirector.Start();
    }

    private void OnClick(object sender, EventArgs e)
    {
      EventHandler onButtonClick = this.OnButtonClick;
      if (onButtonClick != null)
        onButtonClick((object) this, EventArgs.Empty);
      this.Close();
    }

    protected override void OnCreateControl()
    {
      base.OnCreateControl();
      if (!this.DesignMode)
        return;
      this.mainParent.Controls.Remove((Control) this);
    }

    protected override CreateParams CreateParams
    {
      get
      {
        CreateParams createParams = base.CreateParams;
        createParams.ClassStyle |= 131072;
        return createParams;
      }
    }
  }
}
