// Decompiled with JetBrains decompiler
// Type: ib.Rbu
// Assembly: ContingentPropert, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 10450B75-DDB2-42D8-896D-5D92C0FA5DAE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9a3872603bab9d16727daf3e24705ff94100d4bf2838679b5e9288aa02bd32a.exe

using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;

namespace ib
{
  public class Rbu
  {
    private List<string> MAl;
    private static Rbu Aj8;

    public Rbu(string _param1)
    {
      Jnb.vbPcO4();
      this.MAl = new List<string>();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.BA9(_param1);
    }

    [CompilerGenerated]
    [SpecialName]
    public string BAI() => this.lAo;

    [CompilerGenerated]
    [SpecialName]
    public void BA9(string _param1) => this.lAo = _param1;

    [SpecialName]
    public List<string> QAV() => this.MAl;

    public void LAX(string _param1)
    {
      int num1 = 1;
label_1:
      int num2 = num1;
      while (true)
      {
        int index;
        string[] strArray1;
        string[] strArray2;
        switch (num2)
        {
          case 1:
            strArray1 = _param1.Split('\n', '\r');
            if (Rbu.OjT() == null)
            {
              num2 = 0;
              continue;
            }
            goto label_1;
          case 2:
label_4:
            ++index;
            break;
          default:
            strArray2 = strArray1;
            index = 0;
            break;
        }
        if (index < strArray2.Length)
        {
          string str = strArray2[index];
          if (str.Trim() != string.Empty)
          {
            this.MAl.Add(str);
            if (Rbu.njs())
              num2 = 2;
            else
              goto label_1;
          }
          else
            goto label_4;
        }
        else
          break;
      }
    }

    public override string ToString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      string str1 = this.BAI().StartsWith("override") ? "" : "static ";
      stringBuilder.AppendLine("\t\tpublic " + str1 + this.BAI());
      stringBuilder.AppendLine("\t\t{");
      foreach (string str2 in this.MAl)
        stringBuilder.AppendLine("\t\t\t" + str2);
      stringBuilder.AppendLine("\t\t}");
      int num1 = 1;
      if (Rbu.njs())
        goto label_2;
label_1:
      int num2;
      num1 = num2;
label_2:
      string str3;
      while (true)
      {
        switch (num1)
        {
          case 1:
            str3 = stringBuilder.ToString();
            if (Rbu.OjT() == null)
            {
              num1 = 0;
              continue;
            }
            goto label_1;
          default:
            goto label_7;
        }
      }
label_7:
      return str3;
    }

    internal static bool njs() => Rbu.Aj8 == null;

    internal static Rbu OjT() => Rbu.Aj8;
  }
}
