// Decompiled with JetBrains decompiler
// Type: StaggeringIsometricMap.Component
// Assembly: MethodRental, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AE514D88-1D27-426C-B393-9775A20FC38F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Heye.gen-3ce20a7d233efc8e8970d6d9d7eeb810bae52c5f42d252a935c32299fe708041.exe

using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace StaggeringIsometricMap
{
  [ParseChildren]
  public class Component : WebControl
  {
    public Component()
    {
      this.Name = (string) null;
      this.VueLight = false;
      this.RenderTemplate = false;
    }

    public string Name { get; set; }

    public bool VueLight { get; set; }

    public bool RenderTemplate { get; set; }

    public string File { get; set; }

    public string Props { get; set; }

    protected override void Render(HtmlTextWriter writer)
    {
      if (string.IsNullOrEmpty(this.File))
      {
        if (string.IsNullOrEmpty(this.Name))
          throw new Exception("Missing 'Name' property");
        StringWriter writer1 = new StringWriter();
        this.RenderChildren(new HtmlTextWriter((TextWriter) writer1));
        string vueTemplate = this.GetVueTemplate(writer1.ToString().Trim());
        string str1 = "{";
        if (!string.IsNullOrEmpty(this.Props))
        {
          string[] strArray = this.Props.Split(',');
          string str2 = str1 + " props: [";
          int num = checked (strArray.Length - 1);
          int index = 0;
          while (index <= num)
          {
            if (index > 0)
              str2 += ",";
            str2 = str2 + "'" + strArray[index] + "'";
            checked { ++index; }
          }
          str1 = str2 + "]";
        }
        string scrpt = str1 + "}";
        if (this.VueLight)
          this.RenderVueLight(vueTemplate, writer);
        else
          this.RenderVueJS(vueTemplate, scrpt, writer);
      }
      else
      {
        if (string.IsNullOrEmpty(this.Name))
        {
          this.Name = this.File.Substring(checked (this.File.LastIndexOf("/") + 1));
          this.Name = this.Name.Substring(0, this.Name.IndexOf(".")).ToLower();
        }
        modHelpers.ParseVueFileResult vueFile = modHelpers.ParseVueFile(this.File);
        if (this.VueLight)
          this.RenderVueLight(vueFile.Template, writer);
        else
          this.RenderVueJS(vueFile.Template, vueFile.Script, writer);
      }
    }

    private void RenderVueJS(string x, string scrpt, HtmlTextWriter writer)
    {
      string str;
      if (this.RenderTemplate)
      {
        writer.WriteLine("<script type=\"x-template\" id=\"" + this.Name + "_template\">");
        writer.Write(x);
        writer.WriteLine("</script>");
        str = "'#" + this.Name + "_template'";
      }
      else
        str = modHelpers.JSStringEncode(x);
      writer.WriteLine("<script>");
      writer.WriteLine("Vue.component('" + this.Name + "', {\r\n  template: " + str + ",\r\n" + scrpt.Substring(1).Trim() + ");");
      writer.WriteLine("</script>");
    }

    private void RenderVueLight(string x, HtmlTextWriter writer)
    {
      if (this.RenderTemplate)
      {
        writer.WriteLine("<script type=\"x-template\">");
        writer.Write(x);
        writer.WriteLine("</script>");
      }
      CompilerOptions co = new CompilerOptions();
      RuntimeHelpers.GetObjectValue(modHelpers.GetContextComponentList());
      writer.WriteLine("<script>");
      writer.WriteLine("var VLC_" + this.Name + "=" + Compiler.Compile(x, co) + ";");
      writer.WriteLine("</script>");
    }

    protected virtual string GetVueTemplate(string content) => content;

    public override void RenderBeginTag(HtmlTextWriter writer)
    {
    }

    public override void RenderEndTag(HtmlTextWriter writer)
    {
    }
  }
}
