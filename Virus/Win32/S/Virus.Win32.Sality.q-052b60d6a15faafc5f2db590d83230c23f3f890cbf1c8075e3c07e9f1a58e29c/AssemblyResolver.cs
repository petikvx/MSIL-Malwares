// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.RegAsm.AssemblyResolver
// Assembly: RegAsm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 097EDB82-DB75-4D42-81B4-3BEFAFAFEBC0
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Sality.q-052b60d6a15faafc5f2db590d83230c23f3f890cbf1c8075e3c07e9f1a58e29c.exe

using System;
using System.IO;
using System.Reflection;

namespace Microsoft.Tools.RegAsm
{
  internal class AssemblyResolver
  {
    private string[] m_lstPaths;

    internal AssemblyResolver(string asmpaths)
    {
      if (asmpaths != null)
        this.m_lstPaths = asmpaths.Split(';');
      else
        this.m_lstPaths = (string[]) null;
      AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += new ResolveEventHandler(this.ResolveAssembly);
    }

    private Assembly ResolveAssembly(object sender, ResolveEventArgs args)
    {
      string name = args.Name;
      Assembly assembly = (Assembly) null;
      if (this.m_lstPaths == null)
      {
        assembly = Assembly.ReflectionOnlyLoad(AppDomain.CurrentDomain.ApplyPolicy(name));
      }
      else
      {
        name = new AssemblyName(name).Name;
        string str1 = name + ".dll";
        foreach (string lstPath in this.m_lstPaths)
        {
          string str2 = lstPath + "\\" + str1;
          if (File.Exists(str2))
          {
            assembly = Assembly.ReflectionOnlyLoadFrom(str2);
            break;
          }
        }
        if ((object) assembly == null)
        {
          string str3 = name + ".exe";
          foreach (string lstPath in this.m_lstPaths)
          {
            string str4 = lstPath + "\\" + str3;
            if (File.Exists(str4))
            {
              assembly = Assembly.ReflectionOnlyLoadFrom(str4);
              break;
            }
          }
        }
      }
      if ((object) assembly == null)
        throw new FileNotFoundException(Resource.FormatString("Err_RefAsmNotInAsmPath", (object) name));
      if (RegCode.s_Options.m_bVerboseMode)
        Output.WriteInfo(Resource.FormatString("Msg_RefAsmResolvedToAsm", (object) name, (object) assembly.FullName, (object) assembly.CodeBase));
      return assembly;
    }
  }
}
