// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: IOExcepti, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 72674A88-3F84-4927-9D84-82118D6CBF01
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-49811dca565bead069108819f9ad132a2214364381f97dcf7f0f439614cc8ff4.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
      this.m_Node = aNode;
      this.m_Key = (string) null;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
label_1:
      int num1 = 669298838;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2129926142)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.m_Node = aNode;
            num1 = (int) num2 * -855661657 ^ 847811015;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.m_Key = aKey;
    }

    private void Set(JSONNode aVal)
    {
label_1:
      int num1 = -1536576703;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -102986349)) % 10U)
        {
          case 0:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * -261147477 ^ 1247376791;
            continue;
          case 1:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = -1677404190;
            continue;
          case 2:
            num1 = (int) num2 * 1627120019 ^ 1089023478;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * -832681710 ^ 1060732864;
            continue;
          case 6:
            int num3 = this.m_Key == null ? 21551853 : (num3 = 583329582);
            num1 = num3 ^ (int) num2 * -849937815;
            continue;
          case 7:
            this.m_Node = (JSONNode) null;
            num1 = -1444296621;
            continue;
          case 8:
            num1 = (int) num2 * -1524790535 ^ 1209155507;
            continue;
          case 9:
            num1 = (int) num2 * -892356705 ^ -2030151047;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
        JSONNode jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
label_1:
        int num1 = 188017603;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 310019089)) % 3U)
          {
            case 1:
              num1 = (int) num2 * -800074975 ^ 1344011172;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
        JSONArray aVal = new JSONArray();
label_1:
        int num1 = 1060066069;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 588288543)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 569753034 ^ -1210131539;
              continue;
            case 2:
              aVal.Add(value);
              num1 = (int) num2 * -440001539 ^ -2049765264;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get => (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
      set
      {
label_1:
        int num1 = -309805986;
        JSONClass aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1763343483)) % 6U)
          {
            case 0:
              goto label_3;
            case 1:
              aVal = new JSONClass();
              num1 = (int) num2 * -892817940 ^ -1732691685;
              continue;
            case 2:
              goto label_1;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1163344620 ^ 1711082537;
              continue;
            case 4:
              aVal.Add(aKey, value);
              num1 = (int) num2 * 1782966671 ^ -500793668;
              continue;
            case 5:
              num1 = (int) num2 * -1720415375 ^ -552628773;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public override void Add(JSONNode aItem)
    {
label_1:
      int num1 = 1797025865;
      JSONArray aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1512044981)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            aVal = new JSONArray();
            aVal.Add(aItem);
            num1 = (int) num2 * -2104320954 ^ 499903638;
            continue;
          case 2:
            num1 = (int) num2 * -2054162100 ^ -775633699;
            continue;
          case 3:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -1369103627 ^ 976599734;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = -1867977291;
      JSONClass aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -238276744)) % 7U)
        {
          case 0:
            aVal.Add(aKey, aItem);
            num1 = (int) num2 * 1363796915 ^ -2112669883;
            continue;
          case 1:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -185180529 ^ -1203881453;
            continue;
          case 2:
            num1 = (int) num2 * -1235308429 ^ 1001039175;
            continue;
          case 3:
            goto label_3;
          case 4:
            aVal = new JSONClass();
            num1 = (int) num2 * 1655606694 ^ 211350850;
            continue;
          case 5:
            num1 = (int) num2 * 841200737 ^ 1244450729;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
      bool flag1 = b == null;
label_1:
      int num1 = 271529553;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 974472329)) % 6U)
        {
          case 0:
            flag2 = true;
            num1 = (int) num2 * -936237563 ^ 1881124713;
            continue;
          case 1:
            num1 = (int) num2 * 982822902 ^ -573888789;
            continue;
          case 3:
            flag2 = (object) a == b;
            num1 = 123394514;
            continue;
          case 4:
            int num3 = !flag1 ? 1393858744 : (num3 = 1672341441);
            num1 = num3 ^ (int) num2 * 1881597149;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_7:
      return flag2;
    }

    public static bool operator !=(JSONLazyCreator a, object b)
    {
label_1:
      int num1 = 172273198;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 970085339)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1254862790 ^ 667481573;
            continue;
          case 1:
            flag = !(a == b);
            num1 = (int) num2 * 408768652 ^ -1269635205;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return flag;
    }

    public override bool Equals(object obj)
    {
      bool flag1 = obj == null;
label_1:
      int num1 = 1016311861;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 871639836)) % 6U)
        {
          case 0:
            num1 = (int) num2 * 571466198 ^ 1977386469;
            continue;
          case 2:
            flag2 = true;
            num1 = (int) num2 * 933795145 ^ -1241754279;
            continue;
          case 3:
            goto label_1;
          case 4:
            flag2 = (object) this == obj;
            num1 = 1584991736;
            continue;
          case 5:
            int num3 = flag1 ? -435768104 : (num3 = -1053390030);
            num1 = num3 ^ (int) num2 * -21321536;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return flag2;
    }

    public override int GetHashCode()
    {
label_1:
      int num1 = 827151220;
      int hashCode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 515762263)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            hashCode = base.GetHashCode();
            num1 = (int) num2 * 1641046489 ^ 1446409256;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return hashCode;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1246598901;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -257503589)) % 3U)
        {
          case 1:
            str = "";
            num1 = (int) num2 * 115128738 ^ -1343480683;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = -721326422;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1589929313)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = "";
            num1 = (int) num2 * -469924760 ^ 1265628296;
            continue;
          case 3:
            num1 = (int) num2 * 515792306 ^ 1167024011;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override int AsInt
    {
      get
      {
label_1:
        int num1 = 52179721;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1338889527)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              this.Set((JSONNode) new JSONData(0));
              num1 = (int) num2 * -203697869 ^ 854913754;
              continue;
            case 3:
              asInt = 0;
              num1 = (int) num2 * 696875193 ^ 1840066109;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asInt;
      }
      set
      {
label_1:
        int num1 = 1824609183;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1637452856)) % 5U)
          {
            case 0:
              num1 = (int) num2 * -1885695940 ^ 1650437519;
              continue;
            case 1:
              aVal = new JSONData(value);
              num1 = (int) num2 * -485161291 ^ -1810233256;
              continue;
            case 2:
              goto label_1;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 605076193 ^ 1078285348;
              continue;
            case 4:
              goto label_3;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override float AsFloat
    {
      get
      {
        JSONData aVal = new JSONData(0.0f);
label_1:
        int num1 = 572685259;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 331312289)) % 6U)
          {
            case 0:
              num1 = (int) num2 * -1786498684 ^ 261587594;
              continue;
            case 1:
              num1 = (int) num2 * 452372175 ^ -24779400;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1328095213 ^ 1537787736;
              continue;
            case 4:
              asFloat = 0.0f;
              num1 = (int) num2 * 176098873 ^ -322068595;
              continue;
            case 5:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_7:
        return asFloat;
      }
      set
      {
label_1:
        int num1 = -1405276895;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2012414031)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * -1569585584 ^ -1760856394;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override double AsDouble
    {
      get
      {
label_1:
        int num1 = -923189164;
        JSONData aVal;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -297665367)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              asDouble = 0.0;
              num1 = (int) num2 * 478903369 ^ 1277894678;
              continue;
            case 2:
              num1 = (int) num2 * 1963009409 ^ -1346105446;
              continue;
            case 3:
              aVal = new JSONData(0.0);
              num1 = (int) num2 * -1143058163 ^ -790287710;
              continue;
            case 4:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -762648359 ^ 1973689754;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asDouble;
      }
      set
      {
label_1:
        int num1 = 1340535471;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 626821439)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * -330264667 ^ 93059925;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override bool AsBool
    {
      get
      {
label_1:
        int num1 = -1415197807;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -445188618)) % 6U)
          {
            case 1:
              this.Set((JSONNode) new JSONData(false));
              num1 = (int) num2 * -802871716 ^ -1798544386;
              continue;
            case 2:
              num1 = (int) num2 * 256571835 ^ 319280334;
              continue;
            case 3:
              goto label_1;
            case 4:
              asBool = false;
              num1 = (int) num2 * 551870270 ^ -1654412835;
              continue;
            case 5:
              num1 = (int) num2 * 43249612 ^ 1274303540;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asBool;
      }
      set
      {
label_1:
        int num1 = -598715036;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -456443899)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal = new JSONData(value);
              num1 = (int) num2 * -1196743927 ^ -2040323737;
              continue;
            case 2:
              goto label_3;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1930833817 ^ 196652282;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override JSONArray AsArray
    {
      get
      {
label_1:
        int num1 = 822706681;
        JSONArray aVal;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1802814595)) % 5U)
          {
            case 0:
              num1 = (int) num2 * 361602170 ^ -154440770;
              continue;
            case 1:
              aVal = new JSONArray();
              num1 = (int) num2 * -1477721875 ^ 1973754542;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              asArray = aVal;
              num1 = (int) num2 * -1716628450 ^ 984037331;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_6:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
label_1:
        int num1 = 865952342;
        JSONClass aVal;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1226855197)) % 7U)
          {
            case 0:
              asObject = aVal;
              num1 = (int) num2 * 798767370 ^ 157909748;
              continue;
            case 1:
              aVal = new JSONClass();
              num1 = (int) num2 * 863801620 ^ -4829948;
              continue;
            case 2:
              num1 = (int) num2 * -615617670 ^ -639784720;
              continue;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1646276416 ^ 1065469426;
              continue;
            case 5:
              num1 = (int) num2 * -1209637787 ^ 2099500155;
              continue;
            case 6:
              goto label_1;
            default:
              goto label_8;
          }
        }
label_8:
        return asObject;
      }
    }
  }
}
