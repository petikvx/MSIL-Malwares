// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ReportExceptionEventArgs
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.Zip;
using System;
using System.IO;
using System.Runtime.InteropServices;

namespace SmartAssembly.SmartExceptionsCore
{
  public class ReportExceptionEventArgs : EventArgs
  {
    private DESCryptoIndirector.Ⴓ Ⴍ;

    public Exception Exception
    {
      get
      {
        try
        {
          return this.Ⴍ.Ⴅ;
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
    }

    public bool CanDebug
    {
      get
      {
        try
        {
          return this.Ⴍ.Ⴈ;
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
    }

    public bool CanSendReport
    {
      get
      {
        try
        {
          return this.Ⴍ.Ⴃ;
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
    }

    public bool ShowContinueCheckbox
    {
      get
      {
        try
        {
          return this.Ⴍ.Ⴍ;
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
    }

    [Obsolete("Use ShowContinueCheckbox instead, as this is now also false when the builder has chosen not to show the checkbox.")]
    public bool CanContinue
    {
      get
      {
        try
        {
          return this.Ⴍ.Ⴍ;
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
    }

    internal void Ⴍ(bool Ⴗ)
    {
      bool flag;
      try
      {
        flag = Ⴗ;
        this.Ⴍ.Ⴍ = flag;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<bool> o1 = (ValueType) flag;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o3 = (ValueType) Ⴗ;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
        throw;
      }
    }

    internal void Ⴄ()
    {
      bool flag;
      try
      {
        flag = true;
        this.Ⴍ.Ⴈ = flag;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<bool> o1 = (ValueType) flag;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
        throw;
      }
    }

    public bool TryToContinue
    {
      get
      {
        try
        {
          return this.Ⴍ.Ⴓ;
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
      set
      {
        bool flag;
        try
        {
          flag = value;
          this.Ⴍ.Ⴓ = flag;
        }
        catch (Exception ex)
        {
          __Boxed<bool> o1 = (ValueType) flag;
          __Boxed<bool> o3 = (ValueType) value;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }
    }

    public void LaunchDebugger()
    {
      int num;
      try
      {
        num = 0;
        while (true)
        {
          switch (num)
          {
            case 1:
            case 3:
              goto label_3;
            case 2:
              goto label_4;
            case 4:
              goto label_6;
            case 5:
              goto label_7;
            default:
              num = !this.Ⴍ.Ⴈ ? 2 : 3;
              continue;
          }
        }
label_4:
        return;
label_6:
        return;
label_7:
        return;
label_3:
        this.Ⴍ.Ⴗ.Ⴄ();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
        throw;
      }
    }

    public bool SaveEncryptedReport(string fileName)
    {
      int num;
      try
      {
label_3:
        num = !SimpleZip.ႭႭ(fileName, 632, 596) ? 1 : 4;
        while (true)
        {
          switch (num)
          {
            case 1:
            case 2:
              goto label_5;
            case 3:
              goto label_3;
            case 4:
              goto label_4;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ReportExceptionEventArgs.SaveEncryptedReport);
              num = 3;
              continue;
          }
        }
label_4:
        Ⴈ.Ⴄ.ႳႷ(fileName, 48, 123);
label_5:
        return this.Ⴍ.Ⴗ.ႷႥ(fileName);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        string o3 = fileName;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
        throw;
      }
    }

    public byte[] GetReportRawData()
    {
      try
      {
        return this.Ⴍ.Ⴗ.Ⴐ();
      }
      catch (Exception ex)
      {
        int num;
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
        throw;
      }
    }

    public bool SendReport()
    {
      int num;
      try
      {
label_3:
        num = this.Ⴍ.Ⴃ ? 1 : 2;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
              goto label_4;
            case 1:
              goto label_5;
            case 4:
            case 5:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ReportExceptionEventArgs.SendReport);
              num = 5;
              continue;
          }
        }
label_4:
        return false;
label_5:
        return this.Ⴍ.Ⴗ.Ⴗ();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
        throw;
      }
    }

    public void AddCustomProperty(string name, string value)
    {
      try
      {
        this.Ⴍ.Ⴗ.Ⴍ(name, (object) value);
      }
      catch (Exception ex)
      {
        string o2 = name;
        string o3 = value;
        StackFrameHelper.CreateException3(ex, (object) this, (object) o2, (object) o3);
        throw;
      }
    }

    public void AttachFile(string name, string fileName)
    {
      try
      {
        this.Ⴍ.Ⴗ.Ⴀ(name, fileName);
      }
      catch (Exception ex)
      {
        string o2 = name;
        string o3 = fileName;
        StackFrameHelper.CreateException3(ex, (object) this, (object) o2, (object) o3);
        throw;
      }
    }

    internal ReportExceptionEventArgs(Ⴈ.Ⴄ Ⴅ, Exception Ⴗ)
    {
      bool flag1 = true;
      this.Ⴍ.Ⴃ = flag1;
      bool flag2 = true;
      this.Ⴍ.Ⴍ = flag2;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      Ⴈ.Ⴄ ⴄ;
      Exception exception;
      try
      {
        ⴄ = Ⴅ;
        this.Ⴍ.Ⴗ = ⴄ;
        exception = Ⴗ;
        this.Ⴍ.Ⴅ = exception;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<bool> o1 = (ValueType) flag1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o2 = (ValueType) flag2;
        Ⴈ.Ⴄ o3 = ⴄ;
        Exception o4 = exception;
        Ⴈ.Ⴄ o6 = Ⴅ;
        Exception o7 = Ⴗ;
        StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this, (object) o6, (object) o7);
        throw;
      }
    }

    static ReportExceptionEventArgs()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static void Ⴃ([In] Stream obj0, [In] long obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
        num1 = 0;
        while (true)
        {
          switch (num1)
          {
            case 2:
            case 4:
              num1 = 0;
              continue;
            case 3:
            case 5:
              goto label_7;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 14:
                  num2 = 3;
                  break;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.Position = obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Stream o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<long> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    internal static int Ⴀ([In] Type obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 114:
            num2 = 4;
            break;
          default:
            num2 = 7;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              num1 = 1;
              continue;
            case 1:
              goto label_3;
            case 2:
            case 7:
              num1 = 1;
              continue;
            case 4:
            case 5:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ReportExceptionEventArgs.Ⴀ);
              num1 = 1;
              continue;
          }
        }
label_8:
        return Marshal.SizeOf(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Type o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }
  }
}
