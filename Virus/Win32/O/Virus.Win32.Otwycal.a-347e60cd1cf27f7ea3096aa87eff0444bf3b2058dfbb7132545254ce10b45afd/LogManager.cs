// Decompiled with JetBrains decompiler
// Type: ATI.ACE.LOG.EXE.LogManager
// Assembly: LOG, Version=2.0.4330.39118, Culture=neutral, PublicKeyToken=90ba9c70f846762e
// MVID: D948BFF4-3013-456D-9998-1C1F0C6DA164
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Otwycal.a-347e60cd1cf27f7ea3096aa87eff0444bf3b2058dfbb7132545254ce10b45afd.exe

using ATI.ACE.APM.Foundation;
using ATI.ACE.CLI.Foundation;
using ATI.ACE.LOG.Foundation;
using ATI.ACE.LOG.Foundation.Implementation.Private;
using ATI.ACE.LOG.Foundation.Private;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace ATI.ACE.LOG.EXE
{
  public class LogManager : 
    Form,
    IObserveLanguageChanged,
    IObserveComponentUpdated,
    IObserveComponentExiting,
    IObserveComponentChanges,
    IObserveValueChanges,
    IObserveSkinMolting
  {
    private const string ACE_LOG_FIlE_NAME = "ACELog.txt";
    private const string PAUSE_LOG = "Pause";
    private const string RESUME_LOG = "Resume";
    private MgrLog logger;
    private LogServer logServer;
    private bool loggingPaused;
    private ArrayList logMessages = new ArrayList();
    private ArrayList runProcesses = new ArrayList();
    private CLIProcess[] CLIComponents;
    private Process[] ACEApplications;
    private IComponent IComponentRT;
    private NotifyLanguage ComponentRT_L;
    private NotifyComponent ComponentRT_C;
    private NotifyComponentVoid ComponentRT_E;
    private NotifyComponent ComponentRT_U;
    private NotifySkin ComponentRT_S;
    private int LanguageCounter;
    private int LanguageChanges;
    private Tongue currentLanguage;
    private int SkinCounter;
    private int SkinChanges;
    private Flesh currentSkin;
    private ICaste ICasteRT;
    private NotifyCCAA CasteRT_C;
    private SCaste sCaste;
    private IAdapter IAdapterRT;
    private NotifyCCAA AdapterRT_C;
    private SAdapter sAdapter;
    private IAspect IAspectRT;
    private NotifyCCAA AspectRT_C;
    private SAspect sAspect;
    private Feature[] sFeatures;
    private IWriteable[] sWriteable;
    private IImmutable[] sImmutable;
    private int SetPropertyRepeats;
    private XManifest xManifest;
    private IProfileManager iPM;
    private LogServer.LogUpdateEventHandler logUpdateEventHandler;
    private LogServer.AppDomainRegisterHandler appDomainRegisterHandler;
    private LogServer.AppDomainUnregisterHandler appDomainUnregisterHandler;
    private LogServer.CccComponentsHandler cccComponentsHandler;
    private Dictionary<int, CCC> myCCCs = new Dictionary<int, CCC>();
    private GroupBox UI_GB_CasteInfo;
    private Button UI_B_GetSCaste;
    private ComboBox UI_CB_Caste;
    private GroupBox UI_GB_AdapterInfo;
    private Button UI_B_GetSAdapter;
    private TabControl UI_TAB_MainTab;
    private TabPage UI_TAB_Main_Runtime;
    private GroupBox UI_GB_FeatureInfo;
    private Button UI_B_GetSFeature;
    private ComboBox UI_CB_Feature;
    private GroupBox UI_GB_AspectInfo;
    private Button UI_B_GetSAspect;
    private ComboBox UI_CB_Aspect;
    private GroupBox UI_GB_PropertyInfo;
    private Button UI_B_GetSProperty;
    private ComboBox UI_CB_Property;
    private TabPage UI_TAB_Main_Components;
    private TabPage UI_TAB_Main_Messages;
    private TabPage UI_TAB_Main_Domains;
    private TabPage UI_TAB_Main_Logfile;
    private GroupBox UI_GB_ACE_LogFile;
    private TextBox UI_TB_ACE_LogFile;
    private Button UI_B_Open_ACE_LogFile;
    private Button UI_B_Delete_ACE_LogFile;
    private GroupBox UI_GB_Windows_EventLog;
    private Button UI_B_Open_Windows_EventLog;
    private Button UI_B_Clear_Windows_EventLog;
    private GroupBox UI_GB_AppDomains;
    private CheckBox UI_CM_DebugMessages;
    private ListBox UI_LB_AppDomains;
    private ListView UI_LV_LogInfo;
    private GroupBox UI_GB_Filters;
    private ComboBox UI_CB_AssemblyName;
    private ComboBox UI_CB_AppDomain;
    private TextBox UI_TB_NamespaceClass;
    private Button UI_B_PauseLogging;
    private Button UI_B_SaveTable;
    private Button UI_B_ClearAllLogMessages;
    private ColumnHeader UI_C_LogMessageTime;
    private ColumnHeader UI_C_LogMessage;
    private ColumnHeader UI_C_MethodName;
    private ColumnHeader UI_C_NamespaceClass;
    private ColumnHeader UI_C_AppDomain;
    private ColumnHeader UI_C_AssemblyName;
    private GroupBox UI_GB_ACE_LogMessages;
    private Button UI_B_SetSProperty;
    private TextBox UI_TB_SetSProperty;
    private CheckBox UI_CM_AutoScroll;
    private GroupBox UI_GB_MessageControl;
    private GroupBox UI_GB_MessageDetails;
    private TextBox UI_TB_AssemblyCurrent;
    private TextBox UI_TB_AppDomainCurrent;
    private TextBox UI_TB_ClassCurrent;
    private Button UI_B_CopyMessage;
    private Button UI_B_IComponentApply;
    private GroupBox UI_GB_IComponent;
    private Button UI_B_IComponentCancel;
    private Button UI_B_IComponentFactory;
    private Button UI_B_IComponentRefresh;
    private CheckBox UI_B_LogMessagesConfirmClear;
    private TextBox UI_TB_ChangeCounterCaste;
    private TextBox UI_TB_ChangeCounterAdapter;
    private TextBox UI_TB_ChangeCounterAspect;
    private TextBox UI_TB_SPropertyRepeats;
    private Button UI_B_SetSPropertyRepeat;
    private Button UI_B_StartCLI;
    private GroupBox UI_GB_CLI;
    private CheckBox UI_CM_CLIDebugging;
    private ListBox UI_LB_CLI;
    private GroupBox UI_GB_Runtime;
    private Button UI_B_RuntimeConnect;
    private TextBox UI_TB_SFeatureActive;
    private TextBox UI_TB_RuntimePID;
    private TextBox UI_TB_UnApplied;
    private GroupBox UI_GB_LOGMessageControls;
    private CheckBox UI_CM_ErrorMessages;
    private CheckBox UI_CM_ExceptionMessages;
    private TextBox UI_TB_Message;
    private TextBox UI_TB_MethodName;
    private Button UI_B_GetAppDomainAssemblies;
    private Button UI_B_CopyAppDomains;
    private ListBox UI_LB_AppDomainItems;
    private Button UI_B_GetPublished;
    private ColumnHeader UI_C_MessageType;
    private CheckBox UI_CM_LOG_Status_AutoScroll;
    private ListBox UI_LB_LOG_Status;
    private Button UI_B_DeleteProfile;
    private Button UI_B_Clear_LOG_Status;
    private CheckBox UI_CM_LogToLOG;
    private CheckBox UI_CM_AppDomainLogToLOG;
    private ComboBox UI_CB_Languages;
    private TextBox UI_TB_LanguageCounter;
    private TextBox UI_TB_LanguageCurrent;
    private GroupBox UI_GB_Language;
    private TextBox UI_TB_LanguageChanges;
    private Label UI_L_NumLanguageCalls;
    private Label UI_L_NumLanguageChanges;
    private TabPage UI_TAB_Profiles;
    private GroupBox UI_GB_Profiles;
    private TextBox UI_TB_IPM_PID;
    private GroupBox UI_GB_IPM;
    private Button UI_B_IPM_Connect;
    private ListBox UI_LB_Profiles;
    private Button UI_IPM_GetList;
    private Button UI_B_IPM_Load;
    private Button UI_B_StopCLI;
    private ColumnHeader UI_C_ProcessID;
    private ColumnHeader UI_C_ThreadName;
    private Label UI_L_CLI_Args;
    private TextBox UI_TB_CLI_Args;
    private GroupBox UI_GB_Skin;
    private ComboBox UI_CB_Skins;
    private TextBox UI_TB_SkinCurrent;
    private TextBox UI_TB_SkinCounter;
    private TextBox UI_TB_SkinChanges;
    private Label UI_L_NumSkinCalls;
    private Label label1;
    private Button UI_B_LanguageReset;
    private GroupBox UI_GB_CCC;
    private ListBox UI_LB_CCC;
    private ComboBox UI_CB_CCC;
    private TextBox UI_TB_PID;
    private Label UI_L_CCC;
    private Label UI_L_PID;
    private Button UI_B_StopCCC;
    private ComboBox UI_CB_Property_Immutable;
    private Button UI_B_GetSProperty_Immutable;
    private TextBox UI_TB_CCC_Args;
    private Label UI_L_CCC_Args;
    private ComboBox UI_CB_Adapter;

    static LogManager() => Directory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);

    [STAThread]
    public static void Main(string[] args)
    {
      Thread.CurrentThread.Name = nameof (Main);
      try
      {
        Communications.Initialize(false, "LOG");
        Application.Run((Form) new LogManager());
        Communications.Destroy();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Failed to startup: " + ex.Message);
      }
    }

    public LogManager()
    {
      string str = "LOG";
      this.InitializeComponent();
      if (!this.Init())
        this.Close();
      this.Text = str;
      this.Display(str + " is at your service!");
    }

    private bool Init()
    {
      try
      {
        this.logger = new MgrLog();
        this.logServer = new LogServer();
        this.logServer.LogUpdate += this.logUpdateEventHandler = new LogServer.LogUpdateEventHandler(this.logger_LogUpdate);
        this.logServer.AppDomainRegister += this.appDomainRegisterHandler = new LogServer.AppDomainRegisterHandler(this.logger_AppDomainRegister);
        this.logServer.AppDomainUnregister += this.appDomainUnregisterHandler = new LogServer.AppDomainUnregisterHandler(this.logger_AppDomainUnregister);
        this.logServer.CccComponents += this.cccComponentsHandler = new LogServer.CccComponentsHandler(this.logger_CccComponentsHandler);
        Communications.PublishObject((IMBRO) this.logServer, "LOG");
        this.InitializeComboBoxes();
        // ISSUE: method pointer
        this.ComponentRT_U = new NotifyComponent((object) new ComponentUpdated((IObserveComponentUpdated) this), __methodptr(NotifyComponentUpdated));
        // ISSUE: method pointer
        this.ComponentRT_E = new NotifyComponentVoid((object) new ComponentExiting((IObserveComponentExiting) this), __methodptr(NotifyComponentExiting));
        // ISSUE: method pointer
        this.ComponentRT_C = new NotifyComponent((object) new ComponentChanges((IObserveComponentChanges) this), __methodptr(NotifyComponentChanges));
        // ISSUE: method pointer
        this.ComponentRT_L = new NotifyLanguage((object) new LanguageChanged((IObserveLanguageChanged) this), __methodptr(NotifyLanguageChanged));
        // ISSUE: method pointer
        this.ComponentRT_S = new NotifySkin((object) new SkinMolting((IObserveSkinMolting) this), __methodptr(NotifySkinMolting));
        // ISSUE: method pointer
        this.CasteRT_C = new NotifyCCAA((object) new ValueChanges((IObserveValueChanges) this), __methodptr(NotifyValueChanges));
        // ISSUE: method pointer
        this.AdapterRT_C = new NotifyCCAA((object) new ValueChanges((IObserveValueChanges) this), __methodptr(NotifyValueChanges));
        // ISSUE: method pointer
        this.AspectRT_C = new NotifyCCAA((object) new ValueChanges((IObserveValueChanges) this), __methodptr(NotifyValueChanges));
        return this.ReadManifestDestiny();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
        return false;
      }
    }

    private void InitializeComboBoxes()
    {
      try
      {
        this.UI_CB_AssemblyName.Items.Add((object) "<Search by Assembly Name>");
        this.UI_CB_AppDomain.Items.Add((object) "<Search by AppDomain Name>");
        this.UI_CB_AssemblyName.SelectedIndex = 0;
        this.UI_CB_AppDomain.SelectedIndex = 0;
        this.UI_TB_ACE_LogFile.Text = this.logger.FullPathFileName;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing)
        Communications.UnPublishObject("LOG");
      base.Dispose(disposing);
    }

    private string DomainNameFilter => (string) this.UI_CB_AppDomain.SelectedItem;

    private string AssemblyNameFilter => (string) this.UI_CB_AssemblyName.SelectedItem;

    private string NamespaceFilter => this.UI_TB_NamespaceClass.Text;

    private string MessageTextFilter => this.UI_TB_Message.Text;

    private void Cleanup()
    {
    }

    private void UI_ACE_Closing(object sender, CancelEventArgs e)
    {
      this.UI_TAB_MainTab.SelectedTab = this.UI_TAB_Main_Messages;
      if (this.CLIComponents != null)
      {
        for (int index = this.CLIComponents.Length - 1; 0 <= index; --index)
        {
          CLIProcess cliComponent = this.CLIComponents[index];
          if (cliComponent != null)
          {
            XComponentBase c = cliComponent.c;
            HComponent refComponent = c.RefComponent;
            if (refComponent != null)
            {
              c.RefComponent = (HComponent) null;
              this.Display("Releasing " + (object) c);
              try
              {
                refComponent.PleaseExit();
                this.Display("Released");
              }
              catch
              {
                this.Display("Already exiting");
              }
            }
          }
        }
      }
      if (this.ACEApplications != null)
      {
        int length = this.ACEApplications.Length;
        for (int index = 0; index < length; ++index)
          this.ACEApplications[index] = (Process) null;
      }
      if (0 >= this.UI_LB_AppDomains.Items.Count)
        return;
      new Thread(new ThreadStart(this.Cleanup))
      {
        Name = "Log Manager Cleanup Thread"
      }.Start();
      int num = (int) MessageBox.Show("Released CLI Components (may kill them if needed).\nPress OK when all CLI Components seems to have exited.");
    }

    private void UI_TAB_MainTab_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (this.UI_TAB_MainTab.SelectedTab != this.UI_TAB_Main_Messages || !this.UI_CM_AutoScroll.Checked || 0 >= this.UI_LV_LogInfo.Items.Count)
        return;
      this.UI_LV_LogInfo.EnsureVisible(this.UI_LV_LogInfo.Items.Count - 1);
    }

    private void Display(string s)
    {
      this.UI_LB_LOG_Status.BeginUpdate();
      this.UI_LB_LOG_Status.Items.Add((object) s);
      if (1000 < this.UI_LB_LOG_Status.Items.Count)
      {
        for (int index = 0; index < 100; ++index)
          this.UI_LB_LOG_Status.Items.RemoveAt(0);
      }
      if (this.UI_CM_LOG_Status_AutoScroll.Checked && 0 < this.UI_LB_LOG_Status.Items.Count)
        this.UI_LB_LOG_Status.SetSelected(this.UI_LB_LOG_Status.Items.Count - 1, true);
      this.UI_LB_LOG_Status.EndUpdate();
      this.AddMessage(new SLog((MessageType) 2, "Display: " + s, -2));
    }

    private void UI_CM_LOG_Status_AutoScroll_CheckedChanged(object sender, EventArgs e)
    {
      if (!(sender is CheckBox) || !this.UI_CM_LOG_Status_AutoScroll.Checked || 0 >= this.UI_LB_LOG_Status.Items.Count)
        return;
      this.UI_LB_LOG_Status.SelectedItem = this.UI_LB_LOG_Status.Items[this.UI_LB_LOG_Status.Items.Count - 1];
    }

    private void UI_B_Clear_LOG_Status_Click(object sender, EventArgs e) => this.UI_LB_LOG_Status.Items.Clear();

    private void LogManager_Load(object sender, EventArgs e)
    {
    }

    private bool ReadManifestDestiny()
    {
      this.UI_LB_CLI.BeginUpdate();
      this.UI_LB_CLI.Items.Clear();
      this.xManifest = XManifest.NewXManifest();
      if (this.xManifest != null)
      {
        this.xManifest.ReadManifest();
        if (this.xManifest.Components == null)
        {
          int num = (int) MessageBox.Show("Found CLI but found no Components.");
          return false;
        }
        bool flag = true;
        int count = this.xManifest.Components.Count;
        this.CLIComponents = new CLIProcess[count];
        for (int index = 0; index < count; ++index)
        {
          XComponentBase xcomponentBase = this.xManifest.Components.Get(index);
          if (xcomponentBase != null)
          {
            CLIProcess cliProcess = new CLIProcess();
            cliProcess.c = xcomponentBase;
            cliProcess.l = false;
            cliProcess.d = false;
            cliProcess.args = "";
            this.CLIComponents[index] = cliProcess;
            this.UI_LB_CLI.Items.Add((object) cliProcess);
          }
        }
        if (0 < this.UI_LB_CLI.Items.Count)
        {
          this.UI_LB_CLI.SelectedIndex = 0;
          if (!flag)
          {
            int num = (int) MessageBox.Show("No CLI Components in Manifest.");
            return false;
          }
          this.UI_LB_CLI.EndUpdate();
          return true;
        }
        int num1 = (int) MessageBox.Show("Found CLI and Components, but none were valid.");
        return false;
      }
      int num2 = (int) MessageBox.Show("Can't read Manifest");
      return false;
    }

    private void UI_LB_CLI_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.UI_CM_CLIDebugging.CheckState = CheckState.Indeterminate;
      this.UI_CM_LogToLOG.CheckState = CheckState.Indeterminate;
      this.UI_CM_CLIDebugging.Enabled = true;
      this.UI_CM_LogToLOG.Enabled = true;
      object selectedItem = this.UI_LB_CLI.SelectedItem;
      if (selectedItem == null)
        return;
      if (selectedItem is CLIProcess cliProcess)
      {
        XComponentBase c = cliProcess.c;
        this.UI_CM_CLIDebugging.CheckState = cliProcess.d ? CheckState.Checked : CheckState.Unchecked;
        this.UI_CM_LogToLOG.CheckState = !cliProcess.l ? CheckState.Checked : CheckState.Unchecked;
        this.UI_TB_CLI_Args.Text = cliProcess.args;
      }
      else
      {
        this.Display("Internal error: Entry is NULL");
        this.UI_LB_CLI.SelectedItem = (object) null;
      }
    }

    private void UI_B_StartCLI_Click(object sender, EventArgs e)
    {
      object selectedItem = this.UI_LB_CLI.SelectedItem;
      if (selectedItem == null)
        return;
      if (selectedItem is CLIProcess cliProcess)
      {
        cliProcess.d = this.UI_CM_CLIDebugging.Checked;
        cliProcess.l = !this.UI_CM_LogToLOG.Checked;
        cliProcess.args = this.UI_TB_CLI_Args.Text;
        try
        {
          string str = "Start " + cliProcess.ToString();
          if (cliProcess.args.Length > 0)
            str = str + " " + cliProcess.args;
          Communications.CallMOM(str.Split(' '));
          this.Display(cliProcess.ToString() + " started");
        }
        catch (Exception ex)
        {
          this.Display("Failed to start " + (object) cliProcess + ": " + ex.Message);
        }
      }
      else
      {
        this.Display("Internal error: Entry is NULL");
        this.UI_LB_CLI.SelectedItem = (object) null;
      }
    }

    private void UI_B_StopCLI_Click(object sender, EventArgs e)
    {
      object selectedItem = this.UI_LB_CLI.SelectedItem;
      if (selectedItem != null)
      {
        CLIProcess cliProcess = selectedItem as CLIProcess;
        cliProcess.d = this.UI_CM_CLIDebugging.Checked;
        cliProcess.l = !this.UI_CM_LogToLOG.Checked;
        cliProcess.args = this.UI_TB_CLI_Args.Text;
        try
        {
          Communications.CallMOM(new string[2]
          {
            "Stop",
            cliProcess.ToString() + ("" != cliProcess.args ? " " + cliProcess.args : "")
          });
          this.Display(cliProcess.ToString() + " stopped");
        }
        catch (Exception ex)
        {
          this.Display("Failed to stop " + (object) cliProcess + ": " + ex.Message);
        }
      }
      else
      {
        this.Display("Internal error: Entry is NULL");
        this.UI_LB_CLI.SelectedItem = (object) null;
      }
    }

    private void UI_B_DeleteProfile_Click(object sender, EventArgs e)
    {
      string path = Services.LocalAppDataPath + "Profiles.XML";
      if (Utilities.LocalAppDataFileExists("Profiles.XML"))
      {
        this.Display("About to delete " + path);
        try
        {
          File.Delete(path);
          this.Display("Deleted");
        }
        catch (Exception ex)
        {
          this.Display("Delete failed: " + ex.Message);
        }
      }
      else
        this.Display(path + " does not exist.");
    }

    private void UI_CB_CCC_SelectedIndexChanged(object sender, EventArgs e)
    {
      object selectedItem = this.UI_CB_CCC.SelectedItem;
      if (selectedItem == null)
        return;
      CCC ccc = (CCC) selectedItem;
      List<CccComponent> components = ccc.components;
      this.SuspendLayout();
      this.UI_TB_PID.Text = ccc.ProcessId.ToString();
      this.UI_LB_CCC.Items.Clear();
      foreach (CccComponent cccComponent in components)
        this.UI_LB_CCC.Items.Add((object) cccComponent);
      this.ResumeLayout();
    }

    private void UI_LB_CCC_SelectedIndexChanged(object sender, EventArgs e)
    {
      object selectedItem = this.UI_LB_CCC.SelectedItem;
      if (selectedItem == null)
        return;
      string[] args = ((CccComponent) selectedItem).Args;
      this.SuspendLayout();
      if (args != null)
      {
        string str1 = string.Empty;
        foreach (string str2 in args)
          str1 = str1 + str2 + " ";
        this.UI_TB_CCC_Args.Text = str1;
      }
      else
        this.UI_TB_CCC_Args.Text = string.Empty;
      this.ResumeLayout();
    }

    private void logger_CccComponentsHandler(CCC theCCC)
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) this.cccComponentsHandler, (object) theCCC);
      }
      else
      {
        this.SuspendLayout();
        if (theCCC.components.Count == 0)
        {
          if (this.myCCCs.ContainsKey(theCCC.Id))
            this.myCCCs.Remove(theCCC.Id);
          this.UI_CB_CCC.Items.Remove((object) theCCC);
        }
        else
          this.myCCCs[theCCC.Id] = theCCC;
        this.UI_CB_CCC.Items.Clear();
        foreach (CCC ccc in this.myCCCs.Values)
          this.UI_CB_CCC.Items.Add((object) ccc);
        this.ResumeLayout();
      }
    }

    public void NotifyeeComponentUpdated(SComponent newSComponent)
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) this.ComponentRT_U, (object) newSComponent);
      }
      else
      {
        this.HideCaste();
        this.ShowComponent();
        this.Refresh();
      }
    }

    public void NotifyeeComponentExiting()
    {
      if (this.InvokeRequired)
        this.Invoke((Delegate) this.ComponentRT_E);
      else
        this.IComponentDisconnect();
    }

    public void NotifyeeComponentChanges(SComponent newSComponent)
    {
      if (!this.InvokeRequired)
        return;
      this.Invoke((Delegate) this.ComponentRT_C, (object) newSComponent);
    }

    public void NotifyeeLanguageChanged(Tongue t)
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) this.ComponentRT_L, (object) t);
      }
      else
      {
        ++this.LanguageCounter;
        if (t.Code != this.currentLanguage.Code)
        {
          this.currentLanguage = t;
          ++this.LanguageChanges;
        }
        this.DisplayLanguage();
      }
    }

    public void NotifyeeSkinMolting(Flesh f)
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) this.ComponentRT_S, (object) f);
      }
      else
      {
        ++this.SkinCounter;
        if (f.SkinName != this.currentSkin.SkinName)
        {
          this.currentSkin = f;
          ++this.SkinChanges;
        }
        this.DisplaySkin();
      }
    }

    public void NotifyeeValueChanges(SCCAA sCCAANew)
    {
      if ((object) typeof (SCaste) == (object) ((object) sCCAANew).GetType())
        this.NotifyeeCasteValueChanges(sCCAANew as SCaste);
      else if ((object) typeof (SAdapter) == (object) ((object) sCCAANew).GetType())
      {
        this.NotifyeeAdapterValueChanges(sCCAANew as SAdapter);
      }
      else
      {
        if ((object) typeof (SAspect) != (object) ((object) sCCAANew).GetType())
          return;
        this.NotifyeeAspectValueChanges(sCCAANew as SAspect);
      }
    }

    private void NotifyeeCasteValueChanges(SCaste sCasteNew)
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) this.CasteRT_C, (object) sCasteNew);
      }
      else
      {
        if (((SCCAA) sCasteNew).IsNewerThan((SCCAA) this.sCaste))
        {
          this.sCaste = sCasteNew;
          this.HideAdapter();
          this.ShowCaste();
        }
        this.Refresh();
      }
    }

    private void NotifyeeAdapterValueChanges(SAdapter sAdapterNew)
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) this.AdapterRT_C, (object) sAdapterNew);
      }
      else
      {
        if (((SCCAA) sAdapterNew).IsNewerThan((SCCAA) this.sAdapter))
        {
          this.sAdapter = sAdapterNew;
          this.HideAspect();
          this.ShowAdapter();
        }
        this.Refresh();
      }
    }

    private void NotifyeeAspectValueChanges(SAspect sAspectNew)
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) this.AspectRT_C, (object) sAspectNew);
      }
      else
      {
        if (((SCCAA) sAspectNew).IsNewerThan((SCCAA) this.sAspect))
        {
          this.sAspect = sAspectNew;
          this.HideFeature();
          this.ShowAspect();
        }
        this.Refresh();
      }
    }

    private void DisplayLanguage()
    {
      this.UI_TB_LanguageCounter.Text = this.LanguageCounter.ToString();
      this.UI_TB_LanguageChanges.Text = this.LanguageChanges.ToString();
      this.UI_TB_LanguageCurrent.Text = this.currentLanguage.Code;
    }

    private void DisplaySkin()
    {
      this.UI_TB_SkinCounter.Text = this.SkinCounter.ToString();
      this.UI_TB_SkinChanges.Text = this.SkinChanges.ToString();
      this.UI_TB_SkinCurrent.Text = this.currentSkin.SkinName;
    }

    private void HideComponent()
    {
      this.HideCaste();
      this.UI_GB_IComponent.Enabled = false;
      this.UI_B_RuntimeConnect.Text = "Connect";
      this.UI_TB_RuntimePID.Text = "No PID";
      this.UI_TB_UnApplied.Text = "UnApplied?";
    }

    private void ShowComponent()
    {
      this.UI_TB_UnApplied.Text = "Unknown";
      try
      {
        this.UI_TB_UnApplied.Text = ((ICCAAFP) this.IComponentRT).UnApplied() ? "Dirty" : "Clean";
      }
      catch
      {
        this.Display("Failed to call IComponent.UnApplied");
      }
      string[] scasteNames = this.IComponentRT.GetSCasteNames();
      int length = scasteNames.Length;
      if (0 >= length)
        return;
      this.UI_CB_Caste.BeginUpdate();
      this.UI_CB_Caste.Items.Clear();
      for (int index = 0; index < length; ++index)
      {
        string str = scasteNames[index];
        if (str != null && str.Length > 0)
          this.UI_CB_Caste.Items.Add((object) str);
      }
      this.UI_CB_Caste.EndUpdate();
      if (0 >= this.UI_CB_Caste.Items.Count)
        return;
      this.UI_CB_Caste.SelectedIndex = 0;
      this.UI_GB_CasteInfo.Enabled = true;
    }

    private void CancelCaste()
    {
      this.HideAdapter();
      this.UI_TB_ChangeCounterCaste.Text = "Change Counter";
      this.UI_TB_ChangeCounterCaste.Enabled = false;
      if (this.ICasteRT == null)
        return;
      try
      {
        ((ICCAA) this.ICasteRT).ValueChanges -= this.CasteRT_C;
      }
      catch
      {
      }
      this.ICasteRT = (ICaste) null;
    }

    private void HideCaste()
    {
      this.CancelCaste();
      this.UI_GB_CasteInfo.Enabled = false;
      this.UI_CB_Caste.Items.Clear();
    }

    private void ShowCaste()
    {
      if (this.ICasteRT == null)
        return;
      this.UI_TB_ChangeCounterCaste.Text = (((ICCAAFP) this.ICasteRT).UnApplied() ? "Dirty: " : "Clean: ") + ((SCCAA) this.sCaste).ChangeCount.ToString();
      this.UI_TB_ChangeCounterCaste.Enabled = true;
      int numberOfAdapters = this.ICasteRT.GetNumberOfAdapters();
      if (0 < numberOfAdapters)
      {
        this.UI_CB_Adapter.BeginUpdate();
        this.UI_CB_Adapter.Items.Clear();
        for (int index = 0; index < numberOfAdapters; ++index)
          this.UI_CB_Adapter.Items.Add((object) index.ToString());
        this.UI_CB_Adapter.EndUpdate();
        if (0 >= this.UI_CB_Adapter.Items.Count)
          return;
        this.UI_CB_Adapter.SelectedIndex = 0;
        this.UI_GB_AdapterInfo.Enabled = true;
        this.UI_CB_Adapter.Enabled = true;
      }
      else
        this.Display("GetSCaste returned no Adapters");
    }

    private void CancelAdapter()
    {
      this.HideAspect();
      this.UI_TB_ChangeCounterAdapter.Text = "Change Counter";
      this.UI_TB_ChangeCounterAdapter.Enabled = false;
      if (this.IAdapterRT == null)
        return;
      try
      {
        ((ICCAA) this.IAdapterRT).ValueChanges -= this.AdapterRT_C;
      }
      catch
      {
      }
      this.IAdapterRT = (IAdapter) null;
    }

    private void HideAdapter()
    {
      this.CancelAdapter();
      this.UI_GB_AdapterInfo.Enabled = false;
      this.UI_CB_Adapter.Items.Clear();
    }

    private void ShowAdapter()
    {
      if (this.IAdapterRT == null)
        return;
      this.UI_TB_ChangeCounterAdapter.Text = (((ICCAAFP) this.IAdapterRT).UnApplied() ? "Dirty: " : "Clean: ") + ((SCCAA) this.sAdapter).ChangeCount.ToString();
      this.UI_TB_ChangeCounterAdapter.Enabled = true;
      string[] saspectNames = (this.IAdapterRT as HAdapter).GetSAspectNames();
      int length = saspectNames.Length;
      if (0 < length)
      {
        this.UI_CB_Aspect.BeginUpdate();
        this.UI_CB_Aspect.Items.Clear();
        for (int index = 0; index < length; ++index)
        {
          string str = saspectNames[index];
          if (str != null && str.Length > 0)
            this.UI_CB_Aspect.Items.Add((object) str);
        }
        this.UI_CB_Aspect.EndUpdate();
        if (0 >= this.UI_CB_Aspect.Items.Count)
          return;
        this.UI_CB_Aspect.SelectedIndex = 0;
        this.UI_GB_AspectInfo.Enabled = true;
        this.UI_CB_Aspect.Enabled = true;
      }
      else
        this.Display("GetSAdapter returned no Aspects");
    }

    private void CancelAspect()
    {
      this.HideFeature();
      this.UI_TB_ChangeCounterAspect.Text = "Change Counter";
      this.UI_TB_ChangeCounterAspect.Enabled = false;
      if (this.IAspectRT == null)
        return;
      try
      {
        ((ICCAA) this.IAspectRT).ValueChanges -= this.AspectRT_C;
      }
      catch
      {
      }
      this.IAspectRT = (IAspect) null;
    }

    private void HideAspect()
    {
      this.CancelAspect();
      this.UI_GB_AspectInfo.Enabled = false;
      this.UI_CB_Aspect.Items.Clear();
    }

    private void ShowAspect()
    {
      if (this.IAspectRT == null)
        return;
      this.UI_TB_ChangeCounterAspect.Text = (((ICCAAFP) this.IAspectRT).UnApplied() ? "Dirty: " : "Clean: ") + ((SCCAA) this.sAspect).ChangeCount.ToString();
      this.UI_TB_ChangeCounterAspect.Enabled = true;
      this.sFeatures = ((SCCAA) this.sAspect).Features;
      int length = this.sFeatures.Length;
      if (0 < length)
      {
        this.UI_CB_Feature.BeginUpdate();
        this.UI_CB_Feature.Items.Clear();
        for (int index = 0; index < length; ++index)
        {
          Feature sFeature = this.sFeatures[index];
          this.UI_CB_Feature.Items.Add((object) ((sFeature.UnApplied() ? "Dirty: " : "Clean: ") + ((NamedO) sFeature).InstanceName));
        }
        this.UI_CB_Feature.EndUpdate();
        this.UI_CB_Feature.SelectedIndex = 0;
        this.UI_GB_FeatureInfo.Enabled = true;
        this.UI_CB_Feature.Enabled = true;
      }
      else
        this.Display("Aspect has no Features");
    }

    private void HideFeature()
    {
      this.HideProperty();
      this.UI_GB_FeatureInfo.Enabled = false;
      this.UI_TB_SFeatureActive.Text = "Unknown";
      this.UI_TB_SFeatureActive.Enabled = false;
    }

    private void HideProperty()
    {
      this.UI_TB_SFeatureActive.Enabled = false;
      this.UI_GB_PropertyInfo.Enabled = false;
      this.UI_CB_Property_Immutable.Enabled = false;
      this.UI_CB_Property.Enabled = false;
      this.UI_TB_SPropertyRepeats.Text = "Number times to set";
      this.UI_TB_SPropertyRepeats.Enabled = false;
      this.UI_TB_SetSProperty.Clear();
      this.UI_TB_SetSProperty.Enabled = false;
      this.UI_CB_Property.Items.Clear();
      this.UI_CB_Property_Immutable.Items.Clear();
      this.UI_B_GetSProperty_Immutable.Enabled = false;
      this.UI_B_GetSProperty.Enabled = false;
    }

    private void IComponentDisconnect()
    {
      this.IPMDisconnect();
      this.UI_GB_IPM.Enabled = false;
      this.UI_GB_Language.Enabled = false;
      this.UI_GB_Skin.Enabled = false;
      this.HideComponent();
      if (this.IComponentRT == null)
        return;
      try
      {
        this.IComponentRT.SkinMolting -= this.ComponentRT_S;
        this.IComponentRT.ComponentUpdated -= this.ComponentRT_U;
        this.IComponentRT.ComponentExiting -= this.ComponentRT_E;
        this.IComponentRT.ComponentChanges -= this.ComponentRT_C;
        this.IComponentRT.LanguageChanged -= this.ComponentRT_L;
      }
      catch
      {
      }
      this.IComponentRT = (IComponent) null;
    }

    private void UI_B_RuntimeConnect_Click(object sender, EventArgs e)
    {
      if (this.IComponentRT != null)
      {
        this.IComponentDisconnect();
      }
      else
      {
        IMBRO imbro = Communications.ConnectToObject("Runtime");
        if (imbro != null)
        {
          this.IComponentRT = imbro as IComponent;
          if (this.IComponentRT != null)
          {
            RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\ATI\\ACE");
            if (registryKey != null)
              registryKey = registryKey.OpenSubKey("Runtime", true);
            if (registryKey != null)
            {
              object obj = registryKey.GetValue("ProcessID");
              if (obj != null)
                this.UI_TB_RuntimePID.Text = "PID= " + (object) (int) obj;
            }
            else
              this.UI_TB_RuntimePID.Text = "Missing PID";
            this.UI_B_RuntimeConnect.Text = "Disconnect";
            this.UI_GB_IComponent.Enabled = true;
            this.UI_GB_CasteInfo.Enabled = true;
            this.UI_GB_IPM.Enabled = true;
            this.LanguageStuff();
            this.SkinStuff();
            this.Display("Connected to Runtime");
            this.IComponentRT.ComponentUpdated += this.ComponentRT_U;
            this.IComponentRT.ComponentExiting += this.ComponentRT_E;
            this.IComponentRT.ComponentChanges += this.ComponentRT_C;
            this.IComponentRT.LanguageChanged += this.ComponentRT_L;
            this.IComponentRT.SkinMolting += this.ComponentRT_S;
            this.NotifyeeComponentUpdated((SComponent) null);
          }
          else
            this.Display("Runtime is not an IComponent");
        }
        else
          this.Display("Runtime is not (yet) available - try again.");
      }
    }

    private void LanguageStuff()
    {
      this.LanguageCounter = 0;
      this.LanguageChanges = 0;
      this.currentLanguage = this.IComponentRT.Language;
      this.DisplayLanguage();
      this.UI_CB_Languages.BeginUpdate();
      this.UI_CB_Languages.Items.Clear();
      this.UI_CB_Languages.Items.AddRange((object[]) this.IComponentRT.Languages);
      this.UI_CB_Languages.EndUpdate();
      this.UI_GB_Language.Enabled = true;
    }

    private void SkinStuff()
    {
      this.SkinCounter = 0;
      this.SkinChanges = 0;
      this.currentSkin = this.IComponentRT.Skin;
      this.DisplaySkin();
      this.UI_CB_Skins.BeginUpdate();
      this.UI_CB_Skins.Items.Clear();
      this.UI_CB_Skins.Items.AddRange((object[]) this.IComponentRT.Skins);
      this.UI_CB_Skins.EndUpdate();
      this.UI_GB_Skin.Enabled = true;
    }

    private void UI_CB_Languages_SelectedIndexChanged(object sender, EventArgs e)
    {
      object selectedItem = this.UI_CB_Languages.SelectedItem;
      if (selectedItem == null)
        return;
      if (selectedItem is Tongue tongue)
      {
        this.IComponentRT.Language = tongue;
        if (!(tongue.Code != this.IComponentRT.Language.Code))
          return;
        this.Display("Requested Language not supported");
      }
      else
        this.Display("Languages ComboBox error");
    }

    private void UI_CB_Skins_SelectedIndexChanged(object sender, EventArgs e)
    {
      object selectedItem = this.UI_CB_Skins.SelectedItem;
      if (selectedItem == null)
        return;
      if (selectedItem is Flesh flesh)
      {
        this.IComponentRT.Skin = flesh;
        if (!(flesh.SkinName != this.IComponentRT.Skin.SkinName))
          return;
        this.Display("Requested Skin not supported");
      }
      else
        this.Display("Skins ComboBox error");
    }

    private void UI_B_GetSCaste_Click(object sender, EventArgs e)
    {
      this.CancelCaste();
      try
      {
        this.sCaste = this.IComponentRT.GetSCaste(this.UI_CB_Caste.Text);
      }
      catch (Exception ex)
      {
        this.Display("GetSCaste failed : " + ex.Message);
      }
      if (this.sCaste != null)
      {
        this.UI_TB_ChangeCounterCaste.Enabled = true;
        this.Display("GetSCaste returned SCaste[" + ((NamedO) this.sCaste).InstanceName + "]");
        this.ICasteRT = this.sCaste.ICaste;
        this.ShowCaste();
        ((ICCAA) this.ICasteRT).ValueChanges += this.CasteRT_C;
      }
      else
        this.Display("GetSCaste returned NULL");
    }

    private void UI_B_GetSAdapter_Click(object sender, EventArgs e)
    {
      this.CancelAdapter();
      try
      {
        this.sAdapter = this.ICasteRT.GetSAdapter(this.UI_CB_Adapter.SelectedIndex);
      }
      catch (Exception ex)
      {
        this.Display("GetSAdapter failed : " + ex.Message);
      }
      if (this.sAdapter != null)
      {
        this.UI_TB_ChangeCounterAdapter.Enabled = true;
        this.UI_GB_AspectInfo.Text = "Aspect Info for " + ((NamedO) this.sAdapter).InstanceName;
        this.Display("GetSAdapter returned SAdapter[" + ((NamedO) this.sAdapter).InstanceName + "]");
        this.IAdapterRT = this.sAdapter.IAdapter;
        this.ShowAdapter();
        ((ICCAA) this.IAdapterRT).ValueChanges += this.AdapterRT_C;
      }
      else
        this.Display("GetSAdapter returned NULL");
    }

    private void UI_B_GetSAspect_Click(object sender, EventArgs e)
    {
      this.CancelAspect();
      try
      {
        this.sAspect = this.IAdapterRT.GetSAspect(this.UI_CB_Aspect.Text);
      }
      catch (Exception ex)
      {
        this.Display("GetSAspect failed: " + ex.Message);
      }
      if (this.sAspect != null)
      {
        this.UI_TB_ChangeCounterAspect.Enabled = true;
        this.Display("GetSAspect returned SAspect[" + ((NamedO) this.sAspect).InstanceName + "]");
        this.IAspectRT = this.sAspect.IAspect;
        this.ShowAspect();
        ((ICCAA) this.IAspectRT).ValueChanges += this.AspectRT_C;
      }
      else
        this.Display("GetSAspect returned NULL");
    }

    private void UI_B_GetSFeature_Click(object sender, EventArgs e)
    {
      this.HideProperty();
      int selectedIndex = this.UI_CB_Feature.SelectedIndex;
      try
      {
        Feature sFeature = this.sFeatures[selectedIndex];
        this.sWriteable = sFeature.Writeables;
        this.sImmutable = sFeature.Immutables;
        if (sFeature.VisibleToAnyone)
          this.UI_TB_SFeatureActive.Text = "VisibleToAnyone";
        else
          this.UI_TB_SFeatureActive.Text = "Not Available";
        this.UI_TB_SFeatureActive.Enabled = true;
      }
      catch (Exception ex)
      {
        this.Display("GetSFeature failed : " + ex.Message);
      }
      if (this.sWriteable == null || this.sImmutable == null)
      {
        this.Display("GetSFeature detected invalid set of Properties (null)");
      }
      else
      {
        this.Display("GetSFeature returned SFeature[" + ((NamedO) this.sFeatures[selectedIndex]).InstanceName + "]");
        if (0 < this.sImmutable.Length)
        {
          for (int index = 0; index < this.sImmutable.Length; ++index)
            this.UI_CB_Property_Immutable.Items.Add((object) ("Fixed: " + ((INamed) this.sImmutable[index]).InstanceName));
          this.UI_CB_Property_Immutable.Enabled = true;
          this.UI_B_GetSProperty_Immutable.Enabled = true;
        }
        else
          this.Display("Feature has no Immutable Properties");
        if (0 < this.sWriteable.Length)
        {
          for (int index = 0; index < this.sWriteable.Length; ++index)
          {
            IWriteable iwriteable = this.sWriteable[index];
            this.UI_CB_Property.Items.Add((object) ((iwriteable.UnApplied() ? "Dirty: " : "Clean: ") + ((INamed) iwriteable).InstanceName));
          }
          this.UI_CB_Property.Enabled = true;
          this.UI_CB_Property.SelectedIndex = 0;
          this.UI_GB_PropertyInfo.Enabled = true;
          this.UI_B_SetSProperty.Enabled = false;
          this.UI_B_SetSPropertyRepeat.Enabled = false;
          this.UI_TB_SetSProperty.Enabled = false;
          this.UI_TB_SPropertyRepeats.Enabled = false;
          this.UI_B_GetSProperty.Enabled = true;
        }
        else
          this.Display("Feature has no Writeable Properties");
      }
    }

    private void UI_B_GetSProperty_Immutable_Click(object sender, EventArgs e)
    {
      try
      {
        IImmutable iimmutable = this.sImmutable[this.UI_CB_Property_Immutable.SelectedIndex];
        this.Display("Get Immutable [" + ((INamed) iimmutable).InstanceName + "] = [" + iimmutable.GetCurrentValue() + "]");
      }
      catch (Exception ex)
      {
        this.Display("GetSProperty_Immutable failed: " + ex.Message);
      }
    }

    private void UI_B_GetSProperty_Click(object sender, EventArgs e)
    {
      try
      {
        IWriteable iwriteable = this.sWriteable[this.UI_CB_Property.SelectedIndex];
        this.Display("Get Writable [" + ((INamed) iwriteable).InstanceName + "] = [" + ((IImmutable) iwriteable).GetCurrentValue() + "]");
      }
      catch (Exception ex)
      {
        this.Display("GetSProperty failed: " + ex.Message);
      }
      this.UI_TB_SPropertyRepeats.Clear();
      this.UI_TB_SetSProperty.Clear();
      this.UI_TB_SetSProperty.Enabled = true;
      this.UI_TB_SPropertyRepeats.Enabled = true;
    }

    private void UI_B_SetSProperty_Click(object sender, EventArgs e)
    {
      try
      {
        IWriteable iwriteable = this.sWriteable[this.UI_CB_Property.SelectedIndex];
        string text = this.UI_TB_SetSProperty.Text;
        this.Display("Set Property [" + ((INamed) iwriteable).InstanceName + "] = [" + text + "]");
        iwriteable.SetRequestedValue(text);
        ((ICCAA) this.sAspect.IAspect).Put((SCCAA) this.sAspect);
      }
      catch (Exception ex)
      {
        this.Display("SetSProperty failed: " + ex.Message);
      }
    }

    private void UI_B_SetSPropertyRepeat_Click(object sender, EventArgs e)
    {
      IWriteable iwriteable = this.sWriteable[this.UI_CB_Property.SelectedIndex];
      string text = this.UI_TB_SetSProperty.Text;
      string currentValue = ((IImmutable) iwriteable).GetCurrentValue();
      try
      {
        string str = "Every half second, repeat SetProperty [" + ((INamed) iwriteable).InstanceName + "] with [" + text + "] and [" + currentValue + "] for " + (object) this.SetPropertyRepeats + " times each: Count ";
        for (int index = 0; index < this.SetPropertyRepeats; ++index)
        {
          this.Display(str + (object) index);
          this.Refresh();
          iwriteable.SetRequestedValue(text);
          Thread.Sleep(500);
          iwriteable.SetRequestedValue(currentValue);
          Thread.Sleep(500);
        }
        this.Display("Done " + (object) this.SetPropertyRepeats + " times");
      }
      catch (Exception ex)
      {
        this.Display("SetSProperty failed: " + ex.Message);
      }
    }

    private void UI_CB_Caste_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.CancelCaste();
      this.ShowCaste();
    }

    private void UI_CB_Adapter_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.CancelAdapter();
      this.ShowAdapter();
    }

    private void UI_CB_Aspect_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.CancelAspect();
      this.ShowAspect();
    }

    private void UI_CB_Feature_SelectedIndexChanged(object sender, EventArgs e) => this.HideProperty();

    private void UI_TB_SetSProperty_KeyUp(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      if (this.UI_TB_SetSProperty.Text != null && 0 < this.UI_TB_SetSProperty.Text.Length)
      {
        this.Display("Will use this to Set SProperty: " + this.UI_TB_SetSProperty.Text);
        this.UI_B_SetSProperty.Enabled = true;
        if (0 >= this.SetPropertyRepeats)
          return;
        this.UI_B_SetSPropertyRepeat.Enabled = true;
      }
      else
      {
        this.UI_B_SetSProperty.Enabled = false;
        this.UI_B_SetSPropertyRepeat.Enabled = false;
      }
    }

    private void UI_TB_SPropertyRepeats_KeyUp(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      if (this.UI_TB_SPropertyRepeats.Text != null)
      {
        if (0 < this.UI_TB_SPropertyRepeats.Text.Length)
        {
          try
          {
            this.SetPropertyRepeats = int.Parse(this.UI_TB_SPropertyRepeats.Text);
            if (0 < this.SetPropertyRepeats)
            {
              this.Display("Repeat count of " + (object) this.SetPropertyRepeats);
              if (this.UI_TB_SetSProperty.Text.Length <= 0)
                return;
              this.UI_B_SetSPropertyRepeat.Enabled = true;
              return;
            }
            this.SetPropertyRepeats = 0;
            this.UI_TB_SPropertyRepeats.Clear();
            this.UI_B_SetSPropertyRepeat.Enabled = false;
            return;
          }
          catch
          {
            this.SetPropertyRepeats = 0;
            this.UI_TB_SPropertyRepeats.Clear();
            this.UI_B_SetSPropertyRepeat.Enabled = false;
            return;
          }
        }
      }
      this.SetPropertyRepeats = 0;
      this.UI_TB_SPropertyRepeats.Clear();
      this.UI_B_SetSPropertyRepeat.Enabled = false;
    }

    private void UI_B_IComponentApply_Click(object sender, EventArgs e)
    {
      IComponent icomponentRt = this.IComponentRT;
      this.Display("Calling Apply");
      try
      {
        icomponentRt.Apply((ApplyType) 0);
      }
      catch (Exception ex)
      {
        this.Display("Apply failed: " + ex.Message);
        this.IComponentDisconnect();
      }
    }

    private void UI_B_IComponentCancel_Click(object sender, EventArgs e)
    {
      IComponent icomponentRt = this.IComponentRT;
      this.Display("Calling Cancel");
      try
      {
        icomponentRt.Cancel();
      }
      catch (Exception ex)
      {
        this.Display("Cancel failed: " + ex.Message);
        this.IComponentDisconnect();
      }
    }

    private void UI_B_IComponentRefresh_Click(object sender, EventArgs e)
    {
      IComponent icomponentRt = this.IComponentRT;
      this.Display("Calling Refresh");
      try
      {
        icomponentRt.Refresh();
      }
      catch (Exception ex)
      {
        this.Display("Refresh failed: " + ex.Message);
        this.IComponentDisconnect();
      }
    }

    private void UI_B_IComponentFactory_Click(object sender, EventArgs e)
    {
      IComponent icomponentRt = this.IComponentRT;
      this.Display("Calling Factory");
      try
      {
        icomponentRt.Factory();
      }
      catch (Exception ex)
      {
        this.Display("Factory failed: " + ex.Message);
        this.IComponentDisconnect();
      }
    }

    private void UI_B_LanguageReset_Click(object sender, EventArgs e)
    {
      IComponent icomponentRt = this.IComponentRT;
      this.Display("Resetting Language");
      try
      {
        icomponentRt.Language = (Tongue) null;
      }
      catch (Exception ex)
      {
        this.Display("Reset Language failed: " + ex.Message);
        this.IComponentDisconnect();
      }
    }

    private void logger_LogUpdate(LogEventArgs e)
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) this.logUpdateEventHandler, (object) e);
      }
      else
      {
        lock (this.UI_LV_LogInfo)
          this.AddMessage(e.Message);
      }
    }

    private void AddMessage(SLog message)
    {
      if (this.logMessages.Count > 10000)
      {
        this.logMessages.RemoveRange(0, 500);
        this.UpdateListViewTable(this.DomainNameFilter, this.AssemblyNameFilter, this.NamespaceFilter, this.MessageTextFilter);
      }
      this.logMessages.Add((object) message);
      this.logger.SaveLogMessage(((object) message).ToString());
      if (!this.UI_CB_AppDomain.Items.Contains((object) message.DomainName))
        this.UI_CB_AppDomain.Items.Add((object) message.DomainName);
      if (!this.UI_CB_AssemblyName.Items.Contains((object) message.AssemblyName))
        this.UI_CB_AssemblyName.Items.Add((object) message.AssemblyName);
      if (!this.MatchesCurrentFilter(message) || this.loggingPaused)
        return;
      lock (this.UI_LV_LogInfo)
      {
        this.UI_LV_LogInfo.BeginUpdate();
        this.AddLogToListView(message);
        this.MakeVisible();
        this.UI_LV_LogInfo.EndUpdate();
      }
    }

    private bool MatchesCurrentFilter(SLog message) => this.logger.MatchesFilter(message, this.DomainNameFilter, this.AssemblyNameFilter, this.NamespaceFilter, this.MessageTextFilter);

    private void UpdateListViewTable(
      string domainName,
      string assemblyName,
      string namespc,
      string messageText)
    {
      lock (this.UI_LV_LogInfo)
      {
        if (this.logMessages.Count == 0)
          return;
        this.UI_LV_LogInfo.BeginUpdate();
        this.UI_LV_LogInfo.Items.Clear();
        foreach (SLog logMessage in this.logMessages)
        {
          if (this.logger.MatchesFilter(logMessage, domainName, assemblyName, namespc, messageText))
            this.AddLogToListView(logMessage);
        }
        this.MakeVisible();
        this.UI_LV_LogInfo.EndUpdate();
      }
    }

    private void AddLogToListView(SLog message)
    {
      ListViewItem listViewItem = new ListViewItem(message.LogTime.ToString(), 0);
      listViewItem.SubItems.Add(message.Message);
      listViewItem.SubItems.Add(message.MethodName);
      listViewItem.SubItems.Add(message.ClassName);
      listViewItem.SubItems.Add(message.DomainName);
      listViewItem.SubItems.Add(message.AssemblyName);
      listViewItem.SubItems.Add(((object) message.MessageType).ToString());
      listViewItem.SubItems.Add(message.ProcessID.ToString());
      listViewItem.SubItems.Add(message.ThreadName);
      listViewItem.Tag = (object) message;
      switch ((int) message.MessageType)
      {
        case 0:
          listViewItem.ForeColor = System.Drawing.Color.Purple;
          break;
        case 1:
          listViewItem.ForeColor = System.Drawing.Color.Red;
          break;
        case 2:
          listViewItem.ForeColor = System.Drawing.Color.Green;
          break;
        default:
          listViewItem.ForeColor = System.Drawing.Color.Black;
          break;
      }
      this.UI_LV_LogInfo.Items.Add(listViewItem);
    }

    private void MakeVisible()
    {
      if (!this.UI_CM_AutoScroll.Checked || 0 >= this.UI_LV_LogInfo.Items.Count)
        return;
      this.UI_LV_LogInfo.EnsureVisible(this.UI_LV_LogInfo.Items.Count - 1);
    }

    private void UI_B_PauseLogging_Click(object sender, EventArgs e)
    {
      this.loggingPaused = !this.loggingPaused;
      this.UI_B_PauseLogging.Text = this.loggingPaused ? "Resume" : "Pause";
      if (this.loggingPaused)
        return;
      this.UpdateListViewTable(this.DomainNameFilter, this.AssemblyNameFilter, this.NamespaceFilter, this.MessageTextFilter);
    }

    private void UI_B_SaveTable_Click(object sender, EventArgs e)
    {
      this.loggingPaused = true;
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "txt files (*.txt)|*.txt";
      int num = (int) saveFileDialog.ShowDialog();
      string fileName = saveFileDialog.FileName;
      if (fileName == null)
        return;
      if (fileName.Equals(string.Empty))
        return;
      try
      {
        StreamWriter streamWriter = new StreamWriter(fileName);
        lock (this.UI_LV_LogInfo)
        {
          foreach (ListViewItem listViewItem in this.UI_LV_LogInfo.Items)
            streamWriter.WriteLine(listViewItem.Tag.ToString());
        }
        streamWriter.Close();
        Process.Start("notepad.exe", fileName);
      }
      finally
      {
        this.loggingPaused = false;
        this.UpdateListViewTable(this.DomainNameFilter, this.AssemblyNameFilter, this.NamespaceFilter, this.MessageTextFilter);
      }
    }

    private void UI_B_ClearAllLogMessages_Click(object sender, EventArgs e)
    {
      try
      {
        bool flag = !this.UI_B_LogMessagesConfirmClear.Checked;
        if (!flag)
          flag = MessageBox.Show("All the log messages that have been received so far will be deleted, continue?", "Log Manager", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes;
        if (!flag)
          return;
        this.loggingPaused = false;
        this.UI_B_PauseLogging.Text = "Pause";
        this.UpdateListViewTable(this.DomainNameFilter, this.AssemblyNameFilter, this.NamespaceFilter, this.MessageTextFilter);
        lock (this.UI_LV_LogInfo)
        {
          this.UI_LV_LogInfo.BeginUpdate();
          this.UI_LV_LogInfo.Items.Clear();
          this.UI_LV_LogInfo.EndUpdate();
        }
        this.logMessages.Clear();
        this.loggingPaused = false;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void UI_CB_AssemblyName_SelectionChangeCommitted(object sender, EventArgs e) => this.UpdateListViewTable(this.DomainNameFilter, this.AssemblyNameFilter, this.NamespaceFilter, this.MessageTextFilter);

    private void UI_TB_NamespaceClass_KeyUp(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.UpdateListViewTable(this.DomainNameFilter, this.AssemblyNameFilter, this.NamespaceFilter, this.MessageTextFilter);
      if (this.UI_TB_NamespaceClass.Text.Length != 0)
        return;
      this.UI_TB_NamespaceClass.Text = "<Search by part of namespace+class name>";
    }

    private void UI_TB_Message_KeyUp(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.UpdateListViewTable(this.DomainNameFilter, this.AssemblyNameFilter, this.NamespaceFilter, this.MessageTextFilter);
      if (this.UI_TB_Message.Text.Length != 0)
        return;
      this.UI_TB_Message.Text = "<Search by part of message text>";
    }

    private void UI_CM_AutoScroll_CheckedChanged(object sender, EventArgs e)
    {
      if (!(sender is CheckBox))
        return;
      lock (this.UI_LV_LogInfo)
      {
        if (!this.UI_CM_AutoScroll.Checked || 0 >= this.UI_LV_LogInfo.Items.Count)
          return;
        this.UI_LV_LogInfo.EnsureVisible(this.UI_LV_LogInfo.Items.Count - 1);
      }
    }

    private void UI_LV_LogInfo_SelectedIndexChanged(object sender, EventArgs e)
    {
      string str1 = "";
      string str2 = "";
      string str3 = "";
      string str4 = "";
      lock (this.UI_LV_LogInfo)
      {
        if (0 < this.UI_LV_LogInfo.SelectedItems.Count)
        {
          ListViewItem selectedItem = this.UI_LV_LogInfo.SelectedItems[0];
          str1 = selectedItem.SubItems[5].Text;
          str2 = selectedItem.SubItems[4].Text;
          str3 = selectedItem.SubItems[3].Text;
          str4 = selectedItem.SubItems[2].Text;
        }
      }
      this.UI_TB_AssemblyCurrent.Text = str1;
      this.UI_TB_AppDomainCurrent.Text = str2;
      this.UI_TB_ClassCurrent.Text = str3;
      this.UI_TB_MethodName.Text = str4;
    }

    private void UI_B_CopyMessage_Click(object sender, EventArgs e)
    {
      lock (this.UI_LV_LogInfo)
      {
        int count = this.UI_LV_LogInfo.SelectedItems.Count;
        if (0 >= count)
          return;
        bool flag = false;
        StringBuilder stringBuilder = new StringBuilder(4096);
        for (int index = 0; index < count; ++index)
        {
          string str = this.UI_LV_LogInfo.SelectedItems[index].Tag.ToString();
          if (flag)
            stringBuilder.Append("\r\n");
          stringBuilder.Append(str);
          flag = true;
        }
        Clipboard.SetDataObject((object) stringBuilder.ToString(), true);
      }
    }

    private void logger_AppDomainRegister(IServices s)
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) this.appDomainRegisterHandler, (object) s);
      }
      else
      {
        this.UI_LB_AppDomains.Items.Add((object) new ServicesWrapper(s));
        if (0 > this.UI_LB_AppDomains.SelectedIndex)
          this.UI_LB_AppDomains.SelectedIndex = 0;
        this.UI_GB_AppDomains.Enabled = true;
        this.UI_LB_AppDomains_SelectedIndexChanged((object) null, (EventArgs) null);
      }
    }

    private void logger_AppDomainUnregister(string s)
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) this.appDomainUnregisterHandler, (object) s);
      }
      else
      {
        foreach (object obj in this.UI_LB_AppDomains.Items)
        {
          if (obj != null && obj is ServicesWrapper sW && s == sW.sn)
          {
            this.RemoveServices(sW);
            break;
          }
        }
      }
    }

    private IServices GetServices()
    {
      if (this.UI_LB_AppDomains.SelectedItem is ServicesWrapper selectedItem)
      {
        try
        {
          IServices s = selectedItem.s;
          if (s == null)
            this.RemoveServices(selectedItem);
          return s;
        }
        catch
        {
          this.RemoveServices(selectedItem);
        }
      }
      return (IServices) null;
    }

    private void RemoveServices(ServicesWrapper sW)
    {
      this.Display(sW.sn + " is no longer reachable - removing");
      this.UI_LB_AppDomains.Items.Remove((object) sW);
      if (0 < this.UI_LB_AppDomains.Items.Count)
        this.UI_LB_AppDomains.SelectedIndex = 0;
      else
        this.UI_GB_AppDomains.Enabled = false;
      this.UI_LB_AppDomains_SelectedIndexChanged((object) null, (EventArgs) null);
    }

    private void DoAppDomainList(string[] list)
    {
      Array.Sort<string>(list);
      this.UI_B_CopyAppDomains.Enabled = false;
      this.UI_LB_AppDomainItems.BeginUpdate();
      this.UI_LB_AppDomainItems.Items.Clear();
      int length = list.Length;
      bool flag = false;
      if (0 < length)
      {
        for (int index = 0; index < length; ++index)
        {
          if (list[index] != null)
          {
            this.UI_LB_AppDomainItems.Items.Add((object) list[index]);
            flag = true;
          }
        }
        if (flag)
          this.UI_B_CopyAppDomains.Enabled = true;
      }
      this.UI_LB_AppDomainItems.EndUpdate();
    }

    private void UI_LB_AppDomains_SelectedIndexChanged(object sender, EventArgs e)
    {
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = false;
      this.UI_LB_AppDomainItems.Items.Clear();
      this.UI_B_CopyAppDomains.Enabled = false;
      IServices services = this.GetServices();
      if (services != null)
      {
        try
        {
          flag1 = services.Errors;
          flag2 = services.Exceptions;
          flag3 = services.Locally;
        }
        catch
        {
          this.RemoveServices(this.UI_LB_AppDomains.SelectedItem as ServicesWrapper);
        }
      }
      this.UI_CM_DebugMessages.Checked = false;
      this.UI_CM_ErrorMessages.Checked = flag1;
      this.UI_CM_ExceptionMessages.Checked = flag2;
      this.UI_CM_AppDomainLogToLOG.Checked = !flag3;
      this.UI_GB_AppDomains.Refresh();
    }

    private void UI_CM_DebugMessages_CheckedChanged(object sender, EventArgs e) => this.GetServices();

    private void UI_CM_ErrorMessages_CheckedChanged(object sender, EventArgs e)
    {
      IServices services = this.GetServices();
      if (services == null)
        return;
      services.Errors = this.UI_CM_ErrorMessages.Checked;
    }

    private void UI_CM_ExceptionMessages_CheckedChanged(object sender, EventArgs e)
    {
      IServices services = this.GetServices();
      if (services == null)
        return;
      services.Exceptions = this.UI_CM_ExceptionMessages.Checked;
    }

    private void UI_CM_AppDomainLogToLOG_CheckedChanged(object sender, EventArgs e)
    {
      IServices services = this.GetServices();
      if (services == null)
        return;
      services.Locally = !this.UI_CM_AppDomainLogToLOG.Checked;
    }

    private void UI_B_GetAppDomainAssemblies_Click(object sender, EventArgs e)
    {
      IServices services = this.GetServices();
      if (services == null)
        return;
      string[] assemblies = services.GetAssemblies();
      if (assemblies != null && 0 < assemblies.Length)
        this.DoAppDomainList(assemblies);
      else
        this.Display("Odd... No assemblies are loaded in the AppDomain.");
    }

    private void UI_B_GetPublished_Click(object sender, EventArgs e)
    {
      IServices services = this.GetServices();
      if (services == null)
        return;
      string[] publishedObjects = services.GetPublishedObjects();
      if (publishedObjects != null && 0 < publishedObjects.Length)
        this.DoAppDomainList(publishedObjects);
      else
        this.Display("No published objects in this particular AppDomain.");
    }

    private void UI_B_CopyAppDomains_Click(object sender, EventArgs e)
    {
      int count = this.UI_LB_AppDomainItems.Items.Count;
      if (0 >= count)
        return;
      string data = this.UI_LB_AppDomains.SelectedItem.ToString();
      for (int index = 0; index < count; ++index)
        data = data + "\r\n\t" + this.UI_LB_AppDomainItems.Items[index];
      Clipboard.SetDataObject((object) data, true);
    }

    private void UI_B_Delete_ACE_LogFile_Click(object sender, EventArgs e)
    {
      this.AddMessage(new SLog((MessageType) 2, "Test Debug Message", 0));
      this.AddMessage(new SLog((MessageType) 1, "Test Error Message", 0));
      this.AddMessage(new SLog((MessageType) 0, "Test Exception Message", 0));
    }

    private void UI_B_Open_Windows_EventLog_Click(object sender, EventArgs e) => Process.Start(Environment.SystemDirectory + "\\eventvwr.msc");

    private void UI_B_Clear_Windows_EventLog_Click(object sender, EventArgs e) => this.logger.ClearWndsEvtLog();

    private void UI_B_Open_ACE_LogFile_Click(object sender, EventArgs e)
    {
      try
      {
        Process.Start(Environment.SystemDirectory.ToString() + "\\notepad.exe", this.logger.FullPathFileName);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void UI_B_IPM_Connect_Click(object sender, EventArgs e)
    {
      if (this.iPM != null)
      {
        this.IPMDisconnect();
      }
      else
      {
        IMBRO imbro = Communications.ConnectToObject("ProfileManager");
        if (imbro != null)
        {
          this.iPM = imbro as IProfileManager;
          if (this.iPM != null)
          {
            RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\ATI\\ACE");
            if (registryKey != null)
              registryKey = registryKey.OpenSubKey("ProfileManager", true);
            if (registryKey != null)
            {
              object obj = registryKey.GetValue("ProcessID");
              if (obj != null)
                this.UI_TB_IPM_PID.Text = "PID= " + (object) (int) obj;
            }
            else
              this.UI_TB_IPM_PID.Text = "Missing PID";
            this.UI_B_IPM_Connect.Text = "Disconnect";
            this.UI_IPM_GetList_Click((object) null, (EventArgs) null);
            this.UI_GB_Profiles.Enabled = true;
            this.Display("Connected to ProfileManager");
          }
          else
            this.Display("ProfileManager is not an IPM");
        }
        else
          this.Display("ProfileManager is not (yet) available - try again.");
      }
    }

    private void IPMDisconnect()
    {
      this.UI_GB_Profiles.Enabled = false;
      this.UI_LB_Profiles.Items.Clear();
      this.UI_B_IPM_Connect.Text = "Connect";
      this.UI_TB_IPM_PID.Text = "No PID";
      if (this.iPM == null)
        return;
      this.iPM = (IProfileManager) null;
    }

    private void UI_IPM_GetList_Click(object sender, EventArgs e)
    {
      try
      {
        NamedProfileDescriptor[] namedProfiles = this.iPM.GetNamedProfiles();
        if (namedProfiles.Length > 0)
        {
          this.UI_LB_Profiles.BeginUpdate();
          this.UI_LB_Profiles.Items.Clear();
          foreach (object obj in namedProfiles)
            this.UI_LB_Profiles.Items.Add(obj);
        }
        else
          this.Display("Empty list from Profile Manager");
      }
      catch (Exception ex)
      {
        this.Display("GetList Exception: " + ex.Message);
      }
      finally
      {
        this.UI_LB_Profiles.EndUpdate();
      }
    }

    private void UI_B_IPM_Load_Click(object sender, EventArgs e)
    {
      try
      {
        object selectedItem = this.UI_LB_Profiles.SelectedItem;
        if (selectedItem != null)
        {
          if (selectedItem is NamedProfileDescriptor profileDescriptor)
          {
            this.Display("Loading and Applying " + profileDescriptor.Name);
            this.iPM.ApplyNamedProfile(profileDescriptor.Name);
          }
          else
            this.Display("Selected item is not a Profile");
        }
        else
          this.Display("No selected items to Load");
      }
      catch (Exception ex)
      {
        this.Display("UI_B_IPM_Load_Click: " + ex.Message);
      }
    }

    private void InitializeComponent()
    {
      this.UI_B_Open_ACE_LogFile = new Button();
      this.UI_B_Delete_ACE_LogFile = new Button();
      this.UI_B_Open_Windows_EventLog = new Button();
      this.UI_GB_Windows_EventLog = new GroupBox();
      this.UI_B_Clear_Windows_EventLog = new Button();
      this.UI_GB_ACE_LogFile = new GroupBox();
      this.UI_TB_ACE_LogFile = new TextBox();
      this.UI_TAB_MainTab = new TabControl();
      this.UI_TAB_Main_Components = new TabPage();
      this.UI_GB_CCC = new GroupBox();
      this.UI_L_CCC_Args = new Label();
      this.UI_TB_CCC_Args = new TextBox();
      this.UI_B_StopCCC = new Button();
      this.UI_L_PID = new Label();
      this.UI_L_CCC = new Label();
      this.UI_TB_PID = new TextBox();
      this.UI_CB_CCC = new ComboBox();
      this.UI_LB_CCC = new ListBox();
      this.UI_GB_CLI = new GroupBox();
      this.UI_TB_CLI_Args = new TextBox();
      this.UI_L_CLI_Args = new Label();
      this.UI_B_StopCLI = new Button();
      this.UI_CM_LogToLOG = new CheckBox();
      this.UI_CM_CLIDebugging = new CheckBox();
      this.UI_B_StartCLI = new Button();
      this.UI_LB_CLI = new ListBox();
      this.UI_B_DeleteProfile = new Button();
      this.UI_TAB_Main_Messages = new TabPage();
      this.UI_GB_ACE_LogMessages = new GroupBox();
      this.UI_GB_MessageDetails = new GroupBox();
      this.UI_TB_MethodName = new TextBox();
      this.UI_TB_ClassCurrent = new TextBox();
      this.UI_TB_AppDomainCurrent = new TextBox();
      this.UI_TB_AssemblyCurrent = new TextBox();
      this.UI_GB_MessageControl = new GroupBox();
      this.UI_B_LogMessagesConfirmClear = new CheckBox();
      this.UI_B_CopyMessage = new Button();
      this.UI_B_SaveTable = new Button();
      this.UI_CM_AutoScroll = new CheckBox();
      this.UI_B_ClearAllLogMessages = new Button();
      this.UI_B_PauseLogging = new Button();
      this.UI_GB_Filters = new GroupBox();
      this.UI_TB_Message = new TextBox();
      this.UI_TB_NamespaceClass = new TextBox();
      this.UI_CB_AssemblyName = new ComboBox();
      this.UI_CB_AppDomain = new ComboBox();
      this.UI_LV_LogInfo = new ListView();
      this.UI_C_LogMessageTime = new ColumnHeader();
      this.UI_C_LogMessage = new ColumnHeader();
      this.UI_C_MethodName = new ColumnHeader();
      this.UI_C_NamespaceClass = new ColumnHeader();
      this.UI_C_AppDomain = new ColumnHeader();
      this.UI_C_AssemblyName = new ColumnHeader();
      this.UI_C_MessageType = new ColumnHeader();
      this.UI_C_ProcessID = new ColumnHeader();
      this.UI_C_ThreadName = new ColumnHeader();
      this.UI_TAB_Main_Runtime = new TabPage();
      this.UI_GB_Skin = new GroupBox();
      this.label1 = new Label();
      this.UI_L_NumSkinCalls = new Label();
      this.UI_TB_SkinChanges = new TextBox();
      this.UI_TB_SkinCounter = new TextBox();
      this.UI_TB_SkinCurrent = new TextBox();
      this.UI_CB_Skins = new ComboBox();
      this.UI_GB_Language = new GroupBox();
      this.UI_B_LanguageReset = new Button();
      this.UI_TB_LanguageChanges = new TextBox();
      this.UI_TB_LanguageCounter = new TextBox();
      this.UI_TB_LanguageCurrent = new TextBox();
      this.UI_CB_Languages = new ComboBox();
      this.UI_L_NumLanguageCalls = new Label();
      this.UI_L_NumLanguageChanges = new Label();
      this.UI_GB_Runtime = new GroupBox();
      this.UI_B_RuntimeConnect = new Button();
      this.UI_GB_CasteInfo = new GroupBox();
      this.UI_TB_ChangeCounterCaste = new TextBox();
      this.UI_B_GetSCaste = new Button();
      this.UI_CB_Caste = new ComboBox();
      this.UI_GB_AdapterInfo = new GroupBox();
      this.UI_TB_ChangeCounterAdapter = new TextBox();
      this.UI_B_GetSAdapter = new Button();
      this.UI_CB_Adapter = new ComboBox();
      this.UI_GB_FeatureInfo = new GroupBox();
      this.UI_TB_SFeatureActive = new TextBox();
      this.UI_B_GetSFeature = new Button();
      this.UI_CB_Feature = new ComboBox();
      this.UI_GB_AspectInfo = new GroupBox();
      this.UI_B_GetSAspect = new Button();
      this.UI_CB_Aspect = new ComboBox();
      this.UI_TB_ChangeCounterAspect = new TextBox();
      this.UI_GB_PropertyInfo = new GroupBox();
      this.UI_B_GetSProperty_Immutable = new Button();
      this.UI_CB_Property_Immutable = new ComboBox();
      this.UI_B_SetSPropertyRepeat = new Button();
      this.UI_TB_SPropertyRepeats = new TextBox();
      this.UI_TB_SetSProperty = new TextBox();
      this.UI_B_GetSProperty = new Button();
      this.UI_CB_Property = new ComboBox();
      this.UI_B_SetSProperty = new Button();
      this.UI_GB_IComponent = new GroupBox();
      this.UI_TB_UnApplied = new TextBox();
      this.UI_B_IComponentRefresh = new Button();
      this.UI_B_IComponentFactory = new Button();
      this.UI_B_IComponentCancel = new Button();
      this.UI_B_IComponentApply = new Button();
      this.UI_TB_RuntimePID = new TextBox();
      this.UI_TAB_Profiles = new TabPage();
      this.UI_GB_Profiles = new GroupBox();
      this.UI_B_IPM_Load = new Button();
      this.UI_IPM_GetList = new Button();
      this.UI_LB_Profiles = new ListBox();
      this.UI_TB_IPM_PID = new TextBox();
      this.UI_GB_IPM = new GroupBox();
      this.UI_B_IPM_Connect = new Button();
      this.UI_TAB_Main_Domains = new TabPage();
      this.UI_GB_AppDomains = new GroupBox();
      this.UI_GB_LOGMessageControls = new GroupBox();
      this.UI_CM_AppDomainLogToLOG = new CheckBox();
      this.UI_B_GetPublished = new Button();
      this.UI_B_CopyAppDomains = new Button();
      this.UI_B_GetAppDomainAssemblies = new Button();
      this.UI_CM_ExceptionMessages = new CheckBox();
      this.UI_CM_ErrorMessages = new CheckBox();
      this.UI_CM_DebugMessages = new CheckBox();
      this.UI_LB_AppDomains = new ListBox();
      this.UI_LB_AppDomainItems = new ListBox();
      this.UI_TAB_Main_Logfile = new TabPage();
      this.UI_CM_LOG_Status_AutoScroll = new CheckBox();
      this.UI_LB_LOG_Status = new ListBox();
      this.UI_B_Clear_LOG_Status = new Button();
      this.UI_GB_Windows_EventLog.SuspendLayout();
      this.UI_GB_ACE_LogFile.SuspendLayout();
      this.UI_TAB_MainTab.SuspendLayout();
      this.UI_TAB_Main_Components.SuspendLayout();
      this.UI_GB_CCC.SuspendLayout();
      this.UI_GB_CLI.SuspendLayout();
      this.UI_TAB_Main_Messages.SuspendLayout();
      this.UI_GB_ACE_LogMessages.SuspendLayout();
      this.UI_GB_MessageDetails.SuspendLayout();
      this.UI_GB_MessageControl.SuspendLayout();
      this.UI_GB_Filters.SuspendLayout();
      this.UI_TAB_Main_Runtime.SuspendLayout();
      this.UI_GB_Skin.SuspendLayout();
      this.UI_GB_Language.SuspendLayout();
      this.UI_GB_Runtime.SuspendLayout();
      this.UI_GB_CasteInfo.SuspendLayout();
      this.UI_GB_AdapterInfo.SuspendLayout();
      this.UI_GB_FeatureInfo.SuspendLayout();
      this.UI_GB_AspectInfo.SuspendLayout();
      this.UI_GB_PropertyInfo.SuspendLayout();
      this.UI_GB_IComponent.SuspendLayout();
      this.UI_TAB_Profiles.SuspendLayout();
      this.UI_GB_Profiles.SuspendLayout();
      this.UI_GB_IPM.SuspendLayout();
      this.UI_TAB_Main_Domains.SuspendLayout();
      this.UI_GB_AppDomains.SuspendLayout();
      this.UI_GB_LOGMessageControls.SuspendLayout();
      this.UI_TAB_Main_Logfile.SuspendLayout();
      this.SuspendLayout();
      this.UI_B_Open_ACE_LogFile.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_B_Open_ACE_LogFile.Location = new Point(751, 21);
      this.UI_B_Open_ACE_LogFile.Name = "UI_B_Open_ACE_LogFile";
      this.UI_B_Open_ACE_LogFile.Size = new Size(71, 24);
      this.UI_B_Open_ACE_LogFile.TabIndex = 4;
      this.UI_B_Open_ACE_LogFile.Text = "Open";
      this.UI_B_Open_ACE_LogFile.Click += new EventHandler(this.UI_B_Open_ACE_LogFile_Click);
      this.UI_B_Delete_ACE_LogFile.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_B_Delete_ACE_LogFile.Location = new Point(831, 21);
      this.UI_B_Delete_ACE_LogFile.Name = "UI_B_Delete_ACE_LogFile";
      this.UI_B_Delete_ACE_LogFile.Size = new Size(71, 24);
      this.UI_B_Delete_ACE_LogFile.TabIndex = 12;
      this.UI_B_Delete_ACE_LogFile.Text = "Delete";
      this.UI_B_Delete_ACE_LogFile.Click += new EventHandler(this.UI_B_Delete_ACE_LogFile_Click);
      this.UI_B_Open_Windows_EventLog.Location = new Point(8, 16);
      this.UI_B_Open_Windows_EventLog.Name = "UI_B_Open_Windows_EventLog";
      this.UI_B_Open_Windows_EventLog.Size = new Size(72, 24);
      this.UI_B_Open_Windows_EventLog.TabIndex = 14;
      this.UI_B_Open_Windows_EventLog.Text = "Open";
      this.UI_B_Open_Windows_EventLog.Click += new EventHandler(this.UI_B_Open_Windows_EventLog_Click);
      this.UI_GB_Windows_EventLog.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_GB_Windows_EventLog.Controls.Add((Control) this.UI_B_Clear_Windows_EventLog);
      this.UI_GB_Windows_EventLog.Controls.Add((Control) this.UI_B_Open_Windows_EventLog);
      this.UI_GB_Windows_EventLog.Location = new Point(751, 69);
      this.UI_GB_Windows_EventLog.Name = "UI_GB_Windows_EventLog";
      this.UI_GB_Windows_EventLog.Size = new Size(167, 48);
      this.UI_GB_Windows_EventLog.TabIndex = 15;
      this.UI_GB_Windows_EventLog.TabStop = false;
      this.UI_GB_Windows_EventLog.Text = "Windows Event Log";
      this.UI_B_Clear_Windows_EventLog.Location = new Point(88, 16);
      this.UI_B_Clear_Windows_EventLog.Name = "UI_B_Clear_Windows_EventLog";
      this.UI_B_Clear_Windows_EventLog.Size = new Size(72, 24);
      this.UI_B_Clear_Windows_EventLog.TabIndex = 15;
      this.UI_B_Clear_Windows_EventLog.Text = "Clear";
      this.UI_B_Clear_Windows_EventLog.Click += new EventHandler(this.UI_B_Clear_Windows_EventLog_Click);
      this.UI_GB_ACE_LogFile.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_ACE_LogFile.Controls.Add((Control) this.UI_B_Delete_ACE_LogFile);
      this.UI_GB_ACE_LogFile.Controls.Add((Control) this.UI_B_Open_ACE_LogFile);
      this.UI_GB_ACE_LogFile.Controls.Add((Control) this.UI_TB_ACE_LogFile);
      this.UI_GB_ACE_LogFile.Location = new Point(8, 8);
      this.UI_GB_ACE_LogFile.Name = "UI_GB_ACE_LogFile";
      this.UI_GB_ACE_LogFile.Size = new Size(909, 56);
      this.UI_GB_ACE_LogFile.TabIndex = 17;
      this.UI_GB_ACE_LogFile.TabStop = false;
      this.UI_GB_ACE_LogFile.Text = "ACE Log File";
      this.UI_TB_ACE_LogFile.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_TB_ACE_LogFile.Location = new Point(8, 24);
      this.UI_TB_ACE_LogFile.Name = "UI_TB_ACE_LogFile";
      this.UI_TB_ACE_LogFile.ReadOnly = true;
      this.UI_TB_ACE_LogFile.Size = new Size(736, 20);
      this.UI_TB_ACE_LogFile.TabIndex = 14;
      this.UI_TAB_MainTab.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_TAB_MainTab.Controls.Add((Control) this.UI_TAB_Main_Components);
      this.UI_TAB_MainTab.Controls.Add((Control) this.UI_TAB_Main_Messages);
      this.UI_TAB_MainTab.Controls.Add((Control) this.UI_TAB_Main_Runtime);
      this.UI_TAB_MainTab.Controls.Add((Control) this.UI_TAB_Profiles);
      this.UI_TAB_MainTab.Controls.Add((Control) this.UI_TAB_Main_Domains);
      this.UI_TAB_MainTab.Controls.Add((Control) this.UI_TAB_Main_Logfile);
      this.UI_TAB_MainTab.Location = new Point(0, 7);
      this.UI_TAB_MainTab.Name = "UI_TAB_MainTab";
      this.UI_TAB_MainTab.SelectedIndex = 0;
      this.UI_TAB_MainTab.Size = new Size(940, 353);
      this.UI_TAB_MainTab.TabIndex = 18;
      this.UI_TAB_MainTab.SelectedIndexChanged += new EventHandler(this.UI_TAB_MainTab_SelectedIndexChanged);
      this.UI_TAB_Main_Components.Controls.Add((Control) this.UI_GB_CCC);
      this.UI_TAB_Main_Components.Controls.Add((Control) this.UI_GB_CLI);
      this.UI_TAB_Main_Components.Controls.Add((Control) this.UI_B_DeleteProfile);
      this.UI_TAB_Main_Components.Location = new Point(4, 22);
      this.UI_TAB_Main_Components.Name = "UI_TAB_Main_Components";
      this.UI_TAB_Main_Components.Size = new Size(932, 327);
      this.UI_TAB_Main_Components.TabIndex = 3;
      this.UI_TAB_Main_Components.Text = "Components";
      this.UI_TAB_Main_Components.UseVisualStyleBackColor = true;
      this.UI_GB_CCC.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_CCC.Controls.Add((Control) this.UI_L_CCC_Args);
      this.UI_GB_CCC.Controls.Add((Control) this.UI_TB_CCC_Args);
      this.UI_GB_CCC.Controls.Add((Control) this.UI_B_StopCCC);
      this.UI_GB_CCC.Controls.Add((Control) this.UI_L_PID);
      this.UI_GB_CCC.Controls.Add((Control) this.UI_L_CCC);
      this.UI_GB_CCC.Controls.Add((Control) this.UI_TB_PID);
      this.UI_GB_CCC.Controls.Add((Control) this.UI_CB_CCC);
      this.UI_GB_CCC.Controls.Add((Control) this.UI_LB_CCC);
      this.UI_GB_CCC.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.UI_GB_CCC.Location = new Point(413, 8);
      this.UI_GB_CCC.Name = "UI_GB_CCC";
      this.UI_GB_CCC.Size = new Size(371, 232);
      this.UI_GB_CCC.TabIndex = 40;
      this.UI_GB_CCC.TabStop = false;
      this.UI_GB_CCC.Text = "CCC Components";
      this.UI_L_CCC_Args.AutoSize = true;
      this.UI_L_CCC_Args.Location = new Point(37, 202);
      this.UI_L_CCC_Args.Name = "UI_L_CCC_Args";
      this.UI_L_CCC_Args.Size = new Size(57, 13);
      this.UI_L_CCC_Args.TabIndex = 7;
      this.UI_L_CCC_Args.Text = "Arguments";
      this.UI_TB_CCC_Args.Location = new Point(128, 199);
      this.UI_TB_CCC_Args.Name = "UI_TB_CCC_Args";
      this.UI_TB_CCC_Args.Size = new Size(229, 20);
      this.UI_TB_CCC_Args.TabIndex = 6;
      this.UI_B_StopCCC.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.UI_B_StopCCC.Location = new Point(17, 153);
      this.UI_B_StopCCC.Name = "UI_B_StopCCC";
      this.UI_B_StopCCC.Size = new Size(96, 23);
      this.UI_B_StopCCC.TabIndex = 5;
      this.UI_B_StopCCC.Text = "Stop";
      this.UI_B_StopCCC.UseVisualStyleBackColor = true;
      this.UI_L_PID.AutoSize = true;
      this.UI_L_PID.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.UI_L_PID.Location = new Point(17, 90);
      this.UI_L_PID.Name = "UI_L_PID";
      this.UI_L_PID.Size = new Size(59, 13);
      this.UI_L_PID.TabIndex = 4;
      this.UI_L_PID.Text = "Process ID";
      this.UI_L_CCC.AutoSize = true;
      this.UI_L_CCC.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.UI_L_CCC.Location = new Point(17, 26);
      this.UI_L_CCC.Name = "UI_L_CCC";
      this.UI_L_CCC.Size = new Size(28, 13);
      this.UI_L_CCC.TabIndex = 3;
      this.UI_L_CCC.Text = "CCC";
      this.UI_TB_PID.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.UI_TB_PID.Location = new Point(17, 118);
      this.UI_TB_PID.Name = "UI_TB_PID";
      this.UI_TB_PID.ReadOnly = true;
      this.UI_TB_PID.Size = new Size(96, 20);
      this.UI_TB_PID.TabIndex = 2;
      this.UI_CB_CCC.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.UI_CB_CCC.FormattingEnabled = true;
      this.UI_CB_CCC.Location = new Point(17, 54);
      this.UI_CB_CCC.Name = "UI_CB_CCC";
      this.UI_CB_CCC.Size = new Size(96, 21);
      this.UI_CB_CCC.TabIndex = 1;
      this.UI_CB_CCC.SelectedIndexChanged += new EventHandler(this.UI_CB_CCC_SelectedIndexChanged);
      this.UI_LB_CCC.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_LB_CCC.FormattingEnabled = true;
      this.UI_LB_CCC.Location = new Point(128, 19);
      this.UI_LB_CCC.Name = "UI_LB_CCC";
      this.UI_LB_CCC.Size = new Size(229, 160);
      this.UI_LB_CCC.TabIndex = 0;
      this.UI_LB_CCC.SelectedIndexChanged += new EventHandler(this.UI_LB_CCC_SelectedIndexChanged);
      this.UI_GB_CLI.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_CLI.Controls.Add((Control) this.UI_TB_CLI_Args);
      this.UI_GB_CLI.Controls.Add((Control) this.UI_L_CLI_Args);
      this.UI_GB_CLI.Controls.Add((Control) this.UI_B_StopCLI);
      this.UI_GB_CLI.Controls.Add((Control) this.UI_CM_LogToLOG);
      this.UI_GB_CLI.Controls.Add((Control) this.UI_CM_CLIDebugging);
      this.UI_GB_CLI.Controls.Add((Control) this.UI_B_StartCLI);
      this.UI_GB_CLI.Controls.Add((Control) this.UI_LB_CLI);
      this.UI_GB_CLI.Location = new Point(8, 8);
      this.UI_GB_CLI.Name = "UI_GB_CLI";
      this.UI_GB_CLI.Size = new Size(389, 232);
      this.UI_GB_CLI.TabIndex = 0;
      this.UI_GB_CLI.TabStop = false;
      this.UI_GB_CLI.Text = "CLI Components";
      this.UI_TB_CLI_Args.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_TB_CLI_Args.Location = new Point(120, 200);
      this.UI_TB_CLI_Args.Name = "UI_TB_CLI_Args";
      this.UI_TB_CLI_Args.Size = new Size(250, 20);
      this.UI_TB_CLI_Args.TabIndex = 44;
      this.UI_L_CLI_Args.Location = new Point(16, 200);
      this.UI_L_CLI_Args.Name = "UI_L_CLI_Args";
      this.UI_L_CLI_Args.Size = new Size(96, 16);
      this.UI_L_CLI_Args.TabIndex = 43;
      this.UI_L_CLI_Args.Text = "Arguments";
      this.UI_L_CLI_Args.TextAlign = ContentAlignment.MiddleCenter;
      this.UI_B_StopCLI.Location = new Point(16, 48);
      this.UI_B_StopCLI.Name = "UI_B_StopCLI";
      this.UI_B_StopCLI.Size = new Size(88, 23);
      this.UI_B_StopCLI.TabIndex = 42;
      this.UI_B_StopCLI.Text = "Stop";
      this.UI_B_StopCLI.Click += new EventHandler(this.UI_B_StopCLI_Click);
      this.UI_CM_LogToLOG.Checked = true;
      this.UI_CM_LogToLOG.CheckState = CheckState.Checked;
      this.UI_CM_LogToLOG.Location = new Point(16, 144);
      this.UI_CM_LogToLOG.Name = "UI_CM_LogToLOG";
      this.UI_CM_LogToLOG.Size = new Size(88, 24);
      this.UI_CM_LogToLOG.TabIndex = 41;
      this.UI_CM_LogToLOG.Text = "Log to LOG";
      this.UI_CM_CLIDebugging.Checked = true;
      this.UI_CM_CLIDebugging.CheckState = CheckState.Checked;
      this.UI_CM_CLIDebugging.Location = new Point(16, 168);
      this.UI_CM_CLIDebugging.Name = "UI_CM_CLIDebugging";
      this.UI_CM_CLIDebugging.Size = new Size(88, 24);
      this.UI_CM_CLIDebugging.TabIndex = 4;
      this.UI_CM_CLIDebugging.Text = "Debugging";
      this.UI_B_StartCLI.Location = new Point(16, 16);
      this.UI_B_StartCLI.Name = "UI_B_StartCLI";
      this.UI_B_StartCLI.Size = new Size(88, 23);
      this.UI_B_StartCLI.TabIndex = 1;
      this.UI_B_StartCLI.Text = "Start";
      this.UI_B_StartCLI.Click += new EventHandler(this.UI_B_StartCLI_Click);
      this.UI_LB_CLI.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_LB_CLI.Location = new Point(120, 16);
      this.UI_LB_CLI.Name = "UI_LB_CLI";
      this.UI_LB_CLI.Size = new Size(250, 173);
      this.UI_LB_CLI.TabIndex = 0;
      this.UI_LB_CLI.SelectedIndexChanged += new EventHandler(this.UI_LB_CLI_SelectedIndexChanged);
      this.UI_B_DeleteProfile.Location = new Point(16, 256);
      this.UI_B_DeleteProfile.Name = "UI_B_DeleteProfile";
      this.UI_B_DeleteProfile.Size = new Size(88, 23);
      this.UI_B_DeleteProfile.TabIndex = 39;
      this.UI_B_DeleteProfile.Text = "Delete Profiles";
      this.UI_B_DeleteProfile.Click += new EventHandler(this.UI_B_DeleteProfile_Click);
      this.UI_TAB_Main_Messages.Controls.Add((Control) this.UI_GB_ACE_LogMessages);
      this.UI_TAB_Main_Messages.Location = new Point(4, 22);
      this.UI_TAB_Main_Messages.Name = "UI_TAB_Main_Messages";
      this.UI_TAB_Main_Messages.Size = new Size(932, 327);
      this.UI_TAB_Main_Messages.TabIndex = 0;
      this.UI_TAB_Main_Messages.Text = "Messages";
      this.UI_TAB_Main_Messages.UseVisualStyleBackColor = true;
      this.UI_GB_ACE_LogMessages.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_ACE_LogMessages.BackColor = SystemColors.Control;
      this.UI_GB_ACE_LogMessages.Controls.Add((Control) this.UI_GB_MessageDetails);
      this.UI_GB_ACE_LogMessages.Controls.Add((Control) this.UI_GB_MessageControl);
      this.UI_GB_ACE_LogMessages.Controls.Add((Control) this.UI_GB_Filters);
      this.UI_GB_ACE_LogMessages.Controls.Add((Control) this.UI_LV_LogInfo);
      this.UI_GB_ACE_LogMessages.Location = new Point(0, -16);
      this.UI_GB_ACE_LogMessages.Name = "UI_GB_ACE_LogMessages";
      this.UI_GB_ACE_LogMessages.Size = new Size(928, 328);
      this.UI_GB_ACE_LogMessages.TabIndex = 13;
      this.UI_GB_ACE_LogMessages.TabStop = false;
      this.UI_GB_ACE_LogMessages.Text = "Received Log Messages";
      this.UI_GB_MessageDetails.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_GB_MessageDetails.Controls.Add((Control) this.UI_TB_MethodName);
      this.UI_GB_MessageDetails.Controls.Add((Control) this.UI_TB_ClassCurrent);
      this.UI_GB_MessageDetails.Controls.Add((Control) this.UI_TB_AppDomainCurrent);
      this.UI_GB_MessageDetails.Controls.Add((Control) this.UI_TB_AssemblyCurrent);
      this.UI_GB_MessageDetails.Location = new Point(312, 176);
      this.UI_GB_MessageDetails.Name = "UI_GB_MessageDetails";
      this.UI_GB_MessageDetails.Size = new Size(408, 152);
      this.UI_GB_MessageDetails.TabIndex = 23;
      this.UI_GB_MessageDetails.TabStop = false;
      this.UI_GB_MessageDetails.Text = "Details";
      this.UI_TB_MethodName.Location = new Point(8, 112);
      this.UI_TB_MethodName.Name = "UI_TB_MethodName";
      this.UI_TB_MethodName.ReadOnly = true;
      this.UI_TB_MethodName.Size = new Size(392, 20);
      this.UI_TB_MethodName.TabIndex = 3;
      this.UI_TB_ClassCurrent.Location = new Point(8, 80);
      this.UI_TB_ClassCurrent.Name = "UI_TB_ClassCurrent";
      this.UI_TB_ClassCurrent.ReadOnly = true;
      this.UI_TB_ClassCurrent.Size = new Size(392, 20);
      this.UI_TB_ClassCurrent.TabIndex = 2;
      this.UI_TB_AppDomainCurrent.Location = new Point(8, 48);
      this.UI_TB_AppDomainCurrent.Name = "UI_TB_AppDomainCurrent";
      this.UI_TB_AppDomainCurrent.ReadOnly = true;
      this.UI_TB_AppDomainCurrent.Size = new Size(392, 20);
      this.UI_TB_AppDomainCurrent.TabIndex = 1;
      this.UI_TB_AssemblyCurrent.Location = new Point(8, 16);
      this.UI_TB_AssemblyCurrent.Name = "UI_TB_AssemblyCurrent";
      this.UI_TB_AssemblyCurrent.ReadOnly = true;
      this.UI_TB_AssemblyCurrent.Size = new Size(392, 20);
      this.UI_TB_AssemblyCurrent.TabIndex = 0;
      this.UI_GB_MessageControl.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_GB_MessageControl.Controls.Add((Control) this.UI_B_LogMessagesConfirmClear);
      this.UI_GB_MessageControl.Controls.Add((Control) this.UI_B_CopyMessage);
      this.UI_GB_MessageControl.Controls.Add((Control) this.UI_B_SaveTable);
      this.UI_GB_MessageControl.Controls.Add((Control) this.UI_CM_AutoScroll);
      this.UI_GB_MessageControl.Controls.Add((Control) this.UI_B_ClearAllLogMessages);
      this.UI_GB_MessageControl.Controls.Add((Control) this.UI_B_PauseLogging);
      this.UI_GB_MessageControl.Location = new Point(720, 176);
      this.UI_GB_MessageControl.Name = "UI_GB_MessageControl";
      this.UI_GB_MessageControl.Size = new Size(200, 112);
      this.UI_GB_MessageControl.TabIndex = 22;
      this.UI_GB_MessageControl.TabStop = false;
      this.UI_GB_MessageControl.Text = "Controls";
      this.UI_B_LogMessagesConfirmClear.Location = new Point(8, 80);
      this.UI_B_LogMessagesConfirmClear.Name = "UI_B_LogMessagesConfirmClear";
      this.UI_B_LogMessagesConfirmClear.Size = new Size(96, 24);
      this.UI_B_LogMessagesConfirmClear.TabIndex = 29;
      this.UI_B_LogMessagesConfirmClear.Text = "Confirm Clear";
      this.UI_B_CopyMessage.Location = new Point(8, 48);
      this.UI_B_CopyMessage.Name = "UI_B_CopyMessage";
      this.UI_B_CopyMessage.Size = new Size(88, 23);
      this.UI_B_CopyMessage.TabIndex = 28;
      this.UI_B_CopyMessage.Text = "Copy Selected";
      this.UI_B_CopyMessage.Click += new EventHandler(this.UI_B_CopyMessage_Click);
      this.UI_B_SaveTable.Location = new Point(112, 48);
      this.UI_B_SaveTable.Name = "UI_B_SaveTable";
      this.UI_B_SaveTable.Size = new Size(64, 24);
      this.UI_B_SaveTable.TabIndex = 22;
      this.UI_B_SaveTable.Text = "Save";
      this.UI_B_SaveTable.Click += new EventHandler(this.UI_B_SaveTable_Click);
      this.UI_CM_AutoScroll.Checked = true;
      this.UI_CM_AutoScroll.CheckState = CheckState.Checked;
      this.UI_CM_AutoScroll.Location = new Point(8, 16);
      this.UI_CM_AutoScroll.Name = "UI_CM_AutoScroll";
      this.UI_CM_AutoScroll.Size = new Size(96, 24);
      this.UI_CM_AutoScroll.TabIndex = 27;
      this.UI_CM_AutoScroll.Text = "Auto-Scroll";
      this.UI_CM_AutoScroll.CheckedChanged += new EventHandler(this.UI_CM_AutoScroll_CheckedChanged);
      this.UI_B_ClearAllLogMessages.Location = new Point(112, 80);
      this.UI_B_ClearAllLogMessages.Name = "UI_B_ClearAllLogMessages";
      this.UI_B_ClearAllLogMessages.Size = new Size(64, 24);
      this.UI_B_ClearAllLogMessages.TabIndex = 2;
      this.UI_B_ClearAllLogMessages.Text = "Clear";
      this.UI_B_ClearAllLogMessages.Click += new EventHandler(this.UI_B_ClearAllLogMessages_Click);
      this.UI_B_PauseLogging.Location = new Point(112, 16);
      this.UI_B_PauseLogging.Name = "UI_B_PauseLogging";
      this.UI_B_PauseLogging.Size = new Size(64, 24);
      this.UI_B_PauseLogging.TabIndex = 25;
      this.UI_B_PauseLogging.Text = "Pause";
      this.UI_B_PauseLogging.Click += new EventHandler(this.UI_B_PauseLogging_Click);
      this.UI_GB_Filters.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_Filters.Controls.Add((Control) this.UI_TB_Message);
      this.UI_GB_Filters.Controls.Add((Control) this.UI_TB_NamespaceClass);
      this.UI_GB_Filters.Controls.Add((Control) this.UI_CB_AssemblyName);
      this.UI_GB_Filters.Controls.Add((Control) this.UI_CB_AppDomain);
      this.UI_GB_Filters.Location = new Point(0, 176);
      this.UI_GB_Filters.Name = "UI_GB_Filters";
      this.UI_GB_Filters.Size = new Size(312, 152);
      this.UI_GB_Filters.TabIndex = 21;
      this.UI_GB_Filters.TabStop = false;
      this.UI_GB_Filters.Text = "Filters";
      this.UI_TB_Message.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_TB_Message.Location = new Point(8, 112);
      this.UI_TB_Message.Name = "UI_TB_Message";
      this.UI_TB_Message.Size = new Size(296, 20);
      this.UI_TB_Message.TabIndex = 23;
      this.UI_TB_Message.Text = "<Search by part of message text>";
      this.UI_TB_Message.KeyUp += new KeyEventHandler(this.UI_TB_Message_KeyUp);
      this.UI_TB_NamespaceClass.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_TB_NamespaceClass.Location = new Point(8, 80);
      this.UI_TB_NamespaceClass.Name = "UI_TB_NamespaceClass";
      this.UI_TB_NamespaceClass.Size = new Size(296, 20);
      this.UI_TB_NamespaceClass.TabIndex = 22;
      this.UI_TB_NamespaceClass.Text = "<Search by part of namespace+class name>";
      this.UI_TB_NamespaceClass.KeyUp += new KeyEventHandler(this.UI_TB_NamespaceClass_KeyUp);
      this.UI_CB_AssemblyName.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_CB_AssemblyName.ItemHeight = 13;
      this.UI_CB_AssemblyName.Location = new Point(8, 16);
      this.UI_CB_AssemblyName.Name = "UI_CB_AssemblyName";
      this.UI_CB_AssemblyName.Size = new Size(296, 21);
      this.UI_CB_AssemblyName.TabIndex = 18;
      this.UI_CB_AssemblyName.SelectionChangeCommitted += new EventHandler(this.UI_CB_AssemblyName_SelectionChangeCommitted);
      this.UI_CB_AppDomain.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_CB_AppDomain.ItemHeight = 13;
      this.UI_CB_AppDomain.Location = new Point(8, 48);
      this.UI_CB_AppDomain.Name = "UI_CB_AppDomain";
      this.UI_CB_AppDomain.Size = new Size(296, 21);
      this.UI_CB_AppDomain.TabIndex = 17;
      this.UI_CB_AppDomain.SelectionChangeCommitted += new EventHandler(this.UI_CB_AssemblyName_SelectionChangeCommitted);
      this.UI_LV_LogInfo.AllowColumnReorder = true;
      this.UI_LV_LogInfo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_LV_LogInfo.BackColor = System.Drawing.Color.Azure;
      this.UI_LV_LogInfo.Columns.AddRange(new ColumnHeader[9]
      {
        this.UI_C_LogMessageTime,
        this.UI_C_LogMessage,
        this.UI_C_MethodName,
        this.UI_C_NamespaceClass,
        this.UI_C_AppDomain,
        this.UI_C_AssemblyName,
        this.UI_C_MessageType,
        this.UI_C_ProcessID,
        this.UI_C_ThreadName
      });
      this.UI_LV_LogInfo.FullRowSelect = true;
      this.UI_LV_LogInfo.HideSelection = false;
      this.UI_LV_LogInfo.Location = new Point(0, 21);
      this.UI_LV_LogInfo.Name = "UI_LV_LogInfo";
      this.UI_LV_LogInfo.Size = new Size(920, 155);
      this.UI_LV_LogInfo.Sorting = SortOrder.Ascending;
      this.UI_LV_LogInfo.TabIndex = 20;
      this.UI_LV_LogInfo.UseCompatibleStateImageBehavior = false;
      this.UI_LV_LogInfo.View = View.Details;
      this.UI_LV_LogInfo.SelectedIndexChanged += new EventHandler(this.UI_LV_LogInfo_SelectedIndexChanged);
      this.UI_C_LogMessageTime.Text = "Sent Time";
      this.UI_C_LogMessageTime.Width = 148;
      this.UI_C_LogMessage.Text = "Error/Debug Message";
      this.UI_C_LogMessage.Width = 544;
      this.UI_C_MethodName.Text = "Method Name";
      this.UI_C_MethodName.Width = 192;
      this.UI_C_NamespaceClass.Text = "Namespace.Class Name";
      this.UI_C_NamespaceClass.Width = 296;
      this.UI_C_AppDomain.Text = "Domain Name";
      this.UI_C_AppDomain.Width = 132;
      this.UI_C_AssemblyName.Text = "Assembly Name";
      this.UI_C_AssemblyName.Width = 496;
      this.UI_C_MessageType.Text = "Message Type";
      this.UI_C_ProcessID.Text = "Process ID";
      this.UI_C_ThreadName.Text = "Thread Name";
      this.UI_C_ThreadName.Width = 192;
      this.UI_TAB_Main_Runtime.Controls.Add((Control) this.UI_GB_Skin);
      this.UI_TAB_Main_Runtime.Controls.Add((Control) this.UI_GB_Language);
      this.UI_TAB_Main_Runtime.Controls.Add((Control) this.UI_GB_Runtime);
      this.UI_TAB_Main_Runtime.Controls.Add((Control) this.UI_GB_CasteInfo);
      this.UI_TAB_Main_Runtime.Controls.Add((Control) this.UI_GB_AdapterInfo);
      this.UI_TAB_Main_Runtime.Controls.Add((Control) this.UI_GB_FeatureInfo);
      this.UI_TAB_Main_Runtime.Controls.Add((Control) this.UI_GB_AspectInfo);
      this.UI_TAB_Main_Runtime.Controls.Add((Control) this.UI_GB_PropertyInfo);
      this.UI_TAB_Main_Runtime.Controls.Add((Control) this.UI_GB_IComponent);
      this.UI_TAB_Main_Runtime.Location = new Point(4, 22);
      this.UI_TAB_Main_Runtime.Name = "UI_TAB_Main_Runtime";
      this.UI_TAB_Main_Runtime.Size = new Size(932, 327);
      this.UI_TAB_Main_Runtime.TabIndex = 2;
      this.UI_TAB_Main_Runtime.Text = "Runtime";
      this.UI_TAB_Main_Runtime.UseVisualStyleBackColor = true;
      this.UI_GB_Skin.Controls.Add((Control) this.label1);
      this.UI_GB_Skin.Controls.Add((Control) this.UI_L_NumSkinCalls);
      this.UI_GB_Skin.Controls.Add((Control) this.UI_TB_SkinChanges);
      this.UI_GB_Skin.Controls.Add((Control) this.UI_TB_SkinCounter);
      this.UI_GB_Skin.Controls.Add((Control) this.UI_TB_SkinCurrent);
      this.UI_GB_Skin.Controls.Add((Control) this.UI_CB_Skins);
      this.UI_GB_Skin.Enabled = false;
      this.UI_GB_Skin.Location = new Point(144, 8);
      this.UI_GB_Skin.Name = "UI_GB_Skin";
      this.UI_GB_Skin.Size = new Size(208, 144);
      this.UI_GB_Skin.TabIndex = 42;
      this.UI_GB_Skin.TabStop = false;
      this.UI_GB_Skin.Text = "Skin";
      this.label1.Location = new Point(112, 96);
      this.label1.Name = "label1";
      this.label1.Size = new Size(80, 16);
      this.label1.TabIndex = 5;
      this.label1.Text = "# of changes";
      this.UI_L_NumSkinCalls.Location = new Point(16, 96);
      this.UI_L_NumSkinCalls.Name = "UI_L_NumSkinCalls";
      this.UI_L_NumSkinCalls.Size = new Size(80, 16);
      this.UI_L_NumSkinCalls.TabIndex = 4;
      this.UI_L_NumSkinCalls.Text = "# of calls";
      this.UI_TB_SkinChanges.Location = new Point(112, 112);
      this.UI_TB_SkinChanges.Name = "UI_TB_SkinChanges";
      this.UI_TB_SkinChanges.ReadOnly = true;
      this.UI_TB_SkinChanges.Size = new Size(80, 20);
      this.UI_TB_SkinChanges.TabIndex = 3;
      this.UI_TB_SkinCounter.Location = new Point(16, 112);
      this.UI_TB_SkinCounter.Name = "UI_TB_SkinCounter";
      this.UI_TB_SkinCounter.ReadOnly = true;
      this.UI_TB_SkinCounter.Size = new Size(80, 20);
      this.UI_TB_SkinCounter.TabIndex = 2;
      this.UI_TB_SkinCurrent.Location = new Point(16, 64);
      this.UI_TB_SkinCurrent.Name = "UI_TB_SkinCurrent";
      this.UI_TB_SkinCurrent.ReadOnly = true;
      this.UI_TB_SkinCurrent.Size = new Size(176, 20);
      this.UI_TB_SkinCurrent.TabIndex = 1;
      this.UI_TB_SkinCurrent.Text = "Current Skin";
      this.UI_CB_Skins.Location = new Point(16, 16);
      this.UI_CB_Skins.Name = "UI_CB_Skins";
      this.UI_CB_Skins.Size = new Size(176, 21);
      this.UI_CB_Skins.TabIndex = 0;
      this.UI_CB_Skins.SelectedIndexChanged += new EventHandler(this.UI_CB_Skins_SelectedIndexChanged);
      this.UI_GB_Language.Controls.Add((Control) this.UI_B_LanguageReset);
      this.UI_GB_Language.Controls.Add((Control) this.UI_TB_LanguageChanges);
      this.UI_GB_Language.Controls.Add((Control) this.UI_TB_LanguageCounter);
      this.UI_GB_Language.Controls.Add((Control) this.UI_TB_LanguageCurrent);
      this.UI_GB_Language.Controls.Add((Control) this.UI_CB_Languages);
      this.UI_GB_Language.Controls.Add((Control) this.UI_L_NumLanguageCalls);
      this.UI_GB_Language.Controls.Add((Control) this.UI_L_NumLanguageChanges);
      this.UI_GB_Language.Enabled = false;
      this.UI_GB_Language.Location = new Point(144, 152);
      this.UI_GB_Language.Name = "UI_GB_Language";
      this.UI_GB_Language.Size = new Size(208, 136);
      this.UI_GB_Language.TabIndex = 41;
      this.UI_GB_Language.TabStop = false;
      this.UI_GB_Language.Text = "Language";
      this.UI_B_LanguageReset.Location = new Point(112, 24);
      this.UI_B_LanguageReset.Name = "UI_B_LanguageReset";
      this.UI_B_LanguageReset.Size = new Size(75, 23);
      this.UI_B_LanguageReset.TabIndex = 47;
      this.UI_B_LanguageReset.Text = "Reset";
      this.UI_B_LanguageReset.Click += new EventHandler(this.UI_B_LanguageReset_Click);
      this.UI_TB_LanguageChanges.Location = new Point(112, 104);
      this.UI_TB_LanguageChanges.Name = "UI_TB_LanguageChanges";
      this.UI_TB_LanguageChanges.ReadOnly = true;
      this.UI_TB_LanguageChanges.Size = new Size(80, 20);
      this.UI_TB_LanguageChanges.TabIndex = 45;
      this.UI_TB_LanguageCounter.Location = new Point(16, 104);
      this.UI_TB_LanguageCounter.Name = "UI_TB_LanguageCounter";
      this.UI_TB_LanguageCounter.ReadOnly = true;
      this.UI_TB_LanguageCounter.Size = new Size(80, 20);
      this.UI_TB_LanguageCounter.TabIndex = 43;
      this.UI_TB_LanguageCurrent.Location = new Point(16, 64);
      this.UI_TB_LanguageCurrent.Name = "UI_TB_LanguageCurrent";
      this.UI_TB_LanguageCurrent.ReadOnly = true;
      this.UI_TB_LanguageCurrent.Size = new Size(176, 20);
      this.UI_TB_LanguageCurrent.TabIndex = 44;
      this.UI_TB_LanguageCurrent.Text = "Current Language";
      this.UI_CB_Languages.Location = new Point(16, 24);
      this.UI_CB_Languages.Name = "UI_CB_Languages";
      this.UI_CB_Languages.Size = new Size(80, 21);
      this.UI_CB_Languages.TabIndex = 42;
      this.UI_CB_Languages.SelectedIndexChanged += new EventHandler(this.UI_CB_Languages_SelectedIndexChanged);
      this.UI_L_NumLanguageCalls.Location = new Point(16, 88);
      this.UI_L_NumLanguageCalls.Name = "UI_L_NumLanguageCalls";
      this.UI_L_NumLanguageCalls.Size = new Size(80, 16);
      this.UI_L_NumLanguageCalls.TabIndex = 46;
      this.UI_L_NumLanguageCalls.Text = "# of calls";
      this.UI_L_NumLanguageChanges.Location = new Point(112, 88);
      this.UI_L_NumLanguageChanges.Name = "UI_L_NumLanguageChanges";
      this.UI_L_NumLanguageChanges.Size = new Size(80, 16);
      this.UI_L_NumLanguageChanges.TabIndex = 42;
      this.UI_L_NumLanguageChanges.Text = "# of changes";
      this.UI_GB_Runtime.Controls.Add((Control) this.UI_B_RuntimeConnect);
      this.UI_GB_Runtime.Location = new Point(8, 8);
      this.UI_GB_Runtime.Name = "UI_GB_Runtime";
      this.UI_GB_Runtime.Size = new Size(128, 48);
      this.UI_GB_Runtime.TabIndex = 40;
      this.UI_GB_Runtime.TabStop = false;
      this.UI_GB_Runtime.Text = "IComponent";
      this.UI_B_RuntimeConnect.Location = new Point(24, 16);
      this.UI_B_RuntimeConnect.Name = "UI_B_RuntimeConnect";
      this.UI_B_RuntimeConnect.Size = new Size(80, 23);
      this.UI_B_RuntimeConnect.TabIndex = 0;
      this.UI_B_RuntimeConnect.Text = "Connect";
      this.UI_B_RuntimeConnect.Click += new EventHandler(this.UI_B_RuntimeConnect_Click);
      this.UI_GB_CasteInfo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_CasteInfo.Controls.Add((Control) this.UI_TB_ChangeCounterCaste);
      this.UI_GB_CasteInfo.Controls.Add((Control) this.UI_B_GetSCaste);
      this.UI_GB_CasteInfo.Controls.Add((Control) this.UI_CB_Caste);
      this.UI_GB_CasteInfo.Enabled = false;
      this.UI_GB_CasteInfo.Location = new Point(360, 7);
      this.UI_GB_CasteInfo.Name = "UI_GB_CasteInfo";
      this.UI_GB_CasteInfo.Size = new Size(560, 48);
      this.UI_GB_CasteInfo.TabIndex = 35;
      this.UI_GB_CasteInfo.TabStop = false;
      this.UI_GB_CasteInfo.Text = "Caste Info";
      this.UI_TB_ChangeCounterCaste.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_TB_ChangeCounterCaste.Location = new Point(448, 16);
      this.UI_TB_ChangeCounterCaste.Name = "UI_TB_ChangeCounterCaste";
      this.UI_TB_ChangeCounterCaste.ReadOnly = true;
      this.UI_TB_ChangeCounterCaste.Size = new Size(104, 20);
      this.UI_TB_ChangeCounterCaste.TabIndex = 26;
      this.UI_TB_ChangeCounterCaste.Text = "Change Counter";
      this.UI_B_GetSCaste.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_B_GetSCaste.Location = new Point(344, 16);
      this.UI_B_GetSCaste.Name = "UI_B_GetSCaste";
      this.UI_B_GetSCaste.Size = new Size(88, 23);
      this.UI_B_GetSCaste.TabIndex = 23;
      this.UI_B_GetSCaste.Text = "Get SCaste";
      this.UI_B_GetSCaste.Click += new EventHandler(this.UI_B_GetSCaste_Click);
      this.UI_CB_Caste.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_CB_Caste.Location = new Point(8, 16);
      this.UI_CB_Caste.Name = "UI_CB_Caste";
      this.UI_CB_Caste.Size = new Size(320, 21);
      this.UI_CB_Caste.TabIndex = 25;
      this.UI_CB_Caste.SelectedIndexChanged += new EventHandler(this.UI_CB_Caste_SelectedIndexChanged);
      this.UI_GB_AdapterInfo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_AdapterInfo.Controls.Add((Control) this.UI_TB_ChangeCounterAdapter);
      this.UI_GB_AdapterInfo.Controls.Add((Control) this.UI_B_GetSAdapter);
      this.UI_GB_AdapterInfo.Controls.Add((Control) this.UI_CB_Adapter);
      this.UI_GB_AdapterInfo.Enabled = false;
      this.UI_GB_AdapterInfo.Location = new Point(360, 55);
      this.UI_GB_AdapterInfo.Name = "UI_GB_AdapterInfo";
      this.UI_GB_AdapterInfo.Size = new Size(560, 48);
      this.UI_GB_AdapterInfo.TabIndex = 26;
      this.UI_GB_AdapterInfo.TabStop = false;
      this.UI_GB_AdapterInfo.Text = "Adapter Info";
      this.UI_TB_ChangeCounterAdapter.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_TB_ChangeCounterAdapter.Location = new Point(448, 16);
      this.UI_TB_ChangeCounterAdapter.Name = "UI_TB_ChangeCounterAdapter";
      this.UI_TB_ChangeCounterAdapter.ReadOnly = true;
      this.UI_TB_ChangeCounterAdapter.Size = new Size(104, 20);
      this.UI_TB_ChangeCounterAdapter.TabIndex = 3;
      this.UI_TB_ChangeCounterAdapter.Text = "Change Counter";
      this.UI_B_GetSAdapter.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_B_GetSAdapter.Location = new Point(344, 16);
      this.UI_B_GetSAdapter.Name = "UI_B_GetSAdapter";
      this.UI_B_GetSAdapter.Size = new Size(88, 23);
      this.UI_B_GetSAdapter.TabIndex = 2;
      this.UI_B_GetSAdapter.Text = "Get SAdapter";
      this.UI_B_GetSAdapter.Click += new EventHandler(this.UI_B_GetSAdapter_Click);
      this.UI_CB_Adapter.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_CB_Adapter.Location = new Point(8, 16);
      this.UI_CB_Adapter.Name = "UI_CB_Adapter";
      this.UI_CB_Adapter.Size = new Size(320, 21);
      this.UI_CB_Adapter.TabIndex = 0;
      this.UI_CB_Adapter.SelectedIndexChanged += new EventHandler(this.UI_CB_Adapter_SelectedIndexChanged);
      this.UI_GB_FeatureInfo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_FeatureInfo.Controls.Add((Control) this.UI_TB_SFeatureActive);
      this.UI_GB_FeatureInfo.Controls.Add((Control) this.UI_B_GetSFeature);
      this.UI_GB_FeatureInfo.Controls.Add((Control) this.UI_CB_Feature);
      this.UI_GB_FeatureInfo.Enabled = false;
      this.UI_GB_FeatureInfo.Location = new Point(360, 153);
      this.UI_GB_FeatureInfo.Name = "UI_GB_FeatureInfo";
      this.UI_GB_FeatureInfo.Size = new Size(560, 48);
      this.UI_GB_FeatureInfo.TabIndex = 28;
      this.UI_GB_FeatureInfo.TabStop = false;
      this.UI_GB_FeatureInfo.Text = "Feature Info";
      this.UI_TB_SFeatureActive.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_TB_SFeatureActive.Location = new Point(448, 16);
      this.UI_TB_SFeatureActive.Name = "UI_TB_SFeatureActive";
      this.UI_TB_SFeatureActive.ReadOnly = true;
      this.UI_TB_SFeatureActive.Size = new Size(104, 20);
      this.UI_TB_SFeatureActive.TabIndex = 5;
      this.UI_TB_SFeatureActive.Text = "Unknown";
      this.UI_B_GetSFeature.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_B_GetSFeature.Location = new Point(344, 16);
      this.UI_B_GetSFeature.Name = "UI_B_GetSFeature";
      this.UI_B_GetSFeature.Size = new Size(88, 23);
      this.UI_B_GetSFeature.TabIndex = 4;
      this.UI_B_GetSFeature.Text = "Get SFeature";
      this.UI_B_GetSFeature.Click += new EventHandler(this.UI_B_GetSFeature_Click);
      this.UI_CB_Feature.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_CB_Feature.Location = new Point(8, 16);
      this.UI_CB_Feature.Name = "UI_CB_Feature";
      this.UI_CB_Feature.Size = new Size(320, 21);
      this.UI_CB_Feature.TabIndex = 3;
      this.UI_CB_Feature.SelectedIndexChanged += new EventHandler(this.UI_CB_Feature_SelectedIndexChanged);
      this.UI_GB_AspectInfo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_AspectInfo.Controls.Add((Control) this.UI_B_GetSAspect);
      this.UI_GB_AspectInfo.Controls.Add((Control) this.UI_CB_Aspect);
      this.UI_GB_AspectInfo.Controls.Add((Control) this.UI_TB_ChangeCounterAspect);
      this.UI_GB_AspectInfo.Enabled = false;
      this.UI_GB_AspectInfo.Location = new Point(360, 104);
      this.UI_GB_AspectInfo.Name = "UI_GB_AspectInfo";
      this.UI_GB_AspectInfo.Size = new Size(560, 48);
      this.UI_GB_AspectInfo.TabIndex = 27;
      this.UI_GB_AspectInfo.TabStop = false;
      this.UI_GB_AspectInfo.Text = "Aspect Info";
      this.UI_B_GetSAspect.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_B_GetSAspect.Location = new Point(344, 16);
      this.UI_B_GetSAspect.Name = "UI_B_GetSAspect";
      this.UI_B_GetSAspect.Size = new Size(88, 23);
      this.UI_B_GetSAspect.TabIndex = 4;
      this.UI_B_GetSAspect.Text = "Get SAspect";
      this.UI_B_GetSAspect.Click += new EventHandler(this.UI_B_GetSAspect_Click);
      this.UI_CB_Aspect.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_CB_Aspect.Location = new Point(8, 16);
      this.UI_CB_Aspect.Name = "UI_CB_Aspect";
      this.UI_CB_Aspect.Size = new Size(320, 21);
      this.UI_CB_Aspect.TabIndex = 3;
      this.UI_CB_Aspect.SelectedIndexChanged += new EventHandler(this.UI_CB_Aspect_SelectedIndexChanged);
      this.UI_TB_ChangeCounterAspect.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_TB_ChangeCounterAspect.Location = new Point(448, 16);
      this.UI_TB_ChangeCounterAspect.Name = "UI_TB_ChangeCounterAspect";
      this.UI_TB_ChangeCounterAspect.ReadOnly = true;
      this.UI_TB_ChangeCounterAspect.Size = new Size(104, 20);
      this.UI_TB_ChangeCounterAspect.TabIndex = 27;
      this.UI_TB_ChangeCounterAspect.Text = "Change Counter";
      this.UI_GB_PropertyInfo.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_PropertyInfo.Controls.Add((Control) this.UI_B_GetSProperty_Immutable);
      this.UI_GB_PropertyInfo.Controls.Add((Control) this.UI_CB_Property_Immutable);
      this.UI_GB_PropertyInfo.Controls.Add((Control) this.UI_B_SetSPropertyRepeat);
      this.UI_GB_PropertyInfo.Controls.Add((Control) this.UI_TB_SPropertyRepeats);
      this.UI_GB_PropertyInfo.Controls.Add((Control) this.UI_TB_SetSProperty);
      this.UI_GB_PropertyInfo.Controls.Add((Control) this.UI_B_GetSProperty);
      this.UI_GB_PropertyInfo.Controls.Add((Control) this.UI_CB_Property);
      this.UI_GB_PropertyInfo.Controls.Add((Control) this.UI_B_SetSProperty);
      this.UI_GB_PropertyInfo.Enabled = false;
      this.UI_GB_PropertyInfo.Location = new Point(360, 200);
      this.UI_GB_PropertyInfo.Name = "UI_GB_PropertyInfo";
      this.UI_GB_PropertyInfo.Size = new Size(560, 124);
      this.UI_GB_PropertyInfo.TabIndex = 29;
      this.UI_GB_PropertyInfo.TabStop = false;
      this.UI_GB_PropertyInfo.Text = "Property Info";
      this.UI_B_GetSProperty_Immutable.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.UI_B_GetSProperty_Immutable.Location = new Point(344, 19);
      this.UI_B_GetSProperty_Immutable.Name = "UI_B_GetSProperty_Immutable";
      this.UI_B_GetSProperty_Immutable.Size = new Size(88, 23);
      this.UI_B_GetSProperty_Immutable.TabIndex = 11;
      this.UI_B_GetSProperty_Immutable.Text = "Get Immutable";
      this.UI_B_GetSProperty_Immutable.UseVisualStyleBackColor = true;
      this.UI_B_GetSProperty_Immutable.Click += new EventHandler(this.UI_B_GetSProperty_Immutable_Click);
      this.UI_CB_Property_Immutable.DrawMode = DrawMode.OwnerDrawFixed;
      this.UI_CB_Property_Immutable.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.UI_CB_Property_Immutable.FormattingEnabled = true;
      this.UI_CB_Property_Immutable.Location = new Point(8, 19);
      this.UI_CB_Property_Immutable.Name = "UI_CB_Property_Immutable";
      this.UI_CB_Property_Immutable.Size = new Size(320, 21);
      this.UI_CB_Property_Immutable.TabIndex = 10;
      this.UI_B_SetSPropertyRepeat.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_B_SetSPropertyRepeat.Location = new Point(448, 95);
      this.UI_B_SetSPropertyRepeat.Name = "UI_B_SetSPropertyRepeat";
      this.UI_B_SetSPropertyRepeat.Size = new Size(104, 23);
      this.UI_B_SetSPropertyRepeat.TabIndex = 9;
      this.UI_B_SetSPropertyRepeat.Text = "Repeat";
      this.UI_B_SetSPropertyRepeat.Click += new EventHandler(this.UI_B_SetSPropertyRepeat_Click);
      this.UI_TB_SPropertyRepeats.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_TB_SPropertyRepeats.Location = new Point(448, 56);
      this.UI_TB_SPropertyRepeats.Name = "UI_TB_SPropertyRepeats";
      this.UI_TB_SPropertyRepeats.Size = new Size(104, 20);
      this.UI_TB_SPropertyRepeats.TabIndex = 8;
      this.UI_TB_SPropertyRepeats.Text = "Number times to set";
      this.UI_TB_SPropertyRepeats.KeyUp += new KeyEventHandler(this.UI_TB_SPropertyRepeats_KeyUp);
      this.UI_TB_SetSProperty.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_TB_SetSProperty.Location = new Point(8, 98);
      this.UI_TB_SetSProperty.Name = "UI_TB_SetSProperty";
      this.UI_TB_SetSProperty.Size = new Size(320, 20);
      this.UI_TB_SetSProperty.TabIndex = 6;
      this.UI_TB_SetSProperty.KeyUp += new KeyEventHandler(this.UI_TB_SetSProperty_KeyUp);
      this.UI_B_GetSProperty.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_B_GetSProperty.Location = new Point(344, 56);
      this.UI_B_GetSProperty.Name = "UI_B_GetSProperty";
      this.UI_B_GetSProperty.Size = new Size(88, 23);
      this.UI_B_GetSProperty.TabIndex = 4;
      this.UI_B_GetSProperty.Text = "Get Writable";
      this.UI_B_GetSProperty.Click += new EventHandler(this.UI_B_GetSProperty_Click);
      this.UI_CB_Property.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_CB_Property.Location = new Point(8, 56);
      this.UI_CB_Property.Name = "UI_CB_Property";
      this.UI_CB_Property.Size = new Size(320, 21);
      this.UI_CB_Property.TabIndex = 3;
      this.UI_B_SetSProperty.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_B_SetSProperty.Location = new Point(344, 95);
      this.UI_B_SetSProperty.Name = "UI_B_SetSProperty";
      this.UI_B_SetSProperty.Size = new Size(88, 23);
      this.UI_B_SetSProperty.TabIndex = 5;
      this.UI_B_SetSProperty.Text = "Set Writable";
      this.UI_B_SetSProperty.Click += new EventHandler(this.UI_B_SetSProperty_Click);
      this.UI_GB_IComponent.Controls.Add((Control) this.UI_TB_UnApplied);
      this.UI_GB_IComponent.Controls.Add((Control) this.UI_B_IComponentRefresh);
      this.UI_GB_IComponent.Controls.Add((Control) this.UI_B_IComponentFactory);
      this.UI_GB_IComponent.Controls.Add((Control) this.UI_B_IComponentCancel);
      this.UI_GB_IComponent.Controls.Add((Control) this.UI_B_IComponentApply);
      this.UI_GB_IComponent.Controls.Add((Control) this.UI_TB_RuntimePID);
      this.UI_GB_IComponent.Enabled = false;
      this.UI_GB_IComponent.Location = new Point(8, 64);
      this.UI_GB_IComponent.Name = "UI_GB_IComponent";
      this.UI_GB_IComponent.Size = new Size(128, 224);
      this.UI_GB_IComponent.TabIndex = 39;
      this.UI_GB_IComponent.TabStop = false;
      this.UI_GB_IComponent.Text = "IComponent";
      this.UI_TB_UnApplied.Location = new Point(8, 192);
      this.UI_TB_UnApplied.Name = "UI_TB_UnApplied";
      this.UI_TB_UnApplied.ReadOnly = true;
      this.UI_TB_UnApplied.Size = new Size(112, 20);
      this.UI_TB_UnApplied.TabIndex = 41;
      this.UI_TB_UnApplied.Text = "UnApplied?";
      this.UI_B_IComponentRefresh.Location = new Point(24, 80);
      this.UI_B_IComponentRefresh.Name = "UI_B_IComponentRefresh";
      this.UI_B_IComponentRefresh.Size = new Size(80, 23);
      this.UI_B_IComponentRefresh.TabIndex = 38;
      this.UI_B_IComponentRefresh.Text = "Refresh";
      this.UI_B_IComponentRefresh.Click += new EventHandler(this.UI_B_IComponentRefresh_Click);
      this.UI_B_IComponentFactory.Location = new Point(24, 112);
      this.UI_B_IComponentFactory.Name = "UI_B_IComponentFactory";
      this.UI_B_IComponentFactory.Size = new Size(80, 23);
      this.UI_B_IComponentFactory.TabIndex = 37;
      this.UI_B_IComponentFactory.Text = "Factory";
      this.UI_B_IComponentFactory.Click += new EventHandler(this.UI_B_IComponentFactory_Click);
      this.UI_B_IComponentCancel.Location = new Point(24, 48);
      this.UI_B_IComponentCancel.Name = "UI_B_IComponentCancel";
      this.UI_B_IComponentCancel.Size = new Size(80, 23);
      this.UI_B_IComponentCancel.TabIndex = 36;
      this.UI_B_IComponentCancel.Text = "Cancel";
      this.UI_B_IComponentCancel.Click += new EventHandler(this.UI_B_IComponentCancel_Click);
      this.UI_B_IComponentApply.Location = new Point(24, 16);
      this.UI_B_IComponentApply.Name = "UI_B_IComponentApply";
      this.UI_B_IComponentApply.Size = new Size(80, 23);
      this.UI_B_IComponentApply.TabIndex = 35;
      this.UI_B_IComponentApply.Text = "Apply";
      this.UI_B_IComponentApply.Click += new EventHandler(this.UI_B_IComponentApply_Click);
      this.UI_TB_RuntimePID.Location = new Point(8, 152);
      this.UI_TB_RuntimePID.Name = "UI_TB_RuntimePID";
      this.UI_TB_RuntimePID.ReadOnly = true;
      this.UI_TB_RuntimePID.Size = new Size(112, 20);
      this.UI_TB_RuntimePID.TabIndex = 40;
      this.UI_TB_RuntimePID.Text = "No PID";
      this.UI_TAB_Profiles.Controls.Add((Control) this.UI_GB_Profiles);
      this.UI_TAB_Profiles.Controls.Add((Control) this.UI_GB_IPM);
      this.UI_TAB_Profiles.Location = new Point(4, 22);
      this.UI_TAB_Profiles.Name = "UI_TAB_Profiles";
      this.UI_TAB_Profiles.Size = new Size(932, 327);
      this.UI_TAB_Profiles.TabIndex = 5;
      this.UI_TAB_Profiles.Text = "Profiles";
      this.UI_TAB_Profiles.UseVisualStyleBackColor = true;
      this.UI_GB_Profiles.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_Profiles.Controls.Add((Control) this.UI_B_IPM_Load);
      this.UI_GB_Profiles.Controls.Add((Control) this.UI_IPM_GetList);
      this.UI_GB_Profiles.Controls.Add((Control) this.UI_LB_Profiles);
      this.UI_GB_Profiles.Controls.Add((Control) this.UI_TB_IPM_PID);
      this.UI_GB_Profiles.Enabled = false;
      this.UI_GB_Profiles.Location = new Point(152, 8);
      this.UI_GB_Profiles.Name = "UI_GB_Profiles";
      this.UI_GB_Profiles.Size = new Size(768, 280);
      this.UI_GB_Profiles.TabIndex = 1;
      this.UI_GB_Profiles.TabStop = false;
      this.UI_GB_Profiles.Text = "Profiles";
      this.UI_B_IPM_Load.Location = new Point(16, 16);
      this.UI_B_IPM_Load.Name = "UI_B_IPM_Load";
      this.UI_B_IPM_Load.Size = new Size(96, 23);
      this.UI_B_IPM_Load.TabIndex = 3;
      this.UI_B_IPM_Load.Text = "Apply Selected";
      this.UI_B_IPM_Load.Click += new EventHandler(this.UI_B_IPM_Load_Click);
      this.UI_IPM_GetList.Location = new Point(16, 64);
      this.UI_IPM_GetList.Name = "UI_IPM_GetList";
      this.UI_IPM_GetList.Size = new Size(96, 23);
      this.UI_IPM_GetList.TabIndex = 2;
      this.UI_IPM_GetList.Text = "Refresh List";
      this.UI_IPM_GetList.Click += new EventHandler(this.UI_IPM_GetList_Click);
      this.UI_LB_Profiles.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_LB_Profiles.Location = new Point(136, 16);
      this.UI_LB_Profiles.Name = "UI_LB_Profiles";
      this.UI_LB_Profiles.Size = new Size(616, 251);
      this.UI_LB_Profiles.TabIndex = 1;
      this.UI_TB_IPM_PID.Location = new Point(32, 248);
      this.UI_TB_IPM_PID.Name = "UI_TB_IPM_PID";
      this.UI_TB_IPM_PID.ReadOnly = true;
      this.UI_TB_IPM_PID.Size = new Size(72, 20);
      this.UI_TB_IPM_PID.TabIndex = 0;
      this.UI_TB_IPM_PID.Text = "No PID";
      this.UI_GB_IPM.Controls.Add((Control) this.UI_B_IPM_Connect);
      this.UI_GB_IPM.Enabled = false;
      this.UI_GB_IPM.Location = new Point(8, 8);
      this.UI_GB_IPM.Name = "UI_GB_IPM";
      this.UI_GB_IPM.Size = new Size(128, 48);
      this.UI_GB_IPM.TabIndex = 0;
      this.UI_GB_IPM.TabStop = false;
      this.UI_GB_IPM.Text = "Profile Manager";
      this.UI_B_IPM_Connect.Location = new Point(16, 16);
      this.UI_B_IPM_Connect.Name = "UI_B_IPM_Connect";
      this.UI_B_IPM_Connect.Size = new Size(96, 23);
      this.UI_B_IPM_Connect.TabIndex = 0;
      this.UI_B_IPM_Connect.Text = "Connect";
      this.UI_B_IPM_Connect.Click += new EventHandler(this.UI_B_IPM_Connect_Click);
      this.UI_TAB_Main_Domains.Controls.Add((Control) this.UI_GB_AppDomains);
      this.UI_TAB_Main_Domains.Location = new Point(4, 22);
      this.UI_TAB_Main_Domains.Name = "UI_TAB_Main_Domains";
      this.UI_TAB_Main_Domains.Size = new Size(932, 327);
      this.UI_TAB_Main_Domains.TabIndex = 1;
      this.UI_TAB_Main_Domains.Text = "Domains";
      this.UI_TAB_Main_Domains.UseVisualStyleBackColor = true;
      this.UI_GB_AppDomains.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_GB_AppDomains.Controls.Add((Control) this.UI_GB_LOGMessageControls);
      this.UI_GB_AppDomains.Controls.Add((Control) this.UI_LB_AppDomains);
      this.UI_GB_AppDomains.Controls.Add((Control) this.UI_LB_AppDomainItems);
      this.UI_GB_AppDomains.Enabled = false;
      this.UI_GB_AppDomains.Location = new Point(8, 8);
      this.UI_GB_AppDomains.Name = "UI_GB_AppDomains";
      this.UI_GB_AppDomains.Size = new Size(912, 384);
      this.UI_GB_AppDomains.TabIndex = 0;
      this.UI_GB_AppDomains.TabStop = false;
      this.UI_GB_AppDomains.Text = "AppDomains";
      this.UI_GB_LOGMessageControls.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.UI_GB_LOGMessageControls.Controls.Add((Control) this.UI_CM_AppDomainLogToLOG);
      this.UI_GB_LOGMessageControls.Controls.Add((Control) this.UI_B_GetPublished);
      this.UI_GB_LOGMessageControls.Controls.Add((Control) this.UI_B_CopyAppDomains);
      this.UI_GB_LOGMessageControls.Controls.Add((Control) this.UI_B_GetAppDomainAssemblies);
      this.UI_GB_LOGMessageControls.Controls.Add((Control) this.UI_CM_ExceptionMessages);
      this.UI_GB_LOGMessageControls.Controls.Add((Control) this.UI_CM_ErrorMessages);
      this.UI_GB_LOGMessageControls.Controls.Add((Control) this.UI_CM_DebugMessages);
      this.UI_GB_LOGMessageControls.Location = new Point(456, 8);
      this.UI_GB_LOGMessageControls.Name = "UI_GB_LOGMessageControls";
      this.UI_GB_LOGMessageControls.Size = new Size(448, 120);
      this.UI_GB_LOGMessageControls.TabIndex = 2;
      this.UI_GB_LOGMessageControls.TabStop = false;
      this.UI_GB_LOGMessageControls.Text = "LOG Message Controls";
      this.UI_CM_AppDomainLogToLOG.Location = new Point(16, 88);
      this.UI_CM_AppDomainLogToLOG.Name = "UI_CM_AppDomainLogToLOG";
      this.UI_CM_AppDomainLogToLOG.Size = new Size(184, 24);
      this.UI_CM_AppDomainLogToLOG.TabIndex = 7;
      this.UI_CM_AppDomainLogToLOG.Text = "Log messsages to LOG Server";
      this.UI_CM_AppDomainLogToLOG.CheckedChanged += new EventHandler(this.UI_CM_AppDomainLogToLOG_CheckedChanged);
      this.UI_B_GetPublished.Location = new Point(216, 80);
      this.UI_B_GetPublished.Name = "UI_B_GetPublished";
      this.UI_B_GetPublished.Size = new Size(104, 23);
      this.UI_B_GetPublished.TabIndex = 6;
      this.UI_B_GetPublished.Text = "Get Published";
      this.UI_B_GetPublished.Click += new EventHandler(this.UI_B_GetPublished_Click);
      this.UI_B_CopyAppDomains.Location = new Point(216, 48);
      this.UI_B_CopyAppDomains.Name = "UI_B_CopyAppDomains";
      this.UI_B_CopyAppDomains.Size = new Size(104, 23);
      this.UI_B_CopyAppDomains.TabIndex = 5;
      this.UI_B_CopyAppDomains.Text = "Copy List View";
      this.UI_B_CopyAppDomains.Click += new EventHandler(this.UI_B_CopyAppDomains_Click);
      this.UI_B_GetAppDomainAssemblies.Location = new Point(216, 16);
      this.UI_B_GetAppDomainAssemblies.Name = "UI_B_GetAppDomainAssemblies";
      this.UI_B_GetAppDomainAssemblies.Size = new Size(104, 23);
      this.UI_B_GetAppDomainAssemblies.TabIndex = 4;
      this.UI_B_GetAppDomainAssemblies.Text = "Get Assemblies";
      this.UI_B_GetAppDomainAssemblies.Click += new EventHandler(this.UI_B_GetAppDomainAssemblies_Click);
      this.UI_CM_ExceptionMessages.Location = new Point(16, 64);
      this.UI_CM_ExceptionMessages.Name = "UI_CM_ExceptionMessages";
      this.UI_CM_ExceptionMessages.Size = new Size(184, 24);
      this.UI_CM_ExceptionMessages.TabIndex = 3;
      this.UI_CM_ExceptionMessages.Text = "Generate Exception Messages";
      this.UI_CM_ExceptionMessages.CheckedChanged += new EventHandler(this.UI_CM_ExceptionMessages_CheckedChanged);
      this.UI_CM_ErrorMessages.Location = new Point(16, 40);
      this.UI_CM_ErrorMessages.Name = "UI_CM_ErrorMessages";
      this.UI_CM_ErrorMessages.Size = new Size(184, 24);
      this.UI_CM_ErrorMessages.TabIndex = 2;
      this.UI_CM_ErrorMessages.Text = "Generate Error Messages";
      this.UI_CM_ErrorMessages.CheckedChanged += new EventHandler(this.UI_CM_ErrorMessages_CheckedChanged);
      this.UI_CM_DebugMessages.Location = new Point(16, 16);
      this.UI_CM_DebugMessages.Name = "UI_CM_DebugMessages";
      this.UI_CM_DebugMessages.Size = new Size(184, 24);
      this.UI_CM_DebugMessages.TabIndex = 1;
      this.UI_CM_DebugMessages.Text = "Generate Debug Messages";
      this.UI_CM_DebugMessages.CheckedChanged += new EventHandler(this.UI_CM_DebugMessages_CheckedChanged);
      this.UI_LB_AppDomains.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_LB_AppDomains.Location = new Point(8, 16);
      this.UI_LB_AppDomains.Name = "UI_LB_AppDomains";
      this.UI_LB_AppDomains.Size = new Size(440, 108);
      this.UI_LB_AppDomains.TabIndex = 0;
      this.UI_LB_AppDomains.SelectedIndexChanged += new EventHandler(this.UI_LB_AppDomains_SelectedIndexChanged);
      this.UI_LB_AppDomainItems.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_LB_AppDomainItems.Location = new Point(8, 144);
      this.UI_LB_AppDomainItems.Name = "UI_LB_AppDomainItems";
      this.UI_LB_AppDomainItems.Size = new Size(896, 147);
      this.UI_LB_AppDomainItems.TabIndex = 3;
      this.UI_TAB_Main_Logfile.Controls.Add((Control) this.UI_GB_ACE_LogFile);
      this.UI_TAB_Main_Logfile.Controls.Add((Control) this.UI_GB_Windows_EventLog);
      this.UI_TAB_Main_Logfile.Location = new Point(4, 22);
      this.UI_TAB_Main_Logfile.Name = "UI_TAB_Main_Logfile";
      this.UI_TAB_Main_Logfile.Size = new Size(932, 327);
      this.UI_TAB_Main_Logfile.TabIndex = 4;
      this.UI_TAB_Main_Logfile.Text = "Logfile";
      this.UI_TAB_Main_Logfile.UseVisualStyleBackColor = true;
      this.UI_CM_LOG_Status_AutoScroll.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.UI_CM_LOG_Status_AutoScroll.Checked = true;
      this.UI_CM_LOG_Status_AutoScroll.CheckState = CheckState.Checked;
      this.UI_CM_LOG_Status_AutoScroll.Location = new Point(832, 424);
      this.UI_CM_LOG_Status_AutoScroll.Name = "UI_CM_LOG_Status_AutoScroll";
      this.UI_CM_LOG_Status_AutoScroll.Size = new Size(80, 16);
      this.UI_CM_LOG_Status_AutoScroll.TabIndex = 20;
      this.UI_CM_LOG_Status_AutoScroll.Text = "Auto-Scroll";
      this.UI_CM_LOG_Status_AutoScroll.CheckedChanged += new EventHandler(this.UI_CM_LOG_Status_AutoScroll_CheckedChanged);
      this.UI_LB_LOG_Status.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.UI_LB_LOG_Status.Location = new Point(0, 376);
      this.UI_LB_LOG_Status.Name = "UI_LB_LOG_Status";
      this.UI_LB_LOG_Status.Size = new Size(788, 108);
      this.UI_LB_LOG_Status.TabIndex = 21;
      this.UI_B_Clear_LOG_Status.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.UI_B_Clear_LOG_Status.Location = new Point(832, 456);
      this.UI_B_Clear_LOG_Status.Name = "UI_B_Clear_LOG_Status";
      this.UI_B_Clear_LOG_Status.Size = new Size(80, 20);
      this.UI_B_Clear_LOG_Status.TabIndex = 22;
      this.UI_B_Clear_LOG_Status.Text = "Clear";
      this.UI_B_Clear_LOG_Status.Click += new EventHandler(this.UI_B_Clear_LOG_Status_Click);
      this.AutoScaleDimensions = new SizeF(96f, 96f);
      this.AutoScaleMode = AutoScaleMode.Dpi;
      this.BackColor = SystemColors.Control;
      this.ClientSize = new Size(944, 510);
      this.Controls.Add((Control) this.UI_TAB_MainTab);
      this.Controls.Add((Control) this.UI_LB_LOG_Status);
      this.Controls.Add((Control) this.UI_CM_LOG_Status_AutoScroll);
      this.Controls.Add((Control) this.UI_B_Clear_LOG_Status);
      this.MaximizeBox = false;
      this.Name = nameof (LogManager);
      this.StartPosition = FormStartPosition.Manual;
      this.Text = "ACE LOG";
      this.Closing += new CancelEventHandler(this.UI_ACE_Closing);
      this.Load += new EventHandler(this.LogManager_Load);
      this.UI_GB_Windows_EventLog.ResumeLayout(false);
      this.UI_GB_ACE_LogFile.ResumeLayout(false);
      this.UI_GB_ACE_LogFile.PerformLayout();
      this.UI_TAB_MainTab.ResumeLayout(false);
      this.UI_TAB_Main_Components.ResumeLayout(false);
      this.UI_GB_CCC.ResumeLayout(false);
      this.UI_GB_CCC.PerformLayout();
      this.UI_GB_CLI.ResumeLayout(false);
      this.UI_GB_CLI.PerformLayout();
      this.UI_TAB_Main_Messages.ResumeLayout(false);
      this.UI_GB_ACE_LogMessages.ResumeLayout(false);
      this.UI_GB_MessageDetails.ResumeLayout(false);
      this.UI_GB_MessageDetails.PerformLayout();
      this.UI_GB_MessageControl.ResumeLayout(false);
      this.UI_GB_Filters.ResumeLayout(false);
      this.UI_GB_Filters.PerformLayout();
      this.UI_TAB_Main_Runtime.ResumeLayout(false);
      this.UI_GB_Skin.ResumeLayout(false);
      this.UI_GB_Skin.PerformLayout();
      this.UI_GB_Language.ResumeLayout(false);
      this.UI_GB_Language.PerformLayout();
      this.UI_GB_Runtime.ResumeLayout(false);
      this.UI_GB_CasteInfo.ResumeLayout(false);
      this.UI_GB_CasteInfo.PerformLayout();
      this.UI_GB_AdapterInfo.ResumeLayout(false);
      this.UI_GB_AdapterInfo.PerformLayout();
      this.UI_GB_FeatureInfo.ResumeLayout(false);
      this.UI_GB_FeatureInfo.PerformLayout();
      this.UI_GB_AspectInfo.ResumeLayout(false);
      this.UI_GB_AspectInfo.PerformLayout();
      this.UI_GB_PropertyInfo.ResumeLayout(false);
      this.UI_GB_PropertyInfo.PerformLayout();
      this.UI_GB_IComponent.ResumeLayout(false);
      this.UI_GB_IComponent.PerformLayout();
      this.UI_TAB_Profiles.ResumeLayout(false);
      this.UI_GB_Profiles.ResumeLayout(false);
      this.UI_GB_Profiles.PerformLayout();
      this.UI_GB_IPM.ResumeLayout(false);
      this.UI_TAB_Main_Domains.ResumeLayout(false);
      this.UI_GB_AppDomains.ResumeLayout(false);
      this.UI_GB_LOGMessageControls.ResumeLayout(false);
      this.UI_TAB_Main_Logfile.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    private delegate void AddToListViewDelegate(ListViewItem x);
  }
}
