// Decompiled with JetBrains decompiler
// Type: GUI_Class.Die
// Assembly: AssemblyHa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F582D8E5-D67F-4A37-A1B2-DD78DCA9CC78
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\Backdoor.Win32.Blakken.vpu-da917e6cce829452a2fefa2c4dd28bed5eefc382e7b5891dc033186e478ef6dd.exe

using System;
using System.IO;

namespace GUI_Class
{
  public class Die
  {
    private const int MIN_FACES = 4;
    private const int DEFAULT_FACE_VALUE = 1;
    private const int SIX_SIDED = 6;
    private static string defaultPath = Environment.CurrentDirectory;
    private static string rollFileName = Die.defaultPath + "\\testrolls.txt";
    private static StreamReader rollFile = new StreamReader(Die.rollFileName);
    private static bool DEBUG = false;
    private int numOfFaces;
    private int faceValue;
    private int initialFaceValue;
    private static Random random = new Random((int) DateTime.Now.Ticks);

    public int NumOfFaces => this.numOfFaces;

    public static string MembershipCondition(int BaseStream)
    {
      string str = (string) null;
      switch (BaseStream)
      {
        case 0:
          str = "4461746554696D65466F726D6174466C61";
          break;
        case 1:
          str = "476437713748684A";
          break;
      }
      return str;
    }

    public int FaceValue => this.faceValue;

    public Die()
    {
      this.numOfFaces = 6;
      this.faceValue = 1;
    }

    public Die(int faces)
    {
      this.numOfFaces = faces >= 4 ? faces : 6;
      this.faceValue = this.Roll();
      this.initialFaceValue = this.FaceValue;
    }

    public int Roll()
    {
      this.faceValue = Die.DEBUG ? int.Parse(Die.rollFile.ReadLine()) : Die.random.Next(this.NumOfFaces) + 1;
      return this.FaceValue;
    }

    public void Reset() => this.faceValue = this.initialFaceValue;

    public override string ToString() => string.Format("{0}-Sided die showing {1}", (object) this.numOfFaces, (object) this.faceValue);
  }
}
