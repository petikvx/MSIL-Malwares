// Decompiled with JetBrains decompiler
// Type: InterpParser
// Assembly: Int32ArrayTypeI, Version=1.0.0.6, Culture=neutral, PublicKeyToken=null
// MVID: 0BFC1AC3-7296-4DC2-A225-981B6FDA1974
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.NanoBot.gen-b977b04f2072b83a299423cc05daabc62fab53933fde03daecc75baa34d374f0.exe

using Antlr.Runtime;
using Antlr.Runtime.Tree;
using System.Collections.Generic;

public class InterpParser : Parser
{
  public static readonly string[] tokenNames = new string[15]
  {
    "<invalid>",
    "<EOR>",
    "<DOWN>",
    "<UP>",
    nameof (ASSIGNMENT),
    nameof (END_OF_STATEMENT),
    nameof (VARIABLE),
    nameof (INT_LITERAL),
    nameof (PLUS),
    nameof (MULT),
    nameof (MAT_DATA),
    nameof (WHITESPACE),
    "'print'",
    "'mat'",
    "'print_mat'"
  };
  public const int INT_LITERAL = 7;
  public const int VARIABLE = 6;
  public const int T__12 = 12;
  public const int T__14 = 14;
  public const int T__13 = 13;
  public const int WHITESPACE = 11;
  public const int PLUS = 8;
  public const int ASSIGNMENT = 4;
  public const int MULT = 9;
  public const int EOF = -1;
  public const int MAT_DATA = 10;
  public const int END_OF_STATEMENT = 5;
  protected ITreeAdaptor adaptor = (ITreeAdaptor) new CommonTreeAdaptor();
  public static readonly BitSet FOLLOW_expr_in_program74 = new BitSet(new ulong[1]
  {
    28738UL
  });
  public static readonly BitSet FOLLOW_assignment_in_expr93 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_mat_assignment_in_expr101 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_print_in_expr109 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_mat_print_in_expr117 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_variable_in_assignment137 = new BitSet(new ulong[1]
  {
    16UL
  });
  public static readonly BitSet FOLLOW_ASSIGNMENT_in_assignment145 = new BitSet(new ulong[1]
  {
    192UL
  });
  public static readonly BitSet FOLLOW_var_or_int_literal_in_assignment153 = new BitSet(new ulong[1]
  {
    32UL
  });
  public static readonly BitSet FOLLOW_addition_in_assignment164 = new BitSet(new ulong[1]
  {
    32UL
  });
  public static readonly BitSet FOLLOW_multiplication_in_assignment175 = new BitSet(new ulong[1]
  {
    32UL
  });
  public static readonly BitSet FOLLOW_END_OF_STATEMENT_in_assignment189 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_variable_in_var_or_int_literal205 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_int_literal_in_var_or_int_literal216 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_VARIABLE_in_variable239 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_INT_LITERAL_in_int_literal263 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_var_or_int_literal_in_addition286 = new BitSet(new ulong[1]
  {
    256UL
  });
  public static readonly BitSet FOLLOW_PLUS_in_addition295 = new BitSet(new ulong[1]
  {
    192UL
  });
  public static readonly BitSet FOLLOW_var_or_int_literal_in_addition304 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_var_or_int_literal_in_multiplication327 = new BitSet(new ulong[1]
  {
    512UL
  });
  public static readonly BitSet FOLLOW_MULT_in_multiplication336 = new BitSet(new ulong[1]
  {
    192UL
  });
  public static readonly BitSet FOLLOW_var_or_int_literal_in_multiplication345 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_12_in_print366 = new BitSet(new ulong[1]
  {
    192UL
  });
  public static readonly BitSet FOLLOW_var_or_int_literal_in_print368 = new BitSet(new ulong[1]
  {
    32UL
  });
  public static readonly BitSet FOLLOW_END_OF_STATEMENT_in_print371 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_mat_name_in_mat_assignment395 = new BitSet(new ulong[1]
  {
    16UL
  });
  public static readonly BitSet FOLLOW_ASSIGNMENT_in_mat_assignment403 = new BitSet(new ulong[1]
  {
    9216UL
  });
  public static readonly BitSet FOLLOW_mat_var_in_mat_assignment411 = new BitSet(new ulong[1]
  {
    32UL
  });
  public static readonly BitSet FOLLOW_mat_addition_in_mat_assignment421 = new BitSet(new ulong[1]
  {
    32UL
  });
  public static readonly BitSet FOLLOW_mat_multiplication_in_mat_assignment432 = new BitSet(new ulong[1]
  {
    32UL
  });
  public static readonly BitSet FOLLOW_END_OF_STATEMENT_in_mat_assignment443 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_mat_name_in_mat_var461 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_mat_data_in_mat_var472 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_13_in_mat_name495 = new BitSet(new ulong[1]
  {
    64UL
  });
  public static readonly BitSet FOLLOW_VARIABLE_in_mat_name497 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_MAT_DATA_in_mat_data518 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_mat_name_in_mat_addition541 = new BitSet(new ulong[1]
  {
    256UL
  });
  public static readonly BitSet FOLLOW_PLUS_in_mat_addition550 = new BitSet(new ulong[1]
  {
    8192UL
  });
  public static readonly BitSet FOLLOW_mat_name_in_mat_addition559 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_mat_name_in_mat_multiplication582 = new BitSet(new ulong[1]
  {
    512UL
  });
  public static readonly BitSet FOLLOW_MULT_in_mat_multiplication591 = new BitSet(new ulong[1]
  {
    8192UL
  });
  public static readonly BitSet FOLLOW_mat_name_in_mat_multiplication600 = new BitSet(new ulong[1]
  {
    2UL
  });
  public static readonly BitSet FOLLOW_14_in_mat_print621 = new BitSet(new ulong[1]
  {
    64UL
  });
  public static readonly BitSet FOLLOW_VARIABLE_in_mat_print623 = new BitSet(new ulong[1]
  {
    2UL
  });

  public InterpParser(ITokenStream input)
    : this(input, new RecognizerSharedState())
  {
  }

  public InterpParser(ITokenStream input, RecognizerSharedState state)
    : base(input, state)
  {
    this.InitializeCyclicDFAs();
  }

  public ITreeAdaptor TreeAdaptor
  {
    get => this.adaptor;
    set => this.adaptor = value;
  }

  public virtual string[] TokenNames => InterpParser.tokenNames;

  public virtual string GrammarFileName => "Interp.g";

  public InterpParser.program_return program()
  {
    InterpParser.program_return programReturn = new InterpParser.program_return();
    ((RuleReturnScope) programReturn).Start = (object) this.input.LT(1);
    programReturn.ret = new List<Element>();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      int num1 = 0;
      while (true)
      {
        int num2 = 2;
        int num3 = ((IIntStream) this.input).LA(1);
        if (num3 == 6 || num3 >= 12 && num3 <= 14)
          num2 = 1;
        if (num2 == 1)
        {
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_expr_in_program74);
          InterpParser.expr_return exprReturn = this.expr();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(nilNode, ((RuleReturnScope) exprReturn).Tree);
          programReturn.ret.Add(exprReturn?.ret);
          ++num1;
        }
        else
          break;
      }
      if (num1 < 1)
        throw new EarlyExitException(1, (IIntStream) this.input);
      ((RuleReturnScope) programReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) programReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) programReturn).Tree, (IToken) ((RuleReturnScope) programReturn).Start, (IToken) ((RuleReturnScope) programReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) programReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) programReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return programReturn;
  }

  public InterpParser.expr_return expr()
  {
    InterpParser.expr_return exprReturn = new InterpParser.expr_return();
    ((RuleReturnScope) exprReturn).Start = (object) this.input.LT(1);
    object obj = (object) null;
    try
    {
      int num;
      switch (((IIntStream) this.input).LA(1))
      {
        case 6:
          num = 1;
          break;
        case 12:
          num = 3;
          break;
        case 13:
          num = 2;
          break;
        case 14:
          num = 4;
          break;
        default:
          throw new NoViableAltException("", 2, 0, (IIntStream) this.input);
      }
      switch (num)
      {
        case 1:
          obj = this.adaptor.GetNilNode();
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_assignment_in_expr93);
          InterpParser.assignment_return assignmentReturn1 = this.assignment();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(obj, ((RuleReturnScope) assignmentReturn1).Tree);
          exprReturn.ret = (Element) assignmentReturn1?.ret;
          break;
        case 2:
          obj = this.adaptor.GetNilNode();
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_assignment_in_expr101);
          InterpParser.mat_assignment_return assignmentReturn2 = this.mat_assignment();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(obj, ((RuleReturnScope) assignmentReturn2).Tree);
          exprReturn.ret = (Element) assignmentReturn2?.ret;
          break;
        case 3:
          obj = this.adaptor.GetNilNode();
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_print_in_expr109);
          InterpParser.print_return printReturn = this.print();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(obj, ((RuleReturnScope) printReturn).Tree);
          exprReturn.ret = (Element) printReturn?.ret;
          break;
        case 4:
          obj = this.adaptor.GetNilNode();
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_print_in_expr117);
          InterpParser.mat_print_return matPrintReturn = this.mat_print();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(obj, ((RuleReturnScope) matPrintReturn).Tree);
          exprReturn.ret = (Element) matPrintReturn?.ret;
          break;
      }
      ((RuleReturnScope) exprReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) exprReturn).Tree = this.adaptor.RulePostProcessing(obj);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) exprReturn).Tree, (IToken) ((RuleReturnScope) exprReturn).Start, (IToken) ((RuleReturnScope) exprReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) exprReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) exprReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return exprReturn;
  }

  public InterpParser.assignment_return assignment()
  {
    InterpParser.assignment_return assignmentReturn = new InterpParser.assignment_return();
    ((RuleReturnScope) assignmentReturn).Start = (object) this.input.LT(1);
    assignmentReturn.ret = new AssignmentOperationElement();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_variable_in_assignment137);
      InterpParser.variable_return variableReturn = this.variable();
      --((BaseRecognizer) this).state.followingStackPointer;
      this.adaptor.AddChild(nilNode, ((RuleReturnScope) variableReturn).Tree);
      assignmentReturn.ret.setLhs(variableReturn?.ret);
      object obj1 = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 4, InterpParser.FOLLOW_ASSIGNMENT_in_assignment145));
      this.adaptor.AddChild(nilNode, obj1);
      int num;
      switch (((IIntStream) this.input).LA(1))
      {
        case 6:
          switch (((IIntStream) this.input).LA(2))
          {
            case 5:
              num = 1;
              break;
            case 8:
              num = 2;
              break;
            case 9:
              num = 3;
              break;
            default:
              throw new NoViableAltException("", 3, 1, (IIntStream) this.input);
          }
          break;
        case 7:
          switch (((IIntStream) this.input).LA(2))
          {
            case 5:
              num = 1;
              break;
            case 8:
              num = 2;
              break;
            case 9:
              num = 3;
              break;
            default:
              throw new NoViableAltException("", 3, 2, (IIntStream) this.input);
          }
          break;
        default:
          throw new NoViableAltException("", 3, 0, (IIntStream) this.input);
      }
      switch (num)
      {
        case 1:
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_var_or_int_literal_in_assignment153);
          InterpParser.var_or_int_literal_return intLiteralReturn = this.var_or_int_literal();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(nilNode, ((RuleReturnScope) intLiteralReturn).Tree);
          assignmentReturn.ret.setRhs(intLiteralReturn?.ret);
          break;
        case 2:
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_addition_in_assignment164);
          InterpParser.addition_return additionReturn = this.addition();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(nilNode, ((RuleReturnScope) additionReturn).Tree);
          assignmentReturn.ret.setRhs((Element) additionReturn?.ret);
          break;
        case 3:
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_multiplication_in_assignment175);
          InterpParser.multiplication_return multiplicationReturn = this.multiplication();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(nilNode, ((RuleReturnScope) multiplicationReturn).Tree);
          assignmentReturn.ret.setRhs((Element) multiplicationReturn?.ret);
          break;
      }
      object obj2 = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 5, InterpParser.FOLLOW_END_OF_STATEMENT_in_assignment189));
      this.adaptor.AddChild(nilNode, obj2);
      ((RuleReturnScope) assignmentReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) assignmentReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) assignmentReturn).Tree, (IToken) ((RuleReturnScope) assignmentReturn).Start, (IToken) ((RuleReturnScope) assignmentReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) assignmentReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) assignmentReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return assignmentReturn;
  }

  public InterpParser.var_or_int_literal_return var_or_int_literal()
  {
    InterpParser.var_or_int_literal_return intLiteralReturn1 = new InterpParser.var_or_int_literal_return();
    ((RuleReturnScope) intLiteralReturn1).Start = (object) this.input.LT(1);
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      int num;
      switch (((IIntStream) this.input).LA(1))
      {
        case 6:
          num = 1;
          break;
        case 7:
          num = 2;
          break;
        default:
          throw new NoViableAltException("", 4, 0, (IIntStream) this.input);
      }
      switch (num)
      {
        case 1:
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_variable_in_var_or_int_literal205);
          InterpParser.variable_return variableReturn = this.variable();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(nilNode, ((RuleReturnScope) variableReturn).Tree);
          intLiteralReturn1.ret = (Element) variableReturn?.ret;
          break;
        case 2:
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_int_literal_in_var_or_int_literal216);
          InterpParser.int_literal_return intLiteralReturn2 = this.int_literal();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(nilNode, ((RuleReturnScope) intLiteralReturn2).Tree);
          intLiteralReturn1.ret = (Element) intLiteralReturn2?.ret;
          break;
      }
      ((RuleReturnScope) intLiteralReturn1).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) intLiteralReturn1).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) intLiteralReturn1).Tree, (IToken) ((RuleReturnScope) intLiteralReturn1).Start, (IToken) ((RuleReturnScope) intLiteralReturn1).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) intLiteralReturn1).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) intLiteralReturn1).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return intLiteralReturn1;
  }

  public InterpParser.variable_return variable()
  {
    InterpParser.variable_return variableReturn = new InterpParser.variable_return();
    ((RuleReturnScope) variableReturn).Start = (object) this.input.LT(1);
    variableReturn.ret = new VariableElement();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      IToken itoken = (IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 6, InterpParser.FOLLOW_VARIABLE_in_variable239);
      object obj = this.adaptor.Create(itoken);
      this.adaptor.AddChild(nilNode, obj);
      variableReturn.ret.setText(itoken?.Text);
      ((RuleReturnScope) variableReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) variableReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) variableReturn).Tree, (IToken) ((RuleReturnScope) variableReturn).Start, (IToken) ((RuleReturnScope) variableReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) variableReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) variableReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return variableReturn;
  }

  public InterpParser.int_literal_return int_literal()
  {
    InterpParser.int_literal_return intLiteralReturn = new InterpParser.int_literal_return();
    ((RuleReturnScope) intLiteralReturn).Start = (object) this.input.LT(1);
    intLiteralReturn.ret = new IntegerElement();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      IToken itoken = (IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 7, InterpParser.FOLLOW_INT_LITERAL_in_int_literal263);
      object obj = this.adaptor.Create(itoken);
      this.adaptor.AddChild(nilNode, obj);
      intLiteralReturn.ret.setText(itoken?.Text);
      ((RuleReturnScope) intLiteralReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) intLiteralReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) intLiteralReturn).Tree, (IToken) ((RuleReturnScope) intLiteralReturn).Start, (IToken) ((RuleReturnScope) intLiteralReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) intLiteralReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) intLiteralReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return intLiteralReturn;
  }

  public InterpParser.addition_return addition()
  {
    InterpParser.addition_return additionReturn = new InterpParser.addition_return();
    ((RuleReturnScope) additionReturn).Start = (object) this.input.LT(1);
    additionReturn.ret = new AdditionOperationElement();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_var_or_int_literal_in_addition286);
      InterpParser.var_or_int_literal_return intLiteralReturn1 = this.var_or_int_literal();
      --((BaseRecognizer) this).state.followingStackPointer;
      this.adaptor.AddChild(nilNode, ((RuleReturnScope) intLiteralReturn1).Tree);
      additionReturn.ret.setLhs(intLiteralReturn1?.ret);
      object obj = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 8, InterpParser.FOLLOW_PLUS_in_addition295));
      this.adaptor.AddChild(nilNode, obj);
      ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_var_or_int_literal_in_addition304);
      InterpParser.var_or_int_literal_return intLiteralReturn2 = this.var_or_int_literal();
      --((BaseRecognizer) this).state.followingStackPointer;
      this.adaptor.AddChild(nilNode, ((RuleReturnScope) intLiteralReturn2).Tree);
      additionReturn.ret.setRhs(intLiteralReturn2?.ret);
      ((RuleReturnScope) additionReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) additionReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) additionReturn).Tree, (IToken) ((RuleReturnScope) additionReturn).Start, (IToken) ((RuleReturnScope) additionReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) additionReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) additionReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return additionReturn;
  }

  public InterpParser.multiplication_return multiplication()
  {
    InterpParser.multiplication_return multiplicationReturn = new InterpParser.multiplication_return();
    ((RuleReturnScope) multiplicationReturn).Start = (object) this.input.LT(1);
    multiplicationReturn.ret = new MultiplicationOperationElement();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_var_or_int_literal_in_multiplication327);
      InterpParser.var_or_int_literal_return intLiteralReturn1 = this.var_or_int_literal();
      --((BaseRecognizer) this).state.followingStackPointer;
      this.adaptor.AddChild(nilNode, ((RuleReturnScope) intLiteralReturn1).Tree);
      multiplicationReturn.ret.setLhs(intLiteralReturn1?.ret);
      object obj = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 9, InterpParser.FOLLOW_MULT_in_multiplication336));
      this.adaptor.AddChild(nilNode, obj);
      ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_var_or_int_literal_in_multiplication345);
      InterpParser.var_or_int_literal_return intLiteralReturn2 = this.var_or_int_literal();
      --((BaseRecognizer) this).state.followingStackPointer;
      this.adaptor.AddChild(nilNode, ((RuleReturnScope) intLiteralReturn2).Tree);
      multiplicationReturn.ret.setRhs(intLiteralReturn2?.ret);
      ((RuleReturnScope) multiplicationReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) multiplicationReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) multiplicationReturn).Tree, (IToken) ((RuleReturnScope) multiplicationReturn).Start, (IToken) ((RuleReturnScope) multiplicationReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) multiplicationReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) multiplicationReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return multiplicationReturn;
  }

  public InterpParser.print_return print()
  {
    InterpParser.print_return printReturn = new InterpParser.print_return();
    ((RuleReturnScope) printReturn).Start = (object) this.input.LT(1);
    printReturn.ret = new PrintOperationElement();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      object obj1 = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 12, InterpParser.FOLLOW_12_in_print366));
      this.adaptor.AddChild(nilNode, obj1);
      ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_var_or_int_literal_in_print368);
      InterpParser.var_or_int_literal_return intLiteralReturn = this.var_or_int_literal();
      --((BaseRecognizer) this).state.followingStackPointer;
      this.adaptor.AddChild(nilNode, ((RuleReturnScope) intLiteralReturn).Tree);
      printReturn.ret.setChildElement(intLiteralReturn?.ret);
      object obj2 = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 5, InterpParser.FOLLOW_END_OF_STATEMENT_in_print371));
      this.adaptor.AddChild(nilNode, obj2);
      ((RuleReturnScope) printReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) printReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) printReturn).Tree, (IToken) ((RuleReturnScope) printReturn).Start, (IToken) ((RuleReturnScope) printReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) printReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) printReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return printReturn;
  }

  public InterpParser.mat_assignment_return mat_assignment()
  {
    InterpParser.mat_assignment_return assignmentReturn = new InterpParser.mat_assignment_return();
    ((RuleReturnScope) assignmentReturn).Start = (object) this.input.LT(1);
    assignmentReturn.ret = new MatrixAssignmentOperationElement();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_name_in_mat_assignment395);
      InterpParser.mat_name_return matNameReturn = this.mat_name();
      --((BaseRecognizer) this).state.followingStackPointer;
      this.adaptor.AddChild(nilNode, ((RuleReturnScope) matNameReturn).Tree);
      assignmentReturn.ret.setLhs(matNameReturn?.ret);
      object obj1 = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 4, InterpParser.FOLLOW_ASSIGNMENT_in_mat_assignment403));
      this.adaptor.AddChild(nilNode, obj1);
      int num;
      switch (((IIntStream) this.input).LA(1))
      {
        case 10:
          num = 1;
          break;
        case 13:
          if (((IIntStream) this.input).LA(2) != 6)
            throw new NoViableAltException("", 5, 1, (IIntStream) this.input);
          switch (((IIntStream) this.input).LA(3))
          {
            case 5:
              num = 1;
              break;
            case 8:
              num = 2;
              break;
            case 9:
              num = 3;
              break;
            default:
              throw new NoViableAltException("", 5, 3, (IIntStream) this.input);
          }
          break;
        default:
          throw new NoViableAltException("", 5, 0, (IIntStream) this.input);
      }
      switch (num)
      {
        case 1:
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_var_in_mat_assignment411);
          InterpParser.mat_var_return matVarReturn = this.mat_var();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(nilNode, ((RuleReturnScope) matVarReturn).Tree);
          assignmentReturn.ret.setRhs(matVarReturn?.ret);
          break;
        case 2:
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_addition_in_mat_assignment421);
          InterpParser.mat_addition_return matAdditionReturn = this.mat_addition();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(nilNode, ((RuleReturnScope) matAdditionReturn).Tree);
          assignmentReturn.ret.setRhs((Element) matAdditionReturn?.ret);
          break;
        case 3:
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_multiplication_in_mat_assignment432);
          InterpParser.mat_multiplication_return multiplicationReturn = this.mat_multiplication();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(nilNode, ((RuleReturnScope) multiplicationReturn).Tree);
          assignmentReturn.ret.setRhs((Element) multiplicationReturn?.ret);
          break;
      }
      object obj2 = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 5, InterpParser.FOLLOW_END_OF_STATEMENT_in_mat_assignment443));
      this.adaptor.AddChild(nilNode, obj2);
      ((RuleReturnScope) assignmentReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) assignmentReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) assignmentReturn).Tree, (IToken) ((RuleReturnScope) assignmentReturn).Start, (IToken) ((RuleReturnScope) assignmentReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) assignmentReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) assignmentReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return assignmentReturn;
  }

  public InterpParser.mat_var_return mat_var()
  {
    InterpParser.mat_var_return matVarReturn = new InterpParser.mat_var_return();
    ((RuleReturnScope) matVarReturn).Start = (object) this.input.LT(1);
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      int num;
      switch (((IIntStream) this.input).LA(1))
      {
        case 10:
          num = 2;
          break;
        case 13:
          num = 1;
          break;
        default:
          throw new NoViableAltException("", 6, 0, (IIntStream) this.input);
      }
      switch (num)
      {
        case 1:
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_name_in_mat_var461);
          InterpParser.mat_name_return matNameReturn = this.mat_name();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(nilNode, ((RuleReturnScope) matNameReturn).Tree);
          matVarReturn.ret = (Element) matNameReturn?.ret;
          break;
        case 2:
          ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_data_in_mat_var472);
          InterpParser.mat_data_return matDataReturn = this.mat_data();
          --((BaseRecognizer) this).state.followingStackPointer;
          this.adaptor.AddChild(nilNode, ((RuleReturnScope) matDataReturn).Tree);
          matVarReturn.ret = (Element) matDataReturn?.ret;
          break;
      }
      ((RuleReturnScope) matVarReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) matVarReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) matVarReturn).Tree, (IToken) ((RuleReturnScope) matVarReturn).Start, (IToken) ((RuleReturnScope) matVarReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) matVarReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) matVarReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return matVarReturn;
  }

  public InterpParser.mat_name_return mat_name()
  {
    InterpParser.mat_name_return matNameReturn = new InterpParser.mat_name_return();
    ((RuleReturnScope) matNameReturn).Start = (object) this.input.LT(1);
    matNameReturn.ret = new MatrixName();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      object obj1 = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 13, InterpParser.FOLLOW_13_in_mat_name495));
      this.adaptor.AddChild(nilNode, obj1);
      IToken itoken = (IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 6, InterpParser.FOLLOW_VARIABLE_in_mat_name497);
      object obj2 = this.adaptor.Create(itoken);
      this.adaptor.AddChild(nilNode, obj2);
      matNameReturn.ret.setText(itoken?.Text);
      ((RuleReturnScope) matNameReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) matNameReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) matNameReturn).Tree, (IToken) ((RuleReturnScope) matNameReturn).Start, (IToken) ((RuleReturnScope) matNameReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) matNameReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) matNameReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return matNameReturn;
  }

  public InterpParser.mat_data_return mat_data()
  {
    InterpParser.mat_data_return matDataReturn = new InterpParser.mat_data_return();
    ((RuleReturnScope) matDataReturn).Start = (object) this.input.LT(1);
    matDataReturn.ret = new MatrixData();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      IToken itoken = (IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 10, InterpParser.FOLLOW_MAT_DATA_in_mat_data518);
      object obj = this.adaptor.Create(itoken);
      this.adaptor.AddChild(nilNode, obj);
      matDataReturn.ret.setText(itoken?.Text);
      ((RuleReturnScope) matDataReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) matDataReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) matDataReturn).Tree, (IToken) ((RuleReturnScope) matDataReturn).Start, (IToken) ((RuleReturnScope) matDataReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) matDataReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) matDataReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return matDataReturn;
  }

  public InterpParser.mat_addition_return mat_addition()
  {
    InterpParser.mat_addition_return matAdditionReturn = new InterpParser.mat_addition_return();
    ((RuleReturnScope) matAdditionReturn).Start = (object) this.input.LT(1);
    matAdditionReturn.ret = new MatrixAdditionOperationElement();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_name_in_mat_addition541);
      InterpParser.mat_name_return matNameReturn1 = this.mat_name();
      --((BaseRecognizer) this).state.followingStackPointer;
      this.adaptor.AddChild(nilNode, ((RuleReturnScope) matNameReturn1).Tree);
      matAdditionReturn.ret.setLhs((Element) matNameReturn1?.ret);
      object obj = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 8, InterpParser.FOLLOW_PLUS_in_mat_addition550));
      this.adaptor.AddChild(nilNode, obj);
      ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_name_in_mat_addition559);
      InterpParser.mat_name_return matNameReturn2 = this.mat_name();
      --((BaseRecognizer) this).state.followingStackPointer;
      this.adaptor.AddChild(nilNode, ((RuleReturnScope) matNameReturn2).Tree);
      matAdditionReturn.ret.setRhs((Element) matNameReturn2?.ret);
      ((RuleReturnScope) matAdditionReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) matAdditionReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) matAdditionReturn).Tree, (IToken) ((RuleReturnScope) matAdditionReturn).Start, (IToken) ((RuleReturnScope) matAdditionReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) matAdditionReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) matAdditionReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return matAdditionReturn;
  }

  public InterpParser.mat_multiplication_return mat_multiplication()
  {
    InterpParser.mat_multiplication_return multiplicationReturn = new InterpParser.mat_multiplication_return();
    ((RuleReturnScope) multiplicationReturn).Start = (object) this.input.LT(1);
    multiplicationReturn.ret = new MatrixMultiplicationOperationElement();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_name_in_mat_multiplication582);
      InterpParser.mat_name_return matNameReturn1 = this.mat_name();
      --((BaseRecognizer) this).state.followingStackPointer;
      this.adaptor.AddChild(nilNode, ((RuleReturnScope) matNameReturn1).Tree);
      multiplicationReturn.ret.setLhs((Element) matNameReturn1?.ret);
      object obj = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 9, InterpParser.FOLLOW_MULT_in_mat_multiplication591));
      this.adaptor.AddChild(nilNode, obj);
      ((BaseRecognizer) this).PushFollow(InterpParser.FOLLOW_mat_name_in_mat_multiplication600);
      InterpParser.mat_name_return matNameReturn2 = this.mat_name();
      --((BaseRecognizer) this).state.followingStackPointer;
      this.adaptor.AddChild(nilNode, ((RuleReturnScope) matNameReturn2).Tree);
      multiplicationReturn.ret.setRhs((Element) matNameReturn2?.ret);
      ((RuleReturnScope) multiplicationReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) multiplicationReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) multiplicationReturn).Tree, (IToken) ((RuleReturnScope) multiplicationReturn).Start, (IToken) ((RuleReturnScope) multiplicationReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) multiplicationReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) multiplicationReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return multiplicationReturn;
  }

  public InterpParser.mat_print_return mat_print()
  {
    InterpParser.mat_print_return matPrintReturn = new InterpParser.mat_print_return();
    ((RuleReturnScope) matPrintReturn).Start = (object) this.input.LT(1);
    matPrintReturn.ret = new PrintMatOperationElement();
    try
    {
      object nilNode = this.adaptor.GetNilNode();
      object obj1 = this.adaptor.Create((IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 14, InterpParser.FOLLOW_14_in_mat_print621));
      this.adaptor.AddChild(nilNode, obj1);
      IToken itoken = (IToken) ((BaseRecognizer) this).Match((IIntStream) this.input, 6, InterpParser.FOLLOW_VARIABLE_in_mat_print623);
      object obj2 = this.adaptor.Create(itoken);
      this.adaptor.AddChild(nilNode, obj2);
      matPrintReturn.ret.setText(itoken?.Text);
      ((RuleReturnScope) matPrintReturn).Stop = (object) this.input.LT(-1);
      ((RuleReturnScope) matPrintReturn).Tree = this.adaptor.RulePostProcessing(nilNode);
      this.adaptor.SetTokenBoundaries(((RuleReturnScope) matPrintReturn).Tree, (IToken) ((RuleReturnScope) matPrintReturn).Start, (IToken) ((RuleReturnScope) matPrintReturn).Stop);
    }
    catch (RecognitionException ex)
    {
      ((BaseRecognizer) this).ReportError(ex);
      ((BaseRecognizer) this).Recover((IIntStream) this.input, ex);
      ((RuleReturnScope) matPrintReturn).Tree = this.adaptor.ErrorNode(this.input, (IToken) ((RuleReturnScope) matPrintReturn).Start, this.input.LT(-1), ex);
    }
    finally
    {
    }
    return matPrintReturn;
  }

  private void InitializeCyclicDFAs()
  {
  }

  public class program_return : ParserRuleReturnScope
  {
    public List<Element> ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class expr_return : ParserRuleReturnScope
  {
    public Element ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class assignment_return : ParserRuleReturnScope
  {
    public AssignmentOperationElement ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class var_or_int_literal_return : ParserRuleReturnScope
  {
    public Element ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class variable_return : ParserRuleReturnScope
  {
    public VariableElement ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class int_literal_return : ParserRuleReturnScope
  {
    public IntegerElement ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class addition_return : ParserRuleReturnScope
  {
    public AdditionOperationElement ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class multiplication_return : ParserRuleReturnScope
  {
    public MultiplicationOperationElement ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class print_return : ParserRuleReturnScope
  {
    public PrintOperationElement ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class mat_assignment_return : ParserRuleReturnScope
  {
    public MatrixAssignmentOperationElement ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class mat_var_return : ParserRuleReturnScope
  {
    public Element ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class mat_name_return : ParserRuleReturnScope
  {
    public MatrixName ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class mat_data_return : ParserRuleReturnScope
  {
    public MatrixData ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class mat_addition_return : ParserRuleReturnScope
  {
    public MatrixAdditionOperationElement ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class mat_multiplication_return : ParserRuleReturnScope
  {
    public MatrixMultiplicationOperationElement ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }

  public class mat_print_return : ParserRuleReturnScope
  {
    public PrintMatOperationElement ret;
    private object tree;

    public virtual object Tree
    {
      get => this.tree;
      set => this.tree = value;
    }
  }
}
