// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.HttpUnhandledOperationInvoker
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Diagnostics;
using System.IO;
using System.Net;
using System.ServiceModel.Channels;
using System.ServiceModel.Diagnostics;
using System.ServiceModel.Web;
using System.Xml.Linq;

namespace System.ServiceModel.Dispatcher
{
  internal class HttpUnhandledOperationInvoker : IOperationInvoker
  {
    private const string HtmlContentType = "text/html; charset=UTF-8";

    public bool IsSynchronous => true;

    public object[] AllocateInputs() => new object[1];

    public Uri HelpUri { get; set; }

    public object Invoke(object instance, object[] inputs, out object[] outputs)
    {
      Message input = inputs[0] as Message;
      outputs = (object[]) null;
      if (input == null)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.HttpUnhandledOperationInvokerCalledWithoutMessage)));
      }
      Uri newLocation = (Uri) null;
      Uri to = input.Headers.To;
      if (input.Properties.ContainsKey("WebHttpRedirect"))
        newLocation = input.Properties["WebHttpRedirect"] as Uri;
      if (newLocation != (Uri) null && to != (Uri) null)
      {
        Message streamResponse = WebOperationContext.Current.CreateStreamResponse((Action<Stream>) (s => HelpHtmlBuilder.CreateTransferRedirectPage(to.AbsoluteUri, newLocation.AbsoluteUri).Save(s, SaveOptions.OmitDuplicateNamespaces)), "text/html");
        WebOperationContext.Current.OutgoingResponse.Location = newLocation.AbsoluteUri;
        WebOperationContext.Current.OutgoingResponse.StatusCode = HttpStatusCode.TemporaryRedirect;
        WebOperationContext.Current.OutgoingResponse.ContentType = "text/html; charset=UTF-8";
        if (DiagnosticUtility.ShouldTraceInformation)
        {
          // ISSUE: reference to a compiler-generated method
          TraceUtility.TraceEvent(TraceEventType.Information, 983079, SR2.GetString(SR2.TraceCodeWebRequestRedirect, (object) to, (object) newLocation));
        }
        return (object) streamResponse;
      }
      bool flag = false;
      if (input.Properties.ContainsKey("UriMatched"))
        flag = (bool) input.Properties["UriMatched"];
      Uri helpUri = this.HelpUri != (Uri) null ? UriTemplate.RewriteUri(this.HelpUri, WebOperationContext.Current.IncomingRequest.Headers[HttpRequestHeader.Host]) : (Uri) null;
      Message streamResponse1;
      if (flag)
      {
        WebHttpDispatchOperationSelectorData property = (WebHttpDispatchOperationSelectorData) null;
        if (input.Properties.TryGetValue<WebHttpDispatchOperationSelectorData>("HttpOperationSelectorData", out property))
          WebOperationContext.Current.OutgoingResponse.Headers[HttpResponseHeader.Allow] = property.AllowHeader;
        streamResponse1 = WebOperationContext.Current.CreateStreamResponse((Action<Stream>) (s => HelpHtmlBuilder.CreateMethodNotAllowedPage(helpUri).Save(s, SaveOptions.OmitDuplicateNamespaces)), "text/html");
      }
      else
        streamResponse1 = WebOperationContext.Current.CreateStreamResponse((Action<Stream>) (s => HelpHtmlBuilder.CreateEndpointNotFound(helpUri).Save(s, SaveOptions.OmitDuplicateNamespaces)), "text/html");
      WebOperationContext.Current.OutgoingResponse.StatusCode = flag ? HttpStatusCode.MethodNotAllowed : HttpStatusCode.NotFound;
      WebOperationContext.Current.OutgoingResponse.ContentType = "text/html; charset=UTF-8";
      try
      {
        if (!flag)
        {
          if (Debugger.IsAttached)
          {
            // ISSUE: reference to a compiler-generated method
            throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.WebRequestDidNotMatchOperation, (object) OperationContext.Current.IncomingMessageHeaders.To)));
          }
          // ISSUE: reference to a compiler-generated method
          DiagnosticUtility.TraceHandledException((Exception) new InvalidOperationException(SR2.GetString(SR2.WebRequestDidNotMatchOperation, (object) OperationContext.Current.IncomingMessageHeaders.To)), TraceEventType.Warning);
        }
        else
        {
          if (Debugger.IsAttached)
          {
            // ISSUE: reference to a compiler-generated method
            throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.WebRequestDidNotMatchMethod, (object) WebOperationContext.Current.IncomingRequest.Method, (object) OperationContext.Current.IncomingMessageHeaders.To)));
          }
          // ISSUE: reference to a compiler-generated method
          DiagnosticUtility.TraceHandledException((Exception) new InvalidOperationException(SR2.GetString(SR2.WebRequestDidNotMatchMethod, (object) WebOperationContext.Current.IncomingRequest.Method, (object) OperationContext.Current.IncomingMessageHeaders.To)), TraceEventType.Warning);
        }
      }
      catch (InvalidOperationException ex)
      {
      }
      return (object) streamResponse1;
    }

    public IAsyncResult InvokeBegin(
      object instance,
      object[] inputs,
      AsyncCallback callback,
      object state)
    {
      throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException());
    }

    public object InvokeEnd(object instance, out object[] outputs, IAsyncResult result) => throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException());
  }
}
