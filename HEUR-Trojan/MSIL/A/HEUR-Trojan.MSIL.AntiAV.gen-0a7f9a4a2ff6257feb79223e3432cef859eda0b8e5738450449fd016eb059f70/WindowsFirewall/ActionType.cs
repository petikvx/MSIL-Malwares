// Decompiled with JetBrains decompiler
// Type: WindowsFirewall.ActionType
// Assembly: Windows Firewall, Version=12.5.2.3, Culture=neutral, PublicKeyToken=null
// MVID: B2F50818-876B-4F01-AE88-291FA22C03A1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan.MSIL.AntiAV.gen-0a7f9a4a2ff6257feb79223e3432cef859eda0b8e5738450449fd016eb059f70.exe

using System;
using System.Reflection;
using System.Reflection.Emit;

namespace WindowsFirewall
{
  internal class ActionType
  {
    private static readonly int currentColor;
    private static readonly int generatorPosition;
    private static readonly int nextData;
    private static readonly int messageHandle;
    private static readonly int firstLine;
    private static readonly int lastFont;
    private static readonly int reasonLength;
    private static readonly int filterEnabled;
    private static readonly int lineToken;
    private static readonly int rootKeywords;
    private static readonly int userDataMap;
    private static readonly int variableID;
    private static readonly int dataToken;
    private static readonly int lastLock;
    private static readonly ModuleHandle currentColor;

    static ActionType()
    {
      if ((object) typeof (MulticastDelegate) == null)
        return;
label_1:
      switch (1)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ActionType.\u002Ecctor);
          }
          ActionType.currentColor = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
          break;
      }
    }

    public static void SelectToolbox(int currentColor, int generatorPosition, int nextData)
    {
      Type typeFromHandle;
      ConstructorInfo con;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(ActionType.currentColor.ResolveTypeHandle(currentColor));
        object methodFromHandle;
        if (nextData == 16777215)
        {
label_1:
          switch (6)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (ActionType.SelectToolbox);
              }
              methodFromHandle = (object) MethodBase.GetMethodFromHandle(ActionType.currentColor.ResolveMethodHandle(generatorPosition));
              break;
          }
        }
        else
          methodFromHandle = (object) MethodBase.GetMethodFromHandle(ActionType.currentColor.ResolveMethodHandle(generatorPosition), ActionType.currentColor.ResolveTypeHandle(nextData));
        con = (ConstructorInfo) methodFromHandle;
      }
      catch (Exception ex)
      {
        throw;
      }
      foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        try
        {
          ParameterInfo[] parameters = con.GetParameters();
          int length = parameters.Length;
          Type[] parameterTypes = new Type[length];
          for (int index = 0; index < length; ++index)
            parameterTypes[index] = parameters[index].ParameterType;
label_13:
          switch (1)
          {
            case 0:
              goto label_13;
            default:
              DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, con.DeclaringType, parameterTypes, typeFromHandle, true);
              ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
              if (length > 0)
              {
label_15:
                switch (3)
                {
                  case 0:
                    goto label_15;
                  default:
                    ilGenerator.Emit(OpCodes.Ldarg_0);
                    break;
                }
              }
              if (length > 1)
              {
label_18:
                switch (6)
                {
                  case 0:
                    goto label_18;
                  default:
                    ilGenerator.Emit(OpCodes.Ldarg_1);
                    break;
                }
              }
              if (length > 2)
              {
label_21:
                switch (3)
                {
                  case 0:
                    goto label_21;
                  default:
                    ilGenerator.Emit(OpCodes.Ldarg_2);
                    break;
                }
              }
              if (length > 3)
              {
label_24:
                switch (3)
                {
                  case 0:
                    goto label_24;
                  default:
                    ilGenerator.Emit(OpCodes.Ldarg_3);
                    break;
                }
              }
              if (length > 4)
              {
label_27:
                switch (6)
                {
                  case 0:
                    goto label_27;
                  default:
                    for (int index = 4; index < length; ++index)
                      ilGenerator.Emit(OpCodes.Ldarg_S, index);
label_31:
                    switch (4)
                    {
                      case 0:
                        goto label_31;
                    }
                    break;
                }
              }
              ilGenerator.Emit(OpCodes.Newobj, con);
              ilGenerator.Emit(OpCodes.Ret);
              Delegate @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
              field.SetValue((object) null, (object) @delegate);
              continue;
          }
        }
        catch (Exception ex)
        {
        }
      }
label_36:
      switch (4)
      {
        case 0:
          goto label_36;
      }
    }
  }
}
