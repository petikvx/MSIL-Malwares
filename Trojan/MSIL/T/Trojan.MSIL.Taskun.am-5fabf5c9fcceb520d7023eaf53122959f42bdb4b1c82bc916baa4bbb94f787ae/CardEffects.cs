// Decompiled with JetBrains decompiler
// Type: _7Wonders.CardEffects
// Assembly: No, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A0F00D95-9767-4554-B865-5A1BEBFA378F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\Trojan.MSIL.Taskun.am-5fabf5c9fcceb520d7023eaf53122959f42bdb4b1c82bc916baa4bbb94f787ae.exe

namespace _7Wonders
{
  public static class CardEffects
  {
    public static void effects(int effect, Player thePlayer, GameMaster theMaster)
    {
      int nPlayers = theMaster.nPlayers;
      switch (effect)
      {
        case 1:
          ++thePlayer.resources[4];
          break;
        case 2:
          ++thePlayer.resources[1];
          break;
        case 3:
          ++thePlayer.resources[3];
          break;
        case 4:
          ++thePlayer.resources[2];
          break;
        case 7:
          ++thePlayer.resources[7];
          break;
        case 8:
          ++thePlayer.resources[5];
          break;
        case 9:
          ++thePlayer.resources[6];
          break;
        case 10:
          thePlayer.basicDiscountWest = 1;
          break;
        case 11:
          thePlayer.basicDiscountEast = 1;
          break;
        case 12:
          thePlayer.luxuryDiscount = 1;
          break;
        case 13:
          ++thePlayer.militaryStrength;
          break;
        case 15:
          thePlayer.resources[0] += 5;
          break;
        case 19:
          thePlayer.resources[4] += 2;
          break;
        case 20:
          thePlayer.resources[1] += 2;
          break;
        case 21:
          thePlayer.resources[3] += 2;
          break;
        case 22:
          thePlayer.resources[2] += 2;
          break;
        case 25:
          int num1 = 0;
          int index1 = (thePlayer.position + nPlayers - 1) % nPlayers;
          int num2 = num1 + theMaster.Players[index1].nColors[5];
          int index2 = (thePlayer.position + 1) % nPlayers;
          int num3 = num2 + theMaster.Players[index2].nColors[5] + thePlayer.nColors[5];
          thePlayer.resources[0] += num3;
          break;
        case 26:
          thePlayer.militaryStrength += 2;
          break;
        case 27:
          int num4 = 0;
          int index3 = (thePlayer.position + nPlayers - 1) % nPlayers;
          int num5 = num4 + theMaster.Players[index3].nColors[3];
          int index4 = (thePlayer.position + 1) % nPlayers;
          int num6 = num5 + theMaster.Players[index4].nColors[3] + thePlayer.nColors[3];
          thePlayer.resources[0] += num6 * 2;
          break;
        case 28:
          thePlayer.resources[0] += thePlayer.nColors[2];
          break;
        case 29:
          thePlayer.resources[0] += thePlayer.nColors[5];
          break;
        case 30:
          thePlayer.resources[0] += 3 * thePlayer.nColors[8];
          break;
        case 31:
          thePlayer.militaryStrength += 3;
          break;
        case 32:
          thePlayer.resources[0] += 2 * thePlayer.nColors[3];
          break;
        case 33:
          thePlayer.scienceSetScore = 10;
          break;
        case 36:
          thePlayer.leaderDiscount = 6;
          break;
        case 37:
          thePlayer.haveLeader[0] = true;
          break;
        case 38:
          thePlayer.haveLeader[1] = true;
          break;
        case 39:
          ++thePlayer.militaryStrength;
          break;
        case 40:
          thePlayer.militaryStrength += 2;
          break;
        case 41:
          thePlayer.haveLeader[2] = true;
          break;
        case 42:
          thePlayer.haveLeader[3] = true;
          break;
        case 43:
          thePlayer.haveLeader[4] = true;
          break;
        case 44:
          thePlayer.haveLeader[5] = true;
          break;
        case 45:
          ++thePlayer.decisions[4];
          break;
        case 46:
          thePlayer.resources[0] += 6;
          break;
        case 51:
          thePlayer.haveLeader[6] = true;
          break;
        case 52:
        case 58:
        case 65:
        case 72:
        case 90:
          ++thePlayer.diplomacy;
          break;
        case 53:
          thePlayer.haveLeader[7] = true;
          break;
        case 54:
          thePlayer.haveLeader[9] = true;
          break;
        case 55:
          thePlayer.haveLeader[10] = true;
          break;
        case 56:
          thePlayer.militaryStrength += 2;
          break;
        case 57:
          for (int index5 = 0; index5 < nPlayers; ++index5)
          {
            if (index5 != thePlayer.position)
              ++theMaster.Players[index5].imminentLoss;
          }
          break;
        case 59:
          thePlayer.imminentLoss -= 6;
          int index6 = (thePlayer.position + nPlayers - 1) % nPlayers;
          --theMaster.Players[index6].imminentLoss;
          int index7 = (thePlayer.position + 1) % nPlayers;
          --theMaster.Players[index7].imminentLoss;
          break;
        case 60:
          thePlayer.haveLeader[13] = true;
          break;
        case 61:
          thePlayer.haveLeader[11] = true;
          break;
        case 63:
          thePlayer.militaryStrength += 3;
          break;
        case 64:
          for (int index8 = 0; index8 < nPlayers; ++index8)
          {
            if (index8 != thePlayer.position)
              theMaster.Players[index8].imminentLoss += 2;
          }
          break;
        case 66:
          thePlayer.imminentLoss -= 9;
          int index9 = (thePlayer.position + nPlayers - 1) % nPlayers;
          theMaster.Players[index9].imminentLoss -= 2;
          int index10 = (thePlayer.position + 1) % nPlayers;
          theMaster.Players[index10].imminentLoss -= 2;
          break;
        case 68:
          for (int index11 = 0; index11 < nPlayers; ++index11)
          {
            if (index11 != thePlayer.position)
              theMaster.Players[index11].imminentLoss += theMaster.Players[index11].wins;
          }
          break;
        case 69:
          thePlayer.haveLeader[15] = true;
          break;
        case 70:
          thePlayer.militaryStrength += 5;
          break;
        case 71:
          for (int index12 = 0; index12 < nPlayers; ++index12)
          {
            if (index12 != thePlayer.position)
              theMaster.Players[index12].imminentLoss += 3;
          }
          break;
        case 73:
          for (int index13 = 0; index13 < nPlayers; ++index13)
          {
            if (index13 != thePlayer.position)
              theMaster.Players[index13].imminentLoss += theMaster.Players[index13].wins;
          }
          break;
        case 74:
          for (int index14 = 0; index14 < nPlayers; ++index14)
          {
            if (index14 != thePlayer.position)
              theMaster.Players[index14].imminentLoss += theMaster.Players[index14].nColors[8];
          }
          break;
        case 75:
          thePlayer.resources[0] += thePlayer.wins;
          break;
        case 78:
          for (int index15 = 0; index15 < nPlayers; ++index15)
          {
            if (index15 != thePlayer.position)
              theMaster.Players[index15].imminentLoss += 3;
          }
          break;
        case 79:
          thePlayer.babylon = true;
          break;
        case 82:
          thePlayer.basicDiscountEast = 1;
          thePlayer.basicDiscountWest = 1;
          break;
        case 83:
          ++thePlayer.decisions[4];
          break;
        case 84:
          thePlayer.resources[0] += 4;
          break;
        case 85:
          ++thePlayer.militaryStrength;
          thePlayer.resources[0] += 3;
          break;
        case 86:
          ++thePlayer.militaryStrength;
          thePlayer.resources[0] += 4;
          break;
        case 87:
          thePlayer.resources[0] += 5;
          theMaster.dealRome(thePlayer.position);
          break;
        case 88:
          thePlayer.rome = true;
          break;
        case 89:
          for (int index16 = 0; index16 < nPlayers; ++index16)
          {
            if (index16 != thePlayer.position)
              theMaster.Players[index16].imminentLoss += 2;
          }
          break;
      }
    }

    public static void scoreEffects(
      int effect,
      Player thePlayer,
      GameMaster theMaster,
      Card aCard)
    {
      int nPlayers = theMaster.nPlayers;
      int index1 = 3;
      string color = aCard.color;
      if (!(color == "White"))
      {
        if (!(color == "Black"))
        {
          if (!(color == "Yellow"))
          {
            if (!(color == "Blue"))
            {
              if (!(color == "Wondrous"))
              {
                if (color == "Purple")
                  index1 = 6;
              }
              else
                index1 = 2;
            }
            else
              index1 = 3;
          }
          else
            index1 = 4;
        }
        else
          index1 = 8;
      }
      else
        index1 = 7;
      switch (effect)
      {
        case 1:
          ++thePlayer.totalScore[index1];
          break;
        case 2:
          thePlayer.totalScore[index1] += 2;
          break;
        case 3:
          thePlayer.totalScore[index1] += 3;
          break;
        case 4:
          thePlayer.totalScore[index1] += 4;
          break;
        case 5:
          thePlayer.totalScore[index1] += 5;
          break;
        case 6:
          thePlayer.totalScore[index1] += 6;
          break;
        case 7:
          thePlayer.totalScore[index1] += 7;
          break;
        case 8:
          thePlayer.totalScore[index1] += 8;
          break;
        case 9:
          thePlayer.totalScore[index1] += thePlayer.nColors[2];
          break;
        case 10:
        case 25:
        case 26:
        case 27:
          ++thePlayer.sciences[aCard.symbol - 1];
          break;
        case 11:
          thePlayer.totalScore[index1] += thePlayer.nColors[5];
          break;
        case 12:
          thePlayer.totalScore[index1] += thePlayer.nColors[8];
          break;
        case 13:
          thePlayer.totalScore[index1] += 2 * thePlayer.nColors[3];
          break;
        case 14:
          thePlayer.totalScore[index1] += 2 * thePlayer.nColors[8];
          break;
        case 15:
          thePlayer.totalScore[index1] += thePlayer.wins;
          break;
        case 16:
          int num1 = 10;
          if (num1 > thePlayer.nColors[4])
            num1 = thePlayer.nColors[4];
          if (num1 > thePlayer.nColors[6])
            num1 = thePlayer.nColors[6];
          if (num1 > thePlayer.nColors[7])
            num1 = thePlayer.nColors[7];
          thePlayer.totalScore[index1] += 3 * num1;
          break;
        case 17:
          int num2 = 3;
          if (num2 > thePlayer.nColors[2])
            num2 = thePlayer.nColors[2];
          if (num2 > thePlayer.nColors[3])
            num2 = thePlayer.nColors[3];
          if (num2 > thePlayer.nColors[4])
            num2 = thePlayer.nColors[4];
          if (num2 > thePlayer.nColors[5])
            num2 = thePlayer.nColors[5];
          if (num2 > thePlayer.nColors[6])
            num2 = thePlayer.nColors[6];
          if (num2 > thePlayer.nColors[7])
            num2 = thePlayer.nColors[7];
          if (num2 > thePlayer.nColors[9])
            num2 = thePlayer.nColors[9];
          thePlayer.totalScore[index1] += 7 * num2;
          break;
        case 18:
          thePlayer.totalScore[index1] += thePlayer.nColors[4];
          break;
        case 19:
          thePlayer.totalScore[index1] += thePlayer.nColors[7];
          break;
        case 20:
          thePlayer.totalScore[index1] += thePlayer.nColors[2];
          break;
        case 21:
          thePlayer.totalScore[index1] += thePlayer.nColors[5];
          break;
        case 22:
          thePlayer.totalScore[index1] += 2 * thePlayer.nColors[6];
          break;
        case 23:
          thePlayer.totalScore[index1] += 2 * thePlayer.nColors[3];
          break;
        case 24:
          thePlayer.totalScore[index1] += 2 * thePlayer.nColors[9];
          break;
        case 28:
          thePlayer.totalScore[index1] += thePlayer.nColors[1];
          break;
        case 29:
        case 30:
        case 31:
          ++thePlayer.decisions[1];
          break;
        case 32:
          thePlayer.totalScore[index1] += thePlayer.wins;
          break;
        case 33:
          thePlayer.totalScore[index1] += thePlayer.nColors[1];
          break;
        case 34:
          int index2 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index2].nColors[2];
          int index3 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index3].nColors[2];
          break;
        case 35:
          int index4 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += 2 * theMaster.Players[index4].nColors[3];
          int index5 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += 2 * theMaster.Players[index5].nColors[3];
          break;
        case 36:
          int index6 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index6].nColors[5];
          int index7 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index7].nColors[5];
          break;
        case 37:
          int index8 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index8].nColors[4];
          int index9 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index9].nColors[4];
          break;
        case 38:
          int index10 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index10].nColors[6];
          int index11 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index11].nColors[6];
          break;
        case 39:
          int index12 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index12].losses;
          int index13 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index13].losses;
          break;
        case 40:
          thePlayer.totalScore[index1] += thePlayer.nColors[2];
          thePlayer.totalScore[index1] += thePlayer.nColors[3];
          thePlayer.totalScore[index1] += thePlayer.nColors[9];
          break;
        case 41:
          ++thePlayer.decisions[3];
          break;
        case 42:
          int index14 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index14].nColors[7];
          int index15 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index15].nColors[7];
          break;
        case 43:
          int index16 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index16].nColors[8];
          int index17 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index17].nColors[8];
          thePlayer.totalScore[index1] += thePlayer.nColors[8];
          break;
        case 44:
          thePlayer.totalScore[index1] += thePlayer.resources[0] / 3;
          break;
        case 45:
          ++thePlayer.decisions[2];
          break;
        case 46:
          int index18 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index18].nColors[0];
          int index19 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index19].nColors[0];
          break;
        case 47:
          int index20 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += 3 * theMaster.Players[index20].nColors[9];
          int index21 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += 3 * theMaster.Players[index21].nColors[9];
          break;
        case 48:
          int index22 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index22].nColors[1];
          int index23 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index23].nColors[1];
          break;
        case 49:
          int index24 = (thePlayer.position + nPlayers - 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index24].wins;
          int index25 = (thePlayer.position + 1) % nPlayers;
          thePlayer.totalScore[index1] += theMaster.Players[index25].wins;
          break;
        case 50:
          ++thePlayer.decisions[0];
          break;
        case 51:
          thePlayer.totalScore[index1] += 14;
          break;
      }
    }
  }
}
