// Decompiled with JetBrains decompiler
// Type: 293721351544.243965671827
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using System;

namespace \u003293721351544
{
  internal static class \u003243965671827
  {
    public static int \u003396658521286(ulong _param0)
    {
      if (_param0 < 10000000000UL)
      {
        if (_param0 < 10UL)
          return 1;
        if (_param0 < 100UL)
          return 2;
        if (_param0 < 1000UL)
          return 3;
        if (_param0 < 10000UL)
          return 4;
        if (_param0 < 100000UL)
          return 5;
        if (_param0 < 1000000UL)
          return 6;
        if (_param0 < 10000000UL)
          return 7;
        if (_param0 < 100000000UL)
          return 8;
        return _param0 < 1000000000UL ? 9 : 10;
      }
      if (_param0 < 100000000000UL)
        return 11;
      if (_param0 < 1000000000000UL)
        return 12;
      if (_param0 < 10000000000000UL)
        return 13;
      if (_param0 < 100000000000000UL)
        return 14;
      if (_param0 < 1000000000000000UL)
        return 15;
      if (_param0 < 10000000000000000UL)
        return 16;
      if (_param0 < 100000000000000000UL)
        return 17;
      if (_param0 < 1000000000000000000UL)
        return 18;
      return _param0 < 10000000000000000000UL ? 19 : 20;
    }

    public static char \u003544029306420(int _param0) => _param0 <= 9 ? (char) (_param0 + 48) : (char) (_param0 - 10 + 97);

    public static int? \u003906462806949(int? _param0, int? _param1)
    {
      if (!_param0.HasValue)
        return _param1;
      return !_param1.HasValue ? _param0 : new int?(Math.Min(_param0.GetValueOrDefault(), _param1.GetValueOrDefault()));
    }

    public static int? \u003955101196542(int? _param0, int? _param1)
    {
      if (!_param0.HasValue)
        return _param1;
      return !_param1.HasValue ? _param0 : new int?(Math.Max(_param0.GetValueOrDefault(), _param1.GetValueOrDefault()));
    }

    public static double? \u003333380025461(double? _param0, double? _param1)
    {
      if (!_param0.HasValue)
        return _param1;
      return !_param1.HasValue ? _param0 : new double?(Math.Max(_param0.GetValueOrDefault(), _param1.GetValueOrDefault()));
    }

    public static bool \u003351503931732(double _param0, double _param1)
    {
      if (_param0 == _param1)
        return true;
      double num1 = (Math.Abs(_param0) + Math.Abs(_param1) + 10.0) * 2.2204460492503131E-16;
      double num2 = _param0 - _param1;
      return -num1 < num2 && num1 > num2;
    }
  }
}
