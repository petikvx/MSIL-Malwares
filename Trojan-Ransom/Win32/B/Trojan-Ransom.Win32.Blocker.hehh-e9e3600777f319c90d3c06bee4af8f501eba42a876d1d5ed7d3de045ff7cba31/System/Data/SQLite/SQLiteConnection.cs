// Decompiled with JetBrains decompiler
// Type: System.Data.SQLite.SQLiteConnection
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Globalization;
using System.IO;
using System.Text;
using System.Transactions;

namespace System.Data.SQLite
{
  public sealed class SQLiteConnection : DbConnection, ICloneable
  {
    private const string _dataDirectory = "|DataDirectory|";
    private const string _masterdb = "sqlite_master";
    private const string _tempmasterdb = "sqlite_temp_master";
    private ConnectionState _connectionState;
    private string _connectionString;
    internal int _transactionLevel;
    private System.Data.IsolationLevel _defaultIsolation;
    internal SQLiteEnlistment _enlistment;
    internal SQLiteBase _sql;
    private string _dataSource;
    private byte[] _password;
    private int _defaultTimeout = 30;
    internal bool _binaryGuid;
    internal long _version;
    private SQLiteUpdateCallback _updateCallback;
    private SQLiteCommitCallback _commitCallback;
    private SQLiteRollbackCallback _rollbackCallback;

    protected override DbProviderFactory DbProviderFactory => (DbProviderFactory) SQLiteFactory.Instance;

    private event SQLiteUpdateEventHandler _updateHandler;

    private event SQLiteCommitHandler _commitHandler;

    private event EventHandler _rollbackHandler;

    public override event StateChangeEventHandler StateChange;

    public SQLiteConnection()
      : this("")
    {
    }

    public SQLiteConnection(string connectionString)
    {
      this._connectionState = ConnectionState.Closed;
      this._connectionString = "";
      if (connectionString == null)
        return;
      this.ConnectionString = connectionString;
    }

    public SQLiteConnection(SQLiteConnection connection)
      : this(connection.ConnectionString)
    {
      if (connection.State != ConnectionState.Open)
        return;
      this.Open();
      using (DataTable schema = connection.GetSchema("Catalogs"))
      {
        foreach (DataRow row in (InternalDataCollectionBase) schema.Rows)
        {
          string strA = row[0].ToString();
          if (string.Compare(strA, "main", StringComparison.OrdinalIgnoreCase) != 0 && string.Compare(strA, "temp", StringComparison.OrdinalIgnoreCase) != 0)
          {
            using (SQLiteCommand command = this.CreateCommand())
            {
              command.CommandText = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "ATTACH DATABASE '{0}' AS [{1}]", new object[2]
              {
                row[1],
                row[0]
              });
              command.ExecuteNonQuery();
            }
          }
        }
      }
    }

    public object Clone() => (object) new SQLiteConnection(this);

    protected override void Dispose(bool disposing)
    {
      base.Dispose(disposing);
      if (!disposing)
        return;
      this.Close();
    }

    public static void CreateFile(string databaseFileName) => File.Create(databaseFileName).Close();

    internal void OnStateChange(ConnectionState newState)
    {
      ConnectionState connectionState = this._connectionState;
      this._connectionState = newState;
      if (this.StateChange == null || connectionState == newState)
        return;
      this.StateChange((object) this, new StateChangeEventArgs(connectionState, newState));
    }

    [Obsolete("Use one of the standard BeginTransaction methods, this one will be removed soon")]
    public SQLiteTransaction BeginTransaction(
      System.Data.IsolationLevel isolationLevel,
      bool deferredLock)
    {
      return (SQLiteTransaction) this.BeginDbTransaction(!deferredLock ? System.Data.IsolationLevel.Serializable : System.Data.IsolationLevel.ReadCommitted);
    }

    [Obsolete("Use one of the standard BeginTransaction methods, this one will be removed soon")]
    public SQLiteTransaction BeginTransaction(bool deferredLock) => (SQLiteTransaction) this.BeginDbTransaction(!deferredLock ? System.Data.IsolationLevel.Serializable : System.Data.IsolationLevel.ReadCommitted);

    public SQLiteTransaction BeginTransaction(System.Data.IsolationLevel isolationLevel) => (SQLiteTransaction) this.BeginDbTransaction(isolationLevel);

    public SQLiteTransaction BeginTransaction() => (SQLiteTransaction) this.BeginDbTransaction(this._defaultIsolation);

    protected override DbTransaction BeginDbTransaction(System.Data.IsolationLevel isolationLevel)
    {
      if (this._connectionState != ConnectionState.Open)
        throw new InvalidOperationException();
      if (isolationLevel == System.Data.IsolationLevel.Unspecified)
        isolationLevel = this._defaultIsolation;
      return isolationLevel == System.Data.IsolationLevel.Serializable || isolationLevel == System.Data.IsolationLevel.ReadCommitted ? (DbTransaction) new SQLiteTransaction(this, isolationLevel != System.Data.IsolationLevel.Serializable) : throw new ArgumentException(nameof (isolationLevel));
    }

    public override void ChangeDatabase(string databaseName) => throw new NotImplementedException();

    public override void Close()
    {
      if (this._sql != null)
      {
        if (this._enlistment != null)
        {
          SQLiteConnection sqLiteConnection = new SQLiteConnection()
          {
            _sql = this._sql,
            _transactionLevel = this._transactionLevel,
            _enlistment = this._enlistment,
            _connectionState = this._connectionState,
            _version = this._version
          };
          sqLiteConnection._enlistment._transaction._cnn = sqLiteConnection;
          sqLiteConnection._enlistment._disposeConnection = true;
          this._sql = (SQLiteBase) null;
          this._enlistment = (SQLiteEnlistment) null;
        }
        if (this._sql != null)
          this._sql.Close();
        this._sql = (SQLiteBase) null;
        this._transactionLevel = 0;
      }
      this.OnStateChange(ConnectionState.Closed);
    }

    public static void ClearPool(SQLiteConnection connection)
    {
      if (connection._sql == null)
        return;
      connection._sql.ClearPool();
    }

    public static void ClearAllPools() => SQLiteConnectionPool.ClearAllPools();

    [RefreshProperties(RefreshProperties.All)]
    [DefaultValue("")]
    [Editor("SQLite.Designer.SQLiteConnectionStringEditor, SQLite.Designer, Version=1.0.37.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    public override string ConnectionString
    {
      get => this._connectionString;
      set
      {
        if (value == null)
          throw new ArgumentNullException();
        if (this._connectionState != ConnectionState.Closed)
          throw new InvalidOperationException();
        this._connectionString = value;
      }
    }

    public SQLiteCommand CreateCommand() => new SQLiteCommand(this);

    protected override DbCommand CreateDbCommand() => (DbCommand) this.CreateCommand();

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string DataSource => this._dataSource;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string Database => "main";

    internal static string MapUriPath(string path)
    {
      if (path.StartsWith("file://", StringComparison.OrdinalIgnoreCase))
        return path.Substring(7);
      if (path.StartsWith("file:", StringComparison.OrdinalIgnoreCase))
        return path.Substring(5);
      return path.StartsWith("/", StringComparison.OrdinalIgnoreCase) ? path : throw new InvalidOperationException("Invalid connection string: invalid URI");
    }

    internal static SortedList<string, string> ParseConnectionString(
      string connectionString)
    {
      string source = connectionString;
      SortedList<string, string> connectionString1 = new SortedList<string, string>((IComparer<string>) StringComparer.OrdinalIgnoreCase);
      string[] strArray1 = SQLiteConvert.Split(source, ';');
      int length = strArray1.Length;
      for (int index = 0; index < length; ++index)
      {
        string[] strArray2 = SQLiteConvert.Split(strArray1[index], '=');
        if (strArray2.Length == 2)
          connectionString1.Add(strArray2[0], strArray2[1]);
        else
          throw new ArgumentException(string.Format((IFormatProvider) CultureInfo.CurrentCulture, "Invalid ConnectionString format for parameter \"{0}\"", new object[1]
          {
            strArray2.Length > 0 ? (object) strArray2[0] : (object) "null"
          }));
      }
      return connectionString1;
    }

    public override void EnlistTransaction(Transaction transaction)
    {
      if (this._transactionLevel > 0 && transaction != (Transaction) null)
        throw new ArgumentException("Unable to enlist in transaction, a local transaction already exists");
      if (this._enlistment != null && transaction == this._enlistment._scope)
        return;
      this._enlistment = this._enlistment == null ? new SQLiteEnlistment(this, transaction) : throw new ArgumentException("Already enlisted in a transaction");
    }

    internal static string FindKey(SortedList<string, string> items, string key, string defValue)
    {
      string str;
      return items.TryGetValue(key, out str) ? str : defValue;
    }

    public override void Open()
    {
      if (this._connectionState != ConnectionState.Closed)
        throw new InvalidOperationException();
      this.Close();
      SortedList<string, string> connectionString = SQLiteConnection.ParseConnectionString(this._connectionString);
      string str1 = Convert.ToInt32(SQLiteConnection.FindKey(connectionString, "Version", "3"), (IFormatProvider) CultureInfo.InvariantCulture) == 3 ? SQLiteConnection.FindKey(connectionString, "Data Source", "") : throw new NotSupportedException("Only SQLite Version 3 is supported at this time");
      if (string.IsNullOrEmpty(str1))
      {
        string key = SQLiteConnection.FindKey(connectionString, "Uri", "");
        str1 = !string.IsNullOrEmpty(key) ? SQLiteConnection.MapUriPath(key) : throw new ArgumentException("Data Source cannot be empty.  Use :memory: to open an in-memory database");
      }
      string str2 = string.Compare(str1, ":MEMORY:", StringComparison.OrdinalIgnoreCase) != 0 ? this.ExpandFileName(str1) : ":memory:";
      try
      {
        bool boolean1 = SQLiteConvert.ToBoolean(SQLiteConnection.FindKey(connectionString, "Pooling", bool.FalseString));
        bool boolean2 = SQLiteConvert.ToBoolean(SQLiteConnection.FindKey(connectionString, "UseUTF16Encoding", bool.FalseString));
        int int32 = Convert.ToInt32(SQLiteConnection.FindKey(connectionString, "Max Pool Size", "100"), (IFormatProvider) CultureInfo.InvariantCulture);
        this._defaultTimeout = Convert.ToInt32(SQLiteConnection.FindKey(connectionString, "Default Timeout", "30"), (IFormatProvider) CultureInfo.CurrentCulture);
        this._defaultIsolation = (System.Data.IsolationLevel) Enum.Parse(typeof (System.Data.IsolationLevel), SQLiteConnection.FindKey(connectionString, "Default IsolationLevel", "Serializable"), true);
        if (this._defaultIsolation != System.Data.IsolationLevel.Serializable && this._defaultIsolation != System.Data.IsolationLevel.ReadCommitted)
          throw new NotSupportedException("Invalid Default IsolationLevel specified");
        SQLiteDateFormats fmt = (SQLiteDateFormats) Enum.Parse(typeof (SQLiteDateFormats), SQLiteConnection.FindKey(connectionString, "DateTimeFormat", "ISO8601"), true);
        this._sql = !boolean2 ? (SQLiteBase) new SQLite3(fmt) : (SQLiteBase) new SQLite3_UTF16(fmt);
        SQLiteOpenFlagsEnum liteOpenFlagsEnum = SQLiteOpenFlagsEnum.None;
        if (!SQLiteConvert.ToBoolean(SQLiteConnection.FindKey(connectionString, "FailIfMissing", bool.FalseString)))
          liteOpenFlagsEnum |= SQLiteOpenFlagsEnum.Create;
        SQLiteOpenFlagsEnum flags = !SQLiteConvert.ToBoolean(SQLiteConnection.FindKey(connectionString, "Read Only", bool.FalseString)) ? liteOpenFlagsEnum | SQLiteOpenFlagsEnum.ReadWrite : liteOpenFlagsEnum | SQLiteOpenFlagsEnum.ReadOnly;
        this._sql.Open(str2, flags, int32, boolean1);
        this._binaryGuid = SQLiteConvert.ToBoolean(SQLiteConnection.FindKey(connectionString, "BinaryGUID", bool.TrueString));
        string key1 = SQLiteConnection.FindKey(connectionString, "Password", (string) null);
        if (!string.IsNullOrEmpty(key1))
          this._sql.SetPassword(Encoding.UTF8.GetBytes(key1));
        else if (this._password != null)
          this._sql.SetPassword(this._password);
        this._password = (byte[]) null;
        this._dataSource = Path.GetFileNameWithoutExtension(str2);
        ++this._version;
        ConnectionState connectionState = this._connectionState;
        this._connectionState = ConnectionState.Open;
        try
        {
          using (SQLiteCommand command = this.CreateCommand())
          {
            if (str2 != ":memory:")
            {
              string key2 = SQLiteConnection.FindKey(connectionString, "Page Size", "1024");
              if (Convert.ToInt32(key2, (IFormatProvider) CultureInfo.InvariantCulture) != 1024)
              {
                command.CommandText = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA page_size={0}", new object[1]
                {
                  (object) key2
                });
                command.ExecuteNonQuery();
              }
            }
            string key3 = SQLiteConnection.FindKey(connectionString, "Max Page Count", "0");
            if (Convert.ToInt32(key3, (IFormatProvider) CultureInfo.InvariantCulture) != 0)
            {
              command.CommandText = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA max_page_count={0}", new object[1]
              {
                (object) key3
              });
              command.ExecuteNonQuery();
            }
            string key4 = SQLiteConnection.FindKey(connectionString, "Legacy Format", bool.FalseString);
            command.CommandText = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA legacy_file_format={0}", new object[1]
            {
              SQLiteConvert.ToBoolean(key4) ? (object) "ON" : (object) "OFF"
            });
            command.ExecuteNonQuery();
            string key5 = SQLiteConnection.FindKey(connectionString, "Synchronous", "Normal");
            if (string.Compare(key5, "Full", StringComparison.OrdinalIgnoreCase) != 0)
            {
              command.CommandText = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA synchronous={0}", new object[1]
              {
                (object) key5
              });
              command.ExecuteNonQuery();
            }
            string key6 = SQLiteConnection.FindKey(connectionString, "Cache Size", "2000");
            if (Convert.ToInt32(key6, (IFormatProvider) CultureInfo.InvariantCulture) != 2000)
            {
              command.CommandText = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA cache_size={0}", new object[1]
              {
                (object) key6
              });
              command.ExecuteNonQuery();
            }
            string key7 = SQLiteConnection.FindKey(connectionString, "Journal Mode", "Delete");
            if (string.Compare(key7, "Default", StringComparison.OrdinalIgnoreCase) != 0)
            {
              command.CommandText = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA journal_mode={0}", new object[1]
              {
                (object) key7
              });
              command.ExecuteNonQuery();
            }
          }
          if (this._commitHandler != null)
            this._sql.SetCommitHook(this._commitCallback);
          if (this._updateHandler != null)
            this._sql.SetUpdateHook(this._updateCallback);
          if (this._rollbackHandler != null)
            this._sql.SetRollbackHook(this._rollbackCallback);
          if (Transaction.Current != (Transaction) null && SQLiteConvert.ToBoolean(SQLiteConnection.FindKey(connectionString, "Enlist", bool.TrueString)))
            this.EnlistTransaction(Transaction.Current);
          this._connectionState = connectionState;
          this.OnStateChange(ConnectionState.Open);
        }
        catch
        {
          this._connectionState = connectionState;
          throw;
        }
      }
      catch (SQLiteException ex)
      {
        this.Close();
        throw;
      }
    }

    public int DefaultTimeout
    {
      get => this._defaultTimeout;
      set => this._defaultTimeout = value;
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public override string ServerVersion => SQLiteConnection.SQLiteVersion;

    public static string SQLiteVersion => SQLite3.SQLiteVersion;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [Browsable(false)]
    public override ConnectionState State => this._connectionState;

    public void ChangePassword(string newPassword) => this.ChangePassword(string.IsNullOrEmpty(newPassword) ? (byte[]) null : Encoding.UTF8.GetBytes(newPassword));

    public void ChangePassword(byte[] newPassword)
    {
      if (this._connectionState != ConnectionState.Open)
        throw new InvalidOperationException("Database must be opened before changing the password.");
      this._sql.ChangePassword(newPassword);
    }

    public void SetPassword(string databasePassword) => this.SetPassword(string.IsNullOrEmpty(databasePassword) ? (byte[]) null : Encoding.UTF8.GetBytes(databasePassword));

    public void SetPassword(byte[] databasePassword)
    {
      if (this._connectionState != ConnectionState.Closed)
        throw new InvalidOperationException("Password can only be set before the database is opened.");
      if (databasePassword != null && databasePassword.Length == 0)
        databasePassword = (byte[]) null;
      this._password = databasePassword;
    }

    private string ExpandFileName(string sourceFile)
    {
      if (string.IsNullOrEmpty(sourceFile))
        return sourceFile;
      if (sourceFile.StartsWith("|DataDirectory|", StringComparison.OrdinalIgnoreCase))
      {
        string path1 = AppDomain.CurrentDomain.GetData("DataDirectory") as string;
        if (string.IsNullOrEmpty(path1))
          path1 = AppDomain.CurrentDomain.BaseDirectory;
        if (sourceFile.Length > "|DataDirectory|".Length && ((int) sourceFile["|DataDirectory|".Length] == (int) Path.DirectorySeparatorChar || (int) sourceFile["|DataDirectory|".Length] == (int) Path.AltDirectorySeparatorChar))
          sourceFile = sourceFile.Remove("|DataDirectory|".Length, 1);
        sourceFile = Path.Combine(path1, sourceFile.Substring("|DataDirectory|".Length));
      }
      sourceFile = Path.GetFullPath(sourceFile);
      return sourceFile;
    }

    public override DataTable GetSchema() => this.GetSchema("MetaDataCollections", (string[]) null);

    public override DataTable GetSchema(string collectionName) => this.GetSchema(collectionName, new string[0]);

    public override DataTable GetSchema(string collectionName, string[] restrictionValues)
    {
      if (this._connectionState != ConnectionState.Open)
        throw new InvalidOperationException();
      string[] strArray = new string[5];
      if (restrictionValues == null)
        restrictionValues = new string[0];
      restrictionValues.CopyTo((Array) strArray, 0);
      switch (collectionName.ToUpper(CultureInfo.InvariantCulture))
      {
        case "METADATACOLLECTIONS":
          return SQLiteConnection.Schema_MetaDataCollections();
        case "DATASOURCEINFORMATION":
          return this.Schema_DataSourceInformation();
        case "DATATYPES":
          return this.Schema_DataTypes();
        case "COLUMNS":
        case "TABLECOLUMNS":
          return this.Schema_Columns(strArray[0], strArray[2], strArray[3]);
        case "INDEXES":
          return this.Schema_Indexes(strArray[0], strArray[2], strArray[3]);
        case "TRIGGERS":
          return this.Schema_Triggers(strArray[0], strArray[2], strArray[3]);
        case "INDEXCOLUMNS":
          return this.Schema_IndexColumns(strArray[0], strArray[2], strArray[3], strArray[4]);
        case "TABLES":
          return this.Schema_Tables(strArray[0], strArray[2], strArray[3]);
        case "VIEWS":
          return this.Schema_Views(strArray[0], strArray[2]);
        case "VIEWCOLUMNS":
          return this.Schema_ViewColumns(strArray[0], strArray[2], strArray[3]);
        case "FOREIGNKEYS":
          return this.Schema_ForeignKeys(strArray[0], strArray[2], strArray[3]);
        case "CATALOGS":
          return this.Schema_Catalogs(strArray[0]);
        case "RESERVEDWORDS":
          return SQLiteConnection.Schema_ReservedWords();
        default:
          throw new NotSupportedException();
      }
    }

    private static DataTable Schema_ReservedWords()
    {
      DataTable dataTable = new DataTable("MetaDataCollections");
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("ReservedWord", typeof (string));
      dataTable.Columns.Add("MaximumVersion", typeof (string));
      dataTable.Columns.Add("MinimumVersion", typeof (string));
      dataTable.BeginLoadData();
      string keywords = SR.Keywords;
      char[] chArray = new char[1]{ ',' };
      foreach (string str in keywords.Split(chArray))
      {
        DataRow row = dataTable.NewRow();
        row[0] = (object) str;
        dataTable.Rows.Add(row);
      }
      dataTable.AcceptChanges();
      dataTable.EndLoadData();
      return dataTable;
    }

    private static DataTable Schema_MetaDataCollections()
    {
      DataTable dataTable = new DataTable("MetaDataCollections");
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("CollectionName", typeof (string));
      dataTable.Columns.Add("NumberOfRestrictions", typeof (int));
      dataTable.Columns.Add("NumberOfIdentifierParts", typeof (int));
      dataTable.BeginLoadData();
      StringReader reader = new StringReader(SR.MetaDataCollections);
      int num = (int) dataTable.ReadXml((TextReader) reader);
      reader.Close();
      dataTable.AcceptChanges();
      dataTable.EndLoadData();
      return dataTable;
    }

    private DataTable Schema_DataSourceInformation()
    {
      DataTable dataTable = new DataTable("DataSourceInformation");
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add(DbMetaDataColumnNames.CompositeIdentifierSeparatorPattern, typeof (string));
      dataTable.Columns.Add(DbMetaDataColumnNames.DataSourceProductName, typeof (string));
      dataTable.Columns.Add(DbMetaDataColumnNames.DataSourceProductVersion, typeof (string));
      dataTable.Columns.Add(DbMetaDataColumnNames.DataSourceProductVersionNormalized, typeof (string));
      dataTable.Columns.Add(DbMetaDataColumnNames.GroupByBehavior, typeof (int));
      dataTable.Columns.Add(DbMetaDataColumnNames.IdentifierPattern, typeof (string));
      dataTable.Columns.Add(DbMetaDataColumnNames.IdentifierCase, typeof (int));
      dataTable.Columns.Add(DbMetaDataColumnNames.OrderByColumnsInSelect, typeof (bool));
      dataTable.Columns.Add(DbMetaDataColumnNames.ParameterMarkerFormat, typeof (string));
      dataTable.Columns.Add(DbMetaDataColumnNames.ParameterMarkerPattern, typeof (string));
      dataTable.Columns.Add(DbMetaDataColumnNames.ParameterNameMaxLength, typeof (int));
      dataTable.Columns.Add(DbMetaDataColumnNames.ParameterNamePattern, typeof (string));
      dataTable.Columns.Add(DbMetaDataColumnNames.QuotedIdentifierPattern, typeof (string));
      dataTable.Columns.Add(DbMetaDataColumnNames.QuotedIdentifierCase, typeof (int));
      dataTable.Columns.Add(DbMetaDataColumnNames.StatementSeparatorPattern, typeof (string));
      dataTable.Columns.Add(DbMetaDataColumnNames.StringLiteralPattern, typeof (string));
      dataTable.Columns.Add(DbMetaDataColumnNames.SupportedJoinOperators, typeof (int));
      dataTable.BeginLoadData();
      DataRow row = dataTable.NewRow();
      row.ItemArray = new object[17]
      {
        null,
        (object) "SQLite",
        (object) this._sql.Version,
        (object) this._sql.Version,
        (object) 3,
        (object) "(^\\[\\p{Lo}\\p{Lu}\\p{Ll}_@#][\\p{Lo}\\p{Lu}\\p{Ll}\\p{Nd}@$#_]*$)|(^\\[[^\\]\\0]|\\]\\]+\\]$)|(^\\\"[^\\\"\\0]|\\\"\\\"+\\\"$)",
        (object) 1,
        (object) false,
        (object) "{0}",
        (object) "@[\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}_@#][\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}\\p{Nd}\\uff3f_@#\\$]*(?=\\s+|$)",
        (object) (int) byte.MaxValue,
        (object) "^[\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}_@#][\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}\\p{Nd}\\uff3f_@#\\$]*(?=\\s+|$)",
        (object) "(([^\\[]|\\]\\])*)",
        (object) 1,
        (object) ";",
        (object) "'(([^']|'')*)'",
        (object) 15
      };
      dataTable.Rows.Add(row);
      dataTable.AcceptChanges();
      dataTable.EndLoadData();
      return dataTable;
    }

    private DataTable Schema_Columns(string strCatalog, string strTable, string strColumn)
    {
      DataTable dataTable = new DataTable("Columns");
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("TABLE_CATALOG", typeof (string));
      dataTable.Columns.Add("TABLE_SCHEMA", typeof (string));
      dataTable.Columns.Add("TABLE_NAME", typeof (string));
      dataTable.Columns.Add("COLUMN_NAME", typeof (string));
      dataTable.Columns.Add("COLUMN_GUID", typeof (Guid));
      dataTable.Columns.Add("COLUMN_PROPID", typeof (long));
      dataTable.Columns.Add("ORDINAL_POSITION", typeof (int));
      dataTable.Columns.Add("COLUMN_HASDEFAULT", typeof (bool));
      dataTable.Columns.Add("COLUMN_DEFAULT", typeof (string));
      dataTable.Columns.Add("COLUMN_FLAGS", typeof (long));
      dataTable.Columns.Add("IS_NULLABLE", typeof (bool));
      dataTable.Columns.Add("DATA_TYPE", typeof (string));
      dataTable.Columns.Add("TYPE_GUID", typeof (Guid));
      dataTable.Columns.Add("CHARACTER_MAXIMUM_LENGTH", typeof (int));
      dataTable.Columns.Add("CHARACTER_OCTET_LENGTH", typeof (int));
      dataTable.Columns.Add("NUMERIC_PRECISION", typeof (int));
      dataTable.Columns.Add("NUMERIC_SCALE", typeof (int));
      dataTable.Columns.Add("DATETIME_PRECISION", typeof (long));
      dataTable.Columns.Add("CHARACTER_SET_CATALOG", typeof (string));
      dataTable.Columns.Add("CHARACTER_SET_SCHEMA", typeof (string));
      dataTable.Columns.Add("CHARACTER_SET_NAME", typeof (string));
      dataTable.Columns.Add("COLLATION_CATALOG", typeof (string));
      dataTable.Columns.Add("COLLATION_SCHEMA", typeof (string));
      dataTable.Columns.Add("COLLATION_NAME", typeof (string));
      dataTable.Columns.Add("DOMAIN_CATALOG", typeof (string));
      dataTable.Columns.Add("DOMAIN_NAME", typeof (string));
      dataTable.Columns.Add("DESCRIPTION", typeof (string));
      dataTable.Columns.Add("PRIMARY_KEY", typeof (bool));
      dataTable.Columns.Add("EDM_TYPE", typeof (string));
      dataTable.Columns.Add("AUTOINCREMENT", typeof (bool));
      dataTable.Columns.Add("UNIQUE", typeof (bool));
      dataTable.BeginLoadData();
      if (string.IsNullOrEmpty(strCatalog))
        strCatalog = "main";
      string str = string.Compare(strCatalog, "temp", StringComparison.OrdinalIgnoreCase) == 0 ? "sqlite_temp_master" : "sqlite_master";
      using (SQLiteCommand sqLiteCommand1 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT * FROM [{0}].[{1}] WHERE [type] LIKE 'table' OR [type] LIKE 'view'", new object[2]
      {
        (object) strCatalog,
        (object) str
      }), this))
      {
        using (SQLiteDataReader sqLiteDataReader1 = sqLiteCommand1.ExecuteReader())
        {
          while (sqLiteDataReader1.Read())
          {
            if (string.IsNullOrEmpty(strTable) || string.Compare(strTable, sqLiteDataReader1.GetString(2), StringComparison.OrdinalIgnoreCase) == 0)
            {
              try
              {
                using (SQLiteCommand sqLiteCommand2 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT * FROM [{0}].[{1}]", new object[2]
                {
                  (object) strCatalog,
                  (object) sqLiteDataReader1.GetString(2)
                }), this))
                {
                  using (SQLiteDataReader sqLiteDataReader2 = sqLiteCommand2.ExecuteReader(CommandBehavior.SchemaOnly))
                  {
                    using (DataTable schemaTable = sqLiteDataReader2.GetSchemaTable(true, true))
                    {
                      foreach (DataRow row1 in (InternalDataCollectionBase) schemaTable.Rows)
                      {
                        if (string.Compare(row1[SchemaTableColumn.ColumnName].ToString(), strColumn, StringComparison.OrdinalIgnoreCase) == 0 || strColumn == null)
                        {
                          DataRow row2 = dataTable.NewRow();
                          row2["NUMERIC_PRECISION"] = row1[SchemaTableColumn.NumericPrecision];
                          row2["NUMERIC_SCALE"] = row1[SchemaTableColumn.NumericScale];
                          row2["TABLE_NAME"] = (object) sqLiteDataReader1.GetString(2);
                          row2["COLUMN_NAME"] = row1[SchemaTableColumn.ColumnName];
                          row2["TABLE_CATALOG"] = (object) strCatalog;
                          row2["ORDINAL_POSITION"] = row1[SchemaTableColumn.ColumnOrdinal];
                          row2["COLUMN_HASDEFAULT"] = (object) (row1[SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);
                          row2["COLUMN_DEFAULT"] = row1[SchemaTableOptionalColumn.DefaultValue];
                          row2["IS_NULLABLE"] = row1[SchemaTableColumn.AllowDBNull];
                          row2["DATA_TYPE"] = (object) row1["DataTypeName"].ToString().ToLower(CultureInfo.InvariantCulture);
                          row2["EDM_TYPE"] = (object) SQLiteConvert.DbTypeToTypeName((DbType) row1[SchemaTableColumn.ProviderType]).ToString().ToLower(CultureInfo.InvariantCulture);
                          row2["CHARACTER_MAXIMUM_LENGTH"] = row1[SchemaTableColumn.ColumnSize];
                          row2["TABLE_SCHEMA"] = row1[SchemaTableColumn.BaseSchemaName];
                          row2["PRIMARY_KEY"] = row1[SchemaTableColumn.IsKey];
                          row2["AUTOINCREMENT"] = row1[SchemaTableOptionalColumn.IsAutoIncrement];
                          row2["COLLATION_NAME"] = row1["CollationType"];
                          row2["UNIQUE"] = row1[SchemaTableColumn.IsUnique];
                          dataTable.Rows.Add(row2);
                        }
                      }
                    }
                  }
                }
              }
              catch (SQLiteException ex)
              {
              }
            }
          }
        }
      }
      dataTable.AcceptChanges();
      dataTable.EndLoadData();
      return dataTable;
    }

    private DataTable Schema_Indexes(string strCatalog, string strTable, string strIndex)
    {
      DataTable dataTable = new DataTable("Indexes");
      List<int> intList = new List<int>();
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("TABLE_CATALOG", typeof (string));
      dataTable.Columns.Add("TABLE_SCHEMA", typeof (string));
      dataTable.Columns.Add("TABLE_NAME", typeof (string));
      dataTable.Columns.Add("INDEX_CATALOG", typeof (string));
      dataTable.Columns.Add("INDEX_SCHEMA", typeof (string));
      dataTable.Columns.Add("INDEX_NAME", typeof (string));
      dataTable.Columns.Add("PRIMARY_KEY", typeof (bool));
      dataTable.Columns.Add("UNIQUE", typeof (bool));
      dataTable.Columns.Add("CLUSTERED", typeof (bool));
      dataTable.Columns.Add("TYPE", typeof (int));
      dataTable.Columns.Add("FILL_FACTOR", typeof (int));
      dataTable.Columns.Add("INITIAL_SIZE", typeof (int));
      dataTable.Columns.Add("NULLS", typeof (int));
      dataTable.Columns.Add("SORT_BOOKMARKS", typeof (bool));
      dataTable.Columns.Add("AUTO_UPDATE", typeof (bool));
      dataTable.Columns.Add("NULL_COLLATION", typeof (int));
      dataTable.Columns.Add("ORDINAL_POSITION", typeof (int));
      dataTable.Columns.Add("COLUMN_NAME", typeof (string));
      dataTable.Columns.Add("COLUMN_GUID", typeof (Guid));
      dataTable.Columns.Add("COLUMN_PROPID", typeof (long));
      dataTable.Columns.Add("COLLATION", typeof (short));
      dataTable.Columns.Add("CARDINALITY", typeof (Decimal));
      dataTable.Columns.Add("PAGES", typeof (int));
      dataTable.Columns.Add("FILTER_CONDITION", typeof (string));
      dataTable.Columns.Add("INTEGRATED", typeof (bool));
      dataTable.Columns.Add("INDEX_DEFINITION", typeof (string));
      dataTable.BeginLoadData();
      if (string.IsNullOrEmpty(strCatalog))
        strCatalog = "main";
      string str = string.Compare(strCatalog, "temp", StringComparison.OrdinalIgnoreCase) == 0 ? "sqlite_temp_master" : "sqlite_master";
      using (SQLiteCommand sqLiteCommand1 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT * FROM [{0}].[{1}] WHERE [type] LIKE 'table'", new object[2]
      {
        (object) strCatalog,
        (object) str
      }), this))
      {
        using (SQLiteDataReader sqLiteDataReader1 = sqLiteCommand1.ExecuteReader())
        {
          while (sqLiteDataReader1.Read())
          {
            bool flag = false;
            intList.Clear();
            if (string.IsNullOrEmpty(strTable) || string.Compare(sqLiteDataReader1.GetString(2), strTable, StringComparison.OrdinalIgnoreCase) == 0)
            {
              try
              {
                using (SQLiteCommand sqLiteCommand2 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA [{0}].table_info([{1}])", new object[2]
                {
                  (object) strCatalog,
                  (object) sqLiteDataReader1.GetString(2)
                }), this))
                {
                  using (SQLiteDataReader sqLiteDataReader2 = sqLiteCommand2.ExecuteReader())
                  {
                    while (sqLiteDataReader2.Read())
                    {
                      if (sqLiteDataReader2.GetInt32(5) == 1)
                      {
                        intList.Add(sqLiteDataReader2.GetInt32(0));
                        if (string.Compare(sqLiteDataReader2.GetString(2), "INTEGER", StringComparison.OrdinalIgnoreCase) == 0)
                          flag = true;
                      }
                    }
                  }
                }
              }
              catch (SQLiteException ex)
              {
              }
              if (intList.Count == 1 && flag)
              {
                DataRow row = dataTable.NewRow();
                row["TABLE_CATALOG"] = (object) strCatalog;
                row["TABLE_NAME"] = (object) sqLiteDataReader1.GetString(2);
                row["INDEX_CATALOG"] = (object) strCatalog;
                row["PRIMARY_KEY"] = (object) true;
                row["INDEX_NAME"] = (object) string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{1}_PK_{0}", new object[2]
                {
                  (object) sqLiteDataReader1.GetString(2),
                  (object) str
                });
                row["UNIQUE"] = (object) true;
                if (string.Compare((string) row["INDEX_NAME"], strIndex, StringComparison.OrdinalIgnoreCase) == 0 || strIndex == null)
                  dataTable.Rows.Add(row);
                intList.Clear();
              }
              try
              {
                using (SQLiteCommand sqLiteCommand3 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA [{0}].index_list([{1}])", new object[2]
                {
                  (object) strCatalog,
                  (object) sqLiteDataReader1.GetString(2)
                }), this))
                {
                  using (SQLiteDataReader sqLiteDataReader3 = sqLiteCommand3.ExecuteReader())
                  {
                    while (sqLiteDataReader3.Read())
                    {
                      if (string.Compare(sqLiteDataReader3.GetString(1), strIndex, StringComparison.OrdinalIgnoreCase) == 0 || strIndex == null)
                      {
                        DataRow row = dataTable.NewRow();
                        row["TABLE_CATALOG"] = (object) strCatalog;
                        row["TABLE_NAME"] = (object) sqLiteDataReader1.GetString(2);
                        row["INDEX_CATALOG"] = (object) strCatalog;
                        row["INDEX_NAME"] = (object) sqLiteDataReader3.GetString(1);
                        row["UNIQUE"] = (object) sqLiteDataReader3.GetBoolean(2);
                        row["PRIMARY_KEY"] = (object) false;
                        using (SQLiteCommand sqLiteCommand4 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT * FROM [{0}].[{2}] WHERE [type] LIKE 'index' AND [name] LIKE '{1}'", new object[3]
                        {
                          (object) strCatalog,
                          (object) sqLiteDataReader3.GetString(1).Replace("'", "''"),
                          (object) str
                        }), this))
                        {
                          using (SQLiteDataReader sqLiteDataReader4 = sqLiteCommand4.ExecuteReader())
                          {
                            if (sqLiteDataReader4.Read())
                            {
                              if (!sqLiteDataReader4.IsDBNull(4))
                                row["INDEX_DEFINITION"] = (object) sqLiteDataReader4.GetString(4);
                            }
                          }
                        }
                        if (intList.Count > 0 && sqLiteDataReader3.GetString(1).StartsWith("sqlite_autoindex_" + sqLiteDataReader1.GetString(2), StringComparison.InvariantCultureIgnoreCase))
                        {
                          using (SQLiteCommand sqLiteCommand5 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA [{0}].index_info([{1}])", new object[2]
                          {
                            (object) strCatalog,
                            (object) sqLiteDataReader3.GetString(1)
                          }), this))
                          {
                            using (SQLiteDataReader sqLiteDataReader5 = sqLiteCommand5.ExecuteReader())
                            {
                              int num = 0;
                              while (sqLiteDataReader5.Read())
                              {
                                if (!intList.Contains(sqLiteDataReader5.GetInt32(1)))
                                {
                                  num = 0;
                                  break;
                                }
                                ++num;
                              }
                              if (num == intList.Count)
                              {
                                row["PRIMARY_KEY"] = (object) true;
                                intList.Clear();
                              }
                            }
                          }
                        }
                        dataTable.Rows.Add(row);
                      }
                    }
                  }
                }
              }
              catch (SQLiteException ex)
              {
              }
            }
          }
        }
      }
      dataTable.AcceptChanges();
      dataTable.EndLoadData();
      return dataTable;
    }

    private DataTable Schema_Triggers(string catalog, string table, string triggerName)
    {
      DataTable dataTable = new DataTable("Triggers");
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("TABLE_CATALOG", typeof (string));
      dataTable.Columns.Add("TABLE_SCHEMA", typeof (string));
      dataTable.Columns.Add("TABLE_NAME", typeof (string));
      dataTable.Columns.Add("TRIGGER_NAME", typeof (string));
      dataTable.Columns.Add("TRIGGER_DEFINITION", typeof (string));
      dataTable.BeginLoadData();
      if (string.IsNullOrEmpty(table))
        table = (string) null;
      if (string.IsNullOrEmpty(catalog))
        catalog = "main";
      string str = string.Compare(catalog, "temp", StringComparison.OrdinalIgnoreCase) == 0 ? "sqlite_temp_master" : "sqlite_master";
      using (SQLiteCommand sqLiteCommand = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT [type], [name], [tbl_name], [rootpage], [sql], [rowid] FROM [{0}].[{1}] WHERE [type] LIKE 'trigger'", new object[2]
      {
        (object) catalog,
        (object) str
      }), this))
      {
        using (SQLiteDataReader sqLiteDataReader = sqLiteCommand.ExecuteReader())
        {
          while (sqLiteDataReader.Read())
          {
            if ((string.Compare(sqLiteDataReader.GetString(1), triggerName, StringComparison.OrdinalIgnoreCase) == 0 || triggerName == null) && (table == null || string.Compare(table, sqLiteDataReader.GetString(2), StringComparison.OrdinalIgnoreCase) == 0))
            {
              DataRow row = dataTable.NewRow();
              row["TABLE_CATALOG"] = (object) catalog;
              row["TABLE_NAME"] = (object) sqLiteDataReader.GetString(2);
              row["TRIGGER_NAME"] = (object) sqLiteDataReader.GetString(1);
              row["TRIGGER_DEFINITION"] = (object) sqLiteDataReader.GetString(4);
              dataTable.Rows.Add(row);
            }
          }
        }
      }
      dataTable.AcceptChanges();
      dataTable.EndLoadData();
      return dataTable;
    }

    private DataTable Schema_Tables(string strCatalog, string strTable, string strType)
    {
      DataTable dataTable = new DataTable("Tables");
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("TABLE_CATALOG", typeof (string));
      dataTable.Columns.Add("TABLE_SCHEMA", typeof (string));
      dataTable.Columns.Add("TABLE_NAME", typeof (string));
      dataTable.Columns.Add("TABLE_TYPE", typeof (string));
      dataTable.Columns.Add("TABLE_ID", typeof (long));
      dataTable.Columns.Add("TABLE_ROOTPAGE", typeof (int));
      dataTable.Columns.Add("TABLE_DEFINITION", typeof (string));
      dataTable.BeginLoadData();
      if (string.IsNullOrEmpty(strCatalog))
        strCatalog = "main";
      string str = string.Compare(strCatalog, "temp", StringComparison.OrdinalIgnoreCase) == 0 ? "sqlite_temp_master" : "sqlite_master";
      using (SQLiteCommand sqLiteCommand = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT [type], [name], [tbl_name], [rootpage], [sql], [rowid] FROM [{0}].[{1}] WHERE [type] LIKE 'table'", new object[2]
      {
        (object) strCatalog,
        (object) str
      }), this))
      {
        using (SQLiteDataReader sqLiteDataReader = sqLiteCommand.ExecuteReader())
        {
          while (sqLiteDataReader.Read())
          {
            string strB = sqLiteDataReader.GetString(0);
            if (string.Compare(sqLiteDataReader.GetString(2), 0, "SQLITE_", 0, 7, StringComparison.OrdinalIgnoreCase) == 0)
              strB = "SYSTEM_TABLE";
            if ((string.Compare(strType, strB, StringComparison.OrdinalIgnoreCase) == 0 || strType == null) && (string.Compare(sqLiteDataReader.GetString(2), strTable, StringComparison.OrdinalIgnoreCase) == 0 || strTable == null))
            {
              DataRow row = dataTable.NewRow();
              row["TABLE_CATALOG"] = (object) strCatalog;
              row["TABLE_NAME"] = (object) sqLiteDataReader.GetString(2);
              row["TABLE_TYPE"] = (object) strB;
              row["TABLE_ID"] = (object) sqLiteDataReader.GetInt64(5);
              row["TABLE_ROOTPAGE"] = (object) sqLiteDataReader.GetInt32(3);
              row["TABLE_DEFINITION"] = (object) sqLiteDataReader.GetString(4);
              dataTable.Rows.Add(row);
            }
          }
        }
      }
      dataTable.AcceptChanges();
      dataTable.EndLoadData();
      return dataTable;
    }

    private DataTable Schema_Views(string strCatalog, string strView)
    {
      DataTable dataTable = new DataTable("Views");
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("TABLE_CATALOG", typeof (string));
      dataTable.Columns.Add("TABLE_SCHEMA", typeof (string));
      dataTable.Columns.Add("TABLE_NAME", typeof (string));
      dataTable.Columns.Add("VIEW_DEFINITION", typeof (string));
      dataTable.Columns.Add("CHECK_OPTION", typeof (bool));
      dataTable.Columns.Add("IS_UPDATABLE", typeof (bool));
      dataTable.Columns.Add("DESCRIPTION", typeof (string));
      dataTable.Columns.Add("DATE_CREATED", typeof (DateTime));
      dataTable.Columns.Add("DATE_MODIFIED", typeof (DateTime));
      dataTable.BeginLoadData();
      if (string.IsNullOrEmpty(strCatalog))
        strCatalog = "main";
      string str1 = string.Compare(strCatalog, "temp", StringComparison.OrdinalIgnoreCase) == 0 ? "sqlite_temp_master" : "sqlite_master";
      using (SQLiteCommand sqLiteCommand = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT * FROM [{0}].[{1}] WHERE [type] LIKE 'view'", new object[2]
      {
        (object) strCatalog,
        (object) str1
      }), this))
      {
        using (SQLiteDataReader sqLiteDataReader = sqLiteCommand.ExecuteReader())
        {
          while (sqLiteDataReader.Read())
          {
            if (string.Compare(sqLiteDataReader.GetString(1), strView, StringComparison.OrdinalIgnoreCase) == 0 || string.IsNullOrEmpty(strView))
            {
              string source = sqLiteDataReader.GetString(4).Replace('\r', ' ').Replace('\n', ' ').Replace('\t', ' ');
              int num = CultureInfo.InvariantCulture.CompareInfo.IndexOf(source, " AS ", CompareOptions.IgnoreCase);
              if (num > -1)
              {
                string str2 = source.Substring(num + 4).Trim();
                DataRow row = dataTable.NewRow();
                row["TABLE_CATALOG"] = (object) strCatalog;
                row["TABLE_NAME"] = (object) sqLiteDataReader.GetString(2);
                row["IS_UPDATABLE"] = (object) false;
                row["VIEW_DEFINITION"] = (object) str2;
                dataTable.Rows.Add(row);
              }
            }
          }
        }
      }
      dataTable.AcceptChanges();
      dataTable.EndLoadData();
      return dataTable;
    }

    private DataTable Schema_Catalogs(string strCatalog)
    {
      DataTable dataTable = new DataTable("Catalogs");
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("CATALOG_NAME", typeof (string));
      dataTable.Columns.Add("DESCRIPTION", typeof (string));
      dataTable.Columns.Add("ID", typeof (long));
      dataTable.BeginLoadData();
      using (SQLiteCommand sqLiteCommand = new SQLiteCommand("PRAGMA database_list", this))
      {
        using (SQLiteDataReader sqLiteDataReader = sqLiteCommand.ExecuteReader())
        {
          while (sqLiteDataReader.Read())
          {
            if (string.Compare(sqLiteDataReader.GetString(1), strCatalog, StringComparison.OrdinalIgnoreCase) == 0 || strCatalog == null)
            {
              DataRow row = dataTable.NewRow();
              row["CATALOG_NAME"] = (object) sqLiteDataReader.GetString(1);
              row["DESCRIPTION"] = (object) sqLiteDataReader.GetString(2);
              row["ID"] = (object) sqLiteDataReader.GetInt64(0);
              dataTable.Rows.Add(row);
            }
          }
        }
      }
      dataTable.AcceptChanges();
      dataTable.EndLoadData();
      return dataTable;
    }

    private DataTable Schema_DataTypes()
    {
      DataTable dataTable = new DataTable("DataTypes");
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("TypeName", typeof (string));
      dataTable.Columns.Add("ProviderDbType", typeof (int));
      dataTable.Columns.Add("ColumnSize", typeof (long));
      dataTable.Columns.Add("CreateFormat", typeof (string));
      dataTable.Columns.Add("CreateParameters", typeof (string));
      dataTable.Columns.Add("DataType", typeof (string));
      dataTable.Columns.Add("IsAutoIncrementable", typeof (bool));
      dataTable.Columns.Add("IsBestMatch", typeof (bool));
      dataTable.Columns.Add("IsCaseSensitive", typeof (bool));
      dataTable.Columns.Add("IsFixedLength", typeof (bool));
      dataTable.Columns.Add("IsFixedPrecisionScale", typeof (bool));
      dataTable.Columns.Add("IsLong", typeof (bool));
      dataTable.Columns.Add("IsNullable", typeof (bool));
      dataTable.Columns.Add("IsSearchable", typeof (bool));
      dataTable.Columns.Add("IsSearchableWithLike", typeof (bool));
      dataTable.Columns.Add("IsLiteralSupported", typeof (bool));
      dataTable.Columns.Add("LiteralPrefix", typeof (string));
      dataTable.Columns.Add("LiteralSuffix", typeof (string));
      dataTable.Columns.Add("IsUnsigned", typeof (bool));
      dataTable.Columns.Add("MaximumScale", typeof (short));
      dataTable.Columns.Add("MinimumScale", typeof (short));
      dataTable.Columns.Add("IsConcurrencyType", typeof (bool));
      dataTable.BeginLoadData();
      StringReader reader = new StringReader(SR.DataTypes);
      int num = (int) dataTable.ReadXml((TextReader) reader);
      reader.Close();
      dataTable.AcceptChanges();
      dataTable.EndLoadData();
      return dataTable;
    }

    private DataTable Schema_IndexColumns(
      string strCatalog,
      string strTable,
      string strIndex,
      string strColumn)
    {
      DataTable dataTable = new DataTable("IndexColumns");
      List<KeyValuePair<int, string>> keyValuePairList = new List<KeyValuePair<int, string>>();
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("CONSTRAINT_CATALOG", typeof (string));
      dataTable.Columns.Add("CONSTRAINT_SCHEMA", typeof (string));
      dataTable.Columns.Add("CONSTRAINT_NAME", typeof (string));
      dataTable.Columns.Add("TABLE_CATALOG", typeof (string));
      dataTable.Columns.Add("TABLE_SCHEMA", typeof (string));
      dataTable.Columns.Add("TABLE_NAME", typeof (string));
      dataTable.Columns.Add("COLUMN_NAME", typeof (string));
      dataTable.Columns.Add("ORDINAL_POSITION", typeof (int));
      dataTable.Columns.Add("INDEX_NAME", typeof (string));
      dataTable.Columns.Add("COLLATION_NAME", typeof (string));
      dataTable.Columns.Add("SORT_MODE", typeof (string));
      dataTable.Columns.Add("CONFLICT_OPTION", typeof (int));
      if (string.IsNullOrEmpty(strCatalog))
        strCatalog = "main";
      string str = string.Compare(strCatalog, "temp", StringComparison.OrdinalIgnoreCase) == 0 ? "sqlite_temp_master" : "sqlite_master";
      dataTable.BeginLoadData();
      using (SQLiteCommand sqLiteCommand1 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT * FROM [{0}].[{1}] WHERE [type] LIKE 'table'", new object[2]
      {
        (object) strCatalog,
        (object) str
      }), this))
      {
        using (SQLiteDataReader sqLiteDataReader1 = sqLiteCommand1.ExecuteReader())
        {
          while (sqLiteDataReader1.Read())
          {
            bool flag = false;
            keyValuePairList.Clear();
            if (string.IsNullOrEmpty(strTable) || string.Compare(sqLiteDataReader1.GetString(2), strTable, StringComparison.OrdinalIgnoreCase) == 0)
            {
              try
              {
                using (SQLiteCommand sqLiteCommand2 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA [{0}].table_info([{1}])", new object[2]
                {
                  (object) strCatalog,
                  (object) sqLiteDataReader1.GetString(2)
                }), this))
                {
                  using (SQLiteDataReader sqLiteDataReader2 = sqLiteCommand2.ExecuteReader())
                  {
                    while (sqLiteDataReader2.Read())
                    {
                      if (sqLiteDataReader2.GetInt32(5) == 1)
                      {
                        keyValuePairList.Add(new KeyValuePair<int, string>(sqLiteDataReader2.GetInt32(0), sqLiteDataReader2.GetString(1)));
                        if (string.Compare(sqLiteDataReader2.GetString(2), "INTEGER", StringComparison.OrdinalIgnoreCase) == 0)
                          flag = true;
                      }
                    }
                  }
                }
              }
              catch (SQLiteException ex)
              {
              }
              if (keyValuePairList.Count == 1 && flag)
              {
                DataRow row = dataTable.NewRow();
                row["CONSTRAINT_CATALOG"] = (object) strCatalog;
                row["CONSTRAINT_NAME"] = (object) string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{1}_PK_{0}", new object[2]
                {
                  (object) sqLiteDataReader1.GetString(2),
                  (object) str
                });
                row["TABLE_CATALOG"] = (object) strCatalog;
                row["TABLE_NAME"] = (object) sqLiteDataReader1.GetString(2);
                row["COLUMN_NAME"] = (object) keyValuePairList[0].Value;
                row["INDEX_NAME"] = row["CONSTRAINT_NAME"];
                row["ORDINAL_POSITION"] = (object) 0;
                row["COLLATION_NAME"] = (object) "BINARY";
                row["SORT_MODE"] = (object) "ASC";
                row["CONFLICT_OPTION"] = (object) 2;
                if (string.IsNullOrEmpty(strIndex) || string.Compare(strIndex, (string) row["INDEX_NAME"], StringComparison.OrdinalIgnoreCase) == 0)
                  dataTable.Rows.Add(row);
              }
              using (SQLiteCommand sqLiteCommand3 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT * FROM [{0}].[{2}] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'", new object[3]
              {
                (object) strCatalog,
                (object) sqLiteDataReader1.GetString(2).Replace("'", "''"),
                (object) str
              }), this))
              {
                using (SQLiteDataReader sqLiteDataReader3 = sqLiteCommand3.ExecuteReader())
                {
                  while (sqLiteDataReader3.Read())
                  {
                    int num = 0;
                    if (string.IsNullOrEmpty(strIndex) || string.Compare(strIndex, sqLiteDataReader3.GetString(1), StringComparison.OrdinalIgnoreCase) == 0)
                    {
                      try
                      {
                        using (SQLiteCommand sqLiteCommand4 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA [{0}].index_info([{1}])", new object[2]
                        {
                          (object) strCatalog,
                          (object) sqLiteDataReader3.GetString(1)
                        }), this))
                        {
                          using (SQLiteDataReader sqLiteDataReader4 = sqLiteCommand4.ExecuteReader())
                          {
                            while (sqLiteDataReader4.Read())
                            {
                              DataRow row = dataTable.NewRow();
                              row["CONSTRAINT_CATALOG"] = (object) strCatalog;
                              row["CONSTRAINT_NAME"] = (object) sqLiteDataReader3.GetString(1);
                              row["TABLE_CATALOG"] = (object) strCatalog;
                              row["TABLE_NAME"] = (object) sqLiteDataReader3.GetString(2);
                              row["COLUMN_NAME"] = (object) sqLiteDataReader4.GetString(2);
                              row["INDEX_NAME"] = (object) sqLiteDataReader3.GetString(1);
                              row["ORDINAL_POSITION"] = (object) num;
                              int sortMode;
                              int onError;
                              string collationSequence;
                              this._sql.GetIndexColumnExtendedInfo(strCatalog, sqLiteDataReader3.GetString(1), sqLiteDataReader4.GetString(2), out sortMode, out onError, out collationSequence);
                              if (!string.IsNullOrEmpty(collationSequence))
                                row["COLLATION_NAME"] = (object) collationSequence;
                              row["SORT_MODE"] = sortMode == 0 ? (object) "ASC" : (object) "DESC";
                              row["CONFLICT_OPTION"] = (object) onError;
                              ++num;
                              if (string.IsNullOrEmpty(strColumn) || string.Compare(strColumn, row["COLUMN_NAME"].ToString(), StringComparison.OrdinalIgnoreCase) == 0)
                                dataTable.Rows.Add(row);
                            }
                          }
                        }
                      }
                      catch (SQLiteException ex)
                      {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      dataTable.EndLoadData();
      dataTable.AcceptChanges();
      return dataTable;
    }

    private DataTable Schema_ViewColumns(
      string strCatalog,
      string strView,
      string strColumn)
    {
      DataTable dataTable = new DataTable("ViewColumns");
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("VIEW_CATALOG", typeof (string));
      dataTable.Columns.Add("VIEW_SCHEMA", typeof (string));
      dataTable.Columns.Add("VIEW_NAME", typeof (string));
      dataTable.Columns.Add("VIEW_COLUMN_NAME", typeof (string));
      dataTable.Columns.Add("TABLE_CATALOG", typeof (string));
      dataTable.Columns.Add("TABLE_SCHEMA", typeof (string));
      dataTable.Columns.Add("TABLE_NAME", typeof (string));
      dataTable.Columns.Add("COLUMN_NAME", typeof (string));
      dataTable.Columns.Add("ORDINAL_POSITION", typeof (int));
      dataTable.Columns.Add("COLUMN_HASDEFAULT", typeof (bool));
      dataTable.Columns.Add("COLUMN_DEFAULT", typeof (string));
      dataTable.Columns.Add("COLUMN_FLAGS", typeof (long));
      dataTable.Columns.Add("IS_NULLABLE", typeof (bool));
      dataTable.Columns.Add("DATA_TYPE", typeof (string));
      dataTable.Columns.Add("CHARACTER_MAXIMUM_LENGTH", typeof (int));
      dataTable.Columns.Add("NUMERIC_PRECISION", typeof (int));
      dataTable.Columns.Add("NUMERIC_SCALE", typeof (int));
      dataTable.Columns.Add("DATETIME_PRECISION", typeof (long));
      dataTable.Columns.Add("CHARACTER_SET_CATALOG", typeof (string));
      dataTable.Columns.Add("CHARACTER_SET_SCHEMA", typeof (string));
      dataTable.Columns.Add("CHARACTER_SET_NAME", typeof (string));
      dataTable.Columns.Add("COLLATION_CATALOG", typeof (string));
      dataTable.Columns.Add("COLLATION_SCHEMA", typeof (string));
      dataTable.Columns.Add("COLLATION_NAME", typeof (string));
      dataTable.Columns.Add("PRIMARY_KEY", typeof (bool));
      dataTable.Columns.Add("EDM_TYPE", typeof (string));
      dataTable.Columns.Add("AUTOINCREMENT", typeof (bool));
      dataTable.Columns.Add("UNIQUE", typeof (bool));
      if (string.IsNullOrEmpty(strCatalog))
        strCatalog = "main";
      string str = string.Compare(strCatalog, "temp", StringComparison.OrdinalIgnoreCase) == 0 ? "sqlite_temp_master" : "sqlite_master";
      dataTable.BeginLoadData();
      using (SQLiteCommand sqLiteCommand1 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT * FROM [{0}].[{1}] WHERE [type] LIKE 'view'", new object[2]
      {
        (object) strCatalog,
        (object) str
      }), this))
      {
        using (SQLiteDataReader sqLiteDataReader1 = sqLiteCommand1.ExecuteReader())
        {
          while (sqLiteDataReader1.Read())
          {
            if (string.IsNullOrEmpty(strView) || string.Compare(strView, sqLiteDataReader1.GetString(2), StringComparison.OrdinalIgnoreCase) == 0)
            {
              using (SQLiteCommand sqLiteCommand2 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT * FROM [{0}].[{1}]", new object[2]
              {
                (object) strCatalog,
                (object) sqLiteDataReader1.GetString(2)
              }), this))
              {
                string source = sqLiteDataReader1.GetString(4).Replace('\r', ' ').Replace('\n', ' ').Replace('\t', ' ');
                int num = CultureInfo.InvariantCulture.CompareInfo.IndexOf(source, " AS ", CompareOptions.IgnoreCase);
                if (num >= 0)
                {
                  using (SQLiteCommand sqLiteCommand3 = new SQLiteCommand(source.Substring(num + 4), this))
                  {
                    using (SQLiteDataReader sqLiteDataReader2 = sqLiteCommand2.ExecuteReader(CommandBehavior.SchemaOnly))
                    {
                      using (SQLiteDataReader sqLiteDataReader3 = sqLiteCommand3.ExecuteReader(CommandBehavior.SchemaOnly))
                      {
                        using (DataTable schemaTable1 = sqLiteDataReader2.GetSchemaTable(false, false))
                        {
                          using (DataTable schemaTable2 = sqLiteDataReader3.GetSchemaTable(false, false))
                          {
                            for (int index = 0; index < schemaTable2.Rows.Count; ++index)
                            {
                              DataRow row1 = schemaTable1.Rows[index];
                              DataRow row2 = schemaTable2.Rows[index];
                              if (string.Compare(row1[SchemaTableColumn.ColumnName].ToString(), strColumn, StringComparison.OrdinalIgnoreCase) == 0 || strColumn == null)
                              {
                                DataRow row3 = dataTable.NewRow();
                                row3["VIEW_CATALOG"] = (object) strCatalog;
                                row3["VIEW_NAME"] = (object) sqLiteDataReader1.GetString(2);
                                row3["TABLE_CATALOG"] = (object) strCatalog;
                                row3["TABLE_SCHEMA"] = row2[SchemaTableColumn.BaseSchemaName];
                                row3["TABLE_NAME"] = row2[SchemaTableColumn.BaseTableName];
                                row3["COLUMN_NAME"] = row2[SchemaTableColumn.BaseColumnName];
                                row3["VIEW_COLUMN_NAME"] = row1[SchemaTableColumn.ColumnName];
                                row3["COLUMN_HASDEFAULT"] = (object) (row1[SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);
                                row3["COLUMN_DEFAULT"] = row1[SchemaTableOptionalColumn.DefaultValue];
                                row3["ORDINAL_POSITION"] = row1[SchemaTableColumn.ColumnOrdinal];
                                row3["IS_NULLABLE"] = row1[SchemaTableColumn.AllowDBNull];
                                row3["DATA_TYPE"] = row1["DataTypeName"];
                                row3["EDM_TYPE"] = (object) SQLiteConvert.DbTypeToTypeName((DbType) row1[SchemaTableColumn.ProviderType]).ToString().ToLower(CultureInfo.InvariantCulture);
                                row3["CHARACTER_MAXIMUM_LENGTH"] = row1[SchemaTableColumn.ColumnSize];
                                row3["TABLE_SCHEMA"] = row1[SchemaTableColumn.BaseSchemaName];
                                row3["PRIMARY_KEY"] = row1[SchemaTableColumn.IsKey];
                                row3["AUTOINCREMENT"] = row1[SchemaTableOptionalColumn.IsAutoIncrement];
                                row3["COLLATION_NAME"] = row1["CollationType"];
                                row3["UNIQUE"] = row1[SchemaTableColumn.IsUnique];
                                dataTable.Rows.Add(row3);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      dataTable.EndLoadData();
      dataTable.AcceptChanges();
      return dataTable;
    }

    private DataTable Schema_ForeignKeys(
      string strCatalog,
      string strTable,
      string strKeyName)
    {
      DataTable dataTable = new DataTable("ForeignKeys");
      dataTable.Locale = CultureInfo.InvariantCulture;
      dataTable.Columns.Add("CONSTRAINT_CATALOG", typeof (string));
      dataTable.Columns.Add("CONSTRAINT_SCHEMA", typeof (string));
      dataTable.Columns.Add("CONSTRAINT_NAME", typeof (string));
      dataTable.Columns.Add("TABLE_CATALOG", typeof (string));
      dataTable.Columns.Add("TABLE_SCHEMA", typeof (string));
      dataTable.Columns.Add("TABLE_NAME", typeof (string));
      dataTable.Columns.Add("CONSTRAINT_TYPE", typeof (string));
      dataTable.Columns.Add("IS_DEFERRABLE", typeof (bool));
      dataTable.Columns.Add("INITIALLY_DEFERRED", typeof (bool));
      dataTable.Columns.Add("FKEY_FROM_COLUMN", typeof (string));
      dataTable.Columns.Add("FKEY_FROM_ORDINAL_POSITION", typeof (int));
      dataTable.Columns.Add("FKEY_TO_CATALOG", typeof (string));
      dataTable.Columns.Add("FKEY_TO_SCHEMA", typeof (string));
      dataTable.Columns.Add("FKEY_TO_TABLE", typeof (string));
      dataTable.Columns.Add("FKEY_TO_COLUMN", typeof (string));
      if (string.IsNullOrEmpty(strCatalog))
        strCatalog = "main";
      string str = string.Compare(strCatalog, "temp", StringComparison.OrdinalIgnoreCase) == 0 ? "sqlite_temp_master" : "sqlite_master";
      dataTable.BeginLoadData();
      using (SQLiteCommand sqLiteCommand1 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "SELECT * FROM [{0}].[{1}] WHERE [type] LIKE 'table'", new object[2]
      {
        (object) strCatalog,
        (object) str
      }), this))
      {
        using (SQLiteDataReader sqLiteDataReader1 = sqLiteCommand1.ExecuteReader())
        {
          while (sqLiteDataReader1.Read())
          {
            if (string.IsNullOrEmpty(strTable) || string.Compare(strTable, sqLiteDataReader1.GetString(2), StringComparison.OrdinalIgnoreCase) == 0)
            {
              try
              {
                using (SQLiteCommandBuilder liteCommandBuilder = new SQLiteCommandBuilder())
                {
                  using (SQLiteCommand sqLiteCommand2 = new SQLiteCommand(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "PRAGMA [{0}].foreign_key_list([{1}])", new object[2]
                  {
                    (object) strCatalog,
                    (object) sqLiteDataReader1.GetString(2)
                  }), this))
                  {
                    using (SQLiteDataReader sqLiteDataReader2 = sqLiteCommand2.ExecuteReader())
                    {
                      while (sqLiteDataReader2.Read())
                      {
                        DataRow row = dataTable.NewRow();
                        row["CONSTRAINT_CATALOG"] = (object) strCatalog;
                        row["CONSTRAINT_NAME"] = (object) string.Format((IFormatProvider) CultureInfo.InvariantCulture, "FK_{0}_{1}", new object[2]
                        {
                          sqLiteDataReader1[2],
                          (object) sqLiteDataReader2.GetInt32(0)
                        });
                        row["TABLE_CATALOG"] = (object) strCatalog;
                        row["TABLE_NAME"] = (object) liteCommandBuilder.UnquoteIdentifier(sqLiteDataReader1.GetString(2));
                        row["CONSTRAINT_TYPE"] = (object) "FOREIGN KEY";
                        row["IS_DEFERRABLE"] = (object) false;
                        row["INITIALLY_DEFERRED"] = (object) false;
                        row["FKEY_FROM_COLUMN"] = (object) liteCommandBuilder.UnquoteIdentifier(sqLiteDataReader2[3].ToString());
                        row["FKEY_TO_CATALOG"] = (object) strCatalog;
                        row["FKEY_TO_TABLE"] = (object) liteCommandBuilder.UnquoteIdentifier(sqLiteDataReader2[2].ToString());
                        row["FKEY_TO_COLUMN"] = (object) liteCommandBuilder.UnquoteIdentifier(sqLiteDataReader2[4].ToString());
                        row["FKEY_FROM_ORDINAL_POSITION"] = sqLiteDataReader2[1];
                        if (string.IsNullOrEmpty(strKeyName) || string.Compare(strKeyName, row["CONSTRAINT_NAME"].ToString(), StringComparison.OrdinalIgnoreCase) == 0)
                          dataTable.Rows.Add(row);
                      }
                    }
                  }
                }
              }
              catch (SQLiteException ex)
              {
              }
            }
          }
        }
      }
      dataTable.EndLoadData();
      dataTable.AcceptChanges();
      return dataTable;
    }

    public event SQLiteUpdateEventHandler Update
    {
      add
      {
        if (this._updateHandler == null)
        {
          this._updateCallback = new SQLiteUpdateCallback(this.UpdateCallback);
          if (this._sql != null)
            this._sql.SetUpdateHook(this._updateCallback);
        }
        this._updateHandler += value;
      }
      remove
      {
        this._updateHandler -= value;
        if (this._updateHandler != null)
          return;
        if (this._sql != null)
          this._sql.SetUpdateHook((SQLiteUpdateCallback) null);
        this._updateCallback = (SQLiteUpdateCallback) null;
      }
    }

    private void UpdateCallback(
      IntPtr puser,
      int type,
      IntPtr database,
      IntPtr table,
      long rowid)
    {
      this._updateHandler((object) this, new UpdateEventArgs(SQLiteConvert.UTF8ToString(database, -1), SQLiteConvert.UTF8ToString(table, -1), (UpdateEventType) type, rowid));
    }

    public event SQLiteCommitHandler Commit
    {
      add
      {
        if (this._commitHandler == null)
        {
          this._commitCallback = new SQLiteCommitCallback(this.CommitCallback);
          if (this._sql != null)
            this._sql.SetCommitHook(this._commitCallback);
        }
        this._commitHandler += value;
      }
      remove
      {
        this._commitHandler -= value;
        if (this._commitHandler != null)
          return;
        if (this._sql != null)
          this._sql.SetCommitHook((SQLiteCommitCallback) null);
        this._commitCallback = (SQLiteCommitCallback) null;
      }
    }

    public event EventHandler RollBack
    {
      add
      {
        if (this._rollbackHandler == null)
        {
          this._rollbackCallback = new SQLiteRollbackCallback(this.RollbackCallback);
          if (this._sql != null)
            this._sql.SetRollbackHook(this._rollbackCallback);
        }
        this._rollbackHandler += value;
      }
      remove
      {
        this._rollbackHandler -= value;
        if (this._rollbackHandler != null)
          return;
        if (this._sql != null)
          this._sql.SetRollbackHook((SQLiteRollbackCallback) null);
        this._rollbackCallback = (SQLiteRollbackCallback) null;
      }
    }

    private int CommitCallback(IntPtr parg)
    {
      CommitEventArgs e = new CommitEventArgs();
      this._commitHandler((object) this, e);
      return !e.AbortTransaction ? 0 : 1;
    }

    private void RollbackCallback(IntPtr parg) => this._rollbackHandler((object) this, EventArgs.Empty);
  }
}
