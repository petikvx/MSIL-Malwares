// Decompiled with JetBrains decompiler
// Type: TexasHoldem.TexasHoldemManager
// Assembly: EventComm, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 230F04B0-E761-4388-A1F3-FE85FC156328
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.NanoBot.bezt-158185cef899d67faabf1e968de02b3a8cbd0446c0fdf0e3579cb4533dd3768d.exe

namespace TexasHoldem
{
  public class TexasHoldemManager
  {
    public const int STARTING_MONEY = 100;
    public const int BET_AMOUNT = 5;
    public const int POSSIBLE_OPPONENT_HANDS = 990;
    private GameState state = GameState.BeforeFirstDeal;
    private PokerHand communityHand = (PokerHand) null;
    private PokerHand playerHand = (PokerHand) null;
    private PokerHand opponentHand = (PokerHand) null;
    private int playerMoney = 100;
    private int opponentMoney = 100;
    private int playerPot = 0;
    private int opponentPot = 0;
    private float playerOdds = 0.0f;
    private float opponentOdds = 0.0f;
    private string dealOutcome = "";

    public GameState State => this.state;

    public PokerHand CommunityHand => this.communityHand;

    public PokerHand PlayerHand => this.playerHand;

    public PokerHand OpponentHand => this.opponentHand;

    public int PlayerMoney => this.playerMoney;

    public int OpponentMoney => this.opponentMoney;

    public int PlayerPot => this.playerPot;

    public int OpponentPot => this.opponentPot;

    public int TotalPot => this.playerPot + this.opponentPot;

    public float PlayerOdds => this.playerOdds;

    public float OpponentOdds => this.opponentOdds;

    public string DealOutcome => this.dealOutcome;

    public void Deal()
    {
      CardDeck cardDeck = new CardDeck();
      this.communityHand = new PokerHand();
      this.communityHand.Add(cardDeck.TakeCard());
      this.communityHand.Add(cardDeck.TakeCard());
      this.communityHand.Add(cardDeck.TakeCard());
      this.communityHand.Add(cardDeck.TakeCard());
      this.communityHand.Add(cardDeck.TakeCard());
      this.playerHand = new PokerHand();
      this.playerHand.Add(cardDeck.TakeCard());
      this.playerHand.Add(cardDeck.TakeCard());
      this.opponentHand = new PokerHand();
      this.opponentHand.Add(cardDeck.TakeCard());
      this.opponentHand.Add(cardDeck.TakeCard());
      this.playerMoney -= 5;
      this.playerPot += 5;
      this.opponentMoney -= 5;
      this.opponentPot += 5;
      this.playerOdds = this.CalculateOdds(PokerHandCombinations.FindBestHand(this.communityHand, this.playerHand), this.opponentHand);
      this.opponentOdds = this.CalculateOdds(PokerHandCombinations.FindBestHand(this.communityHand, this.opponentHand), this.playerHand);
      this.CheckForGameOver(GameState.DuringRound);
      if ((double) this.opponentOdds >= 0.5)
      {
        this.opponentMoney -= 5;
        this.opponentPot += 5;
      }
      else
        this.Fold();
    }

    private float CalculateOdds(PokerHand bestHand, PokerHand holeHand)
    {
      int num = 0;
      foreach (PokerHand bestHand1 in PokerHandCombinations.GenerateBestHands(this.communityHand, holeHand))
        num += bestHand.CompareTo(bestHand1);
      return (float) ((990 + num) / 2) / 990f;
    }

    public void Call()
    {
      this.playerMoney -= 5;
      this.playerPot += 5;
      switch (PokerHandCombinations.FindBestHand(this.communityHand, this.playerHand).CompareTo(PokerHandCombinations.FindBestHand(this.communityHand, this.opponentHand)))
      {
        case -1:
          this.dealOutcome = "YOU LOSE!";
          this.opponentMoney += this.opponentPot + this.playerPot;
          this.opponentPot = this.playerPot = 0;
          break;
        case 0:
          this.dealOutcome = "IT'S A TIE!";
          break;
        case 1:
          this.dealOutcome = "YOU WIN!";
          this.playerMoney += this.opponentPot + this.playerPot;
          this.opponentPot = this.playerPot = 0;
          break;
      }
      this.CheckForGameOver(GameState.AfterRound);
    }

    public void Fold(bool playerFolded = false)
    {
      if (playerFolded)
      {
        this.dealOutcome = "YOU LOSE! YOU FOLDED!";
        this.opponentMoney += this.opponentPot + this.playerPot;
      }
      else
      {
        this.dealOutcome = "YOU WIN! THEY FOLDED!";
        this.playerMoney += this.opponentPot + this.playerPot;
      }
      this.opponentPot = this.playerPot = 0;
      this.CheckForGameOver(GameState.AfterRound);
    }

    private void CheckForGameOver(GameState nextState)
    {
      if (this.playerMoney <= 0)
      {
        this.dealOutcome = "YOU RAN OUT OF MONEY!";
        this.state = GameState.GameOver;
      }
      else if (this.opponentMoney <= 0)
      {
        this.dealOutcome = "YOU WIN! THEY'RE BROKE!";
        this.state = GameState.GameOver;
      }
      else
        this.state = nextState;
    }
  }
}
