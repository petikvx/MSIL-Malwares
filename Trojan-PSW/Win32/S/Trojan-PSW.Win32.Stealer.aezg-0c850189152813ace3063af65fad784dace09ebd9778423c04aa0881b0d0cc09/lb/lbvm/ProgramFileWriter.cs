// Decompiled with JetBrains decompiler
// Type: org.lb.lbvm.ProgramFileWriter
// Assembly: GCCollectionMo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3A5CAC9E-800C-431E-83D8-5129C6781923
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\Trojan-PSW.Win32.Stealer.aezg-0c850189152813ace3063af65fad784dace09ebd9778423c04aa0881b0d0cc09.exe

using System.IO;

namespace org.lb.lbvm
{
  internal sealed class ProgramFileWriter
  {
    private readonly CoreCodes program;
    private Stream data;
    private byte checksum1;
    private byte checksum2;

    public ProgramFileWriter(CoreCodes program) => this.program = program;

    public void Write(Stream destination)
    {
      this.data = destination;
      this.checksum1 = (byte) 0;
      this.checksum2 = (byte) 0;
      this.WriteHeader();
      this.WriteBytecode();
      this.WriteSymbolTable();
      this.WriteFooter();
    }

    private void WriteHeader()
    {
      this.writeString("LBVM");
      this.writeByte((byte) 1);
      this.writeByte((byte) 0);
      this.writeByte((byte) 0);
      this.writeByte((byte) 0);
    }

    private void writeString(string value)
    {
      foreach (byte b in value)
        this.writeByte(b);
    }

    private void writeByte(byte b)
    {
      this.data.WriteByte(b);
      this.AddByteToChecksums(b);
    }

    private void AddByteToChecksums(byte b)
    {
      this.checksum1 += b;
      this.checksum2 ^= b;
    }

    private void WriteBytecode()
    {
      this.writeByte((byte) 1);
      this.WriteByteBlock(this.program.Bytecode);
    }

    private void WriteByteBlock(byte[] block)
    {
      this.writeInt(block.Length);
      foreach (byte b in block)
        this.writeByte(b);
    }

    private void writeInt(int b)
    {
      for (int index = 0; index < 4; ++index)
      {
        this.writeByte((byte) (b % 256));
        b /= 256;
      }
    }

    private void WriteSymbolTable()
    {
      this.writeByte((byte) 2);
      int b = 0;
      foreach (string str in this.program.SymbolTable)
      {
        this.writeInt(b);
        this.writeInt(str.Length);
        this.writeString(str);
        ++b;
      }
    }

    private void WriteFooter()
    {
      byte[] block = new byte[2]
      {
        this.checksum1,
        this.checksum2
      };
      this.writeByte(byte.MaxValue);
      this.WriteByteBlock(block);
    }
  }
}
