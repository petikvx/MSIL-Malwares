// Decompiled with JetBrains decompiler
// Type:  
// Assembly: InternalEncoderBestFitFallb, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E8766DC3-D5F7-4CA3-C898-3E3E7E9D159B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-7746116ae343b76397dc5f94e65cb9b6147385d8cff941c7245305c3b6148468.exe

using System;
using System.Collections;
using System.Globalization;
using System.Text;

public sealed class \u000F\u2007
{
  public static object \u0002(string _param0)
  {
    bool flag = true;
    return \u000F\u2007.\u0002(_param0, ref flag);
  }

  public static object \u0002(string _param0, ref bool _param1)
  {
    _param1 = true;
    if (_param0 == null)
      return (object) null;
    char[] charArray = _param0.ToCharArray();
    int num = 0;
    ref int local1 = ref num;
    ref bool local2 = ref _param1;
    return \u000F\u2007.\u0002(charArray, ref local1, ref local2);
  }

  public static string \u0002(object _param0)
  {
    StringBuilder stringBuilder = new StringBuilder(2000);
    return !\u000F\u2007.\u0003(_param0, stringBuilder) ? (string) null : stringBuilder.ToString();
  }

  protected static Hashtable \u0002(char[] _param0, ref int _param1, ref bool _param2)
  {
    Hashtable hashtable = new Hashtable();
    \u000F\u2007.\u0002(_param0, ref _param1);
    bool flag = false;
    while (!flag)
    {
      switch (\u000F\u2007.\u0003(_param0, _param1))
      {
        case 0:
          _param2 = false;
          return (Hashtable) null;
        case 2:
          \u000F\u2007.\u0002(_param0, ref _param1);
          return hashtable;
        case 6:
          \u000F\u2007.\u0002(_param0, ref _param1);
          continue;
        default:
          string key = \u000F\u2007.\u0002(_param0, ref _param1, ref _param2);
          if (!_param2)
          {
            _param2 = false;
            return (Hashtable) null;
          }
          if (\u000F\u2007.\u0002(_param0, ref _param1) != 5)
          {
            _param2 = false;
            return (Hashtable) null;
          }
          object obj = \u000F\u2007.\u0002(_param0, ref _param1, ref _param2);
          if (!_param2)
          {
            _param2 = false;
            return (Hashtable) null;
          }
          hashtable[(object) key] = obj;
          continue;
      }
    }
    return hashtable;
  }

  protected static ArrayList \u0002(char[] _param0, ref int _param1, ref bool _param2)
  {
    ArrayList arrayList = new ArrayList();
    \u000F\u2007.\u0002(_param0, ref _param1);
    bool flag = false;
    while (!flag)
    {
      switch (\u000F\u2007.\u0003(_param0, _param1))
      {
        case 0:
          _param2 = false;
          return (ArrayList) null;
        case 4:
          \u000F\u2007.\u0002(_param0, ref _param1);
          goto label_9;
        case 6:
          \u000F\u2007.\u0002(_param0, ref _param1);
          continue;
        default:
          object obj = \u000F\u2007.\u0002(_param0, ref _param1, ref _param2);
          if (!_param2)
            return (ArrayList) null;
          arrayList.Add(obj);
          continue;
      }
    }
label_9:
    return arrayList;
  }

  protected static object \u0002(char[] _param0, ref int _param1, ref bool _param2)
  {
    switch (\u000F\u2007.\u0003(_param0, _param1))
    {
      case 1:
        return (object) \u000F\u2007.\u0002(_param0, ref _param1, ref _param2);
      case 3:
        return (object) \u000F\u2007.\u0002(_param0, ref _param1, ref _param2);
      case 7:
        return (object) \u000F\u2007.\u0002(_param0, ref _param1, ref _param2);
      case 8:
        return (object) \u000F\u2007.\u0002(_param0, ref _param1);
      case 9:
        \u000F\u2007.\u0002(_param0, ref _param1);
        return (object) bool.Parse(\u0008\u200A.\u0002(-2036464576));
      case 10:
        \u000F\u2007.\u0002(_param0, ref _param1);
        return (object) bool.Parse(\u0008\u200A.\u0002(-2036464565));
      case 11:
        \u000F\u2007.\u0002(_param0, ref _param1);
        return (object) null;
      default:
        _param2 = false;
        return (object) null;
    }
  }

  protected static string \u0002(char[] _param0, ref int _param1, ref bool _param2)
  {
    StringBuilder stringBuilder = new StringBuilder(2000);
    \u000F\u2007.\u0002(_param0, ref _param1);
    char ch1 = _param0[_param1++];
    bool flag = false;
    while (!flag && _param1 != _param0.Length)
    {
      char ch2 = _param0[_param1++];
      switch (ch2)
      {
        case '"':
          flag = true;
          goto label_17;
        case '\\':
          if (_param1 != _param0.Length)
          {
            switch (_param0[_param1++])
            {
              case '"':
                stringBuilder.Append('"');
                continue;
              case '/':
                stringBuilder.Append('/');
                continue;
              case '\\':
                stringBuilder.Append('\\');
                continue;
              case 'b':
                stringBuilder.Append('\b');
                continue;
              case 'f':
                stringBuilder.Append('\f');
                continue;
              case 'n':
                stringBuilder.Append('\n');
                continue;
              case 'r':
                stringBuilder.Append('\r');
                continue;
              case 't':
                stringBuilder.Append('\t');
                continue;
              case 'u':
                if (_param0.Length - _param1 >= 4)
                {
                  char[] destinationArray = new char[4];
                  Array.Copy((Array) _param0, _param1, (Array) destinationArray, 0, 4);
                  uint utf32 = uint.Parse(new string(destinationArray), NumberStyles.HexNumber);
                  stringBuilder.Append(char.ConvertFromUtf32((int) utf32));
                  _param1 += 4;
                  continue;
                }
                goto label_17;
              default:
                continue;
            }
          }
          else
            goto label_17;
        default:
          stringBuilder.Append(ch2);
          continue;
      }
    }
label_17:
    if (flag)
      return stringBuilder.ToString();
    _param2 = false;
    return (string) null;
  }

  protected static double \u0002(char[] _param0, ref int _param1)
  {
    \u000F\u2007.\u0002(_param0, ref _param1);
    int num = \u000F\u2007.\u0002(_param0, _param1);
    int length = num - _param1 + 1;
    char[] destinationArray = new char[length];
    Array.Copy((Array) _param0, _param1, (Array) destinationArray, 0, length);
    _param1 = num + 1;
    return double.Parse(new string(destinationArray), (IFormatProvider) CultureInfo.InvariantCulture);
  }

  protected static int \u0002(char[] _param0, int _param1)
  {
    int index = _param1;
    while (index < _param0.Length && \u0008\u200A.\u0002(-2036464513).IndexOf(_param0[index]) != -1)
      ++index;
    return index - 1;
  }

  protected static void \u0002(char[] _param0, ref int _param1)
  {
    while (_param1 < _param0.Length && \u0008\u200A.\u0002(-2036464491).IndexOf(_param0[_param1]) != -1)
      ++_param1;
  }

  protected static int \u0003(char[] _param0, int _param1)
  {
    int num = _param1;
    return \u000F\u2007.\u0002(_param0, ref num);
  }

  protected static int \u0002(char[] _param0, ref int _param1)
  {
    \u000F\u2007.\u0002(_param0, ref _param1);
    if (_param1 == _param0.Length)
      return 0;
    char ch = _param0[_param1];
    ++_param1;
    switch (ch)
    {
      case '"':
        return 7;
      case ',':
        return 6;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        return 8;
      case ':':
        return 5;
      case '[':
        return 3;
      case ']':
        return 4;
      case '{':
        return 1;
      case '}':
        return 2;
      default:
        --_param1;
        int num = _param0.Length - _param1;
        if (num >= 5 && _param0[_param1] == 'f' && _param0[_param1 + 1] == 'a' && _param0[_param1 + 2] == 'l' && _param0[_param1 + 3] == 's' && _param0[_param1 + 4] == 'e')
        {
          _param1 += 5;
          return 10;
        }
        if (num >= 4 && _param0[_param1] == 't' && _param0[_param1 + 1] == 'r' && _param0[_param1 + 2] == 'u' && _param0[_param1 + 3] == 'e')
        {
          _param1 += 4;
          return 9;
        }
        if (num < 4 || _param0[_param1] != 'n' || _param0[_param1 + 1] != 'u' || _param0[_param1 + 2] != 'l' || _param0[_param1 + 3] != 'l')
          return 0;
        _param1 += 4;
        return 11;
    }
  }

  protected static bool \u0002(object _param0, StringBuilder _param1)
  {
    switch (_param0)
    {
      case Hashtable _:
        return \u000F\u2007.\u0002((Hashtable) _param0, _param1);
      case ArrayList _:
        return \u000F\u2007.\u0002((ArrayList) _param0, _param1);
      default:
        return false;
    }
  }

  protected static bool \u0002(Hashtable _param0, StringBuilder _param1)
  {
    _param1.Append('{');
    IDictionaryEnumerator enumerator = _param0.GetEnumerator();
    bool flag = true;
    while (enumerator.MoveNext())
    {
      string str = enumerator.Key.ToString();
      object obj = enumerator.Value;
      if (!flag)
        _param1.Append(\u0008\u200A.\u0002(-2036461850));
      \u000F\u2007.\u0002(str, _param1);
      _param1.Append(':');
      StringBuilder stringBuilder = _param1;
      if (!\u000F\u2007.\u0003(obj, stringBuilder))
        return false;
      flag = false;
    }
    _param1.Append('}');
    return true;
  }

  protected static bool \u0002(ArrayList _param0, StringBuilder _param1)
  {
    _param1.Append('[');
    bool flag = true;
    for (int index = 0; index < _param0.Count; ++index)
    {
      object obj = _param0[index];
      if (!flag)
        _param1.Append(\u0008\u200A.\u0002(-2036461850));
      StringBuilder stringBuilder = _param1;
      if (!\u000F\u2007.\u0003(obj, stringBuilder))
        return false;
      flag = false;
    }
    _param1.Append(']');
    return true;
  }

  protected static bool \u0003(object _param0, StringBuilder _param1)
  {
    switch (_param0)
    {
      case string _:
        \u000F\u2007.\u0002((string) _param0, _param1);
        break;
      case Hashtable _:
        \u000F\u2007.\u0002((Hashtable) _param0, _param1);
        break;
      case ArrayList _:
        \u000F\u2007.\u0002((ArrayList) _param0, _param1);
        break;
      default:
        if (\u000F\u2007.\u0002(_param0))
        {
          \u000F\u2007.\u0002(Convert.ToDouble(_param0), _param1);
          break;
        }
        switch (_param0)
        {
          case bool flag1 when flag1:
            _param1.Append(\u0008\u200A.\u0002(-2036464488));
            break;
          case bool flag2 when !flag2:
            _param1.Append(\u0008\u200A.\u0002(-2036464509));
            break;
          case null:
            _param1.Append(\u0008\u200A.\u0002(-2036464457));
            break;
          default:
            return false;
        }
        break;
    }
    return true;
  }

  protected static void \u0002(string _param0, StringBuilder _param1)
  {
    _param1.Append('"');
    foreach (char ch in _param0.ToCharArray())
    {
      switch (ch)
      {
        case '\b':
          _param1.Append(\u0008\u200A.\u0002(-2036464428));
          break;
        case '\t':
          _param1.Append(\u0008\u200A.\u0002(-2036464400));
          break;
        case '\n':
          _param1.Append(\u0008\u200A.\u0002(-2036464442));
          break;
        case '\f':
          _param1.Append(\u0008\u200A.\u0002(-2036464419));
          break;
        case '\r':
          _param1.Append(\u0008\u200A.\u0002(-2036464433));
          break;
        case '"':
          _param1.Append(\u0008\u200A.\u0002(-2036464454));
          break;
        case '\\':
          _param1.Append(\u0008\u200A.\u0002(-2036464477));
          break;
        default:
          int int32 = Convert.ToInt32(ch);
          if (int32 >= 32 && int32 <= 126)
          {
            _param1.Append(ch);
            break;
          }
          _param1.Append(\u0008\u200A.\u0002(-2036464391) + Convert.ToString(int32, 16).PadLeft(4, '0'));
          break;
      }
    }
    _param1.Append('"');
  }

  protected static void \u0002(double _param0, StringBuilder _param1) => _param1.Append(Convert.ToString(_param0, (IFormatProvider) CultureInfo.InvariantCulture));

  protected static bool \u0002(object _param0) => _param0 != null && double.TryParse(_param0.ToString(), out double _);
}
