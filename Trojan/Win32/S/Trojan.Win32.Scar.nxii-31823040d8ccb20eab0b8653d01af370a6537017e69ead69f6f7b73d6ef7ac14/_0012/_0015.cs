// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BitGenerator, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=70e4c26ef2031892
// MVID: D3922F89-E00A-4D10-8BC9-9309D5539F14
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.nxii-31823040d8ccb20eab0b8653d01af370a6537017e69ead69f6f7b73d6ef7ac14.exe

using \u0004;
using \u0008;
using \u0014;
using \u0015;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0012
{
  internal sealed class \u0015 : 
    \u0011,
    IEnumerable,
    IDictionary<string, \u0013>,
    ICollection<KeyValuePair<string, \u0013>>,
    IEnumerable<KeyValuePair<string, \u0013>>,
    INotifyPropertyChanged,
    ICustomTypeDescriptor,
    INotifyPropertyChanging
  {
    internal readonly \u0015.\u0012 \u0001 = new \u0015.\u0012();
    [NonSerialized]
    internal static GetString \u008F;

    [SpecialName]
    protected override IList<\u0013> \u0001() => (IList<\u0013>) this.\u0001;

    [CompilerGenerated]
    [SpecialName]
    public void \u0001([In] PropertyChangedEventHandler obj0)
    {
      // ISSUE: reference to a compiler-generated field
      PropertyChangedEventHandler changedEventHandler1 = this.\u0001;
label_4:
      PropertyChangedEventHandler comparand = changedEventHandler1;
      do
      {
        PropertyChangedEventHandler changedEventHandler2 = (PropertyChangedEventHandler) \u007F\u0005.\u001B\u000E((Delegate) comparand, (Delegate) obj0);
        PropertyChangedEventHandler changedEventHandler3;
        if (true)
          changedEventHandler3 = changedEventHandler2;
        // ISSUE: reference to a compiler-generated field
        changedEventHandler1 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.\u0001, changedEventHandler3, comparand);
        if (changedEventHandler1 != comparand)
          goto label_4;
      }
      while (false);
    }

    [CompilerGenerated]
    [SpecialName]
    public void \u0002([In] PropertyChangedEventHandler obj0)
    {
      // ISSUE: reference to a compiler-generated field
      PropertyChangedEventHandler changedEventHandler1 = this.\u0001;
label_4:
      PropertyChangedEventHandler comparand = changedEventHandler1;
      do
      {
        PropertyChangedEventHandler changedEventHandler2 = (PropertyChangedEventHandler) \u007F\u0005.\u001C\u000E((Delegate) comparand, (Delegate) obj0);
        PropertyChangedEventHandler changedEventHandler3;
        if (true)
          changedEventHandler3 = changedEventHandler2;
        // ISSUE: reference to a compiler-generated field
        changedEventHandler1 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.\u0001, changedEventHandler3, comparand);
        if (changedEventHandler1 != comparand)
          goto label_4;
      }
      while (false);
    }

    [CompilerGenerated]
    [SpecialName]
    public void \u0001([In] PropertyChangingEventHandler obj0)
    {
      // ISSUE: reference to a compiler-generated field
      PropertyChangingEventHandler changingEventHandler1 = this.\u0001;
label_4:
      PropertyChangingEventHandler comparand = changingEventHandler1;
      do
      {
        PropertyChangingEventHandler changingEventHandler2 = (PropertyChangingEventHandler) \u007F\u0005.\u001B\u000E((Delegate) comparand, (Delegate) obj0);
        PropertyChangingEventHandler changingEventHandler3;
        if (true)
          changingEventHandler3 = changingEventHandler2;
        // ISSUE: reference to a compiler-generated field
        changingEventHandler1 = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.\u0001, changingEventHandler3, comparand);
        if (changingEventHandler1 != comparand)
          goto label_4;
      }
      while (false);
    }

    [CompilerGenerated]
    [SpecialName]
    public void \u0002([In] PropertyChangingEventHandler obj0)
    {
      // ISSUE: reference to a compiler-generated field
      PropertyChangingEventHandler changingEventHandler1 = this.\u0001;
label_4:
      PropertyChangingEventHandler comparand = changingEventHandler1;
      do
      {
        PropertyChangingEventHandler changingEventHandler2 = (PropertyChangingEventHandler) \u007F\u0005.\u001C\u000E((Delegate) comparand, (Delegate) obj0);
        PropertyChangingEventHandler changingEventHandler3;
        if (true)
          changingEventHandler3 = changingEventHandler2;
        // ISSUE: reference to a compiler-generated field
        changingEventHandler1 = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.\u0001, changingEventHandler3, comparand);
        if (changingEventHandler1 != comparand)
          goto label_4;
      }
      while (false);
    }

    public \u0015()
    {
    }

    public \u0015([In] \u0012.\u0015 obj0)
      : base((\u0011) obj0)
    {
    }

    internal override void \u0001([In] int obj0, [In] \u0013 obj1, [In] bool obj2)
    {
      while (obj1 == null || obj1.\u0001() != JTokenType.Comment)
      {
        if (true)
        {
          base.\u0001(obj0, obj1, obj2);
          break;
        }
      }
    }

    internal override void \u0001([In] \u0013 obj0, [In] \u0013 obj1)
    {
      \u0006.\u0001((object) obj0, \u0012.\u0015.\u008F(26258));
      \u0002.\u0004 obj2 = obj0.\u0001() == JTokenType.Property ? (\u0002.\u0004) obj0 : throw new ArgumentException(\u0002.\u0002.\u0001(\u0012.\u0015.\u008F(26263), (IFormatProvider) \u0098.\u0002\u0004(), (object) \u0001\u0002.\u007E\u0017\u0004((object) obj0), (object) \u0001\u0002.\u0017\u0004((object) this)));
      if (obj1 != null)
      {
        \u0002.\u0004 obj3 = (\u0002.\u0004) obj1;
        if (\u0007\u0002.\u008C\u0004(obj2.\u0001(), obj3.\u0001()))
          return;
      }
      if (\u0006.\u0001(this.\u0001, obj2.\u0001(), ref obj1))
        throw new ArgumentException(\u0002.\u0002.\u0001(\u0012.\u0015.\u008F(26463), (IFormatProvider) \u0098.\u0002\u0004(), (object) obj2.\u0001(), (object) \u0001\u0002.\u0017\u0004((object) this)));
    }

    internal void \u0001([In] \u0002.\u0004 obj0)
    {
      this.\u0001(obj0.\u0001());
      if (base.\u0001 == null)
        return;
      this.\u0001(new ListChangedEventArgs(ListChangedType.ItemChanged, this.\u0001((\u0013) obj0)));
    }

    internal void \u0002([In] \u0002.\u0004 obj0) => this.\u0002(obj0.\u0001());

    internal override \u0013 \u0001() => (\u0013) new \u0012.\u0015(this);

    [SpecialName]
    public override JTokenType \u0001() => JTokenType.Object;

    public override \u0013 this[[In] object obj0]
    {
      get
      {
        \u0006.\u0001(obj0, \u0012.\u0015.\u008F(6897));
        string str = obj0 as string;
        do
        {
          switch (str)
          {
            case null:
              goto label_1;
            default:
              continue;
          }
        }
        while (false);
        goto label_3;
label_1:
        throw new ArgumentException(\u0002.\u0002.\u0001(\u0012.\u0015.\u008F(26580), (IFormatProvider) \u0098.\u0002\u0004(), (object) \u0006.\u0001(obj0)));
label_3:
        return this[str];
      }
      [param: In] set
      {
        \u0006.\u0001(obj0, \u0012.\u0015.\u008F(6897));
        string str = obj0 as string;
        switch (str)
        {
          case null:
            throw new ArgumentException(\u0002.\u0002.\u0001(\u0012.\u0015.\u008F(26693), (IFormatProvider) \u0098.\u0002\u0004(), (object) \u0006.\u0001(obj0)));
          default:
            this[str] = value;
            break;
        }
      }
    }

    public \u0013 this[[In] string obj0]
    {
      get
      {
        \u0006.\u0001((object) obj0, \u0012.\u0015.\u008F(26798));
        return \u0006.\u0001(obj0, this)?.\u0004();
      }
      [param: In] set
      {
        \u0002.\u0004 obj = \u0006.\u0001(obj0, this);
        if (obj == null)
        {
          if (true)
            goto label_4;
label_2:
          this.Add((object) new \u0002.\u0004(obj0, (object) value));
          this.\u0001(obj0);
          return;
label_4:
          this.\u0002(obj0);
          goto label_2;
        }
        else
          \u0006.\u0001(obj, value);
      }
    }

    public override void \u0001([In] JsonWriter obj0, [In] \u0005.\u0005[] obj1)
    {
      if (false)
        return;
      obj0.\u0002();
      if (false)
        return;
      if (true)
        goto label_12;
label_7:
      int index;
      while (true)
      {
        int num1 = index;
        int num2 = this.\u0001.Count;
        do
        {
          if (true)
            goto label_9;
label_5:
          continue;
label_9:
          if (num1 < num2)
          {
            this.\u0001[index].\u0001(obj0, obj1);
            if (true)
            {
              int num3 = index;
              num2 = 1;
              num1 = num3;
              goto label_5;
            }
            else
              goto label_7;
          }
          else
            goto label_10;
        }
        while (num2 == 0);
        index = num1 + num2;
      }
label_10:
      obj0.\u0011();
      return;
label_12:
      index = 0;
      goto label_7;
    }

    public void \u0002([In] string obj0, [In] \u0013 obj1) => this.Add((object) new \u0002.\u0004(obj0, (object) obj1));

    bool IDictionary<string, \u0013>.\u0001([In] string obj0) => \u0006.\u0001(obj0, this.\u0001);

    [SpecialName]
    ICollection<string> IDictionary<string, \u0013>.\u0001() => \u0006.\u0001(this.\u0001);

    public bool \u0002([In] string obj0)
    {
label_0:
      \u0002.\u0004 obj1 = \u0006.\u0001(obj0, this);
      int num;
      while (obj1 != null)
      {
        if (true)
        {
          if (true)
          {
            \u0002.\u0004 obj2 = obj1;
            if (true)
              goto label_11;
label_7:
            num = 1;
            goto label_8;
label_11:
            \u0006.\u0001((\u0013) obj2);
            goto label_7;
          }
        }
        else
          goto label_0;
      }
      num = 0;
label_2:
      if (num == 0)
        return num != 0;
label_8:
      if (num != 0)
        return num != 0;
      goto label_2;
    }

    public bool \u0001(string _param1, out \u0013 _param2)
    {
label_0:
      \u0002.\u0004 obj = \u0006.\u0001(_param1, this);
      if (obj != null)
        goto label_4;
      else
        goto label_8;
label_2:
      int num;
      if (num == 0)
        return num != 0;
      goto label_7;
label_4:
      if (true)
        _param2 = obj.\u0004();
      else
        goto label_0;
label_6:
      num = 1;
label_7:
      if (num != 0)
        return num != 0;
      goto label_2;
label_8:
      _param2 = (\u0013) null;
      if (true)
      {
        num = 0;
        goto label_2;
      }
      else
        goto label_6;
    }

    [SpecialName]
    ICollection<\u0013> IDictionary<string, \u0013>.\u0001() => throw new NotImplementedException();

    void ICollection<KeyValuePair<string, \u0013>>.\u0001(
      [In] KeyValuePair<string, \u0013> obj0)
    {
      this.Add((object) new \u0002.\u0004(obj0.Key, (object) obj0.Value));
    }

    void ICollection<KeyValuePair<string, \u0013>>.\u0005() => \u0006.\u0001((\u0011) this);

    bool ICollection<KeyValuePair<string, \u0013>>.\u0001(
      [In] KeyValuePair<string, \u0013> obj0)
    {
label_0:
      \u0002.\u0004 obj1 = \u0006.\u0001(obj0.Key, this);
      if (true)
        goto label_8;
label_1:
      \u0002.\u0004 obj2;
      do
      {
        if (true)
        {
          if (obj2 != null)
            goto label_10;
        }
        else
          goto label_0;
      }
      while (false);
      int num = 0;
label_4:
      if (num == 0)
        return num != 0;
label_7:
      if (true)
        return num != 0;
      goto label_4;
label_10:
      num = obj2.\u0004() == obj0.Value ? 1 : 0;
      goto label_7;
label_8:
      obj2 = obj1;
      goto label_1;
    }

    void ICollection<KeyValuePair<string, \u0013>>.\u0001(
      [In] KeyValuePair<string, \u0013>[] obj0,
      [In] int obj1)
    {
      if (obj0 == null)
        throw new ArgumentNullException(\u0012.\u0015.\u008F(25932));
      if (obj1 < 0)
        throw new ArgumentOutOfRangeException(\u0012.\u0015.\u008F(25941), \u0012.\u0015.\u008F(25958));
      if (true)
      {
        if (obj1 >= obj0.Length)
        {
          if (true)
          {
            if (obj1 != 0)
              throw new ArgumentException(\u0012.\u0015.\u008F(25995));
          }
          else
            goto label_12;
        }
        int num1 = this.get_Count();
        int num2 = obj0.Length;
        int num3;
        while (true)
        {
          num3 = num2 - obj1;
          if (false)
            num2 = num3;
          else
            break;
        }
        if (num1 <= num3)
        {
          int num4 = 0;
          IEnumerator<\u0013> enumerator = this.\u0001.GetEnumerator();
          try
          {
            while (\u0015\u0002.\u007E\u009E\u0004((object) enumerator))
            {
              \u0002.\u0004 current = (\u0002.\u0004) enumerator.Current;
              obj0[obj1 + num4] = new KeyValuePair<string, \u0013>(current.\u0001(), current.\u0004());
              int num5 = num4;
              int num6;
              while (true)
              {
                num6 = num5 + 1;
                if (false)
                  num5 = num6;
                else
                  break;
              }
              num4 = num6;
            }
            return;
          }
          finally
          {
            if (enumerator == null)
              goto label_22;
label_21:
            \u0011.\u007E\u0007\u0002((object) enumerator);
label_22:
            if (false)
              goto label_21;
          }
        }
label_12:
        throw new ArgumentException(\u0012.\u0015.\u008F(26076));
      }
    }

    [SpecialName]
    bool ICollection<KeyValuePair<string, \u0013>>.\u0013() => false;

    bool ICollection<KeyValuePair<string, \u0013>>.\u0002(
      [In] KeyValuePair<string, \u0013> obj0)
    {
      if (true)
        goto label_5;
label_4:
      return true;
label_5:
      int num = ((ICollection<KeyValuePair<string, \u0013>>) this).Contains(obj0) ? 1 : 0;
      if (false)
        return num != 0;
      if (num == 0)
        return false;
      ((IDictionary<string, \u0013>) this).Remove(obj0.Key);
      goto label_4;
    }

    public IEnumerator<KeyValuePair<string, \u0013>> \u0001() => (IEnumerator<KeyValuePair<string, \u0013>>) new \u0012.\u0015.\u0001(0)
    {
      \u0001 = this
    };

    protected virtual void \u0001([In] string obj0)
    {
label_0:
      // ISSUE: reference to a compiler-generated field
      if (this.\u0001 == null)
        goto label_3;
label_1:
      // ISSUE: reference to a compiler-generated field
      \u0084\u0005.\u007E\u0080\u000E((object) this.\u0001, (object) this, new PropertyChangedEventArgs(obj0));
label_3:
      if (true)
      {
        if (false)
          goto label_1;
      }
      else
        goto label_0;
    }

    protected virtual void \u0002([In] string obj0)
    {
label_0:
      // ISSUE: reference to a compiler-generated field
      if (this.\u0001 == null)
        goto label_3;
label_1:
      // ISSUE: reference to a compiler-generated field
      \u0086\u0005.\u007E\u0081\u000E((object) this.\u0001, (object) this, new PropertyChangingEventArgs(obj0));
label_3:
      if (true)
      {
        if (false)
          goto label_1;
      }
      else
        goto label_0;
    }

    PropertyDescriptorCollection ICustomTypeDescriptor.\u0001() => \u0087\u0005.\u007E\u0082\u000E((object) this, (Attribute[]) null);

    PropertyDescriptorCollection ICustomTypeDescriptor.\u0001(
      [In] Attribute[] obj0)
    {
      PropertyDescriptorCollection descriptorCollection = new PropertyDescriptorCollection((PropertyDescriptor[]) null);
      IEnumerator<KeyValuePair<string, \u0013>> enumerator = this.\u0001();
label_1:
      try
      {
        if (true)
          goto label_4;
label_2:
        if (true)
        {
          KeyValuePair<string, \u0013> current = enumerator.Current;
          if (true)
          {
            int num = \u0088\u0005.\u007E\u0083\u000E((object) descriptorCollection, (PropertyDescriptor) new \u000F(current.Key));
          }
          else
            goto label_2;
        }
        else
          goto label_1;
label_4:
        if (true)
        {
          if (\u0015\u0002.\u007E\u009E\u0004((object) enumerator))
            goto label_2;
        }
        else
          goto label_2;
      }
      finally
      {
        if (enumerator != null)
          \u0011.\u007E\u0007\u0002((object) enumerator);
      }
      return descriptorCollection;
    }

    AttributeCollection ICustomTypeDescriptor.\u0001() => AttributeCollection.Empty;

    string ICustomTypeDescriptor.\u0001() => (string) null;

    string ICustomTypeDescriptor.\u0002() => (string) null;

    TypeConverter ICustomTypeDescriptor.\u0001() => new TypeConverter();

    EventDescriptor ICustomTypeDescriptor.\u0001() => (EventDescriptor) null;

    PropertyDescriptor ICustomTypeDescriptor.\u0002() => (PropertyDescriptor) null;

    object ICustomTypeDescriptor.\u0001([In] Type obj0) => (object) null;

    EventDescriptorCollection ICustomTypeDescriptor.\u0001(
      [In] Attribute[] obj0)
    {
      return EventDescriptorCollection.Empty;
    }

    EventDescriptorCollection ICustomTypeDescriptor.\u0001() => EventDescriptorCollection.Empty;

    object ICustomTypeDescriptor.\u0001([In] PropertyDescriptor obj0) => (object) null;

    static \u0015() => Strings.CreateGetStringDelegate(typeof (\u0012.\u0015));
  }
}
