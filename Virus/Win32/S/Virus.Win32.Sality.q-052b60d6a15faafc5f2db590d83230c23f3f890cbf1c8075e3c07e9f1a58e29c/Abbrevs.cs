// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.RegAsm.Abbrevs
// Assembly: RegAsm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 097EDB82-DB75-4D42-81B4-3BEFAFAFEBC0
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Sality.q-052b60d6a15faafc5f2db590d83230c23f3f890cbf1c8075e3c07e9f1a58e29c.exe

using System;
using System.Globalization;

namespace Microsoft.Tools.RegAsm
{
  internal class Abbrevs
  {
    private string[] m_aOptions;
    private bool[] m_bRequiresValue;
    private bool[] m_bCanHaveValue;

    internal Abbrevs(string[] aOptions)
    {
      this.m_aOptions = new string[aOptions.Length];
      this.m_bRequiresValue = new bool[aOptions.Length];
      this.m_bCanHaveValue = new bool[aOptions.Length];
      for (int index = 0; index < aOptions.Length; ++index)
      {
        string str = aOptions[index].ToLower(CultureInfo.InvariantCulture);
        if (str.StartsWith("*", StringComparison.Ordinal))
        {
          this.m_bRequiresValue[index] = true;
          this.m_bCanHaveValue[index] = true;
          str = str.Substring(1);
        }
        else if (str.StartsWith("+", StringComparison.Ordinal))
        {
          this.m_bRequiresValue[index] = false;
          this.m_bCanHaveValue[index] = true;
          str = str.Substring(1);
        }
        this.m_aOptions[index] = str;
      }
    }

    internal string Lookup(string strOpt, out bool bRequiresValue, out bool bCanHaveValue)
    {
      bool flag = false;
      int index1 = -1;
      for (int index2 = 0; index2 < this.m_aOptions.Length; ++index2)
      {
        if (strOpt.Equals(this.m_aOptions[index2], StringComparison.OrdinalIgnoreCase))
        {
          bRequiresValue = this.m_bRequiresValue[index2];
          bCanHaveValue = this.m_bCanHaveValue[index2];
          return this.m_aOptions[index2];
        }
        if (this.m_aOptions[index2].StartsWith(strOpt, StringComparison.OrdinalIgnoreCase))
        {
          flag = !flag ? true : throw new ApplicationException(Resource.FormatString("Err_AmbigousOption", (object) strOpt));
          index1 = index2;
        }
      }
      if (!flag)
        throw new ApplicationException(Resource.FormatString("Err_UnknownOption", (object) strOpt));
      bRequiresValue = this.m_bRequiresValue[index1];
      bCanHaveValue = this.m_bCanHaveValue[index1];
      return this.m_aOptions[index1];
    }
  }
}
