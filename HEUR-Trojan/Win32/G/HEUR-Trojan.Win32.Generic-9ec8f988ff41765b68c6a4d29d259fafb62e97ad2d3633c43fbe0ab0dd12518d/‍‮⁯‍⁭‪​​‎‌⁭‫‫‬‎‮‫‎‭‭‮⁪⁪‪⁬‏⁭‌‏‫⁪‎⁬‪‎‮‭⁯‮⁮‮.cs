// Decompiled with JetBrains decompiler
// Type: ‍‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;

public class \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮
{
  public static byte[] \u202C⁯⁫‮‭⁪‌‍​‎⁭⁮‌‍‮‍‎‍⁬‏⁫‪‎‎⁯⁮‬⁮⁪‬‭‍‎⁭‌‬⁯⁫⁬⁮‮(
    byte[] _param0,
    byte[] _param1,
    int _param2,
    int _param3,
    int _param4,
    int _param5)
  {
    if (_param0 == null)
      throw new ArgumentNullException("Passphrase P must be provided.");
    if (_param1 == null)
      throw new ArgumentNullException("Salt S must be provided.");
    if (_param2 <= 1 || !\u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u206B⁫⁭⁪⁫‬‬‎⁬‮⁯‍⁪‬‍‏⁫⁫‎‭⁮⁮⁪‫⁯‮‫​⁫‫⁬‪⁮‍⁯⁯⁯⁮​‍‮(_param2))
      throw new ArgumentException("Cost parameter N must be > 1 and a power of 2.");
    if (_param3 == 1 && _param2 >= 65536)
      throw new ArgumentException("Cost parameter N must be > 1 and < 65536.");
    if (_param3 < 1)
      throw new ArgumentException("Block size r must be >= 1.");
    int num = int.MaxValue / (128 * _param3 * 8);
    if (_param4 < 1 || _param4 > num)
      throw new ArgumentException("Parallelisation parameter p must be >= 1 and <= " + num.ToString() + " (based on block size r of " + _param3.ToString() + ")");
    if (_param5 < 1)
      throw new ArgumentException("Generated key length dkLen must be >= 1.");
    return \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u206E⁫‌‭⁫‫‮‏‭‬​⁫‬‫⁯‪‪‮‎⁫⁭⁪‍‭‌‏⁪​​‮⁭⁮‭‮⁯‮‮⁯‎⁪‮(_param0, _param1, _param2, _param3, _param4, _param5);
  }

  private static byte[] \u206E⁫‌‭⁫‫‮‏‭‬​⁫‬‫⁯‪‪‮‎⁫⁭⁪‍‭‌‏⁪​​‮⁭⁮‭‮⁯‮‮⁯‎⁪‮(
    byte[] _param0,
    byte[] _param1,
    int _param2,
    int _param3,
    int _param4,
    int _param5)
  {
    int num1 = _param3 * 128;
    byte[] numArray1 = \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u206B‏⁬⁮‏‎‍‪‫⁬‍​‬‌⁯‌‏⁬‫‎⁯‌⁮‍‎‏‭‍‪‌‏⁫‫‎‎‬​⁮‫‌‮(_param0, _param1, _param4 * num1);
    uint[] numArray2 = (uint[]) null;
    try
    {
      int length = numArray1.Length >> 2;
      numArray2 = new uint[length];
      \u200F⁬‏‬⁭⁬⁮‮⁪‌‎⁯‮⁪⁯⁭⁯⁮‏‭⁪⁭⁬‭‍​⁮‍⁯‌‌⁬⁬⁫⁭‎‫​‍⁪‮.\u200C‌‏⁮⁫‎‭⁮⁯⁯⁬​‭‍‮‫⁪⁪⁭⁯⁬‫‪​⁬⁫‎‬​⁫‪‍⁪‮‏⁫‏‫‏‭‮(numArray1, 0, numArray2);
      int num2 = 0;
      for (int index = _param2 * _param3; _param2 - num2 > 2 && index > 1024; index >>= 1)
        ++num2;
      int num3 = num1 >> 2;
      for (int index = 0; index < length; index += num3)
        \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u200B‭‪⁪⁬⁭​‍‎⁭⁯‪⁭⁯⁪​‪‍‍‫⁭‏​⁬‍⁬⁬‌‪‫⁮‌‍⁯‎⁭‭⁮‭‌‮(numArray2, index, _param2, num2, _param3);
      \u200F⁬‏‬⁭⁬⁮‮⁪‌‎⁯‮⁪⁯⁭⁯⁮‏‭⁪⁭⁬‭‍​⁮‍⁯‌‌⁬⁬⁫⁭‎‫​‍⁪‮.\u202A‫‎⁮‌‮‭‎‪⁭​‌⁮‬⁬⁪⁮‌‎⁮‬‍‫⁬⁮‍‏⁯‏‍⁭⁪‬‎‭‌⁯‍⁬‬‮(numArray2, numArray1, 0);
      return \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u206B‏⁬⁮‏‎‍‪‫⁬‍​‬‌⁯‌‏⁬‫‎⁯‌⁮‍‎‏‭‍‪‌‏⁫‫‎‎‬​⁮‫‌‮(_param0, numArray1, _param5);
    }
    finally
    {
      \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u202B​⁯‭⁮⁭⁪⁭‫⁭⁬​⁫‏‮‌‎⁫​​‫⁮‍‮‭​⁫⁬​‍⁬‪‏⁭⁮⁪⁪⁬⁬⁬‮((Array) numArray1, (Array) numArray2);
    }
  }

  private static byte[] \u206B‏⁬⁮‏‎‍‪‫⁬‍​‬‌⁯‌‏⁬‫‎⁯‌⁮‍‎‏‭‍‪‌‏⁫‫‎‎‬​⁮‫‌‮(
    byte[] _param0,
    byte[] _param1,
    int _param2)
  {
    \u206B‬⁬‏⁭⁫‍​‮​‭⁮⁪⁬‫‬‌‍⁪‮‍⁭‍⁪⁫‬⁪⁫​⁬‪‌‭‌⁭⁬‫⁫‫⁮‮ obj = new \u206B‬⁬‏⁭⁫‍​‮​‭⁮⁪⁬‫‬‌‍⁪‮‍⁭‍⁪⁫‬⁪⁫​⁬‪‌‭‌⁭⁬‫⁫‫⁮‮((\u206E‏‏⁮⁫‭⁮‌‏‎⁬⁪‍⁪‎‎‏‎‬‫​⁪‬⁭⁭‬​​‎⁪‌‍⁬⁬⁯‍‌‬‫‭‮) new \u206B‎‎⁪‪⁫‍‮‌‪‬‫‫‬⁭⁫⁮‏‫‪​‌⁮‎⁫‍⁬⁬‫‌‌⁬⁮‏‎‏‬⁯⁮⁫‮());
    obj.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(_param0, _param1, 1);
    return ((\u200C⁭‎‪‬⁪⁭⁮‌​⁯‫⁪⁭⁬⁭‌‎⁮⁮⁯⁯​‏‎⁮‌‬⁪⁭⁬​⁯‏⁪‌‮‍⁮‮) ((\u206A‏‭⁮⁪‫⁪⁫‌⁫‪⁭⁭‫‭‎​⁫⁪‌‌‏⁫⁪‪⁪⁯⁭⁬‪‮⁫‮‌‌‪‍‍‭⁭‮) obj).\u202C​⁫⁭⁫‬‭‎⁬‫‍‮⁭⁭‌⁫‪‎⁭‌‪‍‍‬⁯‎⁪‮‍⁫‌⁭⁬​⁭⁯⁫⁫⁪‏‮(_param2 * 8)).\u202B‫⁬⁬⁮‍‏⁪‭‎⁪‏‬⁪​⁭‍⁮​​⁬‭‌‮‬‎‍⁭⁯‮⁫⁬⁯⁭​‪‬‍‎‭‮();
  }

  private static void \u200B‭‪⁪⁬⁭​‍‎⁭⁯‪⁭⁯⁪​‪‍‍‫⁭‏​⁬‍⁬⁬‌‪‫⁮‌‍⁯‎⁭‭⁮‭‌‮(
    uint[] _param0,
    int _param1,
    int _param2,
    int _param3,
    int _param4)
  {
    int num1 = \u202A⁯⁪⁮‌‫‍‎‬‫⁯⁪⁪⁯⁮‍‫‫‫⁯⁪‭​⁬‬‏​‭‎‪⁯‮​​‬​‌‎‏⁪‮.\u202B‮⁪‏⁫⁮⁪‮​⁮⁮‌⁪⁮⁯‎‭⁭‫⁬‎⁬‌​⁪‬⁪‫⁪‍⁫‎⁫‮⁯‏‌‬⁬‎‮(_param2);
    int num2 = _param2 >> _param3;
    int length1 = 1 << _param3;
    int num3 = num2 - 1;
    int num4 = _param3;
    int num5 = num1 - num4;
    int length2 = _param4 * 32;
    uint[] numArray1 = new uint[16];
    uint[] numArray2 = new uint[16];
    uint[] numArray3 = new uint[length2];
    uint[] numArray4 = new uint[length2];
    uint[][] numArray5 = new uint[length1][];
    try
    {
      Array.Copy((Array) _param0, _param1, (Array) numArray4, 0, length2);
      for (int index1 = 0; index1 < length1; ++index1)
      {
        uint[] destinationArray = new uint[num2 * length2];
        numArray5[index1] = destinationArray;
        int destinationIndex1 = 0;
        for (int index2 = 0; index2 < num2; index2 += 2)
        {
          Array.Copy((Array) numArray4, 0, (Array) destinationArray, destinationIndex1, length2);
          int destinationIndex2 = destinationIndex1 + length2;
          \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u206F‬⁮‎‫⁭⁫‮‍‏⁯⁯⁭‬‫⁯⁮⁬‪‏‌‌‫⁫⁫‫‎‍‪‍⁬⁬⁭⁯​‭​‮‫‌‮(numArray4, numArray1, numArray2, numArray3, _param4);
          Array.Copy((Array) numArray3, 0, (Array) destinationArray, destinationIndex2, length2);
          destinationIndex1 = destinationIndex2 + length2;
          \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u206F‬⁮‎‫⁭⁫‮‍‏⁯⁯⁭‬‫⁯⁮⁬‪‏‌‌‫⁫⁫‫‎‍‪‍⁬⁬⁭⁯​‭​‮‫‌‮(numArray3, numArray1, numArray2, numArray4, _param4);
        }
      }
      uint num6 = (uint) (_param2 - 1);
      for (int index = 0; index < _param2; ++index)
      {
        int num7 = (int) numArray4[length2 - 16] & (int) num6;
        Array.Copy((Array) numArray5[num7 >> num5], (num7 & num3) * length2, (Array) numArray3, 0, length2);
        \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u202B⁬‍⁭‎‭‌⁯⁭‎⁮‭‫‬‎‬⁬⁬‪‏‍‏‭‪‪⁫⁫‌‪⁬‪⁬‬⁮​​‍​⁯‎‮(numArray3, numArray4, 0, numArray3);
        \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u206F‬⁮‎‫⁭⁫‮‍‏⁯⁯⁭‬‫⁯⁮⁬‪‏‌‌‫⁫⁫‫‎‍‪‍⁬⁬⁭⁯​‭​‮‫‌‮(numArray3, numArray1, numArray2, numArray4, _param4);
      }
      Array.Copy((Array) numArray4, 0, (Array) _param0, _param1, length2);
    }
    finally
    {
      \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u202B​⁯‭⁮⁭⁪⁭‫⁭⁬​⁫‏‮‌‎⁫​​‫⁮‍‮‭​⁫⁬​‍⁬‪‏⁭⁮⁪⁪⁬⁬⁬‮((Array[]) numArray5);
      \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u202B​⁯‭⁮⁭⁪⁭‫⁭⁬​⁫‏‮‌‎⁫​​‫⁮‍‮‭​⁫⁬​‍⁬‪‏⁭⁮⁪⁪⁬⁬⁬‮((Array) numArray4, (Array) numArray1, (Array) numArray2, (Array) numArray3);
    }
  }

  private static void \u206F‬⁮‎‫⁭⁫‮‍‏⁯⁯⁭‬‫⁯⁮⁬‪‏‌‌‫⁫⁫‫‎‍‪‍⁬⁬⁭⁯​‭​‮‫‌‮(
    uint[] _param0,
    uint[] _param1,
    uint[] _param2,
    uint[] _param3,
    int _param4)
  {
    Array.Copy((Array) _param0, _param0.Length - 16, (Array) _param1, 0, 16);
    int num1 = 0;
    int destinationIndex = 0;
    int num2 = _param0.Length >> 1;
    for (int index = 2 * _param4; index > 0; --index)
    {
      \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u202B⁬‍⁭‎‭‌⁯⁭‎⁮‭‫‬‎‬⁬⁬‪‏‍‏‭‪‪⁫⁫‌‪⁬‪⁬‬⁮​​‍​⁯‎‮(_param1, _param0, num1, _param2);
      \u206F⁭‍​‭‌‌‪‬⁮⁫⁪⁫⁪⁬⁮‬‌‌‪⁬‬⁬‍​‪⁭‮‎‏‪‬⁬⁭‎⁮‏‪​‎‮.\u206E⁪​⁯‪‌⁭‍‍‬⁭‍⁪⁭‏‬‮‫‬⁭​‫‮‍⁫⁭‮‍‭‬⁫⁭‍‮⁪⁫‍‮⁬‬‮(8, _param2, _param1);
      Array.Copy((Array) _param1, 0, (Array) _param3, destinationIndex, 16);
      destinationIndex = num2 + num1 - destinationIndex;
      num1 += 16;
    }
  }

  private static void \u202B⁬‍⁭‎‭‌⁯⁭‎⁮‭‫‬‎‬⁬⁬‪‏‍‏‭‪‪⁫⁫‌‪⁬‪⁬‬⁮​​‍​⁯‎‮(
    uint[] _param0,
    uint[] _param1,
    int _param2,
    uint[] _param3)
  {
    for (int index = _param3.Length - 1; index >= 0; --index)
      _param3[index] = _param0[index] ^ _param1[_param2 + index];
  }

  private static void \u206C‍‫‎⁭⁫‎‫​‬⁮‫‌⁭‎⁪⁯⁫‮​‬⁬‮⁮‬‏​‭‍​⁬‌‌⁯⁬⁮‮​‫‫‮(Array _param0)
  {
    if (_param0 == null)
      return;
    Array.Clear(_param0, 0, _param0.Length);
  }

  private static void \u202B​⁯‭⁮⁭⁪⁭‫⁭⁬​⁫‏‮‌‎⁫​​‫⁮‍‮‭​⁫⁬​‍⁬‪‏⁭⁮⁪⁪⁬⁬⁬‮(params Array[] _param0)
  {
    foreach (Array array in _param0)
      \u200D‮⁯‍⁭‪​​‎‌⁭‫‫‬‎‮‫‎‭‭‮⁪⁪‪⁬‏⁭‌‏‫⁪‎⁬‪‎‮‭⁯‮⁮‮.\u206C‍‫‎⁭⁫‎‫​‬⁮‫‌⁭‎⁪⁯⁫‮​‬⁬‮⁮‬‏​‭‍​⁬‌‌⁯⁬⁮‮​‫‫‮(array);
  }

  private static bool \u206B⁫⁭⁪⁫‬‬‎⁬‮⁯‍⁪‬‍‏⁫⁫‎‭⁮⁮⁪‫⁯‮‫​⁫‫⁬‪⁮‍⁯⁯⁯⁮​‍‮(int _param0) => (_param0 & _param0 - 1) == 0;
}
