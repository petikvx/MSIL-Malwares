// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: ResourceTypeCo, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: D98D3237-A321-4821-9049-807D7FD195EE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-2bf24741d28e493dd3c0fabc7478edccab0bc3835b2648c09ba153c94c065f3c.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1395841228;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1940317641)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -559949301 ^ -626011744;
            continue;
          case 2:
            num1 = (int) num2 * 279835641 ^ -1414261589;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
label_1:
      int num1 = -1749359873;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1010279508)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -1667116867 ^ 169958543;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = 1122014609;
      float[] numArray;
      float[] riskChances;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 173550112)) % 8U)
        {
          case 0:
            riskChances = numArray;
            num1 = (int) num2 * 602918682 ^ -1098064740;
            continue;
          case 1:
            numArray = new float[json.Count];
            num1 = (int) num2 * 1190417120 ^ -706104149;
            continue;
          case 2:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = 662419998;
            continue;
          case 3:
            aIndex = 0;
            num1 = (int) num2 * -1557691339 ^ 959899193;
            continue;
          case 4:
            num1 = (int) num2 * -907814966 ^ 1729968967;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? 1826465682 : (num3 = 1400882536);
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 960382170;
      int aIndex1;
      int count;
      bool flag1;
      List<Card> cardList;
      Card[] array;
      int aIndex2;
      bool flag2;
      int num2;
      JSONNode jsonNode;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 174969104)) % 21U)
        {
          case 0:
            num1 = 1430417685;
            continue;
          case 1:
            jsonNode = json[aIndex1];
            num1 = (int) num3 * -1200719011 ^ -1377577809;
            continue;
          case 2:
            array = cardList.ToArray();
            num1 = (int) num3 * 1484855596 ^ 901938076;
            continue;
          case 3:
            num2 = 0;
            num1 = (int) num3 * -720757832 ^ -1250210120;
            continue;
          case 4:
            num1 = 88029535;
            continue;
          case 5:
            flag2 = aIndex2 < maxImpact * 2;
            num1 = 1976543619;
            continue;
          case 6:
            ++aIndex1;
            num1 = (int) num3 * -1557513207 ^ -1479065744;
            continue;
          case 7:
            int num4 = flag2 ? -349804381 : (num4 = -609534974);
            num1 = num4 ^ (int) num3 * -1297181121;
            continue;
          case 9:
            ++num2;
            num1 = (int) num3 * -251446668 ^ 1695090505;
            continue;
          case 10:
            num1 = (int) num3 * -894130980 ^ -1205074254;
            continue;
          case 11:
            ++aIndex2;
            num1 = (int) num3 * 2069818238 ^ 1325469556;
            continue;
          case 12:
            int num5 = !flag1 ? 1723588942 : (num5 = 1248285019);
            num1 = num5 ^ (int) num3 * 1228052766;
            continue;
          case 13:
            aIndex2 = 0;
            num1 = (int) num3 * -1254586947 ^ 861717046;
            continue;
          case 14:
            count = json.Count;
            cardList = new List<Card>();
            num1 = (int) num3 * -157743486 ^ -1033836226;
            continue;
          case 15:
            flag1 = aIndex1 < count;
            num1 = 2136237116;
            continue;
          case 16:
            num1 = (int) num3 * 1890871356 ^ 2006211725;
            continue;
          case 17:
            aIndex1 = 0;
            num1 = (int) num3 * 1763077735 ^ -1484563311;
            continue;
          case 18:
            goto label_1;
          case 19:
            bool flag3 = aIndex2 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = 1045530709;
            continue;
          case 20:
            int num6;
            num1 = num6 = num2 < jsonNode[aIndex2].AsInt ? 473535989 : (num6 = 324445503);
            continue;
          default:
            goto label_22;
        }
      }
label_22:
      return array;
    }

    public override string ToString()
    {
      string str = Rules.\u200B‬‍‫⁭‍‏​‏⁪‭⁮⁮‌‭⁬⁪‪‭⁬​‫⁯​‭⁬‫⁫⁫⁪⁯⁪‌‪‮‍‏⁫⁫‌‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
      {
        (object) this.SprintCount,
        (object) this.MaxImpact,
        (object) this.CardsToString(),
        (object) this.InitialResources,
        (object) this.NormalPlanningCount,
        (object) this.NormalPlanningCost,
        (object) this.OverPlanningCost,
        (object) this.SprintsWonWithoutPlanning,
        (object) this.RiskChancesToString(),
        (object) this.EconomicsAffectsAll,
        (object) this.StayOnSprintMinDiff,
        (object) this.OnlyOneWinner
      });
label_1:
      int num1 = 1528550206;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1078883749)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 2056956913 ^ 1410445223;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = -1266946347;
      string str1;
      Card card1;
      int index;
      Card[] cards;
      int num2;
      bool flag;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -897992516)) % 20U)
        {
          case 0:
            num1 = (int) num3 * -1124281300 ^ 1431019992;
            continue;
          case 1:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202E⁫​⁬⁪‍‬​‏⁭‏⁫‭​⁮‪‌‬​‎‬​‮⁪‌‪‪⁫‭⁭‮⁬‍⁭​‌‎‪‮‎‮((object) card2) : (string) null;
            str1 = Rules.\u202C⁮‫⁪⁬‍‏⁭⁮‫​⁯​‫‫⁮⁭‭​​‪‪‫‮⁫⁮‌​‌⁯⁯⁬⁪​‎⁪‌‪‭‭‮(str3, str4, " ");
            num1 = -225396344;
            continue;
          case 2:
            str2 = Rules.\u206D‍⁭⁮⁭​‮‏‬⁮‮‬‎⁫⁪⁫‪‏‭‪‌‭‪‬‍⁫⁬‫​‍‍‏‌⁪‪‎⁮⁪‏⁫‮(str1, "\n]");
            num1 = (int) num3 * -1130370017 ^ -1305876146;
            continue;
          case 3:
            num1 = (int) num3 * 590533908 ^ 1595416529;
            continue;
          case 5:
            flag = num2 != card1.Type;
            num1 = (int) num3 * 410509669 ^ 1601153273;
            continue;
          case 6:
            index = 0;
            num1 = (int) num3 * -1901645957 ^ 1890021357;
            continue;
          case 7:
            cards = this.Cards;
            num1 = (int) num3 * 863284257 ^ -328272943;
            continue;
          case 8:
            int num4 = !flag ? 1148301589 : (num4 = 959253038);
            num1 = num4 ^ (int) num3 * -301192855;
            continue;
          case 9:
            str1 = "[\n\t";
            num1 = (int) num3 * 1638308062 ^ -1938073285;
            continue;
          case 10:
            str1 = Rules.\u206D‍⁭⁮⁭​‮‏‬⁮‮‬‎⁫⁪⁫‪‏‭‪‌‭‪‬‍⁫⁬‫​‍‍‏‌⁪‪‎⁮⁪‏⁫‮(str1, "\n\t");
            num1 = (int) num3 * -1763878934 ^ 2056900754;
            continue;
          case 11:
            goto label_1;
          case 12:
            num1 = (int) num3 * -1392707258 ^ -675461419;
            continue;
          case 13:
            num2 = 0;
            num1 = (int) num3 * -966172284 ^ -759836405;
            continue;
          case 14:
            num1 = (int) num3 * -112182616 ^ 1209307658;
            continue;
          case 15:
            card1 = cards[index];
            num1 = -551366460;
            continue;
          case 16:
            num1 = (int) num3 * -1595221720 ^ -2105521819;
            continue;
          case 17:
            ++index;
            num1 = (int) num3 * -1563361016 ^ 952826127;
            continue;
          case 18:
            num2 = card1.Type;
            num1 = (int) num3 * 1788850830 ^ 1852304891;
            continue;
          case 19:
            int num5;
            num1 = num5 = index < cards.Length ? -1293179609 : (num5 = -482648534);
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 601276261;
      string str1;
      int index;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 569433768)) % 8U)
        {
          case 0:
            int num3 = flag ? 1087260463 : (num3 = 1318508289);
            num1 = num3 ^ (int) num2 * 276311712;
            continue;
          case 1:
            str2 = Rules.\u206D‍⁭⁮⁭​‮‏‬⁮‮‬‎⁫⁪⁫‪‏‭‪‌‭‪‬‍⁫⁬‫​‍‍‏‌⁪‪‎⁮⁪‏⁫‮(str1, " ]");
            num1 = (int) num2 * 217542745 ^ -763930947;
            continue;
          case 2:
            goto label_1;
          case 4:
            num1 = (int) num2 * 1012501791 ^ 298785095;
            continue;
          case 5:
            str1 = Rules.\u206D‍⁭⁮⁭​‮‏‬⁮‮‬‎⁫⁪⁫‪‏‭‪‌‭‪‬‍⁫⁬‫​‍‍‏‌⁪‪‎⁮⁪‏⁫‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206D‌‬‍⁬‍⁪‏⁮‪‎‌⁫‮⁬⁫‬‭⁭⁬‮‬‍⁯‎‭‎‪‌⁯‫⁬‍⁬‭⁯⁪⁫‫‍‮()));
            index = 1;
            num1 = (int) num2 * 1773724092 ^ -966381966;
            continue;
          case 6:
            flag = index < this.RiskChances.Length;
            num1 = 1411231976;
            continue;
          case 7:
            str1 = Rules.\u202C⁮‫⁪⁬‍‏⁭⁮‫​⁯​‫‫⁮⁭‭​​‪‪‫‮⁫⁮‌​‌⁯⁯⁬⁪​‎⁪‌‪‭‭‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206D‌‬‍⁬‍⁪‏⁮‪‎‌⁫‮⁬⁫‬‭⁭⁬‮‬‍⁯‎‭‎‪‌⁯‫⁬‍⁬‭⁯⁪⁫‫‍‮()));
            ++index;
            num1 = 1981469182;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    static string \u200B‬‍‫⁭‍‏​‏⁪‭⁮⁮‌‭⁬⁪‪‭⁬​‫⁯​‭⁬‫⁫⁫⁪⁯⁪‌‪‮‍‏⁫⁫‌‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206D‍⁭⁮⁭​‮‏‬⁮‮‬‎⁫⁪⁫‪‏‭‪‌‭‪‬‍⁫⁬‫​‍‍‏‌⁪‪‎⁮⁪‏⁫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202E⁫​⁬⁪‍‬​‏⁭‏⁫‭​⁮‪‌‬​‎‬​‮⁪‌‪‪⁫‭⁭‮⁬‍⁭​‌‎‪‮‎‮([In] object obj0) => obj0.ToString();

    static string \u202C⁮‫⁪⁬‍‏⁭⁮‫​⁯​‫‫⁮⁭‭​​‪‪‫‮⁫⁮‌​‌⁯⁯⁬⁪​‎⁪‌‪‭‭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206D‌‬‍⁬‍⁪‏⁮‪‎‌⁫‮⁬⁫‬‭⁭⁬‮‬‍⁯‎‭‎‪‌⁯‫⁬‍⁬‭⁯⁪⁫‫‍‮() => CultureInfo.InvariantCulture;
  }
}
