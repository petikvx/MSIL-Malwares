// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: PInvokeAttribut, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: D5FBD274-2C02-4186-9C35-1EE6A67C7338
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1aab9260ecb3ef6b3d07882eff498982f5146fb73a61ff77f8ea0dfbfb02cde7.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u202B⁯‎​⁫⁮​‍⁯‎⁮​‫⁬⁪‫⁮⁫‍​⁮⁮‍‮⁭‫⁯‫‎‪​‌​‎‫‬⁮⁭⁬⁬‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 1343224727;
        int index;
        bool finished;
        PlayerState[] playerStates;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 464082750)) % 14U)
          {
            case 0:
              finished = true;
              num1 = (int) num2 * -1515543853 ^ -1334973599;
              continue;
            case 1:
              ++index;
              num1 = 882528965;
              continue;
            case 2:
              int num3;
              num1 = num3 = playerStates[index].State != State.Playing ? 81869601 : (num3 = 989966763);
              continue;
            case 3:
              num1 = (int) num2 * -1011721249 ^ -1938437917;
              continue;
            case 4:
              index = 0;
              num1 = (int) num2 * -8420205 ^ -1669306568;
              continue;
            case 5:
              num1 = 948194238;
              continue;
            case 6:
              goto label_1;
            case 7:
              int num4;
              num1 = num4 = index >= playerStates.Length ? 956227819 : (num4 = 702343860);
              continue;
            case 8:
              playerStates = this._playerStates;
              num1 = (int) num2 * -60079178 ^ -1280468916;
              continue;
            case 9:
              finished = false;
              num1 = (int) num2 * 138535280 ^ -1843213620;
              continue;
            case 11:
              int num5 = !this._finished ? -1066695382 : (num5 = -248027403);
              num1 = num5 ^ (int) num2 * 1135905657;
              continue;
            case 12:
              num1 = (int) num2 * 217719842 ^ -1887864283;
              continue;
            case 13:
              finished = true;
              num1 = (int) num2 * -875480835 ^ 2072795517;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
      this.Winners.Clear();
label_1:
      int num1 = -1137832650;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -557305211)) % 9U)
        {
          case 0:
            num1 = (int) num2 * -948742323 ^ -1510081498;
            continue;
          case 1:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -348695449 ^ -1387507804;
            continue;
          case 2:
            goto label_3;
          case 3:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 175037604 ^ 904176521;
            continue;
          case 4:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -353673572 ^ -1851811720;
            continue;
          case 5:
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * -1835975064 ^ 1163595964;
            continue;
          case 6:
            num1 = (int) num2 * 983696528 ^ -1597194489;
            continue;
          case 7:
            goto label_1;
          case 8:
            this.Losers.Clear();
            num1 = (int) num2 * -837973292 ^ -636193671;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = -877230442;
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      int index;
      Player player;
      bool morePlanningSprint;
      bool flag;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -918952254)) % 25U)
        {
          case 0:
            ++index;
            num1 = (int) num3 * 981889773 ^ -46275685;
            continue;
          case 1:
            num1 = (int) num3 * 95060666 ^ -198187753;
            continue;
          case 2:
            num1 = (int) num3 * 34547852 ^ 517721521;
            continue;
          case 3:
            playerState.Sprint = 1;
            num1 = (int) num3 * 1575529331 ^ -821087048;
            continue;
          case 4:
            int num4 = morePlanningSprint ? 1776784334 : (num4 = 216616276);
            num1 = num4 ^ (int) num3 * 352347089;
            continue;
          case 5:
            num1 = (int) num3 * 1608110916 ^ -551165596;
            continue;
          case 6:
            flag = planningCardsCount == 0;
            num1 = (int) num3 * -2055150075 ^ -2004367548;
            continue;
          case 7:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1176855979 ^ -29584614;
            continue;
          case 8:
            playerState = this._playerStates[index];
            num1 = (int) num3 * -5252547 ^ 1285250561;
            continue;
          case 9:
            int num5;
            num1 = num5 = index < this.Players.Length ? -1500936708 : (num5 = -1862682537);
            continue;
          case 10:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -444090488 ^ -912866084;
            continue;
          case 11:
            num1 = -1161567795;
            continue;
          case 12:
            int num6;
            num1 = num6 = num2 <= 0 ? -559285673 : (num6 = -260635636);
            continue;
          case 13:
            num1 = -1937019258;
            continue;
          case 14:
            goto label_1;
          case 15:
            index = 0;
            num1 = (int) num3 * 591255710 ^ 687505328;
            continue;
          case 16:
            int num7 = flag ? -589950864 : (num7 = -1751778432);
            num1 = num7 ^ (int) num3 * 518194981;
            continue;
          case 17:
            num1 = (int) num3 * -1990134707 ^ 1704162332;
            continue;
          case 18:
            num1 = -1318347947;
            continue;
          case 19:
            num2 = 0;
            num1 = -2093897348;
            continue;
          case 20:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -1803627321 ^ -381639502;
            continue;
          case 21:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * 1033915730 ^ -1002314213;
            continue;
          case 22:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -1797273878;
            continue;
          case 23:
            player = this.Players[index];
            num1 = (int) num3 * -578536846 ^ -1544172832;
            continue;
          case 24:
            goto label_3;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 1478610360;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 675561699)) % 13U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -2060783645 ^ 925298737;
            continue;
          case 2:
            num1 = (int) num2 * -817622922 ^ -355771226;
            continue;
          case 3:
            int num3 = !flag ? 1340419510 : (num3 = 938205202);
            num1 = num3 ^ (int) num2 * -408025622;
            continue;
          case 4:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206F‬‬⁭‬‬⁬⁬⁮‭‭‬⁪⁪‫⁬‍‍⁮‍‏‌‬⁬‪⁬⁮‬‬‫‏‏‬‫⁬⁪‫⁪​⁯‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 501649223 ^ -101974058;
            continue;
          case 5:
            this.Print((object) Game.\u202A‫⁪⁯‪‍⁪⁮⁫‪‎‏⁫‌⁬‮‭⁫‪​⁬‌‪‎​⁮‭⁭​⁫⁫​⁪⁫‬‫‮‎‬⁬‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 152340938;
            continue;
          case 6:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1107679071 ^ -1894697646;
            continue;
          case 7:
            ++this._currentPlayer;
            num1 = (int) num2 * -1837756727 ^ -846893764;
            continue;
          case 8:
            int num4 = this._currentPlayer >= this.Players.Length ? -1447965088 : (num4 = -2132881350);
            num1 = num4 ^ (int) num2 * -2050870736;
            continue;
          case 9:
            num1 = (int) num2 * -2122027110 ^ -905291622;
            continue;
          case 10:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1719391199;
            continue;
          case 11:
            this._currentPlayer = 0;
            flag = this._currentTurn > 0;
            num1 = (int) num2 * -1812144638 ^ -982039697;
            continue;
          case 12:
            goto label_3;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -1742357972;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        bool flag1;
        bool flag2;
        PlayerState playerState2;
        int num3;
        bool flag3;
        int index;
        Card card;
        int num4;
        bool flag4;
        bool flag5;
        bool flag6;
        Player player;
        int num5;
        bool onlyOneWinner;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        int num6;
        switch ((num2 = (uint) (num1 ^ -525386403)) % 86U)
        {
          case 0:
            int num7 = flag10 ? -788146301 : (num7 = -435208406);
            num1 = num7 ^ (int) num2 * 1253783127;
            continue;
          case 1:
            num1 = -2117283876;
            continue;
          case 2:
            int num8 = flag8 ? 1478074665 : (num8 = 1670537867);
            num1 = num8 ^ (int) num2 * 1726617512;
            continue;
          case 3:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -358219377 ^ 943824034;
            continue;
          case 4:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 5:
            num1 = (int) num2 * 620531069 ^ 942326555;
            continue;
          case 6:
            goto label_3;
          case 7:
            num1 = (int) num2 * -692680062 ^ 2022165463;
            continue;
          case 8:
            int num9 = !flag6 ? 1159881223 : (num9 = 333351494);
            num1 = num9 ^ (int) num2 * 235548031;
            continue;
          case 9:
            num1 = (int) num2 * -720400430 ^ -1401486154;
            continue;
          case 10:
            flag5 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -1706539259;
            continue;
          case 11:
            flag3 = flag4;
            num1 = -1513328998;
            continue;
          case 12:
            int num10 = !flag11 ? -2136406975 : (num10 = -1192338630);
            num1 = num10 ^ (int) num2 * -1339575793;
            continue;
          case 13:
            flag8 = !flag7;
            num1 = (int) num2 * 354764028 ^ -284648477;
            continue;
          case 14:
            num1 = -876215819;
            continue;
          case 15:
            playerState1.Resources -= Game.\u200E⁪⁪⁭⁯‮‬‪⁭‏‍⁬‫‮‎‌‪⁪‪⁫⁭⁮‎‏‏⁭‍‮‌⁪⁯‏⁬⁯‏‌‏⁫‏‫‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 1855183065 ^ 1432587394;
            continue;
          case 16:
            num1 = -1740187838;
            continue;
          case 17:
            ++num4;
            num1 = -769666818;
            continue;
          case 18:
            num1 = (int) num2 * -761347980 ^ -1728464775;
            continue;
          case 19:
            playerState2.Resources -= num3;
            num1 = (int) num2 * 1794139005 ^ 1933471386;
            continue;
          case 20:
            this.Losers.Add(num4);
            num1 = (int) num2 * -1430401366 ^ 1937562926;
            continue;
          case 21:
            PlayerState playerState3 = playerState2;
            this.Print((object) Game.\u206F‬‬⁭‬‬⁬⁬⁮‭‭‬⁪⁪‫⁬‍‍⁮‍‏‌‬⁬‪⁬⁮‬‬‫‏‏‬‫⁬⁪‫⁪​⁯‮("\t", playerState3 != null ? Game.\u206A‌⁫‪⁭⁪⁪‬‭‫‫⁬‫‪​‪‫‫‪‌‏⁪‮⁪‬‏‏‎‎‍‍⁮‫⁯⁬‎‭⁬‪‎‮((object) playerState3) : (string) null));
            num1 = -1433266199;
            continue;
          case 22:
            num1 = (int) num2 * -1736147790 ^ 936363182;
            continue;
          case 23:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 716755319 ^ 1735035392;
            continue;
          case 24:
            playerState2.State = State.Won;
            num1 = (int) num2 * -132307075 ^ 1781749897;
            continue;
          case 25:
            num3 = Game.\u200E⁪⁪⁭⁯‮‬‪⁭‏‍⁬‫‮‎‌‪⁪‪⁫⁭⁮‎‏‏⁭‍‮‌⁪⁯‏⁬⁯‏‌‏⁫‏‫‮(0, num5);
            num1 = (int) num2 * -387012022 ^ -1675513522;
            continue;
          case 26:
            playerState1 = this._playerStates[index];
            num1 = -891418028;
            continue;
          case 27:
            int num11 = !flag9 ? -1044819552 : (num11 = -106695224);
            num1 = num11 ^ (int) num2 * -615856308;
            continue;
          case 28:
            num1 = (int) num2 * -613562506 ^ 2028984397;
            continue;
          case 29:
            num1 = (int) num2 * 491191269 ^ 1671804604;
            continue;
          case 30:
            flag1 = playerState1.Resources >= 0;
            num1 = (int) num2 * -1326105328 ^ -2032366696;
            continue;
          case 31:
            int num12;
            num1 = num12 = playerState2.Sprint <= this.Rules.SprintCount ? -1982616388 : (num12 = -413453989);
            continue;
          case 32:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            flag4 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * 1168461320 ^ -880840750;
            continue;
          case 33:
            int num13;
            num1 = num13 = this.Losers.Contains(num4) ? -726990500 : (num13 = -1258708451);
            continue;
          case 34:
            playerState2.State = State.Lose;
            num1 = (int) num2 * 1535783889 ^ -1258867613;
            continue;
          case 35:
            goto label_1;
          case 36:
            num1 = (int) num2 * 920753193 ^ -814778081;
            continue;
          case 37:
            player = this.Players[playerIndex];
            num1 = (int) num2 * 1874219713 ^ 1205278345;
            continue;
          case 38:
            flag4 = true;
            num3 = card.Impact;
            num1 = (int) num2 * -721186851 ^ 1763142733;
            continue;
          case 39:
            card = this.DrawCard();
            num1 = (int) num2 * -341102131 ^ 958196978;
            continue;
          case 40:
            int num14 = !flag12 ? 1612720217 : (num14 = 23792123);
            num1 = num14 ^ (int) num2 * -1025309597;
            continue;
          case 41:
            num1 = (int) num2 * -855782615 ^ 1367680502;
            continue;
          case 42:
            num1 = (int) num2 * 292008639 ^ 1481724671;
            continue;
          case 43:
            flag2 = index < this._playerStates.Length;
            num1 = -499280156;
            continue;
          case 44:
            flag4 = false;
            num1 = -360489993;
            continue;
          case 45:
            index = 0;
            num1 = (int) num2 * 568833636 ^ 1658057650;
            continue;
          case 46:
            num1 = -1735062788;
            continue;
          case 47:
            playerState1.State = State.Lose;
            int num15;
            num1 = num15 = this.Losers.Contains(index) ? -2116277613 : (num15 = -2106506372);
            continue;
          case 48:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 531469462 ^ 601754056;
            continue;
          case 49:
            int num16 = flag3 ? -798889089 : (num16 = -197239099);
            num1 = num16 ^ (int) num2 * -1683624089;
            continue;
          case 50:
            int num17 = flag5 ? -882744253 : (num17 = -1984778330);
            num1 = num17 ^ (int) num2 * -671745525;
            continue;
          case 51:
            ++index;
            num1 = -72320794;
            continue;
          case 52:
            this.Print((object) Game.\u206F‬‬⁭‬‬⁬⁬⁮‭‭‬⁪⁪‫⁬‍‍⁮‍‏‌‬⁬‪⁬⁮‬‬‫‏‏‬‫⁬⁪‫⁪​⁯‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 461112521 ^ 1567860858;
            continue;
          case 53:
            num1 = (int) num2 * 795105646 ^ -43263680;
            continue;
          case 54:
            int num18 = playerState2.Resources < 0 ? 1145681488 : (num18 = 535587987);
            num1 = num18 ^ (int) num2 * -247687507;
            continue;
          case 55:
            num1 = -1982616388;
            continue;
          case 56:
            flag11 = playerState2.State != 0;
            num1 = (int) num2 * 568242712 ^ 1460974163;
            continue;
          case 57:
            this.Losers.Add(index);
            num1 = (int) num2 * 9015587 ^ -1092293068;
            continue;
          case 58:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag10 ? (object) "ALL " : (object) "", flag7 ? (object) "receives" : (object) "pays", (object) Game.\u200C‏⁮⁬⁮​‬‬⁭‮‫‌⁮⁮‮‌⁫‬⁯‪‏​‎‫‭⁭‏‌‍‮‏⁪‮⁬‪⁯‭‌⁭⁬‮(num3), flag4 ? (object) "advance" : (object) "stay");
            num1 = -1466966155;
            continue;
          case 59:
            num1 = (int) num2 * 1984814456 ^ -8745535;
            continue;
          case 60:
            flag6 = playerState2.Sprint < 0;
            num1 = -1784932477;
            continue;
          case 61:
            this.Print((object) playerState2.State);
            num1 = (int) num2 * -2026687124 ^ 161843527;
            continue;
          case 62:
            num1 = -699711528;
            continue;
          case 63:
            num1 = (int) num2 * 907354659 ^ 1314585222;
            continue;
          case 64:
            num1 = -1880608320;
            continue;
          case 65:
            playerState2 = this._playerStates[playerIndex];
            num1 = (int) num2 * 352123170 ^ 1694438851;
            continue;
          case 66:
            flag9 = num4 == playerIndex;
            num1 = -2015647762;
            continue;
          case 67:
            int num19 = flag2 ? -1838108159 : (num19 = -1803983703);
            num1 = num19 ^ (int) num2 * -91222836;
            continue;
          case 68:
            flag4 = true;
            num1 = (int) num2 * -1285900580 ^ 1739379836;
            continue;
          case 69:
            int num20 = flag1 ? -1280807442 : (num20 = -1199200344);
            num1 = num20 ^ (int) num2 * 1257989028;
            continue;
          case 70:
            int num21 = !this.Losers.Contains(playerIndex) ? 1290593126 : (num21 = 1652563989);
            num1 = num21 ^ (int) num2 * 742431681;
            continue;
          case 71:
            num1 = (int) num2 * 1084988864 ^ 737695032;
            continue;
          case 72:
            num1 = (int) num2 * -2116104 ^ -1909026276;
            continue;
          case 73:
            ++playerState2.Sprint;
            num1 = (int) num2 * -2046009683 ^ -1766832989;
            continue;
          case 74:
            num1 = (int) num2 * -1775842049 ^ 1130893189;
            continue;
          case 75:
            num1 = (int) num2 * 260406497 ^ 1391926040;
            continue;
          case 76:
            int num22 = onlyOneWinner ? -1463625320 : (num22 = -1996364474);
            num1 = num22 ^ (int) num2 * 429847823;
            continue;
          case 77:
            num1 = (int) num2 * 961371020 ^ 1626236088;
            continue;
          case 78:
            this.Winners.Add(playerIndex);
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 443519887 ^ -691134753;
            continue;
          case 79:
            flag12 = num4 < this._playerStates.Length;
            num1 = -237784717;
            continue;
          case 80:
            num1 = (int) num2 * 1833010302 ^ 154346013;
            continue;
          case 81:
            this._finished = true;
            num4 = 0;
            num1 = (int) num2 * 1662567691 ^ 435717233;
            continue;
          case 82:
            ++playerState2.Sprint;
            num1 = (int) num2 * 1967522440 ^ -1539716107;
            continue;
          case 83:
            num1 = -1622817544;
            continue;
          case 84:
            flag7 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 598277314 ^ -1637858807;
              continue;
            }
            num6 = 0;
            break;
          case 85:
            num1 = (int) num2 * 1363559216 ^ -357861876;
            continue;
          default:
            goto label_91;
        }
        flag10 = num6 != 0;
        num1 = -143880036;
      }
label_3:
      return;
label_91:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -1999670167;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1408464527)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            int num3 = !flag ? -1924610331 : (num3 = -62974202);
            num1 = num3 ^ (int) num2 * 1726725725;
            continue;
          case 2:
            num1 = (int) num2 * 804947422 ^ 1479155762;
            continue;
          case 3:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 531381754 ^ 1816463402;
            continue;
          case 4:
            num1 = (int) num2 * 629028135 ^ -685202716;
            continue;
          case 5:
            card1 = this._deck[0];
            num1 = -1186736298;
            continue;
          case 6:
            this.ShuffleCards();
            num1 = (int) num2 * 171636652 ^ -1170819641;
            continue;
          case 8:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * -62627428 ^ 701675886;
            continue;
          case 9:
            card2 = card1;
            num1 = (int) num2 * 1435645387 ^ 1258329260;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 643083553;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 609999591)) % 9U)
        {
          case 1:
            index = 0;
            num1 = (int) num2 * -683258716 ^ -1899102736;
            continue;
          case 2:
            int num3;
            num1 = num3 = index >= this._playerStates.Length ? 2066621273 : (num3 = 267978098);
            continue;
          case 3:
            str2 = str1;
            num1 = (int) num2 * -1872035802 ^ 635009311;
            continue;
          case 4:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206A‌⁫‪⁭⁪⁪‬‭‫‫⁬‫‪​‪‫‫‪‌‏⁪‮⁪‬‏‏‎‎‍‍⁮‫⁯⁬‎‭⁬‪‎‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200D‎‎⁮‮⁫⁮⁭‏‏‪⁫‪⁬⁪⁮‭​⁪​⁯​​‏⁯‏⁪‍‫​‪‎‬⁯‮⁭​⁬‭⁯‮(strArray);
            num1 = 1043537564;
            continue;
          case 5:
            ++index;
            num1 = (int) num2 * 136444280 ^ 80975440;
            continue;
          case 6:
            num1 = (int) num2 * 966309154 ^ 721359287;
            continue;
          case 7:
            str1 = "";
            num1 = (int) num2 * -1819233623 ^ 59709091;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1307326620;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1675788977)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 1647448020 ^ -1771063001;
            continue;
          case 2:
            num1 = (int) num2 * -2093352461 ^ 2068321088;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u206C‬⁮⁬⁪‬⁮‬⁯‍‏‫‍‫‏‎‍‪‍⁯‫⁬‌⁭⁭‪‏‭‌‫⁯‪⁪‌‎⁪​‫⁫⁫‮(this._buffer, Game.\u206F⁪‬‎‬‎‫‏⁫​‪‫‭‬‫‌‬⁬‮⁬‏‍⁬‮‬‬‪‬⁯‌⁫‭‏‭⁭‪⁫‮‮‮(Game.\u206A‌⁫‪⁭⁪⁪‬‭‫‫⁬‫‪​‪‫‫‪‌‏⁪‮⁪‬‏‏‎‎‍‍⁮‫⁯⁬‎‭⁬‪‎‮(text), more));

    static Random \u202B⁯‎​⁫⁮​‍⁯‎⁮​‫⁬⁪‫⁮⁫‍​⁮⁮‍‮⁭‫⁯‫‎‪​‌​‎‫‬⁮⁭⁬⁬‮([In] int obj0) => new Random(obj0);

    static string \u202A‫⁪⁯‪‍⁪⁮⁫‪‎‏⁫‌⁬‮‭⁫‪​⁬‌‪‎​⁮‭⁭​⁫⁫​⁪⁫‬‫‮‎‬⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206F‬‬⁭‬‬⁬⁬⁮‭‭‬⁪⁪‫⁬‍‍⁮‍‏‌‬⁬‪⁬⁮‬‬‫‏‏‬‫⁬⁪‫⁪​⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200E⁪⁪⁭⁯‮‬‪⁭‏‍⁬‫‮‎‌‪⁪‪⁫⁭⁮‎‏‏⁭‍‮‌⁪⁯‏⁬⁯‏‌‏⁫‏‫‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200C‏⁮⁬⁮​‬‬⁭‮‫‌⁮⁮‮‌⁫‬⁯‪‏​‎‫‭⁭‏‌‍‮‏⁪‮⁬‪⁯‭‌⁭⁬‮([In] int obj0) => Math.Abs(obj0);

    static string \u206A‌⁫‪⁭⁪⁪‬‭‫‫⁬‫‪​‪‫‫‪‌‏⁪‮⁪‬‏‏‎‎‍‍⁮‫⁯⁬‎‭⁬‪‎‮([In] object obj0) => obj0.ToString();

    static string \u200D‎‎⁮‮⁫⁮⁭‏‏‪⁫‪⁬⁪⁮‭​⁪​⁯​​‏⁯‏⁪‍‫​‪‎‬⁯‮⁭​⁬‭⁯‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206F⁪‬‎‬‎‫‏⁫​‪‫‭‬‫‌‬⁬‮⁬‏‍⁬‮‬‬‪‬⁯‌⁫‭‏‭⁭‪⁫‮‮‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206C‬⁮⁬⁪‬⁮‬⁯‍‏‫‍‫‏‎‍‪‍⁯‫⁬‌⁭⁭‪‏‭‌‫⁯‪⁪‌‎⁪​‫⁫⁫‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
