// Decompiled with JetBrains decompiler
// Type: ProjNet.States.WorkerItemState
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Services;
using ProjNet.Structs;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ProjNet.States
{
  public class WorkerItemState : Form
  {
    private IContainer m_IndexerAdvisor;
    private Label m_InvocationAdvisor;
    private Label m_WatcherAdvisor;
    private Button m_MappingAdvisor;
    private TextBox decoratorAdvisor;
    private TextBox _ConnectionAdvisor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public WorkerItemState()
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_6;
            case 1:
            case 3:
              this.m_IndexerAdvisor = (IContainer) null;
              // ISSUE: explicit constructor call
              base.\u002Ector();
              goto case 4;
            case 4:
              this.PatchFacade();
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_6;
            case 5:
              goto label_7;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 4;
        continue;
label_6:
        PageAdvisorStructBuilder.PrepareCreator();
        num1 = 3;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResetFacade(object first, EventArgs ivk)
    {
      try
      {
        string text1 = this.decoratorAdvisor.Text;
        int num1 = 4;
        if (true)
          goto label_5;
label_2:
        this.decoratorAdvisor.Text = "";
        this._ConnectionAdvisor.Text = "";
        int num2 = 5;
label_4:
        num1 = num2;
label_5:
        switch (num1)
        {
          case 0:
          case 1:
            int num3 = (int) MessageBox.Show("Insertion successful.");
            goto label_2;
          case 2:
          case 3:
            goto label_2;
          case 4:
            string text2 = this._ConnectionAdvisor.Text;
            CallbackRegistry.CallAdvisor(text1, int.Parse(text2));
            num2 = 0;
            goto label_4;
          case 5:
            break;
          default:
            num2 = 3;
            goto label_4;
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Insertion Failed.");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool setconfig)
    {
      int num1 = 4;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 4:
            if (!setconfig)
            {
              num2 = 0;
              break;
            }
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto label_11;
          case 1:
          case 3:
            num2 = this.m_IndexerAdvisor != null ? 1 : 0;
            break;
          case 2:
label_6:
            this.m_IndexerAdvisor.Dispose();
            goto label_7;
          case 5:
            goto label_8;
          default:
            num1 = 2;
            continue;
        }
        if (num2 != 0)
          goto label_6;
label_7:
        base.Dispose(setconfig);
        int num3 = 5;
        num1 = WorkerItemState.CollectModel() ? num3 : num3;
      }
label_8:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PatchFacade()
    {
      int num1 = 10;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 9:
              this.decoratorAdvisor.Size = new Size(100, 20);
              this.decoratorAdvisor.TabIndex = 3;
              this._ConnectionAdvisor.Location = new Point(81, 63);
              this._ConnectionAdvisor.Name = "AuthorIDTextBox";
              this._ConnectionAdvisor.Size = new Size(100, 20);
              this._ConnectionAdvisor.TabIndex = 4;
              this.AutoScaleDimensions = new SizeF(6f, 13f);
              num2 = 6;
              continue;
            case 1:
              this.decoratorAdvisor.Location = new Point(81, 32);
              this.decoratorAdvisor.Name = "ISBNTextBox";
              num2 = 0;
              continue;
            case 2:
            case 7:
              this.m_InvocationAdvisor.Location = new Point(40, 32);
              this.m_InvocationAdvisor.Name = "label1";
              if (!WorkerItemState.CollectModel())
              {
                num2 = 3;
                continue;
              }
              goto case 10;
            case 3:
              goto label_9;
            case 4:
              this.m_WatcherAdvisor.Text = "Author ID:";
              this.m_MappingAdvisor.Location = new Point(81, 89);
              goto case 5;
            case 5:
              this.m_MappingAdvisor.Name = "InsertButton";
              this.m_MappingAdvisor.Size = new Size(75, 23);
              this.m_MappingAdvisor.TabIndex = 2;
              this.m_MappingAdvisor.Text = "Insert";
              this.m_MappingAdvisor.UseVisualStyleBackColor = true;
              this.m_MappingAdvisor.Click += new EventHandler(this.ResetFacade);
              int num3 = 1;
              num2 = WorkerItemState.CollectModel() ? num3 : num3;
              continue;
            case 6:
              goto label_6;
            case 8:
              this.Controls.Add((Control) this.m_WatcherAdvisor);
              this.Controls.Add((Control) this.m_InvocationAdvisor);
              this.Name = "InsertAuthorISBN";
              this.Text = "Insert AuthorISBN";
              this.ResumeLayout(false);
              this.PerformLayout();
              num2 = 15;
              continue;
            case 10:
              this.m_InvocationAdvisor = new Label();
              if (!WorkerItemState.CollectModel())
              {
                num2 = 13;
                continue;
              }
              goto label_9;
            case 11:
              this.m_InvocationAdvisor.TabIndex = 0;
              this.m_InvocationAdvisor.Text = "ISBN:";
              this.m_WatcherAdvisor.AutoSize = true;
              if (true)
              {
                num2 = 12;
                continue;
              }
              goto case 8;
            case 12:
              goto label_11;
            case 13:
              this.m_WatcherAdvisor = new Label();
              this.m_MappingAdvisor = new Button();
              this.decoratorAdvisor = new TextBox();
              this._ConnectionAdvisor = new TextBox();
              this.SuspendLayout();
              this.m_InvocationAdvisor.AutoSize = true;
              num2 = 7;
              continue;
            case 14:
              goto label_5;
            case 15:
              goto label_17;
            default:
              int num4 = 5;
              num2 = WorkerItemState.CollectModel() ? num4 : num4;
              continue;
          }
        }
label_5:
        this.ClientSize = new Size(214, 132);
        this.Controls.Add((Control) this._ConnectionAdvisor);
        this.Controls.Add((Control) this.decoratorAdvisor);
        this.Controls.Add((Control) this.m_MappingAdvisor);
        num1 = 8;
        continue;
label_6:
        this.AutoScaleMode = AutoScaleMode.Font;
        num1 = 14;
        continue;
label_9:
        this.m_InvocationAdvisor.Size = new Size(35, 13);
        num1 = 11;
        continue;
label_11:
        this.m_WatcherAdvisor.Location = new Point(20, 63);
        this.m_WatcherAdvisor.Name = "label2";
        this.m_WatcherAdvisor.Size = new Size(55, 13);
        this.m_WatcherAdvisor.TabIndex = 1;
        num1 = 4;
      }
label_17:;
    }

    internal static bool PublishModel() => true;

    internal static bool CollectModel() => false;
  }
}
