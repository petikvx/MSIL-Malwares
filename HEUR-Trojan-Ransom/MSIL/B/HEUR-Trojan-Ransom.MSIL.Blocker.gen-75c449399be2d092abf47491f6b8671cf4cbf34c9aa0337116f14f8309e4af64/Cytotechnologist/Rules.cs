// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: SystemThreadingSpinLockDebugVi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 4BC7AA9F-A353-4AE7-9558-F3A117D261BE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-75c449399be2d092abf47491f6b8671cf4cbf34c9aa0337116f14f8309e4af64.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1835652016;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 55432510)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1481230555 ^ 419243077;
            continue;
          case 2:
            num1 = (int) num2 * -1584395513 ^ -15975295;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 2082455348;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 3671914)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -376732030 ^ -1585612913;
            continue;
          case 2:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * -847398220 ^ 520592411;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -493103991;
      int aIndex;
      float[] numArray;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1515442842)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            riskChances = numArray;
            num1 = (int) num2 * -564529094 ^ 530660881;
            continue;
          case 2:
            ++aIndex;
            num1 = (int) num2 * -834654001 ^ -1121026180;
            continue;
          case 3:
            num1 = (int) num2 * -117156689 ^ -252822396;
            continue;
          case 4:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? -1328452989 : (num3 = -322877325);
            continue;
          case 5:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -415843439;
            continue;
          case 7:
            num1 = (int) num2 * 1225540399 ^ -642357104;
            continue;
          case 8:
            numArray = new float[json.Count];
            aIndex = 0;
            num1 = (int) num2 * 673947816 ^ -1259191291;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -481787199;
      int aIndex1;
      int num2;
      List<Card> cardList;
      int aIndex2;
      JSONNode jsonNode;
      bool flag1;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -588215580)) % 22U)
        {
          case 0:
            num1 = (int) num3 * -1761793744 ^ -1223589293;
            continue;
          case 1:
            ++num2;
            num1 = (int) num3 * -933652613 ^ 296967038;
            continue;
          case 2:
            ++aIndex2;
            num1 = (int) num3 * -1994464921 ^ -1801865296;
            continue;
          case 3:
            num1 = (int) num3 * 2043004778 ^ 1565617654;
            continue;
          case 4:
            goto label_1;
          case 5:
            array = cardList.ToArray();
            num1 = (int) num3 * -1289490149 ^ 1607984993;
            continue;
          case 6:
            num1 = (int) num3 * 640996690 ^ 1740746826;
            continue;
          case 7:
            jsonNode = json[aIndex2];
            num1 = (int) num3 * 13929434 ^ 1780974430;
            continue;
          case 8:
            bool flag2 = aIndex1 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -796882061;
            continue;
          case 9:
            num1 = -1230971149;
            continue;
          case 10:
            int num4;
            num1 = num4 = aIndex1 < maxImpact * 2 ? -426666180 : (num4 = -151889495);
            continue;
          case 11:
            int num5 = flag1 ? -324183451 : (num5 = -2138168045);
            num1 = num5 ^ (int) num3 * 603372210;
            continue;
          case 13:
            flag1 = num2 < jsonNode[aIndex1].AsInt;
            num1 = -599004925;
            continue;
          case 14:
            num2 = 0;
            num1 = -1524827366;
            continue;
          case 15:
            num1 = (int) num3 * -638725541 ^ -245515367;
            continue;
          case 16:
            aIndex1 = 0;
            num1 = (int) num3 * 515670718 ^ 1155697061;
            continue;
          case 17:
            num1 = (int) num3 * -403480617 ^ -2008992053;
            continue;
          case 18:
            ++aIndex1;
            num1 = (int) num3 * 1012069927 ^ 1064872010;
            continue;
          case 19:
            cardList = new List<Card>();
            aIndex2 = 0;
            num1 = (int) num3 * 1343289499 ^ 315250759;
            continue;
          case 20:
            int num6;
            num1 = num6 = aIndex2 < count ? -1814048251 : (num6 = -232340783);
            continue;
          case 21:
            num1 = -2073603000;
            continue;
          default:
            goto label_23;
        }
      }
label_23:
      return array;
    }

    public override string ToString()
    {
      string str = Rules.\u206B‌‍‎‍‫‮⁪‬‌⁫‌‬⁬‎⁬‮‌‭⁭⁯⁭‮⁬‬⁭⁫​‫⁭‏‪‪‬​⁭⁯⁬⁫‍‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
      {
        (object) this.SprintCount,
        (object) this.MaxImpact,
        (object) this.CardsToString(),
        (object) this.InitialResources,
        (object) this.NormalPlanningCount,
        (object) this.NormalPlanningCost,
        (object) this.OverPlanningCost,
        (object) this.SprintsWonWithoutPlanning,
        (object) this.RiskChancesToString(),
        (object) this.EconomicsAffectsAll,
        (object) this.StayOnSprintMinDiff,
        (object) this.OnlyOneWinner
      });
label_1:
      int num1 = -841830988;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -702376011)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1926885189 ^ -2096248498;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = -1112451695;
      string str1;
      Card card1;
      int index;
      Card[] cards;
      int num2;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -914697648)) % 17U)
        {
          case 0:
            num1 = (int) num3 * -602399449 ^ 2047330366;
            continue;
          case 1:
            str1 = "[\n\t";
            num1 = (int) num3 * -1139862603 ^ -1001938191;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num3 * -1918289058 ^ 1532580706;
            continue;
          case 4:
            num1 = (int) num3 * 1987779338 ^ 1854567045;
            continue;
          case 5:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * 1979728182 ^ 1711575554;
            continue;
          case 6:
            str2 = Rules.\u202D‮‮‭‬​‌‌⁬‌‪​⁬⁫‬​‌‮‌‫‎‫⁫‎‬⁬‭⁬⁬​‭‬‌‮‍⁯‍‌‮‌‮(str1, "\n]");
            num1 = (int) num3 * -1344721091 ^ 376758185;
            continue;
          case 7:
            int num4;
            num1 = num4 = index < cards.Length ? -511711742 : (num4 = -1855456261);
            continue;
          case 8:
            num1 = (int) num3 * 1559354469 ^ -2060517886;
            continue;
          case 9:
            card1 = cards[index];
            num1 = -794649364;
            continue;
          case 11:
            ++index;
            num1 = (int) num3 * 1528691653 ^ -1779949791;
            continue;
          case 12:
            num1 = (int) num3 * 2016210173 ^ -1294443740;
            continue;
          case 13:
            num2 = 0;
            num1 = (int) num3 * -1337151537 ^ 364218469;
            continue;
          case 14:
            int num5 = num2 != card1.Type ? -976096462 : (num5 = -1032109698);
            num1 = num5 ^ (int) num3 * -1571725924;
            continue;
          case 15:
            str1 = Rules.\u202D‮‮‭‬​‌‌⁬‌‪​⁬⁫‬​‌‮‌‫‎‫⁫‎‬⁬‭⁬⁬​‭‬‌‮‍⁯‍‌‮‌‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * -140931738 ^ 1843185558;
            continue;
          case 16:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202D⁪​‮‮‬‬‎‬‮‫‎‎‫‫‌‌⁪⁪⁫​‫‎⁮⁭⁮‭‫⁫‌⁮‪⁯‬⁯‮‏‭⁬⁬‮((object) card2) : (string) null;
            str1 = Rules.\u206A⁯​​‏‬​​‪‬‮⁬‍⁭​‍⁯⁮‌⁮⁫‮‎‭⁪‬⁯‌‍‏‍‏‬‭‍‫‏‫​⁪‮(str3, str4, " ");
            num1 = -1604343829;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u202D‮‮‭‬​‌‌⁬‌‪​⁬⁫‬​‌‮‌‫‎‫⁫‎‬⁬‭⁬⁬​‭‬‌‮‍⁯‍‌‮‌‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200B‪‭​⁬‏‮​‬⁮⁫‬‭‍‎⁪⁭‌‎⁬‮‎‮⁭‏‭⁯⁯‮‬‌⁫‎‏⁪⁬‫⁭⁫‫‮()));
      int index = 1;
label_4:
      bool flag = index < this.RiskChances.Length;
      int num1 = -1118559234;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1771517283)) % 6U)
        {
          case 0:
            num1 = -1076482553;
            continue;
          case 2:
            goto label_4;
          case 3:
            int num3 = flag ? 1164411624 : (num3 = 1176470039);
            num1 = num3 ^ (int) num2 * 1075038725;
            continue;
          case 4:
            str1 = Rules.\u206A⁯​​‏‬​​‪‬‮⁬‍⁭​‍⁯⁮‌⁮⁫‮‎‭⁪‬⁯‌‍‏‍‏‬‭‍‫‏‫​⁪‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200B‪‭​⁬‏‮​‬⁮⁫‬‭‍‎⁪⁭‌‎⁬‮‎‮⁭‏‭⁯⁯‮‬‌⁫‎‏⁪⁬‫⁭⁫‫‮()));
            ++index;
            num1 = -680406727;
            continue;
          case 5:
            str2 = Rules.\u202D‮‮‭‬​‌‌⁬‌‪​⁬⁫‬​‌‮‌‫‎‫⁫‎‬⁬‭⁬⁬​‭‬‌‮‍⁯‍‌‮‌‮(str1, " ]");
            num1 = (int) num2 * 1142762382 ^ 1271776340;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return str2;
    }

    static string \u206B‌‍‎‍‫‮⁪‬‌⁫‌‬⁬‎⁬‮‌‭⁭⁯⁭‮⁬‬⁭⁫​‫⁭‏‪‪‬​⁭⁯⁬⁫‍‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202D‮‮‭‬​‌‌⁬‌‪​⁬⁫‬​‌‮‌‫‎‫⁫‎‬⁬‭⁬⁬​‭‬‌‮‍⁯‍‌‮‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202D⁪​‮‮‬‬‎‬‮‫‎‎‫‫‌‌⁪⁪⁫​‫‎⁮⁭⁮‭‫⁫‌⁮‪⁯‬⁯‮‏‭⁬⁬‮([In] object obj0) => obj0.ToString();

    static string \u206A⁯​​‏‬​​‪‬‮⁬‍⁭​‍⁯⁮‌⁮⁫‮‎‭⁪‬⁯‌‍‏‍‏‬‭‍‫‏‫​⁪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200B‪‭​⁬‏‮​‬⁮⁫‬‭‍‎⁪⁭‌‎⁬‮‎‮⁭‏‭⁯⁯‮‬‌⁫‎‏⁪⁬‫⁭⁫‫‮() => CultureInfo.InvariantCulture;
  }
}
