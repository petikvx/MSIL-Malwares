// Decompiled with JetBrains decompiler
// Type: Dbasic.EnhancedControls.CEnhancedDateTime
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using System;
using System.Drawing;
using System.Windows.Forms;

namespace Dbasic.EnhancedControls
{
  public class CEnhancedDateTime : Control, IEnhancedControl
  {
    private Bitmap m_bmp;
    private Graphics m_graphics;
    private SolidBrush m_brushFore;
    private SolidBrush m_brushDisabled;
    private SolidBrush m_brushFrame;
    private Pen m_penFrame;
    private Point[] m_arrowPoints = new Point[3];
    public DayPickerPopup m_dayPicker = new DayPickerPopup();
    private DateTimePickerFormat m_format = DateTimePickerFormat.Long;
    public string name;
    public string dateFormat;

    public event EventHandler ValueChanged;

    public event EventHandler CloseUp;

    public event EventHandler DropDown;

    public static DateTime MaxDateTime => DateTime.MaxValue;

    public static DateTime MinDateTime => DateTime.MinValue;

    public DateTimePickerFormat Format
    {
      get => this.m_format;
      set
      {
        this.m_format = value;
        this.Invalidate();
      }
    }

    public DateTime Value
    {
      get => this.m_dayPicker.Value;
      set => this.m_dayPicker.Value = value;
    }

    public override string Text
    {
      get
      {
        try
        {
          return this.Value.ToString(this.dateFormat.ToLower(CRunner.cul).Replace("m", "M"), (IFormatProvider) CRunner.cul);
        }
        catch
        {
          return "?????";
        }
      }
      set => this.Value = DateTime.Parse(value);
    }

    public CEnhancedDateTime()
    {
      this.m_dayPicker.CloseUp += new EventHandler(this.OnDayPickerCloseUp);
      this.m_dayPicker.ValueChanged += new EventHandler(this.OnDayPickerValueChanged);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      this.CreateMemoryBitmap();
      this.CreateGdiObjects();
      this.m_graphics.Clear(this.BackColor);
      Size size = this.m_graphics.MeasureString(this.Text, this.Font).ToSize();
      this.m_graphics.DrawString(this.Text, this.Font, this.Enabled ? (Brush) this.m_brushFore : (Brush) this.m_brushDisabled, 4f, (float) ((this.Height - size.Height) / 2));
      this.m_graphics.FillPolygon((Brush) this.m_brushFrame, this.m_arrowPoints);
      this.m_graphics.DrawRectangle(this.m_penFrame, 0, 0, this.Width - 1, this.Height - 1);
      e.Graphics.DrawImage((Image) this.m_bmp, 0, 0);
    }

    protected override void OnPaintBackground(PaintEventArgs e)
    {
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      base.OnMouseDown(e);
      if (this.m_dayPicker.Parent == null)
        this.TopLevelControl.Controls.Add((Control) this.m_dayPicker);
      Point point = new Point(this.Left, this.Bottom + 1);
      Point screen1 = this.Parent.PointToScreen(this.Parent.Location);
      Point screen2 = this.TopLevelControl.PointToScreen(this.Parent.Location);
      point.Offset(screen1.X - screen2.X, screen1.Y - screen2.Y);
      int num1 = point.Y + this.m_dayPicker.Size.Height;
      Rectangle clientRectangle = this.TopLevelControl.ClientRectangle;
      int height = clientRectangle.Height;
      if (num1 > height)
      {
        point.Y -= this.Height + this.m_dayPicker.Size.Height + 2;
        if (point.Y < 0)
        {
          ref Point local = ref point;
          clientRectangle = this.TopLevelControl.ClientRectangle;
          int num2 = clientRectangle.Height - this.m_dayPicker.Size.Height;
          local.Y = num2;
        }
      }
      int x = point.X;
      Size size = this.m_dayPicker.Size;
      int width1 = size.Width;
      int num3 = x + width1;
      clientRectangle = this.TopLevelControl.ClientRectangle;
      int width2 = clientRectangle.Width;
      if (num3 > width2)
      {
        ref Point local = ref point;
        clientRectangle = this.TopLevelControl.ClientRectangle;
        int width3 = clientRectangle.Width;
        size = this.m_dayPicker.Size;
        int width4 = size.Width;
        int num4 = width3 - width4;
        local.X = num4;
      }
      this.m_dayPicker.Display(!this.m_dayPicker.Visible, point.X, point.Y, this.BackColor, this.ForeColor);
      if (this.m_dayPicker.Visible && this.DropDown != null)
        this.DropDown((object) this, EventArgs.Empty);
      if (this.m_dayPicker.Visible || this.CloseUp == null)
        return;
      this.CloseUp((object) this, EventArgs.Empty);
    }

    private void OnDayPickerCloseUp(object sender, EventArgs e)
    {
      if (this.CloseUp == null)
        return;
      this.CloseUp((object) this, EventArgs.Empty);
    }

    private void OnDayPickerValueChanged(object sender, EventArgs e)
    {
      this.Invalidate();
      if (this.ValueChanged == null)
        return;
      this.ValueChanged((object) this, e);
    }

    private void CreateMemoryBitmap()
    {
      if (this.m_bmp != null && this.m_bmp.Width == this.Width && this.m_bmp.Height == this.Height)
        return;
      this.m_bmp = new Bitmap(this.Width, this.Height);
      this.m_graphics = Graphics.FromImage((Image) this.m_bmp);
      this.m_arrowPoints[0].X = this.Width - CEnhancedDateTime.Const.DropArrowSize.Width - 4;
      this.m_arrowPoints[0].Y = (this.Height - CEnhancedDateTime.Const.DropArrowSize.Height + 1) / 2;
      this.m_arrowPoints[1].X = this.m_arrowPoints[0].X + CEnhancedDateTime.Const.DropArrowSize.Width;
      this.m_arrowPoints[1].Y = this.m_arrowPoints[0].Y;
      this.m_arrowPoints[2].X = this.m_arrowPoints[0].X + CEnhancedDateTime.Const.DropArrowSize.Width / 2;
      this.m_arrowPoints[2].Y = this.m_arrowPoints[0].Y + CEnhancedDateTime.Const.DropArrowSize.Height;
    }

    private void CreateGdiObjects()
    {
      if (this.m_brushFrame == null)
        this.m_brushFrame = new SolidBrush(SystemColors.WindowFrame);
      if (this.m_penFrame == null)
        this.m_penFrame = new Pen(SystemColors.WindowFrame);
      if (this.m_brushFore == null || this.m_brushFore.Color != this.ForeColor)
        this.m_brushFore = new SolidBrush(this.ForeColor);
      if (this.m_brushDisabled != null)
        return;
      this.m_brushDisabled = new SolidBrush(SystemColors.GrayText);
    }

    public string propName => this.name;

    private class Const
    {
      public static Size DropArrowSize = new Size(7, 4);
    }
  }
}
