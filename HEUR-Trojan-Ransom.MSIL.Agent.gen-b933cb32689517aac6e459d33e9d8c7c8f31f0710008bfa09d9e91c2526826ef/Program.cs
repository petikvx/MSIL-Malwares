// Decompiled with JetBrains decompiler
// Type: ekati.Program
// Assembly: ekati, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 64E1DB8A-5658-4D89-86B9-E9E1034C5FE6
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Agent.gen-b933cb32689517aac6e459d33e9d8c7c8f31f0710008bfa09d9e91c2526826ef.exe

using ekati.Properties;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Security.Cryptography;
using System.Threading;
using System.Windows.Forms;

namespace ekati
{
  internal class Program
  {
    private static bool gui = false;
    private static bool rollback = false;
    private static bool debug = true;
    private static Logger logger = new Logger();
    private static readonly List<string> EPR_Excel_Security = new List<string>((IEnumerable<string>) new string[3]
    {
      "\\Excel\\Security",
      "Level",
      "1"
    });
    private static readonly List<string> EPR_Word_Security = new List<string>((IEnumerable<string>) new string[3]
    {
      "\\Word\\Security",
      "Level",
      "1"
    });
    private static readonly List<string> EPR_Registry_Autorun = new List<string>((IEnumerable<string>) new string[3]
    {
      "\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
      "EPRTest",
      "c:\\temp\\eprtest.exe"
    });
    private static readonly List<string> EPR_Iexplorer_Dis_Cert_Rev_Chk = new List<string>((IEnumerable<string>) new string[3]
    {
      "\\Excel\\Security",
      "CertificateRevocation",
      "0"
    });
    private static readonly List<string> EPR_Iexplorer_No_Js_Dbg = new List<string>((IEnumerable<string>) new string[3]
    {
      "\\Excel\\Security",
      "DisableScriptDebuggerIE",
      "yes"
    });
    private static readonly List<string> EPR_Control_Panel_Disabled = new List<string>((IEnumerable<string>) new string[3]
    {
      "\\Excel\\Security",
      "NoControlPanel",
      "1"
    });
    private static readonly List<string> EPR_Download_Dir_Disabled = new List<string>((IEnumerable<string>) new string[3]
    {
      "\\Excel\\Security",
      "NoSelectDownloadDir",
      "1"
    });
    private static readonly List<string> EPR_Desktop_Disabled = new List<string>((IEnumerable<string>) new string[3]
    {
      "\\Excel\\Security",
      "NoDesktop",
      "1"
    });
    private static CspParameters cspp = new CspParameters();
    private static RSACryptoServiceProvider rsa;
    private const string keyName = "ekati";

    [STAThread]
    private static void Main(string[] args)
    {
      try
      {
        Arguments arguments = new Arguments(args);
        if (arguments["gui"] != null)
          Program.gui = Convert.ToBoolean(arguments["gui"]);
        if (arguments["rollback"] != null)
          Program.rollback = Convert.ToBoolean(arguments["rollback"]);
        if (arguments["debug"] != null)
          Program.debug = Convert.ToBoolean(arguments["debug"]);
        Version version = Assembly.GetEntryAssembly().GetName().Version;
        if (Program.debug)
          Program.logger.AddtoLogFile("Running ekati: " + version.ToString() + "\r\n");
        if (Program.rollback)
        {
          MainForm mainForm = new MainForm();
          if (Program.debug)
            Program.logger.AddtoLogFile("Rollback files on user desktop:");
          mainForm.ProcessRollback(Environment.GetFolderPath(Environment.SpecialFolder.Desktop));
          if (Program.debug)
            Program.logger.AddtoLogFile(" ");
          if (Application.MessageLoop)
            Application.Exit();
          else
            Environment.Exit(1);
        }
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        string[] strArray;
        try
        {
          strArray = Directory.GetFiles(folderPath + "\\Documents", "*.encrypt");
        }
        catch
        {
          strArray = new string[0];
        }
        if (strArray.Length != 0)
        {
          ThreadWork threadWork = new ThreadWork();
          threadWork.SetDebug(Program.debug);
          new Thread(new ThreadStart(threadWork.ThreadFour)).Start();
        }
        else
        {
          ThreadWork threadWork = new ThreadWork();
          threadWork.SetDebug(Program.debug);
          Thread thread1 = new Thread(new ThreadStart(threadWork.ThreadOne));
          Thread thread2 = new Thread(new ThreadStart(threadWork.ThreadTwo));
          Thread thread3 = new Thread(new ThreadStart(threadWork.ThreadThree));
          Thread thread4 = new Thread(new ThreadStart(threadWork.ThreadFour));
          Thread thread5 = new Thread(new ThreadStart(threadWork.ThreadFive));
          thread1.Start();
          thread2.Start();
          thread3.Start();
          thread4.Start();
          thread5.Start();
          Program.EPR_Suspicious_Extension();
          Program.EPR_WriteRegistry(Program.EPR_Control_Panel_Disabled);
          Program.EPR_WriteRegistry(Program.EPR_Excel_Security);
          Program.EPR_WriteRegistry(Program.EPR_Word_Security);
          Program.EPR_WriteRegistry(Program.EPR_Iexplorer_Dis_Cert_Rev_Chk);
          Program.EPR_WriteRegistry(Program.EPR_Iexplorer_No_Js_Dbg);
          Program.EPR_WriteRegistry(Program.EPR_Registry_Autorun);
          Program.EPR_WriteRegistry(Program.EPR_Download_Dir_Disabled);
          Program.EPR_WriteRegistry(Program.EPR_Desktop_Disabled);
          new Process()
          {
            StartInfo = {
              FileName = "cmd.exe",
              Arguments = "/c message.html",
              WindowStyle = ProcessWindowStyle.Hidden,
              RedirectStandardOutput = true,
              RedirectStandardError = true,
              UseShellExecute = false,
              CreateNoWindow = true
            }
          }.Start();
        }
      }
      catch (Exception ex)
      {
        Program.logger.AddtoLogFile("Error: " + ex.Message);
      }
    }

    public static void ShowHelp()
    {
      Version version = Assembly.GetEntryAssembly().GetName().Version;
      Program.logger.AddtoLogFile("Running ekati version: " + version.ToString());
      Console.WriteLine("");
      Console.WriteLine("Name: ");
      Console.WriteLine("\tekait version: " + version.ToString());
      Console.WriteLine("");
      Console.WriteLine("Synopsis:");
      Console.WriteLine("\tekati.exe [Parameters]");
      Console.WriteLine("");
      Console.WriteLine("Parameters (Optional):");
      Console.WriteLine("\t-gui=<yes or no, default is no>");
      Console.WriteLine("");
      Console.WriteLine("Contact:");
      Console.WriteLine("\tContact me for any questions or issues: lwei@malwarebytes.com");
      Environment.Exit(0);
    }

    public static void EPR_Suspicious_Extension()
    {
      string path = Path.Combine(Path.GetTempPath(), "vacation.jpg.exe");
      using (FileStream fileStream = System.IO.File.Create(path))
      {
        using (StreamWriter streamWriter = new StreamWriter((Stream) fileStream))
          streamWriter.WriteLine("File written by Ekati");
      }
      if (!Program.debug)
        return;
      Program.logger.AddtoLogFile("Created file: \r\n\t" + path + "\r\n");
    }

    public static void EPR_WriteRegistry(List<string> item)
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("SOFTWARE\\Malwarebytes\\Ekati\\" + item[0]);
      subKey.SetValue(item[1], (object) item[2]);
      subKey.Close();
      Thread.Sleep(1000);
      if (!Program.debug)
        return;
      Program.logger.AddtoLogFile("Registry written: \r\n\tSOFTWARE\\Malwarebytes\\Ekati\\" + item[0] + ", " + item[1] + ", " + item[2] + "\r\n");
    }

    public static bool BlockWebProtection()
    {
      string str = "100.24.169.13";
      try
      {
        IPHostEntry hostEntry = Dns.GetHostEntry("iptest.malwarebytes.com");
        if (hostEntry.AddressList.Length != 0)
          str = hostEntry.AddressList[0].ToString();
        new WebClient().DownloadFile("http://" + str, "iptest.html");
        return false;
      }
      catch (Exception ex)
      {
        Program.logger.AddtoLogFile("Web Protected blocked site successfully");
        return true;
      }
    }

    public static void CreateFiles()
    {
      try
      {
        string[] strArray1 = new string[4]
        {
          "dir1",
          "dir2",
          "dir3",
          "dir4"
        };
        string[] strArray2 = new string[4]
        {
          ".pdf",
          ".jpg",
          ".mp4",
          ".mp3"
        };
        string contents = "some text from ekati for files to be encrypted";
        for (int index1 = 0; index1 < strArray1.Length; ++index1)
        {
          Directory.CreateDirectory(".\\" + strArray1[index1]);
          for (int index2 = 0; index2 < 5; ++index2)
            System.IO.File.WriteAllText(".\\" + strArray1[index1] + "\\file" + index2.ToString() + strArray2[index1], contents);
        }
        Program.ProcessDirectory(Directory.GetCurrentDirectory());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Error creating files.\r\n" + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private static void CreatesKey()
    {
      Program.cspp.KeyContainerName = "ekati";
      Program.cspp.Flags |= CspProviderFlags.UseDefaultKeyContainer;
      Program.rsa = new RSACryptoServiceProvider(Program.cspp)
      {
        PersistKeyInCsp = true
      };
    }

    private static void EncryptFile(string inFile)
    {
      RijndaelManaged rijndaelManaged1 = new RijndaelManaged();
      rijndaelManaged1.KeySize = 256;
      rijndaelManaged1.BlockSize = 256;
      rijndaelManaged1.Mode = CipherMode.CBC;
      RijndaelManaged rijndaelManaged2 = rijndaelManaged1;
      ICryptoTransform encryptor = rijndaelManaged2.CreateEncryptor();
      byte[] buffer1 = Program.rsa.Encrypt(rijndaelManaged2.Key, false);
      byte[] numArray1 = new byte[4];
      byte[] numArray2 = new byte[4];
      int length1 = buffer1.Length;
      byte[] bytes1 = BitConverter.GetBytes(length1);
      int length2 = rijndaelManaged2.IV.Length;
      byte[] bytes2 = BitConverter.GetBytes(length2);
      int startIndex = inFile.LastIndexOf("\\") + 1;
      using (FileStream fileStream1 = new FileStream(Path.Combine(Path.GetDirectoryName(inFile), inFile.Substring(startIndex, inFile.LastIndexOf(".") - startIndex) + ".encrypted"), FileMode.Create))
      {
        fileStream1.Write(bytes1, 0, 4);
        fileStream1.Write(bytes2, 0, 4);
        fileStream1.Write(buffer1, 0, length1);
        fileStream1.Write(rijndaelManaged2.IV, 0, length2);
        using (CryptoStream cryptoStream = new CryptoStream((Stream) fileStream1, encryptor, CryptoStreamMode.Write))
        {
          int num1 = 0;
          int count1 = rijndaelManaged2.BlockSize / 8;
          byte[] buffer2 = new byte[count1];
          int num2 = 0;
          using (FileStream fileStream2 = new FileStream(inFile, FileMode.Open))
          {
            int count2;
            do
            {
              count2 = fileStream2.Read(buffer2, 0, count1);
              num1 += count2;
              cryptoStream.Write(buffer2, 0, count2);
              num2 += count1;
            }
            while (count2 > 0);
            fileStream2.Close();
          }
          cryptoStream.FlushFinalBlock();
          cryptoStream.Close();
        }
        fileStream1.Close();
      }
      System.IO.File.Delete(inFile);
    }

    public static void ProcessDirectory(string targetDirectory)
    {
      Program.CreatesKey();
      string[] directories = Directory.GetDirectories(targetDirectory);
      for (int index = 0; index < directories.Length; ++index)
      {
        if (Path.GetFileName(directories[index].ToLower()).StartsWith("dir"))
        {
          foreach (string file in Directory.GetFiles(directories[index]))
            Program.ProcessFile(file);
        }
      }
    }

    public static void ProcessFile(string originalFile)
    {
      if (originalFile.Contains(".encrypted") || System.IO.File.GetAttributes(originalFile).HasFlag((System.Enum) FileAttributes.Hidden))
        return;
      Program.EncryptFile(originalFile);
      Program.logger.AddtoLogFile("\tEncrypted file: " + Path.GetFileName(originalFile));
    }

    public static void TestRansom()
    {
      try
      {
        System.IO.File.WriteAllBytes("diamond.exe", Resources.diamond);
        Process process = new Process();
        process.StartInfo.FileName = "diamond.exe";
        process.StartInfo.Arguments = " ";
        process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
        process.StartInfo.RedirectStandardOutput = true;
        process.StartInfo.RedirectStandardError = true;
        process.StartInfo.UseShellExecute = false;
        process.Start();
        process.WaitForExit();
        string str1 = "";
        while (!process.StandardOutput.EndOfStream)
          str1 = str1 + "\t" + process.StandardOutput.ReadLine() + "\r\n";
        string str2 = "";
        while (!process.StandardError.EndOfStream)
          str2 = str2 + "\t" + process.StandardError.ReadLine() + "\r\n";
        if (!Program.debug)
          return;
        Program.logger.AddtoLogFile("Executed command (diamond.exe): \r\n\t" + process.StartInfo.FileName + " " + process.StartInfo.Arguments + "\r\n");
      }
      catch (Exception ex)
      {
        Program.logger.AddtoLogFile("Error in topaz: \r\n" + ex.Message);
      }
    }
  }
}
