// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Notation
// Assembly: هx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 374CAC08-464B-4E84-B463-5CFD524FF26C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-74995e87513e47357c351f37565a1422202dace38dc789308d72417b5797b93e.exe

using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class Notation
  {
    public Square from;
    public Square to;

    public string Move
    {
      get
      {
label_1:
        int num1 = -495551664;
        string move;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1701685083)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              move = Notation.\u200B‪⁯‪‎⁭‮‪‪‬⁪‭‬‍⁭⁮‍‪⁫‏‪‎‎⁪​‭⁫⁬⁬⁮‭‎‌‎​⁮‎‮⁮⁪‮(this.from.CurrentSquare, \u003CModule\u003E.\u202E‮⁮‭⁮⁬​⁯‫‭⁫⁬​​‍⁬⁫⁫‌⁪‫‪⁯​‍⁯‎‬⁫‏‌‪‌⁪‮‫‬‍⁯‎‮<string>(516965952U), this.to.CurrentSquare);
              num1 = (int) num2 * 1212273355 ^ -416029315;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return move;
      }
    }

    public Notation(Square f, Square t, Board bo)
    {
label_1:
      int num1 = -802777345;
      Square square1;
      Square square2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -970411053)) % 8U)
        {
          case 0:
            this.to = square1;
            num1 = (int) num2 * -862388050 ^ 448680213;
            continue;
          case 1:
            square1 = new Square(t.File, t.Rank, bo);
            num1 = (int) num2 * 172684774 ^ 1108384822;
            continue;
          case 2:
            square2 = new Square(f.File, f.Rank, bo);
            num1 = (int) num2 * 1898845110 ^ 254981262;
            continue;
          case 3:
            square2.Piece = new ChessPiece(f, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * 1589099793 ^ 1490509455;
            continue;
          case 4:
            num1 = (int) num2 * 1515513821 ^ -1106615051;
            continue;
          case 5:
            goto label_1;
          case 6:
            goto label_3;
          case 7:
            square1.Piece = new ChessPiece(t, t.Piece.Kind, t.Piece.Color);
            this.from = square2;
            num1 = (int) num2 * 42316128 ^ -2135085717;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public override string ToString() => this.Move;

    static string \u200B‪⁯‪‎⁭‮‪‪‬⁪‭‬‍⁭⁮‍‪⁫‏‪‎‎⁪​‭⁫⁬⁬⁮‭‎‌‎​⁮‎‮⁮⁪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
