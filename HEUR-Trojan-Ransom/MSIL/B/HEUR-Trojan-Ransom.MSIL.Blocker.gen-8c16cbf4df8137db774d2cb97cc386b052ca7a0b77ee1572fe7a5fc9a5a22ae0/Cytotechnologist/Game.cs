// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: SZGenericArrayEnumerat, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: E834FD24-872B-47C0-BFE1-9B14E3D5CFBB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-8c16cbf4df8137db774d2cb97cc386b052ca7a0b77ee1572fe7a5fc9a5a22ae0.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 1877570062;
      int index;
      int count;
      int aIndex;
      bool flag;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1102038604)) % 18U)
        {
          case 0:
            int num3;
            num1 = num3 = aIndex < count ? 1666291746 : (num3 = 1417190746);
            continue;
          case 1:
            this.Players = new Player[count];
            aIndex = 0;
            num1 = (int) num2 * 781288720 ^ -1761882018;
            continue;
          case 2:
            this._buffer = buffer;
            num1 = (int) num2 * -1388508657 ^ -699768476;
            continue;
          case 3:
            ++index;
            num1 = (int) num2 * 1558832492 ^ 1426948520;
            continue;
          case 4:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * -354517151 ^ 2129165923;
            continue;
          case 5:
            int num4 = !flag ? -1052709275 : (num4 = -261379859);
            num1 = num4 ^ (int) num2 * 2050120002;
            continue;
          case 6:
            num1 = (int) num2 * -1686183602 ^ -1523306536;
            continue;
          case 7:
            goto label_1;
          case 8:
            num1 = (int) num2 * -934788719 ^ 864431590;
            continue;
          case 9:
            index = 0;
            num1 = (int) num2 * -1743467791 ^ -71863531;
            continue;
          case 10:
            this._random = Game.\u200B‌‎‭⁬​‫‎‪⁫‍‎⁭‬⁯‬‏‮‫​‫⁪⁭‌⁭‫⁮‭‏‫⁮‍⁯‏‪‮⁯​‪‬‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            this._dice = new Dice();
            num1 = (int) num2 * 571554994 ^ 441455;
            continue;
          case 11:
            jsonNode = json["players"];
            count = jsonNode.Count;
            num1 = (int) num2 * 549029450 ^ 1110788917;
            continue;
          case 12:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = 73884383;
            continue;
          case 13:
            ++aIndex;
            num1 = (int) num2 * 1808075101 ^ 2042251577;
            continue;
          case 14:
            flag = index < count;
            num1 = 392000063;
            continue;
          case 15:
            goto label_3;
          case 16:
            num1 = (int) num2 * 387617629 ^ 1068905156;
            continue;
          case 17:
            this._playerStates[index] = new PlayerState();
            num1 = 473056899;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 1014357184;
        bool finished;
        int index;
        PlayerState[] playerStates;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 715109314)) % 16U)
          {
            case 0:
              index = 0;
              num1 = (int) num2 * -1445375939 ^ 250972372;
              continue;
            case 1:
              finished = true;
              num1 = (int) num2 * 857760989 ^ 1833525180;
              continue;
            case 2:
              int num3 = this._finished ? 40934820 : (num3 = 303570069);
              num1 = num3 ^ (int) num2 * -1026890411;
              continue;
            case 3:
              num1 = (int) num2 * -18761590 ^ -566298231;
              continue;
            case 4:
              playerStates = this._playerStates;
              num1 = (int) num2 * 162925873 ^ -2105559770;
              continue;
            case 6:
              num1 = (int) num2 * 281728998 ^ 1308009997;
              continue;
            case 7:
              int num4 = playerState.State == State.Playing ? -1373908371 : (num4 = -1367299330);
              num1 = num4 ^ (int) num2 * 2005497850;
              continue;
            case 8:
              goto label_1;
            case 9:
              finished = false;
              num1 = (int) num2 * 1528968540 ^ 14524016;
              continue;
            case 10:
              ++index;
              num1 = 34933321;
              continue;
            case 11:
              int num5;
              num1 = num5 = index < playerStates.Length ? 118126813 : (num5 = 305983859);
              continue;
            case 12:
              finished = true;
              num1 = (int) num2 * 1774339732 ^ 236907527;
              continue;
            case 13:
              num1 = 784312742;
              continue;
            case 14:
              num1 = (int) num2 * -759620169 ^ -186493515;
              continue;
            case 15:
              playerState = playerStates[index];
              num1 = 1190464581;
              continue;
            default:
              goto label_17;
          }
        }
label_17:
        return finished;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = 1422943700;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1337295685)) % 6U)
        {
          case 0:
            this.Losers.Clear();
            num1 = (int) num2 * 121196558 ^ -1199654861;
            continue;
          case 1:
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 2085967711 ^ 544935028;
            continue;
          case 2:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * 854088309 ^ 262145908;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          case 5:
            this.ShuffleCards();
            this.Winners.Clear();
            num1 = (int) num2 * -959735925 ^ -1002147870;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = -1881918814;
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      bool morePlanningSprint;
      bool flag1;
      Player player;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1706641006)) % 30U)
        {
          case 0:
            goto label_1;
          case 1:
            int num4 = morePlanningSprint ? 862619983 : (num4 = 1530009246);
            num1 = num4 ^ (int) num3 * -816607431;
            continue;
          case 2:
            num1 = -1339630807;
            continue;
          case 3:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * 1002845562 ^ 1397949870;
            continue;
          case 4:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -1880517358 ^ -1072583631;
            continue;
          case 5:
            int num5 = flag2 ? 1435600809 : (num5 = 873535421);
            num1 = num5 ^ (int) num3 * -1298935894;
            continue;
          case 6:
            num1 = (int) num3 * 1754108926 ^ 1389262544;
            continue;
          case 7:
            int num6;
            num1 = num6 = index >= this.Players.Length ? -533056266 : (num6 = -311154105);
            continue;
          case 8:
            flag1 = planningCardsCount == 0;
            num1 = (int) num3 * 2010091778 ^ 675816372;
            continue;
          case 9:
            num1 = -1449201736;
            continue;
          case 10:
            num1 = (int) num3 * -168009129 ^ 933872022;
            continue;
          case 11:
            flag2 = num2 > 0;
            num1 = -157272053;
            continue;
          case 12:
            playerState.State = State.Playing;
            num1 = (int) num3 * 1604384044 ^ 107120273;
            continue;
          case 13:
            num1 = (int) num3 * -1381216930 ^ 1538395155;
            continue;
          case 14:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 1368007759 ^ -1157029436;
            continue;
          case 15:
            num2 = 0;
            num1 = -1778913815;
            continue;
          case 16:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -111769045 ^ 419203496;
            continue;
          case 17:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1574038935 ^ 1209436173;
            continue;
          case 18:
            num1 = (int) num3 * 1289631653 ^ -1311221525;
            continue;
          case 19:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = -405550303;
            continue;
          case 20:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -856476952;
            continue;
          case 21:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * 801669508 ^ -1536315232;
            continue;
          case 22:
            goto label_3;
          case 23:
            ++index;
            num1 = (int) num3 * -1027263113 ^ -1158861504;
            continue;
          case 24:
            num1 = (int) num3 * 1381649583 ^ 1684060765;
            continue;
          case 25:
            num1 = (int) num3 * 1369852140 ^ 2069590053;
            continue;
          case 26:
            int num7 = flag1 ? 1931667759 : (num7 = 112354722);
            num1 = num7 ^ (int) num3 * 438343903;
            continue;
          case 27:
            playerState.Sprint = 0;
            num1 = (int) num3 * 730020498 ^ -1095434930;
            continue;
          case 28:
            num1 = (int) num3 * 10333069 ^ 966645295;
            continue;
          case 29:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -623894318 ^ -1338956909;
            continue;
          default:
            goto label_32;
        }
      }
label_3:
      return;
label_32:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
      if (this._currentPlayer < this.Players.Length)
        goto label_8;
label_1:
      int num1 = -289378982;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -243612323)) % 12U)
        {
          case 0:
            num1 = (int) num2 * 1706786699 ^ 1127993587;
            continue;
          case 1:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 1901008370 ^ 1054424300;
            continue;
          case 2:
            num1 = (int) num2 * 808436860 ^ -1141761016;
            continue;
          case 3:
            this.Print((object) Game.\u200D‭⁫‭‬‮⁬⁪‍⁫⁮⁭‎‫⁪⁪⁫⁫⁬‌‎​‌⁫‏‎‌‮‍⁭⁯‫⁫⁯⁮⁮‍‫⁯‍‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 676362675 ^ -1545321432;
            continue;
          case 4:
            goto label_3;
          case 5:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 932946970 ^ 1374583916;
            continue;
          case 6:
            goto label_8;
          case 7:
            num1 = (int) num2 * 934202250 ^ 445209191;
            continue;
          case 8:
            this.Print((object) Game.\u206A​‏⁬‎⁮‍‪‏‫‌‭‍‫‌⁮‌⁯⁬‮⁮‪‍⁬‌‎‮‮⁮‍‍‫⁯‪‍‏⁯⁭⁯‍‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -1975129625;
            continue;
          case 9:
            goto label_1;
          case 10:
            this._currentPlayer = 0;
            int num3 = this._currentTurn <= 0 ? -2028314101 : (num3 = -1399848894);
            num1 = num3 ^ (int) num2 * 145961907;
            continue;
          case 11:
            num1 = (int) num2 * 266994574 ^ 1164926249;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:
      return;
label_8:
      this.PlayerTurn(this._currentPlayer);
      num1 = -53674067;
      goto label_2;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = 517427046;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        int num3;
        bool flag1;
        Card card;
        bool flag2;
        bool flag3;
        int num4;
        bool flag4;
        bool onlyOneWinner;
        int index;
        bool flag5;
        PlayerState playerState2;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        int num5;
        switch ((num2 = (uint) (num1 ^ 902023949)) % 86U)
        {
          case 0:
            num1 = (int) num2 * -255094654 ^ -1594857145;
            continue;
          case 1:
            num1 = (int) num2 * 1935500921 ^ 826548060;
            continue;
          case 2:
            num4 = card.Impact;
            num1 = (int) num2 * -360726840 ^ 435140713;
            continue;
          case 3:
            num1 = (int) num2 * -1188017686 ^ -1341818699;
            continue;
          case 4:
            ++num3;
            num1 = 1646940070;
            continue;
          case 5:
            num1 = 905317516;
            continue;
          case 6:
            int num6 = flag8 ? 270964211 : (num6 = 1347844252);
            num1 = num6 ^ (int) num2 * -1048471272;
            continue;
          case 7:
            this._finished = true;
            num1 = (int) num2 * 1106228439 ^ -1849926140;
            continue;
          case 8:
            num1 = 2044089496;
            continue;
          case 9:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 1775419793 ^ 438827055;
            continue;
          case 10:
            num1 = (int) num2 * 77574662 ^ -1447615041;
            continue;
          case 11:
            playerState2.Resources -= Game.\u202B‬⁯‍⁯‭‌‬‬‬‌⁪‍‌⁫⁫‬‫⁬⁬⁬‌⁬⁬‌‌‍​⁮​‌⁪‎⁫‪‬‍‏‪⁬‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            flag9 = playerState2.Resources >= 0;
            num1 = (int) num2 * -1606114436 ^ 2134080268;
            continue;
          case 12:
            playerState2 = this._playerStates[index];
            num1 = 407245314;
            continue;
          case 13:
            num1 = (int) num2 * 1932805903 ^ 354009173;
            continue;
          case 14:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -1181307586 ^ -537084528;
            continue;
          case 15:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -2052567747 ^ 2094364758;
            continue;
          case 16:
            card = this.DrawCard();
            num1 = (int) num2 * -465479873 ^ -424235091;
            continue;
          case 17:
            flag1 = !this.Losers.Contains(num3);
            num1 = 729924481;
            continue;
          case 18:
            flag7 = num3 == playerIndex;
            num1 = (int) num2 * 1197991579 ^ -1184312352;
            continue;
          case 19:
            num1 = (int) num2 * 27673563 ^ 838835871;
            continue;
          case 20:
            num1 = (int) num2 * -1671386405 ^ 308193307;
            continue;
          case 21:
            num1 = (int) num2 * 2059950125 ^ 1293483963;
            continue;
          case 22:
            num1 = 1630239156;
            continue;
          case 23:
            flag4 = true;
            num1 = (int) num2 * 1113668450 ^ 1205129869;
            continue;
          case 24:
            int num7;
            num1 = num7 = this._dice.Roll(this._chances[this._currentChanceIndex]) ? 248383973 : (num7 = 1328345681);
            continue;
          case 25:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200D‭⁫‭‬‮⁬⁪‍⁫⁮⁭‎‫⁪⁪⁫⁫⁬‌‎​‌⁫‏‎‌‮‍⁭⁯‫⁫⁯⁮⁮‍‫⁯‍‮("\t", playerState3 != null ? Game.\u200E⁬​‮‎​‪‏​‮⁬‮⁯‏​‎‮⁭‌‪‫‪‍⁫‏⁪⁪‌⁯⁭‏⁫​‫⁬⁫‍‍‭‌‮((object) playerState3) : (string) null));
            num1 = 556543688;
            continue;
          case 26:
            num1 = 1122078307;
            continue;
          case 27:
            num1 = (int) num2 * -1692764945 ^ -1331865359;
            continue;
          case 28:
            num1 = 1861134311;
            continue;
          case 29:
            flag5 = flag4;
            num1 = 228975605;
            continue;
          case 30:
            int num8;
            num1 = num8 = index >= this._playerStates.Length ? 1168939300 : (num8 = 1972430435);
            continue;
          case 31:
            int num9 = this.Losers.Contains(playerIndex) ? -995387713 : (num9 = -659638798);
            num1 = num9 ^ (int) num2 * 618818665;
            continue;
          case 32:
            num1 = (int) num2 * -1438763753 ^ -557190974;
            continue;
          case 33:
            playerState1.State = State.Won;
            num1 = (int) num2 * -418392 ^ -1315212944;
            continue;
          case 34:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -559719822 ^ -405876105;
            continue;
          case 35:
            int num10 = card.Impact - player.PlannedForCard(card.Type);
            flag4 = num10 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u202B‬⁯‍⁯‭‌‬‬‬‌⁪‍‌⁫⁫‬‫⁬⁬⁬‌⁬⁬‌‌‍​⁮​‌⁪‎⁫‪‬‍‏‪⁬‮(0, num10);
            num1 = (int) num2 * -1437533232 ^ 1823771386;
            continue;
          case 36:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 2073900094 ^ -142450528;
            continue;
          case 37:
            num1 = (int) num2 * -2013749797 ^ 1160926628;
            continue;
          case 38:
            num1 = (int) num2 * -1687256943 ^ -576706140;
            continue;
          case 39:
            num5 = card.Type == 4 ? 1 : 0;
            break;
          case 40:
            goto label_1;
          case 41:
            flag4 = false;
            num1 = 592270491;
            continue;
          case 42:
            int num11 = !flag5 ? 683108823 : (num11 = 2142122340);
            num1 = num11 ^ (int) num2 * 743113124;
            continue;
          case 43:
            int num12 = flag7 ? 1014611478 : (num12 = 367435696);
            num1 = num12 ^ (int) num2 * -743917424;
            continue;
          case 44:
            num1 = (int) num2 * -1168470915 ^ -1957079546;
            continue;
          case 45:
            num1 = (int) num2 * -1019828466 ^ 1792384258;
            continue;
          case 46:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 602552956 ^ 1488539631;
            continue;
          case 47:
            flag6 = playerState1.State != 0;
            num1 = (int) num2 * 216266933 ^ 780693758;
            continue;
          case 48:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 202505049 ^ 1948984368;
            continue;
          case 49:
            num1 = 251578060;
            continue;
          case 50:
            num3 = 0;
            num1 = (int) num2 * -1956262216 ^ -823613706;
            continue;
          case 51:
            num1 = (int) num2 * 1821875833 ^ -2123931051;
            continue;
          case 52:
            num1 = (int) num2 * 1509464392 ^ 159113588;
            continue;
          case 53:
            num1 = 960701943;
            continue;
          case 54:
            int num13 = this.Losers.Contains(index) ? 369174811 : (num13 = 1049000509);
            num1 = num13 ^ (int) num2 * -206134561;
            continue;
          case 55:
            this.Print((object) Game.\u200D‭⁫‭‬‮⁬⁪‍⁫⁮⁭‎‫⁪⁪⁫⁫⁬‌‎​‌⁫‏‎‌‮‍⁭⁯‫⁫⁯⁮⁮‍‫⁯‍‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 332014057 ^ -2103897165;
            continue;
          case 56:
            int num14 = flag6 ? -290707672 : (num14 = -1417459263);
            num1 = num14 ^ (int) num2 * 323670493;
            continue;
          case 57:
            int num15;
            num1 = num15 = num3 >= this._playerStates.Length ? 323109724 : (num15 = 1867323490);
            continue;
          case 58:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1811810095 ^ 656612898;
            continue;
          case 59:
            num1 = (int) num2 * -1564845554 ^ 947985081;
            continue;
          case 60:
            playerState2.State = State.Lose;
            num1 = 671661187;
            continue;
          case 61:
            num1 = (int) num2 * -472490513 ^ -2104715380;
            continue;
          case 62:
            int num16 = !flag1 ? -1198024367 : (num16 = -609948);
            num1 = num16 ^ (int) num2 * -1256985420;
            continue;
          case 63:
            int num17 = flag2 ? 1704492364 : (num17 = 1458622321);
            num1 = num17 ^ (int) num2 * -1062045025;
            continue;
          case 64:
            int num18 = onlyOneWinner ? -206203348 : (num18 = -684876274);
            num1 = num18 ^ (int) num2 * 1395626004;
            continue;
          case 65:
            goto label_3;
          case 66:
            this.Losers.Add(index);
            num1 = (int) num2 * -2127322837 ^ 1124252543;
            continue;
          case 67:
            ++playerState1.Sprint;
            num1 = (int) num2 * 529765088 ^ -2024134047;
            continue;
          case 68:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag2 ? (object) "ALL " : (object) "", flag3 ? (object) "receives" : (object) "pays", (object) Game.\u206E‫‏⁯‭⁪‬⁬‏​‍‬‍⁭‪‭‫‮‭⁫‫⁯‫⁯⁬‭‫⁪‌⁯‭⁮‮​⁬‏⁭⁪‍‭‮(num4), flag4 ? (object) "advance" : (object) "stay");
            num1 = 369410012;
            continue;
          case 69:
            this.Losers.Add(num3);
            num1 = (int) num2 * -1843630110 ^ -1029556685;
            continue;
          case 70:
            flag3 = card.Impact < 0;
            if (!this.Rules.EconomicsAffectsAll)
            {
              num5 = 0;
              break;
            }
            num1 = (int) num2 * -928953065 ^ -358216124;
            continue;
          case 71:
            int num19 = flag9 ? 1930521246 : (num19 = 655152544);
            num1 = num19 ^ (int) num2 * 1441298901;
            continue;
          case 72:
            flag4 = true;
            num1 = (int) num2 * -1720582229 ^ 1722312717;
            continue;
          case 73:
            num1 = 617550006;
            continue;
          case 74:
            flag8 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 1634695587;
            continue;
          case 75:
            ++playerState1.Sprint;
            num1 = (int) num2 * -544103956 ^ 581691515;
            continue;
          case 76:
            num1 = (int) num2 * -1721268060 ^ -706618528;
            continue;
          case 77:
            int num20 = playerState1.Resources < 0 ? 1590184907 : (num20 = 799728218);
            num1 = num20 ^ (int) num2 * -504719378;
            continue;
          case 78:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -1250249756 ^ 561992240;
            continue;
          case 79:
            num1 = (int) num2 * 760218980 ^ 1128683225;
            continue;
          case 80:
            int num21;
            num1 = num21 = playerState1.Sprint >= 0 ? 935036135 : (num21 = 2075729748);
            continue;
          case 81:
            index = 0;
            num1 = (int) num2 * 1876662952 ^ 424980094;
            continue;
          case 82:
            num1 = (int) num2 * -975957914 ^ -498453652;
            continue;
          case 83:
            num1 = (int) num2 * 1411427444 ^ 1614057562;
            continue;
          case 84:
            num1 = 2104970383;
            continue;
          case 85:
            ++index;
            num1 = 548071449;
            continue;
          default:
            goto label_91;
        }
        flag2 = num5 != 0;
        int num22;
        num1 = num22 = flag3 ? 745024855 : (num22 = 691545794);
      }
label_3:
      return;
label_91:;
    }

    private Card DrawCard()
    {
      bool flag = this._deck.Count <= 0;
label_1:
      int num1 = -914085598;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -324091300)) % 8U)
        {
          case 0:
            num1 = (int) num2 * -1481911667 ^ 251659405;
            continue;
          case 1:
            card1 = this._deck[0];
            this._deck.RemoveAt(0);
            num1 = -2041606616;
            continue;
          case 2:
            this.ShuffleCards();
            num1 = (int) num2 * -1122199527 ^ -283518490;
            continue;
          case 4:
            num1 = (int) num2 * 716095870 ^ -1418324447;
            continue;
          case 5:
            card2 = card1;
            num1 = (int) num2 * -928429177 ^ 668900412;
            continue;
          case 6:
            int num3 = flag ? 1877155028 : (num3 = 1027324111);
            num1 = num3 ^ (int) num2 * -1333066273;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
      int index = 0;
label_1:
      int num1 = 1637364332;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 221559036)) % 6U)
        {
          case 0:
            int num3;
            num1 = num3 = index < this._playerStates.Length ? 1304557288 : (num3 = 561214413);
            continue;
          case 1:
            str2 = str1;
            num1 = (int) num2 * -441880934 ^ 222606663;
            continue;
          case 2:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200E⁬​‮‎​‪‏​‮⁬‮⁯‏​‎‮⁭‌‪‫‪‍⁫‏⁪⁪‌⁯⁭‏⁫​‫⁬⁫‍‍‭‌‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206B‫‮‍‬‬⁪⁭​⁪⁬⁬‌‪⁭⁯​‌‎‫‮‌‌‏‬⁫‍⁪⁮​⁮⁮‎‌‏‭‫‪⁪⁬‮(strArray);
            ++index;
            num1 = 2071222988;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 2072471293 ^ 484313756;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return str2;
    }

    public override string ToString()
    {
      string str = this.ToString(false);
label_1:
      int num1 = -379612650;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -725198678)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 473616574 ^ -1704575338;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -1241983836;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -508010)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            Game.\u206C⁪⁯‏⁪⁯⁪‪‏⁫‫‌‭⁭‭‭​‫‌‍‮⁯⁭‌‏‫‭‭‬⁮‪‬⁬⁯‭‫‭⁫​‌‮(this._buffer, str);
            num1 = (int) num2 * -987535444 ^ 1319378509;
            continue;
          case 2:
            str = Game.\u202A‭⁮‮⁭⁬​⁬‎‎‬⁫⁪⁫⁭⁮‍‏⁯​​‍‍⁪⁫⁯⁫‏‌‌‭‏⁯‫‪⁭‎‍‌‮(Game.\u200E⁬​‮‎​‪‏​‮⁬‮⁯‏​‎‮⁭‌‪‫‪‍⁫‏⁪⁪‌⁯⁭‏⁫​‫⁬⁫‍‍‭‌‮(text), more);
            num1 = (int) num2 * -594386097 ^ -1461196403;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u200B‌‎‭⁬​‫‎‪⁫‍‎⁭‬⁯‬‏‮‫​‫⁪⁭‌⁭‫⁮‭‏‫⁮‍⁯‏‪‮⁯​‪‬‮([In] int obj0) => new Random(obj0);

    static string \u206A​‏⁬‎⁮‍‪‏‫‌‭‍‫‌⁮‌⁯⁬‮⁮‪‍⁬‌‎‮‮⁮‍‍‫⁯‪‍‏⁯⁭⁯‍‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200D‭⁫‭‬‮⁬⁪‍⁫⁮⁭‎‫⁪⁪⁫⁫⁬‌‎​‌⁫‏‎‌‮‍⁭⁯‫⁫⁯⁮⁮‍‫⁯‍‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202B‬⁯‍⁯‭‌‬‬‬‌⁪‍‌⁫⁫‬‫⁬⁬⁬‌⁬⁬‌‌‍​⁮​‌⁪‎⁫‪‬‍‏‪⁬‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206E‫‏⁯‭⁪‬⁬‏​‍‬‍⁭‪‭‫‮‭⁫‫⁯‫⁯⁬‭‫⁪‌⁯‭⁮‮​⁬‏⁭⁪‍‭‮([In] int obj0) => Math.Abs(obj0);

    static string \u200E⁬​‮‎​‪‏​‮⁬‮⁯‏​‎‮⁭‌‪‫‪‍⁫‏⁪⁪‌⁯⁭‏⁫​‫⁬⁫‍‍‭‌‮([In] object obj0) => obj0.ToString();

    static string \u206B‫‮‍‬‬⁪⁭​⁪⁬⁬‌‪⁭⁯​‌‎‫‮‌‌‏‬⁫‍⁪⁮​⁮⁮‎‌‏‭‫‪⁪⁬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A‭⁮‮⁭⁬​⁬‎‎‬⁫⁪⁫⁭⁮‍‏⁯​​‍‍⁪⁫⁯⁫‏‌‌‭‏⁯‫‪⁭‎‍‌‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206C⁪⁯‏⁪⁯⁪‪‏⁫‫‌‭⁭‭‭​‫‌‍‮⁯⁭‌‏‫‭‭‬⁮‪‬⁬⁯‭‫‭⁫​‌‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
