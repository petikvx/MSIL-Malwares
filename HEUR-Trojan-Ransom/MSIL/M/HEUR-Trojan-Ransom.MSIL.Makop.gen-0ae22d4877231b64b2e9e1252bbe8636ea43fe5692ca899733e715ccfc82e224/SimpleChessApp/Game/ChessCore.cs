// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: ةE, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5B83DFD6-FCF7-4EFA-B68A-746E3BD488E0
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-0ae22d4877231b64b2e9e1252bbe8636ea43fe5692ca899733e715ccfc82e224.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
label_1:
      int num1 = -688280524;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1428958967)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -217045375 ^ 665727400;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.ChessBoard = b;
      this.resetFlags();
    }

    public ChessCore()
    {
    }

    public void RestartGame()
    {
      this.resetFlags();
label_1:
      int num1 = -1861493814;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1484936813)) % 4U)
        {
          case 0:
            this.ChessBoard.Restart();
            num1 = (int) num2 * -1266140990 ^ -1574369116;
            continue;
          case 1:
            num1 = (int) num2 * 1963412595 ^ -2115509256;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void resetFlags(bool turn = false)
    {
      this.DisableTurn = turn;
label_1:
      int num1 = 1401454359;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1025413655)) % 6U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Turns.Clear();
            num1 = (int) num2 * -827385936 ^ -1419740077;
            continue;
          case 2:
            this.WhosPlaying = PieceColor.White;
            num1 = (int) num2 * 1717081896 ^ -169632917;
            continue;
          case 3:
            this.lastCheckPiece = (Square) null;
            num1 = (int) num2 * 142737604 ^ 833646242;
            continue;
          case 4:
            this.TurnId = 1;
            num1 = (int) num2 * 1291376868 ^ -1337852930;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = -1494322634;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -89842086)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 393017532 ^ -1116590033;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 1798954713 ^ 1694665173;
            continue;
          case 3:
            new DebugChess(this.ChessBoard).TestPassant();
            num1 = (int) num2 * -1894133228 ^ 2086202600;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = -1742161196;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -500470419)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).TestSinglePiece(x);
            num1 = (int) num2 * -1412989423 ^ -1533930690;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * -2076874966 ^ 1259945634;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCastling()
    {
label_1:
      int num1 = -259230699;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1418263452)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * -1132796103 ^ 2057228431;
            continue;
          case 2:
            new DebugChess(this.ChessBoard).TestCastling();
            num1 = (int) num2 * 185906342 ^ -518551616;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * -1364455084 ^ -1865558476;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestCheck()
    {
      new DebugChess(this.ChessBoard).TestCheck();
label_1:
      int num1 = 1647221663;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1203959342)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * 1875862759 ^ 72826644;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void TestDiscoverCheck()
    {
      new DebugChess(this.ChessBoard).TestDiscoverCheck();
label_1:
      int num1 = 821283956;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1063493825)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * -731148456 ^ 440944291;
            continue;
          case 2:
            num1 = (int) num2 * 805213089 ^ 1335498348;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = 292606652;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 81328801)) % 5U)
        {
          case 0:
            num1 = (int) num2 * 1740381997 ^ -265708656;
            continue;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * 1238439262 ^ 828867327;
            continue;
          case 2:
            goto label_1;
          case 3:
            new DebugChess(this.ChessBoard).TestPromotion();
            num1 = (int) num2 * 606800491 ^ 1305523944;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = 657639593;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1394930504)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * -1982103967 ^ -841000758;
            continue;
          case 3:
            num1 = (int) num2 * 140487773 ^ -1944669161;
            continue;
          case 4:
            num1 = (int) num2 * -367474830 ^ -931786387;
            continue;
          case 5:
            new DebugChess(this.ChessBoard).CheckOnCastling();
            num1 = (int) num2 * 708907410 ^ -992040629;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }
  }
}
