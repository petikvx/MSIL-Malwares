// Decompiled with JetBrains decompiler
// Type: Tourield.Shared.ErrorWrapper
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Pages;
using System;
using System.Runtime.CompilerServices;
using Tourield.Specifications;

namespace Tourield.Shared
{
  public class ErrorWrapper
  {
    private Bridge pageWrapper;
    public string resolverWrapper;
    public string databaseWrapper;
    public string attributeWrapper;
    public string rulesWrapper;
    public string m_StateWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ErrorWrapper(Bridge config)
    {
      int num1 = 0;
      if (true)
        goto label_6;
label_1:
      RegistryPagePage.ListMethod();
      int num2 = 5;
label_5:
      num1 = num2;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_1;
          case 1:
          case 3:
            goto label_2;
          case 2:
          case 4:
            goto label_4;
          case 5:
            this.resolverWrapper = "";
            this.databaseWrapper = "";
            this.attributeWrapper = "";
            this.rulesWrapper = "";
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto label_4;
          case 6:
            goto label_9;
          default:
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto label_8;
        }
      }
label_2:
      this.pageWrapper = config;
      num2 = 6;
      goto label_5;
label_4:
      this.m_StateWrapper = "";
      // ISSUE: explicit constructor call
      base.\u002Ector();
      goto label_2;
label_9:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string PopOrder()
    {
      int num1 = 4;
      string str1;
      while (true)
      {
        int num2 = num1;
        string str2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              str2 = "";
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_9;
            case 1:
            case 3:
              str2 = str2 + "Redman Location: " + this.resolverWrapper + Environment.NewLine + "Redman Geo Location: " + this.databaseWrapper + Environment.NewLine;
              num2 = 2;
              continue;
            case 2:
              goto label_1;
            case 5:
              goto label_6;
            case 6:
              goto label_9;
            default:
              goto label_4;
          }
        }
label_1:
        str2 = str2 + "Number of Tiles: " + this.attributeWrapper + Environment.NewLine + "GeoMove_Location: " + this.rulesWrapper + Environment.NewLine + this.m_StateWrapper + Environment.NewLine;
        goto label_6;
label_4:
        num1 = 5;
        continue;
label_6:
        this.pageWrapper.txt1.Text = str2;
        str1 = str2;
        num1 = 6;
      }
label_9:
      return str1;
    }

    internal static bool ForgotMethod() => true;

    internal static bool MapMethod() => false;
  }
}
