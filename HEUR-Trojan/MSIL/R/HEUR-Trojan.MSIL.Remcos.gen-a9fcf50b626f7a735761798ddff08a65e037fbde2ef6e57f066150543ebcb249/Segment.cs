// Decompiled with JetBrains decompiler
// Type: Vändtia_Live_Server.Segment
// Assembly: yDseEhTG5bnen4G, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4C5C9DF7-D67E-851A-F932-4F9F562A97E6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Remcos.gen-a9fcf50b626f7a735761798ddff08a65e037fbde2ef6e57f066150543ebcb249.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using Vändtia_Live_Server.My;

namespace Vändtia_Live_Server
{
  public class Segment : ICloneable
  {
    private int mX;
    private int mY;
    private int mLastX;
    private int mLastY;
    private Segment.Directions mDirection;
    private ConsoleColor mColor;

    public Segment(int x, int y, Segment.Directions d, ConsoleColor c)
    {
label_7:
      int num1 = 2;
      int num2 = -8;
      while (true)
      {
        switch ((num2 ^ 46) + 45)
        {
          case 0:
            switch (num1)
            {
              case 46:
                this.mX = x;
                num1 = 30;
                goto label_1;
              case 47:
                this.mDirection = d;
                num1 = 28;
                goto label_1;
              case 48:
                this.mColor = c;
                num1 = 31;
                goto label_1;
              case 49:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.Clone);
                num1 = 29;
                goto label_1;
              case 50:
                this.mY = y;
                num1 = 3;
                goto label_1;
              case 51:
                goto label_13;
              default:
                num2 = -5;
                continue;
            }
          case 1:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.set_Y);
            num2 = -6;
            continue;
          case 2:
            goto label_7;
          case 3:
label_1:
            num1 ^= 44;
            break;
        }
        num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(20);
      }
label_13:;
    }

    public void Move(Segment.Directions d = Segment.Directions.Same)
    {
      if ((d == Segment.Directions.Same ? 1 : 0) == 0)
        this.mDirection = d;
      this.mLastX = this.mX;
label_4:
      int num1 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(40);
      Segment.Directions mDirection;
      while (true)
      {
        switch ((num1 ^ 44) + 44)
        {
          case 0:
            num1 = -6;
            continue;
          case 1:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.IntersectsWith);
            num1 = -7;
            continue;
          case 2:
            mDirection = this.mDirection;
            num1 = -5;
            continue;
          case 3:
            switch (mDirection)
            {
              case Segment.Directions.Left:
                goto label_11;
              case Segment.Directions.Right:
                goto label_12;
              case Segment.Directions.Up:
                goto label_13;
              case Segment.Directions.Down:
                goto label_15;
              default:
                num1 = -11;
                continue;
            }
          case 4:
            this.mLastY = this.mY;
            num1 = -8;
            continue;
          case 5:
            goto label_16;
          default:
            goto label_4;
        }
      }
label_11:
      // ISSUE: variable of a reference type
      int& local1;
      // ISSUE: explicit reference operation
      int num2 = checked (^(local1 = ref this.mX) - 1);
      local1 = num2;
      goto label_16;
label_12:
      // ISSUE: variable of a reference type
      int& local2;
      // ISSUE: explicit reference operation
      int num3 = checked (^(local2 = ref this.mX) + 1);
      local2 = num3;
      goto label_16;
label_13:
      // ISSUE: variable of a reference type
      int& local3;
      // ISSUE: explicit reference operation
      int num4 = checked (^(local3 = ref this.mY) - 1);
      local3 = num4;
      goto label_16;
label_14:
      int num5;
      while (true)
      {
        switch ((num5 ^ 51) + 53)
        {
          case 0:
          case 3:
            goto label_16;
          case 1:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.Draw);
            num5 = -1;
            continue;
          case 2:
            // ISSUE: variable of a reference type
            int& local4;
            // ISSUE: explicit reference operation
            int num6 = checked (^(local4 = ref this.mY) + 1);
            local4 = num6;
            num5 = -3;
            continue;
          case 4:
            goto label_19;
          default:
            goto label_15;
        }
      }
label_19:
      return;
label_15:
      num5 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(43);
      goto label_14;
label_16:
      num5 = -4;
      goto label_14;
    }

    public void Draw(char c = '█', ConsoleColor bc = ConsoleColor.Black)
    {
label_4:
      int num1 = 0;
      int num2 = -6;
      while (true)
      {
        switch ((num2 ^ 45) + 44)
        {
          case 0:
            goto label_4;
          case 1:
            switch (num1)
            {
              case 46:
                num1 = 4;
                goto label_1;
              case 47:
                Console.BackgroundColor = bc;
                num1 = 1;
                goto label_1;
              case 48:
                Console.Write(Conversions.ToString(c), (object) this.mX, (object) this.mY);
                num1 = 7;
                goto label_1;
              case 49:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.get_LastX);
                num1 = 5;
                goto label_1;
              case 50:
                Console.CursorTop = this.mY;
                num1 = 3;
                goto label_1;
              case 51:
                num1 = 13;
                goto label_1;
              case 52:
                Console.CursorLeft = this.mX;
                num1 = 12;
                goto label_1;
              case 53:
                num1 = 2;
                goto label_1;
              case 54:
                Console.ForegroundColor = this.mColor;
                num1 = 26;
                goto label_1;
              case 55:
                num1 = 27;
                goto label_1;
              case 56:
                num1 = 6;
                goto label_1;
              case 57:
                goto label_15;
              default:
                num2 = -7;
                continue;
            }
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.Draw);
            num2 = -5;
            continue;
          case 3:
label_1:
            num1 ^= 52;
            break;
        }
        num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(5);
      }
label_15:;
    }

    public void Draw()
    {
label_4:
      int num1 = 1;
      int num2 = -5;
      while (true)
      {
        switch ((num2 ^ 52) + 52)
        {
          case 0:
            goto label_4;
          case 1:
            switch (num1)
            {
              case 48:
                num1 = 2;
                goto label_1;
              case 49:
                num1 = 13;
                goto label_1;
              case 50:
                num1 = 3;
                goto label_1;
              case 51:
                num1 = 0;
                goto label_1;
              case 52:
                Console.CursorTop = this.mY;
                num1 = 4;
                goto label_1;
              case 53:
                Console.CursorLeft = this.mX;
                num1 = 7;
                goto label_1;
              case 54:
                Console.BackgroundColor = this.mColor;
                num1 = 6;
                goto label_1;
              case 55:
                Console.Write(" ", (object) this.mX, (object) this.mY);
                num1 = 5;
                goto label_1;
              case 56:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.IntersectsWith);
                num1 = 12;
                goto label_1;
              case 57:
                goto label_16;
              default:
                num2 = -8;
                continue;
            }
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.Move);
            num2 = -6;
            continue;
          case 3:
label_1:
            num1 ^= 52;
            break;
        }
        num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(11);
      }
label_16:;
    }

    public bool IntersectsWith(Segment s) => this.mX == s.X && this.mY == s.Y;

    public object Clone()
    {
label_6:
      int num1 = 1;
      int num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(19);
      object obj;
      while (true)
      {
        switch ((num2 ^ 45) + 52)
        {
          case 0:
            switch (num1)
            {
              case 53:
                obj = (object) new Segment(this.mX, this.mY, this.mDirection, this.mColor);
                num1 = 3;
                goto label_1;
              case 54:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.Clone);
                num1 = 2;
                goto label_1;
              case 55:
              case 56:
                goto label_10;
              default:
                num2 = -32;
                continue;
            }
          case 1:
            goto label_6;
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.op_Inequality);
            num2 = -29;
            continue;
          case 3:
label_1:
            num1 ^= 52;
            break;
        }
        num2 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(53);
      }
label_10:
      return obj;
    }

    public object Clone(ConsoleColor newColor)
    {
label_4:
      int num1 = 3;
      int num2 = 7;
      object obj;
      while (true)
      {
        switch (num2 ^ 50)
        {
          case 50:
            goto label_4;
          case 51:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.Clone);
            num2 = 1;
            continue;
          case 52:
            switch (num1)
            {
              case 49:
              case 52:
                goto label_10;
              case 50:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.set_X);
                num1 = 2;
                goto label_1;
              case 51:
                obj = (object) new Segment(this.mX, this.mY, this.mDirection, newColor);
                num1 = 1;
                goto label_1;
              default:
                num2 = 0;
                continue;
            }
          case 53:
label_1:
            num1 ^= 48;
            break;
        }
        num2 = 6;
      }
label_10:
      return obj;
    }

    public int X
    {
      get
      {
label_4:
        int num1 = 27;
        int num2 = 1;
        int mX;
        while (true)
        {
          switch (num2 ^ 50)
          {
            case 48:
              goto label_4;
            case 49:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.get_LastX);
              num2 = 3;
              continue;
            case 50:
              switch (num1)
              {
                case 52:
                  mX = this.mX;
                  num1 = 26;
                  goto label_1;
                case 53:
                case 55:
                  goto label_10;
                case 54:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.Move);
                  num1 = 25;
                  goto label_1;
                default:
                  num2 = 2;
                  continue;
              }
            case 51:
label_1:
              num1 ^= 47;
              break;
          }
          num2 = 0;
        }
label_10:
        return mX;
      }
      set
      {
label_4:
        int num1 = 3;
        int num2 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7D.\uE123\uEF7F\uEEEB\uE230\uE2DD\uE2EA\uF079\uF000\uF4BC\uF8BE\uF536\uE7F1(51);
        while (true)
        {
          switch ((num2 ^ 48) + 45)
          {
            case 0:
              goto label_4;
            case 1:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.get_X);
              num2 = -28;
              continue;
            case 2:
              switch (num1)
              {
                case 47:
                  this.mX = value;
                  num1 = 0;
                  goto label_1;
                case 48:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.get_Color);
                  num1 = 2;
                  goto label_1;
                case 49:
                  this.mLastX = this.mX;
                  num1 = 29;
                  goto label_1;
                case 50:
                  goto label_10;
                default:
                  num2 = -29;
                  continue;
              }
            case 3:
label_1:
              num1 ^= 50;
              break;
          }
          num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(23);
        }
label_10:;
      }
    }

    public int Y
    {
      get
      {
label_7:
        int num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(17);
        int num2 = -7;
        int mY;
        while (true)
        {
          switch ((num2 ^ 45) + 47)
          {
            case 0:
              switch (num1 + 48)
              {
                case 0:
                case 3:
                  goto label_10;
                case 1:
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.get_LastY);
                  num1 = -28;
                  goto label_1;
                case 2:
                  mY = this.mY;
                  num1 = -27;
                  goto label_1;
                default:
                  num2 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(43);
                  continue;
              }
            case 1:
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.get_Direction);
              num2 = -1;
              continue;
            case 2:
              goto label_7;
            case 3:
label_1:
              num1 ^= 53;
              break;
          }
          num2 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(10);
        }
label_10:
        return mY;
      }
      set
      {
label_7:
        int num1 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7D.\uE123\uEF7F\uEEEB\uE230\uE2DD\uE2EA\uF079\uF000\uF4BC\uF8BE\uF536\uE7F1(45);
        int num2 = -4;
        while (true)
        {
          switch ((num2 ^ 51) + 52)
          {
            case 0:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.Clone);
              num2 = -1;
              continue;
            case 1:
              switch (num1 + 52)
              {
                case 0:
                  this.mY = value;
                  num1 = -30;
                  goto label_1;
                case 1:
                  this.mLastY = this.mY;
                  num1 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(53);
                  goto label_1;
                case 2:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.set_Color);
                  num1 = -29;
                  goto label_1;
                case 3:
                  goto label_10;
                default:
                  num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(20);
                  continue;
              }
            case 2:
              goto label_7;
            case 3:
label_1:
              num1 ^= 45;
              break;
          }
          num2 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(43);
        }
label_10:;
      }
    }

    public Segment.Directions Direction
    {
      get
      {
label_5:
        int num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(20);
        int num2 = -29;
        Segment.Directions mDirection;
        while (true)
        {
          switch ((num2 ^ 49) + 49)
          {
            case 0:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.Clone);
              num2 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(43);
              continue;
            case 1:
              goto label_5;
            case 2:
              switch (num1 + 47)
              {
                case 0:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.get_Direction);
                  num1 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(7);
                  goto label_1;
                case 1:
                case 3:
                  goto label_10;
                case 2:
                  mDirection = this.mDirection;
                  num1 = -4;
                  goto label_1;
                default:
                  num2 = -31;
                  continue;
              }
            case 3:
label_1:
              num1 ^= 46;
              break;
          }
          num2 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7D.\uE123\uEF7F\uEEEB\uE230\uE2DD\uE2EA\uF079\uF000\uF4BC\uF8BE\uF536\uE7F1(45);
        }
label_10:
        return mDirection;
      }
      set => this.mDirection = value;
    }

    public ConsoleColor Color
    {
      get
      {
label_7:
        int num1 = 4;
        int num2 = 5;
        ConsoleColor mColor;
        while (true)
        {
          switch (num2 ^ 50)
          {
            case 52:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.get_X);
              num2 = 6;
              continue;
            case 53:
              switch (num1)
              {
                case 48:
                  mColor = this.mColor;
                  num1 = 6;
                  goto label_1;
                case 49:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.set_Y);
                  num1 = 5;
                  goto label_1;
                case 50:
                case 51:
                  goto label_10;
                default:
                  num2 = 4;
                  continue;
              }
            case 54:
              goto label_7;
            case 55:
label_1:
              num1 ^= 52;
              break;
          }
          num2 = 7;
        }
label_10:
        return mColor;
      }
      set => this.mColor = value;
    }

    public int LastX
    {
      get
      {
label_4:
        int num1 = 6;
        int num2 = 28;
        int mLastX;
        while (true)
        {
          switch (num2 ^ 51)
          {
            case 44:
              goto label_4;
            case 45:
              switch (num1)
              {
                case 52:
                case 55:
                  goto label_10;
                case 53:
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.Clone);
                  num1 = 5;
                  goto label_1;
                case 54:
                  mLastX = this.mLastX;
                  num1 = 4;
                  goto label_1;
                default:
                  num2 = 31;
                  continue;
              }
            case 46:
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.Draw);
              num2 = 29;
              continue;
            case 47:
label_1:
              num1 ^= 48;
              break;
          }
          num2 = 30;
        }
label_10:
        return mLastX;
      }
    }

    public int LastY
    {
      get
      {
label_4:
        int num1 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(10);
        int num2 = -6;
        int mLastY;
        while (true)
        {
          switch ((num2 ^ 46) + 47)
          {
            case 0:
              goto label_4;
            case 1:
              switch (num1 + 50)
              {
                case 0:
                case 3:
                  goto label_10;
                case 1:
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.get_Direction);
                  num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(29);
                  goto label_1;
                case 2:
                  mLastY = this.mLastY;
                  num1 = -30;
                  goto label_1;
                default:
                  num2 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(7);
                  continue;
              }
            case 2:
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.set_Direction);
              num2 = -3;
              continue;
            case 3:
label_1:
              num1 ^= 44;
              break;
          }
          num2 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(10);
        }
label_10:
        return mLastY;
      }
    }

    public static bool operator ==(Segment s1, Segment s2) => s1.X == s2.X && s1.Y == s2.Y && s1.Direction == s2.Direction;

    public static bool operator !=(Segment s1, Segment s2)
    {
label_7:
      int num1 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(7);
      int num2 = 20;
      bool flag;
      while (true)
      {
        switch (num2 ^ 44)
        {
          case 53:
            switch (num1 + 53)
            {
              case 0:
                flag = !(s1 == s2);
                num1 = -8;
                goto label_1;
              case 1:
              case 3:
                goto label_10;
              case 2:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Segment.Clone);
                num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(11);
                goto label_1;
              default:
                num2 = 27;
                continue;
            }
          case 54:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Segment.set_Color);
            num2 = 26;
            continue;
          case 55:
            goto label_7;
          case 56:
label_1:
            num1 ^= 52;
            break;
        }
        num2 = 25;
      }
label_10:
      return flag;
    }

    public enum Directions
    {
      Left,
      Right,
      Up,
      Down,
      Same,
    }
  }
}
