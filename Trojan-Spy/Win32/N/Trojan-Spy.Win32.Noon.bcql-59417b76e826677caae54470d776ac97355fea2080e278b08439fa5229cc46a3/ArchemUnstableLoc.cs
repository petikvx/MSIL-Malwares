// Decompiled with JetBrains decompiler
// Type: mmxAH.ArchemUnstableLoc
// Assembly: X509Ut, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 1E869FE1-6699-4C5A-A346-E3A268AF0CFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcql-59417b76e826677caae54470d776ac97355fea2080e278b08439fa5229cc46a3.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace mmxAH
{
  public class ArchemUnstableLoc : ArchemStableLoc
  {
    private bool isSealed;
    private GatePrototype gate;

    public ArchemUnstableLoc(GameEngine eng, string cn)
    {
      this.codeName = cn;
      this.type = LocathionType.ArchamUnstable;
      this.en = eng;
      this.clues = (byte) 1;
      this.isSealed = false;
    }

    public new bool FromText(TextFileParser prs, TextFileParser text) => this.FromText1(prs, text);

    public override void Print(byte label)
    {
      this.en.io.Print(this.displayName, (byte) 14, true, label: label);
      if (this.isSealed)
        this.en.io.Print("  " + this.en.sysstr.GetString(SSType.SealedFact), (byte) 14, isItalic: true, label: label);
      this.PrintClosed(label);
      if (this.clues > (byte) 0)
        this.en.io.Print(Environment.NewLine + this.en.sysstr.GetNumberClueToken((short) this.clues), (byte) 14, label: label);
      if (this.gate != null)
        this.en.io.Print(Environment.NewLine + this.gate.GetMediumDiscripthion(), label: label);
      this.PrintInvestAndMonsters(label);
    }

    public override void FromBin(BinaryReader rd)
    {
      this.FromBin2(rd);
      ((ArchemStreet) this.en.locs[(int) this.en.map.GetDistricktStreetNumber(this.Districkt)]).AddLocInDistr(this.LocathionIndex, false);
    }

    public override void Reset()
    {
      base.Reset();
      this.clues = (byte) 1;
      if (this.gate == null)
        return;
      this.en.gates.Add(this.gate);
      this.gate = (GatePrototype) null;
    }

    public override void WriteToSave(BinaryWriter wr)
    {
      base.WriteToSave(wr);
      wr.Write(this.isSealed);
      if (this.gate != null)
        wr.Write((short) ((int) this.gate.GetID() + 1));
      else
        wr.Write((short) 0);
    }

    public override void ReadFromSave(BinaryReader rd)
    {
      base.ReadFromSave(rd);
      this.isSealed = rd.ReadBoolean();
      short num = rd.ReadInt16();
      if (num == (short) 0)
      {
        this.gate = (GatePrototype) null;
      }
      else
      {
        this.gate = this.en.gates.GetCardById((short) ((int) num - 1));
        this.gate.Open(this.LocathionIndex, false);
      }
    }

    public bool GetIsSeal() => this.isSealed;

    public bool isGate() => this.gate != null;

    public GatePrototype GiveGate() => this.gate;

    public bool OpenGate()
    {
      if (this.isSealed)
      {
        this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.GateCant1));
        this.en.io.PrintToLog("  " + this.GateAndClueTitle + "  ", isItalic: true);
        this.en.io.PrintTag(this.en.sysstr.GetString(SSType.GateCant2) + Environment.NewLine);
        return true;
      }
      this.gate = this.en.gates.Draw();
      if (this.gate == null)
      {
        this.en.ga.Awekeen();
        return false;
      }
      this.clues = (byte) 0;
      this.gate.Open(this.LocathionIndex);
      if (!this.en.status.NewGate() || !this.en.status.DoomIncrise())
        return false;
      while (this.investigators.Count != 0)
        this.gate.MoveTo(this.investigators[0], true);
      return this.MonseterPlaced() && (this.en.GetPlayersNumber() < (byte) 5 || this.MonseterPlaced());
    }

    public override void MythosClues()
    {
      if (this.gate == null)
      {
        base.MythosClues();
      }
      else
      {
        this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.ClueCouldNotAppear1));
        this.en.io.PrintToLog("  " + this.GateAndClueTitle + "  ", isItalic: true);
        this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.ClueCouldNotAppear2) + Environment.NewLine);
        this.en.curs.resolvingMythos.Step3();
      }
    }

    public override void Encounter()
    {
      if (this.gate != null)
      {
        this.en.clock.PrintCurPhase();
        byte curPlayer = this.en.clock.GetCurPlayer();
        if (this.en.ActiveInvistigators[(int) curPlayer].isExploredToken)
        {
          this.ClosedGateChoose();
        }
        else
        {
          this.gate.MoveTo(curPlayer, false);
          this.en.clock.NextPlayer();
        }
      }
      else
        base.Encounter();
    }

    private void ClosedGateChoose()
    {
      List<IOOption> opts = new List<IOOption>();
      foreach (IOOption chooseOpthion in this.en.ActiveInvistigators[(int) this.en.clock.GetCurPlayer()].myTrigers.GetChooseOpthions(TrigerEvent.BeforeGateClosing, (short) 0))
        opts.Add(chooseOpthion);
      opts.Add((IOOption) new IOOptionWithParam(this.en.sysstr.GetString(SSType.ClosingWith) + "  " + this.en.sysstr.GetString(SSType.Fight), new FuncWithParam(this.gate.ClosedCheck), (short) 0));
      opts.Add((IOOption) new IOOptionWithParam(this.en.sysstr.GetString(SSType.ClosingWith) + "  " + this.en.sysstr.GetString(SSType.Lore), new FuncWithParam(this.gate.ClosedCheck), (short) 1));
      opts.Add((IOOption) new IOOpthionWithoutParam(this.en.sysstr.GetString(SSType.NotClosing), new Func(this.en.clock.NextPlayer)));
      this.en.io.StartChoose(opts, this.en.sysstr.GetString(SSType.ChooseActhioPromt), this.en.sysstr.GetString(SSType.ChooseActhionButton));
    }

    public void CloseGate(byte trofyNum = 40)
    {
      foreach (int investigator in this.investigators)
        this.en.ActiveInvistigators[investigator].isExploredToken = false;
      this.gate.Close();
      switch (trofyNum)
      {
        case 40:
          this.en.ActiveInvistigators[(int) this.en.clock.GetCurPlayer()].AddTrophy(this.gate);
          goto case 60;
        case 60:
          this.gate = (GatePrototype) null;
          break;
        default:
          this.en.ActiveInvistigators[(int) trofyNum].AddTrophy(this.gate);
          goto case 60;
      }
    }

    public void SealedChoose()
    {
      if ((int) this.en.ActiveInvistigators[(int) this.en.clock.GetCurPlayer()].GetCluesValue() < (int) this.en.status.GetCluesToSealed())
        this.en.clock.NextPlayer();
      else
        this.en.io.YesNoStart(this.en.ActiveInvistigators[(int) this.en.clock.GetCurPlayer()].GetTitle() + " " + this.en.sysstr.GetString(SSType.Has) + " " + this.en.sysstr.GetNumberClueToken((short) this.en.ActiveInvistigators[(int) this.en.clock.GetCurPlayer()].GetCluesValue()) + Environment.NewLine + this.en.sysstr.GetString(SSType.SealedPromt1) + " " + this.displayName + " " + this.en.sysstr.GetString(SSType.ForWotld) + "  " + this.en.sysstr.GetNumberClueToken((short) this.en.status.GetCluesToSealed()) + " " + this.en.sysstr.GetString(SSType.SealedPromt2), this.en.sysstr.GetString(SSType.Yes), this.en.sysstr.GetString(SSType.No), new Func(this.SealedChooseYes), new Func(this.en.clock.NextPlayer));
    }

    private void SealedChooseYes()
    {
      this.en.ActiveInvistigators[(int) this.en.clock.GetCurPlayer()].RemoveClues(this.en.status.GetCluesToSealed());
      this.Sealed();
      this.en.clock.NextPlayer();
    }

    public void Sealed()
    {
      if (this.gate != null)
        this.CloseGate();
      this.isSealed = true;
      this.en.io.PrintToLog(this.displayName, isItalic: true);
      this.en.io.PrintToLog("  " + this.en.sysstr.GetString(SSType.SealedMessage));
      this.en.status.AddSealed();
    }

    public void DrawFromGate(byte invnum, bool isDelayed = true)
    {
      if (this.gate == null)
        return;
      this.gate.MoveTo(invnum, isDelayed);
    }
  }
}
