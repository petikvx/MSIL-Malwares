// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CListBox
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using Dbasic.Other;
using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class CListBox : CControls
  {
    public CListBox(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedListBox control = (CEnhancedListBox) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      if (this.CRunner.htSharedProperties.Contains((object) str))
        return this.CRunner.SharedProperties((Control) control, str, ref place, assign, ref locals);
      switch (str)
      {
        case "add":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\".", place.LineI);
          RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          ++place.WordI;
          control.Items.Add((object) runReturn1.vString);
          return new MethodReturn(place);
        case "insert":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\".", place.LineI);
          RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn2.place;
          ++place.WordI;
          int vDouble1 = (int) runReturn2.vDouble;
          runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn2.place;
          ++place.WordI;
          control.Items.Insert(vDouble1, (object) runReturn2.vString);
          return new MethodReturn(place);
        case "count":
          return new MethodReturn(place, control.Items.Count.ToString((IFormatProvider) CRunner.cul), 0.0);
        case "removeat":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\".", place.LineI);
          RunReturn runReturn3 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn3.place;
          ++place.WordI;
          control.selectionEvent = false;
          control.Items.RemoveAt((int) runReturn3.vDouble);
          control.selectionEvent = true;
          return new MethodReturn(place);
        case "remove":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\".", place.LineI);
          RunReturn runReturn4 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn4.place;
          ++place.WordI;
          control.selectionEvent = false;
          control.Items.Remove((object) runReturn4.vString);
          control.selectionEvent = true;
          return new MethodReturn(place);
        case "selectedindex":
          if (!assign)
            return new MethodReturn(place, control.SelectedIndex.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn5 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn5.place;
          control.SelectedIndex = (int) runReturn5.vDouble;
          return new MethodReturn(place);
        case "clear":
          control.Items.Clear();
          return new MethodReturn(place);
        case "item":
          if (assign)
          {
            RunReturn runReturn6 = this.CRunner.RunCode(place, false, true, ref locals);
            place = runReturn6.place;
            int vDouble2 = (int) runReturn6.vDouble;
            ++place.WordI;
            ++place.WordI;
            runReturn6 = this.CRunner.RunCode(place, true, true, ref locals);
            place = runReturn6.place;
            control.selectionEvent = false;
            control.Items[vDouble2] = (object) runReturn6.vString;
            control.selectionEvent = true;
            return new MethodReturn(place);
          }
          ++place.WordI;
          RunReturn runReturn7 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn7.place;
          int vDouble3 = (int) runReturn7.vDouble;
          ++place.WordI;
          return new MethodReturn(place, control.Items[vDouble3].ToString(), 0.0);
        default:
          return new MethodReturn();
      }
    }

    public MethodReturn addCombo(Place place, ref Locals locals)
    {
      Color black = Color.Black;
      ++place.WordI;
      Word word = this.CRunner.nextWord(false, ref place);
      string lower1;
      if ((word.KeyWord & CConstants.Immediate) == CConstants.Immediate && this.CRunner.htControls.Contains((object) word.Value.ToLower(CRunner.cul)))
      {
        lower1 = this.CRunner.nextWord(true, ref place).Value.ToLower(CRunner.cul);
      }
      else
      {
        RunReturn runReturn = this.CRunner.RunCode(place, true, true, ref locals);
        place = runReturn.place;
        lower1 = runReturn.vString.ToLower(CRunner.cul);
      }
      ++place.WordI;
      RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn1.place;
      string lower2 = runReturn1.vString.ToLower(CRunner.cul);
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble1 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble2 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble3 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble4 = (int) runReturn2.vDouble;
      Color white = Color.White;
      ++place.WordI;
      CEnhancedListBox cenhancedListBox = new CEnhancedListBox();
      this.CRunner.htControls.Add((object) lower2, (object) new WrapControl((object) cenhancedListBox, (CControls) this));
      cenhancedListBox.name = lower2;
      cenhancedListBox.Left = vDouble1;
      cenhancedListBox.Top = vDouble2;
      cenhancedListBox.Height = vDouble4;
      cenhancedListBox.Width = vDouble3;
      cenhancedListBox.Text = "";
      cenhancedListBox.BackColor = white;
      cenhancedListBox.ForeColor = black;
      cenhancedListBox.Visible = true;
      ((Control) ((WrapControl) this.CRunner.htControls[(object) lower1]).control).Controls.Add((Control) cenhancedListBox);
      this.AddEvents(cenhancedListBox);
      return new MethodReturn(place);
    }

    private void AddEvents(CEnhancedListBox txt)
    {
      if (this.CRunner.htSubs.Contains((object) (txt.name + "_selectionchanged")))
        txt.SelectedIndexChanged += new EventHandler(this.SelectedIndexChanged);
      if (this.CRunner.htSubs.Contains((object) (txt.name + "_gotfocus")))
        txt.GotFocus += new EventHandler(this.GotFocus);
      if (!this.CRunner.htSubs.Contains((object) (txt.name + "_lostfocus")))
        return;
      txt.LostFocus += new EventHandler(this.LostFocus);
    }

    private void SelectedIndexChanged(object sender, EventArgs e)
    {
      CEnhancedCombo cenhancedCombo = (CEnhancedCombo) sender;
      Place htSub = (Place) this.CRunner.htSubs[(object) (cenhancedCombo.name + "_selectionchanged")];
      this.CRunner.StartSub(htSub, new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedCombo.name
        },
        {
          (object) ((Word) ((Line) this.CRunner.lines[htSub.LineI]).words[2]).Value,
          (object) cenhancedCombo.SelectedIndex.ToString((IFormatProvider) CRunner.cul)
        },
        {
          (object) ((Word) ((Line) this.CRunner.lines[htSub.LineI]).words[3]).Value,
          cenhancedCombo.SelectedIndex >= 0 ? (object) cenhancedCombo.SelectedItem.ToString() : (object) ""
        }
      });
    }

    private void GotFocus(object sender, EventArgs e)
    {
      CEnhancedListBox cenhancedListBox = (CEnhancedListBox) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedListBox.name + "_gotfocus")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedListBox.name
        }
      });
    }

    private void LostFocus(object sender, EventArgs e)
    {
      string[] strArray = new string[1];
      CEnhancedListBox cenhancedListBox = (CEnhancedListBox) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedListBox.name + "_lostfocus")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedListBox.name
        }
      });
    }

    public override void AddRunTimeEvent(object sender, string eventName)
    {
      CEnhancedListBox cenhancedListBox = (CEnhancedListBox) sender;
      switch (eventName)
      {
        case "selectionchanged":
          cenhancedListBox.SelectedIndexChanged += new EventHandler(this.SelectedIndexChanged);
          break;
        case "gotfocus":
          cenhancedListBox.GotFocus += new EventHandler(this.GotFocus);
          break;
        case "lostfocus":
          cenhancedListBox.LostFocus += new EventHandler(this.LostFocus);
          break;
      }
    }

    public void ShortAdd(string s)
    {
      CEnhancedListBox cenhancedListBox = new CEnhancedListBox();
      string FrmName;
      string Name;
      int Left;
      int Top;
      int Width;
      int Height;
      string Text;
      Color BackColor;
      Color ForeColor;
      bool myEnabled;
      bool myVisible;
      string[] items;
      float FontSize;
      CBuildDesigner.ListBoxGetProperties(s, out FrmName, out Name, out Left, out Top, out Width, out Height, out Text, out BackColor, out ForeColor, out myEnabled, out myVisible, out items, out FontSize);
      cenhancedListBox.name = Name.ToLower(CRunner.cul);
      cenhancedListBox.Left = Left;
      cenhancedListBox.Top = Top;
      cenhancedListBox.Width = Width;
      cenhancedListBox.Height = Height;
      cenhancedListBox.Text = Text;
      cenhancedListBox.BackColor = BackColor;
      cenhancedListBox.ForeColor = ForeColor;
      cenhancedListBox.Enabled = myEnabled;
      cenhancedListBox.Visible = myVisible;
      cenhancedListBox.Font = new Font(cenhancedListBox.Font.Name, FontSize, cenhancedListBox.Font.Style);
      foreach (string str in items)
        cenhancedListBox.Items.Add((object) str);
      this.CRunner.htControls.Add((object) cenhancedListBox.name, (object) new WrapControl((object) cenhancedListBox, (CControls) this));
      ((Control) ((WrapControl) this.CRunner.htControls[(object) FrmName]).control).Controls.Add((Control) cenhancedListBox);
      this.AddEvents(cenhancedListBox);
    }
  }
}
