// Decompiled with JetBrains decompiler
// Type: LTSvcMon.LibWrap
// Assembly: LTSvcMon, Version=40.101.4107.19874, Culture=neutral, PublicKeyToken=null
// MVID: 816B70F7-DB44-4BCA-BD08-988C39A8AB45
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Patched.mf-f4d248fac8113c5e0ed835350bfdc060077775705ca69e00ce08a4a7e4643090.exe

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace LTSvcMon
{
  internal class LibWrap
  {
    [DllImport("wininet.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool InternetSetOption(
      IntPtr hInternet,
      int dwOption,
      IntPtr lpBuffer,
      ref int lpdwBufferLength);

    [DllImport("user32.dll", EntryPoint = "SendMessageA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, ref int lParam);

    [DllImport("shell32.dll", EntryPoint = "ShellExecuteA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int ShellExecute(
      int hWnd,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpOperation,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFile,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpParameters,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDirectory,
      int nShowCmd);

    [DllImport("shell32.dll", EntryPoint = "ShellExecuteEx", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int ShellExecuteEX(SHELLEXECUTEINFO SEI);

    [DllImport("psapi.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int EnumProcesses(int[] pProcessIds, int cb, int pBytesReturned);

    [DllImport("powrprof", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SetSuspendState(
      int Hibernate,
      int ForceCritical,
      int DisableWakeEvent);

    [DllImport("tapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int tapiRequestMakeCall(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string stNumber,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string stDummy1,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string stDummy2,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string stDummy3);

    [DllImport("winspool.drv", EntryPoint = "OpenPrinterA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int OpenPrinter(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string pPrinterName,
      ref int phPrinter,
      ref PRINTER_DEFAULTS pDefault);

    [DllImport("winspool.drv", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int ClosePrinter(int hPrinter);

    [DllImport("winspool.drv", EntryPoint = "SetPrinterA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SetPrinter(
      int hPrinter,
      int Level,
      ref int pPrinter,
      Printer_Control_Commands Command);

    [DllImport("winspool.drv", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int EnumPrinters(
      int flags,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string name,
      int Level,
      ref int pPrinterEnum,
      int cdBuf,
      int ByRefpcbNeeded,
      ref int pcReturned);

    [DllImport("winspool.drv", EntryPoint = "SetDefaultPrinterA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SetDefaultPrinter([MarshalAs(UnmanagedType.VBByRefStr)] ref string pszPrinter);

    [DllImport("winspool.drv", EntryPoint = "GetDefaultPrinterA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool GetDefaultPrinter(StringBuilder pszBuffer, ref int dwLen);

    [DllImport("winspool.drv", EntryPoint = "GetPrinterW", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetPrinter(
      int hPrinter,
      int Level,
      IntPtr pPrinter,
      int cbBuf,
      ref int pcbNeeded);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetTokenInformation(
      IntPtr TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      TOKEN_USER TokenInformation,
      int TokenInformationLength,
      int ReturnLength);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetTokenInformation(
      IntPtr TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      TOKEN_USER2 TokenInformation,
      int TokenInformationLength,
      int ReturnLength);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetTokenInformation(
      IntPtr TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      int TokenInformation,
      int TokenInformationLength,
      ref int ReturnLength);

    [DllImport("advapi32.dll", EntryPoint = "LookupAccountSidA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int LookupAccountSid(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpSystemName,
      IntPtr pSid,
      StringBuilder Account,
      ref int cbName,
      StringBuilder DomainName,
      ref int cbDomainName,
      ref int peUse);

    [DllImport("advapi32.dll", EntryPoint = "GetUserNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetUserName([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpBuffer, ref int nSize);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int OpenProcessToken(
      int ProcessHandle,
      int DesiredAccess,
      ref IntPtr TokenHandle);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int OpenProcessToken(
      IntPtr ProcessHandle,
      int DesiredAccess,
      ref IntPtr TokenHandle);

    [DllImport("advapi32.dll", EntryPoint = "LookupPrivilegeValueA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int LookupPrivilegeValue(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpSystemName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpName,
      ref LUID lpLuid);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int AdjustTokenPrivileges(
      IntPtr TokenHandle,
      int DisableAllPrivileges,
      ref TOKEN_PRIVILEGES NewState,
      int BufferLength,
      ref TOKEN_PRIVILEGES PreviousState,
      ref int ReturnLength);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SetTokenInformation(
      IntPtr TokenHandle,
      int TokenInformationClass,
      ref int TokenInformation,
      int TokenInformationLength);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int CreateProcessAsUserW(
      IntPtr TokenHandle,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpApplicationName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpCommandLine,
      int lpProcessAttributes,
      ref int lpThreadAttributes,
      bool bInheritHandles,
      int dwCreationFlags,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpEnvironment,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpCurrentDirectory,
      ref STARTUPINFOW lpStartupInfo,
      ref PROCESS_INFORMATION lpProcessInformation);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int GetAclInformation(
      IntPtr pAcl,
      IntPtr pAclInformation,
      int AclInformationLength,
      int dwAclInformationClass);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern IntPtr LockServiceDatabase(IntPtr hService);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int UnlockServiceDatabase(IntPtr hService);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern IntPtr OpenService(
      IntPtr hService,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpServiceName,
      int lpAccess);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern void CloseServiceHandle(IntPtr SCHANDLE);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern IntPtr OpenSCManager(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string strMachineName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string strServiceControllerDB,
      int intServiceController);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int ChangeServiceConfig(
      IntPtr hService,
      int nServiceType,
      int nStartType,
      int nErrorControl,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpBinaryPathName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpLoadOrderGroup,
      IntPtr lpdwTagId,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDependencies,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpServiceStartName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpPassword,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDisplayName);

    [DllImport("advapi32.dll", EntryPoint = "ChangeServiceConfig2A", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int ChangeServiceConfig2(
      IntPtr hService,
      InfoLevel dwInfoLevel,
      [MarshalAs(UnmanagedType.Struct)] ref SERVICE_DESCRIPTION lpInfo);

    [DllImport("advapi32.dll", EntryPoint = "ChangeServiceConfig2A", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int ChangeServiceConfig2(
      IntPtr hService,
      InfoLevel dwInfoLevel,
      [MarshalAs(UnmanagedType.Struct)] ref SERVICE_FAILURE_ACTIONS lpInfo);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int RegDisableReflectionKey(int hBase);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int RegEnableReflectionKey(int hBase);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int RegOpenKeyEx(
      int hKey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpSubKey,
      int ulOptions,
      int samDesired,
      ref int phkResult);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int RegCloseKey(int hKey);

    [DllImport("advapi32", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int RegEnumKeyEx(
      int hKey,
      int dwIndex,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpName,
      ref int lpcbName,
      int lpReserved,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClass,
      ref int lpcbClass,
      ref System.Runtime.InteropServices.ComTypes.FILETIME lpftLastWriteTime);

    [DllImport("advapi32", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int RegQueryValueEx(
      int hKey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpName,
      int lpReserved,
      int lpType,
      byte[] lpData,
      ref int lpcbData);

    [DllImport("winmm.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int PlaySound([MarshalAs(UnmanagedType.VBByRefStr)] ref string ByVallpszSoundName, int hModule, int dwFlags);

    [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int mciSendString(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpstrCommand,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpstrReturnString,
      int uReturnLength,
      int hwndCallback);

    [DllImport("winmm.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int waveOutGetVolume(int uDeviceID, ref int lpdwVolume);

    [DllImport("winmm.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int waveOutSetVolume(int uDeviceID, int dwVolume);

    [DllImport("mpr.dll", EntryPoint = "WNetGetLastErrorW", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int WNetGetLastError(
      ref int lpError,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpErrorBuf,
      int nErrorBufSize,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpNameBuf,
      int nNameBufSize);

    [DllImport("mpr.dll", EntryPoint = "WNetOpenEnumW", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int WNetOpenEnum(
      int dwScope,
      int dwType,
      int dwUsage,
      ref NETRESOURCE lpNetResource,
      ref int lphEnum);

    [DllImport("mpr.dll", EntryPoint = "WNetEnumResourceW", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int WNetEnumResource(
      int hEnum,
      ref int lpcCount,
      int lpBuffer,
      ref int lpBufferSize);

    [DllImport("mpr.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int WNetCloseEnum(int hEnum);

    [DllImport("gdi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool BitBlt(
      IntPtr hObject,
      int nXDest,
      int nYDest,
      int nWidth,
      int nHeight,
      IntPtr hObjectSource,
      int nXSrc,
      int nYSrc,
      int dwRop);

    [DllImport("gdi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr CreateCompatibleBitmap(IntPtr hDC, int nWidth, int nHeight);

    [DllImport("gdi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr CreateCompatibleDC(IntPtr hDC);

    [DllImport("gdi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool DeleteDC(IntPtr hDC);

    [DllImport("gdi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool DeleteObject(IntPtr hObject);

    [DllImport("gdi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr SelectObject(IntPtr hDC, IntPtr hObject);

    [DllImport("gdi32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CreateSolidBrush(int crColor);

    [DllImport("gdi32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SetTextColor(IntPtr hdc, int crColor);

    [DllImport("gdi32", EntryPoint = "CreateFontA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CreateFont(
      int H,
      int W,
      int E,
      int O,
      int W,
      int I,
      int u,
      int S,
      int C,
      int OP,
      int CP,
      int Q,
      int PAF,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string f);

    [DllImport("gdi32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SelectObject(IntPtr hdc, int hObject);

    [DllImport("gdi32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetDeviceCaps(IntPtr hdc, int nIndex);

    [DllImport("gdi32", EntryPoint = "DeleteEnhMetafileW", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool DeleteEnhMetafile(IntPtr hEMF);

    [DllImport("gdi32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetPixel(IntPtr hdc, int x, int y);

    [DllImport("gdi32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int BitBlt(
      IntPtr hDestDC,
      int x,
      int y,
      int nWidth,
      int nHeight,
      int hSrcDC,
      int xSrc,
      int ySrc,
      int dwRop);

    [DllImport("user32.dll", EntryPoint = "MessageBox", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int MBox(int hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string txt, [MarshalAs(UnmanagedType.VBByRefStr)] ref string caption, int Typ);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int ExitWindowsEx(int uFlags, int dwReserved);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr GetDesktopWindow();

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr GetWindowDC(IntPtr hWnd);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr GetCaretPos(ref tagPoint hWnd);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr ReleaseDC(IntPtr hWnd, IntPtr hDC);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr GetWindowRect(IntPtr hWnd, ref RECT rect);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool SetProcessWindowStation(IntPtr hWinSta);

    [DllImport("user32.dll", EntryPoint = "OpenWindowStationA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr OpenWindowStation(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszWinSta,
      bool fInherit,
      int dwDesiredAccess);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CloseWindowStation(IntPtr hWinSta);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool GetLastInputInfo(ref LASTINPUTINFO plii);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern short GetAsyncKeyState(int vKey);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetKeyState(int vKey);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetScrollInfo(IntPtr hWnd, int n, ref ScrollInfoStruct lpScrollInfo);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SetScrollInfo(
      IntPtr hWnd,
      int n,
      ref ScrollInfoStruct lpScrollInfo,
      bool bRefresh);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetScrollPos(IntPtr hWnd, int nBar);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SetScrollPos(IntPtr hWnd, int nBar, int nPos, bool bRedraw);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool SetCursorPos(int X, int Y);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern void Mouse_Event(
      int dwFlags,
      int dx,
      int dy,
      int cButtons,
      int dwExtraInfo);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int FlashWindow(int hWnd, int bInvert);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int FlashWindowEx(ref FlashWInfo pfwi);

    [DllImport("user32.dll", EntryPoint = "GetWindowLongA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetWindowLong(int hwnd, int nIndex);

    [DllImport("user32.dll", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int FindWindow([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int IsZoomed(int hwnd);

    [DllImport("user32", EntryPoint = "SendMessageA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SendMessage(int hwnd, int wMsg, int wParam, ref int lParam);

    [DllImport("user32", EntryPoint = "SendMessageTimeoutA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SendMessageTimeout(
      int hwnd,
      int wMsg,
      int wParam,
      ref int lParam,
      int fuFlags,
      int uTimeout,
      int lpdwResult);

    [DllImport("user32", EntryPoint = "SendMessageTimeoutA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SendMessageTimeoutS(
      int hwnd,
      int wMsg,
      int wParam,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lParam,
      int fuFlags,
      int uTimeout,
      int lpdwResult);

    [DllImport("user32", EntryPoint = "PostMessageA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int PostMessage(IntPtr hwnd, int wMsg, int wParam, int lParam);

    [DllImport("user32", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    [DllImport("user32", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetWindowTextLength(int hwnd);

    [DllImport("user32", EntryPoint = "GetClassNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetClassName(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, int nMaxCount);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int EnumWindows(LibWrap.EnumWindowFunction lpEnumFunc, int lParam);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int EnumChildWindows(
      int hwndParent,
      LibWrap.EnumWindowFunction lpEnumFunc,
      int lParam);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int ShowWindow(int hwnd, int nCmdShow);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int BringWindowToTop(int hwnd);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern short CascadeWindows(
      int hwndParent,
      int wHow,
      ref RECT lpRect,
      int cKids,
      ref int lpkids);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetWindowRect(int hwnd, ref RECT lpRect);

    [DllImport("user32", EntryPoint = "CallWindowProcA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CallWindowProc(
      int lpPrevWndFunc,
      int hwnd,
      int Msg,
      int wParam,
      int lParam);

    [DllImport("user32", EntryPoint = "DrawTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int DrawText(
      IntPtr hdc,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpStr,
      int nCount,
      ref RECT lpRect,
      int wFormat);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int FillRect(IntPtr hdc, ref RECT lpRect, int hBrush);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetParent(int hwnd);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetActiveWindow();

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetTopWindow(int hwnd);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetClientRect(int hwnd, ref RECT lpRect);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetSystemMetrics(int nIndex);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int ReleaseDC(int hwnd, int hdc);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int WindowFromPoint(int xPoint, int yPoint);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetWindowDC(int hwnd);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int UnhookWindowsHookEx(int hHook);

    [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SetWindowsHookEx(
      int idHook,
      LibWrap.HookDelegate lpfn,
      int hmod,
      int dwThreadId);

    [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SetWindowsMouseHookEx(
      int idHook,
      LibWrap.MouseHookDelegate lpfn,
      int hmod,
      int dwThreadId);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CallNextHookEx(int hHook, int nCode, int wParam, int lParam);

    [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CallNextMouseHookEx(
      int hHook,
      int nCode,
      int wParam,
      MOUSEHOOKSTRUCT lParam);

    [DllImport("user32", EntryPoint = "OpenDesktopA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int OpenDesktop(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszDesktop,
      int dwFlags,
      bool fInherit,
      int dwDesiredAccess);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CloseDesktop(int hDesktop);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int SwitchDesktop(int hDesktop);

    [DllImport("uxtheme.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern long GetCurrentThemeName(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string pszThemeFileName,
      int dwMaxNameChars,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string pszColorBuff,
      int cchMaxColorChars,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string pszSizeBuff,
      int cchMaxSizeChars);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool GlobalMemoryStatusEx(ref MEMORYSTATUSEX lpBuffer);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern ulong GetTickCount64();

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetProductInfo(
      int dwOSMajorVersion,
      int dwOSMinorVersion,
      int dwSpMajorVersion,
      int dwSpMinorVersion,
      ref int pdwReturnedProductType);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr GetStdHandle(int nStdHandle);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool FreeConsole();

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern bool AllocConsole();

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern uint GetTickCount();

    [DllImport("kernel32", EntryPoint = "CreateProcessA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CreateProcess(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpApplicationName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpCommandLine,
      ref SECURITY_ATTRIBUTES lpProcessAttributes,
      ref SECURITY_ATTRIBUTES lpThreadAttributes,
      int bInheritHandles,
      int dwCreationFlags,
      ref IntPtr lpEnvironment,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpCurrentDriectory,
      ref STARTUPINFOW lpStartupInfo,
      ref PROCESS_INFORMATION lpProcessInformation);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int TerminateProcess(int hHandle, int exitcode);

    [DllImport("Kernel32.dll", EntryPoint = "FormatMessageA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int FormatMessage(
      int dwFlags,
      IntPtr lpSource,
      int dwMessageId,
      int dwLanguageId,
      StringBuilder lpBuffer,
      int nSize,
      int Arguments);

    [DllImport("Kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int FormatMessageW(
      int dwFlags,
      IntPtr lpSource,
      int dwMessageId,
      int dwLanguageId,
      StringBuilder lpBuffer,
      int nSize,
      string[] Arguments);

    [DllImport("Kernel32.dll", EntryPoint = "LoadLibraryA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr LoadLibrary([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpLibFileName);

    [DllImport("Kernel32.dll", EntryPoint = "LoadLibraryExW", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern IntPtr LoadLibraryEx(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpLibFileName,
      IntPtr hfile,
      int nSize);

    [DllImport("Kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int FreeLibrary(IntPtr hLibModule);

    [DllImport("Kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr GetProcAddress(IntPtr hModule, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpProcName);

    [DllImport("Kernel32.dll", EntryPoint = "CopyMemory", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern void CopyMemoryFixedInfo([Out] FixedInfo dest, byte[] source, int size);

    [DllImport("Kernel32.dll", EntryPoint = "CopyMemory", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern void CopyMemoryIPAddrString(
      ref IPAddrString dest,
      IntPtr source,
      int size);

    [DllImport("Kernel32.dll", EntryPoint = "CopyMemory", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern void CopyMemoryIPAdapterInfo(
      ref IPAdapterInfo dest,
      byte[] source,
      int size);

    [DllImport("Kernel32.dll", EntryPoint = "CopyMemory", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern void CopyMemoryIPAdapterInfoP(
      ref IPAdapterInfo dest,
      IntPtr source,
      int size);

    [DllImport("Kernel32.dll", EntryPoint = "CopyMemory", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern void CopyMemoryPtr(ref TOKEN_USER dest, ref IntPtr source, int size);

    [DllImport("Kernel32.dll", EntryPoint = "CopyMemory", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern void CopyMemorySC(IntPtr dest, SC_ACTION[] source, int size);

    [DllImport("Kernel32.dll", EntryPoint = "CopyMemory", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern void CopyMemoryInt(ref int dest, ref byte source, int size);

    [DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern void CopyMemoryString([MarshalAs(UnmanagedType.TBStr)] ref string anyDest, ref IntPtr anySrc, int lngLen);

    [DllImport("Kernel32.dll", EntryPoint = "CopyMemory", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern void CopyMemoryIPAdapterIndexMap(
      ref IPAdapterIndexMap dest,
      ref byte source,
      int size);

    [DllImport("Kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern void Sleep(int dwMilliseconds);

    [DllImport("Kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int IsWow64Process(IntPtr hProcess, ref int Wow64Process);

    [DllImport("Kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int Wow64DisableWow64FsRedirection(ref int oldvalue);

    [DllImport("Kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int Wow64RevertWow64FsRedirection(int oldvalue);

    [DllImport("Kernel32.dll", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetModuleHandle([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpModuleName);

    [DllImport("Kernel32.dll", EntryPoint = "GetVersionExA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetVersionEx(ref OSVERSIONINFOEX VersionInfo);

    [DllImport("kernel32", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int WaitForSingleObject(int hHandle, int dwMilliseconds);

    [DllImport("Kernel32.dll", EntryPoint = "GetModuleFileNameExA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetModuleFileNameEx(
      int hHandle,
      int hModule,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName,
      int nSize);

    [DllImport("Kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int OpenProcess(
      int dwDesiredAccess,
      bool bInheritHandle,
      int dwProcessId);

    [DllImport("kernel32", EntryPoint = "GetDiskFreeSpaceExA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetDiskFreeSpaceEx(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDirectoryName,
      ref long lpFreeBytesAvailableToCaller,
      ref long lpTotalNumberOfBytes,
      ref long lpTotalNumberOfFreeBytes);

    [DllImport("Kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern void Beep(int dwFreq, int dwDuration);

    [DllImport("kernel32.dll", EntryPoint = "MoveFileExA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int MoveFileEx(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpExistingFileName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpNewFileName,
      int dwFlags);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetExitCodeProcess(int hProcess, ref int lpExitCode);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int MulDiv(int nNumber, int nNumerator, int nDenominator);

    [DllImport("kernel32", EntryPoint = "CreateToolhelp32Snapshot", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CreateToolhelpSnapshot(int lFlags, int lProcessID);

    [DllImport("kernel32", EntryPoint = "Process32First", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int ProcessFirst(int hSnapShot, ref PROCESSENTRY32 uProcess);

    [DllImport("kernel32", EntryPoint = "Process32Next", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int ProcessNext(int hSnapShot, ref PROCESSENTRY32 uProcess);

    [DllImport("Kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
    internal static extern int GetSystemTimes(
      ref FILETIME idleTime,
      ref FILETIME kernelTime,
      ref FILETIME userTime);

    [DllImport("Kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
    internal static extern int GetProcessTimes(
      IntPtr hProcess,
      ref FILETIME CreateTime,
      ref FILETIME ExitTime,
      ref FILETIME kernelTime,
      ref FILETIME userTime);

    [DllImport("Kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
    internal static extern int GetSystemTimeAsFileTime(ref System.Runtime.InteropServices.ComTypes.FILETIME sysTime);

    [DllImport("Kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CloseHandle(int hObject);

    [DllImport("Kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CloseHandle(IntPtr hObject);

    [DllImport("Kernel32.dll", EntryPoint = "CreateFileA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int CreateFile(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName,
      int dwDesiredAccess,
      int dwShareMode,
      int lpSecurityAttributes,
      int dwCreationDisposition,
      int dwFlagsAndAttributes,
      int hTemplateFile);

    [DllImport("Kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetLastError();

    [DllImport("Kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int DeviceIoControl(
      int hDevice,
      int dwIoControlCode,
      [In, Out] SENDCMDINPARAMS lpInBuffer,
      int nInBufferSize,
      [In, Out] SENDCMDOUTPARAMS lpOutBuffer,
      int nOutBufferSize,
      ref int lpBytesReturned,
      int lpOverlapped);

    [DllImport("Kernel32.dll", EntryPoint = "DeviceIoControl", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int DeviceIoControl4(
      int hDevice,
      int dwIoControlCode,
      [In, Out] SENDCMDINPARAMS lpInBuffer,
      int nInBufferSize,
      [In, Out] GETVERSIONINPARAMS lpOutBuffer,
      int nOutBufferSize,
      ref int lpBytesReturned,
      int lpOverlapped);

    [DllImport("Kernel32.dll", EntryPoint = "DeviceIoControl", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int DeviceIoControl3(
      int hDevice,
      int dwIoControlCode,
      [In, Out] SENDCMDINPARAMS lpInBuffer,
      int nInBufferSize,
      [In, Out] ref byte lpOutBuffer,
      int nOutBufferSize,
      ref int lpBytesReturned,
      int lpOverlapped);

    [DllImport("Kernel32.dll", EntryPoint = "DeviceIoControl", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int DeviceIoControl2(
      int hDevice,
      int dwIoControlCode,
      ref object lpInBuffer,
      int nInBufferSize,
      ref object lpOutBuffer,
      int nOutBufferSize,
      ref int lpBytesReturned,
      ref int lpOverlapped);

    [DllImport("Kernel32.dll", EntryPoint = "DeviceIoControl", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int DeviceIoControl5(
      int hDevice,
      int dwIoControlCode,
      [In, Out] SENDCMDINPARAMS lpInBuffer,
      int nInBufferSize,
      [In, Out] SENDCMDOUTPARAMS2 lpOutBuffer,
      int nOutBufferSize,
      ref int lpBytesReturned,
      int lpOverlapped);

    [DllImport("Kernel32.dll", EntryPoint = "SearchPathW", CharSet = CharSet.Unicode, SetLastError = true)]
    internal static extern int SearchPath(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpPath,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpExtension,
      int nBufferLength,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpBuffer,
      int lpFilePart);

    [DllImport("Kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int FindClose(int hFindFile);

    [DllImport("Kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int FindFirstFile([MarshalAs(UnmanagedType.VBByRefStr)] ref string fileName, [In, Out] WIN32_FIND_DATA findFileData);

    [DllImport("Kernel32.dll", EntryPoint = "FindNextFileA", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int FindNextFile(int hFindFile, ref WIN32_FIND_DATA lpFindFileData);

    [DllImport("Iphlpapi.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int IpReleaseAddress(ref IPAdapterIndexMap AdapterInfo);

    [DllImport("Iphlpapi.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int IpRenewAddress(ref IPAdapterIndexMap AdapterInfo);

    [DllImport("Iphlpapi.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int GetTcpTable(IntPtr pTcpTable, ref int pdwSize, bool bOrder);

    [DllImport("Iphlpapi.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int GetNetworkParams(byte[] PFixedInfoBuffer, ref int size);

    [DllImport("Iphlpapi.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int GetAdaptersInfo(byte[] PAdapterInfoBuffer, ref int size);

    [DllImport("Iphlpapi.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int GetInterfaceInfo(byte[] PIfTableBuffer, ref int size);

    [DllImport("Iphlpapi.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int GetIfTable(IntPtr pIfTable, ref uint pdwSize, bool bOrder);

    [DllImport("Iphlpapi.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int GetIfEntry(ref MIB_IFROW pIfRow);

    [DllImport("Iphlpapi.dll", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern int SendARP(int DestIP, int SrcIP, byte[] pMacAddr, ref int PhyAddrLen);

    [DllImport("ws2_32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int GetHostName([MarshalAs(UnmanagedType.VBByRefStr)] ref string host_name, int namelen);

    [DllImport("ws2_32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int gethostbyname([MarshalAs(UnmanagedType.VBByRefStr)] ref string host_name);

    [DllImport("wsock32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern int inet_addr([MarshalAs(UnmanagedType.VBByRefStr)] ref string s);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpStartup(
      ref int major,
      ref int minor,
      ref int level,
      ref int translate,
      ref int retransmit);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpCleanup();

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr SnmpCreateSession(
      IntPtr hwnd,
      int msg,
      LibWrap.SnmpCallback callback,
      IntPtr data);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpClose(IntPtr session);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpRegister(
      IntPtr session,
      IntPtr src,
      IntPtr dest,
      IntPtr context,
      IntPtr notification,
      int state);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpListen(IntPtr entity, IntPtr status);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpSendMsg(
      IntPtr session,
      IntPtr src,
      IntPtr dest,
      IntPtr context,
      IntPtr pdu);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpRecvMsg(
      IntPtr session,
      ref IntPtr src,
      ref IntPtr dest,
      ref IntPtr context,
      ref IntPtr pdu);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpCancelMsg(IntPtr session, IntPtr reqid);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpContextToStr(
      IntPtr context,
      ref SMIOCTETS octets);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr SnmpStrToContext(IntPtr session, ref SMIOCTETS octets);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpFreeEntity(IntPtr entity);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpEntityToStr(
      ref SMIOID entity,
      int size,
      IntPtr str);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr SnmpStrToEntity(IntPtr session, [MarshalAs(UnmanagedType.LPStr)] string str);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpFreeContext(IntPtr context);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpSetPort(IntPtr entity, int port);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpGetRetransmitMode(ref uint mode);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpGetRetry(
      IntPtr entity,
      ref uint policy,
      ref uint actual);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpGetTimeout(
      IntPtr entity,
      ref int policy,
      ref int actual);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpGetTranslateMode(ref uint mode);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpGetVendorInfo(ref VENDORINFO Info);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpSetRetransmitMode(
      SNMPAPI_RETRANSMIT mode);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpSetRetry(IntPtr entity, int policy);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpSetTimeout(IntPtr entity, int policy);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpSetTranslateMode(SNMPAPI_TRANSLATE mode);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr SnmpCreatePdu(
      IntPtr session,
      int type,
      int reqid,
      int status,
      int index,
      IntPtr vblist);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr SnmpDuplicatePdu(IntPtr session, IntPtr pdu);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpFreePdu(IntPtr pdu);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpGetPduData(
      IntPtr pdu,
      ref int type,
      ref int reqid,
      ref int status,
      ref int index,
      ref IntPtr vblist);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpSetPduData(
      IntPtr pdu,
      ref int type,
      ref int reqid,
      ref int nonrepeaters,
      ref int maxreps,
      ref IntPtr vblist);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpDecodeMsg(
      IntPtr session,
      ref IntPtr src,
      ref IntPtr dest,
      ref IntPtr context,
      ref IntPtr pdu,
      ref SMIOCTETS octets);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpEncodeMsg(
      IntPtr session,
      IntPtr src,
      IntPtr dest,
      IntPtr context,
      IntPtr pdu,
      ref SMIOCTETS octets);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpFreeDescriptor(
      int syntax,
      ref SMIOID desc);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpFreeDescriptor(
      int syntax,
      ref SMIOCTETS desc);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpGetLastError(IntPtr session);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpOidCompare(
      IntPtr oid1,
      IntPtr oid2,
      int max,
      ref int result);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpOidCopy(IntPtr src, IntPtr dest);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpOidToStr(
      ref SMIOID oid,
      int size,
      IntPtr str);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpStrToOid([MarshalAs(UnmanagedType.VBByRefStr)] ref string str, ref SMIOID oid);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpCountVbl(IntPtr vbl);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern IntPtr SnmpCreateVbl(
      IntPtr session,
      ref SMIOID name,
      ref SMIVALUE value);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpDeleteVb(IntPtr vbl, int index);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpDuplicateVbl(IntPtr session, IntPtr vbl);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpFreeVbl(IntPtr vbl);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpGetVb(
      IntPtr vbl,
      int index,
      ref SMIOID name,
      ref SMIVALUE value);

    [DllImport("wsnmp32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern SNMPAPI_STATUS SnmpSetVb(
      IntPtr vbl,
      int index,
      ref SMIOID name,
      ref SMIVALUE value);

    internal delegate int EnumWindowFunction(int hWnd, int lParam);

    internal delegate int SnmpCallback(
      int lSession,
      int hWnd,
      int wMsg,
      int wParam,
      int lParam,
      int lpClientData);

    public delegate int HookDelegate(int Code, int wParam, int lParam);

    public delegate int MouseHookDelegate(int Code, int wParam, ref MOUSEHOOKSTRUCT lParam);
  }
}
