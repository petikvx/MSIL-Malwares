// Decompiled with JetBrains decompiler
// Type: Tetris.Producers.ContainerValueProducer
// Assembly: SMALLR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6D2A6844-DF52-4C3E-A39E-6BCAB729CFBF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-cb64837983ad6cdbc07df3dc8272a72b4d1b41314b797cc4f9bb67cd37f7b0f5.exe

using System.Drawing;
using System.Runtime.CompilerServices;
using Tetris.Managers;

namespace Tetris.Producers
{
  public class ContainerValueProducer
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ContainerValueProducer(Image i, Point second)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_1;
            case 1:
              this.EnableVisitor(second);
              goto case 2;
            case 2:
            case 3:
              this.ValidateVisitor(true);
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 1;
            case 4:
              goto label_7;
            case 6:
              goto label_8;
            default:
              goto label_6;
          }
        }
label_1:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        num1 = 4;
        continue;
label_6:
        num1 = 2;
        continue;
label_7:
        this.AwakeVisitor(i);
        num1 = 1;
      }
label_8:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Image WriteVisitor() => this.indexer;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void AwakeVisitor(Image asset) => this.indexer = asset;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Point SetVisitor() => this.m_Invocation;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void EnableVisitor(Point res) => this.m_Invocation = res;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool ConnectVisitor() => this._Consumer;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ValidateVisitor(bool deleteinfo) => this._Consumer = deleteinfo;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual void Draw(Mock key)
    {
      int num1 = 4;
label_1:
      int num2 = -949847181;
      bool flag;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ -1695313500)) % 13U)
        {
          case 0:
            goto label_1;
          case 1:
label_5:
            flag = this.ConnectVisitor();
            num1 = 0;
            num2 = -131673259;
            continue;
          case 2:
            num2 = (int) num3 * 1548975488 ^ -2005682731;
            continue;
          case 3:
            num1 = 3;
            num2 = (int) num3 * 200759890 ^ -996767759;
            continue;
          case 4:
            num1 = 5;
            num2 = (int) num3 * -1959774965 ^ -1756515980;
            continue;
          case 5:
            num2 = (int) num3 * 1834181138 ^ -974673345;
            continue;
          case 6:
label_12:
            num2 = -310084154;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = 4;
            num2 = (int) num3 * -2987380 ^ 1099248005;
            continue;
          case 9:
            num2 = (int) num3 * -1414175021 ^ 97859765;
            continue;
          case 10:
label_11:
            int num4;
            num2 = num4 = flag ? -998960117 : (num4 = -310084154);
            continue;
          case 11:
label_4:
            key.GetServer(this.WriteVisitor(), this.SetVisitor());
            num2 = -1150830425;
            continue;
          case 12:
            switch (num1)
            {
              case 0:
              case 1:
                goto label_11;
              case 2:
              case 3:
                goto label_4;
              case 4:
                goto label_5;
              case 5:
                goto label_12;
              default:
                num2 = -319689976;
                continue;
            }
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    internal static bool OrderPrototype() => true;

    internal static bool InsertPrototype() => false;
  }
}
