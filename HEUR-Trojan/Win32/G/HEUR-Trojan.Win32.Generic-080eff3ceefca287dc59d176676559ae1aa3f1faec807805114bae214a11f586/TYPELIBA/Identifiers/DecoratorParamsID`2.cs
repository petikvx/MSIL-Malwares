// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Identifiers.DecoratorParamsID`2
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace TYPELIBA.Identifiers
{
  [CompilerGenerated]
  [DebuggerDisplay("\\{ Name = {Name}, Titles = {Titles} }", Type = "<Anonymous Type>")]
  internal sealed class DecoratorParamsID<T, TT>
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly T m_Status;
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly TT bridge;

    public T Name
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Status;
    }

    public TT Titles
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.bridge;
    }

    [DebuggerHidden]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public DecoratorParamsID(T task, TT ord)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      // ISSUE: reference to a compiler-generated field
      this.m_Status = task;
      // ISSUE: reference to a compiler-generated field
      this.bridge = ord;
    }

    [DebuggerHidden]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool Equals(object i)
    {
      int num = 3;
      // ISSUE: variable of a compiler-generated type
      DecoratorParamsID<T, TT> decoratorParamsId;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            decoratorParamsId = i as DecoratorParamsID<T, TT>;
            num = 2;
            continue;
          case 1:
          case 2:
            if (this != decoratorParamsId)
            {
              if (decoratorParamsId == null)
                goto label_9;
              else
                goto case 4;
            }
            else
              goto label_10;
          case 4:
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            if (EqualityComparer<T>.Default.Equals(this.m_Status, decoratorParamsId.m_Status))
            {
              num = 5;
              continue;
            }
            goto label_9;
          case 5:
            goto label_8;
          default:
            num = 4;
            continue;
        }
      }
label_8:
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      return EqualityComparer<TT>.Default.Equals(this.bridge, decoratorParamsId.bridge);
label_9:
      return false;
label_10:
      return true;
    }

    [DebuggerHidden]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override int GetHashCode() => (218804418 * -1521134295 + EqualityComparer<T>.Default.GetHashCode(this.m_Status)) * -1521134295 + EqualityComparer<TT>.Default.GetHashCode(this.bridge);

    [DebuggerHidden]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string ToString()
    {
      object[] objArray = new object[2];
      // ISSUE: reference to a compiler-generated field
      T status = this.m_Status;
      ref T local1 = ref status;
      objArray[0] = (object) ((object) local1 != null ? local1.ToString() : (string) null);
      // ISSUE: reference to a compiler-generated field
      TT bridge = this.bridge;
      ref TT local2 = ref bridge;
      objArray[1] = (object) ((object) local2 != null ? local2.ToString() : (string) null);
      return string.Format((IFormatProvider) null, "{{ Name = {0}, Titles = {1} }}", objArray);
    }

    internal static bool VisitDispatcher() => true;

    internal static bool CallDispatcher() => false;
  }
}
