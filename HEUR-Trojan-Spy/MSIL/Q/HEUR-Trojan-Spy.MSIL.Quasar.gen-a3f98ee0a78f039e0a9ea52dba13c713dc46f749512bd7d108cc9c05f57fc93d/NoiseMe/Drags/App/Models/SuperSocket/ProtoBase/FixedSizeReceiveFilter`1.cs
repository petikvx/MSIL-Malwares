// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.SuperSocket.ProtoBase.FixedSizeReceiveFilter`1
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;
using System.Collections.Generic;

namespace NoiseMe.Drags.App.Models.SuperSocket.ProtoBase
{
  public abstract class FixedSizeReceiveFilter<TPackageInfo> : 
    IReceiveFilter<TPackageInfo>,
    IPackageResolver<TPackageInfo>
    where TPackageInfo : IPackageInfo
  {
    private int m_OriginalSize;
    private int m_Size;

    protected int Size => this.m_Size;

    public FixedSizeReceiveFilter(int size)
    {
      this.m_OriginalSize = size;
      this.m_Size = size;
    }

    public virtual TPackageInfo Filter(BufferList data, out int rest)
    {
      rest = 0;
      int total = data.Total;
      if (total < this.m_Size)
        return default (TPackageInfo);
      if (total > this.m_Size)
      {
        rest = total - this.m_Size;
        data.SetLastItemLength(data.Last.Count - rest);
      }
      BufferStream bufferStream = this.GetBufferStream<TPackageInfo>((IList<ArraySegment<byte>>) data);
      return !this.CanResolvePackage((IBufferStream) bufferStream) ? default (TPackageInfo) : this.ResolvePackage((IBufferStream) bufferStream);
    }

    public IReceiveFilter<TPackageInfo> NextReceiveFilter { get; protected set; }

    public FilterState State { get; protected set; }

    protected void ResetSize(int newSize) => this.m_Size = newSize;

    public virtual void Reset()
    {
      if (this.m_Size != this.m_OriginalSize)
        this.m_Size = this.m_OriginalSize;
      this.NextReceiveFilter = (IReceiveFilter<TPackageInfo>) null;
      this.State = FilterState.Normal;
    }

    protected virtual bool CanResolvePackage(IBufferStream bufferStream) => true;

    public abstract TPackageInfo ResolvePackage(IBufferStream bufferStream);
  }
}
