// Decompiled with JetBrains decompiler
// Type: SmartAssembly.Zip.SimpleZip1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.SmartExceptionsCore;
using System;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;

namespace SmartAssembly.Zip
{
  public class SimpleZip1
  {
    public static string ExceptionMessage;

    private static bool PublicKeysMatch(Assembly executingAssembly, Assembly callingAssembly)
    {
      byte[] publicKey1;
      byte[] publicKey2;
      int index;
      try
      {
        publicKey1 = executingAssembly.GetName().GetPublicKey();
        publicKey2 = callingAssembly.GetName().GetPublicKey();
        if (publicKey2 == null != (publicKey1 == null))
          return false;
        if (publicKey2 != null)
        {
          for (index = 0; index < publicKey2.Length; ++index)
          {
            if ((int) publicKey2[index] != (int) publicKey1[index])
              return false;
          }
        }
        return true;
      }
      catch (Exception ex)
      {
        byte[] o1 = publicKey1;
        byte[] o2 = publicKey2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) index;
        Assembly o4 = executingAssembly;
        Assembly o5 = callingAssembly;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    public static byte[] Unzip(byte[] buffer)
    {
      Assembly callingAssembly;
      Assembly executingAssembly;
      SimpleZip1.ZipStream zipStream;
      byte[] buf;
      int num1;
      short num2;
      int num3;
      int num4;
      int length1;
      int count1;
      int count2;
      byte[] buffer1;
      byte[] buffer2;
      byte[] numArray1;
      SimpleZip1.Inflater inflater1;
      int num5;
      int length2;
      int offset;
      int length3;
      int len;
      byte[] numArray2;
      SimpleZip1.Inflater inflater2;
      byte[] key1;
      byte[] iv1;
      DESCryptoIndirector1 cryptoIndirector1_1;
      ICryptoTransform desCryptoTransform;
      byte[] buffer3;
      byte[] key2;
      byte[] iv2;
      AESCryptoIndirector1 cryptoIndirector1_2;
      ICryptoTransform aesCryptoTransform;
      byte[] buffer4;
      try
      {
        callingAssembly = Assembly.GetCallingAssembly();
        executingAssembly = Assembly.GetExecutingAssembly();
        if ((object) callingAssembly != (object) executingAssembly && !SimpleZip1.PublicKeysMatch(executingAssembly, callingAssembly))
          return (byte[]) null;
        zipStream = new SimpleZip1.ZipStream(buffer);
        buf = new byte[0];
        num1 = zipStream.ReadInt();
        if (num1 == 67324752)
        {
          num2 = (short) zipStream.ReadShort();
          num3 = zipStream.ReadShort();
          num4 = zipStream.ReadShort();
          if (num1 != 67324752 || num2 != (short) 20 || num3 != 0 || num4 != 8)
            throw new FormatException("Wrong Header Signature");
          zipStream.ReadInt();
          zipStream.ReadInt();
          zipStream.ReadInt();
          length1 = zipStream.ReadInt();
          count1 = zipStream.ReadShort();
          count2 = zipStream.ReadShort();
          if (count1 > 0)
          {
            buffer1 = new byte[count1];
            zipStream.Read(buffer1, 0, count1);
          }
          if (count2 > 0)
          {
            buffer2 = new byte[count2];
            zipStream.Read(buffer2, 0, count2);
          }
          numArray1 = new byte[zipStream.Length - zipStream.Position];
          zipStream.Read(numArray1, 0, numArray1.Length);
          inflater1 = new SimpleZip1.Inflater(numArray1);
          buf = new byte[length1];
          inflater1.Inflate(buf, 0, buf.Length);
          numArray1 = (byte[]) null;
        }
        else
        {
          num5 = num1 >> 24;
          num1 -= num5 << 24;
          if (num1 != 8223355)
            throw new FormatException("Unknown Header");
          if (num5 == 1)
          {
            length2 = zipStream.ReadInt();
            buf = new byte[length2];
            for (offset = 0; offset < length2; offset += len)
            {
              length3 = zipStream.ReadInt();
              len = zipStream.ReadInt();
              numArray2 = new byte[length3];
              zipStream.Read(numArray2, 0, numArray2.Length);
              inflater2 = new SimpleZip1.Inflater(numArray2);
              inflater2.Inflate(buf, offset, len);
            }
          }
          if (num5 == 2)
          {
            key1 = new byte[8]
            {
              (byte) 183,
              (byte) 30,
              (byte) 59,
              (byte) 129,
              (byte) 136,
              (byte) 35,
              (byte) 62,
              (byte) 2
            };
            iv1 = new byte[8]
            {
              (byte) 148,
              (byte) 224,
              (byte) 22,
              (byte) 235,
              (byte) 143,
              (byte) 222,
              (byte) 24,
              (byte) 199
            };
            cryptoIndirector1_1 = new DESCryptoIndirector1();
            try
            {
              desCryptoTransform = cryptoIndirector1_1.GetDESCryptoTransform(key1, iv1, true);
              try
              {
                buffer3 = desCryptoTransform.TransformFinalBlock(buffer, 4, buffer.Length - 4);
                buf = SimpleZip1.Unzip(buffer3);
              }
              finally
              {
                desCryptoTransform?.Dispose();
              }
            }
            finally
            {
              cryptoIndirector1_1?.Dispose();
            }
          }
          if (num5 == 3)
          {
            key2 = new byte[16]
            {
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1
            };
            iv2 = new byte[16]
            {
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2
            };
            cryptoIndirector1_2 = new AESCryptoIndirector1();
            try
            {
              aesCryptoTransform = cryptoIndirector1_2.GetAESCryptoTransform(key2, iv2, true);
              try
              {
                buffer4 = aesCryptoTransform.TransformFinalBlock(buffer, 4, buffer.Length - 4);
                buf = SimpleZip1.Unzip(buffer4);
              }
              finally
              {
                aesCryptoTransform?.Dispose();
              }
            }
            finally
            {
              cryptoIndirector1_2?.Dispose();
            }
          }
        }
        zipStream.Close();
        return buf;
      }
      catch (Exception ex)
      {
        object[] objects = new object[33]
        {
          (object) callingAssembly,
          (object) executingAssembly,
          (object) zipStream,
          (object) buf,
          (object) num1,
          (object) num2,
          (object) num3,
          (object) num4,
          (object) length1,
          (object) count1,
          (object) count2,
          (object) buffer1,
          (object) buffer2,
          (object) numArray1,
          (object) inflater1,
          (object) num5,
          (object) length2,
          (object) offset,
          (object) length3,
          (object) len,
          (object) inflater2,
          (object) numArray2,
          (object) key1,
          (object) iv1,
          (object) cryptoIndirector1_1,
          (object) desCryptoTransform,
          (object) buffer3,
          (object) key2,
          (object) iv2,
          (object) cryptoIndirector1_2,
          (object) aesCryptoTransform,
          (object) buffer4,
          (object) buffer
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public static byte[] Zip(byte[] buffer)
    {
      try
      {
        return SimpleZip1.Zip(buffer, 1, (byte[]) null, (byte[]) null);
      }
      catch (Exception ex)
      {
        byte[] o1 = buffer;
        StackFrameHelper.CreateException1(ex, (object) o1);
        throw;
      }
    }

    public static byte[] ZipAndEncrypt(byte[] buffer, byte[] key, byte[] iv)
    {
      try
      {
        return SimpleZip1.Zip(buffer, 2, key, iv);
      }
      catch (Exception ex)
      {
        byte[] o1 = buffer;
        byte[] o2 = key;
        byte[] o3 = iv;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    public static byte[] ZipAndAES(byte[] buffer, byte[] key, byte[] iv)
    {
      try
      {
        return SimpleZip1.Zip(buffer, 3, key, iv);
      }
      catch (Exception ex)
      {
        byte[] o1 = buffer;
        byte[] o2 = key;
        byte[] o3 = iv;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    private static byte[] Zip(byte[] buffer, int version, byte[] key, byte[] iv)
    {
      SimpleZip1.ZipStream zipStream;
      SimpleZip1.Deflater deflater1;
      DateTime now;
      long num1;
      uint[] numArray1;
      uint maxValue;
      uint num2;
      int num3;
      int length;
      long position1;
      byte[] bytes;
      byte[] numArray2;
      int count1;
      byte[] numArray3;
      int count2;
      long totalOut;
      int srcOffset;
      byte[] numArray4;
      long position2;
      SimpleZip1.Deflater deflater2;
      byte[] numArray5;
      int count3;
      byte[] numArray6;
      int count4;
      long position3;
      byte[] inputBuffer1;
      DESCryptoIndirector1 cryptoIndirector1_1;
      ICryptoTransform desCryptoTransform;
      byte[] buffer1;
      byte[] inputBuffer2;
      AESCryptoIndirector1 cryptoIndirector1_2;
      ICryptoTransform aesCryptoTransform;
      byte[] buffer2;
      try
      {
        byte[] array;
        try
        {
          zipStream = new SimpleZip1.ZipStream();
          switch (version)
          {
            case 0:
              deflater1 = new SimpleZip1.Deflater();
              now = DateTime.Now;
              num1 = (long) ((uint) ((now.Year - 1980 & (int) sbyte.MaxValue) << 25 | now.Month << 21 | now.Day << 16 | now.Hour << 11 | now.Minute << 5) | (uint) now.Second >> 1);
              numArray1 = new uint[256]
              {
                0U,
                1996959894U,
                3993919788U,
                2567524794U,
                124634137U,
                1886057615U,
                3915621685U,
                2657392035U,
                249268274U,
                2044508324U,
                3772115230U,
                2547177864U,
                162941995U,
                2125561021U,
                3887607047U,
                2428444049U,
                498536548U,
                1789927666U,
                4089016648U,
                2227061214U,
                450548861U,
                1843258603U,
                4107580753U,
                2211677639U,
                325883990U,
                1684777152U,
                4251122042U,
                2321926636U,
                335633487U,
                1661365465U,
                4195302755U,
                2366115317U,
                997073096U,
                1281953886U,
                3579855332U,
                2724688242U,
                1006888145U,
                1258607687U,
                3524101629U,
                2768942443U,
                901097722U,
                1119000684U,
                3686517206U,
                2898065728U,
                853044451U,
                1172266101U,
                3705015759U,
                2882616665U,
                651767980U,
                1373503546U,
                3369554304U,
                3218104598U,
                565507253U,
                1454621731U,
                3485111705U,
                3099436303U,
                671266974U,
                1594198024U,
                3322730930U,
                2970347812U,
                795835527U,
                1483230225U,
                3244367275U,
                3060149565U,
                1994146192U,
                31158534U,
                2563907772U,
                4023717930U,
                1907459465U,
                112637215U,
                2680153253U,
                3904427059U,
                2013776290U,
                251722036U,
                2517215374U,
                3775830040U,
                2137656763U,
                141376813U,
                2439277719U,
                3865271297U,
                1802195444U,
                476864866U,
                2238001368U,
                4066508878U,
                1812370925U,
                453092731U,
                2181625025U,
                4111451223U,
                1706088902U,
                314042704U,
                2344532202U,
                4240017532U,
                1658658271U,
                366619977U,
                2362670323U,
                4224994405U,
                1303535960U,
                984961486U,
                2747007092U,
                3569037538U,
                1256170817U,
                1037604311U,
                2765210733U,
                3554079995U,
                1131014506U,
                879679996U,
                2909243462U,
                3663771856U,
                1141124467U,
                855842277U,
                2852801631U,
                3708648649U,
                1342533948U,
                654459306U,
                3188396048U,
                3373015174U,
                1466479909U,
                544179635U,
                3110523913U,
                3462522015U,
                1591671054U,
                702138776U,
                2966460450U,
                3352799412U,
                1504918807U,
                783551873U,
                3082640443U,
                3233442989U,
                3988292384U,
                2596254646U,
                62317068U,
                1957810842U,
                3939845945U,
                2647816111U,
                81470997U,
                1943803523U,
                3814918930U,
                2489596804U,
                225274430U,
                2053790376U,
                3826175755U,
                2466906013U,
                167816743U,
                2097651377U,
                4027552580U,
                2265490386U,
                503444072U,
                1762050814U,
                4150417245U,
                2154129355U,
                426522225U,
                1852507879U,
                4275313526U,
                2312317920U,
                282753626U,
                1742555852U,
                4189708143U,
                2394877945U,
                397917763U,
                1622183637U,
                3604390888U,
                2714866558U,
                953729732U,
                1340076626U,
                3518719985U,
                2797360999U,
                1068828381U,
                1219638859U,
                3624741850U,
                2936675148U,
                906185462U,
                1090812512U,
                3747672003U,
                2825379669U,
                829329135U,
                1181335161U,
                3412177804U,
                3160834842U,
                628085408U,
                1382605366U,
                3423369109U,
                3138078467U,
                570562233U,
                1426400815U,
                3317316542U,
                2998733608U,
                733239954U,
                1555261956U,
                3268935591U,
                3050360625U,
                752459403U,
                1541320221U,
                2607071920U,
                3965973030U,
                1969922972U,
                40735498U,
                2617837225U,
                3943577151U,
                1913087877U,
                83908371U,
                2512341634U,
                3803740692U,
                2075208622U,
                213261112U,
                2463272603U,
                3855990285U,
                2094854071U,
                198958881U,
                2262029012U,
                4057260610U,
                1759359992U,
                534414190U,
                2176718541U,
                4139329115U,
                1873836001U,
                414664567U,
                2282248934U,
                4279200368U,
                1711684554U,
                285281116U,
                2405801727U,
                4167216745U,
                1634467795U,
                376229701U,
                2685067896U,
                3608007406U,
                1308918612U,
                956543938U,
                2808555105U,
                3495958263U,
                1231636301U,
                1047427035U,
                2932959818U,
                3654703836U,
                1088359270U,
                936918000U,
                2847714899U,
                3736837829U,
                1202900863U,
                817233897U,
                3183342108U,
                3401237130U,
                1404277552U,
                615818150U,
                3134207493U,
                3453421203U,
                1423857449U,
                601450431U,
                3009837614U,
                3294710456U,
                1567103746U,
                711928724U,
                3020668471U,
                3272380065U,
                1510334235U,
                755167117U
              };
              maxValue = uint.MaxValue;
              num2 = maxValue;
              num3 = 0;
              length = buffer.Length;
              while (--length >= 0)
                num2 = numArray1[(IntPtr) (uint) (((int) num2 ^ (int) buffer[num3++]) & (int) byte.MaxValue)] ^ num2 >> 8;
              num2 ^= maxValue;
              zipStream.WriteInt(67324752);
              zipStream.WriteShort(20);
              zipStream.WriteShort(0);
              zipStream.WriteShort(8);
              zipStream.WriteInt((int) num1);
              zipStream.WriteInt((int) num2);
              position1 = zipStream.Position;
              zipStream.WriteInt(0);
              zipStream.WriteInt(buffer.Length);
              bytes = Encoding.UTF8.GetBytes("{data}");
              zipStream.WriteShort(bytes.Length);
              zipStream.WriteShort(0);
              zipStream.Write(bytes, 0, bytes.Length);
              deflater1.SetInput(buffer);
              while (!deflater1.IsNeedingInput)
              {
                numArray2 = new byte[512];
                count1 = deflater1.Deflate(numArray2);
                if (count1 > 0)
                  zipStream.Write(numArray2, 0, count1);
                else
                  break;
              }
              deflater1.Finish();
              while (!deflater1.IsFinished)
              {
                numArray3 = new byte[512];
                count2 = deflater1.Deflate(numArray3);
                if (count2 > 0)
                  zipStream.Write(numArray3, 0, count2);
                else
                  break;
              }
              totalOut = deflater1.TotalOut;
              zipStream.WriteInt(33639248);
              zipStream.WriteShort(20);
              zipStream.WriteShort(20);
              zipStream.WriteShort(0);
              zipStream.WriteShort(8);
              zipStream.WriteInt((int) num1);
              zipStream.WriteInt((int) num2);
              zipStream.WriteInt((int) totalOut);
              zipStream.WriteInt(buffer.Length);
              zipStream.WriteShort(bytes.Length);
              zipStream.WriteShort(0);
              zipStream.WriteShort(0);
              zipStream.WriteShort(0);
              zipStream.WriteShort(0);
              zipStream.WriteInt(0);
              zipStream.WriteInt(0);
              zipStream.Write(bytes, 0, bytes.Length);
              zipStream.WriteInt(101010256);
              zipStream.WriteShort(0);
              zipStream.WriteShort(0);
              zipStream.WriteShort(1);
              zipStream.WriteShort(1);
              zipStream.WriteInt(46 + bytes.Length);
              zipStream.WriteInt((int) ((long) (30 + bytes.Length) + totalOut));
              zipStream.WriteShort(0);
              zipStream.Seek(position1, SeekOrigin.Begin);
              zipStream.WriteInt((int) totalOut);
              break;
            case 1:
              zipStream.WriteInt(25000571);
              zipStream.WriteInt(buffer.Length);
              for (srcOffset = 0; srcOffset < buffer.Length; srcOffset += numArray4.Length)
              {
                numArray4 = new byte[Math.Min(2097151, buffer.Length - srcOffset)];
                Buffer.BlockCopy((Array) buffer, srcOffset, (Array) numArray4, 0, numArray4.Length);
                position2 = zipStream.Position;
                zipStream.WriteInt(0);
                zipStream.WriteInt(numArray4.Length);
                deflater2 = new SimpleZip1.Deflater();
                deflater2.SetInput(numArray4);
                while (!deflater2.IsNeedingInput)
                {
                  numArray5 = new byte[512];
                  count3 = deflater2.Deflate(numArray5);
                  if (count3 > 0)
                    zipStream.Write(numArray5, 0, count3);
                  else
                    break;
                }
                deflater2.Finish();
                while (!deflater2.IsFinished)
                {
                  numArray6 = new byte[512];
                  count4 = deflater2.Deflate(numArray6);
                  if (count4 > 0)
                    zipStream.Write(numArray6, 0, count4);
                  else
                    break;
                }
                position3 = zipStream.Position;
                zipStream.Position = position2;
                zipStream.WriteInt((int) deflater2.TotalOut);
                zipStream.Position = position3;
              }
              break;
            case 2:
              zipStream.WriteInt(41777787);
              inputBuffer1 = SimpleZip1.Zip(buffer, 1, (byte[]) null, (byte[]) null);
              cryptoIndirector1_1 = new DESCryptoIndirector1();
              try
              {
                desCryptoTransform = cryptoIndirector1_1.GetDESCryptoTransform(key, iv, false);
                try
                {
                  buffer1 = desCryptoTransform.TransformFinalBlock(inputBuffer1, 0, inputBuffer1.Length);
                  zipStream.Write(buffer1, 0, buffer1.Length);
                  break;
                }
                finally
                {
                  desCryptoTransform?.Dispose();
                }
              }
              finally
              {
                cryptoIndirector1_1?.Dispose();
              }
            case 3:
              zipStream.WriteInt(58555003);
              inputBuffer2 = SimpleZip1.Zip(buffer, 1, (byte[]) null, (byte[]) null);
              cryptoIndirector1_2 = new AESCryptoIndirector1();
              try
              {
                aesCryptoTransform = cryptoIndirector1_2.GetAESCryptoTransform(key, iv, false);
                try
                {
                  buffer2 = aesCryptoTransform.TransformFinalBlock(inputBuffer2, 0, inputBuffer2.Length);
                  zipStream.Write(buffer2, 0, buffer2.Length);
                  break;
                }
                finally
                {
                  aesCryptoTransform?.Dispose();
                }
              }
              finally
              {
                cryptoIndirector1_2?.Dispose();
              }
          }
          zipStream.Flush();
          zipStream.Close();
          array = zipStream.ToArray();
        }
        catch (Exception ex)
        {
          SimpleZip1.ExceptionMessage = "ERR 2003: " + ex.Message;
          throw;
        }
        return array;
      }
      catch (Exception ex)
      {
        byte[] numArray7;
        object[] objects = new object[39]
        {
          (object) zipStream,
          (object) deflater1,
          (object) now,
          (object) num1,
          (object) numArray1,
          (object) maxValue,
          (object) num2,
          (object) num3,
          (object) length,
          (object) position1,
          (object) bytes,
          (object) numArray2,
          (object) count1,
          (object) numArray3,
          (object) count2,
          (object) totalOut,
          (object) srcOffset,
          (object) numArray4,
          (object) position2,
          (object) deflater2,
          (object) numArray5,
          (object) count3,
          (object) numArray6,
          (object) count4,
          (object) position3,
          (object) inputBuffer1,
          (object) cryptoIndirector1_1,
          (object) desCryptoTransform,
          (object) buffer1,
          (object) inputBuffer2,
          (object) cryptoIndirector1_2,
          (object) aesCryptoTransform,
          (object) buffer2,
          (object) ex,
          (object) numArray7,
          (object) buffer,
          (object) version,
          (object) key,
          (object) iv
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    internal sealed class Inflater
    {
      private const int DECODE_HEADER = 0;
      private const int DECODE_DICT = 1;
      private const int DECODE_BLOCKS = 2;
      private const int DECODE_STORED_LEN1 = 3;
      private const int DECODE_STORED_LEN2 = 4;
      private const int DECODE_STORED = 5;
      private const int DECODE_DYN_HEADER = 6;
      private const int DECODE_HUFFMAN = 7;
      private const int DECODE_HUFFMAN_LENBITS = 8;
      private const int DECODE_HUFFMAN_DIST = 9;
      private const int DECODE_HUFFMAN_DISTBITS = 10;
      private const int DECODE_CHKSUM = 11;
      private const int FINISHED = 12;
      private static readonly int[] CPLENS;
      private static readonly int[] CPLEXT;
      private static readonly int[] CPDIST;
      private static readonly int[] CPDEXT;
      private int mode;
      private int neededBits;
      private int repLength;
      private int repDist;
      private int uncomprLen;
      private bool isLastBlock;
      private SimpleZip1.StreamManipulator input;
      private SimpleZip1.OutputWindow outputWindow;
      private SimpleZip1.InflaterDynHeader dynHeader;
      private SimpleZip1.InflaterHuffmanTree litlenTree;
      private SimpleZip1.InflaterHuffmanTree distTree;

      public Inflater(byte[] bytes)
      {
        try
        {
          this.input = new SimpleZip1.StreamManipulator();
          this.outputWindow = new SimpleZip1.OutputWindow();
          this.mode = 2;
          this.input.SetInput(bytes, 0, bytes.Length);
        }
        catch (Exception ex)
        {
          byte[] o2 = bytes;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      private bool DecodeHuffman()
      {
        int freeSpace;
        int mode;
        int symbol;
        int num1;
        int num2;
        try
        {
          freeSpace = this.outputWindow.GetFreeSpace();
          while (freeSpace >= 258)
          {
            mode = this.mode;
            switch (mode)
            {
              case 7:
                while (((symbol = this.litlenTree.GetSymbol(this.input)) & -256) == 0)
                {
                  this.outputWindow.Write(symbol);
                  if (--freeSpace < 258)
                    return true;
                }
                if (symbol < 257)
                {
                  if (symbol < 0)
                    return false;
                  this.distTree = (SimpleZip1.InflaterHuffmanTree) null;
                  this.litlenTree = (SimpleZip1.InflaterHuffmanTree) null;
                  this.mode = 2;
                  return true;
                }
                this.repLength = SimpleZip1.Inflater.CPLENS[symbol - 257];
                this.neededBits = SimpleZip1.Inflater.CPLEXT[symbol - 257];
                goto case 8;
              case 8:
                if (this.neededBits > 0)
                {
                  this.mode = 8;
                  num1 = this.input.PeekBits(this.neededBits);
                  if (num1 < 0)
                    return false;
                  this.input.DropBits(this.neededBits);
                  this.repLength += num1;
                }
                this.mode = 9;
                goto case 9;
              case 9:
                symbol = this.distTree.GetSymbol(this.input);
                if (symbol < 0)
                  return false;
                this.repDist = SimpleZip1.Inflater.CPDIST[symbol];
                this.neededBits = SimpleZip1.Inflater.CPDEXT[symbol];
                goto case 10;
              case 10:
                if (this.neededBits > 0)
                {
                  this.mode = 10;
                  num2 = this.input.PeekBits(this.neededBits);
                  if (num2 < 0)
                    return false;
                  this.input.DropBits(this.neededBits);
                  this.repDist += num2;
                }
                this.outputWindow.Repeat(this.repLength, this.repDist);
                freeSpace -= this.repLength;
                this.mode = 7;
                continue;
              default:
                continue;
            }
          }
          return true;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) freeSpace;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) symbol;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) mode;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this);
          throw;
        }
      }

      private bool Decode()
      {
        int num1;
        int num2;
        int num3;
        int num4;
        try
        {
          num1 = this.mode;
          switch (num1)
          {
            case 2:
              if (this.isLastBlock)
              {
                this.mode = 12;
                return false;
              }
              num2 = this.input.PeekBits(3);
              if (num2 < 0)
                return false;
              this.input.DropBits(3);
              if ((num2 & 1) != 0)
                this.isLastBlock = true;
              num1 = num2 >> 1;
              switch (num1)
              {
                case 0:
                  this.input.SkipToByteBoundary();
                  this.mode = 3;
                  break;
                case 1:
                  this.litlenTree = SimpleZip1.InflaterHuffmanTree.defLitLenTree;
                  this.distTree = SimpleZip1.InflaterHuffmanTree.defDistTree;
                  this.mode = 7;
                  break;
                case 2:
                  this.dynHeader = new SimpleZip1.InflaterDynHeader();
                  this.mode = 6;
                  break;
              }
              return true;
            case 3:
              this.uncomprLen = num1 = this.input.PeekBits(16);
              if (num1 < 0)
                return false;
              this.input.DropBits(16);
              this.mode = 4;
              goto case 4;
            case 4:
              num3 = this.input.PeekBits(16);
              if (num3 < 0)
                return false;
              this.input.DropBits(16);
              this.mode = 5;
              goto case 5;
            case 5:
              num4 = this.outputWindow.CopyStored(this.input, this.uncomprLen);
              this.uncomprLen -= num4;
              if (this.uncomprLen != 0)
                return !this.input.IsNeedingInput;
              this.mode = 2;
              return true;
            case 6:
              if (!this.dynHeader.Decode(this.input))
                return false;
              this.litlenTree = this.dynHeader.BuildLitLenTree();
              this.distTree = this.dynHeader.BuildDistTree();
              this.mode = 7;
              goto case 7;
            case 7:
            case 8:
            case 9:
            case 10:
              return this.DecodeHuffman();
            case 12:
              return false;
            default:
              return false;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num1;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
          throw;
        }
      }

      public int Inflate(byte[] buf, int offset, int len)
      {
        int num1;
        int num2;
        try
        {
          num1 = 0;
          do
          {
            if (this.mode != 11)
            {
              num2 = this.outputWindow.CopyOutput(buf, offset, len);
              offset += num2;
              num1 += num2;
              len -= num2;
              if (len == 0)
                return num1;
            }
          }
          while (this.Decode() || this.outputWindow.GetAvailable() > 0 && this.mode != 11);
          return num1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          byte[] o4 = buf;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) len;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5, (object) o6);
          throw;
        }
      }

      static Inflater()
      {
        try
        {
          SimpleZip1.Inflater.CPLENS = new int[29]
          {
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            13,
            15,
            17,
            19,
            23,
            27,
            31,
            35,
            43,
            51,
            59,
            67,
            83,
            99,
            115,
            131,
            163,
            195,
            227,
            258
          };
          SimpleZip1.Inflater.CPLEXT = new int[29]
          {
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
            5,
            5,
            5,
            5,
            0
          };
          SimpleZip1.Inflater.CPDIST = new int[30]
          {
            1,
            2,
            3,
            4,
            5,
            7,
            9,
            13,
            17,
            25,
            33,
            49,
            65,
            97,
            129,
            193,
            257,
            385,
            513,
            769,
            1025,
            1537,
            2049,
            3073,
            4097,
            6145,
            8193,
            12289,
            16385,
            24577
          };
          SimpleZip1.Inflater.CPDEXT = new int[30]
          {
            0,
            0,
            0,
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            4,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            8,
            8,
            9,
            9,
            10,
            10,
            11,
            11,
            12,
            12,
            13,
            13
          };
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
    }

    internal sealed class StreamManipulator
    {
      private byte[] window;
      private int window_start = 0;
      private int window_end = 0;
      private uint buffer = 0;
      private int bits_in_buffer = 0;

      public int PeekBits(int n)
      {
        int num1;
        try
        {
          if (this.bits_in_buffer < n)
          {
            if (this.window_start == this.window_end)
              return -1;
            SimpleZip1.StreamManipulator streamManipulator = this;
            int buffer = (int) streamManipulator.buffer;
            byte[] window1 = this.window;
            num1 = this.window_start++;
            int index1 = num1;
            int num2 = (int) window1[index1] & (int) byte.MaxValue;
            byte[] window2 = this.window;
            num1 = this.window_start++;
            int index2 = num1;
            int num3 = ((int) window2[index2] & (int) byte.MaxValue) << 8;
            int num4 = (num2 | num3) << this.bits_in_buffer;
            streamManipulator.buffer = (uint) (buffer | num4);
            this.bits_in_buffer += 16;
          }
          return (int) ((long) this.buffer & (long) ((1 << n) - 1));
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) n;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      public void DropBits(int n)
      {
        try
        {
          this.buffer >>= n;
          this.bits_in_buffer -= n;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) n;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      public int AvailableBits
      {
        get
        {
          try
          {
            return this.bits_in_buffer;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
      }

      public int AvailableBytes
      {
        get
        {
          try
          {
            return this.window_end - this.window_start + (this.bits_in_buffer >> 3);
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
      }

      public void SkipToByteBoundary()
      {
        try
        {
          this.buffer >>= this.bits_in_buffer & 7;
          this.bits_in_buffer &= -8;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      public bool IsNeedingInput
      {
        get
        {
          try
          {
            return this.window_start == this.window_end;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
      }

      public int CopyBytes(byte[] output, int offset, int length)
      {
        int num1;
        int num2;
        int num3;
        try
        {
          num1 = 0;
          while (this.bits_in_buffer > 0 && length > 0)
          {
            output[offset++] = (byte) this.buffer;
            this.buffer >>= 8;
            this.bits_in_buffer -= 8;
            --length;
            ++num1;
          }
          if (length == 0)
            return num1;
          num2 = this.window_end - this.window_start;
          if (length > num2)
            length = num2;
          Array.Copy((Array) this.window, this.window_start, (Array) output, offset, length);
          this.window_start += length;
          if ((this.window_start - this.window_end & 1) != 0)
          {
            byte[] window = this.window;
            num3 = this.window_start++;
            int index = num3;
            this.buffer = (uint) window[index] & (uint) byte.MaxValue;
            this.bits_in_buffer = 8;
          }
          return num1 + length;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num3;
          byte[] o5 = output;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) length;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6, (object) o7);
          throw;
        }
      }

      public void Reset()
      {
        int num;
        try
        {
          this.bits_in_buffer = num = 0;
          this.window_end = num = num;
          this.window_start = num = num;
          this.buffer = (uint) num;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public void SetInput(byte[] buf, int off, int len)
      {
        int num;
        try
        {
          if (this.window_start < this.window_end)
            throw new InvalidOperationException();
          num = off + len;
          if (0 > off || off > num || num > buf.Length)
            throw new ArgumentOutOfRangeException();
          if ((len & 1) != 0)
          {
            this.buffer |= (uint) (((int) buf[off++] & (int) byte.MaxValue) << this.bits_in_buffer);
            this.bits_in_buffer += 8;
          }
          this.window = buf;
          this.window_start = off;
          this.window_end = num;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          byte[] o3 = buf;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) off;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) len;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }
    }

    internal sealed class OutputWindow
    {
      private const int WINDOW_SIZE = 32768;
      private const int WINDOW_MASK = 32767;
      private byte[] window = new byte[32768];
      private int windowEnd = 0;
      private int windowFilled = 0;

      public void Write(int abyte)
      {
        int num1;
        try
        {
          num1 = this.windowFilled++;
          if (num1 == 32768)
            throw new InvalidOperationException();
          byte[] window = this.window;
          num1 = this.windowEnd++;
          int index = num1;
          int num2 = (int) (byte) abyte;
          window[index] = (byte) num2;
          this.windowEnd &= (int) short.MaxValue;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) abyte;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      private void SlowRepeat(int repStart, int len, int dist)
      {
        int num1;
        try
        {
          while (len-- > 0)
          {
            byte[] window = this.window;
            num1 = this.windowEnd++;
            int index = num1;
            int num2 = (int) this.window[repStart++];
            window[index] = (byte) num2;
            this.windowEnd &= (int) short.MaxValue;
            repStart &= (int) short.MaxValue;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) repStart;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) len;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) dist;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }

      public void Repeat(int len, int dist)
      {
        int num1;
        int num2;
        int num3;
        try
        {
          num1 = (this.windowFilled += len);
          if (num1 > 32768)
            throw new InvalidOperationException();
          num2 = this.windowEnd - dist & (int) short.MaxValue;
          num3 = 32768 - len;
          if (num2 <= num3 && this.windowEnd < num3)
          {
            if (len <= dist)
            {
              Array.Copy((Array) this.window, num2, (Array) this.window, this.windowEnd, len);
              this.windowEnd += len;
            }
            else
            {
              while (len-- > 0)
              {
                byte[] window = this.window;
                num1 = this.windowEnd++;
                int index = num1;
                int num4 = (int) this.window[num2++];
                window[index] = (byte) num4;
              }
            }
          }
          else
            this.SlowRepeat(num2, len, dist);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) len;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) dist;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6);
          throw;
        }
      }

      public int CopyStored(SimpleZip1.StreamManipulator input, int len)
      {
        int length;
        int num;
        try
        {
          len = Math.Min(Math.Min(len, 32768 - this.windowFilled), input.AvailableBytes);
          length = 32768 - this.windowEnd;
          if (len > length)
          {
            num = input.CopyBytes(this.window, this.windowEnd, length);
            if (num == length)
              num += input.CopyBytes(this.window, 0, len - length);
          }
          else
            num = input.CopyBytes(this.window, this.windowEnd, len);
          this.windowEnd = this.windowEnd + num & (int) short.MaxValue;
          this.windowFilled += num;
          return num;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) length;
          SimpleZip1.StreamManipulator o4 = input;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) len;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5);
          throw;
        }
      }

      public void CopyDict(byte[] dict, int offset, int len)
      {
        try
        {
          if (this.windowFilled > 0)
            throw new InvalidOperationException();
          if (len > 32768)
          {
            offset += len - 32768;
            len = 32768;
          }
          Array.Copy((Array) dict, offset, (Array) this.window, 0, len);
          this.windowEnd = len & (int) short.MaxValue;
        }
        catch (Exception ex)
        {
          byte[] o2 = dict;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) len;
          StackFrameHelper.CreateException4(ex, (object) this, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }

      public int GetFreeSpace()
      {
        try
        {
          return 32768 - this.windowFilled;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      public int GetAvailable()
      {
        try
        {
          return this.windowFilled;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      public int CopyOutput(byte[] output, int offset, int len)
      {
        int num1;
        int num2;
        int length;
        try
        {
          num1 = this.windowEnd;
          if (len > this.windowFilled)
            len = this.windowFilled;
          else
            num1 = this.windowEnd - this.windowFilled + len & (int) short.MaxValue;
          num2 = len;
          length = len - num1;
          if (length > 0)
          {
            Array.Copy((Array) this.window, 32768 - length, (Array) output, offset, length);
            offset += length;
            len = num1;
          }
          Array.Copy((Array) this.window, num1 - len, (Array) output, offset, len);
          this.windowFilled -= num2;
          if (this.windowFilled < 0)
            throw new InvalidOperationException();
          return num2;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) length;
          byte[] o5 = output;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) len;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6, (object) o7);
          throw;
        }
      }

      public void Reset()
      {
        int num;
        try
        {
          this.windowEnd = num = 0;
          this.windowFilled = num;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
    }

    internal sealed class InflaterHuffmanTree
    {
      private const int MAX_BITLEN = 15;
      private short[] tree;
      public static readonly SimpleZip1.InflaterHuffmanTree defLitLenTree;
      public static readonly SimpleZip1.InflaterHuffmanTree defDistTree;

      static InflaterHuffmanTree()
      {
        byte[] codeLengths;
        int num;
        try
        {
          codeLengths = new byte[288];
          num = 0;
          while (num < 144)
            codeLengths[num++] = (byte) 8;
          while (num < 256)
            codeLengths[num++] = (byte) 9;
          while (num < 280)
            codeLengths[num++] = (byte) 7;
          while (num < 288)
            codeLengths[num++] = (byte) 8;
          SimpleZip1.InflaterHuffmanTree.defLitLenTree = new SimpleZip1.InflaterHuffmanTree(codeLengths);
          codeLengths = new byte[32];
          num = 0;
          while (num < 32)
            codeLengths[num++] = (byte) 5;
          SimpleZip1.InflaterHuffmanTree.defDistTree = new SimpleZip1.InflaterHuffmanTree(codeLengths);
        }
        catch (Exception ex)
        {
          byte[] o1 = codeLengths;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
          throw;
        }
      }

      public InflaterHuffmanTree(byte[] codeLengths)
      {
        try
        {
          this.BuildTree(codeLengths);
        }
        catch (Exception ex)
        {
          byte[] o2 = codeLengths;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      private void BuildTree(byte[] codeLengths)
      {
        int[] numArray1;
        int[] numArray2;
        int index1;
        int codeLength1;
        int[] numArray3;
        IntPtr index2;
        int toReverse1;
        int length;
        int index3;
        int num1;
        int num2;
        int num3;
        int index4;
        int num4;
        int num5;
        int toReverse2;
        int index5;
        int codeLength2;
        int index6;
        int num6;
        int num7;
        try
        {
          numArray1 = new int[16];
          numArray2 = new int[16];
          for (index1 = 0; index1 < codeLengths.Length; ++index1)
          {
            codeLength1 = (int) codeLengths[index1];
            if (codeLength1 > 0)
              (numArray3 = numArray1)[(int) (index2 = (IntPtr) codeLength1)] = numArray3[index2] + 1;
          }
          toReverse1 = 0;
          length = 512;
          for (index3 = 1; index3 <= 15; ++index3)
          {
            numArray2[index3] = toReverse1;
            toReverse1 += numArray1[index3] << 16 - index3;
            if (index3 >= 10)
            {
              num1 = numArray2[index3] & 130944;
              num2 = toReverse1 & 130944;
              length += num2 - num1 >> 16 - index3;
            }
          }
          this.tree = new short[length];
          num3 = 512;
          for (index4 = 15; index4 >= 10; --index4)
          {
            num4 = toReverse1 & 130944;
            toReverse1 -= numArray1[index4] << 16 - index4;
            num5 = toReverse1 & 130944;
            for (toReverse2 = num5; toReverse2 < num4; toReverse2 += 128)
            {
              this.tree[(int) SimpleZip1.DeflaterHuffman.BitReverse(toReverse2)] = (short) (-num3 << 4 | index4);
              num3 += 1 << index4 - 9;
            }
          }
          for (index5 = 0; index5 < codeLengths.Length; ++index5)
          {
            codeLength2 = (int) codeLengths[index5];
            if (codeLength2 != 0)
            {
              toReverse1 = numArray2[codeLength2];
              index6 = (int) SimpleZip1.DeflaterHuffman.BitReverse(toReverse1);
              if (codeLength2 <= 9)
              {
                do
                {
                  this.tree[index6] = (short) (index5 << 4 | codeLength2);
                  index6 += 1 << codeLength2;
                }
                while (index6 < 512);
              }
              else
              {
                num6 = (int) this.tree[index6 & 511];
                num7 = 1 << (num6 & 15);
                num6 = -(num6 >> 4);
                do
                {
                  this.tree[num6 | index6 >> 9] = (short) (index5 << 4 | codeLength2);
                  index6 += 1 << codeLength2;
                }
                while (index6 < num7);
              }
              numArray2[codeLength2] = toReverse1 + (1 << 16 - codeLength2);
            }
          }
        }
        catch (Exception ex)
        {
          object[] objects = new object[23]
          {
            (object) numArray1,
            (object) numArray2,
            (object) index1,
            (object) codeLength1,
            (object) toReverse1,
            (object) length,
            (object) index3,
            (object) num1,
            (object) num2,
            (object) num3,
            (object) index4,
            (object) num4,
            (object) num5,
            (object) toReverse2,
            (object) index5,
            (object) codeLength2,
            (object) index6,
            (object) num6,
            (object) num7,
            (object) numArray3,
            (object) index2,
            (object) this,
            (object) codeLengths
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public int GetSymbol(SimpleZip1.StreamManipulator input)
      {
        int index;
        int num1;
        int num2;
        int n;
        int availableBits1;
        int availableBits2;
        try
        {
          if ((index = input.PeekBits(9)) >= 0)
          {
            if ((num1 = (int) this.tree[index]) >= 0)
            {
              input.DropBits(num1 & 15);
              return num1 >> 4;
            }
            num2 = -(num1 >> 4);
            n = num1 & 15;
            if ((index = input.PeekBits(n)) >= 0)
            {
              num1 = (int) this.tree[num2 | index >> 9];
              input.DropBits(num1 & 15);
              return num1 >> 4;
            }
            availableBits1 = input.AvailableBits;
            index = input.PeekBits(availableBits1);
            num1 = (int) this.tree[num2 | index >> 9];
            if ((num1 & 15) > availableBits1)
              return -1;
            input.DropBits(num1 & 15);
            return num1 >> 4;
          }
          availableBits2 = input.AvailableBits;
          index = input.PeekBits(availableBits2);
          num1 = (int) this.tree[index];
          if (num1 < 0 || (num1 & 15) > availableBits2)
            return -1;
          input.DropBits(num1 & 15);
          return num1 >> 4;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) n;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) availableBits1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) availableBits2;
          SimpleZip1.StreamManipulator o8 = input;
          StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
          throw;
        }
      }
    }

    internal sealed class InflaterDynHeader
    {
      private const int LNUM = 0;
      private const int DNUM = 1;
      private const int BLNUM = 2;
      private const int BLLENS = 3;
      private const int LENS = 4;
      private const int REPS = 5;
      private static readonly int[] repMin;
      private static readonly int[] repBits;
      private byte[] blLens;
      private byte[] litdistLens;
      private SimpleZip1.InflaterHuffmanTree blTree;
      private int mode;
      private int lnum;
      private int dnum;
      private int blnum;
      private int num;
      private int repSymbol;
      private byte lastLen;
      private int ptr;
      private static readonly int[] BL_ORDER;

      public bool Decode(SimpleZip1.StreamManipulator input)
      {
        int num1;
        int num2;
        int symbol;
        byte num3;
        int repBit;
        int num4;
        try
        {
          while (true)
          {
            num1 = this.mode;
            switch (num1)
            {
              case 0:
                this.lnum = input.PeekBits(5);
                if (this.lnum >= 0)
                {
                  this.lnum += 257;
                  input.DropBits(5);
                  this.mode = 1;
                  goto case 1;
                }
                else
                  goto label_2;
              case 1:
                this.dnum = input.PeekBits(5);
                if (this.dnum >= 0)
                {
                  ++this.dnum;
                  input.DropBits(5);
                  this.num = this.lnum + this.dnum;
                  this.litdistLens = new byte[this.num];
                  this.mode = 2;
                  goto case 2;
                }
                else
                  goto label_5;
              case 2:
                this.blnum = input.PeekBits(4);
                if (this.blnum >= 0)
                {
                  this.blnum += 4;
                  input.DropBits(4);
                  this.blLens = new byte[19];
                  this.ptr = 0;
                  this.mode = 3;
                  goto case 3;
                }
                else
                  goto label_8;
              case 3:
                for (; this.ptr < this.blnum; ++this.ptr)
                {
                  num2 = input.PeekBits(3);
                  if (num2 < 0)
                    return false;
                  input.DropBits(3);
                  this.blLens[SimpleZip1.InflaterDynHeader.BL_ORDER[this.ptr]] = (byte) num2;
                }
                this.blTree = new SimpleZip1.InflaterHuffmanTree(this.blLens);
                this.blLens = (byte[]) null;
                this.ptr = 0;
                this.mode = 4;
                goto case 4;
              case 4:
                while (((symbol = this.blTree.GetSymbol(input)) & -16) == 0)
                {
                  byte[] litdistLens = this.litdistLens;
                  num1 = this.ptr++;
                  int index = num1;
                  this.lastLen = num3 = (byte) symbol;
                  int num5 = (int) num3;
                  litdistLens[index] = (byte) num5;
                  if (this.ptr == this.num)
                    return true;
                }
                if (symbol >= 0)
                {
                  if (symbol >= 17)
                    this.lastLen = (byte) 0;
                  this.repSymbol = symbol - 16;
                  this.mode = 5;
                  goto case 5;
                }
                else
                  goto label_19;
              case 5:
                repBit = SimpleZip1.InflaterDynHeader.repBits[this.repSymbol];
                num4 = input.PeekBits(repBit);
                if (num4 >= 0)
                {
                  input.DropBits(repBit);
                  num4 += SimpleZip1.InflaterDynHeader.repMin[this.repSymbol];
                  while (num4-- > 0)
                  {
                    byte[] litdistLens = this.litdistLens;
                    num1 = this.ptr++;
                    int index = num1;
                    int lastLen = (int) this.lastLen;
                    litdistLens[index] = (byte) lastLen;
                  }
                  if (this.ptr != this.num)
                  {
                    this.mode = 4;
                    continue;
                  }
                  goto label_29;
                }
                else
                  goto label_24;
              default:
                continue;
            }
          }
label_2:
          return false;
label_5:
          return false;
label_8:
          return false;
label_19:
          return false;
label_24:
          return false;
label_29:
          return true;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) symbol;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) repBit;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<byte> o6 = (ValueType) num3;
          SimpleZip1.StreamManipulator o8 = input;
          StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
          throw;
        }
      }

      public SimpleZip1.InflaterHuffmanTree BuildLitLenTree()
      {
        byte[] numArray;
        try
        {
          numArray = new byte[this.lnum];
          Array.Copy((Array) this.litdistLens, 0, (Array) numArray, 0, this.lnum);
          return new SimpleZip1.InflaterHuffmanTree(numArray);
        }
        catch (Exception ex)
        {
          byte[] o1 = numArray;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public SimpleZip1.InflaterHuffmanTree BuildDistTree()
      {
        byte[] numArray;
        try
        {
          numArray = new byte[this.dnum];
          Array.Copy((Array) this.litdistLens, this.lnum, (Array) numArray, 0, this.dnum);
          return new SimpleZip1.InflaterHuffmanTree(numArray);
        }
        catch (Exception ex)
        {
          byte[] o1 = numArray;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      static InflaterDynHeader()
      {
        try
        {
          SimpleZip1.InflaterDynHeader.repMin = new int[3]
          {
            3,
            3,
            11
          };
          SimpleZip1.InflaterDynHeader.repBits = new int[3]
          {
            2,
            3,
            7
          };
          SimpleZip1.InflaterDynHeader.BL_ORDER = new int[19]
          {
            16,
            17,
            18,
            0,
            8,
            7,
            9,
            6,
            10,
            5,
            11,
            4,
            12,
            3,
            13,
            2,
            14,
            1,
            15
          };
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
    }

    internal sealed class Deflater
    {
      private const int IS_FLUSHING = 4;
      private const int IS_FINISHING = 8;
      private const int BUSY_STATE = 16;
      private const int FLUSHING_STATE = 20;
      private const int FINISHING_STATE = 28;
      private const int FINISHED_STATE = 30;
      private int state = 16;
      private long totalOut = 0;
      private SimpleZip1.DeflaterPending pending;
      private SimpleZip1.DeflaterEngine engine;

      public Deflater()
      {
        try
        {
          this.pending = new SimpleZip1.DeflaterPending();
          this.engine = new SimpleZip1.DeflaterEngine(this.pending);
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      public long TotalOut
      {
        get
        {
          try
          {
            return this.totalOut;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
      }

      public void Finish()
      {
        try
        {
          this.state |= 12;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      public bool IsFinished
      {
        get
        {
          try
          {
            return this.state == 30 && this.pending.IsFlushed;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
      }

      public bool IsNeedingInput
      {
        get
        {
          try
          {
            return this.engine.NeedsInput();
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
      }

      public void SetInput(byte[] buffer)
      {
        try
        {
          this.engine.SetInput(buffer);
        }
        catch (Exception ex)
        {
          byte[] o2 = buffer;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      public int Deflate(byte[] output)
      {
        int offset;
        int length;
        int num1;
        int num2;
        int num3;
        try
        {
          offset = 0;
          length = output.Length;
          num1 = length;
          while (true)
          {
            do
            {
              do
              {
                num2 = this.pending.Flush(output, offset, length);
                offset += num2;
                this.totalOut += (long) num2;
                length -= num2;
                if (length == 0 || this.state == 30)
                  goto label_12;
              }
              while (this.engine.Deflate((this.state & 4) != 0, (this.state & 8) != 0));
              if (this.state == 16)
                return num1 - length;
              if (this.state == 20)
              {
                for (num3 = 8 + (-this.pending.BitCount & 7); num3 > 0; num3 -= 10)
                  this.pending.WriteBits(2, 10);
                this.state = 16;
              }
            }
            while (this.state != 28);
            this.pending.AlignToByte();
            this.state = 30;
          }
label_12:
          return num1 - length;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) length;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num3;
          byte[] o7 = output;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7);
          throw;
        }
      }
    }

    internal sealed class DeflaterHuffman
    {
      private const int BUFSIZE = 16384;
      private const int LITERAL_NUM = 286;
      private const int DIST_NUM = 30;
      private const int BITLEN_NUM = 19;
      private const int REP_3_6 = 16;
      private const int REP_3_10 = 17;
      private const int REP_11_138 = 18;
      private const int EOF_SYMBOL = 256;
      private static readonly int[] BL_ORDER;
      private static readonly byte[] bit4Reverse;
      private SimpleZip1.DeflaterPending pending;
      private SimpleZip1.DeflaterHuffman.Tree literalTree;
      private SimpleZip1.DeflaterHuffman.Tree distTree;
      private SimpleZip1.DeflaterHuffman.Tree blTree;
      private short[] d_buf;
      private byte[] l_buf;
      private int last_lit;
      private int extra_bits;
      private static readonly short[] staticLCodes;
      private static readonly byte[] staticLLength;
      private static readonly short[] staticDCodes;
      private static readonly byte[] staticDLength;

      public static short BitReverse(int toReverse)
      {
        try
        {
          return (short) ((int) SimpleZip1.DeflaterHuffman.bit4Reverse[toReverse & 15] << 12 | (int) SimpleZip1.DeflaterHuffman.bit4Reverse[toReverse >> 4 & 15] << 8 | (int) SimpleZip1.DeflaterHuffman.bit4Reverse[toReverse >> 8 & 15] << 4 | (int) SimpleZip1.DeflaterHuffman.bit4Reverse[toReverse >> 12]);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) toReverse;
          StackFrameHelper.CreateException1(ex, (object) o1);
          throw;
        }
      }

      static DeflaterHuffman()
      {
        int index;
        try
        {
          SimpleZip1.DeflaterHuffman.BL_ORDER = new int[19]
          {
            16,
            17,
            18,
            0,
            8,
            7,
            9,
            6,
            10,
            5,
            11,
            4,
            12,
            3,
            13,
            2,
            14,
            1,
            15
          };
          SimpleZip1.DeflaterHuffman.bit4Reverse = new byte[16]
          {
            (byte) 0,
            (byte) 8,
            (byte) 4,
            (byte) 12,
            (byte) 2,
            (byte) 10,
            (byte) 6,
            (byte) 14,
            (byte) 1,
            (byte) 9,
            (byte) 5,
            (byte) 13,
            (byte) 3,
            (byte) 11,
            (byte) 7,
            (byte) 15
          };
          SimpleZip1.DeflaterHuffman.staticLCodes = new short[286];
          SimpleZip1.DeflaterHuffman.staticLLength = new byte[286];
          for (index = 0; index < 144; SimpleZip1.DeflaterHuffman.staticLLength[index++] = (byte) 8)
            SimpleZip1.DeflaterHuffman.staticLCodes[index] = SimpleZip1.DeflaterHuffman.BitReverse(48 + index << 8);
          for (; index < 256; SimpleZip1.DeflaterHuffman.staticLLength[index++] = (byte) 9)
            SimpleZip1.DeflaterHuffman.staticLCodes[index] = SimpleZip1.DeflaterHuffman.BitReverse(256 + index << 7);
          for (; index < 280; SimpleZip1.DeflaterHuffman.staticLLength[index++] = (byte) 7)
            SimpleZip1.DeflaterHuffman.staticLCodes[index] = SimpleZip1.DeflaterHuffman.BitReverse(index - 256 << 9);
          for (; index < 286; SimpleZip1.DeflaterHuffman.staticLLength[index++] = (byte) 8)
            SimpleZip1.DeflaterHuffman.staticLCodes[index] = SimpleZip1.DeflaterHuffman.BitReverse(index - 88 << 8);
          SimpleZip1.DeflaterHuffman.staticDCodes = new short[30];
          SimpleZip1.DeflaterHuffman.staticDLength = new byte[30];
          for (index = 0; index < 30; ++index)
          {
            SimpleZip1.DeflaterHuffman.staticDCodes[index] = SimpleZip1.DeflaterHuffman.BitReverse(index << 11);
            SimpleZip1.DeflaterHuffman.staticDLength[index] = (byte) 5;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index;
          StackFrameHelper.CreateException1(ex, (object) o1);
          throw;
        }
      }

      public DeflaterHuffman(SimpleZip1.DeflaterPending pending)
      {
        try
        {
          this.pending = pending;
          this.literalTree = new SimpleZip1.DeflaterHuffman.Tree(this, 286, 257, 15);
          this.distTree = new SimpleZip1.DeflaterHuffman.Tree(this, 30, 1, 15);
          this.blTree = new SimpleZip1.DeflaterHuffman.Tree(this, 19, 4, 7);
          this.d_buf = new short[16384];
          this.l_buf = new byte[16384];
        }
        catch (Exception ex)
        {
          SimpleZip1.DeflaterPending o2 = pending;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      public void Init()
      {
        try
        {
          this.last_lit = 0;
          this.extra_bits = 0;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      private int Lcode(int len)
      {
        int num;
        try
        {
          if (len == (int) byte.MaxValue)
            return 285;
          num = 257;
          for (; len >= 8; len >>= 1)
            num += 4;
          return num + len;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) len;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      private int Dcode(int distance)
      {
        int num;
        try
        {
          num = 0;
          for (; distance >= 4; distance >>= 1)
            num += 2;
          return num + distance;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) distance;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      public void SendAllTrees(int blTreeCodes)
      {
        int index;
        try
        {
          this.blTree.BuildCodes();
          this.literalTree.BuildCodes();
          this.distTree.BuildCodes();
          this.pending.WriteBits(this.literalTree.numCodes - 257, 5);
          this.pending.WriteBits(this.distTree.numCodes - 1, 5);
          this.pending.WriteBits(blTreeCodes - 4, 4);
          for (index = 0; index < blTreeCodes; ++index)
            this.pending.WriteBits((int) this.blTree.length[SimpleZip1.DeflaterHuffman.BL_ORDER[index]], 3);
          this.literalTree.WriteTree(this.blTree);
          this.distTree.WriteTree(this.blTree);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) blTreeCodes;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      public void CompressBlock()
      {
        int index;
        int num;
        int distance;
        int code1;
        int count;
        int code2;
        try
        {
          for (index = 0; index < this.last_lit; ++index)
          {
            num = (int) this.l_buf[index] & (int) byte.MaxValue;
            distance = (int) this.d_buf[index];
            if (distance-- != 0)
            {
              code1 = this.Lcode(num);
              this.literalTree.WriteSymbol(code1);
              count = (code1 - 261) / 4;
              if (count > 0 && count <= 5)
                this.pending.WriteBits(num & (1 << count) - 1, count);
              code2 = this.Dcode(distance);
              this.distTree.WriteSymbol(code2);
              count = code2 / 2 - 1;
              if (count > 0)
                this.pending.WriteBits(distance & (1 << count) - 1, count);
            }
            else
              this.literalTree.WriteSymbol(num);
          }
          this.literalTree.WriteSymbol(256);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) distance;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) code1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) count;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) code2;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this);
          throw;
        }
      }

      public void FlushStoredBlock(
        byte[] stored,
        int storedOffset,
        int storedLength,
        bool lastBlock)
      {
        try
        {
          this.pending.WriteBits(lastBlock ? 1 : 0, 3);
          this.pending.AlignToByte();
          this.pending.WriteShort(storedLength);
          this.pending.WriteShort(~storedLength);
          this.pending.WriteBlock(stored, storedOffset, storedLength);
          this.Init();
        }
        catch (Exception ex)
        {
          byte[] o2 = stored;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) storedOffset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) storedLength;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o5 = (ValueType) lastBlock;
          StackFrameHelper.CreateException5(ex, (object) this, (object) o2, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }

      public void FlushBlock(byte[] stored, int storedOffset, int storedLength, bool lastBlock)
      {
        short[] freqs;
        int blTreeCodes;
        int index1;
        int num;
        int extraBits;
        int index2;
        int index3;
        try
        {
          (freqs = this.literalTree.freqs)[256] = (short) ((int) freqs[256] + 1);
          this.literalTree.BuildTree();
          this.distTree.BuildTree();
          this.literalTree.CalcBLFreq(this.blTree);
          this.distTree.CalcBLFreq(this.blTree);
          this.blTree.BuildTree();
          blTreeCodes = 4;
          for (index1 = 18; index1 > blTreeCodes; --index1)
          {
            if (this.blTree.length[SimpleZip1.DeflaterHuffman.BL_ORDER[index1]] > (byte) 0)
              blTreeCodes = index1 + 1;
          }
          num = 14 + blTreeCodes * 3 + this.blTree.GetEncodedLength() + this.literalTree.GetEncodedLength() + this.distTree.GetEncodedLength() + this.extra_bits;
          extraBits = this.extra_bits;
          for (index2 = 0; index2 < 286; ++index2)
            extraBits += (int) this.literalTree.freqs[index2] * (int) SimpleZip1.DeflaterHuffman.staticLLength[index2];
          for (index3 = 0; index3 < 30; ++index3)
            extraBits += (int) this.distTree.freqs[index3] * (int) SimpleZip1.DeflaterHuffman.staticDLength[index3];
          if (num >= extraBits)
            num = extraBits;
          if (storedOffset >= 0 && storedLength + 4 < num >> 3)
            this.FlushStoredBlock(stored, storedOffset, storedLength, lastBlock);
          else if (num == extraBits)
          {
            this.pending.WriteBits(2 + (lastBlock ? 1 : 0), 3);
            this.literalTree.SetStaticCodes(SimpleZip1.DeflaterHuffman.staticLCodes, SimpleZip1.DeflaterHuffman.staticLLength);
            this.distTree.SetStaticCodes(SimpleZip1.DeflaterHuffman.staticDCodes, SimpleZip1.DeflaterHuffman.staticDLength);
            this.CompressBlock();
            this.Init();
          }
          else
          {
            this.pending.WriteBits(4 + (lastBlock ? 1 : 0), 3);
            this.SendAllTrees(blTreeCodes);
            this.CompressBlock();
            this.Init();
          }
        }
        catch (Exception ex)
        {
          object[] objects = new object[12]
          {
            (object) blTreeCodes,
            (object) index1,
            (object) num,
            (object) extraBits,
            (object) index2,
            (object) index3,
            (object) freqs,
            (object) this,
            (object) stored,
            (object) storedOffset,
            (object) storedLength,
            (object) lastBlock
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public bool IsFull()
      {
        try
        {
          return this.last_lit >= 16384;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      public bool TallyLit(int lit)
      {
        int num1;
        short[] freqs;
        IntPtr index1;
        try
        {
          this.d_buf[this.last_lit] = (short) 0;
          byte[] lBuf = this.l_buf;
          num1 = this.last_lit++;
          int index2 = num1;
          int num2 = (int) (byte) lit;
          lBuf[index2] = (byte) num2;
          (freqs = this.literalTree.freqs)[(int) (index1 = (IntPtr) lit)] = (short) ((int) freqs[index1] + 1);
          return this.IsFull();
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          short[] o2 = freqs;
          // ISSUE: variable of a boxed type
          __Boxed<IntPtr> o3 = (ValueType) index1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) lit;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
          throw;
        }
      }

      public bool TallyDist(int dist, int len)
      {
        int num1;
        int num2;
        short[] freqs;
        IntPtr index1;
        int num3;
        try
        {
          this.d_buf[this.last_lit] = (short) dist;
          byte[] lBuf = this.l_buf;
          num1 = this.last_lit++;
          int index2 = num1;
          int num4 = (int) (byte) (len - 3);
          lBuf[index2] = (byte) num4;
          num2 = this.Lcode(len - 3);
          (freqs = this.literalTree.freqs)[(int) (index1 = (IntPtr) num2)] = (short) ((int) freqs[index1] + 1);
          if (num2 >= 265 && num2 < 285)
            this.extra_bits += (num2 - 261) / 4;
          num3 = this.Dcode(dist - 1);
          (freqs = this.distTree.freqs)[(int) (index1 = (IntPtr) num3)] = (short) ((int) freqs[index1] + 1);
          if (num3 >= 4)
            this.extra_bits += num3 / 2 - 1;
          return this.IsFull();
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          short[] o4 = freqs;
          // ISSUE: variable of a boxed type
          __Boxed<IntPtr> o5 = (ValueType) index1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) dist;
          // ISSUE: variable of a boxed type
          __Boxed<int> o8 = (ValueType) len;
          StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7, (object) o8);
          throw;
        }
      }

      public sealed class Tree
      {
        public short[] freqs;
        public byte[] length;
        public int minNumCodes;
        public int numCodes;
        private short[] codes;
        private int[] bl_counts;
        private int maxLength;
        private SimpleZip1.DeflaterHuffman dh;

        public Tree(SimpleZip1.DeflaterHuffman dh, int elems, int minCodes, int maxLength)
        {
          try
          {
            this.dh = dh;
            this.minNumCodes = minCodes;
            this.maxLength = maxLength;
            this.freqs = new short[elems];
            this.bl_counts = new int[maxLength];
          }
          catch (Exception ex)
          {
            SimpleZip1.DeflaterHuffman o2 = dh;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) elems;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) minCodes;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) maxLength;
            StackFrameHelper.CreateException5(ex, (object) this, (object) o2, (object) o3, (object) o4, (object) o5);
            throw;
          }
        }

        public void WriteSymbol(int code)
        {
          try
          {
            this.dh.pending.WriteBits((int) this.codes[code] & (int) ushort.MaxValue, (int) this.length[code]);
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) code;
            StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
            throw;
          }
        }

        public void SetStaticCodes(short[] stCodes, byte[] stLength)
        {
          try
          {
            this.codes = stCodes;
            this.length = stLength;
          }
          catch (Exception ex)
          {
            short[] o2 = stCodes;
            byte[] o3 = stLength;
            StackFrameHelper.CreateException3(ex, (object) this, (object) o2, (object) o3);
            throw;
          }
        }

        public void BuildCodes()
        {
          int[] numArray1;
          int num1;
          int index1;
          int index2;
          int num2;
          int[] numArray2;
          IntPtr index3;
          try
          {
            int length = this.freqs.Length;
            numArray1 = new int[this.maxLength];
            num1 = 0;
            this.codes = new short[this.freqs.Length];
            for (index1 = 0; index1 < this.maxLength; ++index1)
            {
              numArray1[index1] = num1;
              num1 += this.bl_counts[index1] << 15 - index1;
            }
            for (index2 = 0; index2 < this.numCodes; ++index2)
            {
              num2 = (int) this.length[index2];
              if (num2 > 0)
              {
                this.codes[index2] = SimpleZip1.DeflaterHuffman.BitReverse(numArray1[num2 - 1]);
                (numArray2 = numArray1)[(int) (index3 = (IntPtr) (num2 - 1))] = numArray2[index3] + (1 << 16 - num2);
              }
            }
          }
          catch (Exception ex)
          {
            int[] o1 = numArray1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) index1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) index2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) num2;
            int[] o6 = numArray2;
            // ISSUE: variable of a boxed type
            __Boxed<IntPtr> o7 = (ValueType) index3;
            StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) this);
            throw;
          }
        }

        private void BuildLength(int[] childs)
        {
          int length;
          int num1;
          int num2;
          int index1;
          int[] numArray1;
          int index2;
          int num3;
          int num4;
          int num5;
          int[] numArray2;
          IntPtr index3;
          int num6;
          int num7;
          int maxLength;
          int blCount;
          int index4;
          try
          {
            this.length = new byte[this.freqs.Length];
            length = childs.Length / 2;
            num1 = (length + 1) / 2;
            num2 = 0;
            for (index1 = 0; index1 < this.maxLength; ++index1)
              this.bl_counts[index1] = 0;
            numArray1 = new int[length];
            numArray1[length - 1] = 0;
            for (index2 = length - 1; index2 >= 0; --index2)
            {
              if (childs[2 * index2 + 1] != -1)
              {
                num3 = numArray1[index2] + 1;
                if (num3 > this.maxLength)
                {
                  num3 = this.maxLength;
                  ++num2;
                }
                int[] numArray3 = numArray1;
                int child = childs[2 * index2];
                numArray1[childs[2 * index2 + 1]] = num4 = num3;
                int num8 = num4;
                numArray3[child] = num8;
              }
              else
              {
                num5 = numArray1[index2];
                (numArray2 = this.bl_counts)[(int) (index3 = (IntPtr) (num5 - 1))] = numArray2[index3] + 1;
                this.length[childs[2 * index2]] = (byte) numArray1[index2];
              }
            }
            if (num2 == 0)
              return;
            num6 = this.maxLength - 1;
            do
            {
              do
                ;
              while (this.bl_counts[--num6] == 0);
              do
              {
                (numArray2 = this.bl_counts)[(int) (index3 = (IntPtr) num6)] = numArray2[index3] - 1;
                int[] blCounts;
                numArray2 = blCounts = this.bl_counts;
                int index5;
                num6 = index5 = num6 + 1;
                index3 = (IntPtr) index5;
                int num9 = numArray2[index3] + 1;
                blCounts[index5] = num9;
                num2 -= 1 << this.maxLength - 1 - num6;
              }
              while (num2 > 0 && num6 < this.maxLength - 1);
            }
            while (num2 > 0);
            (numArray2 = this.bl_counts)[(int) (index3 = (IntPtr) (this.maxLength - 1))] = numArray2[index3] + num2;
            (numArray2 = this.bl_counts)[(int) (index3 = (IntPtr) (this.maxLength - 2))] = numArray2[index3] - num2;
            num7 = 2 * num1;
            for (maxLength = this.maxLength; maxLength != 0; --maxLength)
            {
              blCount = this.bl_counts[maxLength - 1];
              while (blCount > 0)
              {
                index4 = 2 * childs[num7++];
                if (childs[index4 + 1] == -1)
                {
                  this.length[childs[index4]] = (byte) maxLength;
                  --blCount;
                }
              }
            }
          }
          catch (Exception ex)
          {
            object[] objects = new object[18]
            {
              (object) length,
              (object) num1,
              (object) num2,
              (object) index1,
              (object) numArray1,
              (object) index2,
              (object) num3,
              (object) num5,
              (object) num6,
              (object) num7,
              (object) maxLength,
              (object) blCount,
              (object) index4,
              (object) num4,
              (object) numArray2,
              (object) index3,
              (object) this,
              (object) childs
            };
            StackFrameHelper.CreateExceptionN(ex, objects);
            throw;
          }
        }

        public void BuildTree()
        {
          int length;
          int[] numArray1;
          int num1;
          int num2;
          int index1;
          int freq;
          int index2;
          int index3;
          int num3;
          int num4;
          int[] childs;
          int[] numArray2;
          int num5;
          int index4;
          int index5;
          int index6;
          int index7;
          int index8;
          int index9;
          int num6;
          int index10;
          int num7;
          try
          {
            length = this.freqs.Length;
            numArray1 = new int[length];
            num1 = 0;
            num2 = 0;
            for (index1 = 0; index1 < length; ++index1)
            {
              freq = (int) this.freqs[index1];
              if (freq != 0)
              {
                for (index2 = num1++; index2 > 0 && (int) this.freqs[numArray1[index3 = (index2 - 1) / 2]] > freq; index2 = index3)
                  numArray1[index2] = numArray1[index3];
                numArray1[index2] = index1;
                num2 = index1;
              }
            }
            for (; num1 < 2; numArray1[num1++] = num3)
            {
              int num8;
              if (num2 >= 2)
                num8 = 0;
              else
                num2 = num8 = num2 + 1;
              num3 = num8;
            }
            this.numCodes = Math.Max(num2 + 1, this.minNumCodes);
            num4 = num1;
            childs = new int[4 * num1 - 2];
            numArray2 = new int[2 * num1 - 1];
            num5 = num4;
            for (index4 = 0; index4 < num1; ++index4)
            {
              index5 = numArray1[index4];
              childs[2 * index4] = index5;
              childs[2 * index4 + 1] = -1;
              numArray2[index4] = (int) this.freqs[index5] << 8;
              numArray1[index4] = index4;
            }
            do
            {
              index6 = numArray1[0];
              index7 = numArray1[--num1];
              index8 = 0;
              for (index9 = 1; index9 < num1; index9 = index9 * 2 + 1)
              {
                if (index9 + 1 < num1 && numArray2[numArray1[index9]] > numArray2[numArray1[index9 + 1]])
                  ++index9;
                numArray1[index8] = numArray1[index9];
                index8 = index9;
              }
              num6 = numArray2[index7];
              while ((index9 = index8) > 0 && numArray2[numArray1[index8 = (index9 - 1) / 2]] > num6)
                numArray1[index9] = numArray1[index8];
              numArray1[index9] = index7;
              index10 = numArray1[0];
              index7 = num5++;
              childs[2 * index7] = index6;
              childs[2 * index7 + 1] = index10;
              num7 = Math.Min(numArray2[index6] & (int) byte.MaxValue, numArray2[index10] & (int) byte.MaxValue);
              numArray2[index7] = num6 = numArray2[index6] + numArray2[index10] - num7 + 1;
              index8 = 0;
              for (index9 = 1; index9 < num1; index9 = index8 * 2 + 1)
              {
                if (index9 + 1 < num1 && numArray2[numArray1[index9]] > numArray2[numArray1[index9 + 1]])
                  ++index9;
                numArray1[index8] = numArray1[index9];
                index8 = index9;
              }
              while ((index9 = index8) > 0 && numArray2[numArray1[index8 = (index9 - 1) / 2]] > num6)
                numArray1[index9] = numArray1[index8];
              numArray1[index9] = index7;
            }
            while (num1 > 1);
            this.BuildLength(childs);
          }
          catch (Exception ex)
          {
            object[] objects = new object[23]
            {
              (object) length,
              (object) numArray1,
              (object) num1,
              (object) num2,
              (object) index1,
              (object) freq,
              (object) index2,
              (object) index3,
              (object) num3,
              (object) num4,
              (object) childs,
              (object) numArray2,
              (object) num5,
              (object) index4,
              (object) index5,
              (object) index6,
              (object) index7,
              (object) index8,
              (object) index9,
              (object) num6,
              (object) index10,
              (object) num7,
              (object) this
            };
            StackFrameHelper.CreateExceptionN(ex, objects);
            throw;
          }
        }

        public int GetEncodedLength()
        {
          int encodedLength;
          int index;
          try
          {
            encodedLength = 0;
            for (index = 0; index < this.freqs.Length; ++index)
              encodedLength += (int) this.freqs[index] * (int) this.length[index];
            return encodedLength;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) encodedLength;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) index;
            StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) this);
            throw;
          }
        }

        public void CalcBLFreq(SimpleZip1.DeflaterHuffman.Tree blTree)
        {
          int num1;
          int index1;
          int num2;
          int num3;
          int num4;
          int num5;
          short[] freqs;
          IntPtr index2;
          try
          {
            num1 = -1;
            index1 = 0;
            while (index1 < this.numCodes)
            {
              num2 = 1;
              num3 = (int) this.length[index1];
              if (num3 == 0)
              {
                num4 = 138;
                num5 = 3;
              }
              else
              {
                num4 = 6;
                num5 = 3;
                if (num1 != num3)
                {
                  (freqs = blTree.freqs)[(int) (index2 = (IntPtr) num3)] = (short) ((int) freqs[index2] + 1);
                  num2 = 0;
                }
              }
              num1 = num3;
              ++index1;
              while (index1 < this.numCodes && num1 == (int) this.length[index1])
              {
                ++index1;
                if (++num2 >= num4)
                  break;
              }
              if (num2 < num5)
                (freqs = blTree.freqs)[(int) (index2 = (IntPtr) num1)] = (short) ((int) freqs[index2] + (int) (short) num2);
              else if (num1 != 0)
                (freqs = blTree.freqs)[16] = (short) ((int) freqs[16] + 1);
              else if (num2 <= 10)
                (freqs = blTree.freqs)[17] = (short) ((int) freqs[17] + 1);
              else
                (freqs = blTree.freqs)[18] = (short) ((int) freqs[18] + 1);
            }
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num4;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num5;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) num1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) index1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) num3;
            short[] o7 = freqs;
            // ISSUE: variable of a boxed type
            __Boxed<IntPtr> o8 = (ValueType) index2;
            SimpleZip1.DeflaterHuffman.Tree o10 = blTree;
            StackFrameHelper.CreateException10(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) this, (object) o10);
            throw;
          }
        }

        public void WriteTree(SimpleZip1.DeflaterHuffman.Tree blTree)
        {
          int code1;
          int index;
          int num1;
          int code2;
          int num2;
          int num3;
          try
          {
            code1 = -1;
            index = 0;
            while (index < this.numCodes)
            {
              num1 = 1;
              code2 = (int) this.length[index];
              if (code2 == 0)
              {
                num2 = 138;
                num3 = 3;
              }
              else
              {
                num2 = 6;
                num3 = 3;
                if (code1 != code2)
                {
                  blTree.WriteSymbol(code2);
                  num1 = 0;
                }
              }
              code1 = code2;
              ++index;
              while (index < this.numCodes && code1 == (int) this.length[index])
              {
                ++index;
                if (++num1 >= num2)
                  break;
              }
              if (num1 < num3)
              {
                while (num1-- > 0)
                  blTree.WriteSymbol(code1);
              }
              else if (code1 != 0)
              {
                blTree.WriteSymbol(16);
                this.dh.pending.WriteBits(num1 - 3, 2);
              }
              else if (num1 <= 10)
              {
                blTree.WriteSymbol(17);
                this.dh.pending.WriteBits(num1 - 3, 3);
              }
              else
              {
                blTree.WriteSymbol(18);
                this.dh.pending.WriteBits(num1 - 11, 7);
              }
            }
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num3;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) code1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) index;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) code2;
            SimpleZip1.DeflaterHuffman.Tree o8 = blTree;
            StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
            throw;
          }
        }
      }
    }

    internal sealed class DeflaterEngine
    {
      private const int MAX_MATCH = 258;
      private const int MIN_MATCH = 3;
      private const int WSIZE = 32768;
      private const int WMASK = 32767;
      private const int HASH_SIZE = 32768;
      private const int HASH_MASK = 32767;
      private const int HASH_SHIFT = 5;
      private const int MIN_LOOKAHEAD = 262;
      private const int MAX_DIST = 32506;
      private const int TOO_FAR = 4096;
      private int ins_h;
      private short[] head;
      private short[] prev;
      private int matchStart;
      private int matchLen;
      private bool prevAvailable;
      private int blockStart;
      private int strstart;
      private int lookahead;
      private byte[] window;
      private byte[] inputBuf;
      private int totalIn;
      private int inputOff;
      private int inputEnd;
      private SimpleZip1.DeflaterPending pending;
      private SimpleZip1.DeflaterHuffman huffman;

      public DeflaterEngine(SimpleZip1.DeflaterPending pending)
      {
        int num;
        try
        {
          this.pending = pending;
          this.huffman = new SimpleZip1.DeflaterHuffman(pending);
          this.window = new byte[65536];
          this.head = new short[32768];
          this.prev = new short[32768];
          this.strstart = num = 1;
          this.blockStart = num;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          SimpleZip1.DeflaterPending o3 = pending;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      private void UpdateHash()
      {
        try
        {
          this.ins_h = (int) this.window[this.strstart] << 5 ^ (int) this.window[this.strstart + 1];
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      private int InsertString()
      {
        int index;
        short num;
        try
        {
          index = (this.ins_h << 5 ^ (int) this.window[this.strstart + 2]) & (int) short.MaxValue;
          this.prev[this.strstart & (int) short.MaxValue] = num = this.head[index];
          this.head[index] = (short) this.strstart;
          this.ins_h = index;
          return (int) num & (int) ushort.MaxValue;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<short> o1 = (ValueType) num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) index;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) this);
          throw;
        }
      }

      private void SlideWindow()
      {
        int index1;
        int num1;
        int index2;
        int num2;
        try
        {
          Array.Copy((Array) this.window, 32768, (Array) this.window, 0, 32768);
          this.matchStart -= 32768;
          this.strstart -= 32768;
          this.blockStart -= 32768;
          for (index1 = 0; index1 < 32768; ++index1)
          {
            num1 = (int) this.head[index1] & (int) ushort.MaxValue;
            this.head[index1] = num1 >= 32768 ? (short) (num1 - 32768) : (short) 0;
          }
          for (index2 = 0; index2 < 32768; ++index2)
          {
            num2 = (int) this.prev[index2] & (int) ushort.MaxValue;
            this.prev[index2] = num2 >= 32768 ? (short) (num2 - 32768) : (short) 0;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) index2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num2;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
          throw;
        }
      }

      public void FillWindow()
      {
        int length;
        try
        {
          if (this.strstart >= 65274)
            this.SlideWindow();
          for (; this.lookahead < 262 && this.inputOff < this.inputEnd; this.lookahead += length)
          {
            length = 65536 - this.lookahead - this.strstart;
            if (length > this.inputEnd - this.inputOff)
              length = this.inputEnd - this.inputOff;
            Array.Copy((Array) this.inputBuf, this.inputOff, (Array) this.window, this.strstart + this.lookahead, length);
            this.inputOff += length;
            this.totalIn += length;
          }
          if (this.lookahead < 3)
            return;
          this.UpdateHash();
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) length;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      private bool FindLongestMatch(int curMatch)
      {
        int num1;
        int num2;
        short[] prev;
        int strstart;
        int index;
        int val1;
        int num3;
        int num4;
        byte num5;
        byte num6;
        int num7;
        try
        {
          num1 = 128;
          num2 = 128;
          prev = this.prev;
          strstart = this.strstart;
          index = this.strstart + this.matchLen;
          val1 = Math.Max(this.matchLen, 2);
          num3 = Math.Max(this.strstart - 32506, 0);
          num4 = this.strstart + 258 - 1;
          num5 = this.window[index - 1];
          num6 = this.window[index];
          if (val1 >= 8)
            num1 >>= 2;
          if (num2 > this.lookahead)
            num2 = this.lookahead;
          do
          {
            if ((int) this.window[curMatch + val1] == (int) num6 && (int) this.window[curMatch + val1 - 1] == (int) num5 && (int) this.window[curMatch] == (int) this.window[strstart] && (int) this.window[curMatch + 1] == (int) this.window[strstart + 1])
            {
              num7 = curMatch + 2;
              strstart += 2;
              do
                ;
              while ((int) this.window[++strstart] == (int) this.window[++num7] && (int) this.window[++strstart] == (int) this.window[++num7] && (int) this.window[++strstart] == (int) this.window[++num7] && (int) this.window[++strstart] == (int) this.window[++num7] && (int) this.window[++strstart] == (int) this.window[++num7] && (int) this.window[++strstart] == (int) this.window[++num7] && (int) this.window[++strstart] == (int) this.window[++num7] && (int) this.window[++strstart] == (int) this.window[++num7] && strstart < num4);
              if (strstart > index)
              {
                this.matchStart = curMatch;
                index = strstart;
                val1 = strstart - this.strstart;
                if (val1 < num2)
                {
                  num5 = this.window[index - 1];
                  num6 = this.window[index];
                }
                else
                  break;
              }
              strstart = this.strstart;
            }
          }
          while ((curMatch = (int) prev[curMatch & (int) short.MaxValue] & (int) ushort.MaxValue) > num3 && --num1 != 0);
          this.matchLen = Math.Min(val1, this.lookahead);
          return this.matchLen >= 3;
        }
        catch (Exception ex)
        {
          object[] objects = new object[13]
          {
            (object) num1,
            (object) num2,
            (object) prev,
            (object) strstart,
            (object) num7,
            (object) index,
            (object) val1,
            (object) num3,
            (object) num4,
            (object) num5,
            (object) num6,
            (object) this,
            (object) curMatch
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      private bool DeflateSlow(bool flush, bool finish)
      {
        int matchStart;
        int matchLen;
        int curMatch;
        int storedLength;
        bool lastBlock;
        try
        {
          if (this.lookahead < 262 && !flush)
            return false;
          while (this.lookahead >= 262 || flush)
          {
            if (this.lookahead == 0)
            {
              if (this.prevAvailable)
                this.huffman.TallyLit((int) this.window[this.strstart - 1] & (int) byte.MaxValue);
              this.prevAvailable = false;
              this.huffman.FlushBlock(this.window, this.blockStart, this.strstart - this.blockStart, finish);
              this.blockStart = this.strstart;
              return false;
            }
            if (this.strstart >= 65274)
              this.SlideWindow();
            matchStart = this.matchStart;
            matchLen = this.matchLen;
            if (this.lookahead >= 3)
            {
              curMatch = this.InsertString();
              if (curMatch != 0 && this.strstart - curMatch <= 32506 && this.FindLongestMatch(curMatch) && this.matchLen <= 5 && this.matchLen == 3 && this.strstart - this.matchStart > 4096)
                this.matchLen = 2;
            }
            if (matchLen >= 3 && this.matchLen <= matchLen)
            {
              this.huffman.TallyDist(this.strstart - 1 - matchStart, matchLen);
              matchLen -= 2;
              do
              {
                ++this.strstart;
                --this.lookahead;
                if (this.lookahead >= 3)
                  this.InsertString();
              }
              while (--matchLen > 0);
              ++this.strstart;
              --this.lookahead;
              this.prevAvailable = false;
              this.matchLen = 2;
            }
            else
            {
              if (this.prevAvailable)
                this.huffman.TallyLit((int) this.window[this.strstart - 1] & (int) byte.MaxValue);
              this.prevAvailable = true;
              ++this.strstart;
              --this.lookahead;
            }
            if (this.huffman.IsFull())
            {
              storedLength = this.strstart - this.blockStart;
              if (this.prevAvailable)
                --storedLength;
              lastBlock = finish && this.lookahead == 0 && !this.prevAvailable;
              this.huffman.FlushBlock(this.window, this.blockStart, storedLength, lastBlock);
              this.blockStart += storedLength;
              return !lastBlock;
            }
          }
          return true;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) matchStart;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) matchLen;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) curMatch;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) storedLength;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o5 = (ValueType) lastBlock;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o7 = (ValueType) flush;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o8 = (ValueType) finish;
          StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7, (object) o8);
          throw;
        }
      }

      public bool Deflate(bool flush, bool finish)
      {
        bool flush1;
        bool flag;
        try
        {
          do
          {
            this.FillWindow();
            flush1 = flush && this.inputOff == this.inputEnd;
            flag = this.DeflateSlow(flush1, finish);
          }
          while (this.pending.IsFlushed && flag);
          return flag;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<bool> o1 = (ValueType) flag;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o2 = (ValueType) flush1;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o4 = (ValueType) flush;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o5 = (ValueType) finish;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5);
          throw;
        }
      }

      public void SetInput(byte[] buffer)
      {
        try
        {
          this.inputBuf = buffer;
          this.inputOff = 0;
          this.inputEnd = buffer.Length;
        }
        catch (Exception ex)
        {
          byte[] o2 = buffer;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      public bool NeedsInput()
      {
        try
        {
          return this.inputEnd == this.inputOff;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }
    }

    internal sealed class DeflaterPending
    {
      protected byte[] buf = new byte[65536];
      private int start = 0;
      private int end = 0;
      private uint bits = 0;
      private int bitCount = 0;

      public void WriteShort(int s)
      {
        int num1;
        try
        {
          byte[] buf1 = this.buf;
          num1 = this.end++;
          int index1 = num1;
          int num2 = (int) (byte) s;
          buf1[index1] = (byte) num2;
          byte[] buf2 = this.buf;
          num1 = this.end++;
          int index2 = num1;
          int num3 = (int) (byte) (s >> 8);
          buf2[index2] = (byte) num3;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) s;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      public void WriteBlock(byte[] block, int offset, int len)
      {
        try
        {
          Array.Copy((Array) block, offset, (Array) this.buf, this.end, len);
          this.end += len;
        }
        catch (Exception ex)
        {
          byte[] o2 = block;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) len;
          StackFrameHelper.CreateException4(ex, (object) this, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }

      public int BitCount
      {
        get
        {
          try
          {
            return this.bitCount;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
      }

      public void AlignToByte()
      {
        int num1;
        try
        {
          if (this.bitCount > 0)
          {
            byte[] buf1 = this.buf;
            num1 = this.end++;
            int index1 = num1;
            int bits = (int) (byte) this.bits;
            buf1[index1] = (byte) bits;
            if (this.bitCount > 8)
            {
              byte[] buf2 = this.buf;
              num1 = this.end++;
              int index2 = num1;
              int num2 = (int) (byte) (this.bits >> 8);
              buf2[index2] = (byte) num2;
            }
          }
          this.bits = 0U;
          this.bitCount = 0;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public void WriteBits(int b, int count)
      {
        int num1;
        try
        {
          this.bits |= (uint) (b << this.bitCount);
          this.bitCount += count;
          if (this.bitCount < 16)
            return;
          byte[] buf1 = this.buf;
          num1 = this.end++;
          int index1 = num1;
          int bits = (int) (byte) this.bits;
          buf1[index1] = (byte) bits;
          byte[] buf2 = this.buf;
          num1 = this.end++;
          int index2 = num1;
          int num2 = (int) (byte) (this.bits >> 8);
          buf2[index2] = (byte) num2;
          this.bits >>= 16;
          this.bitCount -= 16;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) b;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) count;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) this, (object) o3, (object) o4);
          throw;
        }
      }

      public bool IsFlushed
      {
        get
        {
          try
          {
            return this.end == 0;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
      }

      public int Flush(byte[] output, int offset, int length)
      {
        int num;
        try
        {
          if (this.bitCount >= 8)
          {
            byte[] buf = this.buf;
            num = this.end++;
            int index = num;
            int bits = (int) (byte) this.bits;
            buf[index] = (byte) bits;
            this.bits >>= 8;
            this.bitCount -= 8;
          }
          if (length > this.end - this.start)
          {
            length = this.end - this.start;
            Array.Copy((Array) this.buf, this.start, (Array) output, offset, length);
            this.start = 0;
            this.end = 0;
          }
          else
          {
            Array.Copy((Array) this.buf, this.start, (Array) output, offset, length);
            this.start += length;
          }
          return length;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          byte[] o3 = output;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) offset;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) length;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }
    }

    internal sealed class ZipStream : MemoryStream
    {
      public void WriteShort(int value)
      {
        try
        {
          this.WriteByte((byte) (value & (int) byte.MaxValue));
          this.WriteByte((byte) (value >> 8 & (int) byte.MaxValue));
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) value;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      public void WriteInt(int value)
      {
        try
        {
          this.WriteShort(value);
          this.WriteShort(value >> 16);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) value;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      public int ReadShort()
      {
        try
        {
          return this.ReadByte() | this.ReadByte() << 8;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      public int ReadInt()
      {
        try
        {
          return this.ReadShort() | this.ReadShort() << 16;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      public ZipStream()
      {
      }

      public ZipStream(byte[] buffer)
        : base(buffer, false)
      {
      }
    }
  }
}
