// Decompiled with JetBrains decompiler
// Type: Vändtia_Live_Server.Runtime
// Assembly: yDseEhTG5bnen4G, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4C5C9DF7-D67E-851A-F932-4F9F562A97E6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Remcos.gen-a9fcf50b626f7a735761798ddff08a65e037fbde2ef6e57f066150543ebcb249.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading;

namespace Vändtia_Live_Server
{
  public class Runtime
  {
    private static Runtime.Platforms? mPlatform;
    private static char? mPathSeparator;

    public static Runtime.Platforms Platform
    {
      get
      {
        if ((Runtime.mPlatform.HasValue ? 1 : 0) == 0)
          Runtime.\uE615\uE44C\uE0FF\uF285\uF7B6\uE1DE\uF2EF\uF287\uF840\uF34C\uED35\uE291();
        return Runtime.mPlatform.Value;
      }
    }

    public static char PathSeparator
    {
      get
      {
        if ((Runtime.mPathSeparator.HasValue ? 1 : 0) == 0)
          Runtime.\uE615\uE44C\uE0FF\uF285\uF7B6\uE1DE\uF2EF\uF287\uF840\uF34C\uED35\uE291();
        return Runtime.mPathSeparator.Value;
      }
    }

    private static void \uE615\uE44C\uE0FF\uF285\uF7B6\uE1DE\uF2EF\uF287\uF840\uF34C\uED35\uE291()
    {
label_2:
      int num1 = 31;
      PlatformID platform;
      while (true)
      {
        switch (num1 ^ 47)
        {
          case 46:
            switch (platform)
            {
              case PlatformID.Win32S:
              case PlatformID.Win32Windows:
              case PlatformID.Win32NT:
              case PlatformID.WinCE:
              case PlatformID.Xbox:
                goto label_9;
              case PlatformID.Unix:
                goto label_11;
              case PlatformID.MacOSX:
                goto label_10;
              default:
                num1 = 28;
                continue;
            }
          case 47:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Runtime.get_Platform);
            num1 = 0;
            continue;
          case 48:
            Runtime.mPathSeparator = new char?(Conversions.ToChar("/"));
            num1 = 29;
            continue;
          case 49:
            platform = Environment.OSVersion.Platform;
            num1 = 1;
            continue;
          case 50:
            num1 = 30;
            continue;
          case 51:
            goto label_11;
          default:
            goto label_2;
        }
      }
label_9:
      Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.Windows);
      Runtime.mPathSeparator = new char?(Conversions.ToChar("\\"));
      return;
label_10:
      Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.Mac);
      return;
label_11:
      if (((!Directory.Exists("/Applications") ? 1 : 0) != 0 || (!Directory.Exists("/System") ? 1 : 0) != 0 || (!Directory.Exists("/Users") ? 1 : 0) != 0 || !Directory.Exists("/Volumes") ? 1 : 0) == 0)
      {
        Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.Mac);
      }
      else
      {
label_14:
        int num2 = 28;
        bool flag;
        string lower;
        while (true)
        {
          switch (num2 ^ 49)
          {
            case 44:
              if (flag)
              {
                num2 = 0;
                continue;
              }
              goto label_22;
            case 45:
              Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.Linux);
              num2 = 1;
              continue;
            case 46:
              flag = lower.Contains("raspberrypi");
              num2 = 29;
              continue;
            case 47:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Runtime.\u002Ector);
              num2 = 30;
              continue;
            case 48:
              lower = Runtime.\uE615\uE44C\uE0FF\uF285\uF7B6\uE1DE\uF2EF\uF287\uF840\uF34C\uED35\uE292().ToLower();
              num2 = 31;
              continue;
            case 49:
              goto label_21;
            default:
              goto label_14;
          }
        }
label_21:
        int num3 = 0;
        goto label_23;
label_22:
        num3 = 1;
label_23:
        if (num3 == 0)
        {
          Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.ARMSoft);
          if ((!lower.Contains("armv7l") ? 1 : 0) == 0)
            Runtime.mPlatform = new Runtime.Platforms?(Runtime.Platforms.ARMHard);
        }
      }
    }

    private static string \uE615\uE44C\uE0FF\uF285\uF7B6\uE1DE\uF2EF\uF287\uF840\uF34C\uED35\uE292()
    {
label_2:
      int num1 = 115;
      ProcessStartInfo processStartInfo;
      Process process;
      // ISSUE: variable of a compiler-generated type
      Runtime.\uF3CB\uED3F\uE610\uF80E\uE8BF\uE6FF\uEE08\uF1D4\uE8D6\uE003\uEF90\uE3FC obj;
      while (true)
      {
        switch (num1 ^ 48)
        {
          case 48:
            processStartInfo.CreateNoWindow = true;
            num1 = 114;
            continue;
          case 49:
            processStartInfo.Arguments = "-a";
            num1 = 118;
            continue;
          case 50:
            process = new Process();
            num1 = 14;
            continue;
          case 51:
            processStartInfo.FileName = "uname";
            num1 = 10;
            continue;
          case 52:
            num1 = 15;
            continue;
          case 53:
            num1 = 112;
            continue;
          case 54:
            processStartInfo.UseShellExecute = false;
            num1 = 9;
            continue;
          case 55:
            processStartInfo = process.StartInfo;
            num1 = 3;
            continue;
          case 56:
            num1 = 113;
            continue;
          case 57:
            num1 = 11;
            continue;
          case 58:
            num1 = 1;
            continue;
          case 59:
            processStartInfo.RedirectStandardOutput = true;
            num1 = 5;
            continue;
          case 60:
            // ISSUE: reference to a compiler-generated field
            obj.\u0024VB\u0024Local_lines = new List<string>();
            num1 = 2;
            continue;
          case 61:
            processStartInfo = (ProcessStartInfo) null;
            num1 = 117;
            continue;
          case 62:
            num1 = 7;
            continue;
          case 63:
            num1 = 13;
            continue;
          case 64:
            processStartInfo.RedirectStandardError = true;
            num1 = 8;
            continue;
          case 65:
            processStartInfo.RedirectStandardInput = false;
            num1 = 4;
            continue;
          case 66:
            num1 = 6;
            continue;
          case 67:
            // ISSUE: object of a compiler-generated type is created
            obj = new Runtime.\uF3CB\uED3F\uE610\uF80E\uE8BF\uE6FF\uEE08\uF1D4\uE8D6\uE003\uEF90\uE3FC();
            num1 = 12;
            continue;
          case 68:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Runtime.get_Platform);
            num1 = 116;
            continue;
          case 69:
            // ISSUE: reference to a compiler-generated method
            process.OutputDataReceived += new DataReceivedEventHandler(obj._Lambda\u0024__0);
            num1 = 119;
            continue;
          case 70:
            num1 = 0;
            continue;
          case 71:
            goto label_26;
          default:
            goto label_2;
        }
      }
label_26:
      string str;
      try
      {
        process.Start();
label_28:
        int num2 = 30;
        while (true)
        {
          switch (num2 ^ 48)
          {
            case 46:
              process.BeginOutputReadLine();
              num2 = 0;
              continue;
            case 47:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Runtime.get_Platform);
              num2 = 31;
              continue;
            case 48:
              num2 = 1;
              continue;
            case 49:
              process.WaitForExit();
              num2 = 3;
              continue;
            case 50:
              num2 = 7;
              continue;
            case 51:
              num2 = 4;
              continue;
            case 52:
              process.Dispose();
              num2 = 5;
              continue;
            case 53:
              num2 = 6;
              continue;
            case 54:
              Thread.Sleep(500);
              num2 = 2;
              continue;
            case 55:
              goto label_39;
            default:
              goto label_28;
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = Environment.OSVersion.Platform.ToString();
        ProjectData.ClearProjectError();
      }
label_39:
      return str;
    }

    public enum Platforms
    {
      Windows,
      Linux,
      Mac,
      ARMSoft,
      ARMHard,
    }
  }
}
