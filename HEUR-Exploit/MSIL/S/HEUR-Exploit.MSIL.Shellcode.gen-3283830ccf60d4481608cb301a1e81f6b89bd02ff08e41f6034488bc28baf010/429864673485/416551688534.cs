// Decompiled with JetBrains decompiler
// Type: 429864673485.416551688534
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003233524418126;
using \u003305316230596;
using \u003429864673485;
using \u003991227119410;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Reflection;

namespace \u003429864673485
{
  [DefaultMember("Item")]
  internal class \u003416551688534 : Collection<\u003057567207975>
  {
    private static readonly IEqualityComparer<string> \u003330081003599 = (IEqualityComparer<string>) StringComparer.Ordinal;
    private Dictionary<string, \u003057567207975> \u003577435645194;

    public \u003416551688534()
      : base((IList<\u003057567207975>) new List<\u003057567207975>())
    {
    }

    private void \u003745810396847(string _param1, \u003057567207975 _param2)
    {
      this.\u003536929913173();
      this.\u003577435645194[_param1] = _param2;
    }

    protected void ChangeItemKey(\u003057567207975 item, string newKey)
    {
      string x = this.\u003778455445009(item) ? this.\u003603027268760(item) : throw new ArgumentException("The specified item does not exist in this KeyedCollection.");
      if (\u003416551688534.\u003330081003599.Equals(x, newKey))
        return;
      if (newKey != null)
        this.\u003745810396847(newKey, item);
      if (x == null)
        return;
      this.\u003824884487605(x);
    }

    protected override void ClearItems()
    {
      base.ClearItems();
      this.\u003577435645194?.Clear();
    }

    public bool \u003208761310064(string _param1)
    {
      if (_param1 == null)
        throw new ArgumentNullException("key");
      return this.\u003577435645194 != null && this.\u003577435645194.ContainsKey(_param1);
    }

    private bool \u003778455445009(\u003057567207975 _param1) => this.\u003577435645194 != null && this.\u003577435645194.TryGetValue(this.\u003603027268760(_param1), out \u003057567207975 _);

    private void \u003536929913173()
    {
      if (this.\u003577435645194 != null)
        return;
      this.\u003577435645194 = new Dictionary<string, \u003057567207975>(\u003416551688534.\u003330081003599);
    }

    private string \u003603027268760(\u003057567207975 _param1) => ((\u003165411198507) _param1).\u003046499699023;

    protected override void InsertItem(int index, \u003057567207975 item)
    {
      this.\u003745810396847(this.\u003603027268760(item), item);
      base.InsertItem(index, item);
    }

    public bool \u003747771302516(string _param1)
    {
      if (_param1 == null)
        throw new ArgumentNullException("key");
      return this.\u003577435645194 != null && this.\u003577435645194.ContainsKey(_param1) && this.Remove(this.\u003577435645194[_param1]);
    }

    protected override void RemoveItem(int index)
    {
      this.\u003824884487605(this.\u003603027268760(this.Items[index]));
      base.RemoveItem(index);
    }

    private void \u003824884487605(string _param1) => this.\u003577435645194?.Remove(_param1);

    protected override void SetItem(int index, \u003057567207975 item)
    {
      string str = this.\u003603027268760(item);
      string x = this.\u003603027268760(this.Items[index]);
      if (\u003416551688534.\u003330081003599.Equals(x, str))
      {
        if (this.\u003577435645194 != null)
          this.\u003577435645194[str] = item;
      }
      else
      {
        this.\u003745810396847(str, item);
        if (x != null)
          this.\u003824884487605(x);
      }
      base.SetItem(index, item);
    }

    public \u003057567207975 get_Item(string key)
    {
      if (key == null)
        throw new ArgumentNullException(nameof (key));
      return this.\u003577435645194 != null ? this.\u003577435645194[key] : throw new KeyNotFoundException();
    }

    public bool \u003097512804391(string _param1, out \u003057567207975 _param2)
    {
      if (this.\u003577435645194 != null)
        return this.\u003577435645194.TryGetValue(_param1, out _param2);
      _param2 = (\u003057567207975) null;
      return false;
    }

    public ICollection<string> \u003468323455417
    {
      get
      {
        this.\u003536929913173();
        return (ICollection<string>) this.\u003577435645194.Keys;
      }
    }

    public ICollection<\u003057567207975> \u003930156263049
    {
      get
      {
        this.\u003536929913173();
        return (ICollection<\u003057567207975>) this.\u003577435645194.Values;
      }
    }

    public int \u003322273335206(\u003057567207975 _param1) => ((List<\u003057567207975>) this.Items).\u003665293128292<\u003057567207975>(_param1);

    public bool \u003138330983967(\u003416551688534 _param1)
    {
      if (this == _param1)
        return true;
      Dictionary<string, \u003057567207975> dictionary1 = this.\u003577435645194;
      Dictionary<string, \u003057567207975> dictionary2 = _param1.\u003577435645194;
      if (dictionary1 == null && dictionary2 == null)
        return true;
      if (dictionary1 == null)
        return dictionary2.Count == 0;
      if (dictionary2 == null)
        return dictionary1.Count == 0;
      if (dictionary1.Count != dictionary2.Count)
        return false;
      foreach (KeyValuePair<string, \u003057567207975> keyValuePair in dictionary1)
      {
        \u003057567207975 obj1;
        if (!dictionary2.TryGetValue(keyValuePair.Key, out obj1))
          return false;
        \u003165411198507 obj2 = (\u003165411198507) keyValuePair.Value;
        \u003165411198507 obj3 = (\u003165411198507) obj1;
        if (obj2.\u003019890020644 == null)
          return obj3.\u003019890020644 == null;
        if (!obj2.\u003019890020644.\u003804485497034(obj3.\u003019890020644))
          return false;
      }
      return true;
    }
  }
}
