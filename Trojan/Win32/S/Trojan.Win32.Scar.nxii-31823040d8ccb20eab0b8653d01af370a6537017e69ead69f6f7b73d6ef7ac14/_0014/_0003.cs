// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BitGenerator, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=70e4c26ef2031892
// MVID: D3922F89-E00A-4D10-8BC9-9309D5539F14
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.nxii-31823040d8ccb20eab0b8653d01af370a6537017e69ead69f6f7b73d6ef7ac14.exe

using \u0014;
using \u0015;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;

namespace \u0014
{
  internal static class \u0003
  {
    [NonSerialized]
    internal static GetString \u0083;

    public static int \u0001([In] \u0008 obj0, [In] char obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      int num2;
      int num3;
      if (true)
      {
        num1 = Array.IndexOf<char>(obj0.\u0001(), obj1, obj0.\u0001() + obj2, obj3);
        int num4 = num1;
        int num5 = -1;
        if (num5 != 0)
        {
          if (num4 == num5)
            return -1;
          goto label_8;
        }
        else
        {
          num3 = num5;
          num2 = num4;
        }
      }
      else
        goto label_8;
label_6:
      int num6 = num2 - num3;
      return false ? num6 : num6;
label_8:
      num2 = num1;
      num3 = obj0.\u0001();
      goto label_6;
    }

    public static bool \u0001([In] \u0008 obj0, [In] string obj1)
    {
      if (\u001F.\u007E\u0011\u0003((object) obj1) > obj0.\u0002())
        return false;
label_2:
      do
      {
        char[] chArray = obj0.\u0001();
        int num1 = 0;
label_11:
        do
          ;
        while (false);
        int num2 = num1;
        int num3;
        for (int index = \u001F.\u007E\u0011\u0003((object) obj1); num2 < index; num2 = num3)
        {
          if ((int) \u001B\u0002.\u007E\u0088\u0005((object) obj1, num1) != (int) chArray[num1 + obj0.\u0001()])
          {
            if (true)
              return false;
            goto label_2;
          }
          else
          {
            num3 = num1;
            if (false)
              return num3 != 0;
            int num4 = 1;
            if (num4 != 0)
            {
              num1 = num3 + num4;
              goto label_11;
            }
            else
              index = num4;
          }
        }
      }
      while (false);
      return true;
    }

    public static unsafe bool \u0002([In] \u0008 obj0, [In] string obj1)
    {
      int num1 = 8;
label_1:
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(num1);
      int num2 = \u001F.\u007E\u0011\u0003((object) obj1);
label_3:
      int num3 = obj0.\u0002();
label_4:
      if (num2 > num3)
        return false;
      char[] chArray = obj0.\u0001();
      *(int*) voidPtr = obj0.\u0001() + obj0.\u0002() - \u001F.\u007E\u0011\u0003((object) obj1);
      *(int*) ((IntPtr) voidPtr + 4) = 0;
      while (*(int*) ((IntPtr) voidPtr + 4) < \u001F.\u007E\u0011\u0003((object) obj1))
      {
        if (true)
        {
          int num4 = (int) \u001B\u0002.\u007E\u0088\u0005((object) obj1, *(int*) ((IntPtr) voidPtr + 4));
          int num5 = (int) chArray[*(int*) ((IntPtr) voidPtr + 4) + *(int*) voidPtr];
          if (false)
          {
            num3 = num5;
            num2 = num4;
            goto label_4;
          }
          else if (num4 != num5)
          {
            int num6 = 0;
            if (num6 != 0)
            {
              num2 = num6;
              goto label_3;
            }
            else
            {
              if (num6 == 0)
                return num6 != 0;
              num1 = num6;
              goto label_1;
            }
          }
          else
            *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) + 1;
        }
      }
      return true;
    }

    static \u0003()
    {
      do
      {
        Strings.CreateGetStringDelegate(typeof (\u0003));
        bool flag = false;
        Assembly assembly = \u0013.\u008B\u0002();
        if (\u0006.\u0001(\u0001.\u007E\u0002((object) assembly), true, out flag))
          goto label_7;
label_5:
        throw new SecurityException(\u0003.\u0083(2394));
label_7:
        int num = flag ? 1 : 0;
        if (true)
        {
          if (num != 0)
            num = global::\u0014.\u007E\u008C\u0002((object) \u0001.\u007E\u0003((object) assembly), \u0003.\u0083(2369)) ? 1 : 0;
          else
            goto label_5;
        }
        if (num == 0)
          goto label_5;
      }
      while (false);
    }
  }
}
