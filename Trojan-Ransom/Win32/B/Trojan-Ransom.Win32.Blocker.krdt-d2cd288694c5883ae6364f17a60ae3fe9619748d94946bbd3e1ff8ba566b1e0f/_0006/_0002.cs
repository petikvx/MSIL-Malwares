// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 1m, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9A9758D8-D673-4760-AFDD-69A3D20C59FF
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.krdt-d2cd288694c5883ae6364f17a60ae3fe9619748d94946bbd3e1ff8ba566b1e0f.exe

using \u0001;
using \u0006;
using \u000E;
using \u0010;
using System;

namespace \u0006
{
  internal class \u0002
  {
    private static int \u0001;
    private static int \u0001;
    private byte[] \u0001 = new byte[\u0002.\u0001];
    private int \u0002;
    private int \u0003;
    [NonSerialized]
    internal static \u0013 \u0083;

    static \u0002()
    {
      \u0003.\u0001(typeof (\u0002));
      \u0002.\u0001 = 32768;
      \u0002.\u0001 = \u0002.\u0001 - 1;
    }

    public void \u0001(int _param1)
    {
      if (this.\u0003++ == \u0002.\u0001)
        throw new InvalidOperationException(\u0004.\u0001.\u0001(1033745817, 61310037, 1291969389));
      this.\u0001[this.\u0002++] = (byte) _param1;
      this.\u0002 &= \u0002.\u0001;
    }

    private void \u0001(int _param1, int _param2, int _param3)
    {
      while (_param2-- > 0)
      {
        this.\u0001[this.\u0002++] = this.\u0001[_param1++];
        this.\u0002 &= \u0002.\u0001;
        _param1 &= \u0002.\u0001;
      }
    }

    public void \u0001(int _param1, int _param2)
    {
      if ((this.\u0003 += _param1) > \u0002.\u0001)
        throw new InvalidOperationException(\u0004.\u0001.\u0001(1407681992, 61310019, 1291969389));
      int sourceIndex = this.\u0002 - _param2 & \u0002.\u0001;
      int num = \u0002.\u0001 - _param1;
      if (sourceIndex <= num && this.\u0002 < num)
      {
        if (_param1 <= _param2)
        {
          Array.Copy((Array) this.\u0001, sourceIndex, (Array) this.\u0001, this.\u0002, _param1);
          this.\u0002 += _param1;
        }
        else
        {
          while (_param1-- > 0)
            this.\u0001[this.\u0002++] = this.\u0001[sourceIndex++];
        }
      }
      else
        this.\u0001(sourceIndex, _param1, _param2);
    }

    public int \u0001(\u0002 _param1, int _param2)
    {
      _param2 = Math.Min(Math.Min(_param2, \u0002.\u0001 - this.\u0003), _param1.\u0001());
      int num1 = \u0002.\u0001 - this.\u0002;
      int num2;
      if (_param2 > num1)
      {
        num2 = _param1.\u0001(this.\u0001, this.\u0002, num1);
        if (num2 == num1)
          num2 += _param1.\u0001(this.\u0001, 0, _param2 - num1);
      }
      else
        num2 = _param1.\u0001(this.\u0001, this.\u0002, _param2);
      this.\u0002 = this.\u0002 + num2 & \u0002.\u0001;
      this.\u0003 += num2;
      return num2;
    }

    public void \u0001(byte[] _param1, int _param2, int _param3)
    {
      if (this.\u0003 > 0)
        throw new InvalidOperationException();
      if (_param3 > \u0002.\u0001)
      {
        _param2 += _param3 - \u0002.\u0001;
        _param3 = \u0002.\u0001;
      }
      Array.Copy((Array) _param1, _param2, (Array) this.\u0001, 0, _param3);
      this.\u0002 = _param3 & \u0002.\u0001;
    }

    public int \u0001() => \u0002.\u0001 - this.\u0003;

    public int \u0001() => this.\u0003;

    public int \u0001(byte[] _param1, int _param2, int _param3)
    {
      int num1 = this.\u0002;
      if (_param3 > this.\u0003)
        _param3 = this.\u0003;
      else
        num1 = this.\u0002 - this.\u0003 + _param3 & \u0002.\u0001;
      int num2 = _param3;
      int length = _param3 - num1;
      if (length > 0)
      {
        Array.Copy((Array) this.\u0001, \u0002.\u0001 - length, (Array) _param1, _param2, length);
        _param2 += length;
        _param3 = num1;
      }
      Array.Copy((Array) this.\u0001, num1 - _param3, (Array) _param1, _param2, _param3);
      this.\u0003 -= num2;
      if (this.\u0003 < 0)
        throw new InvalidOperationException();
      return num2;
    }

    public void \u0002() => this.\u0003 = this.\u0002 = 0;
  }
}
