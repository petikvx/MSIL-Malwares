// Decompiled with JetBrains decompiler
// Type: ProjNet.Mocks.ResolverConfigurationMock
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using TYPELIBA.Identifiers;
using TYPELIBA.Wrappers;

namespace ProjNet.Mocks
{
  public class ResolverConfigurationMock : Form
  {
    private IContainer m_FacadeConsumer;
    private GroupBox _CodeConsumer;
    private RadioButton descriptorConsumer;
    private RadioButton dicConsumer;
    private RichTextBox m_ListenerConsumer;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ResolverConfigurationMock()
    {
      int num = 4;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            ManagerParamsID.NewExpression();
            num = 3;
            continue;
          case 1:
          case 2:
            this.FillRepository();
            if (true)
            {
              num = 5;
              continue;
            }
            goto case 3;
          case 3:
            this.m_FacadeConsumer = (IContainer) null;
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 1;
          case 5:
            goto label_7;
          default:
            if (true)
            {
              num = 1;
              continue;
            }
            goto label_6;
        }
      }
label_7:
      return;
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FindRepository(object info, EventArgs caller)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RateRepository(object key, EventArgs reg)
    {
      this.m_ListenerConsumer.Clear();
      this.m_ListenerConsumer.Text = MethodProcess.InitRepository().Text;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CloneRepository(object last, EventArgs ord)
    {
      this.m_ListenerConsumer.Clear();
      this.m_ListenerConsumer.Text = MethodProcess.VisitRepository().Text;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool isitem)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
            case 4:
              if (isitem)
              {
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto case 1;
              }
              else
              {
                num3 = 0;
                goto label_7;
              }
            case 1:
            case 3:
              num3 = this.m_FacadeConsumer != null ? 1 : 0;
              goto label_7;
            case 2:
label_1:
              this.m_FacadeConsumer.Dispose();
              break;
            case 5:
              goto label_8;
            default:
              goto label_11;
          }
label_2:
          base.Dispose(isitem);
          num2 = 5;
          continue;
label_7:
          if (num3 == 0)
            goto label_2;
          else
            goto label_1;
        }
label_11:
        num1 = 2;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FillRepository()
    {
      int num1 = 14;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 14:
              this._CodeConsumer = new GroupBox();
              if (ResolverConfigurationMock.CalcCreator())
              {
                num2 = 10;
                continue;
              }
              goto label_2;
            case 1:
            case 10:
              goto label_14;
            case 2:
              goto label_6;
            case 3:
              goto label_3;
            case 4:
              goto label_2;
            case 5:
              goto label_4;
            case 6:
              goto label_13;
            case 7:
              goto label_7;
            case 8:
              this._CodeConsumer.Text = "Group By:";
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto label_13;
            case 9:
              goto label_5;
            case 11:
              goto label_11;
            case 12:
              this.dicConsumer.Size = new Size(51, 17);
              this.dicConsumer.TabIndex = 0;
              this.dicConsumer.TabStop = true;
              this.dicConsumer.Text = "None";
              num2 = 9;
              continue;
            case 13:
              this.m_ListenerConsumer.TabIndex = 2;
              this.m_ListenerConsumer.Text = "";
              this.AutoScaleDimensions = new SizeF(6f, 13f);
              this.AutoScaleMode = AutoScaleMode.Font;
              this.ClientSize = new Size(433, 303);
              this.Controls.Add((Control) this.m_ListenerConsumer);
              this.Controls.Add((Control) this._CodeConsumer);
              this.Name = "QueryAuthorAndTitle";
              this.Text = "Author & Title Search";
              this.Load += new EventHandler(this.FindRepository);
              this._CodeConsumer.ResumeLayout(false);
              this._CodeConsumer.PerformLayout();
              this.ResumeLayout(false);
              num2 = 15;
              continue;
            case 15:
              goto label_18;
            default:
              num2 = 11;
              continue;
          }
        }
label_2:
        this.dicConsumer.CheckedChanged += new EventHandler(this.RateRepository);
        this.m_ListenerConsumer.Location = new Point(12, 62);
        this.m_ListenerConsumer.Name = "richTextBox";
        num1 = 3;
        continue;
label_3:
        this.m_ListenerConsumer.ReadOnly = true;
        this.m_ListenerConsumer.Size = new Size(409, 232);
        num1 = 13;
        continue;
label_4:
        this._CodeConsumer.Size = new Size(409, 44);
        this._CodeConsumer.TabIndex = 1;
        num1 = 6;
        continue;
label_5:
        this.dicConsumer.UseVisualStyleBackColor = true;
        num1 = 4;
        continue;
label_6:
        this.m_ListenerConsumer = new RichTextBox();
        this._CodeConsumer.SuspendLayout();
        this.SuspendLayout();
        this._CodeConsumer.Controls.Add((Control) this.descriptorConsumer);
        this._CodeConsumer.Controls.Add((Control) this.dicConsumer);
        this._CodeConsumer.Location = new Point(12, 12);
        this._CodeConsumer.Name = "groupByBox";
        num1 = 5;
        continue;
label_7:
        this.descriptorConsumer.AutoSize = true;
        this.descriptorConsumer.Location = new Point(99, 20);
        this.descriptorConsumer.Name = "authorRadioButton";
        this.descriptorConsumer.Size = new Size(56, 17);
        this.descriptorConsumer.TabIndex = 1;
        this.descriptorConsumer.TabStop = true;
        this.descriptorConsumer.Text = "Author";
        this.descriptorConsumer.UseVisualStyleBackColor = true;
        this.descriptorConsumer.CheckedChanged += new EventHandler(this.CloneRepository);
        this.dicConsumer.AutoSize = true;
label_11:
        this.dicConsumer.Location = new Point(7, 20);
        this.dicConsumer.Name = "noneRadioButton";
        num1 = 12;
        continue;
label_13:
        this._CodeConsumer.TabStop = false;
        num1 = 8;
        continue;
label_14:
        this.descriptorConsumer = new RadioButton();
        this.dicConsumer = new RadioButton();
        num1 = 2;
      }
label_18:;
    }

    internal static bool CalcCreator() => true;

    internal static bool InstantiateCreator() => false;
  }
}
