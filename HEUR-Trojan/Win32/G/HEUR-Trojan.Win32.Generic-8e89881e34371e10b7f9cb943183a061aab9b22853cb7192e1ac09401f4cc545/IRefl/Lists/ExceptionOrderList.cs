// Decompiled with JetBrains decompiler
// Type: IRefl.Lists.ExceptionOrderList
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Objects;
using ProjNet.Structs;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Runtime.CompilerServices;
using System.Threading;

namespace IRefl.Lists
{
  [Table(Name = "dbo.Titles")]
  public class ExceptionOrderList : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs accountRegistry;
    private string _ISBN;
    private string _BookTitle;
    private int _EditionNumber;
    private string _Copyright;
    private EntitySet<ManagerObserverObject> _AuthorISBNs;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ExceptionOrderList()
    {
      int num1 = 2;
      if (ExceptionOrderList.DeleteModel())
        ;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            PageAdvisorStructBuilder.PrepareCreator();
            if (!ExceptionOrderList.DeleteModel())
            {
              num1 = 4;
              continue;
            }
            goto case 3;
          case 1:
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 3;
          case 3:
            this._AuthorISBNs = new EntitySet<ManagerObserverObject>(new Action<ManagerObserverObject>(this.CollectFacade), new Action<ManagerObserverObject>(this.StartFacade));
            int num2 = 5;
            num1 = ExceptionOrderList.DeleteModel() ? num2 : num2;
            continue;
          case 5:
            goto label_6;
          default:
            num1 = 3;
            continue;
        }
      }
label_6:;
    }

    [Column(CanBeNull = false, DbType = "VarChar(20) NOT NULL", IsPrimaryKey = true, Storage = "_ISBN")]
    public string ISBN
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._ISBN;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num = 3;
        if (true)
          goto label_3;
label_1:
        this._ISBN = value;
        this.SendPropertyChanged(nameof (ISBN));
        if (ExceptionOrderList.SelectModel())
        {
          num = 6;
          goto label_3;
        }
label_2:
        this.SendPropertyChanging();
        goto label_1;
label_3:
        bool flag;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 3:
              flag = this._ISBN != value;
              num = 5;
              continue;
            case 1:
            case 5:
              if (flag)
              {
                num = 4;
                continue;
              }
              goto label_9;
            case 2:
              goto label_1;
            case 4:
              goto label_2;
            case 6:
              goto label_8;
            default:
              if (true)
              {
                num = 2;
                continue;
              }
              goto case 0;
          }
        }
label_9:
        return;
label_8:;
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(100) NOT NULL", Storage = "_BookTitle")]
    public string BookTitle
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._BookTitle;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num = 2;
        if (!ExceptionOrderList.DeleteModel())
          goto label_2;
label_1:
        this.SendPropertyChanging();
        this._BookTitle = value;
        goto label_5;
label_2:
        bool flag;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 1:
              goto label_6;
            case 2:
              flag = this._BookTitle != value;
              if (!ExceptionOrderList.DeleteModel())
              {
                num = 0;
                continue;
              }
              goto label_5;
            case 3:
            case 4:
              goto label_5;
            case 5:
              goto label_1;
            case 6:
              goto label_8;
            default:
              if (ExceptionOrderList.SelectModel())
              {
                num = 4;
                continue;
              }
              goto case 2;
          }
        }
label_8:
        return;
label_5:
        this.SendPropertyChanged(nameof (BookTitle));
        if (!ExceptionOrderList.DeleteModel())
        {
          num = 6;
          goto label_2;
        }
label_6:
        if (!flag)
          return;
        num = 5;
        goto label_2;
      }
    }

    [Column(DbType = "Int NOT NULL", Storage = "_EditionNumber")]
    public int EditionNumber
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._EditionNumber;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 2;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                flag = this._EditionNumber != value;
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto label_9;
              case 1:
              case 5:
                goto label_6;
              case 3:
                this.SendPropertyChanging();
                this._EditionNumber = value;
                goto case 4;
              case 4:
                this.SendPropertyChanged(nameof (EditionNumber));
                if (ExceptionOrderList.SelectModel())
                {
                  num2 = 6;
                  continue;
                }
                goto label_6;
              case 6:
                goto label_9;
              default:
                goto label_4;
            }
          }
label_4:
          num1 = 4;
          continue;
label_6:
          if (flag)
            num1 = 3;
          else
            break;
        }
        return;
label_9:;
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(4) NOT NULL", Storage = "_Copyright")]
    public string Copyright
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Copyright;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 0;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
                goto label_1;
              case 1:
              case 3:
                if (flag)
                {
                  this.SendPropertyChanging();
                  if (!ExceptionOrderList.DeleteModel())
                  {
                    num2 = 5;
                    continue;
                  }
                  goto label_5;
                }
                else
                  goto label_10;
              case 2:
              case 5:
                goto label_5;
              case 4:
                goto label_2;
              case 6:
                goto label_9;
              default:
                num2 = 4;
                continue;
            }
          }
label_1:
          flag = this._Copyright != value;
          num1 = 3;
          continue;
label_2:
          this.SendPropertyChanged(nameof (Copyright));
          num1 = 6;
          continue;
label_5:
          this._Copyright = value;
          goto label_2;
        }
label_10:
        return;
label_9:;
      }
    }

    [Association(Name = "Title_AuthorISBN", OtherKey = "ISBN", Storage = "_AuthorISBNs", ThisKey = "ISBN")]
    public EntitySet<ManagerObserverObject> AuthorISBNs
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._AuthorISBNs;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._AuthorISBNs.Assign((IEnumerable<ManagerObserverObject>) value);
    }

    public event PropertyChangingEventHandler PropertyChanging
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num = 5;
        PropertyChangingEventHandler changingEventHandler;
        PropertyChangingEventHandler comparand;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 5:
              changingEventHandler = this._IteratorRegistry;
              num = 4;
              continue;
            case 1:
            case 3:
              if (changingEventHandler == comparand)
              {
                if (ExceptionOrderList.SelectModel())
                {
                  num = 6;
                  continue;
                }
                goto case 2;
              }
              else
                goto case 4;
            case 2:
              changingEventHandler = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this._IteratorRegistry, comparand + value, comparand);
              goto case 1;
            case 4:
              comparand = changingEventHandler;
              if (ExceptionOrderList.SelectModel())
              {
                num = 2;
                continue;
              }
              goto case 0;
            case 6:
              goto label_8;
            default:
              num = 1;
              continue;
          }
        }
label_8:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          PropertyChangingEventHandler changingEventHandler;
          PropertyChangingEventHandler comparand;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                goto label_3;
              case 1:
                if (changingEventHandler == comparand)
                {
                  num2 = 6;
                  continue;
                }
                goto case 5;
              case 2:
              case 4:
                changingEventHandler = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this._IteratorRegistry, comparand - value, comparand);
                goto case 1;
              case 5:
                comparand = changingEventHandler;
                if (ExceptionOrderList.SelectModel())
                {
                  num2 = 4;
                  continue;
                }
                goto label_9;
              case 6:
                goto label_10;
              default:
                goto label_7;
            }
          }
label_3:
          changingEventHandler = this._IteratorRegistry;
          num1 = 5;
          continue;
label_7:
          num1 = 1;
        }
label_10:
        return;
label_9:;
      }
    }

    public event PropertyChangedEventHandler PropertyChanged
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 4;
        if (ExceptionOrderList.DeleteModel())
          ;
        while (true)
        {
          PropertyChangedEventHandler changedEventHandler1;
          PropertyChangedEventHandler comparand;
          PropertyChangedEventHandler changedEventHandler2;
          int num2;
          switch (num1)
          {
            case 0:
            case 4:
              changedEventHandler2 = this.visitorRegistry;
              num2 = 2;
              break;
            case 1:
            case 2:
              comparand = changedEventHandler2;
              changedEventHandler1 = comparand + value;
              num2 = 5;
              break;
            case 3:
              if (changedEventHandler2 == comparand)
              {
                if (ExceptionOrderList.SelectModel())
                {
                  num1 = 6;
                  continue;
                }
                goto case 0;
              }
              else
                goto case 1;
            case 5:
              changedEventHandler2 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.visitorRegistry, changedEventHandler1, comparand);
              goto case 3;
            case 6:
              goto label_1;
            default:
              num2 = 3;
              break;
          }
          num1 = num2;
        }
label_1:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 1;
        while (true)
        {
          int num2 = num1;
          PropertyChangedEventHandler comparand;
          PropertyChangedEventHandler changedEventHandler;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 1:
                goto label_5;
              case 2:
                changedEventHandler = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.visitorRegistry, comparand - value, comparand);
                goto case 3;
              case 3:
              case 5:
                if (changedEventHandler != comparand)
                  goto case 4;
                else
                  goto label_8;
              case 4:
                comparand = changedEventHandler;
                if (true)
                {
                  num2 = 2;
                  continue;
                }
                goto case 3;
              case 6:
                goto label_9;
              default:
                num2 = 5;
                continue;
            }
          }
label_5:
          changedEventHandler = this.visitorRegistry;
          num1 = 4;
          continue;
label_8:
          num1 = 6;
        }
label_9:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanging()
    {
      int num1 = 4;
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            // ISSUE: reference to a compiler-generated field
            flag = this._IteratorRegistry != null;
            int num2 = 2;
            num1 = ExceptionOrderList.DeleteModel() ? num2 : num2;
            continue;
          case 1:
          case 2:
            if (!flag)
              goto label_3;
            else
              goto case 3;
          case 3:
            // ISSUE: reference to a compiler-generated field
            this._IteratorRegistry((object) this, ExceptionOrderList.accountRegistry);
            num1 = 5;
            continue;
          case 5:
            goto label_7;
          default:
            num1 = 3;
            continue;
        }
      }
label_3:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanged(string def)
    {
      int num = 3;
      if (true)
        goto label_3;
label_1:
      bool flag;
      if (!flag)
        return;
      goto label_5;
label_3:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_5;
          case 1:
          case 4:
            goto label_1;
          case 3:
            // ISSUE: reference to a compiler-generated field
            flag = this.visitorRegistry != null;
            if (ExceptionOrderList.SelectModel())
            {
              num = 4;
              continue;
            }
            goto label_7;
          case 5:
            goto label_7;
          default:
            if (ExceptionOrderList.SelectModel())
            {
              num = 0;
              continue;
            }
            goto label_5;
        }
      }
label_7:
      return;
label_5:
      // ISSUE: reference to a compiler-generated field
      this.visitorRegistry((object) this, new PropertyChangedEventArgs(def));
      num = 5;
      goto label_3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CollectFacade(ManagerObserverObject reference)
    {
      this.SendPropertyChanging();
      reference.Title = this;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void StartFacade(ManagerObserverObject param)
    {
      this.SendPropertyChanging();
      param.Title = (ExceptionOrderList) null;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static ExceptionOrderList()
    {
      PageAdvisorStructBuilder.PrepareCreator();
      ExceptionOrderList.accountRegistry = new PropertyChangingEventArgs(string.Empty);
    }

    internal static bool SelectModel() => true;

    internal static bool DeleteModel() => false;
  }
}
