// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Description.WebHttpEndpoint
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Diagnostics;
using System.Runtime.InteropServices;
using System.ServiceModel.Web;

namespace System.ServiceModel.Description
{
  [DebuggerDisplay("Address={address}")]
  [DebuggerDisplay("Name={name}")]
  [ComVisible(false)]
  public class WebHttpEndpoint : WebServiceEndpoint
  {
    private static Type WebHttpEndpointType = typeof (WebHttpEndpoint);

    public WebHttpEndpoint(ContractDescription contract)
      : this(contract, (EndpointAddress) null)
    {
    }

    public WebHttpEndpoint(ContractDescription contract, EndpointAddress address)
      : base(contract, address)
    {
      this.Behaviors.Add((IEndpointBehavior) new WebHttpBehavior());
    }

    public bool HelpEnabled
    {
      get => this.WebHttpBehavior.HelpEnabled;
      set => this.WebHttpBehavior.HelpEnabled = value;
    }

    public WebMessageFormat DefaultOutgoingResponseFormat
    {
      get => this.WebHttpBehavior.DefaultOutgoingResponseFormat;
      set => this.WebHttpBehavior.DefaultOutgoingResponseFormat = value;
    }

    public bool AutomaticFormatSelectionEnabled
    {
      get => this.WebHttpBehavior.AutomaticFormatSelectionEnabled;
      set => this.WebHttpBehavior.AutomaticFormatSelectionEnabled = value;
    }

    public bool FaultExceptionEnabled
    {
      get => this.WebHttpBehavior.FaultExceptionEnabled;
      set => this.WebHttpBehavior.FaultExceptionEnabled = value;
    }

    private WebHttpBehavior WebHttpBehavior => this.Behaviors.Find<WebHttpBehavior>() ?? throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.WebBehaviorNotFoundWithEndpoint, (object) typeof (WebHttpEndpoint).Name, (object) typeof (WebHttpBehavior).Name)));

    protected override Type WebEndpointType => WebHttpEndpoint.WebHttpEndpointType;
  }
}
