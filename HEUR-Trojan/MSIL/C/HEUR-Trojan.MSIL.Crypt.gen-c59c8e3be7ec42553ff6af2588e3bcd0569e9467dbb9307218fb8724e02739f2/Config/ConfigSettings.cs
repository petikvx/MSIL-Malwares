// Decompiled with JetBrains decompiler
// Type: Cradiator.Config.ConfigSettings
// Assembly: EvidenceTypeDescript, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B50F5F07-D63E-4094-B80D-E78774C87D41
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c59c8e3be7ec42553ff6af2588e3bcd0569e9467dbb9307218fb8724e02739f2.exe

using Cradiator.Extensions;
using log4net;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Reflection;

namespace Cradiator.Config
{
  public class ConfigSettings : ViewSettings, IConfigSettings, IViewSettings
  {
    private const int DefaultPollingFrequency = 30;
    private static readonly ConfigLocation _configLocation = new ConfigLocation();
    private readonly IList<IConfigObserver> _observers = (IList<IConfigObserver>) new List<IConfigObserver>();
    private static readonly ILog _log = LogManager.GetLogger(typeof (ConfigSettings).Name);
    private IDictionary<string, string> _usernameMap = (IDictionary<string, string>) new Dictionary<string, string>();
    private readonly UserNameMappingReader _userNameMappingReader = new UserNameMappingReader((IConfigLocation) ConfigSettings._configLocation);
    private ICollection<ViewSettings> _viewList = (ICollection<ViewSettings>) new List<ViewSettings>();
    private readonly Queue<ViewSettings> _viewQueue = new Queue<ViewSettings>();
    private int _pollFrequency;
    private bool _showCountdown;
    private bool _showProgress;
    private string _brokenBuildSound;
    private string _fixedBuildSound;
    private string _brokenBuildText;
    private string _fixedBuildText;
    private bool _playSounds;
    private bool _playSpeech;
    private string _speechVoiceName;
    private string _breakerGuiltStrategy;
    private const string PollFrequencyKey = "PollFrequency";
    private const string ShowCountdownKey = "ShowCountdown";
    private const string ShowProgressKey = "ShowProgress";
    private const string PlaySoundsKey = "PlaySounds";
    private const string BrokenBuildSoundKey = "BrokenBuildSound";
    private const string FixedBuildSoundKey = "FixedBuildSound";
    private const string BrokenBuildTextKey = "BrokenBuildText";
    private const string FixedBuildTextKey = "FixedBuildText";
    private const string PlaySpeechKey = "PlaySpeech";
    private const string SpeechVoiceNameKey = "SpeechVoiceName";
    private const string BreakerGuiltStrategyKey = "BreakerGuiltStrategy";

    public void Load()
    {
      this.LoadViewSettings();
      this.ApplyViewSettings();
      System.Configuration.Configuration config = ConfigSettings.OpenExeConfiguration();
      this.PollFrequency = config.GetIntProperty("PollFrequency", 30);
      this.ShowCountdown = config.GetBoolProperty("ShowCountdown");
      this.ShowProgress = config.GetBoolProperty("ShowProgress");
      this.PlaySounds = config.GetBoolProperty("PlaySounds");
      this.PlaySpeech = config.GetBoolProperty("PlaySpeech");
      this.BrokenBuildSound = config.GetProperty("BrokenBuildSound").Value;
      this.FixedBuildSound = config.GetProperty("FixedBuildSound").Value;
      this.BrokenBuildText = config.GetProperty("BrokenBuildText").Value;
      this.FixedBuildText = config.GetProperty("FixedBuildText").Value;
      this.SpeechVoiceName = config.GetProperty("SpeechVoiceName").Value;
      this._breakerGuiltStrategy = config.GetProperty("BreakerGuiltStrategy").Value;
      this._usernameMap = this._userNameMappingReader.Read();
    }

    public void Save()
    {
      try
      {
        if (this.IsOneView)
          ViewSettingsParser.Modify(ConfigSettings._configLocation.FileName, new ViewSettings()
          {
            URL = this.URL,
            ProjectNameRegEx = this.ProjectNameRegEx,
            CategoryRegEx = this.CategoryRegEx,
            ServerNameRegEx = this.ServerNameRegEx,
            SkinName = this.SkinName,
            ViewName = this.ViewName,
            ShowOnlyBroken = this.ShowOnlyBroken,
            ShowServerName = this.ShowServerName,
            ShowOutOfDate = this.ShowOutOfDate,
            OutOfDateDifferenceInMinutes = this.OutOfDateDifferenceInMinutes
          });
        System.Configuration.Configuration configuration = ConfigSettings.OpenExeConfiguration();
        configuration.AppSettings.Settings["PollFrequency"].Value = this.PollFrequency.ToString();
        configuration.AppSettings.Settings["ShowCountdown"].Value = this.ShowCountdown.ToString();
        KeyValueConfigurationElement setting1 = configuration.AppSettings.Settings["ShowProgress"];
        bool flag = this.ShowProgress;
        string str1 = flag.ToString();
        setting1.Value = str1;
        KeyValueConfigurationElement setting2 = configuration.AppSettings.Settings["PlaySounds"];
        flag = this.PlaySounds;
        string str2 = flag.ToString();
        setting2.Value = str2;
        KeyValueConfigurationElement setting3 = configuration.AppSettings.Settings["PlaySpeech"];
        flag = this.PlaySpeech;
        string str3 = flag.ToString();
        setting3.Value = str3;
        configuration.AppSettings.Settings["BrokenBuildSound"].Value = this.BrokenBuildSound;
        configuration.AppSettings.Settings["FixedBuildSound"].Value = this.FixedBuildSound;
        configuration.AppSettings.Settings["BrokenBuildText"].Value = this.BrokenBuildText;
        configuration.AppSettings.Settings["FixedBuildText"].Value = this.FixedBuildText;
        configuration.AppSettings.Settings["SpeechVoiceName"].Value = this.SpeechVoiceName;
        configuration.AppSettings.Settings["BreakerGuiltStrategy"].Value = this._breakerGuiltStrategy;
        configuration.Save(ConfigurationSaveMode.Minimal);
      }
      catch (Exception ex)
      {
        ConfigSettings._log.Error((object) ex.Message, ex);
      }
    }

    public void RotateView()
    {
      if (this.IsOneView)
        return;
      this.ApplyViewSettings();
      this.NotifyObservers();
    }

    private void ApplyViewSettings()
    {
      if (this._viewQueue.Count == 0)
        this._viewList.ForEach<ViewSettings>(new Action<ViewSettings>(this._viewQueue.Enqueue));
      ViewSettings viewSettings = this._viewQueue.Dequeue();
      this.URL = viewSettings.URL;
      this.SkinName = viewSettings.SkinName;
      this.ProjectNameRegEx = viewSettings.ProjectNameRegEx;
      this.CategoryRegEx = viewSettings.CategoryRegEx;
      this.ServerNameRegEx = viewSettings.ServerNameRegEx;
      this.ViewName = viewSettings.ViewName;
      this.ShowOnlyBroken = viewSettings.ShowOnlyBroken;
      this.ShowServerName = viewSettings.ShowServerName;
      this.ShowOutOfDate = viewSettings.ShowOutOfDate;
      this.OutOfDateDifferenceInMinutes = viewSettings.OutOfDateDifferenceInMinutes;
    }

    private void LoadViewSettings()
    {
      this._viewList = ViewSettingsParser.Read(ConfigSettings._configLocation.FileName);
      this._viewQueue.Clear();
    }

    public void AddObserver(IConfigObserver observer) => this._observers.Add(observer);

    public void NotifyObservers()
    {
      foreach (IConfigObserver observer in (IEnumerable<IConfigObserver>) this._observers)
        observer.ConfigUpdated(this);
    }

    private static System.Configuration.Configuration OpenExeConfiguration() => ConfigurationManager.OpenExeConfiguration(Assembly.GetExecutingAssembly().Location);

    public void Log() => ConfigSettings._log.InfoFormat("Config file updated. {0}Settings: {1}", this.IsMultiView ? (object) "(non-view) " : (object) "", (object) this);

    public override string ToString() => this.IsOneView ? string.Format("Url={0}, SkinName={1}, PollFrequency={2}, ProjectNameRegEx={3}, ShowCountdown={4}, ShowCountdown={5}, PlaySounds={6}, PlaySpeech={7}, BrokenBuildSound={8}, BrokenBuildText={9}, FixedBuildSound={10}, FixedBuildText={11}, SpeechVoiceName={12}, CategoryRegEx={13}, BreakerGuiltStrategy={14}", (object) this._url, (object) this._skinName, (object) this._pollFrequency, (object) this._projectNameRegEx, (object) this._showCountdown, (object) this._showProgress, (object) this._playSounds, (object) this._playSpeech, (object) this._brokenBuildSound, (object) this._brokenBuildText, (object) this._fixedBuildSound, (object) this._fixedBuildText, (object) this._speechVoiceName, (object) this._categoryRegEx, (object) this._breakerGuiltStrategy) : string.Format("PollFrequency={0}, ShowCountdown={1}, ShowProgress={2}, BrokenBuildSound={3}, FixedBuildSound={4}, BrokenBuildText={5}, FixedBuildText={6}, PlaySounds={7}, PlaySpeech={8}, SpeechVoiceName={9}, BreakerGuiltStrategy={10}", (object) this._pollFrequency, (object) this._showCountdown, (object) this._showProgress, (object) this._brokenBuildSound, (object) this._fixedBuildSound, (object) this._brokenBuildText, (object) this._fixedBuildText, (object) this._playSounds, (object) this._playSpeech, (object) this._speechVoiceName, (object) this._breakerGuiltStrategy);

    public int PollFrequency
    {
      get => this._pollFrequency;
      set
      {
        if (this._pollFrequency == value)
          return;
        this._pollFrequency = value;
        this.Notify(nameof (PollFrequency));
      }
    }

    public bool ShowCountdown
    {
      get => this._showCountdown;
      set
      {
        if (this._showCountdown == value)
          return;
        this._showCountdown = value;
        this.Notify(nameof (ShowCountdown));
      }
    }

    public bool ShowProgress
    {
      get => this._showProgress;
      set
      {
        if (this._showProgress == value)
          return;
        this._showProgress = value;
        this.Notify(nameof (ShowProgress));
      }
    }

    public IDictionary<string, string> UsernameMap
    {
      get => this._usernameMap;
      set => this._usernameMap = value;
    }

    public string BrokenBuildSound
    {
      get => this._brokenBuildSound;
      set
      {
        if (this._brokenBuildSound == value)
          return;
        this._brokenBuildSound = value;
        this.Notify(nameof (BrokenBuildSound));
      }
    }

    public string FixedBuildSound
    {
      get => this._fixedBuildSound;
      set
      {
        if (this._fixedBuildSound == value)
          return;
        this._fixedBuildSound = value;
        this.Notify(nameof (FixedBuildSound));
      }
    }

    public string BrokenBuildText
    {
      get => this._brokenBuildText;
      set
      {
        if (this._brokenBuildText == value)
          return;
        this._brokenBuildText = value;
        this.Notify(nameof (BrokenBuildText));
      }
    }

    public string FixedBuildText
    {
      get => this._fixedBuildText;
      set
      {
        if (this._fixedBuildText == value)
          return;
        this._fixedBuildText = value;
        this.Notify(nameof (FixedBuildText));
      }
    }

    public bool PlaySounds
    {
      get => this._playSounds;
      set
      {
        if (this._playSounds == value)
          return;
        this._playSounds = value;
        this.Notify(nameof (PlaySounds));
      }
    }

    public bool PlaySpeech
    {
      get => this._playSpeech;
      set
      {
        if (this._playSpeech == value)
          return;
        this._playSpeech = value;
        this.Notify(nameof (PlaySpeech));
      }
    }

    public string SpeechVoiceName
    {
      get => this._speechVoiceName;
      set
      {
        if (this._speechVoiceName == value)
          return;
        this._speechVoiceName = value;
        this.Notify(nameof (SpeechVoiceName));
      }
    }

    public GuiltStrategyType BreakerGuiltStrategy => this._breakerGuiltStrategy == "First" ? GuiltStrategyType.First : GuiltStrategyType.Last;

    public TimeSpan PollFrequencyTimeSpan => TimeSpan.FromSeconds((double) this.PollFrequency);

    public bool IsMultiView => this._viewList.Count > 1;

    public bool IsOneView => this._viewList.Count == 1;
  }
}
