// Decompiled with JetBrains decompiler
// Type: GenericMath.BinarySearch
// Assembly: Yu77, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CEBE5E3D-11C5-45E0-97BE-FD3217A3B672
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.Crypt.gen-a4c7baacf7ed45683e981b74160b24c21be4e1d86185106da9f5028724f8e21d.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;

namespace GenericMath
{
  internal class BinarySearch
  {
    public static string F_0 = "VDGnByA";
    private static string PXY;

    public static string F_1
    {
      get => "JZTc";
      set => BinarySearch.PXY = value;
    }

    public void XADXX()
    {
      MyBinarySearchTree binarySearchTree;
      binarySearchTree.Insert(23);
      binarySearchTree.Insert(45);
      binarySearchTree.Insert(16);
      binarySearchTree.Insert(37);
      binarySearchTree.Insert(3);
      binarySearchTree.Insert(99);
      binarySearchTree.Insert(22);
      Console.WriteLine("Inorder traversal: ");
      binarySearchTree.inOrder(binarySearchTree.root);
      Console.WriteLine();
      Console.WriteLine("Perorder traversal: ");
      binarySearchTree.preOrder(binarySearchTree.root);
      Console.WriteLine();
      Console.WriteLine("Postorder traversal: ");
      binarySearchTree.postOrder(binarySearchTree.root);
      Console.WriteLine();
      int min = binarySearchTree.FindMin();
      Console.WriteLine("The maximum value in the tree is: " + Conversions.ToString(binarySearchTree.FindMax()));
      Console.WriteLine("The minimum value in the tree is: " + Conversions.ToString(min));
      int key1 = 37;
      int key2 = 4;
      if (Information.IsNothing((object) binarySearchTree.Find(key1)))
        Console.WriteLine("Vlaue " + Conversions.ToString(key1) + "doesn't exist");
      else
        Console.WriteLine("Value " + Conversions.ToString(key1) + "exits in the tree");
      if (Information.IsNothing((object) binarySearchTree.Find(key2)))
        Console.WriteLine("Value " + Conversions.ToString(key2) + "doesn't exist");
      else
        Console.WriteLine("Value " + Conversions.ToString(key2) + "exists in the tree");
    }
  }
}
