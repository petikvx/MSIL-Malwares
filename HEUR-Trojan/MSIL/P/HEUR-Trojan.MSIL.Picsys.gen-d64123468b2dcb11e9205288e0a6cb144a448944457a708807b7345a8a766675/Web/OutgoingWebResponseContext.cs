// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.OutgoingWebResponseContext
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Net;
using System.Runtime.InteropServices;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.Text;

namespace System.ServiceModel.Web
{
  [ComVisible(false)]
  public class OutgoingWebResponseContext
  {
    internal static readonly string WebResponseFormatPropertyName = "WebResponseFormatProperty";
    internal static readonly string AutomatedFormatSelectionContentTypePropertyName = nameof (AutomatedFormatSelectionContentTypePropertyName);
    private Encoding bindingWriteEncoding;
    private OperationContext operationContext;

    internal OutgoingWebResponseContext(OperationContext operationContext) => this.operationContext = operationContext;

    public long ContentLength
    {
      get => long.Parse(this.MessageProperty.Headers[HttpResponseHeader.ContentLength], (IFormatProvider) CultureInfo.InvariantCulture);
      set => this.MessageProperty.Headers[HttpResponseHeader.ContentLength] = value.ToString((IFormatProvider) CultureInfo.InvariantCulture);
    }

    public string ContentType
    {
      get => this.MessageProperty.Headers[HttpResponseHeader.ContentType];
      set => this.MessageProperty.Headers[HttpResponseHeader.ContentType] = value;
    }

    public string ETag
    {
      get => this.MessageProperty.Headers[HttpResponseHeader.ETag];
      set => this.MessageProperty.Headers[HttpResponseHeader.ETag] = value;
    }

    public WebHeaderCollection Headers => this.MessageProperty.Headers;

    public DateTime LastModified
    {
      get
      {
        string header = this.MessageProperty.Headers[HttpRequestHeader.LastModified];
        DateTime result;
        return !string.IsNullOrEmpty(header) && DateTime.TryParse(header, (IFormatProvider) CultureInfo.InvariantCulture, DateTimeStyles.None, out result) ? result : DateTime.MinValue;
      }
      set => this.MessageProperty.Headers[HttpResponseHeader.LastModified] = value.Kind == DateTimeKind.Utc ? value.ToString("R", (IFormatProvider) CultureInfo.InvariantCulture) : value.ToUniversalTime().ToString("R", (IFormatProvider) CultureInfo.InvariantCulture);
    }

    public string Location
    {
      get => this.MessageProperty.Headers[HttpResponseHeader.Location];
      set => this.MessageProperty.Headers[HttpResponseHeader.Location] = value;
    }

    public HttpStatusCode StatusCode
    {
      get => this.MessageProperty.StatusCode;
      set => this.MessageProperty.StatusCode = value;
    }

    public string StatusDescription
    {
      get => this.MessageProperty.StatusDescription;
      set => this.MessageProperty.StatusDescription = value;
    }

    public bool SuppressEntityBody
    {
      get => this.MessageProperty.SuppressEntityBody;
      set => this.MessageProperty.SuppressEntityBody = value;
    }

    public WebMessageFormat? Format
    {
      get => !this.operationContext.OutgoingMessageProperties.ContainsKey(OutgoingWebResponseContext.WebResponseFormatPropertyName) ? new WebMessageFormat?() : this.operationContext.OutgoingMessageProperties[OutgoingWebResponseContext.WebResponseFormatPropertyName] as WebMessageFormat?;
      set
      {
        if (value.HasValue)
          this.operationContext.OutgoingMessageProperties[OutgoingWebResponseContext.WebResponseFormatPropertyName] = WebMessageFormatHelper.IsDefined(value.Value) ? (object) value.Value : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (value)));
        else
          this.operationContext.OutgoingMessageProperties[OutgoingWebResponseContext.WebResponseFormatPropertyName] = (object) null;
        this.AutomatedFormatSelectionContentType = (string) null;
      }
    }

    internal string AutomatedFormatSelectionContentType
    {
      get => !this.operationContext.OutgoingMessageProperties.ContainsKey(OutgoingWebResponseContext.AutomatedFormatSelectionContentTypePropertyName) ? (string) null : this.operationContext.OutgoingMessageProperties[OutgoingWebResponseContext.AutomatedFormatSelectionContentTypePropertyName] as string;
      set => this.operationContext.OutgoingMessageProperties[OutgoingWebResponseContext.AutomatedFormatSelectionContentTypePropertyName] = (object) value;
    }

    public Encoding BindingWriteEncoding
    {
      get
      {
        if (this.bindingWriteEncoding == null)
        {
          string id = this.operationContext.EndpointDispatcher.Id;
          foreach (ServiceEndpoint endpoint in (Collection<ServiceEndpoint>) this.operationContext.Host.Description.Endpoints)
          {
            if (endpoint.Id == id)
            {
              WebMessageEncodingBindingElement encodingBindingElement = endpoint.Binding.CreateBindingElements().Find<WebMessageEncodingBindingElement>();
              if (encodingBindingElement != null)
                this.bindingWriteEncoding = encodingBindingElement.WriteEncoding;
            }
          }
        }
        return this.bindingWriteEncoding;
      }
    }

    internal HttpResponseMessageProperty MessageProperty
    {
      get
      {
        if (!this.operationContext.OutgoingMessageProperties.ContainsKey(HttpResponseMessageProperty.Name))
          this.operationContext.OutgoingMessageProperties.Add(HttpResponseMessageProperty.Name, (object) new HttpResponseMessageProperty());
        return this.operationContext.OutgoingMessageProperties[HttpResponseMessageProperty.Name] as HttpResponseMessageProperty;
      }
    }

    public void SetETag(string entityTag) => this.ETag = OutgoingWebResponseContext.GenerateValidEtagFromString(entityTag);

    public void SetETag(int entityTag) => this.ETag = OutgoingWebResponseContext.GenerateValidEtag((object) entityTag);

    public void SetETag(long entityTag) => this.ETag = OutgoingWebResponseContext.GenerateValidEtag((object) entityTag);

    public void SetETag(Guid entityTag) => this.ETag = OutgoingWebResponseContext.GenerateValidEtag((object) entityTag);

    public void SetStatusAsCreated(Uri locationUri)
    {
      if (locationUri == (Uri) null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (locationUri));
      this.StatusCode = HttpStatusCode.Created;
      this.Location = locationUri.ToString();
    }

    public void SetStatusAsNotFound() => this.StatusCode = HttpStatusCode.NotFound;

    public void SetStatusAsNotFound(string description)
    {
      this.StatusCode = HttpStatusCode.NotFound;
      this.StatusDescription = description;
    }

    internal static string GenerateValidEtagFromString(string entityTag)
    {
      if (string.IsNullOrEmpty(entityTag))
        return (string) null;
      if (entityTag.StartsWith("W/\"", StringComparison.OrdinalIgnoreCase) && entityTag.EndsWith("\"", StringComparison.OrdinalIgnoreCase))
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.WeakEntityTagsNotSupported, (object) entityTag)));
      }
      List<int> intList = (List<int>) null;
      int index1 = entityTag.Length - 1;
      bool flag1 = entityTag[0] == '"';
      bool flag2 = entityTag[index1] == '"';
      if (index1 == 0 & flag1)
        flag2 = false;
      bool flag3 = !flag1 || !flag2;
      if (flag1 && !flag2)
      {
        if (intList == null)
          intList = new List<int>();
        intList.Add(0);
      }
      for (int index2 = 1; index2 < index1; ++index2)
      {
        if (entityTag[index2] == '"' && entityTag[index2 - 1] != '\\')
        {
          if (intList == null)
            intList = new List<int>();
          intList.Add(index2 + intList.Count);
        }
      }
      if (!flag1 & flag2 && entityTag[index1 - 1] != '\\')
      {
        if (intList == null)
          intList = new List<int>();
        intList.Add(index1 + intList.Count);
      }
      if (flag3 || intList != null)
      {
        int num = intList == null ? 0 : intList.Count;
        StringBuilder stringBuilder = new StringBuilder(entityTag, entityTag.Length + num + 2);
        for (int index3 = 0; index3 < num; ++index3)
          stringBuilder.Insert(intList[index3], '\\');
        if (flag3)
        {
          stringBuilder.Insert(entityTag.Length + num, '"');
          stringBuilder.Insert(0, '"');
        }
        entityTag = stringBuilder.ToString();
      }
      return entityTag;
    }

    internal static string GenerateValidEtag(object entityTag) => string.Format((IFormatProvider) CultureInfo.InvariantCulture, "\"{0}\"", new object[1]
    {
      (object) entityTag.ToString()
    });
  }
}
