// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Importers.AnnotationPropertyImporter
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Objects;
using ProjNet.Pools;
using ProjNet.Roles;
using ProjNet.Rules;
using ProjNet.Visitors;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using TYPELIBA.Collections;
using TYPELIBA.Identifiers;
using TYPELIBA.Lists;
using TYPELIBA.Serialization;

namespace TYPELIBA.Importers
{
  public class AnnotationPropertyImporter : VisitorMapSerializer, Advisor, Listener, Worker
  {
    private RegistryPolicyList rule;
    private ExceptionRule m_Helper;
    private PrototypeEventRole _Reader;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal AnnotationPropertyImporter(
      RegistryPolicyList instance,
      ExceptionRule vis,
      PrototypeEventRole serv,
      List<AdapterErrorPool> cfg2,
      string info3,
      string res4,
      long task5_Y,
      string pol6,
      string spec7,
      string counter8)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector(info3, res4, task5_Y, pol6, counter8, spec7);
      this.rule = instance;
      this.m_Helper = vis;
      this._Reader = serv;
      if (cfg2.Count != 3)
        throw new ArgumentException("Axis info should contain three axes for geocentric coordinate systems");
      this.FindObject(cfg2);
    }

    public static Advisor WGS84
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => new Candidate().FillObject("WGS84 Geocentric", (RegistryPolicyList) TYPELIBA.Messages.Attribute.WGS84, InterpreterRule.ManageProcess(), (PrototypeEventRole) PageProcessVisitor.Greenwich);
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public RegistryPolicyList RemoveState() => this.rule;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void UpdateState(RegistryPolicyList first) => this.rule = first;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ExceptionRule CalcState() => this.m_Helper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void WriteState(ExceptionRule ident) => this.m_Helper = ident;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override ProccesorAccountCollection RunState(int first) => (ProccesorAccountCollection) this.m_Helper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public PrototypeEventRole CalculateState() => this._Reader;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CustomizeState(PrototypeEventRole last) => this._Reader = last;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError()
    {
      int num1 = 2;
      string str;
      while (true)
      {
        int num2;
        int mindef;
        StringBuilder stringBuilder;
        int num3;
        switch (num1)
        {
          case 0:
            stringBuilder.AppendFormat("GEOCCS[\"{0}\", {1}, {2}, {3}", (object) this.Name, (object) this.RemoveState().RevertError(), (object) this.CalculateState().RevertError(), (object) this.CalcState().RevertError());
            if (this.SetupObject().Count == 3 && !(this.SetupObject()[0].Name != "X"))
            {
              int num4 = 8;
              num1 = AnnotationPropertyImporter.QueryDispatcher() ? num4 : num4;
              continue;
            }
            goto label_16;
          case 1:
label_6:
            if (!string.IsNullOrEmpty(this.LoginState()) && this.RestartState() > 0L)
            {
              if (AnnotationPropertyImporter.FlushDispatcher())
              {
                num1 = 4;
                continue;
              }
              goto case 0;
            }
            else
              goto label_12;
          case 2:
            stringBuilder = new StringBuilder();
            num2 = 0;
            goto label_20;
          case 3:
          case 5:
            if (!(this.SetupObject()[2].Name != "Z"))
            {
              num3 = this.SetupObject()[2].PrintObject() != LinkTransactionType.North ? 1 : 0;
              goto label_17;
            }
            else
              goto label_16;
          case 4:
          case 6:
            stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.LoginState(), (object) this.RestartState());
            goto label_12;
          case 7:
label_3:
            ++mindef;
            break;
          case 8:
            if (this.SetupObject()[0].PrintObject() == LinkTransactionType.Other && !(this.SetupObject()[1].Name != "Y") && this.SetupObject()[1].PrintObject() == LinkTransactionType.East)
            {
              num2 = 5;
              goto label_20;
            }
            else
              goto label_16;
          case 9:
            goto label_23;
          default:
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto label_23;
        }
label_4:
        if (mindef >= this.SetupObject().Count)
        {
          num2 = 1;
          goto label_20;
        }
        else
        {
          stringBuilder.AppendFormat(", {0}", (object) this.InitState(mindef).EnableObject());
          goto label_3;
        }
label_12:
        stringBuilder.Append("]");
        str = stringBuilder.ToString();
        num1 = 9;
        continue;
label_16:
        num3 = 1;
label_17:
        if (num3 != 0)
        {
          mindef = 0;
          goto label_4;
        }
        else
          goto label_6;
label_20:
        num1 = num2;
      }
label_23:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState()
    {
      int num1 = 1;
      StringBuilder stringBuilder;
      List<AdapterErrorPool>.Enumerator enumerator;
      string str;
      while (true)
      {
        switch (num1)
        {
          case 0:
            stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_CoordinateSystem Dimension=\"{0}\"><CS_GeocentricCoordinateSystem>{1}", new object[2]
            {
              (object) this.IncludeState(),
              (object) this.AddProcess()
            });
            num1 = 4;
            continue;
          case 1:
            stringBuilder = new StringBuilder();
            num1 = 0;
            continue;
          case 2:
          case 4:
            enumerator = this.SetupObject().GetEnumerator();
            goto case 3;
          case 3:
          case 5:
            try
            {
label_7:
              while (enumerator.MoveNext())
              {
                AdapterErrorPool current = enumerator.Current;
                int num2 = 2;
                if (AnnotationPropertyImporter.FlushDispatcher())
                  goto label_5;
label_4:
                stringBuilder.Append(current.GetObject());
                continue;
label_5:
                while (true)
                {
                  switch (num2)
                  {
                    case 0:
                    case 2:
                      goto label_4;
                    case 1:
                    case 3:
                      goto label_7;
                    default:
                      num2 = 3;
                      continue;
                  }
                }
              }
            }
            finally
            {
              enumerator.Dispose();
            }
            stringBuilder.AppendFormat("{0}{1}{2}</CS_GeocentricCoordinateSystem></CS_CoordinateSystem>", (object) this.RemoveState().InterruptState(), (object) this.CalcState().InterruptState(), (object) this.CalculateState().InterruptState());
            str = stringBuilder.ToString();
            num1 = 6;
            continue;
          case 6:
            goto label_14;
          default:
            num1 = 5;
            continue;
        }
      }
label_14:
      return str;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool CompareState(object config)
    {
      int num1 = 5;
      AnnotationPropertyImporter propertyImporter;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              flag2 = !(config is AnnotationPropertyImporter);
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_11;
            case 1:
            case 2:
              goto label_3;
            case 3:
              goto label_14;
            case 4:
              goto label_1;
            case 6:
              goto label_11;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
        if (propertyImporter.RemoveState().CompareState((object) this.RemoveState()) && propertyImporter.CalcState().CompareState((object) this.CalcState()))
        {
          num1 = 6;
          continue;
        }
        goto label_12;
label_3:
        if (flag2)
        {
          flag1 = false;
          num1 = 3;
        }
        else
        {
          propertyImporter = config as AnnotationPropertyImporter;
          goto label_1;
        }
      }
label_11:
      int num3 = propertyImporter.CalculateState().CompareState((object) this.CalculateState()) ? 1 : 0;
      goto label_13;
label_12:
      num3 = 0;
label_13:
      flag1 = num3 != 0;
label_14:
      return flag1;
    }

    internal static bool FlushDispatcher() => true;

    internal static bool QueryDispatcher() => false;
  }
}
