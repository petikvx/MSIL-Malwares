// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.UI.HeaderControl1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace SmartAssembly.SmartExceptionsCore.UI
{
  [DesignerCategory("Code")]
  public class HeaderControl1 : Control
  {
    private Label label = new Label();
    private Image image;
    private Icon applicationIcon;
    private Bitmap stateImage;
    private IconState1 iconState;
    private float dx = 1f;
    private float dy = 1f;

    public IconState1 IconState
    {
      get => this.iconState;
      set
      {
        if (this.iconState == value)
          return;
        this.iconState = value;
        switch (this.iconState)
        {
          case IconState1.Error:
            this.stateImage = Resources.GetBitmap("error16");
            break;
          case IconState1.Warning:
            this.stateImage = Resources.GetBitmap("warning16");
            break;
          default:
            this.stateImage = (Bitmap) null;
            break;
        }
        this.Refresh();
      }
    }

    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override string Text
    {
      get => this.label.Text;
      set => this.label.Text = value;
    }

    public Image Image
    {
      get => this.image;
      set
      {
        this.image = value;
        this.Refresh();
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing)
      {
        if (this.applicationIcon != null)
        {
          this.applicationIcon.Dispose();
          this.applicationIcon = (Icon) null;
        }
        if (this.image != null)
        {
          this.image.Dispose();
          this.image = (Image) null;
        }
        if (this.stateImage != null)
        {
          this.stateImage.Dispose();
          this.stateImage = (Bitmap) null;
        }
      }
      base.Dispose(disposing);
    }

    protected override void OnResize(EventArgs e)
    {
      this.label.SetBounds(Convert.ToInt32(13f * this.dx), Convert.ToInt32(15f * this.dy), this.Width - Convert.ToInt32(69f * this.dx), this.Height - Convert.ToInt32(18f * this.dy));
      base.OnResize(e);
    }

    protected override void ScaleCore(float dx, float dy)
    {
      this.dx = dx;
      this.dy = dy;
      base.ScaleCore(dx, dy);
      this.OnResize(EventArgs.Empty);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      e.Graphics.DrawLine(SystemPens.ControlDark, 0, this.ClientSize.Height - 2, this.ClientSize.Width, this.ClientSize.Height - 2);
      e.Graphics.DrawLine(SystemPens.ControlLightLight, 0, this.ClientSize.Height - 1, this.ClientSize.Width, this.ClientSize.Height - 1);
      Rectangle rectangle = new Rectangle(this.ClientSize.Width - Convert.ToInt32(48f * this.dx), Convert.ToInt32(11f * this.dy), Convert.ToInt32(32f * this.dx), Convert.ToInt32(32f * this.dy));
      if (this.image != null)
      {
        e.Graphics.DrawImage(this.image, rectangle, new Rectangle(0, 0, 32, 32), GraphicsUnit.Pixel);
      }
      else
      {
        if (this.applicationIcon == null)
          return;
        e.Graphics.DrawIcon(this.applicationIcon, rectangle);
        if (this.stateImage == null)
          return;
        e.Graphics.DrawImage((Image) this.stateImage, new Rectangle(rectangle.Right - Convert.ToInt32(12f * this.dx), rectangle.Bottom - Convert.ToInt32(12f * this.dy), Convert.ToInt32(16f * this.dx), Convert.ToInt32(16f * this.dy)), new Rectangle(0, 0, 16, 16), GraphicsUnit.Pixel);
      }
    }

    protected override void OnFontChanged(EventArgs e)
    {
      try
      {
        this.label.Font = new Font(this.Font, FontStyle.Bold);
        base.OnFontChanged(e);
      }
      catch
      {
      }
    }

    public HeaderControl1()
    {
      try
      {
        this.label.FlatStyle = FlatStyle.System;
        this.label.Font = new Font(this.Font, FontStyle.Bold);
      }
      catch
      {
      }
      this.Controls.Add((Control) this.label);
      this.BackColor = SystemColors.Window;
      this.TabStop = false;
      this.Dock = DockStyle.Top;
      this.Height = 58;
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.DoubleBuffer, true);
      this.applicationIcon = Win321.GetApplicationIcon();
      this.OnResize(EventArgs.Empty);
    }

    public HeaderControl1(string text)
      : this()
    {
      this.label.Text = text;
    }
  }
}
