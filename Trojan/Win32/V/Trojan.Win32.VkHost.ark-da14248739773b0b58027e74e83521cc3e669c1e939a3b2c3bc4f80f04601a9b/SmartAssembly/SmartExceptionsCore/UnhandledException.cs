// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.UnhandledException
// Assembly: itzsparta, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F0D3E75E-11A1-406D-AF2E-9B1491797EF1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.VkHost.ark-da14248739773b0b58027e74e83521cc3e669c1e939a3b2c3bc4f80f04601a9b.exe

using \u0001;
using \u0002;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;

namespace SmartAssembly.SmartExceptionsCore
{
  [Serializable]
  public class UnhandledException : Exception
  {
    public int MethodID;
    public object[] Objects;
    public int ILOffset;
    private Exception previousException;

    internal Exception \u0002() => this.previousException;

    public static Exception \u0002([In] Exception obj0) => UnhandledException.\u0002(obj0, new object[0]);

    public static Exception \u0002([In] Exception obj0, [In] object obj1) => UnhandledException.\u0002(obj0, new object[1]
    {
      obj1
    });

    public static Exception \u0002([In] Exception obj0, [In] object obj1, [In] object obj2) => UnhandledException.\u0002(obj0, new object[2]
    {
      obj1,
      obj2
    });

    public static Exception \u0002([In] Exception obj0, [In] object obj1, [In] object obj2, [In] object obj3) => UnhandledException.\u0002(obj0, new object[3]
    {
      obj1,
      obj2,
      obj3
    });

    public static Exception \u0002(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4)
    {
      return UnhandledException.\u0002(obj0, new object[4]
      {
        obj1,
        obj2,
        obj3,
        obj4
      });
    }

    public static Exception \u0002(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5)
    {
      return UnhandledException.\u0002(obj0, new object[5]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5
      });
    }

    public static Exception \u0002(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6)
    {
      return UnhandledException.\u0002(obj0, new object[6]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6
      });
    }

    public static Exception \u0002(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7)
    {
      return UnhandledException.\u0002(obj0, new object[7]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7
      });
    }

    public static Exception \u0002(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7,
      [In] object obj8)
    {
      return UnhandledException.\u0002(obj0, new object[8]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7,
        obj8
      });
    }

    public static Exception \u0002(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7,
      [In] object obj8,
      [In] object obj9)
    {
      return UnhandledException.\u0002(obj0, new object[9]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7,
        obj8,
        obj9
      });
    }

    public static Exception \u0002(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7,
      [In] object obj8,
      [In] object obj9,
      [In] object obj10)
    {
      return UnhandledException.\u0002(obj0, new object[10]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7,
        obj8,
        obj9,
        obj10
      });
    }

    public static Exception \u0002([In] Exception obj0, [In] object[] obj1)
    {
      if (\u0003.\u0001)
        return (Exception) null;
      int num1 = -1;
      int num2 = -1;
      try
      {
        StackTrace stackTrace = new StackTrace(obj0);
        if (\u0093.\u007E\u0014\u0004((object) stackTrace) > 0)
        {
          StackFrame stackFrame = \u0001\u0003.\u007E\u0015\u0004((object) stackTrace, \u0093.\u007E\u0014\u0004((object) stackTrace) - 1);
          num2 = (\u0093.\u007E\u0018\u0003((object) \u009A\u0002.\u007E\u0016\u0004((object) stackFrame)) & 16777215) - 1;
          num1 = \u0093.\u007E\u0017\u0004((object) stackFrame);
        }
      }
      catch
      {
      }
      UnhandledException unhandledException = new UnhandledException(num2, obj1, num1, obj0);
      if (obj0 is UnhandledException)
      {
        Exception exception = (obj0 as UnhandledException).\u0002();
        if (exception != null)
          obj0 = exception;
      }
      Exception exception1 = obj0;
      while (\u0006\u0003.\u007E\u0084\u0002((object) exception1) != null)
        exception1 = \u0006\u0003.\u007E\u0084\u0002((object) exception1);
      try
      {
        // ISSUE: type reference
        FieldInfo fieldInfo = \u009F\u0003.\u007E\u0080\u0003((object) \u0015\u0002.\u001B\u0003(__typeref (Exception)), \u0003.\u0002(2365), BindingFlags.Instance | BindingFlags.NonPublic);
        \u0099\u0002.\u007E\u0090\u0004((object) fieldInfo, (object) exception1, (object) unhandledException);
      }
      catch
      {
      }
      return obj0;
    }

    public override void GetObjectData([In] SerializationInfo obj0, [In] StreamingContext obj1)
    {
      \u008B\u0003.\u0087\u0002((object) this, obj0, obj1);
      // ISSUE: type reference
      \u001E\u0002.\u007E\u0096\u0004((object) obj0, \u0003.\u0002(2386), (object) this.MethodID, \u0015\u0002.\u001B\u0003(__typeref (int)));
      // ISSUE: type reference
      \u001E\u0002.\u007E\u0096\u0004((object) obj0, \u0003.\u0002(2423), (object) this.ILOffset, \u0015\u0002.\u001B\u0003(__typeref (int)));
      // ISSUE: type reference
      \u001E\u0002.\u007E\u0096\u0004((object) obj0, \u0003.\u0002(2460), (object) this.previousException, \u0015\u0002.\u001B\u0003(__typeref (Exception)));
      int num = this.Objects == null ? 0 : this.Objects.Length;
      // ISSUE: type reference
      \u001E\u0002.\u007E\u0096\u0004((object) obj0, \u0003.\u0002(2509), (object) num, \u0015\u0002.\u001B\u0003(__typeref (int)));
      for (int index = 0; index < num; ++index)
      {
        // ISSUE: type reference
        \u001E\u0002.\u007E\u0096\u0004((object) obj0, \u0004\u0003.\u0018\u0002(\u0003.\u0002(2554), (object) index), this.Objects[index], \u0015\u0002.\u001B\u0003(__typeref (object)));
      }
    }

    internal UnhandledException([In] SerializationInfo obj0, [In] StreamingContext obj1)
    {
      // ISSUE: unable to decompile the method.
    }

    internal UnhandledException([In] int obj0, [In] object[] obj1, [In] int obj2, [In] Exception obj3)
      : base(string.Format(\u0003.\u0002(2599), (object) obj0, (object) obj2))
    {
      this.MethodID = obj0;
      this.Objects = obj1;
      this.ILOffset = obj2;
      this.previousException = obj3;
    }
  }
}
