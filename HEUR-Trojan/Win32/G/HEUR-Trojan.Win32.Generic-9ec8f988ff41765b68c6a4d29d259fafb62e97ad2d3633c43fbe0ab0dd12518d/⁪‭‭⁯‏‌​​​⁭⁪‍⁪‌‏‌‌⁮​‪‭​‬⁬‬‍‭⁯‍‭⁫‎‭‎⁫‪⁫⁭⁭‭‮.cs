// Decompiled with JetBrains decompiler
// Type: ⁪‭‭⁯‏‌​​​⁭⁪‍⁪‌‏‌‌⁮​‪‭​‬⁬‬‍‭⁯‍‭⁫‎‭‎⁫‪⁫⁭⁭‭‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using Org.BouncyCastle.Asn1;
using System;
using System.Collections;
using System.IO;

public sealed class \u206A‭‭⁯‏‌​​​⁭⁪‍⁪‌‏‌‌⁮​‪‭​‬⁬‬‍‭⁯‍‭⁫‎‭‎⁫‪⁫⁭⁭‭‮
{
  private readonly byte[] \u202E‏‮‭‎⁪‭‌⁫⁪⁪‌⁭‍‌‭⁮⁯‪‮‌‍‭‏⁮‬‮‎‏‭‫‫⁭⁬⁭‫‬​⁬‪‮;
  private readonly short[] \u202B‏‭‌​‮⁭‪⁯‍‎‌⁮⁪‎⁬⁮​‫‫⁬⁪‫‪⁯‌‭‌‎⁪‌‌​⁯⁯‌⁭‭‌⁮‮;
  private readonly IList \u202C⁮⁮⁫‬⁬⁫‌⁪‬⁬⁬‎‫‎‫⁬​⁮⁪‎‏⁫‍‬​⁪⁭​‫⁮⁭‭‪⁭‍‏‍‪⁬‮;
  private readonly IList \u206F⁭⁪‭⁪⁭‏‭⁯‮‮‮‪​⁪‭‫‪‭⁭⁪‌⁫‏⁪⁪​⁫‪⁬‌⁯​​⁪⁬​⁪⁯⁮‮;
  private readonly IList \u200F⁫⁮‏‮⁪‬‪‭⁪‫‏‏‏‎⁭​‎⁫‭‏⁭⁯‍⁫​​‌‮‭⁬‏⁬⁮‫⁮⁪‎‭‌‮;

  private static IList \u202C‏‍‪‮‍​‪‌‌‪‫⁪⁭⁯⁮‮‫⁬‫‪⁬⁮​⁫‌⁫‪‮‭⁯‮‬​‬⁫⁭‫⁪‍‮(
    IList _param0,
    short _param1)
  {
    return _param0 != null ? _param0 : throw new \u202B‬⁪⁮⁬⁮‫‏‫⁯‮⁬‫‬‍⁬⁮⁬‬‫‫⁮‎‎⁬​‍‎‍‏​⁯‍‬‫‍‫‮⁯‏‮(_param1, "'signature_algorithms' is required");
  }

  public \u206A‭‭⁯‏‌​​​⁭⁪‍⁪‌‏‌‌⁮​‪‭​‬⁬‬‍‭⁯‍‭⁫‎‭‎⁫‪⁫⁭⁭‭‮(
    short[] _param1,
    IList _param2,
    IList _param3)
    : this((byte[]) null, _param1, _param2, (IList) null, _param3)
  {
  }

  public \u206A‭‭⁯‏‌​​​⁭⁪‍⁪‌‏‌‌⁮​‪‭​‬⁬‬‍‭⁯‍‭⁫‎‭‎⁫‪⁫⁭⁭‭‮(
    byte[] _param1,
    IList _param2,
    IList _param3,
    IList _param4)
    : this(_param1, (short[]) null, \u206A‭‭⁯‏‌​​​⁭⁪‍⁪‌‏‌‌⁮​‪‭​‬⁬‬‍‭⁯‍‭⁫‎‭‎⁫‪⁫⁭⁭‭‮.\u202C‏‍‪‮‍​‪‌‌‪‫⁪⁭⁯⁮‮‫⁬‫‪⁬⁮​⁫‌⁫‪‮‭⁯‮‬​‬⁫⁭‫⁪‍‮(_param2, (short) 80), _param3, _param4)
  {
  }

  private \u206A‭‭⁯‏‌​​​⁭⁪‍⁪‌‏‌‌⁮​‪‭​‬⁬‬‍‭⁯‍‭⁫‎‭‎⁫‪⁫⁭⁭‭‮(
    byte[] _param1,
    short[] _param2,
    IList _param3,
    IList _param4,
    IList _param5)
  {
    if (_param1 != null && !\u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u200B​​‌‏⁪​‭⁪‬‫‭‬⁪⁬⁯‭‍‎‭‮⁫⁪‫⁬‌⁮‪‮​⁭​‎‮‮‮‬‬‍‪‮(_param1.Length))
      throw new ArgumentException("cannot be longer than 255", "certificateRequestContext");
    if (_param2 != null && (_param2.Length < 1 || !\u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u200B​​‌‏⁪​‭⁪‬‫‭‬⁪⁬⁯‭‍‎‭‮⁫⁪‫⁬‌⁮‪‮​⁭​‎‮‮‮‬‬‍‪‮(_param2.Length)))
      throw new ArgumentException("should have length from 1 to 255", "certificateTypes");
    this.\u202E‏‮‭‎⁪‭‌⁫⁪⁪‌⁭‍‌‭⁮⁯‪‮‌‍‭‏⁮‬‮‎‏‭‫‫⁭⁬⁭‫‬​⁬‪‮ = \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u206F‬⁯‪⁬⁮⁭⁮‮‭‬‌‌‎⁪⁫‍‭‍‮‌⁬‮‏‍‪‬‮⁯‫‪‭‬⁭‏⁮⁯​‮⁬‮(_param1);
    this.\u202B‏‭‌​‮⁭‪⁯‍‎‌⁮⁪‎⁬⁮​‫‫⁬⁪‫‪⁯‌‭‌‎⁪‌‌​⁯⁯‌⁭‭‌⁮‮ = _param2;
    this.\u202C⁮⁮⁫‬⁬⁫‌⁪‬⁬⁬‎‫‎‫⁬​⁮⁪‎‏⁫‍‬​⁪⁭​‫⁮⁭‭‪⁭‍‏‍‪⁬‮ = _param3;
    this.\u206F⁭⁪‭⁪⁭‏‭⁯‮‮‮‪​⁪‭‫‪‭⁭⁪‌⁫‏⁪⁪​⁫‪⁬‌⁯​​⁪⁬​⁪⁯⁮‮ = _param4;
    this.\u200F⁫⁮‏‮⁪‬‪‭⁪‫‏‏‏‎⁭​‎⁫‭‏⁭⁯‍⁫​​‌‮‭⁬‏⁬⁮‫⁮⁪‎‭‌‮ = _param5;
  }

  public byte[] \u200B‎‮⁮‎‬‮⁪‮​‪⁪‍⁪‬‫‪‌‏⁯‭‫‍⁮⁭⁫​⁬⁮‫‭‬⁯‭‌‪‌⁬⁭‮() => \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u206F‬⁯‪⁬⁮⁭⁮‮‭‬‌‌‎⁪⁫‍‭‍‮‌⁬‮‏‍‪‬‮⁯‫‪‭‬⁭‏⁮⁯​‮⁬‮(this.\u202E‏‮‭‎⁪‭‌⁫⁪⁪‌⁭‍‌‭⁮⁯‪‮‌‍‭‏⁮‬‮‎‏‭‫‫⁭⁬⁭‫‬​⁬‪‮);

  public short[] \u200B⁮‎‮⁮‍⁯‭‍‌‏⁮⁪‭⁮‍⁪⁪​‎⁮‌‏‍⁯‪⁫‬‮‏⁪‬⁫⁮⁯⁭‎⁮‫‎‮ => this.\u202B‏‭‌​‮⁭‪⁯‍‎‌⁮⁪‎⁬⁮​‫‫⁬⁪‫‪⁯‌‭‌‎⁪‌‌​⁯⁯‌⁭‭‌⁮‮;

  public IList \u202B⁯‬‍‌‫‮​‌‍‭⁮‌‮‏‮‬⁬‏⁪‏‎‮⁮⁪⁫⁯⁭‭‭⁫⁯⁬⁪​⁮⁭‬⁮‌‮ => this.\u202C⁮⁮⁫‬⁬⁫‌⁪‬⁬⁬‎‫‎‫⁬​⁮⁪‎‏⁫‍‬​⁪⁭​‫⁮⁭‭‪⁭‍‏‍‪⁬‮;

  public IList \u200D‌‮‫⁭‫‍‫‭‬‮‪‬⁭‏⁬‍‍​‮‬‎‬‌⁫⁯⁬​‬‏‫‪⁭⁬⁬‪‏‪‭‌‮ => this.\u206F⁭⁪‭⁪⁭‏‭⁯‮‮‮‪​⁪‭‫‪‭⁭⁪‌⁫‏⁪⁪​⁫‪⁬‌⁯​​⁪⁬​⁪⁯⁮‮;

  public IList \u200D‪​⁮⁫‮⁯‮‪‎⁭⁬⁫‎⁭⁮‏‫⁮‎‎‮‪‭‫‫‎‬‌⁪⁭‌‬⁫‏⁪‌‭‮‏‮ => this.\u200F⁫⁮‏‮⁪‬‪‭⁪‫‏‏‏‎⁭​‎⁫‭‏⁭⁯‍⁫​​‌‮‭⁬‏⁬⁮‫⁮⁪‎‭‌‮;

  public bool \u202B‎⁮‭⁫⁯⁬⁮‭‬‬‮⁬⁮⁫⁮‫⁮⁪‭‬⁮‫‮⁯‬⁬​⁮‌‭⁪​⁪⁯‭‪‬‍‮(byte[] _param1) => \u206D‭‎‏⁪⁫‌⁫⁫‮‮​‮‫⁯‎​⁮‭‍⁬⁫⁭⁬‎⁭‫‮‫⁬⁫‬‮⁪‌⁮⁬⁭⁬‪‮.\u200D‮‫‏⁮‮‪‎⁬‪‌⁮‏⁬⁫⁪‮‎⁪‫‬⁫‌‎​‏⁪⁫‎‎‫⁬‌⁭‫⁯⁭‪⁫‏‮(this.\u202E‏‮‭‎⁪‭‌⁫⁪⁪‌⁭‍‌‭⁮⁯‪‮‌‍‭‏⁮‬‮‎‏‭‫‫⁭⁬⁭‫‬​⁬‪‮, _param1);

  public void \u206C‮⁯‌⁯‌⁭⁫‪‭​‪‫⁫⁪⁯⁭⁫‎⁬‫‫⁮‎‮⁬⁪‮‎‫‭⁪⁭⁫⁪‪⁪⁬‭‫‮(
    \u206D⁪⁭‫‬‮⁯‭⁮​‍​⁪⁬⁯‏‍⁮‮‍‬​‍‌‏‭⁯‪‬‎⁪‪‮⁬‎‬‏‪​⁮‮ _param1,
    Stream _param2)
  {
    \u206E‫‮⁪‍⁯‬⁫⁫⁫‭⁭‏⁭‎​‮⁬⁪‫⁬‏‫‏⁬‏‏⁭‫‭⁮⁯‍‪‮⁫⁪‎‮‪‮ obj = _param1.\u200D⁯⁬​‬⁬⁮⁭⁭‎‏‮‭⁭‏​⁯‪⁭⁮⁭‪⁭⁭⁮​‍‪‬⁪⁭⁪⁫‬‬‏⁫⁪‏⁭‮;
    bool flag1 = \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202C‮​‍‏‍⁭‭‭‎‮‌‮‏⁭⁫⁫⁮⁬⁮‏‌​‍‫⁬⁪⁪⁬‭‍⁪⁬​‪⁭‫⁫​⁫‮(obj);
    bool flag2 = \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u200F⁬⁮‌‬‪‏‏‎‮‭‍‌⁯⁯‪⁪‌​⁭‍‌‪⁪⁭⁪⁭⁯⁮⁫‫⁭‏⁬‎⁮‪‫​‫‮(obj);
    if (flag2 != (this.\u202E‏‮‭‎⁪‭‌⁫⁪⁪‌⁭‍‌‭⁮⁯‪‮‌‍‭‏⁮‬‮‎‏‭‫‫⁭⁬⁭‫‬​⁬‪‮ != null) || flag2 != (this.\u202B‏‭‌​‮⁭‪⁯‍‎‌⁮⁪‎⁬⁮​‫‫⁬⁪‫‪⁯‌‭‌‎⁪‌‌​⁯⁯‌⁭‭‌⁮‮ == null) || flag1 != (this.\u202C⁮⁮⁫‬⁬⁫‌⁪‬⁬⁬‎‫‎‫⁬​⁮⁪‎‏⁫‍‬​⁪⁭​‫⁮⁭‭‪⁭‍‏‍‪⁬‮ != null) || !flag2 && this.\u206F⁭⁪‭⁪⁭‏‭⁯‮‮‮‪​⁪‭‫‪‭⁭⁪‌⁫‏⁪⁪​⁫‪⁬‌⁯​​⁪⁬​⁪⁯⁮‮ != null)
      throw new InvalidOperationException();
    if (flag2)
    {
      \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u200E⁯‭‎‌⁯⁮⁫‮⁬‪⁬⁮‪⁬‌⁪‎⁬⁫‍‬‭⁬‏‮⁮⁭⁮⁪‬‌‌⁯‎​‌‬‬‍‮(this.\u202E‏‮‭‎⁪‭‌⁫⁪⁪‌⁭‍‌‭⁮⁯‪‮‌‍‭‏⁮‬‮‎‏‭‫‫⁭⁬⁭‫‬​⁬‪‮, _param2);
      IDictionary dictionary = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u206D‬⁫‏‮‎‪‏‫⁪⁬⁭‭⁯⁯‎‫‪⁫‫⁯‌⁯​⁬‍‍⁮‪⁫‮‫‎‬‌⁮‎⁪‎‬‮();
      \u202D⁬⁮⁯⁯⁬‏⁮‎‌⁭​‍‬‬‮‬‬​‮⁯‌‌‏‎⁭⁫⁯‎⁮‍⁬‭‬​‏⁭‪⁬‍‮.\u202E⁯⁫⁪‮​‎‪⁭‎⁬⁫‎‮‬‫‏‬‍⁬​⁬​⁬⁬⁪⁯⁫‌⁯⁫‭‫‍‫‬‪⁪⁭‬‮(dictionary, this.\u202C⁮⁮⁫‬⁬⁫‌⁪‬⁬⁬‎‫‎‫⁬​⁮⁪‎‏⁫‍‬​⁪⁭​‫⁮⁭‭‪⁭‍‏‍‪⁬‮);
      if (this.\u206F⁭⁪‭⁪⁭‏‭⁯‮‮‮‪​⁪‭‫‪‭⁭⁪‌⁫‏⁪⁪​⁫‪⁬‌⁯​​⁪⁬​⁪⁯⁮‮ != null)
        \u202D⁬⁮⁯⁯⁬‏⁮‎‌⁭​‍‬‬‮‬‬​‮⁯‌‌‏‎⁭⁫⁯‎⁮‍⁬‭‬​‏⁭‪⁬‍‮.\u202E‮‮‌⁫‭⁫‎​‏‬‌‪‪‌‫‫⁫‮‏‎‪‪⁪‍‭​‭‫⁮‌‭‪⁬‭⁪‭‎⁯⁯‮(dictionary, this.\u206F⁭⁪‭⁪⁭‏‭⁯‮‮‮‪​⁪‭‫‪‭⁭⁪‌⁫‏⁪⁪​⁫‪⁬‌⁯​​⁪⁬​⁪⁯⁮‮);
      if (this.\u200F⁫⁮‏‮⁪‬‪‭⁪‫‏‏‏‎⁭​‎⁫‭‏⁭⁯‍⁫​​‌‮‭⁬‏⁬⁮‫⁮⁪‎‭‌‮ != null)
        \u202D⁬⁮⁯⁯⁬‏⁮‎‌⁭​‍‬‬‮‬‬​‮⁯‌‌‏‎⁭⁫⁯‎⁮‍⁬‭‬​‏⁭‪⁬‍‮.\u202C‮‮‭⁫‬‍‬⁯⁮‎‎⁮​‏‍‫⁬⁫⁮‪‬⁯⁭‪​⁮‮⁪⁯⁯‫‌‫‭‭​⁫‬⁪‮(dictionary, this.\u200F⁫⁮‏‮⁪‬‪‭⁪‫‏‏‏‎⁭​‎⁫‭‏⁭⁯‍⁫​​‌‮‭⁬‏⁬⁮‫⁮⁪‎‭‌‮);
      \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202B‪⁮‪⁮‌​‎⁫‍⁯‬​⁪⁮‮‬‭​‌‮⁮​⁮‏‮⁭‮⁫⁮⁭‎‪‎‏‪⁭‌‌‮‮(\u202E‎⁫⁯‪‎‫‌⁪⁮‪‍⁮‬⁭⁯⁮‌⁬‭⁬‪⁭‏‭⁭​‎‭⁮​⁪⁪⁫‮‌‏⁮‍⁪‮.\u200C‫‮‭​‎‮⁪‍‪​⁭‌‪‮‍⁪⁫‌‮⁮⁮‌⁫⁯⁫‎⁪‏​⁯​‍‬‏‏⁭‏‬‫‮(dictionary), _param2);
    }
    else
    {
      \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202C‫‫⁭‏⁬‌⁬⁬‎⁮⁯‬‪‬‮‏‮​‬‭​‭⁪⁭⁮​⁫⁭‎⁪‭‫‫‏‍⁬‍‎‍‮(this.\u202B‏‭‌​‮⁭‪⁯‍‎‌⁮⁪‎⁬⁮​‫‫⁬⁪‫‪⁯‌‭‌‎⁪‌‌​⁯⁯‌⁭‭‌⁮‮, _param2);
      if (flag1)
        \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u206F‫​‏‍‭‫‌‏‌​⁮​‮‮⁪​‬‭⁬‎‏⁫‌‬⁬‪⁪⁭‌‫‪‬⁫⁭⁯‮⁯⁬‮(this.\u202C⁮⁮⁫‬⁬⁫‌⁪‬⁬⁬‎‫‎‫⁬​⁮⁪‎‏⁫‍‬​⁪⁭​‫⁮⁭‭‪⁭‍‏‍‪⁬‮, _param2);
      if (this.\u200F⁫⁮‏‮⁪‬‪‭⁪‫‏‏‏‎⁭​‎⁫‭‏⁭⁯‍⁫​​‌‮‭⁬‏⁬⁮‫⁮⁪‎‭‌‮ == null || this.\u200F⁫⁮‏‮⁪‬‪‭⁪‫‏‏‏‎⁭​‎⁫‭‏⁭⁯‍⁫​​‌‮‭⁬‏⁬⁮‫⁮⁪‎‭‌‮.Count < 1)
      {
        \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u200D‫‫‏​​⁮‏‪⁫​⁫⁪⁯⁭‏‏⁫‭⁮⁮⁬‮‮⁪‭‭‪⁭‬‎‫‬‎‎⁪‫‫⁯‫‮(0, _param2);
      }
      else
      {
        IList list = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮(this.\u200F⁫⁮‏‮⁪‬‪‭⁪‫‏‏‏‎⁭​‎⁫‭‏⁭⁯‍⁫​​‌‮‭⁬‏⁬⁮‫⁮⁪‎‭‌‮.Count);
        int num = 0;
        foreach (Asn1Encodable asn1Encodable in (IEnumerable) this.\u200F⁫⁮‏‮⁪‬‪‭⁪‫‏‏‏‎⁭​‎⁫‭‏⁭⁯‍⁫​​‌‮‭⁬‏⁬⁮‫⁮⁪‎‭‌‮)
        {
          byte[] encoded = asn1Encodable.GetEncoded("DER");
          list.Add((object) encoded);
          num += encoded.Length + 2;
        }
        \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u200F⁪‬‏‍⁭‬‫‬⁯‬‎‪⁪‮‫⁬‍‬⁪⁮‍‍‮‎‍⁬‮‪‏‭‬⁫‎‭‬‌‌​‭‮(num);
        \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u200D‫‫‏​​⁮‏‪⁫​⁫⁪⁯⁭‏‏⁫‭⁮⁮⁬‮‮⁪‭‭‪⁭‬‎‫‬‎‎⁪‫‫⁯‫‮(num, _param2);
        foreach (byte[] numArray in (IEnumerable) list)
          \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202B‪⁮‪⁮‌​‎⁫‍⁯‬​⁪⁮‮‬‭​‌‮⁮​⁮‏‮⁭‮⁫⁮⁭‎‪‎‏‪⁭‌‌‮‮(numArray, _param2);
      }
    }
  }

  public static \u206A‭‭⁯‏‌​​​⁭⁪‍⁪‌‏‌‌⁮​‪‭​‬⁬‬‍‭⁯‍‭⁫‎‭‎⁫‪⁫⁭⁭‭‮ \u202B‪​⁪‍⁫‮‏‪‎‏‫⁮‫⁬‬⁭‏⁯⁭‮⁪‏‮⁯‪‏⁪‪‌‭⁭‪‮‏‭⁭‍‪⁪‮(
    \u206D⁪⁭‫‬‮⁯‭⁮​‍​⁪⁬⁯‏‍⁮‮‍‬​‍‌‏‭⁯‪‬‎⁪‪‮⁬‎‬‏‪​⁮‮ _param0,
    Stream _param1)
  {
    \u206E‫‮⁪‍⁯‬⁫⁫⁫‭⁭‏⁭‎​‮⁬⁪‫⁬‏‫‏⁬‏‏⁭‫‭⁮⁯‍‪‮⁫⁪‎‮‪‮ obj1 = _param0.\u200D⁯⁬​‬⁬⁮⁭⁭‎‏‮‭⁭‏​⁯‪⁭⁮⁭‪⁭⁭⁮​‍‪‬⁪⁭⁪⁫‬‬‏⁫⁪‏⁭‮;
    if (\u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u200F⁬⁮‌‬‪‏‏‎‮‭‍‌⁯⁯‪⁪‌​⁭‍‌‪⁪⁭⁪⁭⁯⁮⁫‫⁭‏⁬‎⁮‪‫​‫‮(obj1))
    {
      byte[] numArray = \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202C‪​⁬⁫‭‏⁫‫‬‪‎⁮⁯‌‍‫⁬​‎‪‭⁮‫‮‏‎‏⁮⁯⁭​⁬‮‪​⁯‮⁬‏‮(_param1);
      IDictionary dictionary = \u202E‎⁫⁯‪‎‫‌⁪⁮‪‍⁮‬⁭⁯⁮‌⁬‭⁬‪⁭‏‭⁭​‎‭⁮​⁪⁪⁫‮‌‏⁮‍⁪‮.\u206D⁯‌‏​⁮⁭‭⁮⁮‮⁬​​⁫‌‮‎‫⁮⁬⁯‍‎⁯⁪‍​‬‬⁭​‏‮‏⁬​‭‪⁬‮(13, \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202E‌‬⁭‮⁮‏‬‏⁭‭‫⁬‏​⁯‍‭‫‬⁬‏‮⁪⁯‫⁬⁮⁮⁬​⁬‏​‮⁬‫⁬‬⁪‮(_param1));
      IList list1 = \u206A‭‭⁯‏‌​​​⁭⁪‍⁪‌‏‌‌⁮​‪‭​‬⁬‬‍‭⁯‍‭⁫‎‭‎⁫‪⁫⁭⁭‭‮.\u202C‏‍‪‮‍​‪‌‌‪‫⁪⁭⁯⁮‮‫⁬‫‪⁬⁮​⁫‌⁫‪‮‭⁯‮‬​‬⁫⁭‫⁪‍‮(\u202D⁬⁮⁯⁯⁬‏⁮‎‌⁭​‍‬‬‮‬‬​‮⁯‌‌‏‎⁭⁫⁯‎⁮‍⁬‭‬​‏⁭‪⁬‍‮.\u202E⁮⁪⁮‍‎‌‎⁬⁭⁯‎‬⁭‏‭‎⁯⁯⁭‌‪‍‮⁯⁮‫⁫‏⁫‪⁪⁫‬‮⁯‫‫⁬‎‮(dictionary), (short) 109);
      IList list2 = \u202D⁬⁮⁯⁯⁬‏⁮‎‌⁭​‍‬‬‮‬‬​‮⁯‌‌‏‎⁭⁫⁯‎⁮‍⁬‭‬​‏⁭‪⁬‍‮.\u200F‭‍⁪‫‮‫‫⁮⁫‮⁮⁪⁬‫⁪‫‎‫‎⁪⁮⁮⁬‭​‪‎​‭​‍⁬‍‫⁫​⁫‏‮(dictionary);
      IList list3 = \u202D⁬⁮⁯⁯⁬‏⁮‎‌⁭​‍‬‬‮‬‬​‮⁯‌‌‏‎⁭⁫⁯‎⁮‍⁬‭‬​‏⁭‪⁬‍‮.\u202E⁮‌‍⁬‭‍‬⁮‭‭‭‭⁪⁯​‍‭‫‬⁭‫‪‌‬⁪‬⁫‌⁮‮‍‏⁯‪⁫‪‫⁬⁯‮(dictionary);
      IList list4 = list1;
      IList list5 = list2;
      IList list6 = list3;
      return new \u206A‭‭⁯‏‌​​​⁭⁪‍⁪‌‏‌‌⁮​‪‭​‬⁬‬‍‭⁯‍‭⁫‎‭‎⁫‪⁫⁭⁭‭‮(numArray, list4, list5, list6);
    }
    int num = \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202C‮​‍‏‍⁭‭‭‎‮‌‮‏⁭⁫⁫⁮⁬⁮‏‌​‍‫⁬⁪⁪⁬‭‍⁪⁬​‪⁭‫⁫​⁫‮(obj1) ? 1 : 0;
    short[] numArray1 = \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202E⁮⁮‌‍‏‮‪‌‍⁫‫⁬‬​‍⁮‫‍‮⁮‎⁬‪‎‫‍‍‪‫​‭‪‫⁫‪⁪‎‌‍‮(_param1, 1);
    IList list7 = (IList) null;
    if (num != 0)
      list7 = \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202A⁪‏‌‏‬‫‬‮‫⁫‫‪⁯‍⁬‮‫‭‌​⁪⁪⁯‮‫⁫‫⁯⁮‫‭⁬⁬⁯​‬⁫‫‮(_param1);
    IList list8 = (IList) null;
    byte[] buffer = \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202E‌‬⁭‮⁮‏‬‏⁭‭‫⁬‏​⁯‍‭‫‬⁬‏‮⁪⁯‫⁬⁮⁮⁬​⁬‏​‮⁬‫⁬‬⁪‮(_param1);
    if (buffer.Length != 0)
    {
      list8 = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮();
      MemoryStream memoryStream = new MemoryStream(buffer, false);
      do
      {
        \u206C‭‍⁮‪‮⁭‫⁮‮‬‎​‌‮‎‍⁬​⁪‫⁫‪‭‌‌‪⁭⁭⁪‍‮⁯⁭‍‎⁪‬⁬‍‮ obj2 = \u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202B⁫‭‪‭⁫‍⁫⁪⁮⁫‎‌‫‭⁮‍⁫‍⁭‮‌‎‌⁬‎⁬‭⁫‬⁪‮‌‪‮⁪⁬‏‎⁮‮(\u202D⁯‎‌‬⁭⁬⁫‬⁫⁪​⁫⁪⁬​⁮‌‮‌⁮‏⁫‏‏‪‪⁬‍⁫‫‮⁫⁭‬⁭‌‮‭‏‮.\u202E‌‬⁭‮⁮‏‬‏⁭‭‫⁬‏​⁯‍‭‫‬⁬‏‮⁪⁯‫⁬⁮⁮⁬​⁬‏​‮⁬‫⁬‬⁪‮((Stream) memoryStream, 1));
        list8.Add((object) \u202C​‭‬‌‏‎‬‎⁭‬⁯‪‮​​‏‎‍‌⁬⁭‎‍⁬⁫‎⁮⁮‮⁫⁬‭‍⁫⁭⁮‬⁮⁭‮.\u206E‏‫‮‫‫⁫⁬‬⁯‎‮‮‫‏​‬⁭⁭⁯‭‫‍‌‮‎‬‪⁬​⁪‭‪‏‬⁬⁪‏⁬⁭‮((object) obj2));
      }
      while (memoryStream.Position < memoryStream.Length);
    }
    return new \u206A‭‭⁯‏‌​​​⁭⁪‍⁪‌‏‌‌⁮​‪‭​‬⁬‬‍‭⁯‍‭⁫‎‭‎⁫‪⁫⁭⁭‭‮(numArray1, list7, list8);
  }
}
