// Decompiled with JetBrains decompiler
// Type: SimplePainter.FrmMain
// Assembly: 太城hضd氏bTنH, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FB883643-FAF4-44BB-B4FC-F1B0FC1059A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Backdoor.Win32.Androm.uluz-2b99f5aaaa6cfc4766e8c7eaafe2cabccccd31ced962d84f0bc1cf97bc9a1e23.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Imaging;
using System.Drawing.Text;
using System.IO;
using System.Windows.Forms;

namespace SimplePainter
{
  public class FrmMain : Form
  {
    private Bitmap img;
    private Bitmap cache;
    private Point p;
    private Color bColor = Color.White;
    private Color fColor = SystemColors.ControlText;
    private Pen dPen = Pens.Black;
    private FrmMain.PenMode penMode;
    private IContainer components = (IContainer) null;
    private MenuStrip mnsMenu;
    private ToolStripMenuItem tsmiFile;
    private ToolStripMenuItem tsmiOpen;
    private ToolStripMenuItem tsmiNew;
    private ToolStripMenuItem tsmiSave;
    private ToolStripMenuItem tsmiClose;
    private ToolStripMenuItem tsmiFColor;
    private PictureBox picImg;
    private ToolStripMenuItem tsmiPen;
    private ToolStripMenuItem tsmiLine;
    private ToolStripMenuItem tsmiRect;
    private ToolStripMenuItem tsmiElli;
    private ToolStripMenuItem tsmiText;
    private ToolStripMenuItem tsmiErase;
    private TextBox txtInput;
    private ToolStripMenuItem tsmiBColor;
    private ToolStripMenuItem tsmiMouse;
    private ToolStripMenuItem tsmiNewPNG;
    private ToolStripMenuItem tsmiPicker;

    public FrmMain() => this.InitializeComponent();

    private void frmMain_Load(object sender, EventArgs e)
    {
      this.img = new Bitmap(this.picImg.Width, this.picImg.Height);
      using (Graphics graphics = Graphics.FromImage((Image) this.img))
      {
        graphics.Clear(Color.White);
        graphics.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;
      }
      this.cache = new Bitmap((Image) this.img);
    }

    private void picImg_Paint(object sender, PaintEventArgs e) => e.Graphics.DrawImage((Image) this.img, 0, 0);

    private void tsmiOpen_Click(object sender, EventArgs e)
    {
      OpenFileDialog openFileDialog1 = new OpenFileDialog();
      openFileDialog1.Filter = "Image Files (*.bmp; *.jpg; *.png)| *.bmp; *.jpg; *.png";
      OpenFileDialog openFileDialog2 = openFileDialog1;
      if (openFileDialog2.ShowDialog() != DialogResult.OK)
        return;
      this.Text = openFileDialog2.FileName;
      this.RenewPainter();
      Image image = Image.FromFile(openFileDialog2.FileName);
      using (Graphics graphics = Graphics.FromImage((Image) this.img))
        graphics.DrawImage(image, 0, 0, image.Width, image.Height);
      this.picImg.Refresh();
    }

    private void tsmiNew_Click(object sender, EventArgs e)
    {
      this.Text = "New Paint";
      this.RenewPainter();
      this.picImg.Refresh();
    }

    private void tsmiSave_Click(object sender, EventArgs e)
    {
      SaveFileDialog saveFileDialog1 = new SaveFileDialog();
      saveFileDialog1.Filter = "Portable Network Graphics (*.png)|*.png|Bitmap file (*.bmp)|*.bmp|JPEG File(*.jpg)| *.jpg";
      saveFileDialog1.FileName = this.Text;
      SaveFileDialog saveFileDialog2 = saveFileDialog1;
      if (saveFileDialog2.ShowDialog() != DialogResult.OK)
        return;
      switch (Path.GetExtension(saveFileDialog2.FileName).ToLower().ToLower())
      {
        case ".png":
          this.img.Save(saveFileDialog2.FileName, ImageFormat.Png);
          break;
        case ".bmp":
          this.img.Save(saveFileDialog2.FileName, ImageFormat.Bmp);
          break;
        case ".jpg":
          this.img.Save(saveFileDialog2.FileName, ImageFormat.Jpeg);
          break;
      }
      this.Text = saveFileDialog2.FileName;
    }

    private void tsmiClose_Click(object sender, EventArgs e) => Application.Exit();

    private void tsmiFColor_Click(object sender, EventArgs e)
    {
      ColorDialog colorDialog = new ColorDialog();
      if (colorDialog.ShowDialog() != DialogResult.OK)
        return;
      this.fColor = colorDialog.Color;
      this.dPen = new Pen(this.fColor, 1f);
      this.tsmiFColor.BackColor = this.fColor;
    }

    private void tsmiBColor_Click(object sender, EventArgs e)
    {
      ColorDialog colorDialog = new ColorDialog();
      if (colorDialog.ShowDialog() != DialogResult.OK)
        return;
      this.bColor = colorDialog.Color;
      this.tsmiBColor.BackColor = this.bColor;
    }

    private void TsmiPicker_Click(object sender, EventArgs e)
    {
      this.penMode = FrmMain.PenMode.Picker;
      this.Cursor = Cursors.Cross;
      this.CleanTsmi();
      this.tsmiPicker.BackColor = SystemColors.Highlight;
    }

    private void tsmiMouse_Click(object sender, EventArgs e)
    {
      this.penMode = FrmMain.PenMode.None;
      this.Cursor = Cursors.Default;
      this.CleanTsmi();
      this.tsmiMouse.BackColor = SystemColors.Highlight;
    }

    private void tsmiPen_Click(object sender, EventArgs e)
    {
      this.penMode = FrmMain.PenMode.Pen;
      this.Cursor = Cursors.Cross;
      this.CleanTsmi();
      this.tsmiPen.BackColor = SystemColors.Highlight;
    }

    private void tsmiLine_Click(object sender, EventArgs e)
    {
      this.penMode = FrmMain.PenMode.Line;
      this.Cursor = Cursors.Cross;
      this.CleanTsmi();
      this.tsmiLine.BackColor = SystemColors.Highlight;
    }

    private void tsmiRect_Click(object sender, EventArgs e)
    {
      this.penMode = FrmMain.PenMode.Rect;
      this.Cursor = Cursors.Cross;
      this.CleanTsmi();
      this.tsmiRect.BackColor = SystemColors.Highlight;
    }

    private void tsmiElli_Click(object sender, EventArgs e)
    {
      this.penMode = FrmMain.PenMode.Elli;
      this.Cursor = Cursors.Cross;
      this.CleanTsmi();
      this.tsmiElli.BackColor = SystemColors.Highlight;
    }

    private void tsmiText_Click(object sender, EventArgs e)
    {
      this.penMode = FrmMain.PenMode.Text;
      this.Cursor = Cursors.IBeam;
      this.CleanTsmi();
      this.tsmiText.BackColor = SystemColors.Highlight;
    }

    private void tsmiEraser_Click(object sender, EventArgs e)
    {
      this.penMode = FrmMain.PenMode.Erase;
      this.Cursor = Cursors.WaitCursor;
      this.CleanTsmi();
      this.tsmiErase.BackColor = SystemColors.Highlight;
    }

    private void picImg_MouseDown(object sender, MouseEventArgs e)
    {
      using (Graphics graphics = Graphics.FromImage((Image) this.img))
        graphics.DrawString(this.txtInput.Text, this.txtInput.Font, (Brush) new SolidBrush(this.fColor), (float) (this.p.X + 1), (float) (this.p.Y - 2));
      this.p = e.Location;
      switch (this.penMode)
      {
        case FrmMain.PenMode.None:
        case FrmMain.PenMode.Picker:
          break;
        case FrmMain.PenMode.Text:
          this.txtInput.Text = "";
          this.txtInput.Location = new Point(e.X + 4, e.Y + 22);
          this.txtInput.BackColor = this.tsmiBColor.BackColor;
          this.txtInput.Visible = true;
          this.txtInput.Focus();
          break;
        default:
          this.picImg.MouseMove += new MouseEventHandler(this.picImg_MouseMove);
          break;
      }
    }

    private void picImg_MouseMove(object sender, MouseEventArgs e)
    {
      switch (this.penMode)
      {
        case FrmMain.PenMode.Pen:
          using (Graphics graphics = Graphics.FromImage((Image) this.img))
            graphics.DrawLine(this.dPen, this.p, e.Location);
          this.p = e.Location;
          break;
        case FrmMain.PenMode.Line:
          this.img = new Bitmap((Image) this.cache);
          using (Graphics graphics = Graphics.FromImage((Image) this.img))
          {
            graphics.DrawLine(this.dPen, this.p, e.Location);
            break;
          }
        case FrmMain.PenMode.Elli:
          this.img = new Bitmap((Image) this.cache);
          using (Graphics graphics = Graphics.FromImage((Image) this.img))
          {
            graphics.DrawEllipse(this.dPen, this.p.X, this.p.Y, e.X - this.p.X, e.Y - this.p.Y);
            break;
          }
        case FrmMain.PenMode.Rect:
          this.img = new Bitmap((Image) this.cache);
          using (Graphics graphics = Graphics.FromImage((Image) this.img))
          {
            graphics.DrawRectangle(this.dPen, Math.Min(this.p.X, e.X), Math.Min(this.p.Y, e.Y), Math.Abs(e.X - this.p.X), Math.Abs(e.Y - this.p.Y));
            break;
          }
        case FrmMain.PenMode.Erase:
          using (Graphics graphics = Graphics.FromImage((Image) this.img))
          {
            graphics.FillEllipse((Brush) new SolidBrush(this.bColor), this.p.X - 15, this.p.Y - 15, 30, 30);
            graphics.DrawLine(new Pen(this.bColor, 30f), this.p, e.Location);
          }
          this.p = e.Location;
          break;
      }
      this.picImg.Refresh();
    }

    private void picImg_MouseUp(object sender, MouseEventArgs e)
    {
      switch (this.penMode)
      {
        case FrmMain.PenMode.Picker:
          this.fColor = this.img.GetPixel(e.X, e.Y);
          this.dPen = new Pen(this.fColor, 1f);
          this.tsmiFColor.BackColor = this.fColor;
          break;
        case FrmMain.PenMode.Line:
          this.img = new Bitmap((Image) this.cache);
          using (Graphics graphics = Graphics.FromImage((Image) this.img))
          {
            graphics.DrawLine(this.dPen, this.p, e.Location);
            break;
          }
        case FrmMain.PenMode.Elli:
          this.img = new Bitmap((Image) this.cache);
          using (Graphics graphics = Graphics.FromImage((Image) this.img))
          {
            graphics.DrawEllipse(this.dPen, this.p.X, this.p.Y, e.X - this.p.X, e.Y - this.p.Y);
            break;
          }
        case FrmMain.PenMode.Rect:
          this.img = new Bitmap((Image) this.cache);
          using (Graphics graphics = Graphics.FromImage((Image) this.img))
          {
            graphics.DrawRectangle(this.dPen, Math.Min(this.p.X, e.X), Math.Min(this.p.Y, e.Y), Math.Abs(e.X - this.p.X), Math.Abs(e.Y - this.p.Y));
            break;
          }
      }
      this.cache = new Bitmap((Image) this.img);
      this.picImg.MouseMove -= new MouseEventHandler(this.picImg_MouseMove);
      this.picImg.Refresh();
    }

    private void TsmiNewPNG_Click(object sender, EventArgs e)
    {
      this.Text = "New PNG file";
      this.RenewPainter();
      using (Graphics graphics = Graphics.FromImage((Image) this.img))
        graphics.Clear(Color.Transparent);
      this.picImg.Refresh();
    }

    private void txtInput_KeyPress(object sender, KeyPressEventArgs e)
    {
      if (e.KeyChar != '\r' && e.KeyChar != '\u001B')
        return;
      if (e.KeyChar == '\r')
      {
        using (Graphics graphics = Graphics.FromImage((Image) this.img))
          graphics.DrawString(this.txtInput.Text, this.txtInput.Font, (Brush) new SolidBrush(this.fColor), (float) (this.p.X + 1), (float) (this.p.Y - 2));
      }
      this.txtInput.Text = "";
      this.txtInput.Visible = false;
    }

    private void RenewPainter()
    {
      using (Graphics graphics = Graphics.FromImage((Image) this.img))
        graphics.Clear(Color.White);
      this.cache = new Bitmap((Image) this.img);
      this.bColor = Color.White;
      this.fColor = SystemColors.ControlText;
      this.tsmiBColor.BackColor = this.bColor;
      this.tsmiFColor.BackColor = this.fColor;
      this.Cursor = Cursors.Default;
      this.penMode = FrmMain.PenMode.None;
      this.CleanTsmi();
      this.tsmiMouse.BackColor = SystemColors.Highlight;
    }

    private void CleanTsmi()
    {
      this.tsmiPicker.BackColor = SystemColors.Control;
      this.tsmiMouse.BackColor = SystemColors.Control;
      this.tsmiPen.BackColor = SystemColors.Control;
      this.tsmiLine.BackColor = SystemColors.Control;
      this.tsmiRect.BackColor = SystemColors.Control;
      this.tsmiElli.BackColor = SystemColors.Control;
      this.tsmiText.BackColor = SystemColors.Control;
      this.tsmiErase.BackColor = SystemColors.Control;
      this.txtInput.Visible = false;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.mnsMenu = new MenuStrip();
      this.tsmiFile = new ToolStripMenuItem();
      this.tsmiOpen = new ToolStripMenuItem();
      this.tsmiNew = new ToolStripMenuItem();
      this.tsmiNewPNG = new ToolStripMenuItem();
      this.tsmiSave = new ToolStripMenuItem();
      this.tsmiClose = new ToolStripMenuItem();
      this.tsmiFColor = new ToolStripMenuItem();
      this.tsmiBColor = new ToolStripMenuItem();
      this.tsmiPicker = new ToolStripMenuItem();
      this.tsmiMouse = new ToolStripMenuItem();
      this.tsmiPen = new ToolStripMenuItem();
      this.tsmiLine = new ToolStripMenuItem();
      this.tsmiRect = new ToolStripMenuItem();
      this.tsmiElli = new ToolStripMenuItem();
      this.tsmiText = new ToolStripMenuItem();
      this.tsmiErase = new ToolStripMenuItem();
      this.picImg = new PictureBox();
      this.txtInput = new TextBox();
      this.mnsMenu.SuspendLayout();
      ((ISupportInitialize) this.picImg).BeginInit();
      this.SuspendLayout();
      this.mnsMenu.Items.AddRange(new ToolStripItem[11]
      {
        (ToolStripItem) this.tsmiFile,
        (ToolStripItem) this.tsmiFColor,
        (ToolStripItem) this.tsmiBColor,
        (ToolStripItem) this.tsmiPicker,
        (ToolStripItem) this.tsmiMouse,
        (ToolStripItem) this.tsmiPen,
        (ToolStripItem) this.tsmiLine,
        (ToolStripItem) this.tsmiRect,
        (ToolStripItem) this.tsmiElli,
        (ToolStripItem) this.tsmiText,
        (ToolStripItem) this.tsmiErase
      });
      this.mnsMenu.Location = new Point(0, 0);
      this.mnsMenu.Name = "mnsMenu";
      this.mnsMenu.Size = new Size(784, 24);
      this.mnsMenu.TabIndex = 0;
      this.mnsMenu.Text = "mstipMenu";
      this.tsmiFile.DropDownItems.AddRange(new ToolStripItem[5]
      {
        (ToolStripItem) this.tsmiOpen,
        (ToolStripItem) this.tsmiNew,
        (ToolStripItem) this.tsmiNewPNG,
        (ToolStripItem) this.tsmiSave,
        (ToolStripItem) this.tsmiClose
      });
      this.tsmiFile.Name = "tsmiFile";
      this.tsmiFile.Size = new Size(37, 20);
      this.tsmiFile.Text = "File";
      this.tsmiOpen.Name = "tsmiOpen";
      this.tsmiOpen.Size = new Size(125, 22);
      this.tsmiOpen.Text = "Open";
      this.tsmiOpen.Click += new EventHandler(this.tsmiOpen_Click);
      this.tsmiNew.Name = "tsmiNew";
      this.tsmiNew.Size = new Size(125, 22);
      this.tsmiNew.Text = "New";
      this.tsmiNew.Click += new EventHandler(this.tsmiNew_Click);
      this.tsmiNewPNG.Name = "tsmiNewPNG";
      this.tsmiNewPNG.Size = new Size(125, 22);
      this.tsmiNewPNG.Text = "New PNG";
      this.tsmiNewPNG.Click += new EventHandler(this.TsmiNewPNG_Click);
      this.tsmiSave.Name = "tsmiSave";
      this.tsmiSave.Size = new Size(125, 22);
      this.tsmiSave.Text = "Save";
      this.tsmiSave.Click += new EventHandler(this.tsmiSave_Click);
      this.tsmiClose.Name = "tsmiClose";
      this.tsmiClose.Size = new Size(125, 22);
      this.tsmiClose.Text = "Close";
      this.tsmiClose.Click += new EventHandler(this.tsmiClose_Click);
      this.tsmiFColor.BackColor = SystemColors.ControlText;
      this.tsmiFColor.ForeColor = SystemColors.Control;
      this.tsmiFColor.Name = "tsmiFColor";
      this.tsmiFColor.Size = new Size(71, 20);
      this.tsmiFColor.Text = "ForeColor";
      this.tsmiFColor.Click += new EventHandler(this.tsmiFColor_Click);
      this.tsmiBColor.BackColor = Color.White;
      this.tsmiBColor.Name = "tsmiBColor";
      this.tsmiBColor.Size = new Size(73, 20);
      this.tsmiBColor.Text = "BackColor";
      this.tsmiBColor.Click += new EventHandler(this.tsmiBColor_Click);
      this.tsmiPicker.Name = "tsmiPicker";
      this.tsmiPicker.Size = new Size(51, 20);
      this.tsmiPicker.Text = "Picker";
      this.tsmiPicker.Click += new EventHandler(this.TsmiPicker_Click);
      this.tsmiMouse.BackColor = SystemColors.Highlight;
      this.tsmiMouse.Name = "tsmiMouse";
      this.tsmiMouse.Size = new Size(55, 20);
      this.tsmiMouse.Text = "Mouse";
      this.tsmiMouse.Click += new EventHandler(this.tsmiMouse_Click);
      this.tsmiPen.Checked = true;
      this.tsmiPen.CheckState = CheckState.Indeterminate;
      this.tsmiPen.Name = "tsmiPen";
      this.tsmiPen.Size = new Size(39, 20);
      this.tsmiPen.Text = "Pen";
      this.tsmiPen.Click += new EventHandler(this.tsmiPen_Click);
      this.tsmiLine.Name = "tsmiLine";
      this.tsmiLine.Size = new Size(41, 20);
      this.tsmiLine.Text = "Line";
      this.tsmiLine.Click += new EventHandler(this.tsmiLine_Click);
      this.tsmiRect.Name = "tsmiRect";
      this.tsmiRect.Size = new Size(71, 20);
      this.tsmiRect.Text = "Rectangle";
      this.tsmiRect.Click += new EventHandler(this.tsmiRect_Click);
      this.tsmiElli.BackColor = SystemColors.Control;
      this.tsmiElli.Name = "tsmiElli";
      this.tsmiElli.Size = new Size(52, 20);
      this.tsmiElli.Text = "Ellipse";
      this.tsmiElli.Click += new EventHandler(this.tsmiElli_Click);
      this.tsmiText.Name = "tsmiText";
      this.tsmiText.Size = new Size(40, 20);
      this.tsmiText.Text = "Text";
      this.tsmiText.Click += new EventHandler(this.tsmiText_Click);
      this.tsmiErase.Name = "tsmiErase";
      this.tsmiErase.Size = new Size(50, 20);
      this.tsmiErase.Text = "Eraser";
      this.tsmiErase.Click += new EventHandler(this.tsmiEraser_Click);
      this.picImg.Dock = DockStyle.Fill;
      this.picImg.Location = new Point(0, 24);
      this.picImg.Name = "picImg";
      this.picImg.Size = new Size(784, 537);
      this.picImg.TabIndex = 2;
      this.picImg.TabStop = false;
      this.picImg.Paint += new PaintEventHandler(this.picImg_Paint);
      this.picImg.MouseDown += new MouseEventHandler(this.picImg_MouseDown);
      this.picImg.MouseUp += new MouseEventHandler(this.picImg_MouseUp);
      this.txtInput.BackColor = Color.White;
      this.txtInput.BorderStyle = BorderStyle.None;
      this.txtInput.Location = new Point(25, 38);
      this.txtInput.Name = "txtInput";
      this.txtInput.Size = new Size(100, 13);
      this.txtInput.TabIndex = 3;
      this.txtInput.Visible = false;
      this.txtInput.KeyPress += new KeyPressEventHandler(this.txtInput_KeyPress);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(784, 561);
      this.Controls.Add((Control) this.txtInput);
      this.Controls.Add((Control) this.picImg);
      this.Controls.Add((Control) this.mnsMenu);
      this.MainMenuStrip = this.mnsMenu;
      this.Name = nameof (FrmMain);
      this.Text = "Simple Painter";
      this.WindowState = FormWindowState.Maximized;
      this.Load += new EventHandler(this.frmMain_Load);
      this.mnsMenu.ResumeLayout(false);
      this.mnsMenu.PerformLayout();
      ((ISupportInitialize) this.picImg).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private enum PenMode
    {
      None,
      Picker,
      Pen,
      Line,
      Elli,
      Rect,
      Text,
      Erase,
    }
  }
}
