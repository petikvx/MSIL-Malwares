// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: EraIn, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: DF309F35-9A6B-48AA-8FAD-6A916AD051A5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-58c054c4226f2a650a02bbf4b2db908c7317491c91a4f3254cc0d835c474897d.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 1288209816;
      int count;
      int index;
      bool flag1;
      JSONNode jsonNode;
      int aIndex;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1079584484)) % 17U)
        {
          case 0:
            flag2 = aIndex < count;
            num1 = 633540054;
            continue;
          case 1:
            this._random = Game.\u206C⁪‭‪⁭⁭‌⁯‏⁬‬‎‏⁫⁭‭⁪‏‬‪‌‫‫⁯‮‮⁯⁫⁯⁮‫‮‍⁫‏⁮‍⁪⁯⁪‮((int) DateTime.Now.Ticks);
            num1 = (int) num2 * -309814077 ^ 1772488927;
            continue;
          case 2:
            this._buffer = buffer;
            num1 = (int) num2 * 235160215 ^ 1674756253;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_1;
          case 5:
            this.Players = new Player[count];
            aIndex = 0;
            num1 = (int) num2 * 1812748831 ^ -309683355;
            continue;
          case 6:
            this.Rules = Rules.Deserialize(json["rules"]);
            this._dice = new Dice();
            jsonNode = json["players"];
            num1 = (int) num2 * 2049244098 ^ 1641492463;
            continue;
          case 7:
            ++aIndex;
            num1 = (int) num2 * -828848287 ^ -1990323011;
            continue;
          case 8:
            int num3 = !flag2 ? -577343138 : (num3 = -1691722326);
            num1 = num3 ^ (int) num2 * -540445725;
            continue;
          case 9:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = 1891347023;
            continue;
          case 10:
            int num4 = flag1 ? -79604159 : (num4 = -1599597283);
            num1 = num4 ^ (int) num2 * 1340370183;
            continue;
          case 11:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * 1496096799 ^ -364642003;
            continue;
          case 12:
            count = jsonNode.Count;
            num1 = (int) num2 * -1255178677 ^ 180736199;
            continue;
          case 13:
            ++index;
            num1 = (int) num2 * -1740356670 ^ 243273247;
            continue;
          case 14:
            flag1 = index < count;
            num1 = 1407730589;
            continue;
          case 15:
            this._playerStates[index] = new PlayerState();
            num1 = 490119895;
            continue;
          case 16:
            num1 = (int) num2 * -1614295018 ^ -797343556;
            continue;
          default:
            goto label_19;
        }
      }
label_3:
      return;
label_19:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = 994771237;
        bool finished2;
        PlayerState[] playerStates;
        int index;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1521729431)) % 14U)
          {
            case 0:
              finished2 = false;
              num1 = (int) num2 * -1013124627 ^ 2147235988;
              continue;
            case 1:
              finished2 = true;
              num1 = (int) num2 * -883388591 ^ 1139887962;
              continue;
            case 2:
              num1 = (int) num2 * 1029592959 ^ -589022297;
              continue;
            case 3:
              num1 = 1765382644;
              continue;
            case 4:
              finished2 = true;
              num1 = (int) num2 * 81459381 ^ -2120324998;
              continue;
            case 5:
              num1 = (int) num2 * 475498977 ^ -3700270;
              continue;
            case 6:
              int num3;
              num1 = num3 = playerStates[index].State != State.Playing ? 1887844476 : (num3 = 1058999945);
              continue;
            case 7:
              goto label_1;
            case 8:
              int num4;
              num1 = num4 = index < playerStates.Length ? 710997421 : (num4 = 1450771103);
              continue;
            case 9:
              num1 = (int) num2 * -460495525 ^ 847370608;
              continue;
            case 11:
              playerStates = this._playerStates;
              index = 0;
              num1 = (int) num2 * 1270721600 ^ 1630813183;
              continue;
            case 12:
              int num5 = !finished1 ? 1248486368 : (num5 = 1338613072);
              num1 = num5 ^ (int) num2 * 1675971357;
              continue;
            case 13:
              ++index;
              num1 = 1834952511;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = 1181645193;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1058512496)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 1469880360 ^ 678054156;
            continue;
          case 2:
            this._currentTurn = 0;
            this._finished = false;
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 1313710752 ^ 1503548303;
            continue;
          case 3:
            this.ShuffleCards();
            num1 = (int) num2 * 364525686 ^ -917341354;
            continue;
          case 4:
            this.Winners.Clear();
            num1 = (int) num2 * -526784298 ^ -592308095;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.Losers.Clear();
            num1 = (int) num2 * 2021409986 ^ 347768940;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = -1034853864;
      Player player;
      bool morePlanningSprint;
      int planningCardsCount;
      int num2;
      PlayerState playerState;
      int index;
      bool flag1;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -549760584)) % 28U)
        {
          case 0:
            player = this.Players[index];
            num1 = (int) num3 * -1137005118 ^ -1258550653;
            continue;
          case 1:
            int num4 = flag1 ? -2035237268 : (num4 = -993134791);
            num1 = num4 ^ (int) num3 * -1290836645;
            continue;
          case 2:
            flag3 = index < this.Players.Length;
            num1 = -40454975;
            continue;
          case 3:
            playerState = this._playerStates[index];
            num1 = (int) num3 * -1937181634 ^ -1918702454;
            continue;
          case 4:
            flag2 = num2 > 0;
            num1 = -2047979926;
            continue;
          case 5:
            num1 = -1113968156;
            continue;
          case 6:
            ++index;
            num1 = (int) num3 * -560325506 ^ -276928646;
            continue;
          case 7:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -975661234;
            continue;
          case 8:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -887931394 ^ 614881576;
            continue;
          case 9:
            num1 = -2146686445;
            continue;
          case 10:
            int num5 = flag2 ? -164478328 : (num5 = -766534717);
            num1 = num5 ^ (int) num3 * 2096157110;
            continue;
          case 11:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1381811857 ^ 2071030537;
            continue;
          case 12:
            goto label_3;
          case 13:
            goto label_1;
          case 14:
            flag1 = planningCardsCount == 0;
            num1 = (int) num3 * -1232274068 ^ 106214905;
            continue;
          case 15:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * 1097376296 ^ 259169129;
            continue;
          case 16:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * 385484482 ^ 2021783745;
            continue;
          case 17:
            int num6 = flag3 ? -1772900755 : (num6 = -1995595436);
            num1 = num6 ^ (int) num3 * -607873364;
            continue;
          case 18:
            num1 = (int) num3 * -1550404858 ^ -393213175;
            continue;
          case 19:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * 1949916714 ^ -444272151;
            continue;
          case 20:
            num1 = (int) num3 * -23597012 ^ 1433714549;
            continue;
          case 21:
            int num7 = !morePlanningSprint ? -1828410403 : (num7 = -844357310);
            num1 = num7 ^ (int) num3 * 1857675737;
            continue;
          case 22:
            num1 = (int) num3 * -1555484948 ^ -130279642;
            continue;
          case 23:
            playerState.Sprint = 1;
            num1 = (int) num3 * 997037505 ^ -686523596;
            continue;
          case 24:
            index = 0;
            num1 = (int) num3 * 820016159 ^ 705753102;
            continue;
          case 25:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -3562413 ^ 1570713637;
            continue;
          case 26:
            num1 = -1489120133;
            continue;
          case 27:
            num2 = 0;
            num1 = -148324011;
            continue;
          default:
            goto label_30;
        }
      }
label_3:
      return;
label_30:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = -1169580299;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -425708880)) % 11U)
        {
          case 1:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u202C⁭‭‫‭‍‏⁯‬‭⁬‮⁮‍‍​⁪‬​‬⁫‎‬⁪⁯​‫‭⁪⁯‏⁬⁭⁮⁪⁭‫⁭⁭‌‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 240984409 ^ 1325183864;
            continue;
          case 2:
            num1 = (int) num2 * 1612507635 ^ -1852568990;
            continue;
          case 3:
            this.Print((object) Game.\u202E⁬⁭‌​‫⁭‎‮‍‪⁬‭‏‎⁬‪‎⁫‫‫‫⁪‪⁮‍‌⁯‫⁭‍‫⁪⁬⁭‮‫‪‌⁬‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -614672963;
            continue;
          case 4:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 413549366 ^ -1856758454;
            continue;
          case 5:
            this._currentPlayer = 0;
            flag = this._currentTurn > 0;
            num1 = (int) num2 * -1603889601 ^ -218019986;
            continue;
          case 6:
            num1 = (int) num2 * -414393460 ^ 2125249735;
            continue;
          case 7:
            int num3 = this._currentPlayer >= this.Players.Length ? -686832990 : (num3 = -1851559037);
            num1 = num3 ^ (int) num2 * -2135698824;
            continue;
          case 8:
            int num4 = flag ? 2108345743 : (num4 = 236474479);
            num1 = num4 ^ (int) num2 * -1783441043;
            continue;
          case 9:
            num1 = (int) num2 * -48793481 ^ 32615745;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_12;
        }
      }
label_12:
      this.PlayerTurn(this._currentPlayer);
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = 380843057;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        bool flag1;
        int num3;
        bool flag2;
        bool flag3;
        Card card;
        bool flag4;
        int index;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        int num4;
        bool flag9;
        bool flag10;
        bool flag11;
        PlayerState playerState2;
        int num5;
        bool flag12;
        int num6;
        switch ((num2 = (uint) (num1 ^ 856197825)) % 79U)
        {
          case 0:
            int num7;
            num1 = num7 = num3 < this._playerStates.Length ? 855798494 : (num7 = 234260583);
            continue;
          case 1:
            num1 = (int) num2 * 1659561644 ^ 196471598;
            continue;
          case 2:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * 1365445358 ^ 428656012;
            continue;
          case 3:
            num1 = (int) num2 * 1273611666 ^ -51960666;
            continue;
          case 4:
            num1 = (int) num2 * 1865783437 ^ -2094954349;
            continue;
          case 5:
            ++playerState1.Sprint;
            num1 = (int) num2 * -491676071 ^ 1678505765;
            continue;
          case 6:
            num1 = (int) num2 * -438385159 ^ -1207428729;
            continue;
          case 7:
            goto label_1;
          case 8:
            flag9 = !this.Losers.Contains(num3);
            num1 = 1054356074;
            continue;
          case 9:
            num1 = (int) num2 * 1993916007 ^ 105739451;
            continue;
          case 10:
            num1 = 446047061;
            continue;
          case 11:
            num1 = (int) num2 * 538560655 ^ 950927130;
            continue;
          case 12:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 13:
            num1 = 805325796;
            continue;
          case 14:
            num1 = 886147690;
            continue;
          case 15:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 1196679205 ^ -247561629;
            continue;
          case 16:
            int num8 = flag11 ? -741768561 : (num8 = -264769245);
            num1 = num8 ^ (int) num2 * 1201027829;
            continue;
          case 17:
            int num9 = !flag10 ? -374995953 : (num9 = -251216029);
            num1 = num9 ^ (int) num2 * -1453258087;
            continue;
          case 18:
            index = 0;
            num1 = (int) num2 * -575370723 ^ 1032415974;
            continue;
          case 19:
            num1 = (int) num2 * -1824082601 ^ -934620897;
            continue;
          case 20:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202C⁭‭‫‭‍‏⁯‬‭⁬‮⁮‍‍​⁪‬​‬⁫‎‬⁪⁯​‫‭⁪⁯‏⁬⁭⁮⁪⁭‫⁭⁭‌‮("\t", playerState3 != null ? Game.\u206A‮‭‭‮‭​‎⁭‫⁬⁮‏⁮‍⁭​⁮‍⁬‎‮‪‏‏‫‪​‫⁮⁬⁭‎⁭⁫⁬‍‪⁭⁬‮((object) playerState3) : (string) null));
            num1 = 116507922;
            continue;
          case 21:
            int num10 = flag7 ? -1067410230 : (num10 = -994431209);
            num1 = num10 ^ (int) num2 * 1145512821;
            continue;
          case 22:
            num1 = (int) num2 * 830442324 ^ -2115117308;
            continue;
          case 23:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 718625036 ^ 1596712244;
            continue;
          case 24:
            flag5 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 432042674;
            continue;
          case 25:
            int num11;
            num1 = num11 = playerState1.Sprint < 0 ? 1591640851 : (num11 = 605719639);
            continue;
          case 26:
            flag8 = true;
            num4 = card.Impact;
            num1 = (int) num2 * -539960225 ^ 1203246199;
            continue;
          case 27:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -953115657 ^ -217822977;
            continue;
          case 28:
            int num12;
            num1 = num12 = index >= this._playerStates.Length ? 323748572 : (num12 = 471217314);
            continue;
          case 29:
            num1 = 1204308987;
            continue;
          case 30:
            num1 = (int) num2 * -212026253 ^ 2076671196;
            continue;
          case 31:
            playerState1.Resources -= num4;
            num1 = (int) num2 * -1680874329 ^ -262521359;
            continue;
          case 32:
            num1 = (int) num2 * -530965834 ^ 1004600742;
            continue;
          case 33:
            flag2 = playerState1.Resources < 0;
            num1 = (int) num2 * 1893109265 ^ -1335896453;
            continue;
          case 34:
            ++playerState1.Sprint;
            num1 = (int) num2 * 488316267 ^ 1316562057;
            continue;
          case 35:
            goto label_3;
          case 36:
            playerState1.State = State.Lose;
            flag1 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * 1495629669 ^ -1741595351;
            continue;
          case 37:
            num1 = (int) num2 * 1230672270 ^ -1779556983;
            continue;
          case 38:
            int num13 = this.Rules.OnlyOneWinner ? 1875070723 : (num13 = 168247206);
            num1 = num13 ^ (int) num2 * -1316560458;
            continue;
          case 39:
            num1 = 1616282165;
            continue;
          case 40:
            this.Losers.Add(index);
            num1 = (int) num2 * 2098581864 ^ -718241939;
            continue;
          case 41:
            flag11 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 922564500;
            continue;
          case 42:
            num1 = (int) num2 * -1978813903 ^ -630109806;
            continue;
          case 43:
            num1 = (int) num2 * 486679017 ^ 824104591;
            continue;
          case 44:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -482223126 ^ -1221849922;
            continue;
          case 45:
            playerState1.State = State.Won;
            num1 = (int) num2 * 1983026627 ^ 883298128;
            continue;
          case 46:
            int num14 = flag5 ? -421663688 : (num14 = -772946974);
            num1 = num14 ^ (int) num2 * 2021939629;
            continue;
          case 47:
            int num15 = !flag9 ? -470381232 : (num15 = -25442676);
            num1 = num15 ^ (int) num2 * 575824351;
            continue;
          case 48:
            int num16 = flag3 ? 1705151536 : (num16 = 660451492);
            num1 = num16 ^ (int) num2 * -1180486670;
            continue;
          case 49:
            card = this.DrawCard();
            flag4 = card.Impact < 0;
            num1 = (int) num2 * -189453764 ^ 611497381;
            continue;
          case 50:
            int num17 = !flag1 ? 788314547 : (num17 = 126416096);
            num1 = num17 ^ (int) num2 * 1414089686;
            continue;
          case 51:
            playerState2.Resources -= Game.\u206F​⁪⁬⁭⁬‫⁭⁭‫⁬‌‫‌⁬‍⁬⁮​⁪⁪⁯​⁯⁯⁫⁪​‭⁮‎‍‍‫⁫⁬‫⁭‬‪‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            flag12 = playerState2.Resources >= 0;
            num1 = (int) num2 * 1872106377 ^ -440191662;
            continue;
          case 52:
            int num18 = !this.Losers.Contains(index) ? -1665234755 : (num18 = -340990645);
            num1 = num18 ^ (int) num2 * 1079143681;
            continue;
          case 53:
            num1 = 10137762;
            continue;
          case 54:
            flag8 = false;
            num1 = 2106347491;
            continue;
          case 55:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 1542975016 ^ -2086049936;
            continue;
          case 56:
            playerState2 = this._playerStates[index];
            num1 = 1023091808;
            continue;
          case 57:
            this._finished = true;
            num3 = 0;
            num1 = (int) num2 * -1399908496 ^ 2040511820;
            continue;
          case 58:
            flag3 = num3 == playerIndex;
            num1 = 233370216;
            continue;
          case 59:
            int num19 = !flag12 ? 974411960 : (num19 = 372984236);
            num1 = num19 ^ (int) num2 * -1581724597;
            continue;
          case 60:
            num1 = 260950917;
            continue;
          case 61:
            this.Print((object) Game.\u202C⁭‭‫‭‍‏⁯‬‭⁬‮⁮‍‍​⁪‬​‬⁫‎‬⁪⁯​‫‭⁪⁯‏⁬⁭⁮⁪⁭‫⁭⁭‌‮("\nPLAYER ", playerIndex.ToString()));
            flag6 = playerState1.State != 0;
            num1 = (int) num2 * -1684802442 ^ -1465276822;
            continue;
          case 62:
            num1 = (int) num2 * -1314646428 ^ 1647166535;
            continue;
          case 63:
            playerState2.State = State.Lose;
            num1 = 439230199;
            continue;
          case 64:
            num1 = (int) num2 * -1448869744 ^ 1945218655;
            continue;
          case 65:
            this.Losers.Add(num3);
            num1 = (int) num2 * -805329824 ^ 576417701;
            continue;
          case 66:
            int num20 = flag6 ? -459447692 : (num20 = -2107453051);
            num1 = num20 ^ (int) num2 * -2130570131;
            continue;
          case 67:
            ++num3;
            num1 = 1462931192;
            continue;
          case 68:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            flag8 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -427500012 ^ 1704456317;
            continue;
          case 69:
            num1 = 825865469;
            continue;
          case 70:
            num4 = Game.\u206F​⁪⁬⁭⁬‫⁭⁭‫⁬‌‫‌⁬‍⁬⁮​⁪⁪⁯​⁯⁯⁫⁪​‭⁮‎‍‍‫⁫⁬‫⁭‬‪‮(0, num5);
            num1 = (int) num2 * -615617024 ^ -1847530021;
            continue;
          case 71:
            num1 = (int) num2 * -297466319 ^ -877938706;
            continue;
          case 72:
            ++index;
            num1 = 1691946538;
            continue;
          case 73:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag7 ? (object) "ALL " : (object) "", flag4 ? (object) "receives" : (object) "pays", (object) Game.\u200F⁪‎‎‫‏⁫‪‎‎‪⁬‏‭​‫⁭⁭‌​⁫⁯⁫⁯⁭‫‫‌‫⁮‏⁯‬‏‏‏‍⁯​‌‮(num4), flag8 ? (object) "advance" : (object) "stay");
            num1 = 663204772;
            continue;
          case 74:
            int num21 = flag2 ? 843369083 : (num21 = 1061284211);
            num1 = num21 ^ (int) num2 * -2065705809;
            continue;
          case 75:
            flag8 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -2003587448 ^ 1668071909;
            continue;
          case 76:
            int num22;
            num1 = num22 = !flag8 ? 1238819985 : (num22 = 2091541641);
            continue;
          case 77:
            num1 = (int) num2 * 115778087 ^ -581853181;
            continue;
          case 78:
            num1 = (int) num2 * -802648616 ^ -772526578;
            continue;
          default:
            goto label_84;
        }
        flag7 = num6 != 0;
        flag10 = !flag4;
        num1 = 1354056385;
      }
label_3:
      return;
label_84:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -1837151337;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1953498499)) % 9U)
        {
          case 0:
            this._deck.RemoveAt(0);
            card2 = card1;
            num1 = (int) num2 * 74642698 ^ 1875887725;
            continue;
          case 1:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * -114853427 ^ -1785513245;
            continue;
          case 2:
            num1 = (int) num2 * 60461619 ^ 2071530433;
            continue;
          case 3:
            goto label_1;
          case 4:
            card1 = this._deck[0];
            num1 = -1141214151;
            continue;
          case 5:
            int num3 = flag ? 1663757845 : (num3 = 131780560);
            num1 = num3 ^ (int) num2 * 1328849795;
            continue;
          case 6:
            this.ShuffleCards();
            num1 = (int) num2 * 380472407 ^ 536330238;
            continue;
          case 8:
            num1 = (int) num2 * -1758030543 ^ -941313411;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
      int index = 0;
label_1:
      int num1 = -1205270350;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -291991596)) % 8U)
        {
          case 1:
            flag = index < this._playerStates.Length;
            num1 = -920642874;
            continue;
          case 2:
            int num3 = !flag ? -1909600828 : (num3 = -1086230475);
            num1 = num3 ^ (int) num2 * -98544494;
            continue;
          case 3:
            num1 = (int) num2 * -1633964307 ^ -75234717;
            continue;
          case 4:
            str2 = str1;
            num1 = (int) num2 * 285469651 ^ 849462779;
            continue;
          case 5:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206A‮‭‭‮‭​‎⁭‫⁬⁮‏⁮‍⁭​⁮‍⁬‎‮‪‏‏‫‪​‫⁮⁬⁭‎⁭⁫⁬‍‪⁭⁬‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200F‍‏⁮⁬‭‍⁪‪‏‮​‮‭​⁮‭‭⁫‏‪‎‭‮⁫‬⁬⁪⁪‍​⁮‌‬⁪‮​⁪⁭‌‮(strArray);
            ++index;
            num1 = -1987574155;
            continue;
          case 6:
            num1 = (int) num2 * -244069459 ^ -1130338405;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1783590773;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 685979660)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -142153815 ^ 810135622;
            continue;
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 1737972273 ^ -950841287;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = 554666444;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1799015094)) % 3U)
        {
          case 1:
            str = Game.\u200E‬‭⁬‍‫⁯⁪​⁪⁯⁪‬‪​‫‏‍⁪‫⁯‎‎‬‬​‫‫‏‭‭⁪⁮‭‌‫‎‭‪‎‮(Game.\u206A‮‭‭‮‭​‎⁭‫⁬⁮‏⁮‍⁭​⁮‍⁬‎‮‪‏‏‫‪​‫⁮⁬⁭‎⁭⁫⁬‍‪⁭⁬‮(text), more);
            num1 = (int) num2 * -98184021 ^ -101799314;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      Game.\u202A‪⁭‫‪⁬⁬⁯⁮‪‎‎‪‏⁮‮‬​‍‮‫‫‎‍​⁭⁬⁭⁫⁪⁮⁪‪‏⁮‏‍⁯⁮‌‮(this._buffer, str);
    }

    static Random \u206C⁪‭‪⁭⁭‌⁯‏⁬‬‎‏⁫⁭‭⁪‏‬‪‌‫‫⁯‮‮⁯⁫⁯⁮‫‮‍⁫‏⁮‍⁪⁯⁪‮([In] int obj0) => new Random(obj0);

    static string \u202E⁬⁭‌​‫⁭‎‮‍‪⁬‭‏‎⁬‪‎⁫‫‫‫⁪‪⁮‍‌⁯‫⁭‍‫⁪⁬⁭‮‫‪‌⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202C⁭‭‫‭‍‏⁯‬‭⁬‮⁮‍‍​⁪‬​‬⁫‎‬⁪⁯​‫‭⁪⁯‏⁬⁭⁮⁪⁭‫⁭⁭‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206F​⁪⁬⁭⁬‫⁭⁭‫⁬‌‫‌⁬‍⁬⁮​⁪⁪⁯​⁯⁯⁫⁪​‭⁮‎‍‍‫⁫⁬‫⁭‬‪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200F⁪‎‎‫‏⁫‪‎‎‪⁬‏‭​‫⁭⁭‌​⁫⁯⁫⁯⁭‫‫‌‫⁮‏⁯‬‏‏‏‍⁯​‌‮([In] int obj0) => Math.Abs(obj0);

    static string \u206A‮‭‭‮‭​‎⁭‫⁬⁮‏⁮‍⁭​⁮‍⁬‎‮‪‏‏‫‪​‫⁮⁬⁭‎⁭⁫⁬‍‪⁭⁬‮([In] object obj0) => obj0.ToString();

    static string \u200F‍‏⁮⁬‭‍⁪‪‏‮​‮‭​⁮‭‭⁫‏‪‎‭‮⁫‬⁬⁪⁪‍​⁮‌‬⁪‮​⁪⁭‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200E‬‭⁬‍‫⁯⁪​⁪⁯⁪‬‪​‫‏‍⁪‫⁯‎‎‬‬​‫‫‏‭‭⁪⁮‭‌‫‎‭‪‎‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202A‪⁭‫‪⁬⁬⁯⁮‪‎‎‪‏⁮‮‬​‍‮‫‫‎‍​⁭⁬⁭⁫⁪⁮⁪‪‏⁮‏‍⁯⁮‌‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
