// Decompiled with JetBrains decompiler
// Type: TexasHoldem.PokerHandCombinations
// Assembly: EventComm, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 230F04B0-E761-4388-A1F3-FE85FC156328
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.NanoBot.bezt-158185cef899d67faabf1e968de02b3a8cbd0446c0fdf0e3579cb4533dd3768d.exe

using System.Collections.Generic;

namespace TexasHoldem
{
  public static class PokerHandCombinations
  {
    public static List<PokerHand> GenerateBestHands(
      PokerHand communityHand,
      PokerHand knownHoleHand)
    {
      List<PokerHand> bestHands = new List<PokerHand>();
      foreach (PokerHand twoCardHoleHand in PokerHandCombinations.GenerateTwoCardHoleHands(communityHand, knownHoleHand))
        bestHands.Add(PokerHandCombinations.FindBestHand(communityHand, twoCardHoleHand));
      bestHands.Sort();
      bestHands.Reverse();
      return bestHands;
    }

    public static PokerHand FindBestHand(PokerHand communityHand, PokerHand holeHand)
    {
      List<PokerHand> pokerHandList = new List<PokerHand>();
      pokerHandList.Add(communityHand);
      for (int index1 = 0; index1 < communityHand.Cards.Count - 2; ++index1)
      {
        for (int index2 = index1 + 1; index2 < communityHand.Cards.Count - 1; ++index2)
        {
          for (int index3 = index2 + 1; index3 < communityHand.Cards.Count; ++index3)
          {
            PokerHand pokerHand = new PokerHand();
            pokerHand.Add(holeHand);
            pokerHand.Add(communityHand.Cards[index1]);
            pokerHand.Add(communityHand.Cards[index2]);
            pokerHand.Add(communityHand.Cards[index3]);
            pokerHandList.Add(pokerHand);
          }
        }
      }
      for (int index4 = 0; index4 < holeHand.Cards.Count; ++index4)
      {
        for (int index5 = 0; index5 < communityHand.Cards.Count - 3; ++index5)
        {
          for (int index6 = index5 + 1; index6 < communityHand.Cards.Count - 2; ++index6)
          {
            for (int index7 = index6 + 1; index7 < communityHand.Cards.Count - 1; ++index7)
            {
              for (int index8 = index7 + 1; index8 < communityHand.Cards.Count; ++index8)
              {
                PokerHand pokerHand = new PokerHand();
                pokerHand.Add(holeHand.Cards[index4]);
                pokerHand.Add(communityHand.Cards[index5]);
                pokerHand.Add(communityHand.Cards[index6]);
                pokerHand.Add(communityHand.Cards[index7]);
                pokerHand.Add(communityHand.Cards[index8]);
                pokerHandList.Add(pokerHand);
              }
            }
          }
        }
      }
      pokerHandList.Sort();
      pokerHandList.Reverse();
      return pokerHandList[0];
    }

    private static List<PokerHand> GenerateTwoCardHoleHands(
      PokerHand communityHand,
      PokerHand knownHoleHand)
    {
      List<PokerHand> pokerHandList = new List<PokerHand>();
      List<Card> cards = new CardDeck().Cards;
      foreach (Card card in communityHand.Cards)
        cards.Remove(card);
      foreach (Card card in knownHoleHand.Cards)
        cards.Remove(card);
      List<PokerHand> twoCardHoleHands = new List<PokerHand>();
      for (int index1 = 0; index1 < cards.Count - 1; ++index1)
      {
        for (int index2 = index1 + 1; index2 < cards.Count; ++index2)
        {
          PokerHand pokerHand = new PokerHand();
          pokerHand.Add(cards[index1]);
          pokerHand.Add(cards[index2]);
          twoCardHoleHands.Add(pokerHand);
        }
      }
      return twoCardHoleHands;
    }
  }
}
