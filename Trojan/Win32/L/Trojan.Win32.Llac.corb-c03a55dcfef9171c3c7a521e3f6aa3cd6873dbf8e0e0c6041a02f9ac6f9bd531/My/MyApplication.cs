// Decompiled with JetBrains decompiler
// Type: Sk1dZ__Crypter_Stub.My.MyApplication
// Assembly: Sk1dZ™ Crypter Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 765DE0A6-3ADE-4E57-B9F8-38E417A60863
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Llac.corb-c03a55dcfef9171c3c7a521e3f6aa3cd6873dbf8e0e0c6041a02f9ac6f9bd531.exe

using Microsoft.VisualBasic.ApplicationServices;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Security;
using System.Threading;
using System.Windows.Forms;
using Ⴈ;

namespace Sk1dZ__Crypter_Stub.My
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  [GeneratedCode("MyTemplate", "10.0.0.0")]
  internal sealed class MyApplication : WindowsFormsApplicationBase
  {
    private static List<WeakReference> Ⴐ;

    [SecuritySafeCritical]
    static MyApplication()
    {
      Ⴓ.ႣႼ();
      MyApplication.Ⴐ = new List<WeakReference>();
    }

    private static void Ⴐ(object Ⴍ)
    {
      List<WeakReference> ⴐ = MyApplication.Ⴐ;
      bool flag1 = false;
      try
      {
        int num1 = 9;
        bool flag2;
        int index1;
        int num2;
        int index2;
        while (true)
        {
          switch (num1)
          {
            case 1:
              num1 = !flag2 ? 12 : 4;
              continue;
            case 2:
              MyApplication.Ⴐ.RemoveRange(index1, checked (MyApplication.Ⴐ.Count - index1));
              MyApplication.Ⴐ.Capacity = MyApplication.Ⴐ.Count;
              num1 = 12;
              continue;
            case 3:
              num1 = !flag2 ? 7 : 13;
              continue;
            case 4:
              index1 = 0;
              num2 = checked (MyApplication.Ⴐ.Count - 1);
              index2 = 0;
              num1 = 15;
              continue;
            case 5:
              MyApplication.Ⴐ[index1] = MyApplication.Ⴐ[index2];
              num1 = 11;
              continue;
            case 6:
              flag2 = Ⴓ.Ⴍ.Ⴍ(MyApplication.Ⴐ[index2], 157, 169);
              num1 = 3;
              continue;
            case 7:
              checked { ++index2; }
              num1 = 15;
              continue;
            case 8:
              goto label_22;
            case 10:
              num1 = 8;
              continue;
            case 11:
            case 16:
              checked { ++index1; }
              num1 = 7;
              continue;
            case 12:
            case 14:
              MyApplication.Ⴐ.Add(new WeakReference(Ⴗ.Ⴄ(Ⴍ, 12, 87)));
              goto case 10;
            case 13:
              num1 = index2 == index1 ? 11 : 5;
              continue;
            case 15:
              num1 = index2 <= num2 ? 6 : 2;
              continue;
            default:
              Ⴗ.Ⴍ((object) ⴐ, ref flag1, 933, 953);
              flag2 = MyApplication.Ⴐ.Count == MyApplication.Ⴐ.Capacity;
              num1 = 1;
              continue;
          }
        }
      }
      finally
      {
        int num = 0;
        while (true)
        {
          switch (num)
          {
            case 2:
            case 5:
              Monitor.Exit((object) ⴐ);
              num = 3;
              continue;
            case 3:
              goto label_21;
            default:
              num = !flag1 ? 3 : 5;
              continue;
          }
        }
label_21:;
      }
label_22:
      switch (3)
      {
      }
    }

    [STAThread]
    [SecuritySafeCritical]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    internal static void Ⴅ(string[] Ⴍ)
    {
      Ⴓ.ႣႼ();
      try
      {
        MyComputer.ႥႰ(WindowsFormsApplicationBase.UseCompatibleTextRendering, 471, 410);
      }
      finally
      {
      }
      Ⴈ.Ⴈ.ႠႨ((WindowsFormsApplicationBase) MyProject.Ⴐ, Ⴍ, 486, 395);
    }

    public MyApplication()
      : base(AuthenticationMode.Windows)
    {
      MyApplication.Ⴐ((object) this);
      this.IsSingleInstance = false;
      this.EnableVisualStyles = true;
      Ⴓ.Ⴍ.ႤႭ((WindowsFormsApplicationBase) this, true, 914, 966);
      this.ShutdownStyle = ShutdownMode.AfterMainFormCloses;
    }

    protected override void OnCreateMainForm() => this.MainForm = (Form) MyProject.Ⴄ.Ⴐ();
  }
}
