// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: جY, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4509E19C-3738-48CD-AFB9-B77E11D0C93B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-64fa23f22cfa820eb89b80e1db1502fcaebcb66c1731e92f550c12ca940e8075.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
      this.ChessBoard = b;
      this.resetFlags();
    }

    public ChessCore()
    {
    }

    public void RestartGame()
    {
      this.resetFlags();
label_1:
      int num1 = 1700232032;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 585488651)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.ChessBoard.Restart();
            num1 = (int) num2 * -388716999 ^ 1905915156;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    private void resetFlags(bool turn = false)
    {
label_1:
      int num1 = -487885246;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -617546285)) % 6U)
        {
          case 0:
            this.lastCheckPiece = (Square) null;
            this.Turns.Clear();
            num1 = (int) num2 * 95731678 ^ 461530066;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.WhosPlaying = PieceColor.White;
            num1 = (int) num2 * -1445483385 ^ -531332584;
            continue;
          case 3:
            this.TurnId = 1;
            num1 = (int) num2 * -1065270105 ^ 895768046;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.DisableTurn = turn;
            num1 = (int) num2 * 1881250995 ^ 1216604494;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = -508251071;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1231959171)) % 6U)
        {
          case 0:
            this.resetFlags(true);
            num1 = (int) num2 * 902373096 ^ 1753774774;
            continue;
          case 1:
            num1 = (int) num2 * 885485398 ^ 1100932987;
            continue;
          case 2:
            new DebugChess(this.ChessBoard).TestPassant();
            num1 = (int) num2 * 619146208 ^ -1145832032;
            continue;
          case 3:
            num1 = (int) num2 * -4617092 ^ 1497544509;
            continue;
          case 4:
            goto label_3;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = 1964666037;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1421702232)) % 5U)
        {
          case 0:
            this.resetFlags(true);
            num1 = (int) num2 * -261285699 ^ 326772299;
            continue;
          case 1:
            new DebugChess(this.ChessBoard).TestSinglePiece(x);
            num1 = (int) num2 * 181785499 ^ 1103922660;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 928735800 ^ 974231612;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestCastling()
    {
label_1:
      int num1 = 1452355666;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1737007716)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            new DebugChess(this.ChessBoard).TestCastling();
            num1 = (int) num2 * 1087009396 ^ -268967093;
            continue;
          case 3:
            num1 = (int) num2 * 349610864 ^ 2054500405;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.resetFlags(true);
    }

    internal void TestCheck()
    {
label_1:
      int num1 = 258264126;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 630779168)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * -1278570278 ^ 1868188122;
            continue;
          case 2:
            new DebugChess(this.ChessBoard).TestCheck();
            num1 = (int) num2 * -446125604 ^ -1861712199;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = -1084166820;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1185848692)) % 5U)
        {
          case 0:
            num1 = (int) num2 * -143185994 ^ 1517309394;
            continue;
          case 1:
            new DebugChess(this.ChessBoard).TestDiscoverCheck();
            num1 = (int) num2 * -1721515959 ^ 947984823;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * -1919202975 ^ 244129004;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestPromotion()
    {
      new DebugChess(this.ChessBoard).TestPromotion();
      this.resetFlags(true);
    }

    internal void CheckOnCastling()
    {
      new DebugChess(this.ChessBoard).CheckOnCastling();
      this.resetFlags(true);
    }
  }
}
