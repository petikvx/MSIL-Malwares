// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.DictionaryAttributeLimiter
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using System.Collections.Generic;

namespace PreEmptive.Analytics.Common
{
  public class DictionaryAttributeLimiter : 
    Dictionary<string, Dictionary<string, int>>,
    IAttributeLimiter
  {
    public DictionaryAttributeLimiter()
    {
    }

    public DictionaryAttributeLimiter(IDictionary<string, Dictionary<string, int>> clone)
    {
      foreach (string key1 in (IEnumerable<string>) clone.Keys)
      {
        this.Add(key1, new Dictionary<string, int>());
        foreach (string key2 in clone[key1].Keys)
          this[key1].Add(key2, clone[key1][key2]);
      }
    }

    public int? MaxSize(string tagname, string attribute)
    {
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_8;
          case 1:
            if (!this[tagname].ContainsKey(attribute))
              goto label_12;
            else
              break;
          case 2:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          case 3:
            num = 1;
            continue;
          default:
label_3:
            if (false)
              ;
            if (this.ContainsKey(tagname))
            {
              switch (true ? 1 : 0)
              {
                case 0:
                case 2:
                  break;
                default:
                  if (true)
                    ;
                  num = 3;
                  continue;
              }
            }
            else
              goto label_12;
            break;
        }
        num = 0;
      }
label_8:
      return new int?(this[tagname][attribute]);
label_12:
      return new int?();
    }

    public void Set(string tag, string attribute, int limit)
    {
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
            if (false)
              ;
            num = 1;
            continue;
          case 1:
            if (!this[tag].ContainsKey(attribute))
            {
              num = 2;
              continue;
            }
            goto label_13;
          case 2:
            goto label_10;
          case 3:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          case 4:
            this.Add(tag, new Dictionary<string, int>());
            num = 0;
            continue;
          default:
label_3:
            if (!this.ContainsKey(tag))
            {
              num = 4;
              continue;
            }
            goto case 0;
        }
      }
label_10:
      switch (true ? 1 : 0)
      {
        case 0:
        case 2:
          this[tag].Add(attribute, limit);
          return;
        default:
          if (true)
            goto case 0;
          else
            goto case 0;
      }
label_13:
      this[tag][attribute] = limit;
    }

    public DictionaryAttributeLimiter Clone()
    {
      int num1 = 7750;
      int num2 = num1;
      num1 = 7750;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          return new DictionaryAttributeLimiter((IDictionary<string, Dictionary<string, int>>) this);
        default:
          goto case 1;
      }
    }
  }
}
