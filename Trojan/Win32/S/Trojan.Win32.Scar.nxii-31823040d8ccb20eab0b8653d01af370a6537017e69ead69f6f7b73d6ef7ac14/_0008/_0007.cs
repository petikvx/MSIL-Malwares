// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BitGenerator, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=70e4c26ef2031892
// MVID: D3922F89-E00A-4D10-8BC9-9309D5539F14
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.nxii-31823040d8ccb20eab0b8653d01af370a6537017e69ead69f6f7b73d6ef7ac14.exe

using \u0004;
using \u0014;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0008
{
  internal struct \u0007
  {
    private char[] \u0001;
    private int \u0001;

    [SpecialName]
    public int \u0001() => this.\u0001;

    [SpecialName]
    public void \u0001([In] int obj0) => this.\u0001 = obj0;

    [SpecialName]
    public bool \u0001() => this.\u0001 == null;

    public \u0007([In] \u0003<char> obj0, [In] int obj1)
      : this(\u0006.\u0001(obj0, obj1))
    {
    }

    private \u0007([In] char[] obj0)
    {
      this.\u0001 = obj0;
      this.\u0001 = 0;
    }

    public void \u0001([In] \u0003<char> obj0, [In] char obj1)
    {
label_0:
      int num1 = this.\u0001;
      int num2 = this.\u0001.Length;
      int num3;
      while (true)
      {
        num3 = num2;
        if (false)
          num2 = num3;
        else
          break;
      }
      if (num1 == num3)
        this.\u0001(obj0, 1);
      do
      {
        this.\u0001[this.\u0001++] = obj1;
        if (false)
          goto label_0;
      }
      while (false);
    }

    public void \u0001([In] \u0003<char> obj0, [In] char[] obj1, [In] int obj2, [In] int obj3)
    {
      while (this.\u0001 + obj3 >= this.\u0001.Length)
      {
        if (true)
        {
          if (false)
            return;
          if (true)
          {
            this.\u0001(obj0, obj3);
            break;
          }
          break;
        }
      }
      Array.Copy((Array) obj1, obj2, (Array) this.\u0001, this.\u0001, obj3);
      this.\u0001 += obj3;
    }

    public void \u0001([In] \u0003<char> obj0)
    {
      if (false)
        return;
      if (this.\u0001 != null)
      {
        \u0006.\u0001(obj0, this.\u0001);
        if (false)
          return;
        this.\u0001 = (char[]) null;
      }
      this.\u0001 = 0;
    }

    private void \u0001([In] \u0003<char> obj0, [In] int obj1)
    {
      char[] destinationArray = \u0006.\u0001(obj0, (this.\u0001 + obj1) * 2);
      if (this.\u0001 != null)
        goto label_2;
label_1:
      this.\u0001 = destinationArray;
      return;
label_2:
      Array.Copy((Array) this.\u0001, (Array) destinationArray, this.\u0001);
      \u0006.\u0001(obj0, this.\u0001);
      goto label_1;
    }

    string ValueType.\u0001() => this.\u0001(0, this.\u0001);

    public string \u0001([In] int obj0, [In] int obj1) => new string(this.\u0001, obj0, obj1);

    [SpecialName]
    public char[] \u0001() => this.\u0001;
  }
}
