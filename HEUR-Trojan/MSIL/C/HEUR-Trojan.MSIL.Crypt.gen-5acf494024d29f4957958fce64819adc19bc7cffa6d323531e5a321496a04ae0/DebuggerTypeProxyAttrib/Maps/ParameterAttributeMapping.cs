// Decompiled with JetBrains decompiler
// Type: DebuggerTypeProxyAttrib.Maps.ParameterAttributeMapping
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Pages;
using System;
using System.Runtime.CompilerServices;

namespace DebuggerTypeProxyAttrib.Maps
{
  public struct ParameterAttributeMapping
  {
    private string _TemplateWrapper;
    private string descriptorWrapper;
    private string candidateWrapper;
    private int m_TagWrapper;
    private DateTime _ParameterWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ParameterAttributeMapping(
      string param,
      string reg,
      string res,
      int size_instance2,
      DateTime connection3)
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            RegistryPagePage.ListMethod();
            num1 = 1;
            continue;
          case 1:
            this._TemplateWrapper = param;
            num2 = 5;
            break;
          case 2:
          case 5:
            this.descriptorWrapper = reg;
            this.candidateWrapper = res;
            this.m_TagWrapper = size_instance2;
            goto case 4;
          case 4:
            this._ParameterWrapper = connection3;
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto label_8;
          case 6:
            goto label_9;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_9:
      return;
label_8:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string MovePrototype() => this._TemplateWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string ReflectPrototype() => this.descriptorWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string ValidatePrototype() => this.candidateWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int ResolvePrototype() => this.m_TagWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public DateTime PushPrototype() => this._ParameterWrapper;

    internal static bool PatchMethod() => true;

    internal static bool RateMethod() => false;
  }
}
