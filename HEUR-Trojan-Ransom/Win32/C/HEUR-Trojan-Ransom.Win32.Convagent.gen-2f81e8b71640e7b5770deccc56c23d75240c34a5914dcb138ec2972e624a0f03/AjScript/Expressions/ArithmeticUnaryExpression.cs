// Decompiled with JetBrains decompiler
// Type: AjScript.Expressions.ArithmeticUnaryExpression
// Assembly: FUNCD, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 38B3918C-7BBD-4048-BF6D-F5A856A1A18A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Convagent.gen-2f81e8b71640e7b5770deccc56c23d75240c34a5914dcb138ec2972e624a0f03.exe

using AjScript.Language;
using Microsoft.VisualBasic.CompilerServices;
using System;

namespace AjScript.Expressions
{
  public class ArithmeticUnaryExpression : UnaryExpression
  {
    private Func<object, object> function;
    private ArithmeticOperator operation;

    public ArithmeticUnaryExpression(ArithmeticOperator operation, IExpression expression)
      : base(expression)
    {
      this.operation = operation;
      if (operation != ArithmeticOperator.Plus)
      {
        if (operation != ArithmeticOperator.Minus)
          throw new ArgumentException("Invalid operator");
        this.function = new Func<object, object>(Operators.NegateObject);
      }
      else
        this.function = new Func<object, object>(Operators.PlusObject);
    }

    public ArithmeticOperator Operation => this.operation;

    public override object Apply(object value) => value == null ? value : this.function(value);
  }
}
