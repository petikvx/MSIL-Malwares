// Decompiled with JetBrains decompiler
// Type: CiscoAnyconnectControl.UI.View.Controls.LoadingIndicator
// Assembly: PermissionSetEntryFiel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FE7870A8-3D72-435A-B1B6-C43A7BD9D85D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-b1fe2bbd10b5fe7733eb80b097a529523745c19089a8eb4202d5883f40383894.exe

using System.Collections;
using System.Windows;
using System.Windows.Controls;

namespace CiscoAnyconnectControl.UI.View.Controls
{
  [TemplatePart(Name = "Border", Type = typeof (Border))]
  public class LoadingIndicator : Control
  {
    public static readonly DependencyProperty SpeedRatioProperty = DependencyProperty.Register(nameof (SpeedRatio), typeof (double), typeof (LoadingIndicator), new PropertyMetadata((object) 1.0, (PropertyChangedCallback) ((o, e) =>
    {
      LoadingIndicator loadingIndicator = (LoadingIndicator) o;
      if (loadingIndicator.PART_Border == null || !loadingIndicator.IsActive)
        return;
      foreach (VisualStateGroup visualStateGroup in (IEnumerable) VisualStateManager.GetVisualStateGroups((FrameworkElement) loadingIndicator.PART_Border))
      {
        if (visualStateGroup.Name == "ActiveStates")
        {
          foreach (VisualState state in (IEnumerable) visualStateGroup.States)
          {
            if (state.Name == "Active")
              state.Storyboard.SetSpeedRatio((FrameworkElement) loadingIndicator.PART_Border, (double) e.NewValue);
          }
        }
      }
    })));
    public static readonly DependencyProperty IsActiveProperty = DependencyProperty.Register(nameof (IsActive), typeof (bool), typeof (LoadingIndicator), new PropertyMetadata((object) true, (PropertyChangedCallback) ((o, e) =>
    {
      LoadingIndicator loadingIndicator = (LoadingIndicator) o;
      if (loadingIndicator.PART_Border == null)
        return;
      if (!(bool) e.NewValue)
      {
        VisualStateManager.GoToElementState((FrameworkElement) loadingIndicator.PART_Border, "Inactive", false);
        loadingIndicator.PART_Border.Visibility = Visibility.Collapsed;
      }
      else
      {
        VisualStateManager.GoToElementState((FrameworkElement) loadingIndicator.PART_Border, "Active", false);
        loadingIndicator.PART_Border.Visibility = Visibility.Visible;
        foreach (VisualStateGroup visualStateGroup in (IEnumerable) VisualStateManager.GetVisualStateGroups((FrameworkElement) loadingIndicator.PART_Border))
        {
          if (visualStateGroup.Name == "ActiveStates")
          {
            foreach (VisualState state in (IEnumerable) visualStateGroup.States)
            {
              if (state.Name == "Active")
                state.Storyboard.SetSpeedRatio((FrameworkElement) loadingIndicator.PART_Border, loadingIndicator.SpeedRatio);
            }
          }
        }
      }
    })));
    protected Border PART_Border;

    public double SpeedRatio
    {
      get => (double) this.GetValue(LoadingIndicator.SpeedRatioProperty);
      set => this.SetValue(LoadingIndicator.SpeedRatioProperty, (object) value);
    }

    public bool IsActive
    {
      get => (bool) this.GetValue(LoadingIndicator.IsActiveProperty);
      set => this.SetValue(LoadingIndicator.IsActiveProperty, (object) value);
    }

    public override void OnApplyTemplate()
    {
      base.OnApplyTemplate();
      this.PART_Border = (Border) this.GetTemplateChild("PART_Border");
      if (this.PART_Border == null)
        return;
      VisualStateManager.GoToElementState((FrameworkElement) this.PART_Border, this.IsActive ? "Active" : "Inactive", false);
      foreach (VisualStateGroup visualStateGroup in (IEnumerable) VisualStateManager.GetVisualStateGroups((FrameworkElement) this.PART_Border))
      {
        if (visualStateGroup.Name == "ActiveStates")
        {
          foreach (VisualState state in (IEnumerable) visualStateGroup.States)
          {
            if (state.Name == "Active")
              state.Storyboard.SetSpeedRatio((FrameworkElement) this.PART_Border, this.SpeedRatio);
          }
        }
      }
      this.PART_Border.Visibility = this.IsActive ? Visibility.Visible : Visibility.Collapsed;
    }
  }
}
