// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: Xe, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E8DDD59-A67B-4ABD-99CD-92D28751A620
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2fdfbfc735f43a4e2dce0c849b41ab83dd17228f6df983f7a95d6e427cdc77b0.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
label_1:
      int num1 = -2090870824;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1328730379)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1524330054 ^ -710799132;
            continue;
          case 2:
            this.resetFlags();
            num1 = (int) num2 * 1816075381 ^ 482215064;
            continue;
          case 3:
            goto label_3;
          case 4:
            this.ChessBoard = b;
            num1 = (int) num2 * -1318065266 ^ 1675386607;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public ChessCore()
    {
    }

    public void RestartGame()
    {
label_1:
      int num1 = 686331047;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 428916455)) % 6U)
        {
          case 0:
            this.ChessBoard.Restart();
            num1 = (int) num2 * 1022551682 ^ 779590640;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.resetFlags();
            num1 = (int) num2 * -249902688 ^ -1014671315;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -1069502144 ^ -1741422473;
            continue;
          case 5:
            num1 = (int) num2 * 57709727 ^ -1890017345;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    private void resetFlags(bool turn = false)
    {
label_1:
      int num1 = -723939424;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -123194462)) % 6U)
        {
          case 0:
            goto label_3;
          case 1:
            this.TurnId = 1;
            this.lastCheckPiece = (Square) null;
            num1 = (int) num2 * -1247270992 ^ 1806428837;
            continue;
          case 2:
            this.DisableTurn = turn;
            this.WhosPlaying = PieceColor.White;
            num1 = (int) num2 * 1499533997 ^ 1348320161;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 1904097383 ^ -1179157512;
            continue;
          case 5:
            this.Turns.Clear();
            num1 = (int) num2 * 1086265196 ^ 218942122;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void TestPassant()
    {
      new DebugChess(this.ChessBoard).TestPassant();
label_1:
      int num1 = 2114328510;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 455144390)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 77643227 ^ -1805744914;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      this.resetFlags(true);
    }

    internal void TestSinglePiece(Pieces x)
    {
      new DebugChess(this.ChessBoard).TestSinglePiece(x);
      this.resetFlags(true);
    }

    internal void TestCastling()
    {
      new DebugChess(this.ChessBoard).TestCastling();
label_1:
      int num1 = 846121565;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 672468060)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1285322898 ^ -679307496;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * -683789226 ^ -1973586153;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = 1137048312;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1095654435)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * 67388229 ^ 1455845564;
            continue;
          case 2:
            goto label_3;
          case 3:
            new DebugChess(this.ChessBoard).TestCheck();
            num1 = (int) num2 * -11770674 ^ 468531656;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestDiscoverCheck()
    {
      new DebugChess(this.ChessBoard).TestDiscoverCheck();
label_1:
      int num1 = 720212397;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 184067612)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1394133379 ^ 1895040719;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 2003712946 ^ 1806045371;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestPromotion()
    {
      new DebugChess(this.ChessBoard).TestPromotion();
label_1:
      int num1 = 2126664762;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1733852971)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * -567452682 ^ -1610864311;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = -2132861624;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -162519243)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            new DebugChess(this.ChessBoard).CheckOnCastling();
            num1 = (int) num2 * -1150294247 ^ -951120261;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * 450660400 ^ -1772617967;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }
  }
}
