// Decompiled with JetBrains decompiler
// Type: Dbasic.KeyWords.CkwSelect
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

namespace Dbasic.KeyWords
{
  public class CkwSelect : CkeyWords
  {
    public CkwSelect(CRunner CRunner)
      : base(CRunner)
    {
    }

    public override MethodReturn Method(Place place, ref Locals locals)
    {
      int level = this.CRunner.GetWord(place.LineI, place.WordI).Level;
      int alGotoWord1 = (int) this.CRunner.alGotoWords[level];
      RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn1.place;
      string vString = runReturn1.vString;
      Word.SugMila sugMila = runReturn1.word.sugMila;
      int num = 1;
label_10:
      while (num < alGotoWord1)
      {
        string alGotoWord2 = (string) this.CRunner.alGotoWords[level + num];
        place = (Place) this.CRunner.alGotoWords[level + num + 1];
        num += 2;
        if (!(alGotoWord2 == "end select"))
        {
          RunReturn runReturn2;
          while (true)
          {
            runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
            place = runReturn2.place;
            string str = runReturn2.vString;
            if (runReturn2.word.Value == "else")
            {
              str = vString;
              ++place.WordI;
            }
            if ((vString == "0" || str == "0") && (vString == "" && sugMila == Word.SugMila.Mishtane || str == "" && runReturn2.word.sugMila == Word.SugMila.Mishtane))
              str = vString;
            if (!(vString == str))
            {
              if (this.CRunner.CheckNextWord(place) && this.CRunner.nextWord(false, ref place).Value == ",")
                ++place.WordI;
              else
                goto label_10;
            }
            else
              break;
          }
          ++place.LineI;
          place.WordI = -1;
          runReturn2 = this.CRunner.RunCode(place, true, false, ref locals);
          place = (Place) this.CRunner.alGotoWords[level + alGotoWord1];
          break;
        }
        break;
      }
      return new MethodReturn(place);
    }
  }
}
