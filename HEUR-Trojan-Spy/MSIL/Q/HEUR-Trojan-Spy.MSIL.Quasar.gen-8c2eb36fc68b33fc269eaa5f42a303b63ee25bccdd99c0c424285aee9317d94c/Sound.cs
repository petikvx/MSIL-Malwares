// Decompiled with JetBrains decompiler
// Type: Mario_KS.Sound
// Assembly: OnSerializingAttribute, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F72B5184-77D9-4DBB-B29C-2F3B04C48CCD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-8c2eb36fc68b33fc269eaa5f42a303b63ee25bccdd99c0c424285aee9317d94c.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Runtime.InteropServices;

namespace Mario_KS
{
  public class Sound
  {
    public bool Async;
    public bool LoopSound;
    public bool NoStop;
    public bool NoDefault;
    public bool NoWait;
    private byte[] bData;

    [DllImport("winmm.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int PlaySoundA([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszName, IntPtr hModule, int dwFlags);

    [DllImport("winmm.dll", EntryPoint = "PlaySoundA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int PlaySoundM(byte[] lpData, IntPtr hModule, int dwFlags);

    public Sound(bool Async) => this.Async = Async;

    public Sound(UnmanagedMemoryStream Sound, bool Async)
    {
      this.LoadResource(Sound);
      this.Async = Async;
    }

    private int GetFlags() => Conversions.ToInteger(Operators.OrObject(Operators.OrObject(Operators.OrObject(Interaction.IIf(this.Async, (object) Sound.SoundFlags.SND_ASYNC, (object) 0), Interaction.IIf(this.LoopSound, (object) Sound.SoundFlags.SND_LOOP, (object) 0)), Interaction.IIf(this.NoStop, (object) Sound.SoundFlags.SND_NOSTOP, (object) 0)), Interaction.IIf(this.NoWait, (object) Sound.SoundFlags.SND_NOWAIT, (object) 0)));

    private void LoadResource(UnmanagedMemoryStream Sound)
    {
      this.bData = new byte[checked ((int) Sound.Length + 1)];
      Sound.Read(this.bData, 0, checked ((int) Sound.Length));
    }

    public bool PlaySound(bool Purge) => Sound.PlaySoundM(this.bData, IntPtr.Zero, Conversions.ToInteger(Operators.OrObject((object) (this.GetFlags() | 4), Interaction.IIf(Purge, (object) Sound.SoundFlags.SND_PURGE, (object) 0)))) != 0;

    public bool PlaySound(string FileName, bool Purge) => Sound.PlaySoundA(ref FileName, IntPtr.Zero, Conversions.ToInteger(Operators.OrObject((object) (this.GetFlags() | 131072), Interaction.IIf(Purge, (object) Sound.SoundFlags.SND_PURGE, (object) 0)))) == 0;

    public bool PlaySound(string Recource, string AppPath) => Sound.PlaySoundA(ref Recource, IntPtr.Zero, this.GetFlags() | 128) == 0;

    public bool PlaySound(string AppEvent) => Sound.PlaySoundA(ref AppEvent, IntPtr.Zero, this.GetFlags() | 128) == 0;

    private enum SoundFlags
    {
      SND_ASYNC = 1,
      SND_NODEFAULT = 2,
      SND_MEMORY = 4,
      SND_LOOP = 8,
      SND_NOSTOP = 16, // 0x00000010
      SND_PURGE = 64, // 0x00000040
      SND_APPLICATION = 128, // 0x00000080
      SND_NOWAIT = 8192, // 0x00002000
      SND_ALIAS = 65536, // 0x00010000
      SND_FILENAME = 131072, // 0x00020000
      SND_RESOURCE = 262148, // 0x00040004
      SND_ALIAS_ID = 1114112, // 0x00110000
    }
  }
}
