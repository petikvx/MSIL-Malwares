// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: ModuleBuild, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 89F10113-88CA-4804-9B17-4A5288FD99D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-2e269df5f1ed94bc3f07c434a6d33a1e48ce04fd0feb953bba71e2a8ced82875.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
label_1:
      int num1 = 12093303;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 946693112)) % 4U)
        {
          case 0:
            this.m_Node = aNode;
            num1 = (int) num2 * 1322217750 ^ 2013168057;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 513488012 ^ -1511414328;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.m_Key = (string) null;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
      this.m_Node = aNode;
      this.m_Key = aKey;
    }

    private void Set(JSONNode aVal)
    {
label_1:
      int num1 = -153732107;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1127804365)) % 12U)
        {
          case 0:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = (int) num2 * -1131874048 ^ -720771148;
            continue;
          case 1:
            num1 = (int) num2 * 1736667047 ^ -286846516;
            continue;
          case 2:
            num1 = (int) num2 * 1965008046 ^ 710688962;
            continue;
          case 3:
            goto label_3;
          case 4:
            this.m_Node = (JSONNode) null;
            num1 = -207270096;
            continue;
          case 5:
            num1 = -919553541;
            continue;
          case 6:
            flag = this.m_Key == null;
            num1 = (int) num2 * -551844584 ^ 1701434309;
            continue;
          case 7:
            num1 = (int) num2 * 1787997238 ^ 1692307105;
            continue;
          case 8:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * -1709789031 ^ 313122413;
            continue;
          case 9:
            goto label_1;
          case 10:
            int num3 = !flag ? 1557583712 : (num3 = 755608938);
            num1 = num3 ^ (int) num2 * 1263791033;
            continue;
          case 11:
            num1 = (int) num2 * -1031584349 ^ 1729223066;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 544771847;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2042185312)) % 3U)
          {
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
              num1 = (int) num2 * -315261432 ^ 1968444931;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 414890997;
        JSONArray aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1852340530)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              aVal = new JSONArray();
              aVal.Add(value);
              num1 = (int) num2 * -271564632 ^ -786326002;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * 807955299 ^ 1099731492;
              continue;
            case 4:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -237501283 ^ 494391323;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
        JSONNode jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
label_1:
        int num1 = 2059023811;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1835996180)) % 3U)
          {
            case 1:
              num1 = (int) num2 * 1940192270 ^ 732025223;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 1212777069;
        JSONClass aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 165205692)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal = new JSONClass();
              num1 = (int) num2 * 1281976282 ^ 1186440844;
              continue;
            case 2:
              aVal.Add(aKey, value);
              num1 = (int) num2 * -988291407 ^ -53853075;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        this.Set((JSONNode) aVal);
      }
    }

    public override void Add(JSONNode aItem)
    {
label_1:
      int num1 = 254009019;
      JSONArray aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1255937038)) % 4U)
        {
          case 0:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -935476639 ^ 1555538816;
            continue;
          case 1:
            aVal = new JSONArray();
            aVal.Add(aItem);
            num1 = (int) num2 * -2102104637 ^ -1877049051;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public override void Add(string aKey, JSONNode aItem)
    {
      JSONClass aVal = new JSONClass();
label_1:
      int num1 = -1814791620;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -458219478)) % 5U)
        {
          case 0:
            num1 = (int) num2 * 1311869391 ^ -1451944642;
            continue;
          case 1:
            aVal.Add(aKey, aItem);
            num1 = (int) num2 * -568157571 ^ 1521554865;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * 1604827246 ^ -939574100;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
      bool flag1 = b == null;
label_1:
      int num1 = 354719412;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 972478755)) % 6U)
        {
          case 0:
            flag2 = true;
            num1 = (int) num2 * -185638919 ^ -1173955684;
            continue;
          case 1:
            int num3 = !flag1 ? 787171882 : (num3 = 1095753311);
            num1 = num3 ^ (int) num2 * -1572403714;
            continue;
          case 2:
            num1 = (int) num2 * -2024900191 ^ -1131950998;
            continue;
          case 3:
            flag2 = (object) a == b;
            num1 = 2090290155;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_7:
      return flag2;
    }

    public static bool operator !=(JSONLazyCreator a, object b)
    {
      bool flag = !(a == b);
label_1:
      int num1 = 432703739;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 801801866)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 2011868569 ^ 1132046021;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    public override bool Equals(object obj)
    {
      bool flag1 = obj == null;
label_1:
      int num1 = -590420400;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1017400708)) % 6U)
        {
          case 0:
            num1 = (int) num2 * -1112460221 ^ 1771441203;
            continue;
          case 1:
            flag2 = true;
            num1 = (int) num2 * 2041648524 ^ -1735120548;
            continue;
          case 2:
            int num3 = flag1 ? 1797944625 : (num3 = 41270942);
            num1 = num3 ^ (int) num2 * 2057072114;
            continue;
          case 4:
            flag2 = (object) this == obj;
            num1 = -165655001;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_7:
      return flag2;
    }

    public override int GetHashCode()
    {
label_1:
      int num1 = 1747344609;
      int hashCode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1593215266)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            hashCode = base.GetHashCode();
            num1 = (int) num2 * 708497433 ^ 1629765785;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return hashCode;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1995101550;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 810967159)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = "";
            num1 = (int) num2 * 1548169156 ^ 656507305;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = -540640533;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -342384133)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = "";
            num1 = (int) num2 * 1894460007 ^ 1021273661;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override int AsInt
    {
      get
      {
        JSONData aVal = new JSONData(0);
label_1:
        int num1 = -1968272940;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -317441408)) % 5U)
          {
            case 1:
              asInt = 0;
              num1 = (int) num2 * 613531564 ^ 1128000576;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 159008473 ^ -1272193599;
              continue;
            case 3:
              goto label_1;
            case 4:
              num1 = (int) num2 * 1978683024 ^ 890737836;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asInt;
      }
      set
      {
label_1:
        int num1 = -1037428291;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1136868318)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              num1 = (int) num2 * -598942403 ^ -312856043;
              continue;
            case 3:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * -1826162400 ^ -688680648;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override float AsFloat
    {
      get
      {
        JSONData aVal = new JSONData(0.0f);
label_1:
        int num1 = 1464171542;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 867853679)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -401242146 ^ -1315523013;
              continue;
            case 3:
              asFloat = 0.0f;
              num1 = (int) num2 * -123384542 ^ -353450628;
              continue;
            case 4:
              num1 = (int) num2 * 1426203054 ^ 1097418291;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asFloat;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override double AsDouble
    {
      get
      {
label_1:
        int num1 = 1981727833;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1651191574)) % 5U)
          {
            case 0:
              num1 = (int) num2 * 1607096132 ^ -574689688;
              continue;
            case 1:
              this.Set((JSONNode) new JSONData(0.0));
              num1 = (int) num2 * -853144130 ^ 1008542630;
              continue;
            case 2:
              goto label_1;
            case 3:
              asDouble = 0.0;
              num1 = (int) num2 * 2096458034 ^ 568398018;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asDouble;
      }
      set
      {
label_1:
        int num1 = -704594575;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -679627404)) % 5U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1715852928 ^ -98134273;
              continue;
            case 1:
              goto label_3;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * 836671568 ^ 931102091;
              continue;
            case 4:
              aVal = new JSONData(value);
              num1 = (int) num2 * 660121530 ^ -775576121;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override bool AsBool
    {
      get
      {
        JSONData aVal = new JSONData(false);
label_1:
        int num1 = 709523988;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1073622963)) % 5U)
          {
            case 0:
              num1 = (int) num2 * -134455060 ^ 1443418086;
              continue;
            case 1:
              asBool = false;
              num1 = (int) num2 * -498114972 ^ -1236220290;
              continue;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1840958010 ^ 355079395;
              continue;
            case 4:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_6:
        return asBool;
      }
      set
      {
label_1:
        int num1 = 275822774;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1465352273)) % 5U)
          {
            case 0:
              num1 = (int) num2 * -1117906249 ^ 924433000;
              continue;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 518639678 ^ 991322117;
              continue;
            case 2:
              aVal = new JSONData(value);
              num1 = (int) num2 * -743777444 ^ 1812403423;
              continue;
            case 3:
              goto label_1;
            case 4:
              goto label_3;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override JSONArray AsArray
    {
      get
      {
        JSONArray aVal = new JSONArray();
        this.Set((JSONNode) aVal);
label_1:
        int num1 = -1077194289;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -663197729)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              asArray = aVal;
              num1 = (int) num2 * -591693793 ^ 1209031603;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
        JSONClass aVal = new JSONClass();
        this.Set((JSONNode) aVal);
label_1:
        int num1 = 545813596;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 695418014)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              asObject = aVal;
              num1 = (int) num2 * -82451920 ^ 1164315353;
              continue;
            case 2:
              num1 = (int) num2 * 1816132450 ^ -1223996529;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asObject;
      }
    }
  }
}
