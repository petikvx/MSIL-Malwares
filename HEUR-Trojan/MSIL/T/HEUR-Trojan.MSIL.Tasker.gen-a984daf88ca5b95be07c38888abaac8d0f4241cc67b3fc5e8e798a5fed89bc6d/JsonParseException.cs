// Decompiled with JetBrains decompiler
// Type: JsonParseException
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System;

public sealed class JsonParseException : Exception
{
  public TextPosition Position { get; private set; }

  public JsonParseException.ErrorType Type { get; private set; }

  public JsonParseException()
    : base(JsonParseException.GetDefaultMessage(JsonParseException.ErrorType.Unknown))
  {
  }

  public JsonParseException(JsonParseException.ErrorType type, TextPosition position)
    : this(JsonParseException.GetDefaultMessage(type), type, position)
  {
  }

  public JsonParseException(
    string message,
    JsonParseException.ErrorType type,
    TextPosition position)
    : base(message)
  {
    this.Type = type;
    this.Position = position;
  }

  private static string GetDefaultMessage(JsonParseException.ErrorType type)
  {
    string defaultMessage;
    switch (type)
    {
      case JsonParseException.ErrorType.IncompleteMessage:
        defaultMessage = "The string ended before a value could be parsed.";
        break;
      case JsonParseException.ErrorType.DuplicateObjectKeys:
        defaultMessage = "The parser encountered a JsonObject with duplicate keys.";
        break;
      case JsonParseException.ErrorType.InvalidOrUnexpectedCharacter:
        defaultMessage = "The parser encountered an invalid or unexpected character.";
        break;
      default:
        defaultMessage = "An error occurred while parsing the JSON message.";
        break;
    }
    return defaultMessage;
  }

  public enum ErrorType
  {
    Unknown,
    IncompleteMessage,
    DuplicateObjectKeys,
    InvalidOrUnexpectedCharacter,
  }
}
