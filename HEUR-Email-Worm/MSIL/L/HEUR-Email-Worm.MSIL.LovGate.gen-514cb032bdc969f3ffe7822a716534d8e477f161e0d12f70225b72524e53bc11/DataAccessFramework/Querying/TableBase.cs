// Decompiled with JetBrains decompiler
// Type: DataAccessFramework.Querying.TableBase
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace DataAccessFramework.Querying
{
  public abstract class TableBase
  {
    public abstract string TableName { get; }

    internal abstract void BuildSql(BuildSqlContext sqlContext);

    protected internal abstract IEnumerable<FieldReference> Fields { get; }

    public Join LeftJoin(QueryTable table)
    {
label_1:
      int num1 = 220510278;
      Join join;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 41001451)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            join = new Join(this, table, JoinType.Left);
            num1 = (int) num2 * 783894434 ^ -463174216;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return join;
    }

    public Join InnerJoin(QueryTable table)
    {
label_1:
      int num1 = -820783271;
      Join join;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1647222441)) % 3U)
        {
          case 1:
            join = new Join(this, table, JoinType.Inner);
            num1 = (int) num2 * 707943577 ^ -128880125;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return join;
    }

    public Query Select()
    {
label_1:
      int num1 = -1978564459;
      SelectQuery selectQuery;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -409000121)) % 3U)
        {
          case 1:
            selectQuery = new SelectQuery();
            num1 = (int) num2 * 1526322118 ^ -663296029;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      IEnumerator<FieldReference> enumerator = this.Fields.GetEnumerator();
      try
      {
label_8:
        int num3 = TableBase.\u206B‮‌⁫​‮​‪‪⁯​‏⁬‬​‎⁯⁬‭⁬‪‪‍‌​‮‭‭‍‭⁮‫⁭‮⁪‭⁮⁫⁯‎‮((IEnumerator) enumerator) ? -614723320 : (num3 = -1323301489);
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -409000121)) % 5U)
          {
            case 0:
              num3 = -614723320;
              continue;
            case 2:
              num3 = (int) num4 * -267224466 ^ 1720297328;
              continue;
            case 3:
              FieldReference current = enumerator.Current;
              selectQuery.AddSelectField(current);
              num3 = -823635344;
              continue;
            case 4:
              goto label_8;
            default:
              goto label_16;
          }
        }
      }
      finally
      {
        if (enumerator != null)
        {
label_12:
          int num5 = -1972624906;
          while (true)
          {
            uint num6;
            switch ((num6 = (uint) (num5 ^ -409000121)) % 3U)
            {
              case 0:
                goto label_12;
              case 1:
                TableBase.\u206A‏‪‪‭‮‮⁭​⁯‮⁬‭⁯​‌⁮‍‏‫⁬‌​⁮⁭‬‬‭⁪⁭‫‭‪⁯​⁪⁪‮​‪‮((IDisposable) enumerator);
                num5 = (int) num6 * 1363099082 ^ -1650169815;
                continue;
              default:
                goto label_15;
            }
          }
        }
label_15:;
      }
label_16:
      selectQuery.AddTable(this);
label_17:
      int num7 = -212092774;
      Query query;
      while (true)
      {
        uint num8;
        switch ((num8 = (uint) (num7 ^ -409000121)) % 3U)
        {
          case 0:
            goto label_17;
          case 2:
            query = (Query) selectQuery;
            num7 = (int) num8 * 1970502153 ^ -1882458292;
            continue;
          default:
            goto label_20;
        }
      }
label_20:
      return query;
    }

    public Query SelectWhere(WherePart condition)
    {
      SelectQuery selectQuery = new SelectQuery();
      IEnumerator<FieldReference> enumerator = this.Fields.GetEnumerator();
      try
      {
label_6:
        int num1 = TableBase.\u206B‮‌⁫​‮​‪‪⁯​‏⁬‬​‎⁯⁬‭⁬‪‪‍‌​‮‭‭‍‭⁮‫⁭‮⁪‭⁮⁫⁯‎‮((IEnumerator) enumerator) ? -155819865 : (num1 = -164220807);
        FieldReference current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -773050250)) % 5U)
          {
            case 0:
              selectQuery.AddSelectField(current);
              num1 = (int) num2 * -1951049924 ^ -1749314750;
              continue;
            case 1:
              goto label_6;
            case 3:
              current = enumerator.Current;
              num1 = -1789770820;
              continue;
            case 4:
              num1 = -155819865;
              continue;
            default:
              goto label_13;
          }
        }
      }
      finally
      {
        if (enumerator != null)
        {
label_8:
          int num3 = -1887652433;
          while (true)
          {
            uint num4;
            switch ((num4 = (uint) (num3 ^ -773050250)) % 4U)
            {
              case 1:
                TableBase.\u206A‏‪‪‭‮‮⁭​⁯‮⁬‭⁯​‌⁮‍‏‫⁬‌​⁮⁭‬‬‭⁪⁭‫‭‪⁯​⁪⁪‮​‪‮((IDisposable) enumerator);
                num3 = (int) num4 * -874541375 ^ -1411395312;
                continue;
              case 2:
                goto label_8;
              case 3:
                num3 = (int) num4 * 653164392 ^ -1049186134;
                continue;
              default:
                goto label_12;
            }
          }
        }
label_12:;
      }
label_13:
      selectQuery.AddTable(this);
label_14:
      int num5 = -1669622674;
      Query query;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num5 ^ -773050250)) % 5U)
        {
          case 0:
            query = (Query) selectQuery;
            num5 = (int) num6 * -260043641 ^ -871148904;
            continue;
          case 1:
            selectQuery.AddWhere(condition);
            num5 = (int) num6 * 946475870 ^ 745408256;
            continue;
          case 3:
            num5 = (int) num6 * 1395534160 ^ 1128457809;
            continue;
          case 4:
            goto label_14;
          default:
            goto label_19;
        }
      }
label_19:
      return query;
    }

    protected TableBase()
    {
label_1:
      int num1 = -1039900585;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -512247623)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -1217863134 ^ -826883407;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static bool \u206B‮‌⁫​‮​‪‪⁯​‏⁬‬​‎⁯⁬‭⁬‪‪‍‌​‮‭‭‍‭⁮‫⁭‮⁪‭⁮⁫⁯‎‮([In] IEnumerator obj0) => obj0.MoveNext();

    static void \u206A‏‪‪‭‮‮⁭​⁯‮⁬‭⁯​‌⁮‍‏‫⁬‌​⁮⁭‬‬‭⁪⁭‫‭‪⁯​⁪⁪‮​‪‮([In] IDisposable obj0) => obj0.Dispose();
  }
}
