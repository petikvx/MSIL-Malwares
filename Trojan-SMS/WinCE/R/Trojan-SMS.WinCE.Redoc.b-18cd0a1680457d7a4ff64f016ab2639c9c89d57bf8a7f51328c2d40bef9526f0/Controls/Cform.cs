// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.Cform
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class Cform : CControls
  {
    private string[] vars = new string[3];

    public Cform(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedForm control = (CEnhancedForm) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      switch (str)
      {
        case "show":
          if (this.CRunner.mainForm == null)
            this.CRunner.mainForm = control;
          control.MinimizeBox = false;
          if (!control.hideEventAdded)
          {
            control.Closing += new CancelEventHandler(this.HideForm);
            control.hideEventAdded = true;
          }
          if (this.CRunner.htSubs.Contains((object) (control.name + "_show")))
            this.Show(control);
          control.Show();
          this.CRunner.shownForm = control;
          control.activeState = true;
          return new MethodReturn(place);
        case "color":
          if (!assign)
            return new MethodReturn(place, control.BackColor.ToArgb().ToString((IFormatProvider) CRunner.cul), 0.0);
          control.BackColor = this.CRunner.GetColor(ref place, ref locals);
          control.graphics.FillRectangle((Brush) new SolidBrush(control.BackColor), 0, 0, control.Width, control.Height);
          control.Refresh();
          return new MethodReturn(place);
        case "dispose":
          this.CRunner.ThrowError("Forms do not support Dispose method.", place.LineI);
          break;
        case "image":
          if (assign)
          {
            RunReturn runReturn = this.CRunner.RunCode(place, true, true, ref locals);
            place = runReturn.place;
            if (runReturn.vString.Length == 0)
              control.graphics.FillRectangle((Brush) new SolidBrush(control.BackColor), 0, 0, control.Width, control.Height);
            else
              this.LoadPicture(control, this.CRunner.BitmapFromString(runReturn.vString));
            control.Refresh();
            return new MethodReturn(place);
          }
          this.CRunner.returnObject = (object) control.ReturnImage;
          return new MethodReturn(place, "~" + control.name + ".", 0.0);
        case "visible":
          this.CRunner.ThrowError("Use Hide / Show with forms instead of visible.", place.LineI);
          break;
        case "close":
          if (control == this.CRunner.mainForm || control.Visible)
            control.Close();
          return new MethodReturn(place);
        case "width":
          return new MethodReturn(place, Screen.PrimaryScreen.Bounds.Width.ToString((IFormatProvider) CRunner.cul), 0.0);
        case "height":
          return new MethodReturn(place, (Screen.PrimaryScreen.Bounds.Height - 52).ToString((IFormatProvider) CRunner.cul), 0.0);
        case "cancelclose":
          control.cancelClose = true;
          return new MethodReturn(place);
        case "loadpicture":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\"", place.LineI);
          RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          if (runReturn1.vString.Length == 0)
            control.graphics.FillRectangle((Brush) new SolidBrush(control.BackColor), 0, 0, control.Width, control.Height);
          else
            this.LoadPicture(control, runReturn1.vString);
          control.Refresh();
          ++place.WordI;
          return new MethodReturn(place);
        case "forelayer":
          if (assign)
          {
            RunReturn runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
            place = runReturn2.place;
            control.foreLayer = bool.Parse(runReturn2.vString);
            if (control.foreLayer && control.foreBitmap == null)
            {
              control.foreBitmap = new Bitmap(((Control) control).ClientSize.Width, ((Control) control).ClientSize.Height);
              control.foreGraphics = Graphics.FromImage((Image) control.foreBitmap);
              control.foreGraphics.FillRectangle((Brush) this.CRunner.foreBrush, control.destRect);
              control.imageAttr.SetColorKey(this.CRunner.TransColor, this.CRunner.TransColor);
            }
            return new MethodReturn(place);
          }
          bool foreLayer = control.foreLayer;
          return new MethodReturn(place, foreLayer.ToString((IFormatProvider) CRunner.cul).ToLower(CRunner.cul), 0.0);
        case "line":
          return new MethodReturn(this.Line(control, control.graphics, place, ref locals));
        case "polygon":
          return new MethodReturn(this.Polygon(control, control.graphics, place, ref locals));
        case "circle":
          return new MethodReturn(this.Circle(control, control.graphics, place, ref locals));
        case "drawstring":
          return new MethodReturn(this.DrawString(control, control.graphics, place, ref locals));
        case "drawimage":
          return new MethodReturn(this.DrawImage(control, control.graphics, place, ref locals));
        case "getpixel":
          return this.GetPixel(control.bitmap, place, ref locals);
        case "fcircle":
          if (!control.foreLayer)
            this.CRunner.ThrowError("ForeLayer property must be true.", place.LineI);
          return new MethodReturn(this.Circle(control, control.foreGraphics, place, ref locals));
        case "fdrawstring":
          if (!control.foreLayer)
            this.CRunner.ThrowError("ForeLayer property must be true.", place.LineI);
          return new MethodReturn(this.DrawString(control, control.foreGraphics, place, ref locals));
        case "fdrawimage":
          if (!control.foreLayer)
            this.CRunner.ThrowError("ForeLayer property must be true.", place.LineI);
          return new MethodReturn(this.DrawImage(control, control.foreGraphics, place, ref locals));
        case "fline":
          if (!control.foreLayer)
            this.CRunner.ThrowError("ForeLayer property must be true.", place.LineI);
          return new MethodReturn(this.Line(control, control.foreGraphics, place, ref locals));
        case "fpolygon":
          if (!control.foreLayer)
            this.CRunner.ThrowError("ForeLayer property must be true.", place.LineI);
          return new MethodReturn(this.Polygon(control, control.foreGraphics, place, ref locals));
        case "ferase":
          if (!control.foreLayer)
            this.CRunner.ThrowError("ForeLayer property must be true.", place.LineI);
          return new MethodReturn(this.Erase(control, place, ref locals));
        case "fgetpixel":
          if (!control.foreLayer)
            this.CRunner.ThrowError("ForeLayer property must be true.", place.LineI);
          return this.GetPixel(control.foreBitmap, place, ref locals);
      }
      return this.CRunner.htSharedProperties.Contains((object) str) ? this.CRunner.SharedProperties((Control) control, str, ref place, assign, ref locals) : new MethodReturn(place);
    }

    public MethodReturn GetPixel(Bitmap bmp, Place place, ref Locals locals)
    {
      ++place.WordI;
      RunReturn runReturn1 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn1.place;
      int vDouble1 = (int) runReturn1.vDouble;
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble2 = (int) runReturn2.vDouble;
      ++place.WordI;
      return new MethodReturn(place, bmp.GetPixel(vDouble1, vDouble2).ToArgb().ToString((IFormatProvider) CRunner.cul), 0.0);
    }

    private Place Line(CEnhancedForm form, Graphics g, Place place, ref Locals locals)
    {
      RunReturn runReturn1 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn1.place;
      int vDouble1 = (int) runReturn1.vDouble;
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble2 = (int) runReturn2.vDouble;
      ++place.WordI;
      RunReturn runReturn3 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn3.place;
      int vDouble3 = (int) runReturn3.vDouble;
      ++place.WordI;
      RunReturn runReturn4 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn4.place;
      int vDouble4 = (int) runReturn4.vDouble;
      ++place.WordI;
      Color color = this.CRunner.GetColor(ref place, ref locals);
      Rectangle rectangle = new Rectangle(Math.Min(vDouble1, vDouble3), Math.Min(vDouble2, vDouble4), Math.Abs(vDouble3 - vDouble1), Math.Abs(vDouble4 - vDouble2));
      if (this.CRunner.nextWord(false, ref place).Value == ",")
      {
        ++place.WordI;
        switch (this.CRunner.nextWord(true, ref place).Value.ToLower(CRunner.cul))
        {
          case "b":
            g.DrawRectangle(new Pen(color), rectangle);
            break;
          case "bf":
            g.FillRectangle((Brush) new SolidBrush(color), rectangle);
            break;
        }
      }
      else
        g.DrawLine(new Pen(color), vDouble1, vDouble2, vDouble3, vDouble4);
      ++rectangle.Height;
      ++rectangle.Width;
      form.Invalidate(rectangle);
      ++place.WordI;
      return place;
    }

    private Place Polygon(CEnhancedForm form, Graphics g, Place place, ref Locals locals)
    {
      int index1 = 0;
      string key1 = "";
      bool flag1 = false;
      string key2 = this.CRunner.nextWord(true, ref place).Value;
      if (this.CRunner.nextWord(true, ref place).Value == "(")
        place.WordI += 2;
      object array1 = this.CRunner.globals.Arrays[(object) key2];
      bool flag2;
      if (array1 == null)
      {
        flag2 = false;
      }
      else
      {
        flag2 = true;
        if (array1 is string[,])
          flag1 = true;
      }
      RunReturn runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble1 = (int) runReturn.vDouble;
      if (!flag1)
      {
        ++place.WordI;
        key1 = this.CRunner.nextWord(true, ref place).Value;
        if (this.CRunner.nextWord(true, ref place).Value == "(")
          place.WordI += 2;
        runReturn = this.CRunner.RunCode(place, false, true, ref locals);
        place = runReturn.place;
        index1 = (int) runReturn.vDouble;
      }
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble2 = (int) runReturn.vDouble;
      ++place.WordI;
      Color color = this.CRunner.GetColor(ref place, ref locals);
      Point[] points = new Point[vDouble2];
      int val1_1;
      int num1;
      int val1_2;
      int num2;
      if (flag1)
      {
        string[,] strArray = (string[,]) array1;
        num1 = val1_1 = points[0].X = (int) double.Parse(strArray[vDouble1, 0], (IFormatProvider) CRunner.cul);
        num2 = val1_2 = points[0].Y = (int) double.Parse(strArray[vDouble1, 1], (IFormatProvider) CRunner.cul);
        for (int index2 = 1; index2 < vDouble2; ++index2)
        {
          num1 = Math.Min(num1, points[index2].X = (int) double.Parse(strArray[vDouble1 + index2, 0], (IFormatProvider) CRunner.cul));
          val1_1 = Math.Max(val1_1, points[index2].X);
          num2 = Math.Min(num2, points[index2].Y = (int) double.Parse(strArray[vDouble1 + index2, 1], (IFormatProvider) CRunner.cul));
          val1_2 = Math.Max(val1_2, points[index2].Y);
        }
      }
      else
      {
        if (!flag2)
        {
          ArrayList control = (ArrayList) ((WrapControl) this.CRunner.htControls[(object) key2]).control;
          num1 = val1_1 = points[0].X = (int) double.Parse((string) control[vDouble1], (IFormatProvider) CRunner.cul);
          for (int index3 = 1; index3 < vDouble2; ++index3)
          {
            num1 = Math.Min(num1, points[index3].X = (int) double.Parse((string) control[vDouble1 + index3], (IFormatProvider) CRunner.cul));
            val1_1 = Math.Max(val1_1, points[index3].X);
          }
        }
        else
        {
          string[] strArray = (string[]) array1;
          num1 = val1_1 = points[0].X = (int) double.Parse(strArray[vDouble1], (IFormatProvider) CRunner.cul);
          for (int index4 = 1; index4 < vDouble2; ++index4)
          {
            num1 = Math.Min(num1, points[index4].X = (int) double.Parse(strArray[vDouble1 + index4], (IFormatProvider) CRunner.cul));
            val1_1 = Math.Max(val1_1, points[index4].X);
          }
        }
        if (!flag2)
        {
          ArrayList control = (ArrayList) ((WrapControl) this.CRunner.htControls[(object) key1]).control;
          num2 = val1_2 = points[0].Y = (int) double.Parse((string) control[index1], (IFormatProvider) CRunner.cul);
          for (int index5 = 1; index5 < vDouble2; ++index5)
          {
            num2 = Math.Min(num2, points[index5].Y = (int) double.Parse((string) control[index1 + index5], (IFormatProvider) CRunner.cul));
            val1_2 = Math.Max(val1_2, points[index5].Y);
          }
        }
        else
        {
          string[] array2 = (string[]) this.CRunner.globals.Arrays[(object) key1];
          num2 = val1_2 = points[0].Y = (int) double.Parse(array2[index1], (IFormatProvider) CRunner.cul);
          for (int index6 = 1; index6 < vDouble2; ++index6)
          {
            num2 = Math.Min(num2, points[index6].Y = (int) double.Parse(array2[index1 + index6], (IFormatProvider) CRunner.cul));
            val1_2 = Math.Max(val1_2, points[index6].Y);
          }
        }
      }
      Rectangle rc = new Rectangle(num1, num2, val1_1 - num1 + 1, val1_2 - num2 + 1);
      Word word = this.CRunner.nextWord(true, ref place);
      if (word.Value == ",")
      {
        word = this.CRunner.nextWord(true, ref place);
        if (word.Value.ToLower(CRunner.cul) == "f")
        {
          SolidBrush solidBrush = new SolidBrush(color);
          g.FillPolygon((Brush) solidBrush, points);
          solidBrush.Dispose();
          ++place.WordI;
          goto label_32;
        }
      }
      Pen pen = new Pen(color);
      g.DrawPolygon(pen, points);
      pen.Dispose();
label_32:
      form.Invalidate(rc);
      return place;
    }

    private Place Erase(CEnhancedForm form, Place place, ref Locals locals)
    {
      RunReturn runReturn1 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn1.place;
      int vDouble1 = (int) runReturn1.vDouble;
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble2 = (int) runReturn2.vDouble;
      ++place.WordI;
      RunReturn runReturn3 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn3.place;
      int vDouble3 = (int) runReturn3.vDouble;
      ++place.WordI;
      RunReturn runReturn4 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn4.place;
      int vDouble4 = (int) runReturn4.vDouble;
      Rectangle rectangle = new Rectangle(Math.Min(vDouble1, vDouble3), Math.Min(vDouble2, vDouble4), Math.Abs(vDouble3 - vDouble1) + 1, Math.Abs(vDouble4 - vDouble2) + 1);
      form.foreGraphics.FillRectangle((Brush) this.CRunner.foreBrush, rectangle);
      ++rectangle.Height;
      ++rectangle.Width;
      form.Invalidate(rectangle);
      ++place.WordI;
      return place;
    }

    private Place Circle(CEnhancedForm form, Graphics g, Place place, ref Locals locals)
    {
      RunReturn runReturn1 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn1.place;
      int vDouble1 = (int) runReturn1.vDouble;
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble2 = (int) runReturn2.vDouble;
      ++place.WordI;
      RunReturn runReturn3 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn3.place;
      int vDouble3 = (int) runReturn3.vDouble;
      ++place.WordI;
      Color color = this.CRunner.GetColor(ref place, ref locals);
      Rectangle rc = new Rectangle(vDouble1 - vDouble3, vDouble2 - vDouble3, 2 * vDouble3, 2 * vDouble3);
      if (this.CRunner.nextWord(true, ref place).Value == ",")
      {
        if (this.CRunner.nextWord(true, ref place).Value.ToLower(CRunner.cul) == "f")
          g.FillEllipse((Brush) new SolidBrush(color), vDouble1 - vDouble3, vDouble2 - vDouble3, 2 * vDouble3, 2 * vDouble3);
        ++place.WordI;
      }
      else
        g.DrawEllipse(new Pen(color), vDouble1 - vDouble3, vDouble2 - vDouble3, 2 * vDouble3, 2 * vDouble3);
      ++rc.Height;
      ++rc.Width;
      form.Invalidate(rc);
      return place;
    }

    private Place DrawString(CEnhancedForm form, Graphics g, Place place, ref Locals locals)
    {
      RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn1.place;
      string vString = runReturn1.vString;
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      double vDouble1 = runReturn2.vDouble;
      ++place.WordI;
      RunReturn runReturn3 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn3.place;
      int vDouble2 = (int) runReturn3.vDouble;
      ++place.WordI;
      RunReturn runReturn4 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn4.place;
      int vDouble3 = (int) runReturn4.vDouble;
      ++place.WordI;
      RunReturn runReturn5 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn5.place;
      int vDouble4 = (int) runReturn5.vDouble;
      ++place.WordI;
      RunReturn runReturn6 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn6.place;
      int vDouble5 = (int) runReturn6.vDouble;
      ++place.WordI;
      Color color = this.CRunner.GetColor(ref place, ref locals);
      Rectangle rectangle = new Rectangle(Math.Min(vDouble2, vDouble4), Math.Min(vDouble3, vDouble5), Math.Abs(vDouble4 - vDouble2), Math.Abs(vDouble5 - vDouble3));
      g.DrawString(vString, new Font(form.Font.Name, (float) vDouble1, form.Font.Style), (Brush) new SolidBrush(color), (RectangleF) rectangle);
      ++rectangle.Height;
      ++rectangle.Width;
      form.Invalidate(rectangle);
      ++place.WordI;
      return place;
    }

    private Place DrawImage(CEnhancedForm form, Graphics g, Place place, ref Locals locals)
    {
      RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn1.place;
      string vString = runReturn1.vString;
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble1 = (int) runReturn2.vDouble;
      ++place.WordI;
      RunReturn runReturn3 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn3.place;
      int vDouble2 = (int) runReturn3.vDouble;
      Bitmap bitmap = this.CRunner.BitmapFromString(vString);
      Rectangle rectangle;
      if (this.CRunner.nextWord(true, ref place).Value == ",")
      {
        RunReturn runReturn4 = this.CRunner.RunCode(place, false, true, ref locals);
        place = runReturn4.place;
        int vDouble3 = (int) runReturn4.vDouble;
        ++place.WordI;
        RunReturn runReturn5 = this.CRunner.RunCode(place, false, true, ref locals);
        place = runReturn5.place;
        int vDouble4 = (int) runReturn5.vDouble;
        rectangle = new Rectangle(Math.Min(vDouble1, vDouble3), Math.Min(vDouble2, vDouble4), Math.Abs(vDouble3 - vDouble1), Math.Abs(vDouble4 - vDouble2));
        g.DrawImage((Image) bitmap, rectangle, new Rectangle(0, 0, bitmap.Width, bitmap.Height), GraphicsUnit.Pixel);
        ++place.WordI;
      }
      else
      {
        rectangle = new Rectangle(vDouble1, vDouble2, bitmap.Width, bitmap.Height);
        g.DrawImage((Image) bitmap, vDouble1, vDouble2, new Rectangle(0, 0, bitmap.Width, bitmap.Height), GraphicsUnit.Pixel);
      }
      ++rectangle.Height;
      ++rectangle.Width;
      form.Invalidate(rectangle);
      return place;
    }

    public MethodReturn addForm(Place place, ref Locals locals)
    {
      ++place.WordI;
      RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn1.place;
      string lower = runReturn1.vString.ToLower(CRunner.cul);
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn2.place;
      string vString = runReturn2.vString;
      Color color = Color.FromArgb(-1);
      ++place.WordI;
      CEnhancedForm cenhancedForm = new CEnhancedForm();
      cenhancedForm.Visible = false;
      this.CRunner.htControls.Add((object) lower, (object) new WrapControl((object) cenhancedForm, (CControls) this));
      cenhancedForm.name = lower;
      cenhancedForm.Text = vString;
      cenhancedForm.BackColor = color;
      cenhancedForm.graphics.FillRectangle((Brush) new SolidBrush(cenhancedForm.BackColor), 0, 0, cenhancedForm.Width, cenhancedForm.Height);
      cenhancedForm.Refresh();
      this.AddEvents(cenhancedForm);
      return new MethodReturn(place);
    }

    private void MouseDown(object sender, MouseEventArgs e)
    {
      CEnhancedForm cenhancedForm = (CEnhancedForm) sender;
      Place htSub = (Place) this.CRunner.htSubs[(object) (cenhancedForm.name + "_mousedown")];
      this.CRunner.StartSub(htSub, new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedForm.name
        },
        {
          (object) ((Word) ((Dbasic.Line) this.CRunner.lines[htSub.LineI]).words[2]).Value,
          (object) e.X.ToString((IFormatProvider) CRunner.cul)
        },
        {
          (object) ((Word) ((Dbasic.Line) this.CRunner.lines[htSub.LineI]).words[3]).Value,
          (object) e.Y.ToString((IFormatProvider) CRunner.cul)
        }
      });
    }

    private void MouseMove(object sender, MouseEventArgs e)
    {
      CEnhancedForm cenhancedForm = (CEnhancedForm) sender;
      Place htSub = (Place) this.CRunner.htSubs[(object) (cenhancedForm.name + "_mousemove")];
      this.CRunner.StartSub(htSub, new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedForm.name
        },
        {
          (object) ((Word) ((Dbasic.Line) this.CRunner.lines[htSub.LineI]).words[2]).Value,
          (object) e.X.ToString((IFormatProvider) CRunner.cul)
        },
        {
          (object) ((Word) ((Dbasic.Line) this.CRunner.lines[htSub.LineI]).words[3]).Value,
          (object) e.Y.ToString((IFormatProvider) CRunner.cul)
        }
      });
    }

    private void MouseUp(object sender, MouseEventArgs e)
    {
      CEnhancedForm cenhancedForm = (CEnhancedForm) sender;
      Place htSub = (Place) this.CRunner.htSubs[(object) (cenhancedForm.name + "_mouseup")];
      this.CRunner.StartSub(htSub, new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedForm.name
        },
        {
          (object) ((Word) ((Dbasic.Line) this.CRunner.lines[htSub.LineI]).words[2]).Value,
          (object) e.X.ToString((IFormatProvider) CRunner.cul)
        },
        {
          (object) ((Word) ((Dbasic.Line) this.CRunner.lines[htSub.LineI]).words[3]).Value,
          (object) e.Y.ToString((IFormatProvider) CRunner.cul)
        }
      });
    }

    private void Show(CEnhancedForm form) => this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (form.name + "_show")], new Hashtable()
    {
      {
        (object) "sender",
        (object) form.name
      }
    });

    private void Close(CEnhancedForm form)
    {
      form.cancelClose = false;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (form.name + "_close")], new Hashtable()
      {
        {
          (object) "sender",
          (object) form.name
        }
      });
    }

    private void KeyDown(object sender, KeyEventArgs e)
    {
      CEnhancedForm cenhancedForm = (CEnhancedForm) sender;
      Place htSub = (Place) this.CRunner.htSubs[(object) (cenhancedForm.name + "_keypress")];
      this.CRunner.StartSub(htSub, new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedForm.name
        },
        {
          (object) ((Word) ((Dbasic.Line) this.CRunner.lines[htSub.LineI]).words[2]).Value,
          (object) ((int) e.KeyCode).ToString((IFormatProvider) CRunner.cul)
        }
      });
    }

    private void AddEvents(CEnhancedForm form)
    {
      if (this.CRunner.htSubs.Contains((object) (form.name + "_mousedown")))
        form.MouseDown += new MouseEventHandler(this.MouseDown);
      if (this.CRunner.htSubs.Contains((object) (form.name + "_mousemove")))
        form.MouseMove += new MouseEventHandler(this.MouseMove);
      if (this.CRunner.htSubs.Contains((object) (form.name + "_mouseup")))
        form.MouseUp += new MouseEventHandler(this.MouseUp);
      if (!this.CRunner.htSubs.Contains((object) (form.name + "_keypress")))
        return;
      form.KeyDown += new KeyEventHandler(this.KeyDown);
    }

    public override void AddRunTimeEvent(object sender, string eventName)
    {
      CEnhancedForm cenhancedForm = (CEnhancedForm) sender;
      switch (eventName)
      {
        case "mousedown":
          cenhancedForm.MouseDown += new MouseEventHandler(this.MouseDown);
          break;
        case "mousemove":
          cenhancedForm.MouseMove += new MouseEventHandler(this.MouseMove);
          break;
        case "mouseup":
          cenhancedForm.MouseUp += new MouseEventHandler(this.MouseUp);
          break;
        case "keypress":
          cenhancedForm.KeyDown += new KeyEventHandler(this.KeyDown);
          break;
      }
    }

    public void ShortAdd(string s)
    {
      CEnhancedForm cenhancedForm = new CEnhancedForm();
      string Name;
      string Text;
      string PicFile;
      Color BackColor;
      CBuildDesigner.FormGetProperties(s, out Name, out Text, out PicFile, out BackColor);
      cenhancedForm.name = Name.ToLower(CRunner.cul);
      cenhancedForm.Text = Text;
      cenhancedForm.BackColor = BackColor;
      cenhancedForm.Visible = false;
      this.CRunner.htControls.Add((object) cenhancedForm.name, (object) new WrapControl((object) cenhancedForm, (CControls) this));
      cenhancedForm.graphics.FillRectangle((Brush) new SolidBrush(cenhancedForm.BackColor), 0, 0, cenhancedForm.Width, cenhancedForm.Height);
      if (PicFile.Length > 0)
        this.LoadPicture(cenhancedForm, PicFile);
      cenhancedForm.Refresh();
      this.AddEvents(cenhancedForm);
    }

    public void HideForm(object sender, CancelEventArgs e)
    {
      if (sender == this.CRunner.mainForm)
      {
        if (!this.CRunner.blnQuitFlag)
        {
          if (this.CRunner.htSubs.Contains((object) (this.CRunner.mainForm.name + "_close")))
            this.Close(this.CRunner.mainForm);
          if (!this.CRunner.blnQuitFlag && this.CRunner.mainForm.cancelClose)
          {
            e.Cancel = true;
            return;
          }
        }
        if (this.CRunner.mainForm != null)
          this.CRunner.CloseProgram();
      }
      if (this.CRunner.blnQuitFlag)
        return;
      CEnhancedForm form = (CEnhancedForm) sender;
      if (this.CRunner.htSubs.Contains((object) (form.name + "_close")))
        this.Close(form);
      if (form.cancelClose)
      {
        e.Cancel = true;
      }
      else
      {
        e.Cancel = true;
        form.Hide();
      }
    }

    private void LoadPicture(CEnhancedForm frm, string file)
    {
      try
      {
        Bitmap bitmap = new Bitmap(Path.Combine(CRunner.b4pDir, file));
        Rectangle srcRect = new Rectangle(0, 0, bitmap.Width, bitmap.Height);
        frm.graphics.DrawImage((Image) bitmap, frm.destRect, srcRect, GraphicsUnit.Pixel);
        bitmap.Dispose();
      }
      catch
      {
      }
    }

    private void LoadPicture(CEnhancedForm frm, Bitmap bitmap)
    {
      Rectangle srcRect = new Rectangle(0, 0, bitmap.Width, bitmap.Height);
      frm.graphics.DrawImage((Image) bitmap, frm.destRect, srcRect, GraphicsUnit.Pixel);
    }
  }
}
