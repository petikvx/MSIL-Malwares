// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.Tool
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.ServiceModel.Description;
using System.Threading;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  public static class Tool
  {
    private static Options options;

    internal static Options Options => Tool.options;

    internal static Exception CreateArgumentException(
      string command,
      string arg,
      string message,
      Exception innerException)
    {
      return (Exception) new ArgumentException(Microsoft.Tools.ServiceModel.SR.GetString("InvalidArg", (object) command, (object) arg, (object) message), innerException);
    }

    internal static Exception CreateException(string message, Exception innerException) => (Exception) new ApplicationException(message, innerException);

    private static void DisplayHelp(Mode mode)
    {
      if (Tool.options.Mode == Mode.NotSpecified)
        Tool.DisplayUsage();
      else if (Tool.options.Mode == Mode.Install)
      {
        ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsage4", (object) "install", (object) "i"));
        ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageExamples"));
        ToolConsole.WriteLine("  ComSvcConfig.exe /install /application:TestApp /contract:* /hosting:complus");
        ToolConsole.WriteLine("  ComSvcConfig.exe /install /application:TestApp /contract:TestComponent,ITest /hosting:was /webDirectory:testdir /mex");
        ToolConsole.WriteLine("  ComSvcConfig.exe /install /application:TestApp /contract:TestComponent,ITest.{Method1} /hosting:was /webDirectory:testdir /mex");
        ToolConsole.WriteLine("  ComSvcConfig.exe /install /application:TestApp /contract:TestComponent,ITest.{Method2,Method3} /hosting:was /webDirectory:testdir /mex");
      }
      else if (Tool.options.Mode == Mode.Uninstall)
      {
        ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsage5", (object) "uninstall", (object) "u"));
        ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageExamples"));
        ToolConsole.WriteLine("  ComSvcConfig.exe /uninstall /application:OnlineStore /contract:* /hosting:complus");
        ToolConsole.WriteLine("  ComSvcConfig.exe /uninstall /application:OnlineStore /contract:* /hosting:was /mex");
        ToolConsole.WriteLine("  ComSvcConfig.exe /uninstall /application:OnlineStore /contract:TestComponent,ITest.{Method1} /hosting:was /mex");
        ToolConsole.WriteLine("  ComSvcConfig.exe /uninstall /application:OnlineStore /contract:TestComponent,ITest.{Method2,Method3} /hosting:was /mex");
      }
      else
      {
        if (Tool.options.Mode != Mode.List)
          return;
        ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsage6", (object) "list", (object) "l"));
        ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageExamples"));
        ToolConsole.WriteLine("  ComSvcConfig.exe /list");
        ToolConsole.WriteLine("  ComSvcConfig.exe /list /hosting:complus");
        ToolConsole.WriteLine("  ComSvcConfig.exe /list /hosting:was");
      }
    }

    private static void DisplayLogo() => Console.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("Logo", (object) CommonResStrings.WcfTrademarkForCmdLine, (object) "4.0.30319.1", (object) CommonResStrings.CopyrightForCmdLine));

    private static void DisplayUsage()
    {
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsage1"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsage2", (object) "ComSvcConfig.exe"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsage3"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsage4", (object) "install", (object) "i"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsage5", (object) "uninstall", (object) "u"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsage6", (object) "list", (object) "l"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsage7"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageApplication", (object) "application", (object) "a"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageInterface", (object) "contract", (object) "c", (object) "{", (object) "}"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageReferences", (object) "allowreferences", (object) "r"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageHosting", (object) "hosting", (object) "h"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageWebServer", (object) "webSite", (object) "w"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageWebDirectory", (object) "webDirectory", (object) "d"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageMexOption", (object) "mex", (object) "x"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageGuidOption", (object) "id", (object) "k"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageNoLogo", (object) "nologo", (object) "n"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageVerbose", (object) "verbose", (object) "v"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsage8", (object) "help"));
      ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("HelpUsageExamples"));
      ToolConsole.WriteLine("  ComSvcConfig.exe /install /application:TestApp /contract:* /hosting:complus");
      ToolConsole.WriteLine("  ComSvcConfig.exe /install /application:TestApp /contract:TestComponent,ITest /hosting:was /webDirectory:testdir /mex");
      ToolConsole.WriteLine("  ComSvcConfig.exe /list");
      ToolConsole.WriteLine("  ComSvcConfig.exe /list /hosting:complus");
      ToolConsole.WriteLine("  ComSvcConfig.exe /list /hosting:was");
      ToolConsole.WriteLine("  ComSvcConfig.exe /uninstall /application:OnlineStore /contract:* /hosting:complus");
      ToolConsole.WriteLine("  ComSvcConfig.exe /uninstall /application:OnlineStore /contract:* /hosting:was");
      ToolConsole.WriteLine("");
    }

    private static void DoInstall()
    {
      Tool.ValidateAddParams();
      ComAdminAppInfo appInfo = ComAdminWrapper.GetAppInfo(Tool.options.Application);
      if (appInfo == null)
        throw Tool.CreateArgumentException("application", Tool.options.Application, Microsoft.Tools.ServiceModel.SR.GetString("ApplicationNotFound", (object) Tool.options.Application), (Exception) null);
      Tool.ValidateApplication(appInfo, Tool.options.Hosting);
      Guid id = appInfo.ID;
      EndpointConfigContainer endpointConfigContainer = (EndpointConfigContainer) null;
      if (Tool.options.Hosting == Hosting.Complus)
      {
        endpointConfigContainer = (EndpointConfigContainer) ComplusEndpointConfigContainer.Get(Tool.options.Application, true);
        if (endpointConfigContainer == null)
          throw Tool.CreateArgumentException("application", Tool.options.Application, Microsoft.Tools.ServiceModel.SR.GetString("ApplicationNotFound", (object) Tool.options.Application), (Exception) null);
      }
      else if (Tool.options.Hosting == Hosting.Was)
      {
        endpointConfigContainer = (EndpointConfigContainer) WasEndpointConfigContainer.Get(Tool.options.WebServer == null ? WasEndpointConfigContainer.DefaultWebServer : Tool.options.WebServer, Tool.options.WebDirectory, Tool.options.Application);
        if (endpointConfigContainer == null)
          throw Tool.CreateArgumentException("webDirectory", Tool.options.WebDirectory, Microsoft.Tools.ServiceModel.SR.GetString("WebDirectoryNotFound", (object) Tool.options.WebDirectory), (Exception) null);
      }
      IList<ComponentDefinition<Guid>> outComps = (IList<ComponentDefinition<Guid>>) null;
      if (Tool.options.AllComponents)
        Tool.GetAllComponentsForAdd(appInfo, Tool.options.Mex, out outComps);
      else
        Tool.GetComponentsFromInputForAdd(appInfo, Tool.options.Components, Tool.options.Mex, endpointConfigContainer.HasEndpointsForApplication(id), out outComps);
      if (outComps.Count == 0)
      {
        if (string.Empty != Tool.options.MexOnlyComponent)
          throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("MexOnlyComponentHasNoExposedInterface", (object) Tool.options.MexOnlyComponent), (Exception) null);
        throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("NoneOfTheComponentsSatisfiedTheAddCriteria"), (Exception) null);
      }
      List<EndpointConfig> endpointConfigs = new List<EndpointConfig>();
      foreach (ComponentDefinition<Guid> componentDefinition in (IEnumerable<ComponentDefinition<Guid>>) outComps)
      {
        string bindingType;
        string bindingName;
        if (!appInfo.FindClass(componentDefinition.Component.ToString("B")).SupportsTransactionFlow)
        {
          bindingType = endpointConfigContainer.DefaultBindingType;
          bindingName = endpointConfigContainer.DefaultBindingName;
        }
        else
        {
          bindingType = endpointConfigContainer.DefaultTransactionalBindingType;
          bindingName = endpointConfigContainer.DefaultTransactionalBindingName;
        }
        foreach (InterfaceDefination<Guid> interfaceDefination in (IEnumerable<InterfaceDefination<Guid>>) componentDefinition.Interfaces)
        {
          Guid iid = interfaceDefination.Interface;
          EndpointConfig endpointConfig;
          if (iid != typeof (IMetadataExchange).GUID)
          {
            string uriString = endpointConfigContainer.DefaultEndpointAddress(id, componentDefinition.Component, iid);
            endpointConfig = new EndpointConfig(id, componentDefinition.Component, iid, bindingType, bindingName, new Uri(uriString, UriKind.RelativeOrAbsolute), false, (List<string>) interfaceDefination.Methods);
          }
          else
            endpointConfig = new EndpointConfig(id, componentDefinition.Component, typeof (IMetadataExchange).GUID, endpointConfigContainer.DefaultMexBindingType, endpointConfigContainer.DefaultMexBindingName, new Uri(endpointConfigContainer.DefaultMexAddress(id, componentDefinition.Component), UriKind.RelativeOrAbsolute), true, (List<string>) null);
          endpointConfigs.Add(endpointConfig);
        }
      }
      try
      {
        endpointConfigContainer.Add((IList<EndpointConfig>) endpointConfigs);
        endpointConfigContainer.PrepareChanges();
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw;
          default:
            endpointConfigContainer.AbortChanges();
            throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("ErrorDuringAdd", (object) Tool.options.Application), ex);
        }
      }
      endpointConfigContainer.CommitChanges();
    }

    private static List<EndpointConfigContainer> GetContainersForQueryOrRemove(
      Hosting hosting,
      string application,
      string webServer,
      string webDirectory)
    {
      List<EndpointConfigContainer> forQueryOrRemove = new List<EndpointConfigContainer>();
      if (hosting == Hosting.Complus || hosting == Hosting.NotSpecified)
      {
        if (!string.IsNullOrEmpty(application))
        {
          forQueryOrRemove.Add((EndpointConfigContainer) ComplusEndpointConfigContainer.Get(application) ?? throw Tool.CreateArgumentException(nameof (application), Tool.options.Application, Microsoft.Tools.ServiceModel.SR.GetString("ApplicationNotFound", (object) Tool.options.Application), (Exception) null));
        }
        else
        {
          List<ComplusEndpointConfigContainer> endpointConfigContainerList = ComplusEndpointConfigContainer.Get();
          if (endpointConfigContainerList != null)
          {
            foreach (ComplusEndpointConfigContainer endpointConfigContainer in endpointConfigContainerList)
              forQueryOrRemove.Add((EndpointConfigContainer) endpointConfigContainer);
          }
        }
      }
      if (hosting == Hosting.Was || hosting == Hosting.NotSpecified)
      {
        if (!string.IsNullOrEmpty(webDirectory))
        {
          if (string.IsNullOrEmpty(webServer))
            webServer = WasEndpointConfigContainer.DefaultWebServer;
          EndpointConfigContainer endpointConfigContainer = (EndpointConfigContainer) WasEndpointConfigContainer.Get(webServer, webDirectory, application);
          if (endpointConfigContainer == null)
            throw Tool.CreateArgumentException(nameof (webDirectory), Tool.options.WebDirectory, Microsoft.Tools.ServiceModel.SR.GetString("WebDirectoryNotFound", (object) Tool.options.WebDirectory), (Exception) null);
          if (string.IsNullOrEmpty(application))
            forQueryOrRemove.Add(endpointConfigContainer);
          else if (endpointConfigContainer.HasEndpointsForApplication(new Guid(application)))
            forQueryOrRemove.Add(endpointConfigContainer);
        }
        else
        {
          List<WasEndpointConfigContainer> endpointConfigContainerList = string.IsNullOrEmpty(webServer) ? WasEndpointConfigContainer.Get(application) : WasEndpointConfigContainer.Get(webServer, application);
          if (endpointConfigContainerList != null)
          {
            foreach (WasEndpointConfigContainer endpointConfigContainer in endpointConfigContainerList)
            {
              if (string.IsNullOrEmpty(application))
                forQueryOrRemove.Add((EndpointConfigContainer) endpointConfigContainer);
              else if (endpointConfigContainer.HasEndpointsForApplication(new Guid(application)))
                forQueryOrRemove.Add((EndpointConfigContainer) endpointConfigContainer);
            }
          }
        }
      }
      return forQueryOrRemove;
    }

    private static void DisplayEndpointConfig(EndpointConfig config)
    {
      List<string> stringList = (List<string>) null;
      if (config.Container != null)
        stringList = config.Container.GetBaseAddresses(config);
      if (stringList == null || stringList.Count == 0)
      {
        if (config.IsMexEndpoint)
        {
          ToolConsole.WriteQueryLine("          " + Microsoft.Tools.ServiceModel.SR.GetString("MexEndpointExposed", (object) config.Address));
        }
        else
        {
          ToolConsole.WriteQueryLine("             " + Microsoft.Tools.ServiceModel.SR.GetString("BindingType", (object) config.BindingType));
          ToolConsole.WriteQueryLine("             " + Microsoft.Tools.ServiceModel.SR.GetString("BindingConfigurationName", (object) config.BindingName));
          ToolConsole.WriteQueryLine("             " + Microsoft.Tools.ServiceModel.SR.GetString("Address", (object) config.Address));
        }
      }
      else
      {
        foreach (string str1 in stringList)
        {
          string str2 = str1 + "/" + (object) config.Address;
          if (config.IsMexEndpoint)
          {
            ToolConsole.WriteQueryLine("          " + Microsoft.Tools.ServiceModel.SR.GetString("MexEndpointExposed", (object) str2));
          }
          else
          {
            ToolConsole.WriteQueryLine("             " + Microsoft.Tools.ServiceModel.SR.GetString("BindingType", (object) config.BindingType));
            ToolConsole.WriteQueryLine("             " + Microsoft.Tools.ServiceModel.SR.GetString("BindingConfigurationName", (object) config.BindingName));
            ToolConsole.WriteQueryLine("             " + Microsoft.Tools.ServiceModel.SR.GetString("Address", (object) str2));
          }
        }
      }
    }

    private static void DoList()
    {
      Tool.ValidateQueryParams();
      string str = (string) null;
      if (Tool.options.Application != null)
      {
        Guid appId;
        if (!ComAdminWrapper.ResolveApplicationId(Tool.options.Application, out appId))
          throw Tool.CreateArgumentException("application", Tool.options.Application, Microsoft.Tools.ServiceModel.SR.GetString("ApplicationNotFound", (object) Tool.options.Application), (Exception) null);
        str = appId.ToString("B");
      }
      List<EndpointConfig> endpointConfigList1 = new List<EndpointConfig>();
      List<EndpointConfigContainer> forQueryOrRemove = Tool.GetContainersForQueryOrRemove(Tool.options.Hosting, str, Tool.options.WebServer, Tool.options.WebDirectory);
      if (forQueryOrRemove != null)
      {
        foreach (EndpointConfigContainer endpointConfigContainer in forQueryOrRemove)
        {
          try
          {
            List<EndpointConfig> collection = string.IsNullOrEmpty(str) ? endpointConfigContainer.GetEndpointConfigs() : endpointConfigContainer.GetEndpointConfigs(new Guid(str));
            endpointConfigList1.AddRange((IEnumerable<EndpointConfig>) collection);
          }
          catch (Exception ex)
          {
            if (endpointConfigContainer is WasEndpointConfigContainer)
              ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("InvalidConfigFile", (object) ((WasEndpointConfigContainer) endpointConfigContainer).ConfigFile.OriginalFileName));
            if (endpointConfigContainer is ComplusEndpointConfigContainer)
              ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("InvalidConfigFile", (object) ((ComplusEndpointConfigContainer) endpointConfigContainer).ConfigFile.OriginalFileName));
          }
        }
      }
      Dictionary<Guid, Dictionary<Guid, Dictionary<Guid, List<EndpointConfig>>>> dictionary1 = new Dictionary<Guid, Dictionary<Guid, Dictionary<Guid, List<EndpointConfig>>>>();
      foreach (EndpointConfig endpointConfig in endpointConfigList1)
      {
        Dictionary<Guid, Dictionary<Guid, List<EndpointConfig>>> dictionary2 = (Dictionary<Guid, Dictionary<Guid, List<EndpointConfig>>>) null;
        Dictionary<Guid, List<EndpointConfig>> dictionary3 = (Dictionary<Guid, List<EndpointConfig>>) null;
        List<EndpointConfig> endpointConfigList2 = (List<EndpointConfig>) null;
        if (!dictionary1.TryGetValue(endpointConfig.Appid, out dictionary2))
        {
          dictionary2 = new Dictionary<Guid, Dictionary<Guid, List<EndpointConfig>>>();
          dictionary1[endpointConfig.Appid] = dictionary2;
        }
        if (!dictionary2.TryGetValue(endpointConfig.Clsid, out dictionary3))
        {
          dictionary3 = new Dictionary<Guid, List<EndpointConfig>>();
          dictionary2[endpointConfig.Clsid] = dictionary3;
        }
        if (!dictionary3.TryGetValue(endpointConfig.Iid, out endpointConfigList2))
        {
          endpointConfigList2 = new List<EndpointConfig>();
          dictionary3[endpointConfig.Iid] = endpointConfigList2;
        }
        endpointConfigList2.Add(endpointConfig);
      }
      IEnumerator<KeyValuePair<Guid, Dictionary<Guid, Dictionary<Guid, List<EndpointConfig>>>>> enumerator1 = (IEnumerator<KeyValuePair<Guid, Dictionary<Guid, Dictionary<Guid, List<EndpointConfig>>>>>) dictionary1.GetEnumerator();
      while (enumerator1.MoveNext())
      {
        IEnumerator<KeyValuePair<Guid, Dictionary<Guid, List<EndpointConfig>>>> enumerator2 = (IEnumerator<KeyValuePair<Guid, Dictionary<Guid, List<EndpointConfig>>>>) enumerator1.Current.Value.GetEnumerator();
        ComAdminAppInfo appInfo = ComAdminWrapper.GetAppInfo(enumerator1.Current.Key.ToString("B"));
        if (appInfo != null)
        {
          ToolConsole.WriteQueryLine(Microsoft.Tools.ServiceModel.SR.GetString("EnumeratingComponentsForApplication", Tool.options.ShowGuids ? (object) appInfo.ID.ToString("B") : (object) appInfo.Name));
          foreach (EndpointConfigContainer endpointConfigContainer in forQueryOrRemove)
          {
            if (endpointConfigContainer.HasEndpointsForApplication(enumerator1.Current.Key))
            {
              if (endpointConfigContainer is WasEndpointConfigContainer)
              {
                ToolConsole.WriteQueryLine("     " + Microsoft.Tools.ServiceModel.SR.GetString("WasHosting"));
                ToolConsole.WriteQueryLine("     " + Microsoft.Tools.ServiceModel.SR.GetString("ConfigFileName", (object) ((WasEndpointConfigContainer) endpointConfigContainer).ConfigFile.OriginalFileName));
              }
              else
              {
                ToolConsole.WriteQueryLine("     " + Microsoft.Tools.ServiceModel.SR.GetString("ComplusHosting"));
                ToolConsole.WriteQueryLine("     " + Microsoft.Tools.ServiceModel.SR.GetString("ConfigFileName", (object) ((ComplusEndpointConfigContainer) endpointConfigContainer).ConfigFile.OriginalFileName));
              }
            }
          }
          while (enumerator2.MoveNext())
          {
            IEnumerator<KeyValuePair<Guid, List<EndpointConfig>>> enumerator3 = (IEnumerator<KeyValuePair<Guid, List<EndpointConfig>>>) enumerator2.Current.Value.GetEnumerator();
            ComAdminClassInfo comAdminClassInfo = appInfo.FindClass(enumerator2.Current.Key.ToString("B"));
            if (comAdminClassInfo != null)
            {
              ToolConsole.WriteQueryLine("     " + Microsoft.Tools.ServiceModel.SR.GetString("EnumeratingInterfacesForComponent", Tool.options.ShowGuids ? (object) comAdminClassInfo.Clsid.ToString("B") : (object) comAdminClassInfo.Name));
              while (enumerator3.MoveNext())
              {
                ComAdminInterfaceInfo adminInterfaceInfo = comAdminClassInfo.FindInterface(enumerator3.Current.Key.ToString("B"));
                if (adminInterfaceInfo == null)
                {
                  foreach (EndpointConfig config in enumerator3.Current.Value)
                  {
                    if (config.IsMexEndpoint)
                      Tool.DisplayEndpointConfig(config);
                  }
                }
                else
                {
                  ToolConsole.WriteQueryLine("          " + Microsoft.Tools.ServiceModel.SR.GetString("EnumeratingEndpointsForInterfaces", Tool.options.ShowGuids ? (object) adminInterfaceInfo.Iid.ToString("B") : (object) adminInterfaceInfo.Name));
                  foreach (EndpointConfig config in enumerator3.Current.Value)
                    Tool.DisplayEndpointConfig(config);
                }
              }
            }
          }
        }
      }
    }

    private static void DoUninstall()
    {
      Tool.ValidateRemoveParams();
      ComAdminAppInfo appInfo = ComAdminWrapper.GetAppInfo(Tool.options.Application);
      Guid appid = appInfo != null ? appInfo.ID : throw Tool.CreateArgumentException("application", Tool.options.Application, Microsoft.Tools.ServiceModel.SR.GetString("ApplicationNotFound", (object) Tool.options.Application), (Exception) null);
      string application = appid.ToString("B");
      IList<ComponentDefinition<Guid>> outComps = (IList<ComponentDefinition<Guid>>) null;
      if (Tool.options.AllComponents)
        Tool.GetAllComponentsForRemove(appInfo, out outComps);
      else
        Tool.GetComponentsFromInputForRemove(appInfo, Tool.options.Components, out outComps);
      List<EndpointConfigContainer> forQueryOrRemove = Tool.GetContainersForQueryOrRemove(Tool.options.Hosting, application, Tool.options.WebServer, Tool.options.WebDirectory);
      if (outComps.Count == 0)
        ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("NoneOfTheComponentsSatisfiedTheRemoveCriteria"));
      try
      {
        bool flag = false;
        foreach (EndpointConfigContainer endpointConfigContainer in forQueryOrRemove)
        {
          List<EndpointConfig> endpointConfigs = new List<EndpointConfig>();
          foreach (EndpointConfig endpointConfig in endpointConfigContainer.GetEndpointConfigs(appid))
          {
            if (Tool.ShouldDelete(endpointConfig, outComps))
              endpointConfigs.Add(endpointConfig);
          }
          if (endpointConfigs.Count != 0)
          {
            endpointConfigContainer.Remove((IList<EndpointConfig>) endpointConfigs);
            flag = true;
          }
        }
        if (!flag)
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("NoneOfConfigsFoundMatchTheCriteriaSpecifiedNothingWillBeRemoved"));
        foreach (EndpointConfigContainer endpointConfigContainer in forQueryOrRemove)
          endpointConfigContainer.PrepareChanges();
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw;
          default:
            foreach (EndpointConfigContainer endpointConfigContainer in forQueryOrRemove)
              endpointConfigContainer.AbortChanges();
            throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("ErrorDuringRemove"), ex);
        }
      }
      foreach (EndpointConfigContainer endpointConfigContainer in forQueryOrRemove)
        endpointConfigContainer.CommitChanges();
    }

    private static bool ShouldDelete(
      EndpointConfig endpointConfig,
      IList<ComponentDefinition<Guid>> guidComponents)
    {
      foreach (ComponentDefinition<Guid> guidComponent in (IEnumerable<ComponentDefinition<Guid>>) guidComponents)
      {
        if (guidComponent.Component == endpointConfig.Clsid)
        {
          foreach (InterfaceDefination<Guid> interfaceDefination in (IEnumerable<InterfaceDefination<Guid>>) guidComponent.Interfaces)
          {
            if (interfaceDefination.Interface == endpointConfig.Iid)
            {
              endpointConfig.Methods = interfaceDefination.Methods;
              return true;
            }
          }
        }
      }
      return false;
    }

    private static void EnsureUserIsAdministrator()
    {
      if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
        throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("MustBeAnAdministrator"), (Exception) null);
    }

    private static void GetAllComponentsForAdd(
      ComAdminAppInfo appInfo,
      bool mex,
      out IList<ComponentDefinition<Guid>> outComps)
    {
      outComps = (IList<ComponentDefinition<Guid>>) new List<ComponentDefinition<Guid>>();
      foreach (ComAdminClassInfo classInfo in appInfo.Classes)
      {
        if (Tool.ValidateClass(classInfo))
        {
          ComponentDefinition<Guid> componentDefinition = new ComponentDefinition<Guid>(classInfo.Clsid);
          foreach (ComAdminInterfaceInfo interfaceInfo in classInfo.Interfaces)
          {
            if (ComPlusTypeValidator.VerifyInterface(interfaceInfo, Tool.options.AllowReferences, classInfo.Clsid))
              componentDefinition.AddInterface(interfaceInfo.Iid, ComPlusTypeValidator.FetchAllMethodsForInterface(interfaceInfo));
          }
          if (mex && componentDefinition.Interfaces != null)
            componentDefinition.AddInterface(typeof (IMetadataExchange).GUID, (List<string>) null);
          if (componentDefinition.Interfaces != null)
            outComps.Add(componentDefinition);
          else
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("NoneOfTheSpecifiedInterfacesForComponentWereFoundSkipping", Tool.Options.ShowGuids ? (object) classInfo.Clsid.ToString("B") : (object) classInfo.Name));
        }
      }
    }

    private static void GetAllComponentsForRemove(
      ComAdminAppInfo appInfo,
      out IList<ComponentDefinition<Guid>> outComps)
    {
      outComps = (IList<ComponentDefinition<Guid>>) new List<ComponentDefinition<Guid>>();
      foreach (ComAdminClassInfo comAdminClassInfo in appInfo.Classes)
      {
        ComponentDefinition<Guid> componentDefinition = new ComponentDefinition<Guid>(comAdminClassInfo.Clsid);
        foreach (ComAdminInterfaceInfo adminInterfaceInfo in comAdminClassInfo.Interfaces)
          componentDefinition.AddInterface(adminInterfaceInfo.Iid, (List<string>) null);
        componentDefinition.AddInterface(typeof (IMetadataExchange).GUID, (List<string>) null);
        outComps.Add(componentDefinition);
      }
    }

    private static void GetComponentsFromInputForAdd(
      ComAdminAppInfo appInfo,
      IList<ComponentDefinition<string>> inComps,
      bool mex,
      bool priorEndpointsExist,
      out IList<ComponentDefinition<Guid>> outComps)
    {
      string str = string.Empty;
      outComps = (IList<ComponentDefinition<Guid>>) new List<ComponentDefinition<Guid>>();
      foreach (ComponentDefinition<string> inComp in (IEnumerable<ComponentDefinition<string>>) inComps)
      {
        ComponentDefinition<Guid> componentDefinition1 = (ComponentDefinition<Guid>) null;
        ComAdminClassInfo classInfo = appInfo.FindClass(inComp.Component);
        if (classInfo == null)
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindComponentInApplicationSkipping", (object) inComp.Component, Tool.Options.ShowGuids ? (object) appInfo.ID.ToString("B") : (object) appInfo.Name));
        else if (Tool.ValidateClass(classInfo))
        {
          foreach (ComponentDefinition<Guid> componentDefinition2 in (IEnumerable<ComponentDefinition<Guid>>) outComps)
          {
            if (componentDefinition2.Component == classInfo.Clsid)
              componentDefinition1 = componentDefinition2;
          }
          if (componentDefinition1 == null)
            componentDefinition1 = new ComponentDefinition<Guid>(classInfo.Clsid);
          if (inComp.AllInterfaces)
          {
            foreach (ComAdminInterfaceInfo interfaceInfo in classInfo.Interfaces)
            {
              if (ComPlusTypeValidator.VerifyInterface(interfaceInfo, Tool.options.AllowReferences, classInfo.Clsid))
                componentDefinition1.AddInterface(interfaceInfo.Iid, ComPlusTypeValidator.FetchAllMethodsForInterface(interfaceInfo));
            }
            if (componentDefinition1.Interfaces != null && mex)
              componentDefinition1.AddInterface(typeof (IMetadataExchange).GUID, (List<string>) null);
          }
          else
          {
            foreach (InterfaceDefination<string> interfaceDefination in (IEnumerable<InterfaceDefination<string>>) inComp.Interfaces)
            {
              string interfaceNameOrGuid = interfaceDefination.Interface;
              if (interfaceNameOrGuid == typeof (IMetadataExchange).GUID.ToString("B"))
              {
                if (!mex)
                  componentDefinition1.AddInterface(typeof (IMetadataExchange).GUID, (List<string>) null);
              }
              else
              {
                ComAdminInterfaceInfo interfaceInfo = classInfo.FindInterface(interfaceNameOrGuid);
                if (interfaceInfo == null)
                {
                  ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindInterfaceInCatalogForComponentSkipping", (object) interfaceNameOrGuid, (object) inComp.Component));
                  str = interfaceNameOrGuid;
                }
                else if (interfaceDefination.AllMethods)
                {
                  if (!ComPlusTypeValidator.VerifyInterface(interfaceInfo, Tool.options.AllowReferences, classInfo.Clsid, true))
                    throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("InvalidInterface"), (Exception) null);
                  componentDefinition1.AddInterface(interfaceInfo.Iid, ComPlusTypeValidator.FetchAllMethodsForInterface(interfaceInfo));
                }
                else
                {
                  if (!ComPlusTypeValidator.VerifyInterfaceMethods(interfaceInfo, interfaceDefination.Methods, Tool.options.AllowReferences, true))
                    throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("InvalidMethod"), (Exception) null);
                  componentDefinition1.AddInterface(interfaceInfo.Iid, (List<string>) interfaceDefination.Methods);
                }
              }
            }
            if ((componentDefinition1.Interfaces != null || priorEndpointsExist) && mex)
              componentDefinition1.AddInterface(typeof (IMetadataExchange).GUID, (List<string>) null);
          }
          if (componentDefinition1.Interfaces != null)
            outComps.Add(componentDefinition1);
          else
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("NoneOfTheSpecifiedInterfacesForComponentWereFoundSkipping", (object) inComp.Component));
        }
      }
      if (outComps.Count == 0 && !string.IsNullOrEmpty(str))
        throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("NoComponentContainsInterface", (object) str), (Exception) null);
    }

    private static void GetComponentsFromInputForRemove(
      ComAdminAppInfo appInfo,
      IList<ComponentDefinition<string>> inComps,
      out IList<ComponentDefinition<Guid>> outComps)
    {
      outComps = (IList<ComponentDefinition<Guid>>) new List<ComponentDefinition<Guid>>();
      foreach (ComponentDefinition<string> inComp in (IEnumerable<ComponentDefinition<string>>) inComps)
      {
        ComponentDefinition<Guid> componentDefinition1 = (ComponentDefinition<Guid>) null;
        ComAdminClassInfo comAdminClassInfo = appInfo.FindClass(inComp.Component);
        if (comAdminClassInfo == null)
        {
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindComponentInApplicationSkipping", (object) inComp.Component, Tool.Options.ShowGuids ? (object) appInfo.ID.ToString("B") : (object) appInfo.Name));
        }
        else
        {
          foreach (ComponentDefinition<Guid> componentDefinition2 in (IEnumerable<ComponentDefinition<Guid>>) outComps)
          {
            if (componentDefinition2.Component == comAdminClassInfo.Clsid)
              componentDefinition1 = componentDefinition2;
          }
          if (componentDefinition1 == null)
            componentDefinition1 = new ComponentDefinition<Guid>(comAdminClassInfo.Clsid);
          if (inComp.AllInterfaces)
          {
            foreach (ComAdminInterfaceInfo interfaceInfo in comAdminClassInfo.Interfaces)
              componentDefinition1.AddInterface(interfaceInfo.Iid, ComPlusTypeValidator.FetchAllMethodsForInterface(interfaceInfo, false));
            componentDefinition1.AddInterface(typeof (IMetadataExchange).GUID, (List<string>) null);
          }
          else
          {
            foreach (InterfaceDefination<string> interfaceDefination in (IEnumerable<InterfaceDefination<string>>) inComp.Interfaces)
            {
              string interfaceNameOrGuid = interfaceDefination.Interface;
              if (interfaceNameOrGuid == typeof (IMetadataExchange).GUID.ToString("B"))
              {
                componentDefinition1.AddInterface(typeof (IMetadataExchange).GUID, (List<string>) null);
              }
              else
              {
                ComAdminInterfaceInfo interfaceInfo = comAdminClassInfo.FindInterface(interfaceNameOrGuid);
                if (interfaceInfo == null)
                  ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindInterfaceInCatalogForComponentSkipping", (object) interfaceNameOrGuid, (object) inComp.Component));
                else if (interfaceDefination.AllMethods)
                  componentDefinition1.AddInterface(interfaceInfo.Iid, ComPlusTypeValidator.FetchAllMethodsForInterface(interfaceInfo));
                else
                  componentDefinition1.AddInterface(interfaceInfo.Iid, (List<string>) interfaceDefination.Methods);
              }
            }
          }
          if (componentDefinition1.Interfaces != null)
            outComps.Add(componentDefinition1);
          else
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("NoneOfTheSpecifiedInterfacesForComponentWereFoundSkipping", (object) inComp.Component));
        }
      }
    }

    public static bool CheckForCorrectOle32()
    {
      Guid guid = new Guid("0000032E-0000-0000-C000-000000000046");
      IPSFactoryBuffer classObject = SafeNativeMethods.DllGetClassObject(guid, typeof (IPSFactoryBuffer).GUID) as IPSFactoryBuffer;
      try
      {
        classObject.CreateProxy(IntPtr.Zero, guid, out object _, out object _);
      }
      catch (ArgumentException ex)
      {
        return true;
      }
      catch (COMException ex)
      {
        return false;
      }
      return false;
    }

    public static int Main(string[] args)
    {
      Thread.CurrentThread.CurrentUICulture = CultureInfo.CurrentUICulture.GetConsoleFallbackUICulture();
      if (Console.OutputEncoding.CodePage != 65001 && Console.OutputEncoding.CodePage != Thread.CurrentThread.CurrentUICulture.TextInfo.OEMCodePage)
        Thread.CurrentThread.CurrentUICulture = new CultureInfo("en-US");
      if (!((object) new CServiceConfig() is IServiceSysTxnConfig))
      {
        ToolConsole.WriteError(Microsoft.Tools.ServiceModel.SR.GetString("WindowsFunctionalityMissing"), "");
        return 1;
      }
      if (Environment.OSVersion.Version.Major == 5)
      {
        if (Environment.OSVersion.Version.Minor == 1)
        {
          if (!Tool.CheckForCorrectOle32())
          {
            ToolConsole.WriteError(Microsoft.Tools.ServiceModel.SR.GetString("WindowsFunctionalityMissing"), "");
            return 1;
          }
        }
      }
      try
      {
        Tool.EnsureUserIsAdministrator();
        Tool.options = Options.ParseArguments(args);
        ToolConsole.Verbose = Tool.options.Verbose;
        Tool.Run();
      }
      catch (ArgumentException ex)
      {
        ToolConsole.WriteError((Exception) ex);
        Console.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("MoreHelp", (object) "?"));
        return 1;
      }
      catch (ApplicationException ex)
      {
        ToolConsole.WriteError((Exception) ex);
        return 1;
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw;
          default:
            ToolConsole.WriteDetailedException(ex, Microsoft.Tools.ServiceModel.SR.GetString("UnExpectedError"));
            return 1;
        }
      }
      return 0;
    }

    private static void Run()
    {
      if (!Tool.options.NoLogo)
        Tool.DisplayLogo();
      if (Tool.options.Help)
      {
        ToolConsole.Verbose = false;
        Tool.DisplayHelp(Tool.options.Mode);
      }
      else
      {
        switch (Tool.options.Mode)
        {
          case Mode.NotSpecified:
            throw Tool.CreateArgumentException("mode", "", Microsoft.Tools.ServiceModel.SR.GetString("ArgumentRequired", (object) "mode"), (Exception) null);
          case Mode.Install:
            Tool.DoInstall();
            break;
          case Mode.Uninstall:
            Tool.DoUninstall();
            break;
          case Mode.List:
            Tool.DoList();
            break;
        }
      }
    }

    private static void ValidateAddParams()
    {
      if (Tool.options.Application == null)
        throw Tool.CreateArgumentException("application", (string) null, Microsoft.Tools.ServiceModel.SR.GetString("ArgumentRequired", (object) "application"), (Exception) null);
      if (!Tool.options.AllComponents && (Tool.options.Components == null || Tool.options.Components.Count == 0))
        throw Tool.CreateArgumentException("contract", (string) null, Microsoft.Tools.ServiceModel.SR.GetString("ArgumentRequired", (object) "contract"), (Exception) null);
      switch (Tool.options.Hosting)
      {
        case Hosting.NotSpecified:
          throw Tool.CreateArgumentException("hosting", (string) null, Microsoft.Tools.ServiceModel.SR.GetString("ArgumentRequired", (object) "hosting"), (Exception) null);
        case Hosting.Complus:
          if (Tool.options.WebDirectory != null)
            throw Tool.CreateArgumentException("webDirectory", Tool.options.WebDirectory, Microsoft.Tools.ServiceModel.SR.GetString("InvalidArgumentForHostingMode", (object) "webDirectory"), (Exception) null);
          if (Tool.options.WebServer == null)
            break;
          throw Tool.CreateArgumentException("webSite", Tool.options.WebServer, Microsoft.Tools.ServiceModel.SR.GetString("InvalidArgumentForHostingMode", (object) "webSite"), (Exception) null);
        case Hosting.Was:
          if (Tool.options.WebDirectory != null)
            break;
          throw Tool.CreateArgumentException("webDirectory", (string) null, Microsoft.Tools.ServiceModel.SR.GetString("ArgumentRequired", (object) "webDirectory"), (Exception) null);
      }
    }

    private static void ValidateRemoveParams()
    {
      if (Tool.options.Application == null)
        throw Tool.CreateArgumentException("application", (string) null, Microsoft.Tools.ServiceModel.SR.GetString("ArgumentRequired", (object) "application"), (Exception) null);
      if (!Tool.options.AllComponents && (Tool.options.Components == null || Tool.options.Components.Count == 0))
        throw Tool.CreateArgumentException("contract", (string) null, Microsoft.Tools.ServiceModel.SR.GetString("ArgumentRequired", (object) "contract"), (Exception) null);
      switch (Tool.options.Hosting)
      {
        case Hosting.NotSpecified:
          if (Tool.options.WebDirectory == null)
            break;
          throw Tool.CreateArgumentException("webDirectory", Tool.options.WebDirectory, Microsoft.Tools.ServiceModel.SR.GetString("InvalidArgumentForHostingMode", (object) "webDirectory"), (Exception) null);
        case Hosting.Complus:
          if (Tool.options.WebDirectory != null)
            throw Tool.CreateArgumentException("webDirectory", Tool.options.WebDirectory, Microsoft.Tools.ServiceModel.SR.GetString("InvalidArgumentForHostingMode", (object) "webDirectory"), (Exception) null);
          if (Tool.options.WebServer == null)
            break;
          throw Tool.CreateArgumentException("webSite", Tool.options.WebServer, Microsoft.Tools.ServiceModel.SR.GetString("InvalidArgumentForHostingMode", (object) "webSite"), (Exception) null);
      }
    }

    private static void ValidateQueryParams()
    {
      if (Tool.options.AllComponents || Tool.options.Components != null && Tool.options.Components.Count > 0)
        throw Tool.CreateArgumentException("contract", (string) null, Microsoft.Tools.ServiceModel.SR.GetString("ExclusiveOptionsSpecified", (object) "contract", (object) "mode:query"), (Exception) null);
      switch (Tool.options.Hosting)
      {
        case Hosting.NotSpecified:
          if (Tool.options.WebDirectory == null)
            break;
          throw Tool.CreateArgumentException("webDirectory", Tool.options.WebDirectory, Microsoft.Tools.ServiceModel.SR.GetString("InvalidArgumentForHostingMode", (object) "webDirectory"), (Exception) null);
        case Hosting.Complus:
          if (Tool.options.WebDirectory != null)
            throw Tool.CreateArgumentException("webDirectory", Tool.options.WebDirectory, Microsoft.Tools.ServiceModel.SR.GetString("InvalidArgumentForHostingMode", (object) "webDirectory"), (Exception) null);
          if (Tool.options.WebServer == null)
            break;
          throw Tool.CreateArgumentException("webSite", Tool.options.WebServer, Microsoft.Tools.ServiceModel.SR.GetString("InvalidArgumentForHostingMode", (object) "webSite"), (Exception) null);
      }
    }

    private static void ValidateApplication(ComAdminAppInfo appInfo, Hosting hosting)
    {
      if (appInfo.IsSystemApplication)
        throw Tool.CreateArgumentException("application", appInfo.Name, Microsoft.Tools.ServiceModel.SR.GetString("SystemApplicationsNotSupported"), (Exception) null);
      if (hosting != Hosting.Complus)
        return;
      if (!appInfo.IsServerActivated)
        throw Tool.CreateArgumentException("application", appInfo.Name, Microsoft.Tools.ServiceModel.SR.GetString("LibraryApplicationsNotSupported"), (Exception) null);
      if (appInfo.IsAutomaticRecycling)
        throw Tool.CreateArgumentException("application", appInfo.Name, Microsoft.Tools.ServiceModel.SR.GetString("ProcessRecyclingNotSupported"), (Exception) null);
      if (appInfo.IsProcessPooled)
        throw Tool.CreateArgumentException("application", appInfo.Name, Microsoft.Tools.ServiceModel.SR.GetString("ProcessPoolingNotSupported"), (Exception) null);
    }

    private static bool ValidateClass(ComAdminClassInfo classInfo)
    {
      if (!classInfo.IsPrivate)
        return true;
      ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CannotExposePrivateComponentsSkipping", Tool.Options.ShowGuids ? (object) classInfo.Clsid.ToString("B") : (object) classInfo.Name));
      return false;
    }
  }
}
