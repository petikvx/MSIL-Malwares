// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.DataRowIndexBuffer
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: ADE0A079-11DB-4A46-8BDE-D2A592CA8DEA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Virus.Win32.Expiro.w-a9ceb75b1ba9b52d39d656b826723457de718e998c1868360dc2339052b9ef02.exe

using System.Collections.Generic;

namespace Microsoft.InfoCards
{
  internal class DataRowIndexBuffer
  {
    private Dictionary<string, List<IndexObject>> m_objects;

    public DataRowIndexBuffer() => this.m_objects = new Dictionary<string, List<IndexObject>>();

    public string[] GetIndexNames() => new List<string>((IEnumerable<string>) this.m_objects.Keys).ToArray();

    public List<IndexObject> this[string name]
    {
      get
      {
        if (!this.m_objects.ContainsKey(name))
          this.m_objects.Add(name, new List<IndexObject>());
        return this.m_objects[name];
      }
    }

    public void Clear() => this.m_objects.Clear();

    public void ClearIndexValues(string name) => this.m_objects.Remove(name);

    public void AddIndexValue(string name, IndexObject obj) => this[name].Add(obj);

    public void AddIndexValues(string name, IndexObject[] objs) => this[name].AddRange((IEnumerable<IndexObject>) objs);

    public void SetIndexValues(string name, IndexObject[] indexObjects)
    {
      this[name].Clear();
      this[name].AddRange((IEnumerable<IndexObject>) indexObjects);
    }

    public int GetValueCount(string name) => !this.m_objects.ContainsKey(name) ? 0 : this.m_objects[name].Count;
  }
}
