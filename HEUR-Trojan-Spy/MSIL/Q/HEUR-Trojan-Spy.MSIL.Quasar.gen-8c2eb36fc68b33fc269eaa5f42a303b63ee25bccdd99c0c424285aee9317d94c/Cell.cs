// Decompiled with JetBrains decompiler
// Type: Mario_KS.Cell
// Assembly: OnSerializingAttribute, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F72B5184-77D9-4DBB-B29C-2F3B04C48CCD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-8c2eb36fc68b33fc269eaa5f42a303b63ee25bccdd99c0c424285aee9317d94c.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Windows.Forms;

namespace Mario_KS
{
  [Serializable]
  public class Cell
  {
    public int X;
    public int Y;
    public int PieceIndex;
    public bool Visible;
    public Point Position;
    public Point Offset;
    public Padding Margin;
    [NonSerialized]
    public Board Parent;
    [NonSerialized]
    public ImageAttributes ImageAttributes;

    public int Distance(Cell Reference) => checked (Math.Abs(this.X - Reference.X) + Math.Abs(this.Y - Reference.Y));

    public bool IsEqual(Cell Cell) => Cell.X == this.X & Cell.Y == this.Y & Cell.Parent == this.Parent;

    public Point DistXY(Cell Reference) => new Point(checked (this.X - Reference.X), checked (this.Y - Reference.Y));

    public Piece Piece => this.Parent.Pieces[this.PieceIndex];

    public Point Coordinates => new Point(this.X, this.Y);

    public Cell get_Siblings(int iX, int iY) => this.Parent.get_Cells(iX, iY);

    public void Swap(Cell Reference)
    {
      Cell cell1 = new Cell(0, 0, this.Parent);
      Cell cell2 = cell1;
      cell2.PieceIndex = Reference.PieceIndex;
      cell2.Visible = Reference.Visible;
      cell2.Offset = Reference.Offset;
      cell2.Margin = Reference.Margin;
      cell2.ImageAttributes = Reference.ImageAttributes;
      Cell cell3 = Reference;
      cell3.PieceIndex = this.PieceIndex;
      cell3.Visible = this.Visible;
      cell3.Offset = this.Offset;
      cell3.Margin = this.Margin;
      cell3.ImageAttributes = this.ImageAttributes;
      Cell cell4 = cell1;
      this.PieceIndex = cell4.PieceIndex;
      this.Visible = cell4.Visible;
      this.Offset = cell4.Offset;
      this.Margin = cell4.Margin;
      this.ImageAttributes = cell4.ImageAttributes;
    }

    public Cell(int X, int Y, Board oParent)
    {
      this.Position = new Point();
      this.Offset = new Point();
      this.Margin = new Padding(0);
      this.ImageAttributes = new ImageAttributes();
      this.X = X;
      this.Y = Y;
      this.Parent = oParent;
      this.Visible = true;
    }
  }
}
