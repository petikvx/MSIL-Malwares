// Decompiled with JetBrains decompiler
// Type: SpectraCyber.cSpectraCyber1
// Assembly: STAThreadAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EE3DE1A-E148-4FBA-A193-65BEA1824C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f6a784c2aa30ddaf03919958455d18bf51533a475c21a73eff578df0174cc5d4.exe

using System;
using System.Windows.Forms;

namespace SpectraCyber
{
  internal class cSpectraCyber1 : cSpectraCyberBase
  {
    protected double mdDCOffsetCont;
    protected double mdDCOffsetSpec;
    protected double mdDCOffsetMin;
    protected double mdDCOffsetMax;
    protected double mdDCOffsetStepSize;
    protected double[] marrContinuumIntegrationValues = new double[3]
    {
      0.3,
      1.0,
      10.0
    };
    protected double[] marrSpectrumIntegrationValues = new double[3]
    {
      0.3,
      0.5,
      1.0
    };
    protected double mdContinuumIntegration;
    protected double mdSpectrumIntegration;
    protected int[] marrGainValues = new int[6]
    {
      1,
      5,
      10,
      20,
      50,
      60
    };
    protected int miContinuumGain;
    protected int miSpectrumGain;
    protected int[] marrBandwithValues = new int[2]
    {
      15,
      30
    };
    protected int miBandwidth;

    public cSpectraCyber1(string strCommPort)
    {
      this.miCharInputBufferSize = 4;
      this.CommPort = strCommPort;
      this.InitDatamembers();
    }

    private void InitDatamembers()
    {
      this.miVersion = 1;
      this.mbNoiseSourceStatus = false;
      this.mdIFGain = 10.0;
      this.mdIFGainMin = 10.0;
      this.mdIFGainMax = 25.75;
      this.mdPLLRestFrequency = 48.6;
      this.mdPLLFrequency = 46.6;
      this.mdPLLMaxOffset = 2.0;
      this.mdPLLStepSize = 0.005;
      this.mdDCOffsetCont = 0.0;
      this.mdDCOffsetSpec = 0.0;
      this.mdDCOffsetMin = 0.0;
      this.mdDCOffsetMax = 4.096;
      this.mdDCOffsetStepSize = this.mdDCOffsetMax / 4095.0;
      this.mdContinuumIntegration = 0.3;
      this.mdSpectrumIntegration = 0.3;
      this.miContinuumGain = this.marrGainValues[0];
      this.miSpectrumGain = this.marrGainValues[0];
      this.mdVoltageMax = 10.0;
      this.miVoltageNumSteps = 4095;
      this.mdVoltageStepSize = this.mdVoltageMax / (double) this.miVoltageNumSteps;
      this.miBandwidth = this.marrBandwithValues[0];
    }

    public override void Reset() => base.Reset();

    public override void ProcessReply(string strReply, eCommandType eType)
    {
      if (!this.mpForm.IsClosing)
        this.mpForm.Invoke((Delegate) new cSpectraCyberBase.SetCommandWindowDelegate(this.mpForm.SetCommandWindowText), (object) strReply);
      switch (eType)
      {
        case eCommandType.ScanStart:
          this.mDatabaseQueue.Add(new cDatabaseItem(eDBCommandType.ScanStart));
          this.SettingsChanged();
          this.mbScanning = true;
          break;
        case eCommandType.ScanStop:
          this.mDatabaseQueue.Add(new cDatabaseItem(eDBCommandType.ScanStop));
          this.mbScanning = false;
          this.ScanComplete();
          break;
        case eCommandType.Rescan:
          this.Scan();
          break;
        default:
          char ch = strReply[0];
          strReply = strReply.Remove(0, 1);
          bool flag1 = true;
          switch (ch)
          {
            case 'A':
              this.mdIFGain = 10.0 + (double) this.HexStringToInt(strReply) * 0.25;
              break;
            case 'B':
              this.miBandwidth = this.marrBandwithValues[int.Parse(strReply)];
              break;
            case 'D':
              flag1 = false;
              if (eType == eCommandType.DataRequest)
              {
                double num1 = Math.Round((double) this.HexStringToInt(strReply) * this.mdVoltageStepSize, 6);
                double num2 = 0.0;
                string[] arrField = new string[2]
                {
                  "fFrequency",
                  "fValue"
                };
                eDBCommandType eType1 = eDBCommandType.Data;
                string[] arrValue;
                if (this.meMode == enumMode.Continuum)
                {
                  arrValue = new string[2]
                  {
                    null,
                    num1.ToString()
                  };
                }
                else
                {
                  num2 = 1000.0 * this.mdPLLFrequency + 1371805.0;
                  arrValue = new string[2]
                  {
                    num2.ToString(),
                    num1.ToString()
                  };
                }
                if (!this.mpForm.IsClosing)
                {
                  this.mpForm.Invoke((Delegate) new cSpectraCyberBase.VoltageTextboxDelegate(this.mpForm.SetVoltageTextbox), (object) num1.ToString());
                  this.mpForm.Invoke((Delegate) new cSpectraCyberBase.FrequencyTextboxDelegate(this.mpForm.SetFrequencyTextbox), (object) num2.ToString());
                }
                this.mDatabaseQueue.Add(new cDatabaseItem(arrField, (object[]) arrValue, eType1));
                break;
              }
              break;
            case 'F':
              this.mdPLLFrequency = Math.Round(46.0 + ((double) this.HexStringToInt(strReply) - 0.05) / 200.0, 3);
              break;
            case 'G':
              this.miContinuumGain = this.marrGainValues[int.Parse(strReply)];
              break;
            case 'I':
              this.mdContinuumIntegration = this.marrContinuumIntegrationValues[int.Parse(strReply)];
              break;
            case 'J':
              this.mdDCOffsetSpec = (double) this.HexStringToInt(strReply) * this.mdDCOffsetStepSize;
              break;
            case 'K':
              this.miSpectrumGain = this.marrGainValues[int.Parse(strReply)];
              break;
            case 'L':
              this.mdSpectrumIntegration = this.marrSpectrumIntegrationValues[int.Parse(strReply)];
              break;
            case 'N':
              bool flag2 = false;
              if (strReply[2] == '\u0001')
                this.mbNoiseSourceStatus = true;
              this.mbNoiseSourceStatus = flag2;
              break;
            case 'O':
              this.mdDCOffsetCont = (double) this.HexStringToInt(strReply) * this.mdDCOffsetStepSize;
              break;
            case 'R':
              this.mcommCommunication.Reset();
              this.InitDatamembers();
              flag1 = false;
              break;
            default:
              flag1 = false;
              break;
          }
          if (flag1 && this.mbScanning)
            this.SettingsChanged();
          break;
      }
    }

    protected void SettingsChanged() => this.mDatabaseQueue.Add(new cDatabaseItem(new string[10]
    {
      "fIFGain",
      "fBandwidth",
      "fDCGainContinuum",
      "fDCGainSpectrum",
      "fIntegrationContinuum",
      "fIntegrationSpectrum",
      "fNoiseSourceOn",
      "fDCOffsetContinuum",
      "fDCOffsetSpectrum",
      "fMode"
    }, new object[10]
    {
      (object) this.mdIFGain,
      (object) this.miBandwidth,
      (object) this.miContinuumGain,
      (object) this.miSpectrumGain,
      (object) this.mdContinuumIntegration,
      (object) this.mdSpectrumIntegration,
      (object) this.mbNoiseSourceStatus,
      (object) this.mdDCOffsetCont,
      (object) this.mdDCOffsetSpec,
      (object) this.meMode.ToString()
    }, eDBCommandType.Settings));

    private void SetMode(enumMode eMode) => this.meMode = eMode;

    private void SetIFGain() => this.SetIFGain(this.mdIFGain);

    private void SetIFGain(double dIFGain) => this.SendCommand("!A0" + this.IntToHexString((int) Math.Floor(4.0 * (dIFGain - 10.0)), 2), 0, false, 0, eCommandType.ChangeSetting);

    private void SetFrequency(double dPLLFrequency)
    {
      int iTimeToWaitMS = (int) (1000.0 * this.mdSpectrumIntegration);
      if (dPLLFrequency < 46.6 || dPLLFrequency >= 50.6)
        return;
      this.SendCommand("!F" + this.IntToHexString((int) Math.Floor(200.0 * (dPLLFrequency - 46.0) + 0.5), 3), iTimeToWaitMS, false, 0, eCommandType.FrequencySet);
    }

    private void SetIntegration()
    {
      if (this.meMode == enumMode.Continuum)
        this.SetIntegration(this.mdContinuumIntegration);
      else
        this.SetIntegration(this.mdSpectrumIntegration);
    }

    private void SetIntegration(double dIntegration)
    {
      string strCommand = "";
      if (this.meMode == enumMode.Continuum)
      {
        if (dIntegration != this.mdContinuumIntegration)
          strCommand = "!I00" + Array.IndexOf<double>(this.marrContinuumIntegrationValues, dIntegration).ToString();
      }
      else if (dIntegration != this.mdSpectrumIntegration)
        strCommand = "!L00" + Array.IndexOf<double>(this.marrSpectrumIntegrationValues, dIntegration).ToString();
      if (strCommand.Length <= 0)
        return;
      this.SendCommand(strCommand, 0, false, 0, eCommandType.ChangeSetting);
    }

    private void SetGain()
    {
      if (this.meMode == enumMode.Continuum)
        this.SetGain(this.miContinuumGain);
      else
        this.SetGain(this.miSpectrumGain);
    }

    private void SetGain(int iValue) => this.SendCommand((this.meMode != enumMode.Continuum ? "!K00" : "!G00") + Array.IndexOf<int>(this.marrGainValues, iValue).ToString(), 70, false, 0, eCommandType.ChangeSetting);

    private void SetDCOffset()
    {
      if (this.meMode == enumMode.Continuum)
        this.SetDCOffset(this.mdDCOffsetCont);
      else
        this.SetDCOffset(this.mdDCOffsetSpec);
    }

    private void SetDCOffset(double dOffset) => this.SendCommand((this.meMode != enumMode.Continuum ? "!J" : "!O") + this.IntToHexString((int) (dOffset / this.mdDCOffsetStepSize), 3), 0, false, 0, eCommandType.ChangeSetting);

    private void SetBandwidth() => this.SetBandwidth(this.miBandwidth);

    private void SetBandwidth(int iBandwidth) => this.SendCommand("!B00" + Array.IndexOf<int>(this.marrBandwithValues, iBandwidth).ToString(), 0, false, 0, eCommandType.ChangeSetting);

    public override void Scan()
    {
      if (!this.mbScanning)
      {
        this.SendCommand("_SCAN_START", 0, false, 0, eCommandType.ScanStart);
        this.SetNoiseSourceStatus();
        this.SetIFGain();
        this.SetGain();
        this.SetIntegration();
        this.SetDCOffset();
        this.SetBandwidth();
      }
      this.TakeData();
    }

    private void TakeData()
    {
      if (this.meMode == enumMode.Continuum)
      {
        int iTimeToWaitMS = (int) (1000.0 * this.mdContinuumIntegration);
        if (!this.mbScanning)
          this.SendCommand("!D000", iTimeToWaitMS, false, 4, eCommandType.DataDiscard);
        for (int index = 0; index < 60; ++index)
          this.SendCommand("!D000", iTimeToWaitMS, true, 4, eCommandType.DataRequest);
      }
      else
      {
        if (!this.mbScanning)
        {
          this.SetFrequency(this.mdPLLLowerBound);
          this.SendCommand("!D001", 0, false, 4, eCommandType.DataDiscard);
        }
        else
          this.mdPLLFrequency = this.mdPLLLowerBound;
        int num = 0;
        while (this.mdPLLFrequency < this.mdPLLUpperBound)
        {
          this.SetFrequency(this.mdPLLLowerBound + this.mdPLLStepSize * (double) num);
          this.mdPLLFrequency = this.mdPLLLowerBound + this.mdPLLStepSize * (double) num;
          this.SendCommand("!D001", 70, true, 4, eCommandType.DataRequest);
          ++num;
        }
      }
      this.SendCommand("_RESCAN", 0, false, 0, eCommandType.Rescan);
    }

    public double IFGain
    {
      get => this.mdIFGain;
      set
      {
        if (10.0 <= value && value <= 25.75)
        {
          if (value == this.mdIFGain)
            return;
          this.SetIFGain(value);
        }
        else
        {
          int num = (int) MessageBox.Show("IF Gain is out of Range");
        }
      }
    }

    public double IFGainMin => this.mdIFGainMin;

    public double IFGainMax => this.mdIFGainMax;

    public Array ValidIntegrationValues => this.meMode == enumMode.Continuum ? (Array) this.marrContinuumIntegrationValues : (Array) this.marrSpectrumIntegrationValues;

    public double Integration
    {
      get => this.meMode == enumMode.Continuum ? this.mdContinuumIntegration : this.mdSpectrumIntegration;
      set => this.SetIntegration(value);
    }

    public double DCOffset
    {
      get => this.meMode == enumMode.Continuum ? this.mdDCOffsetCont : this.mdDCOffsetSpec;
      set
      {
        if (value == this.DCOffset)
          return;
        this.SetDCOffset(value);
      }
    }

    public double DCOffsetMinValue => this.mdDCOffsetMin;

    public double DCOffsetMaxValue => this.mdDCOffsetMax;

    public double DCOffsetStepSize => this.mdDCOffsetStepSize;

    public int[] GainValues => this.marrGainValues;

    public int Gain
    {
      get => this.meMode == enumMode.Continuum ? this.miContinuumGain : this.miSpectrumGain;
      set
      {
        if (value == this.Gain)
          return;
        this.SetGain(value);
      }
    }

    public new enumMode Mode
    {
      get => this.meMode;
      set => this.SetMode(value);
    }

    public int Bandwith
    {
      get => this.miBandwidth;
      set
      {
        if (value == this.Bandwith)
          return;
        this.SetBandwidth(value);
      }
    }

    public Array BandwidthValues => (Array) this.marrBandwithValues;
  }
}
