// Decompiled with JetBrains decompiler
// Type: Loip.My.MySettings
// Assembly: Loip, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FC9037DE-03A5-4A0F-BBDF-6193E92BDCC9
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.cgkj-0e8e2b2a3f0a162b3135291eabffa555de93000ea7040c864c8e8d376efe9db6.exe

using A;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace Loip.My
{
  [CompilerGenerated]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings defaultInstance = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool addedHandler;
    private static object addedHandlerLockObject = RuntimeHelpers.GetObjectValue(new object());

    [DebuggerNonUserCode]
    public MySettings()
    {
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [DebuggerNonUserCode]
    private static void AutoSaveSettings(object sender, EventArgs e)
    {
      if (!cc4d3d6767efc953c2dfc56e9d4aa432e.ccb717085086889dc076c7f37db6ac3d9.SaveMySettingsOnExit)
        return;
label_1:
      switch (6)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MySettings.AutoSaveSettings);
          }
          c8ffce20be1c0eb162463352229434cd4.Settings.Save();
          break;
      }
    }

    public static MySettings Default
    {
      get
      {
        if (!MySettings.addedHandler)
        {
label_1:
          switch (7)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (MySettings.get_Default);
              }
              object handlerLockObject = MySettings.addedHandlerLockObject;
              ObjectFlowControl.CheckForSyncLockOnValueType(handlerLockObject);
              Monitor.Enter(handlerLockObject);
              try
              {
                if (!MySettings.addedHandler)
                {
                  cc4d3d6767efc953c2dfc56e9d4aa432e.ccb717085086889dc076c7f37db6ac3d9.Shutdown += (ShutdownEventHandler) ((sender, e) =>
                  {
                    if (!cc4d3d6767efc953c2dfc56e9d4aa432e.ccb717085086889dc076c7f37db6ac3d9.SaveMySettingsOnExit)
                      return;
label_1:
                    switch (6)
                    {
                      case 0:
                        goto label_1;
                      default:
                        if (false)
                        {
                          RuntimeMethodHandle runtimeMethodHandle2 = __methodref (MySettings.AutoSaveSettings);
                        }
                        c8ffce20be1c0eb162463352229434cd4.Settings.Save();
                        break;
                    }
                  });
                  MySettings.addedHandler = true;
                }
              }
              finally
              {
                Monitor.Exit(handlerLockObject);
              }
              break;
          }
        }
        MySettings defaultInstance = MySettings.defaultInstance;
        return defaultInstance;
      }
    }
  }
}
