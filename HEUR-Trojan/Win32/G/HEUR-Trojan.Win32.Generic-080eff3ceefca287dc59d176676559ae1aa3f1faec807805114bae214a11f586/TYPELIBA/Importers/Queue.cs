// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Importers.Queue
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Rules;
using ProjNet.Structs;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using TYPELIBA.Identifiers;

namespace TYPELIBA.Importers
{
  internal class Queue : StateProcess
  {
    protected RepositoryProcess m_Rules;
    private AccountTokenStructBuilder m_Proccesor;
    private double[] _Config;
    private bool _Schema;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Queue(AccountTokenStructBuilder def)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      this.\u002Ector(def, false);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private Queue(AccountTokenStructBuilder i, bool comparesecond)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_2;
            case 1:
            case 3:
              goto label_1;
            case 4:
              goto label_3;
            case 5:
              goto label_4;
            case 6:
              goto label_8;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
        this._Schema = false;
        // ISSUE: explicit constructor call
        base.\u002Ector();
        num1 = 5;
        continue;
label_2:
        ManagerParamsID.NewExpression();
        num1 = 3;
        continue;
label_3:
        this._Schema = comparesecond;
        num1 = 6;
        continue;
label_4:
        this.m_Proccesor = i;
        this._Config = this.m_Proccesor.FillProcess();
        goto label_3;
      }
label_8:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError() => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override RepositoryProcess CreateState()
    {
      int num = 0;
      bool flag;
      RepositoryProcess rules;
      while (true)
      {
        switch (num)
        {
          case 0:
            flag = this.m_Rules == null;
            num = 4;
            continue;
          case 1:
          case 4:
            if (flag)
            {
              this.m_Rules = (RepositoryProcess) new Queue(this.m_Proccesor, !this._Schema);
              goto case 2;
            }
            else
              goto case 2;
          case 2:
          case 3:
            rules = this.m_Rules;
            num = 5;
            continue;
          case 5:
            goto label_7;
          default:
            if (true)
            {
              num = 3;
              continue;
            }
            goto case 2;
        }
      }
label_7:
      return rules;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private double[] OrderConsumer(double[] key) => new double[3]
    {
      this._Config[0] * key[0] - this._Config[3] * key[1] + this._Config[2] * key[2] + this._Config[4],
      this._Config[3] * key[0] + this._Config[0] * key[1] - this._Config[1] * key[2] + this._Config[5],
      -this._Config[2] * key[0] + this._Config[1] * key[1] + this._Config[0] * key[2] + this._Config[6]
    };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private double[] DisableConsumer(double[] first) => new double[3]
    {
      this._Config[0] * first[0] + this._Config[3] * first[1] - this._Config[2] * first[2] - this._Config[4],
      -this._Config[3] * first[0] + this._Config[0] * first[1] + this._Config[1] * first[2] - this._Config[5],
      this._Config[2] * first[0] - this._Config[1] * first[1] + this._Config[0] * first[2] - this._Config[6]
    };

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] DisableConfiguration(double[] instance)
    {
      int num1 = 4;
      double[] numArray;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_7;
            case 1:
              if (!flag)
              {
                numArray = this.DisableConsumer(instance);
                int num3 = 5;
                num2 = Queue.CountDescriptor() ? num3 : num3;
                continue;
              }
              goto label_5;
            case 2:
            case 3:
              goto label_5;
            case 5:
              goto label_8;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 3;
        continue;
label_7:
        flag = !this._Schema;
        num1 = 1;
      }
label_5:
      numArray = this.OrderConsumer(instance);
label_8:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override List<double[]> SearchConfiguration(List<double[]> instance)
    {
      List<double[]> numArrayList = new List<double[]>(instance.Count);
      foreach (double[] v in instance)
        numArrayList.Add(this.DisableConfiguration(v));
      return numArrayList;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void ValidateConfiguration() => this._Schema = !this._Schema;

    internal static bool UpdateDescriptor() => true;

    internal static bool CountDescriptor() => false;
  }
}
