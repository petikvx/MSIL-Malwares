// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.ICatalog2
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System.Runtime.InteropServices;
using System.Security;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  [Guid("790C6E0B-9194-4cc9-9426-A48A63185696")]
  [SuppressUnmanagedCodeSecurity]
  [InterfaceType(ComInterfaceType.InterfaceIsDual)]
  [ComImport]
  internal interface ICatalog2
  {
    [DispId(1)]
    [return: MarshalAs(UnmanagedType.Interface)]
    object GetCollection([MarshalAs(UnmanagedType.BStr), In] string bstrCollName);

    [DispId(2)]
    [return: MarshalAs(UnmanagedType.Interface)]
    object Connect([MarshalAs(UnmanagedType.BStr), In] string connectStr);

    [DispId(3)]
    int MajorVersion();

    [DispId(4)]
    int MinorVersion();

    [DispId(5)]
    [return: MarshalAs(UnmanagedType.Interface)]
    object GetCollectionByQuery([MarshalAs(UnmanagedType.BStr), In] string collName, [MarshalAs(UnmanagedType.SafeArray), In] ref object[] aQuery);

    [DispId(6)]
    void ImportComponent([MarshalAs(UnmanagedType.BStr), In] string bstrApplIdOrName, [MarshalAs(UnmanagedType.BStr), In] string bstrCLSIDOrProgId);

    [DispId(7)]
    void InstallComponent(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplIdOrName,
      [MarshalAs(UnmanagedType.BStr), In] string bstrDLL,
      [MarshalAs(UnmanagedType.BStr), In] string bstrTLB,
      [MarshalAs(UnmanagedType.BStr), In] string bstrPSDLL);

    [DispId(8)]
    void ShutdownApplication([MarshalAs(UnmanagedType.BStr), In] string bstrApplIdOrName);

    [DispId(9)]
    void ExportApplication([MarshalAs(UnmanagedType.BStr), In] string bstrApplIdOrName, [MarshalAs(UnmanagedType.BStr), In] string bstrApplicationFile, [In] int lOptions);

    [DispId(10)]
    void InstallApplication(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplicationFile,
      [MarshalAs(UnmanagedType.BStr), In] string bstrDestinationDirectory,
      [In] int lOptions,
      [MarshalAs(UnmanagedType.BStr), In] string bstrUserId,
      [MarshalAs(UnmanagedType.BStr), In] string bstrPassword,
      [MarshalAs(UnmanagedType.BStr), In] string bstrRSN);

    [DispId(11)]
    void StopRouter();

    [DispId(12)]
    void RefreshRouter();

    [DispId(13)]
    void StartRouter();

    [DispId(14)]
    void Reserved1();

    [DispId(15)]
    void Reserved2();

    [DispId(16)]
    void InstallMultipleComponents(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplIdOrName,
      [MarshalAs(UnmanagedType.SafeArray, SafeArraySubType = VarEnum.VT_VARIANT), In] ref object[] fileNames,
      [MarshalAs(UnmanagedType.SafeArray, SafeArraySubType = VarEnum.VT_VARIANT), In] ref object[] CLSIDS);

    [DispId(17)]
    void GetMultipleComponentsInfo(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplIdOrName,
      [In] object varFileNames,
      [MarshalAs(UnmanagedType.SafeArray)] out object[] varCLSIDS,
      [MarshalAs(UnmanagedType.SafeArray)] out object[] varClassNames,
      [MarshalAs(UnmanagedType.SafeArray)] out object[] varFileFlags,
      [MarshalAs(UnmanagedType.SafeArray)] out object[] varComponentFlags);

    [DispId(18)]
    void RefreshComponents();

    [DispId(19)]
    void BackupREGDB([MarshalAs(UnmanagedType.BStr), In] string bstrBackupFilePath);

    [DispId(20)]
    void RestoreREGDB([MarshalAs(UnmanagedType.BStr), In] string bstrBackupFilePath);

    [DispId(21)]
    void QueryApplicationFile(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplicationFile,
      [MarshalAs(UnmanagedType.BStr)] out string bstrApplicationName,
      [MarshalAs(UnmanagedType.BStr)] out string bstrApplicationDescription,
      [MarshalAs(UnmanagedType.VariantBool)] out bool bHasUsers,
      [MarshalAs(UnmanagedType.VariantBool)] out bool bIsProxy,
      [MarshalAs(UnmanagedType.SafeArray)] out object[] varFileNames);

    [DispId(22)]
    void StartApplication([MarshalAs(UnmanagedType.BStr), In] string bstrApplIdOrName);

    [DispId(23)]
    int ServiceCheck([In] int lService);

    [DispId(24)]
    void InstallMultipleEventClasses(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplIdOrName,
      [MarshalAs(UnmanagedType.SafeArray, SafeArraySubType = VarEnum.VT_VARIANT), In] ref object[] fileNames,
      [MarshalAs(UnmanagedType.SafeArray, SafeArraySubType = VarEnum.VT_VARIANT), In] ref object[] CLSIDS);

    [DispId(25)]
    void InstallEventClass(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplIdOrName,
      [MarshalAs(UnmanagedType.BStr), In] string bstrDLL,
      [MarshalAs(UnmanagedType.BStr), In] string bstrTLB,
      [MarshalAs(UnmanagedType.BStr), In] string bstrPSDLL);

    [DispId(26)]
    void GetEventClassesForIID(
      [In] string bstrIID,
      [MarshalAs(UnmanagedType.SafeArray), In, Out] ref object[] varCLSIDS,
      [MarshalAs(UnmanagedType.SafeArray), In, Out] ref object[] varProgIDs,
      [MarshalAs(UnmanagedType.SafeArray), In, Out] ref object[] varDescriptions);

    [DispId(27)]
    [return: MarshalAs(UnmanagedType.Interface)]
    object GetCollectionByQuery2([MarshalAs(UnmanagedType.BStr), In] string bstrCollectionName, [MarshalAs(UnmanagedType.LPStruct), In] object pVarQueryStrings);

    [DispId(28)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string GetApplicationInstanceIDFromProcessID([MarshalAs(UnmanagedType.I4), In] int lProcessID);

    [DispId(29)]
    void ShutdownApplicationInstances([MarshalAs(UnmanagedType.LPStruct), In] object pVarApplicationInstanceID);

    [DispId(30)]
    void PauseApplicationInstances([MarshalAs(UnmanagedType.LPStruct), In] object pVarApplicationInstanceID);

    [DispId(31)]
    void ResumeApplicationInstances([MarshalAs(UnmanagedType.LPStruct), In] object pVarApplicationInstanceID);

    [DispId(32)]
    void RecycleApplicationInstances([MarshalAs(UnmanagedType.LPStruct), In] object pVarApplicationInstanceID, [MarshalAs(UnmanagedType.I4), In] int lReasonCode);

    [DispId(33)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool AreApplicationInstancesPaused([MarshalAs(UnmanagedType.LPStruct), In] object pVarApplicationInstanceID);

    [DispId(34)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string DumpApplicationInstance(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplicationInstanceID,
      [MarshalAs(UnmanagedType.BStr), In] string bstrDirectory,
      [MarshalAs(UnmanagedType.I4), In] int lMaxImages);

    [DispId(35)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool IsApplicationInstanceDumpSupported();

    [DispId(36)]
    void CreateServiceForApplication(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplicationIDOrName,
      [MarshalAs(UnmanagedType.BStr), In] string bstrServiceName,
      [MarshalAs(UnmanagedType.BStr), In] string bstrStartType,
      [MarshalAs(UnmanagedType.BStr), In] string bstrErrorControl,
      [MarshalAs(UnmanagedType.BStr), In] string bstrDependencies,
      [MarshalAs(UnmanagedType.BStr), In] string bstrRunAs,
      [MarshalAs(UnmanagedType.BStr), In] string bstrPassword,
      [MarshalAs(UnmanagedType.VariantBool), In] bool bDesktopOk);

    [DispId(37)]
    void DeleteServiceForApplication([MarshalAs(UnmanagedType.BStr), In] string bstrApplicationIDOrName);

    [DispId(38)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string GetPartitionID([MarshalAs(UnmanagedType.BStr), In] string bstrApplicationIDOrName);

    [DispId(39)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string GetPartitionName([MarshalAs(UnmanagedType.BStr), In] string bstrApplicationIDOrName);

    [DispId(40)]
    void CurrentPartition([MarshalAs(UnmanagedType.BStr), In] string bstrPartitionIDOrName);

    [DispId(41)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string CurrentPartitionID();

    [DispId(42)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string CurrentPartitionName();

    [DispId(43)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string GlobalPartitionID();

    [DispId(44)]
    void FlushPartitionCache();

    [DispId(45)]
    void CopyApplications(
      [MarshalAs(UnmanagedType.BStr), In] string bstrSourcePartitionIDOrName,
      [MarshalAs(UnmanagedType.LPStruct), In] object pVarApplicationID,
      [MarshalAs(UnmanagedType.BStr), In] string bstrDestinationPartitionIDOrName);

    [DispId(46)]
    void CopyComponents(
      [MarshalAs(UnmanagedType.BStr), In] string bstrSourceApplicationIDOrName,
      [MarshalAs(UnmanagedType.LPStruct), In] object pVarCLSIDOrProgID,
      [MarshalAs(UnmanagedType.BStr), In] string bstrDestinationApplicationIDOrName);

    [DispId(47)]
    void MoveComponents(
      [MarshalAs(UnmanagedType.BStr), In] string bstrSourceApplicationIDOrName,
      [MarshalAs(UnmanagedType.LPStruct), In] object pVarCLSIDOrProgID,
      [MarshalAs(UnmanagedType.BStr), In] string bstrDestinationApplicationIDOrName);

    [DispId(48)]
    void AliasComponent(
      [MarshalAs(UnmanagedType.BStr), In] string bstrSrcApplicationIDOrName,
      [MarshalAs(UnmanagedType.BStr), In] string bstrCLSIDOrProgID,
      [MarshalAs(UnmanagedType.BStr), In] string bstrDestApplicationIDOrName,
      [MarshalAs(UnmanagedType.BStr), In] string bstrNewProgId,
      [MarshalAs(UnmanagedType.BStr), In] string bstrNewClsid);

    [DispId(49)]
    [return: MarshalAs(UnmanagedType.Interface)]
    object IsSafeToDelete([MarshalAs(UnmanagedType.BStr), In] string bstrDllName);

    [DispId(50)]
    void ImportUnconfiguredComponents(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplicationIDOrName,
      [MarshalAs(UnmanagedType.LPStruct), In] object pVarCLSIDOrProgID,
      [MarshalAs(UnmanagedType.LPStruct), In] object pVarComponentType);

    [DispId(51)]
    void PromoteUnconfiguredComponents(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplicationIDOrName,
      [MarshalAs(UnmanagedType.LPStruct), In] object pVarCLSIDOrProgID,
      [MarshalAs(UnmanagedType.LPStruct), In] object pVarComponentType);

    [DispId(52)]
    void ImportComponents(
      [MarshalAs(UnmanagedType.BStr), In] string bstrApplicationIDOrName,
      [MarshalAs(UnmanagedType.LPStruct), In] object pVarCLSIDOrProgID,
      [MarshalAs(UnmanagedType.LPStruct), In] object pVarComponentType);

    [DispId(53)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool Is64BitCatalogServer();

    [DispId(54)]
    void ExportPartition([MarshalAs(UnmanagedType.BStr), In] string bstrPartitionIDOrName, [MarshalAs(UnmanagedType.BStr), In] string bstrPartitionFileName, [MarshalAs(UnmanagedType.I4), In] int lOptions);

    [DispId(55)]
    void InstallPartition(
      [MarshalAs(UnmanagedType.BStr), In] string bstrFileName,
      [MarshalAs(UnmanagedType.BStr), In] string bstrDestDirectory,
      [MarshalAs(UnmanagedType.I4), In] int lOptions,
      [MarshalAs(UnmanagedType.BStr), In] string bstrUserID,
      [MarshalAs(UnmanagedType.BStr), In] string bstrPassword,
      [MarshalAs(UnmanagedType.BStr), In] string bstrRSN);

    [DispId(56)]
    [return: MarshalAs(UnmanagedType.IDispatch)]
    object QueryApplicationFile2([MarshalAs(UnmanagedType.BStr), In] string bstrApplicationFile);

    [DispId(57)]
    [return: MarshalAs(UnmanagedType.I4)]
    int GetComponentVersionCount([MarshalAs(UnmanagedType.BStr), In] string bstrCLSIDOrProgID);
  }
}
