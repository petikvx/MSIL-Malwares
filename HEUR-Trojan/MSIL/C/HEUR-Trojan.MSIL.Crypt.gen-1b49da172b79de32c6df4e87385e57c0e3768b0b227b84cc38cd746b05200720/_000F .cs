// Decompiled with JetBrains decompiler
// Type:  
// Assembly: CustomQueryInterfaceResult, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C313905-EBD1-4523-EACC-B48B0BED3910
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Crypt.gen-1b49da172b79de32c6df4e87385e57c0e3768b0b227b84cc38cd746b05200720.exe

using System;

public sealed class \u000F\u2001
{
  public static bool[] \u0002() => new bool[checked (Console.WindowWidth * Console.WindowHeight + 1)];

  public static bool[] \u0003()
  {
    int windowWidth = Console.WindowWidth;
    int windowHeight = Console.WindowHeight;
    bool[] flagArray = new bool[checked (windowWidth * windowHeight - 1 + 1)];
    int num1 = checked ((int) Math.Round(unchecked ((double) windowWidth / 12.0)));
    int num2 = checked ((int) Math.Round(unchecked ((double) windowHeight / 12.0)));
    int num3 = checked ((int) Math.Round(unchecked ((double) windowWidth / 8.0)));
    int num4 = checked ((int) Math.Round(unchecked ((double) windowHeight / 8.0)));
    \u000F\u2001.\u0003(flagArray, true, num1, num2, num3, num4);
    \u000F\u2001.\u0003(flagArray, true, checked (windowWidth - num3 - num1), num2, num3, num4);
    \u000F\u2001.\u0003(flagArray, true, num1, checked (windowHeight - num4 - num2 - 1), num3, num4);
    \u000F\u2001.\u0003(flagArray, true, checked (windowWidth - num3 - num1), checked (windowHeight - num4 - num2 - 1), num3, num4);
    return flagArray;
  }

  public static bool[] \u0005()
  {
    int windowWidth = Console.WindowWidth;
    int windowHeight = Console.WindowHeight;
    bool[] flagArray = new bool[checked (windowWidth * windowHeight - 1 + 1)];
    int num1 = checked ((int) Math.Round(unchecked ((double) windowWidth / 5.0)));
    int num2 = checked ((int) Math.Round(unchecked ((double) windowHeight / 5.0)));
    \u000F\u2001.\u0002(flagArray, true, num1, num2, checked (num1 * 2), num2);
    \u000F\u2001.\u0002(flagArray, true, num1, num2, num1, checked (num2 * 2));
    \u000F\u2001.\u0002(flagArray, true, checked (num1 * 2), num2, checked (num1 * 2), checked (num2 * 2));
    \u000F\u2001.\u0002(flagArray, true, checked (windowWidth - num1), num2, checked (windowWidth - num1 * 2), num2);
    \u000F\u2001.\u0002(flagArray, true, checked (windowWidth - num1), num2, checked (windowWidth - num1), checked (num2 * 2));
    \u000F\u2001.\u0002(flagArray, true, checked (windowWidth - num1 * 2), num2, checked (windowWidth - num1 * 2), checked (num2 * 2));
    \u000F\u2001.\u0002(flagArray, true, num1, checked (windowHeight - num2), checked (num1 * 2), checked (windowHeight - num2));
    \u000F\u2001.\u0002(flagArray, true, num1, checked (windowHeight - num2), num1, checked (windowHeight - num2 * 2));
    \u000F\u2001.\u0002(flagArray, true, checked (num1 * 2), checked (windowHeight - num2), checked (num1 * 2), checked (windowHeight - num2 * 2));
    \u000F\u2001.\u0002(flagArray, true, checked (windowWidth - num1), checked (windowHeight - num2), checked (windowWidth - num1 * 2), checked (windowHeight - num2));
    \u000F\u2001.\u0002(flagArray, true, checked (windowWidth - num1), checked (windowHeight - num2), checked (windowWidth - num1), checked (windowHeight - num2 * 2));
    \u000F\u2001.\u0002(flagArray, true, checked (windowWidth - num1 * 2), checked (windowHeight - num2), checked (windowWidth - num1 * 2), checked (windowHeight - num2 * 2));
    return flagArray;
  }

  public static bool[] \u0008()
  {
    int windowWidth = Console.WindowWidth;
    int windowHeight = Console.WindowHeight;
    bool[] flagArray = \u000F\u2001.\u0005();
    int num1 = checked ((int) Math.Round(unchecked ((double) windowWidth / 5.0)));
    int num2 = checked ((int) Math.Round(unchecked ((double) windowHeight / 5.0)));
    \u000F\u2001.\u0002(flagArray, true, checked ((int) Math.Round(unchecked ((double) num1 + (double) num1 / 2.0))), checked (num2 - 1), checked ((int) Math.Round(unchecked ((double) num1 + (double) num1 / 2.0))), checked (windowHeight - num2 + 1));
    \u000F\u2001.\u0002(flagArray, true, checked ((int) Math.Round(unchecked ((double) checked (windowWidth - num1) - (double) num1 / 2.0))), checked (num2 - 1), checked ((int) Math.Round(unchecked ((double) checked (windowWidth - num1) - (double) num1 / 2.0))), checked (windowHeight - num2 + 1));
    return flagArray;
  }

  public static bool[] \u0006()
  {
    int windowWidth = Console.WindowWidth;
    int windowHeight = Console.WindowHeight;
    bool[] flagArray = new bool[checked (windowWidth * windowHeight - 1 + 1)];
    new bool[9]
    {
      false,
      true,
      false,
      true,
      true,
      true,
      false,
      true,
      false
    };
    int num1 = checked (windowHeight - 6);
    int num2 = 6;
    while (num2 <= num1)
    {
      if ((double) num2 < (double) windowHeight / 2.0 - 1.0 || (double) num2 > (double) windowHeight / 2.0 + 1.0)
      {
        int num3 = checked (windowWidth - 6);
        int num4 = 6;
        while (num4 <= num3)
        {
          \u000F\u2001.\u0002(flagArray, true, checked (num4 - 1), num2, checked (num4 + 1), num2);
          \u000F\u2001.\u0002(flagArray, true, num4, checked (num2 - 1), num4, checked (num2 + 1));
          checked { num4 += 12; }
        }
      }
      checked { num2 += 12; }
    }
    return flagArray;
  }

  private static void \u0002(bool[] _param0, bool _param1, int _param2, int _param3) => _param0[checked (_param3 * Console.WindowWidth + _param2)] = _param1;

  private static void \u0002(
    bool[] _param0,
    bool _param1,
    int _param2,
    int _param3,
    int _param4,
    int _param5)
  {
    int x = checked (_param4 - _param2);
    int y = checked (_param5 - _param3);
    int num1 = checked ((int) Math.Round(Math.Sqrt(unchecked ((double) checked (x * x + y * y)))));
    double a = Math.Atan2((double) y, (double) x);
    int num2 = num1;
    int num3 = 0;
    while (num3 <= num2)
    {
      \u000F\u2001.\u0002(_param0, _param1, checked ((int) Math.Round(unchecked ((double) _param2 + (double) num3 * Math.Cos(-a)))), checked ((int) Math.Round(unchecked ((double) _param3 + (double) num3 * Math.Sin(a)))));
      checked { ++num3; }
    }
  }

  private static void \u0003(
    bool[] _param0,
    bool _param1,
    int _param2,
    int _param3,
    int _param4,
    int _param5)
  {
    int num1 = _param3;
    int num2 = checked (_param3 + _param5);
    int num3 = num1;
    while (num3 <= num2)
    {
      \u000F\u2001.\u0002(_param0, _param1, _param2, num3, checked (_param2 + _param4), num3);
      checked { ++num3; }
    }
  }
}
