// Decompiled with JetBrains decompiler
// Type: ServerContextTerminatorSink.c
// Assembly: RegistrySecurity, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CE443B41-988D-4319-9971-B451F2F12365
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\UDS-DangerousObject.Multi.Generic-48aa8fd75e2be7fad2e1df3d81dc1653380a546611a53afbf6092ec9c104c324.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ServerContextTerminatorSink
{
  [DesignerGenerated]
  public class c : Form
  {
    private IContainer components;
    private List<CheckBox> Cheks;
    private string EmptyText;

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.TableLayoutPanel1 = new TableLayoutPanel();
      this.OK_Button = new Button();
      this.Cancel_Button = new Button();
      this.chk9 = new CheckBox();
      this.chk5 = new CheckBox();
      this.chk8 = new CheckBox();
      this.chk4 = new CheckBox();
      this.chk3 = new CheckBox();
      this.chk2 = new CheckBox();
      this.chk1 = new CheckBox();
      this.TableLayoutPanel1.SuspendLayout();
      this.SuspendLayout();
      this.TableLayoutPanel1.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.TableLayoutPanel1.ColumnCount = 2;
      this.TableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.TableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.TableLayoutPanel1.Controls.Add((Control) this.OK_Button, 0, 0);
      this.TableLayoutPanel1.Controls.Add((Control) this.Cancel_Button, 1, 0);
      this.TableLayoutPanel1.Location = new Point(2, 98);
      this.TableLayoutPanel1.Name = "TableLayoutPanel1";
      this.TableLayoutPanel1.RowCount = 1;
      this.TableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 50f));
      this.TableLayoutPanel1.Size = new Size(137, 29);
      this.TableLayoutPanel1.TabIndex = 0;
      this.OK_Button.Anchor = AnchorStyles.None;
      this.OK_Button.Location = new Point(9, 3);
      this.OK_Button.Name = "OK_Button";
      this.OK_Button.Size = new Size(50, 23);
      this.OK_Button.TabIndex = 0;
      this.OK_Button.Text = "OK";
      this.Cancel_Button.Anchor = AnchorStyles.None;
      this.Cancel_Button.DialogResult = DialogResult.Cancel;
      this.Cancel_Button.Location = new Point(77, 3);
      this.Cancel_Button.Name = "Cancel_Button";
      this.Cancel_Button.Size = new Size(50, 23);
      this.Cancel_Button.TabIndex = 1;
      this.Cancel_Button.Text = "Cancel";
      this.chk9.AutoSize = true;
      this.chk9.Location = new Point(67, 71);
      this.chk9.Name = "chk9";
      this.chk9.Size = new Size(62, 17);
      this.chk9.TabIndex = 11;
      this.chk9.Text = "viimane";
      this.chk9.UseVisualStyleBackColor = true;
      this.chk5.AutoSize = true;
      this.chk5.Location = new Point(67, 2);
      this.chk5.Name = "chk5";
      this.chk5.Size = new Size(38, 17);
      this.chk5.TabIndex = 10;
      this.chk5.Text = "5+";
      this.chk5.UseVisualStyleBackColor = true;
      this.chk8.AutoSize = true;
      this.chk8.Location = new Point(67, 48);
      this.chk8.Name = "chk8";
      this.chk8.Size = new Size(76, 17);
      this.chk8.TabIndex = 9;
      this.chk8.Text = "eelviimane";
      this.chk8.UseVisualStyleBackColor = true;
      this.chk4.AutoSize = true;
      this.chk4.Location = new Point(16, 71);
      this.chk4.Name = "chk4";
      this.chk4.Size = new Size(35, 17);
      this.chk4.TabIndex = 8;
      this.chk4.Text = "4.";
      this.chk4.UseVisualStyleBackColor = true;
      this.chk3.AutoSize = true;
      this.chk3.Location = new Point(16, 48);
      this.chk3.Name = "chk3";
      this.chk3.Size = new Size(35, 17);
      this.chk3.TabIndex = 7;
      this.chk3.Text = "3.";
      this.chk3.UseVisualStyleBackColor = true;
      this.chk2.AutoSize = true;
      this.chk2.Location = new Point(16, 25);
      this.chk2.Name = "chk2";
      this.chk2.Size = new Size(35, 17);
      this.chk2.TabIndex = 6;
      this.chk2.Text = "2.";
      this.chk2.UseVisualStyleBackColor = true;
      this.chk1.AutoSize = true;
      this.chk1.Location = new Point(16, 2);
      this.chk1.Name = "chk1";
      this.chk1.Size = new Size(35, 17);
      this.chk1.TabIndex = 5;
      this.chk1.Text = "1.";
      this.chk1.UseVisualStyleBackColor = true;
      this.AcceptButton = (IButtonControl) this.OK_Button;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.Cancel_Button;
      this.ClientSize = new Size(142, 139);
      this.Controls.Add((Control) this.chk9);
      this.Controls.Add((Control) this.chk4);
      this.Controls.Add((Control) this.chk8);
      this.Controls.Add((Control) this.chk5);
      this.Controls.Add((Control) this.TableLayoutPanel1);
      this.Controls.Add((Control) this.chk3);
      this.Controls.Add((Control) this.chk1);
      this.Controls.Add((Control) this.chk2);
      this.FormBorderStyle = FormBorderStyle.FixedDialog;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = "Dialog3";
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Saate osad";
      this.TableLayoutPanel1.ResumeLayout(false);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [field: AccessedThroughProperty("TableLayoutPanel1")]
    internal virtual TableLayoutPanel TableLayoutPanel1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button OK_Button
    {
      get => this._OK_Button;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.OK_Button_Click);
        Button okButton1 = this._OK_Button;
        if (okButton1 != null)
          okButton1.Click -= eventHandler;
        this._OK_Button = value;
        Button okButton2 = this._OK_Button;
        if (okButton2 == null)
          return;
        okButton2.Click += eventHandler;
      }
    }

    internal virtual Button Cancel_Button
    {
      get => this._Cancel_Button;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Cancel_Button_Click);
        Button cancelButton1 = this._Cancel_Button;
        if (cancelButton1 != null)
          cancelButton1.Click -= eventHandler;
        this._Cancel_Button = value;
        Button cancelButton2 = this._Cancel_Button;
        if (cancelButton2 == null)
          return;
        cancelButton2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("chk9")]
    internal virtual CheckBox chk9 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chk5")]
    internal virtual CheckBox chk5 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chk8")]
    internal virtual CheckBox chk8 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chk4")]
    internal virtual CheckBox chk4 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chk3")]
    internal virtual CheckBox chk3 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chk2")]
    internal virtual CheckBox chk2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chk1")]
    internal virtual CheckBox chk1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public c()
    {
      this.Cheks = new List<CheckBox>();
      this.EmptyText = "alati";
      this.InitializeComponent();
      this.Cheks.Add(this.chk1);
      this.Cheks.Add(this.chk2);
      this.Cheks.Add(this.chk3);
      this.Cheks.Add(this.chk4);
      this.Cheks.Add(this.chk5);
      this.Cheks.Add(this.chk8);
      this.Cheks.Add(this.chk9);
    }

    private void OK_Button_Click(object sender, EventArgs e)
    {
      this.DialogResult = DialogResult.OK;
      this.Close();
    }

    private void Cancel_Button_Click(object sender, EventArgs e)
    {
      this.DialogResult = DialogResult.Cancel;
      this.Close();
    }

    internal bool InitialValue(string[] slots, int @base, Button b)
    {
      if (((IEnumerable<string>) slots).Contains<string>(@base.ToString()))
      {
        b.Text = this.EmptyText;
        return true;
      }
      List<string> values = new List<string>();
      int slot = 1;
      do
      {
        if (((IEnumerable<string>) slots).Contains<string>(this.SlotValue(@base, slot)))
          values.Add(slot.ToString() + ".");
        checked { ++slot; }
      }
      while (slot <= 4);
      if (((IEnumerable<string>) slots).Contains<string>(this.SlotValue(@base, 5)))
        values.Add("5+");
      if (((IEnumerable<string>) slots).Contains<string>(this.SlotValue(@base, 8)))
        values.Add("-2");
      if (((IEnumerable<string>) slots).Contains<string>(this.SlotValue(@base, 9)))
        values.Add("-1");
      if (values.Count == 0)
      {
        b.Text = this.EmptyText;
        return false;
      }
      b.Text = string.Join(" ", (IEnumerable<string>) values);
      return true;
    }

    internal void Init(string setup)
    {
      try
      {
        foreach (CheckBox chek in this.Cheks)
          chek.Checked = false;
      }
      finally
      {
        List<CheckBox>.Enumerator enumerator;
        enumerator.Dispose();
      }
      if (Operators.CompareString(setup, this.EmptyText, false) == 0 || string.IsNullOrWhiteSpace(setup))
        return;
      string[] strArray = setup.Split(' ');
      int index = 0;
      while (index < strArray.Length)
      {
        string str = strArray[index];
        // ISSUE: reference to a compiler-generated method
        switch (ChannelServicesData.IWellKnownStringEqualityComparer.ComputeStringHash(str))
        {
          case 348981803:
            if (Operators.CompareString(str, "-1", false) == 0)
            {
              this.chk9.Checked = true;
              break;
            }
            break;
          case 365759422:
            if (Operators.CompareString(str, "-2", false) == 0)
            {
              this.chk8.Checked = true;
              break;
            }
            break;
          case 569062326:
            if (Operators.CompareString(str, "1.", false) == 0)
            {
              this.chk1.Checked = true;
              break;
            }
            break;
          case 2180007940:
            if (Operators.CompareString(str, "3.", false) == 0)
            {
              this.chk3.Checked = true;
              break;
            }
            break;
          case 2212724535:
            if (Operators.CompareString(str, "4.", false) == 0)
            {
              this.chk4.Checked = true;
              break;
            }
            break;
          case 2665573153:
            if (Operators.CompareString(str, "5+", false) == 0)
            {
              this.chk5.Checked = true;
              break;
            }
            break;
          case 2750594081:
            if (Operators.CompareString(str, "2.", false) == 0)
            {
              this.chk2.Checked = true;
              break;
            }
            break;
        }
        checked { ++index; }
      }
    }

    internal string Value()
    {
      List<string> values = new List<string>();
      try
      {
        foreach (CheckBox chek in this.Cheks)
        {
          if (chek.Checked)
          {
            string text = chek.Text;
            if (Operators.CompareString(text, "viimane", false) != 0)
            {
              if (Operators.CompareString(text, "eelviimane", false) == 0)
                values.Add("-2");
              else
                values.Add(chek.Text);
            }
            else
              values.Add("-1");
          }
        }
      }
      finally
      {
        List<CheckBox>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return values.Count == 0 ? this.EmptyText : string.Join(" ", (IEnumerable<string>) values);
    }

    internal void ValueSlots(int @base, string state, List<string> values)
    {
      if (Operators.CompareString(state, this.EmptyText, false) == 0 || string.IsNullOrWhiteSpace(state))
      {
        values.Add(@base.ToString());
      }
      else
      {
        string[] strArray = state.Split(' ');
        int index = 0;
        while (index < strArray.Length)
        {
          string str = strArray[index];
          // ISSUE: reference to a compiler-generated method
          switch (ChannelServicesData.IWellKnownStringEqualityComparer.ComputeStringHash(str))
          {
            case 348981803:
              if (Operators.CompareString(str, "-1", false) == 0)
              {
                values.Add(this.SlotValue(@base, 9));
                break;
              }
              break;
            case 365759422:
              if (Operators.CompareString(str, "-2", false) == 0)
              {
                values.Add(this.SlotValue(@base, 8));
                break;
              }
              break;
            case 569062326:
              if (Operators.CompareString(str, "1.", false) == 0)
              {
                values.Add(this.SlotValue(@base, 1));
                break;
              }
              break;
            case 2180007940:
              if (Operators.CompareString(str, "3.", false) == 0)
              {
                values.Add(this.SlotValue(@base, 3));
                break;
              }
              break;
            case 2212724535:
              if (Operators.CompareString(str, "4.", false) == 0)
              {
                values.Add(this.SlotValue(@base, 4));
                break;
              }
              break;
            case 2665573153:
              if (Operators.CompareString(str, "5+", false) == 0)
              {
                values.Add(this.SlotValue(@base, 5));
                break;
              }
              break;
            case 2750594081:
              if (Operators.CompareString(str, "2.", false) == 0)
              {
                values.Add(this.SlotValue(@base, 2));
                break;
              }
              break;
          }
          checked { ++index; }
        }
      }
    }

    private string SlotValue(int @base, int slot) => checked (10 * @base + slot).ToString();
  }
}
