// Decompiled with JetBrains decompiler
// Type: mmxAH.TextWorker
// Assembly: IAsyncLocalValue, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 5C4F3FBF-C751-4B18-BBEA-B1DDBC6F76B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqk-374874898c5386561d60c3fae0482d1caee783f1096dda6742b1c073175a0a14.exe

namespace mmxAH
{
  public class TextWorker
  {
    private GameEngine en;
    private const byte special_card_count = 5;

    public TextWorker(GameEngine eng) => this.en = eng;

    public bool TextInit(string DataFileName, string LangFileName)
    {
      TextFileParser textFileParser1 = new TextFileParser(DataFileName);
      TextFileParser textFileParser2 = new TextFileParser(LangFileName);
      if (!textFileParser1.Open() || !textFileParser2.Open())
        return false;
      if (textFileParser2.GetCurString().Trim().ToUpper() == "MULTINAME")
        textFileParser2.isMultiName = true;
      this.en.sysstr.FromTextFile(textFileParser2);
      if (!this.en.ds.FromText(textFileParser1, textFileParser2) || !this.en.colors.FromText(textFileParser1, textFileParser2) || !this.en.LimitsFromText(textFileParser1))
        return false;
      this.en.locs.Add((Locathion) new Litas(this.en));
      int result;
      if (!this.en.ows.FromText(textFileParser1, textFileParser2) || !int.TryParse(textFileParser1.GetToken(), out result))
        return false;
      GatePrototype c1 = new GatePrototype(this.en);
      for (int index = 0; index < result; ++index)
      {
        if (!c1.FromText(textFileParser1))
          return false;
        this.en.gates.Add(c1);
        c1 = new GatePrototype(this.en);
      }
      this.en.map = new MapOfCity(this.en);
      if (!this.en.map.FromText(textFileParser1, textFileParser2))
        return false;
      for (int index = 0; index < 5; ++index)
        this.en.scTexts.Add(new SpecialCardText().FromText(textFileParser2));
      if (!this.en.InvestigatorsFromText(textFileParser1, textFileParser2) || !int.TryParse(textFileParser1.GetToken(), out result))
        return false;
      for (int index = 0; index < result; ++index)
      {
        MonsterPrototype monsterPrototype = new MonsterPrototype(this.en);
        if (!monsterPrototype.FromTextFile(textFileParser1, textFileParser2))
          return false;
        this.en.MonsterPrototypes.Add(monsterPrototype);
      }
      if (!int.TryParse(textFileParser1.GetToken(), out result))
        return false;
      this.en.archEncs = new Deck<ArcEncCard>[result];
      for (int index = 0; index < result; ++index)
      {
        this.en.archEncs[index] = new Deck<ArcEncCard>(true);
        if (!this.LoadDistricktEncounters(textFileParser1, textFileParser2))
          return false;
      }
      if (!int.TryParse(textFileParser1.GetToken(), out result))
        return false;
      MythosCard c2 = (MythosCard) new MythosShuffleCard(this.en, (short) 0);
      c2.FromTextFile(textFileParser1, textFileParser2);
      this.en.mythosDeck.Add(c2);
      for (int pID = 1; pID < result + 1; ++pID)
      {
        string upper = textFileParser1.GetToken().ToUpper();
        MythosCard c3;
        if (!(upper == "HEAD"))
        {
          if (!(upper == "ENV"))
          {
            if (!(upper == "RUMOR"))
              return false;
            c3 = (MythosCard) new MythosRumor(this.en, (short) pID);
          }
          else
            c3 = (MythosCard) new MythosEnv(this.en, (short) pID);
        }
        else
          c3 = (MythosCard) new MythosHead(this.en, (short) pID);
        if (!c3.FromTextFile(textFileParser1, textFileParser2))
          return false;
        this.en.mythosDeck.Add(c3);
      }
      textFileParser1.Close();
      textFileParser2.Close();
      return true;
    }

    private bool LoadDistricktEncounters(TextFileParser data, TextFileParser text)
    {
      byte result1;
      if (!byte.TryParse(data.GetToken(), out result1) || (int) result1 >= this.en.archEncs.Length)
        return false;
      short numberByCodeName1 = this.en.map.GetNumberByCodeName(data.GetToken());
      short numberByCodeName2 = this.en.map.GetNumberByCodeName(data.GetToken());
      short numberByCodeName3 = this.en.map.GetNumberByCodeName(data.GetToken());
      byte result2;
      if (numberByCodeName1 == (short) -1 || numberByCodeName2 == (short) -1 || numberByCodeName3 == (short) -1 || !byte.TryParse(data.GetToken(), out result2))
        return false;
      for (byte pID = 0; (int) pID < (int) result2; ++pID)
      {
        ArcEncCard c = new ArcEncCard(this.en, (short) pID);
        if (!c.FromTextFile(data, text, numberByCodeName1, numberByCodeName2, numberByCodeName3, result1))
          return false;
        this.en.archEncs[(int) result1].Add(c);
      }
      return true;
    }
  }
}
