// Decompiled with JetBrains decompiler
// Type: Path_Finder.DataTypes.CityInfo
// Assembly: TypeDelega, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FEF18FA9-51E7-447C-8FC7-9441C6E3C0DE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4ea8f9cb5ff79d56b4e171e5c4f7a0869f06cf580c04b5dec7148db42dc9188b.exe

using Path_Finder.Source.Algorithms;

namespace Path_Finder.DataTypes
{
  public class CityInfo
  {
    private double fromStart;

    public City City { get; private set; }

    public City PrevCity { get; set; }

    public City FinalCity { get; private set; }

    public Coordinates CityCoordinates { get; private set; }

    public Coordinates PrevCityCoordinates { get; set; }

    public Coordinates FinalCityCoordinates { get; private set; }

    public double FromStart
    {
      get => this.fromStart;
      set
      {
        if (value < 0.0)
          return;
        this.fromStart = value;
        this.CalculatePathDist();
      }
    }

    public double ToEnd { get; private set; }

    public double PathDistance { get; private set; }

    public bool IsExplored { get; set; }

    public Heuristic usedHeuristic { get; private set; }

    public CityInfo()
    {
      this.City = (City) null;
      this.PrevCity = (City) null;
      this.FinalCity = (City) null;
      this.CityCoordinates = (Coordinates) null;
      this.PrevCityCoordinates = (Coordinates) null;
      this.FinalCityCoordinates = (Coordinates) null;
      this.FromStart = -1.0;
      this.ToEnd = -1.0;
      this.PathDistance = -1.0;
      this.IsExplored = false;
      this.usedHeuristic = Heuristic.Distance;
    }

    public CityInfo(
      City _city,
      City _prevCity,
      City _finalCity,
      Coordinates _cityCoordinates,
      Coordinates _prevCityCoordinates,
      Coordinates _finalCityCoordinates,
      double _fromStart,
      Heuristic _usedHeuristic)
    {
      this.City = _city;
      this.PrevCity = _prevCity;
      this.FinalCity = _finalCity;
      this.CityCoordinates = _cityCoordinates;
      this.PrevCityCoordinates = _prevCityCoordinates;
      this.FinalCityCoordinates = _finalCityCoordinates;
      this.FromStart = _fromStart;
      this.IsExplored = false;
      this.usedHeuristic = _usedHeuristic;
    }

    private void CalculateDistToEnd()
    {
      if (this.usedHeuristic == Heuristic.Distance)
      {
        this.ToEnd = Algorithm.FindDistance(this.CityCoordinates, this.FinalCityCoordinates);
      }
      else
      {
        if (this.usedHeuristic != Heuristic.Hops)
          return;
        this.ToEnd = 1.0;
      }
    }

    private void CalculatePathDist()
    {
      if (this.FromStart == -1.0)
        return;
      if (this.ToEnd == -1.0)
        this.CalculateDistToEnd();
      this.PathDistance = this.FromStart + this.ToEnd;
    }
  }
}
