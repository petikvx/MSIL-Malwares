// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.Utility
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Diagnostics;
using System.Net.Mime;
using System.Text;

namespace System.ServiceModel.Web
{
  internal static class Utility
  {
    public const string applicationXml = "application/xml";
    public const string textXml = "text/xml";
    public const string applicationJson = "application/json";
    public const string textJson = "text/json";
    public const string GET = "GET";

    public static bool IsXmlContent(this string contentType)
    {
      if (contentType == null)
        return true;
      string str = contentType.Trim();
      return str.StartsWith("application/xml", StringComparison.OrdinalIgnoreCase) || str.StartsWith("text/xml", StringComparison.OrdinalIgnoreCase);
    }

    public static bool IsJsonContent(this string contentType)
    {
      if (contentType == null)
        return true;
      string str = contentType.Trim();
      return str.StartsWith("application/json", StringComparison.OrdinalIgnoreCase) || str.StartsWith("text/json", StringComparison.OrdinalIgnoreCase);
    }

    public static string CombineUri(string former, string latter)
    {
      StringBuilder stringBuilder = new StringBuilder();
      if (former.Length > 0 && latter.Length > 0)
      {
        if (former[former.Length - 1] == '/' && latter[0] == '/')
        {
          stringBuilder.Append(former, 0, former.Length - 1);
          stringBuilder.Append(latter);
          return stringBuilder.ToString();
        }
        if (former[former.Length - 1] != '/' && latter[0] != '/')
        {
          stringBuilder.Append(former);
          stringBuilder.Append('/');
          stringBuilder.Append(latter);
          return stringBuilder.ToString();
        }
      }
      return former + latter;
    }

    public static List<string> QuoteAwareStringSplit(string str)
    {
      List<string> stringList = new List<string>();
      int offset = 0;
      while (true)
      {
        string str1 = Utility.QuoteAwareSubString(str, ref offset);
        if (str1 != null)
          stringList.Add(str1);
        else
          break;
      }
      return stringList;
    }

    public static string QuoteAwareSubString(string str, ref int offset)
    {
      if (string.IsNullOrEmpty(str) || offset >= str.Length)
        return (string) null;
      int num = offset > 0 ? offset : 0;
      while (char.IsWhiteSpace(str[num]) || str[num] == ',')
      {
        ++num;
        if (num >= str.Length)
          return (string) null;
      }
      int index = num;
      bool flag = false;
      for (; index < str.Length; ++index)
      {
        if (str[index] == '"' && (!flag || index == 0 || str[index - 1] != '\\'))
          flag = !flag;
        else if (str[index] == ',' && !flag)
          break;
      }
      offset = index + 1;
      while (char.IsWhiteSpace(str[index - 1]))
        --index;
      return str.Substring(num, index - num);
    }

    public static ContentType GetContentType(string contentType)
    {
      string contentType1 = contentType.Trim();
      return !string.IsNullOrEmpty(contentType1) ? Utility.GetContentTypeOrNull(contentType1) : (ContentType) null;
    }

    public static ContentType GetContentTypeOrNull(string contentType)
    {
      try
      {
        ContentType contentType1 = new ContentType(contentType);
        string[] strArray = contentType1.MediaType.Split('/');
        return strArray[0][0] == '*' && strArray[0].Length == 1 && (strArray[1][0] != '*' || strArray[1].Length != 1) ? (ContentType) null : contentType1;
      }
      catch (FormatException ex)
      {
        DiagnosticUtility.TraceHandledException((Exception) ex, TraceEventType.Warning);
      }
      return (ContentType) null;
    }

    public static string IEnumerableToCommaSeparatedString(IEnumerable<string> items) => string.Join(", ", items);

    public static void AddRange<T>(ICollection<T> list, IEnumerable<T> itemsToAdd)
    {
      foreach (T obj in itemsToAdd)
        list.Add(obj);
    }
  }
}
