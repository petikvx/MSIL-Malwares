// Decompiled with JetBrains decompiler
// Type: .
// Assembly: serLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EB10F7D0-661D-4A45-B90F-D464336E900E
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-6e30d9d30dc061aaa5d5a9b0ef5a7d10a511c47eeca2f7d551c865b912705901.exe

using \u0008;
using \u000F;
using System;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u000F
{
  internal sealed class \u0004
  {
    private static bool \u0001;
    private static \u0004.\u0002 \u0001;

    [DllImport("shell32", EntryPoint = "ExtractIconEx")]
    private static extern int \u0002([In] string obj0, [In] int obj1, [In] ref int obj2, [In] ref int obj3, [In] int obj4);

    [DllImport("user32", EntryPoint = "DrawText", CharSet = CharSet.Unicode)]
    private static extern int \u0002(
      [In] IntPtr obj0,
      [In] string obj1,
      [In] int obj2,
      [In] ref \u0004.\u0001 obj3,
      [In] int obj4);

    [DllImport("gdi32.dll", EntryPoint = "SelectObject")]
    private static extern IntPtr \u0002([In] IntPtr obj0, [In] IntPtr obj1);

    [DllImport("kernel32.Dll", EntryPoint = "GetVersionEx")]
    private static extern short \u0002([In] ref \u0004.\u0002 obj0);

    [DllImport("user32.dll", EntryPoint = "GetSystemMetrics")]
    private static extern int \u0002([In] int obj0);

    [DllImport("kernel32.dll", EntryPoint = "GetSystemInfo")]
    private static extern void \u0002([In] ref \u0004.\u0003 obj0);

    [SpecialName]
    private static \u0004.\u0002 \u0002()
    {
      if (!\u0004.\u0001)
      {
        \u0004.\u0001 = new \u0004.\u0002();
        try
        {
          \u0004.\u0001.\u0001 = Marshal.SizeOf(typeof (\u0004.\u0002));
          do
          {
            if (true)
            {
              int num = (int) \u0004.\u0002(ref \u0004.\u0001);
            }
            if (false)
              goto label_9;
          }
          while (false);
          \u0004.\u0001 = true;
        }
        catch
        {
        }
      }
label_9:
      return \u0004.\u0001;
    }

    [SpecialName]
    internal static bool \u0002()
    {
      bool flag;
      try
      {
        \u0004.\u0003 obj = new \u0004.\u0003();
        \u0004.\u0002(ref obj);
        int num1 = (int) obj.\u0001;
        int num2;
        do
        {
          num2 = 9;
          while (num2 != 0)
          {
            if (true)
            {
              int num3 = num1 == num2 ? 1 : 0;
              num2 = 0;
              num1 = num3;
              break;
            }
          }
        }
        while (num2 != 0);
        if (true)
          flag = num1 != 0;
      }
      catch
      {
        flag = false;
      }
      return flag;
    }

    [SpecialName]
    internal static bool \u0003()
    {
      bool flag;
      try
      {
        if (true)
        {
          int num1 = \u0004.\u0002(89) == 0 ? 1 : 0;
          int num2;
          while (true)
          {
            int num3 = 0;
            int num4;
            while (true)
            {
              num2 = num1 == num3 ? 1 : 0;
              num4 = 4;
              if (num4 == 0)
              {
                num3 = num4;
                num1 = num2;
              }
              else
                break;
            }
            if (num4 == 0)
              num1 = num2;
            else
              break;
          }
          flag = num2 != 0;
        }
      }
      catch
      {
        flag = false;
      }
      return flag;
    }

    [SpecialName]
    internal static bool \u0004() => \u0004.\u0002().\u0001 == (byte) 1;

    [SpecialName]
    internal static string \u0002() => \u0004.\u0002().\u0001;

    public static Icon \u0002()
    {
      try
      {
        return \u0004.\u0003();
      }
      catch (Exception ex)
      {
        return \u0005.\u0002(\u0001.\u0008.\u0002(5576));
      }
    }

    private static Icon \u0003()
    {
      int num1 = 0;
      int num2;
      if (num1 == 0)
      {
        if (true)
          goto label_7;
label_2:
        int num3;
        if (true)
          num3 = 0;
        int num4 = \u0004.\u0002(\u0084\u0005.\u008F\u0007(), -1, ref num3, ref num3, 1);
        int num5;
        if (true)
          num5 = num4;
        if (num5 > 0)
        {
          \u0004.\u0002(\u0084\u0005.\u008F\u0007(), 0, ref num2, ref num3, 1);
          num1 = num2;
          goto label_4;
        }
        else
          goto label_6;
label_7:
        num2 = num1;
        goto label_2;
      }
label_4:
      if (num1 != 0)
        return \u008E\u0006.\u009A\u000E(new IntPtr(num2));
label_6:
      return (Icon) null;
    }

    internal static int \u0002([In] Graphics obj0, [In] string obj1, [In] Font obj2, [In] int obj3)
    {
      int num;
      try
      {
        num = \u0004.\u0004(obj0, obj1, obj2, obj3);
        goto label_6;
      }
      catch (Exception ex1)
      {
        try
        {
          if (true)
          {
            num = \u0012\u0004.\u0005\u0003((double) \u0004.\u0003(obj0, obj1, obj2, obj3) * 1.1);
            goto label_6;
          }
          else
            goto label_6;
        }
        catch (Exception ex2)
        {
        }
      }
label_5:
      return 0;
label_6:
      if (true)
        return num;
      goto label_5;
    }

    private static int \u0003([In] Graphics obj0, [In] string obj1, [In] Font obj2, [In] int obj3)
    {
      Size size1 = Size.Ceiling(obj0.MeasureString(obj1, obj2, obj3));
      if (true)
        goto label_2;
label_1:
      Size size2;
      return size2.Height;
label_2:
      size2 = size1;
      goto label_1;
    }

    private static int \u0004([In] Graphics obj0, [In] string obj1, [In] Font obj2, [In] int obj3)
    {
      \u0004.\u0001 obj = new \u0004.\u0001(new Rectangle(0, 0, obj3, 10000));
      int num1 = 3088;
      int num2;
      while (true)
      {
        if (true)
          goto label_13;
label_3:
        IntPtr num3 = \u0092\u0005.\u007E\u0090\u000E((object) obj0);
        if (true)
          goto label_14;
label_4:
        IntPtr num4 = \u0092\u0005.\u007E\u0011\u000F((object) obj2);
        if (true)
          goto label_15;
label_5:
        IntPtr num5;
        IntPtr num6 = num5;
        IntPtr num7;
        IntPtr num8 = num7;
        int num9;
        while (true)
        {
          IntPtr num10 = \u0004.\u0002(num6, num8);
          if (true)
            goto label_16;
label_7:
          IntPtr num11;
          IntPtr num12;
          IntPtr num13;
          do
          {
            num12 = num5;
            if (true)
            {
              string str = obj1;
              ref \u0004.\u0001 local = ref obj;
              int num14 = num9;
              \u0004.\u0002(num12, str, -1, ref local, num14);
              num12 = num5;
            }
            num13 = num11;
            if (true)
              \u0004.\u0002(num12, num13);
            else
              goto label_1;
          }
          while (false);
          break;
label_1:
          num8 = num13;
          num6 = num12;
          continue;
label_16:
          num11 = num10;
          goto label_7;
        }
        \u0087\u0006.\u007E\u0091\u000E((object) obj0, num5);
        num2 = obj.\u0004;
        if (false)
        {
          num1 = num2;
          continue;
        }
        break;
label_15:
        num7 = num4;
        goto label_5;
label_14:
        num5 = num3;
        goto label_4;
label_13:
        num9 = num1;
        goto label_3;
      }
      int num15 = obj.\u0002;
      return num2 - num15;
    }

    private struct \u0001
    {
      public int \u0001;
      public int \u0002;
      public int \u0003;
      public int \u0004;

      public \u0001([In] Rectangle obj0)
      {
        this.\u0001 = obj0.Left;
        this.\u0002 = obj0.Top;
        this.\u0004 = obj0.Bottom;
        this.\u0003 = obj0.Right;
      }
    }

    private struct \u0002
    {
      public int \u0001;
      public uint \u0001;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
      public string \u0001;
      public ushort \u0001;
      public ushort \u0002;
      public ushort \u0003;
      public byte \u0001;
      private byte \u0002;
    }

    internal struct \u0003
    {
      public ushort \u0001;
      private ushort \u0002;
      public uint \u0001;
      public IntPtr \u0001;
      public IntPtr \u0002;
      public IntPtr \u0003;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      public ushort \u0003;
      public ushort \u0004;
    }
  }
}
