// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.SystemProfileTags.NetworkInfoTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.SystemProfileInfo;
using PreEmptive.Analytics.Common.Utilities;

namespace PreEmptive.Analytics.Common.Tags.SystemProfileTags
{
  public class NetworkInfoTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 16;
        int num1 = 24439;
        int num2 = num1;
        num1 = 24439;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("\uAAC3ꏅ볇뷉ꏋ볍믏", A_1);
          default:
            goto case 1;
        }
      }
    }

    public NetworkInfo Network
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 10831;
        int num2 = num1;
        num1 = 10831;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.h;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 16017;
        int num2 = num1;
        num1 = 16017;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.h = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public NetworkInfoTag(NetworkInfo network, bool omitpii)
    {
      int A_1 = 2;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      if (omitpii)
      {
        network.MacAddress = (string) null;
        network.IpAddress = (string) null;
        network.Name = (string) null;
      }
      this.AddOptionalAttribute<ulong?>(Utils.a("억좷\uDFB9\uD9BB\uDABD", A_1), network.Speed);
      this.AddOptionalAttribute<ulong?>(Utils.a("\uDBB5\uD9B7승醻춽낿\uA7C1ꇃꋅ", A_1), network.MaxSpeed);
      this.AddOptionalAttribute<bool?>(Utils.a("튵킷\uD9B9첻", A_1), network.UsesDhcp);
      this.AddOptionalAttribute(Utils.a("\uDFB5좷", A_1), network.IpAddress);
      this.AddOptionalAttribute(Utils.a("\uDBB5\uD9B7\uD9B9", A_1), network.MacAddress);
      this.AddOptionalAttribute(Utils.a("햵ힷ풹튻鎽ꦿꛁ", A_1), network.Name);
      this.Network = network;
    }
  }
}
