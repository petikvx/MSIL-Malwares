// Decompiled with JetBrains decompiler
// Type: ?44?
// Assembly: wLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89823795-D5B3-4CC9-949D-6649607AF138
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bndr-d893b556a8d0493f8839c80049bd91fd0bdbcb93646edcc7b2f28d89325ced11.exe

using System;
using System.Runtime.InteropServices;
using System.Threading;

public abstract class \u003F44\u003F
{
  private static bool \u003F0\u003F;
  private \u003F28\u003F \u003F0\u003F;
  private static readonly object \u003F0\u003F = new object();

  public event \u003F28\u003F SendingReportFeedback
  {
    add
    {
      \u003F28\u003F obj1 = this.\u003F0\u003F;
      \u003F28\u003F comparand;
      do
      {
        comparand = obj1;
        int num = 0;
        \u003F28\u003F obj2;
        while (true)
        {
          switch (num)
          {
            case 0:
              obj2 = comparand + value;
              num = 1;
              continue;
            case 1:
              obj1 = Interlocked.CompareExchange<\u003F28\u003F>(ref this.\u003F0\u003F, obj2, comparand);
              num = 2;
              continue;
            default:
              goto label_5;
          }
        }
label_5:;
      }
      while (obj1 != comparand);
    }
    remove
    {
      \u003F28\u003F obj1 = this.\u003F0\u003F;
      \u003F28\u003F comparand;
      do
      {
        comparand = obj1;
        int num = 0;
        \u003F28\u003F obj2;
        while (true)
        {
          switch (num)
          {
            case 0:
              obj2 = comparand - value;
              num = 1;
              continue;
            case 1:
              obj1 = Interlocked.CompareExchange<\u003F28\u003F>(ref this.\u003F0\u003F, obj2, comparand);
              num = 2;
              continue;
            default:
              goto label_5;
          }
        }
label_5:;
      }
      while (obj1 != comparand);
    }
  }

  protected void \u003F64\u003F([In] uint obj0)
  {
    try
    {
      lock (\u003F44\u003F.\u003F0\u003F)
      {
        this.\u003F0\u003F();
        \u003F43\u003F.\u003F60\u003F(obj0);
      }
    }
    catch
    {
    }
  }

  protected void \u003F59\u003F([In] string obj0)
  {
    try
    {
      lock (\u003F44\u003F.\u003F0\u003F)
      {
        this.\u003F0\u003F();
        \u003F43\u003F.\u003F60\u003F(obj0);
      }
    }
    catch
    {
    }
  }

  private void \u003F0\u003F()
  {
    if (\u003F44\u003F.\u003F0\u003F)
      return;
    \u003F44\u003F.\u003F0\u003F obj = new \u003F44\u003F.\u003F0\u003F();
    int num = 0;
    Thread thread;
    while (true)
    {
      switch (num)
      {
        case 0:
          obj.\u003F0\u003F = this;
          num = 1;
          continue;
        case 1:
          obj.\u003F0\u003F = \u003F43\u003F.\u003F61\u003F();
          num = 2;
          continue;
        case 2:
          thread = new Thread(new ThreadStart(obj.\u003F0\u003F));
          num = 3;
          continue;
        case 3:
          thread.IsBackground = true;
          num = 4;
          continue;
        case 4:
          thread.SetApartmentState(ApartmentState.STA);
          num = 5;
          continue;
        case 5:
          thread.Start();
          num = 6;
          continue;
        case 6:
          AppDomain.CurrentDomain.ProcessExit += new EventHandler(this.\u003F0\u003F);
          num = 7;
          continue;
        default:
          goto label_9;
      }
    }
label_9:
    \u003F44\u003F.\u003F0\u003F = true;
  }

  private void \u003F0\u003F(object _param1, EventArgs _param2)
  {
    \u003F42\u003F obj1 = \u003F43\u003F.\u003F62\u003F();
    int num = 0;
    \u003F45\u003F obj2;
    while (true)
    {
      switch (num)
      {
        case 0:
          if (!obj1.IsEmpty)
          {
            obj2 = new \u003F45\u003F(obj1);
            num = 1;
            continue;
          }
          goto label_8;
        case 1:
          obj2.SendingReportFeedback += new \u003F28\u003F(this.\u003F0\u003F);
          num = 2;
          continue;
        case 2:
          if (this.CanReportUsage())
          {
            this.ReportUsage(obj2);
            num = 3;
            continue;
          }
          goto label_6;
        default:
          goto label_9;
      }
    }
label_8:
    return;
label_6:
    return;
label_9:
    \u003F43\u003F.\u003F63\u003F();
  }

  protected abstract void ReportUsage(\u003F45\u003F _param1);

  protected abstract bool CanReportUsage();

  private void \u003F0\u003F(\u003F42\u003F _param1)
  {
    \u003F45\u003F obj = new \u003F45\u003F(_param1);
    int num = 0;
    while (true)
    {
      switch (num)
      {
        case 0:
          obj.SendingReportFeedback += new \u003F28\u003F(this.\u003F0\u003F);
          num = 1;
          continue;
        case 1:
          if (this.CanReportUsage())
          {
            Thread.CurrentThread.IsBackground = false;
            num = 2;
            continue;
          }
          break;
        case 2:
          this.ReportUsage(obj);
          break;
        default:
          goto label_7;
      }
      \u003F36\u003F.\u003F0\u003F();
      num = 3;
    }
label_7:;
  }

  private void \u003F0\u003F(object _param1, \u003F29\u003F _param2)
  {
    \u003F28\u003F obj = this.\u003F0\u003F;
    if (obj == null)
      return;
    obj(_param1, _param2);
  }

  private sealed class \u003F0\u003F
  {
    public \u003F42\u003F \u003F0\u003F;
    public \u003F44\u003F \u003F0\u003F;

    public void \u003F0\u003F() => this.\u003F0\u003F.\u003F0\u003F(this.\u003F0\u003F);
  }
}
