// Decompiled with JetBrains decompiler
// Type:  
// Assembly: IUnknownSafeHand, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8A634AAB-5188-4D51-8A9B-F2BFECF380AF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.PowerShell.gen-9395c1e6ca8f59400a742d292ba944d420396fec84d0dcbec9f2e4f0aeff02b0.exe

using System;
using System.Collections.Generic;
using System.IO;

internal sealed class \u0002\u2001
{
  private readonly Stream \u0002;
  private readonly \u000E\u2000 \u0003;
  private bool \u0005;
  private byte \u0008;
  private byte \u0006;
  private int \u000E;
  private byte[] \u000F;
  private readonly List<string> \u0002\u2000 = new List<string>();

  public \u0002\u2001(Stream _param1)
  {
    this.\u0005 = false;
    this.\u0002 = _param1;
    this.\u0003 = this.\u0003();
  }

  public \u000E\u2000 \u0002() => this.\u0003;

  private \u000E\u2000 \u0003()
  {
    this.\u0002();
    while (!this.\u0005)
      this.\u0003();
    string[] array = new string[this.\u0002\u2000.Count];
    this.\u0002\u2000.CopyTo(array);
    return new \u000E\u2000(this.\u000E, this.\u000F, array);
  }

  private void \u0002()
  {
    if (this.\u0002(4) != \u0005\u2004\u2000.\u0002(737668440))
      throw new FileLoadException(\u0005\u2004\u2000.\u0002(737668453));
    this.\u000E = (int) this.\u0002();
    if (this.\u000E != 1)
      throw new FileLoadException(\u0005\u2004\u2000.\u0002(737668227) + this.\u0003.\u0002.ToString());
    int num1 = (int) this.\u0002();
    int num2 = (int) this.\u0002();
    int num3 = (int) this.\u0002();
  }

  private void \u0003()
  {
    byte num1 = this.\u0008;
    byte num2 = this.\u0006;
    int num3 = (int) this.\u0002();
    byte[] numArray = this.\u0002(this.\u0002());
    if (num3 == 1)
      this.\u0002(numArray);
    else if (num3 == 2)
    {
      this.\u0003(numArray);
    }
    else
    {
      if (num3 != (int) byte.MaxValue)
        throw new FileLoadException(\u0005\u2004\u2000.\u0002(737668262) + num3.ToString());
      this.\u0002(numArray, num1, num2);
    }
  }

  private void \u0002(byte[] _param1) => this.\u000F = _param1;

  private void \u0003(byte[] _param1)
  {
    char[] destinationArray = new char[_param1.Length];
    Array.Copy((Array) _param1, (Array) destinationArray, _param1.Length);
    int int32_1;
    for (int startIndex = 0; startIndex < _param1.Length; startIndex += 8 + int32_1)
    {
      int int32_2 = BitConverter.ToInt32(_param1, startIndex);
      int32_1 = BitConverter.ToInt32(_param1, startIndex + 4);
      string str = new string(destinationArray, startIndex + 8, int32_1);
      if (int32_2 != this.\u0002\u2000.Count)
        throw new FileLoadException(\u0005\u2004\u2000.\u0002(737668284));
      this.\u0002\u2000.Add(str);
    }
  }

  private void \u0002(byte[] _param1, byte _param2, byte _param3)
  {
    this.\u0005 = true;
    if (_param1.Length != 2 || (int) _param1[0] != (int) _param2 || (int) _param1[1] != (int) _param3)
      throw new FileLoadException(\u0005\u2004\u2000.\u0002(737668323));
  }

  private byte \u0002()
  {
    int num = this.\u0002.ReadByte();
    if (num == -1)
      throw new FileLoadException(\u0005\u2004\u2000.\u0002(737668351));
    this.\u0002((byte) num);
    return (byte) num;
  }

  private byte[] \u0002(int _param1)
  {
    byte[] buffer = new byte[_param1];
    if (this.\u0002.Read(buffer, 0, _param1) != _param1)
      throw new FileLoadException(\u0005\u2004\u2000.\u0002(737668351));
    foreach (byte num in buffer)
      this.\u0002(num);
    return buffer;
  }

  private void \u0002(byte _param1)
  {
    this.\u0008 += _param1;
    this.\u0006 ^= _param1;
  }

  private int \u0002() => BitConverter.ToInt32(this.\u0002(4), 0);

  private string \u0002(int _param1)
  {
    char[] destinationArray = new char[_param1];
    Array.Copy((Array) this.\u0002(_param1), (Array) destinationArray, _param1);
    return new string(destinationArray);
  }
}
