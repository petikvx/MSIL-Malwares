// Decompiled with JetBrains decompiler
// Type: IRefl.Managers.ListValueManager
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Pools;
using IRefl.Watchers;
using ProjNet.States;
using ProjNet.Structs;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace IRefl.Managers
{
  public class ListValueManager : ValueObserverWatcher
  {
    private ReaderItemState observerRegistry;
    private ReaderItemState _ObjectRegistry;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal ListValueManager(ReaderItemState task, ReaderItemState visitor)
    {
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            PageAdvisorStructBuilder.PrepareCreator();
            num = 4;
            continue;
          case 1:
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 2;
          case 2:
            this.observerRegistry = task;
            this._ObjectRegistry = visitor;
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num = 2;
            continue;
        }
      }
label_6:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ReaderItemState CompareAdvisor() => this.observerRegistry;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void LoginAdvisor(ReaderItemState key) => this.observerRegistry = key;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ReaderItemState VerifyAdvisor() => this._ObjectRegistry;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ViewAdvisor(ReaderItemState instance) => this._ObjectRegistry = instance;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus() => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override OrderValuePool ManageItem() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] PublishMerchant(double[] i)
    {
      int num1 = 3;
      double[] numArray1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_7;
            case 1:
            case 2:
              goto label_1;
            case 4:
              goto label_5;
            case 5:
              goto label_6;
            case 6:
              goto label_8;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
        double[] numArray2;
        numArray2[0] -= this.CompareAdvisor().MoveItem().InterruptItem() / this.CompareAdvisor().MoveItem().ComputeItem().SortStatus();
        numArray2[0] += this.VerifyAdvisor().MoveItem().InterruptItem() / this.VerifyAdvisor().MoveItem().ComputeItem().SortStatus();
        numArray2[0] *= this.CompareAdvisor().ComputeItem().SortStatus();
label_5:
        numArray1 = numArray2;
        num1 = 6;
        continue;
label_6:
        numArray2[0] /= this.CompareAdvisor().ComputeItem().SortStatus();
        num1 = 1;
        continue;
label_7:
        numArray2 = (double[]) i.Clone();
        num1 = 5;
      }
label_8:
      return numArray1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override List<double[]> FlushMerchant(List<double[]> res)
    {
      List<double[]> numArrayList = new List<double[]>(res.Count);
      foreach (double[] re in res)
        numArrayList.Add(this.PublishMerchant(re));
      return numArrayList;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void CalcMerchant() => throw new NotImplementedException();

    internal static bool CreateWrapper() => true;

    internal static bool QueryWrapper() => false;
  }
}
