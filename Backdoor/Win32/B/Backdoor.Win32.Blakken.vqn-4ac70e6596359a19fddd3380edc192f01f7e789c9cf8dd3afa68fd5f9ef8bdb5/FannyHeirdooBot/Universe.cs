// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.Universe
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using PlanetDebug;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;

namespace FannyHeirdooBot
{
  public class Universe
  {
    private botDebugBase Debugger;
    public int TotalFleetCount;
    private Dictionary<int, int> WishList = new Dictionary<int, int>();
    private IBotStrategy _Strategy = (IBotStrategy) new Strategy_LastTry();
    public static Quadrant Center = new Quadrant();

    public Universe(botDebugBase debugger)
    {
      BotEnvironment.ClearTrace();
      Universe.TurnCount = 0;
      this.Debugger = debugger;
      this.Planets = new Dictionary<int, Planet>();
    }

    public Dictionary<int, Planet> Planets { get; private set; }

    public void StartTurn(string boardLayout)
    {
label_1:
      int num1 = 573131202;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 955388123)) % 8U)
        {
          case 0:
            this.ChooseStrategy().DoTurn(this);
            num1 = (int) num2 * 2017730766 ^ -930776890;
            continue;
          case 1:
            ++Universe.TurnCount;
            num1 = (int) num2 * 621420534 ^ 5427562;
            continue;
          case 2:
            BotEnvironment.DumpLayout(boardLayout);
            num1 = (int) num2 * 1622891126 ^ -1047398540;
            continue;
          case 3:
            num1 = (int) num2 * 267205559 ^ 445126354;
            continue;
          case 4:
            this.ParseGameState(boardLayout);
            num1 = (int) num2 * 164404497 ^ 1233768063;
            continue;
          case 5:
            goto label_3;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * -1403094442 ^ -1044232405;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public static int TurnCount { get; private set; }

    public double EarlyOrLateStageBias { get; private set; }

    public bool IsDominating { get; private set; }

    public int InitialEnemyFleetDistance { get; set; }

    public int InitialTotalFleetSize { get; private set; }

    public double InitialFleetToPlanetRatio { get; private set; }

    public double Difficulty { get; set; }

    public Player Me { get; private set; }

    public Player Neutral { get; private set; }

    public Player All { get; private set; }

    public Player Enemy { get; private set; }

    private int ParseGameState(string boardLayout)
    {
label_1:
      int num1 = -74845908;
      EditablePlayer editablePlayer1;
      EditablePlayer editablePlayer2;
      string str1;
      int num2;
      bool flag1;
      EditablePlayer editablePlayer3;
      Planet planet;
      string str2;
      string str3;
      string[] tokens;
      Fleet fleet;
      List<Fleet> fleets;
      Dictionary<int, EditablePlayer> playerBuilder;
      int num3;
      EditablePlayer editablePlayer4;
      int index;
      bool flag2;
      string[] strArray;
      bool flag3;
      bool flag4;
      int gameState;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num1 ^ -140845968)) % 74U)
        {
          case 0:
            editablePlayer3.AbsolutePlanetFocus.X += planet.X;
            num1 = (int) num4 * 373582451 ^ 1173781959;
            continue;
          case 1:
            num1 = -120773294;
            continue;
          case 2:
            goto label_68;
          case 3:
            str3 = str2;
            int num5 = !Universe.\u200C‪‭​‎⁯‭⁬⁭‭‬‏‬‍⁯‭⁬‫‫⁫‪⁬⁭⁯‮‏‎‍‌‮⁯⁫⁮‮⁬‮⁪‍⁬‏‮(str3, "P") ? -1121795607 : (num5 = -453092917);
            num1 = num5 ^ (int) num4 * 365159393;
            continue;
          case 4:
            this.Neutral = new Player((IList<Fleet>) editablePlayer1.Fleets, (IList<Planet>) editablePlayer1.Planets, (IList<int>) editablePlayer2.Targets);
            editablePlayer1.InitializePlayer(this.Neutral);
            num1 = (int) num4 * 1437821762 ^ -1978713569;
            continue;
          case 5:
            int num6 = !flag1 ? -297776518 : (num6 = -1396082580);
            num1 = num6 ^ (int) num4 * 2088029107;
            continue;
          case 6:
            this.WishList.Remove(planet.PlanetID);
            num1 = (int) num4 * -1845396857 ^ 1884582318;
            continue;
          case 7:
            int num7 = num2 >= 0 ? -2065136078 : (num7 = -1649554522);
            num1 = num7 ^ (int) num4 * 1338805537;
            continue;
          case 8:
            num1 = (int) num4 * -939034967 ^ 354384142;
            continue;
          case 9:
            flag1 = this.WishList.ContainsKey(planet.PlanetID);
            num1 = (int) num4 * 1890716144 ^ 665220143;
            continue;
          case 10:
            num1 = -384463103;
            continue;
          case 11:
            editablePlayer3.AbsolutePlanetFocus.Y += planet.Y;
            num1 = (int) num4 * -1017232056 ^ -1106513728;
            continue;
          case 12:
            goto label_1;
          case 13:
            editablePlayer2 = Universe.EnsurePlayer(playerBuilder, 1);
            this.Me = new Player((IList<Fleet>) editablePlayer2.Fleets, (IList<Planet>) editablePlayer2.Planets, (IList<int>) editablePlayer2.Targets);
            num1 = (int) num4 * 754634106 ^ -1034817925;
            continue;
          case 14:
          case 16:
            num1 = -1009709950;
            continue;
          case 15:
            num1 = (int) num4 * 1911289913 ^ 991226327;
            continue;
          case 17:
            strArray = Universe.\u200B⁮‬‭‭​‏⁯‌⁮‍⁯‏‎⁮⁮​⁮⁭⁬⁯‏‏‮‭⁪‬⁮​‭⁫⁮‭⁬‬‮‫‬‌‫‮(Universe.\u200F⁪‫‫‮‪⁮⁯‏⁯‌‭⁬‌‭⁪⁪‮‍‍‮‎⁯⁮‪‎⁯⁪⁪⁫⁫‮⁫‍‭⁯‮‫‫‬‮(boardLayout, "\r", ""), new char[1]
            {
              '\n'
            });
            num1 = (int) num4 * 251591983 ^ 1844891391;
            continue;
          case 18:
            num1 = (int) num4 * -2074798029 ^ -1620425914;
            continue;
          case 19:
            editablePlayer3.ShipsHeavyPoint.X += planet.X * (double) planet.NumShips;
            num1 = (int) num4 * -1901931919 ^ 1623755678;
            continue;
          case 20:
            num1 = -1750489273;
            continue;
          case 21:
            tokens = Universe.\u200B⁮‬‭‭​‏⁯‌⁮‍⁯‏‎⁮⁮​⁮⁭⁬⁯‏‏‮‭⁪‬⁮​‭⁫⁮‭⁬‬‮‫‬‌‫‮(str1, new char[1]
            {
              ' '
            });
            num1 = -1902465815;
            continue;
          case 22:
            num1 = (int) num4 * -1857779305 ^ 1630748587;
            continue;
          case 23:
            num1 = (int) num4 * -1298929913 ^ 771269535;
            continue;
          case 24:
            fleet = this.BuildFleet(tokens);
            num1 = -1562275538;
            continue;
          case 25:
            num1 = (int) num4 * 1193930719 ^ 638617351;
            continue;
          case 26:
            fleets = new List<Fleet>();
            playerBuilder = new Dictionary<int, EditablePlayer>();
            num3 = 0;
            num1 = (int) num4 * 1439248477 ^ -1127603697;
            continue;
          case 27:
            editablePlayer2.InitializePlayer(this.Me);
            editablePlayer1 = Universe.EnsurePlayer(playerBuilder, 0);
            num1 = (int) num4 * -41565631 ^ -837244609;
            continue;
          case 28:
            str2 = tokens[0];
            num1 = -1143889479;
            continue;
          case 29:
            num1 = (int) num4 * -1688998676 ^ -349281092;
            continue;
          case 30:
            int num8 = planet.IsMine ? 600292961 : (num8 = 1663350933);
            num1 = num8 ^ (int) num4 * -121357230;
            continue;
          case 31:
            str1 = strArray[index];
            num1 = -1002839094;
            continue;
          case 32:
            num1 = (int) num4 * 392922481 ^ 1945921527;
            continue;
          case 33:
            flag3 = index < strArray.Length;
            num1 = -1358372446;
            continue;
          case 34:
            ++planet.IdleForThisNumberOfTurns;
            editablePlayer3.ShipsOnBase += planet.NumShips;
            num1 = (int) num4 * 687760966 ^ -579280725;
            continue;
          case 35:
            num1 = (int) num4 * -789734179 ^ 1411828344;
            continue;
          case 36:
            ++index;
            num1 = -1135638309;
            continue;
          case 37:
            editablePlayer3.ShipsHeavyPoint.Y += planet.Y * (double) planet.NumShips;
            num1 = (int) num4 * -1473802501 ^ -118399008;
            continue;
          case 38:
            int num9 = !flag3 ? 667804703 : (num9 = 1392363135);
            num1 = num9 ^ (int) num4 * 2064535525;
            continue;
          case 39:
            num1 = (int) num4 * 207087316 ^ 1631338208;
            continue;
          case 40:
            int num10 = !Universe.\u200C‪‭​‎⁯‭⁬⁭‭‬‏‬‍⁯‭⁬‫‫⁫‪⁬⁭⁯‮‏‎‍‌‮⁯⁫⁮‮⁬‮⁪‍⁬‏‮(str3, "p") ? -1677728370 : (num10 = -415253262);
            num1 = num10 ^ (int) num4 * -1695519325;
            continue;
          case 41:
            int num11 = !Universe.\u200C‪‭​‎⁯‭⁬⁭‭‬‏‬‍⁯‭⁬‫‫⁫‪⁬⁭⁯‮‏‎‍‌‮⁯⁫⁮‮⁬‮⁪‍⁬‏‮(str3, "f") ? 155375154 : (num11 = 1434919029);
            num1 = num11 ^ (int) num4 * -366907883;
            continue;
          case 42:
            editablePlayer3 = Universe.EnsurePlayer(playerBuilder, planet.Owner);
            num1 = (int) num4 * -98180237 ^ -488671082;
            continue;
          case 43:
            int num12 = !flag4 ? 1027352883 : (num12 = 1257617666);
            num1 = num12 ^ (int) num4 * -450779344;
            continue;
          case 44:
            editablePlayer4 = Universe.EnsurePlayer(playerBuilder, fleet.Owner);
            editablePlayer4.Fleets.Add(fleet);
            num1 = (int) num4 * 697664997 ^ 766917726;
            continue;
          case 45:
            int num13 = tokens.Length != 7 ? -981553026 : (num13 = -153084934);
            num1 = num13 ^ (int) num4 * -1059656832;
            continue;
          case 46:
            num1 = -1049959125;
            continue;
          case 47:
            num1 = (int) num4 * -267476345 ^ -448093130;
            continue;
          case 48:
            editablePlayer4.Targets.Add(fleet.DestinationPlanetId);
            num1 = (int) num4 * -676990922 ^ -137899973;
            continue;
          case 50:
            num2 = Universe.\u200B‪‍‬⁬​‮‬‎​⁬‌​⁬‎‪⁭‎​⁬‌‭‏‏‌​‏⁭‌‪⁫‫‭‭‬‪‮‏⁭⁯‮(str1, '#');
            num1 = (int) num4 * -340250993 ^ 1719326491;
            continue;
          case 51:
            editablePlayer3.ShipGrowth += planet.GrowthRate;
            num1 = (int) num4 * 319198684 ^ 1343748679;
            continue;
          case 52:
            editablePlayer3.Planets.Add(planet);
            num1 = (int) num4 * -483120262 ^ 67824028;
            continue;
          case 53:
            goto label_109;
          case 54:
            index = 0;
            num1 = (int) num4 * 381585519 ^ -594238606;
            continue;
          case 55:
            planet = this.BuildPlanet(num3++, tokens);
            num1 = -1818005212;
            continue;
          case 56:
            num1 = (int) num4 * -1876553297 ^ 1131719480;
            continue;
          case 57:
            num1 = (int) num4 * -1905283822 ^ -1897126810;
            continue;
          case 58:
            num1 = (int) num4 * 1003964172 ^ -215656582;
            continue;
          case 59:
            this.All = new Player((IList<Fleet>) fleets, (IList<Planet>) this.Planets.Values.ToList<Planet>(), (IList<int>) new List<int>());
            num1 = (int) num4 * -764983466 ^ -1966365364;
            continue;
          case 60:
            gameState = 0;
            num1 = (int) num4 * -917001063 ^ -88139233;
            continue;
          case 61:
            num1 = (int) num4 * 484188354 ^ -948838860;
            continue;
          case 62:
            num1 = (int) num4 * -1290113150 ^ -85590430;
            continue;
          case 63:
            int num14 = flag2 ? 534300337 : (num14 = 28096754);
            num1 = num14 ^ (int) num4 * 210494169;
            continue;
          case 64:
            int num15 = Universe.\u200C‪‭​‎⁯‭⁬⁭‭‬‏‬‍⁯‭⁬‫‫⁫‪⁬⁭⁯‮‏‎‍‌‮⁯⁫⁮‮⁬‮⁪‍⁬‏‮(str3, "F") ? 501169628 : (num15 = 1990167781);
            num1 = num15 ^ (int) num4 * -311379828;
            continue;
          case 65:
            int num16 = tokens.Length != 0 ? -1556213897 : (num16 = -891251511);
            num1 = num16 ^ (int) num4 * 1868253793;
            continue;
          case 66:
            editablePlayer4.ShipsInTransit += fleet.NumShips;
            editablePlayer4.ShipInTransitFocus.X += fleet.DestinationPlanet.X * (double) fleet.NumShips;
            editablePlayer4.ShipInTransitFocus.Y += fleet.DestinationPlanet.Y * (double) fleet.NumShips;
            num1 = (int) num4 * -264885392 ^ -1995225825;
            continue;
          case 67:
            flag4 = tokens.Length != 6;
            num1 = (int) num4 * -545250336 ^ 332756001;
            continue;
          case 68:
            num1 = (int) num4 * 776087554 ^ 213882821;
            continue;
          case 69:
            num1 = -400953880;
            continue;
          case 70:
            str1 = Universe.\u206B​‏‍‎⁫‮⁬‍‪‪⁮‎⁮⁮‮‏‌​​⁬‫‏‌‎‎⁫‫⁪‍⁮‎‍‏⁮‮​‍‬⁫‮(str1, 0, num2);
            num1 = (int) num4 * -515541182 ^ 940996575;
            continue;
          case 71:
            fleets.Add(fleet);
            num1 = (int) num4 * -1919656168 ^ 195699285;
            continue;
          case 72:
            planet.IsOnWishList = true;
            num1 = (int) num4 * 1651887854 ^ 1883644512;
            continue;
          case 73:
            flag2 = Universe.\u206A⁫‍⁭‏‬‬⁫‫⁪‫‮‎‫‭​⁯⁭‮⁭⁫​‌⁬‬‍⁪‮‏‍​⁯⁪‫⁮⁪‭‍⁮‮(Universe.\u202B​⁬⁬⁭⁪⁮⁭‏‌​⁯​‮‎‭‎⁯‍⁭​⁯‫‎‮⁯⁬⁬⁪⁫⁫‬‫‎⁫‪‭‌‫⁯‮(str1)) == 0;
            num1 = -780025623;
            continue;
          default:
            goto label_73;
        }
      }
label_68:
      gameState = 0;
      goto label_109;
label_73:
      using (Dictionary<int, EditablePlayer>.ValueCollection.Enumerator enumerator = playerBuilder.Values.GetEnumerator())
      {
label_78:
        int num17 = enumerator.MoveNext() ? -755102564 : (num17 = -2109697066);
        EditablePlayer current;
        while (true)
        {
          uint num18;
          switch ((num18 = (uint) (num17 ^ -140845968)) % 6U)
          {
            case 0:
              num17 = (int) num18 * 1179099156 ^ -109130177;
              continue;
            case 1:
              this.TotalFleetCount += current.ShipsOnBase + current.ShipsInTransit;
              num17 = (int) num18 * -247146624 ^ -472960964;
              continue;
            case 2:
              current = enumerator.Current;
              num17 = -1998252667;
              continue;
            case 3:
              goto label_78;
            case 5:
              num17 = -755102564;
              continue;
            default:
              goto label_82;
          }
        }
      }
label_82:
      EditablePlayer editablePlayer5 = Universe.EnsurePlayer(playerBuilder, 2);
label_83:
      int num19 = -745956723;
      bool flag5;
      while (true)
      {
        uint num20;
        switch ((num20 = (uint) (num19 ^ -140845968)) % 7U)
        {
          case 0:
            goto label_83;
          case 1:
            this.CreatePlanetaryTravelRoutes();
            num19 = (int) num20 * -720505756 ^ 88789206;
            continue;
          case 3:
            int num21 = flag5 ? 293839353 : (num21 = 751149508);
            num19 = num21 ^ (int) num20 * 1745883046;
            continue;
          case 4:
            num19 = (int) num20 * -2030342436 ^ -1420495040;
            continue;
          case 5:
            this.Enemy = new Player((IList<Fleet>) editablePlayer5.Fleets, (IList<Planet>) editablePlayer5.Planets, (IList<int>) editablePlayer5.Targets);
            editablePlayer5.InitializePlayer(this.Enemy);
            this.All.ShipGrowth = this.Me.ShipGrowth + this.Enemy.ShipGrowth + this.Neutral.ShipGrowth;
            num19 = (int) num20 * 4282789 ^ 1021954470;
            continue;
          case 6:
            flag5 = Universe.TurnCount == 1;
            num19 = (int) num20 * 1005825538 ^ 1410133940;
            continue;
          default:
            goto label_90;
        }
      }
label_90:
      Dictionary<int, Planet>.ValueCollection.Enumerator enumerator1 = this.Planets.Values.GetEnumerator();
      try
      {
label_96:
        int num22 = !enumerator1.MoveNext() ? -1423253875 : (num22 = -357048836);
        Planet current;
        while (true)
        {
          uint num23;
          switch ((num23 = (uint) (num22 ^ -140845968)) % 7U)
          {
            case 0:
              num22 = -357048836;
              continue;
            case 1:
              goto label_96;
            case 2:
              num22 = (int) num23 * 2132305306 ^ -193679664;
              continue;
            case 3:
              current.CreateTurnPredictions();
              num22 = (int) num23 * -1558902303 ^ 38858851;
              continue;
            case 4:
              current = enumerator1.Current;
              num22 = -194296755;
              continue;
            case 6:
              num22 = (int) num23 * 1972984108 ^ 869498028;
              continue;
            default:
              goto label_104;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_100:
        int num24 = -1931970003;
        while (true)
        {
          uint num25;
          switch ((num25 = (uint) (num24 ^ -140845968)) % 3U)
          {
            case 1:
              num24 = (int) num25 * 1517856317 ^ -785598231;
              continue;
            case 2:
              goto label_100;
            default:
              goto label_103;
          }
        }
label_103:;
      }
label_104:
      this.DeterminePlanetStrengthOnFleetArrival();
label_105:
      int num26 = -881037427;
      while (true)
      {
        uint num27;
        switch ((num27 = (uint) (num26 ^ -140845968)) % 4U)
        {
          case 1:
            gameState = 1;
            num26 = (int) num27 * 950887504 ^ -1609254845;
            continue;
          case 2:
            goto label_105;
          case 3:
            num26 = (int) num27 * -1363490140 ^ -713971428;
            continue;
          default:
            goto label_109;
        }
      }
label_109:
      return gameState;
    }

    private void IssueOrder(Planet source, Planet dest, int numShips)
    {
      string str = Universe.\u206D⁫⁮‪‌‎‮⁯⁯⁫⁫⁪⁬‫⁪⁪‏‮‎‎⁪‮‪⁫​‌‍⁭⁯‎⁪⁮⁫‮‭‬‭⁪⁬‭‮("{0} {1} {2}", (object) source.PlanetID, (object) dest.PlanetID, (object) numShips);
label_1:
      int num1 = 2079678623;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1414785572)) % 13U)
        {
          case 0:
            int num3 = flag ? -2091758444 : (num3 = -174761641);
            num1 = num3 ^ (int) num2 * 265620626;
            continue;
          case 1:
            num1 = (int) num2 * -1759167347 ^ 1897510481;
            continue;
          case 2:
            BotEnvironment.DumpMove(str);
            num1 = (int) num2 * -648994340 ^ -677850254;
            continue;
          case 3:
            Universe.\u206D‫‪‬⁭⁭‮​⁬‫​⁭​‌​‎‏‮‮⁬⁪‬​​‏‍⁪⁮‍​⁭⁯‏‎​‭⁯​⁬⁪‮(Universe.\u206A‪‭‎‪⁯⁫⁮‍⁯‪​‭‪⁭⁮⁮⁬‭‫‭‬‬⁫‏⁪‌⁬⁭⁬⁯‌‬‬⁪⁮⁫​⁯‎‮());
            num1 = (int) num2 * 2091174456 ^ 90827042;
            continue;
          case 4:
            num1 = (int) num2 * 658404 ^ 893862847;
            continue;
          case 5:
            goto label_1;
          case 6:
            flag = this.Debugger != null;
            num1 = (int) num2 * -9261859 ^ 1039920380;
            continue;
          case 7:
            this.Debugger.IssueOrder(str);
            num1 = (int) num2 * -2131577615 ^ -1470431213;
            continue;
          case 8:
            goto label_3;
          case 9:
            num1 = (int) num2 * -1798752611 ^ -967178070;
            continue;
          case 10:
            num1 = (int) num2 * 433047256 ^ 1325302585;
            continue;
          case 11:
            source.IdleForThisNumberOfTurns = 0;
            Universe.\u202A‎‬‏‮‎⁭⁭⁯⁯‍‪⁭‌‬‪⁫‌‎⁬⁮‍⁪⁪⁫‭⁯‮‭⁮⁬⁮‌‪‎⁭⁪⁪⁯‍‮(str);
            num1 = (int) num2 * -872216907 ^ 1400309087;
            continue;
          case 12:
            num1 = (int) num2 * -1818375151 ^ -159837730;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    public void FinishTurn()
    {
      Universe.\u202A‎‬‏‮‎⁭⁭⁯⁯‍‪⁭‌‬‪⁫‌‎⁬⁮‍⁪⁪⁫‭⁯‮‭⁮⁬⁮‌‪‎⁭⁪⁪⁯‍‮("go");
      Universe.\u206D‫‪‬⁭⁭‮​⁬‫​⁭​‌​‎‏‮‮⁬⁪‬​​‏‍⁪⁮‍​⁭⁯‏‎​‭⁯​⁬⁪‮(Universe.\u206A‪‭‎‪⁯⁫⁮‍⁯‪​‭‪⁭⁮⁮⁬‭‫‭‬‬⁫‏⁪‌⁬⁭⁬⁯‌‬‬⁪⁮⁫​⁯‎‮());
    }

    internal void MakeUnsafeMove(Planet ownedPlanet, Planet target, int shipCount)
    {
      this.MakeMove(ownedPlanet, target, shipCount, false);
label_1:
      int num1 = -36071648;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1382325029)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1891766948 ^ 1051748817;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    private void MakeMove(Planet ownedPlanet, Planet target, int shipCount, bool safe)
    {
label_1:
      int num1 = 1149855317;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 2139738332)) % 26U)
        {
          case 0:
            num3 = shipCount;
            num1 = (int) num2 * -114406323 ^ 2119080366;
            continue;
          case 1:
            if (ownedPlanet == null)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * -582851755 ^ 1382286715;
            continue;
          case 2:
            ownedPlanet.RemoveShips(num3);
            num1 = (int) num2 * -198719849 ^ 1654091910;
            continue;
          case 3:
            this.IssueOrder(ownedPlanet, target, num3);
            num1 = (int) num2 * 1237353469 ^ 143386150;
            continue;
          case 4:
            num1 = 998178239;
            continue;
          case 5:
            num1 = (int) num2 * -750645499 ^ -344039634;
            continue;
          case 6:
            num3 = Universe.\u206C‎​‍‌‍‏⁪‎⁫‫⁬⁭⁬‭‌‍‭‏​​‏‏⁬‭‬‏‎‪⁬⁯⁪‮⁬⁫⁬⁪‪⁯‫‮(Universe.\u206C‎​‍‌‍‏⁪‎⁫‫⁬⁭⁬‭‌‍‭‏​​‏‏⁬‭‬‏‎‪⁬⁯⁪‮⁬⁫⁬⁪‪⁯‫‮(shipCount, ownedPlanet.AttackForce), ownedPlanet.NumShips);
            num1 = (int) num2 * 509646847 ^ -1843759646;
            continue;
          case 7:
            num1 = (int) num2 * 2102226375 ^ 1406364808;
            continue;
          case 8:
            num1 = (int) num2 * 955630275 ^ -67437495;
            continue;
          case 9:
            num1 = (int) num2 * -849650903 ^ 1607063645;
            continue;
          case 10:
            int num5;
            num1 = num5 = num3 > 0 ? 1762055037 : (num5 = 1932358121);
            continue;
          case 11:
            num1 = (int) num2 * 791520471 ^ 732409918;
            continue;
          case 12:
            num1 = (int) num2 * 1383478168 ^ 1670088412;
            continue;
          case 13:
            goto label_3;
          case 14:
            goto label_1;
          case 15:
            num1 = (int) num2 * -1434643700 ^ 1462468516;
            continue;
          case 16:
            flag = safe;
            num1 = (int) num2 * -1096369622 ^ 1151186287;
            continue;
          case 17:
            num1 = 642468058;
            continue;
          case 18:
            num1 = (int) num2 * -881544590 ^ -2111546778;
            continue;
          case 19:
            this.Me.ShipCountInBase -= num3;
            num1 = 1078676923;
            continue;
          case 20:
            target.RemoveShips(num3);
            num1 = 130517627;
            continue;
          case 21:
            int num6 = flag ? 415021770 : (num6 = 1242918920);
            num1 = num6 ^ (int) num2 * 343121424;
            continue;
          case 22:
            num4 = target != null ? 1 : 0;
            break;
          case 23:
            int num7 = target.IsMine ? 1091749022 : (num7 = 398921165);
            num1 = num7 ^ (int) num2 * -2122871331;
            continue;
          case 24:
            num1 = (int) num2 * 818322576 ^ -743142599;
            continue;
          case 25:
            num1 = (int) num2 * -857809282 ^ 1671425568;
            continue;
          default:
            goto label_31;
        }
        int num8;
        num1 = num8 = num4 == 0 ? 998178239 : (num8 = 110564364);
      }
label_3:
      return;
label_31:;
    }

    public void MakeMove(Planet ownedPlanet, Planet target, int shipCount) => this.MakeMove(ownedPlanet, target, shipCount, true);

    public static int ParseInt(string value)
    {
label_1:
      int num1 = 1420080690;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1432194313)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num2 = int.Parse(value, (IFormatProvider) Universe.\u200B⁭‌​‏⁬‪‏⁪‌‍‏‫‪​​‪‮‏‪‭​‏‏​‏‮‬‫⁭⁬‮‭‫‏‬‭‬‬‬‮());
            num1 = (int) num3 * -759285496 ^ -1251390611;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return num2;
    }

    public static double ParseDouble(string value) => double.Parse(value, (IFormatProvider) Universe.\u200B⁭‌​‏⁬‪‏⁪‌‍‏‫‪​​‪‮‏‪‭​‏‏​‏‮‬‫⁭⁬‮‭‫‏‬‭‬‬‬‮());

    private Fleet BuildFleet(string[] tokens)
    {
      int owner = Universe.ParseInt(tokens[1]);
      int numShips = Universe.ParseInt(tokens[2]);
      int key1 = Universe.ParseInt(tokens[3]);
label_1:
      int num1 = 1758538698;
      int totalTripLength;
      int turnsRemaining;
      int key2;
      Planet planet1;
      Planet planet2;
      Fleet fleet;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1824451729)) % 9U)
        {
          case 0:
            num1 = (int) num2 * -69427694 ^ 244324578;
            continue;
          case 1:
            totalTripLength = Universe.ParseInt(tokens[5]);
            turnsRemaining = Universe.ParseInt(tokens[6]);
            planet1 = this.Planets[key2];
            int num3 = owner == 2 ? 503046173 : (num3 = 700489082);
            num1 = num3 ^ (int) num2 * 1984287261;
            continue;
          case 3:
            key2 = Universe.ParseInt(tokens[4]);
            num1 = (int) num2 * 384202201 ^ -1830877058;
            continue;
          case 4:
            goto label_1;
          case 5:
            planet1.IsAttackedByEnemy = true;
            num1 = (int) num2 * 2064689921 ^ 1402839509;
            continue;
          case 6:
            num1 = (int) num2 * 1122768327 ^ 1351718423;
            continue;
          case 7:
            planet2 = this.Planets[key1];
            num1 = 1159014180;
            continue;
          case 8:
            fleet = new Fleet(owner, numShips, planet2, planet1, totalTripLength, turnsRemaining);
            num1 = (int) num2 * -198441404 ^ -1628911866;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return fleet;
    }

    private Planet BuildPlanet(int planetID, string[] tokens)
    {
label_1:
      int num1 = 1153240373;
      int growthRate;
      double x;
      double y;
      int num2;
      int numShips;
      Planet planet1;
      Planet planet2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 151151341)) % 15U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num3 * 2039760632 ^ 313838687;
            continue;
          case 2:
            numShips = Universe.ParseInt(tokens[4]);
            num1 = (int) num3 * -576078339 ^ -758578253;
            continue;
          case 3:
            planet1.SynchronizeWithGameStatus(num2, numShips);
            num1 = 693680252;
            continue;
          case 4:
            planet1 = new Planet(planetID, num2, numShips, growthRate, x, y);
            planet1.CreateTurns(40);
            this.Planets.Add(planetID, planet1);
            num1 = (int) num3 * 952180480 ^ 987082995;
            continue;
          case 5:
            num1 = (int) num3 * -1588829720 ^ -368666654;
            continue;
          case 6:
            num1 = (int) num3 * 1863385259 ^ 133825212;
            continue;
          case 7:
            x = Universe.ParseDouble(tokens[1]);
            y = Universe.ParseDouble(tokens[2]);
            num1 = (int) num3 * -1091812781 ^ -1161760476;
            continue;
          case 8:
            num1 = (int) num3 * 1891285761 ^ 707347346;
            continue;
          case 9:
            num1 = (int) num3 * 348417629 ^ -1979446006;
            continue;
          case 10:
            num2 = Universe.ParseInt(tokens[3]);
            num1 = (int) num3 * -623934717 ^ 241197859;
            continue;
          case 11:
            int num4 = !this.Planets.TryGetValue(planetID, out planet1) ? -1622513140 : (num4 = -1666503062);
            num1 = num4 ^ (int) num3 * -1091822389;
            continue;
          case 12:
            planet2 = planet1;
            num1 = 476266535;
            continue;
          case 14:
            growthRate = Universe.ParseInt(tokens[5]);
            num1 = (int) num3 * 1392515050 ^ -984620461;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return planet2;
    }

    private static EditablePlayer EnsurePlayer(
      Dictionary<int, EditablePlayer> playerBuilder,
      int id)
    {
      EditablePlayer editablePlayer1;
      bool flag = !playerBuilder.TryGetValue(id, out editablePlayer1);
label_1:
      int num1 = 1668276838;
      EditablePlayer editablePlayer2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 514552130)) % 8U)
        {
          case 0:
            editablePlayer1 = new EditablePlayer();
            num1 = (int) num2 * 1570792814 ^ 2056731428;
            continue;
          case 1:
            num1 = (int) num2 * -696577385 ^ 1443635253;
            continue;
          case 2:
            num1 = (int) num2 * 499255399 ^ -1583322873;
            continue;
          case 4:
            int num3 = flag ? -1401686149 : (num3 = -461176265);
            num1 = num3 ^ (int) num2 * 1103616662;
            continue;
          case 5:
            editablePlayer2 = editablePlayer1;
            num1 = 1847006032;
            continue;
          case 6:
            playerBuilder.Add(id, editablePlayer1);
            num1 = (int) num2 * 1354378585 ^ 1466785881;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return editablePlayer2;
    }

    public void AddToWishList(Planet onwedPlanet)
    {
label_1:
      int num1 = -1186503343;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1408471329)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            this.WishList[onwedPlanet.PlanetID] = 15;
            num1 = (int) num2 * 1909438189 ^ -482478226;
            continue;
          case 2:
            num1 = (int) num2 * -1473056834 ^ -279754329;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * -1991699196 ^ 880688186;
            continue;
          case 5:
            num1 = (int) num2 * 651051940 ^ 960863870;
            continue;
          case 6:
            int num3 = this.WishList.ContainsKey(onwedPlanet.PlanetID) ? -1831349180 : (num3 = -595532668);
            num1 = num3 ^ (int) num2 * -1495069316;
            continue;
          case 7:
            num1 = (int) num2 * 1339472122 ^ 6798080;
            continue;
          case 8:
            num1 = (int) num2 * -1473717376 ^ 43538528;
            continue;
          case 9:
            num1 = (int) num2 * -1532810615 ^ -2021025635;
            continue;
          case 10:
            this.WishList.Add(onwedPlanet.PlanetID, 15);
            num1 = (int) num2 * 957138211 ^ 537991659;
            continue;
          case 11:
            num1 = -1337034027;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    private IBotStrategy ChooseStrategy()
    {
      bool isDominating = this.IsDominating;
      using (List<KeyValuePair<int, int>>.Enumerator enumerator = this.WishList.ToList<KeyValuePair<int, int>>().GetEnumerator())
      {
label_4:
        int num1 = enumerator.MoveNext() ? -997398957 : (num1 = -1679091980);
        bool flag;
        KeyValuePair<int, int> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1404777448)) % 10U)
          {
            case 0:
              num1 = (int) num2 * -244156200 ^ 1926979835;
              continue;
            case 1:
              current = enumerator.Current;
              num1 = -598440889;
              continue;
            case 2:
              this.WishList[current.Key] = current.Value - 1;
              num1 = -112972956;
              continue;
            case 3:
              num1 = -1964393348;
              continue;
            case 5:
              flag = current.Value < 1;
              num1 = (int) num2 * 404247068 ^ -124842997;
              continue;
            case 6:
              this.WishList.Remove(current.Key);
              num1 = (int) num2 * -249526511 ^ -1714417459;
              continue;
            case 7:
              int num3 = !flag ? -578465665 : (num3 = -68386223);
              num1 = num3 ^ (int) num2 * -1542525639;
              continue;
            case 8:
              goto label_4;
            case 9:
              num1 = -997398957;
              continue;
            default:
              goto label_13;
          }
        }
      }
label_13:
      this.InitialTotalFleetSize = this.TotalFleetCount;
label_14:
      int num4 = -792828769;
      IBotStrategy strategy;
      while (true)
      {
        uint num5;
        double num6;
        bool flag1;
        double num7;
        int turnCount;
        int num8;
        int num9;
        bool flag2;
        bool flag3;
        bool flag4;
        double num10;
        double num11;
        bool flag5;
        int num12;
        int num13;
        int num14;
        switch ((num5 = (uint) (num4 ^ -1404777448)) % 51U)
        {
          case 0:
            this._Strategy = (IBotStrategy) new Strategy_LastTry();
            num4 = (int) num5 * 1964824312 ^ 424908306;
            continue;
          case 1:
            int num15 = num11 <= 1.5 ? 1016423835 : (num15 = 2036143793);
            num4 = num15 ^ (int) num5 * -1077409089;
            continue;
          case 2:
            ++num9;
            num4 = (int) num5 * 1996760901 ^ 822119107;
            continue;
          case 3:
            num12 = this.IsDominating != isDominating ? 1 : 0;
            goto label_60;
          case 5:
            int num16 = flag1 ? 631526188 : (num16 = 1607964566);
            num4 = num16 ^ (int) num5 * 1003969578;
            continue;
          case 6:
            flag2 = num7 < 0.8;
            num4 = (int) num5 * 1445121608 ^ -1110724969;
            continue;
          case 7:
            ++num9;
            num4 = (int) num5 * 1879059388 ^ -1178107248;
            continue;
          case 8:
            ++num9;
            num4 = (int) num5 * -1335111098 ^ 1734884402;
            continue;
          case 9:
            this.EarlyOrLateStageBias = Universe.\u206D⁪⁬⁮⁯‬⁮‍​‭​⁮‮⁪⁮⁯⁮⁮‫⁬‭‍‬‫‮‭‏‌‭⁫​‪⁮⁫‪‫‭‌‪⁪‮(0.0, 4.0 - (double) (Universe.TurnCount + 1) / 10.0);
            num4 = (int) num5 * 700936477 ^ -671439293;
            continue;
          case 10:
            ++num9;
            num4 = (int) num5 * 315244777 ^ -2190574;
            continue;
          case 11:
          case 20:
          case 23:
label_16:
            strategy = this._Strategy;
            num4 = -1987988610;
            continue;
          case 12:
            num13 = this.Me.Planets.Count > 4 ? 1 : 0;
            break;
          case 13:
label_44:
            this._Strategy = (IBotStrategy) new Strategy_LastTry();
            num4 = -57667021;
            continue;
          case 14:
            this.InitialFleetToPlanetRatio = (double) (this.InitialTotalFleetSize - 200) / (double) (this.All.Planets.Count - 2);
            num4 = (int) num5 * -2084463078 ^ 775122043;
            continue;
          case 15:
            goto label_14;
          case 16:
            if (!this.IsDominating)
            {
              num4 = -1051766622;
              continue;
            }
            num12 = 0;
            goto label_60;
          case 17:
            num4 = (int) num5 * 952185892 ^ -1455940500;
            continue;
          case 18:
            num10 = (double) this.Me.ShipCountInBase / (double) (this.Enemy.ShipCountInBase + 1);
            num4 = -2120517739;
            continue;
          case 19:
            this._Strategy = (IBotStrategy) new Strategy_LastTry();
            num4 = (int) num5 * -1423971875 ^ -15305959;
            continue;
          case 21:
            int num17;
            num4 = num17 = num6 <= 2.0 ? -1196494642 : (num17 = -360167822);
            continue;
          case 22:
            num6 = (double) this.Me.ShipGrowth / (double) (this.Enemy.ShipGrowth + 1);
            num4 = -888848676;
            continue;
          case 24:
            num4 = (int) num5 * -696362851 ^ 811768261;
            continue;
          case 25:
            num11 = (double) this.Me.TotalShipCount / (double) (this.Enemy.TotalShipCount + 1);
            num4 = (int) num5 * -1960284915 ^ 2120750287;
            continue;
          case 26:
            num4 = (int) num5 * -1241800188 ^ -429488262;
            continue;
          case 27:
            int num18 = flag2 ? 921761254 : (num18 = 1831513872);
            num4 = num18 ^ (int) num5 * -606991865;
            continue;
          case 28:
            int num19 = flag5 ? -377771599 : (num19 = -1728978198);
            num4 = num19 ^ (int) num5 * 955073541;
            continue;
          case 29:
            int num20 = !flag4 ? -2117103592 : (num20 = -1191031902);
            num4 = num20 ^ (int) num5 * 752514266;
            continue;
          case 30:
            if (this.IsDominating)
            {
              num4 = -1418991804;
              continue;
            }
            num14 = 0;
            goto label_51;
          case 31:
            int num21;
            num4 = num21 = num8 != 15 ? -1198079579 : (num21 = -1216469761);
            continue;
          case 32:
            ++num9;
            num4 = (int) num5 * -319035796 ^ 861235160;
            continue;
          case 33:
            this.IsDominating = num9 > 2;
            num4 = -149182190;
            continue;
          case 34:
            if (Universe.TurnCount <= 20)
            {
              num13 = 0;
              break;
            }
            num4 = (int) num5 * -206032114 ^ -1933877744;
            continue;
          case 35:
            flag4 = num10 > 1.5;
            num4 = (int) num5 * -2138887621 ^ 1901445047;
            continue;
          case 36:
            num14 = this.IsDominating != isDominating ? 1 : 0;
            goto label_51;
          case 37:
            num4 = (int) num5 * -1636464352 ^ -867671469;
            continue;
          case 38:
            this._Strategy = (IBotStrategy) new Strategy_LastTry();
            num4 = -1596010416;
            continue;
          case 39:
            num7 = (double) this.Me.ShipCountInBase / (double) (this.Enemy.ShipCountInTransit + 1);
            num4 = -996071308;
            continue;
          case 40:
            --num9;
            num4 = (int) num5 * 1193210235 ^ 1197550772;
            continue;
          case 41:
label_68:
            this._Strategy = (IBotStrategy) new Strategy_LastTry();
            num4 = -204648113;
            continue;
          case 42:
            turnCount = Universe.TurnCount;
            num4 = -1631972965;
            continue;
          case 43:
            this.Difficulty = (this.InitialFleetToPlanetRatio - 30.0) / 5.0;
            num4 = (int) num5 * 990881664 ^ 289806491;
            continue;
          case 44:
            num8 = turnCount;
            num4 = (int) num5 * 1539143533 ^ -159471373;
            continue;
          case 45:
            flag1 = num6 > 1.25;
            num4 = (int) num5 * -2023723288 ^ -559720245;
            continue;
          case 46:
            num9 = 0;
            num4 = (int) num5 * 1232432880 ^ 2014451634;
            continue;
          case 47:
            num4 = (int) num5 * 26750871 ^ 1983782925;
            continue;
          case 48:
            switch (num8)
            {
              case 0:
                goto label_16;
              case 1:
                goto label_44;
              case 2:
                goto label_68;
              default:
                num4 = (int) num5 * -1952824150 ^ 1890355215;
                continue;
            }
          case 49:
            int num22 = flag3 ? 212936716 : (num22 = 467230013);
            num4 = num22 ^ (int) num5 * 1653855785;
            continue;
          case 50:
            int num23;
            num4 = num23 = (double) this.Me.Planets.Count / (double) (this.Enemy.Planets.Count + 1) <= 1.5 ? -1247025650 : (num23 = -245321743);
            continue;
          default:
            goto label_73;
        }
        int num24;
        num4 = num24 = num13 != 0 ? -1177897712 : (num24 = -149182190);
        continue;
label_51:
        flag3 = num14 != 0;
        num4 = -1922414872;
        continue;
label_60:
        flag5 = num12 != 0;
        num4 = -55290280;
      }
label_73:
      return strategy;
    }

    public double AverageDistance { get; set; }

    public static int GridDistance(Planet source, Planet destination)
    {
label_1:
      int num1 = 320711989;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1571018896)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num2 = (int) Universe.\u206F‏‏⁫‎⁪⁭⁪‬​‭‏⁬⁯‮⁪⁮‮‫​⁬⁪‎⁮‌⁮⁬‮‏‬⁫‪⁭⁮‍‪‮⁬‏‫‮(Universe.ActualDistance(source, destination));
            num1 = (int) num3 * -658509300 ^ -36358242;
            continue;
          case 2:
            num1 = (int) num3 * 1327658485 ^ -433630815;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return num2;
    }

    public static double ActualDistance(Planet source, Planet destination)
    {
label_1:
      int num1 = 96234717;
      double num2;
      double num3;
      double num4;
      double num5;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 1633787618)) % 6U)
        {
          case 0:
            goto label_1;
          case 2:
            num4 = num2 * num2 + num3 * num3;
            num1 = (int) num6 * -1819941677 ^ 1390233113;
            continue;
          case 3:
            num5 = Universe.\u202D‪​‭‮​‏‬⁫⁪⁪⁫‍‪⁮⁭⁮⁬‪⁬‮‪‮⁬‪⁫‭⁯‌‎⁪‬⁮⁭‎‎‏⁯‬⁫‮(num4);
            num1 = (int) num6 * -255209616 ^ 1442961421;
            continue;
          case 4:
            num3 = source.Y - destination.Y;
            num1 = (int) num6 * -455102024 ^ -411442146;
            continue;
          case 5:
            num2 = source.X - destination.X;
            num1 = (int) num6 * 1409924200 ^ 307680008;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return num5;
    }

    public void CreatePlanetaryTravelRoutes()
    {
      Universe.Center = new Quadrant();
label_1:
      int num1 = -1788505357;
      int num2;
      double num3;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num1 ^ -307948649)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num2 = 0;
            num3 = 0.0;
            num1 = (int) num4 * -2080814627 ^ -443601691;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      int count = this.Planets.Count;
      Dictionary<int, Planet>.ValueCollection.Enumerator enumerator1 = this.Planets.Values.GetEnumerator();
      try
      {
label_77:
        Planet current1;
        PlanetaryTravelRoute routes;
        if (enumerator1.MoveNext())
        {
label_8:
          current1 = enumerator1.Current;
          Universe.Center.X += current1.X;
          int num5 = -910871170;
          while (true)
          {
            uint num6;
            switch ((num6 = (uint) (num5 ^ -307948649)) % 5U)
            {
              case 0:
                num5 = -2128600820;
                continue;
              case 1:
                goto label_8;
              case 2:
                routes.SmallestDistance = 9999.0;
                num2 += current1.GrowthRate;
                num5 = (int) num6 * -269889670 ^ 812571268;
                continue;
              case 3:
                Universe.Center.Y += current1.Y;
                routes = current1.Routes;
                num5 = (int) num6 * -1691498169 ^ 388246742;
                continue;
              default:
                goto label_11;
            }
          }
label_11:
          List<Route> source = new List<Route>();
          Dictionary<int, Planet>.ValueCollection.Enumerator enumerator2 = this.Planets.Values.GetEnumerator();
          try
          {
label_17:
            int num7 = enumerator2.MoveNext() ? -1127947373 : (num7 = -1491336460);
            while (true)
            {
              uint num8;
              double num9;
              bool flag1;
              bool flag2;
              Planet current2;
              Route route;
              bool flag3;
              int num10;
              switch ((num8 = (uint) (num7 ^ -307948649)) % 27U)
              {
                case 0:
                  flag1 = routes.SmallestDistance > num9;
                  num7 = (int) num8 * 1122940167 ^ -925773986;
                  continue;
                case 1:
                  num7 = (int) num8 * 55625452 ^ -1720114723;
                  continue;
                case 2:
                  num7 = (int) num8 * 1314871954 ^ -1915225757;
                  continue;
                case 3:
                  route.ActualDistance = num9;
                  num7 = (int) num8 * -1798394007 ^ 539294925;
                  continue;
                case 4:
                  num7 = (int) num8 * -867654804 ^ -1807179266;
                  continue;
                case 5:
                  int num11 = !flag2 ? 1093946042 : (num11 = 1585714810);
                  num7 = num11 ^ (int) num8 * -1566976001;
                  continue;
                case 7:
                  route.DestinationStateOnArrival = route.Destination.TurnPrediction[route.DistanceInTurns];
                  num7 = -1249134322;
                  continue;
                case 8:
                  num7 = -1356411862;
                  continue;
                case 9:
                  route = new Route(current1, current2);
                  num7 = (int) num8 * 1844331068 ^ -1467128784;
                  continue;
                case 10:
                  num7 = (int) num8 * -569944901 ^ 1860340628;
                  continue;
                case 11:
                  routes.GreatestDistance = num9;
                  num7 = (int) num8 * -1988462787 ^ -1341375410;
                  continue;
                case 12:
                  routes.SmallestDistance = num9;
                  num7 = (int) num8 * 919270321 ^ 755133312;
                  continue;
                case 13:
                  source.Add(route);
                  if (current1.IsMine)
                  {
                    num7 = -546782595;
                    continue;
                  }
                  num10 = 0;
                  break;
                case 14:
                  int num12;
                  num7 = num12 = routes.GreatestDistance < num9 ? -1421220068 : (num12 = -1429969601);
                  continue;
                case 15:
                  num7 = -1127947373;
                  continue;
                case 16:
                  num9 = Universe.ActualDistance(current1, current2);
                  num7 = (int) num8 * -980306436 ^ -2002542783;
                  continue;
                case 17:
                  this.InitialEnemyFleetDistance = route.DistanceInTurns;
                  num7 = (int) num8 * -936088842 ^ 2020166919;
                  continue;
                case 18:
                  num7 = (int) num8 * -1480842906 ^ 584195061;
                  continue;
                case 19:
                  int num13 = !flag3 ? 1285779873 : (num13 = 999904387);
                  num7 = num13 ^ (int) num8 * 1099331273;
                  continue;
                case 20:
                  num7 = (int) num8 * -1474731436 ^ -1178803164;
                  continue;
                case 21:
                  goto label_17;
                case 22:
                  flag3 = current1.PlanetID != current2.PlanetID;
                  num7 = (int) num8 * 930692695 ^ 1221140213;
                  continue;
                case 23:
                  current2 = enumerator2.Current;
                  num7 = -1187660694;
                  continue;
                case 24:
                  route.DistanceInTurns = Universe.GridDistance(current1, current2);
                  this.LargestDistanceInTurns = Universe.\u206A‪‍‮⁭⁬‪‫⁮⁬‪‎⁪⁬‭‍‭‍⁭‍⁭⁪​‍‏​‫⁬‫‎‪‌‪‪‮⁪​‏⁮‍‮(route.DistanceInTurns, this.LargestDistanceInTurns);
                  num7 = (int) num8 * 580503401 ^ 1167543603;
                  continue;
                case 25:
                  int num14 = !flag1 ? 1898585846 : (num14 = 468801808);
                  num7 = num14 ^ (int) num8 * 1606927521;
                  continue;
                case 26:
                  num10 = current2.IsEnemy ? 1 : 0;
                  break;
                default:
                  goto label_48;
              }
              flag2 = num10 != 0;
              num7 = -818598540;
            }
          }
          finally
          {
            enumerator2.Dispose();
label_44:
            int num15 = -116898729;
            while (true)
            {
              uint num16;
              switch ((num16 = (uint) (num15 ^ -307948649)) % 3U)
              {
                case 0:
                  goto label_44;
                case 1:
                  num15 = (int) num16 * -74225295 ^ 1750121690;
                  continue;
                default:
                  goto label_47;
              }
            }
label_47:;
          }
label_48:
          double num17 = 0.0;
label_49:
          int num18 = -469334084;
          double num19;
          double num20;
          while (true)
          {
            uint num21;
            switch ((num21 = (uint) (num18 ^ -307948649)) % 5U)
            {
              case 0:
                goto label_49;
              case 1:
                num19 = 0.0;
                num18 = (int) num21 * -1662730071 ^ -519876331;
                continue;
              case 2:
                num18 = (int) num21 * 816725149 ^ 666904238;
                continue;
              case 3:
                num20 = 0.0;
                num18 = (int) num21 * -78605813 ^ -109913924;
                continue;
              default:
                goto label_54;
            }
          }
label_54:
          IEnumerator<Route> enumerator3 = source.OrderBy<Route, double>((Func<Route, double>) (route => route.ActualDistance)).GetEnumerator();
          try
          {
label_60:
            int num22 = Universe.\u200F‪⁮⁪⁮⁬​‭⁬​‌​‮‮‭‭‭‏⁯‍‍‫‌​‮‏‪⁯‍​‍⁫⁪‍⁯‮⁯‫‫⁬‮((IEnumerator) enumerator3) ? -961440275 : (num22 = -1412614726);
            Route current3;
            while (true)
            {
              uint num23;
              switch ((num23 = (uint) (num22 ^ -307948649)) % 10U)
              {
                case 0:
                  num19 += (double) current3.GrowthRate;
                  num22 = (int) num23 * -991571566 ^ 209893216;
                  continue;
                case 1:
                  goto label_60;
                case 2:
                  num17 += current3.ActualDistance;
                  num22 = (int) num23 * 941072988 ^ 153659169;
                  continue;
                case 3:
                  current1.Routes.AverageConnectedGrowthByNumberOfPlanets.Add(num19 / num20);
                  num22 = (int) num23 * 70101419 ^ -446255350;
                  continue;
                case 4:
                  current3 = enumerator3.Current;
                  num22 = -698254388;
                  continue;
                case 5:
                  ++num20;
                  num22 = (int) num23 * 1095405392 ^ 9327323;
                  continue;
                case 6:
                  num22 = (int) num23 * 1434781213 ^ -232917026;
                  continue;
                case 8:
                  current1.Routes.Add(current3);
                  current1.Routes.AverageDistancesByNumberOfPlanets.Add(num17 / num20);
                  num22 = (int) num23 * -901606517 ^ -182198297;
                  continue;
                case 9:
                  num22 = -961440275;
                  continue;
                default:
                  goto label_71;
              }
            }
          }
          finally
          {
            if (enumerator3 != null)
            {
label_67:
              int num24 = -932102578;
              while (true)
              {
                uint num25;
                switch ((num25 = (uint) (num24 ^ -307948649)) % 3U)
                {
                  case 0:
                    goto label_67;
                  case 1:
                    Universe.\u200F⁪‮‍⁪‬⁫‍⁯⁫‏⁮‏⁪‭⁫‫‮⁫‭‌⁫‎⁪‏⁯⁬‮⁫‎‮‮⁬⁪‌‌⁫‏⁮⁯‮((IDisposable) enumerator3);
                    num24 = (int) num25 * 876118399 ^ 1297755437;
                    continue;
                  default:
                    goto label_70;
                }
              }
            }
label_70:;
          }
label_71:
          routes.AverageDistance = num17 / num20;
        }
        else
          goto label_78;
label_72:
        int num26 = -453209005;
label_73:
        while (true)
        {
          uint num27;
          switch ((num27 = (uint) (num26 ^ -307948649)) % 11U)
          {
            case 1:
              current1.Routes.Capacity = current1.Routes.Count;
              num26 = (int) num27 * 1229467935 ^ 1899335398;
              continue;
            case 2:
              goto label_77;
            case 3:
              routes.DistanceRange = routes.GreatestDistance - routes.SmallestDistance;
              num26 = (int) num27 * -1310938558 ^ 508089343;
              continue;
            case 4:
              num26 = (int) num27 * -128011973 ^ 51020125;
              continue;
            case 5:
              num3 += routes.AverageDistance;
              num26 = (int) num27 * 1778459993 ^ 852838014;
              continue;
            case 6:
              current1.Connectiveness = routes.AverageDistance / current1.Routes.AverageDistancesByNumberOfPlanets[6];
              current1.Growthyness = current1.Routes.AverageConnectedGrowthByNumberOfPlanets[6];
              num26 = (int) num27 * 1322177665 ^ 1231439430;
              continue;
            case 7:
              num26 = (int) num27 * 619761030 ^ 65782058;
              continue;
            case 8:
              current1.Routes.CreatePlanetsByNumberOfTurnsDistance();
              num26 = (int) num27 * 1697584488 ^ 1542776557;
              continue;
            case 9:
              num26 = (int) num27 * -735191831 ^ -1987611948;
              continue;
            case 10:
              goto label_72;
            default:
              goto label_89;
          }
        }
label_78:
        num26 = -1684023665;
        goto label_73;
      }
      finally
      {
        enumerator1.Dispose();
label_85:
        int num28 = -1999255011;
        while (true)
        {
          uint num29;
          switch ((num29 = (uint) (num28 ^ -307948649)) % 3U)
          {
            case 1:
              num28 = (int) num29 * -1861863181 ^ -1804061367;
              continue;
            case 2:
              goto label_85;
            default:
              goto label_88;
          }
        }
label_88:;
      }
label_89:
      this.AverageDistance = num3 / (double) this.Planets.Count;
label_90:
      int num30 = -1443887050;
      while (true)
      {
        uint num31;
        switch ((num31 = (uint) (num30 ^ -307948649)) % 4U)
        {
          case 0:
            Universe.Center.X /= (double) this.Planets.Count;
            num30 = (int) num31 * -569556191 ^ -830937639;
            continue;
          case 1:
            num30 = (int) num31 * -4157458 ^ -909997935;
            continue;
          case 3:
            goto label_90;
          default:
            goto label_94;
        }
      }
label_94:
      Universe.Center.Y /= (double) this.Planets.Count;
    }

    public int LargestDistanceInTurns { get; set; }

    public static bool FightBattle(Planet planet, int turnNumber)
    {
label_1:
      int num1 = -537900830;
      bool flag1;
      Dictionary<int, int> dictionary;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1197045978)) % 6U)
        {
          case 0:
            flag1 = false;
            num1 = (int) num2 * -2053552351 ^ -1760080399;
            continue;
          case 1:
            num1 = (int) num2 * 219596165 ^ 938610615;
            continue;
          case 3:
            goto label_1;
          case 4:
            dictionary = new Dictionary<int, int>();
            num1 = (int) num2 * -2068398403 ^ -1937858441;
            continue;
          case 5:
            dictionary.Add(planet.Owner, planet.NumShips);
            num1 = (int) num2 * -1370800351 ^ 795358601;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      using (List<Fleet>.Enumerator enumerator = planet.Armada.GetEnumerator())
      {
label_13:
        int num3 = !enumerator.MoveNext() ? -1259170562 : (num3 = -2056816113);
        Fleet current;
        int num4;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num3 ^ -1197045978)) % 17U)
          {
            case 0:
              num3 = -274889758;
              continue;
            case 1:
              num3 = (int) num5 * -944491329 ^ 559913912;
              continue;
            case 2:
              int num6 = current.TurnsRemaining != turnNumber ? 688417841 : (num6 = 630026666);
              num3 = num6 ^ (int) num5 * -2135242929;
              continue;
            case 3:
              num3 = (int) num5 * -875267958 ^ 31487913;
              continue;
            case 4:
              current = enumerator.Current;
              num3 = -314673939;
              continue;
            case 5:
              dictionary[current.Owner] = num4 + current.NumShips;
              num3 = (int) num5 * 1989498567 ^ -1290620437;
              continue;
            case 6:
              goto label_13;
            case 7:
              num3 = (int) num5 * -503785249 ^ -1101889532;
              continue;
            case 9:
              dictionary.Add(current.Owner, current.NumShips);
              num3 = -1368893050;
              continue;
            case 10:
              num3 = (int) num5 * 76848597 ^ 599367771;
              continue;
            case 11:
              num3 = (int) num5 * -210278545 ^ -567412870;
              continue;
            case 12:
              flag1 = true;
              num3 = (int) num5 * 1943976929 ^ 451109861;
              continue;
            case 13:
              num3 = -2056816113;
              continue;
            case 14:
              int num7 = dictionary.TryGetValue(current.Owner, out num4) ? 1454245925 : (num7 = 708543402);
              num3 = num7 ^ (int) num5 * 1359442009;
              continue;
            case 15:
              num3 = (int) num5 * -685838503 ^ 1585419727;
              continue;
            case 16:
              num3 = -1197157026;
              continue;
            default:
              goto label_27;
          }
        }
      }
label_27:
      Fleet fleet1;
      Fleet fleet2;
      bool flag2;
      if (flag1)
      {
label_28:
        int num8 = -309716387;
        while (true)
        {
          uint num9;
          switch ((num9 = (uint) (num8 ^ -1197045978)) % 6U)
          {
            case 1:
              num8 = (int) num9 * 984026994 ^ -2042143189;
              continue;
            case 2:
              num8 = (int) num9 * -627317074 ^ 128298644;
              continue;
            case 3:
              fleet2 = new Fleet(0, 0, (Planet) null, (Planet) null, 0, 0);
              num8 = (int) num9 * -104395606 ^ -352538929;
              continue;
            case 4:
              goto label_28;
            case 5:
              fleet1 = new Fleet(0, 0, (Planet) null, (Planet) null, 0, 0);
              num8 = (int) num9 * 871091903 ^ 1634916125;
              continue;
            default:
              goto label_34;
          }
        }
label_34:
        using (Dictionary<int, int>.Enumerator enumerator = dictionary.GetEnumerator())
        {
label_41:
          int num10 = enumerator.MoveNext() ? -2012959188 : (num10 = -352268611);
          KeyValuePair<int, int> current;
          bool flag3;
          bool flag4;
          while (true)
          {
            uint num11;
            switch ((num11 = (uint) (num10 ^ -1197045978)) % 19U)
            {
              case 1:
                num10 = -1900248459;
                continue;
              case 2:
                num10 = (int) num11 * 527062916 ^ -2010654700;
                continue;
              case 3:
                num10 = (int) num11 * -1731894364 ^ 1329872477;
                continue;
              case 4:
                num10 = (int) num11 * 1309742684 ^ 1428948162;
                continue;
              case 5:
                current = enumerator.Current;
                num10 = -982243761;
                continue;
              case 6:
                fleet1 = fleet2;
                num10 = (int) num11 * 2056424411 ^ 162542518;
                continue;
              case 7:
                flag3 = current.Value > fleet1.NumShips;
                num10 = (int) num11 * -592007562 ^ -1000473299;
                continue;
              case 8:
                num10 = (int) num11 * -134649819 ^ 1396206393;
                continue;
              case 9:
                goto label_41;
              case 10:
                int num12 = !flag3 ? -1670132163 : (num12 = -1538466550);
                num10 = num12 ^ (int) num11 * -1431052248;
                continue;
              case 11:
                fleet2 = new Fleet(current.Key, current.Value, (Planet) null, (Planet) null, 0, 0);
                num10 = (int) num11 * 380687232 ^ 2067141717;
                continue;
              case 12:
                num10 = -954848923;
                continue;
              case 13:
                fleet1 = new Fleet(current.Key, current.Value, (Planet) null, (Planet) null, 0, 0);
                num10 = (int) num11 * -1308380255 ^ -1805448261;
                continue;
              case 14:
                num10 = (int) num11 * 1820139649 ^ -561340575;
                continue;
              case 15:
                int num13 = flag4 ? 1878581871 : (num13 = 1002861746);
                num10 = num13 ^ (int) num11 * -261853215;
                continue;
              case 16:
                num10 = -1358683072;
                continue;
              case 17:
                num10 = -2012959188;
                continue;
              case 18:
                flag4 = current.Value > fleet2.NumShips;
                num10 = (int) num11 * 1620779184 ^ -881161562;
                continue;
              default:
                goto label_56;
            }
          }
        }
label_56:
        flag2 = fleet2.NumShips > fleet1.NumShips;
      }
      else
        goto label_67;
label_57:
      int num14 = -889738863;
label_58:
      while (true)
      {
        uint num15;
        switch ((num15 = (uint) (num14 ^ -1197045978)) % 12U)
        {
          case 0:
            planet.DoesNotChangeOwner = planet.Owner == fleet2.Owner;
            num14 = (int) num15 * -1712208350 ^ -1184202434;
            continue;
          case 1:
            num14 = (int) num15 * 2007319089 ^ -363507246;
            continue;
          case 2:
            planet.ChangeOwner(planet.Owner, 0);
            num14 = -1298688713;
            continue;
          case 3:
            goto label_57;
          case 4:
            num14 = (int) num15 * -1999574943 ^ -1833883196;
            continue;
          case 6:
            num14 = (int) num15 * 152058040 ^ -456218333;
            continue;
          case 7:
            int num16 = !flag2 ? 1940962173 : (num16 = 1305039709);
            num14 = num16 ^ (int) num15 * -781646685;
            continue;
          case 8:
            planet.ChangeOwner(fleet2.Owner, fleet2.NumShips - fleet1.NumShips);
            num14 = (int) num15 * -2085154400 ^ -861288514;
            continue;
          case 9:
            num14 = -852870995;
            continue;
          case 10:
            num14 = (int) num15 * -371676527 ^ 2094726692;
            continue;
          case 11:
            goto label_67;
          default:
            goto label_69;
        }
      }
label_69:
      bool flag5;
      return flag5;
label_67:
      flag5 = flag1;
      num14 = -1484571741;
      goto label_58;
    }

    internal static bool FightBattleAndOwnerSurvived(
      PlanetTurn lastCalculatedTurn,
      IGrouping<int, Fleet> turn)
    {
label_1:
      int num1 = 260888059;
      Dictionary<int, int> dictionary;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 469037418)) % 4U)
        {
          case 1:
            dictionary = new Dictionary<int, int>();
            dictionary.Add(lastCalculatedTurn.Owner, lastCalculatedTurn.NumShips);
            num1 = (int) num2 * -79625802 ^ 1960587307;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1371164186 ^ 370120464;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      IEnumerator<Fleet> enumerator1 = turn.GetEnumerator();
      try
      {
label_16:
        int num3 = Universe.\u200F‪⁮⁪⁮⁬​‭⁬​‌​‮‮‭‭‭‏⁯‍‍‫‌​‮‏‪⁯‍​‍⁫⁪‍⁯‮⁯‫‫⁬‮((IEnumerator) enumerator1) ? 141797228 : (num3 = 1945289981);
        Fleet current;
        int num4;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num3 ^ 469037418)) % 12U)
          {
            case 0:
              num3 = (int) num5 * 917332167 ^ -1852321311;
              continue;
            case 1:
              dictionary.Add(current.Owner, current.NumShips);
              num3 = 417140062;
              continue;
            case 2:
              num3 = 2136875275;
              continue;
            case 3:
              num3 = (int) num5 * -467639755 ^ -436767317;
              continue;
            case 4:
              num3 = (int) num5 * -959571863 ^ 739893748;
              continue;
            case 5:
              goto label_16;
            case 6:
              current = enumerator1.Current;
              num3 = 1877684106;
              continue;
            case 7:
              dictionary[current.Owner] = num4 + current.NumShips;
              num3 = (int) num5 * -605156239 ^ -1681627999;
              continue;
            case 8:
              int num6 = dictionary.TryGetValue(current.Owner, out num4) ? 1406663969 : (num6 = 1161115263);
              num3 = num6 ^ (int) num5 * 1596671340;
              continue;
            case 9:
              num3 = 141797228;
              continue;
            case 10:
              num3 = (int) num5 * -1754360285 ^ -1207248686;
              continue;
            default:
              goto label_25;
          }
        }
      }
      finally
      {
        if (enumerator1 != null)
        {
label_20:
          int num7 = 1842884067;
          while (true)
          {
            uint num8;
            switch ((num8 = (uint) (num7 ^ 469037418)) % 4U)
            {
              case 1:
                Universe.\u200F⁪‮‍⁪‬⁫‍⁯⁫‏⁮‏⁪‭⁫‫‮⁫‭‌⁫‎⁪‏⁯⁬‮⁫‎‮‮⁬⁪‌‌⁫‏⁮⁯‮((IDisposable) enumerator1);
                num7 = (int) num8 * 551813264 ^ 342535269;
                continue;
              case 2:
                goto label_20;
              case 3:
                num7 = (int) num8 * -1142875849 ^ -624270037;
                continue;
              default:
                goto label_24;
            }
          }
        }
label_24:;
      }
label_25:
      Fleet fleet1 = new Fleet(0, 0, (Planet) null, (Planet) null, 0, 0);
label_26:
      int num9 = 1430443976;
      Fleet fleet2;
      while (true)
      {
        uint num10;
        switch ((num10 = (uint) (num9 ^ 469037418)) % 3U)
        {
          case 1:
            fleet2 = new Fleet(0, 0, (Planet) null, (Planet) null, 0, 0);
            num9 = (int) num10 * 876476942 ^ 124595126;
            continue;
          case 2:
            goto label_26;
          default:
            goto label_29;
        }
      }
label_29:
      using (Dictionary<int, int>.Enumerator enumerator2 = dictionary.GetEnumerator())
      {
label_40:
        int num11 = !enumerator2.MoveNext() ? 1129214314 : (num11 = 1615273156);
        KeyValuePair<int, int> current;
        bool flag;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 469037418)) % 13U)
          {
            case 0:
              fleet2 = fleet1;
              fleet1 = new Fleet(current.Key, current.Value, (Planet) null, (Planet) null, 0, 0);
              num11 = (int) num12 * -627493785 ^ 24764618;
              continue;
            case 1:
              fleet2 = new Fleet(current.Key, current.Value, (Planet) null, (Planet) null, 0, 0);
              num11 = 2102408180;
              continue;
            case 2:
              num11 = 1701203751;
              continue;
            case 3:
              current = enumerator2.Current;
              num11 = 1350540507;
              continue;
            case 5:
              num11 = (int) num12 * 1056702864 ^ 882303460;
              continue;
            case 6:
              num11 = 1615273156;
              continue;
            case 7:
              num11 = (int) num12 * 1043550167 ^ -1017583321;
              continue;
            case 8:
              int num13 = flag ? 901474990 : (num13 = 524937737);
              num11 = num13 ^ (int) num12 * 1621077202;
              continue;
            case 9:
              int num14 = current.Value > fleet1.NumShips ? -1207619400 : (num14 = -1575746515);
              num11 = num14 ^ (int) num12 * -865871273;
              continue;
            case 10:
              goto label_40;
            case 11:
              num11 = 1834564939;
              continue;
            case 12:
              flag = current.Value > fleet2.NumShips;
              num11 = (int) num12 * 825286104 ^ -382866483;
              continue;
            default:
              goto label_45;
          }
        }
      }
label_45:
      bool flag1 = fleet1.NumShips > fleet2.NumShips;
label_46:
      int num15 = 989073797;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num16;
        switch ((num16 = (uint) (num15 ^ 469037418)) % 11U)
        {
          case 0:
            goto label_46;
          case 1:
            flag2 = true;
            num15 = (int) num16 * -1525895840 ^ -843643862;
            continue;
          case 2:
            lastCalculatedTurn.SetValues(fleet1.Owner, fleet1.NumShips - fleet2.NumShips);
            num15 = (int) num16 * 1580601509 ^ -949129119;
            continue;
          case 4:
            num15 = (int) num16 * -587102515 ^ 780539448;
            continue;
          case 5:
            num15 = 1320063719;
            continue;
          case 6:
            flag3 = flag2;
            num15 = 2133827690;
            continue;
          case 7:
            lastCalculatedTurn.SetValues(lastCalculatedTurn.Owner, 0);
            num15 = (int) num16 * -132614970 ^ -1293039495;
            continue;
          case 8:
            num15 = (int) num16 * -693158140 ^ -325636576;
            continue;
          case 9:
            int num17 = !flag1 ? -1285103343 : (num17 = -1476927549);
            num15 = num17 ^ (int) num16 * 525100704;
            continue;
          case 10:
            flag2 = lastCalculatedTurn.Owner == fleet1.Owner;
            num15 = (int) num16 * 428978198 ^ -570893094;
            continue;
          default:
            goto label_57;
        }
      }
label_57:
      return flag3;
    }

    public void DeterminePlanetStrengthOnFleetArrival()
    {
      IEnumerator<Planet> enumerator = this.All.PlanetsUnderattack().GetEnumerator();
      try
      {
label_12:
        int num1 = !Universe.\u200F‪⁮⁪⁮⁬​‭⁬​‌​‮‮‭‭‭‏⁯‍‍‫‌​‮‏‪⁯‍​‍⁫⁪‍⁯‮⁯‫‫⁬‮((IEnumerator) enumerator) ? -1557962381 : (num1 = -409111001);
        Planet current;
        PlanetTurn lastTurn;
        bool isMine;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -231602657)) % 37U)
          {
            case 0:
              num1 = -493162477;
              continue;
            case 1:
              current.MaxDesertersAllowed = 0;
              current.ShipsRequiredToSurviveAttack = current.LastAttackTurn.NumShips + 1;
              num1 = (int) num2 * -728114862 ^ -189469486;
              continue;
            case 2:
              isMine = current.IsMine;
              num1 = (int) num2 * 1941065986 ^ 2009513523;
              continue;
            case 3:
              num1 = (int) num2 * -1333624053 ^ -1943763962;
              continue;
            case 4:
              int num3 = !flag ? -731159987 : (num3 = -1780933345);
              num1 = num3 ^ (int) num2 * -492282255;
              continue;
            case 5:
              num1 = (int) num2 * 201462261 ^ -1795942474;
              continue;
            case 6:
              current.ShipsRequiredToSurviveAttack = -1;
              num1 = (int) num2 * 1962423508 ^ -1212411280;
              continue;
            case 7:
              num1 = (int) num2 * 687310156 ^ -1582040981;
              continue;
            case 8:
              num1 = -1919780562;
              continue;
            case 9:
              current.MaxDesertersAllowed = -1;
              num1 = (int) num2 * -1456715569 ^ -1493390623;
              continue;
            case 10:
              num1 = -1728197498;
              continue;
            case 11:
              goto label_12;
            case 12:
              num1 = (int) num2 * -509947150 ^ 13294898;
              continue;
            case 13:
              num1 = (int) num2 * -995357770 ^ -112902713;
              continue;
            case 14:
              num1 = (int) num2 * -911089283 ^ -310855722;
              continue;
            case 15:
              int num4 = isMine ? -196837457 : (num4 = -700333906);
              num1 = num4 ^ (int) num2 * 1220151292;
              continue;
            case 16:
              num1 = (int) num2 * -966481606 ^ 1428361497;
              continue;
            case 17:
              num1 = (int) num2 * -457582642 ^ -784102310;
              continue;
            case 18:
              num1 = -409111001;
              continue;
            case 19:
              int num5 = !current.IsMine ? -1680360673 : (num5 = -284993449);
              num1 = num5 ^ (int) num2 * -1357557162;
              continue;
            case 20:
              num1 = (int) num2 * -818943739 ^ -919138883;
              continue;
            case 21:
              flag = lastTurn.Owner == 1;
              num1 = (int) num2 * 942259183 ^ -372665537;
              continue;
            case 22:
              goto label_43;
            case 23:
              current.MaxDesertersAllowed = Universe.\u206A‪‍‮⁭⁬‪‫⁮⁬‪‎⁪⁬‭‍‭‍⁭‍⁭⁪​‍‏​‫⁬‫‎‪‌‪‪‮⁪​‏⁮‍‮(0, Universe.\u206C‎​‍‌‍‏⁪‎⁫‫⁬⁭⁬‭‌‍‭‏​​‏‏⁬‭‬‏‎‪⁬⁯⁪‮⁬⁫⁬⁪‪⁯‫‮(current.MaxDesertersAllowed, lastTurn.NumShips));
              num1 = (int) num2 * -287481206 ^ 1434449493;
              continue;
            case 24:
              current.ShipsRequiredToSurviveAttack = lastTurn.NumShips + 1;
              num1 = (int) num2 * -17545639 ^ 1889897393;
              continue;
            case 25:
              current = enumerator.Current;
              num1 = -1055932145;
              continue;
            case 26:
              num1 = -849564716;
              continue;
            case 27:
              current.MaxDesertersAllowed = -1;
              num1 = (int) num2 * 1446572573 ^ 912205960;
              continue;
            case 28:
              num1 = -255028078;
              continue;
            case 29:
              int num6;
              num1 = num6 = current.WinningArmadaIsMine ? -2094081253 : (num6 = -888936507);
              continue;
            case 30:
              num1 = -1919780562;
              continue;
            case 31:
              num1 = (int) num2 * -679369496 ^ 505919470;
              continue;
            case 32:
              num1 = (int) num2 * 146961078 ^ -514076115;
              continue;
            case 33:
              num1 = -2032853574;
              continue;
            case 34:
              lastTurn = current.TurnPrediction.LastTurn;
              int num7 = current.DoesNotChangeOwner ? -54739823 : (num7 = -781896110);
              num1 = num7 ^ (int) num2 * -2097147824;
              continue;
            case 35:
              num1 = -215504275;
              continue;
            case 36:
              num1 = -1721447269;
              continue;
            default:
              goto label_39;
          }
        }
label_43:
        return;
label_39:;
      }
      finally
      {
        if (enumerator != null)
        {
label_41:
          int num8 = -1749932394;
          while (true)
          {
            uint num9;
            switch ((num9 = (uint) (num8 ^ -231602657)) % 4U)
            {
              case 0:
                num8 = (int) num9 * 2002695755 ^ 960074737;
                continue;
              case 1:
                Universe.\u200F⁪‮‍⁪‬⁫‍⁯⁫‏⁮‏⁪‭⁫‫‮⁫‭‌⁫‎⁪‏⁯⁬‮⁫‎‮‮⁬⁪‌‌⁫‏⁮⁯‮((IDisposable) enumerator);
                num8 = (int) num9 * -1336567665 ^ 1383473464;
                continue;
              case 3:
                goto label_41;
              default:
                goto label_46;
            }
          }
        }
label_46:;
      }
    }

    static string \u200F⁪‫‫‮‪⁮⁯‏⁯‌‭⁬‌‭⁪⁪‮‍‍‮‎⁯⁮‪‎⁯⁪⁪⁫⁫‮⁫‍‭⁯‮‫‫‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0.Replace(obj1, obj2);
    }

    static string[] \u200B⁮‬‭‭​‏⁯‌⁮‍⁯‏‎⁮⁮​⁮⁭⁬⁯‏‏‮‭⁪‬⁮​‭⁫⁮‭⁬‬‮‫‬‌‫‮([In] string obj0, [In] char[] obj1) => obj0.Split(obj1);

    static int \u200B‪‍‬⁬​‮‬‎​⁬‌​⁬‎‪⁭‎​⁬‌‭‏‏‌​‏⁭‌‪⁫‫‭‭‬‪‮‏⁭⁯‮([In] string obj0, [In] char obj1) => obj0.IndexOf(obj1);

    static string \u206B​‏‍‎⁫‮⁬‍‪‪⁮‎⁮⁮‮‏‌​​⁬‫‏‌‎‎⁫‫⁪‍⁮‎‍‏⁮‮​‍‬⁫‮([In] string obj0, [In] int obj1, [In] int obj2) => obj0.Substring(obj1, obj2);

    static string \u202B​⁬⁬⁭⁪⁮⁭‏‌​⁯​‮‎‭‎⁯‍⁭​⁯‫‎‮⁯⁬⁬⁪⁫⁫‬‫‎⁫‪‭‌‫⁯‮([In] string obj0) => obj0.Trim();

    static int \u206A⁫‍⁭‏‬‬⁫‫⁪‫‮‎‫‭​⁯⁭‮⁭⁫​‌⁬‬‍⁪‮‏‍​⁯⁪‫⁮⁪‭‍⁮‮([In] string obj0) => obj0.Length;

    static bool \u200C‪‭​‎⁯‭⁬⁭‭‬‏‬‍⁯‭⁬‫‫⁫‪⁬⁭⁯‮‏‎‍‌‮⁯⁫⁮‮⁬‮⁪‍⁬‏‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static string \u206D⁫⁮‪‌‎‮⁯⁯⁫⁫⁪⁬‫⁪⁪‏‮‎‎⁪‮‪⁫​‌‍⁭⁯‎⁪⁮⁫‮‭‬‭⁪⁬‭‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }

    static void \u202A‎‬‏‮‎⁭⁭⁯⁯‍‪⁭‌‬‪⁫‌‎⁬⁮‍⁪⁪⁫‭⁯‮‭⁮⁬⁮‌‪‎⁭⁪⁪⁯‍‮([In] string obj0) => Console.WriteLine(obj0);

    static TextWriter \u206A‪‭‎‪⁯⁫⁮‍⁯‪​‭‪⁭⁮⁮⁬‭‫‭‬‬⁫‏⁪‌⁬⁭⁬⁯‌‬‬⁪⁮⁫​⁯‎‮() => Console.Out;

    static void \u206D‫‪‬⁭⁭‮​⁬‫​⁭​‌​‎‏‮‮⁬⁪‬​​‏‍⁪⁮‍​⁭⁯‏‎​‭⁯​⁬⁪‮([In] TextWriter obj0) => obj0.Flush();

    static int \u206C‎​‍‌‍‏⁪‎⁫‫⁬⁭⁬‭‌‍‭‏​​‏‏⁬‭‬‏‎‪⁬⁯⁪‮⁬⁫⁬⁪‪⁯‫‮([In] int obj0, [In] int obj1) => Math.Min(obj0, obj1);

    static CultureInfo \u200B⁭‌​‏⁬‪‏⁪‌‍‏‫‪​​‪‮‏‪‭​‏‏​‏‮‬‫⁭⁬‮‭‫‏‬‭‬‬‬‮() => CultureInfo.InvariantCulture;

    static double \u206D⁪⁬⁮⁯‬⁮‍​‭​⁮‮⁪⁮⁯⁮⁮‫⁬‭‍‬‫‮‭‏‌‭⁫​‪⁮⁫‪‫‭‌‪⁪‮([In] double obj0, [In] double obj1) => Math.Max(obj0, obj1);

    static double \u206F‏‏⁫‎⁪⁭⁪‬​‭‏⁬⁯‮⁪⁮‮‫​⁬⁪‎⁮‌⁮⁬‮‏‬⁫‪⁭⁮‍‪‮⁬‏‫‮([In] double obj0) => Math.Ceiling(obj0);

    static double \u202D‪​‭‮​‏‬⁫⁪⁪⁫‍‪⁮⁭⁮⁬‪⁬‮‪‮⁬‪⁫‭⁯‌‎⁪‬⁮⁭‎‎‏⁯‬⁫‮([In] double obj0) => Math.Sqrt(obj0);

    static int \u206A‪‍‮⁭⁬‪‫⁮⁬‪‎⁪⁬‭‍‭‍⁭‍⁭⁪​‍‏​‫⁬‫‎‪‌‪‪‮⁪​‏⁮‍‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static bool \u200F‪⁮⁪⁮⁬​‭⁬​‌​‮‮‭‭‭‏⁯‍‍‫‌​‮‏‪⁯‍​‍⁫⁪‍⁯‮⁯‫‫⁬‮([In] IEnumerator obj0) => obj0.MoveNext();

    static void \u200F⁪‮‍⁪‬⁫‍⁯⁫‏⁮‏⁪‭⁫‫‮⁫‭‌⁫‎⁪‏⁯⁬‮⁫‎‮‮⁬⁪‌‌⁫‏⁮⁯‮([In] IDisposable obj0) => obj0.Dispose();
  }
}
