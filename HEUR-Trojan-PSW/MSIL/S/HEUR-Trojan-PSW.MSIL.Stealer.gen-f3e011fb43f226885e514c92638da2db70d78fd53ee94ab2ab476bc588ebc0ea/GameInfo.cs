// Decompiled with JetBrains decompiler
// Type: RemnantSaveManager.GameInfo
// Assembly: RemnantSaveManager, Version=1.99.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E1F1E8C4-E528-4D7B-AF51-D8C10E64558F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f3e011fb43f226885e514c92638da2db70d78fd53ee94ab2ab476bc588ebc0ea.exe

using System;
using System.Collections.Generic;
using System.Net;
using System.Security.Cryptography;
using System.Xml;

namespace RemnantSaveManager
{
  internal class GameInfo
  {
    private static Dictionary<string, string> zones = new Dictionary<string, string>();
    private static Dictionary<string, string> events = new Dictionary<string, string>();
    private static Dictionary<string, RemnantItem[]> eventItem = new Dictionary<string, RemnantItem[]>();
    private static Dictionary<string, string> subLocations = new Dictionary<string, string>();
    private static Dictionary<string, string> mainLocations = new Dictionary<string, string>();
    private static Dictionary<string, string> archetypes = new Dictionary<string, string>();
    public static RC2CryptoServiceProvider RC2 = new RC2CryptoServiceProvider();
    public static MD5CryptoServiceProvider hashkey = new MD5CryptoServiceProvider();

    public static event EventHandler<GameInfoUpdateEventArgs> GameInfoUpdate;

    public static Dictionary<string, string> Events
    {
      get
      {
        if (GameInfo.events.Count == 0)
          GameInfo.RefreshGameInfo();
        return GameInfo.events;
      }
    }

    public static Dictionary<string, RemnantItem[]> EventItem
    {
      get
      {
        if (GameInfo.eventItem.Count == 0)
          GameInfo.RefreshGameInfo();
        return GameInfo.eventItem;
      }
    }

    public static Dictionary<string, string> Zones
    {
      get
      {
        if (GameInfo.zones.Count == 0)
          GameInfo.RefreshGameInfo();
        return GameInfo.zones;
      }
    }

    public static Dictionary<string, string> SubLocations
    {
      get
      {
        if (GameInfo.subLocations.Count == 0)
          GameInfo.RefreshGameInfo();
        return GameInfo.subLocations;
      }
    }

    public static Dictionary<string, string> MainLocations
    {
      get
      {
        if (GameInfo.mainLocations.Count == 0)
          GameInfo.RefreshGameInfo();
        return GameInfo.mainLocations;
      }
    }

    public static Dictionary<string, string> Archetypes
    {
      get
      {
        if (GameInfo.archetypes.Count == 0)
          GameInfo.RefreshGameInfo();
        return GameInfo.archetypes;
      }
    }

    public static void RefreshGameInfo()
    {
      GameInfo.zones.Clear();
      GameInfo.events.Clear();
      GameInfo.eventItem.Clear();
      GameInfo.subLocations.Clear();
      GameInfo.mainLocations.Clear();
      GameInfo.archetypes.Clear();
      string key = (string) null;
      string str1 = (string) null;
      string str2 = (string) null;
      string str3 = (string) null;
      List<RemnantItem> remnantItemList = new List<RemnantItem>();
      XmlTextReader xmlTextReader = new XmlTextReader("GameInfo.xml");
      xmlTextReader.WhitespaceHandling = WhitespaceHandling.None;
      while (xmlTextReader.Read())
      {
        switch (xmlTextReader.NodeType)
        {
          case XmlNodeType.Element:
            if (xmlTextReader.Name.Equals("Event"))
            {
              key = xmlTextReader.GetAttribute("name");
              string str4 = xmlTextReader.GetAttribute("altname") ?? key;
              GameInfo.events.Add(key, str4);
              break;
            }
            if (xmlTextReader.Name.Equals("Item"))
            {
              str1 = xmlTextReader.GetAttribute("mode");
              str2 = xmlTextReader.GetAttribute("notes");
              str3 = xmlTextReader.GetAttribute("altname");
              break;
            }
            if (xmlTextReader.Name.Equals("Zone"))
            {
              GameInfo.zones.Add(xmlTextReader.GetAttribute("key"), xmlTextReader.GetAttribute("name"));
              break;
            }
            if (xmlTextReader.Name.Equals("SubLocation"))
            {
              GameInfo.subLocations.Add(xmlTextReader.GetAttribute("eventName"), xmlTextReader.GetAttribute("location"));
              break;
            }
            if (xmlTextReader.Name.Equals("MainLocation"))
            {
              GameInfo.mainLocations.Add(xmlTextReader.GetAttribute("key"), xmlTextReader.GetAttribute("name"));
              break;
            }
            if (xmlTextReader.Name.Equals("Archetype"))
            {
              GameInfo.archetypes.Add(xmlTextReader.GetAttribute("key"), xmlTextReader.GetAttribute("name"));
              break;
            }
            break;
          case XmlNodeType.Text:
            if (key != null)
            {
              RemnantItem remnantItem = new RemnantItem(xmlTextReader.Value);
              if (str1 != null)
              {
                if (str1.Equals("hardcore"))
                  remnantItem.ItemMode = RemnantItem.RemnantItemMode.Hardcore;
                else if (str1.Equals("survival"))
                  remnantItem.ItemMode = RemnantItem.RemnantItemMode.Survival;
              }
              if (str2 != null)
                remnantItem.ItemNotes = str2;
              if (str3 != null)
                remnantItem.ItemAltName = str3;
              remnantItemList.Add(remnantItem);
              str1 = (string) null;
              str2 = (string) null;
              break;
            }
            break;
          case XmlNodeType.EndElement:
            if (xmlTextReader.Name.Equals("Event"))
            {
              GameInfo.eventItem.Add(key, remnantItemList.ToArray());
              key = (string) null;
              remnantItemList.Clear();
              break;
            }
            break;
        }
      }
      xmlTextReader.Close();
    }

    public static void CheckForNewGameInfo()
    {
      GameInfoUpdateEventArgs e = new GameInfoUpdateEventArgs();
      try
      {
        new WebClient().DownloadFile("https://raw.githubusercontent.com/Razzmatazzz/RemnantSaveManager/master/Resources/GameInfo.xml", "TempGameInfo.xml");
        XmlTextReader xmlTextReader1 = new XmlTextReader("TempGameInfo.xml");
        xmlTextReader1.WhitespaceHandling = WhitespaceHandling.None;
        int num1 = 0;
        int num2 = 0;
        while (xmlTextReader1.Read())
        {
          if (xmlTextReader1.NodeType == XmlNodeType.Element && xmlTextReader1.Name.Equals(nameof (GameInfo)))
          {
            num1 = int.Parse(xmlTextReader1.GetAttribute("version"));
            break;
          }
        }
        e.RemoteVersion = num1;
        xmlTextReader1.Close();
        if (System.IO.File.Exists("GameInfo.xml"))
        {
          XmlTextReader xmlTextReader2 = new XmlTextReader("GameInfo.xml");
          while (xmlTextReader2.Read())
          {
            if (xmlTextReader2.NodeType == XmlNodeType.Element && xmlTextReader2.Name.Equals(nameof (GameInfo)))
            {
              num2 = int.Parse(xmlTextReader2.GetAttribute("version"));
              break;
            }
          }
          xmlTextReader2.Close();
          e.LocalVersion = num2;
          if (num1 > num2)
          {
            System.IO.File.Delete("GameInfo.xml");
            System.IO.File.Move("TempGameInfo.xml", "GameInfo.xml");
            GameInfo.RefreshGameInfo();
            e.Result = GameInfoUpdateResult.Updated;
            e.Message = "Game info updated from v" + (object) num2 + " to v" + (object) num1 + ".";
          }
          else
            System.IO.File.Delete("TempGameInfo.xml");
        }
        else
        {
          System.IO.File.Move("TempGameInfo.xml", "GameInfo.xml");
          GameInfo.RefreshGameInfo();
          e.Result = GameInfoUpdateResult.Updated;
          e.Message = "No local game info found; updated to v" + (object) num1 + ".";
        }
      }
      catch (Exception ex)
      {
        e.Result = GameInfoUpdateResult.Failed;
        e.Message = "Error checking for new game info: " + ex.Message;
      }
      GameInfo.OnGameInfoUpdate(e);
    }

    protected static void OnGameInfoUpdate(GameInfoUpdateEventArgs e)
    {
      EventHandler<GameInfoUpdateEventArgs> gameInfoUpdate = GameInfo.GameInfoUpdate;
      if (gameInfoUpdate == null)
        return;
      gameInfoUpdate((object) typeof (GameInfo), e);
    }
  }
}
