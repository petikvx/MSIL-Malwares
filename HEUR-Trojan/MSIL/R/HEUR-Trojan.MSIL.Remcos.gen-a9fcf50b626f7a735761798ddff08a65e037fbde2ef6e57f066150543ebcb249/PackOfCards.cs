// Decompiled with JetBrains decompiler
// Type: Vändtia_Live_Server.PackOfCards
// Assembly: yDseEhTG5bnen4G, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4C5C9DF7-D67E-851A-F932-4F9F562A97E6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Remcos.gen-a9fcf50b626f7a735761798ddff08a65e037fbde2ef6e57f066150543ebcb249.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
using System.Threading;
using Vändtia_Live_Server.My;

namespace Vändtia_Live_Server
{
  public class PackOfCards
  {
    public ArrayList Cards;
    public ArrayList LayedCards;

    public event PackOfCards.OnClearEventHandler OnClear
    {
      add
      {
        PackOfCards.OnClearEventHandler clearEventHandler1 = this.OnClearEvent;
label_1:
        PackOfCards.OnClearEventHandler comparand = clearEventHandler1;
label_5:
        int num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(5);
        int num2 = -6;
        while (true)
        {
          switch ((num2 ^ 52) + 53)
          {
            case 0:
              goto label_5;
            case 1:
              PackOfCards.OnClearEventHandler clearEventHandler2;
              switch (num1 + 44)
              {
                case 0:
                  clearEventHandler1 = Interlocked.CompareExchange<PackOfCards.OnClearEventHandler>(ref this.OnClearEvent, clearEventHandler2, comparand);
                  num1 = -5;
                  goto label_2;
                case 1:
                  if (clearEventHandler1 == comparand)
                  {
                    num1 = -10;
                    goto label_2;
                  }
                  else
                    goto label_1;
                case 2:
                  clearEventHandler2 = comparand + value;
                  num1 = -6;
                  goto label_2;
                case 3:
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (PackOfCards.Bland);
                  num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(11);
                  goto label_2;
                case 4:
                  goto label_9;
                default:
                  num2 = -1;
                  continue;
              }
            case 2:
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (PackOfCards.Bland);
              num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(11);
              continue;
            case 3:
label_2:
              num1 ^= 46;
              break;
          }
          num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(5);
        }
label_9:;
      }
      remove
      {
        PackOfCards.OnClearEventHandler clearEventHandler1 = this.OnClearEvent;
label_1:
        PackOfCards.OnClearEventHandler comparand = clearEventHandler1;
label_5:
        int num1 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(30);
        int num2 = 28;
        while (true)
        {
          switch (num2 ^ 46)
          {
            case 47:
              goto label_5;
            case 48:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (PackOfCards.add_OnClear);
              num2 = 30;
              continue;
            case 49:
              PackOfCards.OnClearEventHandler clearEventHandler2;
              switch (num1 + 53)
              {
                case 0:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (PackOfCards.GetNext);
                  num1 = -2;
                  goto label_2;
                case 1:
                  clearEventHandler1 = Interlocked.CompareExchange<PackOfCards.OnClearEventHandler>(ref this.OnClearEvent, clearEventHandler2, comparand);
                  num1 = -8;
                  goto label_2;
                case 2:
                  if (clearEventHandler1 == comparand)
                  {
                    num1 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(9);
                    goto label_2;
                  }
                  else
                    goto label_1;
                case 3:
                  clearEventHandler2 = comparand - value;
                  num1 = -7;
                  goto label_2;
                case 4:
                  goto label_12;
                default:
                  num2 = 1;
                  continue;
              }
            case 50:
label_2:
              num1 ^= 53;
              break;
          }
          num2 = 31;
        }
label_12:;
      }
    }

    public PackOfCards()
    {
label_2:
      int num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(20);
      string str;
      while (true)
      {
        switch ((num1 ^ 46) + 46)
        {
          case 0:
            str = "Hjärter";
            num1 = -8;
            continue;
          case 1:
            this.Cards = new ArrayList();
            num1 = -6;
            continue;
          case 2:
            this.LayedCards = new ArrayList();
            num1 = -4;
            continue;
          case 3:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (PackOfCards.remove_OnClear);
            num1 = -5;
            continue;
          case 4:
            goto label_7;
          default:
            goto label_2;
        }
      }
label_7:
      int num2 = 1;
      do
      {
        int Number = 1;
label_9:
        this.Cards.Add((object) new Card(str, Number));
label_11:
        int num3 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(7);
        while (true)
        {
          switch ((num3 ^ 46) + 48)
          {
            case 0:
              num3 = -6;
              continue;
            case 1:
              checked { ++Number; }
              num3 = -3;
              continue;
            case 2:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (PackOfCards.add_OnClear);
              num3 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(10);
              continue;
            case 3:
              if (Number > 13)
              {
                num3 = -2;
                continue;
              }
              goto label_9;
            case 4:
              if (Operators.CompareString(str, "Hjärter", false) != 0)
              {
                num3 = -5;
                continue;
              }
              goto label_20;
            case 5:
              goto label_19;
            default:
              goto label_11;
          }
        }
label_19:
        int num4 = 0;
        goto label_21;
label_20:
        num4 = 1;
label_21:
        if (num4 == 0)
        {
          if ((Operators.CompareString(str, "Spader", false) == 0 ? 1 : 0) == 0)
          {
            if ((Operators.CompareString(str, "Ruter", false) == 0 ? 1 : 0) != 0)
              str = "Klöver";
          }
          else
            str = "Ruter";
        }
        else
          str = "Spader";
        checked { ++num2; }
      }
      while (num2 <= 4);
    }

    public void Bland()
    {
      ArrayList c = new ArrayList();
      Random random = new Random();
label_9:
      while ((c.Count >= this.Cards.Count ? 0 : 1) != 0)
      {
        int int32 = Convert.ToInt32(Math.Floor(random.NextDouble() * (double) this.Cards.Count));
        IEnumerator enumerator;
        try
        {
          enumerator = c.GetEnumerator();
          while ((!enumerator.MoveNext() ? 0 : 1) != 0)
          {
            if ((!Operators.ConditionalCompareObjectEqual((object) ((Card) enumerator.Current).Merged, NewLateBinding.LateGet(this.Cards[int32], (Type) null, "Merged", new object[0], (string[]) null, (Type[]) null, (bool[]) null), false) ? 1 : 0) == 0)
              goto label_9;
          }
        }
        finally
        {
          if ((!(enumerator is IDisposable) ? 1 : 0) == 0)
            (enumerator as IDisposable).Dispose();
        }
        c.Add(RuntimeHelpers.GetObjectValue(this.Cards[int32]));
      }
      this.Cards.Clear();
label_14:
      int num1 = 5;
      int num2 = 2;
      while (true)
      {
        switch (num2 ^ 51)
        {
          case 46:
            goto label_14;
          case 47:
            switch (num1)
            {
              case 52:
                this.Cards.AddRange((ICollection) c);
                num1 = 6;
                goto label_11;
              case 53:
                num1 = 11;
                goto label_11;
              case 54:
                num1 = 7;
                goto label_11;
              case 55:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (PackOfCards.add_OnClear);
                num1 = 4;
                goto label_11;
              case 56:
                goto label_18;
              default:
                num2 = 29;
                continue;
            }
          case 48:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (PackOfCards.add_OnClear);
            num2 = 3;
            continue;
          case 49:
label_11:
            num1 ^= 51;
            break;
        }
        num2 = 28;
      }
label_18:;
    }

    public Card GetNext()
    {
      Card next;
      try
      {
        Card card = (Card) this.Cards[checked (this.Cards.Count - 1)];
label_5:
        int num1 = 1;
        int num2 = 12;
        while (true)
        {
          switch (num2 ^ 52)
          {
            case 53:
              goto label_5;
            case 54:
              bool flag;
              switch (num1)
              {
                case 49:
                  this.Cards.Remove((object) card);
                  num1 = 3;
                  goto label_2;
                case 50:
                  flag = this.Cards.Count == 0;
                  num1 = 5;
                  goto label_2;
                case 51:
                  num1 = 2;
                  goto label_2;
                case 52:
                  // ISSUE: method reference
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (PackOfCards.\u002Ector);
                  num1 = 4;
                  goto label_2;
                case 53:
                  if (flag)
                  {
                    num1 = 6;
                    goto label_2;
                  }
                  else
                    goto label_16;
                case 54:
                  goto label_15;
                default:
                  num2 = 1;
                  continue;
              }
            case 55:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (PackOfCards.remove_OnClear);
              num2 = 3;
              continue;
            case 56:
label_2:
              num1 ^= 48;
              break;
          }
          num2 = 2;
        }
label_15:
        int num3 = 0;
        goto label_17;
label_16:
        num3 = 1;
label_17:
        if (num3 == 0)
        {
          // ISSUE: reference to a compiler-generated field
          PackOfCards.OnClearEventHandler onClearEvent = this.OnClearEvent;
          if ((onClearEvent == null ? 1 : 0) == 0)
            onClearEvent();
        }
        next = card;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        next = (Card) null;
        ProjectData.ClearProjectError();
      }
      return next;
    }

    public delegate void OnClearEventHandler();
  }
}
