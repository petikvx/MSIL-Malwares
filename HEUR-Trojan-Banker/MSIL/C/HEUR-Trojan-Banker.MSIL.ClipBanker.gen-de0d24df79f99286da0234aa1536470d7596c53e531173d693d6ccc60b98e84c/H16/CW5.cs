// Decompiled with JetBrains decompiler
// Type: H16.CW5
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Text;

namespace H16
{
  internal static class CW5
  {
    [ThreadStatic]
    private static Stack<List<string>> \u00343q;
    [ThreadStatic]
    private static StringBuilder \u003935;
    [ThreadStatic]
    private static Dictionary<Type, Dictionary<string, FieldInfo>> l63;
    [ThreadStatic]
    private static Dictionary<Type, Dictionary<string, PropertyInfo>> N3F;

    public static \u0001 dtU<\u0001>([In] this string obj0)
    {
      if (CW5.N3F == null)
        CW5.N3F = new Dictionary<Type, Dictionary<string, PropertyInfo>>();
      if (CW5.l63 == null)
        CW5.l63 = new Dictionary<Type, Dictionary<string, FieldInfo>>();
      if (CW5.\u003935 == null)
        CW5.\u003935 = new StringBuilder();
      if (CW5.\u00343q == null)
        CW5.\u00343q = new Stack<List<string>>();
      CW5.\u003935.Length = 0;
      for (int index = 0; index < obj0.Length; ++index)
      {
        char c = obj0[index];
        if (c == '"')
          index = CW5.l98(true, index, obj0);
        else if (!char.IsWhiteSpace(c))
          CW5.\u003935.Append(c);
      }
      return (\u0001) CW5.\u003737(typeof (\u0001), CW5.\u003935.ToString());
    }

    private static int l98([In] bool obj0, [In] int obj1, [In] string obj2)
    {
      CW5.\u003935.Append(obj2[obj1]);
      for (int index = obj1 + 1; index < obj2.Length; ++index)
      {
        if (obj2[index] == '\\')
        {
          if (obj0)
            CW5.\u003935.Append(obj2[index]);
          CW5.\u003935.Append(obj2[index + 1]);
          ++index;
        }
        else
        {
          if (obj2[index] == '"')
          {
            CW5.\u003935.Append(obj2[index]);
            return index;
          }
          CW5.\u003935.Append(obj2[index]);
        }
      }
      return obj2.Length - 1;
    }

    private static List<string> tsq([In] string obj0)
    {
      List<string> stringList = CW5.\u00343q.Count > 0 ? CW5.\u00343q.Pop() : new List<string>();
      stringList.Clear();
      if (obj0.Length == 2)
        return stringList;
      int num = 0;
      CW5.\u003935.Length = 0;
      for (int index = 1; index < obj0.Length - 1; ++index)
      {
        switch (obj0[index])
        {
          case '"':
            index = CW5.l98(true, index, obj0);
            break;
          case ',':
          case ':':
            if (num == 0)
            {
              stringList.Add(CW5.\u003935.ToString());
              CW5.\u003935.Length = 0;
              break;
            }
            goto default;
          case '[':
          case '{':
            ++num;
            goto default;
          case ']':
          case '}':
            --num;
            goto default;
          default:
            CW5.\u003935.Append(obj0[index]);
            break;
        }
      }
      stringList.Add(CW5.\u003935.ToString());
      return stringList;
    }

    internal static object \u003737([In] Type obj0, [In] string obj1)
    {
      if (obj0 == typeof (string))
      {
        if (obj1.Length <= 2)
          return (object) string.Empty;
        StringBuilder stringBuilder = new StringBuilder(obj1.Length);
        for (int index1 = 1; index1 < obj1.Length - 1; ++index1)
        {
          if (obj1[index1] == '\\' && index1 + 1 < obj1.Length - 1)
          {
            int index2 = "\"\\nrtbf/".IndexOf(obj1[index1 + 1]);
            if (index2 >= 0)
            {
              stringBuilder.Append("\"\\\n\r\t\b\f/"[index2]);
              ++index1;
              continue;
            }
            if (obj1[index1 + 1] == 'u' && index1 + 5 < obj1.Length - 1)
            {
              uint result = 0;
              if (uint.TryParse(obj1.Substring(index1 + 2, 4), NumberStyles.AllowHexSpecifier, (IFormatProvider) null, out result))
              {
                stringBuilder.Append((char) result);
                index1 += 5;
                continue;
              }
            }
          }
          stringBuilder.Append(obj1[index1]);
        }
        return (object) stringBuilder.ToString();
      }
      if (obj0.IsPrimitive)
        return Convert.ChangeType((object) obj1, obj0, (IFormatProvider) CultureInfo.InvariantCulture);
      if (obj0 == typeof (Decimal))
      {
        Decimal result;
        Decimal.TryParse(obj1, NumberStyles.Float, (IFormatProvider) CultureInfo.InvariantCulture, out result);
        return (object) result;
      }
      if (obj1 == "null")
        return (object) null;
      if (obj0.IsEnum)
      {
        if (obj1[0] == '"')
          obj1 = obj1.Substring(1, obj1.Length - 2);
        try
        {
          return Enum.Parse(obj0, obj1, false);
        }
        catch
        {
          return (object) 0;
        }
      }
      else
      {
        if (obj0.IsArray)
        {
          Type elementType = obj0.GetElementType();
          if (obj1[0] != '[' || obj1[obj1.Length - 1] != ']')
            return (object) null;
          List<string> stringList = CW5.tsq(obj1);
          Array instance = Array.CreateInstance(elementType, stringList.Count);
          for (int index = 0; index < stringList.Count; ++index)
            instance.SetValue(CW5.\u003737(elementType, stringList[index]), index);
          CW5.\u00343q.Push(stringList);
          return (object) instance;
        }
        if (obj0.IsGenericType && obj0.GetGenericTypeDefinition() == typeof (List<>))
        {
          Type genericArgument = obj0.GetGenericArguments()[0];
          if (obj1[0] != '[' || obj1[obj1.Length - 1] != ']')
            return (object) null;
          List<string> stringList = CW5.tsq(obj1);
          IList list = (IList) obj0.GetConstructor(new Type[1]
          {
            typeof (int)
          }).Invoke(new object[1]
          {
            (object) stringList.Count
          });
          for (int index = 0; index < stringList.Count; ++index)
            list.Add(CW5.\u003737(genericArgument, stringList[index]));
          CW5.\u00343q.Push(stringList);
          return (object) list;
        }
        if (obj0.IsGenericType && obj0.GetGenericTypeDefinition() == typeof (Dictionary<,>))
        {
          Type[] genericArguments = obj0.GetGenericArguments();
          Type type1 = genericArguments[0];
          Type type2 = genericArguments[1];
          if (type1 != typeof (string) || obj1[0] != '{' || obj1[obj1.Length - 1] != '}')
            return (object) null;
          List<string> stringList = CW5.tsq(obj1);
          if (stringList.Count % 2 != 0)
            return (object) null;
          IDictionary dictionary = (IDictionary) obj0.GetConstructor(new Type[1]
          {
            typeof (int)
          }).Invoke(new object[1]
          {
            (object) (stringList.Count / 2)
          });
          for (int index = 0; index < stringList.Count; index += 2)
          {
            if (stringList[index].Length > 2)
            {
              string key = stringList[index].Substring(1, stringList[index].Length - 2);
              object obj = CW5.\u003737(type2, stringList[index + 1]);
              dictionary[(object) key] = obj;
            }
          }
          return (object) dictionary;
        }
        if (obj0 == typeof (object))
          return CW5.\u0036y1(obj1);
        return obj1[0] == '{' && obj1[obj1.Length - 1] == '}' ? CW5.mA3(obj0, obj1) : (object) null;
      }
    }

    private static object \u0036y1([In] string obj0)
    {
      if (obj0.Length == 0)
        return (object) null;
      if (obj0[0] == '{' && obj0[obj0.Length - 1] == '}')
      {
        List<string> stringList = CW5.tsq(obj0);
        if (stringList.Count % 2 != 0)
          return (object) null;
        Dictionary<string, object> dictionary = new Dictionary<string, object>(stringList.Count / 2);
        for (int index = 0; index < stringList.Count; index += 2)
          dictionary[stringList[index].Substring(1, stringList[index].Length - 2)] = CW5.\u0036y1(stringList[index + 1]);
        return (object) dictionary;
      }
      if (obj0[0] == '[' && obj0[obj0.Length - 1] == ']')
      {
        List<string> stringList = CW5.tsq(obj0);
        List<object> objectList = new List<object>(stringList.Count);
        for (int index = 0; index < stringList.Count; ++index)
          objectList.Add(CW5.\u0036y1(stringList[index]));
        return (object) objectList;
      }
      if (obj0[0] == '"' && obj0[obj0.Length - 1] == '"')
        return (object) obj0.Substring(1, obj0.Length - 2).Replace("\\", string.Empty);
      if (char.IsDigit(obj0[0]) || obj0[0] == '-')
      {
        if (obj0.Contains("."))
        {
          double result;
          double.TryParse(obj0, NumberStyles.Float, (IFormatProvider) CultureInfo.InvariantCulture, out result);
          return (object) result;
        }
        int result1;
        int.TryParse(obj0, out result1);
        return (object) result1;
      }
      if (obj0 == "true")
        return (object) true;
      return obj0 == "false" ? (object) false : (object) null;
    }

    private static Dictionary<string, \u0001> \u003698<\u0001>([In] \u0001[] obj0) where \u0001 : MemberInfo
    {
      Dictionary<string, \u0001> dictionary = new Dictionary<string, \u0001>((IEqualityComparer<string>) StringComparer.OrdinalIgnoreCase);
      for (int index = 0; index < obj0.Length; ++index)
      {
        \u0001 element = obj0[index];
        if (!element.IsDefined(typeof (IgnoreDataMemberAttribute), true))
        {
          string name = element.Name;
          if (element.IsDefined(typeof (DataMemberAttribute), true))
          {
            DataMemberAttribute customAttribute = (DataMemberAttribute) Attribute.GetCustomAttribute((MemberInfo) element, typeof (DataMemberAttribute), true);
            if (!string.IsNullOrEmpty(customAttribute.Name))
              name = customAttribute.Name;
          }
          dictionary.Add(name, element);
        }
      }
      return dictionary;
    }

    private static object mA3([In] Type obj0, [In] string obj1)
    {
      object uninitializedObject = FormatterServices.GetUninitializedObject(obj0);
      List<string> stringList = CW5.tsq(obj1);
      if (stringList.Count % 2 != 0)
        return uninitializedObject;
      Dictionary<string, FieldInfo> dictionary1;
      if (!CW5.l63.TryGetValue(obj0, out dictionary1))
      {
        dictionary1 = CW5.\u003698<FieldInfo>(obj0.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy));
        CW5.l63.Add(obj0, dictionary1);
      }
      Dictionary<string, PropertyInfo> dictionary2;
      if (!CW5.N3F.TryGetValue(obj0, out dictionary2))
      {
        dictionary2 = CW5.\u003698<PropertyInfo>(obj0.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy));
        CW5.N3F.Add(obj0, dictionary2);
      }
      for (int index = 0; index < stringList.Count; index += 2)
      {
        if (stringList[index].Length > 2)
        {
          string key = stringList[index].Substring(1, stringList[index].Length - 2);
          string str = stringList[index + 1];
          FieldInfo fieldInfo;
          if (dictionary1.TryGetValue(key, out fieldInfo))
          {
            fieldInfo.SetValue(uninitializedObject, CW5.\u003737(fieldInfo.FieldType, str));
          }
          else
          {
            PropertyInfo propertyInfo;
            if (dictionary2.TryGetValue(key, out propertyInfo))
              propertyInfo.SetValue(uninitializedObject, CW5.\u003737(propertyInfo.PropertyType, str), (object[]) null);
          }
        }
      }
      return uninitializedObject;
    }
  }
}
