// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: NU, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5FD10F56-6E8A-4A54-94FE-02843CD215B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-8545c59f6fe59b3a5cdbad8923aa9b4a109dc03f4c003bdba937eacaafbfbf3c.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
label_1:
      int num1 = 1859587323;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 939117625)) % 6U)
        {
          case 0:
            this.resetFlags();
            num1 = (int) num2 * 785785901 ^ -1394086340;
            continue;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -2059416995 ^ -873517738;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.ChessBoard = b;
            num1 = (int) num2 * -1239858997 ^ -687992147;
            continue;
          case 5:
            num1 = (int) num2 * -1351073293 ^ -1792888666;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public ChessCore()
    {
    }

    public void RestartGame()
    {
label_1:
      int num1 = -339154854;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1071077959)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags();
            num1 = (int) num2 * -1568063305 ^ 157125294;
            continue;
          case 2:
            this.ChessBoard.Restart();
            num1 = (int) num2 * 450406785 ^ 1215655980;
            continue;
          case 3:
            num1 = (int) num2 * 50433329 ^ 1301865926;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void resetFlags(bool turn = false)
    {
      this.DisableTurn = turn;
      this.WhosPlaying = PieceColor.White;
      this.TurnId = 1;
label_1:
      int num1 = 644247764;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1088896123)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Turns.Clear();
            num1 = (int) num2 * 1296023915 ^ 1957823738;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.lastCheckPiece = (Square) null;
            num1 = (int) num2 * -1463137438 ^ 1387837644;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestPassant()
    {
      new DebugChess(this.ChessBoard).TestPassant();
label_1:
      int num1 = 956650098;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 41087684)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1087993275 ^ -435016820;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 968787553 ^ -2080282777;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = -332850314;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -901390849)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).TestSinglePiece(x);
            num1 = (int) num2 * 2077754664 ^ -1840549760;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * -1957782374 ^ -636265717;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCastling()
    {
      new DebugChess(this.ChessBoard).TestCastling();
label_1:
      int num1 = -1926180404;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1129531507)) % 4U)
        {
          case 0:
            this.resetFlags(true);
            num1 = (int) num2 * 2124672250 ^ 1944336527;
            continue;
          case 1:
            num1 = (int) num2 * -1798099696 ^ -1185445495;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = 1605933968;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 348847094)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            new DebugChess(this.ChessBoard).TestCheck();
            num1 = (int) num2 * 1259692068 ^ 797853721;
            continue;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * 1668693698 ^ -1035845883;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestDiscoverCheck()
    {
      new DebugChess(this.ChessBoard).TestDiscoverCheck();
label_1:
      int num1 = 1887517771;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1410723020)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -714884326 ^ -1783954587;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * 359317766 ^ 523825762;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestPromotion()
    {
      new DebugChess(this.ChessBoard).TestPromotion();
label_1:
      int num1 = 302620937;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1283278756)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * -1731908857 ^ 849735680;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = -367367282;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2130222847)) % 6U)
        {
          case 0:
            goto label_3;
          case 1:
            new DebugChess(this.ChessBoard).CheckOnCastling();
            num1 = (int) num2 * 476472497 ^ -112285099;
            continue;
          case 2:
            num1 = (int) num2 * 659791033 ^ 1764828657;
            continue;
          case 3:
            num1 = (int) num2 * -625400593 ^ -1706389350;
            continue;
          case 4:
            this.resetFlags(true);
            num1 = (int) num2 * -1645278135 ^ -191942745;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }
  }
}
