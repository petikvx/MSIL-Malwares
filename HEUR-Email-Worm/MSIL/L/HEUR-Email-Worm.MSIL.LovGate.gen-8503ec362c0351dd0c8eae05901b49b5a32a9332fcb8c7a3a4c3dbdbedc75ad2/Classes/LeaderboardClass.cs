// Decompiled with JetBrains decompiler
// Type: Slot_Machine_Game.Classes.LeaderboardClass
// Assembly: ZoneIdentityPermiss, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BCCCDF50-F63D-44CD-9025-FE0750D75711
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-8503ec362c0351dd0c8eae05901b49b5a32a9332fcb8c7a3a4c3dbdbedc75ad2.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace Slot_Machine_Game.Classes
{
  internal class LeaderboardClass
  {
    private List<Tuple<string, int>> listOfLeaderboard = new List<Tuple<string, int>>();
    private string playerData;
    private string leaderBoardFile = "leaderboard.txt";
    private StreamReader readFromLeaderboard;
    private StreamWriter writeToLeaderboard;

    public void writeToFile()
    {
      if (File.Exists(this.leaderBoardFile))
        File.Delete(this.leaderBoardFile);
      try
      {
        using (this.writeToLeaderboard = new StreamWriter(this.leaderBoardFile, true))
        {
          foreach (object obj in this.listOfLeaderboard)
            this.writeToLeaderboard.WriteLine(obj);
        }
      }
      catch
      {
        int num = (int) MessageBox.Show("Can't write to leaderboard...", "Error");
      }
    }

    public void readFromFile()
    {
      if (File.Exists(this.leaderBoardFile))
        return;
      using (this.readFromLeaderboard = new StreamReader(this.leaderBoardFile, true))
      {
        while (!this.readFromLeaderboard.EndOfStream)
        {
          this.playerData = this.readFromLeaderboard.ReadLine();
          string str1 = "";
          str1 = this.playerData.TrimEnd(')');
          string str2 = this.playerData.TrimStart('(');
          str2.Trim();
          string[] strArray = str2.Split(',');
          this.listOfLeaderboard.Add(Tuple.Create<string, int>(strArray[0], Convert.ToInt32(strArray[1])));
        }
      }
    }

    public void update(string inScore)
    {
      string[] strArray = inScore.Split(':');
      this.listOfLeaderboard.Add(Tuple.Create<string, int>(strArray[0], Convert.ToInt32(strArray[1])));
      this.readFromFile();
      this.listOfLeaderboard = this.listOfLeaderboard.OrderByDescending<Tuple<string, int>, int>((Func<Tuple<string, int>, int>) (y => y.Item2)).ToList<Tuple<string, int>>();
      while (this.listOfLeaderboard.Count >= 6)
        this.listOfLeaderboard.RemoveAt(5);
      this.writeToFile();
    }

    public string getDisplay()
    {
      string display = "";
      foreach (Tuple<string, int> tuple in this.listOfLeaderboard)
      {
        string str = "Name: " + tuple.Item1 + " Score: " + tuple.Item2.ToString();
        display = display + str + "\n";
      }
      return display;
    }
  }
}
