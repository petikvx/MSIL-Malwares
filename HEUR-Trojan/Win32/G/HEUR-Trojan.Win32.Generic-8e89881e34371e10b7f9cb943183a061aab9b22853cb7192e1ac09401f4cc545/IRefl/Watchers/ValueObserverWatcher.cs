// Decompiled with JetBrains decompiler
// Type: IRefl.Watchers.ValueObserverWatcher
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Pools;
using ProjNet.Services;
using ProjNet.Structs;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace IRefl.Watchers
{
  public abstract class ValueObserverWatcher : OrderValuePool
  {
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual int ViewMerchant() => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual int RegisterMerchant() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual bool PopMerchant() => throw new NotImplementedException();

    [SpecialName]
    public abstract string RevertStatus();

    [SpecialName]
    public abstract string AssetItem();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual double[,] SetMerchant(double[] first) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual List<double> PrepareMerchant(List<double> item) => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public virtual AlternativeFormatImportPartType CancelMerchant(
      List<double> instance)
    {
      throw new NotImplementedException();
    }

    public abstract OrderValuePool ManageItem();

    public abstract double[] PublishMerchant(double[] item);

    public abstract List<double[]> FlushMerchant(List<double[]> info);

    public abstract void CalcMerchant();

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double PopAdvisor(double config) => Math.PI / 180.0 * config;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double SetAdvisor(double key) => 180.0 / Math.PI * key;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected ValueObserverWatcher()
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool CustomizeWrapper() => true;

    internal static bool RevertWrapper() => false;
  }
}
