// Decompiled with JetBrains decompiler
// Type: mmxAH.SystemStrings
// Assembly: IAsyncLocalValue, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 5C4F3FBF-C751-4B18-BBEA-B1DDBC6F76B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqk-374874898c5386561d60c3fae0482d1caee783f1096dda6742b1c073175a0a14.exe

using System;
using System.IO;

namespace mmxAH
{
  public class SystemStrings
  {
    private int count = Enum.GetValues(typeof (SSType)).Length;
    private string[] systemStringsArr;
    private string Cluetoken1 = "";
    private string Cluetoken2 = "";
    private string Cluetoken3 = "";
    private string Doomtoken1 = "";
    private string Doomtoken2 = "";
    private string Doomtoken3 = "";

    public SystemStrings() => this.systemStringsArr = new string[this.count];

    public void FromTextFile(TextFileParser pars)
    {
      for (byte index = 0; (int) index < this.count; ++index)
        this.systemStringsArr[(int) index] = pars.GetCurString();
      this.Cluetoken1 = pars.GetCurString();
      this.Cluetoken2 = pars.GetCurString();
      if (pars.isMultiName)
        this.Cluetoken3 = pars.GetCurString();
      this.Doomtoken1 = pars.GetCurString();
      this.Doomtoken2 = pars.GetCurString();
      if (!pars.isMultiName)
        return;
      this.Doomtoken3 = pars.GetCurString();
    }

    public string GetString(SSType t) => this.systemStringsArr[(int) t];

    public string GetNumberClueToken(short num)
    {
      string str1 = num.ToString() + "  ";
      if (this.Cluetoken3 == "")
        return num < (short) 2 ? str1 + this.Cluetoken1 : str1 + this.Cluetoken2;
      if (num >= (short) 11 && num <= (short) 19)
        return str1 + this.Cluetoken3 + "  ";
      while (num > (short) 9)
        num %= (short) 10;
      string str2 = num != (short) 1 ? (num == (short) 0 || num > (short) 4 ? this.Cluetoken3 : this.Cluetoken2) : this.Cluetoken1;
      return str1 + str2 + "  ";
    }

    public string GetNumberDoomToken(short num)
    {
      string str1 = num.ToString() + "  ";
      if (this.Doomtoken3 == "")
        return num < (short) 2 ? str1 + this.Doomtoken1 : str1 + this.Doomtoken2;
      if (num >= (short) 11 && num <= (short) 19)
        return str1 + this.Doomtoken3 + "  ";
      while (num > (short) 9)
        num %= (short) 10;
      string str2 = num != (short) 1 ? (num == (short) 0 || num > (short) 4 ? this.Doomtoken3 : this.Doomtoken2) : this.Doomtoken1;
      return str1 + str2 + "  ";
    }

    public void ToBinary(BinaryWriter wr)
    {
      foreach (string str in this.systemStringsArr)
        wr.Write(str);
      wr.Write(this.Cluetoken1);
      wr.Write(this.Cluetoken2);
      wr.Write(this.Cluetoken3);
    }

    public void FromBinary(BinaryReader rd)
    {
      for (byte index = 0; (int) index < this.count; ++index)
        this.systemStringsArr[(int) index] = rd.ReadString();
      this.Cluetoken1 = rd.ReadString();
      this.Cluetoken2 = rd.ReadString();
      this.Cluetoken3 = rd.ReadString();
    }

    public string GetCharekteresticName(SkillTestType t)
    {
      switch (t)
      {
        case SkillTestType.Speed:
          return this.GetString(SSType.Speed);
        case SkillTestType.Sneak:
          return this.GetString(SSType.Sneak);
        case SkillTestType.Fight:
          return this.GetString(SSType.Fight);
        case SkillTestType.Will:
          return this.GetString(SSType.Will);
        case SkillTestType.Lore:
          return this.GetString(SSType.Lore);
        case SkillTestType.Luck:
          return this.GetString(SSType.Luck);
        case SkillTestType.Evade:
          return this.GetString(SSType.Evade);
        case SkillTestType.Combat:
          return this.GetString(SSType.Combat);
        case SkillTestType.Horror:
          return this.GetString(SSType.Horror);
        case SkillTestType.SpellCast:
          return this.GetString(SSType.SpellCast);
        default:
          return "";
      }
    }

    public string GetMonsterMovementString(MonsterMovementType t)
    {
      string str = this.GetString(SSType.MonsMoveTitle) + " ";
      switch (t)
      {
        case MonsterMovementType.Normal:
          return str + this.GetString(SSType.MonsMoveNormal);
        case MonsterMovementType.Fly:
          return str + this.GetString(SSType.MonsMovFly);
        case MonsterMovementType.Fast:
          return str + this.GetString(SSType.MonsMoveFast);
        case MonsterMovementType.Special:
          return str + this.GetString(SSType.MonsMoveSpec);
        case MonsterMovementType.Inmobile:
          return str + this.GetString(SSType.MonsMovInmob);
        default:
          return "";
      }
    }
  }
}
