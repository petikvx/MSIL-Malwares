// Decompiled with JetBrains decompiler
// Type: BoardGameBackend.BoardGame
// Assembly: DebuggableAttrib, Version=4.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 31857FCB-0B1B-4445-A158-C519E13994BE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.NetWire.gen-5b3332c8ab54721c4b4771b748c9852b4fee0e77ca63915231e7473a827574a7.exe

namespace BoardGameBackend
{
  public class BoardGame
  {
    public AbstractMatchfield MatchField { get; set; }

    public AbstractRules Rules { get; set; }

    public BoardGame(AbstractMatchfield field)
    {
label_1:
      int num1 = 1966224359;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1047163521)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.MatchField = field;
            this.MatchField.Game = this;
            num1 = (int) num2 * 1597651657 ^ 840544451;
            continue;
          case 2:
            num1 = (int) num2 * -2084751475 ^ -1407236126;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public void SetRules(AbstractRules rules)
    {
label_1:
      int num1 = -114952246;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1971682530)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Rules = rules;
            num1 = (int) num2 * 757956890 ^ 1711145484;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }
  }
}
