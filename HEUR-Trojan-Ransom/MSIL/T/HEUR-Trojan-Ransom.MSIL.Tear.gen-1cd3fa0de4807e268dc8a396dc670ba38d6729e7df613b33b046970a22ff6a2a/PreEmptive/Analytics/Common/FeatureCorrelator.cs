// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.FeatureCorrelator
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using System;
using System.Runtime.InteropServices;

namespace PreEmptive.Analytics.Common
{
  public class FeatureCorrelator
  {
    private IFeatureGroupDictionary a;
    private IFeaturePartitioner b;

    public FeatureCorrelator([Optional] IFeatureGroupDictionary featuregroups, [Optional] IFeaturePartitioner partitioner)
    {
      this.a = featuregroups ?? (IFeatureGroupDictionary) new LockingFeatureGroupDictionary();
      this.b = partitioner ?? (IFeaturePartitioner) new ThreadFeaturePartitioner();
    }

    public FeatureGroup Start(string name)
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 32022;
      int num2 = num1;
      num1 = 32022;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          FeatureGroup adder = new FeatureGroup(Guid.NewGuid(), this.b.GetPartition());
          this.a.Add(name, adder);
          return adder;
        default:
          goto case 1;
      }
    }

    public FeatureGroup Stop(string name)
    {
      bool foundpartition = false;
      FeatureGroup featureGroup = this.a.TryRemove(name, this.b.GetPartition(), out foundpartition);
      if (featureGroup != null)
        return featureGroup;
label_1:
      int num1 = 2395;
      int num2 = num1;
      num1 = 2395;
      int num3 = num1;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
          goto label_1;
        default:
          num1 = 1;
          if (num1 == 0)
            ;
          num1 = 0;
          if (num1 == 0)
            ;
          return new FeatureGroup(Guid.NewGuid(), this.b.GetPartition());
      }
    }
  }
}
