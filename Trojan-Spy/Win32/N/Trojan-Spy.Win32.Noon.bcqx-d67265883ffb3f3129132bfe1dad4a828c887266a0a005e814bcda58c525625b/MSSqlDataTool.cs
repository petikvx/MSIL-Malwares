// Decompiled with JetBrains decompiler
// Type: Alero.MSSqlDataTool
// Assembly: AssemblyCopyrightAttrib, Version=2005.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6DE54395-8B54-4A88-80DE-363C4128FB08
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqx-d67265883ffb3f3129132bfe1dad4a828c887266a0a005e814bcda58c525625b.exe

using System;
using System.Data;
using System.Data.SqlClient;

namespace Alero
{
  public abstract class MSSqlDataTool : DataTool
  {
    protected override IDbCommand CreateCommand() => (IDbCommand) new SqlCommand();

    public override IDataParameter CreateStringParameter(
      string parameterName,
      string value,
      int? length)
    {
      if (length.HasValue && value != null)
      {
        int length1 = value.Length;
        int? nullable = length;
        int valueOrDefault = nullable.GetValueOrDefault();
        if (length1 > valueOrDefault & nullable.HasValue)
          throw new StringParameterTooLongException(parameterName, length.Value, value.Length);
      }
      SqlParameter sqlParameter = new SqlParameter(parameterName, SqlDbType.NVarChar);
      sqlParameter.Value = value == null ? (object) DBNull.Value : (object) value;
      SqlParameter stringParameter = sqlParameter;
      if (length.HasValue)
        stringParameter.Size = length.Value;
      return (IDataParameter) stringParameter;
    }

    public override IDataParameter CreateIntParameter(
      string parameterName,
      int? value)
    {
      SqlParameter intParameter = new SqlParameter(parameterName, SqlDbType.Int);
      if (value.HasValue)
        intParameter.Value = (object) value;
      else
        intParameter.Value = (object) DBNull.Value;
      return (IDataParameter) intParameter;
    }

    public override IDataParameter CreateLongParameter(
      string parameterName,
      long? value)
    {
      SqlParameter longParameter = new SqlParameter(parameterName, SqlDbType.BigInt);
      longParameter.Value = value.HasValue ? (object) value.Value : (object) DBNull.Value;
      return (IDataParameter) longParameter;
    }

    public override IDataParameter CreateBoolParameter(
      string parameterName,
      bool value)
    {
      SqlParameter boolParameter = new SqlParameter(parameterName, SqlDbType.Bit);
      boolParameter.Value = (object) value;
      return (IDataParameter) boolParameter;
    }

    public override IDataParameter CreateStampParameter(
      string parameterName,
      object value)
    {
      if (!(value is byte[]))
        throw new ArgumentOutOfRangeException(nameof (value), "Value must be a byte array");
      SqlParameter stampParameter = new SqlParameter(parameterName, SqlDbType.Binary);
      stampParameter.Value = value;
      return (IDataParameter) stampParameter;
    }

    public override IDataParameter CreateDecimalParameter(
      string parameterName,
      Decimal? value)
    {
      SqlParameter decimalParameter = new SqlParameter(parameterName, SqlDbType.Decimal);
      if (value.HasValue)
        decimalParameter.Value = (object) value.Value;
      else
        decimalParameter.Value = (object) DBNull.Value;
      return (IDataParameter) decimalParameter;
    }

    public override IDataParameter CreateMoneyParameter(
      string parameterName,
      Decimal value)
    {
      SqlParameter moneyParameter = new SqlParameter(parameterName, SqlDbType.Money);
      moneyParameter.Value = (object) value;
      return (IDataParameter) moneyParameter;
    }

    public override IDataParameter CreateBinaryParameter(
      string parameterName,
      byte[] value,
      int? length)
    {
      if (length.HasValue)
      {
        int length1 = value.Length;
        int? nullable = length;
        int valueOrDefault = nullable.GetValueOrDefault();
        if (length1 > valueOrDefault & nullable.HasValue)
          throw new BinaryParameterTooLongException(parameterName, length.Value, value.Length);
      }
      SqlParameter sqlParameter = new SqlParameter(parameterName, SqlDbType.Binary);
      sqlParameter.Value = (object) value;
      SqlParameter binaryParameter = sqlParameter;
      if (length.HasValue)
        binaryParameter.Size = length.Value;
      return (IDataParameter) binaryParameter;
    }

    public override IDataParameter CreateDateTimeParameter(
      string parameterName,
      DateTime? value)
    {
      SqlParameter dateTimeParameter = new SqlParameter(parameterName, SqlDbType.DateTime);
      if (value.HasValue)
        dateTimeParameter.Value = (object) value.Value;
      else
        dateTimeParameter.Value = (object) DBNull.Value;
      return (IDataParameter) dateTimeParameter;
    }

    public override IDataParameter CreateGuidParameter(
      string parameterName,
      Guid? value)
    {
      SqlParameter guidParameter = new SqlParameter(parameterName, SqlDbType.UniqueIdentifier);
      if (value.HasValue)
        guidParameter.Value = (object) value.Value;
      else
        guidParameter.Value = (object) DBNull.Value;
      return (IDataParameter) guidParameter;
    }
  }
}
