// Decompiled with JetBrains decompiler
// Type: ProjNet.Common.Bridge
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Pools;
using IRefl.Watchers;
using ProjNet.Structs;
using ProjNet.Templates;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace ProjNet.Common
{
  internal class Bridge : ValueObserverWatcher
  {
    protected OrderValuePool exporter;
    private FieldTemplate _Listener;
    private double[] _Field;
    private bool policy;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Bridge(FieldTemplate reference)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      this.\u002Ector(reference, false);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private Bridge(FieldTemplate info, bool ignoreattr)
    {
      int num1 = 0;
      if (Bridge.SetWrapper())
        ;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            PageAdvisorStructBuilder.PrepareCreator();
            num2 = 5;
            break;
          case 1:
          case 3:
            this._Listener = info;
            this._Field = this._Listener.InstantiateRegistry();
            this.policy = ignoreattr;
            num2 = 6;
            break;
          case 2:
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 1;
          case 5:
            this.policy = false;
            num1 = 4;
            continue;
          case 6:
            goto label_1;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
      }
label_1:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus() => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override OrderValuePool ManageItem()
    {
      int num1 = 3;
      OrderValuePool exporter;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              flag = this.exporter == null;
              if (Bridge.FindWrapper())
              {
                num2 = 4;
                continue;
              }
              goto case 1;
            case 1:
            case 4:
              if (flag)
              {
                this.exporter = (OrderValuePool) new Bridge(this._Listener, !this.policy);
                goto case 2;
              }
              else
                goto case 2;
            case 2:
              exporter = this.exporter;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_9;
            case 5:
              goto label_9;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 2;
      }
label_9:
      return exporter;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private double[] IncludeAdvisor(double[] i) => new double[3]
    {
      this._Field[0] * i[0] - this._Field[3] * i[1] + this._Field[2] * i[2] + this._Field[4],
      this._Field[3] * i[0] + this._Field[0] * i[1] - this._Field[1] * i[2] + this._Field[5],
      -this._Field[2] * i[0] + this._Field[1] * i[1] + this._Field[0] * i[2] + this._Field[6]
    };

    [MethodImpl(MethodImplOptions.NoInlining)]
    private double[] PublishAdvisor(double[] var1) => new double[3]
    {
      this._Field[0] * var1[0] + this._Field[3] * var1[1] - this._Field[2] * var1[2] - this._Field[4],
      -this._Field[3] * var1[0] + this._Field[0] * var1[1] + this._Field[1] * var1[2] - this._Field[5],
      this._Field[2] * var1[0] - this._Field[1] * var1[1] + this._Field[0] * var1[2] - this._Field[6]
    };

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] PublishMerchant(double[] last)
    {
      int num1 = 3;
      if (true)
        goto label_6;
label_1:
      double[] numArray = this.IncludeAdvisor(last);
      goto label_8;
label_6:
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 3:
            flag = !this.policy;
            num2 = 2;
            break;
          case 1:
          case 2:
            if (!flag)
            {
              numArray = this.PublishAdvisor(last);
              num2 = 5;
              break;
            }
            goto label_1;
          case 4:
            goto label_1;
          case 5:
            goto label_8;
          default:
            if (Bridge.FindWrapper())
            {
              num1 = 4;
              continue;
            }
            goto label_8;
        }
        num1 = num2;
      }
label_8:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override List<double[]> FlushMerchant(List<double[]> reference)
    {
      List<double[]> numArrayList = new List<double[]>(reference.Count);
      foreach (double[] numArray in reference)
        numArrayList.Add(this.PublishMerchant(numArray));
      return numArrayList;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void CalcMerchant() => this.policy = !this.policy;

    internal static bool FindWrapper() => true;

    internal static bool SetWrapper() => false;
  }
}
