// Decompiled with JetBrains decompiler
// Type: FormState.StateMachine`1
// Assembly: Interna, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 443E8749-461D-4E08-9210-1C57029CD0B8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-0703de1e7a681eeac51ea409b707c66a2494735fe462e6aabc07972b556056f5.exe

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Windows.Forms;

namespace FormState
{
  public class StateMachine<T>
  {
    private static StateMachine<T> instance;
    private static frmMain _owner;
    private static Dictionary<string, T> _forms;
    private static Stack<Form> _stack;

    public StateMachine()
    {
      StateMachine<T>._forms = new Dictionary<string, T>();
      StateMachine<T>._stack = new Stack<Form>();
    }

    public static StateMachine<T> Instance(frmMain owner)
    {
      if (StateMachine<T>.instance == null)
      {
        StateMachine<T>.instance = new StateMachine<T>();
        StateMachine<T>._owner = owner;
        StateMachine<T>._owner.tsBack.Click += new EventHandler(StateMachine<T>.Back_Click);
      }
      return StateMachine<T>.instance;
    }

    public static StateMachine<T> Instance()
    {
      if (StateMachine<T>.instance == null)
        StateMachine<T>.instance = new StateMachine<T>();
      if (StateMachine<T>._owner == null)
        throw new Exception("I need an owner, please call that instance first");
      return StateMachine<T>.instance;
    }

    public void AddForm(string Name, T frm)
    {
    }

    public void AddForms()
    {
      foreach (System.Type type in Assembly.GetAssembly(typeof (T)).GetTypes())
      {
        if (type.BaseType == typeof (T))
        {
          object instance = (object) (T) Activator.CreateInstance(type);
          StateMachine<T>._forms.Add(instance.ToString(), (T) instance);
        }
      }
    }

    public void Navigate(string Name)
    {
    }

    private void Navigate(Form frm)
    {
      frm.MdiParent = (Form) StateMachine<T>._owner;
      frm.Dock = DockStyle.Fill;
      frm.FormBorderStyle = FormBorderStyle.None;
      frm.Show();
      frm.BringToFront();
      StateMachine<T>._owner.tsBack.Visible = this.CanGoBack();
    }

    private bool CanGoBack() => StateMachine<T>._stack.Count > 0;

    private static void Back_Click(object sender, EventArgs e)
    {
      Form frm = StateMachine<T>._stack.Pop();
      StateMachine<T>.instance.Navigate(frm);
    }
  }
}
