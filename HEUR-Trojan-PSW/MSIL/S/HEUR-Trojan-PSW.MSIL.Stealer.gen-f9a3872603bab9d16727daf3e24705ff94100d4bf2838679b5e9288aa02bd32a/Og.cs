// Decompiled with JetBrains decompiler
// Type: ib.Og
// Assembly: ContingentPropert, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 10450B75-DDB2-42D8-896D-5D92C0FA5DAE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9a3872603bab9d16727daf3e24705ff94100d4bf2838679b5e9288aa02bd32a.exe

using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace ib
{
  public class Og : Np
  {
    protected string may;
    private VG Gau;
    private static Og McO;

    public Og()
    {
      Jnb.vbPcO4();
      // ISSUE: explicit constructor call
      this.\u002Ector("");
    }

    public Og(string _param1)
    {
      Og.PcA();
      // ISSUE: explicit constructor call
      base.\u002Ector((TextWriter) null);
      this.zGC(_param1);
    }

    public Og(string _param1, TextWriter _param2)
    {
      Jnb.vbPcO4();
      // ISSUE: explicit constructor call
      base.\u002Ector(_param2);
      this.zGC(_param1);
      this.kRm = new Np.Cbl(((Np) this).ERt);
    }

    public override string tS3(PM _param1)
    {
      string str1 = base.tS3(_param1);
      if (_param1.MRU == -100)
      {
        string str2 = _param1.NSC(this.may);
        if (str2.Length < 32)
        {
          str1 = str1 + " <" + str2 + ">";
        }
        else
        {
label_4:
          str1 = str1 + " <" + str2.Substring(0, 29) + "...>";
          int num = 1;
          if (Og.kcF())
            goto label_5;
label_1:
          switch (num)
          {
            case 1:
              goto label_6;
            default:
              goto label_4;
          }
label_5:
          num = 1;
          goto label_1;
        }
label_6:;
      }
      return str1;
    }

    public void vGb(string _param1, TextWriter _param2)
    {
      this.hRD(_param2);
      this.zGC(_param1);
    }

    public void zGC(string _param1)
    {
      if (_param1 == null)
        goto label_3;
label_2:
      this.may = _param1;
      this.kRb = _param1.Length;
      this.KRC = 0;
      this.Gau.WRT = new SortedList<int, int>();
      int num1 = 0;
      if (!Og.kcF())
        goto label_5;
label_1:
      switch (num1)
      {
        default:
          this.Gau.WRT[0] = 1;
          return;
      }
label_5:
      int num2;
      num1 = num2;
      goto label_1;
label_3:
      _param1 = "";
      goto label_2;
    }

    public string kGe() => this.may;

    public bool OGO(Np.lbY _param1, out string _param2)
    {
      int krc = this.KRC;
      bool flag = _param1();
      int num1 = 0;
      if (Og.ycg() != null)
        goto label_5;
label_1:
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_4;
          default:
            if (!flag)
            {
              _param2 = "";
              int num2;
              num1 = Og.ycg() == null ? 1 : num2;
              continue;
            }
            goto label_2;
        }
      }
label_2:
      _param2 = this.may.Substring(krc, this.KRC - krc);
      return true;
label_4:
      return false;
label_5:
      num1 = 0;
      goto label_1;
    }

    public bool vGm(Np.lbY _param1, out aA _param2)
    {
      _param2.hR4 = this.KRC;
      bool flag = _param1();
      _param2.oRx = this.KRC;
      return flag;
    }

    public bool mGc(Np.lbY _param1, out int _param2)
    {
      _param2 = 0;
      string s;
      bool flag = !this.OGO(_param1, out s);
      int num1 = 0;
      if (Og.kcF())
        goto label_2;
label_1:
      int num2;
      num1 = num2;
label_2:
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_3;
          default:
            if (flag)
            {
              if (Og.ycg() == null)
              {
                num1 = 1;
                continue;
              }
              goto label_1;
            }
            else
              goto label_6;
        }
      }
label_3:
      return false;
label_6:
      return int.TryParse(s, out _param2);
    }

    public bool XG3(Np.lbY _param1, out double _param2)
    {
      _param2 = 0.0;
      string s;
      if (this.OGO(_param1, out s))
        goto label_8;
      else
        goto label_4;
label_1:
      int num1;
      int num2 = num1;
label_2:
      bool flag;
      switch (num2)
      {
        case 1:
          flag = false;
          goto label_5;
        default:
          goto label_5;
      }
label_4:
      if (Og.ycg() == null)
      {
        num2 = 1;
        goto label_2;
      }
      else
        goto label_1;
label_5:
      return flag;
label_8:
      if (double.TryParse(s, out _param2))
      {
        flag = true;
        goto label_5;
      }
      else
      {
        flag = false;
        num2 = 0;
        if (Og.kcF())
          goto label_2;
        else
          goto label_1;
      }
    }

    private void lGz(string _param1, string _param2)
    {
      int num1;
      int num2;
      this.Gau.Lz(this.may, this.KRC, out num1, out num2);
      this.bRO.WriteLine("<{0},{1}>{2}:{3}", (object) num1, (object) num2, (object) _param1, (object) _param2);
      this.bRO.Flush();
    }

    public virtual bool gSq(string _param1)
    {
      this.lGz("FATAL", _param1);
      throw new D8();
    }

    public bool EaT(string _param1)
    {
      this.lGz("WARNING", _param1);
      return true;
    }

    public bool haR(Og.IbW _param1)
    {
      while (true)
      {
        int num1;
        if (this.KRC < this.kRb)
        {
          int num2 = 0;
          if (!Og.kcF())
            goto label_7;
label_1:
          switch (num2)
          {
            default:
              num1 = Og.Jcy((object) _param1, this.may[this.KRC]) ? 1 : 0;
              goto label_9;
          }
label_7:
          int num3;
          num2 = num3;
          goto label_1;
        }
        else
          num1 = 0;
label_9:
        if (num1 != 0)
          ++this.KRC;
        else
          break;
      }
      return true;
    }

    public bool gaG(Og.IbW _param1)
    {
      int krc = this.KRC;
label_2:
      bool flag = this.KRC < this.kRb && _param1.o1R(this.may[this.KRC]);
      int num1 = 1;
      if (Og.kcF())
        goto label_6;
label_1:
      while (true)
      {
        switch (num1)
        {
          case 1:
            if (flag)
            {
              ++this.KRC;
              int num2;
              num1 = Og.kcF() ? 0 : num2;
              continue;
            }
            goto label_3;
          default:
            goto label_2;
        }
      }
label_3:
      return this.KRC > krc;
label_6:
      num1 = 1;
      goto label_1;
    }

    public bool haa(char _param1)
    {
      if (this.KRC >= this.kRb || (int) this.may[this.KRC] != (int) _param1)
        goto label_3;
      else
        goto label_4;
label_2:
      bool flag;
      return flag;
label_3:
      flag = false;
      goto label_2;
label_4:
      int num1 = 0;
      if (!Og.kcF())
        goto label_5;
label_1:
      switch (num1)
      {
        case 1:
          goto label_2;
        default:
          ++this.KRC;
          flag = true;
          goto label_2;
      }
label_5:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public bool ea4(char _param1, char _param2)
    {
      if (this.KRC + 1 >= this.kRb || (int) this.may[this.KRC] != (int) _param1)
        goto label_8;
      else
        goto label_6;
label_1:
      int num1;
      int num2 = num1;
label_2:
      int num3;
      switch (num2)
      {
        case 1:
          num3 = (int) this.may[this.KRC + 1] == (int) _param2 ? 1 : 0;
          goto label_9;
      }
label_3:
      bool flag;
      return flag;
label_6:
      if (Og.kcF())
      {
        num2 = 1;
        goto label_2;
      }
      else
        goto label_1;
label_8:
      num3 = 0;
label_9:
      if (num3 == 0)
      {
        flag = false;
        num2 = 0;
        if (Og.kcF())
          goto label_2;
        else
          goto label_1;
      }
      else
      {
        this.KRC += 2;
        flag = true;
        goto label_3;
      }
    }

    public bool rax(char _param1, char _param2, char _param3)
    {
      int num1 = 1;
label_1:
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            if (this.KRC + 2 < this.kRb)
            {
              if (Og.ycg() == null)
              {
                num2 = 0;
                continue;
              }
              goto label_1;
            }
            else
              goto label_10;
          case 2:
            goto label_6;
          default:
            goto label_7;
        }
      }
label_6:
      return false;
label_7:
      int num3;
      if ((int) this.may[this.KRC] == (int) _param1 && (int) this.may[this.KRC + 1] == (int) _param2)
      {
        num3 = (int) this.may[this.KRC + 2] == (int) _param3 ? 1 : 0;
        goto label_11;
      }
label_10:
      num3 = 0;
label_11:
      if (num3 != 0)
      {
        this.KRC += 3;
        return true;
      }
      goto label_6;
    }

    public bool Vav(char _param1, char _param2, char _param3, char _param4)
    {
      if (this.KRC + 3 < this.kRb && (int) this.may[this.KRC] == (int) _param1 && (int) this.may[this.KRC + 1] == (int) _param2 && (int) this.may[this.KRC + 2] == (int) _param3 && (int) this.may[this.KRC + 3] == (int) _param4)
        goto label_4;
label_2:
      return false;
label_4:
      this.KRC += 4;
      int num = 1;
      if (Og.ycg() != null)
        goto label_5;
label_1:
      switch (num)
      {
        case 1:
          return true;
        default:
          goto label_2;
      }
label_5:
      num = 1;
      goto label_1;
    }

    public bool taU(char _param1, char _param2, char _param3, char _param4, char _param5)
    {
      int num1 = 3;
label_1:
      int num2 = num1;
      bool flag;
      while (true)
      {
        int num3;
        switch (num2)
        {
          case 1:
            if ((int) this.may[this.KRC + 3] == (int) _param4)
            {
              num3 = (int) this.may[this.KRC + 4] == (int) _param5 ? 1 : 0;
              break;
            }
            goto case 2;
          case 2:
            num3 = 0;
            break;
          case 3:
            if (this.KRC + 4 >= this.kRb)
            {
              if (Og.kcF())
              {
                num2 = 2;
                continue;
              }
              goto label_1;
            }
            else if ((int) Og.Cch((object) this.may, this.KRC) == (int) _param1 && (int) Og.Cch((object) this.may, this.KRC + 1) == (int) _param2 && (int) this.may[this.KRC + 2] == (int) _param3)
            {
              if (Og.kcF())
              {
                num2 = 1;
                continue;
              }
              goto label_1;
            }
            else
              goto case 2;
          default:
            goto label_10;
        }
        if (num3 != 0)
        {
          this.KRC += 5;
          flag = true;
          num2 = Og.ycg() == null ? 0 : 0;
        }
        else
          break;
      }
      flag = false;
label_10:
      return flag;
    }

    public bool haf(
      char _param1,
      char _param2,
      char _param3,
      char _param4,
      char _param5,
      char _param6)
    {
      if (this.KRC + 5 >= this.kRb)
        goto label_8;
label_7:
      int num1;
      if ((int) this.may[this.KRC] == (int) _param1 && (int) this.may[this.KRC + 1] == (int) _param2 && (int) this.may[this.KRC + 2] == (int) _param3 && (int) this.may[this.KRC + 3] == (int) _param4 && (int) this.may[this.KRC + 4] == (int) _param5)
      {
        num1 = (int) this.may[this.KRC + 5] == (int) _param6 ? 1 : 0;
        goto label_9;
      }
label_8:
      num1 = 0;
label_9:
      bool flag1 = num1 != 0;
      int num2 = 1;
      if (Og.ycg() != null)
        goto label_10;
label_1:
      bool flag2;
      while (true)
      {
        switch (num2)
        {
          case 1:
            if (!flag1)
            {
              flag2 = false;
              num2 = 2;
              continue;
            }
            goto label_6;
          case 2:
            goto label_5;
          default:
            goto label_7;
        }
      }
label_5:
      return flag2;
label_6:
      this.KRC += 6;
      flag2 = true;
      goto label_5;
label_10:
      int num3;
      num2 = num3;
      goto label_1;
    }

    public bool Dah(
      char _param1,
      char _param2,
      char _param3,
      char _param4,
      char _param5,
      char _param6,
      char _param7)
    {
      int num1;
      if (this.KRC + 6 < this.kRb)
      {
label_4:
        while ((int) this.may[this.KRC] == (int) _param1)
        {
          int num2 = 0;
          if (Og.ycg() != null)
            goto label_6;
label_1:
          while (true)
          {
            switch (num2)
            {
              case 1:
                goto label_4;
              case 2:
                goto label_3;
              default:
                if ((int) this.may[this.KRC + 1] == (int) _param2)
                {
                  num2 = 2;
                  continue;
                }
                goto label_11;
            }
          }
label_3:
          if ((int) this.may[this.KRC + 2] == (int) _param3 && (int) this.may[this.KRC + 3] == (int) _param4 && (int) this.may[this.KRC + 4] == (int) _param5 && (int) this.may[this.KRC + 5] == (int) _param6)
          {
            num1 = (int) this.may[this.KRC + 6] == (int) _param7 ? 1 : 0;
            goto label_12;
          }
          else
            break;
label_6:
          num2 = 0;
          goto label_1;
        }
      }
label_11:
      num1 = 0;
label_12:
      if (num1 == 0)
        return false;
      this.KRC += 7;
      return true;
    }

    public bool ias(
      char _param1,
      char _param2,
      char _param3,
      char _param4,
      char _param5,
      char _param6,
      char _param7,
      char _param8)
    {
      int num1;
      if (this.KRC + 7 < this.kRb && (int) this.may[this.KRC] == (int) _param1)
      {
        int num2 = 0;
        if (Og.ycg() == null)
          goto label_2;
label_1:
        int num3;
        num2 = num3;
label_2:
        while (true)
        {
          switch (num2)
          {
            case 1:
              if ((int) Og.Cch((object) this.may, this.KRC + 2) == (int) _param3 && (int) this.may[this.KRC + 3] == (int) _param4 && (int) this.may[this.KRC + 4] == (int) _param5)
              {
                num2 = 2;
                continue;
              }
              goto label_13;
            case 2:
              goto label_4;
            default:
              if ((int) this.may[this.KRC + 1] == (int) _param2)
              {
                if (Og.ycg() == null)
                {
                  num2 = 1;
                  continue;
                }
                goto label_1;
              }
              else
                goto label_13;
          }
        }
label_4:
        if ((int) this.may[this.KRC + 5] == (int) _param6 && (int) this.may[this.KRC + 6] == (int) _param7)
        {
          num1 = (int) this.may[this.KRC + 7] == (int) _param8 ? 1 : 0;
          goto label_14;
        }
      }
label_13:
      num1 = 0;
label_14:
      if (num1 == 0)
        return false;
      this.KRC += 8;
      return true;
    }

    public bool yad(string _param1)
    {
      int length = _param1.Length;
      bool flag1 = this.KRC + length > this.kRb;
      int num = 0;
      if (Og.ycg() == null)
        goto label_10;
label_1:
      bool flag2;
      while (true)
      {
        switch (num)
        {
          case 1:
          case 2:
            goto label_7;
          default:
            if (flag1)
            {
              flag2 = false;
              num = 2;
              continue;
            }
            goto label_9;
        }
      }
label_7:
      return flag2;
label_9:
      for (int index = 0; index < length; ++index)
      {
        if ((int) Og.Cch((object) _param1, index) != (int) this.may[this.KRC + index])
        {
          flag2 = false;
          num = Og.ycg() != null ? 1 : 1;
          goto label_1;
        }
      }
      this.KRC += length;
      flag2 = true;
      goto label_7;
label_10:
      num = 0;
      goto label_1;
    }

    public bool qaw(char _param1)
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_3;
          case 2:
            if (this.KRC < this.kRb)
            {
              num1 = !Og.kcF() ? 1 : 1;
              continue;
            }
            goto label_7;
          default:
            goto label_2;
        }
      }
label_2:
      return false;
label_3:
      int num2 = (int) char.ToUpper(Og.Cch((object) this.may, this.KRC)) == (int) _param1 ? 1 : 0;
      goto label_8;
label_7:
      num2 = 0;
label_8:
      if (num2 != 0)
      {
        ++this.KRC;
        return true;
      }
      goto label_2;
    }

    public bool nai(char _param1, char _param2)
    {
      bool flag1 = this.KRC + 1 < this.kRb && (int) char.ToUpper(this.may[this.KRC]) == (int) char.ToUpper(_param1) && (int) char.ToUpper(this.may[this.KRC + 1]) == (int) Og.Pct(_param2);
      int num1 = 0;
      if (!Og.kcF())
        goto label_6;
label_1:
      bool flag2;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_4;
          default:
            if (!flag1)
            {
              flag2 = false;
              num1 = Og.ycg() != null ? 0 : 1;
              continue;
            }
            goto label_2;
        }
      }
label_2:
      this.KRC += 2;
      flag2 = true;
label_4:
      return flag2;
label_6:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public bool GaQ(char _param1, char _param2, char _param3)
    {
      bool flag;
      if (this.KRC + 2 >= this.kRb || (int) char.ToUpper(this.may[this.KRC]) != (int) char.ToUpper(_param1) || (int) char.ToUpper(Og.Cch((object) this.may, this.KRC + 1)) != (int) Og.Pct(_param2) || (int) char.ToUpper(this.may[this.KRC + 2]) != (int) Og.Pct(_param3))
        flag = false;
      else
        goto label_5;
label_4:
      return flag;
label_5:
      int num = 1;
      if (Og.ycg() == null)
        goto label_6;
label_1:
      switch (num)
      {
        case 1:
          this.KRC += 3;
          flag = true;
          goto label_4;
        default:
          goto label_4;
      }
label_6:
      num = 1;
      goto label_1;
    }

    public bool OaA(char _param1, char _param2, char _param3, char _param4)
    {
      if (this.KRC + 3 >= this.kRb || (int) Og.Pct(this.may[this.KRC]) != (int) Og.Pct(_param1) || (int) Og.Pct(Og.Cch((object) this.may, this.KRC + 1)) != (int) char.ToUpper(_param2))
        goto label_9;
      else
        goto label_7;
label_3:
      bool flag;
      return flag;
label_7:
      int num1 = 0;
      if (!Og.kcF())
        goto label_8;
label_1:
      int num2;
      switch (num1)
      {
        case 1:
          goto label_3;
        default:
          if ((int) char.ToUpper(Og.Cch((object) this.may, this.KRC + 2)) == (int) char.ToUpper(_param3))
          {
            num2 = (int) char.ToUpper(this.may[this.KRC + 3]) == (int) Og.Pct(_param4) ? 1 : 0;
            goto label_10;
          }
          else
            goto label_9;
      }
label_8:
      int num3;
      num1 = num3;
      goto label_1;
label_9:
      num2 = 0;
label_10:
      if (num2 == 0)
      {
        flag = false;
        goto label_3;
      }
      else
      {
        this.KRC += 4;
        flag = true;
        goto label_3;
      }
    }

    public bool SaL(char _param1, char _param2, char _param3, char _param4, char _param5)
    {
      if (this.KRC + 4 >= this.kRb || (int) char.ToUpper(this.may[this.KRC]) != (int) Og.Pct(_param1) || (int) char.ToUpper(this.may[this.KRC + 1]) != (int) char.ToUpper(_param2) || (int) char.ToUpper(this.may[this.KRC + 2]) != (int) Og.Pct(_param3) || (int) char.ToUpper(this.may[this.KRC + 3]) != (int) char.ToUpper(_param4) || (int) char.ToUpper(this.may[this.KRC + 4]) != (int) Og.Pct(_param5))
        goto label_3;
      else
        goto label_4;
label_2:
      bool flag;
      return flag;
label_3:
      flag = false;
      goto label_2;
label_4:
      this.KRC += 5;
      flag = true;
      int num1 = 0;
      if (Og.ycg() != null)
        goto label_5;
label_1:
      switch (num1)
      {
        case 1:
          goto label_3;
        default:
          goto label_2;
      }
label_5:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public bool maM(
      char _param1,
      char _param2,
      char _param3,
      char _param4,
      char _param5,
      char _param6)
    {
      if (this.KRC + 5 >= this.kRb || (int) char.ToUpper(this.may[this.KRC]) != (int) char.ToUpper(_param1) || (int) char.ToUpper(this.may[this.KRC + 1]) != (int) char.ToUpper(_param2))
        goto label_10;
      else
        goto label_8;
label_4:
      bool flag;
      return flag;
label_8:
      int num1 = 0;
      if (Og.kcF())
        goto label_9;
label_1:
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_6;
          case 2:
            goto label_4;
          default:
            if ((int) char.ToUpper(Og.Cch((object) this.may, this.KRC + 2)) == (int) char.ToUpper(_param3) && (int) char.ToUpper(this.may[this.KRC + 3]) == (int) char.ToUpper(_param4) && (int) Og.Pct(this.may[this.KRC + 4]) == (int) Og.Pct(_param5))
            {
              num1 = Og.ycg() != null ? 1 : 1;
              continue;
            }
            goto label_10;
        }
      }
label_6:
      int num2 = (int) Og.Pct(this.may[this.KRC + 5]) == (int) Og.Pct(_param6) ? 1 : 0;
      goto label_11;
label_9:
      num1 = 0;
      goto label_1;
label_10:
      num2 = 0;
label_11:
      if (num2 != 0)
      {
        this.KRC += 6;
        flag = true;
        goto label_4;
      }
      else
      {
        flag = false;
        goto label_4;
      }
    }

    public bool qa1(
      char _param1,
      char _param2,
      char _param3,
      char _param4,
      char _param5,
      char _param6,
      char _param7)
    {
      int num1;
      if (this.KRC + 6 < this.kRb && (int) char.ToUpper(this.may[this.KRC]) == (int) char.ToUpper(_param1) && (int) Og.Pct(this.may[this.KRC + 1]) == (int) char.ToUpper(_param2) && (int) char.ToUpper(this.may[this.KRC + 2]) == (int) char.ToUpper(_param3) && (int) char.ToUpper(Og.Cch((object) this.may, this.KRC + 3)) == (int) Og.Pct(_param4) && (int) char.ToUpper(this.may[this.KRC + 4]) == (int) char.ToUpper(_param5))
      {
        int num2 = 2;
        while (true)
        {
          switch (num2)
          {
            case 1:
              goto label_3;
            case 2:
              if ((int) char.ToUpper(Og.Cch((object) this.may, this.KRC + 5)) == (int) Og.Pct(_param6))
              {
                int num3;
                num2 = Og.ycg() == null ? 1 : num3;
                continue;
              }
              goto label_8;
            default:
              goto label_7;
          }
        }
label_3:
        num1 = (int) char.ToUpper(Og.Cch((object) this.may, this.KRC + 6)) == (int) char.ToUpper(_param7) ? 1 : 0;
        goto label_9;
      }
      else
        goto label_8;
label_7:
      return false;
label_8:
      num1 = 0;
label_9:
      if (num1 != 0)
      {
        this.KRC += 7;
        return true;
      }
      goto label_7;
    }

    public bool Ia7(string _param1)
    {
      int length = _param1.Length;
      bool flag;
      if (this.KRC + length <= this.kRb)
      {
label_2:
        int index = 0;
        int num1 = 2;
        while (true)
        {
          switch (num1)
          {
            case 1:
              goto label_7;
            case 2:
              if (index < length)
              {
                num1 = 3;
                continue;
              }
              goto label_10;
            case 3:
              if ((int) _param1[index] == (int) Og.Pct(this.may[this.KRC + index]))
              {
                ++index;
                goto case 2;
              }
              else
              {
                flag = false;
                int num2;
                num1 = Og.kcF() ? 1 : num2;
                continue;
              }
            default:
              goto label_2;
          }
        }
label_10:
        this.KRC += length;
        flag = true;
      }
      else
        flag = false;
label_7:
      return flag;
    }

    public bool Cag(char _param1, char _param2)
    {
      if (this.KRC >= this.kRb || (int) this.may[this.KRC] < (int) _param1 || (int) this.may[this.KRC] > (int) _param2)
        goto label_6;
      else
        goto label_3;
label_2:
      bool flag;
      return flag;
label_3:
      ++this.KRC;
      int num1 = 1;
      if (!Og.kcF())
        goto label_4;
label_1:
      while (true)
      {
        switch (num1)
        {
          case 1:
            flag = true;
            num1 = !Og.kcF() ? 0 : 0;
            continue;
          default:
            goto label_2;
        }
      }
label_4:
      int num2;
      num1 = num2;
      goto label_1;
label_6:
      flag = false;
      goto label_2;
    }

    public bool haj(char _param1, char _param2, char _param3, char _param4)
    {
      if (this.KRC < this.kRb)
        goto label_6;
label_5:
      return false;
label_6:
      char ch = this.may[this.KRC];
      if ((int) ch < (int) _param1 || (int) ch > (int) _param2)
        goto label_7;
      else
        goto label_8;
label_1:
      bool flag;
      int num1;
      int num2;
      switch (num2)
      {
        case 1:
          goto label_5;
        case 2:
          num1 = 1;
          goto label_10;
        default:
          if (flag)
          {
            ++this.KRC;
            return true;
          }
          goto case 1;
      }
label_7:
      num1 = (int) ch < (int) _param3 ? 0 : ((int) ch <= (int) _param4 ? 1 : 0);
      goto label_10;
label_8:
      num2 = Og.ycg() != null ? 1 : 2;
      goto label_1;
label_10:
      flag = num1 != 0;
      num2 = 0;
      if (!Og.kcF())
      {
        int num3;
        num2 = num3;
        goto label_1;
      }
      else
        goto label_1;
    }

    public bool Qar(
      char _param1,
      char _param2,
      char _param3,
      char _param4,
      char _param5,
      char _param6)
    {
      if (this.KRC < this.kRb)
        goto label_4;
label_3:
      bool flag = false;
      goto label_5;
label_4:
      char ch = this.may[this.KRC];
      if ((int) ch < (int) _param1 || (int) ch > (int) _param2)
        goto label_9;
      else
        goto label_14;
label_1:
      int num1;
      int num2;
      switch (num2)
      {
        case 1:
          num1 = (int) ch <= (int) _param6 ? 1 : 0;
          goto label_15;
        case 2:
          if ((int) ch <= (int) _param4)
            goto label_14;
          else
            goto label_11;
        default:
          goto label_5;
      }
label_9:
      if ((int) ch >= (int) _param3)
      {
        num2 = 2;
        goto label_1;
      }
label_11:
      if ((int) ch >= (int) _param5)
      {
        num2 = !Og.kcF() ? 0 : 1;
        goto label_1;
      }
      else
      {
        num1 = 0;
        goto label_15;
      }
label_14:
      num1 = 1;
label_15:
      if (num1 != 0)
      {
        ++this.KRC;
        flag = true;
        num2 = 0;
        if (Og.ycg() == null)
        {
          num2 = 0;
          goto label_1;
        }
        else
          goto label_1;
      }
      else
        goto label_3;
label_5:
      return flag;
    }

    public bool WaZ(
      char _param1,
      char _param2,
      char _param3,
      char _param4,
      char _param5,
      char _param6,
      char _param7,
      char _param8)
    {
      int num1 = 2;
label_1:
      int num2 = num1;
      char ch;
      while (true)
      {
        bool flag;
        switch (num2)
        {
          case 1:
            if (flag)
            {
              ch = this.may[this.KRC];
              if ((int) ch >= (int) _param1)
              {
                if ((int) ch > (int) _param2)
                {
                  if (Og.kcF())
                  {
                    num2 = 0;
                    continue;
                  }
                  goto label_1;
                }
                else
                  goto label_20;
              }
              else
                goto default;
            }
            else
              goto label_18;
          case 2:
            flag = this.KRC < this.kRb;
            num2 = !Og.kcF() ? 1 : 1;
            continue;
          case 3:
            if ((int) ch <= (int) _param4)
              goto label_20;
            else
              break;
          case 4:
            goto label_19;
          default:
            if ((int) ch >= (int) _param3)
            {
              if (Og.ycg() == null)
              {
                num2 = 3;
                continue;
              }
              goto label_1;
            }
            else
              break;
        }
        if ((int) ch < (int) _param5 || (int) ch > (int) _param6)
        {
          if ((int) ch < (int) _param7)
            num2 = !Og.kcF() ? 1 : 4;
          else
            break;
        }
        else
          goto label_20;
      }
      int num3 = (int) ch <= (int) _param8 ? 1 : 0;
      goto label_21;
label_18:
      return false;
label_19:
      num3 = 0;
      goto label_21;
label_20:
      num3 = 1;
label_21:
      if (num3 != 0)
      {
        ++this.KRC;
        return true;
      }
      goto label_18;
    }

    public bool Yat(string _param1)
    {
      int num1 = 1;
label_1:
      int num2 = num1;
      bool flag1;
      while (true)
      {
        bool flag2;
        int index;
        char ch;
        switch (num2)
        {
          case 1:
            flag2 = this.KRC < this.kRb;
            num2 = !Og.kcF() ? 0 : 0;
            continue;
          case 2:
label_7:
            index += 2;
            break;
          case 3:
            goto label_14;
          case 4:
            goto label_3;
          default:
            if (flag2)
            {
              ch = this.may[this.KRC];
              index = 0;
              break;
            }
            goto label_6;
        }
        if (index >= Og.kc8((object) _param1) - 1)
        {
          ++this.KRC;
          flag1 = true;
          num2 = 4;
        }
        else if ((int) ch < (int) _param1[index] || (int) ch > (int) _param1[index + 1])
        {
          if (Og.ycg() == null)
            num2 = 3;
          else
            goto label_1;
        }
        else
          goto label_7;
      }
label_3:
      return flag1;
label_6:
      flag1 = false;
      goto label_3;
label_14:
      flag1 = false;
      goto label_3;
    }

    public bool PaD(string _param1)
    {
      bool flag1;
      if (this.KRC < this.kRb)
      {
        int num1 = 3;
        if (Og.ycg() == null)
          goto label_2;
label_1:
        int num2;
        num1 = num2;
label_2:
        while (true)
        {
          int index;
          char ch;
          bool flag2;
          switch (num1)
          {
            case 1:
              if (flag2)
              {
                if ((int) ch < (int) _param1[index] || (int) ch > (int) _param1[index + 1])
                {
                  index += 2;
                  break;
                }
                goto label_11;
              }
              else
              {
                ++this.KRC;
                flag1 = true;
                num1 = 2;
                continue;
              }
            case 2:
              goto label_7;
            case 3:
              ch = this.may[this.KRC];
              index = 0;
              break;
            default:
              goto label_6;
          }
          flag2 = index < _param1.Length - 1;
          if (Og.ycg() == null)
            num1 = 1;
          else
            goto label_1;
        }
label_11:
        flag1 = false;
        goto label_7;
      }
label_6:
      flag1 = false;
label_7:
      return flag1;
    }

    public bool map(char _param1, char _param2)
    {
      if (this.KRC >= this.kRb)
        goto label_10;
      else
        goto label_6;
label_1:
      int num1;
      int num2;
      switch (num2)
      {
        case 1:
          num1 = (int) this.may[this.KRC] == (int) _param2 ? 1 : 0;
          goto label_11;
        default:
          return true;
      }
label_6:
      if ((int) Og.Cch((object) this.may, this.KRC) != (int) _param1)
      {
        num2 = Og.ycg() != null ? 1 : 1;
        goto label_1;
      }
      else
      {
        num1 = 1;
        goto label_11;
      }
label_10:
      num1 = 0;
label_11:
      if (num1 == 0)
        return false;
      ++this.KRC;
      num2 = 0;
      if (!Og.kcF())
      {
        int num3;
        num2 = num3;
        goto label_1;
      }
      else
        goto label_1;
    }

    public bool HaS(char _param1, char _param2, char _param3)
    {
      if (this.KRC >= this.kRb)
        goto label_4;
      else
        goto label_6;
label_2:
      bool flag;
      return flag;
label_3:
label_4:
      flag = false;
      int num = 1;
      if (!Og.kcF())
        goto label_5;
label_1:
      switch (num)
      {
        case 1:
          goto label_2;
        default:
          goto label_3;
      }
label_5:
      num = 0;
      goto label_1;
label_6:
      char ch = this.may[this.KRC];
      if ((int) ch == (int) _param1 || (int) ch == (int) _param2 || (int) ch == (int) _param3)
      {
        ++this.KRC;
        flag = true;
        goto label_2;
      }
      else
        goto label_3;
    }

    public bool xa2(char _param1, char _param2, char _param3, char _param4)
    {
      if (this.KRC < this.kRb)
      {
        char ch = this.may[this.KRC];
        if ((int) ch == (int) _param1)
          goto label_11;
        else
          goto label_3;
label_1:
        int num1;
        while (true)
        {
          switch (num1)
          {
            case 1:
              goto label_9;
            case 2:
              ++this.KRC;
              num1 = Og.kcF() ? 1 : 0;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        int num2;
        if ((int) ch != (int) _param2 && (int) ch != (int) _param3)
        {
          num2 = (int) ch == (int) _param4 ? 1 : 0;
          goto label_12;
        }
        else
          goto label_11;
label_9:
        return true;
label_3:
        int num3;
        num1 = Og.kcF() ? 0 : num3;
        goto label_1;
label_11:
        num2 = 1;
label_12:
        if (num2 != 0)
        {
          num1 = 1;
          if (Og.ycg() == null)
          {
            num1 = 2;
            goto label_1;
          }
          else
            goto label_1;
        }
      }
      return false;
    }

    public bool QaW(char _param1, char _param2, char _param3, char _param4, char _param5)
    {
      if (this.KRC >= this.kRb)
        goto label_5;
      else
        goto label_8;
label_2:
      bool flag;
      return flag;
label_5:
      flag = false;
      goto label_2;
label_8:
      char ch = this.may[this.KRC];
      if ((int) ch == (int) _param1 || (int) ch == (int) _param2 || (int) ch == (int) _param3 || (int) ch == (int) _param4 || (int) ch == (int) _param5)
        goto label_6;
label_4:
      goto label_5;
label_6:
      int num1 = 0;
      if (!Og.kcF())
        goto label_7;
label_1:
      switch (num1)
      {
        case 1:
          goto label_4;
        case 2:
          goto label_2;
        default:
          ++this.KRC;
          flag = true;
          goto label_2;
      }
label_7:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public bool MaF(
      char _param1,
      char _param2,
      char _param3,
      char _param4,
      char _param5,
      char _param6)
    {
      if (this.KRC < this.kRb)
      {
        char ch = this.may[this.KRC];
        if ((int) ch == (int) _param1 || (int) ch == (int) _param2 || (int) ch == (int) _param3)
          goto label_12;
        else
          goto label_5;
label_1:
        int num1;
        int num2 = num1;
label_2:
        while (true)
        {
          switch (num2)
          {
            case 1:
              goto label_4;
            case 2:
              if ((int) ch != (int) _param4 && (int) ch != (int) _param5)
              {
                if (Og.kcF())
                {
                  num2 = 1;
                  continue;
                }
                goto label_1;
              }
              else
                goto label_12;
            default:
              goto label_6;
          }
        }
label_4:
        int num3 = (int) ch == (int) _param6 ? 1 : 0;
        goto label_13;
label_6:
        bool flag;
        if (flag)
        {
          ++this.KRC;
          return true;
        }
        goto label_11;
label_5:
        num2 = 2;
        goto label_2;
label_12:
        num3 = 1;
label_13:
        flag = num3 != 0;
        num2 = 0;
        if (Og.kcF())
          goto label_2;
        else
          goto label_1;
      }
label_11:
      return false;
    }

    public bool da8(
      char _param1,
      char _param2,
      char _param3,
      char _param4,
      char _param5,
      char _param6,
      char _param7)
    {
      if (this.KRC >= this.kRb)
        goto label_3;
      else
        goto label_7;
label_1:
      char ch;
      int num1;
      int num2;
      switch (num1)
      {
        case 2:
          if ((int) ch != (int) _param4 && (int) ch != (int) _param5 && (int) ch != (int) _param6)
          {
            num2 = (int) ch == (int) _param7 ? 1 : 0;
            goto label_11;
          }
          else
            goto label_10;
        default:
          goto label_9;
      }
label_3:
      bool flag = false;
      num1 = 0;
      if (Og.ycg() != null)
      {
        num1 = 0;
        goto label_1;
      }
      else
        goto label_1;
label_7:
      ch = this.may[this.KRC];
      if ((int) ch != (int) _param1 && (int) ch != (int) _param2 && (int) ch != (int) _param3)
      {
        num1 = 2;
        goto label_1;
      }
      else
        goto label_10;
label_9:
      return flag;
label_10:
      num2 = 1;
label_11:
      if (num2 != 0)
      {
        ++this.KRC;
        flag = true;
        goto label_9;
      }
      else
        goto label_3;
    }

    public bool UaE(
      char _param1,
      char _param2,
      char _param3,
      char _param4,
      char _param5,
      char _param6,
      char _param7,
      char _param8)
    {
      int num1 = 3;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        while (true)
        {
          char ch;
          int num3;
          switch (num2)
          {
            case 1:
              if ((int) ch != (int) _param5 && (int) ch != (int) _param6 && (int) ch != (int) _param7)
              {
                num3 = (int) ch == (int) _param8 ? 1 : 0;
                goto label_14;
              }
              else
                goto label_13;
            case 2:
              if (flag2)
              {
                ch = this.may[this.KRC];
                if ((int) ch != (int) _param1 && (int) ch != (int) _param2 && (int) ch != (int) _param3 && (int) ch != (int) _param4)
                {
                  num2 = Og.ycg() == null ? 1 : 0;
                  continue;
                }
                goto label_13;
              }
              else
                break;
            case 3:
              goto label_7;
            case 4:
              goto label_6;
            default:
              goto label_10;
          }
label_4:
          flag1 = false;
          num2 = 4;
          continue;
label_13:
          num3 = 1;
label_14:
          if (num3 != 0)
            num2 = !Og.kcF() ? 0 : 0;
          else
            goto label_4;
        }
label_7:
        flag2 = this.KRC < this.kRb;
        num1 = 2;
      }
label_6:
      return flag1;
label_10:
      ++this.KRC;
      flag1 = true;
      goto label_6;
    }

    public bool da0(string _param1)
    {
      int num1 = 1;
label_1:
      int num2 = num1;
      bool flag1;
      bool flag2;
      while (true)
      {
        switch (num2)
        {
          case 1:
            flag2 = this.KRC < this.kRb;
            if (Og.ycg() == null)
            {
              num2 = 0;
              continue;
            }
            goto label_1;
          case 2:
            goto label_9;
          default:
            if (!flag2 || _param1.IndexOf(this.may[this.KRC]) == -1)
            {
              flag1 = false;
              if (Og.kcF())
              {
                num2 = 2;
                continue;
              }
              goto label_1;
            }
            else
              goto label_3;
        }
      }
label_3:
      ++this.KRC;
      flag1 = true;
label_9:
      return flag1;
    }

    public bool kaY(string _param1)
    {
      if (this.KRC >= this.kRb || _param1.IndexOf(this.may[this.KRC]) != -1)
        goto label_6;
      else
        goto label_4;
label_3:
      bool flag;
      return flag;
label_4:
      ++this.KRC;
      int num1 = 0;
      if (Og.ycg() != null)
        goto label_5;
label_1:
      switch (num1)
      {
        case 1:
          goto label_3;
        default:
          flag = true;
          goto label_3;
      }
label_5:
      int num2;
      num1 = num2;
      goto label_1;
label_6:
      flag = false;
      goto label_3;
    }

    public bool Uak(Og.IbW _param1)
    {
      if (this.KRC >= this.kRb || !_param1.o1R(this.may[this.KRC]))
        goto label_3;
      else
        goto label_4;
label_2:
      bool flag;
      return flag;
label_3:
      flag = false;
      goto label_2;
label_4:
      ++this.KRC;
      flag = true;
      int num = 0;
      if (Og.ycg() != null)
        goto label_5;
label_1:
      switch (num)
      {
        default:
          goto label_2;
      }
label_5:
      num = 0;
      goto label_1;
    }

    public bool paq(Og.Nbf _param1)
    {
      int num1 = 2;
label_1:
      int num2 = num1;
      int num3;
      bool flag;
      while (true)
      {
        Og.Nbf.cbw h14;
        char ch;
        int krc;
        int num4;
        switch (num2)
        {
          case 1:
            num3 = this.KRC - 1;
            krc = this.KRC;
            break;
          case 2:
            h14 = _param1.h14;
            num2 = !Og.kcF() ? 1 : 1;
            continue;
          case 3:
label_5:
            flag = num3 >= this.KRC;
            num2 = 5;
            continue;
          case 4:
            if (h14.x1Q != null)
            {
              if (Og.kcF())
              {
                num2 = 0;
                continue;
              }
              goto label_1;
            }
            else
              goto label_19;
          case 5:
            goto label_10;
          case 6:
label_3:
            if (h14.V1w)
              num3 = krc;
            ch = this.may[krc];
            num2 = 4;
            continue;
          default:
            if ((int) ch >= (int) h14.T1i && (int) ch <= (int) h14.T1i + h14.x1Q.Length - 1)
            {
              num4 = h14.x1Q[(int) ch - (int) h14.T1i] == null ? 1 : 0;
              goto label_20;
            }
            else
              goto label_19;
        }
label_8:
        if (krc < this.kRb)
          goto label_3;
        else
          goto label_5;
label_19:
        num4 = 1;
label_20:
        if (num4 != 0)
        {
          num2 = Og.ycg() != null ? 3 : 3;
        }
        else
        {
          h14 = h14.x1Q[(int) ch - (int) h14.T1i];
          ++krc;
          goto label_8;
        }
      }
label_10:
      if (!flag)
        return false;
      this.KRC = num3;
      return true;
    }

    internal static bool kcF() => Og.McO == null;

    internal static Og ycg() => Og.McO;

    internal static void PcA() => Jnb.vbPcO4();

    internal static bool Jcy([In] object obj0, char _param1) => ((Og.IbW) obj0).o1R(_param1);

    internal static char Cch([In] object obj0, [In] int obj1) => ((string) obj0)[obj1];

    internal static char Pct([In] char obj0) => char.ToUpper(obj0);

    internal static int kc8([In] object obj0) => ((string) obj0).Length;

    public sealed class IbW
    {
      private BitArray g1G;
      private bool p1a;
      private static Og.IbW UDb;

      public IbW(BitArray _param1)
      {
        Jnb.vbPcO4();
        // ISSUE: explicit constructor call
        this.\u002Ector(_param1, false);
      }

      public IbW(BitArray _param1, bool _param2)
      {
        Og.IbW.wDZ();
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this.g1G = new BitArray(_param1);
        this.p1a = _param2;
      }

      public IbW(Og.IbW.fby[] _param1, char[] _param2)
      {
        Jnb.vbPcO4();
        // ISSUE: explicit constructor call
        this.\u002Ector(_param1, _param2, false);
      }

      public IbW(Og.IbW.fby[] _param1, char[] _param2, bool _param3)
      {
        Jnb.vbPcO4();
        // ISSUE: explicit constructor call
        base.\u002Ector();
        int num1 = 0;
        bool flag1 = _param1 != null;
        int num2 = 0;
        if (true)
          goto label_2;
label_1:
        int num3;
        num2 = num3;
label_2:
        while (true)
        {
          Og.IbW.fby[] fbyArray1;
          bool flag2;
          int index1;
          int num4;
          int index2;
          int index3;
          Og.IbW.fby[] fbyArray2;
          Og.IbW.fby fby1;
          char[] chArray1;
          int index4;
          char[] chArray2;
          switch (num2)
          {
            case 1:
              ++index1;
              num2 = false ? 4 : 5;
              continue;
            case 2:
label_29:
              this.g1G[(int) chArray2[index2]] = true;
              num2 = 6;
              continue;
            case 3:
              index3 = 0;
              break;
            case 4:
label_9:
              num1 = num4;
              goto label_31;
            case 5:
label_18:
              if (index1 < fbyArray1.Length)
              {
                Og.IbW.fby fby2 = fbyArray1[index1];
                for (int s1h = (int) fby2.s1h; s1h <= (int) fby2.C1s; ++s1h)
                  this.g1G[s1h] = true;
                goto case 1;
              }
              else
                goto label_17;
            case 6:
              ++index2;
              goto label_21;
            case 7:
              ++index3;
              break;
            case 8:
              if ((int) fby1.C1s > num1)
              {
                num1 = (int) fby1.C1s;
                num2 = 7;
                continue;
              }
              goto case 7;
            case 9:
label_22:
              flag2 = _param2 != null;
              num2 = 10;
              continue;
            case 10:
              if (flag2)
              {
                num2 = true ? 11 : 4;
                continue;
              }
              goto label_14;
            case 11:
              chArray1 = _param2;
              index4 = 0;
              goto label_20;
            default:
              if (flag1)
              {
                fbyArray2 = _param1;
                num2 = 3;
                continue;
              }
              goto label_8;
          }
          if (index3 < fbyArray2.Length)
          {
            fby1 = fbyArray2[index3];
            num2 = 8;
            continue;
          }
          goto label_22;
label_14:
          this.g1G = new BitArray(num1 + 1, false);
          if (_param1 != null)
          {
            fbyArray1 = _param1;
            index1 = 0;
            goto label_18;
          }
label_17:
          if (_param2 != null)
          {
            chArray2 = _param2;
            index2 = 0;
            goto label_21;
          }
          else
            goto label_19;
label_20:
          if (index4 < chArray1.Length)
          {
            num4 = (int) chArray1[index4];
            if (num4 > num1)
              goto label_9;
            else
              goto label_31;
          }
          else
            goto label_14;
label_21:
          if (index2 < chArray2.Length)
            goto label_29;
          else
            goto label_19;
label_31:
          ++index4;
          goto label_20;
        }
label_8:
        num3 = 9;
        goto label_1;
label_19:
        this.p1a = _param3;
      }

      public bool o1R(char _param1)
      {
        int num1 = 2;
        while (true)
        {
          switch (num1)
          {
            case 1:
              goto label_6;
            case 2:
              if ((int) _param1 < this.g1G.Length)
              {
                num1 = Og.IbW.FD9() ? 1 : 1;
                continue;
              }
              goto label_7;
            default:
              goto label_2;
          }
        }
label_2:
        bool flag;
        return flag;
label_6:
        int num2 = this.g1G[(int) _param1] ? 1 : 0;
        goto label_8;
label_7:
        num2 = 0;
label_8:
        flag = num2 != 0;
        if (this.p1a)
          return !flag;
        goto label_2;
      }

      internal static bool FD9() => Og.IbW.UDb == null;

      internal static Og.IbW DDv() => Og.IbW.UDb;

      internal static void wDZ() => Jnb.vbPcO4();

      public struct fby
      {
        public char s1h;
        public char C1s;
        internal static object yDm;

        public fby(char _param1, char _param2)
        {
          Jnb.vbPcO4();
          this.s1h = _param1;
          this.C1s = _param2;
        }

        internal static bool aDU() => Og.IbW.fby.yDm == null;

        internal static object yDM() => Og.IbW.fby.yDm;
      }
    }

    public sealed class Nbf
    {
      internal Og.Nbf.cbw h14;
      private static Og.Nbf JDC;

      public Nbf(string[] _param1)
      {
        Jnb.vbPcO4();
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this.h14 = new Og.Nbf.cbw(char.MinValue, 0, _param1);
      }

      internal static bool GDQ() => Og.Nbf.JDC == null;

      internal static Og.Nbf LD3() => Og.Nbf.JDC;

      internal class cbw
      {
        internal char R1d;
        internal bool V1w;
        internal char T1i;
        internal Og.Nbf.cbw[] x1Q;
        private static Og.Nbf.cbw hDH;

        internal cbw(char _param1, int _param2, string[] _param3)
        {
          Jnb.vbPcO4();
          // ISSUE: explicit constructor call
          base.\u002Ector();
          this.R1d = _param1;
          char ch1 = char.MinValue;
          this.T1i = char.MaxValue;
          HashSet<char> charSet = new HashSet<char>();
          string[] strArray1 = _param3;
          int index1 = 0;
          int num1 = 6;
          bool flag1;
          while (true)
          {
            bool flag2;
            char ch2;
            string str;
            bool flag3;
            int num2;
            switch (num1)
            {
              case 1:
                num2 = _param2 > str.Length ? 1 : 0;
                goto label_38;
              case 2:
                if (str != null)
                {
                  if (true)
                  {
                    num1 = 1;
                    continue;
                  }
                  break;
                }
                num2 = 1;
                goto label_38;
              case 3:
                if (flag3)
                  goto label_29;
label_6:
                if ((int) ch2 > (int) ch1)
                  goto label_32;
label_4:
                goto label_5;
label_32:
                ch1 = ch2;
                goto label_4;
label_29:
                this.T1i = ch2;
                goto label_6;
              case 4:
                goto label_7;
              case 5:
              case 6:
                if (index1 >= strArray1.Length)
                {
                  flag1 = Og.Nbf.cbw.LDk((object) charSet) == 0;
                  num1 = 4;
                  continue;
                }
                str = strArray1[index1];
                num1 = 2;
                continue;
              case 7:
                if (!flag2)
                {
                  ch2 = str[_param2];
                  charSet.Add(ch2);
                  flag3 = (int) ch2 < (int) this.T1i;
                  num1 = 3;
                  continue;
                }
                this.V1w = true;
                goto label_5;
              default:
                goto label_33;
            }
label_1:
            int num3;
            num1 = num3;
            continue;
label_5:
            ++index1;
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_1;
label_38:
            if (num2 == 0)
            {
              flag2 = _param2 == Og.Nbf.cbw.DDl((object) str);
              num1 = true ? 7 : 6;
            }
            else
              goto label_5;
          }
label_7:
          if (flag1)
          {
            this.x1Q = (Og.Nbf.cbw[]) null;
            return;
          }
label_33:
          this.x1Q = new Og.Nbf.cbw[(int) ch1 - (int) this.T1i + 1];
          foreach (char ch3 in charSet)
          {
            List<string> stringList = new List<string>();
            int num4 = 2;
            while (true)
            {
              int index2;
              string[] strArray2;
              string str;
              switch (num4)
              {
                case 1:
label_26:
                  str = strArray2[index2];
                  if (_param2 < str.Length && (int) ch3 == (int) str[_param2])
                  {
                    int num5;
                    num4 = true ? 0 : num5;
                    continue;
                  }
                  goto label_24;
                case 2:
                  strArray2 = _param3;
                  index2 = 0;
                  break;
                default:
                  stringList.Add(str);
                  goto label_24;
              }
label_20:
              if (index2 < strArray2.Length)
                goto label_26;
              else
                break;
label_24:
              ++index2;
              goto label_20;
            }
            this.x1Q[(int) ch3 - (int) this.T1i] = new Og.Nbf.cbw(ch3, _param2 + 1, stringList.ToArray());
          }
        }

        internal static int DDl([In] object obj0) => ((string) obj0).Length;

        internal static int LDk([In] object obj0) => ((HashSet<char>) obj0).Count;

        internal static bool IDd() => Og.Nbf.cbw.hDH == null;

        internal static Og.Nbf.cbw qDa() => Og.Nbf.cbw.hDH;
      }
    }
  }
}
