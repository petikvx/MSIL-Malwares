// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: SZGenericArrayEnumerat, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: E834FD24-872B-47C0-BFE1-9B14E3D5CFBB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-8c16cbf4df8137db774d2cb97cc386b052ca7a0b77ee1572fe7a5fc9a5a22ae0.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
label_1:
      int num1 = 1250722280;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 831486612)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1225132959 ^ -2142458567;
            continue;
          case 2:
            num1 = (int) num2 * -1020533366 ^ -618158430;
            continue;
          case 3:
            goto label_3;
          case 4:
            this.m_Node = aNode;
            this.m_Key = (string) null;
            num1 = (int) num2 * 997993013 ^ -541301274;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
label_1:
      int num1 = 5366090;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 892117825)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.m_Key = aKey;
            num1 = (int) num2 * -660713555 ^ 1722073298;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.m_Node = aNode;
            num1 = (int) num2 * -1390009595 ^ 1763835271;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void Set(JSONNode aVal)
    {
label_1:
      int num1 = -1903074074;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1599400205)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -1500091795 ^ -2060437193;
            continue;
          case 1:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * 716169907 ^ -538960945;
            continue;
          case 2:
            num1 = (int) num2 * -449966880 ^ -2031190437;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = -28012929;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = (int) num2 * 798254131 ^ 385643639;
            continue;
          case 7:
            num1 = (int) num2 * 1430440285 ^ 799265890;
            continue;
          case 8:
            this.m_Node = (JSONNode) null;
            num1 = -58486662;
            continue;
          case 9:
            int num3 = this.m_Key == null ? -396031227 : (num3 = -1041750166);
            num1 = num3 ^ (int) num2 * 1767226405;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
        JSONNode jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
label_1:
        int num1 = 1554060023;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 583339188)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -1668571724 ^ -1390202238;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
        JSONArray aVal = new JSONArray();
label_1:
        int num1 = -1098621381;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1945895070)) % 4U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 92019534 ^ -487052591;
              continue;
            case 1:
              aVal.Add(value);
              num1 = (int) num2 * 55349090 ^ -1458396140;
              continue;
            case 2:
              goto label_1;
            case 3:
              goto label_3;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 1897727275;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 864154774)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = (int) num2 * -896188228 ^ -282091035;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 983311746;
        JSONClass aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 517559420)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              aVal = new JSONClass();
              aVal.Add(aKey, value);
              num1 = (int) num2 * -1431008775 ^ 1424595985;
              continue;
            case 3:
              num1 = (int) num2 * 101406423 ^ 1841569360;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        this.Set((JSONNode) aVal);
      }
    }

    public override void Add(JSONNode aItem)
    {
      JSONArray aVal = new JSONArray();
      aVal.Add(aItem);
label_1:
      int num1 = -132929575;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1606767847)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -950821347 ^ -1916047830;
            continue;
          case 3:
            num1 = (int) num2 * 57130211 ^ 1007571217;
            continue;
          case 4:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -608290823 ^ -759863330;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = -98648539;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1215696977)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            JSONClass aVal = new JSONClass();
            aVal.Add(aKey, aItem);
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * 1636890888 ^ 723090648;
            continue;
          case 3:
            num1 = (int) num2 * 1819638514 ^ 1135015852;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
label_1:
      int num1 = 1746074739;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 8304144)) % 7U)
        {
          case 0:
            int num3 = flag1 ? -913266463 : (num3 = -1417131832);
            num1 = num3 ^ (int) num2 * 2041121322;
            continue;
          case 1:
            flag1 = b == null;
            num1 = (int) num2 * -1621260821 ^ -753969253;
            continue;
          case 2:
            flag2 = true;
            num1 = (int) num2 * 14387419 ^ 1335125553;
            continue;
          case 3:
            num1 = (int) num2 * 1212852763 ^ -1604209764;
            continue;
          case 4:
            flag2 = (object) a == b;
            num1 = 2099719486;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      return flag2;
    }

    public static bool operator !=(JSONLazyCreator a, object b)
    {
      bool flag = !(a == b);
label_1:
      int num1 = -16900537;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1558674088)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1394291203 ^ 1723378860;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    public override bool Equals(object obj)
    {
label_1:
      int num1 = 1200618859;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1024755066)) % 7U)
        {
          case 0:
            int num3 = !flag1 ? 229879211 : (num3 = 1860776720);
            num1 = num3 ^ (int) num2 * -1755120157;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1261410496 ^ 618377707;
            continue;
          case 4:
            flag2 = (object) this == obj;
            num1 = 838964337;
            continue;
          case 5:
            flag1 = obj == null;
            num1 = (int) num2 * 521591291 ^ 1302429623;
            continue;
          case 6:
            flag2 = true;
            num1 = (int) num2 * 774272527 ^ -552995901;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return flag2;
    }

    public override int GetHashCode() => base.GetHashCode();

    public override string ToString()
    {
label_1:
      int num1 = 1688657522;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1827804596)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = "";
            num1 = (int) num2 * 366776745 ^ -1330148509;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override string ToString(string aPrefix) => "";

    public override int AsInt
    {
      get
      {
label_1:
        int num1 = 233857837;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1045655254)) % 6U)
          {
            case 1:
              this.Set((JSONNode) new JSONData(0));
              num1 = (int) num2 * -1134381257 ^ 985962109;
              continue;
            case 2:
              asInt = 0;
              num1 = (int) num2 * -1907751093 ^ 8167751;
              continue;
            case 3:
              goto label_1;
            case 4:
              num1 = (int) num2 * 483702251 ^ -1514780526;
              continue;
            case 5:
              num1 = (int) num2 * -1780041764 ^ 1735192250;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asInt;
      }
      set
      {
label_1:
        int num1 = 2076538573;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1970328354)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              aVal = new JSONData(value);
              num1 = (int) num2 * -364072640 ^ -427714187;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        this.Set((JSONNode) aVal);
      }
    }

    public override float AsFloat
    {
      get
      {
label_1:
        int num1 = 1182177821;
        float asFloat;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 844875970)) % 7U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal = new JSONData(0.0f);
              num1 = (int) num2 * 417033004 ^ -1292269909;
              continue;
            case 2:
              num1 = (int) num2 * -755313366 ^ 1051525346;
              continue;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -430332493 ^ 341110434;
              continue;
            case 4:
              num1 = (int) num2 * -1084374802 ^ -1609664784;
              continue;
            case 5:
              asFloat = 0.0f;
              num1 = (int) num2 * 425109889 ^ -1900231338;
              continue;
            default:
              goto label_8;
          }
        }
label_8:
        return asFloat;
      }
      set
      {
label_1:
        int num1 = -217911334;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1467216253)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * 308205291 ^ -1032750145;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * -1545573086 ^ 754632969;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override double AsDouble
    {
      get
      {
label_1:
        int num1 = -67265928;
        JSONData aVal;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -611309172)) % 5U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -417605749 ^ -923608514;
              continue;
            case 1:
              asDouble = 0.0;
              num1 = (int) num2 * -101588331 ^ 159553405;
              continue;
            case 2:
              goto label_1;
            case 4:
              aVal = new JSONData(0.0);
              num1 = (int) num2 * -1195612108 ^ 1030931432;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asDouble;
      }
      set
      {
label_1:
        int num1 = 2114006749;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1980711604)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * 54325082 ^ -187887524;
              continue;
            case 2:
              num1 = (int) num2 * -961388633 ^ -805829534;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override bool AsBool
    {
      get
      {
label_1:
        int num1 = -1105750490;
        JSONData aVal;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -608393364)) % 7U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1725381578 ^ 1135280138;
              continue;
            case 2:
              asBool = false;
              num1 = (int) num2 * 1202378087 ^ 572633143;
              continue;
            case 3:
              num1 = (int) num2 * 628896669 ^ -1444976092;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * 753761944 ^ -439242378;
              continue;
            case 6:
              aVal = new JSONData(false);
              num1 = (int) num2 * -1313858240 ^ 484644193;
              continue;
            default:
              goto label_8;
          }
        }
label_8:
        return asBool;
      }
      set
      {
label_1:
        int num1 = 1703182040;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1525505421)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * -325710808 ^ -585796578;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * -1960910577 ^ -398775656;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override JSONArray AsArray
    {
      get
      {
        JSONArray aVal = new JSONArray();
label_1:
        int num1 = 1234198836;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 286421138)) % 5U)
          {
            case 0:
              asArray = aVal;
              num1 = (int) num2 * 2077241345 ^ -759481107;
              continue;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -721624288 ^ 1245369072;
              continue;
            case 2:
              num1 = (int) num2 * -117836959 ^ -1087853522;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_6:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
        JSONClass aVal = new JSONClass();
        this.Set((JSONNode) aVal);
label_1:
        int num1 = 554354932;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 117787619)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -721001243 ^ -607682060;
              continue;
            case 3:
              asObject = aVal;
              num1 = (int) num2 * 94613893 ^ 93065886;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asObject;
      }
    }
  }
}
