// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: 司6, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E96108F1-63B0-49D9-ABCC-EB6314F0AFE2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-81e7927ab5ca518d06687dc18d5c4df22198011494322486e562136344d2513b.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
    bool flag1 = (ImageUtil.\u206B⁭​​‏‎‪‫‍⁪‮‭⁮⁮⁬⁯⁪‪⁭⁬‭​‮⁮‬⁭‭⁪‫‏‫‍​⁮⁪⁭​‏⁮⁭‮(originalImage) & PixelFormat.Indexed) == PixelFormat.Indexed;
label_1:
    int num1 = -249582379;
    int num2;
    Bitmap bitmap;
    bool flag2;
    Image image;
    int length;
    byte[] numArray;
    IntPtr num3;
    int num4;
    bool flag3;
    BitmapData bitmapData;
    Rectangle rectangle;
    PixelFormat pixelFormat;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ -1871775834)) % 33U)
      {
        case 0:
          numArray = new byte[length];
          ImageUtil.\u200E‎‮‭‪‌‪‫‭‫⁯⁭⁯‮‫⁬‮⁮‮‫⁪‌‎‏‏⁬‫⁮​⁮‬⁪‎‏⁮‮​⁯‏⁭‮(num3, numArray, 0, length);
          num1 = (int) num5 * 809580865 ^ -460872844;
          continue;
        case 1:
          flag2 = num4 < numArray.Length;
          num1 = -2027638364;
          continue;
        case 2:
          num1 = (int) num5 * -517342112 ^ 197248151;
          continue;
        case 3:
          num1 = (int) num5 * 2096595208 ^ 399921771;
          continue;
        case 4:
          pixelFormat = PixelFormat.Format32bppArgb;
          num1 = (int) num5 * 355207615 ^ 1289828416;
          continue;
        case 5:
          bitmapData = ImageUtil.\u206E‭⁬‫‭⁬⁪‪⁫‍‭‮⁭‌⁭⁭⁫⁭⁬‫⁮‪‬⁪⁫‭⁪​⁯‪‌‌⁫‍‪⁮​‪‎‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num1 = (int) num5 * 1002648138 ^ 746522911;
          continue;
        case 6:
          num1 = (int) num5 * -1132223006 ^ -2115068158;
          continue;
        case 7:
          num3 = ImageUtil.\u200C‌‫​‍⁪‌⁫⁭‮‎‍⁮⁫⁫‭⁭‏⁪⁪⁭​⁮‭‪⁮⁬⁯‍‪⁫⁪‌‏‏⁪‪‎‬‭‮(bitmapData);
          length = ImageUtil.\u206C⁯‫‏‎⁬⁪⁪⁪‍⁬⁭‎‬⁯‬​‍⁫‭⁬‌​⁯⁮‫⁯​‬⁮⁯‫⁬⁭⁫‍‪‎‍‪‮((Image) bitmap) * ImageUtil.\u206C‫⁬‬‌‍‫​‭​‏⁯‮‍‎⁮⁪‭‭‏⁮‪‭‭‏‏‏⁪⁪‍⁫‫⁯‭‍‎‮⁮‎‎‮((Image) bitmap) * 4;
          num1 = (int) num5 * 1508756833 ^ -1396091086;
          continue;
        case 8:
          num1 = (int) num5 * 1467323286 ^ -720936359;
          continue;
        case 9:
          num1 = (int) num5 * -1590712128 ^ -363209520;
          continue;
        case 10:
          num1 = (int) num5 * 1316975152 ^ -2073897925;
          continue;
        case 11:
          num2 = 0;
          num1 = -1132242871;
          continue;
        case 12:
          ++num2;
          num1 = (int) num5 * -1161202605 ^ -630979915;
          continue;
        case 13:
          goto label_1;
        case 14:
          bitmap = (Bitmap) ImageUtil.\u206B‭‍⁪⁬‮​⁯⁯​‏⁯‍⁫‭‬⁮‪⁯⁮‍‮‪‌⁯‪⁯⁮⁫‮⁭⁫⁫‮‮⁭‮‌‪‏‮(originalImage);
          num1 = -2013432804;
          continue;
        case 15:
          image = originalImage;
          num1 = (int) num5 * 1721594783 ^ 908252279;
          continue;
        case 16:
          ++num2;
          num1 = (int) num5 * -853124070 ^ -2089920348;
          continue;
        case 17:
          int num6 = flag3 ? -1527685500 : (num6 = -714917261);
          num1 = num6 ^ (int) num5 * -751931534;
          continue;
        case 18:
          num1 = (int) num5 * -2109040798 ^ 654498862;
          continue;
        case 19:
          ImageUtil.\u206A‍⁪‭‬‏‍⁯‎‎‪‍⁬⁫⁫⁪‬​‏‏‮⁭‏​⁪‮‮⁮‫‪‎​‪⁯⁮⁭‍⁯‮‬‮(numArray, 0, num3, length);
          num1 = (int) num5 * 1635891551 ^ -1533450294;
          continue;
        case 20:
          int num7 = flag1 ? 2020955244 : (num7 = 845228503);
          num1 = num7 ^ (int) num5 * 1263258831;
          continue;
        case 21:
          rectangle = new Rectangle(0, 0, ImageUtil.\u206C⁯‫‏‎⁬⁪⁪⁪‍⁬⁭‎‬⁯‬​‍⁫‭⁬‌​⁯⁮‫⁯​‬⁮⁯‫⁬⁭⁫‍‪‎‍‪‮((Image) bitmap), ImageUtil.\u206C‫⁬‬‌‍‫​‭​‏⁯‮‍‎⁮⁪‭‭‏⁮‪‭‭‏‏‏⁪⁪‍⁫‫⁯‭‍‎‮⁮‎‎‮((Image) bitmap));
          num1 = (int) num5 * 367063287 ^ 2090632857;
          continue;
        case 22:
          num1 = -570057677;
          continue;
        case 23:
          num4 += 4;
          num1 = -2145600869;
          continue;
        case 24:
          ImageUtil.\u202A‏‌⁭‭‫​‭‫‍‍‏​‮⁭⁮​‏⁯‬⁮⁪‭‎‍‭‮‭⁬‫‮⁮‫‪⁪‌‪‏‮‪‮(bitmap, bitmapData);
          num1 = (int) num5 * 651584497 ^ 179478431;
          continue;
        case 25:
          int num8 = !flag2 ? 1689129740 : (num8 = 985416094);
          num1 = num8 ^ (int) num5 * -2003251960;
          continue;
        case 26:
          ++num2;
          num1 = (int) num5 * 1053592450 ^ 1410325739;
          continue;
        case 27:
          image = (Image) bitmap;
          num1 = (int) num5 * -1376328142 ^ -1280183870;
          continue;
        case 28:
          num1 = (int) num5 * -1575113624 ^ -1085914828;
          continue;
        case 29:
          num4 = 0;
          num1 = (int) num5 * 1108841955 ^ 1411950407;
          continue;
        case 30:
          flag3 = numArray[num4 + 4 - 1] == (byte) 0;
          num1 = (int) num5 * -1406773411 ^ -347532196;
          continue;
        case 32:
          numArray[num4 + num2] = (byte) ((double) numArray[num4 + num2] * opacity);
          num1 = (int) num5 * -586615375 ^ -1821306830;
          continue;
        default:
          goto label_34;
      }
    }
label_34:
    return image;
  }

  static PixelFormat \u206B⁭​​‏‎‪‫‍⁪‮‭⁮⁮⁬⁯⁪‪⁭⁬‭​‮⁮‬⁭‭⁪‫‏‫‍​⁮⁪⁭​‏⁮⁭‮([In] Image obj0) => obj0.PixelFormat;

  static object \u206B‭‍⁪⁬‮​⁯⁯​‏⁯‍⁫‭‬⁮‪⁯⁮‍‮‪‌⁯‪⁯⁮⁫‮⁭⁫⁫‮‮⁭‮‌‪‏‮([In] Image obj0) => obj0.Clone();

  static int \u206C⁯‫‏‎⁬⁪⁪⁪‍⁬⁭‎‬⁯‬​‍⁫‭⁬‌​⁯⁮‫⁯​‬⁮⁯‫⁬⁭⁫‍‪‎‍‪‮([In] Image obj0) => obj0.Width;

  static int \u206C‫⁬‬‌‍‫​‭​‏⁯‮‍‎⁮⁪‭‭‏⁮‪‭‭‏‏‏⁪⁪‍⁫‫⁯‭‍‎‮⁮‎‎‮([In] Image obj0) => obj0.Height;

  static BitmapData \u206E‭⁬‫‭⁬⁪‪⁫‍‭‮⁭‌⁭⁭⁫⁭⁬‫⁮‪‬⁪⁫‭⁪​⁯‪‌‌⁫‍‪⁮​‪‎‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u200C‌‫​‍⁪‌⁫⁭‮‎‍⁮⁫⁫‭⁭‏⁪⁪⁭​⁮‭‪⁮⁬⁯‍‪⁫⁪‌‏‏⁪‪‎‬‭‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u200E‎‮‭‪‌‪‫‭‫⁯⁭⁯‮‫⁬‮⁮‮‫⁪‌‎‏‏⁬‫⁮​⁮‬⁪‎‏⁮‮​⁯‏⁭‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206A‍⁪‭‬‏‍⁯‎‎‪‍⁬⁫⁫⁪‬​‏‏‮⁭‏​⁪‮‮⁮‫‪‎​‪⁯⁮⁭‍⁯‮‬‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u202A‏‌⁭‭‫​‭‫‍‍‏​‮⁭⁮​‏⁯‬⁮⁪‭‎‍‭‮‭⁬‫‮⁮‫‪⁪‌‪‏‮‪‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
