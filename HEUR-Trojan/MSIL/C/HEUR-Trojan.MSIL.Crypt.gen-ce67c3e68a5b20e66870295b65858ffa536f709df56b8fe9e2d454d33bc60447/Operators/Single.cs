// Decompiled with JetBrains decompiler
// Type: GenericMath.Operators.Single
// Assembly: NDp6, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1E52A124-4038-410B-8375-93D4A037FA1F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.Crypt.gen-ce67c3e68a5b20e66870295b65858ffa536f709df56b8fe9e2d454d33bc60447.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;

namespace GenericMath.Operators
{
  [StandardModule]
  [HideModuleName]
  internal sealed class Single
  {
    private static float IntegerDivide(float L, float R) => (float) (checked ((long) Math.Round((double) L)) / checked ((long) Math.Round((double) R)));

    internal static void Initialize()
    {
      Func<float, float> func1;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D0 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func1 = Single._Closure\u0024__.\u0024I1\u002D0;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D0 = func1 = (Func<float, float>) (V => V);
      }
      Arithmetic<float>.UnaryPlus = func1;
      Func<float, float> func2;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D1 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func2 = Single._Closure\u0024__.\u0024I1\u002D1;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D1 = func2 = (Func<float, float>) (V => -V);
      }
      Arithmetic<float>.UnaryMinus = func2;
      Func<float, float, float> func3;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D2 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func3 = Single._Closure\u0024__.\u0024I1\u002D2;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D2 = func3 = (Func<float, float, float>) ((L, R) => L + R);
      }
      Arithmetic<float>.Add = func3;
      Func<float, float, float> func4;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D3 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func4 = Single._Closure\u0024__.\u0024I1\u002D3;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D3 = func4 = (Func<float, float, float>) ((L, R) => L - R);
      }
      Arithmetic<float>.Subtract = func4;
      Func<float, float, float> func5;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D4 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func5 = Single._Closure\u0024__.\u0024I1\u002D4;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D4 = func5 = (Func<float, float, float>) ((L, R) => L * R);
      }
      Arithmetic<float>.Multiply = func5;
      Func<float, float, float> func6;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D5 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func6 = Single._Closure\u0024__.\u0024I1\u002D5;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D5 = func6 = (Func<float, float, float>) ((L, R) => L / R);
      }
      Arithmetic<float>.Divide = func6;
      Func<float, float, float> func7;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D6 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func7 = Single._Closure\u0024__.\u0024I1\u002D6;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D6 = func7 = (Func<float, float, float>) ((L, R) => (float) Math.Pow((double) L, (double) R));
      }
      Arithmetic<float>.Power = func7;
      Arithmetic<float>.IntegerDivide = new Func<float, float, float>(Single.IntegerDivide);
      Func<float, float, float> func8;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D7 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func8 = Single._Closure\u0024__.\u0024I1\u002D7;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D7 = func8 = (Func<float, float, float>) ((L, R) => L % R);
      }
      Arithmetic<float>.Modulus = func8;
      Func<float, float, bool> func9;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D8 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func9 = Single._Closure\u0024__.\u0024I1\u002D8;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D8 = func9 = (Func<float, float, bool>) ((L, R) => (double) L == (double) R);
      }
      Arithmetic<float>.Equal = func9;
      Func<float, float, bool> func10;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D9 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func10 = Single._Closure\u0024__.\u0024I1\u002D9;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D9 = func10 = (Func<float, float, bool>) ((L, R) => (double) L != (double) R);
      }
      Arithmetic<float>.NotEqual = func10;
      Func<float, float, bool> func11;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D10 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func11 = Single._Closure\u0024__.\u0024I1\u002D10;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D10 = func11 = (Func<float, float, bool>) ((L, R) => (double) L < (double) R);
      }
      Arithmetic<float>.LessThan = func11;
      Func<float, float, bool> func12;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D11 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func12 = Single._Closure\u0024__.\u0024I1\u002D11;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D11 = func12 = (Func<float, float, bool>) ((L, R) => (double) L <= (double) R);
      }
      Arithmetic<float>.LessThanEqual = func12;
      Func<float, float, bool> func13;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D12 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func13 = Single._Closure\u0024__.\u0024I1\u002D12;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D12 = func13 = (Func<float, float, bool>) ((L, R) => (double) L > (double) R);
      }
      Arithmetic<float>.MoreThan = func13;
      Func<float, float, bool> func14;
      // ISSUE: reference to a compiler-generated field
      if (Single._Closure\u0024__.\u0024I1\u002D13 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func14 = Single._Closure\u0024__.\u0024I1\u002D13;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Single._Closure\u0024__.\u0024I1\u002D13 = func14 = (Func<float, float, bool>) ((L, R) => (double) L >= (double) R);
      }
      Arithmetic<float>.MoreThanEqual = func14;
    }
  }
}
