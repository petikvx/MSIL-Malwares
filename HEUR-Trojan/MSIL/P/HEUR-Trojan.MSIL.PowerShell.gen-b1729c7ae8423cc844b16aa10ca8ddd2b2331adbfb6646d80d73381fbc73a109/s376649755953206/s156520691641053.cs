// Decompiled with JetBrains decompiler
// Type: s376649755953206.s156520691641053
// Assembly: s968508024776124, Version=2.0.47.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: E3596912-35E7-405B-A05A-F5F12AB5E292
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-b1729c7ae8423cc844b16aa10ca8ddd2b2331adbfb6646d80d73381fbc73a109.exe

using s608480027755992;
using s831499078525373;
using System;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Text.RegularExpressions;

namespace s376649755953206
{
  public class s156520691641053
  {
    private string s068100554516558;

    public s156520691641053(string zipFilePath, TextWriter log = null)
    {
      this.s068100554516558 = zipFilePath;
      this.s343274668208265 = log;
    }

    public TextWriter s343274668208265 { get; set; }

    public string s055655193334517 { get; set; }

    public string s447358481310391 { get; set; }

    public void s965449378410577()
    {
      if (this.s343274668208265 == null)
        this.s343274668208265 = (TextWriter) new StringWriter();
      if (this.s055655193334517 == null)
        this.s055655193334517 = !this.s068100554516558.EndsWith(".etl.zip", StringComparison.OrdinalIgnoreCase) ? Path.ChangeExtension(this.s068100554516558, ".etl") : this.s068100554516558.Substring(0, this.s068100554516558.Length - 4);
      if (this.s447358481310391 == null)
        this.s447358481310391 = new s434060066659844(s434060066659844.s400210463566645).s218113742055380();
      Stopwatch stopwatch = Stopwatch.StartNew();
      this.s343274668208265.WriteLine("[Decompressing {0}]", (object) this.s068100554516558);
      this.s343274668208265.WriteLine("Generating output file {0}", (object) this.s055655193334517);
      using (ZipArchive zipArchive = ZipFile.OpenRead(this.s068100554516558))
      {
        bool flag = false;
        foreach (ZipArchiveEntry entry in zipArchive.Entries)
        {
          if (entry.Length != 0L)
          {
            string fullName = entry.FullName;
            if (fullName.EndsWith(".pdb", StringComparison.OrdinalIgnoreCase))
            {
              string input = fullName.Replace('/', '\\');
              string path2_1;
              if (input.StartsWith("symbols\\", StringComparison.OrdinalIgnoreCase))
                path2_1 = input.Substring(8);
              else if (input.StartsWith("ngenpdbs\\", StringComparison.OrdinalIgnoreCase))
              {
                path2_1 = input.Substring(9);
              }
              else
              {
                System.Text.RegularExpressions.Match match1 = Regex.Match(input, "^[^\\\\]+\\.ngenpdbs?\\\\(.*)", RegexOptions.IgnoreCase);
                if (match1.Success)
                {
                  path2_1 = match1.Groups[1].Value;
                }
                else
                {
                  System.Text.RegularExpressions.Match match2 = Regex.Match(input, "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\\\symcache\\\\(.*)", RegexOptions.IgnoreCase);
                  if (match2.Success)
                  {
                    path2_1 = match2.Groups[1].Value;
                  }
                  else
                  {
                    this.s343274668208265.WriteLine("WARNING: found PDB file that was not in a symbol server style directory, skipping extraction");
                    this.s343274668208265.WriteLine("         Unzip this ETL and PDB by hand to use this PDB.");
                    continue;
                  }
                }
              }
              string str1 = Path.Combine(this.s447358481310391, path2_1);
              Path.GetFileName(str1);
              if (File.Exists(str1) && new FileInfo(str1).Length == entry.Length)
              {
                this.s343274668208265.WriteLine("PDB {0} exists, skipping", (object) path2_1);
              }
              else
              {
                string path2_2 = path2_1;
                int length = path2_2.IndexOf('\\');
                if (length >= 0)
                  path2_2 = path2_2.Substring(0, length);
                string str2 = Path.Combine(this.s447358481310391, path2_2);
                if (File.Exists(str2))
                {
                  this.s343274668208265.WriteLine("Deleting pdb file that is in the way {0}", (object) str2);
                  s916389884151353.s760644410246924(str2);
                }
                this.s343274668208265.WriteLine("Extracting PDB {0}", (object) path2_1);
                s156520691641053.s978726905045839(entry, str1);
              }
            }
            else if (fullName.EndsWith(".etl", StringComparison.OrdinalIgnoreCase))
            {
              flag = !flag ? true : throw new ApplicationException("The ZIP file does not have exactly 1 ETL file in it, can't auto-extract.");
              s156520691641053.s978726905045839(entry, this.s055655193334517);
              this.s343274668208265.WriteLine("Extracting {0} Zipped size = {1:f3} MB Unzipped = {2:f3} MB", (object) this.s055655193334517, (object) ((double) entry.CompressedLength / 1000000.0), (object) ((double) entry.Length / 1000000.0));
            }
            else if (fullName == "PerfViewLogFile.txt" || fullName == "LogFile.txt")
            {
              string s662993347911135 = Path.ChangeExtension(this.s055655193334517, ".LogFile.txt");
              this.s343274668208265.WriteLine("Extracting LogFile.txt to {0}", (object) s662993347911135);
              s156520691641053.s978726905045839(entry, s662993347911135);
            }
            else
              this.s343274668208265.WriteLine("Skipping unknown file {0}", (object) fullName);
          }
        }
        if (!flag)
          throw new ApplicationException("The ZIP file does not have any ETL files in it!");
        this.s343274668208265.WriteLine("Finished decompression, took {0:f0} sec", (object) stopwatch.Elapsed.TotalSeconds);
      }
    }

    private static void s978726905045839(ZipArchiveEntry s912115885400805, string s662993347911135)
    {
      string directoryName = Path.GetDirectoryName(s662993347911135);
      if (directoryName.Length != 0)
        Directory.CreateDirectory(directoryName);
      string str = s662993347911135 + ".new";
      try
      {
        s912115885400805.ExtractToFile(str, true);
        File.SetLastWriteTime(str, DateTime.Now);
        s916389884151353.s390345387705666(str, s662993347911135);
      }
      finally
      {
        s916389884151353.s760644410246924(str);
      }
    }
  }
}
