// Decompiled with JetBrains decompiler
// Type: Hm3.j1Y
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using c0T;
using Microsoft.VisualBasic.CompilerServices;
using q7C1;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Drawing;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using x7X;
using z0R5;

namespace Hm3
{
  [DesignerGenerated]
  public class j1Y : Form
  {
    private IContainer Ⴃ;
    [AccessedThroughProperty("Ⴗ")]
    private Label Ⴈ;
    [AccessedThroughProperty("Ⴄ")]
    private Label Ⴀ;
    [AccessedThroughProperty("Ⴐ")]
    private DataGridView Ⴅ;
    private string Ⴓ;

    public j1Y()
    {
      this.Load += new EventHandler(this.Ak9);
      this.Ⴓ = Ec63.Ⴅ;
      this.Sk2();
    }

    protected virtual void k0D([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.Ⴃ == null)
          return;
        this.Ⴃ.Dispose();
      }
      finally
      {
        this.Dispose(obj0);
      }
    }

    private void Sk2()
    {
      this.Ⴗ = new Label();
      this.Ⴄ = new Label();
      this.Ⴐ = new DataGridView();
      ((ISupportInitialize) this.Ⴐ).BeginInit();
      this.SuspendLayout();
      this.Ⴗ.AutoSize = true;
      this.Ⴗ.BorderStyle = BorderStyle.FixedSingle;
      this.Ⴗ.Location = new Point(25, 528);
      this.Ⴗ.Name = "lblCount";
      this.Ⴗ.Size = new Size(2, 22);
      this.Ⴗ.TabIndex = 5;
      this.Ⴄ.AutoSize = true;
      this.Ⴄ.Font = new Font("Calibri", 16.2f, FontStyle.Bold | FontStyle.Underline, GraphicsUnit.Point, (byte) 0);
      this.Ⴄ.Location = new Point(291, 30);
      this.Ⴄ.Name = "Label1";
      this.Ⴄ.Size = new Size(282, 40);
      this.Ⴄ.TabIndex = 4;
      this.Ⴄ.Text = "Attendance History";
      this.Ⴐ.AllowUserToAddRows = false;
      this.Ⴐ.AllowUserToDeleteRows = false;
      this.Ⴐ.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.Ⴐ.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.Ⴐ.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells;
      this.Ⴐ.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.Ⴐ.Location = new Point(25, 78);
      this.Ⴐ.Margin = new Padding(3, 4, 3, 4);
      this.Ⴐ.Name = "dgvHistory";
      this.Ⴐ.ReadOnly = true;
      this.Ⴐ.RowTemplate.Height = 24;
      this.Ⴐ.Size = new Size(849, 435);
      this.Ⴐ.TabIndex = 3;
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.Tan;
      this.ClientSize = new Size(900, 562);
      this.Controls.Add((Control) this.Ⴗ);
      this.Controls.Add((Control) this.Ⴄ);
      this.Controls.Add((Control) this.Ⴐ);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.Margin = new Padding(3, 4, 3, 4);
      this.Name = "ႤႥ";
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "AttendanceHistory";
      ((ISupportInitialize) this.Ⴐ).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Label Ⴗ
    {
      get => this.Ⴈ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴈ = value;
    }

    internal virtual Label Ⴄ
    {
      get => this.Ⴀ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴀ = value;
    }

    internal virtual DataGridView Ⴐ
    {
      get => this.Ⴅ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴅ = value;
    }

    private void Ak9([In] object obj0, [In] EventArgs obj1)
    {
      Table<Ap0> ⴍ = new Tt1().Ⴍ;
      Expression expression1 = (Expression) Expression.Parameter(typeof (Ap0), "a");
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: field reference
      Expression<Func<Ap0, bool>> predicate = Expression.Lambda<Func<Ap0, bool>>((Expression) Expression.Call((Expression) Expression.Property(expression1, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.Be7))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (string.Contains)), (Expression) Expression.Field((Expression) Expression.Constant((object) this, typeof (j1Y)), FieldInfo.GetFieldFromHandle(__fieldref (j1Y.Ⴓ)))), expression1 as ParameterExpression);
      IQueryable<Ap0> source1 = ⴍ.Where<Ap0>(predicate);
      Expression expression2 = (Expression) Expression.Parameter(typeof (Ap0), "a");
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: type reference
      // ISSUE: method reference
      // ISSUE: type reference
      Expression<Func<Ap0, Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>>> selector = Expression.Lambda<Func<Ap0, Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>>>((Expression) Expression.New((ConstructorInfo) MethodBase.GetMethodFromHandle(__methodref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.\u002Ector), __typeref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (IEnumerable<Expression>) new Expression[6]
      {
        (Expression) Expression.Property(expression2, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.x8N))),
        (Expression) Expression.Property((Expression) (expression2 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.Nk3))),
        (Expression) Expression.Property(expression2, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.w2G))),
        (Expression) Expression.Property((Expression) (expression2 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.Ad2))),
        (Expression) Expression.Property(expression2, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.a0H))),
        (Expression) Expression.Property((Expression) (expression2 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.n3E)))
      }, (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴄ), __typeref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴗ), __typeref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴅ), __typeref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴃ), __typeref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴈ), __typeref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>.Ⴀ), __typeref (Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>))), expression2 as ParameterExpression);
      object source2 = (object) source1.Select<Ap0, Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>>(selector);
      this.Ⴐ.DataSource = (object) (source2 as IQueryable<Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>>);
      this.Ⴗ.Text = ((IQueryable<Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>>) source2).Count<Nc1o<string, DateTime, TimeSpan?, TimeSpan?, TimeSpan?, TimeSpan?>>().ToString("0 history(s)");
    }
  }
}
