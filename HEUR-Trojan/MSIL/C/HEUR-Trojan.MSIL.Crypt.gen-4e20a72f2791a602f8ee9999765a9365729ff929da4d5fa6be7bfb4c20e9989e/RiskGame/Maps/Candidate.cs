// Decompiled with JetBrains decompiler
// Type: RiskGame.Maps.Candidate
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Attributes;
using IEnumUnkn.Rules;
using IEnumUnkn.Structs;
using RiskGame.Resolver;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Markup;

namespace RiskGame.Maps
{
  public class Candidate : Window, IComponentConnector, IStyleConnector
  {
    internal StackPanel panel_MainUI;
    internal TextBox txtName;
    internal PasswordBox txtPass;
    internal TextBox txtPassShow;
    internal Button btnPassToggle;
    internal CheckBox chkPass;
    internal PasswordBox txtNewPass;
    internal TextBox txtNewPassShow;
    internal CheckBox chkNewPass;
    internal PasswordBox txtNewPassConf;
    internal TextBox txtNewPassConfShow;
    internal CheckBox chkNewPassConf;
    internal Label lblError;
    internal TextBlock txtError;
    internal Label lblSuccess;
    internal TextBlock txtSuccess;
    private bool m_Global;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Candidate()
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_1;
            case 1:
            case 3:
              goto label_3;
            case 2:
            case 4:
              goto label_2;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_7;
          }
        }
label_1:
        ListenerManager.InitStub();
        num1 = 3;
        continue;
label_2:
        this.AssetField();
        num1 = 5;
        continue;
label_3:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        goto label_2;
      }
label_8:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Candidate(string reference)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              ListenerManager.InitStub();
              if (!Candidate.PrintObject())
              {
                num2 = 2;
                continue;
              }
              goto label_3;
            case 1:
            case 2:
              goto label_3;
            case 3:
              goto label_1;
            case 5:
              goto label_9;
            default:
              if (Candidate.CustomizeObject())
              {
                num2 = 3;
                continue;
              }
              goto label_7;
          }
        }
label_1:
        this.AssetField();
        this.txtName.Text = reference;
        num1 = 5;
        continue;
label_3:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        goto label_1;
      }
label_9:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AssetField()
    {
      this.InitializeComponent();
      this.DataContext = (object) this;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FindField(string var1)
    {
      this.txtError.Text = var1;
      this.lblError.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ManageField(string setup)
    {
      this.txtSuccess.Text = setup;
      this.lblSuccess.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InstantiateField()
    {
      this.lblError.Visibility = Visibility.Collapsed;
      this.lblSuccess.Visibility = Visibility.Collapsed;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ChangeField(object setup, RoutedEventArgs selection)
    {
      int num1 = 9;
      PasswordBox passwordBox;
      TextBox textBox;
      while (true)
      {
        int num2;
        CheckBox checkBox;
        string name;
        bool flag1;
        switch (num1)
        {
          case 0:
            if (!flag1)
            {
              passwordBox.Password = textBox.Text;
              if (Candidate.CustomizeObject())
              {
                num1 = 1;
                continue;
              }
              goto case 5;
            }
            else
              goto label_8;
          case 1:
          case 6:
            passwordBox.Visibility = Visibility.Visible;
            num2 = 4;
            break;
          case 2:
          case 3:
            if (!(name == "chkNewPass"))
            {
              if (name == "chkNewPassConf")
              {
                passwordBox = this.txtNewPassConf;
                textBox = this.txtNewPassConfShow;
                goto label_17;
              }
              else
                goto label_17;
            }
            else
            {
              passwordBox = this.txtNewPass;
              textBox = this.txtNewPassShow;
              goto label_17;
            }
          case 4:
            textBox.Visibility = Visibility.Collapsed;
            num2 = 10;
            break;
          case 5:
            textBox = new TextBox();
            name = checkBox.Name;
            if (!(name == "chkPass"))
            {
              num1 = 2;
              continue;
            }
            passwordBox = this.txtPass;
            textBox = this.txtPassShow;
            goto label_17;
          case 7:
            goto label_3;
          case 8:
label_18:
            passwordBox = new PasswordBox();
            num2 = 5;
            break;
          case 9:
            checkBox = (CheckBox) setup;
            num2 = 8;
            break;
          case 10:
            goto label_20;
          default:
            num2 = 7;
            break;
        }
        num1 = num2;
        continue;
label_17:
        bool? isChecked = checkBox.IsChecked;
        bool flag2 = true;
        flag1 = isChecked.GetValueOrDefault() == flag2 & isChecked.HasValue;
        if (true)
          num1 = 0;
        else
          goto label_18;
      }
label_3:
      passwordBox.Visibility = Visibility.Collapsed;
      textBox.Visibility = Visibility.Visible;
      return;
label_8:
      textBox.Text = passwordBox.Password;
      goto label_3;
label_20:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CountField(object def, KeyEventArgs selection)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              flag = selection.Key == Key.Return;
              num2 = 3;
              continue;
            case 2:
            case 4:
              goto label_1;
            case 3:
              goto label_2;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto case 0;
          }
        }
label_1:
        this.RestartField(def, (RoutedEventArgs) selection);
        num1 = 5;
        continue;
label_2:
        if (!flag)
          break;
        goto label_1;
      }
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RestartField(object last, RoutedEventArgs vis)
    {
      try
      {
        this.InstantiateField();
        if (this.txtName.Text == null || this.txtName.Text == "" || this.txtPass.Password == null || this.txtPass.Password == "" || this.txtNewPass.Password == null || this.txtNewPass.Password == "" || this.txtNewPassConf.Password == null || this.txtNewPassConf.Password == "")
          throw new ArgumentNullException();
        if (this.txtNewPass.Password == this.txtNewPassConf.Password)
        {
          Human.PostRequest(this.txtNewPass.Password);
          Human.ComputeRequest(Human.FlushRequest(this.txtName.Text, this.txtPass.Password), this.txtNewPass.Password);
          this.ManageField("Your password has been changed.");
        }
        else
          this.FindField("The password(s) do not match");
      }
      catch (ArgumentNullException ex)
      {
        this.FindField("Please provide an input for every field.");
      }
      catch (IOException ex)
      {
        this.FindField("An error reading or writing from the file has occurred. Please ensure you have created an account, try again, restart the application or delete the Usersaves.txt file in the game directory.");
      }
      catch (Template ex)
      {
        this.FindField(ex._CustomerManager);
      }
      catch (ListBridgeRule ex)
      {
        this.FindField("Your account was not found. Please check your password.");
      }
      catch (Publisher ex)
      {
        this.FindField(ex.Message);
      }
      catch (Exception ex)
      {
        this.FindField("An unknown error has occurred.");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PublishField(object key, TextChangedEventArgs cust)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        string name;
        PasswordBox passwordBox;
        TextBox textBox;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              if (!(name == "txtNewPassShow"))
              {
                if (name == "txtNewPassConfShow")
                {
                  passwordBox = this.txtNewPassConf;
                  goto case 3;
                }
                else
                  goto case 3;
              }
              else
              {
                passwordBox = this.txtNewPass;
                if (true)
                {
                  num2 = 6;
                  continue;
                }
                goto label_15;
              }
            case 1:
              goto label_9;
            case 3:
            case 4:
            case 6:
              passwordBox.Password = textBox.Text;
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto label_9;
            case 5:
              passwordBox = new PasswordBox();
              name = textBox.Name;
              if (name == "txtPassShow")
              {
                passwordBox = this.txtPass;
                goto case 3;
              }
              else
                goto label_11;
            case 7:
              goto label_12;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 3;
        continue;
label_9:
        textBox = (TextBox) key;
        num1 = 5;
        continue;
label_11:
        num1 = 0;
      }
label_12:
      return;
label_15:;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        Uri resourceLocator;
        bool global;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_6;
            case 1:
            case 4:
              if (!global)
              {
                this.m_Global = true;
                resourceLocator = new Uri("/IEnumUnkn;component/changepassword.xaml", UriKind.Relative);
                goto case 2;
              }
              else
              {
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto label_9;
              }
            case 2:
              Application.LoadComponent((object) this, resourceLocator);
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto label_6;
            case 5:
              goto label_10;
            case 6:
              goto label_9;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 2;
        continue;
label_6:
        global = this.m_Global;
        num1 = 4;
      }
label_10:
      return;
label_9:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int indexOf_info, object second)
    {
      int num1 = 5;
      if (false)
        return;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            goto label_10;
          case 1:
            goto label_19;
          case 2:
            switch (num3)
            {
              case 1:
                goto label_25;
              case 5:
                this.txtName = (TextBox) second;
                this.txtName.KeyDown += new KeyEventHandler(this.CountField);
                num1 = 9;
                continue;
              case 6:
                this.txtPass = (PasswordBox) second;
                num2 = 1;
                break;
              case 7:
                goto label_16;
              case 8:
                goto label_17;
              case 9:
                this.chkPass = (CheckBox) second;
                this.chkPass.Click += new RoutedEventHandler(this.ChangeField);
                num1 = 7;
                continue;
              case 10:
                goto label_2;
              case 11:
                goto label_3;
              case 12:
                goto label_4;
              case 13:
                goto label_11;
              case 14:
                goto label_12;
              case 15:
                goto label_13;
              case 16:
                goto label_14;
              case 17:
                this.lblError = (Label) second;
                num2 = 3;
                break;
              case 18:
                goto label_21;
              case 19:
                goto label_22;
              case 20:
                this.txtSuccess = (TextBlock) second;
                num2 = 8;
                break;
              default:
                this.m_Global = true;
                num2 = 10;
                break;
            }
            break;
          case 3:
            goto label_28;
          case 4:
            goto label_29;
          case 5:
            num3 = indexOf_info;
            num2 = 2;
            break;
          case 6:
            goto label_30;
          case 7:
            goto label_31;
          case 8:
            goto label_32;
          case 9:
            goto label_33;
          case 10:
            goto label_34;
          default:
            if (!Candidate.PrintObject())
            {
              num1 = 0;
              continue;
            }
            goto label_8;
        }
        num1 = num2;
      }
label_2:
      this.txtNewPass = (PasswordBox) second;
      return;
label_3:
      this.txtNewPassShow = (TextBox) second;
      return;
label_4:
      this.chkNewPass = (CheckBox) second;
      goto label_10;
label_19:
      return;
label_28:
      return;
label_29:
      return;
label_30:
      return;
label_31:
      return;
label_32:
      return;
label_33:
      return;
label_34:
      return;
label_8:
      return;
label_10:
      this.chkNewPass.Click += new RoutedEventHandler(this.ChangeField);
      return;
label_11:
      this.txtNewPassConf = (PasswordBox) second;
      return;
label_12:
      this.txtNewPassConfShow = (TextBox) second;
      return;
label_13:
      this.chkNewPassConf = (CheckBox) second;
      this.chkNewPassConf.Click += new RoutedEventHandler(this.ChangeField);
      return;
label_14:
      ((ButtonBase) second).Click += new RoutedEventHandler(this.RestartField);
      return;
label_16:
      this.txtPassShow = (TextBox) second;
      return;
label_17:
      this.btnPassToggle = (Button) second;
      return;
label_21:
      this.txtError = (TextBlock) second;
      return;
label_22:
      this.lblSuccess = (Label) second;
      return;
label_25:
      this.panel_MainUI = (StackPanel) second;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IStyleConnector.Connect(int indexOfvar1, object reg)
    {
      int num1 = 3;
      EventSetter eventSetter;
      while (true)
      {
        int num2 = num1;
        int num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_14;
            case 1:
            case 5:
              switch (num3)
              {
                case 2:
                  goto label_9;
                case 3:
                  goto label_3;
                case 4:
                  eventSetter = new EventSetter();
                  if (true)
                  {
                    num2 = 4;
                    continue;
                  }
                  goto label_14;
                default:
                  goto label_11;
              }
            case 2:
              goto label_12;
            case 3:
              goto label_1;
            case 4:
              goto label_7;
            case 6:
              goto label_8;
            case 7:
              goto label_2;
            case 8:
              goto label_15;
            case 9:
              goto label_16;
            default:
              num2 = 6;
              continue;
          }
        }
label_1:
        num3 = indexOfvar1;
        num1 = 5;
        continue;
label_7:
        eventSetter.Event = TextBoxBase.TextChangedEvent;
        eventSetter.Handler = (Delegate) new TextChangedEventHandler(this.PublishField);
        ((Style) reg).Setters.Add((SetterBase) eventSetter);
        eventSetter = new EventSetter();
        num1 = 0;
        continue;
label_9:
        eventSetter = new EventSetter();
        eventSetter.Event = UIElement.KeyDownEvent;
        num1 = 7;
        continue;
label_11:
        num1 = 8;
        continue;
label_14:
        eventSetter.Event = UIElement.KeyDownEvent;
        eventSetter.Handler = (Delegate) new KeyEventHandler(this.CountField);
        ((Style) reg).Setters.Add((SetterBase) eventSetter);
        num1 = 9;
      }
label_2:
      eventSetter.Handler = (Delegate) new KeyEventHandler(this.CountField);
      ((Style) reg).Setters.Add((SetterBase) eventSetter);
      return;
label_3:
      ((Style) reg).Setters.Add((SetterBase) new EventSetter()
      {
        Event = UIElement.KeyDownEvent,
        Handler = (Delegate) new KeyEventHandler(this.CountField)
      });
      return;
label_12:
      return;
label_8:
      return;
label_15:
      return;
label_16:;
    }

    internal static bool CustomizeObject() => true;

    internal static bool PrintObject() => false;
  }
}
