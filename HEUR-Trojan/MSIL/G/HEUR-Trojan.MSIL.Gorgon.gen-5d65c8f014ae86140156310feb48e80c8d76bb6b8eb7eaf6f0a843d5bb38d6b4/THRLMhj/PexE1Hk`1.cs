// Decompiled with JetBrains decompiler
// Type: THRLMhj.PexE1Hk
// Assembly: rIHK739, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: DCC06416-0005-44FB-A994-2D27682899C4
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-5d65c8f014ae86140156310feb48e80c8d76bb6b8eb7eaf6f0a843d5bb38d6b4.exe

using Ek7S0Nv;
using R94PbgT;
using RnEcdQv;
using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;

namespace THRLMhj
{
  internal class PexE1Hk<TResult>
  {
    private readonly CancellationToken \u0035WMdd3R;
    private readonly bool vcOL0Fu;
    private readonly Func<Exception, bool> FqsYILl;
    private readonly Action<int, Exception, TimeSpan> grSy1RN;
    private readonly Mn6ny2c aGyxCci;
    private readonly Func<Task<TResult>> v3mkQLO;
    private Task<TResult> iTrKHKX;
    private int XXaK2h0;

    public PexE1Hk(
      Func<Task<TResult>> taskFunc,
      Mn6ny2c shouldRetryHandler,
      Func<Exception, bool> isTransient,
      Action<int, Exception, TimeSpan> onRetrying,
      bool fastFirstRetry,
      CancellationToken cancellationToken)
    {
      this._taskFunc = taskFunc;
      this._shouldRetryHandler = shouldRetryHandler;
      this._isTransient = isTransient;
      this._onRetrying = onRetrying;
      this._fastFirstRetry = fastFirstRetry;
      this._cancellationToken = cancellationToken;
    }

    internal Task<TResult> cB8moJs() => this.ExecuteAsyncImpl((Task) null);

    private Task<TResult> Mrv0duT(Task D8yIIKE)
    {
      if (this._cancellationToken.IsCancellationRequested)
      {
        if (this._previousTask != null)
          return this._previousTask;
        TaskCompletionSource<TResult> completionSource = new TaskCompletionSource<TResult>();
        completionSource.TrySetCanceled();
        return completionSource.Task;
      }
      Task<TResult> task;
      try
      {
        task = this._taskFunc();
      }
      catch (Exception ex)
      {
        if (this._isTransient(ex))
        {
          TaskCompletionSource<TResult> completionSource = new TaskCompletionSource<TResult>();
          completionSource.TrySetException(ex);
          task = completionSource.Task;
        }
        else
          throw;
      }
      if (task.Status == TaskStatus.RanToCompletion)
        return task;
      if (task.Status == TaskStatus.Created)
        throw new InvalidOperationException(string.Format((IFormatProvider) CultureInfo.InvariantCulture, zgpvHIp.nFY0bDQ, new object[1]
        {
          (object) "taskFunc"
        }));
      return task.ContinueWith<Task<TResult>>(new Func<Task<TResult>, Task<TResult>>(this.ExecuteAsyncContinueWith), CancellationToken.None, TaskContinuationOptions.ExecuteSynchronously, TaskScheduler.Default).Unwrap<TResult>();
    }

    private Task<TResult> \u00392x67iA(Task<TResult> scXzddK)
    {
      if (!scXzddK.IsFaulted || this._cancellationToken.IsCancellationRequested)
        return scXzddK;
      Exception innerException = scXzddK.Exception.InnerException;
      if (!this._isTransient(innerException))
        return scXzddK;
      HB7SI8t hb7Si8t = this._shouldRetryHandler(this._retryCount++, innerException);
      if (!hb7Si8t.MbAxpjg)
        return scXzddK;
      TimeSpan delay = hb7Si8t.W0B7H8r;
      if (delay < TimeSpan.Zero)
        delay = TimeSpan.Zero;
      this._onRetrying(this._retryCount, innerException, delay);
      this._previousTask = scXzddK;
      return delay > TimeSpan.Zero && (this._retryCount > 1 || !this._fastFirstRetry) ? Task.Delay(delay).ContinueWith<Task<TResult>>(new Func<Task, Task<TResult>>(this.ExecuteAsyncImpl), CancellationToken.None, TaskContinuationOptions.ExecuteSynchronously, TaskScheduler.Default).Unwrap<TResult>() : this.ExecuteAsyncImpl((Task) null);
    }
  }
}
