// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSKeyboard
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using Microsoft.VisualBasic.CompilerServices;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  internal class NSKeyboard : Control
  {
    private Bitmap TextBitmap;
    private Graphics TextGraphics;
    private const string LowerKeys = "1234567890-=qwertyuiop[]asdfghjkl\\;'zxcvbnm,./`";
    private const string UpperKeys = "!@#$%^&*()_+QWERTYUIOP{}ASDFGHJKL|:\"ZXCVBNM<>?~";
    private Control _Target;
    private bool Shift;
    private int Pressed;
    private Rectangle[] Buttons;
    private char[] Lower;
    private char[] Upper;
    private string[] Other;
    private PointF[] UpperCache;
    private PointF[] LowerCache;
    private GraphicsPath GP1;
    private SizeF SZ1;
    private PointF PT1;
    private Pen P1;
    private Pen P2;
    private Pen P3;
    private SolidBrush B1;
    private PathGradientBrush PB1;
    private LinearGradientBrush GB1;

    public NSKeyboard()
    {
      this.Pressed = -1;
      this.Other = new string[3]
      {
        nameof (Shift),
        "Space",
        "Back"
      };
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.Font = new Font("Verdana", 8.25f);
      this.TextBitmap = new Bitmap(1, 1);
      this.TextGraphics = Graphics.FromImage((Image) this.TextBitmap);
      Size size = new Size(386, 162);
      this.MinimumSize = size;
      size = new Size(386, 162);
      this.MaximumSize = size;
      this.Lower = "1234567890-=qwertyuiop[]asdfghjkl\\;'zxcvbnm,./`".ToCharArray();
      this.Upper = "!@#$%^&*()_+QWERTYUIOP{}ASDFGHJKL|:\"ZXCVBNM<>?~".ToCharArray();
      this.PrepareCache();
      this.P1 = new Pen(Color.FromArgb(45, 45, 45));
      this.P2 = new Pen(Color.FromArgb(65, 65, 65));
      this.P3 = new Pen(Color.FromArgb(24, 24, 24));
      this.B1 = new SolidBrush(Color.FromArgb(100, 100, 100));
    }

    public Control Target
    {
      get => this._Target;
      set => this._Target = value;
    }

    private void PrepareCache()
    {
      this.Buttons = new Rectangle[51];
      this.UpperCache = new PointF[checked (this.Upper.Length - 1 + 1)];
      this.LowerCache = new PointF[checked (this.Lower.Length - 1 + 1)];
      int num1 = 0;
      do
      {
        int num2 = 0;
        do
        {
          int index = checked (num1 * 12 + num2);
          Rectangle rectangle = new Rectangle(checked (num2 * 32), checked (num1 * 32), 32, 32);
          this.Buttons[index] = rectangle;
          if (index != 47 && !char.IsLetter(this.Upper[index]))
          {
            SizeF sizeF = this.TextGraphics.MeasureString(Conversions.ToString(this.Upper[index]), this.Font);
            this.UpperCache[index] = new PointF((float) rectangle.X + ((float) (rectangle.Width / 2) - sizeF.Width / 2f), (float) ((double) checked (rectangle.Y + rectangle.Height) - (double) sizeF.Height - 2.0));
            sizeF = this.TextGraphics.MeasureString(Conversions.ToString(this.Lower[index]), this.Font);
            this.LowerCache[index] = new PointF((float) rectangle.X + ((float) (rectangle.Width / 2) - sizeF.Width / 2f), (float) ((double) checked (rectangle.Y + rectangle.Height) - (double) sizeF.Height - 2.0));
          }
          checked { ++num2; }
        }
        while (num2 <= 11);
        checked { ++num1; }
      }
      while (num1 <= 3);
      this.Buttons[48] = new Rectangle(0, 128, 64, 32);
      this.Buttons[49] = new Rectangle(this.Buttons[48].Right, 128, 256, 32);
      this.Buttons[50] = new Rectangle(this.Buttons[49].Right, 128, 64, 32);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
      ThemeModule.G.Clear(this.BackColor);
      ThemeModule.G.DrawRectangle(this.P1, 0, 0, 385, 161);
      int num1 = checked (this.Buttons.Length - 1);
      int index = 0;
      while (index <= num1)
      {
        Rectangle button = this.Buttons[index];
        int num2 = 0;
        if (index == this.Pressed)
        {
          num2 = 1;
          this.GP1 = new GraphicsPath();
          this.GP1.AddRectangle(button);
          this.PB1 = new PathGradientBrush(this.GP1);
          this.PB1.CenterColor = Color.FromArgb(60, 60, 60);
          this.PB1.SurroundColors = new Color[1]
          {
            Color.FromArgb(55, 55, 55)
          };
          this.PB1.FocusScales = new PointF(0.8f, 0.5f);
          ThemeModule.G.FillPath((Brush) this.PB1, this.GP1);
        }
        else
        {
          this.GB1 = new LinearGradientBrush(button, Color.FromArgb(60, 60, 60), Color.FromArgb(55, 55, 55), 90f);
          ThemeModule.G.FillRectangle((Brush) this.GB1, button);
        }
        switch (index)
        {
          case 47:
            this.DrawArrow(Color.Black, checked (button.X + num2 + 1), checked (button.Y + num2 + 1));
            this.DrawArrow(Color.FromArgb(235, 235, 235), checked (button.X + num2), checked (button.Y + num2));
            break;
          case 48:
          case 49:
          case 50:
            this.SZ1 = ThemeModule.G.MeasureString(this.Other[checked (index - 48)], this.Font);
            ThemeModule.G.DrawString(this.Other[checked (index - 48)], this.Font, Brushes.Black, (float) ((double) button.X + ((double) (button.Width / 2) - (double) this.SZ1.Width / 2.0) + (double) num2 + 1.0), (float) ((double) button.Y + ((double) (button.Height / 2) - (double) this.SZ1.Height / 2.0) + (double) num2 + 1.0));
            ThemeModule.G.DrawString(this.Other[checked (index - 48)], this.Font, Brushes.WhiteSmoke, (float) button.X + ((float) (button.Width / 2) - this.SZ1.Width / 2f) + (float) num2, (float) button.Y + ((float) (button.Height / 2) - this.SZ1.Height / 2f) + (float) num2);
            break;
          default:
            if (this.Shift)
            {
              ThemeModule.G.DrawString(Conversions.ToString(this.Upper[index]), this.Font, Brushes.Black, (float) checked (button.X + 3 + num2 + 1), (float) checked (button.Y + 2 + num2 + 1));
              ThemeModule.G.DrawString(Conversions.ToString(this.Upper[index]), this.Font, Brushes.WhiteSmoke, (float) checked (button.X + 3 + num2), (float) checked (button.Y + 2 + num2));
              if (!char.IsLetter(this.Lower[index]))
              {
                this.PT1 = this.LowerCache[index];
                ThemeModule.G.DrawString(Conversions.ToString(this.Lower[index]), this.Font, (Brush) this.B1, this.PT1.X + (float) num2, this.PT1.Y + (float) num2);
                break;
              }
              break;
            }
            ThemeModule.G.DrawString(Conversions.ToString(this.Lower[index]), this.Font, Brushes.Black, (float) checked (button.X + 3 + num2 + 1), (float) checked (button.Y + 2 + num2 + 1));
            ThemeModule.G.DrawString(Conversions.ToString(this.Lower[index]), this.Font, Brushes.WhiteSmoke, (float) checked (button.X + 3 + num2), (float) checked (button.Y + 2 + num2));
            if (!char.IsLetter(this.Upper[index]))
            {
              this.PT1 = this.UpperCache[index];
              ThemeModule.G.DrawString(Conversions.ToString(this.Upper[index]), this.Font, (Brush) this.B1, this.PT1.X + (float) num2, this.PT1.Y + (float) num2);
              break;
            }
            break;
        }
        ThemeModule.G.DrawRectangle(this.P2, checked (button.X + 1 + num2), checked (button.Y + 1 + num2), checked (button.Width - 2), checked (button.Height - 2));
        ThemeModule.G.DrawRectangle(this.P3, checked (button.X + num2), checked (button.Y + num2), button.Width, button.Height);
        if (index == this.Pressed)
        {
          ThemeModule.G.DrawLine(this.P1, button.X, button.Y, button.Right, button.Y);
          ThemeModule.G.DrawLine(this.P1, button.X, button.Y, button.X, button.Bottom);
        }
        checked { ++index; }
      }
    }

    private void DrawArrow(Color color, int rx, int ry)
    {
      Rectangle rect = new Rectangle(checked (rx + 8), checked (ry + 8), 16, 16);
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      Pen pen = new Pen(color, 1f);
      AdjustableArrowCap adjustableArrowCap = new AdjustableArrowCap(3f, 2f);
      pen.CustomEndCap = (CustomLineCap) adjustableArrowCap;
      ThemeModule.G.DrawArc(pen, rect, 0.0f, 290f);
      pen.Dispose();
      adjustableArrowCap.Dispose();
      ThemeModule.G.SmoothingMode = SmoothingMode.None;
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      int num1 = checked (unchecked (e.Y / 32) * 12 + unchecked (e.X / 32));
      if (num1 > 47)
      {
        int num2 = checked (this.Buttons.Length - 1);
        int index = 48;
        while (index <= num2)
        {
          if (this.Buttons[index].Contains(e.X, e.Y))
          {
            this.Pressed = index;
            break;
          }
          checked { ++index; }
        }
      }
      else
        this.Pressed = num1;
      this.HandleKey();
      this.Invalidate();
    }

    protected override void OnMouseUp(MouseEventArgs e)
    {
      this.Pressed = -1;
      this.Invalidate();
    }

    private void HandleKey()
    {
      if (this._Target == null || this.Pressed == -1)
        return;
      switch (this.Pressed)
      {
        case 47:
          this._Target.Text = string.Empty;
          break;
        case 48:
          this.Shift = !this.Shift;
          break;
        case 49:
          this._Target.Text += " ";
          break;
        case 50:
          if (this._Target.Text.Length == 0)
            break;
          this._Target.Text = this._Target.Text.Remove(checked (this._Target.Text.Length - 1));
          break;
        default:
          if (this.Shift)
          {
            this._Target.Text += Conversions.ToString(this.Upper[this.Pressed]);
            break;
          }
          this._Target.Text += Conversions.ToString(this.Lower[this.Pressed]);
          break;
      }
    }
  }
}
