// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: SecurityContextSwitch, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: B550A3E4-7AB3-42E5-BA1E-9838306CED9A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-633b443e56df746071e4f5c91d3f721ff0886afac579db94deaef37dc64fde58.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 1538098066;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1529744025)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = 224886257;
              continue;
            case 2:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * -2110623432 ^ 588714956;
              continue;
            case 3:
              int num3 = !this.m_Dict.ContainsKey(aKey) ? 256251879 : (num3 = 1992733496);
              num1 = num3 ^ (int) num2 * -418752231;
              continue;
            case 4:
              num1 = (int) num2 * -62998315 ^ -544124236;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -742997746;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1388194640)) % 9U)
          {
            case 0:
              num1 = (int) num2 * -1036101195 ^ 1417520284;
              continue;
            case 1:
              this.m_Dict.Add(aKey, value);
              num1 = -73870723;
              continue;
            case 2:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * 795623732 ^ -1460462636;
              continue;
            case 3:
              num1 = (int) num2 * -157168945 ^ 17525710;
              continue;
            case 4:
              goto label_3;
            case 5:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -1941562775 ^ -369543638;
              continue;
            case 6:
              int num3 = !flag ? -1398533638 : (num3 = -1065794534);
              num1 = num3 ^ (int) num2 * 2141951060;
              continue;
            case 7:
              num1 = (int) num2 * 2127928438 ^ 1773327584;
              continue;
            case 8:
              goto label_1;
            default:
              goto label_11;
          }
        }
label_3:
        return;
label_11:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
        if (aIndex < 0)
          goto label_4;
label_1:
        int num1 = -94243898;
label_2:
        bool flag;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1415789183)) % 6U)
          {
            case 0:
              jsonNode = (JSONNode) null;
              num1 = -181439582;
              continue;
            case 2:
              int num3 = !flag ? 462909393 : (num3 = 293687594);
              num1 = num3 ^ (int) num2 * 817512194;
              continue;
            case 3:
              goto label_3;
            case 4:
              goto label_1;
            case 5:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 1907553079 ^ -1449494433;
              continue;
            default:
              goto label_9;
          }
        }
label_3:
        int num4 = aIndex >= this.m_Dict.Count ? 1 : 0;
        goto label_5;
label_9:
        return jsonNode;
label_4:
        num4 = 1;
label_5:
        flag = num4 != 0;
        num1 = -1595571743;
        goto label_2;
      }
      set
      {
label_1:
        int num1 = -1421701379;
        while (true)
        {
          uint num2;
          int num3;
          switch ((num2 = (uint) (num1 ^ -1108053686)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 2:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * -594714652 ^ -1866146469;
                continue;
              }
              num3 = 1;
              break;
            case 3:
              num1 = (int) num2 * -1543111450 ^ -331803507;
              continue;
            case 4:
              goto label_1;
            default:
              goto label_10;
          }
          int num4;
          num1 = num4 = num3 != 0 ? -1384705483 : (num4 = -1790018409);
        }
label_3:
        return;
label_10:;
      }
    }

    public override int Count
    {
      get
      {
        int count = this.m_Dict.Count;
label_1:
        int num1 = -1564159096;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1311766186)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -337183482 ^ -1270696556;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 370594192;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1450059475)) % 13U)
        {
          case 0:
            goto label_1;
          case 1:
            flag2 = this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * 1822956539 ^ 964799160;
            continue;
          case 2:
            int num3 = !flag1 ? -1698163960 : (num3 = -1761103555);
            num1 = num3 ^ (int) num2 * -1426341412;
            continue;
          case 3:
            num1 = 1935490651;
            continue;
          case 4:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * 2115897014 ^ -1885427119;
            continue;
          case 5:
            this.m_Dict.Add(aKey, aItem);
            num1 = 665553468;
            continue;
          case 6:
            num1 = (int) num2 * -1469247536 ^ 1525108139;
            continue;
          case 7:
            int num4 = flag2 ? -388589082 : (num4 = -372130899);
            num1 = num4 ^ (int) num2 * -424915567;
            continue;
          case 8:
            num1 = (int) num2 * -1859368880 ^ 717822582;
            continue;
          case 9:
            goto label_3;
          case 10:
            flag1 = !JSONClass.\u200B‫⁮‍⁯⁯‫‏‮‮‏​‏‏⁪⁪‏⁭‌‭‌⁬‮⁪⁫‍‏‭⁮⁭⁯‏⁬‎‪‏‪⁭⁯⁬‮(aKey);
            num1 = (int) num2 * -1343913286 ^ 1253561520;
            continue;
          case 11:
            this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
            num1 = 1935490651;
            continue;
          case 12:
            num1 = (int) num2 * -1443696115 ^ 1671869064;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    public override JSONNode Remove(string aKey)
    {
label_1:
      int num1 = -1184849261;
      JSONNode jsonNode1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2106146640)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1157279155 ^ 257550376;
            continue;
          case 3:
            JSONNode jsonNode2 = this.m_Dict[aKey];
            this.m_Dict.Remove(aKey);
            jsonNode1 = jsonNode2;
            num1 = -1241982245;
            continue;
          case 4:
            num1 = (int) num2 * -1185781654 ^ 496640953;
            continue;
          case 5:
            int num3 = this.m_Dict.ContainsKey(aKey) ? -139534558 : (num3 = -1322916483);
            num1 = num3 ^ (int) num2 * 2013527272;
            continue;
          case 6:
            jsonNode1 = (JSONNode) null;
            num1 = (int) num2 * -2145650901 ^ 1872145202;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return jsonNode1;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = -962864868;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -559850327)) % 7U)
        {
          case 0:
            jsonNode = (JSONNode) null;
            num1 = -133047985;
            continue;
          case 1:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * -2112181239 ^ -743884705;
            continue;
          case 2:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 4:
            num1 = (int) num2 * -2096189856 ^ 69683492;
            continue;
          case 5:
            goto label_1;
          case 6:
            if (aIndex < 0)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 701735411 ^ 368838457;
            continue;
          default:
            goto label_11;
        }
        int num4;
        num1 = num4 = num3 != 0 ? -163702134 : (num4 = -962278011);
      }
label_11:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      try
      {
        return (JSONNode) null;
      }
      catch
      {
        return (JSONNode) null;
      }
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        JSONClass.\u003Cget_Childs\u003Ed__14 getChildsD14 = new JSONClass.\u003Cget_Childs\u003Ed__14(-2);
        getChildsD14.\u003C\u003E4__this = this;
label_1:
        int num1 = 979179572;
        IEnumerable<JSONNode> childs;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 832927062)) % 3U)
          {
            case 1:
              childs = (IEnumerable<JSONNode>) getChildsD14;
              num1 = (int) num2 * -324037538 ^ 151775025;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return childs;
      }
    }

    public IEnumerator GetEnumerator() => (IEnumerator) new JSONClass.\u003CGetEnumerator\u003Ed__15(0)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
      string str1 = "{";
label_1:
      int num1 = -700882204;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -107782002)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1049953684 ^ -1287111578;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_13:
        int num3 = !enumerator.MoveNext() ? -1700600 : (num3 = -212247985);
        KeyValuePair<string, JSONNode> current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -107782002)) % 9U)
          {
            case 1:
              flag = JSONClass.\u202C‎‏‎‬‌⁭​‭‮‫‬‮⁭‫​‪​‍‭‪⁪‪⁭‌⁭‭⁬⁮⁮‍‌⁪‬⁮‎‍‎‌‬‮(str1) > 2;
              num3 = (int) num4 * -1213062425 ^ -1577435338;
              continue;
            case 2:
              str1 = JSONClass.\u202A‪‮⁮‏‍‎‌‫⁬‏⁬‬‮‍‬‪⁫⁯‬​‏​⁭‫‏⁪⁭‍‪⁪‬⁯​‎‏‭‬​‌‮(str1, ", ");
              num3 = (int) num4 * 146165470 ^ 320332123;
              continue;
            case 3:
              num3 = -212247985;
              continue;
            case 4:
              current = enumerator.Current;
              num3 = -322039893;
              continue;
            case 5:
              goto label_13;
            case 6:
              num3 = (int) num4 * 1627497039 ^ 1181447295;
              continue;
            case 7:
              int num5 = flag ? -118437160 : (num5 = -1072084264);
              num3 = num5 ^ (int) num4 * 1902345603;
              continue;
            case 8:
              str1 = JSONClass.\u202D⁫‪⁯⁬​⁬‏‭⁬‪‍‏‫‫‌‪‎‎‌⁮‏⁪‬⁭‫⁭‍⁮‏‪⁪⁯‭‬⁭‬⁯‭‏‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u202E‭⁪⁭‎‎⁬⁫⁮‬⁪⁬‪​‮⁫⁫​⁪‪‎‫‏​⁯⁭⁮​⁬‎⁭‏​‌⁭‍‫⁯‎‭‮((object) current.Value)
              });
              num3 = -978233682;
              continue;
            default:
              goto label_16;
          }
        }
      }
label_16:
      string str2 = JSONClass.\u202A‪‮⁮‏‍‎‌‫⁬‏⁬‬‮‍‬‪⁫⁯‬​‏​⁭‫‏⁪⁭‍‪⁪‬⁯​‎‏‭‬​‌‮(str1, "}");
label_17:
      int num6 = -723174467;
      string str3;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ -107782002)) % 3U)
        {
          case 0:
            goto label_17;
          case 2:
            str3 = str2;
            num6 = (int) num7 * -1864428291 ^ -1158518875;
            continue;
          default:
            goto label_20;
        }
      }
label_20:
      return str3;
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = -1964665254;
      string str1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -171002027)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 638194750 ^ -2091576316;
            continue;
          case 3:
            str1 = "{ ";
            num1 = (int) num2 * -1650759201 ^ 1411158258;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator();
      try
      {
label_10:
        int num3 = enumerator.MoveNext() ? -2115843132 : (num3 = -1953143562);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -171002027)) % 10U)
          {
            case 0:
              num3 = (int) num4 * -2120836412 ^ 1663435623;
              continue;
            case 2:
              str1 = JSONClass.\u202A‪‮⁮‏‍‎‌‫⁬‏⁬‬‮‍‬‪⁫⁯‬​‏​⁭‫‏⁪⁭‍‪⁪‬⁯​‎‏‭‬​‌‮(str1, ", ");
              num3 = (int) num4 * 659231255 ^ -413224646;
              continue;
            case 3:
              str1 = JSONClass.\u202A⁯​​‮⁬⁮‏‏⁯⁫‬​​⁫‌‎‬​⁭⁬‌‏⁪⁪‍‍‏‌⁬⁫‬‮‮‮‬⁯‬⁯‪‮(str1, "\n", aPrefix, "   ");
              num3 = -1193344733;
              continue;
            case 4:
              str1 = JSONClass.\u202D⁫‪⁯⁬​⁬‏‭⁬‪‍‏‫‫‌‪‎‎‌⁮‏⁪‬⁭‫⁭‍⁮‏‪⁪⁯‭‬⁭‬⁯‭‏‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u202A‪‮⁮‏‍‎‌‫⁬‏⁬‬‮‍‬‪⁫⁯‬​‏​⁭‫‏⁪⁭‍‪⁪‬⁯​‎‏‭‬​‌‮(aPrefix, "   "))
              });
              num3 = (int) num4 * 776057815 ^ 120048446;
              continue;
            case 5:
              num3 = (int) num4 * 1149585176 ^ -446109205;
              continue;
            case 6:
              goto label_10;
            case 7:
              num3 = -2115843132;
              continue;
            case 8:
              int num5 = JSONClass.\u202C‎‏‎‬‌⁭​‭‮‫‬‮⁭‫​‪​‍‭‪⁪‪⁭‌⁭‭⁬⁮⁮‍‌⁪‬⁮‎‍‎‌‬‮(str1) > 3 ? -405713873 : (num5 = -600321332);
              num3 = num5 ^ (int) num4 * 2113444206;
              continue;
            case 9:
              current = enumerator.Current;
              num3 = -1483546731;
              continue;
            default:
              goto label_22;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_18:
        int num6 = -1441825611;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ -171002027)) % 3U)
          {
            case 1:
              num6 = (int) num7 * 2140491183 ^ 1745807309;
              continue;
            case 2:
              goto label_18;
            default:
              goto label_21;
          }
        }
label_21:;
      }
label_22:
      string str2 = JSONClass.\u202A⁯​​‮⁬⁮‏‏⁯⁫‬​​⁫‌‎‬​⁭⁬‌‏⁪⁪‍‍‏‌⁬⁫‬‮‮‮‬⁯‬⁯‪‮(str1, "\n", aPrefix, "}");
label_23:
      int num8 = -1216719301;
      string str3;
      while (true)
      {
        uint num9;
        switch ((num9 = (uint) (num8 ^ -171002027)) % 4U)
        {
          case 1:
            num8 = (int) num9 * -208646640 ^ -1504354679;
            continue;
          case 2:
            str3 = str2;
            num8 = (int) num9 * -1499945259 ^ 1568617542;
            continue;
          case 3:
            goto label_23;
          default:
            goto label_27;
        }
      }
label_27:
      return str3;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
      JSONClass.\u206B‫⁭‎‪‮⁪‪⁫‬​‫⁭⁪⁮‍⁯‫‌‎⁬​‫‎‫⁯‫⁮⁫‍‫‌‫‌‌‍​‌⁬‬‮(aWriter, (byte) 2);
label_1:
      int num1 = 55004229;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 201491950)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            JSONClass.\u206E‭⁭⁭⁯‫⁪‪⁪⁬‭‮‍⁪⁫‮⁪‫⁮⁯⁯‭⁬⁬‪‮⁯⁫‎‫‌‪‭‍⁫‍⁯‪‎‭‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * -813750891 ^ -673560707;
            continue;
          case 3:
            num1 = (int) num2 * 165925616 ^ 80461424;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator();
      try
      {
label_10:
        int num3 = !enumerator.MoveNext() ? 553760242 : (num3 = 883606807);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 201491950)) % 7U)
          {
            case 0:
              num3 = 883606807;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = 1073832806;
              continue;
            case 2:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * 1370089194 ^ 599759561;
              continue;
            case 3:
              num3 = (int) num4 * -1814648804 ^ 1874718304;
              continue;
            case 4:
              JSONClass.\u200F‪‎⁫‬‫‏‏⁯​‏⁪‫‏⁪‮‭‎‭‮‏‭⁭⁬‮‏‬⁮‬​‮⁮​‪⁭‎‬‭‌‏‮(aWriter, current);
              num3 = (int) num4 * 751976691 ^ -684634189;
              continue;
            case 5:
              goto label_18;
            case 6:
              goto label_10;
            default:
              goto label_14;
          }
        }
label_18:
        return;
label_14:;
      }
      finally
      {
        enumerator.Dispose();
label_16:
        int num5 = 1448207006;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 201491950)) % 3U)
          {
            case 0:
              goto label_16;
            case 1:
              num5 = (int) num6 * 920840094 ^ -1796318397;
              continue;
            default:
              goto label_20;
          }
        }
label_20:;
      }
    }

    static bool \u200B‫⁮‍⁯⁯‫‏‮‮‏​‏‏⁪⁪‏⁭‌‭‌⁬‮⁪⁫‍‏‭⁮⁭⁯‏⁬‎‪‏‪⁭⁯⁬‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u202C‎‏‎‬‌⁭​‭‮‫‬‮⁭‫​‪​‍‭‪⁪‪⁭‌⁭‭⁬⁮⁮‍‌⁪‬⁮‎‍‎‌‬‮([In] string obj0) => obj0.Length;

    static string \u202A‪‮⁮‏‍‎‌‫⁬‏⁬‬‮‍‬‪⁫⁯‬​‏​⁭‫‏⁪⁭‍‪⁪‬⁯​‎‏‭‬​‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202E‭⁪⁭‎‎⁬⁫⁮‬⁪⁬‪​‮⁫⁫​⁪‪‎‫‏​⁯⁭⁮​⁬‎⁭‏​‌⁭‍‫⁯‎‭‮([In] object obj0) => obj0.ToString();

    static string \u202D⁫‪⁯⁬​⁬‏‭⁬‪‍‏‫‫‌‪‎‎‌⁮‏⁪‬⁭‫⁭‍⁮‏‪⁪⁯‭‬⁭‬⁯‭‏‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A⁯​​‮⁬⁮‏‏⁯⁫‬​​⁫‌‎‬​⁭⁬‌‏⁪⁪‍‍‏‌⁬⁫‬‮‮‮‬⁯‬⁯‪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u206B‫⁭‎‪‮⁪‪⁫‬​‫⁭⁪⁮‍⁯‫‌‎⁬​‫‎‫⁯‫⁮⁫‍‫‌‫‌‌‍​‌⁬‬‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u206E‭⁭⁭⁯‫⁪‪⁪⁬‭‮‍⁪⁫‮⁪‫⁮⁯⁯‭⁬⁬‪‮⁯⁫‎‫‌‪‭‍⁫‍⁯‪‎‭‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u200F‪‎⁫‬‫‏‏⁯​‏⁪‫‏⁪‮‭‎‭‮‏‭⁭⁬‮‏‬⁮‬​‮⁮​‪⁭‎‬‭‌‏‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
