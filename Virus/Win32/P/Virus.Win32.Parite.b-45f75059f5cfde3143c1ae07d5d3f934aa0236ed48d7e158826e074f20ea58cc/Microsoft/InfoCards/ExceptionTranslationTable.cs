// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.ExceptionTranslationTable
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: ADE0A079-11DB-4A46-8BDE-D2A592CA8DEA
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Parite.b-45f75059f5cfde3143c1ae07d5d3f934aa0236ed48d7e158826e074f20ea58cc.exe

using System;
using System.Collections.Generic;
using System.Security;

namespace Microsoft.InfoCards
{
  internal sealed class ExceptionTranslationTable
  {
    private Dictionary<Type, int> m_table;
    private static ExceptionTranslationTable s_thisTable;

    public static ExceptionTranslationTable Instance
    {
      get
      {
        if (ExceptionTranslationTable.s_thisTable == null)
          ExceptionTranslationTable.s_thisTable = new ExceptionTranslationTable();
        return ExceptionTranslationTable.s_thisTable;
      }
    }

    private ExceptionTranslationTable()
    {
      this.m_table = new Dictionary<Type, int>();
      this.m_table.Add(typeof (ApplicationException), -2146232832);
      this.m_table.Add(typeof (InvalidOperationException), -1073413888);
      this.m_table.Add(typeof (NotImplementedException), -2147467263);
      this.m_table.Add(typeof (SecurityException), -2147024891);
    }

    public int this[Type key] => this.m_table[key];

    public bool ContainsKey(Type key) => this.m_table.ContainsKey(key);
  }
}
