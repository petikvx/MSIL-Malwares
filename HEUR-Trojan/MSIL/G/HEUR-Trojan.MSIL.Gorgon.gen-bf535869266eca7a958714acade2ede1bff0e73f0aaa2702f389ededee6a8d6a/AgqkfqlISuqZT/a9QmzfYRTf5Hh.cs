// Decompiled with JetBrains decompiler
// Type: AgqkfqlISuqZT.a9QmzfYRTf5Hh
// Assembly: Udby4Jt48oXkJ, Version=3.17.2.31, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 37899E89-D673-4F5B-A193-2E4DF6A54096
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-bf535869266eca7a958714acade2ede1bff0e73f0aaa2702f389ededee6a8d6a.exe

namespace AgqkfqlISuqZT
{
  internal static class a9QmzfYRTf5Hh
  {
    public const string mIiepiuTrmpnK = "Accessing WS metadata exchange failed";
    public const string chHopEih8lMaV = "Assembly required for the platform not found. Make sure assembly '{0}' exists";
    public const string \u0033Z7zarJ20tGLN = "Loading an assembly required for the platform failed. Make sure assembly for the correct platform '{0}' exists";
    public const string BqetzisU3HpXM = "The browser based authentication dialog failed to complete";
    public const string gJ2LvScaOq3Uk = "'authority' should be in Uri format";
    public const string Wte9LAyCqTBXy = "'authority' is not in the list of valid addresses";
    public const string i3cqujUCGNaBc = "Authority validation failed";
    public const string tWl36I13s37r7 = "Non-HTTPS url redirect is not supported in webview";
    public const string Jo9i0KcGBqiQp = "'authority' should use the 'https' scheme";
    public const string m68zbLtLjEgqU = "'authority' Uri should have at least one segment in the path (i.e. https://<host>/<path>/...)";
    public const string snXdnmDPXLxLi = "The authorization server returned an invalid response";
    public const string LSNv7nIVRkPjn = "The certificate used must have a key size of at least {0} bits";
    public const string \u0030TPWzDwGuxnuR = "No identity provider email address suffix matches the provided address";
    public const string \u0036hWxt0WuV6sti = "Encoded token size is beyond the upper limit";
    public const string SLi7Euu7UmE1o = "Failed to acquire token silently as no token was found in the cache. Call method AcquireToken";
    public const string yI8j4ctZ1DSox = "Failed to refresh access token";
    public const string oTn2USUhXAfDh = "Federated service at {0} returned error: {1}";
    public const string PbM9dKXy9SUsN = "The LoginUrl property in identityProvider cannot be null";
    public const string B37xiyYvHjnBU = "No identity provider matches the requested protocol";
    public const string JE63MPw5vmtKt = "Token request made to identity provider failed. Check InnerException for more details";
    public const string cfVlupvb2AS7c = "Parameter has invalid length";
    public const string TgIbkLimn6HKG = "Invalid authenticate header format";
    public const string YVMIoK0UVGQlI = "Invalid authority type. This method overload is not supported by '{0}'";
    public const string ux9gUw4aY17GK = "Invalid credential type";
    public const string foFabwRFWwRFo = "Parameter '{0}' has invalid format";
    public const string EGBwTJguS8PVf = "Invalid token cache key format";
    public const string onyeaPDAeb1Ln = "WWW-Authenticate header was expected in the response";
    public const string N9P0PvDJXBQIp = "The cache contains multiple tokens satisfying the requirements. Call AcquireToken again providing more arguments (e.g. UserId)";
    public const string a14W1Ycv1pbCg = "The network is down so authentication cannot proceed";
    public const string qV35LZx2WUCc7 = "No data received from security token service";
    public const string p2DYBnHKBdLCj = "Parameter '{0}' cannot be null";
    public const string cwbXLqHZWLezC = "Parsing WS metadata exchange failed";
    public const string \u0038GqgtfVo1jLlx = "Parsing WS-Trust response failed";
    public const string \u0036Y8XA1x87Pcp7 = "Password is required for managed user";
    public const string njiuo9vywz3rq = "'redirectUri' must NOT include a fragment component";
    public const string KkRqzbeVxib8t = "Service returned error. Check InnerException for more details";
    public const string n8QsqohQe81bd = "Unencrypted broker response hash did not match the expected hash";
    public const string ztpw99QOz5Brn = "Metadata request to Access Control service failed. Check InnerException for more details";
    public const string \u0033dap86IBGxDhG = "Token request to security token service failed.  Check InnerException for more details";
    public const string UFaJDEacq7SvP = "Unauthorized Http Status Code (401) was expected in the response";
    public const string \u0031wwPhpQscilbE = "Unauthorized http response (status code 401) was expected";
    public const string Pe8vLOIymVOJI = "Unexpected list of valid addresses";
    public const string NbaCvdCo0zr7Z = "Unknown error";
    public const string VUqIsix5LpnPZ = "Could not identify logged in user";
    public const string Zzggvri1AX7qc = "Unknown User Type";
    public const string eD7raI4LpjYJ7 = "Authority validation is not supported for this type of authority";
    public const string Y4xeRwBOTAtqu = "This authority does not support refresh token for multiple resources. Pass null as a resource";
    public const string fsYgW0OLsXfKP = "User canceled authentication";
    public const string \u0034tWaMEY4Xhip6 = "User '{0}' returned by service does not match user '{1}' in the request";
    public const string mDGmhAzZ9GB7Z = "credential.AssertionType cannot be empty";
    public const string ogzJZ18RO6mkK = "One of two conditions was encountered: 1. The PromptBehavior.Never flag was passed, but the constraint could not be honored, because user interaction was required. 2. An error occurred during a silent web authentication that prevented the http authentication flow from completing in a short enough time frame";
    public const string p1n3rtvLrsuSo = "User realm discovery failed";
    public const string mRX5WtdBxfJFS = "WS-Trust endpoint not found in metadata document";
    public const string Rpm0RodObhGAM = "Failed to get user name";
    public const string dU0Ht43jSCdse = "Federation Metadata Url is missing for federated user. This user type is unsupported.";
    public const string RzfYMLX1oXyXc = "If you do not need access token for any specific user, pass userId=UserIdentifier.AnyUser instead of userId=null.";
    public const string g4WXjzyfHtW0B = "Integrated authentication failed. You may try an alternative authentication method";
    public const string kWTX0RCeE1BnG = "Duplicate query parameter '{0}' in extraQueryParameters";
    public const string x7gDJjHQbiQBQ = "Device Certificate was not found for {0}";
    public const string q3xOlIKDdfoXK = "interaction_required";
  }
}
