// Decompiled with JetBrains decompiler
// Type: ᡄ
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

public class ᡄ
{
  public static int ᡆ(string s1, string s2)
  {
    if (s1 == null && s2 == null)
      return 0;
    if (s1 == null)
      return -1;
    if (s2 == null)
      return 1;
    if (s1.Equals(string.Empty) && s2.Equals(string.Empty))
      return 0;
    if (s1.Equals(string.Empty) || s2.Equals(string.Empty))
      return -1;
    bool flag1 = char.IsLetterOrDigit(s1, 0);
    bool flag2 = char.IsLetterOrDigit(s2, 0);
    if (flag1 && !flag2)
      return 1;
    if (!flag1 && flag2)
      return -1;
    int ᙄ = 0;
    int ᙈ = 0;
    do
    {
      bool flag3 = char.IsDigit(s1, ᙄ);
      bool flag4 = char.IsDigit(s2, ᙈ);
      if (!flag3 && !flag4)
      {
        bool flag5 = char.IsLetter(s1, ᙄ);
        bool flag6 = char.IsLetter(s2, ᙈ);
        if (flag5 && flag6 || !flag5 && !flag6)
        {
          int num = !flag5 || !flag6 ? s1[ᙄ].CompareTo(s2[ᙈ]) : char.ToLower(s1[ᙄ]).CompareTo(char.ToLower(s2[ᙈ]));
          if (num != 0)
            return num;
        }
        else
        {
          if (!flag5 && flag6)
            return -1;
          if (flag5 && !flag6)
            return 1;
        }
      }
      else if (flag3 && flag4)
      {
        int num = ᡄ.ᡆᙃ(s1, ref ᙄ, s2, ref ᙈ);
        if (num != 0)
          return num;
      }
      else
      {
        if (flag3)
          return -1;
        if (flag4)
          return 1;
      }
      ++ᙄ;
      ++ᙈ;
      if (ᙄ >= s1.Length && ᙈ >= s2.Length)
        return 0;
    }
    while (ᙄ < s1.Length && ᙈ < s2.Length);
    return -1;
  }

  private static int ᡆᙃ(string ᙂ, ref int ᙄ, string ᙆ, ref int ᙈ)
  {
    int ᙈ1 = ᙄ;
    int ᙈ2 = ᙈ;
    int ᙆ1 = ᙄ;
    int ᙆ2 = ᙈ;
    ᡄ.ᡇᙃ(ᙂ, ᙄ, ref ᙆ1, ref ᙈ1);
    ᡄ.ᡇᙃ(ᙆ, ᙈ, ref ᙆ2, ref ᙈ2);
    int num1 = ᙄ;
    ᙄ = ᙆ1 - 1;
    int num2 = ᙈ;
    ᙈ = ᙆ2 - 1;
    int num3 = ᙆ1 - ᙈ1;
    int num4 = ᙆ2 - ᙈ2;
    if (num3 < num4)
      return -1;
    if (num3 > num4)
      return 1;
    int index1 = ᙈ1;
    int index2 = ᙈ2;
    while (index1 <= ᙄ)
    {
      int num5 = ᙂ[index1].CompareTo(ᙆ[index2]);
      if (num5 != 0)
        return num5;
      ++index1;
      ++index2;
    }
    int num6 = ᙆ1 - num1;
    int num7 = ᙆ2 - num2;
    if (num6 == num7)
      return 0;
    return num6 > num7 ? -1 : 1;
  }

  private static void ᡇᙃ(string ᙂ, int ᙄ, ref int ᙆ, ref int ᙈ)
  {
    ᙈ = ᙄ;
    ᙆ = ᙄ;
    bool flag = true;
    while (char.IsDigit(ᙂ, ᙆ))
    {
      if (flag && ᙂ[ᙆ].Equals('0'))
        ++ᙈ;
      else
        flag = false;
      ++ᙆ;
      if (ᙆ >= ᙂ.Length)
        break;
    }
  }
}
