// Decompiled with JetBrains decompiler
// Type: e9H1.Ex7f
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using Bz9;
using System;
using System.ComponentModel;
using System.Data.Linq.Mapping;
using System.Runtime.InteropServices;
using System.Threading;

namespace e9H1
{
  [Table(Name = "dbo.mandatory_deduction")]
  public class Ex7f : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs Ⴅ = new PropertyChangingEventArgs(string.Empty);
    private int _deduction_id;
    private string _deduction_type;
    private Decimal? _deduction_value;
    private string _deduction_format;
    private PropertyChangingEventHandler Ⴓ;
    private Sb0.g3G.Xa8 Ⴐ = new Sb0.g3G.Xa8();

    [Column(DbType = "Int NOT NULL", IsPrimaryKey = true, Storage = "_deduction_id")]
    public int Ⴐ
    {
      get => this._deduction_id;
      [param: In] set
      {
        if (this._deduction_id == value)
          return;
        this.z2N8();
        this._deduction_id = value;
        this.p6GB("deduction_id");
      }
    }

    [Column(DbType = "VarChar(20)", Storage = "_deduction_type")]
    public string Ⴍ
    {
      get => (ICloneable) this._deduction_type as string;
      [param: In] set
      {
        if (string.Equals(this._deduction_type, value))
          return;
        this.z2N8();
        this._deduction_type = value;
        this.p6GB("deduction_type");
      }
    }

    [Column(DbType = "Decimal(18,2)", Storage = "_deduction_value")]
    public Decimal? Ⴅ
    {
      get => this._deduction_value;
      [param: In] set
      {
        if (this._deduction_value.Equals((object) value))
          return;
        this.z2N8();
        this._deduction_value = value;
        this.p6GB("deduction_value");
      }
    }

    [Column(DbType = "VarChar(20)", Storage = "_deduction_format")]
    public string Ⴈ
    {
      get => this._deduction_format;
      [param: In] set
      {
        if (string.Equals(this._deduction_format, value))
          return;
        this.z2N8();
        this._deduction_format = value;
        this.p6GB("deduction_format");
      }
    }

    public event PropertyChangingEventHandler Ⴐ
    {
      add
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴓ;
        MulticastDelegate comparand;
        do
        {
          comparand = (MulticastDelegate) (multicastDelegate as PropertyChangingEventHandler);
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴓ, (comparand as PropertyChangingEventHandler) + value, comparand as PropertyChangingEventHandler);
        }
        while (multicastDelegate as PropertyChangingEventHandler != comparand as PropertyChangingEventHandler);
      }
      remove
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴓ;
        MulticastDelegate comparand;
        do
        {
          comparand = (MulticastDelegate) (multicastDelegate as PropertyChangingEventHandler);
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴓ, (object) ((comparand as PropertyChangingEventHandler) - value) as PropertyChangingEventHandler, (PropertyChangingEventHandler) comparand);
        }
        while ((PropertyChangingEventHandler) multicastDelegate != (PropertyChangingEventHandler) comparand);
      }
    }

    public event PropertyChangedEventHandler Ⴓ
    {
      add
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴐ.Ⴃ;
        MulticastDelegate comparand;
        do
        {
          comparand = multicastDelegate;
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴐ.Ⴃ, (object) ((comparand as PropertyChangedEventHandler) + value) as PropertyChangedEventHandler, comparand as PropertyChangedEventHandler);
        }
        while ((PropertyChangedEventHandler) multicastDelegate != comparand as PropertyChangedEventHandler);
      }
      remove
      {
        object obj = (object) this.Ⴐ.Ⴃ;
        MulticastDelegate multicastDelegate;
        do
        {
          multicastDelegate = (MulticastDelegate) obj;
          obj = (object) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴐ.Ⴃ, (PropertyChangedEventHandler) Delegate.Remove((Delegate) multicastDelegate, (Delegate) value), multicastDelegate as PropertyChangedEventHandler);
        }
        while ((PropertyChangedEventHandler) obj != multicastDelegate as PropertyChangedEventHandler);
      }
    }

    protected virtual void z2N8()
    {
      if (this.Ⴓ == null)
        return;
      object ⴓ = (object) this.Ⴓ;
      if ((PropertyChangingEventHandler) ⴓ == null)
        return;
      ((PropertyChangingEventHandler) ⴓ)((object) this, Ex7f.Ⴅ);
    }

    protected virtual void p6GB([In] string obj0)
    {
      if (this.Ⴐ.Ⴃ == null)
        return;
      object ⴃ = (object) this.Ⴐ.Ⴃ;
      if (!(ⴃ is PropertyChangedEventHandler))
        return;
      (ⴃ as PropertyChangedEventHandler)((object) this, new PropertyChangedEventArgs(obj0));
    }
  }
}
