// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartUsageCore.PlatformUsageCounter
// Assembly: 5, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D96FE905-3567-4568-B7BF-8C667D038E34
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.DarkKomet.aykq-fdc0862a8406ebbcbbf4f093602f275a5f88cc2d88940d115e6108504c21b1f4.exe

using Microsoft.Win32;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using SmartAssembly.SmartUsageWithoutUI;
using System;
using System.Globalization;
using System.Runtime.InteropServices;

namespace SmartAssembly.SmartUsageCore
{
  internal static class PlatformUsageCounter
  {
    [NonSerialized]
    internal static GetString \u0013;

    public static unsafe void CountPlatformUsages()
    {
      // ISSUE: untyped stack allocation
      IntPtr num = __untypedstackalloc(12);
      if (true)
        goto label_26;
label_1:
      void* voidPtr;
      try
      {
        if (PlatformUsageCounter.DotNetVersionInstalled(PlatformUsageCounter.\u0013(1421)))
        {
          PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1426));
          goto label_11;
        }
        else if (!PlatformUsageCounter.DotNetVersionInstalled(PlatformUsageCounter.\u0013(1467)))
        {
          if (PlatformUsageCounter.DotNetVersionInstalled(PlatformUsageCounter.\u0013(1517)))
          {
            PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1526));
            goto label_11;
          }
          else
            goto label_7;
        }
label_4:
        PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1476));
        goto label_11;
label_7:
        if (PlatformUsageCounter.DotNetVersionInstalled(PlatformUsageCounter.\u0013(1567)))
          PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1584));
        else if (PlatformUsageCounter.DotNetVersionInstalled(PlatformUsageCounter.\u0013(1625)))
          PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1638));
label_11:
        *(int*) voidPtr = Environment.OSVersion.Version.Major;
        switch (*(int*) voidPtr)
        {
          case 5:
            *(int*) ((IntPtr) voidPtr + 4) = Environment.OSVersion.Version.Minor;
            switch (*(int*) ((IntPtr) voidPtr + 4))
            {
              case 0:
                PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1679));
                break;
              case 1:
                if (true)
                {
                  PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1712));
                  break;
                }
                goto case 0;
              case 2:
                PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1741));
                break;
            }
            break;
          case 6:
            *(int*) ((IntPtr) voidPtr + 8) = Environment.OSVersion.Version.Minor;
            if (true)
            {
              switch (*(int*) ((IntPtr) voidPtr + 8))
              {
                case 0:
                  if (true)
                  {
                    PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1774));
                    break;
                  }
                  goto label_7;
                case 1:
                  PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1815));
                  break;
                case 2:
                  PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1852));
                  break;
                default:
                  if (false)
                    goto label_4;
                  else
                    break;
              }
            }
            else
              break;
            break;
        }
        PlatformUsageCounter.ReportNumberOfCpuCores();
        PlatformUsageCounter.ReportCultureName();
        PlatformUsageCounter.ReportOSBitness();
        return;
      }
      catch
      {
        return;
      }
label_26:
      voidPtr = (void*) num;
      goto label_1;
    }

    public static void ReportNumberOfCpuCores()
    {
      try
      {
        if (false)
          return;
        PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1881) + (object) Environment.ProcessorCount);
      }
      catch
      {
      }
    }

    public static void ReportCultureName()
    {
      try
      {
        if (false)
          return;
        PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1910) + CultureInfo.CurrentCulture.Name);
      }
      catch
      {
      }
    }

    public static void ReportOSBitness()
    {
      try
      {
        do
        {
          PlatformUsageCounter.ReportUsage(PlatformUsageCounter.\u0013(1943) + (object) (PlatformUsageCounter.Is64BitOperatingSystem() ? 64 : 32));
        }
        while (false);
      }
      catch
      {
      }
    }

    private static bool Is64BitOperatingSystem()
    {
      bool wow64Process;
      if (true)
      {
        if (IntPtr.Size == 8)
          return true;
        int num1 = PlatformUsageCounter.DoesWin32MethodExist(PlatformUsageCounter.\u0013(1972), PlatformUsageCounter.\u0013(1989)) ? 1 : 0;
        while (num1 == 0 || !PlatformUsageCounter.IsWow64Process(PlatformUsageCounter.GetCurrentProcess(), out wow64Process))
        {
          int num2 = 0;
          if (num2 != 0)
          {
            num1 = num2;
          }
          else
          {
            if (num2 == 0)
              return num2 != 0;
            num1 = num2;
          }
        }
      }
      return wow64Process;
    }

    private static bool DoesWin32MethodExist(string moduleName, string methodName)
    {
      IntPtr moduleHandle = PlatformUsageCounter.GetModuleHandle(moduleName);
      if (false)
        goto label_3;
      else
        goto label_6;
label_1:
      int num1;
      if (num1 == 0)
        goto label_3;
label_2:
      num1 = 0;
      if (num1 == 0)
        return num1 != 0;
      goto label_1;
label_3:
      IntPtr num2;
      IntPtr num3;
      if (true)
      {
        num2 = PlatformUsageCounter.GetProcAddress(moduleHandle, methodName);
        num3 = IntPtr.Zero;
        goto label_9;
      }
      else
        goto label_2;
label_6:
      IntPtr num4 = moduleHandle;
      IntPtr zero = IntPtr.Zero;
      if (true)
      {
        num1 = num4 == zero ? 1 : 0;
        goto label_1;
      }
      else
      {
        num3 = zero;
        num2 = num4;
      }
label_9:
      return num2 != num3;
    }

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetCurrentProcess();

    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
    private static extern IntPtr GetModuleHandle(string moduleName);

    [DllImport("kernel32", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr GetProcAddress(IntPtr hModule, [MarshalAs(UnmanagedType.LPStr)] string procName);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool IsWow64Process(IntPtr hProcess, out bool wow64Process);

    private static bool DotNetVersionInstalled(string versionKey)
    {
      RegistryKey registryKey = (RegistryKey) null;
      bool flag;
      try
      {
        registryKey = Registry.LocalMachine.OpenSubKey(PlatformUsageCounter.\u0013(2010) + versionKey);
        if (registryKey != null)
          goto label_3;
label_2:
        registryKey = Registry.LocalMachine.OpenSubKey(PlatformUsageCounter.\u0013(2071) + versionKey);
label_3:
        flag = registryKey != null;
        if (false)
          goto label_2;
      }
      finally
      {
        registryKey?.Close();
      }
      return flag;
    }

    [SmartAssembly.SmartUsageCore.ReportUsage]
    public static void ReportUsage([FeatureName, DoNotPrune] string featureName) => UsageReporterWithoutUI.DynamicFeatureUsed(featureName);

    static PlatformUsageCounter() => Strings.CreateGetStringDelegate(typeof (PlatformUsageCounter));
  }
}
