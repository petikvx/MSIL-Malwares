// Decompiled with JetBrains decompiler
// Type: etlgen.CharGenerador
// Assembly: UCOMIEnumConnecti, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5D827560-3619-4F41-B7F7-70598092DF43
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.Crysan.egg-57798b73d1c044cbf668948774c77628154f6bcacd563b69df088f38b2645fd0.exe

using System;
using System.Xml;

namespace etlgen
{
  public class CharGenerador : ObjGenerador
  {
    private string tipo;
    private int min;
    private int max;

    public CharGenerador()
    {
      this.entidad = this.id = "char";
      this.tipo = "";
      this.min = Math.Min(97, 65);
      this.max = Math.Max(122, 90) + 1;
    }

    public override object Generar(Random random) => (object) (char) random.Next(this.min, this.max);

    public override ObjGenerador Clonar()
    {
      CharGenerador charGenerador = new CharGenerador();
      charGenerador.entidad = this.entidad;
      charGenerador.id = charGenerador.id;
      charGenerador.tipo = this.tipo;
      charGenerador.min = this.min;
      charGenerador.max = this.max;
      return (ObjGenerador) charGenerador;
    }

    public override void Cargar(XmlTextReader reader, ETLConfig configuracion)
    {
      if (reader.NodeType != XmlNodeType.Element || reader.Name != this.entidad)
        this.ErrorEntidad(this.entidad);
      string id = (string) null;
      string valor = (string) null;
      while (reader.MoveToNextAttribute())
      {
        string name = reader.Name;
        if (!(name == "id"))
        {
          if (name == "tipo")
            valor = reader.Value;
          else
            this.ErrorAtributo(this.entidad, reader.Name, reader.Value, reader.LineNumber);
        }
        else
          id = reader.Value;
      }
      if (id != null)
        this.id = id;
      if (valor != null)
      {
        string str = valor;
        if (!(str == "M"))
        {
          if (str == "m")
          {
            this.min = 97;
            this.max = 123;
          }
          else
            this.ErrorValor(this.entidad, id, "tipo", valor);
        }
        else
        {
          this.min = 65;
          this.max = 91;
        }
        this.tipo = valor;
      }
      else
      {
        this.min = Math.Min(97, 65);
        this.max = Math.Max(122, 90) + 1;
      }
    }

    public override string ToString() => "<" + this.entidad + " id=\"" + this.id + "\" " + (this.tipo != "" ? "tipo=\"" + this.tipo + "\" " : "") + "/>";
  }
}
