// Decompiled with JetBrains decompiler
// Type: ProtoBuf.Serializers.ParseableSerializer
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using ProtoBuf.Meta;
using System;
using System.Reflection;

namespace ProtoBuf.Serializers
{
  internal sealed class ParseableSerializer : IProtoSerializer
  {
    private readonly MethodInfo parse;

    public static ParseableSerializer TryCreate(Type type, TypeModel model)
    {
      MethodInfo parse = (object) type != null ? type.GetMethod("Parse", BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public, (Binder) null, new Type[1]
      {
        model.MapType(typeof (string))
      }, (ParameterModifier[]) null) : throw new ArgumentNullException(nameof (type));
      if ((object) parse == null || (object) parse.ReturnType != (object) type)
        return (ParseableSerializer) null;
      if (Helpers.IsValueType(type))
      {
        MethodInfo customToString = ParseableSerializer.GetCustomToString(type);
        if ((object) customToString == null || (object) customToString.ReturnType != (object) model.MapType(typeof (string)))
          return (ParseableSerializer) null;
      }
      return new ParseableSerializer(parse);
    }

    private static MethodInfo GetCustomToString(Type type) => type.GetMethod("ToString", BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public, (Binder) null, Helpers.EmptyTypes, (ParameterModifier[]) null);

    private ParseableSerializer(MethodInfo parse) => this.parse = parse;

    public Type ExpectedType => this.parse.DeclaringType;

    bool IProtoSerializer.RequiresOldValue => false;

    bool IProtoSerializer.ReturnsValue => true;

    public object Read(object value, ProtoReader source) => this.parse.Invoke((object) null, new object[1]
    {
      (object) source.ReadString()
    });

    public void Write(object value, ProtoWriter dest) => ProtoWriter.WriteString(value.ToString(), dest);
  }
}
