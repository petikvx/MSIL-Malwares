// Decompiled with JetBrains decompiler
// Type: 697494430235.314903316966
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003226094756440;
using \u003319370708528;
using \u003462605226301;
using \u003490636185502;
using \u003697494430235;
using \u003860102105793;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace \u003697494430235
{
  [Obsolete("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Newtonsoft.Json.Bson for more details.")]
  public class \u003314903316966 : \u003250925846196
  {
    private const int \u003198739549811 = 128;
    private static readonly byte[] \u003570340730911 = new byte[2]
    {
      (byte) 0,
      (byte) 127
    };
    private static readonly byte[] \u003410457724763 = new byte[2]
    {
      (byte) 194,
      (byte) 223
    };
    private static readonly byte[] \u003728645139237 = new byte[2]
    {
      (byte) 224,
      (byte) 239
    };
    private static readonly byte[] \u003923436289813 = new byte[2]
    {
      (byte) 240,
      (byte) 244
    };
    private readonly BinaryReader \u003244007764768;
    private readonly List<\u003314903316966.\u003356152047432> \u003685402287172;
    private byte[] \u003907088302496;
    private char[] \u003137170558432;
    private \u003912974945849 \u003542849731901;
    private \u003314903316966.\u003772641485157 \u003473250276474;
    private \u003314903316966.\u003356152047432 \u003936936926531;
    private bool \u003498705814803;
    private bool \u003644737782688;
    private DateTimeKind \u003323310088993;

    [Obsolete("JsonNet35BinaryCompatibility will be removed in a future version of Json.NET.")]
    public bool \u003370586154332
    {
      get => this.\u003644737782688;
      set => this.\u003644737782688 = value;
    }

    public bool \u003201076706091
    {
      get => this.\u003498705814803;
      set => this.\u003498705814803 = value;
    }

    public DateTimeKind \u003898662338227
    {
      get => this.\u003323310088993;
      set => this.\u003323310088993 = value;
    }

    public \u003314903316966(Stream stream)
      : this(stream, false, DateTimeKind.Local)
    {
    }

    public \u003314903316966(BinaryReader reader)
      : this(reader, false, DateTimeKind.Local)
    {
    }

    public \u003314903316966(
      Stream stream,
      bool readRootValueAsArray,
      DateTimeKind dateTimeKindHandling)
    {
      \u003821784578685.\u003260732825936((object) stream, nameof (stream));
      this.\u003244007764768 = new BinaryReader(stream);
      this.\u003685402287172 = new List<\u003314903316966.\u003356152047432>();
      this.\u003498705814803 = readRootValueAsArray;
      this.\u003323310088993 = dateTimeKindHandling;
    }

    public \u003314903316966(
      BinaryReader reader,
      bool readRootValueAsArray,
      DateTimeKind dateTimeKindHandling)
    {
      \u003821784578685.\u003260732825936((object) reader, nameof (reader));
      this.\u003244007764768 = reader;
      this.\u003685402287172 = new List<\u003314903316966.\u003356152047432>();
      this.\u003498705814803 = readRootValueAsArray;
      this.\u003323310088993 = dateTimeKindHandling;
    }

    private string \u003378779457360()
    {
      this.\u003542849731901 = this.\u003047306259369();
      return this.\u003596083145828();
    }

    public virtual bool \u003832981189160()
    {
      // ISSUE: unable to decompile the method.
    }

    public virtual void \u003903257292679()
    {
      this.\u003104324098211();
      if (!this.\u003150239391061)
        return;
      this.\u003244007764768?.Close();
    }

    private bool \u003393074729352()
    {
      // ISSUE: unable to decompile the method.
    }

    private bool \u003669236374128()
    {
      // ISSUE: unable to decompile the method.
    }

    private bool \u003725530686115()
    {
      // ISSUE: unable to decompile the method.
    }

    private void \u003624238100258()
    {
      this.\u003685402287172.RemoveAt(this.\u003685402287172.Count - 1);
      if (this.\u003685402287172.Count == 0)
        this.\u003936936926531 = (\u003314903316966.\u003356152047432) null;
      else
        this.\u003936936926531 = this.\u003685402287172[this.\u003685402287172.Count - 1];
    }

    private void \u003187471562851(\u003314903316966.\u003356152047432 _param1)
    {
      this.\u003685402287172.Add(_param1);
      this.\u003936936926531 = _param1;
    }

    private byte \u003980419872089()
    {
      this.\u003797985335023(1);
      return this.\u003244007764768.ReadByte();
    }

    private void \u003605982306779(\u003912974945849 _param1)
    {
      // ISSUE: unable to decompile the method.
    }

    private byte[] \u003393986693639(out \u003100041166675 _param1)
    {
      int num = this.\u003104074421300();
      _param1 = (\u003100041166675) this.\u003980419872089();
      if (_param1 == \u003100041166675.BinaryOld && !this.\u003644737782688)
        num = this.\u003104074421300();
      return this.\u003837617475502(num);
    }

    private string \u003596083145828()
    {
      this.\u003917537975892();
      StringBuilder stringBuilder = (StringBuilder) null;
      int num1 = 0;
      int length = 0;
      int byteCount;
      while (true)
      {
        int num2 = length;
        byte num3;
        while (num2 < 128 && (num3 = this.\u003244007764768.ReadByte()) > (byte) 0)
          this.\u003907088302496[num2++] = num3;
        byteCount = num2 - length;
        num1 += byteCount;
        if (num2 >= 128 || stringBuilder != null)
        {
          int num4 = this.\u003377359169887(num2 - 1);
          int chars = Encoding.UTF8.GetChars(this.\u003907088302496, 0, num4 + 1, this.\u003137170558432, 0);
          if (stringBuilder == null)
            stringBuilder = new StringBuilder(256);
          stringBuilder.Append(this.\u003137170558432, 0, chars);
          if (num4 < byteCount - 1)
          {
            length = byteCount - num4 - 1;
            Array.Copy((Array) this.\u003907088302496, num4 + 1, (Array) this.\u003907088302496, 0, length);
          }
          else if (num2 >= 128)
            length = 0;
          else
            goto label_11;
        }
        else
          break;
      }
      int chars1 = Encoding.UTF8.GetChars(this.\u003907088302496, 0, byteCount, this.\u003137170558432, 0);
      this.\u003797985335023(num1 + 1);
      return new string(this.\u003137170558432, 0, chars1);
label_11:
      this.\u003797985335023(num1 + 1);
      return stringBuilder.ToString();
    }

    private string \u003544840091562()
    {
      int num1 = this.\u003104074421300();
      this.\u003797985335023(num1);
      string str = this.\u003317095546108(num1 - 1);
      int num2 = (int) this.\u003244007764768.ReadByte();
      return str;
    }

    private string \u003317095546108(int _param1)
    {
      if (_param1 == 0)
        return string.Empty;
      this.\u003917537975892();
      StringBuilder stringBuilder = (StringBuilder) null;
      int num1 = 0;
      int num2 = 0;
      do
      {
        int count = _param1 - num1 > 128 - num2 ? 128 - num2 : _param1 - num1;
        int num3 = this.\u003244007764768.Read(this.\u003907088302496, num2, count);
        if (num3 == 0)
          throw new EndOfStreamException("Unable to read beyond the end of the stream.");
        num1 += num3;
        int byteCount = num3 + num2;
        if (byteCount == _param1)
          return new string(this.\u003137170558432, 0, Encoding.UTF8.GetChars(this.\u003907088302496, 0, byteCount, this.\u003137170558432, 0));
        int num4 = this.\u003377359169887(byteCount - 1);
        if (stringBuilder == null)
          stringBuilder = new StringBuilder(_param1);
        int chars = Encoding.UTF8.GetChars(this.\u003907088302496, 0, num4 + 1, this.\u003137170558432, 0);
        stringBuilder.Append(this.\u003137170558432, 0, chars);
        if (num4 < byteCount - 1)
        {
          num2 = byteCount - num4 - 1;
          Array.Copy((Array) this.\u003907088302496, num4 + 1, (Array) this.\u003907088302496, 0, num2);
        }
        else
          num2 = 0;
      }
      while (num1 < _param1);
      return stringBuilder.ToString();
    }

    private int \u003377359169887(int _param1)
    {
      int index = _param1;
      int num = 0;
      for (; index >= 0; --index)
      {
        num = this.\u003944190419428(this.\u003907088302496[index]);
        switch (num)
        {
          case 0:
            continue;
          case 1:
            goto label_5;
          default:
            --index;
            goto label_5;
        }
      }
label_5:
      return num == _param1 - index ? _param1 : index;
    }

    private int \u003944190419428(byte _param1)
    {
      if ((int) _param1 <= (int) \u003314903316966.\u003570340730911[1])
        return 1;
      if ((int) _param1 >= (int) \u003314903316966.\u003410457724763[0] && (int) _param1 <= (int) \u003314903316966.\u003410457724763[1])
        return 2;
      if ((int) _param1 >= (int) \u003314903316966.\u003728645139237[0] && (int) _param1 <= (int) \u003314903316966.\u003728645139237[1])
        return 3;
      return (int) _param1 >= (int) \u003314903316966.\u003923436289813[0] && (int) _param1 <= (int) \u003314903316966.\u003923436289813[1] ? 4 : 0;
    }

    private void \u003917537975892()
    {
      if (this.\u003907088302496 == null)
        this.\u003907088302496 = new byte[128];
      if (this.\u003137170558432 != null)
        return;
      this.\u003137170558432 = new char[Encoding.UTF8.GetMaxCharCount(128)];
    }

    private double \u003348480457834()
    {
      this.\u003797985335023(8);
      return this.\u003244007764768.ReadDouble();
    }

    private int \u003104074421300()
    {
      this.\u003797985335023(4);
      return this.\u003244007764768.ReadInt32();
    }

    private long \u003382289175380()
    {
      this.\u003797985335023(8);
      return this.\u003244007764768.ReadInt64();
    }

    private \u003912974945849 \u003047306259369()
    {
      this.\u003797985335023(1);
      return (\u003912974945849) this.\u003244007764768.ReadSByte();
    }

    private void \u003797985335023(int _param1) => this.\u003936936926531.\u003833513364172 += _param1;

    private byte[] \u003837617475502(int _param1)
    {
      this.\u003797985335023(_param1);
      return this.\u003244007764768.ReadBytes(_param1);
    }

    private enum \u003772641485157
    {
      Normal,
      ReferenceStart,
      ReferenceRef,
      ReferenceId,
      CodeWScopeStart,
      CodeWScopeCode,
      CodeWScopeScope,
      CodeWScopeScopeObject,
      CodeWScopeScopeEnd,
    }

    private class \u003356152047432
    {
      public int \u003114489272487;
      public int \u003833513364172;
      public static readonly \u003982651865487.\u003689479063258.\u003028145628340 \u003905419308817 = new \u003982651865487.\u003689479063258.\u003028145628340();
    }
  }
}
