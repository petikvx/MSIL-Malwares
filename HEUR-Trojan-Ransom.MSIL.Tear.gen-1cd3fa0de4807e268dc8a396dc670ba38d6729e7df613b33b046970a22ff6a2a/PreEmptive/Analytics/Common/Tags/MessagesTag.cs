// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.MessagesTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.Text;

namespace PreEmptive.Analytics.Common.Tags
{
  public class MessagesTag : Tag
  {
    private const long a = 3;

    public override string TagName
    {
      get
      {
        int A_1 = 12;
        int num1 = 15635;
        int num2 = num1;
        num1 = 15635;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("궿\uA7C1럃뗅꧇귉꧋뷍", A_1);
          default:
            goto case 1;
        }
      }
    }

    private IList<Message> Messages
    {
      get
      {
        int num1 = 71;
        int num2 = num1;
        num1 = 71;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 23630;
        int num2 = num1;
        num1 = 23630;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public MessagesTag(
      Configuration configuration,
      AgentInfo agentInfo,
      IEnumerable<Message> messages)
    {
      int A_1 = 6;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.Messages = (IList<Message>) new List<Message>(messages);
      this.AddAttribute(Utils.a("승톻튽꺿뇁ﻃ뻅믇ꏉ", A_1), Utils.a("특좻쪽낿\uF8C1\uEBC3\uE9C5뿇뷉믋\uE0CD\uA7CF\uE1D1䀘맕\uAAD7뷙\uF3DB\uECDD탟틡헣짥냧\uA7E9ꃫ뷭鏯髱釳鯵駷ퟹ闻都珿瘁攃栅欇漉", A_1));
      this.AddAttribute(Utils.a("승쾻ힽ謹곁ꯃ装꧇\uA7C9꧋뷍ꃏ돑럓돕诗맙듛믝跟菡꣣觥诧诩飫蟭\u9FEF鳱", A_1), Utils.a("특좻쪽낿\uF8C1\uEBC3\uE9C5믇꧉\uA4CBꯍ뷏돑\uA7D3\uF8D5꣗꣙맛믝跟鋡郣迥黧迩싫跭\u9FEF\u9FF1\uDBF3藵鷷裹諻韽揿朁眃⤅攇漉缋納焏甑紓砕缗", A_1));
      this.AddAttribute(Utils.a("쪹캻톽뒿귁\uA7C3꧅\uA4C7", A_1), 3L.ToString());
      this.AddAttribute(Utils.a("\uDBB9\uDBBB\uDBBD꺿뛁\uE9C3\uA8C5꧇\uA7C9꧋", A_1), agentInfo.Name);
      this.AddAttribute(Utils.a("\uDBB9\uDBBB\uDBBD꺿뛁\uE9C3냅귇룉뿋\uA7CD뿏병", A_1), agentInfo.Version);
      this.AddAttribute(Utils.a("펹\uD8BB", A_1), Guid.NewGuid().ToString());
      this.AddAttribute(Utils.a("ힹ\uD9BB춽뎿ꏁꏃꏅ\uE5C7귉뻋ꇍꗏꋑ", A_1), configuration.MessageGroup.ToString());
      this.AddAttribute(Utils.a("즹\uD9BB킽뒿", A_1), DateTime.UtcNow.ToISOFormat());
      this.InnerTags.Add((Tag) new CompanyTag(configuration.CompanyID.ToString(), configuration.CompanyName));
      this.InnerTags.Add((Tag) new ApplicationTag(configuration.ApplicationID.ToString(), configuration.ApplicationName, configuration.ApplicationVersion, configuration.ApplicationType, configuration.InstanceID));
    }

    public override string ToString(IAttributeLimiter limits)
    {
      int num1 = 29406;
      int num2 = num1;
      num1 = 29406;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          StringBuilder sb = new StringBuilder((this.Messages.Count + 2) * 300);
          this.AppendToStringBuilder(sb, limits);
          return sb.ToString();
        default:
          goto case 1;
      }
    }

    protected override void AppendSerializedInnerTags(StringBuilder sb, IAttributeLimiter limits)
    {
      base.AppendSerializedInnerTags(sb, limits);
      IEnumerator<Message> enumerator = this.Messages.GetEnumerator();
      try
      {
        int num = 2;
        while (true)
        {
          switch (num)
          {
            case 0:
              num = 1;
              continue;
            case 1:
              goto label_19;
            case 2:
              switch (0)
              {
                case 0:
                  break;
                default:
                  continue;
              }
              break;
            case 3:
              if (enumerator.MoveNext())
              {
                if (false)
                  ;
                enumerator.Current.AppendToStringBuilder(sb, limits);
                num = 4;
                continue;
              }
              num = 0;
              continue;
          }
          num = 3;
        }
label_19:;
      }
      finally
      {
        int num = 2;
        while (true)
        {
          switch (num)
          {
            case 0:
              goto label_20;
            case 1:
              switch (true ? 1 : 0)
              {
                case 0:
                case 2:
                  num = 0;
                  continue;
                default:
                  if (true)
                    ;
                  enumerator.Dispose();
                  goto case 0;
              }
            case 2:
              switch (0)
              {
                case 0:
                  break;
                default:
                  continue;
              }
              break;
          }
          if (enumerator != null)
            num = 1;
          else
            break;
        }
label_20:;
      }
    }
  }
}
